void sub_245BFCF98(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_245BFD138(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_245BFD274(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_245BFD2FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_245BFD3B4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_245BFD498(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_245BFD670(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_245BFD7C0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_245BFDFF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21,void *a22,void *a23,void *a24,void *a25,void *a26,void *a27,void *a28,void *a29,void *a30,void *a31,void *a32,void *a33,void *a34,void *a35,void *a36,void *a37,void *a38,void *a39,void *a40,void *a41,void *a42)
{
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;

  _Unwind_Resume(a1);
}

void sub_245BFE3CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_245BFE544(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_245BFE5C4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_245BFE638(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_245BFE710(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  if (a15 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_245BFE7F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  if (a15 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

_QWORD *std::string::basic_string[abi:ne180100]<0>(_QWORD *a1, char *__s)
{
  size_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v4;
    v6 = a1;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  return a1;
}

void std::string::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("basic_string");
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_2516E0670, MEMORY[0x24BEDAAF0]);
}

void sub_245BFE978(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8B8] + 16);
  return result;
}

scml::MultiwordGazetteer *scml::MultiwordGazetteer::MultiwordGazetteer(scml::MultiwordGazetteer *this, NSLocale *a2, NSString *a3, uint64_t a4)
{
  NSLocale *v7;
  NSString *v8;
  scml::MultiwordGazetteer::Impl *v9;

  v7 = a2;
  v8 = a3;
  v9 = (scml::MultiwordGazetteer::Impl *)operator new();
  scml::MultiwordGazetteer::Impl::Impl(v9, v7, v8, a4);
  *(_QWORD *)this = v9;

  return this;
}

void sub_245BFEA30(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;

  MEMORY[0x249544F58](v3, 0x10A0C4017A2E280);

  _Unwind_Resume(a1);
}

void scml::MultiwordGazetteer::~MultiwordGazetteer(scml::MultiwordGazetteer *this)
{
  uint64_t v1;

  v1 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v1)
    std::default_delete<scml::MultiwordGazetteer::Impl>::operator()[abi:ne180100]((uint64_t)this, v1);
}

{
  uint64_t v1;

  v1 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v1)
    std::default_delete<scml::MultiwordGazetteer::Impl>::operator()[abi:ne180100]((uint64_t)this, v1);
}

uint64_t scml::MultiwordGazetteer::hasGazetteerMatch(uint64_t *a1, void *a2, uint64_t a3, unint64_t a4)
{
  return scml::MultiwordGazetteer::Impl::hasGazetteerMatch(*a1, a2, a3, a4);
}

uint64_t scml::MultiwordGazetteer::Impl::hasGazetteerMatch(uint64_t a1, void *a2, uint64_t a3, unint64_t a4)
{
  id v7;
  void *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  unsigned int v19;
  uint64_t v20;

  v7 = a2;
  objc_msgSend(*(id *)(a1 + 72), "labelForString:", v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  if (v8)
  {
    v9 = 0;
    if (a4 <= 1)
      v10 = 1;
    else
      v10 = a4;
    v11 = a3 + 32 * a4 - 32;
    while (1)
    {
      ++v9;
      v12 = *(_QWORD *)(a1 + 64);
      if (v9 >= v12)
      {
LABEL_14:
        v19 = 0;
        goto LABEL_16;
      }
      v13 = *(void **)(a1 + 72);
      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("*** %@"), v7);
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v13, "labelForString:", v14);
      v15 = (void *)objc_claimAutoreleasedReturnValue();

      if (v15)
        break;
      if (v10 == v9)
        goto LABEL_14;
      v16 = v11;
      if (*(char *)(v11 + 23) < 0)
        v16 = *(_QWORD *)v11;
      objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%s %@"), v16, v7);
      v17 = objc_claimAutoreleasedReturnValue();

      objc_msgSend(*(id *)(a1 + 72), "labelForString:", v17);
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      v11 -= 32;

      v7 = (id)v17;
      if (!v18)
      {
        v19 = 0;
        v7 = (id)v17;
        goto LABEL_16;
      }
    }
    v19 = 1;
LABEL_16:
    if (v9 >= v12)
      v20 = 1;
    else
      v20 = v19;
  }
  else
  {
    v20 = 0;
  }

  return v20;
}

void sub_245BFEC44(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL scml::MultiwordGazetteer::hasGazetteerMatch(scml::MultiwordGazetteer::Impl **this, NSString *a2)
{
  return scml::MultiwordGazetteer::Impl::hasGazetteerMatch(*this, a2);
}

BOOL scml::MultiwordGazetteer::Impl::hasGazetteerMatch(scml::MultiwordGazetteer::Impl *this, NSString *a2)
{
  __CFString *v3;
  const __CFAllocator *v4;
  CFStringTokenizerTokenType Token;
  __CFString *v6;
  uint64_t v7;
  unint64_t v8;
  __CFString *v9;
  std::string v11;
  __CFString *v12;
  std::string __p;
  int v14;
  _BYTE v15[8];
  CFRange v16;
  CFRange CurrentTokenRange;

  v3 = a2;
  std::mutex::lock((std::mutex *)this);
  v16.length = CFStringGetLength(v3);
  v16.location = 0;
  CFStringTokenizerSetString(*((CFStringTokenizerRef *)this + 10), v3, v16);
  language_modeling::v1::LinguisticContext::LinguisticContext((language_modeling::v1::LinguisticContext *)v15);
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  v14 = 1;
  MEMORY[0x249544A0C](v15, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v4 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  while (1)
  {
    Token = CFStringTokenizerAdvanceToNextToken(*((CFStringTokenizerRef *)this + 10));
    if (!Token)
      break;
    CurrentTokenRange = CFStringTokenizerGetCurrentTokenRange((CFStringTokenizerRef)*((_QWORD *)this + 10));
    v6 = (__CFString *)CFStringCreateWithSubstring(v4, v3, CurrentTokenRange);
    v12 = v6;
    v7 = language_modeling::v1::LinguisticContext::tokenSpan((language_modeling::v1::LinguisticContext *)v15);
    if ((scml::MultiwordGazetteer::Impl::hasGazetteerMatch((uint64_t)this, v6, v7, v8) & 1) != 0)
    {
      if (v6)
        CFRelease(v6);
      break;
    }
    v9 = objc_retainAutorelease(v6);
    std::string::basic_string[abi:ne180100]<0>(&v11, (char *)-[__CFString UTF8String](v9, "UTF8String"));
    if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&__p, v11.__r_.__value_.__l.__data_, v11.__r_.__value_.__l.__size_);
    else
      __p = v11;
    v14 = 0;
    MEMORY[0x249544A0C](v15, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v11.__r_.__value_.__l.__data_);
      if (v9)
LABEL_15:
        CFRelease(v9);
    }
    else if (v9)
    {
      goto LABEL_15;
    }
  }
  language_modeling::v1::LinguisticContext::~LinguisticContext((language_modeling::v1::LinguisticContext *)v15);
  std::mutex::unlock((std::mutex *)this);

  return Token != 0;
}

void sub_245BFEE28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  void *v15;
  std::mutex *v16;
  uint64_t v17;

  language_modeling::v1::LinguisticContext::~LinguisticContext((language_modeling::v1::LinguisticContext *)(v17 - 56));
  std::mutex::unlock(v16);

  _Unwind_Resume(a1);
}

id scml::MultiwordGazetteer::preprocess(void *a1)
{
  const __CFLocale *v1;
  const __CFAllocator *v2;
  CFStringTokenizerRef v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t j;
  __CFStringTokenizer *v9;
  __CFString *v10;
  id v11;
  void *v12;
  __CFString *v13;
  uint64_t v14;
  __CFString *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  void *v19;
  const __CFLocale *v21;
  id obj;
  uint64_t v23;
  uint64_t v24;
  id v25;
  id v26;
  uint64_t v27;
  uint64_t i;
  id v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __CFStringTokenizer *v41;
  _BYTE v42[128];
  _BYTE v43[128];
  uint64_t v44;
  CFRange v45;
  CFRange v46;
  CFRange CurrentTokenRange;

  v44 = *MEMORY[0x24BDAC8D0];
  v26 = a1;
  v1 = (const __CFLocale *)objc_msgSend(objc_alloc(MEMORY[0x24BDBCEA0]), "initWithLocaleIdentifier:", CFSTR("en_US"));
  v2 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  v45.location = 0;
  v45.length = 0;
  v21 = v1;
  v3 = CFStringTokenizerCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, v45, 0, v1);
  v41 = v3;
  v25 = (id)objc_msgSend(MEMORY[0x24BDBD1B8], "mutableCopy");
  v39 = 0u;
  v40 = 0u;
  v37 = 0u;
  v38 = 0u;
  objc_msgSend(v26, "allKeys");
  obj = (id)objc_claimAutoreleasedReturnValue();
  v4 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v37, v43, 16);
  if (v4)
  {
    v23 = v4;
    v24 = *(_QWORD *)v38;
    do
    {
      for (i = 0; i != v23; ++i)
      {
        if (*(_QWORD *)v38 != v24)
          objc_enumerationMutation(obj);
        v5 = *(_QWORD *)(*((_QWORD *)&v37 + 1) + 8 * i);
        v31 = (void *)objc_msgSend(MEMORY[0x24BDBD1A8], "mutableCopy");
        v35 = 0u;
        v36 = 0u;
        v33 = 0u;
        v34 = 0u;
        v27 = v5;
        objc_msgSend(v26, "objectForKeyedSubscript:", v5);
        v6 = (void *)objc_claimAutoreleasedReturnValue();
        v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v33, v42, 16);
        if (v7)
        {
          v29 = v6;
          v30 = *(_QWORD *)v34;
          do
          {
            v32 = v7;
            for (j = 0; j != v32; ++j)
            {
              if (*(_QWORD *)v34 != v30)
                objc_enumerationMutation(v29);
              v9 = v41;
              v10 = (__CFString *)*(id *)(*((_QWORD *)&v33 + 1) + 8 * j);
              v11 = v31;
              v46.length = CFStringGetLength(v10);
              v46.location = 0;
              CFStringTokenizerSetString(v9, v10, v46);
              v12 = (void *)objc_msgSend(MEMORY[0x24BDBD1A8], "mutableCopy");
              while (CFStringTokenizerAdvanceToNextToken(v9))
              {
                CurrentTokenRange = CFStringTokenizerGetCurrentTokenRange(v9);
                v13 = (__CFString *)CFStringCreateWithSubstring(v2, v10, CurrentTokenRange);
                objc_msgSend(v12, "addObject:", v13);

              }
              v14 = objc_msgSend(v12, "count");
              v15 = &stru_2516E5A08;
              while ((int)v14 > 0)
              {
                --v14;
                if (-[__CFString length](v15, "length"))
                {
                  v16 = (void *)MEMORY[0x24BDD17C8];
                  objc_msgSend(v12, "objectAtIndexedSubscript:", v14);
                  v17 = (void *)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v16, "stringWithFormat:", CFSTR("%@ %@"), v17, v15, v21);
                  v18 = objc_claimAutoreleasedReturnValue();

                  v15 = (__CFString *)v18;
                }
                else
                {
                  objc_msgSend(v12, "objectAtIndexedSubscript:", v14);
                  v17 = v15;
                  v15 = (__CFString *)objc_claimAutoreleasedReturnValue();
                }

                objc_msgSend(v11, "addObject:", v15);
              }
              objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("*** %@"), v15);
              v19 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v11, "addObject:", v19);

            }
            v6 = v29;
            v7 = objc_msgSend(v29, "countByEnumeratingWithState:objects:count:", &v33, v42, 16);
          }
          while (v7);
        }

        objc_msgSend(v25, "setObject:forKeyedSubscript:", v31, v27);
      }
      v23 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v37, v43, 16);
    }
    while (v23);
    v3 = v41;
  }

  if (v3)
    CFRelease(v3);

  return v25;
}

void sub_245BFF254(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, uint64_t a14, void *a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,const void *a40)
{

  nlp::CFScopedPtr<__CFStringTokenizer *>::reset(&a40, 0);
  _Unwind_Resume(a1);
}

void scml::MultiwordGazetteer::writePreprocessed(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  uint64_t v6;
  char v7;
  scml *v8;
  scml *v9;
  void *exception;
  _QWORD v11[3];
  _QWORD v12[3];
  id v13;
  id v14;

  v3 = a1;
  v4 = a2;
  v14 = v4;
  objc_msgSend(MEMORY[0x24BDBCF48], "fileURLWithPath:", v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = *MEMORY[0x24BDDFC18];
  v13 = 0;
  v7 = objc_msgSend(MEMORY[0x24BDDFD48], "writeGazetteerForDictionary:language:toURL:error:", v3, v6, v5, &v13);
  v8 = (scml *)v13;
  if ((v7 & 1) == 0)
  {
    v9 = v8;
    exception = __cxa_allocate_exception(0x10uLL);
    scml::strFromNSError(v9, v11);
    scml::strCat<char const(&)[30],NSString * {__strong}&,char const(&)[3],std::string>("Failed to write gazetteer to ", (uint64_t)&v14, ": ", (uint64_t)v11, v12);
    MEMORY[0x249544C64](exception, v12);
    __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }

}

void sub_245BFF484(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22)
{
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  int v26;

  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v26 & 1) == 0)
    {
LABEL_8:

      _Unwind_Resume(a1);
    }
  }
  else if (!v26)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v25);
  goto LABEL_8;
}

uint64_t scml::strCat<char const(&)[30],NSString * {__strong}&,char const(&)[3],std::string>@<X0>(char *a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v11;
  _QWORD v12[10];
  char v13;
  uint64_t v14;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v11);
  scml::scml_impl::strCat<char const(&)[30],NSString * {__strong}&,char const(&)[3],std::string>(&v11, a1, a2, a3, a4);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v12, a5);
  v11 = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)&v12[-1] + *(_QWORD *)(v11 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v12[0] = MEMORY[0x24BEDB848] + 16;
  if (v13 < 0)
    operator delete((void *)v12[8]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x249544EE0](&v14);
}

void sub_245BFF5EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::ostringstream::~ostringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  std::string *v5;
  std::string::size_type v6;
  std::string::size_type v7;
  std::string *v8;

  v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17)
      v6 = __sz | 7;
    v7 = v6 + 1;
    v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    v5 = v8;
  }
  else
  {
    *((_BYTE *)&this->__r_.__value_.__s + 23) = __sz;
  }
  memmove(v5, __s, __sz + 1);
}

void nlp::CFScopedPtr<__CFString const*>::reset(const void **a1, const void *a2)
{
  const void *v4;

  v4 = *a1;
  if (v4)
    CFRelease(v4);
  *a1 = a2;
}

void nlp::CFScopedPtr<__CFStringTokenizer *>::reset(const void **a1, const void *a2)
{
  const void *v4;

  v4 = *a1;
  if (v4)
    CFRelease(v4);
  *a1 = a2;
}

scml::MultiwordGazetteer::Impl *scml::MultiwordGazetteer::Impl::Impl(scml::MultiwordGazetteer::Impl *this, NSLocale *a2, NSString *a3, uint64_t a4)
{
  NSLocale *v7;
  NSString *v8;
  void *v9;
  uint64_t v10;
  scml *v11;
  void *v12;
  CFStringTokenizerRef v13;
  void *exception;
  std::runtime_error *v16;
  _QWORD v17[3];
  id v18;
  CFRange v19;

  v7 = a2;
  v8 = a3;
  *(_QWORD *)this = 850045863;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = a4;
  *((_QWORD *)this + 10) = 0;
  objc_msgSend(MEMORY[0x24BDBCF48], "fileURLWithPath:", v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v18 = 0;
  v10 = objc_msgSend(objc_alloc(MEMORY[0x24BDDFD48]), "initWithContentsOfURL:error:", v9, &v18);
  v11 = (scml *)v18;
  v12 = (void *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = v10;

  if (!*((_QWORD *)this + 9))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    scml::strFromNSError(v11, v17);
    MEMORY[0x249544C64](exception, v17);
    __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  v19.location = 0;
  v19.length = 0;
  v13 = CFStringTokenizerCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, v19, 0, (CFLocaleRef)v7);
  nlp::CFScopedPtr<__CFStringTokenizer *>::reset((const void **)this + 10, v13);
  if (!*((_QWORD *)this + 10))
  {
    v16 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v16, "failed to init tokenizer");
    __cxa_throw(v16, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }

  return this;
}

void sub_245BFF8A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;
  uint64_t v15;
  void *v16;
  const void **v17;
  void *v18;
  void *v19;
  void *v20;

  __cxa_free_exception(v20);

  nlp::CFScopedPtr<__CFStringTokenizer *>::reset(v17, 0);
  std::mutex::~mutex((std::mutex *)v15);

  _Unwind_Resume(a1);
}

void std::default_delete<scml::MultiwordGazetteer::Impl>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    nlp::CFScopedPtr<__CFStringTokenizer *>::reset((const void **)(a2 + 80), 0);

    std::mutex::~mutex((std::mutex *)a2);
    JUMPOUT(0x249544F58);
  }
}

uint64_t std::ostringstream::basic_ostringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::ios_base *v6;

  v2 = MEMORY[0x24BEDB870];
  v3 = MEMORY[0x24BEDB870] + 64;
  *(_QWORD *)(a1 + 112) = MEMORY[0x24BEDB870] + 64;
  v4 = *(_QWORD *)(MEMORY[0x24BEDB800] + 8);
  v5 = *(_QWORD *)(MEMORY[0x24BEDB800] + 16);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + *(_QWORD *)(v4 - 24)) = v5;
  v6 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v6, (void *)(a1 + 8));
  v6[1].__vftable = 0;
  v6[1].__fmtflags_ = -1;
  *(_QWORD *)a1 = v2 + 24;
  *(_QWORD *)(a1 + 112) = v3;
  std::streambuf::basic_streambuf();
  *(_QWORD *)(a1 + 8) = MEMORY[0x24BEDB848] + 16;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 16;
  return a1;
}

void sub_245BFFA34(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x249544EE0](v1);
  _Unwind_Resume(a1);
}

uint64_t scml::scml_impl::strCat<char const(&)[30],NSString * {__strong}&,char const(&)[3],std::string>(_QWORD *a1, char *__s, uint64_t a3, char *a4, uint64_t a5)
{
  size_t v9;

  v9 = strlen(__s);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)__s, v9);
  std::ostream::operator<<();
  return scml::scml_impl::strCat<char const(&)[3],std::string>(a1, a4, a5);
}

uint64_t std::ostringstream::~ostringstream(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *(_QWORD *)a1 = *MEMORY[0x24BEDB800];
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 8) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x249544EE0](a1 + 112);
  return a1;
}

_QWORD *std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  const std::locale::facet *v10;
  uint64_t v11;
  _BYTE v13[16];
  std::locale v14;

  MEMORY[0x249544DB4](v13, a1);
  if (v13[0])
  {
    v6 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
    v7 = *(_QWORD *)(v6 + 40);
    v8 = *(_DWORD *)(v6 + 8);
    v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
      v10 = std::locale::use_facet(&v14, MEMORY[0x24BEDB350]);
      v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }
    if ((v8 & 0xB0) == 0x20)
      v11 = a2 + a3;
    else
      v11 = a2;
    if (!std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(v7, a2, v11, a2 + a3, v6, (char)v9))
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 5);
  }
  MEMORY[0x249544DC0](v13);
  return a1;
}

void sub_245BFFC5C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  _QWORD *v12;

  MEMORY[0x249544DC0](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(_QWORD *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x245BFFC3CLL);
}

void sub_245BFFCA4(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6;
  uint64_t v11;
  int64_t v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  void *__p[2];
  char v18;

  v6 = a1;
  if (a1)
  {
    v11 = *(_QWORD *)(a5 + 24);
    if (v11 <= a4 - a2)
      v12 = 0;
    else
      v12 = v11 - (a4 - a2);
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1) != a3 - a2)
      return 0;
    if (v12 >= 1)
    {
      std::string::basic_string[abi:ne180100](__p, v12, __c);
      v13 = v18 >= 0 ? __p : (void **)__p[0];
      v14 = (*(uint64_t (**)(uint64_t, void **, int64_t))(*(_QWORD *)v6 + 96))(v6, v13, v12);
      if (v18 < 0)
        operator delete(__p[0]);
      if (v14 != v12)
        return 0;
    }
    v15 = a4 - a3;
    if (v15 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 96))(v6, a3, v15) == v15)
      *(_QWORD *)(a5 + 24) = 0;
    else
      return 0;
  }
  return v6;
}

void sub_245BFFDD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::string::basic_string[abi:ne180100](_QWORD *__b, size_t __len, int __c)
{
  void *v6;
  size_t v7;
  size_t v8;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    __b[1] = __len;
    __b[2] = v8 | 0x8000000000000000;
    *__b = v6;
  }
  else
  {
    *((_BYTE *)__b + 23) = __len;
    v6 = __b;
    if (!__len)
      goto LABEL_9;
  }
  memset(v6, __c, __len);
LABEL_9:
  *((_BYTE *)v6 + __len) = 0;
  return __b;
}

uint64_t scml::scml_impl::strCat<char const(&)[3],std::string>(_QWORD *a1, char *__s, uint64_t a3)
{
  size_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;

  v6 = strlen(__s);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)__s, v6);
  v7 = *(char *)(a3 + 23);
  if (v7 >= 0)
    v8 = a3;
  else
    v8 = *(_QWORD *)a3;
  if (v7 >= 0)
    v9 = *(unsigned __int8 *)(a3 + 23);
  else
    v9 = *(_QWORD *)(a3 + 8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, v8, v9);
  return scml::scml_impl::strCat<>(a1);
}

uint64_t std::stringbuf::str[abi:ne180100]<std::allocator<char>>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  unint64_t v4;
  const void *v5;
  size_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  result = std::stringbuf::view[abi:ne180100](a1);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = (const void *)result;
  v6 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v9 = operator new(v7 + 1);
    a2[1] = v6;
    a2[2] = v8 | 0x8000000000000000;
    *a2 = v9;
    a2 = v9;
  }
  else
  {
    *((_BYTE *)a2 + 23) = v4;
    if (!v4)
      goto LABEL_9;
  }
  result = (uint64_t)memmove(a2, v5, v6);
LABEL_9:
  *((_BYTE *)a2 + v6) = 0;
  return result;
}

uint64_t std::stringbuf::view[abi:ne180100](uint64_t a1)
{
  int v1;
  unint64_t v3;

  v1 = *(_DWORD *)(a1 + 96);
  if ((v1 & 0x10) != 0)
  {
    v3 = *(_QWORD *)(a1 + 48);
    if (*(_QWORD *)(a1 + 88) < v3)
      *(_QWORD *)(a1 + 88) = v3;
    return *(_QWORD *)(a1 + 40);
  }
  else if ((v1 & 8) != 0)
  {
    return *(_QWORD *)(a1 + 16);
  }
  else
  {
    return 0;
  }
}

void sub_245C0005C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_245C000E4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_245C00244(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_245C00348(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_245C006F4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

uint64_t scml::TextModerationTokenizerConfig::fromConfigFile@<X0>(void *__src@<X0>, size_t __len@<X1>, uint64_t a3@<X8>)
{
  std::string *p_dst;
  size_t v7;
  size_t v8;
  std::string *v9;
  __int128 v10;
  void **v11;
  uint64_t v12;
  const std::string *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  size_t v26;
  size_t v27;
  void **v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  std::string __dst;
  void *__p[2];
  int64_t v36;
  void **v37;
  _BYTE v38[56];
  std::__shared_weak_count *v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  if (__len >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    p_dst = (std::string *)operator new(v7 + 1);
    __dst.__r_.__value_.__l.__size_ = __len;
    __dst.__r_.__value_.__r.__words[2] = v8 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = __len;
    p_dst = &__dst;
    if (!__len)
      goto LABEL_9;
  }
  memmove(p_dst, __src, __len);
LABEL_9:
  p_dst->__r_.__value_.__s.__data_[__len] = 0;
  v9 = std::string::append(&__dst, ".vocab.json", 0xBuLL);
  v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v36 = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  if (v36 >= 0)
    v11 = __p;
  else
    v11 = (void **)__p[0];
  if (v36 >= 0)
    v12 = HIBYTE(v36);
  else
    v12 = (uint64_t)__p[1];
  scml::Config::loadJson(v11, v12, (uint64_t)v38);
  if (SHIBYTE(v36) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  *(_BYTE *)a3 = 0;
  *(_OWORD *)(a3 + 8) = 0u;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_DWORD *)(a3 + 40) = 1065353216;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_QWORD *)(a3 + 96) = 0;
  *(_DWORD *)(a3 + 104) = 1065353216;
  *(_QWORD *)(a3 + 112) = 0;
  *(_QWORD *)(a3 + 120) = 0;
  *(_QWORD *)(a3 + 128) = 0;
  LOWORD(__p[0]) = 0;
  *(_BYTE *)a3 = scml::Config::get<BOOL>((uint64_t)v38, "lexical_tokenization", 0x14uLL, __p);
  LOBYTE(__p[0]) = 0;
  LOBYTE(v37) = 0;
  v13 = (const std::string *)scml::Config::get<std::string>((uint64_t)v38, "coder_type", 0xAuLL, (uint64_t)__p);
  std::string::operator=((std::string *)(a3 + 112), v13);
  if ((_BYTE)v37 && SHIBYTE(v36) < 0)
    operator delete(__p[0]);
  LOBYTE(__p[0]) = 0;
  LOBYTE(v37) = 0;
  v14 = (uint64_t *)scml::Config::get<std::vector<scml::Config>>((uint64_t)v38, "keep_cap_words", 0xEuLL, (uint64_t)__p);
  if ((_BYTE)v37)
  {
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
    std::vector<scml::Config>::__destroy_vector::operator()[abi:ne180100]((void ***)&__dst);
  }
  v15 = *v14;
  v16 = v14[1];
  if (*v14 != v16)
  {
    do
    {
      v17 = (unsigned __int8 *)scml::Config::as<std::string>(v15);
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a3 + 72, v17, (uint64_t)v17);
      v15 += 64;
    }
    while (v15 != v16);
  }
  LOBYTE(__p[0]) = 0;
  LOBYTE(v37) = 0;
  v18 = (uint64_t *)scml::Config::get<std::vector<scml::Config>>((uint64_t)v38, "contractions", 0xCuLL, (uint64_t)__p);
  if ((_BYTE)v37)
  {
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
    std::vector<scml::Config>::__destroy_vector::operator()[abi:ne180100]((void ***)&__dst);
  }
  v19 = *v18;
  v20 = v18[1];
  while (v19 != v20)
  {
    v21 = (unsigned __int8 *)scml::Config::as<std::string>(v19);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a3 + 8, v21, (uint64_t)v21);
    v19 += 64;
  }
  LOBYTE(__p[0]) = 0;
  LOBYTE(v37) = 0;
  v22 = (uint64_t *)scml::Config::get<std::vector<scml::Config>>((uint64_t)v38, "word_processings", 0x10uLL, (uint64_t)__p);
  if ((_BYTE)v37)
  {
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
    std::vector<scml::Config>::__destroy_vector::operator()[abi:ne180100]((void ***)&__dst);
  }
  v23 = *v22;
  v24 = v22[1];
  while (v23 != v24)
  {
    v25 = scml::Config::as<std::string>(v23);
    v26 = *(_QWORD *)(v25 + 8);
    if (*(char *)(v25 + 23) >= 0)
    {
      v27 = *(unsigned __int8 *)(v25 + 23);
    }
    else
    {
      v25 = *(_QWORD *)v25;
      v27 = v26;
    }
    scml::TextModerationTokenizer::lookupWordProcessing(v27, v25, __p);
    std::vector<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>>::push_back[abi:ne180100]((uint64_t *)(a3 + 48), (uint64_t)__p);
    v28 = v37;
    if (v37 == __p)
    {
      v28 = __p;
      v29 = 4;
    }
    else
    {
      if (!v37)
        goto LABEL_43;
      v29 = 5;
    }
    (*((void (**)(void))*v28 + v29))();
LABEL_43:
    v23 += 64;
  }
  v30 = v39;
  if (v39)
  {
    p_shared_owners = (unint64_t *)&v39->__shared_owners_;
    do
      v32 = __ldaxr(p_shared_owners);
    while (__stlxr(v32 - 1, p_shared_owners));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  return std::__variant_detail::__dtor<std::__variant_detail::__traits<decltype(nullptr),long long,double,std::string,std::vector<scml::Config>,std::unordered_map<std::string,scml::Config>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v38);
}

void sub_245C00B40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **p_p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  void **v30;

  if ((_BYTE)a22)
  {
    p_p = &__p;
    std::vector<scml::Config>::__destroy_vector::operator()[abi:ne180100](&p_p);
  }
  scml::TextModerationTokenizerConfig::~TextModerationTokenizerConfig(v30);
  std::shared_ptr<scml::Config::PathInfo>::~shared_ptr[abi:ne180100]((uint64_t)&a30);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<decltype(nullptr),long long,double,std::string,std::vector<scml::Config>,std::unordered_map<std::string,scml::Config>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&a24);
  _Unwind_Resume(a1);
}

BOOL scml::Config::get<BOOL>(uint64_t a1, const void *a2, size_t a3, _BYTE *a4)
{
  uint64_t v8;
  _QWORD *v9;
  void **p_dst;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  void *exception;
  void **v17;
  uint64_t v18;
  void **__dst;
  size_t v20;
  int64_t v21;
  uint64_t v22[2];

  v22[0] = (uint64_t)a2;
  v22[1] = a3;
  v8 = scml::Config::as<std::unordered_map<std::string,scml::Config>>(a1);
  if (a3 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v9 = (_QWORD *)v8;
  if (a3 >= 0x17)
  {
    v11 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17)
      v11 = a3 | 7;
    v12 = v11 + 1;
    p_dst = (void **)operator new(v11 + 1);
    v20 = a3;
    v21 = v12 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v21) = a3;
  p_dst = (void **)&__dst;
  if (a3)
LABEL_8:
    memmove(p_dst, a2, a3);
  *((_BYTE *)p_dst + a3) = 0;
  v13 = std::__hash_table<std::__hash_value_type<std::string,scml::Config>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,scml::Config>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,scml::Config>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,scml::Config>>>::find<std::string>(v9, (unsigned __int8 *)&__dst);
  v14 = v13;
  if (SHIBYTE(v21) < 0)
  {
    operator delete(__dst);
    if (v14)
      return scml::Config::as<BOOL>((uint64_t)(v14 + 40));
  }
  else if (v13)
  {
    return scml::Config::as<BOOL>((uint64_t)(v14 + 40));
  }
  if (!a4[1])
  {
    exception = __cxa_allocate_exception(0x10uLL);
    scml::strCat<std::string_view const&,char const(&)[11]>(v22, " not found", &__dst);
    if (v21 >= 0)
      v17 = (void **)&__dst;
    else
      v17 = __dst;
    if (v21 >= 0)
      v18 = HIBYTE(v21);
    else
      v18 = v20;
    scml::Config::error(a1, (uint64_t)v17, v18, (uint64_t)exception);
    __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  return *a4 != 0;
}

void sub_245C00DA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

uint64_t scml::Config::get<std::string>(uint64_t a1, const void *a2, size_t a3, uint64_t a4)
{
  uint64_t v8;
  _QWORD *v9;
  void **p_dst;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  void *exception;
  void **v17;
  uint64_t v18;
  void **__dst;
  size_t v20;
  int64_t v21;
  uint64_t v22[2];

  v22[0] = (uint64_t)a2;
  v22[1] = a3;
  v8 = scml::Config::as<std::unordered_map<std::string,scml::Config>>(a1);
  if (a3 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v9 = (_QWORD *)v8;
  if (a3 >= 0x17)
  {
    v11 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17)
      v11 = a3 | 7;
    v12 = v11 + 1;
    p_dst = (void **)operator new(v11 + 1);
    v20 = a3;
    v21 = v12 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v21) = a3;
  p_dst = (void **)&__dst;
  if (a3)
LABEL_8:
    memmove(p_dst, a2, a3);
  *((_BYTE *)p_dst + a3) = 0;
  v13 = std::__hash_table<std::__hash_value_type<std::string,scml::Config>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,scml::Config>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,scml::Config>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,scml::Config>>>::find<std::string>(v9, (unsigned __int8 *)&__dst);
  v14 = v13;
  if (SHIBYTE(v21) < 0)
  {
    operator delete(__dst);
    if (v14)
      return scml::Config::as<std::string>((uint64_t)(v14 + 40));
  }
  else if (v13)
  {
    return scml::Config::as<std::string>((uint64_t)(v14 + 40));
  }
  if (!*(_BYTE *)(a4 + 24))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    scml::strCat<std::string_view const&,char const(&)[11]>(v22, " not found", &__dst);
    if (v21 >= 0)
      v17 = (void **)&__dst;
    else
      v17 = __dst;
    if (v21 >= 0)
      v18 = HIBYTE(v21);
    else
      v18 = v20;
    scml::Config::error(a1, (uint64_t)v17, v18, (uint64_t)exception);
    __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  return a4;
}

void sub_245C00F68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

uint64_t scml::Config::get<std::vector<scml::Config>>(uint64_t a1, const void *a2, size_t a3, uint64_t a4)
{
  uint64_t v8;
  _QWORD *v9;
  void **p_dst;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  void *exception;
  void **v17;
  uint64_t v18;
  void **__dst;
  size_t v20;
  int64_t v21;
  uint64_t v22[2];

  v22[0] = (uint64_t)a2;
  v22[1] = a3;
  v8 = scml::Config::as<std::unordered_map<std::string,scml::Config>>(a1);
  if (a3 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v9 = (_QWORD *)v8;
  if (a3 >= 0x17)
  {
    v11 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17)
      v11 = a3 | 7;
    v12 = v11 + 1;
    p_dst = (void **)operator new(v11 + 1);
    v20 = a3;
    v21 = v12 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v21) = a3;
  p_dst = (void **)&__dst;
  if (a3)
LABEL_8:
    memmove(p_dst, a2, a3);
  *((_BYTE *)p_dst + a3) = 0;
  v13 = std::__hash_table<std::__hash_value_type<std::string,scml::Config>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,scml::Config>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,scml::Config>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,scml::Config>>>::find<std::string>(v9, (unsigned __int8 *)&__dst);
  v14 = v13;
  if (SHIBYTE(v21) < 0)
  {
    operator delete(__dst);
    if (v14)
      return scml::Config::as<std::vector<scml::Config>>((uint64_t)(v14 + 40));
  }
  else if (v13)
  {
    return scml::Config::as<std::vector<scml::Config>>((uint64_t)(v14 + 40));
  }
  if (!*(_BYTE *)(a4 + 24))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    scml::strCat<std::string_view const&,char const(&)[11]>(v22, " not found", &__dst);
    if (v21 >= 0)
      v17 = (void **)&__dst;
    else
      v17 = __dst;
    if (v21 >= 0)
      v18 = HIBYTE(v21);
    else
      v18 = v20;
    scml::Config::error(a1, (uint64_t)v17, v18, (uint64_t)exception);
    __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  return a4;
}

void sub_245C0112C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

uint64_t scml::Config::as<std::string>(uint64_t result)
{
  uint64_t v1;
  void *exception;

  if (*(_DWORD *)(result + 40) != 3)
  {
    v1 = result;
    exception = __cxa_allocate_exception(0x10uLL);
    scml::Config::error(v1, (uint64_t)"unexpected type", 15, (uint64_t)exception);
    __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  return result;
}

void sub_245C011E0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  void *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (v7 >= v6)
  {
    v10 = (uint64_t)(v7 - *a1) >> 5;
    if ((unint64_t)(v10 + 1) >> 59)
      std::vector<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>>::__throw_length_error[abi:ne180100]();
    v11 = v5 - *a1;
    v12 = v11 >> 4;
    if (v11 >> 4 <= (unint64_t)(v10 + 1))
      v12 = v10 + 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFE0)
      v13 = 0x7FFFFFFFFFFFFFFLL;
    else
      v13 = v12;
    v19 = v4;
    if (v13)
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>>>(v4, v13);
    else
      v14 = 0;
    v15 = v14;
    v16 = &v14[32 * v10];
    v18 = &v14[32 * v13];
    std::__function::__value_func<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>::__value_func[abi:ne180100]((uint64_t)v16, a2);
    v17 = v16 + 32;
    std::vector<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>>::__swap_out_circular_buffer(a1, &v15);
    v9 = a1[1];
    result = (uint64_t)std::__split_buffer<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>>::~__split_buffer(&v15);
  }
  else
  {
    result = std::__function::__value_func<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>::__value_func[abi:ne180100](*(_QWORD *)(v4 - 8), a2);
    v9 = v7 + 32;
    a1[1] = v7 + 32;
  }
  a1[1] = v9;
  return result;
}

void sub_245C012E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t scml::TextModerationTokenizer::lookupWordProcessing@<X0>(size_t __n@<X1>, uint64_t result@<X0>, _QWORD *a3@<X8>)
{
  void *v5;
  void *exception;
  _QWORD v7[3];
  uint64_t v8[2];

  v8[0] = result;
  v8[1] = __n;
  switch(__n)
  {
    case 0x10uLL:
      if (*(_QWORD *)result == 0x6E6F5F74696C7073 && *(_QWORD *)(result + 8) == 0x73646F697265705FLL)
      {
        v5 = scml::TextModerationTokenizer::splitOnPeriods;
      }
      else
      {
        result = memcmp((const void *)result, "add_space_suffix", __n);
        if ((_DWORD)result)
        {
LABEL_16:
          exception = __cxa_allocate_exception(0x10uLL);
          scml::strCat<char const(&)[28],std::string_view &>("word_processing not found: ", v8, v7);
          MEMORY[0x249544C64](exception, v7);
          __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
        }
        v5 = scml::TextModerationTokenizer::addSpaceSuffix;
      }
      break;
    case 0x14uLL:
      result = memcmp((const void *)result, "split_on_apostrophes", __n);
      if ((_DWORD)result)
        goto LABEL_16;
      v5 = scml::TextModerationTokenizer::splitOnApostrophes;
      break;
    case 0x15uLL:
      result = memcmp((const void *)result, "preserve_contractions", __n);
      if ((_DWORD)result)
        goto LABEL_16;
      v5 = scml::TextModerationTokenizer::preserveContractions;
      break;
    case 0x19uLL:
      result = memcmp((const void *)result, "add_capitalization_prefix", __n);
      if ((_DWORD)result)
        goto LABEL_16;
      v5 = scml::TextModerationTokenizer::addCapitalizationPrefix;
      break;
    default:
      goto LABEL_16;
  }
  *a3 = &unk_2516E3620;
  a3[1] = v5;
  a3[2] = 0;
  a3[3] = a3;
  return result;
}

void sub_245C01458(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

void scml::TextModerationTokenizerConfig::~TextModerationTokenizerConfig(void **this)
{
  void **v2;

  if (*((char *)this + 135) < 0)
    operator delete(this[14]);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)(this + 9));
  v2 = this + 6;
  std::vector<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)(this + 1));
}

scml::TextModerationTokenizer *scml::TextModerationTokenizer::TextModerationTokenizer(scml::TextModerationTokenizer *this)
{
  void **v2;
  std::string::size_type v3;
  void **v4;
  size_t v5;
  void *v7[2];
  unsigned __int8 v8;
  _BYTE v9[8];
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *__p;
  char v14;
  void *v15[2];
  unsigned __int8 v16;
  void **v17;

  v2 = v15;
  scml::TextModerationLM::defaultPathPrefix(v15);
  if ((v16 & 0x80u) == 0)
  {
    v3 = v16;
  }
  else
  {
    v2 = (void **)v15[0];
    v3 = (std::string::size_type)v15[1];
  }
  scml::TextModerationLM::defaultPathPrefix(v7);
  if ((v8 & 0x80u) == 0)
    v4 = v7;
  else
    v4 = (void **)v7[0];
  if ((v8 & 0x80u) == 0)
    v5 = v8;
  else
    v5 = (size_t)v7[1];
  scml::TextModerationTokenizerConfig::fromConfigFile(v4, v5, (uint64_t)v9);
  scml::TextModerationTokenizer::TextModerationTokenizer(this, v2, v3, (scml::TextModerationTokenizerConfig *)v9);
  if (v14 < 0)
    operator delete(__p);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v12);
  v17 = (void **)&v11;
  std::vector<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>>::__destroy_vector::operator()[abi:ne180100](&v17);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v10);
  if ((char)v8 < 0)
    operator delete(v7[0]);
  if ((char)v16 < 0)
    operator delete(v15[0]);
  return this;
}

{
  void **v2;
  std::string::size_type v3;
  void **v4;
  size_t v5;
  void *v7[2];
  unsigned __int8 v8;
  _BYTE v9[8];
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *__p;
  char v14;
  void *v15[2];
  unsigned __int8 v16;
  void **v17;

  v2 = v15;
  scml::TextModerationLM::defaultPathPrefix(v15);
  if ((v16 & 0x80u) == 0)
  {
    v3 = v16;
  }
  else
  {
    v2 = (void **)v15[0];
    v3 = (std::string::size_type)v15[1];
  }
  scml::TextModerationLM::defaultPathPrefix(v7);
  if ((v8 & 0x80u) == 0)
    v4 = v7;
  else
    v4 = (void **)v7[0];
  if ((v8 & 0x80u) == 0)
    v5 = v8;
  else
    v5 = (size_t)v7[1];
  scml::TextModerationTokenizerConfig::fromConfigFile(v4, v5, (uint64_t)v9);
  scml::TextModerationTokenizer::TextModerationTokenizer(this, v2, v3, (scml::TextModerationTokenizerConfig *)v9);
  if (v14 < 0)
    operator delete(__p);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v12);
  v17 = (void **)&v11;
  std::vector<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>>::__destroy_vector::operator()[abi:ne180100](&v17);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v10);
  if ((char)v8 < 0)
    operator delete(v7[0]);
  if ((char)v16 < 0)
    operator delete(v15[0]);
  return this;
}

void sub_245C015D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  uint64_t v15;

  scml::TextModerationTokenizerConfig::~TextModerationTokenizerConfig(&a15);
  if (a14 < 0)
    operator delete(__p);
  if (*(char *)(v15 - 41) < 0)
    operator delete(*(void **)(v15 - 64));
  _Unwind_Resume(a1);
}

scml::TextModerationTokenizerConfig *scml::TextModerationTokenizer::TextModerationTokenizer(scml::TextModerationTokenizerConfig *a1, const void *a2, std::string::size_type a3, scml::TextModerationTokenizerConfig *a4)
{
  sentencepiece::SentencePieceProcessor *v7;
  double v8;
  uint64_t v9;
  std::string *p_dst;
  uint64_t v11;
  uint64_t v12;
  std::string *v13;
  __int128 v14;
  void **v15;
  void *v16;
  const sentencepiece::util::Status *v17;
  const sentencepiece::util::Status *v18;
  std::string __dst;
  void *__p[2];
  int64_t v22;
  uint64_t v23;

  *((_QWORD *)scml::TextModerationTokenizerConfig::TextModerationTokenizerConfig(a1, a4) + 17) = 0;
  v7 = (sentencepiece::SentencePieceProcessor *)operator new();
  v8 = sentencepiece::SentencePieceProcessor::SentencePieceProcessor(v7);
  v9 = *((_QWORD *)a1 + 17);
  *((_QWORD *)a1 + 17) = v7;
  if (v9)
  {
    (*(void (**)(uint64_t, double))(*(_QWORD *)v9 + 8))(v9, v8);
    v7 = (sentencepiece::SentencePieceProcessor *)*((_QWORD *)a1 + 17);
  }
  if (a3 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (a3 >= 0x17)
  {
    v11 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17)
      v11 = a3 | 7;
    v12 = v11 + 1;
    p_dst = (std::string *)operator new(v11 + 1);
    __dst.__r_.__value_.__l.__size_ = a3;
    __dst.__r_.__value_.__r.__words[2] = v12 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_10;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = a3;
  p_dst = &__dst;
  if (a3)
LABEL_10:
    memmove(p_dst, a2, a3);
  p_dst->__r_.__value_.__s.__data_[a3] = 0;
  v13 = std::string::append(&__dst, ".vocab.model", 0xCuLL);
  v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v22 = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  if (v22 >= 0)
    v15 = __p;
  else
    v15 = (void **)__p[0];
  if (v22 >= 0)
    v16 = (void *)HIBYTE(v22);
  else
    v16 = __p[1];
  (*(void (**)(uint64_t *__return_ptr, sentencepiece::SentencePieceProcessor *, void **, void *))(*(_QWORD *)v7 + 16))(&v23, v7, v15, v16);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v23);
  if (SHIBYTE(v22) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  (*(void (**)(void **__return_ptr, _QWORD, const char *, uint64_t))(**((_QWORD **)a1 + 17) + 96))(__p, *((_QWORD *)a1 + 17), "bos", 3);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)__p);
  return a1;
}

void sub_245C017CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  uint64_t v22;
  uint64_t v24;

  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&__p);
  v24 = *(_QWORD *)(v22 + 136);
  *(_QWORD *)(v22 + 136) = 0;
  if (v24)
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  scml::TextModerationTokenizerConfig::~TextModerationTokenizerConfig((void **)v22);
  _Unwind_Resume(a1);
}

void sub_245C01958(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15)
{
  uint64_t v15;

  scml::TextModerationTokenizerConfig::~TextModerationTokenizerConfig(&a15);
  if (a14 < 0)
    operator delete(__p);
  if (*(char *)(v15 - 41) < 0)
    operator delete(*(void **)(v15 - 64));
  _Unwind_Resume(a1);
}

sentencepiece::util::Status *scml::`anonymous namespace'::throwIfError(sentencepiece::util::Status *this, const sentencepiece::util::Status *a2)
{
  sentencepiece::util::Status *v2;
  void *exception;
  std::string v4;

  if (*(_QWORD *)this)
  {
    v2 = this;
    exception = __cxa_allocate_exception(0x10uLL);
    sentencepiece::util::Status::ToString(v2, &v4);
    MEMORY[0x249544C64](exception, &v4);
    __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  return this;
}

void sub_245C01A1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

id scml::TextModerationTokenizer::splitOnPeriods(uint64_t a1, void *a2)
{
  unsigned __int8 v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  scml *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t j;
  void *v12;
  NSString *v14;
  id v15;
  id v16;
  id obj;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _BYTE v26[128];
  _BYTE v27[128];
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v15 = a2;
  if ((v2 & 1) == 0
  {
    scml::regexMake((scml *)CFSTR("\\."), v14);
    scml::TextModerationTokenizer::splitOnPeriods(NSArray<NSString *> *)const::periodRegex = objc_claimAutoreleasedReturnValue();
  }
  v3 = (void *)objc_msgSend(MEMORY[0x24BDBD1A8], "mutableCopy", v15);
  v24 = 0u;
  v25 = 0u;
  v22 = 0u;
  v23 = 0u;
  obj = v16;
  v4 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v22, v27, 16);
  if (v4)
  {
    v5 = *(_QWORD *)v23;
    do
    {
      for (i = 0; i != v4; ++i)
      {
        if (*(_QWORD *)v23 != v5)
          objc_enumerationMutation(obj);
        v7 = *(scml **)(*((_QWORD *)&v22 + 1) + 8 * i);
        v18 = 0u;
        v19 = 0u;
        v20 = 0u;
        v21 = 0u;
        scml::strSplitByRegex(v7, (NSString *)scml::TextModerationTokenizer::splitOnPeriods(NSArray<NSString *> *)const::periodRegex, (NSRegularExpression *)1);
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v18, v26, 16);
        if (v9)
        {
          v10 = *(_QWORD *)v19;
          do
          {
            for (j = 0; j != v9; ++j)
            {
              if (*(_QWORD *)v19 != v10)
                objc_enumerationMutation(v8);
              v12 = *(void **)(*((_QWORD *)&v18 + 1) + 8 * j);
              if (objc_msgSend(v12, "length"))
                objc_msgSend(v3, "addObject:", v12);
            }
            v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v18, v26, 16);
          }
          while (v9);
        }

      }
      v4 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v22, v27, 16);
    }
    while (v4);
  }

  return v3;
}

void sub_245C01C64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{

  _Unwind_Resume(a1);
}

id scml::TextModerationTokenizer::splitOnApostrophes(uint64_t a1, void *a2)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  void *v5;
  NSString *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  scml *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t j;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  void *v19;
  NSString *v21;
  NSString *v22;
  id v23;
  id v24;
  id obj;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  _BYTE v34[128];
  _BYTE v35[128];
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  v23 = a2;
  if ((v2 & 1) == 0
  {
    scml::regexMake((scml *)CFSTR("^\\w+('\\w+|’\\w+)"), v21);
    scml::TextModerationTokenizer::splitOnApostrophes(NSArray<NSString *> *)const::contractionRegex = objc_claimAutoreleasedReturnValue();
  }
  if ((v3 & 1) == 0
  {
    scml::regexMake((scml *)CFSTR("('\\w+|’\\w+)"), v22);
    scml::TextModerationTokenizer::splitOnApostrophes(NSArray<NSString *> *)const::suffixRegex = objc_claimAutoreleasedReturnValue();
  }
  if ((v4 & 1) == 0
  {
    scml::TextModerationTokenizer::splitOnApostrophes(NSArray<NSString *> *)const::apostrophes = (uint64_t)&unk_2516EB778;
  }
  v5 = (void *)objc_msgSend(MEMORY[0x24BDBD1A8], "mutableCopy", v23);
  v32 = 0u;
  v33 = 0u;
  v30 = 0u;
  v31 = 0u;
  obj = v24;
  v7 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v30, v35, 16);
  if (v7)
  {
    v8 = *(_QWORD *)v31;
    do
    {
      for (i = 0; i != v7; ++i)
      {
        if (*(_QWORD *)v31 != v8)
          objc_enumerationMutation(obj);
        v10 = *(scml **)(*((_QWORD *)&v30 + 1) + 8 * i);
        if (scml::regexSearch((scml *)scml::TextModerationTokenizer::splitOnApostrophes(NSArray<NSString *> *)const::contractionRegex, (NSRegularExpression *)v10, v6))
        {
          v28 = 0u;
          v29 = 0u;
          v26 = 0u;
          v27 = 0u;
          scml::strSplitByRegex(v10, (NSString *)scml::TextModerationTokenizer::splitOnApostrophes(NSArray<NSString *> *)const::suffixRegex, (NSRegularExpression *)1);
          v11 = (void *)objc_claimAutoreleasedReturnValue();
          v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v26, v34, 16);
          if (v12)
          {
            v13 = *(_QWORD *)v27;
            do
            {
              for (j = 0; j != v12; ++j)
              {
                if (*(_QWORD *)v27 != v13)
                  objc_enumerationMutation(v11);
                v15 = *(void **)(*((_QWORD *)&v26 + 1) + 8 * j);
                if (objc_msgSend(v15, "length"))
                  objc_msgSend(v5, "addObject:", v15);
              }
              v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v26, v34, 16);
            }
            while (v12);
          }
          goto LABEL_24;
        }
        if (-[scml isEqualToString:](v10, "isEqualToString:", CFSTR("s")))
        {
          if (objc_msgSend(v5, "count"))
          {
            v16 = (void *)scml::TextModerationTokenizer::splitOnApostrophes(NSArray<NSString *> *)const::apostrophes;
            objc_msgSend(v5, "objectAtIndexedSubscript:", objc_msgSend(v5, "count") - 1);
            v17 = (void *)objc_claimAutoreleasedReturnValue();
            LODWORD(v16) = objc_msgSend(v16, "containsObject:", v17);

            if ((_DWORD)v16)
            {
              v18 = objc_msgSend(v5, "count") - 1;
              objc_msgSend(v5, "objectAtIndexedSubscript:", v18);
              v11 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v11, "stringByAppendingString:", v10);
              v19 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend(v5, "setObject:atIndexedSubscript:", v19, v18);

LABEL_24:
              continue;
            }
          }
        }
        objc_msgSend(v5, "addObject:", v10);
      }
      v7 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v30, v35, 16);
    }
    while (v7);
  }

  return v5;
}

void sub_245C0202C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{

  _Unwind_Resume(a1);
}

id scml::TextModerationTokenizer::preserveContractions(uint64_t a1, void *a2)
{
  id v3;
  unsigned __int8 v4;
  void *v5;
  NSString *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  NSRegularExpression *v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  unsigned __int8 *v15;
  NSString *v17;
  id obj;
  void *__p[2];
  char v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _BYTE v25[128];
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  if ((v4 & 1) == 0
  {
    scml::regexMake((scml *)CFSTR("^('\\w+|’\\w+)$"), v17);
    scml::TextModerationTokenizer::preserveContractions(NSArray<NSString *> *)const::contractionRegex = objc_claimAutoreleasedReturnValue();
  }
  v5 = (void *)objc_msgSend(MEMORY[0x24BDBD1A8], "mutableCopy", v3);
  v23 = 0u;
  v24 = 0u;
  v21 = 0u;
  v22 = 0u;
  obj = v3;
  v7 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v21, v25, 16);
  if (v7)
  {
    v8 = *(_QWORD *)v22;
    do
    {
      for (i = 0; i != v7; ++i)
      {
        if (*(_QWORD *)v22 != v8)
          objc_enumerationMutation(obj);
        v10 = *(NSRegularExpression **)(*((_QWORD *)&v21 + 1) + 8 * i);
        if (scml::regexSearch((scml *)scml::TextModerationTokenizer::preserveContractions(NSArray<NSString *> *)const::contractionRegex, v10, v6)&& objc_msgSend(v5, "count"))
        {
          objc_msgSend(v5, "objectAtIndexedSubscript:", objc_msgSend(v5, "count") - 1);
          v11 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v11, "stringByAppendingString:", v10);
          v12 = (void *)objc_claimAutoreleasedReturnValue();

          objc_msgSend(v12, "stringByReplacingOccurrencesOfString:withString:", CFSTR("’"), CFSTR("'"));
          v13 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v13, "lowercaseString");
          v14 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
          std::string::basic_string[abi:ne180100]<0>(__p, (char *)objc_msgSend(v14, "UTF8String"));
          v15 = std::__hash_table<std::__hash_value_type<std::string,scml::Config>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,scml::Config>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,scml::Config>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,scml::Config>>>::find<std::string>((_QWORD *)(a1 + 8), (unsigned __int8 *)__p);
          if (v20 < 0)
            operator delete(__p[0]);

          if (v15)
            objc_msgSend(v5, "setObject:atIndexedSubscript:", v12, objc_msgSend(v5, "count") - 1);
          else
            objc_msgSend(v5, "addObject:", v10);

        }
        else
        {
          objc_msgSend(v5, "addObject:", v10);
        }
      }
      v7 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v21, v25, 16);
    }
    while (v7);
  }

  return v5;
}

void sub_245C0233C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{

  _Unwind_Resume(a1);
}

id scml::TextModerationTokenizer::addCapitalizationPrefix(scml::TextModerationTokenizer *a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  void *v9;
  void *v10;
  void *v11;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  v4 = (void *)objc_msgSend(MEMORY[0x24BDBD1A8], "mutableCopy");
  v15 = 0u;
  v16 = 0u;
  v13 = 0u;
  v14 = 0u;
  v5 = v3;
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
  if (v6)
  {
    v7 = *(_QWORD *)v14;
    do
    {
      for (i = 0; i != v6; ++i)
      {
        if (*(_QWORD *)v14 != v7)
          objc_enumerationMutation(v5);
        v9 = *(void **)(*((_QWORD *)&v13 + 1) + 8 * i);
        if (scml::TextModerationTokenizer::isCapitalized(a1, (NSString *)v9))
        {
          objc_msgSend(v9, "lowercaseString");
          v10 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(CFSTR("_U_CAP_"), "stringByAppendingString:", v10);
          v11 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v4, "addObject:", v11);

        }
        else
        {
          objc_msgSend(v4, "addObject:", v9, (_QWORD)v13);
        }
      }
      v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
    }
    while (v6);
  }

  return v4;
}

void sub_245C02534(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

id scml::TextModerationTokenizer::addSpaceSuffix(uint64_t a1, void *a2)
{
  id v2;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v2 = a2;
  v3 = (void *)objc_msgSend(MEMORY[0x24BDBD1A8], "mutableCopy");
  v11 = 0u;
  v12 = 0u;
  v9 = 0u;
  v10 = 0u;
  v4 = v2;
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (v5)
  {
    v6 = *(_QWORD *)v10;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v10 != v6)
          objc_enumerationMutation(v4);
        objc_msgSend(v3, "addObject:", *(_QWORD *)(*((_QWORD *)&v9 + 1) + 8 * v7), (_QWORD)v9);
        objc_msgSend(v3, "addObject:", CFSTR(" "));
        ++v7;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
    }
    while (v5);
  }

  return v3;
}

void sub_245C026A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t scml::strCat<char const(&)[28],std::string_view &>@<X0>(char *a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v7;
  _QWORD v8[10];
  char v9;
  uint64_t v10;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v7);
  scml::scml_impl::strCat<char const(&)[28],std::string_view &>(&v7, a1, a2);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v8, a3);
  v7 = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)&v8[-1] + *(_QWORD *)(v7 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v8[0] = MEMORY[0x24BEDB848] + 16;
  if (v9 < 0)
    operator delete((void *)v8[8]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x249544EE0](&v10);
}

void sub_245C02798(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::ostringstream::~ostringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t scml::TextModerationTokenizer::isCapitalized(scml::TextModerationTokenizer *this, NSString *a2)
{
  NSString *v3;
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  NSString *v20;
  uint64_t v21;
  void *__p[2];
  char v23;

  v3 = objc_retainAutorelease(a2);
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)-[NSString UTF8String](v3, "UTF8String"));
  v4 = std::__hash_table<std::__hash_value_type<std::string,scml::Config>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,scml::Config>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,scml::Config>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,scml::Config>>>::find<std::string>((_QWORD *)this + 9, (unsigned __int8 *)__p);
  v5 = v4;
  if (v23 < 0)
  {
    operator delete(__p[0]);
    if (v5)
      goto LABEL_5;
  }
  else if (v4)
  {
    goto LABEL_5;
  }
  v7 = *((unsigned __int8 *)this + 135);
  v8 = (char)v7;
  if ((v7 & 0x80u) != 0)
    v7 = *((_QWORD *)this + 15);
  if (v7 != 8)
    goto LABEL_13;
  v11 = (char *)*((_QWORD *)this + 14);
  v10 = (char *)this + 112;
  v9 = v11;
  v12 = v8 >= 0 ? v10 : v9;
  if (*(_QWORD *)v12 != 0x3256786966667553)
    goto LABEL_13;
  if (-[NSString length](v3, "length") == 1)
  {
LABEL_5:
    v6 = 0;
    goto LABEL_20;
  }
  if (scml::strEndsWith((scml *)v3, CFSTR(" 's"), v20))
  {
    if (-[NSString length](v3, "length") != 4)
    {
      -[NSString substringToIndex:](v3, "substringToIndex:", -[NSString length](v3, "length") - 2);
      v21 = objc_claimAutoreleasedReturnValue();

      v3 = (NSString *)v21;
      goto LABEL_13;
    }
    goto LABEL_5;
  }
LABEL_13:
  v3 = v3;
  if (-[NSString length](v3, "length") < 2)
  {
    -[NSString uppercaseString](v3, "uppercaseString");
    v17 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    -[NSString substringToIndex:](v3, "substringToIndex:", 1);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v13, "uppercaseString");
    v14 = (void *)objc_claimAutoreleasedReturnValue();

    -[NSString substringFromIndex:](v3, "substringFromIndex:", 1);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "lowercaseString");
    v16 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(v14, "stringByAppendingString:", v16);
    v17 = (void *)objc_claimAutoreleasedReturnValue();

  }
  if (objc_msgSend(v17, "isEqualToString:", v3))
  {
    -[NSString lowercaseString](v3, "lowercaseString");
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = objc_msgSend(v18, "isEqualToString:", v3) ^ 1;

  }
  else
  {
    v6 = 0;
  }

LABEL_20:
  return v6;
}

void sub_245C0299C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void scml::TextModerationTokenizer::preprocess(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  void *v4;
  int v5;
  scml *v6;
  NSString *v7;
  void *v8;
  NSString *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  scml *v14;
  NSString *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  scml *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  id v24;
  int v25[2];
  _QWORD *v26;
  scml *v27;
  id obj;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  _BYTE v38[128];
  _BYTE v39[128];
  uint64_t v40;

  *(_QWORD *)v25 = a4;
  v40 = *MEMORY[0x24BDAC8D0];
  scml::strToNSString(a2, a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = *a1;
  v6 = v4;
  v27 = v6;
  if (v5)
  {
    v8 = (void *)objc_msgSend(MEMORY[0x24BDBD1A8], "mutableCopy", *(_QWORD *)v25);
    v36 = 0u;
    v37 = 0u;
    v34 = 0u;
    v35 = 0u;
    scml::strSplit(v27, v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    obj = v10;
    v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v34, v39, 16);
    if (v11)
    {
      v12 = *(_QWORD *)v35;
      do
      {
        v13 = 0;
        do
        {
          if (*(_QWORD *)v35 != v12)
            objc_enumerationMutation(obj);
          objc_msgSend(*(id *)(*((_QWORD *)&v34 + 1) + 8 * v13), "stringByReplacingOccurrencesOfString:withString:", CFSTR("."), CFSTR(" . "));
          v14 = (scml *)objc_claimAutoreleasedReturnValue();
          v32 = 0u;
          v33 = 0u;
          v30 = 0u;
          v31 = 0u;
          scml::strTokenizeWords(v14, v15);
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          v17 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v30, v38, 16);
          if (v17)
          {
            v18 = *(_QWORD *)v31;
            do
            {
              v19 = 0;
              do
              {
                if (*(_QWORD *)v31 != v18)
                  objc_enumerationMutation(v16);
                objc_msgSend(v8, "addObject:", *(_QWORD *)(*((_QWORD *)&v30 + 1) + 8 * v19++));
              }
              while (v17 != v19);
              v17 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v30, v38, 16);
            }
            while (v17);
          }

          ++v13;
        }
        while (v13 != v11);
        v10 = obj;
        v11 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v34, v39, 16);
      }
      while (v11);
    }

    v20 = v27;
  }
  else
  {
    v20 = v6;
    scml::strTokenizeWords(v6, v7);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
  }

  v22 = *((_QWORD *)a1 + 6);
  v21 = *((_QWORD *)a1 + 7);
  if (v22 == v21)
  {
    v23 = v8;
  }
  else
  {
    do
    {
      std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>::operator()(v22, (uint64_t)a1, v8);
      v23 = (void *)objc_claimAutoreleasedReturnValue();

      v22 += 32;
      v8 = v23;
    }
    while (v22 != v21);
  }
  objc_msgSend(v23, "componentsJoinedByString:", &stru_2516E5A08, *(_QWORD *)v25);
  v24 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  std::string::basic_string[abi:ne180100]<0>(v26, (char *)objc_msgSend(v24, "UTF8String"));

}

void sub_245C02CA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

id std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>::operator()(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4;
  void *v5;
  id v7;
  uint64_t v8;

  v8 = a2;
  v7 = a3;
  v4 = *(_QWORD *)(a1 + 24);
  if (!v4)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t, uint64_t *, id *))(*(_QWORD *)v4 + 48))(v4, &v8, &v7);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

void sub_245C02D98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{

  _Unwind_Resume(a1);
}

void scml::TextModerationTokenizer::textToIDs(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v5;
  void **v6;
  unint64_t v7;
  const sentencepiece::util::Status *v8;
  void *__p[2];
  unsigned __int8 v10;
  uint64_t v11;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v5 = *(_QWORD *)(a1 + 136);
  scml::TextModerationTokenizer::preprocess((unsigned __int8 *)a1, a2, a3, (uint64_t)__p);
  if ((v10 & 0x80u) == 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  if ((v10 & 0x80u) == 0)
    v7 = v10;
  else
    v7 = (unint64_t)__p[1];
  (*(void (**)(uint64_t *__return_ptr, uint64_t, void **, unint64_t, _QWORD *))(*(_QWORD *)v5 + 144))(&v11, v5, v6, v7, a4);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v11);
  if ((char)v10 < 0)
    operator delete(__p[0]);
}

void sub_245C02E40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  uint64_t v15;
  void *v17;

  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&a15);
  if (a14 < 0)
    operator delete(__p);
  v17 = *(void **)v15;
  if (*(_QWORD *)v15)
  {
    *(_QWORD *)(v15 + 8) = v17;
    operator delete(v17);
  }
  _Unwind_Resume(a1);
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  std::bad_array_new_length *exception;
  std::bad_array_new_length *v1;

  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x24BEDB748], MEMORY[0x24BEDABB8]);
}

void std::vector<scml::Config>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<scml::Config>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2, (uint64_t)*v2);
    operator delete(**a1);
  }
}

uint64_t std::vector<scml::Config>::__base_destruct_at_end[abi:ne180100](uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = result;
  v4 = *(_QWORD *)(result + 8);
  if (v4 != a2)
  {
    do
    {
      v5 = v4 - 64;
      std::shared_ptr<scml::Config::PathInfo>::~shared_ptr[abi:ne180100](v4 - 16);
      result = std::__variant_detail::__dtor<std::__variant_detail::__traits<decltype(nullptr),long long,double,std::string,std::vector<scml::Config>,std::unordered_map<std::string,scml::Config>>,(std::__variant_detail::_Trait)1>::~__dtor(v5);
      v4 = v5;
    }
    while (v5 != a2);
  }
  *(_QWORD *)(v3 + 8) = a2;
  return result;
}

uint64_t std::__function::__value_func<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a1);
    }
    else
    {
      *(_QWORD *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t std::vector<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>>,std::reverse_iterator<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>*>,std::reverse_iterator<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>*>,std::reverse_iterator<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void std::vector<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>>::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 59)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(32 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>>,std::reverse_iterator<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>*>,std::reverse_iterator<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>*>,std::reverse_iterator<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  v13 = 0;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      v9 -= 32;
      std::__function::__value_func<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>::__value_func[abi:ne180100](v7 - 32, v9);
      v7 = *((_QWORD *)&v15 + 1) - 32;
      *((_QWORD *)&v15 + 1) -= 32;
    }
    while (v9 != a5);
    v10 = v15;
  }
  v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>>,std::reverse_iterator<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>>,std::reverse_iterator<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>>,std::reverse_iterator<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>*>>::operator()[abi:ne180100]((_QWORD *)a1);
  return a1;
}

_QWORD *std::_AllocatorDestroyRangeReverse<std::allocator<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>>,std::reverse_iterator<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>*>>::operator()[abi:ne180100](_QWORD *result)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = *(_QWORD **)(result[2] + 8);
  v2 = *(_QWORD **)(result[1] + 8);
  while (v1 != v2)
  {
    result = (_QWORD *)v1[3];
    if (v1 == result)
    {
      result = v1;
      v3 = 4;
    }
    else
    {
      if (!result)
        goto LABEL_8;
      v3 = 5;
    }
    result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
LABEL_8:
    v1 += 4;
  }
  return result;
}

void **std::__split_buffer<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>>::~__split_buffer(void **a1)
{
  std::__split_buffer<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>>::clear[abi:ne180100](a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

_QWORD *std::__split_buffer<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>>::clear[abi:ne180100](_QWORD *result)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;

  v2 = (_QWORD *)result[1];
  v1 = (_QWORD *)result[2];
  if (v1 != v2)
  {
    v3 = result;
    while (1)
    {
      result = v1 - 4;
      v3[2] = v1 - 4;
      v4 = (_QWORD *)*(v1 - 1);
      if (v4 == result)
        break;
      if (v4)
      {
        result = v4;
        v5 = 5;
LABEL_7:
        (*(void (**)(void))(*result + 8 * v5))();
        result = (_QWORD *)v3[2];
      }
      v1 = result;
      if (result == v2)
        return result;
    }
    v5 = 4;
    goto LABEL_7;
  }
  return result;
}

uint64_t std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node(a1, *(void ***)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node(int a1, void **__p)
{
  void **v2;
  void **v3;

  if (__p)
  {
    v2 = __p;
    do
    {
      v3 = (void **)*v2;
      if (*((char *)v2 + 39) < 0)
        operator delete(v2[2]);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void std::vector<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  char *v7;
  uint64_t v8;

  v1 = *a1;
  v2 = (char *)**a1;
  if (!v2)
    return;
  v4 = (char *)v1[1];
  v5 = **a1;
  if (v4 == v2)
    goto LABEL_10;
  do
  {
    v6 = v4 - 32;
    v7 = (char *)*((_QWORD *)v4 - 1);
    if (v4 - 32 == v7)
    {
      v7 = v4 - 32;
      v8 = 4;
    }
    else
    {
      if (!v7)
        goto LABEL_8;
      v8 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v7 + 8 * v8))();
LABEL_8:
    v4 = v6;
  }
  while (v6 != v2);
  v5 = **a1;
LABEL_10:
  v1[1] = v2;
  operator delete(v5);
}

uint64_t std::shared_ptr<scml::Config::PathInfo>::~shared_ptr[abi:ne180100](uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

uint64_t std::__variant_detail::__dtor<std::__variant_detail::__traits<decltype(nullptr),long long,double,std::string,std::vector<scml::Config>,std::unordered_map<std::string,scml::Config>>,(std::__variant_detail::_Trait)1>::~__dtor(uint64_t a1)
{
  uint64_t v2;
  char v4;

  v2 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_2516E4660[v2])(&v4, a1);
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJDnxdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_6vectorIN4scml6ConfigENSB_ISG_EEEENS_13unordered_mapISD_SG_NS_4hashISD_EENS_8equal_toISD_EENSB_INS_4pairIKSD_SG_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSU_1EJDnxdSD_SI_SS_EEEEEEDcSW_DpT0_(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJDnxdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_6vectorIN4scml6ConfigENSB_ISG_EEEENS_13unordered_mapISD_SG_NS_4hashISD_EENS_8equal_toISD_EENSB_INS_4pairIKSD_SG_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSU_1EJDnxdSD_SI_SS_EEEEEEDcSW_DpT0_(uint64_t a1, void **a2)
{
  void **v2;

  v2 = a2;
  std::vector<scml::Config>::__destroy_vector::operator()[abi:ne180100](&v2);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJDnxdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_6vectorIN4scml6ConfigENSB_ISG_EEEENS_13unordered_mapISD_SG_NS_4hashISD_EENS_8equal_toISD_EENSB_INS_4pairIKSD_SG_EEEEEEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSU_1EJDnxdSD_SI_SS_EEEEEEDcSW_DpT0_(uint64_t a1, uint64_t a2)
{
  return std::__hash_table<std::__hash_value_type<std::string,scml::Config>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,scml::Config>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,scml::Config>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,scml::Config>>>::~__hash_table(a2);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,scml::Config>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,scml::Config>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,scml::Config>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,scml::Config>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<std::string,scml::Config>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,scml::Config>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,scml::Config>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,scml::Config>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,scml::Config>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,scml::Config>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,scml::Config>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,scml::Config>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,scml::Config>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,scml::Config>,0>(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 24;
  std::shared_ptr<scml::Config::PathInfo>::~shared_ptr[abi:ne180100](a1 + 72);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<decltype(nullptr),long long,double,std::string,std::vector<scml::Config>,std::unordered_map<std::string,scml::Config>>,(std::__variant_detail::_Trait)1>::~__dtor(v2);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

scml::TextModerationTokenizerConfig *scml::TextModerationTokenizerConfig::TextModerationTokenizerConfig(scml::TextModerationTokenizerConfig *this, const scml::TextModerationTokenizerConfig *a2)
{
  std::string *v4;
  __int128 v5;

  *(_BYTE *)this = *(_BYTE *)a2;
  std::unordered_set<std::string>::unordered_set((uint64_t)this + 8, (uint64_t)a2 + 8);
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  std::vector<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>>::__init_with_size[abi:ne180100]<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>*,std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>*>((_QWORD *)this + 6, *((_QWORD *)a2 + 6), *((_QWORD *)a2 + 7), (uint64_t)(*((_QWORD *)a2 + 7) - *((_QWORD *)a2 + 6)) >> 5);
  std::unordered_set<std::string>::unordered_set((uint64_t)this + 72, (uint64_t)a2 + 72);
  v4 = (std::string *)((char *)this + 112);
  if (*((char *)a2 + 135) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)a2 + 14), *((_QWORD *)a2 + 15));
  }
  else
  {
    v5 = *((_OWORD *)a2 + 7);
    *((_QWORD *)this + 16) = *((_QWORD *)a2 + 16);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  return this;
}

void sub_245C035B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  va_list va;

  va_start(va, a2);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v3);
  std::vector<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v2);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_set<std::string>::unordered_set(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1, *(_QWORD *)(a2 + 8));
  for (i = *(unsigned __int8 **)(a2 + 16); i; i = *(unsigned __int8 **)i)
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a1, i + 16, (uint64_t)(i + 16));
  return a1;
}

void sub_245C03644(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  unint64_t v5;
  uint8x8_t v6;
  uint64_t v7;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(_QWORD *)&v4)
    goto LABEL_16;
  if (prime < *(_QWORD *)&v4)
  {
    v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      v5 = std::__next_prime(v5);
    }
    else
    {
      v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2)
        v5 = v7;
    }
    if (prime <= v5)
      prime = v5;
    if (prime < *(_QWORD *)&v4)
LABEL_16:
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__do_rehash<true>(a1, prime);
  }
}

void std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__do_rehash<true>(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint8x8_t v9;
  void *v10;
  _QWORD *v11;
  unint64_t v12;

  if (a2)
  {
    if (a2 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v4 = operator new(8 * a2);
    v5 = *(void **)a1;
    *(_QWORD *)a1 = v4;
    if (v5)
      operator delete(v5);
    v6 = 0;
    *(_QWORD *)(a1 + 8) = a2;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    v7 = *(_QWORD **)(a1 + 16);
    if (v7)
    {
      v8 = v7[1];
      v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2)
          v8 %= a2;
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v8) = a1 + 16;
      v11 = (_QWORD *)*v7;
      if (*v7)
      {
        do
        {
          v12 = v11[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= a2)
              v12 %= a2;
          }
          else
          {
            v12 &= a2 - 1;
          }
          if (v12 != v8)
          {
            if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v12))
            {
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v12) = v7;
              goto LABEL_24;
            }
            *v7 = *v11;
            *v11 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v12);
            **(_QWORD **)(*(_QWORD *)a1 + 8 * v12) = v11;
            v11 = v7;
          }
          v12 = v8;
LABEL_24:
          v7 = v11;
          v11 = (_QWORD *)*v11;
          v8 = v12;
        }
        while (v11);
      }
    }
  }
  else
  {
    v10 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v10)
      operator delete(v10);
    *(_QWORD *)(a1 + 8) = 0;
  }
}

unsigned __int8 *std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD v25[3];

  v7 = (_QWORD *)(a1 + 24);
  v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__construct_node_hash<std::string const&>(a1, v9, a3, (uint64_t)v25);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *(_QWORD *)v25[0] = *v22;
    *v22 = v25[0];
  }
  else
  {
    *(_QWORD *)v25[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v25[0])
    {
      v23 = *(_QWORD *)(*(_QWORD *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10)
          v23 %= v10;
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v25[0];
    }
  }
  i = (unsigned __int8 *)v25[0];
  ++*v7;
  return i;
}

void sub_245C03AE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p)
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, __p);
  _Unwind_Resume(exception_object);
}

unint64_t std::__string_hash<char>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  char v5;

  v2 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v3 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v3 = v2;
  }
  return std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v5, (uint64_t *)a2, v3);
}

uint64_t std::equal_to<std::string>::operator()[abi:ne180100](uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  BOOL v14;
  uint64_t result;

  v3 = a3;
  v4 = a2[23];
  if ((v4 & 0x80u) == 0)
    v5 = a2[23];
  else
    v5 = *((_QWORD *)a2 + 1);
  v6 = a3[23];
  v7 = (char)v6;
  if ((v6 & 0x80u) != 0)
    v6 = *((_QWORD *)a3 + 1);
  if (v5 != v6)
    return 0;
  if (v7 < 0)
    v3 = *(unsigned __int8 **)a3;
  if ((v4 & 0x80) != 0)
    return memcmp(*(const void **)a2, v3, *((_QWORD *)a2 + 1)) == 0;
  if (!a2[23])
    return 1;
  v8 = v4 - 1;
  do
  {
    v10 = *a2++;
    v9 = v10;
    v12 = *v3++;
    v11 = v12;
    v14 = v8-- != 0;
    result = v9 == v11;
  }
  while (v9 == v11 && v14);
  return result;
}

void std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__construct_node_hash<std::string const&>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  std::string *v9;

  v7 = a1 + 16;
  v8 = operator new(0x28uLL);
  *(_QWORD *)(a4 + 8) = v7;
  *(_QWORD *)a4 = v8;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  v9 = (std::string *)(v8 + 2);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    v9->__r_.__value_.__r.__words[2] = *(_QWORD *)(a3 + 16);
  }
  *(_BYTE *)(a4 + 16) = 1;
}

void sub_245C03C70(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100](uint64_t a1, uint64_t *a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;

  if (a3 > 0x20)
  {
    if (a3 > 0x40)
    {
      v4 = *(uint64_t *)((char *)a2 + a3 - 48);
      v5 = *(uint64_t *)((char *)a2 + a3 - 40);
      v6 = *(uint64_t *)((char *)a2 + a3 - 24);
      v8 = *(uint64_t *)((char *)a2 + a3 - 64);
      v7 = *(uint64_t *)((char *)a2 + a3 - 56);
      v9 = *(uint64_t *)((char *)a2 + a3 - 16);
      v10 = *(uint64_t *)((char *)a2 + a3 - 8);
      v11 = v7 + v9;
      v12 = 0x9DDFEA08EB382D69
          * (v6 ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))) >> 47) ^ (0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))));
      v13 = 0x9DDFEA08EB382D69 * (v12 ^ (v12 >> 47));
      v14 = v8 + a3 + v7 + v4;
      v15 = v14 + v5;
      v16 = __ROR8__(v14, 44) + v8 + a3 + __ROR8__(v5 + v8 + a3 - 0x622015F714C7D297 * (v12 ^ (v12 >> 47)), 21);
      v17 = v7 + v9 + *(uint64_t *)((char *)a2 + a3 - 32) - 0x4B6D499041670D8DLL;
      v18 = v17 + v6 + v9;
      v19 = __ROR8__(v18, 44);
      v20 = v18 + v10;
      v21 = v19 + v17 + __ROR8__(v17 + v5 + v10, 21);
      v23 = *a2;
      v22 = a2 + 4;
      v24 = v23 - 0x4B6D499041670D8DLL * v5;
      v25 = -(uint64_t)((a3 - 1) & 0xFFFFFFFFFFFFFFC0);
      do
      {
        v26 = *(v22 - 3);
        v27 = v24 + v15 + v11 + v26;
        v28 = v22[2];
        v29 = v22[3];
        v30 = v22[1];
        v11 = v30 + v15 - 0x4B6D499041670D8DLL * __ROR8__(v11 + v16 + v28, 42);
        v31 = v13 + v20;
        v32 = *(v22 - 2);
        v33 = *(v22 - 1);
        v34 = *(v22 - 4) - 0x4B6D499041670D8DLL * v16;
        v35 = v34 + v20 + v33;
        v36 = v34 + v26 + v32;
        v15 = v36 + v33;
        v37 = __ROR8__(v36, 44) + v34;
        v38 = (0xB492B66FBE98F273 * __ROR8__(v27, 37)) ^ v21;
        v24 = 0xB492B66FBE98F273 * __ROR8__(v31, 33);
        v16 = v37 + __ROR8__(v35 + v38, 21);
        v39 = v24 + v21 + *v22;
        v20 = v39 + v30 + v28 + v29;
        v21 = __ROR8__(v39 + v30 + v28, 44) + v39 + __ROR8__(v11 + v32 + v39 + v29, 21);
        v22 += 8;
        v13 = v38;
        v25 += 64;
      }
      while (v25);
      v40 = v24
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) ^ ((0x9DDFEA08EB382D69 * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) >> 47));
      v41 = 0x9DDFEA08EB382D69
          * (v40 ^ (v38
                  - 0x4B6D499041670D8DLL * (v11 ^ (v11 >> 47))
                  - 0x622015F714C7D297
                  * ((0x9DDFEA08EB382D69
                    * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) ^ ((0x9DDFEA08EB382D69 * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) >> 47))));
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) ^ ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) >> 47));
    }
    else
    {
      return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_33_to_64[abi:ne180100](a2, a3);
    }
  }
  else if (a3 > 0x10)
  {
    return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_17_to_32[abi:ne180100](a2, a3);
  }
  else
  {
    return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_0_to_16[abi:ne180100](a2, a3);
  }
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_0_to_16[abi:ne180100](_DWORD *a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  if (a2 < 9)
  {
    if (a2 < 4)
    {
      result = 0x9AE16A3B2F90404FLL;
      if (a2)
      {
        v8 = (0xC949D7C7509E6557 * (a2 + 4 * *((unsigned __int8 *)a1 + a2 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                      * (*(unsigned __int8 *)a1 | ((unint64_t)*((unsigned __int8 *)a1 + (a2 >> 1)) << 8)));
        return 0x9AE16A3B2F90404FLL * (v8 ^ (v8 >> 47));
      }
    }
    else
    {
      v6 = *(unsigned int *)((char *)a1 + a2 - 4);
      v7 = 0x9DDFEA08EB382D69 * (((8 * *a1) + a2) ^ v6);
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) >> 47));
    }
  }
  else
  {
    v3 = *(_QWORD *)((char *)a1 + a2 - 8);
    v4 = __ROR8__(v3 + a2, a2);
    return (0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69
            * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)))) ^ ((0x9DDFEA08EB382D69 * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)))) >> 47))) ^ v3;
  }
  return result;
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_17_to_32[abi:ne180100](_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v2 = a1[1];
  v3 = 0xB492B66FBE98F273 * *a1;
  v4 = __ROR8__(0x9AE16A3B2F90404FLL * *(_QWORD *)((char *)a1 + a2 - 8), 30) + __ROR8__(v3 - v2, 43);
  v5 = v3 + a2 + __ROR8__(v2 ^ 0xC949D7C7509E6557, 20) - 0x9AE16A3B2F90404FLL * *(_QWORD *)((char *)a1 + a2 - 8);
  v6 = 0x9DDFEA08EB382D69 * (v5 ^ (v4 - 0x3C5A37A36834CED9 * *(_QWORD *)((char *)a1 + a2 - 16)));
  return 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) ^ ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) >> 47));
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_33_to_64[abi:ne180100](_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v2 = *(_QWORD *)((char *)a1 + a2 - 16);
  v3 = *a1 - 0x3C5A37A36834CED9 * (v2 + a2);
  v5 = a1[2];
  v4 = a1[3];
  v6 = __ROR8__(v3 + v4, 52);
  v7 = v3 + a1[1];
  v8 = __ROR8__(v7, 7);
  v9 = v7 + v5;
  v10 = *(_QWORD *)((char *)a1 + a2 - 32) + v5;
  v11 = v8 + __ROR8__(*a1 - 0x3C5A37A36834CED9 * (v2 + a2), 37) + v6 + __ROR8__(v9, 31);
  v12 = *(_QWORD *)((char *)a1 + a2 - 24) + v10 + v2;
  v13 = 0xC3A5C85C97CB3127 * (v12 + *(_QWORD *)((char *)a1 + a2 - 8) + v4 + v11)
      - 0x651E95C4D06FBFB1
      * (v9
       + v4
       + __ROR8__(v10, 37)
       + __ROR8__(*(_QWORD *)((char *)a1 + a2 - 24) + v10, 7)
       + __ROR8__(*(_QWORD *)((char *)a1 + a2 - 8) + v4 + v10, 52)
       + __ROR8__(v12, 31));
  return 0x9AE16A3B2F90404FLL
       * ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) ^ ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) >> 47));
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](uint64_t a1, void **__p)
{
  if (*(_BYTE *)(a1 + 8))
  {
    if (*((char *)__p + 39) < 0)
      operator delete(__p[2]);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

_QWORD *std::vector<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>>::__init_with_size[abi:ne180100]<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>*,std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>>,std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>*,std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>*,std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_245C041A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 59)
    std::vector<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[32 * v4];
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>>,std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>*,std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>*,std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  uint64_t v10;
  uint64_t v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      std::__function::__value_func<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>::__value_func[abi:ne180100](v4, v6);
      v6 += 32;
      v4 = v11 + 32;
      v11 += 32;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>>,std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_245C04294(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>>,std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>>,std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>>,std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>*>::operator()[abi:ne180100](a1);
  return a1;
}

uint64_t std::_AllocatorDestroyRangeReverse<std::allocator<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>>,std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>*>::operator()[abi:ne180100](uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = **(_QWORD **)(result + 16);
  v2 = **(_QWORD **)(result + 8);
  if (v1 != v2)
  {
    while (1)
    {
      v3 = v1 - 32;
      result = *(_QWORD *)(v1 - 8);
      if (v1 - 32 == result)
        break;
      if (result)
      {
        v4 = 5;
LABEL_6:
        result = (*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v4))();
      }
      v1 = v3;
      if (v3 == v2)
        return result;
    }
    result = v1 - 32;
    v4 = 4;
    goto LABEL_6;
  }
  return result;
}

uint64_t scml::Config::as<std::unordered_map<std::string,scml::Config>>(uint64_t result)
{
  uint64_t v1;
  void *exception;

  if (*(_DWORD *)(result + 40) != 5)
  {
    v1 = result;
    exception = __cxa_allocate_exception(0x10uLL);
    scml::Config::error(v1, (uint64_t)"unexpected type", 15, (uint64_t)exception);
    __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  return result;
}

void sub_245C0440C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t scml::strCat<std::string_view const&,char const(&)[11]>@<X0>(uint64_t *a1@<X0>, char *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v7;
  _QWORD v8[10];
  char v9;
  uint64_t v10;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v7, *a1, a1[1]);
  scml::scml_impl::strCat<char const(&)[11]>(&v7, a2);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v8, a3);
  v7 = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)&v8[-1] + *(_QWORD *)(v7 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v8[0] = MEMORY[0x24BEDB848] + 16;
  if (v9 < 0)
    operator delete((void *)v8[8]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x249544EE0](&v10);
}

void sub_245C044E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::ostringstream::~ostringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL scml::Config::as<BOOL>(uint64_t a1)
{
  void *exception;

  if (*(_DWORD *)(a1 + 40) != 1)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    scml::Config::error(a1, (uint64_t)"not an integer", 14, (uint64_t)exception);
    __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  return *(_QWORD *)a1 != 0;
}

void sub_245C0456C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,scml::Config>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,scml::Config>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,scml::Config>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,scml::Config>>>::find<std::string>(_QWORD *a1, unsigned __int8 *a2)
{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned __int8 **v10;
  unsigned __int8 *v11;
  uint64_t v12;
  unint64_t v13;

  v4 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(a1 + 3), (uint64_t)a2);
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v9 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  v11 = *v10;
  if (*v10)
  {
    v12 = (uint64_t)(a1 + 4);
    do
    {
      v13 = *((_QWORD *)v11 + 1);
      if (v6 == v13)
      {
        if ((std::equal_to<std::string>::operator()[abi:ne180100](v12, v11 + 16, a2) & 1) != 0)
          return v11;
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(_QWORD *)&v5)
            v13 %= *(_QWORD *)&v5;
        }
        else
        {
          v13 &= *(_QWORD *)&v5 - 1;
        }
        if (v13 != v9)
          return 0;
      }
      v11 = *(unsigned __int8 **)v11;
    }
    while (v11);
  }
  return v11;
}

uint64_t scml::scml_impl::strCat<char const(&)[11]>(_QWORD *a1, char *__s)
{
  size_t v4;

  v4 = strlen(__s);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)__s, v4);
  return scml::scml_impl::strCat<>(a1);
}

uint64_t scml::Config::as<std::vector<scml::Config>>(uint64_t result)
{
  uint64_t v1;
  void *exception;

  if (*(_DWORD *)(result + 40) != 4)
  {
    v1 = result;
    exception = __cxa_allocate_exception(0x10uLL);
    scml::Config::error(v1, (uint64_t)"unexpected type", 15, (uint64_t)exception);
    __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  return result;
}

void sub_245C04720(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<NSArray<NSString *> * (scml::TextModerationTokenizer::*)(NSArray<NSString *> *)const,std::allocator<NSArray<NSString *> * (scml::TextModerationTokenizer::*)(NSArray<NSString *> *)const>,NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>::~__func()
{
  JUMPOUT(0x249544F58);
}

__n128 std::__function::__func<NSArray<NSString *> * (scml::TextModerationTokenizer::*)(NSArray<NSString *> *)const,std::allocator<NSArray<NSString *> * (scml::TextModerationTokenizer::*)(NSArray<NSString *> *)const>,NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_2516E3620;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<NSArray<NSString *> * (scml::TextModerationTokenizer::*)(NSArray<NSString *> *)const,std::allocator<NSArray<NSString *> * (scml::TextModerationTokenizer::*)(NSArray<NSString *> *)const>,NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_2516E3620;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<NSArray<NSString *> * (scml::TextModerationTokenizer::*)(NSArray<NSString *> *)const,std::allocator<NSArray<NSString *> * (scml::TextModerationTokenizer::*)(NSArray<NSString *> *)const>,NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>::operator()(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t (*v3)(_QWORD *, _QWORD);
  uint64_t v4;
  _QWORD *v5;

  v3 = *(uint64_t (**)(_QWORD *, _QWORD))(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v5 = (_QWORD *)(*a2 + (v4 >> 1));
  if ((v4 & 1) != 0)
    v3 = *(uint64_t (**)(_QWORD *, _QWORD))(*v5 + v3);
  return v3(v5, *a3);
}

uint64_t std::__function::__func<NSArray<NSString *> * (scml::TextModerationTokenizer::*)(NSArray<NSString *> *)const,std::allocator<NSArray<NSString *> * (scml::TextModerationTokenizer::*)(NSArray<NSString *> *)const>,NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<NSArray<NSString *> * (scml::TextModerationTokenizer::*)(NSArray<NSString *> *)const,std::allocator<NSArray<NSString *> * (scml::TextModerationTokenizer::*)(NSArray<NSString *> *)const>,NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>::target_type()
{
}

BOOL std::type_info::operator==[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  if (v2 == v3)
    return 1;
  if ((v3 & v2) < 0 != __OFSUB__(v2, v3))
    return strcmp((const char *)(v2 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL)) == 0;
  return 0;
}

uint64_t scml::scml_impl::strCat<char const(&)[28],std::string_view &>(_QWORD *a1, char *__s, uint64_t *a3)
{
  size_t v6;

  v6 = strlen(__s);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)__s, v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, *a3, a3[1]);
  return scml::scml_impl::strCat<>(a1);
}

void std::__throw_bad_function_call[abi:ne180100]()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
}

void std::bad_function_call::~bad_function_call(std::bad_function_call *this)
{
  std::exception::~exception(this);
  JUMPOUT(0x249544F58);
}

void sub_245C04A78(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_245C04C4C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_245C04D94(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_245C04E14(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_245C04EA4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_245C0528C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  char v5;
  void *v6;
  uint64_t v7;

  if ((v5 & 1) != 0)

  _Block_object_dispose((const void *)(v7 - 144), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy_(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose_(uint64_t a1)
{

}

void sub_245C054D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_245C05658(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,id a28)
{
  _Block_object_dispose(&a17, 8);

  _Block_object_dispose(&a23, 8);
  _Unwind_Resume(a1);
}

void sub_245C0570C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_245C05850(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  uint64_t v22;

  _Block_object_dispose(&a17, 8);

  _Block_object_dispose((const void *)(v22 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_245C05930(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_245C05A9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,id a28)
{
  _Block_object_dispose(&a17, 8);

  _Block_object_dispose(&a23, 8);
  _Unwind_Resume(a1);
}

void sub_245C05B50(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_245C05C94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  uint64_t v22;

  _Block_object_dispose(&a17, 8);

  _Block_object_dispose((const void *)(v22 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_245C05D74(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_245C05EFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,id a28)
{
  void *v28;

  _Block_object_dispose(&a17, 8);

  _Block_object_dispose(&a23, 8);
  _Unwind_Resume(a1);
}

void sub_245C0606C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_245C061F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  uint64_t v22;

  _Block_object_dispose(&a17, 8);

  _Block_object_dispose((const void *)(v22 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_245C062A4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_245C06360(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_245C064A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_245C06560(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_245C07010(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20)
{
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  char v24;
  void *v25;
  void *v26;
  void *v27;

  if ((v24 & 1) != 0)

  _Unwind_Resume(a1);
}

void sub_245C071FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)SCMLImageAnalyzer;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_245C0766C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,std::runtime_error __p,int a34,__int16 a35,char a36,char a37)
{
  void *v37;
  int v38;
  uint64_t v39;
  void *v40;
  int v41;
  void *exception_ptr;
  NSObject *v45;

  if (a37 < 0)
    operator delete(__p.__vftable);
  if (a14 < 0)
    operator delete(a9);
  if (a32 < 0)
    operator delete(a27);
  if (a26 < 0)
    operator delete(a21);
  if (a20 < 0)
  {
    operator delete(a15);
    if ((v41 & 1) == 0)
      goto LABEL_14;
  }
  else if (!v41)
  {
LABEL_14:
    if (a2 == 1)
    {
      exception_ptr = __cxa_get_exception_ptr(a1);
      MEMORY[0x249544C70](&__p, exception_ptr);
      __cxa_begin_catch(a1);
      if (*(_QWORD *)(v39 + 56))
      {
        espresso_plan_destroy();
        *(_QWORD *)(v39 + 56) = 0;
      }
      if (*(_QWORD *)(v39 + 64))
      {
        espresso_context_destroy();
        *(_QWORD *)(v39 + 64) = 0;
      }
      +[SCMLLog imageAnalyzer](SCMLLog, "imageAnalyzer");
      v45 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
        -[SCMLImageAnalyzer loadNetworkForURL:espressoEngine:storageType:deviceId:].cold.1(&__p, v38, v45);

      std::runtime_error::~runtime_error(&__p);
      __cxa_end_catch();
      JUMPOUT(0x245C07404);
    }

    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v40);
  goto LABEL_14;
}

__n128 std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>@<Q0>(char *__s@<X1>, std::string *a2@<X0>, std::string *a3@<X8>)
{
  std::string::size_type v6;
  __n128 *v7;
  __n128 result;

  v6 = strlen(__s);
  v7 = (__n128 *)std::string::append(a2, __s, v6);
  result = *v7;
  *a3 = *(std::string *)v7->n128_u8;
  v7->n128_u64[0] = 0;
  v7->n128_u64[1] = 0;
  v7[1].n128_u64[0] = 0;
  return result;
}

__n128 std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>@<Q0>(const char *a1@<X0>, std::string *a2@<X1>, std::string *a3@<X8>)
{
  std::string::size_type v6;
  __n128 *v7;
  __n128 result;

  v6 = strlen(a1);
  v7 = (__n128 *)std::string::insert(a2, 0, a1, v6);
  result = *v7;
  *a3 = *(std::string *)v7->n128_u8;
  v7->n128_u64[0] = 0;
  v7->n128_u64[1] = 0;
  v7[1].n128_u64[0] = 0;
  return result;
}

void sub_245C07B58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;

  if (a20 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_245C07BE8()
{
  JUMPOUT(0x245C07BD0);
}

void sub_245C07BF0()
{
  JUMPOUT(0x245C07BD4);
}

void sub_245C07BF8()
{
  void *v0;

  JUMPOUT(0x245C07BD8);
}

void sub_245C07C04()
{
  JUMPOUT(0x245C07BD8);
}

void sub_245C07C0C()
{
  JUMPOUT(0x245C07BDCLL);
}

uint64_t scml::strCat<char const(&)[38],std::string>@<X0>(char *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v7;
  _QWORD v8[10];
  char v9;
  uint64_t v10;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v7);
  scml::scml_impl::strCat<char const(&)[3],std::string>(&v7, a1, a2);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v8, a3);
  v7 = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)&v8[-1] + *(_QWORD *)(v7 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v8[0] = MEMORY[0x24BEDB848] + 16;
  if (v9 < 0)
    operator delete((void *)v8[8]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x249544EE0](&v10);
}

void sub_245C07CDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::ostringstream::~ostringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_245C07DC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  void *v21;
  void *v22;
  int v23;

  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v23 & 1) == 0)
    {
LABEL_8:

      _Unwind_Resume(a1);
    }
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

void sub_245C07F10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  void *v21;
  void *v22;
  int v23;

  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v23 & 1) == 0)
    {
LABEL_8:

      _Unwind_Resume(a1);
    }
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

void sub_245C0872C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15)
{

  _Unwind_Resume(a1);
}

void sub_245C08A3C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_245C08BB4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v6 = v4;

  _Unwind_Resume(a1);
}

void sub_245C08D04(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_245C08D98(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_245C08FE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33)
{
  void *v33;
  uint64_t v34;

  _Block_object_dispose((const void *)(v34 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_245C09064()
{
  JUMPOUT(0x245C09050);
}

uint64_t __Block_byref_object_copy__0(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__0(uint64_t a1)
{

}

void sub_245C092C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v6 = v4;

  _Unwind_Resume(a1);
}

void sub_245C09470(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_245C09724(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,id a31,char a32)
{
  uint64_t v32;

  _Block_object_dispose(&a26, 8);

  _Block_object_dispose(&a32, 8);
  _Block_object_dispose((const void *)(v32 - 112), 8);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__62(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)(a2 + 48);
  v3 = *(_OWORD *)(a2 + 64);
  v4 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v4;
  *(__n128 *)(a1 + 48) = result;
  *(_OWORD *)(a1 + 64) = v3;
  return result;
}

void sub_245C09A68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::runtime_error a12)
{
  _OWORD *v12;
  _QWORD *v13;
  void *exception_ptr;
  NSObject *v16;

  if (a2 == 1)
  {
    exception_ptr = __cxa_get_exception_ptr(exception_object);
    MEMORY[0x249544C70](&a12, exception_ptr);
    __cxa_begin_catch(exception_object);
    +[SCMLLog imageAnalyzer](SCMLLog, "imageAnalyzer");
    v16 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      -[SCMLImageAnalyzer _computeOutputForPixelBuffer:error:].cold.1(&a12);

    if (v13)
    {
      objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", SCMLErrorDomain[0], 6, 0);
      *v13 = (id)objc_claimAutoreleasedReturnValue();
    }
    v12[2] = 0u;
    v12[3] = 0u;
    *v12 = 0u;
    v12[1] = 0u;
    std::runtime_error::~runtime_error(&a12);
    __cxa_end_catch();
    JUMPOUT(0x245C09984);
  }
  _Unwind_Resume(exception_object);
}

uint64_t `anonymous namespace'::tensorViewCHW@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (*(_QWORD *)(result + 112) != 1)
  if (*(_QWORD *)(result + 104) != 1)
  v2 = *(_QWORD *)(result + 80);
  v3 = *(unsigned int *)(result + 96) | (*(_QWORD *)(result + 88) << 32);
  *(_QWORD *)a2 = *(_QWORD *)result;
  *(_QWORD *)(a2 + 8) = v3;
  *(_DWORD *)(a2 + 16) = v2;
  return result;
}

void sub_245C09C34(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 - 56);
  if (v3)
  {
    *(_QWORD *)(v1 - 48) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_245C09D0C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_245C0A0A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  void *v21;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_245C0A298(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::runtime_error a9)
{
  void *v9;
  void *v10;
  _QWORD *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *exception_ptr;
  NSObject *v19;

  v15 = v14;

  if (a2 == 1)
  {
    exception_ptr = __cxa_get_exception_ptr(a1);
    MEMORY[0x249544C70](&a9, exception_ptr);
    __cxa_begin_catch(a1);
    +[SCMLLog imageAnalyzer](SCMLLog, "imageAnalyzer");
    v19 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      +[SCMLImageAnalyzer getOperatingPointDataForClassName:modelURL:error:].cold.1(&a9);

    if (v11)
    {
      objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", SCMLErrorDomain[0], 8, 0);
      *v11 = (id)objc_claimAutoreleasedReturnValue();
    }
    std::runtime_error::~runtime_error(&a9);
    __cxa_end_catch();
    JUMPOUT(0x245C0A270);
  }

  _Unwind_Resume(a1);
}

void std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<std::string>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 24)
  {
    if (*(char *)(i - 1) < 0)
      operator delete(*(void **)(i - 24));
  }
  a1[1] = v2;
}

void OUTLINED_FUNCTION_1(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

const char *OUTLINED_FUNCTION_2(const std::runtime_error *this)
{
  return std::runtime_error::what(this);
}

void sub_245C0A78C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_245C0A890(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_245C0A924(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_245C0AA20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)SCMLVideoFrame;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_245C0AABC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_245C0AF50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  void *v28;
  void *v29;
  _QWORD *v30;
  void *v31;
  void *v32;
  uint64_t v33;
  int v34;
  void *v37;
  NSObject *v38;

  if (a23 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);

    if ((v34 & 1) == 0)
      goto LABEL_9;
  }
  else
  {

    if (!v34)
    {
LABEL_9:
      if (a2 == 2)
      {
        v37 = __cxa_begin_catch(a1);
        if (v30)
        {
          scml::error(0x12u, (uint64_t)v37);
          *v30 = (id)objc_claimAutoreleasedReturnValue();
        }
        objc_msgSend(*(id *)(v33 + 376), "textAnalyzer");
        v38 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
          -[SCMLPeopleDetector initWithConfiguration:error:].cold.1((uint64_t)v37, v38);

        __cxa_end_catch();
        JUMPOUT(0x245C0AE58);
      }
      scml::SignpostInterval::~SignpostInterval((scml::SignpostInterval *)&a28);

      _Unwind_Resume(a1);
    }
  }
  __cxa_free_exception(v31);
  goto LABEL_9;
}

void sub_245C0B358(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

scml::SignpostInterval *scml::SignpostInterval::createAsync(scml::SignpostInterval *this)
{
  scml::SignpostInterval *v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD v5[3];
  _QWORD *v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v1 = (scml::SignpostInterval *)operator new();
  scml::SignpostInterval::SignpostInterval(v1);
  v5[0] = &off_2516E3F10;
  v6 = v5;
  std::__function::__value_func<void ()(void)>::operator=[abi:ne180100]((_QWORD *)v1 + 2, (uint64_t)v5);
  v2 = v6;
  if (v6 == v5)
  {
    v3 = 4;
    v2 = v5;
    goto LABEL_5;
  }
  if (v6)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return v1;
}

void sub_245C0B468(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_245C0B6DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_245C0B804(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_245C0C06C()
{
  void *v0;
  void *v1;

  JUMPOUT(0x245C0C0B0);
}

void sub_245C0C074()
{
  void *v0;

  __cxa_end_catch();
  JUMPOUT(0x245C0C088);
}

void sub_245C0C09C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

scml::SignpostInterval *scml::SignpostInterval::SignpostInterval(scml::SignpostInterval *this)
{
  NSObject *v2;

  +[SCMLLog signpost](SCMLLog, "signpost");
  v2 = objc_claimAutoreleasedReturnValue();
  *(_QWORD *)this = v2;
  *((_QWORD *)this + 1) = os_signpost_id_make_with_pointer(v2, this);
  *((_QWORD *)this + 5) = 0;
  return this;
}

_QWORD *std::__function::__value_func<void ()(void)>::operator=[abi:ne180100](_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v4 = (_QWORD *)a1[3];
  a1[3] = 0;
  if (v4 == a1)
  {
    v5 = 4;
    v4 = a1;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  v6 = *(_QWORD *)(a2 + 24);
  if (v6)
  {
    if (v6 == a2)
    {
      a1[3] = a1;
      (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a1);
    }
    else
    {
      a1[3] = v6;
      *(_QWORD *)(a2 + 24) = 0;
    }
  }
  else
  {
    a1[3] = 0;
  }
  return a1;
}

void scml::SignpostInterval::~SignpostInterval(scml::SignpostInterval *this)
{
  uint64_t v2;
  scml::SignpostInterval *v3;
  uint64_t v4;

  v2 = *((_QWORD *)this + 5);
  if (!v2)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 48))(v2);
  v3 = (scml::SignpostInterval *)*((_QWORD *)this + 5);
  if (v3 == (scml::SignpostInterval *)((char *)this + 16))
  {
    v4 = 4;
    v3 = (scml::SignpostInterval *)((char *)this + 16);
    goto LABEL_6;
  }
  if (v3)
  {
    v4 = 5;
LABEL_6:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }

}

void std::__function::__func<scml::SignpostInterval::createAsync(void)::{lambda(void)#1},std::allocator<scml::SignpostInterval::createAsync(void)::{lambda(void)#1}>,void ()(void)>::~__func()
{
  JUMPOUT(0x249544F58);
}

_QWORD *std::__function::__func<scml::SignpostInterval::createAsync(void)::{lambda(void)#1},std::allocator<scml::SignpostInterval::createAsync(void)::{lambda(void)#1}>,void ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_2516E3F10;
  return result;
}

void std::__function::__func<scml::SignpostInterval::createAsync(void)::{lambda(void)#1},std::allocator<scml::SignpostInterval::createAsync(void)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_2516E3F10;
}

void std::__function::__func<scml::SignpostInterval::createAsync(void)::{lambda(void)#1},std::allocator<scml::SignpostInterval::createAsync(void)::{lambda(void)#1}>,void ()(void)>::operator()()
{
  std::__invoke_void_return_wrapper<void,true>::__call[abi:ne180100]<scml::SignpostInterval::createAsync(void)::{lambda(void)#1} &>();
}

uint64_t std::__function::__func<scml::SignpostInterval::createAsync(void)::{lambda(void)#1},std::allocator<scml::SignpostInterval::createAsync(void)::{lambda(void)#1}>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<scml::SignpostInterval::createAsync(void)::{lambda(void)#1},std::allocator<scml::SignpostInterval::createAsync(void)::{lambda(void)#1}>,void ()(void)>::target_type()
{
}

void std::__invoke_void_return_wrapper<void,true>::__call[abi:ne180100]<scml::SignpostInterval::createAsync(void)::{lambda(void)#1} &>()
{
  std::runtime_error *exception;

  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "Async SignpostInterval deleted without using SCML_SIGNPOST_ASYNC_END");
  __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
}

void sub_245C0C330(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

id scml::`anonymous namespace'::findAttributeSpans(void *a1, void *a2, NSString *a3, NSUInteger a4)
{
  scml::_anonymous_namespace_ *v7;
  _NSRange v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t AttributeSpan;
  uint64_t v14;
  void *v15;
  id v17;
  id v18;
  id obj;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _BYTE v24[128];
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v7 = a1;
  v17 = a2;
  v18 = (id)objc_msgSend(MEMORY[0x24BDBD1A8], "mutableCopy");
  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  obj = v17;
  v9 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
  if (v9)
  {
    v10 = *(_QWORD *)v21;
    do
    {
      v11 = 0;
      do
      {
        if (*(_QWORD *)v21 != v10)
          objc_enumerationMutation(obj);
        v8.location = a4;
        if (AttributeSpan != 0x7FFFFFFFFFFFFFFFLL)
        {
          v14 = v12;
          v15 = (void *)objc_opt_new();
          objc_msgSend(v15, "setRange:", AttributeSpan, v14);
          objc_msgSend(v18, "addObject:", v15);

        }
        ++v11;
      }
      while (v9 != v11);
      v9 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
    }
    while (v9);
  }

  return v18;
}

void sub_245C0C4C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  void *v12;

  _Unwind_Resume(a1);
}

uint64_t ___ZN4scml12_GLOBAL__N_117toPeopleDetectionEPNS_18MultiwordGazetteerEP8NSStringP34SCMLVisualGenerationHandlingResult_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v4;
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  BOOL v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;

  v4 = a2;
  v5 = a3;
  v6 = v4;
  v7 = v5;
  v8 = objc_msgSend(v6, "range");
  if (v8 == objc_msgSend(v7, "range"))
  {
    objc_msgSend(v6, "range");
    v10 = v9;
    objc_msgSend(v7, "range");
    if (v10 == v11)
    {
      v12 = 0;
      goto LABEL_9;
    }
    objc_msgSend(v6, "range");
    v16 = v15;
    objc_msgSend(v7, "range");
    v14 = v16 >= v17;
  }
  else
  {
    v13 = objc_msgSend(v6, "range");
    v14 = v13 >= objc_msgSend(v7, "range");
  }
  if (v14)
    v12 = 1;
  else
    v12 = -1;
LABEL_9:

  return v12;
}

void sub_245C0C5F0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void scml::`anonymous namespace'::findCandidateWordRanges(scml::_anonymous_namespace_ *this@<X0>, NSString *a2@<X1>, uint64_t **a3@<X8>)
{
  void *v6;
  void *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t *v22;
  uint64_t *v23;
  void *v24;
  NSString *v25;
  scml::_anonymous_namespace_ *v26;

  v26 = this;
  v25 = a2;
  objc_msgSend(MEMORY[0x24BDD1798], "escapedPatternForString:", v25);
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("\\b%@\\b"), v24);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDD1798], "regularExpressionWithPattern:options:error:", v6, 65, 0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  if (v7)
  {
    v8 = 0;
    do
    {
      v9 = objc_msgSend(v7, "rangeOfFirstMatchInString:options:range:", v26, 0, v8, -[scml::_anonymous_namespace_ length](v26, "length") - v8);
      v11 = v9;
      if (v9 == 0x7FFFFFFFFFFFFFFFLL)
        break;
      v12 = v10;
      v14 = a3[1];
      v13 = (unint64_t)a3[2];
      if ((unint64_t)v14 >= v13)
      {
        v16 = *a3;
        v17 = ((char *)v14 - (char *)*a3) >> 4;
        v18 = v17 + 1;
        if ((unint64_t)(v17 + 1) >> 60)
          std::vector<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>>::__throw_length_error[abi:ne180100]();
        v19 = v13 - (_QWORD)v16;
        if (v19 >> 3 > v18)
          v18 = v19 >> 3;
        if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF0)
          v20 = 0xFFFFFFFFFFFFFFFLL;
        else
          v20 = v18;
        if (v20)
        {
          v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<_NSRange>>((uint64_t)(a3 + 2), v20);
          v16 = *a3;
          v14 = a3[1];
        }
        else
        {
          v21 = 0;
        }
        v22 = (uint64_t *)&v21[16 * v17];
        *v22 = v11;
        v22[1] = v12;
        v23 = v22;
        if (v14 != v16)
        {
          do
          {
            *((_OWORD *)v23 - 1) = *((_OWORD *)v14 - 1);
            v23 -= 2;
            v14 -= 2;
          }
          while (v14 != v16);
          v16 = *a3;
        }
        v15 = v22 + 2;
        *a3 = v23;
        a3[1] = v22 + 2;
        a3[2] = (uint64_t *)&v21[16 * v20];
        if (v16)
          operator delete(v16);
      }
      else
      {
        *v14 = v9;
        v14[1] = v10;
        v15 = v14 + 2;
      }
      a3[1] = v15;
      v8 = v11 + v12;
    }
    while (v8 < -[scml::_anonymous_namespace_ length](v26, "length"));
  }

}

void sub_245C0C818(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, id a12)
{
  void *v12;

  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<_NSRange>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(16 * a2);
}

uint64_t scml::`anonymous namespace'::findAttributeSpan(scml::_anonymous_namespace_ *this, NSString *a2, NSString *a3, _NSRange a4)
{
  NSUInteger location;
  scml::_anonymous_namespace_ *v7;
  NSString *v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  BOOL v17;
  char *v18;
  uint64_t *v20;
  uint64_t *v21;

  location = a4.location;
  v7 = this;
  v8 = a2;
  if (v20 == v21)
  {
    v11 = 0x7FFFFFFFFFFFFFFFLL;
    if (!v20)
      goto LABEL_14;
    goto LABEL_13;
  }
  v9 = (char *)a3 + location;
  v10 = -1;
  v11 = 0x7FFFFFFFFFFFFFFFLL;
  v12 = v20;
  do
  {
    v13 = *v12;
    v14 = v12[1];
    v12 += 2;
    v15 = v14 + v13;
    v16 = (char *)a3 - v13;
    if ((unint64_t)a3 < v13)
      v16 = 0;
    v17 = v15 >= (unint64_t)v9;
    v18 = (char *)(v15 - (_QWORD)v9);
    if (!v17)
      v18 = 0;
    if (v16 > v18)
      v18 = v16;
    if ((unint64_t)v18 < v10)
    {
      v10 = (unint64_t)v18;
      v11 = v13;
    }
  }
  while (v12 != v21);
  if (v20)
  {
LABEL_13:
    v21 = v20;
    operator delete(v20);
  }
LABEL_14:

  return v11;
}

void sub_245C0C988(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

scml::MultiwordGazetteer *std::unique_ptr<scml::MultiwordGazetteer>::reset[abi:ne180100](scml::MultiwordGazetteer **a1, scml::MultiwordGazetteer *a2)
{
  scml::MultiwordGazetteer *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    scml::MultiwordGazetteer::~MultiwordGazetteer(result);
    JUMPOUT(0x249544F58);
  }
  return result;
}

void _ZNSt3__110__function6__funcIZZ67__SCMLPeopleDetector_detectPeopleAsynchronously_completionHandler__EUb_E3__1NS_9allocatorIS2_EEFvvEED0Ev()
{
  JUMPOUT(0x249544F58);
}

_QWORD *_ZNKSt3__110__function6__funcIZZ67__SCMLPeopleDetector_detectPeopleAsynchronously_completionHandler__EUb_E3__1NS_9allocatorIS2_EEFvvEE7__cloneEv()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_2516E4178;
  return result;
}

void _ZNKSt3__110__function6__funcIZZ67__SCMLPeopleDetector_detectPeopleAsynchronously_completionHandler__EUb_E3__1NS_9allocatorIS2_EEFvvEE7__cloneEPNS0_6__baseIS5_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_2516E4178;
}

uint64_t _ZNKSt3__110__function6__funcIZZ67__SCMLPeopleDetector_detectPeopleAsynchronously_completionHandler__EUb_E3__1NS_9allocatorIS2_EEFvvEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](a2, (uint64_t)&_ZTIZZ67__SCMLPeopleDetector_detectPeopleAsynchronously_completionHandler__EUb_E3__1))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZZ67__SCMLPeopleDetector_detectPeopleAsynchronously_completionHandler__EUb_E3__1NS_9allocatorIS2_EEFvvEE11target_typeEv()
{
  return &_ZTIZZ67__SCMLPeopleDetector_detectPeopleAsynchronously_completionHandler__EUb_E3__1;
}

void OUTLINED_FUNCTION_0_0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0xCu);
}

_QWORD *scml::scml_impl::escapeAndWriteStream(_QWORD *a1, char *a2, uint64_t a3)
{
  unsigned __int8 v6;
  uint64_t **v7;
  uint64_t **v8;
  uint64_t v9;
  uint64_t *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t i;
  char v17;
  char v18[8];
  _QWORD v19[3];
  char v20;
  _QWORD v21[3];
  char v22;
  _QWORD v23[3];
  char v24;
  _QWORD v25[4];

  v25[3] = *MEMORY[0x24BDAC8D0];
  if ((v6 & 1) == 0
  {
    v15 = operator new();
    v18[0] = 92;
    std::string::basic_string[abi:ne180100]<0>(v19, "\\\\");
    v20 = 34;
    std::string::basic_string[abi:ne180100]<0>(v21, "\\\"");
    v22 = 10;
    std::string::basic_string[abi:ne180100]<0>(v23, "\\n");
    v24 = 9;
    std::string::basic_string[abi:ne180100]<0>(v25, "\\t");
    std::unordered_map<char,std::string>::unordered_map(v15, v18, 4);
    for (i = 0; i != -16; i -= 4)
    {
      if (SHIBYTE(v25[i + 2]) < 0)
        operator delete((void *)v25[i]);
    }
    scml::scml_impl::escapeAndWriteStream(std::ostream &,std::string_view)::replacements = v15;
  }
  for (; a3; --a3)
  {
    v17 = *a2;
    v7 = std::__hash_table<std::__hash_value_type<char,std::string>,std::__unordered_map_hasher<char,std::__hash_value_type<char,std::string>,std::hash<char>,std::equal_to<char>,true>,std::__unordered_map_equal<char,std::__hash_value_type<char,std::string>,std::equal_to<char>,std::hash<char>,true>,std::allocator<std::__hash_value_type<char,std::string>>>::find<char>((_QWORD *)scml::scml_impl::escapeAndWriteStream(std::ostream &,std::string_view)::replacements, &v17);
    if (v7)
    {
      v10 = v7[3];
      v8 = v7 + 3;
      v9 = (uint64_t)v10;
      v11 = *((char *)v8 + 23);
      if (v11 >= 0)
        v12 = (uint64_t)v8;
      else
        v12 = v9;
      if (v11 >= 0)
        v13 = *((unsigned __int8 *)v8 + 23);
      else
        v13 = (uint64_t)v8[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, v12, v13);
    }
    else
    {
      v18[0] = v17;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v18, 1);
    }
    ++a2;
  }
  return a1;
}

void sub_245C0CD9C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v4 = 0;
  while (1)
  {
    if (*(char *)(v2 + v4 + 127) < 0)
      operator delete(*(void **)(v2 + v4 + 104));
    v4 -= 32;
    if (v4 == -128)
    {
      MEMORY[0x249544F58](v1, 0x10A0C408EF24B1CLL);
      _Unwind_Resume(a1);
    }
  }
}

uint64_t scml::strEscape@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  _QWORD v6[10];
  char v7;
  uint64_t v8;
  _QWORD v9[2];

  v9[0] = a1;
  v9[1] = a2;
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v5);
  scml::scml_impl::writeStream<std::string_view>(&v5, (uint64_t)v9, 1);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v6, a3);
  v5 = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)&v6[-1] + *(_QWORD *)(v5 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v6[0] = MEMORY[0x24BEDB848] + 16;
  if (v7 < 0)
    operator delete((void *)v6[8]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x249544EE0](&v8);
}

void sub_245C0CEF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::ostringstream::~ostringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *scml::scml_impl::writeStream<std::string_view>(_QWORD *a1, uint64_t a2, int a3)
{
  _QWORD *v4;
  const char *v5;
  uint64_t v6;

  v4 = a1;
  if (a3)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"\"", 1);
    a1 = scml::scml_impl::escapeAndWriteStream(v4, *(char **)a2, *(_QWORD *)(a2 + 8));
    v5 = "\"";
    v6 = 1;
  }
  else
  {
    v5 = *(const char **)a2;
    v6 = *(_QWORD *)(a2 + 8);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v5, v6);
  return v4;
}

id scml::strEscape(scml *this, NSString *a2)
{
  void **v2;
  uint64_t v3;
  unint64_t v4;
  void **v5;
  void *v6;
  id v7;
  void *v8;
  void **v9;
  void *v10;
  void *v12[2];
  unsigned __int8 v13;
  void *__p[2];
  unsigned __int8 v15;

  scml::strFromNSString(this, v12);
  if ((v13 & 0x80u) == 0)
    v2 = v12;
  else
    v2 = (void **)v12[0];
  if ((v13 & 0x80u) == 0)
    v3 = v13;
  else
    v3 = (uint64_t)v12[1];
  scml::strEscape((uint64_t)v2, v3, __p);
  v4 = v15;
  v5 = (void **)__p[0];
  v6 = __p[1];
  v7 = objc_alloc(MEMORY[0x24BDD17C8]);
  if ((v4 & 0x80u) == 0)
    v8 = (void *)v4;
  else
    v8 = v6;
  if ((v4 & 0x80u) == 0)
    v9 = __p;
  else
    v9 = v5;
  v10 = (void *)objc_msgSend(v7, "initWithBytes:length:encoding:", v9, v8, 4);
  if ((char)v15 < 0)
    operator delete(__p[0]);
  if ((char)v13 < 0)
    operator delete(v12[0]);
  return v10;
}

void sub_245C0D020(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

id scml::strToNSString(uint64_t a1, uint64_t a2)
{
  return (id)objc_msgSend(objc_alloc(MEMORY[0x24BDD17C8]), "initWithBytes:length:encoding:", a1, a2, 4);
}

void scml::strFromNSString(scml *this@<X0>, _QWORD *a2@<X8>)
{
  scml *v4;
  scml *v5;
  scml *v6;

  v4 = this;
  v6 = v4;
  if (v4)
  {
    v5 = objc_retainAutorelease(v4);
    std::string::basic_string[abi:ne180100](a2, (void *)-[scml UTF8String](v5, "UTF8String"), -[scml lengthOfBytesUsingEncoding:](v5, "lengthOfBytesUsingEncoding:", 4));
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a2, "(nil)");
  }

}

void sub_245C0D10C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t scml::strMul@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v9;
  _QWORD v10[10];
  char v11;
  uint64_t v12;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v9);
  for (; a3; --a3)
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v9, a1, a2);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v10, a4);
  v9 = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)&v10[-1] + *(_QWORD *)(v9 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v10[0] = MEMORY[0x24BEDB848] + 16;
  if (v11 < 0)
    operator delete((void *)v10[8]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x249544EE0](&v12);
}

void sub_245C0D1F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::ostringstream::~ostringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void scml::strFromNSError(scml *this@<X0>, _QWORD *a2@<X8>)
{
  scml *v4;

  -[scml localizedDescription](this, "localizedDescription");
  v4 = (scml *)objc_claimAutoreleasedReturnValue();
  scml::strFromNSString(v4, a2);

}

void sub_245C0D24C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

BOOL scml::strEndsWith(scml *this, NSString *a2, NSString *a3)
{
  scml *v4;
  NSString *v5;
  uint64_t v6;
  uint64_t v7;
  _BOOL8 v8;

  v4 = this;
  v5 = a2;
  if (-[NSString length](v5, "length"))
  {
    v7 = -[scml rangeOfString:](v4, "rangeOfString:", v5);
    v8 = v7 != 0x7FFFFFFFFFFFFFFFLL && v7 + v6 == -[scml length](v4, "length");
  }
  else
  {
    v8 = 1;
  }

  return v8;
}

void sub_245C0D2EC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id scml::regexMake(scml *this, NSString *a2)
{
  scml *v2;
  void *v3;
  std::runtime_error *exception;
  id v6;

  v2 = this;
  v6 = 0;
  objc_msgSend(MEMORY[0x24BDD1798], "regularExpressionWithPattern:options:error:", v2, 0, &v6);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  if (v6)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "bad regex");
    __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }

  return v3;
}

void sub_245C0D3A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  void *v9;
  void *v10;

  _Unwind_Resume(a1);
}

BOOL scml::regexSearch(scml *this, NSRegularExpression *a2, NSString *a3)
{
  scml *v4;
  NSRegularExpression *v5;
  _BOOL8 v6;

  v4 = this;
  v5 = a2;
  v6 = -[scml rangeOfFirstMatchInString:options:range:](v4, "rangeOfFirstMatchInString:options:range:", v5, 0, 0, -[NSRegularExpression length](v5, "length")) != 0x7FFFFFFFFFFFFFFFLL;

  return v6;
}

void sub_245C0D440(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id scml::strSplitByRegex(scml *this, NSString *a2, NSRegularExpression *a3)
{
  char v3;
  scml *v5;
  NSString *v6;
  uint64_t v7;
  scml *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  id v13;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, void *);
  void *v18;
  scml *v19;
  uint64_t *v20;
  uint64_t *v21;
  char v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t (*v30)(uint64_t, uint64_t);
  void (*v31)(uint64_t);
  id v32;

  v3 = (char)a3;
  v5 = this;
  v6 = a2;
  v27 = 0;
  v28 = &v27;
  v29 = 0x3032000000;
  v30 = __Block_byref_object_copy__1;
  v31 = __Block_byref_object_dispose__1;
  v32 = (id)objc_msgSend(MEMORY[0x24BDBD1A8], "mutableCopy");
  v23 = 0;
  v24 = &v23;
  v25 = 0x2020000000;
  v26 = 0;
  v7 = -[scml length](v5, "length");
  v15 = MEMORY[0x24BDAC760];
  v16 = 3221225472;
  v17 = ___ZN4scml15strSplitByRegexEP8NSStringP19NSRegularExpressionb_block_invoke;
  v18 = &unk_2516E4928;
  v20 = &v27;
  v8 = v5;
  v19 = v8;
  v21 = &v23;
  v22 = v3;
  -[NSString enumerateMatchesInString:options:range:usingBlock:](v6, "enumerateMatchesInString:options:range:usingBlock:", v8, 0, 0, v7, &v15);
  v9 = (void *)v28[5];
  v10 = v24[3];
  v11 = -[scml length](v8, "length", v15, v16, v17, v18);
  -[scml substringWithRange:](v8, "substringWithRange:", v10, v11 - v24[3]);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "addObject:", v12);

  v13 = (id)v28[5];
  _Block_object_dispose(&v23, 8);
  _Block_object_dispose(&v27, 8);

  return v13;
}

void sub_245C0D5E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,id a26)
{
  void *v26;
  void *v27;
  void *v28;

  _Block_object_dispose(&a17, 8);
  _Block_object_dispose(&a21, 8);

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__1(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__1(uint64_t a1)
{

}

void ___ZN4scml15strSplitByRegexEP8NSStringP19NSRegularExpressionb_block_invoke(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  id v13;

  v3 = a2;
  v4 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
  v13 = v3;
  objc_msgSend(*(id *)(a1 + 32), "substringWithRange:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24), objc_msgSend(v3, "range") - *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "addObject:", v5);

  if (*(_BYTE *)(a1 + 56))
  {
    v6 = *(void **)(a1 + 32);
    v7 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
    v8 = objc_msgSend(v13, "range");
    objc_msgSend(v6, "substringWithRange:", v8, v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v7, "addObject:", v10);

  }
  v11 = objc_msgSend(v13, "range");
  objc_msgSend(v13, "range");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = v12 + v11;

}

void sub_245C0D74C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

id scml::strSplit(scml *this, NSString *a2)
{
  scml *v2;
  unsigned __int8 v3;
  void *v4;

  v2 = this;
  {
    objc_msgSend(MEMORY[0x24BDD1798], "regularExpressionWithPattern:options:error:", CFSTR("\\s+"), 0, 0);
    scml::strSplit(NSString *)::regex = objc_claimAutoreleasedReturnValue();
  }
  scml::strSplitByRegex(v2, (NSString *)scml::strSplit(NSString *)::regex, 0);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

void sub_245C0D814(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id scml::strTokenizeWords(scml *this, NSString *a2)
{
  unsigned __int8 v2;
  void *v3;
  id v4;
  unsigned __int8 v5;
  unsigned __int8 v6;
  unint64_t i;
  void *v8;
  int v9;
  scml *v10;
  NSRegularExpression *v11;
  NSString *v12;
  _BOOL4 v13;
  _BOOL4 v14;
  scml *v15;
  NSRegularExpression *v16;
  NSString *v17;
  _QWORD *v18;
  _QWORD *v19;
  void *v20;
  unint64_t j;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t k;
  void *v31;
  scml *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  unsigned __int8 v38;
  void *__p;
  _BYTE v40[128];
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  v33 = this;
  {
    objc_msgSend(MEMORY[0x24BDD1798], "regularExpressionWithPattern:options:error:", CFSTR("\\b"), 64, 0);
    scml::strTokenizeWords(NSString *)::regex = objc_claimAutoreleasedReturnValue();
  }
  objc_msgSend(MEMORY[0x24BDD14A8], "whitespaceAndNewlineCharacterSet");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  scml::strSplitByRegex(v33, (NSString *)scml::strTokenizeWords(NSString *)::regex, 0);
  v4 = (id)objc_claimAutoreleasedReturnValue();
  if ((v5 & 1) == 0
  {
    objc_msgSend(MEMORY[0x24BDD1798], "regularExpressionWithPattern:options:error:", CFSTR("\\p{Letter}$"), 64, 0);
  }
  if ((v6 & 1) == 0
  {
    objc_msgSend(MEMORY[0x24BDD1798], "regularExpressionWithPattern:options:error:", CFSTR("^\\p{Letter}"), 64, 0);
  }
  v38 = 0;
  std::vector<BOOL>::vector(&__p, objc_msgSend(v4, "count"), &v38);
  for (i = 0; i < objc_msgSend(v4, "count"); ++i)
  {
    objc_msgSend(v4, "objectAtIndexedSubscript:", i);
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    v9 = objc_msgSend(v8, "isEqualToString:", CFSTR(":"));

    if (v9)
    {
      if (i)
      {
        objc_msgSend(v4, "objectAtIndexedSubscript:", i - 1);
        v11 = (NSRegularExpression *)objc_claimAutoreleasedReturnValue();
        v13 = scml::regexSearch(v10, v11, v12);

      }
      else
      {
        v13 = 1;
      }
      if (i == objc_msgSend(v4, "count") - 1)
      {
        v14 = 1;
      }
      else
      {
        objc_msgSend(v4, "objectAtIndexedSubscript:", i + 1);
        v16 = (NSRegularExpression *)objc_claimAutoreleasedReturnValue();
        v14 = scml::regexSearch(v15, v16, v17);

      }
      if (v13 && v14)
      {
        v18 = __p;
        if (i)
          *(_QWORD *)((char *)__p + (((i - 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << (i - 1);
        v18[i >> 6] |= 1 << i;
        if (i >= objc_msgSend(v4, "count") - 1)
        {
          v19 = __p;
        }
        else
        {
          v19 = __p;
          *(_QWORD *)((char *)__p + (((i + 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << (i + 1);
        }
        v19[i >> 6] |= 1 << i;
      }
      else
      {
        *(_QWORD *)((char *)__p + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << i);
      }
    }
  }
  v20 = (void *)objc_msgSend(MEMORY[0x24BDBD1A8], "mutableCopy");
  for (j = 0; j < objc_msgSend(v4, "count"); ++j)
  {
    objc_msgSend(v4, "objectAtIndexedSubscript:", j);
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v20, "addObject:", v22);

    if (((*(_QWORD *)((char *)__p + ((j >> 3) & 0x1FFFFFFFFFFFFFF8)) >> j) & 1) != 0)
    {
      while (j < objc_msgSend(v4, "count") - 1
           && ((*(_QWORD *)((char *)__p + (((j + 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (j + 1)) & 1) != 0)
      {
        objc_msgSend(v20, "objectAtIndexedSubscript:", objc_msgSend(v20, "count") - 1);
        v23 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v4, "objectAtIndexedSubscript:", j + 1);
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v23, "stringByAppendingString:", v24);
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v20, "setObject:atIndexedSubscript:", v25, objc_msgSend(v20, "count") - 1);

        ++j;
      }
    }
  }
  if (__p)
    operator delete(__p);

  v26 = (void *)objc_msgSend(MEMORY[0x24BDBD1A8], "mutableCopy");
  v36 = 0u;
  v37 = 0u;
  v34 = 0u;
  v35 = 0u;
  v27 = v20;
  v28 = objc_msgSend(v27, "countByEnumeratingWithState:objects:count:", &v34, v40, 16);
  if (v28)
  {
    v29 = *(_QWORD *)v35;
    do
    {
      for (k = 0; k != v28; ++k)
      {
        if (*(_QWORD *)v35 != v29)
          objc_enumerationMutation(v27);
        objc_msgSend(*(id *)(*((_QWORD *)&v34 + 1) + 8 * k), "stringByTrimmingCharactersInSet:", v3);
        v31 = (void *)objc_claimAutoreleasedReturnValue();
        if (objc_msgSend(v31, "length"))
          objc_msgSend(v26, "addObject:", v31);

      }
      v28 = objc_msgSend(v27, "countByEnumeratingWithState:objects:count:", &v34, v40, 16);
    }
    while (v28);
  }

  return v26;
}

void sub_245C0DD74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p)
{
  void *v20;
  void *v21;

  _Unwind_Resume(a1);
}

_QWORD *std::string::basic_string[abi:ne180100](_QWORD *__dst, void *__src, size_t __len)
{
  void *v6;
  size_t v7;
  size_t v8;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    __dst[1] = __len;
    __dst[2] = v8 | 0x8000000000000000;
    *__dst = v6;
  }
  else
  {
    *((_BYTE *)__dst + 23) = __len;
    v6 = __dst;
    if (!__len)
      goto LABEL_9;
  }
  memmove(v6, __src, __len);
LABEL_9:
  *((_BYTE *)v6 + __len) = 0;
  return __dst;
}

_QWORD *std::vector<BOOL>::vector(_QWORD *a1, unint64_t a2, unsigned __int8 *a3)
{
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;
  int v14;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<BOOL>::__vallocate[abi:ne180100](a1, a2);
    v6 = *a3;
    v7 = a1[1];
    v8 = v7 + a2;
    a1[1] = v7 + a2;
    if (v7)
    {
      v9 = v8 - 1;
      if (((v8 - 1) ^ (v7 - 1)) < 0x40)
      {
LABEL_10:
        v13 = *a1 + 8 * (v7 >> 6);
        v14 = v7 & 0x3F;
        if (v6)
          std::__fill_n[abi:ne180100]<true,std::vector<BOOL>>(&v13, a2);
        else
          std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>((uint64_t)&v13, a2);
        return a1;
      }
    }
    else
    {
      v9 = v8 - 1;
    }
    v10 = v9 >> 6;
    if (v8 >= 0x41)
      v11 = v10;
    else
      v11 = 0;
    *(_QWORD *)(*a1 + 8 * v11) = 0;
    goto LABEL_10;
  }
  return a1;
}

void *std::vector<BOOL>::__vallocate[abi:ne180100](_QWORD *a1, uint64_t a2)
{
  void *result;
  uint64_t v4;

  if (a2 < 0)
    std::vector<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>>::__throw_length_error[abi:ne180100]();
  result = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 2), ((unint64_t)(a2 - 1) >> 6) + 1);
  *a1 = result;
  a1[1] = 0;
  a1[2] = v4;
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(8 * a2);
}

_QWORD *std::__fill_n[abi:ne180100]<true,std::vector<BOOL>>(_QWORD *result, unint64_t a2)
{
  unint64_t v2;
  _QWORD *v3;
  int v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;

  v2 = a2;
  v3 = result;
  v4 = *((_DWORD *)result + 2);
  v5 = (_QWORD *)*result;
  if (v4)
  {
    if ((64 - v4) >= a2)
      v6 = a2;
    else
      v6 = (64 - v4);
    *v5++ |= (0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4);
    v2 = a2 - v6;
    *result = v5;
  }
  v7 = v2 >> 6;
  if (v2 >= 0x40)
    result = memset(v5, 255, 8 * v7);
  if ((v2 & 0x3F) != 0)
  {
    v8 = &v5[v7];
    *v3 = v8;
    *v8 |= 0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F);
  }
  return result;
}

void std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  int v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;

  v2 = a2;
  v4 = *(_DWORD *)(a1 + 8);
  v5 = *(_QWORD **)a1;
  if (v4)
  {
    if ((64 - v4) >= a2)
      v6 = a2;
    else
      v6 = (64 - v4);
    *v5++ &= ~((0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4));
    v2 = a2 - v6;
    *(_QWORD *)a1 = v5;
  }
  v7 = v2 >> 6;
  if (v2 >= 0x40)
    bzero(v5, 8 * v7);
  if ((v2 & 0x3F) != 0)
  {
    v8 = &v5[v7];
    *(_QWORD *)a1 = v8;
    *v8 &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F));
  }
}

uint64_t std::unordered_map<char,std::string>::unordered_map(uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    v5 = 32 * a3;
    do
    {
      std::__hash_table<std::__hash_value_type<char,std::string>,std::__unordered_map_hasher<char,std::__hash_value_type<char,std::string>,std::hash<char>,std::equal_to<char>,true>,std::__unordered_map_equal<char,std::__hash_value_type<char,std::string>,std::equal_to<char>,std::hash<char>,true>,std::allocator<std::__hash_value_type<char,std::string>>>::__emplace_unique_key_args<char,std::pair<char const,std::string> const&>(a1, a2, (uint64_t)a2);
      a2 += 32;
      v5 -= 32;
    }
    while (v5);
  }
  return a1;
}

void sub_245C0E24C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<char,std::string>,std::__unordered_map_hasher<char,std::__hash_value_type<char,std::string>,std::hash<char>,std::equal_to<char>,true>,std::__unordered_map_equal<char,std::__hash_value_type<char,std::string>,std::equal_to<char>,std::hash<char>,true>,std::allocator<std::__hash_value_type<char,std::string>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t **std::__hash_table<std::__hash_value_type<char,std::string>,std::__unordered_map_hasher<char,std::__hash_value_type<char,std::string>,std::hash<char>,std::equal_to<char>,true>,std::__unordered_map_equal<char,std::__hash_value_type<char,std::string>,std::equal_to<char>,std::hash<char>,true>,std::allocator<std::__hash_value_type<char,std::string>>>::__emplace_unique_key_args<char,std::pair<char const,std::string> const&>(uint64_t a1, char *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v6;
  uint8x8_t v7;
  uint64_t ***v8;
  uint64_t **result;
  unint64_t v10;
  float v11;
  float v12;
  _BOOL8 v13;
  unint64_t v14;
  unint64_t v15;
  size_t v16;
  _QWORD *v17;
  unint64_t v18;
  _QWORD v19[3];

  v5 = *a2;
  v6 = *(_QWORD *)(a1 + 8);
  if (v6)
  {
    v7 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v6 <= v5)
        v3 = v5 % v6;
    }
    else
    {
      v3 = (v6 - 1) & v5;
    }
    v8 = *(uint64_t ****)(*(_QWORD *)a1 + 8 * v3);
    if (v8)
    {
      for (result = *v8; result; result = (uint64_t **)*result)
      {
        v10 = (unint64_t)result[1];
        if (v10 == v5)
        {
          if (*((unsigned __int8 *)result + 16) == v5)
            return result;
        }
        else
        {
          if (v7.u32[0] > 1uLL)
          {
            if (v10 >= v6)
              v10 %= v6;
          }
          else
          {
            v10 &= v6 - 1;
          }
          if (v10 != v3)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<char,std::string>,std::__unordered_map_hasher<char,std::__hash_value_type<char,std::string>,std::hash<char>,std::equal_to<char>,true>,std::__unordered_map_equal<char,std::__hash_value_type<char,std::string>,std::equal_to<char>,std::hash<char>,true>,std::allocator<std::__hash_value_type<char,std::string>>>::__construct_node_hash<std::pair<char const,std::string> const&>(a1, *a2, a3, (uint64_t)v19);
  v11 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v12 = *(float *)(a1 + 32);
  if (!v6 || (float)(v12 * (float)v6) < v11)
  {
    v13 = 1;
    if (v6 >= 3)
      v13 = (v6 & (v6 - 1)) != 0;
    v14 = v13 | (2 * v6);
    v15 = vcvtps_u32_f32(v11 / v12);
    if (v14 <= v15)
      v16 = v15;
    else
      v16 = v14;
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1, v16);
    v6 = *(_QWORD *)(a1 + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v6 <= v5)
        v3 = v5 % v6;
      else
        v3 = v5;
    }
    else
    {
      v3 = (v6 - 1) & v5;
    }
  }
  v17 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v17)
  {
    *(_QWORD *)v19[0] = *v17;
    *v17 = v19[0];
  }
  else
  {
    *(_QWORD *)v19[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v19[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v19[0])
    {
      v18 = *(_QWORD *)(*(_QWORD *)v19[0] + 8);
      if ((v6 & (v6 - 1)) != 0)
      {
        if (v18 >= v6)
          v18 %= v6;
      }
      else
      {
        v18 &= v6 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v18) = v19[0];
    }
  }
  result = (uint64_t **)v19[0];
  ++*(_QWORD *)(a1 + 24);
  return result;
}

void sub_245C0E470(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p)
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<char,std::string>,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, __p);
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::__hash_value_type<char,std::string>,std::__unordered_map_hasher<char,std::__hash_value_type<char,std::string>,std::hash<char>,std::equal_to<char>,true>,std::__unordered_map_equal<char,std::__hash_value_type<char,std::string>,std::equal_to<char>,std::hash<char>,true>,std::allocator<std::__hash_value_type<char,std::string>>>::__construct_node_hash<std::pair<char const,std::string> const&>(uint64_t a1@<X0>, std::string::size_type a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  std::string *v8;
  std::string *v9;

  v7 = a1 + 16;
  v8 = (std::string *)operator new(0x30uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  v8->__r_.__value_.__l.__size_ = a2;
  v8->__r_.__value_.__s.__data_[16] = *(_BYTE *)a3;
  v9 = v8 + 1;
  if (*(char *)(a3 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)(a3 + 8), *(_QWORD *)(a3 + 16));
  }
  else
  {
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)(a3 + 8);
    v9->__r_.__value_.__r.__words[2] = *(_QWORD *)(a3 + 24);
  }
  *(_BYTE *)(a4 + 16) = 1;
}

void sub_245C0E528(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<char,std::string>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<char,std::string>,void *>>>::operator()[abi:ne180100](uint64_t a1, void **__p)
{
  if (*(_BYTE *)(a1 + 8))
  {
    if (*((char *)__p + 47) < 0)
      operator delete(__p[3]);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

uint64_t std::__hash_table<std::__hash_value_type<char,std::string>,std::__unordered_map_hasher<char,std::__hash_value_type<char,std::string>,std::hash<char>,std::equal_to<char>,true>,std::__unordered_map_equal<char,std::__hash_value_type<char,std::string>,std::equal_to<char>,std::hash<char>,true>,std::allocator<std::__hash_value_type<char,std::string>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<char,std::string>,std::__unordered_map_hasher<char,std::__hash_value_type<char,std::string>,std::hash<char>,std::equal_to<char>,true>,std::__unordered_map_equal<char,std::__hash_value_type<char,std::string>,std::equal_to<char>,std::hash<char>,true>,std::allocator<std::__hash_value_type<char,std::string>>>::__deallocate_node(a1, *(void ***)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<char,std::string>,std::__unordered_map_hasher<char,std::__hash_value_type<char,std::string>,std::hash<char>,std::equal_to<char>,true>,std::__unordered_map_equal<char,std::__hash_value_type<char,std::string>,std::equal_to<char>,std::hash<char>,true>,std::allocator<std::__hash_value_type<char,std::string>>>::__deallocate_node(int a1, void **__p)
{
  void **v2;
  void **v3;

  if (__p)
  {
    v2 = __p;
    do
    {
      v3 = (void **)*v2;
      if (*((char *)v2 + 47) < 0)
        operator delete(v2[3]);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

uint64_t **std::__hash_table<std::__hash_value_type<char,std::string>,std::__unordered_map_hasher<char,std::__hash_value_type<char,std::string>,std::hash<char>,std::equal_to<char>,true>,std::__unordered_map_equal<char,std::__hash_value_type<char,std::string>,std::equal_to<char>,std::hash<char>,true>,std::allocator<std::__hash_value_type<char,std::string>>>::find<char>(_QWORD *a1, char *a2)
{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  uint64_t ***v6;
  uint64_t **result;
  unint64_t v8;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *a2;
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = *a2;
    if (*(_QWORD *)&v2 <= v3)
      v5 = v3 % *(_QWORD *)&v2;
  }
  else
  {
    v5 = (*(_QWORD *)&v2 - 1) & v3;
  }
  v6 = *(uint64_t ****)(*a1 + 8 * v5);
  if (!v6)
    return 0;
  for (result = *v6; result; result = (uint64_t **)*result)
  {
    v8 = (unint64_t)result[1];
    if (v8 == v3)
    {
      if (*((unsigned __int8 *)result + 16) == v3)
        return result;
    }
    else
    {
      if (v4.u32[0] > 1uLL)
      {
        if (v8 >= *(_QWORD *)&v2)
          v8 %= *(_QWORD *)&v2;
      }
      else
      {
        v8 &= *(_QWORD *)&v2 - 1;
      }
      if (v8 != v5)
        return 0;
    }
  }
  return result;
}

unint64_t SCML::extractLocalPeaks@<X0>(uint64_t *a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  int v5;
  int v6;
  uint64_t v7;
  unint64_t result;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  unsigned int v17;
  int v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  float v23;
  int v24;
  uint64_t v25;
  unsigned int v26;
  int v27;
  unint64_t v28;
  float v29;
  BOOL v30;
  int v31;
  int v32;

  v6 = *((_DWORD *)a1 + 2);
  v5 = *((_DWORD *)a1 + 3);
  v7 = *((unsigned int *)a1 + 4);
  v32 = 0;
  result = (unint64_t)std::vector<float>::vector(a3, (int)v7 * v6 * v5, &v32);
  if (a2 >= 1)
    v9 = a2 - 1;
  else
    v9 = a2;
  v31 = v6;
  if (v6 >= 1)
  {
    v10 = 0;
    v11 = 0;
    v12 = *(_QWORD *)result;
    v13 = v9 >> 1;
    v15 = *((_DWORD *)a1 + 3);
    v14 = *((_DWORD *)a1 + 4);
    v16 = v13 + 1;
    do
    {
      if (v5 >= 1)
      {
        v17 = 0;
        LODWORD(result) = -v13;
        do
        {
          v18 = v16 + v17;
          if ((int)(v16 + v17) >= v5)
            v18 = v5;
          if ((int)v7 >= 1)
          {
            v19 = 0;
            v20 = *a1;
            v21 = (v11 * v15 + v17) * v14;
            v22 = -v13;
            do
            {
              v23 = *(float *)(v20 + 4 * (v21 + (int)v19));
              if ((int)((v17 - v13) & ~((int)(v17 - v13) >> 31)) >= v18)
              {
LABEL_26:
                *(float *)(v12 + 4 * (v21 + (int)v19)) = v23;
              }
              else
              {
                v24 = v16 + v19;
                if ((int)v7 < v16 + (int)v19)
                  v24 = v7;
                v25 = v24;
                v26 = v14 * (v10 + (result & ~((int)result >> 31)));
                v27 = (v17 - v13) & ~((int)(v17 - v13) >> 31);
                while ((int)((v19 - v13) & ~(((int)v19 - v13) >> 31)) >= (int)v25)
                {
LABEL_25:
                  ++v27;
                  v26 += v14;
                  if (v27 >= v18)
                    goto LABEL_26;
                }
                v28 = v22 & ~(v22 >> 31);
                while (1)
                {
                  v29 = *(float *)(v20 + 4 * (int)(v26 + v28));
                  if (v23 <= v29)
                  {
                    v30 = v17 < v27;
                    if (v19 != v28)
                      v30 = 0;
                    if (v19 < v28 || v23 < v29 || v30)
                      break;
                  }
                  if ((uint64_t)++v28 >= v25)
                    goto LABEL_25;
                }
              }
              ++v19;
              ++v22;
            }
            while (v19 != v7);
          }
          ++v17;
          result = (result + 1);
        }
        while (v17 != v5);
      }
      ++v11;
      v10 += v15;
    }
    while (v11 != v31);
  }
  return result;
}

void SCML::topDetections(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, _QWORD *a4@<X8>)
{
  int v4;
  uint64_t *v5;
  uint64_t v6;
  int v7;
  unint64_t v10;
  int v11;
  unint64_t *v12;
  int i;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  int v18;
  float v19;
  int v20;
  int v21;
  float v22;
  float v23;
  int v24;
  double v25;
  double v26;
  double v27;
  double v28;
  void *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  __int128 v36;
  __int128 v37;
  char *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t *v43;

  v4 = a3;
  v5 = a4;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  if (SHIDWORD(v6) < 1)
  {
    v10 = 0;
    v39 = 0;
  }
  else
  {
    v10 = 0;
    v11 = 0;
    v12 = a4 + 2;
    v43 = a4 + 2;
    do
    {
      if (v7 >= 1)
      {
        for (i = 0; i != v7; ++i)
        {
          if ((int)v6 >= 1)
          {
            v14 = 0;
            v15 = *(_DWORD *)(a1 + 16);
            v16 = i + v11 * v15;
            v17 = *(_DWORD *)(a1 + 12) * v15;
            v18 = -1;
            v19 = 0.0;
            do
            {
              if (*(float *)(*(_QWORD *)a1 + 4 * v16) > v19)
              {
                v18 = v14;
                v19 = *(float *)(*(_QWORD *)a1 + 4 * v16);
              }
              ++v14;
              v16 += v17;
            }
            while (v6 != v14);
            if ((v18 & 0x80000000) == 0)
            {
              v21 = *(_DWORD *)(a2 + 12);
              v20 = *(_DWORD *)(a2 + 16);
              v22 = *(float *)(*(_QWORD *)a2 + 4 * (i + v20 * v11));
              v23 = *(float *)(*(_QWORD *)a2 + 4 * (i + (v21 + v11) * v20));
              v24 = v11 + 2 * v21;
              v25 = v23;
              v26 = v22;
              v27 = (float)(*(float *)(*(_QWORD *)a2 + 4 * (i + (v24 + v21) * v20)) - v23);
              v28 = (float)(*(float *)(*(_QWORD *)a2 + 4 * (i + v24 * v20)) - v22);
              if (v10 >= *v12)
              {
                v29 = (void *)*v5;
                v30 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v10 - *v5) >> 3);
                v31 = v30 + 1;
                if (v30 + 1 > 0x666666666666666)
                  std::vector<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>>::__throw_length_error[abi:ne180100]();
                if (0x999999999999999ALL * ((uint64_t)(*v12 - (_QWORD)v29) >> 3) > v31)
                  v31 = 0x999999999999999ALL * ((uint64_t)(*v12 - (_QWORD)v29) >> 3);
                if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*v12 - (_QWORD)v29) >> 3) >= 0x333333333333333)
                  v32 = 0x666666666666666;
                else
                  v32 = v31;
                if (v32)
                {
                  v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SCML::BoxInfo>>((uint64_t)v12, v32);
                  v12 = v43;
                  v29 = (void *)*a4;
                  v10 = a4[1];
                }
                else
                {
                  v33 = 0;
                }
                v34 = &v33[40 * v30];
                *(float *)v34 = v19;
                *((_DWORD *)v34 + 1) = v18;
                *((double *)v34 + 1) = v25;
                *((double *)v34 + 2) = v26;
                *((double *)v34 + 3) = v27;
                *((double *)v34 + 4) = v28;
                if ((void *)v10 == v29)
                {
                  v38 = &v33[40 * v30];
                  v5 = a4;
                }
                else
                {
                  v35 = &v33[40 * v30];
                  v5 = a4;
                  do
                  {
                    v36 = *(_OWORD *)(v10 - 40);
                    v37 = *(_OWORD *)(v10 - 24);
                    v38 = v35 - 40;
                    *((_QWORD *)v35 - 1) = *(_QWORD *)(v10 - 8);
                    *(_OWORD *)(v35 - 24) = v37;
                    *(_OWORD *)(v35 - 40) = v36;
                    v10 -= 40;
                    v35 -= 40;
                  }
                  while ((void *)v10 != v29);
                }
                v10 = (unint64_t)(v34 + 40);
                *v5 = (uint64_t)v38;
                v5[1] = (uint64_t)(v34 + 40);
                v5[2] = (uint64_t)&v33[40 * v32];
                if (v29)
                {
                  operator delete(v29);
                  v12 = v43;
                }
              }
              else
              {
                *(float *)v10 = v19;
                *(_DWORD *)(v10 + 4) = v18;
                *(double *)(v10 + 8) = v25;
                *(double *)(v10 + 16) = v26;
                *(double *)(v10 + 24) = v27;
                *(double *)(v10 + 32) = v28;
                v10 += 40;
              }
              v5[1] = v10;
            }
          }
        }
      }
      ++v11;
    }
    while (v11 != HIDWORD(v6));
    v39 = *v5;
    v4 = a3;
  }
  v40 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v10 - v39) >> 3));
  if (v10 == v39)
    v41 = 0;
  else
    v41 = v40;
  if (0xCCCCCCCCCCCCCCCDLL * ((v5[1] - *v5) >> 3) > v4)
    std::vector<SCML::BoxInfo>::resize((uint64_t)v5, v4);
}

void sub_245C0EB84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  void *v13;

  v13 = *(void **)a12;
  if (*(_QWORD *)a12)
  {
    *(_QWORD *)(a12 + 8) = v13;
    operator delete(v13);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<SCML::BoxInfo>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;

  v2 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3);
  v3 = a2 >= v2;
  v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<SCML::BoxInfo>::__append((void **)a1, v4);
  }
  else if (!v3)
  {
    *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 40 * a2;
  }
}

_QWORD *std::vector<float>::vector(_QWORD *a1, unint64_t a2, _DWORD *a3)
{
  _DWORD *v6;
  _DWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<float>::__vallocate[abi:ne180100](a1, a2);
    v6 = (_DWORD *)a1[1];
    v7 = &v6[a2];
    v8 = 4 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 4;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_245C0EC4C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<float>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 62)
    std::vector<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(4 * a2);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<SCML::BoxInfo>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x666666666666667)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(40 * a2);
}

void std::__introsort<std::_ClassicAlgPolicy,SCML::`anonymous namespace'::BoxDataDescendingScoreComparator &,SCML::BoxInfo *,false>(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  BOOL v40;
  __int128 v41;
  __int128 v42;
  unint64_t v43;
  _BOOL4 v44;
  unint64_t v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 *v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 *v63;
  __int128 *v64;
  __int128 *v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  __int128 v69;
  __int128 v70;
  uint64_t v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  uint64_t v83;
  BOOL v84;
  char v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  __int128 v89;
  __int128 v90;
  uint64_t v91;
  uint64_t v92;
  __int128 v93;
  uint64_t v94;
  __int128 v95;
  __int128 v96;
  int64_t v97;
  int64_t v98;
  int64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  __int128 v103;
  __int128 v104;
  uint64_t v105;
  __int128 v106;
  __int128 v107;
  uint64_t v108;
  uint64_t v109;
  __int128 v110;
  __int128 v111;
  int64_t v112;
  unint64_t v113;
  uint64_t v114;
  __int128 v115;
  __int128 v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  __int128 v130;
  __int128 v131;
  uint64_t v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  uint64_t v140;
  uint64_t v141;
  __int128 v142;
  __int128 v143;
  uint64_t v144;
  __int128 v145;
  BOOL v146;
  __int128 v147;
  __int128 v148;
  uint64_t v149;
  unint64_t v150;
  __int128 v151;
  __int128 v152;
  uint64_t v153;
  __int128 v154;
  __int128 v155;
  uint64_t v156;

LABEL_1:
  v8 = a2 - 40;
  v149 = a2 - 80;
  v150 = a2;
  v9 = a2 - 120;
  v10 = a1;
  while (2)
  {
    a1 = v10;
    v11 = a2 - v10;
    v12 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2 - v10) >> 3);
    switch(v12)
    {
      case 0:
      case 1:
        return;
      case 2:
        {
          v57 = *(_OWORD *)a1;
          v58 = *(_OWORD *)(a1 + 16);
          v156 = *(_QWORD *)(a1 + 32);
          v154 = v57;
          v155 = v58;
          v59 = *(_OWORD *)v8;
          v60 = *(_OWORD *)(v8 + 16);
          *(_QWORD *)(a1 + 32) = *(_QWORD *)(v8 + 32);
          *(_OWORD *)a1 = v59;
          *(_OWORD *)(a1 + 16) = v60;
          v61 = v154;
          v62 = v155;
          *(_QWORD *)(v8 + 32) = v156;
          *(_OWORD *)v8 = v61;
          *(_OWORD *)(v8 + 16) = v62;
        }
        return;
      case 3:
        return;
      case 4:
        return;
      case 5:
        v63 = (__int128 *)(a1 + 40);
        v64 = (__int128 *)(a1 + 80);
        v65 = (__int128 *)(a1 + 120);
        {
          v67 = *(_OWORD *)(a1 + 136);
          v154 = *v65;
          v66 = v154;
          v155 = v67;
          v156 = *(_QWORD *)(a1 + 152);
          v68 = v156;
          v70 = *(_OWORD *)v8;
          v69 = *(_OWORD *)(v8 + 16);
          *(_QWORD *)(a1 + 152) = *(_QWORD *)(v8 + 32);
          *v65 = v70;
          *(_OWORD *)(a1 + 136) = v69;
          *(_QWORD *)(v8 + 32) = v68;
          *(_OWORD *)v8 = v66;
          *(_OWORD *)(v8 + 16) = v67;
          {
            v71 = *(_QWORD *)(a1 + 112);
            v73 = *v64;
            v72 = *(_OWORD *)(a1 + 96);
            v74 = *(_OWORD *)(a1 + 136);
            *v64 = *v65;
            *(_OWORD *)(a1 + 96) = v74;
            *(_QWORD *)(a1 + 112) = *(_QWORD *)(a1 + 152);
            *v65 = v73;
            *(_OWORD *)(a1 + 136) = v72;
            *(_QWORD *)(a1 + 152) = v71;
            {
              v75 = *(_QWORD *)(a1 + 72);
              v77 = *v63;
              v76 = *(_OWORD *)(a1 + 56);
              v78 = *(_OWORD *)(a1 + 96);
              *v63 = *v64;
              *(_OWORD *)(a1 + 56) = v78;
              *(_QWORD *)(a1 + 72) = *(_QWORD *)(a1 + 112);
              *v64 = v77;
              *(_OWORD *)(a1 + 96) = v76;
              *(_QWORD *)(a1 + 112) = v75;
              {
                v79 = *(_OWORD *)a1;
                v80 = *(_OWORD *)(a1 + 16);
                v156 = *(_QWORD *)(a1 + 32);
                v154 = v79;
                v155 = v80;
                v81 = *(_OWORD *)(a1 + 56);
                *(_OWORD *)a1 = *v63;
                *(_OWORD *)(a1 + 16) = v81;
                *(_QWORD *)(a1 + 32) = *(_QWORD *)(a1 + 72);
                v82 = v155;
                *v63 = v154;
                *(_OWORD *)(a1 + 56) = v82;
                *(_QWORD *)(a1 + 72) = v156;
              }
            }
          }
        }
        return;
      default:
        if (v11 <= 959)
        {
          v83 = a1 + 40;
          v84 = a1 == a2 || v83 == a2;
          v85 = v84;
          if ((a4 & 1) != 0)
          {
            if ((v85 & 1) == 0)
            {
              v86 = 0;
              v87 = a1;
              do
              {
                v88 = v87;
                v87 = v83;
                {
                  v89 = *(_OWORD *)v87;
                  v90 = *(_OWORD *)(v87 + 16);
                  v156 = *(_QWORD *)(v87 + 32);
                  v154 = v89;
                  v155 = v90;
                  v91 = v86;
                  while (1)
                  {
                    v92 = a1 + v91;
                    v93 = *(_OWORD *)(a1 + v91 + 16);
                    *(_OWORD *)(v92 + 40) = *(_OWORD *)(a1 + v91);
                    *(_OWORD *)(v92 + 56) = v93;
                    *(_QWORD *)(v92 + 72) = *(_QWORD *)(a1 + v91 + 32);
                    if (!v91)
                      break;
                    v91 -= 40;
                    {
                      v94 = a1 + v91 + 40;
                      goto LABEL_77;
                    }
                  }
                  v94 = a1;
LABEL_77:
                  v95 = v154;
                  v96 = v155;
                  *(_QWORD *)(v94 + 32) = v156;
                  *(_OWORD *)v94 = v95;
                  *(_OWORD *)(v94 + 16) = v96;
                  a2 = v150;
                }
                v83 = v87 + 40;
                v86 += 40;
              }
              while (v87 + 40 != a2);
            }
          }
          else if ((v85 & 1) == 0)
          {
            v140 = a1 - 40;
            do
            {
              v141 = a1;
              a1 = v83;
              {
                v142 = *(_OWORD *)a1;
                v143 = *(_OWORD *)(a1 + 16);
                v156 = *(_QWORD *)(a1 + 32);
                v154 = v142;
                v155 = v143;
                v144 = v140;
                do
                {
                  v145 = *(_OWORD *)(v144 + 56);
                  *(_OWORD *)(v144 + 80) = *(_OWORD *)(v144 + 40);
                  *(_OWORD *)(v144 + 96) = v145;
                  *(_QWORD *)(v144 + 112) = *(_QWORD *)(v144 + 72);
                  v144 -= 40;
                }
                while (v146);
                v147 = v154;
                v148 = v155;
                *(_QWORD *)(v144 + 112) = v156;
                *(_OWORD *)(v144 + 80) = v147;
                *(_OWORD *)(v144 + 96) = v148;
              }
              v83 = a1 + 40;
              v140 += 40;
            }
            while (a1 + 40 != a2);
          }
          return;
        }
        if (!a3)
        {
          if (a1 != a2)
          {
            v97 = (unint64_t)(v12 - 2) >> 1;
            v98 = v97;
            do
            {
              v99 = v98;
              if (v97 >= v98)
              {
                v100 = (2 * v98) | 1;
                v101 = a1 + 40 * v100;
                if (2 * v98 + 2 < v12
                {
                  v101 += 40;
                  v100 = 2 * v99 + 2;
                }
                v102 = a1 + 40 * v99;
                {
                  v103 = *(_OWORD *)v102;
                  v104 = *(_OWORD *)(v102 + 16);
                  v156 = *(_QWORD *)(v102 + 32);
                  v154 = v103;
                  v155 = v104;
                  do
                  {
                    v105 = v101;
                    v106 = *(_OWORD *)v101;
                    v107 = *(_OWORD *)(v101 + 16);
                    *(_QWORD *)(v102 + 32) = *(_QWORD *)(v101 + 32);
                    *(_OWORD *)v102 = v106;
                    *(_OWORD *)(v102 + 16) = v107;
                    if (v97 < v100)
                      break;
                    v108 = (2 * v100) | 1;
                    v101 = a1 + 40 * v108;
                    v109 = 2 * v100 + 2;
                    if (v109 < v12
                    {
                      v101 += 40;
                      v108 = v109;
                    }
                    v102 = v105;
                    v100 = v108;
                  }
                  v110 = v154;
                  v111 = v155;
                  *(_QWORD *)(v105 + 32) = v156;
                  *(_OWORD *)v105 = v110;
                  *(_OWORD *)(v105 + 16) = v111;
                }
              }
              v98 = v99 - 1;
            }
            while (v99);
            v112 = v11 / 0x28uLL;
            v113 = v150;
            do
            {
              v114 = 0;
              v115 = *(_OWORD *)a1;
              v116 = *(_OWORD *)(a1 + 16);
              v153 = *(_QWORD *)(a1 + 32);
              v151 = v115;
              v152 = v116;
              v117 = a1;
              do
              {
                v118 = v117 + 40 * v114 + 40;
                v119 = (2 * v114) | 1;
                v120 = 2 * v114 + 2;
                if (v120 < v112
                {
                  v118 += 40;
                  v119 = v120;
                }
                v121 = *(_OWORD *)v118;
                v122 = *(_OWORD *)(v118 + 16);
                *(_QWORD *)(v117 + 32) = *(_QWORD *)(v118 + 32);
                *(_OWORD *)v117 = v121;
                *(_OWORD *)(v117 + 16) = v122;
                v117 = v118;
                v114 = v119;
              }
              while (v119 <= (uint64_t)((unint64_t)(v112 - 2) >> 1));
              v113 -= 40;
              if (v118 == v113)
              {
                v137 = v151;
                v138 = v152;
                *(_QWORD *)(v118 + 32) = v153;
                *(_OWORD *)v118 = v137;
                *(_OWORD *)(v118 + 16) = v138;
              }
              else
              {
                v123 = *(_OWORD *)v113;
                v124 = *(_OWORD *)(v113 + 16);
                *(_QWORD *)(v118 + 32) = *(_QWORD *)(v113 + 32);
                *(_OWORD *)v118 = v123;
                *(_OWORD *)(v118 + 16) = v124;
                v125 = v151;
                v126 = v152;
                *(_QWORD *)(v113 + 32) = v153;
                *(_OWORD *)v113 = v125;
                *(_OWORD *)(v113 + 16) = v126;
                v127 = v118 - a1 + 40;
                if (v127 >= 41)
                {
                  v128 = (v127 / 0x28uLL - 2) >> 1;
                  v129 = a1 + 40 * v128;
                  {
                    v130 = *(_OWORD *)v118;
                    v131 = *(_OWORD *)(v118 + 16);
                    v156 = *(_QWORD *)(v118 + 32);
                    v154 = v130;
                    v155 = v131;
                    do
                    {
                      v132 = v129;
                      v133 = *(_OWORD *)v129;
                      v134 = *(_OWORD *)(v129 + 16);
                      *(_QWORD *)(v118 + 32) = *(_QWORD *)(v129 + 32);
                      *(_OWORD *)v118 = v133;
                      *(_OWORD *)(v118 + 16) = v134;
                      if (!v128)
                        break;
                      v128 = (v128 - 1) >> 1;
                      v129 = a1 + 40 * v128;
                      v118 = v132;
                    }
                    v135 = v154;
                    v136 = v155;
                    *(_QWORD *)(v132 + 32) = v156;
                    *(_OWORD *)v132 = v135;
                    *(_OWORD *)(v132 + 16) = v136;
                  }
                }
              }
            }
            while (v112-- > 2);
          }
          return;
        }
        v13 = (unint64_t)v12 >> 1;
        v14 = a1 + 40 * ((unint64_t)v12 >> 1);
        if ((unint64_t)v11 < 0x1401)
        {
        }
        else
        {
          v15 = 5 * v13;
          v16 = *(_OWORD *)a1;
          v17 = *(_OWORD *)(a1 + 16);
          v156 = *(_QWORD *)(a1 + 32);
          v154 = v16;
          v155 = v17;
          v18 = *(_OWORD *)v14;
          v19 = *(_OWORD *)(v14 + 16);
          *(_QWORD *)(a1 + 32) = *(_QWORD *)(v14 + 32);
          *(_OWORD *)a1 = v18;
          *(_OWORD *)(a1 + 16) = v19;
          v20 = v154;
          v21 = v155;
          *(_QWORD *)(v14 + 32) = v156;
          *(_OWORD *)v14 = v20;
          *(_OWORD *)(v14 + 16) = v21;
        }
        a2 = v150;
        --a3;
        {
          v41 = *(_OWORD *)a1;
          v42 = *(_OWORD *)(a1 + 16);
          v153 = *(_QWORD *)(a1 + 32);
          v151 = v41;
          v152 = v42;
          {
            v10 = a1;
            do
              v10 += 40;
          }
          else
          {
            v43 = a1 + 40;
            do
            {
              v10 = v43;
              if (v43 >= v150)
                break;
              v43 = v10 + 40;
            }
            while (!v44);
          }
          v45 = v150;
          if (v10 < v150)
          {
            v45 = v150;
            do
              v45 -= 40;
          }
          while (v10 < v45)
          {
            v46 = *(_OWORD *)v10;
            v47 = *(_OWORD *)(v10 + 16);
            v156 = *(_QWORD *)(v10 + 32);
            v154 = v46;
            v155 = v47;
            v48 = *(_OWORD *)v45;
            v49 = *(_OWORD *)(v45 + 16);
            *(_QWORD *)(v10 + 32) = *(_QWORD *)(v45 + 32);
            *(_OWORD *)v10 = v48;
            *(_OWORD *)(v10 + 16) = v49;
            v50 = v154;
            v51 = v155;
            *(_QWORD *)(v45 + 32) = v156;
            *(_OWORD *)v45 = v50;
            *(_OWORD *)(v45 + 16) = v51;
            do
              v10 += 40;
            do
              v45 -= 40;
          }
          v52 = (__int128 *)(v10 - 40);
          if (v10 - 40 != a1)
          {
            v53 = *v52;
            v54 = *(_OWORD *)(v10 - 24);
            *(_QWORD *)(a1 + 32) = *(_QWORD *)(v10 - 8);
            *(_OWORD *)a1 = v53;
            *(_OWORD *)(a1 + 16) = v54;
          }
          a4 = 0;
          v55 = v151;
          v56 = v152;
          *(_QWORD *)(v10 - 8) = v153;
          *v52 = v55;
          *(_OWORD *)(v10 - 24) = v56;
          continue;
        }
        v22 = 0;
        v23 = *(_OWORD *)a1;
        v24 = *(_OWORD *)(a1 + 16);
        v153 = *(_QWORD *)(a1 + 32);
        v151 = v23;
        v152 = v24;
        do
          v22 += 40;
        v25 = a1 + v22;
        v26 = v150;
        v84 = v22 == 40;
        a2 = v150;
        if (v84)
        {
          v26 = v150;
          do
          {
            if (v25 >= v26)
              break;
            v26 -= 40;
          }
        }
        else
        {
          do
            v26 -= 40;
        }
        if (v25 >= v26)
        {
          v35 = v25 - 40;
        }
        else
        {
          v27 = v25;
          v28 = v26;
          do
          {
            v29 = *(_OWORD *)v27;
            v30 = *(_OWORD *)(v27 + 16);
            v156 = *(_QWORD *)(v27 + 32);
            v154 = v29;
            v155 = v30;
            v31 = *(_OWORD *)v28;
            v32 = *(_OWORD *)(v28 + 16);
            *(_QWORD *)(v27 + 32) = *(_QWORD *)(v28 + 32);
            *(_OWORD *)v27 = v31;
            *(_OWORD *)(v27 + 16) = v32;
            v33 = v154;
            v34 = v155;
            *(_QWORD *)(v28 + 32) = v156;
            *(_OWORD *)v28 = v33;
            *(_OWORD *)(v28 + 16) = v34;
            do
              v27 += 40;
            do
              v28 -= 40;
          }
          while (v27 < v28);
          v35 = v27 - 40;
        }
        if (v35 != a1)
        {
          v36 = *(_OWORD *)v35;
          v37 = *(_OWORD *)(v35 + 16);
          *(_QWORD *)(a1 + 32) = *(_QWORD *)(v35 + 32);
          *(_OWORD *)a1 = v36;
          *(_OWORD *)(a1 + 16) = v37;
        }
        v38 = v151;
        v39 = v152;
        *(_QWORD *)(v35 + 32) = v153;
        *(_OWORD *)v35 = v38;
        *(_OWORD *)(v35 + 16) = v39;
        if (v25 < v26)
        {
LABEL_31:
          a4 = 0;
          v10 = v35 + 40;
          continue;
        }
        v10 = v35 + 40;
        {
          if (v40)
            continue;
          goto LABEL_31;
        }
        a2 = v35;
        if (!v40)
          goto LABEL_1;
        return;
    }
  }
}

BOOL SCML::`anonymous namespace'::BoxDataDescendingScoreComparator::operator()(uint64_t a1, uint64_t a2)
{
  int v3;
  int v4;
  double v5;
  double v6;
  BOOL v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;

  if (*(float *)a1 != *(float *)a2)
    return *(float *)a1 > *(float *)a2;
  v3 = *(_DWORD *)(a1 + 4);
  v4 = *(_DWORD *)(a2 + 4);
  if (v3 != v4)
    return v3 < v4;
  v5 = *(double *)(a1 + 8);
  v6 = *(double *)(a2 + 8);
  v7 = v5 < v6;
  if (v5 != v6)
    return v7;
  v8 = *(double *)(a1 + 16);
  v9 = *(double *)(a2 + 16);
  v7 = v8 < v9;
  if (v8 != v9)
    return v7;
  v10 = *(double *)(a1 + 24);
  v11 = *(double *)(a2 + 24);
  v7 = v10 < v11;
  if (v10 != v11)
    return v7;
  v12 = *(double *)(a1 + 32);
  v13 = *(double *)(a2 + 32);
  return v12 != v13 && v12 < v13;
}

BOOL std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,SCML::`anonymous namespace'::BoxDataDescendingScoreComparator &,SCML::BoxInfo *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL v6;
  _BOOL8 result;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;

  if (v6)
  {
    if (result)
    {
      v8 = *(_OWORD *)a1;
      v9 = *(_OWORD *)(a1 + 16);
      v10 = *(_QWORD *)(a1 + 32);
      v11 = *(_QWORD *)(a3 + 32);
      v12 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a3;
      *(_OWORD *)(a1 + 16) = v12;
      *(_QWORD *)(a1 + 32) = v11;
    }
    else
    {
      v23 = *(_OWORD *)a1;
      v24 = *(_OWORD *)(a1 + 16);
      v25 = *(_QWORD *)(a1 + 32);
      v26 = *(_QWORD *)(a2 + 32);
      v27 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v27;
      *(_QWORD *)(a1 + 32) = v26;
      *(_QWORD *)(a2 + 32) = v25;
      *(_OWORD *)a2 = v23;
      *(_OWORD *)(a2 + 16) = v24;
      if (!result)
        return result;
      v8 = *(_OWORD *)a2;
      v9 = *(_OWORD *)(a2 + 16);
      v10 = *(_QWORD *)(a2 + 32);
      v28 = *(_QWORD *)(a3 + 32);
      v29 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)(a2 + 16) = v29;
      *(_QWORD *)(a2 + 32) = v28;
    }
    *(_QWORD *)(a3 + 32) = v10;
    *(_OWORD *)a3 = v8;
    *(_OWORD *)(a3 + 16) = v9;
  }
  else if (result)
  {
    v13 = *(_OWORD *)a2;
    v14 = *(_OWORD *)(a2 + 16);
    v15 = *(_QWORD *)(a2 + 32);
    v16 = *(_QWORD *)(a3 + 32);
    v17 = *(_OWORD *)(a3 + 16);
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(_OWORD *)(a2 + 16) = v17;
    *(_QWORD *)(a2 + 32) = v16;
    *(_QWORD *)(a3 + 32) = v15;
    *(_OWORD *)a3 = v13;
    *(_OWORD *)(a3 + 16) = v14;
    if (result)
    {
      v18 = *(_OWORD *)a1;
      v19 = *(_OWORD *)(a1 + 16);
      v20 = *(_QWORD *)(a1 + 32);
      v21 = *(_QWORD *)(a2 + 32);
      v22 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v22;
      *(_QWORD *)(a1 + 32) = v21;
      *(_QWORD *)(a2 + 32) = v20;
      *(_OWORD *)a2 = v18;
      *(_OWORD *)(a2 + 16) = v19;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,SCML::`anonymous namespace'::BoxDataDescendingScoreComparator &,SCML::BoxInfo *>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  __int128 *v22;
  __int128 *v23;
  __int128 *v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;

  v4 = 0xCCCCCCCCCCCCCCCDLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v6 = a2 - 40;
        return 1;
      v7 = *(_OWORD *)a1;
      v8 = *(_OWORD *)(a1 + 16);
      v9 = *(_QWORD *)(a1 + 32);
      v10 = *(_QWORD *)(v6 + 32);
      v11 = *(_OWORD *)(v6 + 16);
      *(_OWORD *)a1 = *(_OWORD *)v6;
      *(_OWORD *)(a1 + 16) = v11;
      *(_QWORD *)(a1 + 32) = v10;
      *(_QWORD *)(v6 + 32) = v9;
      result = 1;
      *(_OWORD *)v6 = v7;
      *(_OWORD *)(v6 + 16) = v8;
      return result;
    case 3uLL:
      return 1;
    case 4uLL:
      return 1;
    case 5uLL:
      v22 = (__int128 *)(a1 + 40);
      v23 = (__int128 *)(a1 + 80);
      v24 = (__int128 *)(a1 + 120);
      v25 = a2 - 40;
        return 1;
      v26 = *v24;
      v27 = *(_OWORD *)(a1 + 136);
      v28 = *(_QWORD *)(a1 + 152);
      v29 = *(_QWORD *)(v25 + 32);
      v30 = *(_OWORD *)(v25 + 16);
      *v24 = *(_OWORD *)v25;
      *(_OWORD *)(a1 + 136) = v30;
      *(_QWORD *)(a1 + 152) = v29;
      *(_QWORD *)(v25 + 32) = v28;
      *(_OWORD *)v25 = v26;
      *(_OWORD *)(v25 + 16) = v27;
        return 1;
      v31 = *(_QWORD *)(a1 + 112);
      v33 = *v23;
      v32 = *(_OWORD *)(a1 + 96);
      v34 = *(_OWORD *)(a1 + 136);
      *v23 = *v24;
      *(_OWORD *)(a1 + 96) = v34;
      *(_QWORD *)(a1 + 112) = *(_QWORD *)(a1 + 152);
      *v24 = v33;
      *(_OWORD *)(a1 + 136) = v32;
      *(_QWORD *)(a1 + 152) = v31;
        return 1;
      v35 = *(_QWORD *)(a1 + 72);
      v37 = *v22;
      v36 = *(_OWORD *)(a1 + 56);
      v38 = *(_OWORD *)(a1 + 96);
      *v22 = *v23;
      *(_OWORD *)(a1 + 56) = v38;
      *(_QWORD *)(a1 + 72) = *(_QWORD *)(a1 + 112);
      *v23 = v37;
      *(_OWORD *)(a1 + 96) = v36;
      *(_QWORD *)(a1 + 112) = v35;
        return 1;
      v39 = *(_QWORD *)(a1 + 32);
      v41 = *(_OWORD *)a1;
      v40 = *(_OWORD *)(a1 + 16);
      v42 = *(_OWORD *)(a1 + 56);
      *(_OWORD *)a1 = *v22;
      *(_OWORD *)(a1 + 16) = v42;
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a1 + 72);
      *v22 = v41;
      *(_OWORD *)(a1 + 56) = v40;
      result = 1;
      *(_QWORD *)(a1 + 72) = v39;
      return result;
    default:
      v12 = a1 + 80;
      v13 = a1 + 120;
      if (a1 + 120 == a2)
        return 1;
      v14 = 0;
      v15 = 0;
      break;
  }
  while (1)
  {
    {
      v16 = *(_OWORD *)(v13 + 16);
      v43 = *(_OWORD *)v13;
      v44 = v16;
      v45 = *(_QWORD *)(v13 + 32);
      v17 = v14;
      while (1)
      {
        v18 = a1 + v17;
        v19 = *(_OWORD *)(a1 + v17 + 96);
        *(_OWORD *)(v18 + 120) = *(_OWORD *)(a1 + v17 + 80);
        *(_OWORD *)(v18 + 136) = v19;
        *(_QWORD *)(v18 + 152) = *(_QWORD *)(a1 + v17 + 112);
        if (v17 == -80)
          break;
        v17 -= 40;
        {
          v20 = a1 + v17 + 120;
          goto LABEL_13;
        }
      }
      v20 = a1;
LABEL_13:
      v21 = v44;
      *(_OWORD *)v20 = v43;
      *(_OWORD *)(v20 + 16) = v21;
      *(_QWORD *)(v20 + 32) = v45;
      if (++v15 == 8)
        return v13 + 40 == a2;
    }
    v12 = v13;
    v14 += 40;
    v13 += 40;
    if (v13 == a2)
      return 1;
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,SCML::`anonymous namespace'::BoxDataDescendingScoreComparator &,SCML::BoxInfo *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __n128 result;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __n128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;

  {
    v9 = *(_OWORD *)a3;
    v10 = *(_OWORD *)(a3 + 16);
    v11 = *(_QWORD *)(a3 + 32);
    v12 = *(_QWORD *)(a4 + 32);
    v13 = *(_OWORD *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_OWORD *)(a3 + 16) = v13;
    *(_QWORD *)(a3 + 32) = v12;
    *(_QWORD *)(a4 + 32) = v11;
    *(_OWORD *)a4 = v9;
    *(_OWORD *)(a4 + 16) = v10;
    {
      v14 = *(__n128 *)a2;
      v15 = *(_OWORD *)(a2 + 16);
      v16 = *(_QWORD *)(a2 + 32);
      v17 = *(_QWORD *)(a3 + 32);
      v18 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)(a2 + 16) = v18;
      *(_QWORD *)(a2 + 32) = v17;
      *(_QWORD *)(a3 + 32) = v16;
      *(__n128 *)a3 = v14;
      *(_OWORD *)(a3 + 16) = v15;
      {
        result = *(__n128 *)a1;
        v19 = *(_OWORD *)(a1 + 16);
        v20 = *(_QWORD *)(a1 + 32);
        v21 = *(_QWORD *)(a2 + 32);
        v22 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v22;
        *(_QWORD *)(a1 + 32) = v21;
        *(_QWORD *)(a2 + 32) = v20;
        *(__n128 *)a2 = result;
        *(_OWORD *)(a2 + 16) = v19;
      }
    }
  }
  return result;
}

void std::vector<SCML::BoxInfo>::__append(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  char *v14;
  char *v15;
  size_t v16;
  char *v17;
  char *v18;
  char *v19;
  __int128 v20;
  __int128 v21;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (0xCCCCCCCCCCCCCCCDLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = 40 * ((40 * a2 - 40) / 0x28) + 40;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xCCCCCCCCCCCCCCCDLL * ((v7 - (_BYTE *)*a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0x666666666666666)
      std::vector<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>>::__throw_length_error[abi:ne180100]();
    v10 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - (_BYTE *)*a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x333333333333333)
      v11 = 0x666666666666666;
    else
      v11 = v9;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SCML::BoxInfo>>(v4, v11);
    else
      v12 = 0;
    v14 = &v12[40 * v8];
    v15 = &v12[40 * v11];
    v16 = 40 * ((40 * a2 - 40) / 0x28) + 40;
    bzero(v14, v16);
    v17 = &v14[v16];
    v19 = (char *)*a1;
    v18 = (char *)a1[1];
    if (v18 != *a1)
    {
      do
      {
        v20 = *(_OWORD *)(v18 - 40);
        v21 = *(_OWORD *)(v18 - 24);
        *((_QWORD *)v14 - 1) = *((_QWORD *)v18 - 1);
        *(_OWORD *)(v14 - 24) = v21;
        *(_OWORD *)(v14 - 40) = v20;
        v14 -= 40;
        v18 -= 40;
      }
      while (v18 != v19);
      v18 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v17;
    a1[2] = v15;
    if (v18)
      operator delete(v18);
  }
}

void sub_245C0FEF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  void *v22;
  void *v23;
  uint64_t v24;

  _Block_object_dispose(&a17, 8);
  _Block_object_dispose((const void *)(v24 - 96), 8);

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__2(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__2(uint64_t a1)
{

}

uint64_t scml::ClipEmbeddingClassifier::Impl::Impl(uint64_t a1, const void *a2, uint64_t a3)
{
  const void *v4;
  std::string *v5;
  ik::core::E5OpImpl ***v6;
  std::string *v7;
  _QWORD *v8;
  size_t v9;
  std::string *v10;
  const void *v11;
  size_t v12;
  void **v13;
  const void *v14;
  _OWORD *v15;
  ik::core::E5OpImpl **v16;
  ik::core::E5OpImpl *v17;
  std::__shared_weak_count *v18;
  E5RT::ExecutionStreamOperation *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  uint64_t i;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  E5RT::ExecutionStreamOperation *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t j;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  ik::core::E5OpImpl **v39;
  void **v41;
  void **v42;
  void **v43;
  E5RT::ExecutionStreamOperation *v44;
  std::__shared_weak_count *v45;
  const void *v46;
  uint64_t v47;
  void ***v48;
  char v49;
  void *v50[2];
  __int128 v51;
  uint64_t v52;
  char v53;
  void *v54;
  int v55;
  _BYTE v56[8];
  char v57;
  void *__p;
  void *v59;
  _OWORD *v60;
  _QWORD v61[3];
  char v62;
  id v63;
  std::string v64;
  char *v65;
  char *v66;
  char *v67;
  void *v68;
  _BYTE v69[16];
  char v70;
  uint64_t v71;

  v71 = *MEMORY[0x24BDAC8D0];
  v46 = a2;
  v47 = a3;
  *(_QWORD *)a1 = 850045863;
  v4 = (const void *)(a1 + 112);
  *(_OWORD *)(a1 + 136) = 0u;
  v5 = (std::string *)(a1 + 136);
  *(_OWORD *)(a1 + 184) = 0u;
  v6 = (ik::core::E5OpImpl ***)(a1 + 184);
  v7 = (std::string *)(a1 + 160);
  v8 = (_QWORD *)(a1 + 192);
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_QWORD *)(a1 + 216) = 0;
  *(_DWORD *)(a1 + 224) = 1065353216;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_QWORD *)(a1 + 264) = 0;
  scml::ClipEmbeddingClassifier::Impl::loadConfig(a1, a2, a3);
  if (*(char *)(a1 + 135) >= 0)
    v9 = *(unsigned __int8 *)(a1 + 135);
  else
    v9 = *(_QWORD *)(a1 + 120);
  v10 = &v64;
  std::string::basic_string[abi:ne180100]((uint64_t)&v64, v9 + 7);
  if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v10 = (std::string *)v64.__r_.__value_.__r.__words[0];
  if (v9)
  {
    if (*(char *)(a1 + 135) >= 0)
      v11 = v4;
    else
      v11 = *(const void **)(a1 + 112);
    memmove(v10, v11, v9);
  }
  strcpy((char *)v10 + v9, ".bundle");
  std::string::basic_string[abi:ne180100]<0>(&v65, "main");
  LOBYTE(v68) = 0;
  v70 = 0;
  if (*(char *)(a1 + 135) >= 0)
    v12 = *(unsigned __int8 *)(a1 + 135);
  else
    v12 = *(_QWORD *)(a1 + 120);
  v13 = v50;
  std::string::basic_string[abi:ne180100]((uint64_t)v50, v12 + 4);
  if (SBYTE7(v51) < 0)
    v13 = (void **)v50[0];
  if (v12)
  {
    if (*(char *)(a1 + 135) >= 0)
      v14 = v4;
    else
      v14 = *(const void **)(a1 + 112);
    memmove(v13, v14, v12);
  }
  strcpy((char *)v13 + v12, ".mil");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)&v51 + 1, "main");
  LOBYTE(v54) = 0;
  v57 = 0;
  v59 = 0;
  v60 = 0;
  __p = 0;
  v15 = operator new(0x10uLL);
  __p = v15;
  *v15 = xmmword_245C91F00;
  v59 = v15 + 1;
  v60 = v15 + 1;
  v63 = 0;
  memset(v61, 0, sizeof(v61));
  v62 = 0;
  scml::loadModelWithFallback((scml *)&v64, (const ik::core::E5LoadPreCompiledConfig *)v50, (ik::E5Op **)&v48);
  v16 = (ik::core::E5OpImpl **)v48;
  v48 = 0;
  std::unique_ptr<ik::E5Op>::reset[abi:ne180100](v6, v16);
  std::unique_ptr<ik::E5Op>::reset[abi:ne180100]((ik::core::E5OpImpl ***)&v48, 0);

  v41 = (void **)v61;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v41);
  if (__p)
  {
    v59 = __p;
    operator delete(__p);
  }
  if (v57 && (v56[7] & 0x80000000) != 0)
    operator delete(v54);
  if (v53 < 0)
    operator delete(*((void **)&v51 + 1));
  if (SBYTE7(v51) < 0)
    operator delete(v50[0]);
  if (v70 && (v69[15] & 0x80000000) != 0)
    operator delete(v68);
  if (SHIBYTE(v67) < 0)
    operator delete(v65);
  if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v64.__r_.__value_.__l.__data_);
  v17 = **v6;
  v19 = *(E5RT::ExecutionStreamOperation **)v17;
  v18 = (std::__shared_weak_count *)*((_QWORD *)v17 + 1);
  v44 = v19;
  v45 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v21 = __ldxr(p_shared_owners);
    while (__stxr(v21 + 1, p_shared_owners));
  }
  if (*(char *)(a1 + 159) < 0)
    std::string::__init_copy_ctor_external(&v64, *(const std::string::value_type **)(a1 + 136), *(_QWORD *)(a1 + 144));
  else
    v64 = *v5;
  LODWORD(v50[0]) = 1;
  DWORD2(v51) = 0;
  std::string::basic_string[abi:ne180100]<0>(&v52, "embeddingSize");
  v55 = 1;
  v66 = 0;
  v67 = 0;
  v65 = 0;
  v48 = (void ***)&v65;
  v49 = 0;
  v65 = (char *)operator new(0x40uLL);
  v66 = v65;
  v67 = v65 + 64;
  v66 = (char *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::variant<int,std::string>>,std::variant<int,std::string> const*,std::variant<int,std::string> const*,std::variant<int,std::string>*>((uint64_t)&v67, (uint64_t)v50, (uint64_t)v56, (uint64_t)v65);
  LODWORD(v68) = 4;
  v42 = 0;
  v43 = 0;
  v41 = 0;
  v48 = &v41;
  v49 = 0;
  v41 = (void **)operator new(0x38uLL);
  v42 = v41;
  v43 = v41 + 7;
  v42 = (void **)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<scml::TensorSpec>,scml::TensorSpec const*,scml::TensorSpec const*,scml::TensorSpec*>((uint64_t)&v43, (uint64_t)&v64, (uint64_t)v69, (uint64_t)v41);
  scml::validateInputs(v19, &v41);
  v48 = &v41;
  std::vector<scml::TensorSpec>::__destroy_vector::operator()[abi:ne180100]((void ***)&v48);
  v48 = (void ***)&v65;
  std::vector<std::variant<int,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v48);
  if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v64.__r_.__value_.__l.__data_);
  for (i = 4; i != -4; i -= 4)
    std::__variant_detail::__dtor<std::__variant_detail::__traits<int,std::string>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&v50[i]);
  v23 = v45;
  if (v45)
  {
    v24 = (unint64_t *)&v45->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v27 = *(_QWORD *)(a1 + 88);
  v26 = *(_QWORD *)(a1 + 96);
  v28 = **(_QWORD **)(a1 + 184);
  v30 = *(E5RT::ExecutionStreamOperation **)v28;
  v29 = *(std::__shared_weak_count **)(v28 + 8);
  v44 = v30;
  v45 = v29;
  if (v29)
  {
    v31 = (unint64_t *)&v29->__shared_owners_;
    do
      v32 = __ldxr(v31);
    while (__stxr(v32 + 1, v31));
  }
  if (*(char *)(a1 + 183) < 0)
    std::string::__init_copy_ctor_external(&v64, *(const std::string::value_type **)(a1 + 160), *(_QWORD *)(a1 + 168));
  else
    v64 = *v7;
  LODWORD(v50[0]) = 1;
  DWORD2(v51) = 0;
  LODWORD(v52) = (unint64_t)(v26 - v27) >> 2;
  v55 = 0;
  v66 = 0;
  v67 = 0;
  v65 = 0;
  v48 = (void ***)&v65;
  v49 = 0;
  v65 = (char *)operator new(0x40uLL);
  v66 = v65;
  v67 = v65 + 64;
  v66 = (char *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::variant<int,std::string>>,std::variant<int,std::string> const*,std::variant<int,std::string> const*,std::variant<int,std::string>*>((uint64_t)&v67, (uint64_t)v50, (uint64_t)v56, (uint64_t)v65);
  LODWORD(v68) = 4;
  v42 = 0;
  v43 = 0;
  v41 = 0;
  v48 = &v41;
  v49 = 0;
  v41 = (void **)operator new(0x38uLL);
  v42 = v41;
  v43 = v41 + 7;
  v42 = (void **)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<scml::TensorSpec>,scml::TensorSpec const*,scml::TensorSpec const*,scml::TensorSpec*>((uint64_t)&v43, (uint64_t)&v64, (uint64_t)v69, (uint64_t)v41);
  scml::validateOutputs(v30, &v41);
  v48 = &v41;
  std::vector<scml::TensorSpec>::__destroy_vector::operator()[abi:ne180100]((void ***)&v48);
  v48 = (void ***)&v65;
  std::vector<std::variant<int,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v48);
  if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v64.__r_.__value_.__l.__data_);
  for (j = 4; j != -4; j -= 4)
    std::__variant_detail::__dtor<std::__variant_detail::__traits<int,std::string>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&v50[j]);
  v34 = v45;
  if (v45)
  {
    v35 = (unint64_t *)&v45->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  ik::core::E5OpImpl::CreateInputTensors((E5RT::ExecutionStreamOperation **)**v6, (uint64_t)&v64);
  *(_OWORD *)v50 = 0u;
  v51 = 0u;
  LODWORD(v52) = 1065353216;
  v37 = (uint64_t *)v64.__r_.__value_.__r.__words[2];
  if (v64.__r_.__value_.__r.__words[2])
  {
    do
    {
      v41 = v50;
      v42 = (void **)(v37 + 2);
      v38 = *((unsigned int *)v37 + 24);
      if ((_DWORD)v38 == -1)
        std::__throw_bad_variant_access[abi:ne180100]();
      v48 = &v41;
      ((void (*)(void ****, uint64_t *))off_2516E4990[v38])(&v48, v37 + 5);
      v37 = (uint64_t *)*v37;
    }
    while (v37);
  }
  std::__hash_table<std::__hash_value_type<std::string,ik::Tensor>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ik::Tensor>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ik::Tensor>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ik::Tensor>>>::__move_assign((uint64_t)v8, (uint64_t *)v50);
  std::__hash_table<std::__hash_value_type<std::string,ik::E5BufferTensor>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ik::E5BufferTensor>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ik::E5BufferTensor>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ik::E5BufferTensor>>>::~__hash_table((uint64_t)v50);
  std::__hash_table<std::__hash_value_type<std::string,std::variant<ik::E5BufferTensor,ik::PixelBufferTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<ik::E5BufferTensor,ik::PixelBufferTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<ik::E5BufferTensor,ik::PixelBufferTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<ik::E5BufferTensor,ik::PixelBufferTensor>>>>::~__hash_table((uint64_t)&v64);
  v39 = *v6;
  *(_OWORD *)v50 = 0u;
  v51 = 0u;
  LODWORD(v52) = 1065353216;
  ik::core::E5OpImpl::Bind<ik::Tensor>((uint64_t)*v39, v8, v50);
  std::__hash_table<std::__hash_value_type<std::string,ik::E5BufferTensor>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ik::E5BufferTensor>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ik::E5BufferTensor>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ik::E5BufferTensor>>>::~__hash_table((uint64_t)v50);
  v64.__r_.__value_.__r.__words[0] = (std::string::size_type)v5;
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(*((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,ik::Tensor>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ik::Tensor>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ik::Tensor>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ik::Tensor>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v8, (unsigned __int8 *)v5, (uint64_t)&std::piecewise_construct, (__int128 **)&v64)+ 7)+ 8);
  return a1;
}

void sub_245C106F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  uint64_t v30;
  void **v31;
  ik::core::E5OpImpl ***v32;
  uint64_t v33;
  void **v34;
  void *v37;
  void *exception;
  void *v39;

  std::shared_ptr<scml::Config::PathInfo>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  if (a2 == 1)
  {
    v37 = __cxa_begin_catch(a1);
    exception = __cxa_allocate_exception(0x10uLL);
    a10 = (*(uint64_t (**)(void *))(*(_QWORD *)v37 + 16))(v37);
    scml::strCat<char const(&)[27],std::string_view &,char const(&)[3],char const*>("Failed to load model from ", &a15, ": ", (const char **)&a10, &a19);
    MEMORY[0x249544C64](exception, &a19);
    __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  if (*(char *)(v30 + 263) < 0)
    operator delete(*(void **)(v30 + 240));
  std::__hash_table<std::__hash_value_type<std::string,ik::E5BufferTensor>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ik::E5BufferTensor>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ik::E5BufferTensor>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ik::E5BufferTensor>>>::~__hash_table(v33);
  std::unique_ptr<ik::E5Op>::reset[abi:ne180100](v32, 0);
  if (*(char *)(v30 + 183) < 0)
    operator delete(*v34);
  if (*(char *)(v30 + 159) < 0)
    operator delete(*v31);
  if (*(char *)(v30 + 135) < 0)
    operator delete(*a9);
  v39 = *(void **)(v30 + 88);
  if (v39)
  {
    *(_QWORD *)(v30 + 96) = v39;
    operator delete(v39);
  }
  a19 = (void *)(v30 + 64);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
  std::mutex::~mutex((std::mutex *)v30);
  _Unwind_Resume(a1);
}

void sub_245C109B0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  void *v24;
  int v25;

  if (a24 < 0)
  {
    operator delete(__p);
    if ((v25 & 1) == 0)
      goto LABEL_6;
  }
  else if (!v25)
  {
LABEL_6:
    __cxa_end_catch();
    JUMPOUT(0x245C109E4);
  }
  __cxa_free_exception(v24);
  goto LABEL_6;
}

void sub_245C10A6C(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x245C10A64);
}

uint64_t scml::ClipEmbeddingClassifier::Impl::loadConfig(uint64_t a1, const void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;
  const std::string *v10;
  const std::string *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  void **v15;
  __int128 *v16;
  unint64_t v17;
  uint64_t v18;
  float v19;
  float v20;
  unint64_t v21;
  float *v22;
  float *v23;
  float *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  float *v30;
  int v31;
  const std::string *v32;
  _QWORD *v33;
  size_t v34;
  size_t v35;
  std::__shared_weak_count *v36;
  unint64_t *p_shared_owners;
  unint64_t v38;
  void *exception;
  void *v41[2];
  char v42;
  char v43;
  std::string pn;
  std::string v45;
  void *v46[2];
  char v47;
  std::string v48;
  std::__fs::filesystem::path __p;
  _QWORD v50[2];
  _BYTE v51[56];
  std::__shared_weak_count *v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  scml::Config::loadJson(a2, a3, (uint64_t)v51);
  LOBYTE(v41[0]) = 0;
  v43 = 0;
  v6 = scml::Config::get<std::string>((uint64_t)v51, "model_path", 0xAuLL, (uint64_t)v41);
  v50[0] = a2;
  v50[1] = a3;
  memset(&__p, 0, sizeof(__p));
  if (std::string::ends_with[abi:ne180100]((uint64_t *)v6, ".mil"))
  {
    v7 = *(unsigned __int8 *)(v6 + 23);
    if ((v7 & 0x80u) != 0)
      v7 = *(_QWORD *)(v6 + 8);
    std::string::basic_string(&v48, (const std::string *)v6, 0, v7 - 4, (std::allocator<char> *)v46);
  }
  else
  {
    if (!std::string::ends_with[abi:ne180100]((uint64_t *)v6, ".bundle"))
    {
      exception = __cxa_allocate_exception(0x10uLL);
      scml::strCat<char const(&)[38],std::string>("Model path does not end with .mil or .bundle: ", v6, &v48);
      MEMORY[0x249544C64](exception, &v48);
      __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
    }
    v8 = *(unsigned __int8 *)(v6 + 23);
    if ((v8 & 0x80u) != 0)
      v8 = *(_QWORD *)(v6 + 8);
    std::string::basic_string(&v48, (const std::string *)v6, 0, v8 - 7, (std::allocator<char> *)v46);
  }
  if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__pn_.__r_.__value_.__l.__data_);
  __p.__pn_ = v48;
  if (std::__fs::filesystem::path::__root_directory(&__p).__size_)
  {
    if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&pn, __p.__pn_.__r_.__value_.__l.__data_, __p.__pn_.__r_.__value_.__l.__size_);
    else
      pn = __p.__pn_;
  }
  else
  {
    std::__fs::filesystem::path::path[abi:ne180100]<std::string_view,void>(&v45, (uint64_t)v50);
    std::__fs::filesystem::path::parent_path[abi:ne180100]((const std::__fs::filesystem::path *)&v45, (uint64_t)v46);
    std::__fs::filesystem::operator/[abi:ne180100](&__p, (uint64_t)v46, (std::__fs::filesystem::path *)&v48);
    if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&pn, v48.__r_.__value_.__l.__data_, v48.__r_.__value_.__l.__size_);
      if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v48.__r_.__value_.__l.__data_);
    }
    else
    {
      pn = v48;
    }
    if (v47 < 0)
      operator delete(v46[0]);
    if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v45.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__pn_.__r_.__value_.__l.__data_);
  v9 = (void **)(a1 + 112);
  if (*(char *)(a1 + 135) < 0)
    operator delete(*v9);
  *(_OWORD *)v9 = *(_OWORD *)&pn.__r_.__value_.__l.__data_;
  *(_QWORD *)(a1 + 128) = *((_QWORD *)&pn.__r_.__value_.__l + 2);
  *((_BYTE *)&pn.__r_.__value_.__s + 23) = 0;
  pn.__r_.__value_.__s.__data_[0] = 0;
  if (v43 && v42 < 0)
    operator delete(v41[0]);
  LOBYTE(v41[0]) = 0;
  v43 = 0;
  v10 = (const std::string *)scml::Config::get<std::string>((uint64_t)v51, "input_embedding_name", 0x14uLL, (uint64_t)v41);
  std::string::operator=((std::string *)(a1 + 136), v10);
  if (v43 && v42 < 0)
    operator delete(v41[0]);
  LOBYTE(v41[0]) = 0;
  v43 = 0;
  v11 = (const std::string *)scml::Config::get<std::string>((uint64_t)v51, "output_probabilities_name", 0x19uLL, (uint64_t)v41);
  std::string::operator=((std::string *)(a1 + 160), v11);
  if (v43 && v42 < 0)
    operator delete(v41[0]);
  LOBYTE(v41[0]) = 0;
  v43 = 0;
  v12 = (uint64_t *)scml::Config::get<std::vector<scml::Config>>((uint64_t)v51, "class_thresholds", 0x10uLL, (uint64_t)v41);
  if (v43)
  {
    __p.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)v41;
    std::vector<scml::Config>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  }
  v13 = *v12;
  v14 = v12[1];
  if (*v12 != v14)
  {
    v15 = (void **)(a1 + 88);
    do
    {
      LOBYTE(v41[0]) = 0;
      v43 = 0;
      v16 = (__int128 *)scml::Config::get<std::string>(v13, "class", 5uLL, (uint64_t)v41);
      v17 = *(_QWORD *)(a1 + 72);
      if (v17 >= *(_QWORD *)(a1 + 80))
      {
        v18 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)(a1 + 64), v16);
      }
      else
      {
        std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>(a1 + 64, v16);
        v18 = v17 + 24;
      }
      *(_QWORD *)(a1 + 72) = v18;
      if (v43 && v42 < 0)
        operator delete(v41[0]);
      LOBYTE(v41[0]) = 0;
      BYTE4(v41[0]) = 0;
      v19 = scml::Config::get<float>(v13, "threshold", 9uLL, v41);
      v20 = v19;
      v22 = *(float **)(a1 + 96);
      v21 = *(_QWORD *)(a1 + 104);
      if ((unint64_t)v22 >= v21)
      {
        v24 = (float *)*v15;
        v25 = ((char *)v22 - (_BYTE *)*v15) >> 2;
        v26 = v25 + 1;
        if ((unint64_t)(v25 + 1) >> 62)
          std::vector<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>>::__throw_length_error[abi:ne180100]();
        v27 = v21 - (_QWORD)v24;
        if (v27 >> 1 > v26)
          v26 = v27 >> 1;
        if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFFCLL)
          v28 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v28 = v26;
        if (v28)
        {
          v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(a1 + 104, v28);
          v24 = *(float **)(a1 + 88);
          v22 = *(float **)(a1 + 96);
        }
        else
        {
          v29 = 0;
        }
        v30 = (float *)&v29[4 * v25];
        *v30 = v20;
        v23 = v30 + 1;
        while (v22 != v24)
        {
          v31 = *((_DWORD *)v22-- - 1);
          *((_DWORD *)v30-- - 1) = v31;
        }
        *(_QWORD *)(a1 + 88) = v30;
        *(_QWORD *)(a1 + 96) = v23;
        *(_QWORD *)(a1 + 104) = &v29[4 * v28];
        if (v24)
          operator delete(v24);
      }
      else
      {
        *v22 = v19;
        v23 = v22 + 1;
      }
      *(_QWORD *)(a1 + 96) = v23;
      v13 += 64;
    }
    while (v13 != v14);
  }
  LOBYTE(v41[0]) = 0;
  v43 = 0;
  v32 = (const std::string *)scml::Config::get<std::string>((uint64_t)v51, "name", 4uLL, (uint64_t)v41);
  std::string::operator=((std::string *)(a1 + 240), v32);
  if (v43 && v42 < 0)
    operator delete(v41[0]);
  LOBYTE(v41[0]) = 0;
  v43 = 0;
  v33 = (_QWORD *)scml::Config::get<std::string>((uint64_t)v51, "embedding_version", 0x11uLL, (uint64_t)v41);
  v34 = v33[1];
  if (*((char *)v33 + 23) >= 0)
  {
    v35 = *((unsigned __int8 *)v33 + 23);
  }
  else
  {
    v33 = (_QWORD *)*v33;
    v35 = v34;
  }
  *(_QWORD *)(a1 + 264) = scml::ClipImageEncoder::embeddingVersion(v33, v35);
  if (v43 && v42 < 0)
    operator delete(v41[0]);
  v36 = v52;
  if (v52)
  {
    p_shared_owners = (unint64_t *)&v52->__shared_owners_;
    do
      v38 = __ldaxr(p_shared_owners);
    while (__stlxr(v38 - 1, p_shared_owners));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  return std::__variant_detail::__dtor<std::__variant_detail::__traits<decltype(nullptr),long long,double,std::string,std::vector<scml::Config>,std::unordered_map<std::string,scml::Config>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v51);
}

void sub_245C11040(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52)
{
  if (a36 < 0)
    operator delete(__p);
  if (a30 < 0)
    operator delete(a25);
  if (a24 < 0)
    operator delete(a19);
  if (a42 < 0)
    operator delete(a37);
  if (a15)
  {
    if (a14 < 0)
      operator delete(a9);
  }
  std::shared_ptr<scml::Config::PathInfo>::~shared_ptr[abi:ne180100]((uint64_t)&a52);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<decltype(nullptr),long long,double,std::string,std::vector<scml::Config>,std::unordered_map<std::string,scml::Config>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&a46);
  _Unwind_Resume(a1);
}

void ik::core::E5LoadMILConfig::~E5LoadMILConfig(id *this)
{
  id v2;
  void **v3;

  v3 = this + 13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  v2 = this[10];
  if (v2)
  {
    this[11] = v2;
    operator delete(v2);
  }
  if (*((_BYTE *)this + 72) && *((char *)this + 71) < 0)
    operator delete(this[6]);
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

void ik::core::E5LoadPreCompiledConfig::~E5LoadPreCompiledConfig(void **this)
{
  if (*((_BYTE *)this + 72) && *((char *)this + 71) < 0)
    operator delete(this[6]);
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

void scml::TensorSpec::~TensorSpec(void **this)
{
  void **v2;

  v2 = this + 3;
  std::vector<std::variant<int,std::string>>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

uint64_t scml::strCat<char const(&)[27],std::string_view &,char const(&)[3],char const*>@<X0>(char *a1@<X0>, uint64_t *a2@<X1>, char *a3@<X2>, const char **a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v11;
  _QWORD v12[10];
  char v13;
  uint64_t v14;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v11);
  scml::scml_impl::strCat<char const(&)[27],std::string_view &,char const(&)[3],char const*>(&v11, a1, a2, a3, a4);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v12, a5);
  v11 = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)&v12[-1] + *(_QWORD *)(v11 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v12[0] = MEMORY[0x24BEDB848] + 16;
  if (v13 < 0)
    operator delete((void *)v12[8]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x249544EE0](&v14);
}

void sub_245C11368(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::ostringstream::~ostringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

float scml::Config::get<float>(uint64_t a1, const void *a2, size_t a3, _BYTE *a4)
{
  uint64_t v8;
  _QWORD *v9;
  void **p_dst;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  void *exception;
  void **v17;
  uint64_t v18;
  void **__dst;
  size_t v20;
  int64_t v21;
  uint64_t v22[2];

  v22[0] = (uint64_t)a2;
  v22[1] = a3;
  v8 = scml::Config::as<std::unordered_map<std::string,scml::Config>>(a1);
  if (a3 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v9 = (_QWORD *)v8;
  if (a3 >= 0x17)
  {
    v11 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17)
      v11 = a3 | 7;
    v12 = v11 + 1;
    p_dst = (void **)operator new(v11 + 1);
    v20 = a3;
    v21 = v12 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v21) = a3;
  p_dst = (void **)&__dst;
  if (a3)
LABEL_8:
    memmove(p_dst, a2, a3);
  *((_BYTE *)p_dst + a3) = 0;
  v13 = std::__hash_table<std::__hash_value_type<std::string,scml::Config>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,scml::Config>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,scml::Config>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,scml::Config>>>::find<std::string>(v9, (unsigned __int8 *)&__dst);
  v14 = v13;
  if (SHIBYTE(v21) < 0)
  {
    operator delete(__dst);
    if (v14)
      return scml::Config::as<float>((_DWORD *)v14 + 10);
  }
  else if (v13)
  {
    return scml::Config::as<float>((_DWORD *)v14 + 10);
  }
  if (!a4[4])
  {
    exception = __cxa_allocate_exception(0x10uLL);
    scml::strCat<std::string_view const&,char const(&)[11]>(v22, " not found", &__dst);
    if (v21 >= 0)
      v17 = (void **)&__dst;
    else
      v17 = __dst;
    if (v21 >= 0)
      v18 = HIBYTE(v21);
    else
      v18 = v20;
    scml::Config::error(a1, (uint64_t)v17, v18, (uint64_t)exception);
    __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  return *(float *)a4;
}

void sub_245C114F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

void scml::ClipEmbeddingClassifier::Impl::writeInputTensors(uint64_t a1, _QWORD *a2)
{
  unint64_t *v3;
  unsigned __int8 *v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  __int128 *v8;
  void *exception;
  int v10;
  __int128 *v11[2];
  void *v12;
  void *v13;
  void *__p[3];

  v3 = (unint64_t *)(a1 + 232);
  if (*(_QWORD *)(a1 + 232) != (uint64_t)(a2[1] - *a2) >> 2)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    __p[0] = (void *)((uint64_t)(a2[1] - *a2) >> 2);
    scml::strCat<char const(&)[16],unsigned long,char const(&)[12],unsigned long &>("embedding size ", (uint64_t)__p, ", expected ", v11);
    MEMORY[0x249544C64](exception, v11);
    __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  v11[0] = (__int128 *)(a1 + 136);
  v4 = std::__hash_table<std::__hash_value_type<std::string,ik::Tensor>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ik::Tensor>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ik::Tensor>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ik::Tensor>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 192, (unsigned __int8 *)(a1 + 136), (uint64_t)&std::piecewise_construct, v11);
  v5 = ik::Tensor::Data<float>((uint64_t)(v4 + 40));
  (*(void (**)(void **__return_ptr))(**((_QWORD **)v4 + 10) + 32))(__p);
  ik::ArrayView<float,-1>::ArrayView(v11, v5, (uint64_t)__p);
  v11[0] = (__int128 *)&unk_2516E33E8;
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  __p[0] = 0;
  if (*v3)
  {
    v6 = 0;
    do
    {
      v7 = *(_DWORD *)(*a2 + 4 * v6);
      v10 = 0;
      v8 = v11[1];
      *((_DWORD *)v8 + ik::ArrayView<float,-1>::IndexOf<int,unsigned long>((uint64_t)v11, &v10, __p)) = v7;
      v6 = (unint64_t)__p[0] + 1;
      __p[0] = (void *)v6;
    }
    while (v6 < *v3);
  }
  v11[0] = (__int128 *)&unk_2516E3548;
  if (v12)
  {
    v13 = v12;
    operator delete(v12);
  }
}

void sub_245C116DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20)
{
  int v20;
  void *v21;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v20 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v20)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v21);
  goto LABEL_6;
}

uint64_t scml::strCat<char const(&)[16],unsigned long,char const(&)[12],unsigned long &>@<X0>(char *a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v9;
  _QWORD v10[10];
  char v11;
  uint64_t v12;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v9);
  scml::scml_impl::strCat<char const(&)[16],unsigned long,char const(&)[12],unsigned long &>(&v9, a1, a2, a3);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v10, a4);
  v9 = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)&v10[-1] + *(_QWORD *)(v9 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v10[0] = MEMORY[0x24BEDB848] + 16;
  if (v11 < 0)
    operator delete((void *)v10[8]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x249544EE0](&v12);
}

void sub_245C11830(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::ostringstream::~ostringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *ik::MutableArrayView<float,-1>::~MutableArrayView(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_2516E3548;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t *scml::ClipEmbeddingClassifier::ClipEmbeddingClassifier(uint64_t *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;

  v6 = operator new();
  scml::ClipEmbeddingClassifier::Impl::Impl(v6, a2, a3);
  *a1 = v6;
  return a1;
}

void sub_245C118E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x249544F58](v1, 0x10B2C4099DE21BELL);
  _Unwind_Resume(a1);
}

void scml::ClipEmbeddingClassifier::~ClipEmbeddingClassifier(scml::ClipEmbeddingClassifier::Impl **this)
{
  std::unique_ptr<scml::ClipEmbeddingClassifier::Impl>::reset[abi:ne180100](this, 0);
}

{
  std::unique_ptr<scml::ClipEmbeddingClassifier::Impl>::reset[abi:ne180100](this, 0);
}

void scml::ClipEmbeddingClassifier::predict(std::mutex **a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  std::mutex *v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  uint64_t v9;
  std::mutex *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  float v14;
  unint64_t v15;
  float v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  float v28;
  unint64_t v29;
  int v30;
  void *v31;
  uint64_t v32;
  void *v33;
  void *v34;
  _QWORD v35[5];
  void *__p[3];

  v6 = *a1;
  std::mutex::lock(*a1);
  scml::ClipEmbeddingClassifier::Impl::writeInputTensors((uint64_t)*a1, a2);
  ik::core::E5OpImpl::Run(**(ik::core::E5OpImpl ***)&(*a1)[2].__m_.__opaque[48], (uint64_t)v35);
  v7 = std::__hash_table<std::__hash_value_type<std::string,ik::E5BufferTensor>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ik::E5BufferTensor>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ik::E5BufferTensor>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ik::E5BufferTensor>>>::find<std::string>(v35, (unsigned __int8 *)&(*a1)[2].__m_.__opaque[24]);
  v8 = v7;
  if (!v7)
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  v9 = ik::Tensor::Data<float>((uint64_t)(v7 + 40));
  (*(void (**)(void **__return_ptr))(**((_QWORD **)v8 + 10) + 32))(__p);
  ik::ArrayView<float,-1>::ArrayView(&v31, v9, (uint64_t)__p);
  v31 = &unk_2516E33E8;
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  *(_BYTE *)a3 = 1;
  *(_QWORD *)(a3 + 8) = 0;
  v10 = *a1;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a3 + 8), (__int128 *)v10[1].__m_.__sig, *(__int128 **)v10[1].__m_.__opaque, 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)v10[1].__m_.__opaque - v10[1].__m_.__sig) >> 3));
  v11 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(*a1)[1].__m_.__opaque - (*a1)[1].__m_.__sig) >> 3);
  LOBYTE(v30) = 1;
  std::vector<BOOL>::vector((_QWORD *)(a3 + 32), v11, (unsigned __int8 *)&v30);
  v12 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(*a1)[1].__m_.__opaque - (*a1)[1].__m_.__sig) >> 3);
  LODWORD(__p[0]) = -1082130432;
  std::vector<float>::vector((_QWORD *)(a3 + 56), v12, __p);
  LODWORD(__p[0]) = 0;
  if (*(_QWORD *)(*((_QWORD *)v8 + 7) + 8))
  {
    do
    {
      v30 = 0;
      v13 = v32;
      v14 = *(float *)(v13 + 4 * ik::ArrayView<float,-1>::IndexOf<int,int>((uint64_t)&v31, &v30, (int *)__p));
      v15 = SLODWORD(__p[0]);
      v16 = *(float *)(*(_QWORD *)&(*a1)[1].__m_.__opaque[16] + 4 * SLODWORD(__p[0]));
      v17 = *(_BYTE *)a3 != 0;
      if (v14 >= v16)
        v17 = 0;
      *(_BYTE *)a3 = v17;
      v18 = *(_QWORD *)(a3 + 32);
      v19 = (v15 >> 3) & 0x1FFFFFFFFFFFFFF8;
      v20 = *(_QWORD *)(v18 + v19);
      v21 = (v20 & (1 << v15)) != 0;
      v22 = v20 & ~(1 << v15);
      v23 = v20 | (1 << v15);
      if (v21 && v14 < v16)
        v24 = v23;
      else
        v24 = v22;
      *(_QWORD *)(v18 + v19) = v24;
      v25 = *(_QWORD *)(a3 + 56);
      v30 = 0;
      v26 = v32;
      v27 = ik::ArrayView<float,-1>::IndexOf<int,int>((uint64_t)&v31, &v30, (int *)__p);
      v28 = *(float *)(v25 + 4 * v15);
      if (v28 < *(float *)(v26 + 4 * v27))
        v28 = *(float *)(v26 + 4 * v27);
      v29 = SLODWORD(__p[0]);
      *(float *)(*(_QWORD *)(a3 + 56) + 4 * SLODWORD(__p[0])) = v28;
      LODWORD(__p[0]) = ++v29;
    }
    while (*(_QWORD *)(*((_QWORD *)v8 + 7) + 8) > v29);
  }
  v31 = &unk_2516E3548;
  if (v33)
  {
    v34 = v33;
    operator delete(v33);
  }
  std::__hash_table<std::__hash_value_type<std::string,ik::E5BufferTensor>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ik::E5BufferTensor>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ik::E5BufferTensor>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ik::E5BufferTensor>>>::~__hash_table((uint64_t)v35);
  std::mutex::unlock(v6);
}

void sub_245C11BE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  std::mutex *v23;
  void **v24;

  if (*v24)
    operator delete(*v24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a22);
  if (__p)
    operator delete(__p);
  std::__hash_table<std::__hash_value_type<std::string,ik::E5BufferTensor>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ik::E5BufferTensor>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ik::E5BufferTensor>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ik::E5BufferTensor>>>::~__hash_table((uint64_t)&a17);
  std::mutex::unlock(v23);
  _Unwind_Resume(a1);
}

void scml::ClipEmbeddingClassifier::PredictResult::~PredictResult(scml::ClipEmbeddingClassifier::PredictResult *this)
{
  void *v2;
  void *v3;
  void **v4;

  v2 = (void *)*((_QWORD *)this + 7);
  if (v2)
  {
    *((_QWORD *)this + 8) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 4);
  if (v3)
    operator delete(v3);
  v4 = (void **)((char *)this + 8);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
}

uint64_t scml::ClipEmbeddingClassifier::name(scml::ClipEmbeddingClassifier *this)
{
  return *(_QWORD *)this + 240;
}

uint64_t scml::ClipEmbeddingClassifier::embeddingVersion(scml::ClipEmbeddingClassifier *this)
{
  return *(_QWORD *)(*(_QWORD *)this + 264);
}

void scml::ClipEmbeddingClassifier::defaultASMConfigPath(_QWORD *a1@<X8>)
{
}

void scml::`anonymous namespace'::configPathForModel(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  scml *v12;
  id v13;

  objc_msgSend(MEMORY[0x24BDD1488], "bundleForClass:", objc_opt_class());
  v13 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v13, "resourceURL");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "path");
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  scml::strToNSString(a1, a2);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "stringByAppendingString:", CFSTR(".config.json"));
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "stringByAppendingPathComponent:", CFSTR("Models"));
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v10, "stringByAppendingPathComponent:", v8);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "stringByAppendingPathComponent:", v9);
  v12 = (scml *)objc_claimAutoreleasedReturnValue();
  scml::strFromNSString(v12, a3);

}

void sub_245C11E14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_245C11E60()
{
  JUMPOUT(0x245C11E4CLL);
}

void sub_245C11E68()
{
  void *v0;

  JUMPOUT(0x245C11E50);
}

void sub_245C11E74()
{
  JUMPOUT(0x245C11E50);
}

void scml::ClipEmbeddingClassifier::defaultStructuralIntegrityConfigPath(_QWORD *a1@<X8>)
{
}

uint64_t std::string::basic_string[abi:ne180100](uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;

  if (a2 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (a2 > 0x16)
  {
    v4 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17)
      v4 = a2 | 7;
    v5 = v4 + 1;
    v6 = operator new(v4 + 1);
    *(_QWORD *)(a1 + 8) = a2;
    *(_QWORD *)(a1 + 16) = v5 | 0x8000000000000000;
    *(_QWORD *)a1 = v6;
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    *(_BYTE *)(a1 + 23) = a2;
  }
  return a1;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::variant<int,std::string>>,std::variant<int,std::string> const*,std::variant<int,std::string> const*,std::variant<int,std::string>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<int,std::string>,(std::__variant_detail::_Trait)1>::__copy_constructor(a4 + v7, a2 + v7);
      v7 += 32;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_245C11F6C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (v2)
  {
    v4 = v1 - 32;
    do
    {
      std::__variant_detail::__dtor<std::__variant_detail::__traits<int,std::string>,(std::__variant_detail::_Trait)1>::~__dtor(v4 + v2);
      v2 -= 32;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<int,std::string>,(std::__variant_detail::_Trait)1>::__copy_constructor(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 24) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<int,std::string>>::__generic_construct[abi:ne180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<int,std::string>,(std::__variant_detail::_Trait)1> const&>(a1, a2);
  return a1;
}

void sub_245C11FC0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__variant_detail::__dtor<std::__variant_detail::__traits<int,std::string>,(std::__variant_detail::_Trait)1>::~__dtor(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<int,std::string>>::__generic_construct[abi:ne180100]<std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<int,std::string>,(std::__variant_detail::_Trait)1> const&>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 24);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_2516E4970[v4])(&v7, result);
  *(_DWORD *)(v3 + 24) = -1;
  v5 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))*(&off_2516E4980 + v5))(&v6, v3, a2);
    *(_DWORD *)(v3 + 24) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJiNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSF_1EJiSD_EEEEEEDcSH_DpT0_(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJiNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISE_LNS0_6_TraitE1EEEEEvRSF_OT_EUlRSN_OT0_E_JRNS0_6__baseILSI_1EJiSD_EEERKSV_EEEDcSN_DpT0_(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  *a2 = *a3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJiNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEEE19__generic_constructB8ne180100IRKNS0_18__copy_constructorISE_LNS0_6_TraitE1EEEEEvRSF_OT_EUlRSN_OT0_E_JRNS0_6__baseILSI_1EJiSD_EEERKSV_EEEDcSN_DpT0_(int a1, std::string *this, __int128 *a3)
{
  __int128 v3;

  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v3 = *a3;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
  }
}

uint64_t std::__variant_detail::__dtor<std::__variant_detail::__traits<int,std::string>,(std::__variant_detail::_Trait)1>::~__dtor(uint64_t a1)
{
  uint64_t v2;
  char v4;

  v2 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_2516E4970[v2])(&v4, a1);
  *(_DWORD *)(a1 + 24) = -1;
  return a1;
}

void std::vector<std::variant<int,std::string>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        v4 = std::__variant_detail::__dtor<std::__variant_detail::__traits<int,std::string>,(std::__variant_detail::_Trait)1>::~__dtor(v4 - 32);
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<scml::TensorSpec>,scml::TensorSpec const*,scml::TensorSpec const*,scml::TensorSpec*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      std::construct_at[abi:ne180100]<scml::TensorSpec,scml::TensorSpec const&,scml::TensorSpec*>((std::string *)(a4 + v7), (__int128 *)(a2 + v7));
      v7 += 56;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_245C121D4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (v2)
  {
    v4 = v1 - 56;
    do
    {
      std::__destroy_at[abi:ne180100]<scml::TensorSpec,0>(v4 + v2);
      v2 -= 56;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

std::string *std::construct_at[abi:ne180100]<scml::TensorSpec,scml::TensorSpec const&,scml::TensorSpec*>(std::string *this, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  this[1].__r_.__value_.__r.__words[2] = 0;
  std::vector<std::variant<int,std::string>>::__init_with_size[abi:ne180100]<std::variant<int,std::string>*,std::variant<int,std::string>*>(this[1].__r_.__value_.__r.__words, *((_QWORD *)a2 + 3), *((_QWORD *)a2 + 4), (uint64_t)(*((_QWORD *)a2 + 4) - *((_QWORD *)a2 + 3)) >> 5);
  LODWORD(this[2].__r_.__value_.__l.__data_) = *((_DWORD *)a2 + 12);
  return this;
}

void sub_245C12268(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<std::variant<int,std::string>>::__init_with_size[abi:ne180100]<std::variant<int,std::string>*,std::variant<int,std::string>*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::variant<int,std::string>>,std::variant<int,std::string>*,std::variant<int,std::string>*,std::variant<int,std::string>*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_245C122E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<std::variant<int,std::string>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::variant<int,std::string>>,std::variant<int,std::string>*,std::variant<int,std::string>*,std::variant<int,std::string>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<int,std::string>,(std::__variant_detail::_Trait)1>::__copy_constructor(a4 + v7, a2 + v7);
      v7 += 32;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_245C12364(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (v2)
  {
    v4 = v1 - 32;
    do
    {
      std::__variant_detail::__dtor<std::__variant_detail::__traits<int,std::string>,(std::__variant_detail::_Trait)1>::~__dtor(v4 + v2);
      v2 -= 32;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

void std::__destroy_at[abi:ne180100]<scml::TensorSpec,0>(uint64_t a1)
{
  void **v2;

  v2 = (void **)(a1 + 24);
  std::vector<std::variant<int,std::string>>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void std::vector<scml::TensorSpec>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 56;
        std::__destroy_at[abi:ne180100]<scml::TensorSpec,0>(v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__throw_bad_variant_access[abi:ne180100]()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = MEMORY[0x24BEDB8D8] + 16;
  __cxa_throw(exception, MEMORY[0x24BEDB738], (void (*)(void *))std::bad_variant_access::~bad_variant_access);
}

_QWORD *std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<ik::core::GenericTensorsFromE5Tensors(std::unordered_map<std::string,std::variant<ik::E5BufferTensor,ik::PixelBufferTensor>> const&)::{lambda(ik::Tensor const&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,ik::E5BufferTensor,ik::PixelBufferTensor> const&>(uint64_t **a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  unsigned __int8 *v8;

  v3 = *a1;
  v4 = **a1;
  v8 = (unsigned __int8 *)v3[1];
  v5 = std::__hash_table<std::__hash_value_type<std::string,ik::Tensor>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ik::Tensor>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ik::Tensor>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ik::Tensor>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v4, v8, (uint64_t)&std::piecewise_construct, (__int128 **)&v8);
  v6 = v5;
  *((_DWORD *)v5 + 12) = *(_DWORD *)(a2 + 8);
  if (v5 + 40 != (unsigned __int8 *)a2)
    std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long *,unsigned long *>((char *)v5 + 56, *(char **)(a2 + 16), *(_QWORD *)(a2 + 24), (uint64_t)(*(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16)) >> 3);
  return std::shared_ptr<ik::TensorStorage>::operator=[abi:ne180100]((_QWORD *)v6 + 10, (uint64_t *)(a2 + 40));
}

{
  uint64_t *v3;
  uint64_t v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  unsigned __int8 *v8;

  v3 = *a1;
  v4 = **a1;
  v8 = (unsigned __int8 *)v3[1];
  v5 = std::__hash_table<std::__hash_value_type<std::string,ik::Tensor>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ik::Tensor>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ik::Tensor>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ik::Tensor>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v4, v8, (uint64_t)&std::piecewise_construct, (__int128 **)&v8);
  v6 = v5;
  *((_DWORD *)v5 + 12) = *(_DWORD *)(a2 + 8);
  if (v5 + 40 != (unsigned __int8 *)a2)
    std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long *,unsigned long *>((char *)v5 + 56, *(char **)(a2 + 16), *(_QWORD *)(a2 + 24), (uint64_t)(*(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16)) >> 3);
  return std::shared_ptr<ik::TensorStorage>::operator=[abi:ne180100]((_QWORD *)v6 + 10, (uint64_t *)(a2 + 40));
}

_QWORD *std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<ik::core::GenericTensorsFromE5Tensors(std::unordered_map<std::string,std::variant<ik::E5BufferTensor,ik::PixelBufferTensor>> const&)::{lambda(ik::Tensor const&)#1}> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,ik::E5BufferTensor,ik::PixelBufferTensor> const&>(uint64_t **a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  unsigned __int8 *v8;

  v3 = *a1;
  v4 = **a1;
  v8 = (unsigned __int8 *)v3[1];
  v5 = std::__hash_table<std::__hash_value_type<std::string,ik::Tensor>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ik::Tensor>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ik::Tensor>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ik::Tensor>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v4, v8, (uint64_t)&std::piecewise_construct, (__int128 **)&v8);
  v6 = v5;
  *((_DWORD *)v5 + 12) = *(_DWORD *)(a2 + 8);
  if (v5 + 40 != (unsigned __int8 *)a2)
    std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long *,unsigned long *>((char *)v5 + 56, *(char **)(a2 + 16), *(_QWORD *)(a2 + 24), (uint64_t)(*(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16)) >> 3);
  return std::shared_ptr<ik::TensorStorage>::operator=[abi:ne180100]((_QWORD *)v6 + 10, (uint64_t *)(a2 + 40));
}

{
  uint64_t *v3;
  uint64_t v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  unsigned __int8 *v8;

  v3 = *a1;
  v4 = **a1;
  v8 = (unsigned __int8 *)v3[1];
  v5 = std::__hash_table<std::__hash_value_type<std::string,ik::Tensor>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ik::Tensor>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ik::Tensor>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ik::Tensor>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v4, v8, (uint64_t)&std::piecewise_construct, (__int128 **)&v8);
  v6 = v5;
  *((_DWORD *)v5 + 12) = *(_DWORD *)(a2 + 8);
  if (v5 + 40 != (unsigned __int8 *)a2)
    std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long *,unsigned long *>((char *)v5 + 56, *(char **)(a2 + 16), *(_QWORD *)(a2 + 24), (uint64_t)(*(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16)) >> 3);
  return std::shared_ptr<ik::TensorStorage>::operator=[abi:ne180100]((_QWORD *)v6 + 10, (uint64_t *)(a2 + 40));
}

_QWORD *std::shared_ptr<ik::TensorStorage>::operator=[abi:ne180100](_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v4 = *a2;
  v3 = a2[1];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = (std::__shared_weak_count *)a1[1];
  *a1 = v4;
  a1[1] = v3;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return a1;
}

char *std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long *,unsigned long *>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 3)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 61)
      std::vector<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 2;
    if (v8 >> 2 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<unsigned long>::__vallocate[abi:ne180100](v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 3;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[8 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

char *std::vector<unsigned long>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 61)
    std::vector<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

void ik::core::E5OpImpl::CreateInputTensors(E5RT::ExecutionStreamOperation **this@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 *i;
  E5RT::OperandDescriptor *PortDescriptorRef;
  unsigned __int8 *v5;
  E5RT::SurfaceDescriptor *v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  unsigned int SurfaceFormat;
  unsigned int v11;
  unsigned __int8 *v12;
  void *v13;
  __n128 v14;
  std::runtime_error *exception;
  E5RT::OperandDescriptor *v16[7];
  E5RT::OperandDescriptor *SurfaceWidth;
  uint64_t SurfaceHeight;
  int v19;
  char v20;
  char v21;
  char v22;
  std::string v23;
  std::string v24;

  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  for (i = *(unsigned __int8 **)(E5RT::ExecutionStreamOperation::GetInputPorts(*this) + 16); i; i = *(unsigned __int8 **)i)
  {
    PortDescriptorRef = (E5RT::OperandDescriptor *)E5RT::IOPort::GetPortDescriptorRef(*((E5RT::IOPort **)i + 5));
    if (E5RT::OperandDescriptor::TryAsTensorDescriptor(PortDescriptorRef))
    {
      ik::core::CreateBufferTensor(*((ik::core **)i + 5), v16);
      SurfaceWidth = (E5RT::OperandDescriptor *)(i + 16);
      v5 = std::__hash_table<std::__hash_value_type<std::string,std::variant<ik::E5BufferTensor,ik::PixelBufferTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<ik::E5BufferTensor,ik::PixelBufferTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<ik::E5BufferTensor,ik::PixelBufferTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<ik::E5BufferTensor,ik::PixelBufferTensor>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a2, i + 16, (uint64_t)&std::piecewise_construct, (__int128 **)&SurfaceWidth);
      std::__variant_detail::__assignment<std::__variant_detail::__traits<ik::E5BufferTensor,ik::PixelBufferTensor>>::__assign_alt[abi:ne180100]<0ul,ik::E5BufferTensor,ik::E5BufferTensor>((ik::Tensor *)(v5 + 40), (uint64_t)(v5 + 40), (ik::Tensor *)v16);
    }
    else
    {
      if (!E5RT::OperandDescriptor::TryAsSurfaceDescriptor(PortDescriptorRef))
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Unknown input port type.");
        __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
      }
      E5RT::IOPort::GetPortDescriptor(*((E5RT::IOPort **)i + 5));
      v6 = (E5RT::SurfaceDescriptor *)E5RT::OperandDescriptor::SurfaceDescriptor(SurfaceWidth);
      v7 = (std::__shared_weak_count *)SurfaceHeight;
      if (SurfaceHeight)
      {
        v8 = (unint64_t *)(SurfaceHeight + 8);
        do
          v9 = __ldaxr(v8);
        while (__stlxr(v9 - 1, v8));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
      SurfaceWidth = (E5RT::OperandDescriptor *)E5RT::SurfaceDescriptor::GetSurfaceWidth(v6);
      SurfaceHeight = E5RT::SurfaceDescriptor::GetSurfaceHeight(v6);
      SurfaceFormat = E5RT::SurfaceDescriptor::GetSurfaceFormat(v6);
      v11 = SurfaceFormat;
      if (SurfaceFormat >= 0x20 || ((0x80017FFF >> SurfaceFormat) & 1) == 0)
      {
        v13 = __cxa_allocate_exception(0x10uLL);
        std::to_string(&v23, v11);
        v14 = std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("Unsupported SurfaceFormat: ", &v23, &v24);
        MEMORY[0x249544C64](v13, &v24, v14);
        __cxa_throw(v13, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
      }
      v19 = *(_DWORD *)&aF024800largbab[4 * SurfaceFormat];
      v20 = 1;
      v21 = 0;
      v22 = 0;
      ik::PixelBufferTensor::PixelBufferTensor((ik::PixelBufferTensor *)v16, (uint64_t)&SurfaceWidth);
      SurfaceWidth = (E5RT::OperandDescriptor *)(i + 16);
      v12 = std::__hash_table<std::__hash_value_type<std::string,std::variant<ik::E5BufferTensor,ik::PixelBufferTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<ik::E5BufferTensor,ik::PixelBufferTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<ik::E5BufferTensor,ik::PixelBufferTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<ik::E5BufferTensor,ik::PixelBufferTensor>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a2, i + 16, (uint64_t)&std::piecewise_construct, (__int128 **)&SurfaceWidth);
      std::__variant_detail::__assignment<std::__variant_detail::__traits<ik::E5BufferTensor,ik::PixelBufferTensor>>::__assign_alt[abi:ne180100]<1ul,ik::PixelBufferTensor,ik::PixelBufferTensor>((ik::Tensor *)(v12 + 40), (uint64_t)(v12 + 40), (ik::Tensor *)v16);
    }
    ik::Tensor::~Tensor((ik::Tensor *)v16);
  }
}

void sub_245C1297C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;

  std::__hash_table<std::__hash_value_type<std::string,std::variant<ik::E5BufferTensor,ik::PixelBufferTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<ik::E5BufferTensor,ik::PixelBufferTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<ik::E5BufferTensor,ik::PixelBufferTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<ik::E5BufferTensor,ik::PixelBufferTensor>>>>::~__hash_table(v26);
  _Unwind_Resume(a1);
}

void ik::core::CreateBufferTensor(ik::core *this@<X0>, _QWORD *a2@<X8>)
{
  E5RT::TensorDescriptor *v4;
  uint64_t *p_shared_owners;
  unint64_t v6;
  int ComponentSize;
  int ComponentDataType;
  unsigned int v9;
  uint64_t TensorShape;
  std::runtime_error *exception;
  void *__p;
  std::__shared_weak_count *v13;
  uint64_t v14;
  _BYTE v15[20];
  unsigned int v16;

  E5RT::IOPort::GetPortDescriptor(this);
  v4 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TensorDescriptor((E5RT::OperandDescriptor *)__p);
  if (v13)
  {
    p_shared_owners = &v13->__shared_owners_;
    do
      v6 = __ldaxr((unint64_t *)p_shared_owners);
    while (__stlxr(v6 - 1, (unint64_t *)p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  E5RT::TensorDescriptor::GetTensorDataType(v4);
  ComponentSize = E5RT::TensorDataType::GetComponentSize((E5RT::TensorDataType *)v15);
  ComponentDataType = E5RT::TensorDataType::GetComponentDataType((E5RT::TensorDataType *)v15);
  if (ComponentDataType == 4)
  {
    if (ComponentSize == 2)
    {
      v9 = 3;
    }
    else
    {
      if (ComponentSize != 4)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Unsupported component size for float.");
        goto LABEL_26;
      }
      v9 = 4;
    }
  }
  else
  {
    if (ComponentDataType != 1)
    {
      if (ComponentDataType)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Unsupported e5rt component type.");
      }
      else
      {
        if (ComponentSize == 1)
        {
          v9 = 0;
          goto LABEL_19;
        }
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Unsupported component size for uint.");
      }
LABEL_26:
      __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
    }
    if (ComponentSize == 2)
    {
      v9 = 1;
    }
    else
    {
      if (ComponentSize != 4)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Unsupported component size for int.");
        goto LABEL_26;
      }
      v9 = 2;
    }
  }
LABEL_19:
  v16 = v9;
  TensorShape = E5RT::TensorDescriptor::GetTensorShape(v4);
  __p = 0;
  v13 = 0;
  v14 = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, *(const void **)TensorShape, *(_QWORD *)(TensorShape + 8), (uint64_t)(*(_QWORD *)(TensorShape + 8) - *(_QWORD *)TensorShape) >> 3);
  ik::E5BufferTensor::E5BufferTensor(a2, &v16, (int **)&__p);
  if (__p)
  {
    v13 = (std::__shared_weak_count *)__p;
    operator delete(__p);
  }
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v15);
}

void sub_245C12BF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, char a12)
{
  void *v12;

  __cxa_free_exception(v12);
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&a12);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<unsigned long>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_245C12CB4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *ik::E5BufferTensor::E5BufferTensor(_QWORD *a1, unsigned int *a2, int **a3)
{
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v13;
  __int128 v14;
  __int128 v15;

  v13 = 0;
  std::allocate_shared[abi:ne180100]<ik::core::E5BufferStorage,std::allocator<ik::core::E5BufferStorage>,decltype(nullptr),ik::DataType const&,ik::TensorShape const&,void>((uint64_t)&v13, a2, a3, &v14);
  v15 = v14;
  v14 = 0uLL;
  ik::Tensor::Tensor((uint64_t)a1, &v15, a2, (uint64_t)a3);
  v6 = (std::__shared_weak_count *)*((_QWORD *)&v15 + 1);
  if (*((_QWORD *)&v15 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v15 + 1) + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = (std::__shared_weak_count *)*((_QWORD *)&v14 + 1);
  if (*((_QWORD *)&v14 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  *a1 = &unk_2516E33A0;
  return a1;
}

void sub_245C12DC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  std::shared_ptr<scml::Config::PathInfo>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<scml::Config::PathInfo>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t ik::Tensor::Tensor(uint64_t a1, _QWORD *a2, _DWORD *a3, uint64_t a4)
{
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)a1 = &unk_2516E3528;
  *(_DWORD *)(a1 + 8) = *a3;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>((_QWORD *)(a1 + 16), *(const void **)a4, *(_QWORD *)(a4 + 8), (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3);
  v6 = a2[1];
  *(_QWORD *)(a1 + 40) = *a2;
  *(_QWORD *)(a1 + 48) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return a1;
}

void ik::E5BufferTensor::~E5BufferTensor(ik::E5BufferTensor *this)
{
  ik::Tensor::~Tensor(this);
  JUMPOUT(0x249544F58);
}

_QWORD *std::allocate_shared[abi:ne180100]<ik::core::E5BufferStorage,std::allocator<ik::core::E5BufferStorage>,decltype(nullptr),ik::DataType const&,ik::TensorShape const&,void>@<X0>(uint64_t a1@<X1>, unsigned int *a2@<X2>, int **a3@<X3>, _QWORD *a4@<X8>)
{
  _QWORD *v8;
  _QWORD *result;

  v8 = operator new(0x48uLL);
  result = std::__shared_ptr_emplace<ik::core::E5BufferStorage>::__shared_ptr_emplace[abi:ne180100]<decltype(nullptr),ik::DataType const&,ik::TensorShape const&,std::allocator<ik::core::E5BufferStorage>,0>(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  return result;
}

void sub_245C12ED4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<ik::core::E5BufferStorage>::__shared_ptr_emplace[abi:ne180100]<decltype(nullptr),ik::DataType const&,ik::TensorShape const&,std::allocator<ik::core::E5BufferStorage>,0>(_QWORD *a1, uint64_t a2, unsigned int *a3, int **a4)
{
  a1[2] = 0;
  *a1 = &unk_2516E43C8;
  a1[1] = 0;
  std::construct_at[abi:ne180100]<ik::core::E5BufferStorage,decltype(nullptr),ik::DataType const&,ik::TensorShape const&,ik::core::E5BufferStorage*>(a1 + 3, a2, a3, a4);
  return a1;
}

void sub_245C12F20(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<ik::core::E5BufferStorage>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_2516E43C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ik::core::E5BufferStorage>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_2516E43C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x249544F58);
}

void std::__shared_ptr_emplace<ik::core::E5BufferStorage>::__on_zero_shared(uint64_t a1)
{
  ik::core::E5BufferStorage::~E5BufferStorage((ik::core::E5BufferStorage *)(a1 + 24));
}

_QWORD *std::construct_at[abi:ne180100]<ik::core::E5BufferStorage,decltype(nullptr),ik::DataType const&,ik::TensorShape const&,ik::core::E5BufferStorage*>(_QWORD *a1, uint64_t a2, unsigned int *a3, int **a4)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v9;
  std::__shared_weak_count *v10;

  v9 = 0;
  v10 = 0;
  ik::core::E5BufferStorage::E5BufferStorage(a1, &v9, a3, a4);
  v5 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  return a1;
}

void sub_245C12FF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<scml::Config::PathInfo>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *ik::core::E5BufferStorage::E5BufferStorage(_QWORD *a1, _QWORD *a2, unsigned int *a3, int **a4)
{
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  int *v11;
  int *v12;
  int v13;
  int v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  uint64_t v23;
  std::runtime_error *v25;
  std::runtime_error *exception;
  uint64_t v27;

  *a1 = &unk_2516E3488;
  v7 = a1 + 1;
  if (*a2)
  {
    v8 = a2[1];
    a1[1] = *a2;
    a1[2] = v8;
    if (v8)
    {
      v9 = (unint64_t *)(v8 + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
  }
  else
  {
    if (*a3 >= 5)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Unknown data type");
      __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
    }
    v11 = *a4;
    v12 = a4[1];
    if (*a4 != v12)
    {
      v13 = 1;
      do
      {
        v14 = *v11;
        v11 += 2;
        v13 *= v14;
      }
      while (v11 != v12);
    }
    E5RT::BufferObject::AllocMemory();
    *v7 = v27;
    if (v27)
    {
      v15 = (_QWORD *)operator new();
      *v15 = &unk_2516E4470;
      v15[1] = 0;
      v15[2] = 0;
      v15[3] = v27;
    }
    else
    {
      v15 = 0;
    }
    a1[2] = v15;
  }
  v16 = (int)*a3;
  if (v16 >= 5)
  {
    v25 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v25, "Unknown data type");
    __cxa_throw(v25, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  v17 = qword_245C92358[v16];
  v18 = (char *)a4[1] - (char *)*a4;
  v19 = std::vector<unsigned long>::vector(a1 + 3, v18 >> 3);
  if (v18 >= 1)
  {
    v20 = *v19;
    v21 = *a4;
    v22 = (v18 >> 3) - 1;
    do
    {
      *(_QWORD *)(v20 + 8 * v22) = v17;
      v17 *= *(_QWORD *)&v21[2 * v22];
      v23 = v22-- + 1;
    }
    while (v23 > 1);
  }
  return a1;
}

void sub_245C131E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void *v10;

  __cxa_free_exception(v10);
  _Unwind_Resume(a1);
}

void ik::core::E5BufferStorage::~E5BufferStorage(ik::core::E5BufferStorage *this)
{
  ik::core::E5BufferStorage::~E5BufferStorage(this);
  JUMPOUT(0x249544F58);
}

{
  void *v2;

  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
  std::shared_ptr<scml::Config::PathInfo>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

uint64_t ik::core::E5BufferStorage::Bind(uint64_t a1, void *lpsrc)
{
  void *v3;
  std::runtime_error *exception;

  if (!v3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    _ZN2ik14InferenceErrorCI1St13runtime_errorEPKc(exception, "This tensor type can only be used with E5RT.");
  }
  return (*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)v3 + 40))(v3, a1 + 8);
}

void sub_245C132E4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t ik::core::E5BufferStorage::Data(E5RT::BufferObject **this)
{
  return E5RT::BufferObject::GetDataSpan(this[1]);
}

_QWORD *ik::core::E5BufferStorage::Strides@<X0>(ik::core::E5BufferStorage *this@<X0>, _QWORD *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(a2, *((const void **)this + 3), *((_QWORD *)this + 4), (uint64_t)(*((_QWORD *)this + 4) - *((_QWORD *)this + 3)) >> 3);
}

void ik::TensorStorage::CopyData(ik::TensorStorage *this@<X0>, void **a2@<X8>)
{
  const void *v4;
  size_t v5;
  size_t v6;
  void *__p[3];

  v4 = (const void *)(*(uint64_t (**)(ik::TensorStorage *))(*(_QWORD *)this + 24))(this);
  v6 = v5;
  (*(void (**)(void **__return_ptr, ik::TensorStorage *))(*(_QWORD *)this + 32))(__p, this);
  ik::StridedArray::StridedArray(a2, v4, v6, (uint64_t)__p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_245C13398(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<E5RT::BufferObject  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x249544F58);
}

uint64_t std::__shared_ptr_pointer<E5RT::BufferObject  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<E5RT::BufferObject  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
    return a1 + 24;
  else
    return 0;
}

_QWORD *std::vector<unsigned long>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned long>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_245C1348C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

std::runtime_error *_ZN2ik14InferenceErrorCI1St13runtime_errorEPKc(std::runtime_error *a1, const char *a2)
{
  std::runtime_error *result;

  result = std::runtime_error::runtime_error(a1, a2);
  result->__vftable = (std::runtime_error_vtbl *)&unk_2516E33C0;
  return result;
}

void ik::InferenceError::~InferenceError(std::runtime_error *this)
{
  std::runtime_error::~runtime_error(this);
  JUMPOUT(0x249544F58);
}

void **ik::StridedArray::StridedArray(void **a1, const void *a2, size_t a3, uint64_t a4)
{
  uint64_t v8;
  _QWORD *v9;

  v8 = operator new[]();
  v9 = std::shared_ptr<unsigned char []>::shared_ptr[abi:ne180100]<unsigned char,void>(a1, v8);
  v9[3] = 0;
  v9 += 3;
  *(v9 - 1) = a3;
  v9[1] = 0;
  v9[2] = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(v9, *(const void **)a4, *(_QWORD *)(a4 + 8), (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3);
  memcpy(*a1, a2, a3);
  return a1;
}

void sub_245C135B0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<scml::Config::PathInfo>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<unsigned char []>::shared_ptr[abi:ne180100]<unsigned char,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &unk_2516E4518;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_245C1361C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    MEMORY[0x249544F58](v1, 0x1000C4077774924);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<unsigned char *,std::shared_ptr<unsigned char []>::__shared_ptr_default_delete<unsigned char [],unsigned char>,std::allocator<unsigned char>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x249544F58);
}

uint64_t std::__shared_ptr_pointer<unsigned char *,std::shared_ptr<unsigned char []>::__shared_ptr_default_delete<unsigned char [],unsigned char>,std::allocator<unsigned char>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    JUMPOUT(0x249544F34);
  return result;
}

uint64_t std::__shared_ptr_pointer<unsigned char *,std::shared_ptr<unsigned char []>::__shared_ptr_default_delete<unsigned char [],unsigned char>,std::allocator<unsigned char>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void ik::Tensor::~Tensor(ik::Tensor *this)
{
  ik::Tensor::~Tensor(this);
  JUMPOUT(0x249544F58);
}

{
  void *v2;

  *(_QWORD *)this = &unk_2516E3528;
  std::shared_ptr<scml::Config::PathInfo>::~shared_ptr[abi:ne180100]((uint64_t)this + 40);
  v2 = (void *)*((_QWORD *)this + 2);
  if (v2)
  {
    *((_QWORD *)this + 3) = v2;
    operator delete(v2);
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::variant<ik::E5BufferTensor,ik::PixelBufferTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<ik::E5BufferTensor,ik::PixelBufferTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<ik::E5BufferTensor,ik::PixelBufferTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<ik::E5BufferTensor,ik::PixelBufferTensor>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 *i;
  unint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD v26[3];

  v8 = (_QWORD *)(a1 + 24);
  v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(unsigned __int8 **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::variant<ik::E5BufferTensor,ik::PixelBufferTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<ik::E5BufferTensor,ik::PixelBufferTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<ik::E5BufferTensor,ik::PixelBufferTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<ik::E5BufferTensor,ik::PixelBufferTensor>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1, v22);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *(_QWORD *)v26[0] = *v23;
    *v23 = v26[0];
  }
  else
  {
    *(_QWORD *)v26[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v26[0])
    {
      v24 = *(_QWORD *)(*(_QWORD *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11)
          v24 %= v11;
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v26[0];
    }
  }
  i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::variant<ik::E5BufferTensor,ik::PixelBufferTensor>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::variant<ik::E5BufferTensor,ik::PixelBufferTensor>>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return i;
}

void sub_245C139B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::variant<ik::E5BufferTensor,ik::PixelBufferTensor>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::variant<ik::E5BufferTensor,ik::PixelBufferTensor>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

std::string *std::__hash_table<std::__hash_value_type<std::string,std::variant<ik::E5BufferTensor,ik::PixelBufferTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<ik::E5BufferTensor,ik::PixelBufferTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<ik::E5BufferTensor,ik::PixelBufferTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<ik::E5BufferTensor,ik::PixelBufferTensor>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *v8;
  std::string *result;

  v7 = a1 + 16;
  v8 = (char *)operator new(0x68uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = a2;
  result = std::pair<std::string const,std::variant<ik::E5BufferTensor,ik::PixelBufferTensor>>::pair[abi:ne180100]<std::string const&>((std::string *)(v8 + 16), *a3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_245C13A24(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::variant<ik::E5BufferTensor,ik::PixelBufferTensor>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::variant<ik::E5BufferTensor,ik::PixelBufferTensor>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,std::variant<ik::E5BufferTensor,ik::PixelBufferTensor>>::pair[abi:ne180100]<std::string const&>(std::string *this, __int128 *a2)
{
  __int128 v3;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v3 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
  }
  ik::Tensor::Tensor((ik::Tensor *)&this[1]);
  this[1].__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_2516E33A0;
  LODWORD(this[3].__r_.__value_.__r.__words[1]) = 0;
  return this;
}

void sub_245C13AA4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

ik::Tensor *ik::Tensor::Tensor(ik::Tensor *this)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void *__p;
  void *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  std::__shared_weak_count *v11;

  v10 = 0;
  v11 = 0;
  v9 = 4;
  __p = 0;
  v7 = 0;
  v8 = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, 0, 0, 0);
  ik::Tensor::Tensor((uint64_t)this, &v10, &v9, (uint64_t)&__p);
  if (__p)
  {
    v7 = __p;
    operator delete(__p);
  }
  v2 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return this;
}

{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void *__p;
  void *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  std::__shared_weak_count *v11;

  v10 = 0;
  v11 = 0;
  v9 = 4;
  __p = 0;
  v7 = 0;
  v8 = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, 0, 0, 0);
  ik::Tensor::Tensor((uint64_t)this, &v10, &v9, (uint64_t)&__p);
  if (__p)
  {
    v7 = __p;
    operator delete(__p);
  }
  v2 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return this;
}

void sub_245C13B6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  if (__p)
    operator delete(__p);
  std::shared_ptr<scml::Config::PathInfo>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::variant<ik::E5BufferTensor,ik::PixelBufferTensor>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::variant<ik::E5BufferTensor,ik::PixelBufferTensor>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::variant<ik::E5BufferTensor,ik::PixelBufferTensor>>,0>((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::variant<ik::E5BufferTensor,ik::PixelBufferTensor>>,0>(uint64_t a1)
{
  std::__variant_detail::__dtor<std::__variant_detail::__traits<ik::E5BufferTensor,ik::PixelBufferTensor>,(std::__variant_detail::_Trait)1>::~__dtor((unsigned int *)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

unsigned int *std::__variant_detail::__dtor<std::__variant_detail::__traits<ik::E5BufferTensor,ik::PixelBufferTensor>,(std::__variant_detail::_Trait)1>::~__dtor(unsigned int *a1)
{
  uint64_t v2;
  char v4;

  v2 = a1[14];
  if ((_DWORD)v2 != -1)
    off_2516E49A0[v2]((int)&v4, (ik::Tensor *)a1);
  a1[14] = -1;
  return a1;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJN2ik14E5BufferTensorENS8_17PixelBufferTensorEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(int a1, ik::Tensor *this)
{
  ik::Tensor::~Tensor(this);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJN2ik14E5BufferTensorENS8_17PixelBufferTensorEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(int a1, ik::Tensor *this)
{
  ik::Tensor::~Tensor(this);
}

ik::Tensor *std::__variant_detail::__assignment<std::__variant_detail::__traits<ik::E5BufferTensor,ik::PixelBufferTensor>>::__assign_alt[abi:ne180100]<0ul,ik::E5BufferTensor,ik::E5BufferTensor>(ik::Tensor *a1, uint64_t a2, ik::Tensor *a3)
{
  if (*((_DWORD *)a1 + 14))
    return std::__variant_detail::__assignment<std::__variant_detail::__traits<ik::E5BufferTensor,ik::PixelBufferTensor>>::__emplace[abi:ne180100]<0ul,ik::E5BufferTensor>(a1, a3);
  *(_DWORD *)(a2 + 8) = *((_DWORD *)a3 + 2);
  if ((ik::Tensor *)a2 != a3)
    std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long *,unsigned long *>((char *)(a2 + 16), *((char **)a3 + 2), *((_QWORD *)a3 + 3), (uint64_t)(*((_QWORD *)a3 + 3) - *((_QWORD *)a3 + 2)) >> 3);
  return (ik::Tensor *)std::shared_ptr<ik::TensorStorage>::operator=[abi:ne180100]((_QWORD *)(a2 + 40), (uint64_t *)a3 + 5);
}

ik::Tensor *std::__variant_detail::__assignment<std::__variant_detail::__traits<ik::E5BufferTensor,ik::PixelBufferTensor>>::__emplace[abi:ne180100]<0ul,ik::E5BufferTensor>(ik::Tensor *this, ik::Tensor *a2)
{
  uint64_t v4;
  ik::Tensor *result;
  char v6;

  v4 = *((unsigned int *)this + 14);
  if ((_DWORD)v4 != -1)
    off_2516E49A0[v4]((int)&v6, this);
  *((_DWORD *)this + 14) = -1;
  result = ik::Tensor::Tensor(this, a2);
  *(_QWORD *)this = &unk_2516E33A0;
  *((_DWORD *)this + 14) = 0;
  return result;
}

ik::Tensor *ik::Tensor::Tensor(ik::Tensor *this, const ik::Tensor *a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  *(_QWORD *)this = &unk_2516E3528;
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 2) = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>((_QWORD *)this + 2, *((const void **)a2 + 2), *((_QWORD *)a2 + 3), (uint64_t)(*((_QWORD *)a2 + 3) - *((_QWORD *)a2 + 2)) >> 3);
  v4 = *((_QWORD *)a2 + 6);
  *((_QWORD *)this + 5) = *((_QWORD *)a2 + 5);
  *((_QWORD *)this + 6) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return this;
}

ik::PixelBufferTensor *ik::PixelBufferTensor::PixelBufferTensor(ik::PixelBufferTensor *a1, uint64_t a2)
{
  const __CFAllocator *v4;
  CFMutableDictionaryRef Mutable;
  const void *v6;
  CVReturn v7;
  __CVBuffer *v8;
  std::runtime_error *exception;
  void *v11;
  __n128 v12;
  std::string v13;
  std::string v14;
  CFMutableDictionaryRef theDict;
  CVPixelBufferRef pixelBufferOut;

  if (!*(_QWORD *)a2 || !*(_QWORD *)(a2 + 8))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Invalid dimensions requested for CVPixelBuffer creation.");
    __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  pixelBufferOut = 0;
  v4 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  theDict = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  if (*(_BYTE *)(a2 + 20))
  {
    Mutable = CFDictionaryCreateMutable(v4, 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
    v6 = (const void *)*MEMORY[0x24BDC5668];
    v14.__r_.__value_.__r.__words[0] = (std::string::size_type)Mutable;
    CFDictionarySetValue(theDict, v6, Mutable);
    ik::Dict::~Dict((const void **)&v14.__r_.__value_.__l.__data_);
  }
  if (*(_BYTE *)(a2 + 32))
    ik::Dict::Set<unsigned long>(&theDict, (const void *)*MEMORY[0x24BDC55D0], (const void *)(a2 + 24), kCFNumberSInt64Type);
  v7 = CVPixelBufferCreate(v4, *(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(_DWORD *)(a2 + 16), theDict, &pixelBufferOut);
  if (v7)
  {
    v11 = __cxa_allocate_exception(0x10uLL);
    std::to_string(&v13, v7);
    v12 = std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("Failed to create CVPixelBuffer. Status = ", &v13, &v14);
    MEMORY[0x249544C64](v11, &v14, v12);
    __cxa_throw(v11, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  v8 = pixelBufferOut;
  ik::Dict::~Dict((const void **)&theDict);
  ik::PixelBufferTensor::PixelBufferTensor(a1, v8);
  CVPixelBufferRelease(*(CVPixelBufferRef *)(*((_QWORD *)a1 + 5) + 8));
  return a1;
}

void sub_245C13F84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,const void *a21)
{
  void *v21;
  int v22;

  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v22 & 1) == 0)
    {
LABEL_8:
      ik::Dict::~Dict(&a21);
      _Unwind_Resume(a1);
    }
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

void std::__throw_out_of_range[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::out_of_range::out_of_range[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_2516E0678, MEMORY[0x24BEDAB00]);
}

void sub_245C14068(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::out_of_range::out_of_range[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
  return result;
}

void ik::Dict::Set<unsigned long>(CFMutableDictionaryRef *a1, const void *a2, const void *a3, CFNumberType theType)
{
  CFNumberRef v6;

  v6 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], theType, a3);
  CFDictionarySetValue(*a1, a2, v6);
  CFRelease(v6);
}

void ik::Dict::~Dict(const void **this)
{
  const void *v1;

  v1 = *this;
  if (v1)
    CFRelease(v1);
}

ik::PixelBufferTensor *ik::PixelBufferTensor::PixelBufferTensor(ik::PixelBufferTensor *this, __CVBuffer *a2)
{
  __CVBuffer *v3;
  __CVBuffer *v4;
  size_t Height;
  size_t Width;
  __CVBuffer *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  void *__p[3];
  int v17;
  __int128 v18;
  __int128 v19;
  CVPixelBufferRef v20;

  v20 = a2;
  std::allocate_shared[abi:ne180100]<ik::core::PixelBufferStorage,std::allocator<ik::core::PixelBufferStorage>,__CVBuffer *&,void>(&v20, &v18);
  v19 = v18;
  v18 = 0uLL;
  v17 = ik::core::DataTypeFromPixelBuffer(v20, v3);
  v4 = v20;
  Height = CVPixelBufferGetHeight(v20);
  Width = CVPixelBufferGetWidth(v4);
  v8 = ik::core::ChannelCountFromPixelBuffer(v4, v7);
  ik::TensorShape::TensorShape<unsigned long,unsigned long,unsigned long>(__p, Height, Width, v8);
  ik::Tensor::Tensor((uint64_t)this, &v19, &v17, (uint64_t)__p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  v9 = (std::__shared_weak_count *)*((_QWORD *)&v19 + 1);
  if (*((_QWORD *)&v19 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
  if (*((_QWORD *)&v18 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  *(_QWORD *)this = &unk_2516E3428;
  return this;
}

void sub_245C1425C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15)
{
  if (__p)
    operator delete(__p);
  std::shared_ptr<scml::Config::PathInfo>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  std::shared_ptr<scml::Config::PathInfo>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

uint64_t ik::core::DataTypeFromPixelBuffer(ik::core *this, __CVBuffer *a2)
{
  signed int PixelFormatType;
  uint64_t v3;
  int v4;
  unsigned int v6;
  void *exception;
  __n128 v8;
  std::string v9;
  std::string v10;

  PixelFormatType = CVPixelBufferGetPixelFormatType(this);
  v3 = 0;
  if (PixelFormatType > 1278226533)
  {
    if (PixelFormatType > 1717855599)
    {
      if (PixelFormatType != 1717856627 && PixelFormatType != 1717855600)
      {
LABEL_16:
        v6 = PixelFormatType;
        exception = __cxa_allocate_exception(0x10uLL);
        std::to_string(&v9, v6);
        v8 = std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("Unsupported CVPixelBuffer type: ", &v9, &v10);
        MEMORY[0x249544C64](exception, &v10, v8);
        __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
      }
    }
    else if (PixelFormatType != 1278226534)
    {
      v4 = 1380401729;
      goto LABEL_10;
    }
    return 4;
  }
  if (PixelFormatType > 1111970368)
  {
    if (PixelFormatType == 1111970369)
      return v3;
    v4 = 1278226488;
  }
  else
  {
    if (PixelFormatType == 32)
      return v3;
    v4 = 1094862674;
  }
LABEL_10:
  if (PixelFormatType != v4)
    goto LABEL_16;
  return v3;
}

void sub_245C143D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  int v21;

  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v21 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v21)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v20);
  goto LABEL_8;
}

void ik::PixelBufferTensor::~PixelBufferTensor(ik::PixelBufferTensor *this)
{
  ik::Tensor::~Tensor(this);
  JUMPOUT(0x249544F58);
}

_QWORD *std::allocate_shared[abi:ne180100]<ik::core::PixelBufferStorage,std::allocator<ik::core::PixelBufferStorage>,__CVBuffer *&,void>@<X0>(CVPixelBufferRef *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x28uLL);
  result = std::__shared_ptr_emplace<ik::core::PixelBufferStorage>::__shared_ptr_emplace[abi:ne180100]<__CVBuffer *&,std::allocator<ik::core::PixelBufferStorage>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_245C14498(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<ik::core::PixelBufferStorage>::__shared_ptr_emplace[abi:ne180100]<__CVBuffer *&,std::allocator<ik::core::PixelBufferStorage>,0>(_QWORD *a1, CVPixelBufferRef *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_2516E4400;
  ik::core::PixelBufferStorage::PixelBufferStorage((ik::core::PixelBufferStorage *)(a1 + 3), *a2);
  return a1;
}

void sub_245C144E8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<ik::core::PixelBufferStorage>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_2516E4400;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ik::core::PixelBufferStorage>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_2516E4400;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x249544F58);
}

void std::__shared_ptr_emplace<ik::core::PixelBufferStorage>::__on_zero_shared(uint64_t a1)
{
  CVPixelBufferRelease(*(CVPixelBufferRef *)(a1 + 32));
}

ik::core::PixelBufferStorage *ik::core::PixelBufferStorage::PixelBufferStorage(ik::core::PixelBufferStorage *this, CVPixelBufferRef texture)
{
  std::runtime_error *exception;

  *(_QWORD *)this = &unk_2516E34C8;
  *((_QWORD *)this + 1) = texture;
  if (!texture)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Null CVPixelBuffer encountered.");
    __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  CVPixelBufferRetain(texture);
  return this;
}

void sub_245C145D0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void ik::core::PixelBufferStorage::~PixelBufferStorage(CVPixelBufferRef *this)
{
  CVPixelBufferRelease(this[1]);
}

{
  CVPixelBufferRelease(this[1]);
  JUMPOUT(0x249544F58);
}

uint64_t ik::core::PixelBufferStorage::Bind(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, *(_QWORD *)(a1 + 8));
}

void *ik::core::PixelBufferStorage::Data(CVPixelBufferRef *this)
{
  void *BaseAddress;
  void *v3;
  std::runtime_error *exception;

  BaseAddress = CVPixelBufferGetBaseAddress(this[1]);
  if (!BaseAddress)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Failed to get CVPixelBuffer's data. Ensure the buffer was locked.");
    __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  v3 = BaseAddress;
  CVPixelBufferGetDataSize(this[1]);
  return v3;
}

void sub_245C146D0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *ik::core::PixelBufferStorage::Strides@<X0>(ik::core **this@<X0>, __CVBuffer *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  size_t BytesPerRow;
  __CVBuffer *v7;
  uint64_t v8;
  _QWORD *result;

  v5 = qword_245C92358[ik::core::DataTypeFromPixelBuffer(this[1], a2)];
  BytesPerRow = CVPixelBufferGetBytesPerRow(this[1]);
  v8 = ik::core::ChannelCountFromPixelBuffer(this[1], v7);
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  result = operator new(0x18uLL);
  a3[1] = result + 3;
  a3[2] = result + 3;
  *result = BytesPerRow;
  result[1] = v8 * v5;
  result[2] = v5;
  *a3 = result;
  return result;
}

void ik::core::PixelBufferStorage::CopyData(CVPixelBufferRef *this@<X0>, void **a2@<X8>)
{
  _BYTE v4[24];

  ik::core::CorePixelBufferScopeLock::CorePixelBufferScopeLock((ik::core::CorePixelBufferScopeLock *)v4, this[1], 1uLL);
  ik::TensorStorage::CopyData((ik::TensorStorage *)this, a2);
  ik::core::CorePixelBufferScopeLock::~CorePixelBufferScopeLock((ik::core::CorePixelBufferScopeLock *)v4);
}

void sub_245C147AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ik::core::CorePixelBufferScopeLock::~CorePixelBufferScopeLock((ik::core::CorePixelBufferScopeLock *)va);
  _Unwind_Resume(a1);
}

uint64_t ik::core::ChannelCountFromPixelBuffer(ik::core *this, __CVBuffer *a2)
{
  signed int PixelFormatType;
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v7;
  void *exception;
  __n128 v9;
  std::string v10;
  std::string v11;

  PixelFormatType = CVPixelBufferGetPixelFormatType(this);
  v3 = 4;
  if (PixelFormatType > 1278226533)
  {
    if (PixelFormatType > 1717855599)
    {
      if (PixelFormatType != 1717856627)
      {
        v5 = 1717855600;
LABEL_14:
        if (PixelFormatType != v5)
          goto LABEL_17;
      }
    }
    else if (PixelFormatType != 1278226534)
    {
      v4 = 1380401729;
      goto LABEL_8;
    }
    return 1;
  }
  if (PixelFormatType > 1111970368)
  {
    if (PixelFormatType == 1111970369)
      return v3;
    v5 = 1278226488;
    goto LABEL_14;
  }
  if (PixelFormatType == 32)
    return v3;
  v4 = 1094862674;
LABEL_8:
  if (PixelFormatType != v4)
  {
LABEL_17:
    v7 = PixelFormatType;
    exception = __cxa_allocate_exception(0x10uLL);
    std::to_string(&v10, v7);
    v9 = std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("Unsupported CVPixelBuffer type: ", &v10, &v11);
    MEMORY[0x249544C64](exception, &v11, v9);
    __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  return v3;
}

void sub_245C14900(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  int v21;

  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v21 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v21)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v20);
  goto LABEL_8;
}

ik::core::CorePixelBufferScopeLock *ik::core::CorePixelBufferScopeLock::CorePixelBufferScopeLock(ik::core::CorePixelBufferScopeLock *this, CVPixelBufferRef pixelBuffer, CVPixelBufferLockFlags lockFlags)
{
  std::runtime_error *exception;

  *(_QWORD *)this = &unk_2516E3508;
  *((_QWORD *)this + 1) = pixelBuffer;
  *((_QWORD *)this + 2) = lockFlags;
  if (CVPixelBufferLockBaseAddress(pixelBuffer, lockFlags))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Failed to lock pixel buffer.");
    __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  return this;
}

void sub_245C149D8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void ik::core::CorePixelBufferScopeLock::~CorePixelBufferScopeLock(ik::core::CorePixelBufferScopeLock *this)
{
  ik::core::CorePixelBufferScopeLock::~CorePixelBufferScopeLock(this);
  JUMPOUT(0x249544F58);
}

{
  std::runtime_error *exception;

  *(_QWORD *)this = &unk_2516E3508;
  if (CVPixelBufferUnlockBaseAddress(*((CVPixelBufferRef *)this + 1), *((_QWORD *)this + 2)))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Failed to unlock pixel buffer.");
    __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
}

void sub_245C14A20(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x249544F58](v1, 0x10A1C40AFD1EA57);
  _Unwind_Resume(a1);
}

void sub_245C14AB4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *ik::TensorShape::TensorShape<unsigned long,unsigned long,unsigned long>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char **v8;
  _QWORD *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  _QWORD *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  _QWORD *v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  uint64_t v35;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v8 = (char **)(a1 + 2);
  v9 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 2), 1uLL);
  v10 = (char *)*a1;
  v11 = (char *)a1[1];
  v13 = (char *)&v9[v12];
  *v9 = a2;
  v14 = (char *)(v9 + 1);
  v15 = v9;
  while (v11 != v10)
  {
    v16 = *((_QWORD *)v11 - 1);
    v11 -= 8;
    *--v15 = v16;
  }
  *a1 = v15;
  a1[1] = v14;
  a1[2] = v13;
  if (v10)
  {
    operator delete(v10);
    v13 = *v8;
  }
  a1[1] = v14;
  if (v14 >= v13)
  {
    v18 = (char *)*a1;
    v19 = (uint64_t)&v14[-*a1] >> 3;
    v20 = v19 + 1;
    if ((unint64_t)(v19 + 1) >> 61)
      goto LABEL_39;
    v21 = v13 - v18;
    if (v21 >> 2 > v20)
      v20 = v21 >> 2;
    if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8)
      v22 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v22 = v20;
    if (v22)
    {
      v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)v8, v22);
      v18 = (char *)*a1;
      v14 = (char *)a1[1];
    }
    else
    {
      v23 = 0;
    }
    v24 = &v23[8 * v19];
    v13 = &v23[8 * v22];
    *(_QWORD *)v24 = a3;
    v17 = v24 + 8;
    while (v14 != v18)
    {
      v25 = *((_QWORD *)v14 - 1);
      v14 -= 8;
      *((_QWORD *)v24 - 1) = v25;
      v24 -= 8;
    }
    *a1 = v24;
    a1[1] = v17;
    a1[2] = v13;
    if (v18)
    {
      operator delete(v18);
      v13 = *v8;
    }
  }
  else
  {
    v9[1] = a3;
    v17 = (char *)(v9 + 2);
  }
  a1[1] = v17;
  if (v17 < v13)
  {
    *(_QWORD *)v17 = a4;
    v26 = v17 + 8;
    goto LABEL_38;
  }
  v27 = (char *)*a1;
  v28 = (uint64_t)&v17[-*a1] >> 3;
  v29 = v28 + 1;
  if ((unint64_t)(v28 + 1) >> 61)
LABEL_39:
    std::vector<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>>::__throw_length_error[abi:ne180100]();
  v30 = v13 - v27;
  if (v30 >> 2 > v29)
    v29 = v30 >> 2;
  if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF8)
    v31 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v31 = v29;
  if (v31)
  {
    v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)v8, v31);
    v27 = (char *)*a1;
    v17 = (char *)a1[1];
  }
  else
  {
    v32 = 0;
  }
  v33 = &v32[8 * v28];
  v34 = &v32[8 * v31];
  *(_QWORD *)v33 = a4;
  v26 = v33 + 8;
  while (v17 != v27)
  {
    v35 = *((_QWORD *)v17 - 1);
    v17 -= 8;
    *((_QWORD *)v33 - 1) = v35;
    v33 -= 8;
  }
  *a1 = v33;
  a1[1] = v26;
  a1[2] = v34;
  if (v27)
    operator delete(v27);
LABEL_38:
  a1[1] = v26;
  return a1;
}

void sub_245C14CB8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

ik::Tensor *std::__variant_detail::__assignment<std::__variant_detail::__traits<ik::E5BufferTensor,ik::PixelBufferTensor>>::__assign_alt[abi:ne180100]<1ul,ik::PixelBufferTensor,ik::PixelBufferTensor>(ik::Tensor *a1, uint64_t a2, ik::Tensor *a3)
{
  if (*((_DWORD *)a1 + 14) != 1)
    return std::__variant_detail::__assignment<std::__variant_detail::__traits<ik::E5BufferTensor,ik::PixelBufferTensor>>::__emplace[abi:ne180100]<1ul,ik::PixelBufferTensor>(a1, a3);
  *(_DWORD *)(a2 + 8) = *((_DWORD *)a3 + 2);
  if ((ik::Tensor *)a2 != a3)
    std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long *,unsigned long *>((char *)(a2 + 16), *((char **)a3 + 2), *((_QWORD *)a3 + 3), (uint64_t)(*((_QWORD *)a3 + 3) - *((_QWORD *)a3 + 2)) >> 3);
  return (ik::Tensor *)std::shared_ptr<ik::TensorStorage>::operator=[abi:ne180100]((_QWORD *)(a2 + 40), (uint64_t *)a3 + 5);
}

ik::Tensor *std::__variant_detail::__assignment<std::__variant_detail::__traits<ik::E5BufferTensor,ik::PixelBufferTensor>>::__emplace[abi:ne180100]<1ul,ik::PixelBufferTensor>(ik::Tensor *this, ik::Tensor *a2)
{
  uint64_t v4;
  ik::Tensor *result;
  char v6;

  v4 = *((unsigned int *)this + 14);
  if ((_DWORD)v4 != -1)
    off_2516E49A0[v4]((int)&v6, this);
  *((_DWORD *)this + 14) = -1;
  result = ik::Tensor::Tensor(this, a2);
  *(_QWORD *)this = &unk_2516E3428;
  *((_DWORD *)this + 14) = 1;
  return result;
}

uint64_t ik::core::E5OpImpl::Bind<ik::Tensor>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t InputPorts;
  unsigned __int8 *i;
  char *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unsigned __int8 *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t OutputPorts;
  E5RT::ExecutionStream *v17;
  unsigned __int8 *j;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  char *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unsigned __int8 *v25;
  unsigned __int8 *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  void *v30;
  uint64_t v31;
  void *v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v39;
  void *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  uint64_t v48;
  uint64_t v49[2];
  _BYTE v50[16];
  unsigned __int8 *v51;
  _BYTE v52[16];
  unsigned __int8 *v53;
  __int128 *v54;

  InputPorts = E5RT::ExecutionStreamOperation::GetInputPorts(*(E5RT::ExecutionStreamOperation **)a1);
  std::unordered_map<std::string,std::shared_ptr<E5RT::IOPort>>::unordered_map((uint64_t)v52, InputPorts);
  for (i = v53; i; i = *(unsigned __int8 **)i)
  {
    v9 = *((_QWORD *)i + 5);
    v8 = (char *)*((_QWORD *)i + 6);
    v45 = &unk_2516E3448;
    v46 = v9;
    v47 = (std::__shared_weak_count *)v8;
    if (v8)
    {
      v10 = (unint64_t *)(v8 + 8);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
    v12 = std::__hash_table<std::__hash_value_type<std::string,scml::Config>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,scml::Config>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,scml::Config>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,scml::Config>>>::find<std::string>(a2, i + 16);
    if (!v12)
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    (*(void (**)(_QWORD, void **))(**((_QWORD **)v12 + 10) + 16))(*((_QWORD *)v12 + 10), &v45);
    v13 = v47;
    if (v47)
    {
      p_shared_owners = (unint64_t *)&v47->__shared_owners_;
      do
        v15 = __ldaxr(p_shared_owners);
      while (__stlxr(v15 - 1, p_shared_owners));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
  }
  OutputPorts = E5RT::ExecutionStreamOperation::GetOutputPorts(*(E5RT::ExecutionStreamOperation **)a1);
  std::unordered_map<std::string,std::shared_ptr<E5RT::IOPort>>::unordered_map((uint64_t)v50, OutputPorts);
  std::__hash_table<std::__hash_value_type<std::string,ik::E5BufferTensor>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ik::E5BufferTensor>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ik::E5BufferTensor>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ik::E5BufferTensor>>>::clear(a1 + 24);
  for (j = v51; j; j = *(unsigned __int8 **)j)
  {
    ik::Tensor::Tensor((ik::Tensor *)&v45);
    v45 = &unk_2516E33A0;
    if (std::__hash_table<std::__hash_value_type<std::string,scml::Config>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,scml::Config>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,scml::Config>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,scml::Config>>>::find<std::string>(a3, j + 16))
    {
      v19 = std::__hash_table<std::__hash_value_type<std::string,scml::Config>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,scml::Config>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,scml::Config>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,scml::Config>>>::find<std::string>(a3, j + 16);
      v20 = v19;
      if (!v19)
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      LODWORD(v46) = *((_DWORD *)v19 + 12);
      if (&v45 != (void **)(v19 + 40))
        std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long *,unsigned long *>((char *)&v47, *((char **)v19 + 7), *((_QWORD *)v19 + 8), (uint64_t)(*((_QWORD *)v19 + 8) - *((_QWORD *)v19 + 7)) >> 3);
      std::shared_ptr<ik::TensorStorage>::operator=[abi:ne180100](v49, (uint64_t *)v20 + 10);
    }
    else
    {
      ik::core::CreateBufferTensor(*((ik::core **)j + 5), &v40);
      LODWORD(v46) = v41;
      std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long *,unsigned long *>((char *)&v47, v42, v43, (v43 - (uint64_t)v42) >> 3);
      std::shared_ptr<ik::TensorStorage>::operator=[abi:ne180100](v49, &v44);
      ik::Tensor::~Tensor((ik::Tensor *)&v40);
    }
    v22 = *((_QWORD *)j + 5);
    v21 = (char *)*((_QWORD *)j + 6);
    v40 = &unk_2516E3448;
    v41 = v22;
    v42 = v21;
    if (v21)
    {
      v23 = (unint64_t *)(v21 + 8);
      do
        v24 = __ldxr(v23);
      while (__stxr(v24 + 1, v23));
    }
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v49[0] + 16))(v49[0], &v40);
    v54 = (__int128 *)(j + 16);
    v25 = std::__hash_table<std::__hash_value_type<std::string,ik::E5BufferTensor>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ik::E5BufferTensor>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ik::E5BufferTensor>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ik::E5BufferTensor>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 24, j + 16, (uint64_t)&std::piecewise_construct, &v54);
    v26 = v25;
    *((_DWORD *)v25 + 12) = v46;
    if (v25 + 40 != (unsigned __int8 *)&v45)
      std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long *,unsigned long *>((char *)v25 + 56, (char *)v47, v48, (v48 - (uint64_t)v47) >> 3);
    std::shared_ptr<ik::TensorStorage>::operator=[abi:ne180100]((_QWORD *)v26 + 10, v49);
    v27 = (std::__shared_weak_count *)v42;
    if (v42)
    {
      v28 = (unint64_t *)(v42 + 8);
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
    ik::Tensor::~Tensor((ik::Tensor *)&v45);
  }
  E5RT::ExecutionStream::CreateExecutionStream(v17);
  v30 = v45;
  v45 = 0;
  v31 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v30;
  if (v31)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
    v32 = v45;
    v45 = 0;
    if (v32)
      (*(void (**)(void *))(*(_QWORD *)v32 + 8))(v32);
  }
  v33 = *(std::__shared_weak_count **)(a1 + 8);
  v39 = v33;
  if (v33)
  {
    v34 = (unint64_t *)&v33->__shared_owners_;
    do
      v35 = __ldxr(v34);
    while (__stxr(v35 + 1, v34));
  }
  E5RT::ExecutionStream::EncodeOperation();
  if (v39)
  {
    v36 = (unint64_t *)&v39->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::~__hash_table((uint64_t)v50);
  return std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::~__hash_table((uint64_t)v52);
}

void sub_245C15170(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  uint64_t v28;

  std::shared_ptr<scml::Config::PathInfo>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::~__hash_table((uint64_t)&a28);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::~__hash_table(v28 - 144);
  _Unwind_Resume(a1);
}

void ik::core::E5CoreBinder::~E5CoreBinder(ik::core::E5CoreBinder *this)
{
  std::shared_ptr<scml::Config::PathInfo>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  std::shared_ptr<scml::Config::PathInfo>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
  JUMPOUT(0x249544F58);
}

uint64_t std::unordered_map<std::string,std::shared_ptr<E5RT::IOPort>>::unordered_map(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1, *(_QWORD *)(a2 + 8));
  for (i = *(unsigned __int8 **)(a2 + 16); i; i = *(unsigned __int8 **)i)
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<E5RT::IOPort>> const&>(a1, i + 16, (__int128 *)i + 1);
  return a1;
}

void sub_245C15278(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<E5RT::IOPort>> const&>(uint64_t a1, unsigned __int8 *a2, __int128 *a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD v25[3];

  v7 = (_QWORD *)(a1 + 24);
  v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::__construct_node_hash<std::pair<std::string const,std::shared_ptr<E5RT::IOPort>> const&>(a1, v9, a3, (uint64_t)v25);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *(_QWORD *)v25[0] = *v22;
    *v22 = v25[0];
  }
  else
  {
    *(_QWORD *)v25[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v25[0])
    {
      v23 = *(_QWORD *)(*(_QWORD *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10)
          v23 %= v10;
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v25[0];
    }
  }
  i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*v7;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,void *>>>>::reset[abi:ne180100]((uint64_t)v25, 0);
  return i;
}

void sub_245C154F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

std::string *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::__construct_node_hash<std::pair<std::string const,std::shared_ptr<E5RT::IOPort>> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *v8;
  std::string *result;

  v7 = a1 + 16;
  v8 = (char *)operator new(0x38uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = a2;
  result = std::pair<std::string const,std::shared_ptr<E5RT::IOPort>>::pair[abi:ne180100]((std::string *)(v8 + 16), a3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_245C1556C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,std::shared_ptr<E5RT::IOPort>>::pair[abi:ne180100](std::string *this, __int128 *a2)
{
  __int128 v4;
  std::string::size_type v5;
  unint64_t *v6;
  unint64_t v7;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  v5 = *((_QWORD *)a2 + 4);
  this[1].__r_.__value_.__r.__words[0] = *((_QWORD *)a2 + 3);
  this[1].__r_.__value_.__l.__size_ = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  return this;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<E5RT::IOPort>>,0>((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<E5RT::IOPort>>,0>(uint64_t a1)
{
  std::shared_ptr<scml::Config::PathInfo>::~shared_ptr[abi:ne180100](a1 + 24);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<E5RT::IOPort>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void ik::core::E5CoreBinder::Bind()
{
  std::runtime_error *exception;

  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "E5RT does not support vImage_Bufer backed tensors.");
  __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
}

{
  std::runtime_error *exception;

  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "E5RT does not support espresso_buffer_t backed tensors.");
  __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
}

void sub_245C15758(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t ik::core::E5CoreBinder::Bind(ik::core::E5CoreBinder *this, CVPixelBufferRef pixelBuffer)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count_vtbl *v6;
  std::__shared_weak_count *v7;

  CVPixelBufferGetIOSurface(pixelBuffer);
  E5RT::SurfaceObject::CreateSurfaceFromHandle<__IOSurface *>();
  if (v6)
  {
    v2 = (std::__shared_weak_count *)operator new();
    v2->__vftable = (std::__shared_weak_count_vtbl *)&unk_2516E44A8;
    v2->__shared_owners_ = 0;
    v2->__shared_weak_owners_ = 0;
    v2[1].__vftable = v6;
  }
  else
  {
    v2 = 0;
  }
  v7 = v2;
  E5RT::IOPort::BindMemoryObject();
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return 0;
}

void sub_245C15848(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void sub_245C158B8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void ik::core::E5CoreBinder::Bind(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;

  v2 = *(std::__shared_weak_count **)(a2 + 8);
  v7 = v2;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  E5RT::IOPort::BindMemoryObject();
  if (v7)
  {
    v5 = (unint64_t *)&v7->__shared_owners_;
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_245C15950(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<scml::Config::PathInfo>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<E5RT::SurfaceObject  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x249544F58);
}

uint64_t std::__shared_ptr_pointer<E5RT::SurfaceObject  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<E5RT::SurfaceObject  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
    return a1 + 24;
  else
    return 0;
}

void std::__hash_table<std::__hash_value_type<std::string,ik::E5BufferTensor>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ik::E5BufferTensor>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ik::E5BufferTensor>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ik::E5BufferTensor>>>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  if (*(_QWORD *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<std::string,ik::E5BufferTensor>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ik::E5BufferTensor>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ik::E5BufferTensor>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ik::E5BufferTensor>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      for (i = 0; i != v2; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
}

void std::__hash_table<std::__hash_value_type<std::string,ik::E5BufferTensor>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ik::E5BufferTensor>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ik::E5BufferTensor>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ik::E5BufferTensor>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,ik::E5BufferTensor>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,ik::E5BufferTensor>,0>(uint64_t a1)
{
  ik::Tensor::~Tensor((ik::Tensor *)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,ik::E5BufferTensor>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ik::E5BufferTensor>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ik::E5BufferTensor>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ik::E5BufferTensor>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 *i;
  unint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD v26[3];

  v8 = (_QWORD *)(a1 + 24);
  v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(unsigned __int8 **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,ik::E5BufferTensor>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ik::E5BufferTensor>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ik::E5BufferTensor>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ik::E5BufferTensor>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1, v22);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *(_QWORD *)v26[0] = *v23;
    *v23 = v26[0];
  }
  else
  {
    *(_QWORD *)v26[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v26[0])
    {
      v24 = *(_QWORD *)(*(_QWORD *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11)
          v24 %= v11;
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v26[0];
    }
  }
  i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,ik::E5BufferTensor>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,ik::E5BufferTensor>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return i;
}

void sub_245C15D30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,ik::E5BufferTensor>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,ik::E5BufferTensor>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

std::string *std::__hash_table<std::__hash_value_type<std::string,ik::E5BufferTensor>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ik::E5BufferTensor>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ik::E5BufferTensor>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ik::E5BufferTensor>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *v8;
  std::string *result;

  v7 = a1 + 16;
  v8 = (char *)operator new(0x60uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = a2;
  result = std::pair<std::string const,ik::E5BufferTensor>::pair[abi:ne180100]<std::string const&>((std::string *)(v8 + 16), *a3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_245C15D9C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,ik::E5BufferTensor>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,ik::E5BufferTensor>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,ik::E5BufferTensor>::pair[abi:ne180100]<std::string const&>(std::string *this, __int128 *a2)
{
  __int128 v3;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v3 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
  }
  ik::Tensor::Tensor((ik::Tensor *)&this[1]);
  this[1].__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_2516E33A0;
  return this;
}

void sub_245C15E18(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,ik::E5BufferTensor>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,ik::E5BufferTensor>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,ik::E5BufferTensor>,0>((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

BOOL std::string::ends_with[abi:ne180100](uint64_t *a1, char *__s)
{
  size_t v4;
  uint64_t v5;
  uint64_t *v6;
  _QWORD v8[2];

  v4 = strlen(__s);
  if (*((char *)a1 + 23) < 0)
  {
    v6 = a1;
    a1 = (uint64_t *)*a1;
    v5 = v6[1];
  }
  else
  {
    v5 = *((unsigned __int8 *)a1 + 23);
  }
  v8[0] = a1;
  v8[1] = v5;
  return std::string_view::ends_with[abi:ne180100](v8, __s, v4);
}

std::__fs::filesystem::path *std::__fs::filesystem::operator/[abi:ne180100]@<X0>(std::__fs::filesystem::path *this@<X1>, uint64_t a2@<X0>, std::__fs::filesystem::path *a3@<X8>)
{
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&a3->__pn_, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&a3->__pn_.__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    a3->__pn_.__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
  }
  return std::__fs::filesystem::path::operator/=[abi:ne180100](a3, this);
}

void sub_245C15F24(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

double std::__fs::filesystem::path::parent_path[abi:ne180100]@<D0>(const std::__fs::filesystem::path *a1@<X0>, uint64_t a2@<X8>)
{
  std::__fs::filesystem::path::__string_view v3;
  __int128 *p_dst;
  std::basic_string_view<_CharT, _Traits>::size_type v5;
  std::basic_string_view<_CharT, _Traits>::size_type v6;
  double result;
  __int128 __dst;
  unint64_t v9;

  v3 = std::__fs::filesystem::path::__parent_path(a1);
  if (v3.__size_ >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v3.__size_ >= 0x17)
  {
    v5 = (v3.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3.__size_ | 7) != 0x17)
      v5 = v3.__size_ | 7;
    v6 = v5 + 1;
    p_dst = (__int128 *)operator new(v5 + 1);
    *((_QWORD *)&__dst + 1) = v3.__size_;
    v9 = v6 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
  }
  else
  {
    HIBYTE(v9) = v3.__size_;
    p_dst = &__dst;
    if (!v3.__size_)
      goto LABEL_9;
  }
  memmove(p_dst, v3.__data_, v3.__size_);
LABEL_9:
  *((_BYTE *)p_dst + v3.__size_) = 0;
  result = *(double *)&__dst;
  *(_OWORD *)a2 = __dst;
  *(_QWORD *)(a2 + 16) = v9;
  return result;
}

BOOL std::string_view::ends_with[abi:ne180100](_QWORD *a1, void *__s2, size_t a3)
{
  size_t v3;

  v3 = a1[1];
  return v3 >= a3
      && std::string_view::compare[abi:ne180100](a1, v3 - a3, 0xFFFFFFFFFFFFFFFFLL, __s2, a3) == 0;
}

uint64_t std::string_view::compare[abi:ne180100](_QWORD *a1, unint64_t a2, size_t a3, void *__s2, size_t a5)
{
  unint64_t v5;
  BOOL v6;
  size_t v7;
  const void *v9;
  size_t v10;
  size_t v11;
  uint64_t result;
  unsigned int v13;

  v5 = a1[1];
  v6 = v5 >= a2;
  v7 = v5 - a2;
  if (!v6)
    std::__throw_out_of_range[abi:ne180100]("string_view::substr");
  v9 = (const void *)(*a1 + a2);
  if (v7 >= a3)
    v10 = a3;
  else
    v10 = v7;
  if (a5 >= v10)
    v11 = v10;
  else
    v11 = a5;
  LODWORD(result) = memcmp(v9, __s2, v11);
  if (v10 < a5)
    v13 = -1;
  else
    v13 = 1;
  if (v10 == a5)
    v13 = 0;
  if ((_DWORD)result)
    return result;
  else
    return v13;
}

std::__fs::filesystem::path *std::__fs::filesystem::path::operator/=[abi:ne180100](std::__fs::filesystem::path *a1, std::__fs::filesystem::path *this)
{
  int v4;
  std::__fs::filesystem::path *v5;
  std::string::size_type size;

  if (std::__fs::filesystem::path::__root_directory(this).__size_)
  {
    std::string::operator=(&a1->__pn_, &this->__pn_);
  }
  else
  {
    if (std::__fs::filesystem::path::__filename(a1).__size_)
      std::string::push_back(&a1->__pn_, 47);
    v4 = SHIBYTE(this->__pn_.__r_.__value_.__r.__words[2]);
    if (v4 >= 0)
      v5 = this;
    else
      v5 = (std::__fs::filesystem::path *)this->__pn_.__r_.__value_.__r.__words[0];
    if (v4 >= 0)
      size = HIBYTE(this->__pn_.__r_.__value_.__r.__words[2]);
    else
      size = this->__pn_.__r_.__value_.__l.__size_;
    std::string::append(&a1->__pn_, (const std::string::value_type *)v5, size);
  }
  return a1;
}

std::string *std::__fs::filesystem::path::path[abi:ne180100]<std::string_view,void>(std::string *a1, uint64_t a2)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  std::string::append[abi:ne180100]<char const*,0>(a1, *(char **)a2, (char *)(*(_QWORD *)a2 + *(_QWORD *)(a2 + 8)));
  return a1;
}

void sub_245C16158(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *std::string::append[abi:ne180100]<char const*,0>(std::string *this, char *a2, char *a3)
{
  char *v4;
  unint64_t v6;
  unint64_t v7;
  std::string::size_type size;
  std::string::size_type v9;
  std::string *v10;
  unint64_t v11;
  void **v12;
  std::string::size_type v13;
  std::string *v14;
  _BYTE *i;
  char v16;
  std::string::size_type v17;
  void *__p[2];
  unsigned __int8 v20;

  v4 = a2;
  LODWORD(v6) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  v7 = a3 - a2;
  if ((v6 & 0x80000000) != 0)
  {
    if (a3 == a2)
      return this;
    size = this->__r_.__value_.__l.__size_;
    v11 = this->__r_.__value_.__r.__words[2];
    v9 = (v11 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    v10 = (std::string *)this->__r_.__value_.__r.__words[0];
    v6 = HIBYTE(v11);
  }
  else
  {
    if (a3 == a2)
      return this;
    size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    v9 = 22;
    v10 = this;
  }
  if (v10 > (std::string *)v4 || (char *)&v10->__r_.__value_.__l.__data_ + size + 1 <= v4)
  {
    if (v9 - size < v7)
    {
      std::string::__grow_by(this, v9, size - v9 + v7, size, size, 0, 0);
      this->__r_.__value_.__l.__size_ = size;
      LOBYTE(v6) = *((_BYTE *)&this->__r_.__value_.__s + 23);
    }
    v14 = this;
    if ((v6 & 0x80) != 0)
      v14 = (std::string *)this->__r_.__value_.__r.__words[0];
    for (i = (char *)v14 + size; v4 != a3; ++i)
    {
      v16 = *v4++;
      *i = v16;
    }
    *i = 0;
    v17 = v7 + size;
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
      this->__r_.__value_.__l.__size_ = v17;
    else
      *((_BYTE *)&this->__r_.__value_.__s + 23) = v17 & 0x7F;
  }
  else
  {
    std::string::__init_with_size[abi:ne180100]<char const*,char const*>(__p, v4, a3, v7);
    if ((v20 & 0x80u) == 0)
      v12 = __p;
    else
      v12 = (void **)__p[0];
    if ((v20 & 0x80u) == 0)
      v13 = v20;
    else
      v13 = (std::string::size_type)__p[1];
    std::string::append(this, (const std::string::value_type *)v12, v13);
    if ((char)v20 < 0)
      operator delete(__p[0]);
  }
  return this;
}

void sub_245C162CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::string::__init_with_size[abi:ne180100]<char const*,char const*>(_QWORD *result, char *a2, char *a3, unint64_t a4)
{
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v4 = result;
  if (a4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (a4 > 0x16)
  {
    v8 = (a4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a4 | 7) != 0x17)
      v8 = a4 | 7;
    v9 = v8 + 1;
    result = operator new(v8 + 1);
    v4[1] = a4;
    v4[2] = v9 | 0x8000000000000000;
    *v4 = result;
    v4 = result;
  }
  else
  {
    *((_BYTE *)result + 23) = a4;
  }
  while (a2 != a3)
  {
    v10 = *a2++;
    *(_BYTE *)v4 = v10;
    v4 = (_QWORD *)((char *)v4 + 1);
  }
  *(_BYTE *)v4 = 0;
  return result;
}

void std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  __int128 v4;

  v3 = *(_QWORD *)(a1 + 8);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(*(std::string **)(a1 + 8), *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    *(_QWORD *)(v3 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v3 = v4;
  }
  *(_QWORD *)(a1 + 8) = v3 + 24;
}

void sub_245C163E0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::string>::__push_back_slow_path<std::string const&>(uint64_t *a1, __int128 *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  std::string *v10;
  std::__split_buffer<std::string>::pointer end;
  __int128 v12;
  uint64_t v13;
  std::__split_buffer<std::string> __v;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 2);
  if (v9)
    v10 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v7, v9);
  else
    v10 = 0;
  end = v10 + v4;
  __v.__first_ = v10;
  __v.__begin_ = end;
  __v.__end_ = end;
  __v.__end_cap_.__value_ = &v10[v9];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(end, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    end = __v.__end_;
  }
  else
  {
    v12 = *a2;
    end->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&end->__r_.__value_.__l.__data_ = v12;
  }
  __v.__end_ = end + 1;
  std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a1, &__v);
  v13 = a1[1];
  std::__split_buffer<std::string>::~__split_buffer(&__v);
  return v13;
}

void sub_245C164F4(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a10);
  _Unwind_Resume(a1);
}

void std::vector<std::string>::__swap_out_circular_buffer(std::vector<std::string> *this, std::__split_buffer<std::string> *__v)
{
  std::string *v4;
  std::string *begin;
  std::string *end;
  std::string *value;

  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>((uint64_t)&this->__end_cap_, (uint64_t)this->__end_, (uint64_t)this->__end_, (uint64_t)this->__begin_, (uint64_t)this->__begin_, (uint64_t)__v->__begin_, (uint64_t)__v->__begin_);
  __v->__begin_ = v4;
  begin = this->__begin_;
  this->__begin_ = v4;
  __v->__begin_ = begin;
  end = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = end;
  value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(24 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  __int128 v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 != a5)
  {
    v9 = a7;
    do
    {
      v10 = *(_OWORD *)(a3 - 24);
      *(_QWORD *)(v9 - 8) = *(_QWORD *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v10;
      v9 -= 24;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 8) = 0;
      *(_QWORD *)(a3 - 24) = 0;
      v7 -= 24;
      a3 -= 24;
    }
    while (a3 != a5);
    *((_QWORD *)&v15 + 1) = v9;
  }
  v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return a6;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    v1 += 24;
  }
}

void std::__split_buffer<std::string>::~__split_buffer(std::__split_buffer<std::string> *this)
{
  std::__split_buffer<std::string>::__destruct_at_end[abi:ne180100]((uint64_t)this, (void **)&this->__begin_->__r_.__value_.__l.__data_);
  if (this->__first_)
    operator delete(this->__first_);
}

void std::__split_buffer<std::string>::__destruct_at_end[abi:ne180100](uint64_t a1, void **a2)
{
  void **v2;
  void **v5;

  v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      v5 = v2 - 3;
      *(_QWORD *)(a1 + 16) = v2 - 3;
      if (*((char *)v2 - 1) < 0)
      {
        operator delete(*v5);
        v5 = *(void ***)(a1 + 16);
      }
      v2 = v5;
    }
    while (v5 != a2);
  }
}

uint64_t ik::Tensor::Data<float>(uint64_t a1)
{
  std::runtime_error *exception;

  if (*(_DWORD *)(a1 + 8) != 4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Incorrect data type requested.");
    __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 24))(*(_QWORD *)(a1 + 40));
}

void sub_245C167C4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *ik::ArrayView<float,-1>::ArrayView(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD **v4;
  _QWORD *v5;
  _QWORD *v6;
  BOOL v7;
  std::runtime_error *exception;

  *a1 = &unk_2516E3548;
  a1[1] = a2;
  a1[2] = 0;
  v4 = (_QWORD **)(a1 + 2);
  a1[3] = 0;
  a1[4] = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(a1 + 2, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3);
  v5 = (_QWORD *)a1[3];
  v6 = *v4;
  v7 = v5 == *v4;
  a1[5] = v5 - *v4;
  if (!v7)
  {
    do
    {
      if ((*v6 & 3) != 0)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Inconsistent stride encountered.");
        __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
      }
      *v6++ >>= 2;
    }
    while (v6 != v5);
  }
  return a1;
}

void sub_245C16898(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 24) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void ik::MutableArrayView<float,-1>::~MutableArrayView(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_2516E3548;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x249544F58);
}

_QWORD *ik::ArrayView<float,-1>::~ArrayView(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_2516E3548;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void ik::ArrayView<float,-1>::~ArrayView(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_2516E3548;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x249544F58);
}

uint64_t ik::core::E5OpImpl::Run@<X0>(ik::core::E5OpImpl *this@<X0>, uint64_t a2@<X8>)
{
  E5RT::ExecutionStream *v3;
  std::runtime_error *exception;

  v3 = (E5RT::ExecutionStream *)*((_QWORD *)this + 2);
  if (!v3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Run invoked before binding tensors.");
    __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  E5RT::ExecutionStream::ExecuteStreamSync(v3);
  return std::unordered_map<std::string,ik::E5BufferTensor>::unordered_map(a2, (uint64_t)this + 24);
}

void sub_245C16A08(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<std::string,ik::E5BufferTensor>::unordered_map(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1, *(_QWORD *)(a2 + 8));
  for (i = *(unsigned __int8 **)(a2 + 16); i; i = *(unsigned __int8 **)i)
    std::__hash_table<std::__hash_value_type<std::string,ik::E5BufferTensor>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ik::E5BufferTensor>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ik::E5BufferTensor>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ik::E5BufferTensor>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,ik::E5BufferTensor> const&>(a1, i + 16, (__int128 *)i + 1);
  return a1;
}

void sub_245C16A78(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<std::string,ik::E5BufferTensor>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ik::E5BufferTensor>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ik::E5BufferTensor>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ik::E5BufferTensor>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,ik::E5BufferTensor>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ik::E5BufferTensor>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ik::E5BufferTensor>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ik::E5BufferTensor>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,ik::E5BufferTensor> const&>(uint64_t a1, unsigned __int8 *a2, __int128 *a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD v25[3];

  v7 = (_QWORD *)(a1 + 24);
  v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,ik::E5BufferTensor>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ik::E5BufferTensor>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ik::E5BufferTensor>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ik::E5BufferTensor>>>::__construct_node_hash<std::pair<std::string const,ik::E5BufferTensor> const&>(a1, v9, a3, (uint64_t)v25);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *(_QWORD *)v25[0] = *v22;
    *v22 = v25[0];
  }
  else
  {
    *(_QWORD *)v25[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v25[0])
    {
      v23 = *(_QWORD *)(*(_QWORD *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10)
          v23 %= v10;
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v25[0];
    }
  }
  i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*v7;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,ik::E5BufferTensor>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,ik::E5BufferTensor>,void *>>>>::reset[abi:ne180100]((uint64_t)v25, 0);
  return i;
}

void sub_245C16CF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,ik::E5BufferTensor>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,ik::E5BufferTensor>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

std::string *std::__hash_table<std::__hash_value_type<std::string,ik::E5BufferTensor>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ik::E5BufferTensor>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ik::E5BufferTensor>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ik::E5BufferTensor>>>::__construct_node_hash<std::pair<std::string const,ik::E5BufferTensor> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *v8;
  std::string *result;

  v7 = a1 + 16;
  v8 = (char *)operator new(0x60uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = a2;
  result = std::pair<std::string const,ik::E5BufferTensor>::pair[abi:ne180100]((std::string *)(v8 + 16), a3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_245C16D6C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,ik::E5BufferTensor>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,ik::E5BufferTensor>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,ik::E5BufferTensor>::pair[abi:ne180100](std::string *this, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  ik::Tensor::Tensor((ik::Tensor *)&this[1], (const ik::Tensor *)((char *)a2 + 24));
  this[1].__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_2516E33A0;
  return this;
}

void sub_245C16DEC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,ik::E5BufferTensor>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ik::E5BufferTensor>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ik::E5BufferTensor>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ik::E5BufferTensor>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<std::string,ik::E5BufferTensor>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ik::E5BufferTensor>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ik::E5BufferTensor>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ik::E5BufferTensor>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

std::string *std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(std::string *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  std::string *v6;

  if (a4)
  {
    v6 = result;
    std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_245C16EA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<std::string>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    std::vector<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>(uint64_t a1, __int128 *a2, __int128 *a3, std::string *this)
{
  std::string *v4;
  __int128 *v6;
  __int128 v7;
  _QWORD v9[3];
  char v10;
  std::string *v11;
  std::string *v12;

  v4 = this;
  v11 = this;
  v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
        v4 = v12;
      }
      else
      {
        v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
      }
      v6 = (__int128 *)((char *)v6 + 24);
      v12 = ++v4;
    }
    while (v6 != a3);
  }
  v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_245C16FBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = **(_QWORD **)(a1 + 16);
  v2 = **(_QWORD **)(a1 + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 - 1) < 0)
      operator delete(*(void **)(v1 - 24));
    v1 -= 24;
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,ik::Tensor>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ik::Tensor>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ik::Tensor>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ik::Tensor>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 *i;
  unint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD v26[3];

  v8 = (_QWORD *)(a1 + 24);
  v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(unsigned __int8 **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,ik::Tensor>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ik::Tensor>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ik::Tensor>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ik::Tensor>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1, v22);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *(_QWORD *)v26[0] = *v23;
    *v23 = v26[0];
  }
  else
  {
    *(_QWORD *)v26[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v26[0])
    {
      v24 = *(_QWORD *)(*(_QWORD *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11)
          v24 %= v11;
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v26[0];
    }
  }
  i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,ik::E5BufferTensor>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,ik::E5BufferTensor>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return i;
}

void sub_245C172C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,ik::E5BufferTensor>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,ik::E5BufferTensor>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

std::string *std::__hash_table<std::__hash_value_type<std::string,ik::Tensor>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ik::Tensor>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ik::Tensor>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ik::Tensor>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *v8;
  std::string *result;

  v7 = a1 + 16;
  v8 = (char *)operator new(0x60uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = a2;
  result = std::pair<std::string const,ik::Tensor>::pair[abi:ne180100]<std::string const&>((std::string *)(v8 + 16), *a3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_245C17334(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,ik::E5BufferTensor>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,ik::E5BufferTensor>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,ik::Tensor>::pair[abi:ne180100]<std::string const&>(std::string *this, __int128 *a2)
{
  __int128 v3;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v3 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
  }
  ik::Tensor::Tensor((ik::Tensor *)&this[1]);
  return this;
}

void sub_245C173A0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_245C17468(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  if (__p)
    operator delete(__p);
  std::shared_ptr<scml::Config::PathInfo>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::variant<ik::E5BufferTensor,ik::PixelBufferTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<ik::E5BufferTensor,ik::PixelBufferTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<ik::E5BufferTensor,ik::PixelBufferTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<ik::E5BufferTensor,ik::PixelBufferTensor>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<std::string,std::variant<ik::E5BufferTensor,ik::PixelBufferTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<ik::E5BufferTensor,ik::PixelBufferTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<ik::E5BufferTensor,ik::PixelBufferTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<ik::E5BufferTensor,ik::PixelBufferTensor>>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,std::variant<ik::E5BufferTensor,ik::PixelBufferTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<ik::E5BufferTensor,ik::PixelBufferTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<ik::E5BufferTensor,ik::PixelBufferTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<ik::E5BufferTensor,ik::PixelBufferTensor>>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::variant<ik::E5BufferTensor,ik::PixelBufferTensor>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

ik::core::E5OpImpl ***std::unique_ptr<ik::E5Op>::reset[abi:ne180100](ik::core::E5OpImpl ***result, ik::core::E5OpImpl **a2)
{
  ik::core::E5OpImpl **v2;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    std::unique_ptr<ik::core::E5OpImpl>::reset[abi:ne180100](v2, 0);
    JUMPOUT(0x249544F58);
  }
  return result;
}

ik::core::E5OpImpl *std::unique_ptr<ik::core::E5OpImpl>::reset[abi:ne180100](ik::core::E5OpImpl **a1, ik::core::E5OpImpl *a2)
{
  ik::core::E5OpImpl *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    ik::core::E5OpImpl::~E5OpImpl(result);
    JUMPOUT(0x249544F58);
  }
  return result;
}

void ik::core::E5OpImpl::~E5OpImpl(ik::core::E5OpImpl *this)
{
  uint64_t v2;

  std::__hash_table<std::__hash_value_type<std::string,ik::E5BufferTensor>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ik::E5BufferTensor>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ik::E5BufferTensor>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ik::E5BufferTensor>>>::~__hash_table((uint64_t)this + 24);
  v2 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  std::shared_ptr<scml::Config::PathInfo>::~shared_ptr[abi:ne180100]((uint64_t)this);
}

void std::__hash_table<std::__hash_value_type<std::string,ik::Tensor>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ik::Tensor>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ik::Tensor>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ik::Tensor>>>::__move_assign(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;

  std::__hash_table<std::__hash_value_type<std::string,ik::E5BufferTensor>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ik::E5BufferTensor>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ik::E5BufferTensor>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ik::E5BufferTensor>>>::clear(a1);
  v4 = *a2;
  *a2 = 0;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = v4;
  if (v5)
    operator delete(v5);
  v8 = a2[2];
  v7 = a2 + 2;
  v6 = v8;
  v9 = *(v7 - 1);
  *(_QWORD *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 8) = v9;
  *(v7 - 1) = 0;
  v10 = v7[1];
  *(_QWORD *)(a1 + 24) = v10;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v7 + 4);
  if (v10)
  {
    v11 = *(_QWORD *)(v6 + 8);
    v12 = *(_QWORD *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
        v11 %= v12;
    }
    else
    {
      v11 &= v12 - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v11) = a1 + 16;
    *v7 = 0;
    v7[1] = 0;
  }
}

uint64_t scml::scml_impl::strCat<char const(&)[27],std::string_view &,char const(&)[3],char const*>(_QWORD *a1, char *__s, uint64_t *a3, char *a4, const char **a5)
{
  size_t v10;

  v10 = strlen(__s);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)__s, v10);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, *a3, a3[1]);
  return scml::scml_impl::strCat<char const(&)[3],char const*>(a1, a4, a5);
}

uint64_t scml::scml_impl::strCat<char const(&)[3],char const*>(_QWORD *a1, char *__s, const char **a3)
{
  size_t v6;

  v6 = strlen(__s);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)__s, v6);
  return scml::scml_impl::strCat<char const*>(a1, a3);
}

uint64_t scml::scml_impl::strCat<char const*>(_QWORD *a1, const char **a2)
{
  const char *v3;
  size_t v4;

  v3 = *a2;
  v4 = strlen(*a2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v3, v4);
  return scml::scml_impl::strCat<>(a1);
}

float scml::Config::as<float>(_DWORD *a1)
{
  int v1;
  void *exception;

  v1 = a1[10];
  if (v1 == 1)
    return (float)*(uint64_t *)a1;
  if (v1 != 2)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    scml::Config::error((uint64_t)a1, (uint64_t)"not a float", 11, (uint64_t)exception);
    __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  return *(double *)a1;
}

void sub_245C177E8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t scml::scml_impl::strCat<char const(&)[16],unsigned long,char const(&)[12],unsigned long &>(_QWORD *a1, char *__s, uint64_t a3, char *a4)
{
  size_t v7;

  v7 = strlen(__s);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)__s, v7);
  std::ostream::operator<<();
  return scml::scml_impl::strCat<char const(&)[12],unsigned long &>(a1, a4);
}

uint64_t scml::scml_impl::strCat<char const(&)[12],unsigned long &>(_QWORD *a1, char *__s)
{
  size_t v4;

  v4 = strlen(__s);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)__s, v4);
  std::ostream::operator<<();
  return scml::scml_impl::strCat<>(a1);
}

uint64_t ik::ArrayView<float,-1>::IndexOf<int,unsigned long>(uint64_t a1, int *a2, _QWORD *a3)
{
  std::runtime_error *exception;

  if (*(_QWORD *)(a1 + 40) != 2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Invalid number of indices provided.");
    __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  return **(_QWORD **)(a1 + 16) * *a2 + *a3 * *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
}

void sub_245C17928(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

scml::ClipEmbeddingClassifier::Impl *std::unique_ptr<scml::ClipEmbeddingClassifier::Impl>::reset[abi:ne180100](scml::ClipEmbeddingClassifier::Impl **a1, scml::ClipEmbeddingClassifier::Impl *a2)
{
  scml::ClipEmbeddingClassifier::Impl *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    scml::ClipEmbeddingClassifier::Impl::~Impl(result);
    JUMPOUT(0x249544F58);
  }
  return result;
}

void scml::ClipEmbeddingClassifier::Impl::~Impl(scml::ClipEmbeddingClassifier::Impl *this)
{
  void *v2;
  void **v3;

  if (*((char *)this + 263) < 0)
    operator delete(*((void **)this + 30));
  std::__hash_table<std::__hash_value_type<std::string,ik::E5BufferTensor>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ik::E5BufferTensor>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ik::E5BufferTensor>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ik::E5BufferTensor>>>::~__hash_table((uint64_t)this + 192);
  std::unique_ptr<ik::E5Op>::reset[abi:ne180100]((ik::core::E5OpImpl ***)this + 23, 0);
  if (*((char *)this + 183) < 0)
    operator delete(*((void **)this + 20));
  if (*((char *)this + 159) < 0)
    operator delete(*((void **)this + 17));
  if (*((char *)this + 135) < 0)
    operator delete(*((void **)this + 14));
  v2 = (void *)*((_QWORD *)this + 11);
  if (v2)
  {
    *((_QWORD *)this + 12) = v2;
    operator delete(v2);
  }
  v3 = (void **)((char *)this + 64);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  std::mutex::~mutex((std::mutex *)this);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,ik::E5BufferTensor>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ik::E5BufferTensor>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ik::E5BufferTensor>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ik::E5BufferTensor>>>::find<std::string>(_QWORD *a1, unsigned __int8 *a2)
{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned __int8 **v10;
  unsigned __int8 *v11;
  uint64_t v12;
  unint64_t v13;

  v4 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(a1 + 3), (uint64_t)a2);
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v9 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  v11 = *v10;
  if (*v10)
  {
    v12 = (uint64_t)(a1 + 4);
    do
    {
      v13 = *((_QWORD *)v11 + 1);
      if (v13 == v6)
      {
        if ((std::equal_to<std::string>::operator()[abi:ne180100](v12, v11 + 16, a2) & 1) != 0)
          return v11;
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(_QWORD *)&v5)
            v13 %= *(_QWORD *)&v5;
        }
        else
        {
          v13 &= *(_QWORD *)&v5 - 1;
        }
        if (v13 != v9)
          return 0;
      }
      v11 = *(unsigned __int8 **)v11;
    }
    while (v11);
  }
  return v11;
}

uint64_t ik::ArrayView<float,-1>::IndexOf<int,int>(uint64_t a1, int *a2, int *a3)
{
  std::runtime_error *exception;

  if (*(_QWORD *)(a1 + 40) != 2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Invalid number of indices provided.");
    __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  return **(_QWORD **)(a1 + 16) * *a2 + *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8) * *a3;
}

void sub_245C17B84(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_245C19130(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8, void *a9, _QWORD *a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void **a34,uint64_t a35,std::__split_buffer<std::string> *a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53,uint64_t a54,uint64_t a55,uint64_t a56,void *__p,uint64_t a58,int a59,__int16 a60,char a61,char a62,uint64_t a63)
{
  void *a66;
  void *__pa;
  uint64_t a72;
  void *v72;
  uint64_t v73;
  void *v76;
  NSObject *v77;

  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a44);
  if (*(char *)(v73 - 137) < 0)
    operator delete(*(void **)(v73 - 160));
  a34 = &a20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a34);
  scml::SignpostInterval::~SignpostInterval((scml::SignpostInterval *)&a66);
  std::shared_ptr<scml::Config::PathInfo>::~shared_ptr[abi:ne180100]((uint64_t)&a72);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<decltype(nullptr),long long,double,std::string,std::vector<scml::Config>,std::unordered_map<std::string,scml::Config>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&__pa);
  if (a2 == 2)
  {
    v76 = __cxa_begin_catch(a1);
    if (a10)
    {
      scml::error(0x10u, (uint64_t)v76);
      *a10 = (id)objc_claimAutoreleasedReturnValue();
    }
    +[SCMLLog imageAnalyzer](SCMLLog, "imageAnalyzer");
    v77 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v77, OS_LOG_TYPE_ERROR))
      -[SCMLImageSanitizer initWithConfiguration:error:].cold.1((uint64_t)v76, v77);

    __cxa_end_catch();
    JUMPOUT(0x245C18FD4);
  }
  scml::SignpostInterval::~SignpostInterval((scml::SignpostInterval *)(v73 - 208));

  _Unwind_Resume(a1);
}

id `anonymous namespace'::significantEventRequest(_anonymous_namespace_ *this)
{
  id v1;

  v1 = objc_alloc_init(MEMORY[0x24BDF9AD0]);
  objc_msgSend(v1, "setRevision:", 2);
  return v1;
}

void sub_245C19630(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_245C199D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  void *v20;
  void *v21;

  _Unwind_Resume(a1);
}

void sub_245C19CC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{

  _Unwind_Resume(a1);
}

void sub_245C19DC8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_245C1A054(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  void *v12;
  void *v13;
  void *v14;
  va_list va;

  va_start(va, a12);

  scml::SignpostInterval::~SignpostInterval((scml::SignpostInterval *)va);
  _Unwind_Resume(a1);
}

void sub_245C1AAF8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;

  __cxa_free_exception(v63);

  JUMPOUT(0x245C1ADD8);
}

void sub_245C1ABCC()
{
  JUMPOUT(0x245C1ADE4);
}

void sub_245C1ABE4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36)
{
  if (__p)
  {
    a36 = (uint64_t)__p;
    operator delete(__p);
  }
  std::__hash_table<std::__hash_value_type<MADUnifiedEmbeddingVersion,std::vector<float>>,std::__unordered_map_hasher<MADUnifiedEmbeddingVersion,std::__hash_value_type<MADUnifiedEmbeddingVersion,std::vector<float>>,std::hash<MADUnifiedEmbeddingVersion>,std::equal_to<MADUnifiedEmbeddingVersion>,true>,std::__unordered_map_equal<MADUnifiedEmbeddingVersion,std::__hash_value_type<MADUnifiedEmbeddingVersion,std::vector<float>>,std::equal_to<MADUnifiedEmbeddingVersion>,std::hash<MADUnifiedEmbeddingVersion>,true>,std::allocator<std::__hash_value_type<MADUnifiedEmbeddingVersion,std::vector<float>>>>::~__hash_table((uint64_t)&a25);
  JUMPOUT(0x245C1ADD4);
}

void sub_245C1AC00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
  scml::SignpostInterval::~SignpostInterval((scml::SignpostInterval *)&a61);
  JUMPOUT(0x245C1ACC0);
}

void sub_245C1AC24(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_245C1AC34(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, scml::ClipEmbeddingClassifier *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61)
{
  void *v61;
  void *v62;
  void *v63;
  void *exception;
  uint64_t v65;

  if (a2 != 1)
  {

    JUMPOUT(0x245C1ACB8);
  }
  v63 = __cxa_begin_catch(a1);
  exception = __cxa_allocate_exception(0x10uLL);
  v65 = scml::ClipEmbeddingClassifier::name(a17);
  a35 = (*(uint64_t (**)(void *))(*(_QWORD *)v63 + 16))(v63);
  scml::strCat<char const(&)[19],std::string const&,char const(&)[3],char const*>("Failed to compute ", v65, ": ", (const char **)&a35, &a61);
  MEMORY[0x249544C64](exception, &a61);
  __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
}

void sub_245C1AC40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
  void *v61;

  scml::ClipEmbeddingClassifier::PredictResult::~PredictResult((scml::ClipEmbeddingClassifier::PredictResult *)&a61);
  JUMPOUT(0x245C1ACA8);
}

void sub_245C1AC50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61)
{
  void *v61;
  void *v62;

  scml::ClipEmbeddingClassifier::PredictResult::~PredictResult((scml::ClipEmbeddingClassifier::PredictResult *)&a61);
  JUMPOUT(0x245C1ACA8);
}

void sub_245C1AC60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  std::__hash_table<std::__hash_value_type<MADUnifiedEmbeddingVersion,std::vector<float>>,std::__unordered_map_hasher<MADUnifiedEmbeddingVersion,std::__hash_value_type<MADUnifiedEmbeddingVersion,std::vector<float>>,std::hash<MADUnifiedEmbeddingVersion>,std::equal_to<MADUnifiedEmbeddingVersion>,true>,std::__unordered_map_equal<MADUnifiedEmbeddingVersion,std::__hash_value_type<MADUnifiedEmbeddingVersion,std::vector<float>>,std::equal_to<MADUnifiedEmbeddingVersion>,std::hash<MADUnifiedEmbeddingVersion>,true>,std::allocator<std::__hash_value_type<MADUnifiedEmbeddingVersion,std::vector<float>>>>::~__hash_table((uint64_t *)va);
  JUMPOUT(0x245C1ADD4);
}

void sub_245C1AC70()
{
  JUMPOUT(0x245C1ACA0);
}

void sub_245C1AC7C()
{
  void *v0;

  JUMPOUT(0x245C1AC9CLL);
}

void sub_245C1AD54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *__p,uint64_t a62,int a63)
{
  char a66;
  void *v66;
  int v67;

  if (a66 < 0)
  {
    operator delete(__p);
    if ((v67 & 1) == 0)
    {
LABEL_6:
      __cxa_end_catch();
      JUMPOUT(0x245C1ACB0);
    }
  }
  else if (!v67)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v66);
  goto LABEL_6;
}

void sub_245C1AD9C(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, _QWORD *a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  void *v51;
  void *v54;

  std::__hash_table<std::__hash_value_type<MADUnifiedEmbeddingVersion,std::vector<float>>,std::__unordered_map_hasher<MADUnifiedEmbeddingVersion,std::__hash_value_type<MADUnifiedEmbeddingVersion,std::vector<float>>,std::hash<MADUnifiedEmbeddingVersion>,std::equal_to<MADUnifiedEmbeddingVersion>,true>,std::__unordered_map_equal<MADUnifiedEmbeddingVersion,std::__hash_value_type<MADUnifiedEmbeddingVersion,std::vector<float>>,std::equal_to<MADUnifiedEmbeddingVersion>,std::hash<MADUnifiedEmbeddingVersion>,true>,std::allocator<std::__hash_value_type<MADUnifiedEmbeddingVersion,std::vector<float>>>>::~__hash_table((uint64_t)&a25);
  scml::SignpostInterval::~SignpostInterval((scml::SignpostInterval *)&a51);

  if (a2 == 1)
  {
    v54 = __cxa_begin_catch(a1);
    if (a12)
    {
      scml::error(0x11u, (uint64_t)v54);
      *a12 = (id)objc_claimAutoreleasedReturnValue();
    }
    __cxa_end_catch();
    JUMPOUT(0x245C1AA20);
  }

  _Unwind_Resume(a1);
}

void sub_245C1ADA8(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,...)
{
  void *v44;
  void *v47;
  va_list va;

  va_start(va, a44);
  if (__p)
  {
    a30 = (uint64_t)__p;
    operator delete(__p);
  }

  std::__hash_table<std::__hash_value_type<MADUnifiedEmbeddingVersion,std::vector<float>>,std::__unordered_map_hasher<MADUnifiedEmbeddingVersion,std::__hash_value_type<MADUnifiedEmbeddingVersion,std::vector<float>>,std::hash<MADUnifiedEmbeddingVersion>,std::equal_to<MADUnifiedEmbeddingVersion>,true>,std::__unordered_map_equal<MADUnifiedEmbeddingVersion,std::__hash_value_type<MADUnifiedEmbeddingVersion,std::vector<float>>,std::equal_to<MADUnifiedEmbeddingVersion>,std::hash<MADUnifiedEmbeddingVersion>,true>,std::allocator<std::__hash_value_type<MADUnifiedEmbeddingVersion,std::vector<float>>>>::~__hash_table((uint64_t)&a19);
  scml::SignpostInterval::~SignpostInterval((scml::SignpostInterval *)va);

  if (a2 == 1)
  {
    v47 = __cxa_begin_catch(a1);
    if (a6)
    {
      scml::error(0x11u, (uint64_t)v47);
      *a6 = (id)objc_claimAutoreleasedReturnValue();
    }
    __cxa_end_catch();
    JUMPOUT(0x245C1AA20);
  }
  JUMPOUT(0x245C1AE38);
}

void sub_245C1AE24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  __cxa_end_catch();

  JUMPOUT(0x245C1AE48);
}

void sub_245C1AEB4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t scml::strCat<char const(&)[30],SCMLImageSanitizerMode &>@<X0>(char *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v5;
  _QWORD v6[10];
  char v7;
  uint64_t v8;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v5);
  scml::scml_impl::strCat<char const(&)[30],SCMLImageSanitizerMode &>(&v5, a1);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v6, a2);
  v5 = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)&v6[-1] + *(_QWORD *)(v5 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v6[0] = MEMORY[0x24BEDB848] + 16;
  if (v7 < 0)
    operator delete((void *)v6[8]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x249544EE0](&v8);
}

void sub_245C1B02C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::ostringstream::~ostringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t scml::scml_impl::strCat<char const(&)[30],SCMLImageSanitizerMode &>(_QWORD *a1, char *__s)
{
  size_t v4;

  v4 = strlen(__s);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)__s, v4);
  std::ostream::operator<<();
  return scml::scml_impl::strCat<>(a1);
}

void std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(std::vector<std::string> *this, std::string *__str, __int128 *a3, unint64_t a4)
{
  std::__compressed_pair<std::string *> *p_end_cap;
  std::string *begin;
  unint64_t v10;
  unint64_t v11;
  std::string *v12;
  std::string *v13;
  std::string *v14;
  std::string *v15;
  std::vector<std::string>::pointer end;

  p_end_cap = &this->__end_cap_;
  begin = this->__begin_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 3) < a4)
  {
    std::vector<std::string>::__vdeallocate(this);
    if (a4 > 0xAAAAAAAAAAAAAAALL)
      std::vector<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>>::__throw_length_error[abi:ne180100]();
    v10 = 0x5555555555555556 * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 3);
    if (v10 <= a4)
      v10 = a4;
    if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 3) >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v10;
    std::vector<std::string>::__vallocate[abi:ne180100](this, v11);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)p_end_cap, (__int128 *)__str, a3, this->__end_);
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)begin) >> 3) < a4)
  {
    v13 = (std::string *)((char *)__str + 8 * (((char *)this->__end_ - (char *)begin) >> 3));
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::string const*,std::string const*,std::string*,0>(__str, v13, begin);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)p_end_cap, (__int128 *)v13, a3, this->__end_);
LABEL_11:
    this->__end_ = v12;
    return;
  }
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::string const*,std::string const*,std::string*,0>(__str, (std::string *)a3, begin);
  v15 = v14;
  end = this->__end_;
  if (end != v14)
  {
    do
    {
      if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0)
        operator delete(end[-1].__r_.__value_.__l.__data_);
      --end;
    }
    while (end != v15);
  }
  this->__end_ = v15;
}

void sub_245C1B1F8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_245C1B200(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<std::string>::__vdeallocate(std::vector<std::string> *this)
{
  if (this->__begin_)
  {
    std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)this);
    operator delete(this->__begin_);
    this->__begin_ = 0;
    this->__end_ = 0;
    this->__end_cap_.__value_ = 0;
  }
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>(uint64_t a1, __int128 *a2, __int128 *a3, std::string *this)
{
  std::string *v4;
  __int128 *v6;
  __int128 v7;
  _QWORD v9[3];
  char v10;
  std::string *v11;
  std::string *v12;

  v4 = this;
  v11 = this;
  v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
        v4 = v12;
      }
      else
      {
        v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
      }
      v6 = (__int128 *)((char *)v6 + 24);
      v12 = ++v4;
    }
    while (v6 != a3);
  }
  v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_245C1B2E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

std::string *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::string const*,std::string const*,std::string*,0>(std::string *__str, std::string *a2, std::string *this)
{
  const std::string *v4;

  v4 = __str;
  if (__str != a2)
  {
    do
      std::string::operator=(this++, v4++);
    while (v4 != a2);
    return a2;
  }
  return (std::string *)v4;
}

uint64_t std::__split_buffer<std::unique_ptr<scml::ClipEmbeddingClassifier>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;
    std::unique_ptr<scml::ClipEmbeddingClassifier>::reset[abi:ne180100]((scml::ClipEmbeddingClassifier::Impl ***)(i - 8), 0);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

_QWORD *std::__hash_table<std::__hash_value_type<MADUnifiedEmbeddingVersion,std::vector<float>>,std::__unordered_map_hasher<MADUnifiedEmbeddingVersion,std::__hash_value_type<MADUnifiedEmbeddingVersion,std::vector<float>>,std::hash<MADUnifiedEmbeddingVersion>,std::equal_to<MADUnifiedEmbeddingVersion>,true>,std::__unordered_map_equal<MADUnifiedEmbeddingVersion,std::__hash_value_type<MADUnifiedEmbeddingVersion,std::vector<float>>,std::equal_to<MADUnifiedEmbeddingVersion>,std::hash<MADUnifiedEmbeddingVersion>,true>,std::allocator<std::__hash_value_type<MADUnifiedEmbeddingVersion,std::vector<float>>>>::__emplace_unique_key_args<MADUnifiedEmbeddingVersion,std::piecewise_construct_t const&,std::tuple<MADUnifiedEmbeddingVersion const&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD **v10;
  _QWORD *i;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      for (i = *v10; i; i = (_QWORD *)*i)
      {
        v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == v7)
            return i;
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8)
              v12 %= v8;
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4)
            break;
        }
      }
    }
  }
  v13 = (_QWORD *)(a1 + 16);
  i = operator new(0x30uLL);
  *i = 0;
  i[1] = v7;
  v14 = **a4;
  i[4] = 0;
  i[5] = 0;
  i[2] = v14;
  i[3] = 0;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    v17 = 1;
    if (v8 >= 3)
      v17 = (v8 & (v8 - 1)) != 0;
    v18 = v17 | (2 * v8);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1, v20);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v21 = *(_QWORD *)a1;
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v22)
  {
    *i = *v22;
LABEL_38:
    *v22 = i;
    goto LABEL_39;
  }
  *i = *v13;
  *v13 = i;
  *(_QWORD *)(v21 + 8 * v4) = v13;
  if (*i)
  {
    v23 = *(_QWORD *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v23 >= v8)
        v23 %= v8;
    }
    else
    {
      v23 &= v8 - 1;
    }
    v22 = (_QWORD *)(*(_QWORD *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_245C1B5D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v10;
  uint64_t v11;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<MADUnifiedEmbeddingVersion,std::vector<float>>,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<MADUnifiedEmbeddingVersion,std::vector<float>>,void *>>>::operator()[abi:ne180100](uint64_t a1, _QWORD *__p)
{
  void *v3;

  if (*(_BYTE *)(a1 + 8))
  {
    v3 = (void *)__p[3];
    if (v3)
    {
      __p[4] = v3;
      operator delete(v3);
    }
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

uint64_t scml::strCat<char const(&)[19],std::string const&,char const(&)[3],char const*>@<X0>(char *a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, const char **a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v11;
  _QWORD v12[10];
  char v13;
  uint64_t v14;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v11);
  scml::scml_impl::strCat<char const(&)[19],std::string const&,char const(&)[3],char const*>(&v11, a1, a2, a3, a4);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v12, a5);
  v11 = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)&v12[-1] + *(_QWORD *)(v11 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v12[0] = MEMORY[0x24BEDB848] + 16;
  if (v13 < 0)
    operator delete((void *)v12[8]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x249544EE0](&v14);
}

void sub_245C1B720(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::ostringstream::~ostringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t scml::scml_impl::strCat<char const(&)[19],std::string const&,char const(&)[3],char const*>(_QWORD *a1, char *__s, uint64_t a3, char *a4, const char **a5)
{
  size_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;

  v10 = strlen(__s);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)__s, v10);
  v11 = *(char *)(a3 + 23);
  if (v11 >= 0)
    v12 = a3;
  else
    v12 = *(_QWORD *)a3;
  if (v11 >= 0)
    v13 = *(unsigned __int8 *)(a3 + 23);
  else
    v13 = *(_QWORD *)(a3 + 8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, v12, v13);
  return scml::scml_impl::strCat<char const(&)[3],char const*>(a1, a4, a5);
}

void std::vector<std::unique_ptr<scml::ClipEmbeddingClassifier>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  scml::ClipEmbeddingClassifier::Impl ***v2;
  scml::ClipEmbeddingClassifier::Impl ***v4;
  void *v5;

  v1 = *a1;
  v2 = (scml::ClipEmbeddingClassifier::Impl ***)**a1;
  if (v2)
  {
    v4 = (scml::ClipEmbeddingClassifier::Impl ***)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
        std::unique_ptr<scml::ClipEmbeddingClassifier>::reset[abi:ne180100](--v4, 0);
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<MADUnifiedEmbeddingVersion,std::vector<float>>,std::__unordered_map_hasher<MADUnifiedEmbeddingVersion,std::__hash_value_type<MADUnifiedEmbeddingVersion,std::vector<float>>,std::hash<MADUnifiedEmbeddingVersion>,std::equal_to<MADUnifiedEmbeddingVersion>,true>,std::__unordered_map_equal<MADUnifiedEmbeddingVersion,std::__hash_value_type<MADUnifiedEmbeddingVersion,std::vector<float>>,std::equal_to<MADUnifiedEmbeddingVersion>,std::hash<MADUnifiedEmbeddingVersion>,true>,std::allocator<std::__hash_value_type<MADUnifiedEmbeddingVersion,std::vector<float>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<MADUnifiedEmbeddingVersion,std::vector<float>>,std::__unordered_map_hasher<MADUnifiedEmbeddingVersion,std::__hash_value_type<MADUnifiedEmbeddingVersion,std::vector<float>>,std::hash<MADUnifiedEmbeddingVersion>,std::equal_to<MADUnifiedEmbeddingVersion>,true>,std::__unordered_map_equal<MADUnifiedEmbeddingVersion,std::__hash_value_type<MADUnifiedEmbeddingVersion,std::vector<float>>,std::equal_to<MADUnifiedEmbeddingVersion>,std::hash<MADUnifiedEmbeddingVersion>,true>,std::allocator<std::__hash_value_type<MADUnifiedEmbeddingVersion,std::vector<float>>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<MADUnifiedEmbeddingVersion,std::vector<float>>,std::__unordered_map_hasher<MADUnifiedEmbeddingVersion,std::__hash_value_type<MADUnifiedEmbeddingVersion,std::vector<float>>,std::hash<MADUnifiedEmbeddingVersion>,std::equal_to<MADUnifiedEmbeddingVersion>,true>,std::__unordered_map_equal<MADUnifiedEmbeddingVersion,std::__hash_value_type<MADUnifiedEmbeddingVersion,std::vector<float>>,std::equal_to<MADUnifiedEmbeddingVersion>,std::hash<MADUnifiedEmbeddingVersion>,true>,std::allocator<std::__hash_value_type<MADUnifiedEmbeddingVersion,std::vector<float>>>>::__deallocate_node(int a1, _QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  if (__p)
  {
    v2 = __p;
    do
    {
      v3 = (_QWORD *)*v2;
      v4 = (void *)v2[3];
      if (v4)
      {
        v2[4] = v4;
        operator delete(v4);
      }
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 *i;
  unint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD v26[3];

  v8 = (_QWORD *)(a1 + 24);
  v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(unsigned __int8 **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1, v22);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *(_QWORD *)v26[0] = *v23;
    *v23 = v26[0];
  }
  else
  {
    *(_QWORD *)v26[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v26[0])
    {
      v24 = *(_QWORD *)(*(_QWORD *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11)
          v24 %= v11;
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v26[0];
    }
  }
  i = (unsigned __int8 *)v26[0];
  ++*v8;
  return i;
}

void sub_245C1BD8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **__p, uint64_t a13)
{
  if (__p)
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100]((uint64_t)&a13, __p);
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *v8;
  std::string *v9;
  __int128 *v10;
  __int128 v11;

  v7 = a1 + 16;
  v8 = (char *)operator new(0x30uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = a2;
  v9 = (std::string *)(v8 + 16);
  v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((_QWORD *)v10 + 1));
  }
  else
  {
    v11 = *v10;
    *((_QWORD *)v8 + 4) = *((_QWORD *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  *((_DWORD *)v8 + 10) = 0;
  *(_BYTE *)(a4 + 16) = 1;
}

void sub_245C1BE3C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

scml::ClipEmbeddingClassifier::Impl **std::unique_ptr<scml::ClipEmbeddingClassifier>::reset[abi:ne180100](scml::ClipEmbeddingClassifier::Impl ***a1, scml::ClipEmbeddingClassifier::Impl **a2)
{
  scml::ClipEmbeddingClassifier::Impl **result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    scml::ClipEmbeddingClassifier::~ClipEmbeddingClassifier(result);
    JUMPOUT(0x249544F58);
  }
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<MADUnifiedEmbeddingVersion,std::unique_ptr<scml::ClipImageEncoder>>,std::__unordered_map_hasher<MADUnifiedEmbeddingVersion,std::__hash_value_type<MADUnifiedEmbeddingVersion,std::unique_ptr<scml::ClipImageEncoder>>,std::hash<MADUnifiedEmbeddingVersion>,std::equal_to<MADUnifiedEmbeddingVersion>,true>,std::__unordered_map_equal<MADUnifiedEmbeddingVersion,std::__hash_value_type<MADUnifiedEmbeddingVersion,std::unique_ptr<scml::ClipImageEncoder>>,std::equal_to<MADUnifiedEmbeddingVersion>,std::hash<MADUnifiedEmbeddingVersion>,true>,std::allocator<std::__hash_value_type<MADUnifiedEmbeddingVersion,std::unique_ptr<scml::ClipImageEncoder>>>>::find<MADUnifiedEmbeddingVersion>(_QWORD *a1, unint64_t *a2)
{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *result;
  unint64_t v8;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *a2;
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = *a2;
    if (v3 >= *(_QWORD *)&v2)
      v5 = v3 % *(_QWORD *)&v2;
  }
  else
  {
    v5 = (*(_QWORD *)&v2 - 1) & v3;
  }
  v6 = *(_QWORD **)(*a1 + 8 * v5);
  if (!v6)
    return 0;
  result = (_QWORD *)*v6;
  if (*v6)
  {
    do
    {
      v8 = result[1];
      if (v8 == v3)
      {
        if (result[2] == v3)
          return result;
      }
      else
      {
        if (v4.u32[0] > 1uLL)
        {
          if (v8 >= *(_QWORD *)&v2)
            v8 %= *(_QWORD *)&v2;
        }
        else
        {
          v8 &= *(_QWORD *)&v2 - 1;
        }
        if (v8 != v5)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

scml::ClipImageEncoder *std::unique_ptr<scml::ClipImageEncoder>::reset[abi:ne180100](scml::ClipImageEncoder **a1, scml::ClipImageEncoder *a2)
{
  scml::ClipImageEncoder *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    scml::ClipImageEncoder::~ClipImageEncoder(result);
    JUMPOUT(0x249544F58);
  }
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<MADUnifiedEmbeddingVersion,std::unique_ptr<scml::ClipImageEncoder>>,std::__unordered_map_hasher<MADUnifiedEmbeddingVersion,std::__hash_value_type<MADUnifiedEmbeddingVersion,std::unique_ptr<scml::ClipImageEncoder>>,std::hash<MADUnifiedEmbeddingVersion>,std::equal_to<MADUnifiedEmbeddingVersion>,true>,std::__unordered_map_equal<MADUnifiedEmbeddingVersion,std::__hash_value_type<MADUnifiedEmbeddingVersion,std::unique_ptr<scml::ClipImageEncoder>>,std::equal_to<MADUnifiedEmbeddingVersion>,std::hash<MADUnifiedEmbeddingVersion>,true>,std::allocator<std::__hash_value_type<MADUnifiedEmbeddingVersion,std::unique_ptr<scml::ClipImageEncoder>>>>::__emplace_unique_key_args<MADUnifiedEmbeddingVersion,std::pair<MADUnifiedEmbeddingVersion const,std::unique_ptr<scml::ClipImageEncoder>>>(uint64_t a1, unint64_t *a2, uint64_t *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD **v9;
  _QWORD *i;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v6 >= v7)
        v3 = v6 % v7;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
    v9 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      for (i = *v9; i; i = (_QWORD *)*i)
      {
        v11 = i[1];
        if (v11 == v6)
        {
          if (i[2] == v6)
            return i;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7)
              v11 %= v7;
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3)
            break;
        }
      }
    }
  }
  v12 = (_QWORD *)(a1 + 16);
  i = operator new(0x20uLL);
  v13 = *a3;
  v14 = a3[1];
  a3[1] = 0;
  *i = 0;
  i[1] = v6;
  i[2] = v13;
  i[3] = v14;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v7 || (float)(v16 * (float)v7) < v15)
  {
    v17 = 1;
    if (v7 >= 3)
      v17 = (v7 & (v7 - 1)) != 0;
    v18 = v17 | (2 * v7);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1, v20);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v21 = *(_QWORD *)a1;
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *i = *v22;
LABEL_38:
    *v22 = i;
    goto LABEL_39;
  }
  *i = *v12;
  *v12 = i;
  *(_QWORD *)(v21 + 8 * v3) = v12;
  if (*i)
  {
    v23 = *(_QWORD *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v23 >= v7)
        v23 %= v7;
    }
    else
    {
      v23 &= v7 - 1;
    }
    v22 = (_QWORD *)(*(_QWORD *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_245C1C564(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  scml::ClipImageEncoder **v10;
  uint64_t v11;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<MADUnifiedEmbeddingVersion,std::unique_ptr<scml::ClipImageEncoder>>,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<MADUnifiedEmbeddingVersion,std::unique_ptr<scml::ClipImageEncoder>>,void *>>>::operator()[abi:ne180100](uint64_t a1, scml::ClipImageEncoder **__p)
{
  if (*(_BYTE *)(a1 + 8))
    std::unique_ptr<scml::ClipImageEncoder>::reset[abi:ne180100](__p + 3, 0);
  if (__p)
    operator delete(__p);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,SCMLClassificationMode>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,SCMLClassificationMode>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,SCMLClassificationMode>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,SCMLClassificationMode>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 *i;
  unint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD v26[3];

  v8 = (_QWORD *)(a1 + 24);
  v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(unsigned __int8 **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,SCMLClassificationMode>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,SCMLClassificationMode>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,SCMLClassificationMode>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,SCMLClassificationMode>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1, v22);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *(_QWORD *)v26[0] = *v23;
    *v23 = v26[0];
  }
  else
  {
    *(_QWORD *)v26[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v26[0])
    {
      v24 = *(_QWORD *)(*(_QWORD *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11)
          v24 %= v11;
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v26[0];
    }
  }
  i = (unsigned __int8 *)v26[0];
  ++*v8;
  return i;
}

void sub_245C1C970(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **__p, uint64_t a13)
{
  if (__p)
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100]((uint64_t)&a13, __p);
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::__hash_value_type<std::string,SCMLClassificationMode>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,SCMLClassificationMode>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,SCMLClassificationMode>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,SCMLClassificationMode>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  std::string *v9;
  __int128 *v10;
  __int128 v11;

  v7 = a1 + 16;
  v8 = operator new(0x30uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  v9 = (std::string *)(v8 + 2);
  v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((_QWORD *)v10 + 1));
  }
  else
  {
    v11 = *v10;
    v8[4] = *((_QWORD *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  v8[5] = 0;
  *(_BYTE *)(a4 + 16) = 1;
}

void sub_245C1CA20(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

char *std::__hash_table<std::__hash_value_type<MADUnifiedEmbeddingVersion,std::vector<float>>,std::__unordered_map_hasher<MADUnifiedEmbeddingVersion,std::__hash_value_type<MADUnifiedEmbeddingVersion,std::vector<float>>,std::hash<MADUnifiedEmbeddingVersion>,std::equal_to<MADUnifiedEmbeddingVersion>,true>,std::__unordered_map_equal<MADUnifiedEmbeddingVersion,std::__hash_value_type<MADUnifiedEmbeddingVersion,std::vector<float>>,std::equal_to<MADUnifiedEmbeddingVersion>,std::hash<MADUnifiedEmbeddingVersion>,true>,std::allocator<std::__hash_value_type<MADUnifiedEmbeddingVersion,std::vector<float>>>>::__emplace_unique_key_args<MADUnifiedEmbeddingVersion,MADUnifiedEmbeddingVersion const&,std::vector<float>>(uint64_t a1, unint64_t *a2, _QWORD *a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  void **v11;
  char *v12;
  unint64_t v13;
  _QWORD *v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;

  v8 = *a2;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 >= v9)
        v4 = v8 % v9;
    }
    else
    {
      v4 = (v9 - 1) & v8;
    }
    v11 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v11)
    {
      v12 = (char *)*v11;
      if (*v11)
      {
        do
        {
          v13 = *((_QWORD *)v12 + 1);
          if (v13 == v8)
          {
            if (*((_QWORD *)v12 + 2) == v8)
              return v12;
          }
          else
          {
            if (v10.u32[0] > 1uLL)
            {
              if (v13 >= v9)
                v13 %= v9;
            }
            else
            {
              v13 &= v9 - 1;
            }
            if (v13 != v4)
              break;
          }
          v12 = *(char **)v12;
        }
        while (v12);
      }
    }
  }
  v14 = (_QWORD *)(a1 + 16);
  v12 = (char *)operator new(0x30uLL);
  *(_QWORD *)v12 = 0;
  *((_QWORD *)v12 + 1) = v8;
  *((_QWORD *)v12 + 2) = *a3;
  *(_OWORD *)(v12 + 24) = *(_OWORD *)a4;
  *((_QWORD *)v12 + 5) = *(_QWORD *)(a4 + 16);
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    v17 = 1;
    if (v9 >= 3)
      v17 = (v9 & (v9 - 1)) != 0;
    v18 = v17 | (2 * v9);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1, v20);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v4 = v8 % v9;
      else
        v4 = v8;
    }
    else
    {
      v4 = (v9 - 1) & v8;
    }
  }
  v21 = *(_QWORD *)a1;
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v22)
  {
    *(_QWORD *)v12 = *v22;
LABEL_38:
    *v22 = v12;
    goto LABEL_39;
  }
  *(_QWORD *)v12 = *v14;
  *v14 = v12;
  *(_QWORD *)(v21 + 8 * v4) = v14;
  if (*(_QWORD *)v12)
  {
    v23 = *(_QWORD *)(*(_QWORD *)v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v23 >= v9)
        v23 %= v9;
    }
    else
    {
      v23 &= v9 - 1;
    }
    v22 = (_QWORD *)(*(_QWORD *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v12;
}

void sub_245C1D034(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v10;
  uint64_t v11;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<MADUnifiedEmbeddingVersion,std::vector<float>>,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<MADUnifiedEmbeddingVersion,std::unique_ptr<scml::ClipImageEncoder>>,std::__unordered_map_hasher<MADUnifiedEmbeddingVersion,std::__hash_value_type<MADUnifiedEmbeddingVersion,std::unique_ptr<scml::ClipImageEncoder>>,std::hash<MADUnifiedEmbeddingVersion>,std::equal_to<MADUnifiedEmbeddingVersion>,true>,std::__unordered_map_equal<MADUnifiedEmbeddingVersion,std::__hash_value_type<MADUnifiedEmbeddingVersion,std::unique_ptr<scml::ClipImageEncoder>>,std::equal_to<MADUnifiedEmbeddingVersion>,std::hash<MADUnifiedEmbeddingVersion>,true>,std::allocator<std::__hash_value_type<MADUnifiedEmbeddingVersion,std::unique_ptr<scml::ClipImageEncoder>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<MADUnifiedEmbeddingVersion,std::unique_ptr<scml::ClipImageEncoder>>,std::__unordered_map_hasher<MADUnifiedEmbeddingVersion,std::__hash_value_type<MADUnifiedEmbeddingVersion,std::unique_ptr<scml::ClipImageEncoder>>,std::hash<MADUnifiedEmbeddingVersion>,std::equal_to<MADUnifiedEmbeddingVersion>,true>,std::__unordered_map_equal<MADUnifiedEmbeddingVersion,std::__hash_value_type<MADUnifiedEmbeddingVersion,std::unique_ptr<scml::ClipImageEncoder>>,std::equal_to<MADUnifiedEmbeddingVersion>,std::hash<MADUnifiedEmbeddingVersion>,true>,std::allocator<std::__hash_value_type<MADUnifiedEmbeddingVersion,std::unique_ptr<scml::ClipImageEncoder>>>>::__deallocate_node(a1, *(scml::ClipImageEncoder ***)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<MADUnifiedEmbeddingVersion,std::unique_ptr<scml::ClipImageEncoder>>,std::__unordered_map_hasher<MADUnifiedEmbeddingVersion,std::__hash_value_type<MADUnifiedEmbeddingVersion,std::unique_ptr<scml::ClipImageEncoder>>,std::hash<MADUnifiedEmbeddingVersion>,std::equal_to<MADUnifiedEmbeddingVersion>,true>,std::__unordered_map_equal<MADUnifiedEmbeddingVersion,std::__hash_value_type<MADUnifiedEmbeddingVersion,std::unique_ptr<scml::ClipImageEncoder>>,std::equal_to<MADUnifiedEmbeddingVersion>,std::hash<MADUnifiedEmbeddingVersion>,true>,std::allocator<std::__hash_value_type<MADUnifiedEmbeddingVersion,std::unique_ptr<scml::ClipImageEncoder>>>>::__deallocate_node(uint64_t a1, scml::ClipImageEncoder **a2)
{
  scml::ClipImageEncoder **v2;
  scml::ClipImageEncoder *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = *v2;
      std::unique_ptr<scml::ClipImageEncoder>::reset[abi:ne180100](v2 + 3, 0);
      operator delete(v2);
      v2 = (scml::ClipImageEncoder **)v3;
    }
    while (v3);
  }
}

void OUTLINED_FUNCTION_0_1(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 2u);
}

id scml::error(unsigned int a1, void *a2)
{
  id v3;
  void *v4;
  __CFString *v5;
  void *v6;
  void *v7;
  uint64_t v9;
  _QWORD v10[2];

  v10[1] = *MEMORY[0x24BDAC8D0];
  v3 = a2;
  v4 = (void *)MEMORY[0x24BDD1540];
  v5 = SCMLErrorDomain[0];
  v9 = *MEMORY[0x24BDD0FC8];
  v10[0] = v3;
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v10, &v9, 1);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "errorWithDomain:code:userInfo:", v5, a1, v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();

  return v7;
}

void sub_245C1D570(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id scml::error(unsigned int a1, uint64_t a2, uint64_t a3)
{
  void *v4;
  void *v5;

  scml::strToNSString(a2, a3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  scml::error(a1, v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  return v5;
}

void sub_245C1D5E0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id scml::error(unsigned int a1, uint64_t a2)
{
  const char *v3;
  size_t v4;

  v3 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  v4 = strlen(v3);
  return scml::error(a1, (uint64_t)v3, v4);
}

{
  void *v3;
  void *v4;

  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%@"), a2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  scml::error(a1, v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  return v4;
}

void sub_245C1D690(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id scml::error(unsigned int a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;

  v7 = a4;
  if (v7)
  {
    v8 = (void *)MEMORY[0x24BDD17C8];
    scml::strToNSString(a2, a3);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "stringWithFormat:", CFSTR("%@: %@"), v9, v7);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    scml::error(a1, v10);
    v11 = (void *)objc_claimAutoreleasedReturnValue();

  }
  else
  {
    scml::error(a1, a2, a3);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
  }

  return v11;
}

void sub_245C1D760(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

id scml::error(unsigned int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void **v5;
  uint64_t v6;
  void *v7;
  const char *v9;
  void *__p[2];
  unsigned __int8 v11;
  uint64_t v12[2];

  v12[0] = a2;
  v12[1] = a3;
  v9 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a4 + 16))(a4);
  scml::strCat<std::string_view &,char const(&)[3],char const*>(v12, ": ", &v9, __p);
  if ((v11 & 0x80u) == 0)
    v5 = __p;
  else
    v5 = (void **)__p[0];
  if ((v11 & 0x80u) == 0)
    v6 = v11;
  else
    v6 = (uint64_t)__p[1];
  scml::error(a1, (uint64_t)v5, v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  if ((char)v11 < 0)
    operator delete(__p[0]);
  return v7;
}

void sub_245C1D81C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t scml::strCat<std::string_view &,char const(&)[3],char const*>@<X0>(uint64_t *a1@<X0>, char *a2@<X1>, const char **a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v9;
  _QWORD v10[10];
  char v11;
  uint64_t v12;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v9, *a1, a1[1]);
  scml::scml_impl::strCat<char const(&)[3],char const*>(&v9, a2, a3);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v10, a4);
  v9 = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)&v10[-1] + *(_QWORD *)(v9 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v10[0] = MEMORY[0x24BEDB848] + 16;
  if (v11 < 0)
    operator delete((void *)v10[8]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x249544EE0](&v12);
}

void sub_245C1D910(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::ostringstream::~ostringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void scml::makeException(const void *a1@<X0>, size_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  id v7;
  scml *v8;
  void **v9;
  uint64_t v10;
  uint64_t v11;
  void *__p[2];
  char v13;
  void *__dst[2];
  unint64_t v15;
  uint64_t v16[2];

  v16[0] = (uint64_t)a1;
  v16[1] = a2;
  v7 = a3;
  if (!v7)
  {
    if (a2 >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    if (a2 >= 0x17)
    {
      v10 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((a2 | 7) != 0x17)
        v10 = a2 | 7;
      v11 = v10 + 1;
      v9 = (void **)operator new(v10 + 1);
      __dst[1] = (void *)a2;
      v15 = v11 | 0x8000000000000000;
      __dst[0] = v9;
    }
    else
    {
      HIBYTE(v15) = a2;
      v9 = __dst;
      if (!a2)
        goto LABEL_12;
    }
    memmove(v9, a1, a2);
LABEL_12:
    *((_BYTE *)v9 + a2) = 0;
    MEMORY[0x249544C64](a4, __dst);
    goto LABEL_13;
  }
  objc_msgSend(MEMORY[0x24BDD17C8], "stringWithFormat:", CFSTR("%@"), v7);
  v8 = (scml *)objc_claimAutoreleasedReturnValue();
  scml::strFromNSString(v8, __dst);

  scml::strCat<std::string_view &,char const(&)[3],std::string &>(v16, ": ", (uint64_t)__dst, __p);
  MEMORY[0x249544C64](a4, __p);
  if (v13 < 0)
    operator delete(__p[0]);
LABEL_13:
  if (SHIBYTE(v15) < 0)
    operator delete(__dst[0]);

}

void sub_245C1DA68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;

  if (a22 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

uint64_t scml::strCat<std::string_view &,char const(&)[3],std::string &>@<X0>(uint64_t *a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v9;
  _QWORD v10[10];
  char v11;
  uint64_t v12;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v9, *a1, a1[1]);
  scml::scml_impl::strCat<char const(&)[3],std::string>(&v9, a2, a3);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v10, a4);
  v9 = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)&v10[-1] + *(_QWORD *)(v9 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v10[0] = MEMORY[0x24BEDB848] + 16;
  if (v11 < 0)
    operator delete((void *)v10[8]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x249544EE0](&v12);
}

void sub_245C1DB94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::ostringstream::~ostringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

std::string *scml::typeStr@<X0>(int a1@<W0>, std::string *a2@<X8>)
{
  char *v2;

  switch(a1)
  {
    case 4:
      v2 = "FLOAT_32";
      return (std::string *)std::string::basic_string[abi:ne180100]<0>(a2, v2);
    case 2:
      v2 = "INT_32";
      return (std::string *)std::string::basic_string[abi:ne180100]<0>(a2, v2);
    case 0:
      v2 = "UINT_8";
      return (std::string *)std::string::basic_string[abi:ne180100]<0>(a2, v2);
  }
  return std::to_string(a2, a1);
}

void scml::TensorSpec::throwBadShape(uint64_t a1, uint64_t *a2)
{
  void *exception;
  _QWORD v3[3];

  scml::strCat<char const(&)[8],std::string const&,char const(&)[8],std::vector<unsigned long> const&,char const(&)[22],std::vector<std::variant<int,std::string>> const&>("tensor ", a1, " shape ", a2, " does not match spec ", (uint64_t *)(a1 + 24), v3);
  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x249544C64](exception, v3);
  __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
}

void sub_245C1DC54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t scml::strCat<char const(&)[8],std::string const&,char const(&)[8],std::vector<unsigned long> const&,char const(&)[22],std::vector<std::variant<int,std::string>> const&>@<X0>(char *a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t *a4@<X3>, char *a5@<X4>, uint64_t *a6@<X5>, _QWORD *a7@<X8>)
{
  uint64_t v15;
  _QWORD v16[10];
  char v17;
  uint64_t v18;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v15);
  scml::scml_impl::strCat<char const(&)[8],std::string const&,char const(&)[8],std::vector<unsigned long> const&,char const(&)[22],std::vector<std::variant<int,std::string>> const&>(&v15, a1, a2, a3, a4, a5, a6);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v16, a7);
  v15 = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)&v16[-1] + *(_QWORD *)(v15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v16[0] = MEMORY[0x24BEDB848] + 16;
  if (v17 < 0)
    operator delete((void *)v16[8]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x249544EE0](&v18);
}

void sub_245C1DD78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::ostringstream::~ostringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void scml::TensorSpec::throwBadType(uint64_t a1, int a2)
{
  void *exception;
  std::string __p;
  std::string v5;
  _QWORD v6[3];

  scml::typeStr(a2, &v5);
  scml::typeStr(*(_DWORD *)(a1 + 48), &__p);
  scml::strCat<char const(&)[8],std::string const&,char const(&)[7],std::string,char const(&)[22],std::string>("tensor ", a1, " type ", (uint64_t)&v5, " does not match spec ", (uint64_t)&__p, v6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x249544C64](exception, v6);
  __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
}

void sub_245C1DE34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (*(char *)(v21 - 17) < 0)
    operator delete(*(void **)(v21 - 40));
  _Unwind_Resume(exception_object);
}

uint64_t scml::strCat<char const(&)[8],std::string const&,char const(&)[7],std::string,char const(&)[22],std::string>@<X0>(char *a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X3>, char *a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  uint64_t v15;
  _QWORD v16[10];
  char v17;
  uint64_t v18;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v15);
  scml::scml_impl::strCat<char const(&)[8],std::string const&,char const(&)[7],std::string,char const(&)[22],std::string>(&v15, a1, a2, a3, a4, a5, a6);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v16, a7);
  v15 = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)&v16[-1] + *(_QWORD *)(v15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v16[0] = MEMORY[0x24BEDB848] + 16;
  if (v17 < 0)
    operator delete((void *)v16[8]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x249544EE0](&v18);
}

void sub_245C1DF84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::ostringstream::~ostringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void scml::TensorSpec::throwUnhandledPortType(scml::TensorSpec *this)
{
  void *exception;
  _QWORD v2[3];

  scml::strCat<char const(&)[8],std::string const&,char const(&)[21]>("tensor ", (uint64_t)this, " unhandled port type", v2);
  exception = __cxa_allocate_exception(0x10uLL);
  MEMORY[0x249544C64](exception, v2);
  __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
}

void sub_245C1DFF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t scml::strCat<char const(&)[8],std::string const&,char const(&)[21]>@<X0>(char *a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v9;
  _QWORD v10[10];
  char v11;
  uint64_t v12;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v9);
  scml::scml_impl::strCat<char const(&)[8],std::string const&,char const(&)[21]>(&v9, a1, a2, a3);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v10, a4);
  v9 = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)&v10[-1] + *(_QWORD *)(v9 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v10[0] = MEMORY[0x24BEDB848] + 16;
  if (v11 < 0)
    operator delete((void *)v10[8]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x249544EE0](&v12);
}

void sub_245C1E0F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::ostringstream::~ostringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void scml::TensorSpec::validate(uint64_t a1, E5RT::OperandDescriptor *this, uint64_t a3)
{
  E5RT::TensorDescriptor *v4;
  E5RT::TensorDescriptor *v5;
  const E5RT::TensorDataType *v6;
  int v7;
  uint64_t TensorShape;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[7];
  _BYTE *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;

  v18 = a3;
  v4 = (E5RT::TensorDescriptor *)E5RT::OperandDescriptor::TryAsTensorDescriptor(this);
  if (!v4)
    scml::TensorSpec::throwUnhandledPortType((scml::TensorSpec *)a1);
  v5 = v4;
  E5RT::TensorDescriptor::GetTensorDataType(v4);
  v7 = ik::core::AsDataType((ik::core *)v14, v6);
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)v14);
  if (*(_DWORD *)(a1 + 48) != v7)
    scml::TensorSpec::throwBadType(a1, v7);
  TensorShape = E5RT::TensorDescriptor::GetTensorShape(v5);
  v16 = 0;
  v17 = 0;
  v15 = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v15, *(const void **)TensorShape, *(_QWORD *)(TensorShape + 8), (uint64_t)(*(_QWORD *)(TensorShape + 8) - *(_QWORD *)TensorShape) >> 3);
  v9 = v16;
  if (((char *)v16 - v15) >> 3 != (uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 5)
    scml::TensorSpec::throwBadShape(a1, (uint64_t *)&v15);
  if (v16 != (_QWORD *)v15)
  {
    v10 = 0;
    v11 = 0;
    v9 = v15;
    do
    {
      v12 = v9[v11];
      v14[0] = a1;
      v14[1] = &v15;
      v14[2] = v12;
      v14[3] = a1;
      v14[4] = &v15;
      v14[5] = &v18;
      v14[6] = v12;
      v13 = *(unsigned int *)(*(_QWORD *)(a1 + 24) + v10 + 24);
      if ((_DWORD)v13 == -1)
        std::__throw_bad_variant_access[abi:ne180100]();
      v19 = v14;
      ((void (*)(_QWORD **))off_2516E49B0[v13])(&v19);
      ++v11;
      v9 = v15;
      v10 += 32;
    }
    while (v11 < ((char *)v16 - v15) >> 3);
  }
  if (v9)
  {
    v16 = v9;
    operator delete(v9);
  }
}

void sub_245C1E26C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ik::core::AsDataType(ik::core *this, const E5RT::TensorDataType *a2)
{
  int ComponentSize;
  int ComponentDataType;
  std::runtime_error *exception;

  ComponentSize = E5RT::TensorDataType::GetComponentSize(this);
  ComponentDataType = E5RT::TensorDataType::GetComponentDataType(this);
  if (ComponentDataType == 4)
  {
    if (ComponentSize == 2)
    {
      return 3;
    }
    else
    {
      if (ComponentSize != 4)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Unsupported component size for float.");
        goto LABEL_18;
      }
      return 4;
    }
  }
  else
  {
    if (ComponentDataType != 1)
    {
      if (ComponentDataType)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Unsupported e5rt component type.");
      }
      else
      {
        if (ComponentSize == 1)
          return 0;
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Unsupported component size for uint.");
      }
LABEL_18:
      __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
    }
    if (ComponentSize == 2)
    {
      return 1;
    }
    else
    {
      if (ComponentSize != 4)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Unsupported component size for int.");
        goto LABEL_18;
      }
      return 2;
    }
  }
}

void sub_245C1E3B0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void scml::TensorSpec::createTensor(E5RT::TensorDescriptor *this@<X1>, _QWORD *a2@<X0>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t TensorShape;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  uint64_t *v21;
  uint64_t v22;
  const E5RT::TensorDataType *v23;
  int v24;
  void *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  _BYTE *v32;
  uint64_t v33;
  void *__p;
  _QWORD *v35;
  unint64_t v36;
  void **v37;

  __p = 0;
  v35 = 0;
  v36 = 0;
  TensorShape = E5RT::TensorDescriptor::GetTensorShape(this);
  v31 = 0;
  v32 = 0;
  v33 = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v31, *(const void **)TensorShape, *(_QWORD *)(TensorShape + 8), (uint64_t)(*(_QWORD *)(TensorShape + 8) - *(_QWORD *)TensorShape) >> 3);
  v7 = v31;
  if (v32 != v31)
  {
    v8 = 0;
    do
    {
      v9 = v7[v8];
      v27 = a2;
      v28 = &v31;
      v29 = a3;
      v30 = v9;
      v10 = *(unsigned int *)(a2[3] + 32 * v8 + 24);
      if ((_DWORD)v10 == -1)
        std::__throw_bad_variant_access[abi:ne180100]();
      v37 = &v27;
      v11 = ((uint64_t (*)(void ***))off_2516E49C0[v10])(&v37);
      v12 = v11;
      v13 = v35;
      if ((unint64_t)v35 >= v36)
      {
        v15 = __p;
        v16 = ((char *)v35 - (_BYTE *)__p) >> 3;
        v17 = v16 + 1;
        if ((unint64_t)(v16 + 1) >> 61)
          std::vector<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>>::__throw_length_error[abi:ne180100]();
        v18 = v36 - (_QWORD)__p;
        if ((uint64_t)(v36 - (_QWORD)__p) >> 2 > v17)
          v17 = v18 >> 2;
        if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
          v19 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v19 = v17;
        if (v19)
        {
          v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v36, v19);
          v15 = __p;
          v13 = v35;
        }
        else
        {
          v20 = 0;
        }
        v21 = (uint64_t *)&v20[8 * v16];
        *v21 = v12;
        v14 = v21 + 1;
        while (v13 != v15)
        {
          v22 = *--v13;
          *--v21 = v22;
        }
        __p = v21;
        v35 = v14;
        v36 = (unint64_t)&v20[8 * v19];
        if (v15)
          operator delete(v15);
      }
      else
      {
        *v35 = v11;
        v14 = v13 + 1;
      }
      v35 = v14;
      ++v8;
      v7 = v31;
    }
    while (v8 < (v32 - (_BYTE *)v31) >> 3);
  }
  E5RT::TensorDescriptor::GetTensorDataType(this);
  v24 = ik::core::AsDataType((ik::core *)&v27, v23);
  E5RT::TensorDataType::~TensorDataType((E5RT::TensorDataType *)&v27);
  LODWORD(v37) = v24;
  v27 = 0;
  v28 = 0;
  v29 = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v27, __p, (uint64_t)v35, ((char *)v35 - (_BYTE *)__p) >> 3);
  ik::E5BufferTensor::E5BufferTensor(a4, (unsigned int *)&v37, (int **)&v27);
  if (v27)
  {
    v28 = v27;
    operator delete(v27);
  }
  if (v31)
  {
    v32 = v31;
    operator delete(v31);
  }
  if (__p)
  {
    v35 = __p;
    operator delete(__p);
  }
}

void sub_245C1E5F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20)
{
  if (__p)
    operator delete(__p);
  if (a16)
    operator delete(a16);
  if (a19)
    operator delete(a19);
  _Unwind_Resume(exception_object);
}

void scml::validateTensorNames(uint64_t a1, void ***a2)
{
  void **i;
  void **v4;
  void **v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  BOOL v11;
  uint64_t *v12;
  uint64_t *v13;
  void *exception;
  _QWORD v15[3];
  char **v16;
  char *v17;
  uint64_t v18;
  char **v19;
  char *v20;
  uint64_t v21;

  v20 = 0;
  v21 = 0;
  v19 = &v20;
  for (i = (void **)(a1 + 16);
        ;
        std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)&v19, i + 2, (uint64_t)(i + 2)))
  {
    i = (void **)*i;
    if (!i)
      break;
  }
  v17 = 0;
  v18 = 0;
  v16 = &v17;
  v5 = *a2;
  v4 = a2[1];
  if (v5 == v4)
  {
    v6 = 0;
  }
  else
  {
    do
    {
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)&v16, v5, (uint64_t)v5);
      v5 += 7;
    }
    while (v5 != v4);
    v6 = v18;
  }
  if (v21 != v6)
    goto LABEL_24;
  v7 = (uint64_t *)v19;
  if (v19 != &v20)
  {
    v8 = (uint64_t *)v16;
    while ((std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)v15, (unsigned __int8 *)v7 + 32, (unsigned __int8 *)v8 + 32) & 1) != 0)
    {
      v9 = (uint64_t *)v7[1];
      v10 = v7;
      if (v9)
      {
        do
        {
          v7 = v9;
          v9 = (uint64_t *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          v7 = (uint64_t *)v10[2];
          v11 = *v7 == (_QWORD)v10;
          v10 = v7;
        }
        while (!v11);
      }
      v12 = (uint64_t *)v8[1];
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = (uint64_t *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (uint64_t *)v8[2];
          v11 = *v13 == (_QWORD)v8;
          v8 = v13;
        }
        while (!v11);
      }
      v8 = v13;
      if (v7 == (uint64_t *)&v20)
        goto LABEL_23;
    }
LABEL_24:
    scml::strCat<char const(&)[20],std::set<std::string> &,char const(&)[12],std::set<std::string> &>("tensor names found=", &v19, ", expected=", &v16, v15);
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x249544C64](exception, v15);
    __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
LABEL_23:
  std::__tree<std::string>::destroy((uint64_t)&v16, v17);
  std::__tree<std::string>::destroy((uint64_t)&v19, v20);
}

void sub_245C1E800(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, char *a17, uint64_t a18, char a19, char *a20)
{
  if (a15 < 0)
    operator delete(__p);
  std::__tree<std::string>::destroy((uint64_t)&a16, a17);
  std::__tree<std::string>::destroy((uint64_t)&a19, a20);
  _Unwind_Resume(a1);
}

uint64_t scml::strCat<char const(&)[20],std::set<std::string> &,char const(&)[12],std::set<std::string> &>@<X0>(char *a1@<X0>, _QWORD *a2@<X1>, char *a3@<X2>, _QWORD *a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v11;
  _QWORD v12[10];
  char v13;
  uint64_t v14;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v11);
  scml::scml_impl::strCat<char const(&)[20],std::set<std::string> &,char const(&)[12],std::set<std::string> &>(&v11, a1, a2, a3, a4);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v12, a5);
  v11 = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)&v12[-1] + *(_QWORD *)(v11 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v12[0] = MEMORY[0x24BEDB848] + 16;
  if (v13 < 0)
    operator delete((void *)v12[8]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x249544EE0](&v14);
}

void sub_245C1E938(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::ostringstream::~ostringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void scml::setZero(scml *this, ik::Tensor *a2)
{
  void *v2;
  size_t v3;

  v2 = (void *)(*(uint64_t (**)(_QWORD, ik::Tensor *))(**((_QWORD **)this + 5) + 24))(*((_QWORD *)this + 5), a2);
  bzero(v2, v3);
}

void scml::validateTensors(_QWORD *a1@<X0>, void ***a2@<X1>, uint64_t a3@<X8>)
{
  void **v6;
  void **v7;
  unsigned __int8 *v8;
  E5RT::OperandDescriptor *PortDescriptorRef;

  scml::validateTensorNames((uint64_t)a1, a2);
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 1065353216;
  v6 = *a2;
  v7 = a2[1];
  while (v6 != v7)
  {
    v8 = std::__hash_table<std::__hash_value_type<std::string,scml::Config>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,scml::Config>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,scml::Config>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,scml::Config>>>::find<std::string>(a1, (unsigned __int8 *)v6);
    if (!v8)
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    PortDescriptorRef = (E5RT::OperandDescriptor *)E5RT::IOPort::GetPortDescriptorRef(*((E5RT::IOPort **)v8 + 5));
    scml::TensorSpec::validate((uint64_t)v6, PortDescriptorRef, a3);
    v6 += 7;
  }
}

void sub_245C1E9F8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t scml::validateInputs(E5RT::ExecutionStreamOperation *a1, void ***a2)
{
  _QWORD *InputPorts;
  _BYTE v5[40];

  InputPorts = (_QWORD *)E5RT::ExecutionStreamOperation::GetInputPorts(a1);
  scml::validateTensors(InputPorts, a2, (uint64_t)v5);
  return std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v5);
}

uint64_t scml::validateOutputs(E5RT::ExecutionStreamOperation *a1, void ***a2)
{
  _QWORD *OutputPorts;
  _BYTE v5[40];

  OutputPorts = (_QWORD *)E5RT::ExecutionStreamOperation::GetOutputPorts(a1);
  scml::validateTensors(OutputPorts, a2, (uint64_t)v5);
  return std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v5);
}

void scml::loadModelWithFallback(scml *this@<X0>, const ik::core::E5LoadPreCompiledConfig *a2@<X1>, ik::E5Op **a3@<X8>)
{
  uint64_t v5;
  uint64_t v7;
  ik::E5Op *v9;
  std::runtime_error *exception;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  unsigned __int8 v14[24];
  std::__fs::filesystem::path v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v5 = *((unsigned __int8 *)this + 23);
  if ((v5 & 0x80u) != 0)
    v5 = *((_QWORD *)this + 1);
  if (!v5)
    goto LABEL_18;
  v7 = *((unsigned __int8 *)a2 + 23);
  if ((v7 & 0x80u) != 0)
    v7 = *((_QWORD *)a2 + 1);
  if (!v7)
  {
LABEL_18:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "loadModelWithFallback requires precompiled path and mil path");
    __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  v16 = 0;
  v17 = 0;
  v18 = 0;
  std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v15.__pn_, (char *)this);
  std::__fs::filesystem::__status(&v15, 0);
  if (SHIBYTE(v15.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__pn_.__r_.__value_.__l.__data_);
  if (v14[0] && v14[0] != 255)
  {
    v9 = (ik::E5Op *)operator new();
    ik::E5Op::E5Op(v9, this);
  }
  else
  {
    std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v15.__pn_, (char *)a2);
    std::__fs::filesystem::__status(&v15, 0);
    if (SHIBYTE(v15.__pn_.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v15.__pn_.__r_.__value_.__l.__data_);
    if (!v14[0] || v14[0] == 255)
    {
      v11 = v16;
      v12 = v17;
      v13 = __cxa_allocate_exception(0x10uLL);
      if (v11 == v12)
      {
        scml::strCat<char const(&)[37],std::string const&,char const(&)[5],std::string const&>("Model load failed: no file found at ", (uint64_t)this, " or ", (uint64_t)a2, &v15);
        MEMORY[0x249544C64](v13, &v15);
        __cxa_throw(v13, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
      }
      scml::strJoin<std::vector<std::string>>(&v16, (uint64_t)", fallback failed with: ", 24, v14);
      scml::strCat<char const(&)[38],std::string>("Model load failed: ", (uint64_t)v14, &v15);
      MEMORY[0x249544C64](v13, &v15);
      __cxa_throw(v13, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
    }
    v9 = (ik::E5Op *)operator new();
    ik::E5Op::E5Op(v9, a2);
  }
  *a3 = v9;
  v15.__pn_.__r_.__value_.__r.__words[0] = (std::string::size_type)&v16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
}

void sub_245C1EDF8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x245C1EEB8);
}

void sub_245C1EE5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    JUMPOUT(0x245C1EE6CLL);
  JUMPOUT(0x245C1EE78);
}

void sub_245C1EE80()
{
  JUMPOUT(0x245C1EE88);
}

void sub_245C1EE94(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  JUMPOUT(0x245C1EEB8);
}

void sub_245C1EEB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13, uint64_t a14, uint64_t a15, char a16)
{
  a13 = (void **)&a16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a13);
  _Unwind_Resume(a1);
}

void sub_245C1EED0()
{
  void *v0;

  __cxa_free_exception(v0);
  JUMPOUT(0x245C1EEC8);
}

void std::vector<std::string>::push_back[abi:ne180100](std::vector<std::string> *a1, __int128 *a2)
{
  std::allocator<std::string> *p_end_cap;
  std::string *v5;
  std::string *value;
  unint64_t v7;
  __int128 v8;
  std::string *end;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  std::string *v14;
  std::string *v15;
  __int128 v16;
  std::__split_buffer<std::string> __v;

  value = a1->__end_cap_.__value_;
  p_end_cap = (std::allocator<std::string> *)&a1->__end_cap_;
  v5 = value;
  v7 = *((_QWORD *)p_end_cap - 1);
  if (v7 >= (unint64_t)value)
  {
    v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - (unint64_t)a1->__begin_) >> 3);
    v11 = v10 + 1;
    if (v10 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>>::__throw_length_error[abi:ne180100]();
    v12 = 0xAAAAAAAAAAAAAAABLL * (((char *)v5 - (char *)a1->__begin_) >> 3);
    if (2 * v12 > v11)
      v11 = 2 * v12;
    if (v12 >= 0x555555555555555)
      v13 = 0xAAAAAAAAAAAAAAALL;
    else
      v13 = v11;
    __v.__end_cap_.__value_ = p_end_cap;
    if (v13)
      v14 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)p_end_cap, v13);
    else
      v14 = 0;
    v15 = v14 + v10;
    __v.__first_ = v14;
    __v.__begin_ = v15;
    __v.__end_cap_.__value_ = &v14[v13];
    v16 = *a2;
    v15->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v15->__r_.__value_.__l.__data_ = v16;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    __v.__end_ = v15 + 1;
    std::vector<std::string>::__swap_out_circular_buffer(a1, &__v);
    end = a1->__end_;
    std::__split_buffer<std::string>::~__split_buffer(&__v);
  }
  else
  {
    v8 = *a2;
    *(_QWORD *)(v7 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v7 = v8;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    end = (std::string *)(v7 + 24);
    a1->__end_ = (std::vector<std::string>::pointer)(v7 + 24);
  }
  a1->__end_ = end;
}

void sub_245C1F004(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a10);
  _Unwind_Resume(a1);
}

uint64_t scml::strCat<char const(&)[37],std::string const&,char const(&)[5],std::string const&>@<X0>(char *a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v11;
  _QWORD v12[10];
  char v13;
  uint64_t v14;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v11);
  scml::scml_impl::strCat<char const(&)[7],std::string,char const(&)[22],std::string>(&v11, a1, a2, a3, a4);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v12, a5);
  v11 = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)&v12[-1] + *(_QWORD *)(v11 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v12[0] = MEMORY[0x24BEDB848] + 16;
  if (v13 < 0)
    operator delete((void *)v12[8]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x249544EE0](&v14);
}

void sub_245C1F0F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::ostringstream::~ostringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t scml::strJoin<std::vector<std::string>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  _QWORD v16[10];
  char v17;
  uint64_t v18;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v15);
  v9 = *a1;
  v8 = a1[1];
  if (v9 != v8)
  {
    v10 = 0;
    do
    {
      if (v10)
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v15, a2, a3);
      v11 = *(char *)(v9 + 23);
      if (v11 >= 0)
        v12 = v9;
      else
        v12 = *(_QWORD *)v9;
      if (v11 >= 0)
        v13 = *(unsigned __int8 *)(v9 + 23);
      else
        v13 = *(_QWORD *)(v9 + 8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v15, v12, v13);
      v9 += 24;
      --v10;
    }
    while (v9 != v8);
  }
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v16, a4);
  v15 = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)&v16[-1] + *(_QWORD *)(v15 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v16[0] = MEMORY[0x24BEDB848] + 16;
  if (v17 < 0)
    operator delete((void *)v16[8]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x249544EE0](&v18);
}

void sub_245C1F224(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::ostringstream::~ostringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t **std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<scml::Overloaded<scml::TensorSpec::validate(E5RT::OperandDescriptor const&,std::unordered_map<std::string,unsigned long> *)::$_0,scml::TensorSpec::validate(E5RT::OperandDescriptor const&,std::unordered_map<std::string,unsigned long> *)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,int,std::string> const&>(uint64_t **result, _DWORD *a2)
{
  uint64_t v2;

  v2 = (*result)[2];
  if (v2 != -1 && v2 != *a2)
    scml::TensorSpec::throwBadShape(**result, (uint64_t *)(*result)[1]);
  return result;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<scml::Overloaded<scml::TensorSpec::validate(E5RT::OperandDescriptor const&,std::unordered_map<std::string,unsigned long> *)::$_0,scml::TensorSpec::validate(E5RT::OperandDescriptor const&,std::unordered_map<std::string,unsigned long> *)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,int,std::string> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  const std::string::value_type *v7;
  uint64_t v8;
  unsigned __int8 *v9;
  char v10;
  char v11;
  std::string __p;
  uint64_t v13;

  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 24);
  v4 = *(_QWORD *)(*a1 + 48);
  if (v4 == -1)
    goto LABEL_16;
  v5 = *(unsigned __int8 *)(a2 + 23);
  v6 = (char)v5;
  if ((v5 & 0x80u) != 0)
    v5 = *(_QWORD *)(a2 + 8);
  if (v5 != 1)
    goto LABEL_14;
  v7 = *(const std::string::value_type **)a2;
  if (v6 >= 0)
    v7 = (const std::string::value_type *)a2;
  if (*v7 != 63)
  {
LABEL_14:
    v8 = **(_QWORD **)(v2 + 40);
    if (v6 < 0)
    {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
      v4 = *(_QWORD *)(v2 + 48);
    }
    else
    {
      __p = *(std::string *)a2;
    }
    v13 = v4;
    v9 = std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,unsigned long>>(v8, (unsigned __int8 *)&__p, (uint64_t)&__p);
    v11 = v10;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (!v11 && *((_QWORD *)v9 + 5) != *(_QWORD *)(v2 + 48))
LABEL_16:
      scml::TensorSpec::throwBadShape(v3, *(uint64_t **)(v2 + 32));
  }
}

void sub_245C1F35C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,unsigned long>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD v25[3];

  v7 = (_QWORD *)(a1 + 24);
  v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__construct_node_hash<std::pair<std::string const,unsigned long>>(a1, v9, a3, (uint64_t)v25);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *(_QWORD *)v25[0] = *v22;
    *v22 = v25[0];
  }
  else
  {
    *(_QWORD *)v25[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v25[0])
    {
      v23 = *(_QWORD *)(*(_QWORD *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10)
          v23 %= v10;
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v25[0];
    }
  }
  i = (unsigned __int8 *)v25[0];
  ++*v7;
  return i;
}

void sub_245C1F5D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p)
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, __p);
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::__hash_value_type<std::string,unsigned long>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned long>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned long>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned long>>>::__construct_node_hash<std::pair<std::string const,unsigned long>>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  std::string *v9;

  v7 = a1 + 16;
  v8 = operator new(0x30uLL);
  *(_QWORD *)(a4 + 8) = v7;
  *(_QWORD *)a4 = v8;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  v9 = (std::string *)(v8 + 2);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    v8[4] = *(_QWORD *)(a3 + 16);
  }
  v8[5] = *(_QWORD *)(a3 + 24);
  *(_BYTE *)(a4 + 16) = 1;
}

void sub_245C1F680(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<scml::Overloaded<scml::TensorSpec::createTensor(E5RT::TensorDescriptor const&,std::unordered_map<std::string,unsigned long> const&)::$_0,scml::TensorSpec::createTensor(E5RT::TensorDescriptor const&,std::unordered_map<std::string,unsigned long> const&)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,int,std::string> const&>(uint64_t a1, int *a2)
{
  return *a2;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<scml::Overloaded<scml::TensorSpec::createTensor(E5RT::TensorDescriptor const&,std::unordered_map<std::string,unsigned long> const&)::$_0,scml::TensorSpec::createTensor(E5RT::TensorDescriptor const&,std::unordered_map<std::string,unsigned long> const&)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,int,std::string> const&>(uint64_t **a1, unsigned __int8 *a2)
{
  uint64_t *v2;
  uint64_t v3;
  unsigned __int8 *v4;
  uint64_t result;

  v2 = *a1;
  v3 = **a1;
  v4 = std::__hash_table<std::__hash_value_type<std::string,scml::Config>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,scml::Config>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,scml::Config>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,scml::Config>>>::find<std::string>((_QWORD *)(*a1)[2], a2);
  if (v4)
    return *((_QWORD *)v4 + 5);
  result = v2[3];
  if (result == -1)
    scml::TensorSpec::throwBadShape(v3, (uint64_t *)v2[1]);
  return result;
}

std::string *std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(std::string *a1, char *a2)
{
  uint64_t v3;
  BOOL v4;
  uint64_t v5;

  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  LODWORD(v3) = a2[23];
  v4 = (int)v3 < 0;
  v5 = *((_QWORD *)a2 + 1);
  if ((int)v3 < 0)
    a2 = *(char **)a2;
  v3 = v3;
  if (v4)
    v3 = v5;
  std::string::append[abi:ne180100]<char const*,0>(a1, a2, &a2[v3]);
  return a1;
}

void sub_245C1F738(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t scml::scml_impl::strCat<char const(&)[8],std::string const&,char const(&)[8],std::vector<unsigned long> const&,char const(&)[22],std::vector<std::variant<int,std::string>> const&>(_QWORD *a1, char *__s, uint64_t a3, char *a4, uint64_t *a5, char *a6, uint64_t *a7)
{
  size_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;

  v14 = strlen(__s);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)__s, v14);
  v15 = *(char *)(a3 + 23);
  if (v15 >= 0)
    v16 = a3;
  else
    v16 = *(_QWORD *)a3;
  if (v15 >= 0)
    v17 = *(unsigned __int8 *)(a3 + 23);
  else
    v17 = *(_QWORD *)(a3 + 8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, v16, v17);
  return scml::scml_impl::strCat<char const(&)[8],std::vector<unsigned long> const&,char const(&)[22],std::vector<std::variant<int,std::string>> const&>(a1, a4, a5, a6, a7);
}

_QWORD *scml::scml_impl::writeStream<std::string>(_QWORD *a1, const char *a2, int a3)
{
  char *v3;
  _QWORD *v4;
  int v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;

  v3 = (char *)a2;
  v4 = a1;
  if (a3)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"\"", 1);
    v5 = v3[23];
    if (v5 >= 0)
      v6 = v3;
    else
      v6 = *(char **)v3;
    if (v5 >= 0)
      v7 = v3[23];
    else
      v7 = *((_QWORD *)v3 + 1);
    scml::scml_impl::escapeAndWriteStream(v4, v6, v7);
    a1 = v4;
    a2 = "\"";
    v8 = 1;
  }
  else if (a2[23] >= 0)
  {
    v8 = *((unsigned __int8 *)a2 + 23);
  }
  else
  {
    a2 = *(const char **)a2;
    v8 = *((_QWORD *)v3 + 1);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)a2, v8);
  return v4;
}

uint64_t scml::scml_impl::strCat<char const(&)[8],std::vector<unsigned long> const&,char const(&)[22],std::vector<std::variant<int,std::string>> const&>(_QWORD *a1, char *__s, uint64_t *a3, char *a4, uint64_t *a5)
{
  size_t v10;

  v10 = strlen(__s);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)__s, v10);
  scml::scml_impl::writeStream<std::vector<unsigned long>>(a1, a3);
  return scml::scml_impl::strCat<char const(&)[22],std::vector<std::variant<int,std::string>> const&>(a1, a4, a5);
}

_QWORD *scml::scml_impl::writeStream<std::vector<unsigned long>>(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *a2;
  v4 = a2[1];
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"{", 1);
  if (v3 != v4)
  {
    v5 = 0;
    do
    {
      if (v5)
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)", ", 2);
      v3 += 8;
      std::ostream::operator<<();
      --v5;
    }
    while (v3 != v4);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"}", 1);
  return a1;
}

uint64_t scml::scml_impl::strCat<char const(&)[22],std::vector<std::variant<int,std::string>> const&>(_QWORD *a1, char *__s, uint64_t *a3)
{
  size_t v6;

  v6 = strlen(__s);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)__s, v6);
  scml::scml_impl::writeStream<std::vector<std::variant<int,std::string>>>(a1, a3);
  return scml::scml_impl::strCat<>(a1);
}

_QWORD *scml::scml_impl::writeStream<std::vector<std::variant<int,std::string>>>(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *a2;
  v4 = a2[1];
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"{", 1);
  if (v3 != v4)
  {
    v5 = 0;
    do
    {
      if (v5)
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)", ", 2);
      scml::scml_impl::writeStream<int,std::string>((uint64_t)a1, v3, 1);
      v3 += 32;
      --v5;
    }
    while (v3 != v4);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"}", 1);
  return a1;
}

uint64_t scml::scml_impl::writeStream<int,std::string>(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  _QWORD v6[2];
  char v7;
  _QWORD *v8;

  v7 = a3;
  v6[0] = a1;
  v6[1] = &v7;
  v3 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v3 == -1)
    std::__throw_bad_variant_access[abi:ne180100]();
  v8 = v6;
  ((void (*)(_QWORD **))off_2516E49D0[v3])(&v8);
  return a1;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8ne180100IONS1_9__variant15__value_visitorIZN4scml9scml_impl11writeStreamIJiNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEERNS_13basic_ostreamIcSD_EESJ_RKNS_7variantIJDpT_EEEbEUlRKT_E_EEJRKNS0_6__baseILNS0_6_TraitE1EJiSG_EEEEEEDcSQ_DpT0_()
{
  return std::ostream::operator<<();
}

_QWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8ne180100IONS1_9__variant15__value_visitorIZN4scml9scml_impl11writeStreamIJiNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEERNS_13basic_ostreamIcSD_EESJ_RKNS_7variantIJDpT_EEEbEUlRKT_E_EEJRKNS0_6__baseILNS0_6_TraitE1EJiSG_EEEEEEDcSQ_DpT0_(_QWORD ***a1, const char *a2)
{
  return scml::scml_impl::writeStream<std::string>(**a1, a2, *(unsigned __int8 *)(*a1)[1]);
}

uint64_t scml::scml_impl::strCat<char const(&)[8],std::string const&,char const(&)[7],std::string,char const(&)[22],std::string>(_QWORD *a1, char *__s, uint64_t a3, char *a4, uint64_t a5, char *a6, uint64_t a7)
{
  size_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;

  v14 = strlen(__s);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)__s, v14);
  v15 = *(char *)(a3 + 23);
  if (v15 >= 0)
    v16 = a3;
  else
    v16 = *(_QWORD *)a3;
  if (v15 >= 0)
    v17 = *(unsigned __int8 *)(a3 + 23);
  else
    v17 = *(_QWORD *)(a3 + 8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, v16, v17);
  return scml::scml_impl::strCat<char const(&)[7],std::string,char const(&)[22],std::string>(a1, a4, a5, a6, a7);
}

uint64_t scml::scml_impl::strCat<char const(&)[7],std::string,char const(&)[22],std::string>(_QWORD *a1, char *__s, uint64_t a3, char *a4, uint64_t a5)
{
  size_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;

  v10 = strlen(__s);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)__s, v10);
  v11 = *(char *)(a3 + 23);
  if (v11 >= 0)
    v12 = a3;
  else
    v12 = *(_QWORD *)a3;
  if (v11 >= 0)
    v13 = *(unsigned __int8 *)(a3 + 23);
  else
    v13 = *(_QWORD *)(a3 + 8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, v12, v13);
  return scml::scml_impl::strCat<char const(&)[3],std::string>(a1, a4, a5);
}

uint64_t scml::scml_impl::strCat<char const(&)[8],std::string const&,char const(&)[21]>(_QWORD *a1, char *__s, uint64_t a3, char *a4)
{
  size_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;

  v8 = strlen(__s);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)__s, v8);
  v9 = *(char *)(a3 + 23);
  if (v9 >= 0)
    v10 = a3;
  else
    v10 = *(_QWORD *)a3;
  if (v9 >= 0)
    v11 = *(unsigned __int8 *)(a3 + 23);
  else
    v11 = *(_QWORD *)(a3 + 8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, v10, v11);
  return scml::scml_impl::strCat<char const(&)[11]>(a1, a4);
}

void std::__tree<std::string>::destroy(uint64_t a1, char *a2)
{
  if (a2)
  {
    std::__tree<std::string>::destroy(a1, *(_QWORD *)a2);
    std::__tree<std::string>::destroy(a1, *((_QWORD *)a2 + 1));
    if (a2[55] < 0)
      operator delete(*((void **)a2 + 4));
    operator delete(a2);
  }
}

uint64_t *std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(uint64_t **a1, void **a2, uint64_t a3)
{
  uint64_t **v5;
  uint64_t *result;
  uint64_t *v7;
  uint64_t v8;

  v5 = (uint64_t **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)a1, &v8, a2);
  result = *v5;
  if (!*v5)
  {
    std::__tree<std::string>::__construct_node<std::string const&>((uint64_t)a1, a3, (uint64_t)&v7);
    std::__tree<std::string>::__insert_node_at(a1, v8, v5, v7);
    return v7;
  }
  return result;
}

_QWORD *std::__tree<std::string>::__find_equal<std::string>(uint64_t a1, _QWORD *a2, void **a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v7;
  _QWORD *v8;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        v7 = v4;
        v8 = v4 + 4;
        if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a3, (void **)v4 + 4) & 0x80) == 0)
          break;
        v4 = (_QWORD *)*v7;
        v5 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v8, a3) & 0x80) == 0)
        break;
      v5 = v7 + 1;
      v4 = (_QWORD *)v7[1];
    }
    while (v4);
  }
  else
  {
    v7 = (_QWORD *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

void std::__tree<std::string>::__construct_node<std::string const&>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *v7;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x38uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  v7 = (std::string *)(v6 + 32);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    v7->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
  }
  *(_BYTE *)(a3 + 16) = 1;
}

void sub_245C1FE68(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::string,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::string>::__insert_node_at(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  uint64_t *v5;
  uint64_t *result;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

uint64_t std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(_QWORD *a1, void **a2)
{
  size_t v2;
  size_t v3;
  int v4;
  void *v5;
  size_t v6;

  v2 = *((unsigned __int8 *)a1 + 23);
  v3 = a1[1];
  if ((v2 & 0x80u) != 0)
  {
    a1 = (_QWORD *)*a1;
    v2 = v3;
  }
  v4 = *((char *)a2 + 23);
  if (v4 >= 0)
    v5 = a2;
  else
    v5 = *a2;
  if (v4 >= 0)
    v6 = *((unsigned __int8 *)a2 + 23);
  else
    v6 = (size_t)a2[1];
  return std::operator<=>[abi:ne180100]<char,std::char_traits<char>>(a1, v2, v5, v6);
}

uint64_t std::operator<=>[abi:ne180100]<char,std::char_traits<char>>(const void *a1, size_t a2, void *__s2, size_t a4)
{
  size_t v7;
  int v8;

  if (a4 >= a2)
    v7 = a2;
  else
    v7 = a4;
  v8 = memcmp(a1, __s2, v7);
  if (v8)
  {
    if ((v8 & 0x80000000) == 0)
      return 1;
  }
  else
  {
    if (a2 == a4)
      return 0;
    if (a2 >= a4)
      return 1;
  }
  return 255;
}

uint64_t *std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *((_BYTE *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      v2 = (uint64_t *)a2[2];
      if (*((_BYTE *)v2 + 24))
        return result;
      v3 = (uint64_t *)v2[2];
      v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), v5 = (_BYTE *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            v9 = (uint64_t **)a2[2];
          }
          else
          {
            v9 = (uint64_t **)v2[1];
            v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = v9;
            *v9 = v2;
            v2[2] = (uint64_t)v9;
            v3 = v9[2];
            v2 = (uint64_t *)*v3;
          }
          *((_BYTE *)v9 + 24) = 1;
          *((_BYTE *)v3 + 24) = 0;
          v13 = v2[1];
          *v3 = v13;
          if (v13)
            *(_QWORD *)(v13 + 16) = v3;
          v2[2] = v3[2];
          *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          v11 = a2[1];
          *v2 = v11;
          if (v11)
          {
            *(_QWORD *)(v11 + 16) = v2;
            v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((_BYTE *)a2 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v2 = (uint64_t *)v3[1];
        v12 = *v2;
        v3[1] = *v2;
        if (v12)
          *(_QWORD *)(v12 + 16) = v3;
        v2[2] = v3[2];
        *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
        *v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((_BYTE *)v2 + 24) = 1;
      a2 = v3;
      *((_BYTE *)v3 + 24) = v3 == result;
      *v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::string,void *>>>::operator()[abi:ne180100](uint64_t a1, void **__p)
{
  if (*(_BYTE *)(a1 + 8))
  {
    if (*((char *)__p + 55) < 0)
      operator delete(__p[4]);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

uint64_t scml::scml_impl::strCat<char const(&)[20],std::set<std::string> &,char const(&)[12],std::set<std::string> &>(_QWORD *a1, char *__s, _QWORD *a3, char *a4, _QWORD *a5)
{
  size_t v10;

  v10 = strlen(__s);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)__s, v10);
  scml::scml_impl::writeStream<std::set<std::string>>(a1, a3);
  return scml::scml_impl::strCat<char const(&)[12],std::set<std::string> &>(a1, a4, a5);
}

_QWORD *scml::scml_impl::writeStream<std::set<std::string>>(_QWORD *a1, _QWORD *a2)
{
  const char *v3;
  const char *v4;
  uint64_t v5;
  const char *v6;
  const char *v7;
  BOOL v8;

  v3 = (const char *)(a2 + 1);
  v4 = (const char *)*a2;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"{", 1);
  if (v4 != v3)
  {
    v5 = 0;
    do
    {
      if (v5)
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)", ", 2);
      scml::scml_impl::writeStream<std::string>(a1, v4 + 32, 1);
      v6 = (const char *)*((_QWORD *)v4 + 1);
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = *(const char **)v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (const char *)*((_QWORD *)v4 + 2);
          v8 = *(_QWORD *)v7 == (_QWORD)v4;
          v4 = v7;
        }
        while (!v8);
      }
      ++v5;
      v4 = v7;
    }
    while (v7 != v3);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"}", 1);
  return a1;
}

uint64_t scml::scml_impl::strCat<char const(&)[12],std::set<std::string> &>(_QWORD *a1, char *__s, _QWORD *a3)
{
  size_t v6;

  v6 = strlen(__s);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)__s, v6);
  scml::scml_impl::writeStream<std::set<std::string>>(a1, a3);
  return scml::scml_impl::strCat<>(a1);
}

ik::E5Op *ik::E5Op::E5Op(ik::E5Op *this, const ik::core::E5LoadPreCompiledConfig *a2)
{
  std::string *v4;
  __int128 v5;
  int v6;
  const std::string::value_type *v7;
  std::string::size_type v8;
  std::string *v9;
  __int128 v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t v15;
  std::__shared_weak_count_vtbl *v17;
  std::string v18;
  std::string __p;
  std::string v20;
  std::string v21;
  std::string v22;

  if (*((_BYTE *)a2 + 72))
  {
    if (*((char *)a2 + 71) < 0)
      std::string::__init_copy_ctor_external(&v22, *((const std::string::value_type **)a2 + 6), *((_QWORD *)a2 + 7));
    else
      v22 = *(std::string *)((_BYTE *)a2 + 2);
  }
  else
  {
    std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v18, (char *)a2);
    std::__fs::filesystem::path::stem[abi:ne180100]((const std::__fs::filesystem::path *)&v18, (uint64_t)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v20, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    else
      v20 = __p;
    v4 = std::string::append(&v20, "_", 1uLL);
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v21.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v5;
    v4->__r_.__value_.__l.__size_ = 0;
    v4->__r_.__value_.__r.__words[2] = 0;
    v4->__r_.__value_.__r.__words[0] = 0;
    v6 = *((char *)a2 + 47);
    if (v6 >= 0)
      v7 = (char *)a2 + 24;
    else
      v7 = (const std::string::value_type *)*((_QWORD *)a2 + 3);
    if (v6 >= 0)
      v8 = *((unsigned __int8 *)a2 + 47);
    else
      v8 = *((_QWORD *)a2 + 4);
    v9 = std::string::append(&v21, v7, v8);
    v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v22.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v21.__r_.__value_.__l.__data_);
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v20.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v18.__r_.__value_.__l.__data_);
  }
  E5RT::ExecutionStreamOperation::CreatePreCompiledComputeOp();
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
  if (v17)
  {
    v11 = (std::__shared_weak_count *)operator new();
    v11->__vftable = (std::__shared_weak_count_vtbl *)&unk_2516E44E0;
    v11->__shared_owners_ = 0;
    v11->__shared_weak_owners_ = 0;
    v11[1].__vftable = v17;
  }
  else
  {
    v11 = 0;
  }
  v12 = operator new();
  *(_QWORD *)v12 = v17;
  *(_QWORD *)(v12 + 8) = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
    *(_QWORD *)(v12 + 48) = 0;
    *(_OWORD *)(v12 + 16) = 0u;
    *(_OWORD *)(v12 + 32) = 0u;
    *(_DWORD *)(v12 + 56) = 1065353216;
    *(_QWORD *)this = v12;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  else
  {
    *(_QWORD *)(v12 + 48) = 0;
    *(_OWORD *)(v12 + 16) = 0u;
    *(_OWORD *)(v12 + 32) = 0u;
    *(_DWORD *)(v12 + 56) = 1065353216;
    *(_QWORD *)this = v12;
  }
  return this;
}

void sub_245C20570(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a24 < 0)
    operator delete(__p);
  if (a18 < 0)
    operator delete(a13);
  _Unwind_Resume(exception_object);
}

double std::__fs::filesystem::path::stem[abi:ne180100]@<D0>(const std::__fs::filesystem::path *a1@<X0>, uint64_t a2@<X8>)
{
  std::__fs::filesystem::path::__string_view v3;
  __int128 *p_dst;
  std::basic_string_view<_CharT, _Traits>::size_type v5;
  std::basic_string_view<_CharT, _Traits>::size_type v6;
  double result;
  __int128 __dst;
  unint64_t v9;

  v3 = std::__fs::filesystem::path::__stem(a1);
  if (v3.__size_ >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v3.__size_ >= 0x17)
  {
    v5 = (v3.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3.__size_ | 7) != 0x17)
      v5 = v3.__size_ | 7;
    v6 = v5 + 1;
    p_dst = (__int128 *)operator new(v5 + 1);
    *((_QWORD *)&__dst + 1) = v3.__size_;
    v9 = v6 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
  }
  else
  {
    HIBYTE(v9) = v3.__size_;
    p_dst = &__dst;
    if (!v3.__size_)
      goto LABEL_9;
  }
  memmove(p_dst, v3.__data_, v3.__size_);
LABEL_9:
  *((_BYTE *)p_dst + v3.__size_) = 0;
  result = *(double *)&__dst;
  *(_OWORD *)a2 = __dst;
  *(_QWORD *)(a2 + 16) = v9;
  return result;
}

void std::__shared_ptr_pointer<E5RT::ExecutionStreamOperation  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x249544F58);
}

uint64_t std::__shared_ptr_pointer<E5RT::ExecutionStreamOperation  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<E5RT::ExecutionStreamOperation  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

ik::E5Op *ik::E5Op::E5Op(ik::E5Op *this, const ik::core::E5LoadMILConfig *a2)
{
  E5RT::E5CompilerOptions *Compiler;
  uint64_t ExportedFunctions;
  _QWORD *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  std::string *v14;
  __int128 v15;
  int v16;
  const std::string::value_type *v17;
  std::string::size_type v18;
  std::string *v19;
  __int128 v20;
  unint64_t *v21;
  unint64_t v22;
  std::string::size_type v23;
  std::__shared_weak_count *size;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  E5RT::ProgramLibrary *v31;
  E5RT::E5CompilerOptions *v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  void *exception;
  int v40;
  const std::string::value_type *v41;
  std::string::size_type v42;
  std::string *v43;
  __int128 v44;
  std::__shared_weak_count_vtbl *v45;
  std::string v46;
  std::string __p;
  uint64_t v48;
  std::__shared_weak_count *v49;
  uint64_t v50;
  __int128 v51;
  std::string v52;
  std::string v53;
  std::string v54;
  _BYTE v55[16];
  uint64_t v56;
  E5RT::ProgramLibrary *v57;
  E5RT::E5CompilerOptions *v58;

  Compiler = (E5RT::E5CompilerOptions *)E5RT::E5Compiler::GetCompiler(this);
  E5RT::E5CompilerOptions::Create(Compiler);
  if (*((_QWORD *)a2 + 10) != *((_QWORD *)a2 + 11))
    E5RT::E5CompilerOptions::SetComputeDeviceTypesAllowed();
  if (*((_BYTE *)a2 + 128))
    E5RT::E5CompilerOptions::SetForceRecompilation(v58);
  if (*((_QWORD *)a2 + 13) != *((_QWORD *)a2 + 14))
    E5RT::E5CompilerOptions::SetPreferredCpuBackends();
  E5RT::E5Compiler::Compile();
  ExportedFunctions = E5RT::ProgramLibrary::GetExportedFunctions(v57);
  v6 = (_QWORD *)std::unordered_map<std::string,std::shared_ptr<E5RT::ProgramFunction>>::unordered_map((uint64_t)v55, ExportedFunctions);
  if (!std::__hash_table<std::__hash_value_type<std::string,scml::Config>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,scml::Config>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,scml::Config>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,scml::Config>>>::find<std::string>(v6, (unsigned __int8 *)a2 + 24))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(" not found in ", &v52, &v53);
    v40 = *((char *)a2 + 23);
    if (v40 >= 0)
      v41 = (const std::string::value_type *)a2;
    else
      v41 = *(const std::string::value_type **)a2;
    if (v40 >= 0)
      v42 = *((unsigned __int8 *)a2 + 23);
    else
      v42 = *((_QWORD *)a2 + 1);
    v43 = std::string::append(&v53, v41, v42);
    v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
    v54.__r_.__value_.__r.__words[2] = v43->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v54.__r_.__value_.__l.__data_ = v44;
    v43->__r_.__value_.__l.__size_ = 0;
    v43->__r_.__value_.__r.__words[2] = 0;
    v43->__r_.__value_.__r.__words[0] = 0;
    MEMORY[0x249544C64](exception, &v54);
    __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  v7 = *(_QWORD *)(v56 + 40);
  v8 = *(std::__shared_weak_count **)(v56 + 48);
  *(_QWORD *)&v51 = v7;
  *((_QWORD *)&v51 + 1) = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    v49 = v8;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  else
  {
    v49 = 0;
  }
  v48 = v7;
  E5RT::PrecompiledComputeOpCreateOptions::Create();
  if (v49)
  {
    v12 = &v49->__shared_owners_;
    do
      v13 = __ldaxr((unint64_t *)v12);
    while (__stlxr(v13 - 1, (unint64_t *)v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  if (*((_BYTE *)a2 + 72))
  {
    if (*((char *)a2 + 71) < 0)
      std::string::__init_copy_ctor_external(&v54, *((const std::string::value_type **)a2 + 6), *((_QWORD *)a2 + 7));
    else
      v54 = *(std::string *)((_BYTE *)a2 + 2);
  }
  else
  {
    std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v46, (char *)a2);
    std::__fs::filesystem::path::stem[abi:ne180100]((const std::__fs::filesystem::path *)&v46, (uint64_t)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v52, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    else
      v52 = __p;
    v14 = std::string::append(&v52, "_", 1uLL);
    v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v53.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    v16 = *((char *)a2 + 47);
    if (v16 >= 0)
      v17 = (char *)a2 + 24;
    else
      v17 = (const std::string::value_type *)*((_QWORD *)a2 + 3);
    if (v16 >= 0)
      v18 = *((unsigned __int8 *)a2 + 47);
    else
      v18 = *((_QWORD *)a2 + 4);
    v19 = std::string::append(&v53, v17, v18);
    v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v54.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v54.__r_.__value_.__l.__data_ = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v53.__r_.__value_.__l.__data_);
    if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v52.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v46.__r_.__value_.__l.__data_);
  }
  *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v51;
  if (*((_QWORD *)&v51 + 1))
  {
    v21 = (unint64_t *)(*((_QWORD *)&v51 + 1) + 8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  E5RT::PrecompiledComputeOpCreateOptions::Create();
  v23 = v52.__r_.__value_.__r.__words[0];
  v52.__r_.__value_.__r.__words[0] = 0;
  if (v23)
    (*(void (**)(std::string::size_type))(*(_QWORD *)v23 + 8))(v23);
  size = (std::__shared_weak_count *)v53.__r_.__value_.__l.__size_;
  if (v53.__r_.__value_.__l.__size_)
  {
    v25 = (unint64_t *)(v53.__r_.__value_.__l.__size_ + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  E5RT::PrecompiledComputeOpCreateOptions::SetOperationName();
  if (*((_QWORD *)a2 + 17))
  {
    E5RT::ComputeGPUDevice::GetComputeGPUDeviceForMTLDevice();
    E5RT::PrecompiledComputeOpCreateOptions::SetOverrideComputeGPUDevice();
  }
  E5RT::ExecutionStreamOperation::CreatePreCompiledComputeOp();
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v54.__r_.__value_.__l.__data_);
  v27 = v50;
  v50 = 0;
  if (v27)
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
  v28 = (std::__shared_weak_count *)*((_QWORD *)&v51 + 1);
  if (*((_QWORD *)&v51 + 1))
  {
    v29 = (unint64_t *)(*((_QWORD *)&v51 + 1) + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::~__hash_table((uint64_t)v55);
  v31 = v57;
  v57 = 0;
  if (v31)
    (*(void (**)(E5RT::ProgramLibrary *))(*(_QWORD *)v31 + 8))(v31);
  v32 = v58;
  v58 = 0;
  if (v32)
    (*(void (**)(E5RT::E5CompilerOptions *))(*(_QWORD *)v32 + 8))(v32);
  if (v45)
  {
    v33 = (std::__shared_weak_count *)operator new();
    v33->__vftable = (std::__shared_weak_count_vtbl *)&unk_2516E44E0;
    v33->__shared_owners_ = 0;
    v33->__shared_weak_owners_ = 0;
    v33[1].__vftable = v45;
  }
  else
  {
    v33 = 0;
  }
  v34 = operator new();
  *(_QWORD *)v34 = v45;
  *(_QWORD *)(v34 + 8) = v33;
  if (v33)
  {
    v35 = (unint64_t *)&v33->__shared_owners_;
    do
      v36 = __ldxr(v35);
    while (__stxr(v36 + 1, v35));
    *(_QWORD *)(v34 + 48) = 0;
    *(_OWORD *)(v34 + 16) = 0u;
    *(_OWORD *)(v34 + 32) = 0u;
    *(_DWORD *)(v34 + 56) = 1065353216;
    *(_QWORD *)this = v34;
    do
      v37 = __ldaxr(v35);
    while (__stlxr(v37 - 1, v35));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  else
  {
    *(_QWORD *)(v34 + 48) = 0;
    *(_OWORD *)(v34 + 16) = 0u;
    *(_OWORD *)(v34 + 32) = 0u;
    *(_DWORD *)(v34 + 56) = 1065353216;
    *(_QWORD *)this = v34;
  }
  return this;
}

void sub_245C20CA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  int v41;
  void *v42;
  uint64_t v43;
  uint64_t v45;
  uint64_t v46;

  if (*(char *)(v43 - 105) < 0)
    operator delete(*(void **)(v43 - 128));
  if (a41 < 0)
    operator delete(__p);
  if (a34 < 0)
  {
    operator delete(a29);
    if ((v41 & 1) == 0)
    {
LABEL_10:
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::~__hash_table(v43 - 104);
      v45 = *(_QWORD *)(v43 - 64);
      *(_QWORD *)(v43 - 64) = 0;
      if (v45)
        (*(void (**)(uint64_t))(*(_QWORD *)v45 + 8))(v45);
      v46 = *(_QWORD *)(v43 - 56);
      *(_QWORD *)(v43 - 56) = 0;
      if (v46)
        (*(void (**)(uint64_t))(*(_QWORD *)v46 + 8))(v46);
      _Unwind_Resume(a1);
    }
  }
  else if (!v41)
  {
    goto LABEL_10;
  }
  __cxa_free_exception(v42);
  goto LABEL_10;
}

void sub_245C20E54()
{
  JUMPOUT(0x245C20E1CLL);
}

uint64_t std::unordered_map<std::string,std::shared_ptr<E5RT::ProgramFunction>>::unordered_map(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1, *(_QWORD *)(a2 + 8));
  for (i = *(unsigned __int8 **)(a2 + 16); i; i = *(unsigned __int8 **)i)
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<E5RT::IOPort>> const&>(a1, i + 16, (__int128 *)i + 1);
  return a1;
}

void sub_245C20EB8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<E5RT::IOPort>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void scml::Deferred::~Deferred(scml::Deferred *this)
{
  uint64_t v2;
  scml::Deferred *v3;
  uint64_t v4;

  v2 = *((_QWORD *)this + 3);
  if (!v2)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 48))(v2);
  v3 = (scml::Deferred *)*((_QWORD *)this + 3);
  if (v3 == this)
  {
    v4 = 4;
    v3 = this;
  }
  else
  {
    if (!v3)
      return;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
}

uint64_t *scml::ClipImageEncoder::ClipImageEncoder(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = operator new();
  scml::ClipImageEncoder::Impl::Impl(v4, a2);
  *a1 = v4;
  return a1;
}

void sub_245C20F9C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x249544F58](v1, 0x1080C402F06E0BBLL);
  _Unwind_Resume(a1);
}

void scml::ClipImageEncoder::~ClipImageEncoder(scml::ClipImageEncoder *this)
{
  uint64_t v1;

  v1 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v1)
    std::default_delete<scml::ClipImageEncoder::Impl>::operator()[abi:ne180100]((uint64_t)this, v1);
}

{
  uint64_t v1;

  v1 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v1)
    std::default_delete<scml::ClipImageEncoder::Impl>::operator()[abi:ne180100]((uint64_t)this, v1);
}

id scml::ClipImageEncoder::getEmbeddingObservation(scml::ClipImageEncoder *this, CVPixelBufferRef pixelBuffer)
{
  __CVBuffer *v2;
  size_t Width;
  size_t v5;
  size_t Height;
  uint64_t v7;
  size_t v8;
  __CVBuffer *v9;
  __CVBuffer *v10;
  id v11;
  void *v12;
  id v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  BOOL v20;
  std::runtime_error *v21;
  id v22;
  void *v24;
  std::runtime_error *exception;
  void *v26;
  id v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  id v32;
  __CVBuffer *v33;
  _BYTE v34[128];
  size_t v35[4];

  v2 = pixelBuffer;
  v35[2] = *MEMORY[0x24BDAC8D0];
  v33 = 0;
  Width = CVPixelBufferGetWidth(pixelBuffer);
  v5 = *(_QWORD *)(*(_QWORD *)this + 72);
  if (Width != v5)
  {
    v8 = *(_QWORD *)(*(_QWORD *)this + 80);
LABEL_6:
    v35[0] = v5;
    v35[1] = v8;
    v10 = scaleCVPixelBuffer(v2, v35);
    v9 = v10;
    v33 = v10;
    if (!v10)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Failed to resize pixel buffer");
      __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
    }
    v7 = *(_QWORD *)this;
    v2 = v10;
    goto LABEL_8;
  }
  Height = CVPixelBufferGetHeight(v2);
  v7 = *(_QWORD *)this;
  v8 = *(_QWORD *)(*(_QWORD *)this + 80);
  if (Height != v8)
  {
    v5 = *(_QWORD *)(v7 + 72);
    goto LABEL_6;
  }
  v9 = 0;
LABEL_8:
  std::mutex::lock((std::mutex *)v7);
  v11 = *(id *)(*(_QWORD *)this + 64);
  v32 = 0;
  v27 = v11;
  objc_msgSend(v11, "processImage:withOptions:error:", v2, MEMORY[0x24BDBD1B8], &v32);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = v32;
  v26 = v13;
  if (!v12)
  {
    v24 = v13;
    v21 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    scml::makeException("Embedding query failed", 0x16uLL, v24, (uint64_t)v21);
LABEL_22:
    __cxa_throw(v21, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  v30 = 0u;
  v31 = 0u;
  v28 = 0u;
  v29 = 0u;
  v14 = v12;
  v15 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v28, v34, 16);
  if (!v15)
    goto LABEL_17;
  v16 = *(_QWORD *)v29;
LABEL_11:
  v17 = 0;
  while (1)
  {
    if (*(_QWORD *)v29 != v16)
      objc_enumerationMutation(v14);
    v18 = *(void **)(*((_QWORD *)&v28 + 1) + 8 * v17);
    objc_msgSend(v18, "data", v26);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    v20 = objc_msgSend(v19, "length") == 0;

    if (!v20)
      break;
    if (v15 == ++v17)
    {
      v15 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v28, v34, 16);
      if (!v15)
      {
LABEL_17:

        v21 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v21, "Embedding query failed: no embedding in result");
        goto LABEL_22;
      }
      goto LABEL_11;
    }
  }
  v22 = v18;

  std::mutex::unlock((std::mutex *)v7);
  v33 = 0;
  if (v9)
    CVPixelBufferRelease(v9);
  return v22;
}

void sub_245C212D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, __CVBuffer *a20)
{
  void *v20;

  __cxa_free_exception(v20);
  std::unique_ptr<__CVBuffer,scml::NonNullDeleter<&(CVPixelBufferRelease)>>::reset[abi:ne180100](&a20, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<__CVBuffer,scml::NonNullDeleter<&(CVPixelBufferRelease)>>::reset[abi:ne180100](__CVBuffer **a1, __CVBuffer *a2)
{
  __CVBuffer *v3;

  v3 = *a1;
  *a1 = a2;
  if (v3)
    CVPixelBufferRelease(v3);
}

void scml::ClipImageEncoder::getEmbedding(scml::ClipImageEncoder *this@<X0>, __CVBuffer *a2@<X1>, uint64_t a3@<X8>)
{
  id v4;

  scml::ClipImageEncoder::getEmbeddingObservation(this, a2);
  v4 = (id)objc_claimAutoreleasedReturnValue();
  scml::ClipImageEncoder::toEmbeddingVec(v4, a3);

}

void sub_245C213E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void scml::ClipImageEncoder::toEmbeddingVec(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  unint64_t i;
  unint64_t v11;
  _DWORD *v12;
  _DWORD *v13;
  _DWORD *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  int v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  unint64_t j;
  unint64_t v34;
  _DWORD *v35;
  _DWORD *v36;
  _DWORD *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  int v44;
  void *exception;
  std::runtime_error *v46;
  id v47;
  _QWORD v48[3];

  v3 = a1;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v47 = v3;
  std::vector<float>::reserve((void **)a2, objc_msgSend(v3, "count"));
  v4 = objc_msgSend(v47, "type");
  if (v4 != 1)
  {
    if (v4 != 2)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      objc_msgSend(v47, "type");
      scml::strCat<char const(&)[32],MADUnifiedEmbeddingVersion &>("Unhandled VCPImageEmbeddingObservation type: ", v48);
      MEMORY[0x249544C64](exception, v48);
      __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
    }
    objc_msgSend(v47, "data");
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v6 = objc_msgSend(v5, "length");
    v7 = objc_msgSend(v47, "count");

    if (v6 == 4 * v7)
    {
      objc_msgSend(v47, "data");
      v8 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      v9 = objc_msgSend(v8, "bytes");

      for (i = 0; i < objc_msgSend(v47, "count"); ++i)
      {
        v12 = *(_DWORD **)(a2 + 8);
        v11 = *(_QWORD *)(a2 + 16);
        if ((unint64_t)v12 >= v11)
        {
          v14 = *(_DWORD **)a2;
          v15 = ((uint64_t)v12 - *(_QWORD *)a2) >> 2;
          v16 = v15 + 1;
          if ((unint64_t)(v15 + 1) >> 62)
            std::vector<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>>::__throw_length_error[abi:ne180100]();
          v17 = v11 - (_QWORD)v14;
          if (v17 >> 1 > v16)
            v16 = v17 >> 1;
          if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL)
            v18 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v18 = v16;
          if (v18)
          {
            v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(a2 + 16, v18);
            v14 = *(_DWORD **)a2;
            v12 = *(_DWORD **)(a2 + 8);
          }
          else
          {
            v19 = 0;
          }
          v20 = &v19[4 * v15];
          *(_DWORD *)v20 = *(_DWORD *)(v9 + 4 * i);
          v13 = v20 + 4;
          while (v12 != v14)
          {
            v21 = *--v12;
            *((_DWORD *)v20 - 1) = v21;
            v20 -= 4;
          }
          *(_QWORD *)a2 = v20;
          *(_QWORD *)(a2 + 8) = v13;
          *(_QWORD *)(a2 + 16) = &v19[4 * v18];
          if (v14)
            operator delete(v14);
        }
        else
        {
          *v12 = *(_DWORD *)(v9 + 4 * i);
          v13 = v12 + 1;
        }
        *(_QWORD *)(a2 + 8) = v13;
      }
      goto LABEL_43;
    }
LABEL_47:
    v46 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v46, "Unexpected embedding length");
    __cxa_throw(v46, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  objc_msgSend(v47, "data");
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  v23 = objc_msgSend(v22, "length");
  v24 = objc_msgSend(v47, "count");

  if (v23 != 2 * v24)
    goto LABEL_47;
  objc_msgSend(v47, "data");
  v25 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v26 = objc_msgSend(v25, "bytes");

  for (j = 0; j < objc_msgSend(v47, "count"); ++j)
  {
    _H0 = *(_WORD *)(v26 + 2 * j);
    __asm { FCVT            S8, H0 }
    v35 = *(_DWORD **)(a2 + 8);
    v34 = *(_QWORD *)(a2 + 16);
    if ((unint64_t)v35 >= v34)
    {
      v37 = *(_DWORD **)a2;
      v38 = ((uint64_t)v35 - *(_QWORD *)a2) >> 2;
      v39 = v38 + 1;
      if ((unint64_t)(v38 + 1) >> 62)
        std::vector<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>>::__throw_length_error[abi:ne180100]();
      v40 = v34 - (_QWORD)v37;
      if (v40 >> 1 > v39)
        v39 = v40 >> 1;
      if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFFCLL)
        v41 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v41 = v39;
      if (v41)
      {
        v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(a2 + 16, v41);
        v37 = *(_DWORD **)a2;
        v35 = *(_DWORD **)(a2 + 8);
      }
      else
      {
        v42 = 0;
      }
      v43 = &v42[4 * v38];
      *(_DWORD *)v43 = _S8;
      v36 = v43 + 4;
      while (v35 != v37)
      {
        v44 = *--v35;
        *((_DWORD *)v43 - 1) = v44;
        v43 -= 4;
      }
      *(_QWORD *)a2 = v43;
      *(_QWORD *)(a2 + 8) = v36;
      *(_QWORD *)(a2 + 16) = &v42[4 * v41];
      if (v37)
        operator delete(v37);
    }
    else
    {
      *v35 = _S8;
      v36 = v35 + 1;
    }
    *(_QWORD *)(a2 + 8) = v36;
  }
LABEL_43:

}

void sub_245C21770(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;
  void *v18;
  int v19;
  void *v21;

  if (a17 < 0)
  {
    operator delete(__p);
    if ((v19 & 1) == 0)
    {
LABEL_6:
      v21 = *(void **)v17;
      if (*(_QWORD *)v17)
      {
        *(_QWORD *)(v17 + 8) = v21;
        operator delete(v21);
      }

      _Unwind_Resume(a1);
    }
  }
  else if (!v19)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v18);
  goto LABEL_6;
}

uint64_t scml::ClipImageEncoder::embeddingVersion(void *__s1, size_t __n)
{
  uint64_t v4;
  void *exception;
  _QWORD v7[3];
  uint64_t v8[2];

  v4 = 0;
  v8[0] = (uint64_t)__s1;
  v8[1] = __n;
  {
    v4 += 4;
    if (v4 == 12)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      scml::strCat<char const(&)[28],std::string_view &>("Unsupported embedding version: ", v8, v7);
      MEMORY[0x249544C64](exception, v7);
      __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
    }
  }
}

void sub_245C218C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

void *scml::ClipImageEncoder::embeddingVersionString@<X0>(void *result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  void *exception;
  uint64_t *v5;
  size_t v6;
  const void *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD v11[4];

  v3 = 0;
  v11[3] = result;
  {
    v3 += 4;
    if (v3 == 12)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      scml::strCat<char const(&)[32],MADUnifiedEmbeddingVersion &>("Unsupported embedding version: ", v11);
      MEMORY[0x249544C64](exception, v11);
      __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
    }
  }
  v6 = v5[2];
  if (v6 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v7 = (const void *)v5[1];
  if (v6 >= 0x17)
  {
    v8 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v8 = v6 | 7;
    v9 = v8 + 1;
    v10 = operator new(v8 + 1);
    a2[1] = v6;
    a2[2] = v9 | 0x8000000000000000;
    *a2 = v10;
    a2 = v10;
  }
  else
  {
    *((_BYTE *)a2 + 23) = v6;
    if (!v6)
      goto LABEL_13;
  }
  result = memmove(a2, v7, v6);
LABEL_13:
  *((_BYTE *)a2 + v6) = 0;
  return result;
}

void sub_245C21A1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;
  int v15;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v15)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v14);
  goto LABEL_6;
}

uint64_t scml::strCat<char const(&)[32],MADUnifiedEmbeddingVersion &>@<X0>(char *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v5;
  _QWORD v6[10];
  char v7;
  uint64_t v8;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v5);
  scml::scml_impl::strCat<char const(&)[12],unsigned long &>(&v5, a1);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v6, a2);
  v5 = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)&v6[-1] + *(_QWORD *)(v5 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v6[0] = MEMORY[0x24BEDB848] + 16;
  if (v7 < 0)
    operator delete((void *)v6[8]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x249544EE0](&v8);
}

void sub_245C21B1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::ostringstream::~ostringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t scml::ClipImageEncoder::imageWidth(uint64_t a1)
{
  uint64_t v1;
  void *exception;
  _QWORD v4[4];

  v1 = 0;
  v4[3] = a1;
  {
    v1 += 4;
    if (v1 == 12)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      scml::strCat<char const(&)[32],MADUnifiedEmbeddingVersion &>("Unsupported embedding version: ", v4);
      MEMORY[0x249544C64](exception, v4);
      __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
    }
  }
}

void sub_245C21BD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;
  int v15;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v15)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v14);
  goto LABEL_6;
}

uint64_t scml::ClipImageEncoder::imageHeight(uint64_t a1)
{
  uint64_t v1;
  void *exception;
  _QWORD v4[4];

  v1 = 0;
  v4[3] = a1;
  {
    v1 += 4;
    if (v1 == 12)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      scml::strCat<char const(&)[32],MADUnifiedEmbeddingVersion &>("Unsupported embedding version: ", v4);
      MEMORY[0x249544C64](exception, v4);
      __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
    }
  }
}

void sub_245C21CB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;
  int v15;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v15)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v14);
  goto LABEL_6;
}

void std::vector<float>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  int v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 2)
  {
    if (a2 >> 62)
      std::vector<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>>::__throw_length_error[abi:ne180100]();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFFCLL];
    v9 = &v6[4 * v8];
    v10 = (char *)*a1;
    v11 = (char *)a1[1];
    v12 = v7;
    if (v11 != *a1)
    {
      v12 = v7;
      do
      {
        v13 = *((_DWORD *)v11 - 1);
        v11 -= 4;
        *((_DWORD *)v12 - 1) = v13;
        v12 -= 4;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

uint64_t scml::ClipImageEncoder::Impl::Impl(uint64_t a1, uint64_t a2)
{
  id v4;
  void *v5;
  id *v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  std::runtime_error *exception;
  std::runtime_error *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  _QWORD v21[2];

  v21[1] = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = 850045863;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  if (!getVCPImageEmbeddingRequestClass())
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Failed to get class VCPImageEmbeddingRequest");
    goto LABEL_11;
  }
  v4 = objc_alloc((Class)getVCPImageEmbeddingRequestClass());
  v5 = *(void **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v4;

  if (!*(_QWORD *)(a1 + 64))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Failed to create VCPImageEmbeddingRequest");
LABEL_11:
    __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  v16 = 0;
  v17 = &v16;
  v18 = 0x2020000000;
  v6 = (id *)getVCPRequestRevisionPropertyKeySymbolLoc(void)::ptr;
  v19 = getVCPRequestRevisionPropertyKeySymbolLoc(void)::ptr;
  if (!getVCPRequestRevisionPropertyKeySymbolLoc(void)::ptr)
  {
    v7 = (void *)MediaAnalysisLibrary();
    v6 = (id *)dlsym(v7, "VCPRequestRevisionPropertyKey");
    v17[3] = (uint64_t)v6;
    getVCPRequestRevisionPropertyKeySymbolLoc(void)::ptr = (uint64_t)v6;
  }
  _Block_object_dispose(&v16, 8);
  if (!v6)
  {
    dlerror();
    abort_report_np();
    __break(1u);
  }
  v8 = *v6;
  v20 = v8;
  objc_msgSend(MEMORY[0x24BDD16E0], "numberWithUnsignedInteger:", a2);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v21[0] = v9;
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v21, &v20, 1);
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  v11 = objc_msgSend(*(id *)(a1 + 64), "initWithOptions:", v10);
  v12 = *(void **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v11;

  if (!*(_QWORD *)(a1 + 64))
  {
    v15 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v15, "Failed to init VCPImageEmbeddingRequest");
    __cxa_throw(v15, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  *(_QWORD *)(a1 + 72) = (int)scml::ClipImageEncoder::imageWidth(a2);
  *(_QWORD *)(a1 + 80) = (int)scml::ClipImageEncoder::imageHeight(a2);

  return a1;
}

void sub_245C21FC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  void *v11;
  void *v12;

  __cxa_free_exception(v12);

  std::mutex::~mutex((std::mutex *)v10);
  _Unwind_Resume(a1);
}

id getVCPImageEmbeddingRequestClass(void)
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getVCPImageEmbeddingRequestClass(void)::softClass;
  v7 = getVCPImageEmbeddingRequestClass(void)::softClass;
  if (!getVCPImageEmbeddingRequestClass(void)::softClass)
  {
    v3[0] = MEMORY[0x24BDAC760];
    v3[1] = 3221225472;
    v3[2] = ___ZL32getVCPImageEmbeddingRequestClassv_block_invoke;
    v3[3] = &unk_2516E4A48;
    v3[4] = &v4;
    ___ZL32getVCPImageEmbeddingRequestClassv_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_245C220EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class ___ZL32getVCPImageEmbeddingRequestClassv_block_invoke(uint64_t a1)
{
  Class result;

  MediaAnalysisLibrary();
  result = objc_getClass("VCPImageEmbeddingRequest");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    getVCPImageEmbeddingRequestClass(void)::softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    ___ZL32getVCPImageEmbeddingRequestClassv_block_invoke_cold_1();
    return (Class)MediaAnalysisLibrary();
  }
  return result;
}

uint64_t MediaAnalysisLibrary(void)
{
  uint64_t v0;
  void *v2;

  if (!MediaAnalysisLibraryCore(char **)::frameworkLibrary)
    MediaAnalysisLibraryCore(char **)::frameworkLibrary = _sl_dlopen();
  v0 = MediaAnalysisLibraryCore(char **)::frameworkLibrary;
  if (!MediaAnalysisLibraryCore(char **)::frameworkLibrary)
  {
    v2 = (void *)abort_report_np();
    free(v2);
  }
  return v0;
}

void std::default_delete<scml::ClipImageEncoder::Impl>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {

    std::mutex::~mutex((std::mutex *)a2);
    JUMPOUT(0x249544F58);
  }
}

void sub_245C222D4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_245C22390(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_245C22464(_Unwind_Exception *a1, int a2)
{
  void *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v6;
  void *v8;

  v6 = v4;
  MEMORY[0x249544F58](v6, 0x20C4093837F09);
  if (a2 == 1)
  {
    v8 = __cxa_begin_catch(a1);
    if (v3)
    {
      scml::error(0xEu, (uint64_t)v8);
      *v3 = (id)objc_claimAutoreleasedReturnValue();
    }
    __cxa_end_catch();
    JUMPOUT(0x245C22448);
  }

  _Unwind_Resume(a1);
}

void sub_245C226B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  void *v16;
  _QWORD *v17;
  void *v18;
  void *v21;

  scml::ClipEmbeddingClassifier::PredictResult::~PredictResult((scml::ClipEmbeddingClassifier::PredictResult *)&a16);
  if (a2 == 1)
  {
    v21 = __cxa_begin_catch(a1);
    if (v17)
    {
      scml::error(0xFu, (uint64_t)v21);
      *v17 = (id)objc_claimAutoreleasedReturnValue();
    }
    __cxa_end_catch();
    JUMPOUT(0x245C2268CLL);
  }

  _Unwind_Resume(a1);
}

scml::TextModerationLM::Impl **std::unique_ptr<scml::TextModerationLM>::reset[abi:ne180100](scml::TextModerationLM::Impl ***a1, scml::TextModerationLM::Impl **a2)
{
  scml::TextModerationLM::Impl **result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    scml::TextModerationLM::~TextModerationLM(result);
    JUMPOUT(0x249544F58);
  }
  return result;
}

void sub_245C22918(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_245C22984(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_245C22AD0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_245C22BA4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_245C22D84(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void std::vector<float>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 2;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 4 * a2;
  }
  else
  {
    std::vector<float>::__append((char **)a1, a2 - v2);
  }
}

void sub_245C23018(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_245C23108(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_245C23158(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void std::vector<float>::__append(char **a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  int v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 2)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 4 * a2);
      v7 += 4 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = *a1;
    v9 = v7 - *a1;
    v10 = a2 + (v9 >> 2);
    if (v10 >> 62)
      std::vector<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>>::__throw_length_error[abi:ne180100]();
    v11 = v9 >> 2;
    v12 = v5 - v8;
    if (v12 >> 1 > v10)
      v10 = v12 >> 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL)
      v13 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    if (v13)
    {
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v4, v13);
      v8 = *a1;
      v7 = a1[1];
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[4 * v11];
    v16 = &v14[4 * v13];
    bzero(v15, 4 * a2);
    v17 = &v15[4 * a2];
    while (v7 != v8)
    {
      v18 = *((_DWORD *)v7 - 1);
      v7 -= 4;
      *((_DWORD *)v15 - 1) = v18;
      v15 -= 4;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
      operator delete(v8);
  }
}

void sub_245C23768(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id `anonymous namespace'::checkedConvert<NSDictionary>(void *a1, _QWORD *a2)
{
  id v3;
  id v4;

  v3 = a1;
  if (v3 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
  {
    v4 = v3;
  }
  else
  {
    v4 = 0;
  }

  return v4;
}

void sub_245C238A4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t `anonymous namespace'::checkDictKeys(void *a1, void *a2, char a3, _QWORD *a4)
{
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  uint64_t v13;
  id v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t j;
  void *v19;
  _BOOL4 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _BYTE v29[128];
  _BYTE v30[128];
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v7 = a1;
  v8 = a2;
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  v9 = v7;
  v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v25, v30, 16);
  if (v10)
  {
    v11 = *(_QWORD *)v26;
    while (2)
    {
      for (i = 0; i != v10; ++i)
      {
        if (*(_QWORD *)v26 != v11)
          objc_enumerationMutation(v9);
        if ((objc_msgSend(v8, "containsObject:", *(_QWORD *)(*((_QWORD *)&v25 + 1) + 8 * i)) & 1) == 0)
        {
          v13 = 0;
          v14 = v9;
          goto LABEL_12;
        }
      }
      v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v25, v30, 16);
      if (v10)
        continue;
      break;
    }
  }

  if ((a3 & 1) != 0)
  {
    v13 = 1;
  }
  else
  {
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    v14 = v8;
    v16 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v21, v29, 16);
    if (v16)
    {
      v17 = *(_QWORD *)v22;
      while (2)
      {
        for (j = 0; j != v16; ++j)
        {
          if (*(_QWORD *)v22 != v17)
            objc_enumerationMutation(v14);
          objc_msgSend(v9, "objectForKeyedSubscript:", *(_QWORD *)(*((_QWORD *)&v21 + 1) + 8 * j), (_QWORD)v21);
          v19 = (void *)objc_claimAutoreleasedReturnValue();
          v20 = v19 == 0;

          if (v20)
          {
            v13 = 0;
            goto LABEL_12;
          }
        }
        v16 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v21, v29, 16);
        v13 = 1;
        if (v16)
          continue;
        break;
      }
    }
    else
    {
      v13 = 1;
    }
LABEL_12:

  }
  return v13;
}

void sub_245C23ABC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

id `anonymous namespace'::GetThresholdModeStrings(_anonymous_namespace_ *this)
{
  unsigned __int8 v1;
  _QWORD v3[4];
  _QWORD v4[5];

  v4[4] = *MEMORY[0x24BDAC8D0];
  if ((v1 & 1) == 0
  {
    v3[0] = &unk_2516EB7F0;
    v3[1] = &unk_2516EB808;
    v4[0] = CFSTR("super_high_precision");
    v4[1] = CFSTR("high_precision");
    v3[2] = &unk_2516EB820;
    v3[3] = &unk_2516EB838;
    v4[2] = CFSTR("balanced");
    v4[3] = CFSTR("high_recall");
    objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v4, v3, 4);
  }
}

void sub_245C23BEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_245C23DB0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

id `anonymous namespace'::makeError(id result, _QWORD *a2)
{
  if (a2)
  {
    objc_msgSend(MEMORY[0x24BDD1540], "errorWithDomain:code:userInfo:", SCMLErrorDomain[0], result, 0);
    result = (id)objc_claimAutoreleasedReturnValue();
    *a2 = result;
  }
  return result;
}

void sub_245C23FBC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_245C2428C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_0_2(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

void scml::Config::fromJson(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  id v7;
  void *v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  void *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  id v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t i;
  void *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *p_shared_owners;
  unint64_t v37;
  id v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  unsigned __int8 v42;
  const __CFNumber *v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  void *exception;
  uint64_t v55;
  std::string __p;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  int v63;
  __int128 v64;
  _BYTE v65[128];
  uint64_t v66;

  v66 = *MEMORY[0x24BDAC8D0];
  v7 = a1;
  if (v7
    && (objc_msgSend(MEMORY[0x24BDBCEF8], "null"),
        v8 = (void *)objc_claimAutoreleasedReturnValue(),
        v9 = objc_msgSend(v7, "isEqual:", v8),
        v8,
        !v9))
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      v13 = v7;
      v61 = 0u;
      v62 = 0u;
      v63 = 1065353216;
      v14 = *(char *)(a2 + 23);
      if (v14 >= 0)
        v15 = a2;
      else
        v15 = *(_QWORD *)a2;
      if (v14 >= 0)
        v16 = *(unsigned __int8 *)(a2 + 23);
      else
        v16 = *(_QWORD *)(a2 + 8);
      scml::Config::Config<std::unordered_map<std::string,scml::Config>>(a4, (uint64_t *)&v61, v15, v16, a3);
      std::__hash_table<std::__hash_value_type<std::string,scml::Config>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,scml::Config>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,scml::Config>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,scml::Config>>>::~__hash_table((uint64_t)&v61);
      if (*(_DWORD *)(a4 + 40) != 5)
        std::__throw_bad_variant_access[abi:ne180100]();
      v59 = 0u;
      v60 = 0u;
      v57 = 0u;
      v58 = 0u;
      v17 = v13;
      v18 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v57, v65, 16);
      if (v18)
      {
        v19 = *(_QWORD *)v58;
        do
        {
          v20 = 0;
          do
          {
            if (*(_QWORD *)v58 != v19)
              objc_enumerationMutation(v17);
            v21 = objc_retainAutorelease(*(id *)(*((_QWORD *)&v57 + 1) + 8 * v20));
            std::string::basic_string[abi:ne180100]<0>(&__p, (char *)objc_msgSend(v21, "UTF8String"));
            objc_msgSend(v17, "objectForKeyedSubscript:", v21);
            v22 = (void *)objc_claimAutoreleasedReturnValue();
            scml::Config::fromJson(&v61, v22, &__p, a4);
            std::__hash_table<std::__hash_value_type<std::string,scml::Config>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,scml::Config>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,scml::Config>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,scml::Config>>>::__emplace_unique_key_args<std::string,std::string&,scml::Config>(a4, (unsigned __int8 *)&__p, (__int128 *)&__p, (uint64_t)&v61);
            v23 = (std::__shared_weak_count *)*((_QWORD *)&v64 + 1);
            if (*((_QWORD *)&v64 + 1))
            {
              v24 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
              do
                v25 = __ldaxr(v24);
              while (__stlxr(v25 - 1, v24));
              if (!v25)
              {
                ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
                std::__shared_weak_count::__release_weak(v23);
              }
            }
            std::__variant_detail::__dtor<std::__variant_detail::__traits<decltype(nullptr),long long,double,std::string,std::vector<scml::Config>,std::unordered_map<std::string,scml::Config>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&v61);

            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);

            ++v20;
          }
          while (v20 != v18);
          v18 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v57, v65, 16);
        }
        while (v18);
      }

    }
    else
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        v26 = v7;
        v61 = 0uLL;
        *(_QWORD *)&v62 = 0;
        v27 = *(char *)(a2 + 23);
        if (v27 >= 0)
          v28 = a2;
        else
          v28 = *(_QWORD *)a2;
        if (v27 >= 0)
          v29 = *(unsigned __int8 *)(a2 + 23);
        else
          v29 = *(_QWORD *)(a2 + 8);
        scml::Config::Config<std::vector<scml::Config>>(a4, (uint64_t)&v61, v28, v29, a3);
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v61;
        std::vector<scml::Config>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
        if (*(_DWORD *)(a4 + 40) != 4)
          std::__throw_bad_variant_access[abi:ne180100]();
        for (i = 0; i < objc_msgSend(v26, "count"); ++i)
        {
          std::to_string(&__p, i);
          objc_msgSend(v26, "objectAtIndexedSubscript:", i);
          v31 = (void *)objc_claimAutoreleasedReturnValue();
          scml::Config::fromJson(&v61, v31, &__p, a4);
          v32 = *(_QWORD *)(a4 + 8);
          if (v32 >= *(_QWORD *)(a4 + 16))
          {
            v34 = std::vector<scml::Config>::__push_back_slow_path<scml::Config>((uint64_t *)a4, (uint64_t)&v61);
            v35 = (std::__shared_weak_count *)*((_QWORD *)&v64 + 1);
            *(_QWORD *)(a4 + 8) = v34;
            if (v35)
            {
              p_shared_owners = (unint64_t *)&v35->__shared_owners_;
              do
                v37 = __ldaxr(p_shared_owners);
              while (__stlxr(v37 - 1, p_shared_owners));
              if (!v37)
              {
                ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
                std::__shared_weak_count::__release_weak(v35);
              }
            }
          }
          else
          {
            v33 = std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),long long,double,std::string,std::vector<scml::Config>,std::unordered_map<std::string,scml::Config>>,(std::__variant_detail::_Trait)1>::__move_constructor(v32, (uint64_t)&v61);
            *(_OWORD *)(v33 + 48) = v64;
            v64 = 0uLL;
            *(_QWORD *)(a4 + 8) = v33 + 64;
          }
          std::__variant_detail::__dtor<std::__variant_detail::__traits<decltype(nullptr),long long,double,std::string,std::vector<scml::Config>,std::unordered_map<std::string,scml::Config>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&v61);

          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
        }

      }
      else
      {
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          v38 = objc_retainAutorelease(v7);
          *(_QWORD *)&v61 = objc_msgSend(v38, "UTF8String");
          v39 = *(char *)(a2 + 23);
          if (v39 >= 0)
            v40 = a2;
          else
            v40 = *(_QWORD *)a2;
          if (v39 >= 0)
            v41 = *(unsigned __int8 *)(a2 + 23);
          else
            v41 = *(_QWORD *)(a2 + 8);
          scml::Config::Config<char const*>((_QWORD *)a4, (char **)&v61, v40, v41, a3);

        }
        else
        {
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0)
          {
            __p.__r_.__value_.__r.__words[0] = 0;
            v51 = *(char *)(a2 + 23);
            if (v51 >= 0)
              v52 = a2;
            else
              v52 = *(_QWORD *)a2;
            if (v51 >= 0)
              v53 = *(unsigned __int8 *)(a2 + 23);
            else
              v53 = *(_QWORD *)(a2 + 8);
            scml::Config::Config<decltype(nullptr)>((uint64_t)&v61, (uint64_t)&__p, v52, v53, a3);
            exception = __cxa_allocate_exception(0x10uLL);
            scml::Config::error((uint64_t)&v61, (uint64_t)"unsupported type", 16, (uint64_t)exception);
            __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
          }
          if ((v42 & 1) == 0
          {
            v55 = operator new();
            LODWORD(v62) = 16;
            v61 = xmmword_245C92C38;
            std::unordered_set<int>::unordered_set(v55, (int *)&v61, 5);
            scml::Config::fromJson(objc_object *,std::string const&,scml::Config*)::kFloatTypes = v55;
          }
          v43 = (const __CFNumber *)v7;
          LODWORD(v61) = CFNumberGetType(v43);
          if (std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((_QWORD *)scml::Config::fromJson(objc_object *,std::string const&,scml::Config*)::kFloatTypes, (int *)&v61))
          {
            -[__CFNumber doubleValue](v43, "doubleValue");
            *(_QWORD *)&v61 = v44;
            v45 = *(char *)(a2 + 23);
            if (v45 >= 0)
              v46 = a2;
            else
              v46 = *(_QWORD *)a2;
            if (v45 >= 0)
              v47 = *(unsigned __int8 *)(a2 + 23);
            else
              v47 = *(_QWORD *)(a2 + 8);
            scml::Config::Config<double>(a4, &v61, v46, v47, a3);
          }
          else
          {
            *(_QWORD *)&v61 = -[__CFNumber longValue](v43, "longValue");
            v48 = *(char *)(a2 + 23);
            if (v48 >= 0)
              v49 = a2;
            else
              v49 = *(_QWORD *)a2;
            if (v48 >= 0)
              v50 = *(unsigned __int8 *)(a2 + 23);
            else
              v50 = *(_QWORD *)(a2 + 8);
            scml::Config::Config<long>(a4, &v61, v49, v50, a3);
          }

        }
      }
    }
  }
  else
  {
    *(_QWORD *)&v61 = 0;
    v10 = *(char *)(a2 + 23);
    if (v10 >= 0)
      v11 = a2;
    else
      v11 = *(_QWORD *)a2;
    if (v10 >= 0)
      v12 = *(unsigned __int8 *)(a2 + 23);
    else
      v12 = *(_QWORD *)(a2 + 8);
    scml::Config::Config<decltype(nullptr)>(a4, (uint64_t)&v61, v11, v12, a3);
  }

}

void sub_245C2498C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  void *v24;
  uint64_t v25;

  MEMORY[0x249544F58](v25, 0x10A0C408EF24B1CLL);

  _Unwind_Resume(a1);
}

void scml::Config::error(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  std::string v5;
  void *__p[2];
  char v7;
  uint64_t v8[2];

  v8[0] = a2;
  v8[1] = a3;
  scml::Config::PathInfo::path(*(scml::Config::PathInfo **)(a1 + 48), &v5);
  scml::strCat<std::string_view &,char const(&)[3],std::string &>(v8, ": ", (uint64_t)&v5, __p);
  MEMORY[0x249544C64](a4, __p);
  if (v7 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
}

void sub_245C24BB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  _Unwind_Resume(exception_object);
}

_QWORD *scml::Config::PathInfo::PathInfo(_QWORD *__dst, void *__src, size_t __len, _QWORD *a4)
{
  void *v8;
  size_t v9;
  size_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (__len >= 0x17)
  {
    v9 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v9 = __len | 7;
    v10 = v9 + 1;
    v8 = operator new(v9 + 1);
    __dst[1] = __len;
    __dst[2] = v10 | 0x8000000000000000;
    *__dst = v8;
    goto LABEL_8;
  }
  *((_BYTE *)__dst + 23) = __len;
  v8 = __dst;
  if (__len)
LABEL_8:
    memmove(v8, __src, __len);
  *((_BYTE *)v8 + __len) = 0;
  v11 = a4[1];
  __dst[3] = *a4;
  __dst[4] = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  return __dst;
}

void scml::Config::PathInfo::path(scml::Config::PathInfo *this@<X0>, std::string *a2@<X8>)
{
  scml::Config::PathInfo *v4;
  size_t v5;
  std::string *v6;
  void **v7;
  int v8;
  const std::string::value_type *v9;
  std::string::size_type v10;
  std::string *v11;
  __int128 v12;
  std::string v13;
  void *__p[2];
  unsigned __int8 v15;

  v4 = (scml::Config::PathInfo *)*((_QWORD *)this + 3);
  if (v4)
  {
    scml::Config::PathInfo::path((uint64_t *)__p, v4);
    if (std::string::ends_with[abi:ne180100]((uint64_t *)__p, "/"))
    {
      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)__p, (const void **)this, (uint64_t)a2);
    }
    else
    {
      if ((v15 & 0x80u) == 0)
        v5 = v15;
      else
        v5 = (size_t)__p[1];
      v6 = &v13;
      std::string::basic_string[abi:ne180100]((uint64_t)&v13, v5 + 1);
      if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v6 = (std::string *)v13.__r_.__value_.__r.__words[0];
      if (v5)
      {
        if ((v15 & 0x80u) == 0)
          v7 = __p;
        else
          v7 = (void **)__p[0];
        memmove(v6, v7, v5);
      }
      *(_WORD *)((char *)&v6->__r_.__value_.__l.__data_ + v5) = 47;
      v8 = *((char *)this + 23);
      if (v8 >= 0)
        v9 = (const std::string::value_type *)this;
      else
        v9 = *(const std::string::value_type **)this;
      if (v8 >= 0)
        v10 = *((unsigned __int8 *)this + 23);
      else
        v10 = *((_QWORD *)this + 1);
      v11 = std::string::append(&v13, v9, v10);
      v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
      a2->__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v12;
      v11->__r_.__value_.__l.__size_ = 0;
      v11->__r_.__value_.__r.__words[2] = 0;
      v11->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v13.__r_.__value_.__l.__data_);
    }
    if ((char)v15 < 0)
      operator delete(__p[0]);
  }
  else if (*((char *)this + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)this, *((_QWORD *)this + 1));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)this;
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 2);
  }
}

void sub_245C24E14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

uint64_t std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>@<X0>(const void **a1@<X0>, const void **a2@<X1>, uint64_t a3@<X8>)
{
  size_t v5;
  size_t v6;
  uint64_t result;
  char *v8;
  const void *v9;
  char *v10;
  const void *v11;

  if (*((char *)a1 + 23) >= 0)
    v5 = *((unsigned __int8 *)a1 + 23);
  else
    v5 = (size_t)a1[1];
  if (*((char *)a2 + 23) >= 0)
    v6 = *((unsigned __int8 *)a2 + 23);
  else
    v6 = (size_t)a2[1];
  result = std::string::basic_string[abi:ne180100](a3, v6 + v5);
  if (*(char *)(result + 23) >= 0)
    v8 = (char *)result;
  else
    v8 = *(char **)result;
  if (v5)
  {
    if (*((char *)a1 + 23) >= 0)
      v9 = a1;
    else
      v9 = *a1;
    result = (uint64_t)memmove(v8, v9, v5);
  }
  v10 = &v8[v5];
  if (v6)
  {
    if (*((char *)a2 + 23) >= 0)
      v11 = a2;
    else
      v11 = *a2;
    result = (uint64_t)memmove(v10, v11, v6);
  }
  v10[v6] = 0;
  return result;
}

void scml::Config::loadJson(const void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void *v6;
  void *v7;
  id v8;
  id v9;
  _QWORD *v10;
  size_t v11;
  _QWORD v12[2];
  unsigned __int8 v13;
  id v14;
  uint64_t v15[2];

  v15[0] = (uint64_t)a1;
  v15[1] = a2;
  scml::strToNSString((uint64_t)a1, a2);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = 0;
  objc_msgSend(MEMORY[0x24BDBCE50], "dataWithContentsOfFile:options:error:", v6, 0, &v14);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = v14;
  if (!v7)
  {
    scml::strCat<char const(&)[28],std::string_view &>("Failed to read json ", v15, v12);
    if ((v13 & 0x80u) == 0)
      v10 = v12;
    else
      v10 = (_QWORD *)v12[0];
    if ((v13 & 0x80u) == 0)
      v11 = v13;
    else
      v11 = v12[1];
  }
  v9 = objc_retainAutorelease(v7);
  scml::Config::fromJsonContent(objc_msgSend(v9, "bytes"), objc_msgSend(v9, "length"), a1, a2, a3);

}

void sub_245C25018(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;
  void *v15;
  void *v16;

  if (a14 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void scml::`anonymous namespace'::throwNSError(const void *a1, size_t a2, void *a3)
{
  id v5;
  void *exception;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  _QWORD __dst[2];
  unint64_t v12;
  uint64_t v13[2];

  v13[0] = (uint64_t)a1;
  v13[1] = a2;
  v5 = a3;
  exception = __cxa_allocate_exception(0x10uLL);
  if (v5)
  {
    objc_msgSend(v5, "localizedDescription");
    v10 = (const char *)objc_msgSend(objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue()), "UTF8String");
    scml::strCat<std::string_view &,char const(&)[3],char const*>(v13, ": ", &v10, __dst);
    MEMORY[0x249544C64](exception, __dst);
    __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  if (a2 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (a2 >= 0x17)
  {
    v8 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17)
      v8 = a2 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    __dst[1] = a2;
    v12 = v9 | 0x8000000000000000;
    __dst[0] = v7;
  }
  else
  {
    HIBYTE(v12) = a2;
    v7 = __dst;
    if (!a2)
    {
LABEL_12:
      *((_BYTE *)v7 + a2) = 0;
      MEMORY[0x249544C64](exception, __dst);
      __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
    }
  }
  memmove(v7, a1, a2);
  goto LABEL_12;
}

void sub_245C25198(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  void *v16;
  void *v17;
  int v18;

  if (a15 < 0)
  {
    operator delete(__p);

    if ((v18 & 1) == 0)
    {
LABEL_6:

      _Unwind_Resume(a1);
    }
  }
  else
  {

    if (!v18)
      goto LABEL_6;
  }
  __cxa_free_exception(v16);
  goto LABEL_6;
}

void scml::Config::fromJsonContent(uint64_t a1@<X0>, uint64_t a2@<X1>, const void *a3@<X2>, std::string::size_type a4@<X3>, uint64_t a5@<X8>)
{
  void *v8;
  void *v9;
  id v10;
  std::string *p_dst;
  uint64_t v12;
  uint64_t v13;
  std::string *v14;
  __int128 v15;
  void **v16;
  size_t v17;
  std::string __dst;
  void *__p[2];
  int64_t v20;
  id v21;
  uint64_t v22[2];

  v22[0] = (uint64_t)a3;
  v22[1] = a4;
  objc_msgSend(MEMORY[0x24BDBCE50], "dataWithBytes:length:", a1, a2);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v21 = 0;
  objc_msgSend(MEMORY[0x24BDD1608], "JSONObjectWithData:options:error:", v8, 0, &v21);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = v21;
  if (!v9)
  {
    scml::strCat<char const(&)[28],std::string_view &>("Failed to read json ", v22, __p);
    if (v20 >= 0)
      v16 = __p;
    else
      v16 = (void **)__p[0];
    if (v20 >= 0)
      v17 = HIBYTE(v20);
    else
      v17 = (size_t)__p[1];
  }
  if (a4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (a4 >= 0x17)
  {
    v12 = (a4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a4 | 7) != 0x17)
      v12 = a4 | 7;
    v13 = v12 + 1;
    p_dst = (std::string *)operator new(v12 + 1);
    __dst.__r_.__value_.__l.__size_ = a4;
    __dst.__r_.__value_.__r.__words[2] = v13 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_9;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = a4;
  p_dst = &__dst;
  if (a4)
LABEL_9:
    memmove(p_dst, a3, a4);
  p_dst->__r_.__value_.__s.__data_[a4] = 0;
  v14 = std::string::append(&__dst, ":/", 2uLL);
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v20 = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  scml::Config::fromJson(v9, (uint64_t)__p, 0, a5);
  if (SHIBYTE(v20) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);

}

void sub_245C253BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  void *v22;
  void *v23;

  if (a21 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

BOOL scml::Config::isNull(scml::Config *this)
{
  return *((_DWORD *)this + 10) == 0;
}

uint64_t scml::Config::isNull(uint64_t a1, const void *a2, size_t a3)
{
  uint64_t v5;
  _QWORD *v6;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  void *__dst[2];
  unint64_t v14;

  v5 = scml::Config::as<std::unordered_map<std::string,scml::Config>>(a1);
  if (a3 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v6 = (_QWORD *)v5;
  if (a3 >= 0x17)
  {
    v8 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17)
      v8 = a3 | 7;
    v9 = v8 + 1;
    v7 = (void **)operator new(v8 + 1);
    __dst[1] = (void *)a3;
    v14 = v9 | 0x8000000000000000;
    __dst[0] = v7;
    goto LABEL_8;
  }
  HIBYTE(v14) = a3;
  v7 = __dst;
  if (a3)
LABEL_8:
    memmove(v7, a2, a3);
  *((_BYTE *)v7 + a3) = 0;
  v10 = std::__hash_table<std::__hash_value_type<std::string,scml::Config>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,scml::Config>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,scml::Config>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,scml::Config>>>::find<std::string>(v6, (unsigned __int8 *)__dst);
  v11 = v10;
  if (SHIBYTE(v14) < 0)
  {
    operator delete(__dst[0]);
    if (v11)
      return *((_DWORD *)v11 + 20) == 0;
  }
  else if (v10)
  {
    return *((_DWORD *)v11 + 20) == 0;
  }
  return 1;
}

void sub_245C25520(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void scml::Config::path(scml::Config::PathInfo **this@<X0>, std::string *a2@<X8>)
{
  scml::Config::PathInfo::path(this[6], a2);
}

uint64_t std::vector<scml::Config>::__push_back_slow_path<scml::Config>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[5];

  v3 = *a1;
  v4 = (a1[1] - *a1) >> 6;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 58)
    std::vector<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = a1[2] - v3;
  if (v8 >> 5 > v5)
    v5 = v8 >> 5;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFC0)
    v9 = 0x3FFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  v14[4] = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<scml::Config>>(v7, v9);
  else
    v10 = 0;
  v11 = (uint64_t)&v10[64 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v14[3] = &v10[64 * v9];
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),long long,double,std::string,std::vector<scml::Config>,std::unordered_map<std::string,scml::Config>>,(std::__variant_detail::_Trait)1>::__move_constructor(v11, a2);
  *(_OWORD *)(v11 + 48) = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  v14[2] = v11 + 64;
  std::vector<scml::Config>::__swap_out_circular_buffer(a1, v14);
  v12 = a1[1];
  std::__split_buffer<scml::Config>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_245C25620(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<scml::Config>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),long long,double,std::string,std::vector<scml::Config>,std::unordered_map<std::string,scml::Config>>,(std::__variant_detail::_Trait)1>::__move_constructor(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 40) = -1;
  std::__variant_detail::__ctor<std::__variant_detail::__traits<decltype(nullptr),long long,double,std::string,std::vector<scml::Config>,std::unordered_map<std::string,scml::Config>>>::__generic_construct[abi:ne180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),long long,double,std::string,std::vector<scml::Config>,std::unordered_map<std::string,scml::Config>>,(std::__variant_detail::_Trait)1>>(a1, a2);
  return a1;
}

uint64_t std::__variant_detail::__ctor<std::__variant_detail::__traits<decltype(nullptr),long long,double,std::string,std::vector<scml::Config>,std::unordered_map<std::string,scml::Config>>>::__generic_construct[abi:ne180100]<std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),long long,double,std::string,std::vector<scml::Config>,std::unordered_map<std::string,scml::Config>>,(std::__variant_detail::_Trait)1>>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 40);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_2516E4A88[v4])(&v7, result);
  *(_DWORD *)(v3 + 40) = -1;
  v5 = *(unsigned int *)(a2 + 40);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_2516E4AB8[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 40) = v5;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJDnxdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_6vectorIN4scml6ConfigENSB_ISG_EEEENS_13unordered_mapISD_SG_NS_4hashISD_EENS_8equal_toISD_EENSB_INS_4pairIKSD_SG_EEEEEEEEEE19__generic_constructB8ne180100INS0_18__move_constructorIST_LNS0_6_TraitE1EEEEEvRSU_OT_EUlRS10_OT0_E_JRNS0_6__baseILSX_1EJDnxdSD_SI_SS_EEEOS18_EEEDcS10_DpT0_(uint64_t a1, _QWORD *a2)
{
  *a2 = 0;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJDnxdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_6vectorIN4scml6ConfigENSB_ISG_EEEENS_13unordered_mapISD_SG_NS_4hashISD_EENS_8equal_toISD_EENSB_INS_4pairIKSD_SG_EEEEEEEEEE19__generic_constructB8ne180100INS0_18__move_constructorIST_LNS0_6_TraitE1EEEEEvRSU_OT_EUlRS10_OT0_E_JRNS0_6__baseILSX_1EJDnxdSD_SI_SS_EEEOS18_EEEDcS10_DpT0_(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

double _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJDnxdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_6vectorIN4scml6ConfigENSB_ISG_EEEENS_13unordered_mapISD_SG_NS_4hashISD_EENS_8equal_toISD_EENSB_INS_4pairIKSD_SG_EEEEEEEEEE19__generic_constructB8ne180100INS0_18__move_constructorIST_LNS0_6_TraitE1EEEEEvRSU_OT_EUlRS10_OT0_E_JRNS0_6__baseILSX_1EJDnxdSD_SI_SS_EEEOS18_EEEDcS10_DpT0_(uint64_t a1, _QWORD *a2, double *a3)
{
  double result;

  result = *a3;
  *a2 = *(_QWORD *)a3;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJDnxdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_6vectorIN4scml6ConfigENSB_ISG_EEEENS_13unordered_mapISD_SG_NS_4hashISD_EENS_8equal_toISD_EENSB_INS_4pairIKSD_SG_EEEEEEEEEE19__generic_constructB8ne180100INS0_18__move_constructorIST_LNS0_6_TraitE1EEEEEvRSU_OT_EUlRS10_OT0_E_JRNS0_6__baseILSX_1EJDnxdSD_SI_SS_EEEOS18_EEEDcS10_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  a3->n128_u64[1] = 0;
  a3[1].n128_u64[0] = 0;
  a3->n128_u64[0] = 0;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJDnxdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_6vectorIN4scml6ConfigENSB_ISG_EEEENS_13unordered_mapISD_SG_NS_4hashISD_EENS_8equal_toISD_EENSB_INS_4pairIKSD_SG_EEEEEEEEEE19__generic_constructB8ne180100INS0_18__move_constructorIST_LNS0_6_TraitE1EEEEEvRSU_OT_EUlRS10_OT0_E_JRNS0_6__baseILSX_1EJDnxdSD_SI_SS_EEEOS18_EEEDcS10_DpT0_(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  result = *a3;
  *a2 = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  a3->n128_u64[0] = 0;
  a3->n128_u64[1] = 0;
  a3[1].n128_u64[0] = 0;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5ELm5EEE10__dispatchB8ne180100IOZNS0_6__ctorINS0_8__traitsIJDnxdNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_6vectorIN4scml6ConfigENSB_ISG_EEEENS_13unordered_mapISD_SG_NS_4hashISD_EENS_8equal_toISD_EENSB_INS_4pairIKSD_SG_EEEEEEEEEE19__generic_constructB8ne180100INS0_18__move_constructorIST_LNS0_6_TraitE1EEEEEvRSU_OT_EUlRS10_OT0_E_JRNS0_6__baseILSX_1EJDnxdSD_SI_SS_EEEOS18_EEEDcS10_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return std::__hash_table<std::__hash_value_type<std::string,scml::Config>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,scml::Config>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,scml::Config>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,scml::Config>>>::__hash_table(a2, a3);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,scml::Config>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,scml::Config>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,scml::Config>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,scml::Config>>>::__hash_table(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v2 = *a2;
  *a2 = 0;
  *(_QWORD *)result = v2;
  *(_QWORD *)(result + 8) = a2[1];
  a2[1] = 0;
  v5 = a2[2];
  v3 = a2 + 2;
  v4 = v5;
  *(_QWORD *)(result + 16) = v5;
  v6 = v3[1];
  *(_QWORD *)(result + 24) = v6;
  *(_DWORD *)(result + 32) = *((_DWORD *)v3 + 4);
  if (v6)
  {
    v7 = *(_QWORD *)(v4 + 8);
    v8 = *(_QWORD *)(result + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v7 %= v8;
    }
    else
    {
      v7 &= v8 - 1;
    }
    *(_QWORD *)(v2 + 8 * v7) = result + 16;
    *v3 = 0;
    v3[1] = 0;
  }
  return result;
}

uint64_t std::vector<scml::Config>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<scml::Config>,std::reverse_iterator<scml::Config*>,std::reverse_iterator<scml::Config*>,std::reverse_iterator<scml::Config*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<scml::Config>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 58)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(a2 << 6);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<scml::Config>,std::reverse_iterator<scml::Config*>,std::reverse_iterator<scml::Config*>,std::reverse_iterator<scml::Config*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  v13 = 0;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),long long,double,std::string,std::vector<scml::Config>,std::unordered_map<std::string,scml::Config>>,(std::__variant_detail::_Trait)1>::__move_constructor(v7 - 64, v9 - 64);
      *(_OWORD *)(v7 - 16) = *(_OWORD *)(v9 - 16);
      *(_QWORD *)(v9 - 16) = 0;
      *(_QWORD *)(v9 - 8) = 0;
      v7 = *((_QWORD *)&v15 + 1) - 64;
      *((_QWORD *)&v15 + 1) -= 64;
      v9 -= 64;
    }
    while (v9 != a5);
    v10 = v15;
  }
  v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<scml::Config>,std::reverse_iterator<scml::Config*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<scml::Config>,std::reverse_iterator<scml::Config*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<scml::Config>,std::reverse_iterator<scml::Config*>>::operator()[abi:ne180100](a1);
  return a1;
}

uint64_t std::_AllocatorDestroyRangeReverse<std::allocator<scml::Config>,std::reverse_iterator<scml::Config*>>::operator()[abi:ne180100](uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(result + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(result + 8) + 8);
  while (v1 != v2)
  {
    std::shared_ptr<scml::Config::PathInfo>::~shared_ptr[abi:ne180100](v1 + 48);
    result = std::__variant_detail::__dtor<std::__variant_detail::__traits<decltype(nullptr),long long,double,std::string,std::vector<scml::Config>,std::unordered_map<std::string,scml::Config>>,(std::__variant_detail::_Trait)1>::~__dtor(v1);
    v1 += 64;
  }
  return result;
}

uint64_t std::__split_buffer<scml::Config>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<scml::Config>::__destruct_at_end[abi:ne180100](a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::__split_buffer<scml::Config>::__destruct_at_end[abi:ne180100](uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(result + 16);
  if (v2 != a2)
  {
    v4 = result;
    do
    {
      v5 = v2 - 64;
      *(_QWORD *)(v4 + 16) = v2 - 64;
      std::shared_ptr<scml::Config::PathInfo>::~shared_ptr[abi:ne180100](v2 - 16);
      result = std::__variant_detail::__dtor<std::__variant_detail::__traits<decltype(nullptr),long long,double,std::string,std::vector<scml::Config>,std::unordered_map<std::string,scml::Config>>,(std::__variant_detail::_Trait)1>::~__dtor(v5);
      v2 = *(_QWORD *)(v4 + 16);
    }
    while (v2 != a2);
  }
  return result;
}

uint64_t scml::Config::Config<decltype(nullptr)>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v13;
  std::__shared_weak_count *v14;
  _QWORD v15[2];

  v15[0] = a3;
  v15[1] = a4;
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 40) = 0;
  if (a5)
  {
    v6 = *(std::__shared_weak_count **)(a5 + 56);
    v13 = *(_QWORD *)(a5 + 48);
    v14 = v6;
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }
  }
  else
  {
    v13 = 0;
    v14 = 0;
  }
  std::allocate_shared[abi:ne180100]<scml::Config::PathInfo,std::allocator<scml::Config::PathInfo>,std::string_view &,std::shared_ptr<scml::Config::PathInfo>,void>((uint64_t)v15, &v13, (_QWORD *)(a1 + 48));
  v9 = v14;
  if (v14)
  {
    v10 = (unint64_t *)&v14->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  return a1;
}

void sub_245C25ADC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  std::shared_ptr<scml::Config::PathInfo>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<decltype(nullptr),long long,double,std::string,std::vector<scml::Config>,std::unordered_map<std::string,scml::Config>>,(std::__variant_detail::_Trait)1>::~__dtor(v2);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<scml::Config::PathInfo,std::allocator<scml::Config::PathInfo>,std::string_view &,std::shared_ptr<scml::Config::PathInfo>,void>@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x40uLL);
  result = std::__shared_ptr_emplace<scml::Config::PathInfo>::__shared_ptr_emplace[abi:ne180100]<std::string_view &,std::shared_ptr<scml::Config::PathInfo>,std::allocator<scml::Config::PathInfo>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_245C25B44(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<scml::Config::PathInfo>::__shared_ptr_emplace[abi:ne180100]<std::string_view &,std::shared_ptr<scml::Config::PathInfo>,std::allocator<scml::Config::PathInfo>,0>(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  a1[2] = 0;
  *a1 = &unk_2516E4438;
  a1[1] = 0;
  std::construct_at[abi:ne180100]<scml::Config::PathInfo,std::string_view &,std::shared_ptr<scml::Config::PathInfo>,scml::Config::PathInfo*>(a1 + 3, a2, a3);
  return a1;
}

void sub_245C25B90(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<scml::Config::PathInfo>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_2516E4438;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<scml::Config::PathInfo>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_2516E4438;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x249544F58);
}

void std::__shared_ptr_emplace<scml::Config::PathInfo>::__on_zero_shared(uint64_t a1)
{
  std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<E5RT::IOPort>>,0>(a1 + 24);
}

_QWORD *std::construct_at[abi:ne180100]<scml::Config::PathInfo,std::string_view &,std::shared_ptr<scml::Config::PathInfo>,scml::Config::PathInfo*>(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  void *v4;
  size_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD v10[2];

  v4 = *(void **)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = (std::__shared_weak_count *)a3[1];
  v10[0] = *a3;
  v10[1] = v6;
  *a3 = 0;
  a3[1] = 0;
  scml::Config::PathInfo::PathInfo(a1, v4, v5, v10);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return a1;
}

void sub_245C25C74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<scml::Config::PathInfo>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t scml::Config::Config<std::unordered_map<std::string,scml::Config>>(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v15;
  std::__shared_weak_count *v16;
  _QWORD v17[2];

  v17[0] = a3;
  v17[1] = a4;
  v7 = std::__hash_table<std::__hash_value_type<std::string,scml::Config>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,scml::Config>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,scml::Config>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,scml::Config>>>::__hash_table(a1, a2);
  *(_DWORD *)(v7 + 40) = 5;
  if (a5)
  {
    v8 = *(std::__shared_weak_count **)(a5 + 56);
    v15 = *(_QWORD *)(a5 + 48);
    v16 = v8;
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
    }
  }
  else
  {
    v15 = 0;
    v16 = 0;
  }
  std::allocate_shared[abi:ne180100]<scml::Config::PathInfo,std::allocator<scml::Config::PathInfo>,std::string_view &,std::shared_ptr<scml::Config::PathInfo>,void>((uint64_t)v17, &v15, (_QWORD *)(v7 + 48));
  v11 = v16;
  if (v16)
  {
    v12 = (unint64_t *)&v16->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  return a1;
}

void sub_245C25D3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  std::shared_ptr<scml::Config::PathInfo>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<decltype(nullptr),long long,double,std::string,std::vector<scml::Config>,std::unordered_map<std::string,scml::Config>>,(std::__variant_detail::_Trait)1>::~__dtor(v2);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,scml::Config>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,scml::Config>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,scml::Config>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,scml::Config>>>::__emplace_unique_key_args<std::string,std::string&,scml::Config>(uint64_t a1, unsigned __int8 *a2, __int128 *a3, uint64_t a4)
{
  unint64_t v4;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint8x8_t v13;
  unint64_t v14;
  unsigned __int8 **v15;
  unsigned __int8 *i;
  unint64_t v17;
  float v18;
  float v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t v23;
  _QWORD *v24;
  unint64_t v25;
  _QWORD v27[3];

  v9 = (_QWORD *)(a1 + 24);
  v10 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v11 = v10;
  v12 = *(_QWORD *)(a1 + 8);
  if (v12)
  {
    v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    v14 = v13.u32[0];
    if (v13.u32[0] > 1uLL)
    {
      v4 = v10;
      if (v10 >= v12)
        v4 = v10 % v12;
    }
    else
    {
      v4 = (v12 - 1) & v10;
    }
    v15 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v15)
    {
      for (i = *v15; i; i = *(unsigned __int8 **)i)
      {
        v17 = *((_QWORD *)i + 1);
        if (v17 == v11)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v14 > 1)
          {
            if (v17 >= v12)
              v17 %= v12;
          }
          else
          {
            v17 &= v12 - 1;
          }
          if (v17 != v4)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,scml::Config>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,scml::Config>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,scml::Config>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,scml::Config>>>::__construct_node_hash<std::string&,scml::Config>(a1, v11, a3, a4, (uint64_t)v27);
  v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v19 = *(float *)(a1 + 32);
  if (!v12 || (float)(v19 * (float)v12) < v18)
  {
    v20 = 1;
    if (v12 >= 3)
      v20 = (v12 & (v12 - 1)) != 0;
    v21 = v20 | (2 * v12);
    v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22)
      v23 = v22;
    else
      v23 = v21;
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1, v23);
    v12 = *(_QWORD *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
        v4 = v11 % v12;
      else
        v4 = v11;
    }
    else
    {
      v4 = (v12 - 1) & v11;
    }
  }
  v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v24)
  {
    *(_QWORD *)v27[0] = *v24;
    *v24 = v27[0];
  }
  else
  {
    *(_QWORD *)v27[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v27[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v27[0])
    {
      v25 = *(_QWORD *)(*(_QWORD *)v27[0] + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v25 >= v12)
          v25 %= v12;
      }
      else
      {
        v25 &= v12 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v25) = v27[0];
    }
  }
  i = (unsigned __int8 *)v27[0];
  v27[0] = 0;
  ++*v9;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,scml::Config>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,scml::Config>,void *>>>>::reset[abi:ne180100]((uint64_t)v27, 0);
  return i;
}

void sub_245C25FC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,scml::Config>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,scml::Config>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

std::string *std::__hash_table<std::__hash_value_type<std::string,scml::Config>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,scml::Config>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,scml::Config>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,scml::Config>>>::__construct_node_hash<std::string&,scml::Config>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  char *v10;
  std::string *result;

  v9 = a1 + 16;
  v10 = (char *)operator new(0x68uLL);
  *(_QWORD *)a5 = v10;
  *(_QWORD *)(a5 + 8) = v9;
  *(_BYTE *)(a5 + 16) = 0;
  *(_QWORD *)v10 = 0;
  *((_QWORD *)v10 + 1) = a2;
  result = std::pair<std::string const,scml::Config>::pair[abi:ne180100]<std::string&,scml::Config,0>((std::string *)(v10 + 16), a3, a4);
  *(_BYTE *)(a5 + 16) = 1;
  return result;
}

void sub_245C2604C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,scml::Config>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,scml::Config>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,scml::Config>::pair[abi:ne180100]<std::string&,scml::Config,0>(std::string *this, __int128 *a2, uint64_t a3)
{
  __int128 v5;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  std::__variant_detail::__move_constructor<std::__variant_detail::__traits<decltype(nullptr),long long,double,std::string,std::vector<scml::Config>,std::unordered_map<std::string,scml::Config>>,(std::__variant_detail::_Trait)1>::__move_constructor((uint64_t)&this[1], a3);
  *(_OWORD *)&this[3].__r_.__value_.__l.__data_ = *(_OWORD *)(a3 + 48);
  *(_QWORD *)(a3 + 48) = 0;
  *(_QWORD *)(a3 + 56) = 0;
  return this;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,scml::Config>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,scml::Config>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,scml::Config>,0>((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

uint64_t scml::Config::Config<std::vector<scml::Config>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v13;
  std::__shared_weak_count *v14;
  _QWORD v15[2];

  v15[0] = a3;
  v15[1] = a4;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_DWORD *)(a1 + 40) = 4;
  if (a5)
  {
    v6 = *(std::__shared_weak_count **)(a5 + 56);
    v13 = *(_QWORD *)(a5 + 48);
    v14 = v6;
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }
  }
  else
  {
    v13 = 0;
    v14 = 0;
  }
  std::allocate_shared[abi:ne180100]<scml::Config::PathInfo,std::allocator<scml::Config::PathInfo>,std::string_view &,std::shared_ptr<scml::Config::PathInfo>,void>((uint64_t)v15, &v13, (_QWORD *)(a1 + 48));
  v9 = v14;
  if (v14)
  {
    v10 = (unint64_t *)&v14->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  return a1;
}

void sub_245C261DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  std::shared_ptr<scml::Config::PathInfo>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<decltype(nullptr),long long,double,std::string,std::vector<scml::Config>,std::unordered_map<std::string,scml::Config>>,(std::__variant_detail::_Trait)1>::~__dtor(v2);
  _Unwind_Resume(a1);
}

_QWORD *scml::Config::Config<char const*>(_QWORD *a1, char **a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v15;
  std::__shared_weak_count *v16;
  _QWORD v17[2];

  v17[0] = a3;
  v17[1] = a4;
  v7 = std::string::basic_string[abi:ne180100]<0>(a1, *a2);
  *((_DWORD *)v7 + 10) = 3;
  if (a5)
  {
    v8 = *(std::__shared_weak_count **)(a5 + 56);
    v15 = *(_QWORD *)(a5 + 48);
    v16 = v8;
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
    }
  }
  else
  {
    v15 = 0;
    v16 = 0;
  }
  std::allocate_shared[abi:ne180100]<scml::Config::PathInfo,std::allocator<scml::Config::PathInfo>,std::string_view &,std::shared_ptr<scml::Config::PathInfo>,void>((uint64_t)v17, &v15, v7 + 6);
  v11 = v16;
  if (v16)
  {
    v12 = (unint64_t *)&v16->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  return a1;
}

void sub_245C262B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  std::shared_ptr<scml::Config::PathInfo>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<decltype(nullptr),long long,double,std::string,std::vector<scml::Config>,std::unordered_map<std::string,scml::Config>>,(std::__variant_detail::_Trait)1>::~__dtor(v2);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_set<int>::unordered_set(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    v5 = 4 * a3;
    do
    {
      std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int const&>(a1, a2, a2);
      ++a2;
      v5 -= 4;
    }
    while (v5);
  }
  return a1;
}

void sub_245C2632C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int const&>(uint64_t a1, int *a2, _DWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v7 <= v6)
        v3 = v6 % v7;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        do
        {
          v11 = v10[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == (_DWORD)v6)
              return v10;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  v10 = operator new(0x18uLL);
  *v10 = 0;
  v10[1] = v6;
  *((_DWORD *)v10 + 4) = *a3;
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v18 = *(_QWORD *)a1;
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v19)
  {
    *v10 = *v19;
LABEL_38:
    *v19 = v10;
    goto LABEL_39;
  }
  *v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(v18 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    v20 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7)
        v20 %= v7;
    }
    else
    {
      v20 &= v7 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_245C26544(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

uint64_t *std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(_QWORD *a1, int *a2)
{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  uint64_t **v6;
  uint64_t *result;
  unint64_t v8;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *a2;
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = *a2;
    if (*(_QWORD *)&v2 <= v3)
      v5 = v3 % *(_QWORD *)&v2;
  }
  else
  {
    v5 = (*(_QWORD *)&v2 - 1) & v3;
  }
  v6 = *(uint64_t ***)(*a1 + 8 * v5);
  if (!v6)
    return 0;
  for (result = *v6; result; result = (uint64_t *)*result)
  {
    v8 = result[1];
    if (v8 == v3)
    {
      if (*((_DWORD *)result + 4) == (_DWORD)v3)
        return result;
    }
    else
    {
      if (v4.u32[0] > 1uLL)
      {
        if (v8 >= *(_QWORD *)&v2)
          v8 %= *(_QWORD *)&v2;
      }
      else
      {
        v8 &= *(_QWORD *)&v2 - 1;
      }
      if (v8 != v5)
        return 0;
    }
  }
  return result;
}

uint64_t scml::Config::Config<double>(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v13;
  std::__shared_weak_count *v14;
  _QWORD v15[2];

  v15[0] = a3;
  v15[1] = a4;
  *(_QWORD *)a1 = *a2;
  *(_DWORD *)(a1 + 40) = 2;
  if (a5)
  {
    v6 = *(std::__shared_weak_count **)(a5 + 56);
    v13 = *(_QWORD *)(a5 + 48);
    v14 = v6;
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }
  }
  else
  {
    v13 = 0;
    v14 = 0;
  }
  std::allocate_shared[abi:ne180100]<scml::Config::PathInfo,std::allocator<scml::Config::PathInfo>,std::string_view &,std::shared_ptr<scml::Config::PathInfo>,void>((uint64_t)v15, &v13, (_QWORD *)(a1 + 48));
  v9 = v14;
  if (v14)
  {
    v10 = (unint64_t *)&v14->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  return a1;
}

void sub_245C26708(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  std::shared_ptr<scml::Config::PathInfo>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<decltype(nullptr),long long,double,std::string,std::vector<scml::Config>,std::unordered_map<std::string,scml::Config>>,(std::__variant_detail::_Trait)1>::~__dtor(v2);
  _Unwind_Resume(a1);
}

uint64_t scml::Config::Config<long>(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v13;
  std::__shared_weak_count *v14;
  _QWORD v15[2];

  v15[0] = a3;
  v15[1] = a4;
  *(_QWORD *)a1 = *a2;
  *(_DWORD *)(a1 + 40) = 1;
  if (a5)
  {
    v6 = *(std::__shared_weak_count **)(a5 + 56);
    v13 = *(_QWORD *)(a5 + 48);
    v14 = v6;
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }
  }
  else
  {
    v13 = 0;
    v14 = 0;
  }
  std::allocate_shared[abi:ne180100]<scml::Config::PathInfo,std::allocator<scml::Config::PathInfo>,std::string_view &,std::shared_ptr<scml::Config::PathInfo>,void>((uint64_t)v15, &v13, (_QWORD *)(a1 + 48));
  v9 = v14;
  if (v14)
  {
    v10 = (unint64_t *)&v14->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  return a1;
}

void sub_245C267D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  std::shared_ptr<scml::Config::PathInfo>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<decltype(nullptr),long long,double,std::string,std::vector<scml::Config>,std::unordered_map<std::string,scml::Config>>,(std::__variant_detail::_Trait)1>::~__dtor(v2);
  _Unwind_Resume(a1);
}

void sub_245C2729C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_245C275F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v11 - 112), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__3(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__3(uint64_t a1)
{

}

void sub_245C27A00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_245C27BB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_245C27DA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 96), 8);
  _Unwind_Resume(a1);
}

CGImageRef createScaledCGImageFromCGImage(CGImage *a1, unint64_t *a2, CGInterpolationQuality a3)
{
  size_t v5;
  size_t v6;
  size_t v7;
  CGColorSpace *DeviceRGB;
  CGContext *v9;
  CGImageRef Image;
  CGRect v12;

  v5 = *a2;
  v6 = a2[1];
  v7 = 4 * *a2;
  DeviceRGB = CGColorSpaceCreateDeviceRGB();
  v9 = CGBitmapContextCreate(0, v5, v6, 8uLL, v7, DeviceRGB, 0x4005u);
  CGContextSetInterpolationQuality(v9, a3);
  v12.size.width = (double)v5;
  v12.size.height = (double)v6;
  v12.origin.x = 0.0;
  v12.origin.y = 0.0;
  CGContextDrawImage(v9, v12, a1);
  Image = CGBitmapContextCreateImage(v9);
  CGContextRelease(v9);
  CGColorSpaceRelease(DeviceRGB);
  return Image;
}

__CVBuffer *scaleCVPixelBuffer(CVPixelBufferRef pixelBuffer, size_t *a2)
{
  __CVBuffer *v2;
  const __CFAllocator *v4;
  const __CFDictionary *v5;
  CVPixelBufferRef pixelBufferOut;
  VTPixelTransferSessionRef pixelTransferSessionOut;
  uint64_t v9;
  _QWORD v10[2];

  v2 = pixelBuffer;
  v10[1] = *MEMORY[0x24BDAC8D0];
  if (pixelBuffer
    && (CVPixelBufferGetPixelFormatType(pixelBuffer) != 1111970369
     || CVPixelBufferGetWidth(v2) != *a2
     || CVPixelBufferGetHeight(v2) != a2[1]))
  {
    pixelTransferSessionOut = 0;
    v4 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
    if (VTPixelTransferSessionCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], &pixelTransferSessionOut))
    {
      return 0;
    }
    else
    {
      pixelBufferOut = 0;
      v9 = *MEMORY[0x24BDC5668];
      v10[0] = MEMORY[0x24BDBD1B8];
      objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v10, &v9, 1);
      v5 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();
      if (CVPixelBufferCreate(v4, *a2, a2[1], 0x42475241u, v5, &pixelBufferOut)
        || VTPixelTransferSessionTransferImage(pixelTransferSessionOut, v2, pixelBufferOut))
      {
        CVPixelBufferRelease(pixelBufferOut);
        CFRelease(pixelTransferSessionOut);
        v2 = 0;
      }
      else
      {
        CFRelease(pixelTransferSessionOut);
        v2 = pixelBufferOut;
      }

    }
  }
  return v2;
}

void sub_245C280D0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

CVPixelBufferRef scaledPixelBuffer32BGRAFromCGImage(CGImage *a1, size_t a2, size_t a3, CGInterpolationQuality a4)
{
  uint64_t v8;
  const __CFDictionary *v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  CVPixelBufferRef v25;
  CGColorSpace *DeviceRGB;
  size_t BytesPerRow;
  void *BaseAddress;
  CGContext *v30;
  CGContext *v31;
  NSObject *v32;
  CVPixelBufferRef pixelBuffer;
  _QWORD v34[3];
  _QWORD v35[4];
  CGRect v36;

  v35[3] = *MEMORY[0x24BDAC8D0];
  v8 = *MEMORY[0x24BDC55E8];
  v34[0] = *MEMORY[0x24BDC5668];
  v34[1] = v8;
  v35[0] = MEMORY[0x24BDBD1B8];
  v35[1] = MEMORY[0x24BDBD1C8];
  v34[2] = *MEMORY[0x24BDC55E0];
  v35[2] = MEMORY[0x24BDBD1C8];
  objc_msgSend(MEMORY[0x24BDBCE70], "dictionaryWithObjects:forKeys:count:", v35, v34, 3);
  v9 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();
  pixelBuffer = 0;
  v10 = CVPixelBufferCreate((CFAllocatorRef)*MEMORY[0x24BDBD240], a2, a3, 0x42475241u, v9, &pixelBuffer);
  if (!pixelBuffer)
  {
    +[SCMLLog imageAnalyzer](SCMLLog, "imageAnalyzer");
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      scaledPixelBuffer32BGRAFromCGImage_cold_1(v10, v12, v19, v20, v21, v22, v23, v24);
    goto LABEL_8;
  }
  v11 = CVPixelBufferLockBaseAddress(pixelBuffer, 0);
  if ((_DWORD)v11)
  {
    CVPixelBufferRelease(pixelBuffer);
    +[SCMLLog imageAnalyzer](SCMLLog, "imageAnalyzer");
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      scaledPixelBuffer32BGRAFromCGImage_cold_3(v11, v12, v13, v14, v15, v16, v17, v18);
LABEL_8:

    goto LABEL_9;
  }
  DeviceRGB = CGColorSpaceCreateDeviceRGB();
  BytesPerRow = CVPixelBufferGetBytesPerRow(pixelBuffer);
  BaseAddress = CVPixelBufferGetBaseAddress(pixelBuffer);
  v30 = CGBitmapContextCreate(BaseAddress, a2, a3, 8uLL, BytesPerRow, DeviceRGB, 0x2006u);
  v31 = v30;
  if (v30)
  {
    CGContextSetInterpolationQuality(v30, a4);
    v36.size.width = (double)a2;
    v36.size.height = (double)a3;
    v36.origin.x = 0.0;
    v36.origin.y = 0.0;
    CGContextDrawImage(v31, v36, a1);
    CVPixelBufferUnlockBaseAddress(pixelBuffer, 0);
    CGContextRelease(v31);
    CGColorSpaceRelease(DeviceRGB);
    v25 = pixelBuffer;
    goto LABEL_10;
  }
  +[SCMLLog imageAnalyzer](SCMLLog, "imageAnalyzer");
  v32 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
    scaledPixelBuffer32BGRAFromCGImage_cold_2(v32);

  CVPixelBufferUnlockBaseAddress(pixelBuffer, 0);
  CGColorSpaceRelease(DeviceRGB);
  CVPixelBufferRelease(pixelBuffer);
LABEL_9:
  v25 = 0;
LABEL_10:

  return v25;
}

void sub_245C28358(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t pixelBufferFromCGImage(CGImage *a1, void *a2)
{
  id v3;
  size_t Width;
  size_t Height;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;

  v3 = a2;
  if (a1)
  {
    Width = CGImageGetWidth(a1);
    Height = CGImageGetHeight(a1);
    if (v3)
      v6 = objc_msgSend(v3, "unsignedIntegerValue");
    else
      v6 = 1111970369;
    v8 = objc_alloc(MEMORY[0x24BDF9C20]);
    v9 = (void *)objc_msgSend(v8, "initWithCGImage:orientation:options:", a1, 1, MEMORY[0x24BDBD1B8]);
    v7 = objc_msgSend(v9, "bufferWithWidth:height:format:options:error:", Width, Height, v6, MEMORY[0x24BDBD1B8], 0);

  }
  else
  {
    v7 = 0;
  }

  return v7;
}

void sub_245C2844C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t interpolationForScaleMethod(void *a1, int *a2)
{
  id v3;
  int v4;
  uint64_t v5;

  v3 = a1;
  if ((objc_msgSend(v3, "isEqualToString:", SCMLImageScaleMethodCGInterpolationNone[0]) & 1) != 0)
  {
    v4 = 1;
  }
  else if ((objc_msgSend(v3, "isEqualToString:", SCMLImageScaleMethodCGInterpolationLow[0]) & 1) != 0)
  {
    v4 = 2;
  }
  else if ((objc_msgSend(v3, "isEqualToString:", SCMLImageScaleMethodCGInterpolationMedium[0]) & 1) != 0)
  {
    v4 = 4;
  }
  else
  {
    if (!objc_msgSend(v3, "isEqualToString:", SCMLImageScaleMethodCGInterpolationHigh[0]))
    {
      v5 = 0;
      goto LABEL_10;
    }
    v4 = 3;
  }
  *a2 = v4;
  v5 = 1;
LABEL_10:

  return v5;
}

void sub_245C28528(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t saveCGImageToPng(CGImage *a1, void *a2)
{
  const __CFURL *v3;
  CGImageDestination *v4;
  CGImageDestination *v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v3 = a2;
  v4 = CGImageDestinationCreateWithURL(v3, CFSTR("public.png"), 1uLL, 0);
  v5 = v4;
  if (!v4)
  {
    +[SCMLLog imageAnalyzer](SCMLLog, "imageAnalyzer");
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      saveCGImageToPng_cold_1((uint64_t)v3, v7, v8, v9, v10, v11, v12, v13);

    goto LABEL_10;
  }
  CGImageDestinationAddImage(v4, a1, 0);
  if (!CGImageDestinationFinalize(v5))
  {
    +[SCMLLog imageAnalyzer](SCMLLog, "imageAnalyzer");
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      saveCGImageToPng_cold_2((uint64_t)v3, v14, v15, v16, v17, v18, v19, v20);

    CFRelease(v5);
LABEL_10:
    v6 = 0;
    goto LABEL_11;
  }
  CFRelease(v5);
  v6 = 1;
LABEL_11:

  return v6;
}

void sub_245C2862C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t saveCVPixelBufferToPng(__CVBuffer *a1, void *a2)
{
  id v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  CGImageRef imageOut;

  v3 = a2;
  imageOut = 0;
  if (VTCreateCGImageFromCVPixelBuffer(a1, 0, &imageOut))
  {
    +[SCMLLog imageAnalyzer](SCMLLog, "imageAnalyzer");
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      saveCVPixelBufferToPng_cold_1((uint64_t)v3, v4, v5, v6, v7, v8, v9, v10);

  }
  else if (imageOut)
  {
    v11 = saveCGImageToPng(imageOut, v3);
    CGImageRelease(imageOut);
    goto LABEL_8;
  }
  v11 = 0;
LABEL_8:

  return v11;
}

void sub_245C286E8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_1_2(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 8u);
}

void sub_245C2876C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_245C287FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_245C29A88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, scml::MultiwordGazetteer **a10, _QWORD *a11, void *a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,const void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *__p,uint64_t a57,int a58,__int16 a59,char a60,char a61)
{
  scml::MultiwordGazetteer **v61;
  uint64_t v62;
  void *v63;
  scml::MultiwordGazetteer **v64;
  const void **v65;
  scml::MultiwordGazetteer **v66;
  void *v67;
  uint64_t v68;
  void *v70;
  NSObject *v71;

  if (a61 < 0)
    operator delete(__p);

  nlp::CFScopedPtr<__CFDictionary *>::reset(&a27, 0);
  scml::SignpostInterval::~SignpostInterval((scml::SignpostInterval *)(v68 - 160));
  scml::SignpostInterval::~SignpostInterval((scml::SignpostInterval *)(v68 - 240));

  std::unique_ptr<scml::MultiwordGazetteer>::reset[abi:ne180100](a10, 0);
  std::unique_ptr<scml::MultiwordGazetteer>::reset[abi:ne180100](v66, 0);
  std::unique_ptr<scml::MultiwordGazetteer>::reset[abi:ne180100](v61, 0);
  std::unique_ptr<scml::MultiwordGazetteer>::reset[abi:ne180100](v64, 0);
  nlp::CFScopedPtr<_LXLexicon const*>::reset(v65, 0);
  nlp::CFScopedPtr<__CFStringTokenizer *>::reset((const void **)v62, 0);

  MEMORY[0x249544F58](v62, 0x10E0C40ED2A7B1CLL);
  scml::SignpostInterval::~SignpostInterval((scml::SignpostInterval *)&a40);
  if (a2 == 2)
  {
    v70 = __cxa_begin_catch(a1);
    if (a11)
    {
      scml::error(0xEu, (uint64_t)v70);
      *a11 = (id)objc_claimAutoreleasedReturnValue();
    }
    +[SCMLLog textAnalyzer](SCMLLog, "textAnalyzer");
    v71 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v71, OS_LOG_TYPE_ERROR))
      -[SCMLTextSanitizer initWithConfiguration:error:].cold.1((uint64_t)v70, v71);

    __cxa_end_catch();
    JUMPOUT(0x245C29844);
  }
  scml::SignpostInterval::~SignpostInterval((scml::SignpostInterval *)&a50);

  _Unwind_Resume(a1);
}

void sub_245C29F98()
{
  __cxa_end_catch();
  JUMPOUT(0x245C29E78);
}

void sub_245C29FAC(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  JUMPOUT(0x245C29EFCLL);
}

void sub_245C2A02C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_245C2A18C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_245C2A558(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, uint64_t a14)
{
  void *v14;
  uint64_t v15;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;

  __cxa_free_exception(v14);
  if (a2 == 2)
  {
    v18 = __cxa_begin_catch(a1);
    v19 = *(_QWORD *)(a14 + 40);
    scml::error(0xFu, (uint64_t)"Failed to query TextModerationLM", 32, (uint64_t)v18);
    v20 = objc_claimAutoreleasedReturnValue();
    v21 = *(void **)(v19 + 24);
    *(_QWORD *)(v19 + 24) = v20;

    __cxa_end_catch();
    JUMPOUT(0x245C2A4D0);
  }
  scml::Deferred::~Deferred((scml::Deferred *)(v15 - 128));

  _Unwind_Resume(a1);
}

void sub_245C2A8D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  void *v28;
  void *v29;
  void *v30;

  if (a28 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_245C2AD24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **__p, uint64_t a10, int a11, __int16 a12, char a13, unsigned __int8 a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  void *v23;
  void *v24;
  uint64_t v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v32;
  uint64_t v33;
  void **p_p;
  uint64_t v35;
  uint64_t v36;
  void *v37;

  v29 = v26;

  if (a2 == 2)
  {
    v32 = __cxa_begin_catch(a1);
    scml::strCat<char const(&)[38],std::string>("Failed ", v25 + 56, &__p);
    v33 = *(_QWORD *)(v25 + 40);
    if ((a14 & 0x80u) == 0)
      p_p = (void **)&__p;
    else
      p_p = __p;
    if ((a14 & 0x80u) == 0)
      v35 = a14;
    else
      v35 = a10;
    scml::error(0xFu, (uint64_t)p_p, v35, (uint64_t)v32);
    v36 = objc_claimAutoreleasedReturnValue();
    v37 = *(void **)(v33 + 24);
    *(_QWORD *)(v33 + 24) = v36;

    if ((char)a14 < 0)
      operator delete(__p);
    __cxa_end_catch();
    JUMPOUT(0x245C2ACA8);
  }
  scml::Deferred::~Deferred((scml::Deferred *)&a23);

  _Unwind_Resume(a1);
}

void __copy_helper_block_ea8_56c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1, uint64_t a2)
{
  std::string *v2;
  __int128 v3;

  v2 = (std::string *)(a1 + 56);
  if (*(char *)(a2 + 79) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a2 + 56), *(_QWORD *)(a2 + 64));
  }
  else
  {
    v3 = *(_OWORD *)(a2 + 56);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 72);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void __destroy_helper_block_ea8_56c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
}

void sub_245C2B0F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_245C2B38C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_245C2BEE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::mutex *a9, uint64_t a10, void *a11, void *a12, uint64_t a13, void (**a14)(_QWORD, _QWORD, _QWORD), void *a15, void *a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,void *__p,uint64_t a51,int a52,__int16 a53,char a54,char a55,uint64_t a56,char a57,uint64_t a58,uint64_t a59,uint64_t a60)
{
  uint64_t v60;
  void *v63;
  void *v64;

  language_modeling::v1::LinguisticContext::~LinguisticContext((language_modeling::v1::LinguisticContext *)&a29);

  scml::SignpostInterval::~SignpostInterval((scml::SignpostInterval *)(v60 - 160));
  std::mutex::unlock(a9);
  if (a2 == 1)
  {
    v63 = __cxa_begin_catch(a1);
    scml::error(0xFu, (uint64_t)v63);
    v64 = (void *)objc_claimAutoreleasedReturnValue();
    ((void (**)(_QWORD, _QWORD, void *))a14)[2](a14, 0, v64);

    __cxa_end_catch();
    JUMPOUT(0x245C2BE58);
  }

  _Unwind_Resume(a1);
}

uint64_t scml::`anonymous namespace'::AsyncResponder::addHandler(_QWORD *a1, _QWORD *a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  int64x2_t v23;
  char *v24;
  char *v25;
  int64x2_t v26;
  char *v27;
  _QWORD *v28;

  v4 = a1[7];
  v5 = a1[6];
  if (v5 < v4)
  {
    result = a2[3];
    if (result)
    {
      if ((_QWORD *)result == a2)
      {
        *(_QWORD *)(v5 + 24) = v5;
        result = (*(uint64_t (**)(_QWORD, unint64_t))(*(_QWORD *)a2[3] + 24))(a2[3], v5);
        goto LABEL_21;
      }
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
    }
    *(_QWORD *)(v5 + 24) = result;
LABEL_21:
    v15 = v5 + 32;
    a1[6] = v5 + 32;
    goto LABEL_34;
  }
  v7 = a1[5];
  v8 = (uint64_t)(v5 - v7) >> 5;
  if ((unint64_t)(v8 + 1) >> 59)
    std::vector<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>>::__throw_length_error[abi:ne180100]();
  v9 = v4 - v7;
  v10 = v9 >> 4;
  if (v9 >> 4 <= (unint64_t)(v8 + 1))
    v10 = v8 + 1;
  if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFE0)
    v11 = 0x7FFFFFFFFFFFFFFLL;
  else
    v11 = v10;
  v28 = a1 + 7;
  if (v11)
  {
    if (v11 >> 59)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v12 = (char *)operator new(32 * v11);
  }
  else
  {
    v12 = 0;
  }
  v13 = &v12[32 * v8];
  v25 = v12;
  v26.i64[0] = (uint64_t)v13;
  v26.i64[1] = (uint64_t)v13;
  v27 = &v12[32 * v11];
  v14 = a2[3];
  if (!v14)
    goto LABEL_19;
  if ((_QWORD *)v14 != a2)
  {
    v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
LABEL_19:
    *((_QWORD *)v13 + 3) = v14;
    goto LABEL_23;
  }
  *((_QWORD *)v13 + 3) = v13;
  (*(void (**)(_QWORD *, char *))(*a2 + 24))(a2, v13);
LABEL_23:
  v16 = (_QWORD *)v26.i64[0];
  v15 = v26.i64[1] + 32;
  v26.i64[1] += 32;
  v18 = a1[5];
  v17 = a1[6];
  if (v17 != v18)
  {
    v19 = (_QWORD *)(v26.i64[0] - 8);
    while (1)
    {
      v20 = *(_QWORD *)(v17 - 8);
      v21 = v17 - 32;
      v22 = v19;
      if (v20)
      {
        if (v21 == v20)
        {
          *v19 = v19 - 3;
          (*(void (**)(_QWORD))(**(_QWORD **)(v17 - 8) + 24))(*(_QWORD *)(v17 - 8));
          goto LABEL_30;
        }
        *v19 = v20;
        v22 = (_QWORD *)(v17 - 8);
      }
      *v22 = 0;
LABEL_30:
      v19 -= 4;
      v17 = v21;
      if (v21 == v18)
      {
        v23 = *(int64x2_t *)(a1 + 5);
        v15 = v26.i64[1];
        v16 = v19 + 1;
        goto LABEL_33;
      }
    }
  }
  v23 = vdupq_n_s64(v17);
LABEL_33:
  a1[5] = v16;
  a1[6] = v15;
  v26 = v23;
  v24 = (char *)a1[7];
  a1[7] = v27;
  v27 = v24;
  v25 = (char *)v23.i64[0];
LABEL_34:
  a1[6] = v15;
  return result;
}

void sub_245C2C3FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  _Unwind_Resume(a1);
}

uint64_t scml::`anonymous namespace'::AsyncResponder::finish(scml::_anonymous_namespace_::AsyncResponder *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  scml::_anonymous_namespace_::AsyncResponder *v12;

  v2 = *((int *)this + 16) + 1;
  *((_DWORD *)this + 16) = v2;
  if (!*((_BYTE *)this + 32))
  {
    if (v2 != (uint64_t)(*((_QWORD *)this + 6) - *((_QWORD *)this + 5)) >> 5 && !*((_QWORD *)this + 3))
    {
      if (*((_BYTE *)this + 8))
        goto LABEL_2;
      if (objc_msgSend(*((id *)this + 2), "safe"))
      {
        LODWORD(v2) = *((_DWORD *)this + 16);
        goto LABEL_2;
      }
    }
    (*(void (**)(void))(*(_QWORD *)this + 16))();
    *((_BYTE *)this + 32) = 1;
    v6 = *((_QWORD *)this + 5);
    if (!v6)
      goto LABEL_16;
    v7 = *((_QWORD *)this + 6);
    v8 = (void *)*((_QWORD *)this + 5);
    if (v7 == v6)
      goto LABEL_15;
    while (1)
    {
      v9 = v7 - 32;
      v10 = *(_QWORD **)(v7 - 8);
      if ((_QWORD *)(v7 - 32) == v10)
        break;
      if (v10)
      {
        v11 = 5;
LABEL_12:
        (*(void (**)(void))(*v10 + 8 * v11))();
      }
      v7 = v9;
      if (v9 == v6)
      {
        v8 = (void *)*((_QWORD *)this + 5);
LABEL_15:
        *((_QWORD *)this + 6) = v6;
        operator delete(v8);
LABEL_16:

        JUMPOUT(0x249544F58);
      }
    }
    v10 = (_QWORD *)(v7 - 32);
    v11 = 4;
    goto LABEL_12;
  }
LABEL_2:
  v3 = *((_QWORD *)this + 5);
  v12 = this;
  v4 = *(_QWORD *)(v3 + 32 * (int)v2 + 24);
  if (!v4)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, scml::_anonymous_namespace_::AsyncResponder **))(*(_QWORD *)v4 + 48))(v4, &v12);
}

void sub_245C2C5F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_245C2C754(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  void *v22;
  void *v23;
  uint64_t v24;

  _Block_object_dispose(&a17, 8);
  _Block_object_dispose((const void *)(v24 - 96), 8);

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__4(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__4(uint64_t a1)
{

}

void sub_245C2C8BC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_245C2CC40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;

  v25 = 544;
  while (1)
  {
    if (*(char *)(v23 + v25 - 9) < 0)
      operator delete(*(void **)(v23 + v25 - 32));
    v25 -= 32;
    if (!v25)
    {
      MEMORY[0x249544F58](v22, 0x10A0C408EF24B1CLL);
      if (a15 < 0)
        operator delete(__p);

      _Unwind_Resume(a1);
    }
  }
}

void ___ZN4scml12_GLOBAL__N_122RuleBasedTextSanitizer20updateWithOvsMatchesEPK10__CFStringjbP20SCMLTextSanitization_block_invoke(uint64_t a1, uint64_t a2, BOOL *a3)
{
  const __CFString *v5;
  int MetaFlags;
  uint64_t v7;
  BOOL v9;
  uint64_t v10;
  BOOL v12;
  uint64_t v13;
  BOOL v15;
  BOOL v16;

  v5 = (const __CFString *)LXEntryCopyString();
  if (CFStringCompare(v5, *(CFStringRef *)(a1 + 56), 1uLL))
  {
    if (!v5)
      return;
LABEL_29:
    CFRelease(v5);
    return;
  }
  MetaFlags = LXEntryGetMetaFlags();
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v9 = (MetaFlags & 0x1000000) == 0 && *(_BYTE *)(v7 + 24) != 0;
  *(_BYTE *)(v7 + 24) = v9;
  v10 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v12 = (MetaFlags & 0x800000) == 0 && *(_BYTE *)(v10 + 24) != 0;
  *(_BYTE *)(v10 + 24) = v12;
  v13 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v15 = (MetaFlags & 0x2000000) == 0 && *(_BYTE *)(v13 + 24) != 0;
  *(_BYTE *)(v13 + 24) = v15;
  if (*(_BYTE *)(a1 + 64))
    v16 = 0;
  else
    v16 = !*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24)
       || !*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24)
       || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) == 0;
  *a3 = v16;
  if (v5)
    goto LABEL_29;
}

void sub_245C2CED8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  nlp::CFScopedPtr<__CFString const*>::reset((const void **)va, 0);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<std::function<void ()(scml::`anonymous namespace'::AsyncResponder *)>>::~__split_buffer(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;

  v3 = *(_QWORD **)(a1 + 8);
  v2 = *(_QWORD **)(a1 + 16);
  if (v2 != v3)
  {
    while (1)
    {
      v4 = v2 - 4;
      *(_QWORD *)(a1 + 16) = v2 - 4;
      v5 = (_QWORD *)*(v2 - 1);
      if (v5 == v4)
        break;
      if (v5)
      {
        v4 = v5;
        v6 = 5;
LABEL_6:
        (*(void (**)(void))(*v4 + 8 * v6))();
        v4 = *(_QWORD **)(a1 + 16);
      }
      v2 = v4;
      if (v4 == v3)
        goto LABEL_8;
    }
    v6 = 4;
    goto LABEL_6;
  }
LABEL_8:
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

id scml::`anonymous namespace'::RuleBasedTextSanitizer::toGazetteerPath(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  void *v6;

  objc_msgSend(MEMORY[0x24BDD1488], "bundleForClass:", objc_opt_class());
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  scml::strToNSString(a1, a2);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "pathForResource:ofType:", v5, CFSTR("gaze"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  return v6;
}

void sub_245C2D278(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void nlp::CFScopedPtr<_LXLexicon const*>::reset(const void **a1, const void *a2)
{
  const void *v4;

  v4 = *a1;
  if (v4)
    CFRelease(v4);
  *a1 = a2;
}

uint64_t scml::strCat<char const(&)[37],char const*,char const(&)[3],std::string>@<X0>(char *a1@<X0>, const char **a2@<X1>, char *a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v11;
  _QWORD v12[10];
  char v13;
  uint64_t v14;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v11);
  scml::scml_impl::strCat<char const(&)[37],char const*,char const(&)[3],std::string>(&v11, a1, a2, a3, a4);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v12, a5);
  v11 = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)&v12[-1] + *(_QWORD *)(v11 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v12[0] = MEMORY[0x24BEDB848] + 16;
  if (v13 < 0)
    operator delete((void *)v12[8]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x249544EE0](&v14);
}

void sub_245C2D3A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::ostringstream::~ostringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void std::__function::__func<scml::`anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#1},std::allocator<scml::`anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#1}>,void ()(void)>::~__func()
{
  JUMPOUT(0x249544F58);
}

_QWORD *std::__function::__func<scml::`anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#1},std::allocator<scml::`anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_2516E3EB8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<scml::`anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#1},std::allocator<scml::`anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_2516E3EB8;
  a2[1] = v2;
  return result;
}

void std::__function::__func<scml::`anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#1},std::allocator<scml::`anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#1}>,void ()(void)>::operator()(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  v2 = **(id **)(a1 + 8);
  v3 = v2;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_245BFA000, v3, OS_SIGNPOST_INTERVAL_END, v4, "SCMLTextSanitizer.init.rules.tokenizer", "", v5, 2u);
  }

}

uint64_t std::__function::__func<scml::`anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#1},std::allocator<scml::`anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#1}>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<scml::`anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#1},std::allocator<scml::`anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#1}>,void ()(void)>::target_type()
{
}

void std::__function::__func<scml::`anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#2},std::allocator<scml::`anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#2}>,void ()(void)>::~__func()
{
  JUMPOUT(0x249544F58);
}

_QWORD *std::__function::__func<scml::`anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#2},std::allocator<scml::`anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#2}>,void ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_2516E3D58;
  return result;
}

void std::__function::__func<scml::`anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#2},std::allocator<scml::`anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#2}>,void ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_2516E3D58;
}

uint64_t std::__function::__func<scml::`anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#2},std::allocator<scml::`anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#2}>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<scml::`anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#2},std::allocator<scml::`anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#2}>,void ()(void)>::target_type()
{
}

id scml::`anonymous namespace'::RuleBasedTextSanitizer::loadGazetteer(uint64_t a1, uint64_t a2)
{
  void *v2;
  void *v3;
  void *v4;
  scml *v5;
  scml *v7;
  void *exception;
  _QWORD v9[3];
  id v10;

  v2 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(MEMORY[0x24BDBCF48], "fileURLWithPath:", v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v10 = 0;
  v4 = (void *)objc_msgSend(objc_alloc(MEMORY[0x24BDDFD48]), "initWithContentsOfURL:error:", v3, &v10);
  v5 = (scml *)v10;
  if (!v4)
  {
    v7 = v5;
    exception = __cxa_allocate_exception(0x10uLL);
    scml::strFromNSError(v7, v9);
    MEMORY[0x249544C64](exception, v9);
    __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }

  return v4;
}

void sub_245C2D678(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  void *v16;
  void *v17;
  void *v18;
  int v19;

  if (a16 < 0)
  {
    operator delete(__p);
    if ((v19 & 1) == 0)
    {
LABEL_6:

      _Unwind_Resume(a1);
    }
  }
  else if (!v19)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v18);
  goto LABEL_6;
}

void std::__function::__func<scml::`anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#3}::operator() const(void)::{lambda(void)#1},std::allocator<scml::`anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#3}::operator() const(void)::{lambda(void)#1}>,void ()(void)>::~__func()
{
  JUMPOUT(0x249544F58);
}

_QWORD *std::__function::__func<scml::`anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#3}::operator() const(void)::{lambda(void)#1},std::allocator<scml::`anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#3}::operator() const(void)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_2516E4228;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<scml::`anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#3}::operator() const(void)::{lambda(void)#1},std::allocator<scml::`anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#3}::operator() const(void)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_2516E4228;
  a2[1] = v2;
  return result;
}

void std::__function::__func<scml::`anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#3}::operator() const(void)::{lambda(void)#1},std::allocator<scml::`anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#3}::operator() const(void)::{lambda(void)#1}>,void ()(void)>::operator()(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  v2 = **(id **)(a1 + 8);
  v3 = v2;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_245BFA000, v3, OS_SIGNPOST_INTERVAL_END, v4, "SCMLTextSanitizer.init.rules.full_allow", "", v5, 2u);
  }

}

uint64_t std::__function::__func<scml::`anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#3}::operator() const(void)::{lambda(void)#1},std::allocator<scml::`anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#3}::operator() const(void)::{lambda(void)#1}>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<scml::`anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#3}::operator() const(void)::{lambda(void)#1},std::allocator<scml::`anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#3}::operator() const(void)::{lambda(void)#1}>,void ()(void)>::target_type()
{
}

void std::__function::__func<scml::`anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#4}::operator() const(void)::{lambda(void)#1},std::allocator<scml::`anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#4}::operator() const(void)::{lambda(void)#1}>,void ()(void)>::~__func()
{
  JUMPOUT(0x249544F58);
}

_QWORD *std::__function::__func<scml::`anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#4}::operator() const(void)::{lambda(void)#1},std::allocator<scml::`anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#4}::operator() const(void)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_2516E4280;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<scml::`anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#4}::operator() const(void)::{lambda(void)#1},std::allocator<scml::`anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#4}::operator() const(void)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_2516E4280;
  a2[1] = v2;
  return result;
}

void std::__function::__func<scml::`anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#4}::operator() const(void)::{lambda(void)#1},std::allocator<scml::`anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#4}::operator() const(void)::{lambda(void)#1}>,void ()(void)>::operator()(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  v2 = **(id **)(a1 + 8);
  v3 = v2;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_245BFA000, v3, OS_SIGNPOST_INTERVAL_END, v4, "SCMLTextSanitizer.init.rules.full_disallow", "", v5, 2u);
  }

}

uint64_t std::__function::__func<scml::`anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#4}::operator() const(void)::{lambda(void)#1},std::allocator<scml::`anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#4}::operator() const(void)::{lambda(void)#1}>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<scml::`anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#4}::operator() const(void)::{lambda(void)#1},std::allocator<scml::`anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#4}::operator() const(void)::{lambda(void)#1}>,void ()(void)>::target_type()
{
}

void std::__function::__func<scml::`anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#5},std::allocator<scml::`anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#5}>,void ()(void)>::~__func()
{
  JUMPOUT(0x249544F58);
}

_QWORD *std::__function::__func<scml::`anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#5},std::allocator<scml::`anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#5}>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_2516E3DB0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<scml::`anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#5},std::allocator<scml::`anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#5}>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_2516E3DB0;
  a2[1] = v2;
  return result;
}

void std::__function::__func<scml::`anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#5},std::allocator<scml::`anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#5}>,void ()(void)>::operator()(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  v2 = **(id **)(a1 + 8);
  v3 = v2;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_245BFA000, v3, OS_SIGNPOST_INTERVAL_END, v4, "SCMLTextSanitizer.init.rules.visual_generation_blocklist", "", v5, 2u);
  }

}

uint64_t std::__function::__func<scml::`anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#5},std::allocator<scml::`anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#5}>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<scml::`anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#5},std::allocator<scml::`anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#5}>,void ()(void)>::target_type()
{
}

void std::__function::__func<scml::`anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#6}::operator() const(void)::{lambda(void)#1},std::allocator<scml::`anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#6}::operator() const(void)::{lambda(void)#1}>,void ()(void)>::~__func()
{
  JUMPOUT(0x249544F58);
}

_QWORD *std::__function::__func<scml::`anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#6}::operator() const(void)::{lambda(void)#1},std::allocator<scml::`anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#6}::operator() const(void)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_2516E42D8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<scml::`anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#6}::operator() const(void)::{lambda(void)#1},std::allocator<scml::`anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#6}::operator() const(void)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_2516E42D8;
  a2[1] = v2;
  return result;
}

void std::__function::__func<scml::`anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#6}::operator() const(void)::{lambda(void)#1},std::allocator<scml::`anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#6}::operator() const(void)::{lambda(void)#1}>,void ()(void)>::operator()(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  v2 = **(id **)(a1 + 8);
  v3 = v2;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_245BFA000, v3, OS_SIGNPOST_INTERVAL_END, v4, "SCMLTextSanitizer.init.rules.ovs_overrides", "", v5, 2u);
  }

}

uint64_t std::__function::__func<scml::`anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#6}::operator() const(void)::{lambda(void)#1},std::allocator<scml::`anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#6}::operator() const(void)::{lambda(void)#1}>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<scml::`anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#6}::operator() const(void)::{lambda(void)#1},std::allocator<scml::`anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#6}::operator() const(void)::{lambda(void)#1}>,void ()(void)>::target_type()
{
}

void std::__function::__func<scml::`anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#7},std::allocator<scml::`anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#7}>,void ()(void)>::~__func()
{
  JUMPOUT(0x249544F58);
}

_QWORD *std::__function::__func<scml::`anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#7},std::allocator<scml::`anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#7}>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_2516E3E08;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<scml::`anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#7},std::allocator<scml::`anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#7}>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_2516E3E08;
  a2[1] = v2;
  return result;
}

void std::__function::__func<scml::`anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#7},std::allocator<scml::`anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#7}>,void ()(void)>::operator()(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  uint8_t v5[16];

  v2 = **(id **)(a1 + 8);
  v3 = v2;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)v5 = 0;
    _os_signpost_emit_with_name_impl(&dword_245BFA000, v3, OS_SIGNPOST_INTERVAL_END, v4, "SCMLTextSanitizer.init.rules.lexicon", "", v5, 2u);
  }

}

uint64_t std::__function::__func<scml::`anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#7},std::allocator<scml::`anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#7}>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<scml::`anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#7},std::allocator<scml::`anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#7}>,void ()(void)>::target_type()
{
}

uint64_t scml::scml_impl::strCat<char const(&)[37],char const*,char const(&)[3],std::string>(_QWORD *a1, char *__s, const char **a3, char *a4, uint64_t a5)
{
  size_t v10;

  v10 = strlen(__s);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)__s, v10);
  return scml::scml_impl::strCat<char const*,char const(&)[3],std::string>(a1, a3, a4, a5);
}

uint64_t scml::scml_impl::strCat<char const*,char const(&)[3],std::string>(_QWORD *a1, const char **a2, char *a3, uint64_t a4)
{
  const char *v7;
  size_t v8;

  v7 = *a2;
  v8 = strlen(*a2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v7, v8);
  return scml::scml_impl::strCat<char const(&)[3],std::string>(a1, a3, a4);
}

void std::__function::__func<scml::`anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#8},std::allocator<scml::`anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#8}>,void ()(void)>::~__func()
{
  JUMPOUT(0x249544F58);
}

_QWORD *std::__function::__func<scml::`anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#8},std::allocator<scml::`anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#8}>,void ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_2516E3E60;
  return result;
}

void std::__function::__func<scml::`anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#8},std::allocator<scml::`anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#8}>,void ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_2516E3E60;
}

uint64_t std::__function::__func<scml::`anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#8},std::allocator<scml::`anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#8}>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<scml::`anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#8},std::allocator<scml::`anonymous namespace'::RuleBasedTextSanitizer::RuleBasedTextSanitizer(NSLocale *,unsigned long)::{lambda(void)#8}>,void ()(void)>::target_type()
{
}

void nlp::CFScopedPtr<__CFDictionary *>::reset(const void **a1, const void *a2)
{
  const void *v4;

  v4 = *a1;
  if (v4)
    CFRelease(v4);
  *a1 = a2;
}

uint64_t *std::unique_ptr<scml::`anonymous namespace'::RuleBasedTextSanitizer>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *result;
  *result = a2;
  if (v2)
  {

    std::unique_ptr<scml::MultiwordGazetteer>::reset[abi:ne180100]((scml::MultiwordGazetteer **)(v2 + 40), 0);
    std::unique_ptr<scml::MultiwordGazetteer>::reset[abi:ne180100]((scml::MultiwordGazetteer **)(v2 + 32), 0);
    std::unique_ptr<scml::MultiwordGazetteer>::reset[abi:ne180100]((scml::MultiwordGazetteer **)(v2 + 24), 0);
    std::unique_ptr<scml::MultiwordGazetteer>::reset[abi:ne180100]((scml::MultiwordGazetteer **)(v2 + 16), 0);
    nlp::CFScopedPtr<_LXLexicon const*>::reset((const void **)(v2 + 8), 0);
    nlp::CFScopedPtr<__CFStringTokenizer *>::reset((const void **)v2, 0);
    JUMPOUT(0x249544F58);
  }
  return result;
}

void _ZNSt3__110__function6__funcIZZ48__SCMLTextSanitizer_doModeration_withResponder__EUb_E3__4NS_9allocatorIS2_EEFvvEED0Ev()
{
  JUMPOUT(0x249544F58);
}

_QWORD *_ZNKSt3__110__function6__funcIZZ48__SCMLTextSanitizer_doModeration_withResponder__EUb_E3__4NS_9allocatorIS2_EEFvvEE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_2516E4018;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZZ48__SCMLTextSanitizer_doModeration_withResponder__EUb_E3__4NS_9allocatorIS2_EEFvvEE7__cloneEPNS0_6__baseIS5_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_2516E4018;
  a2[1] = v2;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZZ48__SCMLTextSanitizer_doModeration_withResponder__EUb_E3__4NS_9allocatorIS2_EEFvvEEclEv(uint64_t a1)
{
}

uint64_t _ZNKSt3__110__function6__funcIZZ48__SCMLTextSanitizer_doModeration_withResponder__EUb_E3__4NS_9allocatorIS2_EEFvvEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](a2, (uint64_t)&_ZTIZZ48__SCMLTextSanitizer_doModeration_withResponder__EUb_E3__4))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZZ48__SCMLTextSanitizer_doModeration_withResponder__EUb_E3__4NS_9allocatorIS2_EEFvvEE11target_typeEv()
{
  return &_ZTIZZ48__SCMLTextSanitizer_doModeration_withResponder__EUb_E3__4;
}

void _ZNSt3__110__function6__funcIZZ48__SCMLTextSanitizer_doModeration_withResponder__EUb_E3__5NS_9allocatorIS2_EEFvvEED0Ev()
{
  JUMPOUT(0x249544F58);
}

_QWORD *_ZNKSt3__110__function6__funcIZZ48__SCMLTextSanitizer_doModeration_withResponder__EUb_E3__5NS_9allocatorIS2_EEFvvEE7__cloneEv()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_2516E4070;
  return result;
}

void _ZNKSt3__110__function6__funcIZZ48__SCMLTextSanitizer_doModeration_withResponder__EUb_E3__5NS_9allocatorIS2_EEFvvEE7__cloneEPNS0_6__baseIS5_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_2516E4070;
}

uint64_t _ZNKSt3__110__function6__funcIZZ48__SCMLTextSanitizer_doModeration_withResponder__EUb_E3__5NS_9allocatorIS2_EEFvvEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](a2, (uint64_t)&_ZTIZZ48__SCMLTextSanitizer_doModeration_withResponder__EUb_E3__5))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZZ48__SCMLTextSanitizer_doModeration_withResponder__EUb_E3__5NS_9allocatorIS2_EEFvvEE11target_typeEv()
{
  return &_ZTIZZ48__SCMLTextSanitizer_doModeration_withResponder__EUb_E3__5;
}

void _ZNSt3__110__function6__funcIZZ57__SCMLTextSanitizer_doLLMBackend_withText_withResponder__EUb0_E3__6NS_9allocatorIS2_EEFvvEED0Ev()
{
  JUMPOUT(0x249544F58);
}

_QWORD *_ZNKSt3__110__function6__funcIZZ57__SCMLTextSanitizer_doLLMBackend_withText_withResponder__EUb0_E3__6NS_9allocatorIS2_EEFvvEE7__cloneEv(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_2516E40C8;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZZ57__SCMLTextSanitizer_doLLMBackend_withText_withResponder__EUb0_E3__6NS_9allocatorIS2_EEFvvEE7__cloneEPNS0_6__baseIS5_EE(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_2516E40C8;
  a2[1] = v2;
  return result;
}

uint64_t _ZNSt3__110__function6__funcIZZ57__SCMLTextSanitizer_doLLMBackend_withText_withResponder__EUb0_E3__6NS_9allocatorIS2_EEFvvEEclEv(uint64_t a1)
{
}

uint64_t _ZNKSt3__110__function6__funcIZZ57__SCMLTextSanitizer_doLLMBackend_withText_withResponder__EUb0_E3__6NS_9allocatorIS2_EEFvvEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](a2, (uint64_t)&_ZTIZZ57__SCMLTextSanitizer_doLLMBackend_withText_withResponder__EUb0_E3__6))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZZ57__SCMLTextSanitizer_doLLMBackend_withText_withResponder__EUb0_E3__6NS_9allocatorIS2_EEFvvEE11target_typeEv()
{
  return &_ZTIZZ57__SCMLTextSanitizer_doLLMBackend_withText_withResponder__EUb0_E3__6;
}

void _ZNSt3__110__function6__funcIZZ57__SCMLTextSanitizer_doLLMBackend_withText_withResponder__EUb0_E3__7NS_9allocatorIS2_EEFvvEED0Ev()
{
  JUMPOUT(0x249544F58);
}

_QWORD *_ZNKSt3__110__function6__funcIZZ57__SCMLTextSanitizer_doLLMBackend_withText_withResponder__EUb0_E3__7NS_9allocatorIS2_EEFvvEE7__cloneEv()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_2516E4120;
  return result;
}

void _ZNKSt3__110__function6__funcIZZ57__SCMLTextSanitizer_doLLMBackend_withText_withResponder__EUb0_E3__7NS_9allocatorIS2_EEFvvEE7__cloneEPNS0_6__baseIS5_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_2516E4120;
}

uint64_t _ZNKSt3__110__function6__funcIZZ57__SCMLTextSanitizer_doLLMBackend_withText_withResponder__EUb0_E3__7NS_9allocatorIS2_EEFvvEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](a2, (uint64_t)&_ZTIZZ57__SCMLTextSanitizer_doLLMBackend_withText_withResponder__EUb0_E3__7))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZZ57__SCMLTextSanitizer_doLLMBackend_withText_withResponder__EUb0_E3__7NS_9allocatorIS2_EEFvvEE11target_typeEv()
{
  return &_ZTIZZ57__SCMLTextSanitizer_doLLMBackend_withText_withResponder__EUb0_E3__7;
}

void _ZNSt3__110__function6__funcIZZ69__SCMLTextSanitizer_sanitizeRequestAsynchronously_completionHandler__EUb1_E3__8NS_9allocatorIS2_EEFvvEED0Ev()
{
  JUMPOUT(0x249544F58);
}

_QWORD *_ZNKSt3__110__function6__funcIZZ69__SCMLTextSanitizer_sanitizeRequestAsynchronously_completionHandler__EUb1_E3__8NS_9allocatorIS2_EEFvvEE7__cloneEv()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_2516E41D0;
  return result;
}

void _ZNKSt3__110__function6__funcIZZ69__SCMLTextSanitizer_sanitizeRequestAsynchronously_completionHandler__EUb1_E3__8NS_9allocatorIS2_EEFvvEE7__cloneEPNS0_6__baseIS5_EE(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_2516E41D0;
}

uint64_t _ZNKSt3__110__function6__funcIZZ69__SCMLTextSanitizer_sanitizeRequestAsynchronously_completionHandler__EUb1_E3__8NS_9allocatorIS2_EEFvvEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](a2, (uint64_t)&_ZTIZZ69__SCMLTextSanitizer_sanitizeRequestAsynchronously_completionHandler__EUb1_E3__8))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZZ69__SCMLTextSanitizer_sanitizeRequestAsynchronously_completionHandler__EUb1_E3__8NS_9allocatorIS2_EEFvvEE11target_typeEv()
{
  return &_ZTIZZ69__SCMLTextSanitizer_sanitizeRequestAsynchronously_completionHandler__EUb1_E3__8;
}

uint64_t std::unordered_map<std::string,SCMLAdapterViolationCategory>::unordered_map(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    v5 = 32 * a3;
    do
    {
      std::__hash_table<std::__hash_value_type<std::string,SCMLAdapterViolationCategory>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,SCMLAdapterViolationCategory>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,SCMLAdapterViolationCategory>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,SCMLAdapterViolationCategory>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,SCMLAdapterViolationCategory> const&>(a1, a2, (uint64_t)a2);
      a2 += 32;
      v5 -= 32;
    }
    while (v5);
  }
  return a1;
}

void sub_245C2EAC4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,SCMLAdapterViolationCategory>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,SCMLAdapterViolationCategory>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,SCMLAdapterViolationCategory>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,SCMLAdapterViolationCategory>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,SCMLAdapterViolationCategory> const&>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD v25[3];

  v7 = (_QWORD *)(a1 + 24);
  v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,SCMLAdapterViolationCategory>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,SCMLAdapterViolationCategory>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,SCMLAdapterViolationCategory>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,SCMLAdapterViolationCategory>>>::__construct_node_hash<std::pair<std::string const,SCMLAdapterViolationCategory> const&>(a1, v9, a3, (uint64_t)v25);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *(_QWORD *)v25[0] = *v22;
    *v22 = v25[0];
  }
  else
  {
    *(_QWORD *)v25[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v25[0])
    {
      v23 = *(_QWORD *)(*(_QWORD *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10)
          v23 %= v10;
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v25[0];
    }
  }
  i = (unsigned __int8 *)v25[0];
  ++*v7;
  return i;
}

void sub_245C2ED30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p)
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, __p);
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::__hash_value_type<std::string,SCMLAdapterViolationCategory>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,SCMLAdapterViolationCategory>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,SCMLAdapterViolationCategory>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,SCMLAdapterViolationCategory>>>::__construct_node_hash<std::pair<std::string const,SCMLAdapterViolationCategory> const&>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *v8;
  std::string *v9;

  v7 = a1 + 16;
  v8 = (char *)operator new(0x30uLL);
  *(_QWORD *)(a4 + 8) = v7;
  *(_QWORD *)a4 = v8;
  *(_BYTE *)(a4 + 16) = 0;
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = a2;
  v9 = (std::string *)(v8 + 16);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    *((_QWORD *)v8 + 4) = *(_QWORD *)(a3 + 16);
  }
  *((_DWORD *)v8 + 10) = *(_DWORD *)(a3 + 24);
  *(_BYTE *)(a4 + 16) = 1;
}

void sub_245C2EDE0(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void sub_245C2F2B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_245C2F31C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  void *v9;
  void *v10;

  v10 = v9;

  a9.super_class = (Class)SCMLVideoFrameProcessor;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_245C2F3A8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_245C2F444(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_245C2F4C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_245C2F538(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_245C2F5BC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_245C2F87C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_245C2FD0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

void sub_245C2FF54(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

char *scml::TextModerationLM::Impl::Impl(char *__dst, void *__src, size_t __len)
{
  void *v6;
  size_t v7;
  size_t v8;
  uint64_t *v9;
  E5RT::ExecutionStreamOperation ****v10;
  __int128 *p_p;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  size_t v16;
  __int128 **v17;
  char *v18;
  size_t v19;
  __int128 *v20;
  char *v21;
  char *v22;
  ik::core::E5OpImpl **v23;
  uint64_t i;
  E5RT::ExecutionStreamOperation **v25;
  std::__shared_weak_count *v26;
  E5RT::ExecutionStreamOperation *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  uint64_t j;
  uint64_t k;
  uint64_t m;
  uint64_t n;
  uint64_t ii;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  E5RT::ExecutionStreamOperation **v38;
  std::__shared_weak_count *v39;
  ik::core::E5OpImpl **v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t **jj;
  uint64_t v46;
  E5RT::ExecutionStreamOperation ***v47;
  unint64_t v48;
  unsigned __int8 *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t kk;
  std::runtime_error *exception;
  _QWORD *v55;
  void **v56;
  void **v57;
  _QWORD v58[2];
  std::__shared_weak_count *v59;
  void *v60;
  size_t v61;
  char **v62;
  char v63;
  ik::core::E5OpImpl **v64;
  std::__shared_weak_count *v65;
  int v66;
  uint64_t v67[3];
  int v68;
  void **v69;
  char v70;
  int v71;
  uint64_t v72[3];
  int v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD v77[2];
  __int128 v78;
  __int128 __p;
  __int128 v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  std::string v84;
  void *v85;
  uint64_t v86;
  char *v87;
  std::string *v88;
  std::string v89;
  char *v90;
  char *v91;
  char *v92;
  int v93;
  std::string v94;
  char *v95;
  uint64_t v96;
  char *v97;
  int v98;
  uint64_t v99;
  __int128 *v100[2];
  uint64_t **v101;
  void *v102;
  uint64_t v103;
  char v104;
  void *v105;
  int v106;
  _BYTE v107[8];
  char v108;
  uint64_t v109;

  v109 = *MEMORY[0x24BDAC8D0];
  v60 = __src;
  v61 = __len;
  if (__len >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    *((_QWORD *)__dst + 1) = __len;
    *((_QWORD *)__dst + 2) = v8 | 0x8000000000000000;
    *(_QWORD *)__dst = v6;
    goto LABEL_8;
  }
  __dst[23] = __len;
  v6 = __dst;
  if (__len)
LABEL_8:
    memmove(v6, __src, __len);
  *((_BYTE *)v6 + __len) = 0;
  *(_OWORD *)(__dst + 24) = 0u;
  *(_OWORD *)(__dst + 40) = 0u;
  *(_OWORD *)(__dst + 56) = 0u;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)__dst + 9, "cls_pos_ids");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)__dst + 12, "cls_seg_ids");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)__dst + 15, "cls_token_ids");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)__dst + 18, "padding_mask");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)__dst + 21, "probs");
  *((_DWORD *)__dst + 48) = 1;
  v9 = (uint64_t *)(__dst + 200);
  *(_OWORD *)(__dst + 196) = 0u;
  v10 = (E5RT::ExecutionStreamOperation ****)(__dst + 208);
  v55 = __dst + 216;
  *(_OWORD *)(__dst + 212) = 0u;
  *(_OWORD *)(__dst + 228) = 0u;
  *(_QWORD *)(__dst + 244) = 0x3F80000000000000;
  *((_QWORD *)__dst + 32) = 0;
  scml::strCat<std::string_view const&,char const(&)[11]>((uint64_t *)&v60, ".config.json", &__p);
  if ((SBYTE7(v80) & 0x80u) == 0)
    p_p = &__p;
  else
    p_p = (__int128 *)__p;
  if ((SBYTE7(v80) & 0x80u) == 0)
    v12 = BYTE7(v80);
  else
    v12 = *((_QWORD *)&__p + 1);
  scml::TextModerationLM::Impl::loadConfig((uint64_t)__dst, p_p, v12);
  if (SBYTE7(v80) < 0)
    operator delete((void *)__p);
  scml::TextModerationTokenizerConfig::fromConfigFile(v60, v61, (uint64_t)&__p);
  v13 = operator new();
  scml::TextModerationTokenizer::TextModerationTokenizer(v13, v60, v61, &__p);
  *(_QWORD *)&v74 = 0;
  v14 = *v9;
  *v9 = v13;
  if (v14)
  {
    std::default_delete<scml::TextModerationTokenizer>::operator()[abi:ne180100]((uint64_t)(__dst + 200), v14);
    v15 = v74;
    *(_QWORD *)&v74 = 0;
    if (v15)
      std::default_delete<scml::TextModerationTokenizer>::operator()[abi:ne180100]((uint64_t)&v74, v15);
  }
  if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v89.__r_.__value_.__l.__data_);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v84.__r_.__value_.__r.__words[2]);
  v100[0] = (__int128 *)&v83;
  std::vector<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>>::__destroy_vector::operator()[abi:ne180100]((void ***)v100);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&__p + 8);
  if (__dst[23] >= 0)
    v16 = __dst[23];
  else
    v16 = *((_QWORD *)__dst + 1);
  v17 = v100;
  std::string::basic_string[abi:ne180100]((uint64_t)v100, v16 + 7);
  if (SHIBYTE(v101) < 0)
    v17 = (__int128 **)v100[0];
  if (v16)
  {
    if (__dst[23] >= 0)
      v18 = __dst;
    else
      v18 = *(char **)__dst;
    memmove(v17, v18, v16);
  }
  strcpy((char *)v17 + v16, ".bundle");
  std::string::basic_string[abi:ne180100]<0>(&v102, "main");
  LOBYTE(v105) = 0;
  v108 = 0;
  if (__dst[23] >= 0)
    v19 = __dst[23];
  else
    v19 = *((_QWORD *)__dst + 1);
  v20 = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v19 + 4);
  if (SBYTE7(v80) < 0)
    v20 = (__int128 *)__p;
  if (v19)
  {
    if (__dst[23] >= 0)
      v21 = __dst;
    else
      v21 = *(char **)__dst;
    memmove(v20, v21, v19);
  }
  strcpy((char *)v20 + v19, ".mil");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)&v80 + 1, "main");
  LOBYTE(v83) = 0;
  v84.__r_.__value_.__s.__data_[16] = 0;
  v86 = 0;
  v87 = 0;
  v85 = 0;
  v22 = (char *)operator new(0x10uLL);
  v85 = v22;
  *(_OWORD *)v22 = xmmword_245C91F00;
  v86 = (uint64_t)(v22 + 16);
  v87 = v22 + 16;
  std::string::basic_string[abi:ne180100]<0>(&v74, "bnns");
  std::string::basic_string[abi:ne180100]<0>(&v76, "classic_cpu");
  v88 = 0;
  *(_OWORD *)&v89.__r_.__value_.__l.__data_ = 0uLL;
  v69 = (void **)&v88;
  v70 = 0;
  v88 = (std::string *)operator new(0x30uLL);
  v89.__r_.__value_.__r.__words[0] = (std::string::size_type)v88;
  v89.__r_.__value_.__l.__size_ = (std::string::size_type)&v88[2];
  v89.__r_.__value_.__r.__words[0] = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v89.__r_.__value_.__l.__size_, &v74, &v78, v88);
  v89.__r_.__value_.__s.__data_[16] = 0;
  v90 = 0;
  scml::loadModelWithFallback((scml *)v100, (const ik::core::E5LoadPreCompiledConfig *)&__p, (ik::E5Op **)&v64);
  v23 = v64;
  v64 = 0;
  std::unique_ptr<ik::E5Op>::reset[abi:ne180100]((ik::core::E5OpImpl ***)__dst + 26, v23);
  std::unique_ptr<ik::E5Op>::reset[abi:ne180100](&v64, 0);

  v69 = (void **)&v88;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v69);
  if (v85)
  {
    v86 = (uint64_t)v85;
    operator delete(v85);
  }
  if (v84.__r_.__value_.__s.__data_[16] && v84.__r_.__value_.__s.__data_[15] < 0)
    operator delete(v83);
  if (SHIBYTE(v82) < 0)
    operator delete(*((void **)&v80 + 1));
  if (SBYTE7(v80) < 0)
    operator delete((void *)__p);
  for (i = 0; i != -6; i -= 3)
  {
    if (SHIBYTE(v77[i + 1]) < 0)
      operator delete((void *)v77[i - 1]);
  }
  if (v108 && (v107[7] & 0x80000000) != 0)
    operator delete(v105);
  if (v104 < 0)
    operator delete(v102);
  if (SHIBYTE(v101) < 0)
    operator delete(v100[0]);
  v25 = **v10;
  v27 = *v25;
  v26 = (std::__shared_weak_count *)v25[1];
  v58[1] = v27;
  v59 = v26;
  if (v26)
  {
    p_shared_owners = (unint64_t *)&v26->__shared_owners_;
    do
      v29 = __ldxr(p_shared_owners);
    while (__stxr(v29 + 1, p_shared_owners));
  }
  if (__dst[95] < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&__p, *((const std::string::value_type **)__dst + 9), *((_QWORD *)__dst + 10));
  }
  else
  {
    __p = *(_OWORD *)(__dst + 72);
    *(_QWORD *)&v80 = *((_QWORD *)__dst + 11);
  }
  LODWORD(v100[0]) = 1;
  LODWORD(v102) = 0;
  std::string::basic_string[abi:ne180100]<0>(&v103, "maxTokens");
  v106 = 1;
  v81 = 0;
  v82 = 0;
  *((_QWORD *)&v80 + 1) = 0;
  *(_QWORD *)&v74 = (char *)&v80 + 8;
  BYTE8(v74) = 0;
  *((_QWORD *)&v80 + 1) = operator new(0x40uLL);
  v81 = *((_QWORD *)&v80 + 1);
  v82 = *((_QWORD *)&v80 + 1) + 64;
  v81 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::variant<int,std::string>>,std::variant<int,std::string> const*,std::variant<int,std::string> const*,std::variant<int,std::string>*>((uint64_t)&v82, (uint64_t)v100, (uint64_t)v107, *((uint64_t *)&v80 + 1));
  LODWORD(v83) = 2;
  if (__dst[119] < 0)
    std::string::__init_copy_ctor_external(&v84, *((const std::string::value_type **)__dst + 12), *((_QWORD *)__dst + 13));
  else
    v84 = *(std::string *)(__dst + 4);
  LODWORD(v74) = 1;
  LODWORD(v76) = 0;
  std::string::basic_string[abi:ne180100]<0>(v77, "maxTokens");
  DWORD2(v78) = 1;
  v86 = 0;
  v87 = 0;
  v85 = 0;
  v69 = &v85;
  v70 = 0;
  v85 = operator new(0x40uLL);
  v86 = (uint64_t)v85;
  v87 = (char *)v85 + 64;
  v86 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::variant<int,std::string>>,std::variant<int,std::string> const*,std::variant<int,std::string> const*,std::variant<int,std::string>*>((uint64_t)&v87, (uint64_t)&v74, (uint64_t)&__p, (uint64_t)v85);
  LODWORD(v88) = 2;
  if (__dst[143] < 0)
    std::string::__init_copy_ctor_external(&v89, *((const std::string::value_type **)__dst + 15), *((_QWORD *)__dst + 16));
  else
    v89 = *(std::string *)(__dst + 5);
  LODWORD(v69) = 1;
  v71 = 0;
  std::string::basic_string[abi:ne180100]<0>(v72, "maxTokens");
  v73 = 1;
  v91 = 0;
  v92 = 0;
  v90 = 0;
  v64 = (ik::core::E5OpImpl **)&v90;
  LOBYTE(v65) = 0;
  v90 = (char *)operator new(0x40uLL);
  v91 = v90;
  v92 = v90 + 64;
  v91 = (char *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::variant<int,std::string>>,std::variant<int,std::string> const*,std::variant<int,std::string> const*,std::variant<int,std::string>*>((uint64_t)&v92, (uint64_t)&v69, (uint64_t)&v74, (uint64_t)v90);
  v93 = 2;
  if (__dst[167] < 0)
    std::string::__init_copy_ctor_external(&v94, *((const std::string::value_type **)__dst + 18), *((_QWORD *)__dst + 19));
  else
    v94 = *(std::string *)(__dst + 6);
  LODWORD(v64) = 1;
  v66 = 0;
  std::string::basic_string[abi:ne180100]<0>(v67, "maxTokens");
  v68 = 1;
  v97 = 0;
  v95 = 0;
  v96 = 0;
  v62 = &v95;
  v63 = 0;
  v95 = (char *)operator new(0x40uLL);
  v96 = (uint64_t)v95;
  v97 = v95 + 64;
  v96 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::variant<int,std::string>>,std::variant<int,std::string> const*,std::variant<int,std::string> const*,std::variant<int,std::string>*>((uint64_t)&v97, (uint64_t)&v64, (uint64_t)&v69, (uint64_t)v95);
  v98 = 2;
  v57 = 0;
  v58[0] = 0;
  v56 = 0;
  v62 = (char **)&v56;
  v63 = 0;
  v56 = (void **)operator new(0xE0uLL);
  v57 = v56;
  v58[0] = v56 + 28;
  v57 = (void **)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<scml::TensorSpec>,scml::TensorSpec const*,scml::TensorSpec const*,scml::TensorSpec*>((uint64_t)v58, (uint64_t)&__p, (uint64_t)&v99, (uint64_t)v56);
  scml::validateInputs(v27, &v56);
  v62 = (char **)&v56;
  std::vector<scml::TensorSpec>::__destroy_vector::operator()[abi:ne180100]((void ***)&v62);
  for (j = 0; j != -28; j -= 7)
  {
    v62 = &(&v95)[j];
    std::vector<std::variant<int,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v62);
    if (SHIBYTE(v94.__r_.__value_.__r.__words[j + 2]) < 0)
      operator delete(*(void **)((char *)&v94.__r_.__value_.__l.__data_ + j * 8));
  }
  for (k = 4; k != -4; k -= 4)
    std::__variant_detail::__dtor<std::__variant_detail::__traits<int,std::string>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&(&v64)[k]);
  for (m = 4; m != -4; m -= 4)
    std::__variant_detail::__dtor<std::__variant_detail::__traits<int,std::string>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&(&v69)[m]);
  for (n = 32; n != -32; n -= 32)
    std::__variant_detail::__dtor<std::__variant_detail::__traits<int,std::string>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&v74 + n);
  for (ii = 4; ii != -4; ii -= 4)
    std::__variant_detail::__dtor<std::__variant_detail::__traits<int,std::string>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&v100[ii]);
  v35 = v59;
  if (v59)
  {
    v36 = (unint64_t *)&v59->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  v38 = **v10;
  v40 = (ik::core::E5OpImpl **)*v38;
  v39 = (std::__shared_weak_count *)v38[1];
  v64 = (ik::core::E5OpImpl **)*v38;
  v65 = v39;
  if (v39)
  {
    v41 = (unint64_t *)&v39->__shared_owners_;
    do
      v42 = __ldxr(v41);
    while (__stxr(v42 + 1, v41));
  }
  if (__dst[191] < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&__p, *((const std::string::value_type **)__dst + 21), *((_QWORD *)__dst + 22));
  }
  else
  {
    __p = *(_OWORD *)(__dst + 168);
    *(_QWORD *)&v80 = *((_QWORD *)__dst + 23);
  }
  LODWORD(v100[0]) = (*((_QWORD *)__dst + 7) - *((_QWORD *)__dst + 6)) >> 2;
  LODWORD(v102) = 0;
  v81 = 0;
  v82 = 0;
  *((_QWORD *)&v80 + 1) = 0;
  v69 = (void **)&v80 + 1;
  v70 = 0;
  *((_QWORD *)&v80 + 1) = operator new(0x20uLL);
  v81 = *((_QWORD *)&v80 + 1);
  v82 = *((_QWORD *)&v80 + 1) + 32;
  v81 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::variant<int,std::string>>,std::variant<int,std::string> const*,std::variant<int,std::string> const*,std::variant<int,std::string>*>((uint64_t)&v82, (uint64_t)v100, (uint64_t)&v103, *((uint64_t *)&v80 + 1));
  LODWORD(v83) = 4;
  v75 = 0;
  v74 = 0uLL;
  v69 = (void **)&v74;
  v70 = 0;
  *(_QWORD *)&v74 = operator new(0x38uLL);
  *((_QWORD *)&v74 + 1) = v74;
  v75 = v74 + 56;
  *((_QWORD *)&v74 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<scml::TensorSpec>,scml::TensorSpec const*,scml::TensorSpec const*,scml::TensorSpec*>((uint64_t)&v75, (uint64_t)&__p, (uint64_t)&v84, v74);
  scml::validateOutputs((E5RT::ExecutionStreamOperation *)v40, (void ***)&v74);
  v69 = (void **)&v74;
  std::vector<scml::TensorSpec>::__destroy_vector::operator()[abi:ne180100](&v69);
  v69 = (void **)&v80 + 1;
  std::vector<std::variant<int,std::string>>::__destroy_vector::operator()[abi:ne180100](&v69);
  if (SBYTE7(v80) < 0)
    operator delete((void *)__p);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<int,std::string>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v100);
  if (v39)
  {
    v43 = (unint64_t *)&v39->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  ik::core::E5OpImpl::CreateInputTensors(**v10, (uint64_t)v100);
  __p = 0u;
  v80 = 0u;
  LODWORD(v81) = 1065353216;
  for (jj = v101; jj; jj = (uint64_t **)*jj)
  {
    *(_QWORD *)&v74 = &__p;
    *((_QWORD *)&v74 + 1) = jj + 2;
    v46 = *((unsigned int *)jj + 24);
    if ((_DWORD)v46 == -1)
      std::__throw_bad_variant_access[abi:ne180100]();
    v69 = (void **)&v74;
    ((void (*)(void ***, uint64_t **))off_2516E4C30[v46])(&v69, jj + 5);
  }
  std::__hash_table<std::__hash_value_type<std::string,ik::Tensor>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ik::Tensor>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ik::Tensor>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ik::Tensor>>>::__move_assign((uint64_t)v55, (uint64_t *)&__p);
  std::__hash_table<std::__hash_value_type<std::string,ik::E5BufferTensor>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ik::E5BufferTensor>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ik::E5BufferTensor>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ik::E5BufferTensor>>>::~__hash_table((uint64_t)&__p);
  std::__hash_table<std::__hash_value_type<std::string,std::variant<ik::E5BufferTensor,ik::PixelBufferTensor>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<ik::E5BufferTensor,ik::PixelBufferTensor>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<ik::E5BufferTensor,ik::PixelBufferTensor>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<ik::E5BufferTensor,ik::PixelBufferTensor>>>>::~__hash_table((uint64_t)v100);
  v47 = *v10;
  __p = 0u;
  v80 = 0u;
  LODWORD(v81) = 1065353216;
  ik::core::E5OpImpl::Bind<ik::Tensor>((uint64_t)*v47, v55, &__p);
  std::__hash_table<std::__hash_value_type<std::string,ik::E5BufferTensor>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ik::E5BufferTensor>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ik::E5BufferTensor>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ik::E5BufferTensor>>>::~__hash_table((uint64_t)&__p);
  v100[0] = (__int128 *)(__dst + 72);
  v48 = *(_QWORD *)(*((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,ik::Tensor>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ik::Tensor>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ik::Tensor>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ik::Tensor>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v55, (unsigned __int8 *)__dst + 72, (uint64_t)&std::piecewise_construct, v100)+ 7)+ 8);
  *((_QWORD *)__dst + 32) = v48;
  if (v48 <= *((int *)__dst + 49))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "window_overlap exceeds max token len");
    __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  v100[0] = (__int128 *)(__dst + 72);
  v49 = std::__hash_table<std::__hash_value_type<std::string,ik::Tensor>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ik::Tensor>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ik::Tensor>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ik::Tensor>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v55, (unsigned __int8 *)__dst + 72, (uint64_t)&std::piecewise_construct, v100);
  v50 = ik::Tensor::Data<int>((uint64_t)(v49 + 40));
  if (v51)
  {
    for (kk = 0; kk != v51; ++kk)
      *(_DWORD *)(v50 + 4 * kk) = kk;
  }
  return __dst;
}

void sub_245C30E90(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t *a11, void **a12, void **a13, void **a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49)
{
  uint64_t v49;
  void **v50;
  ik::core::E5OpImpl ***v51;
  void *v53;
  void *exception;
  uint64_t v55;
  void *v56;

  std::shared_ptr<scml::Config::PathInfo>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  if (a2 == 1)
  {
    v53 = __cxa_begin_catch(a1);
    exception = __cxa_allocate_exception(0x10uLL);
    a41 = (void *)(*(uint64_t (**)(void *))(*(_QWORD *)v53 + 16))(v53);
    scml::strCat<char const(&)[27],std::string_view &,char const(&)[3],char const*>("Failed to load TextSanitizerLM from ", &a21, ": ", (const char **)&a41, &a49);
    MEMORY[0x249544C64](exception, &a49);
    __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  std::__hash_table<std::__hash_value_type<std::string,ik::E5BufferTensor>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ik::E5BufferTensor>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ik::E5BufferTensor>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ik::E5BufferTensor>>>::~__hash_table(a15);
  std::unique_ptr<ik::E5Op>::reset[abi:ne180100](v51, 0);
  v55 = *a11;
  *a11 = 0;
  if (v55)
    std::default_delete<scml::TextModerationTokenizer>::operator()[abi:ne180100]((uint64_t)a11, v55);
  if (*(char *)(v49 + 191) < 0)
    operator delete(*a12);
  if (*(char *)(v49 + 167) < 0)
    operator delete(*a13);
  if (*(char *)(v49 + 143) < 0)
    operator delete(*a14);
  if (*(char *)(v49 + 119) < 0)
    operator delete(*a10);
  if (*(char *)(v49 + 95) < 0)
    operator delete(*v50);
  v56 = *(void **)(v49 + 48);
  if (v56)
  {
    *(_QWORD *)(v49 + 56) = v56;
    operator delete(v56);
  }
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a49);
  if (*(char *)(v49 + 23) < 0)
    operator delete(*(void **)v49);
  _Unwind_Resume(a1);
}

void sub_245C31450(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *__p,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  void *v54;
  int v55;

  if (a54 < 0)
  {
    operator delete(__p);
    if ((v55 & 1) == 0)
      goto LABEL_6;
  }
  else if (!v55)
  {
LABEL_6:
    __cxa_end_catch();
    JUMPOUT(0x245C31484);
  }
  __cxa_free_exception(v54);
  goto LABEL_6;
}

void sub_245C31540(void *a1, int a2)
{
  if (!a2)
    JUMPOUT(0x245C31548);
  __clang_call_terminate(a1);
}

uint64_t scml::TextModerationLM::Impl::loadConfig(uint64_t a1, const void *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  void **v7;
  __int128 *v8;
  unint64_t v9;
  uint64_t v10;
  float v11;
  float v12;
  unint64_t v13;
  float *v14;
  float *v15;
  float *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  float *v22;
  int v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  void *__p[2];
  char v29;
  char v30;
  void **v31;
  _BYTE v32[56];
  std::__shared_weak_count *v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  scml::Config::loadJson(a2, a3, (uint64_t)v32);
  LOBYTE(__p[0]) = 0;
  BYTE4(__p[0]) = 0;
  *(_DWORD *)(a1 + 192) = scml::Config::get<int>((uint64_t)v32, "max_windows", 0xBuLL, __p);
  LOBYTE(__p[0]) = 0;
  BYTE4(__p[0]) = 0;
  *(_DWORD *)(a1 + 196) = scml::Config::get<int>((uint64_t)v32, "window_overlap", 0xEuLL, __p);
  LOBYTE(__p[0]) = 0;
  v30 = 0;
  v4 = (uint64_t *)scml::Config::get<std::vector<scml::Config>>((uint64_t)v32, "class_thresholds", 0x10uLL, (uint64_t)__p);
  if (v30)
  {
    v31 = __p;
    std::vector<scml::Config>::__destroy_vector::operator()[abi:ne180100](&v31);
  }
  v5 = *v4;
  v6 = v4[1];
  if (*v4 != v6)
  {
    v7 = (void **)(a1 + 48);
    do
    {
      LOBYTE(__p[0]) = 0;
      v30 = 0;
      v8 = (__int128 *)scml::Config::get<std::string>(v5, "class", 5uLL, (uint64_t)__p);
      v9 = *(_QWORD *)(a1 + 32);
      if (v9 >= *(_QWORD *)(a1 + 40))
      {
        v10 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)(a1 + 24), v8);
      }
      else
      {
        std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>(a1 + 24, v8);
        v10 = v9 + 24;
      }
      *(_QWORD *)(a1 + 32) = v10;
      if (v30 && v29 < 0)
        operator delete(__p[0]);
      LOBYTE(__p[0]) = 0;
      BYTE4(__p[0]) = 0;
      v11 = scml::Config::get<float>(v5, "threshold", 9uLL, __p);
      v12 = v11;
      v14 = *(float **)(a1 + 56);
      v13 = *(_QWORD *)(a1 + 64);
      if ((unint64_t)v14 >= v13)
      {
        v16 = (float *)*v7;
        v17 = ((char *)v14 - (_BYTE *)*v7) >> 2;
        v18 = v17 + 1;
        if ((unint64_t)(v17 + 1) >> 62)
          std::vector<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>>::__throw_length_error[abi:ne180100]();
        v19 = v13 - (_QWORD)v16;
        if (v19 >> 1 > v18)
          v18 = v19 >> 1;
        if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFFCLL)
          v20 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v20 = v18;
        if (v20)
        {
          v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(a1 + 64, v20);
          v16 = *(float **)(a1 + 48);
          v14 = *(float **)(a1 + 56);
        }
        else
        {
          v21 = 0;
        }
        v22 = (float *)&v21[4 * v17];
        *v22 = v12;
        v15 = v22 + 1;
        while (v14 != v16)
        {
          v23 = *((_DWORD *)v14-- - 1);
          *((_DWORD *)v22-- - 1) = v23;
        }
        *(_QWORD *)(a1 + 48) = v22;
        *(_QWORD *)(a1 + 56) = v15;
        *(_QWORD *)(a1 + 64) = &v21[4 * v20];
        if (v16)
          operator delete(v16);
      }
      else
      {
        *v14 = v11;
        v15 = v14 + 1;
      }
      *(_QWORD *)(a1 + 56) = v15;
      v5 += 64;
    }
    while (v5 != v6);
  }
  v24 = v33;
  if (v33)
  {
    p_shared_owners = (unint64_t *)&v33->__shared_owners_;
    do
      v26 = __ldaxr(p_shared_owners);
    while (__stlxr(v26 - 1, p_shared_owners));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  return std::__variant_detail::__dtor<std::__variant_detail::__traits<decltype(nullptr),long long,double,std::string,std::vector<scml::Config>,std::unordered_map<std::string,scml::Config>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v32);
}

void sub_245C31808(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void **p_p, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  if (a15)
  {
    p_p = &__p;
    std::vector<scml::Config>::__destroy_vector::operator()[abi:ne180100](&p_p);
  }
  std::shared_ptr<scml::Config::PathInfo>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<decltype(nullptr),long long,double,std::string,std::vector<scml::Config>,std::unordered_map<std::string,scml::Config>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&a17);
  _Unwind_Resume(a1);
}

uint64_t scml::Config::get<int>(uint64_t a1, const void *a2, size_t a3, _BYTE *a4)
{
  uint64_t v8;
  _QWORD *v9;
  void **p_dst;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  void *exception;
  void **v17;
  uint64_t v18;
  void **__dst;
  size_t v20;
  int64_t v21;
  uint64_t v22[2];

  v22[0] = (uint64_t)a2;
  v22[1] = a3;
  v8 = scml::Config::as<std::unordered_map<std::string,scml::Config>>(a1);
  if (a3 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v9 = (_QWORD *)v8;
  if (a3 >= 0x17)
  {
    v11 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17)
      v11 = a3 | 7;
    v12 = v11 + 1;
    p_dst = (void **)operator new(v11 + 1);
    v20 = a3;
    v21 = v12 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v21) = a3;
  p_dst = (void **)&__dst;
  if (a3)
LABEL_8:
    memmove(p_dst, a2, a3);
  *((_BYTE *)p_dst + a3) = 0;
  v13 = std::__hash_table<std::__hash_value_type<std::string,scml::Config>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,scml::Config>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,scml::Config>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,scml::Config>>>::find<std::string>(v9, (unsigned __int8 *)&__dst);
  v14 = v13;
  if (SHIBYTE(v21) < 0)
  {
    operator delete(__dst);
    if (v14)
      return scml::Config::as<int>((_DWORD *)v14 + 10);
  }
  else if (v13)
  {
    return scml::Config::as<int>((_DWORD *)v14 + 10);
  }
  if (!a4[4])
  {
    exception = __cxa_allocate_exception(0x10uLL);
    scml::strCat<std::string_view const&,char const(&)[11]>(v22, " not found", &__dst);
    if (v21 >= 0)
      v17 = (void **)&__dst;
    else
      v17 = __dst;
    if (v21 >= 0)
      v18 = HIBYTE(v21);
    else
      v18 = v20;
    scml::Config::error(a1, (uint64_t)v17, v18, (uint64_t)exception);
    __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  return *(unsigned int *)a4;
}

void sub_245C319F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

void scml::TextModerationLM::Impl::writeNextInputTensors(uint64_t a1, std::vector<int> *a2, char a3)
{
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  void *v9;
  size_t v10;
  void *v11;
  size_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t i;
  std::vector<int>::pointer begin;
  int v18;
  __int128 *v19;
  _DWORD *v20;
  int *v21;
  unint64_t v22;
  std::runtime_error *exception;
  int v24;
  void *__p;
  _DWORD *v26;
  void *v27;
  void *v28;
  __int128 *v29[2];
  void *v30;
  void *v31;
  void *v32[3];

  v6 = a1 + 216;
  v29[0] = (__int128 *)(a1 + 120);
  v7 = std::__hash_table<std::__hash_value_type<std::string,ik::Tensor>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ik::Tensor>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ik::Tensor>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ik::Tensor>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 216, (unsigned __int8 *)(a1 + 120), (uint64_t)&std::piecewise_construct, v29);
  v29[0] = (__int128 *)(a1 + 144);
  v8 = std::__hash_table<std::__hash_value_type<std::string,ik::Tensor>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ik::Tensor>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ik::Tensor>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ik::Tensor>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v6, (unsigned __int8 *)(a1 + 144), (uint64_t)&std::piecewise_construct, v29);
  v9 = (void *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)v7 + 10) + 24))(*((_QWORD *)v7 + 10));
  bzero(v9, v10);
  v11 = (void *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)v8 + 10) + 24))(*((_QWORD *)v8 + 10));
  bzero(v11, v12);
  if ((unint64_t)(a2->__end_ - a2->__begin_) >= *(_QWORD *)(a1 + 256))
    v13 = *(_QWORD *)(a1 + 256);
  else
    v13 = a2->__end_ - a2->__begin_;
  v14 = ik::Tensor::Data<int>((uint64_t)(v7 + 40));
  (*(void (**)(void **__return_ptr))(**((_QWORD **)v7 + 10) + 32))(&__p);
  ik::ArrayView<int,-1>::ArrayView(v29, v14, (uint64_t)&__p);
  v29[0] = (__int128 *)&unk_2516E3408;
  if (__p)
  {
    v26 = __p;
    operator delete(__p);
  }
  v15 = ik::Tensor::Data<int>((uint64_t)(v8 + 40));
  (*(void (**)(void **__return_ptr))(**((_QWORD **)v8 + 10) + 32))(v32);
  ik::ArrayView<int,-1>::ArrayView(&__p, v15, (uint64_t)v32);
  __p = &unk_2516E3408;
  if (v32[0])
  {
    v32[1] = v32[0];
    operator delete(v32[0]);
  }
  v32[0] = 0;
  if (v13)
  {
    for (i = 0; i < v13; v32[0] = (void *)i)
    {
      begin = a2->__begin_;
      if ((a3 & 1) == 0)
        i = i - v13 + a2->__end_ - begin;
      v18 = begin[i];
      if (!v18)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "unexpected padding token found");
        __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
      }
      v24 = 0;
      v19 = v29[1];
      *((_DWORD *)v19 + ik::ArrayView<int,-1>::IndexOf<int,unsigned long>((uint64_t)v29, &v24, v32)) = v18;
      v24 = 0;
      v20 = v26;
      v20[ik::ArrayView<int,-1>::IndexOf<int,unsigned long>((uint64_t)&__p, &v24, v32)] = 1;
      i = (unint64_t)v32[0] + 1;
    }
  }
  v21 = a2->__begin_;
  if ((a3 & 1) == 0 && (v22 = a2->__end_ - v21 - v13) != 0)
    std::vector<int>::resize(a2, v22 + *(int *)(a1 + 196));
  else
    a2->__end_ = v21;
  __p = &unk_2516E3568;
  if (v27)
  {
    v28 = v27;
    operator delete(v27);
  }
  v29[0] = (__int128 *)&unk_2516E3568;
  if (v30)
  {
    v31 = v30;
    operator delete(v30);
  }
}

void sub_245C31CC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  if (a18)
    operator delete(a18);
  _Unwind_Resume(exception_object);
}

void std::vector<int>::resize(std::vector<int> *this, std::vector<int>::size_type __sz)
{
  std::vector<int>::size_type v2;

  v2 = this->__end_ - this->__begin_;
  if (__sz <= v2)
  {
    if (__sz < v2)
      this->__end_ = &this->__begin_[__sz];
  }
  else
  {
    std::vector<int>::__append(this, __sz - v2);
  }
}

_QWORD *ik::MutableArrayView<int,-1>::~MutableArrayView(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_2516E3568;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

char **scml::TextModerationLM::TextModerationLM(char **this)
{
  void **v2;
  size_t v3;
  void *__p[2];
  unsigned __int8 v6;

  scml::TextModerationLM::defaultPathPrefix(__p);
  if ((v6 & 0x80u) == 0)
    v2 = __p;
  else
    v2 = (void **)__p[0];
  if ((v6 & 0x80u) == 0)
    v3 = v6;
  else
    v3 = (size_t)__p[1];
  scml::TextModerationLM::TextModerationLM(this, v2, v3);
  if ((char)v6 < 0)
    operator delete(__p[0]);
  return this;
}

{
  void **v2;
  size_t v3;
  void *__p[2];
  unsigned __int8 v6;

  scml::TextModerationLM::defaultPathPrefix(__p);
  if ((v6 & 0x80u) == 0)
    v2 = __p;
  else
    v2 = (void **)__p[0];
  if ((v6 & 0x80u) == 0)
    v3 = v6;
  else
    v3 = (size_t)__p[1];
  scml::TextModerationLM::TextModerationLM(this, v2, v3);
  if ((char)v6 < 0)
    operator delete(__p[0]);
  return this;
}

void sub_245C31E34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void scml::TextModerationLM::defaultPathPrefix(_QWORD *a1@<X8>)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  id v8;

  objc_msgSend(MEMORY[0x24BDD1488], "bundleForClass:", objc_opt_class());
  v8 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "resourceURL");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "path");
  v4 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend(v4, "stringByAppendingPathComponent:", CFSTR("Models"));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v5, "stringByAppendingPathComponent:", CFSTR("TextModel-unilm_v1.7.0_icnivq3txx_125000"));
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "stringByAppendingPathComponent:", CFSTR("TextModel-unilm_v1.7.0_icnivq3txx_125000"));
  v7 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  std::string::basic_string[abi:ne180100]<0>(a1, (char *)objc_msgSend(v7, "UTF8String"));

}

void sub_245C31F30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

char **scml::TextModerationLM::TextModerationLM(char **a1, void *a2, size_t a3)
{
  char *v6;

  v6 = (char *)operator new();
  scml::TextModerationLM::Impl::Impl(v6, a2, a3);
  *a1 = v6;
  return a1;
}

void sub_245C31FDC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x249544F58](v1, 0x10B2C40CF565F30);
  _Unwind_Resume(a1);
}

void sub_245C32064(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void scml::TextModerationLM::~TextModerationLM(scml::TextModerationLM::Impl **this)
{
  std::unique_ptr<scml::TextModerationLM::Impl>::reset[abi:ne180100](this, 0);
}

{
  std::unique_ptr<scml::TextModerationLM::Impl>::reset[abi:ne180100](this, 0);
}

void scml::TextModerationLM::predict(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  BOOL v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  float v27;
  unint64_t v28;
  std::vector<int>::pointer begin;
  std::vector<int>::pointer end;
  void *v32;
  uint64_t v33;
  void *__p;
  void *v35;
  _QWORD v36[5];
  std::vector<int> v37;
  void *v38[4];

  scml::TextModerationTokenizer::textToIDs(*(_QWORD *)(*a1 + 200), a2, a3, &v37);
  *(_BYTE *)a5 = 1;
  *(_QWORD *)(a5 + 8) = 0;
  v7 = *a1;
  *(_QWORD *)(a5 + 16) = 0;
  *(_QWORD *)(a5 + 24) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a5 + 8), *(__int128 **)(v7 + 24), *(__int128 **)(v7 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v7 + 32) - *(_QWORD *)(v7 + 24)) >> 3));
  v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(*a1 + 32) - *(_QWORD *)(*a1 + 24)) >> 3);
  LOBYTE(v36[0]) = 1;
  std::vector<BOOL>::vector((_QWORD *)(a5 + 32), v8, (unsigned __int8 *)v36);
  v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(*a1 + 32) - *(_QWORD *)(*a1 + 24)) >> 3);
  LODWORD(v32) = -1082130432;
  std::vector<float>::vector((_QWORD *)(a5 + 56), v9, &v32);
  v10 = *a1;
  if (*(int *)(*a1 + 192) >= 1)
  {
    v11 = 0;
    do
    {
      scml::TextModerationLM::Impl::writeNextInputTensors(v10, &v37, a4);
      ik::core::E5OpImpl::Run(**(ik::core::E5OpImpl ***)(*a1 + 208), (uint64_t)v36);
      v12 = std::__hash_table<std::__hash_value_type<std::string,ik::E5BufferTensor>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ik::E5BufferTensor>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ik::E5BufferTensor>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ik::E5BufferTensor>>>::find<std::string>(v36, (unsigned __int8 *)(*a1 + 168));
      v13 = v12;
      if (!v12)
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      v14 = ik::Tensor::Data<float>((uint64_t)(v12 + 40));
      (*(void (**)(void **__return_ptr))(**((_QWORD **)v13 + 10) + 32))(v38);
      ik::ArrayView<float,-1>::ArrayView(&v32, v14, (uint64_t)v38);
      v32 = &unk_2516E33E8;
      if (v38[0])
      {
        v38[1] = v38[0];
        operator delete(v38[0]);
      }
      LODWORD(v38[0]) = 0;
      if (**((_QWORD **)v13 + 7))
      {
        do
        {
          v15 = v33;
          v16 = ik::ArrayView<float,-1>::IndexOf<int>((uint64_t)&v32, (int *)v38);
          v17 = SLODWORD(v38[0]);
          v18 = *(float *)(v15 + 4 * v16) < *(float *)(*(_QWORD *)(*a1 + 48) + 4 * SLODWORD(v38[0]));
          if (*(_BYTE *)a5)
            v19 = *(float *)(v15 + 4 * v16) < *(float *)(*(_QWORD *)(*a1 + 48) + 4 * SLODWORD(v38[0]));
          else
            v19 = 0;
          *(_BYTE *)a5 = v19;
          v20 = *(_QWORD *)(a5 + 32);
          v21 = (v17 >> 3) & 0x1FFFFFFFFFFFFFF8;
          v22 = *(_QWORD *)(v20 + v21);
          if ((v22 & (1 << v17)) != 0 && v18)
            v23 = v22 | (1 << v17);
          else
            v23 = v22 & ~(1 << v17);
          *(_QWORD *)(v20 + v21) = v23;
          v24 = *(_QWORD *)(a5 + 56);
          v25 = v33;
          v26 = ik::ArrayView<float,-1>::IndexOf<int>((uint64_t)&v32, (int *)v38);
          v27 = *(float *)(v24 + 4 * v17);
          if (v27 < *(float *)(v25 + 4 * v26))
            v27 = *(float *)(v25 + 4 * v26);
          v28 = SLODWORD(v38[0]);
          *(float *)(*(_QWORD *)(a5 + 56) + 4 * SLODWORD(v38[0])) = v27;
          LODWORD(v38[0]) = ++v28;
        }
        while (**((_QWORD **)v13 + 7) > v28);
      }
      begin = v37.__begin_;
      end = v37.__end_;
      v32 = &unk_2516E3548;
      if (__p)
      {
        v35 = __p;
        operator delete(__p);
      }
      std::__hash_table<std::__hash_value_type<std::string,ik::E5BufferTensor>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ik::E5BufferTensor>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ik::E5BufferTensor>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ik::E5BufferTensor>>>::~__hash_table((uint64_t)v36);
      if (begin == end)
        break;
      ++v11;
      v10 = *a1;
    }
    while (v11 < *(_DWORD *)(*a1 + 192));
  }
  if (v37.__begin_)
  {
    v37.__end_ = v37.__begin_;
    operator delete(v37.__begin_);
  }
}

void sub_245C32398(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  void **v23;

  if (*v23)
    operator delete(*v23);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a11);
  if (__p)
  {
    a23 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t scml::TextModerationLM::isKnownSupportedDevice(scml::TextModerationLM *this)
{
  return MGGetBoolAnswer();
}

uint64_t ik::Tensor::Data<int>(uint64_t a1)
{
  std::runtime_error *exception;

  if (*(_DWORD *)(a1 + 8) != 2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Incorrect data type requested.");
    __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 24))(*(_QWORD *)(a1 + 40));
}

void sub_245C325B0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *ik::ArrayView<int,-1>::ArrayView(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD **v4;
  _QWORD *v5;
  _QWORD *v6;
  BOOL v7;
  std::runtime_error *exception;

  *a1 = &unk_2516E3568;
  a1[1] = a2;
  a1[2] = 0;
  v4 = (_QWORD **)(a1 + 2);
  a1[3] = 0;
  a1[4] = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(a1 + 2, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3);
  v5 = (_QWORD *)a1[3];
  v6 = *v4;
  v7 = v5 == *v4;
  a1[5] = v5 - *v4;
  if (!v7)
  {
    do
    {
      if ((*v6 & 3) != 0)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Inconsistent stride encountered.");
        __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
      }
      *v6++ >>= 2;
    }
    while (v6 != v5);
  }
  return a1;
}

void sub_245C32684(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 24) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void ik::MutableArrayView<int,-1>::~MutableArrayView(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_2516E3568;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x249544F58);
}

_QWORD *ik::ArrayView<int,-1>::~ArrayView(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_2516E3568;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void ik::ArrayView<int,-1>::~ArrayView(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_2516E3568;
  v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x249544F58);
}

void std::vector<int>::__append(std::vector<int> *this, std::vector<int>::size_type __n)
{
  std::__compressed_pair<int *> *p_end_cap;
  int *v5;
  int *value;
  int *end;
  std::vector<int>::pointer begin;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  int *v16;
  int *v17;
  int v18;

  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  v5 = value;
  end = p_end_cap[-1].__value_;
  if (__n <= value - end)
  {
    if (__n)
    {
      bzero(p_end_cap[-1].__value_, 4 * __n);
      end += __n;
    }
    this->__end_ = end;
  }
  else
  {
    begin = this->__begin_;
    v9 = (char *)end - (char *)this->__begin_;
    v10 = __n + (v9 >> 2);
    if (v10 >> 62)
      std::vector<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>>::__throw_length_error[abi:ne180100]();
    v11 = v9 >> 2;
    v12 = (char *)v5 - (char *)begin;
    if (v12 >> 1 > v10)
      v10 = v12 >> 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL)
      v13 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    if (v13)
    {
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)p_end_cap, v13);
      begin = this->__begin_;
      end = this->__end_;
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[4 * v11];
    v16 = (int *)&v14[4 * v13];
    bzero(v15, 4 * __n);
    v17 = (int *)&v15[4 * __n];
    while (end != begin)
    {
      v18 = *--end;
      *((_DWORD *)v15 - 1) = v18;
      v15 -= 4;
    }
    this->__begin_ = (std::vector<int>::pointer)v15;
    this->__end_ = v17;
    this->__end_cap_.__value_ = v16;
    if (begin)
      operator delete(begin);
  }
}

void std::default_delete<scml::TextModerationTokenizer>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void **v4;

  if (a2)
  {
    v3 = *(_QWORD *)(a2 + 136);
    *(_QWORD *)(a2 + 136) = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    if (*(char *)(a2 + 135) < 0)
      operator delete(*(void **)(a2 + 112));
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a2 + 72);
    v4 = (void **)(a2 + 48);
    std::vector<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>>::__destroy_vector::operator()[abi:ne180100](&v4);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a2 + 8);
    MEMORY[0x249544F58](a2, 0x10B2C40C127E62CLL);
  }
}

uint64_t scml::Config::as<int>(_DWORD *a1)
{
  void *exception;

  if (a1[10] != 1)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    scml::Config::error((uint64_t)a1, (uint64_t)"not an integer", 14, (uint64_t)exception);
    goto LABEL_6;
  }
  if (*(_QWORD *)a1 != (int)*(_QWORD *)a1)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    scml::Config::error((uint64_t)a1, (uint64_t)"integer overflow", 16, (uint64_t)exception);
LABEL_6:
    __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  return *(_QWORD *)a1;
}

void sub_245C329C0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t ik::ArrayView<int,-1>::IndexOf<int,unsigned long>(uint64_t a1, int *a2, _QWORD *a3)
{
  std::runtime_error *exception;

  if (*(_QWORD *)(a1 + 40) != 2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Invalid number of indices provided.");
    __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  return **(_QWORD **)(a1 + 16) * *a2 + *a3 * *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
}

void sub_245C32A44(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

scml::TextModerationLM::Impl *std::unique_ptr<scml::TextModerationLM::Impl>::reset[abi:ne180100](scml::TextModerationLM::Impl **a1, scml::TextModerationLM::Impl *a2)
{
  scml::TextModerationLM::Impl *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    scml::TextModerationLM::Impl::~Impl(result);
    JUMPOUT(0x249544F58);
  }
  return result;
}

void scml::TextModerationLM::Impl::~Impl(scml::TextModerationLM::Impl *this)
{
  uint64_t v2;
  void *v3;
  void **v4;

  std::__hash_table<std::__hash_value_type<std::string,ik::E5BufferTensor>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,ik::E5BufferTensor>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,ik::E5BufferTensor>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,ik::E5BufferTensor>>>::~__hash_table((uint64_t)this + 216);
  std::unique_ptr<ik::E5Op>::reset[abi:ne180100]((ik::core::E5OpImpl ***)this + 26, 0);
  v2 = *((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = 0;
  if (v2)
    std::default_delete<scml::TextModerationTokenizer>::operator()[abi:ne180100]((uint64_t)this + 200, v2);
  if (*((char *)this + 191) < 0)
    operator delete(*((void **)this + 21));
  if (*((char *)this + 167) < 0)
    operator delete(*((void **)this + 18));
  if (*((char *)this + 143) < 0)
    operator delete(*((void **)this + 15));
  if (*((char *)this + 119) < 0)
    operator delete(*((void **)this + 12));
  if (*((char *)this + 95) < 0)
    operator delete(*((void **)this + 9));
  v3 = (void *)*((_QWORD *)this + 6);
  if (v3)
  {
    *((_QWORD *)this + 7) = v3;
    operator delete(v3);
  }
  v4 = (void **)((char *)this + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  if (*((char *)this + 23) < 0)
    operator delete(*(void **)this);
}

uint64_t ik::ArrayView<float,-1>::IndexOf<int>(uint64_t a1, int *a2)
{
  std::runtime_error *exception;

  if (*(_QWORD *)(a1 + 40) != 1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Invalid number of indices provided.");
    __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  return **(_QWORD **)(a1 + 16) * *a2;
}

void sub_245C32BC8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

id sub_245C32BDC()
{
  id v0;
  id result;

  v0 = objc_allocWithZone(MEMORY[0x24BDD1798]);
  result = sub_245C335AC(25180, 0xE200000000000000, 0);
  qword_257515E38 = (uint64_t)result;
  return result;
}

unint64_t sub_245C32C54(unint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  id v8;
  uint64_t v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v14;
  unint64_t v15;

  v1 = a1;
  if ((a1 & 0x8000000000000000) != 0 || (a1 & 0x4000000000000000) != 0)
    goto LABEL_39;
  v2 = a1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain();
  v15 = v1 & 0xFFFFFFFFFFFFFF8;
LABEL_4:
  if ((v2 & 0x4000000000000000) == 0)
  {
    v3 = *(_QWORD *)(v2 + 16);
    swift_bridgeObjectRelease();
    v4 = (unint64_t)v3 >> 1;
    goto LABEL_6;
  }
  while (1)
  {
    swift_retain();
    v3 = sub_245C8F034();
    swift_bridgeObjectRelease();
    swift_release();
    v14 = v3 >= 0 ? v3 : v3 + 1;
    if (v3 < -1)
      __break(1u);
    v4 = v14 >> 1;
LABEL_6:
    if ((unint64_t)(v3 + 1) < 3)
      return v2;
    v5 = 0;
    while (1)
    {
      v6 = v5 + 1;
      v1 = v3 - (v5 + 1);
      if (__OFSUB__(v3, v5 + 1))
        break;
      if (v5 != v1)
      {
        if ((v15 & 0xC000000000000001) != 0)
        {
          v9 = MEMORY[0x249544508](v5, v15);
          v10 = (id)MEMORY[0x249544508](v3 - (v5 + 1), v15);
        }
        else
        {
          if ((v5 & 0x8000000000000000) != 0)
            goto LABEL_33;
          v7 = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10);
          if (v5 >= v7)
            goto LABEL_34;
          v8 = *(id *)(v15 + 8 * v5 + 32);
          if ((v1 & 0x8000000000000000) != 0)
            goto LABEL_35;
          if (v1 >= v7)
            goto LABEL_37;
          v9 = (uint64_t)v8;
          v10 = *(id *)(v15 + 32 + 8 * v1);
        }
        v11 = v10;
        if (!swift_isUniquelyReferenced_nonNull_bridgeObject()
          || (v15 & 0x8000000000000000) != 0
          || (v15 & 0x4000000000000000) != 0)
        {
          sub_245C33684(v15);
        }
        v12 = (v15 & 0xFFFFFFFFFFFFFF8) + 8 * v5;

        *(_QWORD *)(v12 + 32) = v11;
        sub_245C8EE00();
        if (!swift_isUniquelyReferenced_nonNull_bridgeObject()
          || (v15 & 0x8000000000000000) != 0
          || (v15 & 0x4000000000000000) != 0)
        {
          sub_245C33684(v15);
        }
        if ((v1 & 0x8000000000000000) != 0)
          goto LABEL_36;
        if (v1 >= *(_QWORD *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_38;

        *(_QWORD *)((v15 & 0xFFFFFFFFFFFFFF8) + 8 * v1 + 0x20) = v9;
        sub_245C8EE00();
      }
      v5 = v6;
      if (v4 == v6)
        return v15;
    }
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
LABEL_37:
    __break(1u);
LABEL_38:
    __break(1u);
LABEL_39:
    v2 = (uint64_t)sub_245C339B0(v1);
    v15 = v2;
    if ((v2 & 0x8000000000000000) == 0)
      goto LABEL_4;
  }
}

uint64_t static TextSplitter.firstWordBoundary(text:after:maxDistance:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v7;
  char v8;
  unint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  id v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v7 = sub_245C8EED8();
  if ((v8 & 1) != 0)
    v9 = a2;
  else
    v9 = v7;
  if (v9 >> 14 < a5 >> 14)
    goto LABEL_18;
  sub_245C8EEFC();
  MEMORY[0x2495442B0]();
  if (qword_257515E30 != -1)
    goto LABEL_19;
  while (1)
  {
    v10 = (void *)qword_257515E38;
    v11 = (void *)sub_245C8ED04();
    swift_bridgeObjectRetain();
    v12 = sub_245C8EEF0();
    swift_bridgeObjectRelease();
    v13 = objc_msgSend(v10, sel_matchesInString_options_range_, v11, 0, 0, v12);

    sub_245C33974();
    v14 = sub_245C8EDF4();

    if (v14 >> 62)
      break;
    v15 = *(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v15)
      goto LABEL_21;
LABEL_8:
    v16 = 4;
    while (1)
    {
      v17 = (v14 & 0xC000000000000001) != 0
          ? (id)MEMORY[0x249544508](v16 - 4, v14)
          : *(id *)(v14 + 8 * v16);
      v18 = v17;
      v19 = v16 - 3;
      if (__OFADD__(v16 - 4, 1))
        break;
      v20 = (uint64_t)objc_msgSend(v17, sel_range);
      if (v20 >= 1 && v20 < sub_245C8ED7C())
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        objc_msgSend(v18, sel_range);
        v21 = sub_245C8EEE4();
        swift_bridgeObjectRelease();

        return v21;
      }

      ++v16;
      if (v19 == v15)
        goto LABEL_21;
    }
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    swift_once();
  }
  swift_bridgeObjectRetain();
  v15 = sub_245C8F034();
  swift_bridgeObjectRelease();
  if (v15)
    goto LABEL_8;
LABEL_21:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t static TextSplitter.lastWordBoundary(text:before:maxDistance:)(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  return sub_245C33AA4(a1, a2, a3, a4, a5, a6);
}

uint64_t static TextSplitter.splitInHalf(_:overlap:maxWordBoundarySearch:)@<X0>(__objc2_ivar *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char v20;
  unint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  void *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t result;
  unint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;

  swift_bridgeObjectRetain();
  v14 = sub_245C8EEF0();
  swift_bridgeObjectRelease();
  if (__OFADD__(v14, a5))
    goto LABEL_20;
  v15 = sub_245C8EEE4();
  v16 = __OFADD__(a6, 1);
  v17 = a6 + 1;
  if (v16)
    goto LABEL_21;
  v18 = v15;
  v19 = sub_245C8EED8();
  if ((v20 & 1) != 0)
    v21 = a2;
  else
    v21 = v19;
  if (v21 >> 14 < v18 >> 14)
    goto LABEL_22;
  v47 = a7;
  v48 = v17;
  v49 = a5;
  v46 = v18;
  v53 = a4;
  sub_245C8EEFC();
  MEMORY[0x2495442B0]();
  if (qword_257515E30 != -1)
    goto LABEL_23;
  while (1)
  {
    v50 = (unint64_t)a1;
    v51 = a2;
    v52 = a3;
    v22 = (void *)qword_257515E38;
    v23 = (void *)sub_245C8ED04();
    swift_bridgeObjectRetain();
    v24 = sub_245C8EEF0();
    swift_bridgeObjectRelease();
    v25 = objc_msgSend(v22, sel_matchesInString_options_range_, v23, 0, 0, v24);

    sub_245C33974();
    a2 = sub_245C8EDF4();

    if (a2 >> 62)
      break;
    v26 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v26)
      goto LABEL_25;
LABEL_10:
    v27 = 4;
    a1 = &stru_2516EA000;
    while (1)
    {
      v28 = (a2 & 0xC000000000000001) != 0 ? (id)MEMORY[0x249544508](v27 - 4, a2) : *(id *)(a2 + 8 * v27);
      v29 = v28;
      a3 = v27 - 3;
      if (__OFADD__(v27 - 4, 1))
        break;
      v30 = (uint64_t)objc_msgSend(v28, sel_range);
      if (v30 >= 1 && v30 < sub_245C8ED7C())
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        objc_msgSend(v29, sel_range);
        v31 = sub_245C8EEE4();
        swift_bridgeObjectRelease();

        goto LABEL_26;
      }

      ++v27;
      if (a3 == v26)
        goto LABEL_25;
    }
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    swift_once();
  }
  swift_bridgeObjectRetain();
  v26 = sub_245C8F034();
  swift_bridgeObjectRelease();
  if (v26)
    goto LABEL_10;
LABEL_25:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v31 = v46;
LABEL_26:
  swift_bridgeObjectRetain();
  v32 = sub_245C8EEF0();
  result = swift_bridgeObjectRelease();
  if (__OFSUB__(v32, v49))
  {
    __break(1u);
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  v34 = sub_245C8EEE4();
  result = sub_245C33AA4(v50, v51, v52, v53, v34, v48);
  if ((v35 & 1) == 0)
    v34 = result;
  if (v31 >> 14 < v50 >> 14)
    goto LABEL_33;
  result = sub_245C8EEFC();
  if (v51 >> 14 >= v34 >> 14)
  {
    v39 = result;
    v40 = v36;
    v41 = v37;
    v42 = v38;
    result = sub_245C8EEFC();
    *v47 = v39;
    v47[1] = v40;
    v47[2] = v41;
    v47[3] = v42;
    v47[4] = result;
    v47[5] = v43;
    v47[6] = v44;
    v47[7] = v45;
    return result;
  }
LABEL_34:
  __break(1u);
  return result;
}

uint64_t TextSplitter.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t TextSplitter.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t sub_245C3359C()
{
  return swift_allocObject();
}

id sub_245C335AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  void *v5;
  id v6;
  id v7;
  id v8;
  id v10[2];

  v10[1] = *(id *)MEMORY[0x24BDAC8D0];
  v5 = (void *)sub_245C8ED04();
  swift_bridgeObjectRelease();
  v10[0] = 0;
  v6 = objc_msgSend(v3, sel_initWithPattern_options_error_, v5, a3, v10);

  if (v6)
  {
    v7 = v10[0];
  }
  else
  {
    v8 = v10[0];
    sub_245C8E908();

    swift_willThrow();
  }
  return v6;
}

void sub_245C33684(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    sub_245C8F034();
    swift_bridgeObjectRelease();
  }
  JUMPOUT(0x249544514);
}

uint64_t sub_245C336EC(uint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t i;
  void (*v10)(_QWORD *);
  id *v11;
  id v12;
  void (*v13[4])(id *);

  v5 = result;
  v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    v7 = sub_245C8F034();
    result = swift_bridgeObjectRelease();
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (v5)
  {
    if (v6)
    {
      swift_bridgeObjectRetain();
      v8 = sub_245C8F034();
      result = swift_bridgeObjectRelease();
      if (v8 <= a2)
      {
        if (v7 >= 1)
        {
          sub_245C33DC8();
          swift_bridgeObjectRetain();
          for (i = 0; i != v7; ++i)
          {
            __swift_instantiateConcreteTypeFromMangledName(&qword_257514D20);
            v10 = sub_245C33880(v13, i, a3);
            v12 = *v11;
            ((void (*)(void (**)(id *), _QWORD))v10)(v13, 0);
            *(_QWORD *)(v5 + 8 * i) = v12;
          }
          swift_bridgeObjectRelease();
          return a3;
        }
        goto LABEL_16;
      }
    }
    else
    {
      if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) <= a2)
      {
        sub_245C33974();
        swift_arrayInitWithCopy();
        return a3;
      }
      __break(1u);
    }
    __break(1u);
LABEL_16:
    __break(1u);
  }
  __break(1u);
  return result;
}

void (*sub_245C33880(void (**a1)(id *a1), unint64_t a2, uint64_t a3))(_QWORD *a1)
{
  void (*v6)(id *);

  v6 = (void (*)(id *))malloc(0x28uLL);
  *a1 = v6;
  *((_QWORD *)v6 + 4) = sub_245C33900(v6, a2, a3);
  return sub_245C338D4;
}

void sub_245C338D4(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD))(*a1 + 32))(*a1);
  free(v1);
}

void (*sub_245C33900(void (*result)(id *a1), unint64_t a2, uint64_t a3))(id *a1)
{
  void (*v3)(id *);
  id v4;

  v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    v4 = (id)MEMORY[0x249544508](a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(_QWORD *)v3 = v4;
    return sub_245C3396C;
  }
  __break(1u);
  return result;
}

void sub_245C3396C(id *a1)
{

}

unint64_t sub_245C33974()
{
  unint64_t result;

  result = qword_257514D10;
  if (!qword_257514D10)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_257514D10);
  }
  return result;
}

_QWORD *sub_245C339B0(unint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = a1;
  if (a1 >> 62)
    goto LABEL_10;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v2)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  while (1)
  {
    if (v2 <= 0)
    {
      v3 = (_QWORD *)MEMORY[0x24BEE4AF8];
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_257514D18);
      v3 = (_QWORD *)swift_allocObject();
      v4 = _swift_stdlib_malloc_size(v3);
      v5 = v4 - 32;
      if (v4 < 32)
        v5 = v4 - 25;
      v3[2] = v2;
      v3[3] = (2 * (v5 >> 3)) | 1;
    }
    swift_bridgeObjectRetain();
    sub_245C336EC((uint64_t)(v3 + 4), v2, v1);
    v1 = v6;
    swift_bridgeObjectRelease();
    if (v1 == v2)
      break;
    __break(1u);
LABEL_10:
    swift_bridgeObjectRetain();
    v2 = sub_245C8F034();
    swift_bridgeObjectRelease();
    if (!v2)
      return (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  return v3;
}

uint64_t sub_245C33AA4(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  unint64_t v8;
  char v9;
  void *v10;
  void *v11;
  uint64_t v12;
  id v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  if (__OFSUB__(0, a6))
    goto LABEL_18;
  v8 = sub_245C8EED8();
  if ((v9 & 1) != 0)
    v8 = a1;
  if (a5 >> 14 < v8 >> 14)
    goto LABEL_19;
  sub_245C8EEFC();
  MEMORY[0x2495442B0]();
  if (qword_257515E30 != -1)
    goto LABEL_20;
  while (1)
  {
    v10 = (void *)qword_257515E38;
    v11 = (void *)sub_245C8ED04();
    swift_bridgeObjectRetain();
    v12 = sub_245C8EEF0();
    swift_bridgeObjectRelease();
    v13 = objc_msgSend(v10, sel_matchesInString_options_range_, v11, 0, 0, v12);

    sub_245C33974();
    v14 = sub_245C8EDF4();

    v15 = sub_245C32C54(v14);
    if (v15 >> 62)
      break;
    v16 = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v16)
      goto LABEL_22;
LABEL_8:
    v17 = 4;
    while (1)
    {
      v18 = (v15 & 0xC000000000000001) != 0
          ? (id)MEMORY[0x249544508](v17 - 4, v15)
          : *(id *)(v15 + 8 * v17);
      v19 = v18;
      v20 = v17 - 3;
      if (__OFADD__(v17 - 4, 1))
        break;
      v21 = (uint64_t)objc_msgSend(v18, sel_range);
      if (v21 >= 1 && v21 < sub_245C8ED7C())
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        objc_msgSend(v19, sel_range);
        v22 = sub_245C8EEE4();
        swift_bridgeObjectRelease();

        return v22;
      }

      ++v17;
      if (v20 == v16)
        goto LABEL_22;
    }
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    swift_once();
  }
  v16 = sub_245C8F034();
  if (v16)
    goto LABEL_8;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t type metadata accessor for TextSplitter()
{
  return objc_opt_self();
}

uint64_t method lookup function for TextSplitter()
{
  return swift_lookUpClassMethod();
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x249545798]((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

unint64_t sub_245C33DC8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_257514D28;
  if (!qword_257514D28)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_257514D20);
    result = MEMORY[0x2495457B0](MEMORY[0x24BEE12E0], v1);
    atomic_store(result, (unint64_t *)&qword_257514D28);
  }
  return result;
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x2495457A4](255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t sub_245C33E58()
{
  uint64_t v0;
  uint64_t result;

  v0 = sub_245C39748((uint64_t)&unk_2516E1578);
  result = swift_arrayDestroy();
  qword_257515E48 = v0;
  return result;
}

uint64_t SCMLSafetyGuardrailResult.safe.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC26SensitiveContentAnalysisML25SCMLSafetyGuardrailResult_safe);
}

uint64_t SCMLSafetyGuardrailResult.labels.getter()
{
  return swift_bridgeObjectRetain();
}

id SCMLSafetyGuardrailResult.__allocating_init(result:)(uint64_t a1, uint64_t a2)
{
  objc_class *v2;
  id v5;

  v5 = objc_allocWithZone(v2);
  return SCMLSafetyGuardrailResult.init(result:)(a1, a2);
}

id SCMLSafetyGuardrailResult.init(result:)(uint64_t a1, uint64_t a2)
{
  void *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v21;
  id result;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  objc_class *v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  objc_super v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;

  v5 = sub_245C8E8F0();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8]();
  v8 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v47 = a1;
  *((_QWORD *)&v47 + 1) = a2;
  sub_245C343DC();
  v9 = v2;
  v10 = sub_245C8EF50();
  swift_bridgeObjectRelease();
  v11 = *(_QWORD *)(v10 + 16);
  if (v11 == 1)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v12 = sub_245C8EECC();
    v14 = v13;
    swift_bridgeObjectRelease();
    if (v12 == 1701208435 && v14 == 0xE400000000000000)
    {
      swift_bridgeObjectRelease();
      v16 = 1;
    }
    else
    {
      v16 = sub_245C8F118();
      swift_bridgeObjectRelease();
    }
    v9[OBJC_IVAR____TtC26SensitiveContentAnalysisML25SCMLSafetyGuardrailResult_safe] = v16 & 1;
    goto LABEL_32;
  }
  if (!v11)
  {
    swift_bridgeObjectRelease();
    v9[OBJC_IVAR____TtC26SensitiveContentAnalysisML25SCMLSafetyGuardrailResult_safe] = 0;
LABEL_32:
    v37 = MEMORY[0x24BEE4AF8];
LABEL_33:
    *(_QWORD *)&v9[OBJC_IVAR____TtC26SensitiveContentAnalysisML25SCMLSafetyGuardrailResult_labels] = v37;

    v41 = (objc_class *)type metadata accessor for SCMLSafetyGuardrailResult();
    v45.receiver = v9;
    v45.super_class = v41;
    return objc_msgSendSuper2(&v45, sel_init);
  }
  swift_bridgeObjectRetain();
  v17 = sub_245C8EECC();
  v19 = v18;
  swift_bridgeObjectRelease();
  if (v17 == 1701208435 && v19 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    goto LABEL_30;
  }
  v21 = sub_245C8F118();
  result = (id)swift_bridgeObjectRelease();
  if ((v21 & 1) != 0)
  {
LABEL_30:
    v9[OBJC_IVAR____TtC26SensitiveContentAnalysisML25SCMLSafetyGuardrailResult_safe] = 1;
    goto LABEL_31;
  }
  if (qword_257515E40 != -1)
    result = (id)swift_once();
  if (*(_QWORD *)(v10 + 16) < 2uLL)
  {
    __break(1u);
    goto LABEL_36;
  }
  v23 = qword_257515E48;
  swift_bridgeObjectRetain();
  v24 = sub_245C8EECC();
  v26 = v25;
  swift_bridgeObjectRelease();
  LOBYTE(v23) = sub_245C34420(v24, v26, v23);
  result = (id)swift_bridgeObjectRelease();
  v9[OBJC_IVAR____TtC26SensitiveContentAnalysisML25SCMLSafetyGuardrailResult_safe] = v23 & 1;
  if ((v23 & 1) != 0)
  {
LABEL_31:
    swift_bridgeObjectRelease();
    goto LABEL_32;
  }
  if (*(_QWORD *)(v10 + 16) >= 2uLL)
  {
    v44 = *(_OWORD *)(v10 + 64);
    v27 = *(_QWORD *)(v10 + 80);
    v28 = *(_QWORD *)(v10 + 88);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v47 = v44;
    v48 = v27;
    v49 = v28;
    *(_QWORD *)&v44 = sub_245C34554();
    v29 = sub_245C8EF50();
    swift_bridgeObjectRelease();
    v30 = *(_QWORD *)(v29 + 16);
    if (v30)
    {
      v43 = v6;
      v46 = MEMORY[0x24BEE4AF8];
      sub_245C386D4(0, v30, 0);
      v42 = v29;
      v31 = (uint64_t *)(v29 + 56);
      do
      {
        v32 = *(v31 - 1);
        v33 = *v31;
        v47 = *(_OWORD *)(v31 - 3);
        v48 = v32;
        v49 = v33;
        swift_bridgeObjectRetain();
        sub_245C8E8E4();
        v34 = sub_245C8EF20();
        v36 = v35;
        (*(void (**)(char *, uint64_t))(v43 + 8))(v8, v5);
        swift_bridgeObjectRelease();
        v37 = v46;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_245C386D4(0, *(_QWORD *)(v37 + 16) + 1, 1);
          v37 = v46;
        }
        v39 = *(_QWORD *)(v37 + 16);
        v38 = *(_QWORD *)(v37 + 24);
        if (v39 >= v38 >> 1)
        {
          sub_245C386D4(v38 > 1, v39 + 1, 1);
          v37 = v46;
        }
        *(_QWORD *)(v37 + 16) = v39 + 1;
        v40 = v37 + 16 * v39;
        *(_QWORD *)(v40 + 32) = v34;
        *(_QWORD *)(v40 + 40) = v36;
        v31 += 4;
        --v30;
      }
      while (v30);
      swift_bridgeObjectRelease();
      goto LABEL_33;
    }
    goto LABEL_31;
  }
LABEL_36:
  __break(1u);
  return result;
}

unint64_t sub_245C343DC()
{
  unint64_t result;

  result = qword_257514D40;
  if (!qword_257514D40)
  {
    result = MEMORY[0x2495457B0](MEMORY[0x24BEE0D50], MEMORY[0x24BEE0D00]);
    atomic_store(result, (unint64_t *)&qword_257514D40);
  }
  return result;
}

uint64_t sub_245C34420(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  BOOL v12;
  uint64_t result;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  BOOL v17;

  if (*(_QWORD *)(a3 + 16))
  {
    sub_245C8F16C();
    sub_245C8ECD4();
    v6 = sub_245C8F19C();
    v7 = -1 << *(_BYTE *)(a3 + 32);
    v8 = v6 & ~v7;
    v9 = a3 + 56;
    if (((*(_QWORD *)(a3 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0)
    {
      v10 = *(_QWORD *)(a3 + 48);
      v11 = (_QWORD *)(v10 + 16 * v8);
      v12 = *v11 == a1 && v11[1] == a2;
      if (v12 || (sub_245C8F118() & 1) != 0)
        return 1;
      v14 = ~v7;
      v15 = (v8 + 1) & v14;
      if (((*(_QWORD *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) != 0)
      {
        while (1)
        {
          v16 = (_QWORD *)(v10 + 16 * v15);
          v17 = *v16 == a1 && v16[1] == a2;
          if (v17 || (sub_245C8F118() & 1) != 0)
            break;
          result = 0;
          v15 = (v15 + 1) & v14;
          if (((*(_QWORD *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) == 0)
            return result;
        }
        return 1;
      }
    }
  }
  return 0;
}

unint64_t sub_245C34554()
{
  unint64_t result;

  result = qword_257514D48;
  if (!qword_257514D48)
  {
    result = MEMORY[0x2495457B0](MEMORY[0x24BEE1E38], MEMORY[0x24BEE1E08]);
    atomic_store(result, (unint64_t *)&qword_257514D48);
  }
  return result;
}

void SCMLSafetyGuardrailResult.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id SCMLSafetyGuardrailResult.__deallocating_deinit(uint64_t a1)
{
  return sub_245C37B80(a1, type metadata accessor for SCMLSafetyGuardrailResult);
}

uint64_t static SCMLSafetyGuardrail.maxNumberOfTokensForShortPrompt.getter()
{
  return 200;
}

uint64_t static SCMLSafetyGuardrail.maxOutputTokens.getter()
{
  return 30;
}

uint64_t SCMLSafetyGuardrail.bundleID.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC26SensitiveContentAnalysisML19SCMLSafetyGuardrail_bundleID);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SCMLSafetyGuardrail.__allocating_init(backend:onBehalfOf:modelManagerServicesUseCaseID:lowerCasePrompt:)(uint64_t a1, uint64_t a2, uint64_t a3, char *a4, int a5)
{
  objc_class *v5;
  id v11;

  v11 = objc_allocWithZone(v5);
  return SCMLSafetyGuardrail.init(backend:onBehalfOf:modelManagerServicesUseCaseID:lowerCasePrompt:)(a1, a2, a3, a4, a5);
}

uint64_t SCMLSafetyGuardrail.init(backend:onBehalfOf:modelManagerServicesUseCaseID:lowerCasePrompt:)(uint64_t a1, uint64_t a2, uint64_t a3, char *a4, int a5)
{
  char *v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  NSObject *v42;
  os_log_type_t v43;
  _BOOL4 v44;
  uint8_t *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  NSObject *v56;
  os_log_type_t v57;
  uint8_t *v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t result;
  uint64_t v69;
  objc_class *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  char *v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t *v79;
  char *v80;
  uint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  objc_super v89;
  uint64_t v90[3];
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;

  v74 = a5;
  v83 = a4;
  v78 = a3;
  v76 = a2;
  sub_245C8E9BC();
  ((void (*)(void))MEMORY[0x24BDAC7A8])();
  v75 = (char *)&v71 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v81 = sub_245C8EA34();
  v9 = *(_QWORD *)(v81 - 8);
  v10 = ((uint64_t (*)(void))MEMORY[0x24BDAC7A8])();
  v77 = (char *)&v71 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v80 = (char *)&v71 - v12;
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_257514D50);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v71 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_245C8E9D4();
  v17 = *(_QWORD *)(v16 - 8);
  v86 = v16;
  v87 = v17;
  MEMORY[0x24BDAC7A8](v16);
  v82 = (char *)&v71 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_245C8ECB0();
  v84 = *(_QWORD *)(v19 - 8);
  v85 = v19;
  MEMORY[0x24BDAC7A8](v19);
  v21 = (char *)&v71 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v5[OBJC_IVAR____TtC26SensitiveContentAnalysisML19SCMLSafetyGuardrail_chunkOverlap] = 30;
  v22 = &v5[OBJC_IVAR____TtC26SensitiveContentAnalysisML19SCMLSafetyGuardrail_logger];
  v23 = v5;
  v24 = a1;
  v25 = v23;
  v88 = v22;
  sub_245C8EBD8();
  if (v24 == 16)
  {
    v73 = 16;
    sub_245C8ECA4();
    (*(void (**)(char *, char *, uint64_t))(v84 + 32))(&v25[OBJC_IVAR____TtC26SensitiveContentAnalysisML19SCMLSafetyGuardrail_systemPrompt], v21, v85);
    sub_245C8E944();
    v33 = v91;
    v32 = v92;
    __swift_project_boxed_opaque_existential_1(v90, v91);
    v34 = MEMORY[0x249543ECC](v33, *(_QWORD *)(*(_QWORD *)(v32 + 8) + 8));
    v35 = (uint64_t *)&v25[OBJC_IVAR____TtC26SensitiveContentAnalysisML19SCMLSafetyGuardrail_bundleID];
    *v35 = v34;
    v35[1] = v36;
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v90);
    v31 = 0;
  }
  else
  {
    if (v24 != 4)
    {
      swift_bridgeObjectRelease();
      sub_245C38710();
      swift_allocError();
      *(_QWORD *)v40 = v24;
      *(_BYTE *)(v40 + 8) = 0;
      swift_willThrow();
LABEL_19:
      v66 = sub_245C8EBE4();
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v66 - 8) + 8))(v88, v66);

      type metadata accessor for SCMLSafetyGuardrail();
      swift_deallocPartialClassInstance();
      return (uint64_t)v15;
    }
    v73 = 4;
    sub_245C8ECA4();
    (*(void (**)(char *, char *, uint64_t))(v84 + 32))(&v25[OBJC_IVAR____TtC26SensitiveContentAnalysisML19SCMLSafetyGuardrail_systemPrompt], v21, v85);
    sub_245C8E938();
    v27 = v91;
    v26 = v92;
    __swift_project_boxed_opaque_existential_1(v90, v91);
    v28 = MEMORY[0x249543ECC](v27, *(_QWORD *)(*(_QWORD *)(v26 + 8) + 8));
    v29 = (uint64_t *)&v25[OBJC_IVAR____TtC26SensitiveContentAnalysisML19SCMLSafetyGuardrail_bundleID];
    *v29 = v28;
    v29[1] = v30;
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v90);
    v31 = 1;
  }
  v25[OBJC_IVAR____TtC26SensitiveContentAnalysisML19SCMLSafetyGuardrail_underscoreReplacement] = v31;
  v79 = (uint64_t *)&v25[OBJC_IVAR____TtC26SensitiveContentAnalysisML19SCMLSafetyGuardrail_bundleID];
  swift_bridgeObjectRetain();
  sub_245C8E9C8();
  v38 = v86;
  v37 = v87;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v87 + 48))(v15, 1, v86) == 1)
  {
    swift_bridgeObjectRelease();
    sub_245C3AB78((uint64_t)v15, &qword_257514D50);
    sub_245C38710();
    swift_allocError();
    *(_QWORD *)v39 = 0;
    *(_BYTE *)(v39 + 8) = 1;
    swift_willThrow();
LABEL_18:
    (*(void (**)(char *, uint64_t))(v84 + 8))(&v25[OBJC_IVAR____TtC26SensitiveContentAnalysisML19SCMLSafetyGuardrail_systemPrompt], v85);
    swift_bridgeObjectRelease();
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v37 + 32))(v82, v15, v38);
  v25[OBJC_IVAR____TtC26SensitiveContentAnalysisML19SCMLSafetyGuardrail_lowerCasePrompt] = v74 & 1;
  v41 = v25;
  v42 = sub_245C8EBCC();
  v43 = sub_245C8EE6C();
  v44 = os_log_type_enabled(v42, v43);
  v72 = v6;
  v71 = v9;
  if (v44)
  {
    v45 = (uint8_t *)swift_slowAlloc();
    v46 = swift_slowAlloc();
    v90[0] = v46;
    *(_DWORD *)v45 = 136315138;
    v47 = *v79;
    v48 = v79[1];
    swift_bridgeObjectRetain();
    v93 = sub_245C3801C(v47, v48, v90);
    sub_245C8EF08();

    v38 = v86;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_245BFA000, v42, v43, "Begin prewarm safety guardrail: %s", v45, 0xCu);
    swift_arrayDestroy();
    v49 = v46;
    v9 = v71;
    MEMORY[0x249545828](v49, -1, -1);
    MEMORY[0x249545828](v45, -1, -1);

  }
  else
  {

  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_257514D60);
  v50 = v87;
  v51 = (*(unsigned __int8 *)(v87 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v87 + 80);
  v52 = swift_allocObject();
  *(_OWORD *)(v52 + 16) = xmmword_245C93E30;
  (*(void (**)(unint64_t, char *, uint64_t))(v50 + 16))(v52 + v51, v82, v38);
  sub_245C8E9B0();
  v53 = v80;
  sub_245C8EA28();
  (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v77, v53, v81);
  sub_245C8E9A4();
  swift_allocObject();
  v54 = sub_245C8E98C();
  v55 = OBJC_IVAR____TtC26SensitiveContentAnalysisML19SCMLSafetyGuardrail_tokenGen;
  *(_QWORD *)&v41[OBJC_IVAR____TtC26SensitiveContentAnalysisML19SCMLSafetyGuardrail_tokenGen] = v54;
  swift_retain();
  sub_245C8E998();
  swift_release();
  v15 = v41;
  v56 = sub_245C8EBCC();
  v57 = sub_245C8EE6C();
  if (os_log_type_enabled(v56, v57))
  {
    v78 = v55;
    v58 = (uint8_t *)swift_slowAlloc();
    v59 = swift_slowAlloc();
    v90[0] = v59;
    v83 = v41;
    *(_DWORD *)v58 = 136315138;
    v60 = *v79;
    v61 = v79[1];
    swift_bridgeObjectRetain();
    v93 = sub_245C3801C(v60, v61, v90);
    sub_245C8EF08();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_245BFA000, v56, v57, "End prewarm safety guardrail: %s", v58, 0xCu);
    swift_arrayDestroy();
    v62 = v59;
    v9 = v71;
    MEMORY[0x249545828](v62, -1, -1);
    MEMORY[0x249545828](v58, -1, -1);

  }
  else
  {

  }
  v63 = v72;
  if (v73 == 16)
  {
    v64 = 0x7FFFFFFFFFFFFFFFLL;
    goto LABEL_21;
  }
  swift_retain();
  v65 = sub_245C8E974();
  if (v63)
  {
    swift_release();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v80, v81);
    (*(void (**)(char *, uint64_t))(v87 + 8))(v82, v86);
    swift_release();
    goto LABEL_18;
  }
  v67 = v65;
  result = swift_release();
  v64 = v67 - 200;
  if (!__OFSUB__(v67, 200))
  {
LABEL_21:
    v69 = v87;
    *(_QWORD *)&v15[OBJC_IVAR____TtC26SensitiveContentAnalysisML19SCMLSafetyGuardrail_maxChunkSize] = v64;

    v70 = (objc_class *)type metadata accessor for SCMLSafetyGuardrail();
    v89.receiver = v15;
    v89.super_class = v70;
    v15 = (char *)objc_msgSendSuper2(&v89, sel_init);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v80, v81);
    (*(void (**)(char *, uint64_t))(v69 + 8))(v82, v86);
    return (uint64_t)v15;
  }
  __break(1u);
  return result;
}

uint64_t sub_245C350C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v8;

  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v8;
  *v8 = v4;
  v8[1] = sub_245C35130;
  return sub_245C35178(a1, v3, a2, a3);
}

uint64_t sub_245C35130()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_245C35178(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4[37] = a3;
  v4[38] = a4;
  v4[35] = a1;
  v4[36] = a2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_257514E28);
  v4[39] = swift_task_alloc();
  v4[40] = __swift_instantiateConcreteTypeFromMangledName(&qword_257514E30);
  v4[41] = swift_task_alloc();
  v5 = sub_245C8EAA0();
  v4[42] = v5;
  v4[43] = *(_QWORD *)(v5 - 8);
  v4[44] = swift_task_alloc();
  v6 = sub_245C8EAAC();
  v4[45] = v6;
  v4[46] = *(_QWORD *)(v6 - 8);
  v4[47] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_257514E38);
  v4[48] = swift_task_alloc();
  v7 = sub_245C8EB78();
  v4[49] = v7;
  v4[50] = *(_QWORD *)(v7 - 8);
  v4[51] = swift_task_alloc();
  v4[52] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_257514E40);
  v4[53] = swift_task_alloc();
  v4[54] = swift_task_alloc();
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_257514E48);
  v4[55] = v8;
  v4[56] = *(_QWORD *)(v8 - 8);
  v4[57] = swift_task_alloc();
  v9 = sub_245C8EC08();
  v4[58] = v9;
  v4[59] = *(_QWORD *)(v9 - 8);
  v4[60] = swift_task_alloc();
  v4[61] = swift_task_alloc();
  v4[62] = swift_task_alloc();
  v4[63] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_245C3535C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  void (*v12)(uint64_t);
  void (*v13)(uint64_t, uint64_t);
  void (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  _QWORD *v16;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;

  v1 = *(_QWORD *)(v0 + 496);
  v2 = *(_QWORD *)(v0 + 464);
  v19 = *(_QWORD *)(v0 + 472);
  v3 = *(_QWORD *)(v0 + 448);
  v4 = *(_QWORD *)(v0 + 456);
  v5 = *(_QWORD *)(v0 + 432);
  v6 = *(_QWORD *)(v0 + 440);
  v7 = *(_QWORD *)(v0 + 424);
  v20 = *(_QWORD *)(v0 + 384);
  v8 = *(_QWORD *)(v0 + 304);
  v18 = *(_OWORD *)(v0 + 288);
  v9 = swift_task_alloc();
  *(_OWORD *)(v9 + 16) = v18;
  *(_QWORD *)(v9 + 32) = v8;
  sub_245C8EC14();
  swift_task_dealloc();
  v10 = sub_245C8E9E0();
  *(_QWORD *)(v0 + 512) = v10;
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  *(_QWORD *)(v0 + 520) = v11;
  v11(v5, 1, 1, v10);
  sub_245C3AC18(v5, v7, &qword_257514E40);
  sub_245C8EA10();
  sub_245C8EA04();
  sub_245C8E9EC();
  sub_245C8E9F8();
  sub_245C3AB78(v5, &qword_257514E40);
  *(_DWORD *)(v0 + 576) = *MEMORY[0x24BE3C3E0];
  v12 = *(void (**)(uint64_t))(v3 + 104);
  *(_QWORD *)(v0 + 528) = v12;
  v12(v4);
  *(_QWORD *)(v0 + 536) = sub_245C3AB38(&qword_257514E50, (uint64_t (*)(uint64_t))MEMORY[0x24BE7A8B0], MEMORY[0x24BE7A8A8]);
  sub_245C8EC74();
  v13 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  *(_QWORD *)(v0 + 544) = v13;
  v13(v4, v6);
  v14 = *(void (**)(uint64_t, uint64_t))(v19 + 8);
  *(_QWORD *)(v0 + 552) = v14;
  v14(v1, v2);
  v15 = sub_245C8EB6C();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v20, 1, 1, v15);
  sub_245C8EB60();
  v16 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 560) = v16;
  *v16 = v0;
  v16[1] = sub_245C355CC;
  return sub_245C8EA58();
}

uint64_t sub_245C355CC()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 568) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_245C35630()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t inited;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *boxed_opaque_existential_0Tm;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  void (*v48)(uint64_t, _QWORD, uint64_t);
  uint64_t v49;
  uint64_t v50;
  void (*v51)(uint64_t, uint64_t);
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void (*v59)(uint64_t, uint64_t);
  uint64_t v60;
  uint64_t v61;

  v1 = *(_QWORD *)(v0 + 312);
  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_257514E58);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(v1, 1, v2) == 1)
  {
    sub_245C3AB78(v1, &qword_257514E28);
  }
  else
  {
    v59 = *(void (**)(uint64_t, uint64_t))(v0 + 552);
    v51 = *(void (**)(uint64_t, uint64_t))(v0 + 544);
    v48 = *(void (**)(uint64_t, _QWORD, uint64_t))(v0 + 528);
    v47 = *(_DWORD *)(v0 + 576);
    v43 = *(_QWORD *)(v0 + 512);
    v44 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v0 + 520);
    v55 = *(_QWORD *)(v0 + 496);
    v56 = *(_QWORD *)(v0 + 504);
    v57 = *(_QWORD *)(v0 + 464);
    v58 = *(_QWORD *)(v0 + 472);
    v45 = *(_QWORD *)(v0 + 456);
    v46 = *(_QWORD *)(v0 + 440);
    v41 = *(_QWORD *)(v0 + 432);
    v42 = *(_QWORD *)(v0 + 424);
    v35 = *(_QWORD *)(v0 + 408);
    v36 = *(_QWORD *)(v0 + 400);
    v37 = *(_QWORD *)(v0 + 392);
    v38 = *(_QWORD *)(v0 + 416);
    v61 = *(_QWORD *)(v0 + 376);
    v54 = *(_QWORD *)(v0 + 368);
    v3 = *(_QWORD *)(v0 + 360);
    v34 = *(_QWORD *)(v0 + 352);
    v4 = *(_QWORD *)(v0 + 344);
    v53 = v4;
    v60 = *(_QWORD *)(v0 + 336);
    v6 = *(_QWORD *)(v0 + 320);
    v5 = *(_QWORD *)(v0 + 328);
    v7 = v1 + *(int *)(v2 + 48);
    v8 = v5 + *(int *)(v6 + 48);
    v39 = *(_QWORD *)(v0 + 296);
    v40 = *(_QWORD *)(v0 + 304);
    v49 = *(_QWORD *)(v0 + 288);
    v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v54 + 32);
    v9(v5, v1, v3);
    v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32);
    v10(v8, v7, v60);
    v11 = v5 + *(int *)(v6 + 48);
    v9(v61, v5, v3);
    v10(v34, v11, v60);
    sub_245C8EA94();
    (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v38, v37);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v36 + 32))(v38, v35, v37);
    __swift_instantiateConcreteTypeFromMangledName(&qword_257514E60);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_245C93E30;
    *(_QWORD *)(inited + 32) = 1954047348;
    *(_QWORD *)(inited + 40) = 0xE400000000000000;
    v13 = MEMORY[0x24BE7AD80];
    *(_QWORD *)(inited + 72) = MEMORY[0x24BEE0D00];
    *(_QWORD *)(inited + 80) = v13;
    *(_QWORD *)(inited + 48) = v39;
    *(_QWORD *)(inited + 56) = v40;
    swift_bridgeObjectRetain();
    sub_245C3630C(inited, &qword_257514E98, &qword_257514EA0, (uint64_t (*)(uint64_t *, unint64_t))sub_245C3ABF0);
    __swift_instantiateConcreteTypeFromMangledName(&qword_257514E68);
    v14 = swift_initStackObject();
    *(_OWORD *)(v14 + 16) = xmmword_245C93E30;
    *(_QWORD *)(v14 + 32) = 0xD000000000000080;
    *(_QWORD *)(v14 + 40) = 0x8000000245CA13B0;
    v44(v41, 1, 1, v43);
    sub_245C3AC18(v41, v42, &qword_257514E40);
    sub_245C8EA10();
    sub_245C8EA04();
    sub_245C8E9EC();
    sub_245C8E9F8();
    sub_245C3AB78(v41, &qword_257514E40);
    v48(v45, v47, v46);
    *(_QWORD *)(v14 + 72) = sub_245C8EA1C();
    __swift_allocate_boxed_opaque_existential_0Tm((uint64_t *)(v14 + 48));
    sub_245C8EA64();
    v51(v45, v46);
    sub_245C361BC(v14);
    __swift_instantiateConcreteTypeFromMangledName(&qword_257514E70);
    v15 = swift_initStackObject();
    *(_OWORD *)(v15 + 16) = xmmword_245C93E30;
    *(_QWORD *)(v15 + 32) = 0xD000000000000011;
    *(_QWORD *)(v15 + 40) = 0x8000000245CA1440;
    v16 = v49 + OBJC_IVAR____TtC26SensitiveContentAnalysisML19SCMLSafetyGuardrail_systemPrompt;
    v17 = sub_245C8ECB0();
    v18 = MEMORY[0x24BE7AD58];
    *(_QWORD *)(v15 + 72) = v17;
    *(_QWORD *)(v15 + 80) = v18;
    boxed_opaque_existential_0Tm = __swift_allocate_boxed_opaque_existential_0Tm((uint64_t *)(v15 + 48));
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(boxed_opaque_existential_0Tm, v16, v17);
    sub_245C3630C(v15, &qword_257514E78, &qword_257514E80, (uint64_t (*)(uint64_t *, unint64_t))sub_245C3ABF0);
    sub_245C8EA88();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v34, v60);
    (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v61, v3);
    v59(v56, v57);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v58 + 32))(v56, v55, v57);
  }
  v20 = *(_QWORD *)(v0 + 568);
  sub_245C8EC68();
  sub_245C8EC5C();
  if (v20)
  {
    v21 = *(void (**)(uint64_t, uint64_t))(v0 + 552);
    v22 = *(_QWORD *)(v0 + 504);
    v23 = *(_QWORD *)(v0 + 464);
    v24 = *(_QWORD *)(v0 + 416);
    v25 = *(_QWORD *)(v0 + 392);
    v26 = *(_QWORD *)(v0 + 400);
    v21(*(_QWORD *)(v0 + 480), v23);
    (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v24, v25);
    v21(v22, v23);
  }
  else
  {
    v27 = *(void (**)(uint64_t, uint64_t))(v0 + 552);
    v28 = *(_QWORD *)(v0 + 504);
    v29 = *(_QWORD *)(v0 + 488);
    v30 = *(_QWORD *)(v0 + 464);
    v52 = *(_QWORD *)(v0 + 416);
    v31 = *(_QWORD *)(v0 + 400);
    v50 = *(_QWORD *)(v0 + 392);
    v32 = *(_QWORD *)(v0 + 288);
    v27(*(_QWORD *)(v0 + 480), v30);
    *(_QWORD *)(v0 + 272) = *(_QWORD *)(v32 + OBJC_IVAR____TtC26SensitiveContentAnalysisML19SCMLSafetyGuardrail_tokenGen);
    sub_245C8E9A4();
    sub_245C8EC80();
    v27(v29, v30);
    (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v52, v50);
    v27(v28, v30);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_245C35D8C()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;

  v1 = *(void (**)(uint64_t, uint64_t))(v0 + 552);
  v2 = *(_QWORD *)(v0 + 504);
  v3 = *(_QWORD *)(v0 + 464);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 400) + 8))(*(_QWORD *)(v0 + 416), *(_QWORD *)(v0 + 392));
  v1(v2, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_245C35EA0@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  void (*v19)(unint64_t, char *, uint64_t);
  void (*v20)(char *, uint64_t);
  _QWORD v22[8];

  v22[0] = a2;
  v22[7] = a3;
  v4 = sub_245C8EC8C();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_245C8EC08();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)v22 - v13;
  sub_245C8ECB0();
  sub_245C8EC2C();
  v22[4] = a1;
  v22[5] = v22[0];
  sub_245C8EC98();
  sub_245C8EC2C();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  __swift_instantiateConcreteTypeFromMangledName(&qword_257514EA8);
  v15 = *(_QWORD *)(v9 + 72);
  v16 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v17 = swift_allocObject();
  *(_OWORD *)(v17 + 16) = xmmword_245C93E40;
  v18 = v17 + v16;
  v19 = *(void (**)(unint64_t, char *, uint64_t))(v9 + 16);
  v19(v18, v14, v8);
  v19(v18 + v15, v12, v8);
  MEMORY[0x249544184](v17);
  swift_bridgeObjectRelease();
  v20 = *(void (**)(char *, uint64_t))(v9 + 8);
  v20(v12, v8);
  return ((uint64_t (*)(char *, uint64_t))v20)(v14, v8);
}

uint64_t sub_245C36084(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD v13[5];

  v4 = sub_245C8EC50();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v13[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13[3] = MEMORY[0x24BEE0D00];
  v13[4] = MEMORY[0x24BE7AD80];
  v13[0] = a1;
  v13[1] = a2;
  swift_bridgeObjectRetain();
  v8 = MEMORY[0x24BE7AB78];
  sub_245C8EC44();
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v13);
  __swift_instantiateConcreteTypeFromMangledName(&qword_257514EB0);
  v9 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_245C93E30;
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 16))(v10 + v9, v7, v4);
  MEMORY[0x24954419C](v10, v4, v8);
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

unint64_t sub_245C361BC(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void);
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_257514E88);
  v2 = sub_245C8F058();
  v3 = (_QWORD *)v2;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  v5 = v2 + 64;
  v6 = a1 + 32;
  swift_retain();
  v7 = MEMORY[0x24BEE0B20];
  while (1)
  {
    sub_245C3AC18(v6, (uint64_t)&v16, &qword_257514E90);
    v8 = v16;
    v9 = v17;
    result = sub_245C38AA0(v16, v17, (void (*)(_BYTE *, uint64_t, uint64_t))v7, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_245C38B18);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v12 = (uint64_t *)(v3[6] + 16 * result);
    *v12 = v8;
    v12[1] = v9;
    result = (unint64_t)sub_245C3AC08(&v18, (_OWORD *)(v3[7] + 32 * result));
    v13 = v3[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v3[2] = v15;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_245C3630C(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t (*a4)(uint64_t *, unint64_t))
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t result;
  char v15;
  uint64_t *v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  if (!*(_QWORD *)(a1 + 16))
  {
    v8 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(a2);
  v7 = sub_245C8F058();
  v8 = (_QWORD *)v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v8;
  }
  v10 = v7 + 64;
  v11 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_245C3AC18(v11, (uint64_t)&v20, a3);
    v12 = v20;
    v13 = v21;
    result = sub_245C38AA0(v20, v21, (void (*)(_BYTE *, uint64_t, uint64_t))MEMORY[0x24BEE0B20], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_245C38B18);
    if ((v15 & 1) != 0)
      break;
    *(_QWORD *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v16 = (uint64_t *)(v8[6] + 16 * result);
    *v16 = v12;
    v16[1] = v13;
    result = a4(&v22, v8[7] + 40 * result);
    v17 = v8[2];
    v18 = __OFADD__(v17, 1);
    v19 = v17 + 1;
    if (v18)
      goto LABEL_11;
    v8[2] = v19;
    v11 += 56;
    if (!--v9)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_245C3645C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  v4 = sub_245C8EA40();
  v3[5] = v4;
  v3[6] = *(_QWORD *)(v4 - 8);
  v3[7] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_245C364C0()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  int64_t v7;
  _QWORD *v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = *(_QWORD *)(v0 + 32);
  v3 = *(_QWORD *)(v0 + 16);
  v4 = HIBYTE(v1) & 0xF;
  if ((v1 & 0x2000000000000000) == 0)
    v4 = *(_QWORD *)(v0 + 16);
  v5 = 7;
  if (((v1 >> 60) & ((v3 & 0x800000000000000) == 0)) != 0)
    v5 = 11;
  v6 = sub_245C39204(0xFuLL, v5 | (v4 << 16), v3, v1);
  v7 = *(_QWORD *)(v2 + OBJC_IVAR____TtC26SensitiveContentAnalysisML19SCMLSafetyGuardrail_maxChunkSize);
  *(_QWORD *)(v0 + 64) = v7;
  if (v7 >= v6)
  {
    v11 = *(_QWORD *)(v0 + 16);
    v10 = *(_QWORD *)(v0 + 24);
    __swift_instantiateConcreteTypeFromMangledName(&qword_257514E20);
    v12 = swift_allocObject();
    *(_OWORD *)(v12 + 16) = xmmword_245C93E30;
    *(_QWORD *)(v12 + 32) = v11;
    *(_QWORD *)(v12 + 40) = v10;
    swift_bridgeObjectRetain();
    swift_task_dealloc();
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v12);
  }
  else
  {
    *(_QWORD *)(v0 + 72) = *(_QWORD *)(*(_QWORD *)(v0 + 32)
                                     + OBJC_IVAR____TtC26SensitiveContentAnalysisML19SCMLSafetyGuardrail_tokenGen);
    swift_bridgeObjectRetain();
    swift_retain();
    sub_245C8EA4C();
    v8 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 80) = v8;
    *v8 = v0;
    v8[1] = sub_245C36610;
    return sub_245C8E980();
  }
}

uint64_t sub_245C36610(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD **)v2;
  *(_QWORD *)(*(_QWORD *)v2 + 88) = v1;
  swift_task_dealloc();
  v6 = v4[6];
  v5 = v4[7];
  v7 = v4[5];
  if (!v1)
    v4[12] = a1;
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  swift_release();
  return swift_task_switch();
}

uint64_t sub_245C366B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __objc2_ivar *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v20;
  uint64_t v21[4];
  __int128 v22;
  uint64_t v23;
  uint64_t v24;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 24);
  if (*(_QWORD *)(v0 + 64) >= *(_QWORD *)(v0 + 96))
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_257514E20);
    v20 = swift_allocObject();
    *(_OWORD *)(v20 + 16) = xmmword_245C93E30;
    *(_QWORD *)(v20 + 32) = v1;
    *(_QWORD *)(v20 + 40) = v2;
    swift_bridgeObjectRetain();
    swift_task_dealloc();
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v20);
  }
  else
  {
    type metadata accessor for TextSplitter();
    swift_bridgeObjectRetain();
    v3 = (__objc2_ivar *)sub_245C8EDD0();
    v5 = v4;
    v7 = v6;
    v9 = v8;
    swift_bridgeObjectRelease();
    static TextSplitter.splitInHalf(_:overlap:maxWordBoundarySearch:)(v3, v5, v7, v9, 30, 30, v21);
    v11 = v21[0];
    v10 = v21[1];
    v12 = v21[2];
    v13 = v21[3];
    *(_OWORD *)(v0 + 104) = v22;
    v14 = v24;
    *(_QWORD *)(v0 + 120) = v23;
    *(_QWORD *)(v0 + 128) = v14;
    swift_bridgeObjectRelease();
    v15 = MEMORY[0x2495442B0](v11, v10, v12, v13);
    v17 = v16;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 136) = v17;
    v18 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 144) = v18;
    *v18 = v0;
    v18[1] = sub_245C3686C;
    return sub_245C3645C(v15, v17);
  }
}

uint64_t sub_245C3686C(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v3 = *v2;
  *(_QWORD *)(v3 + 152) = a1;
  *(_QWORD *)(v3 + 160) = v1;
  swift_task_dealloc();
  if (!v1)
    swift_bridgeObjectRelease();
  return swift_task_switch();
}

uint64_t sub_245C368E0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = MEMORY[0x2495442B0](v0[13], v0[14], v0[15], v0[16]);
  v3 = v2;
  swift_bridgeObjectRelease();
  v0[21] = v3;
  v4 = (_QWORD *)swift_task_alloc();
  v0[22] = v4;
  *v4 = v0;
  v4[1] = sub_245C3695C;
  return sub_245C3645C(v1, v3);
}

uint64_t sub_245C3695C(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(*v2 + 184) = v1;
  swift_task_dealloc();
  if (!v1)
  {
    swift_bridgeObjectRelease();
    *(_QWORD *)(v4 + 192) = a1;
  }
  return swift_task_switch();
}

uint64_t sub_245C369D8()
{
  uint64_t v0;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 152);
  sub_245C38BF8(*(_QWORD *)(v0 + 192));
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v2);
}

uint64_t sub_245C36A28()
{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_245C36A5C()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_245C36AA0()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_245C36AE8()
{
  uint64_t result;
  unint64_t v1;

  v1 = sub_245C39AC0(MEMORY[0x24BEE4AF8]);
  result = sub_245C39D00(&v1, 95, 0xE100000000000000, 32, 0xE100000000000000);
  qword_257515E58 = v1;
  return result;
}

uint64_t sub_245C36B34(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3[21] = a2;
  v3[22] = v2;
  v3[20] = a1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_257514D88);
  v3[23] = v4;
  v3[24] = *(_QWORD *)(v4 - 8);
  v3[25] = swift_task_alloc();
  v5 = sub_245C8E8F0();
  v3[26] = v5;
  v3[27] = *(_QWORD *)(v5 - 8);
  v3[28] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_245C36BC4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t result;
  _QWORD *v20;
  int64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;

  v2 = v0[27];
  v1 = v0[28];
  v3 = v0[26];
  v42 = v0[22];
  v4 = v0[21];
  v0[7] = v0[20];
  v0[8] = v4;
  sub_245C8E8E4();
  sub_245C343DC();
  v5 = sub_245C8EF20();
  v7 = v6;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v0[9] = v5;
  v0[10] = v7;
  v0[5] = 0xD000000000000020;
  v0[6] = 0x8000000245CA0D80;
  v0[13] = 0;
  v0[14] = 0xE000000000000000;
  swift_bridgeObjectRetain();
  v8 = sub_245C8EF2C();
  v10 = v9;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v41 = v0;
  v0[15] = v8;
  v0[16] = v10;
  v11 = v0 + 15;
  v0[17] = 0xD00000000000003ELL;
  v0[18] = 0x8000000245CA0DB0;
  v0[11] = 0;
  v0[12] = 0xE000000000000000;
  swift_bridgeObjectRetain();
  v12 = sub_245C8EF2C();
  v14 = v13;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_arrayDestroy();
  if (*(_BYTE *)(v42 + OBJC_IVAR____TtC26SensitiveContentAnalysisML19SCMLSafetyGuardrail_underscoreReplacement) == 1)
  {
    swift_bridgeObjectRetain();
    v15 = sub_245C8ED7C();
    if (v15)
    {
      v16 = v15;
      v17 = sub_245C396D4(v15, 0);
      swift_bridgeObjectRetain();
      v18 = sub_245C3961C(&v43, v17 + 4, v16, v12, v14);
      result = swift_bridgeObjectRelease();
      if (v18 != (_QWORD *)v16)
      {
        __break(1u);
        return result;
      }
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      v17 = (_QWORD *)MEMORY[0x24BEE4AF8];
    }
    v20 = v11 + 4;
    v21 = v17[2];
    if (v21)
    {
      v40 = v11 + 4;
      v43 = MEMORY[0x24BEE4AF8];
      sub_245C387B4(0, v21, 0);
      v22 = v43;
      v23 = v17 + 5;
      do
      {
        v25 = *(v23 - 1);
        v24 = *v23;
        v26 = qword_257515E50;
        swift_bridgeObjectRetain();
        if (v26 != -1)
          swift_once();
        swift_beginAccess();
        v27 = qword_257515E58;
        if (*(_QWORD *)(qword_257515E58 + 16))
        {
          v28 = sub_245C38AA0(v25, v24, (void (*)(_BYTE *, uint64_t, uint64_t))MEMORY[0x24BEE06E0], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_245C38B18);
          v29 = v24;
          if ((v30 & 1) != 0)
          {
            v31 = (uint64_t *)(*(_QWORD *)(v27 + 56) + 16 * v28);
            v25 = *v31;
            v29 = v31[1];
          }
        }
        else
        {
          v29 = v24;
        }
        swift_bridgeObjectRetain();
        swift_endAccess();
        swift_bridgeObjectRelease();
        v43 = v22;
        v33 = *(_QWORD *)(v22 + 16);
        v32 = *(_QWORD *)(v22 + 24);
        if (v33 >= v32 >> 1)
        {
          sub_245C387B4(v32 > 1, v33 + 1, 1);
          v22 = v43;
        }
        *(_QWORD *)(v22 + 16) = v33 + 1;
        v34 = v22 + 16 * v33;
        *(_QWORD *)(v34 + 32) = v25;
        *(_QWORD *)(v34 + 40) = v29;
        v23 += 2;
        --v21;
      }
      while (v21);
      swift_release();
      v20 = v40;
    }
    else
    {
      swift_release();
      v22 = MEMORY[0x24BEE4AF8];
    }
    *v20 = v22;
    __swift_instantiateConcreteTypeFromMangledName(&qword_257514E00);
    sub_245C3AAD0();
    v12 = sub_245C8EDC4();
    v36 = v35;
    swift_bridgeObjectRelease();
    v14 = v36;
  }
  if (*(_BYTE *)(v41[22] + OBJC_IVAR____TtC26SensitiveContentAnalysisML19SCMLSafetyGuardrail_lowerCasePrompt) == 1)
  {
    v12 = sub_245C8ED40();
    v38 = v37;
    swift_bridgeObjectRelease();
    v14 = v38;
  }
  v41[29] = v14;
  v39 = (_QWORD *)swift_task_alloc();
  v41[30] = v39;
  *v39 = v41;
  v39[1] = sub_245C37034;
  return sub_245C3645C(v12, v14);
}

uint64_t sub_245C37034(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v3 = *v2;
  *(_QWORD *)(v3 + 248) = a1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (!v1)
    return swift_task_switch();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_245C370D0()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  int *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  id v8;
  id v9;
  int *v10;

  v1 = *(_QWORD **)(v0 + 248);
  v2 = v1[2];
  *(_QWORD *)(v0 + 256) = v2;
  if (v2)
  {
    v3 = *(int **)((*MEMORY[0x24BEE4EA0] & **(_QWORD **)(v0 + 176)) + 0xB0);
    *(_QWORD *)(v0 + 264) = v3;
    *(_QWORD *)(v0 + 272) = 0;
    v4 = v1[5];
    *(_QWORD *)(v0 + 280) = v4;
    v5 = v1[4];
    v10 = (int *)((char *)v3 + *v3);
    swift_bridgeObjectRetain();
    v6 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 288) = v6;
    *v6 = v0;
    v6[1] = sub_245C371E4;
    return ((uint64_t (*)(_QWORD, uint64_t, uint64_t))v10)(*(_QWORD *)(v0 + 200), v5, v4);
  }
  else
  {
    swift_bridgeObjectRelease();
    v8 = objc_allocWithZone((Class)type metadata accessor for SCMLSafetyGuardrailResult());
    v9 = SCMLSafetyGuardrailResult.init(result:)(1701208435, 0xE400000000000000);
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(id))(v0 + 8))(v9);
  }
}

uint64_t sub_245C371E4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  _QWORD *v4;

  v2 = *v1;
  *(_QWORD *)(v2 + 296) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 304) = v4;
  sub_245C3AB38(&qword_257514D98, (uint64_t (*)(uint64_t))MEMORY[0x24BEB8040], MEMORY[0x24BEB7FF8]);
  *v4 = v2;
  v4[1] = sub_245C372A8;
  return sub_245C8EAB8();
}

uint64_t sub_245C372A8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = *(_QWORD **)v3;
  *(_QWORD *)(*(_QWORD *)v3 + 312) = v2;
  swift_task_dealloc();
  if (v2)
  {
    (*(void (**)(_QWORD, _QWORD))(v6[24] + 8))(v6[25], v6[23]);
  }
  else
  {
    v8 = v6[24];
    v7 = v6[25];
    v9 = v6[23];
    v6[40] = a2;
    v6[41] = a1;
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
    swift_bridgeObjectRelease();
  }
  return swift_task_switch();
}

uint64_t sub_245C3734C()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_245C373A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  objc_class *v3;
  id v4;
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  int *v17;

  v2 = *(_QWORD *)(v0 + 320);
  v1 = *(_QWORD *)(v0 + 328);
  v3 = (objc_class *)type metadata accessor for SCMLSafetyGuardrailResult();
  v4 = objc_allocWithZone(v3);
  v5 = SCMLSafetyGuardrailResult.init(result:)(v1, v2);
  v6 = v5;
  if ((*((_BYTE *)v5 + OBJC_IVAR____TtC26SensitiveContentAnalysisML25SCMLSafetyGuardrailResult_safe) & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_5;
  }
  v7 = *(_QWORD *)(v0 + 272);
  v8 = *(_QWORD *)(v0 + 256);

  if (v7 + 1 == v8)
  {
    swift_bridgeObjectRelease();
    v9 = objc_allocWithZone(v3);
    v6 = SCMLSafetyGuardrailResult.init(result:)(1701208435, 0xE400000000000000);
LABEL_5:
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(id))(v0 + 8))(v6);
  }
  v11 = *(int **)(v0 + 264);
  v12 = *(_QWORD *)(v0 + 272) + 1;
  *(_QWORD *)(v0 + 272) = v12;
  v13 = *(_QWORD *)(v0 + 248) + 16 * v12;
  v14 = *(_QWORD *)(v13 + 40);
  *(_QWORD *)(v0 + 280) = v14;
  v15 = *(_QWORD *)(v13 + 32);
  v17 = (int *)((char *)v11 + *v11);
  swift_bridgeObjectRetain();
  v16 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 288) = v16;
  *v16 = v0;
  v16[1] = sub_245C371E4;
  return ((uint64_t (*)(_QWORD, uint64_t, uint64_t))v17)(*(_QWORD *)(v0 + 200), v15, v14);
}

uint64_t sub_245C374F8()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_245C3767C(int a1, void *aBlock, void *a3)
{
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  v5 = sub_245C8ED10();
  v7 = v6;
  v3[4] = v6;
  a3;
  v8 = (_QWORD *)swift_task_alloc();
  v3[5] = v8;
  *v8 = v3;
  v8[1] = sub_245C37708;
  return sub_245C36B34(v5, v7);
}

uint64_t sub_245C37708(void *a1)
{
  void *v1;
  uint64_t *v2;
  void *v3;
  void *v5;
  uint64_t v6;
  void (**v7)(_QWORD, _QWORD, _QWORD);
  void *v8;

  v3 = v1;
  v5 = *(void **)(*v2 + 16);
  v6 = *v2;
  swift_task_dealloc();

  swift_bridgeObjectRelease();
  v7 = *(void (***)(_QWORD, _QWORD, _QWORD))(v6 + 24);
  if (v3)
  {
    v8 = (void *)sub_245C8E8FC();

    ((void (**)(_QWORD, _QWORD, void *))v7)[2](v7, 0, v8);
    _Block_release(v7);
  }
  else
  {
    ((void (**)(_QWORD, void *, _QWORD))v7)[2](*(_QWORD *)(v6 + 24), a1, 0);
    _Block_release(v7);

  }
  return (*(uint64_t (**)(void))(v6 + 8))();
}

uint64_t sub_245C377D4()
{
  uint64_t result;
  unint64_t v1;

  v1 = sub_245C39AC0(MEMORY[0x24BEE4AF8]);
  sub_245C39D00(&v1, 43975, 0xA200000000000000, 113, 0xE100000000000000);
  result = sub_245C39D00(&v1, 0x1000000000000027, 0x8000000245CA12C0, 0x6F6D696865646361, 0xED00007876757472);
  qword_257515E68 = v1;
  return result;
}

uint64_t sub_245C37860()
{
  uint64_t result;
  unint64_t v1;

  v1 = sub_245C39AC0(MEMORY[0x24BEE4AF8]);
  sub_245C39D00(&v1, 0x1000000000000047, 0x8000000245CA1090, 0xD00000000000001CLL, 0x8000000245CA10E0);
  sub_245C39D00(&v1, 0x1000000000000086, 0x8000000245CA1100, 0xD000000000000024, 0x8000000245CA1190);
  sub_245C39D00(&v1, 0x1000000000000068, 0x8000000245CA11C0, 0xD00000000000001ALL, 0x8000000245CA1230);
  sub_245C39D00(&v1, 0x1000000000000068, 0x8000000245CA1250, 0xD00000000000001ALL, 0x8000000245CA1230);
  result = sub_245C39D00(&v1, 0x91E1AB91E1AD91E1, 0xAC000000AF91E1B2, 1684173168, 0xE400000000000000);
  qword_257515E78 = v1;
  return result;
}

uint64_t static SCMLSafetyGuardrail.normalizeText(_:locale:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_245C3A07C(a1, a2, a3);
}

id SCMLSafetyGuardrail.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void SCMLSafetyGuardrail.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id SCMLSafetyGuardrail.__deallocating_deinit()
{
  return sub_245C37B80(0, type metadata accessor for SCMLSafetyGuardrail);
}

id sub_245C37B80(uint64_t a1, uint64_t (*a2)(void))
{
  void *v2;
  objc_super v4;

  v4.receiver = v2;
  v4.super_class = (Class)a2();
  return objc_msgSendSuper2(&v4, sel_dealloc);
}

BOOL sub_245C37C3C(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

_QWORD *sub_245C37C50@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

void sub_245C37C60(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

uint64_t sub_245C37C6C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(void);

  v6 = (uint64_t (*)(void))((char *)a3 + *a3);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v4;
  *v4 = v3;
  v4[1] = sub_245C3ACE0;
  return v6();
}

uint64_t sub_245C37CC0(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t (*v7)(void);

  v7 = (uint64_t (*)(void))((char *)a4 + *a4);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v5;
  *v5 = v4;
  v5[1] = sub_245C3ACE0;
  return v7();
}

uint64_t sub_245C37D14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = sub_245C8EE48();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    sub_245C8EE3C();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(_QWORD *)(a3 + 16))
      goto LABEL_5;
    goto LABEL_3;
  }
  sub_245C3AB78(a1, &qword_257514DB0);
  if (*(_QWORD *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    sub_245C8EE30();
    swift_unknownObjectRelease();
  }
LABEL_5:
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = a2;
  *(_QWORD *)(v8 + 24) = a3;
  return swift_task_create();
}

uint64_t sub_245C37E60(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_245C37EC4;
  return v6(a1);
}

uint64_t sub_245C37EC4()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

_QWORD *sub_245C37F10(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_257514E20);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_245C39C10(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_245C3801C(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  uint64_t ObjectType;

  v6 = sub_245C380EC(v12, 0, 0, 1, a1, a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = swift_getObjectType();
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      sub_245C3ACA4((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = MEMORY[0x24BEE2520];
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      sub_245C3ACA4((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v12);
  return v7;
}

uint64_t sub_245C380EC(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (_QWORD *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            sub_245C8EF14();
            result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    result = sub_245C382A4(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0)
    goto LABEL_13;
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  v8 = sub_245C8EFD4();
  if (!v8)
  {
    sub_245C8F01C();
    __break(1u);
LABEL_17:
    result = sub_245C8F064();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return swift_unknownObjectRetain();
}

uint64_t sub_245C382A4(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = sub_245C38338(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_245C38588(0, *(_QWORD *)(v2 + 16) + 1, 1, (char *)v2);
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if (v4 >= v3 >> 1)
    v2 = sub_245C38588(v3 > 1, v4 + 1, 1, (char *)v2);
  *(_QWORD *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t sub_245C38338(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  char v6;
  uint64_t result;

  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_10;
  if ((a2 & 0x2000000000000000) != 0)
    v2 = HIBYTE(a2) & 0xF;
  else
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (v2)
  {
    while (1)
    {
      v3 = sub_245C384AC(v2, 0);
      if (v2 < 0)
        break;
      v4 = v3;
      v5 = sub_245C8EF98();
      if ((v6 & 1) != 0)
        goto LABEL_14;
      if (v5 == v2)
        return (uint64_t)v4;
      sub_245C8F01C();
      __break(1u);
LABEL_10:
      v2 = sub_245C8EDA0();
      if (!v2)
        return MEMORY[0x24BEE4AF8];
    }
    sub_245C8F064();
    __break(1u);
LABEL_14:
    result = sub_245C8F01C();
    __break(1u);
  }
  else
  {
    return MEMORY[0x24BEE4AF8];
  }
  return result;
}

_QWORD *sub_245C384AC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  size_t v5;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  __swift_instantiateConcreteTypeFromMangledName(&qword_257514EB8);
  v4 = (_QWORD *)swift_allocObject();
  v5 = _swift_stdlib_malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t sub_245C38510(unint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;

  v3 = a1;
  v4 = (unsigned __int16)a1 >> 14;
  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    v10 = sub_245C8EDB8();
    v11 = v10 + (v4 << 16);
    v12 = v10 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    v13 = v11 & 0xFFFFFFFFFFFF0000;
    if (!v4)
      v13 = v12;
    return v13 | 4;
  }
  else
  {
    v5 = MEMORY[0x249544310](15, a1 >> 16);
    v6 = v5 + (v4 << 16);
    v7 = v5 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    v8 = v6 & 0xFFFFFFFFFFFF0000;
    if (!v4)
      v8 = v7;
    return v8 | 8;
  }
}

uint64_t sub_245C38588(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_257514EB8);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v8])
      memmove(v12, v13, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_245C8F064();
  __break(1u);
  return result;
}

uint64_t sub_245C386D4(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_245C387D0(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t type metadata accessor for SCMLSafetyGuardrailResult()
{
  return objc_opt_self();
}

unint64_t sub_245C38710()
{
  unint64_t result;

  result = qword_257514D58;
  if (!qword_257514D58)
  {
    result = MEMORY[0x2495457B0](&unk_245C93E50, &type metadata for SCMLSafetyGuardrailError);
    atomic_store(result, (unint64_t *)&qword_257514D58);
  }
  return result;
}

uint64_t type metadata accessor for SCMLSafetyGuardrail()
{
  uint64_t result;

  result = qword_257515F30;
  if (!qword_257515F30)
    return swift_getSingletonMetadata();
  return result;
}

_QWORD *__swift_project_boxed_opaque_existential_1(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

uint64_t sub_245C387B4(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_245C38938(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_245C387D0(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_257514E20);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_245C8F064();
  __break(1u);
  return result;
}

uint64_t sub_245C38938(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_257514E18);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_245C8F064();
  __break(1u);
  return result;
}

uint64_t sub_245C38AA0(uint64_t a1, uint64_t a2, void (*a3)(_BYTE *, uint64_t, uint64_t), uint64_t (*a4)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v7;
  _BYTE v10[72];

  sub_245C8F16C();
  a3(v10, a1, a2);
  v7 = sub_245C8F19C();
  return a4(a1, a2, v7);
}

unint64_t sub_245C38B18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  BOOL v11;
  uint64_t v12;
  _QWORD *v13;
  BOOL v14;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (sub_245C8F118() & 1) == 0)
    {
      v12 = ~v5;
      do
      {
        v6 = (v6 + 1) & v12;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v13 = (_QWORD *)(v9 + 16 * v6);
        v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (sub_245C8F118() & 1) == 0);
    }
  }
  return v6;
}

uint64_t sub_245C38BF8(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  int64_t v15;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    v8 = *(_QWORD *)(a1 + 16);
    if (v8)
      goto LABEL_5;
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
  if (v4 <= v5)
    v15 = v4 + v2;
  else
    v15 = v4;
  v3 = sub_245C37F10(isUniquelyReferenced_nonNull_native, v15, 1, v3);
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
    goto LABEL_18;
LABEL_5:
  v9 = v3[2];
  if ((v3[3] >> 1) - v9 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v10 = (unint64_t)&v3[2 * v9 + 4];
  if (a1 + 32 < v10 + 16 * v8 && v10 < a1 + 32 + 16 * v8)
    goto LABEL_24;
  swift_arrayInitWithCopy();
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v12 = v3[2];
  v13 = __OFADD__(v12, v8);
  v14 = v12 + v8;
  if (!v13)
  {
    v3[2] = v14;
LABEL_19:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = sub_245C8F064();
  __break(1u);
  return result;
}

uint64_t sub_245C38D4C(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int64_t v37;
  _QWORD *v38;
  char v39;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_257514E10);
  v39 = a2;
  result = sub_245C8F04C();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 0;
    v38 = (_QWORD *)(v5 + 64);
    v9 = 1 << *(_BYTE *)(v5 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v37 = (unint64_t)(v9 + 63) >> 6;
    v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        v20 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v21 = v20 | (v8 << 6);
      }
      else
      {
        v22 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        result = v5 + 64;
        if (v22 >= v37)
          goto LABEL_33;
        v23 = v38[v22];
        ++v8;
        if (!v23)
        {
          v8 = v22 + 1;
          if (v22 + 1 >= v37)
            goto LABEL_33;
          v23 = v38[v8];
          if (!v23)
          {
            v24 = v22 + 2;
            if (v24 >= v37)
            {
LABEL_33:
              if ((v39 & 1) == 0)
              {
                result = swift_release();
                v3 = v2;
                goto LABEL_40;
              }
              v36 = 1 << *(_BYTE *)(v5 + 32);
              if (v36 >= 64)
                bzero(v38, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v38 = -1 << v36;
              v3 = v2;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v23 = v38[v24];
            if (!v23)
            {
              while (1)
              {
                v8 = v24 + 1;
                if (__OFADD__(v24, 1))
                  goto LABEL_42;
                if (v8 >= v37)
                  goto LABEL_33;
                v23 = v38[v8];
                ++v24;
                if (v23)
                  goto LABEL_30;
              }
            }
            v8 = v24;
          }
        }
LABEL_30:
        v11 = (v23 - 1) & v23;
        v21 = __clz(__rbit64(v23)) + (v8 << 6);
      }
      v29 = 16 * v21;
      v30 = (uint64_t *)(*(_QWORD *)(v5 + 48) + v29);
      v32 = *v30;
      v31 = v30[1];
      v33 = (uint64_t *)(*(_QWORD *)(v5 + 56) + v29);
      v34 = *v33;
      v35 = v33[1];
      if ((v39 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      sub_245C8F16C();
      sub_245C8ECD4();
      result = sub_245C8F19C();
      v13 = -1 << *(_BYTE *)(v7 + 32);
      v14 = result & ~v13;
      v15 = v14 >> 6;
      if (((-1 << v14) & ~*(_QWORD *)(v12 + 8 * (v14 >> 6))) != 0)
      {
        v16 = __clz(__rbit64((-1 << v14) & ~*(_QWORD *)(v12 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v13) >> 6;
        do
        {
          if (++v15 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v27 = v15 == v26;
          if (v15 == v26)
            v15 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v12 + 8 * v15);
        }
        while (v28 == -1);
        v16 = __clz(__rbit64(~v28)) + (v15 << 6);
      }
      *(_QWORD *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      v17 = 16 * v16;
      v18 = (_QWORD *)(*(_QWORD *)(v7 + 48) + v17);
      *v18 = v32;
      v18[1] = v31;
      v19 = (_QWORD *)(*(_QWORD *)(v7 + 56) + v17);
      *v19 = v34;
      v19[1] = v35;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_40:
  *v3 = v7;
  return result;
}

void *sub_245C3904C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_257514E10);
  v2 = *v0;
  v3 = sub_245C8F040();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v25 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v25 >= v13)
      goto LABEL_26;
    v26 = *(_QWORD *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      v9 = v25 + 1;
      if (v25 + 1 >= v13)
        goto LABEL_26;
      v26 = *(_QWORD *)(v6 + 8 * v9);
      if (!v26)
        break;
    }
LABEL_25:
    v12 = (v26 - 1) & v26;
    v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + v16);
    v19 = *v17;
    v18 = v17[1];
    v20 = (uint64_t *)(*(_QWORD *)(v2 + 56) + v16);
    v21 = *v20;
    v22 = v20[1];
    v23 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v23 = v19;
    v23[1] = v18;
    v24 = (_QWORD *)(*(_QWORD *)(v4 + 56) + v16);
    *v24 = v21;
    v24[1] = v22;
    swift_bridgeObjectRetain();
    result = (void *)swift_bridgeObjectRetain();
  }
  v27 = v25 + 2;
  if (v27 >= v13)
    goto LABEL_26;
  v26 = *(_QWORD *)(v6 + 8 * v27);
  if (v26)
  {
    v9 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v26 = *(_QWORD *)(v6 + 8 * v9);
    ++v27;
    if (v26)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

unint64_t sub_245C39204(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v7;
  unint64_t result;
  unint64_t v9;
  uint64_t i;
  uint64_t v11;
  unint64_t v12;
  int v13;
  int v14;
  unsigned int v15;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  uint64_t v23;

  v7 = sub_245C39514(a1, a3, a4);
  result = sub_245C39514(a2, a3, a4);
  v9 = result >> 14;
  if (v7 >> 14 < result >> 14)
  {
    for (i = 0; ; ++i)
    {
      v11 = i + 1;
      if (__OFADD__(i, 1))
        break;
      if ((a4 & 0x1000000000000000) != 0)
      {
        result = sub_245C8ED58();
        v7 = result;
      }
      else
      {
        v12 = v7 >> 16;
        if ((a4 & 0x2000000000000000) != 0)
        {
          v22 = a3;
          v23 = a4 & 0xFFFFFFFFFFFFFFLL;
          v13 = *((unsigned __int8 *)&v22 + v12);
        }
        else
        {
          result = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
          if ((a3 & 0x1000000000000000) == 0)
            result = sub_245C8EFD4();
          v13 = *(unsigned __int8 *)(result + v12);
        }
        v14 = (char)v13;
        v15 = __clz(v13 ^ 0xFF) - 24;
        if (v14 >= 0)
          LOBYTE(v15) = 1;
        v7 = ((v12 + v15) << 16) | 5;
      }
      if (v9 <= v7 >> 14)
        return v11;
    }
    __break(1u);
LABEL_36:
    __break(1u);
    return result;
  }
  if (v9 < v7 >> 14)
  {
    v11 = 0;
    while (!__OFSUB__(v11--, 1))
    {
      if ((a4 & 0x1000000000000000) != 0)
      {
        result = sub_245C8ED64();
        v7 = result;
      }
      else
      {
        if ((a4 & 0x2000000000000000) != 0)
        {
          v22 = a3;
          v23 = a4 & 0xFFFFFFFFFFFFFFLL;
          if ((*((_BYTE *)&v22 + (v7 >> 16) - 1) & 0xC0) == 0x80)
          {
            v20 = 0;
            do
              v21 = *((_BYTE *)&v22 + (v7 >> 16) + v20-- - 2) & 0xC0;
            while (v21 == 128);
            v19 = 1 - v20;
          }
          else
          {
            v19 = 1;
          }
        }
        else
        {
          result = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
          if ((a3 & 0x1000000000000000) == 0)
            result = sub_245C8EFD4();
          v17 = 0;
          do
            v18 = *(_BYTE *)(result + (v7 >> 16) - 1 + v17--) & 0xC0;
          while (v18 == 128);
          v19 = -v17;
        }
        v7 = (v7 - (v19 << 16)) & 0xFFFFFFFFFFFF0000 | 5;
      }
      if (v9 >= v7 >> 14)
        return v11;
    }
    goto LABEL_36;
  }
  return 0;
}

unint64_t sub_245C39414(unint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  _QWORD v13[4];

  if ((result & 0xC000) != 0 || result < 0x10000)
  {
    result &= 0xFFFFFFFFFFFF0000;
  }
  else
  {
    v5 = result >> 16;
    if ((a3 & 0x1000000000000000) == 0)
    {
      v13[2] = v3;
      v13[3] = v4;
      if ((a3 & 0x2000000000000000) != 0)
      {
        v13[0] = a2;
        v13[1] = a3 & 0xFFFFFFFFFFFFFFLL;
        if (v5 != (HIBYTE(a3) & 0xF) && (*((_BYTE *)v13 + v5) & 0xC0) == 0x80)
        {
          do
          {
            v10 = v5 - 1;
            v11 = *((_BYTE *)&v12 + v5-- + 7) & 0xC0;
          }
          while (v11 == 128);
          v5 = v10;
        }
        return v5 << 16;
      }
      if ((a2 & 0x1000000000000000) != 0)
      {
        v6 = (a3 & 0xFFFFFFFFFFFFFFFLL) + 32;
        if (v5 != (a2 & 0xFFFFFFFFFFFFLL))
        {
          do
LABEL_9:
            v7 = *(_BYTE *)(v6 + v5--) & 0xC0;
          while (v7 == 128);
          ++v5;
        }
      }
      else
      {
        v12 = result >> 16;
        v6 = sub_245C8EFD4();
        v5 = v12;
        if (v12 != v9)
          goto LABEL_9;
      }
      return v5 << 16;
    }
    v8 = HIBYTE(a3) & 0xF;
    if ((a3 & 0x2000000000000000) == 0)
      v8 = a2 & 0xFFFFFFFFFFFFLL;
    if (v5 != v8)
      return sub_245C8EF80();
  }
  return result;
}

unint64_t sub_245C39514(unint64_t result, unint64_t a2, unint64_t a3)
{
  uint64_t v5;
  unint64_t v6;

  v5 = (a2 >> 59) & 1;
  if ((a3 & 0x1000000000000000) == 0)
    LOBYTE(v5) = 1;
  if ((result & 1) == 0 || (result & 0xC) == 4 << v5)
    goto LABEL_9;
  v6 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0)
    v6 = a2 & 0xFFFFFFFFFFFFLL;
  if (v6 < result >> 16)
  {
    __break(1u);
LABEL_9:
    result = sub_245C395B0(result, a2, a3);
    if ((result & 1) == 0)
      return result & 0xC | sub_245C39414(result, a2, a3) & 0xFFFFFFFFFFFFFFF3 | 1;
  }
  return result;
}

unint64_t sub_245C395B0(unint64_t result, unint64_t a2, unint64_t a3)
{
  uint64_t v5;
  unint64_t v6;

  v5 = (a2 >> 59) & 1;
  if ((a3 & 0x1000000000000000) == 0)
    LOBYTE(v5) = 1;
  if ((result & 0xC) == 4 << v5)
    result = sub_245C38510(result, a2, a3);
  v6 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0)
    v6 = a2 & 0xFFFFFFFFFFFFLL;
  if (v6 < result >> 16)
    __break(1u);
  return result;
}

_QWORD *sub_245C3961C(_QWORD *result, uint64_t *a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;

  v5 = result;
  v6 = HIBYTE(a5) & 0xF;
  v12 = a4;
  v13 = a5;
  if ((a5 & 0x2000000000000000) == 0)
    v6 = a4 & 0xFFFFFFFFFFFFLL;
  v14 = v6;
  if (!a2)
  {
    v7 = 0;
LABEL_14:
    *v5 = a4;
    v5[1] = a5;
    v5[2] = 0;
    v5[3] = v6;
    return (_QWORD *)v7;
  }
  v7 = a3;
  if (!a3)
    goto LABEL_14;
  if ((a3 & 0x8000000000000000) == 0)
  {
    v8 = a2;
    v9 = 0;
    while (1)
    {
      v10 = sub_245C8ED94();
      if (!v11)
        break;
      ++v9;
      *v8 = v10;
      v8[1] = v11;
      v8 += 2;
      if (v7 == v9)
      {
        a4 = v12;
        a5 = v13;
        goto LABEL_13;
      }
    }
    a4 = v12;
    a5 = v13;
    v7 = v9;
LABEL_13:
    v6 = v14;
    goto LABEL_14;
  }
  __break(1u);
  return result;
}

_QWORD *sub_245C396D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  int64_t v5;
  uint64_t v6;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  __swift_instantiateConcreteTypeFromMangledName(&qword_257514E18);
  v4 = (_QWORD *)swift_allocObject();
  v5 = _swift_stdlib_malloc_size(v4);
  v6 = v5 - 32;
  if (v5 < 32)
    v6 = v5 - 17;
  v4[2] = a1;
  v4[3] = 2 * (v6 >> 4);
  return v4;
}

uint64_t sub_245C39748(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  BOOL v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_257514EC0);
    v3 = sub_245C8EF74();
    v4 = 0;
    v5 = v3 + 56;
    v25 = a1 + 32;
    while (1)
    {
      v6 = (uint64_t *)(v25 + 16 * v4);
      v8 = *v6;
      v7 = v6[1];
      sub_245C8F16C();
      swift_bridgeObjectRetain();
      sub_245C8ECD4();
      result = sub_245C8F19C();
      v10 = -1 << *(_BYTE *)(v3 + 32);
      v11 = result & ~v10;
      v12 = v11 >> 6;
      v13 = *(_QWORD *)(v5 + 8 * (v11 >> 6));
      v14 = 1 << v11;
      if (((1 << v11) & v13) != 0)
      {
        v15 = *(_QWORD *)(v3 + 48);
        v16 = (_QWORD *)(v15 + 16 * v11);
        v17 = *v16 == v8 && v16[1] == v7;
        if (v17 || (result = sub_245C8F118(), (result & 1) != 0))
        {
LABEL_3:
          swift_bridgeObjectRelease();
          goto LABEL_4;
        }
        v18 = ~v10;
        while (1)
        {
          v11 = (v11 + 1) & v18;
          v12 = v11 >> 6;
          v13 = *(_QWORD *)(v5 + 8 * (v11 >> 6));
          v14 = 1 << v11;
          if ((v13 & (1 << v11)) == 0)
            break;
          v19 = (_QWORD *)(v15 + 16 * v11);
          if (*v19 != v8 || v19[1] != v7)
          {
            result = sub_245C8F118();
            if ((result & 1) == 0)
              continue;
          }
          goto LABEL_3;
        }
      }
      *(_QWORD *)(v5 + 8 * v12) = v14 | v13;
      v21 = (_QWORD *)(*(_QWORD *)(v3 + 48) + 16 * v11);
      *v21 = v8;
      v21[1] = v7;
      v22 = *(_QWORD *)(v3 + 16);
      v23 = __OFADD__(v22, 1);
      v24 = v22 + 1;
      if (v23)
      {
        __break(1u);
        return result;
      }
      *(_QWORD *)(v3 + 16) = v24;
LABEL_4:
      if (++v4 == v1)
        return v3;
    }
  }
  return MEMORY[0x24BEE4B08];
}

uint64_t _s26SensitiveContentAnalysisML19SCMLSafetyGuardrailC15trimEmojiPrefix4textS2S_tFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v4 = sub_245C8E8F0();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = a1;
  v21 = a2;
  sub_245C8E8E4();
  sub_245C343DC();
  v8 = sub_245C8EF20();
  v10 = v9;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  v20 = v8;
  v21 = v10;
  v18 = 0xD000000000000020;
  v19 = 0x8000000245CA0D80;
  v16 = 0;
  v17 = 0xE000000000000000;
  swift_bridgeObjectRetain();
  v11 = sub_245C8EF2C();
  v13 = v12;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v20 = v11;
  v21 = v13;
  v18 = 0xD00000000000003ELL;
  v19 = 0x8000000245CA0DB0;
  v16 = 0;
  v17 = 0xE000000000000000;
  swift_bridgeObjectRetain();
  v14 = sub_245C8EF2C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_arrayDestroy();
  return v14;
}

unint64_t sub_245C39AC0(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t *v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  char v19;

  v1 = a1[2];
  if (!v1)
    return MEMORY[0x24BEE4B00];
  __swift_instantiateConcreteTypeFromMangledName(&qword_257514E10);
  v3 = (_QWORD *)sub_245C8F058();
  v4 = a1[4];
  v5 = a1[5];
  v7 = a1[6];
  v6 = a1[7];
  result = sub_245C38AA0(v4, v5, (void (*)(_BYTE *, uint64_t, uint64_t))MEMORY[0x24BEE06E0], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_245C38B18);
  if ((v9 & 1) != 0)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return (unint64_t)v3;
  }
  v10 = a1 + 11;
  while (1)
  {
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v11 = (uint64_t *)(v3[6] + 16 * result);
    *v11 = v4;
    v11[1] = v5;
    v12 = (_QWORD *)(v3[7] + 16 * result);
    *v12 = v7;
    v12[1] = v6;
    v13 = v3[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      break;
    v3[2] = v15;
    if (!--v1)
      goto LABEL_8;
    v16 = v10 + 4;
    v4 = *(v10 - 3);
    v17 = *(v10 - 2);
    v7 = *(v10 - 1);
    v18 = *v10;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = sub_245C38AA0(v4, v17, (void (*)(_BYTE *, uint64_t, uint64_t))MEMORY[0x24BEE06E0], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_245C38B18);
    v10 = v16;
    v6 = v18;
    v5 = v17;
    if ((v19 & 1) != 0)
      goto LABEL_7;
  }
  __break(1u);
  return result;
}

uint64_t sub_245C39C10(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_245C8F064();
  __break(1u);
  return result;
}

uint64_t sub_245C39D00(_QWORD *a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v27;
  uint64_t v28;
  char v29;
  unint64_t v30;
  uint64_t v31;
  _BOOL8 v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  char v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t *v39;
  _QWORD *v40;
  uint64_t v41;
  BOOL v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t result;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;

  swift_bridgeObjectRetain();
  v10 = sub_245C8ED7C();
  if (v10)
  {
    v11 = v10;
    v12 = sub_245C396D4(v10, 0);
    swift_bridgeObjectRetain();
    v13 = sub_245C3961C(&v51, v12 + 4, v11, a2, a3);
    swift_bridgeObjectRelease();
    if (v13 != (_QWORD *)v11)
      goto LABEL_33;
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    v12 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  swift_bridgeObjectRetain();
  v14 = sub_245C8ED7C();
  if (v14)
  {
    v15 = v14;
    v16 = sub_245C396D4(v14, 0);
    swift_bridgeObjectRetain();
    v17 = sub_245C3961C(&v51, v16 + 4, v15, a4, a5);
    swift_bridgeObjectRelease();
    if (v17 != (_QWORD *)v15)
      goto LABEL_34;
    swift_bridgeObjectRelease();
    v18 = v12[2];
    if (!v18)
      goto LABEL_28;
  }
  else
  {
    swift_bridgeObjectRelease();
    v16 = (_QWORD *)MEMORY[0x24BEE4AF8];
    v18 = v12[2];
    if (!v18)
    {
LABEL_28:
      swift_release();
      return swift_release();
    }
  }
  v19 = v16[2];
  if (!v19)
    goto LABEL_28;
  v20 = v12[4];
  v21 = v12[5];
  swift_bridgeObjectRetain();
  v22 = 0;
  v23 = 0;
  v48 = v18 - 1;
  v49 = v16;
  v46 = v19 - 1;
  v47 = a1;
  v50 = v12;
  while (1)
  {
    v24 = v16[v23 + 4];
    v25 = v16[v23 + 5];
    swift_bridgeObjectRetain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v51 = (_QWORD *)*a1;
    v27 = v51;
    *a1 = 0x8000000000000000;
    v28 = v20;
    v30 = sub_245C38AA0(v20, v21, (void (*)(_BYTE *, uint64_t, uint64_t))MEMORY[0x24BEE06E0], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_245C38B18);
    v31 = v27[2];
    v32 = (v29 & 1) == 0;
    v33 = v31 + v32;
    if (__OFADD__(v31, v32))
      break;
    v34 = v29;
    if (v27[3] >= v33)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        v37 = v51;
        if ((v29 & 1) != 0)
          goto LABEL_19;
      }
      else
      {
        sub_245C3904C();
        v37 = v51;
        if ((v34 & 1) != 0)
          goto LABEL_19;
      }
    }
    else
    {
      sub_245C38D4C(v33, isUniquelyReferenced_nonNull_native);
      v35 = sub_245C38AA0(v28, v21, (void (*)(_BYTE *, uint64_t, uint64_t))MEMORY[0x24BEE06E0], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_245C38B18);
      if ((v34 & 1) != (v36 & 1))
        goto LABEL_35;
      v30 = v35;
      v37 = v51;
      if ((v34 & 1) != 0)
      {
LABEL_19:
        v38 = (_QWORD *)(v37[7] + 16 * v30);
        swift_bridgeObjectRelease();
        *v38 = v24;
        v38[1] = v25;
        goto LABEL_23;
      }
    }
    v37[(v30 >> 6) + 8] |= 1 << v30;
    v39 = (uint64_t *)(v37[6] + 16 * v30);
    *v39 = v28;
    v39[1] = v21;
    v40 = (_QWORD *)(v37[7] + 16 * v30);
    *v40 = v24;
    v40[1] = v25;
    v41 = v37[2];
    v42 = __OFADD__(v41, 1);
    v43 = v41 + 1;
    if (v42)
      goto LABEL_32;
    v37[2] = v43;
    swift_bridgeObjectRetain();
LABEL_23:
    a1 = v47;
    *v47 = v37;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v48 == v22)
      goto LABEL_28;
    v16 = v49;
    if (v22 + 1 >= v50[2])
      goto LABEL_31;
    if (v46 == v22)
      goto LABEL_28;
    v20 = v50[v23 + 6];
    v21 = v50[v23 + 7];
    v44 = v49[2];
    swift_bridgeObjectRetain();
    ++v22;
    v23 += 2;
    if (v22 >= v44)
    {
      __break(1u);
      goto LABEL_28;
    }
  }
  __break(1u);
LABEL_31:
  __break(1u);
LABEL_32:
  __break(1u);
LABEL_33:
  __break(1u);
LABEL_34:
  __break(1u);
LABEL_35:
  result = sub_245C8F124();
  __break(1u);
  return result;
}

uint64_t sub_245C3A07C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t result;
  int64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  int64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  _QWORD v59[2];
  _QWORD *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;

  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_257514DF8);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)v59 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64 = a1;
  v65 = a2;
  v10 = sub_245C343DC();
  v11 = sub_245C8EF38();
  v13 = v12;
  v14 = sub_245C8ED7C();
  if (v14)
  {
    v15 = v14;
    v16 = sub_245C396D4(v14, 0);
    swift_bridgeObjectRetain();
    v17 = sub_245C3961C(&v64, v16 + 4, v15, v11, v13);
    result = swift_bridgeObjectRelease();
    if (v17 != (_QWORD *)v15)
    {
      __break(1u);
      goto LABEL_36;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    v16 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v63 = v3;
  v19 = v16[2];
  if (v19)
  {
    v60 = (_QWORD *)v10;
    v61 = a3;
    v62 = (unint64_t)v9;
    v66 = MEMORY[0x24BEE4AF8];
    sub_245C387B4(0, v19, 0);
    v20 = v16;
    v21 = v66;
    v59[1] = v20;
    v22 = v20 + 5;
    do
    {
      v23 = *(v22 - 1);
      v24 = *v22;
      v25 = qword_257515E60;
      swift_bridgeObjectRetain();
      if (v25 != -1)
        swift_once();
      swift_beginAccess();
      v26 = qword_257515E68;
      if (*(_QWORD *)(qword_257515E68 + 16))
      {
        v27 = sub_245C38AA0(v23, v24, (void (*)(_BYTE *, uint64_t, uint64_t))MEMORY[0x24BEE06E0], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_245C38B18);
        v28 = v24;
        if ((v29 & 1) != 0)
        {
          v30 = (uint64_t *)(*(_QWORD *)(v26 + 56) + 16 * v27);
          v23 = *v30;
          v28 = v30[1];
        }
      }
      else
      {
        v28 = v24;
      }
      swift_bridgeObjectRetain();
      swift_endAccess();
      swift_bridgeObjectRelease();
      v66 = v21;
      v32 = *(_QWORD *)(v21 + 16);
      v31 = *(_QWORD *)(v21 + 24);
      if (v32 >= v31 >> 1)
      {
        sub_245C387B4(v31 > 1, v32 + 1, 1);
        v21 = v66;
      }
      v22 += 2;
      *(_QWORD *)(v21 + 16) = v32 + 1;
      v33 = v21 + 16 * v32;
      *(_QWORD *)(v33 + 32) = v23;
      *(_QWORD *)(v33 + 40) = v28;
      --v19;
    }
    while (v19);
    swift_release();
    a3 = v61;
    v9 = (char *)v62;
  }
  else
  {
    swift_release();
    v21 = MEMORY[0x24BEE4AF8];
  }
  v64 = v21;
  v34 = __swift_instantiateConcreteTypeFromMangledName(&qword_257514E00);
  v62 = sub_245C3AAD0();
  v64 = sub_245C8EDC4();
  v65 = v35;
  v36 = sub_245C8E92C();
  v37 = *(_QWORD *)(v36 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v37 + 16))(v9, a3, v36);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v37 + 56))(v9, 0, 1, v36);
  v38 = sub_245C8EF44();
  v40 = v39;
  sub_245C3AB78((uint64_t)v9, &qword_257514DF8);
  swift_bridgeObjectRelease();
  v41 = sub_245C8ED7C();
  if (!v41)
  {
    swift_bridgeObjectRelease();
    v43 = (_QWORD *)MEMORY[0x24BEE4AF8];
    v45 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
    if (v45)
    {
LABEL_21:
      v61 = v34;
      v66 = MEMORY[0x24BEE4AF8];
      sub_245C387B4(0, v45, 0);
      v46 = v66;
      v60 = v43;
      v47 = v43 + 5;
      do
      {
        v49 = *(v47 - 1);
        v48 = *v47;
        v50 = qword_257515E70;
        swift_bridgeObjectRetain();
        if (v50 != -1)
          swift_once();
        swift_beginAccess();
        v51 = qword_257515E78;
        if (*(_QWORD *)(qword_257515E78 + 16))
        {
          v52 = sub_245C38AA0(v49, v48, (void (*)(_BYTE *, uint64_t, uint64_t))MEMORY[0x24BEE06E0], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_245C38B18);
          v53 = v48;
          if ((v54 & 1) != 0)
          {
            v55 = (uint64_t *)(*(_QWORD *)(v51 + 56) + 16 * v52);
            v49 = *v55;
            v53 = v55[1];
          }
        }
        else
        {
          v53 = v48;
        }
        swift_bridgeObjectRetain();
        swift_endAccess();
        swift_bridgeObjectRelease();
        v66 = v46;
        v57 = *(_QWORD *)(v46 + 16);
        v56 = *(_QWORD *)(v46 + 24);
        if (v57 >= v56 >> 1)
        {
          sub_245C387B4(v56 > 1, v57 + 1, 1);
          v46 = v66;
        }
        v47 += 2;
        *(_QWORD *)(v46 + 16) = v57 + 1;
        v58 = v46 + 16 * v57;
        *(_QWORD *)(v58 + 32) = v49;
        *(_QWORD *)(v58 + 40) = v53;
        --v45;
      }
      while (v45);
      swift_release();
      goto LABEL_34;
    }
LABEL_33:
    swift_release();
    v46 = MEMORY[0x24BEE4AF8];
LABEL_34:
    v64 = v46;
    return sub_245C8EDC4();
  }
  v42 = v41;
  v43 = sub_245C396D4(v41, 0);
  swift_bridgeObjectRetain();
  v44 = sub_245C3961C(&v64, v43 + 4, v42, v38, v40);
  result = swift_bridgeObjectRelease();
  if (v44 == (_QWORD *)v42)
  {
    swift_bridgeObjectRelease();
    v45 = v43[2];
    if (v45)
      goto LABEL_21;
    goto LABEL_33;
  }
LABEL_36:
  __break(1u);
  return result;
}

uint64_t method lookup function for SCMLSafetyGuardrailResult()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SCMLSafetyGuardrailResult.__allocating_init(result:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t __swift_memcpy9_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for SCMLSafetyGuardrailError(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for SCMLSafetyGuardrailError(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = 0;
    *(_BYTE *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 1;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 9) = v3;
  return result;
}

uint64_t sub_245C3A610(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_245C3A630(uint64_t result, int a2)
{
  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    *(_BYTE *)(result + 8) = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for SCMLSafetyGuardrailError()
{
  return &type metadata for SCMLSafetyGuardrailError;
}

uint64_t sub_245C3A660()
{
  return type metadata accessor for SCMLSafetyGuardrail();
}

uint64_t sub_245C3A668()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = sub_245C8ECB0();
  if (v1 <= 0x3F)
  {
    result = sub_245C8EBE4();
    if (v2 <= 0x3F)
    {
      result = swift_updateClassMetadata2();
      if (!result)
        return 0;
    }
  }
  return result;
}

uint64_t method lookup function for SCMLSafetyGuardrail()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SCMLSafetyGuardrail.__allocating_init(backend:onBehalfOf:modelManagerServicesUseCaseID:lowerCasePrompt:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 168))();
}

uint64_t dispatch thunk of SCMLSafetyGuardrail.predict(text:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  int *v6;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t, uint64_t);

  v6 = *(int **)((*MEMORY[0x24BEE4EA0] & *v2) + 0xD0);
  v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)v6 + *v6);
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_245C3A7C8;
  return v9(a1, a2);
}

uint64_t sub_245C3A7C8(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v4;

  v4 = *v1;
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(a1);
}

void type metadata accessor for SCMLTextSanitizerBackends()
{
  unint64_t ForeignTypeMetadata;
  uint64_t v1;

  if (!qword_257514DA8)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v1)
      atomic_store(ForeignTypeMetadata, (unint64_t *)&qword_257514DA8);
  }
}

uint64_t sub_245C3A86C()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 24));
  return swift_deallocObject();
}

uint64_t sub_245C3A8A0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  _QWORD *v5;

  v2 = v0[2];
  v3 = (void *)v0[3];
  v4 = (void *)v0[4];
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_245C35130;
  return ((uint64_t (*)(int, void *, void *))((char *)&dword_257514DB8 + dword_257514DB8))(v2, v3, v4);
}

uint64_t sub_245C3A910()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  _QWORD *v5;

  v2 = v0[2];
  v3 = v0[3];
  v4 = (int *)v0[4];
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_245C3ACE0;
  return ((uint64_t (*)(uint64_t, uint64_t, int *))((char *)&dword_257514DC8 + dword_257514DC8))(v2, v3, v4);
}

uint64_t objectdestroy_10Tm()
{
  swift_unknownObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_245C3A9B8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = (int *)v1[4];
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_245C3ACE0;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_257514DD8 + dword_257514DD8))(a1, v4, v5, v6);
}

uint64_t sub_245C3AA3C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_245C3AA60(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_245C35130;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_257514DE8 + dword_257514DE8))(a1, v4);
}

unint64_t sub_245C3AAD0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_257514E08;
  if (!qword_257514E08)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_257514E00);
    result = MEMORY[0x2495457B0](MEMORY[0x24BEE12C8], v1);
    atomic_store(result, (unint64_t *)&qword_257514E08);
  }
  return result;
}

uint64_t sub_245C3AB1C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_245C35EA0(*(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), a1);
}

uint64_t sub_245C3AB38(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = MEMORY[0x2495457B0](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_245C3AB78(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t *__swift_allocate_boxed_opaque_existential_0Tm(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;

  v1 = a1;
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t sub_245C3ABF0(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

_OWORD *sub_245C3AC08(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_245C3AC18(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_245C3AC5C()
{
  uint64_t v0;

  return sub_245C36084(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t __swift_destroy_boxed_opaque_existential_1Tm(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 24) - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release();
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_245C3ACA4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t TextModerationLMRequest.hash(into:)()
{
  sub_245C8F178();
  return sub_245C8ECD4();
}

uint64_t static TextModerationLMRequest.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1])
    return 1;
  else
    return sub_245C8F118();
}

uint64_t static TextModerationLMClassifyTextRequest.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1])
    return 1;
  else
    return sub_245C8F118();
}

uint64_t sub_245C3AD88()
{
  return 1;
}

uint64_t sub_245C3AD9C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, BOOL *a3@<X8>)
{
  uint64_t result;

  result = sub_245C41014(a1, a2);
  *a3 = result != 0;
  return result;
}

uint64_t sub_245C3ADC8()
{
  return 0;
}

void sub_245C3ADD4(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_245C3ADE0()
{
  sub_245C3B8E4();
  return sub_245C8F1C0();
}

uint64_t sub_245C3AE08()
{
  sub_245C3B8E4();
  return sub_245C8F1CC();
}

uint64_t sub_245C3AE34@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, BOOL *a3@<X8>)
{
  uint64_t result;

  result = sub_245C41080(a1, a2);
  *a3 = result != 0;
  return result;
}

uint64_t sub_245C3AE60()
{
  sub_245C3B8A0();
  return sub_245C8F1C0();
}

uint64_t sub_245C3AE88()
{
  sub_245C3B8A0();
  return sub_245C8F1CC();
}

uint64_t TextModerationLMRequest.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_257514EC8);
  v14 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_257514ED0);
  v13 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v1;
  v12 = v1[1];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_245C3B8A0();
  sub_245C8F1B4();
  sub_245C3B8E4();
  sub_245C8F0C4();
  v15 = v9;
  v16 = v12;
  sub_245C3B928();
  sub_245C8F0F4();
  (*(void (**)(char *, uint64_t))(v14 + 8))(v5, v3);
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v8, v6);
}

uint64_t TextModerationLMRequest.hashValue.getter()
{
  sub_245C8F16C();
  sub_245C8F178();
  sub_245C8ECD4();
  return sub_245C8F19C();
}

uint64_t TextModerationLMRequest.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v24 = a2;
  v25 = __swift_instantiateConcreteTypeFromMangledName(&qword_257514EE0);
  v3 = *(_QWORD *)(v25 - 8);
  MEMORY[0x24BDAC7A8](v25);
  v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_257514EE8);
  v6 = *(_QWORD *)(v26 - 8);
  MEMORY[0x24BDAC7A8](v26);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_245C3B8A0();
  v9 = v29;
  sub_245C8F1A8();
  if (v9)
    goto LABEL_5;
  v22 = v3;
  v23 = a1;
  v11 = v25;
  v10 = v26;
  v29 = v6;
  if (*(_QWORD *)(sub_245C8F0B8() + 16) != 1)
  {
    v13 = v10;
    v14 = sub_245C8EFC8();
    swift_allocError();
    v16 = v15;
    __swift_instantiateConcreteTypeFromMangledName(&qword_257514EF0);
    *v16 = &type metadata for TextModerationLMRequest;
    sub_245C8F07C();
    sub_245C8EFBC();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v14 - 8) + 104))(v16, *MEMORY[0x24BEE26D0], v14);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v29 + 8))(v8, v13);
    a1 = v23;
LABEL_5:
    v19 = (uint64_t)a1;
    return __swift_destroy_boxed_opaque_existential_1Tm(v19);
  }
  sub_245C3B8E4();
  sub_245C8F070();
  v12 = v29;
  sub_245C3B96C();
  sub_245C8F0AC();
  (*(void (**)(char *, uint64_t))(v22 + 8))(v5, v11);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v8, v10);
  v18 = v28;
  v19 = (uint64_t)v23;
  v20 = v24;
  *v24 = v27;
  v20[1] = v18;
  return __swift_destroy_boxed_opaque_existential_1Tm(v19);
}

uint64_t sub_245C3B354()
{
  sub_245C8F16C();
  sub_245C8F178();
  sub_245C8ECD4();
  return sub_245C8F19C();
}

uint64_t sub_245C3B3B0()
{
  sub_245C8F178();
  return sub_245C8ECD4();
}

uint64_t sub_245C3B3F0()
{
  sub_245C8F16C();
  sub_245C8F178();
  sub_245C8ECD4();
  return sub_245C8F19C();
}

uint64_t sub_245C3B448@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return TextModerationLMRequest.init(from:)(a1, a2);
}

uint64_t sub_245C3B45C(_QWORD *a1)
{
  return TextModerationLMRequest.encode(to:)(a1);
}

uint64_t sub_245C3B470(_QWORD *a1, _QWORD *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1])
    return 1;
  else
    return sub_245C8F118();
}

SensitiveContentAnalysisML::TextModerationLMClassifyTextRequest __swiftcall TextModerationLMClassifyTextRequest.init(text:)(SensitiveContentAnalysisML::TextModerationLMClassifyTextRequest text)
{
  SensitiveContentAnalysisML::TextModerationLMClassifyTextRequest *v1;

  *v1 = text;
  return text;
}

uint64_t TextModerationLMClassifyTextRequest.text.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t TextModerationLMClassifyTextRequest.text.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*TextModerationLMClassifyTextRequest.text.modify())(sentencepiece::util::Status *__hidden this)
{
  return sentencepiece::util::Status::IgnoreError;
}

uint64_t TextModerationLMClassifyTextRequest.hash(into:)()
{
  swift_bridgeObjectRetain();
  sub_245C8ECD4();
  return swift_bridgeObjectRelease();
}

uint64_t sub_245C3B55C()
{
  return sub_245C8F178();
}

uint64_t sub_245C3B584@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, BOOL *a3@<X8>)
{
  uint64_t result;

  result = sub_245C40F90(a1, a2);
  *a3 = result != 0;
  return result;
}

uint64_t sub_245C3B5B0()
{
  sub_245C3B9B0();
  return sub_245C8F1C0();
}

uint64_t sub_245C3B5D8()
{
  sub_245C3B9B0();
  return sub_245C8F1CC();
}

uint64_t TextModerationLMClassifyTextRequest.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_257514F00);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_245C3B9B0();
  sub_245C8F1B4();
  sub_245C8F0D0();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t TextModerationLMClassifyTextRequest.hashValue.getter()
{
  sub_245C8F16C();
  sub_245C8ECD4();
  return sub_245C8F19C();
}

uint64_t TextModerationLMClassifyTextRequest.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_257514F08);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_245C3B9B0();
  sub_245C8F1A8();
  if (!v2)
  {
    v9 = sub_245C8F088();
    v11 = v10;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v9;
    a2[1] = v11;
  }
  return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
}

uint64_t sub_245C3B850()
{
  sub_245C8F16C();
  sub_245C8ECD4();
  return sub_245C8F19C();
}

uint64_t sub_245C3B898()
{
  return sub_245C8ECD4();
}

unint64_t sub_245C3B8A0()
{
  unint64_t result;

  result = qword_257516090;
  if (!qword_257516090)
  {
    result = MEMORY[0x2495457B0](&unk_245C94C40, &type metadata for TextModerationLMRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257516090);
  }
  return result;
}

unint64_t sub_245C3B8E4()
{
  unint64_t result;

  result = qword_257516098;
  if (!qword_257516098)
  {
    result = MEMORY[0x2495457B0](&unk_245C94BF0, &type metadata for TextModerationLMRequest.ClassifyTextCodingKeys);
    atomic_store(result, (unint64_t *)&qword_257516098);
  }
  return result;
}

unint64_t sub_245C3B928()
{
  unint64_t result;

  result = qword_257514ED8;
  if (!qword_257514ED8)
  {
    result = MEMORY[0x2495457B0](&protocol conformance descriptor for TextModerationLMClassifyTextRequest, &type metadata for TextModerationLMClassifyTextRequest);
    atomic_store(result, (unint64_t *)&qword_257514ED8);
  }
  return result;
}

unint64_t sub_245C3B96C()
{
  unint64_t result;

  result = qword_257514EF8;
  if (!qword_257514EF8)
  {
    result = MEMORY[0x2495457B0](&protocol conformance descriptor for TextModerationLMClassifyTextRequest, &type metadata for TextModerationLMClassifyTextRequest);
    atomic_store(result, (unint64_t *)&qword_257514EF8);
  }
  return result;
}

unint64_t sub_245C3B9B0()
{
  unint64_t result;

  result = qword_2575160A0;
  if (!qword_2575160A0)
  {
    result = MEMORY[0x2495457B0](&unk_245C94BA0, &type metadata for TextModerationLMClassifyTextRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2575160A0);
  }
  return result;
}

uint64_t sub_245C3B9F4()
{
  sub_245C8F16C();
  sub_245C8ECD4();
  return sub_245C8F19C();
}

uint64_t sub_245C3BA38@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return TextModerationLMClassifyTextRequest.init(from:)(a1, a2);
}

uint64_t sub_245C3BA4C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_257514F00);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_245C3B9B0();
  sub_245C8F1B4();
  sub_245C8F0D0();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t TextModerationLMResponse.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 8);
  sub_245C8F178();
  sub_245C8F184();
  return sub_245C3F7BC(a1, v3);
}

BOOL static TextModerationLMResponse.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2 && (sub_245C3C3E8(*((_QWORD *)a1 + 1), *((_QWORD *)a2 + 1)) & 1) != 0;
}

uint64_t static TextModerationLMClassifyTextResponse.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (*a1 == *a2)
    return sub_245C3C3E8(*((_QWORD *)a1 + 1), *((_QWORD *)a2 + 1));
  else
    return 0;
}

uint64_t sub_245C3BBE4()
{
  sub_245C3F898();
  return sub_245C8F1C0();
}

uint64_t sub_245C3BC0C()
{
  sub_245C3F898();
  return sub_245C8F1CC();
}

uint64_t sub_245C3BC34()
{
  sub_245C8F16C();
  sub_245C8F178();
  return sub_245C8F19C();
}

uint64_t sub_245C3BC74()
{
  sub_245C8F16C();
  sub_245C8F178();
  return sub_245C8F19C();
}

uint64_t sub_245C3BCB0()
{
  sub_245C3F854();
  return sub_245C8F1C0();
}

uint64_t sub_245C3BCD8()
{
  sub_245C3F854();
  return sub_245C8F1CC();
}

uint64_t TextModerationLMResponse.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_257514F10);
  v14 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_257514F18);
  v13 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v1;
  v12 = *((_QWORD *)v1 + 1);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_245C3F854();
  sub_245C8F1B4();
  sub_245C3F898();
  sub_245C8F0C4();
  v15 = v9;
  v16 = v12;
  sub_245C3F8DC();
  sub_245C8F0F4();
  (*(void (**)(char *, uint64_t))(v14 + 8))(v5, v3);
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v8, v6);
}

uint64_t TextModerationLMResponse.hashValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[72];

  v1 = *(_QWORD *)(v0 + 8);
  sub_245C8F16C();
  sub_245C8F178();
  sub_245C8F184();
  sub_245C3F7BC((uint64_t)v3, v1);
  return sub_245C8F19C();
}

uint64_t TextModerationLMResponse.init(from:)@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _BYTE *v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;

  v24 = a2;
  v25 = __swift_instantiateConcreteTypeFromMangledName(&qword_257514F28);
  v3 = *(_QWORD *)(v25 - 8);
  MEMORY[0x24BDAC7A8](v25);
  v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_257514F30);
  v6 = *(_QWORD *)(v26 - 8);
  MEMORY[0x24BDAC7A8](v26);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_245C3F854();
  v9 = v29;
  sub_245C8F1A8();
  if (v9)
    goto LABEL_5;
  v22 = v3;
  v23 = a1;
  v11 = v25;
  v10 = v26;
  v29 = v6;
  if (*(_QWORD *)(sub_245C8F0B8() + 16) != 1)
  {
    v13 = v10;
    v14 = sub_245C8EFC8();
    swift_allocError();
    v16 = v15;
    __swift_instantiateConcreteTypeFromMangledName(&qword_257514EF0);
    *v16 = &type metadata for TextModerationLMResponse;
    sub_245C8F07C();
    sub_245C8EFBC();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v14 - 8) + 104))(v16, *MEMORY[0x24BEE26D0], v14);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v29 + 8))(v8, v13);
    a1 = v23;
LABEL_5:
    v19 = (uint64_t)a1;
    return __swift_destroy_boxed_opaque_existential_1Tm(v19);
  }
  sub_245C3F898();
  sub_245C8F070();
  v12 = v29;
  sub_245C3F920();
  sub_245C8F0AC();
  (*(void (**)(char *, uint64_t))(v22 + 8))(v5, v11);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v8, v10);
  v18 = v28;
  v19 = (uint64_t)v23;
  v20 = v24;
  *v24 = v27;
  *((_QWORD *)v20 + 1) = v18;
  return __swift_destroy_boxed_opaque_existential_1Tm(v19);
}

uint64_t sub_245C3C1C0()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[72];

  v1 = *(_QWORD *)(v0 + 8);
  sub_245C8F16C();
  sub_245C8F178();
  sub_245C8F184();
  sub_245C3F7BC((uint64_t)v3, v1);
  return sub_245C8F19C();
}

uint64_t sub_245C3C228(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 8);
  sub_245C8F178();
  sub_245C8F184();
  return sub_245C3F7BC(a1, v3);
}

uint64_t sub_245C3C270()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[72];

  v1 = *(_QWORD *)(v0 + 8);
  sub_245C8F16C();
  sub_245C8F178();
  sub_245C8F184();
  sub_245C3F7BC((uint64_t)v3, v1);
  return sub_245C8F19C();
}

uint64_t sub_245C3C2D4@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return TextModerationLMResponse.init(from:)(a1, a2);
}

uint64_t sub_245C3C2E8(_QWORD *a1)
{
  return TextModerationLMResponse.encode(to:)(a1);
}

BOOL sub_245C3C2FC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2 && (sub_245C3C3E8(*((_QWORD *)a1 + 1), *((_QWORD *)a2 + 1)) & 1) != 0;
}

uint64_t TextModerationLMClassifyTextResponse.safe.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t TextModerationLMClassifyTextResponse.safe.setter(uint64_t result)
{
  _BYTE *v1;

  *v1 = result;
  return result;
}

uint64_t (*TextModerationLMClassifyTextResponse.safe.modify())(sentencepiece::util::Status *__hidden this)
{
  return sentencepiece::util::Status::IgnoreError;
}

uint64_t TextModerationLMClassifyTextResponse.predictions.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t TextModerationLMClassifyTextResponse.predictions.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 8) = a1;
  return result;
}

uint64_t (*TextModerationLMClassifyTextResponse.predictions.modify())(sentencepiece::util::Status *__hidden this)
{
  return sentencepiece::util::Status::IgnoreError;
}

uint64_t TextModerationLMClassifyTextResponse.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 8);
  sub_245C8F184();
  swift_bridgeObjectRetain();
  sub_245C3F7BC(a1, v3);
  return swift_bridgeObjectRelease();
}

uint64_t sub_245C3C3E8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  int v7;
  float v8;
  int v9;
  float v10;
  char v12;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (v2 && a1 != a2)
  {
    v5 = 0;
    do
    {
      v7 = *(unsigned __int8 *)(a1 + v5 + 48);
      v8 = *(float *)(a1 + v5 + 52);
      v9 = *(unsigned __int8 *)(a2 + v5 + 48);
      v10 = *(float *)(a2 + v5 + 52);
      if (*(_QWORD *)(a1 + v5 + 32) == *(_QWORD *)(a2 + v5 + 32)
        && *(_QWORD *)(a1 + v5 + 40) == *(_QWORD *)(a2 + v5 + 40))
      {
        if (v7 != v9 || v8 != v10)
          return 0;
      }
      else
      {
        v12 = sub_245C8F118();
        result = 0;
        if ((v12 & 1) == 0)
          return result;
        if (v7 != v9 || v8 != v10)
          return result;
      }
      v5 += 24;
      --v2;
    }
    while (v2);
  }
  return 1;
}

uint64_t sub_245C3C4BC(char a1)
{
  if ((a1 & 1) != 0)
    return 0x6974636964657270;
  else
    return 1701208435;
}

BOOL sub_245C3C4F4(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t sub_245C3C50C()
{
  sub_245C8F16C();
  sub_245C8F178();
  return sub_245C8F19C();
}

uint64_t sub_245C3C550()
{
  return sub_245C8F178();
}

uint64_t sub_245C3C578()
{
  sub_245C8F16C();
  sub_245C8F178();
  return sub_245C8F19C();
}

uint64_t sub_245C3C5B8()
{
  char *v0;

  return sub_245C3C4BC(*v0);
}

uint64_t sub_245C3C5C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_245C41114(a1, a2);
  *a3 = result;
  return result;
}

void sub_245C3C5E4(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_245C3C5F0()
{
  sub_245C3F964();
  return sub_245C8F1C0();
}

uint64_t sub_245C3C618()
{
  sub_245C3F964();
  return sub_245C8F1CC();
}

uint64_t TextModerationLMClassifyTextResponse.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  _QWORD v9[2];
  char v10;
  char v11;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_257514F40);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9[0] = *(_QWORD *)(v1 + 8);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_245C3F964();
  sub_245C8F1B4();
  v11 = 0;
  sub_245C8F0DC();
  if (!v2)
  {
    v9[1] = v9[0];
    v10 = 1;
    __swift_instantiateConcreteTypeFromMangledName(&qword_257514F48);
    sub_245C3F9EC(&qword_257514F50, (uint64_t (*)(void))sub_245C3F9A8, MEMORY[0x24BEE12A0]);
    sub_245C8F0F4();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t TextModerationLMClassifyTextResponse.hashValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[72];

  v1 = *(_QWORD *)(v0 + 8);
  sub_245C8F16C();
  sub_245C8F184();
  sub_245C3F7BC((uint64_t)v3, v1);
  return sub_245C8F19C();
}

uint64_t TextModerationLMClassifyTextResponse.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char v9;
  uint64_t v10;
  _QWORD v12[2];
  char v13;
  char v14;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_257514F60);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_245C3F964();
  sub_245C8F1A8();
  if (!v2)
  {
    v14 = 0;
    v9 = sub_245C8F094();
    __swift_instantiateConcreteTypeFromMangledName(&qword_257514F48);
    v13 = 1;
    sub_245C3F9EC(&qword_257514F68, (uint64_t (*)(void))sub_245C3FA54, MEMORY[0x24BEE12D0]);
    sub_245C8F0AC();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v10 = v12[1];
    *(_BYTE *)a2 = v9 & 1;
    *(_QWORD *)(a2 + 8) = v10;
  }
  return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
}

uint64_t sub_245C3C98C()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[72];

  v1 = *(_QWORD *)(v0 + 8);
  sub_245C8F16C();
  sub_245C8F184();
  sub_245C3F7BC((uint64_t)v3, v1);
  return sub_245C8F19C();
}

uint64_t sub_245C3C9E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 8);
  sub_245C8F184();
  v2 = *(_QWORD *)(v1 + 16);
  result = sub_245C8F178();
  if (v2)
  {
    v4 = v1 + 52;
    do
    {
      v4 += 24;
      swift_bridgeObjectRetain();
      sub_245C8ECD4();
      sub_245C8F184();
      sub_245C8F190();
      result = swift_bridgeObjectRelease();
      --v2;
    }
    while (v2);
  }
  return result;
}

uint64_t sub_245C3CA8C()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[72];

  v1 = *(_QWORD *)(v0 + 8);
  sub_245C8F16C();
  sub_245C8F184();
  sub_245C3F7BC((uint64_t)v3, v1);
  return sub_245C8F19C();
}

uint64_t sub_245C3CAE4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return TextModerationLMClassifyTextResponse.init(from:)(a1, a2);
}

uint64_t sub_245C3CAF8(_QWORD *a1)
{
  return TextModerationLMClassifyTextResponse.encode(to:)(a1);
}

uint64_t sub_245C3CB0C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (*a1 == *a2)
    return sub_245C3C3E8(*((_QWORD *)a1 + 1), *((_QWORD *)a2 + 1));
  else
    return 0;
}

uint64_t TextModerationLMClassifyTextPrediction.nameP1.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t TextModerationLMClassifyTextPrediction.nameP1.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*TextModerationLMClassifyTextPrediction.nameP1.modify())(sentencepiece::util::Status *__hidden this)
{
  return sentencepiece::util::Status::IgnoreError;
}

uint64_t TextModerationLMClassifyTextPrediction.safe.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t TextModerationLMClassifyTextPrediction.safe.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 16) = result;
  return result;
}

uint64_t (*TextModerationLMClassifyTextPrediction.safe.modify())(sentencepiece::util::Status *__hidden this)
{
  return sentencepiece::util::Status::IgnoreError;
}

float TextModerationLMClassifyTextPrediction.probability.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 20);
}

void TextModerationLMClassifyTextPrediction.probability.setter(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 20) = a1;
}

uint64_t (*TextModerationLMClassifyTextPrediction.probability.modify())(sentencepiece::util::Status *__hidden this)
{
  return sentencepiece::util::Status::IgnoreError;
}

uint64_t TextModerationLMClassifyTextPrediction.hash(into:)()
{
  swift_bridgeObjectRetain();
  sub_245C8ECD4();
  swift_bridgeObjectRelease();
  sub_245C8F184();
  return sub_245C8F190();
}

uint64_t sub_245C3CC54(char a1)
{
  return *(_QWORD *)&aNamep1_2[8 * a1];
}

BOOL sub_245C3CC74(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t sub_245C3CC88()
{
  char *v0;

  return sub_245C3CC54(*v0);
}

uint64_t sub_245C3CC90@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_245C411FC(a1, a2);
  *a3 = result;
  return result;
}

void sub_245C3CCB4(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

uint64_t sub_245C3CCC0()
{
  sub_245C3FCD0();
  return sub_245C8F1C0();
}

uint64_t sub_245C3CCE8()
{
  sub_245C3FCD0();
  return sub_245C8F1CC();
}

uint64_t TextModerationLMClassifyTextPrediction.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _DWORD v9[4];
  uint64_t v10;
  char v11;
  char v12;
  char v13;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_257514F78);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9[3] = *(unsigned __int8 *)(v1 + 16);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_245C3FCD0();
  sub_245C8F1B4();
  v13 = 0;
  v7 = v10;
  sub_245C8F0D0();
  if (!v7)
  {
    v12 = 1;
    sub_245C8F0DC();
    v11 = 2;
    sub_245C8F0E8();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t TextModerationLMClassifyTextPrediction.hashValue.getter()
{
  sub_245C8F16C();
  sub_245C8ECD4();
  sub_245C8F184();
  sub_245C8F190();
  return sub_245C8F19C();
}

uint64_t TextModerationLMClassifyTextPrediction.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v13;
  int v14;
  char v15;
  uint64_t v16;
  int v17;
  char v18;
  char v19;
  char v20;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_257514F80);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_245C3FCD0();
  sub_245C8F1A8();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  v20 = 0;
  v9 = sub_245C8F088();
  v11 = v10;
  v19 = 1;
  swift_bridgeObjectRetain();
  v17 = sub_245C8F094();
  v18 = 2;
  sub_245C8F0A0();
  v14 = v13;
  v15 = v17 & 1;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  *(_QWORD *)a2 = v9;
  *(_QWORD *)(a2 + 8) = v11;
  *(_BYTE *)(a2 + 16) = v15;
  *(_DWORD *)(a2 + 20) = v14;
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)a1);
  return swift_bridgeObjectRelease();
}

uint64_t sub_245C3D0B0()
{
  sub_245C8ECD4();
  sub_245C8F184();
  return sub_245C8F190();
}

uint64_t sub_245C3D0FC()
{
  sub_245C8F16C();
  sub_245C8ECD4();
  sub_245C8F184();
  sub_245C8F190();
  return sub_245C8F19C();
}

uint64_t sub_245C3D174@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return TextModerationLMClassifyTextPrediction.init(from:)(a1, a2);
}

uint64_t sub_245C3D188(_QWORD *a1)
{
  return TextModerationLMClassifyTextPrediction.encode(to:)(a1);
}

uint64_t sub_245C3D1A0()
{
  uint64_t v0;
  uint64_t result;

  v0 = sub_245C39748((uint64_t)&unk_2516E1648);
  result = swift_arrayDestroy();
  qword_257516048 = v0;
  return result;
}

uint64_t static TextModerationLMInferenceProvider.inferenceAssetIdentifiers.getter()
{
  if (qword_257516040 != -1)
    swift_once();
  return swift_bridgeObjectRetain();
}

uint64_t sub_245C3D228()
{
  uint64_t v0;

  v0 = sub_245C8EBE4();
  __swift_allocate_value_buffer(v0, qword_257516058);
  __swift_project_value_buffer(v0, (uint64_t)qword_257516058);
  return sub_245C8EBD8();
}

uint64_t sub_245C3D29C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v0 = sub_245C8EBE4();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_245C8EBC0();
  __swift_allocate_value_buffer(v4, qword_257516078);
  __swift_project_value_buffer(v4, (uint64_t)qword_257516078);
  if (qword_257516050 != -1)
    swift_once();
  v5 = __swift_project_value_buffer(v0, (uint64_t)qword_257516058);
  (*(void (**)(char *, uint64_t, uint64_t))(v1 + 16))(v3, v5, v0);
  return sub_245C8EBA8();
}

uint64_t TextModerationLMInferenceProvider.__allocating_init()()
{
  uint64_t v0;

  v0 = swift_allocObject();
  TextModerationLMInferenceProvider.init()();
  return v0;
}

uint64_t TextModerationLMInferenceProvider.init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);
  uint64_t v7;
  _QWORD v9[2];

  v1 = sub_245C8EE84();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x24BDAC7A8](v1);
  v4 = (char *)v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_245C8EE78();
  v6 = (uint64_t (*)(uint64_t))MEMORY[0x24BEE5688];
  MEMORY[0x24BDAC7A8](v5);
  v7 = sub_245C8EBFC();
  MEMORY[0x24BDAC7A8](v7);
  *(_QWORD *)(v0 + 16) = 0;
  sub_245C8EBD8();
  v9[0] = OBJC_IVAR____TtC26SensitiveContentAnalysisML33TextModerationLMInferenceProvider_dispatchQueue;
  sub_245C413D8(0, &qword_257514F88);
  sub_245C8EBF0();
  v9[1] = MEMORY[0x24BEE4AF8];
  sub_245C3AB38(&qword_257514F90, v6, MEMORY[0x24BEE5698]);
  __swift_instantiateConcreteTypeFromMangledName(&qword_257514F98);
  sub_245C3FD14();
  sub_245C8EF68();
  (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, *MEMORY[0x24BEE5750], v1);
  *(_QWORD *)(v0 + v9[0]) = sub_245C8EE9C();
  return v0;
}

uint64_t TextModerationLMInferenceProvider.loadIn(inferenceAssetIdentifier:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  v4 = sub_245C8EAD0();
  v3[5] = v4;
  v3[6] = *(_QWORD *)(v4 - 8);
  v3[7] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_245C3D638()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  if (qword_257516040 != -1)
    swift_once();
  if ((sub_245C34420(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), qword_257516048) & 1) != 0)
  {
    v2 = *(_QWORD *)(v0 + 24);
    v1 = *(_QWORD *)(v0 + 32);
    v3 = *(_QWORD *)(v0 + 16);
    v4 = (_QWORD *)swift_task_alloc();
    v4[2] = v1;
    v4[3] = v3;
    v4[4] = v2;
    sub_245C8EE90();
    swift_task_dealloc();
  }
  else
  {
    v6 = *(_QWORD *)(v0 + 48);
    v5 = *(_QWORD *)(v0 + 56);
    v11 = *(_QWORD *)(v0 + 40);
    sub_245C8EF8C();
    swift_bridgeObjectRelease();
    sub_245C8ED88();
    v7 = sub_245C8EADC();
    sub_245C3AB38(&qword_257514FB0, (uint64_t (*)(uint64_t))MEMORY[0x24BE689F0], MEMORY[0x24BE68A00]);
    swift_allocError();
    v9 = v8;
    sub_245C8ED88();
    sub_245C3FA98(MEMORY[0x24BEE4AF8]);
    sub_245C8EAC4();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v9, v5, v11);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v9, *MEMORY[0x24BE68980], v7);
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v11);
    swift_bridgeObjectRelease();
    swift_willThrow();
  }
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_245C3D888(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint8_t *v18;
  NSObject *v19;
  os_signpost_type_t v20;
  os_signpost_id_t v21;
  uint64_t v22;
  os_signpost_type_t v23;
  os_signpost_id_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v7 = sub_245C8EB9C();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_245C8EBC0();
  result = MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(_QWORD *)(a1 + 16))
  {
    v26 = v13;
    v27 = a2;
    v28 = a3;
    v29 = v8;
    v30 = v7;
    v31 = v3;
    if (qword_257516070 != -1)
      swift_once();
    v16 = __swift_project_value_buffer(v11, (uint64_t)qword_257516078);
    v17 = v26;
    (*(void (**)(char *, uint64_t, uint64_t))(v26 + 16))(v15, v16, v11);
    sub_245C8EBB4();
    sub_245C8EB84();
    v18 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v18 = 0;
    v19 = sub_245C8EBB4();
    v20 = sub_245C8EEB4();
    v21 = sub_245C8EB90();
    _os_signpost_emit_with_name_impl(&dword_245BFA000, v19, v20, v21, "TextModerationLMInferenceProvider.loadIn", "", v18, 2u);
    v22 = v31;
    sub_245C3DABC(a1, v27, v28);
    if (v22)
    {

    }
    else
    {
      v23 = sub_245C8EEA8();
      v24 = sub_245C8EB90();
      _os_signpost_emit_with_name_impl(&dword_245BFA000, v19, v23, v24, "TextModerationLMInferenceProvider.loadIn", "", v18, 2u);

      MEMORY[0x249545828](v18, -1, -1);
    }
    (*(void (**)(char *, uint64_t))(v29 + 8))(v10, v30);
    return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v15, v11);
  }
  return result;
}

void sub_245C3DABC(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  _BOOL4 v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  id v16;
  void *v17;
  id v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  _QWORD *v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48[3];
  id v49;
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  v7 = sub_245C8EAD0();
  v43 = *(_QWORD *)(v7 - 8);
  v44 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v42 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain_n();
  v9 = sub_245C8EBCC();
  v10 = sub_245C8EE6C();
  v11 = os_log_type_enabled(v9, v10);
  v45 = v3;
  v41 = a2;
  if (v11)
  {
    v12 = (uint8_t *)swift_slowAlloc();
    v13 = a2;
    v14 = swift_slowAlloc();
    v48[0] = v14;
    *(_DWORD *)v12 = 136315138;
    swift_bridgeObjectRetain();
    v46 = sub_245C3801C(v13, a3, v48);
    sub_245C8EF08();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_245BFA000, v9, v10, "loading %s", v12, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x249545828](v14, -1, -1);
    MEMORY[0x249545828](v12, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  v48[0] = 0;
  v15 = objc_msgSend(objc_allocWithZone((Class)SCMLTextModerationLM), sel_initWithError_, v48);
  v16 = (id)v48[0];
  v49 = (id)v48[0];
  v17 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v15;
  v18 = v16;

  if (*(_QWORD *)(a1 + 16))
  {
    swift_bridgeObjectRetain_n();
    v19 = sub_245C8EBCC();
    v20 = sub_245C8EE6C();
    if (os_log_type_enabled(v19, v20))
    {
      v21 = (uint8_t *)swift_slowAlloc();
      v22 = swift_slowAlloc();
      v48[0] = v22;
      *(_DWORD *)v21 = 136315138;
      swift_bridgeObjectRetain();
      v46 = sub_245C3801C(v41, a3, v48);
      sub_245C8EF08();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_245BFA000, v19, v20, "loaded %s", v21, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x249545828](v22, -1, -1);
      MEMORY[0x249545828](v21, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }

  }
  else
  {
    v23 = sub_245C8EBCC();
    v24 = sub_245C8EE60();
    if (os_log_type_enabled(v23, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc();
      v26 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v25 = 138412290;
      swift_beginAccess();
      v16 = v49;
      if (v49)
      {
        v46 = (uint64_t)v49;
        v27 = v49;
      }
      else
      {
        v46 = 0;
      }
      sub_245C8EF08();
      *v26 = v16;
      _os_log_impl(&dword_245BFA000, v23, v24, "loadIn failed: %@", v25, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&qword_257515028);
      swift_arrayDestroy();
      MEMORY[0x249545828](v26, -1, -1);
      MEMORY[0x249545828](v25, -1, -1);
    }

    if (v16)
    {
      v28 = sub_245C8EADC();
      sub_245C3AB38(&qword_257514FB0, (uint64_t (*)(uint64_t))MEMORY[0x24BE689F0], MEMORY[0x24BE68A00]);
      swift_allocError();
      v30 = v29;
      swift_getErrorValue();
      v31 = v16;
      sub_245C8F130();
      v46 = 0xD000000000000021;
      v47 = 0x8000000245CA1900;
      sub_245C8ED88();
      swift_bridgeObjectRelease();
      sub_245C3FA98(MEMORY[0x24BEE4AF8]);
      v32 = v42;
      sub_245C8EAC4();
      v34 = v43;
      v33 = v44;
      (*(void (**)(uint64_t, char *, uint64_t))(v43 + 16))(v30, v32, v44);
      (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v28 - 8) + 104))(v30, *MEMORY[0x24BE68948], v28);

      (*(void (**)(char *, uint64_t))(v34 + 8))(v32, v33);
    }
    else
    {
      v35 = sub_245C8EADC();
      sub_245C3AB38(&qword_257514FB0, (uint64_t (*)(uint64_t))MEMORY[0x24BE689F0], MEMORY[0x24BE68A00]);
      swift_allocError();
      v37 = v36;
      sub_245C3FA98(MEMORY[0x24BEE4AF8]);
      v38 = v42;
      sub_245C8EAC4();
      v40 = v43;
      v39 = v44;
      (*(void (**)(uint64_t, char *, uint64_t))(v43 + 16))(v37, v38, v44);
      (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v35 - 8) + 104))(v37, *MEMORY[0x24BE68948], v35);
      (*(void (**)(char *, uint64_t))(v40 + 8))(v38, v39);
    }
    swift_willThrow();

  }
}

uint64_t TextModerationLMInferenceProvider.loadOut(inferenceAssetIdentifier:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v3[9] = a2;
  v3[10] = v2;
  v3[8] = a1;
  v4 = sub_245C8EAD0();
  v3[11] = v4;
  v3[12] = *(_QWORD *)(v4 - 8);
  v3[13] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_245C3E1A4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  _QWORD *v5;
  uint64_t v6;
  void *v7;
  uint64_t result;
  uint64_t (*v9)(void);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (qword_257516040 != -1)
    swift_once();
  if ((sub_245C34420(v0[8], v0[9], qword_257516048) & 1) == 0)
  {
    v11 = v0[12];
    v10 = v0[13];
    v15 = v0[11];
    sub_245C8EF8C();
    swift_bridgeObjectRelease();
    sub_245C8ED88();
    v12 = sub_245C8EADC();
    sub_245C3AB38(&qword_257514FB0, (uint64_t (*)(uint64_t))MEMORY[0x24BE689F0], MEMORY[0x24BE68A00]);
    swift_allocError();
    v14 = v13;
    sub_245C8ED88();
    sub_245C3FA98(MEMORY[0x24BEE4AF8]);
    sub_245C8EAC4();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(v14, v10, v15);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v12 - 8) + 104))(v14, *MEMORY[0x24BE68980], v12);
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v15);
    swift_bridgeObjectRelease();
    swift_willThrow();
    swift_task_dealloc();
    v9 = (uint64_t (*)(void))v0[1];
    return v9();
  }
  v2 = v0[9];
  v1 = v0[10];
  v3 = v0[8];
  v4 = *(NSObject **)(v1 + OBJC_IVAR____TtC26SensitiveContentAnalysisML33TextModerationLMInferenceProvider_dispatchQueue);
  v5 = (_QWORD *)swift_allocObject();
  v5[2] = v1;
  v5[3] = v3;
  v5[4] = v2;
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = sub_245C3FDA8;
  *(_QWORD *)(v6 + 24) = v5;
  v0[6] = sub_245C3FF34;
  v0[7] = v6;
  v0[2] = MEMORY[0x24BDAC760];
  v0[3] = 1107296256;
  v0[4] = sub_245C3E4B0;
  v0[5] = &block_descriptor;
  v7 = _Block_copy(v0 + 2);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_release();
  dispatch_sync(v4, v7);
  _Block_release(v7);
  LOBYTE(v4) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  result = swift_release();
  if ((v4 & 1) == 0)
  {
    swift_task_dealloc();
    v9 = (uint64_t (*)(void))v0[1];
    return v9();
  }
  __break(1u);
  return result;
}

uint64_t sub_245C3E4B0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))();
}

void TextModerationLMInferenceProvider.requestStream(clientData:configuration:)()
{
  sub_245C8F028();
  __break(1u);
}

uint64_t TextModerationLMInferenceProvider.requestOneShot(clientData:configuration:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[5] = a2;
  v3[6] = v2;
  v3[4] = a1;
  return swift_task_switch();
}

uint64_t sub_245C3E544()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = *(_QWORD *)(v0 + 40);
  v1 = *(_QWORD *)(v0 + 48);
  v3 = *(_QWORD *)(v0 + 32);
  v4 = (_QWORD *)swift_task_alloc();
  v4[2] = v1;
  v4[3] = v3;
  v4[4] = v2;
  sub_245C8EE90();
  swift_task_dealloc();
  return (*(uint64_t (**)(_QWORD, _QWORD))(v0 + 8))(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_245C3E608@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint8_t *v12;
  NSObject *v13;
  os_signpost_type_t v14;
  os_signpost_id_t v15;
  uint64_t v16;
  os_signpost_type_t v17;
  os_signpost_id_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29[2];
  uint64_t v30;

  v26 = a3;
  v24 = a4;
  v25 = a2;
  v30 = sub_245C8EB9C();
  v28 = *(_QWORD *)(v30 - 8);
  MEMORY[0x24BDAC7A8](v30);
  v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_245C8EBC0();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_257516070 != -1)
    swift_once();
  v11 = __swift_project_value_buffer(v7, (uint64_t)qword_257516078);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v11, v7);
  sub_245C8EBB4();
  sub_245C8EB84();
  v12 = (uint8_t *)swift_slowAlloc();
  *(_WORD *)v12 = 0;
  v13 = sub_245C8EBB4();
  v14 = sub_245C8EEB4();
  v15 = sub_245C8EB90();
  _os_signpost_emit_with_name_impl(&dword_245BFA000, v13, v14, v15, "TextModerationLMInferenceProvider.requestOneShot", "", v12, 2u);
  v16 = v27;
  sub_245C3E82C(a1, v29);
  if (v16)
  {

  }
  else
  {
    v17 = sub_245C8EEA8();
    v18 = sub_245C8EB90();
    _os_signpost_emit_with_name_impl(&dword_245BFA000, v13, v17, v18, "TextModerationLMInferenceProvider.requestOneShot", "", v12, 2u);

    v19 = v29[0];
    v20 = v29[1];
    MEMORY[0x249545828](v12, -1, -1);
    v21 = v24;
    *v24 = v19;
    v21[1] = v20;
  }
  (*(void (**)(char *, uint64_t))(v28 + 8))(v6, v30);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

void sub_245C3E82C(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unint64_t v17;
  id v18;
  id v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  _QWORD *v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint8_t *v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;

  v40 = a2;
  v4 = sub_245C8EAD0();
  v5 = *(_QWORD *)(v4 - 8);
  v41 = v4;
  v42 = v5;
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_245C8EBCC();
  v9 = sub_245C8EE6C();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v10 = 0;
    _os_log_impl(&dword_245BFA000, v8, v9, "handling requestOneShot", v10, 2u);
    MEMORY[0x249545828](v10, -1, -1);
  }

  if (*(_QWORD *)(a1 + 16))
  {
    sub_245C8E8B4();
    swift_allocObject();
    sub_245C8E8A8();
    sub_245C41350();
    sub_245C8E89C();
    if (v2)
    {
      swift_release();
      v18 = v2;
      v19 = v2;
      v20 = sub_245C8EBCC();
      v21 = sub_245C8EE60();
      if (os_log_type_enabled(v20, v21))
      {
        v22 = (uint8_t *)swift_slowAlloc();
        v23 = (_QWORD *)swift_slowAlloc();
        *(_DWORD *)v22 = 138412290;
        v24 = v2;
        v25 = _swift_stdlib_bridgeErrorToNSError();
        v45 = v25;
        sub_245C8EF08();
        *v23 = v25;

        _os_log_impl(&dword_245BFA000, v20, v21, "requestOneShot failed: %@", v22, 0xCu);
        __swift_instantiateConcreteTypeFromMangledName(&qword_257515028);
        swift_arrayDestroy();
        MEMORY[0x249545828](v23, -1, -1);
        MEMORY[0x249545828](v22, -1, -1);

      }
      else
      {

      }
      v26 = v41;
      v27 = sub_245C8EADC();
      sub_245C3AB38(&qword_257514FB0, (uint64_t (*)(uint64_t))MEMORY[0x24BE689F0], MEMORY[0x24BE68A00]);
      swift_allocError();
      v29 = v28;
      swift_getErrorValue();
      v30 = v2;
      v31 = v2;
      sub_245C8F130();
      v45 = 0xD000000000000024;
      v46 = 0x8000000245CA1860;
      sub_245C8ED88();
      swift_bridgeObjectRelease();
      sub_245C3FA98(MEMORY[0x24BEE4AF8]);
      sub_245C8EAC4();
      v32 = v42;
      (*(void (**)(uint64_t, char *, uint64_t))(v42 + 16))(v29, v7, v26);
      (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v27 - 8) + 104))(v29, *MEMORY[0x24BE68978], v27);

      (*(void (**)(char *, uint64_t))(v32 + 8))(v7, v26);
      swift_willThrow();

    }
    else
    {
      swift_release();
      v43 = v45;
      v44 = v46;
      sub_245C3EE20((unsigned __int8 *)&v45);
      swift_bridgeObjectRelease();
      v16 = v45;
      v17 = v46;
      sub_245C8E8D8();
      swift_allocObject();
      sub_245C8E8CC();
      LOBYTE(v45) = v16;
      v46 = v17;
      sub_245C41394();
      v33 = sub_245C8E8C0();
      v35 = v34;
      swift_bridgeObjectRelease();
      swift_release();
      v36 = sub_245C8EBCC();
      v37 = sub_245C8EE6C();
      if (os_log_type_enabled(v36, v37))
      {
        v38 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v38 = 0;
        _os_log_impl(&dword_245BFA000, v36, v37, "handled requestOneShot", v38, 2u);
        MEMORY[0x249545828](v38, -1, -1);
      }

      v39 = v40;
      *v40 = v33;
      v39[1] = v35;
    }
  }
  else
  {
    v11 = sub_245C8EADC();
    sub_245C3AB38(&qword_257514FB0, (uint64_t (*)(uint64_t))MEMORY[0x24BE689F0], MEMORY[0x24BE68A00]);
    swift_allocError();
    v13 = v12;
    sub_245C3FA98(MEMORY[0x24BEE4AF8]);
    sub_245C8EAC4();
    v14 = v41;
    v15 = v42;
    (*(void (**)(uint64_t, char *, uint64_t))(v42 + 16))(v13, v7, v41);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v11 - 8) + 104))(v13, *MEMORY[0x24BE689E8], v11);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v7, v14);
    swift_willThrow();
  }
}

void sub_245C3EE20(unsigned __int8 *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  void *v8;
  id v9;
  void *v10;
  id v11;
  id v12;
  id v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  id v18;
  void *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 v24;
  int v25;
  int v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  id v34;
  unsigned __int8 v35;
  unsigned __int8 *v36;
  id v37;
  id v38;
  unsigned __int8 *v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  id v43[2];

  v43[1] = *(id *)MEMORY[0x24BDAC8D0];
  v4 = sub_245C8EAD0();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(void **)(v1 + 16);
  if (v8)
  {
    v9 = v8;
    v10 = (void *)sub_245C8ED04();
    v43[0] = 0;
    v11 = objc_msgSend(v9, sel_predict_error_, v10, v43);

    if (v11)
    {
      v12 = v43[0];
      v13 = objc_msgSend(v11, sel_predictions);
      sub_245C413D8(0, (unint64_t *)&qword_257515038);
      v14 = sub_245C8EDF4();

      if (v14 >> 62)
      {
        swift_bridgeObjectRetain();
        v15 = sub_245C8F034();
        swift_bridgeObjectRelease();
      }
      else
      {
        v15 = *(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10);
      }
      v39 = a1;
      v40 = v2;
      v37 = v11;
      v38 = v9;
      if (v15)
      {
        if (v15 < 1)
          __break(1u);
        v16 = 0;
        v41 = v14 & 0xC000000000000001;
        v17 = (_QWORD *)MEMORY[0x24BEE4AF8];
        v42 = v14;
        do
        {
          if (v41)
            v18 = (id)MEMORY[0x249544508](v16, v14);
          else
            v18 = *(id *)(v14 + 8 * v16 + 32);
          v19 = v18;
          v20 = objc_msgSend(v18, sel_nameP1, v37, v38);
          v21 = sub_245C8ED10();
          v23 = v22;

          v24 = objc_msgSend(v19, sel_safe);
          objc_msgSend(v19, sel_probability);
          v26 = v25;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v17 = sub_245C3F698(0, v17[2] + 1, 1, v17);
          v28 = v17[2];
          v27 = v17[3];
          if (v28 >= v27 >> 1)
            v17 = sub_245C3F698((_QWORD *)(v27 > 1), v28 + 1, 1, v17);
          ++v16;
          v17[2] = v28 + 1;
          v29 = &v17[3 * v28];
          v29[4] = v21;
          v29[5] = v23;
          *((_BYTE *)v29 + 48) = v24;
          *((_DWORD *)v29 + 13) = v26;

          v14 = v42;
        }
        while (v15 != v16);
      }
      else
      {
        v17 = (_QWORD *)MEMORY[0x24BEE4AF8];
      }
      swift_bridgeObjectRelease();
      v34 = v37;
      v35 = objc_msgSend(v37, sel_safe);

      v36 = v39;
      *v39 = v35;
      *((_QWORD *)v36 + 1) = v17;
    }
    else
    {
      v33 = v43[0];
      sub_245C8E908();

      swift_willThrow();
    }
  }
  else
  {
    v30 = sub_245C8EADC();
    sub_245C3AB38(&qword_257514FB0, (uint64_t (*)(uint64_t))MEMORY[0x24BE689F0], MEMORY[0x24BE68A00]);
    swift_allocError();
    v32 = v31;
    sub_245C3FA98(MEMORY[0x24BEE4AF8]);
    sub_245C8EAC4();
    (*(void (**)(uint64_t, char *, uint64_t))(v5 + 16))(v32, v7, v4);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v30 - 8) + 104))(v32, *MEMORY[0x24BE689E8], v30);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    swift_willThrow();
  }
}

uint64_t TextModerationLMInferenceProvider.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC26SensitiveContentAnalysisML33TextModerationLMInferenceProvider_logger;
  v2 = sub_245C8EBE4();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);

  return v0;
}

uint64_t TextModerationLMInferenceProvider.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC26SensitiveContentAnalysisML33TextModerationLMInferenceProvider_logger;
  v2 = sub_245C8EBE4();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);

  return swift_deallocClassInstance();
}

uint64_t sub_245C3F2F4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = swift_allocObject();
  result = TextModerationLMInferenceProvider.init()();
  *a1 = v2;
  return result;
}

uint64_t sub_245C3F32C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_245C3ACE0;
  return TextModerationLMInferenceProvider.loadIn(inferenceAssetIdentifier:)(a1, a2);
}

uint64_t sub_245C3F38C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_245C3ACE0;
  return TextModerationLMInferenceProvider.loadOut(inferenceAssetIdentifier:)(a1, a2);
}

void sub_245C3F3EC()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_245C3ACE0;
  JUMPOUT(0x249544070);
}

void sub_245C3F46C()
{
  sub_245C8F028();
  __break(1u);
}

uint64_t sub_245C3F4C8(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;

  v3[4] = a1;
  v3[5] = a2;
  v3[6] = *v2;
  return swift_task_switch();
}

uint64_t sub_245C3F4E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = *(_QWORD *)(v0 + 40);
  v1 = *(_QWORD *)(v0 + 48);
  v3 = *(_QWORD *)(v0 + 32);
  v4 = (_QWORD *)swift_task_alloc();
  v4[2] = v1;
  v4[3] = v3;
  v4[4] = v2;
  sub_245C8EE90();
  swift_task_dealloc();
  return (*(uint64_t (**)(_QWORD, _QWORD))(v0 + 8))(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_245C3F5AC()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_245C3ACE0;
  return sub_245C8EB00();
}

void sub_245C3F630()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_245C35130;
  JUMPOUT(0x24954404CLL);
}

_QWORD *sub_245C3F698(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_257515040);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4])
          memmove(v12, a4 + 4, 24 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_245C41410(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_245C3F7BC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v3 = *(_QWORD *)(a2 + 16);
  result = sub_245C8F178();
  if (v3)
  {
    v5 = a2 + 52;
    do
    {
      v5 += 24;
      swift_bridgeObjectRetain();
      sub_245C8ECD4();
      sub_245C8F184();
      sub_245C8F190();
      result = swift_bridgeObjectRelease();
      --v3;
    }
    while (v3);
  }
  return result;
}

unint64_t sub_245C3F854()
{
  unint64_t result;

  result = qword_2575160A8;
  if (!qword_2575160A8)
  {
    result = MEMORY[0x2495457B0](&unk_245C94B50, &type metadata for TextModerationLMResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2575160A8);
  }
  return result;
}

unint64_t sub_245C3F898()
{
  unint64_t result;

  result = qword_2575160B0;
  if (!qword_2575160B0)
  {
    result = MEMORY[0x2495457B0](&unk_245C94B00, &type metadata for TextModerationLMResponse.ClassifyTextCodingKeys);
    atomic_store(result, (unint64_t *)&qword_2575160B0);
  }
  return result;
}

unint64_t sub_245C3F8DC()
{
  unint64_t result;

  result = qword_257514F20;
  if (!qword_257514F20)
  {
    result = MEMORY[0x2495457B0](&protocol conformance descriptor for TextModerationLMClassifyTextResponse, &type metadata for TextModerationLMClassifyTextResponse);
    atomic_store(result, (unint64_t *)&qword_257514F20);
  }
  return result;
}

unint64_t sub_245C3F920()
{
  unint64_t result;

  result = qword_257514F38;
  if (!qword_257514F38)
  {
    result = MEMORY[0x2495457B0](&protocol conformance descriptor for TextModerationLMClassifyTextResponse, &type metadata for TextModerationLMClassifyTextResponse);
    atomic_store(result, (unint64_t *)&qword_257514F38);
  }
  return result;
}

unint64_t sub_245C3F964()
{
  unint64_t result;

  result = qword_2575160B8;
  if (!qword_2575160B8)
  {
    result = MEMORY[0x2495457B0](&unk_245C94AB0, &type metadata for TextModerationLMClassifyTextResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2575160B8);
  }
  return result;
}

unint64_t sub_245C3F9A8()
{
  unint64_t result;

  result = qword_257514F58;
  if (!qword_257514F58)
  {
    result = MEMORY[0x2495457B0](&protocol conformance descriptor for TextModerationLMClassifyTextPrediction, &type metadata for TextModerationLMClassifyTextPrediction);
    atomic_store(result, (unint64_t *)&qword_257514F58);
  }
  return result;
}

uint64_t sub_245C3F9EC(unint64_t *a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v7 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_257514F48);
    v8 = a2();
    result = MEMORY[0x2495457B0](a3, v7, &v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_245C3FA54()
{
  unint64_t result;

  result = qword_257514F70;
  if (!qword_257514F70)
  {
    result = MEMORY[0x2495457B0](&protocol conformance descriptor for TextModerationLMClassifyTextPrediction, &type metadata for TextModerationLMClassifyTextPrediction);
    atomic_store(result, (unint64_t *)&qword_257514F70);
  }
  return result;
}

unint64_t sub_245C3FA98(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_257515048);
  v2 = (_QWORD *)sub_245C8F058();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 56);
  while (1)
  {
    v5 = *(v4 - 3);
    v6 = *(v4 - 2);
    v8 = *(v4 - 1);
    v7 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = sub_245C3FBB8(v5, v6);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v11 = (uint64_t *)(v2[6] + 16 * result);
    *v11 = v5;
    v11[1] = v6;
    v12 = (_QWORD *)(v2[7] + 16 * result);
    *v12 = v8;
    v12[1] = v7;
    v13 = v2[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4 += 4;
    v2[2] = v15;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_245C3FBB8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_245C8F16C();
  sub_245C8ECD4();
  v4 = sub_245C8F19C();
  return sub_245C38B18(a1, a2, v4);
}

uint64_t sub_245C3FC1C()
{
  return 12383;
}

uint64_t sub_245C3FC28()
{
  return 0x7966697373616C63;
}

BOOL _s26SensitiveContentAnalysisML024TextModerationLMClassifyE10PredictionV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  int v2;
  float v3;
  int v4;
  float v5;
  char v7;
  _BOOL8 result;

  v2 = *(unsigned __int8 *)(a1 + 16);
  v3 = *(float *)(a1 + 20);
  v4 = *(unsigned __int8 *)(a2 + 16);
  v5 = *(float *)(a2 + 20);
  if (*(_QWORD *)a1 == *(_QWORD *)a2 && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8))
  {
    if (v2 != v4)
      return 0;
    return v3 == v5;
  }
  v7 = sub_245C8F118();
  result = 0;
  if ((v7 & 1) != 0 && ((v2 ^ v4) & 1) == 0)
    return v3 == v5;
  return result;
}

unint64_t sub_245C3FCD0()
{
  unint64_t result;

  result = qword_2575160C0;
  if (!qword_2575160C0)
  {
    result = MEMORY[0x2495457B0](&unk_245C94A60, &type metadata for TextModerationLMClassifyTextPrediction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2575160C0);
  }
  return result;
}

unint64_t sub_245C3FD14()
{
  unint64_t result;
  uint64_t v1;

  result = qword_257514FA0;
  if (!qword_257514FA0)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_257514F98);
    result = MEMORY[0x2495457B0](MEMORY[0x24BEE12C8], v1);
    atomic_store(result, (unint64_t *)&qword_257514FA0);
  }
  return result;
}

uint64_t sub_245C3FD60()
{
  uint64_t v0;

  return sub_245C3D888(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t sub_245C3FD7C()
{
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

void sub_245C3FDA8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;

  v2 = v0[2];
  v1 = v0[3];
  v3 = v0[4];
  swift_bridgeObjectRetain_n();
  v4 = sub_245C8EBCC();
  v5 = sub_245C8EE6C();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc();
    v7 = swift_slowAlloc();
    v9 = v7;
    *(_DWORD *)v6 = 136315138;
    swift_bridgeObjectRetain();
    sub_245C3801C(v1, v3, &v9);
    sub_245C8EF08();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_245BFA000, v4, v5, "unloading %s", v6, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x249545828](v7, -1, -1);
    MEMORY[0x249545828](v6, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  v8 = *(void **)(v2 + 16);
  *(_QWORD *)(v2 + 16) = 0;

}

uint64_t sub_245C3FF24()
{
  return swift_deallocObject();
}

uint64_t sub_245C3FF34()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

uint64_t sub_245C3FF6C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;

  return sub_245C3E608(v1[2], v1[3], v1[4], a1);
}

unint64_t sub_245C3FF8C()
{
  unint64_t result;

  result = qword_257514FC8;
  if (!qword_257514FC8)
  {
    result = MEMORY[0x2495457B0](&protocol conformance descriptor for TextModerationLMRequest, &type metadata for TextModerationLMRequest);
    atomic_store(result, (unint64_t *)&qword_257514FC8);
  }
  return result;
}

unint64_t sub_245C3FFD4()
{
  unint64_t result;

  result = qword_257514FD0;
  if (!qword_257514FD0)
  {
    result = MEMORY[0x2495457B0](&protocol conformance descriptor for TextModerationLMClassifyTextRequest, &type metadata for TextModerationLMClassifyTextRequest);
    atomic_store(result, (unint64_t *)&qword_257514FD0);
  }
  return result;
}

unint64_t sub_245C4001C()
{
  unint64_t result;

  result = qword_257514FD8;
  if (!qword_257514FD8)
  {
    result = MEMORY[0x2495457B0](&protocol conformance descriptor for TextModerationLMResponse, &type metadata for TextModerationLMResponse);
    atomic_store(result, (unint64_t *)&qword_257514FD8);
  }
  return result;
}

unint64_t sub_245C40064()
{
  unint64_t result;

  result = qword_257514FE0;
  if (!qword_257514FE0)
  {
    result = MEMORY[0x2495457B0](&protocol conformance descriptor for TextModerationLMClassifyTextResponse, &type metadata for TextModerationLMClassifyTextResponse);
    atomic_store(result, (unint64_t *)&qword_257514FE0);
  }
  return result;
}

unint64_t sub_245C400AC()
{
  unint64_t result;

  result = qword_257514FE8[0];
  if (!qword_257514FE8[0])
  {
    result = MEMORY[0x2495457B0](&protocol conformance descriptor for TextModerationLMClassifyTextPrediction, &type metadata for TextModerationLMClassifyTextPrediction);
    atomic_store(result, qword_257514FE8);
  }
  return result;
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t sub_245C40108()
{
  return 0;
}

ValueMetadata *type metadata accessor for TextModerationLMRequest()
{
  return &type metadata for TextModerationLMRequest;
}

_QWORD *initializeBufferWithCopyOfBuffer for TextModerationLMClassifyTextRequest(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *_s26SensitiveContentAnalysisML35TextModerationLMClassifyTextRequestVwca_0(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *assignWithTake for TextModerationLMClassifyTextRequest(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for TextModerationLMClassifyTextRequest()
{
  return &type metadata for TextModerationLMClassifyTextRequest;
}

ValueMetadata *type metadata accessor for TextModerationLMResponse()
{
  return &type metadata for TextModerationLMResponse;
}

uint64_t initializeBufferWithCopyOfBuffer for TextModerationLMClassifyTextResponse(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t _s26SensitiveContentAnalysisML36TextModerationLMClassifyTextResponseVwca_0(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for TextModerationLMClassifyTextResponse(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s26SensitiveContentAnalysisML35TextModerationLMClassifyTextRequestVwet_0(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t sub_245C402D4(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for TextModerationLMClassifyTextResponse()
{
  return &type metadata for TextModerationLMClassifyTextResponse;
}

uint64_t destroy for TextModerationLMClassifyTextPrediction()
{
  return swift_bridgeObjectRelease();
}

uint64_t _s26SensitiveContentAnalysisML38TextModerationLMClassifyTextPredictionVwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for TextModerationLMClassifyTextPrediction(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  return a1;
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for TextModerationLMClassifyTextPrediction(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  return a1;
}

uint64_t getEnumTagSinglePayload for TextModerationLMClassifyTextPrediction(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TextModerationLMClassifyTextPrediction(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for TextModerationLMClassifyTextPrediction()
{
  return &type metadata for TextModerationLMClassifyTextPrediction;
}

uint64_t sub_245C404B4()
{
  return type metadata accessor for TextModerationLMInferenceProvider();
}

uint64_t type metadata accessor for TextModerationLMInferenceProvider()
{
  uint64_t result;

  result = qword_257516B60;
  if (!qword_257516B60)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_245C404F8()
{
  uint64_t result;
  unint64_t v1;

  result = sub_245C8EBE4();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for TextModerationLMInferenceProvider()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of TextModerationLMInferenceProvider.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

_BYTE *__swift_memcpy1_1(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for TextModerationLMClassifyTextPrediction.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 2 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 2) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 2;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 2;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 2;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 3;
  v8 = v6 - 3;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for TextModerationLMClassifyTextPrediction.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_245C40678 + 4 * byte_245C93FD5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_245C406AC + 4 * byte_245C93FD0[v4]))();
}

uint64_t sub_245C406AC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_245C406B4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x245C406BCLL);
  return result;
}

uint64_t sub_245C406C8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x245C406D0);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_245C406D4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_245C406DC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_245C406E8(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_245C406F0(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for TextModerationLMClassifyTextPrediction.CodingKeys()
{
  return &type metadata for TextModerationLMClassifyTextPrediction.CodingKeys;
}

uint64_t getEnumTagSinglePayload for TextModerationLMClassifyTextResponse.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = v6 - 2;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for TextModerationLMClassifyTextResponse.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_245C407E4 + 4 * byte_245C93FDF[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_245C40818 + 4 * byte_245C93FDA[v4]))();
}

uint64_t sub_245C40818(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_245C40820(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x245C40828);
  return result;
}

uint64_t sub_245C40834(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x245C4083CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_245C40840(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_245C40848(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *sub_245C40854(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for TextModerationLMClassifyTextResponse.CodingKeys()
{
  return &type metadata for TextModerationLMClassifyTextResponse.CodingKeys;
}

ValueMetadata *type metadata accessor for TextModerationLMResponse.CodingKeys()
{
  return &type metadata for TextModerationLMResponse.CodingKeys;
}

ValueMetadata *type metadata accessor for TextModerationLMResponse.ClassifyTextCodingKeys()
{
  return &type metadata for TextModerationLMResponse.ClassifyTextCodingKeys;
}

ValueMetadata *type metadata accessor for TextModerationLMClassifyTextRequest.CodingKeys()
{
  return &type metadata for TextModerationLMClassifyTextRequest.CodingKeys;
}

ValueMetadata *type metadata accessor for TextModerationLMRequest.CodingKeys()
{
  return &type metadata for TextModerationLMRequest.CodingKeys;
}

uint64_t getEnumTagSinglePayload for SCMLVisualGenerationHandlingError(unsigned int *a1, int a2)
{
  int v2;
  int v3;

  if (!a2)
    return 0;
  if ((a2 + 1) >= 0x10000)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) < 0x100)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
    return *a1;
  if (v3 == 2)
    return *(unsigned __int16 *)a1;
  return *(unsigned __int8 *)a1;
}

uint64_t _s26SensitiveContentAnalysisML24TextModerationLMResponseO10CodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_245C4094C + 4 * byte_245C93FE4[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_245C4096C + 4 * byte_245C93FE9[v4]))();
}

_BYTE *sub_245C4094C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_245C4096C(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_245C40974(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_245C4097C(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_245C40984(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_245C4098C(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for TextModerationLMRequest.ClassifyTextCodingKeys()
{
  return &type metadata for TextModerationLMRequest.ClassifyTextCodingKeys;
}

unint64_t sub_245C409AC()
{
  unint64_t result;

  result = qword_257516C70[0];
  if (!qword_257516C70[0])
  {
    result = MEMORY[0x2495457B0](&unk_245C945E8, &type metadata for TextModerationLMRequest.ClassifyTextCodingKeys);
    atomic_store(result, qword_257516C70);
  }
  return result;
}

unint64_t sub_245C409F4()
{
  unint64_t result;

  result = qword_257516E80[0];
  if (!qword_257516E80[0])
  {
    result = MEMORY[0x2495457B0](&unk_245C946A0, &type metadata for TextModerationLMRequest.CodingKeys);
    atomic_store(result, qword_257516E80);
  }
  return result;
}

unint64_t sub_245C40A3C()
{
  unint64_t result;

  result = qword_257517090[0];
  if (!qword_257517090[0])
  {
    result = MEMORY[0x2495457B0](&unk_245C94758, &type metadata for TextModerationLMClassifyTextRequest.CodingKeys);
    atomic_store(result, qword_257517090);
  }
  return result;
}

unint64_t sub_245C40A84()
{
  unint64_t result;

  result = qword_2575172A0[0];
  if (!qword_2575172A0[0])
  {
    result = MEMORY[0x2495457B0](&unk_245C94810, &type metadata for TextModerationLMResponse.ClassifyTextCodingKeys);
    atomic_store(result, qword_2575172A0);
  }
  return result;
}

unint64_t sub_245C40ACC()
{
  unint64_t result;

  result = qword_2575174B0[0];
  if (!qword_2575174B0[0])
  {
    result = MEMORY[0x2495457B0](&unk_245C948C8, &type metadata for TextModerationLMResponse.CodingKeys);
    atomic_store(result, qword_2575174B0);
  }
  return result;
}

unint64_t sub_245C40B14()
{
  unint64_t result;

  result = qword_2575176C0[0];
  if (!qword_2575176C0[0])
  {
    result = MEMORY[0x2495457B0](&unk_245C94980, &type metadata for TextModerationLMClassifyTextResponse.CodingKeys);
    atomic_store(result, qword_2575176C0);
  }
  return result;
}

unint64_t sub_245C40B5C()
{
  unint64_t result;

  result = qword_2575178D0[0];
  if (!qword_2575178D0[0])
  {
    result = MEMORY[0x2495457B0](&unk_245C94A38, &type metadata for TextModerationLMClassifyTextPrediction.CodingKeys);
    atomic_store(result, qword_2575178D0);
  }
  return result;
}

unint64_t sub_245C40BA4()
{
  unint64_t result;

  result = qword_2575179E0;
  if (!qword_2575179E0)
  {
    result = MEMORY[0x2495457B0](&unk_245C949A8, &type metadata for TextModerationLMClassifyTextPrediction.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_2575179E0);
  }
  return result;
}

unint64_t sub_245C40BEC()
{
  unint64_t result;

  result = qword_2575179E8[0];
  if (!qword_2575179E8[0])
  {
    result = MEMORY[0x2495457B0](&unk_245C949D0, &type metadata for TextModerationLMClassifyTextPrediction.CodingKeys);
    atomic_store(result, qword_2575179E8);
  }
  return result;
}

unint64_t sub_245C40C34()
{
  unint64_t result;

  result = qword_257517A70;
  if (!qword_257517A70)
  {
    result = MEMORY[0x2495457B0](&unk_245C948F0, &type metadata for TextModerationLMClassifyTextResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257517A70);
  }
  return result;
}

unint64_t sub_245C40C7C()
{
  unint64_t result;

  result = qword_257517A78;
  if (!qword_257517A78)
  {
    result = MEMORY[0x2495457B0](&unk_245C94918, &type metadata for TextModerationLMClassifyTextResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257517A78);
  }
  return result;
}

unint64_t sub_245C40CC4()
{
  unint64_t result;

  result = qword_257517B00;
  if (!qword_257517B00)
  {
    result = MEMORY[0x2495457B0](&unk_245C94780, &type metadata for TextModerationLMResponse.ClassifyTextCodingKeys);
    atomic_store(result, (unint64_t *)&qword_257517B00);
  }
  return result;
}

unint64_t sub_245C40D0C()
{
  unint64_t result;

  result = qword_257517B08[0];
  if (!qword_257517B08[0])
  {
    result = MEMORY[0x2495457B0](&unk_245C947A8, &type metadata for TextModerationLMResponse.ClassifyTextCodingKeys);
    atomic_store(result, qword_257517B08);
  }
  return result;
}

unint64_t sub_245C40D54()
{
  unint64_t result;

  result = qword_257517B90;
  if (!qword_257517B90)
  {
    result = MEMORY[0x2495457B0](&unk_245C94838, &type metadata for TextModerationLMResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257517B90);
  }
  return result;
}

unint64_t sub_245C40D9C()
{
  unint64_t result;

  result = qword_257517B98[0];
  if (!qword_257517B98[0])
  {
    result = MEMORY[0x2495457B0](&unk_245C94860, &type metadata for TextModerationLMResponse.CodingKeys);
    atomic_store(result, qword_257517B98);
  }
  return result;
}

unint64_t sub_245C40DE4()
{
  unint64_t result;

  result = qword_257517C20;
  if (!qword_257517C20)
  {
    result = MEMORY[0x2495457B0](&unk_245C946C8, &type metadata for TextModerationLMClassifyTextRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257517C20);
  }
  return result;
}

unint64_t sub_245C40E2C()
{
  unint64_t result;

  result = qword_257517C28[0];
  if (!qword_257517C28[0])
  {
    result = MEMORY[0x2495457B0](&unk_245C946F0, &type metadata for TextModerationLMClassifyTextRequest.CodingKeys);
    atomic_store(result, qword_257517C28);
  }
  return result;
}

unint64_t sub_245C40E74()
{
  unint64_t result;

  result = qword_257517CB0;
  if (!qword_257517CB0)
  {
    result = MEMORY[0x2495457B0](&unk_245C94558, &type metadata for TextModerationLMRequest.ClassifyTextCodingKeys);
    atomic_store(result, (unint64_t *)&qword_257517CB0);
  }
  return result;
}

unint64_t sub_245C40EBC()
{
  unint64_t result;

  result = qword_257517CB8[0];
  if (!qword_257517CB8[0])
  {
    result = MEMORY[0x2495457B0](&unk_245C94580, &type metadata for TextModerationLMRequest.ClassifyTextCodingKeys);
    atomic_store(result, qword_257517CB8);
  }
  return result;
}

unint64_t sub_245C40F04()
{
  unint64_t result;

  result = qword_257517D40;
  if (!qword_257517D40)
  {
    result = MEMORY[0x2495457B0](&unk_245C94610, &type metadata for TextModerationLMRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_257517D40);
  }
  return result;
}

unint64_t sub_245C40F4C()
{
  unint64_t result;

  result = qword_257517D48[0];
  if (!qword_257517D48[0])
  {
    result = MEMORY[0x2495457B0](&unk_245C94638, &type metadata for TextModerationLMRequest.CodingKeys);
    atomic_store(result, qword_257517D48);
  }
  return result;
}

uint64_t sub_245C40F90(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;

  if (a1 == 1954047348 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    v4 = 0;
  }
  else
  {
    v3 = sub_245C8F118();
    swift_bridgeObjectRelease();
    v4 = v3 ^ 1;
  }
  return v4 & 1;
}

uint64_t sub_245C41004()
{
  return 1954047348;
}

uint64_t sub_245C41014(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;

  if (a1 == 12383 && a2 == 0xE200000000000000)
  {
    swift_bridgeObjectRelease();
    v4 = 0;
  }
  else
  {
    v3 = sub_245C8F118();
    swift_bridgeObjectRelease();
    v4 = v3 ^ 1;
  }
  return v4 & 1;
}

uint64_t sub_245C41080(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;

  if (a1 == 0x7966697373616C63 && a2 == 0xEC00000074786554)
  {
    swift_bridgeObjectRelease();
    v4 = 0;
  }
  else
  {
    v3 = sub_245C8F118();
    swift_bridgeObjectRelease();
    v4 = v3 ^ 1;
  }
  return v4 & 1;
}

uint64_t sub_245C41114(uint64_t a1, uint64_t a2)
{
  BOOL v3;
  char v6;

  v3 = a1 == 1701208435 && a2 == 0xE400000000000000;
  if (v3 || (sub_245C8F118() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6974636964657270 && a2 == 0xEB00000000736E6FLL)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_245C8F118();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_245C411FC(uint64_t a1, uint64_t a2)
{
  BOOL v3;
  char v6;

  v3 = a1 == 0x3150656D616ELL && a2 == 0xE600000000000000;
  if (v3 || (sub_245C8F118() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1701208435 && a2 == 0xE400000000000000 || (sub_245C8F118() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6C696261626F7270 && a2 == 0xEB00000000797469)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_245C8F118();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

unint64_t sub_245C41350()
{
  unint64_t result;

  result = qword_257515020;
  if (!qword_257515020)
  {
    result = MEMORY[0x2495457B0](&protocol conformance descriptor for TextModerationLMRequest, &type metadata for TextModerationLMRequest);
    atomic_store(result, (unint64_t *)&qword_257515020);
  }
  return result;
}

unint64_t sub_245C41394()
{
  unint64_t result;

  result = qword_257515030;
  if (!qword_257515030)
  {
    result = MEMORY[0x2495457B0](&protocol conformance descriptor for TextModerationLMResponse, &type metadata for TextModerationLMResponse);
    atomic_store(result, (unint64_t *)&qword_257515030);
  }
  return result;
}

uint64_t sub_245C413D8(uint64_t a1, unint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t sub_245C41410(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 24 * a1 + 32;
    v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_245C8F064();
  __break(1u);
  return result;
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  if ((*(_DWORD *)(*(_QWORD *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

uint64_t sub_245C4154C@<X0>(uint64_t *a1@<X8>)
{
  return sub_245C3FF6C(a1);
}

id SCMLTextModerationLMFromMM.__allocating_init(onBehalfOf:modelManagerServicesUseCaseID:)(uint64_t a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return SCMLTextModerationLMFromMM.init(onBehalfOf:modelManagerServicesUseCaseID:)(a1);
}

id SCMLTextModerationLMFromMM.init(onBehalfOf:modelManagerServicesUseCaseID:)(uint64_t a1)
{
  char *v1;
  uint64_t v2;
  uint64_t v3;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  id v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  objc_super v28;
  uint64_t v29[3];
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v3 = v2;
  v5 = &v1[OBJC_IVAR____TtC26SensitiveContentAnalysisML26SCMLTextModerationLMFromMM_logger];
  v6 = v1;
  sub_245C8EBD8();
  sub_245C8E95C();
  v8 = v30;
  v7 = v31;
  __swift_project_boxed_opaque_existential_1(v29, v30);
  v9 = MEMORY[0x249543ECC](v8, *(_QWORD *)(*(_QWORD *)(v7 + 8) + 8));
  v11 = v10;
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v29);
  if (a1 < 0)
  {
    v12 = objc_msgSend((id)objc_opt_self(), sel_processInfo);
    objc_msgSend(v12, sel_processIdentifier);

    v3 = v2;
  }
  swift_bridgeObjectRetain_n();
  v13 = sub_245C8EBCC();
  v14 = sub_245C8EE6C();
  if (os_log_type_enabled(v13, v14))
  {
    v26 = v6;
    v15 = (uint8_t *)swift_slowAlloc();
    v27 = v9;
    v16 = swift_slowAlloc();
    v29[0] = v16;
    *(_DWORD *)v15 = 136315138;
    swift_bridgeObjectRetain();
    v32 = sub_245C3801C(v27, v11, v29);
    sub_245C8EF08();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_245BFA000, v13, v14, "Begin prewarm TextModerationLM: %s", v15, 0xCu);
    swift_arrayDestroy();
    v17 = v16;
    v9 = v27;
    MEMORY[0x249545828](v17, -1, -1);
    v18 = v15;
    v6 = v26;
    MEMORY[0x249545828](v18, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  sub_245C8EB54();
  __swift_instantiateConcreteTypeFromMangledName(&qword_257514E20);
  v19 = swift_allocObject();
  *(_OWORD *)(v19 + 16) = xmmword_245C93E30;
  *(_QWORD *)(v19 + 32) = v9;
  *(_QWORD *)(v19 + 40) = v11;
  swift_bridgeObjectRetain();
  *(_QWORD *)&v6[OBJC_IVAR____TtC26SensitiveContentAnalysisML26SCMLTextModerationLMFromMM_session] = sub_245C8EB48();
  swift_retain();
  sub_245C8EB3C();
  if (v3)
  {
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    v20 = sub_245C8EBE4();
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v20 - 8) + 8))(v5, v20);

    type metadata accessor for SCMLTextModerationLMFromMM();
    return (id)swift_deallocPartialClassInstance();
  }
  else
  {
    swift_release();
    swift_bridgeObjectRetain();
    v22 = sub_245C8EBCC();
    v23 = sub_245C8EE6C();
    if (os_log_type_enabled(v22, v23))
    {
      v24 = (uint8_t *)swift_slowAlloc();
      v25 = swift_slowAlloc();
      v29[0] = v25;
      *(_DWORD *)v24 = 136315138;
      swift_bridgeObjectRetain();
      v32 = sub_245C3801C(v9, v11, v29);
      sub_245C8EF08();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_245BFA000, v22, v23, "End prewarm TextModerationLM: %s", v24, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x249545828](v25, -1, -1);
      MEMORY[0x249545828](v24, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    v28.receiver = v6;
    v28.super_class = (Class)type metadata accessor for SCMLTextModerationLMFromMM();
    return objc_msgSendSuper2(&v28, sel_init);
  }
}

uint64_t type metadata accessor for SCMLTextModerationLMFromMM()
{
  uint64_t result;

  result = qword_257517DD8;
  if (!qword_257517DD8)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_245C41B68(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v3[7] = a2;
  v3[8] = v2;
  v3[6] = a1;
  v4 = sub_245C8EB30();
  v3[9] = v4;
  v3[10] = *(_QWORD *)(v4 - 8);
  v3[11] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_245C41BCC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  Swift::String v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  _QWORD *v11;
  uint64_t v13;
  uint64_t v14;

  v1 = v0[6];
  v2 = v0[7];
  type metadata accessor for SCMLSafetyGuardrail();
  v3._countAndFlagsBits = static SCMLSafetyGuardrail.trimEmojiPrefix(text:)(v1, v2);
  TextModerationLMClassifyTextRequest.init(text:)(v3);
  sub_245C8E8D8();
  swift_allocObject();
  sub_245C8E8CC();
  v0[2] = v13;
  v0[3] = v14;
  sub_245C42350();
  v4 = sub_245C8E8C0();
  v0[12] = v4;
  v0[13] = v5;
  v6 = v4;
  v7 = v5;
  swift_release();
  swift_bridgeObjectRelease();
  swift_retain();
  sub_245C42394(v6, v7);
  sub_245C8EB24();
  v0[14] = OBJC_IVAR____TtC26SensitiveContentAnalysisML26SCMLTextModerationLMFromMM_logger;
  v8 = sub_245C8EBCC();
  v9 = sub_245C8EE54();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v10 = 0;
    _os_log_impl(&dword_245BFA000, v8, v9, "Begin MM execute", v10, 2u);
    MEMORY[0x249545828](v10, -1, -1);
  }

  v11 = (_QWORD *)swift_task_alloc();
  v0[15] = v11;
  *v11 = v0;
  v11[1] = sub_245C41DD0;
  return sub_245C8EB18();
}

uint64_t sub_245C41DD0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  v4 = (_QWORD *)*v3;
  v4[16] = a1;
  v4[17] = a2;
  v4[18] = v2;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_245C41E40()
{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  id v14;
  unsigned __int8 v15[8];
  uint64_t v16;

  v1 = sub_245C8EBCC();
  v2 = sub_245C8EE54();
  if (os_log_type_enabled(v1, v2))
  {
    v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v3 = 0;
    _os_log_impl(&dword_245BFA000, v1, v2, "End MM execute", v3, 2u);
    MEMORY[0x249545828](v3, -1, -1);
  }
  v4 = *(_QWORD *)(v0 + 144);

  sub_245C8E8B4();
  swift_allocObject();
  sub_245C8E8A8();
  sub_245C4241C();
  sub_245C8E89C();
  v6 = *(_QWORD *)(v0 + 128);
  v5 = *(_QWORD *)(v0 + 136);
  v8 = *(_QWORD *)(v0 + 96);
  v7 = *(_QWORD *)(v0 + 104);
  v10 = *(_QWORD *)(v0 + 80);
  v9 = *(_QWORD *)(v0 + 88);
  v11 = *(_QWORD *)(v0 + 72);
  if (v4)
  {
    (*(void (**)(_QWORD, _QWORD))(v10 + 8))(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 72));
    sub_245C423D8(v8, v7);
    swift_release();
    sub_245C423D8(v6, v5);
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    swift_release();
    v13 = *(_QWORD *)(v0 + 40);
    v15[0] = *(_BYTE *)(v0 + 32);
    v16 = v13;
    swift_bridgeObjectRetain();
    v14 = sub_245C42460(v15);
    sub_245C423D8(v6, v5);
    swift_bridgeObjectRelease();
    sub_245C423D8(v8, v7);
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    return (*(uint64_t (**)(id))(v0 + 8))(v14);
  }
}

uint64_t sub_245C4203C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v0 + 80);
  v1 = *(_QWORD *)(v0 + 88);
  v3 = *(_QWORD *)(v0 + 72);
  sub_245C423D8(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_245C421C8(int a1, void *aBlock, void *a3)
{
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  v5 = sub_245C8ED10();
  v7 = v6;
  v3[4] = v6;
  a3;
  v8 = (_QWORD *)swift_task_alloc();
  v3[5] = v8;
  *v8 = v3;
  v8[1] = sub_245C37708;
  return sub_245C41B68(v5, v7);
}

id SCMLTextModerationLMFromMM.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void SCMLTextModerationLMFromMM.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id SCMLTextModerationLMFromMM.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SCMLTextModerationLMFromMM();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

unint64_t sub_245C42350()
{
  unint64_t result;

  result = qword_257515060;
  if (!qword_257515060)
  {
    result = MEMORY[0x2495457B0](&protocol conformance descriptor for TextModerationLMRequest, &type metadata for TextModerationLMRequest);
    atomic_store(result, (unint64_t *)&qword_257515060);
  }
  return result;
}

uint64_t sub_245C42394(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_retain();
  }
  return swift_retain();
}

uint64_t sub_245C423D8(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release();
  }
  return swift_release();
}

unint64_t sub_245C4241C()
{
  unint64_t result;

  result = qword_257515068;
  if (!qword_257515068)
  {
    result = MEMORY[0x2495457B0](&protocol conformance descriptor for TextModerationLMResponse, &type metadata for TextModerationLMResponse);
    atomic_store(result, (unint64_t *)&qword_257515068);
  }
  return result;
}

id sub_245C42460(unsigned __int8 *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  uint64_t v5;
  int v6;
  id v7;
  void *v8;
  double v9;
  id v10;
  void *v11;
  uint64_t v13;

  v1 = *a1;
  v2 = *((_QWORD *)a1 + 1);
  v13 = MEMORY[0x24BEE4AF8];
  v3 = *(_QWORD *)(v2 + 16);
  if (v3)
  {
    swift_bridgeObjectRetain();
    v4 = (int *)(v2 + 52);
    do
    {
      v5 = *((unsigned __int8 *)v4 - 4);
      v6 = *v4;
      v7 = objc_allocWithZone((Class)SCMLTextModerationLMPrediction);
      swift_bridgeObjectRetain();
      v8 = (void *)sub_245C8ED04();
      LODWORD(v9) = v6;
      objc_msgSend(v7, sel_initWithNameP1_safe_probability_, v8, v5, v9);
      swift_bridgeObjectRelease();

      MEMORY[0x249544340]();
      if (*(_QWORD *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        sub_245C8EE0C();
      sub_245C8EE24();
      sub_245C8EE00();
      v4 += 6;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease();
  }
  v10 = objc_msgSend(objc_allocWithZone((Class)SCMLTextModerationLMResult), sel_init);
  objc_msgSend(v10, sel_setSafe_, v1);
  sub_245C427D8();
  v11 = (void *)sub_245C8EDE8();
  swift_bridgeObjectRelease();
  objc_msgSend(v10, sel_setPredictions_, v11);

  return v10;
}

uint64_t sub_245C42608()
{
  return type metadata accessor for SCMLTextModerationLMFromMM();
}

uint64_t sub_245C42610()
{
  uint64_t result;
  unint64_t v1;

  result = sub_245C8EBE4();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for SCMLTextModerationLMFromMM()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SCMLTextModerationLMFromMM.__allocating_init(onBehalfOf:modelManagerServicesUseCaseID:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t dispatch thunk of SCMLTextModerationLMFromMM.predict(text:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  int *v6;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t, uint64_t);

  v6 = *(int **)((*MEMORY[0x24BEE4EA0] & *v2) + 0x90);
  v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)v6 + *v6);
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_245C3A7C8;
  return v9(a1, a2);
}

uint64_t sub_245C42730()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 24));
  return swift_deallocObject();
}

uint64_t sub_245C42764()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  _QWORD *v5;

  v2 = v0[2];
  v3 = (void *)v0[3];
  v4 = (void *)v0[4];
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_245C35130;
  return ((uint64_t (*)(int, void *, void *))((char *)&dword_257515078 + dword_257515078))(v2, v3, v4);
}

unint64_t sub_245C427D8()
{
  unint64_t result;

  result = qword_257515038;
  if (!qword_257515038)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_257515038);
  }
  return result;
}

uint64_t sub_245C4287C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC26SensitiveContentAnalysisML28SCMLPeopleDetectionAttribute_term);
  swift_beginAccess();
  v2 = *v1;
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t sub_245C42938(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)(v2 + OBJC_IVAR____TtC26SensitiveContentAnalysisML28SCMLPeopleDetectionAttribute_term);
  swift_beginAccess();
  *v5 = a1;
  v5[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t sub_245C42994@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **a1) + 0x60))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_245C429D4(uint64_t *a1, _QWORD **a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);

  v2 = *a1;
  v3 = a1[1];
  v4 = *(uint64_t (**)(uint64_t, uint64_t))((*MEMORY[0x24BEE4EA0] & **a2) + 0x68);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t (*sub_245C42A28())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_245C42AB0()
{
  uint64_t v0;
  unsigned int *v1;

  v1 = (unsigned int *)(v0 + OBJC_IVAR____TtC26SensitiveContentAnalysisML28SCMLPeopleDetectionAttribute_gender);
  swift_beginAccess();
  return *v1;
}

uint64_t sub_245C42B3C(int a1)
{
  uint64_t v1;
  _DWORD *v3;
  uint64_t result;

  v3 = (_DWORD *)(v1 + OBJC_IVAR____TtC26SensitiveContentAnalysisML28SCMLPeopleDetectionAttribute_gender);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t sub_245C42B84@<X0>(_QWORD **a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **a1) + 0x78))();
  *a2 = result;
  return result;
}

uint64_t sub_245C42BC4(unsigned int *a1, _QWORD **a2)
{
  return (*(uint64_t (**)(_QWORD))((*MEMORY[0x24BEE4EA0] & **a2) + 0x80))(*a1);
}

uint64_t (*sub_245C42C00())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

id SCMLPeopleDetectionAttribute.__allocating_init(term:gender:)(uint64_t a1, uint64_t a2, int a3)
{
  objc_class *v3;
  char *v7;
  char *v8;
  objc_super v10;

  v7 = (char *)objc_allocWithZone(v3);
  v8 = &v7[OBJC_IVAR____TtC26SensitiveContentAnalysisML28SCMLPeopleDetectionAttribute_term];
  *(_QWORD *)v8 = a1;
  *((_QWORD *)v8 + 1) = a2;
  *(_DWORD *)&v7[OBJC_IVAR____TtC26SensitiveContentAnalysisML28SCMLPeopleDetectionAttribute_gender] = a3;
  v10.receiver = v7;
  v10.super_class = v3;
  return objc_msgSendSuper2(&v10, sel_init);
}

id SCMLPeopleDetectionAttribute.init(term:gender:)(uint64_t a1, uint64_t a2, int a3)
{
  char *v3;
  char *v4;
  objc_super v6;

  v4 = &v3[OBJC_IVAR____TtC26SensitiveContentAnalysisML28SCMLPeopleDetectionAttribute_term];
  *(_QWORD *)v4 = a1;
  *((_QWORD *)v4 + 1) = a2;
  *(_DWORD *)&v3[OBJC_IVAR____TtC26SensitiveContentAnalysisML28SCMLPeopleDetectionAttribute_gender] = a3;
  v6.receiver = v3;
  v6.super_class = (Class)type metadata accessor for SCMLPeopleDetectionAttribute();
  return objc_msgSendSuper2(&v6, sel_init);
}

uint64_t type metadata accessor for SCMLPeopleDetectionAttribute()
{
  return objc_opt_self();
}

BOOL sub_245C42D1C(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;
  uint64_t v9;
  int v11;
  int v12;
  _QWORD *v13;
  _BYTE v14[24];
  uint64_t v15;

  sub_245C3AC18(a1, (uint64_t)v14, &qword_2575150A8);
  if (!v15)
  {
    sub_245C3AB78((uint64_t)v14, &qword_2575150A8);
    return 0;
  }
  type metadata accessor for SCMLPeopleDetectionAttribute();
  if ((swift_dynamicCast() & 1) == 0)
    return 0;
  v2 = (_QWORD *)MEMORY[0x24BEE4EA0];
  v3 = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v1) + 0x60))();
  v5 = v4;
  if (v3 == (*(uint64_t (**)(void))((*v2 & *v13) + 0x60))() && v5 == v6)
  {
    v9 = swift_bridgeObjectRelease_n();
  }
  else
  {
    v8 = sub_245C8F118();
    swift_bridgeObjectRelease();
    v9 = swift_bridgeObjectRelease();
    if ((v8 & 1) == 0)
    {

      return 0;
    }
  }
  v11 = (*(uint64_t (**)(uint64_t))((*v2 & *v1) + 0x78))(v9);
  v12 = (*(uint64_t (**)(void))((*v2 & *v13) + 0x78))();

  return v11 == v12;
}

void SCMLPeopleDetectionAttribute.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id SCMLPeopleDetectionAttribute.__deallocating_deinit(uint64_t a1)
{
  return sub_245C37B80(a1, type metadata accessor for SCMLPeopleDetectionAttribute);
}

BOOL sub_245C42F0C(_QWORD **a1, _QWORD **a2)
{
  return _s26SensitiveContentAnalysisML28SCMLPeopleDetectionAttributeC1loiySbAC_ACtFZ_0(*a1, *a2);
}

uint64_t sub_245C42F68()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC26SensitiveContentAnalysisML20SCMLPersonAttributes_specific);
  swift_beginAccess();
  return *v1;
}

uint64_t sub_245C42FF4(char a1)
{
  uint64_t v1;
  _BYTE *v3;
  uint64_t result;

  v3 = (_BYTE *)(v1 + OBJC_IVAR____TtC26SensitiveContentAnalysisML20SCMLPersonAttributes_specific);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t sub_245C4303C@<X0>(_QWORD **a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **a1) + 0x98))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_245C43080(unsigned __int8 *a1, _QWORD **a2)
{
  return (*(uint64_t (**)(_QWORD))((*MEMORY[0x24BEE4EA0] & **a2) + 0xA0))(*a1);
}

uint64_t (*sub_245C430BC())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_245C43144()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC26SensitiveContentAnalysisML20SCMLPersonAttributes_isGroup);
  swift_beginAccess();
  return *v1;
}

uint64_t sub_245C431D0(char a1)
{
  uint64_t v1;
  _BYTE *v3;
  uint64_t result;

  v3 = (_BYTE *)(v1 + OBJC_IVAR____TtC26SensitiveContentAnalysisML20SCMLPersonAttributes_isGroup);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t sub_245C43218@<X0>(_QWORD **a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **a1) + 0xB0))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_245C4325C(unsigned __int8 *a1, _QWORD **a2)
{
  return (*(uint64_t (**)(_QWORD))((*MEMORY[0x24BEE4EA0] & **a2) + 0xB8))(*a1);
}

uint64_t (*sub_245C43298())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_245C43320()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC26SensitiveContentAnalysisML20SCMLPersonAttributes_hasAge);
  swift_beginAccess();
  return *v1;
}

uint64_t sub_245C433AC(char a1)
{
  uint64_t v1;
  _BYTE *v3;
  uint64_t result;

  v3 = (_BYTE *)(v1 + OBJC_IVAR____TtC26SensitiveContentAnalysisML20SCMLPersonAttributes_hasAge);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t sub_245C433F4@<X0>(_QWORD **a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **a1) + 0xC8))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_245C43438(unsigned __int8 *a1, _QWORD **a2)
{
  return (*(uint64_t (**)(_QWORD))((*MEMORY[0x24BEE4EA0] & **a2) + 0xD0))(*a1);
}

uint64_t (*sub_245C43474())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_245C434FC()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC26SensitiveContentAnalysisML20SCMLPersonAttributes_hasGender);
  swift_beginAccess();
  return *v1;
}

uint64_t sub_245C43588(char a1)
{
  uint64_t v1;
  _BYTE *v3;
  uint64_t result;

  v3 = (_BYTE *)(v1 + OBJC_IVAR____TtC26SensitiveContentAnalysisML20SCMLPersonAttributes_hasGender);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t sub_245C435D0@<X0>(_QWORD **a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **a1) + 0xE0))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_245C43614(unsigned __int8 *a1, _QWORD **a2)
{
  return (*(uint64_t (**)(_QWORD))((*MEMORY[0x24BEE4EA0] & **a2) + 0xE8))(*a1);
}

uint64_t (*sub_245C43650())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_245C436D8()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC26SensitiveContentAnalysisML20SCMLPersonAttributes_hasEthnicity);
  swift_beginAccess();
  return *v1;
}

uint64_t sub_245C43764(char a1)
{
  uint64_t v1;
  _BYTE *v3;
  uint64_t result;

  v3 = (_BYTE *)(v1 + OBJC_IVAR____TtC26SensitiveContentAnalysisML20SCMLPersonAttributes_hasEthnicity);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t sub_245C437AC@<X0>(_QWORD **a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **a1) + 0xF8))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_245C437F0(unsigned __int8 *a1, _QWORD **a2)
{
  return (*(uint64_t (**)(_QWORD))((*MEMORY[0x24BEE4EA0] & **a2) + 0x100))(*a1);
}

uint64_t (*sub_245C4382C())()
{
  swift_beginAccess();
  return j__swift_endAccess;
}

uint64_t sub_245C43880()
{
  return sub_245C43BB0();
}

uint64_t sub_245C43898(uint64_t a1)
{
  return sub_245C43C84(a1, &OBJC_IVAR____TtC26SensitiveContentAnalysisML20SCMLPersonAttributes_age);
}

uint64_t sub_245C438A4@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **a1) + 0x110))();
  *a2 = result;
  return result;
}

uint64_t sub_245C438E4(uint64_t a1, _QWORD **a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & **a2) + 0x118);
  v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t (*sub_245C43924())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_245C439E0()
{
  return sub_245C43BB0();
}

uint64_t sub_245C43A58(uint64_t a1)
{
  return sub_245C43C84(a1, &OBJC_IVAR____TtC26SensitiveContentAnalysisML20SCMLPersonAttributes_gender);
}

uint64_t sub_245C43A64@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **a1) + 0x128))();
  *a2 = result;
  return result;
}

uint64_t sub_245C43AA4(uint64_t a1, _QWORD **a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & **a2) + 0x130);
  v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t (*sub_245C43AE4())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

id sub_245C43B34(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *v3;
  void *v4;

  v3 = (_QWORD *)(a1 + *a3);
  swift_beginAccess();
  if (!*v3)
    return 0;
  swift_bridgeObjectRetain();
  v4 = (void *)sub_245C8EDE8();
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_245C43BA4()
{
  return sub_245C43BB0();
}

uint64_t sub_245C43BB0()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t sub_245C43C00(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v6;
  uint64_t *v7;

  if (a3)
    v6 = sub_245C8EDF4();
  else
    v6 = 0;
  v7 = (uint64_t *)(a1 + *a4);
  swift_beginAccess();
  *v7 = v6;
  return swift_bridgeObjectRelease();
}

uint64_t sub_245C43C78(uint64_t a1)
{
  return sub_245C43C84(a1, &OBJC_IVAR____TtC26SensitiveContentAnalysisML20SCMLPersonAttributes_ethnicity);
}

uint64_t sub_245C43C84(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *v4;

  v4 = (_QWORD *)(v2 + *a2);
  swift_beginAccess();
  *v4 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t sub_245C43CD0@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **a1) + 0x140))();
  *a2 = result;
  return result;
}

uint64_t sub_245C43D10(uint64_t a1, _QWORD **a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & **a2) + 0x148);
  v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t (*sub_245C43D50())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_245C43DD8()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(v0
                         + OBJC_IVAR____TtC26SensitiveContentAnalysisML20SCMLPersonAttributes_hasImplicitCategoryRequiringPersonalization);
  swift_beginAccess();
  return *v1;
}

uint64_t sub_245C43E64(char a1)
{
  uint64_t v1;
  _BYTE *v3;
  uint64_t result;

  v3 = (_BYTE *)(v1
               + OBJC_IVAR____TtC26SensitiveContentAnalysisML20SCMLPersonAttributes_hasImplicitCategoryRequiringPersonalization);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t sub_245C43EAC@<X0>(_QWORD **a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **a1) + 0x158))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_245C43EF0(unsigned __int8 *a1, _QWORD **a2)
{
  return (*(uint64_t (**)(_QWORD))((*MEMORY[0x24BEE4EA0] & **a2) + 0x160))(*a1);
}

uint64_t (*sub_245C43F2C())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

char *SCMLPersonAttributes.__allocating_init(specific:isGroup:hasAge:hasGender:hasEthnicity:age:gender:ethnicity:hasImplicitCategoryRequiringPersonalization:)(char a1, char a2, char a3, char a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  objc_class *v9;
  id v18;

  v18 = objc_allocWithZone(v9);
  return SCMLPersonAttributes.init(specific:isGroup:hasAge:hasGender:hasEthnicity:age:gender:ethnicity:hasImplicitCategoryRequiringPersonalization:)(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

char *SCMLPersonAttributes.init(specific:isGroup:hasAge:hasGender:hasEthnicity:age:gender:ethnicity:hasImplicitCategoryRequiringPersonalization:)(char a1, char a2, char a3, char a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  _BYTE *v9;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  objc_super v29;

  v9[OBJC_IVAR____TtC26SensitiveContentAnalysisML20SCMLPersonAttributes_specific] = 0;
  v9[OBJC_IVAR____TtC26SensitiveContentAnalysisML20SCMLPersonAttributes_isGroup] = 0;
  v9[OBJC_IVAR____TtC26SensitiveContentAnalysisML20SCMLPersonAttributes_hasAge] = 0;
  v9[OBJC_IVAR____TtC26SensitiveContentAnalysisML20SCMLPersonAttributes_hasGender] = 0;
  v9[OBJC_IVAR____TtC26SensitiveContentAnalysisML20SCMLPersonAttributes_hasEthnicity] = 0;
  *(_QWORD *)&v9[OBJC_IVAR____TtC26SensitiveContentAnalysisML20SCMLPersonAttributes_age] = 0;
  *(_QWORD *)&v9[OBJC_IVAR____TtC26SensitiveContentAnalysisML20SCMLPersonAttributes_gender] = 0;
  *(_QWORD *)&v9[OBJC_IVAR____TtC26SensitiveContentAnalysisML20SCMLPersonAttributes_ethnicity] = 0;
  v9[OBJC_IVAR____TtC26SensitiveContentAnalysisML20SCMLPersonAttributes_hasImplicitCategoryRequiringPersonalization] = 0;
  v29.receiver = v9;
  v29.super_class = (Class)type metadata accessor for SCMLPersonAttributes();
  v14 = (char *)objc_msgSendSuper2(&v29, sel_init);
  v15 = &v14[OBJC_IVAR____TtC26SensitiveContentAnalysisML20SCMLPersonAttributes_specific];
  swift_beginAccess();
  *v15 = a1;
  v16 = &v14[OBJC_IVAR____TtC26SensitiveContentAnalysisML20SCMLPersonAttributes_isGroup];
  swift_beginAccess();
  *v16 = a2;
  v17 = &v14[OBJC_IVAR____TtC26SensitiveContentAnalysisML20SCMLPersonAttributes_hasAge];
  swift_beginAccess();
  *v17 = a3;
  v18 = &v14[OBJC_IVAR____TtC26SensitiveContentAnalysisML20SCMLPersonAttributes_hasGender];
  swift_beginAccess();
  *v18 = a4;
  v19 = &v14[OBJC_IVAR____TtC26SensitiveContentAnalysisML20SCMLPersonAttributes_hasEthnicity];
  swift_beginAccess();
  *v19 = a5;
  v20 = &v14[OBJC_IVAR____TtC26SensitiveContentAnalysisML20SCMLPersonAttributes_age];
  swift_beginAccess();
  *(_QWORD *)v20 = a6;
  swift_bridgeObjectRelease();
  v21 = &v14[OBJC_IVAR____TtC26SensitiveContentAnalysisML20SCMLPersonAttributes_gender];
  swift_beginAccess();
  *(_QWORD *)v21 = a7;
  swift_bridgeObjectRelease();
  v22 = &v14[OBJC_IVAR____TtC26SensitiveContentAnalysisML20SCMLPersonAttributes_ethnicity];
  swift_beginAccess();
  *(_QWORD *)v22 = a8;
  swift_bridgeObjectRelease();
  v23 = &v14[OBJC_IVAR____TtC26SensitiveContentAnalysisML20SCMLPersonAttributes_hasImplicitCategoryRequiringPersonalization];
  swift_beginAccess();
  *v23 = a9;
  return v14;
}

id sub_245C44258(unint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id result;
  void *v12;
  id v13;
  void *v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  id v19;
  void *v20;
  id v21;
  void *v22;
  unint64_t v24;
  unint64_t v25;
  void **v26;
  void *v27;
  void *v28;
  void *v29;
  uint64_t v30;
  unint64_t v31;

  v2 = a2;
  v3 = a1;
  v4 = a1 >> 62;
  if (!(a1 >> 62))
  {
    v5 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    v6 = a2 >> 62;
    if (!(a2 >> 62))
      goto LABEL_3;
LABEL_47:
    swift_bridgeObjectRetain();
    v30 = sub_245C8F034();
    swift_bridgeObjectRelease();
    if (v5 == v30)
      goto LABEL_4;
LABEL_48:
    LOBYTE(v5) = 0;
    return (id)(v5 & 1);
  }
  swift_bridgeObjectRetain();
  v5 = sub_245C8F034();
  swift_bridgeObjectRelease();
  v6 = (unint64_t)v2 >> 62;
  if ((unint64_t)v2 >> 62)
    goto LABEL_47;
LABEL_3:
  if (v5 != *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_48;
LABEL_4:
  if (!v5)
    goto LABEL_37;
  v7 = v3 & 0xFFFFFFFFFFFFFF8;
  if (v3 < 0)
    v7 = v3;
  if (!v4)
    v7 = (v3 & 0xFFFFFFFFFFFFFF8) + 32;
  v8 = v2 & 0xFFFFFFFFFFFFFF8;
  v9 = (v2 & 0xFFFFFFFFFFFFFF8) + 32;
  if (v2 < 0)
    v10 = v2;
  else
    v10 = v2 & 0xFFFFFFFFFFFFFF8;
  if (v6)
    v9 = v10;
  if (v7 == v9)
  {
LABEL_37:
    LOBYTE(v5) = 1;
    return (id)(v5 & 1);
  }
  if ((v5 & 0x8000000000000000) != 0)
    goto LABEL_54;
  v31 = v3 & 0xC000000000000001;
  if ((v3 & 0xC000000000000001) != 0)
    goto LABEL_55;
  for (result = *(id *)(v3 + 32); ; result = (id)MEMORY[0x249544508](0, v3))
  {
    v12 = result;
    if ((v2 & 0xC000000000000001) == 0)
      break;
    v13 = (id)MEMORY[0x249544508](0, v2);
LABEL_21:
    v14 = v13;
    type metadata accessor for SCMLPeopleDetectionAttribute();
    v15 = sub_245C8EEC0();

    if ((v15 & 1) == 0)
      goto LABEL_48;
    v16 = v5 - 1;
    if (v5 == 1)
      return (id)(v5 & 1);
    if (((v2 | v3) & 0xC000000000000001) != 0)
    {
      v17 = 0;
      v18 = v5 - 2;
      while (v16 != v17)
      {
        v5 = v17 + 1;
        if (v31)
          v19 = (id)MEMORY[0x249544508](v17 + 1, v3);
        else
          v19 = *(id *)(v3 + 40 + 8 * v17);
        v20 = v19;
        if ((v2 & 0xC000000000000001) != 0)
        {
          v21 = (id)MEMORY[0x249544508](v17 + 1, v2);
        }
        else
        {
          if (v5 >= *(_QWORD *)(v8 + 16))
            goto LABEL_53;
          v21 = *(id *)(v2 + 40 + 8 * v17);
        }
        v22 = v21;
        v5 = sub_245C8EEC0();

        if ((v5 & 1) != 0 && v18 != v17++)
          continue;
        return (id)(v5 & 1);
      }
      __break(1u);
    }
    else
    {
      v24 = *(_QWORD *)(v8 + 16);
      if (v24 <= 1)
        v24 = 1;
      v25 = v24 - 1;
      v26 = (void **)(v3 + 40);
      v8 = v2 + 40;
      while (v16)
      {
        if (!v25)
          goto LABEL_52;
        v28 = *v26++;
        v27 = v28;
        v29 = *(void **)v8;
        v8 += 8;
        v2 = v27;
        v3 = v29;
        v5 = sub_245C8EEC0();

        if ((v5 & 1) != 0)
        {
          --v25;
          if (--v16)
            continue;
        }
        return (id)(v5 & 1);
      }
    }
    __break(1u);
LABEL_52:
    __break(1u);
LABEL_53:
    __break(1u);
LABEL_54:
    __break(1u);
LABEL_55:
    ;
  }
  if (*(_QWORD *)(v8 + 16))
  {
    v13 = *(id *)(v2 + 32);
    goto LABEL_21;
  }
  __break(1u);
  return result;
}

uint64_t sub_245C44538(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  BOOL v5;
  char v6;
  uint64_t result;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *i;
  BOOL v11;

  v2 = a1[2];
  if (v2 != a2[2])
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  v5 = a1[4] == a2[4] && a1[5] == a2[5];
  if (v5 || (v6 = sub_245C8F118(), result = 0, (v6 & 1) != 0))
  {
    v8 = v2 - 1;
    if (!v8)
      return 1;
    v9 = a1 + 7;
    for (i = a2 + 7; ; i += 2)
    {
      v11 = *(v9 - 1) == *(i - 1) && *v9 == *i;
      if (!v11 && (sub_245C8F118() & 1) == 0)
        break;
      v9 += 2;
      if (!--v8)
        return 1;
    }
    return 0;
  }
  return result;
}

uint64_t sub_245C445FC(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  _QWORD *v8;
  _QWORD *v9;
  BOOL v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  BOOL v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  BOOL v18;
  uint64_t v19;
  char v20;
  char v21;
  char v22;
  _QWORD *v24;
  _BYTE v25[24];
  uint64_t v26;

  sub_245C3AC18(a1, (uint64_t)v25, &qword_2575150A8);
  if (!v26)
  {
    sub_245C3AB78((uint64_t)v25, &qword_2575150A8);
    goto LABEL_14;
  }
  type metadata accessor for SCMLPersonAttributes();
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_14:
    v22 = 0;
    return v22 & 1;
  }
  v2 = (_QWORD *)MEMORY[0x24BEE4EA0];
  v3 = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v1) + 0x98))();
  if (((v3 ^ (*(unsigned int (**)(void))((*v2 & *v24) + 0x98))()) & 1) != 0)
    goto LABEL_13;
  v4 = (*(uint64_t (**)(void))((*v2 & *v1) + 0xB0))();
  if (((v4 ^ (*(unsigned int (**)(void))((*v2 & *v24) + 0xB0))()) & 1) != 0)
    goto LABEL_13;
  v5 = (*(uint64_t (**)(void))((*v2 & *v1) + 0xC8))();
  if (((v5 ^ (*(unsigned int (**)(void))((*v2 & *v24) + 0xC8))()) & 1) != 0)
    goto LABEL_13;
  v6 = (*(uint64_t (**)(void))((*v2 & *v1) + 0xE0))();
  if (((v6 ^ (*(unsigned int (**)(void))((*v2 & *v24) + 0xE0))()) & 1) != 0)
    goto LABEL_13;
  v7 = (*(uint64_t (**)(void))((*v2 & *v1) + 0xF8))();
  if (((v7 ^ (*(unsigned int (**)(void))((*v2 & *v24) + 0xF8))()) & 1) != 0)
    goto LABEL_13;
  v8 = (_QWORD *)(*(uint64_t (**)(void))((*v2 & *v1) + 0x110))();
  v9 = (_QWORD *)(*(uint64_t (**)(void))((*v2 & *v24) + 0x110))();
  v10 = sub_245C4BE7C(v8, v9);
  swift_bridgeObjectRelease();
  v11 = swift_bridgeObjectRelease();
  if (!v10)
    goto LABEL_13;
  v12 = (*(uint64_t (**)(uint64_t))((*v2 & *v1) + 0x128))(v11);
  v13 = (*(uint64_t (**)(void))((*v2 & *v24) + 0x128))();
  v14 = sub_245C4BF48(v12, v13);
  swift_bridgeObjectRelease();
  v15 = swift_bridgeObjectRelease();
  if (!v14
    || (v16 = (_QWORD *)(*(uint64_t (**)(uint64_t))((*v2 & *v1) + 0x140))(v15),
        v17 = (_QWORD *)(*(uint64_t (**)(void))((*v2 & *v24) + 0x140))(),
        v18 = sub_245C4BE7C(v16, v17),
        swift_bridgeObjectRelease(),
        v19 = swift_bridgeObjectRelease(),
        !v18))
  {
LABEL_13:

    goto LABEL_14;
  }
  v20 = (*(uint64_t (**)(uint64_t))((*v2 & *v1) + 0x158))(v19);
  v21 = (*(uint64_t (**)(void))((*v2 & *v24) + 0x158))();

  v22 = v20 ^ v21 ^ 1;
  return v22 & 1;
}

uint64_t sub_245C44930(void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_OWORD *))
{
  id v6;
  id v7;
  char v8;
  _OWORD v10[2];

  if (a3)
  {
    v6 = a1;
    swift_unknownObjectRetain();
    sub_245C8EF5C();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v10, 0, sizeof(v10));
    v7 = a1;
  }
  v8 = a4(v10);

  sub_245C3AB78((uint64_t)v10, &qword_2575150A8);
  return v8 & 1;
}

void SCMLPersonAttributes.__allocating_init(_:)(uint64_t a1)
{
  uint64_t v1;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  BOOL v32;
  char v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  objc_class *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  unint64_t v47;
  char v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  _QWORD *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  char *v58;
  char *v59;
  char *v60;
  uint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  char *v65;
  char *v66;
  char *v67;
  char *v68;
  uint64_t v69;
  int64_t v70;
  int64_t v71;
  objc_super v72;
  __int128 v73;
  _OWORD v74[2];
  uint64_t v75;
  uint64_t v76;
  __int128 v77;
  uint64_t v78;

  v3 = (char *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _BYTE))(v1 + 368))(0, 0, 0, 0, 0, 0, 0, 0, 0);
  v69 = a1 + 64;
  v4 = 1 << *(_BYTE *)(a1 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(a1 + 64);
  v65 = &v3[OBJC_IVAR____TtC26SensitiveContentAnalysisML20SCMLPersonAttributes_hasImplicitCategoryRequiringPersonalization];
  v67 = &v3[OBJC_IVAR____TtC26SensitiveContentAnalysisML20SCMLPersonAttributes_hasEthnicity];
  v66 = &v3[OBJC_IVAR____TtC26SensitiveContentAnalysisML20SCMLPersonAttributes_ethnicity];
  v7 = &v3[OBJC_IVAR____TtC26SensitiveContentAnalysisML20SCMLPersonAttributes_hasGender];
  v8 = &v3[OBJC_IVAR____TtC26SensitiveContentAnalysisML20SCMLPersonAttributes_gender];
  v9 = &v3[OBJC_IVAR____TtC26SensitiveContentAnalysisML20SCMLPersonAttributes_hasAge];
  v10 = &v3[OBJC_IVAR____TtC26SensitiveContentAnalysisML20SCMLPersonAttributes_age];
  v11 = &v3[OBJC_IVAR____TtC26SensitiveContentAnalysisML20SCMLPersonAttributes_isGroup];
  v12 = &v3[OBJC_IVAR____TtC26SensitiveContentAnalysisML20SCMLPersonAttributes_specific];
  v64 = v3;
  swift_beginAccess();
  swift_beginAccess();
  v68 = v9;
  v13 = v10;
  v14 = v11;
  swift_beginAccess();
  swift_beginAccess();
  v62 = v7;
  v15 = v12;
  swift_beginAccess();
  v63 = v8;
  swift_beginAccess();
  swift_beginAccess();
  swift_beginAccess();
  swift_beginAccess();
  v70 = (unint64_t)(v4 + 63) >> 6;
  v71 = 0;
  while (v6)
  {
    v17 = __clz(__rbit64(v6));
    v6 &= v6 - 1;
    v18 = v17 | (v71 << 6);
LABEL_7:
    v19 = *(_QWORD *)(a1 + 56);
    v20 = (_QWORD *)(*(_QWORD *)(a1 + 48) + 16 * v18);
    v21 = v20[1];
    *(_QWORD *)&v73 = *v20;
    *((_QWORD *)&v73 + 1) = v21;
    sub_245C3ACA4(v19 + 32 * v18, (uint64_t)v74);
    swift_bridgeObjectRetain();
LABEL_26:
    sub_245C4C0C8((uint64_t)&v73, (uint64_t)&v75);
    v25 = v76;
    if (!v76)
    {

      swift_release();
      return;
    }
    v26 = v75;
    sub_245C3AC08(&v77, &v73);
    if (v26 == 0x6369666963657073 && v25 == 0xE800000000000000 || (sub_245C8F118() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      v16 = sub_245C4C110((uint64_t)&v73);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v73);
      swift_bridgeObjectRelease();
      *v15 = v16 & 1;
    }
    else if (v26 == 0x70756F72675F7369 && v25 == 0xE800000000000000 || (sub_245C8F118() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      v27 = sub_245C4C110((uint64_t)&v73);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v73);
      swift_bridgeObjectRelease();
      *v14 = v27 & 1;
    }
    else if (v26 == 6645601 && v25 == 0xE300000000000000 || (sub_245C8F118() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      v28 = sub_245C4C110((uint64_t)&v73);
      v30 = v29;
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v73);
      *v68 = v28 & 1;
      *(_QWORD *)v13 = v30;
      swift_bridgeObjectRelease();
    }
    else if (v26 == 0x7265646E6567 && v25 == 0xE600000000000000
           || ((v31 = sub_245C8F118(), v26 == 0x656C616D6566) ? (v32 = v25 == 0xE600000000000000) : (v32 = 0),
               !v32 ? (v33 = 0) : (v33 = 1),
               (v31 & 1) != 0
            || (v33 & 1) != 0
            || (sub_245C8F118() & 1) != 0
            || v26 == 1701601645 && v25 == 0xE400000000000000
            || (sub_245C8F118() & 1) != 0
            || v26 == 0x616E69625F6E6F6ELL && v25 == 0xEA00000000007972
            || (sub_245C8F118() & 1) != 0))
    {
      v34 = v63;
      *v62 = (*v62 | sub_245C4C110((uint64_t)&v73)) & 1;
      if (v35)
      {
        if (!*(_QWORD *)v63)
        {
          *(_QWORD *)v63 = MEMORY[0x24BEE4AF8];
          v36 = v35;
          swift_bridgeObjectRelease();
          v35 = v36;
        }
        v59 = v15;
        v60 = v14;
        v61 = v35;
        if (v26 == 1701601645 && v25 == 0xE400000000000000)
        {
          v37 = 1;
        }
        else if ((sub_245C8F118() & 1) != 0)
        {
          v37 = 1;
          v35 = v61;
        }
        else if (v26 == 0x656C616D6566 && v25 == 0xE600000000000000 || (sub_245C8F118() & 1) != 0)
        {
          v37 = 2;
          v35 = v61;
        }
        else
        {
          v35 = v61;
          if (v26 == 0x616E69625F6E6F6ELL && v25 == 0xEA00000000007972
            || (v38 = sub_245C8F118(), v35 = v61, v37 = 0, (v38 & 1) != 0))
          {
            v37 = 3;
          }
        }
        v39 = *(_QWORD *)(v35 + 16);
        if (v39)
        {
          v58 = v13;
          v78 = MEMORY[0x24BEE4AF8];
          v40 = v35;
          sub_245C8EFF8();
          v41 = (objc_class *)type metadata accessor for SCMLPeopleDetectionAttribute();
          v42 = (uint64_t *)(v40 + 40);
          do
          {
            v44 = *(v42 - 1);
            v43 = *v42;
            v45 = (char *)objc_allocWithZone(v41);
            v46 = &v45[OBJC_IVAR____TtC26SensitiveContentAnalysisML28SCMLPeopleDetectionAttribute_term];
            *(_QWORD *)v46 = v44;
            *((_QWORD *)v46 + 1) = v43;
            *(_DWORD *)&v45[OBJC_IVAR____TtC26SensitiveContentAnalysisML28SCMLPeopleDetectionAttribute_gender] = v37;
            v72.receiver = v45;
            v72.super_class = v41;
            swift_bridgeObjectRetain();
            objc_msgSendSuper2(&v72, sel_init);
            sub_245C8EFE0();
            sub_245C8F004();
            sub_245C8F010();
            sub_245C8EFEC();
            v42 += 2;
            --v39;
          }
          while (v39);
          v34 = v63;
          v13 = v58;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_beginAccess();
        v14 = v60;
        if (!*(_QWORD *)v34)
          goto LABEL_102;
        v47 = swift_bridgeObjectRetain();
        sub_245C4AA84(v47);
        swift_endAccess();
        swift_bridgeObjectRelease();
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v73);
        v15 = v59;
      }
      else
      {
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v73);
        swift_bridgeObjectRelease();
      }
    }
    else if (v26 == 0x746963696E687465 && v25 == 0xE900000000000079 || (sub_245C8F118() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      v48 = sub_245C4C110((uint64_t)&v73);
      v49 = v13;
      v51 = v50;
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v73);
      *v67 = v48 & 1;
      *(_QWORD *)v66 = v51;
      v13 = v49;
      swift_bridgeObjectRelease();
    }
    else if (v26 == 0xD000000000000011 && v25 == 0x8000000245CA1AC0)
    {
      swift_bridgeObjectRelease();
LABEL_86:
      if ((sub_245C4C110((uint64_t)&v73) & 1) != 0)
      {
        v54 = v15;
        if (!v53)
          goto LABEL_95;
        if (!v53[2])
          goto LABEL_103;
        v56 = v53[4];
        v55 = v53[5];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        if (v55)
        {
          if (v56 == 0x6E6F69746361 && v55 == 0xE600000000000000)
            v57 = 1;
          else
            v57 = sub_245C8F118();
          __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v73);
          swift_bridgeObjectRelease();
        }
        else
        {
LABEL_95:
          __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v73);
          v57 = 0;
        }
        v15 = v54;
        *v65 = v57 & 1;
      }
      else
      {
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v73);
        swift_bridgeObjectRelease();
        *v65 = 0;
      }
    }
    else
    {
      v52 = sub_245C8F118();
      swift_bridgeObjectRelease();
      if ((v52 & 1) != 0)
        goto LABEL_86;
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v73);
    }
  }
  v22 = v71 + 1;
  if (__OFADD__(v71, 1))
  {
    __break(1u);
    goto LABEL_101;
  }
  if (v22 >= v70)
  {
LABEL_25:
    v6 = 0;
    memset(v74, 0, sizeof(v74));
    v73 = 0u;
    goto LABEL_26;
  }
  v23 = *(_QWORD *)(v69 + 8 * v22);
  if (v23)
  {
LABEL_11:
    v6 = (v23 - 1) & v23;
    v18 = __clz(__rbit64(v23)) + (v22 << 6);
    v71 = v22;
    goto LABEL_7;
  }
  v24 = v71 + 2;
  ++v71;
  if (v22 + 1 >= v70)
    goto LABEL_25;
  v23 = *(_QWORD *)(v69 + 8 * v24);
  if (v23)
    goto LABEL_14;
  v71 = v22 + 1;
  if (v22 + 2 >= v70)
    goto LABEL_25;
  v23 = *(_QWORD *)(v69 + 8 * (v22 + 2));
  if (v23)
  {
    v22 += 2;
    goto LABEL_11;
  }
  v24 = v22 + 3;
  v71 = v22 + 2;
  if (v22 + 3 >= v70)
    goto LABEL_25;
  v23 = *(_QWORD *)(v69 + 8 * v24);
  if (v23)
  {
LABEL_14:
    v22 = v24;
    goto LABEL_11;
  }
  while (1)
  {
    v22 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v22 >= v70)
    {
      v71 = v70 - 1;
      goto LABEL_25;
    }
    v23 = *(_QWORD *)(v69 + 8 * v22);
    ++v24;
    if (v23)
      goto LABEL_11;
  }
LABEL_101:
  __break(1u);
LABEL_102:

  __break(1u);
LABEL_103:
  __break(1u);
}

id SCMLPersonAttributes.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void SCMLPersonAttributes.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id SCMLPersonAttributes.__deallocating_deinit(uint64_t a1)
{
  return sub_245C37B80(a1, type metadata accessor for SCMLPersonAttributes);
}

double sub_245C45578()
{
  uint64_t v0;
  double result;

  __swift_instantiateConcreteTypeFromMangledName(&qword_257514E20);
  v0 = swift_allocObject();
  *(_QWORD *)&result = 3;
  *(_OWORD *)(v0 + 16) = xmmword_245C94D00;
  *(_QWORD *)(v0 + 32) = 0x747369747261;
  *(_QWORD *)(v0 + 40) = 0xE600000000000000;
  *(_QWORD *)(v0 + 48) = 0x7265687265707573;
  *(_QWORD *)(v0 + 56) = 0xE90000000000006FLL;
  *(_QWORD *)(v0 + 64) = 0x657269706D6176;
  *(_QWORD *)(v0 + 72) = 0xE700000000000000;
  qword_257517DF8 = v0;
  return result;
}

uint64_t sub_245C455FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD v11[5];
  uint64_t v12;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&qword_257515110);
  v1 = *(_QWORD *)(v0 - 8);
  result = MEMORY[0x24BDAC7A8](v0);
  v4 = (char *)v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_257517DF0 != -1)
    result = swift_once();
  v5 = qword_257517DF8;
  v6 = *(_QWORD *)(qword_257517DF8 + 16);
  v7 = MEMORY[0x24BEE4AF8];
  if (v6)
  {
    v12 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRetain();
    sub_245C4AC3C(0, v6, 0);
    v7 = v12;
    v11[1] = v5;
    v8 = v5 + 40;
    do
    {
      v11[3] = 25180;
      v11[4] = 0xE200000000000000;
      swift_bridgeObjectRetain();
      sub_245C8ED88();
      swift_bridgeObjectRetain();
      sub_245C8ED88();
      swift_bridgeObjectRelease();
      sub_245C8EA7C();
      swift_bridgeObjectRelease();
      v12 = v7;
      v10 = *(_QWORD *)(v7 + 16);
      v9 = *(_QWORD *)(v7 + 24);
      if (v10 >= v9 >> 1)
      {
        sub_245C4AC3C(v9 > 1, v10 + 1, 1);
        v7 = v12;
      }
      v8 += 16;
      *(_QWORD *)(v7 + 16) = v10 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v1 + 32))(v7+ ((*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80))+ *(_QWORD *)(v1 + 72) * v10, v4, v0);
      --v6;
    }
    while (v6);
    result = swift_bridgeObjectRelease();
  }
  qword_257517E08 = v7;
  return result;
}

unint64_t sub_245C457F0(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void **v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_2575151B0);
  v2 = (_QWORD *)sub_245C8F058();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (void **)(a1 + 48);
  while (1)
  {
    v5 = (uint64_t)*(v4 - 2);
    v6 = (uint64_t)*(v4 - 1);
    v7 = *v4;
    swift_bridgeObjectRetain();
    v8 = v7;
    result = sub_245C3FBB8(v5, v6);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v11 = (uint64_t *)(v2[6] + 16 * result);
    *v11 = v5;
    v11[1] = v6;
    *(_QWORD *)(v2[7] + 8 * result) = v8;
    v12 = v2[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v2[2] = v14;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_245C45908(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  unint64_t result;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_2575151A8);
  v2 = (_QWORD *)sub_245C8F058();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (_BYTE *)(a1 + 48);
  while (1)
  {
    v5 = *((_QWORD *)v4 - 2);
    v6 = *((_QWORD *)v4 - 1);
    v7 = *v4;
    swift_bridgeObjectRetain();
    result = sub_245C3FBB8(v5, v6);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v10 = (uint64_t *)(v2[6] + 16 * result);
    *v10 = v5;
    v10[1] = v6;
    *(_BYTE *)(v2[7] + result) = v7;
    v11 = v2[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v4 += 24;
    v2[2] = v13;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_245C45A18(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t (*a4)(uint64_t *, unint64_t))
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t result;
  char v15;
  uint64_t *v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  if (!*(_QWORD *)(a1 + 16))
  {
    v8 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(a2);
  v7 = sub_245C8F058();
  v8 = (_QWORD *)v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v8;
  }
  v10 = v7 + 64;
  v11 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_245C3AC18(v11, (uint64_t)&v20, a3);
    v12 = v20;
    v13 = v21;
    result = sub_245C3FBB8(v20, v21);
    if ((v15 & 1) != 0)
      break;
    *(_QWORD *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v16 = (uint64_t *)(v8[6] + 16 * result);
    *v16 = v12;
    v16[1] = v13;
    result = a4(&v22, v8[7] + 40 * result);
    v17 = v8[2];
    v18 = __OFADD__(v17, 1);
    v19 = v17 + 1;
    if (v18)
      goto LABEL_11;
    v8[2] = v19;
    v11 += 56;
    if (!--v9)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_245C45BD0()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t sub_245C45C90(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC26SensitiveContentAnalysisML34SCMLVisualGenerationHandlingResult_people);
  swift_beginAccess();
  *v3 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t sub_245C45CE0@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & **a1) + 0x58))();
  *a2 = result;
  return result;
}

uint64_t sub_245C45D20(uint64_t a1, _QWORD **a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & **a2) + 0x60);
  v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t (*sub_245C45D60())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t SCMLVisualGenerationHandlingResult.__allocating_init(result:text:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  objc_class *v4;
  id v9;

  v9 = objc_allocWithZone(v4);
  return SCMLVisualGenerationHandlingResult.init(result:text:)(a1, a2, a3, a4);
}

uint64_t SCMLVisualGenerationHandlingResult.init(result:text:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  void *v25;
  void *v26;
  id v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int (*v47)(uint64_t, uint64_t, uint64_t);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  int64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  int64_t v58;
  unint64_t v59;
  int64_t v60;
  uint64_t inited;
  unint64_t v62;
  char isUniquelyReferenced_nonNull_native;
  id v64;
  void *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t *v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  char v90;
  uint64_t v91;
  objc_class *v92;
  uint64_t v93;
  __int128 v95;
  int64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t *v109;
  uint64_t v110;
  unint64_t v111;
  char *v112;
  int64_t v113;
  unint64_t v114;
  uint64_t v115;
  __int128 *v116;
  uint64_t *v117;
  __int128 *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  objc_super v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  char v128;
  uint64_t v129;
  uint64_t v130;

  v6 = v5;
  v115 = a4;
  v111 = a3;
  v130 = *MEMORY[0x24BDAC8D0];
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_257515108);
  v8 = MEMORY[0x24BDAC7A8](v7);
  v10 = (uint64_t)&v95 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v108 = (char *)&v95 - v11;
  v121 = __swift_instantiateConcreteTypeFromMangledName(&qword_257515110);
  v114 = *(_QWORD *)(v121 - 8);
  MEMORY[0x24BDAC7A8](v121);
  v120 = (uint64_t)&v95 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v110 = __swift_instantiateConcreteTypeFromMangledName(&qword_257515118);
  MEMORY[0x24BDAC7A8](v110);
  v109 = (uint64_t *)((char *)&v95 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = sub_245C8ED34();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v95 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = (unint64_t *)&v4[OBJC_IVAR____TtC26SensitiveContentAnalysisML34SCMLVisualGenerationHandlingResult_people];
  v112 = v4;
  v19 = sub_245C457F0(MEMORY[0x24BEE4AF8]);
  v117 = (uint64_t *)v18;
  *v18 = v19;
  sub_245C8ED28();
  v20 = sub_245C8ED1C();
  v22 = v21;
  swift_bridgeObjectRelease();
  v23 = v14;
  v24 = v22;
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v23);
  if (v22 >> 60 == 15)
LABEL_94:
    __break(1u);
  v25 = (void *)objc_opt_self();
  v26 = (void *)sub_245C8E914();
  *(_QWORD *)&v127 = 0;
  v27 = objc_msgSend(v25, sel_JSONObjectWithData_options_error_, v26, 0, &v127);

  v28 = v20;
  if (!v27)
  {
    v64 = (id)v127;
    swift_bridgeObjectRelease();
    v65 = (void *)sub_245C8E908();

    swift_willThrow();
    v66 = v112;

    goto LABEL_85;
  }
  v29 = (id)v127;
  sub_245C8EF5C();
  swift_unknownObjectRelease();
  v119 = __swift_instantiateConcreteTypeFromMangledName(&qword_257515120);
  if ((swift_dynamicCast() & 1) == 0)
  {
    v66 = v112;

    swift_bridgeObjectRelease();
    goto LABEL_85;
  }
  v98 = v24;
  v97 = v20;
  v30 = v124;
  if (qword_257517DF0 == -1)
    goto LABEL_5;
  while (1)
  {
    swift_once();
LABEL_5:
    v31 = qword_257517DF8;
    v32 = qword_257517E00;
    swift_bridgeObjectRetain();
    v33 = (uint64_t)v108;
    if (v32 != -1)
      swift_once();
    v100 = *(_QWORD *)(v31 + 16);
    if (v100)
    {
      v104 = *(_QWORD *)(qword_257517E08 + 16);
      v103 = v31 + 32;
      v116 = &v125;
      v118 = (__int128 *)&v128;
      v34 = swift_bridgeObjectRetain();
      v35 = 0;
      v95 = xmmword_245C93E30;
      v101 = v31;
      v102 = v34;
      while (1)
      {
        if (v35 >= *(_QWORD *)(v31 + 16))
          goto LABEL_90;
        if (v35 == v104)
          goto LABEL_52;
        if (v35 >= *(_QWORD *)(v34 + 16))
          goto LABEL_91;
        v36 = (uint64_t *)(v103 + 16 * v35);
        v37 = *v36;
        v38 = v36[1];
        v39 = v114;
        v40 = v34 + ((*(unsigned __int8 *)(v39 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v39 + 80));
        v41 = *(_QWORD *)(v114 + 72);
        v106 = v35;
        v42 = v40 + v41 * v35;
        v43 = v109;
        v44 = (char *)v109 + *(int *)(v110 + 48);
        v99 = v37;
        *v109 = v37;
        v43[1] = v38;
        v45 = v121;
        (*(void (**)(char *, unint64_t, uint64_t))(v39 + 16))(v44, v42, v121);
        (*(void (**)(uint64_t, char *, uint64_t))(v39 + 32))(v120, v44, v45);
        v107 = v38;
        swift_bridgeObjectRetain();
        sub_245C8EA70();
        if (v6)
          break;
        v46 = __swift_instantiateConcreteTypeFromMangledName(&qword_257515128);
        v47 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 48);
        if (v47(v33, 1, v46) == 1)
        {
          swift_bridgeObjectRelease();
          sub_245C3AB78(v33, &qword_257515108);
          (*(void (**)(uint64_t, uint64_t))(v114 + 8))(v120, v121);
          goto LABEL_10;
        }
        sub_245C3AB78(v33, &qword_257515108);
        v48 = *(_QWORD *)(v30 + 64);
        v105 = v30 + 64;
        v49 = 1 << *(_BYTE *)(v30 + 32);
        if (v49 < 64)
          v50 = ~(-1 << v49);
        else
          v50 = -1;
        v51 = v50 & v48;
        v113 = (unint64_t)(v49 + 63) >> 6;
        v96 = v113 - 1;
        swift_bridgeObjectRetain();
        v52 = 0;
        if (v51)
          goto LABEL_20;
        while (2)
        {
          v58 = v52 + 1;
          if (__OFADD__(v52, 1))
            goto LABEL_89;
          if (v58 >= v113)
            goto LABEL_30;
          v59 = *(_QWORD *)(v105 + 8 * v58);
          if (v59)
            goto LABEL_25;
          v52 += 2;
          if (v58 + 1 >= v113)
          {
            v52 = v58;
            goto LABEL_30;
          }
          v59 = *(_QWORD *)(v105 + 8 * v52);
          if (v59)
          {
            ++v58;
LABEL_25:
            v51 = (v59 - 1) & v59;
            v54 = __clz(__rbit64(v59)) + (v58 << 6);
            v52 = v58;
            goto LABEL_21;
          }
          if (v58 + 2 >= v113)
            goto LABEL_30;
          v59 = *(_QWORD *)(v105 + 8 * (v58 + 2));
          if (v59)
          {
            v58 += 2;
            goto LABEL_25;
          }
          v60 = v58 + 3;
          if (v58 + 3 >= v113)
          {
            v52 = v58 + 2;
            goto LABEL_30;
          }
          v59 = *(_QWORD *)(v105 + 8 * v60);
          if (v59)
          {
            v58 += 3;
            goto LABEL_25;
          }
          while (1)
          {
            v58 = v60 + 1;
            if (__OFADD__(v60, 1))
            {
              __break(1u);
              goto LABEL_94;
            }
            if (v58 >= v113)
              break;
            v59 = *(_QWORD *)(v105 + 8 * v58);
            ++v60;
            if (v59)
              goto LABEL_25;
          }
          v52 = v96;
LABEL_30:
          v51 = 0;
          v125 = 0u;
          v126 = 0u;
          v124 = 0u;
LABEL_31:
          sub_245C4C0C8((uint64_t)&v124, (uint64_t)&v127);
          if (*((_QWORD *)&v127 + 1))
          {
            sub_245C8EA70();
            swift_bridgeObjectRelease();
            if (v47(v10, 1, v46) == 1)
            {
              sub_245C3AB78(v10, &qword_257515108);
              __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v118);
              if (!v51)
                continue;
LABEL_20:
              v53 = __clz(__rbit64(v51));
              v51 &= v51 - 1;
              v54 = v53 | (v52 << 6);
LABEL_21:
              v55 = *(_QWORD *)(v30 + 56);
              v56 = (_QWORD *)(*(_QWORD *)(v30 + 48) + 16 * v54);
              v57 = v56[1];
              *(_QWORD *)&v124 = *v56;
              *((_QWORD *)&v124 + 1) = v57;
              sub_245C3ACA4(v55 + 32 * v54, (uint64_t)v116);
              swift_bridgeObjectRetain();
              goto LABEL_31;
            }
            swift_bridgeObjectRelease();
            sub_245C3AB78(v10, &qword_257515108);
            swift_release();
            __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v118);
          }
          else
          {
            swift_release();
            __swift_instantiateConcreteTypeFromMangledName(&qword_257515130);
            inited = swift_initStackObject();
            *(_OWORD *)(inited + 16) = v95;
            *(_QWORD *)(inited + 32) = 0x6369666963657073;
            *(_QWORD *)(inited + 40) = 0xE800000000000000;
            *(_BYTE *)(inited + 48) = 0;
            v62 = sub_245C45908(inited);
            v129 = __swift_instantiateConcreteTypeFromMangledName(&qword_257515138);
            *(_QWORD *)&v127 = v62;
            sub_245C3AC08(&v127, &v124);
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            v122 = v30;
            sub_245C4B5A4(&v124, v99, v107, isUniquelyReferenced_nonNull_native);
            v30 = v122;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
          break;
        }
        (*(void (**)(uint64_t, uint64_t))(v114 + 8))(v120, v121);
        v33 = (uint64_t)v108;
LABEL_10:
        v34 = v102;
        v35 = v106 + 1;
        v31 = v101;
        if (v106 + 1 == v100)
        {
LABEL_52:
          swift_bridgeObjectRelease();
          goto LABEL_53;
        }
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_245C4C348(v97, v98);
      (*(void (**)(uint64_t, uint64_t))(v114 + 8))(v120, v121);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v93 = *v117;

      swift_bridgeObjectRelease();
      type metadata accessor for SCMLVisualGenerationHandlingResult();
      swift_deallocPartialClassInstance();
      return v93;
    }
LABEL_53:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v67 = 0;
    v68 = 1 << *(_BYTE *)(v30 + 32);
    v69 = -1;
    if (v68 < 64)
      v69 = ~(-1 << v68);
    v10 = v69 & *(_QWORD *)(v30 + 64);
    v70 = (unint64_t)(v68 + 63) >> 6;
    v118 = &v125;
    v71 = &v128;
    v111 = v70 - 1;
    v116 = (__int128 *)v70;
    v114 = v70 - 5;
    v115 = v30 + 64;
    v113 = v30 + 104;
    v72 = MEMORY[0x24BEE4AD8] + 8;
    v73 = v117;
    if (v10)
      break;
LABEL_60:
    v79 = v67 + 1;
    if (!__OFADD__(v67, 1))
    {
      if (v79 < (uint64_t)v116)
      {
        v80 = *(_QWORD *)(v115 + 8 * v79);
        if (v80)
        {
LABEL_63:
          v10 = (v80 - 1) & v80;
          v75 = __clz(__rbit64(v80)) + (v79 << 6);
          v67 = v79;
          goto LABEL_59;
        }
        if (v67 + 2 >= (uint64_t)v116)
        {
          ++v67;
        }
        else
        {
          v80 = *(_QWORD *)(v115 + 8 * (v67 + 2));
          if (v80)
          {
            v79 = v67 + 2;
            goto LABEL_63;
          }
          if (v67 + 3 >= (uint64_t)v116)
          {
            v67 += 2;
          }
          else
          {
            v80 = *(_QWORD *)(v115 + 8 * (v67 + 3));
            if (v80)
            {
              v79 = v67 + 3;
              goto LABEL_63;
            }
            v79 = v67 + 4;
            if (v67 + 4 >= (uint64_t)v116)
            {
              v67 += 3;
            }
            else
            {
              v80 = *(_QWORD *)(v115 + 8 * v79);
              if (v80)
                goto LABEL_63;
              while (v114 != v67)
              {
                v80 = *(_QWORD *)(v113 + 8 * v67++);
                if (v80)
                {
                  v79 = v67 + 4;
                  goto LABEL_63;
                }
              }
              v67 = v111;
            }
          }
        }
      }
      v10 = 0;
      v125 = 0u;
      v126 = 0u;
      v124 = 0u;
      goto LABEL_69;
    }
    __break(1u);
LABEL_89:
    __break(1u);
LABEL_90:
    __break(1u);
LABEL_91:
    __break(1u);
  }
  while (1)
  {
    v74 = __clz(__rbit64(v10));
    v10 &= v10 - 1;
    v75 = v74 | (v67 << 6);
LABEL_59:
    v76 = *(_QWORD *)(v30 + 56);
    v77 = (_QWORD *)(*(_QWORD *)(v30 + 48) + 16 * v75);
    v78 = v77[1];
    *(_QWORD *)&v124 = *v77;
    *((_QWORD *)&v124 + 1) = v78;
    sub_245C3ACA4(v76 + 32 * v75, (uint64_t)v118);
    swift_bridgeObjectRetain();
LABEL_69:
    sub_245C4C0C8((uint64_t)&v124, (uint64_t)&v127);
    v81 = *((_QWORD *)&v127 + 1);
    if (!*((_QWORD *)&v127 + 1))
      break;
    v82 = v127;
    sub_245C3AC08(v71, &v124);
    if ((swift_dynamicCast() & 1) != 0)
    {
      v120 = v82;
      v83 = v122;
      type metadata accessor for SCMLPersonAttributes();
      SCMLPersonAttributes.__allocating_init(_:)(v83);
      v121 = v67;
      v84 = v72;
      v85 = v6;
      v86 = v30;
      v87 = v71;
      v89 = v88;
      swift_beginAccess();
      v90 = swift_isUniquelyReferenced_nonNull_native();
      v122 = *v73;
      *v73 = 0x8000000000000000;
      v91 = v89;
      v71 = v87;
      v30 = v86;
      v6 = v85;
      v72 = v84;
      v67 = v121;
      sub_245C4B448(v91, v120, v81, v90);
      *v73 = v122;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_endAccess();
      if (!v10)
        goto LABEL_60;
    }
    else
    {
      swift_bridgeObjectRelease();
      if (!v10)
        goto LABEL_60;
    }
  }
  swift_release();
  v66 = v112;

  v24 = v98;
  v28 = v97;
LABEL_85:
  v92 = (objc_class *)type metadata accessor for SCMLVisualGenerationHandlingResult();
  v123.receiver = v66;
  v123.super_class = v92;
  v93 = (uint64_t)objc_msgSendSuper2(&v123, sel_init);
  sub_245C4C348(v28, v24);
  return v93;
}

void SCMLVisualGenerationHandlingResult.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id SCMLVisualGenerationHandlingResult.__deallocating_deinit(uint64_t a1)
{
  return sub_245C37B80(a1, type metadata accessor for SCMLVisualGenerationHandlingResult);
}

uint64_t static SCMLVisualGenerationHandlingError.== infix(_:_:)()
{
  return 1;
}

uint64_t SCMLVisualGenerationHandlingError.hash(into:)()
{
  return sub_245C8F178();
}

uint64_t SCMLVisualGenerationHandlingError.hashValue.getter()
{
  sub_245C8F16C();
  sub_245C8F178();
  return sub_245C8F19C();
}

id SCMLVisualGenerationHandling.__allocating_init(onBehalfOf:modelManagerServicesUseCaseID:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  objc_class *v3;
  id v7;

  v7 = objc_allocWithZone(v3);
  return SCMLVisualGenerationHandling.init(onBehalfOf:modelManagerServicesUseCaseID:)(a1, a2, a3);
}

id SCMLVisualGenerationHandling.init(onBehalfOf:modelManagerServicesUseCaseID:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  id v24;
  uint64_t v25;
  unint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  _BOOL4 v29;
  uint8_t *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  NSObject *v39;
  os_log_type_t v40;
  uint8_t *v41;
  uint64_t v42;
  objc_class *v43;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  char *v49;
  char *v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  objc_super v58;
  uint64_t v59[3];
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;

  v54 = a3;
  v53 = a2;
  v51 = a1;
  v4 = sub_245C8E9BC();
  MEMORY[0x24BDAC7A8](v4);
  v50 = (char *)&v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_245C8EA34();
  v56 = *(_QWORD *)(v6 - 8);
  v57 = v6;
  v7 = MEMORY[0x24BDAC7A8](v6);
  v52 = (char *)&v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v55 = (char *)&v45 - v9;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_257514D50);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_245C8E9D4();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v45 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = &v3[OBJC_IVAR____TtC26SensitiveContentAnalysisML28SCMLVisualGenerationHandling_logger];
  v18 = v3;
  sub_245C8EBD8();
  sub_245C8E950();
  v20 = v60;
  v19 = v61;
  __swift_project_boxed_opaque_existential_1(v59, v60);
  v21 = MEMORY[0x249543ECC](v20, *(_QWORD *)(*(_QWORD *)(v19 + 8) + 8));
  v23 = v22;
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v59);
  swift_bridgeObjectRetain();
  v24 = v23;
  sub_245C8E9C8();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_245C3AB78((uint64_t)v12, &qword_257514D50);
    sub_245C4C35C();
    swift_allocError();
    swift_willThrow();
    v25 = sub_245C8EBE4();
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v25 - 8) + 8))(v17, v25);

    type metadata accessor for SCMLVisualGenerationHandling();
    swift_deallocPartialClassInstance();
  }
  else
  {
    v45 = v21;
    v46 = v14;
    v49 = v18;
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v16, v12, v13);
    v26 = (unint64_t)v23;
    swift_bridgeObjectRetain_n();
    v47 = v17;
    v27 = sub_245C8EBCC();
    v28 = sub_245C8EE6C();
    v29 = os_log_type_enabled(v27, v28);
    v48 = v16;
    if (v29)
    {
      v30 = (uint8_t *)swift_slowAlloc();
      v31 = swift_slowAlloc();
      v59[0] = v31;
      *(_DWORD *)v30 = 136315138;
      swift_bridgeObjectRetain();
      v62 = sub_245C3801C(v45, v26, v59);
      v32 = v48;
      sub_245C8EF08();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_245BFA000, v27, v28, "Begin prewarm VG handling: %s", v30, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x249545828](v31, -1, -1);
      MEMORY[0x249545828](v30, -1, -1);

    }
    else
    {
      v32 = v16;

      swift_bridgeObjectRelease_n();
    }
    __swift_instantiateConcreteTypeFromMangledName(&qword_257514D60);
    v33 = v46;
    v34 = (*(unsigned __int8 *)(v46 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v46 + 80);
    v35 = swift_allocObject();
    *(_OWORD *)(v35 + 16) = xmmword_245C93E30;
    (*(void (**)(unint64_t, char *, uint64_t))(v33 + 16))(v35 + v34, v32, v13);
    sub_245C8E9B0();
    v36 = v55;
    sub_245C8EA28();
    (*(void (**)(char *, char *, uint64_t))(v56 + 16))(v52, v36, v57);
    sub_245C8E9A4();
    swift_allocObject();
    v37 = sub_245C8E98C();
    v38 = v49;
    *(_QWORD *)&v49[OBJC_IVAR____TtC26SensitiveContentAnalysisML28SCMLVisualGenerationHandling_tokenGen] = v37;
    swift_retain();
    sub_245C8E998();
    swift_release();
    swift_bridgeObjectRetain();
    v39 = sub_245C8EBCC();
    v40 = sub_245C8EE6C();
    if (os_log_type_enabled(v39, v40))
    {
      v41 = (uint8_t *)swift_slowAlloc();
      v42 = swift_slowAlloc();
      v59[0] = v42;
      *(_DWORD *)v41 = 136315138;
      swift_bridgeObjectRetain();
      v62 = sub_245C3801C(v45, v26, v59);
      v38 = v49;
      sub_245C8EF08();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_245BFA000, v39, v40, "End prewarm VG handling: %s", v41, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x249545828](v42, -1, -1);
      MEMORY[0x249545828](v41, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    v43 = (objc_class *)type metadata accessor for SCMLVisualGenerationHandling();
    v58.receiver = v38;
    v58.super_class = v43;
    v24 = objc_msgSendSuper2(&v58, sel_init);
    (*(void (**)(char *, uint64_t))(v56 + 8))(v55, v57);
    (*(void (**)(char *, uint64_t))(v33 + 8))(v48, v13);
  }
  return v24;
}

uint64_t sub_245C47474(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v8;

  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v8;
  *v8 = v4;
  v8[1] = sub_245C35130;
  return sub_245C474E0(a1, a2, a3, v3);
}

uint64_t sub_245C474E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4[27] = a3;
  v4[28] = a4;
  v4[25] = a1;
  v4[26] = a2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_257514E28);
  v4[29] = swift_task_alloc();
  v4[30] = __swift_instantiateConcreteTypeFromMangledName(&qword_257514E30);
  v4[31] = swift_task_alloc();
  v5 = sub_245C8EAA0();
  v4[32] = v5;
  v4[33] = *(_QWORD *)(v5 - 8);
  v4[34] = swift_task_alloc();
  v6 = sub_245C8EAAC();
  v4[35] = v6;
  v4[36] = *(_QWORD *)(v6 - 8);
  v4[37] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_257514E38);
  v4[38] = swift_task_alloc();
  v7 = sub_245C8EB78();
  v4[39] = v7;
  v4[40] = *(_QWORD *)(v7 - 8);
  v4[41] = swift_task_alloc();
  v4[42] = swift_task_alloc();
  v8 = sub_245C8EC08();
  v4[43] = v8;
  v4[44] = *(_QWORD *)(v8 - 8);
  v4[45] = swift_task_alloc();
  v4[46] = swift_task_alloc();
  v4[47] = swift_task_alloc();
  v4[48] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_245C47664()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v1 = v0[38];
  v3 = v0[26];
  v2 = v0[27];
  v4 = swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v3;
  *(_QWORD *)(v4 + 24) = v2;
  sub_245C8EC14();
  swift_task_dealloc();
  v5 = sub_245C8EB6C();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v1, 1, 1, v5);
  sub_245C8EB60();
  v6 = (_QWORD *)swift_task_alloc();
  v0[49] = v6;
  *v6 = v0;
  v6[1] = sub_245C47764;
  return sub_245C8EA58();
}

uint64_t sub_245C47764()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 400) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_245C477C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t inited;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v1 = *(_QWORD *)(v0 + 232);
  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_257514E58);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(v1, 1, v2) == 1)
  {
    sub_245C3AB78(v1, &qword_257514E28);
  }
  else
  {
    v41 = *(_QWORD *)(v0 + 376);
    v42 = *(_QWORD *)(v0 + 384);
    v44 = *(_QWORD *)(v0 + 352);
    v45 = *(_QWORD *)(v0 + 344);
    v33 = *(_QWORD *)(v0 + 328);
    v34 = *(_QWORD *)(v0 + 320);
    v35 = *(_QWORD *)(v0 + 312);
    v36 = *(_QWORD *)(v0 + 336);
    v32 = *(_QWORD *)(v0 + 296);
    v43 = *(_QWORD *)(v0 + 288);
    v3 = *(_QWORD *)(v0 + 280);
    v46 = *(_QWORD *)(v0 + 272);
    v5 = *(_QWORD *)(v0 + 256);
    v4 = *(_QWORD *)(v0 + 264);
    v7 = *(_QWORD *)(v0 + 240);
    v6 = *(_QWORD *)(v0 + 248);
    v37 = *(_QWORD *)(v0 + 208);
    v38 = *(_QWORD *)(v0 + 216);
    v8 = v1 + *(int *)(v2 + 48);
    v9 = v6 + *(int *)(v7 + 48);
    v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v43 + 32);
    v10(v6, v1, v3);
    v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32);
    v11(v9, v8, v5);
    v12 = v6 + *(int *)(v7 + 48);
    v10(v32, v6, v3);
    v11(v46, v12, v5);
    sub_245C8EA94();
    (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v36, v35);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v34 + 32))(v36, v33, v35);
    __swift_instantiateConcreteTypeFromMangledName(&qword_257514E60);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_245C93E30;
    *(_QWORD *)(inited + 32) = 1954047348;
    *(_QWORD *)(inited + 40) = 0xE400000000000000;
    v14 = MEMORY[0x24BE7AD80];
    *(_QWORD *)(inited + 72) = MEMORY[0x24BEE0D00];
    *(_QWORD *)(inited + 80) = v14;
    *(_QWORD *)(inited + 48) = v37;
    *(_QWORD *)(inited + 56) = v38;
    swift_bridgeObjectRetain();
    sub_245C45A18(inited, &qword_257514E98, &qword_257514EA0, (uint64_t (*)(uint64_t *, unint64_t))sub_245C3ABF0);
    sub_245C361BC(MEMORY[0x24BEE4AF8]);
    __swift_instantiateConcreteTypeFromMangledName(&qword_257514E70);
    v15 = swift_initStackObject();
    *(_OWORD *)(v15 + 16) = xmmword_245C93E30;
    *(_QWORD *)(v15 + 32) = 0xD000000000000019;
    *(_QWORD *)(v15 + 40) = 0x8000000245CA1EF0;
    v16 = sub_245C8ECB0();
    v17 = MEMORY[0x24BE7AD58];
    *(_QWORD *)(v15 + 72) = v16;
    *(_QWORD *)(v15 + 80) = v17;
    __swift_allocate_boxed_opaque_existential_0Tm((uint64_t *)(v15 + 48));
    sub_245C8ECA4();
    sub_245C45A18(v15, &qword_257514E78, &qword_257514E80, (uint64_t (*)(uint64_t *, unint64_t))sub_245C3ABF0);
    sub_245C8EA88();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v46, v5);
    (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v32, v3);
    (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v42, v45);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v44 + 32))(v42, v41, v45);
  }
  v18 = *(_QWORD *)(v0 + 400);
  sub_245C4CAF0(&qword_257514E50, 255, (uint64_t (*)(uint64_t))MEMORY[0x24BE7A8B0], MEMORY[0x24BE7A8A8]);
  sub_245C8EC68();
  sub_245C8EC5C();
  if (v18)
  {
    v19 = *(_QWORD *)(v0 + 384);
    v21 = *(_QWORD *)(v0 + 336);
    v20 = *(_QWORD *)(v0 + 344);
    v22 = *(_QWORD *)(v0 + 312);
    v23 = *(_QWORD *)(v0 + 320);
    v24 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 352) + 8);
    v24(*(_QWORD *)(v0 + 360), v20);
    (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v21, v22);
    v24(v19, v20);
  }
  else
  {
    v25 = *(_QWORD *)(v0 + 384);
    v26 = *(_QWORD *)(v0 + 368);
    v27 = *(_QWORD *)(v0 + 344);
    v28 = *(_QWORD *)(v0 + 336);
    v39 = *(_QWORD *)(v0 + 320);
    v40 = *(_QWORD *)(v0 + 312);
    v29 = *(_QWORD *)(v0 + 224);
    v30 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 352) + 8);
    v30(*(_QWORD *)(v0 + 360), v27);
    *(_QWORD *)(v0 + 192) = *(_QWORD *)(v29
                                      + OBJC_IVAR____TtC26SensitiveContentAnalysisML28SCMLVisualGenerationHandling_tokenGen);
    sub_245C8E9A4();
    sub_245C8EC80();
    v30(v26, v27);
    (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v28, v40);
    v30(v25, v27);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_245C47D3C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 384);
  v2 = *(_QWORD *)(v0 + 344);
  v3 = *(_QWORD *)(v0 + 352);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 320) + 8))(*(_QWORD *)(v0 + 336), *(_QWORD *)(v0 + 312));
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_245C47E28@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  void (*v21)(unint64_t, char *, uint64_t);
  void (*v22)(char *, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v25 = a2;
  v24 = a1;
  v29 = a3;
  v3 = sub_245C8EC8C();
  v26 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_245C8ECB0();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_245C8EC08();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v24 - v15;
  sub_245C8ECA4();
  sub_245C8EC2C();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  v27 = v24;
  v28 = v25;
  sub_245C8EC98();
  sub_245C8EC2C();
  (*(void (**)(char *, uint64_t))(v26 + 8))(v5, v3);
  __swift_instantiateConcreteTypeFromMangledName(&qword_257514EA8);
  v17 = *(_QWORD *)(v11 + 72);
  v18 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  v19 = swift_allocObject();
  *(_OWORD *)(v19 + 16) = xmmword_245C93E40;
  v20 = v19 + v18;
  v21 = *(void (**)(unint64_t, char *, uint64_t))(v11 + 16);
  v21(v20, v16, v10);
  v21(v20 + v17, v14, v10);
  MEMORY[0x249544184](v19);
  swift_bridgeObjectRelease();
  v22 = *(void (**)(char *, uint64_t))(v11 + 8);
  v22(v14, v10);
  return ((uint64_t (*)(char *, uint64_t))v22)(v16, v10);
}

uint64_t sub_245C48050(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  _QWORD *v9;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t);

  v3[2] = a1;
  v3[3] = a2;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_257514D88);
  v3[4] = v6;
  v3[5] = *(_QWORD *)(v6 - 8);
  v7 = swift_task_alloc();
  v3[6] = v7;
  v8 = *(int **)((*MEMORY[0x24BEE4EA0] & *v2) + 0x80);
  v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v8 + *v8);
  v9 = (_QWORD *)swift_task_alloc();
  v3[7] = v9;
  *v9 = v3;
  v9[1] = sub_245C48110;
  return v11(v7, a1, a2);
}

uint64_t sub_245C48110()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  _QWORD *v4;

  v2 = *v1;
  *(_QWORD *)(v2 + 64) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 72) = v4;
  sub_245C4CAF0(&qword_257514D98, 255, (uint64_t (*)(uint64_t))MEMORY[0x24BEB8040], MEMORY[0x24BEB7FF8]);
  *v4 = v2;
  v4[1] = sub_245C481D8;
  return sub_245C8EAB8();
}

uint64_t sub_245C481D8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = *(_QWORD **)v3;
  *(_QWORD *)(*(_QWORD *)v3 + 80) = v2;
  swift_task_dealloc();
  v8 = v6[5];
  v7 = v6[6];
  v9 = v6[4];
  if (!v2)
  {
    v6[11] = a2;
    v6[12] = a1;
  }
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
  return swift_task_switch();
}

uint64_t sub_245C48268()
{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_245C4829C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(v0 + 88);
  v2 = *(_QWORD *)(v0 + 96);
  v3 = *(_QWORD *)(v0 + 80);
  v5 = *(_QWORD *)(v0 + 16);
  v4 = *(_QWORD *)(v0 + 24);
  objc_allocWithZone((Class)type metadata accessor for SCMLVisualGenerationHandlingResult());
  swift_bridgeObjectRetain();
  v6 = SCMLVisualGenerationHandlingResult.init(result:text:)(v2, v1, v5, v4);
  v7 = swift_task_dealloc();
  if (!v3)
    v7 = v6;
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v7);
}

uint64_t sub_245C48334()
{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_245C48498(uint64_t a1, const void *a2, _QWORD *a3)
{
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  _QWORD *v12;
  uint64_t (*v14)(uint64_t, uint64_t, uint64_t);

  v3[2] = a3;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_257514D88);
  v3[3] = v6;
  v3[4] = *(_QWORD *)(v6 - 8);
  v7 = swift_task_alloc();
  v3[5] = v7;
  v3[6] = _Block_copy(a2);
  v8 = sub_245C8ED10();
  v10 = v9;
  v3[7] = v8;
  v3[8] = v9;
  v11 = *(int **)((*MEMORY[0x24BEE4EA0] & *a3) + 0x80);
  v14 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)v11 + *v11);
  a3;
  v12 = (_QWORD *)swift_task_alloc();
  v3[9] = v12;
  *v12 = v3;
  v12[1] = sub_245C4858C;
  return v14(v7, v8, v10);
}

uint64_t sub_245C4858C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  _QWORD *v4;

  v2 = *v1;
  *(_QWORD *)(v2 + 80) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 88) = v4;
  sub_245C4CAF0(&qword_257514D98, 255, (uint64_t (*)(uint64_t))MEMORY[0x24BEB8040], MEMORY[0x24BEB7FF8]);
  *v4 = v2;
  v4[1] = sub_245C48654;
  return sub_245C8EAB8();
}

uint64_t sub_245C48654(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = *(_QWORD **)v3;
  *(_QWORD *)(*(_QWORD *)v3 + 96) = v2;
  swift_task_dealloc();
  v8 = v6[4];
  v7 = v6[5];
  v9 = v6[3];
  if (!v2)
  {
    v6[13] = a2;
    v6[14] = a1;
  }
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
  return swift_task_switch();
}

uint64_t sub_245C486E4()
{
  uint64_t v0;
  void *v1;
  void (**v2)(_QWORD, _QWORD, _QWORD);
  void *v3;

  v1 = *(void **)(v0 + 80);

  swift_bridgeObjectRelease();
  v2 = *(void (***)(_QWORD, _QWORD, _QWORD))(v0 + 48);
  v3 = (void *)sub_245C8E8FC();

  ((void (**)(_QWORD, _QWORD, void *))v2)[2](v2, 0, v3);
  _Block_release(v2);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_245C4876C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  unint64_t v5;
  void *v6;
  void *v7;
  void (**v8)(_QWORD, _QWORD, _QWORD);
  void *v9;

  v1 = *(_QWORD *)(v0 + 104);
  v2 = *(_QWORD *)(v0 + 112);
  v3 = *(void **)(v0 + 96);
  v5 = *(_QWORD *)(v0 + 56);
  v4 = *(_QWORD *)(v0 + 64);
  v6 = *(void **)(v0 + 16);
  objc_allocWithZone((Class)type metadata accessor for SCMLVisualGenerationHandlingResult());
  swift_bridgeObjectRetain();
  v7 = (void *)SCMLVisualGenerationHandlingResult.init(result:text:)(v2, v1, v5, v4);

  swift_bridgeObjectRelease();
  v8 = *(void (***)(_QWORD, _QWORD, _QWORD))(v0 + 48);
  if (v3)
  {
    v9 = (void *)sub_245C8E8FC();

    ((void (**)(_QWORD, _QWORD, void *))v8)[2](v8, 0, v9);
    _Block_release(v8);
  }
  else
  {
    ((void (**)(_QWORD, void *, _QWORD))v8)[2](*(_QWORD *)(v0 + 48), v7, 0);
    _Block_release(v8);

  }
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_245C48860()
{
  uint64_t v0;
  void *v1;
  void (**v2)(_QWORD, _QWORD, _QWORD);
  void *v3;

  v1 = *(void **)(v0 + 96);

  swift_bridgeObjectRelease();
  v2 = *(void (***)(_QWORD, _QWORD, _QWORD))(v0 + 48);
  v3 = (void *)sub_245C8E8FC();

  ((void (**)(_QWORD, _QWORD, void *))v2)[2](v2, 0, v3);
  _Block_release(v2);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void SCMLVisualGenerationHandling.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id SCMLVisualGenerationHandling.__deallocating_deinit()
{
  return sub_245C37B80(0, type metadata accessor for SCMLVisualGenerationHandling);
}

_DWORD *sub_245C489A0@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = *result;
  *(_BYTE *)(a2 + 4) = 0;
  return result;
}

void sub_245C489B0(_DWORD *a1@<X8>)
{
  _DWORD *v1;

  *a1 = *v1;
}

uint64_t sub_245C489BC(uint64_t *a1)
{
  uint64_t v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v4;
  uint64_t v6[2];

  v2 = *a1;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a1 = v2;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    sub_245C4BCC4();
  v4 = *(_QWORD *)(v2 + 16);
  v6[0] = v2 + 32;
  v6[1] = v4;
  sub_245C48B90(v6);
  return sub_245C8EFEC();
}

uint64_t sub_245C48A34(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_245C4BCD8(v2);
  v3 = *(_QWORD *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  result = sub_245C4962C(v5);
  *a1 = v2;
  return result;
}

_QWORD *sub_245C48A9C(unint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = a1;
  if (a1 >> 62)
    goto LABEL_10;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v2)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  while (1)
  {
    if (v2 <= 0)
    {
      v3 = (_QWORD *)MEMORY[0x24BEE4AF8];
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_257514D18);
      v3 = (_QWORD *)swift_allocObject();
      v4 = _swift_stdlib_malloc_size(v3);
      v5 = v4 - 32;
      if (v4 < 32)
        v5 = v4 - 25;
      v3[2] = v2;
      v3[3] = (2 * (v5 >> 3)) | 1;
    }
    swift_bridgeObjectRetain();
    sub_245C4BAD0((unint64_t)(v3 + 4), v2, v1);
    v1 = v6;
    swift_bridgeObjectRelease();
    if (v1 == v2)
      break;
    __break(1u);
LABEL_10:
    swift_bridgeObjectRetain();
    v2 = sub_245C8F034();
    swift_bridgeObjectRelease();
    if (!v2)
      return (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  return v3;
}

void sub_245C48B90(uint64_t *a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  void *v16;
  _QWORD *v17;
  uint64_t (*v18)(void);
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(void);
  uint64_t v25;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v34;
  unsigned int v35;
  unsigned int v36;
  id *v37;
  void *v38;
  _QWORD *v39;
  uint64_t (*v40)(void);
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t (*v46)(void);
  uint64_t v47;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v56;
  _QWORD *v57;
  unsigned int v58;
  unsigned int v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  _QWORD *v73;
  uint64_t (*v74)(void);
  _QWORD *v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t (*v80)(void);
  uint64_t v81;
  char v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char v90;
  _QWORD *v91;
  unsigned int v92;
  unsigned int v93;
  void *v94;
  unint64_t v95;
  unint64_t v96;
  char *v97;
  char *v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  BOOL v110;
  unint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  BOOL v120;
  uint64_t v121;
  char v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  BOOL v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  char *v139;
  uint64_t v140;
  char *v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  uint64_t v147;
  char *v148;
  unint64_t v149;
  uint64_t *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  char *v155;
  uint64_t v156;
  uint64_t v157;
  int v158;
  uint64_t v159;
  void **v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;

  v2 = a1;
  v3 = a1[1];
  v4 = sub_245C8F10C();
  if (v4 >= v3)
  {
    if (v3 < 0)
      goto LABEL_171;
    if (v3)
      sub_245C49D14(0, v3, 1, v2);
    return;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_179;
  v153 = v4;
  v150 = v2;
  if (v3 < 2)
  {
    v9 = (char *)MEMORY[0x24BEE4AF8];
    v165 = MEMORY[0x24BEE4AF8];
    v160 = (void **)((MEMORY[0x24BEE4AF8] & 0xFFFFFFFFFFFFFF8) + 32);
    if (v3 != 1)
    {
      v12 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
LABEL_137:
      if (v12 >= 2)
      {
        v144 = *v150;
        do
        {
          v145 = v12 - 2;
          if (v12 < 2)
            goto LABEL_166;
          if (!v144)
            goto LABEL_178;
          v146 = *(_QWORD *)&v9[16 * v145 + 32];
          v147 = *(_QWORD *)&v9[16 * v12 + 24];
          sub_245C4A00C((void **)(v144 + 8 * v146), (void **)(v144 + 8 * *(_QWORD *)&v9[16 * v12 + 16]), (char *)(v144 + 8 * v147), v160);
          if (v1)
            break;
          if (v147 < v146)
            goto LABEL_167;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v9 = sub_245C4AA70((uint64_t)v9);
          if (v145 >= *((_QWORD *)v9 + 2))
            goto LABEL_168;
          v148 = &v9[16 * v145 + 32];
          *(_QWORD *)v148 = v146;
          *((_QWORD *)v148 + 1) = v147;
          v149 = *((_QWORD *)v9 + 2);
          if (v12 > v149)
            goto LABEL_169;
          memmove(&v9[16 * v12 + 16], &v9[16 * v12 + 32], 16 * (v149 - v12));
          *((_QWORD *)v9 + 2) = v149 - 1;
          v12 = v149 - 1;
        }
        while (v149 > 2);
      }
LABEL_148:
      swift_bridgeObjectRelease();
      *(_QWORD *)((v165 & 0xFFFFFFFFFFFFF8) + 0x10) = 0;
      sub_245C8EE00();
      swift_bridgeObjectRelease();
      return;
    }
  }
  else
  {
    v6 = v2;
    v7 = v5 >> 1;
    type metadata accessor for SCMLPeopleDetectionAttribute();
    v8 = sub_245C8EE18();
    *(_QWORD *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10) = v7;
    v2 = v6;
    v160 = (void **)((v8 & 0xFFFFFFFFFFFFFF8) + 32);
    v165 = v8;
  }
  v10 = 0;
  v11 = *v2;
  v151 = *v2 - 8;
  v152 = *v2 + 16;
  v9 = (char *)MEMORY[0x24BEE4AF8];
  v156 = v3;
  v161 = *v2;
  while (2)
  {
    v13 = v10;
    v14 = v10 + 1;
    v155 = v9;
    v157 = v10;
    if (v10 + 1 >= v3)
      goto LABEL_58;
    v15 = *(_QWORD **)(v11 + 8 * v14);
    v16 = *(void **)(v11 + 8 * v10);
    v17 = (_QWORD *)MEMORY[0x24BEE4EA0];
    v18 = *(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v15) + 0x60);
    v19 = v15;
    v20 = v16;
    v21 = v18();
    v23 = v22;
    v24 = *(uint64_t (**)(void))((*v17 & *v20) + 0x60);
    if (v21 == v24() && v23 == v25)
    {
      v28 = swift_bridgeObjectRelease_n();
    }
    else
    {
      v27 = sub_245C8F118();
      swift_bridgeObjectRelease();
      v28 = swift_bridgeObjectRelease();
      if ((v27 & 1) == 0)
      {
        v29 = ((uint64_t (*)(uint64_t))v18)(v28);
        v31 = v30;
        if (v29 == v24() && v31 == v32)
          v158 = 0;
        else
          v158 = sub_245C8F118();
        v3 = v156;
        v13 = v157;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        goto LABEL_30;
      }
    }
    v34 = (_QWORD *)MEMORY[0x24BEE4EA0];
    v35 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v19) + 0x78))(v28);
    v36 = (*(uint64_t (**)(void))((*v34 & *v20) + 0x78))();

    v158 = v35 < v36;
    v3 = v156;
    v13 = v157;
LABEL_30:
    v14 = v13 + 2;
    v11 = v161;
    if (v13 + 2 >= v3)
      goto LABEL_50;
    v37 = (id *)(v152 + 8 * v13);
    do
    {
      v162 = v14;
      v38 = *(v37 - 1);
      v39 = (_QWORD *)MEMORY[0x24BEE4EA0];
      v40 = *(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *(_QWORD *)*v37) + 0x60);
      v41 = *v37;
      v42 = v38;
      v43 = v40();
      v45 = v44;
      v46 = *(uint64_t (**)(void))((*v39 & *v42) + 0x60);
      if (v43 == v46() && v45 == v47)
      {
        v50 = swift_bridgeObjectRelease_n();
LABEL_43:
        v57 = (_QWORD *)MEMORY[0x24BEE4EA0];
        v58 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v41) + 0x78))(v50);
        v59 = (*(uint64_t (**)(void))((*v57 & *v42) + 0x78))();

        v56 = v58 < v59;
        v9 = v155;
        goto LABEL_46;
      }
      v49 = sub_245C8F118();
      swift_bridgeObjectRelease();
      v50 = swift_bridgeObjectRelease();
      if ((v49 & 1) != 0)
        goto LABEL_43;
      v51 = ((uint64_t (*)(uint64_t))v40)(v50);
      v53 = v52;
      if (v51 == v46() && v53 == v54)
        v56 = 0;
      else
        v56 = sub_245C8F118();
      v9 = v155;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

LABEL_46:
      v3 = v156;
      v11 = v161;
      v14 = v162;
      if (((v158 ^ v56) & 1) != 0)
        goto LABEL_49;
      v14 = v162 + 1;
      ++v37;
    }
    while (v156 != v162 + 1);
    v14 = v156;
LABEL_49:
    v13 = v157;
LABEL_50:
    if ((v158 & 1) != 0)
    {
      if (v14 < v13)
        goto LABEL_172;
      if (v13 < v14)
      {
        v60 = (uint64_t *)(v151 + 8 * v14);
        v61 = v14;
        v62 = v13;
        v63 = (uint64_t *)(v11 + 8 * v13);
        do
        {
          if (v62 != --v61)
          {
            if (!v11)
              goto LABEL_177;
            v64 = *v63;
            *v63 = *v60;
            *v60 = v64;
          }
          ++v62;
          --v60;
          ++v63;
        }
        while (v62 < v61);
      }
    }
LABEL_58:
    if (v14 >= v3)
      goto LABEL_89;
    if (__OFSUB__(v14, v13))
      goto LABEL_170;
    if (v14 - v13 >= v153)
      goto LABEL_89;
    if (__OFADD__(v13, v153))
      goto LABEL_173;
    if (v13 + v153 >= v3)
      v65 = v3;
    else
      v65 = v13 + v153;
    if (v65 >= v13)
    {
      if (v14 == v65)
        goto LABEL_89;
      v66 = v151 + 8 * v14;
      v154 = v65;
      while (2)
      {
        v68 = v66;
        v69 = *(_QWORD **)(v11 + 8 * v14);
        v70 = v13;
        v159 = v68;
        v71 = v68;
        v163 = v14;
        while (2)
        {
          v72 = *(void **)v71;
          v73 = (_QWORD *)MEMORY[0x24BEE4EA0];
          v74 = *(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v69) + 0x60);
          v75 = v69;
          v76 = v72;
          v77 = v74();
          v79 = v78;
          v80 = *(uint64_t (**)(void))((*v73 & *v76) + 0x60);
          if (v77 == v80() && v79 == v81)
          {
            v84 = swift_bridgeObjectRelease_n();
LABEL_84:
            v91 = (_QWORD *)MEMORY[0x24BEE4EA0];
            v92 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v75) + 0x78))(v84);
            v93 = (*(uint64_t (**)(void))((*v91 & *v76) + 0x78))();

            if (v92 >= v93)
              goto LABEL_69;
LABEL_85:
            v11 = v161;
            if (!v161)
              goto LABEL_175;
            v94 = *(void **)v71;
            v69 = *(_QWORD **)(v71 + 8);
            *(_QWORD *)v71 = v69;
            *(_QWORD *)(v71 + 8) = v94;
            v71 -= 8;
            ++v70;
            v67 = v163;
            if (v163 == v70)
              goto LABEL_70;
            continue;
          }
          break;
        }
        v83 = sub_245C8F118();
        swift_bridgeObjectRelease();
        v84 = swift_bridgeObjectRelease();
        if ((v83 & 1) != 0)
          goto LABEL_84;
        v85 = ((uint64_t (*)(uint64_t))v74)(v84);
        v87 = v86;
        if (v85 != v80() || v87 != v88)
        {
          v90 = sub_245C8F118();

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v90 & 1) == 0)
            goto LABEL_69;
          goto LABEL_85;
        }

        swift_bridgeObjectRelease_n();
LABEL_69:
        v11 = v161;
        v67 = v163;
LABEL_70:
        v14 = v67 + 1;
        v13 = v157;
        v66 = v159 + 8;
        if (v14 != v154)
          continue;
        break;
      }
      v14 = v154;
      v9 = v155;
LABEL_89:
      if (v14 < v13)
        goto LABEL_165;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v9 = sub_245C4A828(0, *((_QWORD *)v9 + 2) + 1, 1, v9);
      v96 = *((_QWORD *)v9 + 2);
      v95 = *((_QWORD *)v9 + 3);
      v12 = v96 + 1;
      if (v96 >= v95 >> 1)
        v9 = sub_245C4A828((char *)(v95 > 1), v96 + 1, 1, v9);
      *((_QWORD *)v9 + 2) = v12;
      v97 = v9 + 32;
      v98 = &v9[16 * v96 + 32];
      *(_QWORD *)v98 = v157;
      *((_QWORD *)v98 + 1) = v14;
      v164 = v14;
      if (v96)
      {
        while (2)
        {
          v99 = v12 - 1;
          if (v12 >= 4)
          {
            v104 = &v97[16 * v12];
            v105 = *((_QWORD *)v104 - 8);
            v106 = *((_QWORD *)v104 - 7);
            v110 = __OFSUB__(v106, v105);
            v107 = v106 - v105;
            if (v110)
              goto LABEL_154;
            v109 = *((_QWORD *)v104 - 6);
            v108 = *((_QWORD *)v104 - 5);
            v110 = __OFSUB__(v108, v109);
            v102 = v108 - v109;
            v103 = v110;
            if (v110)
              goto LABEL_155;
            v111 = v12 - 2;
            v112 = &v97[16 * v12 - 32];
            v114 = *(_QWORD *)v112;
            v113 = *((_QWORD *)v112 + 1);
            v110 = __OFSUB__(v113, v114);
            v115 = v113 - v114;
            if (v110)
              goto LABEL_157;
            v110 = __OFADD__(v102, v115);
            v116 = v102 + v115;
            if (v110)
              goto LABEL_160;
            if (v116 >= v107)
            {
              v134 = &v97[16 * v99];
              v136 = *(_QWORD *)v134;
              v135 = *((_QWORD *)v134 + 1);
              v110 = __OFSUB__(v135, v136);
              v137 = v135 - v136;
              if (v110)
                goto LABEL_164;
              v127 = v102 < v137;
            }
            else
            {
LABEL_108:
              if ((v103 & 1) != 0)
                goto LABEL_156;
              v111 = v12 - 2;
              v117 = &v97[16 * v12 - 32];
              v119 = *(_QWORD *)v117;
              v118 = *((_QWORD *)v117 + 1);
              v120 = __OFSUB__(v118, v119);
              v121 = v118 - v119;
              v122 = v120;
              if (v120)
                goto LABEL_159;
              v123 = &v97[16 * v99];
              v125 = *(_QWORD *)v123;
              v124 = *((_QWORD *)v123 + 1);
              v110 = __OFSUB__(v124, v125);
              v126 = v124 - v125;
              if (v110)
                goto LABEL_162;
              if (__OFADD__(v121, v126))
                goto LABEL_163;
              if (v121 + v126 < v102)
                goto LABEL_120;
              v127 = v102 < v126;
            }
            if (v127)
              v99 = v111;
          }
          else
          {
            if (v12 == 3)
            {
              v101 = *((_QWORD *)v9 + 4);
              v100 = *((_QWORD *)v9 + 5);
              v110 = __OFSUB__(v100, v101);
              v102 = v100 - v101;
              v103 = v110;
              goto LABEL_108;
            }
            v128 = *((_QWORD *)v9 + 4);
            v129 = *((_QWORD *)v9 + 5);
            v110 = __OFSUB__(v129, v128);
            v121 = v129 - v128;
            v122 = v110;
LABEL_120:
            if ((v122 & 1) != 0)
              goto LABEL_158;
            v130 = &v97[16 * v99];
            v132 = *(_QWORD *)v130;
            v131 = *((_QWORD *)v130 + 1);
            v110 = __OFSUB__(v131, v132);
            v133 = v131 - v132;
            if (v110)
              goto LABEL_161;
            if (v133 < v121)
              goto LABEL_14;
          }
          v138 = v99 - 1;
          if (v99 - 1 >= v12)
          {
            __break(1u);
LABEL_151:
            __break(1u);
LABEL_152:
            __break(1u);
LABEL_153:
            __break(1u);
LABEL_154:
            __break(1u);
LABEL_155:
            __break(1u);
LABEL_156:
            __break(1u);
LABEL_157:
            __break(1u);
LABEL_158:
            __break(1u);
LABEL_159:
            __break(1u);
LABEL_160:
            __break(1u);
LABEL_161:
            __break(1u);
LABEL_162:
            __break(1u);
LABEL_163:
            __break(1u);
LABEL_164:
            __break(1u);
LABEL_165:
            __break(1u);
LABEL_166:
            __break(1u);
LABEL_167:
            __break(1u);
LABEL_168:
            __break(1u);
LABEL_169:
            __break(1u);
LABEL_170:
            __break(1u);
LABEL_171:
            __break(1u);
LABEL_172:
            __break(1u);
LABEL_173:
            __break(1u);
            goto LABEL_174;
          }
          if (!v11)
            goto LABEL_176;
          v139 = &v97[16 * v138];
          v140 = *(_QWORD *)v139;
          v141 = &v97[16 * v99];
          v142 = *((_QWORD *)v141 + 1);
          sub_245C4A00C((void **)(v11 + 8 * *(_QWORD *)v139), (void **)(v11 + 8 * *(_QWORD *)v141), (char *)(v11 + 8 * v142), v160);
          if (v1)
            goto LABEL_148;
          if (v142 < v140)
            goto LABEL_151;
          if (v99 > *((_QWORD *)v9 + 2))
            goto LABEL_152;
          *(_QWORD *)v139 = v140;
          *(_QWORD *)&v97[16 * v138 + 8] = v142;
          v143 = *((_QWORD *)v9 + 2);
          if (v99 >= v143)
            goto LABEL_153;
          v12 = v143 - 1;
          memmove(&v97[16 * v99], v141 + 16, 16 * (v143 - 1 - v99));
          *((_QWORD *)v9 + 2) = v143 - 1;
          if (v143 <= 2)
            goto LABEL_14;
          continue;
        }
      }
      v12 = 1;
LABEL_14:
      v3 = v156;
      v10 = v164;
      if (v164 >= v156)
        goto LABEL_137;
      continue;
    }
    break;
  }
LABEL_174:
  __break(1u);
LABEL_175:
  __break(1u);
LABEL_176:
  __break(1u);
LABEL_177:
  __break(1u);
LABEL_178:
  __break(1u);
LABEL_179:
  sub_245C8F01C();
  __break(1u);
}

uint64_t sub_245C4962C(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  int v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  BOOL v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  BOOL v55;
  unint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  BOOL v65;
  uint64_t v66;
  char v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  BOOL v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  char *v88;
  unint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  char *v94;
  uint64_t v95;
  unint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  unint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *__dst;

  v3 = a1[1];
  result = sub_245C8F10C();
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_152;
    if (v3)
      return sub_245C49F40(0, v3, 1, a1);
    return result;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_160;
  v105 = result;
  v102 = a1;
  if (v3 < 2)
  {
    v8 = MEMORY[0x24BEE4AF8];
    __dst = (char *)(MEMORY[0x24BEE4AF8] + 32);
    if (v3 != 1)
    {
      v12 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
      v11 = (char *)MEMORY[0x24BEE4AF8];
LABEL_118:
      v94 = v11;
      v104 = v8;
      if (v12 >= 2)
      {
        v95 = *v102;
        do
        {
          v96 = v12 - 2;
          if (v12 < 2)
            goto LABEL_147;
          if (!v95)
            goto LABEL_159;
          v97 = v94;
          v98 = *(_QWORD *)&v94[16 * v96 + 32];
          v99 = *(_QWORD *)&v94[16 * v12 + 24];
          sub_245C4A590((char *)(v95 + 16 * v98), (char *)(v95 + 16 * *(_QWORD *)&v94[16 * v12 + 16]), v95 + 16 * v99, __dst);
          if (v1)
            break;
          if (v99 < v98)
            goto LABEL_148;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v97 = sub_245C4AA70((uint64_t)v97);
          if (v96 >= *((_QWORD *)v97 + 2))
            goto LABEL_149;
          v100 = &v97[16 * v96 + 32];
          *(_QWORD *)v100 = v98;
          *((_QWORD *)v100 + 1) = v99;
          v101 = *((_QWORD *)v97 + 2);
          if (v12 > v101)
            goto LABEL_150;
          memmove(&v97[16 * v12 + 16], &v97[16 * v12 + 32], 16 * (v101 - v12));
          v94 = v97;
          *((_QWORD *)v97 + 2) = v101 - 1;
          v12 = v101 - 1;
        }
        while (v101 > 2);
      }
LABEL_115:
      swift_bridgeObjectRelease();
      *(_QWORD *)(v104 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    v104 = MEMORY[0x24BEE4AF8];
  }
  else
  {
    v6 = v5 >> 1;
    v7 = sub_245C8EE18();
    *(_QWORD *)(v7 + 16) = v6;
    v104 = v7;
    __dst = (char *)(v7 + 32);
  }
  v9 = 0;
  v10 = *a1;
  v103 = v10 + 8;
  v11 = (char *)MEMORY[0x24BEE4AF8];
  v106 = v3;
  while (1)
  {
    v13 = v9++;
    if (v9 >= v3)
      goto LABEL_46;
    v14 = (uint64_t *)(v10 + 16 * v9);
    v15 = *v14;
    v16 = v14[1];
    v17 = (_QWORD *)(v10 + 16 * v13);
    if (v15 == *v17 && v16 == v17[1])
    {
      v20 = v13 + 2;
      if (v13 + 2 >= v3)
        goto LABEL_45;
      v19 = 0;
    }
    else
    {
      v19 = sub_245C8F118();
      v20 = v13 + 2;
      if (v13 + 2 >= v3)
        goto LABEL_36;
    }
    v21 = (_QWORD *)(v103 + 16 * v20);
    do
    {
      v23 = (_QWORD *)(v10 + 16 * v9);
      if (*(v21 - 1) == *v23 && *v21 == v23[1])
      {
        if ((v19 & 1) != 0)
          goto LABEL_37;
      }
      else if (((v19 ^ sub_245C8F118()) & 1) != 0)
      {
        goto LABEL_36;
      }
      v21 += 2;
      v22 = v20 + 1;
      v9 = v20;
      v20 = v22;
    }
    while (v22 < v3);
    v20 = v22;
LABEL_36:
    v9 = v20;
    if ((v19 & 1) != 0)
    {
LABEL_37:
      if (v20 < v13)
        goto LABEL_155;
      if (v13 < v20)
      {
        v25 = 16 * v20;
        v26 = 16 * v13;
        v27 = v20;
        v28 = v13;
        do
        {
          if (v28 != --v27)
          {
            if (!v10)
              goto LABEL_158;
            v29 = v10 + v25;
            v30 = *(_QWORD *)(v10 + v26);
            v31 = *(_QWORD *)(v10 + v26 + 8);
            *(_OWORD *)(v10 + v26) = *(_OWORD *)(v10 + v25 - 16);
            *(_QWORD *)(v29 - 16) = v30;
            *(_QWORD *)(v29 - 8) = v31;
          }
          ++v28;
          v25 -= 16;
          v26 += 16;
        }
        while (v28 < v27);
      }
LABEL_45:
      v9 = v20;
    }
LABEL_46:
    if (v9 < v3)
    {
      if (__OFSUB__(v9, v13))
        goto LABEL_151;
      if (v9 - v13 < v105)
        break;
    }
LABEL_67:
    if (v9 < v13)
      goto LABEL_146;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v11 = sub_245C4A828(0, *((_QWORD *)v11 + 2) + 1, 1, v11);
    v41 = *((_QWORD *)v11 + 2);
    v40 = *((_QWORD *)v11 + 3);
    v12 = v41 + 1;
    if (v41 >= v40 >> 1)
      v11 = sub_245C4A828((char *)(v40 > 1), v41 + 1, 1, v11);
    *((_QWORD *)v11 + 2) = v12;
    v42 = v11 + 32;
    v43 = &v11[16 * v41 + 32];
    *(_QWORD *)v43 = v13;
    *((_QWORD *)v43 + 1) = v9;
    if (v41)
    {
      v107 = v9;
      while (1)
      {
        v44 = v12 - 1;
        if (v12 >= 4)
        {
          v49 = &v42[16 * v12];
          v50 = *((_QWORD *)v49 - 8);
          v51 = *((_QWORD *)v49 - 7);
          v55 = __OFSUB__(v51, v50);
          v52 = v51 - v50;
          if (v55)
            goto LABEL_135;
          v54 = *((_QWORD *)v49 - 6);
          v53 = *((_QWORD *)v49 - 5);
          v55 = __OFSUB__(v53, v54);
          v47 = v53 - v54;
          v48 = v55;
          if (v55)
            goto LABEL_136;
          v56 = v12 - 2;
          v57 = &v42[16 * v12 - 32];
          v59 = *(_QWORD *)v57;
          v58 = *((_QWORD *)v57 + 1);
          v55 = __OFSUB__(v58, v59);
          v60 = v58 - v59;
          if (v55)
            goto LABEL_138;
          v55 = __OFADD__(v47, v60);
          v61 = v47 + v60;
          if (v55)
            goto LABEL_141;
          if (v61 >= v52)
          {
            v79 = &v42[16 * v44];
            v81 = *(_QWORD *)v79;
            v80 = *((_QWORD *)v79 + 1);
            v55 = __OFSUB__(v80, v81);
            v82 = v80 - v81;
            if (v55)
              goto LABEL_145;
            v72 = v47 < v82;
            goto LABEL_105;
          }
        }
        else
        {
          if (v12 != 3)
          {
            v73 = *((_QWORD *)v11 + 4);
            v74 = *((_QWORD *)v11 + 5);
            v55 = __OFSUB__(v74, v73);
            v66 = v74 - v73;
            v67 = v55;
            goto LABEL_99;
          }
          v46 = *((_QWORD *)v11 + 4);
          v45 = *((_QWORD *)v11 + 5);
          v55 = __OFSUB__(v45, v46);
          v47 = v45 - v46;
          v48 = v55;
        }
        if ((v48 & 1) != 0)
          goto LABEL_137;
        v56 = v12 - 2;
        v62 = &v42[16 * v12 - 32];
        v64 = *(_QWORD *)v62;
        v63 = *((_QWORD *)v62 + 1);
        v65 = __OFSUB__(v63, v64);
        v66 = v63 - v64;
        v67 = v65;
        if (v65)
          goto LABEL_140;
        v68 = &v42[16 * v44];
        v70 = *(_QWORD *)v68;
        v69 = *((_QWORD *)v68 + 1);
        v55 = __OFSUB__(v69, v70);
        v71 = v69 - v70;
        if (v55)
          goto LABEL_143;
        if (__OFADD__(v66, v71))
          goto LABEL_144;
        if (v66 + v71 >= v47)
        {
          v72 = v47 < v71;
LABEL_105:
          if (v72)
            v44 = v56;
          goto LABEL_107;
        }
LABEL_99:
        if ((v67 & 1) != 0)
          goto LABEL_139;
        v75 = &v42[16 * v44];
        v77 = *(_QWORD *)v75;
        v76 = *((_QWORD *)v75 + 1);
        v55 = __OFSUB__(v76, v77);
        v78 = v76 - v77;
        if (v55)
          goto LABEL_142;
        if (v78 < v66)
          goto LABEL_15;
LABEL_107:
        v83 = v44 - 1;
        if (v44 - 1 >= v12)
        {
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
LABEL_153:
          __break(1u);
          goto LABEL_154;
        }
        v84 = v10;
        if (!v10)
          goto LABEL_157;
        v85 = v11;
        v86 = &v42[16 * v83];
        v87 = *(_QWORD *)v86;
        v88 = v42;
        v89 = v44;
        v90 = &v42[16 * v44];
        v91 = *((_QWORD *)v90 + 1);
        v92 = v84;
        sub_245C4A590((char *)(v84 + 16 * *(_QWORD *)v86), (char *)(v84 + 16 * *(_QWORD *)v90), v84 + 16 * v91, __dst);
        if (v1)
          goto LABEL_115;
        if (v91 < v87)
          goto LABEL_132;
        if (v89 > *((_QWORD *)v85 + 2))
          goto LABEL_133;
        *(_QWORD *)v86 = v87;
        *(_QWORD *)&v88[16 * v83 + 8] = v91;
        v93 = *((_QWORD *)v85 + 2);
        if (v89 >= v93)
          goto LABEL_134;
        v11 = v85;
        v12 = v93 - 1;
        memmove(v90, v90 + 16, 16 * (v93 - 1 - v89));
        v42 = v88;
        *((_QWORD *)v85 + 2) = v93 - 1;
        v10 = v92;
        v9 = v107;
        if (v93 <= 2)
          goto LABEL_15;
      }
    }
    v12 = 1;
LABEL_15:
    v3 = v106;
    if (v9 >= v106)
    {
      v8 = v104;
      goto LABEL_118;
    }
  }
  if (__OFADD__(v13, v105))
    goto LABEL_153;
  if (v13 + v105 >= v3)
    v32 = v3;
  else
    v32 = v13 + v105;
  if (v32 >= v13)
  {
    if (v9 != v32)
    {
      v33 = (_QWORD *)(v10 + 16 * v9);
      do
      {
        v34 = (uint64_t *)(v10 + 16 * v9);
        v35 = *v34;
        v36 = v34[1];
        v37 = v13;
        v38 = v33;
        do
        {
          v39 = v35 == *(v38 - 2) && v36 == *(v38 - 1);
          if (v39 || (sub_245C8F118() & 1) == 0)
            break;
          if (!v10)
            goto LABEL_156;
          v35 = *v38;
          v36 = v38[1];
          *(_OWORD *)v38 = *((_OWORD *)v38 - 1);
          *(v38 - 1) = v36;
          *(v38 - 2) = v35;
          v38 -= 2;
          ++v37;
        }
        while (v9 != v37);
        ++v9;
        v33 += 2;
      }
      while (v9 != v32);
      v9 = v32;
    }
    goto LABEL_67;
  }
LABEL_154:
  __break(1u);
LABEL_155:
  __break(1u);
LABEL_156:
  __break(1u);
LABEL_157:
  __break(1u);
LABEL_158:
  __break(1u);
LABEL_159:
  __break(1u);
LABEL_160:
  result = sub_245C8F01C();
  __break(1u);
  return result;
}

void sub_245C49D14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  void *v8;
  _QWORD *v9;
  uint64_t (*v10)(void);
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(void);
  uint64_t v17;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v26;
  _QWORD *v27;
  unsigned int v28;
  unsigned int v29;
  void *v30;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  if (a3 != a2)
  {
    v34 = *a4;
    v4 = *a4 + 8 * a3 - 8;
LABEL_6:
    v6 = *(_QWORD **)(v34 + 8 * a3);
    v7 = a1;
    v33 = v4;
    v35 = a3;
    while (1)
    {
      v8 = *(void **)v4;
      v9 = (_QWORD *)MEMORY[0x24BEE4EA0];
      v10 = *(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v6) + 0x60);
      v11 = v6;
      v12 = v8;
      v13 = v10();
      v15 = v14;
      v16 = *(uint64_t (**)(void))((*v9 & *v12) + 0x60);
      if (v13 == v16() && v15 == v17)
        break;
      v19 = sub_245C8F118();
      swift_bridgeObjectRelease();
      v20 = swift_bridgeObjectRelease();
      if ((v19 & 1) != 0)
        goto LABEL_19;
      v21 = ((uint64_t (*)(uint64_t))v10)(v20);
      v23 = v22;
      if (v21 == v16() && v23 == v24)
      {

        swift_bridgeObjectRelease_n();
        v5 = v35;
LABEL_5:
        a3 = v5 + 1;
        v4 = v33 + 8;
        if (a3 == a2)
          return;
        goto LABEL_6;
      }
      v26 = sub_245C8F118();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v5 = v35;
      if ((v26 & 1) == 0)
        goto LABEL_5;
LABEL_20:
      if (!v34)
      {
        __break(1u);
        return;
      }
      v30 = *(void **)v4;
      v6 = *(_QWORD **)(v4 + 8);
      *(_QWORD *)v4 = v6;
      *(_QWORD *)(v4 + 8) = v30;
      v4 -= 8;
      if (v5 == ++v7)
        goto LABEL_5;
    }
    v20 = swift_bridgeObjectRelease_n();
LABEL_19:
    v27 = (_QWORD *)MEMORY[0x24BEE4EA0];
    v28 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v11) + 0x78))(v20);
    v29 = (*(uint64_t (**)(void))((*v27 & *v12) + 0x78))();

    v5 = v35;
    if (v28 >= v29)
      goto LABEL_5;
    goto LABEL_20;
  }
}

uint64_t sub_245C49F40(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  BOOL v13;

  if (a3 != a2)
  {
    v4 = a3;
    v6 = result;
    v7 = *a4;
    v8 = *a4 + 16 * a3;
LABEL_5:
    v9 = (uint64_t *)(v7 + 16 * v4);
    result = *v9;
    v10 = v9[1];
    v11 = v6;
    v12 = (uint64_t *)v8;
    while (1)
    {
      v13 = result == *(v12 - 2) && v10 == *(v12 - 1);
      if (v13 || (result = sub_245C8F118(), (result & 1) == 0))
      {
LABEL_4:
        ++v4;
        v8 += 16;
        if (v4 == a2)
          return result;
        goto LABEL_5;
      }
      if (!v7)
        break;
      result = *v12;
      v10 = v12[1];
      *(_OWORD *)v12 = *((_OWORD *)v12 - 1);
      *(v12 - 1) = v10;
      *(v12 - 2) = result;
      v12 -= 2;
      if (v4 == ++v11)
        goto LABEL_4;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_245C4A00C(void **__src, void **a2, char *a3, void **__dst)
{
  char *v5;
  void **v6;
  char *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void **v14;
  void **v15;
  void *v16;
  _QWORD *v17;
  uint64_t (*v18)(void);
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(void);
  uint64_t v25;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v34;
  _QWORD *v35;
  unsigned int v36;
  unsigned int v37;
  void **v38;
  void **v39;
  void **v40;
  char *v41;
  char *v42;
  _QWORD *v43;
  char *v44;
  void *v45;
  _QWORD *v46;
  uint64_t (*v47)(void);
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t (*v53)(void);
  uint64_t v54;
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v63;
  char *v64;
  _QWORD *v65;
  unsigned int v66;
  unsigned int v67;
  uint64_t result;
  char *v69;
  char *v70;
  void **v71;
  char *v72;
  void **v73;
  char *v74;
  char *v75;
  char *v76;
  char *v77;
  void **v78;
  void *v79;

  v5 = a3;
  v6 = a2;
  v7 = (char *)__src;
  v8 = (char *)a2 - (char *)__src;
  v9 = (char *)a2 - (char *)__src + 7;
  if ((char *)a2 - (char *)__src >= 0)
    v9 = (char *)a2 - (char *)__src;
  v10 = v9 >> 3;
  v11 = a3 - (char *)a2;
  v12 = a3 - (char *)a2 + 7;
  if (a3 - (char *)a2 >= 0)
    v12 = a3 - (char *)a2;
  v13 = v12 >> 3;
  v79 = __src;
  v78 = __dst;
  if (v10 >= v12 >> 3)
  {
    if (v11 < -7)
      goto LABEL_70;
    if (__dst != a2 || &a2[v13] <= __dst)
      memmove(__dst, a2, 8 * v13);
    v69 = (char *)__dst;
    v41 = (char *)&__dst[v13];
    v77 = v41;
    v79 = v6;
    if (v7 >= (char *)v6 || v11 < 8)
    {
LABEL_69:
      sub_245C4A920(&v79, (const void **)&v78, &v77);
      return 1;
    }
    v42 = (char *)v6;
    v74 = v7;
    while (1)
    {
      v70 = v41;
      v72 = (char *)v6;
      v76 = v5;
      v44 = v41 - 8;
      v43 = (_QWORD *)*((_QWORD *)v41 - 1);
      v45 = (void *)*((_QWORD *)v42 - 1);
      v42 -= 8;
      v46 = (_QWORD *)MEMORY[0x24BEE4EA0];
      v47 = *(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v43) + 0x60);
      v48 = v43;
      v49 = v45;
      v50 = v47();
      v52 = v51;
      v53 = *(uint64_t (**)(void))((*v46 & *v49) + 0x60);
      if (v50 == v53() && v52 == v54)
        break;
      v56 = sub_245C8F118();
      swift_bridgeObjectRelease();
      v57 = swift_bridgeObjectRelease();
      if ((v56 & 1) != 0)
        goto LABEL_59;
      v58 = ((uint64_t (*)(uint64_t))v47)(v57);
      v60 = v59;
      if (v58 == v53() && v60 == v61)
      {

        swift_bridgeObjectRelease_n();
        v64 = v76;
        v5 = v76 - 8;
        v41 = v70;
LABEL_64:
        v77 = v44;
        v42 = v72;
        if (v64 < v41 || v5 >= v41 || v64 != v41)
          *(_QWORD *)v5 = *(_QWORD *)v44;
        v41 = v44;
        if (v72 <= v74)
          goto LABEL_69;
        goto LABEL_46;
      }
      v63 = sub_245C8F118();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v64 = v76;
      v5 = v76 - 8;
      v41 = v70;
      if ((v63 & 1) == 0)
        goto LABEL_64;
LABEL_60:
      if (v64 != v72 || v5 >= v72)
        *(_QWORD *)v5 = *(_QWORD *)v42;
      v79 = v42;
      if (v42 <= v74)
        goto LABEL_69;
LABEL_46:
      v6 = (void **)v42;
      if (v41 <= v69)
        goto LABEL_69;
    }
    v57 = swift_bridgeObjectRelease_n();
LABEL_59:
    v65 = (_QWORD *)MEMORY[0x24BEE4EA0];
    v66 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v48) + 0x78))(v57);
    v67 = (*(uint64_t (**)(void))((*v65 & *v49) + 0x78))();

    v64 = v76;
    v5 = v76 - 8;
    v41 = v70;
    if (v66 >= v67)
      goto LABEL_64;
    goto LABEL_60;
  }
  if (v8 >= -7)
  {
    if (__dst != __src || &__src[v10] <= __dst)
      memmove(__dst, __src, 8 * v10);
    v71 = &__dst[v10];
    v77 = (char *)v71;
    if (v6 < (void **)v5 && v8 >= 8)
    {
      v14 = __dst;
      v75 = v5;
      while (1)
      {
        v73 = (void **)v7;
        v15 = v6;
        v16 = *v14;
        v17 = (_QWORD *)MEMORY[0x24BEE4EA0];
        v18 = *(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *(_QWORD *)*v6) + 0x60);
        v19 = *v6;
        v20 = v16;
        v21 = v18();
        v23 = v22;
        v24 = *(uint64_t (**)(void))((*v17 & *v20) + 0x60);
        if (v21 == v24() && v23 == v25)
        {
          v28 = swift_bridgeObjectRelease_n();
        }
        else
        {
          v27 = sub_245C8F118();
          swift_bridgeObjectRelease();
          v28 = swift_bridgeObjectRelease();
          if ((v27 & 1) == 0)
          {
            v29 = ((uint64_t (*)(uint64_t))v18)(v28);
            v31 = v30;
            if (v29 == v24() && v31 == v32)
            {

              swift_bridgeObjectRelease_n();
            }
            else
            {
              v34 = sub_245C8F118();

              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if ((v34 & 1) != 0)
                goto LABEL_26;
            }
            goto LABEL_31;
          }
        }
        v35 = (_QWORD *)MEMORY[0x24BEE4EA0];
        v36 = (*(uint64_t (**)(uint64_t))((*MEMORY[0x24BEE4EA0] & *v19) + 0x78))(v28);
        v37 = (*(uint64_t (**)(void))((*v35 & *v20) + 0x78))();

        if (v36 < v37)
        {
LABEL_26:
          v38 = v15 + 1;
          v39 = v73;
          v40 = (void **)v75;
          if (v73 < v15 || v73 >= v38 || v73 != v15)
            *v73 = *v15;
          goto LABEL_34;
        }
LABEL_31:
        v39 = v73;
        v40 = (void **)v75;
        if (v73 != v14)
          *v73 = *v14;
        v78 = ++v14;
        v38 = v15;
LABEL_34:
        v7 = (char *)(v39 + 1);
        if (v14 < v71)
        {
          v6 = v38;
          if (v38 < v40)
            continue;
        }
        v79 = v7;
        goto LABEL_69;
      }
    }
    goto LABEL_69;
  }
LABEL_70:
  result = sub_245C8F064();
  __break(1u);
  return result;
}

uint64_t sub_245C4A590(char *__src, char *a2, unint64_t a3, char *__dst)
{
  char *v4;
  char *v6;
  char *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  BOOL v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t result;
  char *v25;
  char *v26;
  char *v27;

  v4 = __dst;
  v6 = a2;
  v7 = __src;
  v8 = a2 - __src;
  v9 = a2 - __src + 15;
  if (a2 - __src >= 0)
    v9 = a2 - __src;
  v10 = v9 >> 4;
  v11 = a3 - (_QWORD)a2;
  v12 = a3 - (_QWORD)a2 + 15;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v12 = a3 - (_QWORD)a2;
  v13 = v12 >> 4;
  v27 = __src;
  v26 = __dst;
  if (v10 >= v12 >> 4)
  {
    if (v11 >= -15)
    {
      if (__dst != a2 || &a2[16 * v13] <= __dst)
        memmove(__dst, a2, 16 * v13);
      v17 = &v4[16 * v13];
      v25 = v17;
      v27 = v6;
      if (v7 < v6 && v11 >= 16)
      {
        v18 = (char *)(a3 - 16);
        v19 = v6;
        while (1)
        {
          v20 = v18 + 16;
          v21 = *((_QWORD *)v19 - 2);
          v22 = *((_QWORD *)v19 - 1);
          v19 -= 16;
          v23 = *((_QWORD *)v17 - 2) == v21 && *((_QWORD *)v17 - 1) == v22;
          if (v23 || (sub_245C8F118() & 1) == 0)
          {
            v25 = v17 - 16;
            if (v20 < v17 || v18 >= v17 || v20 != v17)
              *(_OWORD *)v18 = *((_OWORD *)v17 - 1);
            v19 = v6;
            v17 -= 16;
            if (v6 <= v7)
              goto LABEL_50;
          }
          else
          {
            if (v20 != v6 || v18 >= v6)
              *(_OWORD *)v18 = *(_OWORD *)v19;
            v27 = v19;
            if (v19 <= v7)
              goto LABEL_50;
          }
          v18 -= 16;
          v6 = v19;
          if (v17 <= v4)
            goto LABEL_50;
        }
      }
      goto LABEL_50;
    }
  }
  else if (v8 >= -15)
  {
    if (__dst != __src || &__src[16 * v10] <= __dst)
      memmove(__dst, __src, 16 * v10);
    v14 = &v4[16 * v10];
    v25 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 16)
    {
      do
      {
        v15 = *(_QWORD *)v6 == *(_QWORD *)v4 && *((_QWORD *)v6 + 1) == *((_QWORD *)v4 + 1);
        if (v15 || (sub_245C8F118() & 1) == 0)
        {
          if (v7 != v4)
            *(_OWORD *)v7 = *(_OWORD *)v4;
          v4 += 16;
          v26 = v4;
          v16 = v6;
        }
        else
        {
          v16 = v6 + 16;
          if (v7 < v6 || v7 >= v16 || v7 != v6)
            *(_OWORD *)v7 = *(_OWORD *)v6;
        }
        v7 += 16;
        if (v4 >= v14)
          break;
        v6 = v16;
      }
      while ((unint64_t)v16 < a3);
      v27 = v7;
    }
LABEL_50:
    sub_245C4A9C8((void **)&v27, (const void **)&v26, &v25);
    return 1;
  }
  result = sub_245C8F064();
  __break(1u);
  return result;
}

char *sub_245C4A828(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_2575151D8);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_245C4A920(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *result;
  uint64_t v7;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  v5 = v4 + 7;
  if (v4 >= 0)
    v5 = *a3 - (_QWORD)v3;
  if (v4 <= -8)
  {
    result = (char *)sub_245C8F064();
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v7 = v5 >> 3;
    if (result != v3 || result >= &v3[8 * v7])
      return (char *)memmove(result, v3, 8 * v7);
  }
  return result;
}

char *sub_245C4A9C8(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *result;
  uint64_t v7;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  v5 = v4 + 15;
  if (v4 >= 0)
    v5 = *a3 - (_QWORD)v3;
  if (v4 <= -16)
  {
    result = (char *)sub_245C8F064();
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v7 = v5 >> 4;
    if (result != v3 || result >= &v3[16 * v7])
      return (char *)memmove(result, v3, 16 * v7);
  }
  return result;
}

char *sub_245C4AA70(uint64_t a1)
{
  return sub_245C4A828(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_245C4AA84(unint64_t a1)
{
  unint64_t *v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v3 = sub_245C8F034();
    swift_bridgeObjectRelease();
  }
  else
  {
    v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v4 = *v1;
  if (*v1 >> 62)
  {
    swift_bridgeObjectRetain();
    v5 = sub_245C8F034();
    swift_bridgeObjectRelease();
    v6 = v5 + v3;
    if (!__OFADD__(v5, v3))
      goto LABEL_5;
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  v6 = v5 + v3;
  if (__OFADD__(v5, v3))
    goto LABEL_23;
LABEL_5:
  v4 = *v1;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *v1 = v4;
  v5 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v4 & 0x8000000000000000) == 0 && (v4 & 0x4000000000000000) == 0)
  {
    v8 = v4 & 0xFFFFFFFFFFFFFF8;
    if (v6 <= *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_15;
    v5 = 1;
  }
  if (v4 >> 62)
    goto LABEL_25;
  v9 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (v9 <= v6)
      v9 = v6;
    swift_bridgeObjectRetain();
    v4 = MEMORY[0x249544514](v5, v9, 1, v4);
    swift_bridgeObjectRelease();
    *v1 = v4;
    v8 = v4 & 0xFFFFFFFFFFFFFF8;
LABEL_15:
    result = sub_245C4BAD0(v8 + 8 * *(_QWORD *)(v8 + 16) + 32, (*(_QWORD *)(v8 + 24) >> 1) - *(_QWORD *)(v8 + 16), a1);
    if (v11 >= v3)
      break;
LABEL_24:
    __break(1u);
LABEL_25:
    swift_bridgeObjectRetain();
    v9 = sub_245C8F034();
    swift_bridgeObjectRelease();
  }
  if (v11 < 1)
    goto LABEL_19;
  v12 = *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v13 = __OFADD__(v12, v11);
  v14 = v12 + v11;
  if (!v13)
  {
    *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) = v14;
LABEL_19:
    swift_bridgeObjectRelease();
    return sub_245C8EE00();
  }
  __break(1u);
  return result;
}

uint64_t sub_245C4AC3C(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_245C4AC58(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_245C4AC58(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  size_t v14;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  unint64_t v22;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (!v9)
  {
    v13 = (_QWORD *)MEMORY[0x24BEE4AF8];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_2575151B8);
  v10 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_257515110) - 8);
  v11 = *(_QWORD *)(v10 + 72);
  v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v13 = (_QWORD *)swift_allocObject();
  v14 = _swift_stdlib_malloc_size(v13);
  if (!v11)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v14 - v12 == 0x8000000000000000 && v11 == -1)
    goto LABEL_34;
  v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(v14 - v12) / v11);
LABEL_19:
  v16 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_257515110) - 8);
  v17 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  v18 = (char *)v13 + v17;
  v19 = (char *)a4 + v17;
  if ((a1 & 1) != 0)
  {
    if (v13 < a4 || v18 >= &v19[*(_QWORD *)(v16 + 72) * v8])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  v20 = *(_QWORD *)(v16 + 72) * v8;
  v21 = &v18[v20];
  v22 = (unint64_t)&v19[v20];
  if (v19 >= v21 || (unint64_t)v18 >= v22)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v13;
  }
LABEL_36:
  result = sub_245C8F064();
  __break(1u);
  return result;
}

uint64_t sub_245C4AE40(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  id v33;
  uint64_t v34;
  uint64_t *v35;
  int64_t v36;
  uint64_t v37;
  char v38;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2575151B0);
  v38 = a2;
  v6 = sub_245C8F04C();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v37 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v35 = v2;
  v36 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v36)
      break;
    v22 = (_QWORD *)(v5 + 64);
    v23 = *(_QWORD *)(v37 + 8 * v21);
    ++v13;
    if (!v23)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v36)
        goto LABEL_33;
      v23 = *(_QWORD *)(v37 + 8 * v13);
      if (!v23)
      {
        v24 = v21 + 2;
        if (v24 >= v36)
        {
LABEL_33:
          swift_release();
          v3 = v35;
          if ((v38 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v23 = *(_QWORD *)(v37 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            v13 = v24 + 1;
            if (__OFADD__(v24, 1))
              goto LABEL_42;
            if (v13 >= v36)
              goto LABEL_33;
            v23 = *(_QWORD *)(v37 + 8 * v13);
            ++v24;
            if (v23)
              goto LABEL_30;
          }
        }
        v13 = v24;
      }
    }
LABEL_30:
    v10 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    v29 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v20);
    v31 = *v29;
    v30 = v29[1];
    v32 = *(void **)(*(_QWORD *)(v5 + 56) + 8 * v20);
    if ((v38 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      v33 = v32;
    }
    sub_245C8F16C();
    sub_245C8ECD4();
    result = sub_245C8F19C();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v27 = v16 == v26;
        if (v16 == v26)
          v16 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v17);
    *v18 = v31;
    v18[1] = v30;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v17) = v32;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v35;
  v22 = (_QWORD *)(v5 + 64);
  if ((v38 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v34 = 1 << *(_BYTE *)(v5 + 32);
  if (v34 >= 64)
    bzero(v22, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v34;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_245C4B14C(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  _QWORD *v34;
  _OWORD v35[2];

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_257514E88);
  v6 = sub_245C8F04C();
  v7 = v6;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 1 << *(_BYTE *)(v5 + 32);
    v34 = (_QWORD *)(v5 + 64);
    if (v8 < 64)
      v9 = ~(-1 << v8);
    else
      v9 = -1;
    v10 = v9 & *(_QWORD *)(v5 + 64);
    v33 = (unint64_t)(v8 + 63) >> 6;
    v11 = v6 + 64;
    result = swift_retain();
    v13 = 0;
    while (1)
    {
      if (v10)
      {
        v16 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        v17 = v16 | (v13 << 6);
      }
      else
      {
        v18 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v18 >= v33)
          goto LABEL_34;
        v19 = v34[v18];
        ++v13;
        if (!v19)
        {
          v13 = v18 + 1;
          if (v18 + 1 >= v33)
            goto LABEL_34;
          v19 = v34[v13];
          if (!v19)
          {
            v20 = v18 + 2;
            if (v20 >= v33)
            {
LABEL_34:
              swift_release();
              v3 = v2;
              if ((a2 & 1) != 0)
              {
                v32 = 1 << *(_BYTE *)(v5 + 32);
                if (v32 >= 64)
                  bzero(v34, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v34 = -1 << v32;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v19 = v34[v20];
            if (!v19)
            {
              while (1)
              {
                v13 = v20 + 1;
                if (__OFADD__(v20, 1))
                  goto LABEL_41;
                if (v13 >= v33)
                  goto LABEL_34;
                v19 = v34[v13];
                ++v20;
                if (v19)
                  goto LABEL_21;
              }
            }
            v13 = v20;
          }
        }
LABEL_21:
        v10 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }
      v21 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v17);
      v23 = *v21;
      v22 = v21[1];
      v24 = (_OWORD *)(*(_QWORD *)(v5 + 56) + 32 * v17);
      if ((a2 & 1) != 0)
      {
        sub_245C3AC08(v24, v35);
      }
      else
      {
        sub_245C3ACA4((uint64_t)v24, (uint64_t)v35);
        swift_bridgeObjectRetain();
      }
      sub_245C8F16C();
      sub_245C8ECD4();
      result = sub_245C8F19C();
      v25 = -1 << *(_BYTE *)(v7 + 32);
      v26 = result & ~v25;
      v27 = v26 >> 6;
      if (((-1 << v26) & ~*(_QWORD *)(v11 + 8 * (v26 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v11 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v28 = 0;
        v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          v30 = v27 == v29;
          if (v27 == v29)
            v27 = 0;
          v28 |= v30;
          v31 = *(_QWORD *)(v11 + 8 * v27);
        }
        while (v31 == -1);
        v14 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      v15 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v14);
      *v15 = v23;
      v15[1] = v22;
      result = (uint64_t)sub_245C3AC08(v35, (_OWORD *)(*(_QWORD *)(v7 + 56) + 32 * v14));
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
  *v3 = v7;
  return result;
}

void sub_245C4B448(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t *v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;

  v5 = v4;
  v10 = *v4;
  v12 = sub_245C3FBB8(a2, a3);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v16 = v11;
  v17 = *(_QWORD *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0)
    goto LABEL_7;
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_245C4B73C();
LABEL_7:
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      v19 = v18[7];

      *(_QWORD *)(v19 + 8 * v12) = a1;
      return;
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    v22 = (uint64_t *)(v18[6] + 16 * v12);
    *v22 = a2;
    v22[1] = a3;
    *(_QWORD *)(v18[7] + 8 * v12) = a1;
    v23 = v18[2];
    v24 = __OFADD__(v23, 1);
    v25 = v23 + 1;
    if (!v24)
    {
      v18[2] = v25;
      swift_bridgeObjectRetain();
      return;
    }
    goto LABEL_14;
  }
  sub_245C4AE40(v15, a4 & 1);
  v20 = sub_245C3FBB8(a2, a3);
  if ((v16 & 1) == (v21 & 1))
  {
    v12 = v20;
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  sub_245C8F124();
  __break(1u);
}

_OWORD *sub_245C4B5A4(_OWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  _OWORD *v19;
  _OWORD *result;
  unint64_t v21;
  char v22;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = sub_245C3FBB8(a2, a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        v19 = (_OWORD *)(v18[7] + 32 * v12);
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v19);
        return sub_245C3AC08(a1, v19);
      }
      goto LABEL_11;
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_245C4B8EC();
      goto LABEL_7;
    }
    sub_245C4B14C(v15, a4 & 1);
    v21 = sub_245C3FBB8(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      v12 = v21;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_245C4B6D4(v12, a2, a3, a1, v18);
      return (_OWORD *)swift_bridgeObjectRetain();
    }
  }
  result = (_OWORD *)sub_245C8F124();
  __break(1u);
  return result;
}

_OWORD *sub_245C4B6D4(unint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, _QWORD *a5)
{
  _QWORD *v6;
  _OWORD *result;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a5[(a1 >> 6) + 8] |= 1 << a1;
  v6 = (_QWORD *)(a5[6] + 16 * a1);
  *v6 = a2;
  v6[1] = a3;
  result = sub_245C3AC08(a4, (_OWORD *)(a5[7] + 32 * a1));
  v8 = a5[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a5[2] = v10;
  return result;
}

id sub_245C4B73C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_2575151B0);
  v2 = *v0;
  v3 = sub_245C8F040();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (id)swift_release();
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = v17[1];
    v19 = 8 * v15;
    v20 = *(void **)(*(_QWORD *)(v2 + 56) + v19);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = *v17;
    v21[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    result = v20;
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_245C4B8EC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t *v25;
  _OWORD v26[2];

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_257514E88);
  v2 = *v0;
  v3 = sub_245C8F040();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = (void *)swift_release();
LABEL_28:
    *v1 = v4;
    return result;
  }
  v25 = v1;
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 32 * v15;
    sub_245C3ACA4(*(_QWORD *)(v2 + 56) + 32 * v15, (uint64_t)v26);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = v19;
    v21[1] = v18;
    sub_245C3AC08(v26, (_OWORD *)(*(_QWORD *)(v4 + 56) + v20));
    result = (void *)swift_bridgeObjectRetain();
  }
  v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    result = (void *)swift_release();
    v1 = v25;
    goto LABEL_28;
  }
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_245C4BAD0(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t i;
  void (*v12)(_QWORD *);
  id *v13;
  id v14;
  uint64_t result;
  void (*v16[4])(id *);

  v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    v7 = sub_245C8F034();
    swift_bridgeObjectRelease();
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (!a1)
    goto LABEL_19;
  v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    v10 = sub_245C8F034();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        sub_245C4CB30();
        swift_bridgeObjectRetain();
        for (i = 0; i != v7; ++i)
        {
          __swift_instantiateConcreteTypeFromMangledName(&qword_2575151C0);
          v12 = sub_245C33880(v16, i, a3);
          v14 = *v13;
          ((void (*)(void (**)(id *), _QWORD))v12)(v16, 0);
          *(_QWORD *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v9 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    type metadata accessor for SCMLPeopleDetectionAttribute();
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  result = sub_245C8F064();
  __break(1u);
  return result;
}

void sub_245C4BCC4()
{
  JUMPOUT(0x249544664);
}

uint64_t sub_245C4BCD8(uint64_t a1)
{
  return sub_245C387D0(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

BOOL _s26SensitiveContentAnalysisML28SCMLPeopleDetectionAttributeC1loiySbAC_ACtFZ_0(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v4;
  uint64_t (*v5)(void);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(void);
  uint64_t v10;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v19;
  unsigned int v21;

  v4 = (_QWORD *)MEMORY[0x24BEE4EA0];
  v5 = *(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *a1) + 0x60);
  v6 = v5();
  v8 = v7;
  v9 = *(uint64_t (**)(void))((*v4 & *a2) + 0x60);
  if (v6 == v9() && v8 == v10)
  {
    v13 = swift_bridgeObjectRelease_n();
    goto LABEL_12;
  }
  v12 = sub_245C8F118();
  swift_bridgeObjectRelease();
  v13 = swift_bridgeObjectRelease();
  if ((v12 & 1) != 0)
  {
LABEL_12:
    v21 = (*(uint64_t (**)(uint64_t))((*v4 & *a1) + 0x78))(v13);
    return v21 < (*(unsigned int (**)(void))((*v4 & *a2) + 0x78))();
  }
  v14 = ((uint64_t (*)(uint64_t))v5)(v13);
  v16 = v15;
  if (v14 == v9() && v16 == v17)
  {
    swift_bridgeObjectRelease_n();
    return 0;
  }
  else
  {
    v19 = sub_245C8F118();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v19 & 1;
  }
}

uint64_t type metadata accessor for SCMLPersonAttributes()
{
  return objc_opt_self();
}

BOOL sub_245C4BE7C(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v6;

  if (!a1)
    return a2 == 0;
  if (!a2 || a1[2] != a2[2])
    return 0;
  v6 = a1;
  swift_bridgeObjectRetain();
  sub_245C48A34((uint64_t *)&v6);
  v3 = v6;
  v6 = a2;
  swift_bridgeObjectRetain();
  sub_245C48A34((uint64_t *)&v6);
  v4 = sub_245C44538(v3, v6);
  swift_release();
  swift_release();
  return v4 & 1;
}

BOOL sub_245C4BF48(unint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned __int8 v9;
  uint64_t v11;
  unint64_t v12;

  if (!a1)
    return a2 == 0;
  if (!a2)
    return 0;
  v4 = a1 & 0xFFFFFFFFFFFFFF8;
  v5 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v6 = sub_245C8F034();
    swift_bridgeObjectRelease();
  }
  else
  {
    v6 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  v7 = a2 & 0xFFFFFFFFFFFFFF8;
  if (a2 >> 62)
  {
    swift_bridgeObjectRetain();
    v11 = sub_245C8F034();
    swift_bridgeObjectRelease();
    if (v6 == v11)
      goto LABEL_7;
    return 0;
  }
  if (v6 != *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10))
    return 0;
LABEL_7:
  swift_bridgeObjectRetain();
  if (v5)
  {
    v4 = (unint64_t)sub_245C48A9C(a1);
    swift_bridgeObjectRelease();
  }
  v12 = v4;
  sub_245C489BC((uint64_t *)&v12);
  v8 = v12;
  swift_bridgeObjectRetain();
  if (a2 >> 62)
  {
    v7 = (unint64_t)sub_245C48A9C(a2);
    swift_bridgeObjectRelease();
  }
  v12 = v7;
  sub_245C489BC((uint64_t *)&v12);
  v9 = sub_245C44258(v8, v12);
  swift_release();
  swift_release();
  return v9 & 1;
}

uint64_t sub_245C4C0C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_2575150F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_245C4C110(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE v13[32];

  sub_245C3ACA4(a1, (uint64_t)v13);
  if (swift_dynamicCast())
    return v11;
  sub_245C3ACA4(a1, (uint64_t)v13);
  if (swift_dynamicCast())
  {
    v3 = HIBYTE(v12) & 0xF;
    if ((v12 & 0x2000000000000000) == 0)
      v3 = v11 & 0xFFFFFFFFFFFFLL;
    if (v3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_257514E20);
      v4 = swift_allocObject();
      *(_OWORD *)(v4 + 16) = xmmword_245C93E30;
      *(_QWORD *)(v4 + 32) = v11;
      *(_QWORD *)(v4 + 40) = v12;
      return 1;
    }
  }
  else
  {
    sub_245C3ACA4(a1, (uint64_t)v13);
    __swift_instantiateConcreteTypeFromMangledName(&qword_2575151D0);
    result = swift_dynamicCast();
    if (!(_DWORD)result)
      return result;
    v5 = *(_QWORD *)(v11 + 16);
    if (v5)
    {
      v6 = v11 + 32;
      v7 = (_QWORD *)MEMORY[0x24BEE4AF8];
      do
      {
        sub_245C3ACA4(v6, (uint64_t)v13);
        if ((swift_dynamicCast() & 1) != 0)
        {
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v7 = sub_245C37F10(0, v7[2] + 1, 1, v7);
          v10 = v7[2];
          v9 = v7[3];
          if (v10 >= v9 >> 1)
            v7 = sub_245C37F10((_QWORD *)(v9 > 1), v10 + 1, 1, v7);
          v7[2] = v10 + 1;
          v8 = &v7[2 * v10];
          v8[4] = v11;
          v8[5] = v12;
        }
        v6 += 32;
        --v5;
      }
      while (v5);
      swift_bridgeObjectRelease();
      return 1;
    }
  }
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t type metadata accessor for SCMLVisualGenerationHandlingResult()
{
  return objc_opt_self();
}

uint64_t sub_245C4C348(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_245C423D8(a1, a2);
  return a1;
}

unint64_t sub_245C4C35C()
{
  unint64_t result;

  result = qword_257515140;
  if (!qword_257515140)
  {
    result = MEMORY[0x2495457B0](&protocol conformance descriptor for SCMLVisualGenerationHandlingError, &type metadata for SCMLVisualGenerationHandlingError);
    atomic_store(result, (unint64_t *)&qword_257515140);
  }
  return result;
}

uint64_t type metadata accessor for SCMLVisualGenerationHandling()
{
  uint64_t result;

  result = qword_257518020;
  if (!qword_257518020)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_245C4C3DC(uint64_t a1, uint64_t a2)
{
  return sub_245C4CAF0(&qword_257515168, a2, (uint64_t (*)(uint64_t))type metadata accessor for SCMLPeopleDetectionAttribute, MEMORY[0x24BEE5BE0]);
}

unint64_t sub_245C4C40C()
{
  unint64_t result;

  result = qword_257515170;
  if (!qword_257515170)
  {
    result = MEMORY[0x2495457B0](&protocol conformance descriptor for SCMLVisualGenerationHandlingError, &type metadata for SCMLVisualGenerationHandlingError);
    atomic_store(result, (unint64_t *)&qword_257515170);
  }
  return result;
}

uint64_t method lookup function for SCMLPeopleDetectionAttribute()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SCMLPeopleDetectionAttribute.term.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x60))();
}

uint64_t dispatch thunk of SCMLPeopleDetectionAttribute.term.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x68))();
}

uint64_t dispatch thunk of SCMLPeopleDetectionAttribute.term.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x70))();
}

uint64_t dispatch thunk of SCMLPeopleDetectionAttribute.gender.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x78))();
}

uint64_t dispatch thunk of SCMLPeopleDetectionAttribute.gender.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x80))();
}

uint64_t dispatch thunk of SCMLPeopleDetectionAttribute.gender.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x88))();
}

uint64_t dispatch thunk of SCMLPeopleDetectionAttribute.__allocating_init(term:gender:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 144))();
}

uint64_t method lookup function for SCMLPersonAttributes()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SCMLPersonAttributes.specific.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x98))();
}

uint64_t dispatch thunk of SCMLPersonAttributes.specific.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xA0))();
}

uint64_t dispatch thunk of SCMLPersonAttributes.specific.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xA8))();
}

uint64_t dispatch thunk of SCMLPersonAttributes.isGroup.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xB0))();
}

uint64_t dispatch thunk of SCMLPersonAttributes.isGroup.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xB8))();
}

uint64_t dispatch thunk of SCMLPersonAttributes.isGroup.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xC0))();
}

uint64_t dispatch thunk of SCMLPersonAttributes.hasAge.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xC8))();
}

uint64_t dispatch thunk of SCMLPersonAttributes.hasAge.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xD0))();
}

uint64_t dispatch thunk of SCMLPersonAttributes.hasAge.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xD8))();
}

uint64_t dispatch thunk of SCMLPersonAttributes.hasGender.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xE0))();
}

uint64_t dispatch thunk of SCMLPersonAttributes.hasGender.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xE8))();
}

uint64_t dispatch thunk of SCMLPersonAttributes.hasGender.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xF0))();
}

uint64_t dispatch thunk of SCMLPersonAttributes.hasEthnicity.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0xF8))();
}

uint64_t dispatch thunk of SCMLPersonAttributes.hasEthnicity.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x100))();
}

uint64_t dispatch thunk of SCMLPersonAttributes.hasEthnicity.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x108))();
}

uint64_t dispatch thunk of SCMLPersonAttributes.age.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x110))();
}

uint64_t dispatch thunk of SCMLPersonAttributes.age.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x118))();
}

uint64_t dispatch thunk of SCMLPersonAttributes.age.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x120))();
}

uint64_t dispatch thunk of SCMLPersonAttributes.gender.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x128))();
}

uint64_t dispatch thunk of SCMLPersonAttributes.gender.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x130))();
}

uint64_t dispatch thunk of SCMLPersonAttributes.gender.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x138))();
}

uint64_t dispatch thunk of SCMLPersonAttributes.ethnicity.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x140))();
}

uint64_t dispatch thunk of SCMLPersonAttributes.ethnicity.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x148))();
}

uint64_t dispatch thunk of SCMLPersonAttributes.ethnicity.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x150))();
}

uint64_t dispatch thunk of SCMLPersonAttributes.hasImplicitCategoryRequiringPersonalization.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x158))();
}

uint64_t dispatch thunk of SCMLPersonAttributes.hasImplicitCategoryRequiringPersonalization.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x160))();
}

uint64_t dispatch thunk of SCMLPersonAttributes.hasImplicitCategoryRequiringPersonalization.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x168))();
}

uint64_t dispatch thunk of SCMLPersonAttributes.__allocating_init(specific:isGroup:hasAge:hasGender:hasEthnicity:age:gender:ethnicity:hasImplicitCategoryRequiringPersonalization:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 368))();
}

uint64_t method lookup function for SCMLVisualGenerationHandlingResult()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SCMLVisualGenerationHandlingResult.people.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x58))();
}

uint64_t dispatch thunk of SCMLVisualGenerationHandlingResult.people.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x60))();
}

uint64_t dispatch thunk of SCMLVisualGenerationHandlingResult.people.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x24BEE4EA0] & *v0) + 0x68))();
}

uint64_t dispatch thunk of SCMLVisualGenerationHandlingResult.__allocating_init(result:text:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t storeEnumTagSinglePayload for SCMLVisualGenerationHandlingError(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_245C4C8D4 + 4 * byte_245C94D10[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_245C4C8F4 + 4 * byte_245C94D15[v4]))();
}

_BYTE *sub_245C4C8D4(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_245C4C8F4(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_245C4C8FC(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_245C4C904(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_245C4C90C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_245C4C914(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for SCMLVisualGenerationHandlingError()
{
  return &type metadata for SCMLVisualGenerationHandlingError;
}

uint64_t sub_245C4C930()
{
  return type metadata accessor for SCMLVisualGenerationHandling();
}

uint64_t method lookup function for SCMLVisualGenerationHandling()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SCMLVisualGenerationHandling.__allocating_init(onBehalfOf:modelManagerServicesUseCaseID:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t dispatch thunk of SCMLVisualGenerationHandling.predict(text:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  int *v6;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t, uint64_t);

  v6 = *(int **)((*MEMORY[0x24BEE4EA0] & *v2) + 0x98);
  v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)v6 + *v6);
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_245C3A7C8;
  return v9(a1, a2);
}

void type metadata accessor for SCMLPeopleDetectionGender()
{
  unint64_t ForeignTypeMetadata;
  uint64_t v1;

  if (!qword_257515180)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v1)
      atomic_store(ForeignTypeMetadata, (unint64_t *)&qword_257515180);
  }
}

uint64_t sub_245C4CA30()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 24));
  return swift_deallocObject();
}

uint64_t sub_245C4CA64()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  const void *v3;
  _QWORD *v4;
  _QWORD *v5;

  v2 = v0[2];
  v3 = (const void *)v0[3];
  v4 = (_QWORD *)v0[4];
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_245C35130;
  return ((uint64_t (*)(uint64_t, const void *, _QWORD *))((char *)&dword_257515188 + dword_257515188))(v2, v3, v4);
}

uint64_t sub_245C4CAD8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_245C47E28(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t sub_245C4CAF0(unint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v7 = a3(a2);
    result = MEMORY[0x2495457B0](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_245C4CB30()
{
  unint64_t result;
  uint64_t v1;

  result = qword_2575151C8;
  if (!qword_2575151C8)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_2575151C0);
    result = MEMORY[0x2495457B0](MEMORY[0x24BEE12E0], v1);
    atomic_store(result, (unint64_t *)&qword_2575151C8);
  }
  return result;
}

_QWORD *Darts::DoubleArrayImpl<void,void,int,void>::~DoubleArrayImpl(_QWORD *a1)
{
  uint64_t v2;

  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_2516E3588;
  v2 = a1[3];
  if (v2)
  {
    MEMORY[0x249544F34](v2, 0x1000C8052888210);
    a1[3] = 0;
  }
  return a1;
}

uint64_t sentencepiece::ModelInterface::ModelInterface(uint64_t a1, uint64_t a2, _DWORD *a3, unint64_t a4)
{
  uint64_t *v7;
  _DWORD *v9;

  *(_QWORD *)a1 = off_2516E2748;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = &off_2516E3588;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = &off_2516E3588;
  *(_QWORD *)(a1 + 64) = 0;
  v7 = (uint64_t *)(a1 + 96);
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  sentencepiece::util::Status::Status((_QWORD *)(a1 + 96));
  sentencepiece::ModelInterface::InitFromMMappedFile(a1, a3, a4, (sentencepiece::util::Status *)&v9);
  sentencepiece::util::Status::operator=(v7, &v9);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v9);
  return a1;
}

void sub_245C4CC98(_Unwind_Exception *a1, uint64_t a2, ...)
{
  _QWORD *v2;
  uint64_t **v3;
  sentencepiece::util::Status *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v9;
  uint64_t v10;
  va_list va;

  va_start(va, a2);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)va);
  sentencepiece::util::Status::~Status(v4);
  v2[7] = v6;
  *v7 = 0;
  v7[1] = 0;
  v9 = v2[10];
  if (v9)
  {
    MEMORY[0x249544F34](v9, 0x1000C8052888210);
    v2[10] = 0;
  }
  v2[3] = v6;
  *v5 = 0;
  v5[1] = 0;
  v10 = v2[6];
  if (v10)
  {
    MEMORY[0x249544F34](v10, 0x1000C8052888210);
    v2[6] = 0;
  }
  std::unique_ptr<sentencepiece::normalizer::PrefixMatcher>::reset[abi:ne180100](v3, 0);
  _Unwind_Resume(a1);
}

void sentencepiece::ModelInterface::InitFromMMappedFile(uint64_t a1@<X0>, _DWORD *a2@<X1>, unint64_t a3@<X2>, sentencepiece::util::Status *a4@<X8>)
{
  unint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  sentencepiece::mmap_util *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _DWORD *v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _DWORD *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  _DWORD *v23;
  _QWORD v24[33];
  uint64_t *v25;
  unsigned int v26;
  _DWORD *v27;
  unint64_t v28;

  v27 = a2;
  v28 = a3;
  sentencepiece::mmap_util::DecodePrefix<int>(a2, a3, (_DWORD *)(a1 + 88), a4);
  if (!*(_QWORD *)a4)
  {
    sentencepiece::util::Status::~Status(a4);
    sentencepiece::mmap_util::RemovePrefix(&v27, 4uLL, a4);
    if (!*(_QWORD *)a4)
    {
      sentencepiece::util::Status::~Status(a4);
      sentencepiece::mmap_util::DecodePrefix<int>(v27, v28, (_DWORD *)(a1 + 92), a4);
      if (!*(_QWORD *)a4)
      {
        sentencepiece::util::Status::~Status(a4);
        sentencepiece::mmap_util::RemovePrefix(&v27, 4uLL, a4);
        if (!*(_QWORD *)a4)
        {
          sentencepiece::util::Status::~Status(a4);
          v26 = 0;
          sentencepiece::mmap_util::DecodePrefix<unsigned int>(v27, v28, &v26, a4);
          if (!*(_QWORD *)a4)
          {
            sentencepiece::util::Status::~Status(a4);
            sentencepiece::mmap_util::RemovePrefix(&v27, 4uLL, a4);
            if (!*(_QWORD *)a4)
            {
              sentencepiece::util::Status::~Status(a4);
              v6 = v26;
              if (v28 < v26)
                v6 = v28;
              v23 = v27;
              v24[0] = v6;
              absl::make_unique<sentencepiece::normalizer::PrefixMatcher,std::string_view>(&v23, (uint64_t *)&v25);
              v7 = v25;
              v25 = 0;
              std::unique_ptr<sentencepiece::normalizer::PrefixMatcher>::reset[abi:ne180100]((uint64_t **)(a1 + 16), v7);
              std::unique_ptr<sentencepiece::normalizer::PrefixMatcher>::reset[abi:ne180100](&v25, 0);
              v8 = sentencepiece::mmap_util::RoundUp((sentencepiece::mmap_util *)v26, 4uLL);
              sentencepiece::mmap_util::RemovePrefix(&v27, v8, a4);
              if (!*(_QWORD *)a4)
              {
                sentencepiece::util::Status::~Status(a4);
                LODWORD(v25) = 0;
                sentencepiece::mmap_util::DecodePrefix<unsigned int>(v27, v28, &v25, a4);
                if (!*(_QWORD *)a4)
                {
                  sentencepiece::util::Status::~Status(a4);
                  sentencepiece::mmap_util::RemovePrefix(&v27, 4uLL, a4);
                  if (!*(_QWORD *)a4)
                  {
                    sentencepiece::util::Status::~Status(a4);
                    v9 = (sentencepiece::mmap_util *)v25;
                    if (!(_DWORD)v25)
                    {
                      LODWORD(v23) = 13;
                      v11 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v24);
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/model_interface.cc", 74);
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"(", 1);
                      std::ostream::operator<<();
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)") [", 3);
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"(pieces_blob_size) > (0)", 24);
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"] ", 2);
                      sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&v23, (uint64_t)a4);
                      goto LABEL_18;
                    }
                    if (v28 < v25)
                    {
                      LODWORD(v23) = 13;
                      v10 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v24);
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/model_interface.cc", 74);
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"(", 1);
                      std::ostream::operator<<();
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)") [", 3);
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"(blob.size()) >= (pieces_blob_size)", 35);
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"] ", 2);
                      sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&v23, (uint64_t)a4);
LABEL_18:
                      sentencepiece::util::StatusBuilder::~StatusBuilder((sentencepiece::util::StatusBuilder *)&v23);
                      return;
                    }
                    if ((v25 & 3) != 0)
                    {
                      LODWORD(v23) = 13;
                      v12 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v24);
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/model_interface.cc", 74);
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"(", 1);
                      std::ostream::operator<<();
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)") [", 3);
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"(pieces_blob_size % pieces_.unit_size()) == (0)", 47);
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"] ", 2);
                      sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&v23, (uint64_t)a4);
                      goto LABEL_18;
                    }
                    v13 = v27;
                    v14 = v25 >> 2;
                    *(_QWORD *)(a1 + 32) = 0;
                    *(_QWORD *)(a1 + 40) = 0;
                    if (*(_QWORD *)(a1 + 48))
                    {
                      MEMORY[0x249544F34](*(_QWORD *)(a1 + 48), 0x1000C8052888210);
                      *(_QWORD *)(a1 + 48) = 0;
                      v9 = (sentencepiece::mmap_util *)v25;
                    }
                    *(_QWORD *)(a1 + 32) = v14;
                    *(_QWORD *)(a1 + 40) = v13;
                    v15 = sentencepiece::mmap_util::RoundUp(v9, 4uLL);
                    sentencepiece::mmap_util::RemovePrefix(&v27, v15, a4);
                    if (!*(_QWORD *)a4)
                    {
                      sentencepiece::util::Status::~Status(a4);
                      v22 = 0;
                      sentencepiece::mmap_util::DecodePrefix<unsigned int>(v27, v28, &v22, a4);
                      if (!*(_QWORD *)a4)
                      {
                        sentencepiece::util::Status::~Status(a4);
                        sentencepiece::mmap_util::RemovePrefix(&v27, 4uLL, a4);
                        if (!*(_QWORD *)a4)
                        {
                          sentencepiece::util::Status::~Status(a4);
                          if (!v22)
                          {
                            LODWORD(v23) = 13;
                            v17 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v24);
                            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/model_interface.cc", 74);
                            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"(", 1);
                            std::ostream::operator<<();
                            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)") [", 3);
                            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"(reserved_id_map_size) > (0)", 28);
                            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"] ", 2);
                            sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&v23, (uint64_t)a4);
                            goto LABEL_18;
                          }
                          if (v28 < v22)
                          {
                            LODWORD(v23) = 13;
                            v16 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v24);
                            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/model_interface.cc", 74);
                            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"(", 1);
                            std::ostream::operator<<();
                            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)") [", 3);
                            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"(blob.size()) >= (reserved_id_map_size)", 39);
                            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"] ", 2);
                            sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&v23, (uint64_t)a4);
                            goto LABEL_18;
                          }
                          if ((v22 & 3) != 0)
                          {
                            LODWORD(v23) = 13;
                            v18 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v24);
                            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/model_interface.cc", 74);
                            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"(", 1);
                            std::ostream::operator<<();
                            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)") [", 3);
                            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"(reserved_id_map_size % reserved_id_map_.unit_size()) == (0)", 60);
                            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"] ", 2);
                            sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&v23, (uint64_t)a4);
                            goto LABEL_18;
                          }
                          v19 = v27;
                          v20 = v22 >> 2;
                          *(_QWORD *)(a1 + 64) = 0;
                          *(_QWORD *)(a1 + 72) = 0;
                          v21 = *(_QWORD *)(a1 + 80);
                          if (v21)
                          {
                            MEMORY[0x249544F34](v21, 0x1000C8052888210);
                            *(_QWORD *)(a1 + 80) = 0;
                          }
                          *(_QWORD *)(a1 + 64) = v20;
                          *(_QWORD *)(a1 + 72) = v19;
                          sentencepiece::util::Status::Status(a4);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

void sub_245C4D370(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sentencepiece::util::StatusBuilder::~StatusBuilder((sentencepiece::util::StatusBuilder *)va);
  _Unwind_Resume(a1);
}

_QWORD *sentencepiece::mmap_util::DecodePrefix<int>@<X0>(_DWORD *a1@<X0>, unint64_t a2@<X1>, _DWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *v6;
  unsigned int v7;
  _QWORD v8[11];
  char v9;
  uint64_t v10;

  if (a2 <= 3)
  {
    v7 = 13;
    v6 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/util.h", 62);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"(", 1);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)") [", 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"string.size() >= sizeof(T)", 26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"] ", 2);
    sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status(&v7, (uint64_t)a4);
    v8[0] = *MEMORY[0x24BEDB800];
    *(_QWORD *)((char *)v8 + *(_QWORD *)(v8[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
    v8[1] = MEMORY[0x24BEDB848] + 16;
    if (v9 < 0)
      operator delete((void *)v8[9]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return (_QWORD *)MEMORY[0x249544EE0](&v10);
  }
  else
  {
    *a3 = *a1;
    return sentencepiece::util::Status::Status(a4);
  }
}

void sub_245C4D504(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sentencepiece::util::StatusBuilder::~StatusBuilder((sentencepiece::util::StatusBuilder *)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sentencepiece::mmap_util::DecodePrefix<unsigned int>@<X0>(_DWORD *a1@<X0>, unint64_t a2@<X1>, _DWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *v6;
  unsigned int v7;
  _QWORD v8[11];
  char v9;
  uint64_t v10;

  if (a2 <= 3)
  {
    v7 = 13;
    v6 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/util.h", 62);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"(", 1);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)") [", 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"string.size() >= sizeof(T)", 26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"] ", 2);
    sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status(&v7, (uint64_t)a4);
    v8[0] = *MEMORY[0x24BEDB800];
    *(_QWORD *)((char *)v8 + *(_QWORD *)(v8[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
    v8[1] = MEMORY[0x24BEDB848] + 16;
    if (v9 < 0)
      operator delete((void *)v8[9]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return (_QWORD *)MEMORY[0x249544EE0](&v10);
  }
  else
  {
    *a3 = *a1;
    return sentencepiece::util::Status::Status(a4);
  }
}

void sub_245C4D670(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sentencepiece::util::StatusBuilder::~StatusBuilder((sentencepiece::util::StatusBuilder *)&a9);
  _Unwind_Resume(a1);
}

uint64_t absl::make_unique<sentencepiece::normalizer::PrefixMatcher,std::string_view>@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = operator new();
  result = sentencepiece::normalizer::PrefixMatcher::PrefixMatcher(v4, *a1, a1[1]);
  *a2 = v4;
  return result;
}

void sub_245C4D6D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x249544F58](v1, 0x20C4093837F09);
  _Unwind_Resume(a1);
}

void sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status(unsigned int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  void **v4;
  unint64_t v5;
  void *__p[2];
  unsigned __int8 v7;

  v3 = *a1;
  std::stringbuf::str();
  if ((v7 & 0x80u) == 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  if ((v7 & 0x80u) == 0)
    v5 = v7;
  else
    v5 = (unint64_t)__p[1];
  sentencepiece::util::Status::Status(a2, v3, v4, v5);
  if ((char)v7 < 0)
    operator delete(__p[0]);
}

void sub_245C4D76C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sentencepiece::util::StatusBuilder::~StatusBuilder(sentencepiece::util::StatusBuilder *this)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x24BEDB800];
  v3 = *MEMORY[0x24BEDB800];
  *((_QWORD *)this + 1) = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)this + *(_QWORD *)(v3 - 24) + 8) = *(_QWORD *)(v2 + 24);
  *((_QWORD *)this + 2) = MEMORY[0x24BEDB848] + 16;
  if (*((char *)this + 103) < 0)
    operator delete(*((void **)this + 10));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x249544EE0]((char *)this + 120);
}

void **sentencepiece::ModelInterface::model_proto(sentencepiece::ModelInterface *this)
{
  void **v1;
  void **result;
  void *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  char v8;

  v1 = (void **)*((_QWORD *)this + 1);
  if (!v1 || (v3 = *v1, result = v1 - 2, v3 != &unk_2516E2510))
  {
    v8 = 1;
    v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"model_interface.cc", 18);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"(", 1);
    v5 = (_QWORD *)std::ostream::operator<<();
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)") [", 3);
    v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"(model_proto = dynamic_cast<const ModelProto *>(model_proto_))", 62);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"] ", 2);
    sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&v8);
    return 0;
  }
  return result;
}

void sub_245C4D8C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&a13);
  _Unwind_Resume(a1);
}

void sentencepiece::ModelInterface::~ModelInterface(sentencepiece::ModelInterface *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = off_2516E2748;
  sentencepiece::util::Status::~Status((sentencepiece::ModelInterface *)((char *)this + 96));
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 7) = &off_2516E3588;
  v2 = *((_QWORD *)this + 10);
  if (v2)
  {
    MEMORY[0x249544F34](v2, 0x1000C8052888210);
    *((_QWORD *)this + 10) = 0;
  }
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 3) = &off_2516E3588;
  v3 = *((_QWORD *)this + 6);
  if (v3)
  {
    MEMORY[0x249544F34](v3, 0x1000C8052888210);
    *((_QWORD *)this + 6) = 0;
  }
  std::unique_ptr<sentencepiece::normalizer::PrefixMatcher>::reset[abi:ne180100]((uint64_t **)this + 2, 0);
}

const char *sentencepiece::ModelInterface::unk_piece(sentencepiece::ModelInterface *this)
{
  uint64_t v2;

  (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 32))(*((_QWORD *)this + 1));
  if (v2)
    return (const char *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 32))(*((_QWORD *)this + 1));
  else
    return "<unk>";
}

const char *sentencepiece::ModelInterface::bos_piece(sentencepiece::ModelInterface *this)
{
  uint64_t v2;

  (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1));
  if (v2)
    return (const char *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1));
  else
    return "<s>";
}

const char *sentencepiece::ModelInterface::eos_piece(sentencepiece::ModelInterface *this)
{
  uint64_t v2;

  (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 48))(*((_QWORD *)this + 1));
  if (v2)
    return (const char *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 48))(*((_QWORD *)this + 1));
  else
    return "</s>";
}

const char *sentencepiece::ModelInterface::pad_piece(sentencepiece::ModelInterface *this)
{
  uint64_t v2;

  (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 56))(*((_QWORD *)this + 1));
  if (v2)
    return (const char *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 56))(*((_QWORD *)this + 1));
  else
    return "<pad>";
}

uint64_t sentencepiece::ModelInterface::PieceToId(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  uint64_t result;
  unsigned int v7;

  v7 = 0;
  Darts::DoubleArrayImpl<void,void,int,void>::exactMatchSearch<int>(a1 + 56, a2, (int *)&v7, a3, 0);
  result = v7;
  if (v7 == -1)
  {
    Darts::DoubleArrayImpl<void,void,int,void>::exactMatchSearch<int>(a1 + 24, a2, (int *)&v7, a3, 0);
    result = v7;
    if (v7 == -1)
      return *(unsigned int *)(a1 + 88);
  }
  return result;
}

uint64_t Darts::DoubleArrayImpl<void,void,int,void>::exactMatchSearch<int>(uint64_t result, _BYTE *a2, int *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  unsigned int v6;
  int v7;
  int v8;
  unsigned __int8 *v9;
  int v10;
  int v11;

  v5 = *(_QWORD *)(result + 16);
  v6 = *(_DWORD *)(v5 + 4 * a5);
  if (a4)
  {
    while (1)
    {
      v7 = *a2++;
      a5 ^= (v6 >> 10 << ((v6 >> 6) & 8)) ^ v7;
      v6 = *(_DWORD *)(v5 + 4 * a5);
      if ((v6 & 0x800000FF) != v7)
        break;
      if (!--a4)
        goto LABEL_9;
    }
  }
  else
  {
    v8 = *a2;
    if (*a2)
    {
      v9 = a2 + 1;
      while (1)
      {
        a5 ^= (v6 >> 10 << ((v6 >> 6) & 8)) ^ v8;
        v6 = *(_DWORD *)(v5 + 4 * a5);
        if ((v6 & 0x800000FF) != v8)
          break;
        v10 = *v9++;
        v8 = v10;
        if (!v10)
          goto LABEL_9;
      }
    }
    else
    {
LABEL_9:
      if ((v6 & 0x100) != 0)
      {
        v11 = *(_DWORD *)(v5 + 4 * (a5 ^ (v6 >> 10 << ((v6 >> 6) & 8)))) & 0x7FFFFFFF;
        goto LABEL_12;
      }
    }
  }
  v11 = -1;
LABEL_12:
  *a3 = v11;
  return result;
}

uint64_t sentencepiece::ModelInterface::LookupPredictive@<X0>(sentencepiece::logging *a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  char v10;

  if ((int)sentencepiece::logging::GetMinLogLevel(a1) <= 2)
  {
    v10 = 0;
    v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"model_interface.cc", 18);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"(", 1);
    v4 = (_QWORD *)std::ostream::operator<<();
    v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)") ", 2);
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"LOG(", 4);
    v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"ERROR", 5);
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)") ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Not implemented.", 16);
    sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&v10);
  }
  return sentencepiece::util::Status::Status(a2, 12, "Not implemented.", 16);
}

{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  char v10;

  if ((int)sentencepiece::logging::GetMinLogLevel(a1) <= 2)
  {
    v10 = 0;
    v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"model_interface.cc", 18);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"(", 1);
    v4 = (_QWORD *)std::ostream::operator<<();
    v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)") ", 2);
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"LOG(", 4);
    v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"ERROR", 5);
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)") ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Not implemented.", 16);
    sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&v10);
  }
  return sentencepiece::util::Status::Status(a2, 12, "Not implemented.", 16);
}

void sub_245C4DCB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&a13);
  _Unwind_Resume(a1);
}

void sub_245C4DDA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&a13);
  _Unwind_Resume(a1);
}

void sentencepiece::ModelInterface::InitializePieces(sentencepiece::ModelInterface *this)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unsigned int v9;
  BOOL v10;
  int v11;
  BOOL v12;
  uint64_t **v13;
  unint64_t v14;
  char v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  unint64_t v21;
  size_t v22;
  void *v23;
  unsigned int v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  unint64_t v29;
  size_t v30;
  __int128 *v31;
  const void *v32;
  const char *v33;
  size_t v34;
  void *v35;
  std::string *v36;
  __int128 v37;
  const char *v38;
  std::string *v39;
  __int128 v40;
  size_t v41;
  std::string v42;
  _DWORD *v43;
  void *__p;
  unint64_t v45;
  uint64_t *v46;
  _QWORD *v47[2];
  _QWORD **v48;
  _QWORD *v49;
  uint64_t v50;
  _QWORD **v51;
  _QWORD *v52;
  uint64_t v53;
  __int128 v54;
  int64_t v55;

  v52 = 0;
  v53 = 0;
  v50 = 0;
  v51 = &v52;
  v48 = &v49;
  v49 = 0;
  *((_DWORD *)this + 22) = -1;
  v47[0] = 0;
  v47[1] = 0;
  v46 = (uint64_t *)v47;
  LOBYTE(v54) = 0;
  std::vector<BOOL>::vector(&__p, 0x100uLL, (unsigned __int8 *)&v54);
  v2 = *((_QWORD *)this + 1);
  if (v2)
    v3 = v2 - 16;
  else
    v3 = 0;
  if (*(int *)(v3 + 64) < 1)
  {
LABEL_38:
    if (*((_DWORD *)this + 22) == -1)
    {
      sentencepiece::util::Status::Status(&v54, 13, "unk is not defined.", 19);
      sentencepiece::util::Status::operator=((uint64_t *)this + 12, (_DWORD **)&v54);
    }
    else
    {
      v25 = *(_BYTE **)(v3 + 80);
      if (!v25)
        v25 = &sentencepiece::_TrainerSpec_default_instance_;
      if (!v25[248]
        || (*(_QWORD *)&v54 = __p,
            DWORD2(v54) = 0,
            std::__find_BOOL[abi:ne180100]<false,std::vector<BOOL>,false>((uint64_t)&v54, v45, (uint64_t)&v42),
            v42.__r_.__value_.__l.__data_ == (char *)__p + 8 * (v45 >> 6))
        && LODWORD(v42.__r_.__value_.__r.__words[1]) == (v45 & 0x3F))
      {
        if (!v53
          || (sentencepiece::BuildTrie((_QWORD *)this + 3, &v51, (int *)this + 23, &v54),
              sentencepiece::util::Status::operator=((uint64_t *)this + 12, (_DWORD **)&v54),
              sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v54),
              (*(void (**)(__int128 *__return_ptr, sentencepiece::ModelInterface *))(*(_QWORD *)this + 16))(&v54, this), v26 = v54, sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v54), !v26))
        {
          if (!v50
            || (sentencepiece::BuildTrie((_QWORD *)this + 7, &v48, 0, &v54),
                sentencepiece::util::Status::operator=((uint64_t *)this + 12, (_DWORD **)&v54),
                sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v54),
                (*(void (**)(__int128 *__return_ptr, sentencepiece::ModelInterface *))(*(_QWORD *)this + 16))(&v54, this), v27 = v54, sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v54), !v27))
          {
            absl::make_unique<sentencepiece::normalizer::PrefixMatcher,std::set<std::string_view> &>((uint64_t)&v46, (uint64_t *)&v54);
            v28 = (uint64_t *)v54;
            *(_QWORD *)&v54 = 0;
            std::unique_ptr<sentencepiece::normalizer::PrefixMatcher>::reset[abi:ne180100]((uint64_t **)this + 2, v28);
            std::unique_ptr<sentencepiece::normalizer::PrefixMatcher>::reset[abi:ne180100]((uint64_t **)&v54, 0);
          }
        }
        goto LABEL_69;
      }
      sentencepiece::util::Status::operator=((uint64_t *)this + 12, (_DWORD **)&v54);
    }
LABEL_68:
    sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v54);
    goto LABEL_69;
  }
  v4 = 0;
  while (1)
  {
    v5 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<sentencepiece::ModelProto_SentencePiece>::TypeHandler>(v3 + 56, v4);
    v6 = v5;
    v7 = *(_QWORD *)(v5 + 48) & 0xFFFFFFFFFFFFFFFELL;
    v8 = *(unsigned __int8 *)(v7 + 23);
    if (*(char *)(v7 + 23) < 0)
    {
      if (!*(_QWORD *)(v7 + 8))
      {
LABEL_50:
        sentencepiece::util::Status::Status(&v54, 13, "piece must not be empty.", 24);
        sentencepiece::util::Status::operator=((uint64_t *)this + 12, (_DWORD **)&v54);
        goto LABEL_68;
      }
    }
    else if (!*(_BYTE *)(v7 + 23))
    {
      goto LABEL_50;
    }
    v9 = *(_DWORD *)(v5 + 60);
    v10 = v9 > 5;
    v11 = (1 << v9) & 0x32;
    v12 = v10 || v11 == 0;
    v13 = (uint64_t **)(v12 ? &v48 : &v51);
    if ((v8 & 0x80) != 0)
    {
      v14 = *(_QWORD *)v7;
      v8 = *(_QWORD *)(v7 + 8);
    }
    else
    {
      v14 = v7;
    }
    *(_QWORD *)&v54 = v14;
    *((_QWORD *)&v54 + 1) = v8;
    LODWORD(v55) = v4;
    std::__tree<std::__value_type<std::string_view,int>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,int>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,int>>>::__emplace_unique_key_args<std::string_view,std::pair<std::string_view const,int> const&>(v13, (uint64_t)&v54, (uint64_t)&v54);
    if ((v15 & 1) == 0)
      break;
    v16 = *(_DWORD *)(v6 + 60);
    if (v16 == 4)
    {
      v17 = *(_QWORD *)(v6 + 48) & 0xFFFFFFFFFFFFFFFELL;
      if (*(char *)(v17 + 23) < 0)
      {
        v19 = *(_QWORD *)v17;
        v18 = *(_QWORD *)(v17 + 8);
      }
      else
      {
        v18 = *(unsigned __int8 *)(v17 + 23);
        v19 = *(_QWORD *)(v6 + 48) & 0xFFFFFFFFFFFFFFFELL;
      }
      *(_QWORD *)&v54 = v19;
      *((_QWORD *)&v54 + 1) = v18;
      std::__tree<std::string_view>::__emplace_unique_key_args<std::string_view,std::string_view>(&v46, (uint64_t)&v54, &v54);
      v16 = *(_DWORD *)(v6 + 60);
    }
    if (v16 == 6)
    {
      v20 = *(_BYTE **)(v3 + 80);
      if (!v20)
        v20 = &sentencepiece::_TrainerSpec_default_instance_;
      if (!v20[248])
      {
        std::operator+<char>();
        v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
        v55 = v36->__r_.__value_.__r.__words[2];
        v54 = v37;
        v36->__r_.__value_.__l.__size_ = 0;
        v36->__r_.__value_.__r.__words[2] = 0;
        v36->__r_.__value_.__r.__words[0] = 0;
        if (v55 >= 0)
          v38 = (const char *)&v54;
        else
          v38 = (const char *)v54;
LABEL_78:
        v41 = strlen(v38);
        sentencepiece::util::Status::Status(&v43, 13, v38, v41);
        sentencepiece::util::Status::operator=((uint64_t *)this + 12, &v43);
        sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v43);
        if (SHIBYTE(v55) < 0)
          operator delete((void *)v54);
        if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
        {
          v35 = (void *)v42.__r_.__value_.__r.__words[0];
          goto LABEL_82;
        }
        goto LABEL_69;
      }
      v21 = *(_QWORD *)(v6 + 48) & 0xFFFFFFFFFFFFFFFELL;
      if (*(char *)(v21 + 23) < 0)
      {
        v23 = *(void **)v21;
        v22 = *(_QWORD *)(v21 + 8);
      }
      else
      {
        v22 = *(unsigned __int8 *)(v21 + 23);
        v23 = (void *)(*(_QWORD *)(v6 + 48) & 0xFFFFFFFFFFFFFFFELL);
      }
      v24 = sentencepiece::PieceToByte(v23, v22);
      if ((v24 & 0x80000000) != 0)
      {
        std::operator+<char>();
        v39 = std::string::append(&v42, " is invalid.");
        v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
        v55 = v39->__r_.__value_.__r.__words[2];
        v54 = v40;
        v39->__r_.__value_.__l.__size_ = 0;
        v39->__r_.__value_.__r.__words[2] = 0;
        v39->__r_.__value_.__r.__words[0] = 0;
        if (v55 >= 0)
          v38 = (const char *)&v54;
        else
          v38 = (const char *)v54;
        goto LABEL_78;
      }
      *(_QWORD *)((char *)__p + (((unint64_t)v24 >> 3) & 0x1FFFFFF8)) |= 1 << v24;
    }
    else if (v16 == 2)
    {
      if ((*((_DWORD *)this + 22) & 0x80000000) == 0)
      {
        sentencepiece::util::Status::Status(&v54, 13, "unk is already defined.", 23);
        sentencepiece::util::Status::operator=((uint64_t *)this + 12, (_DWORD **)&v54);
        goto LABEL_68;
      }
      *((_DWORD *)this + 22) = v4;
    }
    if (++v4 >= *(_DWORD *)(v3 + 64))
      goto LABEL_38;
  }
  v29 = *(_QWORD *)(v6 + 48) & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v29 + 23) >= 0)
    v30 = *(unsigned __int8 *)(v29 + 23);
  else
    v30 = *(_QWORD *)(v29 + 8);
  v31 = &v54;
  std::string::basic_string[abi:ne180100]((uint64_t)&v54, v30 + 20);
  if (v55 < 0)
    v31 = (__int128 *)v54;
  if (v30)
  {
    if (*(char *)(v29 + 23) >= 0)
      v32 = (const void *)v29;
    else
      v32 = *(const void **)v29;
    memmove(v31, v32, v30);
  }
  strcpy((char *)v31 + v30, " is already defined.");
  if (v55 >= 0)
    v33 = (const char *)&v54;
  else
    v33 = (const char *)v54;
  v34 = strlen(v33);
  sentencepiece::util::Status::Status(&v42, 13, v33, v34);
  sentencepiece::util::Status::operator=((uint64_t *)this + 12, &v42);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v42);
  if (SHIBYTE(v55) < 0)
  {
    v35 = (void *)v54;
LABEL_82:
    operator delete(v35);
  }
LABEL_69:
  if (__p)
    operator delete(__p);
  std::__tree<std::__value_type<std::string_view,int>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,int>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,int>>>::destroy((uint64_t)&v46, v47[0]);
  std::__tree<std::__value_type<std::string_view,int>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,int>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,int>>>::destroy((uint64_t)&v48, v49);
  std::__tree<std::__value_type<std::string_view,int>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,int>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,int>>>::destroy((uint64_t)&v51, v52);
}

void sub_245C4E3D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *a16, uint64_t a17, uint64_t a18, char a19, _QWORD *a20,uint64_t a21,char a22,_QWORD *a23,uint64_t a24,char a25,_QWORD *a26)
{
  uint64_t v26;

  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&a15);
  if (*(char *)(v26 - 89) < 0)
    operator delete(*(void **)(v26 - 112));
  if (a14 < 0)
    operator delete(__p);
  if (a16)
    operator delete(a16);
  std::__tree<std::__value_type<std::string_view,int>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,int>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,int>>>::destroy((uint64_t)&a19, a20);
  std::__tree<std::__value_type<std::string_view,int>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,int>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,int>>>::destroy((uint64_t)&a22, a23);
  std::__tree<std::__value_type<std::string_view,int>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,int>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,int>>>::destroy((uint64_t)&a25, a26);
  _Unwind_Resume(a1);
}

uint64_t sentencepiece::PieceToByte(void *__src, size_t __len)
{
  unsigned __int8 v4;
  _QWORD *v5;
  void **v6;
  size_t v7;
  size_t v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  void *__dst[2];
  unint64_t v13;

  {
    sentencepiece::PieceToByte(std::string_view)::kMap = sentencepiece::PieceToByte(std::string_view)::$_0::operator()();
  }
  if (__len >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = (_QWORD *)sentencepiece::PieceToByte(std::string_view)::kMap;
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v6 = (void **)operator new(v7 + 1);
    __dst[1] = (void *)__len;
    v13 = v8 | 0x8000000000000000;
    __dst[0] = v6;
    goto LABEL_9;
  }
  HIBYTE(v13) = __len;
  v6 = __dst;
  if (__len)
LABEL_9:
    memmove(v6, __src, __len);
  *((_BYTE *)v6 + __len) = 0;
  v9 = std::__hash_table<std::__hash_value_type<std::string,scml::Config>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,scml::Config>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,scml::Config>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,scml::Config>>>::find<std::string>(v5, (unsigned __int8 *)__dst);
  v10 = v9;
  if (SHIBYTE(v13) < 0)
  {
    operator delete(__dst[0]);
    if (v10)
      return v10[40];
  }
  else if (v9)
  {
    return v10[40];
  }
  return 0xFFFFFFFFLL;
}

void sub_245C4E608(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _Unwind_Resume(a1);
}

void sentencepiece::BuildTrie(_QWORD *a1@<X0>, _QWORD *a2@<X1>, int *a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  int v26;
  _QWORD *v27;
  _QWORD *v28;
  BOOL v29;
  _QWORD *v30;
  char *v31;
  unint64_t v32;
  _DWORD *v33;
  _BYTE *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  char *v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  char *v47;
  int v48;
  _QWORD *v49;
  _QWORD *v50;
  void *v55;
  _BYTE *v56;
  void *__p;
  char *v58;
  char *v59;
  void *v60;
  char *v61;
  char *v62;

  if (a2[2])
  {
    v60 = 0;
    v61 = 0;
    v62 = 0;
    __p = 0;
    v58 = 0;
    v59 = 0;
    v5 = a2 + 1;
    v4 = (_QWORD *)*a2;
    do
    {
      v6 = v4[4];
      v7 = v61;
      if (v61 >= v62)
      {
        v9 = (v61 - (_BYTE *)v60) >> 3;
        if ((unint64_t)(v9 + 1) >> 61)
          std::vector<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>>::__throw_length_error[abi:ne180100]();
        v10 = (v62 - (_BYTE *)v60) >> 2;
        if (v10 <= v9 + 1)
          v10 = v9 + 1;
        if ((unint64_t)(v62 - (_BYTE *)v60) >= 0x7FFFFFFFFFFFFFF8)
          v11 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v11 = v10;
        if (v11)
          v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v62, v11);
        else
          v12 = 0;
        v13 = &v12[8 * v9];
        *(_QWORD *)v13 = v6;
        v8 = v13 + 8;
        v15 = (char *)v60;
        v14 = v61;
        if (v61 != v60)
        {
          do
          {
            v16 = *((_QWORD *)v14 - 1);
            v14 -= 8;
            *((_QWORD *)v13 - 1) = v16;
            v13 -= 8;
          }
          while (v14 != v15);
          v14 = (char *)v60;
        }
        v60 = v13;
        v61 = v8;
        v62 = &v12[8 * v11];
        if (v14)
          operator delete(v14);
      }
      else
      {
        *(_QWORD *)v61 = v6;
        v8 = v7 + 8;
      }
      v61 = v8;
      v17 = v58;
      if (v58 >= v59)
      {
        v19 = (char *)__p;
        v20 = (v58 - (_BYTE *)__p) >> 2;
        v21 = v20 + 1;
        if ((unint64_t)(v20 + 1) >> 62)
          std::vector<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>>::__throw_length_error[abi:ne180100]();
        v22 = v59 - (_BYTE *)__p;
        if ((v59 - (_BYTE *)__p) >> 1 > v21)
          v21 = v22 >> 1;
        if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFFCLL)
          v23 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v23 = v21;
        if (v23)
        {
          v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v59, v23);
          v19 = (char *)__p;
          v17 = v58;
        }
        else
        {
          v24 = 0;
        }
        v25 = &v24[4 * v20];
        *(_DWORD *)v25 = *((_DWORD *)v4 + 12);
        v18 = v25 + 4;
        while (v17 != v19)
        {
          v26 = *((_DWORD *)v17 - 1);
          v17 -= 4;
          *((_DWORD *)v25 - 1) = v26;
          v25 -= 4;
        }
        __p = v25;
        v58 = v18;
        v59 = &v24[4 * v23];
        if (v19)
          operator delete(v19);
      }
      else
      {
        *(_DWORD *)v58 = *((_DWORD *)v4 + 12);
        v18 = v17 + 4;
      }
      v58 = v18;
      v27 = (_QWORD *)v4[1];
      if (v27)
      {
        do
        {
          v28 = v27;
          v27 = (_QWORD *)*v27;
        }
        while (v27);
      }
      else
      {
        do
        {
          v28 = (_QWORD *)v4[2];
          v29 = *v28 == (_QWORD)v4;
          v4 = v28;
        }
        while (!v29);
      }
      v4 = v28;
    }
    while (v28 != v5);
    if (Darts::DoubleArrayImpl<void,void,int,void>::build(a1, (v61 - (_BYTE *)v60) >> 3, (unint64_t)v60, 0, (unint64_t)__p, 0))
    {
      sentencepiece::util::Status::Status(a4, 13, "cannot build double-array.", 26);
    }
    else if (a3)
    {
      std::vector<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type,std::allocator<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>>::vector(&v55, 0x400uLL);
      *a3 = 0;
      v30 = (_QWORD *)*a2;
      if ((_QWORD *)*a2 == v5)
        goto LABEL_81;
      v31 = (char *)v55;
      v32 = (v56 - (_BYTE *)v55) >> 4;
      v33 = (_DWORD *)a1[2];
      do
      {
        v34 = (_BYTE *)v30[4];
        v35 = v30[5];
        v36 = (*v33 >> 10 << ((*v33 >> 6) & 8));
        if (v35)
        {
          v37 = 0;
          v38 = 0;
          do
          {
            v39 = v34[v37];
            v40 = v36 ^ v39;
            v41 = v33[v40];
            if ((v41 & 0x800000FF) != (_DWORD)v39)
              break;
            v36 = v40 ^ (v41 >> 10 << ((v41 >> 6) & 8));
            if ((v41 & 0x100) != 0)
            {
              if (v38 < v32)
              {
                v42 = &v31[16 * v38];
                *(_DWORD *)v42 = v33[v36] & 0x7FFFFFFF;
                *((_QWORD *)v42 + 1) = v37 + 1;
              }
              ++v38;
            }
            ++v37;
          }
          while (v35 != v37);
        }
        else
        {
          v43 = *v34;
          if (*v34)
          {
            v38 = 0;
            v44 = 1;
            do
            {
              v45 = v36 ^ v43;
              v46 = v33[v45];
              if ((v46 & 0x800000FF) != v43)
                break;
              v36 = v45 ^ (v46 >> 10 << ((v46 >> 6) & 8));
              if ((v46 & 0x100) != 0)
              {
                if (v38 < v32)
                {
                  v47 = &v31[16 * v38];
                  *(_DWORD *)v47 = v33[v36] & 0x7FFFFFFF;
                  *((_QWORD *)v47 + 1) = v44;
                }
                ++v38;
              }
              v43 = v34[v44++];
            }
            while (v43);
          }
          else
          {
            LODWORD(v38) = 0;
          }
        }
        v48 = *a3;
        if (*a3 <= (int)v38)
          v48 = v38;
        *a3 = v48;
        v49 = (_QWORD *)v30[1];
        if (v49)
        {
          do
          {
            v50 = v49;
            v49 = (_QWORD *)*v49;
          }
          while (v49);
        }
        else
        {
          do
          {
            v50 = (_QWORD *)v30[2];
            v29 = *v50 == (_QWORD)v30;
            v30 = v50;
          }
          while (!v29);
        }
        v30 = v50;
      }
      while (v50 != v5);
      if (!v48)
LABEL_81:
        sentencepiece::util::Status::Status(a4, 13, "no entry is found in the trie.", 30);
      else
        sentencepiece::util::Status::Status(a4);
      if (v55)
      {
        v56 = v55;
        operator delete(v55);
      }
    }
    else
    {
      sentencepiece::util::Status::Status(a4);
    }
    if (__p)
    {
      v58 = (char *)__p;
      operator delete(__p);
    }
    if (v60)
    {
      v61 = (char *)v60;
      operator delete(v60);
    }
  }
  else
  {
    sentencepiece::util::Status::Status(a4, 13, "no pieces are loaded.", 21);
  }
}

void sub_245C4EAB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  if (a17)
    operator delete(a17);
  if (a20)
    operator delete(a20);
  _Unwind_Resume(exception_object);
}

uint64_t absl::make_unique<sentencepiece::normalizer::PrefixMatcher,std::set<std::string_view> &>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = operator new();
  result = sentencepiece::normalizer::PrefixMatcher::PrefixMatcher(v4, a1);
  *a2 = v4;
  return result;
}

void sub_245C4EB58(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x249544F58](v1, 0x20C4093837F09);
  _Unwind_Resume(a1);
}

void sentencepiece::ModelInterface::MemoryMappableString(sentencepiece::ModelInterface *this@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  std::string *v5;
  std::string::size_type size;
  std::string *v7;
  std::string *v8;
  std::string::size_type v9;
  int v10;
  int v11;
  int v12;
  std::string *p_p;
  std::string *v14;
  std::string::size_type v15;
  std::string *v16;
  std::string::size_type v17;
  const std::string::value_type *v18;
  uint64_t v19;
  std::string::size_type v20;
  std::string *v21;
  std::string *v22;
  std::string::size_type v23;
  uint64_t v24;
  const std::string::value_type *v25;
  char *v26;
  std::string::size_type v27;
  std::string *v28;
  std::string *v29;
  std::string::size_type v30;
  std::string __p;
  std::string v32;

  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  memset(&v32, 0, sizeof(v32));
  std::string::resize(&v32, 4uLL, 0);
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v4 = &v32;
  else
    v4 = (std::string *)v32.__r_.__value_.__r.__words[0];
  LODWORD(v4->__r_.__value_.__l.__data_) = *((_DWORD *)this + 22);
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v5 = &v32;
  else
    v5 = (std::string *)v32.__r_.__value_.__r.__words[0];
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v32.__r_.__value_.__r.__words[2]);
  else
    size = v32.__r_.__value_.__l.__size_;
  std::string::append(a2, (const std::string::value_type *)v5, size);
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v32.__r_.__value_.__l.__data_);
  memset(&v32, 0, sizeof(v32));
  std::string::resize(&v32, 4uLL, 0);
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v7 = &v32;
  else
    v7 = (std::string *)v32.__r_.__value_.__r.__words[0];
  LODWORD(v7->__r_.__value_.__l.__data_) = *((_DWORD *)this + 23);
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v8 = &v32;
  else
    v8 = (std::string *)v32.__r_.__value_.__r.__words[0];
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v9 = HIBYTE(v32.__r_.__value_.__r.__words[2]);
  else
    v9 = v32.__r_.__value_.__l.__size_;
  std::string::append(a2, (const std::string::value_type *)v8, v9);
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v32.__r_.__value_.__l.__data_);
  sentencepiece::normalizer::PrefixMatcher::MemoryMappableString(*((sentencepiece::normalizer::PrefixMatcher **)this + 2), &v32);
  v10 = HIBYTE(v32.__r_.__value_.__r.__words[2]);
  v11 = v32.__r_.__value_.__r.__words[1];
  memset(&__p, 0, sizeof(__p));
  std::string::resize(&__p, 4uLL, 0);
  if ((v10 & 0x80u) == 0)
    v12 = v10;
  else
    v12 = v11;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  LODWORD(p_p->__r_.__value_.__l.__data_) = v12;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v14 = &__p;
  else
    v14 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v15 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v15 = __p.__r_.__value_.__l.__size_;
  std::string::append(a2, (const std::string::value_type *)v14, v15);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v16 = &v32;
  else
    v16 = (std::string *)v32.__r_.__value_.__r.__words[0];
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v17 = HIBYTE(v32.__r_.__value_.__r.__words[2]);
  else
    v17 = v32.__r_.__value_.__l.__size_;
  std::string::append(a2, (const std::string::value_type *)v16, v17);
  sentencepiece::mmap_util::Padding(a2);
  v19 = *((_QWORD *)this + 4);
  v18 = (const std::string::value_type *)*((_QWORD *)this + 5);
  memset(&__p, 0, sizeof(__p));
  std::string::resize(&__p, 4uLL, 0);
  v20 = 4 * v19;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v21 = &__p;
  else
    v21 = (std::string *)__p.__r_.__value_.__r.__words[0];
  LODWORD(v21->__r_.__value_.__l.__data_) = v20;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v22 = &__p;
  else
    v22 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v23 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v23 = __p.__r_.__value_.__l.__size_;
  std::string::append(a2, (const std::string::value_type *)v22, v23);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::append(a2, v18, v20);
  sentencepiece::mmap_util::Padding(a2);
  v26 = (char *)this + 64;
  v24 = *((_QWORD *)this + 8);
  v25 = (const std::string::value_type *)*((_QWORD *)v26 + 1);
  memset(&__p, 0, sizeof(__p));
  std::string::resize(&__p, 4uLL, 0);
  v27 = 4 * v24;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v28 = &__p;
  else
    v28 = (std::string *)__p.__r_.__value_.__r.__words[0];
  LODWORD(v28->__r_.__value_.__l.__data_) = v27;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v29 = &__p;
  else
    v29 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v30 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v30 = __p.__r_.__value_.__l.__size_;
  std::string::append(a2, (const std::string::value_type *)v29, v30);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::append(a2, v25, v27);
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v32.__r_.__value_.__l.__data_);
}

void sub_245C4EE40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;

  if (a20 < 0)
    operator delete(__p);
  if (*(char *)(v20 + 23) < 0)
    operator delete(*(void **)v20);
  _Unwind_Resume(exception_object);
}

void sentencepiece::SplitIntoWords(unsigned __int8 *__s1@<X0>, uint64_t a2@<X1>, char a3@<W2>, int a4@<W3>, unsigned __int8 ***a5@<X8>)
{
  unsigned __int8 *v6;
  unsigned __int8 *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  unsigned __int8 **v12;
  unsigned __int8 **v13;
  char *v14;
  char *v15;
  _BOOL4 v16;
  int v17;
  uint64_t v18;
  _BOOL4 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  unsigned __int8 **v26;
  char *v27;
  char *v28;
  unsigned __int8 **v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  unsigned __int8 **v36;
  char *v37;
  char *v38;
  unsigned __int8 **v39;
  unsigned __int8 **v40;
  int v41;
  _QWORD *v42;
  unsigned __int8 *v43;
  int v44;
  uint64_t v45;
  int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  uint64_t v53;
  unsigned __int8 **v54;
  char *v55;
  char *v56;
  unsigned __int8 **v57;

  v6 = __s1;
  v8 = &__s1[a2];
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  if ((a3 & 1) == 0)
  {
    if (a2 < 1)
      return;
    v40 = 0;
    v41 = 0;
    v42 = a5 + 2;
    v43 = __s1;
    while (1)
    {
      v44 = asc_245CA23B3[(unint64_t)*v43 >> 4];
      if ((int)v8 - (int)v43 < v44)
        v44 = (_DWORD)v8 - (_DWORD)v43;
      v45 = v44;
      if (v44 == 3)
      {
        v46 = memcmp(v43, "▁", 3uLL);
        v47 = v46 == 0;
        if (v43 == v6)
          goto LABEL_62;
        if ((v41 & a4 & 1) == 0 && !v46)
        {
          v47 = 1;
LABEL_62:
          if ((unint64_t)v40 >= *v42)
          {
            v48 = ((char *)v40 - (char *)*a5) >> 4;
            if ((unint64_t)(v48 + 1) >> 60)
              std::vector<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>>::__throw_length_error[abi:ne180100]();
            v49 = *v42 - (_QWORD)*a5;
            v50 = v49 >> 3;
            if (v49 >> 3 <= (unint64_t)(v48 + 1))
              v50 = v48 + 1;
            if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF0)
              v51 = 0xFFFFFFFFFFFFFFFLL;
            else
              v51 = v50;
            v52 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<_NSRange>>((uint64_t)(a5 + 2), v51);
            v54 = (unsigned __int8 **)&v52[16 * v48];
            *v54 = v43;
            v54[1] = 0;
            v56 = (char *)*a5;
            v55 = (char *)a5[1];
            v57 = v54;
            if (v55 != (char *)*a5)
            {
              do
              {
                *((_OWORD *)v57 - 1) = *((_OWORD *)v55 - 1);
                v57 -= 2;
                v55 -= 16;
              }
              while (v55 != v56);
              v55 = (char *)*a5;
            }
            v40 = v54 + 2;
            *a5 = v57;
            a5[1] = v54 + 2;
            a5[2] = (unsigned __int8 **)&v52[16 * v53];
            if (v55)
              operator delete(v55);
          }
          else
          {
            *v40 = v43;
            v40[1] = 0;
            v40 += 2;
          }
          a5[1] = v40;
          goto LABEL_76;
        }
        if ((v41 & 1) != 0)
        {
          v47 = v41 & (v46 == 0);
          goto LABEL_76;
        }
      }
      else if (v43 == v6)
      {
        v47 = 0;
        goto LABEL_62;
      }
      v47 = 0;
LABEL_76:
      *(v40 - 1) += v45;
      v43 += v45;
      v41 = v47;
      if (v43 >= v8)
        return;
    }
  }
  if (a2 >= 1)
  {
    v9 = a5 + 2;
    v10 = std::__allocate_at_least[abi:ne180100]<std::allocator<_NSRange>>((uint64_t)(a5 + 2), 1uLL);
    v12 = (unsigned __int8 **)&v10[2 * v11];
    *v10 = v6;
    v10[1] = 0;
    v13 = (unsigned __int8 **)(v10 + 2);
    v15 = (char *)*a5;
    v14 = (char *)a5[1];
    if (v14 != (char *)*a5)
    {
      do
      {
        *((_OWORD *)v10 - 1) = *((_OWORD *)v14 - 1);
        v10 -= 2;
        v14 -= 16;
      }
      while (v14 != v15);
      v14 = (char *)*a5;
    }
    *a5 = (unsigned __int8 **)v10;
    a5[1] = v13;
    a5[2] = v12;
    if (v14)
      operator delete(v14);
    v16 = 0;
    a5[1] = v13;
    do
    {
      v17 = asc_245CA23B3[(unint64_t)*v6 >> 4];
      if ((int)v8 - (int)v6 < v17)
        v17 = (_DWORD)v8 - (_DWORD)v6;
      v18 = v17;
      if (v17 == 3)
      {
        v19 = memcmp(v6, "▁", 3uLL) == 0;
        if (v19)
          goto LABEL_18;
      }
      else
      {
        v19 = 0;
      }
      if ((v16 & a4) != 0)
      {
        if ((unint64_t)v13 >= *v9)
        {
          v20 = ((char *)v13 - (char *)*a5) >> 4;
          if ((unint64_t)(v20 + 1) >> 60)
            std::vector<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>>::__throw_length_error[abi:ne180100]();
          v21 = *v9 - (_QWORD)*a5;
          v22 = v21 >> 3;
          if (v21 >> 3 <= (unint64_t)(v20 + 1))
            v22 = v20 + 1;
          if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF0)
            v23 = 0xFFFFFFFFFFFFFFFLL;
          else
            v23 = v22;
          v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<_NSRange>>((uint64_t)(a5 + 2), v23);
          v26 = (unsigned __int8 **)&v24[16 * v20];
          *v26 = v6;
          v26[1] = 0;
          v28 = (char *)*a5;
          v27 = (char *)a5[1];
          v29 = v26;
          if (v27 != (char *)*a5)
          {
            do
            {
              *((_OWORD *)v29 - 1) = *((_OWORD *)v27 - 1);
              v29 -= 2;
              v27 -= 16;
            }
            while (v27 != v28);
            v27 = (char *)*a5;
          }
          v13 = v26 + 2;
          *a5 = v29;
          a5[1] = v26 + 2;
          a5[2] = (unsigned __int8 **)&v24[16 * v25];
          if (v27)
            operator delete(v27);
        }
        else
        {
          *v13 = v6;
          v13[1] = 0;
          v13 += 2;
        }
        v16 = 0;
        a5[1] = v13;
        goto LABEL_31;
      }
LABEL_18:
      v16 = v19;
LABEL_31:
      *(v13 - 1) += v18;
      v6 += v18;
      if (v6 < v8 && v19 && (a4 & 1) == 0)
      {
        if ((unint64_t)v13 >= *v9)
        {
          v30 = ((char *)v13 - (char *)*a5) >> 4;
          if ((unint64_t)(v30 + 1) >> 60)
            std::vector<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>>::__throw_length_error[abi:ne180100]();
          v31 = *v9 - (_QWORD)*a5;
          v32 = v31 >> 3;
          if (v31 >> 3 <= (unint64_t)(v30 + 1))
            v32 = v30 + 1;
          if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF0)
            v33 = 0xFFFFFFFFFFFFFFFLL;
          else
            v33 = v32;
          v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<_NSRange>>((uint64_t)(a5 + 2), v33);
          v36 = (unsigned __int8 **)&v34[16 * v30];
          *v36 = v6;
          v36[1] = 0;
          v38 = (char *)*a5;
          v37 = (char *)a5[1];
          v39 = v36;
          if (v37 != (char *)*a5)
          {
            do
            {
              *((_OWORD *)v39 - 1) = *((_OWORD *)v37 - 1);
              v39 -= 2;
              v37 -= 16;
            }
            while (v37 != v38);
            v37 = (char *)*a5;
          }
          v13 = v36 + 2;
          *a5 = v39;
          a5[1] = v36 + 2;
          a5[2] = (unsigned __int8 **)&v34[16 * v35];
          if (v37)
            operator delete(v37);
        }
        else
        {
          *v13 = v6;
          v13[1] = 0;
          v13 += 2;
        }
        a5[1] = v13;
      }
    }
    while (v6 < v8);
  }
}

void sub_245C4F2FC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sentencepiece::ByteToPiece@<X0>(sentencepiece *this@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 v3;

  v3 = this;
  return absl::StrFormat<unsigned char>("<0x%02X>", &v3, a2);
}

uint64_t absl::StrFormat<unsigned char>@<X0>(char *__format@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  uint64_t v7;
  char *v8;

  v6 = snprintf(0, 0, __format, *a2);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  std::string::resize((std::string *)a3, v6, 0);
  v7 = *(unsigned __int8 *)(a3 + 23);
  if ((v7 & 0x80u) == 0)
    v8 = (char *)a3;
  else
    v8 = *(char **)a3;
  if ((v7 & 0x80u) != 0)
    v7 = *(_QWORD *)(a3 + 8);
  return snprintf(v8, v7 + 1, __format, *a2);
}

void sub_245C4F3EC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sentencepiece::PieceToByte(std::string_view)::$_0::operator()()
{
  uint64_t v0;
  int v1;
  void *__p[2];
  char v4;
  void **v5;

  v0 = operator new();
  v1 = 0;
  *(_OWORD *)v0 = 0u;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_DWORD *)(v0 + 32) = 1065353216;
  do
  {
    LOBYTE(v5) = v1;
    absl::StrFormat<unsigned char>("<0x%02X>", (unsigned __int8 *)&v5, (uint64_t)__p);
    v5 = __p;
    *((_BYTE *)std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v0, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v5)+ 40) = v1;
    if (v4 < 0)
      operator delete(__p[0]);
    ++v1;
  }
  while (v1 != 256);
  return v0;
}

void sub_245C4F4D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t Darts::DoubleArrayImpl<void,void,int,void>::build(_QWORD *a1, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, void (*a6)(unint64_t, uint64_t))
{
  uint64_t v9;
  size_t v10;
  _DWORD *v11;
  _DWORD *v12;
  uint64_t v13;
  int *v14;
  _DWORD *v15;
  int v16;
  uint64_t v17;
  void (*v19)(unint64_t, uint64_t);
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  int v24;
  unint64_t v25[4];

  v25[0] = a2;
  v25[1] = a3;
  v25[2] = a4;
  v25[3] = a5;
  v19 = a6;
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v24 = 0;
  Darts::Details::DoubleArrayBuilder::build<int>(&v19, v25);
  v9 = *((_QWORD *)&v20 + 1);
  v10 = 4 * *((_QWORD *)&v20 + 1);
  v11 = (_DWORD *)operator new[]();
  v12 = v11;
  if (v9)
    bzero(v11, v10);
  v13 = *((_QWORD *)&v20 + 1);
  if (*((_QWORD *)&v20 + 1))
  {
    v14 = (int *)v20;
    v15 = v12;
    do
    {
      v16 = *v14++;
      *v15++ = v16;
      --v13;
    }
    while (v13);
  }
  a1[1] = 0;
  a1[2] = 0;
  v17 = a1[3];
  if (v17)
  {
    MEMORY[0x249544F34](v17, 0x1000C8052888210);
    a1[3] = 0;
  }
  a1[1] = v9;
  a1[2] = v12;
  a1[3] = v12;
  if (a6)
    a6(a2 + 1, a2 + 1);
  Darts::Details::DoubleArrayBuilder::~DoubleArrayBuilder((Darts::Details::DoubleArrayBuilder *)&v19);
  return 0;
}

void sub_245C4F5FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  Darts::Details::DoubleArrayBuilder::~DoubleArrayBuilder((Darts::Details::DoubleArrayBuilder *)&a9);
  _Unwind_Resume(a1);
}

uint64_t sentencepiece::ModelInterface::status@<X0>(sentencepiece::ModelInterface *this@<X0>, sentencepiece::util::Status *a2@<X8>)
{
  return sentencepiece::util::Status::Status(a2, (sentencepiece::ModelInterface *)((char *)this + 96));
}

uint64_t sentencepiece::ModelInterface::prefix_matcher(sentencepiece::ModelInterface *this)
{
  return *((_QWORD *)this + 2);
}

void sentencepiece::ModelInterface::NBestEncode(sentencepiece::logging *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  char v9;

  if ((int)sentencepiece::logging::GetMinLogLevel(a1) <= 2)
  {
    v9 = 0;
    v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"model_interface.h", 17);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"(", 1);
    v4 = (_QWORD *)std::ostream::operator<<();
    v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)") ", 2);
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"LOG(", 4);
    v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"ERROR", 5);
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)") ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Not implemented.", 16);
    sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&v9);
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
}

void sub_245C4F6EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&a13);
  _Unwind_Resume(a1);
}

void sentencepiece::ModelInterface::SampleEncode(sentencepiece::logging *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  char v9;

  if ((int)sentencepiece::logging::GetMinLogLevel(a1) <= 2)
  {
    v9 = 0;
    v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"model_interface.h", 17);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"(", 1);
    v4 = (_QWORD *)std::ostream::operator<<();
    v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)") ", 2);
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"LOG(", 4);
    v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"ERROR", 5);
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)") ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Not implemented.", 16);
    sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&v9);
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
}

void sub_245C4F7C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&a13);
  _Unwind_Resume(a1);
}

void sentencepiece::ModelInterface::SampleEncodeAndScore(sentencepiece::logging *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  char *v9;
  void *__p;
  void *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  if ((int)sentencepiece::logging::GetMinLogLevel(a1) <= 2)
  {
    LOBYTE(__p) = 0;
    v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"model_interface.h", 17);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"(", 1);
    v4 = (_QWORD *)std::ostream::operator<<();
    v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)") ", 2);
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"LOG(", 4);
    v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"ERROR", 5);
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)") ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Not implemented.", 16);
    sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&__p);
  }
  __p = 0;
  v11 = 0;
  v13 = 0;
  v12 = 0;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  v9 = (char *)operator new(0x20uLL);
  *a2 = v9;
  a2[1] = v9;
  a2[2] = v9 + 32;
  a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::vector<std::pair<std::string_view,int>>,float>>,std::pair<std::vector<std::pair<std::string_view,int>>,float> const*,std::pair<std::vector<std::pair<std::string_view,int>>,float> const*,std::pair<std::vector<std::pair<std::string_view,int>>,float>*>((uint64_t)(a2 + 2), (uint64_t)&__p, (uint64_t)&v14, (uint64_t)v9);
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
}

void sub_245C4F920(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, uint64_t a11, void *__p, uint64_t a13)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v15 = v14;
  *(_QWORD *)(v13 + 8) = v15;
  std::vector<std::pair<std::vector<std::pair<std::string_view,int>>,float>>::__destroy_vector::operator()[abi:ne180100](&a10);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

float sentencepiece::ModelInterface::CalculateEntropy(sentencepiece::logging *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  char v8;

  if ((int)sentencepiece::logging::GetMinLogLevel(a1) <= 2)
  {
    v8 = 0;
    v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"model_interface.h", 17);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)"(", 1);
    v2 = (_QWORD *)std::ostream::operator<<();
    v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)") ", 2);
    v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"LOG(", 4);
    v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"ERROR", 5);
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)") ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Not implemented.", 16);
    sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&v8);
  }
  return 0.0;
}

void sub_245C4FA20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&a13);
  _Unwind_Resume(a1);
}

uint64_t sentencepiece::ModelInterface::IsSampleEncodeAvailable(sentencepiece::ModelInterface *this)
{
  return 0;
}

uint64_t sentencepiece::ModelInterface::IsNBestEncodeAvailable(sentencepiece::ModelInterface *this)
{
  return 0;
}

uint64_t sentencepiece::ModelInterface::IsSampleEncodeAndScoreAvailable(sentencepiece::ModelInterface *this)
{
  return 0;
}

uint64_t sentencepiece::ModelInterface::IsCalculateEntropyAvailable(sentencepiece::ModelInterface *this)
{
  return 0;
}

uint64_t sentencepiece::ModelInterface::IdToPiece(sentencepiece::ModelInterface *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 88))(*((_QWORD *)this + 1));
}

uint64_t sentencepiece::ModelInterface::GetPieceSize(sentencepiece::ModelInterface *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 1);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  return result;
}

uint64_t sentencepiece::ModelInterface::GetScore(sentencepiece::ModelInterface *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 96))(*((_QWORD *)this + 1));
}

uint64_t sentencepiece::ModelInterface::IsUnknown(sentencepiece::ModelInterface *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 112))(*((_QWORD *)this + 1));
}

uint64_t sentencepiece::ModelInterface::IsControl(sentencepiece::ModelInterface *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 120))(*((_QWORD *)this + 1));
}

uint64_t sentencepiece::ModelInterface::IsUnused(sentencepiece::ModelInterface *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 128))(*((_QWORD *)this + 1));
}

uint64_t sentencepiece::ModelInterface::IsUserDefined(sentencepiece::ModelInterface *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 136))(*((_QWORD *)this + 1));
}

uint64_t sentencepiece::ModelInterface::IsByte(sentencepiece::ModelInterface *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 144))(*((_QWORD *)this + 1));
}

uint64_t sentencepiece::ModelInterface::ByteFallbackEnabled(sentencepiece::ModelInterface *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 1);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 64))(result);
  return result;
}

BOOL sentencepiece::ModelInterface::VerifyOutputsEquivalent(int a1, void *__s1, size_t a3, void *__s2, uint64_t a5)
{
  return a3 == a5 && memcmp(__s1, __s2, a3) == 0;
}

void sentencepiece::error::Die::~Die(sentencepiece::error::Die *this)
{
  const std::locale::facet *v2;
  sentencepiece::error *v3;
  std::locale v4;

  std::ios_base::getloc((const std::ios_base *)(MEMORY[0x24BEDB310] + *(_QWORD *)(*MEMORY[0x24BEDB310] - 24)));
  v2 = std::locale::use_facet(&v4, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v2->__vftable[2].~facet_0)(v2, 10);
  std::locale::~locale(&v4);
  std::ostream::put();
  v3 = (sentencepiece::error *)std::ostream::flush();
  if (*(_BYTE *)this)
    sentencepiece::error::Abort(v3);
}

void sub_245C4FBC0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  __clang_call_terminate(a1);
}

uint64_t google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<sentencepiece::ModelProto_SentencePiece>::TypeHandler>(uint64_t a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1705);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1706);
    v5 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) < (current_size_): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * a2 + 8);
}

void sub_245C4FC98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<std::string,unsigned char>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,unsigned char>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,unsigned char>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,unsigned char>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  void **v14;
  void *i;
  unint64_t v16;
  _QWORD *v17;
  __int128 *v18;
  __int128 v19;
  float v20;
  float v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;

  v8 = (_QWORD *)(a1 + 24);
  v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(void **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, (unsigned __int8 *)i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  v17 = (_QWORD *)(a1 + 16);
  i = operator new(0x30uLL);
  *(_QWORD *)i = 0;
  *((_QWORD *)i + 1) = v10;
  v18 = *a4;
  v19 = **a4;
  *((_QWORD *)i + 4) = *((_QWORD *)*a4 + 2);
  *((_OWORD *)i + 1) = v19;
  *((_QWORD *)v18 + 1) = 0;
  *((_QWORD *)v18 + 2) = 0;
  *(_QWORD *)v18 = 0;
  *((_BYTE *)i + 40) = 0;
  v20 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v21 = *(float *)(a1 + 32);
  if (!v11 || (float)(v21 * (float)v11) < v20)
  {
    v22 = 1;
    if (v11 >= 3)
      v22 = (v11 & (v11 - 1)) != 0;
    v23 = v22 | (2 * v11);
    v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24)
      v25 = v24;
    else
      v25 = v23;
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1, v25);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v26 = *(_QWORD *)a1;
  v27 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v27)
  {
    *(_QWORD *)i = *v27;
LABEL_38:
    *v27 = i;
    goto LABEL_39;
  }
  *(_QWORD *)i = *v17;
  *v17 = i;
  *(_QWORD *)(v26 + 8 * v4) = v17;
  if (*(_QWORD *)i)
  {
    v28 = *(_QWORD *)(*(_QWORD *)i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v28 >= v11)
        v28 %= v11;
    }
    else
    {
      v28 &= v11 - 1;
    }
    v27 = (_QWORD *)(*(_QWORD *)a1 + 8 * v28);
    goto LABEL_38;
  }
LABEL_39:
  ++*v8;
  return i;
}

void sub_245C4FF24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void **v10;
  uint64_t v11;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::vector<std::pair<std::string_view,int>>,float>>,std::pair<std::vector<std::pair<std::string_view,int>>,float> const*,std::pair<std::vector<std::pair<std::string_view,int>>,float> const*,std::pair<std::vector<std::pair<std::string_view,int>>,float>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  uint64_t v10;
  uint64_t v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *(_QWORD *)v4 = 0;
      *(_QWORD *)(v4 + 8) = 0;
      *(_QWORD *)(v4 + 16) = 0;
      std::vector<std::pair<std::string_view,int>>::__init_with_size[abi:ne180100]<std::pair<std::string_view,int>*,std::pair<std::string_view,int>*>((char *)v4, *(__int128 **)v6, *(__int128 **)(v6 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v6 + 8) - *(_QWORD *)v6) >> 3));
      *(_DWORD *)(v4 + 24) = *(_DWORD *)(v6 + 24);
      v4 = v11 + 32;
      v11 += 32;
      v6 += 32;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<std::pair<std::string_view,int>>,float>>,std::pair<std::vector<std::pair<std::string_view,int>>,float>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_245C4FFF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<std::pair<std::string_view,int>>,float>>,std::pair<std::vector<std::pair<std::string_view,int>>,float>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

char *std::vector<std::pair<std::string_view,int>>::__init_with_size[abi:ne180100]<std::pair<std::string_view,int>*,std::pair<std::string_view,int>*>(char *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  char *v6;
  uint64_t v7;
  __int128 v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    v7 = *((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2;
      *(_QWORD *)(v7 + 16) = *((_QWORD *)a2 + 2);
      *(_OWORD *)v7 = v8;
      v7 += 24;
      a2 = (__int128 *)((char *)a2 + 24);
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_245C50064(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<std::pair<std::string_view,int>>,float>>,std::pair<std::vector<std::pair<std::string_view,int>>,float>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<std::pair<std::string_view,int>>,float>>,std::pair<std::vector<std::pair<std::string_view,int>>,float>*>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<std::pair<std::string_view,int>>,float>>,std::pair<std::vector<std::pair<std::string_view,int>>,float>*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;

  v1 = **(_QWORD **)(a1 + 16);
  v2 = **(_QWORD **)(a1 + 8);
  if (v1 != v2)
  {
    v3 = **(_QWORD **)(a1 + 16);
    do
    {
      v5 = *(void **)(v3 - 32);
      v3 -= 32;
      v4 = v5;
      if (v5)
      {
        *(_QWORD *)(v1 - 24) = v4;
        operator delete(v4);
      }
      v1 = v3;
    }
    while (v3 != v2);
  }
}

void std::vector<std::pair<std::vector<std::pair<std::string_view,int>>,float>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::pair<std::vector<std::pair<std::string_view,int>>,float>>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<std::pair<std::vector<std::pair<std::string_view,int>>,float>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;

  v3 = *a1;
  v2 = a1[1];
  if (v2 != *a1)
  {
    v4 = a1[1];
    do
    {
      v6 = *(void **)(v4 - 32);
      v4 -= 32;
      v5 = v6;
      if (v6)
      {
        *(_QWORD *)(v2 - 24) = v5;
        operator delete(v5);
      }
      v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

void Darts::DoubleArrayImpl<void,void,int,void>::~DoubleArrayImpl(_QWORD *a1)
{
  uint64_t v2;

  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_2516E3588;
  v2 = a1[3];
  if (v2)
  {
    MEMORY[0x249544F34](v2, 0x1000C8052888210);
    a1[3] = 0;
  }
  JUMPOUT(0x249544F58);
}

uint64_t **std::unique_ptr<sentencepiece::normalizer::PrefixMatcher>::reset[abi:ne180100](uint64_t **result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v3 = *v2;
    *v2 = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    JUMPOUT(0x249544F58);
  }
  return result;
}

void std::__tree<std::__value_type<std::string_view,int>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,int>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,int>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string_view,int>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,int>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,int>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string_view,int>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,int>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,int>>>::destroy(a1, a2[1]);
    operator delete(a2);
  }
}

_OWORD *std::__tree<std::__value_type<std::string_view,int>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,int>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,int>>>::__emplace_unique_key_args<std::string_view,std::pair<std::string_view const,int> const&>(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  void **v5;
  _OWORD *v6;
  uint64_t **v7;
  uint64_t v9;

  v5 = (void **)std::__tree<std::__value_type<std::string_view,int>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,int>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,int>>>::__find_equal<std::string_view>((uint64_t)a1, &v9, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = operator new(0x38uLL);
    v6[2] = *(_OWORD *)a3;
    *((_QWORD *)v6 + 6) = *(_QWORD *)(a3 + 16);
    std::__tree<std::string>::__insert_node_at(a1, v9, v7, (uint64_t *)v6);
  }
  return v6;
}

_QWORD *std::__tree<std::__value_type<std::string_view,int>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,int>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,int>>>::__find_equal<std::string_view>(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    v7 = a1 + 16;
    do
    {
      while (1)
      {
        v8 = v4;
        v9 = (uint64_t)(v4 + 4);
        if (!std::less<std::string_view>::operator()[abi:ne180100](v7, a3, (uint64_t)(v4 + 4)))
          break;
        v4 = (_QWORD *)*v8;
        v5 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (!std::less<std::string_view>::operator()[abi:ne180100](v7, v9, a3))
        break;
      v5 = v8 + 1;
      v4 = (_QWORD *)v8[1];
    }
    while (v4);
  }
  else
  {
    v8 = (_QWORD *)(a1 + 8);
  }
LABEL_10:
  *a2 = v8;
  return v5;
}

uint64_t std::less<std::string_view>::operator()[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3)
{
  const void *v3;
  size_t v4;
  const void *v5;
  size_t v6;
  size_t v7;
  int v8;
  unsigned int v9;

  v3 = *(const void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(const void **)a3;
  v6 = *(_QWORD *)(a3 + 8);
  if (v6 >= v4)
    v7 = v4;
  else
    v7 = *(_QWORD *)(a3 + 8);
  v8 = memcmp(v3, v5, v7);
  if (v4 < v6)
    v9 = -1;
  else
    v9 = 1;
  if (v4 == v6)
    v9 = 0;
  if (v8)
    v9 = v8;
  return v9 >> 31;
}

uint64_t *std::__tree<std::string_view>::__emplace_unique_key_args<std::string_view,std::string_view>(uint64_t **a1, uint64_t a2, _OWORD *a3)
{
  void **v5;
  uint64_t *v6;
  uint64_t **v7;
  uint64_t v9;

  v5 = (void **)std::__tree<std::__value_type<std::string_view,int>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,int>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,int>>>::__find_equal<std::string_view>((uint64_t)a1, &v9, a2);
  v6 = (uint64_t *)*v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = (uint64_t *)operator new(0x30uLL);
    *((_OWORD *)v6 + 2) = *a3;
    std::__tree<std::string>::__insert_node_at(a1, v9, v7, v6);
  }
  return v6;
}

uint64_t std::__find_BOOL[abi:ne180100]<false,std::vector<BOOL>,false>@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v3 = *(unsigned int *)(result + 8);
  v4 = *(_QWORD **)result;
  if (!(_DWORD)v3)
    goto LABEL_9;
  v5 = (64 - v3);
  if (v5 >= a2)
    v6 = a2;
  else
    v6 = (64 - v3);
  if (((0xFFFFFFFFFFFFFFFFLL >> (64 - v3 - v6)) & (-1 << v3) & ~*v4) != 0)
  {
    v7 = __rbit64((0xFFFFFFFFFFFFFFFFLL >> (64 - v3 - v6)) & (-1 << v3) & ~*v4);
LABEL_22:
    *(_QWORD *)a3 = v4;
    *(_DWORD *)(a3 + 8) = __clz(v7);
    return result;
  }
  if (v5 < a2)
  {
    a2 -= v6;
    *(_QWORD *)result = ++v4;
LABEL_9:
    if (a2 < 0x40)
    {
LABEL_12:
      if (!a2 || (v8 = (0xFFFFFFFFFFFFFFFFLL >> -(char)a2) & ~*v4) == 0)
      {
        *(_QWORD *)a3 = v4;
        *(_DWORD *)(a3 + 8) = a2;
        return result;
      }
    }
    else
    {
      while (*v4 == -1)
      {
        *(_QWORD *)result = ++v4;
        a2 -= 64;
        if (a2 <= 0x3F)
          goto LABEL_12;
      }
      v8 = ~*v4;
    }
    v7 = __rbit64(v8);
    goto LABEL_22;
  }
  v9 = v3 + a2 - 63;
  if (v9 < 0)
    v9 = v3 + a2;
  v10 = v9 >> 6;
  v11 = (v3 + a2) >> 6;
  if ((a2 & 0x8000000000000000) != 0)
    v11 = v10;
  *(_QWORD *)a3 = &v4[v11];
  *(_DWORD *)(a3 + 8) = ((_BYTE)v3 + (_BYTE)a2) & 0x3F;
  return result;
}

void Darts::Details::DoubleArrayBuilder::build<int>(void (**a1)(unint64_t, uint64_t), unint64_t *a2)
{
  _OWORD v3[3];
  _OWORD v4[6];
  _OWORD v5[3];
  uint64_t v6;

  if (a2[3])
  {
    v6 = 0;
    memset(v5, 0, sizeof(v5));
    memset(v4, 0, sizeof(v4));
    memset(v3, 0, sizeof(v3));
    Darts::Details::DoubleArrayBuilder::build_dawg<int>(a1, a2, (Darts::Details::DawgBuilder *)v3);
    Darts::Details::DoubleArrayBuilder::build_from_dawg((Darts::Details::DoubleArrayBuilder *)a1, (const Darts::Details::DawgBuilder *)v3);
    Darts::Details::AutoPool<Darts::Details::DawgNode>::clear((uint64_t *)v3);
    Darts::Details::AutoPool<Darts::Details::DawgUnit>::clear((uint64_t *)&v3[1] + 1);
    Darts::Details::AutoPool<unsigned char>::clear((uint64_t *)v4);
    Darts::Details::BitVector::clear((Darts::Details::BitVector *)((char *)&v4[1] + 8));
    Darts::Details::AutoPool<unsigned int>::clear((uint64_t *)&v4[4] + 1);
    Darts::Details::AutoPool<unsigned int>::clear((uint64_t *)v5);
    Darts::Details::AutoPool<unsigned int>::clear((uint64_t *)&v5[1] + 1);
    v6 = 0;
    Darts::Details::DawgBuilder::~DawgBuilder((Darts::Details::DawgBuilder *)v3);
  }
  else
  {
    Darts::Details::DoubleArrayBuilder::build_from_keyset<int>((uint64_t)a1, a2);
  }
}

void sub_245C50640(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  Darts::Details::DawgBuilder::~DawgBuilder((Darts::Details::DawgBuilder *)&a9);
  _Unwind_Resume(a1);
}

uint64_t *Darts::Details::AutoPool<unsigned char>::~AutoPool(uint64_t *a1)
{
  Darts::Details::AutoPool<unsigned char>::clear(a1);
  if (*a1)
  {
    MEMORY[0x249544F34](*a1, 0x1000C8077774924);
    *a1 = 0;
  }
  return a1;
}

uint64_t Darts::Details::AutoPool<unsigned char>::clear(uint64_t *a1)
{
  uint64_t result;

  Darts::Details::AutoPool<unsigned char>::resize(a1, 0);
  result = *a1;
  if (*a1)
  {
    result = MEMORY[0x249544F34](result, 0x1000C8077774924);
    *a1 = 0;
  }
  a1[1] = 0;
  a1[2] = 0;
  return result;
}

uint64_t *Darts::Details::AutoPool<unsigned char>::resize(uint64_t *result, unint64_t a2)
{
  uint64_t *v3;
  unint64_t v4;

  v3 = result;
  v4 = result[1];
  if (v4 > a2)
  {
    result[1] = a2;
    v4 = a2;
  }
  if (result[2] < a2)
  {
    result = (uint64_t *)Darts::Details::AutoPool<unsigned char>::resize_buf(result, a2);
    v4 = v3[1];
  }
  if (v4 < a2)
    v3[1] = a2;
  return result;
}

uint64_t Darts::Details::AutoPool<unsigned char>::resize_buf(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t i;

  if (a2 >= 2 * a1[2])
  {
    v4 = a2;
  }
  else
  {
    v3 = 1;
    do
    {
      v4 = v3;
      v3 *= 2;
    }
    while (v4 < a2);
  }
  v5 = operator new[]();
  result = *a1;
  v7 = a1[1];
  if (v7)
  {
    for (i = 0; i != v7; ++i)
      *(_BYTE *)(v5 + i) = *(_BYTE *)(result + i);
    *a1 = v5;
    a1[2] = v4;
LABEL_11:
    JUMPOUT(0x249544F34);
  }
  *a1 = v5;
  a1[2] = v4;
  if (result)
    goto LABEL_11;
  return result;
}

void Darts::Details::Exception::~Exception(std::exception *this)
{
  std::exception::~exception(this);
  JUMPOUT(0x249544F58);
}

const char *Darts::Details::Exception::what(Darts::Details::Exception *this)
{
  if (*((_QWORD *)this + 1))
    return (const char *)*((_QWORD *)this + 1);
  else
    return "";
}

uint64_t *Darts::Details::AutoPool<Darts::Details::DoubleArrayBuilderUnit>::~AutoPool(uint64_t *a1)
{
  Darts::Details::AutoPool<Darts::Details::DoubleArrayBuilderUnit>::clear(a1);
  if (*a1)
  {
    MEMORY[0x249544F34](*a1, 0x1000C8077774924);
    *a1 = 0;
  }
  return a1;
}

uint64_t Darts::Details::AutoPool<Darts::Details::DoubleArrayBuilderUnit>::clear(uint64_t *a1)
{
  uint64_t result;

  Darts::Details::AutoPool<Darts::Details::DoubleArrayBuilderUnit>::resize(a1, 0);
  result = *a1;
  if (*a1)
  {
    result = MEMORY[0x249544F34](result, 0x1000C8077774924);
    *a1 = 0;
  }
  a1[1] = 0;
  a1[2] = 0;
  return result;
}

void Darts::Details::AutoPool<Darts::Details::DoubleArrayBuilderUnit>::resize(uint64_t *a1, unint64_t a2)
{
  unint64_t v4;

  v4 = a1[1];
  if (v4 > a2)
  {
    a1[1] = a2;
    v4 = a2;
  }
  if (a1[2] < a2)
  {
    Darts::Details::AutoPool<Darts::Details::DoubleArrayBuilderUnit>::resize_buf(a1, a2);
    v4 = a1[1];
  }
  if (a2 > v4)
  {
    bzero((void *)(*a1 + 4 * v4), 4 * (a2 - v4));
    a1[1] = a2;
  }
}

uint64_t Darts::Details::AutoPool<Darts::Details::DoubleArrayBuilderUnit>::resize_buf(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t i;

  if (a2 >= 2 * a1[2])
  {
    v4 = a2;
  }
  else
  {
    v3 = 1;
    do
    {
      v4 = v3;
      v3 *= 2;
    }
    while (v4 < a2);
  }
  v5 = operator new[]();
  result = *a1;
  v7 = a1[1];
  if (v7)
  {
    for (i = 0; i != v7; ++i)
      *(_DWORD *)(v5 + 4 * i) = *(_DWORD *)(result + 4 * i);
    *a1 = v5;
    a1[2] = v4;
LABEL_11:
    JUMPOUT(0x249544F34);
  }
  *a1 = v5;
  a1[2] = v4;
  if (result)
    goto LABEL_11;
  return result;
}

uint64_t Darts::Details::DoubleArrayBuilder::build_dawg<int>(void (**a1)(unint64_t, uint64_t), unint64_t *a2, Darts::Details::DawgBuilder *this)
{
  unint64_t v6;
  unint64_t v7;
  const char *v8;
  unint64_t v9;
  unint64_t v11;
  int v12;
  int *v13;
  char v14;
  int v15;
  int v16;

  Darts::Details::DawgBuilder::init(this);
  if (*a2)
  {
    v6 = 0;
    do
    {
      v7 = a2[2];
      v8 = *(const char **)(a2[1] + 8 * v6);
      if (v7)
      {
        v9 = *(_QWORD *)(v7 + 8 * v6);
      }
      else
      {
        while (v8[v7++])
          ;
        v9 = v7 - 1;
      }
      v11 = a2[3];
      if (v11)
        v12 = *(_DWORD *)(v11 + 4 * v6);
      else
        v12 = v6;
      Darts::Details::DawgBuilder::insert(this, v8, v9, v12);
      ++v6;
      if (*a1)
        (*a1)(v6, *a2 + 1);
    }
    while (v6 < *a2);
  }
  Darts::Details::DawgBuilder::flush((uint64_t)this, 0);
  v13 = *(int **)this;
  v14 = *(_BYTE *)(*(_QWORD *)this + 8);
  v15 = **(_DWORD **)this;
  if (v14)
    v16 = (2 * *((unsigned __int8 *)v13 + 9)) | (4 * v15);
  else
    v16 = 2 * v15;
  **((_DWORD **)this + 3) = v16 | *((unsigned __int8 *)v13 + 10);
  **((_BYTE **)this + 6) = v14;
  Darts::Details::AutoPool<Darts::Details::DawgNode>::clear((uint64_t *)this);
  Darts::Details::AutoPool<unsigned int>::clear((uint64_t *)this + 15);
  Darts::Details::AutoPool<unsigned int>::clear((uint64_t *)this + 18);
  Darts::Details::AutoPool<unsigned int>::clear((uint64_t *)this + 21);
  return Darts::Details::BitVector::build((Darts::Details::DawgBuilder *)((char *)this + 72));
}

uint64_t Darts::Details::DoubleArrayBuilder::build_from_dawg(Darts::Details::DoubleArrayBuilder *this, const Darts::Details::DawgBuilder *a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned int **v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  int v16;
  int v17;
  unint64_t v18;
  int v19;
  int v20;
  int v21;
  unint64_t v22;
  char v23;
  int j;
  int *v25;
  _DWORD *v26;
  uint64_t v27;
  unsigned int v28;
  int *v29;
  int v30;
  uint64_t result;
  uint64_t v32;

  v4 = *((_QWORD *)a2 + 4);
  v5 = 1;
  do
  {
    v6 = v5;
    v5 *= 2;
  }
  while (v6 < v4);
  v7 = (unsigned int **)((char *)this + 8);
  if (*((_QWORD *)this + 3) < v6)
    Darts::Details::AutoPool<Darts::Details::DoubleArrayBuilderUnit>::resize_buf((uint64_t *)this + 1, v6);
  v8 = operator new[]();
  v9 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = v8;
  if (v9)
    MEMORY[0x249544F34](v9, 0x1000C8052888210);
  v10 = *((_QWORD *)a2 + 13);
  if (v10)
    bzero(*((void **)this + 8), 4 * v10);
  v11 = operator new[]();
  for (i = 0; i != 49152; i += 12)
  {
    v13 = v11 + i;
    *(_WORD *)(v13 + 8) = 0;
    *(_QWORD *)v13 = 0;
  }
  v14 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = v11;
  if (v14)
    MEMORY[0x249544F34](v14, 0x1000C80CBA68D63);
  if (!*((_QWORD *)this + 2))
    Darts::Details::DoubleArrayBuilder::expand_units(this);
  v15 = (int *)*((_QWORD *)this + 4);
  v16 = v15[1];
  if (!*((_DWORD *)this + 18))
  {
    *((_DWORD *)this + 18) = v16;
    if (!v16)
      *((_DWORD *)this + 18) = *((_QWORD *)this + 2);
  }
  v17 = *v15;
  v15[3 * (*v15 & 0xFFF) + 1] = v16;
  v15[3 * (v15[1] & 0xFFF)] = v17;
  *((_WORD *)v15 + 4) = 257;
  **v7 = **v7 & 0x80000100 | 0x400;
  if (**((_DWORD **)a2 + 3) >= 4u)
  {
    Darts::Details::DoubleArrayBuilder::build_from_dawg(this, a2, 0, 0);
    v15 = (int *)*((_QWORD *)this + 4);
  }
  v18 = *((_QWORD *)this + 2) >> 8;
  if (v18 <= 0x10)
    v19 = 0;
  else
    v19 = v18 - 16;
  v32 = *((_QWORD *)this + 2) >> 8;
  if (v19 != (_DWORD)v18)
  {
    v20 = v19 << 8;
    do
    {
      v21 = 0;
      v22 = (v19 << 8);
      while (1)
      {
        v23 = v20 + v21;
        if (!BYTE1(v15[3 * ((v20 + v21) & 0xFFF) + 2]))
          break;
        if (++v21 == 256)
        {
          v23 = 0;
          break;
        }
      }
      for (j = 0; j != 256; ++j)
      {
        if (!LOBYTE(v15[3 * (v22 & 0xFFF) + 2]))
        {
          if (*((_QWORD *)this + 2) <= v22)
          {
            Darts::Details::DoubleArrayBuilder::expand_units(this);
            v15 = (int *)*((_QWORD *)this + 4);
          }
          v25 = &v15[3 * (v22 & 0xFFF)];
          v28 = v25[1];
          v26 = v25 + 1;
          v27 = v28;
          if (v22 == *((_DWORD *)this + 18))
          {
            *((_DWORD *)this + 18) = v27;
            if (v22 == v27)
              *((_DWORD *)this + 18) = *((_QWORD *)this + 2);
          }
          v29 = &v15[3 * (v22 & 0xFFF)];
          v30 = *v29;
          v15[3 * (v30 & 0xFFF) + 1] = v27;
          v15[3 * (*v26 & 0xFFF)] = v30;
          *((_BYTE *)v29 + 8) = 1;
          LOBYTE((*v7)[v22]) = v23 ^ (v20 + j);
        }
        ++v22;
      }
      ++v19;
      v20 += 256;
    }
    while (v19 != (_DWORD)v32);
  }
  if (v15)
  {
    MEMORY[0x249544F34](v15, 0x1000C80CBA68D63);
    *((_QWORD *)this + 4) = 0;
  }
  Darts::Details::AutoPool<unsigned char>::clear((uint64_t *)this + 5);
  result = *((_QWORD *)this + 8);
  if (result)
  {
    result = MEMORY[0x249544F34](result, 0x1000C8052888210);
    *((_QWORD *)this + 8) = 0;
  }
  return result;
}

uint64_t Darts::Details::DoubleArrayBuilder::build_from_keyset<int>(uint64_t a1, unint64_t *a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned int **v7;
  uint64_t v8;
  uint64_t i;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  int v13;
  int v14;
  unint64_t v15;
  int v16;
  int v17;
  int v18;
  unint64_t v19;
  char v20;
  int j;
  int *v22;
  _DWORD *v23;
  uint64_t v24;
  unsigned int v25;
  int *v26;
  int v27;
  uint64_t v29;

  v4 = *a2;
  v5 = 1;
  do
  {
    v6 = v5;
    v5 *= 2;
  }
  while (v6 < v4);
  v7 = (unsigned int **)(a1 + 8);
  if (*(_QWORD *)(a1 + 24) < v6)
    Darts::Details::AutoPool<Darts::Details::DoubleArrayBuilderUnit>::resize_buf((uint64_t *)(a1 + 8), v6);
  v8 = operator new[]();
  for (i = 0; i != 49152; i += 12)
  {
    v10 = v8 + i;
    *(_WORD *)(v10 + 8) = 0;
    *(_QWORD *)v10 = 0;
  }
  v11 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v8;
  if (v11)
    MEMORY[0x249544F34](v11, 0x1000C80CBA68D63);
  if (!*(_QWORD *)(a1 + 16))
    Darts::Details::DoubleArrayBuilder::expand_units((Darts::Details::DoubleArrayBuilder *)a1);
  v12 = *(int **)(a1 + 32);
  v13 = v12[1];
  if (!*(_DWORD *)(a1 + 72))
  {
    *(_DWORD *)(a1 + 72) = v13;
    if (!v13)
      *(_DWORD *)(a1 + 72) = *(_QWORD *)(a1 + 16);
  }
  v14 = *v12;
  v12[3 * (*v12 & 0xFFF) + 1] = v13;
  v12[3 * (v12[1] & 0xFFF)] = v14;
  *((_WORD *)v12 + 4) = 257;
  **v7 = **v7 & 0x80000100 | 0x400;
  if (*a2)
  {
    Darts::Details::DoubleArrayBuilder::build_from_keyset<int>(a1, a2, 0, *a2, 0, 0);
    v12 = *(int **)(a1 + 32);
  }
  v15 = *(_QWORD *)(a1 + 16) >> 8;
  if (v15 <= 0x10)
    v16 = 0;
  else
    v16 = v15 - 16;
  v29 = *(_QWORD *)(a1 + 16) >> 8;
  if (v16 != (_DWORD)v15)
  {
    v17 = v16 << 8;
    do
    {
      v18 = 0;
      v19 = (v16 << 8);
      while (1)
      {
        v20 = v17 + v18;
        if (!BYTE1(v12[3 * ((v17 + v18) & 0xFFF) + 2]))
          break;
        if (++v18 == 256)
        {
          v20 = 0;
          break;
        }
      }
      for (j = 0; j != 256; ++j)
      {
        if (!LOBYTE(v12[3 * (v19 & 0xFFF) + 2]))
        {
          if (*(_QWORD *)(a1 + 16) <= v19)
          {
            Darts::Details::DoubleArrayBuilder::expand_units((Darts::Details::DoubleArrayBuilder *)a1);
            v12 = *(int **)(a1 + 32);
          }
          v22 = &v12[3 * (v19 & 0xFFF)];
          v25 = v22[1];
          v23 = v22 + 1;
          v24 = v25;
          if (v19 == *(_DWORD *)(a1 + 72))
          {
            *(_DWORD *)(a1 + 72) = v24;
            if (v19 == v24)
              *(_DWORD *)(a1 + 72) = *(_QWORD *)(a1 + 16);
          }
          v26 = &v12[3 * (v19 & 0xFFF)];
          v27 = *v26;
          v12[3 * (v27 & 0xFFF) + 1] = v24;
          v12[3 * (*v23 & 0xFFF)] = v27;
          *((_BYTE *)v26 + 8) = 1;
          LOBYTE((*v7)[v19]) = v20 ^ (v17 + j);
        }
        ++v19;
      }
      ++v16;
      v17 += 256;
    }
    while (v16 != (_DWORD)v29);
  }
  if (v12)
  {
    MEMORY[0x249544F34](v12, 0x1000C80CBA68D63);
    *(_QWORD *)(a1 + 32) = 0;
  }
  return Darts::Details::AutoPool<unsigned char>::clear((uint64_t *)(a1 + 40));
}

uint64_t *Darts::Details::AutoStack<unsigned int>::~AutoStack(uint64_t *a1)
{
  Darts::Details::AutoPool<unsigned int>::clear(a1);
  return Darts::Details::AutoPool<unsigned int>::~AutoPool(a1);
}

uint64_t Darts::Details::AutoPool<unsigned int>::clear(uint64_t *a1)
{
  uint64_t result;

  Darts::Details::AutoPool<unsigned int>::resize(a1, 0);
  result = *a1;
  if (*a1)
  {
    result = MEMORY[0x249544F34](result, 0x1000C8077774924);
    *a1 = 0;
  }
  a1[1] = 0;
  a1[2] = 0;
  return result;
}

uint64_t *Darts::Details::AutoPool<unsigned int>::resize(uint64_t *result, unint64_t a2)
{
  uint64_t *v3;
  unint64_t v4;

  v3 = result;
  v4 = result[1];
  if (v4 > a2)
  {
    result[1] = a2;
    v4 = a2;
  }
  if (result[2] < a2)
  {
    result = (uint64_t *)Darts::Details::AutoPool<unsigned int>::resize_buf(result, a2);
    v4 = v3[1];
  }
  if (v4 < a2)
    v3[1] = a2;
  return result;
}

uint64_t Darts::Details::AutoPool<unsigned int>::resize_buf(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t i;

  if (a2 >= 2 * a1[2])
  {
    v4 = a2;
  }
  else
  {
    v3 = 1;
    do
    {
      v4 = v3;
      v3 *= 2;
    }
    while (v4 < a2);
  }
  v5 = operator new[]();
  result = *a1;
  v7 = a1[1];
  if (v7)
  {
    for (i = 0; i != v7; ++i)
      *(_DWORD *)(v5 + 4 * i) = *(_DWORD *)(result + 4 * i);
    *a1 = v5;
    a1[2] = v4;
LABEL_11:
    JUMPOUT(0x249544F34);
  }
  *a1 = v5;
  a1[2] = v4;
  if (result)
    goto LABEL_11;
  return result;
}

uint64_t *Darts::Details::AutoPool<unsigned int>::~AutoPool(uint64_t *a1)
{
  Darts::Details::AutoPool<unsigned int>::clear(a1);
  if (*a1)
  {
    MEMORY[0x249544F34](*a1, 0x1000C8077774924);
    *a1 = 0;
  }
  return a1;
}

void Darts::Details::BitVector::~BitVector(Darts::Details::BitVector *this)
{
  uint64_t v2;

  Darts::Details::BitVector::clear(this);
  v2 = *((_QWORD *)this + 3);
  if (v2)
  {
    MEMORY[0x249544F34](v2, 0x1000C8052888210);
    *((_QWORD *)this + 3) = 0;
  }
  Darts::Details::AutoPool<unsigned int>::~AutoPool((uint64_t *)this);
}

uint64_t Darts::Details::BitVector::clear(Darts::Details::BitVector *this)
{
  uint64_t result;

  Darts::Details::AutoPool<unsigned int>::clear((uint64_t *)this);
  result = *((_QWORD *)this + 3);
  if (result)
  {
    result = MEMORY[0x249544F34](result, 0x1000C8052888210);
    *((_QWORD *)this + 3) = 0;
  }
  return result;
}

uint64_t *Darts::Details::AutoPool<Darts::Details::DawgUnit>::~AutoPool(uint64_t *a1)
{
  Darts::Details::AutoPool<Darts::Details::DawgUnit>::clear(a1);
  if (*a1)
  {
    MEMORY[0x249544F34](*a1, 0x1000C8077774924);
    *a1 = 0;
  }
  return a1;
}

uint64_t Darts::Details::AutoPool<Darts::Details::DawgUnit>::clear(uint64_t *a1)
{
  uint64_t result;

  Darts::Details::AutoPool<Darts::Details::DawgUnit>::resize(a1, 0);
  result = *a1;
  if (*a1)
  {
    result = MEMORY[0x249544F34](result, 0x1000C8077774924);
    *a1 = 0;
  }
  a1[1] = 0;
  a1[2] = 0;
  return result;
}

void Darts::Details::AutoPool<Darts::Details::DawgUnit>::resize(uint64_t *a1, unint64_t a2)
{
  unint64_t v4;

  v4 = a1[1];
  if (v4 > a2)
  {
    a1[1] = a2;
    v4 = a2;
  }
  if (a1[2] < a2)
  {
    Darts::Details::AutoPool<Darts::Details::DawgUnit>::resize_buf(a1, a2);
    v4 = a1[1];
  }
  if (a2 > v4)
  {
    bzero((void *)(*a1 + 4 * v4), 4 * (a2 - v4));
    a1[1] = a2;
  }
}

uint64_t Darts::Details::AutoPool<Darts::Details::DawgUnit>::resize_buf(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t i;

  if (a2 >= 2 * a1[2])
  {
    v4 = a2;
  }
  else
  {
    v3 = 1;
    do
    {
      v4 = v3;
      v3 *= 2;
    }
    while (v4 < a2);
  }
  v5 = operator new[]();
  result = *a1;
  v7 = a1[1];
  if (v7)
  {
    for (i = 0; i != v7; ++i)
      *(_DWORD *)(v5 + 4 * i) = *(_DWORD *)(result + 4 * i);
    *a1 = v5;
    a1[2] = v4;
LABEL_11:
    JUMPOUT(0x249544F34);
  }
  *a1 = v5;
  a1[2] = v4;
  if (result)
    goto LABEL_11;
  return result;
}

uint64_t *Darts::Details::AutoPool<Darts::Details::DawgNode>::~AutoPool(uint64_t *a1)
{
  Darts::Details::AutoPool<Darts::Details::DawgNode>::clear(a1);
  if (*a1)
  {
    MEMORY[0x249544F34](*a1, 0x1000C8077774924);
    *a1 = 0;
  }
  return a1;
}

uint64_t Darts::Details::AutoPool<Darts::Details::DawgNode>::clear(uint64_t *a1)
{
  uint64_t result;

  Darts::Details::AutoPool<Darts::Details::DawgNode>::resize(a1, 0);
  result = *a1;
  if (*a1)
  {
    result = MEMORY[0x249544F34](result, 0x1000C8077774924);
    *a1 = 0;
  }
  a1[1] = 0;
  a1[2] = 0;
  return result;
}

uint64_t *Darts::Details::AutoPool<Darts::Details::DawgNode>::resize(uint64_t *result, unint64_t a2)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;

  v3 = result;
  v4 = result[1];
  if (v4 > a2)
  {
    result[1] = a2;
    v4 = a2;
  }
  if (result[2] < a2)
  {
    result = (uint64_t *)Darts::Details::AutoPool<Darts::Details::DawgNode>::resize_buf(result, a2);
    v4 = v3[1];
  }
  for (; v4 < a2; v4 = v3[1])
  {
    v3[1] = v4 + 1;
    v5 = *v3 + 12 * v4;
    *(_DWORD *)(v5 + 7) = 0;
    *(_QWORD *)v5 = 0;
  }
  return result;
}

uint64_t Darts::Details::AutoPool<Darts::Details::DawgNode>::resize_buf(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a2 >= 2 * a1[2])
  {
    v4 = a2;
  }
  else
  {
    v3 = 1;
    do
    {
      v4 = v3;
      v3 *= 2;
    }
    while (v4 < a2);
  }
  v5 = operator new[]();
  result = *a1;
  v7 = a1[1];
  if (v7)
  {
    v8 = 0;
    do
    {
      v9 = v5 + v8;
      v10 = *(_QWORD *)(result + v8);
      *(_DWORD *)(v9 + 8) = *(_DWORD *)(result + v8 + 8);
      *(_QWORD *)v9 = v10;
      v8 += 12;
      --v7;
    }
    while (v7);
    *a1 = v5;
    a1[2] = v4;
LABEL_11:
    JUMPOUT(0x249544F34);
  }
  *a1 = v5;
  a1[2] = v4;
  if (result)
    goto LABEL_11;
  return result;
}

uint64_t *Darts::Details::DawgBuilder::init(Darts::Details::DawgBuilder *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v6;
  int v7;

  v7 = 0;
  Darts::Details::AutoPool<unsigned int>::resize((uint64_t *)this + 15, 0x400uLL, &v7);
  v2 = *((_QWORD *)this + 22);
  if (v2)
  {
    v3 = *(_QWORD *)this + 12 * *(unsigned int *)(*((_QWORD *)this + 21) + 4 * v2 - 4);
    *(_DWORD *)(v3 + 7) = 0;
    *(_QWORD *)v3 = 0;
    --*((_QWORD *)this + 22);
  }
  else
  {
    Darts::Details::AutoPool<Darts::Details::DawgNode>::append((uint64_t *)this);
  }
  Darts::Details::BitVector::append((uint64_t *)this + 9);
  Darts::Details::AutoPool<Darts::Details::DawgUnit>::append((uint64_t *)this + 3);
  v4 = *((_QWORD *)this + 7);
  if (v4 == *((_QWORD *)this + 8))
  {
    Darts::Details::AutoPool<unsigned char>::resize_buf((uint64_t *)this + 6, v4 + 1);
    v4 = *((_QWORD *)this + 7);
  }
  *((_QWORD *)this + 7) = v4 + 1;
  *((_QWORD *)this + 24) = 1;
  *(_BYTE *)(*(_QWORD *)this + 8) = -1;
  v6 = 0;
  return Darts::Details::AutoPool<unsigned int>::append((uint64_t *)this + 18, &v6);
}

_QWORD *Darts::Details::DawgBuilder::insert(_QWORD *this, const char *a2, unint64_t a3, int a4)
{
  int v5;
  _QWORD *v7;
  unint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  char v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  int v20;
  unsigned int v21;
  _QWORD *exception;
  const char *v23;
  int v24;
  unsigned int v25;

  if (a4 < 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    v23 = "/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/darts_clone/darts.h:1106: exception: failed to"
          " insert key: negative value";
    goto LABEL_27;
  }
  if (!a3)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    v23 = "/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/darts_clone/darts.h:1108: exception: failed to"
          " insert key: zero-length key";
LABEL_27:
    *exception = &off_2516E35A8;
    exception[1] = v23;
  }
  v5 = a4;
  v7 = this;
  v8 = 0;
  v9 = 0;
  v10 = *this;
  while (1)
  {
    v11 = *(_DWORD *)(v10 + 12 * v9);
    if (!v11)
      goto LABEL_12;
    v12 = a2[v8];
    if (v8 < a3 && !a2[v8])
    {
      exception = __cxa_allocate_exception(0x10uLL);
      v23 = "/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/darts_clone/darts.h:1122: exception: failed "
            "to insert key: invalid null character";
      goto LABEL_27;
    }
    v13 = *(unsigned __int8 *)(v10 + 12 * v11 + 8);
    if (v12 < v13)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      v23 = "/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/darts_clone/darts.h:1127: exception: failed "
            "to insert key: wrong key order";
      goto LABEL_27;
    }
    if (v12 > v13)
      break;
    ++v8;
    v9 = *(_DWORD *)(v10 + 12 * v9);
    if (v8 > a3)
      return this;
  }
  *(_BYTE *)(v10 + 12 * v11 + 10) = 1;
  this = (_QWORD *)Darts::Details::DawgBuilder::flush((uint64_t)this, v11);
LABEL_12:
  if (v8 <= a3)
  {
    v24 = v5;
    do
    {
      if (v8 >= a3)
        v14 = 0;
      else
        v14 = a2[v8];
      v25 = 0;
      v15 = v7[22];
      if (v15)
      {
        v16 = *(_DWORD *)(v7[21] + 4 * v15 - 4);
        v17 = *v7 + 12 * v16;
        *(_DWORD *)(v17 + 7) = 0;
        *(_QWORD *)v17 = 0;
        --v7[22];
      }
      else
      {
        v16 = *((_DWORD *)v7 + 2);
        Darts::Details::AutoPool<Darts::Details::DawgNode>::append(v7);
      }
      v25 = v16;
      v18 = *v7;
      v19 = (int *)(*v7 + 12 * v9);
      v20 = *v19;
      if (!*v19)
        *(_BYTE *)(v18 + 12 * v16 + 9) = 1;
      *(_DWORD *)(v18 + 12 * v16 + 4) = v20;
      v21 = v25;
      *(_BYTE *)(v18 + 12 * v25 + 8) = v14;
      *v19 = v21;
      this = Darts::Details::AutoPool<unsigned int>::append(v7 + 18, &v25);
      v9 = v25;
      ++v8;
    }
    while (v8 <= a3);
    v5 = v24;
  }
  *(_DWORD *)(*v7 + 12 * v9) = v5;
  return this;
}

uint64_t *Darts::Details::AutoPool<unsigned int>::resize(uint64_t *result, unint64_t a2, _DWORD *a3)
{
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;

  v5 = result;
  v6 = result[1];
  if (v6 > a2)
  {
    result[1] = a2;
    v6 = a2;
  }
  if (result[2] < a2)
  {
    result = (uint64_t *)Darts::Details::AutoPool<unsigned int>::resize_buf(result, a2);
    v6 = v5[1];
  }
  if (v6 < a2)
  {
    v7 = *v5;
    do
      *(_DWORD *)(v7 + 4 * v6++) = *a3;
    while (a2 != v6);
    v5[1] = a2;
  }
  return result;
}

uint64_t *Darts::Details::AutoPool<Darts::Details::DawgNode>::append(uint64_t *result)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = result;
  v2 = result[1];
  if (v2 == result[2])
  {
    result = (uint64_t *)Darts::Details::AutoPool<Darts::Details::DawgNode>::resize_buf(result, v2 + 1);
    v2 = v1[1];
  }
  v1[1] = v2 + 1;
  v3 = *v1 + 12 * v2;
  *(_DWORD *)(v3 + 7) = 0;
  *(_QWORD *)v3 = 0;
  return result;
}

uint64_t *Darts::Details::BitVector::append(uint64_t *this)
{
  uint64_t *v1;
  uint64_t v2;
  int v3;

  v1 = this;
  v2 = this[5];
  if ((v2 & 0x1F) == 0)
  {
    v3 = 0;
    this = Darts::Details::AutoPool<unsigned int>::append(this, &v3);
    v2 = v1[5];
  }
  v1[5] = v2 + 1;
  return this;
}

uint64_t *Darts::Details::AutoPool<Darts::Details::DawgUnit>::append(uint64_t *result)
{
  uint64_t *v1;
  uint64_t v2;

  v1 = result;
  v2 = result[1];
  if (v2 == result[2])
  {
    result = (uint64_t *)Darts::Details::AutoPool<Darts::Details::DawgUnit>::resize_buf(result, v2 + 1);
    v2 = v1[1];
  }
  v1[1] = v2 + 1;
  *(_DWORD *)(*v1 + 4 * v2) = 0;
  return result;
}

uint64_t *Darts::Details::AutoPool<unsigned int>::append(uint64_t *result, _DWORD *a2)
{
  uint64_t *v3;
  uint64_t v4;

  v3 = result;
  v4 = result[1];
  if (v4 == result[2])
  {
    result = (uint64_t *)Darts::Details::AutoPool<unsigned int>::resize_buf(result, v4 + 1);
    v4 = v3[1];
  }
  v3[1] = v4 + 1;
  *(_DWORD *)(*v3 + 4 * v4) = *a2;
  return result;
}

uint64_t Darts::Details::DawgBuilder::flush(uint64_t this, int a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t i;
  unsigned int v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  BOOL v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  int *v30;
  int v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t *v35;
  unsigned int v37;
  int v38;
  unsigned int v39;

  v2 = this;
  v3 = *(_QWORD *)(this + 152) - 1;
  v4 = *(_DWORD *)(*(_QWORD *)(this + 144) + 4 * v3);
  if (v4 != a2)
  {
    v35 = (uint64_t *)(this + 120);
    v5 = (_QWORD *)(this + 24);
    v6 = (_QWORD *)(this + 72);
    while (1)
    {
      *(_QWORD *)(v2 + 152) = v3;
      v7 = *(_QWORD *)(v2 + 128);
      if (*(_QWORD *)(v2 + 192) >= v7 - (v7 >> 2))
      {
        v8 = 2 * v7;
        Darts::Details::AutoPool<unsigned int>::clear(v35);
        v38 = 0;
        Darts::Details::AutoPool<unsigned int>::resize(v35, v8, &v38);
        v9 = *(_QWORD *)(v2 + 32);
        if (v9 >= 2)
        {
          v10 = *(_QWORD *)(v2 + 48);
          for (i = 1; i != v9; ++i)
          {
            if (!*(_BYTE *)(v10 + i) || (*(_DWORD *)(*v5 + 4 * i) & 2) != 0)
            {
              v12 = 0;
              if ((_DWORD)i)
              {
                v13 = i;
                do
                {
                  v14 = *(_DWORD *)(*v5 + 4 * v13);
                  v15 = (v14 ^ ~(*(unsigned __int8 *)(v10 + v13) << 24)) + (v14 << 15);
                  v16 = 2057 * ((5 * (v15 ^ (v15 >> 12))) ^ ((5 * (v15 ^ (v15 >> 12))) >> 4));
                  v12 ^= HIWORD(v16) ^ v16;
                  v17 = __CFADD__(v13++, 1);
                }
                while (!v17 && (v14 & 1) != 0);
              }
              v18 = *(_QWORD *)(v2 + 120);
              do
              {
                v19 = (unint64_t)v12 % *(_QWORD *)(v2 + 128);
                v12 = v19 + 1;
              }
              while (*(_DWORD *)(v18 + 4 * v19));
              *(_DWORD *)(v18 + 4 * v19) = i;
            }
          }
        }
      }
      v20 = 0;
      if (v4)
      {
        v21 = v4;
        do
        {
          ++v20;
          v21 = *(_DWORD *)(*(_QWORD *)v2 + 12 * v21 + 4);
        }
        while (v21);
      }
      v37 = 0;
      this = Darts::Details::DawgBuilder::find_node((Darts::Details::DawgBuilder *)v2, v4, &v37);
      if ((_DWORD)this)
      {
        v22 = this;
        *(_DWORD *)(*v6 + 4 * (this >> 5)) |= 1 << this;
        if (v4)
          goto LABEL_22;
        goto LABEL_23;
      }
      if (!v20)
        break;
      do
      {
        Darts::Details::BitVector::append((uint64_t *)(v2 + 72));
        this = (uint64_t)Darts::Details::AutoPool<Darts::Details::DawgUnit>::append((uint64_t *)(v2 + 24));
        v25 = *(_QWORD *)(v2 + 56);
        if (v25 == *(_QWORD *)(v2 + 64))
        {
          this = Darts::Details::AutoPool<unsigned char>::resize_buf((uint64_t *)(v2 + 48), v25 + 1);
          v25 = *(_QWORD *)(v2 + 56);
        }
        *(_QWORD *)(v2 + 56) = v25 + 1;
        --v20;
      }
      while (v20);
      v26 = *(_DWORD *)(v2 + 112) - 1;
      if (v4)
        goto LABEL_32;
LABEL_37:
      v22 = v26 + 1;
      *(_DWORD *)(*(_QWORD *)(v2 + 120) + 4 * v37) = v26 + 1;
      ++*(_QWORD *)(v2 + 192);
      if (v4)
      {
        do
        {
LABEL_22:
          v23 = *(_DWORD *)(*(_QWORD *)v2 + 12 * v4 + 4);
          v39 = v4;
          this = (uint64_t)Darts::Details::AutoPool<unsigned int>::append((uint64_t *)(v2 + 168), &v39);
          v4 = v23;
        }
        while (v23);
      }
LABEL_23:
      v24 = *(_QWORD *)(v2 + 144);
      v3 = *(_QWORD *)(v2 + 152) - 1;
      *(_DWORD *)(*(_QWORD *)v2 + 12 * *(unsigned int *)(v24 + 4 * v3)) = v22;
      v4 = *(_DWORD *)(v24 + 4 * v3);
      if (v4 == a2)
        goto LABEL_2;
    }
    v26 = 0;
    if (!v4)
      goto LABEL_37;
LABEL_32:
    v27 = *(_QWORD *)v2;
    v28 = v4;
    do
    {
      v29 = v28;
      v30 = (int *)(v27 + 12 * v28);
      v31 = *((unsigned __int8 *)v30 + 8);
      v32 = *v30;
      if (v31)
        v33 = (2 * *(unsigned __int8 *)(v27 + 12 * v29 + 9)) | (4 * v32);
      else
        v33 = 2 * v32;
      v34 = 3 * v29;
      *(_DWORD *)(*(_QWORD *)(v2 + 24) + 4 * v26) = v33 | *(unsigned __int8 *)(v27 + 4 * v34 + 10);
      *(_BYTE *)(*(_QWORD *)(v2 + 48) + v26--) = v31;
      v27 = *(_QWORD *)v2;
      v28 = *(_DWORD *)(*(_QWORD *)v2 + 4 * v34 + 4);
    }
    while (v28);
    goto LABEL_37;
  }
LABEL_2:
  *(_QWORD *)(v2 + 152) = v3;
  return this;
}

uint64_t Darts::Details::DawgBuilder::find_node(Darts::Details::DawgBuilder *this, unsigned int a2, unsigned int *a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  int *v24;
  int v25;
  int v26;
  int v27;

  v3 = a2;
  if (a2)
  {
    LODWORD(v4) = 0;
    v5 = *(_QWORD *)this;
    v6 = a2;
    do
    {
      v7 = (int *)(v5 + 12 * v6);
      v8 = *((unsigned __int8 *)v7 + 8);
      v9 = *v7;
      if (v8)
        v10 = (2 * *(unsigned __int8 *)(v5 + 12 * v6 + 9)) | (4 * v9);
      else
        v10 = 2 * v9;
      v11 = v5 + 12 * v6;
      v12 = ((v10 | *(unsigned __int8 *)(v11 + 10)) ^ ~(v8 << 24)) + ((v10 | *(unsigned __int8 *)(v11 + 10)) << 15);
      v13 = 2057 * ((5 * (v12 ^ (v12 >> 12))) ^ ((5 * (v12 ^ (v12 >> 12))) >> 4));
      v4 = v4 ^ HIWORD(v13) ^ v13;
      v6 = *(unsigned int *)(v11 + 4);
    }
    while ((_DWORD)v6);
  }
  else
  {
    v4 = 0;
  }
  v15 = *((_QWORD *)this + 15);
  v14 = *((_QWORD *)this + 16);
  v16 = v4 % v14;
  *a3 = v4 % v14;
  v17 = *(unsigned int *)(v15 + 4 * (v4 % v14));
  if ((_DWORD)v17)
  {
    v18 = *(_QWORD *)this;
    v19 = (unsigned int *)(*(_QWORD *)this + 12 * a2 + 4);
    v20 = *((_QWORD *)this + 3);
    do
    {
      v21 = *v19;
      v22 = v17;
      if ((_DWORD)v21)
      {
        v22 = v17;
        while ((*(_DWORD *)(v20 + 4 * v22) & 1) != 0)
        {
          ++v22;
          LODWORD(v21) = *(_DWORD *)(v18 + 12 * v21 + 4);
          if (!(_DWORD)v21)
            goto LABEL_15;
        }
      }
      else
      {
LABEL_15:
        if ((*(_DWORD *)(v20 + 4 * v22) & 1) == 0)
        {
          if (!v3)
            return v17;
          v23 = v3;
          while (1)
          {
            v24 = (int *)(v18 + 12 * v23);
            v25 = *((unsigned __int8 *)v24 + 8);
            v26 = *v24;
            v27 = v25 ? (2 * *(unsigned __int8 *)(v18 + 12 * v23 + 9)) | (4 * v26) : 2 * v26;
            if ((v27 | *(unsigned __int8 *)(v18 + 12 * v23 + 10)) != *(_DWORD *)(v20 + 4 * v22)
              || v25 != *(unsigned __int8 *)(*((_QWORD *)this + 6) + v22))
            {
              break;
            }
            v23 = *(unsigned int *)(v18 + 12 * v23 + 4);
            --v22;
            if (!(_DWORD)v23)
              return v17;
          }
        }
      }
      v16 = (v16 + 1) % v14;
      *a3 = v16;
      v17 = *(unsigned int *)(v15 + 4 * v16);
    }
    while ((_DWORD)v17);
  }
  return v17;
}

uint64_t Darts::Details::BitVector::build(Darts::Details::BitVector *this)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = operator new[]();
  result = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = v2;
  if (result)
    result = MEMORY[0x249544F34](result, 0x1000C8052888210);
  *((_QWORD *)this + 4) = 0;
  v4 = *((_QWORD *)this + 1);
  if (v4)
  {
    v5 = 0;
    v6 = (_DWORD *)*((_QWORD *)this + 3);
    v7 = *(unsigned int **)this;
    do
    {
      *v6++ = v5;
      v8 = *v7++;
      v9 = ((((((v8 >> 1) & 0x55555555) + (v8 & 0x55555555)) >> 2) & 0x33333333)
          + ((((v8 >> 1) & 0x55555555) + (v8 & 0x55555555)) & 0x33333333)
          + (((((((v8 >> 1) & 0x55555555) + (v8 & 0x55555555)) >> 2) & 0x33333333)
            + ((((v8 >> 1) & 0x55555555) + (v8 & 0x55555555)) & 0x33333333)) >> 4)) & 0xF0F0F0F;
      v5 += ((_BYTE)v9 + BYTE1(v9) + ((v9 + (v9 >> 8)) >> 16)) & 0x3F;
      --v4;
    }
    while (v4);
    *((_QWORD *)this + 4) = v5;
  }
  return result;
}

unsigned int *Darts::Details::DoubleArrayBuilderUnit::set_offset(unsigned int *this, unsigned int a2)
{
  int v2;
  _QWORD *exception;

  if (a2 >> 29)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *exception = &off_2516E35A8;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/darts_clone/darts.h:1339: exception: "
                   "failed to modify unit: too large offset";
  }
  v2 = (4 * a2) | 0x200;
  if (a2 < 0x200000)
    v2 = a2 << 10;
  *this = *this & 0x800001FF | v2;
  return this;
}

unsigned int *Darts::Details::DoubleArrayBuilder::build_from_dawg(Darts::Details::DoubleArrayBuilder *this, const Darts::Details::DawgBuilder *a2, unsigned int a3, unsigned int a4)
{
  Darts::Details::BitVector *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  int v13;
  unsigned int v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *result;
  int v19;
  int v20;

  v8 = (const Darts::Details::DawgBuilder *)((char *)a2 + 72);
  v9 = *(unsigned int *)(*((_QWORD *)a2 + 3) + 4 * a3);
  v10 = v9 >> 2;
  v11 = v9 >> 7;
  v12 = 1 << (v9 >> 2);
  if ((v12 & *(_DWORD *)(*((_QWORD *)a2 + 9) + 4 * (v9 >> 7))) != 0
    && (v13 = *(_DWORD *)(*((_QWORD *)this + 8)
                        + 4
                        * (Darts::Details::BitVector::rank((const Darts::Details::DawgBuilder *)((char *)a2 + 72), v10)- 1))) != 0&& ((v14 = v13 ^ a4, ((v13 ^ a4) & 0x1FE00000) != 0) ? (v15 = (v13 ^ a4) == 0) : (v15 = 1), v15))
  {
    if (*(_BYTE *)(*((_QWORD *)a2 + 6) + v10))
    {
      v16 = *((_QWORD *)this + 1);
      v17 = a4;
    }
    else
    {
      v17 = a4;
      v16 = *((_QWORD *)this + 1);
      *(_DWORD *)(v16 + 4 * a4) |= 0x100u;
    }
    return Darts::Details::DoubleArrayBuilderUnit::set_offset((unsigned int *)(v16 + 4 * v17), v14);
  }
  else
  {
    result = (unsigned int *)Darts::Details::DoubleArrayBuilder::arrange_from_dawg(this, a2, a3, a4);
    v19 = (int)result;
    if ((*(_DWORD *)(*((_QWORD *)a2 + 9) + 4 * v11) & v12) != 0)
    {
      result = (unsigned int *)Darts::Details::BitVector::rank(v8, v10);
      *(_DWORD *)(*((_QWORD *)this + 8) + 4 * ((_DWORD)result - 1)) = v19;
    }
    do
    {
      if (*(_BYTE *)(*((_QWORD *)a2 + 6) + v10))
        result = (unsigned int *)Darts::Details::DoubleArrayBuilder::build_from_dawg(this, a2, v10, v19 ^ *(unsigned __int8 *)(*((_QWORD *)a2 + 6) + v10));
      if ((_DWORD)v10 == -1)
        break;
      v20 = *(_DWORD *)(*((_QWORD *)a2 + 3) + 4 * v10);
      LODWORD(v10) = v10 + 1;
    }
    while ((v20 & 1) != 0);
  }
  return result;
}

void Darts::Details::DoubleArrayBuilder::expand_units(Darts::Details::DoubleArrayBuilder *this)
{
  uint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  unsigned int v5;
  int v6;
  unint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int i;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;

  v2 = (uint64_t *)((char *)this + 8);
  v3 = *((_QWORD *)this + 2);
  v4 = (v3 + 256);
  v5 = (v3 >> 8) - 16;
  if (v5 >= 0xFFFFFFEF)
  {
    Darts::Details::AutoPool<Darts::Details::DoubleArrayBuilderUnit>::resize((uint64_t *)this + 1, (v3 + 256));
  }
  else
  {
    v6 = 0;
    v7 = v5 << 8;
    v8 = *((_QWORD *)this + 4);
    while (1)
    {
      v9 = v7 + v6;
      if (!*(_BYTE *)(v8 + 12 * (((_DWORD)v7 + v6) & 0xFFF) + 9))
        break;
      if (++v6 == 256)
      {
        v9 = 0;
        break;
      }
    }
    v10 = 0;
    v11 = 3072 * ((v3 >> 8) & 0xF);
    do
    {
      if (!*(_BYTE *)(v8 + v11 + v10 + 8))
      {
        if (*((_QWORD *)this + 2) <= v7)
        {
          Darts::Details::DoubleArrayBuilder::expand_units(this);
          v8 = *((_QWORD *)this + 4);
        }
        v12 = (int *)(v8 + v11 + v10);
        v13 = v12[1];
        if (v7 == *((_DWORD *)this + 18))
        {
          *((_DWORD *)this + 18) = v13;
          if (v7 == v13)
            *((_DWORD *)this + 18) = *((_QWORD *)this + 2);
        }
        v14 = *v12;
        *(_DWORD *)(v8 + 12 * (*v12 & 0xFFF) + 4) = v13;
        *(_DWORD *)(v8 + 12 * (v12[1] & 0xFFF)) = v14;
        *((_BYTE *)v12 + 8) = 1;
        *(_BYTE *)(*v2 + 4 * v7) = v9 ^ v7;
      }
      ++v7;
      v10 += 12;
    }
    while ((_DWORD)v10 != 3072);
    Darts::Details::AutoPool<Darts::Details::DoubleArrayBuilderUnit>::resize(v2, (v3 + 256));
    v15 = v3;
    if (v3 < (unint64_t)v4)
    {
      v16 = *((_QWORD *)this + 4);
      do
        *(_WORD *)(v16 + 12 * (v15++ & 0xFFF) + 8) = 0;
      while (v4 != v15);
    }
  }
  v17 = *((_QWORD *)this + 4);
  if ((int)v3 + 1 < v4)
  {
    for (i = 0; i != 255; ++i)
    {
      v19 = v3 + i;
      *(_DWORD *)(v17 + 12 * (v19 & 0xFFF) + 4) = v19 + 1;
      *(_DWORD *)(v17 + 12 * ((v19 + 1) & 0xFFF)) = v19;
    }
  }
  v20 = 12 * (v3 & 0xFFF);
  *(_DWORD *)(v17 + v20) = v3 + 255;
  v21 = *((_DWORD *)this + 18);
  v22 = 12 * (v21 & 0xFFF);
  *(_DWORD *)(v17 + v20) = *(_DWORD *)(v17 + v22);
  LOWORD(v20) = *(_DWORD *)(v17 + v22);
  *(_DWORD *)(v17 + 12 * (((_DWORD)v3 + 255) & 0xFFF) + 4) = v21;
  *(_DWORD *)(v17 + 12 * (v20 & 0xFFF) + 4) = v3;
  *(_DWORD *)(v17 + v22) = v3 + 255;
}

uint64_t Darts::Details::DoubleArrayBuilder::arrange_from_dawg(Darts::Details::DoubleArrayBuilder *this, const Darts::Details::DawgBuilder *a2, unsigned int a3, unsigned int a4)
{
  uint64_t *v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  _BOOL4 v13;
  unint64_t v14;
  unint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v24;
  unsigned int v25;
  unint64_t v26;
  unsigned int v27;
  uint64_t v28;
  int v29;
  int *v30;
  int v31;
  uint64_t v32;
  unsigned int v33;
  char v35;

  v8 = (uint64_t *)((char *)this + 40);
  Darts::Details::AutoPool<unsigned char>::resize((uint64_t *)this + 5, 0);
  v9 = *(_DWORD *)(*((_QWORD *)a2 + 3) + 4 * a3);
  if (v9 >= 4)
  {
    v10 = v9 >> 2;
    do
    {
      v35 = *(_BYTE *)(*((_QWORD *)a2 + 6) + v10);
      Darts::Details::AutoPool<unsigned char>::append(v8, &v35);
      v11 = *(_DWORD *)(*((_QWORD *)a2 + 3) + 4 * v10);
      v13 = __CFADD__(v10++, 1);
    }
    while ((v11 & 1) != 0 && !v13);
  }
  v14 = *((unsigned int *)this + 18);
  v15 = *((_QWORD *)this + 2);
  if (v15 <= v14)
  {
LABEL_20:
    v19 = a4 | v15;
  }
  else
  {
    v17 = *((_QWORD *)this + 4);
    v16 = (unsigned __int8 *)*((_QWORD *)this + 5);
    v18 = *((_DWORD *)this + 18);
    while (1)
    {
      v19 = v18 ^ *v16;
      v20 = ((unsigned __int16)v18 ^ *v16) & 0xFFF;
      if (!*(_BYTE *)(v17 + 12 * (((unsigned __int16)v18 ^ *v16) & 0xFFF) + 9)
        && (!((v18 ^ *v16) ^ a4) || ((v19 ^ a4) & 0x1FE00000) == 0))
      {
        v21 = *((_QWORD *)this + 6);
        if (v21 < 2)
          goto LABEL_21;
        if (!*(_BYTE *)(v17 + 12 * (v20 ^ v16[1]) + 8))
          break;
      }
LABEL_19:
      v18 = *(_DWORD *)(v17 + 12 * (v18 & 0xFFF) + 4);
      if (v18 == (_DWORD)v14)
        goto LABEL_20;
    }
    v22 = 2;
    while (v21 != v22)
    {
      if (*(unsigned __int8 *)(v17 + 12 * (v20 ^ v16[v22++]) + 8))
      {
        if (v22 - 1 >= v21)
          break;
        goto LABEL_19;
      }
    }
  }
LABEL_21:
  Darts::Details::DoubleArrayBuilderUnit::set_offset((unsigned int *)(*((_QWORD *)this + 1) + 4 * a4), v19 ^ a4);
  if (*((_QWORD *)this + 6))
  {
    v24 = 0;
    v25 = *(_DWORD *)(*((_QWORD *)a2 + 3) + 4 * a3) >> 2;
    do
    {
      v26 = v19 ^ *(unsigned __int8 *)(*((_QWORD *)this + 5) + v24);
      if (*((_QWORD *)this + 2) <= v26)
        Darts::Details::DoubleArrayBuilder::expand_units(this);
      if (*((_DWORD *)this + 18) == (_DWORD)v26)
      {
        v27 = v26 & 0xFFF;
        v28 = *((_QWORD *)this + 4);
        v29 = *(_DWORD *)(v28 + 12 * (v26 & 0xFFF) + 4);
        *((_DWORD *)this + 18) = v29;
        if (v29 == (_DWORD)v26)
        {
          *((_DWORD *)this + 18) = *((_QWORD *)this + 2);
          v29 = v26;
        }
      }
      else
      {
        v28 = *((_QWORD *)this + 4);
        v27 = v26 & 0xFFF;
        v29 = *(_DWORD *)(v28 + 12 * (v26 & 0xFFF) + 4);
      }
      v30 = (int *)(v28 + 12 * v27);
      v31 = *v30;
      *(_DWORD *)(v28 + 12 * (*v30 & 0xFFF) + 4) = v29;
      *(_DWORD *)(v28 + 12 * (v30[1] & 0xFFF)) = v31;
      *((_BYTE *)v30 + 8) = 1;
      v32 = *((_QWORD *)this + 1);
      if (*(_BYTE *)(*((_QWORD *)a2 + 6) + v25))
      {
        *(_BYTE *)(v32 + 4 * v26) = *(_BYTE *)(*v8 + v24);
        v33 = *(_DWORD *)(*((_QWORD *)a2 + 3) + 4 * v25);
      }
      else
      {
        *(_DWORD *)(v32 + 4 * a4) |= 0x100u;
        v33 = *(_DWORD *)(*((_QWORD *)a2 + 3) + 4 * v25);
        *(_DWORD *)(v32 + 4 * v26) = (v33 >> 1) | 0x80000000;
      }
      v25 = ((int)(v33 << 31) >> 31) & (v25 + 1);
      ++v24;
    }
    while (v24 < *((_QWORD *)this + 6));
  }
  else
  {
    v28 = *((_QWORD *)this + 4);
  }
  *(_BYTE *)(v28 + 12 * (v19 & 0xFFF) + 9) = 1;
  return v19;
}

uint64_t Darts::Details::BitVector::rank(Darts::Details::BitVector *this, unint64_t a2)
{
  uint64_t v2;
  int v3;

  v2 = (a2 >> 3) & 0x1FFFFFFFFFFFFFFCLL;
  v3 = *(_DWORD *)(*((_QWORD *)this + 3) + v2);
  LODWORD(v2) = *(_DWORD *)(*(_QWORD *)this + v2) & (0xFFFFFFFF >> ~(_BYTE)a2);
  LODWORD(v2) = ((((unint64_t)(((v2 >> 1) & 0x55555555) + (v2 & 0x55555555)) >> 2) & 0x33333333)
               + ((((v2 >> 1) & 0x55555555) + (v2 & 0x55555555)) & 0x33333333)
               + (((((unint64_t)(((v2 >> 1) & 0x55555555) + (v2 & 0x55555555)) >> 2) & 0x33333333)
                 + ((((v2 >> 1) & 0x55555555) + (v2 & 0x55555555)) & 0x33333333)) >> 4)) & 0xF0F0F0F;
  return (((_BYTE)v2 + BYTE1(v2) + ((v2 + (v2 >> 8)) >> 16)) & 0x3Fu) + v3;
}

uint64_t *Darts::Details::AutoPool<unsigned char>::append(uint64_t *result, _BYTE *a2)
{
  uint64_t *v3;
  uint64_t v4;

  v3 = result;
  v4 = result[1];
  if (v4 == result[2])
  {
    result = (uint64_t *)Darts::Details::AutoPool<unsigned char>::resize_buf(result, v4 + 1);
    v4 = v3[1];
  }
  v3[1] = v4 + 1;
  *(_BYTE *)(*v3 + v4) = *a2;
  return result;
}

void Darts::Details::DawgBuilder::~DawgBuilder(Darts::Details::DawgBuilder *this)
{
  Darts::Details::AutoPool<Darts::Details::DawgNode>::clear((uint64_t *)this);
  Darts::Details::AutoPool<Darts::Details::DawgUnit>::clear((uint64_t *)this + 3);
  Darts::Details::AutoPool<unsigned char>::clear((uint64_t *)this + 6);
  Darts::Details::BitVector::clear((Darts::Details::DawgBuilder *)((char *)this + 72));
  Darts::Details::AutoPool<unsigned int>::clear((uint64_t *)this + 15);
  Darts::Details::AutoPool<unsigned int>::clear((uint64_t *)this + 18);
  Darts::Details::AutoPool<unsigned int>::clear((uint64_t *)this + 21);
  *((_QWORD *)this + 24) = 0;
  Darts::Details::AutoStack<unsigned int>::~AutoStack((uint64_t *)this + 21);
  Darts::Details::AutoStack<unsigned int>::~AutoStack((uint64_t *)this + 18);
  Darts::Details::AutoPool<unsigned int>::~AutoPool((uint64_t *)this + 15);
  Darts::Details::BitVector::~BitVector((Darts::Details::DawgBuilder *)((char *)this + 72));
  Darts::Details::AutoPool<unsigned char>::~AutoPool((uint64_t *)this + 6);
  Darts::Details::AutoPool<Darts::Details::DawgUnit>::~AutoPool((uint64_t *)this + 3);
  Darts::Details::AutoPool<Darts::Details::DawgNode>::~AutoPool((uint64_t *)this);
}

uint64_t Darts::Details::DoubleArrayBuilder::build_from_keyset<int>(uint64_t a1, _QWORD *a2, unint64_t a3, unint64_t a4, unint64_t a5, unsigned int a6)
{
  uint64_t result;
  int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unint64_t v16;
  int v17;

  while (1)
  {
    result = Darts::Details::DoubleArrayBuilder::arrange_from_keyset<int>(a1, a2, a3, a4, a5, a6);
    v12 = result;
    if (a3 < a4)
    {
      v13 = a2[2];
      while (v13 && *(_QWORD *)(v13 + 8 * a3) <= a5 || !*(_BYTE *)(*(_QWORD *)(a2[1] + 8 * a3) + a5))
      {
        if (a4 == ++a3)
          return result;
      }
    }
    if (a3 == a4)
      break;
    v14 = a2[2];
    if (v14 && *(_QWORD *)(v14 + 8 * a3) <= a5)
      v15 = 0;
    else
      v15 = *(unsigned __int8 *)(*(_QWORD *)(a2[1] + 8 * a3) + a5);
    v16 = a3 + 1;
    if (a3 + 1 < a4)
    {
      do
      {
        if (v14 && *(_QWORD *)(v14 + 8 * v16) <= a5)
          v17 = 0;
        else
          v17 = *(unsigned __int8 *)(*(_QWORD *)(a2[1] + 8 * v16) + a5);
        if (v17 != v15)
        {
          Darts::Details::DoubleArrayBuilder::build_from_keyset<int>(a1, a2, a3, v16, a5 + 1, v12 ^ v15);
          v14 = a2[2];
          if (v14 && *(_QWORD *)(v14 + 8 * v16) <= a5)
            v15 = 0;
          else
            v15 = *(unsigned __int8 *)(*(_QWORD *)(a2[1] + 8 * v16) + a5);
          a3 = v16;
        }
        ++v16;
      }
      while (a4 != v16);
    }
    a6 = v12 ^ v15;
    ++a5;
  }
  return result;
}

uint64_t Darts::Details::DoubleArrayBuilder::arrange_from_keyset<int>(uint64_t a1, _QWORD *a2, unint64_t a3, unint64_t a4, unint64_t a5, unsigned int a6)
{
  uint64_t *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unsigned __int8 *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v28;
  unsigned int v29;
  uint64_t v30;
  unint64_t v31;
  unsigned int v32;
  uint64_t v33;
  int v34;
  int *v35;
  int v36;
  uint64_t v37;
  _QWORD *exception;
  const char *v40;
  unsigned __int8 v41;

  v12 = (uint64_t *)(a1 + 40);
  Darts::Details::AutoPool<unsigned char>::resize((uint64_t *)(a1 + 40), 0);
  v13 = -1;
  if (a3 < a4)
  {
    do
    {
      v41 = 0;
      v14 = a2[2];
      if (v14)
      {
        if (*(_QWORD *)(v14 + 8 * a3) > a5)
        {
          v41 = *(_BYTE *)(*(_QWORD *)(a2[1] + 8 * a3) + a5);
          if (!v41)
          {
            exception = __cxa_allocate_exception(0x10uLL);
            v40 = "/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/darts_clone/darts.h:1675: exception: f"
                  "ailed to build double-array: invalid null character";
            goto LABEL_52;
          }
          goto LABEL_17;
        }
      }
      else
      {
        v41 = *(_BYTE *)(*(_QWORD *)(a2[1] + 8 * a3) + a5);
        if (v41)
          goto LABEL_17;
      }
      v15 = a2[3];
      if (v15)
      {
        if ((*(_DWORD *)(v15 + 4 * a3) & 0x80000000) != 0)
          goto LABEL_51;
      }
      else if ((a3 & 0x80000000) != 0)
      {
LABEL_51:
        exception = __cxa_allocate_exception(0x10uLL);
        v40 = "/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/darts_clone/darts.h:1677: exception: faile"
              "d to build double-array: negative value";
LABEL_52:
        *exception = &off_2516E35A8;
        exception[1] = v40;
      }
      if (v13 == -1)
      {
        if (v15)
          v13 = *(_DWORD *)(v15 + 4 * a3);
        else
          v13 = a3;
      }
      if (*(_QWORD *)a1)
        (*(void (**)(unint64_t, uint64_t))a1)(a3 + 1, *a2 + 1);
LABEL_17:
      v16 = *(_QWORD *)(a1 + 48);
      if (!v16)
        goto LABEL_21;
      v17 = *(unsigned __int8 *)(v16 + *v12 - 1);
      if (v41 != v17)
      {
        if (v41 < v17)
        {
          exception = __cxa_allocate_exception(0x10uLL);
          v40 = "/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/darts_clone/darts.h:1692: exception: fai"
                "led to build double-array: wrong key order";
          goto LABEL_52;
        }
LABEL_21:
        Darts::Details::AutoPool<unsigned char>::append(v12, &v41);
      }
      ++a3;
    }
    while (a4 != a3);
  }
  v18 = *(unsigned int *)(a1 + 72);
  v19 = *(_QWORD *)(a1 + 16);
  if (v19 <= v18)
  {
LABEL_35:
    v23 = a6 | v19;
  }
  else
  {
    v21 = *(_QWORD *)(a1 + 32);
    v20 = *(unsigned __int8 **)(a1 + 40);
    v22 = *(_DWORD *)(a1 + 72);
    while (1)
    {
      v23 = v22 ^ *v20;
      v24 = ((unsigned __int16)v22 ^ *v20) & 0xFFF;
      if (!*(_BYTE *)(v21 + 12 * (((unsigned __int16)v22 ^ *v20) & 0xFFF) + 9)
        && (!((v22 ^ *v20) ^ a6) || ((v23 ^ a6) & 0x1FE00000) == 0))
      {
        v25 = *(_QWORD *)(a1 + 48);
        if (v25 < 2)
          goto LABEL_36;
        if (!*(_BYTE *)(v21 + 12 * (v24 ^ v20[1]) + 8))
          break;
      }
LABEL_34:
      v22 = *(_DWORD *)(v21 + 12 * (v22 & 0xFFF) + 4);
      if (v22 == (_DWORD)v18)
        goto LABEL_35;
    }
    v26 = 2;
    while (v25 != v26)
    {
      if (*(unsigned __int8 *)(v21 + 12 * (v24 ^ v20[v26++]) + 8))
      {
        if (v26 - 1 >= v25)
          break;
        goto LABEL_34;
      }
    }
  }
LABEL_36:
  Darts::Details::DoubleArrayBuilderUnit::set_offset((unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * a6), v23 ^ a6);
  if (*(_QWORD *)(a1 + 48))
  {
    v28 = 0;
    v29 = v13 | 0x80000000;
    v30 = *v12;
    do
    {
      v31 = v23 ^ *(unsigned __int8 *)(v30 + v28);
      if (*(_QWORD *)(a1 + 16) <= v31)
        Darts::Details::DoubleArrayBuilder::expand_units((Darts::Details::DoubleArrayBuilder *)a1);
      if (*(_DWORD *)(a1 + 72) == (_DWORD)v31)
      {
        v32 = v31 & 0xFFF;
        v33 = *(_QWORD *)(a1 + 32);
        v34 = *(_DWORD *)(v33 + 12 * (v31 & 0xFFF) + 4);
        *(_DWORD *)(a1 + 72) = v34;
        if (v34 == (_DWORD)v31)
        {
          *(_DWORD *)(a1 + 72) = *(_QWORD *)(a1 + 16);
          v34 = v31;
        }
      }
      else
      {
        v33 = *(_QWORD *)(a1 + 32);
        v32 = v31 & 0xFFF;
        v34 = *(_DWORD *)(v33 + 12 * (v31 & 0xFFF) + 4);
      }
      v35 = (int *)(v33 + 12 * v32);
      v36 = *v35;
      *(_DWORD *)(v33 + 12 * (*v35 & 0xFFF) + 4) = v34;
      *(_DWORD *)(v33 + 12 * (v35[1] & 0xFFF)) = v36;
      *((_BYTE *)v35 + 8) = 1;
      v30 = *(_QWORD *)(a1 + 40);
      v37 = *(_QWORD *)(a1 + 8);
      if (*(_BYTE *)(v30 + v28))
      {
        *(_BYTE *)(v37 + 4 * v31) = *(_BYTE *)(v30 + v28);
      }
      else
      {
        *(_DWORD *)(v37 + 4 * a6) |= 0x100u;
        *(_DWORD *)(v37 + 4 * v31) = v29;
      }
      ++v28;
    }
    while (v28 < *(_QWORD *)(a1 + 48));
  }
  else
  {
    v33 = *(_QWORD *)(a1 + 32);
  }
  *(_BYTE *)(v33 + 12 * (v23 & 0xFFF) + 9) = 1;
  return v23;
}

void Darts::Details::DoubleArrayBuilder::~DoubleArrayBuilder(Darts::Details::DoubleArrayBuilder *this)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (uint64_t *)((char *)this + 8);
  Darts::Details::AutoPool<Darts::Details::DoubleArrayBuilderUnit>::clear((uint64_t *)this + 1);
  v3 = *((_QWORD *)this + 4);
  if (v3)
  {
    MEMORY[0x249544F34](v3, 0x1000C80CBA68D63);
    *((_QWORD *)this + 4) = 0;
  }
  Darts::Details::AutoPool<unsigned char>::clear((uint64_t *)this + 5);
  v4 = *((_QWORD *)this + 8);
  if (v4)
  {
    MEMORY[0x249544F34](v4, 0x1000C8052888210);
    *((_QWORD *)this + 8) = 0;
  }
  *((_DWORD *)this + 18) = 0;
  Darts::Details::AutoPool<unsigned char>::~AutoPool((uint64_t *)this + 5);
  v5 = *((_QWORD *)this + 4);
  if (v5)
  {
    MEMORY[0x249544F34](v5, 0x1000C80CBA68D63);
    *((_QWORD *)this + 4) = 0;
  }
  Darts::Details::AutoPool<Darts::Details::DoubleArrayBuilderUnit>::~AutoPool(v2);
}

_QWORD *std::vector<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type,std::allocator<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type,std::allocator<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 16 * a2);
    a1[1] = &v4[16 * a2];
  }
  return a1;
}

void sub_245C53054(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type,std::allocator<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 60)
    std::vector<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<_NSRange>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

sentencepiece::normalizer::Normalizer *sentencepiece::normalizer::Normalizer::Normalizer(sentencepiece::normalizer::Normalizer *this, const sentencepiece::NormalizerSpec *a2, const sentencepiece::TrainerSpec *a3)
{
  unint64_t v5;
  unint64_t v6;

  *(_QWORD *)this = &off_2516E2600;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = (char *)a2 + 16;
  *((_QWORD *)this + 5) = 0;
  *((_BYTE *)this + 48) = *((_BYTE *)a3 + 245);
  sentencepiece::util::Status::Status((_QWORD *)this + 7);
  v5 = *((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v5 + 23) < 0)
  {
    v5 = *(_QWORD *)v5;
    v6 = *(_QWORD *)((*((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFFFFELL) + 8);
  }
  else
  {
    v6 = *(unsigned __int8 *)(v5 + 23);
  }
  sentencepiece::normalizer::Normalizer::Init((uint64_t)this, (unsigned int *)v5, v6);
  return this;
}

void sub_245C53134(_Unwind_Exception *a1)
{
  sentencepiece::util::Status *v1;
  uint64_t *v2;
  uint64_t v4;

  sentencepiece::util::Status::~Status(v1);
  v4 = *v2;
  *v2 = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  _Unwind_Resume(a1);
}

void sentencepiece::normalizer::Normalizer::Init(uint64_t a1, unsigned int *a2, unint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  unsigned int *v7;
  unint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  __int128 v11;
  unsigned int *v12;
  unint64_t v13;

  if (a3)
  {
    v12 = 0;
    v13 = 0;
    v11 = 0uLL;
    sentencepiece::normalizer::Normalizer::DecodePrecompiledCharsMap(a2, a3, &v12, &v11, &v10);
    sentencepiece::util::Status::operator=((uint64_t *)(a1 + 56), &v10);
    sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v10);
    if (!*(_QWORD *)(a1 + 56))
    {
      v4 = (_QWORD *)operator new();
      *v4 = &off_2516E3588;
      v4[1] = 0;
      v4[2] = 0;
      v4[3] = 0;
      v5 = *(_QWORD *)(a1 + 8);
      *(_QWORD *)(a1 + 8) = v4;
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      if (!v13 || (v13 & 3) != 0)
      {
        sentencepiece::util::Status::Status(&v10, 13, "Trie blob is wrongly formatted.", 31);
        sentencepiece::util::Status::operator=((uint64_t *)(a1 + 56), &v10);
        sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v10);
      }
      else
      {
        v6 = *(_QWORD **)(a1 + 8);
        v7 = v12;
        v8 = v13 >> 2;
        v6[1] = 0;
        v6[2] = 0;
        v9 = v6[3];
        if (v9)
        {
          MEMORY[0x249544F34](v9, 0x1000C8052888210);
          v6[3] = 0;
        }
        v6[1] = v8;
        v6[2] = v7;
        *(_OWORD *)(a1 + 16) = v11;
      }
    }
  }
}

void sub_245C5329C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)va);
  _Unwind_Resume(a1);
}

sentencepiece::normalizer::Normalizer *sentencepiece::normalizer::Normalizer::Normalizer(sentencepiece::normalizer::Normalizer *this, const sentencepiece::NormalizerSpec *a2)
{
  unint64_t v4;
  unint64_t v5;

  *(_QWORD *)this = &off_2516E2600;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = (char *)a2 + 16;
  *((_QWORD *)this + 5) = 0;
  *((_BYTE *)this + 48) = 0;
  sentencepiece::util::Status::Status((_QWORD *)this + 7);
  v4 = *((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v4 + 23) < 0)
  {
    v4 = *(_QWORD *)v4;
    v5 = *(_QWORD *)((*((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFFFFELL) + 8);
  }
  else
  {
    v5 = *(unsigned __int8 *)(v4 + 23);
  }
  sentencepiece::normalizer::Normalizer::Init((uint64_t)this, (unsigned int *)v4, v5);
  return this;
}

void sub_245C53338(_Unwind_Exception *a1)
{
  sentencepiece::util::Status *v1;
  uint64_t *v2;
  uint64_t v4;

  sentencepiece::util::Status::~Status(v1);
  v4 = *v2;
  *v2 = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  _Unwind_Resume(a1);
}

uint64_t sentencepiece::normalizer::Normalizer::Normalizer(uint64_t a1, uint64_t a2, _DWORD *a3, unint64_t a4)
{
  uint64_t *v7;
  _DWORD *v8;
  _DWORD *v10;
  int v11;

  *(_QWORD *)a1 = &off_2516E2600;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = a2;
  *(_QWORD *)(a1 + 40) = 0;
  v7 = (uint64_t *)(a1 + 56);
  *(_BYTE *)(a1 + 48) = 0;
  sentencepiece::util::Status::Status((_QWORD *)(a1 + 56));
  v11 = 0;
  sentencepiece::mmap_util::DecodePrefix<unsigned int>(a3, a4, &v11, &v10);
  sentencepiece::util::Status::operator=(v7, &v10);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v10);
  (*(void (**)(_DWORD **__return_ptr, uint64_t))(*(_QWORD *)a1 + 24))(&v10, a1);
  v8 = v10;
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v10);
  if (!v8)
  {
    *(_BYTE *)(a1 + 48) = v11 != 0;
    sentencepiece::normalizer::Normalizer::Init(a1, a3 + 1, a4 - 4);
  }
  return a1;
}

void sub_245C5344C(_Unwind_Exception *a1)
{
  sentencepiece::util::Status *v1;
  uint64_t *v2;
  uint64_t v4;

  sentencepiece::util::Status::~Status(v1);
  v4 = *v2;
  *v2 = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  _Unwind_Resume(a1);
}

void sentencepiece::normalizer::Normalizer::~Normalizer(sentencepiece::normalizer::Normalizer *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_2516E2600;
  sentencepiece::util::Status::~Status((sentencepiece::normalizer::Normalizer *)((char *)this + 56));
  v2 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_2516E2600;
  sentencepiece::util::Status::~Status((sentencepiece::normalizer::Normalizer *)((char *)this + 56));
  v2 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x249544F58);
}

_QWORD *sentencepiece::normalizer::Normalizer::DecodePrecompiledCharsMap@<X0>(unsigned int *a1@<X0>, unint64_t a2@<X1>, unsigned int **a3@<X2>, _QWORD *a4@<X3>, _QWORD *a5@<X8>)
{
  unsigned int *v7;
  unsigned int *v8;
  const char *v10;
  uint64_t v11;

  if (a2 < 5 || (v7 = (unsigned int *)*a1, a2 <= (unint64_t)v7))
  {
    v10 = "Blob for normalization rule is broken.";
    v11 = 38;
  }
  else
  {
    if ((unint64_t)(v7 + 1) < a2)
    {
      v8 = a1 + 1;
      *a3 = v8;
      a3[1] = v7;
      *a4 = (char *)v7 + (_QWORD)v8;
      a4[1] = a2 - (_QWORD)v7 - 4;
      return sentencepiece::util::Status::Status(a5);
    }
    v10 = "Trie data size exceeds the input blob size.";
    v11 = 43;
  }
  return (_QWORD *)sentencepiece::util::Status::Status(a5, 13, v10, v11);
}

_QWORD *sentencepiece::normalizer::Normalizer::Normalize@<X0>(uint64_t a1@<X0>, sentencepiece::string_util *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, sentencepiece::util::Status *a6@<X8>)
{
  unint64_t v6;
  _QWORD *result;
  unint64_t *v11;
  sentencepiece::util::Status *v12;
  unint64_t *v13;
  int v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  std::string::size_type i;
  void **v21;
  uint64_t v22;
  char *v23;
  char *v24;
  _QWORD *v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  void **v34;
  uint64_t v35;
  char *v36;
  char *v37;
  _QWORD *v38;
  char *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  int v47;
  size_t v48;
  const char *v49;
  std::string *v50;
  std::string::size_type v51;
  std::string *v52;
  std::string::size_type size;
  BOOL v54;
  std::string::size_type v55;
  void **v56;
  uint64_t v57;
  char *v58;
  char *v59;
  _QWORD *v60;
  char *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  char *v66;
  _QWORD *v67;
  char *v68;
  char *v69;
  uint64_t v70;
  std::string::size_type v71;
  _QWORD *v72;
  sentencepiece::util::Status *v73;
  sentencepiece::string_util *v74;
  unint64_t v75;
  _BYTE *v76;
  uint64_t v77;
  uint64_t v78;
  void *__p;
  char v80;
  uint64_t v81;
  _QWORD v82[5];
  const std::string::value_type *v83;
  std::string::size_type v84;
  int v85;
  void **v86;
  std::string *v87;

  v6 = a3;
  v86 = (void **)a5;
  v87 = (std::string *)a4;
  *(_QWORD *)(a5 + 8) = *(_QWORD *)a5;
  if (*(char *)(a4 + 23) < 0)
  {
    **(_BYTE **)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    if (a3)
      goto LABEL_3;
    return sentencepiece::util::Status::Status(a6);
  }
  *(_BYTE *)a4 = 0;
  *(_BYTE *)(a4 + 23) = 0;
  if (!a3)
    return sentencepiece::util::Status::Status(a6);
LABEL_3:
  result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if (*(_QWORD *)a6)
    return result;
  sentencepiece::util::Status::~Status(a6);
  v85 = 0;
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32)))
  {
    do
    {
      sentencepiece::normalizer::Normalizer::NormalizePrefix(a2, a1, v6, v11, (uint64_t)&v76);
      if (v77 != 1 || *v76 != 32)
        goto LABEL_11;
      a2 = (sentencepiece::string_util *)((char *)a2 + (int)v78);
      v85 += v78;
      v6 -= (int)v78;
    }
    while (v6);
    v12 = a6;
    return sentencepiece::util::Status::Status(v12);
  }
LABEL_11:
  v73 = a6;
  std::string::reserve(v87, 3 * v6);
  std::vector<unsigned long>::reserve(v86, 3 * v6);
  v83 = "▁";
  v84 = 3;
  v82[0] = a1;
  v82[1] = &v85;
  v82[2] = &v87;
  v82[3] = &v86;
  v82[4] = &v83;
  if (!*(_BYTE *)(a1 + 48)
    && (*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32)))
  {
    sentencepiece::normalizer::Normalizer::Normalize(std::string_view,std::string *,std::vector<unsigned long> *)const::$_0::operator()((uint64_t)v82);
  }
  v14 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32));
  do
  {
    sentencepiece::normalizer::Normalizer::NormalizePrefix(a2, a1, v6, v13, (uint64_t)&v76);
    v15 = v76;
    v16 = v77;
    if ((v14 & 1) != 0)
    {
      if (!v77)
        goto LABEL_64;
      while (*v15 == 32)
      {
        ++v15;
        if (!--v16)
          goto LABEL_64;
      }
    }
    else if (!v77)
    {
      v14 = 0;
      goto LABEL_64;
    }
    v74 = a2;
    v75 = v6;
    v17 = 0;
    do
    {
      v18 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 32))(*(_QWORD *)(a1 + 32));
      v19 = v15[v17];
      if (v18 && v19 == 32)
      {
        std::string::append(v87, v83, v84);
        if (v84)
        {
          for (i = 0; i < v84; ++i)
          {
            v21 = v86;
            v22 = v85;
            v23 = (char *)v86[1];
            v24 = (char *)v86[2];
            if (v23 >= v24)
            {
              v26 = (char *)*v86;
              v27 = (v23 - (_BYTE *)*v86) >> 3;
              v28 = v27 + 1;
              if ((unint64_t)(v27 + 1) >> 61)
                goto LABEL_114;
              v29 = v24 - v26;
              if (v29 >> 2 > v28)
                v28 = v29 >> 2;
              if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF8)
                v30 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v30 = v28;
              if (v30)
              {
                v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(v86 + 2), v30);
                v26 = (char *)*v21;
                v23 = (char *)v21[1];
              }
              else
              {
                v31 = 0;
              }
              v32 = &v31[8 * v27];
              *(_QWORD *)v32 = v22;
              v25 = v32 + 8;
              while (v23 != v26)
              {
                v33 = *((_QWORD *)v23 - 1);
                v23 -= 8;
                *((_QWORD *)v32 - 1) = v33;
                v32 -= 8;
              }
              *v21 = v32;
              v21[1] = v25;
              v21[2] = &v31[8 * v30];
              if (v26)
                operator delete(v26);
            }
            else
            {
              *(_QWORD *)v23 = v85;
              v25 = v23 + 8;
            }
            v21[1] = v25;
          }
        }
      }
      else
      {
        std::string::push_back(v87, v19);
        v34 = v86;
        v35 = v85;
        v36 = (char *)v86[1];
        v37 = (char *)v86[2];
        if (v36 >= v37)
        {
          v39 = (char *)*v86;
          v40 = (v36 - (_BYTE *)*v86) >> 3;
          v41 = v40 + 1;
          if ((unint64_t)(v40 + 1) >> 61)
LABEL_114:
            std::vector<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>>::__throw_length_error[abi:ne180100]();
          v42 = v37 - v39;
          if (v42 >> 2 > v41)
            v41 = v42 >> 2;
          if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF8)
            v43 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v43 = v41;
          if (v43)
          {
            v44 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(v86 + 2), v43);
            v39 = (char *)*v34;
            v36 = (char *)v34[1];
          }
          else
          {
            v44 = 0;
          }
          v45 = &v44[8 * v40];
          *(_QWORD *)v45 = v35;
          v38 = v45 + 8;
          while (v36 != v39)
          {
            v46 = *((_QWORD *)v36 - 1);
            v36 -= 8;
            *((_QWORD *)v45 - 1) = v46;
            v45 -= 8;
          }
          *v34 = v45;
          v34[1] = v38;
          v34[2] = &v44[8 * v43];
          if (v39)
            operator delete(v39);
        }
        else
        {
          *(_QWORD *)v36 = v85;
          v38 = v36 + 8;
        }
        v34[1] = v38;
      }
      ++v17;
    }
    while (v17 != v16);
    v14 = v15[v16 - 1] == 32;
    a2 = v74;
    v6 = v75;
LABEL_64:
    v85 += v78;
    a2 = (sentencepiece::string_util *)((char *)a2 + (int)v78);
    v6 -= (int)v78;
    v14 &= (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32));
  }
  while (v6);
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32)))
  {
    v47 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 32))(*(_QWORD *)(a1 + 32));
    if (v47)
      v48 = v84;
    else
      v48 = 1;
    if (v47)
      v49 = v83;
    else
      v49 = " ";
    while (1)
    {
      v50 = v87;
      LODWORD(v51) = HIBYTE(v87->__r_.__value_.__r.__words[2]);
      if (SHIBYTE(v87->__r_.__value_.__r.__words[2]) < 0)
      {
        v52 = (std::string *)v87->__r_.__value_.__r.__words[0];
        size = v87->__r_.__value_.__l.__size_;
        if (!v48)
          goto LABEL_79;
      }
      else
      {
        v52 = v87;
        size = HIBYTE(v87->__r_.__value_.__r.__words[2]);
        if (!v48)
          goto LABEL_79;
      }
      v54 = size >= v48;
      v55 = size - v48;
      if (!v54 || memcmp((char *)v52 + v55, v49, v48))
        break;
LABEL_79:
      if ((v51 & 0x80) != 0)
        v51 = v50->__r_.__value_.__l.__size_;
      if ((_DWORD)v51 - (_DWORD)v48 < 0)
      {
        LODWORD(v76) = 13;
        v67 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v77);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/normalizer.cc", 69);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v77, (uint64_t)"(", 1);
        std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v77, (uint64_t)") [", 3);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v77, (uint64_t)"(length) >= (0)", 15);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v77, (uint64_t)"] ", 2);
        sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&v76, (uint64_t)v73);
        goto LABEL_110;
      }
      v85 = *((_QWORD *)*v86 + (v51 - v48));
      std::string::resize(v50, (v51 - v48), 0);
      std::vector<unsigned long>::resize((uint64_t)v86, (v51 - v48));
    }
  }
  if (*(_BYTE *)(a1 + 48)
    && (*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32)))
  {
    sentencepiece::normalizer::Normalizer::Normalize(std::string_view,std::string *,std::vector<unsigned long> *)const::$_0::operator()((uint64_t)v82);
  }
  v56 = v86;
  v57 = v85;
  v58 = (char *)v86[1];
  v59 = (char *)v86[2];
  if (v58 >= v59)
  {
    v61 = (char *)*v86;
    v62 = (v58 - (_BYTE *)*v86) >> 3;
    v63 = v62 + 1;
    if ((unint64_t)(v62 + 1) >> 61)
      std::vector<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>>::__throw_length_error[abi:ne180100]();
    v64 = v59 - v61;
    if (v64 >> 2 > v63)
      v63 = v64 >> 2;
    if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFF8)
      v65 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v65 = v63;
    if (v65)
    {
      v66 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(v86 + 2), v65);
      v61 = (char *)*v56;
      v58 = (char *)v56[1];
    }
    else
    {
      v66 = 0;
    }
    v68 = &v66[8 * v62];
    v69 = &v66[8 * v65];
    *(_QWORD *)v68 = v57;
    v60 = v68 + 8;
    while (v58 != v61)
    {
      v70 = *((_QWORD *)v58 - 1);
      v58 -= 8;
      *((_QWORD *)v68 - 1) = v70;
      v68 -= 8;
    }
    *v56 = v68;
    v56[1] = v60;
    v56[2] = v69;
    if (v61)
      operator delete(v61);
  }
  else
  {
    *(_QWORD *)v58 = v85;
    v60 = v58 + 8;
  }
  v56[1] = v60;
  if (SHIBYTE(v87->__r_.__value_.__r.__words[2]) < 0)
    v71 = v87->__r_.__value_.__l.__size_;
  else
    v71 = HIBYTE(v87->__r_.__value_.__r.__words[2]);
  if (((_BYTE *)v86[1] - (_BYTE *)*v86) >> 3 == v71 + 1)
  {
    v12 = v73;
    return sentencepiece::util::Status::Status(v12);
  }
  LODWORD(v76) = 13;
  v72 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v77);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/normalizer.cc", 69);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v77, (uint64_t)"(", 1);
  std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v77, (uint64_t)") [", 3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v77, (uint64_t)"(norm_to_orig->size()) == (normalized->size() + 1)", 50);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v77, (uint64_t)"] ", 2);
  sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&v76, (uint64_t)v73);
LABEL_110:
  v77 = *MEMORY[0x24BEDB800];
  *(uint64_t *)((char *)&v77 + *(_QWORD *)(v77 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v78 = MEMORY[0x24BEDB848] + 16;
  if (v80 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return (_QWORD *)MEMORY[0x249544EE0](&v81);
}

void sub_245C53D34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sentencepiece::util::StatusBuilder::~StatusBuilder((sentencepiece::util::StatusBuilder *)va);
  _Unwind_Resume(a1);
}

uint64_t sentencepiece::normalizer::Normalizer::NormalizePrefix@<X0>(sentencepiece::string_util *this@<X1>, uint64_t result@<X0>, unint64_t a3@<X2>, unint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  char *v19;
  unint64_t v20;
  int v21;
  unint64_t *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  BOOL v26;
  char v27[8];
  _QWORD v28[64];

  v28[63] = *MEMORY[0x24BDAC8D0];
  if (a3)
  {
    v7 = (char *)this;
    v8 = result;
    v9 = *(_QWORD *)(result + 40);
    if (v9
      && (v27[0] = 0, result = sentencepiece::normalizer::PrefixMatcher::PrefixMatch(v9, this, a3, (BOOL *)v27), v27[0]))
    {
      v10 = (int)result;
      if (a3 < (int)result)
        v10 = a3;
      *(_QWORD *)a5 = v7;
      *(_QWORD *)(a5 + 8) = v10;
      *(_DWORD *)(a5 + 16) = result;
    }
    else
    {
      v11 = *(_QWORD *)(v8 + 8);
      if (!v11)
        goto LABEL_24;
      v12 = 0;
      v13 = 0;
      v14 = *(_DWORD **)(v11 + 16);
      v15 = (*v14 >> 10 << ((*v14 >> 6) & 8));
      do
      {
        v16 = v7[v12];
        v17 = v15 ^ v16;
        v18 = v14[v17];
        if ((v18 & 0x800000FF) != (_DWORD)v16)
          break;
        v15 = v17 ^ (v18 >> 10 << ((v18 >> 6) & 8));
        if ((v18 & 0x100) != 0)
        {
          if (v13 <= 0x1F)
          {
            v19 = &v27[16 * v13];
            *(_DWORD *)v19 = v14[v15] & 0x7FFFFFFF;
            *((_QWORD *)v19 + 1) = v12 + 1;
          }
          ++v13;
        }
        ++v12;
      }
      while (a3 != v12);
      if (!v13)
        goto LABEL_24;
      v20 = 0;
      v21 = 0;
      v22 = v28;
      v23 = v28;
      do
      {
        v25 = *v23;
        v23 += 2;
        v24 = v25;
        if (!v20 || v24 > v20)
        {
          v21 = *((_DWORD *)v22 - 2);
          v20 = v24;
        }
        v22 = v23;
        --v13;
      }
      while (v13);
      if (v20)
      {
        v7 = (char *)(*(_QWORD *)(v8 + 16) + v21);
        result = strlen(v7);
      }
      else
      {
LABEL_24:
        *(_QWORD *)v27 = 0;
        v26 = sentencepiece::string_util::DecodeUTF8((sentencepiece::string_util *)v7, &v7[a3], v27, a4) != 65533
           || *(_QWORD *)v27 == 3;
        if (v26)
          LODWORD(v20) = *(_DWORD *)v27;
        else
          LODWORD(v20) = 1;
        if (v26)
          result = *(int *)v27;
        else
          result = 3;
        if (!v26)
          v7 = (char *)&sentencepiece::normalizer::Normalizer::NormalizePrefix(std::string_view)const::kReplacementChar;
      }
      *(_QWORD *)a5 = v7;
      *(_QWORD *)(a5 + 8) = result;
      *(_DWORD *)(a5 + 16) = v20;
    }
  }
  else
  {
    *(_QWORD *)a5 = 0;
    *(_QWORD *)(a5 + 8) = 0;
    *(_DWORD *)(a5 + 16) = 0;
  }
  return result;
}

void std::vector<unsigned long>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 3)
  {
    if (a2 >> 61)
      std::vector<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>>::__throw_length_error[abi:ne180100]();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    v9 = &v6[8 * v8];
    v10 = (char *)*a1;
    v11 = (char *)a1[1];
    v12 = v7;
    if (v11 != *a1)
    {
      v12 = v7;
      do
      {
        v13 = *((_QWORD *)v11 - 1);
        v11 -= 8;
        *((_QWORD *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

void sentencepiece::normalizer::Normalizer::Normalize(std::string_view,std::string *,std::vector<unsigned long> *)const::$_0::operator()(uint64_t a1)
{
  int v2;
  std::string *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;

  v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)a1 + 32) + 32))(*(_QWORD *)(*(_QWORD *)a1 + 32));
  v3 = **(std::string ***)(a1 + 16);
  if (v2)
  {
    std::string::append(v3, **(const std::string::value_type ***)(a1 + 32), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8));
    if (*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8))
    {
      v4 = 0;
      do
      {
        v5 = **(_QWORD **)(a1 + 24);
        v6 = **(int **)(a1 + 8);
        v7 = *(_QWORD **)(v5 + 8);
        v8 = *(_QWORD *)(v5 + 16);
        if ((unint64_t)v7 >= v8)
        {
          v10 = *(_QWORD **)v5;
          v11 = ((uint64_t)v7 - *(_QWORD *)v5) >> 3;
          v12 = v11 + 1;
          if ((unint64_t)(v11 + 1) >> 61)
            goto LABEL_40;
          v13 = v8 - (_QWORD)v10;
          if (v13 >> 2 > v12)
            v12 = v13 >> 2;
          if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
            v14 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v14 = v12;
          if (v14)
          {
            v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v5 + 16, v14);
            v10 = *(_QWORD **)v5;
            v7 = *(_QWORD **)(v5 + 8);
          }
          else
          {
            v15 = 0;
          }
          v16 = &v15[8 * v11];
          *(_QWORD *)v16 = v6;
          v9 = v16 + 8;
          while (v7 != v10)
          {
            v17 = *--v7;
            *((_QWORD *)v16 - 1) = v17;
            v16 -= 8;
          }
          *(_QWORD *)v5 = v16;
          *(_QWORD *)(v5 + 8) = v9;
          *(_QWORD *)(v5 + 16) = &v15[8 * v14];
          if (v10)
            operator delete(v10);
        }
        else
        {
          *v7 = v6;
          v9 = v7 + 1;
        }
        *(_QWORD *)(v5 + 8) = v9;
        ++v4;
      }
      while (v4 < *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8));
    }
  }
  else
  {
    std::string::append(v3, " ");
    v18 = **(_QWORD **)(a1 + 24);
    v19 = **(int **)(a1 + 8);
    v20 = *(_QWORD **)(v18 + 8);
    v21 = *(_QWORD *)(v18 + 16);
    if ((unint64_t)v20 >= v21)
    {
      v23 = *(_QWORD **)v18;
      v24 = ((uint64_t)v20 - *(_QWORD *)v18) >> 3;
      v25 = v24 + 1;
      if ((unint64_t)(v24 + 1) >> 61)
LABEL_40:
        std::vector<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>>::__throw_length_error[abi:ne180100]();
      v26 = v21 - (_QWORD)v23;
      if (v26 >> 2 > v25)
        v25 = v26 >> 2;
      if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8)
        v27 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v27 = v25;
      if (v27)
      {
        v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v18 + 16, v27);
        v23 = *(_QWORD **)v18;
        v20 = *(_QWORD **)(v18 + 8);
      }
      else
      {
        v28 = 0;
      }
      v29 = &v28[8 * v24];
      v30 = &v28[8 * v27];
      *(_QWORD *)v29 = v19;
      v22 = v29 + 8;
      while (v20 != v23)
      {
        v31 = *--v20;
        *((_QWORD *)v29 - 1) = v31;
        v29 -= 8;
      }
      *(_QWORD *)v18 = v29;
      *(_QWORD *)(v18 + 8) = v22;
      *(_QWORD *)(v18 + 16) = v30;
      if (v23)
        operator delete(v23);
    }
    else
    {
      *v20 = v19;
      v22 = v20 + 1;
    }
    *(_QWORD *)(v18 + 8) = v22;
  }
}

void std::vector<unsigned long>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 8 * a2;
  }
  else
  {
    std::vector<unsigned long>::__append((char **)a1, a2 - v2);
  }
}

void sentencepiece::normalizer::Normalizer::Normalize(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  void *__p;
  void *v4;
  uint64_t v5;

  __p = 0;
  v4 = 0;
  v5 = 0;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 32))(&v2);
  sentencepiece::util::Status::IgnoreError((sentencepiece::util::Status *)&v2);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v2);
  if (__p)
  {
    v4 = __p;
    operator delete(__p);
  }
}

void sub_245C54280(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;

  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&a9);
  if (*(char *)(v11 + 23) < 0)
    operator delete(*(void **)v11);
  if (__p)
  {
    a11 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sentencepiece::normalizer::PrefixMatcher::PrefixMatch(uint64_t a1, _BYTE *a2, uint64_t a3, BOOL *a4)
{
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  _BYTE *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  _BYTE *v16;
  uint64_t result;
  int *v18;
  unsigned int v19;
  int v20;
  int v21;
  _BYTE v22[1024];
  _QWORD v23[128];

  v23[127] = *MEMORY[0x24BDAC8D0];
  if (!*(_QWORD *)a1)
  {
    if (a4)
      *a4 = 0;
    goto LABEL_33;
  }
  v4 = *(_DWORD **)(*(_QWORD *)a1 + 16);
  v5 = (*v4 >> 10 << ((*v4 >> 6) & 8));
  if (a3)
  {
    v6 = 0;
    v7 = 0;
    do
    {
      v8 = a2[v6];
      v9 = v5 ^ v8;
      v10 = v4[v9];
      if ((v10 & 0x800000FF) != (_DWORD)v8)
        break;
      v5 = v9 ^ (v10 >> 10 << ((v10 >> 6) & 8));
      if ((v10 & 0x100) != 0)
      {
        if (v7 <= 0x3F)
        {
          v11 = &v22[16 * v7];
          *(_DWORD *)v11 = v4[v5] & 0x7FFFFFFF;
          *((_QWORD *)v11 + 1) = v6 + 1;
        }
        ++v7;
      }
      ++v6;
    }
    while (a3 != v6);
  }
  else
  {
    v12 = *a2;
    if (*a2)
    {
      v7 = 0;
      v13 = 1;
      do
      {
        v14 = v5 ^ v12;
        v15 = v4[v14];
        if ((v15 & 0x800000FF) != v12)
          break;
        v5 = v14 ^ (v15 >> 10 << ((v15 >> 6) & 8));
        if ((v15 & 0x100) != 0)
        {
          if (v7 <= 0x3F)
          {
            v16 = &v22[16 * v7];
            *(_DWORD *)v16 = v4[v5] & 0x7FFFFFFF;
            *((_QWORD *)v16 + 1) = v13;
          }
          ++v7;
        }
        v12 = a2[v13++];
      }
      while (v12);
    }
    else
    {
      LODWORD(v7) = 0;
    }
  }
  if (a4)
    *a4 = (int)v7 > 0;
  if (!(_DWORD)v7)
  {
LABEL_33:
    v21 = asc_245CA23B3[(unint64_t)*a2 >> 4];
    if (v21 >= (int)a3)
      return a3;
    else
      return v21;
  }
  if ((int)v7 < 1)
    return 0;
  LODWORD(result) = 0;
  v7 = v7;
  v18 = (int *)v23;
  do
  {
    v20 = *v18;
    v18 += 4;
    v19 = v20;
    if ((int)result <= v20)
      result = v19;
    else
      result = result;
    --v7;
  }
  while (v7);
  return result;
}

void sentencepiece::normalizer::Normalizer::MemoryMappableString(sentencepiece::normalizer::Normalizer *this@<X0>, uint64_t a2@<X8>)
{
  int v4;
  _DWORD *v5;
  uint64_t v6;
  const std::string::value_type *v7;
  uint64_t v8;
  std::string::size_type v9;
  std::string *v10;
  std::string *v11;
  std::string::size_type size;
  std::string v13;

  v4 = *((unsigned __int8 *)this + 48);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  std::string::resize((std::string *)a2, 4uLL, 0);
  if (*(char *)(a2 + 23) >= 0)
    v5 = (_DWORD *)a2;
  else
    v5 = *(_DWORD **)a2;
  *v5 = v4;
  v6 = *((_QWORD *)this + 1);
  if (v6)
  {
    v8 = *(_QWORD *)(v6 + 8);
    v7 = *(const std::string::value_type **)(v6 + 16);
    memset(&v13, 0, sizeof(v13));
    std::string::resize(&v13, 4uLL, 0);
    v9 = 4 * v8;
    if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v10 = &v13;
    else
      v10 = (std::string *)v13.__r_.__value_.__r.__words[0];
    LODWORD(v10->__r_.__value_.__l.__data_) = v9;
    if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v11 = &v13;
    else
      v11 = (std::string *)v13.__r_.__value_.__r.__words[0];
    if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v13.__r_.__value_.__r.__words[2]);
    else
      size = v13.__r_.__value_.__l.__size_;
    std::string::append((std::string *)a2, (const std::string::value_type *)v11, size);
    if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v13.__r_.__value_.__l.__data_);
    std::string::append((std::string *)a2, v7, v9);
    std::string::append((std::string *)a2, *((const std::string::value_type **)this + 2), *((_QWORD *)this + 3));
  }
}

void sub_245C5457C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v15 + 23) < 0)
    operator delete(*(void **)v15);
  _Unwind_Resume(exception_object);
}

_QWORD *sentencepiece::normalizer::PrefixMatcher::PrefixMatcher(_QWORD *a1, _QWORD *a2)
{
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  BOOL v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  char v28;
  void *__p;
  char *v30;
  char *v31;

  *a1 = 0;
  v4 = a2[2];
  if (v4)
  {
    __p = 0;
    v30 = 0;
    v31 = 0;
    std::vector<char const*>::reserve(&__p, v4);
    v7 = (_QWORD *)*a2;
    v5 = a2 + 1;
    v6 = v7;
    if (v7 != v5)
    {
      v8 = v30;
      do
      {
        v9 = v6[4];
        if (v8 >= v31)
        {
          v10 = (v8 - (_BYTE *)__p) >> 3;
          if ((unint64_t)(v10 + 1) >> 61)
            std::vector<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>>::__throw_length_error[abi:ne180100]();
          v11 = (v31 - (_BYTE *)__p) >> 2;
          if (v11 <= v10 + 1)
            v11 = v10 + 1;
          if ((unint64_t)(v31 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFF8)
            v12 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v12 = v11;
          if (v12)
            v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v31, v12);
          else
            v13 = 0;
          v14 = &v13[8 * v10];
          *(_QWORD *)v14 = v9;
          v8 = v14 + 8;
          v16 = (char *)__p;
          v15 = v30;
          if (v30 != __p)
          {
            do
            {
              v17 = *((_QWORD *)v15 - 1);
              v15 -= 8;
              *((_QWORD *)v14 - 1) = v17;
              v14 -= 8;
            }
            while (v15 != v16);
            v15 = (char *)__p;
          }
          __p = v14;
          v30 = v8;
          v31 = &v13[8 * v12];
          if (v15)
            operator delete(v15);
        }
        else
        {
          *(_QWORD *)v8 = v9;
          v8 += 8;
        }
        v30 = v8;
        v18 = (_QWORD *)v6[1];
        if (v18)
        {
          do
          {
            v19 = v18;
            v18 = (_QWORD *)*v18;
          }
          while (v18);
        }
        else
        {
          do
          {
            v19 = (_QWORD *)v6[2];
            v20 = *v19 == (_QWORD)v6;
            v6 = v19;
          }
          while (!v20);
        }
        v6 = v19;
      }
      while (v19 != v5);
    }
    v21 = (_QWORD *)operator new();
    *v21 = &off_2516E3588;
    v21[1] = 0;
    v21[2] = 0;
    v21[3] = 0;
    v22 = (_QWORD *)*a1;
    *a1 = v21;
    if (v22)
    {
      (*(void (**)(_QWORD *))(*v22 + 8))(v22);
      v21 = (_QWORD *)*a1;
    }
    if (Darts::DoubleArrayImpl<void,void,int,void>::build(v21, (v30 - (_BYTE *)__p) >> 3, (unint64_t)__p, 0, 0, 0))
    {
      v28 = 1;
      v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"normalizer.cc", 13);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"(", 1);
      v24 = (_QWORD *)std::ostream::operator<<();
      v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)") [", 3);
      v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"(0) == (trie_->build(key.size(), const_cast<char **>(&key[0]), nullptr, nullptr))", 81);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"] ", 2);
      sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&v28);
    }
    if (__p)
    {
      v30 = (char *)__p;
      operator delete(__p);
    }
  }
  return a1;
}

void sub_245C54808(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, __int16 a10, char a11, char a12, void *__p, uint64_t a14)
{
  uint64_t *v14;
  uint64_t v16;

  if (__p)
    operator delete(__p);
  v16 = *v14;
  *v14 = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  _Unwind_Resume(exception_object);
}

void std::vector<char const*>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 3)
  {
    if (a2 >> 61)
      std::vector<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>>::__throw_length_error[abi:ne180100]();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    v9 = &v6[8 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v13 = *((_QWORD *)v10 - 1);
        v10 -= 8;
        *((_QWORD *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

_QWORD *sentencepiece::normalizer::PrefixMatcher::PrefixMatcher(_QWORD *a1, uint64_t a2, unint64_t a3)
{
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;

  *a1 = 0;
  if (a3)
  {
    v6 = (_QWORD *)operator new();
    *v6 = &off_2516E3588;
    v6[1] = 0;
    v6[2] = 0;
    v6[3] = 0;
    v7 = (_QWORD *)*a1;
    *a1 = v6;
    if (v7)
      (*(void (**)(_QWORD *))(*v7 + 8))(v7);
    if ((a3 & 3) == 0)
    {
      v8 = (_QWORD *)*a1;
      v9 = a3 >> 2;
      v8[1] = 0;
      v8[2] = 0;
      v10 = v8[3];
      if (v10)
      {
        MEMORY[0x249544F34](v10, 0x1000C8052888210);
        v8[3] = 0;
      }
      v8[1] = v9;
      v8[2] = a2;
    }
  }
  return a1;
}

void sub_245C549A4(_Unwind_Exception *exception_object)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  *v1 = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  _Unwind_Resume(exception_object);
}

_QWORD *sentencepiece::normalizer::PrefixMatcher::MemoryMappableString@<X0>(sentencepiece::normalizer::PrefixMatcher *this@<X0>, _QWORD *a2@<X8>)
{
  if (*(_QWORD *)this)
    return std::string::basic_string[abi:ne180100](a2, *(void **)(*(_QWORD *)this + 16), 4 * *(_QWORD *)(*(_QWORD *)this + 8));
  else
    return std::string::basic_string[abi:ne180100]<0>(a2, "");
}

uint64_t sentencepiece::normalizer::Normalizer::SetPrefixMatcher(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = a2;
  return result;
}

uint64_t sentencepiece::normalizer::Normalizer::status@<X0>(sentencepiece::normalizer::Normalizer *this@<X0>, sentencepiece::util::Status *a2@<X8>)
{
  return sentencepiece::util::Status::Status(a2, (sentencepiece::normalizer::Normalizer *)((char *)this + 56));
}

void std::vector<unsigned long>::__append(char **a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = *a1;
    v9 = v7 - *a1;
    v10 = a2 + (v9 >> 3);
    if (v10 >> 61)
      std::vector<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>>::__throw_length_error[abi:ne180100]();
    v11 = v9 >> 3;
    v12 = v5 - v8;
    if (v12 >> 2 > v10)
      v10 = v12 >> 2;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    if (v13)
    {
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v4, v13);
      v8 = *a1;
      v7 = a1[1];
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[8 * v11];
    v16 = &v14[8 * v13];
    bzero(v15, 8 * a2);
    v17 = &v15[8 * a2];
    while (v7 != v8)
    {
      v18 = *((_QWORD *)v7 - 1);
      v7 -= 8;
      *((_QWORD *)v15 - 1) = v18;
      v15 -= 8;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
      operator delete(v8);
  }
}

void sentencepiece::ModelFactory::Create(sentencepiece::ModelFactory *this@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  sentencepiece::unigram::Model *v11;

  if (*((_QWORD *)this + 10))
    v4 = (_DWORD *)*((_QWORD *)this + 10);
  else
    v4 = &sentencepiece::_TrainerSpec_default_instance_;
  switch(v4[68])
  {
    case 1:
      absl::make_unique<sentencepiece::unigram::Model,sentencepiece::ModelProto const&>(this, &v11);
      goto LABEL_12;
    case 2:
      absl::make_unique<sentencepiece::bpe::Model,sentencepiece::ModelProto const&>(this, &v11);
      goto LABEL_12;
    case 3:
      absl::make_unique<sentencepiece::word::Model,sentencepiece::ModelProto const&>(this, &v11);
      goto LABEL_12;
    case 4:
      absl::make_unique<sentencepiece::character::Model,sentencepiece::ModelProto const&>(this, &v11);
LABEL_12:
      *a2 = v11;
      break;
    default:
      if ((int)sentencepiece::logging::GetMinLogLevel(this) <= 2)
      {
        LOBYTE(v11) = 0;
        v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"model_factory.cc", 16);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"(", 1);
        v6 = (_QWORD *)std::ostream::operator<<();
        v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)") ", 2);
        v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"LOG(", 4);
        v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"ERROR", 5);
        v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)") ", 2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Unknown model_type: ", 20);
        std::ostream::operator<<();
        sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&v11);
      }
      *a2 = 0;
      break;
  }
}

void sub_245C54C4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sentencepiece::error::Die::~Die((sentencepiece::error::Die *)va);
  _Unwind_Resume(a1);
}

uint64_t absl::make_unique<sentencepiece::unigram::Model,sentencepiece::ModelProto const&>@<X0>(const sentencepiece::ModelProto *a1@<X0>, sentencepiece::unigram::Model **a2@<X8>)
{
  sentencepiece::unigram::Model *v4;
  uint64_t result;

  v4 = (sentencepiece::unigram::Model *)operator new();
  result = sentencepiece::unigram::Model::Model(v4, a1);
  *a2 = v4;
  return result;
}

void sub_245C54CB0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x249544F58](v1, 0x10E1C404363080ALL);
  _Unwind_Resume(a1);
}

uint64_t absl::make_unique<sentencepiece::bpe::Model,sentencepiece::ModelProto const&>@<X0>(const sentencepiece::ModelProto *a1@<X0>, sentencepiece::bpe::Model **a2@<X8>)
{
  sentencepiece::bpe::Model *v4;
  uint64_t result;

  v4 = (sentencepiece::bpe::Model *)operator new();
  result = sentencepiece::bpe::Model::Model(v4, a1);
  *a2 = v4;
  return result;
}

void sub_245C54D24(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x249544F58](v1, 0x10E1C4039E95E28);
  _Unwind_Resume(a1);
}

uint64_t absl::make_unique<sentencepiece::word::Model,sentencepiece::ModelProto const&>@<X0>(const sentencepiece::ModelProto *a1@<X0>, sentencepiece::word::Model **a2@<X8>)
{
  sentencepiece::word::Model *v4;
  uint64_t result;

  v4 = (sentencepiece::word::Model *)operator new();
  result = sentencepiece::word::Model::Model(v4, a1);
  *a2 = v4;
  return result;
}

void sub_245C54D98(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x249544F58](v1, 0x10E1C4039E95E28);
  _Unwind_Resume(a1);
}

uint64_t absl::make_unique<sentencepiece::character::Model,sentencepiece::ModelProto const&>@<X0>(const sentencepiece::ModelProto *a1@<X0>, sentencepiece::character::Model **a2@<X8>)
{
  sentencepiece::character::Model *v4;
  uint64_t result;

  v4 = (sentencepiece::character::Model *)operator new();
  result = sentencepiece::character::Model::Model(v4, a1);
  *a2 = v4;
  return result;
}

void sub_245C54E0C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x249544F58](v1, 0x10E1C4039E95E28);
  _Unwind_Resume(a1);
}

void sentencepiece::ModelFactory::Create(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  sentencepiece::logging *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v14[2];

  v14[0] = a2;
  v14[1] = a3;
  v6 = (sentencepiece::logging *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 80))(a1);
  if ((_DWORD)v6 == 1)
  {
    absl::make_unique<sentencepiece::bpe::Model,sentencepiece::MemoryMappedModelProto const&,std::string_view &>(a1, (uint64_t)v14, &v13);
    goto LABEL_5;
  }
  if (!(_DWORD)v6)
  {
    absl::make_unique<sentencepiece::unigram::Model,sentencepiece::MemoryMappedModelProto const&,std::string_view &>(a1, v14, &v13);
LABEL_5:
    *a4 = v13;
    return;
  }
  if ((int)sentencepiece::logging::GetMinLogLevel(v6) <= 2)
  {
    LOBYTE(v13) = 0;
    v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"model_factory.cc", 16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"(", 1);
    v8 = (_QWORD *)std::ostream::operator<<();
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)") ", 2);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"LOG(", 4);
    v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"ERROR", 5);
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)") ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Unknown model_type: ", 20);
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 80))(a1);
    std::ostream::operator<<();
    sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&v13);
  }
  *a4 = 0;
}

void sub_245C54F68(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sentencepiece::error::Die::~Die((sentencepiece::error::Die *)va);
  _Unwind_Resume(a1);
}

uint64_t absl::make_unique<sentencepiece::unigram::Model,sentencepiece::MemoryMappedModelProto const&,std::string_view &>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t result;

  v6 = operator new();
  result = sentencepiece::unigram::Model::Model(v6, a1, *a2, a2[1]);
  *a3 = v6;
  return result;
}

void sub_245C54FD8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x249544F58](v1, 0x10E1C404363080ALL);
  _Unwind_Resume(a1);
}

_QWORD *absl::make_unique<sentencepiece::bpe::Model,sentencepiece::MemoryMappedModelProto const&,std::string_view &>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  _QWORD *result;

  v6 = operator new();
  result = sentencepiece::bpe::Model::Model(v6, a1, *(_DWORD **)a2, *(_QWORD *)(a2 + 8));
  *a3 = v6;
  return result;
}

void sub_245C55054(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x249544F58](v1, 0x10E1C4039E95E28);
  _Unwind_Resume(a1);
}

void sentencepiece::ImmutableSentencePieceText::~ImmutableSentencePieceText(sentencepiece::ImmutableSentencePieceText *this)
{
  *(_QWORD *)this = &off_2516E2E40;
  std::shared_ptr<scml::Config::PathInfo>::~shared_ptr[abi:ne180100]((uint64_t)this + 16);
}

{
  *(_QWORD *)this = &off_2516E2E40;
  std::shared_ptr<scml::Config::PathInfo>::~shared_ptr[abi:ne180100]((uint64_t)this + 16);
  JUMPOUT(0x249544F58);
}

uint64_t sentencepiece::ImmutableSentencePieceText::mutable_proto(sentencepiece::ImmutableSentencePieceText *this)
{
  uint64_t result;
  char *v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;

  v3 = (char *)this + 16;
  result = *((_QWORD *)this + 2);
  if (!result)
  {
    _ZNSt3__115allocate_sharedB8ne180100IN13sentencepiece17SentencePieceTextENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v7);
    std::shared_ptr<sentencepiece::SentencePieceText>::operator=[abi:ne180100]((uint64_t)v3, &v7);
    v4 = (std::__shared_weak_count *)*((_QWORD *)&v7 + 1);
    if (*((_QWORD *)&v7 + 1))
    {
      v5 = (unint64_t *)(*((_QWORD *)&v7 + 1) + 8);
      do
        v6 = __ldaxr(v5);
      while (__stlxr(v6 - 1, v5));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    result = *((_QWORD *)this + 2);
    *((_QWORD *)this + 1) = result;
  }
  return result;
}

uint64_t std::shared_ptr<sentencepiece::SentencePieceText>::operator=[abi:ne180100](uint64_t a1, __int128 *a2)
{
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v3 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v4 = *(std::__shared_weak_count **)(a1 + 8);
  *(_OWORD *)a1 = v3;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return a1;
}

void sentencepiece::ImmutableNBestSentencePieceText::~ImmutableNBestSentencePieceText(sentencepiece::ImmutableNBestSentencePieceText *this)
{
  *(_QWORD *)this = &off_2516E2EA0;
  std::shared_ptr<scml::Config::PathInfo>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

{
  *(_QWORD *)this = &off_2516E2EA0;
  std::shared_ptr<scml::Config::PathInfo>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
  JUMPOUT(0x249544F58);
}

uint64_t sentencepiece::ImmutableNBestSentencePieceText::mutable_proto(sentencepiece::ImmutableNBestSentencePieceText *this)
{
  uint64_t result;
  char *v2;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  __int128 v6;

  v2 = (char *)this + 8;
  result = *((_QWORD *)this + 1);
  if (!result)
  {
    _ZNSt3__115allocate_sharedB8ne180100IN13sentencepiece22NBestSentencePieceTextENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v6);
    std::shared_ptr<sentencepiece::SentencePieceText>::operator=[abi:ne180100]((uint64_t)v2, &v6);
    v3 = (std::__shared_weak_count *)*((_QWORD *)&v6 + 1);
    if (*((_QWORD *)&v6 + 1))
    {
      v4 = (unint64_t *)(*((_QWORD *)&v6 + 1) + 8);
      do
        v5 = __ldaxr(v4);
      while (__stlxr(v5 - 1, v4));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    return *(_QWORD *)v2;
  }
  return result;
}

_QWORD *sentencepiece::ImmutableNBestSentencePieceText::SerializeAsString@<X0>(sentencepiece::ImmutableNBestSentencePieceText *this@<X0>, _QWORD *a2@<X8>)
{
  google::protobuf::MessageLite *v2;

  v2 = (google::protobuf::MessageLite *)*((_QWORD *)this + 1);
  if (v2)
    return (_QWORD *)google::protobuf::MessageLite::SerializeAsString(v2, (uint64_t)a2);
  else
    return std::string::basic_string[abi:ne180100]<0>(a2, "");
}

double sentencepiece::SentencePieceProcessor::SentencePieceProcessor(sentencepiece::SentencePieceProcessor *this)
{
  double result;

  *(_QWORD *)this = &off_2516E2B50;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  return result;
}

void sentencepiece::SentencePieceProcessor::~SentencePieceProcessor(void **this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  *this = &off_2516E2B50;
  if (*((char *)this + 119) < 0)
    operator delete(this[12]);
  v2 = this[11];
  this[11] = 0;
  if (v2)
    (*(void (**)(void *))(*(_QWORD *)v2 + 8))(v2);
  v3 = this[8];
  if (v3)
  {
    this[9] = v3;
    operator delete(v3);
  }
  v4 = this[5];
  if (v4)
  {
    this[6] = v4;
    operator delete(v4);
  }
  v5 = this[4];
  this[4] = 0;
  if (v5)
    (*(void (**)(void *))(*(_QWORD *)v5 + 8))(v5);
  v6 = this[3];
  this[3] = 0;
  if (v6)
    (*(void (**)(void *))(*(_QWORD *)v6 + 8))(v6);
  v7 = this[2];
  this[2] = 0;
  if (v7)
    (*(void (**)(void *))(*(_QWORD *)v7 + 8))(v7);
  v8 = this[1];
  this[1] = 0;
  if (v8)
    (*(void (**)(void *))(*(_QWORD *)v8 + 8))(v8);
}

{
  sentencepiece::SentencePieceProcessor::~SentencePieceProcessor(this);
  JUMPOUT(0x249544F58);
}

uint64_t sentencepiece::IsMMappableFile()
{
  _QWORD v1[2];
  _BYTE v2[408];
  _QWORD v3[20];

  v3[19] = *MEMORY[0x24BDAC8D0];
  std::ifstream::basic_ifstream(v1);
  if ((v2[*(_QWORD *)(v1[0] - 24) + 16] & 5) == 0)
    std::istream::read();
  v1[0] = *MEMORY[0x24BEDB7E0];
  *(_QWORD *)((char *)v1 + *(_QWORD *)(v1[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7E0] + 24);
  MEMORY[0x249544D60](v2);
  std::istream::~istream();
  MEMORY[0x249544EE0](v3);
  return 0;
}

void sub_245C554FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::ifstream::~ifstream((uint64_t *)va);
  _Unwind_Resume(a1);
}

_QWORD *std::ifstream::basic_ifstream(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  std::ios_base *v7;

  v2 = MEMORY[0x24BEDB838];
  v3 = MEMORY[0x24BEDB838] + 64;
  a1[53] = MEMORY[0x24BEDB838] + 64;
  v4 = a1 + 2;
  v5 = *(_QWORD *)(MEMORY[0x24BEDB7E0] + 8);
  v6 = *(_QWORD *)(MEMORY[0x24BEDB7E0] + 16);
  *a1 = v5;
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v5 - 24)) = v6;
  a1[1] = 0;
  v7 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  std::ios_base::init(v7, a1 + 2);
  v7[1].__vftable = 0;
  v7[1].__fmtflags_ = -1;
  *a1 = v2 + 24;
  a1[53] = v3;
  MEMORY[0x249544D54](v4);
  if (!std::filebuf::open())
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 4);
  return a1;
}

void sub_245C555EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::istream::~istream();
  MEMORY[0x249544EE0](v1 + 424);
  _Unwind_Resume(a1);
}

_QWORD *std::ifstream::~ifstream(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x24BEDB7E0];
  v3 = *MEMORY[0x24BEDB7E0];
  *a1 = *MEMORY[0x24BEDB7E0];
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  MEMORY[0x249544D60](a1 + 2);
  std::istream::~istream();
  MEMORY[0x249544EE0](a1 + 53);
  return a1;
}

sentencepiece::ModelProto *sentencepiece::SentencePieceProcessor::Load@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, sentencepiece::util::Status *a4@<X8>)
{
  sentencepiece::ModelProto *result;
  sentencepiece::ModelProto *v9;
  uint64_t v10;
  uint64_t v11;
  sentencepiece::ModelProto *v12;
  sentencepiece::ModelProto *v13;

  if (sentencepiece::IsMMappableFile())
    return (sentencepiece::ModelProto *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 64))(a1, a2, a3);
  absl::make_unique<sentencepiece::ModelProto>(&v13);
  sentencepiece::io::LoadModelProto(a2, a3, v13, a4);
  if (!*(_QWORD *)a4)
  {
    sentencepiece::util::Status::~Status(a4);
    v12 = v13;
    v13 = 0;
    (*(void (**)(uint64_t, sentencepiece::ModelProto **))(*(_QWORD *)a1 + 40))(a1, &v12);
    v9 = v12;
    v12 = 0;
    if (v9)
    {
      sentencepiece::ModelProto::~ModelProto(v9);
      MEMORY[0x249544F58](v10);
    }
  }
  result = v13;
  v13 = 0;
  if (result)
  {
    sentencepiece::ModelProto::~ModelProto(result);
    return (sentencepiece::ModelProto *)MEMORY[0x249544F58](v11, 0x10A1C4047CE62CFLL);
  }
  return result;
}

void sub_245C55784(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, sentencepiece::ModelProto *a9, sentencepiece::ModelProto *a10)
{
  std::unique_ptr<sentencepiece::ModelProto>::reset[abi:ne180100](&a9, 0);
  std::unique_ptr<sentencepiece::ModelProto>::reset[abi:ne180100](&a10, 0);
  _Unwind_Resume(a1);
}

uint64_t absl::make_unique<sentencepiece::ModelProto>@<X0>(sentencepiece::ModelProto **a1@<X8>)
{
  sentencepiece::ModelProto *v2;
  uint64_t result;

  v2 = (sentencepiece::ModelProto *)operator new();
  result = sentencepiece::ModelProto::ModelProto(v2, 0);
  *a1 = v2;
  return result;
}

void sub_245C557F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x249544F58](v1, 0x10A1C4047CE62CFLL);
  _Unwind_Resume(a1);
}

uint64_t sentencepiece::io::LoadModelProto@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, google::protobuf::MessageLite *a3@<X2>, sentencepiece::util::Status *a4@<X8>)
{
  char *v6;
  unsigned int v7;
  uint64_t result;
  unsigned int v9;
  _QWORD v10[11];
  char v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (!a2)
    return sentencepiece::util::Status::Status(a4, 5, "model file path should not be empty.", 36);
  sentencepiece::filesystem::NewReadableFile(a1, a2, 1, &v16);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16);
  if (!*(_QWORD *)a4)
  {
    sentencepiece::util::Status::~Status(a4);
    v13 = 0;
    v14 = 0;
    v15 = 0;
    if (((*(uint64_t (**)(uint64_t, char **))(*(_QWORD *)v16 + 32))(v16, &v13) & 1) != 0)
    {
      if (v15 >= 0)
        v6 = (char *)&v13;
      else
        v6 = v13;
      if (v15 >= 0)
        v7 = HIBYTE(v15);
      else
        v7 = v14;
      if ((google::protobuf::MessageLite::ParseFromArray(a3, v6, v7) & 1) != 0)
      {
        sentencepiece::util::Status::Status(a4);
LABEL_18:
        if (SHIBYTE(v15) < 0)
          operator delete(v13);
        goto LABEL_20;
      }
      v9 = 13;
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v10);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"(", 1);
      std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)") [", 3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"model_proto->ParseFromArray(serialized.data(), serialized.size())", 65);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"] ", 2);
      sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status(&v9, (uint64_t)a4);
    }
    else
    {
      v9 = 13;
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v10);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"(", 1);
      std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)") [", 3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"input->ReadAll(&serialized)", 27);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"] ", 2);
      sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status(&v9, (uint64_t)a4);
    }
    v10[0] = *MEMORY[0x24BEDB800];
    *(_QWORD *)((char *)v10 + *(_QWORD *)(v10[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
    v10[1] = MEMORY[0x24BEDB848] + 16;
    if (v11 < 0)
      operator delete((void *)v10[9]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x249544EE0](&v12);
    goto LABEL_18;
  }
LABEL_20:
  result = v16;
  v16 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_245C55AC4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v3;

  if (*(char *)(v1 - 57) < 0)
    operator delete(*(void **)(v1 - 80));
  v3 = *(_QWORD *)(v1 - 56);
  *(_QWORD *)(v1 - 56) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  _Unwind_Resume(exception_object);
}

void sentencepiece::SentencePieceProcessor::LoadOrDie(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  std::string *p_p;
  std::string::size_type size;
  std::string __p;
  char v9;
  uint64_t v10;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 16))(&v10);
  if (v10)
  {
    v9 = 1;
    v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"sentencepiece_processor.cc", 26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)"(", 1);
    v2 = (_QWORD *)std::ostream::operator<<();
    v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)") [", 3);
    v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"_status.ok()", 12);
    v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"] ", 2);
    sentencepiece::util::Status::ToString((sentencepiece::util::Status *)&v10, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)p_p, size);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&v9);
  }
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v10);
}

void sub_245C55C18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  sentencepiece::error::Die::~Die((sentencepiece::error::Die *)(v15 - 25));
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)(v15 - 24));
  _Unwind_Resume(a1);
}

sentencepiece::ModelProto *sentencepiece::SentencePieceProcessor::Load(sentencepiece::SentencePieceProcessor *this, const sentencepiece::ModelProto *a2)
{
  sentencepiece::ModelProto *v4;
  uint64_t v5;
  sentencepiece::ModelProto *result;
  uint64_t v7;
  sentencepiece::ModelProto *v8;
  sentencepiece::ModelProto *v9;

  absl::make_unique<sentencepiece::ModelProto>(&v9);
  sentencepiece::ModelProto::CopyFrom(v9, a2);
  v8 = v9;
  v9 = 0;
  (*(void (**)(sentencepiece::SentencePieceProcessor *, sentencepiece::ModelProto **))(*(_QWORD *)this + 40))(this, &v8);
  v4 = v8;
  v8 = 0;
  if (v4)
  {
    sentencepiece::ModelProto::~ModelProto(v4);
    MEMORY[0x249544F58](v5);
  }
  result = v9;
  v9 = 0;
  if (result)
  {
    sentencepiece::ModelProto::~ModelProto(result);
    return (sentencepiece::ModelProto *)MEMORY[0x249544F58](v7, 0x10A1C4047CE62CFLL);
  }
  return result;
}

void sub_245C55D00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, sentencepiece::ModelProto *a9, sentencepiece::ModelProto *a10)
{
  std::unique_ptr<sentencepiece::ModelProto>::reset[abi:ne180100](&a9, 0);
  std::unique_ptr<sentencepiece::ModelProto>::reset[abi:ne180100](&a10, 0);
  _Unwind_Resume(a1);
}

sentencepiece::ModelProto *sentencepiece::SentencePieceProcessor::LoadFromSerializedProto@<X0>(uint64_t a1@<X0>, char *a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  sentencepiece::ModelProto *v8;
  sentencepiece::ModelProto *v9;
  uint64_t v10;
  sentencepiece::ModelProto *result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  sentencepiece::ModelProto *v15;
  unsigned int v16;
  _QWORD v17[11];
  char v18;
  uint64_t v19;
  sentencepiece::ModelProto *v20;

  absl::make_unique<sentencepiece::ModelProto>(&v20);
  if ((google::protobuf::MessageLite::ParseFromArray(v20, a2, a3) & 1) != 0)
  {
    v8 = v20;
    v20 = 0;
    v15 = v8;
    (*(void (**)(uint64_t, sentencepiece::ModelProto **))(*(_QWORD *)a1 + 40))(a1, &v15);
    v9 = v15;
    v15 = 0;
    if (v9)
    {
      sentencepiece::ModelProto::~ModelProto(v9);
      MEMORY[0x249544F58](v10);
    }
  }
  else
  {
    v16 = 13;
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v17);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"(", 1);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)") [", 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"model_proto->ParseFromArray(serialized.data(), serialized.size())", 65);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"] ", 2);
    sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status(&v16, a4);
    v17[0] = *MEMORY[0x24BEDB800];
    *(_QWORD *)((char *)v17 + *(_QWORD *)(v17[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
    v17[1] = MEMORY[0x24BEDB848] + 16;
    if (v18 < 0)
      operator delete((void *)v17[9]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x249544EE0](&v19);
  }
  result = v20;
  v20 = 0;
  if (result)
  {
    sentencepiece::ModelProto::~ModelProto(result);
    return (sentencepiece::ModelProto *)MEMORY[0x249544F58](v12, 0x10A1C4047CE62CFLL, v13, v14);
  }
  return result;
}

void sub_245C55EF0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<sentencepiece::ModelProto>::reset[abi:ne180100]((sentencepiece::ModelProto **)(v1 - 56), 0);
  _Unwind_Resume(a1);
}

void sentencepiece::SentencePieceProcessor::Load(sentencepiece::logging *a1@<X0>, uint64_t *a2@<X1>, sentencepiece::util::Status *a3@<X8>)
{
  uint64_t v6;
  _BYTE *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  std::__split_buffer<std::string>::pointer first;
  uint64_t v23;
  std::__split_buffer<std::string>::pointer v24;
  const sentencepiece::NormalizerSpec *v25;
  const sentencepiece::TrainerSpec *v26;
  std::__split_buffer<std::string>::pointer v27;
  uint64_t v28;
  std::__split_buffer<std::string>::pointer v29;
  const sentencepiece::NormalizerSpec *v30;
  std::string *v31;
  const sentencepiece::NormalizerSpec *v32;
  unint64_t v33;
  std::__split_buffer<std::string>::pointer v34;
  uint64_t v35;
  std::__split_buffer<std::string>::pointer v36;
  uint64_t v37;
  uint64_t v38;
  int *v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  int v49;
  const std::string::value_type *v50;
  std::string::size_type v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  int v55;
  const std::string::value_type *v56;
  std::string::size_type v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  std::string *v61;
  std::string::size_type size;
  sentencepiece::logging *v63;
  unint64_t v64;
  size_t v65;
  void *v66;
  std::vector<std::string>::pointer end;
  __int128 v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  std::string *v72;
  std::string *v73;
  __int128 v74;
  std::string *v75;
  sentencepiece::logging *MinLogLevel;
  _QWORD *v77;
  _QWORD *v78;
  _QWORD *v79;
  _QWORD *v80;
  _QWORD *v81;
  _QWORD *v82;
  _QWORD *v83;
  std::vector<std::string>::pointer begin;
  std::vector<std::string>::pointer v85;
  _QWORD *v86;
  _QWORD *v87;
  _QWORD *v88;
  _QWORD *v89;
  _QWORD *v90;
  _QWORD *v91;
  _QWORD *v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  std::string __p;
  std::string v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  std::vector<std::string> v101;
  std::__split_buffer<std::string> __v;

  v6 = *a2;
  v7 = *(_BYTE **)(*a2 + 88);
  if (!v7)
    v7 = &sentencepiece::_NormalizerSpec_default_instance_;
  if (v7[80])
  {
    if ((int)sentencepiece::logging::GetMinLogLevel(a1) <= 0)
    {
      LOBYTE(__v.__first_) = 0;
      v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"sentencepiece_processor.cc", 26);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"(", 1);
      v9 = (_QWORD *)std::ostream::operator<<();
      v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)") ", 2);
      v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"LOG(", 4);
      v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"INFO", 4);
      v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)") ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Enable Apple addition for backward compatibility", 48);
      sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&__v);
    }
    v6 = *a2;
    *(_DWORD *)(v6 + 48) = *(_DWORD *)(*a2 + 48) | 1;
    v14 = *(_QWORD *)(v6 + 80);
    if (!v14)
    {
      v15 = *(_QWORD *)(v6 + 8);
      v16 = (_QWORD *)(v15 & 0xFFFFFFFFFFFFFFFELL);
      if ((v15 & 1) != 0)
        v16 = (_QWORD *)*v16;
      v14 = google::protobuf::Arena::CreateMaybeMessage<sentencepiece::TrainerSpec>((uint64_t)v16);
      *(_QWORD *)(v6 + 80) = v14;
      v6 = *a2;
    }
    *(_DWORD *)(v14 + 40) |= 0x4000u;
    *(_BYTE *)(v14 + 245) = 1;
    *(_DWORD *)(v6 + 48) |= 2u;
    v17 = *(_QWORD *)(v6 + 88);
    if (!v17)
    {
      v18 = *(_QWORD *)(v6 + 8);
      v19 = (_QWORD *)(v18 & 0xFFFFFFFFFFFFFFFELL);
      if ((v18 & 1) != 0)
        v19 = (_QWORD *)*v19;
      v17 = google::protobuf::Arena::CreateMaybeMessage<sentencepiece::NormalizerSpec>((uint64_t)v19);
      *(_QWORD *)(v6 + 88) = v17;
      v6 = *a2;
    }
    *(_DWORD *)(v17 + 48) |= 0x10u;
    *(_BYTE *)(v17 + 81) = 1;
  }
  *a2 = 0;
  if (v6)
    v20 = v6 + 16;
  else
    v20 = 0;
  v21 = *((_QWORD *)a1 + 4);
  *((_QWORD *)a1 + 4) = v20;
  if (v21)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
    v20 = *((_QWORD *)a1 + 4);
  }
  sentencepiece::ModelFactory::Create((sentencepiece::ModelFactory *)(v20 - 16), &__v);
  first = __v.__first_;
  __v.__first_ = 0;
  v23 = *((_QWORD *)a1 + 1);
  *((_QWORD *)a1 + 1) = first;
  if (v23)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
    v24 = __v.__first_;
    __v.__first_ = 0;
    if (v24)
      (*(void (**)(std::__split_buffer<std::string>::pointer))(v24->__r_.__value_.__r.__words[0] + 8))(v24);
  }
  if (*(_QWORD *)(v20 + 72))
    v25 = *(const sentencepiece::NormalizerSpec **)(v20 + 72);
  else
    v25 = (const sentencepiece::NormalizerSpec *)&sentencepiece::_NormalizerSpec_default_instance_;
  if (*(_QWORD *)(v20 + 64))
    v26 = *(const sentencepiece::TrainerSpec **)(v20 + 64);
  else
    v26 = (const sentencepiece::TrainerSpec *)&sentencepiece::_TrainerSpec_default_instance_;
  absl::make_unique<sentencepiece::normalizer::Normalizer,sentencepiece::NormalizerSpec const&,sentencepiece::TrainerSpec const&>(v25, v26, (sentencepiece::normalizer::Normalizer **)&__v);
  v27 = __v.__first_;
  __v.__first_ = 0;
  v28 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v27;
  if (v28)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
    v29 = __v.__first_;
    __v.__first_ = 0;
    if (v29)
      (*(void (**)(std::__split_buffer<std::string>::pointer))(v29->__r_.__value_.__r.__words[0] + 8))(v29);
  }
  if ((*(_DWORD *)(v20 + 32) & 8) != 0)
  {
    v30 = *(const sentencepiece::NormalizerSpec **)(v20 + 88);
    if (!v30)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)&__v, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.h", 4990);
      v31 = google::protobuf::internal::LogMessage::operator<<((std::string *)&__v, "CHECK failed: !value || denormalizer_spec_ != nullptr: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v101, (const char **)&v31->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&__v.__first_);
      v30 = *(const sentencepiece::NormalizerSpec **)(v20 + 88);
    }
    if (v30)
      v32 = v30;
    else
      v32 = (const sentencepiece::NormalizerSpec *)&sentencepiece::_NormalizerSpec_default_instance_;
    v33 = *((_QWORD *)v32 + 8) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v33 + 23) < 0)
    {
      if (!*(_QWORD *)(v33 + 8))
        goto LABEL_45;
    }
    else if (!*(_BYTE *)(v33 + 23))
    {
      goto LABEL_45;
    }
    absl::make_unique<sentencepiece::normalizer::Normalizer,sentencepiece::NormalizerSpec const&>(v32, (sentencepiece::normalizer::Normalizer **)&__v);
    v34 = __v.__first_;
    __v.__first_ = 0;
    v35 = *((_QWORD *)a1 + 3);
    *((_QWORD *)a1 + 3) = v34;
    if (v35)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
      v36 = __v.__first_;
      __v.__first_ = 0;
      if (v36)
        (*(void (**)(std::__split_buffer<std::string>::pointer))(v36->__r_.__value_.__r.__words[0] + 8))(v36);
    }
  }
LABEL_45:
  v37 = *((_QWORD *)a1 + 2);
  v38 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a1 + 1) + 32))(*((_QWORD *)a1 + 1));
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v37 + 16))(v37, v38);
  (*(void (**)(sentencepiece::logging *))(*(_QWORD *)a1 + 88))(a1);
  if (!*(_QWORD *)a3)
  {
    sentencepiece::util::Status::~Status(a3);
    memset(&v101, 0, sizeof(v101));
    v98 = 0;
    v99 = 0;
    v100 = 0;
    v39 = *(int **)(v20 + 80);
    if (!v39)
      v39 = (int *)&sentencepiece::_SelfTestData_default_instance_;
    v40 = *((_QWORD *)v39 + 7);
    if (v40)
      v41 = (uint64_t *)(v40 + 8);
    else
      v41 = 0;
    v42 = v39[12];
    if ((_DWORD)v42)
    {
      v43 = &v41[v42];
      while (1)
      {
        v44 = *v41;
        v45 = *(_QWORD *)(*v41 + 24) & 0xFFFFFFFFFFFFFFFELL;
        if (*(char *)(v45 + 23) < 0)
        {
          v47 = *(_QWORD *)v45;
          v46 = *(_QWORD *)(v45 + 8);
        }
        else
        {
          v46 = *(unsigned __int8 *)(v45 + 23);
          v47 = *(_QWORD *)(*v41 + 24) & 0xFFFFFFFFFFFFFFFELL;
        }
        (*(void (**)(sentencepiece::logging *, unint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 136))(a1, v47, v46, &v98);
        if (*(_QWORD *)a3)
          break;
        sentencepiece::util::Status::~Status(a3);
        memset(&v97, 0, sizeof(v97));
        v48 = v98;
        if (v98 == v99)
        {
          v52 = v98;
        }
        else
        {
          v49 = *(char *)(v98 + 23);
          if (v49 >= 0)
            v50 = (const std::string::value_type *)v98;
          else
            v50 = *(const std::string::value_type **)v98;
          if (v49 >= 0)
            v51 = *(unsigned __int8 *)(v98 + 23);
          else
            v51 = *(_QWORD *)(v98 + 8);
          std::string::append(&v97, v50, v51);
          v48 = v98;
          v52 = v99;
        }
        if (0xAAAAAAAAAAAAAAABLL * ((v52 - v48) >> 3) >= 2)
        {
          v53 = 0;
          v54 = 1;
          do
          {
            std::string::append(&v97, " ", 1uLL);
            v55 = *(char *)(v98 + v53 + 47);
            if (v55 >= 0)
              v56 = (const std::string::value_type *)(v98 + v53 + 24);
            else
              v56 = *(const std::string::value_type **)(v98 + v53 + 24);
            if (v55 >= 0)
              v57 = *(unsigned __int8 *)(v98 + v53 + 47);
            else
              v57 = *(_QWORD *)(v98 + v53 + 32);
            std::string::append(&v97, v56, v57);
            ++v54;
            v53 += 24;
          }
          while (v54 < 0xAAAAAAAAAAAAAAABLL * ((v99 - v98) >> 3));
        }
        v58 = *(_QWORD *)(v44 + 32) & 0xFFFFFFFFFFFFFFFELL;
        if (*(char *)(v58 + 23) < 0)
        {
          v60 = *(_QWORD *)v58;
          v59 = *(_QWORD *)(v58 + 8);
        }
        else
        {
          v59 = *(unsigned __int8 *)(v58 + 23);
          v60 = *(_QWORD *)(v44 + 32) & 0xFFFFFFFFFFFFFFFELL;
        }
        if ((v97.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v61 = &v97;
        else
          v61 = (std::string *)v97.__r_.__value_.__r.__words[0];
        if ((v97.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v97.__r_.__value_.__r.__words[2]);
        else
          size = v97.__r_.__value_.__l.__size_;
        v63 = (sentencepiece::logging *)(*(uint64_t (**)(_QWORD, unint64_t, uint64_t, std::string *, std::string::size_type))(**((_QWORD **)a1 + 1) + 192))(*((_QWORD *)a1 + 1), v60, v59, v61, size);
        if ((v63 & 1) == 0)
        {
          v64 = *(_QWORD *)(v44 + 24) & 0xFFFFFFFFFFFFFFFELL;
          if (*(char *)(v64 + 23) < 0)
          {
            v66 = *(void **)v64;
            v65 = *(_QWORD *)(v64 + 8);
          }
          else
          {
            v65 = *(unsigned __int8 *)(v64 + 23);
            v66 = (void *)(*(_QWORD *)(v44 + 24) & 0xFFFFFFFFFFFFFFFELL);
          }
          absl::StrCat<char [2],std::string,char [2],std::string>(v66, v65, "\t", (void **)(*(_QWORD *)(v44 + 32) & 0xFFFFFFFFFFFFFFFELL), "\t", (void **)&v97.__r_.__value_.__l.__data_, &__p);
          end = v101.__end_;
          if (v101.__end_ >= v101.__end_cap_.__value_)
          {
            v69 = 0xAAAAAAAAAAAAAAABLL * (((char *)v101.__end_ - (char *)v101.__begin_) >> 3);
            v70 = v69 + 1;
            if (v69 + 1 > 0xAAAAAAAAAAAAAAALL)
              std::vector<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>>::__throw_length_error[abi:ne180100]();
            if (0x5555555555555556 * (((char *)v101.__end_cap_.__value_ - (char *)v101.__begin_) >> 3) > v70)
              v70 = 0x5555555555555556 * (((char *)v101.__end_cap_.__value_ - (char *)v101.__begin_) >> 3);
            if (0xAAAAAAAAAAAAAAABLL * (((char *)v101.__end_cap_.__value_ - (char *)v101.__begin_) >> 3) >= 0x555555555555555)
              v71 = 0xAAAAAAAAAAAAAAALL;
            else
              v71 = v70;
            __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v101.__end_cap_;
            if (v71)
              v72 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v101.__end_cap_, v71);
            else
              v72 = 0;
            v73 = v72 + v69;
            __v.__first_ = v72;
            __v.__begin_ = v73;
            __v.__end_cap_.__value_ = &v72[v71];
            v74 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
            v73->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
            *(_OWORD *)&v73->__r_.__value_.__l.__data_ = v74;
            memset(&__p, 0, sizeof(__p));
            __v.__end_ = v73 + 1;
            std::vector<std::string>::__swap_out_circular_buffer(&v101, &__v);
            v75 = v101.__end_;
            std::__split_buffer<std::string>::~__split_buffer(&__v);
            v101.__end_ = v75;
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
          }
          else
          {
            v68 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
            v101.__end_->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
            *(_OWORD *)&end->__r_.__value_.__l.__data_ = v68;
            v101.__end_ = end + 1;
          }
        }
        if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v97.__r_.__value_.__l.__data_);
        if (++v41 == v43)
        {
          if (v101.__begin_ == v101.__end_)
            goto LABEL_119;
          MinLogLevel = (sentencepiece::logging *)sentencepiece::logging::GetMinLogLevel(v63);
          if ((int)MinLogLevel <= 0)
          {
            LOBYTE(__v.__first_) = 0;
            v77 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"sentencepiece_processor.cc", 26);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, (uint64_t)"(", 1);
            v78 = (_QWORD *)std::ostream::operator<<();
            v79 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v78, (uint64_t)") ", 2);
            v80 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v79, (uint64_t)"LOG(", 4);
            v81 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v80, (uint64_t)"INFO", 4);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v81, (uint64_t)") ", 2);
            v82 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v82, (uint64_t)"/", 1);
            v83 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v83, (uint64_t)" samples did not pass the test.", 31);
            sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&__v);
          }
          begin = v101.__begin_;
          v85 = v101.__end_;
          if (v101.__begin_ != v101.__end_)
          {
            v86 = (_QWORD *)MEMORY[0x24BEDB310];
            do
            {
              MinLogLevel = (sentencepiece::logging *)sentencepiece::logging::GetMinLogLevel(MinLogLevel);
              if ((int)MinLogLevel <= 0)
              {
                LOBYTE(__v.__first_) = 0;
                v87 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v86, (uint64_t)"sentencepiece_processor.cc", 26);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v87, (uint64_t)"(", 1);
                v88 = (_QWORD *)std::ostream::operator<<();
                v89 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v88, (uint64_t)") ", 2);
                v90 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v89, (uint64_t)"LOG(", 4);
                v91 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v90, (uint64_t)"INFO", 4);
                v92 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v91, (uint64_t)") ", 2);
                v93 = SHIBYTE(begin->__r_.__value_.__r.__words[2]);
                if (v93 >= 0)
                  v94 = (uint64_t)begin;
                else
                  v94 = begin->__r_.__value_.__r.__words[0];
                if (v93 >= 0)
                  v95 = HIBYTE(begin->__r_.__value_.__r.__words[2]);
                else
                  v95 = begin->__r_.__value_.__l.__size_;
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v92, v94, v95);
                sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&__v);
              }
              ++begin;
            }
            while (begin != v85);
          }
          sentencepiece::util::Status::Status(a3, 13, "Self-test failures. See LOG(INFO).", 34);
          break;
        }
      }
    }
    else
    {
LABEL_119:
      sentencepiece::util::Status::Status(a3);
    }
    __v.__first_ = (std::__split_buffer<std::string>::pointer)&v98;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
    __v.__first_ = (std::__split_buffer<std::string>::pointer)&v101;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
  }
}

void sub_245C567A0(_Unwind_Exception *a1, void *__p, uint64_t a3, int a4, __int16 a5, char a6, char a7, void *a8, uint64_t a9, int __pa, __int16 __p_4, char __p_6, char __p_7, uint64_t a14, uint64_t a15, void *a16, char a17, uint64_t a18, uint64_t a19, std::__split_buffer<std::string> *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  google::protobuf::internal::LogMessage::~LogMessage((void **)&a25);
  _Unwind_Resume(a1);
}

uint64_t absl::make_unique<sentencepiece::normalizer::Normalizer,sentencepiece::NormalizerSpec const&,sentencepiece::TrainerSpec const&>@<X0>(const sentencepiece::NormalizerSpec *a1@<X0>, const sentencepiece::TrainerSpec *a2@<X1>, sentencepiece::normalizer::Normalizer **a3@<X8>)
{
  sentencepiece::normalizer::Normalizer *v6;
  uint64_t result;

  v6 = (sentencepiece::normalizer::Normalizer *)operator new();
  result = sentencepiece::normalizer::Normalizer::Normalizer(v6, a1, a2);
  *a3 = v6;
  return result;
}

void sub_245C568B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x249544F58](v1, 0x10F1C40C7D4252BLL);
  _Unwind_Resume(a1);
}

uint64_t absl::make_unique<sentencepiece::normalizer::Normalizer,sentencepiece::NormalizerSpec const&>@<X0>(const sentencepiece::NormalizerSpec *a1@<X0>, sentencepiece::normalizer::Normalizer **a2@<X8>)
{
  sentencepiece::normalizer::Normalizer *v4;
  uint64_t result;

  v4 = (sentencepiece::normalizer::Normalizer *)operator new();
  result = sentencepiece::normalizer::Normalizer::Normalizer(v4, a1);
  *a2 = v4;
  return result;
}

void sub_245C56928(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x249544F58](v1, 0x10F1C40C7D4252BLL);
  _Unwind_Resume(a1);
}

void absl::StrCat<char [2],std::string,char [2],std::string>(void *__src@<X0>, size_t __len@<X1>, char *a3@<X2>, void **a4@<X3>, char *a5@<X4>, void **a6@<X5>, std::string *a7@<X8>)
{
  size_t v12;
  std::string *p_p;
  std::string::size_type size;
  std::string *v15;
  std::string __p;
  std::string __dst;

  std::string::basic_string[abi:ne180100](&__dst, __src, __len);
  v12 = strlen(a3);
  absl::StrCat<std::string,char [2],std::string>(a3, v12, a4, a5, a6, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v15 = std::string::append(&__dst, (const std::string::value_type *)p_p, size);
  *a7 = *v15;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
}

void sub_245C56A20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void sentencepiece::SentencePieceProcessor::SetEncodeExtraOptions(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, sentencepiece::util::Status *a4@<X8>)
{
  sentencepiece::SentencePieceProcessor::ParseExtraOptions((sentencepiece::ModelInterface **)a1, a2, a3, (char **)(a1 + 40), a4);
}

void sentencepiece::SentencePieceProcessor::ParseExtraOptions(sentencepiece::ModelInterface **a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, char **a4@<X3>, sentencepiece::util::Status *a5@<X8>)
{
  unsigned __int8 v10;
  uint64_t *v11;
  uint64_t *v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  int v25;
  int v26;
  const char *v27;
  size_t v28;
  uint64_t v29;
  const char *v30;
  size_t v31;
  uint64_t v32;
  const char *v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  void *v37;
  uint64_t *v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  void *__p[2];
  __int128 v45;
  uint64_t v46;
  _QWORD v47[21];

  v47[19] = *MEMORY[0x24BDAC8D0];
  a4[1] = *a4;
  if (a3)
  {
    (*((void (**)(sentencepiece::ModelInterface **))*a1 + 11))(a1);
    if (!*(_QWORD *)a5)
    {
      sentencepiece::util::Status::~Status(a5);
      if ((v10 & 1) == 0
      {
        v43 = xmmword_2516E5210;
        *(_OWORD *)__p = unk_2516E5220;
        v45 = xmmword_2516E5230;
        v46 = 3;
        v39 = xmmword_2516E51D0;
        v40 = unk_2516E51E0;
        v41 = xmmword_2516E51F0;
        v42 = *(_OWORD *)&off_2516E5200;
        std::map<std::string_view,sentencepiece::SentencePieceProcessor::ExtraOption>::map[abi:ne180100]((uint64_t)&sentencepiece::SentencePieceProcessor::ParseExtraOptions(std::string_view,std::vector<sentencepiece::SentencePieceProcessor::ExtraOption> *)const::extra_option_map, (uint64_t)&v39, 5);
        __cxa_atexit((void (*)(void *))std::map<std::string_view,sentencepiece::SentencePieceProcessor::ExtraOption>::~map[abi:ne180100], &sentencepiece::SentencePieceProcessor::ParseExtraOptions(std::string_view,std::vector<sentencepiece::SentencePieceProcessor::ExtraOption> *)const::extra_option_map, &dword_245BFA000);
      }
      absl::internal::Splitter::Splitter((char **)&v37, a2, a3, ":", 1, 0);
      v11 = (uint64_t *)v37;
      v12 = v38;
      if (v37 == v38)
      {
LABEL_29:
        if (v11)
        {
          v38 = v11;
          operator delete(v11);
        }
        sentencepiece::util::Status::Status(a5);
      }
      else
      {
        while (1)
        {
          v13 = std::__tree<std::string_view>::find<std::string_view>((uint64_t)&sentencepiece::SentencePieceProcessor::ParseExtraOptions(std::string_view,std::vector<sentencepiece::SentencePieceProcessor::ExtraOption> *)const::extra_option_map, (uint64_t)v11);
          v14 = v13;
          if (v13 == (_QWORD *)&unk_2575180C8)
            break;
          v16 = a4[1];
          v15 = (unint64_t)a4[2];
          if ((unint64_t)v16 >= v15)
          {
            v18 = *a4;
            v19 = (v16 - *a4) >> 2;
            v20 = v19 + 1;
            if ((unint64_t)(v19 + 1) >> 62)
              std::vector<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>>::__throw_length_error[abi:ne180100]();
            v21 = v15 - (_QWORD)v18;
            if (v21 >> 1 > v20)
              v20 = v21 >> 1;
            if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFFCLL)
              v22 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v22 = v20;
            if (v22)
            {
              v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)(a4 + 2), v22);
              v18 = *a4;
              v16 = a4[1];
            }
            else
            {
              v23 = 0;
            }
            v24 = &v23[4 * v19];
            *(_DWORD *)v24 = *((_DWORD *)v14 + 12);
            v17 = v24 + 4;
            while (v16 != v18)
            {
              v25 = *((_DWORD *)v16 - 1);
              v16 -= 4;
              *((_DWORD *)v24 - 1) = v25;
              v24 -= 4;
            }
            *a4 = v24;
            a4[1] = v17;
            a4[2] = &v23[4 * v22];
            if (v18)
              operator delete(v18);
          }
          else
          {
            *(_DWORD *)v16 = *((_DWORD *)v13 + 12);
            v17 = v16 + 4;
          }
          a4[1] = v17;
          v26 = *((_DWORD *)v14 + 12);
          if (v26 == 1)
          {
            v27 = sentencepiece::ModelInterface::bos_piece(a1[1]);
            v28 = strlen(v27);
            v29 = (*((uint64_t (**)(sentencepiece::ModelInterface **, const char *, size_t))*a1 + 63))(a1, v27, v28);
            if (((*((uint64_t (**)(sentencepiece::ModelInterface **, uint64_t))*a1 + 66))(a1, v29) & 1) != 0)
            {
              LODWORD(v39) = 13;
              std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v39 + 8);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)&v39 + 1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)&v39 + 1, (uint64_t)"(", 1);
              std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)&v39 + 1, (uint64_t)") [", 3);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)&v39 + 1, (uint64_t)"!IsUnknown(PieceToId(absl::string_view(model_->bos_piece().data())))", 68);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)&v39 + 1, (uint64_t)"] ", 2);
              v33 = sentencepiece::ModelInterface::bos_piece(a1[1]);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)&v39 + 1, (uint64_t)v33, v34);
              sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&v39, (uint64_t)a5);
              goto LABEL_38;
            }
            v26 = *((_DWORD *)v14 + 12);
          }
          if (v26 == 2)
          {
            v30 = sentencepiece::ModelInterface::eos_piece(a1[1]);
            v31 = strlen(v30);
            v32 = (*((uint64_t (**)(sentencepiece::ModelInterface **, const char *, size_t))*a1 + 63))(a1, v30, v31);
            if (((*((uint64_t (**)(sentencepiece::ModelInterface **, uint64_t))*a1 + 66))(a1, v32) & 1) != 0)
            {
              LODWORD(v39) = 13;
              std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v39 + 8);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)&v39 + 1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)&v39 + 1, (uint64_t)"(", 1);
              std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)&v39 + 1, (uint64_t)") [", 3);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)&v39 + 1, (uint64_t)"!IsUnknown(PieceToId(absl::string_view(model_->eos_piece().data())))", 68);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)&v39 + 1, (uint64_t)"] ", 2);
              v35 = sentencepiece::ModelInterface::eos_piece(a1[1]);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)&v39 + 1, (uint64_t)v35, v36);
              sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&v39, (uint64_t)a5);
LABEL_38:
              *((_QWORD *)&v39 + 1) = *MEMORY[0x24BEDB800];
              *(_QWORD *)((char *)&v39 + *(_QWORD *)(*((_QWORD *)&v39 + 1) - 24) + 8) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
              *(_QWORD *)&v40 = MEMORY[0x24BEDB848] + 16;
              if (SBYTE7(v45) < 0)
                operator delete(__p[0]);
              goto LABEL_40;
            }
          }
          v11 += 2;
          if (v11 == v12)
          {
            v11 = (uint64_t *)v37;
            goto LABEL_29;
          }
        }
        LODWORD(v39) = 13;
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v39 + 8);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)&v39 + 1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)&v39 + 1, (uint64_t)"(", 1);
        std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)&v39 + 1, (uint64_t)") [", 3);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)&v39 + 1, (uint64_t)"it != extra_option_map.end()", 28);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)&v39 + 1, (uint64_t)"] ", 2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)&v39 + 1, (uint64_t)"option \"", 8);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)&v39 + 1, *v11, v11[1]);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)&v39 + 1, (uint64_t)"\" is not available.", 19);
        sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&v39, (uint64_t)a5);
        *((_QWORD *)&v39 + 1) = *MEMORY[0x24BEDB800];
        *(_QWORD *)((char *)&v39 + *(_QWORD *)(*((_QWORD *)&v39 + 1) - 24) + 8) = *(_QWORD *)(MEMORY[0x24BEDB800]
                                                                                              + 24);
        *(_QWORD *)&v40 = MEMORY[0x24BEDB848] + 16;
        if (SBYTE7(v45) < 0)
          operator delete(__p[0]);
LABEL_40:
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        MEMORY[0x249544EE0](v47);
        if (v37)
        {
          v38 = (uint64_t *)v37;
          operator delete(v37);
        }
      }
    }
  }
  else
  {
    sentencepiece::util::Status::Status(a5);
  }
}

void sub_245C57100(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  _Unwind_Resume(a1);
}

void sentencepiece::SentencePieceProcessor::SetDecodeExtraOptions(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, sentencepiece::util::Status *a4@<X8>)
{
  sentencepiece::SentencePieceProcessor::ParseExtraOptions((sentencepiece::ModelInterface **)a1, a2, a3, (char **)(a1 + 64), a4);
}

_QWORD *sentencepiece::SentencePieceProcessor::status@<X0>(sentencepiece::SentencePieceProcessor *this@<X0>, sentencepiece::util::Status *a2@<X8>)
{
  uint64_t v4;
  _QWORD *result;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  unsigned int v9;
  _QWORD v10[11];
  char v11;
  uint64_t v12;

  v4 = *((_QWORD *)this + 1);
  if (v4)
  {
    if (*((_QWORD *)this + 2))
    {
      result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
      if (!*(_QWORD *)a2)
      {
        sentencepiece::util::Status::~Status(a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 24))(*((_QWORD *)this + 2));
        if (!*(_QWORD *)a2)
        {
          sentencepiece::util::Status::~Status(a2);
          return sentencepiece::util::Status::Status(v6);
        }
      }
      return result;
    }
    v9 = 13;
    v8 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"(", 1);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)") [", 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"normalizer_", 11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"] ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Normalizer is not initialized.", 30);
    sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status(&v9, (uint64_t)a2);
  }
  else
  {
    v9 = 13;
    v7 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"(", 1);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)") [", 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"model_", 6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"] ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Model is not initialized.", 25);
    sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status(&v9, (uint64_t)a2);
  }
  v10[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v10 + *(_QWORD *)(v10[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v10[1] = MEMORY[0x24BEDB848] + 16;
  if (v11 < 0)
    operator delete((void *)v10[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return (_QWORD *)MEMORY[0x249544EE0](&v12);
}

void sub_245C573DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sentencepiece::util::StatusBuilder::~StatusBuilder((sentencepiece::util::StatusBuilder *)&a9);
  _Unwind_Resume(a1);
}

void sentencepiece::SentencePieceProcessor::SetVocabulary(_QWORD *a1@<X0>, _OWORD **a2@<X1>, sentencepiece::util::Status *a3@<X8>)
{
  uint64_t v6;
  _QWORD *v7;
  _DWORD *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned __int8 *v17;
  int v18;
  _QWORD *v19;
  _QWORD v20[2];
  unsigned int v21;
  _QWORD *v22[11];
  char v23;
  uint64_t v24;

  (*(void (**)(sentencepiece::util::Status *__return_ptr))(*a1 + 88))(a3);
  if (*(_QWORD *)a3)
    return;
  sentencepiece::util::Status::~Status(a3);
  v6 = a1[4];
  if (!v6 || *(_UNKNOWN **)v6 != &unk_2516E2510)
  {
    v21 = 13;
    v7 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v22);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"(", 1);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)") [", 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"(model_proto = dynamic_cast<ModelProto *>(model_proto_.get()))", 62);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"] ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"SetVocabulary is not supported when mmap-based model is loaded.", 63);
    sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status(&v21, (uint64_t)a3);
LABEL_5:
    v22[0] = *(_QWORD **)MEMORY[0x24BEDB800];
    *(_QWORD **)((char *)v22 + *(v22[0] - 3)) = *(_QWORD **)(MEMORY[0x24BEDB800] + 24);
    v22[1] = (_QWORD *)(MEMORY[0x24BEDB848] + 16);
    if (v23 < 0)
      operator delete(v22[9]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x249544EE0](&v24);
    return;
  }
  v8 = &sentencepiece::_TrainerSpec_default_instance_;
  if (*(_QWORD *)(v6 + 64))
    v8 = *(_DWORD **)(v6 + 64);
  if ((v8[68] - 1) >= 2)
  {
    v21 = 13;
    v19 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v22);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"(", 1);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)") [", 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"type == TrainerSpec::UNIGRAM || type == TrainerSpec::BPE", 56);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"] ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Vocabulary constraint is only enabled in subword units.", 55);
    sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status(&v21, (uint64_t)a3);
    goto LABEL_5;
  }
  std::set<std::string_view>::set[abi:ne180100]<std::__wrap_iter<std::string_view const*>>((uint64_t)&v21, *a2, a2[1]);
  if (*(int *)(v6 + 48) >= 1)
  {
    v9 = 0;
    do
    {
      v10 = google::protobuf::internal::RepeatedPtrFieldBase::Mutable<google::protobuf::RepeatedPtrField<sentencepiece::ModelProto_SentencePiece>::TypeHandler>(v6 + 40, v9);
      v11 = v10;
      if ((*(_DWORD *)(v10 + 60) - 2) >= 3)
      {
        v12 = *(_QWORD *)(v10 + 48) & 0xFFFFFFFFFFFFFFFELL;
        if (*(char *)(v12 + 23) < 0)
        {
          v14 = *(_QWORD *)v12;
          v13 = *(_QWORD *)(v12 + 8);
        }
        else
        {
          v13 = *(unsigned __int8 *)(v12 + 23);
          v14 = *(_QWORD *)(v10 + 48) & 0xFFFFFFFFFFFFFFFELL;
        }
        v20[0] = v14;
        v20[1] = v13;
        if (v22 == std::__tree<std::string_view>::find<std::string_view>((uint64_t)&v21, (uint64_t)v20)
          && ((v15 = *(_QWORD *)(v11 + 48) & 0xFFFFFFFFFFFFFFFELL, *(char *)(v15 + 23) < 0)
            ? (unsigned __int8 *)(v17 = *(unsigned __int8 **)v15, v16 = *(_QWORD *)(v15 + 8))
            : (v16 = *(unsigned __int8 *)(v15 + 23),
               v17 = (unsigned __int8 *)(*(_QWORD *)(v11 + 48) & 0xFFFFFFFFFFFFFFFELL)),
              v16 != asc_245CA23B3[(unint64_t)*v17 >> 4]))
        {
          if (!sentencepiece::ModelProto_SentencePiece_Type_IsValid((sentencepiece *)5))
LABEL_32:
            __assert_rtn("_internal_set_type", "sentencepiece_model.pb.h", 4686, "::sentencepiece::ModelProto_SentencePiece_Type_IsValid(value)");
          v18 = 5;
        }
        else
        {
          if (!sentencepiece::ModelProto_SentencePiece_Type_IsValid((sentencepiece *)1))
            goto LABEL_32;
          v18 = 1;
        }
        *(_DWORD *)(v11 + 40) |= 4u;
        *(_DWORD *)(v11 + 60) = v18;
      }
      ++v9;
    }
    while (v9 < *(_DWORD *)(v6 + 48));
  }
  sentencepiece::util::Status::Status(a3);
  std::__tree<std::__value_type<std::string_view,int>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,int>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,int>>>::destroy((uint64_t)&v21, v22[0]);
}

void sub_245C5779C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, _QWORD *a12)
{
  std::__tree<std::__value_type<std::string_view,int>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,int>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,int>>>::destroy((uint64_t)&a11, a12);
  _Unwind_Resume(a1);
}

_QWORD *sentencepiece::SentencePieceProcessor::ResetVocabulary@<X0>(sentencepiece::SentencePieceProcessor *this@<X0>, sentencepiece::util::Status *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  _QWORD v13[11];
  char v14;
  uint64_t v15;

  result = (*(_QWORD *(**)(sentencepiece::util::Status *__return_ptr))(*(_QWORD *)this + 88))(a2);
  if (!*(_QWORD *)a2)
  {
    sentencepiece::util::Status::~Status(a2);
    v5 = *((_QWORD *)this + 4);
    if (v5 && *(_UNKNOWN **)v5 == &unk_2516E2510)
    {
      v7 = *(_QWORD *)(v5 + 56);
      if (v7)
        v8 = (uint64_t *)(v7 + 8);
      else
        v8 = 0;
      v9 = *(int *)(v5 + 48);
      if ((_DWORD)v9)
      {
        v10 = 8 * v9;
        do
        {
          v11 = *v8;
          if (*(_DWORD *)(*v8 + 60) == 5)
          {
            if (!sentencepiece::ModelProto_SentencePiece_Type_IsValid((sentencepiece *)1))
              sentencepiece::SentencePieceProcessor::ResetVocabulary();
            *(_DWORD *)(v11 + 40) |= 4u;
            *(_DWORD *)(v11 + 60) = 1;
          }
          ++v8;
          v10 -= 8;
        }
        while (v10);
      }
      return sentencepiece::util::Status::Status(a2);
    }
    else
    {
      v12 = 13;
      v6 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v13);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"(", 1);
      std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)") [", 3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"(model_proto = dynamic_cast<ModelProto *>(model_proto_.get()))", 62);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"] ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"ResetVocabulary is not supported when mmap-based model is loaded.", 65);
      sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status(&v12, (uint64_t)a2);
      v13[0] = *MEMORY[0x24BEDB800];
      *(_QWORD *)((char *)v13 + *(_QWORD *)(v13[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
      v13[1] = MEMORY[0x24BEDB848] + 16;
      if (v14 < 0)
        operator delete((void *)v13[9]);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      return (_QWORD *)MEMORY[0x249544EE0](&v15);
    }
  }
  return result;
}

void sub_245C579D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sentencepiece::util::StatusBuilder::~StatusBuilder((sentencepiece::util::StatusBuilder *)&a9);
  _Unwind_Resume(a1);
}

uint64_t sentencepiece::SentencePieceProcessor::LoadVocabulary@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, sentencepiece::util::Status *a5@<X8>)
{
  void **v8;
  unint64_t v9;
  std::vector<std::string>::pointer end;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  std::vector<std::string>::pointer v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  const char *data;
  uint64_t size;
  std::string *v20;
  __int128 v21;
  std::string *v22;
  uint64_t result;
  void *__p;
  _QWORD v25[11];
  char v26;
  uint64_t v27;
  std::vector<std::string> v28;
  uint64_t v29;
  std::string *v30;
  unint64_t v31;
  void **v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36[4];

  sentencepiece::filesystem::NewReadableFile(a2, a3, 0, &v35);
  (*(void (**)(uint64_t))(*(_QWORD *)v35 + 16))(v35);
  if (!*(_QWORD *)a5)
  {
    sentencepiece::util::Status::~Status(a5);
    v32 = 0;
    v33 = 0;
    v34 = 0;
    v29 = 0;
    v30 = 0;
    v31 = 0;
    while ((*(unsigned int (**)(uint64_t, void ***))(*(_QWORD *)v35 + 24))(v35, &v32))
    {
      if (v34 >= 0)
        v8 = (void **)&v32;
      else
        v8 = v32;
      if (v34 >= 0)
        v9 = HIBYTE(v34);
      else
        v9 = v33;
      absl::internal::Splitter::Splitter((char **)&__p, (uint64_t)v8, v9, "\t", 1, 0);
      std::vector<std::string>::vector(&v28, (uint64_t)(v25[0] - (_QWORD)__p) >> 4);
      end = v28.__end_;
      if (v28.__end_ == v28.__begin_)
      {
        v14 = v28.__end_;
      }
      else
      {
        v11 = 0;
        v12 = 0;
        v13 = 0;
        end = v28.__begin_;
        do
        {
          MEMORY[0x249544CE8](&end[v11], *(_QWORD *)((char *)__p + v12), *(_QWORD *)((char *)__p + v12 + 8));
          ++v13;
          end = v28.__begin_;
          v14 = v28.__end_;
          ++v11;
          v12 += 16;
        }
        while (v13 < 0xAAAAAAAAAAAAAAABLL * (((char *)v28.__end_ - (char *)v28.__begin_) >> 3));
      }
      if (__p)
      {
        v25[0] = __p;
        operator delete(__p);
        end = v28.__begin_;
        v14 = v28.__end_;
      }
      v15 = (char *)v14 - (char *)end;
      if (!v15)
      {
        LODWORD(__p) = 13;
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v25);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"(", 1);
        std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)") [", 3);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"(v.size()) >= (1)", 17);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"] ", 2);
        sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&__p, (uint64_t)a5);
LABEL_42:
        v25[0] = *MEMORY[0x24BEDB800];
        *(_QWORD *)((char *)v25 + *(_QWORD *)(v25[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
        v25[1] = MEMORY[0x24BEDB848] + 16;
        if (v26 < 0)
          operator delete((void *)v25[9]);
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        MEMORY[0x249544EE0](&v27);
        __p = &v28;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
        goto LABEL_45;
      }
      if (SHIBYTE(end->__r_.__value_.__r.__words[2]) < 0)
      {
        if (!end->__r_.__value_.__l.__size_)
        {
LABEL_40:
          LODWORD(__p) = 13;
          std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v25);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"(", 1);
          std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)") [", 3);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"!v[0].empty()", 13);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"] ", 2);
          sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&__p, (uint64_t)a5);
          goto LABEL_42;
        }
      }
      else if (!*((_BYTE *)&end->__r_.__value_.__s + 23))
      {
        goto LABEL_40;
      }
      v16 = 0xAAAAAAAAAAAAAAABLL * (v15 >> 3);
      v17 = 1;
      v36[0] = 1;
      if (v16 >= 2)
      {
        if (SHIBYTE(end[1].__r_.__value_.__r.__words[2]) < 0)
        {
          data = end[1].__r_.__value_.__l.__data_;
          size = end[1].__r_.__value_.__l.__size_;
        }
        else
        {
          data = (const char *)&end[1];
          size = HIBYTE(end[1].__r_.__value_.__r.__words[2]);
        }
        if (!absl::SimpleAtoi<int>(data, size, (uint64_t)v36))
        {
          LODWORD(__p) = 13;
          std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v25);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"(", 1);
          std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)") [", 3);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"absl::SimpleAtoi(v[1], &freq)", 29);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"] ", 2);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Could not parse the frequency", 29);
          sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&__p, (uint64_t)a5);
          goto LABEL_42;
        }
        v17 = v36[0];
      }
      if (v17 >= a4)
      {
        v20 = v30;
        if ((unint64_t)v30 >= v31)
        {
          v22 = (std::string *)std::vector<std::string>::__emplace_back_slow_path<std::string const&>(&v29, (__int128 *)v28.__begin_);
        }
        else
        {
          if (SHIBYTE(v28.__begin_->__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external(v30, v28.__begin_->__r_.__value_.__l.__data_, v28.__begin_->__r_.__value_.__l.__size_);
          }
          else
          {
            v21 = *(_OWORD *)&v28.__begin_->__r_.__value_.__l.__data_;
            v30->__r_.__value_.__r.__words[2] = v28.__begin_->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v20->__r_.__value_.__l.__data_ = v21;
          }
          v22 = v20 + 1;
        }
        v30 = v22;
      }
      __p = &v28;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    }
    (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 112))(a1, &__p);
    if (__p)
    {
      v25[0] = __p;
      operator delete(__p);
    }
LABEL_45:
    __p = &v29;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    if (SHIBYTE(v34) < 0)
      operator delete(v32);
  }
  result = v35;
  v35 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_245C57EF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  uint64_t v10;
  uint64_t v12;

  __p = (void *)(v10 - 176);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p = (void *)(v10 - 152);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (*(char *)(v10 - 105) < 0)
    operator delete(*(void **)(v10 - 128));
  v12 = *(_QWORD *)(v10 - 104);
  *(_QWORD *)(v10 - 104) = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  _Unwind_Resume(a1);
}

BOOL absl::SimpleAtoi<int>(const char *a1, uint64_t a2, uint64_t a3)
{
  size_t v5;
  _QWORD *v6;
  _BOOL8 v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD v11[2];
  _QWORD v12[11];
  char v13;
  uint64_t v14;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v11);
  v5 = strlen(a1);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)a1, v5);
  if ((*((_BYTE *)v6 + *(_QWORD *)(*v6 - 24) + 32) & 5) != 0)
  {
    v7 = 0;
  }
  else
  {
    v8 = (_QWORD *)MEMORY[0x249544D90](v11, a3);
    v7 = (*((_BYTE *)v8 + *(_QWORD *)(*v8 - 24) + 32) & 5) == 0;
  }
  v11[0] = *MEMORY[0x24BEDB7F0];
  v9 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v11 + *(_QWORD *)(v11[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v12[0] = v9;
  v12[1] = MEMORY[0x24BEDB848] + 16;
  if (v13 < 0)
    operator delete((void *)v12[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x249544EE0](&v14);
  return v7;
}

void sub_245C580DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sentencepiece::`anonymous namespace'::ToPieceArray@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;

  result = std::vector<std::string_view>::vector(a2, 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3));
  v4 = *a1;
  if (a1[1] != *a1)
  {
    v5 = 0;
    v6 = 0;
    v7 = 0;
    do
    {
      v8 = (_QWORD *)(v4 + v5);
      LODWORD(v4) = *(char *)(v4 + v5 + 23);
      if ((v4 & 0x80000000) != 0)
      {
        v9 = (_QWORD *)*v8;
        v4 = v8[1];
      }
      else
      {
        v4 = v4;
        v9 = v8;
      }
      v10 = (_QWORD *)(*result + v6);
      *v10 = v9;
      v10[1] = v4;
      ++v7;
      v4 = *a1;
      v6 += 16;
      v5 += 24;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3) > v7);
  }
  return result;
}

void sentencepiece::SentencePieceProcessor::Encode(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, sentencepiece::util::Status *a5@<X8>)
{
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  __int128 *v13;
  _QWORD *v14;
  unsigned int v15;
  _QWORD v16[6];
  int v17;
  uint64_t v18;
  void *__p;
  char v20;
  uint64_t v21;

  (*(void (**)(sentencepiece::util::Status *__return_ptr))(*(_QWORD *)a1 + 88))(a5);
  if (!*(_QWORD *)a5)
  {
    sentencepiece::util::Status::~Status(a5);
    if (a4)
    {
      std::vector<std::string>::__clear[abi:ne180100](a4);
      sentencepiece::SentencePieceText::SentencePieceText((sentencepiece::SentencePieceText *)&v15, 0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, unsigned int *))(*(_QWORD *)a1 + 232))(a1, a2, a3, &v15);
      if (!*(_QWORD *)a5)
      {
        sentencepiece::util::Status::~Status(a5);
        if (v18)
          v10 = v18 + 8;
        else
          v10 = 0;
        if (v17)
        {
          v11 = a4[1];
          v12 = 8 * v17;
          do
          {
            v13 = (__int128 *)(*(_QWORD *)(*(_QWORD *)v10 + 48) & 0xFFFFFFFFFFFFFFFELL);
            if (v11 >= a4[2])
            {
              v11 = std::vector<std::string>::__emplace_back_slow_path<std::string const&>(a4, v13);
            }
            else
            {
              std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)a4, v13);
              v11 += 24;
            }
            a4[1] = v11;
            v10 += 8;
            v12 -= 8;
          }
          while (v12);
        }
        sentencepiece::util::Status::Status(a5);
      }
      sentencepiece::SentencePieceText::~SentencePieceText((sentencepiece::SentencePieceText *)&v15);
    }
    else
    {
      v15 = 13;
      v14 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"(", 1);
      std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)") [", 3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"pieces", 6);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"] ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"output container is null", 24);
      sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status(&v15, (uint64_t)a5);
      v16[0] = *MEMORY[0x24BEDB800];
      *(_QWORD *)((char *)v16 + *(_QWORD *)(v16[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
      v16[1] = MEMORY[0x24BEDB848] + 16;
      if (v20 < 0)
        operator delete(__p);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x249544EE0](&v21);
    }
  }
}

void sub_245C583BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sentencepiece::util::StatusBuilder::~StatusBuilder((sentencepiece::util::StatusBuilder *)&a9);
  _Unwind_Resume(a1);
}

void sentencepiece::SentencePieceProcessor::Encode(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char **a4@<X3>, sentencepiece::util::Status *a5@<X8>)
{
  uint64_t v10;
  _QWORD *v11;
  char *v12;
  uint64_t v13;
  int v14;
  char *v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  int v23;
  _QWORD *v24;
  unsigned int v25;
  _QWORD v26[6];
  int v27;
  uint64_t v28;
  void *__p;
  char v30;
  uint64_t v31;

  (*(void (**)(sentencepiece::util::Status *__return_ptr))(*(_QWORD *)a1 + 88))(a5);
  if (!*(_QWORD *)a5)
  {
    sentencepiece::util::Status::~Status(a5);
    if (a4)
    {
      a4[1] = *a4;
      sentencepiece::SentencePieceText::SentencePieceText((sentencepiece::SentencePieceText *)&v25, 0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, unsigned int *))(*(_QWORD *)a1 + 232))(a1, a2, a3, &v25);
      if (!*(_QWORD *)a5)
      {
        sentencepiece::util::Status::~Status(a5);
        if (v28)
          v10 = v28 + 8;
        else
          v10 = 0;
        if (v27)
        {
          v11 = a4 + 2;
          v12 = a4[1];
          v13 = v10 + 8 * v27;
          do
          {
            v14 = *(_DWORD *)(*(_QWORD *)v10 + 64);
            if ((unint64_t)v12 >= *v11)
            {
              v16 = *a4;
              v17 = (v12 - *a4) >> 2;
              v18 = v17 + 1;
              if ((unint64_t)(v17 + 1) >> 62)
                std::vector<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>>::__throw_length_error[abi:ne180100]();
              v19 = *v11 - (_QWORD)v16;
              if (v19 >> 1 > v18)
                v18 = v19 >> 1;
              if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFFCLL)
                v20 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v20 = v18;
              if (v20)
              {
                v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)(a4 + 2), v20);
                v16 = *a4;
                v12 = a4[1];
              }
              else
              {
                v21 = 0;
              }
              v22 = &v21[4 * v17];
              *(_DWORD *)v22 = v14;
              v15 = v22 + 4;
              while (v12 != v16)
              {
                v23 = *((_DWORD *)v12 - 1);
                v12 -= 4;
                *((_DWORD *)v22 - 1) = v23;
                v22 -= 4;
              }
              *a4 = v22;
              a4[1] = v15;
              a4[2] = &v21[4 * v20];
              if (v16)
                operator delete(v16);
            }
            else
            {
              *(_DWORD *)v12 = v14;
              v15 = v12 + 4;
            }
            a4[1] = v15;
            v10 += 8;
            v12 = v15;
          }
          while (v10 != v13);
        }
        sentencepiece::util::Status::Status(a5);
      }
      sentencepiece::SentencePieceText::~SentencePieceText((sentencepiece::SentencePieceText *)&v25);
    }
    else
    {
      v25 = 13;
      v24 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v26);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"(", 1);
      std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)") [", 3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"ids", 3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"] ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"output container is null", 24);
      sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status(&v25, (uint64_t)a5);
      v26[0] = *MEMORY[0x24BEDB800];
      *(_QWORD *)((char *)v26 + *(_QWORD *)(v26[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
      v26[1] = MEMORY[0x24BEDB848] + 16;
      if (v30 < 0)
        operator delete(__p);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x249544EE0](&v31);
    }
  }
}

void sub_245C586AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sentencepiece::util::StatusBuilder::~StatusBuilder((sentencepiece::util::StatusBuilder *)&a9);
  _Unwind_Resume(a1);
}

void sentencepiece::SentencePieceProcessor::Decode(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  void *__p[3];

  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)a1 + 160))(a1, __p, a3);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

{
  void *__p[3];

  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)a1 + 272))(a1, __p, a3);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_245C58748(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sentencepiece::SentencePieceProcessor::Decode(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, sentencepiece::util::Status *a4@<X8>)
{
  _QWORD *v8;
  unsigned int v9;
  _QWORD v10[11];
  char v11;
  uint64_t v12;

  (*(void (**)(sentencepiece::util::Status *__return_ptr))(*(_QWORD *)a1 + 88))(a4);
  if (!*(_QWORD *)a4)
  {
    sentencepiece::util::Status::~Status(a4);
    if (a3)
    {
      if (*(char *)(a3 + 23) < 0)
      {
        **(_BYTE **)a3 = 0;
        *(_QWORD *)(a3 + 8) = 0;
      }
      else
      {
        *(_BYTE *)a3 = 0;
        *(_BYTE *)(a3 + 23) = 0;
      }
      sentencepiece::SentencePieceText::SentencePieceText((sentencepiece::SentencePieceText *)&v9, 0);
      (*(void (**)(uint64_t, uint64_t, unsigned int *))(*(_QWORD *)a1 + 272))(a1, a2, &v9);
      if (!*(_QWORD *)a4)
      {
        sentencepiece::util::Status::~Status(a4);
        std::string::operator=((std::string *)a3, (const std::string *)(v10[8] & 0xFFFFFFFFFFFFFFFELL));
        sentencepiece::util::Status::Status(a4);
      }
      sentencepiece::SentencePieceText::~SentencePieceText((sentencepiece::SentencePieceText *)&v9);
    }
    else
    {
      v9 = 13;
      v8 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v10);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"(", 1);
      std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)") [", 3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"detokenized", 11);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"] ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"output container is null", 24);
      sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status(&v9, (uint64_t)a4);
      v10[0] = *MEMORY[0x24BEDB800];
      *(_QWORD *)((char *)v10 + *(_QWORD *)(v10[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
      v10[1] = MEMORY[0x24BEDB848] + 16;
      if (v11 < 0)
        operator delete((void *)v10[9]);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x249544EE0](&v12);
    }
  }
}

{
  _QWORD *v8;
  unsigned int v9;
  _QWORD v10[11];
  char v11;
  uint64_t v12;

  (*(void (**)(sentencepiece::util::Status *__return_ptr))(*(_QWORD *)a1 + 88))(a4);
  if (!*(_QWORD *)a4)
  {
    sentencepiece::util::Status::~Status(a4);
    if (a3)
    {
      if (*(char *)(a3 + 23) < 0)
      {
        **(_BYTE **)a3 = 0;
        *(_QWORD *)(a3 + 8) = 0;
      }
      else
      {
        *(_BYTE *)a3 = 0;
        *(_BYTE *)(a3 + 23) = 0;
      }
      sentencepiece::SentencePieceText::SentencePieceText((sentencepiece::SentencePieceText *)&v9, 0);
      (*(void (**)(uint64_t, uint64_t, unsigned int *))(*(_QWORD *)a1 + 280))(a1, a2, &v9);
      if (!*(_QWORD *)a4)
      {
        sentencepiece::util::Status::~Status(a4);
        std::string::operator=((std::string *)a3, (const std::string *)(v10[8] & 0xFFFFFFFFFFFFFFFELL));
        sentencepiece::util::Status::Status(a4);
      }
      sentencepiece::SentencePieceText::~SentencePieceText((sentencepiece::SentencePieceText *)&v9);
    }
    else
    {
      v9 = 13;
      v8 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v10);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"(", 1);
      std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)") [", 3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"detokenized", 11);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"] ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"output container is null", 24);
      sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status(&v9, (uint64_t)a4);
      v10[0] = *MEMORY[0x24BEDB800];
      *(_QWORD *)((char *)v10 + *(_QWORD *)(v10[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
      v10[1] = MEMORY[0x24BEDB848] + 16;
      if (v11 < 0)
        operator delete((void *)v10[9]);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x249544EE0](&v12);
    }
  }
}

void sub_245C5894C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sentencepiece::util::StatusBuilder::~StatusBuilder((sentencepiece::util::StatusBuilder *)&a9);
  _Unwind_Resume(a1);
}

void sub_245C58B5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sentencepiece::util::StatusBuilder::~StatusBuilder((sentencepiece::util::StatusBuilder *)&a9);
  _Unwind_Resume(a1);
}

void sentencepiece::SentencePieceProcessor::NBestEncode(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, sentencepiece::util::Status *a6@<X8>)
{
  uint64_t v12;
  void **v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  std::string *v20;
  uint64_t v21;
  unint64_t v22;
  __int128 v23;
  unint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  __int128 *v27;
  std::string *v28;
  unint64_t v29;
  void **v30;
  _QWORD v31[2];
  int v32;
  uint64_t v33;
  void *__p;
  char v35;
  uint64_t v36;
  __int128 **v37;

  (*(void (**)(sentencepiece::util::Status *__return_ptr))(*(_QWORD *)a1 + 88))(a6);
  if (!*(_QWORD *)a6)
  {
    sentencepiece::util::Status::~Status(a6);
    if (a5)
    {
      v12 = *a5;
      v13 = (void **)a5[1];
      while (v13 != (void **)v12)
      {
        v13 -= 3;
        v30 = v13;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v30);
      }
      a5[1] = v12;
      sentencepiece::NBestSentencePieceText::NBestSentencePieceText((sentencepiece::NBestSentencePieceText *)&v30, 0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void ***))(*(_QWORD *)a1 + 240))(a1, a2, a3, a4, &v30);
      if (!*(_QWORD *)a6)
      {
        sentencepiece::util::Status::~Status(a6);
        if (v33)
          v14 = (uint64_t *)(v33 + 8);
        else
          v14 = 0;
        if (v32)
        {
          v15 = &v14[v32];
          do
          {
            v16 = *v14;
            v27 = 0;
            v28 = 0;
            v29 = 0;
            v17 = *(_QWORD *)(v16 + 64);
            if (v17)
              v18 = v17 + 8;
            else
              v18 = 0;
            v19 = *(int *)(v16 + 56);
            if ((_DWORD)v19)
            {
              v20 = 0;
              v21 = 8 * v19;
              do
              {
                v22 = *(_QWORD *)(*(_QWORD *)v18 + 48) & 0xFFFFFFFFFFFFFFFELL;
                if ((unint64_t)v20 >= v29)
                {
                  v20 = (std::string *)std::vector<std::string>::__emplace_back_slow_path<std::string const&>((uint64_t *)&v27, (__int128 *)v22);
                }
                else
                {
                  if (*(char *)(v22 + 23) < 0)
                  {
                    std::string::__init_copy_ctor_external(v20, *(const std::string::value_type **)v22, *(_QWORD *)(v22 + 8));
                  }
                  else
                  {
                    v23 = *(_OWORD *)v22;
                    v20->__r_.__value_.__r.__words[2] = *(_QWORD *)(v22 + 16);
                    *(_OWORD *)&v20->__r_.__value_.__l.__data_ = v23;
                  }
                  ++v20;
                }
                v28 = v20;
                v18 += 8;
                v21 -= 8;
              }
              while (v21);
            }
            v24 = a5[1];
            if (v24 >= a5[2])
            {
              v25 = std::vector<std::vector<std::string>>::__emplace_back_slow_path<std::vector<std::string>&>(a5, &v27);
            }
            else
            {
              std::vector<std::vector<std::string>>::__construct_one_at_end[abi:ne180100]<std::vector<std::string>&>((uint64_t)a5, &v27);
              v25 = v24 + 24;
            }
            a5[1] = v25;
            v37 = &v27;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v37);
            ++v14;
          }
          while (v14 != v15);
        }
        sentencepiece::util::Status::Status(a6);
      }
      sentencepiece::NBestSentencePieceText::~NBestSentencePieceText((sentencepiece::NBestSentencePieceText *)&v30);
    }
    else
    {
      LODWORD(v30) = 13;
      v26 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v31);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"(", 1);
      std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)") [", 3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"pieces", 6);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"] ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"output container is null", 24);
      sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&v30, (uint64_t)a6);
      v31[0] = *MEMORY[0x24BEDB800];
      *(_QWORD *)((char *)v31 + *(_QWORD *)(v31[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
      v31[1] = MEMORY[0x24BEDB848] + 16;
      if (v35 < 0)
        operator delete(__p);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x249544EE0](&v36);
    }
  }
}

{
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  int v19;
  char *v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  int v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t *v32;
  void *__p;
  char *v34;
  char *v35;
  unsigned int v36;
  _QWORD v37[2];
  int v38;
  uint64_t v39;
  void *v40;
  char v41;
  uint64_t v42;

  (*(void (**)(sentencepiece::util::Status *__return_ptr))(*(_QWORD *)a1 + 88))(a6);
  if (!*(_QWORD *)a6)
  {
    sentencepiece::util::Status::~Status(a6);
    if (a5)
    {
      std::vector<std::vector<int>>::__clear[abi:ne180100](a5);
      sentencepiece::NBestSentencePieceText::NBestSentencePieceText((sentencepiece::NBestSentencePieceText *)&v36, 0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, unsigned int *))(*(_QWORD *)a1 + 240))(a1, a2, a3, a4, &v36);
      if (!*(_QWORD *)a6)
      {
        sentencepiece::util::Status::~Status(a6);
        if (v39)
          v12 = (uint64_t *)(v39 + 8);
        else
          v12 = 0;
        if (v38)
        {
          v32 = &v12[v38];
          do
          {
            v13 = *v12;
            __p = 0;
            v34 = 0;
            v35 = 0;
            v14 = *(_QWORD *)(v13 + 64);
            if (v14)
              v15 = v14 + 8;
            else
              v15 = 0;
            v16 = *(int *)(v13 + 56);
            if ((_DWORD)v16)
            {
              v17 = 0;
              v18 = v15 + 8 * v16;
              do
              {
                v19 = *(_DWORD *)(*(_QWORD *)v15 + 64);
                if (v17 >= v35)
                {
                  v21 = (char *)__p;
                  v22 = (v17 - (_BYTE *)__p) >> 2;
                  v23 = v22 + 1;
                  if ((unint64_t)(v22 + 1) >> 62)
                    std::vector<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>>::__throw_length_error[abi:ne180100]();
                  v24 = v35 - (_BYTE *)__p;
                  if ((v35 - (_BYTE *)__p) >> 1 > v23)
                    v23 = v24 >> 1;
                  if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFFCLL)
                    v25 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v25 = v23;
                  if (v25)
                  {
                    v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v35, v25);
                    v21 = (char *)__p;
                    v17 = v34;
                  }
                  else
                  {
                    v26 = 0;
                  }
                  v27 = &v26[4 * v22];
                  *(_DWORD *)v27 = v19;
                  v20 = v27 + 4;
                  while (v17 != v21)
                  {
                    v28 = *((_DWORD *)v17 - 1);
                    v17 -= 4;
                    *((_DWORD *)v27 - 1) = v28;
                    v27 -= 4;
                  }
                  __p = v27;
                  v34 = v20;
                  v35 = &v26[4 * v25];
                  if (v21)
                    operator delete(v21);
                }
                else
                {
                  *(_DWORD *)v17 = v19;
                  v20 = v17 + 4;
                }
                v34 = v20;
                v15 += 8;
                v17 = v20;
              }
              while (v15 != v18);
            }
            v29 = a5[1];
            if (v29 >= a5[2])
            {
              v30 = std::vector<std::vector<int>>::__emplace_back_slow_path<std::vector<int>&>(a5, (uint64_t)&__p);
            }
            else
            {
              std::vector<std::vector<int>>::__construct_one_at_end[abi:ne180100]<std::vector<int>&>((uint64_t)a5, (uint64_t)&__p);
              v30 = v29 + 24;
            }
            a5[1] = v30;
            if (__p)
            {
              v34 = (char *)__p;
              operator delete(__p);
            }
            ++v12;
          }
          while (v12 != v32);
        }
        sentencepiece::util::Status::Status(a6);
      }
      sentencepiece::NBestSentencePieceText::~NBestSentencePieceText((sentencepiece::NBestSentencePieceText *)&v36);
    }
    else
    {
      v36 = 13;
      v31 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v37);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"(", 1);
      std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)") [", 3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"ids", 3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"] ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"output container is null", 24);
      sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status(&v36, (uint64_t)a6);
      v37[0] = *MEMORY[0x24BEDB800];
      *(_QWORD *)((char *)v37 + *(_QWORD *)(v37[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
      v37[1] = MEMORY[0x24BEDB848] + 16;
      if (v41 < 0)
        operator delete(v40);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x249544EE0](&v42);
    }
  }
}

void sub_245C58E7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sentencepiece::util::StatusBuilder::~StatusBuilder((sentencepiece::util::StatusBuilder *)va);
  _Unwind_Resume(a1);
}

void sub_245C59218(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, char a14)
{
  sentencepiece::util::StatusBuilder::~StatusBuilder((sentencepiece::util::StatusBuilder *)&a14);
  _Unwind_Resume(a1);
}

void sentencepiece::SentencePieceProcessor::SampleEncode(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, sentencepiece::util::Status *a6@<X8>, float a7@<S0>)
{
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int128 *v17;
  _QWORD *v18;
  unsigned int v19;
  _QWORD v20[6];
  int v21;
  uint64_t v22;
  void *__p;
  char v24;
  uint64_t v25;

  (*(void (**)(sentencepiece::util::Status *__return_ptr))(*(_QWORD *)a1 + 88))(a6);
  if (!*(_QWORD *)a6)
  {
    sentencepiece::util::Status::~Status(a6);
    if (a5)
    {
      std::vector<std::string>::__clear[abi:ne180100](a5);
      sentencepiece::SentencePieceText::SentencePieceText((sentencepiece::SentencePieceText *)&v19, 0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, unsigned int *, float))(*(_QWORD *)a1 + 248))(a1, a2, a3, a4, &v19, a7);
      if (!*(_QWORD *)a6)
      {
        sentencepiece::util::Status::~Status(a6);
        if (v22)
          v14 = v22 + 8;
        else
          v14 = 0;
        if (v21)
        {
          v15 = a5[1];
          v16 = 8 * v21;
          do
          {
            v17 = (__int128 *)(*(_QWORD *)(*(_QWORD *)v14 + 48) & 0xFFFFFFFFFFFFFFFELL);
            if (v15 >= a5[2])
            {
              v15 = std::vector<std::string>::__emplace_back_slow_path<std::string const&>(a5, v17);
            }
            else
            {
              std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)a5, v17);
              v15 += 24;
            }
            a5[1] = v15;
            v14 += 8;
            v16 -= 8;
          }
          while (v16);
        }
        sentencepiece::util::Status::Status(a6);
      }
      sentencepiece::SentencePieceText::~SentencePieceText((sentencepiece::SentencePieceText *)&v19);
    }
    else
    {
      v19 = 13;
      v18 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v20);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"(", 1);
      std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)") [", 3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"pieces", 6);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"] ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"output container is null", 24);
      sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status(&v19, (uint64_t)a6);
      v20[0] = *MEMORY[0x24BEDB800];
      *(_QWORD *)((char *)v20 + *(_QWORD *)(v20[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
      v20[1] = MEMORY[0x24BEDB848] + 16;
      if (v24 < 0)
        operator delete(__p);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x249544EE0](&v25);
    }
  }
}

void sub_245C594AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sentencepiece::util::StatusBuilder::~StatusBuilder((sentencepiece::util::StatusBuilder *)&a9);
  _Unwind_Resume(a1);
}

void sentencepiece::SentencePieceProcessor::SampleEncode(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char **a5@<X4>, sentencepiece::util::Status *a6@<X8>, float a7@<S0>)
{
  uint64_t v14;
  _QWORD *v15;
  char *v16;
  uint64_t v17;
  int v18;
  char *v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  int v27;
  _QWORD *v28;
  unsigned int v29;
  _QWORD v30[6];
  int v31;
  uint64_t v32;
  void *__p;
  char v34;
  uint64_t v35;

  (*(void (**)(sentencepiece::util::Status *__return_ptr))(*(_QWORD *)a1 + 88))(a6);
  if (!*(_QWORD *)a6)
  {
    sentencepiece::util::Status::~Status(a6);
    if (a5)
    {
      a5[1] = *a5;
      sentencepiece::SentencePieceText::SentencePieceText((sentencepiece::SentencePieceText *)&v29, 0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, unsigned int *, float))(*(_QWORD *)a1 + 248))(a1, a2, a3, a4, &v29, a7);
      if (!*(_QWORD *)a6)
      {
        sentencepiece::util::Status::~Status(a6);
        if (v32)
          v14 = v32 + 8;
        else
          v14 = 0;
        if (v31)
        {
          v15 = a5 + 2;
          v16 = a5[1];
          v17 = v14 + 8 * v31;
          do
          {
            v18 = *(_DWORD *)(*(_QWORD *)v14 + 64);
            if ((unint64_t)v16 >= *v15)
            {
              v20 = *a5;
              v21 = (v16 - *a5) >> 2;
              v22 = v21 + 1;
              if ((unint64_t)(v21 + 1) >> 62)
                std::vector<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>>::__throw_length_error[abi:ne180100]();
              v23 = *v15 - (_QWORD)v20;
              if (v23 >> 1 > v22)
                v22 = v23 >> 1;
              if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFFCLL)
                v24 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v24 = v22;
              if (v24)
              {
                v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)(a5 + 2), v24);
                v20 = *a5;
                v16 = a5[1];
              }
              else
              {
                v25 = 0;
              }
              v26 = &v25[4 * v21];
              *(_DWORD *)v26 = v18;
              v19 = v26 + 4;
              while (v16 != v20)
              {
                v27 = *((_DWORD *)v16 - 1);
                v16 -= 4;
                *((_DWORD *)v26 - 1) = v27;
                v26 -= 4;
              }
              *a5 = v26;
              a5[1] = v19;
              a5[2] = &v25[4 * v24];
              if (v20)
                operator delete(v20);
            }
            else
            {
              *(_DWORD *)v16 = v18;
              v19 = v16 + 4;
            }
            a5[1] = v19;
            v14 += 8;
            v16 = v19;
          }
          while (v14 != v17);
        }
        sentencepiece::util::Status::Status(a6);
      }
      sentencepiece::SentencePieceText::~SentencePieceText((sentencepiece::SentencePieceText *)&v29);
    }
    else
    {
      v29 = 13;
      v28 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v30);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"(", 1);
      std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)") [", 3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"ids", 3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"] ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"output container is null", 24);
      sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status(&v29, (uint64_t)a6);
      v30[0] = *MEMORY[0x24BEDB800];
      *(_QWORD *)((char *)v30 + *(_QWORD *)(v30[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
      v30[1] = MEMORY[0x24BEDB848] + 16;
      if (v34 < 0)
        operator delete(__p);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x249544EE0](&v35);
    }
  }
}

void sub_245C597B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sentencepiece::util::StatusBuilder::~StatusBuilder((sentencepiece::util::StatusBuilder *)&a9);
  _Unwind_Resume(a1);
}

void sentencepiece::SentencePieceProcessor::SampleEncodeAndScore(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X6>, sentencepiece::util::Status *a8@<X8>, float a9@<S0>)
{
  uint64_t v18;
  void **v19;
  std::string *v20;
  std::string *v21;
  _QWORD *v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  std::string *end;
  uint64_t v30;
  unint64_t v31;
  __int128 v32;
  unint64_t v33;
  uint64_t v34;
  std::vector<std::string> v35;
  void **v36;
  _QWORD v37[2];
  int v38;
  uint64_t v39;
  void *__p;
  char v41;
  uint64_t v42;
  void **v43[2];

  (*(void (**)(sentencepiece::util::Status *__return_ptr))(*(_QWORD *)a1 + 88))(a8);
  if (!*(_QWORD *)a8)
  {
    sentencepiece::util::Status::~Status(a8);
    if (a7)
    {
      v18 = *a7;
      v19 = (void **)a7[1];
      while (v19 != (void **)v18)
      {
        v19 -= 4;
        v36 = v19;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v36);
      }
      a7[1] = v18;
      sentencepiece::NBestSentencePieceText::NBestSentencePieceText((sentencepiece::NBestSentencePieceText *)&v36, 0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void ***, float))(*(_QWORD *)a1 + 256))(a1, a2, a3, a4, a5, a6, &v36, a9);
      if (!*(_QWORD *)a8)
      {
        sentencepiece::util::Status::~Status(a8);
        v20 = (std::string *)*a7;
        v21 = (std::string *)a7[1];
        while (v21 != v20)
        {
          v21 = (std::string *)((char *)v21 - 32);
          v35.__begin_ = v21;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v35);
        }
        a7[1] = (uint64_t)v20;
        std::vector<std::pair<std::vector<std::string>,float>>::reserve(a7, v38);
        if (v39)
          v23 = (uint64_t *)(v39 + 8);
        else
          v23 = 0;
        if (v38)
        {
          v24 = &v23[v38];
          do
          {
            v25 = *v23;
            memset(&v35, 0, sizeof(v35));
            std::vector<std::string>::reserve(&v35, *(int *)(v25 + 56));
            v26 = *(_QWORD *)(v25 + 64);
            if (v26)
              v27 = v26 + 8;
            else
              v27 = 0;
            v28 = *(int *)(v25 + 56);
            if ((_DWORD)v28)
            {
              end = v35.__end_;
              v30 = 8 * v28;
              do
              {
                v31 = *(_QWORD *)(*(_QWORD *)v27 + 48) & 0xFFFFFFFFFFFFFFFELL;
                if (end >= v35.__end_cap_.__value_)
                {
                  end = (std::string *)std::vector<std::string>::__emplace_back_slow_path<std::string const&>((uint64_t *)&v35, (__int128 *)v31);
                }
                else
                {
                  if (*(char *)(v31 + 23) < 0)
                  {
                    std::string::__init_copy_ctor_external(end, *(const std::string::value_type **)v31, *(_QWORD *)(v31 + 8));
                  }
                  else
                  {
                    v32 = *(_OWORD *)v31;
                    end->__r_.__value_.__r.__words[2] = *(_QWORD *)(v31 + 16);
                    *(_OWORD *)&end->__r_.__value_.__l.__data_ = v32;
                  }
                  ++end;
                }
                v35.__end_ = end;
                v27 += 8;
                v30 -= 8;
              }
              while (v30);
            }
            LODWORD(v43[0]) = *(_DWORD *)(v25 + 80);
            v33 = a7[1];
            if (v33 >= a7[2])
            {
              v34 = std::vector<std::pair<std::vector<std::string>,float>>::__emplace_back_slow_path<std::vector<std::string>&,float>(a7, (__int128 **)&v35, v43);
            }
            else
            {
              std::vector<std::pair<std::vector<std::string>,float>>::__construct_one_at_end[abi:ne180100]<std::vector<std::string>&,float>((uint64_t)a7, (__int128 **)&v35, (float *)v43);
              v34 = v33 + 32;
            }
            a7[1] = v34;
            v43[0] = (void **)&v35;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v43);
            ++v23;
          }
          while (v23 != v24);
        }
        sentencepiece::util::Status::Status(a8);
      }
      sentencepiece::NBestSentencePieceText::~NBestSentencePieceText((sentencepiece::NBestSentencePieceText *)&v36);
    }
    else
    {
      LODWORD(v36) = 13;
      v22 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v37);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"(", 1);
      std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)") [", 3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"pieces", 6);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"] ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"output container is null", 24);
      sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&v36, (uint64_t)a8);
      v37[0] = *MEMORY[0x24BEDB800];
      *(_QWORD *)((char *)v37 + *(_QWORD *)(v37[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
      v37[1] = MEMORY[0x24BEDB848] + 16;
      if (v41 < 0)
        operator delete(__p);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x249544EE0](&v42);
    }
  }
}

{
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  std::vector<int>::pointer end;
  int v25;
  int *v26;
  std::vector<int>::pointer begin;
  uint64_t v28;
  unint64_t v29;
  int64_t v30;
  unint64_t v31;
  char *v32;
  int *v33;
  int v34;
  unint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  sentencepiece::util::Status *v38;
  uint64_t *v39;
  int v40;
  std::vector<int> v41;
  unsigned int v42;
  _QWORD v43[2];
  int v44;
  uint64_t v45;
  void *__p;
  char v47;
  uint64_t v48;

  (*(void (**)(sentencepiece::util::Status *__return_ptr))(*(_QWORD *)a1 + 88))(a8);
  if (!*(_QWORD *)a8)
  {
    sentencepiece::util::Status::~Status(a8);
    if (a7)
    {
      std::vector<std::pair<std::vector<std::pair<std::string_view,int>>,float>>::__clear[abi:ne180100](a7);
      sentencepiece::NBestSentencePieceText::NBestSentencePieceText((sentencepiece::NBestSentencePieceText *)&v42, 0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unsigned int *, float))(*(_QWORD *)a1 + 256))(a1, a2, a3, a4, a5, a6, &v42, a9);
      if (!*(_QWORD *)a8)
      {
        v38 = a8;
        sentencepiece::util::Status::~Status(a8);
        std::vector<std::pair<std::vector<std::pair<std::string_view,int>>,float>>::__clear[abi:ne180100](a7);
        std::vector<std::pair<std::vector<int>,float>>::reserve(a7, v44);
        if (v45)
          v18 = (uint64_t *)(v45 + 8);
        else
          v18 = 0;
        if (v44)
        {
          v39 = &v18[v44];
          do
          {
            v19 = *v18;
            memset(&v41, 0, sizeof(v41));
            std::vector<int>::reserve(&v41, *(int *)(v19 + 56));
            v20 = *(_QWORD *)(v19 + 64);
            if (v20)
              v21 = v20 + 8;
            else
              v21 = 0;
            v22 = *(int *)(v19 + 56);
            if ((_DWORD)v22)
            {
              v23 = v21 + 8 * v22;
              end = v41.__end_;
              do
              {
                v25 = *(_DWORD *)(*(_QWORD *)v21 + 64);
                if (end >= v41.__end_cap_.__value_)
                {
                  begin = v41.__begin_;
                  v28 = end - v41.__begin_;
                  v29 = v28 + 1;
                  if ((unint64_t)(v28 + 1) >> 62)
                    std::vector<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>>::__throw_length_error[abi:ne180100]();
                  v30 = (char *)v41.__end_cap_.__value_ - (char *)v41.__begin_;
                  if (((char *)v41.__end_cap_.__value_ - (char *)v41.__begin_) >> 1 > v29)
                    v29 = v30 >> 1;
                  if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFFCLL)
                    v31 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v31 = v29;
                  if (v31)
                  {
                    v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v41.__end_cap_, v31);
                    begin = v41.__begin_;
                    end = v41.__end_;
                  }
                  else
                  {
                    v32 = 0;
                  }
                  v33 = (int *)&v32[4 * v28];
                  *v33 = v25;
                  v26 = v33 + 1;
                  while (end != begin)
                  {
                    v34 = *--end;
                    *--v33 = v34;
                  }
                  v41.__begin_ = v33;
                  v41.__end_ = v26;
                  v41.__end_cap_.__value_ = (int *)&v32[4 * v31];
                  if (begin)
                    operator delete(begin);
                }
                else
                {
                  *end = v25;
                  v26 = end + 1;
                }
                v41.__end_ = v26;
                v21 += 8;
                end = v26;
              }
              while (v21 != v23);
            }
            v40 = *(_DWORD *)(v19 + 80);
            v35 = a7[1];
            if (v35 >= a7[2])
            {
              v36 = std::vector<std::pair<std::vector<int>,float>>::__emplace_back_slow_path<std::vector<int>&,float>(a7, (uint64_t)&v41, &v40);
            }
            else
            {
              std::vector<std::pair<std::vector<int>,float>>::__construct_one_at_end[abi:ne180100]<std::vector<int>&,float>((uint64_t)a7, (uint64_t)&v41, (float *)&v40);
              v36 = v35 + 32;
            }
            a7[1] = v36;
            if (v41.__begin_)
            {
              v41.__end_ = v41.__begin_;
              operator delete(v41.__begin_);
            }
            ++v18;
          }
          while (v18 != v39);
        }
        sentencepiece::util::Status::Status(v38);
      }
      sentencepiece::NBestSentencePieceText::~NBestSentencePieceText((sentencepiece::NBestSentencePieceText *)&v42);
    }
    else
    {
      v42 = 13;
      v37 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v43);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"(", 1);
      std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)") [", 3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"ids", 3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"] ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"output container is null", 24);
      sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status(&v42, (uint64_t)a8);
      v43[0] = *MEMORY[0x24BEDB800];
      *(_QWORD *)((char *)v43 + *(_QWORD *)(v43[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
      v43[1] = MEMORY[0x24BEDB848] + 16;
      if (v47 < 0)
        operator delete(__p);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x249544EE0](&v48);
    }
  }
}

void sub_245C59B48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sentencepiece::util::StatusBuilder::~StatusBuilder((sentencepiece::util::StatusBuilder *)va);
  _Unwind_Resume(a1);
}

void **std::vector<std::pair<std::vector<std::string>,float>>::reserve(uint64_t *a1, unint64_t a2)
{
  void **result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7[5];

  v4 = a1[2];
  result = (void **)(a1 + 2);
  if (a2 > (v4 - *a1) >> 5)
  {
    if (a2 >> 59)
      std::vector<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>>::__throw_length_error[abi:ne180100]();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>>>((uint64_t)result, a2);
    v7[1] = (char *)v7[0] + v5;
    v7[2] = (char *)v7[0] + v5;
    v7[3] = (char *)v7[0] + 32 * v6;
    std::vector<std::pair<std::vector<std::string>,float>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<std::pair<std::vector<std::string>,float>>::~__split_buffer(v7);
  }
  return result;
}

void sub_245C59C18(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::pair<std::vector<std::string>,float>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void std::vector<std::string>::reserve(std::vector<std::string> *this, std::vector<std::string>::size_type __n)
{
  std::allocator<std::string> *p_end_cap;
  std::string *value;
  int64_t v5;
  uint64_t v6;
  std::__split_buffer<std::string> __v;

  value = this->__end_cap_.__value_;
  p_end_cap = (std::allocator<std::string> *)&this->__end_cap_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)this->__begin_) >> 3) < __n)
  {
    if (__n >= 0xAAAAAAAAAAAAAABLL)
      std::vector<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>>::__throw_length_error[abi:ne180100]();
    v5 = (char *)this->__end_ - (char *)this->__begin_;
    __v.__end_cap_.__value_ = p_end_cap;
    __v.__first_ = (std::__split_buffer<std::string>::pointer)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)p_end_cap, __n);
    __v.__begin_ = (std::__split_buffer<std::string>::pointer)((char *)__v.__first_ + v5);
    __v.__end_ = (std::__split_buffer<std::string>::pointer)((char *)__v.__first_ + v5);
    __v.__end_cap_.__value_ = &__v.__first_[v6];
    std::vector<std::string>::__swap_out_circular_buffer(this, &__v);
    std::__split_buffer<std::string>::~__split_buffer(&__v);
  }
}

void sub_245C59CC8(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a10);
  _Unwind_Resume(a1);
}

void sub_245C5A080(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, char a16)
{
  sentencepiece::util::StatusBuilder::~StatusBuilder((sentencepiece::util::StatusBuilder *)&a16);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<std::vector<int>,float>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (a2 > (v4 - *a1) >> 5)
  {
    if (a2 >> 59)
      std::vector<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>>::__throw_length_error[abi:ne180100]();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>>>(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 32 * v6;
    std::vector<std::pair<std::vector<int>,float>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<std::pair<std::vector<int>,float>>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_245C5A148(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::pair<std::vector<int>,float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<int>::reserve(std::vector<int> *this, std::vector<int>::size_type __n)
{
  std::__compressed_pair<int *> *p_end_cap;
  int *value;
  int64_t v5;
  char *v6;
  int *v7;
  uint64_t v8;
  int *v9;
  std::vector<int>::pointer begin;
  int *end;
  int *v12;
  int v13;

  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  if (__n > value - this->__begin_)
  {
    if (__n >> 62)
      std::vector<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>>::__throw_length_error[abi:ne180100]();
    v5 = (char *)this->__end_ - (char *)this->__begin_;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)p_end_cap, __n);
    v7 = (int *)&v6[v5 & 0xFFFFFFFFFFFFFFFCLL];
    v9 = (int *)&v6[4 * v8];
    begin = this->__begin_;
    end = this->__end_;
    v12 = v7;
    if (end != this->__begin_)
    {
      v12 = v7;
      do
      {
        v13 = *--end;
        *--v12 = v13;
      }
      while (end != begin);
    }
    this->__begin_ = v12;
    this->__end_ = v7;
    this->__end_cap_.__value_ = v9;
    if (begin)
      operator delete(begin);
  }
}

_QWORD *sentencepiece::SentencePieceProcessor::PopulateSentencePieceText@<X0>(sentencepiece::ModelInterface **a1@<X0>, char *a2@<X1>, size_t a3@<X2>, uint64_t a4@<X4>, uint64_t *a5@<X5>, unsigned __int8 ***a6@<X6>, uint64_t a7@<X7>, sentencepiece::util::Status *a8@<X8>)
{
  unsigned __int8 **v10;
  uint64_t *v11;
  unint64_t v12;
  char v13;
  size_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  size_t v23;
  size_t v24;
  size_t v25;
  size_t v26;
  size_t v27;
  char *v28;
  size_t v29;
  sentencepiece *v30;
  unsigned int v31;
  int *v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  std::string *p_dst;
  std::string::size_type size;
  int v40;
  std::string *v41;
  std::string::size_type v42;
  uint64_t v43;
  google::protobuf::internal::ArenaImpl *v44;
  int v45;
  uint64_t v46;
  google::protobuf::internal::ArenaImpl *v47;
  int v48;
  int v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  google::protobuf::internal::ArenaImpl *v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  std::string *v59;
  int *v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  google::protobuf::internal::ArenaImpl *v66;
  int v67;
  uint64_t v68;
  google::protobuf::internal::ArenaImpl *v69;
  int v70;
  uint64_t v71;
  unint64_t v72;
  int v73;
  const std::string::value_type *v74;
  std::string::size_type v75;
  std::string *v76;
  __int128 v77;
  uint64_t v78;
  google::protobuf::internal::ArenaImpl *v79;
  size_t v80;
  uint64_t v81;
  std::string *v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  int v86;
  const std::string::value_type *v87;
  std::string::size_type v88;
  std::string *v89;
  __int128 v90;
  uint64_t v91;
  google::protobuf::internal::ArenaImpl *v92;
  _QWORD *result;
  uint64_t v94;
  google::protobuf::internal::ArenaImpl *v95;
  _QWORD *v96;
  _QWORD *v97;
  _QWORD *v98;
  _QWORD *v99;
  _QWORD *v100;
  _QWORD *v101;
  _QWORD *v102;
  uint64_t v103;
  google::protobuf::internal::ArenaStringPtr *v104;
  unsigned __int8 **v110;
  int v111;
  unsigned int *v112;
  char *__src;
  size_t __len;
  std::string __dst;
  void *__p[2];
  uint64_t v117;
  void *v118;
  char v119;
  uint64_t v120;

  v10 = *a6;
  v110 = a6[1];
  if (*a6 != v110)
  {
    v11 = a5;
    v12 = 0;
    v13 = 0;
    v112 = (unsigned int *)(a7 + 48);
    while (1)
    {
      v14 = (size_t)v10[1];
      if (!v14)
      {
        LODWORD(__p[0]) = 13;
        v97 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p[1]);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v97, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[1], (uint64_t)"(", 1);
        std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[1], (uint64_t)") [", 3);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[1], (uint64_t)"!w.empty()", 10);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[1], (uint64_t)"] ", 2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[1], (uint64_t)"Empty piece is not allowed.", 27);
        sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)__p, (uint64_t)a8);
        goto LABEL_137;
      }
      v15 = *v10;
      v16 = *((unsigned int *)v10 + 4);
      v111 = (*((uint64_t (**)(sentencepiece::ModelInterface **, uint64_t))*a1 + 66))(a1, v16);
      if ((*((unsigned int (**)(sentencepiece::ModelInterface **, uint64_t))*a1 + 67))(a1, v16))
      {
        v17 = *(int **)(a7 + 64);
        if (v17)
        {
          v18 = *(int *)(a7 + 56);
          v19 = *v17;
          if ((int)v18 < *v17)
          {
            *(_DWORD *)(a7 + 56) = v18 + 1;
            v20 = *(_QWORD *)&v17[2 * v18 + 2];
LABEL_58:
            *(_DWORD *)(v20 + 40) |= 1u;
            std::string::basic_string[abi:ne180100](__p, v15, v14);
            v53 = *(_QWORD *)(v20 + 8);
            v54 = (google::protobuf::internal::ArenaImpl *)(v53 & 0xFFFFFFFFFFFFFFFELL);
            if ((v53 & 1) != 0)
              v54 = *(google::protobuf::internal::ArenaImpl **)v54;
            google::protobuf::internal::ArenaStringPtr::Set((google::protobuf::internal::ArenaStringPtr *)(v20 + 48), (__int128 *)__p, v54);
            if (SHIBYTE(v117) < 0)
              operator delete(__p[0]);
            v55 = *(_DWORD *)(v20 + 40);
            *(_DWORD *)(v20 + 64) = v16;
            v56 = *(_QWORD *)(*v11 + 8 * v12);
            *(_DWORD *)(v20 + 68) = v56;
            *(_DWORD *)(v20 + 40) = v55 | 0x1C;
            goto LABEL_83;
          }
          if (v19 != *(_DWORD *)(a7 + 60))
          {
LABEL_57:
            *v17 = v19 + 1;
            v20 = google::protobuf::Arena::CreateMaybeMessage<sentencepiece::SentencePieceText_SentencePiece>(*(_QWORD *)(a7 + 48));
            v51 = *(_QWORD *)(a7 + 64);
            v52 = *(int *)(a7 + 56);
            *(_DWORD *)(a7 + 56) = v52 + 1;
            *(_QWORD *)(v51 + 8 * v52 + 8) = v20;
            goto LABEL_58;
          }
        }
        else
        {
          v19 = *(_DWORD *)(a7 + 60);
        }
        google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v112, v19 + 1);
        v17 = *(int **)(a7 + 64);
        v19 = *v17;
        goto LABEL_57;
      }
      v21 = *v11;
      v22 = v11[1] - *v11;
      if (v12 >= v22 >> 3)
      {
        LODWORD(__p[0]) = 13;
        v98 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p[1]);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v98, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[1], (uint64_t)"(", 1);
        std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[1], (uint64_t)") [", 3);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[1], (uint64_t)"(begin) < (norm_to_orig.size())", 31);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[1], (uint64_t)"] ", 2);
        sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)__p, (uint64_t)a8);
        goto LABEL_137;
      }
      v23 = v14 + v12;
      if (v14 + v12 >= v22 >> 3)
      {
        LODWORD(__p[0]) = 13;
        v99 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p[1]);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v99, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[1], (uint64_t)"(", 1);
        std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[1], (uint64_t)") [", 3);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[1], (uint64_t)"(end) < (norm_to_orig.size())", 29);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[1], (uint64_t)"] ", 2);
        sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)__p, (uint64_t)a8);
        goto LABEL_137;
      }
      v24 = *(_QWORD *)(v21 + 8 * v12);
      if (v24 > a3)
      {
        LODWORD(__p[0]) = 13;
        v100 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p[1]);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v100, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[1], (uint64_t)"(", 1);
        std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[1], (uint64_t)") [", 3);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[1], (uint64_t)"(orig_begin) <= (input.size())", 30);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[1], (uint64_t)"] ", 2);
        sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)__p, (uint64_t)a8);
        goto LABEL_137;
      }
      v25 = *(_QWORD *)(v21 + 8 * v23);
      if (v25 > a3)
      {
        LODWORD(__p[0]) = 13;
        v101 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p[1]);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v101, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[1], (uint64_t)"(", 1);
        std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[1], (uint64_t)") [", 3);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[1], (uint64_t)"(orig_end) <= (input.size())", 28);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[1], (uint64_t)"] ", 2);
        sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)__p, (uint64_t)a8);
        goto LABEL_137;
      }
      v26 = v25 - v24;
      if (v25 < v24)
      {
        LODWORD(__p[0]) = 13;
        v102 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p[1]);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v102, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[1], (uint64_t)"(", 1);
        std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[1], (uint64_t)") [", 3);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[1], (uint64_t)"(orig_begin) <= (orig_end)", 26);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[1], (uint64_t)"] ", 2);
        sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)__p, (uint64_t)a8);
        goto LABEL_137;
      }
      if (a3 >= v24)
        v27 = v24;
      else
        v27 = a3;
      v28 = &a2[v27];
      v29 = a3 - v27;
      if (v29 < v26)
        v26 = v29;
      __src = v28;
      __len = v26;
      if (v111)
      {
        if ((*(unsigned int (**)(sentencepiece::ModelInterface *))(*(_QWORD *)a1[1] + 184))(a1[1]))
        {
          while (1)
          {
            v31 = *v15++;
            v30 = (sentencepiece *)v31;
            v32 = *(int **)(a7 + 64);
            if (!v32)
              break;
            v33 = *(int *)(a7 + 56);
            v34 = *v32;
            if ((int)v33 >= *v32)
            {
              if (v34 == *(_DWORD *)(a7 + 60))
              {
LABEL_25:
                google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v112, v34 + 1);
                v32 = *(int **)(a7 + 64);
                v34 = *v32;
              }
              *v32 = v34 + 1;
              v35 = google::protobuf::Arena::CreateMaybeMessage<sentencepiece::SentencePieceText_SentencePiece>(*(_QWORD *)(a7 + 48));
              v36 = *(_QWORD *)(a7 + 64);
              v37 = *(int *)(a7 + 56);
              *(_DWORD *)(a7 + 56) = v37 + 1;
              *(_QWORD *)(v36 + 8 * v37 + 8) = v35;
              goto LABEL_27;
            }
            *(_DWORD *)(a7 + 56) = v33 + 1;
            v35 = *(_QWORD *)&v32[2 * v33 + 2];
LABEL_27:
            sentencepiece::ByteToPiece(v30, (uint64_t)&__dst);
            if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              p_dst = &__dst;
            else
              p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
            if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
            else
              size = __dst.__r_.__value_.__l.__size_;
            v40 = (*(uint64_t (**)(sentencepiece::ModelInterface *, std::string *, std::string::size_type))(*(_QWORD *)a1[1] + 112))(a1[1], p_dst, size);
            if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v41 = &__dst;
            else
              v41 = (std::string *)__dst.__r_.__value_.__r.__words[0];
            if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v42 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
            else
              v42 = __dst.__r_.__value_.__l.__size_;
            *(_DWORD *)(v35 + 40) |= 1u;
            std::string::basic_string[abi:ne180100](__p, v41, v42);
            v43 = *(_QWORD *)(v35 + 8);
            v44 = (google::protobuf::internal::ArenaImpl *)(v43 & 0xFFFFFFFFFFFFFFFELL);
            if ((v43 & 1) != 0)
              v44 = *(google::protobuf::internal::ArenaImpl **)v44;
            google::protobuf::internal::ArenaStringPtr::Set((google::protobuf::internal::ArenaStringPtr *)(v35 + 48), (__int128 *)__p, v44);
            if (SHIBYTE(v117) < 0)
              operator delete(__p[0]);
            v45 = *(_DWORD *)(v35 + 40);
            *(_DWORD *)(v35 + 40) = v45 | 4;
            *(_DWORD *)(v35 + 64) = v40;
            if (v14 == 1)
            {
              *(_DWORD *)(v35 + 40) = v45 | 6;
              std::string::basic_string[abi:ne180100](__p, __src, __len);
              v46 = *(_QWORD *)(v35 + 8);
              v47 = (google::protobuf::internal::ArenaImpl *)(v46 & 0xFFFFFFFFFFFFFFFELL);
              if ((v46 & 1) != 0)
                v47 = *(google::protobuf::internal::ArenaImpl **)v47;
              google::protobuf::internal::ArenaStringPtr::Set((google::protobuf::internal::ArenaStringPtr *)(v35 + 56), (__int128 *)__p, v47);
              if (SHIBYTE(v117) < 0)
                operator delete(__p[0]);
              v48 = *(_DWORD *)(v35 + 40);
              *(_DWORD *)(v35 + 68) = v24;
              v49 = v48 | 0x18;
              v50 = v25;
            }
            else
            {
              *(_DWORD *)(v35 + 68) = v24;
              v49 = v45 | 0x1C;
              v50 = v24;
            }
            *(_DWORD *)(v35 + 40) = v49;
            *(_DWORD *)(v35 + 72) = v50;
            if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__dst.__r_.__value_.__l.__data_);
            if (!--v14)
            {
              v12 = v23;
              v11 = a5;
              goto LABEL_84;
            }
          }
          v34 = *(_DWORD *)(a7 + 60);
          goto LABEL_25;
        }
        if ((v13 & 1) != 0)
        {
          v57 = google::protobuf::internal::RepeatedPtrFieldBase::Mutable<google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText_SentencePiece>::TypeHandler>((uint64_t)v112, *(_DWORD *)(a7 + 56) - 1);
          if (v14 > 0x7FFFFFFFFFFFFFF7)
            goto LABEL_141;
          v20 = v57;
          v58 = *(_QWORD *)(v57 + 48);
          v104 = (google::protobuf::internal::ArenaStringPtr *)(v57 + 48);
          if (v14 >= 0x17)
          {
            v71 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v14 | 7) != 0x17)
              v71 = v14 | 7;
            v103 = v71 + 1;
            v59 = (std::string *)operator new(v71 + 1);
            __dst.__r_.__value_.__l.__size_ = v14;
            __dst.__r_.__value_.__r.__words[2] = v103 | 0x8000000000000000;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v59;
          }
          else
          {
            *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v14;
            v59 = &__dst;
          }
          v72 = v58 & 0xFFFFFFFFFFFFFFFELL;
          memmove(v59, v15, v14);
          v59->__r_.__value_.__s.__data_[v14] = 0;
          v73 = *(char *)(v72 + 23);
          if (v73 >= 0)
            v74 = (const std::string::value_type *)v72;
          else
            v74 = *(const std::string::value_type **)v72;
          if (v73 >= 0)
            v75 = *(unsigned __int8 *)(v72 + 23);
          else
            v75 = *(_QWORD *)(v72 + 8);
          v76 = std::string::insert(&__dst, 0, v74, v75);
          v77 = *(_OWORD *)&v76->__r_.__value_.__l.__data_;
          v117 = v76->__r_.__value_.__r.__words[2];
          *(_OWORD *)__p = v77;
          v76->__r_.__value_.__l.__size_ = 0;
          v76->__r_.__value_.__r.__words[2] = 0;
          v76->__r_.__value_.__r.__words[0] = 0;
          *(_DWORD *)(v20 + 40) |= 1u;
          v78 = *(_QWORD *)(v20 + 8);
          v79 = (google::protobuf::internal::ArenaImpl *)(v78 & 0xFFFFFFFFFFFFFFFELL);
          v80 = __len;
          if ((v78 & 1) != 0)
            v79 = *(google::protobuf::internal::ArenaImpl **)v79;
          google::protobuf::internal::ArenaStringPtr::Set(v104, (__int128 *)__p, v79);
          if (SHIBYTE(v117) < 0)
            operator delete(__p[0]);
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__dst.__r_.__value_.__l.__data_);
          if (__len > 0x7FFFFFFFFFFFFFF7)
LABEL_141:
            std::string::__throw_length_error[abi:ne180100]();
          v81 = *(_QWORD *)(v20 + 56);
          if (__len >= 0x17)
          {
            v83 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((__len | 7) != 0x17)
              v83 = __len | 7;
            v84 = v83 + 1;
            v82 = (std::string *)operator new(v83 + 1);
            v85 = v84 | 0x8000000000000000;
            v80 = __len;
            __dst.__r_.__value_.__l.__size_ = __len;
            __dst.__r_.__value_.__r.__words[2] = v85;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v82;
          }
          else
          {
            *((_BYTE *)&__dst.__r_.__value_.__s + 23) = __len;
            v82 = &__dst;
            if (!__len)
              goto LABEL_109;
          }
          memmove(v82, __src, v80);
LABEL_109:
          v82->__r_.__value_.__s.__data_[v80] = 0;
          v86 = *(char *)((v81 & 0xFFFFFFFFFFFFFFFELL) + 23);
          if (v86 >= 0)
            v87 = (const std::string::value_type *)(v81 & 0xFFFFFFFFFFFFFFFELL);
          else
            v87 = *(const std::string::value_type **)(v81 & 0xFFFFFFFFFFFFFFFELL);
          if (v86 >= 0)
            v88 = *(unsigned __int8 *)((v81 & 0xFFFFFFFFFFFFFFFELL) + 23);
          else
            v88 = *(_QWORD *)((v81 & 0xFFFFFFFFFFFFFFFELL) + 8);
          v89 = std::string::insert(&__dst, 0, v87, v88);
          v90 = *(_OWORD *)&v89->__r_.__value_.__l.__data_;
          v117 = v89->__r_.__value_.__r.__words[2];
          *(_OWORD *)__p = v90;
          v89->__r_.__value_.__l.__size_ = 0;
          v89->__r_.__value_.__r.__words[2] = 0;
          v89->__r_.__value_.__r.__words[0] = 0;
          *(_DWORD *)(v20 + 40) |= 2u;
          v91 = *(_QWORD *)(v20 + 8);
          v92 = (google::protobuf::internal::ArenaImpl *)(v91 & 0xFFFFFFFFFFFFFFFELL);
          v11 = a5;
          if ((v91 & 1) != 0)
            v92 = *(google::protobuf::internal::ArenaImpl **)v92;
          google::protobuf::internal::ArenaStringPtr::Set((google::protobuf::internal::ArenaStringPtr *)(v20 + 56), (__int128 *)__p, v92);
          if (SHIBYTE(v117) < 0)
            operator delete(__p[0]);
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__dst.__r_.__value_.__l.__data_);
          *(_DWORD *)(v20 + 40) |= 0x10u;
          LODWORD(v56) = v25;
          v12 = v23;
          goto LABEL_83;
        }
      }
      v60 = *(int **)(a7 + 64);
      if (!v60)
        break;
      v61 = *(int *)(a7 + 56);
      v62 = *v60;
      if ((int)v61 >= *v60)
      {
        if (v62 == *(_DWORD *)(a7 + 60))
        {
LABEL_72:
          google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v112, v62 + 1);
          v60 = *(int **)(a7 + 64);
          v62 = *v60;
        }
        *v60 = v62 + 1;
        v20 = google::protobuf::Arena::CreateMaybeMessage<sentencepiece::SentencePieceText_SentencePiece>(*(_QWORD *)(a7 + 48));
        v63 = *(_QWORD *)(a7 + 64);
        v64 = *(int *)(a7 + 56);
        *(_DWORD *)(a7 + 56) = v64 + 1;
        *(_QWORD *)(v63 + 8 * v64 + 8) = v20;
        goto LABEL_74;
      }
      *(_DWORD *)(a7 + 56) = v61 + 1;
      v20 = *(_QWORD *)&v60[2 * v61 + 2];
LABEL_74:
      *(_DWORD *)(v20 + 40) |= 1u;
      std::string::basic_string[abi:ne180100](__p, v15, v14);
      v65 = *(_QWORD *)(v20 + 8);
      v66 = (google::protobuf::internal::ArenaImpl *)(v65 & 0xFFFFFFFFFFFFFFFELL);
      if ((v65 & 1) != 0)
        v66 = *(google::protobuf::internal::ArenaImpl **)v66;
      google::protobuf::internal::ArenaStringPtr::Set((google::protobuf::internal::ArenaStringPtr *)(v20 + 48), (__int128 *)__p, v66);
      if (SHIBYTE(v117) < 0)
        operator delete(__p[0]);
      v67 = *(_DWORD *)(v20 + 40);
      *(_DWORD *)(v20 + 64) = v16;
      *(_DWORD *)(v20 + 40) = v67 | 6;
      std::string::basic_string[abi:ne180100](__p, __src, __len);
      v68 = *(_QWORD *)(v20 + 8);
      v69 = (google::protobuf::internal::ArenaImpl *)(v68 & 0xFFFFFFFFFFFFFFFELL);
      if ((v68 & 1) != 0)
        v69 = *(google::protobuf::internal::ArenaImpl **)v69;
      google::protobuf::internal::ArenaStringPtr::Set((google::protobuf::internal::ArenaStringPtr *)(v20 + 56), (__int128 *)__p, v69);
      if (SHIBYTE(v117) < 0)
        operator delete(__p[0]);
      v70 = *(_DWORD *)(v20 + 40);
      *(_DWORD *)(v20 + 68) = v24;
      *(_DWORD *)(v20 + 40) = v70 | 0x18;
      LODWORD(v56) = v25;
      v12 = v23;
      v11 = a5;
LABEL_83:
      *(_DWORD *)(v20 + 72) = v56;
      v23 = v12;
LABEL_84:
      v10 += 3;
      v13 = v111;
      if (v10 == v110)
        goto LABEL_123;
    }
    v62 = *(_DWORD *)(a7 + 60);
    goto LABEL_72;
  }
  v23 = 0;
LABEL_123:
  if (v23 == a4)
  {
    result = sentencepiece::SentencePieceProcessor::ApplyExtraOptions(a1, (uint64_t)(a1 + 5), a7, a8);
    if (!*(_QWORD *)a8)
    {
      sentencepiece::util::Status::~Status(a8);
      *(_DWORD *)(a7 + 40) |= 1u;
      std::string::basic_string[abi:ne180100](__p, a2, a3);
      v94 = *(_QWORD *)(a7 + 8);
      v95 = (google::protobuf::internal::ArenaImpl *)(v94 & 0xFFFFFFFFFFFFFFFELL);
      if ((v94 & 1) != 0)
        v95 = *(google::protobuf::internal::ArenaImpl **)v95;
      google::protobuf::internal::ArenaStringPtr::Set((google::protobuf::internal::ArenaStringPtr *)(a7 + 72), (__int128 *)__p, v95);
      if (SHIBYTE(v117) < 0)
        operator delete(__p[0]);
      return sentencepiece::util::Status::Status(a8);
    }
    return result;
  }
  LODWORD(__p[0]) = 13;
  v96 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p[1]);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v96, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[1], (uint64_t)"(", 1);
  std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[1], (uint64_t)") [", 3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[1], (uint64_t)"(consumed) == (normalized.size())", 33);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[1], (uint64_t)"] ", 2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[1], (uint64_t)"all normalized characters are not consumed.", 43);
  sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)__p, (uint64_t)a8);
LABEL_137:
  __p[1] = *(void **)MEMORY[0x24BEDB800];
  *(void **)((char *)&__p[1] + *((_QWORD *)__p[1] - 3)) = *(void **)(MEMORY[0x24BEDB800] + 24);
  v117 = MEMORY[0x24BEDB848] + 16;
  if (v119 < 0)
    operator delete(v118);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return (_QWORD *)MEMORY[0x249544EE0](&v120);
}

void sub_245C5AEBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a33 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sentencepiece::SentencePieceProcessor::ApplyExtraOptions@<X0>(sentencepiece::ModelInterface **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  _DWORD *v5;
  _DWORD *v6;
  unsigned int *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  sentencepiece::SentencePieceText_SentencePiece **v13;
  BOOL v14;
  unint64_t v15;
  sentencepiece::SentencePieceText_SentencePiece *v16;
  BOOL v17;
  int *v18;
  int v19;
  int v20;
  int v21;
  int *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  char *v28;
  size_t v29;
  uint64_t v30;
  google::protobuf::internal::ArenaImpl *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  std::string *v38;
  uint64_t v39;
  const char *v40;
  size_t v41;
  int v42;
  char *v43;
  size_t v44;
  uint64_t v45;
  google::protobuf::internal::ArenaImpl *v46;
  uint64_t v47;
  uint64_t v48;
  const char *v49;
  size_t v50;
  int v51;
  char *v52;
  size_t v53;
  uint64_t v54;
  google::protobuf::internal::ArenaImpl *v55;
  char v57;
  std::string __p[2];

  v6 = *(_DWORD **)a2;
  v5 = *(_DWORD **)(a2 + 8);
  if (*(_DWORD **)a2 != v5)
  {
    v9 = (unsigned int *)(a3 + 48);
    while (1)
    {
      switch(*v6)
      {
        case 0:
          v10 = *(_QWORD *)(a3 + 64);
          if (v10)
            v11 = v10 + 8;
          else
            v11 = 0;
          v12 = *(int *)(a3 + 56);
          v13 = (sentencepiece::SentencePieceText_SentencePiece **)(v11 + 8 * v12 - 8);
          if ((_DWORD)v12)
            v14 = (unint64_t)v13 > v11;
          else
            v14 = 0;
          if (v14)
          {
            v15 = v11 + 8;
            do
            {
              v16 = *v13--;
              sentencepiece::swap(*(uint64_t **)(v15 - 8), v16, (sentencepiece::SentencePieceText_SentencePiece *)a3);
              v17 = v15 >= (unint64_t)v13;
              v15 += 8;
            }
            while (!v17);
          }
          goto LABEL_52;
        case 1:
          v18 = *(int **)(a3 + 64);
          if (!v18)
          {
            v20 = *(_DWORD *)(a3 + 60);
LABEL_34:
            google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v9, v20 + 1);
            v18 = *(int **)(a3 + 64);
            v20 = *v18;
            goto LABEL_35;
          }
          v19 = *(_DWORD *)(a3 + 56);
          v20 = *v18;
          if (v19 < *v18)
          {
            v21 = v19 + 1;
            *(_DWORD *)(a3 + 56) = v19 + 1;
            goto LABEL_36;
          }
          if (v20 == *(_DWORD *)(a3 + 60))
            goto LABEL_34;
LABEL_35:
          *v18 = v20 + 1;
          v32 = google::protobuf::Arena::CreateMaybeMessage<sentencepiece::SentencePieceText_SentencePiece>(*(_QWORD *)(a3 + 48));
          v33 = *(_QWORD *)(a3 + 64);
          v34 = *(int *)(a3 + 56);
          v21 = v34 + 1;
          *(_DWORD *)(a3 + 56) = v34 + 1;
          *(_QWORD *)(v33 + 8 * v34 + 8) = v32;
LABEL_36:
          if (v21 > 1)
          {
            v35 = v21;
            do
            {
              v36 = *(_QWORD *)(a3 + 64) + 8;
              v37 = *(_QWORD *)(v36 + 8 * (v35 - 2));
              *(_QWORD *)(v36 + 8 * (v35 - 2)) = *(_QWORD *)(v36 + 8 * (v35 - 1));
              *(_QWORD *)(v36 + 8 * (v35 - 1)) = v37;
              v14 = v35-- > 2;
            }
            while (v14);
          }
          if (v21 < 1)
          {
            google::protobuf::internal::LogMessage::LogMessage((uint64_t)__p, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1728);
            v38 = google::protobuf::internal::LogMessage::operator<<(__p, "CHECK failed: (index) < (current_size_): ");
            google::protobuf::internal::LogFinisher::operator=((int)&v57, (const char **)&v38->__r_.__value_.__l.__data_);
            google::protobuf::internal::LogMessage::~LogMessage((void **)&__p[0].__r_.__value_.__l.__data_);
          }
          v39 = *(_QWORD *)(*(_QWORD *)(a3 + 64) + 8);
          v40 = sentencepiece::ModelInterface::bos_piece(a1[1]);
          v41 = strlen(v40);
          v42 = (*((uint64_t (**)(sentencepiece::ModelInterface **, const char *, size_t))*a1 + 63))(a1, v40, v41);
          *(_DWORD *)(v39 + 40) |= 4u;
          *(_DWORD *)(v39 + 64) = v42;
          v43 = (char *)sentencepiece::ModelInterface::bos_piece(a1[1]);
          sentencepiece::ModelInterface::bos_piece(a1[1]);
          *(_DWORD *)(v39 + 40) |= 1u;
          std::string::basic_string[abi:ne180100](__p, v43, v44);
          v45 = *(_QWORD *)(v39 + 8);
          v46 = (google::protobuf::internal::ArenaImpl *)(v45 & 0xFFFFFFFFFFFFFFFELL);
          if ((v45 & 1) != 0)
            v46 = *(google::protobuf::internal::ArenaImpl **)v46;
          google::protobuf::internal::ArenaStringPtr::Set((google::protobuf::internal::ArenaStringPtr *)(v39 + 48), (__int128 *)__p, v46);
          goto LABEL_50;
        case 2:
          v22 = *(int **)(a3 + 64);
          if (!v22)
          {
            v24 = *(_DWORD *)(a3 + 60);
LABEL_45:
            google::protobuf::internal::RepeatedPtrFieldBase::Reserve(v9, v24 + 1);
            v22 = *(int **)(a3 + 64);
            v24 = *v22;
            goto LABEL_46;
          }
          v23 = *(int *)(a3 + 56);
          v24 = *v22;
          if ((int)v23 < *v22)
          {
            *(_DWORD *)(a3 + 56) = v23 + 1;
            v25 = *(_QWORD *)&v22[2 * v23 + 2];
            goto LABEL_47;
          }
          if (v24 == *(_DWORD *)(a3 + 60))
            goto LABEL_45;
LABEL_46:
          *v22 = v24 + 1;
          v25 = google::protobuf::Arena::CreateMaybeMessage<sentencepiece::SentencePieceText_SentencePiece>(*(_QWORD *)(a3 + 48));
          v47 = *(_QWORD *)(a3 + 64);
          v48 = *(int *)(a3 + 56);
          *(_DWORD *)(a3 + 56) = v48 + 1;
          *(_QWORD *)(v47 + 8 * v48 + 8) = v25;
LABEL_47:
          v49 = sentencepiece::ModelInterface::eos_piece(a1[1]);
          v50 = strlen(v49);
          v51 = (*((uint64_t (**)(sentencepiece::ModelInterface **, const char *, size_t))*a1 + 63))(a1, v49, v50);
          *(_DWORD *)(v25 + 40) |= 4u;
          *(_DWORD *)(v25 + 64) = v51;
          v52 = (char *)sentencepiece::ModelInterface::eos_piece(a1[1]);
          sentencepiece::ModelInterface::eos_piece(a1[1]);
          *(_DWORD *)(v25 + 40) |= 1u;
          std::string::basic_string[abi:ne180100](__p, v52, v53);
          v54 = *(_QWORD *)(v25 + 8);
          v55 = (google::protobuf::internal::ArenaImpl *)(v54 & 0xFFFFFFFFFFFFFFFELL);
          if ((v54 & 1) != 0)
            v55 = *(google::protobuf::internal::ArenaImpl **)v55;
          google::protobuf::internal::ArenaStringPtr::Set((google::protobuf::internal::ArenaStringPtr *)(v25 + 48), (__int128 *)__p, v55);
LABEL_50:
          if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p[0].__r_.__value_.__l.__data_);
LABEL_52:
          if (++v6 == v5)
            return sentencepiece::util::Status::Status(a4);
          break;
        case 3:
          if (*(int *)(a3 + 56) >= 1)
          {
            v26 = 0;
            do
            {
              v27 = google::protobuf::internal::RepeatedPtrFieldBase::Mutable<google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText_SentencePiece>::TypeHandler>((uint64_t)v9, v26);
              if ((*((unsigned int (**)(sentencepiece::ModelInterface **, _QWORD))*a1 + 66))(a1, *(unsigned int *)(v27 + 64)))
              {
                v28 = (char *)sentencepiece::ModelInterface::unk_piece(a1[1]);
                sentencepiece::ModelInterface::unk_piece(a1[1]);
                *(_DWORD *)(v27 + 40) |= 1u;
                std::string::basic_string[abi:ne180100](__p, v28, v29);
                v30 = *(_QWORD *)(v27 + 8);
                v31 = (google::protobuf::internal::ArenaImpl *)(v30 & 0xFFFFFFFFFFFFFFFELL);
                if ((v30 & 1) != 0)
                  v31 = *(google::protobuf::internal::ArenaImpl **)v31;
                google::protobuf::internal::ArenaStringPtr::Set((google::protobuf::internal::ArenaStringPtr *)(v27 + 48), (__int128 *)__p, v31);
                if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__p[0].__r_.__value_.__l.__data_);
              }
              ++v26;
            }
            while (v26 < *(_DWORD *)(a3 + 56));
          }
          goto LABEL_52;
        default:
          return (_QWORD *)sentencepiece::util::Status::Status(a4, 13, "unknown extra_option type.", 26);
      }
    }
  }
  return sentencepiece::util::Status::Status(a4);
}

void sub_245C5B3B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  google::protobuf::internal::LogMessage::~LogMessage(&__p);
  _Unwind_Resume(a1);
}

void sentencepiece::SentencePieceProcessor::Encode(sentencepiece::ModelInterface **a1@<X0>, char *a2@<X1>, size_t a3@<X2>, sentencepiece::SentencePieceText *a4@<X3>, sentencepiece::util::Status *a5@<X8>)
{
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  void *__p[3];
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  char v21;
  uint64_t v22;

  (*((void (**)(sentencepiece::util::Status *__return_ptr))*a1 + 11))(a5);
  if (!*(_QWORD *)a5)
  {
    sentencepiece::util::Status::~Status(a5);
    if (a4)
    {
      sentencepiece::SentencePieceText::Clear(a4);
      v17 = 0;
      v18 = 0;
      v19 = 0;
      v14 = 0;
      v15 = 0;
      v16 = 0;
      (*(void (**)(sentencepiece::ModelInterface *, char *, size_t, void **, void **))(*(_QWORD *)a1[2] + 32))(a1[2], a2, a3, &v17, &v14);
      if (!*(_QWORD *)a5)
      {
        sentencepiece::util::Status::~Status(a5);
        (*(void (**)(void **__return_ptr))(*(_QWORD *)a1[1] + 40))(__p);
        if (v19 >= 0)
          v10 = HIBYTE(v19);
        else
          v10 = v18;
        sentencepiece::SentencePieceProcessor::PopulateSentencePieceText(a1, a2, a3, v10, (uint64_t *)&v14, (unsigned __int8 ***)__p, (uint64_t)a4, a5);
        if (!*(_QWORD *)a5)
        {
          sentencepiece::util::Status::~Status(a5);
          sentencepiece::util::Status::Status(v11);
        }
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
      }
      if (v14)
      {
        v15 = v14;
        operator delete(v14);
      }
      if (SHIBYTE(v19) < 0)
        operator delete(v17);
    }
    else
    {
      LODWORD(v17) = 13;
      v12 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v18);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v18, (uint64_t)"(", 1);
      std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v18, (uint64_t)") [", 3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v18, (uint64_t)"spt", 3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v18, (uint64_t)"] ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v18, (uint64_t)"output proto is null", 20);
      sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&v17, (uint64_t)a5);
      v18 = *MEMORY[0x24BEDB800];
      *(uint64_t *)((char *)&v18 + *(_QWORD *)(v18 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
      v19 = MEMORY[0x24BEDB848] + 16;
      if (v21 < 0)
        operator delete(v20);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x249544EE0](&v22);
    }
  }
}

void sub_245C5B660(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (__p)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void sentencepiece::SentencePieceProcessor::NBestEncode(sentencepiece::ModelInterface **a1@<X0>, char *a2@<X1>, size_t a3@<X2>, uint64_t a4@<X4>, sentencepiece::util::Status *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  void **v29;
  uint64_t v30;
  uint64_t v31;
  void *__p;
  char v33;
  _BYTE v34[152];

  (*((void (**)(sentencepiece::util::Status *__return_ptr))*a1 + 11))(a5);
  if (*(_QWORD *)a5)
    return;
  sentencepiece::util::Status::~Status(a5);
  if (a4)
  {
    sentencepiece::NBestSentencePieceText::Clear((sentencepiece::NBestSentencePieceText *)a4);
    v26 = 0;
    v27 = 0;
    v28 = 0;
    v23 = 0;
    v24 = 0;
    v25 = 0;
    (*(void (**)(sentencepiece::ModelInterface *, char *, size_t, void **, void **))(*(_QWORD *)a1[2] + 32))(a1[2], a2, a3, &v26, &v23);
    if (!*(_QWORD *)a5)
    {
      sentencepiece::util::Status::~Status(a5);
      if (((*(uint64_t (**)(sentencepiece::ModelInterface *))(*(_QWORD *)a1[1] + 88))(a1[1]) & 1) != 0)
      {
        (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1[1] + 48))(&v21);
        v10 = v21;
        v11 = v22;
        if (v21 != v22)
        {
          while (1)
          {
            v12 = *(int **)(a4 + 32);
            if (!v12)
              break;
            v13 = *(int *)(a4 + 24);
            v14 = *v12;
            if ((int)v13 >= *v12)
            {
              if (v14 == *(_DWORD *)(a4 + 28))
              {
LABEL_12:
                google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(a4 + 16), v14 + 1);
                v12 = *(int **)(a4 + 32);
                v14 = *v12;
              }
              *v12 = v14 + 1;
              v15 = google::protobuf::Arena::CreateMaybeMessage<sentencepiece::SentencePieceText>(*(_QWORD *)(a4 + 16));
              v16 = *(_QWORD *)(a4 + 32);
              v17 = *(int *)(a4 + 24);
              *(_DWORD *)(a4 + 24) = v17 + 1;
              *(_QWORD *)(v16 + 8 * v17 + 8) = v15;
              goto LABEL_14;
            }
            *(_DWORD *)(a4 + 24) = v13 + 1;
            v15 = *(_QWORD *)&v12[2 * v13 + 2];
LABEL_14:
            v18 = *(_DWORD *)(v10 + 24);
            *(_DWORD *)(v15 + 40) |= 2u;
            *(_DWORD *)(v15 + 80) = v18;
            if (v28 >= 0)
              v19 = HIBYTE(v28);
            else
              v19 = v27;
            sentencepiece::SentencePieceProcessor::PopulateSentencePieceText(a1, a2, a3, v19, (uint64_t *)&v23, (unsigned __int8 ***)v10, v15, a5);
            if (*(_QWORD *)a5)
              goto LABEL_29;
            sentencepiece::util::Status::~Status(a5);
            v10 += 32;
            if (v10 == v11)
            {
              sentencepiece::util::Status::Status(a5);
              goto LABEL_29;
            }
          }
          v14 = *(_DWORD *)(a4 + 28);
          goto LABEL_12;
        }
        LODWORD(v29) = 13;
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v30);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30, (uint64_t)"(", 1);
        std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30, (uint64_t)") [", 3);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30, (uint64_t)"!nbests.empty()", 15);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30, (uint64_t)"] ", 2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30, (uint64_t)"NBestEncode returns empty result.", 33);
        sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&v29, (uint64_t)a5);
        v30 = *MEMORY[0x24BEDB800];
        *(uint64_t *)((char *)&v30 + *(_QWORD *)(v30 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
        v31 = MEMORY[0x24BEDB848] + 16;
        if (v33 < 0)
          operator delete(__p);
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        MEMORY[0x249544EE0](v34);
LABEL_29:
        v29 = (void **)&v21;
        std::vector<std::pair<std::vector<std::pair<std::string_view,int>>,float>>::__destroy_vector::operator()[abi:ne180100](&v29);
      }
      else
      {
        LODWORD(v29) = 13;
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v30);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30, (uint64_t)"(", 1);
        std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30, (uint64_t)") [", 3);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30, (uint64_t)"model_->IsNBestEncodeAvailable()", 32);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30, (uint64_t)"] ", 2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30, (uint64_t)"NBestEncode is not available for the current model.", 51);
        sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&v29, (uint64_t)a5);
        v30 = *MEMORY[0x24BEDB800];
        *(uint64_t *)((char *)&v30 + *(_QWORD *)(v30 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
        v31 = MEMORY[0x24BEDB848] + 16;
        if (v33 < 0)
          operator delete(__p);
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        MEMORY[0x249544EE0](v34);
      }
    }
    if (v23)
    {
      v24 = v23;
      operator delete(v23);
    }
    if (SHIBYTE(v28) < 0)
      operator delete(v26);
  }
  else
  {
    LODWORD(v29) = 13;
    v20 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v30);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30, (uint64_t)"(", 1);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30, (uint64_t)") [", 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30, (uint64_t)"nbest_spt", 9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30, (uint64_t)"] ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30, (uint64_t)"output proto is null", 20);
    sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&v29, (uint64_t)a5);
    v30 = *MEMORY[0x24BEDB800];
    *(uint64_t *)((char *)&v30 + *(_QWORD *)(v30 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
    v31 = MEMORY[0x24BEDB848] + 16;
    if (v33 < 0)
      operator delete(__p);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x249544EE0](v34);
  }
}

void sub_245C5BC2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char *a22)
{
  a22 = &a10;
  std::vector<std::pair<std::vector<std::pair<std::string_view,int>>,float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a22);
  if (__p)
  {
    a14 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(a1);
}

void sentencepiece::SentencePieceProcessor::SampleEncode(sentencepiece::ModelInterface **a1@<X0>, char *a2@<X1>, size_t a3@<X2>, int a4@<W3>, sentencepiece::SentencePieceText *a5@<X4>, sentencepiece::util::Status *a6@<X8>, float a7@<S0>)
{
  _QWORD *v14;
  _QWORD *v15;
  char v16;
  char v17;
  uint64_t v18;
  sentencepiece::random *v19;
  float *v20;
  uint64_t v21;
  float *v22;
  float v23;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *RandomGenerator;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  void *v30[3];
  uint64_t v31;
  uint64_t v32;
  void *__p;
  void *v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  float *v40[11];
  char v41;
  uint64_t v42;

  (*((void (**)(sentencepiece::util::Status *__return_ptr))*a1 + 11))(a6);
  if (*(_QWORD *)a6)
    return;
  sentencepiece::util::Status::~Status(a6);
  if (a5)
  {
    sentencepiece::SentencePieceText::Clear(a5);
    if (a4 < 513)
    {
      v36 = 0;
      v37 = 0;
      v38 = 0;
      __p = 0;
      v34 = 0;
      v35 = 0;
      (*(void (**)(sentencepiece::ModelInterface *, char *, size_t, void **, void **))(*(_QWORD *)a1[2] + 32))(a1[2], a2, a3, &v36, &__p);
      if (*(_QWORD *)a6)
      {
LABEL_5:
        if (__p)
        {
          v34 = __p;
          operator delete(__p);
        }
        if (SHIBYTE(v38) < 0)
          operator delete(v36);
        return;
      }
      sentencepiece::util::Status::~Status(a6);
      v16 = (*(uint64_t (**)(sentencepiece::ModelInterface *))(*(_QWORD *)a1[1] + 88))(a1[1]);
      if (a4 >= 0)
        v17 = v16;
      else
        v17 = 0;
      if ((v17 & 1) != 0)
      {
        if (a4 > 1)
        {
          (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1[1] + 48))(&v31);
          if (v31 == v32)
          {
            LODWORD(v39) = 13;
            std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v40);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"(", 1);
            std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)") [", 3);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"!nbests.empty()", 15);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"] ", 2);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"NBestEncode returns empty result.", 33);
            sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&v39, (uint64_t)a6);
            sentencepiece::util::StatusBuilder::~StatusBuilder((sentencepiece::util::StatusBuilder *)&v39);
            v39 = &v31;
            std::vector<std::pair<std::vector<std::pair<std::string_view,int>>,float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v39);
            goto LABEL_5;
          }
          LODWORD(v30[0]) = 0;
          v19 = (sentencepiece::random *)std::vector<float>::vector(&v39, (v32 - v31) >> 5, v30);
          if (v32 != v31)
          {
            v20 = (float *)v39;
            if ((unint64_t)((v32 - v31) >> 5) <= 1)
              v21 = 1;
            else
              v21 = (v32 - v31) >> 5;
            v22 = (float *)(v31 + 24);
            do
            {
              v23 = *v22;
              v22 += 8;
              *v20++ = expf(v23 * a7);
              --v21;
            }
            while (v21);
          }
          RandomGenerator = (std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *)sentencepiece::random::GetRandomGenerator(v19);
          std::discrete_distribution<int>::param_type::param_type[abi:ne180100]<std::__wrap_iter<float *>>((uint64_t)v30, (float *)v39, v40[0]);
          v25 = HIBYTE(v38);
          v26 = v37;
          v27 = std::discrete_distribution<int>::operator()<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>>((int)v30, RandomGenerator, (double **)v30);
          if ((v25 & 0x80u) == 0)
            v28 = v25;
          else
            v28 = v26;
          sentencepiece::SentencePieceProcessor::PopulateSentencePieceText(a1, a2, a3, v28, (uint64_t *)&__p, (unsigned __int8 ***)(v31 + 32 * v27), (uint64_t)a5, a6);
          v29 = *(_QWORD *)a6;
          if (!*(_QWORD *)a6)
            sentencepiece::util::Status::~Status(a6);
          if (v30[0])
          {
            v30[1] = v30[0];
            operator delete(v30[0]);
          }
          if (v39)
          {
            v40[0] = (float *)v39;
            operator delete(v39);
          }
          v39 = &v31;
          std::vector<std::pair<std::vector<std::pair<std::string_view,int>>,float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v39);
          if (v29)
            goto LABEL_5;
          goto LABEL_51;
        }
        (*(void (**)(void **__return_ptr))(*(_QWORD *)a1[1] + 40))(&v39);
        if (v38 >= 0)
          v18 = HIBYTE(v38);
        else
          v18 = v37;
      }
      else
      {
        if (((*(uint64_t (**)(sentencepiece::ModelInterface *))(*(_QWORD *)a1[1] + 80))(a1[1]) & 1) == 0)
        {
          LODWORD(v39) = 13;
          std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v40);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"(", 1);
          std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)") [", 3);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"model_->IsSampleEncodeAvailable()", 33);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"] ", 2);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"SampleEncode is not available for the current model.", 52);
          sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&v39, (uint64_t)a6);
          sentencepiece::util::StatusBuilder::~StatusBuilder((sentencepiece::util::StatusBuilder *)&v39);
          goto LABEL_5;
        }
        (*(void (**)(void **__return_ptr, float))(*(_QWORD *)a1[1] + 56))(&v39, a7);
        if (v38 >= 0)
          v18 = HIBYTE(v38);
        else
          v18 = v37;
      }
      sentencepiece::SentencePieceProcessor::PopulateSentencePieceText(a1, a2, a3, v18, (uint64_t *)&__p, (unsigned __int8 ***)&v39, (uint64_t)a5, a6);
      if (*(_QWORD *)a6)
      {
        if (v39)
        {
          v40[0] = (float *)v39;
          operator delete(v39);
        }
        goto LABEL_5;
      }
      sentencepiece::util::Status::~Status(a6);
      if (v39)
      {
        v40[0] = (float *)v39;
        operator delete(v39);
      }
LABEL_51:
      sentencepiece::util::Status::Status(a6);
      goto LABEL_5;
    }
    LODWORD(v39) = 13;
    v15 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v40);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"(", 1);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)") [", 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"(nbest_size) <= (512)", 21);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"] ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"nbest_size must be nbest_size <= 512", 36);
    sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&v39, (uint64_t)a6);
  }
  else
  {
    LODWORD(v39) = 13;
    v14 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v40);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"(", 1);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)") [", 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"spt", 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"] ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"output proto is null", 20);
    sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&v39, (uint64_t)a6);
  }
  v40[0] = *(float **)MEMORY[0x24BEDB800];
  *(float **)((char *)v40 + *((_QWORD *)v40[0] - 3)) = *(float **)(MEMORY[0x24BEDB800] + 24);
  v40[1] = (float *)(MEMORY[0x24BEDB848] + 16);
  if (v41 < 0)
    operator delete(v40[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x249544EE0](&v42);
}

void sub_245C5C378(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char *a24,uint64_t a25)
{
  a24 = &a12;
  std::vector<std::pair<std::vector<std::pair<std::string_view,int>>,float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a24);
  if (__p)
  {
    a16 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a23 < 0)
    operator delete(a18);
  _Unwind_Resume(a1);
}

void sentencepiece::SentencePieceProcessor::SampleEncodeAndScore(uint64_t a1@<X0>, char *a2@<X1>, size_t a3@<X2>, uint64_t a4@<X6>, sentencepiece::util::Status *a5@<X8>, float a6@<S0>)
{
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  void **v31;
  uint64_t v32;
  uint64_t v33;
  void *__p;
  char v35;
  _BYTE v36[152];

  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 96))(*(_QWORD *)(a1 + 8)) & 1) != 0)
  {
    v28 = 0;
    v29 = 0;
    v30 = 0;
    v25 = 0;
    v26 = 0;
    v27 = 0;
    (*(void (**)(_QWORD, char *, size_t, void **, void **))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16), a2, a3, &v28, &v25);
    if (!*(_QWORD *)a5)
    {
      sentencepiece::util::Status::~Status(a5);
      (*(void (**)(uint64_t *__return_ptr, float))(**(_QWORD **)(a1 + 8) + 64))(&v23, a6);
      v12 = v23;
      v13 = v24;
      if (v23 != v24)
      {
        while (1)
        {
          v14 = *(int **)(a4 + 32);
          if (!v14)
            break;
          v15 = *(int *)(a4 + 24);
          v16 = *v14;
          if ((int)v15 >= *v14)
          {
            if (v16 == *(_DWORD *)(a4 + 28))
            {
LABEL_9:
              google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(a4 + 16), v16 + 1);
              v14 = *(int **)(a4 + 32);
              v16 = *v14;
            }
            *v14 = v16 + 1;
            v17 = google::protobuf::Arena::CreateMaybeMessage<sentencepiece::SentencePieceText>(*(_QWORD *)(a4 + 16));
            v18 = *(_QWORD *)(a4 + 32);
            v19 = *(int *)(a4 + 24);
            *(_DWORD *)(a4 + 24) = v19 + 1;
            *(_QWORD *)(v18 + 8 * v19 + 8) = v17;
            goto LABEL_11;
          }
          *(_DWORD *)(a4 + 24) = v15 + 1;
          v17 = *(_QWORD *)&v14[2 * v15 + 2];
LABEL_11:
          v20 = *(_DWORD *)(v12 + 24);
          *(_DWORD *)(v17 + 40) |= 2u;
          *(_DWORD *)(v17 + 80) = v20;
          if (v30 >= 0)
            v21 = HIBYTE(v30);
          else
            v21 = v29;
          sentencepiece::SentencePieceProcessor::PopulateSentencePieceText((sentencepiece::ModelInterface **)a1, a2, a3, v21, (uint64_t *)&v25, (unsigned __int8 ***)v12, v17, a5);
          if (*(_QWORD *)a5)
            goto LABEL_23;
          sentencepiece::util::Status::~Status(a5);
          v12 += 32;
          if (v12 == v13)
          {
            sentencepiece::util::Status::Status(a5);
            goto LABEL_23;
          }
        }
        v16 = *(_DWORD *)(a4 + 28);
        goto LABEL_9;
      }
      LODWORD(v31) = 13;
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v32);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v32, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v32, (uint64_t)"(", 1);
      std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v32, (uint64_t)") [", 3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v32, (uint64_t)"!results.empty()", 16);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v32, (uint64_t)"] ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v32, (uint64_t)"SampleEncodeAndScore returns empty result.", 42);
      sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&v31, (uint64_t)a5);
      v32 = *MEMORY[0x24BEDB800];
      *(uint64_t *)((char *)&v32 + *(_QWORD *)(v32 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
      v33 = MEMORY[0x24BEDB848] + 16;
      if (v35 < 0)
        operator delete(__p);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x249544EE0](v36);
LABEL_23:
      v31 = (void **)&v23;
      std::vector<std::pair<std::vector<std::pair<std::string_view,int>>,float>>::__destroy_vector::operator()[abi:ne180100](&v31);
    }
    if (v25)
    {
      v26 = v25;
      operator delete(v25);
    }
    if (SHIBYTE(v30) < 0)
      operator delete(v28);
  }
  else
  {
    LODWORD(v31) = 13;
    v22 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v32);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v32, (uint64_t)"(", 1);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v32, (uint64_t)") [", 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v32, (uint64_t)"model_->IsSampleEncodeAndScoreAvailable()", 41);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v32, (uint64_t)"] ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v32, (uint64_t)"SampleEncodeAndScore is not available for the current model.", 60);
    sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&v31, (uint64_t)a5);
    v32 = *MEMORY[0x24BEDB800];
    *(uint64_t *)((char *)&v32 + *(_QWORD *)(v32 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
    v33 = MEMORY[0x24BEDB848] + 16;
    if (v35 < 0)
      operator delete(__p);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x249544EE0](v36);
  }
}

void sub_245C5C8B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char *a22)
{
  a22 = &a10;
  std::vector<std::pair<std::vector<std::pair<std::string_view,int>>,float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a22);
  if (__p)
  {
    a14 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(a1);
}

void sentencepiece::SentencePieceProcessor::CalculateEntropy(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, float *a4@<X3>, sentencepiece::util::Status *a5@<X8>, float a6@<S0>)
{
  void *v12;
  uint64_t v13;
  _QWORD *v14;
  void *__p;
  void *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  char v22;
  uint64_t v23;

  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 104))(*(_QWORD *)(a1 + 8)) & 1) != 0)
  {
    v18 = 0;
    v19 = 0;
    v20 = 0;
    __p = 0;
    v16 = 0;
    v17 = 0;
    (*(void (**)(_QWORD, uint64_t, uint64_t, void **, void **))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16), a2, a3, &v18, &__p);
    if (!*(_QWORD *)a5)
    {
      sentencepiece::util::Status::~Status(a5);
      if (v20 >= 0)
        v12 = &v18;
      else
        v12 = v18;
      if (v20 >= 0)
        v13 = HIBYTE(v20);
      else
        v13 = v19;
      *a4 = (*(float (**)(_QWORD, void *, uint64_t, float))(**(_QWORD **)(a1 + 8) + 72))(*(_QWORD *)(a1 + 8), v12, v13, a6);
      sentencepiece::util::Status::Status(a5);
    }
    if (__p)
    {
      v16 = __p;
      operator delete(__p);
    }
    if (SHIBYTE(v20) < 0)
      operator delete(v18);
  }
  else
  {
    LODWORD(v18) = 13;
    v14 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"(", 1);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)") [", 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"model_->IsCalculateEntropyAvailable()", 37);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"] ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v19, (uint64_t)"CalculateEntropy is not available for the current model.", 56);
    sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&v18, (uint64_t)a5);
    v19 = *MEMORY[0x24BEDB800];
    *(uint64_t *)((char *)&v19 + *(_QWORD *)(v19 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
    v20 = MEMORY[0x24BEDB848] + 16;
    if (v22 < 0)
      operator delete(v21);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x249544EE0](&v23);
  }
}

void sub_245C5CB3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (__p)
    operator delete(__p);
  if (a18 < 0)
    operator delete(a13);
  _Unwind_Resume(exception_object);
}

void sub_245C5CBE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sentencepiece::SentencePieceProcessor::Decode(sentencepiece::ModelInterface **a1@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X2>, sentencepiece::util::Status *a4@<X8>)
{
  uint64_t v4;
  sentencepiece::ModelInterface *v8;
  char *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  google::protobuf::internal::ArenaImpl *v22;
  uint64_t *v23;
  int v24;
  uint64_t v25;
  google::protobuf::internal::ArenaImpl *v26;
  int v27;
  _BOOL4 v28;
  int v29;
  int v30;
  char v31;
  uint64_t v32;
  unint64_t v33;
  size_t v34;
  unsigned __int8 *v35;
  uint64_t v36;
  const void *v37;
  uint64_t v38;
  __int128 *p_dst;
  sentencepiece::ModelInterface *v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  uint64_t v44;
  uint64_t v45;
  void **v46;
  size_t v47;
  _BOOL4 v49;
  sentencepiece::ModelInterface *v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  sentencepiece::ModelInterface *v54;
  uint64_t *v55;
  __int128 v56;
  void *__p[2];
  uint64_t v58;
  _QWORD v59[2];
  _QWORD *v60[2];
  uint64_t *v61;
  __int128 v62;
  uint64_t v63;
  BOOL v64;
  void *v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  void *v70;
  _QWORD *v71;
  __int128 __dst;
  unint64_t v73;

  v4 = a3;
  v68 = a3;
  (*((void (**)(sentencepiece::util::Status *__return_ptr))*a1 + 11))(a4);
  if (*(_QWORD *)a4)
    return;
  sentencepiece::util::Status::~Status(a4);
  if (v4)
  {
    sentencepiece::SentencePieceText::Clear((sentencepiece::SentencePieceText *)v4);
    v8 = a1[4];
    if (v8 && (*(unsigned int (**)(sentencepiece::ModelInterface *))(*(_QWORD *)v8 + 72))(v8))
      v9 = (char *)(*(uint64_t (**)(sentencepiece::ModelInterface *))(*(_QWORD *)a1[4] + 24))(a1[4]);
    else
    v10 = *a2;
    v11 = a2[1];
    if (*a2 != v11)
    {
      while (1)
      {
        v12 = *v10;
        v13 = v10[1];
        v14 = v68;
        v15 = *(int **)(v68 + 64);
        if (!v15)
          break;
        v16 = *(int *)(v68 + 56);
        v17 = *v15;
        if ((int)v16 >= *v15)
        {
          if (v17 == *(_DWORD *)(v68 + 60))
          {
LABEL_14:
            google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(v68 + 48), v17 + 1);
            v15 = *(int **)(v68 + 64);
            v17 = *v15;
          }
          *v15 = v17 + 1;
          v18 = google::protobuf::Arena::CreateMaybeMessage<sentencepiece::SentencePieceText_SentencePiece>(*(_QWORD *)(v14 + 48));
          v19 = *(_QWORD *)(v14 + 64);
          v20 = *(int *)(v14 + 56);
          *(_DWORD *)(v14 + 56) = v20 + 1;
          *(_QWORD *)(v19 + 8 * v20 + 8) = v18;
          goto LABEL_16;
        }
        *(_DWORD *)(v68 + 56) = v16 + 1;
        v18 = *(_QWORD *)&v15[2 * v16 + 2];
LABEL_16:
        *(_DWORD *)(v18 + 40) |= 1u;
        v21 = *(_QWORD *)(v18 + 8);
        v22 = (google::protobuf::internal::ArenaImpl *)(v21 & 0xFFFFFFFFFFFFFFFELL);
        if ((v21 & 1) != 0)
          v22 = *(google::protobuf::internal::ArenaImpl **)v22;
        v23 = google::protobuf::internal::ArenaStringPtr::Mutable((uint64_t **)(v18 + 48), v22);
        MEMORY[0x249544CE8](v23, v12, v13);
        v24 = (*((uint64_t (**)(sentencepiece::ModelInterface **, uint64_t, uint64_t))*a1 + 63))(a1, v12, v13);
        *(_DWORD *)(v18 + 40) |= 4u;
        *(_DWORD *)(v18 + 64) = v24;
        v10 += 2;
        if (v10 == v11)
        {
          v4 = v68;
          goto LABEL_20;
        }
      }
      v17 = *(_DWORD *)(v68 + 60);
      goto LABEL_14;
    }
LABEL_20:
    sentencepiece::SentencePieceProcessor::ApplyExtraOptions(a1, (uint64_t)(a1 + 8), v4, a4);
    if (*(_QWORD *)a4)
      return;
    sentencepiece::util::Status::~Status(a4);
    v61 = 0;
    *(_DWORD *)(v4 + 40) |= 1u;
    v25 = *(_QWORD *)(v4 + 8);
    v26 = (google::protobuf::internal::ArenaImpl *)(v25 & 0xFFFFFFFFFFFFFFFELL);
    if ((v25 & 1) != 0)
      v26 = *(google::protobuf::internal::ArenaImpl **)v26;
    v60[1] = &v61;
    v61 = google::protobuf::internal::ArenaStringPtr::Mutable((uint64_t **)(v4 + 72), v26);
    v58 = 0;
    v59[0] = &v68;
    v59[1] = v60;
    v60[0] = &v68;
    __p[0] = 0;
    __p[1] = 0;
    v27 = *(_DWORD *)(v4 + 56);
    if (v27 >= 1)
    {
      v28 = 0;
      v29 = 0;
      v30 = 0;
      v31 = 1;
      while (1)
      {
        v32 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText_SentencePiece>::TypeHandler>(v4 + 48, v30);
        if (!(*((unsigned int (**)(sentencepiece::ModelInterface **, _QWORD))*a1 + 69))(a1, *(unsigned int *)(v32 + 64)))break;
        ++v30;
LABEL_68:
        v4 = v68;
        v27 = *(_DWORD *)(v68 + 56);
        if (v30 >= v27)
          goto LABEL_89;
      }
      sentencepiece::SentencePieceProcessor::Decode(std::vector<std::string_view> const&,sentencepiece::SentencePieceText *)const::$_2::operator()((uint64_t)v59, v29, v30, a4);
      if (*(_QWORD *)a4)
        goto LABEL_95;
      sentencepiece::util::Status::~Status(a4);
      if (!v28)
      {
        if (*((char *)v61 + 23) < 0)
        {
          if (!v61[1])
          {
LABEL_32:
            v33 = *(_QWORD *)(v32 + 48) & 0xFFFFFFFFFFFFFFFELL;
            if (*(char *)(v33 + 23) < 0)
            {
              v35 = *(unsigned __int8 **)v33;
              v34 = *(_QWORD *)(v33 + 8);
            }
            else
            {
              v34 = *(unsigned __int8 *)(v33 + 23);
              v35 = (unsigned __int8 *)(*(_QWORD *)(v32 + 48) & 0xFFFFFFFFFFFFFFFELL);
            }
            v36 = *(unsigned int *)(v32 + 64);
            if ((*((unsigned int (**)(sentencepiece::ModelInterface **, uint64_t))*a1 + 67))(a1, v36))
            {
              std::string::basic_string[abi:ne180100]<0>(&v62, "");
LABEL_58:
              v64 = 0;
LABEL_59:
              if (SHIBYTE(v58) < 0)
                operator delete(__p[0]);
              v58 = v63;
              *(_OWORD *)__p = v62;
              v28 = v64;
              if (v63 >= 0)
                v46 = __p;
              else
                v46 = (void **)v62;
              if (v63 >= 0)
                v47 = HIBYTE(v63);
              else
                v47 = *((_QWORD *)&v62 + 1);
              sentencepiece::SentencePieceProcessor::Decode(std::vector<std::string_view> const&,sentencepiece::SentencePieceText *)const::$_1::operator()(v60, v30++, v46, v47);
              v29 = v30;
              goto LABEL_68;
            }
            if (!(*((unsigned int (**)(sentencepiece::ModelInterface **, uint64_t))*a1 + 66))(a1, v36))
            {
              if ((v31 & 1) != 0
                && ((v40 = a1[4]) == 0
                 || (v41 = (*(uint64_t (**)(sentencepiece::ModelInterface *))(*(_QWORD *)v40 + 152))(v40),
                     ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v41 + 16))(v41) & 1) != 0)
                 || (v42 = (*(uint64_t (**)(sentencepiece::ModelInterface *))(*(_QWORD *)a1[4] + 152))(a1[4]),
                     (*(unsigned int (**)(uint64_t))(*(_QWORD *)v42 + 24))(v42))))
              {
                if (v34 >= 3)
                {
                  v49 = *(unsigned __int16 *)v35 != 38626 || v35[2] != 129;
                  if (!v49)
                  {
                    v35 += 3;
                    v34 -= 3;
                  }
                  v43 = !v49;
                }
                else
                {
                  v43 = 0;
                }
                v50 = a1[4];
                if (v50)
                {
                  v51 = (*(uint64_t (**)(sentencepiece::ModelInterface *))(*(_QWORD *)v50 + 152))(v50);
                  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v51 + 24))(v51))
                    v43 = 0;
                }
              }
              else
              {
                v43 = 0;
              }
              v52 = operator new(0x20uLL);
              v70 = v52 + 4;
              v71 = v52 + 4;
              v52[1] = 3;
              v52[2] = " ";
              v52[3] = 1;
              v69 = v52;
              absl::StrReplaceAll(v35, v34, (uint64_t *)&v69, (uint64_t)&__dst);
              v62 = __dst;
              v63 = v73;
              v73 = 0;
              __dst = 0uLL;
              v64 = v43;
              if (v69)
              {
                v70 = v69;
                operator delete(v69);
              }
              goto LABEL_59;
            }
            v37 = (const void *)(*((uint64_t (**)(sentencepiece::ModelInterface **, uint64_t))*a1 + 64))(a1, v36);
            if (v38 == v34 && !memcmp(v37, v35, v34))
            {
              std::string::basic_string[abi:ne180100]<0>(&v62, v9);
              goto LABEL_58;
            }
            if (v34 >= 0x7FFFFFFFFFFFFFF8)
              std::string::__throw_length_error[abi:ne180100]();
            if (v34 >= 0x17)
            {
              v44 = (v34 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v34 | 7) != 0x17)
                v44 = v34 | 7;
              v45 = v44 + 1;
              p_dst = (__int128 *)operator new(v44 + 1);
              *((_QWORD *)&__dst + 1) = v34;
              v73 = v45 | 0x8000000000000000;
              *(_QWORD *)&__dst = p_dst;
            }
            else
            {
              HIBYTE(v73) = v34;
              p_dst = &__dst;
              if (!v34)
                goto LABEL_57;
            }
            memmove(p_dst, v35, v34);
LABEL_57:
            *((_BYTE *)p_dst + v34) = 0;
            v62 = __dst;
            v63 = v73;
            goto LABEL_58;
          }
        }
        else if (!*((_BYTE *)v61 + 23))
        {
          goto LABEL_32;
        }
      }
      v31 = 0;
      goto LABEL_32;
    }
    v29 = 0;
LABEL_89:
    sentencepiece::SentencePieceProcessor::Decode(std::vector<std::string_view> const&,sentencepiece::SentencePieceText *)const::$_2::operator()((uint64_t)v59, v29, v27, a4);
    if (!*(_QWORD *)a4)
    {
      sentencepiece::util::Status::~Status(a4);
      v54 = a1[3];
      if (v54)
      {
        (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v54 + 40))(&v62);
        v55 = v61;
        if (*((char *)v61 + 23) < 0)
          operator delete((void *)*v61);
        v56 = v62;
        v55[2] = v63;
        *(_OWORD *)v55 = v56;
      }
      sentencepiece::util::Status::Status(a4);
    }
LABEL_95:
    if (SHIBYTE(v58) < 0)
      operator delete(__p[0]);
  }
  else
  {
    LODWORD(v62) = 13;
    v53 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v62 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)&v62 + 1, (uint64_t)"(", 1);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)&v62 + 1, (uint64_t)") [", 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)&v62 + 1, (uint64_t)"spt", 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)&v62 + 1, (uint64_t)"] ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)&v62 + 1, (uint64_t)"output proto is null", 20);
    sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&v62, (uint64_t)a4);
    *((_QWORD *)&v62 + 1) = *MEMORY[0x24BEDB800];
    *(_QWORD *)((char *)&v62 + *(_QWORD *)(*((_QWORD *)&v62 + 1) - 24) + 8) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
    v63 = MEMORY[0x24BEDB848] + 16;
    if (v66 < 0)
      operator delete(v65);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x249544EE0](&v67);
  }
}

void sub_245C5D334(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sentencepiece::SentencePieceProcessor::Decode(std::vector<std::string_view> const&,sentencepiece::SentencePieceText *)const::$_2::operator()(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, sentencepiece::util::Status *a4@<X8>)
{
  int v8;
  uint64_t v9;
  unint64_t v10;
  size_t v11;
  void *v12;
  int v13;
  unint64_t *v14;
  int v15;
  int v16;
  std::string::size_type size;
  unint64_t v18;
  std::string *v19;
  int v20;
  std::string::size_type v21;
  size_t v22;
  size_t v23;
  std::string *v24;
  size_t v25;
  unint64_t v26;
  const char *v27;
  int v28;
  size_t v29;
  const char *v30;
  size_t v31;
  sentencepiece::util::Status *v32;
  char v33[8];
  unsigned int v34;
  _QWORD v35[11];
  char v36;
  uint64_t v37;
  std::string v38;

  if (a2 >= a3)
  {
    sentencepiece::util::Status::Status(a4);
  }
  else
  {
    memset(&v38, 0, sizeof(v38));
    v8 = a2;
    do
    {
      v9 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText_SentencePiece>::TypeHandler>(**(_QWORD **)a1 + 48, v8);
      v10 = *(_QWORD *)(v9 + 48) & 0xFFFFFFFFFFFFFFFELL;
      if (*(char *)(v10 + 23) < 0)
      {
        v12 = *(void **)v10;
        v11 = *(_QWORD *)(v10 + 8);
      }
      else
      {
        v11 = *(unsigned __int8 *)(v10 + 23);
        v12 = (void *)(*(_QWORD *)(v9 + 48) & 0xFFFFFFFFFFFFFFFELL);
      }
      v13 = sentencepiece::PieceToByte(v12, v11);
      if (v13 < 0)
      {
        v34 = 13;
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v35);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"(", 1);
        std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)") [", 3);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"(0) <= (byte)", 13);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"] ", 2);
        sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status(&v34, (uint64_t)a4);
        goto LABEL_50;
      }
      std::string::append(&v38, 1uLL, v13);
      ++v8;
    }
    while (a3 != v8);
    v32 = a4;
    if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v15 = HIBYTE(v38.__r_.__value_.__r.__words[2]);
    else
      v15 = v38.__r_.__value_.__r.__words[1];
    if (v15 >= 1)
    {
      v16 = 0;
      while (1)
      {
        *(_QWORD *)v33 = 0;
        size = HIBYTE(v38.__r_.__value_.__r.__words[2]);
        if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          size = v38.__r_.__value_.__l.__size_;
        if (size < v16)
          std::__throw_out_of_range[abi:ne180100]("string_view::substr");
        v18 = v16;
        v19 = (std::string *)v38.__r_.__value_.__r.__words[0];
        if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v19 = &v38;
        if (sentencepiece::string_util::DecodeUTF8((sentencepiece::string_util *)((char *)v19 + v18), (const char *)v19 + size, v33, v14) != 65533)break;
        v20 = v18 + a2;
        if (*(_QWORD *)v33 != 1)
        {
          if (*(_QWORD *)v33 != 3)
          {
            v34 = 13;
            std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v35);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"(", 1);
            std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)") [", 3);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"(consumed) == (1)", 17);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"] ", 2);
            sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status(&v34, (uint64_t)v32);
            goto LABEL_50;
          }
          goto LABEL_23;
        }
        LODWORD(v23) = *(_DWORD *)v33;
LABEL_42:
        v16 = v18 + v23;
        if (v16 >= v15)
          goto LABEL_47;
      }
      v20 = v18 + a2;
LABEL_23:
      v21 = HIBYTE(v38.__r_.__value_.__r.__words[2]);
      if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v21 = v38.__r_.__value_.__l.__size_;
      v22 = v21 - v18;
      if (v21 < v18)
        std::__throw_out_of_range[abi:ne180100]("string_view::substr");
      v23 = *(_QWORD *)v33;
      v24 = &v38;
      if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v24 = (std::string *)v38.__r_.__value_.__r.__words[0];
      if (v22 >= *(_QWORD *)v33)
        v25 = *(_QWORD *)v33;
      else
        v25 = v22;
      if (*(_QWORD *)v33)
      {
        v26 = 0;
        v27 = (char *)v24 + v18;
        v28 = v20;
        do
        {
          v29 = v23 - 1;
          if (v26 == v29)
            v30 = v27;
          else
            v30 = "";
          if (v26 == v29)
            v31 = v25;
          else
            v31 = 0;
          sentencepiece::SentencePieceProcessor::Decode(std::vector<std::string_view> const&,sentencepiece::SentencePieceText *)const::$_1::operator()(*(_QWORD ***)(a1 + 8), v28 + v26++, v30, v31);
          v23 = *(_QWORD *)v33;
        }
        while (*(_QWORD *)v33 > v26);
      }
      goto LABEL_42;
    }
    v16 = 0;
LABEL_47:
    if (v16 + a2 == a3)
    {
      sentencepiece::util::Status::Status(v32);
      goto LABEL_53;
    }
    v34 = 13;
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v35);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"(", 1);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)") [", 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"(token_index_begin + offset) == (token_index_end)", 49);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"] ", 2);
    sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status(&v34, (uint64_t)v32);
LABEL_50:
    v35[0] = *MEMORY[0x24BEDB800];
    *(_QWORD *)((char *)v35 + *(_QWORD *)(v35[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
    v35[1] = MEMORY[0x24BEDB848] + 16;
    if (v36 < 0)
      operator delete((void *)v35[9]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x249544EE0](&v37);
LABEL_53:
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v38.__r_.__value_.__l.__data_);
  }
}

void sub_245C5D82C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;

  if (*(char *)(v11 - 89) < 0)
    operator delete(*(void **)(v11 - 112));
  _Unwind_Resume(exception_object);
}

std::string *sentencepiece::SentencePieceProcessor::Decode(std::vector<std::string_view> const&,sentencepiece::SentencePieceText *)const::$_1::operator()(_QWORD **a1, int a2, const void *a3, size_t a4)
{
  uint64_t v7;
  uint64_t v8;
  __int128 *p_dst;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  google::protobuf::internal::ArenaImpl *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  __int128 __dst;
  unint64_t v20;

  v7 = google::protobuf::internal::RepeatedPtrFieldBase::Mutable<google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText_SentencePiece>::TypeHandler>(**a1 + 48, a2);
  if (a4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v8 = v7;
  if (a4 >= 0x17)
  {
    v10 = (a4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a4 | 7) != 0x17)
      v10 = a4 | 7;
    v11 = v10 + 1;
    p_dst = (__int128 *)operator new(v10 + 1);
    *((_QWORD *)&__dst + 1) = a4;
    v20 = v11 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v20) = a4;
  p_dst = &__dst;
  if (a4)
LABEL_8:
    memmove(p_dst, a3, a4);
  *((_BYTE *)p_dst + a4) = 0;
  *(_DWORD *)(v8 + 40) |= 2u;
  v12 = *(_QWORD *)(v8 + 8);
  v13 = (google::protobuf::internal::ArenaImpl *)(v12 & 0xFFFFFFFFFFFFFFFELL);
  if ((v12 & 1) != 0)
    v13 = *(google::protobuf::internal::ArenaImpl **)v13;
  google::protobuf::internal::ArenaStringPtr::Set((google::protobuf::internal::ArenaStringPtr *)(v8 + 56), &__dst, v13);
  if (SHIBYTE(v20) < 0)
    operator delete((void *)__dst);
  v14 = *a1[1];
  if (*(char *)(v14 + 23) < 0)
    v15 = *(_QWORD *)(v14 + 8);
  else
    LODWORD(v15) = *(unsigned __int8 *)(v14 + 23);
  v16 = *(_DWORD *)(v8 + 40);
  *(_DWORD *)(v8 + 40) = v16 | 8;
  *(_DWORD *)(v8 + 68) = v15;
  if (*(char *)(v14 + 23) < 0)
    v17 = *(_QWORD *)(v14 + 8);
  else
    LODWORD(v17) = *(unsigned __int8 *)(v14 + 23);
  *(_DWORD *)(v8 + 40) = v16 | 0x18;
  *(_DWORD *)(v8 + 72) = v17 + a4;
  return std::string::append((std::string *)v14, (const std::string::value_type *)a3, a4);
}

void sub_245C5D9EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sentencepiece::SentencePieceProcessor::Decode(uint64_t a1@<X0>, int **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int v8;
  int *v9;
  int *v10;
  int v11;
  std::string::size_type v12;
  std::vector<std::string>::pointer end;
  std::string *v14;
  std::string *p_p;
  std::string::size_type size;
  std::string __p;
  int v18;
  std::vector<std::string> v19;

  memset(&v19, 0, sizeof(v19));
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 496))(a1);
  std::vector<std::string>::reserve(&v19, a2[1] - *a2);
  v9 = *a2;
  v10 = a2[1];
  if (*a2 == v10)
  {
LABEL_8:
    (*(void (**)(uint64_t, std::vector<std::string> *, uint64_t))(*(_QWORD *)a1 + 264))(a1, &v19, a3);
  }
  else
  {
    while (1)
    {
      v11 = *v9;
      v18 = v11;
      if (v11 < 0 || v11 >= v8)
        break;
      __p.__r_.__value_.__r.__words[0] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 512))(a1);
      __p.__r_.__value_.__l.__size_ = v12;
      end = v19.__end_;
      if (v19.__end_ >= v19.__end_cap_.__value_)
      {
        v14 = (std::string *)std::vector<std::string>::__emplace_back_slow_path<std::string_view>((uint64_t)&v19, (uint64_t)&__p);
      }
      else
      {
        std::allocator<std::string>::construct[abi:ne180100]<std::string,std::string_view>((int)&v19.__end_cap_, v19.__end_, (uint64_t)&__p);
        v14 = end + 1;
      }
      v19.__end_ = v14;
      if (++v9 == v10)
        goto LABEL_8;
    }
    absl::StrCat<int>("Invalid id: ", 0xCuLL, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    sentencepiece::util::Status::Status(a4, 11, p_p, size);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
}

void sub_245C5DB78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char a17, uint64_t a18)
{
  if (a15 < 0)
    operator delete(__p);
  __p = &a17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void absl::StrCat<int>(void *__src@<X0>, size_t __len@<X1>, std::string *a3@<X8>)
{
  void **v4;
  std::string::size_type v5;
  std::string *v6;
  void *v7[2];
  unsigned __int8 v8;
  std::string __dst;
  _QWORD v10[11];
  char v11;
  uint64_t v12;

  std::string::basic_string[abi:ne180100](&__dst, __src, __len);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v10);
  std::ostream::operator<<();
  std::stringbuf::str();
  v10[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v10 + *(_QWORD *)(v10[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v10[1] = MEMORY[0x24BEDB848] + 16;
  if (v11 < 0)
    operator delete((void *)v10[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x249544EE0](&v12);
  if ((v8 & 0x80u) == 0)
    v4 = v7;
  else
    v4 = (void **)v7[0];
  if ((v8 & 0x80u) == 0)
    v5 = v8;
  else
    v5 = (std::string::size_type)v7[1];
  v6 = std::string::append(&__dst, (const std::string::value_type *)v4, v5);
  *a3 = *v6;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  if ((char)v8 < 0)
    operator delete(v7[0]);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
}

void sub_245C5DCEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

uint64_t sentencepiece::SentencePieceProcessor::GetPieceSize(sentencepiece::SentencePieceProcessor *this)
{
  uint64_t v2;
  sentencepiece::logging *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const char *v10;
  size_t v11;
  _QWORD *v12;
  char v14;
  uint64_t v15;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)this + 88))(&v15);
  v2 = v15;
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v15);
  if (!v2)
    return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 128))(*((_QWORD *)this + 1));
  if ((int)sentencepiece::logging::GetMinLogLevel(v3) <= 2)
  {
    v14 = 0;
    v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"sentencepiece_processor.cc", 26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"(", 1);
    v5 = (_QWORD *)std::ostream::operator<<();
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)") ", 2);
    v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"LOG(", 4);
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"ERROR", 5);
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)") ", 2);
    (*(void (**)(uint64_t *__return_ptr, sentencepiece::SentencePieceProcessor *))(*(_QWORD *)this + 88))(&v15, this);
    v10 = sentencepiece::util::Status::error_message((sentencepiece::util::Status *)&v15);
    v11 = strlen(v10);
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"\nReturns default value ", 23);
    std::ostream::operator<<();
    sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v15);
    sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&v14);
  }
  return 0;
}

void sub_245C5DE6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
  sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&a12);
  _Unwind_Resume(a1);
}

uint64_t sentencepiece::SentencePieceProcessor::PieceToId(_QWORD **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  sentencepiece::logging *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  const char *v14;
  size_t v15;
  _QWORD *v16;
  char v18;
  uint64_t v19;

  ((void (*)(uint64_t *__return_ptr))(*a1)[11])(&v19);
  v6 = v19;
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v19);
  if (!v6)
    return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*a1[1] + 112))(a1[1], a2, a3);
  if ((int)sentencepiece::logging::GetMinLogLevel(v7) <= 2)
  {
    v18 = 0;
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"sentencepiece_processor.cc", 26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"(", 1);
    v9 = (_QWORD *)std::ostream::operator<<();
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)") ", 2);
    v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"LOG(", 4);
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"ERROR", 5);
    v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)") ", 2);
    ((void (*)(uint64_t *__return_ptr, _QWORD **))(*a1)[11])(&v19, a1);
    v14 = sentencepiece::util::Status::error_message((sentencepiece::util::Status *)&v19);
    v15 = strlen(v14);
    v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v14, v15);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"\nReturns default value ", 23);
    std::ostream::operator<<();
    sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v19);
    sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&v18);
  }
  return 0;
}

void sub_245C5DFE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
  sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&a12);
  _Unwind_Resume(a1);
}

const char *sentencepiece::SentencePieceProcessor::IdToPiece(sentencepiece::SentencePieceProcessor *this, uint64_t a2)
{
  uint64_t v4;
  sentencepiece::logging *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  const char *v12;
  size_t v13;
  _QWORD *v14;
  _QWORD *v15;
  char v17;
  uint64_t v18;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)this + 88))(&v18);
  v4 = v18;
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v18);
  if (!v4)
    return (const char *)(*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 1) + 120))(*((_QWORD *)this + 1), a2);
  if ((int)sentencepiece::logging::GetMinLogLevel(v5) <= 2)
  {
    v17 = 0;
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"sentencepiece_processor.cc", 26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"(", 1);
    v7 = (_QWORD *)std::ostream::operator<<();
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)") ", 2);
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"LOG(", 4);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"ERROR", 5);
    v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)") ", 2);
    (*(void (**)(uint64_t *__return_ptr, sentencepiece::SentencePieceProcessor *))(*(_QWORD *)this + 88))(&v18, this);
    v12 = sentencepiece::util::Status::error_message((sentencepiece::util::Status *)&v18);
    v13 = strlen(v12);
    v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v12, v13);
    v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"\nReturns default value ", 23);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"", 0);
    sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v18);
    sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&v17);
  }
  return "";
}

void sub_245C5E16C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
  sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&a12);
  _Unwind_Resume(a1);
}

float sentencepiece::SentencePieceProcessor::GetScore(sentencepiece::SentencePieceProcessor *this, uint64_t a2)
{
  uint64_t v4;
  sentencepiece::logging *v5;
  float v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  const char *v13;
  size_t v14;
  _QWORD *v15;
  char v17;
  uint64_t v18;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)this + 88))(&v18);
  v4 = v18;
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v18);
  if (!v4)
    return (*(float (**)(_QWORD, uint64_t))(**((_QWORD **)this + 1) + 136))(*((_QWORD *)this + 1), a2);
  v6 = 0.0;
  if ((int)sentencepiece::logging::GetMinLogLevel(v5) <= 2)
  {
    v17 = 0;
    v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"sentencepiece_processor.cc", 26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"(", 1);
    v8 = (_QWORD *)std::ostream::operator<<();
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)") ", 2);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"LOG(", 4);
    v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"ERROR", 5);
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)") ", 2);
    (*(void (**)(uint64_t *__return_ptr, sentencepiece::SentencePieceProcessor *))(*(_QWORD *)this + 88))(&v18, this);
    v13 = sentencepiece::util::Status::error_message((sentencepiece::util::Status *)&v18);
    v14 = strlen(v13);
    v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v13, v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"\nReturns default value ", 23);
    std::ostream::operator<<();
    sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v18);
    sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&v17);
  }
  return v6;
}

void sub_245C5E2F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
  sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&a12);
  _Unwind_Resume(a1);
}

uint64_t sentencepiece::SentencePieceProcessor::IsControl(sentencepiece::SentencePieceProcessor *this, uint64_t a2)
{
  uint64_t v4;
  sentencepiece::logging *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  const char *v12;
  size_t v13;
  _QWORD *v14;
  char v16;
  uint64_t v17;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)this + 88))(&v17);
  v4 = v17;
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v17);
  if (!v4)
    return (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 1) + 152))(*((_QWORD *)this + 1), a2);
  if ((int)sentencepiece::logging::GetMinLogLevel(v5) <= 2)
  {
    v16 = 0;
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"sentencepiece_processor.cc", 26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"(", 1);
    v7 = (_QWORD *)std::ostream::operator<<();
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)") ", 2);
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"LOG(", 4);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"ERROR", 5);
    v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)") ", 2);
    (*(void (**)(uint64_t *__return_ptr, sentencepiece::SentencePieceProcessor *))(*(_QWORD *)this + 88))(&v17, this);
    v12 = sentencepiece::util::Status::error_message((sentencepiece::util::Status *)&v17);
    v13 = strlen(v12);
    v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v12, v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"\nReturns default value ", 23);
    std::ostream::operator<<();
    sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v17);
    sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&v16);
  }
  return 0;
}

void sub_245C5E464(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
  sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&a12);
  _Unwind_Resume(a1);
}

uint64_t sentencepiece::SentencePieceProcessor::IsUnknown(sentencepiece::SentencePieceProcessor *this, uint64_t a2)
{
  uint64_t v4;
  sentencepiece::logging *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  const char *v12;
  size_t v13;
  _QWORD *v14;
  char v16;
  uint64_t v17;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)this + 88))(&v17);
  v4 = v17;
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v17);
  if (!v4)
    return (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 1) + 144))(*((_QWORD *)this + 1), a2);
  if ((int)sentencepiece::logging::GetMinLogLevel(v5) <= 2)
  {
    v16 = 0;
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"sentencepiece_processor.cc", 26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"(", 1);
    v7 = (_QWORD *)std::ostream::operator<<();
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)") ", 2);
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"LOG(", 4);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"ERROR", 5);
    v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)") ", 2);
    (*(void (**)(uint64_t *__return_ptr, sentencepiece::SentencePieceProcessor *))(*(_QWORD *)this + 88))(&v17, this);
    v12 = sentencepiece::util::Status::error_message((sentencepiece::util::Status *)&v17);
    v13 = strlen(v12);
    v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v12, v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"\nReturns default value ", 23);
    std::ostream::operator<<();
    sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v17);
    sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&v16);
  }
  return 0;
}

void sub_245C5E5D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
  sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&a12);
  _Unwind_Resume(a1);
}

uint64_t sentencepiece::SentencePieceProcessor::IsUnused(sentencepiece::SentencePieceProcessor *this, uint64_t a2)
{
  uint64_t v4;
  sentencepiece::logging *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  const char *v12;
  size_t v13;
  _QWORD *v14;
  char v16;
  uint64_t v17;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)this + 88))(&v17);
  v4 = v17;
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v17);
  if (!v4)
    return (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 1) + 160))(*((_QWORD *)this + 1), a2);
  if ((int)sentencepiece::logging::GetMinLogLevel(v5) <= 2)
  {
    v16 = 0;
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"sentencepiece_processor.cc", 26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"(", 1);
    v7 = (_QWORD *)std::ostream::operator<<();
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)") ", 2);
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"LOG(", 4);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"ERROR", 5);
    v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)") ", 2);
    (*(void (**)(uint64_t *__return_ptr, sentencepiece::SentencePieceProcessor *))(*(_QWORD *)this + 88))(&v17, this);
    v12 = sentencepiece::util::Status::error_message((sentencepiece::util::Status *)&v17);
    v13 = strlen(v12);
    v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v12, v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"\nReturns default value ", 23);
    std::ostream::operator<<();
    sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v17);
    sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&v16);
  }
  return 0;
}

void sub_245C5E74C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
  sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&a12);
  _Unwind_Resume(a1);
}

uint64_t sentencepiece::SentencePieceProcessor::IsByte(sentencepiece::SentencePieceProcessor *this, uint64_t a2)
{
  uint64_t v4;
  sentencepiece::logging *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  const char *v12;
  size_t v13;
  _QWORD *v14;
  char v16;
  uint64_t v17;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)this + 88))(&v17);
  v4 = v17;
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v17);
  if (!v4)
    return (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 1) + 176))(*((_QWORD *)this + 1), a2);
  if ((int)sentencepiece::logging::GetMinLogLevel(v5) <= 2)
  {
    v16 = 0;
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"sentencepiece_processor.cc", 26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"(", 1);
    v7 = (_QWORD *)std::ostream::operator<<();
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)") ", 2);
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"LOG(", 4);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"ERROR", 5);
    v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)") ", 2);
    (*(void (**)(uint64_t *__return_ptr, sentencepiece::SentencePieceProcessor *))(*(_QWORD *)this + 88))(&v17, this);
    v12 = sentencepiece::util::Status::error_message((sentencepiece::util::Status *)&v17);
    v13 = strlen(v12);
    v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v12, v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"\nReturns default value ", 23);
    std::ostream::operator<<();
    sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v17);
    sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&v16);
  }
  return 0;
}

void sub_245C5E8C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
  sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&a12);
  _Unwind_Resume(a1);
}

uint64_t sentencepiece::SentencePieceProcessor::unk_id(sentencepiece::ModelInterface **this)
{
  const char *v2;
  size_t v3;
  uint64_t v4;

  v2 = sentencepiece::ModelInterface::unk_piece(this[1]);
  v3 = strlen(v2);
  v4 = (*((uint64_t (**)(sentencepiece::ModelInterface **, const char *, size_t))*this + 63))(this, v2, v3);
  if ((*((unsigned int (**)(sentencepiece::ModelInterface **, uint64_t))*this + 66))(this, v4))
    return v4;
  else
    return 0xFFFFFFFFLL;
}

uint64_t sentencepiece::SentencePieceProcessor::bos_id(sentencepiece::ModelInterface **this)
{
  const char *v2;
  size_t v3;
  uint64_t v4;

  v2 = sentencepiece::ModelInterface::bos_piece(this[1]);
  v3 = strlen(v2);
  v4 = (*((uint64_t (**)(sentencepiece::ModelInterface **, const char *, size_t))*this + 63))(this, v2, v3);
  if ((*((unsigned int (**)(sentencepiece::ModelInterface **, uint64_t))*this + 67))(this, v4))
    return v4;
  else
    return 0xFFFFFFFFLL;
}

uint64_t sentencepiece::SentencePieceProcessor::eos_id(sentencepiece::ModelInterface **this)
{
  const char *v2;
  size_t v3;
  uint64_t v4;

  v2 = sentencepiece::ModelInterface::eos_piece(this[1]);
  v3 = strlen(v2);
  v4 = (*((uint64_t (**)(sentencepiece::ModelInterface **, const char *, size_t))*this + 63))(this, v2, v3);
  if ((*((unsigned int (**)(sentencepiece::ModelInterface **, uint64_t))*this + 67))(this, v4))
    return v4;
  else
    return 0xFFFFFFFFLL;
}

uint64_t sentencepiece::SentencePieceProcessor::pad_id(sentencepiece::ModelInterface **this)
{
  const char *v2;
  size_t v3;
  uint64_t v4;

  v2 = sentencepiece::ModelInterface::pad_piece(this[1]);
  v3 = strlen(v2);
  v4 = (*((uint64_t (**)(sentencepiece::ModelInterface **, const char *, size_t))*this + 63))(this, v2, v3);
  if ((*((unsigned int (**)(sentencepiece::ModelInterface **, uint64_t))*this + 67))(this, v4))
    return v4;
  else
    return 0xFFFFFFFFLL;
}

_QWORD *sentencepiece::SentencePieceProcessor::LookupPredictive@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, sentencepiece::util::Status *a5@<X8>)
{
  _QWORD *result;
  int v11;
  uint64_t *v12;
  uint64_t v13;
  _QWORD *v14;
  unsigned int v15;
  _QWORD v16[11];
  char v17;
  uint64_t v18;

  result = ((_QWORD *(*)(sentencepiece::util::Status *__return_ptr))(*a1)[11])(a5);
  if (!*(_QWORD *)a5)
  {
    sentencepiece::util::Status::~Status(a5);
    if (a4)
    {
      std::vector<std::string>::__clear[abi:ne180100](a4);
      v11 = *((char *)a2 + 23);
      if (v11 >= 0)
        v12 = a2;
      else
        v12 = (uint64_t *)*a2;
      if (v11 >= 0)
        v13 = *((unsigned __int8 *)a2 + 23);
      else
        v13 = a2[1];
      return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t *, uint64_t, uint64_t, uint64_t *))(*a1[1] + 200))(a1[1], v12, v13, a3, a4);
    }
    else
    {
      v15 = 13;
      v14 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"(", 1);
      std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)") [", 3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"pieces", 6);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"] ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"output container is null", 24);
      sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status(&v15, (uint64_t)a5);
      v16[0] = *MEMORY[0x24BEDB800];
      *(_QWORD *)((char *)v16 + *(_QWORD *)(v16[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
      v16[1] = MEMORY[0x24BEDB848] + 16;
      if (v17 < 0)
        operator delete((void *)v16[9]);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      return (_QWORD *)MEMORY[0x249544EE0](&v18);
    }
  }
  return result;
}

void sub_245C5EC3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sentencepiece::util::StatusBuilder::~StatusBuilder((sentencepiece::util::StatusBuilder *)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sentencepiece::SentencePieceProcessor::LookupPredictive@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, sentencepiece::util::Status *a5@<X8>)
{
  _QWORD *result;
  int v11;
  uint64_t *v12;
  uint64_t v13;
  _QWORD *v14;
  unsigned int v15;
  _QWORD v16[11];
  char v17;
  uint64_t v18;

  result = ((_QWORD *(*)(sentencepiece::util::Status *__return_ptr))(*a1)[11])(a5);
  if (!*(_QWORD *)a5)
  {
    sentencepiece::util::Status::~Status(a5);
    if (a4)
    {
      a4[1] = *a4;
      v11 = *((char *)a2 + 23);
      if (v11 >= 0)
        v12 = a2;
      else
        v12 = (uint64_t *)*a2;
      if (v11 >= 0)
        v13 = *((unsigned __int8 *)a2 + 23);
      else
        v13 = a2[1];
      return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t *, uint64_t, uint64_t, _QWORD *))(*a1[1] + 208))(a1[1], v12, v13, a3, a4);
    }
    else
    {
      v15 = 13;
      v14 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"(", 1);
      std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)") [", 3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"ids", 3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"] ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"output container is null", 24);
      sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status(&v15, (uint64_t)a5);
      v16[0] = *MEMORY[0x24BEDB800];
      *(_QWORD *)((char *)v16 + *(_QWORD *)(v16[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
      v16[1] = MEMORY[0x24BEDB848] + 16;
      if (v17 < 0)
        operator delete((void *)v16[9]);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      return (_QWORD *)MEMORY[0x249544EE0](&v18);
    }
  }
  return result;
}

void sub_245C5EE18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sentencepiece::util::StatusBuilder::~StatusBuilder((sentencepiece::util::StatusBuilder *)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::map<std::string_view,sentencepiece::SentencePieceProcessor::ExtraOption>::~map[abi:ne180100](uint64_t a1)
{
  std::__tree<std::__value_type<std::string_view,int>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,int>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,int>>>::destroy(a1, *(_QWORD **)(a1 + 8));
  return a1;
}

void sentencepiece::SentencePieceProcessor::LoadFromMemoryMappedFile(sentencepiece::SentencePieceProcessor *this@<X0>, const char *a2@<X1>, unint64_t a3@<X2>, sentencepiece::util::Status *a4@<X8>)
{
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v9;
  _QWORD *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  _QWORD *v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  const char *v19;
  const char *v20;
  _QWORD *v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  const char *v39;
  _QWORD *v40;
  uint64_t v41;
  const char *v42;
  _QWORD v43[11];
  char v44;
  uint64_t v45;
  const char *v46;
  unint64_t v47;

  v46 = a2;
  v47 = a3;
  if (a3 <= 0x13)
  {
    LODWORD(v42) = 13;
    v7 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v43);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"(", 1);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)") [", 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"(size) >= (sizeof(MMapHeader))", 30);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"] ", 2);
    sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&v42, (uint64_t)a4);
    goto LABEL_5;
  }
  if (*(_DWORD *)a2)
  {
    LODWORD(v42) = 13;
    v6 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v43);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"(", 1);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)") [", 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"header->sentinel == 0", 21);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"] ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"This file format is not for mmap-based loading.", 47);
    sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&v42, (uint64_t)a4);
LABEL_5:
    v43[0] = *MEMORY[0x24BEDB800];
    *(_QWORD *)((char *)v43 + *(_QWORD *)(v43[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
    v43[1] = MEMORY[0x24BEDB848] + 16;
    if (v44 < 0)
      operator delete((void *)v43[9]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x249544EE0](&v45);
    return;
  }
  sentencepiece::mmap_util::RemovePrefix(&v46, 0x14uLL, a4);
  if (*(_QWORD *)a4)
    return;
  sentencepiece::util::Status::~Status(a4);
  v9 = *((unsigned int *)a2 + 1);
  if (v47 < v9)
  {
    LODWORD(v42) = 13;
    v10 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v43);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"(", 1);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)") [", 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"(blob.size()) >= (header->model_proto_size)", 43);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"] ", 2);
    sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&v42, (uint64_t)a4);
    goto LABEL_5;
  }
  v11 = v46;
  v12 = operator new();
  sentencepiece::MemoryMappedModelProto::MemoryMappedModelProto(v12, v11, v9);
  v13 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = v12;
  if (v13)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    v12 = *((_QWORD *)this + 4);
  }
  sentencepiece::util::Status::Status((sentencepiece::util::Status *)&v42, (const sentencepiece::util::Status *)(v12 + 88));
  v14 = v42;
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v42);
  if (v14)
  {
    LODWORD(v42) = 13;
    v15 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v43);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"(", 1);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)") [", 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"model_proto->status().ok()", 26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"] ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"Failed to initialize ModelProto.", 32);
    sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&v42, (uint64_t)a4);
    goto LABEL_5;
  }
  sentencepiece::mmap_util::RemovePrefix(&v46, *((unsigned int *)a2 + 1), a4);
  if (*(_QWORD *)a4)
    return;
  sentencepiece::util::Status::~Status(a4);
  if (v47 >= *((unsigned int *)a2 + 2))
    v16 = *((unsigned int *)a2 + 2);
  else
    v16 = v47;
  sentencepiece::ModelFactory::Create(v12, (uint64_t)v46, v16, &v42);
  v17 = v42;
  v42 = 0;
  v18 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = v17;
  if (v18)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
    v19 = v42;
    v42 = 0;
    if (v19)
      (*(void (**)(const char *))(*(_QWORD *)v19 + 8))(v19);
    v17 = (const char *)*((_QWORD *)this + 1);
  }
  if (!v17)
  {
    LODWORD(v42) = 13;
    v21 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v43);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"(", 1);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)") [", 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"model_", 6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"] ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"Failed to initialize Model.", 27);
    sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&v42, (uint64_t)a4);
    goto LABEL_28;
  }
  (*(void (**)(const char **__return_ptr))(*(_QWORD *)v17 + 16))(&v42);
  v20 = v42;
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v42);
  if (v20)
  {
    (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1));
    return;
  }
  sentencepiece::mmap_util::RemovePrefix(&v46, *((unsigned int *)a2 + 2), a4);
  if (!*(_QWORD *)a4)
  {
    sentencepiece::util::Status::~Status(a4);
    v22 = *((unsigned int *)a2 + 3);
    if ((_DWORD)v22)
    {
      if (v47 >= v22)
      {
        v25 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 152))(*((_QWORD *)this + 4));
        v26 = *((unsigned int *)a2 + 3);
        if (v47 < v26)
          v26 = v47;
        v42 = v46;
        v43[0] = v26;
        std::make_unique[abi:ne180100]<sentencepiece::normalizer::Normalizer,sentencepiece::MemoryMappedNormalizerSpec const&,std::string_view>(v25, &v42, &v41);
        v27 = v41;
        v41 = 0;
        v28 = *((_QWORD *)this + 2);
        *((_QWORD *)this + 2) = v27;
        if (v28)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
          v29 = v41;
          v41 = 0;
          if (v29)
            (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
        }
        (*(void (**)(const char **__return_ptr))(**((_QWORD **)this + 2) + 24))(&v42);
        v30 = v42;
        sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v42);
        if (!v30)
        {
          sentencepiece::mmap_util::RemovePrefix(&v46, *((unsigned int *)a2 + 3), a4);
          if (*(_QWORD *)a4)
            return;
          sentencepiece::util::Status::~Status(a4);
          v32 = *((_QWORD *)this + 2);
          v33 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 32))(*((_QWORD *)this + 1));
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v32 + 16))(v32, v33);
          if (*((_DWORD *)a2 + 4))
          {
            v34 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 160))(*((_QWORD *)this + 4));
            v35 = *((unsigned int *)a2 + 4);
            if (v47 < v35)
              v35 = v47;
            v42 = v46;
            v43[0] = v35;
            std::make_unique[abi:ne180100]<sentencepiece::normalizer::Normalizer,sentencepiece::MemoryMappedNormalizerSpec const&,std::string_view>(v34, &v42, &v41);
            v36 = v41;
            v41 = 0;
            v37 = *((_QWORD *)this + 3);
            *((_QWORD *)this + 3) = v36;
            if (v37)
            {
              (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
              v38 = v41;
              v41 = 0;
              if (v38)
                (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
            }
            (*(void (**)(const char **__return_ptr))(**((_QWORD **)this + 3) + 24))(&v42);
            v39 = v42;
            sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v42);
            if (v39)
            {
              LODWORD(v42) = 13;
              v40 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v43);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"(", 1);
              std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)") [", 3);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"denormalizer_->status().ok()", 28);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"] ", 2);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"Failed to initialize Denormalizer.", 34);
              sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&v42, (uint64_t)a4);
              goto LABEL_28;
            }
            sentencepiece::mmap_util::RemovePrefix(&v46, *((unsigned int *)a2 + 4), a4);
            if (*(_QWORD *)a4)
              return;
            sentencepiece::util::Status::~Status(a4);
          }
          sentencepiece::util::Status::Status(a4);
          return;
        }
        LODWORD(v42) = 13;
        v31 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v43);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"(", 1);
        std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)") [", 3);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"normalizer_->status().ok()", 26);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"] ", 2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"Failed to initialize Normalizer.", 32);
        sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&v42, (uint64_t)a4);
      }
      else
      {
        LODWORD(v42) = 13;
        v23 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v43);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"(", 1);
        std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)") [", 3);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"(blob.size()) >= (header->normalizer_size)", 42);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"] ", 2);
        sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&v42, (uint64_t)a4);
      }
    }
    else
    {
      LODWORD(v42) = 13;
      v24 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v43);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"(", 1);
      std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)") [", 3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"(header->normalizer_size) > (0)", 31);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"] ", 2);
      sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)&v42, (uint64_t)a4);
    }
LABEL_28:
    sentencepiece::util::StatusBuilder::~StatusBuilder((sentencepiece::util::StatusBuilder *)&v42);
  }
}

void sub_245C5F7CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sentencepiece::util::StatusBuilder::~StatusBuilder((sentencepiece::util::StatusBuilder *)va);
  _Unwind_Resume(a1);
}

uint64_t std::make_unique[abi:ne180100]<sentencepiece::normalizer::Normalizer,sentencepiece::MemoryMappedNormalizerSpec const&,std::string_view>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t result;

  v6 = operator new();
  result = sentencepiece::normalizer::Normalizer::Normalizer(v6, a1, *a2, a2[1]);
  *a3 = v6;
  return result;
}

void sub_245C5F89C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x249544F58](v1, 0x10F1C40C7D4252BLL);
  _Unwind_Resume(a1);
}

uint64_t sentencepiece::SentencePieceProcessor::CopyAndLoadFromMemoryMappedFile(sentencepiece::SentencePieceProcessor *this, const char *a2)
{
  char *v3;
  uint64_t v4;

  v3 = (char *)this + 96;
  MEMORY[0x249544CE8]((char *)this + 96, a2);
  if (*((char *)this + 119) < 0)
  {
    v3 = (char *)*((_QWORD *)this + 12);
    v4 = *((_QWORD *)this + 13);
  }
  else
  {
    v4 = *((unsigned __int8 *)this + 119);
  }
  return (*(uint64_t (**)(sentencepiece::SentencePieceProcessor *, char *, uint64_t))(*(_QWORD *)this + 48))(this, v3, v4);
}

void sentencepiece::SentencePieceProcessor::MMap(_QWORD *a1@<X0>, char *a2@<X1>, sentencepiece::util::Status *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  std::string __p;

  v6 = operator new();
  *(_QWORD *)v6 = &off_2516E3030;
  *(_QWORD *)(v6 + 8) = 0;
  *(_DWORD *)(v6 + 24) = -1;
  v7 = a1[11];
  a1[11] = v6;
  if (v7)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    v6 = a1[11];
  }
  v8 = a2;
  std::__fs::filesystem::path::path[abi:ne180100]<char const*,void>(&__p, &v8);
  sentencepiece::Mmap<char>::open(v6, (uint64_t)&__p, 0, a3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (!*(_QWORD *)a3)
  {
    sentencepiece::util::Status::~Status(a3);
    (*(void (**)(_QWORD *, _QWORD, _QWORD))(*a1 + 48))(a1, *(_QWORD *)(a1[11] + 8), *(_QWORD *)(a1[11] + 16));
  }
}

void sub_245C5FA00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sentencepiece::Mmap<char>::open(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, _QWORD *a4@<X8>)
{
  std::string *v8;
  int v9;
  int v10;
  _QWORD *v11;
  uint64_t v12;
  std::string::value_type *v13;
  std::string *v14;
  int v15;
  int v16;
  std::string::size_type size;
  std::__fs::filesystem::path *v18;
  std::string *v19;
  off_t st_size;
  void *v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  _BYTE *v25;
  std::string __p[3];
  void *v27;
  char v28;
  _BYTE v29[152];
  std::string v30;
  std::__fs::filesystem::path v31;
  stat v32;

  sentencepiece::Mmap<char>::close(a1);
  if (!a3)
  {
    if (*(char *)(a2 + 23) < 0)
      std::string::__init_copy_ctor_external(__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    else
      __p[0] = *(std::string *)a2;
    if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v8 = __p;
    else
      v8 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
    v9 = open((const char *)v8, 0, __p[0].__r_.__value_.__r.__words[0], __p[0].__r_.__value_.__l.__size_, __p[0].__r_.__value_.__r.__words[2]);
    v10 = v9;
    *(_DWORD *)(a1 + 24) = v9;
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p[0].__r_.__value_.__l.__data_);
      if ((v10 & 0x80000000) == 0)
        goto LABEL_52;
    }
    else if ((v9 & 0x80000000) == 0)
    {
      goto LABEL_52;
    }
    LODWORD(__p[0].__r_.__value_.__l.__data_) = 13;
    v11 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p[0].__r_.__value_.__l.__size_);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/mmap.h", 62);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[0].__r_.__value_.__l.__size_, (uint64_t)"(", 1);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[0].__r_.__value_.__l.__size_, (uint64_t)") [", 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[0].__r_.__value_.__l.__size_, (uint64_t)"(fd = ::open(filename.string().data(), mode)) >= 0", 50);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[0].__r_.__value_.__l.__size_, (uint64_t)"] ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[0].__r_.__value_.__l.__size_, (uint64_t)"open failed: ", 13);
    v12 = *(unsigned __int8 *)(a2 + 23);
    if ((v12 & 0x80u) == 0)
      v13 = (std::string::value_type *)a2;
    else
      v13 = *(std::string::value_type **)a2;
    if ((v12 & 0x80u) != 0)
      v12 = *(_QWORD *)(a2 + 8);
LABEL_66:
    std::__quoted_output[abi:ne180100]<char,std::char_traits<char>>(&__p[0].__r_.__value_.__l.__size_, v13, &v13[v12], 0x22u, 0x5Cu);
    sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)__p, (uint64_t)a4);
    __p[0].__r_.__value_.__l.__size_ = *MEMORY[0x24BEDB800];
    *(std::string::size_type *)((char *)&__p[0].__r_.__value_.__r.__words[1]
                              + *(_QWORD *)(__p[0].__r_.__value_.__l.__size_ - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800]
                                                                                                + 24);
    __p[0].__r_.__value_.__r.__words[2] = MEMORY[0x24BEDB848] + 16;
    if (v28 < 0)
      operator delete(v27);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x249544EE0](v29);
    return;
  }
  std::__fs::filesystem::path::parent_path[abi:ne180100]((const std::__fs::filesystem::path *)a2, (uint64_t)&v31);
  std::__fs::filesystem::path::filename[abi:ne180100]((const std::__fs::filesystem::path *)a2, (uint64_t)&v30);
  std::__fs::filesystem::__status(&v31, 0);
  if (__p[0].__r_.__value_.__s.__data_[0] != 2)
    goto LABEL_30;
  if (SHIBYTE(v31.__pn_.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(__p, v31.__pn_.__r_.__value_.__l.__data_, v31.__pn_.__r_.__value_.__l.__size_);
  else
    __p[0] = v31.__pn_;
  if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v14 = __p;
  else
    v14 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
  v15 = open((const char *)v14, 0, __p[0].__r_.__value_.__r.__words[0], __p[0].__r_.__value_.__l.__size_, __p[0].__r_.__value_.__r.__words[2]);
  v16 = v15;
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p[0].__r_.__value_.__l.__data_);
    if ((v16 & 0x80000000) == 0)
      goto LABEL_27;
LABEL_30:
    LODWORD(__p[0].__r_.__value_.__l.__data_) = 13;
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p[0].__r_.__value_.__l.__size_);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[0].__r_.__value_.__l.__size_, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/mmap.h", 62);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[0].__r_.__value_.__l.__size_, (uint64_t)"(", 1);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[0].__r_.__value_.__l.__size_, (uint64_t)") [", 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[0].__r_.__value_.__l.__size_, (uint64_t)"std::filesystem::is_directory(dir) && (dirfd = ::open(dir.string().data(), mode)) >= 0", 86);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[0].__r_.__value_.__l.__size_, (uint64_t)"] ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[0].__r_.__value_.__l.__size_, (uint64_t)"open failed: ", 13);
    size = HIBYTE(v31.__pn_.__r_.__value_.__r.__words[2]);
    if ((v31.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v18 = &v31;
    else
      v18 = (std::__fs::filesystem::path *)v31.__pn_.__r_.__value_.__r.__words[0];
    if ((v31.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = v31.__pn_.__r_.__value_.__l.__size_;
    std::__quoted_output[abi:ne180100]<char,std::char_traits<char>>(&__p[0].__r_.__value_.__l.__size_, v18, (_BYTE *)v18 + size, 0x22u, 0x5Cu);
    sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)__p, (uint64_t)a4);
    __p[0].__r_.__value_.__l.__size_ = *MEMORY[0x24BEDB800];
    *(std::string::size_type *)((char *)&__p[0].__r_.__value_.__r.__words[1]
                              + *(_QWORD *)(__p[0].__r_.__value_.__l.__size_ - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800]
                                                                                                + 24);
    __p[0].__r_.__value_.__r.__words[2] = MEMORY[0x24BEDB848] + 16;
    if (v28 < 0)
      operator delete(v27);
    goto LABEL_37;
  }
  if (v15 < 0)
    goto LABEL_30;
LABEL_27:
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(__p, v30.__r_.__value_.__l.__data_, v30.__r_.__value_.__l.__size_);
  else
    __p[0] = v30;
  if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v19 = __p;
  else
    v19 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
  *(_DWORD *)(a1 + 24) = openat_authenticated_np(v16, (const char *)v19, 0, -1);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  close(v16);
  if ((*(_DWORD *)(a1 + 24) & 0x80000000) == 0)
  {
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v30.__r_.__value_.__l.__data_);
    if (SHIBYTE(v31.__pn_.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v31.__pn_.__r_.__value_.__l.__data_);
LABEL_52:
    if (fstat(*(_DWORD *)(a1 + 24), &v32) < 0)
    {
      LODWORD(__p[0].__r_.__value_.__l.__data_) = 13;
      v22 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p[0].__r_.__value_.__l.__size_);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/mmap.h", 62);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[0].__r_.__value_.__l.__size_, (uint64_t)"(", 1);
      std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[0].__r_.__value_.__l.__size_, (uint64_t)") [", 3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[0].__r_.__value_.__l.__size_, (uint64_t)"::fstat(fd, &st) >= 0", 21);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[0].__r_.__value_.__l.__size_, (uint64_t)"] ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[0].__r_.__value_.__l.__size_, (uint64_t)"failed to get file size: ", 25);
      v12 = *(unsigned __int8 *)(a2 + 23);
      if ((v12 & 0x80u) == 0)
        v13 = (std::string::value_type *)a2;
      else
        v13 = *(std::string::value_type **)a2;
      if ((v12 & 0x80u) != 0)
        v12 = *(_QWORD *)(a2 + 8);
    }
    else
    {
      st_size = v32.st_size;
      *(_QWORD *)(a1 + 16) = v32.st_size;
      v21 = mmap(0, st_size, 1, 1, *(_DWORD *)(a1 + 24), 0);
      if (v21 != (void *)-1)
      {
        *(_QWORD *)(a1 + 8) = v21;
        close(*(_DWORD *)(a1 + 24));
        *(_DWORD *)(a1 + 24) = -1;
        sentencepiece::util::Status::Status(a4);
        return;
      }
      LODWORD(__p[0].__r_.__value_.__l.__data_) = 13;
      v23 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p[0].__r_.__value_.__l.__size_);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/mmap.h", 62);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[0].__r_.__value_.__l.__size_, (uint64_t)"(", 1);
      std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[0].__r_.__value_.__l.__size_, (uint64_t)") [", 3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[0].__r_.__value_.__l.__size_, (uint64_t)"(p = reinterpret_cast<char*>( ::mmap(0, length, PROT_READ, MAP_SHARED, fd, 0))) != MAP_FAILED", 93);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[0].__r_.__value_.__l.__size_, (uint64_t)"] ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[0].__r_.__value_.__l.__size_, (uint64_t)"mmap() failed: ", 15);
      v12 = *(unsigned __int8 *)(a2 + 23);
      if ((v12 & 0x80u) == 0)
        v13 = (std::string::value_type *)a2;
      else
        v13 = *(std::string::value_type **)a2;
      if ((v12 & 0x80u) != 0)
        v12 = *(_QWORD *)(a2 + 8);
    }
    goto LABEL_66;
  }
  LODWORD(__p[0].__r_.__value_.__l.__data_) = 13;
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__p[0].__r_.__value_.__l.__size_);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[0].__r_.__value_.__l.__size_, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/mmap.h", 62);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[0].__r_.__value_.__l.__size_, (uint64_t)"(", 1);
  std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[0].__r_.__value_.__l.__size_, (uint64_t)") [", 3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[0].__r_.__value_.__l.__size_, (uint64_t)"fd >= 0", 7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[0].__r_.__value_.__l.__size_, (uint64_t)"] ", 2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p[0].__r_.__value_.__l.__size_, (uint64_t)"open failed: ", 13);
  v24 = *(unsigned __int8 *)(a2 + 23);
  if ((v24 & 0x80u) == 0)
    v25 = (_BYTE *)a2;
  else
    v25 = *(_BYTE **)a2;
  if ((v24 & 0x80u) != 0)
    v24 = *(_QWORD *)(a2 + 8);
  std::__quoted_output[abi:ne180100]<char,std::char_traits<char>>(&__p[0].__r_.__value_.__l.__size_, v25, &v25[v24], 0x22u, 0x5Cu);
  sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status((unsigned int *)__p, (uint64_t)a4);
  __p[0].__r_.__value_.__l.__size_ = *MEMORY[0x24BEDB800];
  *(std::string::size_type *)((char *)&__p[0].__r_.__value_.__r.__words[1]
                            + *(_QWORD *)(__p[0].__r_.__value_.__l.__size_ - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800]
                                                                                              + 24);
  __p[0].__r_.__value_.__r.__words[2] = MEMORY[0x24BEDB848] + 16;
  if (v28 < 0)
    operator delete(v27);
LABEL_37:
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x249544EE0](v29);
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v30.__r_.__value_.__l.__data_);
  if (SHIBYTE(v31.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v31.__pn_.__r_.__value_.__l.__data_);
}

void sub_245C601B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  if (*(char *)(v14 - 217) < 0)
    operator delete(*(void **)(v14 - 240));
  if (*(char *)(v14 - 193) < 0)
    operator delete(*(void **)(v14 - 216));
  _Unwind_Resume(exception_object);
}

void sentencepiece::SentencePieceProcessor::MMapAuthenticated(_QWORD *a1@<X0>, char *a2@<X1>, sentencepiece::util::Status *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  std::string __p;

  v6 = operator new();
  *(_QWORD *)v6 = &off_2516E3030;
  *(_QWORD *)(v6 + 8) = 0;
  *(_DWORD *)(v6 + 24) = -1;
  v7 = a1[11];
  a1[11] = v6;
  if (v7)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    v6 = a1[11];
  }
  v8 = a2;
  std::__fs::filesystem::path::path[abi:ne180100]<char const*,void>(&__p, &v8);
  sentencepiece::Mmap<char>::open(v6, (uint64_t)&__p, 1, a3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (!*(_QWORD *)a3)
  {
    sentencepiece::util::Status::~Status(a3);
    (*(void (**)(_QWORD *, _QWORD, _QWORD))(*a1 + 48))(a1, *(_QWORD *)(a1[11] + 8), *(_QWORD *)(a1[11] + 16));
  }
}

void sub_245C60350(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sentencepiece::SentencePieceProcessor::EncodeAsPieces(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 136))(&v2);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v2);
}

void sub_245C603B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void sentencepiece::SentencePieceProcessor::EncodeAsIds(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 144))(&v2);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v2);
}

void sub_245C60414(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sentencepiece::SentencePieceProcessor::NBestEncodeAsPieces(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 176))(&v2);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v2);
}

void sub_245C60478(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void sentencepiece::SentencePieceProcessor::NBestEncodeAsIds(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 184))(&v2);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v2);
}

void sub_245C604D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void sentencepiece::SentencePieceProcessor::SampleEncodeAsPieces(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 192))(&v2);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v2);
}

void sub_245C60538(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void sentencepiece::SentencePieceProcessor::SampleEncodeAsIds(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 200))(&v2);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v2);
}

void sub_245C60598(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sentencepiece::SentencePieceProcessor::SampleEncodeAndScoreAsPieces(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 208))(&v2);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v2);
}

void sub_245C605FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::pair<std::vector<std::string>,float>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void sentencepiece::SentencePieceProcessor::SampleEncodeAndScoreAsIds(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 216))(&v2);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v2);
}

void sub_245C6065C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::pair<std::vector<std::pair<std::string_view,int>>,float>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void sentencepiece::SentencePieceProcessor::DecodePieces(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 152))(&v2);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v2);
}

{
  uint64_t v2;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 160))(&v2);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v2);
}

void sub_245C606BC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_245C60720(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sentencepiece::SentencePieceProcessor::DecodeIds(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 168))(&v2);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v2);
}

void sub_245C60784(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

float sentencepiece::SentencePieceProcessor::CalculateEntropy(uint64_t a1)
{
  float v1;
  uint64_t v3;
  float v4;

  v4 = 0.0;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 224))(&v3);
  v1 = v4;
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v3);
  return v1;
}

void sentencepiece::SentencePieceProcessor::EncodeAsSerializedProto(sentencepiece::SentencePieceText *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  void (**v13)(sentencepiece::ImmutableSentencePieceText *__hidden);
  google::protobuf::MessageLite *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;

  v13 = &off_2516E2E40;
  v15 = 0;
  v16 = 0;
  v14 = (google::protobuf::MessageLite *)sentencepiece::SentencePieceText::default_instance(a1);
  v8 = sentencepiece::ImmutableSentencePieceText::mutable_proto((sentencepiece::ImmutableSentencePieceText *)&v13);
  (*(void (**)(uint64_t *__return_ptr, sentencepiece::SentencePieceText *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 232))(&v12, a1, a2, a3, v8);
  google::protobuf::MessageLite::SerializeAsString(v14, a4);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v12);
  v13 = &off_2516E2E40;
  v9 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_245C608BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)va);
  std::shared_ptr<scml::Config::PathInfo>::~shared_ptr[abi:ne180100](v2 + 16);
  _Unwind_Resume(a1);
}

void sentencepiece::SentencePieceProcessor::SampleEncodeAsSerializedProto(sentencepiece::SentencePieceText *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>, float a6@<S0>)
{
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v16;
  void (**v17)(sentencepiece::ImmutableSentencePieceText *__hidden);
  google::protobuf::MessageLite *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;

  v17 = &off_2516E2E40;
  v19 = 0;
  v20 = 0;
  v18 = (google::protobuf::MessageLite *)sentencepiece::SentencePieceText::default_instance(a1);
  v12 = sentencepiece::ImmutableSentencePieceText::mutable_proto((sentencepiece::ImmutableSentencePieceText *)&v17);
  (*(void (**)(uint64_t *__return_ptr, sentencepiece::SentencePieceText *, uint64_t, uint64_t, uint64_t, uint64_t, float))(*(_QWORD *)a1 + 248))(&v16, a1, a2, a3, a4, v12, a6);
  google::protobuf::MessageLite::SerializeAsString(v18, a5);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v16);
  v17 = &off_2516E2E40;
  v13 = v20;
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_245C609D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)va);
  std::shared_ptr<scml::Config::PathInfo>::~shared_ptr[abi:ne180100](v2 + 16);
  _Unwind_Resume(a1);
}

void sentencepiece::SentencePieceProcessor::NBestEncodeAsSerializedProto(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  _QWORD v15[2];
  std::__shared_weak_count *v16;

  v15[1] = 0;
  v16 = 0;
  v15[0] = &off_2516E2EA0;
  v10 = sentencepiece::ImmutableNBestSentencePieceText::mutable_proto((sentencepiece::ImmutableNBestSentencePieceText *)v15);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 240))(&v14, a1, a2, a3, a4, v10);
  sentencepiece::ImmutableNBestSentencePieceText::SerializeAsString((sentencepiece::ImmutableNBestSentencePieceText *)v15, a5);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v14);
  v15[0] = &off_2516E2EA0;
  v11 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_245C60ADC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&a9);
  std::shared_ptr<scml::Config::PathInfo>::~shared_ptr[abi:ne180100](v10 + 8);
  _Unwind_Resume(a1);
}

void sentencepiece::SentencePieceProcessor::SampleEncodeAndScoreAsSerializedProto(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>, float a8@<S0>)
{
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];
  std::__shared_weak_count *v22;

  v21[1] = 0;
  v22 = 0;
  v21[0] = &off_2516E2EA0;
  v16 = sentencepiece::ImmutableNBestSentencePieceText::mutable_proto((sentencepiece::ImmutableNBestSentencePieceText *)v21);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float))(*(_QWORD *)a1 + 256))(&v20, a1, a2, a3, a4, a5, a6, v16, a8);
  sentencepiece::ImmutableNBestSentencePieceText::SerializeAsString((sentencepiece::ImmutableNBestSentencePieceText *)v21, a7);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v20);
  v21[0] = &off_2516E2EA0;
  v17 = v22;
  if (v22)
  {
    p_shared_owners = (unint64_t *)&v22->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
}

void sub_245C60C08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&a9);
  std::shared_ptr<scml::Config::PathInfo>::~shared_ptr[abi:ne180100](v10 + 8);
  _Unwind_Resume(a1);
}

void sentencepiece::SentencePieceProcessor::DecodePiecesAsSerializedProto(sentencepiece::SentencePieceText *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  void (**v11)(sentencepiece::ImmutableSentencePieceText *__hidden);
  google::protobuf::MessageLite *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;

  v11 = &off_2516E2E40;
  v13 = 0;
  v14 = 0;
  v12 = (google::protobuf::MessageLite *)sentencepiece::SentencePieceText::default_instance(a1);
  v6 = sentencepiece::ImmutableSentencePieceText::mutable_proto((sentencepiece::ImmutableSentencePieceText *)&v11);
  (*(void (**)(uint64_t *__return_ptr, sentencepiece::SentencePieceText *, uint64_t, uint64_t))(*(_QWORD *)a1 + 264))(&v10, a1, a2, v6);
  google::protobuf::MessageLite::SerializeAsString(v12, a3);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v10);
  v11 = &off_2516E2E40;
  v7 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

{
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  void (**v11)(sentencepiece::ImmutableSentencePieceText *__hidden);
  google::protobuf::MessageLite *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;

  v11 = &off_2516E2E40;
  v13 = 0;
  v14 = 0;
  v12 = (google::protobuf::MessageLite *)sentencepiece::SentencePieceText::default_instance(a1);
  v6 = sentencepiece::ImmutableSentencePieceText::mutable_proto((sentencepiece::ImmutableSentencePieceText *)&v11);
  (*(void (**)(uint64_t *__return_ptr, sentencepiece::SentencePieceText *, uint64_t, uint64_t))(*(_QWORD *)a1 + 272))(&v10, a1, a2, v6);
  google::protobuf::MessageLite::SerializeAsString(v12, a3);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v10);
  v11 = &off_2516E2E40;
  v7 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_245C60CFC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)va);
  std::shared_ptr<scml::Config::PathInfo>::~shared_ptr[abi:ne180100](v2 + 16);
  _Unwind_Resume(a1);
}

void sub_245C60DF0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)va);
  std::shared_ptr<scml::Config::PathInfo>::~shared_ptr[abi:ne180100](v2 + 16);
  _Unwind_Resume(a1);
}

void sentencepiece::SentencePieceProcessor::DecodeIdsAsSerializedProto(sentencepiece::SentencePieceText *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  void (**v11)(sentencepiece::ImmutableSentencePieceText *__hidden);
  google::protobuf::MessageLite *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;

  v11 = &off_2516E2E40;
  v13 = 0;
  v14 = 0;
  v12 = (google::protobuf::MessageLite *)sentencepiece::SentencePieceText::default_instance(a1);
  v6 = sentencepiece::ImmutableSentencePieceText::mutable_proto((sentencepiece::ImmutableSentencePieceText *)&v11);
  (*(void (**)(uint64_t *__return_ptr, sentencepiece::SentencePieceText *, uint64_t, uint64_t))(*(_QWORD *)a1 + 280))(&v10, a1, a2, v6);
  google::protobuf::MessageLite::SerializeAsString(v12, a3);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v10);
  v11 = &off_2516E2E40;
  v7 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_245C60EE4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)va);
  std::shared_ptr<scml::Config::PathInfo>::~shared_ptr[abi:ne180100](v2 + 16);
  _Unwind_Resume(a1);
}

void sentencepiece::SentencePieceProcessor::EncodeAsImmutableProto(sentencepiece::SentencePieceText *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, sentencepiece::ImmutableSentencePieceText *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a4 = &off_2516E2E40;
  *((_QWORD *)a4 + 1) = sentencepiece::SentencePieceText::default_instance(a1);
  *((_QWORD *)a4 + 2) = 0;
  *((_QWORD *)a4 + 3) = 0;
  v8 = sentencepiece::ImmutableSentencePieceText::mutable_proto(a4);
  (*(void (**)(uint64_t *__return_ptr, sentencepiece::SentencePieceText *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 232))(&v9, a1, a2, a3, v8);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v9);
}

void sub_245C60F9C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  *v1 = v3;
  std::shared_ptr<scml::Config::PathInfo>::~shared_ptr[abi:ne180100](v2);
  _Unwind_Resume(a1);
}

void sentencepiece::SentencePieceProcessor::SampleEncodeAsImmutableProto(sentencepiece::SentencePieceText *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, sentencepiece::ImmutableSentencePieceText *a5@<X8>, float a6@<S0>)
{
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)a5 = &off_2516E2E40;
  *((_QWORD *)a5 + 1) = sentencepiece::SentencePieceText::default_instance(a1);
  *((_QWORD *)a5 + 2) = 0;
  *((_QWORD *)a5 + 3) = 0;
  v12 = sentencepiece::ImmutableSentencePieceText::mutable_proto(a5);
  (*(void (**)(uint64_t *__return_ptr, sentencepiece::SentencePieceText *, uint64_t, uint64_t, uint64_t, uint64_t, float))(*(_QWORD *)a1 + 248))(&v13, a1, a2, a3, a4, v12, a6);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v13);
}

void sub_245C61064(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  *v1 = v3;
  std::shared_ptr<scml::Config::PathInfo>::~shared_ptr[abi:ne180100](v2);
  _Unwind_Resume(a1);
}

void sentencepiece::SentencePieceProcessor::NBestEncodeAsImmutableProto(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, sentencepiece::ImmutableNBestSentencePieceText *a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)a5 = &off_2516E2EA0;
  *((_QWORD *)a5 + 1) = 0;
  *((_QWORD *)a5 + 2) = 0;
  v9 = sentencepiece::ImmutableNBestSentencePieceText::mutable_proto(a5);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 240))(&v10, a1, a2, a3, a4, v9);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v10);
}

void sub_245C61114(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  *v2 = v3;
  std::shared_ptr<scml::Config::PathInfo>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sentencepiece::SentencePieceProcessor::SampleEncodeAndScoreAsImmutableProto(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, sentencepiece::ImmutableNBestSentencePieceText *a7@<X8>, float a8@<S0>)
{
  uint64_t v15;
  uint64_t v16;

  *(_QWORD *)a7 = &off_2516E2EA0;
  *((_QWORD *)a7 + 1) = 0;
  *((_QWORD *)a7 + 2) = 0;
  v15 = sentencepiece::ImmutableNBestSentencePieceText::mutable_proto(a7);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float))(*(_QWORD *)a1 + 256))(&v16, a1, a2, a3, a4, a5, a6, v15, a8);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v16);
}

void sub_245C611EC(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  *v1 = v3;
  std::shared_ptr<scml::Config::PathInfo>::~shared_ptr[abi:ne180100](v2);
  _Unwind_Resume(a1);
}

void sentencepiece::SentencePieceProcessor::DecodePiecesAsImmutableProto(sentencepiece::SentencePieceText *a1@<X0>, uint64_t a2@<X1>, sentencepiece::ImmutableSentencePieceText *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a3 = &off_2516E2E40;
  *((_QWORD *)a3 + 1) = sentencepiece::SentencePieceText::default_instance(a1);
  *((_QWORD *)a3 + 2) = 0;
  *((_QWORD *)a3 + 3) = 0;
  v6 = sentencepiece::ImmutableSentencePieceText::mutable_proto(a3);
  (*(void (**)(uint64_t *__return_ptr, sentencepiece::SentencePieceText *, uint64_t, uint64_t))(*(_QWORD *)a1 + 264))(&v7, a1, a2, v6);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v7);
}

{
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a3 = &off_2516E2E40;
  *((_QWORD *)a3 + 1) = sentencepiece::SentencePieceText::default_instance(a1);
  *((_QWORD *)a3 + 2) = 0;
  *((_QWORD *)a3 + 3) = 0;
  v6 = sentencepiece::ImmutableSentencePieceText::mutable_proto(a3);
  (*(void (**)(uint64_t *__return_ptr, sentencepiece::SentencePieceText *, uint64_t, uint64_t))(*(_QWORD *)a1 + 272))(&v7, a1, a2, v6);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v7);
}

void sub_245C6128C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  *v1 = v3;
  std::shared_ptr<scml::Config::PathInfo>::~shared_ptr[abi:ne180100](v2);
  _Unwind_Resume(a1);
}

void sub_245C6132C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  *v1 = v3;
  std::shared_ptr<scml::Config::PathInfo>::~shared_ptr[abi:ne180100](v2);
  _Unwind_Resume(a1);
}

void sentencepiece::SentencePieceProcessor::DecodeIdsAsImmutableProto(sentencepiece::SentencePieceText *a1@<X0>, uint64_t a2@<X1>, sentencepiece::ImmutableSentencePieceText *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a3 = &off_2516E2E40;
  *((_QWORD *)a3 + 1) = sentencepiece::SentencePieceText::default_instance(a1);
  *((_QWORD *)a3 + 2) = 0;
  *((_QWORD *)a3 + 3) = 0;
  v6 = sentencepiece::ImmutableSentencePieceText::mutable_proto(a3);
  (*(void (**)(uint64_t *__return_ptr, sentencepiece::SentencePieceText *, uint64_t, uint64_t))(*(_QWORD *)a1 + 280))(&v7, a1, a2, v6);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v7);
}

void sub_245C613CC(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  *v1 = v3;
  std::shared_ptr<scml::Config::PathInfo>::~shared_ptr[abi:ne180100](v2);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText_SentencePiece>::TypeHandler>(uint64_t a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1705);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1706);
    v5 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) < (current_size_): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * a2 + 8);
}

void sub_245C614A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText>::TypeHandler>(uint64_t a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1705);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1706);
    v5 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) < (current_size_): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * a2 + 8);
}

void sub_245C6157C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::RepeatedPtrFieldBase::Mutable<google::protobuf::RepeatedPtrField<sentencepiece::ModelProto_SentencePiece>::TypeHandler>(uint64_t a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1727);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1728);
    v5 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) < (current_size_): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * a2 + 8);
}

void sub_245C61658(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

char **absl::internal::Splitter::Splitter(char **a1, uint64_t a2, unint64_t a3, unsigned __int8 *a4, uint64_t a5, int a6)
{
  unsigned __int8 **v9;
  unsigned __int8 *v10;
  int v11;
  unsigned __int8 *v14;
  _QWORD *v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  uint64_t v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  _BOOL4 v22;
  unsigned __int8 *v23;
  unsigned __int8 *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  BOOL v34;
  unint64_t v35;
  unsigned __int8 *v36;
  unint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  char *v44;
  char *v45;
  char *v46;
  char *v47;

  v9 = 0;
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v10 = 0;
  if (a5)
  {
    v11 = a6;
    if (a3)
    {
      v9 = 0;
      v10 = 0;
      v14 = (unsigned __int8 *)(a2 + a3);
      v15 = a1 + 2;
      while (2)
      {
        v16 = &v10[a2];
        v17 = &v10[a2];
LABEL_5:
        v18 = a5;
        v19 = a4;
        while (*v17 != *v19)
        {
          ++v19;
          if (!--v18)
          {
            if (++v17 != v14)
              goto LABEL_5;
            goto LABEL_37;
          }
        }
        if (v17 != v14)
        {
          v20 = &v17[-a2];
          if (&v17[-a2] != (unsigned __int8 *)-1)
          {
            v21 = (unsigned __int8 *)(v20 - v10);
            v22 = v20 >= v10;
            if (!v11)
              v22 = v20 > v10;
            if (v22)
            {
              v23 = (unsigned __int8 *)(a3 - (_QWORD)v10);
              if (v23 >= v21)
                v24 = v21;
              else
                v24 = v23;
              if ((unint64_t)v9 >= *v15)
              {
                v25 = ((char *)v9 - *a1) >> 4;
                if ((unint64_t)(v25 + 1) >> 60)
                  std::vector<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>>::__throw_length_error[abi:ne180100]();
                v26 = *v15 - (_QWORD)*a1;
                v27 = v26 >> 3;
                if (v26 >> 3 <= (unint64_t)(v25 + 1))
                  v27 = v25 + 1;
                if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF0)
                  v28 = 0xFFFFFFFFFFFFFFFLL;
                else
                  v28 = v27;
                if (v28)
                  v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<_NSRange>>((uint64_t)v15, v28);
                else
                  v29 = 0;
                v30 = &v29[16 * v25];
                *(_QWORD *)v30 = v16;
                *((_QWORD *)v30 + 1) = v24;
                v32 = *a1;
                v31 = a1[1];
                v33 = v30;
                if (v31 != *a1)
                {
                  do
                  {
                    *((_OWORD *)v33 - 1) = *((_OWORD *)v31 - 1);
                    v33 -= 16;
                    v31 -= 16;
                  }
                  while (v31 != v32);
                  v31 = *a1;
                }
                v9 = (unsigned __int8 **)(v30 + 16);
                *a1 = v33;
                a1[1] = v30 + 16;
                a1[2] = &v29[16 * v28];
                if (v31)
                  operator delete(v31);
                v11 = a6;
                v15 = a1 + 2;
              }
              else
              {
                *v9 = v16;
                v9[1] = v24;
                v9 += 2;
              }
              a1[1] = (char *)v9;
            }
            v10 = v20 + 1;
            if (a3 > (unint64_t)(v20 + 1))
              continue;
          }
        }
        break;
      }
    }
  }
LABEL_37:
  v34 = a3 > (unint64_t)v10;
  v35 = a3 - (_QWORD)v10;
  if (v34)
  {
    v36 = &v10[a2];
    v37 = (unint64_t)a1[2];
    if ((unint64_t)v9 >= v37)
    {
      v39 = ((char *)v9 - *a1) >> 4;
      if ((unint64_t)(v39 + 1) >> 60)
        std::vector<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>>::__throw_length_error[abi:ne180100]();
      v40 = v37 - (_QWORD)*a1;
      v41 = v40 >> 3;
      if (v40 >> 3 <= (unint64_t)(v39 + 1))
        v41 = v39 + 1;
      if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF0)
        v42 = 0xFFFFFFFFFFFFFFFLL;
      else
        v42 = v41;
      if (v42)
        v43 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<_NSRange>>((uint64_t)(a1 + 2), v42);
      else
        v43 = 0;
      v44 = &v43[16 * v39];
      v45 = &v43[16 * v42];
      *(_QWORD *)v44 = v36;
      *((_QWORD *)v44 + 1) = v35;
      v38 = v44 + 16;
      v47 = *a1;
      v46 = a1[1];
      if (v46 != *a1)
      {
        do
        {
          *((_OWORD *)v44 - 1) = *((_OWORD *)v46 - 1);
          v44 -= 16;
          v46 -= 16;
        }
        while (v46 != v47);
        v46 = *a1;
      }
      *a1 = v44;
      a1[1] = v38;
      a1[2] = v45;
      if (v46)
        operator delete(v46);
    }
    else
    {
      *v9 = v36;
      v9[1] = (unsigned __int8 *)v35;
      v38 = (char *)(v9 + 2);
    }
    a1[1] = v38;
  }
  return a1;
}

void sub_245C6191C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

std::vector<std::string> *__cdecl std::vector<std::string>::vector(std::vector<std::string> *this, std::vector<std::string>::size_type __n)
{
  std::vector<std::string>::pointer end;
  size_t v5;

  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<std::string>::__vallocate[abi:ne180100](this, __n);
    end = this->__end_;
    v5 = 24 * ((24 * __n - 24) / 0x18) + 24;
    bzero(end, v5);
    this->__end_ = (std::vector<std::string>::pointer)((char *)end + v5);
  }
  return this;
}

void sub_245C619CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::string_view>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type,std::allocator<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 16 * a2);
    a1[1] = &v4[16 * a2];
  }
  return a1;
}

void sub_245C61A38(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void absl::StrReplaceAll(void *__src@<X0>, size_t __len@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  std::string *p_dst;
  std::string::size_type size;
  char *v10;
  int64_t v11;
  const std::string::value_type *v12;
  std::string::size_type v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::string __dst;
  std::string *v18;
  std::string::size_type v19;

  std::string::basic_string[abi:ne180100](&__dst, __src, __len);
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  v6 = *a3;
  v7 = a3[1];
  while (v6 != v7)
  {
    if (*(char *)(a4 + 23) < 0)
    {
      **(_BYTE **)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
    }
    else
    {
      *(_BYTE *)a4 = 0;
      *(_BYTE *)(a4 + 23) = 0;
    }
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_dst = &__dst;
    else
      p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    else
      size = __dst.__r_.__value_.__l.__size_;
    v10 = *(char **)v6;
    v11 = *(_QWORD *)(v6 + 8);
    v12 = *(const std::string::value_type **)(v6 + 16);
    v13 = *(_QWORD *)(v6 + 24);
    v18 = p_dst;
    v19 = size;
    if (v11)
    {
      v14 = std::string_view::find[abi:ne180100]((uint64_t *)&v18, v10, v11, 0);
      if (v14 == -1)
      {
        v16 = 0;
      }
      else
      {
        v15 = v14;
        v16 = 0;
        do
        {
          std::string::append((std::string *)a4, (const std::string::value_type *)v18 + v16, v15 - v16);
          std::string::append((std::string *)a4, v12, v13);
          v16 = v15 + v11;
          v15 = std::string_view::find[abi:ne180100]((uint64_t *)&v18, v10, v11, v15 + v11);
        }
        while (v15 != -1);
      }
      p_dst = (std::string *)((char *)v18 + v16);
      size = v19 - v16;
    }
    std::string::append((std::string *)a4, (const std::string::value_type *)p_dst, size);
    std::string::operator=(&__dst, (const std::string *)a4);
    v6 += 32;
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
}

void sub_245C61BB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (*(char *)(v15 + 23) < 0)
    operator delete(*(void **)v15);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::string_view::find[abi:ne180100](uint64_t *a1, char *a2, int64_t a3, unint64_t a4)
{
  unint64_t v4;
  uint64_t v6;
  void *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  int v13;
  uint64_t v14;
  char *v15;

  v4 = a1[1];
  if (v4 < a4)
    return -1;
  if (a3)
  {
    v6 = *a1;
    v7 = (void *)(*a1 + a4);
    v8 = (char *)(v6 + v4);
    v9 = v6 + v4 - (_QWORD)v7;
    if (v9 >= a3)
    {
      v13 = *a2;
      do
      {
        v14 = v9 - a3;
        if (v14 == -1)
          break;
        v15 = (char *)memchr(v7, v13, v14 + 1);
        if (!v15)
          break;
        v10 = v15;
        if (!memcmp(v15, a2, a3))
          goto LABEL_6;
        v7 = v10 + 1;
        v9 = v8 - (v10 + 1);
      }
      while (v9 >= a3);
    }
    v10 = v8;
LABEL_6:
    if (v10 == v8)
      return -1;
    else
      return (uint64_t)&v10[-v6];
  }
  return a4;
}

void std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        v6 = v4;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::vector<int>>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<std::vector<int>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;

  v3 = *a1;
  v2 = a1[1];
  if (v2 != *a1)
  {
    v4 = a1[1];
    do
    {
      v6 = *(void **)(v4 - 24);
      v4 -= 24;
      v5 = v6;
      if (v6)
      {
        *(_QWORD *)(v2 - 16) = v5;
        operator delete(v5);
      }
      v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

void std::vector<std::pair<std::vector<std::string>,float>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 4;
        v6 = v4;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t google::protobuf::internal::RepeatedPtrFieldBase::Mutable<google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText_SentencePiece>::TypeHandler>(uint64_t a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1727);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1728);
    v5 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) < (current_size_): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * a2 + 8);
}

void sub_245C61ED0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

_QWORD *_ZNSt3__115allocate_sharedB8ne180100IN13sentencepiece17SentencePieceTextENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x70uLL);
  result = _ZNSt3__120__shared_ptr_emplaceIN13sentencepiece17SentencePieceTextENS_9allocatorIS2_EEEC2B8ne180100IJES4_Li0EEES4_DpOT_(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_245C61F24(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *_ZNSt3__120__shared_ptr_emplaceIN13sentencepiece17SentencePieceTextENS_9allocatorIS2_EEEC2B8ne180100IJES4_Li0EEES4_DpOT_(_QWORD *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_2516E4358;
  sentencepiece::SentencePieceText::SentencePieceText((sentencepiece::SentencePieceText *)(a1 + 3), 0);
  return a1;
}

void sub_245C61F70(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<sentencepiece::SentencePieceText>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_2516E4358;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<sentencepiece::SentencePieceText>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_2516E4358;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x249544F58);
}

void std::__shared_ptr_emplace<sentencepiece::SentencePieceText>::__on_zero_shared(uint64_t a1)
{
  sentencepiece::SentencePieceText::~SentencePieceText((sentencepiece::SentencePieceText *)(a1 + 24));
}

_QWORD *_ZNSt3__115allocate_sharedB8ne180100IN13sentencepiece22NBestSentencePieceTextENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x48uLL);
  result = _ZNSt3__120__shared_ptr_emplaceIN13sentencepiece22NBestSentencePieceTextENS_9allocatorIS2_EEEC2B8ne180100IJES4_Li0EEES4_DpOT_(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_245C62004(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *_ZNSt3__120__shared_ptr_emplaceIN13sentencepiece22NBestSentencePieceTextENS_9allocatorIS2_EEEC2B8ne180100IJES4_Li0EEES4_DpOT_(_QWORD *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_2516E4390;
  sentencepiece::NBestSentencePieceText::NBestSentencePieceText((sentencepiece::NBestSentencePieceText *)(a1 + 3), 0);
  return a1;
}

void sub_245C62050(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<sentencepiece::NBestSentencePieceText>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_2516E4390;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<sentencepiece::NBestSentencePieceText>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_2516E4390;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x249544F58);
}

void std::__shared_ptr_emplace<sentencepiece::NBestSentencePieceText>::__on_zero_shared(uint64_t a1)
{
  sentencepiece::NBestSentencePieceText::~NBestSentencePieceText((sentencepiece::NBestSentencePieceText *)(a1 + 24));
}

sentencepiece::ModelProto *std::unique_ptr<sentencepiece::ModelProto>::reset[abi:ne180100](sentencepiece::ModelProto **a1, sentencepiece::ModelProto *a2)
{
  sentencepiece::ModelProto *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sentencepiece::ModelProto::~ModelProto(result);
    JUMPOUT(0x249544F58);
  }
  return result;
}

void absl::StrCat<std::string,char [2],std::string>(void *__src@<X0>, size_t __len@<X1>, void **a3@<X2>, char *a4@<X3>, void **a5@<X4>, std::string *a6@<X8>)
{
  int v10;
  void *v11;
  size_t v12;
  std::string *p_p;
  std::string::size_type size;
  std::string *v15;
  std::string __p;
  std::string __dst;

  std::string::basic_string[abi:ne180100](&__dst, __src, __len);
  v10 = *((char *)a3 + 23);
  if (v10 >= 0)
    v11 = a3;
  else
    v11 = *a3;
  if (v10 >= 0)
    v12 = *((unsigned __int8 *)a3 + 23);
  else
    v12 = (size_t)a3[1];
  absl::StrCat<char [2],std::string>(v11, v12, a4, a5, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v15 = std::string::append(&__dst, (const std::string::value_type *)p_p, size);
  *a6 = *v15;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
}

void sub_245C621B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void absl::StrCat<char [2],std::string>(void *__src@<X0>, size_t __len@<X1>, char *a3@<X2>, void **a4@<X3>, std::string *a5@<X8>)
{
  size_t v8;
  std::string *p_p;
  std::string::size_type size;
  std::string *v11;
  std::string __p;
  std::string __dst;

  std::string::basic_string[abi:ne180100](&__dst, __src, __len);
  v8 = strlen(a3);
  absl::StrCat<std::string>(a3, v8, a4, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v11 = std::string::append(&__dst, (const std::string::value_type *)p_p, size);
  *a5 = *v11;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
}

void sub_245C622A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void absl::StrCat<std::string>(void *__src@<X0>, size_t __len@<X1>, void **a3@<X2>, std::string *a4@<X8>)
{
  int v6;
  void *v7;
  size_t v8;
  void **v9;
  std::string::size_type v10;
  std::string *v11;
  void *__p[2];
  unsigned __int8 v13;
  std::string __dst;

  std::string::basic_string[abi:ne180100](&__dst, __src, __len);
  v6 = *((char *)a3 + 23);
  if (v6 >= 0)
    v7 = a3;
  else
    v7 = *a3;
  if (v6 >= 0)
    v8 = *((unsigned __int8 *)a3 + 23);
  else
    v8 = (size_t)a3[1];
  std::string::basic_string[abi:ne180100](__p, v7, v8);
  if ((v13 & 0x80u) == 0)
    v9 = __p;
  else
    v9 = (void **)__p[0];
  if ((v13 & 0x80u) == 0)
    v10 = v13;
  else
    v10 = (std::string::size_type)__p[1];
  v11 = std::string::append(&__dst, (const std::string::value_type *)v9, v10);
  *a4 = *v11;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if ((char)v13 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
}

void sub_245C62390(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t std::set<std::string_view>::set[abi:ne180100]<std::__wrap_iter<std::string_view const*>>(uint64_t a1, _OWORD *a2, _OWORD *a3)
{
  _QWORD *v4;
  _OWORD *v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      std::__tree<std::string_view>::__emplace_hint_unique_key_args<std::string_view,std::string_view const&>((uint64_t **)a1, v4, (uint64_t)v6, v6);
      ++v6;
    }
    while (v6 != a3);
  }
  return a1;
}

void sub_245C6242C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<std::string_view,int>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,int>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,int>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::string_view>::__emplace_hint_unique_key_args<std::string_view,std::string_view const&>(uint64_t **a1, _QWORD *a2, uint64_t a3, _OWORD *a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t v10;
  uint64_t v11;

  v6 = std::__tree<std::string_view>::__find_equal<std::string_view>(a1, a2, &v11, &v10, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = (uint64_t *)operator new(0x30uLL);
    *((_OWORD *)v7 + 2) = *a4;
    std::__tree<std::string>::__insert_node_at(a1, v11, v8, v7);
  }
  return v7;
}

uint64_t *std::__tree<std::string_view>::__find_equal<std::string_view>(_QWORD *a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5)
{
  _QWORD *v9;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  BOOL v17;
  _QWORD *v18;

  v9 = a1 + 1;
  if (a1 + 1 == a2
    || std::less<std::string_view>::operator()[abi:ne180100]((uint64_t)(a1 + 2), a5, (uint64_t)(a2 + 4)))
  {
    if ((_QWORD *)*a1 == a2)
    {
      v12 = a2;
LABEL_16:
      if (*a2)
      {
        *a3 = v12;
        return v12 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    v11 = (_QWORD *)*a2;
    if (*a2)
    {
      do
      {
        v12 = v11;
        v11 = (_QWORD *)v11[1];
      }
      while (v11);
    }
    else
    {
      v16 = a2;
      do
      {
        v12 = (_QWORD *)v16[2];
        v17 = *v12 == (_QWORD)v16;
        v16 = v12;
      }
      while (v17);
    }
    if (std::less<std::string_view>::operator()[abi:ne180100]((uint64_t)(a1 + 2), (uint64_t)(v12 + 4), a5))
      goto LABEL_16;
    return std::__tree<std::__value_type<std::string_view,int>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,int>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,int>>>::__find_equal<std::string_view>((uint64_t)a1, a3, a5);
  }
  if (std::less<std::string_view>::operator()[abi:ne180100]((uint64_t)(a1 + 2), (uint64_t)(a2 + 4), a5))
  {
    a4 = a2 + 1;
    v13 = a2[1];
    if (v13)
    {
      v14 = (_QWORD *)a2[1];
      do
      {
        v15 = v14;
        v14 = (_QWORD *)*v14;
      }
      while (v14);
    }
    else
    {
      v18 = a2;
      do
      {
        v15 = (_QWORD *)v18[2];
        v17 = *v15 == (_QWORD)v18;
        v18 = v15;
      }
      while (!v17);
    }
    if (v15 != v9)
    {
      if (!std::less<std::string_view>::operator()[abi:ne180100]((uint64_t)(a1 + 2), a5, (uint64_t)(v15 + 4)))return std::__tree<std::__value_type<std::string_view,int>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,int>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,int>>>::__find_equal<std::string_view>((uint64_t)a1, a3, a5);
      v13 = *a4;
    }
    if (v13)
    {
      *a3 = v15;
      return v15;
    }
    else
    {
      *a3 = a2;
    }
    return a4;
  }
  *a3 = a2;
  *a4 = (uint64_t)a2;
  return a4;
}

_QWORD *std::__tree<std::string_view>::find<std::string_view>(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  _QWORD *v6;
  int v7;
  _QWORD *v8;

  v2 = (_QWORD *)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 8);
  if (!v3)
    return v2;
  v5 = a1 + 16;
  v6 = (_QWORD *)(a1 + 8);
  do
  {
    v7 = std::less<std::string_view>::operator()[abi:ne180100](v5, (uint64_t)(v3 + 4), a2);
    v8 = v3 + 1;
    if (!v7)
    {
      v8 = v3;
      v6 = v3;
    }
    v3 = (_QWORD *)*v8;
  }
  while (*v8);
  if (v6 == v2 || std::less<std::string_view>::operator()[abi:ne180100](v5, a2, (uint64_t)(v6 + 4)))
    return v2;
  return v6;
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  std::ios_base *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = MEMORY[0x24BEDB858];
  v3 = MEMORY[0x24BEDB858] + 104;
  *(_QWORD *)(a1 + 128) = MEMORY[0x24BEDB858] + 104;
  *(_QWORD *)(a1 + 16) = v2 + 64;
  v4 = a1 + 16;
  v5 = (_QWORD *)MEMORY[0x24BEDB7F0];
  v6 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 16);
  v7 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 24);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + *(_QWORD *)(v6 - 24)) = v7;
  *(_QWORD *)(a1 + 8) = 0;
  v8 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v8, (void *)(a1 + 24));
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  v9 = v5[4];
  v10 = v5[5];
  *(_QWORD *)(a1 + 16) = v9;
  *(_QWORD *)(v4 + *(_QWORD *)(v9 - 24)) = v10;
  v11 = v5[1];
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + *(_QWORD *)(v11 - 24)) = v5[6];
  *(_QWORD *)a1 = v2 + 24;
  *(_QWORD *)(a1 + 128) = v3;
  *(_QWORD *)(a1 + 16) = v2 + 64;
  std::streambuf::basic_streambuf();
  *(_QWORD *)(a1 + 24) = MEMORY[0x24BEDB848] + 16;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 24;
  return a1;
}

void sub_245C627F0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::iostream::~basic_iostream();
  MEMORY[0x249544EE0](v1);
  _Unwind_Resume(a1);
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = MEMORY[0x24BEDB7F0];
  v3 = *MEMORY[0x24BEDB7F0];
  *(_QWORD *)a1 = *MEMORY[0x24BEDB7F0];
  v4 = *(_QWORD *)(v2 + 72);
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 64);
  *(_QWORD *)(a1 + 24) = MEMORY[0x24BEDB848] + 16;
  *(_QWORD *)(a1 + 16) = v4;
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x249544EE0](a1 + 128);
  return a1;
}

uint64_t std::vector<std::string>::__emplace_back_slow_path<std::string const&>(uint64_t *a1, __int128 *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  std::string *v10;
  std::__split_buffer<std::string>::pointer end;
  __int128 v12;
  uint64_t v13;
  std::__split_buffer<std::string> __v;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 2);
  if (v9)
    v10 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v7, v9);
  else
    v10 = 0;
  end = v10 + v4;
  __v.__first_ = v10;
  __v.__begin_ = end;
  __v.__end_ = end;
  __v.__end_cap_.__value_ = &v10[v9];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(end, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    end = __v.__end_;
  }
  else
  {
    v12 = *a2;
    end->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&end->__r_.__value_.__l.__data_ = v12;
  }
  __v.__end_ = end + 1;
  std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a1, &__v);
  v13 = a1[1];
  std::__split_buffer<std::string>::~__split_buffer(&__v);
  return v13;
}

void sub_245C629AC(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a10);
  _Unwind_Resume(a1);
}

std::string *std::vector<std::vector<std::string>>::__construct_one_at_end[abi:ne180100]<std::vector<std::string>&>(uint64_t a1, __int128 **a2)
{
  std::string *v3;
  std::string *result;

  v3 = *(std::string **)(a1 + 8);
  v3->__r_.__value_.__r.__words[0] = 0;
  v3->__r_.__value_.__l.__size_ = 0;
  v3->__r_.__value_.__r.__words[2] = 0;
  result = std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v3, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  *(_QWORD *)(a1 + 8) = v3 + 1;
  return result;
}

void sub_245C62A14(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<std::string>>::__emplace_back_slow_path<std::vector<std::string>&>(uint64_t *a1, __int128 **a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  std::string *v11;
  uint64_t v12;
  void *v14[2];
  std::string *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v7, v9);
  else
    v10 = 0;
  v11 = (std::string *)&v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = &v10[24 * v9];
  v11->__r_.__value_.__r.__words[0] = 0;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v11, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  ++v15;
  std::vector<std::vector<std::string>>::__swap_out_circular_buffer(a1, v14);
  v12 = a1[1];
  std::__split_buffer<std::vector<std::string>>::~__split_buffer(v14);
  return v12;
}

void sub_245C62B28(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<std::string>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<std::string>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::string>>,std::reverse_iterator<std::vector<std::string>*>,std::reverse_iterator<std::vector<std::string>*>,std::reverse_iterator<std::vector<std::string>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::string>>,std::reverse_iterator<std::vector<std::string>*>,std::reverse_iterator<std::vector<std::string>*>,std::reverse_iterator<std::vector<std::string>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::string>>,std::reverse_iterator<std::vector<std::string>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::string>>,std::reverse_iterator<std::vector<std::string>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::string>>,std::reverse_iterator<std::vector<std::string>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::string>>,std::reverse_iterator<std::vector<std::string>*>>::operator()[abi:ne180100](uint64_t a1)
{
  void **v1;
  void **v2;
  void **v3;

  v1 = *(void ***)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(void ***)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = v1;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
    v1 += 3;
  }
}

void **std::__split_buffer<std::vector<std::string>>::~__split_buffer(void **a1)
{
  std::__split_buffer<std::vector<std::string>>::clear[abi:ne180100]((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<std::vector<std::string>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t i;
  uint64_t v2;
  void **v4;
  void **v5;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    v4 = (void **)(i - 24);
    *(_QWORD *)(a1 + 16) = v4;
    v5 = v4;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
}

_QWORD *std::vector<std::vector<int>>::__construct_one_at_end[abi:ne180100]<std::vector<int>&>(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *result;

  v3 = *(_QWORD **)(a1 + 8);
  *v3 = 0;
  v3[1] = 0;
  v3[2] = 0;
  result = std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v3, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  *(_QWORD *)(a1 + 8) = v3 + 3;
  return result;
}

void sub_245C62D94(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<int>>::__emplace_back_slow_path<std::vector<int>&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = &v10[24 * v9];
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v11, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  v15 += 24;
  std::vector<std::vector<int>>::__swap_out_circular_buffer(a1, v14);
  v12 = a1[1];
  std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_245C62E9C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<float>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_245C62F0C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<std::vector<int>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<int>>,std::reverse_iterator<std::vector<int>*>,std::reverse_iterator<std::vector<int>*>,std::reverse_iterator<std::vector<int>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<int>>,std::reverse_iterator<std::vector<int>*>,std::reverse_iterator<std::vector<int>*>,std::reverse_iterator<std::vector<int>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<int>>,std::reverse_iterator<std::vector<int>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<int>>,std::reverse_iterator<std::vector<int>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<int>>,std::reverse_iterator<std::vector<int>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<int>>,std::reverse_iterator<std::vector<int>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = *(void **)v1;
    if (*(_QWORD *)v1)
    {
      *(_QWORD *)(v1 + 8) = v3;
      operator delete(v3);
    }
    v1 += 24;
  }
}

uint64_t std::__split_buffer<std::vector<int>>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<std::vector<int>>::__destruct_at_end[abi:ne180100](a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__split_buffer<std::vector<int>>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v5;

  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != a2)
  {
    v5 = *(void **)(v2 - 24);
    *(_QWORD *)(a1 + 16) = v2 - 24;
    if (v5)
    {
      *(_QWORD *)(v2 - 16) = v5;
      operator delete(v5);
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v2 -= 24;
    }
  }
}

uint64_t std::vector<std::pair<std::vector<std::string>,float>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::vector<std::string>,float>>,std::reverse_iterator<std::pair<std::vector<std::string>,float>*>,std::reverse_iterator<std::pair<std::vector<std::string>,float>*>,std::reverse_iterator<std::pair<std::vector<std::string>,float>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::vector<std::string>,float>>,std::reverse_iterator<std::pair<std::vector<std::string>,float>*>,std::reverse_iterator<std::pair<std::vector<std::string>,float>*>,std::reverse_iterator<std::pair<std::vector<std::string>,float>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 32) = 0;
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      v8 = *(_OWORD *)(a3 - 32);
      a3 -= 32;
      *(_OWORD *)(v7 - 32) = v8;
      *(_QWORD *)(v7 - 16) = *(_QWORD *)(a3 + 16);
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)a3 = 0;
      *(_DWORD *)(v7 - 8) = *(_DWORD *)(a3 + 24);
      v7 = *((_QWORD *)&v14 + 1) - 32;
      *((_QWORD *)&v14 + 1) -= 32;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<std::string>,float>>,std::reverse_iterator<std::pair<std::vector<std::string>,float>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<std::string>,float>>,std::reverse_iterator<std::pair<std::vector<std::string>,float>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<std::string>,float>>,std::reverse_iterator<std::pair<std::vector<std::string>,float>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<std::string>,float>>,std::reverse_iterator<std::pair<std::vector<std::string>,float>*>>::operator()[abi:ne180100](uint64_t a1)
{
  void **v1;
  void **v2;
  void **v3;

  v1 = *(void ***)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(void ***)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = v1;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
    v1 += 4;
  }
}

void **std::__split_buffer<std::pair<std::vector<std::string>,float>>::~__split_buffer(void **a1)
{
  std::__split_buffer<std::pair<std::vector<std::string>,float>>::clear[abi:ne180100]((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<std::pair<std::vector<std::string>,float>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t i;
  uint64_t v2;
  void **v4;
  void **v5;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    v4 = (void **)(i - 32);
    *(_QWORD *)(a1 + 16) = v4;
    v5 = v4;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
}

float std::vector<std::pair<std::vector<std::string>,float>>::__construct_one_at_end[abi:ne180100]<std::vector<std::string>&,float>(uint64_t a1, __int128 **a2, float *a3)
{
  uint64_t v5;
  float result;

  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)v5 = 0;
  *(_QWORD *)(v5 + 8) = 0;
  *(_QWORD *)(v5 + 16) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)v5, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  result = *a3;
  *(float *)(v5 + 24) = *a3;
  *(_QWORD *)(a1 + 8) = v5 + 32;
  return result;
}

void sub_245C633C0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<std::vector<std::string>,float>>::__emplace_back_slow_path<std::vector<std::string>&,float>(uint64_t *a1, __int128 **a2, _DWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  std::string *v13;
  uint64_t v14;
  void *v16[2];
  std::string *v17;
  char *v18;
  uint64_t *v19;

  v4 = *a1;
  v5 = (a1[1] - *a1) >> 5;
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59)
    std::vector<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>>::__throw_length_error[abi:ne180100]();
  v9 = (uint64_t)(a1 + 2);
  v10 = a1[2] - v4;
  if (v10 >> 4 > v6)
    v6 = v10 >> 4;
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0)
    v11 = 0x7FFFFFFFFFFFFFFLL;
  else
    v11 = v6;
  v19 = a1 + 2;
  if (v11)
    v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>>>(v9, v11);
  else
    v12 = 0;
  v13 = (std::string *)&v12[32 * v5];
  v16[0] = v12;
  v16[1] = v13;
  v17 = v13;
  v18 = &v12[32 * v11];
  v13->__r_.__value_.__r.__words[0] = 0;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v13, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  LODWORD(v13[1].__r_.__value_.__l.__data_) = *a3;
  v17 = (std::string *)((char *)v17 + 32);
  std::vector<std::pair<std::vector<std::string>,float>>::__swap_out_circular_buffer(a1, v16);
  v14 = a1[1];
  std::__split_buffer<std::pair<std::vector<std::string>,float>>::~__split_buffer(v16);
  return v14;
}

void sub_245C634C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::pair<std::vector<std::string>,float>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<std::vector<int>,float>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::vector<int>,float>>,std::reverse_iterator<std::pair<std::vector<int>,float>*>,std::reverse_iterator<std::pair<std::vector<int>,float>*>,std::reverse_iterator<std::pair<std::vector<int>,float>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::vector<int>,float>>,std::reverse_iterator<std::pair<std::vector<int>,float>*>,std::reverse_iterator<std::pair<std::vector<int>,float>*>,std::reverse_iterator<std::pair<std::vector<int>,float>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 32) = 0;
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      v8 = *(_OWORD *)(a3 - 32);
      a3 -= 32;
      *(_OWORD *)(v7 - 32) = v8;
      *(_QWORD *)(v7 - 16) = *(_QWORD *)(a3 + 16);
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)a3 = 0;
      *(_DWORD *)(v7 - 8) = *(_DWORD *)(a3 + 24);
      v7 = *((_QWORD *)&v14 + 1) - 32;
      *((_QWORD *)&v14 + 1) -= 32;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<int>,float>>,std::reverse_iterator<std::pair<std::vector<int>,float>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<int>,float>>,std::reverse_iterator<std::pair<std::vector<int>,float>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<int>,float>>,std::reverse_iterator<std::pair<std::vector<int>,float>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<int>,float>>,std::reverse_iterator<std::pair<std::vector<int>,float>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = *(void **)v1;
    if (*(_QWORD *)v1)
    {
      *(_QWORD *)(v1 + 8) = v3;
      operator delete(v3);
    }
    v1 += 32;
  }
}

uint64_t std::__split_buffer<std::pair<std::vector<int>,float>>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<std::pair<std::vector<int>,float>>::__destruct_at_end[abi:ne180100](a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__split_buffer<std::pair<std::vector<int>,float>>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v5;

  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != a2)
  {
    v5 = *(void **)(v2 - 32);
    *(_QWORD *)(a1 + 16) = v2 - 32;
    if (v5)
    {
      *(_QWORD *)(v2 - 24) = v5;
      operator delete(v5);
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v2 -= 32;
    }
  }
}

float std::vector<std::pair<std::vector<int>,float>>::__construct_one_at_end[abi:ne180100]<std::vector<int>&,float>(uint64_t a1, uint64_t a2, float *a3)
{
  uint64_t v5;
  float result;

  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)v5 = 0;
  *(_QWORD *)(v5 + 8) = 0;
  *(_QWORD *)(v5 + 16) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)v5, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  result = *a3;
  *(float *)(v5 + 24) = *a3;
  *(_QWORD *)(a1 + 8) = v5 + 32;
  return result;
}

void sub_245C63750(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<std::vector<int>,float>>::__emplace_back_slow_path<std::vector<int>&,float>(uint64_t *a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[2];
  char *v17;
  char *v18;
  uint64_t *v19;

  v4 = *a1;
  v5 = (a1[1] - *a1) >> 5;
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59)
    std::vector<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>>::__throw_length_error[abi:ne180100]();
  v9 = (uint64_t)(a1 + 2);
  v10 = a1[2] - v4;
  if (v10 >> 4 > v6)
    v6 = v10 >> 4;
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0)
    v11 = 0x7FFFFFFFFFFFFFFLL;
  else
    v11 = v6;
  v19 = a1 + 2;
  if (v11)
    v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>>>(v9, v11);
  else
    v12 = 0;
  v13 = &v12[32 * v5];
  v16[0] = v12;
  v16[1] = v13;
  v17 = v13;
  v18 = &v12[32 * v11];
  *(_QWORD *)v13 = 0;
  *((_QWORD *)v13 + 1) = 0;
  *((_QWORD *)v13 + 2) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v13, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  *((_DWORD *)v13 + 6) = *a3;
  v17 += 32;
  std::vector<std::pair<std::vector<int>,float>>::__swap_out_circular_buffer(a1, v16);
  v14 = a1[1];
  std::__split_buffer<std::pair<std::vector<int>,float>>::~__split_buffer((uint64_t)v16);
  return v14;
}

void sub_245C63844(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::pair<std::vector<int>,float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::discrete_distribution<int>::param_type::param_type[abi:ne180100]<std::__wrap_iter<float *>>(uint64_t a1, float *a2, float *a3)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  std::vector<double>::__init_with_size[abi:ne180100]<std::__wrap_iter<float *>,std::__wrap_iter<float *>>((char *)a1, a2, a3, a3 - a2);
  std::discrete_distribution<int>::param_type::__init((double **)a1);
  return a1;
}

void sub_245C63894(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::discrete_distribution<int>::param_type::__init(double **a1)
{
  double *v1;
  double *v2;
  uint64_t v4;
  double v5;
  double *v6;
  double v7;
  double *v8;
  uint64_t v9;
  double *v10;
  double *v11;
  double v12;
  double *v13;
  double v14;
  double *v15;
  double *v16;
  __int128 v17;

  v1 = *a1;
  v2 = a1[1];
  if (*a1 != v2)
  {
    if ((unint64_t)((char *)v2 - (char *)v1) < 9)
    {
      a1[1] = v1;
      std::vector<double>::shrink_to_fit((uint64_t)a1);
    }
    else
    {
      v4 = v2 - v1;
      v5 = 0.0;
      v6 = *a1;
      do
      {
        v7 = *v6++;
        v5 = v5 + v7;
      }
      while (v6 != v2);
      while (v1 < v2)
      {
        *v1 = *v1 / v5;
        ++v1;
      }
      std::vector<double>::vector(&v16, v4 - 1);
      v8 = *a1;
      v9 = (uint64_t)(a1[1] - 1);
      v10 = v16;
      if (*a1 != (double *)v9)
      {
        v11 = v8 + 1;
        v12 = *v8;
        *v16 = *v8;
        if (v8 + 1 != (double *)v9)
        {
          v13 = v10 + 1;
          do
          {
            v14 = *v11++;
            v12 = v12 + v14;
            *v13++ = v12;
          }
          while (v11 != (double *)v9);
        }
      }
      *a1 = v10;
      v15 = a1[2];
      *(_OWORD *)(a1 + 1) = v17;
      v16 = v8;
      *((_QWORD *)&v17 + 1) = v15;
      if (v8)
      {
        *(_QWORD *)&v17 = v8;
        operator delete(v8);
      }
    }
  }
}

char *std::vector<double>::__init_with_size[abi:ne180100]<std::__wrap_iter<float *>,std::__wrap_iter<float *>>(char *result, float *a2, float *a3, unint64_t a4)
{
  char *v6;
  double *v7;
  float v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<unsigned long>::__vallocate[abi:ne180100](result, a4);
    v7 = (double *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2++;
      *v7++ = v8;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_245C63A00(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<double>::shrink_to_fit(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  _BYTE *v5;
  unint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;

  v2 = a1 + 16;
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(char **)a1;
  v5 = *(_BYTE **)(a1 + 8);
  v6 = (v5 - v4) >> 3;
  if (v6 < (v3 - (uint64_t)v4) >> 3)
  {
    if (v5 == v4)
    {
      v11 = 0;
      v9 = 8 * v6;
    }
    else
    {
      v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v2, v6);
      v4 = *(char **)a1;
      v8 = *(char **)(a1 + 8);
      v9 = (uint64_t)&v7[8 * v6];
      v11 = &v7[8 * v10];
      if (v8 != *(char **)a1)
      {
        v12 = v9;
        do
        {
          v13 = *((_QWORD *)v8 - 1);
          v8 -= 8;
          *(_QWORD *)(v12 - 8) = v13;
          v12 -= 8;
        }
        while (v8 != v4);
        goto LABEL_9;
      }
    }
    v12 = v9;
LABEL_9:
    *(_QWORD *)a1 = v12;
    *(_QWORD *)(a1 + 8) = v9;
    *(_QWORD *)(a1 + 16) = v11;
    if (v4)
      operator delete(v4);
  }
}

_QWORD *std::vector<double>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned long>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_245C63B28(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

unint64_t std::discrete_distribution<int>::operator()<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>>(int a1, std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *this, double **a3)
{
  double *v5;
  double *v6;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v7;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v8;
  unint64_t v9;
  unint64_t v10;
  double *v11;
  double *v12;
  double v13;

  v5 = *a3;
  v6 = a3[1];
  v7 = std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(this);
  v8 = std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(this);
  if (v6 != v5)
  {
    v9 = v6 - v5;
    do
    {
      v10 = v9 >> 1;
      v11 = &v5[v9 >> 1];
      v13 = *v11;
      v12 = v11 + 1;
      v9 += ~(v9 >> 1);
      if (((double)v7 + (double)v8 * 4294967300.0) * 5.42101086e-20 + 0.0 < v13)
        v9 = v10;
      else
        v5 = v12;
    }
    while (v9);
    v6 = v5;
  }
  return (unint64_t)((char *)v6 - (char *)*a3) >> 3;
}

std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *this)
{
  size_t i;
  size_t v2;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v3;

  i = this->__i_;
  v2 = (i + 1) % 0x270;
  v3 = this->__x_[(i + 397) % 0x270] ^ ((this->__x_[v2] & 0x7FFFFFFE | this->__x_[i] & 0x80000000) >> 1) ^ ((int)(this->__x_[v2] << 31) >> 31) & 0x9908B0DF;
  this->__x_[i] = v3;
  this->__i_ = v2;
  LODWORD(i) = ((v3 ^ (v3 >> 11)) << 7) & 0x9D2C5680 ^ v3 ^ (v3 >> 11);
  return ((_DWORD)i << 15) & 0xEFC60000 ^ i ^ ((((_DWORD)i << 15) & 0xEFC60000 ^ i) >> 18);
}

uint64_t std::vector<std::string>::__emplace_back_slow_path<std::string_view>(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  std::string *v7;
  uint64_t v8;
  std::__split_buffer<std::string> __v;

  v3 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>>::__throw_length_error[abi:ne180100]();
  if (0x5555555555555556 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) > v4)
    v4 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 16);
  if (v6)
    v7 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(a1 + 16, v6);
  else
    v7 = 0;
  __v.__first_ = v7;
  __v.__begin_ = v7 + v3;
  __v.__end_cap_.__value_ = &v7[v6];
  std::allocator<std::string>::construct[abi:ne180100]<std::string,std::string_view>(a1 + 16, __v.__begin_, a2);
  __v.__end_ = __v.__begin_ + 1;
  std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a1, &__v);
  v8 = *(_QWORD *)(a1 + 8);
  std::__split_buffer<std::string>::~__split_buffer(&__v);
  return v8;
}

void sub_245C63D90(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a10);
  _Unwind_Resume(a1);
}

void std::allocator<std::string>::construct[abi:ne180100]<std::string,std::string_view>(int a1, _BYTE *__dst, uint64_t a3)
{
  _QWORD *v3;
  size_t v4;
  const void *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v3 = __dst;
  v4 = *(_QWORD *)(a3 + 8);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = *(const void **)a3;
  if (v4 >= 0x17)
  {
    v6 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v6 = v4 | 7;
    v7 = v6 + 1;
    v8 = operator new(v6 + 1);
    v3[1] = v4;
    v3[2] = v7 | 0x8000000000000000;
    *v3 = v8;
    v3 = v8;
  }
  else
  {
    __dst[23] = v4;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v3, v5, v4);
LABEL_9:
  *((_BYTE *)v3 + v4) = 0;
}

uint64_t *sentencepiece::swap(uint64_t *this, sentencepiece::SentencePieceText_SentencePiece *a2, sentencepiece::SentencePieceText_SentencePiece *a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;

  if (a2 != (sentencepiece::SentencePieceText_SentencePiece *)this)
  {
    v3 = this[1];
    v4 = (_QWORD *)(v3 & 0xFFFFFFFFFFFFFFFELL);
    if ((v3 & 1) != 0)
      v4 = (_QWORD *)*v4;
    v5 = *((_QWORD *)a2 + 1);
    v6 = (_QWORD *)(v5 & 0xFFFFFFFFFFFFFFFELL);
    if ((v5 & 1) != 0)
      v6 = (_QWORD *)*v6;
    if (v4 == v6)
      return sentencepiece::SentencePieceText_SentencePiece::InternalSwap((sentencepiece::SentencePieceText_SentencePiece *)this, a2);
    else
      return (uint64_t *)google::protobuf::internal::GenericSwap((google::protobuf::internal *)this, a2, a3);
  }
  return this;
}

uint64_t std::map<std::string_view,sentencepiece::SentencePieceProcessor::ExtraOption>::map[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a3)
  {
    v6 = 24 * a3;
    do
    {
      std::__tree<std::__value_type<std::string_view,sentencepiece::SentencePieceProcessor::ExtraOption>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,sentencepiece::SentencePieceProcessor::ExtraOption>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,sentencepiece::SentencePieceProcessor::ExtraOption>>>::__emplace_hint_unique_key_args<std::string_view,std::pair<std::string_view const,sentencepiece::SentencePieceProcessor::ExtraOption> const&>((uint64_t **)a1, v4, a2, a2);
      a2 += 24;
      v6 -= 24;
    }
    while (v6);
  }
  return a1;
}

void sub_245C63EE8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<std::string_view,int>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,int>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,int>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

_OWORD *std::__tree<std::__value_type<std::string_view,sentencepiece::SentencePieceProcessor::ExtraOption>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,sentencepiece::SentencePieceProcessor::ExtraOption>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,sentencepiece::SentencePieceProcessor::ExtraOption>>>::__emplace_hint_unique_key_args<std::string_view,std::pair<std::string_view const,sentencepiece::SentencePieceProcessor::ExtraOption> const&>(uint64_t **a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v6;
  _OWORD *v7;
  uint64_t **v8;
  uint64_t v10;
  uint64_t v11;

  v6 = std::__tree<std::string_view>::__find_equal<std::string_view>(a1, a2, &v11, &v10, a3);
  v7 = (_OWORD *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x38uLL);
    v7[2] = *(_OWORD *)a4;
    *((_QWORD *)v7 + 6) = *(_QWORD *)(a4 + 16);
    std::__tree<std::string>::__insert_node_at(a1, v11, v8, (uint64_t *)v7);
  }
  return v7;
}

_QWORD *sentencepiece::Mmap<char>::~Mmap(_QWORD *a1)
{
  *a1 = &off_2516E3030;
  sentencepiece::Mmap<char>::close((uint64_t)a1);
  return a1;
}

void sentencepiece::Mmap<char>::~Mmap(_QWORD *a1)
{
  *a1 = &off_2516E3030;
  sentencepiece::Mmap<char>::close((uint64_t)a1);
  JUMPOUT(0x249544F58);
}

void *sentencepiece::Mmap<char>::close(uint64_t a1)
{
  int v2;
  void *result;

  v2 = *(_DWORD *)(a1 + 24);
  if ((v2 & 0x80000000) == 0)
  {
    close(v2);
    *(_DWORD *)(a1 + 24) = -1;
  }
  result = *(void **)(a1 + 8);
  if (result)
    result = (void *)munmap(result, *(_QWORD *)(a1 + 16));
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

double std::__fs::filesystem::path::filename[abi:ne180100]@<D0>(const std::__fs::filesystem::path *a1@<X0>, uint64_t a2@<X8>)
{
  std::__fs::filesystem::path::__string_view v3;
  __int128 *p_dst;
  std::basic_string_view<_CharT, _Traits>::size_type v5;
  std::basic_string_view<_CharT, _Traits>::size_type v6;
  double result;
  __int128 __dst;
  unint64_t v9;

  v3 = std::__fs::filesystem::path::__filename(a1);
  if (v3.__size_ >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v3.__size_ >= 0x17)
  {
    v5 = (v3.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3.__size_ | 7) != 0x17)
      v5 = v3.__size_ | 7;
    v6 = v5 + 1;
    p_dst = (__int128 *)operator new(v5 + 1);
    *((_QWORD *)&__dst + 1) = v3.__size_;
    v9 = v6 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
  }
  else
  {
    HIBYTE(v9) = v3.__size_;
    p_dst = &__dst;
    if (!v3.__size_)
      goto LABEL_9;
  }
  memmove(p_dst, v3.__data_, v3.__size_);
LABEL_9:
  *((_BYTE *)p_dst + v3.__size_) = 0;
  result = *(double *)&__dst;
  *(_OWORD *)a2 = __dst;
  *(_QWORD *)(a2 + 16) = v9;
  return result;
}

_QWORD *std::__quoted_output[abi:ne180100]<char,std::char_traits<char>>(_QWORD *a1, _BYTE *a2, _BYTE *a3, unsigned __int8 __c, unsigned __int8 a5)
{
  int v10;
  std::string *v11;
  std::string::size_type size;
  _QWORD *v13;
  std::string v15;

  memset(&v15, 0, sizeof(v15));
  std::string::push_back(&v15, __c);
  while (a2 != a3)
  {
    v10 = *a2;
    if (v10 == a5 || v10 == __c)
    {
      std::string::push_back(&v15, a5);
      LOBYTE(v10) = *a2;
    }
    std::string::push_back(&v15, v10);
    ++a2;
  }
  std::string::push_back(&v15, __c);
  if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v11 = &v15;
  else
    v11 = (std::string *)v15.__r_.__value_.__r.__words[0];
  if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v15.__r_.__value_.__r.__words[2]);
  else
    size = v15.__r_.__value_.__l.__size_;
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v11, size);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  return v13;
}

void sub_245C641E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *std::__fs::filesystem::path::path[abi:ne180100]<char const*,void>(std::string *this, char **a2)
{
  char *v3;
  char *v4;

  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  v3 = *a2;
  v4 = v3 - 1;
  while (*++v4)
    ;
  std::string::append[abi:ne180100]<char const*,0>(this, v3, v4);
  return this;
}

void sub_245C64248(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sentencepiece::SentencePieceProcessor::ResetVocabulary()
{
  __assert_rtn("_internal_set_type", "sentencepiece_model.pb.h", 4686, "::sentencepiece::ModelProto_SentencePiece_Type_IsValid(value)");
}

void sentencepiece::unigram::Lattice::~Lattice(sentencepiece::unigram::Lattice *this)
{
  void *v2;
  void **v3;

  *(_QWORD *)this = &off_2516E3290;
  sentencepiece::model::FreeList<sentencepiece::unigram::Lattice::Node>::~FreeList((_QWORD *)this + 12);
  v3 = (void **)((char *)this + 72);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = (void **)((char *)this + 48);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
}

{
  sentencepiece::unigram::Lattice::~Lattice(this);
  JUMPOUT(0x249544F58);
}

uint64_t sentencepiece::model::FreeList<sentencepiece::unigram::Lattice::Node>::Allocate(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  char **v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t result;

  v2 = a1[5];
  v3 = a1[6];
  v4 = a1[4];
  if (v4 >= v3)
  {
    v4 = 0;
    ++v2;
    a1[4] = 0;
    a1[5] = v2;
  }
  v5 = a1[1];
  v6 = (char **)(a1 + 1);
  if (v2 == (a1[2] - v5) >> 3)
  {
    v7 = 48 * v3;
    is_mul_ok(v3, 0x30uLL);
    v8 = (_QWORD *)operator new[]();
    v9 = v8;
    if (v3)
    {
      v10 = v8;
      do
      {
        *v10 = 0;
        v10[1] = 0;
        v10 += 6;
        v7 -= 48;
      }
      while (v7);
    }
    bzero(v8, 48 * a1[6]);
    v11 = a1[3];
    v12 = (_QWORD *)a1[2];
    if ((unint64_t)v12 >= v11)
    {
      v14 = ((char *)v12 - *v6) >> 3;
      if ((unint64_t)(v14 + 1) >> 61)
        std::vector<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>>::__throw_length_error[abi:ne180100]();
      v15 = v11 - (_QWORD)*v6;
      v16 = v15 >> 2;
      if (v15 >> 2 <= (unint64_t)(v14 + 1))
        v16 = v14 + 1;
      if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
        v17 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v17 = v16;
      if (v17)
        v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v17);
      else
        v18 = 0;
      v19 = &v18[8 * v14];
      v20 = &v18[8 * v17];
      *(_QWORD *)v19 = v9;
      v13 = v19 + 8;
      v22 = (char *)a1[1];
      v21 = (char *)a1[2];
      if (v21 != v22)
      {
        do
        {
          v23 = *((_QWORD *)v21 - 1);
          v21 -= 8;
          *((_QWORD *)v19 - 1) = v23;
          v19 -= 8;
        }
        while (v21 != v22);
        v21 = *v6;
      }
      a1[1] = v19;
      a1[2] = v13;
      a1[3] = v20;
      if (v21)
        operator delete(v21);
    }
    else
    {
      *v12 = v9;
      v13 = v12 + 1;
    }
    a1[2] = v13;
    v5 = a1[1];
    v4 = a1[4];
    v2 = a1[5];
  }
  result = *(_QWORD *)(v5 + 8 * v2) + 48 * v4;
  a1[4] = v4 + 1;
  return result;
}

void sentencepiece::unigram::Lattice::Clear(sentencepiece::unigram::Lattice *this)
{
  std::vector<std::vector<int>>::__clear[abi:ne180100]((uint64_t *)this + 6);
  std::vector<std::vector<int>>::__clear[abi:ne180100]((uint64_t *)this + 9);
  *((_QWORD *)this + 1) = "";
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 4) = *((_QWORD *)this + 3);
  sentencepiece::model::FreeList<sentencepiece::unigram::Lattice::Node>::Free((uint64_t)this + 96);
}

void sentencepiece::model::FreeList<sentencepiece::unigram::Lattice::Node>::Free(uint64_t a1)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_DWORD *)(a1 + 40);
  if (v2 + 1 < (int)((*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 3))
    v3 = v2 + 1;
  else
    v3 = (*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 3;
  if (v3 >= 1)
  {
    v4 = 0;
    v5 = 8 * v3;
    do
    {
      bzero(*(void **)(*(_QWORD *)(a1 + 8) + v4), 48 * *(_QWORD *)(a1 + 48));
      v4 += 8;
    }
    while (v5 != v4);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
}

void sentencepiece::unigram::Lattice::SetSentence(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  char **v6;
  _QWORD *v7;
  _QWORD *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  int v31;
  unsigned int v32;
  uint64_t v33;
  _DWORD *v34;
  void **v35;
  _QWORD *v36;
  unint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  char *v44;
  char *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  _DWORD *v49;
  _DWORD *v50;
  void **v51;
  void **v52;
  _QWORD *v53;
  unint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char *v60;
  char *v61;
  char *v62;
  char *v63;
  char *v64;
  uint64_t v65;

  sentencepiece::unigram::Lattice::Clear((sentencepiece::unigram::Lattice *)a1);
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a3;
  v6 = (char **)(a1 + 24);
  std::vector<char const*>::reserve((void **)(a1 + 24), a3 + 1);
  if (a3)
  {
    v7 = (_QWORD *)(a1 + 40);
    v8 = *(_QWORD **)(a1 + 32);
    do
    {
      if ((int)a3 >= asc_245CA23B3[(unint64_t)*a2 >> 4])
        v9 = asc_245CA23B3[(unint64_t)*a2 >> 4];
      else
        v9 = a3;
      if ((unint64_t)v8 >= *v7)
      {
        v10 = ((char *)v8 - *v6) >> 3;
        if ((unint64_t)(v10 + 1) >> 61)
          goto LABEL_76;
        v11 = *v7 - (_QWORD)*v6;
        v12 = v11 >> 2;
        if (v11 >> 2 <= (unint64_t)(v10 + 1))
          v12 = v10 + 1;
        if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
          v13 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v13 = v12;
        if (v13)
          v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(a1 + 40, v13);
        else
          v14 = 0;
        v15 = &v14[8 * v10];
        *(_QWORD *)v15 = a2;
        v8 = v15 + 8;
        v17 = *(char **)(a1 + 24);
        v16 = *(char **)(a1 + 32);
        if (v16 != v17)
        {
          do
          {
            v18 = *((_QWORD *)v16 - 1);
            v16 -= 8;
            *((_QWORD *)v15 - 1) = v18;
            v15 -= 8;
          }
          while (v16 != v17);
          v16 = *v6;
        }
        *(_QWORD *)(a1 + 24) = v15;
        *(_QWORD *)(a1 + 32) = v8;
        *(_QWORD *)(a1 + 40) = &v14[8 * v13];
        if (v16)
          operator delete(v16);
      }
      else
      {
        *v8++ = a2;
      }
      *(_QWORD *)(a1 + 32) = v8;
      a2 += v9;
      a3 -= v9;
    }
    while (a3);
  }
  else
  {
    v8 = *(_QWORD **)(a1 + 32);
  }
  v19 = *(_QWORD *)(a1 + 40);
  if ((unint64_t)v8 >= v19)
  {
    v21 = ((char *)v8 - *v6) >> 3;
    if ((unint64_t)(v21 + 1) >> 61)
LABEL_76:
      std::vector<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>>::__throw_length_error[abi:ne180100]();
    v22 = v19 - (_QWORD)*v6;
    v23 = v22 >> 2;
    if (v22 >> 2 <= (unint64_t)(v21 + 1))
      v23 = v21 + 1;
    if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8)
      v24 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v24 = v23;
    if (v24)
      v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(a1 + 40, v24);
    else
      v25 = 0;
    v26 = &v25[8 * v21];
    v27 = &v25[8 * v24];
    *(_QWORD *)v26 = a2;
    v20 = v26 + 8;
    v29 = *(char **)(a1 + 24);
    v28 = *(char **)(a1 + 32);
    if (v28 != v29)
    {
      do
      {
        v30 = *((_QWORD *)v28 - 1);
        v28 -= 8;
        *((_QWORD *)v26 - 1) = v30;
        v26 -= 8;
      }
      while (v28 != v29);
      v28 = *v6;
    }
    *(_QWORD *)(a1 + 24) = v26;
    *(_QWORD *)(a1 + 32) = v20;
    *(_QWORD *)(a1 + 40) = v27;
    if (v28)
      operator delete(v28);
  }
  else
  {
    *v8 = a2;
    v20 = v8 + 1;
  }
  *(_QWORD *)(a1 + 32) = v20;
  v31 = (((unint64_t)v20 - *(_QWORD *)(a1 + 24)) >> 3) - 1;
  v32 = v31 & ~(v31 >> 31);
  std::vector<std::vector<sentencepiece::unigram::Lattice::Node *>>::resize((uint64_t *)(a1 + 48), v32 + 1);
  std::vector<std::vector<sentencepiece::unigram::Lattice::Node *>>::resize((uint64_t *)(a1 + 72), v32 + 1);
  v33 = 0;
  do
  {
    std::vector<char const*>::reserve((void **)(*(_QWORD *)(a1 + 48) + v33), 0x10uLL);
    std::vector<char const*>::reserve((void **)(*(_QWORD *)(a1 + 72) + v33), 0x10uLL);
    v33 += 24;
  }
  while (24 * v32 + 24 != v33);
  v34 = (_DWORD *)sentencepiece::model::FreeList<sentencepiece::unigram::Lattice::Node>::Allocate((_QWORD *)(a1 + 96));
  v34[6] = *(_DWORD *)(a1 + 128) + *(_DWORD *)(a1 + 136) * *(_DWORD *)(a1 + 144) - 1;
  v34[7] = -1;
  v34[4] = 0;
  v35 = *(void ***)(a1 + 72);
  v36 = v35[1];
  v37 = (unint64_t)v35[2];
  if ((unint64_t)v36 >= v37)
  {
    v39 = ((char *)v36 - (_BYTE *)*v35) >> 3;
    if ((unint64_t)(v39 + 1) >> 61)
      std::vector<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>>::__throw_length_error[abi:ne180100]();
    v40 = v37 - (_QWORD)*v35;
    v41 = v40 >> 2;
    if (v40 >> 2 <= (unint64_t)(v39 + 1))
      v41 = v39 + 1;
    if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF8)
      v42 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v42 = v41;
    if (v42)
      v43 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(v35 + 2), v42);
    else
      v43 = 0;
    v44 = &v43[8 * v39];
    v45 = &v43[8 * v42];
    *(_QWORD *)v44 = v34;
    v38 = v44 + 8;
    v47 = (char *)*v35;
    v46 = (char *)v35[1];
    if (v46 != *v35)
    {
      do
      {
        v48 = *((_QWORD *)v46 - 1);
        v46 -= 8;
        *((_QWORD *)v44 - 1) = v48;
        v44 -= 8;
      }
      while (v46 != v47);
      v46 = (char *)*v35;
    }
    *v35 = v44;
    v35[1] = v38;
    v35[2] = v45;
    if (v46)
      operator delete(v46);
  }
  else
  {
    *v36 = v34;
    v38 = v36 + 1;
  }
  v35[1] = v38;
  v49 = (_DWORD *)sentencepiece::model::FreeList<sentencepiece::unigram::Lattice::Node>::Allocate((_QWORD *)(a1 + 96));
  v50 = v49;
  v49[6] = *(_DWORD *)(a1 + 128) + *(_DWORD *)(a1 + 136) * *(_DWORD *)(a1 + 144) - 1;
  v49[7] = -1;
  v49[4] = v32;
  v51 = (void **)(*(_QWORD *)(a1 + 48) + 24 * v32);
  v52 = v51 + 1;
  v53 = v51[1];
  v54 = (unint64_t)v51[2];
  if ((unint64_t)v53 >= v54)
  {
    v56 = ((char *)v53 - (_BYTE *)*v51) >> 3;
    if ((unint64_t)(v56 + 1) >> 61)
      std::vector<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>>::__throw_length_error[abi:ne180100]();
    v57 = v54 - (_QWORD)*v51;
    v58 = v57 >> 2;
    if (v57 >> 2 <= (unint64_t)(v56 + 1))
      v58 = v56 + 1;
    if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFF8)
      v59 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v59 = v58;
    if (v59)
      v60 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(v51 + 2), v59);
    else
      v60 = 0;
    v61 = &v60[8 * v56];
    v62 = &v60[8 * v59];
    *(_QWORD *)v61 = v50;
    v55 = v61 + 8;
    v63 = (char *)*v52;
    v64 = (char *)*v51;
    if (*v52 != *v51)
    {
      do
      {
        v65 = *((_QWORD *)v63 - 1);
        v63 -= 8;
        *((_QWORD *)v61 - 1) = v65;
        v61 -= 8;
      }
      while (v63 != v64);
      v63 = (char *)*v51;
    }
    *v51 = v61;
    *v52 = v55;
    v51[2] = v62;
    if (v63)
      operator delete(v63);
  }
  else
  {
    *v53 = v49;
    v55 = v53 + 1;
  }
  *v52 = v55;
}

void std::vector<std::vector<sentencepiece::unigram::Lattice::Node *>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;

  v3 = a1[1];
  v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::vector<sentencepiece::unigram::Lattice::Node *>>::__append(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 24 * a2;
    if (v3 != v7)
    {
      v8 = a1[1];
      do
      {
        v10 = *(void **)(v8 - 24);
        v8 -= 24;
        v9 = v10;
        if (v10)
        {
          *(_QWORD *)(v3 - 16) = v9;
          operator delete(v9);
        }
        v3 = v8;
      }
      while (v8 != v7);
    }
    a1[1] = v7;
  }
}

uint64_t sentencepiece::unigram::Lattice::Insert(sentencepiece::unigram::Lattice *this, int a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t **v12;
  void **v13;
  uint64_t *v14;
  unint64_t v15;
  char **v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  void **v28;
  void **v29;
  uint64_t *v30;
  unint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t *v38;
  char *v39;
  char *v40;
  char *v41;
  uint64_t v42;

  v6 = sentencepiece::model::FreeList<sentencepiece::unigram::Lattice::Node>::Allocate((_QWORD *)this + 12);
  v7 = v6;
  v8 = *((_DWORD *)this + 32) + *((_DWORD *)this + 34) * *((_DWORD *)this + 36) - 1;
  *(_DWORD *)(v6 + 20) = a3;
  *(_DWORD *)(v6 + 24) = v8;
  *(_DWORD *)(v6 + 16) = a2;
  v9 = *((_QWORD *)this + 3);
  v10 = *(_QWORD *)(v9 + 8 * (a3 + a2));
  v11 = *(_QWORD *)(v9 + 8 * a2);
  *(_QWORD *)v6 = v11;
  *(_QWORD *)(v6 + 8) = (int)v10 - (int)v11;
  v12 = (uint64_t **)(*((_QWORD *)this + 6) + 24 * a2);
  v13 = (void **)(v12 + 1);
  v14 = v12[1];
  v16 = (char **)(v12 + 2);
  v15 = (unint64_t)v12[2];
  if ((unint64_t)v14 >= v15)
  {
    v18 = v14 - *v12;
    if ((unint64_t)(v18 + 1) >> 61)
      std::vector<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>>::__throw_length_error[abi:ne180100]();
    v19 = v15 - (_QWORD)*v12;
    v20 = v19 >> 2;
    if (v19 >> 2 <= (unint64_t)(v18 + 1))
      v20 = v18 + 1;
    if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
      v21 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v21 = v20;
    if (v21)
      v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)v16, v21);
    else
      v22 = 0;
    v23 = (uint64_t *)&v22[8 * v18];
    v24 = &v22[8 * v21];
    *v23 = v7;
    v17 = v23 + 1;
    v25 = (char *)*v13;
    v26 = (char *)*v12;
    if (*v13 != *v12)
    {
      do
      {
        v27 = *((_QWORD *)v25 - 1);
        v25 -= 8;
        *--v23 = v27;
      }
      while (v25 != v26);
      v25 = (char *)*v12;
    }
    *v12 = v23;
    *v13 = v17;
    *v16 = v24;
    if (v25)
      operator delete(v25);
  }
  else
  {
    *v14 = v6;
    v17 = v14 + 1;
  }
  *v13 = v17;
  v28 = (void **)(*((_QWORD *)this + 9) + 24 * (*(_DWORD *)(v7 + 20) + a2));
  v29 = v28 + 1;
  v30 = (uint64_t *)v28[1];
  v31 = (unint64_t)v28[2];
  if ((unint64_t)v30 >= v31)
  {
    v33 = ((char *)v30 - (_BYTE *)*v28) >> 3;
    if ((unint64_t)(v33 + 1) >> 61)
      std::vector<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>>::__throw_length_error[abi:ne180100]();
    v34 = v31 - (_QWORD)*v28;
    v35 = v34 >> 2;
    if (v34 >> 2 <= (unint64_t)(v33 + 1))
      v35 = v33 + 1;
    if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8)
      v36 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v36 = v35;
    if (v36)
      v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(v28 + 2), v36);
    else
      v37 = 0;
    v38 = (uint64_t *)&v37[8 * v33];
    v39 = &v37[8 * v36];
    *v38 = v7;
    v32 = v38 + 1;
    v40 = (char *)*v29;
    v41 = (char *)*v28;
    if (*v29 != *v28)
    {
      do
      {
        v42 = *((_QWORD *)v40 - 1);
        v40 -= 8;
        *--v38 = v42;
      }
      while (v40 != v41);
      v40 = (char *)*v28;
    }
    *v28 = v38;
    *v29 = v32;
    v28[2] = v39;
    if (v40)
      operator delete(v40);
  }
  else
  {
    *v30 = v7;
    v32 = v30 + 1;
  }
  *v29 = v32;
  return v7;
}

void sentencepiece::unigram::Lattice::Viterbi(sentencepiece::unigram::Lattice *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t **v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t **v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  float v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  float v19;
  uint64_t v21;
  int v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  void *v33;
  char *v34;
  char *v36;
  uint64_t v37;
  BOOL v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  void *__p;
  char *v46;
  char *v47;

  v3 = 0;
  v4 = ((*((_QWORD *)this + 4) - *((_QWORD *)this + 3)) >> 3) - 1;
  v5 = v4 & ~(v4 >> 31);
  v6 = *((_QWORD *)this + 6);
  while (1)
  {
    v7 = (uint64_t **)(v6 + 24 * v3);
    v8 = *v7;
    v9 = v7[1];
    if (v8 != v9)
      break;
LABEL_14:
    if (++v3 == v5 + 1)
    {
      __p = 0;
      v46 = 0;
      v47 = 0;
      v21 = **(_QWORD **)(v6 + 24 * v5);
      v22 = *(_DWORD *)(v21 + 36);
      v23 = *(_QWORD *)(v21 + 40);
      if (*(_QWORD *)(v23 + 40))
      {
        v24 = 0;
        do
        {
          if (v24 >= v47)
          {
            v25 = (v24 - (_BYTE *)__p) >> 3;
            if ((unint64_t)(v25 + 1) >> 61)
              std::vector<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>>::__throw_length_error[abi:ne180100]();
            v26 = (v47 - (_BYTE *)__p) >> 2;
            if (v26 <= v25 + 1)
              v26 = v25 + 1;
            if ((unint64_t)(v47 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFF8)
              v27 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v27 = v26;
            if (v27)
              v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)&v47, v27);
            else
              v28 = 0;
            v29 = &v28[8 * v25];
            *(_QWORD *)v29 = v23;
            v24 = v29 + 8;
            v31 = (char *)__p;
            v30 = v46;
            if (v46 != __p)
            {
              do
              {
                v32 = *((_QWORD *)v30 - 1);
                v30 -= 8;
                *((_QWORD *)v29 - 1) = v32;
                v29 -= 8;
              }
              while (v30 != v31);
              v30 = (char *)__p;
            }
            __p = v29;
            v46 = v24;
            v47 = &v28[8 * v27];
            if (v30)
              operator delete(v30);
          }
          else
          {
            *(_QWORD *)v24 = v23;
            v24 += 8;
          }
          v46 = v24;
          v23 = *(_QWORD *)(v23 + 40);
        }
        while (*(_QWORD *)(v23 + 40));
        v33 = __p;
        v34 = v24 - 8;
        if (__p != v24 && v34 > __p)
        {
          v36 = (char *)__p + 8;
          do
          {
            v37 = *((_QWORD *)v36 - 1);
            *((_QWORD *)v36 - 1) = *(_QWORD *)v34;
            *(_QWORD *)v34 = v37;
            v34 -= 8;
            v38 = v36 >= v34;
            v36 += 8;
          }
          while (!v38);
          v33 = __p;
          v24 = v46;
        }
      }
      else
      {
        v24 = 0;
        v33 = 0;
      }
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      std::vector<sentencepiece::unigram::Lattice::Node *>::__init_with_size[abi:ne180100]<sentencepiece::unigram::Lattice::Node **,sentencepiece::unigram::Lattice::Node **>((_QWORD *)a2, v33, (uint64_t)v24, (v24 - (_BYTE *)v33) >> 3);
      *(_DWORD *)(a2 + 24) = v22;
      if (__p)
      {
        v46 = (char *)__p;
        operator delete(__p);
      }
      return;
    }
  }
  v10 = (uint64_t **)(*((_QWORD *)this + 9) + 24 * v3);
  v11 = *v10;
  v12 = v10[1];
  while (1)
  {
    v13 = *v8;
    *(_QWORD *)(*v8 + 40) = 0;
    if (v11 == v12)
      break;
    v14 = 0;
    v15 = 0.0;
    v16 = v11;
    do
    {
      v18 = *v16++;
      v17 = v18;
      v19 = *(float *)(v18 + 36) + *(float *)(v13 + 32);
      if (v19 > v15 || v14 == 0)
      {
        v15 = v19;
        v14 = v17;
      }
    }
    while (v16 != v12);
    if (!v14)
      break;
    *(_QWORD *)(v13 + 40) = v14;
    *(float *)(v13 + 36) = v15;
    if (++v8 == v9)
      goto LABEL_14;
  }
  if ((int)sentencepiece::logging::GetMinLogLevel(this) <= 2)
  {
    LOBYTE(__p) = 0;
    v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"unigram_model.cc", 16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)"(", 1);
    v40 = (_QWORD *)std::ostream::operator<<();
    v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)") ", 2);
    v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)"LOG(", 4);
    v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)"ERROR", 5);
    v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)") ", 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)"Failed to find the best path in Viterbi.", 40);
    sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&__p);
  }
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 16) = 0;
}

void sub_245C64F48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sentencepiece::unigram::Lattice::ForwardAlgorithm(sentencepiece::unigram::Lattice *this@<X0>, float a2@<S0>, uint64_t *a3@<X8>)
{
  int v6;
  int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  float v19;
  _QWORD *v20;
  float v21;
  float v22;
  double v23;
  long double v24;
  uint64_t *v25;
  sentencepiece::unigram::Lattice *v26;
  uint64_t v27;
  uint64_t v28;
  int v29;

  v6 = ((*((_QWORD *)this + 4) - *((_QWORD *)this + 3)) >> 3) - 1;
  v7 = v6 & ~(v6 >> 31);
  v8 = *((_QWORD *)this + 16) + *((_QWORD *)this + 17) * *((_QWORD *)this + 18);
  v29 = 0;
  v25 = a3;
  std::vector<float>::vector(a3, v8, &v29);
  v9 = 0;
  v28 = *((_QWORD *)this + 6);
  v26 = this;
  v27 = (v7 + 1);
  do
  {
    v10 = (uint64_t *)(v28 + 24 * v9);
    v11 = *v10;
    v12 = v10[1];
    if (*v10 != v12)
    {
      v13 = *((_QWORD *)v26 + 9) + 24 * v9;
      v15 = *(_QWORD **)v13;
      v14 = *(_QWORD **)(v13 + 8);
      v16 = *v25;
      do
      {
        if (v15 != v14)
        {
          v17 = *(unsigned int *)(*(_QWORD *)v11 + 24);
          v18 = *v15;
          v19 = *(float *)(v16 + 4 * v17);
          v20 = v15;
          do
          {
            v21 = *(float *)(v16 + 4 * *(unsigned int *)(*v20 + 24)) + (float)(a2 * *(float *)(*v20 + 32));
            if (*v20 != v18)
            {
              if (v21 >= v19)
                v22 = v19;
              else
                v22 = *(float *)(v16 + 4 * *(unsigned int *)(*v20 + 24)) + (float)(a2 * *(float *)(*v20 + 32));
              if (v19 >= v21)
                v21 = v19;
              if (v21 <= (float)(v22 + 50.0))
              {
                v23 = v21;
                v24 = exp((float)(v22 - v21));
                v21 = log(v24 + 1.0) + v23;
              }
            }
            *(float *)(v16 + 4 * v17) = v21;
            ++v20;
            v19 = v21;
          }
          while (v20 != v14);
        }
        v11 += 8;
      }
      while (v11 != v12);
    }
    ++v9;
  }
  while (v9 != v27);
}

float sentencepiece::unigram::Lattice::CalculateEntropy(sentencepiece::unigram::Lattice *this, float a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t **v11;
  uint64_t *v12;
  uint64_t *v13;
  float *v14;
  float *v15;
  uint64_t v16;
  float v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  float v21;
  void *v22;
  float v23;
  unsigned int v25;
  sentencepiece::unigram::Lattice *v26;
  uint64_t v27;
  void *__p[3];
  void *v29[3];

  v5 = *((_QWORD *)this + 3);
  v4 = *((_QWORD *)this + 4);
  v6 = *((_QWORD *)this + 16) + *((_QWORD *)this + 17) * *((_QWORD *)this + 18);
  LODWORD(__p[0]) = 0;
  std::vector<float>::vector(v29, v6, __p);
  sentencepiece::unigram::Lattice::ForwardAlgorithm(this, a2, (uint64_t *)__p);
  v7 = 0;
  v27 = *((_QWORD *)this + 6);
  v25 = (((unint64_t)(v4 - v5) >> 3) - 1) & ~((int)(((unint64_t)(v4 - v5) >> 3) - 1) >> 31);
  v26 = this;
  do
  {
    v8 = (uint64_t *)(v27 + 24 * v7);
    v9 = *v8;
    v10 = v8[1];
    if (*v8 != v10)
    {
      v11 = (uint64_t **)(*((_QWORD *)v26 + 9) + 24 * v7);
      v12 = *v11;
      v13 = v11[1];
      v14 = (float *)__p[0];
      v15 = (float *)v29[0];
      do
      {
        if (v12 != v13)
        {
          v16 = *(unsigned int *)(*(_QWORD *)v9 + 24);
          v17 = v15[v16];
          v18 = v12;
          do
          {
            v19 = *v18++;
            v20 = *(unsigned int *)(v19 + 24);
            v21 = (float)(v14[v20] + (float)(a2 * *(float *)(v19 + 32))) - v14[v16];
            v17 = v17 + (float)(expf(v21) * (float)(v21 + v15[v20]));
            v15[v16] = v17;
          }
          while (v18 != v13);
        }
        v9 += 8;
      }
      while (v9 != v10);
    }
    ++v7;
  }
  while (v7 != v25 + 1);
  v22 = v29[0];
  v23 = *((float *)v29[0] + *(unsigned int *)(**(_QWORD **)(v27 + 24 * v25) + 24));
  if (!__p[0] || (__p[1] = __p[0], operator delete(__p[0]), (v22 = v29[0]) != 0))
  {
    v29[1] = v22;
    operator delete(v22);
  }
  return -v23;
}

void sub_245C652A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sentencepiece::unigram::Lattice::NBest(sentencepiece::unigram::Lattice *this@<X0>, float a2@<S0>, uint64_t a3@<X1>, int a4@<W2>, uint64_t *a5@<X8>)
{
  uint64_t v5;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  sentencepiece::random *v18;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *RandomGenerator;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v20;
  float v21;
  float v22;
  int v23;
  int v24;
  __int128 v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD **v34;
  _QWORD *i;
  uint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  sentencepiece::random *MinLogLevel;
  int v53;
  uint64_t v54;
  uint64_t v55;
  float v56;
  unint64_t v57;
  float v58;
  float v59;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *v60;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v61;
  float v62;
  float v63;
  int v64;
  double *v65;
  float v66;
  float *v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  float v77;
  _QWORD *v78;
  _QWORD *v79;
  _QWORD *v80;
  _QWORD *v81;
  _QWORD *v82;
  _QWORD *v83;
  _QWORD *v84;
  uint64_t v85;
  void *v86;
  _QWORD *v87;
  _QWORD *v88;
  _QWORD *v89;
  _QWORD *v90;
  _QWORD *v91;
  _QWORD *v92;
  _QWORD *v93;
  _QWORD *v94;
  _QWORD *v95;
  int v96;
  unint64_t v97;
  uint64_t *v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  uint8x8_t v103;
  unint64_t v104;
  _QWORD *v105;
  _QWORD *j;
  unint64_t v107;
  uint64_t v108;
  __int128 v109;
  uint8x8_t v110;
  _QWORD *v111;
  _QWORD *k;
  unint64_t v113;
  _QWORD *v114;
  float v115;
  _BOOL4 v116;
  unint64_t v117;
  unint64_t v118;
  int8x8_t prime;
  void *v120;
  void *v121;
  uint64_t v122;
  _QWORD **v123;
  unint64_t v124;
  uint8x8_t v125;
  unint64_t v126;
  uint8x8_t v127;
  uint64_t v128;
  _QWORD *m;
  unint64_t v130;
  _QWORD *v131;
  _QWORD *v132;
  unint64_t v133;
  void *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  _QWORD *v138;
  _QWORD *v139;
  uint64_t v140;
  uint64_t v141;
  _QWORD *v142;
  __int128 v143;
  uint64_t v144;
  uint64_t v145;
  __int128 v146;
  void *v147;
  int v148;
  char v149;
  int v150;
  _QWORD *v151;
  uint64_t v152;
  uint64_t v155;
  void *v156[2];
  __int128 v157;
  float v158;
  _BYTE v159[48];
  uint64_t v160;
  __int128 v161;
  uint64_t v162;
  void *v163;
  _BYTE *v164;
  void *v165[3];
  void *v166[3];
  void *v167[4];
  void *__p[3];
  uint64_t v169;
  __int128 v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t (**v173)();
  __int128 v174;
  _QWORD v175[3];
  uint64_t v176;
  uint64_t v177;

  v177 = *MEMORY[0x24BDAC8D0];
  if (a3 == 1)
  {
    if ((a4 & 1) == 0)
    {
      sentencepiece::unigram::Lattice::Viterbi(this, (uint64_t)&v173);
      *a5 = 0;
      a5[1] = 0;
      a5[2] = 0;
      *(_QWORD *)v159 = a5;
      v159[8] = 0;
      v147 = operator new(0x20uLL);
      *a5 = (uint64_t)v147;
      a5[1] = (uint64_t)v147;
      a5[2] = (uint64_t)v147 + 32;
      a5[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::vector<sentencepiece::unigram::Lattice::Node *>,float>>,std::pair<std::vector<sentencepiece::unigram::Lattice::Node *>,float> const*,std::pair<std::vector<sentencepiece::unigram::Lattice::Node *>,float> const*,std::pair<std::vector<sentencepiece::unigram::Lattice::Node *>,float>*>((uint64_t)(a5 + 2), (uint64_t)&v173, (uint64_t)&v175[1], (uint64_t)v147);
      if (v173)
      {
        *(_QWORD *)&v174 = v173;
        operator delete(v173);
      }
      return;
    }
  }
  else if (!a3)
  {
    if ((int)sentencepiece::logging::GetMinLogLevel(this) <= 1)
    {
      LOBYTE(v173) = 0;
      v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"unigram_model.cc", 16);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"(", 1);
      v10 = (_QWORD *)std::ostream::operator<<();
      v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)") ", 2);
      v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"LOG(", 4);
      v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"WARNING", 7);
      v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)") ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"nbest_size >= 1. Returns empty result.", 38);
      sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&v173);
    }
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
    return;
  }
  v174 = 0u;
  memset(v175, 0, sizeof(v175));
  v173 = &off_2516E3140;
  v176 = 512;
  v170 = 0uLL;
  v171 = 0;
  a5[1] = 0;
  a5[2] = 0;
  *a5 = 0;
  v169 = v15;
  v16 = ((*((_QWORD *)this + 4) - *((_QWORD *)this + 3)) >> 3) - 1;
  *(_QWORD *)v15 = **(_QWORD **)(*((_QWORD *)this + 6) + 24 * (v16 & ~(v16 >> 31)));
  *(_QWORD *)(v15 + 8) = 0;
  *(_DWORD *)(v15 + 20) = 0;
  v17 = *((_QWORD *)this + 16) + *((_QWORD *)this + 17) * *((_QWORD *)this + 18);
  *(_DWORD *)v159 = 0;
  std::vector<float>::vector(__p, v17, v159);
  if (a4)
  {
    sentencepiece::unigram::Lattice::ForwardAlgorithm(this, a2, (uint64_t *)v159);
    v18 = (sentencepiece::random *)__p[0];
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    *(_OWORD *)__p = *(_OWORD *)v159;
    __p[2] = *(void **)&v159[16];
    RandomGenerator = (std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *)sentencepiece::random::GetRandomGenerator(v18);
    v20 = std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(RandomGenerator);
    v21 = logf((float)((float)((float)v20 * 2.3283e-10) + 0.0) + 0.0000001);
    v22 = -logf(-v21);
  }
  else
  {
    sentencepiece::unigram::Lattice::Viterbi(this, (uint64_t)v167);
    if (v167[0])
    {
      v167[1] = v167[0];
      operator delete(v167[0]);
    }
    v22 = *(float *)(*(_QWORD *)v15 + 36);
  }
  *(float *)(v15 + 16) = v22;
  v148 = 0;
  v149 = 0;
  if (10 * (int)a3 >= 512)
    v23 = 512;
  else
    v23 = 10 * a3;
  if (v23 <= 1)
    v24 = 1;
  else
    v24 = v23;
  v150 = v24;
  while (1)
  {
    v25 = v170;
    if ((_QWORD)v170 == *((_QWORD *)&v170 + 1))
      break;
    v26 = *(uint64_t **)v170;
    if ((uint64_t)(*((_QWORD *)&v170 + 1) - v170) >= 9)
    {
      v27 = 0;
      v28 = (uint64_t)(*((_QWORD *)&v170 + 1) - v170) >> 3;
      v29 = (_QWORD *)v170;
      do
      {
        v30 = v29;
        v29 += v27 + 1;
        v31 = 2 * v27;
        v27 = (2 * v27) | 1;
        v32 = v31 + 2;
        if (v32 < v28 && *(float *)(*v29 + 16) < *(float *)(v29[1] + 16))
        {
          ++v29;
          v27 = v32;
        }
        *v30 = *v29;
      }
      while (v27 <= (uint64_t)((unint64_t)(v28 - 2) >> 1));
      if (v29 == (_QWORD *)(*((_QWORD *)&v25 + 1) - 8))
      {
        *v29 = v26;
      }
      else
      {
        *v29 = **((_QWORD **)&v25 + 1);
        **((_QWORD **)&v25 + 1) = v26;
      }
    }
    *((_QWORD *)&v170 + 1) -= 8;
    v33 = *v26;
    v34 = (_QWORD **)*((_QWORD *)this + 9);
    if (*v26 == **v34)
    {
      std::vector<std::pair<std::vector<sentencepiece::unigram::Lattice::Node *>,float>>::resize(a5, ((a5[1] - *a5) >> 5) + 1);
      for (i = (_QWORD *)v26[1]; i[1]; i = (_QWORD *)i[1])
      {
        v36 = a5[1];
        v37 = *(_QWORD **)(v36 - 24);
        v38 = *(_QWORD *)(v36 - 16);
        if ((unint64_t)v37 >= v38)
        {
          v40 = *(_QWORD *)(v36 - 32);
          v41 = ((uint64_t)v37 - v40) >> 3;
          if ((unint64_t)(v41 + 1) >> 61)
            std::vector<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>>::__throw_length_error[abi:ne180100]();
          v42 = v38 - v40;
          v43 = v42 >> 2;
          if (v42 >> 2 <= (unint64_t)(v41 + 1))
            v43 = v41 + 1;
          if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF8)
            v44 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v44 = v43;
          if (v44)
            v45 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v36 - 16, v44);
          else
            v45 = 0;
          v46 = &v45[8 * v41];
          *(_QWORD *)v46 = *i;
          v39 = v46 + 8;
          v48 = *(char **)(v36 - 32);
          v47 = *(char **)(v36 - 24);
          if (v47 != v48)
          {
            do
            {
              v49 = *((_QWORD *)v47 - 1);
              v47 -= 8;
              *((_QWORD *)v46 - 1) = v49;
              v46 -= 8;
            }
            while (v47 != v48);
            v47 = *(char **)(v36 - 32);
          }
          *(_QWORD *)(v36 - 32) = v46;
          *(_QWORD *)(v36 - 24) = v39;
          *(_QWORD *)(v36 - 16) = &v45[8 * v44];
          if (v47)
            operator delete(v47);
        }
        else
        {
          *v37 = *i;
          v39 = v37 + 1;
        }
        *(_QWORD *)(v36 - 24) = v39;
      }
      v50 = a5[1];
      *(_DWORD *)(v50 - 8) = *((_DWORD *)v26 + 4);
      if (a3 == (v50 - *a5) >> 5)
        break;
    }
    else
    {
      v51 = (int)(v34[3 * *(int *)(v33 + 16) + 1] - v34[3 * *(int *)(v33 + 16)]);
      *(_DWORD *)v159 = 0;
      std::vector<float>::vector(v166, v51, v159);
      *(_DWORD *)v159 = 0;
      std::vector<float>::vector(v165, v51, v159);
      *(_QWORD *)v159 = 0;
      MinLogLevel = (sentencepiece::random *)std::vector<double>::vector(&v163, v51, v159);
      v53 = *(_DWORD *)(v33 + 16);
      v54 = *((_QWORD *)this + 9);
      if (a4)
      {
        v55 = *(_QWORD *)(v54 + 24 * v53);
        v56 = -100000000.0;
        if (*(_QWORD *)(v54 + 24 * v53 + 8) != v55)
        {
          v57 = 0;
          v58 = *((float *)__p[0] + *(unsigned int *)(v33 + 24));
          v56 = -100000000.0;
          do
          {
            v59 = (float)((float)(*((float *)v26 + 5)
                                + *((float *)__p[0] + *(unsigned int *)(*(_QWORD *)(v55 + 8 * v57) + 24)))
                        + (float)(a2 * *(float *)(*(_QWORD *)(v55 + 8 * v57) + 32)))
                - v58;
            *((float *)v166[0] + v57) = v59;
            v60 = (std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *)sentencepiece::random::GetRandomGenerator(MinLogLevel);
            v61 = std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(v60);
            v62 = logf((float)((float)((float)v61 * 2.3283e-10) + 0.0) + 0.0000001);
            v63 = v59 - logf(-v62);
            *((float *)v165[0] + v57) = v63;
            if (v63 > v56)
              v56 = v63;
            ++v57;
            v64 = *(_DWORD *)(v33 + 16);
            v54 = *((_QWORD *)this + 9);
            v55 = *(_QWORD *)(v54 + 24 * v64);
          }
          while (v57 < (*(_QWORD *)(v54 + 24 * v64 + 8) - v55) >> 3);
          v53 = *(_DWORD *)(v33 + 16);
        }
        v65 = (double *)v163;
        if (v164 != v163)
        {
          v66 = *((float *)v26 + 4);
          v67 = (float *)v165[0];
          if ((unint64_t)((v164 - (_BYTE *)v163) >> 3) <= 1)
            v5 = 1;
          else
            v5 = (v164 - (_BYTE *)v163) >> 3;
          do
          {
            v68 = *v67++;
            v69 = expf(v68 - v56);
            v70 = (float)(v66 - v68) + log1pf(-v69);
            v71 = v66 - fmaxf(v70, 0.0);
            v72 = expf(-fabsf(v70));
            *v65++ = (float)(v71 - log1pf(v72));
            --v5;
          }
          while (v5);
        }
      }
      v73 = *(_QWORD *)(v54 + 24 * v53);
      if (*(_QWORD *)(v54 + 24 * v53 + 8) != v73)
      {
        v74 = 0;
        do
        {
          v75 = *(_QWORD *)(v73 + 8 * v74);
          *(_QWORD *)v159 = v76;
          *(_QWORD *)v76 = v75;
          if (a4)
          {
            *(_DWORD *)(v76 + 20) = *((_DWORD *)v166[0] + v74);
            v77 = *((double *)v163 + v74);
          }
          else
          {
            *(float *)(v76 + 20) = *(float *)(v75 + 32) + *((float *)v26 + 5);
            v77 = *(float *)(v75 + 36) + *((float *)v26 + 5);
          }
          *(float *)(v76 + 16) = v77;
          *(_QWORD *)(v76 + 8) = v26;
          ++v74;
          v73 = *(_QWORD *)(*((_QWORD *)this + 9) + 24 * *(int *)(v33 + 16));
        }
        while (v74 < (*(_QWORD *)(*((_QWORD *)this + 9) + 24 * *(int *)(v33 + 16) + 8) - v73) >> 3);
      }
      if (!(((unint64_t)(v175[1] + v175[2] * v176) < 0x3B9ACA00) | v149 & 1))
      {
        MinLogLevel = (sentencepiece::random *)sentencepiece::logging::GetMinLogLevel(MinLogLevel);
        if ((int)MinLogLevel <= 1)
        {
          v159[0] = 0;
          v78 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"unigram_model.cc", 16);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v78, (uint64_t)"(", 1);
          v79 = (_QWORD *)std::ostream::operator<<();
          v80 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v79, (uint64_t)") ", 2);
          v81 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v80, (uint64_t)"LOG(", 4);
          v82 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v81, (uint64_t)"WARNING", 7);
          v83 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v82, (uint64_t)") ", 2);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v83, (uint64_t)"Allocator size exceeds ", 23);
          v84 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v84, (uint64_t)" with an example of length ", 27);
          std::ostream::operator<<();
          sentencepiece::error::Die::~Die((sentencepiece::error::Die *)v159);
        }
        v149 = 1;
      }
      v85 = *((_QWORD *)&v170 + 1);
      v86 = (void *)v170;
      if (*((_QWORD *)&v170 + 1) - (_QWORD)v170 >= 0x13879uLL)
      {
        v161 = 0uLL;
        v162 = 0;
        memset(&v159[8], 0, 40);
        *(_QWORD *)v159 = &off_2516E3140;
        v160 = 512;
        *(_OWORD *)v156 = 0u;
        v157 = 0u;
        v158 = 1.0;
        ++v148;
        if ((int)sentencepiece::logging::GetMinLogLevel(MinLogLevel) <= 1)
        {
          LOBYTE(v172) = 0;
          v87 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"unigram_model.cc", 16);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v87, (uint64_t)"(", 1);
          v88 = (_QWORD *)std::ostream::operator<<();
          v89 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v88, (uint64_t)") ", 2);
          v90 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v89, (uint64_t)"LOG(", 4);
          v91 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v90, (uint64_t)"WARNING", 7);
          v92 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v91, (uint64_t)") ", 2);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v92, (uint64_t)"Too big agenda size ", 20);
          v93 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v93, (uint64_t)". Shrinking (round ", 19);
          v94 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v94, (uint64_t)") down to ", 10);
          v95 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v95, (uint64_t)".", 1);
          sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&v172);
        }
        if (10 * (int)a3 >= 1)
        {
          v96 = 0;
          while (1)
          {
            v151 = (_QWORD *)v170;
            v152 = v85;
            v97 = *(_QWORD *)v170;
            v155 = 0;
            v172 = 0;
            if (!v97)
              goto LABEL_181;
            v98 = &v172;
            v99 = (unint64_t)v156[1];
            do
            {
              v100 = 0x9DDFEA08EB382D69 * (((8 * v97) + 8) ^ HIDWORD(v97));
              v101 = 0x9DDFEA08EB382D69 * (HIDWORD(v97) ^ (v100 >> 47) ^ v100);
              v102 = 0x9DDFEA08EB382D69 * (v101 ^ (v101 >> 47));
              if (v99)
              {
                v103 = (uint8x8_t)vcnt_s8((int8x8_t)v99);
                v103.i16[0] = vaddlv_u8(v103);
                if (v103.u32[0] > 1uLL)
                {
                  v104 = 0x9DDFEA08EB382D69 * (v101 ^ (v101 >> 47));
                  if (v102 >= v99)
                    v104 = v102 % v99;
                }
                else
                {
                  v104 = v102 & (v99 - 1);
                }
                v105 = (_QWORD *)*((_QWORD *)v156[0] + v104);
                if (v105)
                {
                  for (j = (_QWORD *)*v105; j; j = (_QWORD *)*j)
                  {
                    v107 = j[1];
                    if (v107 == v102)
                    {
                      if (j[2] == v97)
                      {
                        *v98 = j[3];
                        goto LABEL_181;
                      }
                    }
                    else
                    {
                      if (v103.u32[0] > 1uLL)
                      {
                        if (v107 >= v99)
                          v107 %= v99;
                      }
                      else
                      {
                        v107 &= v99 - 1;
                      }
                      if (v107 != v104)
                        break;
                    }
                  }
                }
              }
              v109 = *(_OWORD *)v97;
              *(_QWORD *)(v108 + 16) = *(_QWORD *)(v97 + 16);
              *(_OWORD *)v108 = v109;
              *v98 = v108;
              v99 = (unint64_t)v156[1];
              if (v156[1])
              {
                v110 = (uint8x8_t)vcnt_s8((int8x8_t)v156[1]);
                v110.i16[0] = vaddlv_u8(v110);
                if (v110.u32[0] > 1uLL)
                {
                  v5 = v102;
                  if ((void *)v102 >= v156[1])
                    v5 = v102 % (unint64_t)v156[1];
                }
                else
                {
                  v5 = ((unint64_t)v156[1] - 1) & v102;
                }
                v111 = (_QWORD *)*((_QWORD *)v156[0] + v5);
                if (v111)
                {
                  for (k = (_QWORD *)*v111; k; k = (_QWORD *)*k)
                  {
                    v113 = k[1];
                    if (v113 == v102)
                    {
                      if (k[2] == v97)
                        goto LABEL_170;
                    }
                    else
                    {
                      if (v110.u32[0] > 1uLL)
                      {
                        if ((void *)v113 >= v156[1])
                          v113 %= (unint64_t)v156[1];
                      }
                      else
                      {
                        v113 &= (unint64_t)v156[1] - 1;
                      }
                      if (v113 != v5)
                        break;
                    }
                  }
                }
              }
              v114 = operator new(0x20uLL);
              *v114 = 0;
              v114[1] = v102;
              v114[2] = v97;
              v114[3] = v108;
              v115 = (float)(unint64_t)(*((_QWORD *)&v157 + 1) + 1);
              if (!v99 || (float)(v158 * (float)v99) < v115)
              {
                v116 = (v99 & (v99 - 1)) == 0;
                if (v99 < 3)
                  v116 = 0;
                v117 = (2 * v99) | !v116;
                v118 = vcvtps_u32_f32(v115 / v158);
                if (v117 <= v118)
                  prime = (int8x8_t)v118;
                else
                  prime = (int8x8_t)v117;
                if (*(_QWORD *)&prime == 1)
                {
                  prime = (int8x8_t)2;
                }
                else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
                {
                  prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
                  v99 = (unint64_t)v156[1];
                }
                if (*(_QWORD *)&prime <= v99)
                {
                  if (*(_QWORD *)&prime < v99)
                  {
                    v126 = vcvtps_u32_f32((float)*((unint64_t *)&v157 + 1) / v158);
                    if (v99 < 3
                      || (v127 = (uint8x8_t)vcnt_s8((int8x8_t)v99), v127.i16[0] = vaddlv_u8(v127), v127.u32[0] > 1uLL))
                    {
                      v126 = std::__next_prime(v126);
                    }
                    else
                    {
                      v128 = 1 << -(char)__clz(v126 - 1);
                      if (v126 >= 2)
                        v126 = v128;
                    }
                    if (*(_QWORD *)&prime <= v126)
                      prime = (int8x8_t)v126;
                    if (*(_QWORD *)&prime >= v99)
                    {
                      v99 = (unint64_t)v156[1];
                    }
                    else
                    {
                      if (prime)
                        goto LABEL_126;
                      v134 = v156[0];
                      v156[0] = 0;
                      if (v134)
                        operator delete(v134);
                      v99 = 0;
                      v156[1] = 0;
                    }
                  }
                }
                else
                {
LABEL_126:
                  if (*(_QWORD *)&prime >> 61)
                    std::__throw_bad_array_new_length[abi:ne180100]();
                  v120 = operator new(8 * *(_QWORD *)&prime);
                  v121 = v156[0];
                  v156[0] = v120;
                  if (v121)
                    operator delete(v121);
                  v122 = 0;
                  v156[1] = (void *)prime;
                  do
                    *((_QWORD *)v156[0] + v122++) = 0;
                  while (*(_QWORD *)&prime != v122);
                  v123 = (_QWORD **)v157;
                  if ((_QWORD)v157)
                  {
                    v124 = *(_QWORD *)(v157 + 8);
                    v125 = (uint8x8_t)vcnt_s8(prime);
                    v125.i16[0] = vaddlv_u8(v125);
                    if (v125.u32[0] > 1uLL)
                    {
                      if (v124 >= *(_QWORD *)&prime)
                        v124 %= *(_QWORD *)&prime;
                    }
                    else
                    {
                      v124 &= *(_QWORD *)&prime - 1;
                    }
                    *((_QWORD *)v156[0] + v124) = &v157;
                    for (m = *v123; m; v124 = v130)
                    {
                      v130 = m[1];
                      if (v125.u32[0] > 1uLL)
                      {
                        if (v130 >= *(_QWORD *)&prime)
                          v130 %= *(_QWORD *)&prime;
                      }
                      else
                      {
                        v130 &= *(_QWORD *)&prime - 1;
                      }
                      if (v130 != v124)
                      {
                        if (!*((_QWORD *)v156[0] + v130))
                        {
                          *((_QWORD *)v156[0] + v130) = v123;
                          goto LABEL_151;
                        }
                        *v123 = (_QWORD *)*m;
                        *m = **((_QWORD **)v156[0] + v130);
                        **((_QWORD **)v156[0] + v130) = m;
                        m = v123;
                      }
                      v130 = v124;
LABEL_151:
                      v123 = (_QWORD **)m;
                      m = (_QWORD *)*m;
                    }
                  }
                  v99 = (unint64_t)prime;
                }
                if ((v99 & (v99 - 1)) != 0)
                {
                  if (v102 >= v99)
                    v5 = v102 % v99;
                  else
                    v5 = v102;
                }
                else
                {
                  v5 = (v99 - 1) & v102;
                }
              }
              v131 = v156[0];
              v132 = (_QWORD *)*((_QWORD *)v156[0] + v5);
              if (v132)
              {
                *v114 = *v132;
LABEL_168:
                *v132 = v114;
                goto LABEL_169;
              }
              *v114 = v157;
              *(_QWORD *)&v157 = v114;
              v131[v5] = &v157;
              if (*v114)
              {
                v133 = *(_QWORD *)(*v114 + 8);
                if ((v99 & (v99 - 1)) != 0)
                {
                  if (v133 >= v99)
                    v133 %= v99;
                }
                else
                {
                  v133 &= v99 - 1;
                }
                v132 = (char *)v156[0] + 8 * v133;
                goto LABEL_168;
              }
LABEL_169:
              ++*((_QWORD *)&v157 + 1);
LABEL_170:
              v97 = *(_QWORD *)(v97 + 8);
              v98 = (uint64_t *)(v108 + 8);
            }
            while (v97);
LABEL_181:
            v155 = v172;
            if (v152 - (uint64_t)v151 >= 9)
            {
              v135 = 0;
              v136 = (v152 - (uint64_t)v151) >> 3;
              v137 = *v151;
              v138 = v151;
              do
              {
                v139 = v138;
                v138 += v135 + 1;
                v140 = 2 * v135;
                v135 = (2 * v135) | 1;
                v141 = v140 + 2;
                if (v141 < v136 && *(float *)(*v138 + 16) < *(float *)(v138[1] + 16))
                {
                  ++v138;
                  v135 = v141;
                }
                *v139 = *v138;
              }
              while (v135 <= (uint64_t)((unint64_t)(v136 - 2) >> 1));
              v142 = (_QWORD *)(v152 - 8);
              if (v138 == (_QWORD *)(v152 - 8))
              {
                *v138 = v137;
              }
              else
              {
                *v138 = *v142;
                *v142 = v137;
              }
            }
            v85 = *((_QWORD *)&v170 + 1) - 8;
            *((_QWORD *)&v170 + 1) -= 8;
            if (++v96 == v150)
            {
              v86 = (void *)v170;
              break;
            }
          }
        }
        if (v86)
        {
          *((_QWORD *)&v170 + 1) = v86;
          operator delete(v86);
        }
        v170 = v161;
        v171 = v162;
        v143 = v174;
        v174 = *(_OWORD *)&v159[8];
        *(_OWORD *)&v159[8] = v143;
        v144 = *(_QWORD *)&v159[24];
        v145 = v176;
        *(_QWORD *)&v159[24] = v175[0];
        v146 = *(_OWORD *)&v175[1];
        *(_OWORD *)&v175[1] = *(_OWORD *)&v159[32];
        *(_OWORD *)&v159[32] = v146;
        v175[0] = v144;
        v176 = v160;
        v160 = v145;
        std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v156);
      }
      if (v163)
      {
        v164 = v163;
        operator delete(v163);
      }
      if (v165[0])
      {
        v165[1] = v165[0];
        operator delete(v165[0]);
      }
      if (v166[0])
      {
        v166[1] = v166[0];
        operator delete(v166[0]);
      }
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if ((_QWORD)v170)
    operator delete((void *)v170);
}

void sub_245C6630C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *__p,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57)
{
  uint64_t v57;
  void *v59;

  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&a21);
  if (__p)
  {
    a41 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a43)
  {
    a44 = (uint64_t)a43;
    operator delete(a43);
  }
  if (a46)
  {
    a47 = (uint64_t)a46;
    operator delete(a46);
  }
  if (a53)
  {
    a54 = (uint64_t)a53;
    operator delete(a53);
  }
  v59 = a57;
  std::vector<std::pair<std::vector<std::pair<std::string_view,int>>,float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a27);
  if (v59)
    operator delete(v59);
  _Unwind_Resume(a1);
}

uint64_t sentencepiece::model::FreeList<sentencepiece::unigram::`anonymous namespace'::Hypothesis>::Allocate(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  void *v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t result;

  v2 = a1[5];
  v3 = a1[6];
  v4 = a1[4];
  if (v4 >= v3)
  {
    v4 = 0;
    ++v2;
    a1[4] = 0;
    a1[5] = v2;
  }
  v5 = a1[1];
  if (v2 == (a1[2] - v5) >> 3)
  {
    is_mul_ok(v3, 0x18uLL);
    v6 = (void *)operator new[]();
    bzero(v6, 24 * a1[6]);
    v8 = (_QWORD *)a1[2];
    v7 = a1[3];
    if ((unint64_t)v8 >= v7)
    {
      v10 = (_QWORD *)a1[1];
      v11 = v8 - v10;
      v12 = v11 + 1;
      if ((unint64_t)(v11 + 1) >> 61)
        std::vector<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>>::__throw_length_error[abi:ne180100]();
      v13 = v7 - (_QWORD)v10;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v15 = (char *)operator new(8 * v14);
      }
      else
      {
        v15 = 0;
      }
      v16 = &v15[8 * v11];
      *(_QWORD *)v16 = v6;
      v9 = v16 + 8;
      if (v8 != v10)
      {
        do
        {
          v17 = *--v8;
          *((_QWORD *)v16 - 1) = v17;
          v16 -= 8;
        }
        while (v8 != v10);
        v8 = (_QWORD *)a1[1];
      }
      a1[1] = v16;
      a1[2] = v9;
      a1[3] = &v15[8 * v14];
      if (v8)
        operator delete(v8);
    }
    else
    {
      *v8 = v6;
      v9 = v8 + 1;
    }
    a1[2] = v9;
    v5 = a1[1];
    v4 = a1[4];
    v2 = a1[5];
  }
  result = *(_QWORD *)(v5 + 8 * v2) + 24 * v4;
  a1[4] = v4 + 1;
  return result;
}

uint64_t std::priority_queue<sentencepiece::unigram::`anonymous namespace'::Hypothesis *,std::vector<sentencepiece::unigram::`anonymous namespace'::Hypothesis *>,sentencepiece::unigram::Lattice::NBest(unsigned long,BOOL,float)::HypothesisComparator>::push(uint64_t *a1, _QWORD *a2)
{
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;

  v5 = (_QWORD *)a1[1];
  v4 = a1[2];
  if ((unint64_t)v5 >= v4)
  {
    v7 = *a1;
    v8 = ((uint64_t)v5 - *a1) >> 3;
    v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 61)
      std::vector<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>>::__throw_length_error[abi:ne180100]();
    v10 = v4 - v7;
    if (v10 >> 2 > v9)
      v9 = v10 >> 2;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v9;
    if (v11)
    {
      if (v11 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v12 = (char *)operator new(8 * v11);
    }
    else
    {
      v12 = 0;
    }
    v13 = &v12[8 * v8];
    *(_QWORD *)v13 = *a2;
    v6 = (uint64_t)(v13 + 8);
    if (v5 != (_QWORD *)v7)
    {
      do
      {
        v14 = *--v5;
        *((_QWORD *)v13 - 1) = v14;
        v13 -= 8;
      }
      while (v5 != (_QWORD *)v7);
      v5 = (_QWORD *)*a1;
    }
    *a1 = (uint64_t)v13;
    a1[1] = v6;
    a1[2] = (uint64_t)&v12[8 * v11];
    if (v5)
      operator delete(v5);
  }
  else
  {
    *v5 = *a2;
    v6 = (uint64_t)(v5 + 1);
  }
  a1[1] = v6;
}

void std::vector<std::pair<std::vector<sentencepiece::unigram::Lattice::Node *>,float>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;

  v3 = a1[1];
  v4 = (v3 - *a1) >> 5;
  if (a2 <= v4)
  {
    if (a2 < v4)
    {
      v5 = *a1 + 32 * a2;
      if (v3 != v5)
      {
        v6 = a1[1];
        do
        {
          v8 = *(void **)(v6 - 32);
          v6 -= 32;
          v7 = v8;
          if (v8)
          {
            *(_QWORD *)(v3 - 24) = v7;
            operator delete(v7);
          }
          v3 = v6;
        }
        while (v6 != v5);
      }
      a1[1] = v5;
    }
  }
  else
  {
    std::vector<std::pair<std::vector<sentencepiece::unigram::Lattice::Node *>,float>>::__append(a1, a2 - v4);
  }
}

_QWORD *sentencepiece::model::FreeList<sentencepiece::unigram::`anonymous namespace'::Hypothesis>::~FreeList(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  *a1 = &off_2516E3140;
  v2 = (_QWORD *)a1[1];
  v3 = (_QWORD *)a1[2];
  if (v2 != v3)
  {
    do
    {
      if (*v2)
        MEMORY[0x249544F34](*v2, 0x1020C8062D53EE8);
      ++v2;
    }
    while (v2 != v3);
    v2 = (_QWORD *)a1[1];
  }
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void sentencepiece::unigram::Lattice::Sample(sentencepiece::unigram::Lattice *this@<X0>, float a2@<S0>, void **a3@<X8>)
{
  unint64_t v6;
  sentencepiece::random *v7;
  int v8;
  uint64_t v9;
  float v10;
  float *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  float *v15;
  float v16;
  float *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  float *v23;
  void *v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  char *v41;
  unint64_t v42;
  char *v43;
  unint64_t v44;
  uint64_t v45;
  BOOL v46;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *RandomGenerator;
  void *v48[3];
  void *v49[2];
  float *v50;
  void *__p[2];
  float *v52;

  if ((int)(((*((_QWORD *)this + 4) - *((_QWORD *)this + 3)) >> 3) - 1) <= 0)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
  else
  {
    v6 = *((_QWORD *)this + 16) + *((_QWORD *)this + 17) * *((_QWORD *)this + 18);
    LODWORD(v49[0]) = 0;
    std::vector<float>::vector(__p, v6, v49);
    sentencepiece::unigram::Lattice::ForwardAlgorithm(this, a2, (uint64_t *)v49);
    v7 = (sentencepiece::random *)__p[0];
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    *(_OWORD *)__p = *(_OWORD *)v49;
    v52 = v50;
    RandomGenerator = (std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *)sentencepiece::random::GetRandomGenerator(v7);
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    v49[0] = 0;
    v49[1] = 0;
    v50 = 0;
    v8 = ((*((_QWORD *)this + 4) - *((_QWORD *)this + 3)) >> 3) - 1;
    v9 = **(_QWORD **)(*((_QWORD *)this + 6) + 24 * (v8 & ~(v8 >> 31)));
    v10 = *((float *)__p[0] + *(unsigned int *)(v9 + 24));
    do
    {
      v11 = (float *)v49[0];
      v49[1] = v49[0];
      v12 = (uint64_t *)(*((_QWORD *)this + 9) + 24 * *(unsigned int *)(v9 + 16));
      v14 = *v12;
      v13 = v12[1];
      v15 = (float *)v49[0];
      if (*v12 != v13)
      {
        do
        {
          v16 = exp((float)((float)(*((float *)__p[0] + *(unsigned int *)(*(_QWORD *)v14 + 24))
                                  + (float)(a2 * *(float *)(*(_QWORD *)v14 + 32)))
                          - v10));
          if (v11 >= v50)
          {
            v17 = (float *)v49[0];
            v18 = ((char *)v11 - (char *)v49[0]) >> 2;
            v19 = v18 + 1;
            if ((unint64_t)(v18 + 1) >> 62)
              std::vector<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>>::__throw_length_error[abi:ne180100]();
            v20 = (char *)v50 - (char *)v49[0];
            if (((char *)v50 - (char *)v49[0]) >> 1 > v19)
              v19 = v20 >> 1;
            if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL)
              v21 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v21 = v19;
            if (v21)
            {
              v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v50, v21);
              v17 = (float *)v49[0];
              v11 = (float *)v49[1];
            }
            else
            {
              v22 = 0;
            }
            v23 = (float *)&v22[4 * v18];
            *v23 = v16;
            v24 = v23 + 1;
            while (v11 != v17)
            {
              v25 = *((_DWORD *)v11-- - 1);
              *((_DWORD *)v23-- - 1) = v25;
            }
            v49[0] = v23;
            v49[1] = v24;
            v50 = (float *)&v22[4 * v21];
            if (v17)
              operator delete(v17);
            v11 = (float *)v24;
          }
          else
          {
            *v11++ = v16;
          }
          v49[1] = v11;
          v14 += 8;
        }
        while (v14 != v13);
        v15 = (float *)v49[0];
      }
      std::discrete_distribution<int>::param_type::param_type[abi:ne180100]<std::__wrap_iter<float *>>((uint64_t)v48, v15, v11);
      v26 = *(_DWORD *)(v9 + 16);
      v27 = *((_QWORD *)this + 9);
      v9 = *(_QWORD *)(*(_QWORD *)(v27 + 24 * v26)
                     + 8
                     * (int)std::discrete_distribution<int>::operator()<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>>((int)v48, RandomGenerator, (double **)v48));
      v28 = ***((_QWORD ***)this + 9);
      if (v9 != v28)
      {
        v10 = *((float *)__p[0] + *(unsigned int *)(v9 + 24));
        v30 = a3[1];
        v29 = (unint64_t)a3[2];
        if ((unint64_t)v30 >= v29)
        {
          v32 = ((char *)v30 - (_BYTE *)*a3) >> 3;
          if ((unint64_t)(v32 + 1) >> 61)
            std::vector<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>>::__throw_length_error[abi:ne180100]();
          v33 = v29 - (_QWORD)*a3;
          v34 = v33 >> 2;
          if (v33 >> 2 <= (unint64_t)(v32 + 1))
            v34 = v32 + 1;
          if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8)
            v35 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v35 = v34;
          if (v35)
            v36 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a3 + 2), v35);
          else
            v36 = 0;
          v37 = &v36[8 * v32];
          *(_QWORD *)v37 = v9;
          v31 = v37 + 8;
          v39 = (char *)*a3;
          v38 = (char *)a3[1];
          if (v38 != *a3)
          {
            do
            {
              v40 = *((_QWORD *)v38 - 1);
              v38 -= 8;
              *((_QWORD *)v37 - 1) = v40;
              v37 -= 8;
            }
            while (v38 != v39);
            v38 = (char *)*a3;
          }
          *a3 = v37;
          a3[1] = v31;
          a3[2] = &v36[8 * v35];
          if (v38)
            operator delete(v38);
        }
        else
        {
          *v30 = v9;
          v31 = v30 + 1;
        }
        a3[1] = v31;
      }
      if (v48[0])
      {
        v48[1] = v48[0];
        operator delete(v48[0]);
      }
    }
    while (v9 != v28);
    v42 = (unint64_t)*a3;
    v41 = (char *)a3[1];
    if (*a3 != v41)
    {
      v43 = v41 - 8;
      if ((unint64_t)v43 > v42)
      {
        v44 = v42 + 8;
        do
        {
          v45 = *(_QWORD *)(v44 - 8);
          *(_QWORD *)(v44 - 8) = *(_QWORD *)v43;
          *(_QWORD *)v43 = v45;
          v43 -= 8;
          v46 = v44 >= (unint64_t)v43;
          v44 += 8;
        }
        while (!v46);
      }
    }
    if (v49[0])
    {
      v49[1] = v49[0];
      operator delete(v49[0]);
    }
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
}

void sub_245C66BA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sentencepiece::unigram::Model::PopulateNodes(sentencepiece::unigram::Model *this, sentencepiece::unigram::Lattice *a2)
{
  float v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  _BYTE *v10;
  char *v11;
  unint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  char *v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  char *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  BOOL v31;
  unint64_t *v32;
  int v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  float v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  void *__p;
  _BYTE *v46;

  v4 = *((float *)this + 26);
  v5 = ((*((_QWORD *)a2 + 4) - *((_QWORD *)a2 + 3)) >> 3) - 1;
  v6 = *((_QWORD *)a2 + 1);
  v7 = *((_QWORD *)a2 + 2);
  std::vector<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type,std::allocator<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>>::vector(&__p, *((int *)this + 23) + 1);
  v42 = v5;
  if ((int)v5 < 1)
    goto LABEL_40;
  v43 = 0;
  v8 = 0;
  v9 = v4 + -10.0;
  v41 = v6 + (int)v7;
  do
  {
    v10 = *(_BYTE **)(*((_QWORD *)a2 + 3) + 8 * v8);
    v11 = (char *)__p;
    v12 = (v46 - (_BYTE *)__p) >> 4;
    v13 = (_DWORD *)*((_QWORD *)this + 5);
    v14 = (*v13 >> 10 << ((*v13 >> 6) & 8));
    if ((v41 - (_QWORD)v10) << 32)
    {
      v15 = 0;
      v16 = 0;
      do
      {
        v17 = v10[v15];
        v18 = v14 ^ v17;
        v19 = v13[v18];
        if ((v19 & 0x800000FF) != (_DWORD)v17)
          break;
        v14 = v18 ^ (v19 >> 10 << ((v19 >> 6) & 8));
        if ((v19 & 0x100) != 0)
        {
          if (v16 < v12)
          {
            v20 = &v11[16 * v16];
            *(_DWORD *)v20 = v13[v14] & 0x7FFFFFFF;
            *((_QWORD *)v20 + 1) = v15 + 1;
          }
          ++v16;
        }
        ++v15;
      }
      while ((_DWORD)v41 - (_DWORD)v10 != v15);
    }
    else
    {
      v21 = *v10;
      if (*v10)
      {
        v16 = 0;
        v22 = 1;
        do
        {
          v23 = v14 ^ v21;
          v24 = v13[v23];
          if ((v24 & 0x800000FF) != v21)
            break;
          v14 = v23 ^ (v24 >> 10 << ((v24 >> 6) & 8));
          if ((v24 & 0x100) != 0)
          {
            if (v16 < v12)
            {
              v25 = &v11[16 * v16];
              *(_DWORD *)v25 = v13[v14] & 0x7FFFFFFF;
              *((_QWORD *)v25 + 1) = v22;
            }
            ++v16;
          }
          v21 = v10[v22++];
        }
        while (v21);
      }
      else
      {
        v16 = 0;
      }
    }
    if (v16 >= v12)
    {
      v44 = 1;
      v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"unigram_model.cc", 16);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"(", 1);
      v27 = (_QWORD *)std::ostream::operator<<();
      v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)") [", 3);
      v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"(num_nodes) < (trie_results.size())", 35);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"] ", 2);
      sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&v44);
    }
    if (!v16)
    {
LABEL_38:
      v40 = sentencepiece::unigram::Lattice::Insert(a2, v8, 1);
      *(_DWORD *)(v40 + 28) = *((_DWORD *)this + 22);
      *(float *)(v40 + 32) = v9;
      goto LABEL_39;
    }
    v30 = 0;
    v31 = 0;
    do
    {
      while (1)
      {
        v32 = (unint64_t *)(*((_QWORD *)a2 + 3) + v43);
        v33 = -1;
        do
        {
          v34 = *v32++;
          ++v33;
        }
        while (v34 < (unint64_t)&v10[*((_QWORD *)__p + 2 * v30 + 1)]);
        v35 = *((unsigned int *)__p + 4 * v30);
        if (((*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 1) + 128))(*((_QWORD *)this + 1), v35) & 1) != 0)
          break;
        v36 = v8;
        v37 = sentencepiece::unigram::Lattice::Insert(a2, v8, v33);
        *(_DWORD *)(v37 + 28) = v35;
        if ((*(unsigned int (**)(_QWORD, uint64_t))(**((_QWORD **)this + 1) + 136))(*((_QWORD *)this + 1), v35))
        {
          v38 = (float)(*((float *)this + 27) * (float)v33) + -0.1;
        }
        else
        {
          v38 = (*(float (**)(_QWORD, uint64_t))(**((_QWORD **)this + 1) + 96))(*((_QWORD *)this + 1), v35);
        }
        v39 = v38;
        *(float *)(v37 + 32) = v39;
        if (!v31)
        {
          v31 = *(_DWORD *)(v37 + 20) == 1;
          v8 = v36;
          break;
        }
        ++v30;
        v31 = 1;
        v8 = v36;
        if (v30 == v16)
          goto LABEL_39;
      }
      ++v30;
    }
    while (v30 != v16);
    if (!v31)
      goto LABEL_38;
LABEL_39:
    ++v8;
    v43 += 8;
  }
  while (v8 != v42);
LABEL_40:
  if (__p)
  {
    v46 = __p;
    operator delete(__p);
  }
}

void sub_245C66F94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sentencepiece::unigram::Model::LookupPredictive(uint64_t a1@<X0>, _BYTE *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, sentencepiece::util::Status *a6@<X8>)
{
  void *v12;
  int v13;
  unsigned int *v14;
  unsigned int *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD v20[2];
  void *__p;
  unsigned int *v22;

  (*(void (**)(void **__return_ptr))(*(_QWORD *)a1 + 16))(&__p);
  v12 = __p;
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&__p);
  if (v12)
  {
    sentencepiece::util::Status::Status(a6, (const sentencepiece::util::Status *)(a1 + 96));
  }
  else
  {
    v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 128))(a1);
    v14 = (unsigned int *)__p;
    v15 = v22;
    if (__p != v22)
    {
      do
      {
        v16 = *v14;
        if (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, v16) & 1) == 0
          && ((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 152))(a1, v16) & 1) == 0)
        {
          v20[0] = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 120))(a1, v16);
          v20[1] = v17;
          v18 = *(_QWORD *)(a5 + 8);
          if (v18 >= *(_QWORD *)(a5 + 16))
          {
            v19 = std::vector<std::string>::__emplace_back_slow_path<std::string_view>(a5, (uint64_t)v20);
          }
          else
          {
            std::allocator<std::string>::construct[abi:ne180100]<std::string,std::string_view>(a5 + 16, *(_BYTE **)(a5 + 8), (uint64_t)v20);
            v19 = v18 + 24;
            *(_QWORD *)(a5 + 8) = v18 + 24;
          }
          *(_QWORD *)(a5 + 8) = v19;
        }
        v14 += 4;
      }
      while (v14 != v15);
    }
    sentencepiece::util::Status::Status(a6, (const sentencepiece::util::Status *)(a1 + 96));
    if (__p)
    {
      v22 = (unsigned int *)__p;
      operator delete(__p);
    }
  }
}

{
  void *v12;
  int v13;
  unsigned int *v14;
  unsigned int *v15;
  uint64_t v16;
  unint64_t v17;
  _DWORD *v18;
  _DWORD *v19;
  _DWORD *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  int v27;
  void *__p;
  unsigned int *v29;

  (*(void (**)(void **__return_ptr))(*(_QWORD *)a1 + 16))(&__p);
  v12 = __p;
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&__p);
  if (v12)
  {
    sentencepiece::util::Status::Status(a6, (const sentencepiece::util::Status *)(a1 + 96));
  }
  else
  {
    v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 128))(a1);
    v14 = (unsigned int *)__p;
    v15 = v29;
    if (__p != v29)
    {
      do
      {
        v16 = *v14;
        if (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, v16) & 1) == 0
          && ((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 152))(a1, v16) & 1) == 0)
        {
          v18 = *(_DWORD **)(a5 + 8);
          v17 = *(_QWORD *)(a5 + 16);
          if ((unint64_t)v18 >= v17)
          {
            v20 = *(_DWORD **)a5;
            v21 = ((uint64_t)v18 - *(_QWORD *)a5) >> 2;
            v22 = v21 + 1;
            if ((unint64_t)(v21 + 1) >> 62)
              std::vector<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>>::__throw_length_error[abi:ne180100]();
            v23 = v17 - (_QWORD)v20;
            if (v23 >> 1 > v22)
              v22 = v23 >> 1;
            if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFFCLL)
              v24 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v24 = v22;
            if (v24)
            {
              v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(a5 + 16, v24);
              v20 = *(_DWORD **)a5;
              v18 = *(_DWORD **)(a5 + 8);
            }
            else
            {
              v25 = 0;
            }
            v26 = &v25[4 * v21];
            *(_DWORD *)v26 = v16;
            v19 = v26 + 4;
            while (v18 != v20)
            {
              v27 = *--v18;
              *((_DWORD *)v26 - 1) = v27;
              v26 -= 4;
            }
            *(_QWORD *)a5 = v26;
            *(_QWORD *)(a5 + 8) = v19;
            *(_QWORD *)(a5 + 16) = &v25[4 * v24];
            if (v20)
              operator delete(v20);
          }
          else
          {
            *v18 = v16;
            v19 = v18 + 1;
          }
          *(_QWORD *)(a5 + 8) = v19;
        }
        v14 += 4;
      }
      while (v14 != v15);
    }
    sentencepiece::util::Status::Status(a6, (const sentencepiece::util::Status *)(a1 + 96));
    if (__p)
    {
      v29 = (unsigned int *)__p;
      operator delete(__p);
    }
  }
}

void sub_245C67134(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sentencepiece::unigram::`anonymous namespace'::LookupPredictiveInternal(uint64_t a1@<X0>, _BYTE *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, int a5@<W4>, uint64_t *a6@<X8>)
{
  unint64_t v12;

  if (a4 != -1)
    a5 = a4;
  std::vector<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type,std::allocator<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>>::vector(a6, a5);
  v12 = Darts::DoubleArrayImpl<void,void,int,void>::predictiveSearch<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>(a1, a2, *a6, (a6[1] - *a6) >> 4, a3, a4);
  std::vector<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type,std::allocator<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>>::resize((uint64_t)a6, v12);
}

void sub_245C671E0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_245C673D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

sentencepiece::unigram::Model *sentencepiece::unigram::Model::Model(sentencepiece::unigram::Model *this, const sentencepiece::ModelProto *a2)
{
  sentencepiece::ModelInterface *v4;
  unint64_t v5;
  float v6;
  float v7;

  v4 = sentencepiece::ModelInterface::ModelInterface(this);
  *((_QWORD *)v4 + 13) = 0;
  *((_DWORD *)v4 + 28) = 0;
  *(_QWORD *)v4 = &off_2516E31A0;
  *((_QWORD *)v4 + 1) = (char *)a2 + 16;
  sentencepiece::ModelInterface::InitializePieces(v4);
  v5 = 0;
  *((_QWORD *)this + 13) = 0x8000007F7FFFFFLL;
  while (v5 < (*(int (**)(_QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1)))
  {
    if ((*(unsigned int (**)(_QWORD, unint64_t))(**((_QWORD **)this + 1) + 104))(*((_QWORD *)this + 1), v5))
    {
      v6 = (*(float (**)(_QWORD, unint64_t))(**((_QWORD **)this + 1) + 96))(*((_QWORD *)this + 1), v5);
      if (v6 >= *((float *)this + 26))
        v6 = *((float *)this + 26);
      *((float *)this + 26) = v6;
      v7 = (*(float (**)(_QWORD, unint64_t))(**((_QWORD **)this + 1) + 96))(*((_QWORD *)this + 1), v5);
      if (*((float *)this + 27) >= v7)
        v7 = *((float *)this + 27);
      *((float *)this + 27) = v7;
    }
    ++v5;
  }
  return this;
}

void sub_245C674C8(_Unwind_Exception *a1)
{
  sentencepiece::ModelInterface *v1;

  sentencepiece::ModelInterface::~ModelInterface(v1);
  _Unwind_Resume(a1);
}

sentencepiece::ModelInterface *sentencepiece::ModelInterface::ModelInterface(sentencepiece::ModelInterface *this)
{
  *(_QWORD *)this = off_2516E2748;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = &off_2516E3588;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = &off_2516E3588;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  *((_DWORD *)this + 22) = 0;
  sentencepiece::util::Status::Status((_QWORD *)this + 12);
  return this;
}

void sub_245C67554(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;

  v5 = v2;
  *(_QWORD *)(v1 + 56) = v5;
  *v4 = 0;
  v4[1] = 0;
  v7 = *(_QWORD *)(v1 + 80);
  if (v7)
  {
    MEMORY[0x249544F34](v7, 0x1000C8052888210);
    *(_QWORD *)(v1 + 80) = 0;
  }
  *(_QWORD *)(v1 + 24) = &off_2516E3588;
  *v3 = 0;
  v3[1] = 0;
  v8 = *(_QWORD *)(v1 + 48);
  if (v8)
  {
    MEMORY[0x249544F34](v8, 0x1000C8052888210);
    *(_QWORD *)(v1 + 48) = 0;
  }
  std::unique_ptr<sentencepiece::normalizer::PrefixMatcher>::reset[abi:ne180100]((uint64_t **)(v1 + 16), 0);
  _Unwind_Resume(a1);
}

uint64_t sentencepiece::unigram::Model::Model(uint64_t a1, uint64_t a2, _DWORD *a3, unint64_t a4)
{
  BOOL v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  _DWORD *v11;
  _DWORD *v12;
  uint64_t *v13;
  _DWORD *v14;
  _DWORD *v15;
  _DWORD *v17;

  v7 = a4 > 7;
  if (a4 <= 7)
    v8 = 0;
  else
    v8 = a4 - 8;
  if (v7)
    v9 = (char *)(a3 + 2);
  else
    v9 = "";
  v10 = sentencepiece::ModelInterface::ModelInterface(a1, a2, v9, v8);
  *(_DWORD *)(v10 + 104) = 0;
  v11 = (_DWORD *)(v10 + 104);
  *(_QWORD *)v10 = &off_2516E31A0;
  *(_DWORD *)(v10 + 108) = 0;
  v12 = (_DWORD *)(v10 + 108);
  *(_DWORD *)(v10 + 112) = 0;
  v13 = (uint64_t *)(v10 + 96);
  sentencepiece::util::Status::Status((sentencepiece::util::Status *)&v17, (const sentencepiece::util::Status *)(v10 + 96));
  v14 = v17;
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v17);
  if (!v14)
  {
    sentencepiece::mmap_util::DecodePrefix<float>(a3, a4, v11, &v17);
    sentencepiece::util::Status::operator=(v13, &v17);
    sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v17);
    (*(void (**)(_DWORD **__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(&v17, a1);
    v15 = v17;
    sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v17);
    if (!v15)
    {
      sentencepiece::mmap_util::DecodePrefix<float>(a3 + 1, a4 - 4, v12, &v17);
      sentencepiece::util::Status::operator=(v13, &v17);
      sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v17);
    }
  }
  return a1;
}

void sub_245C676E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  sentencepiece::ModelInterface *v2;
  va_list va;

  va_start(va, a2);
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)va);
  sentencepiece::ModelInterface::~ModelInterface(v2);
  _Unwind_Resume(a1);
}

_QWORD *sentencepiece::mmap_util::DecodePrefix<float>@<X0>(_DWORD *a1@<X0>, unint64_t a2@<X1>, _DWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *v6;
  unsigned int v7;
  _QWORD v8[11];
  char v9;
  uint64_t v10;

  if (a2 <= 3)
  {
    v7 = 13;
    v6 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/util.h", 62);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"(", 1);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)") [", 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"string.size() >= sizeof(T)", 26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"] ", 2);
    sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status(&v7, (uint64_t)a4);
    v8[0] = *MEMORY[0x24BEDB800];
    *(_QWORD *)((char *)v8 + *(_QWORD *)(v8[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
    v8[1] = MEMORY[0x24BEDB848] + 16;
    if (v9 < 0)
      operator delete((void *)v8[9]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return (_QWORD *)MEMORY[0x249544EE0](&v10);
  }
  else
  {
    *a3 = *a1;
    return sentencepiece::util::Status::Status(a4);
  }
}

void sub_245C67870(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sentencepiece::util::StatusBuilder::~StatusBuilder((sentencepiece::util::StatusBuilder *)&a9);
  _Unwind_Resume(a1);
}

void sentencepiece::unigram::Model::~Model(sentencepiece::unigram::Model *this)
{
  sentencepiece::ModelInterface::~ModelInterface(this);
  JUMPOUT(0x249544F58);
}

void sentencepiece::unigram::Model::Encode(sentencepiece::unigram::Model *a1@<X0>, unsigned __int8 *a2@<X1>, unint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  __int128 v22;
  _QWORD *v23;
  _QWORD *v24;
  void (**v25)(sentencepiece::unigram::Lattice *__hidden);
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t (**v32)();
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;

  if (*((_DWORD *)a1 + 28))
  {
    (*(void (**)(void (***__return_ptr)(sentencepiece::unigram::Lattice *__hidden), sentencepiece::unigram::Model *))(*(_QWORD *)a1 + 16))(&v25, a1);
    if (v25)
    {
      sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v25);
LABEL_4:
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      return;
    }
    sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v25);
    if (!a3)
      goto LABEL_4;
    v25 = &off_2516E3290;
    v26 = 0u;
    v27 = 0u;
    v28 = 0u;
    v29 = 0u;
    v30 = 0u;
    v31 = 0;
    v32 = &off_2516E3160;
    v33 = 0u;
    v34 = 0u;
    v35 = 0;
    v36 = 1024;
    sentencepiece::unigram::Lattice::SetSentence((uint64_t)&v25, a2, a3);
    sentencepiece::unigram::Model::PopulateNodes(a1, (sentencepiece::unigram::Lattice *)&v25);
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    sentencepiece::unigram::Lattice::Viterbi((sentencepiece::unigram::Lattice *)&v25, (uint64_t)&v23);
    v8 = v23;
    v9 = v24;
    if (v23 != v24)
    {
      v10 = a4 + 2;
      v11 = (char *)a4[1];
      do
      {
        v12 = *v8;
        if ((unint64_t)v11 >= *v10)
        {
          v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v11[-*a4] >> 3);
          v14 = v13 + 1;
          if (v13 + 1 > 0xAAAAAAAAAAAAAAALL)
            std::vector<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>>::__throw_length_error[abi:ne180100]();
          if (0x5555555555555556 * ((uint64_t)(*v10 - *a4) >> 3) > v14)
            v14 = 0x5555555555555556 * ((uint64_t)(*v10 - *a4) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v10 - *a4) >> 3) >= 0x555555555555555)
            v15 = 0xAAAAAAAAAAAAAAALL;
          else
            v15 = v14;
          v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)(a4 + 2), v15);
          v18 = &v16[24 * v13];
          *(_OWORD *)v18 = *(_OWORD *)v12;
          *((_DWORD *)v18 + 4) = *(_DWORD *)(v12 + 28);
          v20 = (char *)*a4;
          v19 = (char *)a4[1];
          v21 = v18;
          if (v19 != (char *)*a4)
          {
            do
            {
              v22 = *(_OWORD *)(v19 - 24);
              *((_QWORD *)v21 - 1) = *((_QWORD *)v19 - 1);
              *(_OWORD *)(v21 - 24) = v22;
              v21 -= 24;
              v19 -= 24;
            }
            while (v19 != v20);
            v19 = (char *)*a4;
          }
          v11 = v18 + 24;
          *a4 = v21;
          a4[1] = v18 + 24;
          a4[2] = &v16[24 * v17];
          if (v19)
            operator delete(v19);
        }
        else
        {
          *(_OWORD *)v11 = *(_OWORD *)v12;
          *((_DWORD *)v11 + 4) = *(_DWORD *)(v12 + 28);
          v11 += 24;
        }
        a4[1] = v11;
        ++v8;
      }
      while (v8 != v9);
      v8 = v23;
    }
    if (v8)
    {
      v24 = v8;
      operator delete(v8);
    }
    sentencepiece::unigram::Lattice::~Lattice((sentencepiece::unigram::Lattice *)&v25);
  }
  else
  {
    sentencepiece::unigram::Model::EncodeOptimized((uint64_t)a1, (uint64_t)a2, a3, a4);
  }
}

void sub_245C67B28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;
  void *v15;

  v15 = *(void **)v13;
  if (*(_QWORD *)v13)
  {
    *(_QWORD *)(v13 + 8) = v15;
    operator delete(v15);
  }
  sentencepiece::unigram::Lattice::~Lattice((sentencepiece::unigram::Lattice *)&a13);
  _Unwind_Resume(a1);
}

void sentencepiece::unigram::Model::EncodeOptimized(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  float v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float *v12;
  float *v13;
  int v14;
  float v15;
  unint64_t v16;
  float v17;
  int v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int *v24;
  uint64_t v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  double v29;
  double v30;
  float v31;
  float *v32;
  int *v33;
  int v34;
  float v35;
  char *v37;
  _QWORD *v38;
  unsigned int v39;
  float *v40;
  unint64_t v41;
  unsigned int *v42;
  int v43;
  uint64_t v44;
  unint64_t v45;
  char **v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  char *v50;
  uint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  char *v55;
  __int128 v56;
  __int128 *v57;
  char *i;
  __int128 v59;
  int v60;
  unint64_t v61;
  char *v62;
  unint64_t v63;
  float *v64;
  _QWORD *v65;
  uint64_t v66;
  __int128 v67;

  (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)a1 + 16))(&v67);
  if ((_QWORD)v67)
  {
    sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v67);
LABEL_3:
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    return;
  }
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v67);
  if (!a3)
    goto LABEL_3;
  v8 = *(float *)(a1 + 104);
  v9 = (a3 << 32) + 0x100000000;
  v66 = a2;
  if (a3 << 32 == 0xFFFFFFFF00000000)
  {
    v12 = 0;
  }
  else
  {
    if (v9 < 0)
      std::vector<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>>::__throw_length_error[abi:ne180100]();
    v10 = v9 >> 32;
    v11 = 3 * v10;
    v12 = (float *)operator new(12 * v10);
    v13 = v12;
    do
    {
      *(_QWORD *)v13 = 0xFFFFFFFFLL;
      v13[2] = NAN;
      v13 += 3;
    }
    while (v13 != &v12[v11]);
    a2 = v66;
  }
  if ((int)a3 <= 0)
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
  }
  else
  {
    v65 = a4;
    v14 = 0;
    v15 = v8 + -10.0;
    v16 = (int)a3;
    v62 = (char *)(v12 + 5);
    v63 = a3;
    v64 = v12;
    v61 = (int)a3;
    do
    {
      v17 = v12[3 * v14 + 1];
      if ((int)a3 - v14 >= asc_245CA23B3[(unint64_t)*(unsigned __int8 *)(a2 + v14) >> 4])
        v18 = asc_245CA23B3[(unint64_t)*(unsigned __int8 *)(a2 + v14) >> 4];
      else
        v18 = a3 - v14;
      if (v16 <= v14)
        goto LABEL_31;
      v19 = 0;
      v20 = 0;
      v21 = 0;
      v22 = a2 + v14;
      v23 = v16 - v14;
      v24 = (int *)&v62[12 * v14];
      do
      {
        v25 = *(_QWORD *)(a1 + 40);
        v26 = *(unsigned __int8 *)(v22 + v19);
        LODWORD(v21) = (*(_DWORD *)(v25 + 4 * v21) >> 10 << ((*(_DWORD *)(v25 + 4 * v21) >> 6) & 8)) ^ v21 ^ v26;
        v27 = *(_DWORD *)(v25 + 4 * v21);
        if ((v27 & 0x800000FF) != v26)
          break;
        if ((v27 & 0x100) != 0)
        {
          v28 = *(_DWORD *)(v25 + 4 * ((v27 >> 10 << ((v27 >> 6) & 8)) ^ v21)) & 0x7FFFFFFF;
          if (((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 128))(*(_QWORD *)(a1 + 8), v28) & 1) == 0)
          {
            if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 136))(*(_QWORD *)(a1 + 8), v28))
            {
              v29 = (float)(*(float *)(a1 + 108) * (float)(unint64_t)(v19 + 1)) + -0.1;
            }
            else
            {
              v29 = (*(float (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 96))(*(_QWORD *)(a1 + 8), v28);
            }
            v30 = v29 + v17;
            if (*v24 == -1 || v30 > *((float *)v24 - 1))
            {
              v31 = v30;
              *((float *)v24 - 1) = v31;
              *v24 = v14;
              *(v24 - 2) = v28;
            }
            v20 |= v18 - 1 == v19;
          }
        }
        ++v19;
        v24 += 3;
      }
      while (v23 != v19);
      LODWORD(a3) = v63;
      v12 = v64;
      a2 = v66;
      v16 = v61;
      if ((v20 & 1) == 0)
      {
LABEL_31:
        v32 = &v12[3 * v18 + 3 * v14];
        v34 = *((_DWORD *)v32 + 2);
        v33 = (int *)(v32 + 2);
        v35 = v15 + v17;
        if (v34 == -1 || v35 > *((float *)v33 - 1))
        {
          *((float *)v33 - 1) = v35;
          *v33 = v14;
          v12[3 * v18 + 3 * v14] = *(float *)(a1 + 88);
        }
      }
      v14 += v18;
    }
    while (v14 < (int)a3);
    v37 = 0;
    v65[2] = 0;
    v38 = v65 + 2;
    *v65 = 0;
    v65[1] = 0;
    v39 = a3;
    do
    {
      v40 = &v12[3 * v39];
      v42 = (unsigned int *)(v40 + 2);
      v41 = *((int *)v40 + 2);
      if (v63 < v41)
        std::__throw_out_of_range[abi:ne180100]("string_view::substr");
      v43 = v39 - v41;
      v44 = v66 + v41;
      if (v63 - v41 >= v43)
        v45 = v43;
      else
        v45 = v63 - v41;
      if ((unint64_t)v37 >= *v38)
      {
        v47 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v37[-*v65] >> 3);
        v48 = v47 + 1;
        if (v47 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>>::__throw_length_error[abi:ne180100]();
        if (0x5555555555555556 * ((uint64_t)(*v38 - *v65) >> 3) > v48)
          v48 = 0x5555555555555556 * ((uint64_t)(*v38 - *v65) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v38 - *v65) >> 3) >= 0x555555555555555)
          v49 = 0xAAAAAAAAAAAAAAALL;
        else
          v49 = v48;
        v50 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)v38, v49);
        v52 = &v50[24 * v47];
        *(_QWORD *)v52 = v44;
        *((_QWORD *)v52 + 1) = v45;
        *((float *)v52 + 4) = *v40;
        v46 = (char **)v65;
        v54 = (char *)*v65;
        v53 = (char *)v65[1];
        v55 = v52;
        if (v53 == (char *)*v65)
        {
          v12 = v64;
        }
        else
        {
          v12 = v64;
          do
          {
            v56 = *(_OWORD *)(v53 - 24);
            *((_QWORD *)v55 - 1) = *((_QWORD *)v53 - 1);
            *(_OWORD *)(v55 - 24) = v56;
            v55 -= 24;
            v53 -= 24;
          }
          while (v53 != v54);
          v53 = (char *)*v65;
        }
        v37 = v52 + 24;
        *v65 = v55;
        v65[1] = v52 + 24;
        v65[2] = &v50[24 * v51];
        if (v53)
          operator delete(v53);
      }
      else
      {
        *(_QWORD *)v37 = v44;
        *((_QWORD *)v37 + 1) = v45;
        *((float *)v37 + 4) = *v40;
        v37 += 24;
        v12 = v64;
        v46 = (char **)v65;
      }
      v46[1] = v37;
      v39 = *v42;
    }
    while ((int)*v42 > 0);
    v57 = (__int128 *)*v46;
    if (*v46 != v37)
    {
      for (i = v37 - 24; v57 < (__int128 *)i; i -= 24)
      {
        v67 = *v57;
        v59 = v67;
        *v57 = *(_OWORD *)i;
        *(_OWORD *)i = v59;
        v60 = *((_DWORD *)v57 + 4);
        *((_DWORD *)v57 + 4) = *((_DWORD *)i + 4);
        *((_DWORD *)i + 4) = v60;
        v57 = (__int128 *)((char *)v57 + 24);
      }
    }
  }
  if (v12)
    operator delete(v12);
}

void sub_245C68048(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  void *v15;

  v15 = *(void **)a14;
  if (*(_QWORD *)a14)
  {
    *(_QWORD *)(a14 + 8) = v15;
    operator delete(v15);
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sentencepiece::unigram::Model::NBestEncode(sentencepiece::unigram::Model *a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t *a5@<X8>)
{
  char *v10;
  void *v11;
  int v12;
  uint64_t v13;
  char *v14;
  uint64_t i;
  uint64_t *v16;
  uint64_t *v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  __int128 v29;
  float *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  void *v35;
  char *v36;
  char *v37;
  __int128 v38;
  void *v39;
  void *__p[13];
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  (*(void (**)(void **__return_ptr))(*(_QWORD *)a1 + 16))(__p);
  if (__p[0])
  {
    sentencepiece::util::Status::~Status((sentencepiece::util::Status *)__p);
LABEL_3:
    memset(__p, 0, 24);
    std::vector<std::pair<std::string_view,int>>::__init_with_size[abi:ne180100]<std::pair<std::string_view,int>*,std::pair<std::string_view,int>*>((char *)__p, 0, 0, 0);
    LODWORD(__p[3]) = 0;
    a5[1] = 0;
    a5[2] = 0;
    *a5 = 0;
    *(_QWORD *)&v38 = a5;
    BYTE8(v38) = 0;
    v10 = (char *)operator new(0x20uLL);
    *a5 = (uint64_t)v10;
    a5[1] = (uint64_t)v10;
    a5[2] = (uint64_t)(v10 + 32);
    a5[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::vector<std::pair<std::string_view,int>>,float>>,std::pair<std::vector<std::pair<std::string_view,int>>,float> const*,std::pair<std::vector<std::pair<std::string_view,int>>,float> const*,std::pair<std::vector<std::pair<std::string_view,int>>,float>*>((uint64_t)(a5 + 2), (uint64_t)__p, (uint64_t)&__p[4], (uint64_t)v10);
    v11 = __p[0];
    if (!__p[0])
      return;
    __p[1] = __p[0];
    goto LABEL_5;
  }
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)__p);
  if (!a3)
    goto LABEL_3;
  if (a4 >= 1024)
    v12 = 1024;
  else
    v12 = a4;
  if (v12 <= 1)
    v13 = 1;
  else
    v13 = v12;
  if (v13 > 1)
  {
    __p[0] = &off_2516E3290;
    memset(&__p[1], 0, 88);
    __p[12] = &off_2516E3160;
    v41 = 0u;
    v42 = 0u;
    v43 = 0;
    v44 = 1024;
    sentencepiece::unigram::Lattice::SetSentence((uint64_t)__p, a2, a3);
    sentencepiece::unigram::Model::PopulateNodes(a1, (sentencepiece::unigram::Lattice *)__p);
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
    v34 = a5;
    sentencepiece::unigram::Lattice::NBest((sentencepiece::unigram::Lattice *)__p, 0.0, v13, 0, (uint64_t *)&v38);
    v33 = *((_QWORD *)&v38 + 1);
    for (i = v38; i != v33; i += 32)
    {
      v35 = 0;
      v36 = 0;
      v37 = 0;
      v16 = *(uint64_t **)i;
      v17 = *(uint64_t **)(i + 8);
      if (*(uint64_t **)i != v17)
      {
        v18 = 0;
        do
        {
          v19 = *v16;
          if (v18 >= v37)
          {
            v20 = 0xAAAAAAAAAAAAAAABLL * ((v18 - (_BYTE *)v35) >> 3);
            v21 = v20 + 1;
            if (v20 + 1 > 0xAAAAAAAAAAAAAAALL)
              std::vector<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>>::__throw_length_error[abi:ne180100]();
            if (0x5555555555555556 * ((v37 - (_BYTE *)v35) >> 3) > v21)
              v21 = 0x5555555555555556 * ((v37 - (_BYTE *)v35) >> 3);
            if (0xAAAAAAAAAAAAAAABLL * ((v37 - (_BYTE *)v35) >> 3) >= 0x555555555555555)
              v22 = 0xAAAAAAAAAAAAAAALL;
            else
              v22 = v21;
            v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v37, v22);
            v25 = &v23[24 * v20];
            *(_OWORD *)v25 = *(_OWORD *)v19;
            *((_DWORD *)v25 + 4) = *(_DWORD *)(v19 + 28);
            v27 = (char *)v35;
            v26 = v36;
            v28 = v25;
            if (v36 != v35)
            {
              do
              {
                v29 = *(_OWORD *)(v26 - 24);
                *((_QWORD *)v28 - 1) = *((_QWORD *)v26 - 1);
                *(_OWORD *)(v28 - 24) = v29;
                v28 -= 24;
                v26 -= 24;
              }
              while (v26 != v27);
              v26 = (char *)v35;
            }
            v18 = v25 + 24;
            v35 = v28;
            v36 = v25 + 24;
            v37 = &v23[24 * v24];
            if (v26)
              operator delete(v26);
          }
          else
          {
            *(_OWORD *)v18 = *(_OWORD *)v19;
            *((_DWORD *)v18 + 4) = *(_DWORD *)(v19 + 28);
            v18 += 24;
          }
          v36 = v18;
          ++v16;
        }
        while (v16 != v17);
      }
      v30 = (float *)(i + 24);
      v31 = v34[1];
      if (v31 >= v34[2])
      {
        v32 = std::vector<std::pair<std::vector<std::pair<std::string_view,int>>,float>>::__emplace_back_slow_path<std::vector<std::pair<std::string_view,int>>&,float const&>(v34, (__int128 **)&v35, v30);
      }
      else
      {
        std::vector<std::pair<std::vector<std::pair<std::string_view,int>>,float>>::__construct_one_at_end[abi:ne180100]<std::vector<std::pair<std::string_view,int>>&,float const&>((uint64_t)v34, (__int128 **)&v35, v30);
        v32 = v31 + 32;
      }
      v34[1] = v32;
      if (v35)
      {
        v36 = (char *)v35;
        operator delete(v35);
      }
    }
    v35 = &v38;
    std::vector<std::pair<std::vector<std::pair<std::string_view,int>>,float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v35);
    sentencepiece::unigram::Lattice::~Lattice((sentencepiece::unigram::Lattice *)__p);
  }
  else
  {
    (*(void (**)(__int128 *__return_ptr, sentencepiece::unigram::Model *, unsigned __int8 *, uint64_t))(*(_QWORD *)a1 + 40))(&v38, a1, a2, a3);
    *(_OWORD *)__p = v38;
    __p[2] = v39;
    v39 = 0;
    v38 = 0uLL;
    LODWORD(__p[3]) = 0;
    a5[1] = 0;
    a5[2] = 0;
    *a5 = 0;
    v35 = a5;
    LOBYTE(v36) = 0;
    v14 = (char *)operator new(0x20uLL);
    *a5 = (uint64_t)v14;
    a5[1] = (uint64_t)v14;
    a5[2] = (uint64_t)(v14 + 32);
    a5[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::vector<std::pair<std::string_view,int>>,float>>,std::pair<std::vector<std::pair<std::string_view,int>>,float> const*,std::pair<std::vector<std::pair<std::string_view,int>>,float> const*,std::pair<std::vector<std::pair<std::string_view,int>>,float>*>((uint64_t)(a5 + 2), (uint64_t)__p, (uint64_t)&__p[4], (uint64_t)v14);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    v11 = (void *)v38;
    if ((_QWORD)v38)
    {
      *((_QWORD *)&v38 + 1) = v38;
LABEL_5:
      operator delete(v11);
    }
  }
}

void sub_245C68498(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  a12 = a11;
  std::vector<std::pair<std::vector<std::pair<std::string_view,int>>,float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  sentencepiece::unigram::Lattice::~Lattice((sentencepiece::unigram::Lattice *)&__p);
  _Unwind_Resume(a1);
}

void sentencepiece::unigram::Model::SampleEncode(sentencepiece::unigram::Model *a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>, float a5@<S0>)
{
  _QWORD *v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  __int128 v24;
  _QWORD *v25;
  _QWORD *v26;
  void (**v27)(sentencepiece::unigram::Lattice *__hidden);
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t (**v34)();
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;

  (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)a1 + 16))(&v27);
  if (v27)
  {
    sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v27);
LABEL_3:
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    return;
  }
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v27);
  if (!a3)
    goto LABEL_3;
  v27 = &off_2516E3290;
  v28 = 0u;
  v29 = 0u;
  v30 = 0u;
  v31 = 0u;
  v32 = 0u;
  v33 = 0;
  v34 = &off_2516E3160;
  v35 = 0u;
  v36 = 0u;
  v37 = 0;
  v38 = 1024;
  sentencepiece::unigram::Lattice::SetSentence((uint64_t)&v27, a2, a3);
  sentencepiece::unigram::Model::PopulateNodes(a1, (sentencepiece::unigram::Lattice *)&v27);
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  sentencepiece::unigram::Lattice::Sample((sentencepiece::unigram::Lattice *)&v27, a5, (void **)&v25);
  v10 = v25;
  v11 = v26;
  if (v25 != v26)
  {
    v12 = 0;
    v13 = a4 + 2;
    do
    {
      v14 = *v10;
      if ((unint64_t)v12 >= *v13)
      {
        v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v12[-*a4] >> 3);
        v16 = v15 + 1;
        if (v15 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>>::__throw_length_error[abi:ne180100]();
        if (0x5555555555555556 * ((uint64_t)(*v13 - *a4) >> 3) > v16)
          v16 = 0x5555555555555556 * ((uint64_t)(*v13 - *a4) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v13 - *a4) >> 3) >= 0x555555555555555)
          v17 = 0xAAAAAAAAAAAAAAALL;
        else
          v17 = v16;
        v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)(a4 + 2), v17);
        v20 = &v18[24 * v15];
        *(_OWORD *)v20 = *(_OWORD *)v14;
        *((_DWORD *)v20 + 4) = *(_DWORD *)(v14 + 28);
        v22 = (char *)*a4;
        v21 = (char *)a4[1];
        v23 = v20;
        if (v21 != (char *)*a4)
        {
          do
          {
            v24 = *(_OWORD *)(v21 - 24);
            *((_QWORD *)v23 - 1) = *((_QWORD *)v21 - 1);
            *(_OWORD *)(v23 - 24) = v24;
            v23 -= 24;
            v21 -= 24;
          }
          while (v21 != v22);
          v21 = (char *)*a4;
        }
        v12 = v20 + 24;
        *a4 = v23;
        a4[1] = v20 + 24;
        a4[2] = &v18[24 * v19];
        if (v21)
          operator delete(v21);
      }
      else
      {
        *(_OWORD *)v12 = *(_OWORD *)v14;
        *((_DWORD *)v12 + 4) = *(_DWORD *)(v14 + 28);
        v12 += 24;
      }
      a4[1] = v12;
      ++v10;
    }
    while (v10 != v11);
    v10 = v25;
  }
  if (v10)
  {
    v26 = v10;
    operator delete(v10);
  }
  sentencepiece::unigram::Lattice::~Lattice((sentencepiece::unigram::Lattice *)&v27);
}

void sub_245C687B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  sentencepiece::unigram::Lattice::~Lattice((sentencepiece::unigram::Lattice *)&a13);
  _Unwind_Resume(a1);
}

void sentencepiece::unigram::Model::SampleEncodeAndScore(sentencepiece::unigram::Model *a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, char a5@<W4>, int a6@<W5>, uint64_t *j@<X8>, float a8@<S0>)
{
  sentencepiece::unigram::Model *v14;
  sentencepiece::logging *v16;
  float v17;
  uint64_t *v18;
  uint64_t *v19;
  __int128 *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  __int128 *v28;
  __int128 *v29;
  __int128 *v30;
  __int128 v31;
  char *v32;
  float v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  __int128 *v41;
  __int128 *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  __int128 *v49;
  char *v50;
  uint64_t v51;
  double v52;
  double v53;
  float v54;
  __int128 *v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  char *v60;
  uint64_t v61;
  char *v62;
  __int128 *v63;
  __int128 *v64;
  __int128 *v65;
  __int128 v66;
  char *v67;
  uint64_t v68;
  __int128 *v69;
  __int128 *v70;
  __int128 *v71;
  void *v72;
  void *v73;
  void *v74;
  float v75;
  __int128 *i;
  uint64_t *v77;
  uint64_t *v78;
  char *v79;
  float v80;
  uint64_t v81;
  float v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  char *v86;
  uint64_t v87;
  char *v88;
  char *v89;
  char *v90;
  char *v91;
  __int128 v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  float v97;
  double v98;
  long double v99;
  long double v100;
  double v101;
  float v102;
  uint64_t *v103;
  int v104;
  int v105;
  sentencepiece::unigram::Model *v106;
  sentencepiece::unigram::Model *v107;
  unsigned __int8 *v108;
  unsigned __int8 *v109;
  uint64_t v110;
  uint64_t v111;
  __int128 *v112;
  float v113;
  void *__p[13];
  __int128 v115;
  __int128 v116;
  uint64_t v117;
  uint64_t v118;
  double v119;
  double v120;
  __int128 *v121;
  __int128 *v122;
  char *v123;
  void *v124[3];
  void **v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  uint64_t v131;
  uint64_t (**v132)();
  __int128 v133;
  __int128 v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  unint64_t v139;

  v14 = a1;
  (*(void (**)(void ***__return_ptr))(*(_QWORD *)a1 + 16))(&v125);
  if (v125)
  {
    sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v125);
LABEL_3:
    *j = 0;
    j[1] = 0;
    j[2] = 0;
    return;
  }
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v125);
  if (!a3)
    goto LABEL_3;
  v137 = 0;
  v138 = 0;
  v139 = 0;
  v125 = (void **)&off_2516E3290;
  v126 = 0u;
  v127 = 0u;
  v128 = 0u;
  v129 = 0u;
  v130 = 0u;
  v131 = 0;
  v132 = &off_2516E3160;
  v133 = 0u;
  v134 = 0u;
  v135 = 0;
  v136 = 1024;
  sentencepiece::unigram::Lattice::SetSentence((uint64_t)&v125, a2, a3);
  sentencepiece::unigram::Model::PopulateNodes(v14, (sentencepiece::unigram::Lattice *)&v125);
  sentencepiece::unigram::Lattice::ForwardAlgorithm((sentencepiece::unigram::Lattice *)&v125, a8, (uint64_t *)v124);
  v17 = *((float *)v124[0]
        + *(unsigned int *)(**(_QWORD **)(*((_QWORD *)&v128 + 1)
                                        + 24
                                        * ((((*((_QWORD *)&v127 + 1) - (_QWORD)v127) >> 3) - 1) & ~((int)(((*((_QWORD *)&v127 + 1) - (_QWORD)v127) >> 3) - 1) >> 31)))
                          + 24));
  if (a6)
  {
    if ((a5 & 1) == 0)
    {
      if ((int)sentencepiece::logging::GetMinLogLevel(v16) <= 2)
      {
        LOBYTE(__p[0]) = 0;
        v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"unigram_model.cc", 16);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"(", 1);
        v36 = (_QWORD *)std::ostream::operator<<();
        v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)") ", 2);
        v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"LOG(", 4);
        v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)"ERROR", 5);
        v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)") ", 2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"include_best not supported for wor false", 40);
        sentencepiece::error::Die::~Die((sentencepiece::error::Die *)__p);
      }
      goto LABEL_113;
    }
    v104 = a4;
    v105 = a6;
    v106 = v14;
    v108 = a2;
    v110 = a3;
    v121 = 0;
    v122 = 0;
    v123 = 0;
    sentencepiece::unigram::Lattice::Viterbi((sentencepiece::unigram::Lattice *)&v125, (uint64_t)__p);
    v18 = (uint64_t *)__p[0];
    v19 = (uint64_t *)__p[1];
    if (__p[0] != __p[1])
    {
      v20 = v122;
      do
      {
        v21 = *v18;
        if (v20 >= (__int128 *)v123)
        {
          v22 = 0xAAAAAAAAAAAAAAABLL * (((char *)v20 - (char *)v121) >> 3);
          v23 = v22 + 1;
          if (v22 + 1 > 0xAAAAAAAAAAAAAAALL)
            std::vector<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>>::__throw_length_error[abi:ne180100]();
          if (0x5555555555555556 * ((v123 - (char *)v121) >> 3) > v23)
            v23 = 0x5555555555555556 * ((v123 - (char *)v121) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * ((v123 - (char *)v121) >> 3) >= 0x555555555555555)
            v24 = 0xAAAAAAAAAAAAAAALL;
          else
            v24 = v23;
          v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v123, v24);
          v27 = &v25[24 * v22];
          *(_OWORD *)v27 = *(_OWORD *)v21;
          *((_DWORD *)v27 + 4) = *(_DWORD *)(v21 + 28);
          v29 = v121;
          v28 = v122;
          v30 = (__int128 *)v27;
          if (v122 != v121)
          {
            do
            {
              v31 = *(__int128 *)((char *)v28 - 24);
              *((_QWORD *)v30 - 1) = *((_QWORD *)v28 - 1);
              *(__int128 *)((char *)v30 - 24) = v31;
              v30 = (__int128 *)((char *)v30 - 24);
              v28 = (__int128 *)((char *)v28 - 24);
            }
            while (v28 != v29);
            v28 = v121;
          }
          v20 = (__int128 *)(v27 + 24);
          v121 = v30;
          v122 = (__int128 *)(v27 + 24);
          v123 = &v25[24 * v26];
          if (v28)
            operator delete(v28);
        }
        else
        {
          *v20 = *(_OWORD *)v21;
          *((_DWORD *)v20 + 4) = *(_DWORD *)(v21 + 28);
          v20 = (__int128 *)((char *)v20 + 24);
        }
        v122 = v20;
        ++v18;
      }
      while (v18 != v19);
    }
    v119 = 0.0;
    v32 = v138;
    if ((unint64_t)v138 >= v139)
    {
      v34 = std::vector<std::pair<std::vector<std::pair<std::string_view,int>>,float>>::__emplace_back_slow_path<std::vector<std::pair<std::string_view,int>>&,double>(&v137, &v121, &v119);
      a2 = v108;
      a3 = v110;
    }
    else
    {
      *(_QWORD *)v138 = 0;
      *((_QWORD *)v32 + 1) = 0;
      *((_QWORD *)v32 + 2) = 0;
      std::vector<std::pair<std::string_view,int>>::__init_with_size[abi:ne180100]<std::pair<std::string_view,int>*,std::pair<std::string_view,int>*>(v32, v121, v122, 0xAAAAAAAAAAAAAAABLL * (((char *)v122 - (char *)v121) >> 3));
      a2 = v108;
      a3 = v110;
      v33 = v119;
      *((float *)v32 + 6) = v33;
      v34 = (uint64_t)(v32 + 32);
    }
    a4 = v104;
    v14 = v106;
    a6 = v105;
    v138 = (char *)v34;
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (v121)
    {
      v122 = v121;
      operator delete(v121);
    }
  }
  if ((a5 & 1) != 0)
  {
    sentencepiece::unigram::Lattice::NBest((sentencepiece::unigram::Lattice *)&v125, a8, a4 + 1, 1, (uint64_t *)&v121);
    v103 = j;
    if (a6)
    {
      std::vector<std::vector<sentencepiece::unigram::Lattice::Node *>>::vector(&v119, ((char *)v122 - (char *)v121) >> 5);
      v42 = v121;
      v41 = v122;
      if (v122 != v121)
      {
        v43 = 0;
        v44 = 0;
        v45 = 0;
        do
        {
          if (&v42[v43] != (__int128 *)(*(_QWORD *)&v119 + v44))
          {
            std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long *,unsigned long *>((char *)(*(_QWORD *)&v119 + v44), *(char **)&v42[v43], *((_QWORD *)&v42[v43] + 1), (uint64_t)(*((_QWORD *)&v42[v43] + 1) - *(_QWORD *)&v42[v43]) >> 3);
            v42 = v121;
            v41 = v122;
          }
          ++v45;
          v44 += 24;
          v43 += 2;
        }
        while (v45 < ((char *)v41 - (char *)v42) >> 5);
      }
      sentencepiece::unigram::Lattice::Viterbi((sentencepiece::unigram::Lattice *)&v125, (uint64_t)__p);
      v46 = std::__find_impl[abi:ne180100]<std::vector<sentencepiece::unigram::Lattice::Node *> *,std::vector<sentencepiece::unigram::Lattice::Node *> *,std::vector<sentencepiece::unigram::Lattice::Node *>,std::__identity>(*(uint64_t *)&v119, *(uint64_t *)&v120, (uint64_t)__p);
      v47 = (int)(-1431655765 * ((unint64_t)(v46 - *(_QWORD *)&v119) >> 3));
      if (v47 == ((char *)v122 - (char *)v121) >> 5)
      {
        v49 = v122 - 2;
        v48 = (void *)*((_QWORD *)v122 - 4);
        if (v48)
        {
          *((_QWORD *)v122 - 3) = v48;
          operator delete(v48);
        }
      }
      else
      {
        std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,std::pair<std::vector<sentencepiece::unigram::Lattice::Node *>,float> *,std::pair<std::vector<sentencepiece::unigram::Lattice::Node *>,float> *,std::pair<std::vector<sentencepiece::unigram::Lattice::Node *>,float> *,0>((__n128 *)&v121[2 * v47 + 2], (__n128 *)v122, (uint64_t)&v121[2 * v47]);
        v49 = v69;
        v70 = v122;
        if (v122 != v69)
        {
          v71 = v122;
          do
          {
            v73 = (void *)*((_QWORD *)v71 - 4);
            v71 -= 2;
            v72 = v73;
            if (v73)
            {
              *((_QWORD *)v70 - 3) = v72;
              operator delete(v72);
            }
            v70 = v71;
          }
          while (v71 != v49);
        }
      }
      v122 = v49;
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      __p[0] = &v119;
      std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    }
    v74 = (void *)*((_QWORD *)v122 - 4);
    v112 = v122 - 2;
    v75 = *((float *)v122 - 2);
    if (v74)
    {
      *((_QWORD *)v122 - 3) = v74;
      operator delete(v74);
    }
    v122 = v112;
    for (i = v121; i != v112; i += 2)
    {
      memset(__p, 0, 24);
      v77 = *(uint64_t **)i;
      v78 = (uint64_t *)*((_QWORD *)i + 1);
      if (*(uint64_t **)i == v78)
      {
        v80 = 0.0;
      }
      else
      {
        v79 = 0;
        v80 = 0.0;
        do
        {
          v81 = *v77;
          v82 = *(float *)(*v77 + 32);
          if (v79 >= __p[2])
          {
            v83 = 0xAAAAAAAAAAAAAAABLL * ((v79 - (char *)__p[0]) >> 3);
            v84 = v83 + 1;
            if (v83 + 1 > 0xAAAAAAAAAAAAAAALL)
              std::vector<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>>::__throw_length_error[abi:ne180100]();
            if (0x5555555555555556 * (((char *)__p[2] - (char *)__p[0]) >> 3) > v84)
              v84 = 0x5555555555555556 * (((char *)__p[2] - (char *)__p[0]) >> 3);
            if (0xAAAAAAAAAAAAAAABLL * (((char *)__p[2] - (char *)__p[0]) >> 3) >= 0x555555555555555)
              v85 = 0xAAAAAAAAAAAAAAALL;
            else
              v85 = v84;
            v86 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&__p[2], v85);
            v88 = &v86[24 * v83];
            *(_OWORD *)v88 = *(_OWORD *)v81;
            *((_DWORD *)v88 + 4) = *(_DWORD *)(v81 + 28);
            v90 = (char *)__p[0];
            v89 = (char *)__p[1];
            v91 = v88;
            if (__p[1] != __p[0])
            {
              do
              {
                v92 = *(_OWORD *)(v89 - 24);
                *((_QWORD *)v91 - 1) = *((_QWORD *)v89 - 1);
                *(_OWORD *)(v91 - 24) = v92;
                v91 -= 24;
                v89 -= 24;
              }
              while (v89 != v90);
              v89 = (char *)__p[0];
            }
            v79 = v88 + 24;
            __p[0] = v91;
            __p[1] = v88 + 24;
            __p[2] = &v86[24 * v87];
            if (v89)
              operator delete(v89);
          }
          else
          {
            *(_OWORD *)v79 = *(_OWORD *)v81;
            *((_DWORD *)v79 + 4) = *(_DWORD *)(v81 + 28);
            v79 += 24;
          }
          __p[1] = v79;
          v80 = v80 + (float)(a8 * v82);
          ++v77;
        }
        while (v77 != v78);
      }
      *(float *)&v119 = v80 - v17;
      v93 = v138;
      if ((unint64_t)v138 >= v139)
      {
        v94 = std::vector<std::pair<std::vector<std::pair<std::string_view,int>>,float>>::__emplace_back_slow_path<std::vector<std::pair<std::string_view,int>>&,float>(&v137, (__int128 **)__p, &v119);
      }
      else
      {
        *(_QWORD *)v138 = 0;
        *((_QWORD *)v93 + 1) = 0;
        *((_QWORD *)v93 + 2) = 0;
        std::vector<std::pair<std::string_view,int>>::__init_with_size[abi:ne180100]<std::pair<std::string_view,int>*,std::pair<std::string_view,int>*>(v93, (__int128 *)__p[0], (__int128 *)__p[1], 0xAAAAAAAAAAAAAAABLL * (((char *)__p[1] - (char *)__p[0]) >> 3));
        *((_DWORD *)v93 + 6) = LODWORD(v119);
        v94 = (uint64_t)(v93 + 32);
      }
      v138 = (char *)v94;
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
    }
    v95 = v137;
    v96 = v138;
    for (j = v103; (char *)v95 != v96; v95 += 32)
    {
      v97 = *(float *)(v95 + 24);
      if (v97 != 0.0)
      {
        v98 = v97 - v75;
        v99 = exp(v98);
        if (v98 <= -10.0)
        {
          v101 = v98 + v99 * -0.5 + v99 * v99 / 24.0 + pow(v99, 4.0) / -2880.0;
        }
        else
        {
          v100 = expm1(-v99);
          v101 = log(-v100);
        }
        v102 = v101;
        *(float *)(v95 + 24) = v102;
      }
    }
    __p[0] = &v121;
    std::vector<std::pair<std::vector<std::pair<std::string_view,int>>,float>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    v51 = v137;
    v50 = v138;
  }
  else
  {
    v51 = v137;
    v50 = v138;
    if (a4 > (unint64_t)((uint64_t)&v138[-v137] >> 5))
    {
      v109 = a2;
      v111 = a3;
      v107 = v14;
      do
      {
        memset(&__p[1], 0, 88);
        __p[0] = &off_2516E3290;
        __p[12] = &off_2516E3160;
        v115 = 0u;
        v116 = 0u;
        v117 = 0;
        v118 = 1024;
        sentencepiece::unigram::Lattice::SetSentence((uint64_t)__p, a2, a3);
        sentencepiece::unigram::Model::PopulateNodes(v14, (sentencepiece::unigram::Lattice *)__p);
        v121 = 0;
        v122 = 0;
        v123 = 0;
        sentencepiece::unigram::Lattice::Sample((sentencepiece::unigram::Lattice *)__p, a8, (void **)&v119);
        v53 = v119;
        v52 = v120;
        v54 = 0.0;
        if (*(_QWORD *)&v119 != *(_QWORD *)&v120)
        {
          v55 = v122;
          do
          {
            v56 = **(_QWORD **)&v53;
            if (v55 >= (__int128 *)v123)
            {
              v57 = 0xAAAAAAAAAAAAAAABLL * (((char *)v55 - (char *)v121) >> 3);
              v58 = v57 + 1;
              if (v57 + 1 > 0xAAAAAAAAAAAAAAALL)
                std::vector<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>>::__throw_length_error[abi:ne180100]();
              if (0x5555555555555556 * ((v123 - (char *)v121) >> 3) > v58)
                v58 = 0x5555555555555556 * ((v123 - (char *)v121) >> 3);
              if (0xAAAAAAAAAAAAAAABLL * ((v123 - (char *)v121) >> 3) >= 0x555555555555555)
                v59 = 0xAAAAAAAAAAAAAAALL;
              else
                v59 = v58;
              v60 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v123, v59);
              v62 = &v60[24 * v57];
              *(_OWORD *)v62 = *(_OWORD *)v56;
              *((_DWORD *)v62 + 4) = *(_DWORD *)(v56 + 28);
              v64 = v121;
              v63 = v122;
              v65 = (__int128 *)v62;
              if (v122 != v121)
              {
                do
                {
                  v66 = *(__int128 *)((char *)v63 - 24);
                  *((_QWORD *)v65 - 1) = *((_QWORD *)v63 - 1);
                  *(__int128 *)((char *)v65 - 24) = v66;
                  v65 = (__int128 *)((char *)v65 - 24);
                  v63 = (__int128 *)((char *)v63 - 24);
                }
                while (v63 != v64);
                v63 = v121;
              }
              v55 = (__int128 *)(v62 + 24);
              v121 = v65;
              v122 = (__int128 *)(v62 + 24);
              v123 = &v60[24 * v61];
              if (v63)
                operator delete(v63);
            }
            else
            {
              *v55 = *(_OWORD *)v56;
              *((_DWORD *)v55 + 4) = *(_DWORD *)(v56 + 28);
              v55 = (__int128 *)((char *)v55 + 24);
            }
            v122 = v55;
            v54 = v54 + (float)(a8 * *(float *)(v56 + 32));
            *(_QWORD *)&v53 += 8;
          }
          while (*(_QWORD *)&v53 != *(_QWORD *)&v52);
        }
        v113 = v54 - v17;
        v67 = v138;
        if ((unint64_t)v138 >= v139)
        {
          v68 = std::vector<std::pair<std::vector<std::pair<std::string_view,int>>,float>>::__emplace_back_slow_path<std::vector<std::pair<std::string_view,int>>&,float>(&v137, &v121, &v113);
        }
        else
        {
          *(_QWORD *)v138 = 0;
          *((_QWORD *)v67 + 1) = 0;
          *((_QWORD *)v67 + 2) = 0;
          std::vector<std::pair<std::string_view,int>>::__init_with_size[abi:ne180100]<std::pair<std::string_view,int>*,std::pair<std::string_view,int>*>(v67, v121, v122, 0xAAAAAAAAAAAAAAABLL * (((char *)v122 - (char *)v121) >> 3));
          *((float *)v67 + 6) = v113;
          v68 = (uint64_t)(v67 + 32);
        }
        a2 = v109;
        a3 = v111;
        v14 = v107;
        v138 = (char *)v68;
        if (v119 != 0.0)
        {
          v120 = v119;
          operator delete(*(void **)&v119);
        }
        if (v121)
        {
          v122 = v121;
          operator delete(v121);
        }
        sentencepiece::unigram::Lattice::~Lattice((sentencepiece::unigram::Lattice *)__p);
        v51 = v137;
        v50 = v138;
      }
      while (a4 > (unint64_t)((uint64_t)&v138[-v137] >> 5));
    }
  }
  *j = v51;
  j[1] = (uint64_t)v50;
  j[2] = v139;
  j = &v137;
LABEL_113:
  *j = 0;
  j[1] = 0;
  j[2] = 0;
  if (v124[0])
  {
    v124[1] = v124[0];
    operator delete(v124[0]);
  }
  sentencepiece::unigram::Lattice::~Lattice((sentencepiece::unigram::Lattice *)&v125);
  v125 = (void **)&v137;
  std::vector<std::pair<std::vector<std::pair<std::string_view,int>>,float>>::__destroy_vector::operator()[abi:ne180100](&v125);
}

void sub_245C69290(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char *__p, char *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void **a44)
{
  uint64_t v44;
  uint64_t v45;
  void *v47;

  if (__p)
  {
    a17 = __p;
    operator delete(__p);
  }
  __p = &a35;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p = &a38;
  std::vector<std::pair<std::vector<std::pair<std::string_view,int>>,float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  v47 = *(void **)(v44 + 200);
  if (v47)
  {
    *(_QWORD *)(v44 + 208) = v47;
    operator delete(v47);
  }
  sentencepiece::unigram::Lattice::~Lattice((sentencepiece::unigram::Lattice *)&a44);
  a44 = (void **)(v45 - 160);
  std::vector<std::pair<std::vector<std::pair<std::string_view,int>>,float>>::__destroy_vector::operator()[abi:ne180100](&a44);
  _Unwind_Resume(a1);
}

float sentencepiece::unigram::Model::CalculateEntropy(sentencepiece::unigram::Model *a1, unsigned __int8 *a2, uint64_t a3, float a4)
{
  float v6;
  void (**v8)(sentencepiece::unigram::Lattice *__hidden);
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t (**v15)();
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;

  v8 = &off_2516E3290;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0;
  v15 = &off_2516E3160;
  v16 = 0u;
  v17 = 0u;
  v18 = 0;
  v19 = 1024;
  sentencepiece::unigram::Lattice::SetSentence((uint64_t)&v8, a2, a3);
  sentencepiece::unigram::Model::PopulateNodes(a1, (sentencepiece::unigram::Lattice *)&v8);
  v6 = sentencepiece::unigram::Lattice::CalculateEntropy((sentencepiece::unigram::Lattice *)&v8, a4);
  sentencepiece::unigram::Lattice::~Lattice((sentencepiece::unigram::Lattice *)&v8);
  return v6;
}

void sub_245C69494(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sentencepiece::unigram::Lattice::~Lattice((sentencepiece::unigram::Lattice *)va);
  _Unwind_Resume(a1);
}

BOOL sentencepiece::unigram::Model::VerifyOutputsEquivalent(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  size_t v10;
  _QWORD *v11;
  _QWORD *v12;
  float v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  size_t v18;
  _QWORD *v19;
  _QWORD *v20;
  float v21;
  float v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  sentencepiece::logging *v26;
  float v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  void *v41;
  _QWORD *v42;
  uint64_t v43;
  void *v44;
  _BYTE *v45;
  void *__p;
  _QWORD *v47;
  uint64_t v48;
  char __s[2];

  strcpy(__s, " ");
  v10 = strlen(__s);
  absl::internal::Splitter::Splitter((char **)&v44, a2, a3, (unsigned __int8 *)__s, v10, 0);
  v47 = 0;
  v48 = 0;
  __p = 0;
  std::vector<std::string_view>::__init_with_size[abi:ne180100]<std::string_view*,std::string_view*>(&__p, v44, (uint64_t)v45, (v45 - (_BYTE *)v44) >> 4);
  v11 = __p;
  v12 = v47;
  if (__p == v47)
  {
    v14 = 0.0;
    if (__p)
    {
LABEL_11:
      v47 = v11;
      operator delete(v11);
    }
  }
  else
  {
    v13 = *(float *)(a1 + 104) + -10.0;
    v14 = 0.0;
    do
    {
      v15 = v11[1];
      v16 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a1 + 112))(a1, *v11, v15);
      if ((_DWORD)v16 == *(_DWORD *)(a1 + 88))
      {
        v14 = v13 + v14;
      }
      else
      {
        if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 136))(*(_QWORD *)(a1 + 8), v16))
          v17 = (float)(*(float *)(a1 + 108) * (float)(int)v15) + -0.1;
        else
          v17 = (*(float (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 96))(*(_QWORD *)(a1 + 8), v16);
        v14 = v17 + v14;
      }
      v11 += 2;
    }
    while (v11 != v12);
    v11 = __p;
    if (__p)
      goto LABEL_11;
  }
  if (v44)
  {
    v45 = v44;
    operator delete(v44);
  }
  strcpy(__s, " ");
  v18 = strlen(__s);
  absl::internal::Splitter::Splitter((char **)&v44, a4, a5, (unsigned __int8 *)__s, v18, 0);
  v42 = 0;
  v43 = 0;
  v41 = 0;
  std::vector<std::string_view>::__init_with_size[abi:ne180100]<std::string_view*,std::string_view*>(&v41, v44, (uint64_t)v45, (v45 - (_BYTE *)v44) >> 4);
  v19 = v41;
  v20 = v42;
  if (v41 != v42)
  {
    v21 = *(float *)(a1 + 104) + -10.0;
    v22 = 0.0;
    do
    {
      v23 = v19[1];
      v24 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a1 + 112))(a1, *v19, v23);
      if ((_DWORD)v24 == *(_DWORD *)(a1 + 88))
      {
        v22 = v21 + v22;
      }
      else
      {
        if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 136))(*(_QWORD *)(a1 + 8), v24))
          v25 = (float)(*(float *)(a1 + 108) * (float)(int)v23) + -0.1;
        else
          v25 = (*(float (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 96))(*(_QWORD *)(a1 + 8), v24);
        v22 = v25 + v22;
      }
      v19 += 2;
    }
    while (v19 != v20);
    v19 = v41;
    if (!v41)
      goto LABEL_25;
    goto LABEL_24;
  }
  v22 = 0.0;
  if (v41)
  {
LABEL_24:
    v42 = v19;
    operator delete(v19);
  }
LABEL_25:
  v26 = (sentencepiece::logging *)v44;
  if (v44)
  {
    v45 = v44;
    operator delete(v44);
  }
  v27 = vabds_f32(v14, v22);
  if (v27 > 0.0000001 && (int)sentencepiece::logging::GetMinLogLevel(v26) <= 1)
  {
    LOBYTE(v44) = 0;
    v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"unigram_model.cc", 16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"(", 1);
    v29 = (_QWORD *)std::ostream::operator<<();
    v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)") ", 2);
    v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"LOG(", 4);
    v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"WARNING", 7);
    v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)") ", 2);
    v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"Two sentence piece sequences are not equivalent! Left: ", 55);
    v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, a2, a3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)", Score: ", 9);
    v36 = (_QWORD *)std::ostream::operator<<();
    v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)". Right: ", 9);
    v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, a4, a5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)", Score: ", 9);
    v39 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)".", 1);
    sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&v44);
  }
  return v27 <= 0.0000001;
}

void sub_245C6987C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sentencepiece::unigram::Model::MemoryMappableString(sentencepiece::unigram::Model *this@<X0>, std::string *a2@<X8>)
{
  std::string *p_p;
  std::string *v5;
  std::string::size_type size;
  std::string *v7;
  std::string *v8;
  std::string::size_type v9;
  std::string *v10;
  std::string::size_type v11;
  std::string __p;
  std::string v13;

  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  sentencepiece::ModelInterface::MemoryMappableString(this, &v13);
  memset(&__p, 0, sizeof(__p));
  std::string::resize(&__p, 4uLL, 0);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  LODWORD(p_p->__r_.__value_.__l.__data_) = *((_DWORD *)this + 26);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v5 = &__p;
  else
    v5 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  std::string::append(a2, (const std::string::value_type *)v5, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  memset(&__p, 0, sizeof(__p));
  std::string::resize(&__p, 4uLL, 0);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v7 = &__p;
  else
    v7 = (std::string *)__p.__r_.__value_.__r.__words[0];
  LODWORD(v7->__r_.__value_.__l.__data_) = *((_DWORD *)this + 27);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v8 = &__p;
  else
    v8 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v9 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v9 = __p.__r_.__value_.__l.__size_;
  std::string::append(a2, (const std::string::value_type *)v8, v9);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v10 = &v13;
  else
    v10 = (std::string *)v13.__r_.__value_.__r.__words[0];
  if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v11 = HIBYTE(v13.__r_.__value_.__r.__words[2]);
  else
    v11 = v13.__r_.__value_.__l.__size_;
  std::string::append(a2, (const std::string::value_type *)v10, v11);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
}

void sub_245C69A14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;

  if (a20 < 0)
    operator delete(__p);
  if (*(char *)(v20 + 23) < 0)
    operator delete(*(void **)v20);
  _Unwind_Resume(exception_object);
}

uint64_t sentencepiece::unigram::Model::IsSampleEncodeAvailable(sentencepiece::unigram::Model *this)
{
  return 1;
}

uint64_t sentencepiece::unigram::Model::IsNBestEncodeAvailable(sentencepiece::unigram::Model *this)
{
  return 1;
}

uint64_t sentencepiece::unigram::Model::IsSampleEncodeAndScoreAvailable(sentencepiece::unigram::Model *this)
{
  return 1;
}

uint64_t sentencepiece::unigram::Model::IsCalculateEntropyAvailable(sentencepiece::unigram::Model *this)
{
  return 1;
}

_QWORD *std::vector<sentencepiece::unigram::Lattice::Node *>::__init_with_size[abi:ne180100]<sentencepiece::unigram::Lattice::Node **,sentencepiece::unigram::Lattice::Node **>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<unsigned long>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_245C69AE8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

unint64_t Darts::DoubleArrayImpl<void,void,int,void>::predictiveSearch<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>(uint64_t a1, _BYTE *a2, uint64_t a3, unint64_t a4, uint64_t a5, int a6)
{
  unsigned int *v9;
  unsigned int v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unint64_t v15;
  int v16;
  int v17;
  unint64_t v18;
  unsigned __int8 *v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  int *v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  BOOL v31;
  unsigned __int32 v32;
  int i;
  uint64_t v34;
  unint64_t v35;
  unsigned int v36;
  int v37;
  __n128 v41;
  int v42;
  _OWORD v43[2];
  __int128 v44;

  v9 = *(unsigned int **)(a1 + 16);
  v10 = *v9;
  if (a5)
  {
    v11 = *a2;
    v12 = (v10 >> 10 << ((v10 >> 6) & 8)) ^ v11;
    v10 = v9[v12];
    if ((v10 & 0x800000FF) == v11)
    {
      v13 = a5 - 1;
      v14 = a2 + 1;
      while (1)
      {
        v15 = v12;
        if (!v13)
          goto LABEL_16;
        v16 = *v14++;
        v12 = (v10 >> 10 << ((v10 >> 6) & 8)) ^ v12 ^ v16;
        v10 = v9[v12];
        --v13;
        if ((v10 & 0x800000FF) != v16)
          goto LABEL_14;
      }
    }
  }
  else
  {
    v17 = *a2;
    if (!*a2)
    {
      v15 = 0;
      LODWORD(v12) = 0;
LABEL_16:
      if ((v10 & 0x100) != 0)
        v22 = v9[(v10 >> 10 << ((v10 >> 6) & 8)) ^ v12] & 0x7FFFFFFF;
      else
        v22 = -1;
      goto LABEL_19;
    }
    v18 = (v10 >> 10 << ((v10 >> 6) & 8)) ^ v17;
    v10 = v9[v18];
    if ((v10 & 0x800000FF) == v17)
    {
      v19 = a2 + 1;
      LODWORD(v12) = v18;
      while (1)
      {
        v15 = v18;
        v21 = *v19++;
        v20 = v21;
        if (!v21)
          goto LABEL_16;
        v18 = (v10 >> 10 << ((v10 >> 6) & 8)) ^ v12 ^ v20;
        v10 = v9[v18];
        LODWORD(v12) = v18;
        if ((v10 & 0x800000FF) != v20)
          goto LABEL_14;
      }
    }
  }
  v15 = 0;
LABEL_14:
  v22 = -2;
LABEL_19:
  v44 = 0u;
  memset(v43, 0, sizeof(v43));
  v41.n128_u32[0] = 0;
  v41.n128_u64[1] = v15;
  v42 = v22;
  std::deque<unsigned long Darts::DoubleArrayImpl<void,void,int,void>::predictiveSearch<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>(char const*,Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type *,unsigned long,unsigned long,int)::State,std::allocator<unsigned long Darts::DoubleArrayImpl<void,void,int,void>::predictiveSearch<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>(char const*,Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type *,unsigned long,unsigned long,int)::State>>::push_back(v43, &v41);
  v23 = *((_QWORD *)&v44 + 1);
  if (*((_QWORD *)&v44 + 1))
  {
    v24 = 0;
    do
    {
      v25 = (int *)(*(_QWORD *)(*((_QWORD *)&v43[0] + 1) + 8 * ((unint64_t)v44 / 0xAA))
                  + 24 * ((unint64_t)v44 % 0xAA));
      v26 = *v25;
      v27 = v25[2];
      v28 = v25[4];
      *(_QWORD *)&v44 = v44 + 1;
      *((_QWORD *)&v44 + 1) = v23 - 1;
      if ((unint64_t)v44 >= 0x154)
      {
        operator delete(**((void ***)&v43[0] + 1));
        *((_QWORD *)&v43[0] + 1) += 8;
        *(_QWORD *)&v44 = v44 - 170;
      }
      if ((v28 & 0x80000000) == 0)
      {
        v29 = a3 + 16 * v24;
        *(_DWORD *)v29 = v28;
        *(_QWORD *)(v29 + 8) = a5;
        ++v24;
      }
      v31 = a6 >= 0 && v26 > a6;
      if (v24 >= a4 || v31)
        break;
      if (v28 != -2)
      {
        v32 = v26 + 1;
        for (i = 1; i != 256; ++i)
        {
          v34 = *(_QWORD *)(a1 + 16);
          v35 = (*(_DWORD *)(v34 + 4 * v27) >> 10 << ((*(_DWORD *)(v34 + 4 * v27) >> 6) & 8)) ^ v27 ^ i;
          v36 = *(_DWORD *)(v34 + 4 * v35);
          if (i == (v36 & 0x800000FF))
          {
            if ((v36 & 0x100) != 0)
              v37 = *(_DWORD *)(v34 + 4 * ((v36 >> 10 << ((v36 >> 6) & 8)) ^ v35)) & 0x7FFFFFFF;
            else
              v37 = -1;
            v41.n128_u32[0] = v32;
            v41.n128_u64[1] = v35;
            v42 = v37;
            std::deque<unsigned long Darts::DoubleArrayImpl<void,void,int,void>::predictiveSearch<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>(char const*,Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type *,unsigned long,unsigned long,int)::State,std::allocator<unsigned long Darts::DoubleArrayImpl<void,void,int,void>::predictiveSearch<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>(char const*,Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type *,unsigned long,unsigned long,int)::State>>::push_back(v43, &v41);
          }
        }
      }
      v23 = *((_QWORD *)&v44 + 1);
    }
    while (*((_QWORD *)&v44 + 1));
  }
  else
  {
    v24 = 0;
  }
  std::deque<unsigned long Darts::DoubleArrayImpl<void,void,int,void>::predictiveSearch<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>(char const*,Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type *,unsigned long,unsigned long,int)::State,std::allocator<unsigned long Darts::DoubleArrayImpl<void,void,int,void>::predictiveSearch<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>(char const*,Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type *,unsigned long,unsigned long,int)::State>>::~deque[abi:ne180100](v43);
  return v24;
}

void sub_245C69DF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::deque<unsigned long Darts::DoubleArrayImpl<void,void,int,void>::predictiveSearch<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>(char const*,Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type *,unsigned long,unsigned long,int)::State,std::allocator<unsigned long Darts::DoubleArrayImpl<void,void,int,void>::predictiveSearch<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>(char const*,Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type *,unsigned long,unsigned long,int)::State>>::~deque[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void std::vector<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type,std::allocator<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 4;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 16 * a2;
  }
  else
  {
    std::vector<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type,std::allocator<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>>::__append((void **)a1, a2 - v2);
  }
}

__n128 std::deque<unsigned long Darts::DoubleArrayImpl<void,void,int,void>::predictiveSearch<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>(char const*,Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type *,unsigned long,unsigned long,int)::State,std::allocator<unsigned long Darts::DoubleArrayImpl<void,void,int,void>::predictiveSearch<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>(char const*,Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type *,unsigned long,unsigned long,int)::State>>::push_back(_QWORD *a1, __n128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  __n128 *v8;
  __n128 result;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 170 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    std::deque<unsigned long Darts::DoubleArrayImpl<void,void,int,void>::predictiveSearch<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>(char const*,Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type *,unsigned long,unsigned long,int)::State,std::allocator<unsigned long Darts::DoubleArrayImpl<void,void,int,void>::predictiveSearch<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>(char const*,Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type *,unsigned long,unsigned long,int)::State>>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  v8 = (__n128 *)(*(_QWORD *)(v5 + 8 * (v7 / 0xAA)) + 24 * (v7 % 0xAA));
  result = *a2;
  v8[1].n128_u64[0] = a2[1].n128_u64[0];
  *v8 = result;
  ++a1[5];
  return result;
}

void std::deque<unsigned long Darts::DoubleArrayImpl<void,void,int,void>::predictiveSearch<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>(char const*,Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type *,unsigned long,unsigned long,int)::State,std::allocator<unsigned long Darts::DoubleArrayImpl<void,void,int,void>::predictiveSearch<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>(char const*,Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type *,unsigned long,unsigned long,int)::State>>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0xAA;
  v4 = v2 - 170;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0xFF0uLL);
      std::__split_buffer<unsigned long Darts::DoubleArrayImpl<void,void,int,void>::predictiveSearch<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>(char const*,Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type *,unsigned long,unsigned long,int)::State *,std::allocator<unsigned long Darts::DoubleArrayImpl<void,void,int,void>::predictiveSearch<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>(char const*,Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type *,unsigned long,unsigned long,int)::State *>>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0xFF0uLL);
    std::__split_buffer<unsigned long Darts::DoubleArrayImpl<void,void,int,void>::predictiveSearch<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>(char const*,Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type *,unsigned long,unsigned long,int)::State *,std::allocator<unsigned long Darts::DoubleArrayImpl<void,void,int,void>::predictiveSearch<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>(char const*,Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type *,unsigned long,unsigned long,int)::State *>>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0xFF0uLL);
  std::__split_buffer<unsigned long Darts::DoubleArrayImpl<void,void,int,void>::predictiveSearch<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>(char const*,Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type *,unsigned long,unsigned long,int)::State *,std::allocator<unsigned long Darts::DoubleArrayImpl<void,void,int,void>::predictiveSearch<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>(char const*,Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type *,unsigned long,unsigned long,int)::State *> &>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<unsigned long Darts::DoubleArrayImpl<void,void,int,void>::predictiveSearch<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>(char const*,Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type *,unsigned long,unsigned long,int)::State *,std::allocator<unsigned long Darts::DoubleArrayImpl<void,void,int,void>::predictiveSearch<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>(char const*,Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type *,unsigned long,unsigned long,int)::State *> &>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_245C6A1AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void std::__split_buffer<unsigned long Darts::DoubleArrayImpl<void,void,int,void>::predictiveSearch<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>(char const*,Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type *,unsigned long,unsigned long,int)::State *,std::allocator<unsigned long Darts::DoubleArrayImpl<void,void,int,void>::predictiveSearch<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>(char const*,Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type *,unsigned long,unsigned long,int)::State *>>::push_back(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  char *v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;

  v5 = (char *)a1[3];
  v4 = (uint64_t)(a1 + 3);
  v6 = *(char **)(v4 - 8);
  if (v6 == v5)
  {
    v7 = (char *)a1[1];
    v8 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1)
        v18 = 1;
      else
        v18 = (uint64_t)&v6[-*a1] >> 2;
      v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v4, v18);
      v21 = &v19[8 * (v18 >> 2)];
      v22 = (uint64_t *)a1[1];
      v6 = v21;
      v23 = a1[2] - (_QWORD)v22;
      if (v23)
      {
        v6 = &v21[v23 & 0xFFFFFFFFFFFFFFF8];
        v24 = 8 * (v23 >> 3);
        v25 = &v19[8 * (v18 >> 2)];
        do
        {
          v26 = *v22++;
          *(_QWORD *)v25 = v26;
          v25 += 8;
          v24 -= 8;
        }
        while (v24);
      }
      v27 = (char *)*a1;
      *a1 = v19;
      a1[1] = v21;
      a1[2] = v6;
      a1[3] = &v19[8 * v20];
      if (v27)
      {
        operator delete(v27);
        v6 = (char *)a1[2];
      }
    }
    else
    {
      v9 = v8 >> 3;
      v10 = v8 >> 3 < -1;
      v11 = (v8 >> 3) + 2;
      if (v10)
        v12 = v11;
      else
        v12 = v9 + 1;
      v13 = -(v12 >> 1);
      v14 = v12 >> 1;
      v15 = &v7[-8 * v14];
      v16 = v6 - v7;
      if (v6 != v7)
      {
        memmove(&v7[-8 * v14], v7, v6 - v7);
        v6 = (char *)a1[1];
      }
      v17 = &v6[8 * v13];
      v6 = &v15[v16];
      a1[1] = v17;
      a1[2] = &v15[v16];
    }
  }
  *(_QWORD *)v6 = *a2;
  a1[2] += 8;
}

void std::__split_buffer<unsigned long Darts::DoubleArrayImpl<void,void,int,void>::predictiveSearch<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>(char const*,Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type *,unsigned long,unsigned long,int)::State *,std::allocator<unsigned long Darts::DoubleArrayImpl<void,void,int,void>::predictiveSearch<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>(char const*,Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type *,unsigned long,unsigned long,int)::State *>>::push_front(uint64_t a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;

  v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    v6 = a1 + 24;
    v7 = *(_BYTE **)(a1 + 24);
    v8 = *(_BYTE **)(a1 + 16);
    if (v8 >= v7)
    {
      if (v7 == v4)
        v12 = 1;
      else
        v12 = (v7 - v4) >> 2;
      v13 = 2 * v12;
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(v6, v12);
      v5 = &v14[(v13 + 6) & 0xFFFFFFFFFFFFFFF8];
      v16 = *(uint64_t **)(a1 + 8);
      v17 = v5;
      v18 = *(_QWORD *)(a1 + 16) - (_QWORD)v16;
      if (v18)
      {
        v17 = &v5[v18 & 0xFFFFFFFFFFFFFFF8];
        v19 = 8 * (v18 >> 3);
        v20 = v5;
        do
        {
          v21 = *v16++;
          *(_QWORD *)v20 = v21;
          v20 += 8;
          v19 -= 8;
        }
        while (v19);
      }
      v22 = *(char **)a1;
      *(_QWORD *)a1 = v14;
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v17;
      *(_QWORD *)(a1 + 24) = &v14[8 * v15];
      if (v22)
      {
        operator delete(v22);
        v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v9 = (v7 - v8) >> 3;
      if (v9 >= -1)
        v10 = v9 + 1;
      else
        v10 = v9 + 2;
      v11 = v10 >> 1;
      v5 = &v4[8 * (v10 >> 1)];
      if (v8 != v4)
      {
        memmove(&v4[8 * (v10 >> 1)], v4, v8 - v4);
        v4 = *(char **)(a1 + 16);
      }
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = &v4[8 * v11];
    }
  }
  else
  {
    v5 = *(char **)(a1 + 8);
  }
  *((_QWORD *)v5 - 1) = *a2;
  *(_QWORD *)(a1 + 8) -= 8;
}

void std::__split_buffer<unsigned long Darts::DoubleArrayImpl<void,void,int,void>::predictiveSearch<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>(char const*,Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type *,unsigned long,unsigned long,int)::State *,std::allocator<unsigned long Darts::DoubleArrayImpl<void,void,int,void>::predictiveSearch<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>(char const*,Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type *,unsigned long,unsigned long,int)::State *> &>::push_back(_QWORD *a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int64_t v14;
  char *v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;

  v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    v5 = (char *)a1[1];
    v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1)
        v16 = 1;
      else
        v16 = (uint64_t)&v4[-*a1] >> 2;
      v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(a1[4], v16);
      v19 = &v17[8 * (v16 >> 2)];
      v20 = (uint64_t *)a1[1];
      v4 = v19;
      v21 = a1[2] - (_QWORD)v20;
      if (v21)
      {
        v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        v22 = 8 * (v21 >> 3);
        v23 = &v17[8 * (v16 >> 2)];
        do
        {
          v24 = *v20++;
          *(_QWORD *)v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        v4 = (char *)a1[2];
      }
    }
    else
    {
      v7 = v6 >> 3;
      v8 = v6 >> 3 < -1;
      v9 = (v6 >> 3) + 2;
      if (v8)
        v10 = v9;
      else
        v10 = v7 + 1;
      v11 = -(v10 >> 1);
      v12 = v10 >> 1;
      v13 = &v5[-8 * v12];
      v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        v4 = (char *)a1[1];
      }
      v15 = &v4[8 * v11];
      v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }
  *(_QWORD *)v4 = *a2;
  a1[2] += 8;
}

void std::__split_buffer<unsigned long Darts::DoubleArrayImpl<void,void,int,void>::predictiveSearch<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>(char const*,Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type *,unsigned long,unsigned long,int)::State *,std::allocator<unsigned long Darts::DoubleArrayImpl<void,void,int,void>::predictiveSearch<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>(char const*,Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type *,unsigned long,unsigned long,int)::State *> &>::push_front(uint64_t a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;

  v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    v6 = *(_BYTE **)(a1 + 16);
    v7 = *(_BYTE **)(a1 + 24);
    if (v6 >= v7)
    {
      if (v7 == v4)
        v11 = 1;
      else
        v11 = (v7 - v4) >> 2;
      v12 = 2 * v11;
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long>>(*(_QWORD *)(a1 + 32), v11);
      v5 = &v13[(v12 + 6) & 0xFFFFFFFFFFFFFFF8];
      v15 = *(uint64_t **)(a1 + 8);
      v16 = v5;
      v17 = *(_QWORD *)(a1 + 16) - (_QWORD)v15;
      if (v17)
      {
        v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8];
        v18 = 8 * (v17 >> 3);
        v19 = v5;
        do
        {
          v20 = *v15++;
          *(_QWORD *)v19 = v20;
          v19 += 8;
          v18 -= 8;
        }
        while (v18);
      }
      v21 = *(char **)a1;
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v16;
      *(_QWORD *)(a1 + 24) = &v13[8 * v14];
      if (v21)
      {
        operator delete(v21);
        v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v8 = (v7 - v6) >> 3;
      if (v8 >= -1)
        v9 = v8 + 1;
      else
        v9 = v8 + 2;
      v10 = v9 >> 1;
      v5 = &v4[8 * (v9 >> 1)];
      if (v6 != v4)
      {
        memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
        v4 = *(char **)(a1 + 16);
      }
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = &v4[8 * v10];
    }
  }
  else
  {
    v5 = *(char **)(a1 + 8);
  }
  *((_QWORD *)v5 - 1) = *a2;
  *(_QWORD *)(a1 + 8) -= 8;
}

uint64_t std::deque<unsigned long Darts::DoubleArrayImpl<void,void,int,void>::predictiveSearch<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>(char const*,Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type *,unsigned long,unsigned long,int)::State,std::allocator<unsigned long Darts::DoubleArrayImpl<void,void,int,void>::predictiveSearch<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>(char const*,Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type *,unsigned long,unsigned long,int)::State>>::~deque[abi:ne180100](_QWORD *a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  a1[5] = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 85;
  }
  else
  {
    if (v5 != 2)
      goto LABEL_9;
    v6 = 170;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    v7 = *v2++;
    operator delete(v7);
  }
  return std::__split_buffer<unsigned long Darts::DoubleArrayImpl<void,void,int,void>::predictiveSearch<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>(char const*,Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type *,unsigned long,unsigned long,int)::State *,std::allocator<unsigned long Darts::DoubleArrayImpl<void,void,int,void>::predictiveSearch<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>(char const*,Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type *,unsigned long,unsigned long,int)::State *>>::~__split_buffer((uint64_t)a1);
}

uint64_t std::__split_buffer<unsigned long Darts::DoubleArrayImpl<void,void,int,void>::predictiveSearch<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>(char const*,Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type *,unsigned long,unsigned long,int)::State *,std::allocator<unsigned long Darts::DoubleArrayImpl<void,void,int,void>::predictiveSearch<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>(char const*,Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type *,unsigned long,unsigned long,int)::State *>>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
    *(_QWORD *)(a1 + 16) = v2 + ((v3 - v2 + 7) & 0xFFFFFFFFFFFFFFF8);
  v4 = *(void **)a1;
  if (*(_QWORD *)a1)
    operator delete(v4);
  return a1;
}

void std::vector<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type,std::allocator<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>>::__append(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 4)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 16 * a2);
      v7 += 16 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = v7 - (_BYTE *)*a1;
    v9 = a2 + (v8 >> 4);
    if (v9 >> 60)
      std::vector<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 4;
    v11 = v5 - (_BYTE *)*a1;
    if (v11 >> 3 > v9)
      v9 = v11 >> 3;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0)
      v12 = 0xFFFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<_NSRange>>(v4, v12);
    else
      v13 = 0;
    v14 = &v13[16 * v10];
    v15 = &v13[16 * v12];
    bzero(v14, 16 * a2);
    v16 = &v14[16 * a2];
    v18 = (char *)*a1;
    v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        *((_OWORD *)v14 - 1) = *((_OWORD *)v17 - 1);
        v14 -= 16;
        v17 -= 16;
      }
      while (v17 != v18);
      v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
      operator delete(v17);
  }
}

_QWORD *std::vector<std::string_view>::__init_with_size[abi:ne180100]<std::string_view*,std::string_view*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type,std::allocator<Darts::DoubleArrayImpl<void,void,int,void>::result_pair_type>>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_245C6A89C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sentencepiece::model::FreeList<sentencepiece::unigram::Lattice::Node>::~FreeList(_QWORD *a1)
{
  sentencepiece::model::FreeList<sentencepiece::unigram::Lattice::Node>::~FreeList(a1);
  JUMPOUT(0x249544F58);
}

_QWORD *sentencepiece::model::FreeList<sentencepiece::unigram::Lattice::Node>::~FreeList(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  *a1 = &off_2516E3160;
  v2 = (_QWORD *)a1[1];
  v3 = (_QWORD *)a1[2];
  if (v2 != v3)
  {
    do
    {
      if (*v2)
        MEMORY[0x249544F34](*v2, 0x1070C8005A2B047);
      ++v2;
    }
    while (v2 != v3);
    v2 = (_QWORD *)a1[1];
  }
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void std::vector<std::vector<sentencepiece::unigram::Lattice::Node *>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  size_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL)
      std::vector<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    v19 = v4;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v4, v11);
    else
      v12 = 0;
    v15 = v12;
    v16 = &v12[24 * v8];
    v18 = &v12[24 * v11];
    v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    v17 = &v16[v14];
    std::vector<std::vector<sentencepiece::unigram::Lattice::Node *>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)&v15);
  }
}

void sub_245C6AAA8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<int>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<sentencepiece::unigram::Lattice::Node *>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<sentencepiece::unigram::Lattice::Node *>>,std::reverse_iterator<std::vector<sentencepiece::unigram::Lattice::Node *>*>,std::reverse_iterator<std::vector<sentencepiece::unigram::Lattice::Node *>*>,std::reverse_iterator<std::vector<sentencepiece::unigram::Lattice::Node *>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<sentencepiece::unigram::Lattice::Node *>>,std::reverse_iterator<std::vector<sentencepiece::unigram::Lattice::Node *>*>,std::reverse_iterator<std::vector<sentencepiece::unigram::Lattice::Node *>*>,std::reverse_iterator<std::vector<sentencepiece::unigram::Lattice::Node *>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<sentencepiece::unigram::Lattice::Node *>>,std::reverse_iterator<std::vector<sentencepiece::unigram::Lattice::Node *>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<sentencepiece::unigram::Lattice::Node *>>,std::reverse_iterator<std::vector<sentencepiece::unigram::Lattice::Node *>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<int>>,std::reverse_iterator<std::vector<int>*>>::operator()[abi:ne180100](a1);
  return a1;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::vector<sentencepiece::unigram::Lattice::Node *>,float>>,std::pair<std::vector<sentencepiece::unigram::Lattice::Node *>,float> const*,std::pair<std::vector<sentencepiece::unigram::Lattice::Node *>,float> const*,std::pair<std::vector<sentencepiece::unigram::Lattice::Node *>,float>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  uint64_t v10;
  uint64_t v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *(_QWORD *)v4 = 0;
      *(_QWORD *)(v4 + 8) = 0;
      *(_QWORD *)(v4 + 16) = 0;
      std::vector<sentencepiece::unigram::Lattice::Node *>::__init_with_size[abi:ne180100]<sentencepiece::unigram::Lattice::Node **,sentencepiece::unigram::Lattice::Node **>((_QWORD *)v4, *(const void **)v6, *(_QWORD *)(v6 + 8), (uint64_t)(*(_QWORD *)(v6 + 8) - *(_QWORD *)v6) >> 3);
      *(_DWORD *)(v4 + 24) = *(_DWORD *)(v6 + 24);
      v4 = v11 + 32;
      v11 += 32;
      v6 += 32;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<sentencepiece::unigram::Lattice::Node *>,float>>,std::pair<std::vector<sentencepiece::unigram::Lattice::Node *>,float>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_245C6ACA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<sentencepiece::unigram::Lattice::Node *>,float>>,std::pair<std::vector<sentencepiece::unigram::Lattice::Node *>,float>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<sentencepiece::unigram::Lattice::Node *>,float>>,std::pair<std::vector<sentencepiece::unigram::Lattice::Node *>,float>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<std::pair<std::string_view,int>>,float>>,std::pair<std::vector<std::pair<std::string_view,int>>,float>*>::operator()[abi:ne180100](a1);
  return a1;
}

void sentencepiece::model::FreeList<sentencepiece::unigram::`anonymous namespace'::Hypothesis>::~FreeList(_QWORD *a1)
{
  JUMPOUT(0x249544F58);
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,sentencepiece::unigram::Lattice::NBest(unsigned long,BOOL,float)::HypothesisComparator &,std::__wrap_iter<sentencepiece::unigram::`anonymous namespace'::Hypothesis **>>(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  _QWORD *v10;

  if (a3 >= 2)
  {
    v3 = (unint64_t)(a3 - 2) >> 1;
    v4 = (_QWORD *)(result + 8 * v3);
    v5 = *v4;
    v8 = *(_QWORD *)(a2 - 8);
    v6 = (_QWORD *)(a2 - 8);
    v7 = v8;
    v9 = *(float *)(v8 + 16);
    if (*(float *)(*v4 + 16) < v9)
    {
      do
      {
        v10 = v4;
        *v6 = v5;
        if (!v3)
          break;
        v3 = (v3 - 1) >> 1;
        v4 = (_QWORD *)(result + 8 * v3);
        v5 = *v4;
        v6 = v10;
      }
      while (*(float *)(*v4 + 16) < v9);
      *v10 = v7;
    }
  }
  return result;
}

uint64_t std::vector<std::pair<std::vector<sentencepiece::unigram::Lattice::Node *>,float>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  _QWORD v19[5];

  v6 = a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(result - 8);
  if (a2 <= (v6 - v7) >> 5)
  {
    if (a2)
    {
      v14 = 32 * a2;
      v15 = v7 + 32 * a2;
      do
      {
        *(_QWORD *)v7 = 0;
        *(_QWORD *)(v7 + 8) = 0;
        *(_DWORD *)(v7 + 24) = 0;
        *(_QWORD *)(v7 + 16) = 0;
        v7 += 32;
        v14 -= 32;
      }
      while (v14);
      v7 = v15;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = v7 - *a1;
    v9 = a2 + (v8 >> 5);
    if (v9 >> 59)
      std::vector<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 5;
    v11 = v5 - *a1;
    if (v11 >> 4 > v9)
      v9 = v11 >> 4;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFE0)
      v12 = 0x7FFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    v19[4] = result;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>>>(result, v12);
    else
      v13 = 0;
    v16 = &v13[32 * v10];
    v19[0] = v13;
    v19[1] = v16;
    v19[3] = &v13[32 * v12];
    v17 = 32 * a2;
    v18 = &v16[32 * a2];
    do
    {
      *(_QWORD *)v16 = 0;
      *((_QWORD *)v16 + 1) = 0;
      *((_DWORD *)v16 + 6) = 0;
      *((_QWORD *)v16 + 2) = 0;
      v16 += 32;
      v17 -= 32;
    }
    while (v17);
    v19[2] = v18;
    std::vector<std::pair<std::vector<sentencepiece::unigram::Lattice::Node *>,float>>::__swap_out_circular_buffer(a1, v19);
    return std::__split_buffer<std::pair<std::vector<int>,float>>::~__split_buffer((uint64_t)v19);
  }
  return result;
}

void sub_245C6AE80(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::pair<std::vector<int>,float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<std::vector<sentencepiece::unigram::Lattice::Node *>,float>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::vector<sentencepiece::unigram::Lattice::Node *>,float>>,std::reverse_iterator<std::pair<std::vector<sentencepiece::unigram::Lattice::Node *>,float>*>,std::reverse_iterator<std::pair<std::vector<sentencepiece::unigram::Lattice::Node *>,float>*>,std::reverse_iterator<std::pair<std::vector<sentencepiece::unigram::Lattice::Node *>,float>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::vector<sentencepiece::unigram::Lattice::Node *>,float>>,std::reverse_iterator<std::pair<std::vector<sentencepiece::unigram::Lattice::Node *>,float>*>,std::reverse_iterator<std::pair<std::vector<sentencepiece::unigram::Lattice::Node *>,float>*>,std::reverse_iterator<std::pair<std::vector<sentencepiece::unigram::Lattice::Node *>,float>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 32) = 0;
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      v8 = *(_OWORD *)(a3 - 32);
      a3 -= 32;
      *(_OWORD *)(v7 - 32) = v8;
      *(_QWORD *)(v7 - 16) = *(_QWORD *)(a3 + 16);
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)a3 = 0;
      *(_DWORD *)(v7 - 8) = *(_DWORD *)(a3 + 24);
      v7 = *((_QWORD *)&v14 + 1) - 32;
      *((_QWORD *)&v14 + 1) -= 32;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<sentencepiece::unigram::Lattice::Node *>,float>>,std::reverse_iterator<std::pair<std::vector<sentencepiece::unigram::Lattice::Node *>,float>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<sentencepiece::unigram::Lattice::Node *>,float>>,std::reverse_iterator<std::pair<std::vector<sentencepiece::unigram::Lattice::Node *>,float>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<int>,float>>,std::reverse_iterator<std::pair<std::vector<int>,float>*>>::operator()[abi:ne180100](a1);
  return a1;
}

_QWORD *std::vector<double>::vector(_QWORD *a1, unint64_t a2, _QWORD *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned long>::__vallocate[abi:ne180100](a1, a2);
    v6 = (_QWORD *)a1[1];
    v7 = &v6[a2];
    v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_245C6B048(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

float std::vector<std::pair<std::vector<std::pair<std::string_view,int>>,float>>::__construct_one_at_end[abi:ne180100]<std::vector<std::pair<std::string_view,int>>&,float const&>(uint64_t a1, __int128 **a2, float *a3)
{
  uint64_t v5;
  float result;

  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)v5 = 0;
  *(_QWORD *)(v5 + 8) = 0;
  *(_QWORD *)(v5 + 16) = 0;
  std::vector<std::pair<std::string_view,int>>::__init_with_size[abi:ne180100]<std::pair<std::string_view,int>*,std::pair<std::string_view,int>*>((char *)v5, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  result = *a3;
  *(float *)(v5 + 24) = *a3;
  *(_QWORD *)(a1 + 8) = v5 + 32;
  return result;
}

void sub_245C6B0CC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<std::vector<std::pair<std::string_view,int>>,float>>::__emplace_back_slow_path<std::vector<std::pair<std::string_view,int>>&,float const&>(uint64_t *a1, __int128 **a2, _DWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[2];
  char *v17;
  char *v18;
  uint64_t *v19;

  v4 = *a1;
  v5 = (a1[1] - *a1) >> 5;
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59)
    std::vector<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>>::__throw_length_error[abi:ne180100]();
  v9 = (uint64_t)(a1 + 2);
  v10 = a1[2] - v4;
  if (v10 >> 4 > v6)
    v6 = v10 >> 4;
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0)
    v11 = 0x7FFFFFFFFFFFFFFLL;
  else
    v11 = v6;
  v19 = a1 + 2;
  if (v11)
    v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>>>(v9, v11);
  else
    v12 = 0;
  v13 = &v12[32 * v5];
  v16[0] = v12;
  v16[1] = v13;
  v17 = v13;
  v18 = &v12[32 * v11];
  *(_QWORD *)v13 = 0;
  *((_QWORD *)v13 + 1) = 0;
  *((_QWORD *)v13 + 2) = 0;
  std::vector<std::pair<std::string_view,int>>::__init_with_size[abi:ne180100]<std::pair<std::string_view,int>*,std::pair<std::string_view,int>*>(v13, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  *((_DWORD *)v13 + 6) = *a3;
  v17 += 32;
  std::vector<std::pair<std::vector<std::pair<std::string_view,int>>,float>>::__swap_out_circular_buffer(a1, v16);
  v14 = a1[1];
  std::__split_buffer<std::pair<std::vector<int>,float>>::~__split_buffer((uint64_t)v16);
  return v14;
}

void sub_245C6B1CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::pair<std::vector<int>,float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<std::vector<std::pair<std::string_view,int>>,float>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::vector<std::pair<std::string_view,int>>,float>>,std::reverse_iterator<std::pair<std::vector<std::pair<std::string_view,int>>,float>*>,std::reverse_iterator<std::pair<std::vector<std::pair<std::string_view,int>>,float>*>,std::reverse_iterator<std::pair<std::vector<std::pair<std::string_view,int>>,float>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::vector<std::pair<std::string_view,int>>,float>>,std::reverse_iterator<std::pair<std::vector<std::pair<std::string_view,int>>,float>*>,std::reverse_iterator<std::pair<std::vector<std::pair<std::string_view,int>>,float>*>,std::reverse_iterator<std::pair<std::vector<std::pair<std::string_view,int>>,float>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 32) = 0;
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      v8 = *(_OWORD *)(a3 - 32);
      a3 -= 32;
      *(_OWORD *)(v7 - 32) = v8;
      *(_QWORD *)(v7 - 16) = *(_QWORD *)(a3 + 16);
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)a3 = 0;
      *(_DWORD *)(v7 - 8) = *(_DWORD *)(a3 + 24);
      v7 = *((_QWORD *)&v14 + 1) - 32;
      *((_QWORD *)&v14 + 1) -= 32;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<std::pair<std::string_view,int>>,float>>,std::reverse_iterator<std::pair<std::vector<std::pair<std::string_view,int>>,float>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<std::pair<std::string_view,int>>,float>>,std::reverse_iterator<std::pair<std::vector<std::pair<std::string_view,int>>,float>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<int>,float>>,std::reverse_iterator<std::pair<std::vector<int>,float>*>>::operator()[abi:ne180100](a1);
  return a1;
}

uint64_t std::vector<std::pair<std::vector<std::pair<std::string_view,int>>,float>>::__emplace_back_slow_path<std::vector<std::pair<std::string_view,int>>&,double>(uint64_t *a1, __int128 **a2, double *a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  float v14;
  uint64_t v15;
  _QWORD v17[2];
  char *v18;
  char *v19;
  uint64_t *v20;

  v4 = *a1;
  v5 = (a1[1] - *a1) >> 5;
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59)
    std::vector<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>>::__throw_length_error[abi:ne180100]();
  v9 = (uint64_t)(a1 + 2);
  v10 = a1[2] - v4;
  if (v10 >> 4 > v6)
    v6 = v10 >> 4;
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0)
    v11 = 0x7FFFFFFFFFFFFFFLL;
  else
    v11 = v6;
  v20 = a1 + 2;
  if (v11)
    v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>>>(v9, v11);
  else
    v12 = 0;
  v13 = &v12[32 * v5];
  v17[0] = v12;
  v17[1] = v13;
  v18 = v13;
  v19 = &v12[32 * v11];
  *(_QWORD *)v13 = 0;
  *((_QWORD *)v13 + 1) = 0;
  *((_QWORD *)v13 + 2) = 0;
  std::vector<std::pair<std::string_view,int>>::__init_with_size[abi:ne180100]<std::pair<std::string_view,int>*,std::pair<std::string_view,int>*>(v13, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  v14 = *a3;
  *((float *)v13 + 6) = v14;
  v18 += 32;
  std::vector<std::pair<std::vector<std::pair<std::string_view,int>>,float>>::__swap_out_circular_buffer(a1, v17);
  v15 = a1[1];
  std::__split_buffer<std::pair<std::vector<int>,float>>::~__split_buffer((uint64_t)v17);
  return v15;
}

void sub_245C6B42C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::pair<std::vector<int>,float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::vector<sentencepiece::unigram::Lattice::Node *>>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;
  size_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::string>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_245C6B4CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__find_impl[abi:ne180100]<std::vector<sentencepiece::unigram::Lattice::Node *> *,std::vector<sentencepiece::unigram::Lattice::Node *> *,std::vector<sentencepiece::unigram::Lattice::Node *>,std::__identity>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  const void *v5;
  size_t v6;

  v3 = a1;
  if (a1 != a2)
  {
    v5 = *(const void **)a3;
    v6 = *(_QWORD *)(a3 + 8) - *(_QWORD *)a3;
    while (*(_QWORD *)(v3 + 8) - *(_QWORD *)v3 != v6 || memcmp(*(const void **)v3, v5, v6))
    {
      v3 += 24;
      if (v3 == a2)
        return a2;
    }
  }
  return v3;
}

__n128 *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,std::pair<std::vector<sentencepiece::unigram::Lattice::Node *>,float> *,std::pair<std::vector<sentencepiece::unigram::Lattice::Node *>,float> *,std::pair<std::vector<sentencepiece::unigram::Lattice::Node *>,float> *,0>(__n128 *a1, __n128 *a2, uint64_t a3)
{
  __n128 *v4;
  __n128 *v5;

  v4 = a1;
  if (a1 == a2)
    return a1;
  v5 = a2;
  do
  {
    std::vector<sentencepiece::unigram::Lattice::Node *>::__move_assign(a3, v4);
    *(_DWORD *)(a3 + 24) = v4[1].n128_u32[2];
    a3 += 32;
    v4 += 2;
  }
  while (v4 != v5);
  return v5;
}

__n128 std::vector<sentencepiece::unigram::Lattice::Node *>::__move_assign(uint64_t a1, __n128 *a2)
{
  void *v4;
  __n128 result;

  v4 = *(void **)a1;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = v4;
    operator delete(v4);
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
  result = *a2;
  *(__n128 *)a1 = *a2;
  *(_QWORD *)(a1 + 16) = a2[1].n128_u64[0];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  return result;
}

uint64_t std::vector<std::pair<std::vector<std::pair<std::string_view,int>>,float>>::__emplace_back_slow_path<std::vector<std::pair<std::string_view,int>>&,float>(uint64_t *a1, __int128 **a2, _DWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[2];
  char *v17;
  char *v18;
  uint64_t *v19;

  v4 = *a1;
  v5 = (a1[1] - *a1) >> 5;
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59)
    std::vector<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>>::__throw_length_error[abi:ne180100]();
  v9 = (uint64_t)(a1 + 2);
  v10 = a1[2] - v4;
  if (v10 >> 4 > v6)
    v6 = v10 >> 4;
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0)
    v11 = 0x7FFFFFFFFFFFFFFLL;
  else
    v11 = v6;
  v19 = a1 + 2;
  if (v11)
    v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>>>(v9, v11);
  else
    v12 = 0;
  v13 = &v12[32 * v5];
  v16[0] = v12;
  v16[1] = v13;
  v17 = v13;
  v18 = &v12[32 * v11];
  *(_QWORD *)v13 = 0;
  *((_QWORD *)v13 + 1) = 0;
  *((_QWORD *)v13 + 2) = 0;
  std::vector<std::pair<std::string_view,int>>::__init_with_size[abi:ne180100]<std::pair<std::string_view,int>*,std::pair<std::string_view,int>*>(v13, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  *((_DWORD *)v13 + 6) = *a3;
  v17 += 32;
  std::vector<std::pair<std::vector<std::pair<std::string_view,int>>,float>>::__swap_out_circular_buffer(a1, v16);
  v14 = a1[1];
  std::__split_buffer<std::pair<std::vector<int>,float>>::~__split_buffer((uint64_t)v16);
  return v14;
}

void sub_245C6B6FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::pair<std::vector<int>,float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

sentencepiece::character::Model *sentencepiece::character::Model::Model(sentencepiece::character::Model *this, const sentencepiece::ModelProto *a2)
{
  sentencepiece::ModelInterface *v4;

  v4 = sentencepiece::ModelInterface::ModelInterface(this);
  *(_QWORD *)v4 = &off_2516E32B0;
  *((_QWORD *)v4 + 1) = (char *)a2 + 16;
  sentencepiece::ModelInterface::InitializePieces(v4);
  return this;
}

void sub_245C6B74C(_Unwind_Exception *a1)
{
  sentencepiece::ModelInterface *v1;

  sentencepiece::ModelInterface::~ModelInterface(v1);
  _Unwind_Resume(a1);
}

void sentencepiece::character::Model::~Model(sentencepiece::character::Model *this)
{
  sentencepiece::ModelInterface::~ModelInterface(this);
  JUMPOUT(0x249544F58);
}

void sentencepiece::character::Model::Encode(uint64_t *a1@<X0>, _BYTE *a2@<X1>, uint64_t a3@<X2>, void **a4@<X8>)
{
  uint64_t v8;
  int v9;
  int v10;
  char *v11;
  char *v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  __int128 v24;
  uint64_t v25;

  (*(void (**)(uint64_t *__return_ptr))(*a1 + 16))(&v25);
  if (v25)
  {
    sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v25);
LABEL_3:
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    return;
  }
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v25);
  if (!a3)
    goto LABEL_3;
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  do
  {
    v8 = (int)sentencepiece::normalizer::PrefixMatcher::PrefixMatch(a1[2], a2, a3, 0);
    v9 = (*(uint64_t (**)(uint64_t *, _BYTE *, uint64_t))(*a1 + 112))(a1, a2, v8);
    v10 = v9;
    v12 = (char *)a4[1];
    v11 = (char *)a4[2];
    if (v12 >= v11)
    {
      v14 = 0xAAAAAAAAAAAAAAABLL * ((v12 - (_BYTE *)*a4) >> 3);
      v15 = v14 + 1;
      if (v14 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>>::__throw_length_error[abi:ne180100]();
      v16 = 0xAAAAAAAAAAAAAAABLL * ((v11 - (_BYTE *)*a4) >> 3);
      if (2 * v16 > v15)
        v15 = 2 * v16;
      if (v16 >= 0x555555555555555)
        v17 = 0xAAAAAAAAAAAAAAALL;
      else
        v17 = v15;
      v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)(a4 + 2), v17);
      v20 = &v18[24 * v14];
      *(_QWORD *)v20 = a2;
      *((_QWORD *)v20 + 1) = v8;
      *((_DWORD *)v20 + 4) = v10;
      v22 = (char *)*a4;
      v21 = (char *)a4[1];
      v23 = v20;
      if (v21 != *a4)
      {
        do
        {
          v24 = *(_OWORD *)(v21 - 24);
          *((_QWORD *)v23 - 1) = *((_QWORD *)v21 - 1);
          *(_OWORD *)(v23 - 24) = v24;
          v23 -= 24;
          v21 -= 24;
        }
        while (v21 != v22);
        v21 = (char *)*a4;
      }
      v13 = v20 + 24;
      *a4 = v23;
      a4[1] = v20 + 24;
      a4[2] = &v18[24 * v19];
      if (v21)
        operator delete(v21);
    }
    else
    {
      *(_QWORD *)v12 = a2;
      *((_QWORD *)v12 + 1) = v8;
      v13 = v12 + 24;
      *((_DWORD *)v12 + 4) = v9;
    }
    a4[1] = v13;
    a2 += v8;
    a3 -= v8;
  }
  while (a3);
}

void sub_245C6B94C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

sentencepiece::word::Model *sentencepiece::word::Model::Model(sentencepiece::word::Model *this, const sentencepiece::ModelProto *a2)
{
  sentencepiece::ModelInterface *v4;

  v4 = sentencepiece::ModelInterface::ModelInterface(this);
  *(_QWORD *)v4 = &off_2516E3050;
  *((_QWORD *)v4 + 1) = (char *)a2 + 16;
  sentencepiece::ModelInterface::InitializePieces(v4);
  return this;
}

void sub_245C6B9AC(_Unwind_Exception *a1)
{
  sentencepiece::ModelInterface *v1;

  sentencepiece::ModelInterface::~ModelInterface(v1);
  _Unwind_Resume(a1);
}

void sentencepiece::word::Model::~Model(sentencepiece::word::Model *this)
{
  sentencepiece::ModelInterface::~ModelInterface(this);
  JUMPOUT(0x249544F58);
}

void sentencepiece::word::Model::Encode(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, void **a4@<X8>)
{
  unsigned __int8 **v8;
  unsigned __int8 **v9;
  int v10;
  int v11;
  char *v12;
  char *v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  __int128 v25;
  unsigned __int8 **v26;
  unsigned __int8 **v27;

  (*(void (**)(unsigned __int8 ***__return_ptr))(*(_QWORD *)a1 + 16))(&v26);
  if (v26)
  {
    sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v26);
LABEL_3:
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    return;
  }
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v26);
  if (!a3)
    goto LABEL_3;
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  sentencepiece::SplitIntoWords(a2, a3, 0, 0, &v26);
  v8 = v26;
  v9 = v27;
  if (v26 != v27)
  {
    do
    {
      v10 = (*(uint64_t (**)(uint64_t, unsigned __int8 *, unsigned __int8 *))(*(_QWORD *)a1 + 112))(a1, *v8, v8[1]);
      v11 = v10;
      v13 = (char *)a4[1];
      v12 = (char *)a4[2];
      if (v13 >= v12)
      {
        v15 = 0xAAAAAAAAAAAAAAABLL * ((v13 - (_BYTE *)*a4) >> 3);
        v16 = v15 + 1;
        if (v15 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>>::__throw_length_error[abi:ne180100]();
        v17 = 0xAAAAAAAAAAAAAAABLL * ((v12 - (_BYTE *)*a4) >> 3);
        if (2 * v17 > v16)
          v16 = 2 * v17;
        if (v17 >= 0x555555555555555)
          v18 = 0xAAAAAAAAAAAAAAALL;
        else
          v18 = v16;
        v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)(a4 + 2), v18);
        v21 = &v19[24 * v15];
        *(_OWORD *)v21 = *(_OWORD *)v8;
        *((_DWORD *)v21 + 4) = v11;
        v23 = (char *)*a4;
        v22 = (char *)a4[1];
        v24 = v21;
        if (v22 != *a4)
        {
          do
          {
            v25 = *(_OWORD *)(v22 - 24);
            *((_QWORD *)v24 - 1) = *((_QWORD *)v22 - 1);
            *(_OWORD *)(v24 - 24) = v25;
            v24 -= 24;
            v22 -= 24;
          }
          while (v22 != v23);
          v22 = (char *)*a4;
        }
        v14 = v21 + 24;
        *a4 = v24;
        a4[1] = v21 + 24;
        a4[2] = &v19[24 * v20];
        if (v22)
          operator delete(v22);
      }
      else
      {
        *(_OWORD *)v13 = *(_OWORD *)v8;
        *((_DWORD *)v13 + 4) = v10;
        v14 = v13 + 24;
      }
      a4[1] = v14;
      v8 += 2;
    }
    while (v8 != v9);
    v8 = v26;
  }
  if (v8)
  {
    v27 = v8;
    operator delete(v8);
  }
}

void sub_245C6BBD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;
  void *v13;

  if (__p)
    operator delete(__p);
  v13 = *(void **)v11;
  if (*(_QWORD *)v11)
  {
    *(_QWORD *)(v11 + 8) = v13;
    operator delete(v13);
  }
  _Unwind_Resume(exception_object);
}

void InitDefaultsscc_info_NBestSentencePieceText_sentencepiece_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DFD70, (google::protobuf::internal *)0x2DFD70, "/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece.pb.cc", a4);
  sentencepiece::NBestSentencePieceText::NBestSentencePieceText((uint64_t)&sentencepiece::_NBestSentencePieceText_default_instance_, 0);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&sentencepiece::_NBestSentencePieceText_default_instance_, v4);
}

void InitDefaultsscc_info_SentencePieceText_sentencepiece_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DFD70, (google::protobuf::internal *)0x2DFD70, "/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece.pb.cc", a4);
  sentencepiece::SentencePieceText::SentencePieceText((uint64_t)&sentencepiece::_SentencePieceText_default_instance_, 0);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&sentencepiece::_SentencePieceText_default_instance_, v4);
}

void InitDefaultsscc_info_SentencePieceText_SentencePiece_sentencepiece_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DFD70, (google::protobuf::internal *)0x2DFD70, "/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece.pb.cc", a4);
  sentencepiece::SentencePieceText_SentencePiece::SentencePieceText_SentencePiece((uint64_t)&sentencepiece::_SentencePieceText_SentencePiece_default_instance_, 0);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&sentencepiece::_SentencePieceText_SentencePiece_default_instance_, v4);
}

uint64_t sentencepiece::SentencePieceText_SentencePiece::SentencePieceText_SentencePiece(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = &off_2516E2EC0;
  *(_QWORD *)(a1 + 8) = a2;
  google::protobuf::internal::ExtensionSet::ExtensionSet(a1 + 16, a2);
  *(_QWORD *)(a1 + 40) = 0;
  if (atomic_load(scc_info_SentencePieceText_SentencePiece_sentencepiece_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_SentencePieceText_SentencePiece_sentencepiece_2eproto);
  *(_QWORD *)(a1 + 48) = &google::protobuf::internal::fixed_address_empty_string;
  *(_QWORD *)(a1 + 56) = &google::protobuf::internal::fixed_address_empty_string;
  *(_QWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 72) = 0;
  return a1;
}

void sub_245C6BD6C(_Unwind_Exception *a1)
{
  google::protobuf::internal::ExtensionSet *v1;

  google::protobuf::internal::ExtensionSet::~ExtensionSet(v1);
  _Unwind_Resume(a1);
}

void sentencepiece::SentencePieceText_SentencePiece::~SentencePieceText_SentencePiece(sentencepiece::SentencePieceText_SentencePiece *this)
{
  sentencepiece::SentencePieceText_SentencePiece::SharedDtor(this);
  google::protobuf::internal::InternalMetadata::Delete<std::string>((uint64_t *)this + 1);
  google::protobuf::internal::ExtensionSet::~ExtensionSet((sentencepiece::SentencePieceText_SentencePiece *)((char *)this + 16));
}

{
  sentencepiece::SentencePieceText_SentencePiece::~SentencePieceText_SentencePiece(this);
  JUMPOUT(0x249544F58);
}

google::protobuf::internal::ArenaStringPtr *sentencepiece::SentencePieceText_SentencePiece::SharedDtor(sentencepiece::SentencePieceText_SentencePiece *this)
{
  uint64_t v2;
  _QWORD *v3;
  std::string *v4;
  google::protobuf::internal::ArenaStringPtr *result;
  uint64_t v6;
  uint64_t v7;
  google::protobuf::internal::ArenaStringPtr *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  std::string v13[2];

  v2 = *((_QWORD *)this + 1);
  v3 = (_QWORD *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  if ((v2 & 1) == 0)
  {
    if (!v3)
      goto LABEL_4;
    goto LABEL_3;
  }
  if (*v3)
  {
LABEL_3:
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece.pb.cc", 140);
    v4 = google::protobuf::internal::LogMessage::operator<<(v13, "CHECK failed: GetArena() == nullptr: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v12, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v13[0].__r_.__value_.__l.__data_);
  }
LABEL_4:
  result = (sentencepiece::SentencePieceText_SentencePiece *)((char *)this + 48);
  if (*((uint64_t **)this + 6) != &google::protobuf::internal::fixed_address_empty_string)
  {
    v6 = google::protobuf::internal::ArenaStringPtr::UnsafeMutablePointer(result);
    v7 = v6;
    if (*(char *)(v6 + 23) < 0)
      operator delete(*(void **)v6);
    result = (google::protobuf::internal::ArenaStringPtr *)MEMORY[0x249544F58](v7, 0x1012C40EC159624);
  }
  v9 = (uint64_t *)*((_QWORD *)this + 7);
  v8 = (sentencepiece::SentencePieceText_SentencePiece *)((char *)this + 56);
  if (v9 != &google::protobuf::internal::fixed_address_empty_string)
  {
    v10 = google::protobuf::internal::ArenaStringPtr::UnsafeMutablePointer(v8);
    v11 = v10;
    if (*(char *)(v10 + 23) < 0)
      operator delete(*(void **)v10);
    return (google::protobuf::internal::ArenaStringPtr *)MEMORY[0x249544F58](v11, 0x1012C40EC159624);
  }
  return result;
}

void sub_245C6BEC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t *google::protobuf::internal::InternalMetadata::Delete<std::string>(uint64_t *result)
{
  uint64_t v1;
  unint64_t v2;

  v1 = *result;
  if ((*result & 1) != 0)
  {
    v2 = v1 & 0xFFFFFFFFFFFFFFFELL;
    if (!*(_QWORD *)(v1 & 0xFFFFFFFFFFFFFFFELL) && v2 != 0)
    {
      if (*(char *)(v2 + 31) < 0)
        operator delete(*(void **)(v2 + 8));
      JUMPOUT(0x249544F58);
    }
  }
  return result;
}

void sentencepiece::SentencePieceText_SentencePiece::Clear(sentencepiece::SentencePieceText_SentencePiece *this)
{
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  google::protobuf::internal::ExtensionSet::Clear((sentencepiece::SentencePieceText_SentencePiece *)((char *)this + 16));
  v2 = *((_DWORD *)this + 10);
  if ((v2 & 3) != 0)
  {
    if ((v2 & 1) != 0)
    {
      v3 = *((_QWORD *)this + 6) & 0xFFFFFFFFFFFFFFFELL;
      if (*(char *)(v3 + 23) < 0)
      {
        **(_BYTE **)v3 = 0;
        *(_QWORD *)(v3 + 8) = 0;
        if ((v2 & 2) == 0)
          goto LABEL_11;
        goto LABEL_6;
      }
      *(_BYTE *)v3 = 0;
      *(_BYTE *)(v3 + 23) = 0;
    }
    if ((v2 & 2) == 0)
      goto LABEL_11;
LABEL_6:
    v4 = *((_QWORD *)this + 7) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v4 + 23) < 0)
    {
      **(_BYTE **)v4 = 0;
      *(_QWORD *)(v4 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v4 = 0;
      *(_BYTE *)(v4 + 23) = 0;
    }
  }
LABEL_11:
  if ((v2 & 0x1C) != 0)
  {
    *((_DWORD *)this + 18) = 0;
    *((_QWORD *)this + 8) = 0;
  }
  *((_DWORD *)this + 10) = 0;
  v5 = *((_QWORD *)this + 1);
  if ((v5 & 1) != 0)
  {
    v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v6 + 31) < 0)
    {
      **(_BYTE **)(v6 + 8) = 0;
      *(_QWORD *)(v6 + 16) = 0;
    }
    else
    {
      *(_BYTE *)(v6 + 8) = 0;
      *(_BYTE *)(v6 + 31) = 0;
    }
  }
}

google::protobuf::internal *sentencepiece::SentencePieceText_SentencePiece::_InternalParse(sentencepiece::SentencePieceText_SentencePiece *this, google::protobuf::internal *a2, int32x2_t *a3)
{
  int v5;
  _QWORD *v7;
  google::protobuf::internal *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  google::protobuf::internal::ArenaImpl *v12;
  uint64_t **v13;
  google::protobuf::internal *v14;
  const char *v15;
  int v16;
  uint64_t v17;
  std::string *v18;
  google::protobuf::internal *v19;
  google::protobuf::internal *v20;
  const char *v21;
  int v22;
  google::protobuf::internal *v23;
  const char *v24;
  int v25;
  BOOL v26;
  google::protobuf::internal *TagFallback;
  unsigned int v28;
  std::string *v29;
  google::protobuf::internal *v30;
  int v31;
  google::protobuf::internal *v32;
  int v33;
  google::protobuf::internal *v34;
  int v35;
  google::protobuf::internal *v36;

  v36 = a2;
  v5 = 0;
  if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck((google::protobuf::internal::EpsCopyInputStream *)a3, (const char **)&v36, a3[11].i32[1]) & 1) == 0)
  {
    v7 = (_QWORD *)((char *)this + 8);
    while (1)
    {
      v8 = (google::protobuf::internal *)((char *)v36 + 1);
      v9 = *(unsigned __int8 *)v36;
      if (*(char *)v36 < 0)
      {
        v10 = v9 + (*(unsigned __int8 *)v8 << 7);
        v9 = v10 - 128;
        if (*(char *)v8 < 0)
        {
          TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v36, (const char *)(v10 - 128));
          v36 = TagFallback;
          if (!TagFallback)
            goto LABEL_56;
          v8 = TagFallback;
          v9 = v28;
          goto LABEL_8;
        }
        v8 = (google::protobuf::internal *)((char *)v36 + 2);
      }
      v36 = v8;
LABEL_8:
      switch(v9 >> 3)
      {
        case 1u:
          if (v9 != 10)
            goto LABEL_37;
          *((_DWORD *)this + 10) |= 1u;
          v11 = *((_QWORD *)this + 1);
          v12 = (google::protobuf::internal::ArenaImpl *)(v11 & 0xFFFFFFFFFFFFFFFELL);
          if ((v11 & 1) != 0)
            v12 = *(google::protobuf::internal::ArenaImpl **)v12;
          v13 = (uint64_t **)((char *)this + 48);
          goto LABEL_22;
        case 2u:
          if (v9 != 16)
            goto LABEL_37;
          v5 |= 4u;
          v14 = (google::protobuf::internal *)((char *)v8 + 1);
          LODWORD(v15) = *(unsigned __int8 *)v8;
          if ((*(char *)v8 & 0x80000000) == 0)
            goto LABEL_17;
          v16 = *(char *)v14;
          v15 = (const char *)(v15 + (v16 << 7) - 128);
          if (v16 < 0)
          {
            v30 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow32(v8, v15);
            v36 = v30;
            *((_DWORD *)this + 16) = v31;
            if (!v30)
              goto LABEL_56;
          }
          else
          {
            v14 = (google::protobuf::internal *)((char *)v8 + 2);
LABEL_17:
            v36 = v14;
            *((_DWORD *)this + 16) = (_DWORD)v15;
          }
          goto LABEL_35;
        case 3u:
          if (v9 != 26)
            goto LABEL_37;
          *((_DWORD *)this + 10) |= 2u;
          v17 = *((_QWORD *)this + 1);
          v12 = (google::protobuf::internal::ArenaImpl *)(v17 & 0xFFFFFFFFFFFFFFFELL);
          if ((v17 & 1) != 0)
            v12 = *(google::protobuf::internal::ArenaImpl **)v12;
          v13 = (uint64_t **)((char *)this + 56);
LABEL_22:
          v18 = (std::string *)google::protobuf::internal::ArenaStringPtr::Mutable(v13, v12);
          v19 = (google::protobuf::internal *)google::protobuf::internal::InlineGreedyStringParser(v18, (std::string::value_type *)v36, (uint64_t)a3);
          goto LABEL_23;
        case 4u:
          if (v9 != 32)
            goto LABEL_37;
          v5 |= 8u;
          v20 = (google::protobuf::internal *)((char *)v8 + 1);
          LODWORD(v21) = *(unsigned __int8 *)v8;
          if ((*(char *)v8 & 0x80000000) == 0)
            goto LABEL_29;
          v22 = *(char *)v20;
          v21 = (const char *)(v21 + (v22 << 7) - 128);
          if (v22 < 0)
          {
            v32 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow32(v8, v21);
            v36 = v32;
            *((_DWORD *)this + 17) = v33;
            if (!v32)
              goto LABEL_56;
          }
          else
          {
            v20 = (google::protobuf::internal *)((char *)v8 + 2);
LABEL_29:
            v36 = v20;
            *((_DWORD *)this + 17) = (_DWORD)v21;
          }
          goto LABEL_35;
        case 5u:
          if (v9 != 40)
            goto LABEL_37;
          v5 |= 0x10u;
          v23 = (google::protobuf::internal *)((char *)v8 + 1);
          LODWORD(v24) = *(unsigned __int8 *)v8;
          if ((*(char *)v8 & 0x80000000) == 0)
            goto LABEL_34;
          v25 = *(char *)v23;
          v24 = (const char *)(v24 + (v25 << 7) - 128);
          if (v25 < 0)
          {
            v34 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow32(v8, v24);
            v36 = v34;
            *((_DWORD *)this + 18) = v35;
            if (!v34)
              goto LABEL_56;
          }
          else
          {
            v23 = (google::protobuf::internal *)((char *)v8 + 2);
LABEL_34:
            v36 = v23;
            *((_DWORD *)this + 18) = (_DWORD)v24;
          }
          goto LABEL_35;
        default:
LABEL_37:
          if (v9)
            v26 = (v9 & 7) == 4;
          else
            v26 = 1;
          if (v26)
          {
            a3[10].i32[0] = v9 - 1;
            goto LABEL_2;
          }
          if (v9 < 0x640)
          {
            if ((*v7 & 1) != 0)
            {
              v29 = (std::string *)((*v7 & 0xFFFFFFFFFFFFFFFELL) + 8);
            }
            else
            {
              v29 = (std::string *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<std::string>((uint64_t *)this + 1);
              v8 = v36;
            }
            v19 = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse(v9, v29, v8, (google::protobuf::internal::ParseContext *)a3);
          }
          else
          {
            v19 = (google::protobuf::internal *)google::protobuf::internal::ExtensionSet::ParseField((sentencepiece::SentencePieceText_SentencePiece *)((char *)this + 16), v9, v8, (uint64_t)&sentencepiece::_SentencePieceText_SentencePiece_default_instance_, (uint64_t *)this + 1, a3);
          }
LABEL_23:
          v36 = v19;
          if (!v19)
          {
LABEL_56:
            v36 = 0;
            goto LABEL_2;
          }
LABEL_35:
          if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck((google::protobuf::internal::EpsCopyInputStream *)a3, (const char **)&v36, a3[11].i32[1]) & 1) != 0)goto LABEL_2;
          break;
      }
    }
  }
LABEL_2:
  *((_DWORD *)this + 10) |= v5;
  return v36;
}

unsigned __int8 *sentencepiece::SentencePieceText_SentencePiece::_InternalSerialize(sentencepiece::SentencePieceText_SentencePiece *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3)
{
  char *v4;
  int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  uint64_t v21;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;

  v4 = a2;
  v6 = *((_DWORD *)this + 10);
  if ((v6 & 1) == 0)
  {
    if ((v6 & 4) == 0)
      goto LABEL_3;
LABEL_11:
    if (*(_QWORD *)a3 <= (unint64_t)v4)
      v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
    v8 = *((_DWORD *)this + 16);
    *v4 = 16;
    if (v8 > 0x7F)
    {
      v4[1] = v8 | 0x80;
      v10 = v8 >> 7;
      if (v8 >> 14)
      {
        v4 += 3;
        do
        {
          *(v4 - 1) = v10 | 0x80;
          v13 = v10 >> 7;
          ++v4;
          v14 = v10 >> 14;
          v10 >>= 7;
        }
        while (v14);
        *(v4 - 1) = v13;
        if ((v6 & 2) != 0)
          goto LABEL_27;
      }
      else
      {
        v4[2] = v10;
        v4 += 3;
        if ((v6 & 2) != 0)
          goto LABEL_27;
      }
    }
    else
    {
      v4[1] = v8;
      v4 += 2;
      if ((v6 & 2) != 0)
        goto LABEL_27;
    }
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_28;
  }
  v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 1, *((_QWORD *)this + 6) & 0xFFFFFFFFFFFFFFFELL, a2);
  if ((v6 & 4) != 0)
    goto LABEL_11;
LABEL_3:
  if ((v6 & 2) == 0)
    goto LABEL_4;
LABEL_27:
  v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 3, *((_QWORD *)this + 7) & 0xFFFFFFFFFFFFFFFELL, v4);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      goto LABEL_39;
    goto LABEL_6;
  }
LABEL_28:
  if (*(_QWORD *)a3 <= (unint64_t)v4)
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  v15 = *((_DWORD *)this + 17);
  *v4 = 32;
  if (v15 > 0x7F)
  {
    v4[1] = v15 | 0x80;
    v16 = v15 >> 7;
    if (v15 >> 14)
    {
      v4 += 3;
      do
      {
        *(v4 - 1) = v16 | 0x80;
        v17 = v16 >> 7;
        ++v4;
        v18 = v16 >> 14;
        v16 >>= 7;
      }
      while (v18);
      *(v4 - 1) = v17;
      if ((v6 & 0x10) == 0)
        goto LABEL_39;
    }
    else
    {
      v4[2] = v16;
      v4 += 3;
      if ((v6 & 0x10) == 0)
        goto LABEL_39;
    }
  }
  else
  {
    v4[1] = v15;
    v4 += 2;
    if ((v6 & 0x10) == 0)
      goto LABEL_39;
  }
LABEL_6:
  if (*(_QWORD *)a3 <= (unint64_t)v4)
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  v7 = *((_DWORD *)this + 18);
  *v4 = 40;
  if (v7 > 0x7F)
  {
    v4[1] = v7 | 0x80;
    v9 = v7 >> 7;
    if (v7 >> 14)
    {
      v4 += 3;
      do
      {
        *(v4 - 1) = v9 | 0x80;
        v11 = v9 >> 7;
        ++v4;
        v12 = v9 >> 14;
        v9 >>= 7;
      }
      while (v12);
      *(v4 - 1) = v11;
    }
    else
    {
      v4[2] = v9;
      v4 += 3;
    }
  }
  else
  {
    v4[1] = v7;
    v4 += 2;
  }
LABEL_39:
  v19 = google::protobuf::internal::ExtensionSet::_InternalSerialize((sentencepiece::SentencePieceText_SentencePiece *)((char *)this + 16), 200, 0x20000000, (unsigned __int8 *)v4, a3);
  v20 = v19;
  v21 = *((_QWORD *)this + 1);
  if ((v21 & 1) == 0)
    return v20;
  v23 = v21 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v23 + 31) < 0)
  {
    v24 = *(void **)(v23 + 8);
    v25 = *(_QWORD *)(v23 + 16);
  }
  else
  {
    v24 = (void *)(v23 + 8);
    LODWORD(v25) = *(unsigned __int8 *)(v23 + 31);
  }
  if (*(_QWORD *)a3 - (_QWORD)v19 >= (int)v25)
  {
    v26 = (int)v25;
    memcpy(v19, v24, (int)v25);
    v20 += v26;
    return v20;
  }
  return google::protobuf::io::EpsCopyOutputStream::WriteRawFallback(a3, (char *)v24, v25, v19);
}

unsigned __int8 *google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(google::protobuf::io::EpsCopyOutputStream *a1, int a2, uint64_t a3, char *a4)
{
  int64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned __int8 *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  char *v15;
  const void *v16;

  if (*(char *)(a3 + 23) < 0)
  {
    v4 = *(_QWORD *)(a3 + 8);
    if (v4 > 127)
      return google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliasedOutline(a1, a2, (void **)a3, a4);
  }
  else
  {
    v4 = *(unsigned __int8 *)(a3 + 23);
  }
  v5 = 8 * a2;
  v6 = 1;
  v7 = 2;
  v8 = 3;
  v9 = 4;
  if ((8 * a2) >> 28)
    v9 = 5;
  if (v5 >= 0x200000)
    v8 = v9;
  if (v5 >= 0x4000)
    v7 = v8;
  if (v5 >= 0x80)
    v6 = v7;
  if ((uint64_t)(*(_QWORD *)a1 + ~(unint64_t)&a4[v6] + 16) < v4)
    return google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliasedOutline(a1, a2, (void **)a3, a4);
  v10 = v5 | 2;
  if ((v5 | 2) > 0x7F)
  {
    *a4 = v5 | 0x82;
    v12 = v5 >> 7;
    if (v10 >> 14)
    {
      v11 = (unsigned __int8 *)(a4 + 2);
      do
      {
        *(v11 - 1) = v12 | 0x80;
        v13 = v12 >> 7;
        ++v11;
        v14 = v12 >> 14;
        v12 >>= 7;
      }
      while (v14);
      *(v11 - 1) = v13;
    }
    else
    {
      a4[1] = v12;
      v11 = (unsigned __int8 *)(a4 + 2);
    }
  }
  else
  {
    *a4 = v10;
    v11 = (unsigned __int8 *)(a4 + 1);
  }
  *v11 = v4;
  v15 = (char *)(v11 + 1);
  if (*(char *)(a3 + 23) >= 0)
    v16 = (const void *)a3;
  else
    v16 = *(const void **)a3;
  memcpy(v15, v16, v4);
  return (unsigned __int8 *)&v15[v4];
}

uint64_t sentencepiece::SentencePieceText_SentencePiece::ByteSizeLong(sentencepiece::SentencePieceText_SentencePiece *this)
{
  uint64_t result;
  int v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  result = google::protobuf::internal::ExtensionSet::ByteSize((sentencepiece::SentencePieceText_SentencePiece *)((char *)this + 16));
  v3 = *((_DWORD *)this + 10);
  if ((v3 & 0x1F) == 0)
    goto LABEL_8;
  if ((v3 & 1) != 0)
  {
    v5 = *((_QWORD *)this + 6) & 0xFFFFFFFFFFFFFFFELL;
    v6 = *(unsigned __int8 *)(v5 + 23);
    v7 = *(_QWORD *)(v5 + 8);
    if ((v6 & 0x80u) == 0)
      v7 = v6;
    result += v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v3 & 2) == 0)
    {
LABEL_4:
      if ((v3 & 4) == 0)
        goto LABEL_5;
LABEL_16:
      result += ((9 * (__clz(*((_DWORD *)this + 16) | 1) ^ 0x1F) + 73) >> 6) + 1;
      if ((v3 & 8) == 0)
      {
LABEL_6:
        if ((v3 & 0x10) == 0)
          goto LABEL_8;
        goto LABEL_7;
      }
      goto LABEL_17;
    }
  }
  else if ((v3 & 2) == 0)
  {
    goto LABEL_4;
  }
  v8 = *((_QWORD *)this + 7) & 0xFFFFFFFFFFFFFFFELL;
  v9 = *(unsigned __int8 *)(v8 + 23);
  v10 = *(_QWORD *)(v8 + 8);
  if ((v9 & 0x80u) == 0)
    v10 = v9;
  result += v10 + ((9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v3 & 4) != 0)
    goto LABEL_16;
LABEL_5:
  if ((v3 & 8) == 0)
    goto LABEL_6;
LABEL_17:
  result += ((9 * (__clz(*((_DWORD *)this + 17) | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v3 & 0x10) != 0)
LABEL_7:
    result += ((9 * (__clz(*((_DWORD *)this + 18) | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_8:
  v4 = *((_QWORD *)this + 1);
  if ((v4 & 1) != 0)
  {
    v11 = v4 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v11 + 31) < 0)
      v12 = *(_QWORD *)(v11 + 16);
    else
      v12 = *(unsigned __int8 *)(v11 + 31);
    result += v12;
  }
  *((_DWORD *)this + 11) = result;
  return result;
}

void sentencepiece::SentencePieceText_SentencePiece::CheckTypeAndMergeFrom(sentencepiece::SentencePieceText_SentencePiece *this, const google::protobuf::MessageLite *a2, uint64_t a3)
{
  if (*(void (***)(sentencepiece::SentencePieceText_SentencePiece *__hidden))a2 != &off_2516E2EC0)
    sentencepiece::SentencePieceText_SentencePiece::CheckTypeAndMergeFrom((uint64_t)this, (uint64_t)a2, a3);
  sentencepiece::SentencePieceText_SentencePiece::MergeFrom(this, a2);
}

void sentencepiece::SentencePieceText_SentencePiece::MergeFrom(sentencepiece::SentencePieceText_SentencePiece *this, const sentencepiece::SentencePieceText_SentencePiece *a2)
{
  std::string *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  std::string *v9;
  int v10;
  const std::string::value_type *v11;
  std::string::size_type v12;
  int v13;
  __int128 *v14;
  uint64_t v15;
  google::protobuf::internal::ArenaImpl *v16;
  __int128 *v17;
  uint64_t v18;
  google::protobuf::internal::ArenaImpl *v19;
  char v20;
  std::string v21[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v21, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece.pb.cc", 375);
    v4 = google::protobuf::internal::LogMessage::operator<<(v21, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v20, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v21[0].__r_.__value_.__l.__data_);
  }
  google::protobuf::internal::ExtensionSet::MergeFrom((sentencepiece::SentencePieceText_SentencePiece *)((char *)this + 16), (const sentencepiece::SentencePieceText_SentencePiece *)((char *)a2 + 16));
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
  {
    v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
    v7 = (v5 & 0xFFFFFFFFFFFFFFFELL) + 8;
    v8 = *((_QWORD *)this + 1);
    if ((v8 & 1) != 0)
      v9 = (std::string *)((v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
    else
      v9 = (std::string *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<std::string>((uint64_t *)this + 1);
    v10 = *(char *)(v6 + 31);
    if (v10 >= 0)
      v11 = (const std::string::value_type *)v7;
    else
      v11 = *(const std::string::value_type **)(v6 + 8);
    if (v10 >= 0)
      v12 = *(unsigned __int8 *)(v6 + 31);
    else
      v12 = *(_QWORD *)(v6 + 16);
    std::string::append(v9, v11, v12);
  }
  v13 = *((_DWORD *)a2 + 10);
  if ((v13 & 0x1F) != 0)
  {
    if ((v13 & 1) != 0)
    {
      v14 = (__int128 *)(*((_QWORD *)a2 + 6) & 0xFFFFFFFFFFFFFFFELL);
      *((_DWORD *)this + 10) |= 1u;
      v15 = *((_QWORD *)this + 1);
      v16 = (google::protobuf::internal::ArenaImpl *)(v15 & 0xFFFFFFFFFFFFFFFELL);
      if ((v15 & 1) != 0)
        v16 = *(google::protobuf::internal::ArenaImpl **)v16;
      google::protobuf::internal::ArenaStringPtr::Set((sentencepiece::SentencePieceText_SentencePiece *)((char *)this + 48), v14, v16);
      if ((v13 & 2) == 0)
      {
LABEL_16:
        if ((v13 & 4) == 0)
          goto LABEL_17;
        goto LABEL_28;
      }
    }
    else if ((v13 & 2) == 0)
    {
      goto LABEL_16;
    }
    v17 = (__int128 *)(*((_QWORD *)a2 + 7) & 0xFFFFFFFFFFFFFFFELL);
    *((_DWORD *)this + 10) |= 2u;
    v18 = *((_QWORD *)this + 1);
    v19 = (google::protobuf::internal::ArenaImpl *)(v18 & 0xFFFFFFFFFFFFFFFELL);
    if ((v18 & 1) != 0)
      v19 = *(google::protobuf::internal::ArenaImpl **)v19;
    google::protobuf::internal::ArenaStringPtr::Set((sentencepiece::SentencePieceText_SentencePiece *)((char *)this + 56), v17, v19);
    if ((v13 & 4) == 0)
    {
LABEL_17:
      if ((v13 & 8) == 0)
        goto LABEL_18;
      goto LABEL_29;
    }
LABEL_28:
    *((_DWORD *)this + 16) = *((_DWORD *)a2 + 16);
    if ((v13 & 8) == 0)
    {
LABEL_18:
      if ((v13 & 0x10) == 0)
      {
LABEL_20:
        *((_DWORD *)this + 10) |= v13;
        return;
      }
LABEL_19:
      *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
      goto LABEL_20;
    }
LABEL_29:
    *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
    if ((v13 & 0x10) == 0)
      goto LABEL_20;
    goto LABEL_19;
  }
}

void sub_245C6CA2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sentencepiece::SentencePieceText_SentencePiece::IsInitialized(sentencepiece::SentencePieceText_SentencePiece *this)
{
  return google::protobuf::internal::ExtensionSet::IsInitialized((sentencepiece::SentencePieceText_SentencePiece *)((char *)this + 16));
}

uint64_t *sentencepiece::SentencePieceText_SentencePiece::InternalSwap(sentencepiece::SentencePieceText_SentencePiece *this, sentencepiece::SentencePieceText_SentencePiece *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  google::protobuf::internal::ArenaImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  google::protobuf::internal::ArenaImpl *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t *result;
  uint64_t *v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;

  google::protobuf::internal::ExtensionSet::Swap((sentencepiece::SentencePieceText_SentencePiece *)((char *)this + 16), (sentencepiece::SentencePieceText_SentencePiece *)((char *)a2 + 16));
  v5 = (uint64_t *)((char *)this + 8);
  v4 = *((_QWORD *)this + 1);
  v6 = *((_QWORD *)a2 + 1);
  if ((v4 & 1) != 0)
  {
    if ((v6 & 1) == 0)
    {
      v10 = google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<std::string>((uint64_t *)a2 + 1);
      v4 = *v5;
      if ((*v5 & 1) != 0)
        goto LABEL_6;
LABEL_21:
      v11 = google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<std::string>((uint64_t *)this + 1);
      goto LABEL_7;
    }
  }
  else if ((v6 & 1) == 0)
  {
    v7 = 0;
    v8 = *((_DWORD *)this + 10);
    *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
    *((_DWORD *)a2 + 10) = v8;
    v9 = (google::protobuf::internal::ArenaImpl *)(v4 & 0xFFFFFFFFFFFFFFFELL);
    goto LABEL_9;
  }
  v10 = (v6 & 0xFFFFFFFFFFFFFFFELL) + 8;
  if ((v4 & 1) == 0)
    goto LABEL_21;
LABEL_6:
  v11 = (v4 & 0xFFFFFFFFFFFFFFFELL) + 8;
LABEL_7:
  v12 = *(_QWORD *)(v11 + 16);
  v13 = *(_OWORD *)v11;
  v14 = *(_QWORD *)(v10 + 16);
  *(_OWORD *)v11 = *(_OWORD *)v10;
  *(_QWORD *)(v11 + 16) = v14;
  *(_OWORD *)v10 = v13;
  *(_QWORD *)(v10 + 16) = v12;
  v15 = *((_QWORD *)this + 1);
  LODWORD(v14) = *((_DWORD *)this + 10);
  *((_DWORD *)this + 10) = *((_DWORD *)a2 + 10);
  *((_DWORD *)a2 + 10) = v14;
  v9 = (google::protobuf::internal::ArenaImpl *)(v15 & 0xFFFFFFFFFFFFFFFELL);
  if ((v15 & 1) != 0)
  {
    v16 = *(google::protobuf::internal::ArenaImpl **)v9;
    v7 = 1;
    goto LABEL_10;
  }
  v7 = 0;
LABEL_9:
  v16 = v9;
LABEL_10:
  if (*((uint64_t **)this + 6) != &google::protobuf::internal::fixed_address_empty_string
    || *((uint64_t **)a2 + 6) != &google::protobuf::internal::fixed_address_empty_string)
  {
    v17 = google::protobuf::internal::ArenaStringPtr::Mutable((uint64_t **)this + 6, v16);
    v18 = google::protobuf::internal::ArenaStringPtr::Mutable((uint64_t **)a2 + 6, v16);
    v19 = v17[2];
    v20 = *(_OWORD *)v17;
    v21 = v18[2];
    *(_OWORD *)v17 = *(_OWORD *)v18;
    v17[2] = v21;
    *(_OWORD *)v18 = v20;
    v18[2] = v19;
    v7 = *v5 & 1;
    v9 = (google::protobuf::internal::ArenaImpl *)(*v5 & 0xFFFFFFFFFFFFFFFELL);
  }
  result = (uint64_t *)((char *)this + 56);
  if (v7)
    v9 = *(google::protobuf::internal::ArenaImpl **)v9;
  if ((uint64_t *)*result != &google::protobuf::internal::fixed_address_empty_string
    || *((uint64_t **)a2 + 7) != &google::protobuf::internal::fixed_address_empty_string)
  {
    v23 = google::protobuf::internal::ArenaStringPtr::Mutable((uint64_t **)result, v9);
    result = google::protobuf::internal::ArenaStringPtr::Mutable((uint64_t **)a2 + 7, v9);
    v24 = v23[2];
    v25 = *(_OWORD *)v23;
    v26 = result[2];
    *(_OWORD *)v23 = *(_OWORD *)result;
    v23[2] = v26;
    *(_OWORD *)result = v25;
    result[2] = v24;
  }
  v27 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
  *((_QWORD *)a2 + 8) = v27;
  LODWORD(v27) = *((_DWORD *)this + 18);
  *((_DWORD *)this + 18) = *((_DWORD *)a2 + 18);
  *((_DWORD *)a2 + 18) = v27;
  return result;
}

_QWORD *sentencepiece::SentencePieceText_SentencePiece::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "sentencepiece.SentencePieceText.SentencePiece");
}

uint64_t sentencepiece::SentencePieceText::SentencePieceText(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = &off_2516E2918;
  *(_QWORD *)(a1 + 8) = a2;
  google::protobuf::internal::ExtensionSet::ExtensionSet(a1 + 16, a2);
  *(_QWORD *)(a1 + 48) = a2;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  if (atomic_load(scc_info_SentencePieceText_sentencepiece_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_SentencePieceText_sentencepiece_2eproto);
  *(_QWORD *)(a1 + 72) = &google::protobuf::internal::fixed_address_empty_string;
  *(_DWORD *)(a1 + 80) = 0;
  return a1;
}

void sub_245C6CCD4(_Unwind_Exception *a1)
{
  google::protobuf::internal::ExtensionSet *v1;
  google::protobuf::internal::ArenaImpl **v2;

  google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText_SentencePiece>::~RepeatedPtrField(v2);
  google::protobuf::internal::ExtensionSet::~ExtensionSet(v1);
  _Unwind_Resume(a1);
}

void sentencepiece::SentencePieceText::~SentencePieceText(sentencepiece::SentencePieceText *this)
{
  sentencepiece::SentencePieceText::SharedDtor(this);
  google::protobuf::internal::InternalMetadata::Delete<std::string>((uint64_t *)this + 1);
  google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText_SentencePiece>::~RepeatedPtrField((google::protobuf::internal::ArenaImpl **)this + 6);
  google::protobuf::internal::ExtensionSet::~ExtensionSet((sentencepiece::SentencePieceText *)((char *)this + 16));
}

{
  sentencepiece::SentencePieceText::~SentencePieceText(this);
  JUMPOUT(0x249544F58);
}

void sentencepiece::SentencePieceText::SharedDtor(sentencepiece::SentencePieceText *this)
{
  uint64_t v2;
  _QWORD *v3;
  std::string *v4;
  google::protobuf::internal::ArenaStringPtr *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  std::string v10[2];

  v2 = *((_QWORD *)this + 1);
  v3 = (_QWORD *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  if ((v2 & 1) == 0)
  {
    if (!v3)
      goto LABEL_4;
    goto LABEL_3;
  }
  if (*v3)
  {
LABEL_3:
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece.pb.cc", 486);
    v4 = google::protobuf::internal::LogMessage::operator<<(v10, "CHECK failed: GetArena() == nullptr: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v9, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v10[0].__r_.__value_.__l.__data_);
  }
LABEL_4:
  v6 = (uint64_t *)*((_QWORD *)this + 9);
  v5 = (sentencepiece::SentencePieceText *)((char *)this + 72);
  if (v6 != &google::protobuf::internal::fixed_address_empty_string)
  {
    v7 = google::protobuf::internal::ArenaStringPtr::UnsafeMutablePointer(v5);
    v8 = v7;
    if (*(char *)(v7 + 23) < 0)
      operator delete(*(void **)v7);
    MEMORY[0x249544F58](v8, 0x1012C40EC159624);
  }
}

void sub_245C6CDF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void *sentencepiece::SentencePieceText::default_instance(sentencepiece::SentencePieceText *this)
{
  if (atomic_load(scc_info_SentencePieceText_sentencepiece_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_SentencePieceText_sentencepiece_2eproto);
  return &sentencepiece::_SentencePieceText_default_instance_;
}

void sentencepiece::SentencePieceText::Clear(sentencepiece::SentencePieceText *this)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;

  google::protobuf::internal::ExtensionSet::Clear((sentencepiece::SentencePieceText *)((char *)this + 16));
  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText_SentencePiece>::TypeHandler>((uint64_t)this + 48);
  if ((*((_BYTE *)this + 40) & 1) != 0)
  {
    v2 = *((_QWORD *)this + 9) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v2 + 23) < 0)
    {
      **(_BYTE **)v2 = 0;
      *(_QWORD *)(v2 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v2 = 0;
      *(_BYTE *)(v2 + 23) = 0;
    }
  }
  *((_DWORD *)this + 20) = 0;
  *((_DWORD *)this + 10) = 0;
  v3 = *((_QWORD *)this + 1);
  if ((v3 & 1) != 0)
  {
    v4 = v3 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v4 + 31) < 0)
    {
      **(_BYTE **)(v4 + 8) = 0;
      *(_QWORD *)(v4 + 16) = 0;
    }
    else
    {
      *(_BYTE *)(v4 + 8) = 0;
      *(_BYTE *)(v4 + 31) = 0;
    }
  }
}

google::protobuf::internal *sentencepiece::SentencePieceText::_InternalParse(sentencepiece::SentencePieceText *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  int v5;
  _QWORD *v7;
  google::protobuf::internal *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  BOOL v13;
  google::protobuf::internal *v14;
  char *v15;
  google::protobuf::internal *v16;
  int *v17;
  uint64_t v18;
  int v19;
  sentencepiece::SentencePieceText_SentencePiece *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  google::protobuf::internal::ArenaImpl *v24;
  std::string *v25;
  google::protobuf::internal *TagFallback;
  unsigned int v27;
  std::string *v28;
  google::protobuf::internal *v29;

  v29 = a2;
  v5 = 0;
  if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v29, *((_DWORD *)a3 + 23)) & 1) == 0)
  {
    v7 = (_QWORD *)((char *)this + 8);
    while (1)
    {
      v8 = (google::protobuf::internal *)((char *)v29 + 1);
      v9 = *(unsigned __int8 *)v29;
      if ((*(char *)v29 & 0x80000000) == 0)
        goto LABEL_7;
      v10 = v9 + (*(unsigned __int8 *)v8 << 7);
      v9 = v10 - 128;
      if ((*(char *)v8 & 0x80000000) == 0)
        break;
      TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v29, (const char *)(v10 - 128));
      v29 = TagFallback;
      if (!TagFallback)
        goto LABEL_48;
      v8 = TagFallback;
      v9 = v27;
LABEL_8:
      v11 = v9 >> 3;
      if (v9 >> 3 == 3)
      {
        if (v9 == 29)
        {
          v5 |= 2u;
          *((_DWORD *)this + 20) = *(_DWORD *)v8;
          v29 = (google::protobuf::internal *)((char *)v8 + 4);
          goto LABEL_44;
        }
        goto LABEL_14;
      }
      if (v11 == 2)
      {
        if (v9 == 18)
        {
          v15 = (char *)v8 - 1;
          while (1)
          {
            v16 = (google::protobuf::internal *)(v15 + 1);
            v29 = (google::protobuf::internal *)(v15 + 1);
            v17 = (int *)*((_QWORD *)this + 8);
            if (!v17)
              break;
            v18 = *((int *)this + 14);
            v19 = *v17;
            if ((int)v18 >= *v17)
            {
              if (v19 == *((_DWORD *)this + 15))
              {
LABEL_29:
                google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)this + 12, v19 + 1);
                v17 = (int *)*((_QWORD *)this + 8);
                v19 = *v17;
              }
              *v17 = v19 + 1;
              v20 = (sentencepiece::SentencePieceText_SentencePiece *)google::protobuf::Arena::CreateMaybeMessage<sentencepiece::SentencePieceText_SentencePiece>(*((_QWORD *)this + 6));
              v21 = *((_QWORD *)this + 8);
              v22 = *((int *)this + 14);
              *((_DWORD *)this + 14) = v22 + 1;
              *(_QWORD *)(v21 + 8 * v22 + 8) = v20;
              v16 = v29;
              goto LABEL_31;
            }
            *((_DWORD *)this + 14) = v18 + 1;
            v20 = *(sentencepiece::SentencePieceText_SentencePiece **)&v17[2 * v18 + 2];
LABEL_31:
            v15 = google::protobuf::internal::ParseContext::ParseMessage<sentencepiece::SentencePieceText_SentencePiece>(a3, v20, v16);
            v29 = (google::protobuf::internal *)v15;
            if (!v15)
              goto LABEL_48;
            if (*(_QWORD *)a3 <= (unint64_t)v15 || *v15 != 18)
              goto LABEL_44;
          }
          v19 = *((_DWORD *)this + 15);
          goto LABEL_29;
        }
LABEL_14:
        if (v9)
          v13 = (v9 & 7) == 4;
        else
          v13 = 1;
        if (v13)
        {
          *((_DWORD *)a3 + 20) = v9 - 1;
          goto LABEL_2;
        }
        if (v9 < 0x640)
        {
          if ((*v7 & 1) != 0)
          {
            v28 = (std::string *)((*v7 & 0xFFFFFFFFFFFFFFFELL) + 8);
          }
          else
          {
            v28 = (std::string *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<std::string>((uint64_t *)this + 1);
            v8 = v29;
          }
          v14 = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse(v9, v28, v8, a3);
        }
        else
        {
          v14 = (google::protobuf::internal *)google::protobuf::internal::ExtensionSet::ParseField((sentencepiece::SentencePieceText *)((char *)this + 16), v9, v8, (uint64_t)&sentencepiece::_SentencePieceText_default_instance_, (uint64_t *)this + 1, (int32x2_t *)a3);
        }
        goto LABEL_43;
      }
      if (v11 != 1 || v9 != 10)
        goto LABEL_14;
      *((_DWORD *)this + 10) |= 1u;
      v23 = *((_QWORD *)this + 1);
      v24 = (google::protobuf::internal::ArenaImpl *)(v23 & 0xFFFFFFFFFFFFFFFELL);
      if ((v23 & 1) != 0)
        v24 = *(google::protobuf::internal::ArenaImpl **)v24;
      v25 = (std::string *)google::protobuf::internal::ArenaStringPtr::Mutable((uint64_t **)this + 9, v24);
      v14 = (google::protobuf::internal *)google::protobuf::internal::InlineGreedyStringParser(v25, (std::string::value_type *)v29, (uint64_t)a3);
LABEL_43:
      v29 = v14;
      if (!v14)
      {
LABEL_48:
        v29 = 0;
        goto LABEL_2;
      }
LABEL_44:
      if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v29, *((_DWORD *)a3 + 23)) & 1) != 0)
        goto LABEL_2;
    }
    v8 = (google::protobuf::internal *)((char *)v29 + 2);
LABEL_7:
    v29 = v8;
    goto LABEL_8;
  }
LABEL_2:
  *((_DWORD *)this + 10) |= v5;
  return v29;
}

char *google::protobuf::internal::ParseContext::ParseMessage<sentencepiece::SentencePieceText_SentencePiece>(google::protobuf::internal::EpsCopyInputStream *this, sentencepiece::SentencePieceText_SentencePiece *a2, google::protobuf::internal *a3)
{
  int v6;
  const char *v7;
  char *v8;
  char *result;
  int v10;
  int v11;
  int v12;
  BOOL v13;
  int v14;
  int v15;

  v6 = *(char *)a3;
  v7 = (const char *)*(unsigned __int8 *)a3;
  if (v6 < 0)
  {
    result = google::protobuf::internal::ReadSizeFallback(a3, v7);
    if (!result)
      return result;
    v8 = result;
    LODWORD(v7) = v10;
  }
  else
  {
    v8 = (char *)a3 + 1;
  }
  v11 = google::protobuf::internal::EpsCopyInputStream::PushLimit(this, v8, v7);
  v12 = *((_DWORD *)this + 22);
  v13 = __OFSUB__(v12--, 1);
  *((_DWORD *)this + 22) = v12;
  if (v12 < 0 != v13)
    return 0;
  v14 = v11;
  result = (char *)sentencepiece::SentencePieceText_SentencePiece::_InternalParse(a2, (google::protobuf::internal *)v8, (int32x2_t *)this);
  if (!result)
    return result;
  ++*((_DWORD *)this + 22);
  if (*((_DWORD *)this + 20))
    return 0;
  v15 = *((_DWORD *)this + 7) + v14;
  *((_DWORD *)this + 7) = v15;
  *(_QWORD *)this = *((_QWORD *)this + 1) + (v15 & (v15 >> 31));
  return result;
}

unsigned __int8 *sentencepiece::SentencePieceText::_InternalSerialize(sentencepiece::SentencePieceText *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3)
{
  char *v4;
  int v6;
  int v7;
  int i;
  sentencepiece::SentencePieceText_SentencePiece *v9;
  unsigned int v10;
  char *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  uint64_t v18;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;

  v4 = a2;
  v6 = *((_DWORD *)this + 10);
  if ((v6 & 1) != 0)
    v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 1, *((_QWORD *)this + 9) & 0xFFFFFFFFFFFFFFFELL, a2);
  v7 = *((_DWORD *)this + 14);
  if (v7)
  {
    for (i = 0; i != v7; ++i)
    {
      if (*(_QWORD *)a3 <= (unint64_t)v4)
        v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
      v9 = (sentencepiece::SentencePieceText_SentencePiece *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText_SentencePiece>::TypeHandler>((uint64_t)this + 48, i);
      *v4 = 18;
      v10 = *((_DWORD *)v9 + 11);
      if (v10 > 0x7F)
      {
        v4[1] = v10 | 0x80;
        v12 = v10 >> 7;
        if (v10 >> 14)
        {
          v11 = v4 + 3;
          do
          {
            *(v11 - 1) = v12 | 0x80;
            v13 = v12 >> 7;
            ++v11;
            v14 = v12 >> 14;
            v12 >>= 7;
          }
          while (v14);
          *(v11 - 1) = v13;
        }
        else
        {
          v4[2] = v12;
          v11 = v4 + 3;
        }
      }
      else
      {
        v4[1] = v10;
        v11 = v4 + 2;
      }
      v4 = (char *)sentencepiece::SentencePieceText_SentencePiece::_InternalSerialize(v9, v11, a3);
    }
  }
  if ((v6 & 2) != 0)
  {
    if (*(_QWORD *)a3 <= (unint64_t)v4)
      v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
    v15 = *((_DWORD *)this + 20);
    *v4 = 29;
    *(_DWORD *)(v4 + 1) = v15;
    v4 += 5;
  }
  v16 = google::protobuf::internal::ExtensionSet::_InternalSerialize((sentencepiece::SentencePieceText *)((char *)this + 16), 200, 0x20000000, (unsigned __int8 *)v4, a3);
  v17 = v16;
  v18 = *((_QWORD *)this + 1);
  if ((v18 & 1) == 0)
    return v17;
  v20 = v18 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v20 + 31) < 0)
  {
    v21 = *(void **)(v20 + 8);
    v22 = *(_QWORD *)(v20 + 16);
  }
  else
  {
    v21 = (void *)(v20 + 8);
    LODWORD(v22) = *(unsigned __int8 *)(v20 + 31);
  }
  if (*(_QWORD *)a3 - (_QWORD)v16 >= (int)v22)
  {
    v23 = (int)v22;
    memcpy(v16, v21, (int)v22);
    v17 += v23;
    return v17;
  }
  return google::protobuf::io::EpsCopyOutputStream::WriteRawFallback(a3, (char *)v21, v22, v16);
}

uint64_t sentencepiece::SentencePieceText::ByteSizeLong(sentencepiece::SentencePieceText *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  sentencepiece::SentencePieceText_SentencePiece **v6;
  uint64_t v7;
  sentencepiece::SentencePieceText_SentencePiece *v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v16;
  uint64_t v17;

  v2 = google::protobuf::internal::ExtensionSet::ByteSize((sentencepiece::SentencePieceText *)((char *)this + 16));
  v3 = *((int *)this + 14);
  v4 = v2 + v3;
  v5 = *((_QWORD *)this + 8);
  if (v5)
    v6 = (sentencepiece::SentencePieceText_SentencePiece **)(v5 + 8);
  else
    v6 = 0;
  if ((_DWORD)v3)
  {
    v7 = 8 * v3;
    do
    {
      v8 = *v6++;
      v9 = sentencepiece::SentencePieceText_SentencePiece::ByteSizeLong(v8);
      v4 += v9 + ((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6);
      v7 -= 8;
    }
    while (v7);
  }
  v10 = *((_DWORD *)this + 10);
  if ((v10 & 3) != 0)
  {
    if ((v10 & 1) != 0)
    {
      v11 = *((_QWORD *)this + 9) & 0xFFFFFFFFFFFFFFFELL;
      v12 = *(unsigned __int8 *)(v11 + 23);
      v13 = *(_QWORD *)(v11 + 8);
      if ((v12 & 0x80u) == 0)
        v13 = v12;
      v4 += v13 + ((9 * (__clz(v13 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    if ((v10 & 2) != 0)
      v4 += 5;
  }
  v14 = *((_QWORD *)this + 1);
  if ((v14 & 1) != 0)
  {
    v16 = v14 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v16 + 31) < 0)
      v17 = *(_QWORD *)(v16 + 16);
    else
      v17 = *(unsigned __int8 *)(v16 + 31);
    v4 += v17;
  }
  *((_DWORD *)this + 11) = v4;
  return v4;
}

void sentencepiece::SentencePieceText::CheckTypeAndMergeFrom(sentencepiece::SentencePieceText *this, const google::protobuf::MessageLite *a2, uint64_t a3)
{
  if (*(void (***)(sentencepiece::SentencePieceText *__hidden))a2 != &off_2516E2918)
    sentencepiece::SentencePieceText_SentencePiece::CheckTypeAndMergeFrom((uint64_t)this, (uint64_t)a2, a3);
  sentencepiece::SentencePieceText::MergeFrom(this, a2);
}

void sentencepiece::SentencePieceText::MergeFrom(sentencepiece::SentencePieceText *this, const sentencepiece::SentencePieceText *a2)
{
  std::string *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  std::string *v9;
  int v10;
  const std::string::value_type *v11;
  std::string::size_type v12;
  int v13;
  __int128 *v14;
  uint64_t v15;
  google::protobuf::internal::ArenaImpl *v16;
  char v17;
  std::string v18[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece.pb.cc", 674);
    v4 = google::protobuf::internal::LogMessage::operator<<(v18, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v17, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v18[0].__r_.__value_.__l.__data_);
  }
  google::protobuf::internal::ExtensionSet::MergeFrom((sentencepiece::SentencePieceText *)((char *)this + 16), (const sentencepiece::SentencePieceText *)((char *)a2 + 16));
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
  {
    v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
    v7 = (v5 & 0xFFFFFFFFFFFFFFFELL) + 8;
    v8 = *((_QWORD *)this + 1);
    if ((v8 & 1) != 0)
      v9 = (std::string *)((v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
    else
      v9 = (std::string *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<std::string>((uint64_t *)this + 1);
    v10 = *(char *)(v6 + 31);
    if (v10 >= 0)
      v11 = (const std::string::value_type *)v7;
    else
      v11 = *(const std::string::value_type **)(v6 + 8);
    if (v10 >= 0)
      v12 = *(unsigned __int8 *)(v6 + 31);
    else
      v12 = *(_QWORD *)(v6 + 16);
    std::string::append(v9, v11, v12);
  }
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText_SentencePiece>::TypeHandler>((uint64_t)this + 48, (uint64_t)a2 + 48);
  v13 = *((_DWORD *)a2 + 10);
  if ((v13 & 3) != 0)
  {
    if ((v13 & 1) != 0)
    {
      v14 = (__int128 *)(*((_QWORD *)a2 + 9) & 0xFFFFFFFFFFFFFFFELL);
      *((_DWORD *)this + 10) |= 1u;
      v15 = *((_QWORD *)this + 1);
      v16 = (google::protobuf::internal::ArenaImpl *)(v15 & 0xFFFFFFFFFFFFFFFELL);
      if ((v15 & 1) != 0)
        v16 = *(google::protobuf::internal::ArenaImpl **)v16;
      google::protobuf::internal::ArenaStringPtr::Set((sentencepiece::SentencePieceText *)((char *)this + 72), v14, v16);
    }
    if ((v13 & 2) != 0)
      *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
    *((_DWORD *)this + 10) |= v13;
  }
}

void sub_245C6D6B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sentencepiece::SentencePieceText::IsInitialized(sentencepiece::SentencePieceText *this)
{
  uint64_t result;

  result = google::protobuf::internal::ExtensionSet::IsInitialized((sentencepiece::SentencePieceText *)((char *)this + 16));
  if ((_DWORD)result)
    return google::protobuf::internal::AllAreInitialized<sentencepiece::SentencePieceText_SentencePiece>((uint64_t)this + 48);
  return result;
}

BOOL google::protobuf::internal::AllAreInitialized<sentencepiece::SentencePieceText_SentencePiece>(uint64_t a1)
{
  int v2;
  int v3;
  BOOL v4;
  uint64_t v5;

  v2 = *(_DWORD *)(a1 + 8);
  do
  {
    v3 = v2;
    v4 = __OFSUB__(v2--, 1);
    if (v2 < 0 != v4)
      break;
    v5 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText_SentencePiece>::TypeHandler>(a1, v2);
  }
  while ((google::protobuf::internal::ExtensionSet::IsInitialized((google::protobuf::internal::ExtensionSet *)(v5 + 16)) & 1) != 0);
  return v3 < 1;
}

_QWORD *sentencepiece::SentencePieceText::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "sentencepiece.SentencePieceText");
}

uint64_t sentencepiece::NBestSentencePieceText::NBestSentencePieceText(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = &off_2516E2AD0;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a2;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  if (atomic_load(scc_info_NBestSentencePieceText_sentencepiece_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_NBestSentencePieceText_sentencepiece_2eproto);
  return a1;
}

void sub_245C6D7C4(_Unwind_Exception *a1)
{
  google::protobuf::internal::ArenaImpl **v1;

  google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText>::~RepeatedPtrField(v1);
  _Unwind_Resume(a1);
}

void sentencepiece::NBestSentencePieceText::~NBestSentencePieceText(sentencepiece::NBestSentencePieceText *this)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  std::string *v5;
  char v6;
  std::string v7[2];

  v3 = (uint64_t *)((char *)this + 8);
  v2 = *((_QWORD *)this + 1);
  v4 = (_QWORD *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  if ((v2 & 1) != 0)
  {
    if (!*v4)
      goto LABEL_4;
    goto LABEL_3;
  }
  if (v4)
  {
LABEL_3:
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece.pb.cc", 755);
    v5 = google::protobuf::internal::LogMessage::operator<<(v7, "CHECK failed: GetArena() == nullptr: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v6, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v7[0].__r_.__value_.__l.__data_);
  }
LABEL_4:
  google::protobuf::internal::InternalMetadata::Delete<std::string>(v3);
  google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText>::~RepeatedPtrField((google::protobuf::internal::ArenaImpl **)this + 2);
}

{
  sentencepiece::NBestSentencePieceText::~NBestSentencePieceText(this);
  JUMPOUT(0x249544F58);
}

void sub_245C6D870(void *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  __clang_call_terminate(a1);
}

void sentencepiece::NBestSentencePieceText::Clear(sentencepiece::NBestSentencePieceText *this)
{
  uint64_t v2;
  unint64_t v3;

  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText>::TypeHandler>((uint64_t)this + 16);
  v2 = *((_QWORD *)this + 1);
  if ((v2 & 1) != 0)
  {
    v3 = v2 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v3 + 31) < 0)
    {
      **(_BYTE **)(v3 + 8) = 0;
      *(_QWORD *)(v3 + 16) = 0;
    }
    else
    {
      *(_BYTE *)(v3 + 8) = 0;
      *(_BYTE *)(v3 + 31) = 0;
    }
  }
}

google::protobuf::internal *sentencepiece::NBestSentencePieceText::_InternalParse(sentencepiece::NBestSentencePieceText *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  _QWORD *v5;
  google::protobuf::internal *v6;
  unsigned int v7;
  unsigned int v8;
  BOOL v9;
  std::string *v10;
  char *v11;
  google::protobuf::internal *v12;
  int *v13;
  uint64_t v14;
  int v15;
  sentencepiece::SentencePieceText *v16;
  uint64_t v17;
  uint64_t v18;
  google::protobuf::internal *TagFallback;
  unsigned int v20;
  google::protobuf::internal *v22;

  v22 = a2;
  if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v22, *((_DWORD *)a3 + 23)) & 1) == 0)
  {
    v5 = (_QWORD *)((char *)this + 8);
    while (1)
    {
      v6 = (google::protobuf::internal *)((char *)v22 + 1);
      v7 = *(unsigned __int8 *)v22;
      if ((*(char *)v22 & 0x80000000) == 0)
        goto LABEL_6;
      v8 = v7 + (*(unsigned __int8 *)v6 << 7);
      v7 = v8 - 128;
      if ((*(char *)v6 & 0x80000000) == 0)
        break;
      TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v22, (const char *)(v8 - 128));
      v22 = TagFallback;
      if (!TagFallback)
        return 0;
      v6 = TagFallback;
      v7 = v20;
LABEL_7:
      if (v7 == 10)
      {
        v11 = (char *)v6 - 1;
        while (1)
        {
          v12 = (google::protobuf::internal *)(v11 + 1);
          v22 = (google::protobuf::internal *)(v11 + 1);
          v13 = (int *)*((_QWORD *)this + 4);
          if (!v13)
            break;
          v14 = *((int *)this + 6);
          v15 = *v13;
          if ((int)v14 >= *v13)
          {
            if (v15 == *((_DWORD *)this + 7))
            {
LABEL_22:
              google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)this + 4, v15 + 1);
              v13 = (int *)*((_QWORD *)this + 4);
              v15 = *v13;
            }
            *v13 = v15 + 1;
            v16 = (sentencepiece::SentencePieceText *)google::protobuf::Arena::CreateMaybeMessage<sentencepiece::SentencePieceText>(*((_QWORD *)this + 2));
            v17 = *((_QWORD *)this + 4);
            v18 = *((int *)this + 6);
            *((_DWORD *)this + 6) = v18 + 1;
            *(_QWORD *)(v17 + 8 * v18 + 8) = v16;
            v12 = v22;
            goto LABEL_24;
          }
          *((_DWORD *)this + 6) = v14 + 1;
          v16 = *(sentencepiece::SentencePieceText **)&v13[2 * v14 + 2];
LABEL_24:
          v11 = google::protobuf::internal::ParseContext::ParseMessage<sentencepiece::SentencePieceText>(a3, v16, v12);
          v22 = (google::protobuf::internal *)v11;
          if (!v11)
            return 0;
          if (*(_QWORD *)a3 <= (unint64_t)v11 || *v11 != 10)
            goto LABEL_27;
        }
        v15 = *((_DWORD *)this + 7);
        goto LABEL_22;
      }
      if (v7)
        v9 = (v7 & 7) == 4;
      else
        v9 = 1;
      if (v9)
      {
        *((_DWORD *)a3 + 20) = v7 - 1;
        return v22;
      }
      if ((*v5 & 1) != 0)
      {
        v10 = (std::string *)((*v5 & 0xFFFFFFFFFFFFFFFELL) + 8);
      }
      else
      {
        v10 = (std::string *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<std::string>((uint64_t *)this + 1);
        v6 = v22;
      }
      v22 = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse(v7, v10, v6, a3);
      if (!v22)
        return 0;
LABEL_27:
      if (google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v22, *((_DWORD *)a3 + 23)))return v22;
    }
    v6 = (google::protobuf::internal *)((char *)v22 + 2);
LABEL_6:
    v22 = v6;
    goto LABEL_7;
  }
  return v22;
}

char *google::protobuf::internal::ParseContext::ParseMessage<sentencepiece::SentencePieceText>(google::protobuf::internal::EpsCopyInputStream *this, sentencepiece::SentencePieceText *a2, google::protobuf::internal *a3)
{
  int v6;
  const char *v7;
  char *v8;
  char *result;
  int v10;
  int v11;
  int v12;
  BOOL v13;
  int v14;
  int v15;

  v6 = *(char *)a3;
  v7 = (const char *)*(unsigned __int8 *)a3;
  if (v6 < 0)
  {
    result = google::protobuf::internal::ReadSizeFallback(a3, v7);
    if (!result)
      return result;
    v8 = result;
    LODWORD(v7) = v10;
  }
  else
  {
    v8 = (char *)a3 + 1;
  }
  v11 = google::protobuf::internal::EpsCopyInputStream::PushLimit(this, v8, v7);
  v12 = *((_DWORD *)this + 22);
  v13 = __OFSUB__(v12--, 1);
  *((_DWORD *)this + 22) = v12;
  if (v12 < 0 != v13)
    return 0;
  v14 = v11;
  result = (char *)sentencepiece::SentencePieceText::_InternalParse(a2, (google::protobuf::internal *)v8, this);
  if (!result)
    return result;
  ++*((_DWORD *)this + 22);
  if (*((_DWORD *)this + 20))
    return 0;
  v15 = *((_DWORD *)this + 7) + v14;
  *((_DWORD *)this + 7) = v15;
  *(_QWORD *)this = *((_QWORD *)this + 1) + (v15 & (v15 >> 31));
  return result;
}

unsigned __int8 *sentencepiece::NBestSentencePieceText::_InternalSerialize(sentencepiece::NBestSentencePieceText *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3)
{
  int v6;
  int i;
  sentencepiece::SentencePieceText *v8;
  unsigned int v9;
  unsigned __int8 *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;

  v6 = *((_DWORD *)this + 6);
  if (v6)
  {
    for (i = 0; i != v6; ++i)
    {
      if (*(_QWORD *)a3 <= (unint64_t)a2)
        a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      v8 = (sentencepiece::SentencePieceText *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText>::TypeHandler>((uint64_t)this + 16, i);
      *a2 = 10;
      v9 = *((_DWORD *)v8 + 11);
      if (v9 > 0x7F)
      {
        a2[1] = v9 | 0x80;
        v11 = v9 >> 7;
        if (v9 >> 14)
        {
          v10 = (unsigned __int8 *)(a2 + 3);
          do
          {
            *(v10 - 1) = v11 | 0x80;
            v12 = v11 >> 7;
            ++v10;
            v13 = v11 >> 14;
            v11 >>= 7;
          }
          while (v13);
          *(v10 - 1) = v12;
        }
        else
        {
          a2[2] = v11;
          v10 = (unsigned __int8 *)(a2 + 3);
        }
      }
      else
      {
        a2[1] = v9;
        v10 = (unsigned __int8 *)(a2 + 2);
      }
      a2 = (char *)sentencepiece::SentencePieceText::_InternalSerialize(v8, (char *)v10, a3);
    }
  }
  v14 = *((_QWORD *)this + 1);
  if ((v14 & 1) == 0)
    return (unsigned __int8 *)a2;
  v16 = v14 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v16 + 31) < 0)
  {
    v17 = *(void **)(v16 + 8);
    v18 = *(_QWORD *)(v16 + 16);
  }
  else
  {
    v17 = (void *)(v16 + 8);
    LODWORD(v18) = *(unsigned __int8 *)(v16 + 31);
  }
  if (*(_QWORD *)a3 - (_QWORD)a2 >= (int)v18)
  {
    v19 = (int)v18;
    memcpy(a2, v17, (int)v18);
    a2 += v19;
    return (unsigned __int8 *)a2;
  }
  return google::protobuf::io::EpsCopyOutputStream::WriteRawFallback(a3, (char *)v17, v18, (unsigned __int8 *)a2);
}

uint64_t sentencepiece::NBestSentencePieceText::ByteSizeLong(sentencepiece::NBestSentencePieceText *this)
{
  uint64_t v2;
  uint64_t v3;
  sentencepiece::SentencePieceText **v4;
  uint64_t v5;
  sentencepiece::SentencePieceText *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v10;
  uint64_t v11;

  v2 = *((int *)this + 6);
  v3 = *((_QWORD *)this + 4);
  if (v3)
    v4 = (sentencepiece::SentencePieceText **)(v3 + 8);
  else
    v4 = 0;
  if ((_DWORD)v2)
  {
    v5 = 8 * v2;
    do
    {
      v6 = *v4++;
      v7 = sentencepiece::SentencePieceText::ByteSizeLong(v6);
      v2 += v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6);
      v5 -= 8;
    }
    while (v5);
  }
  else
  {
    v2 = 0;
  }
  v8 = *((_QWORD *)this + 1);
  if ((v8 & 1) != 0)
  {
    v10 = v8 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v10 + 31) < 0)
      v11 = *(_QWORD *)(v10 + 16);
    else
      v11 = *(unsigned __int8 *)(v10 + 31);
    v2 += v11;
  }
  *((_DWORD *)this + 10) = v2;
  return v2;
}

void sentencepiece::NBestSentencePieceText::CheckTypeAndMergeFrom(sentencepiece::NBestSentencePieceText *this, const google::protobuf::MessageLite *a2, uint64_t a3)
{
  if (*(void (***)(sentencepiece::NBestSentencePieceText *__hidden))a2 != &off_2516E2AD0)
    sentencepiece::SentencePieceText_SentencePiece::CheckTypeAndMergeFrom((uint64_t)this, (uint64_t)a2, a3);
  sentencepiece::NBestSentencePieceText::MergeFrom(this, a2);
}

void sentencepiece::NBestSentencePieceText::MergeFrom(sentencepiece::NBestSentencePieceText *this, const sentencepiece::NBestSentencePieceText *a2)
{
  std::string *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  std::string *v9;
  int v10;
  const std::string::value_type *v11;
  std::string::size_type v12;
  char v13;
  std::string v14[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v14, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece.pb.cc", 877);
    v4 = google::protobuf::internal::LogMessage::operator<<(v14, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v13, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v14[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
  {
    v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
    v7 = (v5 & 0xFFFFFFFFFFFFFFFELL) + 8;
    v8 = *((_QWORD *)this + 1);
    if ((v8 & 1) != 0)
      v9 = (std::string *)((v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
    else
      v9 = (std::string *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<std::string>((uint64_t *)this + 1);
    v10 = *(char *)(v6 + 31);
    if (v10 >= 0)
      v11 = (const std::string::value_type *)v7;
    else
      v11 = *(const std::string::value_type **)(v6 + 8);
    if (v10 >= 0)
      v12 = *(unsigned __int8 *)(v6 + 31);
    else
      v12 = *(_QWORD *)(v6 + 16);
    std::string::append(v9, v11, v12);
  }
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText>::TypeHandler>((uint64_t)this + 16, (uint64_t)a2 + 16);
}

void sub_245C6DEA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

BOOL sentencepiece::NBestSentencePieceText::IsInitialized(sentencepiece::NBestSentencePieceText *this)
{
  return google::protobuf::internal::AllAreInitialized<sentencepiece::SentencePieceText>((uint64_t)this + 16);
}

BOOL google::protobuf::internal::AllAreInitialized<sentencepiece::SentencePieceText>(uint64_t a1)
{
  int v2;
  int v3;
  BOOL v4;
  uint64_t v5;

  v2 = *(_DWORD *)(a1 + 8);
  do
  {
    v3 = v2;
    v4 = __OFSUB__(v2--, 1);
    if (v2 < 0 != v4)
      break;
    v5 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText>::TypeHandler>(a1, v2);
    if (!google::protobuf::internal::ExtensionSet::IsInitialized((google::protobuf::internal::ExtensionSet *)(v5 + 16)))
      break;
  }
  while (google::protobuf::internal::AllAreInitialized<sentencepiece::SentencePieceText_SentencePiece>(v5 + 48));
  return v3 < 1;
}

_QWORD *sentencepiece::NBestSentencePieceText::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "sentencepiece.NBestSentencePieceText");
}

uint64_t google::protobuf::Arena::CreateMaybeMessage<sentencepiece::SentencePieceText_SentencePiece>(uint64_t a1)
{
  uint64_t AlignedNoHook;

  if (a1)
  {
    if ((*(_BYTE *)(a1 + 24) & 1) != 0)
    AlignedNoHook = google::protobuf::Arena::AllocateAlignedNoHook((google::protobuf::Arena *)a1, 0x50uLL);
    sentencepiece::SentencePieceText_SentencePiece::SentencePieceText_SentencePiece(AlignedNoHook, a1);
  }
  else
  {
    AlignedNoHook = operator new();
    sentencepiece::SentencePieceText_SentencePiece::SentencePieceText_SentencePiece(AlignedNoHook, 0);
  }
  return AlignedNoHook;
}

void sub_245C6DFCC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x249544F58](v1, 0x10A1C40E4A317A1);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::Arena::CreateMaybeMessage<sentencepiece::SentencePieceText>(uint64_t a1)
{
  uint64_t AlignedNoHook;

  if (a1)
  {
    if ((*(_BYTE *)(a1 + 24) & 1) != 0)
    AlignedNoHook = google::protobuf::Arena::AllocateAlignedNoHook((google::protobuf::Arena *)a1, 0x58uLL);
    sentencepiece::SentencePieceText::SentencePieceText(AlignedNoHook, a1);
  }
  else
  {
    AlignedNoHook = operator new();
    sentencepiece::SentencePieceText::SentencePieceText(AlignedNoHook, 0);
  }
  return AlignedNoHook;
}

void sub_245C6E080(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x249544F58](v1, 0x10A1C40431D3885);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::Arena::CreateMaybeMessage<sentencepiece::NBestSentencePieceText>(uint64_t a1)
{
  uint64_t AlignedNoHook;

  if (a1)
  {
    if ((*(_BYTE *)(a1 + 24) & 1) != 0)
    AlignedNoHook = google::protobuf::Arena::AllocateAlignedNoHook((google::protobuf::Arena *)a1, 0x30uLL);
    sentencepiece::NBestSentencePieceText::NBestSentencePieceText(AlignedNoHook, a1);
  }
  else
  {
    AlignedNoHook = operator new();
    sentencepiece::NBestSentencePieceText::NBestSentencePieceText(AlignedNoHook, 0);
  }
  return AlignedNoHook;
}

void sub_245C6E134(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x249544F58](v1, 0x10A1C40290C9B23);
  _Unwind_Resume(a1);
}

uint64_t sentencepiece::SentencePieceText_SentencePiece::New(sentencepiece::SentencePieceText_SentencePiece *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<sentencepiece::SentencePieceText_SentencePiece>(0);
}

uint64_t sentencepiece::SentencePieceText_SentencePiece::New(uint64_t a1, uint64_t a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<sentencepiece::SentencePieceText_SentencePiece>(a2);
}

uint64_t sentencepiece::SentencePieceText_SentencePiece::GetCachedSize(sentencepiece::SentencePieceText_SentencePiece *this)
{
  return *((unsigned int *)this + 11);
}

uint64_t google::protobuf::MessageLite::InternalGetTable(google::protobuf::MessageLite *this)
{
  return 0;
}

uint64_t sentencepiece::SentencePieceText::New(sentencepiece::SentencePieceText *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<sentencepiece::SentencePieceText>(0);
}

uint64_t sentencepiece::SentencePieceText::New(uint64_t a1, uint64_t a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<sentencepiece::SentencePieceText>(a2);
}

uint64_t sentencepiece::SentencePieceText::GetCachedSize(sentencepiece::SentencePieceText *this)
{
  return *((unsigned int *)this + 11);
}

uint64_t sentencepiece::NBestSentencePieceText::New(sentencepiece::NBestSentencePieceText *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<sentencepiece::NBestSentencePieceText>(0);
}

uint64_t sentencepiece::NBestSentencePieceText::New(uint64_t a1, uint64_t a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<sentencepiece::NBestSentencePieceText>(a2);
}

uint64_t sentencepiece::NBestSentencePieceText::GetCachedSize(sentencepiece::NBestSentencePieceText *this)
{
  return *((unsigned int *)this + 10);
}

uint64_t google::protobuf::internal::ArenaStringPtr::UnsafeMutablePointer(google::protobuf::internal::ArenaStringPtr *this)
{
  uint64_t result;
  std::string *v3;
  std::string *v4;
  char v5;
  std::string v6[2];

  result = *(_QWORD *)this;
  if ((result & 1) != 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v6, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/arenastring.h", 363);
    v3 = google::protobuf::internal::LogMessage::operator<<(v6, "CHECK failed: !tagged_ptr_.IsTagged(): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v5, (const char **)&v3->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v6[0].__r_.__value_.__l.__data_);
    result = *(_QWORD *)this;
  }
  if (!result)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v6, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/arenastring.h", 364);
    v4 = google::protobuf::internal::LogMessage::operator<<(v6, "CHECK failed: tagged_ptr_.UnsafeGet() != nullptr: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v5, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v6[0].__r_.__value_.__l.__data_);
    return *(_QWORD *)this;
  }
  return result;
}

void sub_245C6E258(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(google::protobuf::internal::EpsCopyInputStream *this, const char **a2, int a3)
{
  unint64_t v6;
  std::string *v7;
  signed int v9;
  std::string *v10;
  char v11;
  char v12;
  std::string v13[2];

  v6 = (unint64_t)*a2;
  if (!*a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 209);
    v7 = google::protobuf::internal::LogMessage::operator<<(v13, "CHECK failed: *ptr: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v12, (const char **)&v7->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v13[0].__r_.__value_.__l.__data_);
    v6 = (unint64_t)*a2;
  }
  if (v6 < *(_QWORD *)this)
    return 0;
  v9 = v6 - *((_DWORD *)this + 2);
  if (v9 >= 17)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 212);
    v10 = google::protobuf::internal::LogMessage::operator<<(v13, "CHECK failed: (overrun) <= (kSlopBytes): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v12, (const char **)&v10->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v13[0].__r_.__value_.__l.__data_);
  }
  if (*((_DWORD *)this + 7) == v9)
  {
    if (v9 >= 1 && !*((_QWORD *)this + 2))
      *a2 = 0;
    return 1;
  }
  else
  {
    *a2 = (const char *)google::protobuf::internal::EpsCopyInputStream::DoneFallback(this, v9, a3);
    return v11 & 1;
  }
}

void sub_245C6E394(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<std::string>(uint64_t *a1)
{
  unint64_t v2;
  uint64_t AlignedAndAddCleanup;

  v2 = *a1 & 0xFFFFFFFFFFFFFFFELL;
  if ((*a1 & 1) != 0)
  {
    v2 = *(_QWORD *)v2;
    if (v2)
      goto LABEL_3;
LABEL_7:
    AlignedAndAddCleanup = operator new();
    goto LABEL_8;
  }
  if (!v2)
    goto LABEL_7;
LABEL_3:
  if ((*(_BYTE *)(v2 + 24) & 1) != 0)
  AlignedAndAddCleanup = (uint64_t)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((google::protobuf::internal::ArenaImpl *)v2, (google::protobuf::internal::SerialArena::Block *)0x20, (void (*)(void *))google::protobuf::internal::arena_destruct_object<google::protobuf::internal::InternalMetadata::Container<std::string>>);
LABEL_8:
  *(_OWORD *)AlignedAndAddCleanup = 0u;
  *(_OWORD *)(AlignedAndAddCleanup + 16) = 0u;
  *a1 = AlignedAndAddCleanup | 1;
  *(_QWORD *)AlignedAndAddCleanup = v2;
  return AlignedAndAddCleanup + 8;
}

void google::protobuf::internal::arena_destruct_object<google::protobuf::internal::InternalMetadata::Container<std::string>>(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText_SentencePiece>::TypeHandler>(uint64_t a1)
{
  uint64_t v1;
  sentencepiece::SentencePieceText_SentencePiece **v3;
  sentencepiece::SentencePieceText_SentencePiece *v4;
  std::string *v5;
  char v6;
  std::string v7[2];

  v1 = *(unsigned int *)(a1 + 8);
  if ((v1 & 0x80000000) != 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1780);
    v5 = google::protobuf::internal::LogMessage::operator<<(v7, "CHECK failed: (n) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v6, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v7[0].__r_.__value_.__l.__data_);
  }
  else if ((_DWORD)v1)
  {
    v3 = (sentencepiece::SentencePieceText_SentencePiece **)(*(_QWORD *)(a1 + 16) + 8);
    do
    {
      v4 = *v3++;
      sentencepiece::SentencePieceText_SentencePiece::Clear(v4);
      --v1;
    }
    while (v1);
    *(_DWORD *)(a1 + 8) = 0;
  }
}

void sub_245C6E500(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText>::TypeHandler>(uint64_t a1)
{
  uint64_t v1;
  sentencepiece::SentencePieceText **v3;
  sentencepiece::SentencePieceText *v4;
  std::string *v5;
  char v6;
  std::string v7[2];

  v1 = *(unsigned int *)(a1 + 8);
  if ((v1 & 0x80000000) != 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1780);
    v5 = google::protobuf::internal::LogMessage::operator<<(v7, "CHECK failed: (n) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v6, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v7[0].__r_.__value_.__l.__data_);
  }
  else if ((_DWORD)v1)
  {
    v3 = (sentencepiece::SentencePieceText **)(*(_QWORD *)(a1 + 16) + 8);
    do
    {
      v4 = *v3++;
      sentencepiece::SentencePieceText::Clear(v4);
      --v1;
    }
    while (v1);
    *(_DWORD *)(a1 + 8) = 0;
  }
}

void sub_245C6E5AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText_SentencePiece>::~RepeatedPtrField(google::protobuf::internal::ArenaImpl **a1)
{
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText_SentencePiece>::TypeHandler>(a1);
  google::protobuf::internal::RepeatedPtrFieldBase::~RepeatedPtrFieldBase(a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText_SentencePiece>::TypeHandler>(_QWORD *a1)
{
  sentencepiece::SentencePieceText_SentencePiece **v2;
  sentencepiece::SentencePieceText_SentencePiece **v3;
  uint64_t v4;

  v2 = (sentencepiece::SentencePieceText_SentencePiece **)a1[2];
  if (v2 && !*a1)
  {
    v3 = v2 + 1;
    v4 = *(unsigned int *)v2;
    if ((int)v4 >= 1)
    {
      do
      {
        if (*v3)
        {
          sentencepiece::SentencePieceText_SentencePiece::~SentencePieceText_SentencePiece(*v3);
          MEMORY[0x249544F58]();
        }
        ++v3;
        --v4;
      }
      while (v4);
      v2 = (sentencepiece::SentencePieceText_SentencePiece **)a1[2];
    }
    operator delete(v2);
  }
  a1[2] = 0;
}

void google::protobuf::internal::RepeatedPtrFieldBase::~RepeatedPtrFieldBase(google::protobuf::internal::ArenaImpl **this)
{
  google::protobuf::internal::ArenaImpl *v1;

  v1 = *this;
  if (v1)
    google::protobuf::internal::ArenaImpl::SpaceAllocated(v1);
}

uint64_t google::protobuf::internal::EpsCopyInputStream::PushLimit(google::protobuf::internal::EpsCopyInputStream *this, const char *a2, unsigned int a3)
{
  int v4;
  std::string *v6;
  uint64_t v7;
  int v8;
  char v10;
  std::string v11[2];

  v4 = (int)a2;
  if (a3 >= 0x7FFFFFF0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 128);
    v6 = google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: limit >= 0 && limit <= INT_MAX - kSlopBytes: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v10, (const char **)&v6->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v11[0].__r_.__value_.__l.__data_);
  }
  v7 = *((_QWORD *)this + 1);
  v8 = v4 - v7 + a3;
  *(_QWORD *)this = v7 + (v8 & (v8 >> 31));
  LODWORD(v7) = *((_DWORD *)this + 7);
  *((_DWORD *)this + 7) = v8;
  return (v7 - v8);
}

void sub_245C6E738(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText_SentencePiece>::TypeHandler>(uint64_t a1, uint64_t a2)
{
  std::string *v4;
  unsigned int v5;
  sentencepiece::SentencePieceText_SentencePiece **v6;
  unsigned int *v7;
  signed int v8;
  signed int *v9;
  char v10;
  std::string v11[2];

  if (a2 == a1)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1799);
    v4 = google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v10, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v11[0].__r_.__value_.__l.__data_);
  }
  v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    v6 = (sentencepiece::SentencePieceText_SentencePiece **)(*(_QWORD *)(a2 + 16) + 8);
    v7 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)a1, v5);
    google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText_SentencePiece>::TypeHandler>((uint64_t *)a1, (sentencepiece::SentencePieceText_SentencePiece **)v7, v6, v5, **(_DWORD **)(a1 + 16) - *(_DWORD *)(a1 + 8));
    v8 = *(_DWORD *)(a1 + 8) + v5;
    *(_DWORD *)(a1 + 8) = v8;
    v9 = *(signed int **)(a1 + 16);
    if (*v9 < v8)
      *v9 = v8;
  }
}

void sub_245C6E824(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText_SentencePiece>::TypeHandler>(uint64_t *a1, sentencepiece::SentencePieceText_SentencePiece **a2, sentencepiece::SentencePieceText_SentencePiece **a3, unsigned int a4, unsigned int a5)
{
  uint64_t v10;
  sentencepiece::SentencePieceText_SentencePiece **v11;
  sentencepiece::SentencePieceText_SentencePiece **v12;
  sentencepiece::SentencePieceText_SentencePiece *v13;
  sentencepiece::SentencePieceText_SentencePiece *v14;
  sentencepiece::SentencePieceText_SentencePiece *v15;
  BOOL v16;
  int v17;
  uint64_t v18;
  sentencepiece::SentencePieceText_SentencePiece **v19;
  sentencepiece::SentencePieceText_SentencePiece **v20;
  sentencepiece::SentencePieceText_SentencePiece *v21;
  sentencepiece::SentencePieceText_SentencePiece *v22;

  if ((int)a5 >= (int)a4)
    v10 = a4;
  else
    v10 = a5;
  if ((int)v10 >= 1)
  {
    v11 = a3;
    v12 = a2;
    do
    {
      v14 = *v11++;
      v13 = v14;
      v15 = *v12++;
      google::protobuf::internal::GenericTypeHandler<sentencepiece::SentencePieceText_SentencePiece>::Merge(v13, v15);
      --v10;
    }
    while (v10);
  }
  v16 = __OFSUB__(a4, a5);
  v17 = a4 - a5;
  if (!((v17 < 0) ^ v16 | (v17 == 0)))
  {
    v18 = *a1;
    v19 = &a3[a5];
    v20 = &a2[a5];
    do
    {
      v21 = *v19++;
      v22 = (sentencepiece::SentencePieceText_SentencePiece *)google::protobuf::Arena::CreateMaybeMessage<sentencepiece::SentencePieceText_SentencePiece>(v18);
      google::protobuf::internal::GenericTypeHandler<sentencepiece::SentencePieceText_SentencePiece>::Merge(v21, v22);
      *v20++ = v22;
      --v17;
    }
    while (v17);
  }
}

void google::protobuf::internal::GenericTypeHandler<sentencepiece::SentencePieceText_SentencePiece>::Merge(sentencepiece::SentencePieceText_SentencePiece *a1, sentencepiece::SentencePieceText_SentencePiece *this)
{
  sentencepiece::SentencePieceText_SentencePiece::MergeFrom(this, a1);
}

void google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText>::~RepeatedPtrField(google::protobuf::internal::ArenaImpl **a1)
{
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText>::TypeHandler>(a1);
  google::protobuf::internal::RepeatedPtrFieldBase::~RepeatedPtrFieldBase(a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText>::TypeHandler>(_QWORD *a1)
{
  sentencepiece::SentencePieceText **v2;
  sentencepiece::SentencePieceText **v3;
  uint64_t v4;

  v2 = (sentencepiece::SentencePieceText **)a1[2];
  if (v2 && !*a1)
  {
    v3 = v2 + 1;
    v4 = *(unsigned int *)v2;
    if ((int)v4 >= 1)
    {
      do
      {
        if (*v3)
        {
          sentencepiece::SentencePieceText::~SentencePieceText(*v3);
          MEMORY[0x249544F58]();
        }
        ++v3;
        --v4;
      }
      while (v4);
      v2 = (sentencepiece::SentencePieceText **)a1[2];
    }
    operator delete(v2);
  }
  a1[2] = 0;
}

void google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText>::TypeHandler>(uint64_t a1, uint64_t a2)
{
  std::string *v4;
  unsigned int v5;
  sentencepiece::SentencePieceText **v6;
  unsigned int *v7;
  signed int v8;
  signed int *v9;
  char v10;
  std::string v11[2];

  if (a2 == a1)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1799);
    v4 = google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v10, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v11[0].__r_.__value_.__l.__data_);
  }
  v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    v6 = (sentencepiece::SentencePieceText **)(*(_QWORD *)(a2 + 16) + 8);
    v7 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)a1, v5);
    google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText>::TypeHandler>((uint64_t *)a1, (sentencepiece::SentencePieceText **)v7, v6, v5, **(_DWORD **)(a1 + 16) - *(_DWORD *)(a1 + 8));
    v8 = *(_DWORD *)(a1 + 8) + v5;
    *(_DWORD *)(a1 + 8) = v8;
    v9 = *(signed int **)(a1 + 16);
    if (*v9 < v8)
      *v9 = v8;
  }
}

void sub_245C6EA70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<sentencepiece::SentencePieceText>::TypeHandler>(uint64_t *a1, sentencepiece::SentencePieceText **a2, sentencepiece::SentencePieceText **a3, unsigned int a4, unsigned int a5)
{
  uint64_t v10;
  sentencepiece::SentencePieceText **v11;
  sentencepiece::SentencePieceText **v12;
  sentencepiece::SentencePieceText *v13;
  sentencepiece::SentencePieceText *v14;
  sentencepiece::SentencePieceText *v15;
  BOOL v16;
  int v17;
  uint64_t v18;
  sentencepiece::SentencePieceText **v19;
  sentencepiece::SentencePieceText **v20;
  sentencepiece::SentencePieceText *v21;
  sentencepiece::SentencePieceText *v22;

  if ((int)a5 >= (int)a4)
    v10 = a4;
  else
    v10 = a5;
  if ((int)v10 >= 1)
  {
    v11 = a3;
    v12 = a2;
    do
    {
      v14 = *v11++;
      v13 = v14;
      v15 = *v12++;
      google::protobuf::internal::GenericTypeHandler<sentencepiece::SentencePieceText>::Merge(v13, v15);
      --v10;
    }
    while (v10);
  }
  v16 = __OFSUB__(a4, a5);
  v17 = a4 - a5;
  if (!((v17 < 0) ^ v16 | (v17 == 0)))
  {
    v18 = *a1;
    v19 = &a3[a5];
    v20 = &a2[a5];
    do
    {
      v21 = *v19++;
      v22 = (sentencepiece::SentencePieceText *)google::protobuf::Arena::CreateMaybeMessage<sentencepiece::SentencePieceText>(v18);
      google::protobuf::internal::GenericTypeHandler<sentencepiece::SentencePieceText>::Merge(v21, v22);
      *v20++ = v22;
      --v17;
    }
    while (v17);
  }
}

void google::protobuf::internal::GenericTypeHandler<sentencepiece::SentencePieceText>::Merge(sentencepiece::SentencePieceText *a1, sentencepiece::SentencePieceText *this)
{
  sentencepiece::SentencePieceText::MergeFrom(this, a1);
}

void OUTLINED_FUNCTION_0_3(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 94, a4);
}

void sentencepiece::SentencePieceText_SentencePiece::CheckTypeAndMergeFrom(uint64_t a1, uint64_t a2, uint64_t a3)
{
  OUTLINED_FUNCTION_0_3("down_cast", "casts.h", a3, "f == nullptr || dynamic_cast<To>(f) != nullptr");
}

void InitDefaultsscc_info_ModelProto_sentencepiece_5fmodel_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DFD70, (google::protobuf::internal *)0x2DFD70, "/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", a4);
  sentencepiece::ModelProto::ModelProto((uint64_t)&sentencepiece::_ModelProto_default_instance_, 0);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&sentencepiece::_ModelProto_default_instance_, v4);
}

void InitDefaultsscc_info_ModelProto_SentencePiece_sentencepiece_5fmodel_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DFD70, (google::protobuf::internal *)0x2DFD70, "/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", a4);
  sentencepiece::ModelProto_SentencePiece::ModelProto_SentencePiece(sentencepiece::_ModelProto_SentencePiece_default_instance_, 0);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))sentencepiece::_ModelProto_SentencePiece_default_instance_, v4);
}

void InitDefaultsscc_info_NormalizerSpec_sentencepiece_5fmodel_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DFD70, (google::protobuf::internal *)0x2DFD70, "/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", a4);
  sentencepiece::NormalizerSpec::NormalizerSpec((uint64_t)&sentencepiece::_NormalizerSpec_default_instance_, 0);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&sentencepiece::_NormalizerSpec_default_instance_, v4);
}

void InitDefaultsscc_info_SelfTestData_sentencepiece_5fmodel_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DFD70, (google::protobuf::internal *)0x2DFD70, "/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", a4);
  sentencepiece::SelfTestData::SelfTestData((uint64_t)&sentencepiece::_SelfTestData_default_instance_, 0);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&sentencepiece::_SelfTestData_default_instance_, v4);
}

void InitDefaultsscc_info_SelfTestData_Sample_sentencepiece_5fmodel_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DFD70, (google::protobuf::internal *)0x2DFD70, "/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", a4);
  sentencepiece::_SelfTestData_Sample_default_instance_ = (uint64_t)&off_2516E2998;
  *(_QWORD *)algn_2575183B8 = 0;
  qword_2575183C0 = 0;
  if (atomic_load(scc_info_SelfTestData_Sample_sentencepiece_5fmodel_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_SelfTestData_Sample_sentencepiece_5fmodel_2eproto);
  qword_2575183C8 = (uint64_t)&google::protobuf::internal::fixed_address_empty_string;
  unk_2575183D0 = &google::protobuf::internal::fixed_address_empty_string;
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&sentencepiece::_SelfTestData_Sample_default_instance_, v4);
}

void InitDefaultsscc_info_TrainerSpec_sentencepiece_5fmodel_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  const void *v4;

  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DFD70, (google::protobuf::internal *)0x2DFD70, "/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", a4);
  sentencepiece::TrainerSpec::TrainerSpec((uint64_t)&sentencepiece::_TrainerSpec_default_instance_, 0);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&sentencepiece::_TrainerSpec_default_instance_, v4);
}

BOOL sentencepiece::ModelProto_SentencePiece_Type_IsValid(sentencepiece *this)
{
  return ((_DWORD)this - 1) < 6;
}

uint64_t sentencepiece::TrainerSpec::TrainerSpec(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = &off_2516E2648;
  *(_QWORD *)(a1 + 8) = a2;
  google::protobuf::internal::ExtensionSet::ExtensionSet(a1 + 16, a2);
  *(_QWORD *)(a1 + 128) = a2;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 56) = a2;
  *(_DWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = a2;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = a2;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  if (atomic_load(scc_info_TrainerSpec_sentencepiece_5fmodel_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_TrainerSpec_sentencepiece_5fmodel_2eproto);
  *(_QWORD *)(a1 + 152) = &google::protobuf::internal::fixed_address_empty_string;
  *(_QWORD *)(a1 + 160) = &google::protobuf::internal::fixed_address_empty_string;
  *(_QWORD *)(a1 + 168) = &google::protobuf::internal::fixed_address_empty_string;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 216) = &google::protobuf::internal::fixed_address_empty_string;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_QWORD *)(a1 + 272) = 0x1F4000000001;
  *(_QWORD *)(a1 + 280) = 0xF42403F7FDF3BLL;
  *(_DWORD *)(a1 + 288) = 1061158912;
  *(_OWORD *)(a1 + 292) = xmmword_245C953F0;
  *(_DWORD *)(a1 + 308) = 16843009;
  *(_WORD *)(a1 + 312) = 257;
  *(_DWORD *)(a1 + 316) = 1;
  *(_QWORD *)(a1 + 320) = 0xFFFFFFFF00000002;
  return a1;
}

void sub_245C6EED0(_Unwind_Exception *a1)
{
  google::protobuf::internal::ExtensionSet *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  google::protobuf::RepeatedPtrField<std::string>::~RepeatedPtrField(v3);
  google::protobuf::RepeatedPtrField<std::string>::~RepeatedPtrField(v5);
  google::protobuf::RepeatedPtrField<std::string>::~RepeatedPtrField(v4);
  google::protobuf::RepeatedPtrField<std::string>::~RepeatedPtrField(v2);
  google::protobuf::internal::ExtensionSet::~ExtensionSet(v1);
  _Unwind_Resume(a1);
}

void sentencepiece::TrainerSpec::~TrainerSpec(sentencepiece::TrainerSpec *this)
{
  sentencepiece::TrainerSpec::SharedDtor(this);
  google::protobuf::internal::InternalMetadata::Delete<std::string>((uint64_t *)this + 1);
  google::protobuf::RepeatedPtrField<std::string>::~RepeatedPtrField((char *)this + 128);
  google::protobuf::RepeatedPtrField<std::string>::~RepeatedPtrField((char *)this + 104);
  google::protobuf::RepeatedPtrField<std::string>::~RepeatedPtrField((char *)this + 80);
  google::protobuf::RepeatedPtrField<std::string>::~RepeatedPtrField((char *)this + 56);
  google::protobuf::internal::ExtensionSet::~ExtensionSet((sentencepiece::TrainerSpec *)((char *)this + 16));
}

{
  sentencepiece::TrainerSpec::~TrainerSpec(this);
  JUMPOUT(0x249544F58);
}

google::protobuf::internal::ArenaStringPtr *sentencepiece::TrainerSpec::SharedDtor(sentencepiece::TrainerSpec *this)
{
  uint64_t v2;
  _QWORD *v3;
  std::string *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  google::protobuf::internal::ArenaStringPtr *result;
  uint64_t v20;
  uint64_t v21;
  google::protobuf::internal::ArenaStringPtr *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  std::string v27[2];

  v2 = *((_QWORD *)this + 1);
  v3 = (_QWORD *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  if ((v2 & 1) == 0)
  {
    if (!v3)
      goto LABEL_4;
    goto LABEL_3;
  }
  if (*v3)
  {
LABEL_3:
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v27, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 519);
    v4 = google::protobuf::internal::LogMessage::operator<<(v27, "CHECK failed: GetArena() == nullptr: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v26, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v27[0].__r_.__value_.__l.__data_);
  }
LABEL_4:
  if (*((uint64_t **)this + 19) != &google::protobuf::internal::fixed_address_empty_string)
  {
    v5 = google::protobuf::internal::ArenaStringPtr::UnsafeMutablePointer((sentencepiece::TrainerSpec *)((char *)this + 152));
    v6 = v5;
    if (*(char *)(v5 + 23) < 0)
      operator delete(*(void **)v5);
    MEMORY[0x249544F58](v6, 0x1012C40EC159624);
  }
  if (*((uint64_t **)this + 20) != &google::protobuf::internal::fixed_address_empty_string)
  {
    v7 = google::protobuf::internal::ArenaStringPtr::UnsafeMutablePointer((sentencepiece::TrainerSpec *)((char *)this + 160));
    v8 = v7;
    if (*(char *)(v7 + 23) < 0)
      operator delete(*(void **)v7);
    MEMORY[0x249544F58](v8, 0x1012C40EC159624);
  }
  if (*((uint64_t **)this + 21) != &google::protobuf::internal::fixed_address_empty_string)
  {
    v9 = google::protobuf::internal::ArenaStringPtr::UnsafeMutablePointer((sentencepiece::TrainerSpec *)((char *)this + 168));
    v10 = v9;
    if (*(char *)(v9 + 23) < 0)
      operator delete(*(void **)v9);
    MEMORY[0x249544F58](v10, 0x1012C40EC159624);
  }
  if (*((_QWORD *)this + 22))
  {
    v11 = google::protobuf::internal::ArenaStringPtr::UnsafeMutablePointer((sentencepiece::TrainerSpec *)((char *)this + 176));
    v12 = v11;
    if (*(char *)(v11 + 23) < 0)
      operator delete(*(void **)v11);
    MEMORY[0x249544F58](v12, 0x1012C40EC159624);
  }
  if (*((_QWORD *)this + 23))
  {
    v13 = google::protobuf::internal::ArenaStringPtr::UnsafeMutablePointer((sentencepiece::TrainerSpec *)((char *)this + 184));
    v14 = v13;
    if (*(char *)(v13 + 23) < 0)
      operator delete(*(void **)v13);
    MEMORY[0x249544F58](v14, 0x1012C40EC159624);
  }
  if (*((_QWORD *)this + 24))
  {
    v15 = google::protobuf::internal::ArenaStringPtr::UnsafeMutablePointer((sentencepiece::TrainerSpec *)((char *)this + 192));
    v16 = v15;
    if (*(char *)(v15 + 23) < 0)
      operator delete(*(void **)v15);
    MEMORY[0x249544F58](v16, 0x1012C40EC159624);
  }
  if (*((_QWORD *)this + 25))
  {
    v17 = google::protobuf::internal::ArenaStringPtr::UnsafeMutablePointer((sentencepiece::TrainerSpec *)((char *)this + 200));
    v18 = v17;
    if (*(char *)(v17 + 23) < 0)
      operator delete(*(void **)v17);
    MEMORY[0x249544F58](v18, 0x1012C40EC159624);
  }
  result = (sentencepiece::TrainerSpec *)((char *)this + 208);
  if (*((_QWORD *)this + 26))
  {
    v20 = google::protobuf::internal::ArenaStringPtr::UnsafeMutablePointer(result);
    v21 = v20;
    if (*(char *)(v20 + 23) < 0)
      operator delete(*(void **)v20);
    result = (google::protobuf::internal::ArenaStringPtr *)MEMORY[0x249544F58](v21, 0x1012C40EC159624);
  }
  v23 = (uint64_t *)*((_QWORD *)this + 27);
  v22 = (sentencepiece::TrainerSpec *)((char *)this + 216);
  if (v23 != &google::protobuf::internal::fixed_address_empty_string)
  {
    v24 = google::protobuf::internal::ArenaStringPtr::UnsafeMutablePointer(v22);
    v25 = v24;
    if (*(char *)(v24 + 23) < 0)
      operator delete(*(void **)v24);
    return (google::protobuf::internal::ArenaStringPtr *)MEMORY[0x249544F58](v25, 0x1012C40EC159624);
  }
  return result;
}

void sub_245C6F214(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sentencepiece::TrainerSpec::Clear(sentencepiece::TrainerSpec *this)
{
  unsigned int v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;

  google::protobuf::internal::ExtensionSet::Clear((sentencepiece::TrainerSpec *)((char *)this + 16));
  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 56);
  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 80);
  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 104);
  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 128);
  v2 = *((_DWORD *)this + 10);
  if (!(_BYTE)v2)
    goto LABEL_10;
  if ((v2 & 1) != 0)
  {
    v3 = *((_QWORD *)this + 19) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v3 + 23) < 0)
    {
      **(_BYTE **)v3 = 0;
      *(_QWORD *)(v3 + 8) = 0;
      if ((v2 & 2) != 0)
        goto LABEL_16;
    }
    else
    {
      *(_BYTE *)v3 = 0;
      *(_BYTE *)(v3 + 23) = 0;
      if ((v2 & 2) != 0)
        goto LABEL_16;
    }
LABEL_4:
    if ((v2 & 4) == 0)
      goto LABEL_5;
LABEL_20:
    v5 = *((_QWORD *)this + 21) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v5 + 23) < 0)
    {
      **(_BYTE **)v5 = 0;
      *(_QWORD *)(v5 + 8) = 0;
      if ((v2 & 8) != 0)
        goto LABEL_24;
    }
    else
    {
      *(_BYTE *)v5 = 0;
      *(_BYTE *)(v5 + 23) = 0;
      if ((v2 & 8) != 0)
        goto LABEL_24;
    }
LABEL_6:
    if ((v2 & 0x10) == 0)
      goto LABEL_7;
    goto LABEL_25;
  }
  if ((v2 & 2) == 0)
    goto LABEL_4;
LABEL_16:
  v4 = *((_QWORD *)this + 20) & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v4 + 23) < 0)
  {
    **(_BYTE **)v4 = 0;
    *(_QWORD *)(v4 + 8) = 0;
    if ((v2 & 4) != 0)
      goto LABEL_20;
  }
  else
  {
    *(_BYTE *)v4 = 0;
    *(_BYTE *)(v4 + 23) = 0;
    if ((v2 & 4) != 0)
      goto LABEL_20;
  }
LABEL_5:
  if ((v2 & 8) == 0)
    goto LABEL_6;
LABEL_24:
  google::protobuf::internal::ArenaStringPtr::ClearToDefault((std::string *)((char *)this + 176), (unint64_t *)&sentencepiece::TrainerSpec::_i_give_permission_to_break_this_code_default_unk_surface_);
  if ((v2 & 0x10) == 0)
  {
LABEL_7:
    if ((v2 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_26;
  }
LABEL_25:
  google::protobuf::internal::ArenaStringPtr::ClearToDefault((std::string *)((char *)this + 184), (unint64_t *)&sentencepiece::TrainerSpec::_i_give_permission_to_break_this_code_default_unk_piece_);
  if ((v2 & 0x20) == 0)
  {
LABEL_8:
    if ((v2 & 0x40) == 0)
      goto LABEL_9;
    goto LABEL_27;
  }
LABEL_26:
  google::protobuf::internal::ArenaStringPtr::ClearToDefault((std::string *)this + 8, (unint64_t *)&sentencepiece::TrainerSpec::_i_give_permission_to_break_this_code_default_bos_piece_);
  if ((v2 & 0x40) != 0)
  {
LABEL_27:
    google::protobuf::internal::ArenaStringPtr::ClearToDefault((std::string *)((char *)this + 200), (unint64_t *)&sentencepiece::TrainerSpec::_i_give_permission_to_break_this_code_default_eos_piece_);
    if ((v2 & 0x80) != 0)
      goto LABEL_28;
LABEL_10:
    if ((v2 & 0x100) == 0)
      goto LABEL_32;
    goto LABEL_29;
  }
LABEL_9:
  if ((v2 & 0x80) == 0)
    goto LABEL_10;
LABEL_28:
  google::protobuf::internal::ArenaStringPtr::ClearToDefault((std::string *)((char *)this + 208), (unint64_t *)&sentencepiece::TrainerSpec::_i_give_permission_to_break_this_code_default_pad_piece_);
  if ((v2 & 0x100) == 0)
    goto LABEL_32;
LABEL_29:
  v6 = *((_QWORD *)this + 27) & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v6 + 23) < 0)
  {
    **(_BYTE **)v6 = 0;
    *(_QWORD *)(v6 + 8) = 0;
  }
  else
  {
    *(_BYTE *)v6 = 0;
    *(_BYTE *)(v6 + 23) = 0;
  }
LABEL_32:
  if ((v2 & 0xFE00) != 0)
  {
    *((_QWORD *)this + 28) = 0;
    *((_QWORD *)this + 29) = 0;
    *(_QWORD *)((char *)this + 239) = 0;
  }
  if ((v2 & 0xFF0000) != 0)
  {
    *(_QWORD *)((char *)this + 247) = 0;
    *((_BYTE *)this + 271) = 0;
    *(_QWORD *)((char *)this + 255) = 0;
    *(_QWORD *)((char *)this + 263) = 0;
    *((_DWORD *)this + 68) = 1;
  }
  if (HIBYTE(v2))
  {
    *(_QWORD *)((char *)this + 276) = 0x3F7FDF3B00001F40;
    *(_QWORD *)((char *)this + 284) = 0x3F400000000F4240;
    *(_OWORD *)((char *)this + 292) = xmmword_245C953F0;
  }
  if (*((_BYTE *)this + 44))
  {
    *((_WORD *)this + 156) = 257;
    *((_DWORD *)this + 77) = 16843009;
    *(_QWORD *)((char *)this + 316) = 0x200000001;
  }
  *((_DWORD *)this + 81) = -1;
  *((_QWORD *)this + 5) = 0;
  v7 = *((_QWORD *)this + 1);
  if ((v7 & 1) != 0)
  {
    v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v8 + 31) < 0)
    {
      **(_BYTE **)(v8 + 8) = 0;
      *(_QWORD *)(v8 + 16) = 0;
    }
    else
    {
      *(_BYTE *)(v8 + 8) = 0;
      *(_BYTE *)(v8 + 31) = 0;
    }
  }
}

google::protobuf::internal *sentencepiece::TrainerSpec::_InternalParse(sentencepiece::TrainerSpec *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  char v5;
  google::protobuf::internal *result;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  google::protobuf::internal *v11;
  unsigned int v12;
  unsigned int v13;
  std::string::value_type *v14;
  int *v15;
  uint64_t v16;
  int v17;
  std::string *AlignedAndAddCleanup;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  google::protobuf::internal::ArenaImpl *v24;
  uint64_t **v25;
  google::protobuf::internal *v26;
  unint64_t v27;
  int v28;
  int v29;
  unint64_t v30;
  google::protobuf::internal *v31;
  int v32;
  std::string::value_type *v33;
  int *v34;
  uint64_t v35;
  int v36;
  std::string *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  google::protobuf::internal *v42;
  int v43;
  uint64_t v44;
  google::protobuf::internal *v45;
  int v46;
  google::protobuf::internal *v47;
  unint64_t v48;
  int v49;
  unint64_t v50;
  google::protobuf::internal *v51;
  int v52;
  unint64_t v53;
  google::protobuf::internal *v54;
  int v55;
  unint64_t v56;
  google::protobuf::internal *v57;
  int v58;
  int v59;
  unint64_t v60;
  google::protobuf::internal *v61;
  int v62;
  unint64_t v63;
  google::protobuf::internal *v64;
  int v65;
  unint64_t v66;
  google::protobuf::internal *v67;
  int v68;
  google::protobuf::internal *v69;
  unint64_t v70;
  int v71;
  unint64_t v72;
  google::protobuf::internal *v73;
  int v74;
  google::protobuf::internal *v75;
  unint64_t v76;
  int v77;
  google::protobuf::internal *v78;
  unint64_t v79;
  int v80;
  google::protobuf::internal *v81;
  unint64_t v82;
  int v83;
  google::protobuf::internal *v84;
  unint64_t v85;
  int v86;
  google::protobuf::internal *v87;
  unint64_t v88;
  int v89;
  google::protobuf::internal *v90;
  unint64_t v91;
  int v92;
  std::string::value_type *v93;
  int *v94;
  uint64_t v95;
  int v96;
  std::string *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  std::string::value_type *v101;
  int *v102;
  uint64_t v103;
  int v104;
  std::string *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  google::protobuf::internal *v109;
  unint64_t v110;
  int v111;
  google::protobuf::internal *v112;
  unint64_t v113;
  int v114;
  google::protobuf::internal *v115;
  unint64_t v116;
  int v117;
  google::protobuf::internal *v118;
  unint64_t v119;
  int v120;
  uint64_t v121;
  unint64_t v122;
  google::protobuf::internal *v123;
  int v124;
  unint64_t v125;
  google::protobuf::internal *v126;
  int v127;
  unint64_t v128;
  google::protobuf::internal *v129;
  int v130;
  unint64_t v131;
  google::protobuf::internal *v132;
  int v133;
  uint64_t v134;
  google::protobuf::Arena *v135;
  char **v136;
  google::protobuf::internal::ArenaStringPtr *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  google::protobuf::internal *v141;
  unint64_t v142;
  int v143;
  google::protobuf::internal *v144;
  unint64_t v145;
  int v146;
  int v147;
  google::protobuf::internal *v148;
  unint64_t v149;
  int v150;
  uint64_t v151;
  std::string *v152;
  uint64_t v153;
  int v154;
  BOOL v155;
  std::string *v156;
  unint64_t v157;
  int v158;
  int v159;
  uint64_t v160;
  int v161;
  int v162;
  int v163;
  int v164;
  int v165;
  int v166;
  uint64_t v167;
  int v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  int v179;
  int v180;
  int v181;
  int v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  std::string *v186;
  uint64_t *v187;
  google::protobuf::internal *v188;

  v188 = a2;
  v5 = google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v188, *((_DWORD *)a3 + 23));
  result = v188;
  if ((v5 & 1) != 0)
    return result;
  v187 = (uint64_t *)((char *)this + 8);
  v7 = (uint64_t *)((char *)this + 128);
  v8 = (uint64_t *)((char *)this + 104);
  v9 = (uint64_t *)((char *)this + 80);
  v10 = (uint64_t *)((char *)this + 56);
  while (2)
  {
    v11 = (google::protobuf::internal *)((char *)result + 1);
    v12 = *(unsigned __int8 *)result;
    if ((*(char *)result & 0x80000000) == 0)
      goto LABEL_7;
    v13 = v12 + (*(unsigned __int8 *)v11 << 7);
    v12 = v13 - 128;
    if ((*(char *)v11 & 0x80000000) == 0)
    {
      v11 = (google::protobuf::internal *)((char *)result + 2);
LABEL_7:
      v188 = v11;
      goto LABEL_8;
    }
    result = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(result, (const char *)(v13 - 128));
    v188 = result;
    if (!result)
      return result;
    v11 = result;
    v12 = v22;
LABEL_8:
    switch(v12 >> 3)
    {
      case 1u:
        if (v12 != 10)
          goto LABEL_279;
        result = (google::protobuf::internal *)((char *)v11 - 1);
        while (2)
        {
          v14 = (char *)result + 1;
          v188 = (google::protobuf::internal *)((char *)result + 1);
          v15 = (int *)*((_QWORD *)this + 9);
          if (!v15)
          {
            v17 = *((_DWORD *)this + 17);
LABEL_16:
            google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)this + 14, v17 + 1);
            v15 = (int *)*((_QWORD *)this + 9);
            v17 = *v15;
            goto LABEL_17;
          }
          v16 = *((int *)this + 16);
          v17 = *v15;
          if ((int)v16 < *v15)
          {
            *((_DWORD *)this + 16) = v16 + 1;
            AlignedAndAddCleanup = *(std::string **)&v15[2 * v16 + 2];
            goto LABEL_23;
          }
          if (v17 == *((_DWORD *)this + 17))
            goto LABEL_16;
LABEL_17:
          *v15 = v17 + 1;
          v19 = *v10;
          if (*v10)
          {
            if ((*(_BYTE *)(v19 + 24) & 1) != 0)
            AlignedAndAddCleanup = (std::string *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((google::protobuf::internal::ArenaImpl *)v19, (google::protobuf::internal::SerialArena::Block *)0x18, (void (*)(void *))google::protobuf::internal::arena_destruct_object<std::string>);
          }
          else
          {
            AlignedAndAddCleanup = (std::string *)operator new();
          }
          AlignedAndAddCleanup->__r_.__value_.__r.__words[0] = 0;
          AlignedAndAddCleanup->__r_.__value_.__l.__size_ = 0;
          AlignedAndAddCleanup->__r_.__value_.__r.__words[2] = 0;
          v20 = *((_QWORD *)this + 9);
          v21 = *((int *)this + 16);
          *((_DWORD *)this + 16) = v21 + 1;
          *(_QWORD *)(v20 + 8 * v21 + 8) = AlignedAndAddCleanup;
          v14 = (std::string::value_type *)v188;
LABEL_23:
          result = (google::protobuf::internal *)google::protobuf::internal::InlineGreedyStringParser(AlignedAndAddCleanup, v14, (uint64_t)a3);
          v188 = result;
          if (result)
          {
            if (*(_QWORD *)a3 <= (unint64_t)result || *(_BYTE *)result != 10)
              goto LABEL_277;
            continue;
          }
          return result;
        }
      case 2u:
        if (v12 != 18)
          goto LABEL_279;
        *((_DWORD *)this + 10) |= 1u;
        v23 = *((_QWORD *)this + 1);
        v24 = (google::protobuf::internal::ArenaImpl *)(v23 & 0xFFFFFFFFFFFFFFFELL);
        if ((v23 & 1) != 0)
          v24 = *(google::protobuf::internal::ArenaImpl **)v24;
        v25 = (uint64_t **)((char *)this + 152);
        goto LABEL_269;
      case 3u:
        if (v12 != 24)
          goto LABEL_279;
        v26 = (google::protobuf::internal *)((char *)v11 + 1);
        v27 = *(unsigned __int8 *)v11;
        if ((*(char *)v11 & 0x80000000) == 0)
          goto LABEL_37;
        v28 = *(char *)v26;
        v29 = v27 + (v28 << 7);
        v27 = (v29 - 128);
        if (v28 < 0)
        {
          result = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(v11, (v29 - 128));
          v188 = result;
          if (!result)
            return result;
          v27 = v157;
        }
        else
        {
          v26 = (google::protobuf::internal *)((char *)v11 + 2);
LABEL_37:
          v188 = v26;
        }
        if ((v27 - 1) > 3)
        {
          if ((*v187 & 1) != 0)
            v186 = (std::string *)((*v187 & 0xFFFFFFFFFFFFFFFELL) + 8);
          else
            v186 = (std::string *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<std::string>(v187);
          google::protobuf::internal::WriteVarint(3, v27, v186);
        }
        else
        {
          *((_DWORD *)this + 10) |= 0x800000u;
          *((_DWORD *)this + 68) = v27;
        }
        goto LABEL_277;
      case 4u:
        if (v12 != 32)
          goto LABEL_279;
        *((_DWORD *)this + 10) |= 0x1000000u;
        v31 = (google::protobuf::internal *)((char *)v11 + 1);
        LODWORD(v30) = *(unsigned __int8 *)v11;
        if ((v30 & 0x80) == 0)
          goto LABEL_44;
        v32 = *(char *)v31;
        v30 = v30 + (v32 << 7) - 128;
        if (v32 < 0)
        {
          result = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(v11, v30);
          v188 = result;
          *((_DWORD *)this + 69) = v158;
          if (!result)
            return result;
        }
        else
        {
          v31 = (google::protobuf::internal *)((char *)v11 + 2);
LABEL_44:
          v188 = v31;
          *((_DWORD *)this + 69) = v30;
        }
        goto LABEL_277;
      case 5u:
        if (v12 != 42)
          goto LABEL_279;
        result = (google::protobuf::internal *)((char *)v11 - 1);
        while (1)
        {
          v33 = (char *)result + 1;
          v188 = (google::protobuf::internal *)((char *)result + 1);
          v34 = (int *)*((_QWORD *)this + 12);
          if (!v34)
            break;
          v35 = *((int *)this + 22);
          v36 = *v34;
          if ((int)v35 >= *v34)
          {
            if (v36 == *((_DWORD *)this + 23))
            {
LABEL_52:
              google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)this + 20, v36 + 1);
              v34 = (int *)*((_QWORD *)this + 12);
              v36 = *v34;
            }
            *v34 = v36 + 1;
            v38 = *v9;
            if (*v9)
            {
              if ((*(_BYTE *)(v38 + 24) & 1) != 0)
              v37 = (std::string *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((google::protobuf::internal::ArenaImpl *)v38, (google::protobuf::internal::SerialArena::Block *)0x18, (void (*)(void *))google::protobuf::internal::arena_destruct_object<std::string>);
            }
            else
            {
              v37 = (std::string *)operator new();
            }
            v37->__r_.__value_.__r.__words[0] = 0;
            v37->__r_.__value_.__l.__size_ = 0;
            v37->__r_.__value_.__r.__words[2] = 0;
            v39 = *((_QWORD *)this + 12);
            v40 = *((int *)this + 22);
            *((_DWORD *)this + 22) = v40 + 1;
            *(_QWORD *)(v39 + 8 * v40 + 8) = v37;
            v33 = (std::string::value_type *)v188;
            goto LABEL_59;
          }
          *((_DWORD *)this + 22) = v35 + 1;
          v37 = *(std::string **)&v34[2 * v35 + 2];
LABEL_59:
          result = (google::protobuf::internal *)google::protobuf::internal::InlineGreedyStringParser(v37, v33, (uint64_t)a3);
          v188 = result;
          if (!result)
            return result;
          if (*(_QWORD *)a3 <= (unint64_t)result || *(_BYTE *)result != 42)
            goto LABEL_277;
        }
        v36 = *((_DWORD *)this + 23);
        goto LABEL_52;
      case 6u:
        if (v12 != 48)
          goto LABEL_279;
        *((_DWORD *)this + 10) |= 0x200u;
        v42 = (google::protobuf::internal *)((char *)v11 + 1);
        LODWORD(v41) = *(unsigned __int8 *)v11;
        if ((v41 & 0x80) == 0)
          goto LABEL_67;
        v43 = *(char *)v42;
        v41 = v41 + (v43 << 7) - 128;
        if (v43 < 0)
        {
          result = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(v11, v41);
          v188 = result;
          *((_DWORD *)this + 56) = v159;
          if (!result)
            return result;
        }
        else
        {
          v42 = (google::protobuf::internal *)((char *)v11 + 2);
LABEL_67:
          v188 = v42;
          *((_DWORD *)this + 56) = v41;
        }
        goto LABEL_277;
      case 7u:
        if (v12 != 58)
          goto LABEL_279;
        *((_DWORD *)this + 10) |= 2u;
        v44 = *((_QWORD *)this + 1);
        v24 = (google::protobuf::internal::ArenaImpl *)(v44 & 0xFFFFFFFFFFFFFFFELL);
        if ((v44 & 1) != 0)
          v24 = *(google::protobuf::internal::ArenaImpl **)v24;
        v25 = (uint64_t **)((char *)this + 160);
        goto LABEL_269;
      case 0xAu:
        if (v12 != 85)
          goto LABEL_279;
        *((_DWORD *)this + 10) |= 0x2000000u;
        v46 = *(_DWORD *)v11;
        v45 = (google::protobuf::internal *)((char *)v11 + 4);
        *((_DWORD *)this + 70) = v46;
        goto LABEL_259;
      case 0xBu:
        if (v12 != 88)
          goto LABEL_279;
        *((_DWORD *)this + 10) |= 0x800u;
        v47 = (google::protobuf::internal *)((char *)v11 + 1);
        v48 = *(unsigned __int8 *)v11;
        if ((*(char *)v11 & 0x80000000) == 0)
          goto LABEL_78;
        v49 = *(char *)v47;
        v48 = v48 + (v49 << 7) - 128;
        if (v49 < 0)
        {
          result = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(v11, v48);
          v188 = result;
          *((_QWORD *)this + 29) = v160;
          if (!result)
            return result;
        }
        else
        {
          v47 = (google::protobuf::internal *)((char *)v11 + 2);
LABEL_78:
          v188 = v47;
          *((_QWORD *)this + 29) = v48;
        }
        goto LABEL_277;
      case 0xCu:
        if (v12 != 96)
          goto LABEL_279;
        *((_DWORD *)this + 10) |= 0x400u;
        v51 = (google::protobuf::internal *)((char *)v11 + 1);
        LODWORD(v50) = *(unsigned __int8 *)v11;
        if ((v50 & 0x80) == 0)
          goto LABEL_83;
        v52 = *(char *)v51;
        v50 = v50 + (v52 << 7) - 128;
        if (v52 < 0)
        {
          result = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(v11, v50);
          v188 = result;
          *((_DWORD *)this + 57) = v161;
          if (!result)
            return result;
        }
        else
        {
          v51 = (google::protobuf::internal *)((char *)v11 + 2);
LABEL_83:
          v188 = v51;
          *((_DWORD *)this + 57) = v50;
        }
        goto LABEL_277;
      case 0xDu:
        if (v12 != 104)
          goto LABEL_279;
        *((_DWORD *)this + 10) |= 0x1000u;
        v54 = (google::protobuf::internal *)((char *)v11 + 1);
        LODWORD(v53) = *(unsigned __int8 *)v11;
        if ((v53 & 0x80) == 0)
          goto LABEL_88;
        v55 = *(char *)v54;
        v53 = v53 + (v55 << 7) - 128;
        if (v55 < 0)
        {
          result = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(v11, v53);
          v188 = result;
          *((_DWORD *)this + 60) = v162;
          if (!result)
            return result;
        }
        else
        {
          v54 = (google::protobuf::internal *)((char *)v11 + 2);
LABEL_88:
          v188 = v54;
          *((_DWORD *)this + 60) = v53;
        }
        goto LABEL_277;
      case 0xEu:
        if (v12 != 112)
          goto LABEL_279;
        *((_DWORD *)this + 10) |= 0x4000000u;
        v57 = (google::protobuf::internal *)((char *)v11 + 1);
        LODWORD(v56) = *(unsigned __int8 *)v11;
        if ((v56 & 0x80) == 0)
          goto LABEL_93;
        v58 = *(char *)v57;
        v56 = v56 + (v58 << 7) - 128;
        if (v58 < 0)
        {
          result = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(v11, v56);
          v188 = result;
          *((_DWORD *)this + 71) = v163;
          if (!result)
            return result;
        }
        else
        {
          v57 = (google::protobuf::internal *)((char *)v11 + 2);
LABEL_93:
          v188 = v57;
          *((_DWORD *)this + 71) = v56;
        }
        goto LABEL_277;
      case 0xFu:
        if (v12 != 125)
          goto LABEL_279;
        *((_DWORD *)this + 10) |= 0x8000000u;
        v59 = *(_DWORD *)v11;
        v45 = (google::protobuf::internal *)((char *)v11 + 4);
        *((_DWORD *)this + 72) = v59;
        goto LABEL_259;
      case 0x10u:
        if (v12 != 128)
          goto LABEL_279;
        *((_DWORD *)this + 10) |= 0x10000000u;
        v61 = (google::protobuf::internal *)((char *)v11 + 1);
        LODWORD(v60) = *(unsigned __int8 *)v11;
        if ((v60 & 0x80) == 0)
          goto LABEL_100;
        v62 = *(char *)v61;
        v60 = v60 + (v62 << 7) - 128;
        if (v62 < 0)
        {
          result = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(v11, v60);
          v188 = result;
          *((_DWORD *)this + 73) = v164;
          if (!result)
            return result;
        }
        else
        {
          v61 = (google::protobuf::internal *)((char *)v11 + 2);
LABEL_100:
          v188 = v61;
          *((_DWORD *)this + 73) = v60;
        }
        goto LABEL_277;
      case 0x11u:
        if (v12 != 136)
          goto LABEL_279;
        *((_DWORD *)this + 10) |= 0x20000000u;
        v64 = (google::protobuf::internal *)((char *)v11 + 1);
        LODWORD(v63) = *(unsigned __int8 *)v11;
        if ((v63 & 0x80) == 0)
          goto LABEL_105;
        v65 = *(char *)v64;
        v63 = v63 + (v65 << 7) - 128;
        if (v65 < 0)
        {
          result = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(v11, v63);
          v188 = result;
          *((_DWORD *)this + 74) = v165;
          if (!result)
            return result;
        }
        else
        {
          v64 = (google::protobuf::internal *)((char *)v11 + 2);
LABEL_105:
          v188 = v64;
          *((_DWORD *)this + 74) = v63;
        }
        goto LABEL_277;
      case 0x12u:
        if (v12 != 144)
          goto LABEL_279;
        *((_DWORD *)this + 10) |= 0x40000000u;
        v67 = (google::protobuf::internal *)((char *)v11 + 1);
        LODWORD(v66) = *(unsigned __int8 *)v11;
        if ((v66 & 0x80) == 0)
          goto LABEL_110;
        v68 = *(char *)v67;
        v66 = v66 + (v68 << 7) - 128;
        if (v68 < 0)
        {
          result = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(v11, v66);
          v188 = result;
          *((_DWORD *)this + 75) = v166;
          if (!result)
            return result;
        }
        else
        {
          v67 = (google::protobuf::internal *)((char *)v11 + 2);
LABEL_110:
          v188 = v67;
          *((_DWORD *)this + 75) = v66;
        }
        goto LABEL_277;
      case 0x13u:
        if (v12 != 152)
          goto LABEL_279;
        *((_DWORD *)this + 11) |= 1u;
        v69 = (google::protobuf::internal *)((char *)v11 + 1);
        v70 = *(unsigned __int8 *)v11;
        if ((*(char *)v11 & 0x80000000) == 0)
          goto LABEL_115;
        v71 = *(char *)v69;
        v70 = v70 + (v71 << 7) - 128;
        if (v71 < 0)
        {
          result = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(v11, v70);
          v188 = result;
          *((_BYTE *)this + 308) = v167 != 0;
          if (!result)
            return result;
        }
        else
        {
          v69 = (google::protobuf::internal *)((char *)v11 + 2);
LABEL_115:
          v188 = v69;
          *((_BYTE *)this + 308) = v70 != 0;
        }
        goto LABEL_277;
      case 0x14u:
        if (v12 != 160)
          goto LABEL_279;
        *((_DWORD *)this + 10) |= 0x80000000;
        v73 = (google::protobuf::internal *)((char *)v11 + 1);
        LODWORD(v72) = *(unsigned __int8 *)v11;
        if ((v72 & 0x80) == 0)
          goto LABEL_120;
        v74 = *(char *)v73;
        v72 = v72 + (v74 << 7) - 128;
        if (v74 < 0)
        {
          result = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(v11, v72);
          v188 = result;
          *((_DWORD *)this + 76) = v168;
          if (!result)
            return result;
        }
        else
        {
          v73 = (google::protobuf::internal *)((char *)v11 + 2);
LABEL_120:
          v188 = v73;
          *((_DWORD *)this + 76) = v72;
        }
        goto LABEL_277;
      case 0x15u:
        if (v12 != 168)
          goto LABEL_279;
        *((_DWORD *)this + 11) |= 2u;
        v75 = (google::protobuf::internal *)((char *)v11 + 1);
        v76 = *(unsigned __int8 *)v11;
        if ((*(char *)v11 & 0x80000000) == 0)
          goto LABEL_125;
        v77 = *(char *)v75;
        v76 = v76 + (v77 << 7) - 128;
        if (v77 < 0)
        {
          result = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(v11, v76);
          v188 = result;
          *((_BYTE *)this + 309) = v169 != 0;
          if (!result)
            return result;
        }
        else
        {
          v75 = (google::protobuf::internal *)((char *)v11 + 2);
LABEL_125:
          v188 = v75;
          *((_BYTE *)this + 309) = v76 != 0;
        }
        goto LABEL_277;
      case 0x16u:
        if (v12 != 176)
          goto LABEL_279;
        *((_DWORD *)this + 11) |= 8u;
        v78 = (google::protobuf::internal *)((char *)v11 + 1);
        v79 = *(unsigned __int8 *)v11;
        if ((*(char *)v11 & 0x80000000) == 0)
          goto LABEL_130;
        v80 = *(char *)v78;
        v79 = v79 + (v80 << 7) - 128;
        if (v80 < 0)
        {
          result = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(v11, v79);
          v188 = result;
          *((_BYTE *)this + 311) = v170 != 0;
          if (!result)
            return result;
        }
        else
        {
          v78 = (google::protobuf::internal *)((char *)v11 + 2);
LABEL_130:
          v188 = v78;
          *((_BYTE *)this + 311) = v79 != 0;
        }
        goto LABEL_277;
      case 0x17u:
        if (v12 != 184)
          goto LABEL_279;
        *((_DWORD *)this + 11) |= 4u;
        v81 = (google::protobuf::internal *)((char *)v11 + 1);
        v82 = *(unsigned __int8 *)v11;
        if ((*(char *)v11 & 0x80000000) == 0)
          goto LABEL_135;
        v83 = *(char *)v81;
        v82 = v82 + (v83 << 7) - 128;
        if (v83 < 0)
        {
          result = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(v11, v82);
          v188 = result;
          *((_BYTE *)this + 310) = v171 != 0;
          if (!result)
            return result;
        }
        else
        {
          v81 = (google::protobuf::internal *)((char *)v11 + 2);
LABEL_135:
          v188 = v81;
          *((_BYTE *)this + 310) = v82 != 0;
        }
        goto LABEL_277;
      case 0x18u:
        if (v12 != 192)
          goto LABEL_279;
        *((_DWORD *)this + 10) |= 0x4000u;
        v84 = (google::protobuf::internal *)((char *)v11 + 1);
        v85 = *(unsigned __int8 *)v11;
        if ((*(char *)v11 & 0x80000000) == 0)
          goto LABEL_140;
        v86 = *(char *)v84;
        v85 = v85 + (v86 << 7) - 128;
        if (v86 < 0)
        {
          result = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(v11, v85);
          v188 = result;
          *((_BYTE *)this + 245) = v172 != 0;
          if (!result)
            return result;
        }
        else
        {
          v84 = (google::protobuf::internal *)((char *)v11 + 2);
LABEL_140:
          v188 = v84;
          *((_BYTE *)this + 245) = v85 != 0;
        }
        goto LABEL_277;
      case 0x19u:
        if (v12 != 200)
          goto LABEL_279;
        *((_DWORD *)this + 10) |= 0x10000u;
        v87 = (google::protobuf::internal *)((char *)v11 + 1);
        v88 = *(unsigned __int8 *)v11;
        if ((*(char *)v11 & 0x80000000) == 0)
          goto LABEL_145;
        v89 = *(char *)v87;
        v88 = v88 + (v89 << 7) - 128;
        if (v89 < 0)
        {
          result = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(v11, v88);
          v188 = result;
          *((_BYTE *)this + 247) = v173 != 0;
          if (!result)
            return result;
        }
        else
        {
          v87 = (google::protobuf::internal *)((char *)v11 + 2);
LABEL_145:
          v188 = v87;
          *((_BYTE *)this + 247) = v88 != 0;
        }
        goto LABEL_277;
      case 0x1Au:
        if (v12 != 208)
          goto LABEL_279;
        *((_DWORD *)this + 10) |= 0x8000u;
        v90 = (google::protobuf::internal *)((char *)v11 + 1);
        v91 = *(unsigned __int8 *)v11;
        if ((*(char *)v11 & 0x80000000) == 0)
          goto LABEL_150;
        v92 = *(char *)v90;
        v91 = v91 + (v92 << 7) - 128;
        if (v92 < 0)
        {
          result = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(v11, v91);
          v188 = result;
          *((_BYTE *)this + 246) = v174 != 0;
          if (!result)
            return result;
        }
        else
        {
          v90 = (google::protobuf::internal *)((char *)v11 + 2);
LABEL_150:
          v188 = v90;
          *((_BYTE *)this + 246) = v91 != 0;
        }
        goto LABEL_277;
      case 0x1Eu:
        if (v12 != 242)
          goto LABEL_279;
        result = (google::protobuf::internal *)((char *)v11 - 2);
        while (1)
        {
          v93 = (char *)result + 2;
          v188 = (google::protobuf::internal *)((char *)result + 2);
          v94 = (int *)*((_QWORD *)this + 15);
          if (!v94)
            break;
          v95 = *((int *)this + 28);
          v96 = *v94;
          if ((int)v95 >= *v94)
          {
            if (v96 == *((_DWORD *)this + 29))
            {
LABEL_158:
              google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)this + 26, v96 + 1);
              v94 = (int *)*((_QWORD *)this + 15);
              v96 = *v94;
            }
            *v94 = v96 + 1;
            v98 = *v8;
            if (*v8)
            {
              if ((*(_BYTE *)(v98 + 24) & 1) != 0)
              v97 = (std::string *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((google::protobuf::internal::ArenaImpl *)v98, (google::protobuf::internal::SerialArena::Block *)0x18, (void (*)(void *))google::protobuf::internal::arena_destruct_object<std::string>);
            }
            else
            {
              v97 = (std::string *)operator new();
            }
            v97->__r_.__value_.__r.__words[0] = 0;
            v97->__r_.__value_.__l.__size_ = 0;
            v97->__r_.__value_.__r.__words[2] = 0;
            v99 = *((_QWORD *)this + 15);
            v100 = *((int *)this + 28);
            *((_DWORD *)this + 28) = v100 + 1;
            *(_QWORD *)(v99 + 8 * v100 + 8) = v97;
            v93 = (std::string::value_type *)v188;
            goto LABEL_165;
          }
          *((_DWORD *)this + 28) = v95 + 1;
          v97 = *(std::string **)&v94[2 * v95 + 2];
LABEL_165:
          result = (google::protobuf::internal *)google::protobuf::internal::InlineGreedyStringParser(v97, v93, (uint64_t)a3);
          v188 = result;
          if (!result)
            return result;
          if (*(_QWORD *)a3 <= (unint64_t)result || *(_WORD *)result != 498)
            goto LABEL_277;
        }
        v96 = *((_DWORD *)this + 29);
        goto LABEL_158;
      case 0x1Fu:
        if (v12 != 250)
          goto LABEL_279;
        result = (google::protobuf::internal *)((char *)v11 - 2);
        break;
      case 0x20u:
        if ((_BYTE)v12)
          goto LABEL_279;
        *((_DWORD *)this + 11) |= 0x10u;
        v109 = (google::protobuf::internal *)((char *)v11 + 1);
        v110 = *(unsigned __int8 *)v11;
        if ((*(char *)v11 & 0x80000000) == 0)
          goto LABEL_191;
        v111 = *(char *)v109;
        v110 = v110 + (v111 << 7) - 128;
        if (v111 < 0)
        {
          result = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(v11, v110);
          v188 = result;
          *((_BYTE *)this + 312) = v175 != 0;
          if (!result)
            return result;
        }
        else
        {
          v109 = (google::protobuf::internal *)((char *)v11 + 2);
LABEL_191:
          v188 = v109;
          *((_BYTE *)this + 312) = v110 != 0;
        }
        goto LABEL_277;
      case 0x21u:
        if (v12 != 8)
          goto LABEL_279;
        *((_DWORD *)this + 11) |= 0x20u;
        v112 = (google::protobuf::internal *)((char *)v11 + 1);
        v113 = *(unsigned __int8 *)v11;
        if ((*(char *)v11 & 0x80000000) == 0)
          goto LABEL_196;
        v114 = *(char *)v112;
        v113 = v113 + (v114 << 7) - 128;
        if (v114 < 0)
        {
          result = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(v11, v113);
          v188 = result;
          *((_BYTE *)this + 313) = v176 != 0;
          if (!result)
            return result;
        }
        else
        {
          v112 = (google::protobuf::internal *)((char *)v11 + 2);
LABEL_196:
          v188 = v112;
          *((_BYTE *)this + 313) = v113 != 0;
        }
        goto LABEL_277;
      case 0x22u:
        if (v12 != 16)
          goto LABEL_279;
        *((_DWORD *)this + 10) |= 0x40000u;
        v115 = (google::protobuf::internal *)((char *)v11 + 1);
        v116 = *(unsigned __int8 *)v11;
        if ((*(char *)v11 & 0x80000000) == 0)
          goto LABEL_201;
        v117 = *(char *)v115;
        v116 = v116 + (v117 << 7) - 128;
        if (v117 < 0)
        {
          result = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(v11, v116);
          v188 = result;
          *((_BYTE *)this + 249) = v177 != 0;
          if (!result)
            return result;
        }
        else
        {
          v115 = (google::protobuf::internal *)((char *)v11 + 2);
LABEL_201:
          v188 = v115;
          *((_BYTE *)this + 249) = v116 != 0;
        }
        goto LABEL_277;
      case 0x23u:
        if (v12 != 24)
          goto LABEL_279;
        *((_DWORD *)this + 10) |= 0x20000u;
        v118 = (google::protobuf::internal *)((char *)v11 + 1);
        v119 = *(unsigned __int8 *)v11;
        if ((*(char *)v11 & 0x80000000) == 0)
          goto LABEL_206;
        v120 = *(char *)v118;
        v119 = v119 + (v120 << 7) - 128;
        if (v120 < 0)
        {
          result = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(v11, v119);
          v188 = result;
          *((_BYTE *)this + 248) = v178 != 0;
          if (!result)
            return result;
        }
        else
        {
          v118 = (google::protobuf::internal *)((char *)v11 + 2);
LABEL_206:
          v188 = v118;
          *((_BYTE *)this + 248) = v119 != 0;
        }
        goto LABEL_277;
      case 0x24u:
        if (v12 != 34)
          goto LABEL_279;
        *((_DWORD *)this + 10) |= 4u;
        v121 = *((_QWORD *)this + 1);
        v24 = (google::protobuf::internal::ArenaImpl *)(v121 & 0xFFFFFFFFFFFFFFFELL);
        if ((v121 & 1) != 0)
          v24 = *(google::protobuf::internal::ArenaImpl **)v24;
        v25 = (uint64_t **)((char *)this + 168);
        goto LABEL_269;
      case 0x28u:
        if (v12 != 64)
          goto LABEL_279;
        *((_DWORD *)this + 10) |= 0x100000u;
        v123 = (google::protobuf::internal *)((char *)v11 + 1);
        LODWORD(v122) = *(unsigned __int8 *)v11;
        if ((v122 & 0x80) == 0)
          goto LABEL_215;
        v124 = *(char *)v123;
        v122 = v122 + (v124 << 7) - 128;
        if (v124 < 0)
        {
          result = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(v11, v122);
          v188 = result;
          *((_DWORD *)this + 63) = v179;
          if (!result)
            return result;
        }
        else
        {
          v123 = (google::protobuf::internal *)((char *)v11 + 2);
LABEL_215:
          v188 = v123;
          *((_DWORD *)this + 63) = v122;
        }
        goto LABEL_277;
      case 0x29u:
        if (v12 != 72)
          goto LABEL_279;
        *((_DWORD *)this + 11) |= 0x40u;
        v126 = (google::protobuf::internal *)((char *)v11 + 1);
        LODWORD(v125) = *(unsigned __int8 *)v11;
        if ((v125 & 0x80) == 0)
          goto LABEL_220;
        v127 = *(char *)v126;
        v125 = v125 + (v127 << 7) - 128;
        if (v127 < 0)
        {
          result = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(v11, v125);
          v188 = result;
          *((_DWORD *)this + 79) = v180;
          if (!result)
            return result;
        }
        else
        {
          v126 = (google::protobuf::internal *)((char *)v11 + 2);
LABEL_220:
          v188 = v126;
          *((_DWORD *)this + 79) = v125;
        }
        goto LABEL_277;
      case 0x2Au:
        if (v12 != 80)
          goto LABEL_279;
        *((_DWORD *)this + 11) |= 0x80u;
        v129 = (google::protobuf::internal *)((char *)v11 + 1);
        LODWORD(v128) = *(unsigned __int8 *)v11;
        if ((v128 & 0x80) == 0)
          goto LABEL_225;
        v130 = *(char *)v129;
        v128 = v128 + (v130 << 7) - 128;
        if (v130 < 0)
        {
          result = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(v11, v128);
          v188 = result;
          *((_DWORD *)this + 80) = v181;
          if (!result)
            return result;
        }
        else
        {
          v129 = (google::protobuf::internal *)((char *)v11 + 2);
LABEL_225:
          v188 = v129;
          *((_DWORD *)this + 80) = v128;
        }
        goto LABEL_277;
      case 0x2Bu:
        if (v12 != 88)
          goto LABEL_279;
        *((_DWORD *)this + 11) |= 0x100u;
        v132 = (google::protobuf::internal *)((char *)v11 + 1);
        LODWORD(v131) = *(unsigned __int8 *)v11;
        if ((v131 & 0x80) == 0)
          goto LABEL_230;
        v133 = *(char *)v132;
        v131 = v131 + (v133 << 7) - 128;
        if (v133 < 0)
        {
          result = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(v11, v131);
          v188 = result;
          *((_DWORD *)this + 81) = v182;
          if (!result)
            return result;
        }
        else
        {
          v132 = (google::protobuf::internal *)((char *)v11 + 2);
LABEL_230:
          v188 = v132;
          *((_DWORD *)this + 81) = v131;
        }
        goto LABEL_277;
      case 0x2Cu:
        if (v12 != 98)
          goto LABEL_279;
        *((_DWORD *)this + 10) |= 8u;
        v153 = *((_QWORD *)this + 1);
        v135 = (google::protobuf::Arena *)(v153 & 0xFFFFFFFFFFFFFFFELL);
        if ((v153 & 1) != 0)
          v135 = *(google::protobuf::Arena **)v135;
        v136 = &sentencepiece::TrainerSpec::_i_give_permission_to_break_this_code_default_unk_surface_;
        v137 = (sentencepiece::TrainerSpec *)((char *)this + 176);
        goto LABEL_274;
      case 0x2Du:
        if (v12 != 106)
          goto LABEL_279;
        *((_DWORD *)this + 10) |= 0x10u;
        v134 = *((_QWORD *)this + 1);
        v135 = (google::protobuf::Arena *)(v134 & 0xFFFFFFFFFFFFFFFELL);
        if ((v134 & 1) != 0)
          v135 = *(google::protobuf::Arena **)v135;
        v136 = &sentencepiece::TrainerSpec::_i_give_permission_to_break_this_code_default_unk_piece_;
        v137 = (sentencepiece::TrainerSpec *)((char *)this + 184);
        goto LABEL_274;
      case 0x2Eu:
        if (v12 != 114)
          goto LABEL_279;
        *((_DWORD *)this + 10) |= 0x20u;
        v138 = *((_QWORD *)this + 1);
        v135 = (google::protobuf::Arena *)(v138 & 0xFFFFFFFFFFFFFFFELL);
        if ((v138 & 1) != 0)
          v135 = *(google::protobuf::Arena **)v135;
        v136 = &sentencepiece::TrainerSpec::_i_give_permission_to_break_this_code_default_bos_piece_;
        v137 = (sentencepiece::TrainerSpec *)((char *)this + 192);
        goto LABEL_274;
      case 0x2Fu:
        if (v12 != 122)
          goto LABEL_279;
        *((_DWORD *)this + 10) |= 0x40u;
        v139 = *((_QWORD *)this + 1);
        v135 = (google::protobuf::Arena *)(v139 & 0xFFFFFFFFFFFFFFFELL);
        if ((v139 & 1) != 0)
          v135 = *(google::protobuf::Arena **)v135;
        v136 = &sentencepiece::TrainerSpec::_i_give_permission_to_break_this_code_default_eos_piece_;
        v137 = (sentencepiece::TrainerSpec *)((char *)this + 200);
        goto LABEL_274;
      case 0x30u:
        if (v12 != 130)
          goto LABEL_279;
        *((_DWORD *)this + 10) |= 0x80u;
        v140 = *((_QWORD *)this + 1);
        v135 = (google::protobuf::Arena *)(v140 & 0xFFFFFFFFFFFFFFFELL);
        if ((v140 & 1) != 0)
          v135 = *(google::protobuf::Arena **)v135;
        v136 = &sentencepiece::TrainerSpec::_i_give_permission_to_break_this_code_default_pad_piece_;
        v137 = (sentencepiece::TrainerSpec *)((char *)this + 208);
LABEL_274:
        v152 = google::protobuf::internal::ArenaStringPtr::Mutable(v137, (const google::protobuf::internal::LazyString *)v136, v135);
        goto LABEL_275;
      case 0x31u:
        if (v12 != 136)
          goto LABEL_279;
        *((_DWORD *)this + 10) |= 0x80000u;
        v141 = (google::protobuf::internal *)((char *)v11 + 1);
        v142 = *(unsigned __int8 *)v11;
        if ((*(char *)v11 & 0x80000000) == 0)
          goto LABEL_251;
        v143 = *(char *)v141;
        v142 = v142 + (v143 << 7) - 128;
        if (v143 < 0)
        {
          result = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(v11, v142);
          v188 = result;
          *((_BYTE *)this + 250) = v183 != 0;
          if (!result)
            return result;
        }
        else
        {
          v141 = (google::protobuf::internal *)((char *)v11 + 2);
LABEL_251:
          v188 = v141;
          *((_BYTE *)this + 250) = v142 != 0;
        }
        goto LABEL_277;
      case 0x32u:
        if (v12 != 144)
          goto LABEL_279;
        *((_DWORD *)this + 10) |= 0x2000u;
        v144 = (google::protobuf::internal *)((char *)v11 + 1);
        v145 = *(unsigned __int8 *)v11;
        if ((*(char *)v11 & 0x80000000) == 0)
          goto LABEL_256;
        v146 = *(char *)v144;
        v145 = v145 + (v146 << 7) - 128;
        if (v146 < 0)
        {
          result = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(v11, v145);
          v188 = result;
          *((_BYTE *)this + 244) = v184 != 0;
          if (!result)
            return result;
        }
        else
        {
          v144 = (google::protobuf::internal *)((char *)v11 + 2);
LABEL_256:
          v188 = v144;
          *((_BYTE *)this + 244) = v145 != 0;
        }
        goto LABEL_277;
      case 0x33u:
        if (v12 != 157)
          goto LABEL_279;
        *((_DWORD *)this + 10) |= 0x200000u;
        v147 = *(_DWORD *)v11;
        v45 = (google::protobuf::internal *)((char *)v11 + 4);
        *((_DWORD *)this + 64) = v147;
LABEL_259:
        v188 = v45;
        goto LABEL_277;
      case 0x34u:
        if (v12 != 160)
          goto LABEL_279;
        *((_DWORD *)this + 10) |= 0x400000u;
        v148 = (google::protobuf::internal *)((char *)v11 + 1);
        v149 = *(unsigned __int8 *)v11;
        if ((*(char *)v11 & 0x80000000) == 0)
          goto LABEL_264;
        v150 = *(char *)v148;
        v149 = v149 + (v150 << 7) - 128;
        if (v150 < 0)
        {
          result = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(v11, v149);
          v188 = result;
          *((_QWORD *)this + 33) = v185;
          if (!result)
            return result;
        }
        else
        {
          v148 = (google::protobuf::internal *)((char *)v11 + 2);
LABEL_264:
          v188 = v148;
          *((_QWORD *)this + 33) = v149;
        }
        goto LABEL_277;
      case 0x35u:
        if (v12 != 170)
          goto LABEL_279;
        *((_DWORD *)this + 10) |= 0x100u;
        v151 = *((_QWORD *)this + 1);
        v24 = (google::protobuf::internal::ArenaImpl *)(v151 & 0xFFFFFFFFFFFFFFFELL);
        if ((v151 & 1) != 0)
          v24 = *(google::protobuf::internal::ArenaImpl **)v24;
        v25 = (uint64_t **)((char *)this + 216);
LABEL_269:
        v152 = (std::string *)google::protobuf::internal::ArenaStringPtr::Mutable(v25, v24);
LABEL_275:
        result = (google::protobuf::internal *)google::protobuf::internal::InlineGreedyStringParser(v152, (std::string::value_type *)v188, (uint64_t)a3);
        goto LABEL_276;
      default:
LABEL_279:
        if (v12)
          v155 = (v12 & 7) == 4;
        else
          v155 = 1;
        if (v155)
        {
          *((_DWORD *)a3 + 20) = v12 - 1;
          return v11;
        }
        if (v12 < 0x640)
        {
          if ((*v187 & 1) != 0)
          {
            v156 = (std::string *)((*v187 & 0xFFFFFFFFFFFFFFFELL) + 8);
          }
          else
          {
            v156 = (std::string *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<std::string>(v187);
            v11 = v188;
          }
          result = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse(v12, v156, v11, a3);
        }
        else
        {
          result = (google::protobuf::internal *)google::protobuf::internal::ExtensionSet::ParseField((sentencepiece::TrainerSpec *)((char *)this + 16), v12, v11, (uint64_t)&sentencepiece::_TrainerSpec_default_instance_, v187, (int32x2_t *)a3);
        }
LABEL_276:
        v188 = result;
        if (!result)
          return result;
LABEL_277:
        v154 = google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v188, *((_DWORD *)a3 + 23));
        result = v188;
        if (v154)
          return result;
        continue;
    }
    break;
  }
  while (1)
  {
    v101 = (char *)result + 2;
    v188 = (google::protobuf::internal *)((char *)result + 2);
    v102 = (int *)*((_QWORD *)this + 18);
    if (!v102)
      break;
    v103 = *((int *)this + 34);
    v104 = *v102;
    if ((int)v103 >= *v102)
    {
      if (v104 == *((_DWORD *)this + 35))
      {
LABEL_176:
        google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)this + 32, v104 + 1);
        v102 = (int *)*((_QWORD *)this + 18);
        v104 = *v102;
      }
      *v102 = v104 + 1;
      v106 = *v7;
      if (*v7)
      {
        if ((*(_BYTE *)(v106 + 24) & 1) != 0)
        v105 = (std::string *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((google::protobuf::internal::ArenaImpl *)v106, (google::protobuf::internal::SerialArena::Block *)0x18, (void (*)(void *))google::protobuf::internal::arena_destruct_object<std::string>);
      }
      else
      {
        v105 = (std::string *)operator new();
      }
      v105->__r_.__value_.__r.__words[0] = 0;
      v105->__r_.__value_.__l.__size_ = 0;
      v105->__r_.__value_.__r.__words[2] = 0;
      v107 = *((_QWORD *)this + 18);
      v108 = *((int *)this + 34);
      *((_DWORD *)this + 34) = v108 + 1;
      *(_QWORD *)(v107 + 8 * v108 + 8) = v105;
      v101 = (std::string::value_type *)v188;
      goto LABEL_183;
    }
    *((_DWORD *)this + 34) = v103 + 1;
    v105 = *(std::string **)&v102[2 * v103 + 2];
LABEL_183:
    result = (google::protobuf::internal *)google::protobuf::internal::InlineGreedyStringParser(v105, v101, (uint64_t)a3);
    v188 = result;
    if (!result)
      return result;
    if (*(_QWORD *)a3 <= (unint64_t)result || *(_WORD *)result != 506)
      goto LABEL_277;
  }
  v104 = *((_DWORD *)this + 35);
  goto LABEL_176;
}

unsigned __int8 *sentencepiece::TrainerSpec::_InternalSerialize(sentencepiece::TrainerSpec *this, unsigned __int8 *a2, google::protobuf::io::EpsCopyOutputStream *a3)
{
  int v6;
  int i;
  uint64_t v8;
  int64_t v9;
  const void *v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  int j;
  uint64_t v22;
  int64_t v23;
  const void *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  int v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  int v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unsigned __int8 v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  int v64;
  unsigned __int8 v65;
  unsigned __int8 v66;
  unsigned __int8 v67;
  int v68;
  unsigned __int8 v69;
  unsigned __int8 v70;
  unsigned __int8 v71;
  int v72;
  int k;
  uint64_t v74;
  int64_t v75;
  const void *v76;
  int v77;
  int m;
  uint64_t v79;
  int64_t v80;
  const void *v81;
  int v82;
  unsigned __int8 v83;
  unsigned __int8 v84;
  int v85;
  unsigned __int8 v86;
  unsigned __int8 v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  int v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  int v105;
  unsigned __int8 *v106;
  unsigned __int8 *v107;
  uint64_t v108;
  unsigned __int8 v110;
  unsigned __int8 v111;
  int v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  void *v118;
  uint64_t v119;
  uint64_t v120;

  v6 = *((_DWORD *)this + 16);
  if (v6 >= 1)
  {
    for (i = 0; v6 != i; ++i)
    {
      v8 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 56, i);
      if (*(char *)(v8 + 23) < 0)
      {
        v9 = *(_QWORD *)(v8 + 8);
        if (v9 > 127)
          goto LABEL_13;
      }
      else
      {
        v9 = *(unsigned __int8 *)(v8 + 23);
      }
      if (*(_QWORD *)a3 - (_QWORD)a2 + 14 >= v9)
      {
        *a2 = 10;
        a2[1] = v9;
        if (*(char *)(v8 + 23) >= 0)
          v10 = (const void *)v8;
        else
          v10 = *(const void **)v8;
        memcpy(a2 + 2, v10, v9);
        a2 += v9 + 2;
        continue;
      }
LABEL_13:
      a2 = google::protobuf::io::EpsCopyOutputStream::WriteStringOutline(a3, 1, v8, (char *)a2);
    }
  }
  v11 = *((_DWORD *)this + 10);
  if ((v11 & 1) != 0)
  {
    a2 = google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 2, *((_QWORD *)this + 19) & 0xFFFFFFFFFFFFFFFELL, (char *)a2);
    if ((v11 & 0x800000) == 0)
    {
LABEL_16:
      if ((v11 & 0x1000000) == 0)
        goto LABEL_38;
      goto LABEL_17;
    }
  }
  else if ((v11 & 0x800000) == 0)
  {
    goto LABEL_16;
  }
  if (*(_QWORD *)a3 <= (unint64_t)a2)
    a2 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
  v13 = *((int *)this + 68);
  *a2 = 24;
  if (v13 > 0x7F)
  {
    a2[1] = v13 | 0x80;
    v15 = v13 >> 7;
    if (v13 >> 14)
    {
      a2 += 3;
      do
      {
        *(a2 - 1) = v15 | 0x80;
        v18 = v15 >> 7;
        ++a2;
        v19 = v15 >> 14;
        v15 >>= 7;
      }
      while (v19);
      *(a2 - 1) = v18;
      if ((v11 & 0x1000000) == 0)
        goto LABEL_38;
    }
    else
    {
      a2[2] = v15;
      a2 += 3;
      if ((v11 & 0x1000000) == 0)
        goto LABEL_38;
    }
  }
  else
  {
    a2[1] = v13;
    a2 += 2;
    if ((v11 & 0x1000000) == 0)
      goto LABEL_38;
  }
LABEL_17:
  if (*(_QWORD *)a3 <= (unint64_t)a2)
    a2 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
  v12 = *((int *)this + 69);
  *a2 = 32;
  if (v12 > 0x7F)
  {
    a2[1] = v12 | 0x80;
    v14 = v12 >> 7;
    if (v12 >> 14)
    {
      a2 += 3;
      do
      {
        *(a2 - 1) = v14 | 0x80;
        v16 = v14 >> 7;
        ++a2;
        v17 = v14 >> 14;
        v14 >>= 7;
      }
      while (v17);
      *(a2 - 1) = v16;
    }
    else
    {
      a2[2] = v14;
      a2 += 3;
    }
  }
  else
  {
    a2[1] = v12;
    a2 += 2;
  }
LABEL_38:
  v20 = *((_DWORD *)this + 22);
  if (v20 >= 1)
  {
    for (j = 0; v20 != j; ++j)
    {
      v22 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 80, j);
      if (*(char *)(v22 + 23) < 0)
      {
        v23 = *(_QWORD *)(v22 + 8);
        if (v23 > 127)
          goto LABEL_50;
      }
      else
      {
        v23 = *(unsigned __int8 *)(v22 + 23);
      }
      if (*(_QWORD *)a3 - (_QWORD)a2 + 14 >= v23)
      {
        *a2 = 42;
        a2[1] = v23;
        if (*(char *)(v22 + 23) >= 0)
          v24 = (const void *)v22;
        else
          v24 = *(const void **)v22;
        memcpy(a2 + 2, v24, v23);
        a2 += v23 + 2;
        continue;
      }
LABEL_50:
      a2 = google::protobuf::io::EpsCopyOutputStream::WriteStringOutline(a3, 5, v22, (char *)a2);
    }
  }
  if ((v11 & 0x200) != 0)
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
      a2 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
    v26 = *((int *)this + 56);
    *a2 = 48;
    if (v26 > 0x7F)
    {
      a2[1] = v26 | 0x80;
      v28 = v26 >> 7;
      if (v26 >> 14)
      {
        a2 += 3;
        do
        {
          *(a2 - 1) = v28 | 0x80;
          v31 = v28 >> 7;
          ++a2;
          v32 = v28 >> 14;
          v28 >>= 7;
        }
        while (v32);
        *(a2 - 1) = v31;
        if ((v11 & 2) != 0)
          goto LABEL_82;
      }
      else
      {
        a2[2] = v28;
        a2 += 3;
        if ((v11 & 2) != 0)
          goto LABEL_82;
      }
    }
    else
    {
      a2[1] = v26;
      a2 += 2;
      if ((v11 & 2) != 0)
        goto LABEL_82;
    }
LABEL_53:
    if ((v11 & 0x2000000) == 0)
      goto LABEL_54;
    goto LABEL_83;
  }
  if ((v11 & 2) == 0)
    goto LABEL_53;
LABEL_82:
  a2 = google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 7, *((_QWORD *)this + 20) & 0xFFFFFFFFFFFFFFFELL, (char *)a2);
  if ((v11 & 0x2000000) == 0)
  {
LABEL_54:
    if ((v11 & 0x800) == 0)
      goto LABEL_55;
    goto LABEL_86;
  }
LABEL_83:
  if (*(_QWORD *)a3 <= (unint64_t)a2)
    a2 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
  v33 = *((_DWORD *)this + 70);
  *a2 = 85;
  *(_DWORD *)(a2 + 1) = v33;
  a2 += 5;
  if ((v11 & 0x800) == 0)
  {
LABEL_55:
    if ((v11 & 0x400) == 0)
      goto LABEL_56;
LABEL_97:
    if (*(_QWORD *)a3 <= (unint64_t)a2)
      a2 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
    v38 = *((int *)this + 57);
    *a2 = 96;
    if (v38 > 0x7F)
    {
      a2[1] = v38 | 0x80;
      v39 = v38 >> 7;
      if (v38 >> 14)
      {
        a2 += 3;
        do
        {
          *(a2 - 1) = v39 | 0x80;
          v40 = v39 >> 7;
          ++a2;
          v41 = v39 >> 14;
          v39 >>= 7;
        }
        while (v41);
        *(a2 - 1) = v40;
        if ((v11 & 0x1000) != 0)
          goto LABEL_108;
      }
      else
      {
        a2[2] = v39;
        a2 += 3;
        if ((v11 & 0x1000) != 0)
          goto LABEL_108;
      }
    }
    else
    {
      a2[1] = v38;
      a2 += 2;
      if ((v11 & 0x1000) != 0)
        goto LABEL_108;
    }
LABEL_57:
    if ((v11 & 0x4000000) == 0)
      goto LABEL_58;
LABEL_119:
    if (*(_QWORD *)a3 <= (unint64_t)a2)
      a2 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
    v46 = *((int *)this + 71);
    *a2 = 112;
    if (v46 > 0x7F)
    {
      a2[1] = v46 | 0x80;
      v47 = v46 >> 7;
      if (v46 >> 14)
      {
        a2 += 3;
        do
        {
          *(a2 - 1) = v47 | 0x80;
          v48 = v47 >> 7;
          ++a2;
          v49 = v47 >> 14;
          v47 >>= 7;
        }
        while (v49);
        *(a2 - 1) = v48;
        if ((v11 & 0x8000000) != 0)
          goto LABEL_130;
      }
      else
      {
        a2[2] = v47;
        a2 += 3;
        if ((v11 & 0x8000000) != 0)
          goto LABEL_130;
      }
    }
    else
    {
      a2[1] = v46;
      a2 += 2;
      if ((v11 & 0x8000000) != 0)
        goto LABEL_130;
    }
LABEL_59:
    if ((v11 & 0x10000000) == 0)
      goto LABEL_60;
LABEL_133:
    if (*(_QWORD *)a3 <= (unint64_t)a2)
      a2 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
    v51 = *((int *)this + 73);
    *(_WORD *)a2 = 384;
    if (v51 > 0x7F)
    {
      a2[2] = v51 | 0x80;
      v52 = v51 >> 7;
      if (v51 >> 14)
      {
        a2 += 4;
        do
        {
          *(a2 - 1) = v52 | 0x80;
          v53 = v52 >> 7;
          ++a2;
          v54 = v52 >> 14;
          v52 >>= 7;
        }
        while (v54);
        *(a2 - 1) = v53;
        if ((v11 & 0x20000000) != 0)
          goto LABEL_144;
      }
      else
      {
        a2[3] = v52;
        a2 += 4;
        if ((v11 & 0x20000000) != 0)
          goto LABEL_144;
      }
    }
    else
    {
      a2[2] = v51;
      a2 += 3;
      if ((v11 & 0x20000000) != 0)
        goto LABEL_144;
    }
LABEL_61:
    if ((v11 & 0x40000000) == 0)
      goto LABEL_155;
    goto LABEL_62;
  }
LABEL_86:
  if (*(_QWORD *)a3 <= (unint64_t)a2)
    a2 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
  v34 = *((_QWORD *)this + 29);
  *a2 = 88;
  if (v34 > 0x7F)
  {
    a2[1] = v34 | 0x80;
    v35 = v34 >> 7;
    if (v34 >> 14)
    {
      a2 += 3;
      do
      {
        *(a2 - 1) = v35 | 0x80;
        v36 = v35 >> 7;
        ++a2;
        v37 = v35 >> 14;
        v35 >>= 7;
      }
      while (v37);
      *(a2 - 1) = v36;
      if ((v11 & 0x400) != 0)
        goto LABEL_97;
    }
    else
    {
      a2[2] = v35;
      a2 += 3;
      if ((v11 & 0x400) != 0)
        goto LABEL_97;
    }
  }
  else
  {
    a2[1] = v34;
    a2 += 2;
    if ((v11 & 0x400) != 0)
      goto LABEL_97;
  }
LABEL_56:
  if ((v11 & 0x1000) == 0)
    goto LABEL_57;
LABEL_108:
  if (*(_QWORD *)a3 <= (unint64_t)a2)
    a2 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
  v42 = *((int *)this + 60);
  *a2 = 104;
  if (v42 > 0x7F)
  {
    a2[1] = v42 | 0x80;
    v43 = v42 >> 7;
    if (v42 >> 14)
    {
      a2 += 3;
      do
      {
        *(a2 - 1) = v43 | 0x80;
        v44 = v43 >> 7;
        ++a2;
        v45 = v43 >> 14;
        v43 >>= 7;
      }
      while (v45);
      *(a2 - 1) = v44;
      if ((v11 & 0x4000000) != 0)
        goto LABEL_119;
    }
    else
    {
      a2[2] = v43;
      a2 += 3;
      if ((v11 & 0x4000000) != 0)
        goto LABEL_119;
    }
  }
  else
  {
    a2[1] = v42;
    a2 += 2;
    if ((v11 & 0x4000000) != 0)
      goto LABEL_119;
  }
LABEL_58:
  if ((v11 & 0x8000000) == 0)
    goto LABEL_59;
LABEL_130:
  if (*(_QWORD *)a3 <= (unint64_t)a2)
    a2 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
  v50 = *((_DWORD *)this + 72);
  *a2 = 125;
  *(_DWORD *)(a2 + 1) = v50;
  a2 += 5;
  if ((v11 & 0x10000000) != 0)
    goto LABEL_133;
LABEL_60:
  if ((v11 & 0x20000000) == 0)
    goto LABEL_61;
LABEL_144:
  if (*(_QWORD *)a3 <= (unint64_t)a2)
    a2 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
  v55 = *((int *)this + 74);
  *(_WORD *)a2 = 392;
  if (v55 > 0x7F)
  {
    a2[2] = v55 | 0x80;
    v56 = v55 >> 7;
    if (v55 >> 14)
    {
      a2 += 4;
      do
      {
        *(a2 - 1) = v56 | 0x80;
        v57 = v56 >> 7;
        ++a2;
        v58 = v56 >> 14;
        v56 >>= 7;
      }
      while (v58);
      *(a2 - 1) = v57;
      if ((v11 & 0x40000000) == 0)
        goto LABEL_155;
    }
    else
    {
      a2[3] = v56;
      a2 += 4;
      if ((v11 & 0x40000000) == 0)
        goto LABEL_155;
    }
  }
  else
  {
    a2[2] = v55;
    a2 += 3;
    if ((v11 & 0x40000000) == 0)
      goto LABEL_155;
  }
LABEL_62:
  if (*(_QWORD *)a3 <= (unint64_t)a2)
    a2 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
  v25 = *((int *)this + 75);
  *(_WORD *)a2 = 400;
  if (v25 > 0x7F)
  {
    a2[2] = v25 | 0x80;
    v27 = v25 >> 7;
    if (v25 >> 14)
    {
      a2 += 4;
      do
      {
        *(a2 - 1) = v27 | 0x80;
        v29 = v27 >> 7;
        ++a2;
        v30 = v27 >> 14;
        v27 >>= 7;
      }
      while (v30);
      *(a2 - 1) = v29;
    }
    else
    {
      a2[3] = v27;
      a2 += 4;
    }
  }
  else
  {
    a2[2] = v25;
    a2 += 3;
  }
LABEL_155:
  if ((*((_BYTE *)this + 44) & 1) != 0)
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
      a2 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
    v59 = *((_BYTE *)this + 308);
    *(_WORD *)a2 = 408;
    a2[2] = v59;
    a2 += 3;
  }
  if ((*((_DWORD *)this + 10) & 0x80000000) != 0)
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
      a2 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
    v60 = *((int *)this + 76);
    *(_WORD *)a2 = 416;
    if (v60 > 0x7F)
    {
      a2[2] = v60 | 0x80;
      v61 = v60 >> 7;
      if (v60 >> 14)
      {
        a2 += 4;
        do
        {
          *(a2 - 1) = v61 | 0x80;
          v62 = v61 >> 7;
          ++a2;
          v63 = v61 >> 14;
          v61 >>= 7;
        }
        while (v63);
        *(a2 - 1) = v62;
      }
      else
      {
        a2[3] = v61;
        a2 += 4;
      }
    }
    else
    {
      a2[2] = v60;
      a2 += 3;
    }
  }
  v64 = *((_DWORD *)this + 11);
  if ((v64 & 2) != 0)
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
      a2 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
    v65 = *((_BYTE *)this + 309);
    *(_WORD *)a2 = 424;
    a2[2] = v65;
    a2 += 3;
    if ((v64 & 8) == 0)
    {
LABEL_171:
      if ((v64 & 4) == 0)
        goto LABEL_182;
      goto LABEL_179;
    }
  }
  else if ((v64 & 8) == 0)
  {
    goto LABEL_171;
  }
  if (*(_QWORD *)a3 <= (unint64_t)a2)
    a2 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
  v66 = *((_BYTE *)this + 311);
  *(_WORD *)a2 = 432;
  a2[2] = v66;
  a2 += 3;
  if ((v64 & 4) != 0)
  {
LABEL_179:
    if (*(_QWORD *)a3 <= (unint64_t)a2)
      a2 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
    v67 = *((_BYTE *)this + 310);
    *(_WORD *)a2 = 440;
    a2[2] = v67;
    a2 += 3;
  }
LABEL_182:
  v68 = *((_DWORD *)this + 10);
  if ((v68 & 0x4000) != 0)
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
      a2 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
    v69 = *((_BYTE *)this + 245);
    *(_WORD *)a2 = 448;
    a2[2] = v69;
    a2 += 3;
    if ((v68 & 0x10000) == 0)
    {
LABEL_184:
      if ((v68 & 0x8000) == 0)
        goto LABEL_195;
      goto LABEL_192;
    }
  }
  else if ((v68 & 0x10000) == 0)
  {
    goto LABEL_184;
  }
  if (*(_QWORD *)a3 <= (unint64_t)a2)
    a2 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
  v70 = *((_BYTE *)this + 247);
  *(_WORD *)a2 = 456;
  a2[2] = v70;
  a2 += 3;
  if ((v68 & 0x8000) != 0)
  {
LABEL_192:
    if (*(_QWORD *)a3 <= (unint64_t)a2)
      a2 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
    v71 = *((_BYTE *)this + 246);
    *(_WORD *)a2 = 464;
    a2[2] = v71;
    a2 += 3;
  }
LABEL_195:
  v72 = *((_DWORD *)this + 28);
  if (v72 >= 1)
  {
    for (k = 0; v72 != k; ++k)
    {
      v74 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 104, k);
      if (*(char *)(v74 + 23) < 0)
      {
        v75 = *(_QWORD *)(v74 + 8);
        if (v75 > 127)
          goto LABEL_207;
      }
      else
      {
        v75 = *(unsigned __int8 *)(v74 + 23);
      }
      if (*(_QWORD *)a3 - (_QWORD)a2 + 13 >= v75)
      {
        *(_WORD *)a2 = 498;
        a2[2] = v75;
        if (*(char *)(v74 + 23) >= 0)
          v76 = (const void *)v74;
        else
          v76 = *(const void **)v74;
        memcpy(a2 + 3, v76, v75);
        a2 += v75 + 3;
        continue;
      }
LABEL_207:
      a2 = google::protobuf::io::EpsCopyOutputStream::WriteStringOutline(a3, 30, v74, (char *)a2);
    }
  }
  v77 = *((_DWORD *)this + 34);
  if (v77 >= 1)
  {
    for (m = 0; v77 != m; ++m)
    {
      v79 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 128, m);
      if (*(char *)(v79 + 23) < 0)
      {
        v80 = *(_QWORD *)(v79 + 8);
        if (v80 > 127)
          goto LABEL_220;
      }
      else
      {
        v80 = *(unsigned __int8 *)(v79 + 23);
      }
      if (*(_QWORD *)a3 - (_QWORD)a2 + 13 >= v80)
      {
        *(_WORD *)a2 = 506;
        a2[2] = v80;
        if (*(char *)(v79 + 23) >= 0)
          v81 = (const void *)v79;
        else
          v81 = *(const void **)v79;
        memcpy(a2 + 3, v81, v80);
        a2 += v80 + 3;
        continue;
      }
LABEL_220:
      a2 = google::protobuf::io::EpsCopyOutputStream::WriteStringOutline(a3, 31, v79, (char *)a2);
    }
  }
  v82 = *((_DWORD *)this + 11);
  if ((v82 & 0x10) != 0)
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
      a2 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
    v83 = *((_BYTE *)this + 312);
    *(_WORD *)a2 = 640;
    a2[2] = v83;
    a2 += 3;
  }
  if ((v82 & 0x20) != 0)
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
      a2 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
    v84 = *((_BYTE *)this + 313);
    *(_WORD *)a2 = 648;
    a2[2] = v84;
    a2 += 3;
  }
  v85 = *((_DWORD *)this + 10);
  if ((v85 & 0x40000) != 0)
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
      a2 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
    v86 = *((_BYTE *)this + 249);
    *(_WORD *)a2 = 656;
    a2[2] = v86;
    a2 += 3;
    if ((v85 & 0x20000) == 0)
    {
LABEL_231:
      if ((v85 & 4) == 0)
        goto LABEL_232;
      goto LABEL_240;
    }
  }
  else if ((v85 & 0x20000) == 0)
  {
    goto LABEL_231;
  }
  if (*(_QWORD *)a3 <= (unint64_t)a2)
    a2 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
  v87 = *((_BYTE *)this + 248);
  *(_WORD *)a2 = 664;
  a2[2] = v87;
  a2 += 3;
  if ((v85 & 4) == 0)
  {
LABEL_232:
    if ((v85 & 0x100000) == 0)
      goto LABEL_250;
    goto LABEL_241;
  }
LABEL_240:
  a2 = google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 36, *((_QWORD *)this + 21) & 0xFFFFFFFFFFFFFFFELL, (char *)a2);
  if ((v85 & 0x100000) == 0)
    goto LABEL_250;
LABEL_241:
  if (*(_QWORD *)a3 <= (unint64_t)a2)
    a2 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
  v88 = *((int *)this + 63);
  *(_WORD *)a2 = 704;
  if (v88 > 0x7F)
  {
    a2[2] = v88 | 0x80;
    v89 = v88 >> 7;
    if (v88 >> 14)
    {
      a2 += 4;
      do
      {
        *(a2 - 1) = v89 | 0x80;
        v90 = v89 >> 7;
        ++a2;
        v91 = v89 >> 14;
        v89 >>= 7;
      }
      while (v91);
      *(a2 - 1) = v90;
    }
    else
    {
      a2[3] = v89;
      a2 += 4;
    }
  }
  else
  {
    a2[2] = v88;
    a2 += 3;
  }
LABEL_250:
  v92 = *((_DWORD *)this + 11);
  if ((v92 & 0x40) != 0)
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
      a2 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
    v94 = *((int *)this + 79);
    *(_WORD *)a2 = 712;
    if (v94 > 0x7F)
    {
      a2[2] = v94 | 0x80;
      v96 = v94 >> 7;
      if (v94 >> 14)
      {
        a2 += 4;
        do
        {
          *(a2 - 1) = v96 | 0x80;
          v99 = v96 >> 7;
          ++a2;
          v100 = v96 >> 14;
          v96 >>= 7;
        }
        while (v100);
        *(a2 - 1) = v99;
        if ((v92 & 0x80) != 0)
          goto LABEL_273;
      }
      else
      {
        a2[3] = v96;
        a2 += 4;
        if ((v92 & 0x80) != 0)
          goto LABEL_273;
      }
    }
    else
    {
      a2[2] = v94;
      a2 += 3;
      if ((v92 & 0x80) != 0)
        goto LABEL_273;
    }
LABEL_252:
    if ((v92 & 0x100) == 0)
      goto LABEL_284;
    goto LABEL_253;
  }
  if ((v92 & 0x80) == 0)
    goto LABEL_252;
LABEL_273:
  if (*(_QWORD *)a3 <= (unint64_t)a2)
    a2 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
  v101 = *((int *)this + 80);
  *(_WORD *)a2 = 720;
  if (v101 > 0x7F)
  {
    a2[2] = v101 | 0x80;
    v102 = v101 >> 7;
    if (v101 >> 14)
    {
      a2 += 4;
      do
      {
        *(a2 - 1) = v102 | 0x80;
        v103 = v102 >> 7;
        ++a2;
        v104 = v102 >> 14;
        v102 >>= 7;
      }
      while (v104);
      *(a2 - 1) = v103;
      if ((v92 & 0x100) == 0)
        goto LABEL_284;
    }
    else
    {
      a2[3] = v102;
      a2 += 4;
      if ((v92 & 0x100) == 0)
        goto LABEL_284;
    }
  }
  else
  {
    a2[2] = v101;
    a2 += 3;
    if ((v92 & 0x100) == 0)
      goto LABEL_284;
  }
LABEL_253:
  if (*(_QWORD *)a3 <= (unint64_t)a2)
    a2 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
  v93 = *((int *)this + 81);
  *(_WORD *)a2 = 728;
  if (v93 > 0x7F)
  {
    a2[2] = v93 | 0x80;
    v95 = v93 >> 7;
    if (v93 >> 14)
    {
      a2 += 4;
      do
      {
        *(a2 - 1) = v95 | 0x80;
        v97 = v95 >> 7;
        ++a2;
        v98 = v95 >> 14;
        v95 >>= 7;
      }
      while (v98);
      *(a2 - 1) = v97;
    }
    else
    {
      a2[3] = v95;
      a2 += 4;
    }
  }
  else
  {
    a2[2] = v93;
    a2 += 3;
  }
LABEL_284:
  v105 = *((_DWORD *)this + 10);
  if ((v105 & 8) != 0)
  {
    a2 = google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 44, *((_QWORD *)this + 22) & 0xFFFFFFFFFFFFFFFELL, (char *)a2);
    if ((v105 & 0x10) == 0)
    {
LABEL_286:
      if ((v105 & 0x20) == 0)
        goto LABEL_287;
      goto LABEL_299;
    }
  }
  else if ((v105 & 0x10) == 0)
  {
    goto LABEL_286;
  }
  a2 = google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 45, *((_QWORD *)this + 23) & 0xFFFFFFFFFFFFFFFELL, (char *)a2);
  if ((v105 & 0x20) == 0)
  {
LABEL_287:
    if ((v105 & 0x40) == 0)
      goto LABEL_288;
    goto LABEL_300;
  }
LABEL_299:
  a2 = google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 46, *((_QWORD *)this + 24) & 0xFFFFFFFFFFFFFFFELL, (char *)a2);
  if ((v105 & 0x40) == 0)
  {
LABEL_288:
    if ((v105 & 0x80) == 0)
      goto LABEL_289;
    goto LABEL_301;
  }
LABEL_300:
  a2 = google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 47, *((_QWORD *)this + 25) & 0xFFFFFFFFFFFFFFFELL, (char *)a2);
  if ((v105 & 0x80) == 0)
  {
LABEL_289:
    if ((v105 & 0x80000) == 0)
      goto LABEL_290;
    goto LABEL_302;
  }
LABEL_301:
  a2 = google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 48, *((_QWORD *)this + 26) & 0xFFFFFFFFFFFFFFFELL, (char *)a2);
  if ((v105 & 0x80000) == 0)
  {
LABEL_290:
    if ((v105 & 0x2000) == 0)
      goto LABEL_291;
    goto LABEL_305;
  }
LABEL_302:
  if (*(_QWORD *)a3 <= (unint64_t)a2)
    a2 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
  v110 = *((_BYTE *)this + 250);
  *(_WORD *)a2 = 904;
  a2[2] = v110;
  a2 += 3;
  if ((v105 & 0x2000) == 0)
  {
LABEL_291:
    if ((v105 & 0x200000) == 0)
      goto LABEL_292;
    goto LABEL_308;
  }
LABEL_305:
  if (*(_QWORD *)a3 <= (unint64_t)a2)
    a2 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
  v111 = *((_BYTE *)this + 244);
  *(_WORD *)a2 = 912;
  a2[2] = v111;
  a2 += 3;
  if ((v105 & 0x200000) == 0)
  {
LABEL_292:
    if ((v105 & 0x400000) == 0)
      goto LABEL_293;
    goto LABEL_311;
  }
LABEL_308:
  if (*(_QWORD *)a3 <= (unint64_t)a2)
    a2 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
  v112 = *((_DWORD *)this + 64);
  *(_WORD *)a2 = 925;
  *(_DWORD *)(a2 + 2) = v112;
  a2 += 6;
  if ((v105 & 0x400000) == 0)
  {
LABEL_293:
    if ((v105 & 0x100) == 0)
      goto LABEL_295;
    goto LABEL_294;
  }
LABEL_311:
  if (*(_QWORD *)a3 <= (unint64_t)a2)
    a2 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, (char *)a2);
  v113 = *((_QWORD *)this + 33);
  *(_WORD *)a2 = 928;
  if (v113 <= 0x7F)
  {
    a2[2] = v113;
    a2 += 3;
    if ((v105 & 0x100) == 0)
      goto LABEL_295;
LABEL_294:
    a2 = google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 53, *((_QWORD *)this + 27) & 0xFFFFFFFFFFFFFFFELL, (char *)a2);
    goto LABEL_295;
  }
  a2[2] = v113 | 0x80;
  v114 = v113 >> 7;
  if (v113 >> 14)
  {
    a2 += 4;
    do
    {
      *(a2 - 1) = v114 | 0x80;
      v115 = v114 >> 7;
      ++a2;
      v116 = v114 >> 14;
      v114 >>= 7;
    }
    while (v116);
    *(a2 - 1) = v115;
    if ((v105 & 0x100) != 0)
      goto LABEL_294;
  }
  else
  {
    a2[3] = v114;
    a2 += 4;
    if ((v105 & 0x100) != 0)
      goto LABEL_294;
  }
LABEL_295:
  v106 = google::protobuf::internal::ExtensionSet::_InternalSerialize((sentencepiece::TrainerSpec *)((char *)this + 16), 200, 0x20000000, a2, a3);
  v107 = v106;
  v108 = *((_QWORD *)this + 1);
  if ((v108 & 1) == 0)
    return v107;
  v117 = v108 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v117 + 31) < 0)
  {
    v118 = *(void **)(v117 + 8);
    v119 = *(_QWORD *)(v117 + 16);
  }
  else
  {
    v118 = (void *)(v117 + 8);
    LODWORD(v119) = *(unsigned __int8 *)(v117 + 31);
  }
  if (*(_QWORD *)a3 - (_QWORD)v106 >= (int)v119)
  {
    v120 = (int)v119;
    memcpy(v106, v118, (int)v119);
    v107 += v120;
    return v107;
  }
  return google::protobuf::io::EpsCopyOutputStream::WriteRawFallback(a3, (char *)v118, v119, v106);
}

uint64_t sentencepiece::TrainerSpec::ByteSizeLong(sentencepiece::TrainerSpec *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;

  v2 = google::protobuf::internal::ExtensionSet::ByteSize((sentencepiece::TrainerSpec *)((char *)this + 16));
  v3 = *((unsigned int *)this + 16);
  v4 = v2 + v3;
  if ((int)v3 >= 1)
  {
    v5 = 0;
    do
    {
      v6 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 56, v5);
      v7 = *(unsigned __int8 *)(v6 + 23);
      if ((v7 & 0x80u) != 0)
        v7 = *(_QWORD *)(v6 + 8);
      v4 += v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6);
      ++v5;
    }
    while ((_DWORD)v3 != v5);
  }
  v8 = *((unsigned int *)this + 22);
  v9 = v4 + v8;
  if ((int)v8 >= 1)
  {
    v10 = 0;
    do
    {
      v11 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 80, v10);
      v12 = *(unsigned __int8 *)(v11 + 23);
      if ((v12 & 0x80u) != 0)
        v12 = *(_QWORD *)(v11 + 8);
      v9 += v12 + ((9 * (__clz(v12 | 1) ^ 0x1F) + 73) >> 6);
      ++v10;
    }
    while ((_DWORD)v8 != v10);
  }
  v13 = *((unsigned int *)this + 28);
  v14 = v9 + 2 * v13;
  if ((int)v13 >= 1)
  {
    v15 = 0;
    do
    {
      v16 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 104, v15);
      v17 = *(unsigned __int8 *)(v16 + 23);
      if ((v17 & 0x80u) != 0)
        v17 = *(_QWORD *)(v16 + 8);
      v14 += v17 + ((9 * (__clz(v17 | 1) ^ 0x1F) + 73) >> 6);
      ++v15;
    }
    while ((_DWORD)v13 != v15);
  }
  v18 = *((unsigned int *)this + 34);
  v19 = v14 + 2 * v18;
  if ((int)v18 >= 1)
  {
    v20 = 0;
    do
    {
      v21 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 128, v20);
      v22 = *(unsigned __int8 *)(v21 + 23);
      if ((v22 & 0x80u) != 0)
        v22 = *(_QWORD *)(v21 + 8);
      v19 += v22 + ((9 * (__clz(v22 | 1) ^ 0x1F) + 73) >> 6);
      ++v20;
    }
    while ((_DWORD)v18 != v20);
  }
  v23 = *((_DWORD *)this + 10);
  if (!(_BYTE)v23)
    goto LABEL_33;
  if ((v23 & 1) != 0)
  {
    v58 = *((_QWORD *)this + 19) & 0xFFFFFFFFFFFFFFFELL;
    v59 = *(unsigned __int8 *)(v58 + 23);
    v60 = *(_QWORD *)(v58 + 8);
    if ((v59 & 0x80u) == 0)
      v60 = v59;
    v19 += v60 + ((9 * (__clz(v60 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v23 & 2) == 0)
    {
LABEL_24:
      if ((v23 & 4) == 0)
        goto LABEL_25;
      goto LABEL_131;
    }
  }
  else if ((v23 & 2) == 0)
  {
    goto LABEL_24;
  }
  v61 = *((_QWORD *)this + 20) & 0xFFFFFFFFFFFFFFFELL;
  v62 = *(unsigned __int8 *)(v61 + 23);
  v63 = *(_QWORD *)(v61 + 8);
  if ((v62 & 0x80u) == 0)
    v63 = v62;
  v19 += v63 + ((9 * (__clz(v63 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v23 & 4) == 0)
  {
LABEL_25:
    if ((v23 & 8) == 0)
      goto LABEL_26;
    goto LABEL_134;
  }
LABEL_131:
  v64 = *((_QWORD *)this + 21) & 0xFFFFFFFFFFFFFFFELL;
  v65 = *(unsigned __int8 *)(v64 + 23);
  v66 = *(_QWORD *)(v64 + 8);
  if ((v65 & 0x80u) == 0)
    v66 = v65;
  v19 += v66 + ((9 * (__clz(v66 | 1) ^ 0x1F) + 73) >> 6) + 2;
  if ((v23 & 8) == 0)
  {
LABEL_26:
    if ((v23 & 0x10) == 0)
      goto LABEL_27;
    goto LABEL_137;
  }
LABEL_134:
  v67 = *((_QWORD *)this + 22) & 0xFFFFFFFFFFFFFFFELL;
  v68 = *(unsigned __int8 *)(v67 + 23);
  v69 = *(_QWORD *)(v67 + 8);
  if ((v68 & 0x80u) == 0)
    v69 = v68;
  v19 += v69 + ((9 * (__clz(v69 | 1) ^ 0x1F) + 73) >> 6) + 2;
  if ((v23 & 0x10) == 0)
  {
LABEL_27:
    if ((v23 & 0x20) == 0)
      goto LABEL_28;
LABEL_140:
    v73 = *((_QWORD *)this + 24) & 0xFFFFFFFFFFFFFFFELL;
    v74 = *(unsigned __int8 *)(v73 + 23);
    v75 = *(_QWORD *)(v73 + 8);
    if ((v74 & 0x80u) == 0)
      v75 = v74;
    v19 += v75 + ((9 * (__clz(v75 | 1) ^ 0x1F) + 73) >> 6) + 2;
    if ((v23 & 0x40) == 0)
    {
LABEL_29:
      if ((v23 & 0x80) == 0)
        goto LABEL_33;
      goto LABEL_30;
    }
    goto LABEL_143;
  }
LABEL_137:
  v70 = *((_QWORD *)this + 23) & 0xFFFFFFFFFFFFFFFELL;
  v71 = *(unsigned __int8 *)(v70 + 23);
  v72 = *(_QWORD *)(v70 + 8);
  if ((v71 & 0x80u) == 0)
    v72 = v71;
  v19 += v72 + ((9 * (__clz(v72 | 1) ^ 0x1F) + 73) >> 6) + 2;
  if ((v23 & 0x20) != 0)
    goto LABEL_140;
LABEL_28:
  if ((v23 & 0x40) == 0)
    goto LABEL_29;
LABEL_143:
  v76 = *((_QWORD *)this + 25) & 0xFFFFFFFFFFFFFFFELL;
  v77 = *(unsigned __int8 *)(v76 + 23);
  v78 = *(_QWORD *)(v76 + 8);
  if ((v77 & 0x80u) == 0)
    v78 = v77;
  v19 += v78 + ((9 * (__clz(v78 | 1) ^ 0x1F) + 73) >> 6) + 2;
  if ((v23 & 0x80) != 0)
  {
LABEL_30:
    v24 = *((_QWORD *)this + 26) & 0xFFFFFFFFFFFFFFFELL;
    v25 = *(unsigned __int8 *)(v24 + 23);
    v26 = *(_QWORD *)(v24 + 8);
    if ((v25 & 0x80u) == 0)
      v26 = v25;
    v19 += v26 + ((9 * (__clz(v26 | 1) ^ 0x1F) + 73) >> 6) + 2;
  }
LABEL_33:
  if ((v23 & 0xFF00) == 0)
    goto LABEL_50;
  if ((v23 & 0x100) != 0)
  {
    v79 = *((_QWORD *)this + 27) & 0xFFFFFFFFFFFFFFFELL;
    v80 = *(unsigned __int8 *)(v79 + 23);
    v81 = *(_QWORD *)(v79 + 8);
    if ((v80 & 0x80u) == 0)
      v81 = v80;
    v19 += v81 + ((9 * (__clz(v81 | 1) ^ 0x1F) + 73) >> 6) + 2;
    if ((v23 & 0x200) == 0)
    {
LABEL_36:
      if ((v23 & 0x400) == 0)
        goto LABEL_37;
      goto LABEL_154;
    }
  }
  else if ((v23 & 0x200) == 0)
  {
    goto LABEL_36;
  }
  v82 = *((_DWORD *)this + 56);
  v83 = (9 * (__clz(v82 | 1) ^ 0x1F) + 73) >> 6;
  if (v82 >= 0)
    v84 = v83;
  else
    v84 = 10;
  v19 += v84 + 1;
  if ((v23 & 0x400) == 0)
  {
LABEL_37:
    if ((v23 & 0x800) == 0)
      goto LABEL_38;
LABEL_158:
    v19 += ((9 * (__clz(*((_QWORD *)this + 29) | 1) ^ 0x3F) + 73) >> 6) + 1;
    if ((v23 & 0x1000) != 0)
      goto LABEL_39;
    goto LABEL_43;
  }
LABEL_154:
  v85 = *((_DWORD *)this + 57);
  v86 = (9 * (__clz(v85 | 1) ^ 0x1F) + 73) >> 6;
  if (v85 >= 0)
    v87 = v86;
  else
    v87 = 10;
  v19 += v87 + 1;
  if ((v23 & 0x800) != 0)
    goto LABEL_158;
LABEL_38:
  if ((v23 & 0x1000) != 0)
  {
LABEL_39:
    v27 = *((_DWORD *)this + 60);
    v28 = (9 * (__clz(v27 | 1) ^ 0x1F) + 73) >> 6;
    if (v27 >= 0)
      v29 = v28;
    else
      v29 = 10;
    v19 += v29 + 1;
  }
LABEL_43:
  v30 = v19 + 3;
  if ((v23 & 0x2000) == 0)
    v30 = v19;
  if ((v23 & 0x4000) != 0)
    v30 += 3;
  if ((v23 & 0x8000) != 0)
    v19 = v30 + 3;
  else
    v19 = v30;
LABEL_50:
  if ((v23 & 0xFF0000) != 0)
  {
    v31 = v19 + 3;
    if ((v23 & 0x10000) == 0)
      v31 = v19;
    if ((v23 & 0x20000) != 0)
      v31 += 3;
    if ((v23 & 0x40000) != 0)
      v31 += 3;
    if ((v23 & 0x80000) != 0)
      v31 += 3;
    if ((v23 & 0x100000) != 0)
    {
      v32 = *((_DWORD *)this + 63);
      v33 = (9 * (__clz(v32 | 1) ^ 0x1F) + 73) >> 6;
      if (v32 >= 0)
        v34 = v33;
      else
        v34 = 10;
      v31 += v34 + 2;
    }
    if ((v23 & 0x200000) != 0)
      v19 = v31 + 6;
    else
      v19 = v31;
    if ((v23 & 0x400000) != 0)
      v19 += ((9 * (__clz(*((_QWORD *)this + 33) | 1) ^ 0x3F) + 73) >> 6) + 2;
    if ((v23 & 0x800000) != 0)
    {
      v35 = *((_DWORD *)this + 68);
      v36 = (9 * (__clz(v35 | 1) ^ 0x1F) + 73) >> 6;
      if (v35 >= 0)
        v37 = v36;
      else
        v37 = 10;
      v19 += v37 + 1;
    }
  }
  if (!HIBYTE(v23))
    goto LABEL_94;
  if ((v23 & 0x1000000) != 0)
  {
    v38 = *((_DWORD *)this + 69);
    v39 = (9 * (__clz(v38 | 1) ^ 0x1F) + 73) >> 6;
    if (v38 >= 0)
      v40 = v39;
    else
      v40 = 10;
    v19 += v40 + 1;
  }
  v41 = v19 + 5;
  if ((v23 & 0x2000000) == 0)
    v41 = v19;
  if ((v23 & 0x4000000) != 0)
  {
    v42 = *((_DWORD *)this + 71);
    v43 = (9 * (__clz(v42 | 1) ^ 0x1F) + 73) >> 6;
    if (v42 >= 0)
      v44 = v43;
    else
      v44 = 10;
    v41 += v44 + 1;
  }
  if ((v23 & 0x8000000) != 0)
    v19 = v41 + 5;
  else
    v19 = v41;
  if ((v23 & 0x10000000) == 0)
  {
    if ((v23 & 0x20000000) == 0)
      goto LABEL_92;
LABEL_164:
    v91 = *((_DWORD *)this + 74);
    v92 = ((9 * (__clz(v91 | 1) ^ 0x1F) + 73) >> 6) + 2;
    if (v91 >= 0)
      v93 = v92;
    else
      v93 = 12;
    v19 += v93;
    if ((v23 & 0x40000000) == 0)
    {
LABEL_93:
      if ((v23 & 0x80000000) == 0)
        goto LABEL_94;
      goto LABEL_172;
    }
    goto LABEL_168;
  }
  v88 = *((_DWORD *)this + 73);
  v89 = (9 * (__clz(v88 | 1) ^ 0x1F) + 73) >> 6;
  if (v88 >= 0)
    v90 = v89;
  else
    v90 = 10;
  v19 += v90 + 2;
  if ((v23 & 0x20000000) != 0)
    goto LABEL_164;
LABEL_92:
  if ((v23 & 0x40000000) == 0)
    goto LABEL_93;
LABEL_168:
  v94 = *((_DWORD *)this + 75);
  v95 = ((9 * (__clz(v94 | 1) ^ 0x1F) + 73) >> 6) + 2;
  if (v94 >= 0)
    v96 = v95;
  else
    v96 = 12;
  v19 += v96;
  if ((v23 & 0x80000000) != 0)
  {
LABEL_172:
    v97 = *((_DWORD *)this + 76);
    v98 = ((9 * (__clz(v97 | 1) ^ 0x1F) + 73) >> 6) + 2;
    if (v97 >= 0)
      v99 = v98;
    else
      v99 = 12;
    v19 += v99;
  }
LABEL_94:
  v45 = *((_DWORD *)this + 11);
  if ((_BYTE)v45)
  {
    v46 = v19 + 3;
    if ((v45 & 1) == 0)
      v46 = v19;
    if ((v45 & 2) != 0)
      v46 += 3;
    if ((v45 & 4) != 0)
      v46 += 3;
    if ((v45 & 8) != 0)
      v46 += 3;
    if ((v45 & 0x10) != 0)
      v46 += 3;
    if ((v45 & 0x20) != 0)
      v19 = v46 + 3;
    else
      v19 = v46;
    if ((v45 & 0x40) != 0)
    {
      v47 = *((_DWORD *)this + 79);
      v48 = ((9 * (__clz(v47 | 1) ^ 0x1F) + 73) >> 6) + 2;
      if (v47 >= 0)
        v49 = v48;
      else
        v49 = 12;
      v19 += v49;
    }
    if ((v45 & 0x80) != 0)
    {
      v50 = *((_DWORD *)this + 80);
      v51 = ((9 * (__clz(v50 | 1) ^ 0x1F) + 73) >> 6) + 2;
      if (v50 >= 0)
        v52 = v51;
      else
        v52 = 12;
      v19 += v52;
    }
  }
  if ((v45 & 0x100) != 0)
  {
    v53 = *((_DWORD *)this + 81);
    v54 = ((9 * (__clz(v53 | 1) ^ 0x1F) + 73) >> 6) + 2;
    if (v53 >= 0)
      v55 = v54;
    else
      v55 = 12;
    v19 += v55;
  }
  v56 = *((_QWORD *)this + 1);
  if ((v56 & 1) != 0)
  {
    v100 = v56 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v100 + 31) < 0)
      v101 = *(_QWORD *)(v100 + 16);
    else
      v101 = *(unsigned __int8 *)(v100 + 31);
    v19 += v101;
  }
  *((_DWORD *)this + 12) = v19;
  return v19;
}

void sentencepiece::TrainerSpec::CheckTypeAndMergeFrom(sentencepiece::TrainerSpec *this, const google::protobuf::MessageLite *a2, uint64_t a3)
{
  if (*(void (***)(sentencepiece::TrainerSpec *__hidden))a2 != &off_2516E2648)
    sentencepiece::SentencePieceText_SentencePiece::CheckTypeAndMergeFrom((uint64_t)this, (uint64_t)a2, a3);
  sentencepiece::TrainerSpec::MergeFrom(this, a2);
}

void sentencepiece::TrainerSpec::MergeFrom(sentencepiece::TrainerSpec *this, const sentencepiece::TrainerSpec *a2)
{
  std::string *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  std::string *v9;
  int v10;
  const std::string::value_type *v11;
  std::string::size_type v12;
  unsigned int v13;
  __int128 *v14;
  uint64_t v15;
  google::protobuf::internal::ArenaImpl *v16;
  __int128 *v17;
  uint64_t v18;
  google::protobuf::internal::ArenaImpl *v19;
  __int128 *v20;
  uint64_t v21;
  google::protobuf::internal::ArenaImpl *v22;
  __int128 *v23;
  uint64_t v24;
  google::protobuf::internal::ArenaImpl *v25;
  __int128 *v26;
  uint64_t v27;
  google::protobuf::internal::ArenaImpl *v28;
  __int128 *v29;
  uint64_t v30;
  google::protobuf::internal::ArenaImpl *v31;
  __int128 *v32;
  uint64_t v33;
  google::protobuf::internal::ArenaImpl *v34;
  __int128 *v35;
  uint64_t v36;
  google::protobuf::internal::ArenaImpl *v37;
  int v38;
  int v39;
  __int128 *v40;
  uint64_t v41;
  google::protobuf::internal::ArenaImpl *v42;
  char v43;
  std::string v44[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v44, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 1671);
    v4 = google::protobuf::internal::LogMessage::operator<<(v44, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v43, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v44[0].__r_.__value_.__l.__data_);
  }
  google::protobuf::internal::ExtensionSet::MergeFrom((sentencepiece::TrainerSpec *)((char *)this + 16), (const sentencepiece::TrainerSpec *)((char *)a2 + 16));
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
  {
    v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
    v7 = (v5 & 0xFFFFFFFFFFFFFFFELL) + 8;
    v8 = *((_QWORD *)this + 1);
    if ((v8 & 1) != 0)
      v9 = (std::string *)((v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
    else
      v9 = (std::string *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<std::string>((uint64_t *)this + 1);
    v10 = *(char *)(v6 + 31);
    if (v10 >= 0)
      v11 = (const std::string::value_type *)v7;
    else
      v11 = *(const std::string::value_type **)(v6 + 8);
    if (v10 >= 0)
      v12 = *(unsigned __int8 *)(v6 + 31);
    else
      v12 = *(_QWORD *)(v6 + 16);
    std::string::append(v9, v11, v12);
  }
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 56, (uint64_t)a2 + 56);
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 80, (uint64_t)a2 + 80);
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 104, (uint64_t)a2 + 104);
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 128, (uint64_t)a2 + 128);
  v13 = *((_DWORD *)a2 + 10);
  if (!(_BYTE)v13)
    goto LABEL_47;
  if ((v13 & 1) != 0)
  {
    v14 = (__int128 *)(*((_QWORD *)a2 + 19) & 0xFFFFFFFFFFFFFFFELL);
    *((_DWORD *)this + 10) |= 1u;
    v15 = *((_QWORD *)this + 1);
    v16 = (google::protobuf::internal::ArenaImpl *)(v15 & 0xFFFFFFFFFFFFFFFELL);
    if ((v15 & 1) != 0)
      v16 = *(google::protobuf::internal::ArenaImpl **)v16;
    google::protobuf::internal::ArenaStringPtr::Set((sentencepiece::TrainerSpec *)((char *)this + 152), v14, v16);
    if ((v13 & 2) == 0)
    {
LABEL_16:
      if ((v13 & 4) == 0)
        goto LABEL_17;
      goto LABEL_29;
    }
  }
  else if ((v13 & 2) == 0)
  {
    goto LABEL_16;
  }
  v17 = (__int128 *)(*((_QWORD *)a2 + 20) & 0xFFFFFFFFFFFFFFFELL);
  *((_DWORD *)this + 10) |= 2u;
  v18 = *((_QWORD *)this + 1);
  v19 = (google::protobuf::internal::ArenaImpl *)(v18 & 0xFFFFFFFFFFFFFFFELL);
  if ((v18 & 1) != 0)
    v19 = *(google::protobuf::internal::ArenaImpl **)v19;
  google::protobuf::internal::ArenaStringPtr::Set((sentencepiece::TrainerSpec *)((char *)this + 160), v17, v19);
  if ((v13 & 4) == 0)
  {
LABEL_17:
    if ((v13 & 8) == 0)
      goto LABEL_18;
    goto LABEL_32;
  }
LABEL_29:
  v20 = (__int128 *)(*((_QWORD *)a2 + 21) & 0xFFFFFFFFFFFFFFFELL);
  *((_DWORD *)this + 10) |= 4u;
  v21 = *((_QWORD *)this + 1);
  v22 = (google::protobuf::internal::ArenaImpl *)(v21 & 0xFFFFFFFFFFFFFFFELL);
  if ((v21 & 1) != 0)
    v22 = *(google::protobuf::internal::ArenaImpl **)v22;
  google::protobuf::internal::ArenaStringPtr::Set((sentencepiece::TrainerSpec *)((char *)this + 168), v20, v22);
  if ((v13 & 8) == 0)
  {
LABEL_18:
    if ((v13 & 0x10) == 0)
      goto LABEL_19;
    goto LABEL_35;
  }
LABEL_32:
  v23 = (__int128 *)(*((_QWORD *)a2 + 22) & 0xFFFFFFFFFFFFFFFELL);
  *((_DWORD *)this + 10) |= 8u;
  v24 = *((_QWORD *)this + 1);
  v25 = (google::protobuf::internal::ArenaImpl *)(v24 & 0xFFFFFFFFFFFFFFFELL);
  if ((v24 & 1) != 0)
    v25 = *(google::protobuf::internal::ArenaImpl **)v25;
  google::protobuf::internal::ArenaStringPtr::Set((sentencepiece::TrainerSpec *)((char *)this + 176), v23, v25);
  if ((v13 & 0x10) == 0)
  {
LABEL_19:
    if ((v13 & 0x20) == 0)
      goto LABEL_20;
LABEL_38:
    v29 = (__int128 *)(*((_QWORD *)a2 + 24) & 0xFFFFFFFFFFFFFFFELL);
    *((_DWORD *)this + 10) |= 0x20u;
    v30 = *((_QWORD *)this + 1);
    v31 = (google::protobuf::internal::ArenaImpl *)(v30 & 0xFFFFFFFFFFFFFFFELL);
    if ((v30 & 1) != 0)
      v31 = *(google::protobuf::internal::ArenaImpl **)v31;
    google::protobuf::internal::ArenaStringPtr::Set((sentencepiece::TrainerSpec *)((char *)this + 192), v29, v31);
    if ((v13 & 0x40) == 0)
    {
LABEL_21:
      if ((v13 & 0x80) == 0)
        goto LABEL_47;
      goto LABEL_44;
    }
    goto LABEL_41;
  }
LABEL_35:
  v26 = (__int128 *)(*((_QWORD *)a2 + 23) & 0xFFFFFFFFFFFFFFFELL);
  *((_DWORD *)this + 10) |= 0x10u;
  v27 = *((_QWORD *)this + 1);
  v28 = (google::protobuf::internal::ArenaImpl *)(v27 & 0xFFFFFFFFFFFFFFFELL);
  if ((v27 & 1) != 0)
    v28 = *(google::protobuf::internal::ArenaImpl **)v28;
  google::protobuf::internal::ArenaStringPtr::Set((sentencepiece::TrainerSpec *)((char *)this + 184), v26, v28);
  if ((v13 & 0x20) != 0)
    goto LABEL_38;
LABEL_20:
  if ((v13 & 0x40) == 0)
    goto LABEL_21;
LABEL_41:
  v32 = (__int128 *)(*((_QWORD *)a2 + 25) & 0xFFFFFFFFFFFFFFFELL);
  *((_DWORD *)this + 10) |= 0x40u;
  v33 = *((_QWORD *)this + 1);
  v34 = (google::protobuf::internal::ArenaImpl *)(v33 & 0xFFFFFFFFFFFFFFFELL);
  if ((v33 & 1) != 0)
    v34 = *(google::protobuf::internal::ArenaImpl **)v34;
  google::protobuf::internal::ArenaStringPtr::Set((sentencepiece::TrainerSpec *)((char *)this + 200), v32, v34);
  if ((v13 & 0x80) != 0)
  {
LABEL_44:
    v35 = (__int128 *)(*((_QWORD *)a2 + 26) & 0xFFFFFFFFFFFFFFFELL);
    *((_DWORD *)this + 10) |= 0x80u;
    v36 = *((_QWORD *)this + 1);
    v37 = (google::protobuf::internal::ArenaImpl *)(v36 & 0xFFFFFFFFFFFFFFFELL);
    if ((v36 & 1) != 0)
      v37 = *(google::protobuf::internal::ArenaImpl **)v37;
    google::protobuf::internal::ArenaStringPtr::Set((sentencepiece::TrainerSpec *)((char *)this + 208), v35, v37);
  }
LABEL_47:
  if ((v13 & 0xFF00) == 0)
    goto LABEL_58;
  if ((v13 & 0x100) != 0)
  {
    v40 = (__int128 *)(*((_QWORD *)a2 + 27) & 0xFFFFFFFFFFFFFFFELL);
    *((_DWORD *)this + 10) |= 0x100u;
    v41 = *((_QWORD *)this + 1);
    v42 = (google::protobuf::internal::ArenaImpl *)(v41 & 0xFFFFFFFFFFFFFFFELL);
    if ((v41 & 1) != 0)
      v42 = *(google::protobuf::internal::ArenaImpl **)v42;
    google::protobuf::internal::ArenaStringPtr::Set((sentencepiece::TrainerSpec *)((char *)this + 216), v40, v42);
    if ((v13 & 0x200) == 0)
    {
LABEL_50:
      if ((v13 & 0x400) == 0)
        goto LABEL_51;
      goto LABEL_97;
    }
  }
  else if ((v13 & 0x200) == 0)
  {
    goto LABEL_50;
  }
  *((_DWORD *)this + 56) = *((_DWORD *)a2 + 56);
  if ((v13 & 0x400) == 0)
  {
LABEL_51:
    if ((v13 & 0x800) == 0)
      goto LABEL_52;
    goto LABEL_98;
  }
LABEL_97:
  *((_DWORD *)this + 57) = *((_DWORD *)a2 + 57);
  if ((v13 & 0x800) == 0)
  {
LABEL_52:
    if ((v13 & 0x1000) == 0)
      goto LABEL_53;
    goto LABEL_99;
  }
LABEL_98:
  *((_QWORD *)this + 29) = *((_QWORD *)a2 + 29);
  if ((v13 & 0x1000) == 0)
  {
LABEL_53:
    if ((v13 & 0x2000) == 0)
      goto LABEL_54;
    goto LABEL_100;
  }
LABEL_99:
  *((_DWORD *)this + 60) = *((_DWORD *)a2 + 60);
  if ((v13 & 0x2000) == 0)
  {
LABEL_54:
    if ((v13 & 0x4000) == 0)
      goto LABEL_55;
LABEL_101:
    *((_BYTE *)this + 245) = *((_BYTE *)a2 + 245);
    if ((v13 & 0x8000) == 0)
      goto LABEL_57;
    goto LABEL_56;
  }
LABEL_100:
  *((_BYTE *)this + 244) = *((_BYTE *)a2 + 244);
  if ((v13 & 0x4000) != 0)
    goto LABEL_101;
LABEL_55:
  if ((v13 & 0x8000) != 0)
LABEL_56:
    *((_BYTE *)this + 246) = *((_BYTE *)a2 + 246);
LABEL_57:
  *((_DWORD *)this + 10) |= v13;
LABEL_58:
  if ((v13 & 0xFF0000) == 0)
    goto LABEL_69;
  if ((v13 & 0x10000) != 0)
  {
    *((_BYTE *)this + 247) = *((_BYTE *)a2 + 247);
    if ((v13 & 0x20000) == 0)
    {
LABEL_61:
      if ((v13 & 0x40000) == 0)
        goto LABEL_62;
      goto LABEL_105;
    }
  }
  else if ((v13 & 0x20000) == 0)
  {
    goto LABEL_61;
  }
  *((_BYTE *)this + 248) = *((_BYTE *)a2 + 248);
  if ((v13 & 0x40000) == 0)
  {
LABEL_62:
    if ((v13 & 0x80000) == 0)
      goto LABEL_63;
    goto LABEL_106;
  }
LABEL_105:
  *((_BYTE *)this + 249) = *((_BYTE *)a2 + 249);
  if ((v13 & 0x80000) == 0)
  {
LABEL_63:
    if ((v13 & 0x100000) == 0)
      goto LABEL_64;
    goto LABEL_107;
  }
LABEL_106:
  *((_BYTE *)this + 250) = *((_BYTE *)a2 + 250);
  if ((v13 & 0x100000) == 0)
  {
LABEL_64:
    if ((v13 & 0x200000) == 0)
      goto LABEL_65;
    goto LABEL_108;
  }
LABEL_107:
  *((_DWORD *)this + 63) = *((_DWORD *)a2 + 63);
  if ((v13 & 0x200000) == 0)
  {
LABEL_65:
    if ((v13 & 0x400000) == 0)
      goto LABEL_66;
LABEL_109:
    *((_QWORD *)this + 33) = *((_QWORD *)a2 + 33);
    if ((v13 & 0x800000) == 0)
      goto LABEL_68;
    goto LABEL_67;
  }
LABEL_108:
  *((_DWORD *)this + 64) = *((_DWORD *)a2 + 64);
  if ((v13 & 0x400000) != 0)
    goto LABEL_109;
LABEL_66:
  if ((v13 & 0x800000) != 0)
LABEL_67:
    *((_DWORD *)this + 68) = *((_DWORD *)a2 + 68);
LABEL_68:
  *((_DWORD *)this + 10) |= v13;
LABEL_69:
  if (!HIBYTE(v13))
    goto LABEL_79;
  if ((v13 & 0x1000000) != 0)
  {
    *((_DWORD *)this + 69) = *((_DWORD *)a2 + 69);
    if ((v13 & 0x2000000) == 0)
    {
LABEL_72:
      if ((v13 & 0x4000000) == 0)
        goto LABEL_73;
      goto LABEL_121;
    }
  }
  else if ((v13 & 0x2000000) == 0)
  {
    goto LABEL_72;
  }
  *((_DWORD *)this + 70) = *((_DWORD *)a2 + 70);
  if ((v13 & 0x4000000) == 0)
  {
LABEL_73:
    if ((v13 & 0x8000000) == 0)
      goto LABEL_74;
    goto LABEL_122;
  }
LABEL_121:
  *((_DWORD *)this + 71) = *((_DWORD *)a2 + 71);
  if ((v13 & 0x8000000) == 0)
  {
LABEL_74:
    if ((v13 & 0x10000000) == 0)
      goto LABEL_75;
    goto LABEL_123;
  }
LABEL_122:
  *((_DWORD *)this + 72) = *((_DWORD *)a2 + 72);
  if ((v13 & 0x10000000) == 0)
  {
LABEL_75:
    if ((v13 & 0x20000000) == 0)
      goto LABEL_76;
    goto LABEL_124;
  }
LABEL_123:
  *((_DWORD *)this + 73) = *((_DWORD *)a2 + 73);
  if ((v13 & 0x20000000) == 0)
  {
LABEL_76:
    if ((v13 & 0x40000000) == 0)
      goto LABEL_77;
LABEL_125:
    *((_DWORD *)this + 75) = *((_DWORD *)a2 + 75);
    if ((v13 & 0x80000000) == 0)
      goto LABEL_78;
LABEL_126:
    *((_DWORD *)this + 76) = *((_DWORD *)a2 + 76);
    goto LABEL_78;
  }
LABEL_124:
  *((_DWORD *)this + 74) = *((_DWORD *)a2 + 74);
  if ((v13 & 0x40000000) != 0)
    goto LABEL_125;
LABEL_77:
  if ((v13 & 0x80000000) != 0)
    goto LABEL_126;
LABEL_78:
  *((_DWORD *)this + 10) |= v13;
LABEL_79:
  v38 = *((_DWORD *)a2 + 11);
  if (!(_BYTE)v38)
    goto LABEL_90;
  if ((v38 & 1) != 0)
  {
    *((_BYTE *)this + 308) = *((_BYTE *)a2 + 308);
    if ((v38 & 2) == 0)
    {
LABEL_82:
      if ((v38 & 4) == 0)
        goto LABEL_83;
      goto LABEL_113;
    }
  }
  else if ((v38 & 2) == 0)
  {
    goto LABEL_82;
  }
  *((_BYTE *)this + 309) = *((_BYTE *)a2 + 309);
  if ((v38 & 4) == 0)
  {
LABEL_83:
    if ((v38 & 8) == 0)
      goto LABEL_84;
    goto LABEL_114;
  }
LABEL_113:
  *((_BYTE *)this + 310) = *((_BYTE *)a2 + 310);
  if ((v38 & 8) == 0)
  {
LABEL_84:
    if ((v38 & 0x10) == 0)
      goto LABEL_85;
    goto LABEL_115;
  }
LABEL_114:
  *((_BYTE *)this + 311) = *((_BYTE *)a2 + 311);
  if ((v38 & 0x10) == 0)
  {
LABEL_85:
    if ((v38 & 0x20) == 0)
      goto LABEL_86;
    goto LABEL_116;
  }
LABEL_115:
  *((_BYTE *)this + 312) = *((_BYTE *)a2 + 312);
  if ((v38 & 0x20) == 0)
  {
LABEL_86:
    if ((v38 & 0x40) == 0)
      goto LABEL_87;
LABEL_117:
    *((_DWORD *)this + 79) = *((_DWORD *)a2 + 79);
    if ((v38 & 0x80) == 0)
      goto LABEL_89;
    goto LABEL_88;
  }
LABEL_116:
  *((_BYTE *)this + 313) = *((_BYTE *)a2 + 313);
  if ((v38 & 0x40) != 0)
    goto LABEL_117;
LABEL_87:
  if ((v38 & 0x80) != 0)
LABEL_88:
    *((_DWORD *)this + 80) = *((_DWORD *)a2 + 80);
LABEL_89:
  *((_DWORD *)this + 11) |= v38;
LABEL_90:
  if ((v38 & 0x100) != 0)
  {
    v39 = *((_DWORD *)a2 + 81);
    *((_DWORD *)this + 11) |= 0x100u;
    *((_DWORD *)this + 81) = v39;
  }
}

void sub_245C72A10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sentencepiece::TrainerSpec::IsInitialized(sentencepiece::TrainerSpec *this)
{
  return google::protobuf::internal::ExtensionSet::IsInitialized((sentencepiece::TrainerSpec *)((char *)this + 16));
}

_QWORD *sentencepiece::TrainerSpec::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "sentencepiece.TrainerSpec");
}

uint64_t sentencepiece::NormalizerSpec::NormalizerSpec(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = &off_2516E2838;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = &unk_2516E28D8;
  google::protobuf::internal::ExtensionSet::ExtensionSet(a1 + 24, a2);
  *(_QWORD *)(a1 + 48) = 0;
  if (atomic_load(scc_info_NormalizerSpec_sentencepiece_5fmodel_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_NormalizerSpec_sentencepiece_5fmodel_2eproto);
  *(_QWORD *)(a1 + 56) = &google::protobuf::internal::fixed_address_empty_string;
  *(_QWORD *)(a1 + 64) = &google::protobuf::internal::fixed_address_empty_string;
  *(_QWORD *)(a1 + 72) = &google::protobuf::internal::fixed_address_empty_string;
  *(_DWORD *)(a1 + 80) = 16843008;
  return a1;
}

void sub_245C72AC0(_Unwind_Exception *a1)
{
  google::protobuf::internal::ExtensionSet *v1;

  google::protobuf::internal::ExtensionSet::~ExtensionSet(v1);
  _Unwind_Resume(a1);
}

void sentencepiece::NormalizerSpec::~NormalizerSpec(sentencepiece::NormalizerSpec *this)
{
  sentencepiece::NormalizerSpec::SharedDtor(this);
  google::protobuf::internal::InternalMetadata::Delete<std::string>((uint64_t *)this + 1);
  google::protobuf::internal::ExtensionSet::~ExtensionSet((sentencepiece::NormalizerSpec *)((char *)this + 24));
}

{
  sentencepiece::NormalizerSpec::~NormalizerSpec(this);
  JUMPOUT(0x249544F58);
}

google::protobuf::internal::ArenaStringPtr *sentencepiece::NormalizerSpec::SharedDtor(sentencepiece::NormalizerSpec *this)
{
  uint64_t v2;
  _QWORD *v3;
  std::string *v4;
  uint64_t v5;
  uint64_t v6;
  google::protobuf::internal::ArenaStringPtr *result;
  uint64_t v8;
  uint64_t v9;
  google::protobuf::internal::ArenaStringPtr *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  std::string v15[2];

  v2 = *((_QWORD *)this + 1);
  v3 = (_QWORD *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  if ((v2 & 1) == 0)
  {
    if (!v3)
      goto LABEL_4;
    goto LABEL_3;
  }
  if (*v3)
  {
LABEL_3:
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 1972);
    v4 = google::protobuf::internal::LogMessage::operator<<(v15, "CHECK failed: GetArena() == nullptr: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v14, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v15[0].__r_.__value_.__l.__data_);
  }
LABEL_4:
  if (*((uint64_t **)this + 7) != &google::protobuf::internal::fixed_address_empty_string)
  {
    v5 = google::protobuf::internal::ArenaStringPtr::UnsafeMutablePointer((sentencepiece::NormalizerSpec *)((char *)this + 56));
    v6 = v5;
    if (*(char *)(v5 + 23) < 0)
      operator delete(*(void **)v5);
    MEMORY[0x249544F58](v6, 0x1012C40EC159624);
  }
  result = (sentencepiece::NormalizerSpec *)((char *)this + 64);
  if (*((uint64_t **)this + 8) != &google::protobuf::internal::fixed_address_empty_string)
  {
    v8 = google::protobuf::internal::ArenaStringPtr::UnsafeMutablePointer(result);
    v9 = v8;
    if (*(char *)(v8 + 23) < 0)
      operator delete(*(void **)v8);
    result = (google::protobuf::internal::ArenaStringPtr *)MEMORY[0x249544F58](v9, 0x1012C40EC159624);
  }
  v11 = (uint64_t *)*((_QWORD *)this + 9);
  v10 = (sentencepiece::NormalizerSpec *)((char *)this + 72);
  if (v11 != &google::protobuf::internal::fixed_address_empty_string)
  {
    v12 = google::protobuf::internal::ArenaStringPtr::UnsafeMutablePointer(v10);
    v13 = v12;
    if (*(char *)(v12 + 23) < 0)
      operator delete(*(void **)v12);
    return (google::protobuf::internal::ArenaStringPtr *)MEMORY[0x249544F58](v13, 0x1012C40EC159624);
  }
  return result;
}

void sub_245C72C58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'sentencepiece::NormalizerSpec::~NormalizerSpec(sentencepiece::NormalizerSpec *this)
{
  sentencepiece::NormalizerSpec::~NormalizerSpec((sentencepiece::NormalizerSpec *)((char *)this - 16));
}

{
  sentencepiece::NormalizerSpec::~NormalizerSpec((sentencepiece::NormalizerSpec *)((char *)this - 16));
  JUMPOUT(0x249544F58);
}

void sentencepiece::NormalizerSpec::Clear(sentencepiece::NormalizerSpec *this)
{
  int v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  google::protobuf::internal::ExtensionSet::Clear((sentencepiece::NormalizerSpec *)((char *)this + 24));
  v2 = *((_DWORD *)this + 12);
  if ((v2 & 7) != 0)
  {
    if ((v2 & 1) == 0)
    {
      if ((v2 & 2) == 0)
        goto LABEL_4;
LABEL_10:
      v4 = *((_QWORD *)this + 8) & 0xFFFFFFFFFFFFFFFELL;
      if (*(char *)(v4 + 23) < 0)
      {
        **(_BYTE **)v4 = 0;
        *(_QWORD *)(v4 + 8) = 0;
        if ((v2 & 4) == 0)
          goto LABEL_17;
      }
      else
      {
        *(_BYTE *)v4 = 0;
        *(_BYTE *)(v4 + 23) = 0;
        if ((v2 & 4) == 0)
          goto LABEL_17;
      }
      goto LABEL_14;
    }
    v3 = *((_QWORD *)this + 7) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v3 + 23) < 0)
    {
      **(_BYTE **)v3 = 0;
      *(_QWORD *)(v3 + 8) = 0;
      if ((v2 & 2) != 0)
        goto LABEL_10;
    }
    else
    {
      *(_BYTE *)v3 = 0;
      *(_BYTE *)(v3 + 23) = 0;
      if ((v2 & 2) != 0)
        goto LABEL_10;
    }
LABEL_4:
    if ((v2 & 4) == 0)
      goto LABEL_17;
LABEL_14:
    v5 = *((_QWORD *)this + 9) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v5 + 23) < 0)
    {
      **(_BYTE **)v5 = 0;
      *(_QWORD *)(v5 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v5 = 0;
      *(_BYTE *)(v5 + 23) = 0;
    }
  }
LABEL_17:
  if ((v2 & 0x78) != 0)
    *((_DWORD *)this + 20) = 16843008;
  *((_DWORD *)this + 12) = 0;
  v6 = *((_QWORD *)this + 1);
  if ((v6 & 1) != 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v7 + 31) < 0)
    {
      **(_BYTE **)(v7 + 8) = 0;
      *(_QWORD *)(v7 + 16) = 0;
    }
    else
    {
      *(_BYTE *)(v7 + 8) = 0;
      *(_BYTE *)(v7 + 31) = 0;
    }
  }
}

google::protobuf::internal *sentencepiece::NormalizerSpec::_InternalParse(sentencepiece::NormalizerSpec *this, google::protobuf::internal *a2, int32x2_t *a3)
{
  int v5;
  _QWORD *v7;
  google::protobuf::internal *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  google::protobuf::internal::ArenaImpl *v12;
  uint64_t **v13;
  google::protobuf::internal *v14;
  unint64_t v15;
  int v16;
  google::protobuf::internal *TagFallback;
  unsigned int v18;
  uint64_t v19;
  google::protobuf::internal *v20;
  unint64_t v21;
  int v22;
  google::protobuf::internal *v23;
  unint64_t v24;
  int v25;
  google::protobuf::internal *v26;
  unint64_t v27;
  int v28;
  uint64_t v29;
  std::string *v30;
  google::protobuf::internal *v31;
  BOOL v32;
  std::string *v33;
  google::protobuf::internal *v34;
  uint64_t v35;
  google::protobuf::internal *v36;
  uint64_t v37;
  google::protobuf::internal *v38;
  uint64_t v39;
  google::protobuf::internal *v40;
  uint64_t v41;
  google::protobuf::internal *v42;

  v42 = a2;
  v5 = 0;
  if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck((google::protobuf::internal::EpsCopyInputStream *)a3, (const char **)&v42, a3[11].i32[1]) & 1) == 0)
  {
    v7 = (_QWORD *)((char *)this + 8);
    while (1)
    {
      v8 = (google::protobuf::internal *)((char *)v42 + 1);
      v9 = *(unsigned __int8 *)v42;
      if (*(char *)v42 < 0)
      {
        v10 = v9 + (*(unsigned __int8 *)v8 << 7);
        v9 = v10 - 128;
        if (*(char *)v8 < 0)
        {
          TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v42, (const char *)(v10 - 128));
          v42 = TagFallback;
          if (!TagFallback)
            goto LABEL_67;
          v8 = TagFallback;
          v9 = v18;
          goto LABEL_8;
        }
        v8 = (google::protobuf::internal *)((char *)v42 + 2);
      }
      v42 = v8;
LABEL_8:
      switch(v9 >> 3)
      {
        case 1u:
          if (v9 != 10)
            goto LABEL_48;
          *((_DWORD *)this + 12) |= 1u;
          v11 = *((_QWORD *)this + 1);
          v12 = (google::protobuf::internal::ArenaImpl *)(v11 & 0xFFFFFFFFFFFFFFFELL);
          if ((v11 & 1) != 0)
            v12 = *(google::protobuf::internal::ArenaImpl **)v12;
          v13 = (uint64_t **)((char *)this + 56);
          goto LABEL_44;
        case 2u:
          if (v9 != 18)
            goto LABEL_48;
          *((_DWORD *)this + 12) |= 2u;
          v19 = *((_QWORD *)this + 1);
          v12 = (google::protobuf::internal::ArenaImpl *)(v19 & 0xFFFFFFFFFFFFFFFELL);
          if ((v19 & 1) != 0)
            v12 = *(google::protobuf::internal::ArenaImpl **)v12;
          v13 = (uint64_t **)((char *)this + 64);
          goto LABEL_44;
        case 3u:
          if (v9 != 24)
            goto LABEL_48;
          v5 |= 0x10u;
          v20 = (google::protobuf::internal *)((char *)v8 + 1);
          v21 = *(unsigned __int8 *)v8;
          if ((*(char *)v8 & 0x80000000) == 0)
            goto LABEL_29;
          v22 = *(char *)v20;
          v21 = v21 + (v22 << 7) - 128;
          if (v22 < 0)
          {
            v36 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(v8, v21);
            v42 = v36;
            *((_BYTE *)this + 81) = v37 != 0;
            if (!v36)
              goto LABEL_67;
          }
          else
          {
            v20 = (google::protobuf::internal *)((char *)v8 + 2);
LABEL_29:
            v42 = v20;
            *((_BYTE *)this + 81) = v21 != 0;
          }
          goto LABEL_46;
        case 4u:
          if (v9 != 32)
            goto LABEL_48;
          v5 |= 0x20u;
          v23 = (google::protobuf::internal *)((char *)v8 + 1);
          v24 = *(unsigned __int8 *)v8;
          if ((*(char *)v8 & 0x80000000) == 0)
            goto LABEL_34;
          v25 = *(char *)v23;
          v24 = v24 + (v25 << 7) - 128;
          if (v25 < 0)
          {
            v38 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(v8, v24);
            v42 = v38;
            *((_BYTE *)this + 82) = v39 != 0;
            if (!v38)
              goto LABEL_67;
          }
          else
          {
            v23 = (google::protobuf::internal *)((char *)v8 + 2);
LABEL_34:
            v42 = v23;
            *((_BYTE *)this + 82) = v24 != 0;
          }
          goto LABEL_46;
        case 5u:
          if (v9 != 40)
            goto LABEL_48;
          v5 |= 0x40u;
          v26 = (google::protobuf::internal *)((char *)v8 + 1);
          v27 = *(unsigned __int8 *)v8;
          if ((*(char *)v8 & 0x80000000) == 0)
            goto LABEL_39;
          v28 = *(char *)v26;
          v27 = v27 + (v28 << 7) - 128;
          if (v28 < 0)
          {
            v40 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(v8, v27);
            v42 = v40;
            *((_BYTE *)this + 83) = v41 != 0;
            if (!v40)
              goto LABEL_67;
          }
          else
          {
            v26 = (google::protobuf::internal *)((char *)v8 + 2);
LABEL_39:
            v42 = v26;
            *((_BYTE *)this + 83) = v27 != 0;
          }
          goto LABEL_46;
        case 6u:
          if (v9 != 50)
            goto LABEL_48;
          *((_DWORD *)this + 12) |= 4u;
          v29 = *((_QWORD *)this + 1);
          v12 = (google::protobuf::internal::ArenaImpl *)(v29 & 0xFFFFFFFFFFFFFFFELL);
          if ((v29 & 1) != 0)
            v12 = *(google::protobuf::internal::ArenaImpl **)v12;
          v13 = (uint64_t **)((char *)this + 72);
LABEL_44:
          v30 = (std::string *)google::protobuf::internal::ArenaStringPtr::Mutable(v13, v12);
          v31 = (google::protobuf::internal *)google::protobuf::internal::InlineGreedyStringParser(v30, (std::string::value_type *)v42, (uint64_t)a3);
          goto LABEL_45;
        default:
          if (v9 >> 3 == 200 && v9 == 64)
          {
            v5 |= 8u;
            v14 = (google::protobuf::internal *)((char *)v8 + 1);
            v15 = *(unsigned __int8 *)v8;
            if ((*(char *)v8 & 0x80000000) == 0)
              goto LABEL_18;
            v16 = *(char *)v14;
            v15 = v15 + (v16 << 7) - 128;
            if ((v16 & 0x80000000) == 0)
            {
              v14 = (google::protobuf::internal *)((char *)v8 + 2);
LABEL_18:
              v42 = v14;
              *((_BYTE *)this + 80) = v15 != 0;
              goto LABEL_46;
            }
            v34 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(v8, v15);
            v42 = v34;
            *((_BYTE *)this + 80) = v35 != 0;
            if (!v34)
              goto LABEL_67;
          }
          else
          {
LABEL_48:
            if (v9)
              v32 = (v9 & 7) == 4;
            else
              v32 = 1;
            if (v32)
            {
              a3[10].i32[0] = v9 - 1;
              goto LABEL_2;
            }
            if (v9 < 0x648)
            {
              if ((*v7 & 1) != 0)
              {
                v33 = (std::string *)((*v7 & 0xFFFFFFFFFFFFFFFELL) + 8);
              }
              else
              {
                v33 = (std::string *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<std::string>((uint64_t *)this + 1);
                v8 = v42;
              }
              v31 = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse(v9, v33, v8, (google::protobuf::internal::ParseContext *)a3);
            }
            else
            {
              v31 = (google::protobuf::internal *)google::protobuf::internal::ExtensionSet::ParseField((sentencepiece::NormalizerSpec *)((char *)this + 24), v9, v8, (uint64_t)&sentencepiece::_NormalizerSpec_default_instance_, (uint64_t *)this + 1, a3);
            }
LABEL_45:
            v42 = v31;
            if (!v31)
            {
LABEL_67:
              v42 = 0;
              goto LABEL_2;
            }
          }
LABEL_46:
          if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck((google::protobuf::internal::EpsCopyInputStream *)a3, (const char **)&v42, a3[11].i32[1]) & 1) != 0)goto LABEL_2;
          break;
      }
    }
  }
LABEL_2:
  *((_DWORD *)this + 12) |= v5;
  return v42;
}

unsigned __int8 *sentencepiece::NormalizerSpec::_InternalSerialize(sentencepiece::NormalizerSpec *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3)
{
  char *v4;
  int v6;
  char v7;
  char v8;
  char v9;
  char v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  uint64_t v13;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;

  v4 = a2;
  v6 = *((_DWORD *)this + 12);
  if ((v6 & 1) != 0)
  {
    v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 1, *((_QWORD *)this + 7) & 0xFFFFFFFFFFFFFFFELL, a2);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 0x10) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 2, *((_QWORD *)this + 8) & 0xFFFFFFFFFFFFFFFELL, v4);
  if ((v6 & 0x10) == 0)
  {
LABEL_4:
    if ((v6 & 0x20) == 0)
      goto LABEL_5;
    goto LABEL_14;
  }
LABEL_11:
  if (*(_QWORD *)a3 <= (unint64_t)v4)
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  v7 = *((_BYTE *)this + 81);
  *v4 = 24;
  v4[1] = v7;
  v4 += 2;
  if ((v6 & 0x20) == 0)
  {
LABEL_5:
    if ((v6 & 0x40) == 0)
      goto LABEL_6;
    goto LABEL_17;
  }
LABEL_14:
  if (*(_QWORD *)a3 <= (unint64_t)v4)
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  v8 = *((_BYTE *)this + 82);
  *v4 = 32;
  v4[1] = v8;
  v4 += 2;
  if ((v6 & 0x40) == 0)
  {
LABEL_6:
    if ((v6 & 4) == 0)
      goto LABEL_7;
    goto LABEL_20;
  }
LABEL_17:
  if (*(_QWORD *)a3 <= (unint64_t)v4)
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  v9 = *((_BYTE *)this + 83);
  *v4 = 40;
  v4[1] = v9;
  v4 += 2;
  if ((v6 & 4) == 0)
  {
LABEL_7:
    if ((v6 & 8) == 0)
      goto LABEL_24;
    goto LABEL_21;
  }
LABEL_20:
  v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 6, *((_QWORD *)this + 9) & 0xFFFFFFFFFFFFFFFELL, v4);
  if ((v6 & 8) == 0)
    goto LABEL_24;
LABEL_21:
  if (*(_QWORD *)a3 <= (unint64_t)v4)
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  v10 = *((_BYTE *)this + 80);
  *(_WORD *)v4 = 3264;
  v4[2] = v10;
  v4 += 3;
LABEL_24:
  v11 = google::protobuf::internal::ExtensionSet::_InternalSerialize((sentencepiece::NormalizerSpec *)((char *)this + 24), 201, 0x20000000, (unsigned __int8 *)v4, a3);
  v12 = v11;
  v13 = *((_QWORD *)this + 1);
  if ((v13 & 1) == 0)
    return v12;
  v15 = v13 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v15 + 31) < 0)
  {
    v16 = *(void **)(v15 + 8);
    v17 = *(_QWORD *)(v15 + 16);
  }
  else
  {
    v16 = (void *)(v15 + 8);
    LODWORD(v17) = *(unsigned __int8 *)(v15 + 31);
  }
  if (*(_QWORD *)a3 - (_QWORD)v11 >= (int)v17)
  {
    v18 = (int)v17;
    memcpy(v11, v16, (int)v17);
    v12 += v18;
    return v12;
  }
  return google::protobuf::io::EpsCopyOutputStream::WriteRawFallback(a3, (char *)v16, v17, v11);
}

uint64_t sentencepiece::NormalizerSpec::ByteSizeLong(sentencepiece::NormalizerSpec *this)
{
  uint64_t result;
  int v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;

  result = google::protobuf::internal::ExtensionSet::ByteSize((sentencepiece::NormalizerSpec *)((char *)this + 24));
  v3 = *((_DWORD *)this + 12);
  if ((v3 & 0x7F) == 0)
    goto LABEL_17;
  if ((v3 & 1) == 0)
  {
    if ((v3 & 2) == 0)
      goto LABEL_4;
LABEL_22:
    v12 = *((_QWORD *)this + 8) & 0xFFFFFFFFFFFFFFFELL;
    v13 = *(unsigned __int8 *)(v12 + 23);
    v14 = *(_QWORD *)(v12 + 8);
    if ((v13 & 0x80u) == 0)
      v14 = v13;
    result += v14 + ((9 * (__clz(v14 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v3 & 4) == 0)
      goto LABEL_8;
    goto LABEL_5;
  }
  v9 = *((_QWORD *)this + 7) & 0xFFFFFFFFFFFFFFFELL;
  v10 = *(unsigned __int8 *)(v9 + 23);
  v11 = *(_QWORD *)(v9 + 8);
  if ((v10 & 0x80u) == 0)
    v11 = v10;
  result += v11 + ((9 * (__clz(v11 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v3 & 2) != 0)
    goto LABEL_22;
LABEL_4:
  if ((v3 & 4) != 0)
  {
LABEL_5:
    v4 = *((_QWORD *)this + 9) & 0xFFFFFFFFFFFFFFFELL;
    v5 = *(unsigned __int8 *)(v4 + 23);
    v6 = *(_QWORD *)(v4 + 8);
    if ((v5 & 0x80u) == 0)
      v6 = v5;
    result += v6 + ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_8:
  v7 = result + 3;
  if ((v3 & 8) == 0)
    v7 = result;
  if ((v3 & 0x10) != 0)
    v7 += 2;
  if ((v3 & 0x20) != 0)
    v7 += 2;
  if ((v3 & 0x40) != 0)
    result = v7 + 2;
  else
    result = v7;
LABEL_17:
  v8 = *((_QWORD *)this + 1);
  if ((v8 & 1) != 0)
  {
    v15 = v8 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v15 + 31) < 0)
      v16 = *(_QWORD *)(v15 + 16);
    else
      v16 = *(unsigned __int8 *)(v15 + 31);
    result += v16;
  }
  *((_DWORD *)this + 13) = result;
  return result;
}

void sentencepiece::NormalizerSpec::CheckTypeAndMergeFrom(sentencepiece::NormalizerSpec *this, const google::protobuf::MessageLite *a2, uint64_t a3)
{
  if (*(void (***)(sentencepiece::NormalizerSpec *__hidden))a2 != &off_2516E2838)
    sentencepiece::SentencePieceText_SentencePiece::CheckTypeAndMergeFrom((uint64_t)this, (uint64_t)a2, a3);
  sentencepiece::NormalizerSpec::MergeFrom(this, a2);
}

void sentencepiece::NormalizerSpec::MergeFrom(sentencepiece::NormalizerSpec *this, const sentencepiece::NormalizerSpec *a2)
{
  std::string *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  std::string *v9;
  int v10;
  const std::string::value_type *v11;
  std::string::size_type v12;
  int v13;
  __int128 *v14;
  uint64_t v15;
  google::protobuf::internal::ArenaImpl *v16;
  __int128 *v17;
  uint64_t v18;
  google::protobuf::internal::ArenaImpl *v19;
  __int128 *v20;
  uint64_t v21;
  google::protobuf::internal::ArenaImpl *v22;
  char v23;
  std::string v24[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v24, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 2246);
    v4 = google::protobuf::internal::LogMessage::operator<<(v24, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v23, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v24[0].__r_.__value_.__l.__data_);
  }
  google::protobuf::internal::ExtensionSet::MergeFrom((sentencepiece::NormalizerSpec *)((char *)this + 24), (const sentencepiece::NormalizerSpec *)((char *)a2 + 24));
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
  {
    v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
    v7 = (v5 & 0xFFFFFFFFFFFFFFFELL) + 8;
    v8 = *((_QWORD *)this + 1);
    if ((v8 & 1) != 0)
      v9 = (std::string *)((v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
    else
      v9 = (std::string *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<std::string>((uint64_t *)this + 1);
    v10 = *(char *)(v6 + 31);
    if (v10 >= 0)
      v11 = (const std::string::value_type *)v7;
    else
      v11 = *(const std::string::value_type **)(v6 + 8);
    if (v10 >= 0)
      v12 = *(unsigned __int8 *)(v6 + 31);
    else
      v12 = *(_QWORD *)(v6 + 16);
    std::string::append(v9, v11, v12);
  }
  v13 = *((_DWORD *)a2 + 12);
  if ((v13 & 0x7F) != 0)
  {
    if ((v13 & 1) != 0)
    {
      v14 = (__int128 *)(*((_QWORD *)a2 + 7) & 0xFFFFFFFFFFFFFFFELL);
      *((_DWORD *)this + 12) |= 1u;
      v15 = *((_QWORD *)this + 1);
      v16 = (google::protobuf::internal::ArenaImpl *)(v15 & 0xFFFFFFFFFFFFFFFELL);
      if ((v15 & 1) != 0)
        v16 = *(google::protobuf::internal::ArenaImpl **)v16;
      google::protobuf::internal::ArenaStringPtr::Set((sentencepiece::NormalizerSpec *)((char *)this + 56), v14, v16);
      if ((v13 & 2) == 0)
      {
LABEL_16:
        if ((v13 & 4) == 0)
          goto LABEL_17;
        goto LABEL_30;
      }
    }
    else if ((v13 & 2) == 0)
    {
      goto LABEL_16;
    }
    v17 = (__int128 *)(*((_QWORD *)a2 + 8) & 0xFFFFFFFFFFFFFFFELL);
    *((_DWORD *)this + 12) |= 2u;
    v18 = *((_QWORD *)this + 1);
    v19 = (google::protobuf::internal::ArenaImpl *)(v18 & 0xFFFFFFFFFFFFFFFELL);
    if ((v18 & 1) != 0)
      v19 = *(google::protobuf::internal::ArenaImpl **)v19;
    google::protobuf::internal::ArenaStringPtr::Set((sentencepiece::NormalizerSpec *)((char *)this + 64), v17, v19);
    if ((v13 & 4) == 0)
    {
LABEL_17:
      if ((v13 & 8) == 0)
        goto LABEL_18;
      goto LABEL_33;
    }
LABEL_30:
    v20 = (__int128 *)(*((_QWORD *)a2 + 9) & 0xFFFFFFFFFFFFFFFELL);
    *((_DWORD *)this + 12) |= 4u;
    v21 = *((_QWORD *)this + 1);
    v22 = (google::protobuf::internal::ArenaImpl *)(v21 & 0xFFFFFFFFFFFFFFFELL);
    if ((v21 & 1) != 0)
      v22 = *(google::protobuf::internal::ArenaImpl **)v22;
    google::protobuf::internal::ArenaStringPtr::Set((sentencepiece::NormalizerSpec *)((char *)this + 72), v20, v22);
    if ((v13 & 8) == 0)
    {
LABEL_18:
      if ((v13 & 0x10) == 0)
        goto LABEL_19;
      goto LABEL_34;
    }
LABEL_33:
    *((_BYTE *)this + 80) = *((_BYTE *)a2 + 80);
    if ((v13 & 0x10) == 0)
    {
LABEL_19:
      if ((v13 & 0x20) == 0)
        goto LABEL_20;
      goto LABEL_35;
    }
LABEL_34:
    *((_BYTE *)this + 81) = *((_BYTE *)a2 + 81);
    if ((v13 & 0x20) == 0)
    {
LABEL_20:
      if ((v13 & 0x40) == 0)
      {
LABEL_22:
        *((_DWORD *)this + 12) |= v13;
        return;
      }
LABEL_21:
      *((_BYTE *)this + 83) = *((_BYTE *)a2 + 83);
      goto LABEL_22;
    }
LABEL_35:
    *((_BYTE *)this + 82) = *((_BYTE *)a2 + 82);
    if ((v13 & 0x40) == 0)
      goto LABEL_22;
    goto LABEL_21;
  }
}

void sub_245C73724(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sentencepiece::NormalizerSpec::IsInitialized(sentencepiece::NormalizerSpec *this)
{
  return google::protobuf::internal::ExtensionSet::IsInitialized((sentencepiece::NormalizerSpec *)((char *)this + 24));
}

_QWORD *sentencepiece::NormalizerSpec::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "sentencepiece.NormalizerSpec");
}

void sentencepiece::SelfTestData_Sample::~SelfTestData_Sample(sentencepiece::SelfTestData_Sample *this)
{
  sentencepiece::SelfTestData_Sample::SharedDtor(this);
  google::protobuf::internal::InternalMetadata::Delete<std::string>((uint64_t *)this + 1);
}

{
  sentencepiece::SelfTestData_Sample::~SelfTestData_Sample(this);
  JUMPOUT(0x249544F58);
}

google::protobuf::internal::ArenaStringPtr *sentencepiece::SelfTestData_Sample::SharedDtor(sentencepiece::SelfTestData_Sample *this)
{
  uint64_t v2;
  _QWORD *v3;
  std::string *v4;
  google::protobuf::internal::ArenaStringPtr *result;
  uint64_t v6;
  uint64_t v7;
  google::protobuf::internal::ArenaStringPtr *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  std::string v13[2];

  v2 = *((_QWORD *)this + 1);
  v3 = (_QWORD *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  if ((v2 & 1) == 0)
  {
    if (!v3)
      goto LABEL_4;
    goto LABEL_3;
  }
  if (*v3)
  {
LABEL_3:
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 2362);
    v4 = google::protobuf::internal::LogMessage::operator<<(v13, "CHECK failed: GetArena() == nullptr: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v12, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v13[0].__r_.__value_.__l.__data_);
  }
LABEL_4:
  result = (sentencepiece::SelfTestData_Sample *)((char *)this + 24);
  if (*((uint64_t **)this + 3) != &google::protobuf::internal::fixed_address_empty_string)
  {
    v6 = google::protobuf::internal::ArenaStringPtr::UnsafeMutablePointer(result);
    v7 = v6;
    if (*(char *)(v6 + 23) < 0)
      operator delete(*(void **)v6);
    result = (google::protobuf::internal::ArenaStringPtr *)MEMORY[0x249544F58](v7, 0x1012C40EC159624);
  }
  v9 = (uint64_t *)*((_QWORD *)this + 4);
  v8 = (sentencepiece::SelfTestData_Sample *)((char *)this + 32);
  if (v9 != &google::protobuf::internal::fixed_address_empty_string)
  {
    v10 = google::protobuf::internal::ArenaStringPtr::UnsafeMutablePointer(v8);
    v11 = v10;
    if (*(char *)(v10 + 23) < 0)
      operator delete(*(void **)v10);
    return (google::protobuf::internal::ArenaStringPtr *)MEMORY[0x249544F58](v11, 0x1012C40EC159624);
  }
  return result;
}

void sub_245C73890(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sentencepiece::SelfTestData_Sample::Clear(uint64_t this)
{
  int v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v1 = *(_DWORD *)(this + 16);
  if ((v1 & 3) != 0)
  {
    if ((v1 & 1) != 0)
    {
      v2 = *(_QWORD *)(this + 24) & 0xFFFFFFFFFFFFFFFELL;
      if (*(char *)(v2 + 23) < 0)
      {
        **(_BYTE **)v2 = 0;
        *(_QWORD *)(v2 + 8) = 0;
        if ((v1 & 2) == 0)
          goto LABEL_11;
        goto LABEL_6;
      }
      *(_BYTE *)v2 = 0;
      *(_BYTE *)(v2 + 23) = 0;
    }
    if ((v1 & 2) == 0)
      goto LABEL_11;
LABEL_6:
    v3 = *(_QWORD *)(this + 32) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v3 + 23) < 0)
    {
      **(_BYTE **)v3 = 0;
      *(_QWORD *)(v3 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v3 = 0;
      *(_BYTE *)(v3 + 23) = 0;
    }
  }
LABEL_11:
  *(_DWORD *)(this + 16) = 0;
  v4 = *(_QWORD *)(this + 8);
  if ((v4 & 1) != 0)
  {
    v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v5 + 31) < 0)
    {
      **(_BYTE **)(v5 + 8) = 0;
      *(_QWORD *)(v5 + 16) = 0;
    }
    else
    {
      *(_BYTE *)(v5 + 8) = 0;
      *(_BYTE *)(v5 + 31) = 0;
    }
  }
  return this;
}

google::protobuf::internal *sentencepiece::SelfTestData_Sample::_InternalParse(sentencepiece::SelfTestData_Sample *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  _QWORD *v6;
  google::protobuf::internal *v7;
  unsigned int v8;
  unsigned int v9;
  BOOL v11;
  std::string *v12;
  google::protobuf::internal *v13;
  uint64_t v14;
  google::protobuf::internal::ArenaImpl *v15;
  uint64_t **v16;
  uint64_t v17;
  std::string *v18;
  google::protobuf::internal *TagFallback;
  unsigned int v20;
  google::protobuf::internal *v21;

  v21 = a2;
  if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v21, *((_DWORD *)a3 + 23)) & 1) == 0)
  {
    v6 = (_QWORD *)((char *)this + 8);
    while (1)
    {
      v7 = (google::protobuf::internal *)((char *)v21 + 1);
      v8 = *(unsigned __int8 *)v21;
      if ((*(char *)v21 & 0x80000000) == 0)
        goto LABEL_7;
      v9 = v8 + (*(unsigned __int8 *)v7 << 7);
      v8 = v9 - 128;
      if ((*(char *)v7 & 0x80000000) == 0)
        break;
      TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v21, (const char *)(v9 - 128));
      v21 = TagFallback;
      if (!TagFallback)
        return 0;
      v7 = TagFallback;
      v8 = v20;
LABEL_8:
      if (v8 >> 3 == 2)
      {
        if (v8 == 18)
        {
          *((_DWORD *)this + 4) |= 2u;
          v14 = *((_QWORD *)this + 1);
          v15 = (google::protobuf::internal::ArenaImpl *)(v14 & 0xFFFFFFFFFFFFFFFELL);
          if ((v14 & 1) != 0)
            v15 = *(google::protobuf::internal::ArenaImpl **)v15;
          v16 = (uint64_t **)((char *)this + 32);
          goto LABEL_27;
        }
      }
      else if (v8 >> 3 == 1 && v8 == 10)
      {
        *((_DWORD *)this + 4) |= 1u;
        v17 = *((_QWORD *)this + 1);
        v15 = (google::protobuf::internal::ArenaImpl *)(v17 & 0xFFFFFFFFFFFFFFFELL);
        if ((v17 & 1) != 0)
          v15 = *(google::protobuf::internal::ArenaImpl **)v15;
        v16 = (uint64_t **)((char *)this + 24);
LABEL_27:
        v18 = (std::string *)google::protobuf::internal::ArenaStringPtr::Mutable(v16, v15);
        v13 = (google::protobuf::internal *)google::protobuf::internal::InlineGreedyStringParser(v18, (std::string::value_type *)v21, (uint64_t)a3);
        goto LABEL_28;
      }
      if (v8)
        v11 = (v8 & 7) == 4;
      else
        v11 = 1;
      if (v11)
      {
        *((_DWORD *)a3 + 20) = v8 - 1;
        return v21;
      }
      if ((*v6 & 1) != 0)
      {
        v12 = (std::string *)((*v6 & 0xFFFFFFFFFFFFFFFELL) + 8);
      }
      else
      {
        v12 = (std::string *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<std::string>((uint64_t *)this + 1);
        v7 = v21;
      }
      v13 = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse(v8, v12, v7, a3);
LABEL_28:
      v21 = v13;
      if (!v13)
        return 0;
      if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v21, *((_DWORD *)a3 + 23)) & 1) != 0)
        return v21;
    }
    v7 = (google::protobuf::internal *)((char *)v21 + 2);
LABEL_7:
    v21 = v7;
    goto LABEL_8;
  }
  return v21;
}

unsigned __int8 *sentencepiece::SelfTestData_Sample::_InternalSerialize(sentencepiece::SelfTestData_Sample *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3)
{
  unsigned __int8 *v4;
  int v6;
  uint64_t v7;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;

  v4 = (unsigned __int8 *)a2;
  v6 = *((_DWORD *)this + 4);
  if ((v6 & 1) != 0)
    v4 = google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 1, *((_QWORD *)this + 3) & 0xFFFFFFFFFFFFFFFELL, a2);
  if ((v6 & 2) != 0)
    v4 = google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 2, *((_QWORD *)this + 4) & 0xFFFFFFFFFFFFFFFELL, (char *)v4);
  v7 = *((_QWORD *)this + 1);
  if ((v7 & 1) == 0)
    return v4;
  v9 = v7 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v9 + 31) < 0)
  {
    v10 = *(void **)(v9 + 8);
    v11 = *(_QWORD *)(v9 + 16);
  }
  else
  {
    v10 = (void *)(v9 + 8);
    LODWORD(v11) = *(unsigned __int8 *)(v9 + 31);
  }
  if (*(_QWORD *)a3 - (_QWORD)v4 >= (int)v11)
  {
    v12 = (int)v11;
    memcpy(v4, v10, (int)v11);
    v4 += v12;
    return v4;
  }
  return google::protobuf::io::EpsCopyOutputStream::WriteRawFallback(a3, (char *)v10, v11, v4);
}

uint64_t sentencepiece::SelfTestData_Sample::ByteSizeLong(sentencepiece::SelfTestData_Sample *this)
{
  int v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v11;
  uint64_t v12;

  v1 = *((_DWORD *)this + 4);
  if ((v1 & 3) == 0)
  {
    v2 = 0;
    goto LABEL_12;
  }
  if ((v1 & 1) == 0)
  {
    v2 = 0;
    if ((v1 & 2) == 0)
      goto LABEL_12;
    goto LABEL_9;
  }
  v3 = *((_QWORD *)this + 3) & 0xFFFFFFFFFFFFFFFELL;
  v4 = *(unsigned __int8 *)(v3 + 23);
  v5 = *(_QWORD *)(v3 + 8);
  if ((v4 & 0x80u) == 0)
    v5 = v4;
  v2 = v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v1 & 2) != 0)
  {
LABEL_9:
    v6 = *((_QWORD *)this + 4) & 0xFFFFFFFFFFFFFFFELL;
    v7 = *(unsigned __int8 *)(v6 + 23);
    v8 = *(_QWORD *)(v6 + 8);
    if ((v7 & 0x80u) == 0)
      v8 = v7;
    v2 += v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_12:
  v9 = *((_QWORD *)this + 1);
  if ((v9 & 1) != 0)
  {
    v11 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v11 + 31) < 0)
      v12 = *(_QWORD *)(v11 + 16);
    else
      v12 = *(unsigned __int8 *)(v11 + 31);
    v2 += v12;
  }
  *((_DWORD *)this + 5) = v2;
  return v2;
}

void sentencepiece::SelfTestData_Sample::CheckTypeAndMergeFrom(sentencepiece::SelfTestData_Sample *this, const google::protobuf::MessageLite *a2, uint64_t a3)
{
  if (*(void (***)(sentencepiece::SelfTestData_Sample *__hidden))a2 != &off_2516E2998)
    sentencepiece::SentencePieceText_SentencePiece::CheckTypeAndMergeFrom((uint64_t)this, (uint64_t)a2, a3);
  sentencepiece::SelfTestData_Sample::MergeFrom(this, a2);
}

void sentencepiece::SelfTestData_Sample::MergeFrom(sentencepiece::SelfTestData_Sample *this, const sentencepiece::SelfTestData_Sample *a2)
{
  std::string *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  std::string *v9;
  int v10;
  const std::string::value_type *v11;
  std::string::size_type v12;
  int v13;
  __int128 *v14;
  uint64_t v15;
  google::protobuf::internal::ArenaImpl *v16;
  __int128 *v17;
  uint64_t v18;
  google::protobuf::internal::ArenaImpl *v19;
  char v20;
  std::string v21[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v21, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 2516);
    v4 = google::protobuf::internal::LogMessage::operator<<(v21, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v20, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v21[0].__r_.__value_.__l.__data_);
  }
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
  {
    v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
    v7 = (v5 & 0xFFFFFFFFFFFFFFFELL) + 8;
    v8 = *((_QWORD *)this + 1);
    if ((v8 & 1) != 0)
      v9 = (std::string *)((v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
    else
      v9 = (std::string *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<std::string>((uint64_t *)this + 1);
    v10 = *(char *)(v6 + 31);
    if (v10 >= 0)
      v11 = (const std::string::value_type *)v7;
    else
      v11 = *(const std::string::value_type **)(v6 + 8);
    if (v10 >= 0)
      v12 = *(unsigned __int8 *)(v6 + 31);
    else
      v12 = *(_QWORD *)(v6 + 16);
    std::string::append(v9, v11, v12);
  }
  v13 = *((_DWORD *)a2 + 4);
  if ((v13 & 3) != 0)
  {
    if ((v13 & 1) != 0)
    {
      v14 = (__int128 *)(*((_QWORD *)a2 + 3) & 0xFFFFFFFFFFFFFFFELL);
      *((_DWORD *)this + 4) |= 1u;
      v15 = *((_QWORD *)this + 1);
      v16 = (google::protobuf::internal::ArenaImpl *)(v15 & 0xFFFFFFFFFFFFFFFELL);
      if ((v15 & 1) != 0)
        v16 = *(google::protobuf::internal::ArenaImpl **)v16;
      google::protobuf::internal::ArenaStringPtr::Set((sentencepiece::SelfTestData_Sample *)((char *)this + 24), v14, v16);
    }
    if ((v13 & 2) != 0)
    {
      v17 = (__int128 *)(*((_QWORD *)a2 + 4) & 0xFFFFFFFFFFFFFFFELL);
      *((_DWORD *)this + 4) |= 2u;
      v18 = *((_QWORD *)this + 1);
      v19 = (google::protobuf::internal::ArenaImpl *)(v18 & 0xFFFFFFFFFFFFFFFELL);
      if ((v18 & 1) != 0)
        v19 = *(google::protobuf::internal::ArenaImpl **)v19;
      google::protobuf::internal::ArenaStringPtr::Set((sentencepiece::SelfTestData_Sample *)((char *)this + 32), v17, v19);
    }
  }
}

void sub_245C73E1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sentencepiece::SelfTestData_Sample::IsInitialized(sentencepiece::SelfTestData_Sample *this)
{
  return 1;
}

_QWORD *sentencepiece::SelfTestData_Sample::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "sentencepiece.SelfTestData.Sample");
}

uint64_t sentencepiece::SelfTestData::SelfTestData(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = &off_2516E26C8;
  *(_QWORD *)(a1 + 8) = a2;
  google::protobuf::internal::ExtensionSet::ExtensionSet(a1 + 16, a2);
  *(_QWORD *)(a1 + 40) = a2;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 64) = 0;
  if (atomic_load(scc_info_SelfTestData_sentencepiece_5fmodel_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_SelfTestData_sentencepiece_5fmodel_2eproto);
  return a1;
}

void sub_245C73EC0(_Unwind_Exception *a1)
{
  google::protobuf::internal::ExtensionSet *v1;
  google::protobuf::internal::ArenaImpl **v2;

  google::protobuf::RepeatedPtrField<sentencepiece::SelfTestData_Sample>::~RepeatedPtrField(v2);
  google::protobuf::internal::ExtensionSet::~ExtensionSet(v1);
  _Unwind_Resume(a1);
}

void sentencepiece::SelfTestData::~SelfTestData(sentencepiece::SelfTestData *this)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  std::string *v5;
  char v6;
  std::string v7[2];

  v3 = (uint64_t *)((char *)this + 8);
  v2 = *((_QWORD *)this + 1);
  v4 = (_QWORD *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  if ((v2 & 1) != 0)
  {
    if (!*v4)
      goto LABEL_4;
    goto LABEL_3;
  }
  if (v4)
  {
LABEL_3:
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 2589);
    v5 = google::protobuf::internal::LogMessage::operator<<(v7, "CHECK failed: GetArena() == nullptr: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v6, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v7[0].__r_.__value_.__l.__data_);
  }
LABEL_4:
  google::protobuf::internal::InternalMetadata::Delete<std::string>(v3);
  google::protobuf::RepeatedPtrField<sentencepiece::SelfTestData_Sample>::~RepeatedPtrField((google::protobuf::internal::ArenaImpl **)this + 5);
  google::protobuf::internal::ExtensionSet::~ExtensionSet((sentencepiece::SelfTestData *)((char *)this + 16));
}

{
  sentencepiece::SelfTestData::~SelfTestData(this);
  JUMPOUT(0x249544F58);
}

void sub_245C73F78(void *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  __clang_call_terminate(a1);
}

void sentencepiece::SelfTestData::Clear(sentencepiece::SelfTestData *this)
{
  uint64_t v2;
  unint64_t v3;

  google::protobuf::internal::ExtensionSet::Clear((sentencepiece::SelfTestData *)((char *)this + 16));
  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<sentencepiece::SelfTestData_Sample>::TypeHandler>((uint64_t)this + 40);
  v2 = *((_QWORD *)this + 1);
  if ((v2 & 1) != 0)
  {
    v3 = v2 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v3 + 31) < 0)
    {
      **(_BYTE **)(v3 + 8) = 0;
      *(_QWORD *)(v3 + 16) = 0;
    }
    else
    {
      *(_BYTE *)(v3 + 8) = 0;
      *(_BYTE *)(v3 + 31) = 0;
    }
  }
}

google::protobuf::internal *sentencepiece::SelfTestData::_InternalParse(sentencepiece::SelfTestData *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  _QWORD *v5;
  google::protobuf::internal *v6;
  unsigned int v7;
  unsigned int v8;
  BOOL v9;
  unsigned __int8 *v10;
  char *v11;
  google::protobuf::internal *v12;
  int *v13;
  uint64_t v14;
  int v15;
  sentencepiece::SelfTestData_Sample *v16;
  uint64_t v17;
  uint64_t v18;
  std::string *v19;
  google::protobuf::internal *TagFallback;
  unsigned int v21;
  google::protobuf::internal *v23;

  v23 = a2;
  if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v23, *((_DWORD *)a3 + 23)) & 1) == 0)
  {
    v5 = (_QWORD *)((char *)this + 8);
    while (1)
    {
      v6 = (google::protobuf::internal *)((char *)v23 + 1);
      v7 = *(unsigned __int8 *)v23;
      if ((*(char *)v23 & 0x80000000) == 0)
        goto LABEL_6;
      v8 = v7 + (*(unsigned __int8 *)v6 << 7);
      v7 = v8 - 128;
      if ((*(char *)v6 & 0x80000000) == 0)
        break;
      TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v23, (const char *)(v8 - 128));
      v23 = TagFallback;
      if (!TagFallback)
        return 0;
      v6 = TagFallback;
      v7 = v21;
LABEL_7:
      if (v7 == 10)
      {
        v11 = (char *)v6 - 1;
        while (1)
        {
          v12 = (google::protobuf::internal *)(v11 + 1);
          v23 = (google::protobuf::internal *)(v11 + 1);
          v13 = (int *)*((_QWORD *)this + 7);
          if (!v13)
            break;
          v14 = *((int *)this + 12);
          v15 = *v13;
          if ((int)v14 >= *v13)
          {
            if (v15 == *((_DWORD *)this + 13))
            {
LABEL_20:
              google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)this + 10, v15 + 1);
              v13 = (int *)*((_QWORD *)this + 7);
              v15 = *v13;
            }
            *v13 = v15 + 1;
            v16 = (sentencepiece::SelfTestData_Sample *)google::protobuf::Arena::CreateMaybeMessage<sentencepiece::SelfTestData_Sample>(*((_QWORD *)this + 5));
            v17 = *((_QWORD *)this + 7);
            v18 = *((int *)this + 12);
            *((_DWORD *)this + 12) = v18 + 1;
            *(_QWORD *)(v17 + 8 * v18 + 8) = v16;
            v12 = v23;
            goto LABEL_22;
          }
          *((_DWORD *)this + 12) = v14 + 1;
          v16 = *(sentencepiece::SelfTestData_Sample **)&v13[2 * v14 + 2];
LABEL_22:
          v11 = google::protobuf::internal::ParseContext::ParseMessage<sentencepiece::SelfTestData_Sample>(a3, v16, v12);
          v23 = (google::protobuf::internal *)v11;
          if (!v11)
            return 0;
          if (*(_QWORD *)a3 <= (unint64_t)v11 || *v11 != 10)
            goto LABEL_30;
        }
        v15 = *((_DWORD *)this + 13);
        goto LABEL_20;
      }
      if (v7)
        v9 = (v7 & 7) == 4;
      else
        v9 = 1;
      if (v9)
      {
        *((_DWORD *)a3 + 20) = v7 - 1;
        return v23;
      }
      if (v7 < 0x640)
      {
        if ((*v5 & 1) != 0)
        {
          v19 = (std::string *)((*v5 & 0xFFFFFFFFFFFFFFFELL) + 8);
        }
        else
        {
          v19 = (std::string *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<std::string>((uint64_t *)this + 1);
          v6 = v23;
        }
        v10 = google::protobuf::internal::UnknownFieldParse(v7, v19, v6, a3);
      }
      else
      {
        v10 = google::protobuf::internal::ExtensionSet::ParseField((sentencepiece::SelfTestData *)((char *)this + 16), v7, v6, (uint64_t)&sentencepiece::_SelfTestData_default_instance_, (uint64_t *)this + 1, (int32x2_t *)a3);
      }
      v23 = (google::protobuf::internal *)v10;
      if (!v10)
        return 0;
LABEL_30:
      if (google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v23, *((_DWORD *)a3 + 23)))return v23;
    }
    v6 = (google::protobuf::internal *)((char *)v23 + 2);
LABEL_6:
    v23 = v6;
    goto LABEL_7;
  }
  return v23;
}

char *google::protobuf::internal::ParseContext::ParseMessage<sentencepiece::SelfTestData_Sample>(google::protobuf::internal::EpsCopyInputStream *this, sentencepiece::SelfTestData_Sample *a2, google::protobuf::internal *a3)
{
  int v6;
  const char *v7;
  char *v8;
  char *result;
  int v10;
  int v11;
  int v12;
  BOOL v13;
  int v14;
  int v15;

  v6 = *(char *)a3;
  v7 = (const char *)*(unsigned __int8 *)a3;
  if (v6 < 0)
  {
    result = google::protobuf::internal::ReadSizeFallback(a3, v7);
    if (!result)
      return result;
    v8 = result;
    LODWORD(v7) = v10;
  }
  else
  {
    v8 = (char *)a3 + 1;
  }
  v11 = google::protobuf::internal::EpsCopyInputStream::PushLimit(this, v8, v7);
  v12 = *((_DWORD *)this + 22);
  v13 = __OFSUB__(v12--, 1);
  *((_DWORD *)this + 22) = v12;
  if (v12 < 0 != v13)
    return 0;
  v14 = v11;
  result = (char *)sentencepiece::SelfTestData_Sample::_InternalParse(a2, (google::protobuf::internal *)v8, this);
  if (!result)
    return result;
  ++*((_DWORD *)this + 22);
  if (*((_DWORD *)this + 20))
    return 0;
  v15 = *((_DWORD *)this + 7) + v14;
  *((_DWORD *)this + 7) = v15;
  *(_QWORD *)this = *((_QWORD *)this + 1) + (v15 & (v15 >> 31));
  return result;
}

unsigned __int8 *sentencepiece::SelfTestData::_InternalSerialize(sentencepiece::SelfTestData *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3)
{
  int v6;
  int i;
  sentencepiece::SelfTestData_Sample *v8;
  unsigned int v9;
  unsigned __int8 *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  uint64_t v16;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;

  v6 = *((_DWORD *)this + 12);
  if (v6)
  {
    for (i = 0; i != v6; ++i)
    {
      if (*(_QWORD *)a3 <= (unint64_t)a2)
        a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      v8 = (sentencepiece::SelfTestData_Sample *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<sentencepiece::SelfTestData_Sample>::TypeHandler>((uint64_t)this + 40, i);
      *a2 = 10;
      v9 = *((_DWORD *)v8 + 5);
      if (v9 > 0x7F)
      {
        a2[1] = v9 | 0x80;
        v11 = v9 >> 7;
        if (v9 >> 14)
        {
          v10 = (unsigned __int8 *)(a2 + 3);
          do
          {
            *(v10 - 1) = v11 | 0x80;
            v12 = v11 >> 7;
            ++v10;
            v13 = v11 >> 14;
            v11 >>= 7;
          }
          while (v13);
          *(v10 - 1) = v12;
        }
        else
        {
          a2[2] = v11;
          v10 = (unsigned __int8 *)(a2 + 3);
        }
      }
      else
      {
        a2[1] = v9;
        v10 = (unsigned __int8 *)(a2 + 2);
      }
      a2 = (char *)sentencepiece::SelfTestData_Sample::_InternalSerialize(v8, (char *)v10, a3);
    }
  }
  v14 = google::protobuf::internal::ExtensionSet::_InternalSerialize((sentencepiece::SelfTestData *)((char *)this + 16), 200, 0x20000000, (unsigned __int8 *)a2, a3);
  v15 = v14;
  v16 = *((_QWORD *)this + 1);
  if ((v16 & 1) == 0)
    return v15;
  v18 = v16 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v18 + 31) < 0)
  {
    v19 = *(void **)(v18 + 8);
    v20 = *(_QWORD *)(v18 + 16);
  }
  else
  {
    v19 = (void *)(v18 + 8);
    LODWORD(v20) = *(unsigned __int8 *)(v18 + 31);
  }
  if (*(_QWORD *)a3 - (_QWORD)v14 >= (int)v20)
  {
    v21 = (int)v20;
    memcpy(v14, v19, (int)v20);
    v15 += v21;
    return v15;
  }
  return google::protobuf::io::EpsCopyOutputStream::WriteRawFallback(a3, (char *)v19, v20, v14);
}

uint64_t sentencepiece::SelfTestData::ByteSizeLong(sentencepiece::SelfTestData *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  sentencepiece::SelfTestData_Sample **v6;
  uint64_t v7;
  sentencepiece::SelfTestData_Sample *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v12;
  uint64_t v13;

  v2 = google::protobuf::internal::ExtensionSet::ByteSize((sentencepiece::SelfTestData *)((char *)this + 16));
  v3 = *((int *)this + 12);
  v4 = v2 + v3;
  v5 = *((_QWORD *)this + 7);
  if (v5)
    v6 = (sentencepiece::SelfTestData_Sample **)(v5 + 8);
  else
    v6 = 0;
  if ((_DWORD)v3)
  {
    v7 = 8 * v3;
    do
    {
      v8 = *v6++;
      v9 = sentencepiece::SelfTestData_Sample::ByteSizeLong(v8);
      v4 += v9 + ((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6);
      v7 -= 8;
    }
    while (v7);
  }
  v10 = *((_QWORD *)this + 1);
  if ((v10 & 1) != 0)
  {
    v12 = v10 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v12 + 31) < 0)
      v13 = *(_QWORD *)(v12 + 16);
    else
      v13 = *(unsigned __int8 *)(v12 + 31);
    v4 += v13;
  }
  *((_DWORD *)this + 16) = v4;
  return v4;
}

void sentencepiece::SelfTestData::CheckTypeAndMergeFrom(sentencepiece::SelfTestData *this, const google::protobuf::MessageLite *a2, uint64_t a3)
{
  if (*(void (***)(sentencepiece::SelfTestData *__hidden))a2 != &off_2516E26C8)
    sentencepiece::SentencePieceText_SentencePiece::CheckTypeAndMergeFrom((uint64_t)this, (uint64_t)a2, a3);
  sentencepiece::SelfTestData::MergeFrom(this, a2);
}

void sentencepiece::SelfTestData::MergeFrom(sentencepiece::SelfTestData *this, const sentencepiece::SelfTestData *a2)
{
  std::string *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  std::string *v9;
  int v10;
  const std::string::value_type *v11;
  std::string::size_type v12;
  char v13;
  std::string v14[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v14, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 2724);
    v4 = google::protobuf::internal::LogMessage::operator<<(v14, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v13, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v14[0].__r_.__value_.__l.__data_);
  }
  google::protobuf::internal::ExtensionSet::MergeFrom((sentencepiece::SelfTestData *)((char *)this + 16), (const sentencepiece::SelfTestData *)((char *)a2 + 16));
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
  {
    v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
    v7 = (v5 & 0xFFFFFFFFFFFFFFFELL) + 8;
    v8 = *((_QWORD *)this + 1);
    if ((v8 & 1) != 0)
      v9 = (std::string *)((v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
    else
      v9 = (std::string *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<std::string>((uint64_t *)this + 1);
    v10 = *(char *)(v6 + 31);
    if (v10 >= 0)
      v11 = (const std::string::value_type *)v7;
    else
      v11 = *(const std::string::value_type **)(v6 + 8);
    if (v10 >= 0)
      v12 = *(unsigned __int8 *)(v6 + 31);
    else
      v12 = *(_QWORD *)(v6 + 16);
    std::string::append(v9, v11, v12);
  }
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<sentencepiece::SelfTestData_Sample>::TypeHandler>((uint64_t)this + 40, (uint64_t)a2 + 40);
}

void sub_245C7461C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sentencepiece::SelfTestData::IsInitialized(sentencepiece::SelfTestData *this)
{
  return google::protobuf::internal::ExtensionSet::IsInitialized((sentencepiece::SelfTestData *)((char *)this + 16));
}

_QWORD *sentencepiece::SelfTestData::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "sentencepiece.SelfTestData");
}

_QWORD *sentencepiece::ModelProto_SentencePiece::ModelProto_SentencePiece(_QWORD *a1, uint64_t a2)
{
  *a1 = &off_2516E2DC0;
  a1[1] = a2;
  google::protobuf::internal::ExtensionSet::ExtensionSet((uint64_t)(a1 + 2), a2);
  a1[5] = 0;
  if (atomic_load(scc_info_ModelProto_SentencePiece_sentencepiece_5fmodel_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_ModelProto_SentencePiece_sentencepiece_5fmodel_2eproto);
  a1[6] = &google::protobuf::internal::fixed_address_empty_string;
  a1[7] = 0x100000000;
  return a1;
}

void sub_245C746B8(_Unwind_Exception *a1)
{
  google::protobuf::internal::ExtensionSet *v1;

  google::protobuf::internal::ExtensionSet::~ExtensionSet(v1);
  _Unwind_Resume(a1);
}

void sentencepiece::ModelProto_SentencePiece::~ModelProto_SentencePiece(sentencepiece::ModelProto_SentencePiece *this)
{
  sentencepiece::ModelProto_SentencePiece::SharedDtor(this);
  google::protobuf::internal::InternalMetadata::Delete<std::string>((uint64_t *)this + 1);
  google::protobuf::internal::ExtensionSet::~ExtensionSet((sentencepiece::ModelProto_SentencePiece *)((char *)this + 16));
}

{
  sentencepiece::ModelProto_SentencePiece::~ModelProto_SentencePiece(this);
  JUMPOUT(0x249544F58);
}

void sentencepiece::ModelProto_SentencePiece::SharedDtor(sentencepiece::ModelProto_SentencePiece *this)
{
  uint64_t v2;
  _QWORD *v3;
  std::string *v4;
  google::protobuf::internal::ArenaStringPtr *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  std::string v10[2];

  v2 = *((_QWORD *)this + 1);
  v3 = (_QWORD *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  if ((v2 & 1) == 0)
  {
    if (!v3)
      goto LABEL_4;
    goto LABEL_3;
  }
  if (*v3)
  {
LABEL_3:
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 2813);
    v4 = google::protobuf::internal::LogMessage::operator<<(v10, "CHECK failed: GetArena() == nullptr: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v9, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v10[0].__r_.__value_.__l.__data_);
  }
LABEL_4:
  v6 = (uint64_t *)*((_QWORD *)this + 6);
  v5 = (sentencepiece::ModelProto_SentencePiece *)((char *)this + 48);
  if (v6 != &google::protobuf::internal::fixed_address_empty_string)
  {
    v7 = google::protobuf::internal::ArenaStringPtr::UnsafeMutablePointer(v5);
    v8 = v7;
    if (*(char *)(v7 + 23) < 0)
      operator delete(*(void **)v7);
    MEMORY[0x249544F58](v8, 0x1012C40EC159624);
  }
}

void sub_245C747C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sentencepiece::ModelProto_SentencePiece::Clear(sentencepiece::ModelProto_SentencePiece *this)
{
  int v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;

  google::protobuf::internal::ExtensionSet::Clear((sentencepiece::ModelProto_SentencePiece *)((char *)this + 16));
  v2 = *((_DWORD *)this + 10);
  if ((v2 & 1) != 0)
  {
    v3 = *((_QWORD *)this + 6) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v3 + 23) < 0)
    {
      **(_BYTE **)v3 = 0;
      *(_QWORD *)(v3 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v3 = 0;
      *(_BYTE *)(v3 + 23) = 0;
    }
  }
  if ((v2 & 6) != 0)
    *((_QWORD *)this + 7) = 0x100000000;
  *((_DWORD *)this + 10) = 0;
  v4 = *((_QWORD *)this + 1);
  if ((v4 & 1) != 0)
  {
    v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v5 + 31) < 0)
    {
      **(_BYTE **)(v5 + 8) = 0;
      *(_QWORD *)(v5 + 16) = 0;
    }
    else
    {
      *(_BYTE *)(v5 + 8) = 0;
      *(_BYTE *)(v5 + 31) = 0;
    }
  }
}

google::protobuf::internal *sentencepiece::ModelProto_SentencePiece::_InternalParse(sentencepiece::ModelProto_SentencePiece *this, google::protobuf::internal *a2, int32x2_t *a3)
{
  int v5;
  _QWORD *v7;
  google::protobuf::internal *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  BOOL v13;
  google::protobuf::internal *v14;
  google::protobuf::internal *v15;
  unint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  google::protobuf::internal::ArenaImpl *v20;
  std::string *v21;
  google::protobuf::internal *TagFallback;
  unsigned int v23;
  std::string *v24;
  unint64_t v25;
  std::string *v26;
  google::protobuf::internal *v27;

  v27 = a2;
  v5 = 0;
  if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck((google::protobuf::internal::EpsCopyInputStream *)a3, (const char **)&v27, a3[11].i32[1]) & 1) == 0)
  {
    v7 = (_QWORD *)((char *)this + 8);
    while (1)
    {
      v8 = (google::protobuf::internal *)((char *)v27 + 1);
      v9 = *(unsigned __int8 *)v27;
      if ((*(char *)v27 & 0x80000000) == 0)
        goto LABEL_7;
      v10 = v9 + (*(unsigned __int8 *)v8 << 7);
      v9 = v10 - 128;
      if ((*(char *)v8 & 0x80000000) == 0)
        break;
      TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v27, (const char *)(v10 - 128));
      v27 = TagFallback;
      if (!TagFallback)
        goto LABEL_48;
      v8 = TagFallback;
      v9 = v23;
LABEL_8:
      v11 = v9 >> 3;
      if (v9 >> 3 == 3)
      {
        if (v9 == 24)
        {
          v15 = (google::protobuf::internal *)((char *)v8 + 1);
          v16 = *(unsigned __int8 *)v8;
          if ((*(char *)v8 & 0x80000000) == 0)
            goto LABEL_24;
          v17 = *(char *)v15;
          v18 = v16 + (v17 << 7);
          v16 = (v18 - 128);
          if (v17 < 0)
          {
            v27 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(v8, (v18 - 128));
            if (!v27)
            {
LABEL_48:
              v27 = 0;
              goto LABEL_2;
            }
            v16 = v25;
          }
          else
          {
            v15 = (google::protobuf::internal *)((char *)v8 + 2);
LABEL_24:
            v27 = v15;
          }
          if ((v16 - 1) > 5)
          {
            if ((*v7 & 1) != 0)
              v26 = (std::string *)((*v7 & 0xFFFFFFFFFFFFFFFELL) + 8);
            else
              v26 = (std::string *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<std::string>((uint64_t *)this + 1);
            google::protobuf::internal::WriteVarint(3, v16, v26);
          }
          else
          {
            *((_DWORD *)this + 10) |= 4u;
            *((_DWORD *)this + 15) = v16;
          }
          goto LABEL_38;
        }
      }
      else if (v11 == 2)
      {
        if (v9 == 21)
        {
          v5 |= 2u;
          *((_DWORD *)this + 14) = *(_DWORD *)v8;
          v27 = (google::protobuf::internal *)((char *)v8 + 4);
          goto LABEL_38;
        }
      }
      else if (v11 == 1 && v9 == 10)
      {
        *((_DWORD *)this + 10) |= 1u;
        v19 = *((_QWORD *)this + 1);
        v20 = (google::protobuf::internal::ArenaImpl *)(v19 & 0xFFFFFFFFFFFFFFFELL);
        if ((v19 & 1) != 0)
          v20 = *(google::protobuf::internal::ArenaImpl **)v20;
        v21 = (std::string *)google::protobuf::internal::ArenaStringPtr::Mutable((uint64_t **)this + 6, v20);
        v14 = (google::protobuf::internal *)google::protobuf::internal::InlineGreedyStringParser(v21, (std::string::value_type *)v27, (uint64_t)a3);
        goto LABEL_37;
      }
      if (v9)
        v13 = (v9 & 7) == 4;
      else
        v13 = 1;
      if (v13)
      {
        a3[10].i32[0] = v9 - 1;
        goto LABEL_2;
      }
      if (v9 < 0x640)
      {
        if ((*v7 & 1) != 0)
        {
          v24 = (std::string *)((*v7 & 0xFFFFFFFFFFFFFFFELL) + 8);
        }
        else
        {
          v24 = (std::string *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<std::string>((uint64_t *)this + 1);
          v8 = v27;
        }
        v14 = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse(v9, v24, v8, (google::protobuf::internal::ParseContext *)a3);
      }
      else
      {
        v14 = (google::protobuf::internal *)google::protobuf::internal::ExtensionSet::ParseField((sentencepiece::ModelProto_SentencePiece *)((char *)this + 16), v9, v8, (uint64_t)sentencepiece::_ModelProto_SentencePiece_default_instance_, (uint64_t *)this + 1, a3);
      }
LABEL_37:
      v27 = v14;
      if (!v14)
        goto LABEL_48;
LABEL_38:
      if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck((google::protobuf::internal::EpsCopyInputStream *)a3, (const char **)&v27, a3[11].i32[1]) & 1) != 0)goto LABEL_2;
    }
    v8 = (google::protobuf::internal *)((char *)v27 + 2);
LABEL_7:
    v27 = v8;
    goto LABEL_8;
  }
LABEL_2:
  *((_DWORD *)this + 10) |= v5;
  return v27;
}

unsigned __int8 *sentencepiece::ModelProto_SentencePiece::_InternalSerialize(sentencepiece::ModelProto_SentencePiece *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3)
{
  char *v4;
  int v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  uint64_t v14;
  unint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;

  v4 = a2;
  v6 = *((_DWORD *)this + 10);
  if ((v6 & 1) != 0)
  {
    v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 1, *((_QWORD *)this + 6) & 0xFFFFFFFFFFFFFFFELL, a2);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_18;
      goto LABEL_9;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  if (*(_QWORD *)a3 <= (unint64_t)v4)
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  v7 = *((_DWORD *)this + 14);
  *v4 = 21;
  *(_DWORD *)(v4 + 1) = v7;
  v4 += 5;
  if ((v6 & 4) != 0)
  {
LABEL_9:
    if (*(_QWORD *)a3 <= (unint64_t)v4)
      v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
    v8 = *((int *)this + 15);
    *v4 = 24;
    if (v8 > 0x7F)
    {
      v4[1] = v8 | 0x80;
      v9 = v8 >> 7;
      if (v8 >> 14)
      {
        v4 += 3;
        do
        {
          *(v4 - 1) = v9 | 0x80;
          v10 = v9 >> 7;
          ++v4;
          v11 = v9 >> 14;
          v9 >>= 7;
        }
        while (v11);
        *(v4 - 1) = v10;
      }
      else
      {
        v4[2] = v9;
        v4 += 3;
      }
    }
    else
    {
      v4[1] = v8;
      v4 += 2;
    }
  }
LABEL_18:
  v12 = google::protobuf::internal::ExtensionSet::_InternalSerialize((sentencepiece::ModelProto_SentencePiece *)((char *)this + 16), 200, 0x20000000, (unsigned __int8 *)v4, a3);
  v13 = v12;
  v14 = *((_QWORD *)this + 1);
  if ((v14 & 1) == 0)
    return v13;
  v16 = v14 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v16 + 31) < 0)
  {
    v17 = *(void **)(v16 + 8);
    v18 = *(_QWORD *)(v16 + 16);
  }
  else
  {
    v17 = (void *)(v16 + 8);
    LODWORD(v18) = *(unsigned __int8 *)(v16 + 31);
  }
  if (*(_QWORD *)a3 - (_QWORD)v12 >= (int)v18)
  {
    v19 = (int)v18;
    memcpy(v12, v17, (int)v18);
    v13 += v19;
    return v13;
  }
  return google::protobuf::io::EpsCopyOutputStream::WriteRawFallback(a3, (char *)v17, v18, v12);
}

uint64_t sentencepiece::ModelProto_SentencePiece::ByteSizeLong(sentencepiece::ModelProto_SentencePiece *this)
{
  uint64_t result;
  int v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  result = google::protobuf::internal::ExtensionSet::ByteSize((sentencepiece::ModelProto_SentencePiece *)((char *)this + 16));
  v3 = *((_DWORD *)this + 10);
  if ((v3 & 7) != 0)
  {
    if ((v3 & 1) != 0)
    {
      v4 = *((_QWORD *)this + 6) & 0xFFFFFFFFFFFFFFFELL;
      v5 = *(unsigned __int8 *)(v4 + 23);
      v6 = *(_QWORD *)(v4 + 8);
      if ((v5 & 0x80u) == 0)
        v6 = v5;
      result += v6 + ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    if ((v3 & 2) != 0)
      result += 5;
    if ((v3 & 4) != 0)
    {
      v7 = *((_DWORD *)this + 15);
      if (v7 < 0)
        v8 = 11;
      else
        v8 = ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6) + 1;
      result += v8;
    }
  }
  v9 = *((_QWORD *)this + 1);
  if ((v9 & 1) != 0)
  {
    v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v10 + 31) < 0)
      v11 = *(_QWORD *)(v10 + 16);
    else
      v11 = *(unsigned __int8 *)(v10 + 31);
    result += v11;
  }
  *((_DWORD *)this + 11) = result;
  return result;
}

void sentencepiece::ModelProto_SentencePiece::CheckTypeAndMergeFrom(sentencepiece::ModelProto_SentencePiece *this, const google::protobuf::MessageLite *a2, uint64_t a3)
{
  if (*(void (***)(sentencepiece::ModelProto_SentencePiece *__hidden))a2 != &off_2516E2DC0)
    sentencepiece::SentencePieceText_SentencePiece::CheckTypeAndMergeFrom((uint64_t)this, (uint64_t)a2, a3);
  sentencepiece::ModelProto_SentencePiece::MergeFrom(this, a2);
}

void sentencepiece::ModelProto_SentencePiece::MergeFrom(sentencepiece::ModelProto_SentencePiece *this, const sentencepiece::ModelProto_SentencePiece *a2)
{
  std::string *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  std::string *v9;
  int v10;
  const std::string::value_type *v11;
  std::string::size_type v12;
  int v13;
  __int128 *v14;
  uint64_t v15;
  google::protobuf::internal::ArenaImpl *v16;
  char v17;
  std::string v18[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 3001);
    v4 = google::protobuf::internal::LogMessage::operator<<(v18, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v17, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v18[0].__r_.__value_.__l.__data_);
  }
  google::protobuf::internal::ExtensionSet::MergeFrom((sentencepiece::ModelProto_SentencePiece *)((char *)this + 16), (const sentencepiece::ModelProto_SentencePiece *)((char *)a2 + 16));
  v5 = *((_QWORD *)a2 + 1);
  if ((v5 & 1) != 0)
  {
    v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
    v7 = (v5 & 0xFFFFFFFFFFFFFFFELL) + 8;
    v8 = *((_QWORD *)this + 1);
    if ((v8 & 1) != 0)
      v9 = (std::string *)((v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
    else
      v9 = (std::string *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<std::string>((uint64_t *)this + 1);
    v10 = *(char *)(v6 + 31);
    if (v10 >= 0)
      v11 = (const std::string::value_type *)v7;
    else
      v11 = *(const std::string::value_type **)(v6 + 8);
    if (v10 >= 0)
      v12 = *(unsigned __int8 *)(v6 + 31);
    else
      v12 = *(_QWORD *)(v6 + 16);
    std::string::append(v9, v11, v12);
  }
  v13 = *((_DWORD *)a2 + 10);
  if ((v13 & 7) != 0)
  {
    if ((v13 & 1) != 0)
    {
      v14 = (__int128 *)(*((_QWORD *)a2 + 6) & 0xFFFFFFFFFFFFFFFELL);
      *((_DWORD *)this + 10) |= 1u;
      v15 = *((_QWORD *)this + 1);
      v16 = (google::protobuf::internal::ArenaImpl *)(v15 & 0xFFFFFFFFFFFFFFFELL);
      if ((v15 & 1) != 0)
        v16 = *(google::protobuf::internal::ArenaImpl **)v16;
      google::protobuf::internal::ArenaStringPtr::Set((sentencepiece::ModelProto_SentencePiece *)((char *)this + 48), v14, v16);
      if ((v13 & 2) == 0)
      {
LABEL_16:
        if ((v13 & 4) == 0)
        {
LABEL_18:
          *((_DWORD *)this + 10) |= v13;
          return;
        }
LABEL_17:
        *((_DWORD *)this + 15) = *((_DWORD *)a2 + 15);
        goto LABEL_18;
      }
    }
    else if ((v13 & 2) == 0)
    {
      goto LABEL_16;
    }
    *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
    if ((v13 & 4) == 0)
      goto LABEL_18;
    goto LABEL_17;
  }
}

void sub_245C74EF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sentencepiece::ModelProto_SentencePiece::IsInitialized(sentencepiece::ModelProto_SentencePiece *this)
{
  return google::protobuf::internal::ExtensionSet::IsInitialized((sentencepiece::ModelProto_SentencePiece *)((char *)this + 16));
}

_QWORD *sentencepiece::ModelProto_SentencePiece::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "sentencepiece.ModelProto.SentencePiece");
}

uint64_t sentencepiece::ModelProto::ModelProto(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = &off_2516E23F8;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = &unk_2516E2510;
  google::protobuf::internal::ExtensionSet::ExtensionSet(a1 + 24, a2);
  *(_QWORD *)(a1 + 56) = a2;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  if (atomic_load(scc_info_ModelProto_sentencepiece_5fmodel_2eproto))
    google::protobuf::internal::InitSCCImpl(scc_info_ModelProto_sentencepiece_5fmodel_2eproto);
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  return a1;
}

void sub_245C74FAC(_Unwind_Exception *a1)
{
  google::protobuf::internal::ExtensionSet *v1;
  google::protobuf::internal::ArenaImpl **v2;

  google::protobuf::RepeatedPtrField<sentencepiece::ModelProto_SentencePiece>::~RepeatedPtrField(v2);
  google::protobuf::internal::ExtensionSet::~ExtensionSet(v1);
  _Unwind_Resume(a1);
}

void sentencepiece::ModelProto::~ModelProto(sentencepiece::ModelProto *this)
{
  sentencepiece::ModelProto::SharedDtor(this);
  google::protobuf::internal::InternalMetadata::Delete<std::string>((uint64_t *)this + 1);
  google::protobuf::RepeatedPtrField<sentencepiece::ModelProto_SentencePiece>::~RepeatedPtrField((google::protobuf::internal::ArenaImpl **)this + 7);
  google::protobuf::internal::ExtensionSet::~ExtensionSet((sentencepiece::ModelProto *)((char *)this + 24));
}

{
  sentencepiece::ModelProto::~ModelProto(this);
  JUMPOUT(0x249544F58);
}

void sentencepiece::ModelProto::SharedDtor(sentencepiece::ModelProto *this)
{
  uint64_t v2;
  _QWORD *v3;
  std::string *v4;
  sentencepiece::TrainerSpec *v5;
  sentencepiece::NormalizerSpec *v6;
  sentencepiece::SelfTestData *v7;
  sentencepiece::NormalizerSpec *v8;
  char v9;
  std::string v10[2];

  v2 = *((_QWORD *)this + 1);
  v3 = (_QWORD *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  if ((v2 & 1) == 0)
  {
    if (!v3)
      goto LABEL_4;
    goto LABEL_3;
  }
  if (*v3)
  {
LABEL_3:
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 3145);
    v4 = google::protobuf::internal::LogMessage::operator<<(v10, "CHECK failed: GetArena() == nullptr: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v9, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v10[0].__r_.__value_.__l.__data_);
  }
LABEL_4:
  if (this != (sentencepiece::ModelProto *)&sentencepiece::_ModelProto_default_instance_)
  {
    v5 = (sentencepiece::TrainerSpec *)*((_QWORD *)this + 10);
    if (v5)
    {
      sentencepiece::TrainerSpec::~TrainerSpec(v5);
      MEMORY[0x249544F58]();
    }
    v6 = (sentencepiece::NormalizerSpec *)*((_QWORD *)this + 11);
    if (v6)
    {
      sentencepiece::NormalizerSpec::~NormalizerSpec(v6);
      MEMORY[0x249544F58]();
    }
    v7 = (sentencepiece::SelfTestData *)*((_QWORD *)this + 12);
    if (v7)
    {
      sentencepiece::SelfTestData::~SelfTestData(v7);
      MEMORY[0x249544F58]();
    }
    v8 = (sentencepiece::NormalizerSpec *)*((_QWORD *)this + 13);
    if (v8)
    {
      sentencepiece::NormalizerSpec::~NormalizerSpec(v8);
      MEMORY[0x249544F58]();
    }
  }
}

void sub_245C75118(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'sentencepiece::ModelProto::~ModelProto(sentencepiece::ModelProto *this)
{
  sentencepiece::ModelProto::~ModelProto((sentencepiece::ModelProto *)((char *)this - 16));
}

{
  sentencepiece::ModelProto::~ModelProto((sentencepiece::ModelProto *)((char *)this - 16));
  JUMPOUT(0x249544F58);
}

void sentencepiece::ModelProto::Clear(sentencepiece::ModelProto *this)
{
  int v2;
  sentencepiece::TrainerSpec *v3;
  std::string *v4;
  sentencepiece::NormalizerSpec *v5;
  std::string *v6;
  sentencepiece::SelfTestData *v7;
  std::string *v8;
  sentencepiece::NormalizerSpec *v9;
  std::string *v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  std::string v14[2];

  google::protobuf::internal::ExtensionSet::Clear((sentencepiece::ModelProto *)((char *)this + 24));
  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<sentencepiece::ModelProto_SentencePiece>::TypeHandler>((uint64_t)this + 56);
  v2 = *((_DWORD *)this + 12);
  if ((v2 & 0xF) != 0)
  {
    if ((v2 & 1) != 0)
    {
      v3 = (sentencepiece::TrainerSpec *)*((_QWORD *)this + 10);
      if (!v3)
      {
        google::protobuf::internal::LogMessage::LogMessage((uint64_t)v14, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 3178);
        v4 = google::protobuf::internal::LogMessage::operator<<(v14, "CHECK failed: trainer_spec_ != nullptr: ");
        google::protobuf::internal::LogFinisher::operator=((int)&v13, (const char **)&v4->__r_.__value_.__l.__data_);
        google::protobuf::internal::LogMessage::~LogMessage((void **)&v14[0].__r_.__value_.__l.__data_);
        v3 = (sentencepiece::TrainerSpec *)*((_QWORD *)this + 10);
      }
      sentencepiece::TrainerSpec::Clear(v3);
    }
    if ((v2 & 2) != 0)
    {
      v5 = (sentencepiece::NormalizerSpec *)*((_QWORD *)this + 11);
      if (!v5)
      {
        google::protobuf::internal::LogMessage::LogMessage((uint64_t)v14, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 3182);
        v6 = google::protobuf::internal::LogMessage::operator<<(v14, "CHECK failed: normalizer_spec_ != nullptr: ");
        google::protobuf::internal::LogFinisher::operator=((int)&v13, (const char **)&v6->__r_.__value_.__l.__data_);
        google::protobuf::internal::LogMessage::~LogMessage((void **)&v14[0].__r_.__value_.__l.__data_);
        v5 = (sentencepiece::NormalizerSpec *)*((_QWORD *)this + 11);
      }
      sentencepiece::NormalizerSpec::Clear(v5);
    }
    if ((v2 & 4) != 0)
    {
      v7 = (sentencepiece::SelfTestData *)*((_QWORD *)this + 12);
      if (!v7)
      {
        google::protobuf::internal::LogMessage::LogMessage((uint64_t)v14, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 3186);
        v8 = google::protobuf::internal::LogMessage::operator<<(v14, "CHECK failed: self_test_data_ != nullptr: ");
        google::protobuf::internal::LogFinisher::operator=((int)&v13, (const char **)&v8->__r_.__value_.__l.__data_);
        google::protobuf::internal::LogMessage::~LogMessage((void **)&v14[0].__r_.__value_.__l.__data_);
        v7 = (sentencepiece::SelfTestData *)*((_QWORD *)this + 12);
      }
      sentencepiece::SelfTestData::Clear(v7);
    }
    if ((v2 & 8) != 0)
    {
      v9 = (sentencepiece::NormalizerSpec *)*((_QWORD *)this + 13);
      if (!v9)
      {
        google::protobuf::internal::LogMessage::LogMessage((uint64_t)v14, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 3190);
        v10 = google::protobuf::internal::LogMessage::operator<<(v14, "CHECK failed: denormalizer_spec_ != nullptr: ");
        google::protobuf::internal::LogFinisher::operator=((int)&v13, (const char **)&v10->__r_.__value_.__l.__data_);
        google::protobuf::internal::LogMessage::~LogMessage((void **)&v14[0].__r_.__value_.__l.__data_);
        v9 = (sentencepiece::NormalizerSpec *)*((_QWORD *)this + 13);
      }
      sentencepiece::NormalizerSpec::Clear(v9);
    }
  }
  *((_DWORD *)this + 12) = 0;
  v11 = *((_QWORD *)this + 1);
  if ((v11 & 1) != 0)
  {
    v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v12 + 31) < 0)
    {
      **(_BYTE **)(v12 + 8) = 0;
      *(_QWORD *)(v12 + 16) = 0;
    }
    else
    {
      *(_BYTE *)(v12 + 8) = 0;
      *(_BYTE *)(v12 + 31) = 0;
    }
  }
}

void sub_245C75338(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

google::protobuf::internal *sentencepiece::ModelProto::_InternalParse(sentencepiece::ModelProto *this, google::protobuf::internal *a2, google::protobuf::internal::ParseContext *a3)
{
  _QWORD *v6;
  google::protobuf::internal *v7;
  unsigned int v8;
  unsigned int v9;
  char *v10;
  google::protobuf::internal *v11;
  int *v12;
  uint64_t v13;
  int v14;
  sentencepiece::ModelProto_SentencePiece *v15;
  uint64_t v16;
  uint64_t v17;
  sentencepiece::TrainerSpec *v18;
  _QWORD *v19;
  google::protobuf::internal *v20;
  sentencepiece::NormalizerSpec *v21;
  _QWORD *v22;
  sentencepiece::SelfTestData *v23;
  _QWORD *v24;
  _QWORD *v25;
  BOOL v26;
  google::protobuf::internal *TagFallback;
  unsigned int v28;
  std::string *v29;
  google::protobuf::internal *v30;

  v30 = a2;
  if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v30, *((_DWORD *)a3 + 23)) & 1) == 0)
  {
    v6 = (_QWORD *)((char *)this + 8);
    while (2)
    {
      v7 = (google::protobuf::internal *)((char *)v30 + 1);
      v8 = *(unsigned __int8 *)v30;
      if (*(char *)v30 < 0)
      {
        v9 = v8 + (*(unsigned __int8 *)v7 << 7);
        v8 = v9 - 128;
        if (*(char *)v7 < 0)
        {
          TagFallback = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v30, (const char *)(v9 - 128));
          v30 = TagFallback;
          if (!TagFallback)
            return 0;
          v7 = TagFallback;
          v8 = v28;
LABEL_8:
          switch(v8 >> 3)
          {
            case 1u:
              if (v8 != 10)
                goto LABEL_49;
              v10 = (char *)v7 - 1;
              break;
            case 2u:
              if (v8 != 18)
                goto LABEL_49;
              *((_DWORD *)this + 12) |= 1u;
              v18 = (sentencepiece::TrainerSpec *)*((_QWORD *)this + 10);
              if (!v18)
              {
                v19 = (_QWORD *)(*v6 & 0xFFFFFFFFFFFFFFFELL);
                if ((*v6 & 1) != 0)
                  v19 = (_QWORD *)*v19;
                v18 = (sentencepiece::TrainerSpec *)google::protobuf::Arena::CreateMaybeMessage<sentencepiece::TrainerSpec>((uint64_t)v19);
                *((_QWORD *)this + 10) = v18;
                v7 = v30;
              }
              v20 = (google::protobuf::internal *)google::protobuf::internal::ParseContext::ParseMessage<sentencepiece::TrainerSpec>(a3, v18, v7);
              goto LABEL_46;
            case 3u:
              if (v8 != 26)
                goto LABEL_49;
              *((_DWORD *)this + 12) |= 2u;
              v21 = (sentencepiece::NormalizerSpec *)*((_QWORD *)this + 11);
              if (v21)
                goto LABEL_45;
              v22 = (_QWORD *)(*v6 & 0xFFFFFFFFFFFFFFFELL);
              if ((*v6 & 1) != 0)
                v22 = (_QWORD *)*v22;
              v21 = (sentencepiece::NormalizerSpec *)google::protobuf::Arena::CreateMaybeMessage<sentencepiece::NormalizerSpec>((uint64_t)v22);
              *((_QWORD *)this + 11) = v21;
              goto LABEL_44;
            case 4u:
              if (v8 != 34)
                goto LABEL_49;
              *((_DWORD *)this + 12) |= 4u;
              v23 = (sentencepiece::SelfTestData *)*((_QWORD *)this + 12);
              if (!v23)
              {
                v24 = (_QWORD *)(*v6 & 0xFFFFFFFFFFFFFFFELL);
                if ((*v6 & 1) != 0)
                  v24 = (_QWORD *)*v24;
                v23 = (sentencepiece::SelfTestData *)google::protobuf::Arena::CreateMaybeMessage<sentencepiece::SelfTestData>((uint64_t)v24);
                *((_QWORD *)this + 12) = v23;
                v7 = v30;
              }
              v20 = (google::protobuf::internal *)google::protobuf::internal::ParseContext::ParseMessage<sentencepiece::SelfTestData>(a3, v23, v7);
              goto LABEL_46;
            case 5u:
              if (v8 != 42)
                goto LABEL_49;
              *((_DWORD *)this + 12) |= 8u;
              v21 = (sentencepiece::NormalizerSpec *)*((_QWORD *)this + 13);
              if (v21)
                goto LABEL_45;
              v25 = (_QWORD *)(*v6 & 0xFFFFFFFFFFFFFFFELL);
              if ((*v6 & 1) != 0)
                v25 = (_QWORD *)*v25;
              v21 = (sentencepiece::NormalizerSpec *)google::protobuf::Arena::CreateMaybeMessage<sentencepiece::NormalizerSpec>((uint64_t)v25);
              *((_QWORD *)this + 13) = v21;
LABEL_44:
              v7 = v30;
LABEL_45:
              v20 = (google::protobuf::internal *)google::protobuf::internal::ParseContext::ParseMessage<sentencepiece::NormalizerSpec>(a3, v21, v7);
              goto LABEL_46;
            default:
LABEL_49:
              if (v8)
                v26 = (v8 & 7) == 4;
              else
                v26 = 1;
              if (v26)
              {
                *((_DWORD *)a3 + 20) = v8 - 1;
                return v30;
              }
              if (v8 < 0x640)
              {
                if ((*v6 & 1) != 0)
                {
                  v29 = (std::string *)((*v6 & 0xFFFFFFFFFFFFFFFELL) + 8);
                }
                else
                {
                  v29 = (std::string *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<std::string>((uint64_t *)this + 1);
                  v7 = v30;
                }
                v20 = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse(v8, v29, v7, a3);
              }
              else
              {
                v20 = (google::protobuf::internal *)google::protobuf::internal::ExtensionSet::ParseField((sentencepiece::ModelProto *)((char *)this + 24), v8, v7, (uint64_t)&sentencepiece::_ModelProto_default_instance_, (uint64_t *)this + 1, (int32x2_t *)a3);
              }
LABEL_46:
              v30 = v20;
              if (!v20)
                return 0;
LABEL_47:
              if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(a3, (const char **)&v30, *((_DWORD *)a3 + 23)) & 1) != 0)return v30;
              continue;
          }
          while (1)
          {
            v11 = (google::protobuf::internal *)(v10 + 1);
            v30 = (google::protobuf::internal *)(v10 + 1);
            v12 = (int *)*((_QWORD *)this + 9);
            if (!v12)
              break;
            v13 = *((int *)this + 16);
            v14 = *v12;
            if ((int)v13 >= *v12)
            {
              if (v14 == *((_DWORD *)this + 17))
              {
LABEL_16:
                google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)this + 14, v14 + 1);
                v12 = (int *)*((_QWORD *)this + 9);
                v14 = *v12;
              }
              *v12 = v14 + 1;
              v15 = (sentencepiece::ModelProto_SentencePiece *)google::protobuf::Arena::CreateMaybeMessage<sentencepiece::ModelProto_SentencePiece>(*((_QWORD *)this + 7));
              v16 = *((_QWORD *)this + 9);
              v17 = *((int *)this + 16);
              *((_DWORD *)this + 16) = v17 + 1;
              *(_QWORD *)(v16 + 8 * v17 + 8) = v15;
              v11 = v30;
              goto LABEL_18;
            }
            *((_DWORD *)this + 16) = v13 + 1;
            v15 = *(sentencepiece::ModelProto_SentencePiece **)&v12[2 * v13 + 2];
LABEL_18:
            v10 = google::protobuf::internal::ParseContext::ParseMessage<sentencepiece::ModelProto_SentencePiece>(a3, v15, v11);
            v30 = (google::protobuf::internal *)v10;
            if (!v10)
              return 0;
            if (*(_QWORD *)a3 <= (unint64_t)v10 || *v10 != 10)
              goto LABEL_47;
          }
          v14 = *((_DWORD *)this + 17);
          goto LABEL_16;
        }
        v7 = (google::protobuf::internal *)((char *)v30 + 2);
      }
      break;
    }
    v30 = v7;
    goto LABEL_8;
  }
  return v30;
}

char *google::protobuf::internal::ParseContext::ParseMessage<sentencepiece::ModelProto_SentencePiece>(google::protobuf::internal::EpsCopyInputStream *this, sentencepiece::ModelProto_SentencePiece *a2, google::protobuf::internal *a3)
{
  int v6;
  const char *v7;
  char *v8;
  char *result;
  int v10;
  int v11;
  int v12;
  BOOL v13;
  int v14;
  int v15;

  v6 = *(char *)a3;
  v7 = (const char *)*(unsigned __int8 *)a3;
  if (v6 < 0)
  {
    result = google::protobuf::internal::ReadSizeFallback(a3, v7);
    if (!result)
      return result;
    v8 = result;
    LODWORD(v7) = v10;
  }
  else
  {
    v8 = (char *)a3 + 1;
  }
  v11 = google::protobuf::internal::EpsCopyInputStream::PushLimit(this, v8, v7);
  v12 = *((_DWORD *)this + 22);
  v13 = __OFSUB__(v12--, 1);
  *((_DWORD *)this + 22) = v12;
  if (v12 < 0 != v13)
    return 0;
  v14 = v11;
  result = (char *)sentencepiece::ModelProto_SentencePiece::_InternalParse(a2, (google::protobuf::internal *)v8, (int32x2_t *)this);
  if (!result)
    return result;
  ++*((_DWORD *)this + 22);
  if (*((_DWORD *)this + 20))
    return 0;
  v15 = *((_DWORD *)this + 7) + v14;
  *((_DWORD *)this + 7) = v15;
  *(_QWORD *)this = *((_QWORD *)this + 1) + (v15 & (v15 >> 31));
  return result;
}

char *google::protobuf::internal::ParseContext::ParseMessage<sentencepiece::TrainerSpec>(google::protobuf::internal::EpsCopyInputStream *this, sentencepiece::TrainerSpec *a2, google::protobuf::internal *a3)
{
  int v6;
  const char *v7;
  char *v8;
  char *result;
  int v10;
  int v11;
  int v12;
  BOOL v13;
  int v14;
  int v15;

  v6 = *(char *)a3;
  v7 = (const char *)*(unsigned __int8 *)a3;
  if (v6 < 0)
  {
    result = google::protobuf::internal::ReadSizeFallback(a3, v7);
    if (!result)
      return result;
    v8 = result;
    LODWORD(v7) = v10;
  }
  else
  {
    v8 = (char *)a3 + 1;
  }
  v11 = google::protobuf::internal::EpsCopyInputStream::PushLimit(this, v8, v7);
  v12 = *((_DWORD *)this + 22);
  v13 = __OFSUB__(v12--, 1);
  *((_DWORD *)this + 22) = v12;
  if (v12 < 0 != v13)
    return 0;
  v14 = v11;
  result = (char *)sentencepiece::TrainerSpec::_InternalParse(a2, (google::protobuf::internal *)v8, this);
  if (!result)
    return result;
  ++*((_DWORD *)this + 22);
  if (*((_DWORD *)this + 20))
    return 0;
  v15 = *((_DWORD *)this + 7) + v14;
  *((_DWORD *)this + 7) = v15;
  *(_QWORD *)this = *((_QWORD *)this + 1) + (v15 & (v15 >> 31));
  return result;
}

char *google::protobuf::internal::ParseContext::ParseMessage<sentencepiece::NormalizerSpec>(google::protobuf::internal::EpsCopyInputStream *this, sentencepiece::NormalizerSpec *a2, google::protobuf::internal *a3)
{
  int v6;
  const char *v7;
  char *v8;
  char *result;
  int v10;
  int v11;
  int v12;
  BOOL v13;
  int v14;
  int v15;

  v6 = *(char *)a3;
  v7 = (const char *)*(unsigned __int8 *)a3;
  if (v6 < 0)
  {
    result = google::protobuf::internal::ReadSizeFallback(a3, v7);
    if (!result)
      return result;
    v8 = result;
    LODWORD(v7) = v10;
  }
  else
  {
    v8 = (char *)a3 + 1;
  }
  v11 = google::protobuf::internal::EpsCopyInputStream::PushLimit(this, v8, v7);
  v12 = *((_DWORD *)this + 22);
  v13 = __OFSUB__(v12--, 1);
  *((_DWORD *)this + 22) = v12;
  if (v12 < 0 != v13)
    return 0;
  v14 = v11;
  result = (char *)sentencepiece::NormalizerSpec::_InternalParse(a2, (google::protobuf::internal *)v8, (int32x2_t *)this);
  if (!result)
    return result;
  ++*((_DWORD *)this + 22);
  if (*((_DWORD *)this + 20))
    return 0;
  v15 = *((_DWORD *)this + 7) + v14;
  *((_DWORD *)this + 7) = v15;
  *(_QWORD *)this = *((_QWORD *)this + 1) + (v15 & (v15 >> 31));
  return result;
}

char *google::protobuf::internal::ParseContext::ParseMessage<sentencepiece::SelfTestData>(google::protobuf::internal::EpsCopyInputStream *this, sentencepiece::SelfTestData *a2, google::protobuf::internal *a3)
{
  int v6;
  const char *v7;
  char *v8;
  char *result;
  int v10;
  int v11;
  int v12;
  BOOL v13;
  int v14;
  int v15;

  v6 = *(char *)a3;
  v7 = (const char *)*(unsigned __int8 *)a3;
  if (v6 < 0)
  {
    result = google::protobuf::internal::ReadSizeFallback(a3, v7);
    if (!result)
      return result;
    v8 = result;
    LODWORD(v7) = v10;
  }
  else
  {
    v8 = (char *)a3 + 1;
  }
  v11 = google::protobuf::internal::EpsCopyInputStream::PushLimit(this, v8, v7);
  v12 = *((_DWORD *)this + 22);
  v13 = __OFSUB__(v12--, 1);
  *((_DWORD *)this + 22) = v12;
  if (v12 < 0 != v13)
    return 0;
  v14 = v11;
  result = (char *)sentencepiece::SelfTestData::_InternalParse(a2, (google::protobuf::internal *)v8, this);
  if (!result)
    return result;
  ++*((_DWORD *)this + 22);
  if (*((_DWORD *)this + 20))
    return 0;
  v15 = *((_DWORD *)this + 7) + v14;
  *((_DWORD *)this + 7) = v15;
  *(_QWORD *)this = *((_QWORD *)this + 1) + (v15 & (v15 >> 31));
  return result;
}

unsigned __int8 *sentencepiece::ModelProto::_InternalSerialize(sentencepiece::ModelProto *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3)
{
  int v6;
  int i;
  sentencepiece::ModelProto_SentencePiece *v8;
  unsigned int v9;
  unsigned __int8 *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  sentencepiece::TrainerSpec *v15;
  unsigned int v16;
  unsigned __int8 *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  sentencepiece::NormalizerSpec *v21;
  unsigned int v22;
  unsigned __int8 *v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  sentencepiece::SelfTestData *v27;
  unsigned int v28;
  unsigned __int8 *v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  sentencepiece::NormalizerSpec *v33;
  unsigned int v34;
  unsigned __int8 *v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned __int8 *v39;
  unsigned __int8 *v40;
  uint64_t v41;
  unint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;

  v6 = *((_DWORD *)this + 16);
  if (v6)
  {
    for (i = 0; i != v6; ++i)
    {
      if (*(_QWORD *)a3 <= (unint64_t)a2)
        a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      v8 = (sentencepiece::ModelProto_SentencePiece *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<sentencepiece::ModelProto_SentencePiece>::TypeHandler>((uint64_t)this + 56, i);
      *a2 = 10;
      v9 = *((_DWORD *)v8 + 11);
      if (v9 > 0x7F)
      {
        a2[1] = v9 | 0x80;
        v11 = v9 >> 7;
        if (v9 >> 14)
        {
          v10 = (unsigned __int8 *)(a2 + 3);
          do
          {
            *(v10 - 1) = v11 | 0x80;
            v12 = v11 >> 7;
            ++v10;
            v13 = v11 >> 14;
            v11 >>= 7;
          }
          while (v13);
          *(v10 - 1) = v12;
        }
        else
        {
          a2[2] = v11;
          v10 = (unsigned __int8 *)(a2 + 3);
        }
      }
      else
      {
        a2[1] = v9;
        v10 = (unsigned __int8 *)(a2 + 2);
      }
      a2 = (char *)sentencepiece::ModelProto_SentencePiece::_InternalSerialize(v8, (char *)v10, a3);
    }
  }
  v14 = *((_DWORD *)this + 12);
  if ((v14 & 1) != 0)
  {
    if (*(_QWORD *)a3 <= (unint64_t)a2)
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
    v15 = (sentencepiece::TrainerSpec *)*((_QWORD *)this + 10);
    *a2 = 18;
    v16 = *((_DWORD *)v15 + 12);
    if (v16 > 0x7F)
    {
      a2[1] = v16 | 0x80;
      v18 = v16 >> 7;
      if (v16 >> 14)
      {
        v17 = (unsigned __int8 *)(a2 + 3);
        do
        {
          *(v17 - 1) = v18 | 0x80;
          v19 = v18 >> 7;
          ++v17;
          v20 = v18 >> 14;
          v18 >>= 7;
        }
        while (v20);
        *(v17 - 1) = v19;
      }
      else
      {
        a2[2] = v18;
        v17 = (unsigned __int8 *)(a2 + 3);
      }
    }
    else
    {
      a2[1] = v16;
      v17 = (unsigned __int8 *)(a2 + 2);
    }
    a2 = (char *)sentencepiece::TrainerSpec::_InternalSerialize(v15, v17, a3);
    if ((v14 & 2) == 0)
    {
LABEL_15:
      if ((v14 & 4) == 0)
        goto LABEL_16;
      goto LABEL_38;
    }
  }
  else if ((v14 & 2) == 0)
  {
    goto LABEL_15;
  }
  if (*(_QWORD *)a3 <= (unint64_t)a2)
    a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
  v21 = (sentencepiece::NormalizerSpec *)*((_QWORD *)this + 11);
  *a2 = 26;
  v22 = *((_DWORD *)v21 + 13);
  if (v22 > 0x7F)
  {
    a2[1] = v22 | 0x80;
    v24 = v22 >> 7;
    if (v22 >> 14)
    {
      v23 = (unsigned __int8 *)(a2 + 3);
      do
      {
        *(v23 - 1) = v24 | 0x80;
        v25 = v24 >> 7;
        ++v23;
        v26 = v24 >> 14;
        v24 >>= 7;
      }
      while (v26);
      *(v23 - 1) = v25;
    }
    else
    {
      a2[2] = v24;
      v23 = (unsigned __int8 *)(a2 + 3);
    }
  }
  else
  {
    a2[1] = v22;
    v23 = (unsigned __int8 *)(a2 + 2);
  }
  a2 = (char *)sentencepiece::NormalizerSpec::_InternalSerialize(v21, (char *)v23, a3);
  if ((v14 & 4) == 0)
  {
LABEL_16:
    if ((v14 & 8) == 0)
      goto LABEL_58;
    goto LABEL_48;
  }
LABEL_38:
  if (*(_QWORD *)a3 <= (unint64_t)a2)
    a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
  v27 = (sentencepiece::SelfTestData *)*((_QWORD *)this + 12);
  *a2 = 34;
  v28 = *((_DWORD *)v27 + 16);
  if (v28 > 0x7F)
  {
    a2[1] = v28 | 0x80;
    v30 = v28 >> 7;
    if (v28 >> 14)
    {
      v29 = (unsigned __int8 *)(a2 + 3);
      do
      {
        *(v29 - 1) = v30 | 0x80;
        v31 = v30 >> 7;
        ++v29;
        v32 = v30 >> 14;
        v30 >>= 7;
      }
      while (v32);
      *(v29 - 1) = v31;
    }
    else
    {
      a2[2] = v30;
      v29 = (unsigned __int8 *)(a2 + 3);
    }
  }
  else
  {
    a2[1] = v28;
    v29 = (unsigned __int8 *)(a2 + 2);
  }
  a2 = (char *)sentencepiece::SelfTestData::_InternalSerialize(v27, (char *)v29, a3);
  if ((v14 & 8) != 0)
  {
LABEL_48:
    if (*(_QWORD *)a3 <= (unint64_t)a2)
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
    v33 = (sentencepiece::NormalizerSpec *)*((_QWORD *)this + 13);
    *a2 = 42;
    v34 = *((_DWORD *)v33 + 13);
    if (v34 > 0x7F)
    {
      a2[1] = v34 | 0x80;
      v36 = v34 >> 7;
      if (v34 >> 14)
      {
        v35 = (unsigned __int8 *)(a2 + 3);
        do
        {
          *(v35 - 1) = v36 | 0x80;
          v37 = v36 >> 7;
          ++v35;
          v38 = v36 >> 14;
          v36 >>= 7;
        }
        while (v38);
        *(v35 - 1) = v37;
      }
      else
      {
        a2[2] = v36;
        v35 = (unsigned __int8 *)(a2 + 3);
      }
    }
    else
    {
      a2[1] = v34;
      v35 = (unsigned __int8 *)(a2 + 2);
    }
    a2 = (char *)sentencepiece::NormalizerSpec::_InternalSerialize(v33, (char *)v35, a3);
  }
LABEL_58:
  v39 = google::protobuf::internal::ExtensionSet::_InternalSerialize((sentencepiece::ModelProto *)((char *)this + 24), 200, 0x20000000, (unsigned __int8 *)a2, a3);
  v40 = v39;
  v41 = *((_QWORD *)this + 1);
  if ((v41 & 1) == 0)
    return v40;
  v43 = v41 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v43 + 31) < 0)
  {
    v44 = *(void **)(v43 + 8);
    v45 = *(_QWORD *)(v43 + 16);
  }
  else
  {
    v44 = (void *)(v43 + 8);
    LODWORD(v45) = *(unsigned __int8 *)(v43 + 31);
  }
  if (*(_QWORD *)a3 - (_QWORD)v39 >= (int)v45)
  {
    v46 = (int)v45;
    memcpy(v39, v44, (int)v45);
    v40 += v46;
    return v40;
  }
  return google::protobuf::io::EpsCopyOutputStream::WriteRawFallback(a3, (char *)v44, v45, v39);
}

uint64_t sentencepiece::ModelProto::ByteSizeLong(sentencepiece::ModelProto *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  sentencepiece::ModelProto_SentencePiece **v6;
  uint64_t v7;
  sentencepiece::ModelProto_SentencePiece *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;

  v2 = google::protobuf::internal::ExtensionSet::ByteSize((sentencepiece::ModelProto *)((char *)this + 24));
  v3 = *((int *)this + 16);
  v4 = v2 + v3;
  v5 = *((_QWORD *)this + 9);
  if (v5)
    v6 = (sentencepiece::ModelProto_SentencePiece **)(v5 + 8);
  else
    v6 = 0;
  if ((_DWORD)v3)
  {
    v7 = 8 * v3;
    do
    {
      v8 = *v6++;
      v9 = sentencepiece::ModelProto_SentencePiece::ByteSizeLong(v8);
      v4 += v9 + ((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6);
      v7 -= 8;
    }
    while (v7);
  }
  v10 = *((_DWORD *)this + 12);
  if ((v10 & 0xF) == 0)
    goto LABEL_13;
  if ((v10 & 1) == 0)
  {
    if ((v10 & 2) == 0)
      goto LABEL_10;
LABEL_16:
    v15 = sentencepiece::NormalizerSpec::ByteSizeLong(*((sentencepiece::NormalizerSpec **)this + 11));
    v4 += v15 + ((9 * (__clz(v15 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v10 & 4) == 0)
    {
LABEL_11:
      if ((v10 & 8) == 0)
        goto LABEL_13;
      goto LABEL_12;
    }
    goto LABEL_17;
  }
  v14 = sentencepiece::TrainerSpec::ByteSizeLong(*((sentencepiece::TrainerSpec **)this + 10));
  v4 += v14 + ((9 * (__clz(v14 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v10 & 2) != 0)
    goto LABEL_16;
LABEL_10:
  if ((v10 & 4) == 0)
    goto LABEL_11;
LABEL_17:
  v16 = sentencepiece::SelfTestData::ByteSizeLong(*((sentencepiece::SelfTestData **)this + 12));
  v4 += v16 + ((9 * (__clz(v16 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v10 & 8) != 0)
  {
LABEL_12:
    v11 = sentencepiece::NormalizerSpec::ByteSizeLong(*((sentencepiece::NormalizerSpec **)this + 13));
    v4 += v11 + ((9 * (__clz(v11 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_13:
  v12 = *((_QWORD *)this + 1);
  if ((v12 & 1) != 0)
  {
    v17 = v12 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v17 + 31) < 0)
      v18 = *(_QWORD *)(v17 + 16);
    else
      v18 = *(unsigned __int8 *)(v17 + 31);
    v4 += v18;
  }
  *((_DWORD *)this + 13) = v4;
  return v4;
}

void sentencepiece::ModelProto::CheckTypeAndMergeFrom(sentencepiece::ModelProto *this, const google::protobuf::MessageLite *a2, uint64_t a3)
{
  if (*(void (***)(sentencepiece::ModelProto *__hidden))a2 != &off_2516E23F8)
    sentencepiece::SentencePieceText_SentencePiece::CheckTypeAndMergeFrom((uint64_t)this, (uint64_t)a2, a3);
  sentencepiece::ModelProto::MergeFrom(this, a2);
}

void sentencepiece::ModelProto::MergeFrom(sentencepiece::ModelProto *this, const sentencepiece::ModelProto *a2)
{
  std::string *v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  std::string *v9;
  int v10;
  const std::string::value_type *v11;
  std::string::size_type v12;
  int v13;
  sentencepiece::TrainerSpec *v14;
  _QWORD *v15;
  const sentencepiece::TrainerSpec *v16;
  sentencepiece::NormalizerSpec *v17;
  _QWORD *v18;
  const sentencepiece::NormalizerSpec *v19;
  sentencepiece::SelfTestData *v20;
  _QWORD *v21;
  const sentencepiece::SelfTestData *v22;
  sentencepiece::NormalizerSpec *v23;
  _QWORD *v24;
  const sentencepiece::NormalizerSpec *v25;
  char v26;
  std::string v27[2];

  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v27, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 3397);
    v4 = google::protobuf::internal::LogMessage::operator<<(v27, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v26, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v27[0].__r_.__value_.__l.__data_);
  }
  google::protobuf::internal::ExtensionSet::MergeFrom((sentencepiece::ModelProto *)((char *)this + 24), (const sentencepiece::ModelProto *)((char *)a2 + 24));
  v5 = (_QWORD *)((char *)this + 8);
  v6 = *((_QWORD *)a2 + 1);
  if ((v6 & 1) != 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    v8 = (v6 & 0xFFFFFFFFFFFFFFFELL) + 8;
    if ((*v5 & 1) != 0)
      v9 = (std::string *)((*v5 & 0xFFFFFFFFFFFFFFFELL) + 8);
    else
      v9 = (std::string *)google::protobuf::internal::InternalMetadata::mutable_unknown_fields_slow<std::string>((uint64_t *)this + 1);
    v10 = *(char *)(v7 + 31);
    if (v10 >= 0)
      v11 = (const std::string::value_type *)v8;
    else
      v11 = *(const std::string::value_type **)(v7 + 8);
    if (v10 >= 0)
      v12 = *(unsigned __int8 *)(v7 + 31);
    else
      v12 = *(_QWORD *)(v7 + 16);
    std::string::append(v9, v11, v12);
  }
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<sentencepiece::ModelProto_SentencePiece>::TypeHandler>((uint64_t)this + 56, (uint64_t)a2 + 56);
  v13 = *((_DWORD *)a2 + 12);
  if ((v13 & 0xF) != 0)
  {
    if ((v13 & 1) != 0)
    {
      *((_DWORD *)this + 12) |= 1u;
      v14 = (sentencepiece::TrainerSpec *)*((_QWORD *)this + 10);
      if (!v14)
      {
        v15 = (_QWORD *)(*v5 & 0xFFFFFFFFFFFFFFFELL);
        if ((*v5 & 1) != 0)
          v15 = (_QWORD *)*v15;
        v14 = (sentencepiece::TrainerSpec *)google::protobuf::Arena::CreateMaybeMessage<sentencepiece::TrainerSpec>((uint64_t)v15);
        *((_QWORD *)this + 10) = v14;
      }
      if (*((_QWORD *)a2 + 10))
        v16 = (const sentencepiece::TrainerSpec *)*((_QWORD *)a2 + 10);
      else
        v16 = (const sentencepiece::TrainerSpec *)&sentencepiece::_TrainerSpec_default_instance_;
      sentencepiece::TrainerSpec::MergeFrom(v14, v16);
    }
    if ((v13 & 2) != 0)
    {
      *((_DWORD *)this + 12) |= 2u;
      v17 = (sentencepiece::NormalizerSpec *)*((_QWORD *)this + 11);
      if (!v17)
      {
        v18 = (_QWORD *)(*v5 & 0xFFFFFFFFFFFFFFFELL);
        if ((*v5 & 1) != 0)
          v18 = (_QWORD *)*v18;
        v17 = (sentencepiece::NormalizerSpec *)google::protobuf::Arena::CreateMaybeMessage<sentencepiece::NormalizerSpec>((uint64_t)v18);
        *((_QWORD *)this + 11) = v17;
      }
      if (*((_QWORD *)a2 + 11))
        v19 = (const sentencepiece::NormalizerSpec *)*((_QWORD *)a2 + 11);
      else
        v19 = (const sentencepiece::NormalizerSpec *)&sentencepiece::_NormalizerSpec_default_instance_;
      sentencepiece::NormalizerSpec::MergeFrom(v17, v19);
      if ((v13 & 4) == 0)
      {
LABEL_25:
        if ((v13 & 8) == 0)
          return;
        goto LABEL_43;
      }
    }
    else if ((v13 & 4) == 0)
    {
      goto LABEL_25;
    }
    *((_DWORD *)this + 12) |= 4u;
    v20 = (sentencepiece::SelfTestData *)*((_QWORD *)this + 12);
    if (!v20)
    {
      v21 = (_QWORD *)(*v5 & 0xFFFFFFFFFFFFFFFELL);
      if ((*v5 & 1) != 0)
        v21 = (_QWORD *)*v21;
      v20 = (sentencepiece::SelfTestData *)google::protobuf::Arena::CreateMaybeMessage<sentencepiece::SelfTestData>((uint64_t)v21);
      *((_QWORD *)this + 12) = v20;
    }
    if (*((_QWORD *)a2 + 12))
      v22 = (const sentencepiece::SelfTestData *)*((_QWORD *)a2 + 12);
    else
      v22 = (const sentencepiece::SelfTestData *)&sentencepiece::_SelfTestData_default_instance_;
    sentencepiece::SelfTestData::MergeFrom(v20, v22);
    if ((v13 & 8) != 0)
    {
LABEL_43:
      *((_DWORD *)this + 12) |= 8u;
      v23 = (sentencepiece::NormalizerSpec *)*((_QWORD *)this + 13);
      if (!v23)
      {
        v24 = (_QWORD *)(*v5 & 0xFFFFFFFFFFFFFFFELL);
        if ((*v5 & 1) != 0)
          v24 = (_QWORD *)*v24;
        v23 = (sentencepiece::NormalizerSpec *)google::protobuf::Arena::CreateMaybeMessage<sentencepiece::NormalizerSpec>((uint64_t)v24);
        *((_QWORD *)this + 13) = v23;
      }
      if (*((_QWORD *)a2 + 13))
        v25 = (const sentencepiece::NormalizerSpec *)*((_QWORD *)a2 + 13);
      else
        v25 = (const sentencepiece::NormalizerSpec *)&sentencepiece::_NormalizerSpec_default_instance_;
      sentencepiece::NormalizerSpec::MergeFrom(v23, v25);
    }
  }
}

void sub_245C761B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void sentencepiece::ModelProto::CopyFrom(sentencepiece::ModelProto *this, const sentencepiece::ModelProto *a2)
{
  if (a2 != this)
  {
    sentencepiece::ModelProto::Clear(this);
    sentencepiece::ModelProto::MergeFrom(this, a2);
  }
}

uint64_t sentencepiece::ModelProto::IsInitialized(sentencepiece::ModelProto *this)
{
  uint64_t result;
  int v3;
  uint64_t v4;
  std::string *v5;
  uint64_t v6;
  std::string *v7;
  uint64_t v8;
  std::string *v9;
  uint64_t v10;
  std::string *v11;
  char v12;
  std::string v13[2];

  result = google::protobuf::internal::ExtensionSet::IsInitialized((sentencepiece::ModelProto *)((char *)this + 24));
  if (!(_DWORD)result)
    return result;
  result = google::protobuf::internal::AllAreInitialized<sentencepiece::ModelProto_SentencePiece>((uint64_t)this + 56);
  if (!(_DWORD)result)
    return result;
  v3 = *((_DWORD *)this + 12);
  if ((v3 & 1) != 0)
  {
    v4 = *((_QWORD *)this + 10);
    if (!v4)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.h", 4741);
      v5 = google::protobuf::internal::LogMessage::operator<<(v13, "CHECK failed: !value || trainer_spec_ != nullptr: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v12, (const char **)&v5->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v13[0].__r_.__value_.__l.__data_);
      v4 = *((_QWORD *)this + 10);
    }
    result = google::protobuf::internal::ExtensionSet::IsInitialized((google::protobuf::internal::ExtensionSet *)(v4 + 16));
    if (!(_DWORD)result)
      return result;
    v3 = *((_DWORD *)this + 12);
  }
  if ((v3 & 2) != 0)
  {
    v6 = *((_QWORD *)this + 11);
    if (!v6)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.h", 4824);
      v7 = google::protobuf::internal::LogMessage::operator<<(v13, "CHECK failed: !value || normalizer_spec_ != nullptr: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v12, (const char **)&v7->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v13[0].__r_.__value_.__l.__data_);
      v6 = *((_QWORD *)this + 11);
    }
    result = google::protobuf::internal::ExtensionSet::IsInitialized((google::protobuf::internal::ExtensionSet *)(v6 + 24));
    if (!(_DWORD)result)
      return result;
    v3 = *((_DWORD *)this + 12);
  }
  if ((v3 & 4) == 0)
  {
LABEL_18:
    if ((v3 & 8) == 0)
      return 1;
    v10 = *((_QWORD *)this + 13);
    if (!v10)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.h", 4990);
      v11 = google::protobuf::internal::LogMessage::operator<<(v13, "CHECK failed: !value || denormalizer_spec_ != nullptr: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v12, (const char **)&v11->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v13[0].__r_.__value_.__l.__data_);
      v10 = *((_QWORD *)this + 13);
    }
    result = google::protobuf::internal::ExtensionSet::IsInitialized((google::protobuf::internal::ExtensionSet *)(v10 + 24));
    if ((_DWORD)result)
      return 1;
    return result;
  }
  v8 = *((_QWORD *)this + 12);
  if (!v8)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.h", 4907);
    v9 = google::protobuf::internal::LogMessage::operator<<(v13, "CHECK failed: !value || self_test_data_ != nullptr: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v12, (const char **)&v9->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v13[0].__r_.__value_.__l.__data_);
    v8 = *((_QWORD *)this + 12);
  }
  result = google::protobuf::internal::ExtensionSet::IsInitialized((google::protobuf::internal::ExtensionSet *)(v8 + 16));
  if ((_DWORD)result)
  {
    v3 = *((_DWORD *)this + 12);
    goto LABEL_18;
  }
  return result;
}

void sub_245C763B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

BOOL google::protobuf::internal::AllAreInitialized<sentencepiece::ModelProto_SentencePiece>(uint64_t a1)
{
  int v2;
  int v3;
  BOOL v4;
  uint64_t v5;

  v2 = *(_DWORD *)(a1 + 8);
  do
  {
    v3 = v2;
    v4 = __OFSUB__(v2--, 1);
    if (v2 < 0 != v4)
      break;
    v5 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<sentencepiece::ModelProto_SentencePiece>::TypeHandler>(a1, v2);
  }
  while ((google::protobuf::internal::ExtensionSet::IsInitialized((google::protobuf::internal::ExtensionSet *)(v5 + 16)) & 1) != 0);
  return v3 < 1;
}

_QWORD *sentencepiece::ModelProto::GetTypeName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "sentencepiece.ModelProto");
}

uint64_t google::protobuf::Arena::CreateMaybeMessage<sentencepiece::TrainerSpec>(uint64_t a1)
{
  uint64_t AlignedNoHook;

  if (a1)
  {
    if ((*(_BYTE *)(a1 + 24) & 1) != 0)
    AlignedNoHook = google::protobuf::Arena::AllocateAlignedNoHook((google::protobuf::Arena *)a1, 0x148uLL);
    sentencepiece::TrainerSpec::TrainerSpec(AlignedNoHook, a1);
  }
  else
  {
    AlignedNoHook = operator new();
    sentencepiece::TrainerSpec::TrainerSpec(AlignedNoHook, 0);
  }
  return AlignedNoHook;
}

void sub_245C764DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x249544F58](v1, 0x10A1C4074230EEALL);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::Arena::CreateMaybeMessage<sentencepiece::NormalizerSpec>(uint64_t a1)
{
  uint64_t AlignedNoHook;

  if (a1)
  {
    if ((*(_BYTE *)(a1 + 24) & 1) != 0)
    AlignedNoHook = google::protobuf::Arena::AllocateAlignedNoHook((google::protobuf::Arena *)a1, 0x58uLL);
    sentencepiece::NormalizerSpec::NormalizerSpec(AlignedNoHook, a1);
  }
  else
  {
    AlignedNoHook = operator new();
    sentencepiece::NormalizerSpec::NormalizerSpec(AlignedNoHook, 0);
  }
  return AlignedNoHook;
}

void sub_245C76590(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x249544F58](v1, 0x10A1C402CDD3876);
  _Unwind_Resume(a1);
}

_QWORD *google::protobuf::Arena::CreateMaybeMessage<sentencepiece::SelfTestData_Sample>(uint64_t a1)
{
  _QWORD *AlignedNoHook;

  if (a1)
  {
    if ((*(_BYTE *)(a1 + 24) & 1) != 0)
    AlignedNoHook = (_QWORD *)google::protobuf::Arena::AllocateAlignedNoHook((google::protobuf::Arena *)a1, 0x28uLL);
    *AlignedNoHook = &off_2516E2998;
    AlignedNoHook[1] = a1;
    AlignedNoHook[2] = 0;
    if (atomic_load(scc_info_SelfTestData_Sample_sentencepiece_5fmodel_2eproto))
      goto LABEL_7;
  }
  else
  {
    AlignedNoHook = (_QWORD *)operator new();
    *AlignedNoHook = &off_2516E2998;
    AlignedNoHook[1] = 0;
    AlignedNoHook[2] = 0;
    if (atomic_load(scc_info_SelfTestData_Sample_sentencepiece_5fmodel_2eproto))
LABEL_7:
      google::protobuf::internal::InitSCCImpl(scc_info_SelfTestData_Sample_sentencepiece_5fmodel_2eproto);
  }
  AlignedNoHook[3] = &google::protobuf::internal::fixed_address_empty_string;
  AlignedNoHook[4] = &google::protobuf::internal::fixed_address_empty_string;
  return AlignedNoHook;
}

void sub_245C7669C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x249544F58](v1, 0x1081C400F7E8713);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::Arena::CreateMaybeMessage<sentencepiece::SelfTestData>(uint64_t a1)
{
  uint64_t AlignedNoHook;

  if (a1)
  {
    if ((*(_BYTE *)(a1 + 24) & 1) != 0)
    AlignedNoHook = google::protobuf::Arena::AllocateAlignedNoHook((google::protobuf::Arena *)a1, 0x48uLL);
    sentencepiece::SelfTestData::SelfTestData(AlignedNoHook, a1);
  }
  else
  {
    AlignedNoHook = operator new();
    sentencepiece::SelfTestData::SelfTestData(AlignedNoHook, 0);
  }
  return AlignedNoHook;
}

void sub_245C76750(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x249544F58](v1, 0x10A1C4075D007F8);
  _Unwind_Resume(a1);
}

_QWORD *google::protobuf::Arena::CreateMaybeMessage<sentencepiece::ModelProto_SentencePiece>(uint64_t a1)
{
  _QWORD *AlignedNoHook;

  if (a1)
  {
    if ((*(_BYTE *)(a1 + 24) & 1) != 0)
    AlignedNoHook = (_QWORD *)google::protobuf::Arena::AllocateAlignedNoHook((google::protobuf::Arena *)a1, 0x40uLL);
    sentencepiece::ModelProto_SentencePiece::ModelProto_SentencePiece(AlignedNoHook, a1);
  }
  else
  {
    AlignedNoHook = (_QWORD *)operator new();
    sentencepiece::ModelProto_SentencePiece::ModelProto_SentencePiece(AlignedNoHook, 0);
  }
  return AlignedNoHook;
}

void sub_245C76804(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x249544F58](v1, 0x10A1C40F497E4DALL);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::Arena::CreateMaybeMessage<sentencepiece::ModelProto>(uint64_t a1)
{
  uint64_t AlignedNoHook;

  if (a1)
  {
    if ((*(_BYTE *)(a1 + 24) & 1) != 0)
    AlignedNoHook = google::protobuf::Arena::AllocateAlignedNoHook((google::protobuf::Arena *)a1, 0x70uLL);
    sentencepiece::ModelProto::ModelProto(AlignedNoHook, a1);
  }
  else
  {
    AlignedNoHook = operator new();
    sentencepiece::ModelProto::ModelProto(AlignedNoHook, 0);
  }
  return AlignedNoHook;
}

void sub_245C768B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x249544F58](v1, 0x10A1C4047CE62CFLL);
  _Unwind_Resume(a1);
}

uint64_t sentencepiece::TrainerSpec::New(sentencepiece::TrainerSpec *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<sentencepiece::TrainerSpec>(0);
}

uint64_t sentencepiece::TrainerSpec::New(uint64_t a1, uint64_t a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<sentencepiece::TrainerSpec>(a2);
}

uint64_t sentencepiece::TrainerSpec::GetCachedSize(sentencepiece::TrainerSpec *this)
{
  return *((unsigned int *)this + 12);
}

uint64_t sentencepiece::NormalizerSpec::New(sentencepiece::NormalizerSpec *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<sentencepiece::NormalizerSpec>(0);
}

uint64_t sentencepiece::NormalizerSpec::New(uint64_t a1, uint64_t a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<sentencepiece::NormalizerSpec>(a2);
}

uint64_t sentencepiece::NormalizerSpec::GetCachedSize(sentencepiece::NormalizerSpec *this)
{
  return *((unsigned int *)this + 13);
}

uint64_t sentencepiece::NormalizerSpec::add_suffix_space(sentencepiece::NormalizerSpec *this)
{
  return *((unsigned __int8 *)this + 80);
}

uint64_t sentencepiece::NormalizerSpec::add_dummy_prefix(sentencepiece::NormalizerSpec *this)
{
  return *((unsigned __int8 *)this + 81);
}

uint64_t sentencepiece::NormalizerSpec::remove_extra_whitespaces(sentencepiece::NormalizerSpec *this)
{
  return *((unsigned __int8 *)this + 82);
}

uint64_t sentencepiece::NormalizerSpec::escape_whitespaces(sentencepiece::NormalizerSpec *this)
{
  return *((unsigned __int8 *)this + 83);
}

uint64_t `non-virtual thunk to'sentencepiece::NormalizerSpec::add_dummy_prefix(sentencepiece::NormalizerSpec *this)
{
  return *((unsigned __int8 *)this + 65);
}

uint64_t `non-virtual thunk to'sentencepiece::NormalizerSpec::remove_extra_whitespaces(sentencepiece::NormalizerSpec *this)
{
  return *((unsigned __int8 *)this + 66);
}

uint64_t `non-virtual thunk to'sentencepiece::NormalizerSpec::escape_whitespaces(sentencepiece::NormalizerSpec *this)
{
  return *((unsigned __int8 *)this + 67);
}

uint64_t `non-virtual thunk to'sentencepiece::NormalizerSpec::add_suffix_space(sentencepiece::NormalizerSpec *this)
{
  return *((unsigned __int8 *)this + 64);
}

_QWORD *sentencepiece::SelfTestData_Sample::New(sentencepiece::SelfTestData_Sample *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<sentencepiece::SelfTestData_Sample>(0);
}

_QWORD *sentencepiece::SelfTestData_Sample::New(uint64_t a1, uint64_t a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<sentencepiece::SelfTestData_Sample>(a2);
}

uint64_t sentencepiece::SelfTestData_Sample::GetCachedSize(sentencepiece::SelfTestData_Sample *this)
{
  return *((unsigned int *)this + 5);
}

uint64_t sentencepiece::SelfTestData::New(sentencepiece::SelfTestData *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<sentencepiece::SelfTestData>(0);
}

uint64_t sentencepiece::SelfTestData::New(uint64_t a1, uint64_t a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<sentencepiece::SelfTestData>(a2);
}

uint64_t sentencepiece::SelfTestData::GetCachedSize(sentencepiece::SelfTestData *this)
{
  return *((unsigned int *)this + 16);
}

_QWORD *sentencepiece::ModelProto_SentencePiece::New(sentencepiece::ModelProto_SentencePiece *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<sentencepiece::ModelProto_SentencePiece>(0);
}

_QWORD *sentencepiece::ModelProto_SentencePiece::New(uint64_t a1, uint64_t a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<sentencepiece::ModelProto_SentencePiece>(a2);
}

uint64_t sentencepiece::ModelProto_SentencePiece::GetCachedSize(sentencepiece::ModelProto_SentencePiece *this)
{
  return *((unsigned int *)this + 11);
}

uint64_t sentencepiece::ModelProto::New(sentencepiece::ModelProto *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<sentencepiece::ModelProto>(0);
}

uint64_t sentencepiece::ModelProto::New(uint64_t a1, uint64_t a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<sentencepiece::ModelProto>(a2);
}

uint64_t sentencepiece::ModelProto::GetCachedSize(sentencepiece::ModelProto *this)
{
  return *((unsigned int *)this + 13);
}

uint64_t sentencepiece::ModelProto::PieceSize(sentencepiece::ModelProto *this)
{
  return *((unsigned int *)this + 16);
}

char *sentencepiece::ModelProto::UnkSurface(sentencepiece::ModelProto *this)
{
  _QWORD *v1;
  uint64_t v2;
  char *result;

  v1 = (_QWORD *)*((_QWORD *)this + 10);
  if (!v1)
    v1 = &sentencepiece::_TrainerSpec_default_instance_;
  v2 = v1[22];
  if (v2)
  {
    result = (char *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  }
  else
  {
    result = (char *)atomic_load(&qword_257515278);
    if (!result)
      result = (char *)google::protobuf::internal::LazyString::Init((google::protobuf::internal::LazyString *)&sentencepiece::TrainerSpec::_i_give_permission_to_break_this_code_default_unk_surface_);
  }
  if (result[23] < 0)
    return *(char **)result;
  return result;
}

char *sentencepiece::ModelProto::UnkPiece(sentencepiece::ModelProto *this)
{
  _QWORD *v1;
  uint64_t v2;
  char *result;

  v1 = (_QWORD *)*((_QWORD *)this + 10);
  if (!v1)
    v1 = &sentencepiece::_TrainerSpec_default_instance_;
  v2 = v1[23];
  if (v2)
  {
    result = (char *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  }
  else
  {
    result = (char *)atomic_load(&qword_2575151F8);
    if (!result)
      result = (char *)google::protobuf::internal::LazyString::Init((google::protobuf::internal::LazyString *)&sentencepiece::TrainerSpec::_i_give_permission_to_break_this_code_default_unk_piece_);
  }
  if (result[23] < 0)
    return *(char **)result;
  return result;
}

char *sentencepiece::ModelProto::BosPiece(sentencepiece::ModelProto *this)
{
  _QWORD *v1;
  uint64_t v2;
  char *result;

  v1 = (_QWORD *)*((_QWORD *)this + 10);
  if (!v1)
    v1 = &sentencepiece::_TrainerSpec_default_instance_;
  v2 = v1[24];
  if (v2)
  {
    result = (char *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  }
  else
  {
    result = (char *)atomic_load(&qword_257515218);
    if (!result)
      result = (char *)google::protobuf::internal::LazyString::Init((google::protobuf::internal::LazyString *)&sentencepiece::TrainerSpec::_i_give_permission_to_break_this_code_default_bos_piece_);
  }
  if (result[23] < 0)
    return *(char **)result;
  return result;
}

char *sentencepiece::ModelProto::EosPiece(sentencepiece::ModelProto *this)
{
  _QWORD *v1;
  uint64_t v2;
  char *result;

  v1 = (_QWORD *)*((_QWORD *)this + 10);
  if (!v1)
    v1 = &sentencepiece::_TrainerSpec_default_instance_;
  v2 = v1[25];
  if (v2)
  {
    result = (char *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  }
  else
  {
    result = (char *)atomic_load(&qword_257515238);
    if (!result)
      result = (char *)google::protobuf::internal::LazyString::Init((google::protobuf::internal::LazyString *)&sentencepiece::TrainerSpec::_i_give_permission_to_break_this_code_default_eos_piece_);
  }
  if (result[23] < 0)
    return *(char **)result;
  return result;
}

char *sentencepiece::ModelProto::PadPiece(sentencepiece::ModelProto *this)
{
  _QWORD *v1;
  uint64_t v2;
  char *result;

  v1 = (_QWORD *)*((_QWORD *)this + 10);
  if (!v1)
    v1 = &sentencepiece::_TrainerSpec_default_instance_;
  v2 = v1[26];
  if (v2)
  {
    result = (char *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  }
  else
  {
    result = (char *)atomic_load(&qword_257515258);
    if (!result)
      result = (char *)google::protobuf::internal::LazyString::Init((google::protobuf::internal::LazyString *)&sentencepiece::TrainerSpec::_i_give_permission_to_break_this_code_default_pad_piece_);
  }
  if (result[23] < 0)
    return *(char **)result;
  return result;
}

uint64_t sentencepiece::ModelProto::ByteFallback(sentencepiece::ModelProto *this)
{
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)*((_QWORD *)this + 10);
  if (!v1)
    v1 = (unsigned __int8 *)&sentencepiece::_TrainerSpec_default_instance_;
  return v1[248];
}

uint64_t sentencepiece::ModelProto::HasUnkSurface(sentencepiece::ModelProto *this)
{
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)&sentencepiece::_TrainerSpec_default_instance_;
  if (*((_QWORD *)this + 10))
    v1 = (unsigned __int8 *)*((_QWORD *)this + 10);
  return (v1[40] >> 3) & 1;
}

char *sentencepiece::ModelProto::IdToPiece(sentencepiece::ModelProto *this, int a2)
{
  char *result;

  result = (char *)(*(_QWORD *)(google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<sentencepiece::ModelProto_SentencePiece>::TypeHandler>((uint64_t)this + 56, a2)+ 48) & 0xFFFFFFFFFFFFFFFELL);
  if (result[23] < 0)
    return *(char **)result;
  return result;
}

float sentencepiece::ModelProto::GetScore(sentencepiece::ModelProto *this, int a2)
{
  return *(float *)(google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<sentencepiece::ModelProto_SentencePiece>::TypeHandler>((uint64_t)this + 56, a2)+ 56);
}

BOOL sentencepiece::ModelProto::PieceIsNormal(sentencepiece::ModelProto *this, int a2)
{
  return *(_DWORD *)(google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<sentencepiece::ModelProto_SentencePiece>::TypeHandler>((uint64_t)this + 56, a2)+ 60) == 1;
}

BOOL sentencepiece::ModelProto::PieceIsUnknown(sentencepiece::ModelProto *this, int a2)
{
  return *(_DWORD *)(google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<sentencepiece::ModelProto_SentencePiece>::TypeHandler>((uint64_t)this + 56, a2)+ 60) == 2;
}

BOOL sentencepiece::ModelProto::PieceIsControl(sentencepiece::ModelProto *this, int a2)
{
  return *(_DWORD *)(google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<sentencepiece::ModelProto_SentencePiece>::TypeHandler>((uint64_t)this + 56, a2)+ 60) == 3;
}

BOOL sentencepiece::ModelProto::PieceIsUnused(sentencepiece::ModelProto *this, int a2)
{
  return *(_DWORD *)(google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<sentencepiece::ModelProto_SentencePiece>::TypeHandler>((uint64_t)this + 56, a2)+ 60) == 5;
}

BOOL sentencepiece::ModelProto::PieceIsUserDefined(sentencepiece::ModelProto *this, int a2)
{
  return *(_DWORD *)(google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<sentencepiece::ModelProto_SentencePiece>::TypeHandler>((uint64_t)this + 56, a2)+ 60) == 4;
}

BOOL sentencepiece::ModelProto::PieceIsByte(sentencepiece::ModelProto *this, int a2)
{
  return *(_DWORD *)(google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<sentencepiece::ModelProto_SentencePiece>::TypeHandler>((uint64_t)this + 56, a2)+ 60) == 6;
}

uint64_t sentencepiece::ModelProto::NormalizerSpec(sentencepiece::ModelProto *this)
{
  void *v1;

  v1 = (void *)*((_QWORD *)this + 11);
  if (!v1)
    v1 = &sentencepiece::_NormalizerSpec_default_instance_;
  return (uint64_t)v1 + 16;
}

uint64_t sentencepiece::ModelProto::DenormalizerSpec(sentencepiece::ModelProto *this)
{
  void *v1;

  v1 = (void *)*((_QWORD *)this + 13);
  if (!v1)
    v1 = &sentencepiece::_NormalizerSpec_default_instance_;
  return (uint64_t)v1 + 16;
}

uint64_t sentencepiece::ModelProto::GetModelType(sentencepiece::ModelProto *this)
{
  _DWORD *v1;
  int v2;
  unsigned int v3;
  unsigned int v4;

  v1 = (_DWORD *)*((_QWORD *)this + 10);
  if (!v1)
    v1 = &sentencepiece::_TrainerSpec_default_instance_;
  v2 = v1[68];
  v3 = v2 - 2;
  v4 = v2 - 1;
  if (v3 >= 3)
    return 0;
  else
    return v4;
}

uint64_t `non-virtual thunk to'sentencepiece::ModelProto::PieceSize(sentencepiece::ModelProto *this)
{
  return *((unsigned int *)this + 12);
}

char *`non-virtual thunk to'sentencepiece::ModelProto::UnkSurface(sentencepiece::ModelProto *this)
{
  _QWORD *v1;
  uint64_t v2;
  char *result;

  v1 = (_QWORD *)*((_QWORD *)this + 8);
  if (!v1)
    v1 = &sentencepiece::_TrainerSpec_default_instance_;
  v2 = v1[22];
  if (v2)
  {
    result = (char *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  }
  else
  {
    result = (char *)atomic_load(&qword_257515278);
    if (!result)
      result = (char *)google::protobuf::internal::LazyString::Init((google::protobuf::internal::LazyString *)&sentencepiece::TrainerSpec::_i_give_permission_to_break_this_code_default_unk_surface_);
  }
  if (result[23] < 0)
    return *(char **)result;
  return result;
}

char *`non-virtual thunk to'sentencepiece::ModelProto::UnkPiece(sentencepiece::ModelProto *this)
{
  _QWORD *v1;
  uint64_t v2;
  char *result;

  v1 = (_QWORD *)*((_QWORD *)this + 8);
  if (!v1)
    v1 = &sentencepiece::_TrainerSpec_default_instance_;
  v2 = v1[23];
  if (v2)
  {
    result = (char *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  }
  else
  {
    result = (char *)atomic_load(&qword_2575151F8);
    if (!result)
      result = (char *)google::protobuf::internal::LazyString::Init((google::protobuf::internal::LazyString *)&sentencepiece::TrainerSpec::_i_give_permission_to_break_this_code_default_unk_piece_);
  }
  if (result[23] < 0)
    return *(char **)result;
  return result;
}

char *`non-virtual thunk to'sentencepiece::ModelProto::BosPiece(sentencepiece::ModelProto *this)
{
  _QWORD *v1;
  uint64_t v2;
  char *result;

  v1 = (_QWORD *)*((_QWORD *)this + 8);
  if (!v1)
    v1 = &sentencepiece::_TrainerSpec_default_instance_;
  v2 = v1[24];
  if (v2)
  {
    result = (char *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  }
  else
  {
    result = (char *)atomic_load(&qword_257515218);
    if (!result)
      result = (char *)google::protobuf::internal::LazyString::Init((google::protobuf::internal::LazyString *)&sentencepiece::TrainerSpec::_i_give_permission_to_break_this_code_default_bos_piece_);
  }
  if (result[23] < 0)
    return *(char **)result;
  return result;
}

char *`non-virtual thunk to'sentencepiece::ModelProto::EosPiece(sentencepiece::ModelProto *this)
{
  _QWORD *v1;
  uint64_t v2;
  char *result;

  v1 = (_QWORD *)*((_QWORD *)this + 8);
  if (!v1)
    v1 = &sentencepiece::_TrainerSpec_default_instance_;
  v2 = v1[25];
  if (v2)
  {
    result = (char *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  }
  else
  {
    result = (char *)atomic_load(&qword_257515238);
    if (!result)
      result = (char *)google::protobuf::internal::LazyString::Init((google::protobuf::internal::LazyString *)&sentencepiece::TrainerSpec::_i_give_permission_to_break_this_code_default_eos_piece_);
  }
  if (result[23] < 0)
    return *(char **)result;
  return result;
}

char *`non-virtual thunk to'sentencepiece::ModelProto::PadPiece(sentencepiece::ModelProto *this)
{
  _QWORD *v1;
  uint64_t v2;
  char *result;

  v1 = (_QWORD *)*((_QWORD *)this + 8);
  if (!v1)
    v1 = &sentencepiece::_TrainerSpec_default_instance_;
  v2 = v1[26];
  if (v2)
  {
    result = (char *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  }
  else
  {
    result = (char *)atomic_load(&qword_257515258);
    if (!result)
      result = (char *)google::protobuf::internal::LazyString::Init((google::protobuf::internal::LazyString *)&sentencepiece::TrainerSpec::_i_give_permission_to_break_this_code_default_pad_piece_);
  }
  if (result[23] < 0)
    return *(char **)result;
  return result;
}

uint64_t `non-virtual thunk to'sentencepiece::ModelProto::ByteFallback(sentencepiece::ModelProto *this)
{
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)*((_QWORD *)this + 8);
  if (!v1)
    v1 = (unsigned __int8 *)&sentencepiece::_TrainerSpec_default_instance_;
  return v1[248];
}

uint64_t `non-virtual thunk to'sentencepiece::ModelProto::HasUnkSurface(sentencepiece::ModelProto *this)
{
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)&sentencepiece::_TrainerSpec_default_instance_;
  if (*((_QWORD *)this + 8))
    v1 = (unsigned __int8 *)*((_QWORD *)this + 8);
  return (v1[40] >> 3) & 1;
}

uint64_t `non-virtual thunk to'sentencepiece::ModelProto::GetModelType(sentencepiece::ModelProto *this)
{
  _DWORD *v1;
  int v2;
  unsigned int v3;
  unsigned int v4;

  v1 = (_DWORD *)*((_QWORD *)this + 8);
  if (!v1)
    v1 = &sentencepiece::_TrainerSpec_default_instance_;
  v2 = v1[68];
  v3 = v2 - 2;
  v4 = v2 - 1;
  if (v3 >= 3)
    return 0;
  else
    return v4;
}

char *`non-virtual thunk to'sentencepiece::ModelProto::IdToPiece(sentencepiece::ModelProto *this, int a2)
{
  char *result;

  result = (char *)(*(_QWORD *)(google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<sentencepiece::ModelProto_SentencePiece>::TypeHandler>((uint64_t)this + 40, a2)+ 48) & 0xFFFFFFFFFFFFFFFELL);
  if (result[23] < 0)
    return *(char **)result;
  return result;
}

float `non-virtual thunk to'sentencepiece::ModelProto::GetScore(sentencepiece::ModelProto *this, int a2)
{
  return *(float *)(google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<sentencepiece::ModelProto_SentencePiece>::TypeHandler>((uint64_t)this + 40, a2)+ 56);
}

BOOL `non-virtual thunk to'sentencepiece::ModelProto::PieceIsNormal(sentencepiece::ModelProto *this, int a2)
{
  return *(_DWORD *)(google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<sentencepiece::ModelProto_SentencePiece>::TypeHandler>((uint64_t)this + 40, a2)+ 60) == 1;
}

BOOL `non-virtual thunk to'sentencepiece::ModelProto::PieceIsUnknown(sentencepiece::ModelProto *this, int a2)
{
  return *(_DWORD *)(google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<sentencepiece::ModelProto_SentencePiece>::TypeHandler>((uint64_t)this + 40, a2)+ 60) == 2;
}

BOOL `non-virtual thunk to'sentencepiece::ModelProto::PieceIsControl(sentencepiece::ModelProto *this, int a2)
{
  return *(_DWORD *)(google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<sentencepiece::ModelProto_SentencePiece>::TypeHandler>((uint64_t)this + 40, a2)+ 60) == 3;
}

BOOL `non-virtual thunk to'sentencepiece::ModelProto::PieceIsUnused(sentencepiece::ModelProto *this, int a2)
{
  return *(_DWORD *)(google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<sentencepiece::ModelProto_SentencePiece>::TypeHandler>((uint64_t)this + 40, a2)+ 60) == 5;
}

BOOL `non-virtual thunk to'sentencepiece::ModelProto::PieceIsUserDefined(sentencepiece::ModelProto *this, int a2)
{
  return *(_DWORD *)(google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<sentencepiece::ModelProto_SentencePiece>::TypeHandler>((uint64_t)this + 40, a2)+ 60) == 4;
}

BOOL `non-virtual thunk to'sentencepiece::ModelProto::PieceIsByte(sentencepiece::ModelProto *this, int a2)
{
  return *(_DWORD *)(google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<sentencepiece::ModelProto_SentencePiece>::TypeHandler>((uint64_t)this + 40, a2)+ 60) == 6;
}

uint64_t `non-virtual thunk to'sentencepiece::ModelProto::NormalizerSpec(sentencepiece::ModelProto *this)
{
  void *v1;

  v1 = (void *)*((_QWORD *)this + 9);
  if (!v1)
    v1 = &sentencepiece::_NormalizerSpec_default_instance_;
  return (uint64_t)v1 + 16;
}

uint64_t `non-virtual thunk to'sentencepiece::ModelProto::DenormalizerSpec(sentencepiece::ModelProto *this)
{
  void *v1;

  v1 = (void *)*((_QWORD *)this + 11);
  if (!v1)
    v1 = &sentencepiece::_NormalizerSpec_default_instance_;
  return (uint64_t)v1 + 16;
}

void google::protobuf::internal::arena_destruct_object<std::string>(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<sentencepiece::SelfTestData_Sample>::TypeHandler>(uint64_t a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1705);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1706);
    v5 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) < (current_size_): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * a2 + 8);
}

void sub_245C7722C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::string *v4;
  char v5;
  std::string v6[2];

  v1 = *(unsigned int *)(a1 + 8);
  if ((v1 & 0x80000000) != 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v6, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1780);
    v4 = google::protobuf::internal::LogMessage::operator<<(v6, "CHECK failed: (n) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v5, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v6[0].__r_.__value_.__l.__data_);
  }
  else if ((_DWORD)v1)
  {
    v2 = *(_QWORD *)(a1 + 16) + 8;
    do
    {
      v3 = *(_QWORD *)v2;
      if (*(char *)(*(_QWORD *)v2 + 23) < 0)
      {
        **(_BYTE **)v3 = 0;
        *(_QWORD *)(v3 + 8) = 0;
      }
      else
      {
        *(_BYTE *)v3 = 0;
        *(_BYTE *)(v3 + 23) = 0;
      }
      v2 += 8;
      --v1;
    }
    while (v1);
    *(_DWORD *)(a1 + 8) = 0;
  }
}

void sub_245C772F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>(uint64_t a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1705);
    v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1706);
    v5 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (index) < (current_size_): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * a2 + 8);
}

void sub_245C773C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<sentencepiece::SelfTestData_Sample>::TypeHandler>(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;
  std::string *v5;
  char v6;
  std::string v7[2];

  v1 = *(unsigned int *)(a1 + 8);
  if ((v1 & 0x80000000) != 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1780);
    v5 = google::protobuf::internal::LogMessage::operator<<(v7, "CHECK failed: (n) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v6, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v7[0].__r_.__value_.__l.__data_);
  }
  else if ((_DWORD)v1)
  {
    v3 = (uint64_t *)(*(_QWORD *)(a1 + 16) + 8);
    do
    {
      v4 = *v3++;
      sentencepiece::SelfTestData_Sample::Clear(v4);
      --v1;
    }
    while (v1);
    *(_DWORD *)(a1 + 8) = 0;
  }
}

void sub_245C7747C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<sentencepiece::ModelProto_SentencePiece>::TypeHandler>(uint64_t a1)
{
  uint64_t v1;
  sentencepiece::ModelProto_SentencePiece **v3;
  sentencepiece::ModelProto_SentencePiece *v4;
  std::string *v5;
  char v6;
  std::string v7[2];

  v1 = *(unsigned int *)(a1 + 8);
  if ((v1 & 0x80000000) != 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1780);
    v5 = google::protobuf::internal::LogMessage::operator<<(v7, "CHECK failed: (n) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v6, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v7[0].__r_.__value_.__l.__data_);
  }
  else if ((_DWORD)v1)
  {
    v3 = (sentencepiece::ModelProto_SentencePiece **)(*(_QWORD *)(a1 + 16) + 8);
    do
    {
      v4 = *v3++;
      sentencepiece::ModelProto_SentencePiece::Clear(v4);
      --v1;
    }
    while (v1);
    *(_DWORD *)(a1 + 8) = 0;
  }
}

void sub_245C77528(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>(uint64_t a1, uint64_t a2)
{
  std::string *v4;
  int v5;
  const std::string **v6;
  unsigned int *v7;
  int v8;
  int *v9;
  char v10;
  std::string v11[2];

  if (a2 == a1)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1799);
    v4 = google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v10, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v11[0].__r_.__value_.__l.__data_);
  }
  v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    v6 = (const std::string **)(*(_QWORD *)(a2 + 16) + 8);
    v7 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)a1, v5);
    google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((std::string *)a1, (std::string **)v7, v6, v5, **(_DWORD **)(a1 + 16) - *(_DWORD *)(a1 + 8));
    v8 = *(_DWORD *)(a1 + 8) + v5;
    *(_DWORD *)(a1 + 8) = v8;
    v9 = *(int **)(a1 + 16);
    if (*v9 < v8)
      *v9 = v8;
  }
}

void sub_245C77614(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

std::string *google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>(std::string *result, std::string **a2, const std::string **a3, signed int a4, signed int a5)
{
  std::string::__raw *v9;
  uint64_t v10;
  const std::string **v11;
  std::string **v12;
  const std::string *v13;
  const std::string *v14;
  std::string *v15;
  int v16;
  std::string::size_type v17;
  const std::string **v18;
  std::string **v19;
  const std::string *v20;
  std::string *AlignedAndAddCleanup;
  std::string *v22;

  v9 = (std::string::__raw *)result;
  if (a5 >= a4)
    v10 = a4;
  else
    v10 = a5;
  if ((int)v10 >= 1)
  {
    v11 = a3;
    v12 = a2;
    do
    {
      v14 = *v11++;
      v13 = v14;
      v15 = *v12++;
      result = std::string::operator=(v15, v13);
      --v10;
    }
    while (v10);
  }
  v16 = a4 - a5;
  if (a4 > a5)
  {
    v17 = v9->__words[0];
    v18 = &a3[a5];
    v19 = &a2[a5];
    do
    {
      v20 = *v18;
      if (v17)
      {
        if ((*(_BYTE *)(v17 + 24) & 1) != 0)
        AlignedAndAddCleanup = (std::string *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((google::protobuf::internal::ArenaImpl *)v17, (google::protobuf::internal::SerialArena::Block *)0x18, (void (*)(void *))google::protobuf::internal::arena_destruct_object<std::string>);
      }
      else
      {
        AlignedAndAddCleanup = (std::string *)operator new();
      }
      v22 = AlignedAndAddCleanup;
      AlignedAndAddCleanup->__r_.__value_.__r.__words[0] = 0;
      AlignedAndAddCleanup->__r_.__value_.__l.__size_ = 0;
      AlignedAndAddCleanup->__r_.__value_.__r.__words[2] = 0;
      result = std::string::operator=(AlignedAndAddCleanup, v20);
      *v19++ = v22;
      ++v18;
      --v16;
    }
    while (v16);
  }
  return result;
}

void google::protobuf::RepeatedPtrField<sentencepiece::SelfTestData_Sample>::~RepeatedPtrField(google::protobuf::internal::ArenaImpl **a1)
{
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<sentencepiece::SelfTestData_Sample>::TypeHandler>(a1);
  google::protobuf::internal::RepeatedPtrFieldBase::~RepeatedPtrFieldBase(a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<sentencepiece::SelfTestData_Sample>::TypeHandler>(_QWORD *a1)
{
  sentencepiece::SelfTestData_Sample **v2;
  sentencepiece::SelfTestData_Sample **v3;
  uint64_t v4;

  v2 = (sentencepiece::SelfTestData_Sample **)a1[2];
  if (v2 && !*a1)
  {
    v3 = v2 + 1;
    v4 = *(unsigned int *)v2;
    if ((int)v4 >= 1)
    {
      do
      {
        if (*v3)
        {
          sentencepiece::SelfTestData_Sample::~SelfTestData_Sample(*v3);
          MEMORY[0x249544F58]();
        }
        ++v3;
        --v4;
      }
      while (v4);
      v2 = (sentencepiece::SelfTestData_Sample **)a1[2];
    }
    operator delete(v2);
  }
  a1[2] = 0;
}

void google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<sentencepiece::SelfTestData_Sample>::TypeHandler>(uint64_t a1, uint64_t a2)
{
  std::string *v4;
  unsigned int v5;
  sentencepiece::SelfTestData_Sample **v6;
  unsigned int *v7;
  signed int v8;
  signed int *v9;
  char v10;
  std::string v11[2];

  if (a2 == a1)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1799);
    v4 = google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v10, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v11[0].__r_.__value_.__l.__data_);
  }
  v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    v6 = (sentencepiece::SelfTestData_Sample **)(*(_QWORD *)(a2 + 16) + 8);
    v7 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)a1, v5);
    google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<sentencepiece::SelfTestData_Sample>::TypeHandler>((uint64_t *)a1, (sentencepiece::SelfTestData_Sample **)v7, v6, v5, **(_DWORD **)(a1 + 16) - *(_DWORD *)(a1 + 8));
    v8 = *(_DWORD *)(a1 + 8) + v5;
    *(_DWORD *)(a1 + 8) = v8;
    v9 = *(signed int **)(a1 + 16);
    if (*v9 < v8)
      *v9 = v8;
  }
}

void sub_245C778BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<sentencepiece::SelfTestData_Sample>::TypeHandler>(uint64_t *a1, sentencepiece::SelfTestData_Sample **a2, sentencepiece::SelfTestData_Sample **a3, unsigned int a4, unsigned int a5)
{
  uint64_t v10;
  sentencepiece::SelfTestData_Sample **v11;
  sentencepiece::SelfTestData_Sample **v12;
  sentencepiece::SelfTestData_Sample *v13;
  sentencepiece::SelfTestData_Sample *v14;
  sentencepiece::SelfTestData_Sample *v15;
  BOOL v16;
  int v17;
  uint64_t v18;
  sentencepiece::SelfTestData_Sample **v19;
  sentencepiece::SelfTestData_Sample **v20;
  sentencepiece::SelfTestData_Sample *v21;
  sentencepiece::SelfTestData_Sample *v22;

  if ((int)a5 >= (int)a4)
    v10 = a4;
  else
    v10 = a5;
  if ((int)v10 >= 1)
  {
    v11 = a3;
    v12 = a2;
    do
    {
      v14 = *v11++;
      v13 = v14;
      v15 = *v12++;
      google::protobuf::internal::GenericTypeHandler<sentencepiece::SelfTestData_Sample>::Merge(v13, v15);
      --v10;
    }
    while (v10);
  }
  v16 = __OFSUB__(a4, a5);
  v17 = a4 - a5;
  if (!((v17 < 0) ^ v16 | (v17 == 0)))
  {
    v18 = *a1;
    v19 = &a3[a5];
    v20 = &a2[a5];
    do
    {
      v21 = *v19++;
      v22 = (sentencepiece::SelfTestData_Sample *)google::protobuf::Arena::CreateMaybeMessage<sentencepiece::SelfTestData_Sample>(v18);
      google::protobuf::internal::GenericTypeHandler<sentencepiece::SelfTestData_Sample>::Merge(v21, v22);
      *v20++ = v22;
      --v17;
    }
    while (v17);
  }
}

void google::protobuf::internal::GenericTypeHandler<sentencepiece::SelfTestData_Sample>::Merge(sentencepiece::SelfTestData_Sample *a1, sentencepiece::SelfTestData_Sample *this)
{
  sentencepiece::SelfTestData_Sample::MergeFrom(this, a1);
}

void google::protobuf::RepeatedPtrField<sentencepiece::ModelProto_SentencePiece>::~RepeatedPtrField(google::protobuf::internal::ArenaImpl **a1)
{
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<sentencepiece::ModelProto_SentencePiece>::TypeHandler>(a1);
  google::protobuf::internal::RepeatedPtrFieldBase::~RepeatedPtrFieldBase(a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<sentencepiece::ModelProto_SentencePiece>::TypeHandler>(_QWORD *a1)
{
  sentencepiece::ModelProto_SentencePiece **v2;
  sentencepiece::ModelProto_SentencePiece **v3;
  uint64_t v4;

  v2 = (sentencepiece::ModelProto_SentencePiece **)a1[2];
  if (v2 && !*a1)
  {
    v3 = v2 + 1;
    v4 = *(unsigned int *)v2;
    if ((int)v4 >= 1)
    {
      do
      {
        if (*v3)
        {
          sentencepiece::ModelProto_SentencePiece::~ModelProto_SentencePiece(*v3);
          MEMORY[0x249544F58]();
        }
        ++v3;
        --v4;
      }
      while (v4);
      v2 = (sentencepiece::ModelProto_SentencePiece **)a1[2];
    }
    operator delete(v2);
  }
  a1[2] = 0;
}

void google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<sentencepiece::ModelProto_SentencePiece>::TypeHandler>(uint64_t a1, uint64_t a2)
{
  std::string *v4;
  unsigned int v5;
  sentencepiece::ModelProto_SentencePiece **v6;
  unsigned int *v7;
  signed int v8;
  signed int *v9;
  char v10;
  std::string v11[2];

  if (a2 == a1)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1799);
    v4 = google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v10, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v11[0].__r_.__value_.__l.__data_);
  }
  v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    v6 = (sentencepiece::ModelProto_SentencePiece **)(*(_QWORD *)(a2 + 16) + 8);
    v7 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)a1, v5);
    google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<sentencepiece::ModelProto_SentencePiece>::TypeHandler>((uint64_t *)a1, (sentencepiece::ModelProto_SentencePiece **)v7, v6, v5, **(_DWORD **)(a1 + 16) - *(_DWORD *)(a1 + 8));
    v8 = *(_DWORD *)(a1 + 8) + v5;
    *(_DWORD *)(a1 + 8) = v8;
    v9 = *(signed int **)(a1 + 16);
    if (*v9 < v8)
      *v9 = v8;
  }
}

void sub_245C77B08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::MergeFromInnerLoop<google::protobuf::RepeatedPtrField<sentencepiece::ModelProto_SentencePiece>::TypeHandler>(uint64_t *a1, sentencepiece::ModelProto_SentencePiece **a2, sentencepiece::ModelProto_SentencePiece **a3, unsigned int a4, unsigned int a5)
{
  uint64_t v10;
  sentencepiece::ModelProto_SentencePiece **v11;
  sentencepiece::ModelProto_SentencePiece **v12;
  sentencepiece::ModelProto_SentencePiece *v13;
  sentencepiece::ModelProto_SentencePiece *v14;
  sentencepiece::ModelProto_SentencePiece *v15;
  BOOL v16;
  int v17;
  uint64_t v18;
  sentencepiece::ModelProto_SentencePiece **v19;
  sentencepiece::ModelProto_SentencePiece **v20;
  sentencepiece::ModelProto_SentencePiece *v21;
  sentencepiece::ModelProto_SentencePiece *v22;

  if ((int)a5 >= (int)a4)
    v10 = a4;
  else
    v10 = a5;
  if ((int)v10 >= 1)
  {
    v11 = a3;
    v12 = a2;
    do
    {
      v14 = *v11++;
      v13 = v14;
      v15 = *v12++;
      google::protobuf::internal::GenericTypeHandler<sentencepiece::ModelProto_SentencePiece>::Merge(v13, v15);
      --v10;
    }
    while (v10);
  }
  v16 = __OFSUB__(a4, a5);
  v17 = a4 - a5;
  if (!((v17 < 0) ^ v16 | (v17 == 0)))
  {
    v18 = *a1;
    v19 = &a3[a5];
    v20 = &a2[a5];
    do
    {
      v21 = *v19++;
      v22 = (sentencepiece::ModelProto_SentencePiece *)google::protobuf::Arena::CreateMaybeMessage<sentencepiece::ModelProto_SentencePiece>(v18);
      google::protobuf::internal::GenericTypeHandler<sentencepiece::ModelProto_SentencePiece>::Merge(v21, v22);
      *v20++ = v22;
      --v17;
    }
    while (v17);
  }
}

void google::protobuf::internal::GenericTypeHandler<sentencepiece::ModelProto_SentencePiece>::Merge(sentencepiece::ModelProto_SentencePiece *a1, sentencepiece::ModelProto_SentencePiece *this)
{
  sentencepiece::ModelProto_SentencePiece::MergeFrom(this, a1);
}

_QWORD *sentencepiece::filesystem::NewReadableFile@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, _QWORD *a4@<X8>)
{
  _QWORD *result;
  uint64_t v6;
  char v7;
  _QWORD v8[2];

  v8[0] = a1;
  v8[1] = a2;
  v7 = a3;
  result = absl::make_unique<sentencepiece::filesystem::PosixReadableFile,std::string_view &,BOOL &>((uint64_t)v8, &v6);
  *a4 = v6;
  return result;
}

_QWORD *absl::make_unique<sentencepiece::filesystem::PosixReadableFile,std::string_view &,BOOL &>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = (_QWORD *)operator new();
  result = sentencepiece::filesystem::PosixReadableFile::PosixReadableFile(v4, *(const char **)a1, *(_QWORD *)(a1 + 8));
  *a2 = v4;
  return result;
}

void sub_245C77C78(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x249544F58](v1, 0xA1C409BE6959DLL);
  _Unwind_Resume(a1);
}

_QWORD *sentencepiece::filesystem::PosixReadableFile::PosixReadableFile(_QWORD *a1, const char *a2, uint64_t a3)
{
  uint64_t *v6;
  _QWORD *v7;
  size_t v8;
  int *v9;
  void **v10;
  uint64_t v11;
  void *__p[2];
  unsigned __int8 v14;
  unsigned int v15;
  _QWORD v16[11];
  char v17;
  uint64_t v18;
  _DWORD *v19;

  *a1 = &off_2516E25C8;
  v6 = a1 + 1;
  sentencepiece::util::Status::Status(a1 + 1);
  if (a3)
  {
    v7 = (_QWORD *)operator new();
    std::ifstream::basic_ifstream(v7);
  }
  else
  {
    v7 = (_QWORD *)MEMORY[0x24BEDB1D0];
  }
  a1[2] = v7;
  if ((*((_BYTE *)v7 + *(_QWORD *)(*v7 - 24) + 32) & 5) != 0)
  {
    v15 = 5;
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"\"", 1);
    v8 = strlen(a2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)a2, v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"\": ", 3);
    v9 = __error();
    sentencepiece::util::StrError((sentencepiece::util *)*v9);
    if ((v14 & 0x80u) == 0)
      v10 = __p;
    else
      v10 = (void **)__p[0];
    if ((v14 & 0x80u) == 0)
      v11 = v14;
    else
      v11 = (uint64_t)__p[1];
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v10, v11);
    sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status(&v15, (uint64_t)&v19);
    sentencepiece::util::Status::operator=(v6, &v19);
    sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v19);
    if ((char)v14 < 0)
      operator delete(__p[0]);
    v16[0] = *MEMORY[0x24BEDB800];
    *(_QWORD *)((char *)v16 + *(_QWORD *)(v16[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
    v16[1] = MEMORY[0x24BEDB848] + 16;
    if (v17 < 0)
      operator delete((void *)v16[9]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x249544EE0](&v18);
  }
  return a1;
}

void sub_245C77E74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  sentencepiece::util::Status *v15;
  uint64_t v16;

  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)(v16 - 56));
  if (a14 < 0)
    operator delete(__p);
  sentencepiece::util::StatusBuilder::~StatusBuilder((sentencepiece::util::StatusBuilder *)&a15);
  sentencepiece::util::Status::~Status(v15);
  _Unwind_Resume(a1);
}

void sentencepiece::filesystem::PosixReadableFile::~PosixReadableFile(sentencepiece::filesystem::PosixReadableFile *this)
{
  sentencepiece::filesystem::PosixReadableFile::~PosixReadableFile(this);
  JUMPOUT(0x249544F58);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_2516E25C8;
  v2 = *((_QWORD *)this + 2);
  if (v2 != MEMORY[0x24BEDB1D0] && v2 != 0)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  sentencepiece::util::Status::~Status((sentencepiece::filesystem::PosixReadableFile *)((char *)this + 8));
}

uint64_t sentencepiece::filesystem::PosixReadableFile::status@<X0>(sentencepiece::filesystem::PosixReadableFile *this@<X0>, sentencepiece::util::Status *a2@<X8>)
{
  return sentencepiece::util::Status::Status(a2, (sentencepiece::filesystem::PosixReadableFile *)((char *)this + 8));
}

BOOL sentencepiece::filesystem::PosixReadableFile::ReadLine(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  const std::locale::facet *v4;
  unsigned __int8 v5;
  _QWORD *v6;
  std::locale v8;

  v3 = *(_QWORD **)(a1 + 16);
  std::ios_base::getloc((const std::ios_base *)((char *)v3 + *(_QWORD *)(*v3 - 24)));
  v4 = std::locale::use_facet(&v8, MEMORY[0x24BEDB350]);
  v5 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v4->__vftable[2].~facet_0)(v4, 10);
  std::locale::~locale(&v8);
  v6 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3, a2, v5);
  return (*((_BYTE *)v6 + *(_QWORD *)(*v6 - 24) + 32) & 5) == 0;
}

void sub_245C77FBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

BOOL sentencepiece::filesystem::PosixReadableFile::ReadAll(sentencepiece::logging *a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  char v11;

  v2 = (_QWORD *)*((_QWORD *)a1 + 2);
  v3 = (_QWORD *)MEMORY[0x24BEDB1D0];
  if (v2 == (_QWORD *)MEMORY[0x24BEDB1D0])
  {
    if ((int)sentencepiece::logging::GetMinLogLevel(a1) <= 2)
    {
      v11 = 0;
      v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB310], (uint64_t)"filesystem.cc", 13);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"(", 1);
      v5 = (_QWORD *)std::ostream::operator<<();
      v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)") ", 2);
      v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"LOG(", 4);
      v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"ERROR", 5);
      v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)") ", 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"ReadAll is not supported for stdin.", 35);
      sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&v11);
    }
  }
  else
  {
    std::string::__assign_with_sentinel[abi:ne180100]<std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>(a2, *(_QWORD **)((char *)v2 + *(_QWORD *)(*v2 - 24) + 40), 0);
  }
  return v2 != v3;
}

void sub_245C780C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&a13);
  _Unwind_Resume(a1);
}

_QWORD *std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(_QWORD *a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t v6;
  _QWORD *v7;
  _BYTE *v8;
  int v9;
  char v11;

  MEMORY[0x249544D78](&v11, a1, 1);
  if (!v11)
    return a1;
  if (*(char *)(a2 + 23) < 0)
  {
    **(_BYTE **)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 23) = 0;
  }
  v6 = 0;
  while (1)
  {
    v7 = *(_QWORD **)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40);
    v8 = (_BYTE *)v7[3];
    if (v8 != (_BYTE *)v7[4])
    {
      v7[3] = v8 + 1;
      LOBYTE(v7) = *v8;
      goto LABEL_9;
    }
    LODWORD(v7) = (*(uint64_t (**)(_QWORD *))(*v7 + 80))(v7);
    if ((_DWORD)v7 == -1)
      break;
LABEL_9:
    if (v7 == a3)
    {
      v9 = 0;
      goto LABEL_17;
    }
    std::string::push_back((std::string *)a2, (std::string::value_type)v7);
    --v6;
    if (*(char *)(a2 + 23) < 0 && *(_QWORD *)(a2 + 8) == 0x7FFFFFFFFFFFFFF7)
    {
      v9 = 4;
      goto LABEL_17;
    }
  }
  if (v6)
    v9 = 2;
  else
    v9 = 6;
LABEL_17:
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | v9);
  return a1;
}

void sub_245C78260(void *a1)
{
  _QWORD *v1;
  uint64_t v2;

  __cxa_begin_catch(a1);
  v2 = *v1;
  *(_DWORD *)((char *)v1 + *(_QWORD *)(*v1 - 24) + 32) |= 1u;
  if ((*((_BYTE *)v1 + *(_QWORD *)(v2 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x245C7822CLL);
  }
  __cxa_rethrow();
}

void sub_245C782A4(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void std::string::__assign_with_sentinel[abi:ne180100]<std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  std::string *p_p;
  std::string::size_type size;
  std::string __p;

  std::string::__init_with_sentinel[abi:ne180100]<std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>(&__p, a2, a3);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  MEMORY[0x249544CE8](a1, p_p, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_245C78318(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::string::__init_with_sentinel[abi:ne180100]<std::istreambuf_iterator<char>,std::istreambuf_iterator<char>>(std::string *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t result;
  std::string::value_type *v5;
  std::string::value_type v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;

  v8 = a3;
  v9 = a2;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  a1->__r_.__value_.__r.__words[0] = 0;
  while (1)
  {
    result = std::istreambuf_iterator<char>::equal[abi:ne180100](&v9, &v8);
    if ((result & 1) != 0)
      break;
    v5 = (std::string::value_type *)v9[3];
    if (v5 == (std::string::value_type *)v9[4])
      v6 = (*(uint64_t (**)(_QWORD *))(*v9 + 72))(v9);
    else
      v6 = *v5;
    std::string::push_back(a1, v6);
    v7 = v9[3];
    if (v7 == v9[4])
      (*(void (**)(_QWORD *))(*v9 + 80))(v9);
    else
      v9[3] = v7 + 1;
  }
  return result;
}

void sub_245C783D0(void *a1)
{
  uint64_t v1;

  __cxa_begin_catch(a1);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  __cxa_rethrow();
}

void sub_245C783EC(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t std::istreambuf_iterator<char>::equal[abi:ne180100](_QWORD **a1, _QWORD **a2)
{
  _QWORD *v4;
  _BOOL4 v5;
  _QWORD *v6;
  _BOOL4 v7;

  v4 = *a1;
  if (v4)
  {
    if (v4[3] != v4[4])
    {
      v5 = 0;
      goto LABEL_8;
    }
    if ((*(unsigned int (**)(_QWORD *))(*v4 + 72))(v4) != -1)
    {
      v5 = *a1 == 0;
      goto LABEL_8;
    }
    *a1 = 0;
  }
  v5 = 1;
LABEL_8:
  v6 = *a2;
  if (!*a2)
    goto LABEL_14;
  if (v6[3] == v6[4])
  {
    if ((*(unsigned int (**)(_QWORD *))(*v6 + 72))(v6) != -1)
    {
      v7 = *a2 == 0;
      return v5 ^ v7 ^ 1u;
    }
    *a2 = 0;
LABEL_14:
    v7 = 1;
    return v5 ^ v7 ^ 1u;
  }
  v7 = 0;
  return v5 ^ v7 ^ 1u;
}

uint64_t sentencepiece::GetRandomGeneratorSeed(sentencepiece *this)
{
  unsigned int v1;
  uint64_t v2;
  std::random_device v4;

  if (v1 != -1)
  std::random_device::random_device[abi:ne180100](&v4);
  v2 = MEMORY[0x249544E38](&v4);
  std::random_device::~random_device(&v4);
  return v2;
}

void sub_245C78514(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, std::random_device a11, std::random_device a12)
{
  unsigned int *v12;

  std::random_device::~random_device(&a11);
  __cxa_begin_catch(a1);
  atomic_load(v12);
  __cxa_end_catch();
  JUMPOUT(0x245C78500);
}

std::random_device *std::random_device::random_device[abi:ne180100](std::random_device *a1)
{
  std::string __token;

  std::string::basic_string[abi:ne180100]<0>(&__token, "/dev/urandom");
  std::random_device::random_device(a1, &__token);
  if (SHIBYTE(__token.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__token.__r_.__value_.__l.__data_);
  return a1;
}

void sub_245C78590(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sentencepiece::logging::GetMinLogLevel(sentencepiece::logging *this)
{
}

uint64_t sentencepiece::string_util::DecodeUTF8(sentencepiece::string_util *this, const char *a2, char *a3, unint64_t *a4)
{
  int v4;
  uint64_t result;
  unint64_t v6;
  char v7;
  uint64_t v8;
  int v9;
  char v10;
  int v11;
  int v12;
  char v13;
  int v14;

  v4 = *(char *)this;
  if ((v4 & 0x80000000) == 0)
  {
    *(_QWORD *)a3 = 1;
    return *(unsigned __int8 *)this;
  }
  v6 = a2 - (const char *)this;
  if ((unint64_t)(a2 - (const char *)this) >= 2)
  {
    if ((v4 & 0xE0) == 0xC0)
    {
      v7 = *((_BYTE *)this + 1);
      if (v7 <= -65)
      {
        result = v7 & 0x3F | ((v4 & 0x1F) << 6);
        if (result >= 0x80)
        {
          v8 = 2;
LABEL_8:
          *(_QWORD *)a3 = v8;
          return result;
        }
      }
    }
    else if (v6 >= 3)
    {
      if ((v4 & 0xF0) == 0xE0)
      {
        v9 = *((char *)this + 1);
        if (v9 <= -65)
        {
          v10 = *((_BYTE *)this + 2);
          if (v10 <= -65)
          {
            result = v10 & 0x3F | ((v9 & 0x3F) << 6) & 0xFFF | ((v4 & 0xF) << 12);
            if (result >= 0x800
              && (((v4 & 0xF) << 12) - 57344 < 0x102000u || result >> 11 <= 0x1A))
            {
              v8 = 3;
              goto LABEL_8;
            }
          }
        }
      }
      else if (v6 >= 4 && (v4 & 0xF8) == 0xF0)
      {
        v11 = *((char *)this + 1);
        if (v11 <= -65)
        {
          v12 = *((char *)this + 2);
          if (v12 <= -65)
          {
            v13 = *((_BYTE *)this + 3);
            if (v13 <= -65)
            {
              v14 = ((v4 & 7) << 18) | ((v11 & 0x3F) << 12);
              result = v13 & 0x3F | ((v12 & 0x3F) << 6) | v14;
              if (result >= 0x10000 && (v14 - 57344) < 0x102000)
              {
                v8 = 4;
                goto LABEL_8;
              }
            }
          }
        }
      }
    }
  }
  *(_QWORD *)a3 = 1;
  return 65533;
}

uint64_t sentencepiece::random::GetRandomGenerator(sentencepiece::random *this)
{
  uint64_t (*v1)(_QWORD);
  sentencepiece *v2;
  _DWORD *v4;
  uint64_t (*v5)(_QWORD);
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;

  if ((*(_BYTE *)v2 & 1) == 0)
  {
    sentencepiece::GetRandomGeneratorSeed(v2);
    v4 = (_DWORD *)sentencepiece::random::GetRandomGenerator(void)::mt(&sentencepiece::random::GetRandomGenerator(void)::mt);
    *v4 = v6;
    do
    {
      v7 = v5(&sentencepiece::random::GetRandomGenerator(void)::mt);
      *(_DWORD *)(v7 + 4 * v9) = v8;
    }
    while (v9 != 623);
    *(_QWORD *)(v5(&sentencepiece::random::GetRandomGenerator(void)::mt) + 2496) = 0;
  }
  return sentencepiece::random::GetRandomGenerator(void)::mt(&sentencepiece::random::GetRandomGenerator(void)::mt);
}

uint64_t sentencepiece::util::StrError(sentencepiece::util *this)
{
  size_t v1;
  _QWORD *v2;
  _QWORD v4[11];
  char v5;
  uint64_t v6;
  char __strerrbuf[1024];
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  strerror_r((int)this, __strerrbuf, 0x3FFuLL);
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v4);
  v1 = strlen(__strerrbuf);
  v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)__strerrbuf, v1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)" Error #", 8);
  std::ostream::operator<<();
  std::stringbuf::str();
  v4[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v4 + *(_QWORD *)(v4[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v4[1] = MEMORY[0x24BEDB848] + 16;
  if (v5 < 0)
    operator delete((void *)v4[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x249544EE0](&v6);
}

void sub_245C788C8(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

unint64_t sentencepiece::mmap_util::RoundUp(sentencepiece::mmap_util *this, unint64_t a2)
{
  if (!a2)
    sentencepiece::mmap_util::RoundUp();
  return ((unint64_t)this + a2 - 1) / a2 * a2;
}

void sentencepiece::mmap_util::Padding(std::string *this)
{
  std::string::size_type size;
  std::string::size_type v3;

  LOBYTE(size) = *((_BYTE *)&this->__r_.__value_.__s + 23);
  if ((size & 0x80u) != 0)
    size = this->__r_.__value_.__l.__size_;
  if ((size & 3) != 0)
  {
    do
    {
      std::string::push_back(this, 0);
      LOBYTE(v3) = *((_BYTE *)&this->__r_.__value_.__s + 23);
      if ((v3 & 0x80u) != 0)
        v3 = this->__r_.__value_.__l.__size_;
    }
    while ((v3 & 3) != 0);
  }
}

_QWORD *sentencepiece::mmap_util::RemovePrefix@<X0>(_QWORD *a1@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  _QWORD *v7;
  unsigned int v9;
  _QWORD v10[11];
  char v11;
  uint64_t v12;

  v4 = a1[1];
  v5 = v4 >= a2;
  v6 = v4 - a2;
  if (v5)
  {
    *a1 += a2;
    a1[1] = v6;
    return sentencepiece::util::Status::Status(a3);
  }
  else
  {
    v9 = 13;
    v7 = (_QWORD *)std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/util.cc", 63);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"(", 1);
    std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)") [", 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"string.size() >= size", 21);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"] ", 2);
    sentencepiece::util::StatusBuilder::operator sentencepiece::util::Status(&v9, (uint64_t)a3);
    v10[0] = *MEMORY[0x24BEDB800];
    *(_QWORD *)((char *)v10 + *(_QWORD *)(v10[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
    v10[1] = MEMORY[0x24BEDB848] + 16;
    if (v11 < 0)
      operator delete((void *)v10[9]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return (_QWORD *)MEMORY[0x249544EE0](&v12);
  }
}

void sub_245C78AC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sentencepiece::util::StatusBuilder::~StatusBuilder((sentencepiece::util::StatusBuilder *)&a9);
  _Unwind_Resume(a1);
}

void sentencepiece::mmap_util::RoundUp()
{
  __assert_rtn("RoundUp", "util.cc", 276, "multiple");
}

sentencepiece::bpe::Model *sentencepiece::bpe::Model::Model(sentencepiece::bpe::Model *this, const sentencepiece::ModelProto *a2)
{
  sentencepiece::ModelInterface *v4;

  v4 = sentencepiece::ModelInterface::ModelInterface(this);
  *(_QWORD *)v4 = &off_2516E2F40;
  *((_QWORD *)v4 + 1) = (char *)a2 + 16;
  sentencepiece::ModelInterface::InitializePieces(v4);
  return this;
}

void sub_245C78B40(_Unwind_Exception *a1)
{
  sentencepiece::ModelInterface *v1;

  sentencepiece::ModelInterface::~ModelInterface(v1);
  _Unwind_Resume(a1);
}

_QWORD *sentencepiece::bpe::Model::Model(uint64_t a1, uint64_t a2, _DWORD *a3, unint64_t a4)
{
  _QWORD *result;

  result = (_QWORD *)sentencepiece::ModelInterface::ModelInterface(a1, a2, a3, a4);
  *result = &off_2516E2F40;
  return result;
}

void sentencepiece::bpe::Model::~Model(sentencepiece::bpe::Model *this)
{
  sentencepiece::ModelInterface::~ModelInterface(this);
  JUMPOUT(0x249544F58);
}

void sentencepiece::bpe::Model::SampleEncode(uint64_t *a1@<X0>, _BYTE *a2@<X1>, unint64_t a3@<X2>, _QWORD *a4@<X8>, float a5@<S0>)
{
  int v8;
  int v9;
  int v10;
  char *v11;
  __int128 v12;
  char *v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  __int128 v20;
  char *v21;
  char *v22;
  __int128 v23;
  char *v24;
  unint64_t v25;
  sentencepiece::random *v26;
  char *v27;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *RandomGenerator;
  int *v29;
  uint64_t v30;
  uint64_t v31;
  sentencepiece::random *v32;
  sentencepiece::random *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  float v37;
  float v38;
  sentencepiece::random *v39;
  int v40;
  uint64_t v41;
  _DWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v47;
  char *v48;
  char *v49;
  uint64_t v50;
  _QWORD *v51;
  __int128 *v52;
  uint64_t v53;
  int v54;
  _QWORD *v55;
  _QWORD *v56;
  _QWORD *v57;
  _QWORD *v58;
  _QWORD *v59;
  _QWORD *v60;
  _QWORD *v61;
  _QWORD *v62;
  _QWORD *v63;
  _QWORD *v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v69[5];
  uint64_t (**v70)();
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  uint64_t v74;
  _OWORD v75[2];
  int v76;
  void *__p;
  char *v78;
  char *v79;
  void *v80;
  char *v81;
  uint64_t v82;
  _QWORD v83[3];
  _QWORD *v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;

  v87 = *MEMORY[0x24BDAC8D0];
  (*(void (**)(uint64_t (***__return_ptr)()))(*a1 + 16))(&v70);
  if (v70)
  {
    sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v70);
LABEL_3:
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    return;
  }
  sentencepiece::util::Status::~Status((sentencepiece::util::Status *)&v70);
  if (!a3)
    goto LABEL_3;
  v80 = 0;
  v81 = 0;
  v82 = 0;
  __p = 0;
  v78 = 0;
  v79 = 0;
  if (a3 >> 59)
    std::vector<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>>::__throw_length_error[abi:ne180100]();
  v8 = 0;
  __p = operator new(32 * a3);
  v78 = (char *)__p;
  v79 = (char *)__p + 32 * a3;
  memset(v75, 0, sizeof(v75));
  v76 = 1065353216;
  v70 = &off_2516E3180;
  v71 = 0u;
  v72 = 0u;
  v73 = 0;
  v74 = 256;
  v69[0] = (uint64_t)a1;
  v69[1] = (uint64_t)&v70;
  v69[2] = (uint64_t)&__p;
  v69[3] = (uint64_t)&v80;
  v69[4] = (uint64_t)v75;
  do
  {
    v86 = 0uLL;
    v9 = sentencepiece::normalizer::PrefixMatcher::PrefixMatch(a1[2], a2, a3, (BOOL *)&v85 + 8);
    *(_QWORD *)&v86 = a2;
    *((_QWORD *)&v86 + 1) = v9;
    a3 -= v9;
    if (a3)
      v10 = v8 + 1;
    else
      v10 = -1;
    LODWORD(v85) = v8 - 1;
    DWORD1(v85) = v10;
    v11 = v78;
    if (v78 >= v79)
    {
      v14 = (char *)__p;
      v15 = (v78 - (_BYTE *)__p) >> 5;
      v16 = v15 + 1;
      if ((unint64_t)(v15 + 1) >> 59)
        std::vector<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>>::__throw_length_error[abi:ne180100]();
      v17 = v79 - (_BYTE *)__p;
      if ((v79 - (_BYTE *)__p) >> 4 > v16)
        v16 = v17 >> 4;
      if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFE0)
        v18 = 0x7FFFFFFFFFFFFFFLL;
      else
        v18 = v16;
      if (v18)
      {
        if (v18 >> 59)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v19 = (char *)operator new(32 * v18);
      }
      else
      {
        v19 = 0;
      }
      v20 = v86;
      v21 = &v19[32 * v15];
      *(_OWORD *)v21 = v85;
      *((_OWORD *)v21 + 1) = v20;
      v22 = v21;
      if (v11 != v14)
      {
        do
        {
          v23 = *((_OWORD *)v11 - 1);
          *((_OWORD *)v22 - 2) = *((_OWORD *)v11 - 2);
          *((_OWORD *)v22 - 1) = v23;
          v22 -= 32;
          v11 -= 32;
        }
        while (v11 != v14);
        v11 = v14;
      }
      v24 = &v19[32 * v18];
      v13 = v21 + 32;
      __p = v22;
      v78 = v21 + 32;
      v79 = v24;
      if (v11)
        operator delete(v11);
    }
    else
    {
      v12 = v86;
      *(_OWORD *)v78 = v85;
      *((_OWORD *)v11 + 1) = v12;
      v13 = v11 + 32;
    }
    a2 += v9;
    ++v8;
    v78 = v13;
  }
  while (a3);
  if (__p == v13)
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    goto LABEL_76;
  }
  if ((unint64_t)(v13 - (_BYTE *)__p) >= 0x21)
  {
    v25 = 1;
    do
    {
      sentencepiece::bpe::Model::SampleEncode(std::string_view,float)const::$_0::operator()(v69, v25 - 1, v25);
      ++v25;
    }
    while (v25 < (v78 - (_BYTE *)__p) >> 5);
  }
  v26 = (sentencepiece::random *)v80;
  v27 = v81;
  if (v80 != v81)
  {
    RandomGenerator = 0;
    do
    {
      v29 = *(int **)v26;
      if (v27 - (char *)v26 >= 9)
      {
        v30 = 0;
        v31 = (v27 - (char *)v26) >> 3;
        v32 = v26;
        do
        {
          v33 = v32;
          v32 = (sentencepiece::random *)((char *)v32 + 8 * v30 + 8);
          v34 = 2 * v30;
          v30 = (2 * v30) | 1;
          v35 = v34 + 2;
          if (v35 < v31)
          {
            v36 = *((_QWORD *)v32 + 1);
            v37 = *(float *)(*(_QWORD *)v32 + 8);
            v38 = *(float *)(v36 + 8);
            if (v37 < v38 || v37 == v38 && **(_DWORD **)v32 > *(_DWORD *)v36)
            {
              v32 = (sentencepiece::random *)((char *)v32 + 8);
              v30 = v35;
            }
          }
          *(_QWORD *)v33 = *(_QWORD *)v32;
        }
        while (v30 <= (uint64_t)((unint64_t)(v31 - 2) >> 1));
        v39 = (sentencepiece::random *)(v27 - 8);
        if (v32 == v39)
        {
          *(_QWORD *)v32 = v29;
        }
        else
        {
          *(_QWORD *)v32 = *(_QWORD *)v39;
          *(_QWORD *)v39 = v29;
          v26 = (sentencepiece::random *)std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,sentencepiece::bpe::Model::SampleEncode(std::string_view,float)::SymbolPairComparator &,std::__wrap_iter<sentencepiece::bpe::Model::SampleEncode(std::string_view,float)::SymbolPair **>>((uint64_t)v26, (uint64_t)v32 + 8, ((sentencepiece::random *)((char *)v32 + 8) - v26) >> 3);
        }
      }
      v81 -= 8;
      v40 = *v29;
      v41 = *v29;
      v42 = __p;
      v43 = *((_QWORD *)__p + 4 * v41 + 3);
      if (!v43)
        goto LABEL_58;
      v44 = v29[1];
      v45 = *((_QWORD *)__p + 4 * v44 + 3);
      if (!v45)
        goto LABEL_58;
      v46 = v45 + v43;
      if (v46 != *((_QWORD *)v29 + 2))
        goto LABEL_58;
      if (a5 > 0.0)
      {
        if (a5 >= 1.0)
          goto LABEL_58;
        if (!RandomGenerator)
          RandomGenerator = (std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *)sentencepiece::random::GetRandomGenerator(v26);
        v47 = std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(RandomGenerator);
        if (((double)v47
            + (double)std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(RandomGenerator)
            * 4294967300.0)
           * 5.42101086e-20
           + 0.0 < a5)
          goto LABEL_58;
        v42 = __p;
        v40 = *v29;
        v44 = v29[1];
        v41 = *v29;
        v46 = *((_QWORD *)__p + 4 * v44 + 3) + *((_QWORD *)__p + 4 * v41 + 3);
      }
      v48 = (char *)&v42[8 * v41];
      v49 = (char *)&v42[8 * v44];
      *((_QWORD *)v48 + 3) = v46;
      *((_DWORD *)v48 + 1) = *((_DWORD *)v49 + 1);
      v50 = *((unsigned int *)v49 + 1);
      if ((v50 & 0x80000000) == 0)
        v42[8 * v50] = v40;
      *((_QWORD *)v49 + 2) = "";
      *((_QWORD *)v49 + 3) = 0;
      sentencepiece::bpe::Model::SampleEncode(std::string_view,float)const::$_0::operator()(v69, *((_DWORD *)__p + 8 * v41), v40);
      sentencepiece::bpe::Model::SampleEncode(std::string_view,float)const::$_0::operator()(v69, *v29, *((_DWORD *)__p + 8 * *v29 + 1));
LABEL_58:
      v26 = (sentencepiece::random *)v80;
      v27 = v81;
    }
    while (v80 != v81);
  }
  v84 = 0;
  v51 = operator new(0x20uLL);
  *v51 = &off_2516E3F68;
  v51[1] = a1;
  v51[2] = v83;
  v51[3] = v75;
  *((_QWORD *)&v86 + 1) = v51;
  std::__function::__value_func<void ()(std::string_view,std::vector<std::pair<std::string_view,int>> *)>::swap[abi:ne180100](&v85, v83);
  v52 = (__int128 *)*((_QWORD *)&v86 + 1);
  if (*((__int128 **)&v86 + 1) == &v85)
  {
    v53 = 4;
    v52 = &v85;
  }
  else
  {
    if (!*((_QWORD *)&v86 + 1))
      goto LABEL_65;
    v53 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v52 + 8 * v53))();
LABEL_65:
  v54 = 0;
  v55 = (_QWORD *)MEMORY[0x24BEDB310];
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  do
  {
    if (v54 < 0)
    {
      LOBYTE(v85) = 1;
      v56 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)"bpe_model.cc", 12);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)"(", 1);
      v57 = (_QWORD *)std::ostream::operator<<();
      v58 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)") [", 3);
      v59 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)"(index) >= (0)", 14);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, (uint64_t)"] ", 2);
      sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&v85);
    }
    v60 = __p;
    if (v54 >= (int)((unint64_t)(v78 - (_BYTE *)__p) >> 5))
    {
      LOBYTE(v85) = 1;
      v61 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)"bpe_model.cc", 12);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)"(", 1);
      v62 = (_QWORD *)std::ostream::operator<<();
      v63 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62, (uint64_t)") [", 3);
      v64 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, (uint64_t)"(index) < (static_cast<int>(symbols.size()))", 44);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, (uint64_t)"] ", 2);
      sentencepiece::error::Die::~Die((sentencepiece::error::Die *)&v85);
      v60 = __p;
    }
    std::function<void ()(std::string_view,std::vector<std::pair<std::string_view,int>> *)>::operator()((uint64_t)v83, v60[4 * v54 + 2], v60[4 * v54 + 3], (uint64_t)a4);
    v54 = *((_DWORD *)__p + 8 * v54 + 1);
  }
  while (v54 != -1);
  v65 = v84;
  if (v84 == v83)
  {
    v66 = 4;
    v65 = v83;
    goto LABEL_75;
  }
  if (v84)
  {
    v66 = 5;
LABEL_75:
    (*(void (**)(void))(*v65 + 8 * v66))();
  }
LABEL_76:
  sentencepiece::model::FreeList<sentencepiece::bpe::Model::SampleEncode(std::string_view,float)::SymbolPair>::~FreeList(&v70);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v75);
  if (__p)
  {
    v78 = (char *)__p;
    operator delete(__p);
  }
  if (v80)
  {
    v81 = (char *)v80;
    operator delete(v80);
  }
}

void sub_245C79280(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,uint64_t a31,void *a32,uint64_t a33)
{
  sentencepiece::model::FreeList<sentencepiece::bpe::Model::SampleEncode(std::string_view,float)::SymbolPair>::~FreeList(&a16);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&a23);
  if (__p)
  {
    a30 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a32)
  {
    a33 = (uint64_t)a32;
    operator delete(a32);
  }
  _Unwind_Resume(a1);
}

__n128 sentencepiece::bpe::Model::SampleEncode(std::string_view,float)const::$_0::operator()(uint64_t *a1, int a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  unsigned __int8 *v20;
  int v21;
  unsigned int v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  void *v28;
  unint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  void *v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  unint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char *v53;
  uint64_t *v54;
  char *v55;
  uint64_t v56;
  __n128 result;
  uint64_t v58;
  uint64_t v59;
  __n128 *v60;
  void *v61;
  unsigned int v62;
  uint64_t v63;
  __n128 v64;
  __n128 v65;
  _QWORD v66[2];
  _OWORD *v67;

  if (a2 == -1)
    return result;
  if (a3 == -1)
    return result;
  v6 = a2;
  v7 = *(_QWORD *)a1[2];
  if (*(_BYTE *)(v7 + 32 * a2 + 8))
    return result;
  v8 = a3;
  v9 = v7 + 32 * a3;
  if (*(_BYTE *)(v9 + 8))
    return result;
  v10 = *a1;
  v11 = v7 + 32 * a2;
  v12 = *(_BYTE **)(v11 + 16);
  v13 = *(_QWORD *)(v9 + 24) + *(_QWORD *)(v11 + 24);
  v66[0] = v12;
  v66[1] = v13;
  v14 = *(unsigned int **)(v10 + 40);
  v15 = *v14;
  if (v13)
  {
    v16 = 0;
    v17 = v13;
    while (1)
    {
      v18 = *v12++;
      v16 ^= (v15 >> 10 << ((v15 >> 6) & 8)) ^ v18;
      v15 = v14[v16];
      if ((v15 & 0x800000FF) != v18)
        return result;
      if (!--v17)
        goto LABEL_17;
    }
  }
  v19 = *v12;
  if (*v12)
  {
    v16 = 0;
    v20 = v12 + 1;
    while (1)
    {
      v16 ^= (v15 >> 10 << ((v15 >> 6) & 8)) ^ v19;
      v15 = v14[v16];
      if ((v15 & 0x800000FF) != v19)
        return result;
      v21 = *v20++;
      v19 = v21;
      if (!v21)
        goto LABEL_17;
    }
  }
  v16 = 0;
LABEL_17:
  if ((v15 & 0x100) != 0)
  {
    v22 = v14[v16 ^ (v15 >> 10 << ((v15 >> 6) & 8))];
    v23 = (_QWORD *)a1[1];
    v24 = v23[5];
    v25 = v23[6];
    v26 = v23[4];
    if (v26 >= v25)
    {
      v26 = 0;
      ++v24;
      v23[4] = 0;
      v23[5] = v24;
    }
    v27 = v23[1];
    v63 = v10;
    if (v24 == (v23[2] - v27) >> 3)
    {
      v62 = v22;
      is_mul_ok(v25, 0x18uLL);
      v28 = (void *)operator new[]();
      bzero(v28, 24 * v23[6]);
      v30 = (_QWORD *)v23[2];
      v29 = v23[3];
      if ((unint64_t)v30 >= v29)
      {
        v61 = v28;
        v32 = (_QWORD *)v23[1];
        v33 = v30 - v32;
        v34 = v33 + 1;
        if ((unint64_t)(v33 + 1) >> 61)
          goto LABEL_60;
        v35 = v29 - (_QWORD)v32;
        if (v35 >> 2 > v34)
          v34 = v35 >> 2;
        if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8)
          v36 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v36 = v34;
        v37 = v61;
        if (v36)
        {
          if (v36 >> 61)
            goto LABEL_61;
          v38 = (char *)operator new(8 * v36);
          v33 = v30 - v32;
          v37 = v61;
        }
        else
        {
          v38 = 0;
        }
        v39 = &v38[8 * v33];
        v40 = &v38[8 * v36];
        *(_QWORD *)v39 = v37;
        v31 = v39 + 8;
        if (v30 != v32)
        {
          do
          {
            v41 = *--v30;
            *((_QWORD *)v39 - 1) = v41;
            v39 -= 8;
          }
          while (v30 != v32);
          v30 = (_QWORD *)v23[1];
        }
        v23[1] = v39;
        v23[2] = v31;
        v23[3] = v40;
        v22 = v62;
        if (v30)
          operator delete(v30);
      }
      else
      {
        *v30 = v28;
        v31 = v30 + 1;
        v22 = v62;
      }
      v23[2] = v31;
      v27 = v23[1];
      v26 = v23[4];
      v24 = v23[5];
      v10 = v63;
    }
    v42 = *(_QWORD *)(v27 + 8 * v24) + 24 * v26;
    v23[4] = v26 + 1;
    *(_DWORD *)v42 = a2;
    *(_DWORD *)(v42 + 4) = a3;
    v43 = v22 & 0x7FFFFFFF;
    *(float *)(v42 + 8) = (*(float (**)(uint64_t))(*(_QWORD *)v10 + 136))(v10);
    *(_QWORD *)(v42 + 16) = v13;
    v44 = (uint64_t *)a1[3];
    v46 = (_QWORD *)v44[1];
    v45 = v44[2];
    if ((unint64_t)v46 < v45)
    {
      *v46 = v42;
      v47 = (uint64_t)(v46 + 1);
LABEL_58:
      v44[1] = v47;
      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,sentencepiece::bpe::Model::SampleEncode(std::string_view,float)::SymbolPairComparator &,std::__wrap_iter<sentencepiece::bpe::Model::SampleEncode(std::string_view,float)::SymbolPair **>>(*v44, v47, (v47 - *v44) >> 3);
      if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(v10 + 8) + 128))(*(_QWORD *)(v10 + 8), v43))
      {
        v58 = *(_QWORD *)a1[2];
        v64 = *(__n128 *)(v58 + 32 * v6 + 16);
        v65 = *(__n128 *)(v58 + 32 * v8 + 16);
        v59 = a1[4];
        v67 = v66;
        v60 = (__n128 *)std::__hash_table<std::__hash_value_type<std::string_view,std::pair<std::string_view,std::string_view>>,std::__unordered_map_hasher<std::string_view,std::__hash_value_type<std::string_view,std::pair<std::string_view,std::string_view>>,std::hash<std::string_view>,std::equal_to<std::string_view>,true>,std::__unordered_map_equal<std::string_view,std::__hash_value_type<std::string_view,std::pair<std::string_view,std::string_view>>,std::equal_to<std::string_view>,std::hash<std::string_view>,true>,std::allocator<std::__hash_value_type<std::string_view,std::pair<std::string_view,std::string_view>>>>::__emplace_unique_key_args<std::string_view,std::piecewise_construct_t const&,std::tuple<std::string_view const&>,std::tuple<>>(v59, (uint64_t)v66, (uint64_t)&std::piecewise_construct, &v67);
        result = v64;
        v60[2] = v64;
        v60[3] = v65;
      }
      return result;
    }
    v48 = *v44;
    v49 = ((uint64_t)v46 - *v44) >> 3;
    v50 = v49 + 1;
    if (!((unint64_t)(v49 + 1) >> 61))
    {
      v51 = v45 - v48;
      if (v51 >> 2 > v50)
        v50 = v51 >> 2;
      if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFF8)
        v52 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v52 = v50;
      if (!v52)
      {
        v53 = 0;
        goto LABEL_51;
      }
      if (!(v52 >> 61))
      {
        v53 = (char *)operator new(8 * v52);
LABEL_51:
        v54 = (uint64_t *)&v53[8 * v49];
        v55 = &v53[8 * v52];
        *v54 = v42;
        v47 = (uint64_t)(v54 + 1);
        if (v46 == (_QWORD *)v48)
        {
          v10 = v63;
        }
        else
        {
          v10 = v63;
          do
          {
            v56 = *--v46;
            *--v54 = v56;
          }
          while (v46 != (_QWORD *)v48);
          v46 = (_QWORD *)*v44;
        }
        *v44 = (uint64_t)v54;
        v44[1] = v47;
        v44[2] = (uint64_t)v55;
        if (v46)
          operator delete(v46);
        goto LABEL_58;
      }
LABEL_61:
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
LABEL_60:
    std::vector<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>>::__throw_length_error[abi:ne180100]();
  }
  return result;
}

uint64_t std::function<void ()(std::string_view,std::vector<std::pair<std::string_view,int>> *)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v7[2];

  v7[0] = a2;
  v7[1] = a3;
  v6 = a4;
  v4 = *(_QWORD *)(a1 + 24);
  if (!v4)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t *))(*(_QWORD *)v4 + 48))(v4, v7, &v6);
}

_QWORD *sentencepiece::model::FreeList<sentencepiece::bpe::Model::SampleEncode(std::string_view,float)::SymbolPair>::~FreeList(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  *a1 = &off_2516E3180;
  v2 = (_QWORD *)a1[1];
  v3 = (_QWORD *)a1[2];
  if (v2 != v3)
  {
    do
    {
      if (*v2)
        MEMORY[0x249544F34](*v2, 0x1000C801E56706BLL);
      ++v2;
    }
    while (v2 != v3);
    v2 = (_QWORD *)a1[1];
  }
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t sentencepiece::bpe::Model::Encode(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, float))(*(_QWORD *)a1 + 56))(a1, 0.0);
}

uint64_t sentencepiece::bpe::Model::IsSampleEncodeAvailable(sentencepiece::bpe::Model *this)
{
  return 1;
}

uint64_t sentencepiece::bpe::Model::IsNBestEncodeAvailable(sentencepiece::bpe::Model *this)
{
  return 0;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,sentencepiece::bpe::Model::SampleEncode(std::string_view,float)::SymbolPairComparator &,std::__wrap_iter<sentencepiece::bpe::Model::SampleEncode(std::string_view,float)::SymbolPair **>>(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  float v8;
  float v9;
  uint64_t v10;
  unint64_t v11;
  _DWORD *v12;
  float v13;

  v3 = a3 - 2;
  if (a3 >= 2)
  {
    v4 = v3 >> 1;
    v5 = result + 8 * (v3 >> 1);
    v6 = *(_DWORD **)v5;
    v7 = *(_QWORD *)(a2 - 8);
    v8 = *(float *)(*(_QWORD *)v5 + 8);
    v9 = *(float *)(v7 + 8);
    if (v8 < v9 || v8 == v9 && *v6 > *(_DWORD *)v7)
    {
      *(_QWORD *)(a2 - 8) = v6;
      if (v3 >= 2)
      {
        while (1)
        {
          v11 = v4 - 1;
          v4 = (v4 - 1) >> 1;
          v10 = result + 8 * v4;
          v12 = *(_DWORD **)v10;
          v13 = *(float *)(*(_QWORD *)v10 + 8);
          if (v13 >= v9 && (v13 != v9 || *v12 <= *(_DWORD *)v7))
            break;
          *(_QWORD *)v5 = v12;
          v5 = result + 8 * v4;
          if (v11 <= 1)
            goto LABEL_11;
        }
      }
      v10 = v5;
LABEL_11:
      *(_QWORD *)v10 = v7;
    }
  }
  return result;
}

void *std::__hash_table<std::__hash_value_type<std::string_view,std::pair<std::string_view,std::string_view>>,std::__unordered_map_hasher<std::string_view,std::__hash_value_type<std::string_view,std::pair<std::string_view,std::string_view>>,std::hash<std::string_view>,std::equal_to<std::string_view>,true>,std::__unordered_map_equal<std::string_view,std::__hash_value_type<std::string_view,std::pair<std::string_view,std::string_view>>,std::equal_to<std::string_view>,std::hash<std::string_view>,true>,std::allocator<std::__hash_value_type<std::string_view,std::pair<std::string_view,std::string_view>>>>::__emplace_unique_key_args<std::string_view,std::piecewise_construct_t const&,std::tuple<std::string_view const&>,std::tuple<>>(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  void **v14;
  void *v15;
  uint64_t *v16;
  size_t v17;
  uint64_t v18;
  unint64_t v19;
  float v20;
  float v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;

  v8 = (_QWORD *)(a1 + 24);
  v9 = std::__string_view_hash<char>::operator()[abi:ne180100](a1 + 24, *(uint64_t **)a2, *(_QWORD *)(a2 + 8));
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      v15 = *v14;
      if (*v14)
      {
        v18 = a2;
        v16 = *(uint64_t **)a2;
        v17 = *(_QWORD *)(v18 + 8);
        do
        {
          v19 = *((_QWORD *)v15 + 1);
          if (v19 == v10)
          {
            if (*((_QWORD *)v15 + 3) == v17 && !memcmp(*((const void **)v15 + 2), v16, v17))
              return v15;
          }
          else
          {
            if (v13 > 1)
            {
              if (v19 >= v11)
                v19 %= v11;
            }
            else
            {
              v19 &= v11 - 1;
            }
            if (v19 != v4)
              break;
          }
          v15 = *(void **)v15;
        }
        while (v15);
      }
    }
  }
  v15 = operator new(0x40uLL);
  *(_QWORD *)v15 = 0;
  *((_QWORD *)v15 + 1) = v10;
  *((_OWORD *)v15 + 1) = **a4;
  *((_OWORD *)v15 + 2) = 0u;
  *((_OWORD *)v15 + 3) = 0u;
  v20 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v21 = *(float *)(a1 + 32);
  if (!v11 || (float)(v21 * (float)v11) < v20)
  {
    v22 = 1;
    if (v11 >= 3)
      v22 = (v11 & (v11 - 1)) != 0;
    v23 = v22 | (2 * v11);
    v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24)
      v25 = v24;
    else
      v25 = v23;
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__rehash<true>(a1, v25);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v26 = *(_QWORD *)a1;
  v27 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v27)
  {
    *(_QWORD *)v15 = *v27;
LABEL_40:
    *v27 = v15;
    goto LABEL_41;
  }
  *(_QWORD *)v15 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v15;
  *(_QWORD *)(v26 + 8 * v4) = a1 + 16;
  if (*(_QWORD *)v15)
  {
    v28 = *(_QWORD *)(*(_QWORD *)v15 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v28 >= v11)
        v28 %= v11;
    }
    else
    {
      v28 &= v11 - 1;
    }
    v27 = (_QWORD *)(*(_QWORD *)a1 + 8 * v28);
    goto LABEL_40;
  }
LABEL_41:
  ++*v8;
  return v15;
}

void sub_245C79B24(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

unint64_t std::__string_view_hash<char>::operator()[abi:ne180100](uint64_t a1, uint64_t *a2, unint64_t a3)
{
  char v4;

  return std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v4, a2, a3);
}

void sentencepiece::model::FreeList<sentencepiece::bpe::Model::SampleEncode(std::string_view,float)::SymbolPair>::~FreeList(_QWORD *a1)
{
  sentencepiece::model::FreeList<sentencepiece::bpe::Model::SampleEncode(std::string_view,float)::SymbolPair>::~FreeList(a1);
  JUMPOUT(0x249544F58);
}

void std::__function::__func<sentencepiece::bpe::Model::SampleEncode(std::string_view,float)::$_2,std::allocator<sentencepiece::bpe::Model::SampleEncode(std::string_view,float)::$_2>,void ()(std::string_view,std::vector<std::pair<std::string_view,int>> *)>::~__func()
{
  JUMPOUT(0x249544F58);
}

__n128 std::__function::__func<sentencepiece::bpe::Model::SampleEncode(std::string_view,float)::$_2,std::allocator<sentencepiece::bpe::Model::SampleEncode(std::string_view,float)::$_2>,void ()(std::string_view,std::vector<std::pair<std::string_view,int>> *)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_2516E3F68;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<sentencepiece::bpe::Model::SampleEncode(std::string_view,float)::$_2,std::allocator<sentencepiece::bpe::Model::SampleEncode(std::string_view,float)::$_2>,void ()(std::string_view,std::vector<std::pair<std::string_view,int>> *)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_2516E3F68;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<sentencepiece::bpe::Model::SampleEncode(std::string_view,float)::$_2,std::allocator<sentencepiece::bpe::Model::SampleEncode(std::string_view,float)::$_2>,void ()(std::string_view,std::vector<std::pair<std::string_view,int>> *)>::operator()(uint64_t a1, _QWORD *a2, void ***a3)
{
  uint64_t v4;
  void **v5;
  _QWORD **v6;
  uint64_t v7;
  uint64_t **v8;
  uint64_t *v9;
  char *v10;
  char *v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  __int128 v23;
  char *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  __int128 v32;
  __int128 v33;

  v4 = a2[1];
  v5 = *a3;
  *(_QWORD *)&v33 = *a2;
  *((_QWORD *)&v33 + 1) = v4;
  v6 = *(_QWORD ***)(a1 + 8);
  v7 = ((uint64_t (*)(_QWORD **, _QWORD, uint64_t))(*v6)[14])(v6, v33, v4);
  if ((_DWORD)v7 == -1 || ((*(uint64_t (**)(_QWORD *, uint64_t))(*v6[1] + 128))(v6[1], v7) & 1) == 0)
  {
    v10 = (char *)v5[2];
    v11 = (char *)v5[1];
    if (v11 >= v10)
    {
      v13 = 0xAAAAAAAAAAAAAAABLL * ((v11 - (_BYTE *)*v5) >> 3);
      v14 = v13 + 1;
      if (v13 + 1 <= 0xAAAAAAAAAAAAAAALL)
      {
        v15 = 0xAAAAAAAAAAAAAAABLL * ((v10 - (_BYTE *)*v5) >> 3);
        if (2 * v15 > v14)
          v14 = 2 * v15;
        if (v15 >= 0x555555555555555)
          v16 = 0xAAAAAAAAAAAAAAALL;
        else
          v16 = v14;
        v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)(v5 + 2), v16);
        v18 = &v17[24 * v13];
        v20 = &v17[24 * v19];
        *(_OWORD *)v18 = v33;
        *((_DWORD *)v18 + 4) = v7;
        v12 = v18 + 24;
        v22 = (char *)*v5;
        v21 = (char *)v5[1];
        if (v21 == *v5)
          goto LABEL_16;
        do
        {
          v23 = *(_OWORD *)(v21 - 24);
          *((_QWORD *)v18 - 1) = *((_QWORD *)v21 - 1);
          *(_OWORD *)(v18 - 24) = v23;
          v18 -= 24;
          v21 -= 24;
        }
        while (v21 != v22);
        goto LABEL_15;
      }
LABEL_30:
      std::vector<std::function<NSArray<NSString *> * ()(scml::TextModerationTokenizer const*,NSArray<NSString *> *)>>::__throw_length_error[abi:ne180100]();
    }
  }
  else
  {
    v8 = std::__hash_table<std::__hash_value_type<std::string_view,std::pair<std::string_view,std::string_view>>,std::__unordered_map_hasher<std::string_view,std::__hash_value_type<std::string_view,std::pair<std::string_view,std::string_view>>,std::hash<std::string_view>,std::equal_to<std::string_view>,true>,std::__unordered_map_equal<std::string_view,std::__hash_value_type<std::string_view,std::pair<std::string_view,std::string_view>>,std::equal_to<std::string_view>,std::hash<std::string_view>,true>,std::allocator<std::__hash_value_type<std::string_view,std::pair<std::string_view,std::string_view>>>>::find<std::string_view>(*(_QWORD **)(a1 + 24), (uint64_t)&v33);
    if (v8)
    {
      v9 = (uint64_t *)v8;
      std::function<void ()(std::string_view,std::vector<std::pair<std::string_view,int>> *)>::operator()(*(_QWORD *)(a1 + 16), v9[4], v9[5], (uint64_t)v5);
      std::function<void ()(std::string_view,std::vector<std::pair<std::string_view,int>> *)>::operator()(*(_QWORD *)(a1 + 16), v9[6], v9[7], (uint64_t)v5);
      return;
    }
    v24 = (char *)v5[2];
    v11 = (char *)v5[1];
    if (v11 >= v24)
    {
      v25 = 0xAAAAAAAAAAAAAAABLL * ((v11 - (_BYTE *)*v5) >> 3);
      v26 = v25 + 1;
      if (v25 + 1 <= 0xAAAAAAAAAAAAAAALL)
      {
        v27 = 0xAAAAAAAAAAAAAAABLL * ((v24 - (_BYTE *)*v5) >> 3);
        if (2 * v27 > v26)
          v26 = 2 * v27;
        if (v27 >= 0x555555555555555)
          v28 = 0xAAAAAAAAAAAAAAALL;
        else
          v28 = v26;
        v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)(v5 + 2), v28);
        v18 = &v29[24 * v25];
        v20 = &v29[24 * v30];
        *(_OWORD *)v18 = v33;
        *((_DWORD *)v18 + 4) = v7;
        v12 = v18 + 24;
        v31 = (char *)*v5;
        v21 = (char *)v5[1];
        if (v21 == *v5)
          goto LABEL_16;
        do
        {
          v32 = *(_OWORD *)(v21 - 24);
          *((_QWORD *)v18 - 1) = *((_QWORD *)v21 - 1);
          *(_OWORD *)(v18 - 24) = v32;
          v18 -= 24;
          v21 -= 24;
        }
        while (v21 != v31);
LABEL_15:
        v21 = (char *)*v5;
LABEL_16:
        *v5 = v18;
        v5[1] = v12;
        v5[2] = v20;
        if (v21)
          operator delete(v21);
        goto LABEL_18;
      }
      goto LABEL_30;
    }
  }
  *(_OWORD *)v11 = v33;
  *((_DWORD *)v11 + 4) = v7;
  v12 = v11 + 24;
LABEL_18:
  v5[1] = v12;
}

uint64_t std::__function::__func<sentencepiece::bpe::Model::SampleEncode(std::string_view,float)::$_2,std::allocator<sentencepiece::bpe::Model::SampleEncode(std::string_view,float)::$_2>,void ()(std::string_view,std::vector<std::pair<std::string_view,int>> *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<sentencepiece::bpe::Model::SampleEncode(std::string_view,float)::$_2,std::allocator<sentencepiece::bpe::Model::SampleEncode(std::string_view,float)::$_2>,void ()(std::string_view,std::vector<std::pair<std::string_view,int>> *)>::target_type()
{
}

uint64_t **std::__hash_table<std::__hash_value_type<std::string_view,std::pair<std::string_view,std::string_view>>,std::__unordered_map_hasher<std::string_view,std::__hash_value_type<std::string_view,std::pair<std::string_view,std::string_view>>,std::hash<std::string_view>,std::equal_to<std::string_view>,true>,std::__unordered_map_equal<std::string_view,std::__hash_value_type<std::string_view,std::pair<std::string_view,std::string_view>>,std::equal_to<std::string_view>,std::hash<std::string_view>,true>,std::allocator<std::__hash_value_type<std::string_view,std::pair<std::string_view,std::string_view>>>>::find<std::string_view>(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t ***v10;
  uint64_t **v11;
  uint64_t *v12;
  size_t v13;
  uint64_t v14;
  unint64_t v15;

  v4 = std::__string_view_hash<char>::operator()[abi:ne180100]((uint64_t)(a1 + 3), *(uint64_t **)a2, *(_QWORD *)(a2 + 8));
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v9 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v10 = *(uint64_t ****)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  v11 = *v10;
  if (*v10)
  {
    v14 = a2;
    v12 = *(uint64_t **)a2;
    v13 = *(_QWORD *)(v14 + 8);
    do
    {
      v15 = (unint64_t)v11[1];
      if (v15 == v6)
      {
        if (v11[3] == (uint64_t *)v13 && !memcmp(v11[2], v12, v13))
          return v11;
      }
      else
      {
        if (v8 > 1)
        {
          if (v15 >= *(_QWORD *)&v5)
            v15 %= *(_QWORD *)&v5;
        }
        else
        {
          v15 &= *(_QWORD *)&v5 - 1;
        }
        if (v15 != v9)
          return 0;
      }
      v11 = (uint64_t **)*v11;
    }
    while (v11);
  }
  return v11;
}

_QWORD *std::__function::__value_func<void ()(std::string_view,std::vector<std::pair<std::string_view,int>> *)>::swap[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x24BDAC8D0];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_245C7A11C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void sentencepiece::error::Abort(sentencepiece::error *this)
{
  _QWORD *v1;
  sentencepiece *v2;

  if (!sentencepiece::error::gTestCounter)
  {
    v1 = std::operator<<[abi:ne180100]<std::char_traits<char>>(MEMORY[0x24BEDB310], "Program terminated with an unrecoverable error.");
    v2 = (sentencepiece *)std::endl[abi:ne180100]<char,std::char_traits<char>>(v1);
    sentencepiece::ShutdownLibrary(v2);
    exit(-1);
  }
  sentencepiece::error::gTestCounter = 2;
}

_QWORD *std::operator<<[abi:ne180100]<std::char_traits<char>>(_QWORD *a1, char *__s)
{
  size_t v4;

  v4 = strlen(__s);
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)__s, v4);
}

_QWORD *std::endl[abi:ne180100]<char,std::char_traits<char>>(_QWORD *a1)
{
  const std::locale::facet *v2;
  std::locale v4;

  std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
  v2 = std::locale::use_facet(&v4, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v2->__vftable[2].~facet_0)(v2, 10);
  std::locale::~locale(&v4);
  std::ostream::put();
  std::ostream::flush();
  return a1;
}

void sub_245C7A220(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

_QWORD *sentencepiece::util::Status::Status(_QWORD *this)
{
  *this = 0;
  return this;
}

void sentencepiece::util::Status::~Status(sentencepiece::util::Status *this)
{
  uint64_t v1;

  v1 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v1)
    std::default_delete<sentencepiece::util::Status::Rep>::operator()[abi:ne180100]((uint64_t)this, v1);
}

uint64_t sentencepiece::util::Status::Status(uint64_t a1, int a2, const void *a3, size_t a4)
{
  uint64_t v8;
  __int128 *p_dst;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 __dst;
  unint64_t v16;

  v8 = operator new();
  *(_QWORD *)(v8 + 16) = 0;
  *(_QWORD *)(v8 + 24) = 0;
  *(_QWORD *)(v8 + 8) = 0;
  *(_QWORD *)a1 = v8;
  *(_DWORD *)v8 = a2;
  if (a4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (a4 >= 0x17)
  {
    v10 = (a4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a4 | 7) != 0x17)
      v10 = a4 | 7;
    v11 = v10 + 1;
    p_dst = (__int128 *)operator new(v10 + 1);
    *((_QWORD *)&__dst + 1) = a4;
    v16 = v11 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v16) = a4;
  p_dst = &__dst;
  if (a4)
LABEL_8:
    memmove(p_dst, a3, a4);
  *((_BYTE *)p_dst + a4) = 0;
  v12 = *(_QWORD *)a1 + 8;
  if (*(char *)(*(_QWORD *)a1 + 31) < 0)
    operator delete(*(void **)v12);
  v13 = __dst;
  *(_QWORD *)(v12 + 16) = v16;
  *(_OWORD *)v12 = v13;
  return a1;
}

void sub_245C7A37C(_Unwind_Exception *exception_object)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  *v1 = 0;
  if (v3)
    std::default_delete<sentencepiece::util::Status::Rep>::operator()[abi:ne180100]((uint64_t)v1, v3);
  _Unwind_Resume(exception_object);
}

sentencepiece::util::Status *sentencepiece::util::Status::Status(sentencepiece::util::Status *this, const sentencepiece::util::Status *a2)
{
  uint64_t v4;
  _DWORD *v5;
  std::string *v6;
  __int128 v7;

  if (*(_QWORD *)a2)
  {
    v4 = operator new();
    v5 = *(_DWORD **)a2;
    *(_DWORD *)v4 = **(_DWORD **)a2;
    v6 = (std::string *)(v4 + 8);
    if (*((char *)v5 + 31) < 0)
    {
      std::string::__init_copy_ctor_external(v6, *((const std::string::value_type **)v5 + 1), *((_QWORD *)v5 + 2));
    }
    else
    {
      v7 = *(_OWORD *)(v5 + 2);
      *(_QWORD *)(v4 + 24) = *((_QWORD *)v5 + 3);
      *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
    }
  }
  else
  {
    v4 = 0;
  }
  *(_QWORD *)this = v4;
  return this;
}

void sub_245C7A42C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x249544F58](v1, 0x1012C40849EBCB1);
  _Unwind_Resume(a1);
}

void sentencepiece::util::Status::operator=(uint64_t *a1, _DWORD **a2)
{
  uint64_t v3;
  uint64_t v5;
  _DWORD *v6;
  std::string *v7;
  __int128 v8;

  v3 = *a1;
  if ((_DWORD *)*a1 != *a2)
  {
    if (*a2)
    {
      v5 = operator new();
      v6 = *a2;
      *(_DWORD *)v5 = **a2;
      v7 = (std::string *)(v5 + 8);
      if (*((char *)v6 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(v7, *((const std::string::value_type **)v6 + 1), *((_QWORD *)v6 + 2));
      }
      else
      {
        v8 = *(_OWORD *)(v6 + 2);
        *(_QWORD *)(v5 + 24) = *((_QWORD *)v6 + 3);
        *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
      }
      v3 = *a1;
    }
    else
    {
      v5 = 0;
    }
    *a1 = v5;
    if (v3)
      std::default_delete<sentencepiece::util::Status::Rep>::operator()[abi:ne180100]((uint64_t)a1, v3);
  }
}

void sub_245C7A504(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x249544F58](v1, 0x1012C40849EBCB1);
  _Unwind_Resume(a1);
}

const char *sentencepiece::util::Status::error_message(sentencepiece::util::Status *this)
{
  uint64_t v1;
  const char *result;

  v1 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
    return "";
  result = (const char *)(v1 + 8);
  if (*(char *)(v1 + 31) < 0)
    return *(const char **)result;
  return result;
}

std::string *sentencepiece::util::Status::ToString@<X0>(sentencepiece::util::Status *this@<X0>, std::string *a2@<X8>)
{
  _DWORD *v3;
  unsigned int v5;
  int v6;
  const std::string::value_type *v7;
  std::string::size_type v8;

  v3 = *(_DWORD **)this;
  if (!*(_QWORD *)this)
    return (std::string *)std::string::basic_string[abi:ne180100]<0>(a2, "OK");
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  v5 = *v3 - 1;
  if (v5 < 0x10)
    MEMORY[0x249544CDC](a2, (&off_2516E5248)[v5]);
  std::string::append(a2, ": ");
  v6 = *(char *)(*(_QWORD *)this + 31);
  if (v6 >= 0)
    v7 = (const std::string::value_type *)(*(_QWORD *)this + 8);
  else
    v7 = *(const std::string::value_type **)(*(_QWORD *)this + 8);
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(*(_QWORD *)this + 31);
  else
    v8 = *(_QWORD *)(*(_QWORD *)this + 16);
  return std::string::append(a2, v7, v8);
}

void sub_245C7A5F8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void std::default_delete<sentencepiece::util::Status::Rep>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    if (*(char *)(a2 + 31) < 0)
      operator delete(*(void **)(a2 + 8));
    JUMPOUT(0x249544F58);
  }
}

_QWORD *google::protobuf::internal::ArenaImpl::thread_cache(google::protobuf::internal::ArenaImpl *this)
{
  unsigned __int8 v1;
  pthread_key_t *v3;

  if ((v1 & 1) == 0
  {
    v3 = (pthread_key_t *)operator new();
    pthread_key_create(v3, (void (__cdecl *)(void *))google::protobuf::internal::ThreadLocalStorage<google::protobuf::internal::ArenaImpl::ThreadCache>::Delete);
    google::protobuf::internal::ArenaImpl::thread_cache(void)::thread_cache_ = (uint64_t)v3;
  }
  return google::protobuf::internal::ThreadLocalStorage<google::protobuf::internal::ArenaImpl::ThreadCache>::Get((pthread_key_t *)google::protobuf::internal::ArenaImpl::thread_cache(void)::thread_cache_);
}

void sub_245C7A6DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x249544F58](v1, 0x1000C4000313F17);
  _Unwind_Resume(a1);
}

_QWORD *google::protobuf::internal::ThreadLocalStorage<google::protobuf::internal::ArenaImpl::ThreadCache>::Get(pthread_key_t *a1)
{
  _QWORD *v2;

  v2 = pthread_getspecific(*a1);
  if (!v2)
  {
    v2 = operator new(0x40uLL, (std::align_val_t)0x40uLL);
    *(_OWORD *)v2 = xmmword_245C95830;
    v2[2] = 0;
    pthread_setspecific(*a1, v2);
  }
  return v2;
}

uint64_t google::protobuf::internal::SerialArena::Block::Pointer(google::protobuf::internal::SerialArena::Block *this, unint64_t a2)
{
  std::string *v4;
  char v6;
  std::string v7[2];

  if (*((_QWORD *)this + 2) < a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/arena_impl.h", 111);
    v4 = google::protobuf::internal::LogMessage::operator<<(v7, "CHECK failed: n <= size_: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v6, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v7[0].__r_.__value_.__l.__data_);
  }
  return (uint64_t)this + a2;
}

void sub_245C7A7F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

_QWORD *google::protobuf::internal::SerialArena::New(google::protobuf::internal::SerialArena *this, google::protobuf::internal::SerialArena::Block *a2, void *a3, google::protobuf::internal::ArenaImpl *a4)
{
  unint64_t v7;
  unint64_t v8;
  std::string *v9;
  _QWORD *v10;
  uint64_t v11;
  char v13;
  std::string v14[2];

  v7 = *((_QWORD *)this + 1);
  v8 = v7 + 72;
  if (v7 + 72 > *((_QWORD *)this + 2))
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v14, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/arena.cc", 398);
    v9 = google::protobuf::internal::LogMessage::operator<<(v14, "CHECK failed: (pos + ArenaImpl::kSerialArenaSize) <= (b->size()): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v13, (const char **)&v9->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v14[0].__r_.__value_.__l.__data_);
  }
  v10 = (_QWORD *)google::protobuf::internal::SerialArena::Block::Pointer(this, v7);
  *((_QWORD *)this + 1) = v8;
  *v10 = a3;
  v10[1] = a2;
  v10[2] = this;
  v10[5] = google::protobuf::internal::SerialArena::Block::Pointer(this, v8);
  v11 = google::protobuf::internal::SerialArena::Block::Pointer(this, *((_QWORD *)this + 2));
  v10[3] = 0;
  v10[7] = 0;
  v10[8] = 0;
  v10[6] = v11;
  return v10;
}

void sub_245C7A8F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void __clang_call_terminate(void *a1)
{
  __cxa_begin_catch(a1);
  std::terminate();
}

uint64_t google::protobuf::internal::ArenaImpl::SpaceAllocated(google::protobuf::internal::ArenaImpl *this)
{
  return *((_QWORD *)this + 2);
}

void *google::protobuf::internal::ArenaImpl::NewBuffer(google::protobuf::internal::ArenaImpl *this, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  std::string *v8;
  size_t v9;
  void *result;
  unint64_t *v11;
  unint64_t v12;
  char v13;
  std::string v14[2];

  v5 = *((_QWORD *)this + 4);
  if (a2 == -1)
  {
    if (v5)
      v7 = *(_QWORD *)v5;
    else
      v7 = 256;
  }
  else
  {
    if (v5)
      v6 = *(_QWORD *)(v5 + 8);
    else
      v6 = 0x2000;
    if (v6 >= 2 * a2)
      v7 = 2 * a2;
    else
      v7 = v6;
  }
  if (a3 >= 0xFFFFFFFFFFFFFFE8)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v14, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/arena.cc", 245);
    v8 = google::protobuf::internal::LogMessage::operator<<(v14, "CHECK failed: (min_bytes) <= (std::numeric_limits<size_t>::max() - kBlockHeaderSize): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v13, (const char **)&v8->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v14[0].__r_.__value_.__l.__data_);
    v5 = *((_QWORD *)this + 4);
  }
  if (v7 <= a3 + 24)
    v9 = a3 + 24;
  else
    v9 = v7;
  if (v5)
    result = (void *)(*(uint64_t (**)(size_t))(v5 + 16))(v9);
  else
    result = operator new(v9);
  v11 = (unint64_t *)((char *)this + 16);
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + v9, v11));
  return result;
}

void sub_245C7AA44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

google::protobuf::internal::SerialArena::Block *google::protobuf::internal::SerialArena::NewBlock(google::protobuf::internal::SerialArena *this, google::protobuf::internal::SerialArena::Block *a2, google::protobuf::internal::ArenaImpl *a3, google::protobuf::internal::ArenaImpl *a4)
{
  uint64_t v7;
  google::protobuf::internal::SerialArena::Block *v8;
  uint64_t v9;

  if (this)
    v7 = *((_QWORD *)this + 2);
  else
    v7 = -1;
  v8 = (google::protobuf::internal::SerialArena::Block *)google::protobuf::internal::ArenaImpl::NewBuffer(a3, v7, (unint64_t)a2);
  return google::protobuf::internal::SerialArena::Block::Block(v8, v9, (unint64_t)this, 0, 0);
}

_QWORD *google::protobuf::internal::SerialArena::AddCleanupFallback(google::protobuf::internal::SerialArena *this, void *a2, void (*a3)(void *), google::protobuf::internal::ArenaImpl *a4)
{
  _QWORD *result;
  uint64_t v8;
  uint64_t v9;

  result = (_QWORD *)*((_QWORD *)this + 3);
  do
  {
    if (result)
    {
      if ((unint64_t)(2 * *result) >= 0x40)
        v8 = 64;
      else
        v8 = 2 * *result;
    }
    else
    {
      v8 = 8;
    }
    result = (_QWORD *)google::protobuf::internal::SerialArena::AllocateAligned(this, (google::protobuf::internal::SerialArena::Block *)((16 * (_WORD)v8 + 23) & 0xFF0), (uint64_t)a3, a4);
    v9 = *((_QWORD *)this + 3);
    *result = v8;
    result[1] = v9;
    *((_QWORD *)this + 3) = result;
    *((_QWORD *)this + 7) = result + 2;
    *((_QWORD *)this + 8) = &result[2 * v8 + 2];
  }
  while (!(16 * v8));
  result[2] = a2;
  result[3] = a3;
  *((_QWORD *)this + 7) = result + 4;
  return result;
}

unint64_t google::protobuf::internal::SerialArena::AllocateAligned(google::protobuf::internal::SerialArena *this, google::protobuf::internal::SerialArena::Block *a2, uint64_t a3, google::protobuf::internal::ArenaImpl *a4)
{
  std::string *v6;
  unint64_t result;
  unint64_t v8;
  std::string *v9;
  char v10;
  std::string v11[2];

  if ((google::protobuf::internal::SerialArena::Block *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFF8) != a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/arena_impl.h", 159);
    v6 = google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: (internal::AlignUpTo8(n)) == (n): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v10, (const char **)&v6->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v11[0].__r_.__value_.__l.__data_);
  }
  result = *((_QWORD *)this + 5);
  v8 = *((_QWORD *)this + 6);
  if (v8 < result)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/arena_impl.h", 160);
    v9 = google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: (limit_) >= (ptr_): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v10, (const char **)&v9->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v11[0].__r_.__value_.__l.__data_);
    result = *((_QWORD *)this + 5);
    v8 = *((_QWORD *)this + 6);
  }
  if (v8 - result < (unint64_t)a2)
    return google::protobuf::internal::SerialArena::AllocateAlignedFallback(this, a2, a3, a4);
  *((_QWORD *)this + 5) = (char *)a2 + result;
  return result;
}

void sub_245C7AC1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void *google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(google::protobuf::internal::ArenaImpl *this, google::protobuf::internal::SerialArena::Block *a2, void (*a3)(void *))
{
  google::protobuf::internal::ArenaImpl *v6;
  google::protobuf::internal::ArenaImpl *v7;
  google::protobuf::internal::SerialArena *v8;
  _QWORD *v10;

  v6 = (google::protobuf::internal::ArenaImpl *)google::protobuf::internal::ArenaImpl::thread_cache(this);
  if (*((_QWORD *)v6 + 1) == *((_QWORD *)this + 3))
  {
    v8 = (google::protobuf::internal::SerialArena *)*((_QWORD *)v6 + 2);
    return google::protobuf::internal::SerialArena::AllocateAlignedAndAddCleanup(v8, a2, a3, v7);
  }
  v10 = google::protobuf::internal::ArenaImpl::thread_cache(v6);
  v8 = (google::protobuf::internal::SerialArena *)atomic_load((unint64_t *)this + 1);
  if (v8 && *((_QWORD **)v8 + 1) == v10)
    return google::protobuf::internal::SerialArena::AllocateAlignedAndAddCleanup(v8, a2, a3, v7);
  return google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanupFallback(this, a2, a3);
}

void *google::protobuf::internal::SerialArena::AllocateAlignedAndAddCleanup(google::protobuf::internal::SerialArena *this, google::protobuf::internal::SerialArena::Block *a2, void (*a3)(void *), google::protobuf::internal::ArenaImpl *a4)
{
  void *Aligned;
  google::protobuf::internal::ArenaImpl *v7;
  void *v8;
  _QWORD *v9;

  Aligned = (void *)google::protobuf::internal::SerialArena::AllocateAligned(this, a2, (uint64_t)a3, a4);
  v8 = Aligned;
  v9 = (_QWORD *)*((_QWORD *)this + 7);
  if (v9 == *((_QWORD **)this + 8))
  {
    google::protobuf::internal::SerialArena::AddCleanupFallback(this, Aligned, a3, v7);
  }
  else
  {
    *v9 = Aligned;
    v9[1] = a3;
    *((_QWORD *)this + 7) = v9 + 2;
  }
  return v8;
}

void *google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanupFallback(google::protobuf::internal::ArenaImpl *this, google::protobuf::internal::SerialArena::Block *a2, void (*a3)(void *))
{
  google::protobuf::internal::SerialArena::Block *v6;
  google::protobuf::internal::ArenaImpl *SerialArenaFallback;
  google::protobuf::internal::ArenaImpl *v8;

  v6 = (google::protobuf::internal::SerialArena::Block *)google::protobuf::internal::ArenaImpl::thread_cache(this);
  SerialArenaFallback = google::protobuf::internal::ArenaImpl::GetSerialArenaFallback(this, v6);
  return google::protobuf::internal::SerialArena::AllocateAlignedAndAddCleanup(SerialArenaFallback, a2, a3, v8);
}

unint64_t google::protobuf::internal::ArenaImpl::AllocateAlignedFallback(google::protobuf::internal::ArenaImpl *this, google::protobuf::internal::SerialArena::Block *a2)
{
  google::protobuf::internal::SerialArena::Block *v4;
  google::protobuf::internal::ArenaImpl *SerialArenaFallback;
  uint64_t v6;
  google::protobuf::internal::ArenaImpl *v7;

  v4 = (google::protobuf::internal::SerialArena::Block *)google::protobuf::internal::ArenaImpl::thread_cache(this);
  SerialArenaFallback = google::protobuf::internal::ArenaImpl::GetSerialArenaFallback(this, v4);
  return google::protobuf::internal::SerialArena::AllocateAligned(SerialArenaFallback, a2, v6, v7);
}

google::protobuf::internal::ArenaImpl *google::protobuf::internal::ArenaImpl::GetSerialArenaFallback(google::protobuf::internal::ArenaImpl *this, google::protobuf::internal::SerialArena::Block *a2)
{
  unint64_t *v3;
  google::protobuf::internal::ArenaImpl *v4;
  google::protobuf::internal::SerialArena *v5;
  uint64_t v6;
  google::protobuf::internal::ArenaImpl *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char v11;
  google::protobuf::internal::ArenaImpl *v12;
  unint64_t v13;

  v3 = (unint64_t *)this;
  v4 = (google::protobuf::internal::ArenaImpl *)atomic_load((unint64_t *)this);
  if (!v4)
  {
LABEL_4:
    v5 = (google::protobuf::internal::SerialArena *)google::protobuf::internal::ArenaImpl::NewBuffer(this, -1, 0x48uLL);
    *(_OWORD *)v5 = xmmword_245C95840;
    *((_QWORD *)v5 + 2) = v6;
    this = (google::protobuf::internal::ArenaImpl *)google::protobuf::internal::SerialArena::New(v5, a2, v3, v7);
    v4 = this;
    v8 = *v3;
    *((_QWORD *)this + 4) = *v3;
    v9 = __ldxr(v3);
    if (v9 == v8)
    {
      if (__stlxr((unint64_t)this, v3))
        goto LABEL_8;
      goto LABEL_14;
    }
    __clrex();
LABEL_8:
    while (1)
    {
      *((_QWORD *)this + 4) = v9;
      v10 = __ldxr(v3);
      if (v10 != v9)
        break;
      if (__stlxr((unint64_t)this, v3))
        goto LABEL_12;
      v11 = 1;
LABEL_13:
      v9 = v10;
      if ((v11 & 1) != 0)
        goto LABEL_14;
    }
    __clrex();
LABEL_12:
    v11 = 0;
    goto LABEL_13;
  }
  while (*((google::protobuf::internal::SerialArena::Block **)v4 + 1) != a2)
  {
    v4 = (google::protobuf::internal::ArenaImpl *)*((_QWORD *)v4 + 4);
    if (!v4)
      goto LABEL_4;
  }
LABEL_14:
  v12 = (google::protobuf::internal::ArenaImpl *)google::protobuf::internal::ArenaImpl::thread_cache(this);
  *((_QWORD *)v12 + 2) = v4;
  v13 = v3[3];
  google::protobuf::internal::ArenaImpl::thread_cache(v12)[1] = v13;
  atomic_store((unint64_t)v4, v3 + 1);
  return v4;
}

uint64_t google::protobuf::internal::SerialArena::AllocateAlignedFallback(google::protobuf::internal::SerialArena *this, google::protobuf::internal::SerialArena::Block *a2, uint64_t a3, google::protobuf::internal::ArenaImpl *a4)
{
  google::protobuf::internal::SerialArena *v6;
  unint64_t *v7;

  v6 = (google::protobuf::internal::SerialArena *)*((_QWORD *)this + 2);
  *((_QWORD *)v6 + 1) = *((_QWORD *)v6 + 2) - *((_QWORD *)this + 6) + *((_QWORD *)this + 5);
  v7 = (unint64_t *)google::protobuf::internal::SerialArena::NewBlock(v6, a2, *(google::protobuf::internal::ArenaImpl **)this, a4);
  *((_QWORD *)this + 2) = v7;
  *((_QWORD *)this + 5) = google::protobuf::internal::SerialArena::Block::Pointer((google::protobuf::internal::SerialArena::Block *)v7, v7[1]);
  *((_QWORD *)this + 6) = google::protobuf::internal::SerialArena::Block::Pointer(*((google::protobuf::internal::SerialArena::Block **)this + 2), *(_QWORD *)(*((_QWORD *)this + 2) + 16));
  return google::protobuf::internal::SerialArena::AllocateAligned(this, (unint64_t)a2);
}

unint64_t google::protobuf::internal::ArenaImpl::AllocateAligned(google::protobuf::internal::ArenaImpl *this, google::protobuf::internal::SerialArena::Block *a2)
{
  google::protobuf::internal::ArenaImpl *v4;
  uint64_t v5;
  google::protobuf::internal::ArenaImpl *v6;
  google::protobuf::internal::SerialArena *v7;
  _QWORD *v9;

  v4 = (google::protobuf::internal::ArenaImpl *)google::protobuf::internal::ArenaImpl::thread_cache(this);
  if (*((_QWORD *)v4 + 1) == *((_QWORD *)this + 3))
  {
    v7 = (google::protobuf::internal::SerialArena *)*((_QWORD *)v4 + 2);
    return google::protobuf::internal::SerialArena::AllocateAligned(v7, a2, v5, v6);
  }
  v9 = google::protobuf::internal::ArenaImpl::thread_cache(v4);
  v7 = (google::protobuf::internal::SerialArena *)atomic_load((unint64_t *)this + 1);
  if (v7 && *((_QWORD **)v7 + 1) == v9)
    return google::protobuf::internal::SerialArena::AllocateAligned(v7, a2, v5, v6);
  return google::protobuf::internal::ArenaImpl::AllocateAlignedFallback(this, a2);
}

google::protobuf::internal::SerialArena::Block *google::protobuf::internal::SerialArena::Block::Block(google::protobuf::internal::SerialArena::Block *this, uint64_t a2, unint64_t a3, unsigned int a4, int a5)
{
  uint64_t v6;
  std::string *v7;
  char v9;
  std::string v10[2];

  v6 = 2;
  if (!a5)
    v6 = 0;
  *(_QWORD *)this = v6 | a4 | a3;
  *((_QWORD *)this + 1) = 24;
  *((_QWORD *)this + 2) = a2;
  if ((a3 & 3) != 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/arena_impl.h", 107);
    v7 = google::protobuf::internal::LogMessage::operator<<(v10, "CHECK failed: (reinterpret_cast<uintptr_t>(next) & 3) == (0u): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v9, (const char **)&v7->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v10[0].__r_.__value_.__l.__data_);
  }
  return this;
}

void sub_245C7B024(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::ThreadLocalStorage<google::protobuf::internal::ArenaImpl::ThreadCache>::Delete(uint64_t result)
{
  if (result)
    JUMPOUT(0x249544F4CLL);
  return result;
}

google::protobuf::internal::LazyString *google::protobuf::internal::LazyString::Init(google::protobuf::internal::LazyString *this)
{
  unsigned __int8 v2;
  google::protobuf::internal::LazyString *v3;

  {
    __cxa_atexit((void (*)(void *))google::protobuf::internal::WrappedMutex::~WrappedMutex, &google::protobuf::internal::LazyString::Init(void)const::mu, &dword_245BFA000);
  }
  std::mutex::lock(&google::protobuf::internal::LazyString::Init(void)const::mu);
  v3 = (google::protobuf::internal::LazyString *)atomic_load((unint64_t *)this + 3);
  if (!v3)
  {
    std::string::basic_string[abi:ne180100](this, *(void **)this, *((_QWORD *)this + 1));
    atomic_store((unint64_t)this, (unint64_t *)this + 3);
    v3 = this;
  }
  std::mutex::unlock(&google::protobuf::internal::LazyString::Init(void)const::mu);
  return v3;
}

void google::protobuf::internal::ArenaStringPtr::Set(google::protobuf::internal::ArenaStringPtr *this, uint64_t a2, __int128 *a3, google::protobuf::internal::ArenaImpl *a4)
{
  std::string *AlignedAndAddCleanup;
  std::string *v8;
  __int128 v9;

  if (*(_QWORD *)this != a2)
  {
    google::protobuf::internal::ArenaStringPtr::UnsafeMutablePointer(this);
    JUMPOUT(0x249544CE8);
  }
  if (!a4)
  {
    AlignedAndAddCleanup = (std::string *)operator new();
    v8 = AlignedAndAddCleanup;
    if ((*((char *)a3 + 23) & 0x80000000) == 0)
    {
      *(_OWORD *)&AlignedAndAddCleanup->__r_.__value_.__l.__data_ = *a3;
      AlignedAndAddCleanup->__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
      goto LABEL_11;
    }
LABEL_10:
    std::string::__init_copy_ctor_external(AlignedAndAddCleanup, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
    goto LABEL_11;
  }
  if ((*((_BYTE *)a4 + 24) & 1) != 0)
  AlignedAndAddCleanup = (std::string *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(a4, (google::protobuf::internal::SerialArena::Block *)0x18, (void (*)(void *))google::protobuf::internal::arena_destruct_object<std::string>);
  v8 = AlignedAndAddCleanup;
  if (*((char *)a3 + 23) < 0)
    goto LABEL_10;
  v9 = *a3;
  AlignedAndAddCleanup->__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
  *(_OWORD *)&AlignedAndAddCleanup->__r_.__value_.__l.__data_ = v9;
LABEL_11:
  *(_QWORD *)this = v8;
}

{
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t AlignedAndAddCleanup;
  uint64_t v10;
  google::protobuf::internal::ArenaImpl *v11;

  if (*(_QWORD *)this == a2)
  {
    if (a4)
    {
      if ((*((_BYTE *)a4 + 24) & 1) != 0)
      {
        v11 = a4;
        a4 = v11;
      }
      AlignedAndAddCleanup = (uint64_t)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(a4, (google::protobuf::internal::SerialArena::Block *)0x18, (void (*)(void *))google::protobuf::internal::arena_destruct_object<std::string>);
      v10 = *((_QWORD *)a3 + 2);
      *(_OWORD *)AlignedAndAddCleanup = *a3;
      *(_QWORD *)(AlignedAndAddCleanup + 16) = v10;
      *((_QWORD *)a3 + 1) = 0;
      *((_QWORD *)a3 + 2) = 0;
      *(_QWORD *)a3 = 0;
    }
    else
    {
      AlignedAndAddCleanup = operator new();
      *(_OWORD *)AlignedAndAddCleanup = *a3;
      *(_QWORD *)(AlignedAndAddCleanup + 16) = *((_QWORD *)a3 + 2);
      *(_QWORD *)a3 = 0;
      *((_QWORD *)a3 + 1) = 0;
      *((_QWORD *)a3 + 2) = 0;
    }
    *(_QWORD *)this = AlignedAndAddCleanup;
  }
  else
  {
    v6 = google::protobuf::internal::ArenaStringPtr::UnsafeMutablePointer(this);
    v7 = v6;
    if (*(char *)(v6 + 23) < 0)
      operator delete(*(void **)v6);
    v8 = *a3;
    *(_QWORD *)(v7 + 16) = *((_QWORD *)a3 + 2);
    *(_OWORD *)v7 = v8;
    *((_BYTE *)a3 + 23) = 0;
    *(_BYTE *)a3 = 0;
  }
}

void sub_245C7B220(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x249544F58](v1, 0x1012C40EC159624);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::ArenaStringPtr::Set(google::protobuf::internal::ArenaStringPtr *a1, __int128 *a2, google::protobuf::internal::ArenaImpl *a3)
{
  google::protobuf::internal::ArenaStringPtr::Set(a1, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, a2, a3);
}

{
  google::protobuf::internal::ArenaStringPtr::Set(a1, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, a2, a3);
}

{
  google::protobuf::internal::ArenaStringPtr::Set(a1, 0, a2, a3);
}

uint64_t *google::protobuf::internal::ArenaStringPtr::Mutable(uint64_t **a1, google::protobuf::internal::ArenaImpl *a2)
{
  if (*a1 == &google::protobuf::internal::fixed_address_empty_string)
    return google::protobuf::internal::ArenaStringPtr::MutableSlow<>(a1, a2);
  else
    return (uint64_t *)google::protobuf::internal::ArenaStringPtr::UnsafeMutablePointer((google::protobuf::internal::ArenaStringPtr *)a1);
}

uint64_t *google::protobuf::internal::ArenaStringPtr::MutableSlow<>(uint64_t **a1, google::protobuf::internal::ArenaImpl *this)
{
  std::string *v4;
  uint64_t *result;
  char v6;
  std::string v7[2];

  if (*a1 != &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/arenastring.cc", 147);
    v4 = google::protobuf::internal::LogMessage::operator<<(v7, "CHECK failed: IsDefault(default_value): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v6, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v7[0].__r_.__value_.__l.__data_);
  }
  if (this)
  {
    if ((*((_BYTE *)this + 24) & 1) != 0)
    result = (uint64_t *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, (google::protobuf::internal::SerialArena::Block *)0x18, (void (*)(void *))google::protobuf::internal::arena_destruct_object<std::string>);
  }
  else
  {
    result = (uint64_t *)operator new();
  }
  *result = 0;
  result[1] = 0;
  result[2] = 0;
  *a1 = result;
  return result;
}

void sub_245C7B484(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

std::string *google::protobuf::internal::ArenaStringPtr::Mutable(google::protobuf::internal::ArenaStringPtr *this, const google::protobuf::internal::LazyString *a2, google::protobuf::Arena *a3)
{
  if (*(_QWORD *)this)
    return (std::string *)google::protobuf::internal::ArenaStringPtr::UnsafeMutablePointer(this);
  else
    return google::protobuf::internal::ArenaStringPtr::MutableSlow<google::protobuf::internal::LazyString>((std::string **)this, a3, a2);
}

std::string *google::protobuf::internal::ArenaStringPtr::MutableSlow<google::protobuf::internal::LazyString>(std::string **a1, google::protobuf::internal::ArenaImpl *this, google::protobuf::internal::LazyString *a3)
{
  std::string *v6;
  google::protobuf::internal::LazyString *v7;
  std::string *AlignedAndAddCleanup;
  std::string *v9;
  __int128 v10;
  char v12;
  std::string v13[2];

  if (*a1)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/arenastring.cc", 147);
    v6 = google::protobuf::internal::LogMessage::operator<<(v13, "CHECK failed: IsDefault(default_value): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v12, (const char **)&v6->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v13[0].__r_.__value_.__l.__data_);
  }
  v7 = (google::protobuf::internal::LazyString *)atomic_load((unint64_t *)a3 + 3);
  if (v7)
  {
    if (this)
      goto LABEL_5;
  }
  else
  {
    v7 = google::protobuf::internal::LazyString::Init(a3);
    if (this)
    {
LABEL_5:
      if ((*((_BYTE *)this + 24) & 1) != 0)
      AlignedAndAddCleanup = (std::string *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(this, (google::protobuf::internal::SerialArena::Block *)0x18, (void (*)(void *))google::protobuf::internal::arena_destruct_object<std::string>);
      v9 = AlignedAndAddCleanup;
      if (*((char *)v7 + 23) < 0)
        goto LABEL_8;
LABEL_11:
      v10 = *(_OWORD *)v7;
      v9->__r_.__value_.__r.__words[2] = *((_QWORD *)v7 + 2);
      *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
      goto LABEL_12;
    }
  }
  AlignedAndAddCleanup = (std::string *)operator new();
  v9 = AlignedAndAddCleanup;
  if ((*((char *)v7 + 23) & 0x80000000) == 0)
    goto LABEL_11;
LABEL_8:
  std::string::__init_copy_ctor_external(AlignedAndAddCleanup, *(const std::string::value_type **)v7, *((_QWORD *)v7 + 1));
LABEL_12:
  *a1 = v9;
  return v9;
}

void sub_245C7B5F8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x249544F58](v1, 0x1012C40EC159624);
  _Unwind_Resume(a1);
}

std::string *google::protobuf::internal::ArenaStringPtr::ClearToDefault(std::string *result, unint64_t *a2)
{
  std::string *v3;
  google::protobuf::internal::LazyString *v4;

  if (result->__r_.__value_.__r.__words[0])
  {
    v3 = (std::string *)google::protobuf::internal::ArenaStringPtr::UnsafeMutablePointer((google::protobuf::internal::ArenaStringPtr *)result);
    v4 = (google::protobuf::internal::LazyString *)atomic_load(a2 + 3);
    if (!v4)
      v4 = google::protobuf::internal::LazyString::Init((google::protobuf::internal::LazyString *)a2);
    return std::string::operator=(v3, (const std::string *)v4);
  }
  return result;
}

unint64_t google::protobuf::io::EpsCopyOutputStream::Flush(google::protobuf::io::EpsCopyOutputStream *this, char *a2)
{
  void *v4;
  unint64_t v5;
  int v6;
  std::string *v7;
  std::string *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  std::string *v12;
  char v14;
  std::string v15[2];

  while (1)
  {
    v5 = *(_QWORD *)this;
    v4 = (void *)*((_QWORD *)this + 1);
    if (!v4)
    {
      v10 = v5 - (_QWORD)a2;
      v9 = v10 + 16;
      *((_QWORD *)this + 1) = a2;
      if ((((_DWORD)v10 + 16) & 0x80000000) == 0)
        return v9;
      goto LABEL_12;
    }
    v6 = (_DWORD)a2 - v5;
    if ((unint64_t)a2 <= v5)
      break;
    if (*((_BYTE *)this + 56))
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/coded_stream.cc", 685);
      v7 = google::protobuf::internal::LogMessage::operator<<(v15, "CHECK failed: !had_error_: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v14, (const char **)&v7->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v15[0].__r_.__value_.__l.__data_);
    }
    if (v6 >= 17)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/coded_stream.cc", 686);
      v8 = google::protobuf::internal::LogMessage::operator<<(v15, "CHECK failed: overrun <= kSlopBytes: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v14, (const char **)&v8->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v15[0].__r_.__value_.__l.__data_);
    }
    a2 = &google::protobuf::io::EpsCopyOutputStream::Next(this)[v6];
    if (*((_BYTE *)this + 56))
      return 0;
  }
  memcpy(v4, (char *)this + 16, a2 - ((char *)this + 16));
  v11 = *(_QWORD *)this;
  *((_QWORD *)this + 1) += a2 - ((char *)this + 16);
  v9 = v11 - (_QWORD)a2;
  if ((((_DWORD)v11 - (_DWORD)a2) & 0x80000000) == 0)
    return v9;
LABEL_12:
  google::protobuf::internal::LogMessage::LogMessage((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/coded_stream.cc", 700);
  v12 = google::protobuf::internal::LogMessage::operator<<(v15, "CHECK failed: s >= 0: ");
  google::protobuf::internal::LogFinisher::operator=((int)&v14, (const char **)&v12->__r_.__value_.__l.__data_);
  google::protobuf::internal::LogMessage::~LogMessage((void **)&v15[0].__r_.__value_.__l.__data_);
  return v9;
}

void sub_245C7B7F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

char *google::protobuf::io::EpsCopyOutputStream::Next(google::protobuf::io::EpsCopyOutputStream *this)
{
  std::string *v2;
  char *v3;
  void *v4;
  char *v5;
  uint64_t v6;
  char *v7;
  std::string *v9;
  std::string::size_type v10;
  char v11;
  int v12;
  std::string v13[2];

  if (*((_BYTE *)this + 56))
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/coded_stream.cc", 788);
    v2 = google::protobuf::internal::LogMessage::operator<<(v13, "CHECK failed: !had_error_: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v12, (const char **)&v2->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v13[0].__r_.__value_.__l.__data_);
  }
  if (*((_QWORD *)this + 6))
  {
    v3 = (char *)this + 16;
    v5 = *(char **)this;
    v4 = (void *)*((_QWORD *)this + 1);
    if (v4)
    {
      memcpy(v4, (char *)this + 16, v5 - v3);
      v12 = 0;
      do
      {
        v13[0].__r_.__value_.__r.__words[0] = 0;
        if (((*(uint64_t (**)(_QWORD, std::string *, int *))(**((_QWORD **)this + 6) + 16))(*((_QWORD *)this + 6), v13, &v12) & 1) == 0)
        {
          *((_BYTE *)this + 56) = 1;
          goto LABEL_14;
        }
        v6 = v12;
      }
      while (!v12);
      v5 = (char *)v13[0].__r_.__value_.__r.__words[0];
      if (v12 >= 17)
      {
        *(_OWORD *)v13[0].__r_.__value_.__l.__data_ = *(_OWORD *)*(_QWORD *)this;
        *(_QWORD *)this = &v5[v6 - 16];
        *((_QWORD *)this + 1) = 0;
        return v5;
      }
      if (v12 <= 0)
      {
        v10 = v13[0].__r_.__value_.__r.__words[0];
        google::protobuf::internal::LogMessage::LogMessage((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/coded_stream.cc", 810);
        v9 = google::protobuf::internal::LogMessage::operator<<(v13, "CHECK failed: size > 0: ");
        google::protobuf::internal::LogFinisher::operator=((int)&v11, (const char **)&v9->__r_.__value_.__l.__data_);
        google::protobuf::internal::LogMessage::~LogMessage((void **)&v13[0].__r_.__value_.__l.__data_);
        LODWORD(v6) = v12;
        v5 = (char *)v10;
      }
      *(_OWORD *)v3 = *(_OWORD *)*(_QWORD *)this;
      v7 = &v3[(int)v6];
    }
    else
    {
      *(_OWORD *)v3 = *(_OWORD *)v5;
      v7 = (char *)this + 32;
    }
    *(_QWORD *)this = v7;
    *((_QWORD *)this + 1) = v5;
  }
  else
  {
    *((_BYTE *)this + 56) = 1;
    v3 = (char *)this + 16;
LABEL_14:
    *(_QWORD *)this = (char *)this + 32;
  }
  return v3;
}

void sub_245C7B998(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

char *google::protobuf::io::EpsCopyOutputStream::Trim(google::protobuf::io::EpsCopyOutputStream *this, char *a2)
{
  unint64_t v3;

  if (!*((_BYTE *)this + 56))
  {
    v3 = google::protobuf::io::EpsCopyOutputStream::Flush(this, a2);
    if ((_DWORD)v3)
      (*(void (**)(_QWORD, unint64_t))(**((_QWORD **)this + 6) + 24))(*((_QWORD *)this + 6), v3);
    a2 = (char *)this + 16;
    *(_QWORD *)this = (char *)this + 16;
    *((_QWORD *)this + 1) = (char *)this + 16;
  }
  return a2;
}

char *google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(google::protobuf::io::EpsCopyOutputStream *this, char *a2)
{
  char *v3;
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  while (!*((_BYTE *)this + 56))
  {
    v3 = &a2[-*(_QWORD *)this];
    if ((v3 & 0x80000000) != 0)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/coded_stream.cc", 829);
      v5 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: overrun >= 0: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
      goto LABEL_6;
    }
    if (v3 > 0x10)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/coded_stream.cc", 830);
      v4 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: overrun <= kSlopBytes: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
LABEL_6:
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
    }
    a2 = &google::protobuf::io::EpsCopyOutputStream::Next(this)[(int)v3];
    if ((unint64_t)a2 < *(_QWORD *)this)
      return a2;
  }
  return (char *)this + 16;
}

void sub_245C7BAF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *google::protobuf::io::EpsCopyOutputStream::WriteRawFallback(google::protobuf::io::EpsCopyOutputStream *this, char *a2, int a3, unsigned __int8 *a4)
{
  unsigned __int8 *v4;
  int i;

  v4 = a4;
  for (i = google::protobuf::io::EpsCopyOutputStream::GetSize(this, a4);
        a3 > i;
        i = google::protobuf::io::EpsCopyOutputStream::GetSize(this, v4))
  {
    memcpy(v4, a2, i);
    a3 -= i;
    a2 += i;
    v4 = (unsigned __int8 *)google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(this, (char *)&v4[i]);
  }
  memcpy(v4, a2, a3);
  return &v4[a3];
}

uint64_t google::protobuf::io::EpsCopyOutputStream::GetSize(google::protobuf::io::EpsCopyOutputStream *this, unsigned __int8 *a2)
{
  uint64_t v3;
  std::string *v5;
  char v7;
  std::string v8[2];

  v3 = *(_QWORD *)this;
  if (*(_QWORD *)this + 16 < (unint64_t)a2)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/io/coded_stream.h", 838);
    v5 = google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: ptr <= end_ + kSlopBytes: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v8[0].__r_.__value_.__l.__data_);
    v3 = *(_QWORD *)this;
  }
  return v3 - (_QWORD)a2 + 16;
}

void sub_245C7BC34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *google::protobuf::io::EpsCopyOutputStream::WriteAliasedRaw(google::protobuf::io::EpsCopyOutputStream *this, void *a2, uint64_t a3, char *a4)
{
  char *v8;

  if (google::protobuf::io::EpsCopyOutputStream::GetSize(this, (unsigned __int8 *)a4) <= (int)a3)
  {
    v8 = google::protobuf::io::EpsCopyOutputStream::Trim(this, a4);
    if (((*(uint64_t (**)(_QWORD, void *, uint64_t))(**((_QWORD **)this + 6) + 40))(*((_QWORD *)this + 6), a2, a3) & 1) == 0)
    {
      *((_BYTE *)this + 56) = 1;
      v8 = (char *)this + 16;
      *(_QWORD *)this = (char *)this + 32;
    }
    return (unsigned __int8 *)v8;
  }
  if (*(_QWORD *)this - (_QWORD)a4 >= (int)a3)
  {
    memcpy(a4, a2, (int)a3);
    return (unsigned __int8 *)&a4[(int)a3];
  }
  return google::protobuf::io::EpsCopyOutputStream::WriteRawFallback(this, (char *)a2, a3, (unsigned __int8 *)a4);
}

unsigned __int8 *google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliasedOutline(google::protobuf::io::EpsCopyOutputStream *this, int a2, void **a3, char *a4)
{
  char *v4;
  unint64_t v8;
  uint64_t v9;
  std::string *v10;
  unsigned int v11;
  _BYTE *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  char *v17;
  void *v18;
  unsigned int v20;
  unsigned int v21;
  char v22;
  std::string v23[2];

  v4 = a4;
  v8 = *(_QWORD *)this;
  if (*(_QWORD *)this <= (unint64_t)a4)
  {
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(this, a4);
    v8 = *(_QWORD *)this;
  }
  if (*((char *)a3 + 23) >= 0)
    v9 = *((unsigned __int8 *)a3 + 23);
  else
    v9 = *((unsigned int *)a3 + 2);
  if (v8 <= (unint64_t)v4)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v23, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/io/coded_stream.h", 858);
    v10 = google::protobuf::internal::LogMessage::operator<<(v23, "CHECK failed: ptr < end_: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v22, (const char **)&v10->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v23[0].__r_.__value_.__l.__data_);
  }
  v11 = (8 * a2) | 2;
  if (v11 > 0x7F)
  {
    *v4 = (8 * a2) | 0x82;
    v13 = (8 * a2) >> 7;
    if (v11 >> 14)
    {
      v12 = v4 + 2;
      do
      {
        *(v12 - 1) = v13 | 0x80;
        v14 = v13 >> 7;
        ++v12;
        v15 = v13 >> 14;
        v13 >>= 7;
      }
      while (v15);
      *(v12 - 1) = v14;
    }
    else
    {
      v4[1] = v13;
      v12 = v4 + 2;
    }
  }
  else
  {
    *v4 = v11;
    v12 = v4 + 1;
  }
  if (v9 >= 0x80)
  {
    v20 = v9;
    do
    {
      *v12++ = v20 | 0x80;
      v16 = v20 >> 7;
      v21 = v20 >> 14;
      v20 >>= 7;
    }
    while (v21);
  }
  else
  {
    LOBYTE(v16) = v9;
  }
  *v12 = v16;
  v17 = v12 + 1;
  if (*((char *)a3 + 23) >= 0)
    v18 = a3;
  else
    v18 = *a3;
  return google::protobuf::io::EpsCopyOutputStream::WriteRawMaybeAliased(this, v18, v9, v17);
}

void sub_245C7BE94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *google::protobuf::io::EpsCopyOutputStream::WriteRawMaybeAliased(google::protobuf::io::EpsCopyOutputStream *this, void *a2, uint64_t a3, char *a4)
{
  uint64_t v6;

  if (*((_BYTE *)this + 57))
    return google::protobuf::io::EpsCopyOutputStream::WriteAliasedRaw(this, a2, a3, a4);
  if (*(_QWORD *)this - (_QWORD)a4 < (int)a3)
    return google::protobuf::io::EpsCopyOutputStream::WriteRawFallback(this, (char *)a2, a3, (unsigned __int8 *)a4);
  v6 = (int)a3;
  memcpy(a4, a2, (int)a3);
  return (unsigned __int8 *)&a4[v6];
}

unsigned __int8 *google::protobuf::io::EpsCopyOutputStream::WriteStringOutline(google::protobuf::io::EpsCopyOutputStream *this, int a2, uint64_t a3, char *a4)
{
  char *v4;
  unint64_t v8;
  uint64_t v9;
  std::string *v10;
  unsigned int v11;
  _BYTE *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned __int8 *v17;
  char *v18;
  unsigned int v20;
  unsigned int v21;
  char v22;
  std::string v23[2];

  v4 = a4;
  v8 = *(_QWORD *)this;
  if (*(_QWORD *)this <= (unint64_t)a4)
  {
    v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(this, a4);
    v8 = *(_QWORD *)this;
  }
  if (*(char *)(a3 + 23) >= 0)
    LODWORD(v9) = *(unsigned __int8 *)(a3 + 23);
  else
    v9 = *(_QWORD *)(a3 + 8);
  if (v8 <= (unint64_t)v4)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v23, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/io/coded_stream.h", 858);
    v10 = google::protobuf::internal::LogMessage::operator<<(v23, "CHECK failed: ptr < end_: ");
    google::protobuf::internal::LogFinisher::operator=((int)&v22, (const char **)&v10->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v23[0].__r_.__value_.__l.__data_);
  }
  v11 = (8 * a2) | 2;
  if (v11 > 0x7F)
  {
    *v4 = (8 * a2) | 0x82;
    v13 = (8 * a2) >> 7;
    if (v11 >> 14)
    {
      v12 = v4 + 2;
      do
      {
        *(v12 - 1) = v13 | 0x80;
        v14 = v13 >> 7;
        ++v12;
        v15 = v13 >> 14;
        v13 >>= 7;
      }
      while (v15);
      *(v12 - 1) = v14;
    }
    else
    {
      v4[1] = v13;
      v12 = v4 + 2;
    }
  }
  else
  {
    *v4 = v11;
    v12 = v4 + 1;
  }
  if (v9 >= 0x80)
  {
    v20 = v9;
    do
    {
      *v12++ = v20 | 0x80;
      v16 = v20 >> 7;
      v21 = v20 >> 14;
      v20 >>= 7;
    }
    while (v21);
  }
  else
  {
    LOBYTE(v16) = v9;
  }
  *v12 = v16;
  v17 = v12 + 1;
  if (*(char *)(a3 + 23) >= 0)
    v18 = (char *)a3;
  else
    v18 = *(char **)a3;
  if (*(_QWORD *)this - (_QWORD)v17 < (int)v9)
    return google::protobuf::io::EpsCopyOutputStream::WriteRawFallback(this, v18, v9, v17);
  memcpy(v17, v18, (int)v9);
  return &v17[(int)v9];
}

void sub_245C7C0A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::VerifyVersion(google::protobuf::internal *this, google::protobuf::internal *a2, const std::string::value_type *a3, const char *a4)
{
  const std::string::value_type *v7;
  std::string::size_type v8;
  const std::string::value_type *p_p;
  std::string::size_type v10;
  const std::string::value_type *v11;
  std::string::size_type v12;
  const std::string::value_type *v13;
  std::string::size_type v14;
  void *__p;
  std::string::size_type v16;
  unsigned __int8 v17;
  void *v18;
  std::string::size_type v19;
  unsigned __int8 v20;
  const char *v21;
  const char *v22;
  int v23;
  std::string v24;
  char __str[127];
  char v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  if ((int)a2 > 3014000)
  {
    LODWORD(v21) = 3;
    v22 = "/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/common.cc";
    v23 = 76;
    memset(&v24, 0, sizeof(v24));
    std::string::append(&v24, "This program requires version ");
    google::protobuf::internal::VersionString(a2, &v18);
    if ((v20 & 0x80u) == 0)
      v7 = (const std::string::value_type *)&v18;
    else
      v7 = (const std::string::value_type *)v18;
    if ((v20 & 0x80u) == 0)
      v8 = v20;
    else
      v8 = v19;
    std::string::append(&v24, v7, v8);
    std::string::append(&v24, " of the Protocol Buffer runtime library, but the installed version is ");
    snprintf(__str, 0x80uLL, "%d.%d.%d", 3, 14, 0);
    v26 = 0;
    std::string::basic_string[abi:ne180100]<0>(&__p, __str);
    if ((v17 & 0x80u) == 0)
      p_p = (const std::string::value_type *)&__p;
    else
      p_p = (const std::string::value_type *)__p;
    if ((v17 & 0x80u) == 0)
      v10 = v17;
    else
      v10 = v16;
    std::string::append(&v24, p_p, v10);
    std::string::append(&v24, ".  Please update your library.  If you compiled the program yourself, make sure that your headers are from the same version of Protocol Buffers as your link-time library.  (Version verification failed in \"");
    std::string::append(&v24, a3);
    std::string::append(&v24, "\".)");
    google::protobuf::internal::LogMessage::Finish(&v21);
    if ((char)v17 < 0)
      operator delete(__p);
    if ((char)v20 < 0)
      operator delete(v18);
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v24.__r_.__value_.__l.__data_);
  }
  if ((int)this < 3014000)
  {
    LODWORD(v21) = 3;
    v22 = "/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/common.cc";
    v23 = 87;
    memset(&v24, 0, sizeof(v24));
    std::string::append(&v24, "This program was compiled against version ");
    google::protobuf::internal::VersionString(this, &v18);
    if ((v20 & 0x80u) == 0)
      v11 = (const std::string::value_type *)&v18;
    else
      v11 = (const std::string::value_type *)v18;
    if ((v20 & 0x80u) == 0)
      v12 = v20;
    else
      v12 = v19;
    std::string::append(&v24, v11, v12);
    std::string::append(&v24, " of the Protocol Buffer runtime library, which is not compatible with the installed version (");
    snprintf(__str, 0x80uLL, "%d.%d.%d", 3, 14, 0);
    v26 = 0;
    std::string::basic_string[abi:ne180100]<0>(&__p, __str);
    if ((v17 & 0x80u) == 0)
      v13 = (const std::string::value_type *)&__p;
    else
      v13 = (const std::string::value_type *)__p;
    if ((v17 & 0x80u) == 0)
      v14 = v17;
    else
      v14 = v16;
    std::string::append(&v24, v13, v14);
    std::string::append(&v24, ").  Contact the program author for an update.  If you compiled the program yourself, make sure that your headers are from the same version of Protocol Buffers as your link-time library.  (Version verification failed in \"");
    std::string::append(&v24, a3);
    std::string::append(&v24, "\".)");
    google::protobuf::internal::LogMessage::Finish(&v21);
    if ((char)v17 < 0)
      operator delete(__p);
    if ((char)v20 < 0)
      operator delete(v18);
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v24.__r_.__value_.__l.__data_);
  }
}

void sub_245C7C3B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (a32 < 0)
    operator delete(a27);
  _Unwind_Resume(exception_object);
}

uint64_t google::protobuf::internal::LogMessage::LogMessage(uint64_t result, int a2, uint64_t a3, int a4)
{
  *(_DWORD *)result = a2;
  *(_QWORD *)(result + 8) = a3;
  *(_DWORD *)(result + 16) = a4;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = 0;
  *(_QWORD *)(result + 24) = 0;
  return result;
}

std::string *google::protobuf::internal::LogMessage::operator<<(std::string *a1, const std::string::value_type *a2)
{
  std::string::append(a1 + 1, a2);
  return a1;
}

{
  std::string *v3;
  std::string::size_type v4;
  std::string::size_type v5;

  v3 = a1 + 1;
  v4 = *((_QWORD *)a2 + 1);
  if (a2[23] >= 0)
  {
    v5 = *((unsigned __int8 *)a2 + 23);
  }
  else
  {
    a2 = *(const std::string::value_type **)a2;
    v5 = v4;
  }
  std::string::append(v3, a2, v5);
  return a1;
}

_QWORD *google::protobuf::internal::VersionString@<X0>(google::protobuf::internal *this@<X0>, _QWORD *a2@<X8>)
{
  char __str[128];
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  snprintf(__str, 0x80uLL, "%d.%d.%d", (int)this / 1000000, (int)this / 1000 % 1000, (int)this % 1000);
  __str[127] = 0;
  return std::string::basic_string[abi:ne180100]<0>(a2, __str);
}

const char **google::protobuf::internal::LogFinisher::operator=(int a1, const char **this)
{
  return google::protobuf::internal::LogMessage::Finish(this);
}

void google::protobuf::internal::LogMessage::~LogMessage(void **this)
{
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
}

uint64_t google::protobuf::internal::DefaultLogHandler(uint64_t result, const char *a2, int a3, uint64_t a4)
{
  FILE **v4;
  const char *v5;

  if ((result & 0x80000000) == 0)
  {
    v4 = (FILE **)MEMORY[0x24BDAC8D8];
    if (*(char *)(a4 + 23) >= 0)
      v5 = (const char *)a4;
    else
      v5 = *(const char **)a4;
    fprintf((FILE *)*MEMORY[0x24BDAC8D8], "[libprotobuf %s %s:%d] %s\n", (&google::protobuf::internal::DefaultLogHandler(google::protobuf::LogLevel,char const*,int,std::string const&)::level_names)[result], a2, a3, v5);
    return fflush(*v4);
  }
  return result;
}

std::string *google::protobuf::internal::LogMessage::operator<<(std::string *a1, int a2)
{
  char __str[128];
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  snprintf(__str, 0x80uLL, "%d", a2);
  __str[127] = 0;
  std::string::append(a1 + 1, __str);
  return a1;
}

std::string *google::protobuf::internal::LogMessage::operator<<(std::string *a1, uint64_t a2)
{
  char __str[128];
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  snprintf(__str, 0x80uLL, "%lu", a2);
  __str[127] = 0;
  std::string::append(a1 + 1, __str);
  return a1;
}

const char **google::protobuf::internal::LogMessage::Finish(const char **this)
{
  const char **v1;
  uint64_t v2;
  int v3;
  void *exception;

  v1 = this;
  if (*(_DWORD *)this == 3)
  {
    v2 = 3;
  }
  else
  {
    v3 = atomic_load((unsigned int *)&google::protobuf::internal::log_silencer_count_);
    if (v3 > 0)
      goto LABEL_6;
    v2 = *(unsigned int *)this;
  }
  this = (const char **)google::protobuf::internal::log_handler_(v2, v1[1], *((_DWORD *)v1 + 4), (uint64_t)(v1 + 3));
LABEL_6:
  if (*(_DWORD *)v1 == 3)
  {
    exception = __cxa_allocate_exception(0x30uLL);
    google::protobuf::FatalException::FatalException(exception, v1[1], *((unsigned int *)v1 + 4), v1 + 3);
  }
  return this;
}

void sub_245C7C7AC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void google::protobuf::FatalException::~FatalException(std::exception *this)
{
  this->__vftable = (std::exception_vtbl *)&off_2516E35D0;
  if (SHIBYTE(this[5].__vftable) < 0)
    operator delete(this[3].__vftable);
  std::exception::~exception(this);
}

{
  google::protobuf::FatalException::~FatalException(this);
  JUMPOUT(0x249544F58);
}

uint64_t google::protobuf::FatalException::what(google::protobuf::FatalException *this)
{
  uint64_t result;

  result = (uint64_t)this + 24;
  if (*((char *)this + 47) < 0)
    return *(_QWORD *)result;
  return result;
}

uint64_t google::protobuf::FatalException::FatalException(uint64_t a1, uint64_t a2, int a3, __int128 *a4)
{
  std::string *v5;
  __int128 v6;

  *(_QWORD *)a1 = &off_2516E35D0;
  *(_QWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 16) = a3;
  v5 = (std::string *)(a1 + 24);
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)a4, *((_QWORD *)a4 + 1));
  }
  else
  {
    v6 = *a4;
    v5->__r_.__value_.__r.__words[2] = *((_QWORD *)a4 + 2);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return a1;
}

void sub_245C7C89C(_Unwind_Exception *a1)
{
  std::exception *v1;

  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::GeneratedExtensionFinder::Find(uint64_t a1, int a2, _OWORD *a3)
{
  int8x8_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  unint64_t v9;
  uint64_t **v10;
  uint64_t *i;
  unint64_t v12;
  __int128 v14;

  {
    if (v3)
    {
      v4 = *(_QWORD *)(a1 + 8);
      v5 = 0x9DDFEA08EB382D69 * (((8 * v4) + 8) ^ HIDWORD(v4));
      v6 = 0x9DDFEA08EB382D69 * (HIDWORD(v4) ^ (v5 >> 47) ^ v5);
      v7 = (0x9DDFEA08EB382D69 * (v6 ^ (v6 >> 47))) ^ a2;
      v8 = (uint8x8_t)vcnt_s8(v3);
      v8.i16[0] = vaddlv_u8(v8);
      if (v8.u32[0] > 1uLL)
      {
        v9 = v7;
        if (v7 >= *(_QWORD *)&v3)
          v9 = v7 % *(_QWORD *)&v3;
      }
      else
      {
        v9 = (*(_QWORD *)&v3 - 1) & v7;
      }
      if (v10)
      {
        for (i = *v10; i; i = (uint64_t *)*i)
        {
          v12 = i[1];
          if (v7 == v12)
          {
            if (i[2] == v4 && *((_DWORD *)i + 6) == a2)
            {
              v14 = *((_OWORD *)i + 3);
              *a3 = *((_OWORD *)i + 2);
              a3[1] = v14;
              return 1;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v12 >= *(_QWORD *)&v3)
                v12 %= *(_QWORD *)&v3;
            }
            else
            {
              v12 &= *(_QWORD *)&v3 - 1;
            }
            if (v12 != v9)
              return 0;
          }
        }
      }
    }
  }
  return 0;
}

uint64_t google::protobuf::internal::ExtensionSet::ExtensionSet(uint64_t result, uint64_t a2)
{
  *(_QWORD *)result = a2;
  *(_DWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  return result;
}

void google::protobuf::internal::ExtensionSet::~ExtensionSet(google::protobuf::internal::ExtensionSet *this)
{
  google::protobuf::internal::ArenaImpl ****v2;
  uint64_t v3;
  google::protobuf::internal::ArenaImpl ***v4;
  uint64_t v5;
  uint64_t v6;

  if (!*(_QWORD *)this)
  {
    v2 = (google::protobuf::internal::ArenaImpl ****)*((_QWORD *)this + 2);
    if (*((unsigned __int16 *)this + 4) >= 0x101u)
    {
      google::protobuf::internal::ExtensionSet::ForEach<std::__map_iterator<std::__tree_iterator<std::__value_type<int,google::protobuf::internal::ExtensionSet::Extension>,std::__tree_node<std::__value_type<int,google::protobuf::internal::ExtensionSet::Extension>,void *> *,long>>,google::protobuf::internal::ExtensionSet::~()::$_0>(*v2, v2 + 1);
    }
    else if (*((_WORD *)this + 5))
    {
      v3 = 32 * *((unsigned __int16 *)this + 5);
      v4 = (google::protobuf::internal::ArenaImpl ***)(v2 + 1);
      do
      {
        google::protobuf::internal::ExtensionSet::Extension::Free(v4);
        v4 += 4;
        v3 -= 32;
      }
      while (v3);
    }
    v5 = *((_QWORD *)this + 2);
    if (*((unsigned __int16 *)this + 4) >= 0x101u)
    {
      if (v5)
      {
        v6 = *((_QWORD *)this + 2);
        std::__tree<std::__value_type<std::string_view,int>,std::__map_value_compare<std::string_view,std::__value_type<std::string_view,int>,std::less<std::string_view>,true>,std::allocator<std::__value_type<std::string_view,int>>>::destroy(v5, *(_QWORD **)(v5 + 8));
        MEMORY[0x249544F58](v6, 0x1020C4062D53EE8);
      }
    }
    else if (v5)
    {
      MEMORY[0x249544F34](v5, 0x1062C802AB6010CLL);
    }
  }
}

void google::protobuf::internal::ExtensionSet::Extension::Clear(google::protobuf::internal::ExtensionSet::Extension *this)
{
  uint64_t v2;
  std::string *v3;
  uint64_t v4;
  std::string *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char v10;
  std::string v11[2];

  if (*((_BYTE *)this + 9))
  {
    v2 = *((unsigned __int8 *)this + 8);
    if ((v2 - 19) <= 0xFFFFFFED)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v3 = google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v10, (const char **)&v3->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v11[0].__r_.__value_.__l.__data_);
    }
    switch(v2)
    {
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 13:
      case 14:
      case 15:
      case 16:
      case 17:
      case 18:
        **(_DWORD **)this = 0;
        break;
      case 9:
      case 12:
        google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>(*(_QWORD *)this);
        break;
      case 10:
      case 11:
        google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<google::protobuf::MessageLite>::TypeHandler>(*(_QWORD *)this);
        break;
      default:
        return;
    }
  }
  else if ((*((_BYTE *)this + 10) & 1) == 0)
  {
    v4 = *((unsigned __int8 *)this + 8);
    if ((v4 - 19) <= 0xFFFFFFED)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v5 = google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v10, (const char **)&v5->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v11[0].__r_.__value_.__l.__data_);
    }
    v6 = google::protobuf::internal::WireFormatLite::kFieldTypeToCppTypeMap[v4];
    if (v6 == 10)
    {
      v8 = **(_QWORD **)this;
      if ((*((_BYTE *)this + 10) & 0x10) != 0)
        v9 = *(void (**)(void))(v8 + 112);
      else
        v9 = *(void (**)(void))(v8 + 40);
      v9();
    }
    else if (v6 == 9)
    {
      v7 = *(_QWORD *)this;
      if (*(char *)(*(_QWORD *)this + 23) < 0)
      {
        **(_BYTE **)v7 = 0;
        *(_QWORD *)(v7 + 8) = 0;
      }
      else
      {
        *(_BYTE *)v7 = 0;
        *(_BYTE *)(v7 + 23) = 0;
      }
    }
    *((_BYTE *)this + 10) = *((_BYTE *)this + 10) & 0xF0 | 1;
  }
}

void sub_245C7CC38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::ExtensionSet::SetInt32(google::protobuf::internal::ExtensionSet *this, int a2, int a3, int a4, const FieldDescriptor *a5)
{
  uint64_t **v8;
  uint64_t **v9;
  char v10;
  std::string *v11;
  std::string *v12;
  std::string *v13;
  uint64_t v14;
  std::string *v15;
  std::string *v16;
  char v17;
  std::string v18[2];

  v8 = google::protobuf::internal::ExtensionSet::Insert(this, a2);
  v9 = v8;
  v8[2] = (uint64_t *)&a5->MangledTypeName;
  if (v10)
  {
    *((_BYTE *)v8 + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v11 = google::protobuf::internal::LogMessage::operator<<(v18, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v17, (const char **)&v11->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v18[0].__r_.__value_.__l.__data_);
    }
    if (google::protobuf::internal::WireFormatLite::kFieldTypeToCppTypeMap[a3] != 1)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 348);
      v12 = google::protobuf::internal::LogMessage::operator<<(v18, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_INT32): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v17, (const char **)&v12->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v18[0].__r_.__value_.__l.__data_);
    }
    *((_BYTE *)v9 + 9) = 0;
  }
  else
  {
    if (*((_BYTE *)v8 + 9))
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 348);
      v13 = google::protobuf::internal::LogMessage::operator<<(v18, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (OPTIONAL_FIELD): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v17, (const char **)&v13->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v18[0].__r_.__value_.__l.__data_);
    }
    v14 = *((unsigned __int8 *)v9 + 8);
    if ((v14 - 19) <= 0xFFFFFFED)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v15 = google::protobuf::internal::LogMessage::operator<<(v18, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v17, (const char **)&v15->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v18[0].__r_.__value_.__l.__data_);
    }
    if (google::protobuf::internal::WireFormatLite::kFieldTypeToCppTypeMap[v14] != 1)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 348);
      v16 = google::protobuf::internal::LogMessage::operator<<(v18, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_INT32): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v17, (const char **)&v16->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v18[0].__r_.__value_.__l.__data_);
    }
  }
  *((_BYTE *)v9 + 10) &= 0xF0u;
  *(_DWORD *)v9 = a4;
}

void sub_245C7CE34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::ExtensionSet::AddInt32(google::protobuf::internal::ExtensionSet *this, int a2, int a3, int a4, int a5, const FieldDescriptor *a6)
{
  uint64_t **v11;
  uint64_t **v12;
  char v13;
  std::string *v14;
  std::string *v15;
  uint64_t v16;
  uint64_t *AlignedAndAddCleanup;
  std::string *v18;
  uint64_t v19;
  std::string *v20;
  std::string *v21;
  std::string *v22;
  int *v23;
  uint64_t v24;
  int v25;
  uint64_t result;
  char v27;
  std::string v28[2];

  v11 = google::protobuf::internal::ExtensionSet::Insert(this, a2);
  v12 = v11;
  v11[2] = (uint64_t *)&a6->MangledTypeName;
  if (v13)
  {
    *((_BYTE *)v11 + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v14 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v14->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
    }
    if (google::protobuf::internal::WireFormatLite::kFieldTypeToCppTypeMap[a3] != 1)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 348);
      v15 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_INT32): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v15->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
    }
    *((_BYTE *)v12 + 9) = 1;
    *((_BYTE *)v12 + 11) = a4;
    v16 = *(_QWORD *)this;
    if (*(_QWORD *)this)
    {
      if ((*(_BYTE *)(v16 + 24) & 1) != 0)
      AlignedAndAddCleanup = (uint64_t *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((google::protobuf::internal::ArenaImpl *)v16, (google::protobuf::internal::SerialArena::Block *)0x10, (void (*)(void *))google::protobuf::internal::arena_destruct_object<google::protobuf::RepeatedField<int>>);
      *AlignedAndAddCleanup = 0;
      AlignedAndAddCleanup[1] = v16;
    }
    else
    {
      AlignedAndAddCleanup = (uint64_t *)operator new();
      *AlignedAndAddCleanup = 0;
      AlignedAndAddCleanup[1] = 0;
    }
    *v12 = AlignedAndAddCleanup;
  }
  else
  {
    if (!*((_BYTE *)v11 + 9))
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 348);
      v18 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (REPEATED_FIELD): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v18->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
    }
    v19 = *((unsigned __int8 *)v12 + 8);
    if ((v19 - 19) <= 0xFFFFFFED)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v20 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v20->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
    }
    if (google::protobuf::internal::WireFormatLite::kFieldTypeToCppTypeMap[v19] != 1)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 348);
      v21 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_INT32): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v21->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
    }
    if (*((unsigned __int8 *)v12 + 11) != a4)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 348);
      v22 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (extension->is_packed) == (packed): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v22->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
    }
  }
  v23 = (int *)*v12;
  v24 = *v23;
  if ((_DWORD)v24 == v23[1])
  {
    v25 = v24 + 1;
    google::protobuf::RepeatedField<int>::Reserve(v23, v24 + 1);
    result = google::protobuf::RepeatedField<int>::elements((uint64_t)v23);
    *(_DWORD *)(result + 4 * v24) = a5;
  }
  else
  {
    result = google::protobuf::RepeatedField<int>::elements((uint64_t)v23);
    *(_DWORD *)(result + 4 * v24) = a5;
    v25 = v24 + 1;
  }
  *v23 = v25;
  return result;
}

void sub_245C7D14C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::ExtensionSet::SetInt64(google::protobuf::internal::ExtensionSet *this, int a2, int a3, uint64_t *a4, const FieldDescriptor *a5)
{
  uint64_t **v8;
  uint64_t **v9;
  char v10;
  std::string *v11;
  std::string *v12;
  std::string *v13;
  uint64_t v14;
  std::string *v15;
  std::string *v16;
  char v17;
  std::string v18[2];

  v8 = google::protobuf::internal::ExtensionSet::Insert(this, a2);
  v9 = v8;
  v8[2] = (uint64_t *)&a5->MangledTypeName;
  if (v10)
  {
    *((_BYTE *)v8 + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v11 = google::protobuf::internal::LogMessage::operator<<(v18, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v17, (const char **)&v11->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v18[0].__r_.__value_.__l.__data_);
    }
    if (google::protobuf::internal::WireFormatLite::kFieldTypeToCppTypeMap[a3] != 2)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 349);
      v12 = google::protobuf::internal::LogMessage::operator<<(v18, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_INT64): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v17, (const char **)&v12->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v18[0].__r_.__value_.__l.__data_);
    }
    *((_BYTE *)v9 + 9) = 0;
  }
  else
  {
    if (*((_BYTE *)v8 + 9))
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 349);
      v13 = google::protobuf::internal::LogMessage::operator<<(v18, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (OPTIONAL_FIELD): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v17, (const char **)&v13->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v18[0].__r_.__value_.__l.__data_);
    }
    v14 = *((unsigned __int8 *)v9 + 8);
    if ((v14 - 19) <= 0xFFFFFFED)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v15 = google::protobuf::internal::LogMessage::operator<<(v18, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v17, (const char **)&v15->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v18[0].__r_.__value_.__l.__data_);
    }
    if (google::protobuf::internal::WireFormatLite::kFieldTypeToCppTypeMap[v14] != 2)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 349);
      v16 = google::protobuf::internal::LogMessage::operator<<(v18, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_INT64): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v17, (const char **)&v16->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v18[0].__r_.__value_.__l.__data_);
    }
  }
  *((_BYTE *)v9 + 10) &= 0xF0u;
  *v9 = a4;
}

void sub_245C7D368(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::ExtensionSet::AddInt64(google::protobuf::internal::ExtensionSet *this, int a2, int a3, int a4, uint64_t a5, const FieldDescriptor *a6)
{
  uint64_t **v11;
  uint64_t **v12;
  char v13;
  std::string *v14;
  std::string *v15;
  uint64_t v16;
  uint64_t *AlignedAndAddCleanup;
  std::string *v18;
  uint64_t v19;
  std::string *v20;
  std::string *v21;
  std::string *v22;
  int *v23;
  uint64_t v24;
  int v25;
  uint64_t result;
  char v27;
  std::string v28[2];

  v11 = google::protobuf::internal::ExtensionSet::Insert(this, a2);
  v12 = v11;
  v11[2] = (uint64_t *)&a6->MangledTypeName;
  if (v13)
  {
    *((_BYTE *)v11 + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v14 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v14->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
    }
    if (google::protobuf::internal::WireFormatLite::kFieldTypeToCppTypeMap[a3] != 2)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 349);
      v15 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_INT64): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v15->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
    }
    *((_BYTE *)v12 + 9) = 1;
    *((_BYTE *)v12 + 11) = a4;
    v16 = *(_QWORD *)this;
    if (*(_QWORD *)this)
    {
      if ((*(_BYTE *)(v16 + 24) & 1) != 0)
      AlignedAndAddCleanup = (uint64_t *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((google::protobuf::internal::ArenaImpl *)v16, (google::protobuf::internal::SerialArena::Block *)0x10, (void (*)(void *))google::protobuf::internal::arena_destruct_object<google::protobuf::RepeatedField<long long>>);
      *AlignedAndAddCleanup = 0;
      AlignedAndAddCleanup[1] = v16;
    }
    else
    {
      AlignedAndAddCleanup = (uint64_t *)operator new();
      *AlignedAndAddCleanup = 0;
      AlignedAndAddCleanup[1] = 0;
    }
    *v12 = AlignedAndAddCleanup;
  }
  else
  {
    if (!*((_BYTE *)v11 + 9))
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 349);
      v18 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (REPEATED_FIELD): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v18->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
    }
    v19 = *((unsigned __int8 *)v12 + 8);
    if ((v19 - 19) <= 0xFFFFFFED)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v20 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v20->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
    }
    if (google::protobuf::internal::WireFormatLite::kFieldTypeToCppTypeMap[v19] != 2)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 349);
      v21 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_INT64): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v21->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
    }
    if (*((unsigned __int8 *)v12 + 11) != a4)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 349);
      v22 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (extension->is_packed) == (packed): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v22->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
    }
  }
  v23 = (int *)*v12;
  v24 = *v23;
  if ((_DWORD)v24 == v23[1])
  {
    v25 = v24 + 1;
    google::protobuf::RepeatedField<long long>::Reserve(v23, v24 + 1);
    result = google::protobuf::RepeatedField<long long>::elements((uint64_t)v23);
    *(_QWORD *)(result + 8 * v24) = a5;
  }
  else
  {
    result = google::protobuf::RepeatedField<long long>::elements((uint64_t)v23);
    *(_QWORD *)(result + 8 * v24) = a5;
    v25 = v24 + 1;
  }
  *v23 = v25;
  return result;
}

void sub_245C7D680(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::ExtensionSet::SetUInt32(google::protobuf::internal::ExtensionSet *this, int a2, int a3, int a4, const FieldDescriptor *a5)
{
  uint64_t **v8;
  uint64_t **v9;
  char v10;
  std::string *v11;
  std::string *v12;
  std::string *v13;
  uint64_t v14;
  std::string *v15;
  std::string *v16;
  char v17;
  std::string v18[2];

  v8 = google::protobuf::internal::ExtensionSet::Insert(this, a2);
  v9 = v8;
  v8[2] = (uint64_t *)&a5->MangledTypeName;
  if (v10)
  {
    *((_BYTE *)v8 + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v11 = google::protobuf::internal::LogMessage::operator<<(v18, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v17, (const char **)&v11->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v18[0].__r_.__value_.__l.__data_);
    }
    if (google::protobuf::internal::WireFormatLite::kFieldTypeToCppTypeMap[a3] != 3)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 350);
      v12 = google::protobuf::internal::LogMessage::operator<<(v18, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_UINT32): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v17, (const char **)&v12->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v18[0].__r_.__value_.__l.__data_);
    }
    *((_BYTE *)v9 + 9) = 0;
  }
  else
  {
    if (*((_BYTE *)v8 + 9))
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 350);
      v13 = google::protobuf::internal::LogMessage::operator<<(v18, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (OPTIONAL_FIELD): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v17, (const char **)&v13->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v18[0].__r_.__value_.__l.__data_);
    }
    v14 = *((unsigned __int8 *)v9 + 8);
    if ((v14 - 19) <= 0xFFFFFFED)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v15 = google::protobuf::internal::LogMessage::operator<<(v18, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v17, (const char **)&v15->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v18[0].__r_.__value_.__l.__data_);
    }
    if (google::protobuf::internal::WireFormatLite::kFieldTypeToCppTypeMap[v14] != 3)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 350);
      v16 = google::protobuf::internal::LogMessage::operator<<(v18, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_UINT32): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v17, (const char **)&v16->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v18[0].__r_.__value_.__l.__data_);
    }
  }
  *((_BYTE *)v9 + 10) &= 0xF0u;
  *(_DWORD *)v9 = a4;
}

void sub_245C7D89C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::ExtensionSet::AddUInt32(google::protobuf::internal::ExtensionSet *this, int a2, int a3, int a4, int a5, const FieldDescriptor *a6)
{
  uint64_t **v11;
  uint64_t **v12;
  char v13;
  std::string *v14;
  std::string *v15;
  uint64_t v16;
  uint64_t *AlignedAndAddCleanup;
  std::string *v18;
  uint64_t v19;
  std::string *v20;
  std::string *v21;
  std::string *v22;
  int *v23;
  uint64_t v24;
  int v25;
  uint64_t result;
  char v27;
  std::string v28[2];

  v11 = google::protobuf::internal::ExtensionSet::Insert(this, a2);
  v12 = v11;
  v11[2] = (uint64_t *)&a6->MangledTypeName;
  if (v13)
  {
    *((_BYTE *)v11 + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v14 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v14->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
    }
    if (google::protobuf::internal::WireFormatLite::kFieldTypeToCppTypeMap[a3] != 3)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 350);
      v15 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_UINT32): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v15->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
    }
    *((_BYTE *)v12 + 9) = 1;
    *((_BYTE *)v12 + 11) = a4;
    v16 = *(_QWORD *)this;
    if (*(_QWORD *)this)
    {
      if ((*(_BYTE *)(v16 + 24) & 1) != 0)
      AlignedAndAddCleanup = (uint64_t *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((google::protobuf::internal::ArenaImpl *)v16, (google::protobuf::internal::SerialArena::Block *)0x10, (void (*)(void *))google::protobuf::internal::arena_destruct_object<google::protobuf::RepeatedField<unsigned int>>);
      *AlignedAndAddCleanup = 0;
      AlignedAndAddCleanup[1] = v16;
    }
    else
    {
      AlignedAndAddCleanup = (uint64_t *)operator new();
      *AlignedAndAddCleanup = 0;
      AlignedAndAddCleanup[1] = 0;
    }
    *v12 = AlignedAndAddCleanup;
  }
  else
  {
    if (!*((_BYTE *)v11 + 9))
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 350);
      v18 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (REPEATED_FIELD): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v18->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
    }
    v19 = *((unsigned __int8 *)v12 + 8);
    if ((v19 - 19) <= 0xFFFFFFED)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v20 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v20->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
    }
    if (google::protobuf::internal::WireFormatLite::kFieldTypeToCppTypeMap[v19] != 3)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 350);
      v21 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_UINT32): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v21->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
    }
    if (*((unsigned __int8 *)v12 + 11) != a4)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 350);
      v22 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (extension->is_packed) == (packed): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v22->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
    }
  }
  v23 = (int *)*v12;
  v24 = *v23;
  if ((_DWORD)v24 == v23[1])
  {
    v25 = v24 + 1;
    google::protobuf::RepeatedField<unsigned int>::Reserve(v23, v24 + 1);
    result = google::protobuf::RepeatedField<unsigned int>::elements((uint64_t)v23);
    *(_DWORD *)(result + 4 * v24) = a5;
  }
  else
  {
    result = google::protobuf::RepeatedField<unsigned int>::elements((uint64_t)v23);
    *(_DWORD *)(result + 4 * v24) = a5;
    v25 = v24 + 1;
  }
  *v23 = v25;
  return result;
}

void sub_245C7DBB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::ExtensionSet::SetUInt64(google::protobuf::internal::ExtensionSet *this, int a2, int a3, uint64_t *a4, const FieldDescriptor *a5)
{
  uint64_t **v8;
  uint64_t **v9;
  char v10;
  std::string *v11;
  std::string *v12;
  std::string *v13;
  uint64_t v14;
  std::string *v15;
  std::string *v16;
  char v17;
  std::string v18[2];

  v8 = google::protobuf::internal::ExtensionSet::Insert(this, a2);
  v9 = v8;
  v8[2] = (uint64_t *)&a5->MangledTypeName;
  if (v10)
  {
    *((_BYTE *)v8 + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v11 = google::protobuf::internal::LogMessage::operator<<(v18, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v17, (const char **)&v11->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v18[0].__r_.__value_.__l.__data_);
    }
    if (google::protobuf::internal::WireFormatLite::kFieldTypeToCppTypeMap[a3] != 4)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 351);
      v12 = google::protobuf::internal::LogMessage::operator<<(v18, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_UINT64): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v17, (const char **)&v12->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v18[0].__r_.__value_.__l.__data_);
    }
    *((_BYTE *)v9 + 9) = 0;
  }
  else
  {
    if (*((_BYTE *)v8 + 9))
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 351);
      v13 = google::protobuf::internal::LogMessage::operator<<(v18, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (OPTIONAL_FIELD): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v17, (const char **)&v13->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v18[0].__r_.__value_.__l.__data_);
    }
    v14 = *((unsigned __int8 *)v9 + 8);
    if ((v14 - 19) <= 0xFFFFFFED)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v15 = google::protobuf::internal::LogMessage::operator<<(v18, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v17, (const char **)&v15->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v18[0].__r_.__value_.__l.__data_);
    }
    if (google::protobuf::internal::WireFormatLite::kFieldTypeToCppTypeMap[v14] != 4)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 351);
      v16 = google::protobuf::internal::LogMessage::operator<<(v18, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_UINT64): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v17, (const char **)&v16->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v18[0].__r_.__value_.__l.__data_);
    }
  }
  *((_BYTE *)v9 + 10) &= 0xF0u;
  *v9 = a4;
}

void sub_245C7DDD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::ExtensionSet::AddUInt64(google::protobuf::internal::ExtensionSet *this, int a2, int a3, int a4, uint64_t a5, const FieldDescriptor *a6)
{
  uint64_t **v11;
  uint64_t **v12;
  char v13;
  std::string *v14;
  std::string *v15;
  uint64_t v16;
  uint64_t *AlignedAndAddCleanup;
  std::string *v18;
  uint64_t v19;
  std::string *v20;
  std::string *v21;
  std::string *v22;
  int *v23;
  uint64_t v24;
  int v25;
  uint64_t result;
  char v27;
  std::string v28[2];

  v11 = google::protobuf::internal::ExtensionSet::Insert(this, a2);
  v12 = v11;
  v11[2] = (uint64_t *)&a6->MangledTypeName;
  if (v13)
  {
    *((_BYTE *)v11 + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v14 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v14->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
    }
    if (google::protobuf::internal::WireFormatLite::kFieldTypeToCppTypeMap[a3] != 4)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 351);
      v15 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_UINT64): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v15->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
    }
    *((_BYTE *)v12 + 9) = 1;
    *((_BYTE *)v12 + 11) = a4;
    v16 = *(_QWORD *)this;
    if (*(_QWORD *)this)
    {
      if ((*(_BYTE *)(v16 + 24) & 1) != 0)
      AlignedAndAddCleanup = (uint64_t *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((google::protobuf::internal::ArenaImpl *)v16, (google::protobuf::internal::SerialArena::Block *)0x10, (void (*)(void *))google::protobuf::internal::arena_destruct_object<google::protobuf::RepeatedField<unsigned long long>>);
      *AlignedAndAddCleanup = 0;
      AlignedAndAddCleanup[1] = v16;
    }
    else
    {
      AlignedAndAddCleanup = (uint64_t *)operator new();
      *AlignedAndAddCleanup = 0;
      AlignedAndAddCleanup[1] = 0;
    }
    *v12 = AlignedAndAddCleanup;
  }
  else
  {
    if (!*((_BYTE *)v11 + 9))
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 351);
      v18 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (REPEATED_FIELD): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v18->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
    }
    v19 = *((unsigned __int8 *)v12 + 8);
    if ((v19 - 19) <= 0xFFFFFFED)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v20 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v20->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
    }
    if (google::protobuf::internal::WireFormatLite::kFieldTypeToCppTypeMap[v19] != 4)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 351);
      v21 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_UINT64): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v21->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
    }
    if (*((unsigned __int8 *)v12 + 11) != a4)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 351);
      v22 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (extension->is_packed) == (packed): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v22->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
    }
  }
  v23 = (int *)*v12;
  v24 = *v23;
  if ((_DWORD)v24 == v23[1])
  {
    v25 = v24 + 1;
    google::protobuf::RepeatedField<unsigned long long>::Reserve(v23, v24 + 1);
    result = google::protobuf::RepeatedField<unsigned long long>::elements((uint64_t)v23);
    *(_QWORD *)(result + 8 * v24) = a5;
  }
  else
  {
    result = google::protobuf::RepeatedField<unsigned long long>::elements((uint64_t)v23);
    *(_QWORD *)(result + 8 * v24) = a5;
    v25 = v24 + 1;
  }
  *v23 = v25;
  return result;
}

void sub_245C7E0E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::ExtensionSet::SetFloat(google::protobuf::internal::ExtensionSet *this, int a2, int a3, float a4, const FieldDescriptor *a5)
{
  uint64_t **v8;
  uint64_t **v9;
  char v10;
  std::string *v11;
  std::string *v12;
  std::string *v13;
  uint64_t v14;
  std::string *v15;
  std::string *v16;
  char v17;
  std::string v18[2];

  v8 = google::protobuf::internal::ExtensionSet::Insert(this, a2);
  v9 = v8;
  v8[2] = (uint64_t *)&a5->MangledTypeName;
  if (v10)
  {
    *((_BYTE *)v8 + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v11 = google::protobuf::internal::LogMessage::operator<<(v18, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v17, (const char **)&v11->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v18[0].__r_.__value_.__l.__data_);
    }
    if (google::protobuf::internal::WireFormatLite::kFieldTypeToCppTypeMap[a3] != 6)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 352);
      v12 = google::protobuf::internal::LogMessage::operator<<(v18, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_FLOAT): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v17, (const char **)&v12->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v18[0].__r_.__value_.__l.__data_);
    }
    *((_BYTE *)v9 + 9) = 0;
  }
  else
  {
    if (*((_BYTE *)v8 + 9))
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 352);
      v13 = google::protobuf::internal::LogMessage::operator<<(v18, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (OPTIONAL_FIELD): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v17, (const char **)&v13->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v18[0].__r_.__value_.__l.__data_);
    }
    v14 = *((unsigned __int8 *)v9 + 8);
    if ((v14 - 19) <= 0xFFFFFFED)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v15 = google::protobuf::internal::LogMessage::operator<<(v18, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v17, (const char **)&v15->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v18[0].__r_.__value_.__l.__data_);
    }
    if (google::protobuf::internal::WireFormatLite::kFieldTypeToCppTypeMap[v14] != 6)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 352);
      v16 = google::protobuf::internal::LogMessage::operator<<(v18, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_FLOAT): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v17, (const char **)&v16->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v18[0].__r_.__value_.__l.__data_);
    }
  }
  *((_BYTE *)v9 + 10) &= 0xF0u;
  *(float *)v9 = a4;
}

void sub_245C7E30C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::ExtensionSet::AddFloat(google::protobuf::internal::ExtensionSet *this, int a2, int a3, int a4, float a5, const FieldDescriptor *a6)
{
  uint64_t **v11;
  uint64_t **v12;
  char v13;
  std::string *v14;
  std::string *v15;
  uint64_t v16;
  uint64_t *AlignedAndAddCleanup;
  std::string *v18;
  uint64_t v19;
  std::string *v20;
  std::string *v21;
  std::string *v22;
  int *v23;
  uint64_t v24;
  int v25;
  uint64_t result;
  char v27;
  std::string v28[2];

  v11 = google::protobuf::internal::ExtensionSet::Insert(this, a2);
  v12 = v11;
  v11[2] = (uint64_t *)&a6->MangledTypeName;
  if (v13)
  {
    *((_BYTE *)v11 + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v14 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v14->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
    }
    if (google::protobuf::internal::WireFormatLite::kFieldTypeToCppTypeMap[a3] != 6)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 352);
      v15 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_FLOAT): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v15->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
    }
    *((_BYTE *)v12 + 9) = 1;
    *((_BYTE *)v12 + 11) = a4;
    v16 = *(_QWORD *)this;
    if (*(_QWORD *)this)
    {
      if ((*(_BYTE *)(v16 + 24) & 1) != 0)
      AlignedAndAddCleanup = (uint64_t *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((google::protobuf::internal::ArenaImpl *)v16, (google::protobuf::internal::SerialArena::Block *)0x10, (void (*)(void *))google::protobuf::internal::arena_destruct_object<google::protobuf::RepeatedField<float>>);
      *AlignedAndAddCleanup = 0;
      AlignedAndAddCleanup[1] = v16;
    }
    else
    {
      AlignedAndAddCleanup = (uint64_t *)operator new();
      *AlignedAndAddCleanup = 0;
      AlignedAndAddCleanup[1] = 0;
    }
    *v12 = AlignedAndAddCleanup;
  }
  else
  {
    if (!*((_BYTE *)v11 + 9))
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 352);
      v18 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (REPEATED_FIELD): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v18->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
    }
    v19 = *((unsigned __int8 *)v12 + 8);
    if ((v19 - 19) <= 0xFFFFFFED)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v20 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v20->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
    }
    if (google::protobuf::internal::WireFormatLite::kFieldTypeToCppTypeMap[v19] != 6)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 352);
      v21 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_FLOAT): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v21->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
    }
    if (*((unsigned __int8 *)v12 + 11) != a4)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 352);
      v22 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (extension->is_packed) == (packed): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v22->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
    }
  }
  v23 = (int *)*v12;
  v24 = *v23;
  if ((_DWORD)v24 == v23[1])
  {
    v25 = v24 + 1;
    google::protobuf::RepeatedField<float>::Reserve(v23, v24 + 1);
    result = google::protobuf::RepeatedField<float>::elements((uint64_t)v23);
    *(float *)(result + 4 * v24) = a5;
  }
  else
  {
    result = google::protobuf::RepeatedField<float>::elements((uint64_t)v23);
    *(float *)(result + 4 * v24) = a5;
    v25 = v24 + 1;
  }
  *v23 = v25;
  return result;
}

void sub_245C7E62C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::ExtensionSet::SetDouble(google::protobuf::internal::ExtensionSet *this, int a2, int a3, double a4, const FieldDescriptor *a5)
{
  uint64_t **v8;
  uint64_t **v9;
  char v10;
  std::string *v11;
  std::string *v12;
  std::string *v13;
  uint64_t v14;
  std::string *v15;
  std::string *v16;
  char v17;
  std::string v18[2];

  v8 = google::protobuf::internal::ExtensionSet::Insert(this, a2);
  v9 = v8;
  v8[2] = (uint64_t *)&a5->MangledTypeName;
  if (v10)
  {
    *((_BYTE *)v8 + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v11 = google::protobuf::internal::LogMessage::operator<<(v18, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v17, (const char **)&v11->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v18[0].__r_.__value_.__l.__data_);
    }
    if (google::protobuf::internal::WireFormatLite::kFieldTypeToCppTypeMap[a3] != 5)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 353);
      v12 = google::protobuf::internal::LogMessage::operator<<(v18, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_DOUBLE): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v17, (const char **)&v12->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v18[0].__r_.__value_.__l.__data_);
    }
    *((_BYTE *)v9 + 9) = 0;
  }
  else
  {
    if (*((_BYTE *)v8 + 9))
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 353);
      v13 = google::protobuf::internal::LogMessage::operator<<(v18, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (OPTIONAL_FIELD): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v17, (const char **)&v13->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v18[0].__r_.__value_.__l.__data_);
    }
    v14 = *((unsigned __int8 *)v9 + 8);
    if ((v14 - 19) <= 0xFFFFFFED)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v15 = google::protobuf::internal::LogMessage::operator<<(v18, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v17, (const char **)&v15->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v18[0].__r_.__value_.__l.__data_);
    }
    if (google::protobuf::internal::WireFormatLite::kFieldTypeToCppTypeMap[v14] != 5)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 353);
      v16 = google::protobuf::internal::LogMessage::operator<<(v18, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_DOUBLE): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v17, (const char **)&v16->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v18[0].__r_.__value_.__l.__data_);
    }
  }
  *((_BYTE *)v9 + 10) &= 0xF0u;
  *(double *)v9 = a4;
}

void sub_245C7E850(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::ExtensionSet::AddDouble(google::protobuf::internal::ExtensionSet *this, int a2, int a3, int a4, double a5, const FieldDescriptor *a6)
{
  uint64_t **v11;
  uint64_t **v12;
  char v13;
  std::string *v14;
  std::string *v15;
  uint64_t v16;
  uint64_t *AlignedAndAddCleanup;
  std::string *v18;
  uint64_t v19;
  std::string *v20;
  std::string *v21;
  std::string *v22;
  int *v23;
  uint64_t v24;
  int v25;
  uint64_t result;
  char v27;
  std::string v28[2];

  v11 = google::protobuf::internal::ExtensionSet::Insert(this, a2);
  v12 = v11;
  v11[2] = (uint64_t *)&a6->MangledTypeName;
  if (v13)
  {
    *((_BYTE *)v11 + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v14 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v14->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
    }
    if (google::protobuf::internal::WireFormatLite::kFieldTypeToCppTypeMap[a3] != 5)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 353);
      v15 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_DOUBLE): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v15->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
    }
    *((_BYTE *)v12 + 9) = 1;
    *((_BYTE *)v12 + 11) = a4;
    v16 = *(_QWORD *)this;
    if (*(_QWORD *)this)
    {
      if ((*(_BYTE *)(v16 + 24) & 1) != 0)
      AlignedAndAddCleanup = (uint64_t *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((google::protobuf::internal::ArenaImpl *)v16, (google::protobuf::internal::SerialArena::Block *)0x10, (void (*)(void *))google::protobuf::internal::arena_destruct_object<google::protobuf::RepeatedField<double>>);
      *AlignedAndAddCleanup = 0;
      AlignedAndAddCleanup[1] = v16;
    }
    else
    {
      AlignedAndAddCleanup = (uint64_t *)operator new();
      *AlignedAndAddCleanup = 0;
      AlignedAndAddCleanup[1] = 0;
    }
    *v12 = AlignedAndAddCleanup;
  }
  else
  {
    if (!*((_BYTE *)v11 + 9))
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 353);
      v18 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (REPEATED_FIELD): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v18->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
    }
    v19 = *((unsigned __int8 *)v12 + 8);
    if ((v19 - 19) <= 0xFFFFFFED)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v20 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v20->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
    }
    if (google::protobuf::internal::WireFormatLite::kFieldTypeToCppTypeMap[v19] != 5)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 353);
      v21 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_DOUBLE): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v21->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
    }
    if (*((unsigned __int8 *)v12 + 11) != a4)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 353);
      v22 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (extension->is_packed) == (packed): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v22->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
    }
  }
  v23 = (int *)*v12;
  v24 = *v23;
  if ((_DWORD)v24 == v23[1])
  {
    v25 = v24 + 1;
    google::protobuf::RepeatedField<double>::Reserve(v23, v24 + 1);
    result = google::protobuf::RepeatedField<double>::elements((uint64_t)v23);
    *(double *)(result + 8 * v24) = a5;
  }
  else
  {
    result = google::protobuf::RepeatedField<double>::elements((uint64_t)v23);
    *(double *)(result + 8 * v24) = a5;
    v25 = v24 + 1;
  }
  *v23 = v25;
  return result;
}

void sub_245C7EB70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::ExtensionSet::SetBool(google::protobuf::internal::ExtensionSet *this, int a2, int a3, char a4, const FieldDescriptor *a5)
{
  uint64_t **v8;
  _BYTE *v9;
  char v10;
  std::string *v11;
  std::string *v12;
  std::string *v13;
  uint64_t v14;
  std::string *v15;
  std::string *v16;
  char v17;
  std::string v18[2];

  v8 = google::protobuf::internal::ExtensionSet::Insert(this, a2);
  v9 = v8;
  v8[2] = (uint64_t *)&a5->MangledTypeName;
  if (v10)
  {
    *((_BYTE *)v8 + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v11 = google::protobuf::internal::LogMessage::operator<<(v18, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v17, (const char **)&v11->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v18[0].__r_.__value_.__l.__data_);
    }
    if (google::protobuf::internal::WireFormatLite::kFieldTypeToCppTypeMap[a3] != 7)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 354);
      v12 = google::protobuf::internal::LogMessage::operator<<(v18, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_BOOL): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v17, (const char **)&v12->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v18[0].__r_.__value_.__l.__data_);
    }
    v9[9] = 0;
  }
  else
  {
    if (*((_BYTE *)v8 + 9))
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 354);
      v13 = google::protobuf::internal::LogMessage::operator<<(v18, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (OPTIONAL_FIELD): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v17, (const char **)&v13->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v18[0].__r_.__value_.__l.__data_);
    }
    v14 = v9[8];
    if ((v14 - 19) <= 0xFFFFFFED)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v15 = google::protobuf::internal::LogMessage::operator<<(v18, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v17, (const char **)&v15->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v18[0].__r_.__value_.__l.__data_);
    }
    if (google::protobuf::internal::WireFormatLite::kFieldTypeToCppTypeMap[v14] != 7)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 354);
      v16 = google::protobuf::internal::LogMessage::operator<<(v18, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_BOOL): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v17, (const char **)&v16->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v18[0].__r_.__value_.__l.__data_);
    }
  }
  v9[10] &= 0xF0u;
  *v9 = a4;
}

void sub_245C7ED8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::ExtensionSet::AddBool(google::protobuf::internal::ExtensionSet *this, int a2, int a3, int a4, char a5, const FieldDescriptor *a6)
{
  uint64_t **v11;
  uint64_t **v12;
  char v13;
  std::string *v14;
  std::string *v15;
  uint64_t v16;
  uint64_t *AlignedAndAddCleanup;
  std::string *v18;
  uint64_t v19;
  std::string *v20;
  std::string *v21;
  std::string *v22;
  int *v23;
  uint64_t v24;
  int v25;
  uint64_t result;
  char v27;
  std::string v28[2];

  v11 = google::protobuf::internal::ExtensionSet::Insert(this, a2);
  v12 = v11;
  v11[2] = (uint64_t *)&a6->MangledTypeName;
  if (v13)
  {
    *((_BYTE *)v11 + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v14 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v14->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
    }
    if (google::protobuf::internal::WireFormatLite::kFieldTypeToCppTypeMap[a3] != 7)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 354);
      v15 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_BOOL): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v15->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
    }
    *((_BYTE *)v12 + 9) = 1;
    *((_BYTE *)v12 + 11) = a4;
    v16 = *(_QWORD *)this;
    if (*(_QWORD *)this)
    {
      if ((*(_BYTE *)(v16 + 24) & 1) != 0)
      AlignedAndAddCleanup = (uint64_t *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((google::protobuf::internal::ArenaImpl *)v16, (google::protobuf::internal::SerialArena::Block *)0x10, (void (*)(void *))google::protobuf::internal::arena_destruct_object<google::protobuf::RepeatedField<BOOL>>);
      *AlignedAndAddCleanup = 0;
      AlignedAndAddCleanup[1] = v16;
    }
    else
    {
      AlignedAndAddCleanup = (uint64_t *)operator new();
      *AlignedAndAddCleanup = 0;
      AlignedAndAddCleanup[1] = 0;
    }
    *v12 = AlignedAndAddCleanup;
  }
  else
  {
    if (!*((_BYTE *)v11 + 9))
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 354);
      v18 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (REPEATED_FIELD): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v18->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
    }
    v19 = *((unsigned __int8 *)v12 + 8);
    if ((v19 - 19) <= 0xFFFFFFED)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v20 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v20->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
    }
    if (google::protobuf::internal::WireFormatLite::kFieldTypeToCppTypeMap[v19] != 7)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 354);
      v21 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_BOOL): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v21->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
    }
    if (*((unsigned __int8 *)v12 + 11) != a4)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 354);
      v22 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (extension->is_packed) == (packed): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v22->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
    }
  }
  v23 = (int *)*v12;
  v24 = *v23;
  if ((_DWORD)v24 == v23[1])
  {
    v25 = v24 + 1;
    google::protobuf::RepeatedField<BOOL>::Reserve(v23, v24 + 1);
    result = google::protobuf::RepeatedField<BOOL>::elements((uint64_t)v23);
    *(_BYTE *)(result + v24) = a5;
  }
  else
  {
    result = google::protobuf::RepeatedField<BOOL>::elements((uint64_t)v23);
    *(_BYTE *)(result + v24) = a5;
    v25 = v24 + 1;
  }
  *v23 = v25;
  return result;
}

void sub_245C7F0A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t *google::protobuf::internal::ExtensionSet::MutableRawRepeatedField(google::protobuf::internal::ExtensionSet *this, int a2, int a3, char a4, const FieldDescriptor *a5)
{
  uint64_t **v9;
  uint64_t **v10;
  char v11;
  uint64_t v12;
  void (*v13)(void *);
  uint64_t *AlignedAndAddCleanup;
  uint64_t v15;
  void (*v16)(void *);

  v9 = google::protobuf::internal::ExtensionSet::Insert(this, a2);
  v10 = v9;
  v9[2] = (uint64_t *)&a5->MangledTypeName;
  if (v11)
  {
    *((_BYTE *)v9 + 9) = 1;
    *((_BYTE *)v9 + 8) = a3;
    *((_BYTE *)v9 + 11) = a4;
    switch(a3)
    {
      case 1:
        v12 = *(_QWORD *)this;
        if (!v12)
          goto LABEL_32;
        if ((*(_BYTE *)(v12 + 24) & 1) != 0)
        v13 = (void (*)(void *))google::protobuf::internal::arena_destruct_object<google::protobuf::RepeatedField<double>>;
        goto LABEL_31;
      case 2:
        v12 = *(_QWORD *)this;
        if (!v12)
          goto LABEL_32;
        if ((*(_BYTE *)(v12 + 24) & 1) != 0)
        v13 = (void (*)(void *))google::protobuf::internal::arena_destruct_object<google::protobuf::RepeatedField<float>>;
        goto LABEL_31;
      case 3:
      case 16:
      case 18:
        v12 = *(_QWORD *)this;
        if (!v12)
          goto LABEL_32;
        if ((*(_BYTE *)(v12 + 24) & 1) != 0)
        v13 = (void (*)(void *))google::protobuf::internal::arena_destruct_object<google::protobuf::RepeatedField<long long>>;
        goto LABEL_31;
      case 4:
      case 6:
        v12 = *(_QWORD *)this;
        if (!v12)
          goto LABEL_32;
        if ((*(_BYTE *)(v12 + 24) & 1) != 0)
        v13 = (void (*)(void *))google::protobuf::internal::arena_destruct_object<google::protobuf::RepeatedField<unsigned long long>>;
        goto LABEL_31;
      case 5:
      case 14:
      case 15:
      case 17:
        v12 = *(_QWORD *)this;
        if (!v12)
          goto LABEL_32;
        if ((*(_BYTE *)(v12 + 24) & 1) != 0)
        v13 = (void (*)(void *))google::protobuf::internal::arena_destruct_object<google::protobuf::RepeatedField<int>>;
        goto LABEL_31;
      case 7:
      case 13:
        v12 = *(_QWORD *)this;
        if (!v12)
          goto LABEL_32;
        if ((*(_BYTE *)(v12 + 24) & 1) != 0)
        v13 = (void (*)(void *))google::protobuf::internal::arena_destruct_object<google::protobuf::RepeatedField<unsigned int>>;
        goto LABEL_31;
      case 8:
        v12 = *(_QWORD *)this;
        if (v12)
        {
          if ((*(_BYTE *)(v12 + 24) & 1) != 0)
          v13 = (void (*)(void *))google::protobuf::internal::arena_destruct_object<google::protobuf::RepeatedField<BOOL>>;
LABEL_31:
          AlignedAndAddCleanup = (uint64_t *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((google::protobuf::internal::ArenaImpl *)v12, (google::protobuf::internal::SerialArena::Block *)0x10, v13);
          *AlignedAndAddCleanup = 0;
          AlignedAndAddCleanup[1] = v12;
        }
        else
        {
LABEL_32:
          AlignedAndAddCleanup = (uint64_t *)operator new();
          *AlignedAndAddCleanup = 0;
          AlignedAndAddCleanup[1] = 0;
        }
        goto LABEL_44;
      case 9:
      case 12:
        v15 = *(_QWORD *)this;
        if (!v15)
          goto LABEL_42;
        if ((*(_BYTE *)(v15 + 24) & 1) != 0)
        v16 = (void (*)(void *))google::protobuf::internal::arena_destruct_object<google::protobuf::RepeatedPtrField<std::string>>;
        goto LABEL_41;
      case 10:
      case 11:
        v15 = *(_QWORD *)this;
        if (v15)
        {
          if ((*(_BYTE *)(v15 + 24) & 1) != 0)
          v16 = (void (*)(void *))google::protobuf::internal::arena_destruct_object<google::protobuf::RepeatedPtrField<google::protobuf::MessageLite>>;
LABEL_41:
          AlignedAndAddCleanup = (uint64_t *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((google::protobuf::internal::ArenaImpl *)v15, (google::protobuf::internal::SerialArena::Block *)0x18, v16);
          AlignedAndAddCleanup[2] = 0;
          *AlignedAndAddCleanup = v15;
        }
        else
        {
LABEL_42:
          AlignedAndAddCleanup = (uint64_t *)operator new();
          AlignedAndAddCleanup[2] = 0;
          *AlignedAndAddCleanup = 0;
        }
        AlignedAndAddCleanup[1] = 0;
LABEL_44:
        *v10 = AlignedAndAddCleanup;
        break;
      default:
        return *v10;
    }
  }
  return *v10;
}

void google::protobuf::internal::ExtensionSet::SetEnum(google::protobuf::internal::ExtensionSet *this, int a2, int a3, int a4, const FieldDescriptor *a5)
{
  uint64_t **v8;
  uint64_t **v9;
  char v10;
  std::string *v11;
  std::string *v12;
  std::string *v13;
  uint64_t v14;
  std::string *v15;
  std::string *v16;
  char v17;
  std::string v18[2];

  v8 = google::protobuf::internal::ExtensionSet::Insert(this, a2);
  v9 = v8;
  v8[2] = (uint64_t *)&a5->MangledTypeName;
  if (v10)
  {
    *((_BYTE *)v8 + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v11 = google::protobuf::internal::LogMessage::operator<<(v18, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v17, (const char **)&v11->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v18[0].__r_.__value_.__l.__data_);
    }
    if (google::protobuf::internal::WireFormatLite::kFieldTypeToCppTypeMap[a3] != 8)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 460);
      v12 = google::protobuf::internal::LogMessage::operator<<(v18, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_ENUM): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v17, (const char **)&v12->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v18[0].__r_.__value_.__l.__data_);
    }
    *((_BYTE *)v9 + 9) = 0;
  }
  else
  {
    if (*((_BYTE *)v8 + 9))
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 463);
      v13 = google::protobuf::internal::LogMessage::operator<<(v18, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (OPTIONAL_FIELD): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v17, (const char **)&v13->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v18[0].__r_.__value_.__l.__data_);
    }
    v14 = *((unsigned __int8 *)v9 + 8);
    if ((v14 - 19) <= 0xFFFFFFED)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v15 = google::protobuf::internal::LogMessage::operator<<(v18, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v17, (const char **)&v15->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v18[0].__r_.__value_.__l.__data_);
    }
    if (google::protobuf::internal::WireFormatLite::kFieldTypeToCppTypeMap[v14] != 8)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 463);
      v16 = google::protobuf::internal::LogMessage::operator<<(v18, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_ENUM): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v17, (const char **)&v16->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v18[0].__r_.__value_.__l.__data_);
    }
  }
  *((_BYTE *)v9 + 10) &= 0xF0u;
  *(_DWORD *)v9 = a4;
}

void sub_245C7F5FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::ExtensionSet::AddEnum(google::protobuf::internal::ExtensionSet *this, int a2, int a3, int a4, int a5, const FieldDescriptor *a6)
{
  uint64_t **v11;
  uint64_t **v12;
  char v13;
  std::string *v14;
  std::string *v15;
  uint64_t v16;
  uint64_t *AlignedAndAddCleanup;
  std::string *v18;
  uint64_t v19;
  std::string *v20;
  std::string *v21;
  std::string *v22;
  int *v23;
  uint64_t v24;
  int v25;
  uint64_t result;
  char v27;
  std::string v28[2];

  v11 = google::protobuf::internal::ExtensionSet::Insert(this, a2);
  v12 = v11;
  v11[2] = (uint64_t *)&a6->MangledTypeName;
  if (v13)
  {
    *((_BYTE *)v11 + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v14 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v14->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
    }
    if (google::protobuf::internal::WireFormatLite::kFieldTypeToCppTypeMap[a3] != 8)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 488);
      v15 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_ENUM): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v15->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
    }
    *((_BYTE *)v12 + 9) = 1;
    *((_BYTE *)v12 + 11) = a4;
    v16 = *(_QWORD *)this;
    if (*(_QWORD *)this)
    {
      if ((*(_BYTE *)(v16 + 24) & 1) != 0)
      AlignedAndAddCleanup = (uint64_t *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((google::protobuf::internal::ArenaImpl *)v16, (google::protobuf::internal::SerialArena::Block *)0x10, (void (*)(void *))google::protobuf::internal::arena_destruct_object<google::protobuf::RepeatedField<int>>);
      *AlignedAndAddCleanup = 0;
      AlignedAndAddCleanup[1] = v16;
    }
    else
    {
      AlignedAndAddCleanup = (uint64_t *)operator new();
      *AlignedAndAddCleanup = 0;
      AlignedAndAddCleanup[1] = 0;
    }
    *v12 = AlignedAndAddCleanup;
  }
  else
  {
    if (!*((_BYTE *)v11 + 9))
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 494);
      v18 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (REPEATED_FIELD): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v18->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
    }
    v19 = *((unsigned __int8 *)v12 + 8);
    if ((v19 - 19) <= 0xFFFFFFED)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v20 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v20->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
    }
    if (google::protobuf::internal::WireFormatLite::kFieldTypeToCppTypeMap[v19] != 8)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 494);
      v21 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_ENUM): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v21->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
    }
    if (*((unsigned __int8 *)v12 + 11) != a4)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 495);
      v22 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (extension->is_packed) == (packed): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v22->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
    }
  }
  v23 = (int *)*v12;
  v24 = *v23;
  if ((_DWORD)v24 == v23[1])
  {
    v25 = v24 + 1;
    google::protobuf::RepeatedField<int>::Reserve(v23, v24 + 1);
    result = google::protobuf::RepeatedField<int>::elements((uint64_t)v23);
    *(_DWORD *)(result + 4 * v24) = a5;
  }
  else
  {
    result = google::protobuf::RepeatedField<int>::elements((uint64_t)v23);
    *(_DWORD *)(result + 4 * v24) = a5;
    v25 = v24 + 1;
  }
  *v23 = v25;
  return result;
}

void sub_245C7F914(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::ExtensionSet::MutableString(google::protobuf::internal::ExtensionSet *this, int a2, int a3, const FieldDescriptor *a4)
{
  uint64_t **v7;
  unsigned __int8 *v8;
  char v9;
  std::string *v10;
  std::string *v11;
  uint64_t v12;
  _QWORD *AlignedAndAddCleanup;
  std::string *v14;
  uint64_t v15;
  std::string *v16;
  std::string *v17;
  char v19;
  std::string v20[2];

  v7 = google::protobuf::internal::ExtensionSet::Insert(this, a2);
  v8 = (unsigned __int8 *)v7;
  v7[2] = (uint64_t *)&a4->MangledTypeName;
  if (v9)
  {
    *((_BYTE *)v7 + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v20, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v10 = google::protobuf::internal::LogMessage::operator<<(v20, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v19, (const char **)&v10->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v20[0].__r_.__value_.__l.__data_);
    }
    if (google::protobuf::internal::WireFormatLite::kFieldTypeToCppTypeMap[a3] != 9)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v20, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 520);
      v11 = google::protobuf::internal::LogMessage::operator<<(v20, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_STRING): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v19, (const char **)&v11->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v20[0].__r_.__value_.__l.__data_);
    }
    v8[9] = 0;
    v12 = *(_QWORD *)this;
    if (v12)
    {
      if ((*(_BYTE *)(v12 + 24) & 1) != 0)
      AlignedAndAddCleanup = google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((google::protobuf::internal::ArenaImpl *)v12, (google::protobuf::internal::SerialArena::Block *)0x18, (void (*)(void *))google::protobuf::internal::arena_destruct_object<std::string>);
    }
    else
    {
      AlignedAndAddCleanup = (_QWORD *)operator new();
    }
    *AlignedAndAddCleanup = 0;
    AlignedAndAddCleanup[1] = 0;
    AlignedAndAddCleanup[2] = 0;
    *(_QWORD *)v8 = AlignedAndAddCleanup;
  }
  else
  {
    if (*((_BYTE *)v7 + 9))
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v20, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 524);
      v14 = google::protobuf::internal::LogMessage::operator<<(v20, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (OPTIONAL_FIELD): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v19, (const char **)&v14->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v20[0].__r_.__value_.__l.__data_);
    }
    v15 = v8[8];
    if ((v15 - 19) <= 0xFFFFFFED)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v20, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v16 = google::protobuf::internal::LogMessage::operator<<(v20, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v19, (const char **)&v16->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v20[0].__r_.__value_.__l.__data_);
    }
    if (google::protobuf::internal::WireFormatLite::kFieldTypeToCppTypeMap[v15] != 9)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v20, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 524);
      v17 = google::protobuf::internal::LogMessage::operator<<(v20, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_STRING): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v19, (const char **)&v17->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v20[0].__r_.__value_.__l.__data_);
    }
  }
  v8[10] &= 0xF0u;
  return *(_QWORD *)v8;
}

void sub_245C7FBA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

_QWORD *google::protobuf::internal::ExtensionSet::AddString(google::protobuf::internal::ExtensionSet *this, int a2, int a3, const FieldDescriptor *a4)
{
  uint64_t **v7;
  uint64_t **v8;
  char v9;
  std::string *v10;
  std::string *v11;
  uint64_t v12;
  uint64_t *AlignedAndAddCleanup;
  std::string *v14;
  uint64_t v15;
  std::string *v16;
  std::string *v17;
  uint64_t *v18;
  int *v19;
  uint64_t v20;
  int v21;
  _QWORD *result;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  std::string v27[2];

  v7 = google::protobuf::internal::ExtensionSet::Insert(this, a2);
  v8 = v7;
  v7[2] = (uint64_t *)&a4->MangledTypeName;
  if (v9)
  {
    *((_BYTE *)v7 + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v27, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v10 = google::protobuf::internal::LogMessage::operator<<(v27, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v26, (const char **)&v10->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v27[0].__r_.__value_.__l.__data_);
    }
    if (google::protobuf::internal::WireFormatLite::kFieldTypeToCppTypeMap[a3] != 9)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v27, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 550);
      v11 = google::protobuf::internal::LogMessage::operator<<(v27, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_STRING): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v26, (const char **)&v11->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v27[0].__r_.__value_.__l.__data_);
    }
    *((_BYTE *)v8 + 9) = 1;
    *((_BYTE *)v8 + 11) = 0;
    v12 = *(_QWORD *)this;
    if (v12)
    {
      if ((*(_BYTE *)(v12 + 24) & 1) != 0)
      AlignedAndAddCleanup = (uint64_t *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((google::protobuf::internal::ArenaImpl *)v12, (google::protobuf::internal::SerialArena::Block *)0x18, (void (*)(void *))google::protobuf::internal::arena_destruct_object<google::protobuf::RepeatedPtrField<std::string>>);
      AlignedAndAddCleanup[2] = 0;
      *AlignedAndAddCleanup = v12;
    }
    else
    {
      AlignedAndAddCleanup = (uint64_t *)operator new();
      AlignedAndAddCleanup[2] = 0;
      *AlignedAndAddCleanup = 0;
    }
    AlignedAndAddCleanup[1] = 0;
    *v8 = AlignedAndAddCleanup;
  }
  else
  {
    if (!*((_BYTE *)v7 + 9))
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v27, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 556);
      v14 = google::protobuf::internal::LogMessage::operator<<(v27, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (REPEATED_FIELD): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v26, (const char **)&v14->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v27[0].__r_.__value_.__l.__data_);
    }
    v15 = *((unsigned __int8 *)v8 + 8);
    if ((v15 - 19) <= 0xFFFFFFED)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v27, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v16 = google::protobuf::internal::LogMessage::operator<<(v27, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v26, (const char **)&v16->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v27[0].__r_.__value_.__l.__data_);
    }
    if (google::protobuf::internal::WireFormatLite::kFieldTypeToCppTypeMap[v15] != 9)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v27, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 556);
      v17 = google::protobuf::internal::LogMessage::operator<<(v27, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_STRING): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v26, (const char **)&v17->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v27[0].__r_.__value_.__l.__data_);
    }
  }
  v18 = *v8;
  v19 = (int *)v18[2];
  if (!v19)
  {
    v21 = *((_DWORD *)v18 + 3);
LABEL_23:
    google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)v18, v21 + 1);
    v19 = (int *)v18[2];
    v21 = *v19;
    goto LABEL_24;
  }
  v20 = *((int *)v18 + 2);
  v21 = *v19;
  if ((int)v20 < *v19)
  {
    *((_DWORD *)v18 + 2) = v20 + 1;
    return *(_QWORD **)&v19[2 * v20 + 2];
  }
  if (v21 == *((_DWORD *)v18 + 3))
    goto LABEL_23;
LABEL_24:
  *v19 = v21 + 1;
  v23 = *v18;
  if (*v18)
  {
    if ((*(_BYTE *)(v23 + 24) & 1) != 0)
    result = google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((google::protobuf::internal::ArenaImpl *)v23, (google::protobuf::internal::SerialArena::Block *)0x18, (void (*)(void *))google::protobuf::internal::arena_destruct_object<std::string>);
  }
  else
  {
    result = (_QWORD *)operator new();
  }
  *result = 0;
  result[1] = 0;
  result[2] = 0;
  v24 = v18[2];
  v25 = *((int *)v18 + 2);
  *((_DWORD *)v18 + 2) = v25 + 1;
  *(_QWORD *)(v24 + 8 * v25 + 8) = result;
  return result;
}

void sub_245C7FF0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t *google::protobuf::internal::ExtensionSet::MutableMessage(google::protobuf::internal::ExtensionSet *this, int a2, int a3, const google::protobuf::MessageLite *a4, const FieldDescriptor *a5)
{
  uint64_t **v9;
  uint64_t **v10;
  char v11;
  std::string *v12;
  std::string *v13;
  uint64_t *result;
  std::string *v15;
  uint64_t v16;
  std::string *v17;
  std::string *v18;
  char v19;
  char v20;
  std::string v21[2];

  v9 = google::protobuf::internal::ExtensionSet::Insert(this, a2);
  v10 = v9;
  v9[2] = (uint64_t *)&a5->MangledTypeName;
  if (v11)
  {
    *((_BYTE *)v9 + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v21, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v12 = google::protobuf::internal::LogMessage::operator<<(v21, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v20, (const char **)&v12->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v21[0].__r_.__value_.__l.__data_);
    }
    if (google::protobuf::internal::WireFormatLite::kFieldTypeToCppTypeMap[a3] != 10)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v21, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 591);
      v13 = google::protobuf::internal::LogMessage::operator<<(v21, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_MESSAGE): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v20, (const char **)&v13->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v21[0].__r_.__value_.__l.__data_);
    }
    *((_BYTE *)v10 + 9) = 0;
    *((_BYTE *)v10 + 10) &= 0xFu;
    result = (uint64_t *)(*(uint64_t (**)(const google::protobuf::MessageLite *, _QWORD))(*(_QWORD *)a4 + 32))(a4, *(_QWORD *)this);
    *v10 = result;
    *((_BYTE *)v10 + 10) &= 0xF0u;
  }
  else
  {
    if (*((_BYTE *)v9 + 9))
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v21, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 598);
      v15 = google::protobuf::internal::LogMessage::operator<<(v21, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (OPTIONAL_FIELD): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v20, (const char **)&v15->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v21[0].__r_.__value_.__l.__data_);
    }
    v16 = *((unsigned __int8 *)v10 + 8);
    if ((v16 - 19) <= 0xFFFFFFED)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v21, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v17 = google::protobuf::internal::LogMessage::operator<<(v21, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v20, (const char **)&v17->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v21[0].__r_.__value_.__l.__data_);
    }
    if (google::protobuf::internal::WireFormatLite::kFieldTypeToCppTypeMap[v16] != 10)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v21, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 598);
      v18 = google::protobuf::internal::LogMessage::operator<<(v21, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_MESSAGE): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v20, (const char **)&v18->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v21[0].__r_.__value_.__l.__data_);
    }
    v19 = *((_BYTE *)v10 + 10);
    *((_BYTE *)v10 + 10) = v19 & 0xF0;
    result = *v10;
    if ((v19 & 0x10) != 0)
      return (uint64_t *)(*(uint64_t (**)(uint64_t *, const google::protobuf::MessageLite *))(*result + 32))(result, a4);
  }
  return result;
}

