uint64_t @objc closure #1 in ParticipantPresenceCoordinator.activeParticipantsInTab(_:)()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 48) = *(_QWORD *)(*(_QWORD *)(v0 + 16)
                                   + OBJC_IVAR____WBParticipantPresenceCoordinator_participantPresenceStore);
  return swift_task_switch();
}

{
  uint64_t v0;
  void (**v1)(_QWORD, _QWORD);
  void *v2;
  Class isa;

  v1 = *(void (***)(_QWORD, _QWORD))(v0 + 24);
  v2 = *(void **)(v0 + 16);
  ParticipantPresenceStore.activeParticipantsInTab(_:)(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
  swift_bridgeObjectRelease();

  type metadata accessor for CKShareParticipant();
  lazy protocol witness table accessor for type CKShareParticipant and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type CKShareParticipant and conformance NSObject, (uint64_t (*)(uint64_t))type metadata accessor for CKShareParticipant, MEMORY[0x24BEE5BD8]);
  isa = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  ((void (**)(_QWORD, Class))v1)[2](v1, isa);

  _Block_release(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t partial apply for @objc closure #1 in ParticipantPresenceCoordinator.activeParticipantsInTab(_:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  _QWORD *v5;

  v2 = v0[2];
  v3 = (void *)v0[3];
  v4 = (void *)v0[4];
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = specialized closure #3 in closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:);
  return ((uint64_t (*)(int, void *, void *))((char *)&async function pointer to @objc closure #1 in ParticipantPresenceCoordinator.activeParticipantsInTab(_:)
                                                      + async function pointer to @objc closure #1 in ParticipantPresenceCoordinator.activeParticipantsInTab(_:)))(v2, v3, v4);
}

uint64_t one-time initialization function for tabGroup()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, static Logger.tabGroup);
  __swift_project_value_buffer(v0, (uint64_t)static Logger.tabGroup);
  return Logger.init(subsystem:category:)();
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  if ((*(_DWORD *)(*(_QWORD *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

uint64_t specialized closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:)()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t, uint64_t);
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t);

  v2 = v0[6];
  v1 = v0[7];
  v3 = v0[4];
  v4 = v0[5];
  v13 = v4;
  v5 = v0[3];
  v6 = type metadata accessor for TaskPriority();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56);
  v7(v1, 1, 1, v6);
  v8 = (_QWORD *)swift_allocObject();
  v8[2] = 0;
  v8[3] = 0;
  v8[4] = v3;
  v8[5] = v5;
  v8[6] = v4;
  v8[7] = v2;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  _sScg7addTask8priority9operationyScPSg_xyYaKYAcntFyt_s5Error_pTg5(v1, (uint64_t)&async function pointer to partial apply for specialized closure #1 in closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:), (uint64_t)v8);
  outlined destroy of TaskPriority?(v1, &demangling cache variable for type metadata for TaskPriority?);
  v7(v1, 1, 1, v6);
  v9 = (_QWORD *)swift_allocObject();
  v9[2] = 0;
  v9[3] = 0;
  v9[4] = v3;
  v9[5] = v5;
  v9[6] = v13;
  v9[7] = v2;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  _sScg7addTask8priority9operationyScPSg_xyYaKYAcntFyt_s5Error_pTg5(v1, (uint64_t)&async function pointer to partial apply for specialized closure #2 in closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:), (uint64_t)v9);
  outlined destroy of TaskPriority?(v1, &demangling cache variable for type metadata for TaskPriority?);
  v7(v1, 1, 1, v6);
  v10 = (_QWORD *)swift_allocObject();
  v10[2] = 0;
  v10[3] = 0;
  v10[4] = v5;
  v10[5] = v3;
  swift_retain();
  swift_retain();
  _sScg7addTask8priority9operationyScPSg_xyYaKYAcntFyt_s5Error_pTg5(v1, (uint64_t)&async function pointer to partial apply for specialized closure #3 in closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:), (uint64_t)v10);
  outlined destroy of TaskPriority?(v1, &demangling cache variable for type metadata for TaskPriority?);
  v14 = (uint64_t (*)(uint64_t, uint64_t))((char *)&async function pointer to specialized ThrowingTaskGroup.waitForAll(isolation:)
                                                 + async function pointer to specialized ThrowingTaskGroup.waitForAll(isolation:));
  v11 = (_QWORD *)swift_task_alloc();
  v0[8] = v11;
  *v11 = v0;
  v11[1] = specialized closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:);
  return v14(0, 0);
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t, uint64_t);
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t);

  v2 = v0[6];
  v1 = v0[7];
  v3 = v0[4];
  v4 = v0[5];
  v13 = v4;
  v5 = v0[3];
  v6 = type metadata accessor for TaskPriority();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56);
  v7(v1, 1, 1, v6);
  v8 = (_QWORD *)swift_allocObject();
  v8[2] = 0;
  v8[3] = 0;
  v8[4] = v3;
  v8[5] = v5;
  v8[6] = v4;
  v8[7] = v2;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  _sScg7addTask8priority9operationyScPSg_xyYaKYAcntFyt_s5Error_pTg5(v1, (uint64_t)&async function pointer to partial apply for specialized closure #1 in closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:), (uint64_t)v8);
  outlined destroy of TaskPriority?(v1, &demangling cache variable for type metadata for TaskPriority?);
  v7(v1, 1, 1, v6);
  v9 = (_QWORD *)swift_allocObject();
  v9[2] = 0;
  v9[3] = 0;
  v9[4] = v3;
  v9[5] = v5;
  v9[6] = v13;
  v9[7] = v2;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  _sScg7addTask8priority9operationyScPSg_xyYaKYAcntFyt_s5Error_pTg5(v1, (uint64_t)&async function pointer to partial apply for specialized closure #2 in closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:), (uint64_t)v9);
  outlined destroy of TaskPriority?(v1, &demangling cache variable for type metadata for TaskPriority?);
  v7(v1, 1, 1, v6);
  v10 = (_QWORD *)swift_allocObject();
  v10[2] = 0;
  v10[3] = 0;
  v10[4] = v5;
  v10[5] = v3;
  swift_retain();
  swift_retain();
  _sScg7addTask8priority9operationyScPSg_xyYaKYAcntFyt_s5Error_pTg5(v1, (uint64_t)&async function pointer to partial apply for specialized closure #3 in closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:), (uint64_t)v10);
  outlined destroy of TaskPriority?(v1, &demangling cache variable for type metadata for TaskPriority?);
  v14 = (uint64_t (*)(uint64_t, uint64_t))((char *)&async function pointer to specialized ThrowingTaskGroup.waitForAll(isolation:)
                                                 + async function pointer to specialized ThrowingTaskGroup.waitForAll(isolation:));
  v11 = (_QWORD *)swift_task_alloc();
  v0[8] = v11;
  *v11 = v0;
  v11[1] = specialized closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:);
  return v14(0, 0);
}

{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t @objc closure #1 in ParticipantPresenceCoordinator.activeParticipantsInTab(_:)(int a1, void *aBlock, void *a3)
{
  _QWORD *v3;
  uint64_t v5;
  id v6;

  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  v3[4] = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v3[5] = v5;
  v6 = a3;
  return swift_task_switch();
}

id ParticipantPresenceCoordinator.init()()
{
  char *v0;
  char *v1;
  objc_class *ObjectType;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  objc_super v11;

  v1 = v0;
  ObjectType = (objc_class *)swift_getObjectType();
  swift_unknownObjectWeakInit();
  v3 = OBJC_IVAR____WBParticipantPresenceCoordinator_participantPresenceStore;
  type metadata accessor for ParticipantPresenceStore();
  v4 = swift_allocObject();
  v5 = v0;
  swift_defaultActor_initialize();
  v6 = MEMORY[0x24BEE4B00];
  *(_QWORD *)(v4 + 112) = MEMORY[0x24BEE4B00];
  *(_QWORD *)(v4 + 120) = v6;
  *(_QWORD *)(v4 + 128) = v6;
  *(_QWORD *)(v4 + 136) = v6;
  *(_OWORD *)(v4 + 144) = 0u;
  *(_OWORD *)(v4 + 160) = 0u;
  *(_OWORD *)(v4 + 176) = 0u;
  *(_QWORD *)(v4 + 192) = 0xE000000000000000;
  *(_QWORD *)&v1[v3] = v4;
  v7 = OBJC_IVAR____WBParticipantPresenceCoordinator_connectionManagerStore;
  type metadata accessor for ParticipantPresenceCoordinator.ConnectionManagerStore();
  v8 = swift_allocObject();
  swift_defaultActor_initialize();
  v9 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v8 + 112) = 0;
  *(_QWORD *)(v8 + 120) = v9;
  *(_QWORD *)(v8 + 128) = 0;
  *(_QWORD *)(v8 + 136) = specialized Dictionary.init(dictionaryLiteral:)(v9);
  *(_QWORD *)(v8 + 144) = specialized Dictionary.init(dictionaryLiteral:)(v9);
  *(_BYTE *)(v8 + 152) = 1;
  *(_QWORD *)&v5[v7] = v8;

  v11.receiver = v5;
  v11.super_class = ObjectType;
  return objc_msgSendSuper2(&v11, sel_init);
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  id v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, (share: CKShare, count: Int)>);
  v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 56);
  while (1)
  {
    v5 = *(v4 - 3);
    v6 = *(v4 - 2);
    v7 = (void *)*(v4 - 1);
    v8 = *v4;
    swift_bridgeObjectRetain();
    v9 = v7;
    result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v12 = (uint64_t *)(v2[6] + 16 * result);
    *v12 = v5;
    v12[1] = v6;
    v13 = (_QWORD *)(v2[7] + 16 * result);
    *v13 = v9;
    v13[1] = v8;
    v14 = v2[2];
    v15 = __OFADD__(v14, 1);
    v16 = v14 + 1;
    if (v15)
      goto LABEL_11;
    v4 += 4;
    v2[2] = v16;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, ParticipantPresenceCoordinator.ConnectionManagerStore.SharedConnection>);
  v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v5 = *(v4 - 2);
    v6 = *(v4 - 1);
    v7 = *v4;
    v17 = *(_OWORD *)(v4 + 3);
    v18 = *(_OWORD *)(v4 + 1);
    v8 = v4[5];
    swift_bridgeObjectRetain();
    v9 = (id)v18;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v12 = (uint64_t *)(v2[6] + 16 * result);
    *v12 = v5;
    v12[1] = v6;
    v13 = v2[7] + 48 * result;
    *(_QWORD *)v13 = v7;
    *(_OWORD *)(v13 + 8) = v18;
    *(_OWORD *)(v13 + 24) = v17;
    *(_QWORD *)(v13 + 40) = v8;
    v14 = v2[2];
    v15 = __OFADD__(v14, 1);
    v16 = v14 + 1;
    if (v15)
      goto LABEL_11;
    v2[2] = v16;
    v4 += 8;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  _QWORD *v2;
  uint64_t v3;
  id *v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  id v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, ParticipantHandleMap.ParticipantKind>);
  v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (id *)(a1 + 48);
  while (1)
  {
    v5 = (uint64_t)*(v4 - 2);
    v6 = (uint64_t)*(v4 - 1);
    v7 = *v4;
    v8 = *v4;
    swift_bridgeObjectRetain();
    result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v11 = (uint64_t *)(v2[6] + 16 * result);
    *v11 = v5;
    v11[1] = v6;
    *(_QWORD *)(v2[7] + 8 * result) = v7;
    v12 = v2[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v4 += 3;
    v2[2] = v14;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t result;
  char v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, (tabGroupIdentifier: String, tabIdentifier: String)>);
  v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 40);
  while (1)
  {
    v5 = *(v4 - 1);
    v6 = *v4;
    v7 = v4[1];
    v8 = v4[2];
    v10 = v4[3];
    v9 = v4[4];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    if ((v12 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v13 = (uint64_t *)(v2[6] + 16 * result);
    *v13 = v5;
    v13[1] = v6;
    v14 = (uint64_t *)(v2[7] + 32 * result);
    *v14 = v7;
    v14[1] = v8;
    v14[2] = v10;
    v14[3] = v9;
    v15 = v2[2];
    v16 = __OFADD__(v15, 1);
    v17 = v15 + 1;
    if (v16)
      goto LABEL_11;
    v2[2] = v17;
    v4 += 6;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Set<CKShareParticipant>>);
  v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v5 = *(v4 - 2);
    v6 = *(v4 - 1);
    v7 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v10 = (uint64_t *)(v2[6] + 16 * result);
    *v10 = v5;
    v10[1] = v6;
    *(_QWORD *)(v2[7] + 8 * result) = v7;
    v11 = v2[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v2[2] = v13;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t type metadata accessor for ParticipantPresenceCoordinator.ConnectionManagerStore()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for ParticipantPresenceStore()
{
  return objc_opt_self();
}

unint64_t type metadata accessor for CKShareParticipant()
{
  unint64_t result;

  result = lazy cache variable for type metadata for CKShareParticipant;
  if (!lazy cache variable for type metadata for CKShareParticipant)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for CKShareParticipant);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type CKShareParticipant and conformance NSObject(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = MEMORY[0x24BD0F8BC](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t ParticipantPresenceStore.activeParticipantsInTab(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v11;

  swift_beginAccess();
  v5 = *(_QWORD *)(v2 + 136);
  v6 = *(_QWORD *)(v5 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v6 && (v7 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2), (v8 & 1) != 0))
  {
    v9 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v7);
    swift_bridgeObjectRetain();
  }
  else if ((MEMORY[0x24BEE4AF8] & 0xC000000000000000) != 0 && _CocoaArrayWrapper.endIndex.getter())
  {
    specialized Set.init(_nonEmptyArrayLiteral:)(MEMORY[0x24BEE4AF8]);
    v9 = v11;
  }
  else
  {
    v9 = MEMORY[0x24BEE4B08];
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v9;
}

Swift::Void __swiftcall ParticipantPresenceCoordinator.moveCurrentParticipant(toTab:inTabGroup:withDeviceIdentifier:)(Swift::String_optional toTab, Swift::String_optional inTabGroup, Swift::String withDeviceIdentifier)
{
  void *v3;
  void *object;
  uint64_t countAndFlagsBits;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD *v13;
  id v14;
  uint64_t v15;

  object = withDeviceIdentifier._object;
  countAndFlagsBits = withDeviceIdentifier._countAndFlagsBits;
  v6 = inTabGroup.value._object;
  v7 = inTabGroup.value._countAndFlagsBits;
  v8 = toTab.value._object;
  v9 = toTab.value._countAndFlagsBits;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x24BDAC7A8]();
  v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
  v13 = (_QWORD *)swift_allocObject();
  v13[2] = 0;
  v13[3] = 0;
  v13[4] = v9;
  v13[5] = v8;
  v13[6] = v7;
  v13[7] = v6;
  v13[8] = v3;
  v13[9] = countAndFlagsBits;
  v13[10] = object;
  swift_bridgeObjectRetain();
  v14 = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v11, (uint64_t)&async function pointer to partial apply for closure #1 in ParticipantPresenceCoordinator.moveCurrentParticipant(toTab:inTabGroup:withDeviceIdentifier:), (uint64_t)v13);
  swift_release();
}

uint64_t outlined destroy of TaskPriority?(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x24BD0F8A4]((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

uint64_t getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  uint64_t ObjectType;

  v6 = specialized _StringGuts._deconstructUTF8<A>(scratch:)(v12, 0, 0, 1, a1, a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = swift_getObjectType();
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = MEMORY[0x24BEE2520];
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  return v7;
}

uint64_t __swift_destroy_boxed_opaque_existential_1(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 24) - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release();
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t outlined init with copy of Any(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t specialized _StringGuts._deconstructUTF8<A>(scratch:)(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (_QWORD *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter();
            result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    result = _StringGuts._allocateForDeconstruct()(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0)
    goto LABEL_13;
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  v8 = _StringObject.sharedUTF8.getter();
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
LABEL_17:
    result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return swift_unknownObjectRetain();
}

uint64_t ParticipantPresenceStore.moveCurrentParticipant(toTab:inTabGroup:withDeviceIdentifier:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  _QWORD *v7;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v9 = v7[18];
  v10 = v7[22];
  v11 = __OFADD__(v10, 1);
  v12 = v10 + 1;
  if (!v11)
  {
    v13 = v7[19];
    if (a4 && a2)
    {
      v7[18] = a3;
      v7[19] = a4;
      v7[20] = result;
      v7[21] = a2;
      v7[22] = v12;
      v7[23] = a5;
      v7[24] = a6;
      outlined copy of PresenceUpdateMessage.Kind(v9, v13);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      *((_OWORD *)v7 + 9) = 0u;
      *((_OWORD *)v7 + 10) = 0u;
      v7[22] = v12;
      v7[23] = a5;
      v7[24] = a6;
      outlined copy of PresenceUpdateMessage.Kind(v9, v13);
      swift_bridgeObjectRetain();
    }
    swift_bridgeObjectRetain();
    outlined consume of PresenceUpdateMessage.Kind(v9, v13);
    swift_bridgeObjectRelease();
    if (v13)
    {
      swift_bridgeObjectRetain();
      outlined consume of PresenceUpdateMessage.Kind(v9, v13);
      swift_bridgeObjectRelease();
      v14 = v7[18];
      v15 = v7[19];
      if (v15)
      {
        swift_bridgeObjectRetain();
        outlined copy of PresenceUpdateMessage.Kind(v14, v15);
        swift_bridgeObjectRelease();
        if (v9 == v14 && v13 == v15)
        {
          swift_bridgeObjectRelease_n();
LABEL_13:
          swift_bridgeObjectRelease();
          v14 = v7[18];
          v15 = v7[19];
          v17 = v7[20];
          v18 = v7[21];
          v19 = v7[22];
          v20 = v7[23];
          v21 = v7[24];
          outlined copy of PresenceUpdateMessage.Kind(v14, v15);
          v9 = 0;
          v13 = 0;
LABEL_16:
          result = swift_bridgeObjectRetain();
          *a7 = v14;
          a7[1] = v15;
          a7[2] = v17;
          a7[3] = v18;
          a7[4] = v19;
          a7[5] = v20;
          a7[6] = v21;
          a7[7] = v9;
          a7[8] = v13;
          return result;
        }
        v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v16 & 1) != 0)
          goto LABEL_13;
        v14 = v7[18];
        v15 = v7[19];
      }
      v17 = v7[20];
      v18 = v7[21];
      v19 = v7[22];
      v20 = v7[23];
      v21 = v7[24];
      outlined copy of PresenceUpdateMessage.Kind(v14, v15);
      goto LABEL_16;
    }
    outlined consume of PresenceUpdateMessage.Kind(v9, 0);
    goto LABEL_13;
  }
  __break(1u);
  return result;
}

uint64_t outlined consume of PresenceUpdateMessage.Kind(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t outlined copy of PresenceUpdateMessage.Kind(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t CRDTGeneration.debugDescription.getter(uint64_t a1, uint64_t a2, void *a3)
{
  Swift::String v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;

  v5._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 8236;
  v6._object = (void *)0xE200000000000000;
  String.append(_:)(v6);
  swift_bridgeObjectRetain();
  v7._countAndFlagsBits = a2;
  v7._object = a3;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 15904;
  v8._object = (void *)0xE200000000000000;
  String.append(_:)(v8);
  return 8252;
}

uint64_t AsyncBufferedQueue.__allocating_init(bufferingPolicy:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  swift_allocObject();
  v2 = specialized AsyncBufferedQueue.init(bufferingPolicy:)(a1);
  v3 = type metadata accessor for AsyncStream.Continuation.BufferingPolicy();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return v2;
}

uint64_t AsyncBufferedQueue.init(bufferingPolicy:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = specialized AsyncBufferedQueue.init(bufferingPolicy:)(a1);
  v3 = type metadata accessor for AsyncStream.Continuation.BufferingPolicy();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return v2;
}

uint64_t closure #1 in AsyncBufferedQueue.init(bufferingPolicy:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = type metadata accessor for AsyncStream.Continuation();
  v5 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a2, v5);
  v6 = *(_QWORD *)(v4 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(a2, a1, v4);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v6 + 56))(a2, 0, 1, v4);
}

uint64_t AsyncBufferedQueue.enqueue(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  MEMORY[0x24BDAC7A8](a1);
  (*(void (**)(char *))(v2 + 16))((char *)&v4 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for AsyncStream.Continuation();
  return AsyncStream.Continuation.yield(_:)();
}

Swift::Void __swiftcall AsyncBufferedQueue.finish()()
{
  type metadata accessor for AsyncStream.Continuation();
  AsyncStream.Continuation.finish()();
}

uint64_t AsyncBufferedQueue.makeAsyncIterator()()
{
  type metadata accessor for AsyncStream();
  return AsyncStream.makeAsyncIterator()();
}

uint64_t AsyncBufferedQueue.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = v0;
  v2 = type metadata accessor for AsyncStream.Continuation();
  AsyncStream.Continuation.finish()();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1 + *(_QWORD *)(*(_QWORD *)v1 + 88), v2);
  v3 = v1 + *(_QWORD *)(*(_QWORD *)v1 + 96);
  v4 = type metadata accessor for AsyncStream();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  return v1;
}

uint64_t AsyncBufferedQueue.__deallocating_deinit()
{
  AsyncBufferedQueue.deinit();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for AsyncSequence.makeAsyncIterator() in conformance AsyncBufferedQueue<A>()
{
  AsyncBufferedQueue.makeAsyncIterator()();
  return swift_release();
}

uint64_t specialized AsyncBufferedQueue.init(bufferingPolicy:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;

  v24 = a1;
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 80);
  v3 = type metadata accessor for AsyncStream.Continuation.BufferingPolicy();
  v20 = *(_QWORD *)(v3 - 8);
  v21 = v3;
  ((void (*)(void))MEMORY[0x24BDAC7A8])();
  v5 = (char *)&v19 - v4;
  v6 = type metadata accessor for AsyncStream();
  v22 = *(_QWORD *)(v6 - 8);
  v23 = v6;
  ((void (*)(void))MEMORY[0x24BDAC7A8])();
  v8 = (char *)&v19 - v7;
  v9 = type metadata accessor for AsyncStream.Continuation();
  v10 = type metadata accessor for Optional();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = ((uint64_t (*)(void))MEMORY[0x24BDAC7A8])();
  v14 = (char *)&v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v19 - v15;
  v17 = *(_QWORD *)(v9 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 56))((char *)&v19 - v15, 1, 1, v9);
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v5, v24, v21);
  v25 = v2;
  v26 = v16;
  AsyncStream.init(_:bufferingPolicy:_:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v22 + 32))(v1 + *(_QWORD *)(*(_QWORD *)v1 + 96), v8, v23);
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v14, v16, v10);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48))(v14, 1, v9);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v17 + 32))(v1 + *(_QWORD *)(*(_QWORD *)v1 + 88), v14, v9);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v16, v10);
    return v1;
  }
  return result;
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<Set<Participant>>.Continuation.BufferingPolicy);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<Set<Participant>>);
  v21 = *(_QWORD *)(v7 - 8);
  v22 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<Set<Participant>>.Continuation?);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v19 - v14;
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<Set<Participant>>.Continuation);
  v17 = *(_QWORD *)(v16 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 56))(v15, 1, 1, v16);
  v19 = v4;
  v20 = a1;
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a1, v3);
  v23 = v15;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Set<Participant>);
  AsyncStream.init(_:bufferingPolicy:_:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v21 + 32))(v1 + *(_QWORD *)(*(_QWORD *)v1 + 96), v9, v22);
  outlined init with copy of TaskPriority?((uint64_t)v15, (uint64_t)v13, &demangling cache variable for type metadata for AsyncStream<Set<Participant>>.Continuation?);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48))(v13, 1, v16);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v20, v3);
    (*(void (**)(uint64_t, char *, uint64_t))(v17 + 32))(v1 + *(_QWORD *)(*(_QWORD *)v1 + 88), v13, v16);
    outlined destroy of TaskPriority?((uint64_t)v15, &demangling cache variable for type metadata for AsyncStream<Set<Participant>>.Continuation?);
    return v1;
  }
  return result;
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<(PresenceUpdateMessage, GroupSessionMessenger.MessageContext)>.Continuation.BufferingPolicy);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<(PresenceUpdateMessage, GroupSessionMessenger.MessageContext)>);
  v21 = *(_QWORD *)(v7 - 8);
  v22 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<(PresenceUpdateMessage, GroupSessionMessenger.MessageContext)>.Continuation?);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v19 - v14;
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<(PresenceUpdateMessage, GroupSessionMessenger.MessageContext)>.Continuation);
  v17 = *(_QWORD *)(v16 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 56))(v15, 1, 1, v16);
  v19 = v4;
  v20 = a1;
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a1, v3);
  v23 = v15;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PresenceUpdateMessage, GroupSessionMessenger.MessageContext));
  AsyncStream.init(_:bufferingPolicy:_:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v21 + 32))(v1 + *(_QWORD *)(*(_QWORD *)v1 + 96), v9, v22);
  outlined init with copy of TaskPriority?((uint64_t)v15, (uint64_t)v13, &demangling cache variable for type metadata for AsyncStream<(PresenceUpdateMessage, GroupSessionMessenger.MessageContext)>.Continuation?);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48))(v13, 1, v16);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v20, v3);
    (*(void (**)(uint64_t, char *, uint64_t))(v17 + 32))(v1 + *(_QWORD *)(*(_QWORD *)v1 + 88), v13, v16);
    outlined destroy of TaskPriority?((uint64_t)v15, &demangling cache variable for type metadata for AsyncStream<(PresenceUpdateMessage, GroupSessionMessenger.MessageContext)>.Continuation?);
    return v1;
  }
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;

  v21 = a1;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<PresenceUpdateMessage>.Continuation.BufferingPolicy);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<PresenceUpdateMessage>);
  v6 = *(_QWORD *)(v20 - 8);
  MEMORY[0x24BDAC7A8](v20);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<PresenceUpdateMessage>.Continuation?);
  v10 = MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)&v18 - v13;
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<PresenceUpdateMessage>.Continuation);
  v16 = *(_QWORD *)(v15 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56))(v14, 1, 1, v15);
  v19 = v3;
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v21, v2);
  v22 = v14;
  AsyncStream.init(_:bufferingPolicy:_:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(v1 + *(_QWORD *)(*(_QWORD *)v1 + 96), v8, v20);
  outlined init with copy of TaskPriority?((uint64_t)v14, (uint64_t)v12, &demangling cache variable for type metadata for AsyncStream<PresenceUpdateMessage>.Continuation?);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48))(v12, 1, v15);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v21, v2);
    (*(void (**)(uint64_t, char *, uint64_t))(v16 + 32))(v1 + *(_QWORD *)(*(_QWORD *)v1 + 88), v12, v15);
    outlined destroy of TaskPriority?((uint64_t)v14, &demangling cache variable for type metadata for AsyncStream<PresenceUpdateMessage>.Continuation?);
    return v1;
  }
  return result;
}

void associated type witness table accessor for AsyncSequence.AsyncIterator : AsyncIteratorProtocol in AsyncBufferedQueue<A>()
{
  JUMPOUT(0x24BD0F8BCLL);
}

uint64_t type metadata completion function for AsyncBufferedQueue()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = type metadata accessor for AsyncStream.Continuation();
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for AsyncStream();
    if (v2 <= 0x3F)
    {
      result = swift_initClassMetadata2();
      if (!result)
        return 0;
    }
  }
  return result;
}

uint64_t type metadata accessor for AsyncBufferedQueue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AsyncBufferedQueue);
}

uint64_t method lookup function for AsyncBufferedQueue()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of AsyncBufferedQueue.__allocating_init(bufferingPolicy:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t partial apply for closure #1 in AsyncBufferedQueue.init(bufferingPolicy:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in AsyncBufferedQueue.init(bufferingPolicy:)(a1, *(_QWORD *)(v1 + 24));
}

uint64_t __swift_instantiateGenericMetadata(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[3];

  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return MEMORY[0x24BD0F874](a1, v6, a5);
}

void type metadata accessor for os_unfair_lock_s()
{
  unint64_t ForeignTypeMetadata;
  uint64_t v1;

  if (!lazy cache variable for type metadata for os_unfair_lock_s)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v1)
      atomic_store(ForeignTypeMetadata, (unint64_t *)&lazy cache variable for type metadata for os_unfair_lock_s);
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CKShareCollaborationActivity.CodingKeys()
{
  return 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance CKShareCollaborationActivity.CodingKeys()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance CKShareCollaborationActivity.CodingKeys()
{
  Hasher._combine(_:)(0);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CKShareCollaborationActivity.CodingKeys()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance CKShareCollaborationActivity.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized CKShareCollaborationActivity.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance CKShareCollaborationActivity.CodingKeys()
{
  return 0;
}

void protocol witness for CodingKey.init(intValue:) in conformance CKShareCollaborationActivity.CodingKeys(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CKShareCollaborationActivity.CodingKeys()
{
  lazy protocol witness table accessor for type CKShareCollaborationActivity.CodingKeys and conformance CKShareCollaborationActivity.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CKShareCollaborationActivity.CodingKeys()
{
  lazy protocol witness table accessor for type CKShareCollaborationActivity.CodingKeys and conformance CKShareCollaborationActivity.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for Decodable.init(from:) in conformance CKShareCollaborationActivity@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<CKShareCollaborationActivity.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type CKShareCollaborationActivity.CodingKeys and conformance CKShareCollaborationActivity.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v9 = KeyedDecodingContainer.decode(_:forKey:)();
  v11 = v10;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  result = __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  *a2 = v9;
  a2[1] = v11;
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance CKShareCollaborationActivity(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<CKShareCollaborationActivity.CodingKeys>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type CKShareCollaborationActivity.CodingKeys and conformance CKShareCollaborationActivity.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

unint64_t protocol witness for static GroupActivity.activityIdentifier.getter in conformance CKShareCollaborationActivity()
{
  return 0xD000000000000036;
}

uint64_t protocol witness for GroupActivity.metadata.getter in conformance CKShareCollaborationActivity()
{
  uint64_t v0;

  type metadata accessor for GroupActivityMetadata.ActivityType();
  swift_task_alloc();
  GroupActivityMetadata.init()();
  static GroupActivityMetadata.ActivityType.collaboration.getter();
  GroupActivityMetadata.type.setter();
  swift_task_dealloc();
  return protocol witness for GroupActivity.metadata.getter in conformance CKShareCollaborationActivity(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t protocol witness for Identifiable.id.getter in conformance CKShareCollaborationActivity@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;

  v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CKShareCollaborationActivity()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

_QWORD *initializeBufferWithCopyOfBuffer for CKShareCollaborationActivity(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for CKShareCollaborationActivity()
{
  return swift_bridgeObjectRelease();
}

_QWORD *assignWithCopy for CKShareCollaborationActivity(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

_QWORD *assignWithTake for CKShareCollaborationActivity(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for CKShareCollaborationActivity(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CKShareCollaborationActivity(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for CKShareCollaborationActivity()
{
  return &type metadata for CKShareCollaborationActivity;
}

uint64_t associated type witness table accessor for Identifiable.ID : Hashable in CKShareCollaborationActivity()
{
  return MEMORY[0x24BEE0D10];
}

unint64_t lazy protocol witness table accessor for type CKShareCollaborationActivity and conformance CKShareCollaborationActivity()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CKShareCollaborationActivity and conformance CKShareCollaborationActivity;
  if (!lazy protocol witness table cache variable for type CKShareCollaborationActivity and conformance CKShareCollaborationActivity)
  {
    result = MEMORY[0x24BD0F8BC](&protocol conformance descriptor for CKShareCollaborationActivity, &type metadata for CKShareCollaborationActivity);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CKShareCollaborationActivity and conformance CKShareCollaborationActivity);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CKShareCollaborationActivity and conformance CKShareCollaborationActivity;
  if (!lazy protocol witness table cache variable for type CKShareCollaborationActivity and conformance CKShareCollaborationActivity)
  {
    result = MEMORY[0x24BD0F8BC](&protocol conformance descriptor for CKShareCollaborationActivity, &type metadata for CKShareCollaborationActivity);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CKShareCollaborationActivity and conformance CKShareCollaborationActivity);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CKShareCollaborationActivity and conformance CKShareCollaborationActivity;
  if (!lazy protocol witness table cache variable for type CKShareCollaborationActivity and conformance CKShareCollaborationActivity)
  {
    result = MEMORY[0x24BD0F8BC](&protocol conformance descriptor for CKShareCollaborationActivity, &type metadata for CKShareCollaborationActivity);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CKShareCollaborationActivity and conformance CKShareCollaborationActivity);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CKShareCollaborationActivity and conformance CKShareCollaborationActivity;
  if (!lazy protocol witness table cache variable for type CKShareCollaborationActivity and conformance CKShareCollaborationActivity)
  {
    result = MEMORY[0x24BD0F8BC](&protocol conformance descriptor for CKShareCollaborationActivity, &type metadata for CKShareCollaborationActivity);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CKShareCollaborationActivity and conformance CKShareCollaborationActivity);
  }
  return result;
}

uint64_t associated type witness table accessor for Identifiable.ID : Decodable in CKShareCollaborationActivity()
{
  return MEMORY[0x24BEE0D38];
}

uint64_t associated type witness table accessor for Identifiable.ID : Encodable in CKShareCollaborationActivity()
{
  return MEMORY[0x24BEE0D08];
}

_QWORD *__swift_project_boxed_opaque_existential_1(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

unint64_t lazy protocol witness table accessor for type CKShareCollaborationActivity.CodingKeys and conformance CKShareCollaborationActivity.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CKShareCollaborationActivity.CodingKeys and conformance CKShareCollaborationActivity.CodingKeys;
  if (!lazy protocol witness table cache variable for type CKShareCollaborationActivity.CodingKeys and conformance CKShareCollaborationActivity.CodingKeys)
  {
    result = MEMORY[0x24BD0F8BC](&protocol conformance descriptor for CKShareCollaborationActivity.CodingKeys, &unk_251BC9148);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CKShareCollaborationActivity.CodingKeys and conformance CKShareCollaborationActivity.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CKShareCollaborationActivity.CodingKeys and conformance CKShareCollaborationActivity.CodingKeys;
  if (!lazy protocol witness table cache variable for type CKShareCollaborationActivity.CodingKeys and conformance CKShareCollaborationActivity.CodingKeys)
  {
    result = MEMORY[0x24BD0F8BC](&protocol conformance descriptor for CKShareCollaborationActivity.CodingKeys, &unk_251BC9148);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CKShareCollaborationActivity.CodingKeys and conformance CKShareCollaborationActivity.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CKShareCollaborationActivity.CodingKeys and conformance CKShareCollaborationActivity.CodingKeys;
  if (!lazy protocol witness table cache variable for type CKShareCollaborationActivity.CodingKeys and conformance CKShareCollaborationActivity.CodingKeys)
  {
    result = MEMORY[0x24BD0F8BC](&protocol conformance descriptor for CKShareCollaborationActivity.CodingKeys, &unk_251BC9148);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CKShareCollaborationActivity.CodingKeys and conformance CKShareCollaborationActivity.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CKShareCollaborationActivity.CodingKeys and conformance CKShareCollaborationActivity.CodingKeys;
  if (!lazy protocol witness table cache variable for type CKShareCollaborationActivity.CodingKeys and conformance CKShareCollaborationActivity.CodingKeys)
  {
    result = MEMORY[0x24BD0F8BC](&protocol conformance descriptor for CKShareCollaborationActivity.CodingKeys, &unk_251BC9148);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CKShareCollaborationActivity.CodingKeys and conformance CKShareCollaborationActivity.CodingKeys);
  }
  return result;
}

uint64_t protocol witness for GroupActivity.metadata.getter in conformance CKShareCollaborationActivity(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t getEnumTagSinglePayload for CKShareCollaborationActivity.CodingKeys(unsigned int *a1, int a2)
{
  int v2;
  int v3;

  if (!a2)
    return 0;
  if ((a2 + 1) >= 0x10000)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) < 0x100)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
    return *a1;
  if (v3 == 2)
    return *(unsigned __int16 *)a1;
  return *(unsigned __int8 *)a1;
}

uint64_t storeEnumTagSinglePayload for CKShareCollaborationActivity.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_24A3F3748 + 4 * asc_24A42F210[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_24A3F3768 + 4 * byte_24A42F215[v4]))();
}

_BYTE *sub_24A3F3748(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_24A3F3768(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_24A3F3770(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_24A3F3778(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_24A3F3780(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_24A3F3788(_DWORD *result)
{
  *result = 0;
  return result;
}

uint64_t getEnumTag for CKShareCollaborationActivity.CodingKeys()
{
  return 0;
}

void *type metadata accessor for CKShareCollaborationActivity.CodingKeys()
{
  return &unk_251BC9148;
}

uint64_t specialized CKShareCollaborationActivity.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;

  if (a1 == 25705 && a2 == 0xE200000000000000)
  {
    swift_bridgeObjectRelease();
    v4 = 0;
  }
  else
  {
    v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    v4 = v3 ^ 1;
  }
  return v4 & 1;
}

uint64_t specialized CKShareCollaborationActivity.CodingKeys.stringValue.getter()
{
  return 25705;
}

void type metadata completion function for CollaborationConnectionManager(uint64_t *a1)
{
  unint64_t v1;
  unint64_t v2;

  type metadata accessor for FastSyncStateMachine(319, a1[10], a1[11], a1[14]);
  if (v1 <= 0x3F)
  {
    type metadata accessor for Participant?();
    if (v2 <= 0x3F)
      swift_initClassMetadata2();
  }
}

uint64_t one-time initialization function for joinLeaveSessionQueue()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v0 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  v11 = *(_QWORD *)(v0 - 8);
  v12 = v0;
  MEMORY[0x24BDAC7A8](v0);
  v2 = (char *)&v10 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for OS_dispatch_queue.Attributes();
  MEMORY[0x24BDAC7A8](v3);
  v4 = type metadata accessor for DispatchQoS();
  MEMORY[0x24BDAC7A8](v4);
  v5 = type metadata accessor for DispatchQoS.QoSClass();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for OS_dispatch_queue();
  (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v8, *MEMORY[0x24BEE5480], v5);
  static OS_dispatch_queue.global(qos:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  static DispatchQoS.unspecified.getter();
  v13 = MEMORY[0x24BEE4AF8];
  lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, _QWORD, uint64_t))(v11 + 104))(v2, *MEMORY[0x24BEE5750], v12);
  result = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  joinLeaveSessionQueue = result;
  return result;
}

uint64_t CollaborationConnectionManager.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + *(_QWORD *)(*(_QWORD *)v0 + 136);
  v2 = type metadata accessor for FastSyncStateMachine(0, *(_QWORD *)(*(_QWORD *)v0 + 80), *(_QWORD *)(*(_QWORD *)v0 + 88), *(_QWORD *)(*(_QWORD *)v0 + 112));
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_release();
  swift_release();
  outlined destroy of Participant?(v0 + *(_QWORD *)(*(_QWORD *)v0 + 160));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_defaultActor_destroy();
  return v0;
}

uint64_t CollaborationConnectionManager.__deallocating_deinit()
{
  CollaborationConnectionManager.deinit();
  return swift_defaultActor_deallocate();
}

void type metadata accessor for CollaborationConnectionManager()
{
  JUMPOUT(0x24BD0F874);
}

void type metadata accessor for Participant?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Participant?)
  {
    type metadata accessor for Participant();
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Participant?);
  }
}

uint64_t type metadata instantiation function for CollaborationConnectionManager.WeakContainer()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t initializeBufferWithCopyOfBuffer for CollaborationConnectionManager.WeakContainer(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t getEnumTagSinglePayload for CollaborationConnectionManager.WeakContainer(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for CollaborationConnectionManager.WeakContainer(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 8) = v3;
  return result;
}

void type metadata accessor for CollaborationConnectionManager.WeakContainer()
{
  JUMPOUT(0x24BD0F874);
}

uint64_t CollaborationConnectionManager.unownedExecutor.getter()
{
  uint64_t v0;

  return v0;
}

uint64_t protocol witness for Actor.unownedExecutor.getter in conformance CollaborationConnectionManager<A, B, C>()
{
  return CollaborationConnectionManager.unownedExecutor.getter();
}

uint64_t outlined destroy of Participant?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Participant?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t type metadata accessor for OS_dispatch_queue()
{
  unint64_t result;

  result = lazy cache variable for type metadata for OS_dispatch_queue;
  if (!lazy cache variable for type metadata for OS_dispatch_queue)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes;
  if (!lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes)
  {
    v1 = type metadata accessor for OS_dispatch_queue.Attributes();
    result = MEMORY[0x24BD0F8BC](MEMORY[0x24BEE5698], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A];
  if (!lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
    result = MEMORY[0x24BD0F8BC](MEMORY[0x24BEE12C8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A]);
  }
  return result;
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x24BD0F8B0](255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t type metadata instantiation function for FastSyncStateMachine()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t type metadata completion function for FastSyncStateMachine()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for FastSyncStateMachine(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_DWORD *)(v6 + 80);
  v8 = *(_QWORD *)(v6 + 64) + 7;
  if (v7 > 7
    || (*(_DWORD *)(v6 + 80) & 0x100000) != 0
    || ((v8 + ((v7 + 24) & ~v7)) & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v7 & 0xF8 ^ 0x1F8) & (v7 + 16)));
  }
  else
  {
    v12 = *a2;
    v13 = (void *)a2[1];
    v14 = a2[2];
    outlined copy of FastSyncStateMachine<A, B>.State<A, B>(*a2, v13, v14);
    *a1 = v12;
    a1[1] = (uint64_t)v13;
    a1[2] = v14;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 16))(((unint64_t)a1 + v7 + 24) & ~v7, ((unint64_t)a2 + v7 + 24) & ~v7, v5);
    v15 = (_QWORD *)((v8 + (((unint64_t)a2 + v7 + 24) & ~v7)) & 0xFFFFFFFFFFFFFFF8);
    v16 = v15[1];
    v17 = (_QWORD *)((v8 + (((unint64_t)a1 + v7 + 24) & ~v7)) & 0xFFFFFFFFFFFFFFF8);
    *v17 = *v15;
    v17[1] = v16;
  }
  swift_retain();
  return a1;
}

id outlined copy of FastSyncStateMachine<A, B>.State<A, B>(uint64_t a1, void *a2, unint64_t a3)
{
  id result;

  switch(a3 >> 61)
  {
    case 0uLL:
    case 1uLL:
    case 2uLL:
      swift_unknownObjectRetain();
      goto LABEL_4;
    case 3uLL:
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
LABEL_4:
      result = (id)swift_retain();
      break;
    case 4uLL:
      swift_unknownObjectRetain();
      result = a2;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t destroy for FastSyncStateMachine(uint64_t a1, uint64_t a2)
{
  outlined consume of FastSyncStateMachine<A, B>.State<A, B>(*(_QWORD *)a1, *(void **)(a1 + 8), *(_QWORD *)(a1 + 16));
  (*(void (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))((a1
                                                                                            + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80)
                                                                                            + 24) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
  return swift_release();
}

void outlined consume of FastSyncStateMachine<A, B>.State<A, B>(uint64_t a1, void *a2, unint64_t a3)
{
  switch(a3 >> 61)
  {
    case 0uLL:
    case 1uLL:
    case 2uLL:
      swift_unknownObjectRelease();
      goto LABEL_4;
    case 3uLL:
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
LABEL_4:
      swift_release();
      break;
    case 4uLL:
      swift_unknownObjectRelease();

      break;
    default:
      return;
  }
}

uint64_t *initializeWithCopy for FastSyncStateMachine(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;

  v6 = *a2;
  v7 = (void *)a2[1];
  v8 = a2[2];
  outlined copy of FastSyncStateMachine<A, B>.State<A, B>(*a2, v7, v8);
  *a1 = v6;
  a1[1] = (uint64_t)v7;
  a1[2] = v8;
  v9 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = ((unint64_t)a1 + v10 + 24) & ~v10;
  v12 = ((unint64_t)a2 + v10 + 24) & ~v10;
  (*(void (**)(uint64_t, uint64_t))(v9 + 16))(v11, v12);
  v13 = *(_QWORD *)(v9 + 64) + 7;
  v14 = (_QWORD *)((v13 + v11) & 0xFFFFFFFFFFFFFFF8);
  v15 = (_QWORD *)((v13 + v12) & 0xFFFFFFFFFFFFFFF8);
  v16 = v15[1];
  *v14 = *v15;
  v14[1] = v16;
  swift_retain();
  return a1;
}

uint64_t *assignWithCopy for FastSyncStateMachine(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  unint64_t v8;
  uint64_t v9;
  void *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;

  v6 = *a2;
  v7 = (void *)a2[1];
  v8 = a2[2];
  outlined copy of FastSyncStateMachine<A, B>.State<A, B>(*a2, v7, v8);
  v9 = *a1;
  v10 = (void *)a1[1];
  v11 = a1[2];
  *a1 = v6;
  a1[1] = (uint64_t)v7;
  a1[2] = v8;
  outlined consume of FastSyncStateMachine<A, B>.State<A, B>(v9, v10, v11);
  v12 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v13 = *(unsigned __int8 *)(v12 + 80);
  v14 = ((unint64_t)a1 + v13 + 24) & ~v13;
  v15 = ((unint64_t)a2 + v13 + 24) & ~v13;
  (*(void (**)(uint64_t, uint64_t))(v12 + 24))(v14, v15);
  v16 = *(_QWORD *)(v12 + 64) + 7;
  v17 = (_QWORD *)((v16 + v14) & 0xFFFFFFFFFFFFFFF8);
  v18 = (_QWORD *)((v16 + v15) & 0xFFFFFFFFFFFFFFF8);
  v19 = v18[1];
  *v17 = *v18;
  v17[1] = v19;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for FastSyncStateMachine(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = (v5 + 24 + a1) & ~v5;
  v7 = (v5 + 24 + a2) & ~v5;
  (*(void (**)(uint64_t, uint64_t))(v4 + 32))(v6, v7);
  *(_OWORD *)((*(_QWORD *)(v4 + 64) + 7 + v6) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)((*(_QWORD *)(v4 + 64) + 7 + v7) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t *assignWithTake for FastSyncStateMachine(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = *(_QWORD *)(a2 + 16);
  v7 = *a1;
  v8 = (void *)a1[1];
  v9 = a1[2];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  a1[2] = v6;
  outlined consume of FastSyncStateMachine<A, B>.State<A, B>(v7, v8, v9);
  v10 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = ((unint64_t)a1 + v11 + 24) & ~v11;
  v13 = (v11 + 24 + a2) & ~v11;
  (*(void (**)(uint64_t, uint64_t))(v10 + 40))(v12, v13);
  *(_OWORD *)((*(_QWORD *)(v10 + 64) + 7 + v12) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((*(_QWORD *)(v10 + 64)
                                                                                       + 7
                                                                                       + v13) & 0xFFFFFFFFFFFFF8);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for FastSyncStateMachine(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v13;
  unint64_t v14;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = *(_QWORD *)(v4 + 64) + 7;
  if (v6 >= a2)
  {
    v13 = (a1 + v7 + 24) & ~v7;
    if (v5 < 0x7FFFFFFF)
    {
      v14 = *(_QWORD *)((v8 + v13) & 0xFFFFFFFFFFFFF8);
      if (v14 >= 0xFFFFFFFF)
        LODWORD(v14) = -1;
      return (v14 + 1);
    }
    else
    {
      return (*(uint64_t (**)(uint64_t))(v4 + 48))(v13);
    }
  }
  else
  {
    if (((((v8 + ((v7 + 24) & ~v7)) & 0xFFFFFFFFFFFFFFF8) + 16) & 0xFFFFFFF8) != 0)
      v9 = 2;
    else
      v9 = a2 - v6 + 1;
    if (v9 >= 0x10000)
      v10 = 4;
    else
      v10 = 2;
    if (v9 < 0x100)
      v10 = 1;
    if (v9 >= 2)
      v11 = v10;
    else
      v11 = 0;
    return ((uint64_t (*)(void))((char *)&loc_24A3F4534 + 4 * byte_24A42F59A[v11]))();
  }
}

void storeEnumTagSinglePayload for FastSyncStateMachine(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  int v10;
  unsigned int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = *(unsigned __int8 *)(v5 + 80);
  if (v6 >= a3)
  {
    v10 = 0;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((*(_DWORD *)(v5 + 64) + 7 + (((_DWORD)v7 + 24) & ~(_DWORD)v7)) & 0xFFFFFFF8) == 0xFFFFFFF0)
      v8 = a3 - v6 + 1;
    else
      v8 = 2;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X14 }
  }
  if (((*(_DWORD *)(v5 + 64) + 7 + (((_DWORD)v7 + 24) & ~(_DWORD)v7)) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    v11 = ~v6 + a2;
    bzero(a1, ((*(_QWORD *)(v5 + 64) + 7 + ((v7 + 24) & ~v7)) & 0xFFFFFFFFFFFFFFF8) + 16);
    *a1 = v11;
  }
  __asm { BR              X10 }
}

void sub_24A3F46CC()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x24A3F4748);
}

void sub_24A3F46D4(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x24A3F46DCLL);
  JUMPOUT(0x24A3F4748);
}

void sub_24A3F4720()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x24A3F4748);
}

void sub_24A3F4728()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x24A3F4748);
}

uint64_t sub_24A3F4730@<X0>(int a1@<W1>, unsigned int a2@<W2>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_WORD *)(v6 + v7) = 0;
  if (!a1)
    JUMPOUT(0x24A3F4748);
  if (a2 < 0x7FFFFFFF)
  {
    if ((a1 & 0x80000000) == 0)
      JUMPOUT(0x24A3F4744);
    JUMPOUT(0x24A3F473CLL);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))((v6 + v5 + 24) & a3);
}

uint64_t type metadata accessor for FastSyncStateMachine(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FastSyncStateMachine);
}

void FastSyncStateMachine.State.description.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __asm { BR              X10 }
}

uint64_t sub_24A3F47B4()
{
  Swift::String v0;
  Swift::String v1;

  swift_unknownObjectRetain();
  v0._countAndFlagsBits = 0x28746E6573657270;
  v0._object = (void *)0xE800000000000000;
  String.append(_:)(v0);
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v1._countAndFlagsBits = 41;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  swift_unknownObjectRelease();
  return 0;
}

void protocol witness for CustomStringConvertible.description.getter in conformance FastSyncStateMachine<A, B>.State()
{
  uint64_t *v0;

  FastSyncStateMachine.State.description.getter(*v0, v0[1], v0[2]);
}

uint64_t type metadata instantiation function for FastSyncStateMachine.State()
{
  return swift_allocateGenericValueMetadata();
}

void destroy for FastSyncStateMachine.State(uint64_t a1)
{
  outlined consume of FastSyncStateMachine<A, B>.State<A, B>(*(_QWORD *)a1, *(void **)(a1 + 8), *(_QWORD *)(a1 + 16));
}

uint64_t *initializeBufferWithCopyOfBuffer for FastSyncStateMachine.State(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  void *v4;
  unint64_t v5;

  v3 = *a2;
  v4 = (void *)a2[1];
  v5 = a2[2];
  outlined copy of FastSyncStateMachine<A, B>.State<A, B>(*a2, v4, v5);
  *a1 = v3;
  a1[1] = (uint64_t)v4;
  a1[2] = v5;
  return a1;
}

uint64_t *assignWithCopy for FastSyncStateMachine.State(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  void *v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  unint64_t v8;

  v3 = *a2;
  v4 = (void *)a2[1];
  v5 = a2[2];
  outlined copy of FastSyncStateMachine<A, B>.State<A, B>(*a2, v4, v5);
  v6 = *a1;
  v7 = (void *)a1[1];
  v8 = a1[2];
  *a1 = v3;
  a1[1] = (uint64_t)v4;
  a1[2] = v5;
  outlined consume of FastSyncStateMachine<A, B>.State<A, B>(v6, v7, v8);
  return a1;
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t *assignWithTake for FastSyncStateMachine.State(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  void *v6;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *a1;
  v6 = (void *)a1[1];
  v5 = a1[2];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  a1[2] = v3;
  outlined consume of FastSyncStateMachine<A, B>.State<A, B>(v4, v6, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for FastSyncStateMachine.State(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7B && *(_BYTE *)(a1 + 24))
    return (*(_DWORD *)a1 + 123);
  v3 = (((*(_QWORD *)(a1 + 16) >> 57) >> 4) | (8
                                                           * ((*(_QWORD *)(a1 + 16) >> 57) & 8 | *(_QWORD *)(a1 + 16) & 7))) ^ 0x7F;
  if (v3 >= 0x7A)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for FastSyncStateMachine.State(uint64_t result, unsigned int a2, unsigned int a3)
{
  uint64_t v3;

  if (a2 > 0x7A)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 123;
    if (a3 >= 0x7B)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if (a3 >= 0x7B)
      *(_BYTE *)(result + 24) = 0;
    if (a2)
    {
      v3 = (-a2 >> 3) & 0xF | (16 * (-a2 & 0x7F));
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = 0;
      *(_QWORD *)(result + 16) = (v3 | (v3 << 57)) & 0xF000000000000007;
    }
  }
  return result;
}

uint64_t getEnumTag for FastSyncStateMachine.State(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 16) >> 61;
  if (v1 <= 4)
    return v1;
  else
    return (*(_DWORD *)a1 + 5);
}

uint64_t destructiveProjectEnumData for FastSyncStateMachine.State(uint64_t result)
{
  *(_QWORD *)(result + 16) &= 0x1FFFFFFFFFFFFFFFuLL;
  return result;
}

uint64_t destructiveInjectEnumTag for FastSyncStateMachine.State(uint64_t result, uint64_t a2)
{
  if (a2 < 5)
  {
    *(_QWORD *)(result + 16) = *(_QWORD *)(result + 16) & 0xFFFFFFFFFFFFFF8 | (a2 << 61);
  }
  else
  {
    *(_QWORD *)result = (a2 - 5);
    *(_OWORD *)(result + 8) = xmmword_24A42F660;
  }
  return result;
}

uint64_t type metadata accessor for FastSyncStateMachine.State(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FastSyncStateMachine.State);
}

uint64_t type metadata completion function for GroupSessionMessengerController()
{
  return swift_initClassMetadata2();
}

uint64_t GroupSessionMessengerController.deinit()
{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_defaultActor_destroy();
  return v0;
}

uint64_t GroupSessionMessengerController.__deallocating_deinit()
{
  GroupSessionMessengerController.deinit();
  return swift_defaultActor_deallocate();
}

void type metadata accessor for GroupSessionMessengerController()
{
  JUMPOUT(0x24BD0F874);
}

uint64_t specialized Array.append<A>(contentsOf:)(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  int64_t v15;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    v8 = *(_QWORD *)(a1 + 16);
    if (v8)
      goto LABEL_5;
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
  if (v4 <= v5)
    v15 = v4 + v2;
  else
    v15 = v4;
  v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v15, 1, v3);
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
    goto LABEL_18;
LABEL_5:
  v9 = v3[2];
  if ((v3[3] >> 1) - v9 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v10 = (unint64_t)&v3[v9 + 4];
  if (a1 + 32 < v10 + 8 * v8 && v10 < a1 + 32 + 8 * v8)
    goto LABEL_24;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Task<(), Never>);
  swift_arrayInitWithCopy();
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v12 = v3[2];
  v13 = __OFADD__(v12, v8);
  v14 = v12 + v8;
  if (!v13)
  {
    v3[2] = v14;
LABEL_19:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = (unint64_t)&v3[3 * v8 + 4];
  if (a1 + 32 < v9 + 24 * v2 && v9 < a1 + 32 + 24 * v2)
    goto LABEL_24;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, ParticipantHandleMap.ParticipantKind));
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)v1 = v3;
    return result;
  }
  v11 = v3[2];
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void ParticipantHandleMap.ParticipantKind.hash(into:)(uint64_t a1, void *a2)
{
  uint64_t v2;
  id v3;

  if (a2)
  {
    v3 = a2;
    CKShareParticipant.participantIdentifier.getter();
    if (v2)
    {
      Hasher._combine(_:)(1u);
      String.hash(into:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      Hasher._combine(_:)(0);
    }

  }
  else
  {
    String.hash(into:)();
  }
}

Swift::Int ParticipantHandleMap.ParticipantKind.hashValue.getter(void *a1)
{
  id v2;
  uint64_t v3;

  Hasher.init(_seed:)();
  if (a1)
  {
    v2 = a1;
    CKShareParticipant.participantIdentifier.getter();
    if (v3)
    {
      Hasher._combine(_:)(1u);
      String.hash(into:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      Hasher._combine(_:)(0);
    }

  }
  else
  {
    String.hash(into:)();
  }
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ParticipantHandleMap.ParticipantKind()
{
  void **v0;

  return ParticipantHandleMap.ParticipantKind.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance ParticipantHandleMap.ParticipantKind(uint64_t a1)
{
  void **v1;

  ParticipantHandleMap.ParticipantKind.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ParticipantHandleMap.ParticipantKind()
{
  void **v0;
  void *v1;
  id v2;
  uint64_t v3;

  v1 = *v0;
  Hasher.init(_seed:)();
  if (v1)
  {
    v2 = v1;
    CKShareParticipant.participantIdentifier.getter();
    if (v3)
    {
      Hasher._combine(_:)(1u);
      String.hash(into:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      Hasher._combine(_:)(0);
    }

  }
  else
  {
    String.hash(into:)();
  }
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ParticipantHandleMap.ParticipantKind(void **a1, void **a2)
{
  return specialized static ParticipantHandleMap.ParticipantKind.== infix(_:_:)(*a1, *a2);
}

uint64_t CKShareParticipant.handles.getter()
{
  void *v0;
  id v1;
  id v2;
  uint64_t result;
  id v4;
  void *v5;
  id v6;
  id v7;
  void *v8;
  Swift::Int v9;
  Swift::Int v10;
  Swift::Int v11;
  id v12;
  Swift::Int v13;
  Swift::Int v14;
  Swift::Int v15;
  id v16;
  void *v17;
  id v18;
  id v19;
  void *v20;
  Swift::Int v21;
  Swift::Int v22;
  Swift::Int v23;
  id v24;
  Swift::Int v25;
  Swift::Int v26;
  Swift::Int v27;
  Swift::Int v28;
  uint64_t v29;

  v1 = objc_msgSend(v0, sel_userIdentity);
  v2 = objc_msgSend(v1, sel_lookupInfo);

  result = MEMORY[0x24BEE4B08];
  if (v2)
  {
    v29 = MEMORY[0x24BEE4B08];
    v4 = objc_msgSend(v2, sel_emailAddress);
    if (v4)
    {
      v5 = v4;
      v6 = objc_msgSend((id)objc_opt_self(), sel_normalizedEmailAddressHandleForValue_, v4);

      if (v6)
      {
        v7 = objc_msgSend(v6, sel_normalizedValue);
        if (v7)
        {
          v8 = v7;
          v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          v11 = v10;

          specialized Set._Variant.insert(_:)(&v28, v9, v11);
          swift_bridgeObjectRelease();
        }
        v12 = objc_msgSend(v6, sel_value);
        v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v15 = v14;

        specialized Set._Variant.insert(_:)(&v28, v13, v15);
        swift_bridgeObjectRelease();
      }
    }
    v16 = objc_msgSend(v2, sel_phoneNumber);
    if (v16
      && (v17 = v16,
          v18 = objc_msgSend((id)objc_opt_self(), sel_normalizedPhoneNumberHandleForValue_isoCountryCode_, v16, 0),
          v17,
          v18))
    {
      v19 = objc_msgSend(v18, sel_normalizedValue);
      if (v19)
      {
        v20 = v19;
        v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v23 = v22;

        specialized Set._Variant.insert(_:)(&v28, v21, v23);
        swift_bridgeObjectRelease();
      }
      v24 = objc_msgSend(v18, sel_value);
      v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v27 = v26;

      specialized Set._Variant.insert(_:)(&v28, v25, v27);
      swift_bridgeObjectRelease();
    }
    else
    {

    }
    return v29;
  }
  return result;
}

uint64_t ParticipantHandleMap.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_defaultActor_destroy();
  return swift_defaultActor_deallocate();
}

uint64_t type metadata accessor for ParticipantHandleMap()
{
  return objc_opt_self();
}

void **initializeBufferWithCopyOfBuffer for ParticipantHandleMap.ParticipantKind(void **a1, void **a2)
{
  void *v3;
  id v4;

  v3 = *a2;
  *a1 = *a2;
  v4 = v3;
  return a1;
}

void destroy for ParticipantHandleMap.ParticipantKind(id *a1)
{

}

void **assignWithCopy for ParticipantHandleMap.ParticipantKind(void **a1, void **a2)
{
  void *v3;
  void *v4;
  id v5;

  v3 = *a2;
  v4 = *a1;
  *a1 = *a2;
  v5 = v3;

  return a1;
}

_QWORD *__swift_memcpy8_8(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  return result;
}

void **assignWithTake for ParticipantHandleMap.ParticipantKind(void **a1, void **a2)
{
  void *v3;

  v3 = *a1;
  *a1 = *a2;

  return a1;
}

uint64_t getEnumTagSinglePayload for ParticipantHandleMap.ParticipantKind(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 8))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  if ((v3 + 1) >= 2)
    return v3;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for ParticipantHandleMap.ParticipantKind(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = 0;
    *(_DWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

uint64_t getEnumTag for ParticipantHandleMap.ParticipantKind(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

_QWORD *destructiveInjectEnumTag for ParticipantHandleMap.ParticipantKind(_QWORD *result, int a2)
{
  unsigned int v2;

  if (a2 < 0)
  {
    v2 = a2 ^ 0x80000000;
  }
  else
  {
    if (!a2)
      return result;
    v2 = a2 - 1;
  }
  *result = v2;
  return result;
}

ValueMetadata *type metadata accessor for ParticipantHandleMap.ParticipantKind()
{
  return &type metadata for ParticipantHandleMap.ParticipantKind;
}

unint64_t lazy protocol witness table accessor for type ParticipantHandleMap.ParticipantKind and conformance ParticipantHandleMap.ParticipantKind()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticipantHandleMap.ParticipantKind and conformance ParticipantHandleMap.ParticipantKind;
  if (!lazy protocol witness table cache variable for type ParticipantHandleMap.ParticipantKind and conformance ParticipantHandleMap.ParticipantKind)
  {
    result = MEMORY[0x24BD0F8BC](&protocol conformance descriptor for ParticipantHandleMap.ParticipantKind, &type metadata for ParticipantHandleMap.ParticipantKind);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticipantHandleMap.ParticipantKind and conformance ParticipantHandleMap.ParticipantKind);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticipantHandleMap.ParticipantKind and conformance ParticipantHandleMap.ParticipantKind;
  if (!lazy protocol witness table cache variable for type ParticipantHandleMap.ParticipantKind and conformance ParticipantHandleMap.ParticipantKind)
  {
    result = MEMORY[0x24BD0F8BC](&protocol conformance descriptor for ParticipantHandleMap.ParticipantKind, &type metadata for ParticipantHandleMap.ParticipantKind);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticipantHandleMap.ParticipantKind and conformance ParticipantHandleMap.ParticipantKind);
  }
  return result;
}

void specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(_QWORD *a1, char a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  _QWORD *v9;
  id v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  unint64_t v17;
  char v18;
  void *v19;
  id v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  id *v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  _QWORD *v31;
  unint64_t v32;
  char v33;
  uint64_t v34;
  _BOOL8 v35;
  uint64_t v36;
  char v37;
  char v38;
  _QWORD *v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  Swift::String v43;
  Swift::String v44;

  v3 = a1[2];
  if (!v3)
  {
    swift_bridgeObjectRelease();
    return;
  }
  v7 = a1[4];
  v6 = a1[5];
  v8 = (void *)a1[6];
  swift_bridgeObjectRetain();
  v9 = (_QWORD *)*a3;
  v10 = v8;
  swift_bridgeObjectRetain();
  v12 = specialized __RawDictionaryStorage.find<A>(_:)(v7, v6);
  v13 = v9[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
    goto LABEL_23;
  v16 = v11;
  if (v9[3] >= v15)
  {
    if ((a2 & 1) != 0)
    {
      if ((v11 & 1) != 0)
        goto LABEL_10;
    }
    else
    {
      specialized _NativeDictionary.copy()();
      if ((v16 & 1) != 0)
        goto LABEL_10;
    }
LABEL_13:
    v21 = (_QWORD *)*a3;
    *(_QWORD *)(*a3 + 8 * (v12 >> 6) + 64) |= 1 << v12;
    v22 = (uint64_t *)(v21[6] + 16 * v12);
    *v22 = v7;
    v22[1] = v6;
    *(_QWORD *)(v21[7] + 8 * v12) = v8;
    v23 = v21[2];
    v24 = __OFADD__(v23, 1);
    v25 = v23 + 1;
    if (v24)
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v21[2] = v25;
    v26 = v3 - 1;
    if (v3 == 1)
    {
LABEL_22:
      swift_bridgeObjectRelease_n();
      return;
    }
    v27 = (id *)(a1 + 9);
    while (1)
    {
      v29 = (uint64_t)*(v27 - 2);
      v28 = (uint64_t)*(v27 - 1);
      v30 = *v27;
      v31 = (_QWORD *)*a3;
      v10 = *v27;
      swift_bridgeObjectRetain();
      v32 = specialized __RawDictionaryStorage.find<A>(_:)(v29, v28);
      v34 = v31[2];
      v35 = (v33 & 1) == 0;
      v24 = __OFADD__(v34, v35);
      v36 = v34 + v35;
      if (v24)
        break;
      v37 = v33;
      if (v31[3] < v36)
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v36, 1);
        v32 = specialized __RawDictionaryStorage.find<A>(_:)(v29, v28);
        if ((v37 & 1) != (v38 & 1))
          goto LABEL_25;
      }
      if ((v37 & 1) != 0)
        goto LABEL_10;
      v39 = (_QWORD *)*a3;
      *(_QWORD *)(*a3 + 8 * (v32 >> 6) + 64) |= 1 << v32;
      v40 = (uint64_t *)(v39[6] + 16 * v32);
      *v40 = v29;
      v40[1] = v28;
      *(_QWORD *)(v39[7] + 8 * v32) = v30;
      v41 = v39[2];
      v24 = __OFADD__(v41, 1);
      v42 = v41 + 1;
      if (v24)
        goto LABEL_24;
      v27 += 3;
      v39[2] = v42;
      if (!--v26)
        goto LABEL_22;
    }
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a2 & 1);
  v17 = specialized __RawDictionaryStorage.find<A>(_:)(v7, v6);
  if ((v16 & 1) == (v18 & 1))
  {
    v12 = v17;
    if ((v16 & 1) == 0)
      goto LABEL_13;
LABEL_10:
    v19 = (void *)swift_allocError();
    swift_willThrow();
    v20 = v19;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    if ((swift_dynamicCast() & 1) == 0)
    {
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease_n();
      return;
    }
    goto LABEL_26;
  }
LABEL_25:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
LABEL_26:
  _StringGuts.grow(_:)(30);
  v43._object = (void *)0x800000024A4306B0;
  v43._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v43);
  _print_unlocked<A, B>(_:_:)();
  v44._countAndFlagsBits = 39;
  v44._object = (void *)0xE100000000000000;
  String.append(_:)(v44);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  _QWORD *v9;
  id v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  unint64_t v17;
  char v18;
  void *v19;
  id v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  void **v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  _QWORD *v31;
  unint64_t v32;
  char v33;
  uint64_t v34;
  _BOOL8 v35;
  uint64_t v36;
  char v37;
  char v38;
  _QWORD *v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  Swift::String v43;
  Swift::String v44;
  uint64_t v45;

  if (!a1[2])
  {
    swift_bridgeObjectRelease();
    return;
  }
  v45 = a1[2];
  v7 = a1[4];
  v6 = a1[5];
  v8 = (void *)a1[6];
  swift_bridgeObjectRetain();
  v9 = (_QWORD *)*a3;
  swift_bridgeObjectRetain();
  v10 = v8;
  v12 = specialized __RawDictionaryStorage.find<A>(_:)(v7, v6);
  v13 = v9[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
    goto LABEL_23;
  v16 = v11;
  if (v9[3] >= v15)
  {
    if ((a2 & 1) != 0)
    {
      if ((v11 & 1) != 0)
        goto LABEL_10;
    }
    else
    {
      specialized _NativeDictionary.copy()();
      if ((v16 & 1) != 0)
        goto LABEL_10;
    }
LABEL_13:
    v21 = (_QWORD *)*a3;
    *(_QWORD *)(*a3 + 8 * (v12 >> 6) + 64) |= 1 << v12;
    v22 = (uint64_t *)(v21[6] + 16 * v12);
    *v22 = v7;
    v22[1] = v6;
    *(_QWORD *)(v21[7] + 8 * v12) = v10;
    v23 = v21[2];
    v24 = __OFADD__(v23, 1);
    v25 = v23 + 1;
    if (v24)
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v21[2] = v25;
    v26 = v45 - 1;
    if (v45 == 1)
    {
LABEL_22:
      swift_bridgeObjectRelease_n();
      return;
    }
    v27 = (void **)(a1 + 9);
    while (1)
    {
      v29 = (uint64_t)*(v27 - 2);
      v28 = (uint64_t)*(v27 - 1);
      v30 = *v27;
      v31 = (_QWORD *)*a3;
      swift_bridgeObjectRetain();
      v10 = v30;
      v32 = specialized __RawDictionaryStorage.find<A>(_:)(v29, v28);
      v34 = v31[2];
      v35 = (v33 & 1) == 0;
      v24 = __OFADD__(v34, v35);
      v36 = v34 + v35;
      if (v24)
        break;
      v37 = v33;
      if (v31[3] < v36)
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v36, 1);
        v32 = specialized __RawDictionaryStorage.find<A>(_:)(v29, v28);
        if ((v37 & 1) != (v38 & 1))
          goto LABEL_25;
      }
      if ((v37 & 1) != 0)
        goto LABEL_10;
      v39 = (_QWORD *)*a3;
      *(_QWORD *)(*a3 + 8 * (v32 >> 6) + 64) |= 1 << v32;
      v40 = (uint64_t *)(v39[6] + 16 * v32);
      *v40 = v29;
      v40[1] = v28;
      *(_QWORD *)(v39[7] + 8 * v32) = v10;
      v41 = v39[2];
      v24 = __OFADD__(v41, 1);
      v42 = v41 + 1;
      if (v24)
        goto LABEL_24;
      v39[2] = v42;
      v27 += 3;
      if (!--v26)
        goto LABEL_22;
    }
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a2 & 1);
  v17 = specialized __RawDictionaryStorage.find<A>(_:)(v7, v6);
  if ((v16 & 1) == (v18 & 1))
  {
    v12 = v17;
    if ((v16 & 1) == 0)
      goto LABEL_13;
LABEL_10:
    v19 = (void *)swift_allocError();
    swift_willThrow();
    v20 = v19;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    if ((swift_dynamicCast() & 1) == 0)
    {
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease_n();
      return;
    }
    goto LABEL_26;
  }
LABEL_25:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
LABEL_26:
  _StringGuts.grow(_:)(30);
  v43._object = (void *)0x800000024A4306B0;
  v43._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v43);
  _print_unlocked<A, B>(_:_:)();
  v44._countAndFlagsBits = 39;
  v44._object = (void *)0xE100000000000000;
  String.append(_:)(v44);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t specialized Set.startIndex.getter(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 56);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 3)
    v7 = 3;
  v8 = v7 - 3;
  v9 = (unint64_t *)(a1 + 80);
  v2 = 128;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

int64_t specialized _NativeSet.index(after:)(int64_t result, int a2, char a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  if ((a3 & 1) != 0)
    goto LABEL_20;
  v4 = result;
  if (result < 0 || (result = 1 << *(_BYTE *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }
  v5 = v4 >> 6;
  v6 = a4 + 56;
  v7 = *(_QWORD *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  v8 = v7 & (-2 << (v4 & 0x3F));
  if (v8)
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0;
  v9 = v5 + 1;
  v10 = (unint64_t)(result + 63) >> 6;
  if (v5 + 1 < v10)
  {
    v11 = *(_QWORD *)(v6 + 8 * v9);
    if (v11)
      return __clz(__rbit64(v11)) + (v9 << 6);
    v9 = v5 + 2;
    if (v5 + 2 < v10)
    {
      v11 = *(_QWORD *)(v6 + 8 * v9);
      if (v11)
        return __clz(__rbit64(v11)) + (v9 << 6);
      while (v10 - 3 != v5)
      {
        v11 = *(_QWORD *)(a4 + 80 + 8 * v5++);
        if (v11)
        {
          v9 = v5 + 2;
          return __clz(__rbit64(v11)) + (v9 << 6);
        }
      }
    }
  }
  return result;
}

uint64_t specialized static ParticipantHandleMap.ParticipantKind.== infix(_:_:)(void *a1, void *a2)
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  id v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  char v18;

  if (a1)
  {
    v4 = a1;
    CKShareParticipant.participantIdentifier.getter();
    v6 = v5;
    swift_bridgeObjectRelease();

    if (!v6 || !a2)
      return 0;
  }
  else if (!a2)
  {
    return 1;
  }
  v7 = a2;
  CKShareParticipant.participantIdentifier.getter();
  v9 = v8;
  swift_bridgeObjectRelease();

  if (v9 && a1)
  {
    v10 = a1;
    v11 = v7;
    v12 = CKShareParticipant.participantIdentifier.getter();
    v14 = v13;
    v15 = CKShareParticipant.participantIdentifier.getter();
    v17 = v16;
    if (v14)
    {
      if (v16)
      {
        if (v12 == v15 && v14 == v16)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          return 1;
        }
        v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        if ((v18 & 1) != 0)
          return 1;
      }
      else
      {
        swift_bridgeObjectRelease();

      }
    }
    else
    {

      if (!v17)
        return 1;
      swift_bridgeObjectRelease();
    }
  }
  return 0;
}

uint64_t specialized static ParticipantHandleMap.handlesToParticipantKindsForShare(_:)(void *a1)
{
  uint64_t v1;
  id v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t i;
  id v6;
  void *v7;
  id v8;
  id v9;
  unint64_t v10;
  uint64_t v11;
  id v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  id v17;
  id v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  id v25;
  void *v26;
  void *v27;
  id v28;
  uint64_t v29;
  int64_t v30;
  uint64_t v31;
  int64_t v32;
  int v33;
  int v34;
  char v35;
  char v36;
  uint64_t *v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  _QWORD *v41;
  int64_t v42;
  uint64_t v43;
  char v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t j;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  id v60;
  uint64_t v61;
  char v62;
  int64_t v63;
  uint64_t v64;
  uint64_t v65;

  v1 = (uint64_t)a1;
  v2 = objc_msgSend(a1, sel_currentUserParticipant);
  if (v2)
  {

    v1 = (uint64_t)objc_msgSend((id)v1, sel_participants);
    type metadata accessor for CKShareParticipant();
    v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    v65 = MEMORY[0x24BEE4AF8];
    if (v3 >> 62)
    {
      swift_bridgeObjectRetain();
      v4 = _CocoaArrayWrapper.endIndex.getter();
      if (v4)
        goto LABEL_4;
    }
    else
    {
      v4 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v4)
      {
LABEL_4:
        if (v4 < 1)
        {
          __break(1u);
LABEL_66:
          __break(1u);
          goto LABEL_67;
        }
        for (i = 0; i != v4; ++i)
        {
          if ((v3 & 0xC000000000000001) != 0)
            v6 = (id)MEMORY[0x24BD0F250](i, v3);
          else
            v6 = *(id *)(v3 + 8 * i + 32);
          v7 = v6;
          if (objc_msgSend(v6, sel_acceptanceStatus) == (id)2
            && (v8 = objc_msgSend(v7, sel_userIdentity),
                v9 = objc_msgSend(v8, sel_userRecordID),
                v8,
                v9))
          {

            MEMORY[0x24BD0EF68]();
            if (*(_QWORD *)((v65 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v65 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();
          }
          else
          {

          }
        }
        swift_bridgeObjectRelease();
        v10 = v65;
LABEL_24:
        swift_bridgeObjectRelease();
        if (v10 >> 62)
          goto LABEL_54;
        v1 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
        while (v1)
        {
          v65 = MEMORY[0x24BEE4AF8];
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v1 & ~(v1 >> 63), 0);
          if (v1 < 0)
            goto LABEL_66;
          v23 = 0;
          v55 = v1;
          v56 = v10 & 0xC000000000000001;
          v24 = v65;
          v53 = v10 + 32;
          v54 = v10;
          while (v23 != v1)
          {
            if (v56)
              v25 = (id)MEMORY[0x24BD0F250](v23, v10);
            else
              v25 = *(id *)(v53 + 8 * v23);
            v26 = v25;
            v58 = v23;
            v59 = v24;
            if ((objc_msgSend(v25, sel_isCurrentUser) & 1) != 0)
            {
              v27 = 0;
            }
            else
            {
              v28 = v26;
              v27 = v26;
            }
            v29 = CKShareParticipant.handles.getter();
            v30 = *(_QWORD *)(v29 + 16);
            if (v30)
            {
              v57 = v26;
              v64 = MEMORY[0x24BEE4AF8];
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v30, 0);
              v31 = v64;
              v32 = specialized Set.startIndex.getter(v29);
              v34 = v33;
              v36 = v35 & 1;
              while ((v32 & 0x8000000000000000) == 0 && v32 < 1 << *(_BYTE *)(v29 + 32))
              {
                if (((*(_QWORD *)(v29 + 56 + (((unint64_t)v32 >> 3) & 0xFFFFFFFFFFFFF8)) >> v32) & 1) == 0)
                  goto LABEL_51;
                if (*(_DWORD *)(v29 + 36) != v34)
                  goto LABEL_52;
                v62 = v36;
                v37 = (uint64_t *)(*(_QWORD *)(v29 + 48) + 16 * v32);
                v38 = v37[1];
                v61 = *v37;
                v10 = (unint64_t)v27;
                v39 = *(_QWORD *)(v64 + 16);
                v40 = *(_QWORD *)(v64 + 24);
                v63 = v39 + 1;
                swift_bridgeObjectRetain();
                v60 = (id)v10;
                if (v39 >= v40 >> 1)
                  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v40 > 1, v63, 1);
                *(_QWORD *)(v64 + 16) = v63;
                v41 = (_QWORD *)(v64 + 24 * v39);
                v41[4] = v61;
                v41[5] = v38;
                v41[6] = v10;
                v42 = specialized _NativeSet.index(after:)(v32, v34, v62 & 1, v29);
                v32 = v42;
                v34 = v43;
                v36 = v44 & 1;
                --v30;
                v27 = (void *)v10;
                if (!v30)
                {
                  outlined consume of Set<String>.Index._Variant(v42, v43, v36);

                  swift_bridgeObjectRelease();
                  v10 = v54;
                  goto LABEL_46;
                }
              }
              __break(1u);
LABEL_51:
              __break(1u);
LABEL_52:
              __break(1u);
              break;
            }

            swift_bridgeObjectRelease();
            v31 = MEMORY[0x24BEE4AF8];
LABEL_46:
            v24 = v59;
            v65 = v59;
            v46 = *(_QWORD *)(v59 + 16);
            v45 = *(_QWORD *)(v59 + 24);
            if (v46 >= v45 >> 1)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v45 > 1, v46 + 1, 1);
              v24 = v65;
            }
            v23 = v58 + 1;
            *(_QWORD *)(v24 + 16) = v46 + 1;
            *(_QWORD *)(v24 + 8 * v46 + 32) = v31;
            v1 = v55;
            if (v58 + 1 == v55)
            {
              swift_bridgeObjectRelease();
              goto LABEL_56;
            }
          }
          __break(1u);
LABEL_54:
          swift_bridgeObjectRetain();
          v1 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        v24 = MEMORY[0x24BEE4AF8];
LABEL_56:
        v65 = MEMORY[0x24BEE4AF8];
        v47 = *(_QWORD *)(v24 + 16);
        if (v47)
        {
          swift_bridgeObjectRetain();
          for (j = 0; j != v47; ++j)
          {
            v49 = swift_bridgeObjectRetain();
            specialized Array.append<A>(contentsOf:)(v49);
          }
          swift_bridgeObjectRelease_n();
          if (*(_QWORD *)(v65 + 16))
            goto LABEL_60;
        }
        else
        {
          swift_bridgeObjectRelease();
          if (*(_QWORD *)(MEMORY[0x24BEE4AF8] + 16))
          {
LABEL_60:
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, ParticipantHandleMap.ParticipantKind>);
            v50 = static _DictionaryStorage.allocate(capacity:)();
            goto LABEL_63;
          }
        }
        v50 = MEMORY[0x24BEE4B00];
LABEL_63:
        v65 = v50;
        v51 = (_QWORD *)swift_bridgeObjectRetain();
        specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v51, 1, &v65);
        if (v52)
        {
          result = swift_unexpectedError();
          __break(1u);
        }
        else
        {
          swift_bridgeObjectRelease();
          return v65;
        }
        return result;
      }
    }
    swift_bridgeObjectRelease();
    v10 = MEMORY[0x24BEE4AF8];
    goto LABEL_24;
  }
  if (one-time initialization token for tabGroup != -1)
LABEL_67:
    swift_once();
  v11 = type metadata accessor for Logger();
  __swift_project_value_buffer(v11, (uint64_t)static Logger.tabGroup);
  v12 = (id)v1;
  v13 = Logger.logObject.getter();
  v14 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v13, v14))
  {
    v15 = (uint8_t *)swift_slowAlloc();
    v16 = swift_slowAlloc();
    v65 = v16;
    *(_DWORD *)v15 = 136315138;
    v17 = objc_msgSend(v12, sel_recordID);
    v18 = objc_msgSend(v17, sel_ckShortDescription);

    v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v21 = v20;

    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v21, &v65);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_24A3EF000, v13, v14, "Share %s does not have a currentUserParticipant", v15, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24BD0F964](v16, -1, -1);
    MEMORY[0x24BD0F964](v15, -1, -1);

  }
  else
  {

  }
  lazy protocol witness table accessor for type ParticipantHandleMap.Errors and conformance ParticipantHandleMap.Errors();
  swift_allocError();
  return swift_willThrow();
}

unint64_t lazy protocol witness table accessor for type ParticipantHandleMap.Errors and conformance ParticipantHandleMap.Errors()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticipantHandleMap.Errors and conformance ParticipantHandleMap.Errors;
  if (!lazy protocol witness table cache variable for type ParticipantHandleMap.Errors and conformance ParticipantHandleMap.Errors)
  {
    result = MEMORY[0x24BD0F8BC](&protocol conformance descriptor for ParticipantHandleMap.Errors, &type metadata for ParticipantHandleMap.Errors);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticipantHandleMap.Errors and conformance ParticipantHandleMap.Errors);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ParticipantHandleMap.Errors and conformance ParticipantHandleMap.Errors;
  if (!lazy protocol witness table cache variable for type ParticipantHandleMap.Errors and conformance ParticipantHandleMap.Errors)
  {
    result = MEMORY[0x24BD0F8BC](&protocol conformance descriptor for ParticipantHandleMap.Errors, &type metadata for ParticipantHandleMap.Errors);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ParticipantHandleMap.Errors and conformance ParticipantHandleMap.Errors);
  }
  return result;
}

uint64_t outlined consume of Set<String>.Index._Variant(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if ((a3 & 1) != 0)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t storeEnumTagSinglePayload for ParticipantHandleMap.Errors(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_24A3F650C + 4 * byte_24A42F730[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_24A3F652C + 4 * byte_24A42F735[v4]))();
}

_BYTE *sub_24A3F650C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_24A3F652C(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_24A3F6534(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_24A3F653C(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_24A3F6544(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_24A3F654C(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for ParticipantHandleMap.Errors()
{
  return &type metadata for ParticipantHandleMap.Errors;
}

uint64_t specialized closure #1 in AsyncBufferedQueue.init(bufferingPolicy:)(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;

  outlined destroy of TaskPriority?(a2, a3);
  v7 = __swift_instantiateConcreteTypeFromMangledName(a4);
  v8 = *(_QWORD *)(v7 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(a2, a1, v7);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v8 + 56))(a2, 0, 1, v7);
}

void specialized CollaborationConnectionManager.currentGroupSessionProvider.getter()
{
  swift_beginAccess();
  __asm { BR              X10 }
}

uint64_t sub_24A3F6CA8()
{
  return swift_retain();
}

uint64_t specialized CollaborationConnectionManager.participantUpdates()(uint64_t (*a1)(BOOL, uint64_t, uint64_t, unint64_t), uint64_t *a2, void (*a3)(BOOL, uint64_t, uint64_t))
{
  uint64_t v3;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v18;
  unint64_t v19;
  uint64_t (*v21)(BOOL, uint64_t, uint64_t, unint64_t);
  uint64_t v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  char v26[8];
  char v27[8];

  v21 = a1;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<Set<Participant>>.Continuation.BufferingPolicy);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (unint64_t *)(v3 + *(_QWORD *)(*(_QWORD *)v3 + 176));
  swift_beginAccess();
  v11 = *v10;
  v12 = MEMORY[0x24BEE4AF8];
  v25 = MEMORY[0x24BEE4AF8];
  v13 = *(_QWORD *)(v11 + 16);
  swift_bridgeObjectRetain();
  if (v13)
  {
    v22 = v7;
    v23 = v6;
    v24 = v9;
    v14 = 0;
    v15 = v11 + 32;
    while (v14 < *(_QWORD *)(v11 + 16))
    {
      outlined init with copy of TaskPriority?(v15, (uint64_t)v27, a2);
      if (swift_weakLoadStrong())
      {
        swift_release();
        outlined init with take of ParticipantPresenceCoordinator.ConnectionManagerStore.SharedConnection?((uint64_t)v27, (uint64_t)v26, a2);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          a3(0, *(_QWORD *)(v12 + 16) + 1, 1);
        v12 = v25;
        v6 = *(_QWORD *)(v25 + 16);
        v16 = *(_QWORD *)(v25 + 24);
        if (v6 >= v16 >> 1)
        {
          a3(v16 > 1, v6 + 1, 1);
          v12 = v25;
        }
        *(_QWORD *)(v12 + 16) = v6 + 1;
        outlined init with take of ParticipantPresenceCoordinator.ConnectionManagerStore.SharedConnection?((uint64_t)v26, v12 + 8 * v6 + 32, a2);
      }
      else
      {
        outlined destroy of TaskPriority?((uint64_t)v27, a2);
      }
      ++v14;
      v15 += 8;
      if (v13 == v14)
      {
        v9 = v24;
        v12 = v25;
        v7 = v22;
        v6 = v23;
        goto LABEL_13;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_13:
    swift_bridgeObjectRelease();
    *v10 = v12;
    swift_bridgeObjectRelease();
    (*(void (**)(char *, _QWORD, unint64_t))(v7 + 104))(v9, *MEMORY[0x24BEE6A10], v6);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncBufferedQueue<Set<Participant>>);
    swift_allocObject();
    v12 = specialized AsyncBufferedQueue.init(bufferingPolicy:)((uint64_t)v9);
    swift_weakInit();
    swift_beginAccess();
    v6 = *v10;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *v10 = v6;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_14;
  }
  v6 = v21(0, *(_QWORD *)(v6 + 16) + 1, 1, v6);
  *v10 = v6;
LABEL_14:
  v19 = *(_QWORD *)(v6 + 16);
  v18 = *(_QWORD *)(v6 + 24);
  if (v19 >= v18 >> 1)
  {
    v6 = v21(v18 > 1, v19 + 1, 1, v6);
    *v10 = v6;
  }
  *(_QWORD *)(v6 + 16) = v19 + 1;
  outlined init with take of ParticipantPresenceCoordinator.ConnectionManagerStore.SharedConnection?((uint64_t)v27, v6 + 8 * v19 + 32, a2);
  swift_endAccess();
  return v12;
}

uint64_t specialized CollaborationConnectionManager.sendPresenceUpdateMessage(_:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2[17] = a1;
  v2[18] = v1;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<PresenceUpdateMessage>.Continuation.YieldResult);
  v2[19] = v3;
  v2[20] = *(_QWORD *)(v3 - 8);
  v2[21] = swift_task_alloc();
  return swift_task_switch();
}

{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2[17] = a1;
  v2[18] = v1;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<PresenceUpdateMessage>.Continuation.YieldResult);
  v2[19] = v3;
  v2[20] = *(_QWORD *)(v3 - 8);
  v2[21] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t specialized CollaborationConnectionManager.sendPresenceUpdateMessage(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  BOOL v5;
  uint64_t v6;
  uint8_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  BOOL v13;
  uint64_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v27;
  uint64_t v28;

  if (*(_QWORD *)(*(_QWORD *)(v0 + 144) + 168))
  {
    v1 = one-time initialization token for tabGroup;
    swift_retain();
    if (v1 != -1)
      swift_once();
    v2 = type metadata accessor for Logger();
    __swift_project_value_buffer(v2, (uint64_t)static Logger.tabGroup);
    swift_retain();
    v3 = Logger.logObject.getter();
    v4 = static os_log_type_t.info.getter();
    v5 = os_log_type_enabled(v3, v4);
    v6 = *(_QWORD *)(v0 + 144);
    if (v5)
    {
      v7 = (uint8_t *)swift_slowAlloc();
      v27 = swift_slowAlloc();
      v28 = v27;
      *(_DWORD *)v7 = 136446210;
      swift_beginAccess();
      v9 = *(_QWORD *)(v6 + 136);
      v8 = *(_QWORD *)(v6 + 144);
      swift_bridgeObjectRetain();
      *(_QWORD *)(v0 + 128) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v8, &v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release();
      _os_log_impl(&dword_24A3EF000, v3, v4, "Session is active with message controller for activity %{public}s", v7, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24BD0F964](v27, -1, -1);
      MEMORY[0x24BD0F964](v7, -1, -1);
    }
    else
    {
      swift_release();
    }

    v20 = *(_QWORD *)(v0 + 160);
    v19 = *(_QWORD *)(v0 + 168);
    v21 = *(_QWORD *)(v0 + 152);
    v22 = *(__int128 **)(v0 + 136);
    v24 = v22[1];
    v23 = v22[2];
    v25 = *v22;
    *(_QWORD *)(v0 + 64) = *((_QWORD *)v22 + 6);
    *(_OWORD *)(v0 + 32) = v24;
    *(_OWORD *)(v0 + 48) = v23;
    *(_OWORD *)(v0 + 16) = v25;
    outlined retain of PresenceUpdateMessage((uint64_t *)v22);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<PresenceUpdateMessage>.Continuation);
    AsyncStream.Continuation.yield(_:)();
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v19, v21);
    swift_release();
  }
  else
  {
    if (one-time initialization token for tabGroup != -1)
      swift_once();
    v10 = type metadata accessor for Logger();
    __swift_project_value_buffer(v10, (uint64_t)static Logger.tabGroup);
    swift_retain();
    v11 = Logger.logObject.getter();
    v12 = static os_log_type_t.info.getter();
    v13 = os_log_type_enabled(v11, v12);
    v14 = *(_QWORD *)(v0 + 144);
    if (v13)
    {
      v15 = (uint8_t *)swift_slowAlloc();
      v16 = swift_slowAlloc();
      v28 = v16;
      *(_DWORD *)v15 = 136446210;
      swift_beginAccess();
      v17 = *(_QWORD *)(v14 + 136);
      v18 = *(_QWORD *)(v14 + 144);
      swift_bridgeObjectRetain();
      *(_QWORD *)(v0 + 120) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, &v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release();
      _os_log_impl(&dword_24A3EF000, v11, v12, "Message ignored while there are no active sessions for activity: %{public}s", v15, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24BD0F964](v16, -1, -1);
      MEMORY[0x24BD0F964](v15, -1, -1);
    }
    else
    {
      swift_release();
    }

  }
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t specialized closure #1 in CollaborationConnectionManager.startActivity()(uint64_t a1, char a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v5;
  _QWORD *v7;

  v3[2] = a1;
  v3[3] = a3;
  if ((a2 & 1) != 0)
  {
    swift_retain();
    v7 = (_QWORD *)swift_task_alloc();
    v3[5] = v7;
    *v7 = v3;
    v7[1] = specialized closure #1 in CollaborationConnectionManager.startActivity();
    return specialized CollaborationConnectionManager.leaveGroupSessionProvider(_:)();
  }
  else
  {
    swift_retain();
    v5 = (_QWORD *)swift_task_alloc();
    v3[4] = v5;
    *v5 = v3;
    v5[1] = specialized closure #1 in CollaborationConnectionManager.startActivity();
    return specialized CollaborationConnectionManager.joinGroupSessionProvider(_:)(a1);
  }
}

{
  _QWORD *v3;
  _QWORD *v5;
  _QWORD *v7;

  v3[2] = a1;
  v3[3] = a3;
  if ((a2 & 1) != 0)
  {
    swift_retain();
    v7 = (_QWORD *)swift_task_alloc();
    v3[5] = v7;
    *v7 = v3;
    v7[1] = specialized closure #1 in CollaborationConnectionManager.startActivity();
    return specialized CollaborationConnectionManager.leaveGroupSessionProvider(_:)();
  }
  else
  {
    swift_retain();
    v5 = (_QWORD *)swift_task_alloc();
    v3[4] = v5;
    *v5 = v3;
    v5[1] = specialized closure #1 in CollaborationConnectionManager.startActivity();
    return specialized CollaborationConnectionManager.joinGroupSessionProvider(_:)(a1);
  }
}

uint64_t specialized closure #1 in CollaborationConnectionManager.startActivity()()
{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

void specialized FastSyncStateMachine.startActivity(_:)()
{
  uint64_t v1;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x24BDAC7A8](v1);
  __asm { BR              X12 }
}

{
  uint64_t v1;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x24BDAC7A8](v1);
  __asm { BR              X12 }
}

uint64_t sub_24A3F77D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;

  v5 = (*(uint64_t (**)(uint64_t))(v1 + 40))(v1 + 24);
  if (!v0)
  {
    v7 = v5;
    v8 = type metadata accessor for TaskPriority();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v2, 1, 1, v8);
    v9 = (_QWORD *)swift_allocObject();
    v9[2] = 0;
    v9[3] = 0;
    v9[4] = v4;
    v9[5] = v3;
    v9[6] = v7;
    swift_retain();
    swift_retain();
    v10 = _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfC15GroupActivities08PersonalD15SessionProviderCy17WebBookmarksSwift0F26DeviceCoordinationActivityVG_Tgm5Tm(v2, (uint64_t)&async function pointer to partial apply for specialized closure #1 in FastSyncStateMachine.startActivity(_:), (uint64_t)v9, &demangling cache variable for type metadata for PersonalGroupSessionProvider<PersonalDeviceCoordinationActivity>);
    outlined consume of FastSyncStateMachine<CKShareCollaborationActivity, CKShareGroupSessionProvider<CKShareCollaborationActivity>>.State(*(_QWORD *)v1, *(void **)(v1 + 8), *(_QWORD *)(v1 + 16));
    *(_QWORD *)v1 = v7;
    *(_QWORD *)(v1 + 8) = v10;
    v6 = 1;
    *(_QWORD *)(v1 + 16) = 0;
  }
  return v6 & 1;
}

uint64_t sub_24A3F7AE8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;

  v5 = (*(uint64_t (**)(uint64_t))(v1 + 40))(v1 + 24);
  if (!v0)
  {
    v7 = v5;
    v8 = type metadata accessor for TaskPriority();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v2, 1, 1, v8);
    v9 = (_QWORD *)swift_allocObject();
    v9[2] = 0;
    v9[3] = 0;
    v9[4] = v4;
    v9[5] = v3;
    v9[6] = v7;
    swift_retain();
    swift_retain();
    v10 = _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfC15GroupActivities08PersonalD15SessionProviderCy17WebBookmarksSwift0F26DeviceCoordinationActivityVG_Tgm5Tm(v2, (uint64_t)&async function pointer to partial apply for specialized closure #1 in FastSyncStateMachine.startActivity(_:), (uint64_t)v9, &demangling cache variable for type metadata for CKShareGroupSessionProvider<CKShareCollaborationActivity>);
    outlined consume of FastSyncStateMachine<CKShareCollaborationActivity, CKShareGroupSessionProvider<CKShareCollaborationActivity>>.State(*(_QWORD *)v1, *(void **)(v1 + 8), *(_QWORD *)(v1 + 16));
    *(_QWORD *)v1 = v7;
    *(_QWORD *)(v1 + 8) = v10;
    v6 = 1;
    *(_QWORD *)(v1 + 16) = 0;
  }
  return v6 & 1;
}

uint64_t specialized closure #1 in CollaborationConnectionManager.leaveActivity()()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = specialized closure #3 in closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:);
  return specialized CollaborationConnectionManager.leaveGroupSessionProvider(_:)();
}

{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = specialized closure #3 in closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:);
  return specialized CollaborationConnectionManager.leaveGroupSessionProvider(_:)();
}

void specialized FastSyncStateMachine.leaveActivity(priority:_:)()
{
  uint64_t v1;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x24BDAC7A8](v1);
  __asm { BR              X10 }
}

{
  uint64_t v1;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x24BDAC7A8](v1);
  __asm { BR              X10 }
}

uint64_t sub_24A3F7E94()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t result;

  outlined init with copy of TaskPriority?(v6, v3, &demangling cache variable for type metadata for TaskPriority?);
  v8 = (_QWORD *)swift_allocObject();
  v8[2] = 0;
  v8[3] = 0;
  v8[4] = v5;
  v8[5] = v4;
  v8[6] = v2;
  v8[7] = v0;
  outlined copy of FastSyncStateMachine<CKShareCollaborationActivity, CKShareGroupSessionProvider<CKShareCollaborationActivity>>.State(v0, v5, v7);
  swift_retain();
  swift_retain();
  v9 = _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v3, (uint64_t)&async function pointer to partial apply for specialized closure #2 in FastSyncStateMachine.leaveActivity(priority:_:), (uint64_t)v8);
  outlined consume of FastSyncStateMachine<CKShareCollaborationActivity, CKShareGroupSessionProvider<CKShareCollaborationActivity>>.State(*(_QWORD *)v1, *(void **)(v1 + 8), *(_QWORD *)(v1 + 16));
  *(_QWORD *)v1 = v0;
  *(_QWORD *)(v1 + 8) = v9;
  result = 1;
  *(_QWORD *)(v1 + 16) = 0x4000000000000000;
  return result;
}

uint64_t sub_24A3F8078()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t result;

  outlined init with copy of TaskPriority?(v6, v3, &demangling cache variable for type metadata for TaskPriority?);
  v8 = (_QWORD *)swift_allocObject();
  v8[2] = 0;
  v8[3] = 0;
  v8[4] = v5;
  v8[5] = v4;
  v8[6] = v2;
  v8[7] = v0;
  outlined copy of FastSyncStateMachine<CKShareCollaborationActivity, CKShareGroupSessionProvider<CKShareCollaborationActivity>>.State(v0, v5, v7);
  swift_retain();
  swift_retain();
  v9 = _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v3, (uint64_t)&async function pointer to partial apply for specialized closure #2 in FastSyncStateMachine.leaveActivity(priority:_:), (uint64_t)v8);
  outlined consume of FastSyncStateMachine<CKShareCollaborationActivity, CKShareGroupSessionProvider<CKShareCollaborationActivity>>.State(*(_QWORD *)v1, *(void **)(v1 + 8), *(_QWORD *)(v1 + 16));
  *(_QWORD *)v1 = v0;
  *(_QWORD *)(v1 + 8) = v9;
  result = 1;
  *(_QWORD *)(v1 + 16) = 0x4000000000000000;
  return result;
}

uint64_t specialized CollaborationConnectionManager.joinGroupSessionProvider(_:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v2[21] = a1;
  v2[22] = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  v2[23] = swift_task_alloc();
  return swift_task_switch();
}

{
  uint64_t v1;
  _QWORD *v2;

  v2[21] = a1;
  v2[22] = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  v2[23] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t specialized CollaborationConnectionManager.joinGroupSessionProvider(_:)()
{
  _QWORD *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  BOOL v4;
  uint64_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v12;

  if (one-time initialization token for tabGroup != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  v0[24] = __swift_project_value_buffer(v1, (uint64_t)static Logger.tabGroup);
  swift_retain();
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.default.getter();
  v4 = os_log_type_enabled(v2, v3);
  v5 = v0[22];
  if (v4)
  {
    v6 = (uint8_t *)swift_slowAlloc();
    v7 = swift_slowAlloc();
    v12 = v7;
    *(_DWORD *)v6 = 136446210;
    swift_beginAccess();
    v8 = *(_QWORD *)(v5 + 136);
    v9 = *(_QWORD *)(v5 + 144);
    swift_bridgeObjectRetain();
    v0[20] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v9, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release();
    _os_log_impl(&dword_24A3EF000, v2, v3, "Will join groupSessionProvider for activity: %{public}s", v6, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24BD0F964](v7, -1, -1);
    MEMORY[0x24BD0F964](v6, -1, -1);
  }
  else
  {
    swift_release();
  }

  v10 = (_QWORD *)swift_task_alloc();
  v0[25] = v10;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersonalGroupSessionProvider<PersonalDeviceCoordinationActivity>);
  lazy protocol witness table accessor for type CKShareGroupSessionProvider<CKShareCollaborationActivity> and conformance CKShareGroupSessionProvider<A>(&lazy protocol witness table cache variable for type PersonalGroupSessionProvider<PersonalDeviceCoordinationActivity> and conformance PersonalGroupSessionProvider<A>, &demangling cache variable for type metadata for PersonalGroupSessionProvider<PersonalDeviceCoordinationActivity>, MEMORY[0x24BDD1BB8]);
  *v10 = v0;
  v10[1] = specialized CollaborationConnectionManager.joinGroupSessionProvider(_:);
  return GroupSessionProvider.join()();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 208) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint64_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v16;

  swift_retain();
  v1 = Logger.logObject.getter();
  v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    v3 = *(_QWORD *)(v0 + 176);
    v4 = (uint8_t *)swift_slowAlloc();
    v5 = swift_slowAlloc();
    v16 = v5;
    *(_DWORD *)v4 = 136446210;
    swift_beginAccess();
    v6 = *(_QWORD *)(v3 + 136);
    v7 = *(_QWORD *)(v3 + 144);
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 144) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v7, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release();
    _os_log_impl(&dword_24A3EF000, v1, v2, "Did join groupSessionProvider for activity: %{public}s", v4, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24BD0F964](v5, -1, -1);
    MEMORY[0x24BD0F964](v4, -1, -1);
  }
  else
  {
    swift_release();
  }

  v8 = *(_QWORD *)(v0 + 176);
  v9 = *(_QWORD *)(v0 + 184);
  v10 = *(_QWORD *)(v0 + 168);
  v11 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v9, 1, 1, v11);
  v12 = lazy protocol witness table accessor for type CKShareGroupSessionProvider<CKShareCollaborationActivity> and conformance CKShareGroupSessionProvider<A>(&lazy protocol witness table cache variable for type CollaborationConnectionManager<PersonalDeviceCoordinationActivity, PersonalGroupSessionProvider<PersonalDeviceCoordinationActivity>, PresenceUpdateMessage> and conformance CollaborationConnectionManager<A, B, C>, &demangling cache variable for type metadata for CollaborationConnectionManager<PersonalDeviceCoordinationActivity, PersonalGroupSessionProvider<PersonalDeviceCoordinationActivity>, PresenceUpdateMessage>, (uint64_t)&protocol conformance descriptor for CollaborationConnectionManager<A, B, C>);
  v13 = (_QWORD *)swift_allocObject();
  v13[2] = v8;
  v13[3] = v12;
  v13[4] = v8;
  v13[5] = v10;
  swift_retain_n();
  swift_retain();
  v14 = _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v9, (uint64_t)&async function pointer to partial apply for specialized closure #1 in CollaborationConnectionManager.joinGroupSessionProvider(_:), (uint64_t)v13);
  swift_beginAccess();
  specialized FastSyncStateMachine.didStartActivity(sessionTask:groupSessionProvider:)(v14, v10);
  swift_endAccess();
  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  _QWORD *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  BOOL v4;
  uint64_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v12;

  if (one-time initialization token for tabGroup != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  v0[24] = __swift_project_value_buffer(v1, (uint64_t)static Logger.tabGroup);
  swift_retain();
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.default.getter();
  v4 = os_log_type_enabled(v2, v3);
  v5 = v0[22];
  if (v4)
  {
    v6 = (uint8_t *)swift_slowAlloc();
    v7 = swift_slowAlloc();
    v12 = v7;
    *(_DWORD *)v6 = 136446210;
    swift_beginAccess();
    v8 = *(_QWORD *)(v5 + 136);
    v9 = *(_QWORD *)(v5 + 144);
    swift_bridgeObjectRetain();
    v0[20] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v9, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release();
    _os_log_impl(&dword_24A3EF000, v2, v3, "Will join groupSessionProvider for activity: %{public}s", v6, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24BD0F964](v7, -1, -1);
    MEMORY[0x24BD0F964](v6, -1, -1);
  }
  else
  {
    swift_release();
  }

  v10 = (_QWORD *)swift_task_alloc();
  v0[25] = v10;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CKShareGroupSessionProvider<CKShareCollaborationActivity>);
  lazy protocol witness table accessor for type CKShareGroupSessionProvider<CKShareCollaborationActivity> and conformance CKShareGroupSessionProvider<A>(&lazy protocol witness table cache variable for type CKShareGroupSessionProvider<CKShareCollaborationActivity> and conformance CKShareGroupSessionProvider<A>, &demangling cache variable for type metadata for CKShareGroupSessionProvider<CKShareCollaborationActivity>, (uint64_t)&protocol conformance descriptor for CKShareGroupSessionProvider<A>);
  *v10 = v0;
  v10[1] = specialized CollaborationConnectionManager.joinGroupSessionProvider(_:);
  return GroupSessionProvider.join()();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 208) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint64_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v16;

  swift_retain();
  v1 = Logger.logObject.getter();
  v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    v3 = *(_QWORD *)(v0 + 176);
    v4 = (uint8_t *)swift_slowAlloc();
    v5 = swift_slowAlloc();
    v16 = v5;
    *(_DWORD *)v4 = 136446210;
    swift_beginAccess();
    v6 = *(_QWORD *)(v3 + 136);
    v7 = *(_QWORD *)(v3 + 144);
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 144) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v7, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release();
    _os_log_impl(&dword_24A3EF000, v1, v2, "Did join groupSessionProvider for activity: %{public}s", v4, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24BD0F964](v5, -1, -1);
    MEMORY[0x24BD0F964](v4, -1, -1);
  }
  else
  {
    swift_release();
  }

  v8 = *(_QWORD *)(v0 + 176);
  v9 = *(_QWORD *)(v0 + 184);
  v10 = *(_QWORD *)(v0 + 168);
  v11 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v9, 1, 1, v11);
  v12 = lazy protocol witness table accessor for type CKShareGroupSessionProvider<CKShareCollaborationActivity> and conformance CKShareGroupSessionProvider<A>(&lazy protocol witness table cache variable for type CollaborationConnectionManager<CKShareCollaborationActivity, CKShareGroupSessionProvider<CKShareCollaborationActivity>, PresenceUpdateMessage> and conformance CollaborationConnectionManager<A, B, C>, &demangling cache variable for type metadata for CollaborationConnectionManager<CKShareCollaborationActivity, CKShareGroupSessionProvider<CKShareCollaborationActivity>, PresenceUpdateMessage>, (uint64_t)&protocol conformance descriptor for CollaborationConnectionManager<A, B, C>);
  v13 = (_QWORD *)swift_allocObject();
  v13[2] = v8;
  v13[3] = v12;
  v13[4] = v8;
  v13[5] = v10;
  swift_retain_n();
  swift_retain();
  v14 = _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v9, (uint64_t)&async function pointer to partial apply for specialized closure #1 in CollaborationConnectionManager.joinGroupSessionProvider(_:), (uint64_t)v13);
  swift_beginAccess();
  specialized FastSyncStateMachine.didStartActivity(sessionTask:groupSessionProvider:)(v14, v10);
  swift_endAccess();
  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v17;
  uint64_t v18;

  v1 = *(void **)(v0 + 208);
  swift_retain();
  v2 = v1;
  swift_retain();
  v3 = v1;
  v4 = Logger.logObject.getter();
  v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = *(void **)(v0 + 208);
    v7 = *(_QWORD *)(v0 + 176);
    v8 = swift_slowAlloc();
    v9 = (_QWORD *)swift_slowAlloc();
    v17 = swift_slowAlloc();
    v18 = v17;
    *(_DWORD *)v8 = 136446466;
    swift_beginAccess();
    v11 = *(_QWORD *)(v7 + 136);
    v10 = *(_QWORD *)(v7 + 144);
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 152) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v10, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(v8 + 12) = 2112;
    v12 = v6;
    v13 = _swift_stdlib_bridgeErrorToNSError();
    *(_QWORD *)(v0 + 136) = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v9 = v13;

    _os_log_impl(&dword_24A3EF000, v4, v5, "Did fail to join groupSessionProvider for activity %{public}s, error: %@", (uint8_t *)v8, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x24BD0F964](v9, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x24BD0F964](v17, -1, -1);
    MEMORY[0x24BD0F964](v8, -1, -1);
  }
  else
  {
    v14 = *(void **)(v0 + 208);
    swift_release_n();

  }
  v15 = *(void **)(v0 + 208);
  swift_beginAccess();
  specialized FastSyncStateMachine.startActivity(_:didFailWith:)();
  swift_endAccess();

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t specialized closure #1 in CollaborationConnectionManager.joinGroupSessionProvider(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v7;

  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v5 + 16) = v7;
  *v7 = v5;
  v7[1] = specialized closure #3 in closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:);
  return specialized CollaborationConnectionManager.waitForGroupSessions(with:)(a5);
}

{
  uint64_t v5;
  _QWORD *v7;

  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v5 + 16) = v7;
  *v7 = v5;
  v7[1] = specialized closure #3 in closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:);
  return specialized CollaborationConnectionManager.waitForGroupSessions(with:)(a5);
}

uint64_t _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = type metadata accessor for TaskPriority();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(_QWORD *)(a3 + 16))
      goto LABEL_5;
    goto LABEL_3;
  }
  outlined destroy of TaskPriority?(a1, &demangling cache variable for type metadata for TaskPriority?);
  if (*(_QWORD *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = a2;
  *(_QWORD *)(v8 + 24) = a3;
  return swift_task_create();
}

void specialized FastSyncStateMachine.didStartActivity(sessionTask:groupSessionProvider:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  void *v4;
  unint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v9;
  os_log_type_t v10;
  uint8_t *v11;
  NSObject *oslog;

  v3 = *v2;
  v4 = (void *)v2[1];
  v5 = v2[2];
  v6 = 1 << (v5 >> 61);
  if ((v6 & 0x26) == 0 && ((v6 & 0x11) == 0 ? (v7 = v2[1]) : (v7 = *v2), v7 == a2))
  {
    swift_retain();
    swift_retain();
    outlined consume of FastSyncStateMachine<CKShareCollaborationActivity, CKShareGroupSessionProvider<CKShareCollaborationActivity>>.State(v3, v4, v5);
    *v2 = a2;
    v2[1] = a1;
    v2[2] = 0x2000000000000000;
  }
  else
  {
    if (one-time initialization token for tabGroup != -1)
      swift_once();
    v9 = type metadata accessor for Logger();
    __swift_project_value_buffer(v9, (uint64_t)static Logger.tabGroup);
    oslog = Logger.logObject.getter();
    v10 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(oslog, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v11 = 0;
      _os_log_impl(&dword_24A3EF000, oslog, v10, "Ignoring didStartActivity() for a group session provider we've stopped tracking", v11, 2u);
      MEMORY[0x24BD0F964](v11, -1, -1);
    }

  }
}

void specialized FastSyncStateMachine.startActivity(_:didFailWith:)()
{
  __asm { BR              X10 }
}

void sub_24A3F9284(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, os_log_t oslog, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  void *v20;
  _QWORD *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  id v26;
  uint64_t v27;
  id v28;
  id v29;
  os_log_type_t v30;
  uint8_t *v31;
  _QWORD *v32;
  id v33;
  NSObject *v34;
  uint64_t v35;

  swift_retain();
  swift_release();
  if (v23 == v24)
  {
    v26 = v20;
    swift_retain();
    outlined consume of FastSyncStateMachine<CKShareCollaborationActivity, CKShareGroupSessionProvider<CKShareCollaborationActivity>>.State(v23, v22, v25);
    *v21 = v24;
    v21[1] = v20;
    v21[2] = 0x8000000000000000;
  }
  else
  {
    if (one-time initialization token for tabGroup != -1)
      swift_once();
    v27 = type metadata accessor for Logger();
    __swift_project_value_buffer(v27, (uint64_t)static Logger.tabGroup);
    v28 = v20;
    v29 = v20;
    v34 = Logger.logObject.getter();
    v30 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v34, v30))
    {
      v31 = (uint8_t *)swift_slowAlloc();
      v32 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v31 = 138412290;
      v33 = v20;
      v35 = _swift_stdlib_bridgeErrorToNSError();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *v32 = v35;

      _os_log_impl(&dword_24A3EF000, v34, v30, "Ignoring startActivity(_:didFailWith:) for a group session provider we've stopped tracking %@", v31, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x24BD0F964](v32, -1, -1);
      MEMORY[0x24BD0F964](v31, -1, -1);
    }
    else
    {

    }
  }
}

uint64_t specialized CollaborationConnectionManager.leaveGroupSessionProvider(_:)()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  *(_QWORD *)(v1 + 56) = v0;
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 64) = v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersonalGroupSessionProvider<PersonalDeviceCoordinationActivity>);
  lazy protocol witness table accessor for type CKShareGroupSessionProvider<CKShareCollaborationActivity> and conformance CKShareGroupSessionProvider<A>(&lazy protocol witness table cache variable for type PersonalGroupSessionProvider<PersonalDeviceCoordinationActivity> and conformance PersonalGroupSessionProvider<A>, &demangling cache variable for type metadata for PersonalGroupSessionProvider<PersonalDeviceCoordinationActivity>, MEMORY[0x24BDD1BB8]);
  *v2 = v1;
  v2[1] = specialized CollaborationConnectionManager.leaveGroupSessionProvider(_:);
  return GroupSessionProvider.leave()();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 72) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  else
    return (*(uint64_t (**)(void))(v2 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  *(_QWORD *)(v1 + 56) = v0;
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 64) = v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CKShareGroupSessionProvider<CKShareCollaborationActivity>);
  lazy protocol witness table accessor for type CKShareGroupSessionProvider<CKShareCollaborationActivity> and conformance CKShareGroupSessionProvider<A>(&lazy protocol witness table cache variable for type CKShareGroupSessionProvider<CKShareCollaborationActivity> and conformance CKShareGroupSessionProvider<A>, &demangling cache variable for type metadata for CKShareGroupSessionProvider<CKShareCollaborationActivity>, (uint64_t)&protocol conformance descriptor for CKShareGroupSessionProvider<A>);
  *v2 = v1;
  v2[1] = specialized CollaborationConnectionManager.leaveGroupSessionProvider(_:);
  return GroupSessionProvider.leave()();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 72) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  else
    return (*(uint64_t (**)(void))(v2 + 8))();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  BOOL v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  id v13;
  uint64_t v14;
  NSObject *log;
  _QWORD *v17;
  os_log_type_t type;
  uint64_t v19;
  uint64_t v20;

  if (one-time initialization token for tabGroup != -1)
    swift_once();
  v1 = *(void **)(v0 + 72);
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.tabGroup);
  swift_retain();
  v3 = v1;
  swift_retain();
  v4 = v1;
  v5 = Logger.logObject.getter();
  v6 = static os_log_type_t.error.getter();
  v7 = os_log_type_enabled(v5, v6);
  v8 = *(void **)(v0 + 72);
  v9 = *(_QWORD *)(v0 + 56);
  if (v7)
  {
    type = v6;
    v10 = swift_slowAlloc();
    v17 = (_QWORD *)swift_slowAlloc();
    v19 = swift_slowAlloc();
    v20 = v19;
    *(_DWORD *)v10 = 136446466;
    swift_beginAccess();
    log = v5;
    v11 = *(_QWORD *)(v9 + 136);
    v12 = *(_QWORD *)(v9 + 144);
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 40) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(v10 + 12) = 2112;
    v13 = v8;
    v14 = _swift_stdlib_bridgeErrorToNSError();
    *(_QWORD *)(v0 + 48) = v14;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v17 = v14;

    _os_log_impl(&dword_24A3EF000, log, type, "Did fail to leave groupSessionProvider for activity %{public}s, error: %@", (uint8_t *)v10, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x24BD0F964](v17, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x24BD0F964](v19, -1, -1);
    MEMORY[0x24BD0F964](v10, -1, -1);

  }
  else
  {

    swift_release_n();
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t specialized CollaborationConnectionManager.waitForGroupSessions(with:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2[16] = a1;
  v2[17] = v1;
  v3 = type metadata accessor for CancellationError();
  v2[18] = v3;
  v2[19] = *(_QWORD *)(v3 - 8);
  v2[20] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Participant?);
  v2[21] = swift_task_alloc();
  v2[22] = swift_task_alloc();
  v4 = type metadata accessor for Participant();
  v2[23] = v4;
  v2[24] = *(_QWORD *)(v4 - 8);
  v2[25] = swift_task_alloc();
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupSession<PersonalDeviceCoordinationActivity>.Sessions);
  v2[26] = v5;
  v2[27] = *(_QWORD *)(v5 - 8);
  v2[28] = swift_task_alloc();
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupSession<PersonalDeviceCoordinationActivity>.Sessions.Iterator);
  v2[29] = v6;
  v2[30] = *(_QWORD *)(v6 - 8);
  v2[31] = swift_task_alloc();
  return swift_task_switch();
}

{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2[16] = a1;
  v2[17] = v1;
  v3 = type metadata accessor for CancellationError();
  v2[18] = v3;
  v2[19] = *(_QWORD *)(v3 - 8);
  v2[20] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Participant?);
  v2[21] = swift_task_alloc();
  v2[22] = swift_task_alloc();
  v4 = type metadata accessor for Participant();
  v2[23] = v4;
  v2[24] = *(_QWORD *)(v4 - 8);
  v2[25] = swift_task_alloc();
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupSession<CKShareCollaborationActivity>.Sessions);
  v2[26] = v5;
  v2[27] = *(_QWORD *)(v5 - 8);
  v2[28] = swift_task_alloc();
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupSession<CKShareCollaborationActivity>.Sessions.Iterator);
  v2[29] = v6;
  v2[30] = *(_QWORD *)(v6 - 8);
  v2[31] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t specialized CollaborationConnectionManager.waitForGroupSessions(with:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[17];
  swift_beginAccess();
  v2 = *(_QWORD *)(v1 + 144);
  v0[11] = *(_QWORD *)(v1 + 136);
  v0[12] = v2;
  swift_bridgeObjectRetain();
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  _QWORD *v6;

  v2 = v0[27];
  v1 = v0[28];
  v3 = v0[26];
  v4 = (uint64_t *)v0[17];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersonalGroupSessionProvider<PersonalDeviceCoordinationActivity>);
  lazy protocol witness table accessor for type CKShareGroupSessionProvider<CKShareCollaborationActivity> and conformance CKShareGroupSessionProvider<A>(&lazy protocol witness table cache variable for type PersonalGroupSessionProvider<PersonalDeviceCoordinationActivity> and conformance PersonalGroupSessionProvider<A>, &demangling cache variable for type metadata for PersonalGroupSessionProvider<PersonalDeviceCoordinationActivity>, MEMORY[0x24BDD1BB8]);
  GroupSessionProvider.sessions.getter();
  GroupSession.Sessions.makeAsyncIterator()();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v5 = *v4;
  v0[32] = *(_QWORD *)(*v4 + 160);
  v0[33] = *(_QWORD *)(v5 + 168);
  v0[34] = lazy protocol witness table accessor for type CKShareGroupSessionProvider<CKShareCollaborationActivity> and conformance CKShareGroupSessionProvider<A>(&lazy protocol witness table cache variable for type GroupSession<PersonalDeviceCoordinationActivity>.Sessions.Iterator and conformance GroupSession<A>.Sessions.Iterator, &demangling cache variable for type metadata for GroupSession<PersonalDeviceCoordinationActivity>.Sessions.Iterator, MEMORY[0x24BDD1E78]);
  v6 = (_QWORD *)swift_task_alloc();
  v0[35] = v6;
  *v6 = v0;
  v6[1] = specialized CollaborationConnectionManager.waitForGroupSessions(with:);
  return dispatch thunk of AsyncIteratorProtocol.next()();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  swift_task_dealloc();
  if (v0)
    *(_QWORD *)(v2 + 296) = v0;
  return swift_task_switch();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 288) = *(_QWORD *)(v0 + 104);
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  if (*(_QWORD *)(v0 + 288))
  {
    if (one-time initialization token for tabGroup != -1)
      swift_once();
    v1 = type metadata accessor for Logger();
    *(_QWORD *)(v0 + 304) = __swift_project_value_buffer(v1, (uint64_t)static Logger.tabGroup);
    v3 = *(_QWORD *)(v0 + 88);
    v2 = *(_QWORD *)(v0 + 96);
    swift_bridgeObjectRetain_n();
    v4 = Logger.logObject.getter();
    v5 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v4, v5))
    {
      v6 = swift_slowAlloc();
      v7 = swift_slowAlloc();
      v9 = v7;
      *(_DWORD *)v6 = 136446210;
      swift_bridgeObjectRetain();
      *(_QWORD *)(v6 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v3, v2, &v9);
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_24A3EF000, v4, v5, "Did begin group session for activity: %{public}s", (uint8_t *)v6, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24BD0F964](v7, -1, -1);
      MEMORY[0x24BD0F964](v6, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    GroupSession.localParticipant.getter();
    return swift_task_switch();
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 240) + 8))(*(_QWORD *)(v0 + 248), *(_QWORD *)(v0 + 232));
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, _QWORD, uint64_t, uint64_t);

  v2 = v0[24];
  v1 = v0[25];
  v4 = v0[22];
  v3 = v0[23];
  v5 = v0[21];
  v6 = v0[17] + v0[32];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v4, v1, v3);
  v7 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v2 + 56);
  v0[39] = v7;
  v7(v4, 0, 1, v3);
  outlined init with take of ParticipantPresenceCoordinator.ConnectionManagerStore.SharedConnection?(v4, v5, &demangling cache variable for type metadata for Participant?);
  swift_beginAccess();
  outlined assign with take of Participant?(v5, v6);
  swift_endAccess();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  v1 = v0[36];
  v2 = v0[17];
  v3 = (_QWORD *)swift_task_alloc();
  v0[40] = v3;
  v3[2] = v2;
  v3[3] = v1;
  v3[4] = v0 + 11;
  v4 = (_QWORD *)swift_task_alloc();
  v0[41] = v4;
  *v4 = v0;
  v4[1] = specialized CollaborationConnectionManager.waitForGroupSessions(with:);
  return withThrowingTaskGroup<A, B>(of:returning:isolation:body:)();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 336) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_task_dealloc();
  return swift_task_switch();
}

{
  return swift_task_switch();
}

{
  uint64_t v0;
  void *v1;
  id v2;
  char v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  uint64_t v10;
  id v11;
  id v12;
  NSObject *v13;
  os_log_type_t v14;
  BOOL v15;
  void *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;

  v1 = *(void **)(v0 + 336);
  swift_task_dealloc();
  *(_QWORD *)(v0 + 112) = v1;
  v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  v3 = swift_dynamicCast();
  v4 = *(void **)(v0 + 336);
  if ((v3 & 1) != 0)
  {
    v5 = *(_QWORD *)(v0 + 152);
    v6 = *(_QWORD *)(v0 + 160);
    v7 = *(_QWORD *)(v0 + 144);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 240) + 8))(*(_QWORD *)(v0 + 248), *(_QWORD *)(v0 + 232));
    swift_release();

    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v6, v7);

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {

    v10 = *(_QWORD *)(v0 + 88);
    v9 = *(_QWORD *)(v0 + 96);
    v11 = v4;
    swift_bridgeObjectRetain();
    v12 = v4;
    swift_bridgeObjectRetain();
    v13 = Logger.logObject.getter();
    v14 = static os_log_type_t.error.getter();
    v15 = os_log_type_enabled(v13, v14);
    v16 = *(void **)(v0 + 336);
    if (v15)
    {
      v17 = swift_slowAlloc();
      v18 = (_QWORD *)swift_slowAlloc();
      v19 = swift_slowAlloc();
      v22 = v19;
      *(_DWORD *)v17 = 136446466;
      swift_bridgeObjectRetain();
      *(_QWORD *)(v17 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v9, &v22);
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v17 + 12) = 2112;
      v20 = v16;
      v21 = _swift_stdlib_bridgeErrorToNSError();
      *(_QWORD *)(v17 + 14) = v21;
      *v18 = v21;

      _os_log_impl(&dword_24A3EF000, v13, v14, "Retrying after group session for activity: %{public}s unexpectedly failed: %@", (uint8_t *)v17, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x24BD0F964](v18, -1, -1);
      swift_arrayDestroy();
      MEMORY[0x24BD0F964](v19, -1, -1);
      MEMORY[0x24BD0F964](v17, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    return swift_task_switch();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 264);
  v2 = *(_QWORD *)(v0 + 176);
  v3 = *(_QWORD *)(v0 + 136);
  v4 = v3 + *(_QWORD *)(v0 + 256);
  (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(v0 + 312))(v2, 1, 1, *(_QWORD *)(v0 + 184));
  swift_beginAccess();
  outlined assign with take of Participant?(v2, v4);
  swift_endAccess();
  *(_QWORD *)(v3 + v1) = MEMORY[0x24BEE4B08];
  swift_bridgeObjectRelease();
  return swift_task_switch();
}

{
  uint64_t v0;
  _QWORD *v1;

  swift_release();
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 344) = v1;
  *v1 = v0;
  v1[1] = specialized CollaborationConnectionManager.waitForGroupSessions(with:);
  return dispatch thunk of AsyncIteratorProtocol.next()();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  swift_task_dealloc();
  if (v0)
    *(_QWORD *)(v2 + 296) = v0;
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[17];
  swift_beginAccess();
  v2 = *(_QWORD *)(v1 + 144);
  v0[11] = *(_QWORD *)(v1 + 136);
  v0[12] = v2;
  swift_bridgeObjectRetain();
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  _QWORD *v6;

  v2 = v0[27];
  v1 = v0[28];
  v3 = v0[26];
  v4 = (uint64_t *)v0[17];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CKShareGroupSessionProvider<CKShareCollaborationActivity>);
  lazy protocol witness table accessor for type CKShareGroupSessionProvider<CKShareCollaborationActivity> and conformance CKShareGroupSessionProvider<A>(&lazy protocol witness table cache variable for type CKShareGroupSessionProvider<CKShareCollaborationActivity> and conformance CKShareGroupSessionProvider<A>, &demangling cache variable for type metadata for CKShareGroupSessionProvider<CKShareCollaborationActivity>, (uint64_t)&protocol conformance descriptor for CKShareGroupSessionProvider<A>);
  GroupSessionProvider.sessions.getter();
  GroupSession.Sessions.makeAsyncIterator()();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v5 = *v4;
  v0[32] = *(_QWORD *)(*v4 + 160);
  v0[33] = *(_QWORD *)(v5 + 168);
  v0[34] = lazy protocol witness table accessor for type CKShareGroupSessionProvider<CKShareCollaborationActivity> and conformance CKShareGroupSessionProvider<A>(&lazy protocol witness table cache variable for type GroupSession<CKShareCollaborationActivity>.Sessions.Iterator and conformance GroupSession<A>.Sessions.Iterator, &demangling cache variable for type metadata for GroupSession<CKShareCollaborationActivity>.Sessions.Iterator, MEMORY[0x24BDD1E78]);
  v6 = (_QWORD *)swift_task_alloc();
  v0[35] = v6;
  *v6 = v0;
  v6[1] = specialized CollaborationConnectionManager.waitForGroupSessions(with:);
  return dispatch thunk of AsyncIteratorProtocol.next()();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  swift_task_dealloc();
  if (v0)
    *(_QWORD *)(v2 + 296) = v0;
  return swift_task_switch();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 288) = *(_QWORD *)(v0 + 104);
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  if (*(_QWORD *)(v0 + 288))
  {
    if (one-time initialization token for tabGroup != -1)
      swift_once();
    v1 = type metadata accessor for Logger();
    *(_QWORD *)(v0 + 304) = __swift_project_value_buffer(v1, (uint64_t)static Logger.tabGroup);
    v3 = *(_QWORD *)(v0 + 88);
    v2 = *(_QWORD *)(v0 + 96);
    swift_bridgeObjectRetain_n();
    v4 = Logger.logObject.getter();
    v5 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v4, v5))
    {
      v6 = swift_slowAlloc();
      v7 = swift_slowAlloc();
      v9 = v7;
      *(_DWORD *)v6 = 136446210;
      swift_bridgeObjectRetain();
      *(_QWORD *)(v6 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v3, v2, &v9);
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_24A3EF000, v4, v5, "Did begin group session for activity: %{public}s", (uint8_t *)v6, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24BD0F964](v7, -1, -1);
      MEMORY[0x24BD0F964](v6, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    GroupSession.localParticipant.getter();
    return swift_task_switch();
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 240) + 8))(*(_QWORD *)(v0 + 248), *(_QWORD *)(v0 + 232));
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 120) = *(_QWORD *)(v0 + 296);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  swift_dynamicCast();
  return swift_willThrowTypedImpl();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, _QWORD, uint64_t, uint64_t);

  v2 = v0[24];
  v1 = v0[25];
  v4 = v0[22];
  v3 = v0[23];
  v5 = v0[21];
  v6 = v0[17] + v0[32];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v4, v1, v3);
  v7 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v2 + 56);
  v0[39] = v7;
  v7(v4, 0, 1, v3);
  outlined init with take of ParticipantPresenceCoordinator.ConnectionManagerStore.SharedConnection?(v4, v5, &demangling cache variable for type metadata for Participant?);
  swift_beginAccess();
  outlined assign with take of Participant?(v5, v6);
  swift_endAccess();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  v1 = v0[36];
  v2 = v0[17];
  v3 = (_QWORD *)swift_task_alloc();
  v0[40] = v3;
  v3[2] = v2;
  v3[3] = v1;
  v3[4] = v0 + 11;
  v4 = (_QWORD *)swift_task_alloc();
  v0[41] = v4;
  *v4 = v0;
  v4[1] = specialized CollaborationConnectionManager.waitForGroupSessions(with:);
  return withThrowingTaskGroup<A, B>(of:returning:isolation:body:)();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 336) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_task_dealloc();
  return swift_task_switch();
}

{
  return swift_task_switch();
}

{
  uint64_t v0;
  void *v1;
  id v2;
  char v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  uint64_t v10;
  id v11;
  id v12;
  NSObject *v13;
  os_log_type_t v14;
  BOOL v15;
  void *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;

  v1 = *(void **)(v0 + 336);
  swift_task_dealloc();
  *(_QWORD *)(v0 + 112) = v1;
  v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  v3 = swift_dynamicCast();
  v4 = *(void **)(v0 + 336);
  if ((v3 & 1) != 0)
  {
    v5 = *(_QWORD *)(v0 + 152);
    v6 = *(_QWORD *)(v0 + 160);
    v7 = *(_QWORD *)(v0 + 144);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 240) + 8))(*(_QWORD *)(v0 + 248), *(_QWORD *)(v0 + 232));
    swift_release();

    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v6, v7);

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {

    v10 = *(_QWORD *)(v0 + 88);
    v9 = *(_QWORD *)(v0 + 96);
    v11 = v4;
    swift_bridgeObjectRetain();
    v12 = v4;
    swift_bridgeObjectRetain();
    v13 = Logger.logObject.getter();
    v14 = static os_log_type_t.error.getter();
    v15 = os_log_type_enabled(v13, v14);
    v16 = *(void **)(v0 + 336);
    if (v15)
    {
      v17 = swift_slowAlloc();
      v18 = (_QWORD *)swift_slowAlloc();
      v19 = swift_slowAlloc();
      v22 = v19;
      *(_DWORD *)v17 = 136446466;
      swift_bridgeObjectRetain();
      *(_QWORD *)(v17 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v9, &v22);
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v17 + 12) = 2112;
      v20 = v16;
      v21 = _swift_stdlib_bridgeErrorToNSError();
      *(_QWORD *)(v17 + 14) = v21;
      *v18 = v21;

      _os_log_impl(&dword_24A3EF000, v13, v14, "Retrying after group session for activity: %{public}s unexpectedly failed: %@", (uint8_t *)v17, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x24BD0F964](v18, -1, -1);
      swift_arrayDestroy();
      MEMORY[0x24BD0F964](v19, -1, -1);
      MEMORY[0x24BD0F964](v17, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    return swift_task_switch();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 264);
  v2 = *(_QWORD *)(v0 + 176);
  v3 = *(_QWORD *)(v0 + 136);
  v4 = v3 + *(_QWORD *)(v0 + 256);
  (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(v0 + 312))(v2, 1, 1, *(_QWORD *)(v0 + 184));
  swift_beginAccess();
  outlined assign with take of Participant?(v2, v4);
  swift_endAccess();
  *(_QWORD *)(v3 + v1) = MEMORY[0x24BEE4B08];
  swift_bridgeObjectRelease();
  return swift_task_switch();
}

{
  uint64_t v0;
  _QWORD *v1;

  swift_release();
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 344) = v1;
  *v1 = v0;
  v1[1] = specialized CollaborationConnectionManager.waitForGroupSessions(with:);
  return dispatch thunk of AsyncIteratorProtocol.next()();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  swift_task_dealloc();
  if (v0)
    *(_QWORD *)(v2 + 296) = v0;
  return swift_task_switch();
}

uint64_t specialized closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;

  v6[5] = a5;
  v6[6] = a6;
  v6[3] = a3;
  v6[4] = a4;
  v6[2] = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  v6[7] = swift_task_alloc();
  return swift_task_switch();
}

{
  _QWORD *v6;

  v6[5] = a5;
  v6[6] = a6;
  v6[3] = a3;
  v6[4] = a4;
  v6[2] = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  v6[7] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t specialized closure #1 in closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v7[5] = a6;
  v7[6] = a7;
  v7[4] = a4;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupSession<PersonalDeviceCoordinationActivity>.State);
  v7[7] = v8;
  v7[8] = *(_QWORD *)(v8 - 8);
  v7[9] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupSession<PersonalDeviceCoordinationActivity>.State?);
  v7[10] = swift_task_alloc();
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncPublisher<Published<GroupSession<PersonalDeviceCoordinationActivity>.State>.Publisher>);
  v7[11] = v9;
  v7[12] = *(_QWORD *)(v9 - 8);
  v7[13] = swift_task_alloc();
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<GroupSession<PersonalDeviceCoordinationActivity>.State>.Publisher);
  v7[14] = v10;
  v7[15] = *(_QWORD *)(v10 - 8);
  v7[16] = swift_task_alloc();
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncPublisher<Published<GroupSession<PersonalDeviceCoordinationActivity>.State>.Publisher>.Iterator);
  v7[17] = v11;
  v7[18] = *(_QWORD *)(v11 - 8);
  v7[19] = swift_task_alloc();
  return swift_task_switch();
}

{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v7[5] = a6;
  v7[6] = a7;
  v7[4] = a4;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupSession<CKShareCollaborationActivity>.State);
  v7[7] = v8;
  v7[8] = *(_QWORD *)(v8 - 8);
  v7[9] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupSession<CKShareCollaborationActivity>.State?);
  v7[10] = swift_task_alloc();
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncPublisher<Published<GroupSession<CKShareCollaborationActivity>.State>.Publisher>);
  v7[11] = v9;
  v7[12] = *(_QWORD *)(v9 - 8);
  v7[13] = swift_task_alloc();
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<GroupSession<CKShareCollaborationActivity>.State>.Publisher);
  v7[14] = v10;
  v7[15] = *(_QWORD *)(v10 - 8);
  v7[16] = swift_task_alloc();
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncPublisher<Published<GroupSession<CKShareCollaborationActivity>.State>.Publisher>.Iterator);
  v7[17] = v11;
  v7[18] = *(_QWORD *)(v11 - 8);
  v7[19] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t specialized closure #1 in closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v2 = v0[15];
  v1 = v0[16];
  v4 = v0[13];
  v3 = v0[14];
  v5 = v0[11];
  v6 = v0[12];
  GroupSession.$state.getter();
  v7 = lazy protocol witness table accessor for type CKShareGroupSessionProvider<CKShareCollaborationActivity> and conformance CKShareGroupSessionProvider<A>(&lazy protocol witness table cache variable for type Published<GroupSession<PersonalDeviceCoordinationActivity>.State>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<GroupSession<PersonalDeviceCoordinationActivity>.State>.Publisher, MEMORY[0x24BDB9EE8]);
  MEMORY[0x24BD0EE90](v3, v7);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  AsyncPublisher.makeAsyncIterator()();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  v0[20] = lazy protocol witness table accessor for type CKShareGroupSessionProvider<CKShareCollaborationActivity> and conformance CKShareGroupSessionProvider<A>(&lazy protocol witness table cache variable for type AsyncPublisher<Published<GroupSession<PersonalDeviceCoordinationActivity>.State>.Publisher>.Iterator and conformance AsyncPublisher<A>.Iterator, &demangling cache variable for type metadata for AsyncPublisher<Published<GroupSession<PersonalDeviceCoordinationActivity>.State>.Publisher>.Iterator, MEMORY[0x24BDB9BC0]);
  v8 = (_QWORD *)swift_task_alloc();
  v0[21] = v8;
  *v8 = v0;
  v8[1] = specialized closure #1 in closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:);
  return dispatch thunk of AsyncIteratorProtocol.next()();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  swift_task_dealloc();
  if (v0)
    *(_QWORD *)(v2 + 184) = v0;
  else
    *(_QWORD *)(v2 + 176) = 0;
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  BOOL v7;
  unint64_t v8;
  uint64_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(void);
  _QWORD *v20;
  uint64_t v21;

  v1 = v0[10];
  v2 = v0[7];
  v3 = v0[8];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    (*(void (**)(_QWORD, _QWORD))(v0[18] + 8))(v0[19], v0[17]);
    if (one-time initialization token for tabGroup != -1)
      swift_once();
    v4 = type metadata accessor for Logger();
    __swift_project_value_buffer(v4, (uint64_t)static Logger.tabGroup);
    swift_bridgeObjectRetain_n();
    v5 = Logger.logObject.getter();
    v6 = static os_log_type_t.info.getter();
    v7 = os_log_type_enabled(v5, v6);
    v8 = v0[6];
    if (v7)
    {
      v9 = v0[5];
      v10 = (uint8_t *)swift_slowAlloc();
      v11 = swift_slowAlloc();
      v21 = v11;
      *(_DWORD *)v10 = 136446210;
      swift_bridgeObjectRetain();
      v0[3] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v8, &v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_24A3EF000, v5, v6, "Did finish observing groupSession state changes for activity: %{public}s", v10, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24BD0F964](v11, -1, -1);
      MEMORY[0x24BD0F964](v10, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    v18 = (uint64_t (*)(void))v0[1];
    return v18();
  }
  v12 = v0[22];
  v13 = v0[9];
  v14 = v0[4];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v13, v1, v2);
  specialized CollaborationConnectionManager.handleGroupSessionStateChange(_:state:)(v14, v13, &demangling cache variable for type metadata for GroupSession<PersonalDeviceCoordinationActivity>.State);
  if (v12)
  {
    v16 = v0[18];
    v15 = v0[19];
    v17 = v0[17];
    (*(void (**)(_QWORD, _QWORD))(v0[8] + 8))(v0[9], v0[7]);
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v17);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    v18 = (uint64_t (*)(void))v0[1];
    return v18();
  }
  (*(void (**)(_QWORD, _QWORD))(v0[8] + 8))(v0[9], v0[7]);
  v20 = (_QWORD *)swift_task_alloc();
  v0[24] = v20;
  *v20 = v0;
  v20[1] = specialized closure #1 in closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:);
  return dispatch thunk of AsyncIteratorProtocol.next()();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  swift_task_dealloc();
  if (v0)
    *(_QWORD *)(v2 + 184) = v0;
  else
    *(_QWORD *)(v2 + 176) = 0;
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v2 = v0[15];
  v1 = v0[16];
  v4 = v0[13];
  v3 = v0[14];
  v5 = v0[11];
  v6 = v0[12];
  GroupSession.$state.getter();
  v7 = lazy protocol witness table accessor for type CKShareGroupSessionProvider<CKShareCollaborationActivity> and conformance CKShareGroupSessionProvider<A>(&lazy protocol witness table cache variable for type Published<GroupSession<CKShareCollaborationActivity>.State>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<GroupSession<CKShareCollaborationActivity>.State>.Publisher, MEMORY[0x24BDB9EE8]);
  MEMORY[0x24BD0EE90](v3, v7);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  AsyncPublisher.makeAsyncIterator()();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  v0[20] = lazy protocol witness table accessor for type CKShareGroupSessionProvider<CKShareCollaborationActivity> and conformance CKShareGroupSessionProvider<A>(&lazy protocol witness table cache variable for type AsyncPublisher<Published<GroupSession<CKShareCollaborationActivity>.State>.Publisher>.Iterator and conformance AsyncPublisher<A>.Iterator, &demangling cache variable for type metadata for AsyncPublisher<Published<GroupSession<CKShareCollaborationActivity>.State>.Publisher>.Iterator, MEMORY[0x24BDB9BC0]);
  v8 = (_QWORD *)swift_task_alloc();
  v0[21] = v8;
  *v8 = v0;
  v8[1] = specialized closure #1 in closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:);
  return dispatch thunk of AsyncIteratorProtocol.next()();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  swift_task_dealloc();
  if (v0)
    *(_QWORD *)(v2 + 184) = v0;
  else
    *(_QWORD *)(v2 + 176) = 0;
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  BOOL v7;
  unint64_t v8;
  uint64_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(void);
  _QWORD *v20;
  uint64_t v21;

  v1 = v0[10];
  v2 = v0[7];
  v3 = v0[8];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    (*(void (**)(_QWORD, _QWORD))(v0[18] + 8))(v0[19], v0[17]);
    if (one-time initialization token for tabGroup != -1)
      swift_once();
    v4 = type metadata accessor for Logger();
    __swift_project_value_buffer(v4, (uint64_t)static Logger.tabGroup);
    swift_bridgeObjectRetain_n();
    v5 = Logger.logObject.getter();
    v6 = static os_log_type_t.info.getter();
    v7 = os_log_type_enabled(v5, v6);
    v8 = v0[6];
    if (v7)
    {
      v9 = v0[5];
      v10 = (uint8_t *)swift_slowAlloc();
      v11 = swift_slowAlloc();
      v21 = v11;
      *(_DWORD *)v10 = 136446210;
      swift_bridgeObjectRetain();
      v0[3] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v8, &v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_24A3EF000, v5, v6, "Did finish observing groupSession state changes for activity: %{public}s", v10, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24BD0F964](v11, -1, -1);
      MEMORY[0x24BD0F964](v10, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    v18 = (uint64_t (*)(void))v0[1];
    return v18();
  }
  v12 = v0[22];
  v13 = v0[9];
  v14 = v0[4];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v13, v1, v2);
  specialized CollaborationConnectionManager.handleGroupSessionStateChange(_:state:)(v14, v13, &demangling cache variable for type metadata for GroupSession<CKShareCollaborationActivity>.State);
  if (v12)
  {
    v16 = v0[18];
    v15 = v0[19];
    v17 = v0[17];
    (*(void (**)(_QWORD, _QWORD))(v0[8] + 8))(v0[9], v0[7]);
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v17);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    v18 = (uint64_t (*)(void))v0[1];
    return v18();
  }
  (*(void (**)(_QWORD, _QWORD))(v0[8] + 8))(v0[9], v0[7]);
  v20 = (_QWORD *)swift_task_alloc();
  v0[24] = v20;
  *v20 = v0;
  v20[1] = specialized closure #1 in closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:);
  return dispatch thunk of AsyncIteratorProtocol.next()();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 16) = *(_QWORD *)(v0 + 184);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  swift_dynamicCast();
  return swift_willThrowTypedImpl();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  swift_task_dealloc();
  if (v0)
    *(_QWORD *)(v2 + 184) = v0;
  else
    *(_QWORD *)(v2 + 176) = 0;
  return swift_task_switch();
}

uint64_t _sScg7addTask8priority9operationyScPSg_xyYaKYAcntFyt_s5Error_pTg5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD v18[4];
  _QWORD v19[4];

  v4 = v3;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of TaskPriority?(a1, (uint64_t)v9, &demangling cache variable for type metadata for TaskPriority?);
  v10 = type metadata accessor for TaskPriority();
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    outlined destroy of TaskPriority?((uint64_t)v9, &demangling cache variable for type metadata for TaskPriority?);
    if (*(_QWORD *)(a3 + 16))
    {
LABEL_3:
      swift_getObjectType();
      swift_unknownObjectRetain();
      v12 = dispatch thunk of Actor.unownedExecutor.getter();
      v14 = v13;
      swift_unknownObjectRelease();
      goto LABEL_6;
    }
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v9, v10);
    if (*(_QWORD *)(a3 + 16))
      goto LABEL_3;
  }
  v12 = 0;
  v14 = 0;
LABEL_6:
  v15 = *v4;
  v16 = (_QWORD *)(v14 | v12);
  if (v14 | v12)
  {
    v19[0] = 0;
    v19[1] = 0;
    v16 = v19;
    v19[2] = v12;
    v19[3] = v14;
  }
  v18[1] = 1;
  v18[2] = v16;
  v18[3] = v15;
  swift_task_create();
  return swift_release();
}

uint64_t specialized closure #2 in closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v7[10] = a6;
  v7[11] = a7;
  v7[8] = a4;
  v7[9] = a5;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncPublisher<Published<Set<Participant>>.Publisher>);
  v7[12] = v8;
  v7[13] = *(_QWORD *)(v8 - 8);
  v7[14] = swift_task_alloc();
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Set<Participant>>.Publisher);
  v7[15] = v9;
  v7[16] = *(_QWORD *)(v9 - 8);
  v7[17] = swift_task_alloc();
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncPublisher<Published<Set<Participant>>.Publisher>.Iterator);
  v7[18] = v10;
  v7[19] = *(_QWORD *)(v10 - 8);
  v7[20] = swift_task_alloc();
  return swift_task_switch();
}

{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v7[10] = a6;
  v7[11] = a7;
  v7[8] = a4;
  v7[9] = a5;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncPublisher<Published<Set<Participant>>.Publisher>);
  v7[12] = v8;
  v7[13] = *(_QWORD *)(v8 - 8);
  v7[14] = swift_task_alloc();
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Set<Participant>>.Publisher);
  v7[15] = v9;
  v7[16] = *(_QWORD *)(v9 - 8);
  v7[17] = swift_task_alloc();
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncPublisher<Published<Set<Participant>>.Publisher>.Iterator);
  v7[18] = v10;
  v7[19] = *(_QWORD *)(v10 - 8);
  v7[20] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t specialized closure #2 in closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v2 = v0[16];
  v1 = v0[17];
  v4 = v0[14];
  v3 = v0[15];
  v6 = v0[12];
  v5 = v0[13];
  v7 = (uint64_t *)v0[9];
  GroupSession.$activeParticipants.getter();
  v8 = lazy protocol witness table accessor for type CKShareGroupSessionProvider<CKShareCollaborationActivity> and conformance CKShareGroupSessionProvider<A>(&lazy protocol witness table cache variable for type Published<Set<Participant>>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<Set<Participant>>.Publisher, MEMORY[0x24BDB9EE8]);
  MEMORY[0x24BD0EE90](v3, v8);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  AsyncPublisher.makeAsyncIterator()();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  v9 = *v7;
  v0[21] = *(_QWORD *)(*v7 + 168);
  v0[22] = *(_QWORD *)(v9 + 176);
  swift_beginAccess();
  v0[23] = lazy protocol witness table accessor for type CKShareGroupSessionProvider<CKShareCollaborationActivity> and conformance CKShareGroupSessionProvider<A>(&lazy protocol witness table cache variable for type AsyncPublisher<Published<Set<Participant>>.Publisher>.Iterator and conformance AsyncPublisher<A>.Iterator, &demangling cache variable for type metadata for AsyncPublisher<Published<Set<Participant>>.Publisher>.Iterator, MEMORY[0x24BDB9BC0]);
  v10 = (_QWORD *)swift_task_alloc();
  v0[24] = v10;
  *v10 = v0;
  v10[1] = specialized closure #2 in closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:);
  return dispatch thunk of AsyncIteratorProtocol.next()();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  swift_task_dealloc();
  if (v0)
    *(_QWORD *)(v2 + 224) = v0;
  else
    *(_QWORD *)(v2 + 200) = 0;
  return swift_task_switch();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 208) = *(_QWORD *)(v0 + 40);
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;

  if (*(_QWORD *)(v0 + 208))
    return swift_task_switch();
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 152) + 8))(*(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 144));
  if (one-time initialization token for tabGroup != -1)
    swift_once();
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.tabGroup);
  swift_bridgeObjectRetain_n();
  v3 = Logger.logObject.getter();
  v4 = static os_log_type_t.info.getter();
  v5 = os_log_type_enabled(v3, v4);
  v6 = *(_QWORD *)(v0 + 88);
  if (v5)
  {
    v7 = *(_QWORD *)(v0 + 80);
    v8 = (uint8_t *)swift_slowAlloc();
    v9 = swift_slowAlloc();
    v10 = v9;
    *(_DWORD *)v8 = 136446210;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 56) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v6, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_24A3EF000, v3, v4, "Did finish observing activeParticipants changes for activity: %{public}s", v8, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24BD0F964](v9, -1, -1);
    MEMORY[0x24BD0F964](v8, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v1 = v0[26];
  v2 = v0[22];
  v3 = v0[9];
  *(_QWORD *)(v3 + v0[21]) = v1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v4 = swift_bridgeObjectRetain();
  v5 = specialized _ArrayProtocol.filter(_:)(v4, v1, &demangling cache variable for type metadata for CollaborationConnectionManager<PersonalDeviceCoordinationActivity, PersonalGroupSessionProvider<PersonalDeviceCoordinationActivity>, PresenceUpdateMessage>.WeakContainer<AsyncBufferedQueue<Set<Participant>>>, (void (*)(BOOL, uint64_t, uint64_t))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v3 + v2) = v5;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v6 = (_QWORD *)swift_task_alloc();
  v0[27] = v6;
  *v6 = v0;
  v6[1] = specialized closure #2 in closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:);
  return dispatch thunk of AsyncIteratorProtocol.next()();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  swift_task_dealloc();
  if (v0)
    *(_QWORD *)(v2 + 224) = v0;
  else
    *(_QWORD *)(v2 + 200) = 0;
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v2 = v0[16];
  v1 = v0[17];
  v4 = v0[14];
  v3 = v0[15];
  v6 = v0[12];
  v5 = v0[13];
  v7 = (uint64_t *)v0[9];
  GroupSession.$activeParticipants.getter();
  v8 = lazy protocol witness table accessor for type CKShareGroupSessionProvider<CKShareCollaborationActivity> and conformance CKShareGroupSessionProvider<A>(&lazy protocol witness table cache variable for type Published<Set<Participant>>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<Set<Participant>>.Publisher, MEMORY[0x24BDB9EE8]);
  MEMORY[0x24BD0EE90](v3, v8);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  AsyncPublisher.makeAsyncIterator()();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  v9 = *v7;
  v0[21] = *(_QWORD *)(*v7 + 168);
  v0[22] = *(_QWORD *)(v9 + 176);
  swift_beginAccess();
  v0[23] = lazy protocol witness table accessor for type CKShareGroupSessionProvider<CKShareCollaborationActivity> and conformance CKShareGroupSessionProvider<A>(&lazy protocol witness table cache variable for type AsyncPublisher<Published<Set<Participant>>.Publisher>.Iterator and conformance AsyncPublisher<A>.Iterator, &demangling cache variable for type metadata for AsyncPublisher<Published<Set<Participant>>.Publisher>.Iterator, MEMORY[0x24BDB9BC0]);
  v10 = (_QWORD *)swift_task_alloc();
  v0[24] = v10;
  *v10 = v0;
  v10[1] = specialized closure #2 in closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:);
  return dispatch thunk of AsyncIteratorProtocol.next()();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  swift_task_dealloc();
  if (v0)
    *(_QWORD *)(v2 + 224) = v0;
  else
    *(_QWORD *)(v2 + 200) = 0;
  return swift_task_switch();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 208) = *(_QWORD *)(v0 + 40);
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;

  if (*(_QWORD *)(v0 + 208))
    return swift_task_switch();
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 152) + 8))(*(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 144));
  if (one-time initialization token for tabGroup != -1)
    swift_once();
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.tabGroup);
  swift_bridgeObjectRetain_n();
  v3 = Logger.logObject.getter();
  v4 = static os_log_type_t.info.getter();
  v5 = os_log_type_enabled(v3, v4);
  v6 = *(_QWORD *)(v0 + 88);
  if (v5)
  {
    v7 = *(_QWORD *)(v0 + 80);
    v8 = (uint8_t *)swift_slowAlloc();
    v9 = swift_slowAlloc();
    v10 = v9;
    *(_DWORD *)v8 = 136446210;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 56) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v6, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_24A3EF000, v3, v4, "Did finish observing activeParticipants changes for activity: %{public}s", v8, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24BD0F964](v9, -1, -1);
    MEMORY[0x24BD0F964](v8, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v1 = v0[26];
  v2 = v0[22];
  v3 = v0[9];
  *(_QWORD *)(v3 + v0[21]) = v1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v4 = swift_bridgeObjectRetain();
  v5 = specialized _ArrayProtocol.filter(_:)(v4, v1, &demangling cache variable for type metadata for CollaborationConnectionManager<CKShareCollaborationActivity, CKShareGroupSessionProvider<CKShareCollaborationActivity>, PresenceUpdateMessage>.WeakContainer<AsyncBufferedQueue<Set<Participant>>>, (void (*)(BOOL, uint64_t, uint64_t))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v3 + v2) = v5;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v6 = (_QWORD *)swift_task_alloc();
  v0[27] = v6;
  *v6 = v0;
  v6[1] = specialized closure #2 in closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:);
  return dispatch thunk of AsyncIteratorProtocol.next()();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  swift_task_dealloc();
  if (v0)
    *(_QWORD *)(v2 + 224) = v0;
  else
    *(_QWORD *)(v2 + 200) = 0;
  return swift_task_switch();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 48) = *(_QWORD *)(v0 + 224);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  swift_dynamicCast();
  return swift_willThrowTypedImpl();
}

uint64_t specialized closure #3 in closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v7;

  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v5 + 16) = v7;
  *v7 = v5;
  v7[1] = specialized closure #3 in closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:);
  return specialized CollaborationConnectionManager.runGroupSession(_:)(a5);
}

{
  uint64_t v5;
  _QWORD *v7;

  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v5 + 16) = v7;
  *v7 = v5;
  v7[1] = specialized closure #3 in closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:);
  return specialized CollaborationConnectionManager.runGroupSession(_:)(a5);
}

uint64_t specialized ThrowingTaskGroup.waitForAll(isolation:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3[8] = a2;
  v3[9] = v2;
  v3[7] = a1;
  if (a1)
  {
    swift_getObjectType();
    v4 = dispatch thunk of Actor.unownedExecutor.getter();
    v6 = v5;
  }
  else
  {
    v4 = 0;
    v6 = 0;
  }
  v3[10] = v4;
  v3[11] = v6;
  return swift_task_switch();
}

uint64_t specialized ThrowingTaskGroup.waitForAll(isolation:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int isPlatformVersionAtLeast;
  _QWORD *v5;

  v1 = **(_QWORD **)(v0 + 72);
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  *(_QWORD *)(v0 + 96) = v2;
  if ((MEMORY[0x24BD0F0C4](v1, MEMORY[0x24BEE4AE0] + 8, v2, MEMORY[0x24BEE3F20]) & 1) != 0)
    return (*(uint64_t (**)(void))(v0 + 8))();
  isPlatformVersionAtLeast = __isPlatformVersionAtLeast(2, 18, 0, 0);
  *(_DWORD *)(v0 + 128) = isPlatformVersionAtLeast;
  *(_QWORD *)(v0 + 104) = 0;
  if (!isPlatformVersionAtLeast)
    return swift_taskGroup_wait_next_throwing();
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 112) = v5;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ThrowingTaskGroup<(), Error>);
  *v5 = v0;
  v5[1] = specialized ThrowingTaskGroup.waitForAll(isolation:);
  return ThrowingTaskGroup.next(isolation:)();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  swift_task_dealloc();
  if (v0)
    *(_QWORD *)(v2 + 120) = v0;
  else
    *(_BYTE *)(v2 + 134) = *(_BYTE *)(v2 + 132);
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;

  if (v0)
    *(_QWORD *)(v1 + 120) = v0;
  else
    *(_BYTE *)(v1 + 135) = *(_BYTE *)(v1 + 133);
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v3;

  if ((*(_BYTE *)(v0 + 134) & 1) == 0)
    goto LABEL_7;
  v1 = *(_QWORD *)(v0 + 104);
  if ((MEMORY[0x24BD0F0C4](**(_QWORD **)(v0 + 72), MEMORY[0x24BEE4AE0] + 8, *(_QWORD *)(v0 + 96), MEMORY[0x24BEE3F20]) & 1) == 0)
  {
    *(_QWORD *)(v0 + 104) = v1;
LABEL_7:
    if (!*(_DWORD *)(v0 + 128))
      return swift_taskGroup_wait_next_throwing();
    v3 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 112) = v3;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ThrowingTaskGroup<(), Error>);
    *v3 = v0;
    v3[1] = specialized ThrowingTaskGroup.waitForAll(isolation:);
    return ThrowingTaskGroup.next(isolation:)();
  }
  if (v1)
    swift_willThrow();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v3;

  if ((*(_BYTE *)(v0 + 135) & 1) == 0)
    goto LABEL_7;
  v1 = *(_QWORD *)(v0 + 104);
  if ((MEMORY[0x24BD0F0C4](**(_QWORD **)(v0 + 72), MEMORY[0x24BEE4AE0] + 8, *(_QWORD *)(v0 + 96), MEMORY[0x24BEE3F20]) & 1) == 0)
  {
    *(_QWORD *)(v0 + 104) = v1;
LABEL_7:
    if (!*(_DWORD *)(v0 + 128))
      return swift_taskGroup_wait_next_throwing();
    v3 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 112) = v3;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ThrowingTaskGroup<(), Error>);
    *v3 = v0;
    v3[1] = specialized ThrowingTaskGroup.waitForAll(isolation:);
    return ThrowingTaskGroup.next(isolation:)();
  }
  if (v1)
    swift_willThrow();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void *v1;
  _QWORD *v3;

  v1 = *(void **)(v0 + 120);
  if (*(_QWORD *)(v0 + 104))
  {

    v1 = *(void **)(v0 + 104);
  }
  if ((MEMORY[0x24BD0F0C4](**(_QWORD **)(v0 + 72), MEMORY[0x24BEE4AE0] + 8, *(_QWORD *)(v0 + 96), MEMORY[0x24BEE3F20]) & 1) != 0)
  {
    if (v1)
      swift_willThrow();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    *(_QWORD *)(v0 + 104) = v1;
    if (*(_DWORD *)(v0 + 128))
    {
      v3 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 112) = v3;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ThrowingTaskGroup<(), Error>);
      *v3 = v0;
      v3[1] = specialized ThrowingTaskGroup.waitForAll(isolation:);
      return ThrowingTaskGroup.next(isolation:)();
    }
    else
    {
      return swift_taskGroup_wait_next_throwing();
    }
  }
}

uint64_t specialized CollaborationConnectionManager.runGroupSession(_:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2[15] = a1;
  v2[16] = v1;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<(PresenceUpdateMessage, GroupSessionMessenger.MessageContext)>.Continuation.YieldResult);
  v2[17] = v3;
  v2[18] = *(_QWORD *)(v3 - 8);
  v2[19] = swift_task_alloc();
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PresenceUpdateMessage, GroupSessionMessenger.MessageContext));
  v2[20] = v4;
  v2[21] = *(_QWORD *)(v4 - 8);
  v2[22] = swift_task_alloc();
  v2[23] = swift_task_alloc();
  v2[24] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PresenceUpdateMessage, GroupSessionMessenger.MessageContext)?);
  v2[25] = swift_task_alloc();
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<(PresenceUpdateMessage, GroupSessionMessenger.MessageContext)>.Iterator);
  v2[26] = v5;
  v2[27] = *(_QWORD *)(v5 - 8);
  v2[28] = swift_task_alloc();
  return swift_task_switch();
}

{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 264) = a1;
  swift_task_dealloc();
  swift_release();
  return swift_task_switch();
}

{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2[15] = a1;
  v2[16] = v1;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<(PresenceUpdateMessage, GroupSessionMessenger.MessageContext)>.Continuation.YieldResult);
  v2[17] = v3;
  v2[18] = *(_QWORD *)(v3 - 8);
  v2[19] = swift_task_alloc();
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PresenceUpdateMessage, GroupSessionMessenger.MessageContext));
  v2[20] = v4;
  v2[21] = *(_QWORD *)(v4 - 8);
  v2[22] = swift_task_alloc();
  v2[23] = swift_task_alloc();
  v2[24] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PresenceUpdateMessage, GroupSessionMessenger.MessageContext)?);
  v2[25] = swift_task_alloc();
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<(PresenceUpdateMessage, GroupSessionMessenger.MessageContext)>.Iterator);
  v2[26] = v5;
  v2[27] = *(_QWORD *)(v5 - 8);
  v2[28] = swift_task_alloc();
  return swift_task_switch();
}

{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 264) = a1;
  swift_task_dealloc();
  swift_release();
  return swift_task_switch();
}

uint64_t specialized CollaborationConnectionManager.runGroupSession(_:)()
{
  _QWORD *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t);
  uint64_t v10;

  if (one-time initialization token for tabGroup != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  v0[29] = __swift_project_value_buffer(v1, (uint64_t)static Logger.tabGroup);
  swift_retain_n();
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    v5 = swift_slowAlloc();
    v10 = v5;
    *(_DWORD *)v4 = 136446210;
    GroupSession.activity.getter();
    v0[14] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v0[4], v0[5], &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_24A3EF000, v2, v3, "Will join group session for activity: %{public}s", v4, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24BD0F964](v5, -1, -1);
    MEMORY[0x24BD0F964](v4, -1, -1);
  }
  else
  {
    swift_release_n();
  }

  if (one-time initialization token for joinLeaveSessionQueue != -1)
    swift_once();
  v6 = joinLeaveSessionQueue;
  v9 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized GroupSession.join(on:)
                                       + async function pointer to specialized GroupSession.join(on:));
  v7 = (_QWORD *)swift_task_alloc();
  v0[30] = v7;
  *v7 = v0;
  v7[1] = specialized CollaborationConnectionManager.runGroupSession(_:);
  return v9(v6);
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 248) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  _QWORD *v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t);
  uint64_t v8;

  swift_retain_n();
  v1 = Logger.logObject.getter();
  v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    v3 = (uint8_t *)swift_slowAlloc();
    v4 = swift_slowAlloc();
    v8 = v4;
    *(_DWORD *)v3 = 136446210;
    GroupSession.activity.getter();
    v0[12] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v0[6], v0[7], &v8);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_24A3EF000, v1, v2, "Did join group session for activity: %{public}s", v3, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24BD0F964](v4, -1, -1);
    MEMORY[0x24BD0F964](v3, -1, -1);
  }
  else
  {
    swift_release_n();
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupSessionMessengerController<PersonalDeviceCoordinationActivity, PresenceUpdateMessage>);
  swift_allocObject();
  v7 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized GroupSessionMessengerController.init(groupSession:)
                                       + async function pointer to specialized GroupSessionMessengerController.init(groupSession:));
  swift_retain();
  v5 = (_QWORD *)swift_task_alloc();
  v0[32] = v5;
  *v5 = v0;
  v5[1] = specialized CollaborationConnectionManager.runGroupSession(_:);
  return v7(v0[15]);
}

{
  _QWORD *v0;
  void *v1;
  id v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  void *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  void *v12;
  _QWORD *v13;
  uint64_t (__cdecl *v15)();
  uint64_t v16;

  v1 = (void *)v0[31];
  swift_retain();
  v2 = v1;
  swift_retain();
  v3 = v1;
  v4 = Logger.logObject.getter();
  v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (void *)v0[31];
    v7 = swift_slowAlloc();
    v8 = (_QWORD *)swift_slowAlloc();
    v9 = swift_slowAlloc();
    v16 = v9;
    *(_DWORD *)v7 = 136446466;
    GroupSession.activity.getter();
    v0[13] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v0[2], v0[3], &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(v7 + 12) = 2112;
    v10 = v6;
    v11 = _swift_stdlib_bridgeErrorToNSError();
    v0[11] = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v8 = v11;

    _os_log_impl(&dword_24A3EF000, v4, v5, "Failed to join group session for activity: %{public}s, error: %@", (uint8_t *)v7, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x24BD0F964](v8, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x24BD0F964](v9, -1, -1);
    MEMORY[0x24BD0F964](v7, -1, -1);
  }
  else
  {
    v12 = (void *)v0[31];
    swift_release_n();

  }
  v15 = (uint64_t (__cdecl *)())((char *)&async function pointer to specialized CollaborationConnectionManager.didLeaveGroupSession(_:)
                              + async function pointer to specialized CollaborationConnectionManager.didLeaveGroupSession(_:));
  v13 = (_QWORD *)swift_task_alloc();
  v0[39] = v13;
  *v13 = v0;
  v13[1] = specialized CollaborationConnectionManager.runGroupSession(_:);
  return v15();
}

{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)(v0 + 128) + 168) = *(_QWORD *)(v0 + 264);
  swift_retain();
  swift_release();
  return swift_task_switch();
}

{
  _QWORD *v0;
  _QWORD *v1;

  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<(PresenceUpdateMessage, GroupSessionMessenger.MessageContext)>);
  AsyncStream.makeAsyncIterator()();
  swift_release();
  v0[34] = v0[31];
  v1 = (_QWORD *)swift_task_alloc();
  v0[35] = v1;
  *v1 = v0;
  v1[1] = specialized CollaborationConnectionManager.runGroupSession(_:);
  return AsyncStream.Iterator.next(isolation:)();
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  char *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v1 = *(uint64_t **)(v0 + 200);
  v2 = *(_QWORD *)(v0 + 160);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v0 + 168) + 48))(v1, 1, v2) == 1)
  {
    v3 = *(_QWORD *)(v0 + 120);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 216) + 8))(*(_QWORD *)(v0 + 224), *(_QWORD *)(v0 + 208));
    v4 = joinLeaveSessionQueue;
    v5 = swift_task_alloc();
    *(_QWORD *)(v0 + 288) = v5;
    *(_QWORD *)(v5 + 16) = v4;
    *(_QWORD *)(v5 + 24) = v3;
    v6 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 296) = v6;
    *v6 = v0;
    v6[1] = specialized CollaborationConnectionManager.runGroupSession(_:);
    return withCheckedContinuation<A>(isolation:function:_:)();
  }
  else
  {
    v8 = *(_QWORD *)(v0 + 272);
    v9 = *(uint64_t **)(v0 + 192);
    v10 = *(int *)(v2 + 48);
    v11 = (char *)v1 + v10;
    v12 = (char *)v9 + v10;
    v13 = v1[1];
    v14 = v1[2];
    v15 = v1[3];
    v17 = v1[4];
    v16 = v1[5];
    v33 = v1[6];
    v34 = *v1;
    *v9 = *v1;
    v9[1] = v13;
    v32 = v13;
    v9[2] = v14;
    v9[3] = v15;
    v9[4] = v17;
    v9[5] = v16;
    v9[6] = v33;
    v18 = type metadata accessor for GroupSessionMessenger.MessageContext();
    v19 = *(_QWORD *)(v18 - 8);
    (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v12, v11, v18);
    static Task<>.checkCancellation()();
    if (v8)
    {
      v21 = *(_QWORD *)(v0 + 216);
      v20 = *(_QWORD *)(v0 + 224);
      v22 = *(_QWORD *)(v0 + 208);
      v23 = *(_QWORD *)(v0 + 192);
      swift_release();
      outlined destroy of TaskPriority?(v23, &demangling cache variable for type metadata for (PresenceUpdateMessage, GroupSessionMessenger.MessageContext));
      (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v22);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
    else
    {
      v24 = *(uint64_t **)(v0 + 184);
      v27 = *(_QWORD *)(v0 + 176);
      v28 = *(_QWORD *)(v0 + 152);
      v29 = *(_QWORD *)(v0 + 144);
      v30 = *(_QWORD *)(v0 + 136);
      v31 = *(_QWORD *)(v0 + 192);
      v25 = (char *)v24 + *(int *)(*(_QWORD *)(v0 + 160) + 48);
      *v24 = v34;
      v24[1] = v32;
      v24[2] = v14;
      v24[3] = v15;
      v24[4] = v17;
      v24[5] = v16;
      v24[6] = v33;
      (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v25, v12, v18);
      outlined init with copy of TaskPriority?((uint64_t)v24, v27, &demangling cache variable for type metadata for (PresenceUpdateMessage, GroupSessionMessenger.MessageContext));
      outlined copy of PresenceUpdateMessage.Kind(v34, v32);
      swift_bridgeObjectRetain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<(PresenceUpdateMessage, GroupSessionMessenger.MessageContext)>.Continuation);
      AsyncStream.Continuation.yield(_:)();
      outlined destroy of TaskPriority?((uint64_t)v24, &demangling cache variable for type metadata for (PresenceUpdateMessage, GroupSessionMessenger.MessageContext));
      (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v28, v30);
      outlined destroy of TaskPriority?(v31, &demangling cache variable for type metadata for (PresenceUpdateMessage, GroupSessionMessenger.MessageContext));
      *(_QWORD *)(v0 + 272) = 0;
      v26 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 280) = v26;
      *v26 = v0;
      v26[1] = specialized CollaborationConnectionManager.runGroupSession(_:);
      return AsyncStream.Iterator.next(isolation:)();
    }
  }
}

{
  swift_task_dealloc();
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (__cdecl *v3)();

  v3 = (uint64_t (__cdecl *)())((char *)&async function pointer to specialized CollaborationConnectionManager.didLeaveGroupSession(_:)
                             + async function pointer to specialized CollaborationConnectionManager.didLeaveGroupSession(_:));
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 304) = v1;
  *v1 = v0;
  v1[1] = specialized CollaborationConnectionManager.runGroupSession(_:);
  return v3();
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t);
  uint64_t v10;

  if (one-time initialization token for tabGroup != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  v0[29] = __swift_project_value_buffer(v1, (uint64_t)static Logger.tabGroup);
  swift_retain_n();
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    v5 = swift_slowAlloc();
    v10 = v5;
    *(_DWORD *)v4 = 136446210;
    GroupSession.activity.getter();
    v0[14] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v0[4], v0[5], &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_24A3EF000, v2, v3, "Will join group session for activity: %{public}s", v4, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24BD0F964](v5, -1, -1);
    MEMORY[0x24BD0F964](v4, -1, -1);
  }
  else
  {
    swift_release_n();
  }

  if (one-time initialization token for joinLeaveSessionQueue != -1)
    swift_once();
  v6 = joinLeaveSessionQueue;
  v9 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized GroupSession.join(on:)
                                       + async function pointer to specialized GroupSession.join(on:));
  v7 = (_QWORD *)swift_task_alloc();
  v0[30] = v7;
  *v7 = v0;
  v7[1] = specialized CollaborationConnectionManager.runGroupSession(_:);
  return v9(v6);
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 248) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  _QWORD *v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t);
  uint64_t v8;

  swift_retain_n();
  v1 = Logger.logObject.getter();
  v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    v3 = (uint8_t *)swift_slowAlloc();
    v4 = swift_slowAlloc();
    v8 = v4;
    *(_DWORD *)v3 = 136446210;
    GroupSession.activity.getter();
    v0[12] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v0[6], v0[7], &v8);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_24A3EF000, v1, v2, "Did join group session for activity: %{public}s", v3, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24BD0F964](v4, -1, -1);
    MEMORY[0x24BD0F964](v3, -1, -1);
  }
  else
  {
    swift_release_n();
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupSessionMessengerController<CKShareCollaborationActivity, PresenceUpdateMessage>);
  swift_allocObject();
  v7 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized GroupSessionMessengerController.init(groupSession:)
                                       + async function pointer to specialized GroupSessionMessengerController.init(groupSession:));
  swift_retain();
  v5 = (_QWORD *)swift_task_alloc();
  v0[32] = v5;
  *v5 = v0;
  v5[1] = specialized CollaborationConnectionManager.runGroupSession(_:);
  return v7(v0[15]);
}

{
  _QWORD *v0;
  void *v1;
  id v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  void *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  void *v12;
  _QWORD *v13;
  uint64_t (__cdecl *v15)();
  uint64_t v16;

  v1 = (void *)v0[31];
  swift_retain();
  v2 = v1;
  swift_retain();
  v3 = v1;
  v4 = Logger.logObject.getter();
  v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (void *)v0[31];
    v7 = swift_slowAlloc();
    v8 = (_QWORD *)swift_slowAlloc();
    v9 = swift_slowAlloc();
    v16 = v9;
    *(_DWORD *)v7 = 136446466;
    GroupSession.activity.getter();
    v0[13] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v0[2], v0[3], &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(v7 + 12) = 2112;
    v10 = v6;
    v11 = _swift_stdlib_bridgeErrorToNSError();
    v0[11] = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v8 = v11;

    _os_log_impl(&dword_24A3EF000, v4, v5, "Failed to join group session for activity: %{public}s, error: %@", (uint8_t *)v7, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x24BD0F964](v8, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x24BD0F964](v9, -1, -1);
    MEMORY[0x24BD0F964](v7, -1, -1);
  }
  else
  {
    v12 = (void *)v0[31];
    swift_release_n();

  }
  v15 = (uint64_t (__cdecl *)())((char *)&async function pointer to specialized CollaborationConnectionManager.didLeaveGroupSession(_:)
                              + async function pointer to specialized CollaborationConnectionManager.didLeaveGroupSession(_:));
  v13 = (_QWORD *)swift_task_alloc();
  v0[39] = v13;
  *v13 = v0;
  v13[1] = specialized CollaborationConnectionManager.runGroupSession(_:);
  return v15();
}

{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)(v0 + 128) + 168) = *(_QWORD *)(v0 + 264);
  swift_retain();
  swift_release();
  return swift_task_switch();
}

{
  _QWORD *v0;
  _QWORD *v1;

  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<(PresenceUpdateMessage, GroupSessionMessenger.MessageContext)>);
  AsyncStream.makeAsyncIterator()();
  swift_release();
  v0[34] = v0[31];
  v1 = (_QWORD *)swift_task_alloc();
  v0[35] = v1;
  *v1 = v0;
  v1[1] = specialized CollaborationConnectionManager.runGroupSession(_:);
  return AsyncStream.Iterator.next(isolation:)();
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  char *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v1 = *(uint64_t **)(v0 + 200);
  v2 = *(_QWORD *)(v0 + 160);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v0 + 168) + 48))(v1, 1, v2) == 1)
  {
    v3 = *(_QWORD *)(v0 + 120);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 216) + 8))(*(_QWORD *)(v0 + 224), *(_QWORD *)(v0 + 208));
    v4 = joinLeaveSessionQueue;
    v5 = swift_task_alloc();
    *(_QWORD *)(v0 + 288) = v5;
    *(_QWORD *)(v5 + 16) = v4;
    *(_QWORD *)(v5 + 24) = v3;
    v6 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 296) = v6;
    *v6 = v0;
    v6[1] = specialized CollaborationConnectionManager.runGroupSession(_:);
    return withCheckedContinuation<A>(isolation:function:_:)();
  }
  else
  {
    v8 = *(_QWORD *)(v0 + 272);
    v9 = *(uint64_t **)(v0 + 192);
    v10 = *(int *)(v2 + 48);
    v11 = (char *)v1 + v10;
    v12 = (char *)v9 + v10;
    v13 = v1[1];
    v14 = v1[2];
    v15 = v1[3];
    v17 = v1[4];
    v16 = v1[5];
    v33 = v1[6];
    v34 = *v1;
    *v9 = *v1;
    v9[1] = v13;
    v32 = v13;
    v9[2] = v14;
    v9[3] = v15;
    v9[4] = v17;
    v9[5] = v16;
    v9[6] = v33;
    v18 = type metadata accessor for GroupSessionMessenger.MessageContext();
    v19 = *(_QWORD *)(v18 - 8);
    (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v12, v11, v18);
    static Task<>.checkCancellation()();
    if (v8)
    {
      v21 = *(_QWORD *)(v0 + 216);
      v20 = *(_QWORD *)(v0 + 224);
      v22 = *(_QWORD *)(v0 + 208);
      v23 = *(_QWORD *)(v0 + 192);
      swift_release();
      outlined destroy of TaskPriority?(v23, &demangling cache variable for type metadata for (PresenceUpdateMessage, GroupSessionMessenger.MessageContext));
      (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v22);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
    else
    {
      v24 = *(uint64_t **)(v0 + 184);
      v27 = *(_QWORD *)(v0 + 176);
      v28 = *(_QWORD *)(v0 + 152);
      v29 = *(_QWORD *)(v0 + 144);
      v30 = *(_QWORD *)(v0 + 136);
      v31 = *(_QWORD *)(v0 + 192);
      v25 = (char *)v24 + *(int *)(*(_QWORD *)(v0 + 160) + 48);
      *v24 = v34;
      v24[1] = v32;
      v24[2] = v14;
      v24[3] = v15;
      v24[4] = v17;
      v24[5] = v16;
      v24[6] = v33;
      (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v25, v12, v18);
      outlined init with copy of TaskPriority?((uint64_t)v24, v27, &demangling cache variable for type metadata for (PresenceUpdateMessage, GroupSessionMessenger.MessageContext));
      outlined copy of PresenceUpdateMessage.Kind(v34, v32);
      swift_bridgeObjectRetain();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<(PresenceUpdateMessage, GroupSessionMessenger.MessageContext)>.Continuation);
      AsyncStream.Continuation.yield(_:)();
      outlined destroy of TaskPriority?((uint64_t)v24, &demangling cache variable for type metadata for (PresenceUpdateMessage, GroupSessionMessenger.MessageContext));
      (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v28, v30);
      outlined destroy of TaskPriority?(v31, &demangling cache variable for type metadata for (PresenceUpdateMessage, GroupSessionMessenger.MessageContext));
      *(_QWORD *)(v0 + 272) = 0;
      v26 = (_QWORD *)swift_task_alloc();
      *(_QWORD *)(v0 + 280) = v26;
      *v26 = v0;
      v26[1] = specialized CollaborationConnectionManager.runGroupSession(_:);
      return AsyncStream.Iterator.next(isolation:)();
    }
  }
}

{
  swift_task_dealloc();
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (__cdecl *v3)();

  v3 = (uint64_t (__cdecl *)())((char *)&async function pointer to specialized CollaborationConnectionManager.didLeaveGroupSession(_:)
                             + async function pointer to specialized CollaborationConnectionManager.didLeaveGroupSession(_:));
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 304) = v1;
  *v1 = v0;
  v1[1] = specialized CollaborationConnectionManager.runGroupSession(_:);
  return v3();
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;
  uint64_t v4;
  uint64_t v6;

  swift_retain_n();
  v1 = Logger.logObject.getter();
  v2 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v1, v2))
  {
    v3 = (uint8_t *)swift_slowAlloc();
    v4 = swift_slowAlloc();
    v6 = v4;
    *(_DWORD *)v3 = 136446210;
    GroupSession.activity.getter();
    *(_QWORD *)(v0 + 80) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), &v6);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_24A3EF000, v1, v2, "Did finish running group session for activity: %{public}s", v3, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24BD0F964](v4, -1, -1);
    MEMORY[0x24BD0F964](v3, -1, -1);
  }
  else
  {
    swift_release_n();
  }

  static Task<>.checkCancellation()();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t specialized GroupSession.join(on:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v2[2] = a1;
  v2[3] = v1;
  v2[4] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupSession<PersonalDeviceCoordinationActivity>.JoinState);
  v2[5] = swift_task_alloc();
  return swift_task_switch();
}

{
  uint64_t v1;
  _QWORD *v2;

  v2[2] = a1;
  v2[3] = v1;
  v2[4] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupSession<CKShareCollaborationActivity>.JoinState);
  v2[5] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t specialized GroupSession.join(on:)()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v1 = (_QWORD *)v0[5];
  v2 = v0[2];
  *v1 = v0[3];
  swift_storeEnumTagMultiPayload();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<GroupSession<PersonalDeviceCoordinationActivity>.JoinState, os_unfair_lock_s>);
  v3 = swift_allocObject();
  v0[6] = v3;
  *(_DWORD *)(v3 + ((*(unsigned int *)(*(_QWORD *)v3 + 48) + 3) & 0x1FFFFFFFCLL)) = 0;
  outlined init with copy of TaskPriority?((uint64_t)v1, v3 + *(_QWORD *)(*MEMORY[0x24BEE27A8] + *(_QWORD *)v3 + 16), &demangling cache variable for type metadata for GroupSession<PersonalDeviceCoordinationActivity>.JoinState);
  swift_retain();
  outlined destroy of TaskPriority?((uint64_t)v1, &demangling cache variable for type metadata for GroupSession<PersonalDeviceCoordinationActivity>.JoinState);
  v4 = swift_task_alloc();
  v0[7] = v4;
  *(_QWORD *)(v4 + 16) = v3;
  *(_QWORD *)(v4 + 24) = v2;
  v5 = (_QWORD *)swift_task_alloc();
  v0[8] = v5;
  *v5 = v0;
  v5[1] = specialized GroupSession.join(on:);
  return withTaskCancellationHandler<A>(operation:onCancel:isolation:)();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 72) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  _QWORD *v1;

  v1 = *(_QWORD **)(v0 + 48);
  swift_setDeallocating();
  outlined destroy of TaskPriority?((uint64_t)v1 + *(_QWORD *)(*MEMORY[0x24BEE27A8] + *v1 + 16), &demangling cache variable for type metadata for GroupSession<PersonalDeviceCoordinationActivity>.JoinState);
  swift_deallocClassInstance();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  _QWORD *v1;

  v1 = *(_QWORD **)(v0 + 48);
  swift_setDeallocating();
  outlined destroy of TaskPriority?((uint64_t)v1 + *(_QWORD *)(*MEMORY[0x24BEE27A8] + *v1 + 16), &demangling cache variable for type metadata for GroupSession<PersonalDeviceCoordinationActivity>.JoinState);
  swift_deallocClassInstance();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v1 = (_QWORD *)v0[5];
  v2 = v0[2];
  *v1 = v0[3];
  swift_storeEnumTagMultiPayload();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<GroupSession<CKShareCollaborationActivity>.JoinState, os_unfair_lock_s>);
  v3 = swift_allocObject();
  v0[6] = v3;
  *(_DWORD *)(v3 + ((*(unsigned int *)(*(_QWORD *)v3 + 48) + 3) & 0x1FFFFFFFCLL)) = 0;
  outlined init with copy of TaskPriority?((uint64_t)v1, v3 + *(_QWORD *)(*MEMORY[0x24BEE27A8] + *(_QWORD *)v3 + 16), &demangling cache variable for type metadata for GroupSession<CKShareCollaborationActivity>.JoinState);
  swift_retain();
  outlined destroy of TaskPriority?((uint64_t)v1, &demangling cache variable for type metadata for GroupSession<CKShareCollaborationActivity>.JoinState);
  v4 = swift_task_alloc();
  v0[7] = v4;
  *(_QWORD *)(v4 + 16) = v3;
  *(_QWORD *)(v4 + 24) = v2;
  v5 = (_QWORD *)swift_task_alloc();
  v0[8] = v5;
  *v5 = v0;
  v5[1] = specialized GroupSession.join(on:);
  return withTaskCancellationHandler<A>(operation:onCancel:isolation:)();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 72) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  _QWORD *v1;

  v1 = *(_QWORD **)(v0 + 48);
  swift_setDeallocating();
  outlined destroy of TaskPriority?((uint64_t)v1 + *(_QWORD *)(*MEMORY[0x24BEE27A8] + *v1 + 16), &demangling cache variable for type metadata for GroupSession<CKShareCollaborationActivity>.JoinState);
  swift_deallocClassInstance();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  _QWORD *v1;

  v1 = *(_QWORD **)(v0 + 48);
  swift_setDeallocating();
  outlined destroy of TaskPriority?((uint64_t)v1 + *(_QWORD *)(*MEMORY[0x24BEE27A8] + *v1 + 16), &demangling cache variable for type metadata for GroupSession<CKShareCollaborationActivity>.JoinState);
  swift_deallocClassInstance();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfC15GroupActivities08PersonalD15SessionProviderCy17WebBookmarksSwift0F26DeviceCoordinationActivityVG_Tgm5Tm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;

  v7 = type metadata accessor for TaskPriority();
  v8 = *(_QWORD *)(v7 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(a1, 1, v7) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(a1, v7);
    if (!*(_QWORD *)(a3 + 16))
      goto LABEL_5;
    goto LABEL_3;
  }
  outlined destroy of TaskPriority?(a1, &demangling cache variable for type metadata for TaskPriority?);
  if (*(_QWORD *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  __swift_instantiateConcreteTypeFromMangledName(a4);
  return swift_task_create();
}

uint64_t specialized closure #2 in FastSyncStateMachine.leaveActivity(priority:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;

  v7[4] = a6;
  v7[5] = a7;
  v7[2] = a4;
  v7[3] = a5;
  return swift_task_switch();
}

{
  _QWORD *v7;

  v7[4] = a6;
  v7[5] = a7;
  v7[2] = a4;
  v7[3] = a5;
  return swift_task_switch();
}

uint64_t specialized closure #2 in FastSyncStateMachine.leaveActivity(priority:_:)()
{
  _QWORD *v0;
  int *v1;
  _QWORD *v2;
  uint64_t (*v4)(_QWORD);

  v1 = (int *)v0[3];
  MEMORY[0x24BD0F088](v0[2], MEMORY[0x24BEE4AE0] + 8, MEMORY[0x24BEE4078], MEMORY[0x24BEE40A8]);
  v4 = (uint64_t (*)(_QWORD))((char *)v1 + *v1);
  v2 = (_QWORD *)swift_task_alloc();
  v0[6] = v2;
  *v2 = v0;
  v2[1] = specialized closure #2 in FastSyncStateMachine.leaveActivity(priority:_:);
  return v4(v0[5]);
}

{
  _QWORD *v0;
  int *v1;
  _QWORD *v2;
  uint64_t (*v4)(_QWORD);

  v1 = (int *)v0[3];
  MEMORY[0x24BD0F088](v0[2], MEMORY[0x24BEE4AE0] + 8, MEMORY[0x24BEE4078], MEMORY[0x24BEE40A8]);
  v4 = (uint64_t (*)(_QWORD))((char *)v1 + *v1);
  v2 = (_QWORD *)swift_task_alloc();
  v0[6] = v2;
  *v2 = v0;
  v2[1] = specialized closure #2 in FastSyncStateMachine.leaveActivity(priority:_:);
  return v4(v0[5]);
}

{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t specialized closure #1 in FastSyncStateMachine.leaveActivity(priority:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  _QWORD *v7;

  v6[3] = a5;
  v6[4] = a6;
  v7 = (_QWORD *)swift_task_alloc();
  v6[5] = v7;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersonalGroupSessionProvider<PersonalDeviceCoordinationActivity>);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  *v7 = v6;
  v7[1] = specialized closure #1 in FastSyncStateMachine.leaveActivity(priority:_:);
  return Task.value.getter();
}

{
  _QWORD *v6;
  _QWORD *v7;

  v6[3] = a5;
  v6[4] = a6;
  v7 = (_QWORD *)swift_task_alloc();
  v6[5] = v7;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CKShareGroupSessionProvider<CKShareCollaborationActivity>);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  *v7 = v6;
  v7[1] = specialized closure #1 in FastSyncStateMachine.leaveActivity(priority:_:);
  return Task.value.getter();
}

uint64_t specialized closure #1 in FastSyncStateMachine.leaveActivity(priority:_:)()
{
  void *v0;

  swift_task_dealloc();
  if (v0)

  return swift_task_switch();
}

{
  _QWORD *v0;
  int *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t (*v5)(uint64_t);

  v2 = v0[2];
  v1 = (int *)v0[3];
  v0[6] = v2;
  v5 = (uint64_t (*)(uint64_t))((char *)v1 + *v1);
  v3 = (_QWORD *)swift_task_alloc();
  v0[7] = v3;
  *v3 = v0;
  v3[1] = specialized closure #1 in FastSyncStateMachine.leaveActivity(priority:_:);
  return v5(v2);
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  void *v0;

  swift_task_dealloc();
  if (v0)

  return swift_task_switch();
}

{
  _QWORD *v0;
  int *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t (*v5)(uint64_t);

  v2 = v0[2];
  v1 = (int *)v0[3];
  v0[6] = v2;
  v5 = (uint64_t (*)(uint64_t))((char *)v1 + *v1);
  v3 = (_QWORD *)swift_task_alloc();
  v0[7] = v3;
  *v3 = v0;
  v3[1] = specialized closure #1 in FastSyncStateMachine.leaveActivity(priority:_:);
  return v5(v2);
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t specialized GroupSessionMessengerController._makeTasks()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, uint64_t, uint64_t, uint64_t);
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  GroupSession.activity.getter();
  if (one-time initialization token for tabGroup != -1)
    swift_once();
  v5 = type metadata accessor for Logger();
  __swift_project_value_buffer(v5, (uint64_t)static Logger.tabGroup);
  v7 = v27;
  v6 = v28;
  swift_bridgeObjectRetain_n();
  v8 = Logger.logObject.getter();
  v9 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc();
    v11 = swift_slowAlloc();
    v26 = v11;
    *(_DWORD *)v10 = 136446210;
    swift_bridgeObjectRetain();
    v25 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v6, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_24A3EF000, v8, v9, "Setting up message subscription tasks for activity %{public}s", v10, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24BD0F964](v11, -1, -1);
    MEMORY[0x24BD0F964](v10, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  v12 = type metadata accessor for TaskPriority();
  v13 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56);
  v13(v4, 1, 1, v12);
  v15 = v27;
  v14 = v28;
  v16 = lazy protocol witness table accessor for type CKShareGroupSessionProvider<CKShareCollaborationActivity> and conformance CKShareGroupSessionProvider<A>(&lazy protocol witness table cache variable for type GroupSessionMessengerController<PersonalDeviceCoordinationActivity, PresenceUpdateMessage> and conformance GroupSessionMessengerController<A, B>, &demangling cache variable for type metadata for GroupSessionMessengerController<PersonalDeviceCoordinationActivity, PresenceUpdateMessage>, (uint64_t)&protocol conformance descriptor for GroupSessionMessengerController<A, B>);
  v17 = (_QWORD *)swift_allocObject();
  v17[2] = v1;
  v17[3] = v16;
  v17[4] = v1;
  v17[5] = v15;
  v17[6] = v14;
  swift_retain_n();
  swift_bridgeObjectRetain();
  v18 = _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v4, (uint64_t)&async function pointer to partial apply for specialized closure #1 in GroupSessionMessengerController._makeTasks(), (uint64_t)v17);
  v13(v4, 1, 1, v12);
  v20 = v27;
  v19 = v28;
  v21 = (_QWORD *)swift_allocObject();
  v21[2] = v1;
  v21[3] = v16;
  v21[4] = v1;
  v21[5] = v20;
  v21[6] = v19;
  swift_retain_n();
  swift_bridgeObjectRetain();
  v22 = _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v4, (uint64_t)&async function pointer to partial apply for specialized closure #2 in GroupSessionMessengerController._makeTasks(), (uint64_t)v21);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Task<(), Never>>);
  v23 = swift_allocObject();
  *(_OWORD *)(v23 + 16) = xmmword_24A42FA30;
  *(_QWORD *)(v23 + 32) = v18;
  *(_QWORD *)(v23 + 40) = v22;
  swift_bridgeObjectRelease();
  return v23;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, uint64_t, uint64_t, uint64_t);
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  GroupSession.activity.getter();
  if (one-time initialization token for tabGroup != -1)
    swift_once();
  v5 = type metadata accessor for Logger();
  __swift_project_value_buffer(v5, (uint64_t)static Logger.tabGroup);
  v7 = v27;
  v6 = v28;
  swift_bridgeObjectRetain_n();
  v8 = Logger.logObject.getter();
  v9 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc();
    v11 = swift_slowAlloc();
    v26 = v11;
    *(_DWORD *)v10 = 136446210;
    swift_bridgeObjectRetain();
    v25 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v6, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_24A3EF000, v8, v9, "Setting up message subscription tasks for activity %{public}s", v10, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24BD0F964](v11, -1, -1);
    MEMORY[0x24BD0F964](v10, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  v12 = type metadata accessor for TaskPriority();
  v13 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56);
  v13(v4, 1, 1, v12);
  v15 = v27;
  v14 = v28;
  v16 = lazy protocol witness table accessor for type CKShareGroupSessionProvider<CKShareCollaborationActivity> and conformance CKShareGroupSessionProvider<A>(&lazy protocol witness table cache variable for type GroupSessionMessengerController<CKShareCollaborationActivity, PresenceUpdateMessage> and conformance GroupSessionMessengerController<A, B>, &demangling cache variable for type metadata for GroupSessionMessengerController<CKShareCollaborationActivity, PresenceUpdateMessage>, (uint64_t)&protocol conformance descriptor for GroupSessionMessengerController<A, B>);
  v17 = (_QWORD *)swift_allocObject();
  v17[2] = v1;
  v17[3] = v16;
  v17[4] = v1;
  v17[5] = v15;
  v17[6] = v14;
  swift_retain_n();
  swift_bridgeObjectRetain();
  v18 = _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v4, (uint64_t)&async function pointer to partial apply for specialized closure #1 in GroupSessionMessengerController._makeTasks(), (uint64_t)v17);
  v13(v4, 1, 1, v12);
  v20 = v27;
  v19 = v28;
  v21 = (_QWORD *)swift_allocObject();
  v21[2] = v1;
  v21[3] = v16;
  v21[4] = v1;
  v21[5] = v20;
  v21[6] = v19;
  swift_retain_n();
  swift_bridgeObjectRetain();
  v22 = _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v4, (uint64_t)&async function pointer to partial apply for specialized closure #2 in GroupSessionMessengerController._makeTasks(), (uint64_t)v21);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Task<(), Never>>);
  v23 = swift_allocObject();
  *(_OWORD *)(v23 + 16) = xmmword_24A42FA30;
  *(_QWORD *)(v23 + 32) = v18;
  *(_QWORD *)(v23 + 40) = v22;
  swift_bridgeObjectRelease();
  return v23;
}

uint64_t specialized closure #1 in GroupSessionMessengerController._makeTasks()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6[5] = a5;
  v6[6] = a6;
  v6[4] = a4;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PresenceUpdateMessage, GroupSessionMessenger.MessageContext));
  v6[7] = v7;
  v6[8] = *(_QWORD *)(v7 - 8);
  v6[9] = swift_task_alloc();
  v6[10] = swift_task_alloc();
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<(PresenceUpdateMessage, GroupSessionMessenger.MessageContext)>.Continuation.YieldResult);
  v6[11] = v8;
  v6[12] = *(_QWORD *)(v8 - 8);
  v6[13] = swift_task_alloc();
  v9 = type metadata accessor for GroupSessionMessenger.MessageContext();
  v6[14] = v9;
  v6[15] = *(_QWORD *)(v9 - 8);
  v6[16] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PresenceUpdateMessage, GroupSessionMessenger.MessageContext)?);
  v6[17] = swift_task_alloc();
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupSessionMessenger.Messages<PresenceUpdateMessage>);
  v6[18] = v10;
  v6[19] = *(_QWORD *)(v10 - 8);
  v6[20] = swift_task_alloc();
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupSessionMessenger.Messages<PresenceUpdateMessage>.Iterator);
  v6[21] = v11;
  v6[22] = *(_QWORD *)(v11 - 8);
  v6[23] = swift_task_alloc();
  return swift_task_switch();
}

{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6[5] = a5;
  v6[6] = a6;
  v6[4] = a4;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PresenceUpdateMessage, GroupSessionMessenger.MessageContext));
  v6[7] = v7;
  v6[8] = *(_QWORD *)(v7 - 8);
  v6[9] = swift_task_alloc();
  v6[10] = swift_task_alloc();
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<(PresenceUpdateMessage, GroupSessionMessenger.MessageContext)>.Continuation.YieldResult);
  v6[11] = v8;
  v6[12] = *(_QWORD *)(v8 - 8);
  v6[13] = swift_task_alloc();
  v9 = type metadata accessor for GroupSessionMessenger.MessageContext();
  v6[14] = v9;
  v6[15] = *(_QWORD *)(v9 - 8);
  v6[16] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PresenceUpdateMessage, GroupSessionMessenger.MessageContext)?);
  v6[17] = swift_task_alloc();
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupSessionMessenger.Messages<PresenceUpdateMessage>);
  v6[18] = v10;
  v6[19] = *(_QWORD *)(v10 - 8);
  v6[20] = swift_task_alloc();
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GroupSessionMessenger.Messages<PresenceUpdateMessage>.Iterator);
  v6[21] = v11;
  v6[22] = *(_QWORD *)(v11 - 8);
  v6[23] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t specialized closure #1 in GroupSessionMessengerController._makeTasks()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = v0[19];
  v1 = v0[20];
  v3 = v0[18];
  lazy protocol witness table accessor for type PresenceUpdateMessage and conformance PresenceUpdateMessage();
  lazy protocol witness table accessor for type PresenceUpdateMessage and conformance PresenceUpdateMessage();
  GroupSessionMessenger.messages<A>(of:)();
  GroupSessionMessenger.Messages.makeAsyncIterator()();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v0[24] = lazy protocol witness table accessor for type CKShareGroupSessionProvider<CKShareCollaborationActivity> and conformance CKShareGroupSessionProvider<A>(&lazy protocol witness table cache variable for type GroupSessionMessengerController<PersonalDeviceCoordinationActivity, PresenceUpdateMessage> and conformance GroupSessionMessengerController<A, B>, &demangling cache variable for type metadata for GroupSessionMessengerController<PersonalDeviceCoordinationActivity, PresenceUpdateMessage>, (uint64_t)&protocol conformance descriptor for GroupSessionMessengerController<A, B>);
  v0[25] = lazy protocol witness table accessor for type CKShareGroupSessionProvider<CKShareCollaborationActivity> and conformance CKShareGroupSessionProvider<A>(&lazy protocol witness table cache variable for type GroupSessionMessenger.Messages<PresenceUpdateMessage>.Iterator and conformance GroupSessionMessenger.Messages<A>.Iterator, &demangling cache variable for type metadata for GroupSessionMessenger.Messages<PresenceUpdateMessage>.Iterator, MEMORY[0x24BDD1D48]);
  v4 = (_QWORD *)swift_task_alloc();
  v0[26] = v4;
  *v4 = v0;
  v4[1] = specialized closure #1 in GroupSessionMessengerController._makeTasks();
  return dispatch thunk of AsyncIteratorProtocol.next()();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  swift_task_dealloc();
  if (v0)
  {
    *(_QWORD *)(v2 + 216) = v0;
    swift_getObjectType();
    dispatch thunk of Actor.unownedExecutor.getter();
  }
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  BOOL v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  char *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v1 = *(uint64_t **)(v0 + 136);
  v2 = *(_QWORD *)(v0 + 56);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v0 + 64) + 48))(v1, 1, v2) == 1)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 176) + 8))(*(_QWORD *)(v0 + 184), *(_QWORD *)(v0 + 168));
LABEL_14:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v3 = (char *)v1 + *(int *)(v2 + 48);
  v4 = v1[1];
  v51 = *v1;
  v6 = v1[2];
  v5 = v1[3];
  v7 = v1[4];
  v8 = v1[5];
  v9 = v1[6];
  (*(void (**)(_QWORD, char *, _QWORD))(*(_QWORD *)(v0 + 120) + 32))(*(_QWORD *)(v0 + 128), v3, *(_QWORD *)(v0 + 112));
  if ((static Task<>.isCancelled.getter() & 1) != 0)
  {
    if (one-time initialization token for tabGroup != -1)
      swift_once();
    v10 = type metadata accessor for Logger();
    __swift_project_value_buffer(v10, (uint64_t)static Logger.tabGroup);
    swift_bridgeObjectRetain();
    v11 = Logger.logObject.getter();
    v12 = static os_log_type_t.info.getter();
    v13 = os_log_type_enabled(v11, v12);
    v14 = *(_QWORD *)(v0 + 184);
    v15 = *(_QWORD *)(v0 + 168);
    v45 = *(_QWORD *)(v0 + 128);
    v47 = *(_QWORD *)(v0 + 176);
    v41 = *(_QWORD *)(v0 + 120);
    v43 = *(_QWORD *)(v0 + 112);
    v16 = *(_QWORD *)(v0 + 48);
    if (v13)
    {
      v17 = *(_QWORD *)(v0 + 40);
      v37 = v4;
      v18 = (uint8_t *)swift_slowAlloc();
      v19 = swift_slowAlloc();
      v52 = v19;
      *(_DWORD *)v18 = 136446210;
      *(_QWORD *)(v0 + 24) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v16, &v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_24A3EF000, v11, v12, "Did cancel receiving message subscription for activity %{public}s", v18, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24BD0F964](v19, -1, -1);
      MEMORY[0x24BD0F964](v18, -1, -1);

      (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v45, v43);
      outlined consume of PresenceUpdateMessage.Kind(v51, v37);
      swift_bridgeObjectRelease();
    }
    else
    {

      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v45, v43);
      outlined consume of PresenceUpdateMessage.Kind(v51, v4);
      swift_bridgeObjectRelease();
    }
    (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v14, v15);
    goto LABEL_14;
  }
  v46 = v8;
  v48 = v7;
  if (one-time initialization token for tabGroup != -1)
    swift_once();
  v49 = v6;
  v50 = v9;
  v20 = type metadata accessor for Logger();
  __swift_project_value_buffer(v20, (uint64_t)static Logger.tabGroup);
  swift_bridgeObjectRetain();
  v21 = Logger.logObject.getter();
  v22 = static os_log_type_t.info.getter();
  v23 = os_log_type_enabled(v21, v22);
  v24 = *(_QWORD *)(v0 + 48);
  v25 = v4;
  if (v23)
  {
    v26 = *(_QWORD *)(v0 + 40);
    v27 = v5;
    v28 = swift_slowAlloc();
    v29 = swift_slowAlloc();
    v52 = v29;
    *(_DWORD *)v28 = 136446210;
    *(_QWORD *)(v28 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v24, &v52);
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_24A3EF000, v21, v22, "Did receive message for activity %{public}s", (uint8_t *)v28, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24BD0F964](v29, -1, -1);
    v30 = v28;
    v5 = v27;
    MEMORY[0x24BD0F964](v30, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease();
  }

  v39 = *(_QWORD *)(v0 + 128);
  v40 = *(_QWORD *)(v0 + 120);
  v32 = *(_QWORD *)(v0 + 104);
  v38 = *(_QWORD *)(v0 + 112);
  v33 = *(uint64_t **)(v0 + 80);
  v42 = *(_QWORD *)(v0 + 96);
  v44 = *(_QWORD *)(v0 + 88);
  v34 = *(_QWORD *)(v0 + 72);
  v35 = (char *)v33 + *(int *)(*(_QWORD *)(v0 + 56) + 48);
  *v33 = v51;
  v33[1] = v25;
  v33[2] = v49;
  v33[3] = v5;
  v33[4] = v48;
  v33[5] = v46;
  v33[6] = v50;
  (*(void (**)(char *))(v40 + 16))(v35);
  outlined init with copy of TaskPriority?((uint64_t)v33, v34, &demangling cache variable for type metadata for (PresenceUpdateMessage, GroupSessionMessenger.MessageContext));
  outlined copy of PresenceUpdateMessage.Kind(v51, v25);
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<(PresenceUpdateMessage, GroupSessionMessenger.MessageContext)>.Continuation);
  AsyncStream.Continuation.yield(_:)();
  outlined destroy of TaskPriority?((uint64_t)v33, &demangling cache variable for type metadata for (PresenceUpdateMessage, GroupSessionMessenger.MessageContext));
  (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v32, v44);
  (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v39, v38);
  outlined consume of PresenceUpdateMessage.Kind(v51, v25);
  swift_bridgeObjectRelease();
  v36 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 224) = v36;
  *v36 = v0;
  v36[1] = specialized closure #1 in GroupSessionMessengerController._makeTasks();
  return dispatch thunk of AsyncIteratorProtocol.next()();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  swift_task_dealloc();
  if (v0)
  {
    *(_QWORD *)(v2 + 216) = v0;
    swift_getObjectType();
    dispatch thunk of Actor.unownedExecutor.getter();
  }
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = v0[19];
  v1 = v0[20];
  v3 = v0[18];
  lazy protocol witness table accessor for type PresenceUpdateMessage and conformance PresenceUpdateMessage();
  lazy protocol witness table accessor for type PresenceUpdateMessage and conformance PresenceUpdateMessage();
  GroupSessionMessenger.messages<A>(of:)();
  GroupSessionMessenger.Messages.makeAsyncIterator()();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v0[24] = lazy protocol witness table accessor for type CKShareGroupSessionProvider<CKShareCollaborationActivity> and conformance CKShareGroupSessionProvider<A>(&lazy protocol witness table cache variable for type GroupSessionMessengerController<CKShareCollaborationActivity, PresenceUpdateMessage> and conformance GroupSessionMessengerController<A, B>, &demangling cache variable for type metadata for GroupSessionMessengerController<CKShareCollaborationActivity, PresenceUpdateMessage>, (uint64_t)&protocol conformance descriptor for GroupSessionMessengerController<A, B>);
  v0[25] = lazy protocol witness table accessor for type CKShareGroupSessionProvider<CKShareCollaborationActivity> and conformance CKShareGroupSessionProvider<A>(&lazy protocol witness table cache variable for type GroupSessionMessenger.Messages<PresenceUpdateMessage>.Iterator and conformance GroupSessionMessenger.Messages<A>.Iterator, &demangling cache variable for type metadata for GroupSessionMessenger.Messages<PresenceUpdateMessage>.Iterator, MEMORY[0x24BDD1D48]);
  v4 = (_QWORD *)swift_task_alloc();
  v0[26] = v4;
  *v4 = v0;
  v4[1] = specialized closure #1 in GroupSessionMessengerController._makeTasks();
  return dispatch thunk of AsyncIteratorProtocol.next()();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  swift_task_dealloc();
  if (v0)
  {
    *(_QWORD *)(v2 + 216) = v0;
    swift_getObjectType();
    dispatch thunk of Actor.unownedExecutor.getter();
  }
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  BOOL v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  char *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v1 = *(uint64_t **)(v0 + 136);
  v2 = *(_QWORD *)(v0 + 56);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v0 + 64) + 48))(v1, 1, v2) == 1)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 176) + 8))(*(_QWORD *)(v0 + 184), *(_QWORD *)(v0 + 168));
LABEL_14:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v3 = (char *)v1 + *(int *)(v2 + 48);
  v4 = v1[1];
  v51 = *v1;
  v6 = v1[2];
  v5 = v1[3];
  v7 = v1[4];
  v8 = v1[5];
  v9 = v1[6];
  (*(void (**)(_QWORD, char *, _QWORD))(*(_QWORD *)(v0 + 120) + 32))(*(_QWORD *)(v0 + 128), v3, *(_QWORD *)(v0 + 112));
  if ((static Task<>.isCancelled.getter() & 1) != 0)
  {
    if (one-time initialization token for tabGroup != -1)
      swift_once();
    v10 = type metadata accessor for Logger();
    __swift_project_value_buffer(v10, (uint64_t)static Logger.tabGroup);
    swift_bridgeObjectRetain();
    v11 = Logger.logObject.getter();
    v12 = static os_log_type_t.info.getter();
    v13 = os_log_type_enabled(v11, v12);
    v14 = *(_QWORD *)(v0 + 184);
    v15 = *(_QWORD *)(v0 + 168);
    v45 = *(_QWORD *)(v0 + 128);
    v47 = *(_QWORD *)(v0 + 176);
    v41 = *(_QWORD *)(v0 + 120);
    v43 = *(_QWORD *)(v0 + 112);
    v16 = *(_QWORD *)(v0 + 48);
    if (v13)
    {
      v17 = *(_QWORD *)(v0 + 40);
      v37 = v4;
      v18 = (uint8_t *)swift_slowAlloc();
      v19 = swift_slowAlloc();
      v52 = v19;
      *(_DWORD *)v18 = 136446210;
      *(_QWORD *)(v0 + 24) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v16, &v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_24A3EF000, v11, v12, "Did cancel receiving message subscription for activity %{public}s", v18, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24BD0F964](v19, -1, -1);
      MEMORY[0x24BD0F964](v18, -1, -1);

      (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v45, v43);
      outlined consume of PresenceUpdateMessage.Kind(v51, v37);
      swift_bridgeObjectRelease();
    }
    else
    {

      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v45, v43);
      outlined consume of PresenceUpdateMessage.Kind(v51, v4);
      swift_bridgeObjectRelease();
    }
    (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v14, v15);
    goto LABEL_14;
  }
  v46 = v8;
  v48 = v7;
  if (one-time initialization token for tabGroup != -1)
    swift_once();
  v49 = v6;
  v50 = v9;
  v20 = type metadata accessor for Logger();
  __swift_project_value_buffer(v20, (uint64_t)static Logger.tabGroup);
  swift_bridgeObjectRetain();
  v21 = Logger.logObject.getter();
  v22 = static os_log_type_t.info.getter();
  v23 = os_log_type_enabled(v21, v22);
  v24 = *(_QWORD *)(v0 + 48);
  v25 = v4;
  if (v23)
  {
    v26 = *(_QWORD *)(v0 + 40);
    v27 = v5;
    v28 = swift_slowAlloc();
    v29 = swift_slowAlloc();
    v52 = v29;
    *(_DWORD *)v28 = 136446210;
    *(_QWORD *)(v28 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v24, &v52);
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_24A3EF000, v21, v22, "Did receive message for activity %{public}s", (uint8_t *)v28, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24BD0F964](v29, -1, -1);
    v30 = v28;
    v5 = v27;
    MEMORY[0x24BD0F964](v30, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease();
  }

  v39 = *(_QWORD *)(v0 + 128);
  v40 = *(_QWORD *)(v0 + 120);
  v32 = *(_QWORD *)(v0 + 104);
  v38 = *(_QWORD *)(v0 + 112);
  v33 = *(uint64_t **)(v0 + 80);
  v42 = *(_QWORD *)(v0 + 96);
  v44 = *(_QWORD *)(v0 + 88);
  v34 = *(_QWORD *)(v0 + 72);
  v35 = (char *)v33 + *(int *)(*(_QWORD *)(v0 + 56) + 48);
  *v33 = v51;
  v33[1] = v25;
  v33[2] = v49;
  v33[3] = v5;
  v33[4] = v48;
  v33[5] = v46;
  v33[6] = v50;
  (*(void (**)(char *))(v40 + 16))(v35);
  outlined init with copy of TaskPriority?((uint64_t)v33, v34, &demangling cache variable for type metadata for (PresenceUpdateMessage, GroupSessionMessenger.MessageContext));
  outlined copy of PresenceUpdateMessage.Kind(v51, v25);
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<(PresenceUpdateMessage, GroupSessionMessenger.MessageContext)>.Continuation);
  AsyncStream.Continuation.yield(_:)();
  outlined destroy of TaskPriority?((uint64_t)v33, &demangling cache variable for type metadata for (PresenceUpdateMessage, GroupSessionMessenger.MessageContext));
  (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v32, v44);
  (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v39, v38);
  outlined consume of PresenceUpdateMessage.Kind(v51, v25);
  swift_bridgeObjectRelease();
  v36 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 224) = v36;
  *v36 = v0;
  v36[1] = specialized closure #1 in GroupSessionMessengerController._makeTasks();
  return dispatch thunk of AsyncIteratorProtocol.next()();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 16) = *(_QWORD *)(v0 + 216);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  swift_dynamicCast();
  return swift_willThrowTypedImpl();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  swift_task_dealloc();
  if (v0)
  {
    *(_QWORD *)(v2 + 216) = v0;
    swift_getObjectType();
    dispatch thunk of Actor.unownedExecutor.getter();
  }
  return swift_task_switch();
}

uint64_t specialized closure #2 in GroupSessionMessengerController._makeTasks()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v6[18] = a5;
  v6[19] = a6;
  v6[17] = a4;
  v7 = type metadata accessor for Participants();
  v6[20] = v7;
  v6[21] = *(_QWORD *)(v7 - 8);
  v6[22] = swift_task_alloc();
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<PresenceUpdateMessage>.Iterator);
  v6[23] = v8;
  v6[24] = *(_QWORD *)(v8 - 8);
  v6[25] = swift_task_alloc();
  return swift_task_switch();
}

{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v6[18] = a5;
  v6[19] = a6;
  v6[17] = a4;
  v7 = type metadata accessor for Participants();
  v6[20] = v7;
  v6[21] = *(_QWORD *)(v7 - 8);
  v6[22] = swift_task_alloc();
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<PresenceUpdateMessage>.Iterator);
  v6[23] = v8;
  v6[24] = *(_QWORD *)(v8 - 8);
  v6[25] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t specialized closure #2 in GroupSessionMessengerController._makeTasks()()
{
  uint64_t v0;
  _QWORD *v1;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<PresenceUpdateMessage>);
  AsyncStream.makeAsyncIterator()();
  *(_QWORD *)(v0 + 208) = lazy protocol witness table accessor for type CKShareGroupSessionProvider<CKShareCollaborationActivity> and conformance CKShareGroupSessionProvider<A>(&lazy protocol witness table cache variable for type GroupSessionMessengerController<PersonalDeviceCoordinationActivity, PresenceUpdateMessage> and conformance GroupSessionMessengerController<A, B>, &demangling cache variable for type metadata for GroupSessionMessengerController<PersonalDeviceCoordinationActivity, PresenceUpdateMessage>, (uint64_t)&protocol conformance descriptor for GroupSessionMessengerController<A, B>);
  *(_DWORD *)(v0 + 248) = *MEMORY[0x24BDD1F50];
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 216) = v1;
  *v1 = v0;
  v1[1] = specialized closure #2 in GroupSessionMessengerController._makeTasks();
  return AsyncStream.Iterator.next(isolation:)();
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  __int128 v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  BOOL v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v1 = *(_QWORD *)(v0 + 64);
  if (!v1)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 192) + 8))(*(_QWORD *)(v0 + 200), *(_QWORD *)(v0 + 184));
LABEL_13:
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v2 = *(_OWORD *)(v0 + 32);
  *(_OWORD *)(v0 + 72) = *(_OWORD *)(v0 + 16);
  *(_OWORD *)(v0 + 88) = v2;
  *(_OWORD *)(v0 + 104) = *(_OWORD *)(v0 + 48);
  *(_QWORD *)(v0 + 120) = v1;
  if ((static Task<>.isCancelled.getter() & 1) != 0)
  {
    if (one-time initialization token for tabGroup != -1)
      swift_once();
    v3 = type metadata accessor for Logger();
    __swift_project_value_buffer(v3, (uint64_t)static Logger.tabGroup);
    swift_bridgeObjectRetain();
    v4 = Logger.logObject.getter();
    v5 = static os_log_type_t.info.getter();
    v6 = os_log_type_enabled(v4, v5);
    v8 = *(_QWORD *)(v0 + 192);
    v7 = *(_QWORD *)(v0 + 200);
    v9 = *(_QWORD *)(v0 + 184);
    v10 = *(_QWORD *)(v0 + 152);
    if (v6)
    {
      v11 = *(_QWORD *)(v0 + 144);
      v25 = *(_QWORD *)(v0 + 184);
      v24 = *(_QWORD *)(v0 + 200);
      v12 = (uint8_t *)swift_slowAlloc();
      v13 = swift_slowAlloc();
      v26 = v13;
      *(_DWORD *)v12 = 136446210;
      *(_QWORD *)(v0 + 128) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v10, &v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_24A3EF000, v4, v5, "Did cancel sending message subscription for activity %{public}s", v12, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24BD0F964](v13, -1, -1);
      MEMORY[0x24BD0F964](v12, -1, -1);

      outlined consume of PresenceUpdateMessage.Kind(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80));
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v24, v25);
    }
    else
    {

      swift_bridgeObjectRelease();
      outlined consume of PresenceUpdateMessage.Kind(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80));
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
    }
    goto LABEL_13;
  }
  if (one-time initialization token for tabGroup != -1)
    swift_once();
  v14 = type metadata accessor for Logger();
  *(_QWORD *)(v0 + 224) = __swift_project_value_buffer(v14, (uint64_t)static Logger.tabGroup);
  swift_bridgeObjectRetain();
  v15 = Logger.logObject.getter();
  v16 = static os_log_type_t.info.getter();
  v17 = os_log_type_enabled(v15, v16);
  v18 = *(_QWORD *)(v0 + 152);
  if (v17)
  {
    v19 = *(_QWORD *)(v0 + 144);
    v20 = swift_slowAlloc();
    v21 = swift_slowAlloc();
    v26 = v21;
    *(_DWORD *)v20 = 136446210;
    *(_QWORD *)(v20 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v18, &v26);
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_24A3EF000, v15, v16, "Will send message to activity %{public}s", (uint8_t *)v20, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24BD0F964](v21, -1, -1);
    MEMORY[0x24BD0F964](v20, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease();
  }

  (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 168) + 104))(*(_QWORD *)(v0 + 176), *(unsigned int *)(v0 + 248), *(_QWORD *)(v0 + 160));
  v23 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 232) = v23;
  lazy protocol witness table accessor for type PresenceUpdateMessage and conformance PresenceUpdateMessage();
  lazy protocol witness table accessor for type PresenceUpdateMessage and conformance PresenceUpdateMessage();
  *v23 = v0;
  v23[1] = specialized closure #2 in GroupSessionMessengerController._makeTasks();
  return GroupSessionMessenger.send<A>(_:to:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 168);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 176);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 160);
  *(_QWORD *)(*(_QWORD *)v1 + 240) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  return swift_task_switch();
}

{
  uint64_t *v0;
  NSObject *v1;
  os_log_type_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v10;

  swift_bridgeObjectRetain();
  v1 = Logger.logObject.getter();
  v2 = static os_log_type_t.info.getter();
  v3 = os_log_type_enabled(v1, v2);
  v4 = v0[19];
  if (v3)
  {
    v5 = v0[18];
    v6 = swift_slowAlloc();
    v7 = swift_slowAlloc();
    v10 = v7;
    *(_DWORD *)v6 = 136446210;
    *(_QWORD *)(v6 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v5, v4, &v10);
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_24A3EF000, v1, v2, "Did send message to activity %{public}s", (uint8_t *)v6, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24BD0F964](v7, -1, -1);
    MEMORY[0x24BD0F964](v6, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease();
  }
  outlined consume of PresenceUpdateMessage.Kind(v0[9], v0[10]);
  swift_bridgeObjectRelease();
  v8 = (_QWORD *)swift_task_alloc();
  v0[27] = (uint64_t)v8;
  *v8 = v0;
  v8[1] = specialized closure #2 in GroupSessionMessengerController._makeTasks();
  return AsyncStream.Iterator.next(isolation:)();
}

{
  uint64_t *v0;
  void *v1;
  id v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  BOOL v6;
  void *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v17;

  v1 = (void *)v0[30];
  swift_bridgeObjectRetain();
  v2 = v1;
  swift_bridgeObjectRetain();
  v3 = v1;
  v4 = Logger.logObject.getter();
  v5 = static os_log_type_t.error.getter();
  v6 = os_log_type_enabled(v4, v5);
  v7 = (void *)v0[30];
  v8 = v0[19];
  if (v6)
  {
    v9 = v0[18];
    v10 = swift_slowAlloc();
    v11 = (_QWORD *)swift_slowAlloc();
    v12 = swift_slowAlloc();
    v17 = v12;
    *(_DWORD *)v10 = 136446466;
    *(_QWORD *)(v10 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v8, &v17);
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v10 + 12) = 2112;
    v13 = v7;
    v14 = _swift_stdlib_bridgeErrorToNSError();
    *(_QWORD *)(v10 + 14) = v14;
    *v11 = v14;

    _os_log_impl(&dword_24A3EF000, v4, v5, "Failed to send message to activity %{public}s with error: %@", (uint8_t *)v10, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x24BD0F964](v11, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x24BD0F964](v12, -1, -1);
    MEMORY[0x24BD0F964](v10, -1, -1);

  }
  else
  {
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
  }

  outlined consume of PresenceUpdateMessage.Kind(v0[9], v0[10]);
  swift_bridgeObjectRelease();
  v15 = (_QWORD *)swift_task_alloc();
  v0[27] = (uint64_t)v15;
  *v15 = v0;
  v15[1] = specialized closure #2 in GroupSessionMessengerController._makeTasks();
  return AsyncStream.Iterator.next(isolation:)();
}

{
  uint64_t v0;
  _QWORD *v1;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<PresenceUpdateMessage>);
  AsyncStream.makeAsyncIterator()();
  *(_QWORD *)(v0 + 208) = lazy protocol witness table accessor for type CKShareGroupSessionProvider<CKShareCollaborationActivity> and conformance CKShareGroupSessionProvider<A>(&lazy protocol witness table cache variable for type GroupSessionMessengerController<CKShareCollaborationActivity, PresenceUpdateMessage> and conformance GroupSessionMessengerController<A, B>, &demangling cache variable for type metadata for GroupSessionMessengerController<CKShareCollaborationActivity, PresenceUpdateMessage>, (uint64_t)&protocol conformance descriptor for GroupSessionMessengerController<A, B>);
  *(_DWORD *)(v0 + 248) = *MEMORY[0x24BDD1F50];
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 216) = v1;
  *v1 = v0;
  v1[1] = specialized closure #2 in GroupSessionMessengerController._makeTasks();
  return AsyncStream.Iterator.next(isolation:)();
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  __int128 v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  BOOL v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v1 = *(_QWORD *)(v0 + 64);
  if (!v1)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 192) + 8))(*(_QWORD *)(v0 + 200), *(_QWORD *)(v0 + 184));
LABEL_13:
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v2 = *(_OWORD *)(v0 + 32);
  *(_OWORD *)(v0 + 72) = *(_OWORD *)(v0 + 16);
  *(_OWORD *)(v0 + 88) = v2;
  *(_OWORD *)(v0 + 104) = *(_OWORD *)(v0 + 48);
  *(_QWORD *)(v0 + 120) = v1;
  if ((static Task<>.isCancelled.getter() & 1) != 0)
  {
    if (one-time initialization token for tabGroup != -1)
      swift_once();
    v3 = type metadata accessor for Logger();
    __swift_project_value_buffer(v3, (uint64_t)static Logger.tabGroup);
    swift_bridgeObjectRetain();
    v4 = Logger.logObject.getter();
    v5 = static os_log_type_t.info.getter();
    v6 = os_log_type_enabled(v4, v5);
    v8 = *(_QWORD *)(v0 + 192);
    v7 = *(_QWORD *)(v0 + 200);
    v9 = *(_QWORD *)(v0 + 184);
    v10 = *(_QWORD *)(v0 + 152);
    if (v6)
    {
      v11 = *(_QWORD *)(v0 + 144);
      v25 = *(_QWORD *)(v0 + 184);
      v24 = *(_QWORD *)(v0 + 200);
      v12 = (uint8_t *)swift_slowAlloc();
      v13 = swift_slowAlloc();
      v26 = v13;
      *(_DWORD *)v12 = 136446210;
      *(_QWORD *)(v0 + 128) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v10, &v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_24A3EF000, v4, v5, "Did cancel sending message subscription for activity %{public}s", v12, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24BD0F964](v13, -1, -1);
      MEMORY[0x24BD0F964](v12, -1, -1);

      outlined consume of PresenceUpdateMessage.Kind(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80));
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v24, v25);
    }
    else
    {

      swift_bridgeObjectRelease();
      outlined consume of PresenceUpdateMessage.Kind(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80));
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
    }
    goto LABEL_13;
  }
  if (one-time initialization token for tabGroup != -1)
    swift_once();
  v14 = type metadata accessor for Logger();
  *(_QWORD *)(v0 + 224) = __swift_project_value_buffer(v14, (uint64_t)static Logger.tabGroup);
  swift_bridgeObjectRetain();
  v15 = Logger.logObject.getter();
  v16 = static os_log_type_t.info.getter();
  v17 = os_log_type_enabled(v15, v16);
  v18 = *(_QWORD *)(v0 + 152);
  if (v17)
  {
    v19 = *(_QWORD *)(v0 + 144);
    v20 = swift_slowAlloc();
    v21 = swift_slowAlloc();
    v26 = v21;
    *(_DWORD *)v20 = 136446210;
    *(_QWORD *)(v20 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v18, &v26);
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_24A3EF000, v15, v16, "Will send message to activity %{public}s", (uint8_t *)v20, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24BD0F964](v21, -1, -1);
    MEMORY[0x24BD0F964](v20, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease();
  }

  (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 168) + 104))(*(_QWORD *)(v0 + 176), *(unsigned int *)(v0 + 248), *(_QWORD *)(v0 + 160));
  v23 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 232) = v23;
  lazy protocol witness table accessor for type PresenceUpdateMessage and conformance PresenceUpdateMessage();
  lazy protocol witness table accessor for type PresenceUpdateMessage and conformance PresenceUpdateMessage();
  *v23 = v0;
  v23[1] = specialized closure #2 in GroupSessionMessengerController._makeTasks();
  return GroupSessionMessenger.send<A>(_:to:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 168);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 176);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 160);
  *(_QWORD *)(*(_QWORD *)v1 + 240) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  return swift_task_switch();
}

{
  uint64_t *v0;
  NSObject *v1;
  os_log_type_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v10;

  swift_bridgeObjectRetain();
  v1 = Logger.logObject.getter();
  v2 = static os_log_type_t.info.getter();
  v3 = os_log_type_enabled(v1, v2);
  v4 = v0[19];
  if (v3)
  {
    v5 = v0[18];
    v6 = swift_slowAlloc();
    v7 = swift_slowAlloc();
    v10 = v7;
    *(_DWORD *)v6 = 136446210;
    *(_QWORD *)(v6 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v5, v4, &v10);
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_24A3EF000, v1, v2, "Did send message to activity %{public}s", (uint8_t *)v6, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24BD0F964](v7, -1, -1);
    MEMORY[0x24BD0F964](v6, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease();
  }
  outlined consume of PresenceUpdateMessage.Kind(v0[9], v0[10]);
  swift_bridgeObjectRelease();
  v8 = (_QWORD *)swift_task_alloc();
  v0[27] = (uint64_t)v8;
  *v8 = v0;
  v8[1] = specialized closure #2 in GroupSessionMessengerController._makeTasks();
  return AsyncStream.Iterator.next(isolation:)();
}

{
  uint64_t *v0;
  void *v1;
  id v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  BOOL v6;
  void *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v17;

  v1 = (void *)v0[30];
  swift_bridgeObjectRetain();
  v2 = v1;
  swift_bridgeObjectRetain();
  v3 = v1;
  v4 = Logger.logObject.getter();
  v5 = static os_log_type_t.error.getter();
  v6 = os_log_type_enabled(v4, v5);
  v7 = (void *)v0[30];
  v8 = v0[19];
  if (v6)
  {
    v9 = v0[18];
    v10 = swift_slowAlloc();
    v11 = (_QWORD *)swift_slowAlloc();
    v12 = swift_slowAlloc();
    v17 = v12;
    *(_DWORD *)v10 = 136446466;
    *(_QWORD *)(v10 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v8, &v17);
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v10 + 12) = 2112;
    v13 = v7;
    v14 = _swift_stdlib_bridgeErrorToNSError();
    *(_QWORD *)(v10 + 14) = v14;
    *v11 = v14;

    _os_log_impl(&dword_24A3EF000, v4, v5, "Failed to send message to activity %{public}s with error: %@", (uint8_t *)v10, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x24BD0F964](v11, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x24BD0F964](v12, -1, -1);
    MEMORY[0x24BD0F964](v10, -1, -1);

  }
  else
  {
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
  }

  outlined consume of PresenceUpdateMessage.Kind(v0[9], v0[10]);
  swift_bridgeObjectRelease();
  v15 = (_QWORD *)swift_task_alloc();
  v0[27] = (uint64_t)v15;
  *v15 = v0;
  v15[1] = specialized closure #2 in GroupSessionMessengerController._makeTasks();
  return AsyncStream.Iterator.next(isolation:)();
}

uint64_t specialized GroupSessionMessengerController.finish()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<(PresenceUpdateMessage, GroupSessionMessenger.MessageContext)>.Continuation);
  AsyncStream.Continuation.finish()();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<PresenceUpdateMessage>.Continuation);
  AsyncStream.Continuation.finish()();
  swift_beginAccess();
  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 144) + 16);
  if (v1)
  {
    swift_bridgeObjectRetain();
    v2 = 0;
    v3 = MEMORY[0x24BEE4AE0] + 8;
    v4 = MEMORY[0x24BEE4078];
    v5 = MEMORY[0x24BEE40A8];
    do
    {
      ++v2;
      v6 = swift_retain();
      MEMORY[0x24BD0F088](v6, v3, v4, v5);
      swift_release();
    }
    while (v1 != v2);
    swift_bridgeObjectRelease();
  }
  *(_QWORD *)(v0 + 144) = MEMORY[0x24BEE4AF8];
  return swift_bridgeObjectRelease();
}

uint64_t specialized Sequence.compactMap<A>(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  uint64_t result;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  void *v14;
  id v15;
  uint64_t v16;

  v16 = MEMORY[0x24BEE4AF8];
  v2 = a1 + 56;
  v3 = 1 << *(_BYTE *)(a1 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(a1 + 56);
  v6 = (unint64_t)(v3 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v8 = 0;
  while (v5)
  {
    v9 = __clz(__rbit64(v5));
    v5 &= v5 - 1;
    v10 = v9 | (v8 << 6);
LABEL_22:
    v14 = *(void **)(*(_QWORD *)(a1 + 48) + 8 * v10);
    if (v14)
    {
      v15 = v14;
      MEMORY[0x24BD0EF68]();
      if (*(_QWORD *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      result = specialized Array._endMutation()();
    }
  }
  v11 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_28;
  }
  if (v11 >= v6)
    goto LABEL_26;
  v12 = *(_QWORD *)(v2 + 8 * v11);
  ++v8;
  if (v12)
    goto LABEL_21;
  v8 = v11 + 1;
  if (v11 + 1 >= v6)
    goto LABEL_26;
  v12 = *(_QWORD *)(v2 + 8 * v8);
  if (v12)
    goto LABEL_21;
  v8 = v11 + 2;
  if (v11 + 2 >= v6)
    goto LABEL_26;
  v12 = *(_QWORD *)(v2 + 8 * v8);
  if (v12)
    goto LABEL_21;
  v8 = v11 + 3;
  if (v11 + 3 >= v6)
    goto LABEL_26;
  v12 = *(_QWORD *)(v2 + 8 * v8);
  if (v12)
  {
LABEL_21:
    v5 = (v12 - 1) & v12;
    v10 = __clz(__rbit64(v12)) + (v8 << 6);
    goto LABEL_22;
  }
  v13 = v11 + 4;
  if (v13 >= v6)
  {
LABEL_26:
    swift_release();
    return v16;
  }
  v12 = *(_QWORD *)(v2 + 8 * v13);
  if (v12)
  {
    v8 = v13;
    goto LABEL_21;
  }
  while (1)
  {
    v8 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v8 >= v6)
      goto LABEL_26;
    v12 = *(_QWORD *)(v2 + 8 * v8);
    ++v13;
    if (v12)
      goto LABEL_21;
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t specialized Dictionary.subscript.getter@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  char v6;
  uint64_t *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;

  if (*(_QWORD *)(a3 + 16) && (result = specialized __RawDictionaryStorage.find<A>(_:)(result, a2), (v6 & 1) != 0))
  {
    v7 = (uint64_t *)(*(_QWORD *)(a3 + 56) + 48 * result);
    v8 = *v7;
    v9 = (void *)v7[1];
    v10 = v7[2];
    v11 = v7[3];
    v12 = v7[4];
    v13 = v7[5];
    v14 = v9;
    swift_retain();
    swift_retain();
    result = swift_bridgeObjectRetain();
  }
  else
  {
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v13 = 0;
  }
  *a4 = v8;
  a4[1] = v9;
  a4[2] = v10;
  a4[3] = v11;
  a4[4] = v12;
  a4[5] = v13;
  return result;
}

uint64_t ParticipantPresenceCoordinator.delegate.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR____WBParticipantPresenceCoordinator_delegate;
  swift_beginAccess();
  return MEMORY[0x24BD0FA24](v1);
}

uint64_t ParticipantPresenceCoordinator.delegate.setter()
{
  swift_beginAccess();
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

void (*ParticipantPresenceCoordinator.delegate.modify(_QWORD *a1))(void **a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v4 = OBJC_IVAR____WBParticipantPresenceCoordinator_delegate;
  v3[4] = v1;
  v3[5] = v4;
  v5 = v1 + v4;
  swift_beginAccess();
  v3[3] = MEMORY[0x24BD0FA24](v5);
  return ParticipantPresenceCoordinator.delegate.modify;
}

void ParticipantPresenceCoordinator.delegate.modify(void **a1, char a2)
{
  void *v3;

  v3 = *a1;
  swift_unknownObjectWeakAssign();
  if ((a2 & 1) != 0)
  {
    swift_unknownObjectRelease();
    swift_endAccess();
  }
  else
  {
    swift_endAccess();
    swift_unknownObjectRelease();
  }
  free(v3);
}

uint64_t (*ParticipantPresenceCoordinator.ConnectionManagerStore.tabGroupIdentifiersToSharedConnections.modify())()
{
  swift_beginAccess();
  return ParticipantPresenceCoordinator.ConnectionManagerStore.tabGroupIdentifiersToSharedConnections.modify;
}

uint64_t (*ParticipantPresenceCoordinator.ConnectionManagerStore.pausedSharedConnections.modify())()
{
  swift_beginAccess();
  return ParticipantPresenceCoordinator.ConnectionManagerStore.pausedSharedConnections.modify;
}

uint64_t ParticipantPresenceCoordinator.ConnectionManagerStore.sharedConnectionManager(forTabGroup:)(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  _QWORD v22[4];
  _QWORD v23[6];
  _QWORD v24[2];
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;

  v3 = v2;
  if (one-time initialization token for tabGroup != -1)
    swift_once();
  v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static Logger.tabGroup);
  swift_bridgeObjectRetain_n();
  swift_retain_n();
  v7 = Logger.logObject.getter();
  v8 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = swift_slowAlloc();
    v10 = swift_slowAlloc();
    v25 = v10;
    *(_DWORD *)v9 = 136446466;
    swift_bridgeObjectRetain();
    v24[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v9 + 12) = 1026;
    swift_beginAccess();
    v11 = *(_QWORD *)(v3 + 136);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    specialized Dictionary.subscript.getter(a1, a2, v11, v23);
    v12 = v23[1];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined release of ParticipantPresenceCoordinator.ConnectionManagerStore.SharedConnection?((uint64_t)v23);
    swift_release();
    swift_bridgeObjectRelease();
    LODWORD(v24[0]) = v12 != 0;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_24A3EF000, v7, v8, "Getting connection manager for tab group %{public}s, has manager: %{BOOL,public}d", (uint8_t *)v9, 0x12u);
    swift_arrayDestroy();
    MEMORY[0x24BD0F964](v10, -1, -1);
    MEMORY[0x24BD0F964](v9, -1, -1);
  }
  else
  {
    swift_release_n();
    swift_bridgeObjectRelease_n();
  }

  swift_beginAccess();
  v13 = *(_QWORD *)(v3 + 136);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized Dictionary.subscript.getter(a1, a2, v13, v24);
  v14 = (void *)v24[1];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined init with take of ParticipantPresenceCoordinator.ConnectionManagerStore.SharedConnection?((uint64_t)v24, (uint64_t)v22, &demangling cache variable for type metadata for ParticipantPresenceCoordinator.ConnectionManagerStore.SharedConnection?);
  outlined init with take of ParticipantPresenceCoordinator.ConnectionManagerStore.SharedConnection?((uint64_t)v24, (uint64_t)&v25, &demangling cache variable for type metadata for ParticipantPresenceCoordinator.ConnectionManagerStore.SharedConnection?);
  v15 = v26;
  if (!v26)
    return 0;
  v16 = v27;
  v17 = v14;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();

  swift_release();
  swift_release();
  v28 = v16;
  outlined release of [Task<(), Never>]((uint64_t)&v28);
  v18 = v22[0];
  v19 = (void *)v22[1];
  v20 = v22[3];
  swift_retain();
  outlined consume of ParticipantPresenceCoordinator.ConnectionManagerStore.SharedConnection?(v18, v19);
  return v20;
}

uint64_t ParticipantPresenceCoordinator.ConnectionManagerStore.updateSharedConnection(with:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 240) = a1;
  *(_QWORD *)(v2 + 248) = v1;
  return swift_task_switch();
}

uint64_t ParticipantPresenceCoordinator.ConnectionManagerStore.updateSharedConnection(with:)()
{
  uint64_t v0;
  id v1;
  id v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  void *v12;
  id v13;
  uint64_t (*v14)();
  void **v15;
  uint64_t (*v16)();
  void *v17;
  void *v18;
  id v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  os_log_type_t v34;
  uint8_t *v35;
  uint64_t v36;
  uint64_t v37;
  os_log_type_t v38;
  uint8_t *v39;
  uint64_t v40;
  uint64_t v41;

  v1 = objc_msgSend(*(id *)(v0 + 240), sel_recordID);
  v2 = objc_msgSend(v1, sel_zoneID);

  v3 = objc_msgSend(v2, sel_safari_tabGroupRootRecordName);
  if (v3)
  {
    v4 = *(_QWORD *)(v0 + 248);
    v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v7 = v6;

    *(_QWORD *)(v0 + 256) = v5;
    *(_QWORD *)(v0 + 264) = v7;
    v8 = *(_QWORD *)(v0 + 248);
    if (*(_BYTE *)(v4 + 152) == 1)
    {
      swift_beginAccess();
      v9 = *(_QWORD *)(v8 + 144);
      if (*(_QWORD *)(v9 + 16))
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v10 = specialized __RawDictionaryStorage.find<A>(_:)(v5, v7);
        if ((v11 & 1) != 0)
        {
          v12 = *(void **)(*(_QWORD *)(v9 + 56) + 16 * v10);
          v13 = v12;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain();
          v14 = ParticipantPresenceCoordinator.ConnectionManagerStore.pausedSharedConnections.modify();
          v16 = specialized Dictionary.subscript.modify((_QWORD *)(v0 + 144), v5, v7);
          v17 = *v15;
          if (*v15)
          {
            v18 = *(void **)(v0 + 240);
            *v15 = v18;
            v19 = v18;

          }
          ((void (*)(uint64_t, _QWORD))v16)(v0 + 144, 0);
          swift_bridgeObjectRelease();
          ((void (*)(uint64_t, _QWORD))v14)(v0 + 112, 0);
          if (one-time initialization token for tabGroup != -1)
            swift_once();
          v20 = type metadata accessor for Logger();
          __swift_project_value_buffer(v20, (uint64_t)static Logger.tabGroup);
          swift_bridgeObjectRetain();
          v21 = Logger.logObject.getter();
          v22 = static os_log_type_t.info.getter();
          if (os_log_type_enabled(v21, v22))
          {
            v23 = (uint8_t *)swift_slowAlloc();
            v24 = swift_slowAlloc();
            *(_DWORD *)v23 = 136446210;
            v41 = v24;
            swift_bridgeObjectRetain();
            *(_QWORD *)(v0 + 112) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v5, v7, &v41);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            _os_log_impl(&dword_24A3EF000, v21, v22, "Updating paused connection share for tab group %{public}s", v23, 0xCu);
            swift_arrayDestroy();
            MEMORY[0x24BD0F964](v24, -1, -1);
            MEMORY[0x24BD0F964](v23, -1, -1);

          }
          else
          {

            swift_bridgeObjectRelease_n();
          }
          return (*(uint64_t (**)(void *))(v0 + 8))(v12);
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      if (one-time initialization token for tabGroup != -1)
        swift_once();
      v37 = type metadata accessor for Logger();
      __swift_project_value_buffer(v37, (uint64_t)static Logger.tabGroup);
      swift_bridgeObjectRetain();
      v26 = Logger.logObject.getter();
      v38 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v26, v38))
      {
        v39 = (uint8_t *)swift_slowAlloc();
        v40 = swift_slowAlloc();
        v41 = v40;
        *(_DWORD *)v39 = 136446210;
        swift_bridgeObjectRetain();
        *(_QWORD *)(v0 + 112) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v5, v7, &v41);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_24A3EF000, v26, v38, "No paused connections to update for tab group %{public}s", v39, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x24BD0F964](v40, -1, -1);
        v29 = v39;
        goto LABEL_26;
      }
LABEL_28:

      swift_bridgeObjectRelease_n();
      goto LABEL_29;
    }
    swift_beginAccess();
    v30 = *(_QWORD *)(v8 + 136);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    specialized Dictionary.subscript.getter(v5, v7, v30, (_QWORD *)(v0 + 64));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined init with take of ParticipantPresenceCoordinator.ConnectionManagerStore.SharedConnection?(v0 + 64, v0 + 16, &demangling cache variable for type metadata for ParticipantPresenceCoordinator.ConnectionManagerStore.SharedConnection?);
    v31 = *(_QWORD *)(v0 + 24);
    *(_QWORD *)(v0 + 272) = v31;
    if (v31)
    {
      *(_QWORD *)(v0 + 280) = *(_QWORD *)(v0 + 32);
      *(_OWORD *)(v0 + 288) = *(_OWORD *)(v0 + 40);
      return swift_task_switch();
    }
    if (one-time initialization token for tabGroup != -1)
      swift_once();
    v33 = type metadata accessor for Logger();
    __swift_project_value_buffer(v33, (uint64_t)static Logger.tabGroup);
    swift_bridgeObjectRetain();
    v26 = Logger.logObject.getter();
    v34 = static os_log_type_t.info.getter();
    if (!os_log_type_enabled(v26, v34))
      goto LABEL_28;
    v35 = (uint8_t *)swift_slowAlloc();
    v36 = swift_slowAlloc();
    v41 = v36;
    *(_DWORD *)v35 = 136446210;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 144) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v5, v7, &v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_24A3EF000, v26, v34, "No active connections to update for tab group %{public}s", v35, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24BD0F964](v36, -1, -1);
    v29 = v35;
  }
  else
  {
    if (one-time initialization token for tabGroup != -1)
      swift_once();
    v25 = type metadata accessor for Logger();
    __swift_project_value_buffer(v25, (uint64_t)static Logger.tabGroup);
    v26 = Logger.logObject.getter();
    v27 = static os_log_type_t.fault.getter();
    if (!os_log_type_enabled(v26, v27))
      goto LABEL_27;
    v28 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v28 = 0;
    _os_log_impl(&dword_24A3EF000, v26, v27, "Trying to start a collaboration activity with a CKShare not attached to a tab group", v28, 2u);
    v29 = v28;
  }
LABEL_26:
  MEMORY[0x24BD0F964](v29, -1, -1);
LABEL_27:

LABEL_29:
  v12 = 0;
  return (*(uint64_t (**)(void *))(v0 + 8))(v12);
}

{
  uint64_t v0;
  uint64_t v1;

  specialized CollaborationConnectionManager.currentGroupSessionProvider.getter();
  *(_QWORD *)(v0 + 304) = v1;
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  id v4;
  void *v5;
  id v6;
  uint64_t v7;
  id v8;

  v1 = *(_QWORD *)(v0 + 304);
  if (v1)
  {
    v2 = *(void **)(v0 + 240);
    swift_beginAccess();
    v3 = *(void **)(v1 + 112);
    *(_QWORD *)(v1 + 112) = v2;
    v4 = v2;

    swift_beginAccess();
    v5 = *(void **)(v1 + 112);
    swift_retain();
    v6 = v5;
    v7 = CKShare.members.getter();

    *(_QWORD *)(v0 + 176) = v7;
    CurrentValueSubject.send(_:)();
    swift_release();

    swift_bridgeObjectRelease();
    swift_release();
  }
  v8 = *(id *)(v0 + 272);
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;

  v1 = specialized static ParticipantHandleMap.handlesToParticipantKindsForShare(_:)(*(void **)(v0 + 240));
  *(_QWORD *)(v0 + 312) = 0;
  *(_QWORD *)(*(_QWORD *)(v0 + 280) + 112) = v1;
  swift_bridgeObjectRelease();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v5;
  char v6;
  unint64_t v7;
  uint64_t v8;
  _BOOL8 v9;
  uint64_t result;
  char v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  v2 = *(_QWORD *)(v0 + 256);
  v1 = *(_QWORD *)(v0 + 264);
  v3 = *(_QWORD *)(v0 + 248);
  swift_beginAccess();
  swift_bridgeObjectRetain_n();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v26 = *(_QWORD *)(v3 + 136);
  v5 = v26;
  *(_QWORD *)(v3 + 136) = 0x8000000000000000;
  swift_bridgeObjectRetain();
  v7 = specialized __RawDictionaryStorage.find<A>(_:)(v2, v1);
  v8 = *(_QWORD *)(v5 + 16);
  v9 = (v6 & 1) == 0;
  result = v8 + v9;
  if (__OFADD__(v8, v9))
  {
    __break(1u);
  }
  else
  {
    v11 = v6;
    if (*(_QWORD *)(v5 + 24) >= result)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        result = (uint64_t)specialized _NativeDictionary.copy()();
    }
    else
    {
      v13 = *(_QWORD *)(v0 + 256);
      v12 = *(_QWORD *)(v0 + 264);
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, isUniquelyReferenced_nonNull_native);
      result = specialized __RawDictionaryStorage.find<A>(_:)(v13, v12);
      if ((v11 & 1) != (v14 & 1))
        return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      v7 = result;
    }
    if ((v11 & 1) != 0)
    {
      v24 = *(void **)(v0 + 272);
      v25 = *(_QWORD *)(v0 + 296);
      v16 = *(_QWORD *)(v0 + 256);
      v15 = *(_QWORD *)(v0 + 264);
      v17 = *(void **)(v0 + 240);
      v18 = *(_QWORD *)(v0 + 248);
      v19 = *(_QWORD *)(v26 + 56) + 48 * v7;
      v20 = *(void **)(v19 + 8);
      v21 = *(_QWORD *)(v19 + 32);
      v22 = *(_QWORD *)(v19 + 40);
      v27 = *(_QWORD *)v19;
      v29 = *(_OWORD *)(v19 + 16);
      v30 = v21;
      v31 = v22;
      v23 = v17;

      v28 = v23;
      specialized $defer #1 <A, B>() in _NativeDictionary.subscript.modify(&v27, 1, &v26, v7, v16, v15);
      outlined consume of ParticipantPresenceCoordinator.ConnectionManagerStore.SharedConnection?(v27, v28);
      swift_bridgeObjectRelease();
      *(_QWORD *)(v18 + 136) = v26;
      swift_bridgeObjectRelease();
      swift_endAccess();
      swift_release();
      swift_release();

      swift_bridgeObjectRelease_n();
      *(_QWORD *)(v0 + 224) = v25;
      outlined release of [Task<(), Never>](v0 + 224);
      return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 272));
    }
  }
  __break(1u);
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(v0 + 296);
  v2 = *(void **)(v0 + 272);
  swift_release();
  swift_release();

  *(_QWORD *)(v0 + 232) = v1;
  outlined release of [Task<(), Never>](v0 + 232);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t ParticipantPresenceCoordinator.ConnectionManagerStore.__deallocating_deinit()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_defaultActor_destroy();
  return swift_defaultActor_deallocate();
}

uint64_t ParticipantPresenceCoordinator.currentConnectionState()()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 72) = v0;
  return swift_task_switch();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 80) = *(_QWORD *)(*(_QWORD *)(v0 + 72)
                                   + OBJC_IVAR____WBParticipantPresenceCoordinator_connectionManagerStore);
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0[10] + 112);
  v0[11] = v1;
  swift_retain();
  if (!v1)
    v0[14] = MEMORY[0x24BEE4B00];
  return swift_task_switch();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 96) = *(_QWORD *)(*(_QWORD *)(v0 + 88) + 168);
  swift_release();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  char isUniquelyReferenced_nonNull_native;

  if (!*(_QWORD *)(v0 + 96))
  {
    v1 = MEMORY[0x24BEE4B00];
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(-1, 0, 0xE000000000000000, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 112) = v1;
  }
  return swift_task_switch();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 104) = *(_QWORD *)(*(_QWORD *)(v0 + 80) + 128);
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char isUniquelyReferenced_nonNull_native;

  v1 = *(_QWORD *)(v0 + 104);
  v2 = MEMORY[0x24BEE4B00];
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v1, 0, 0xE000000000000000, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 112) = v2;
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 80);
  swift_beginAccess();
  *(_QWORD *)(v0 + 120) = *(_QWORD *)(v1 + 136);
  swift_bridgeObjectRetain();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  void *v13;
  id v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v2 = *(_QWORD *)(v0 + 112);
  v1 = *(_QWORD *)(v0 + 120);
  v3 = *(_BYTE *)(v1 + 32);
  *(_BYTE *)(v0 + 224) = v3;
  v4 = -1;
  v5 = -1 << v3;
  v6 = *(_QWORD *)(v1 + 64);
  if (-v5 < 64)
    v4 = ~(-1 << -(char)v5);
  *(_QWORD *)(v0 + 128) = v2;
  v7 = v4 & v6;
  if (!v7)
  {
    v15 = 63 - v5;
    if (v15 > 0x7F)
    {
      v16 = *(_QWORD *)(v1 + 72);
      if (v16)
      {
        v8 = 1;
LABEL_9:
        v10 = (v16 - 1) & v16;
        v9 = __clz(__rbit64(v16)) + (v8 << 6);
        goto LABEL_5;
      }
      if (v15 >= 0xC0)
      {
        v16 = *(_QWORD *)(v1 + 80);
        if (v16)
        {
          v8 = 2;
          goto LABEL_9;
        }
        if (v15 >= 0x100)
        {
          v16 = *(_QWORD *)(v1 + 88);
          if (v16)
          {
            v8 = 3;
            goto LABEL_9;
          }
          if (v15 >= 0x140)
          {
            v16 = *(_QWORD *)(v1 + 96);
            if (v16)
            {
              v8 = 4;
              goto LABEL_9;
            }
            v17 = 0;
            v18 = v15 >> 6;
            if (v18 <= 5)
              v18 = 5;
            v19 = v18 - 5;
            while (v19 != v17)
            {
              v16 = *(_QWORD *)(v1 + 104 + 8 * v17++);
              if (v16)
              {
                v8 = v17 + 4;
                goto LABEL_9;
              }
            }
          }
        }
      }
    }
    swift_release();
    return swift_task_switch();
  }
  v8 = 0;
  v9 = __clz(__rbit64(v7));
  v10 = (v7 - 1) & v7;
LABEL_5:
  *(_QWORD *)(v0 + 136) = v8;
  *(_QWORD *)(v0 + 144) = v10;
  v11 = (_QWORD *)(*(_QWORD *)(v1 + 48) + 16 * v9);
  *(_QWORD *)(v0 + 152) = *v11;
  *(_QWORD *)(v0 + 160) = v11[1];
  v12 = (_QWORD *)(*(_QWORD *)(v1 + 56) + 48 * v9);
  v13 = (void *)v12[1];
  *(_QWORD *)(v0 + 168) = v13;
  *(_QWORD *)(v0 + 176) = v12[2];
  *(_QWORD *)(v0 + 184) = v12[3];
  *(_QWORD *)(v0 + 192) = v12[4];
  *(_QWORD *)(v0 + 200) = v12[5];
  swift_bridgeObjectRetain();
  v14 = v13;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  return swift_task_switch();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 208) = *(_QWORD *)(*(_QWORD *)(v0 + 184) + 168);
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char isUniquelyReferenced_nonNull_native;
  char v7;
  unint64_t v8;
  uint64_t v9;
  _BOOL8 v10;
  uint64_t result;
  char v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  void *v23;
  int64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  void *v30;
  id v31;
  int64_t v32;
  int64_t v33;
  uint64_t v34;
  unint64_t v35;
  int64_t v36;

  v2 = *(_QWORD *)(v0 + 200);
  v1 = *(_QWORD *)(v0 + 208);
  v4 = *(_QWORD *)(v0 + 152);
  v3 = *(_QWORD *)(v0 + 160);
  v5 = *(_QWORD *)(v0 + 128);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v0 + 64) = v5;
  if (!v1)
    v2 = -1;
  v8 = specialized __RawDictionaryStorage.find<A>(_:)(v4, v3);
  v9 = *(_QWORD *)(v5 + 16);
  v10 = (v7 & 1) == 0;
  result = v9 + v10;
  if (__OFADD__(v9, v10))
  {
    __break(1u);
    goto LABEL_34;
  }
  v12 = v7;
  if (*(_QWORD *)(*(_QWORD *)(v0 + 128) + 24) >= result)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      result = (uint64_t)specialized _NativeDictionary.copy()();
  }
  else
  {
    v14 = *(_QWORD *)(v0 + 152);
    v13 = *(_QWORD *)(v0 + 160);
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, isUniquelyReferenced_nonNull_native);
    result = specialized __RawDictionaryStorage.find<A>(_:)(v14, v13);
    if ((v12 & 1) != (v15 & 1))
      return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    v8 = result;
  }
  v16 = *(_QWORD **)(v0 + 64);
  if ((v12 & 1) != 0)
  {
    *(_QWORD *)(v16[7] + 8 * v8) = v2;
    goto LABEL_14;
  }
  v18 = *(_QWORD *)(v0 + 152);
  v17 = *(_QWORD *)(v0 + 160);
  v16[(v8 >> 6) + 8] |= 1 << v8;
  v19 = (_QWORD *)(v16[6] + 16 * v8);
  *v19 = v18;
  v19[1] = v17;
  *(_QWORD *)(v16[7] + 8 * v8) = v2;
  v20 = v16[2];
  v21 = __OFADD__(v20, 1);
  v22 = v20 + 1;
  if (v21)
  {
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  v16[2] = v22;
  swift_bridgeObjectRetain();
LABEL_14:
  v23 = *(void **)(v0 + 168);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_release();
  swift_release();
  result = swift_bridgeObjectRelease();
  v24 = *(_QWORD *)(v0 + 136);
  v25 = *(_QWORD *)(v0 + 144);
  *(_QWORD *)(v0 + 128) = v16;
  if (v25)
  {
    v26 = (v25 - 1) & v25;
    v27 = __clz(__rbit64(v25)) | (v24 << 6);
    result = *(_QWORD *)(v0 + 120);
LABEL_16:
    *(_QWORD *)(v0 + 136) = v24;
    *(_QWORD *)(v0 + 144) = v26;
    v28 = (_QWORD *)(*(_QWORD *)(result + 48) + 16 * v27);
    *(_QWORD *)(v0 + 152) = *v28;
    *(_QWORD *)(v0 + 160) = v28[1];
    v29 = (_QWORD *)(*(_QWORD *)(result + 56) + 48 * v27);
    v30 = (void *)v29[1];
    *(_QWORD *)(v0 + 168) = v30;
    *(_QWORD *)(v0 + 176) = v29[2];
    *(_QWORD *)(v0 + 184) = v29[3];
    *(_QWORD *)(v0 + 192) = v29[4];
    *(_QWORD *)(v0 + 200) = v29[5];
    swift_bridgeObjectRetain();
    v31 = v30;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    return swift_task_switch();
  }
  v32 = v24 + 1;
  if (__OFADD__(v24, 1))
    goto LABEL_35;
  v33 = (unint64_t)((1 << *(_BYTE *)(v0 + 224)) + 63) >> 6;
  result = *(_QWORD *)(v0 + 120);
  if (v32 >= v33)
    goto LABEL_31;
  v34 = result + 64;
  v35 = *(_QWORD *)(result + 64 + 8 * v32);
  ++v24;
  if (v35)
  {
LABEL_20:
    v26 = (v35 - 1) & v35;
    v27 = __clz(__rbit64(v35)) + (v24 << 6);
    goto LABEL_16;
  }
  v24 = v32 + 1;
  if (v32 + 1 >= v33)
    goto LABEL_31;
  v35 = *(_QWORD *)(v34 + 8 * v24);
  if (v35)
    goto LABEL_20;
  v24 = v32 + 2;
  if (v32 + 2 >= v33)
    goto LABEL_31;
  v35 = *(_QWORD *)(v34 + 8 * v24);
  if (v35)
    goto LABEL_20;
  v36 = v32 + 3;
  if (v36 >= v33)
  {
LABEL_31:
    swift_release();
    return swift_task_switch();
  }
  v35 = *(_QWORD *)(v34 + 8 * v36);
  if (v35)
  {
    v24 = v36;
    goto LABEL_20;
  }
  while (1)
  {
    v24 = v36 + 1;
    if (__OFADD__(v36, 1))
      break;
    if (v24 >= v33)
      goto LABEL_31;
    v35 = *(_QWORD *)(v34 + 8 * v24);
    ++v36;
    if (v35)
      goto LABEL_20;
  }
LABEL_36:
  __break(1u);
  return result;
}

{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 80);
  swift_beginAccess();
  *(_QWORD *)(v0 + 216) = *(_QWORD *)(v1 + 144);
  swift_bridgeObjectRetain();
  return swift_task_switch();
}

void ParticipantPresenceCoordinator.currentConnectionState()()
{
  uint64_t v0;
  int64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  char isUniquelyReferenced_nonNull_native;
  char v17;
  unint64_t v18;
  uint64_t v19;
  _BOOL8 v20;
  uint64_t v21;
  char v22;
  unint64_t v23;
  char v24;
  uint64_t *v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  int64_t v30;

  v1 = 0;
  v2 = *(_QWORD *)(v0 + 216);
  v3 = -1;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  if (-v4 < 64)
    v3 = ~(-1 << -(char)v4);
  v5 = v3 & *(_QWORD *)(v2 + 64);
  v30 = (unint64_t)(63 - v4) >> 6;
  v6 = *(_QWORD **)(v0 + 128);
  v7 = v2 + 64;
  while (1)
  {
    if (v5)
    {
      v8 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      v9 = v8 | (v1 << 6);
    }
    else
    {
      v10 = v1 + 1;
      if (__OFADD__(v1, 1))
        goto LABEL_37;
      if (v10 >= v30)
      {
LABEL_33:
        swift_release();
        (*(void (**)(_QWORD *))(v29 + 8))(v6);
        return;
      }
      v11 = *(_QWORD *)(v7 + 8 * v10);
      ++v1;
      if (!v11)
      {
        v1 = v10 + 1;
        if (v10 + 1 >= v30)
          goto LABEL_33;
        v11 = *(_QWORD *)(v7 + 8 * v1);
        if (!v11)
        {
          v1 = v10 + 2;
          if (v10 + 2 >= v30)
            goto LABEL_33;
          v11 = *(_QWORD *)(v7 + 8 * v1);
          if (!v11)
          {
            v12 = v10 + 3;
            if (v12 >= v30)
              goto LABEL_33;
            v11 = *(_QWORD *)(v7 + 8 * v12);
            if (!v11)
            {
              while (1)
              {
                v1 = v12 + 1;
                if (__OFADD__(v12, 1))
                  goto LABEL_38;
                if (v1 >= v30)
                  goto LABEL_33;
                v11 = *(_QWORD *)(v7 + 8 * v1);
                ++v12;
                if (v11)
                  goto LABEL_21;
              }
            }
            v1 = v12;
          }
        }
      }
LABEL_21:
      v5 = (v11 - 1) & v11;
      v9 = __clz(__rbit64(v11)) + (v1 << 6);
    }
    v13 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v9);
    v15 = *v13;
    v14 = v13[1];
    swift_bridgeObjectRetain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v18 = specialized __RawDictionaryStorage.find<A>(_:)(v15, v14);
    v19 = v6[2];
    v20 = (v17 & 1) == 0;
    v21 = v19 + v20;
    if (__OFADD__(v19, v20))
      break;
    v22 = v17;
    if (v6[3] >= v21)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        if ((v17 & 1) != 0)
          goto LABEL_4;
      }
      else
      {
        specialized _NativeDictionary.copy()();
        if ((v22 & 1) != 0)
          goto LABEL_4;
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v21, isUniquelyReferenced_nonNull_native);
      v23 = specialized __RawDictionaryStorage.find<A>(_:)(v15, v14);
      if ((v22 & 1) != (v24 & 1))
      {
        KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        return;
      }
      v18 = v23;
      if ((v22 & 1) != 0)
      {
LABEL_4:
        *(_QWORD *)(v6[7] + 8 * v18) = -2;
        goto LABEL_5;
      }
    }
    v6[(v18 >> 6) + 8] |= 1 << v18;
    v25 = (uint64_t *)(v6[6] + 16 * v18);
    *v25 = v15;
    v25[1] = v14;
    *(_QWORD *)(v6[7] + 8 * v18) = -2;
    v26 = v6[2];
    v27 = __OFADD__(v26, 1);
    v28 = v26 + 1;
    if (v27)
      goto LABEL_36;
    v6[2] = v28;
    swift_bridgeObjectRetain();
LABEL_5:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
}

uint64_t @objc closure #1 in ParticipantPresenceCoordinator.currentConnectionState()(const void *a1, void *a2)
{
  _QWORD *v2;
  id v4;
  _QWORD *v5;

  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  v4 = a2;
  v5 = (_QWORD *)swift_task_alloc();
  v2[4] = v5;
  *v5 = v2;
  v5[1] = @objc closure #1 in ParticipantPresenceCoordinator.currentConnectionState();
  v5[9] = v4;
  return swift_task_switch();
}

uint64_t @objc closure #1 in ParticipantPresenceCoordinator.currentConnectionState()()
{
  uint64_t *v0;
  void (**v1)(_QWORD, _QWORD);
  void *v2;
  Class isa;
  uint64_t v5;

  v1 = *(void (***)(_QWORD, _QWORD))(*v0 + 24);
  v2 = *(void **)(*v0 + 16);
  v5 = *v0;
  swift_task_dealloc();

  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  ((void (**)(_QWORD, Class))v1)[2](v1, isa);

  _Block_release(v1);
  return (*(uint64_t (**)(void))(v5 + 8))();
}

Swift::Void __swiftcall ParticipantPresenceCoordinator.beginDeviceCoordination()()
{
  ParticipantPresenceCoordinator.beginDeviceCoordination()((uint64_t)&unk_251BC9730, (uint64_t)&unk_251BC9758, (uint64_t)&async function pointer to partial apply for closure #1 in ParticipantPresenceCoordinator.beginDeviceCoordination());
}

uint64_t closure #1 in ParticipantPresenceCoordinator.beginDeviceCoordination()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;

  v4[6] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<(PresenceUpdateMessage, GroupSessionMessenger.MessageContext)>.Continuation.BufferingPolicy);
  v4[7] = v5;
  v4[8] = *(_QWORD *)(v5 - 8);
  v4[9] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #1 in ParticipantPresenceCoordinator.beginDeviceCoordination()()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 80) = *(_QWORD *)(*(_QWORD *)(v0 + 48)
                                   + OBJC_IVAR____WBParticipantPresenceCoordinator_connectionManagerStore);
  return swift_task_switch();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 88) = *(_QWORD *)(*(_QWORD *)(v0 + 80) + 112);
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (v0[11])
    return _assertionFailure(_:_:file:line:flags:)();
  if (one-time initialization token for tabGroup != -1)
    swift_once();
  v2 = type metadata accessor for Logger();
  v0[12] = __swift_project_value_buffer(v2, (uint64_t)static Logger.tabGroup);
  v3 = Logger.logObject.getter();
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_24A3EF000, v3, v4, "Starting personal device connection", v5, 2u);
    MEMORY[0x24BD0F964](v5, -1, -1);
  }
  v7 = v0[8];
  v6 = v0[9];
  v8 = v0[7];

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CollaborationConnectionManager<PersonalDeviceCoordinationActivity, PersonalGroupSessionProvider<PersonalDeviceCoordinationActivity>, PresenceUpdateMessage>);
  v9 = swift_allocObject();
  v0[13] = v9;
  swift_defaultActor_initialize();
  *(_QWORD *)(v9 + 168) = 0;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v7 + 104))(v6, *MEMORY[0x24BEE6A10], v8);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncBufferedQueue<(PresenceUpdateMessage, GroupSessionMessenger.MessageContext)>);
  swift_allocObject();
  *(_QWORD *)(v9 + 176) = specialized AsyncBufferedQueue.init(bufferingPolicy:)(v6);
  v10 = v9 + *(_QWORD *)(*(_QWORD *)v9 + 160);
  v11 = type metadata accessor for Participant();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v10, 1, 1, v11);
  *(_QWORD *)(v9 + *(_QWORD *)(*(_QWORD *)v9 + 168)) = MEMORY[0x24BEE4B08];
  *(_QWORD *)(v9 + *(_QWORD *)(*(_QWORD *)v9 + 176)) = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v9 + 112) = 0;
  *(_QWORD *)(v9 + 120) = 0;
  *(_OWORD *)(v9 + 128) = xmmword_24A42FA40;
  *(_QWORD *)(v9 + 144) = 0x800000024A430CD0;
  *(_QWORD *)(v9 + 152) = closure #1 in closure #1 in ParticipantPresenceCoordinator.beginDeviceCoordination();
  *(_QWORD *)(v9 + 160) = 0;
  return swift_task_switch();
}

{
  uint64_t v0;

  swift_beginAccess();
  swift_retain();
  specialized FastSyncStateMachine.startActivity(_:)();
  *(_QWORD *)(v0 + 112) = 0;
  swift_endAccess();
  swift_release();
  return swift_task_switch();
}

{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;
  uint64_t v4;
  uint64_t v5;

  v1 = Logger.logObject.getter();
  v2 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v1, v2))
  {
    v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v3 = 0;
    _os_log_impl(&dword_24A3EF000, v1, v2, "Did begin personal device connection activity", v3, 2u);
    MEMORY[0x24BD0F964](v3, -1, -1);
  }
  v4 = *(_QWORD *)(v0 + 104);

  ParticipantPresenceCoordinator._makePersonalDeviceConnectionSubscriptionTask(with:)(v4);
  *(_QWORD *)(v0 + 120) = v5;
  return swift_task_switch();
}

{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  _QWORD *v7;
  id v8;
  uint64_t v9;

  v1 = *(void **)(v0 + 112);
  v2 = v1;
  v3 = v1;
  v4 = Logger.logObject.getter();
  v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc();
    v7 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v6 = 138412290;
    v8 = v1;
    v9 = _swift_stdlib_bridgeErrorToNSError();
    *(_QWORD *)(v0 + 40) = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v7 = v9;

    _os_log_impl(&dword_24A3EF000, v4, v5, "Failed to start activity with error %@", v6, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x24BD0F964](v7, -1, -1);
    MEMORY[0x24BD0F964](v6, -1, -1);
    swift_release();

  }
  else
  {
    swift_release();

  }
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[15];
  v2 = v0[10];
  *(_QWORD *)(v2 + 112) = v0[13];
  swift_retain();
  swift_release();
  *(_QWORD *)(v2 + 120) = v1;
  swift_bridgeObjectRelease();
  return swift_task_switch();
}

{
  uint64_t v0;
  id v1;
  _QWORD *v2;
  uint64_t (*v4)(uint64_t, uint64_t);

  v4 = (uint64_t (*)(uint64_t, uint64_t))((char *)&async function pointer to specialized ParticipantPresenceCoordinator.ConnectionManagerStore.unpauseSharedConnections(using:)
                                                + async function pointer to specialized ParticipantPresenceCoordinator.ConnectionManagerStore.unpauseSharedConnections(using:));
  v1 = *(id *)(v0 + 48);
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 128) = v2;
  *v2 = v0;
  v2[1] = closure #1 in ParticipantPresenceCoordinator.beginDeviceCoordination();
  return v4(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 48));
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(*v1 + 136) = v0;
  swift_task_dealloc();

  return swift_task_switch();
}

{
  uint64_t v0;

  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  _QWORD *v7;
  id v8;
  uint64_t v9;

  v1 = *(void **)(v0 + 136);
  v2 = v1;
  v3 = v1;
  v4 = Logger.logObject.getter();
  v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc();
    v7 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v6 = 138412290;
    v8 = v1;
    v9 = _swift_stdlib_bridgeErrorToNSError();
    *(_QWORD *)(v0 + 40) = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v7 = v9;

    _os_log_impl(&dword_24A3EF000, v4, v5, "Failed to start activity with error %@", v6, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x24BD0F964](v7, -1, -1);
    MEMORY[0x24BD0F964](v6, -1, -1);
    swift_release();

  }
  else
  {
    swift_release();

  }
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in closure #1 in ParticipantPresenceCoordinator.beginDeviceCoordination()()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersonalGroupSessionProvider<PersonalDeviceCoordinationActivity>);
  swift_allocObject();
  swift_bridgeObjectRetain_n();
  return PersonalGroupSessionProvider.init(id:activity:)();
}

double ParticipantPresenceCoordinator._makePersonalDeviceConnectionSubscriptionTask(with:)(uint64_t a1)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  void (*v7)(char *, uint64_t, uint64_t, uint64_t);
  _QWORD *v8;
  id v9;
  uint64_t v10;
  _QWORD *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  double result;
  uint64_t v16;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for TaskPriority();
  v7 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56);
  v7(v5, 1, 1, v6);
  v8 = (_QWORD *)swift_allocObject();
  v8[2] = 0;
  v8[3] = 0;
  v8[4] = a1;
  v8[5] = v1;
  swift_retain();
  v9 = v1;
  v10 = _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v5, (uint64_t)&async function pointer to partial apply for closure #1 in ParticipantPresenceCoordinator._makePersonalDeviceConnectionSubscriptionTask(with:), (uint64_t)v8);
  v7(v5, 1, 1, v6);
  v11 = (_QWORD *)swift_allocObject();
  v11[2] = 0;
  v11[3] = 0;
  v11[4] = a1;
  v11[5] = v9;
  swift_retain();
  v12 = v9;
  v13 = _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v5, (uint64_t)&async function pointer to partial apply for closure #2 in ParticipantPresenceCoordinator._makePersonalDeviceConnectionSubscriptionTask(with:), (uint64_t)v11);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Task<(), Never>>);
  v14 = swift_allocObject();
  *(_QWORD *)&result = 2;
  *(_OWORD *)(v14 + 16) = xmmword_24A42FA30;
  *(_QWORD *)(v14 + 32) = v10;
  *(_QWORD *)(v14 + 40) = v13;
  return result;
}

Swift::Void __swiftcall ParticipantPresenceCoordinator.endDeviceCoordination()()
{
  ParticipantPresenceCoordinator.beginDeviceCoordination()((uint64_t)&unk_251BC9780, (uint64_t)&unk_251BC97A8, (uint64_t)&async function pointer to partial apply for closure #1 in ParticipantPresenceCoordinator.endDeviceCoordination());
}

uint64_t ParticipantPresenceCoordinator.beginDeviceCoordination()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v18[4];

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for TaskPriority();
  v9 = *(_QWORD *)(v8 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v7, 1, 1, v8);
  v10 = (_QWORD *)swift_allocObject();
  v10[2] = 0;
  v10[3] = 0;
  v10[4] = v3;
  v11 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8);
  v12 = v3;
  if (v11 == 1)
  {
    outlined destroy of TaskPriority?((uint64_t)v7, &demangling cache variable for type metadata for TaskPriority?);
    v13 = 0;
    v14 = 0;
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v7, v8);
    if (v10[2])
    {
      swift_getObjectType();
      swift_unknownObjectRetain();
      v13 = dispatch thunk of Actor.unownedExecutor.getter();
      v14 = v15;
      swift_unknownObjectRelease();
    }
    else
    {
      v13 = 0;
      v14 = 0;
    }
  }
  v16 = swift_allocObject();
  *(_QWORD *)(v16 + 16) = a3;
  *(_QWORD *)(v16 + 24) = v10;
  if (v14 | v13)
  {
    v18[0] = 0;
    v18[1] = 0;
    v18[2] = v13;
    v18[3] = v14;
  }
  swift_task_create();
  return swift_release();
}

uint64_t closure #1 in ParticipantPresenceCoordinator.endDeviceCoordination()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 40) = a4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  *(_QWORD *)(v4 + 48) = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #1 in ParticipantPresenceCoordinator.endDeviceCoordination()()
{
  _QWORD *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  char *v5;
  uint64_t v6;
  char *v7;
  _QWORD *v8;
  uint64_t (*v10)(uint64_t);

  if (one-time initialization token for tabGroup != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  v0[7] = __swift_project_value_buffer(v1, (uint64_t)static Logger.tabGroup);
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_24A3EF000, v2, v3, "Ending personal device connection", v4, 2u);
    MEMORY[0x24BD0F964](v4, -1, -1);
  }
  v5 = (char *)v0[5];

  v6 = *(_QWORD *)&v5[OBJC_IVAR____WBParticipantPresenceCoordinator_connectionManagerStore];
  v0[8] = v6;
  v10 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized ParticipantPresenceCoordinator.ConnectionManagerStore.pauseSharedConnections(using:)
                                        + async function pointer to specialized ParticipantPresenceCoordinator.ConnectionManagerStore.pauseSharedConnections(using:));
  v7 = v5;
  v8 = (_QWORD *)swift_task_alloc();
  v0[9] = v8;
  *v8 = v0;
  v8[1] = closure #1 in ParticipantPresenceCoordinator.endDeviceCoordination();
  return v10(v6);
}

{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(*(_QWORD *)v0 + 40);
  swift_task_dealloc();

  return swift_task_switch();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 80) = *(_QWORD *)(*(_QWORD *)(v0 + 64) + 120);
  swift_bridgeObjectRetain();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v3 = v1 + 32;
    v4 = MEMORY[0x24BEE4AE0] + 8;
    v5 = MEMORY[0x24BEE4078];
    v6 = MEMORY[0x24BEE40A8];
    do
    {
      v3 += 8;
      v7 = swift_retain();
      MEMORY[0x24BD0F088](v7, v4, v5, v6);
      swift_release();
      --v2;
    }
    while (v2);
  }
  swift_bridgeObjectRelease();
  return swift_task_switch();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 88) = *(_QWORD *)(*(_QWORD *)(v0 + 64) + 112);
  swift_retain();
  return swift_task_switch();
}

{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;

  if (!*(_QWORD *)(v0 + 88))
  {
    v1 = Logger.logObject.getter();
    v2 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v1, v2))
    {
      v3 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v3 = 0;
      _os_log_impl(&dword_24A3EF000, v1, v2, "Failed to leave activity", v3, 2u);
      MEMORY[0x24BD0F964](v3, -1, -1);
    }

  }
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = *(_QWORD *)(v0 + 48);
  v2 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
  swift_beginAccess();
  swift_retain();
  specialized FastSyncStateMachine.leaveActivity(priority:_:)();
  *(_BYTE *)(v0 + 96) = v3 & 1;
  outlined destroy of TaskPriority?(v1, &demangling cache variable for type metadata for TaskPriority?);
  swift_endAccess();
  swift_release_n();
  return swift_task_switch();
}

{
  uint64_t v0;
  int v1;
  NSObject *v2;
  os_log_type_t v3;
  const char *v4;
  uint8_t *v5;

  v1 = *(unsigned __int8 *)(v0 + 96);
  v2 = Logger.logObject.getter();
  if (v1 == 1)
  {
    v3 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v2, v3))
    {
      v4 = "Did leave personal device connection activity";
LABEL_6:
      v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v5 = 0;
      _os_log_impl(&dword_24A3EF000, v2, v3, v4, v5, 2u);
      MEMORY[0x24BD0F964](v5, -1, -1);
    }
  }
  else
  {
    v3 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v2, v3))
    {
      v4 = "Failed to leave activity";
      goto LABEL_6;
    }
  }

  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 64);
  *(_QWORD *)(v1 + 112) = 0;
  swift_release();
  *(_QWORD *)(v1 + 120) = MEMORY[0x24BEE4AF8];
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in ParticipantPresenceCoordinator._makePersonalDeviceConnectionSubscriptionTask(with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;

  v5[18] = a4;
  v5[19] = a5;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PresenceUpdateMessage, GroupSessionMessenger.MessageContext)?);
  v5[20] = swift_task_alloc();
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<(PresenceUpdateMessage, GroupSessionMessenger.MessageContext)>.Iterator);
  v5[21] = v6;
  v5[22] = *(_QWORD *)(v6 - 8);
  v5[23] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #1 in ParticipantPresenceCoordinator._makePersonalDeviceConnectionSubscriptionTask(with:)()
{
  _QWORD *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  _QWORD *v6;

  if (one-time initialization token for tabGroup != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  v0[24] = __swift_project_value_buffer(v1, (uint64_t)static Logger.tabGroup);
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_24A3EF000, v2, v3, "Will begin receiving messages in personal device connection", v4, 2u);
    MEMORY[0x24BD0F964](v4, -1, -1);
  }

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<(PresenceUpdateMessage, GroupSessionMessenger.MessageContext)>);
  AsyncStream.makeAsyncIterator()();
  v5 = OBJC_IVAR____WBParticipantPresenceCoordinator_connectionManagerStore;
  v0[25] = OBJC_IVAR____WBParticipantPresenceCoordinator_participantPresenceStore;
  v0[26] = v5;
  v6 = (_QWORD *)swift_task_alloc();
  v0[27] = v6;
  *v6 = v0;
  v6[1] = closure #1 in ParticipantPresenceCoordinator._makePersonalDeviceConnectionSubscriptionTask(with:);
  return AsyncStream.Iterator.next(isolation:)();
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  __int128 *v1;
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;

  v1 = *(__int128 **)(v0 + 160);
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PresenceUpdateMessage, GroupSessionMessenger.MessageContext));
  if ((*(unsigned int (**)(__int128 *, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(v1, 1, v2) == 1)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 176) + 8))(*(_QWORD *)(v0 + 184), *(_QWORD *)(v0 + 168));
LABEL_5:
    v8 = Logger.logObject.getter();
    v9 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v8, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v10 = 0;
      _os_log_impl(&dword_24A3EF000, v8, v9, "Did finnish receiving messages in personal device connection", v10, 2u);
      MEMORY[0x24BD0F964](v10, -1, -1);
    }

    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v3 = *v1;
  v4 = v1[1];
  v5 = v1[2];
  *(_QWORD *)(v0 + 64) = *((_QWORD *)v1 + 6);
  *(_OWORD *)(v0 + 32) = v4;
  *(_OWORD *)(v0 + 48) = v5;
  *(_OWORD *)(v0 + 16) = v3;
  v6 = *(int *)(v2 + 48);
  *(_DWORD *)(v0 + 280) = v6;
  if ((static Task<>.isCancelled.getter() & 1) != 0)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 176) + 8))(*(_QWORD *)(v0 + 184), *(_QWORD *)(v0 + 168));
    outlined release of PresenceUpdateMessage((uint64_t *)(v0 + 16));
    v7 = type metadata accessor for GroupSessionMessenger.MessageContext();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))((uint64_t)v1 + v6, v7);
    goto LABEL_5;
  }
  v12 = Logger.logObject.getter();
  v13 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v12, v13))
  {
    v14 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v14 = 0;
    _os_log_impl(&dword_24A3EF000, v12, v13, "Did receive message for personal device connection", v14, 2u);
    MEMORY[0x24BD0F964](v14, -1, -1);
  }
  v15 = *(_QWORD *)(v0 + 200);
  v16 = *(_QWORD *)(v0 + 152);

  *(_QWORD *)(v0 + 224) = *(_QWORD *)(v16 + v15);
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;

  v0[16] = ParticipantPresenceStore.handleCurrentUserPresenceUpdateMessage(_:in:)((uint64_t)(v0 + 2), 0, 0);
  v0[17] = v1;
  v0[29] = v1;
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  if (*(_QWORD *)(v0 + 232))
  {
    v1 = *(_QWORD *)(v0 + 208);
    v2 = *(_QWORD *)(v0 + 152);
    *(_QWORD *)(v0 + 240) = *(_QWORD *)(v0 + 128);
    *(_QWORD *)(v0 + 248) = *(_QWORD *)(v2 + v1);
    return swift_task_switch();
  }
  else
  {
    v4 = *(_QWORD *)(v0 + 160) + *(int *)(v0 + 280);
    outlined release of PresenceUpdateMessage((uint64_t *)(v0 + 16));
    v5 = type metadata accessor for GroupSessionMessenger.MessageContext();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
    v6 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 216) = v6;
    *v6 = v0;
    v6[1] = closure #1 in ParticipantPresenceCoordinator._makePersonalDeviceConnectionSubscriptionTask(with:);
    return AsyncStream.Iterator.next(isolation:)();
  }
}

{
  _QWORD *v0;

  v0[32] = ParticipantPresenceCoordinator.ConnectionManagerStore.sharedConnectionManager(forTabGroup:)(v0[30], v0[29]);
  swift_bridgeObjectRelease();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t (*v7)(uint64_t);

  if (*(_QWORD *)(v0 + 256))
  {
    v1 = *(_QWORD *)(v0 + 64);
    *(_QWORD *)(v0 + 264) = v1;
    *(_OWORD *)(v0 + 88) = 0u;
    *(_OWORD *)(v0 + 72) = 0u;
    *(_OWORD *)(v0 + 104) = *(_OWORD *)(v0 + 48);
    *(_QWORD *)(v0 + 120) = v1;
    v7 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized CollaborationConnectionManager.sendPresenceUpdateMessage(_:)
                                         + async function pointer to specialized CollaborationConnectionManager.sendPresenceUpdateMessage(_:));
    swift_bridgeObjectRetain();
    v2 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 272) = v2;
    *v2 = v0;
    v2[1] = closure #1 in ParticipantPresenceCoordinator._makePersonalDeviceConnectionSubscriptionTask(with:);
    return v7(v0 + 72);
  }
  else
  {
    v4 = *(_QWORD *)(v0 + 160) + *(int *)(v0 + 280);
    outlined release of PresenceUpdateMessage((uint64_t *)(v0 + 16));
    v5 = type metadata accessor for GroupSessionMessenger.MessageContext();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
    v6 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 216) = v6;
    *v6 = v0;
    v6[1] = closure #1 in ParticipantPresenceCoordinator._makePersonalDeviceConnectionSubscriptionTask(with:);
    return AsyncStream.Iterator.next(isolation:)();
  }
}

{
  swift_task_dealloc();
  outlined consume of PresenceUpdateMessage.Kind(0, 0);
  swift_bridgeObjectRelease();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  swift_release();
  v1 = *(_QWORD *)(v0 + 160) + *(int *)(v0 + 280);
  outlined release of PresenceUpdateMessage((uint64_t *)(v0 + 16));
  v2 = type metadata accessor for GroupSessionMessenger.MessageContext();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 216) = v3;
  *v3 = v0;
  v3[1] = closure #1 in ParticipantPresenceCoordinator._makePersonalDeviceConnectionSubscriptionTask(with:);
  return AsyncStream.Iterator.next(isolation:)();
}

uint64_t closure #2 in ParticipantPresenceCoordinator._makePersonalDeviceConnectionSubscriptionTask(with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5[13] = a4;
  v5[14] = a5;
  v6 = type metadata accessor for Participants();
  v5[15] = v6;
  v5[16] = *(_QWORD *)(v6 - 8);
  v5[17] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Participant?);
  v5[18] = swift_task_alloc();
  v7 = type metadata accessor for Participant();
  v5[19] = v7;
  v5[20] = *(_QWORD *)(v7 - 8);
  v5[21] = swift_task_alloc();
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<Set<Participant>>.Iterator);
  v5[22] = v8;
  v5[23] = *(_QWORD *)(v8 - 8);
  v5[24] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #2 in ParticipantPresenceCoordinator._makePersonalDeviceConnectionSubscriptionTask(with:)()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;

  if (one-time initialization token for tabGroup != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  *(_QWORD *)(v0 + 200) = __swift_project_value_buffer(v1, (uint64_t)static Logger.tabGroup);
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_24A3EF000, v2, v3, "Will begin observing active participant changes in personal device connection", v4, 2u);
    MEMORY[0x24BD0F964](v4, -1, -1);
  }

  return swift_task_switch();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 208) = specialized CollaborationConnectionManager.participantUpdates()((uint64_t (*)(BOOL, uint64_t, uint64_t, unint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), &demangling cache variable for type metadata for CollaborationConnectionManager<PersonalDeviceCoordinationActivity, PersonalGroupSessionProvider<PersonalDeviceCoordinationActivity>, PresenceUpdateMessage>.WeakContainer<AsyncBufferedQueue<Set<Participant>>>, (void (*)(BOOL, uint64_t, uint64_t))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:));
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = *(_QWORD *)(v0 + 104);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<Set<Participant>>);
  AsyncStream.makeAsyncIterator()();
  v2 = OBJC_IVAR____WBParticipantPresenceCoordinator_connectionManagerStore;
  *(_QWORD *)(v0 + 216) = *(_QWORD *)(*(_QWORD *)v1 + 160);
  *(_QWORD *)(v0 + 224) = v2;
  *(_QWORD *)(v0 + 232) = OBJC_IVAR____WBParticipantPresenceCoordinator_participantPresenceStore;
  swift_beginAccess();
  *(_DWORD *)(v0 + 384) = *MEMORY[0x24BDD1F58];
  *(_QWORD *)(v0 + 240) = MEMORY[0x24BEE4B08];
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 248) = v3;
  *v3 = v0;
  v3[1] = closure #2 in ParticipantPresenceCoordinator._makePersonalDeviceConnectionSubscriptionTask(with:);
  return AsyncStream.Iterator.next(isolation:)();
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;

  v1 = *(_QWORD *)(v0 + 96);
  *(_QWORD *)(v0 + 256) = v1;
  if (!v1)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 184) + 8))(*(_QWORD *)(v0 + 192), *(_QWORD *)(v0 + 176));
    goto LABEL_5;
  }
  if ((static Task<>.isCancelled.getter() & 1) != 0)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 184) + 8))(*(_QWORD *)(v0 + 192), *(_QWORD *)(v0 + 176));
    swift_bridgeObjectRelease();
LABEL_5:
    swift_bridgeObjectRelease();
    v2 = Logger.logObject.getter();
    v3 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v2, v3))
    {
      v4 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v4 = 0;
      _os_log_impl(&dword_24A3EF000, v2, v3, "Did finish observering active participant changes in personal device connection", v4, 2u);
      MEMORY[0x24BD0F964](v4, -1, -1);
    }
    swift_release();

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v6 = Logger.logObject.getter();
  v7 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v8 = 0;
    _os_log_impl(&dword_24A3EF000, v6, v7, "Active participants did change in personal device connection", v8, 2u);
    MEMORY[0x24BD0F964](v8, -1, -1);
  }

  return swift_task_switch();
}

{
  _QWORD *v0;

  outlined init with copy of TaskPriority?(v0[13] + v0[27], v0[18], &demangling cache variable for type metadata for Participant?);
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  v1 = v0[19];
  v2 = v0[20];
  v3 = v0[18];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    outlined destroy of TaskPriority?(v3, &demangling cache variable for type metadata for Participant?);
    v4 = v0[32];
  }
  else
  {
    v5 = v0[32];
    v6 = v0[21];
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32))(v6, v3, v1);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Participant>);
    v7 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
    v8 = swift_allocObject();
    *(_OWORD *)(v8 + 16) = xmmword_24A42FA50;
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v2 + 16))(v8 + v7, v6, v1);
    v4 = specialized _NativeSet.subtracting<A>(_:)(v8, v5);
    swift_setDeallocating();
    swift_arrayDestroy();
    swift_deallocClassInstance();
    (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v6, v1);
  }
  v0[33] = v4;
  v0[34] = *(_QWORD *)(v0[14] + v0[28]);
  v0[35] = *(_QWORD *)(v4 + 16);
  return swift_task_switch();
}

{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)(v0 + 272) + 128) = *(_QWORD *)(v0 + 280);
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;

  v1 = v0[33];
  v2 = v0[30];
  if (*(_QWORD *)(v2 + 16) <= *(_QWORD *)(v1 + 16) >> 3)
  {
    v6 = v0[33];
    swift_bridgeObjectRetain();
    specialized Set._subtract<A>(_:)(v2);
    swift_bridgeObjectRelease();
    v3 = v6;
  }
  else
  {
    swift_bridgeObjectRetain();
    v3 = specialized _NativeSet.subtracting<A>(_:)(v2, v1);
    swift_bridgeObjectRelease();
  }
  v0[36] = v3;
  if (*(_QWORD *)(v3 + 16))
  {
    v0[37] = *(_QWORD *)(v0[14] + v0[29]);
    return swift_task_switch();
  }
  else
  {
    swift_bridgeObjectRelease();
    v0[30] = v0[33];
    v5 = (_QWORD *)swift_task_alloc();
    v0[31] = v5;
    *v5 = v0;
    v5[1] = closure #2 in ParticipantPresenceCoordinator._makePersonalDeviceConnectionSubscriptionTask(with:);
    return AsyncStream.Iterator.next(isolation:)();
  }
}

{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (_QWORD *)v0[37];
  v2 = v1[18];
  v0[38] = v2;
  v3 = v1[19];
  v0[39] = v3;
  v0[40] = v1[20];
  v0[41] = v1[21];
  v0[42] = v1[22];
  v0[43] = v1[23];
  v0[44] = v1[24];
  outlined copy of PresenceUpdateMessage.Kind(v2, v3);
  swift_bridgeObjectRetain();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 104) + 168);
  *(_QWORD *)(v0 + 360) = v1;
  v2 = *(_QWORD *)(v0 + 352);
  if (v1)
  {
    v3 = *(_OWORD *)(v0 + 320);
    *(_OWORD *)(v0 + 16) = *(_OWORD *)(v0 + 304);
    *(_OWORD *)(v0 + 32) = v3;
    *(_OWORD *)(v0 + 48) = *(_OWORD *)(v0 + 336);
    *(_QWORD *)(v0 + 64) = v2;
    swift_retain();
    return swift_task_switch();
  }
  else
  {
    v6 = *(_QWORD *)(v0 + 304);
    v5 = *(_QWORD *)(v0 + 312);
    swift_bridgeObjectRelease();
    outlined consume of PresenceUpdateMessage.Kind(v6, v5);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 240) = *(_QWORD *)(v0 + 264);
    v7 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 248) = v7;
    *v7 = v0;
    v7[1] = closure #2 in ParticipantPresenceCoordinator._makePersonalDeviceConnectionSubscriptionTask(with:);
    return AsyncStream.Iterator.next(isolation:)();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = *(_QWORD *)(v0 + 128);
  **(_QWORD **)(v0 + 136) = *(_QWORD *)(v0 + 288);
  (*(void (**)(void))(v1 + 104))();
  swift_bridgeObjectRetain();
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 368) = v2;
  lazy protocol witness table accessor for type PresenceUpdateMessage and conformance PresenceUpdateMessage();
  lazy protocol witness table accessor for type PresenceUpdateMessage and conformance PresenceUpdateMessage();
  *v2 = v0;
  v2[1] = closure #2 in ParticipantPresenceCoordinator._makePersonalDeviceConnectionSubscriptionTask(with:);
  return GroupSessionMessenger.send<A>(_:to:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 128);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 136);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 120);
  v5 = *(_QWORD **)v1;
  v5[47] = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  if (v0)
    return swift_task_switch();
  v8 = v5[38];
  v7 = v5[39];
  swift_bridgeObjectRelease();
  swift_release();
  outlined consume of PresenceUpdateMessage.Kind(v8, v7);
  swift_bridgeObjectRelease();
  v5[30] = v5[33];
  v9 = (_QWORD *)swift_task_alloc();
  v5[31] = v9;
  *v9 = v5;
  v9[1] = closure #2 in ParticipantPresenceCoordinator._makePersonalDeviceConnectionSubscriptionTask(with:);
  return AsyncStream.Iterator.next(isolation:)();
}

{
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 304);
  v1 = *(_QWORD *)(v0 + 312);
  swift_bridgeObjectRelease();
  swift_release();
  outlined consume of PresenceUpdateMessage.Kind(v2, v1);
  swift_bridgeObjectRelease();
  return swift_task_switch();
}

{
  _QWORD *v0;
  void *v1;
  id v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  void *v7;
  uint64_t v8;
  _QWORD *v9;
  id v10;
  uint64_t v11;
  _QWORD *v12;

  v1 = (void *)v0[47];
  v2 = v1;
  v3 = v1;
  v4 = Logger.logObject.getter();
  v5 = static os_log_type_t.error.getter();
  v6 = os_log_type_enabled(v4, v5);
  v7 = (void *)v0[47];
  if (v6)
  {
    v8 = swift_slowAlloc();
    v9 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v8 = 138412290;
    v10 = v7;
    v11 = _swift_stdlib_bridgeErrorToNSError();
    *(_QWORD *)(v8 + 4) = v11;
    *v9 = v11;

    _os_log_impl(&dword_24A3EF000, v4, v5, "Failed to send message to new participants in personal device connection, error: %@", (uint8_t *)v8, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x24BD0F964](v9, -1, -1);
    MEMORY[0x24BD0F964](v8, -1, -1);

  }
  else
  {

  }
  v0[30] = v0[33];
  v12 = (_QWORD *)swift_task_alloc();
  v0[31] = v12;
  *v12 = v0;
  v12[1] = closure #2 in ParticipantPresenceCoordinator._makePersonalDeviceConnectionSubscriptionTask(with:);
  return AsyncStream.Iterator.next(isolation:)();
}

Swift::Void __swiftcall ParticipantPresenceCoordinator.beginCollaborationForShare(_:)(CKShare a1)
{
  ParticipantPresenceCoordinator.beginCollaborationForShare(_:)(a1.super.super.isa, (uint64_t)&unk_251BC97D0, (uint64_t)&async function pointer to partial apply for closure #1 in ParticipantPresenceCoordinator.beginCollaborationForShare(_:));
}

uint64_t closure #1 in ParticipantPresenceCoordinator.beginCollaborationForShare(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  *(_QWORD *)(v5 + 32) = a4;
  *(_QWORD *)(v5 + 40) = a5;
  return swift_task_switch();
}

uint64_t closure #1 in ParticipantPresenceCoordinator.beginCollaborationForShare(_:)()
{
  _QWORD *v0;
  char *v1;
  void *v2;
  uint64_t v3;
  char *v4;
  id v5;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t, uint64_t);

  v1 = (char *)v0[4];
  v2 = (void *)v0[5];
  v3 = *(_QWORD *)&v1[OBJC_IVAR____WBParticipantPresenceCoordinator_connectionManagerStore];
  v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&async function pointer to specialized ParticipantPresenceCoordinator.ConnectionManagerStore.addSharedConnection(forShare:createIfNeededUsing:)
                                                                  + async function pointer to specialized ParticipantPresenceCoordinator.ConnectionManagerStore.addSharedConnection(forShare:createIfNeededUsing:));
  v4 = v1;
  v5 = v2;
  v6 = (_QWORD *)swift_task_alloc();
  v0[6] = v6;
  *v6 = v0;
  v6[1] = closure #1 in ParticipantPresenceCoordinator.beginCollaborationForShare(_:);
  return v8(v0[5], v3, v0[4], v0[5]);
}

{
  uint64_t v0;
  uint64_t *v1;
  void *v2;
  void *v3;
  uint64_t v4;

  v2 = *(void **)(*v1 + 40);
  v3 = *(void **)(*v1 + 32);
  v4 = *v1;
  *(_QWORD *)(v4 + 56) = v0;
  swift_task_dealloc();

  if (v0)
    return swift_task_switch();
  else
    return (*(uint64_t (**)(void))(v4 + 8))();
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  id v4;
  id v5;
  id v6;
  id v7;
  NSObject *v8;
  os_log_type_t v9;
  BOOL v10;
  void *v11;
  void *v12;
  uint64_t v13;
  _QWORD *v14;
  id v15;
  id v16;
  id v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;

  if (one-time initialization token for tabGroup != -1)
    swift_once();
  v1 = *(void **)(v0 + 56);
  v2 = *(void **)(v0 + 40);
  v3 = type metadata accessor for Logger();
  __swift_project_value_buffer(v3, (uint64_t)static Logger.tabGroup);
  v4 = v2;
  v5 = v1;
  v6 = v4;
  v7 = v1;
  v8 = Logger.logObject.getter();
  v9 = static os_log_type_t.error.getter();
  v10 = os_log_type_enabled(v8, v9);
  v11 = *(void **)(v0 + 56);
  v12 = *(void **)(v0 + 40);
  if (v10)
  {
    v13 = swift_slowAlloc();
    v14 = (_QWORD *)swift_slowAlloc();
    v24 = swift_slowAlloc();
    v25 = v24;
    *(_DWORD *)v13 = 136315394;
    v15 = objc_msgSend(v12, sel_recordID);
    v16 = objc_msgSend(v15, sel_zoneID);

    v17 = objc_msgSend(v16, sel_zoneName);
    v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v20 = v19;

    *(_QWORD *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v20, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    *(_WORD *)(v13 + 12) = 2112;
    v21 = v11;
    v22 = _swift_stdlib_bridgeErrorToNSError();
    *(_QWORD *)(v0 + 24) = v22;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v14 = v22;

    _os_log_impl(&dword_24A3EF000, v8, v9, "Failed to start shared activity for share: %s with error %@", (uint8_t *)v13, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x24BD0F964](v14, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x24BD0F964](v24, -1, -1);
    MEMORY[0x24BD0F964](v13, -1, -1);

  }
  else
  {

  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

Swift::Void __swiftcall ParticipantPresenceCoordinator.shareDidUpdate(_:)(CKShare a1)
{
  objc_class *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  CKShare *v8;
  int v9;
  objc_class *v10;
  objc_class *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[4];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for TaskPriority();
  v7 = *(_QWORD *)(v6 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v5, 1, 1, v6);
  v8 = (CKShare *)swift_allocObject();
  v8[2].super.super.isa = 0;
  v8[3].super.super.isa = 0;
  v8[4].super.super.isa = v1;
  v8[5].super.super.isa = a1.super.super.isa;
  v9 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6);
  v10 = v1;
  v11 = a1.super.super.isa;
  if (v9 == 1)
  {
    outlined destroy of TaskPriority?((uint64_t)v5, &demangling cache variable for type metadata for TaskPriority?);
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v5, v6);
    if (v8[2].super.super.isa)
    {
      swift_getObjectType();
      swift_unknownObjectRetain();
      v12 = dispatch thunk of Actor.unownedExecutor.getter();
      v14 = v13;
      swift_unknownObjectRelease();
      if (v14 | v12)
      {
        v15[0] = 0;
        v15[1] = 0;
        v15[2] = v12;
        v15[3] = v14;
      }
    }
  }
  swift_task_create();
  swift_release();
}

uint64_t closure #1 in ParticipantPresenceCoordinator.shareDidUpdate(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v8;

  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v5 + 16) = v8;
  *v8 = v5;
  v8[1] = specialized closure #3 in closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:);
  v8[2] = a5;
  v8[3] = a4;
  return swift_task_switch();
}

uint64_t ParticipantPresenceCoordinator._updateActivityForShare(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v1;
  return swift_task_switch();
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v3 = *v2;
  *(_QWORD *)(v3 + 56) = a1;
  *(_QWORD *)(v3 + 64) = v1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t ParticipantPresenceCoordinator._updateActivityForShare(_:)()
{
  uint64_t v0;
  id v1;
  id v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v1 = objc_msgSend(*(id *)(v0 + 16), sel_recordID);
  v2 = objc_msgSend(v1, sel_zoneID);

  v3 = objc_msgSend(v2, sel_safari_tabGroupRootRecordName);
  if (!v3)
    return (*(uint64_t (**)(void))(v0 + 8))();
  v4 = *(_QWORD *)(v0 + 24);
  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v7 = v6;

  *(_QWORD *)(v0 + 32) = v5;
  *(_QWORD *)(v0 + 40) = v7;
  v8 = *(_QWORD *)(v4 + OBJC_IVAR____WBParticipantPresenceCoordinator_connectionManagerStore);
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 48) = v9;
  *v9 = v0;
  v9[1] = ParticipantPresenceCoordinator._updateActivityForShare(_:);
  v9[30] = *(_QWORD *)(v0 + 16);
  v9[31] = v8;
  return swift_task_switch();
}

{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 56))
  {
    *(_QWORD *)(v0 + 72) = *(_QWORD *)(*(_QWORD *)(v0 + 24)
                                     + OBJC_IVAR____WBParticipantPresenceCoordinator_participantPresenceStore);
    return swift_task_switch();
  }
  else
  {
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = ParticipantPresenceStore.replace(share:with:in:)(*(void **)(v0 + 56), *(void **)(v0 + 16), *(_QWORD **)(v0 + 32), *(void **)(v0 + 40));
  v3 = v2;
  v5 = v4;
  v7 = v6;
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 80) = v1;
  *(_QWORD *)(v0 + 88) = v3;
  *(_QWORD *)(v0 + 96) = v5;
  *(_QWORD *)(v0 + 104) = v7;
  return swift_task_switch();
}

{
  uint64_t v0;

  type metadata accessor for MainActor();
  *(_QWORD *)(v0 + 112) = static MainActor.shared.getter();
  dispatch thunk of Actor.unownedExecutor.getter();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 104);
  v2 = *(_QWORD *)(v0 + 96);
  swift_release();
  specialized ParticipantPresenceCoordinator._notifyStoreUpdates(_:)(v2, v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_task_switch();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

Swift::Void __swiftcall ParticipantPresenceCoordinator.endCollaborationForShare(_:)(CKShare a1)
{
  ParticipantPresenceCoordinator.beginCollaborationForShare(_:)(a1.super.super.isa, (uint64_t)&unk_251BC9820, (uint64_t)&async function pointer to partial apply for closure #1 in ParticipantPresenceCoordinator.endCollaborationForShare(_:));
}

uint64_t ParticipantPresenceCoordinator.beginCollaborationForShare(_:)(void *a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _QWORD *v10;
  id v11;
  id v12;
  uint64_t v14;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
  v10 = (_QWORD *)swift_allocObject();
  v10[2] = 0;
  v10[3] = 0;
  v10[4] = v3;
  v10[5] = a1;
  v11 = v3;
  v12 = a1;
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v8, a3, (uint64_t)v10);
  return swift_release();
}

uint64_t closure #1 in ParticipantPresenceCoordinator.endCollaborationForShare(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  *(_QWORD *)(v5 + 16) = a4;
  *(_QWORD *)(v5 + 24) = a5;
  return swift_task_switch();
}

uint64_t closure #1 in ParticipantPresenceCoordinator.endCollaborationForShare(_:)()
{
  _QWORD *v0;
  char *v1;
  void *v2;
  uint64_t v3;
  char *v4;
  id v5;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t);

  v1 = (char *)v0[2];
  v2 = (void *)v0[3];
  v3 = *(_QWORD *)&v1[OBJC_IVAR____WBParticipantPresenceCoordinator_connectionManagerStore];
  v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&async function pointer to specialized ParticipantPresenceCoordinator.ConnectionManagerStore.removeSharedConnection(forShare:cleanUpIfNeeedUsing:)
                                                         + async function pointer to specialized ParticipantPresenceCoordinator.ConnectionManagerStore.removeSharedConnection(forShare:cleanUpIfNeeedUsing:));
  v4 = v1;
  v5 = v2;
  v6 = (_QWORD *)swift_task_alloc();
  v0[4] = v6;
  *v6 = v0;
  v6[1] = closure #1 in ParticipantPresenceCoordinator.endCollaborationForShare(_:);
  return v8(v0[3], v3, v0[3]);
}

{
  uint64_t *v0;
  void *v1;
  void *v2;
  uint64_t v4;

  v1 = *(void **)(*v0 + 24);
  v2 = *(void **)(*v0 + 16);
  v4 = *v0;
  swift_task_dealloc();

  return (*(uint64_t (**)(void))(v4 + 8))();
}

void @objc ParticipantPresenceCoordinator.beginCollaborationForShare(_:)(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _QWORD *v12;
  id v13;
  id v14;
  id v15;
  uint64_t v16;

  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v10, 1, 1, v11);
  v12 = (_QWORD *)swift_allocObject();
  v12[2] = 0;
  v12[3] = 0;
  v12[4] = a1;
  v12[5] = a3;
  v13 = a3;
  v14 = a1;
  v15 = v13;
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v10, a5, (uint64_t)v12);
  swift_release();

}

_QWORD *closure #1 in ParticipantPresenceCoordinator._startActivityForShare(_:tabGroupIdentifier:)(uint64_t *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a1;
  v4 = a1[1];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CKShareGroupSessionProvider<CKShareCollaborationActivity>);
  swift_allocObject();
  swift_bridgeObjectRetain_n();
  return specialized CKShareGroupSessionProvider.init(id:activity:share:)(v3, v4, v3, v4, a2);
}

uint64_t ParticipantPresenceCoordinator._makeSharedConnectionSubscriptionTask(with:share:participantHandleMap:)(uint64_t a1, void *a2, uint64_t a3)
{
  void *v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  id v10;
  id v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t, uint64_t, uint64_t);
  _QWORD *v18;
  id v19;
  uint64_t v20;
  _QWORD *v21;
  id v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;

  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = objc_msgSend(a2, sel_recordID);
  v11 = objc_msgSend(v10, sel_zoneID);

  v12 = objc_msgSend(v11, sel_safari_tabGroupRootRecordName);
  if (v12)
  {
    v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v15 = v14;

    v16 = type metadata accessor for TaskPriority();
    v17 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56);
    v17(v9, 1, 1, v16);
    v18 = (_QWORD *)swift_allocObject();
    v18[2] = 0;
    v18[3] = 0;
    v18[4] = v13;
    v18[5] = v15;
    v18[6] = a1;
    v18[7] = a3;
    v18[8] = v3;
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    v19 = v3;
    v20 = _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v9, (uint64_t)&async function pointer to partial apply for closure #1 in ParticipantPresenceCoordinator._makeSharedConnectionSubscriptionTask(with:share:participantHandleMap:), (uint64_t)v18);
    v17(v9, 1, 1, v16);
    v21 = (_QWORD *)swift_allocObject();
    v21[2] = 0;
    v21[3] = 0;
    v21[4] = v13;
    v21[5] = v15;
    v21[6] = a1;
    v21[7] = v19;
    v21[8] = a3;
    swift_retain();
    swift_retain();
    v22 = v19;
    v23 = _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v9, (uint64_t)&async function pointer to partial apply for closure #2 in ParticipantPresenceCoordinator._makeSharedConnectionSubscriptionTask(with:share:participantHandleMap:), (uint64_t)v21);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Task<(), Never>>);
    result = swift_allocObject();
    *(_OWORD *)(result + 16) = xmmword_24A42FA30;
    *(_QWORD *)(result + 32) = v20;
    *(_QWORD *)(result + 40) = v23;
  }
  else
  {
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t closure #1 in ParticipantPresenceCoordinator._makeSharedConnectionSubscriptionTask(with:share:participantHandleMap:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v8[23] = a7;
  v8[24] = a8;
  v8[21] = a5;
  v8[22] = a6;
  v8[20] = a4;
  v9 = type metadata accessor for Participant();
  v8[25] = v9;
  v8[26] = *(_QWORD *)(v9 - 8);
  v8[27] = swift_task_alloc();
  v10 = type metadata accessor for GroupSessionMessenger.MessageContext();
  v8[28] = v10;
  v8[29] = *(_QWORD *)(v10 - 8);
  v8[30] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PresenceUpdateMessage, GroupSessionMessenger.MessageContext)?);
  v8[31] = swift_task_alloc();
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<(PresenceUpdateMessage, GroupSessionMessenger.MessageContext)>.Iterator);
  v8[32] = v11;
  v8[33] = *(_QWORD *)(v11 - 8);
  v8[34] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #1 in ParticipantPresenceCoordinator._makeSharedConnectionSubscriptionTask(with:share:participantHandleMap:)()
{
  _QWORD *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  _BOOL4 v4;
  unint64_t v5;
  uint64_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v12;

  if (one-time initialization token for tabGroup != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  v0[35] = __swift_project_value_buffer(v1, (uint64_t)static Logger.tabGroup);
  swift_bridgeObjectRetain_n();
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.info.getter();
  v4 = os_log_type_enabled(v2, v3);
  v5 = v0[21];
  if (v4)
  {
    v6 = v0[20];
    v7 = (uint8_t *)swift_slowAlloc();
    v8 = swift_slowAlloc();
    v12 = v8;
    *(_DWORD *)v7 = 136446210;
    swift_bridgeObjectRetain();
    v0[19] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v5, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_24A3EF000, v2, v3, "Will begin receiving messages in shared connection for tab group %{public}s", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24BD0F964](v8, -1, -1);
    MEMORY[0x24BD0F964](v7, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<(PresenceUpdateMessage, GroupSessionMessenger.MessageContext)>);
  AsyncStream.makeAsyncIterator()();
  v9 = OBJC_IVAR____WBParticipantPresenceCoordinator_connectionManagerStore;
  v0[36] = OBJC_IVAR____WBParticipantPresenceCoordinator_participantPresenceStore;
  v0[37] = v9;
  v10 = (_QWORD *)swift_task_alloc();
  v0[38] = v10;
  *v10 = v0;
  v10[1] = closure #1 in ParticipantPresenceCoordinator._makeSharedConnectionSubscriptionTask(with:share:participantHandleMap:);
  return AsyncStream.Iterator.next(isolation:)();
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  __int128 *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  _BOOL4 v14;
  unint64_t v15;
  uint64_t v16;
  uint8_t *v17;
  uint64_t v18;
  NSObject *v20;
  os_log_type_t v21;
  _BOOL4 v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v1 = *(__int128 **)(v0 + 248);
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PresenceUpdateMessage, GroupSessionMessenger.MessageContext));
  if ((*(unsigned int (**)(__int128 *, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(v1, 1, v2) == 1)
  {
LABEL_4:
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 264) + 8))(*(_QWORD *)(v0 + 272), *(_QWORD *)(v0 + 256));
    swift_bridgeObjectRetain_n();
    v12 = Logger.logObject.getter();
    v13 = static os_log_type_t.info.getter();
    v14 = os_log_type_enabled(v12, v13);
    v15 = *(_QWORD *)(v0 + 168);
    if (v14)
    {
      v16 = *(_QWORD *)(v0 + 160);
      v17 = (uint8_t *)swift_slowAlloc();
      v18 = swift_slowAlloc();
      v27 = v18;
      *(_DWORD *)v17 = 136446210;
      swift_bridgeObjectRetain();
      *(_QWORD *)(v0 + 144) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v15, &v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_24A3EF000, v12, v13, "Did finish receiving messages in shared connection for tab group %{public}s", v17, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24BD0F964](v18, -1, -1);
      MEMORY[0x24BD0F964](v17, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v4 = *(_QWORD *)(v0 + 232);
  v3 = *(_QWORD *)(v0 + 240);
  v5 = *(_QWORD *)(v0 + 224);
  v7 = v1[1];
  v6 = v1[2];
  v8 = *v1;
  *(_QWORD *)(v0 + 64) = *((_QWORD *)v1 + 6);
  *(_OWORD *)(v0 + 32) = v7;
  *(_OWORD *)(v0 + 48) = v6;
  *(_OWORD *)(v0 + 16) = v8;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v3, (uint64_t)v1 + *(int *)(v2 + 48), v5);
  if ((static Task<>.isCancelled.getter() & 1) != 0)
  {
    v10 = *(_QWORD *)(v0 + 232);
    v9 = *(_QWORD *)(v0 + 240);
    v11 = *(_QWORD *)(v0 + 224);
    outlined release of PresenceUpdateMessage((uint64_t *)(v0 + 16));
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
    goto LABEL_4;
  }
  swift_bridgeObjectRetain_n();
  v20 = Logger.logObject.getter();
  v21 = static os_log_type_t.info.getter();
  v22 = os_log_type_enabled(v20, v21);
  v23 = *(_QWORD *)(v0 + 168);
  if (v22)
  {
    v24 = *(_QWORD *)(v0 + 160);
    v25 = swift_slowAlloc();
    v26 = swift_slowAlloc();
    v27 = v26;
    *(_DWORD *)v25 = 136446210;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v25 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v23, &v27);
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_24A3EF000, v20, v21, "Did receive message in shared connection for tab group %{public}s", (uint8_t *)v25, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24BD0F964](v26, -1, -1);
    MEMORY[0x24BD0F964](v25, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  GroupSessionMessenger.MessageContext.source.getter();
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  void *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = v0[23];
  v2 = Participant.handle.getter();
  v4 = v3;
  v5 = *(_QWORD *)(v1 + 112);
  if (*(_QWORD *)(v5 + 16))
  {
    v6 = v2;
    swift_bridgeObjectRetain();
    v7 = specialized __RawDictionaryStorage.find<A>(_:)(v6, v4);
    v9 = v0[26];
    v8 = v0[27];
    v10 = v0[25];
    if ((v11 & 1) != 0)
    {
      v12 = *(void **)(*(_QWORD *)(v5 + 56) + 8 * v7);
      v0[39] = v12;
      v13 = v12;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
  }
  else
  {
    v15 = v0[26];
    v14 = v0[27];
    v16 = v0[25];
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
  }
  return swift_task_switch();
}

{
  _QWORD *v0;

  v0[40] = *(_QWORD *)(v0[24] + v0[36]);
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)(v0 + 328) = ParticipantPresenceStore.handleSharedPresenceUpdateMessage(_:from:)((uint64_t *)(v0 + 16), *(void **)(v0 + 312));
  *(_QWORD *)(v0 + 336) = v1;
  *(_QWORD *)(v0 + 344) = v2;
  *(_QWORD *)(v0 + 352) = v3;
  outlined release of PresenceUpdateMessage((uint64_t *)(v0 + 16));
  return swift_task_switch();
}

{
  uint64_t v0;

  type metadata accessor for MainActor();
  *(_QWORD *)(v0 + 360) = static MainActor.shared.getter();
  dispatch thunk of Actor.unownedExecutor.getter();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 352);
  v2 = *(_QWORD *)(v0 + 344);
  swift_release();
  specialized ParticipantPresenceCoordinator._notifyStoreUpdates(_:)(v2, v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_task_switch();
}

{
  uint64_t v0;
  _QWORD *v1;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 232) + 8))(*(_QWORD *)(v0 + 240), *(_QWORD *)(v0 + 224));
  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 304) = v1;
  *v1 = v0;
  v1[1] = closure #1 in ParticipantPresenceCoordinator._makeSharedConnectionSubscriptionTask(with:share:participantHandleMap:);
  return AsyncStream.Iterator.next(isolation:)();
}

{
  uint64_t *v0;
  _QWORD *v1;

  (*(void (**)(uint64_t, uint64_t))(v0[29] + 8))(v0[30], v0[28]);
  outlined release of PresenceUpdateMessage(v0 + 2);
  v1 = (_QWORD *)swift_task_alloc();
  v0[38] = (uint64_t)v1;
  *v1 = v0;
  v1[1] = closure #1 in ParticipantPresenceCoordinator._makeSharedConnectionSubscriptionTask(with:share:participantHandleMap:);
  return AsyncStream.Iterator.next(isolation:)();
}

{
  _QWORD *v0;
  uint64_t v1;

  v0[16] = ParticipantPresenceStore.handleCurrentUserPresenceUpdateMessage(_:in:)((uint64_t)(v0 + 2), v0[20], v0[21]);
  v0[17] = v1;
  v0[46] = v1;
  return swift_task_switch();
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;

  if (v0[46])
  {
    v1 = v0[37];
    v2 = v0[24];
    v0[47] = v0[16];
    v0[48] = *(_QWORD *)(v2 + v1);
    return swift_task_switch();
  }
  else
  {
    outlined release of PresenceUpdateMessage(v0 + 2);
    (*(void (**)(uint64_t, uint64_t))(v0[29] + 8))(v0[30], v0[28]);
    v4 = (_QWORD *)swift_task_alloc();
    v0[38] = (uint64_t)v4;
    *v4 = v0;
    v4[1] = closure #1 in ParticipantPresenceCoordinator._makeSharedConnectionSubscriptionTask(with:share:participantHandleMap:);
    return AsyncStream.Iterator.next(isolation:)();
  }
}

{
  _QWORD *v0;

  v0[49] = ParticipantPresenceCoordinator.ConnectionManagerStore.sharedConnectionManager(forTabGroup:)(v0[47], v0[46]);
  swift_bridgeObjectRelease();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v4;
  uint64_t (*v5)(uint64_t);

  if (*(_QWORD *)(v0 + 392))
  {
    v1 = *(_QWORD *)(v0 + 64);
    *(_QWORD *)(v0 + 400) = v1;
    *(_OWORD *)(v0 + 88) = 0u;
    *(_OWORD *)(v0 + 72) = 0u;
    *(_OWORD *)(v0 + 104) = *(_OWORD *)(v0 + 48);
    *(_QWORD *)(v0 + 120) = v1;
    v5 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized CollaborationConnectionManager.sendPresenceUpdateMessage(_:)
                                         + async function pointer to specialized CollaborationConnectionManager.sendPresenceUpdateMessage(_:));
    swift_bridgeObjectRetain();
    v2 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 408) = v2;
    *v2 = v0;
    v2[1] = closure #1 in ParticipantPresenceCoordinator._makeSharedConnectionSubscriptionTask(with:share:participantHandleMap:);
    return v5(v0 + 72);
  }
  else
  {
    outlined release of PresenceUpdateMessage((uint64_t *)(v0 + 16));
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 232) + 8))(*(_QWORD *)(v0 + 240), *(_QWORD *)(v0 + 224));
    v4 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 304) = v4;
    *v4 = v0;
    v4[1] = closure #1 in ParticipantPresenceCoordinator._makeSharedConnectionSubscriptionTask(with:share:participantHandleMap:);
    return AsyncStream.Iterator.next(isolation:)();
  }
}

{
  swift_task_dealloc();
  outlined consume of PresenceUpdateMessage.Kind(0, 0);
  swift_bridgeObjectRelease();
  return swift_task_switch();
}

{
  uint64_t *v0;
  _QWORD *v1;

  swift_release();
  outlined release of PresenceUpdateMessage(v0 + 2);
  (*(void (**)(uint64_t, uint64_t))(v0[29] + 8))(v0[30], v0[28]);
  v1 = (_QWORD *)swift_task_alloc();
  v0[38] = (uint64_t)v1;
  *v1 = v0;
  v1[1] = closure #1 in ParticipantPresenceCoordinator._makeSharedConnectionSubscriptionTask(with:share:participantHandleMap:);
  return AsyncStream.Iterator.next(isolation:)();
}

uint64_t closure #2 in ParticipantPresenceCoordinator._makeSharedConnectionSubscriptionTask(with:share:participantHandleMap:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v8[28] = a7;
  v8[29] = a8;
  v8[26] = a5;
  v8[27] = a6;
  v8[25] = a4;
  v9 = type metadata accessor for Participants();
  v8[30] = v9;
  v8[31] = *(_QWORD *)(v9 - 8);
  v8[32] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Participant?);
  v8[33] = swift_task_alloc();
  v10 = type metadata accessor for Participant();
  v8[34] = v10;
  v8[35] = *(_QWORD *)(v10 - 8);
  v8[36] = swift_task_alloc();
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<Set<Participant>>.Iterator);
  v8[37] = v11;
  v8[38] = *(_QWORD *)(v11 - 8);
  v8[39] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #2 in ParticipantPresenceCoordinator._makeSharedConnectionSubscriptionTask(with:share:participantHandleMap:)()
{
  _QWORD *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  _BOOL4 v4;
  unint64_t v5;
  uint64_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v10;

  if (one-time initialization token for tabGroup != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  v0[40] = __swift_project_value_buffer(v1, (uint64_t)static Logger.tabGroup);
  swift_bridgeObjectRetain_n();
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.info.getter();
  v4 = os_log_type_enabled(v2, v3);
  v5 = v0[26];
  if (v4)
  {
    v6 = v0[25];
    v7 = (uint8_t *)swift_slowAlloc();
    v8 = swift_slowAlloc();
    v10 = v8;
    *(_DWORD *)v7 = 136446210;
    swift_bridgeObjectRetain();
    v0[24] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v5, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_24A3EF000, v2, v3, "Will begin observing active participant changes in shared connection for tab group %{public}s", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24BD0F964](v8, -1, -1);
    MEMORY[0x24BD0F964](v7, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  return swift_task_switch();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 328) = specialized CollaborationConnectionManager.participantUpdates()((uint64_t (*)(BOOL, uint64_t, uint64_t, unint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), &demangling cache variable for type metadata for CollaborationConnectionManager<CKShareCollaborationActivity, CKShareGroupSessionProvider<CKShareCollaborationActivity>, PresenceUpdateMessage>.WeakContainer<AsyncBufferedQueue<Set<Participant>>>, (void (*)(BOOL, uint64_t, uint64_t))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:));
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = *(_QWORD *)(v0 + 216);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<Set<Participant>>);
  AsyncStream.makeAsyncIterator()();
  v2 = OBJC_IVAR____WBParticipantPresenceCoordinator_connectionManagerStore;
  *(_QWORD *)(v0 + 336) = *(_QWORD *)(*(_QWORD *)v1 + 160);
  *(_QWORD *)(v0 + 344) = v2;
  *(_QWORD *)(v0 + 352) = OBJC_IVAR____WBParticipantPresenceCoordinator_participantPresenceStore;
  swift_beginAccess();
  *(_DWORD *)(v0 + 608) = *MEMORY[0x24BDD1F58];
  v3 = MEMORY[0x24BEE4B08];
  *(_QWORD *)(v0 + 368) = MEMORY[0x24BEE4B08];
  *(_QWORD *)(v0 + 376) = v3;
  *(_QWORD *)(v0 + 360) = 0;
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 384) = v4;
  *v4 = v0;
  v4[1] = closure #2 in ParticipantPresenceCoordinator._makeSharedConnectionSubscriptionTask(with:share:participantHandleMap:);
  return AsyncStream.Iterator.next(isolation:)();
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  _BOOL4 v4;
  unint64_t v5;
  uint64_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v10;

  v1 = *(_QWORD *)(v0 + 168);
  *(_QWORD *)(v0 + 392) = v1;
  if (v1)
  {
    if ((static Task<>.isCancelled.getter() & 1) == 0)
      return swift_task_switch();
    swift_bridgeObjectRelease();
  }
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 304) + 8))(*(_QWORD *)(v0 + 312), *(_QWORD *)(v0 + 296));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain_n();
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.info.getter();
  v4 = os_log_type_enabled(v2, v3);
  v5 = *(_QWORD *)(v0 + 208);
  if (v4)
  {
    v6 = *(_QWORD *)(v0 + 200);
    v7 = (uint8_t *)swift_slowAlloc();
    v8 = swift_slowAlloc();
    v10 = v8;
    *(_DWORD *)v7 = 136446210;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 160) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v5, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_24A3EF000, v2, v3, "Did finish observing active participant changes in shared connection for tab group %{public}s", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24BD0F964](v8, -1, -1);
    MEMORY[0x24BD0F964](v7, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }
  swift_release();

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  _QWORD *v0;

  outlined init with copy of TaskPriority?(v0[27] + v0[42], v0[33], &demangling cache variable for type metadata for Participant?);
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  v1 = v0[34];
  v2 = v0[35];
  v3 = v0[33];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    outlined destroy of TaskPriority?(v3, &demangling cache variable for type metadata for Participant?);
    v4 = v0[49];
  }
  else
  {
    v5 = v0[49];
    v6 = v0[36];
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32))(v6, v3, v1);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Participant>);
    v7 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
    v8 = swift_allocObject();
    *(_OWORD *)(v8 + 16) = xmmword_24A42FA50;
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v2 + 16))(v8 + v7, v6, v1);
    v4 = specialized _NativeSet.subtracting<A>(_:)(v8, v5);
    swift_setDeallocating();
    swift_arrayDestroy();
    swift_deallocClassInstance();
    (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v6, v1);
  }
  v0[50] = v4;
  v0[51] = *(_QWORD *)(v0[28] + v0[43]);
  v0[52] = *(_QWORD *)(v4 + 16);
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();
  uint64_t v4;
  uint64_t (*v5)();

  v2 = v0[25];
  v1 = v0[26];
  swift_bridgeObjectRetain();
  v3 = ParticipantPresenceCoordinator.ConnectionManagerStore.tabGroupIdentifiersToSharedConnections.modify();
  v5 = specialized Dictionary.subscript.modify(v0 + 9, v2, v1);
  if (*(_QWORD *)(v4 + 8))
    *(_QWORD *)(v4 + 40) = v0[52];
  ((void (*)(_QWORD *, _QWORD))v5)(v0 + 9, 0);
  swift_bridgeObjectRelease();
  ((void (*)(_QWORD *, _QWORD))v3)(v0 + 13, 0);
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = v0[50];
  v2 = v0[45];
  v3 = v0[29];
  swift_retain();
  v4 = specialized Sequence.compactMap<A>(_:)(v1, v3);
  v0[53] = v2;
  swift_release();
  v0[54] = specialized Set.init<A>(_:)(v4);
  swift_bridgeObjectRelease();
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;

  v1 = v0[50];
  v2 = v0[47];
  if (*(_QWORD *)(v2 + 16) <= *(_QWORD *)(v1 + 16) >> 3)
  {
    v13 = v0[50];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    specialized Set._subtract<A>(_:)(v2);
    swift_bridgeObjectRelease();
    v4 = v13;
  }
  else
  {
    swift_bridgeObjectRetain();
    v3 = swift_bridgeObjectRetain();
    v4 = specialized _NativeSet.subtracting<A>(_:)(v3, v1);
    swift_bridgeObjectRelease();
  }
  v0[55] = v4;
  if (*(_QWORD *)(v4 + 16))
  {
    v0[56] = *(_QWORD *)(v0[28] + v0[44]);
    return swift_task_switch();
  }
  swift_bridgeObjectRelease();
  v6 = v0[53];
  v5 = v0[54];
  v7 = v0[46];
  if (*(_QWORD *)(v5 + 16) <= *(_QWORD *)(v7 + 16) >> 3)
  {
    v14 = v0[46];
    swift_bridgeObjectRetain();
    specialized Set._subtract<A>(_:)(v5);
    v8 = v14;
    if (*(_QWORD *)(v14 + 16))
      goto LABEL_8;
  }
  else
  {
    swift_bridgeObjectRetain();
    v8 = specialized _NativeSet.subtracting<A>(_:)(v5, v7);
    if (*(_QWORD *)(v8 + 16))
    {
LABEL_8:
      v0[68] = *(_QWORD *)(v0[28] + v0[44]);
      v9 = specialized Sequence.compactMap<A>(_:)(v8);
      v0[69] = v6;
      swift_bridgeObjectRelease();
      v0[70] = specialized Set.init<A>(_:)(v9);
      swift_bridgeObjectRelease();
      return swift_task_switch();
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v11 = v0[50];
  v0[46] = v0[54];
  v0[47] = v11;
  v0[45] = v6;
  v12 = (_QWORD *)swift_task_alloc();
  v0[48] = v12;
  *v12 = v0;
  v12[1] = closure #2 in ParticipantPresenceCoordinator._makeSharedConnectionSubscriptionTask(with:share:participantHandleMap:);
  return AsyncStream.Iterator.next(isolation:)();
}

{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (_QWORD *)v0[56];
  v2 = v1[18];
  v0[57] = v2;
  v3 = v1[19];
  v0[58] = v3;
  v0[59] = v1[20];
  v0[60] = v1[21];
  v0[61] = v1[22];
  v0[62] = v1[23];
  v0[63] = v1[24];
  outlined copy of PresenceUpdateMessage.Kind(v2, v3);
  swift_bridgeObjectRetain();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 216) + 168);
  *(_QWORD *)(v0 + 512) = v1;
  if (v1)
  {
    v2 = *(_QWORD *)(v0 + 504);
    v3 = *(_OWORD *)(v0 + 472);
    *(_OWORD *)(v0 + 16) = *(_OWORD *)(v0 + 456);
    *(_OWORD *)(v0 + 32) = v3;
    *(_OWORD *)(v0 + 48) = *(_OWORD *)(v0 + 488);
    *(_QWORD *)(v0 + 64) = v2;
    swift_retain();
  }
  else
  {
    v5 = *(_QWORD *)(v0 + 456);
    v4 = *(_QWORD *)(v0 + 464);
    swift_bridgeObjectRelease();
    outlined consume of PresenceUpdateMessage.Kind(v5, v4);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 536) = *(_QWORD *)(v0 + 424);
  }
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = *(_QWORD *)(v0 + 248);
  **(_QWORD **)(v0 + 256) = *(_QWORD *)(v0 + 440);
  (*(void (**)(void))(v1 + 104))();
  swift_bridgeObjectRetain();
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 520) = v2;
  lazy protocol witness table accessor for type PresenceUpdateMessage and conformance PresenceUpdateMessage();
  lazy protocol witness table accessor for type PresenceUpdateMessage and conformance PresenceUpdateMessage();
  *v2 = v0;
  v2[1] = closure #2 in ParticipantPresenceCoordinator._makeSharedConnectionSubscriptionTask(with:share:participantHandleMap:);
  return GroupSessionMessenger.send<A>(_:to:)();
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD **)v1;
  *(_QWORD *)(*(_QWORD *)v1 + 528) = v0;
  swift_task_dealloc();
  if (v0)
  {
    (*(void (**)(_QWORD, _QWORD))(v2[31] + 8))(v2[32], v2[30]);
  }
  else
  {
    v4 = v2[57];
    v3 = v2[58];
    (*(void (**)(_QWORD, _QWORD))(v2[31] + 8))(v2[32], v2[30]);
    swift_release();
    swift_bridgeObjectRelease();
    outlined consume of PresenceUpdateMessage.Kind(v4, v3);
    swift_bridgeObjectRelease();
    v2[67] = 0;
  }
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  v1 = v0[67];
  v2 = v0[54];
  v3 = v0[46];
  if (*(_QWORD *)(v2 + 16) <= *(_QWORD *)(v3 + 16) >> 3)
  {
    v9 = v0[46];
    swift_bridgeObjectRetain();
    specialized Set._subtract<A>(_:)(v2);
    v4 = v9;
    if (*(_QWORD *)(v9 + 16))
      goto LABEL_3;
  }
  else
  {
    swift_bridgeObjectRetain();
    v4 = specialized _NativeSet.subtracting<A>(_:)(v2, v3);
    if (*(_QWORD *)(v4 + 16))
    {
LABEL_3:
      v0[68] = *(_QWORD *)(v0[28] + v0[44]);
      v5 = specialized Sequence.compactMap<A>(_:)(v4);
      v0[69] = v1;
      swift_bridgeObjectRelease();
      v0[70] = specialized Set.init<A>(_:)(v5);
      swift_bridgeObjectRelease();
      return swift_task_switch();
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v7 = v0[50];
  v0[46] = v0[54];
  v0[47] = v7;
  v0[45] = v1;
  v8 = (_QWORD *)swift_task_alloc();
  v0[48] = v8;
  *v8 = v0;
  v8[1] = closure #2 in ParticipantPresenceCoordinator._makeSharedConnectionSubscriptionTask(with:share:participantHandleMap:);
  return AsyncStream.Iterator.next(isolation:)();
}

{
  uint64_t *v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = ParticipantPresenceStore.participants(_:didLeaveTabGroup:)(v0[70], v0[25], v0[26]);
  v3 = v2;
  v5 = v4;
  v7 = v6;
  swift_bridgeObjectRelease();
  v0[71] = v1;
  v0[72] = v3;
  v0[73] = v5;
  v0[74] = v7;
  return swift_task_switch();
}

{
  uint64_t v0;

  type metadata accessor for MainActor();
  *(_QWORD *)(v0 + 600) = static MainActor.shared.getter();
  dispatch thunk of Actor.unownedExecutor.getter();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 592);
  v2 = *(_QWORD *)(v0 + 584);
  swift_release();
  specialized ParticipantPresenceCoordinator._notifyStoreUpdates(_:)(v2, v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = v0[69];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v2 = v0[50];
  v0[46] = v0[54];
  v0[47] = v2;
  v0[45] = v1;
  v3 = (_QWORD *)swift_task_alloc();
  v0[48] = v3;
  *v3 = v0;
  v3[1] = closure #2 in ParticipantPresenceCoordinator._makeSharedConnectionSubscriptionTask(with:share:participantHandleMap:);
  return AsyncStream.Iterator.next(isolation:)();
}

{
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 456);
  v1 = *(_QWORD *)(v0 + 464);
  swift_bridgeObjectRelease();
  swift_release();
  outlined consume of PresenceUpdateMessage.Kind(v2, v1);
  swift_bridgeObjectRelease();
  return swift_task_switch();
}

{
  _QWORD *v0;
  void *v1;
  id v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  void *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;

  v1 = (void *)v0[66];
  swift_bridgeObjectRetain();
  v2 = v1;
  swift_bridgeObjectRetain();
  v3 = v1;
  v4 = Logger.logObject.getter();
  v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (void *)v0[66];
    v8 = v0[25];
    v7 = v0[26];
    v9 = swift_slowAlloc();
    v20 = (_QWORD *)swift_slowAlloc();
    v21 = swift_slowAlloc();
    v22 = v21;
    *(_DWORD *)v9 = 136446466;
    swift_bridgeObjectRetain();
    v0[22] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v7, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v9 + 12) = 2112;
    v10 = v6;
    v11 = _swift_stdlib_bridgeErrorToNSError();
    v0[23] = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v20 = v11;

    _os_log_impl(&dword_24A3EF000, v4, v5, "Failed to send message to new participants in shared connection for tab group %{public}s, error: %@", (uint8_t *)v9, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x24BD0F964](v20, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x24BD0F964](v21, -1, -1);
    MEMORY[0x24BD0F964](v9, -1, -1);

  }
  else
  {
    v12 = (void *)v0[66];

    swift_bridgeObjectRelease_n();
  }
  v13 = v0[54];
  v14 = v0[46];
  if (*(_QWORD *)(v13 + 16) <= *(_QWORD *)(v14 + 16) >> 3)
  {
    v22 = v0[46];
    swift_bridgeObjectRetain();
    specialized Set._subtract<A>(_:)(v13);
    v15 = v22;
    if (*(_QWORD *)(v22 + 16))
      goto LABEL_6;
  }
  else
  {
    swift_bridgeObjectRetain();
    v15 = specialized _NativeSet.subtracting<A>(_:)(v13, v14);
    if (*(_QWORD *)(v15 + 16))
    {
LABEL_6:
      v0[68] = *(_QWORD *)(v0[28] + v0[44]);
      v16 = specialized Sequence.compactMap<A>(_:)(v15);
      v0[69] = 0;
      swift_bridgeObjectRelease();
      v0[70] = specialized Set.init<A>(_:)(v16);
      swift_bridgeObjectRelease();
      return swift_task_switch();
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v18 = v0[50];
  v0[46] = v0[54];
  v0[47] = v18;
  v0[45] = 0;
  v19 = (_QWORD *)swift_task_alloc();
  v0[48] = v19;
  *v19 = v0;
  v19[1] = closure #2 in ParticipantPresenceCoordinator._makeSharedConnectionSubscriptionTask(with:share:participantHandleMap:);
  return AsyncStream.Iterator.next(isolation:)();
}

uint64_t closure #1 in ParticipantPresenceCoordinator.moveCurrentParticipant(toTab:inTabGroup:withDeviceIdentifier:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v10;
  uint64_t v11;

  v8[32] = v10;
  v8[33] = v11;
  v8[30] = a7;
  v8[31] = a8;
  v8[28] = a5;
  v8[29] = a6;
  v8[27] = a4;
  return swift_task_switch();
}

uint64_t closure #1 in ParticipantPresenceCoordinator.moveCurrentParticipant(toTab:inTabGroup:withDeviceIdentifier:)()
{
  _QWORD *v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v15;
  uint64_t v16;

  v1 = v0[28];
  if (v1 && (v2 = v0[30]) != 0)
  {
    v3 = one-time initialization token for tabGroup;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v3 != -1)
      swift_once();
    v4 = type metadata accessor for Logger();
    __swift_project_value_buffer(v4, (uint64_t)static Logger.tabGroup);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v5 = Logger.logObject.getter();
    v6 = static os_log_type_t.info.getter();
    if (!os_log_type_enabled(v5, v6))
    {

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      goto LABEL_13;
    }
    v15 = v0[29];
    v7 = v0[27];
    v8 = swift_slowAlloc();
    v9 = swift_slowAlloc();
    v16 = v9;
    *(_DWORD *)v8 = 136446466;
    swift_bridgeObjectRetain();
    v0[25] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v1, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v8 + 12) = 2082;
    swift_bridgeObjectRetain();
    v0[26] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v2, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_24A3EF000, v5, v6, "Will move to tab with identifier %{public}s in shared tab group with identifier %{public}s", (uint8_t *)v8, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x24BD0F964](v9, -1, -1);
    v10 = v8;
  }
  else
  {
    if (one-time initialization token for tabGroup != -1)
      swift_once();
    v11 = type metadata accessor for Logger();
    __swift_project_value_buffer(v11, (uint64_t)static Logger.tabGroup);
    v5 = Logger.logObject.getter();
    v12 = static os_log_type_t.info.getter();
    if (!os_log_type_enabled(v5, v12))
      goto LABEL_12;
    v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v13 = 0;
    _os_log_impl(&dword_24A3EF000, v5, v12, "Will leave all shared tab groups", v13, 2u);
    v10 = (uint64_t)v13;
  }
  MEMORY[0x24BD0F964](v10, -1, -1);
LABEL_12:

LABEL_13:
  v0[34] = *(_QWORD *)(v0[31] + OBJC_IVAR____WBParticipantPresenceCoordinator_participantPresenceStore);
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9[2];
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;

  ParticipantPresenceStore.moveCurrentParticipant(toTab:inTabGroup:withDeviceIdentifier:)(*(_QWORD *)(v0 + 216), *(_QWORD *)(v0 + 224), *(_QWORD *)(v0 + 232), *(_QWORD *)(v0 + 240), *(_QWORD *)(v0 + 256), *(_QWORD *)(v0 + 264), v9);
  v1 = v9[0];
  v2 = v9[1];
  *(_QWORD *)(v0 + 280) = v9[0];
  *(_QWORD *)(v0 + 288) = v2;
  v3 = v10;
  v4 = v11;
  *(_QWORD *)(v0 + 296) = v10;
  *(_QWORD *)(v0 + 304) = v4;
  v5 = v12;
  v6 = v13;
  *(_QWORD *)(v0 + 312) = v12;
  *(_QWORD *)(v0 + 320) = v6;
  v7 = v14;
  *(_QWORD *)(v0 + 328) = v14;
  *(_OWORD *)(v0 + 336) = v15;
  *(_QWORD *)(v0 + 72) = v1;
  *(_QWORD *)(v0 + 80) = v2;
  *(_QWORD *)(v0 + 88) = v3;
  *(_QWORD *)(v0 + 96) = v4;
  *(_QWORD *)(v0 + 104) = v5;
  *(_QWORD *)(v0 + 112) = v6;
  *(_QWORD *)(v0 + 120) = v7;
  return swift_task_switch();
}

{
  _QWORD *v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  _BOOL4 v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  BOOL v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint8_t *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  os_log_t log;
  NSObject *loga;
  os_log_t logb;
  uint64_t v54;
  uint64_t v55;
  os_log_type_t type;
  uint64_t v57;

  v1 = v0[43];
  if (v1)
  {
    if (one-time initialization token for tabGroup != -1)
      swift_once();
    v3 = v0[35];
    v2 = v0[36];
    v4 = type metadata accessor for Logger();
    __swift_project_value_buffer(v4, (uint64_t)static Logger.tabGroup);
    swift_bridgeObjectRetain();
    outlined copy of PresenceUpdateMessage.Kind(v3, v2);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined copy of PresenceUpdateMessage.Kind(v3, v2);
    swift_bridgeObjectRetain();
    v5 = Logger.logObject.getter();
    v6 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v5, v6))
    {
      v8 = (void *)v0[41];
      v7 = v0[42];
      v47 = v0[39];
      v54 = v0[36];
      v49 = v0[40];
      log = (os_log_t)v0[35];
      v9 = swift_slowAlloc();
      v10 = swift_slowAlloc();
      v57 = v10;
      *(_DWORD *)v9 = 136446466;
      swift_bridgeObjectRetain();
      v0[23] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v1, &v57);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v9 + 12) = 2082;
      v11 = CRDTGeneration.debugDescription.getter(v47, v49, v8);
      v0[24] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, &v57);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined consume of PresenceUpdateMessage.Kind((uint64_t)log, v54);
      swift_bridgeObjectRelease();
      outlined consume of PresenceUpdateMessage.Kind((uint64_t)log, v54);
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_24A3EF000, v5, v6, "Will send shared connection message to leave shared tab group with identifier %{public}s, generation: %{public}s", (uint8_t *)v9, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x24BD0F964](v10, -1, -1);
      MEMORY[0x24BD0F964](v9, -1, -1);

    }
    else
    {
      v30 = v0[35];
      v29 = v0[36];
      swift_bridgeObjectRelease_n();
      outlined consume of PresenceUpdateMessage.Kind(v30, v29);
      swift_bridgeObjectRelease();
      outlined consume of PresenceUpdateMessage.Kind(v30, v29);

      swift_bridgeObjectRelease();
    }
    v0[44] = *(_QWORD *)(v0[31] + OBJC_IVAR____WBParticipantPresenceCoordinator_connectionManagerStore);
  }
  else
  {
    v13 = v0[36];
    if (v13)
    {
      v14 = v0[38];
      v15 = one-time initialization token for tabGroup;
      swift_bridgeObjectRetain();
      v16 = v13;
      if (v15 != -1)
      {
        swift_once();
        v16 = v0[36];
      }
      v17 = v0[35];
      v18 = type metadata accessor for Logger();
      v0[47] = __swift_project_value_buffer(v18, (uint64_t)static Logger.tabGroup);
      outlined copy of PresenceUpdateMessage.Kind(v17, v16);
      swift_bridgeObjectRetain();
      outlined copy of PresenceUpdateMessage.Kind(v17, v16);
      swift_bridgeObjectRetain();
      outlined copy of PresenceUpdateMessage.Kind(v17, v16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      outlined copy of PresenceUpdateMessage.Kind(v17, v16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v19 = Logger.logObject.getter();
      v20 = static os_log_type_t.info.getter();
      v21 = os_log_type_enabled(v19, v20);
      v22 = (void *)v0[41];
      if (v21)
      {
        v48 = v0[39];
        v50 = v0[40];
        v23 = v0[37];
        type = v20;
        v24 = v0[35];
        v25 = v0[36];
        loga = v19;
        v26 = swift_slowAlloc();
        v55 = swift_slowAlloc();
        *(_DWORD *)v26 = 136446722;
        v57 = v55;
        swift_bridgeObjectRetain();
        v0[19] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v13, &v57);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v26 + 12) = 2082;
        swift_bridgeObjectRetain();
        v0[20] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v14, &v57);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        outlined consume of PresenceUpdateMessage.Kind(v24, v25);
        swift_bridgeObjectRelease();
        outlined consume of PresenceUpdateMessage.Kind(v24, v25);
        swift_bridgeObjectRelease();
        *(_WORD *)(v26 + 22) = 2082;
        v27 = CRDTGeneration.debugDescription.getter(v48, v50, v22);
        v0[21] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v28, &v57);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        outlined consume of PresenceUpdateMessage.Kind(v24, v25);
        swift_bridgeObjectRelease();
        outlined consume of PresenceUpdateMessage.Kind(v24, v25);
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_24A3EF000, loga, type, "Will send shared connection message to join tab group identifier %{public}s in tab %{public}s, generation: %{public}s", (uint8_t *)v26, 0x20u);
        swift_arrayDestroy();
        MEMORY[0x24BD0F964](v55, -1, -1);
        MEMORY[0x24BD0F964](v26, -1, -1);

      }
      else
      {
        v44 = v0[35];
        v43 = v0[36];
        swift_bridgeObjectRelease_n();
        outlined consume of PresenceUpdateMessage.Kind(v44, v43);
        swift_bridgeObjectRelease();
        outlined consume of PresenceUpdateMessage.Kind(v44, v43);
        swift_bridgeObjectRelease();
        outlined consume of PresenceUpdateMessage.Kind(v44, v43);
        swift_bridgeObjectRelease();
        outlined consume of PresenceUpdateMessage.Kind(v44, v43);

        swift_bridgeObjectRelease();
      }
      v0[48] = *(_QWORD *)(v0[31] + OBJC_IVAR____WBParticipantPresenceCoordinator_connectionManagerStore);
    }
    else
    {
      if (one-time initialization token for tabGroup != -1)
        swift_once();
      v31 = v0[35];
      v32 = type metadata accessor for Logger();
      __swift_project_value_buffer(v32, (uint64_t)static Logger.tabGroup);
      outlined copy of PresenceUpdateMessage.Kind(v31, 0);
      swift_bridgeObjectRetain();
      outlined copy of PresenceUpdateMessage.Kind(v31, 0);
      swift_bridgeObjectRetain();
      v33 = Logger.logObject.getter();
      v34 = static os_log_type_t.info.getter();
      v35 = os_log_type_enabled(v33, v34);
      v36 = (void *)v0[41];
      if (v35)
      {
        v37 = v0[39];
        v38 = v0[40];
        logb = (os_log_t)v0[35];
        v39 = (uint8_t *)swift_slowAlloc();
        v40 = swift_slowAlloc();
        v57 = v40;
        *(_DWORD *)v39 = 136446210;
        v41 = CRDTGeneration.debugDescription.getter(v37, v38, v36);
        v0[22] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v41, v42, &v57);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        outlined consume of PresenceUpdateMessage.Kind((uint64_t)logb, 0);
        swift_bridgeObjectRelease();
        outlined consume of PresenceUpdateMessage.Kind((uint64_t)logb, 0);
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_24A3EF000, v33, v34, "Will send personal connection message to leave tab group, generation: %{public}s", v39, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x24BD0F964](v40, -1, -1);
        MEMORY[0x24BD0F964](v39, -1, -1);

      }
      else
      {
        v45 = v0[35];
        outlined consume of PresenceUpdateMessage.Kind(v45, 0);
        swift_bridgeObjectRelease();
        outlined consume of PresenceUpdateMessage.Kind(v45, 0);

        swift_bridgeObjectRelease();
      }
      v0[51] = *(_QWORD *)(v0[31] + OBJC_IVAR____WBParticipantPresenceCoordinator_connectionManagerStore);
    }
  }
  return swift_task_switch();
}

{
  _QWORD *v0;

  v0[45] = ParticipantPresenceCoordinator.ConnectionManagerStore.sharedConnectionManager(forTabGroup:)(v0[42], v0[43]);
  swift_bridgeObjectRelease();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  __int128 v2;
  _QWORD *v3;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  _BOOL4 v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  BOOL v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *log;
  os_log_t loga;
  uint64_t v40;
  os_log_type_t type;
  uint64_t (*v42)(uint64_t);
  uint64_t v43;

  if (*(_QWORD *)(v0 + 360))
  {
    v1 = *(_QWORD *)(v0 + 328);
    *(_OWORD *)(v0 + 16) = 0u;
    v2 = *(_OWORD *)(v0 + 312);
    *(_OWORD *)(v0 + 32) = 0u;
    *(_OWORD *)(v0 + 48) = v2;
    *(_QWORD *)(v0 + 64) = v1;
    v42 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized CollaborationConnectionManager.sendPresenceUpdateMessage(_:)
                                          + async function pointer to specialized CollaborationConnectionManager.sendPresenceUpdateMessage(_:));
    swift_bridgeObjectRetain();
    v3 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 368) = v3;
    *v3 = v0;
    v3[1] = closure #1 in ParticipantPresenceCoordinator.moveCurrentParticipant(toTab:inTabGroup:withDeviceIdentifier:);
    return v42(v0 + 16);
  }
  else
  {
    v5 = *(_QWORD *)(v0 + 288);
    if (v5)
    {
      v6 = *(_QWORD *)(v0 + 304);
      v7 = one-time initialization token for tabGroup;
      swift_bridgeObjectRetain();
      v8 = v5;
      if (v7 != -1)
      {
        swift_once();
        v8 = *(_QWORD *)(v0 + 288);
      }
      v9 = *(_QWORD *)(v0 + 280);
      v10 = type metadata accessor for Logger();
      *(_QWORD *)(v0 + 376) = __swift_project_value_buffer(v10, (uint64_t)static Logger.tabGroup);
      outlined copy of PresenceUpdateMessage.Kind(v9, v8);
      swift_bridgeObjectRetain();
      outlined copy of PresenceUpdateMessage.Kind(v9, v8);
      swift_bridgeObjectRetain();
      outlined copy of PresenceUpdateMessage.Kind(v9, v8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      outlined copy of PresenceUpdateMessage.Kind(v9, v8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v11 = Logger.logObject.getter();
      v12 = static os_log_type_t.info.getter();
      v13 = os_log_type_enabled(v11, v12);
      v14 = *(void **)(v0 + 328);
      if (v13)
      {
        v36 = *(_QWORD *)(v0 + 312);
        v37 = *(_QWORD *)(v0 + 320);
        v15 = *(_QWORD *)(v0 + 296);
        type = v12;
        v16 = *(_QWORD *)(v0 + 280);
        v17 = *(_QWORD *)(v0 + 288);
        log = v11;
        v18 = swift_slowAlloc();
        v40 = swift_slowAlloc();
        *(_DWORD *)v18 = 136446722;
        v43 = v40;
        swift_bridgeObjectRetain();
        *(_QWORD *)(v0 + 152) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v5, &v43);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v18 + 12) = 2082;
        swift_bridgeObjectRetain();
        *(_QWORD *)(v0 + 160) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v6, &v43);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        outlined consume of PresenceUpdateMessage.Kind(v16, v17);
        swift_bridgeObjectRelease();
        outlined consume of PresenceUpdateMessage.Kind(v16, v17);
        swift_bridgeObjectRelease();
        *(_WORD *)(v18 + 22) = 2082;
        v19 = CRDTGeneration.debugDescription.getter(v36, v37, v14);
        *(_QWORD *)(v0 + 168) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, &v43);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        outlined consume of PresenceUpdateMessage.Kind(v16, v17);
        swift_bridgeObjectRelease();
        outlined consume of PresenceUpdateMessage.Kind(v16, v17);
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_24A3EF000, log, type, "Will send shared connection message to join tab group identifier %{public}s in tab %{public}s, generation: %{public}s", (uint8_t *)v18, 0x20u);
        swift_arrayDestroy();
        MEMORY[0x24BD0F964](v40, -1, -1);
        MEMORY[0x24BD0F964](v18, -1, -1);

      }
      else
      {
        v34 = *(_QWORD *)(v0 + 280);
        v33 = *(_QWORD *)(v0 + 288);
        swift_bridgeObjectRelease_n();
        outlined consume of PresenceUpdateMessage.Kind(v34, v33);
        swift_bridgeObjectRelease();
        outlined consume of PresenceUpdateMessage.Kind(v34, v33);
        swift_bridgeObjectRelease();
        outlined consume of PresenceUpdateMessage.Kind(v34, v33);
        swift_bridgeObjectRelease();
        outlined consume of PresenceUpdateMessage.Kind(v34, v33);

        swift_bridgeObjectRelease();
      }
      *(_QWORD *)(v0 + 384) = *(_QWORD *)(*(_QWORD *)(v0 + 248)
                                        + OBJC_IVAR____WBParticipantPresenceCoordinator_connectionManagerStore);
    }
    else
    {
      if (one-time initialization token for tabGroup != -1)
        swift_once();
      v21 = *(_QWORD *)(v0 + 280);
      v22 = type metadata accessor for Logger();
      __swift_project_value_buffer(v22, (uint64_t)static Logger.tabGroup);
      outlined copy of PresenceUpdateMessage.Kind(v21, 0);
      swift_bridgeObjectRetain();
      outlined copy of PresenceUpdateMessage.Kind(v21, 0);
      swift_bridgeObjectRetain();
      v23 = Logger.logObject.getter();
      v24 = static os_log_type_t.info.getter();
      v25 = os_log_type_enabled(v23, v24);
      v26 = *(void **)(v0 + 328);
      if (v25)
      {
        v27 = *(_QWORD *)(v0 + 312);
        v28 = *(_QWORD *)(v0 + 320);
        loga = *(os_log_t *)(v0 + 280);
        v29 = (uint8_t *)swift_slowAlloc();
        v30 = swift_slowAlloc();
        v43 = v30;
        *(_DWORD *)v29 = 136446210;
        v31 = CRDTGeneration.debugDescription.getter(v27, v28, v26);
        *(_QWORD *)(v0 + 176) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, v32, &v43);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        outlined consume of PresenceUpdateMessage.Kind((uint64_t)loga, 0);
        swift_bridgeObjectRelease();
        outlined consume of PresenceUpdateMessage.Kind((uint64_t)loga, 0);
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_24A3EF000, v23, v24, "Will send personal connection message to leave tab group, generation: %{public}s", v29, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x24BD0F964](v30, -1, -1);
        MEMORY[0x24BD0F964](v29, -1, -1);

      }
      else
      {
        v35 = *(_QWORD *)(v0 + 280);
        outlined consume of PresenceUpdateMessage.Kind(v35, 0);
        swift_bridgeObjectRelease();
        outlined consume of PresenceUpdateMessage.Kind(v35, 0);

        swift_bridgeObjectRelease();
      }
      *(_QWORD *)(v0 + 408) = *(_QWORD *)(*(_QWORD *)(v0 + 248)
                                        + OBJC_IVAR____WBParticipantPresenceCoordinator_connectionManagerStore);
    }
    return swift_task_switch();
  }
}

{
  swift_task_dealloc();
  swift_release();
  outlined consume of PresenceUpdateMessage.Kind(0, 0);
  swift_bridgeObjectRelease();
  return swift_task_switch();
}

{
  _QWORD *v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  _BOOL4 v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  BOOL v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  NSObject *log;
  os_log_t loga;
  uint64_t v37;
  os_log_type_t type;
  uint64_t v39;

  v1 = v0[36];
  if (v1)
  {
    v2 = v0[38];
    v3 = one-time initialization token for tabGroup;
    swift_bridgeObjectRetain();
    v4 = v1;
    if (v3 != -1)
    {
      swift_once();
      v4 = v0[36];
    }
    v5 = v0[35];
    v6 = type metadata accessor for Logger();
    v0[47] = __swift_project_value_buffer(v6, (uint64_t)static Logger.tabGroup);
    outlined copy of PresenceUpdateMessage.Kind(v5, v4);
    swift_bridgeObjectRetain();
    outlined copy of PresenceUpdateMessage.Kind(v5, v4);
    swift_bridgeObjectRetain();
    outlined copy of PresenceUpdateMessage.Kind(v5, v4);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined copy of PresenceUpdateMessage.Kind(v5, v4);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v7 = Logger.logObject.getter();
    v8 = static os_log_type_t.info.getter();
    v9 = os_log_type_enabled(v7, v8);
    v10 = (void *)v0[41];
    if (v9)
    {
      v33 = v0[39];
      v34 = v0[40];
      v11 = v0[37];
      type = v8;
      v12 = v0[35];
      v13 = v0[36];
      log = v7;
      v14 = swift_slowAlloc();
      v37 = swift_slowAlloc();
      *(_DWORD *)v14 = 136446722;
      v39 = v37;
      swift_bridgeObjectRetain();
      v0[19] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v1, &v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v14 + 12) = 2082;
      swift_bridgeObjectRetain();
      v0[20] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v2, &v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined consume of PresenceUpdateMessage.Kind(v12, v13);
      swift_bridgeObjectRelease();
      outlined consume of PresenceUpdateMessage.Kind(v12, v13);
      swift_bridgeObjectRelease();
      *(_WORD *)(v14 + 22) = 2082;
      v15 = CRDTGeneration.debugDescription.getter(v33, v34, v10);
      v0[21] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, &v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined consume of PresenceUpdateMessage.Kind(v12, v13);
      swift_bridgeObjectRelease();
      outlined consume of PresenceUpdateMessage.Kind(v12, v13);
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_24A3EF000, log, type, "Will send shared connection message to join tab group identifier %{public}s in tab %{public}s, generation: %{public}s", (uint8_t *)v14, 0x20u);
      swift_arrayDestroy();
      MEMORY[0x24BD0F964](v37, -1, -1);
      MEMORY[0x24BD0F964](v14, -1, -1);

    }
    else
    {
      v30 = v0[35];
      v29 = v0[36];
      swift_bridgeObjectRelease_n();
      outlined consume of PresenceUpdateMessage.Kind(v30, v29);
      swift_bridgeObjectRelease();
      outlined consume of PresenceUpdateMessage.Kind(v30, v29);
      swift_bridgeObjectRelease();
      outlined consume of PresenceUpdateMessage.Kind(v30, v29);
      swift_bridgeObjectRelease();
      outlined consume of PresenceUpdateMessage.Kind(v30, v29);

      swift_bridgeObjectRelease();
    }
    v0[48] = *(_QWORD *)(v0[31] + OBJC_IVAR____WBParticipantPresenceCoordinator_connectionManagerStore);
  }
  else
  {
    if (one-time initialization token for tabGroup != -1)
      swift_once();
    v17 = v0[35];
    v18 = type metadata accessor for Logger();
    __swift_project_value_buffer(v18, (uint64_t)static Logger.tabGroup);
    outlined copy of PresenceUpdateMessage.Kind(v17, 0);
    swift_bridgeObjectRetain();
    outlined copy of PresenceUpdateMessage.Kind(v17, 0);
    swift_bridgeObjectRetain();
    v19 = Logger.logObject.getter();
    v20 = static os_log_type_t.info.getter();
    v21 = os_log_type_enabled(v19, v20);
    v22 = (void *)v0[41];
    if (v21)
    {
      v23 = v0[39];
      v24 = v0[40];
      loga = (os_log_t)v0[35];
      v25 = (uint8_t *)swift_slowAlloc();
      v26 = swift_slowAlloc();
      v39 = v26;
      *(_DWORD *)v25 = 136446210;
      v27 = CRDTGeneration.debugDescription.getter(v23, v24, v22);
      v0[22] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v28, &v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined consume of PresenceUpdateMessage.Kind((uint64_t)loga, 0);
      swift_bridgeObjectRelease();
      outlined consume of PresenceUpdateMessage.Kind((uint64_t)loga, 0);
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_24A3EF000, v19, v20, "Will send personal connection message to leave tab group, generation: %{public}s", v25, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24BD0F964](v26, -1, -1);
      MEMORY[0x24BD0F964](v25, -1, -1);

    }
    else
    {
      v31 = v0[35];
      outlined consume of PresenceUpdateMessage.Kind(v31, 0);
      swift_bridgeObjectRelease();
      outlined consume of PresenceUpdateMessage.Kind(v31, 0);

      swift_bridgeObjectRelease();
    }
    v0[51] = *(_QWORD *)(v0[31] + OBJC_IVAR____WBParticipantPresenceCoordinator_connectionManagerStore);
  }
  return swift_task_switch();
}

{
  _QWORD *v0;

  v0[49] = ParticipantPresenceCoordinator.ConnectionManagerStore.sharedConnectionManager(forTabGroup:)(v0[35], v0[36]);
  return swift_task_switch();
}

{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  _BOOL4 v7;
  void *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *log;
  uint64_t (*type)(uint64_t);
  uint64_t v23;

  if (v0[49])
  {
    type = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized CollaborationConnectionManager.sendPresenceUpdateMessage(_:)
                                           + async function pointer to specialized CollaborationConnectionManager.sendPresenceUpdateMessage(_:));
    v1 = (_QWORD *)swift_task_alloc();
    v0[50] = v1;
    *v1 = v0;
    v1[1] = closure #1 in ParticipantPresenceCoordinator.moveCurrentParticipant(toTab:inTabGroup:withDeviceIdentifier:);
    return type((uint64_t)(v0 + 9));
  }
  else
  {
    v4 = v0[35];
    v3 = v0[36];
    outlined copy of PresenceUpdateMessage.Kind(v4, v3);
    swift_bridgeObjectRetain();
    outlined copy of PresenceUpdateMessage.Kind(v4, v3);
    swift_bridgeObjectRetain();
    outlined copy of PresenceUpdateMessage.Kind(v4, v3);
    swift_bridgeObjectRetain();
    outlined copy of PresenceUpdateMessage.Kind(v4, v3);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v5 = Logger.logObject.getter();
    v6 = static os_log_type_t.info.getter();
    v7 = os_log_type_enabled(v5, v6);
    v8 = (void *)v0[41];
    if (v7)
    {
      v19 = v0[40];
      v18 = v0[39];
      log = v5;
      v10 = v0[37];
      v9 = v0[38];
      v12 = v0[35];
      v11 = v0[36];
      v13 = swift_slowAlloc();
      v20 = swift_slowAlloc();
      v23 = v20;
      *(_DWORD *)v13 = 136446722;
      swift_bridgeObjectRetain();
      v0[16] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v11, &v23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v13 + 12) = 2082;
      swift_bridgeObjectRetain();
      v0[17] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v9, &v23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined consume of PresenceUpdateMessage.Kind(v12, v11);
      swift_bridgeObjectRelease();
      outlined consume of PresenceUpdateMessage.Kind(v12, v11);
      swift_bridgeObjectRelease();
      *(_WORD *)(v13 + 22) = 2082;
      v14 = CRDTGeneration.debugDescription.getter(v18, v19, v8);
      v0[18] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, &v23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined consume of PresenceUpdateMessage.Kind(v12, v11);
      swift_bridgeObjectRelease();
      outlined consume of PresenceUpdateMessage.Kind(v12, v11);
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_24A3EF000, log, v6, "Will send personal connection message to join tab group identifier %{public}s in tab %{public}s, generation: %{public}s", (uint8_t *)v13, 0x20u);
      swift_arrayDestroy();
      MEMORY[0x24BD0F964](v20, -1, -1);
      MEMORY[0x24BD0F964](v13, -1, -1);

    }
    else
    {
      v17 = v0[35];
      v16 = v0[36];
      swift_bridgeObjectRelease_n();
      outlined consume of PresenceUpdateMessage.Kind(v17, v16);
      swift_bridgeObjectRelease();
      outlined consume of PresenceUpdateMessage.Kind(v17, v16);
      swift_bridgeObjectRelease();
      outlined consume of PresenceUpdateMessage.Kind(v17, v16);
      swift_bridgeObjectRelease();
      outlined consume of PresenceUpdateMessage.Kind(v17, v16);
      swift_bridgeObjectRelease();

    }
    v0[51] = *(_QWORD *)(v0[31] + OBJC_IVAR____WBParticipantPresenceCoordinator_connectionManagerStore);
    return swift_task_switch();
  }
}

{
  swift_task_dealloc();
  swift_release();
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *log;
  uint64_t v20;

  v2 = v0[35];
  v1 = v0[36];
  outlined copy of PresenceUpdateMessage.Kind(v2, v1);
  swift_bridgeObjectRetain();
  outlined copy of PresenceUpdateMessage.Kind(v2, v1);
  swift_bridgeObjectRetain();
  outlined copy of PresenceUpdateMessage.Kind(v2, v1);
  swift_bridgeObjectRetain();
  outlined copy of PresenceUpdateMessage.Kind(v2, v1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v3 = Logger.logObject.getter();
  v4 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v15 = (void *)v0[41];
    v16 = v0[39];
    v17 = v0[40];
    log = v3;
    v6 = v0[37];
    v5 = v0[38];
    v8 = v0[35];
    v7 = v0[36];
    v9 = swift_slowAlloc();
    v18 = swift_slowAlloc();
    v20 = v18;
    *(_DWORD *)v9 = 136446722;
    swift_bridgeObjectRetain();
    v0[16] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v7, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v9 + 12) = 2082;
    swift_bridgeObjectRetain();
    v0[17] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v5, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined consume of PresenceUpdateMessage.Kind(v8, v7);
    swift_bridgeObjectRelease();
    outlined consume of PresenceUpdateMessage.Kind(v8, v7);
    swift_bridgeObjectRelease();
    *(_WORD *)(v9 + 22) = 2082;
    v10 = CRDTGeneration.debugDescription.getter(v16, v17, v15);
    v0[18] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined consume of PresenceUpdateMessage.Kind(v8, v7);
    swift_bridgeObjectRelease();
    outlined consume of PresenceUpdateMessage.Kind(v8, v7);
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_24A3EF000, log, v4, "Will send personal connection message to join tab group identifier %{public}s in tab %{public}s, generation: %{public}s", (uint8_t *)v9, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x24BD0F964](v18, -1, -1);
    MEMORY[0x24BD0F964](v9, -1, -1);

  }
  else
  {
    v13 = v0[35];
    v12 = v0[36];
    swift_bridgeObjectRelease_n();
    outlined consume of PresenceUpdateMessage.Kind(v13, v12);
    swift_bridgeObjectRelease();
    outlined consume of PresenceUpdateMessage.Kind(v13, v12);
    swift_bridgeObjectRelease();
    outlined consume of PresenceUpdateMessage.Kind(v13, v12);
    swift_bridgeObjectRelease();
    outlined consume of PresenceUpdateMessage.Kind(v13, v12);
    swift_bridgeObjectRelease();

  }
  v0[51] = *(_QWORD *)(v0[31] + OBJC_IVAR____WBParticipantPresenceCoordinator_connectionManagerStore);
  return swift_task_switch();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 416) = *(_QWORD *)(*(_QWORD *)(v0 + 408) + 112);
  swift_retain();
  return swift_task_switch();
}

{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (*v3)(uint64_t);

  if (*(_QWORD *)(v0 + 416))
  {
    v3 = (uint64_t (*)(uint64_t))((char *)&async function pointer to specialized CollaborationConnectionManager.sendPresenceUpdateMessage(_:)
                                         + async function pointer to specialized CollaborationConnectionManager.sendPresenceUpdateMessage(_:));
    v1 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 424) = v1;
    *v1 = v0;
    v1[1] = closure #1 in ParticipantPresenceCoordinator.moveCurrentParticipant(toTab:inTabGroup:withDeviceIdentifier:);
    return v3(v0 + 72);
  }
  else
  {
    outlined consume of PresenceUpdateMessage.Kind(*(_QWORD *)(v0 + 280), *(_QWORD *)(v0 + 288));
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v3;

  v1 = *v0;
  v3 = *v0;
  swift_task_dealloc();
  swift_release();
  outlined consume of PresenceUpdateMessage.Kind(*(_QWORD *)(v1 + 280), *(_QWORD *)(v1 + 288));
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(void))(v3 + 8))();
}

Swift::Void __swiftcall ParticipantPresenceCoordinator.removeTabGroup(_:)(Swift::String a1)
{
  ParticipantPresenceCoordinator.removeTabGroup(_:)(a1._countAndFlagsBits, (uint64_t)a1._object, (uint64_t)&unk_251BC9870, (uint64_t)&async function pointer to partial apply for closure #1 in ParticipantPresenceCoordinator.removeTabGroup(_:));
}

uint64_t closure #1 in ParticipantPresenceCoordinator.removeTabGroup(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;

  v6[3] = a5;
  v6[4] = a6;
  v6[2] = a4;
  return swift_task_switch();
}

uint64_t closure #1 in ParticipantPresenceCoordinator.removeTabGroup(_:)()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 40) = *(_QWORD *)(*(_QWORD *)(v0 + 16)
                                   + OBJC_IVAR____WBParticipantPresenceCoordinator_participantPresenceStore);
  return swift_task_switch();
}

{
  uint64_t v0;

  ParticipantPresenceStore.removeTabGroup(_:)(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

Swift::Void __swiftcall ParticipantPresenceCoordinator.removeTab(_:)(Swift::String a1)
{
  ParticipantPresenceCoordinator.removeTabGroup(_:)(a1._countAndFlagsBits, (uint64_t)a1._object, (uint64_t)&unk_251BC9898, (uint64_t)&async function pointer to partial apply for closure #1 in ParticipantPresenceCoordinator.removeTab(_:));
}

uint64_t ParticipantPresenceCoordinator.removeTabGroup(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _QWORD *v12;
  id v13;
  uint64_t v15;

  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v10, 1, 1, v11);
  v12 = (_QWORD *)swift_allocObject();
  v12[2] = 0;
  v12[3] = 0;
  v12[4] = v4;
  v12[5] = a1;
  v12[6] = a2;
  v13 = v4;
  swift_bridgeObjectRetain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v10, a4, (uint64_t)v12);
  return swift_release();
}

uint64_t closure #1 in ParticipantPresenceCoordinator.removeTab(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;

  v6[3] = a5;
  v6[4] = a6;
  v6[2] = a4;
  return swift_task_switch();
}

uint64_t closure #1 in ParticipantPresenceCoordinator.removeTab(_:)()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 40) = *(_QWORD *)(*(_QWORD *)(v0 + 16)
                                   + OBJC_IVAR____WBParticipantPresenceCoordinator_participantPresenceStore);
  return swift_task_switch();
}

{
  uint64_t v0;

  ParticipantPresenceStore.removeTab(_:)(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void @objc ParticipantPresenceCoordinator.removeTabGroup(_:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  id v15;
  uint64_t v16;

  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v12 = v11;
  v13 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v9, 1, 1, v13);
  v14 = (_QWORD *)swift_allocObject();
  v14[2] = 0;
  v14[3] = 0;
  v14[4] = a1;
  v14[5] = v10;
  v14[6] = v12;
  v15 = a1;
  swift_bridgeObjectRetain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v9, a5, (uint64_t)v14);
  swift_release();
  swift_bridgeObjectRelease();

}

uint64_t ParticipantPresenceCoordinator.tabGroupIdentifierForParticipant(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[6] = a2;
  v3[7] = v2;
  v3[5] = a1;
  return swift_task_switch();
}

uint64_t ParticipantPresenceCoordinator.tabGroupIdentifierForParticipant(_:)()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 64) = *(_QWORD *)(*(_QWORD *)(v0 + 56)
                                   + OBJC_IVAR____WBParticipantPresenceCoordinator_participantPresenceStore);
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD *)(v0 + 64);
  swift_beginAccess();
  v2 = *(_QWORD *)(v1 + 120);
  if (*(_QWORD *)(v2 + 16))
  {
    v3 = *(_QWORD *)(v0 + 40);
    v4 = *(_QWORD *)(v0 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v5 = specialized __RawDictionaryStorage.find<A>(_:)(v3, v4);
    if ((v6 & 1) != 0)
    {
      v7 = (uint64_t *)(*(_QWORD *)(v2 + 56) + 56 * v5);
      v9 = *v7;
      v8 = v7[1];
      outlined copy of PresenceUpdateMessage.Kind(*v7, v8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v8)
      {
        swift_bridgeObjectRetain();
        outlined consume of PresenceUpdateMessage.Kind(v9, v8);
      }
      else
      {
        outlined consume of PresenceUpdateMessage.Kind(v9, 0);
        v9 = 0;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      v9 = 0;
      v8 = 0;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    v9 = 0;
    v8 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v9, v8);
}

uint64_t @objc closure #1 in ParticipantPresenceCoordinator.tabGroupIdentifierForParticipant(_:)(int a1, void *aBlock, void *a3)
{
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  _QWORD *v9;

  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v7 = v6;
  v3[4] = v6;
  v8 = a3;
  v9 = (_QWORD *)swift_task_alloc();
  v3[5] = v9;
  *v9 = v3;
  v9[1] = @objc closure #1 in ParticipantPresenceCoordinator.tabGroupIdentifierForParticipant(_:);
  v9[6] = v7;
  v9[7] = v8;
  v9[5] = v5;
  return swift_task_switch();
}

uint64_t ParticipantPresenceCoordinator.tabIdentifierForParticipant(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[6] = a2;
  v3[7] = v2;
  v3[5] = a1;
  return swift_task_switch();
}

uint64_t ParticipantPresenceCoordinator.tabIdentifierForParticipant(_:)()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 64) = *(_QWORD *)(*(_QWORD *)(v0 + 56)
                                   + OBJC_IVAR____WBParticipantPresenceCoordinator_participantPresenceStore);
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = *(_QWORD *)(v0 + 64);
  swift_beginAccess();
  v2 = *(_QWORD *)(v1 + 120);
  if (*(_QWORD *)(v2 + 16))
  {
    v3 = *(_QWORD *)(v0 + 40);
    v4 = *(_QWORD *)(v0 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v5 = specialized __RawDictionaryStorage.find<A>(_:)(v3, v4);
    if ((v6 & 1) != 0)
    {
      v7 = (uint64_t *)(*(_QWORD *)(v2 + 56) + 56 * v5);
      v8 = *v7;
      v9 = v7[1];
      v11 = v7[2];
      v10 = v7[3];
      outlined copy of PresenceUpdateMessage.Kind(*v7, v9);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v9)
      {
        swift_bridgeObjectRetain();
        outlined consume of PresenceUpdateMessage.Kind(v8, v9);
      }
      else
      {
        outlined consume of PresenceUpdateMessage.Kind(v8, 0);
        v11 = 0;
        v10 = 0;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      v11 = 0;
      v10 = 0;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    v11 = 0;
    v10 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v11, v10);
}

uint64_t @objc closure #1 in ParticipantPresenceCoordinator.tabIdentifierForParticipant(_:)(int a1, void *aBlock, void *a3)
{
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  _QWORD *v9;

  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v7 = v6;
  v3[4] = v6;
  v8 = a3;
  v9 = (_QWORD *)swift_task_alloc();
  v3[5] = v9;
  *v9 = v3;
  v9[1] = @objc closure #1 in ParticipantPresenceCoordinator.tabIdentifierForParticipant(_:);
  v9[6] = v7;
  v9[7] = v8;
  v9[5] = v5;
  return swift_task_switch();
}

uint64_t @objc closure #1 in ParticipantPresenceCoordinator.tabIdentifierForParticipant(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void (**v9)(_QWORD, _QWORD);

  v5 = *v2;
  v6 = *(void **)(*v2 + 16);
  v7 = *v2;
  swift_task_dealloc();
  swift_bridgeObjectRelease();

  if (a2)
  {
    v8 = (void *)MEMORY[0x24BD0EF2C](a1, a2);
    swift_bridgeObjectRelease();
  }
  else
  {
    v8 = 0;
  }
  v9 = *(void (***)(_QWORD, _QWORD))(v5 + 24);
  ((void (**)(_QWORD, void *))v9)[2](v9, v8);

  _Block_release(v9);
  return (*(uint64_t (**)(void))(v7 + 8))();
}

uint64_t ParticipantPresenceCoordinator.currentLocationIdentifiersForParticipant(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[6] = a2;
  v3[7] = v2;
  v3[5] = a1;
  return swift_task_switch();
}

uint64_t ParticipantPresenceCoordinator.currentLocationIdentifiersForParticipant(_:)()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 64) = *(_QWORD *)(*(_QWORD *)(v0 + 56)
                                   + OBJC_IVAR____WBParticipantPresenceCoordinator_participantPresenceStore);
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = *(_QWORD *)(v0 + 64);
  swift_beginAccess();
  v2 = *(_QWORD *)(v1 + 120);
  if (*(_QWORD *)(v2 + 16))
  {
    v3 = *(_QWORD *)(v0 + 40);
    v4 = *(_QWORD *)(v0 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v5 = specialized __RawDictionaryStorage.find<A>(_:)(v3, v4);
    if ((v6 & 1) != 0)
    {
      v7 = (uint64_t *)(*(_QWORD *)(v2 + 56) + 56 * v5);
      v8 = *v7;
      v9 = v7[1];
      v10 = v7[2];
      v11 = v7[3];
      outlined copy of PresenceUpdateMessage.Kind(*v7, v9);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v9)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        outlined consume of PresenceUpdateMessage.Kind(v8, v9);
      }
      else
      {
        outlined consume of PresenceUpdateMessage.Kind(v8, 0);
        v8 = 0;
        v10 = 0;
        v11 = 0;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      v8 = 0;
      v9 = 0;
      v10 = 0;
      v11 = 0;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v11 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v0 + 8))(v8, v9, v10, v11);
}

uint64_t @objc closure #1 in ParticipantPresenceCoordinator.currentLocationIdentifiersForParticipant(_:)(int a1, void *aBlock, void *a3)
{
  _QWORD *v3;
  uint64_t v5;
  id v6;

  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  v3[4] = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v3[5] = v5;
  v6 = a3;
  return swift_task_switch();
}

uint64_t @objc closure #1 in ParticipantPresenceCoordinator.currentLocationIdentifiersForParticipant(_:)()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 48) = *(_QWORD *)(*(_QWORD *)(v0 + 16)
                                   + OBJC_IVAR____WBParticipantPresenceCoordinator_participantPresenceStore);
  return swift_task_switch();
}

{
  uint64_t v0;
  void *v1;
  uint64_t countAndFlagsBits;
  void *object;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  void (**v8)(_QWORD, _QWORD, _QWORD);
  Swift::tuple_tabGroupIdentifier_String_optional_tabIdentifier_String_optional v10;

  v1 = *(void **)(v0 + 16);
  v10 = ParticipantPresenceStore.locationIdentifiersForParticipant(_:)(*(Swift::String *)(v0 + 32));
  countAndFlagsBits = v10.tabGroupIdentifier.value._countAndFlagsBits;
  object = v10.tabGroupIdentifier.value._object;
  v4 = v10.tabIdentifier.value._countAndFlagsBits;
  v5 = v10.tabIdentifier.value._object;
  swift_bridgeObjectRelease();

  if (!object)
  {
    v6 = 0;
    if (v5)
      goto LABEL_3;
LABEL_5:
    v7 = 0;
    goto LABEL_6;
  }
  v6 = (void *)MEMORY[0x24BD0EF2C](countAndFlagsBits, object);
  if (!v5)
    goto LABEL_5;
LABEL_3:
  v7 = (void *)MEMORY[0x24BD0EF2C](v4, v5);
LABEL_6:
  v8 = *(void (***)(_QWORD, _QWORD, _QWORD))(v0 + 24);
  ((void (**)(_QWORD, void *, void *))v8)[2](v8, v6, v7);

  _Block_release(v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t ParticipantPresenceCoordinator.activeParticipantsInTabGroup(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[6] = a2;
  v3[7] = v2;
  v3[5] = a1;
  return swift_task_switch();
}

uint64_t ParticipantPresenceCoordinator.activeParticipantsInTabGroup(_:)()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 64) = *(_QWORD *)(*(_QWORD *)(v0 + 56)
                                   + OBJC_IVAR____WBParticipantPresenceCoordinator_participantPresenceStore);
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v8;

  v1 = *(_QWORD *)(v0 + 64);
  swift_beginAccess();
  v2 = *(_QWORD *)(v1 + 128);
  v3 = *(_QWORD *)(v2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v3
    && (v4 = specialized __RawDictionaryStorage.find<A>(_:)(*(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48)), (v5 & 1) != 0))
  {
    v6 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v4);
    swift_bridgeObjectRetain();
  }
  else if ((MEMORY[0x24BEE4AF8] & 0xC000000000000000) != 0 && _CocoaArrayWrapper.endIndex.getter())
  {
    specialized Set.init(_nonEmptyArrayLiteral:)(MEMORY[0x24BEE4AF8]);
    v6 = v8;
  }
  else
  {
    v6 = MEMORY[0x24BEE4B08];
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v6);
}

uint64_t @objc closure #1 in ParticipantPresenceCoordinator.activeParticipantsInTabGroup(_:)(int a1, void *aBlock, void *a3)
{
  _QWORD *v3;
  uint64_t v5;
  id v6;

  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  v3[4] = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v3[5] = v5;
  v6 = a3;
  return swift_task_switch();
}

uint64_t @objc closure #1 in ParticipantPresenceCoordinator.activeParticipantsInTabGroup(_:)()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 48) = *(_QWORD *)(*(_QWORD *)(v0 + 16)
                                   + OBJC_IVAR____WBParticipantPresenceCoordinator_participantPresenceStore);
  return swift_task_switch();
}

{
  uint64_t v0;
  void (**v1)(_QWORD, _QWORD);
  void *v2;
  Class isa;

  v1 = *(void (***)(_QWORD, _QWORD))(v0 + 24);
  v2 = *(void **)(v0 + 16);
  ParticipantPresenceStore.activeParticipantsInTabGroup(_:)(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
  swift_bridgeObjectRelease();

  type metadata accessor for CKShareParticipant();
  lazy protocol witness table accessor for type CKShareParticipant and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type CKShareParticipant and conformance NSObject, (uint64_t (*)(uint64_t))type metadata accessor for CKShareParticipant, MEMORY[0x24BEE5BD8]);
  isa = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  ((void (**)(_QWORD, Class))v1)[2](v1, isa);

  _Block_release(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t ParticipantPresenceCoordinator.activeParticipantsInTab(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[6] = a2;
  v3[7] = v2;
  v3[5] = a1;
  return swift_task_switch();
}

uint64_t ParticipantPresenceCoordinator.activeParticipantsInTab(_:)()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 64) = *(_QWORD *)(*(_QWORD *)(v0 + 56)
                                   + OBJC_IVAR____WBParticipantPresenceCoordinator_participantPresenceStore);
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v8;

  v1 = *(_QWORD *)(v0 + 64);
  swift_beginAccess();
  v2 = *(_QWORD *)(v1 + 136);
  v3 = *(_QWORD *)(v2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v3
    && (v4 = specialized __RawDictionaryStorage.find<A>(_:)(*(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48)), (v5 & 1) != 0))
  {
    v6 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v4);
    swift_bridgeObjectRetain();
  }
  else if ((MEMORY[0x24BEE4AF8] & 0xC000000000000000) != 0 && _CocoaArrayWrapper.endIndex.getter())
  {
    specialized Set.init(_nonEmptyArrayLiteral:)(MEMORY[0x24BEE4AF8]);
    v6 = v8;
  }
  else
  {
    v6 = MEMORY[0x24BEE4B08];
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v6);
}

id ParticipantPresenceCoordinator.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

id ParticipantPresenceCoordinator.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

_QWORD *specialized CKShareGroupSessionProvider.init(id:activity:share:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  id v17;
  void *v18;
  id v19;
  id v20;
  uint64_t v21;
  id v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  id v26;
  id v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36[7];

  v6 = v5;
  v12 = type metadata accessor for PresenceSessionInfo();
  MEMORY[0x24BDAC7A8](v12);
  v13 = type metadata accessor for GroupSessionProviderState();
  MEMORY[0x24BDAC7A8](v13);
  (*(void (**)(char *, _QWORD))(v15 + 104))((char *)&v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), *MEMORY[0x24BDD1D78]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<GroupSessionProviderState, Never>);
  swift_allocObject();
  v5[4] = CurrentValueSubject.init(_:)();
  static PresenceSessionInfo.default.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<PresenceSessionInfo, Never>);
  swift_allocObject();
  v5[5] = CurrentValueSubject.init(_:)();
  v5[2] = a1;
  v5[3] = a2;
  v5[7] = a3;
  v5[8] = a4;
  v5[14] = a5;
  swift_bridgeObjectRetain();
  v16 = a5;
  v36[0] = CKShare.members.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<Set<AddressableMember>, Never>);
  swift_allocObject();
  v5[6] = CurrentValueSubject.init(_:)();
  v17 = objc_msgSend(v16, sel_currentUserParticipant);
  if (v17 && (v18 = v17, v19 = CKShareParticipant.handle.getter(), v18, v19))
  {
    v20 = objc_msgSend(v19, sel_normalizedValue);
    if (!v20)
      v20 = objc_msgSend(v19, sel_value);
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    v36[3] = type metadata accessor for AddressableMember();
    v36[4] = lazy protocol witness table accessor for type CKShareParticipant and conformance NSObject(&lazy protocol witness table cache variable for type AddressableMember and conformance AddressableMember, (uint64_t (*)(uint64_t))MEMORY[0x24BDD1FA8], MEMORY[0x24BDD1FA0]);
    __swift_allocate_boxed_opaque_existential_1(v36);
    AddressableMember.init(handle:)();
    swift_bridgeObjectRelease();

    outlined init with take of ParticipantPresenceCoordinator.ConnectionManagerStore.SharedConnection?((uint64_t)v36, (uint64_t)(v6 + 9), &demangling cache variable for type metadata for Member?);
  }
  else
  {
    if (one-time initialization token for tabGroup != -1)
      swift_once();
    v35 = a4;
    v21 = type metadata accessor for Logger();
    __swift_project_value_buffer(v21, (uint64_t)static Logger.tabGroup);
    v22 = v16;
    v23 = Logger.logObject.getter();
    v24 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v23, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc();
      v34 = swift_slowAlloc();
      v36[0] = v34;
      *(_DWORD *)v25 = 136315138;
      v26 = objc_msgSend(v22, sel_recordID, v25 + 4);
      v27 = objc_msgSend(v26, sel_ckShortDescription);

      v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v30 = v29;

      v36[6] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v30, v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_24A3EF000, v23, v24, "Share %s does not have a currentUserParticipant", v25, 0xCu);
      v31 = v34;
      swift_arrayDestroy();
      MEMORY[0x24BD0F964](v31, -1, -1);
      MEMORY[0x24BD0F964](v25, -1, -1);

    }
    else
    {

    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CKShareGroupSessionProvider<CKShareCollaborationActivity>.Errors);
    lazy protocol witness table accessor for type CKShareGroupSessionProvider<CKShareCollaborationActivity> and conformance CKShareGroupSessionProvider<A>(&lazy protocol witness table cache variable for type CKShareGroupSessionProvider<CKShareCollaborationActivity>.Errors and conformance CKShareGroupSessionProvider<A>.Errors, &demangling cache variable for type metadata for CKShareGroupSessionProvider<CKShareCollaborationActivity>.Errors, (uint64_t)&protocol conformance descriptor for CKShareGroupSessionProvider<A>.Errors);
    swift_allocError();
    swift_willThrow();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CKShareGroupSessionProvider<CKShareCollaborationActivity>);
    swift_deallocPartialClassInstance();
  }
  return v6;
}

uint64_t specialized GroupSession.JoinState.join(resuming:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD aBlock[8];

  v37 = a4;
  v38 = a5;
  v36 = a3;
  v42 = a1;
  v39 = type metadata accessor for DispatchWorkItemFlags();
  MEMORY[0x24BDAC7A8](v39);
  v40 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  v9 = *(_QWORD *)(v41 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  MEMORY[0x24BDAC7A8](v41);
  v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(a2);
  v13 = MEMORY[0x24BDAC7A8](v12);
  v15 = (uint64_t *)((char *)&v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v13);
  v17 = (uint64_t *)((char *)&v31 - v16);
  v34 = v5;
  v35 = a2;
  outlined init with copy of TaskPriority?(v5, (uint64_t)&v31 - v16, a2);
  v33 = v12;
  result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result)
  {
    if ((_DWORD)result == 2)
    {
      v19 = type metadata accessor for CancellationError();
      lazy protocol witness table accessor for type CKShareParticipant and conformance NSObject(&lazy protocol witness table cache variable for type CancellationError and conformance CancellationError, (uint64_t (*)(uint64_t))MEMORY[0x24BEE6838], MEMORY[0x24BEE6848]);
      swift_allocError();
      CancellationError.init()();
      swift_willThrow();
      return v19;
    }
    __break(1u);
    goto LABEL_9;
  }
  v31 = v6;
  v20 = *v17;
  v21 = swift_allocObject();
  *(_QWORD *)(v21 + 16) = 0;
  v22 = (uint64_t *)(v21 + 16);
  v23 = v41;
  v32 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v32((char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v42, v41);
  v24 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v25 = swift_allocObject();
  *(_QWORD *)(v25 + 16) = v21;
  *(_QWORD *)(v25 + 24) = v20;
  (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))(v25 + v24, v11, v23);
  aBlock[4] = v37;
  aBlock[5] = v25;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = v38;
  _Block_copy(aBlock);
  aBlock[7] = MEMORY[0x24BEE4AF8];
  lazy protocol witness table accessor for type CKShareParticipant and conformance NSObject(&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
  swift_retain();
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type CKShareGroupSessionProvider<CKShareCollaborationActivity> and conformance CKShareGroupSessionProvider<A>(&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x24BEE12C8]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  type metadata accessor for DispatchWorkItem();
  swift_allocObject();
  v26 = DispatchWorkItem.init(flags:block:)();
  swift_release();
  swift_beginAccess();
  *(_QWORD *)(v21 + 16) = v26;
  result = swift_release();
  v27 = *(_QWORD *)(v21 + 16);
  if (!v27)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v28 = (char *)v15
      + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DispatchWorkItem, CheckedContinuation<(), Error>))
               + 48);
  swift_retain();
  v30 = v34;
  v29 = v35;
  outlined destroy of TaskPriority?(v34, v35);
  *v15 = v27;
  v32(v28, v42, v41);
  swift_storeEnumTagMultiPayload();
  result = outlined init with take of ParticipantPresenceCoordinator.ConnectionManagerStore.SharedConnection?((uint64_t)v15, v30, v29);
  v19 = *v22;
  if (*v22)
  {
    swift_retain();
    swift_release();
    swift_release();
    return v19;
  }
LABEL_10:
  __break(1u);
  return result;
}

void specialized closure #1 in GroupSession.JoinState.join(resuming:)(uint64_t a1)
{
  _QWORD *v2;
  char v3;
  char v4;

  v2 = (_QWORD *)(a1 + 16);
  swift_beginAccess();
  if (!*(_QWORD *)(a1 + 16))
  {
    __break(1u);
    goto LABEL_9;
  }
  swift_retain();
  v3 = dispatch thunk of DispatchWorkItem.isCancelled.getter();
  swift_release();
  if ((v3 & 1) != 0)
    return;
  GroupSession.join()();
  swift_beginAccess();
  if (!*v2)
  {
LABEL_9:
    __break(1u);
    return;
  }
  swift_retain();
  v4 = dispatch thunk of DispatchWorkItem.isCancelled.getter();
  swift_release();
  if ((v4 & 1) != 0)
  {
    GroupSession.leave()();
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
    CheckedContinuation.resume(returning:)();
  }
}

uint64_t specialized closure #1 in GroupSession.join(on:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  return swift_task_switch();
}

{
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  return swift_task_switch();
}

uint64_t specialized closure #1 in GroupSession.join(on:)()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = swift_task_alloc();
  *(_QWORD *)(v0 + 40) = v1;
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 24);
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 48) = v2;
  *v2 = v0;
  v2[1] = specialized closure #1 in GroupSession.join(on:);
  return withCheckedThrowingContinuation<A>(isolation:function:_:)();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 56) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = swift_task_alloc();
  *(_QWORD *)(v0 + 40) = v1;
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 24);
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 48) = v2;
  *v2 = v0;
  v2[1] = specialized closure #1 in GroupSession.join(on:);
  return withCheckedThrowingContinuation<A>(isolation:function:_:)();
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 56) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t specialized closure #1 in closure #1 in GroupSession.join(on:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  os_unfair_lock_s *v12;

  v12 = (os_unfair_lock_s *)(a2 + ((*(unsigned int *)(*(_QWORD *)a2 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v12);
  specialized GroupSession.JoinState.join(resuming:)(a1, a4, a5, a6, a7);
  os_unfair_lock_unlock(v12);
  swift_retain();
  OS_dispatch_queue.async(execute:)();
  return swift_release_n();
}

void specialized closure #2 in GroupSession.join(on:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  os_unfair_lock_s *v4;

  v3 = a1 + *(_QWORD *)(*MEMORY[0x24BEE27A8] + *(_QWORD *)a1 + 16);
  v4 = (os_unfair_lock_s *)(a1 + ((*(unsigned int *)(*(_QWORD *)a1 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v4);
  specialized closure #1 in closure #2 in GroupSession.join(on:)(v3, a2);
  os_unfair_lock_unlock(v4);
}

uint64_t specialized closure #1 in closure #2 in GroupSession.join(on:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[2];

  v4 = __swift_instantiateConcreteTypeFromMangledName(a2);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with take of ParticipantPresenceCoordinator.ConnectionManagerStore.SharedConnection?(a1, (uint64_t)v6, a2);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DispatchWorkItem, CheckedContinuation<(), Error>));
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, &v6[*(int *)(v11 + 48)], v7);
    dispatch thunk of DispatchWorkItem.cancel()();
    type metadata accessor for CancellationError();
    lazy protocol witness table accessor for type CKShareParticipant and conformance NSObject(&lazy protocol witness table cache variable for type CancellationError and conformance CancellationError, (uint64_t (*)(uint64_t))MEMORY[0x24BEE6838], MEMORY[0x24BEE6848]);
    v12 = swift_allocError();
    CancellationError.init()();
    v14[1] = v12;
    CheckedContinuation.resume(throwing:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }
  else
  {
    outlined destroy of TaskPriority?((uint64_t)v6, a2);
  }
  return swift_storeEnumTagMultiPayload();
}

uint64_t specialized closure #1 in GroupSession.leave(on:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD aBlock[6];

  v22 = a5;
  v23 = a6;
  v21 = a4;
  v27 = a2;
  v8 = type metadata accessor for DispatchWorkItemFlags();
  v26 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS();
  v24 = *(_QWORD *)(v11 - 8);
  v25 = v11;
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Never>);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(_QWORD *)(v15 + 64);
  MEMORY[0x24BDAC7A8](v14);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))((char *)&v21 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v14);
  v17 = (*(unsigned __int8 *)(v15 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  v18 = swift_allocObject();
  *(_QWORD *)(v18 + 16) = a3;
  (*(void (**)(unint64_t, char *, uint64_t))(v15 + 32))(v18 + v17, (char *)&v21 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0), v14);
  aBlock[4] = v22;
  aBlock[5] = v18;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = v23;
  v19 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v28 = MEMORY[0x24BEE4AF8];
  lazy protocol witness table accessor for type CKShareParticipant and conformance NSObject(&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x24BEE5458], MEMORY[0x24BEE5468]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type CKShareGroupSessionProvider<CKShareCollaborationActivity> and conformance CKShareGroupSessionProvider<A>(&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x24BEE12C8]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x24BD0F13C](0, v13, v10, v19);
  _Block_release(v19);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v10, v8);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v13, v25);
  return swift_release();
}

uint64_t specialized closure #1 in closure #1 in GroupSession.leave(on:)()
{
  GroupSession.leave()();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Never>);
  return CheckedContinuation.resume(returning:)();
}

uint64_t thunk for @escaping @callee_guaranteed () -> ()(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  v2 = swift_retain();
  v1(v2);
  return swift_release();
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TQ0_;
  return v6(a1);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TQ0_()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t _sIeghH_IeAgH_TR(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(void);

  v6 = (uint64_t (*)(void))((char *)a3 + *a3);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v4;
  *v4 = v3;
  v4[1] = specialized closure #3 in closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:);
  return v6();
}

uint64_t _sIeAgH_ytIeAgHr_TR(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t (*v7)(void);

  v7 = (uint64_t (*)(void))((char *)a4 + *a4);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v5;
  *v5 = v4;
  v5[1] = specialized closure #3 in closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:);
  return v7();
}

uint64_t _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgmq5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = type metadata accessor for TaskPriority();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(_QWORD *)(a3 + 16))
      goto LABEL_5;
    goto LABEL_3;
  }
  outlined destroy of TaskPriority?(a1, &demangling cache variable for type metadata for TaskPriority?);
  if (*(_QWORD *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = a2;
  *(_QWORD *)(v8 + 24) = a3;
  return swift_task_create();
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5TQ0_;
  return v6(a1);
}

uint64_t _StringGuts._allocateForDeconstruct()(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v2 + 16) + 1, 1, (char *)v2);
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if (v4 >= v3 >> 1)
    v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v3 > 1, v4 + 1, 1, (char *)v2);
  *(_QWORD *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  char v6;
  uint64_t result;

  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_10;
  if ((a2 & 0x2000000000000000) != 0)
    v2 = HIBYTE(a2) & 0xF;
  else
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (v2)
  {
    while (1)
    {
      v3 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v2, 0);
      if (v2 < 0)
        break;
      v4 = v3;
      v5 = _StringGuts.copyUTF8(into:)();
      if ((v6 & 1) != 0)
        goto LABEL_14;
      if (v5 == v2)
        return (uint64_t)v4;
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_10:
      v2 = String.UTF8View._foreignCount()();
      if (!v2)
        return MEMORY[0x24BEE4AF8];
    }
    _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
LABEL_14:
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return MEMORY[0x24BEE4AF8];
  }
  return result;
}

_QWORD *specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  size_t v5;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
  v4 = (_QWORD *)swift_allocObject();
  v5 = _swift_stdlib_malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v8])
      memmove(v12, v13, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1, uint64_t a2)
{
  Swift::Int v4;

  Hasher.init(_seed:)();
  String.hash(into:)();
  v4 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, v4);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  BOOL v11;
  uint64_t v12;
  _QWORD *v13;
  BOOL v14;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      v12 = ~v5;
      do
      {
        v6 = (v6 + 1) & v12;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v13 = (_QWORD *)(v9 + 16 * v6);
        v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }
  return v6;
}

void *specialized _NativeDictionary.copy()()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  _QWORD *v22;
  id v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, ParticipantHandleMap.ParticipantKind>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v24 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v24 >= v13)
      goto LABEL_26;
    v25 = *(_QWORD *)(v6 + 8 * v24);
    ++v9;
    if (!v25)
    {
      v9 = v24 + 1;
      if (v24 + 1 >= v13)
        goto LABEL_26;
      v25 = *(_QWORD *)(v6 + 8 * v9);
      if (!v25)
        break;
    }
LABEL_25:
    v12 = (v25 - 1) & v25;
    v15 = __clz(__rbit64(v25)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = *v17;
    v19 = v17[1];
    v20 = 8 * v15;
    v21 = *(void **)(*(_QWORD *)(v2 + 56) + v20);
    v22 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v22 = v18;
    v22[1] = v19;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v20) = v21;
    v23 = v21;
    result = (void *)swift_bridgeObjectRetain();
  }
  v26 = v24 + 2;
  if (v26 >= v13)
    goto LABEL_26;
  v25 = *(_QWORD *)(v6 + 8 * v26);
  if (v25)
  {
    v9 = v26;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v25 = *(_QWORD *)(v6 + 8 * v9);
    ++v26;
    if (v25)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  id v27;
  int64_t v28;
  unint64_t v29;
  int64_t v30;
  __int128 v31;
  __int128 v32;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, ParticipantPresenceCoordinator.ConnectionManagerStore.SharedConnection>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  v5 = *(_QWORD *)(v2 + 16);
  if (!v5)
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v7 = v2 + 64;
  v8 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v8)
  {
    result = memmove(result, (const void *)(v2 + 64), 8 * v8);
    v5 = *(_QWORD *)(v2 + 16);
  }
  v10 = 0;
  *(_QWORD *)(v4 + 16) = v5;
  v11 = 1 << *(_BYTE *)(v2 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v2 + 64);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v28 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v28 >= v14)
      goto LABEL_26;
    v29 = *(_QWORD *)(v7 + 8 * v28);
    ++v10;
    if (!v29)
    {
      v10 = v28 + 1;
      if (v28 + 1 >= v14)
        goto LABEL_26;
      v29 = *(_QWORD *)(v7 + 8 * v10);
      if (!v29)
        break;
    }
LABEL_25:
    v13 = (v29 - 1) & v29;
    v16 = __clz(__rbit64(v29)) + (v10 << 6);
LABEL_12:
    v17 = 16 * v16;
    v18 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v16);
    v20 = *v18;
    v19 = v18[1];
    v21 = 48 * v16;
    v22 = *(_QWORD *)(v2 + 56) + v21;
    v23 = *(_QWORD *)v22;
    v24 = *(_QWORD *)(v22 + 40);
    v25 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v17);
    v31 = *(_OWORD *)(v22 + 8);
    v32 = *(_OWORD *)(v22 + 24);
    *v25 = v20;
    v25[1] = v19;
    v26 = *(_QWORD *)(v4 + 56) + v21;
    *(_QWORD *)v26 = v23;
    *(_OWORD *)(v26 + 8) = v31;
    *(_OWORD *)(v26 + 24) = v32;
    *(_QWORD *)(v26 + 40) = v24;
    swift_bridgeObjectRetain();
    v27 = (id)v31;
    swift_retain();
    swift_retain();
    result = (void *)swift_bridgeObjectRetain();
  }
  v30 = v28 + 2;
  if (v30 >= v14)
    goto LABEL_26;
  v29 = *(_QWORD *)(v7 + 8 * v30);
  if (v29)
  {
    v10 = v30;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = v30 + 1;
    if (__OFADD__(v30, 1))
      break;
    if (v10 >= v14)
      goto LABEL_26;
    v29 = *(_QWORD *)(v7 + 8 * v10);
    ++v30;
    if (v29)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Int>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      v9 = v23 + 1;
      if (v23 + 1 >= v13)
        goto LABEL_26;
      v24 = *(_QWORD *)(v6 + 8 * v9);
      if (!v24)
        break;
    }
LABEL_25:
    v12 = (v24 - 1) & v24;
    v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 8 * v15;
    v21 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v20);
    v22 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v22 = v19;
    v22[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v20) = v21;
    result = (void *)swift_bridgeObjectRetain();
  }
  v25 = v23 + 2;
  if (v25 >= v13)
    goto LABEL_26;
  v24 = *(_QWORD *)(v6 + 8 * v25);
  if (v24)
  {
    v9 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v9);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Set<CKShareParticipant>>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = v17[1];
    v19 = 8 * v15;
    v20 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v19);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = *v17;
    v21[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    result = (void *)swift_bridgeObjectRetain();
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *result;
  uint64_t v5;
  unint64_t v6;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  __int128 v27;
  uint64_t v28;
  int64_t v29;
  unint64_t v30;
  int64_t v31;
  uint64_t *v32;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, PresenceUpdateMessage>);
  v32 = v0;
  v1 = *v0;
  v2 = static _DictionaryStorage.copy(original:)();
  v3 = v2;
  if (!*(_QWORD *)(v1 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v32 = v3;
    return result;
  }
  result = (void *)(v2 + 64);
  v5 = v1 + 64;
  v6 = (unint64_t)((1 << *(_BYTE *)(v3 + 32)) + 63) >> 6;
  if (v3 != v1 || (unint64_t)result >= v1 + 64 + 8 * v6)
    result = memmove(result, (const void *)(v1 + 64), 8 * v6);
  v8 = 0;
  *(_QWORD *)(v3 + 16) = *(_QWORD *)(v1 + 16);
  v9 = 1 << *(_BYTE *)(v1 + 32);
  v10 = -1;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  v11 = v10 & *(_QWORD *)(v1 + 64);
  v12 = (unint64_t)(v9 + 63) >> 6;
  while (1)
  {
    if (v11)
    {
      v13 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v14 = v13 | (v8 << 6);
      goto LABEL_12;
    }
    v29 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v29 >= v12)
      goto LABEL_26;
    v30 = *(_QWORD *)(v5 + 8 * v29);
    ++v8;
    if (!v30)
    {
      v8 = v29 + 1;
      if (v29 + 1 >= v12)
        goto LABEL_26;
      v30 = *(_QWORD *)(v5 + 8 * v8);
      if (!v30)
        break;
    }
LABEL_25:
    v11 = (v30 - 1) & v30;
    v14 = __clz(__rbit64(v30)) + (v8 << 6);
LABEL_12:
    v15 = 16 * v14;
    v16 = (uint64_t *)(*(_QWORD *)(v1 + 48) + 16 * v14);
    v18 = *v16;
    v17 = v16[1];
    v19 = 56 * v14;
    v20 = *(_QWORD *)(v1 + 56) + v19;
    v21 = *(_QWORD *)v20;
    v22 = *(_QWORD *)(v20 + 8);
    v23 = *(_QWORD *)(v20 + 16);
    v24 = *(_QWORD *)(v20 + 40);
    v25 = *(_QWORD *)(v20 + 48);
    v26 = (_QWORD *)(*(_QWORD *)(v3 + 48) + v15);
    v27 = *(_OWORD *)(v20 + 24);
    *v26 = v18;
    v26[1] = v17;
    v28 = *(_QWORD *)(v3 + 56) + v19;
    *(_QWORD *)v28 = v21;
    *(_QWORD *)(v28 + 8) = v22;
    *(_QWORD *)(v28 + 16) = v23;
    *(_OWORD *)(v28 + 24) = v27;
    *(_QWORD *)(v28 + 40) = v24;
    *(_QWORD *)(v28 + 48) = v25;
    swift_bridgeObjectRetain();
    outlined copy of PresenceUpdateMessage.Kind(v21, v22);
    result = (void *)swift_bridgeObjectRetain();
  }
  v31 = v29 + 2;
  if (v31 >= v12)
    goto LABEL_26;
  v30 = *(_QWORD *)(v5 + 8 * v31);
  if (v30)
  {
    v8 = v31;
    goto LABEL_25;
  }
  while (1)
  {
    v8 = v31 + 1;
    if (__OFADD__(v31, 1))
      break;
    if (v8 >= v12)
      goto LABEL_26;
    v30 = *(_QWORD *)(v5 + 8 * v8);
    ++v31;
    if (v30)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

id specialized _NativeDictionary.copy()()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  _QWORD *v23;
  _QWORD *v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, (share: CKShare, count: Int)>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (id)swift_release();
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v25 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v25 >= v13)
      goto LABEL_26;
    v26 = *(_QWORD *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      v9 = v25 + 1;
      if (v25 + 1 >= v13)
        goto LABEL_26;
      v26 = *(_QWORD *)(v6 + 8 * v9);
      if (!v26)
        break;
    }
LABEL_25:
    v12 = (v26 - 1) & v26;
    v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + v16);
    v19 = *v17;
    v18 = v17[1];
    v20 = *(_QWORD *)(v2 + 56) + v16;
    v22 = *(void **)v20;
    v21 = *(_QWORD *)(v20 + 8);
    v23 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v23 = v19;
    v23[1] = v18;
    v24 = (_QWORD *)(*(_QWORD *)(v4 + 56) + v16);
    *v24 = v22;
    v24[1] = v21;
    swift_bridgeObjectRetain();
    result = v22;
  }
  v27 = v25 + 2;
  if (v27 >= v13)
    goto LABEL_26;
  v26 = *(_QWORD *)(v6 + 8 * v27);
  if (v26)
  {
    v9 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v26 = *(_QWORD *)(v6 + 8 * v9);
    ++v27;
    if (v26)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, CKShareParticipant>);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (id)swift_release();
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = v17[1];
    v19 = 8 * v15;
    v20 = *(void **)(*(_QWORD *)(v2 + 56) + v19);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = *v17;
    v21[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    result = v20;
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  id v33;
  uint64_t v34;
  uint64_t *v35;
  int64_t v36;
  uint64_t v37;
  char v38;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, ParticipantHandleMap.ParticipantKind>);
  v38 = a2;
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v37 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v35 = v2;
  v36 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v36)
      break;
    v22 = (_QWORD *)(v5 + 64);
    v23 = *(_QWORD *)(v37 + 8 * v21);
    ++v13;
    if (!v23)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v36)
        goto LABEL_33;
      v23 = *(_QWORD *)(v37 + 8 * v13);
      if (!v23)
      {
        v24 = v21 + 2;
        if (v24 >= v36)
        {
LABEL_33:
          swift_release();
          v3 = v35;
          if ((v38 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v23 = *(_QWORD *)(v37 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            v13 = v24 + 1;
            if (__OFADD__(v24, 1))
              goto LABEL_42;
            if (v13 >= v36)
              goto LABEL_33;
            v23 = *(_QWORD *)(v37 + 8 * v13);
            ++v24;
            if (v23)
              goto LABEL_30;
          }
        }
        v13 = v24;
      }
    }
LABEL_30:
    v10 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    v29 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v20);
    v31 = *v29;
    v30 = v29[1];
    v32 = *(void **)(*(_QWORD *)(v5 + 56) + 8 * v20);
    if ((v38 & 1) == 0)
    {
      v33 = v32;
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    result = Hasher._finalize()();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v27 = v16 == v26;
        if (v16 == v26)
          v16 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v17);
    *v18 = v31;
    v18[1] = v30;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v17) = v32;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v35;
  v22 = (_QWORD *)(v5 + 64);
  if ((v38 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v34 = 1 << *(_BYTE *)(v5 + 32);
  if (v34 >= 64)
    bzero(v22, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v34;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  uint64_t *v38;
  int64_t v39;
  uint64_t v40;
  char v41;
  __int128 v42;
  __int128 v43;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, ParticipantPresenceCoordinator.ConnectionManagerStore.SharedConnection>);
  v41 = a2;
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v40 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v38 = v2;
  v39 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v21 = v20 | (v13 << 6);
      goto LABEL_31;
    }
    v22 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v39)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v40 + 8 * v22);
    ++v13;
    if (!v24)
    {
      v13 = v22 + 1;
      if (v22 + 1 >= v39)
        goto LABEL_33;
      v24 = *(_QWORD *)(v40 + 8 * v13);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v39)
        {
LABEL_33:
          swift_release();
          v3 = v38;
          if ((v41 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v24 = *(_QWORD *)(v40 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v13 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_42;
            if (v13 >= v39)
              goto LABEL_33;
            v24 = *(_QWORD *)(v40 + 8 * v13);
            ++v25;
            if (v24)
              goto LABEL_30;
          }
        }
        v13 = v25;
      }
    }
LABEL_30:
    v10 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v13 << 6);
LABEL_31:
    v30 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
    v32 = *v30;
    v31 = v30[1];
    v33 = *(_QWORD *)(v5 + 56) + 48 * v21;
    v34 = *(_QWORD *)v33;
    v42 = *(_OWORD *)(v33 + 24);
    v43 = *(_OWORD *)(v33 + 8);
    v35 = *(_QWORD *)(v33 + 40);
    if ((v41 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      v36 = (id)v43;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    result = Hasher._finalize()();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v28 = v16 == v27;
        if (v16 == v27)
          v16 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v29 == -1);
      v17 = __clz(__rbit64(~v29)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v17);
    *v18 = v32;
    v18[1] = v31;
    v19 = *(_QWORD *)(v7 + 56) + 48 * v17;
    *(_QWORD *)v19 = v34;
    *(_OWORD *)(v19 + 8) = v43;
    *(_OWORD *)(v19 + 24) = v42;
    *(_QWORD *)(v19 + 40) = v35;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v38;
  v23 = (_QWORD *)(v5 + 64);
  if ((v41 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v37 = 1 << *(_BYTE *)(v5 + 32);
  if (v37 >= 64)
    bzero(v23, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v37;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  id v38;
  uint64_t v39;
  uint64_t *v40;
  int64_t v41;
  uint64_t v42;
  char v43;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, (share: CKShare, count: Int)>);
  v43 = a2;
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v42 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v40 = v2;
  v41 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v21 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v22 = v21 | (v13 << 6);
      goto LABEL_31;
    }
    v23 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v23 >= v41)
      break;
    v24 = (_QWORD *)(v5 + 64);
    v25 = *(_QWORD *)(v42 + 8 * v23);
    ++v13;
    if (!v25)
    {
      v13 = v23 + 1;
      if (v23 + 1 >= v41)
        goto LABEL_33;
      v25 = *(_QWORD *)(v42 + 8 * v13);
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v41)
        {
LABEL_33:
          swift_release();
          v3 = v40;
          if ((v43 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v25 = *(_QWORD *)(v42 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            v13 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_42;
            if (v13 >= v41)
              goto LABEL_33;
            v25 = *(_QWORD *)(v42 + 8 * v13);
            ++v26;
            if (v25)
              goto LABEL_30;
          }
        }
        v13 = v26;
      }
    }
LABEL_30:
    v10 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v13 << 6);
LABEL_31:
    v31 = 16 * v22;
    v32 = (uint64_t *)(*(_QWORD *)(v5 + 48) + v31);
    v34 = *v32;
    v33 = v32[1];
    v35 = *(_QWORD *)(v5 + 56) + v31;
    v37 = *(void **)v35;
    v36 = *(_QWORD *)(v35 + 8);
    if ((v43 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      v38 = v37;
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    result = Hasher._finalize()();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v29 = v16 == v28;
        if (v16 == v28)
          v16 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v30 == -1);
      v17 = __clz(__rbit64(~v30)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = 16 * v17;
    v19 = (_QWORD *)(*(_QWORD *)(v7 + 48) + v18);
    *v19 = v34;
    v19[1] = v33;
    v20 = (_QWORD *)(*(_QWORD *)(v7 + 56) + v18);
    *v20 = v37;
    v20[1] = v36;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v40;
  v24 = (_QWORD *)(v5 + 64);
  if ((v43 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v39 = 1 << *(_BYTE *)(v5 + 32);
  if (v39 >= 64)
    bzero(v24, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v39;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  int64_t v35;
  uint64_t v36;
  char v37;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Int>);
  v37 = a2;
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v36 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v34 = v2;
  v35 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v35)
      break;
    v22 = (_QWORD *)(v5 + 64);
    v23 = *(_QWORD *)(v36 + 8 * v21);
    ++v13;
    if (!v23)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v35)
        goto LABEL_33;
      v23 = *(_QWORD *)(v36 + 8 * v13);
      if (!v23)
      {
        v24 = v21 + 2;
        if (v24 >= v35)
        {
LABEL_33:
          swift_release();
          v3 = v34;
          if ((v37 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v23 = *(_QWORD *)(v36 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            v13 = v24 + 1;
            if (__OFADD__(v24, 1))
              goto LABEL_42;
            if (v13 >= v35)
              goto LABEL_33;
            v23 = *(_QWORD *)(v36 + 8 * v13);
            ++v24;
            if (v23)
              goto LABEL_30;
          }
        }
        v13 = v24;
      }
    }
LABEL_30:
    v10 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    v29 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v20);
    v31 = *v29;
    v30 = v29[1];
    v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v20);
    if ((v37 & 1) == 0)
      swift_bridgeObjectRetain();
    Hasher.init(_seed:)();
    String.hash(into:)();
    result = Hasher._finalize()();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v27 = v16 == v26;
        if (v16 == v26)
          v16 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v17);
    *v18 = v31;
    v18[1] = v30;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v17) = v32;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v34;
  v22 = (_QWORD *)(v5 + 64);
  if ((v37 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v33 = 1 << *(_BYTE *)(v5 + 32);
  if (v33 >= 64)
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v33;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  id v33;
  uint64_t v34;
  uint64_t *v35;
  int64_t v36;
  uint64_t v37;
  char v38;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, CKShareParticipant>);
  v38 = a2;
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v37 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v35 = v2;
  v36 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v36)
      break;
    v22 = (_QWORD *)(v5 + 64);
    v23 = *(_QWORD *)(v37 + 8 * v21);
    ++v13;
    if (!v23)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v36)
        goto LABEL_33;
      v23 = *(_QWORD *)(v37 + 8 * v13);
      if (!v23)
      {
        v24 = v21 + 2;
        if (v24 >= v36)
        {
LABEL_33:
          swift_release();
          v3 = v35;
          if ((v38 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v23 = *(_QWORD *)(v37 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            v13 = v24 + 1;
            if (__OFADD__(v24, 1))
              goto LABEL_42;
            if (v13 >= v36)
              goto LABEL_33;
            v23 = *(_QWORD *)(v37 + 8 * v13);
            ++v24;
            if (v23)
              goto LABEL_30;
          }
        }
        v13 = v24;
      }
    }
LABEL_30:
    v10 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    v29 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v20);
    v31 = *v29;
    v30 = v29[1];
    v32 = *(void **)(*(_QWORD *)(v5 + 56) + 8 * v20);
    if ((v38 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      v33 = v32;
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    result = Hasher._finalize()();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v27 = v16 == v26;
        if (v16 == v26)
          v16 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v17);
    *v18 = v31;
    v18[1] = v30;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v17) = v32;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v35;
  v22 = (_QWORD *)(v5 + 64);
  if ((v38 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v34 = 1 << *(_BYTE *)(v5 + 32);
  if (v34 >= 64)
    bzero(v22, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v34;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  uint64_t v35;
  char v36;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Set<CKShareParticipant>>);
  v36 = a2;
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v35 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v34 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v34)
      break;
    v22 = (_QWORD *)(v5 + 64);
    v23 = *(_QWORD *)(v35 + 8 * v21);
    ++v13;
    if (!v23)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v34)
        goto LABEL_33;
      v23 = *(_QWORD *)(v35 + 8 * v13);
      if (!v23)
      {
        v24 = v21 + 2;
        if (v24 >= v34)
        {
LABEL_33:
          swift_release();
          if ((v36 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v23 = *(_QWORD *)(v35 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            v13 = v24 + 1;
            if (__OFADD__(v24, 1))
              goto LABEL_42;
            if (v13 >= v34)
              goto LABEL_33;
            v23 = *(_QWORD *)(v35 + 8 * v13);
            ++v24;
            if (v23)
              goto LABEL_30;
          }
        }
        v13 = v24;
      }
    }
LABEL_30:
    v10 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    v29 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v20);
    v31 = *v29;
    v30 = v29[1];
    v32 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v20);
    if ((v36 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    result = Hasher._finalize()();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v27 = v16 == v26;
        if (v16 == v26)
          v16 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v17);
    *v18 = v31;
    v18[1] = v30;
    *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v17) = v32;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v22 = (_QWORD *)(v5 + 64);
  if ((v36 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v33 = 1 << *(_BYTE *)(v5 + 32);
  if (v33 >= 64)
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v33;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int64_t v40;
  _QWORD *v41;
  uint64_t i;
  char v43;
  int64_t v44;
  uint64_t v45;
  __int128 v46;

  v3 = v2;
  v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, PresenceUpdateMessage>);
  v43 = a2;
  v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 1 << *(_BYTE *)(v5 + 32);
    v41 = (_QWORD *)(v5 + 64);
    if (v8 < 64)
      v9 = ~(-1 << v8);
    else
      v9 = -1;
    v10 = v9 & *(_QWORD *)(v5 + 64);
    v40 = (unint64_t)(v8 + 63) >> 6;
    v11 = v6 + 64;
    result = swift_retain();
    v13 = 0;
    for (i = v5; ; v5 = i)
    {
      if (v10)
      {
        v20 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        v44 = v13;
        v21 = v20 | (v13 << 6);
      }
      else
      {
        v22 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v22 >= v40)
          goto LABEL_33;
        v23 = v41[v22];
        v24 = v13 + 1;
        if (!v23)
        {
          v24 = v13 + 2;
          if (v13 + 2 >= v40)
            goto LABEL_33;
          v23 = v41[v24];
          if (!v23)
          {
            v25 = v13 + 3;
            if (v13 + 3 >= v40)
            {
LABEL_33:
              swift_release();
              v3 = v2;
              if ((v43 & 1) != 0)
              {
                v39 = 1 << *(_BYTE *)(v5 + 32);
                if (v39 >= 64)
                  bzero(v41, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v41 = -1 << v39;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v23 = v41[v25];
            if (!v23)
            {
              while (1)
              {
                v24 = v25 + 1;
                if (__OFADD__(v25, 1))
                  goto LABEL_40;
                if (v24 >= v40)
                  goto LABEL_33;
                v23 = v41[v24];
                ++v25;
                if (v23)
                  goto LABEL_30;
              }
            }
            v24 = v13 + 3;
          }
        }
LABEL_30:
        v10 = (v23 - 1) & v23;
        v44 = v24;
        v21 = __clz(__rbit64(v23)) + (v24 << 6);
      }
      v30 = *(_QWORD *)(v5 + 56);
      v31 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
      v33 = *v31;
      v32 = v31[1];
      v34 = v30 + 56 * v21;
      v36 = *(_QWORD *)v34;
      v35 = *(_QWORD *)(v34 + 8);
      v37 = *(_QWORD *)(v34 + 16);
      v46 = *(_OWORD *)(v34 + 24);
      v38 = *(_QWORD *)(v34 + 48);
      v45 = *(_QWORD *)(v34 + 40);
      if ((v43 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        outlined copy of PresenceUpdateMessage.Kind(v36, v35);
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      result = Hasher._finalize()();
      v14 = -1 << *(_BYTE *)(v7 + 32);
      v15 = result & ~v14;
      v16 = v15 >> 6;
      if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
      {
        v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v26 = 0;
        v27 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v28 = v16 == v27;
          if (v16 == v27)
            v16 = 0;
          v26 |= v28;
          v29 = *(_QWORD *)(v11 + 8 * v16);
        }
        while (v29 == -1);
        v17 = __clz(__rbit64(~v29)) + (v16 << 6);
      }
      *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      v18 = (_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v17);
      *v18 = v33;
      v18[1] = v32;
      v19 = *(_QWORD *)(v7 + 56) + 56 * v17;
      *(_QWORD *)v19 = v36;
      *(_QWORD *)(v19 + 8) = v35;
      *(_QWORD *)(v19 + 16) = v37;
      *(_OWORD *)(v19 + 24) = v46;
      v13 = v44;
      *(_QWORD *)(v19 + 40) = v45;
      *(_QWORD *)(v19 + 48) = v38;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
  *v3 = v7;
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, _OWORD *a4, _QWORD *a5)
{
  _QWORD *v5;
  _OWORD *v6;
  __int128 v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a5[(result >> 6) + 8] |= 1 << result;
  v5 = (_QWORD *)(a5[6] + 16 * result);
  *v5 = a2;
  v5[1] = a3;
  v6 = (_OWORD *)(a5[7] + 48 * result);
  v7 = a4[1];
  *v6 = *a4;
  v6[1] = v7;
  v6[2] = a4[2];
  v8 = a5[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a5[2] = v10;
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a6[(result >> 6) + 8] |= 1 << result;
  v6 = (_QWORD *)(a6[6] + 16 * result);
  *v6 = a2;
  v6[1] = a3;
  v7 = (_QWORD *)(a6[7] + 16 * result);
  *v7 = a4;
  v7[1] = a5;
  v8 = a6[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a6[2] = v10;
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a5[(result >> 6) + 8] |= 1 << result;
  v5 = (_QWORD *)(a5[6] + 16 * result);
  *v5 = a2;
  v5[1] = a3;
  *(_QWORD *)(a5[7] + 8 * result) = a4;
  v6 = a5[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a5[2] = v8;
  return result;
}

{
  _QWORD *v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a5[(result >> 6) + 8] |= 1 << result;
  v5 = (_QWORD *)(a5[6] + 16 * result);
  *v5 = a2;
  v5[1] = a3;
  v6 = a5[7] + 56 * result;
  v7 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)v6 = *(_OWORD *)a4;
  *(_OWORD *)(v6 + 16) = v7;
  *(_OWORD *)(v6 + 32) = *(_OWORD *)(a4 + 32);
  *(_QWORD *)(v6 + 48) = *(_QWORD *)(a4 + 48);
  v8 = a5[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a5[2] = v10;
  return result;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(_OWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t result;
  __int128 v21;
  unint64_t v22;
  char v23;
  uint64_t *v24;
  _OWORD *v25;
  __int128 v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;

  v5 = v4;
  v10 = *v4;
  v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v16 = v11;
  v17 = *(_QWORD *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0)
    goto LABEL_7;
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
LABEL_7:
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      v19 = v18[7] + 48 * v12;

      swift_release();
      swift_release();
      result = swift_bridgeObjectRelease();
      v21 = a1[1];
      *(_OWORD *)v19 = *a1;
      *(_OWORD *)(v19 + 16) = v21;
      *(_OWORD *)(v19 + 32) = a1[2];
      return result;
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    v24 = (uint64_t *)(v18[6] + 16 * v12);
    *v24 = a2;
    v24[1] = a3;
    v25 = (_OWORD *)(v18[7] + 48 * v12);
    v26 = a1[1];
    *v25 = *a1;
    v25[1] = v26;
    v25[2] = a1[2];
    v27 = v18[2];
    v28 = __OFADD__(v27, 1);
    v29 = v27 + 1;
    if (!v28)
    {
      v18[2] = v29;
      return swift_bridgeObjectRetain();
    }
    goto LABEL_14;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
  v22 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  if ((v16 & 1) == (v23 & 1))
  {
    v12 = v22;
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t result;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  char v19;
  uint64_t *v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;

  v5 = v4;
  v10 = *v4;
  v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  result = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v16 = v11;
  v17 = *(_QWORD *)(v10 + 24);
  if (v17 >= result && (a4 & 1) != 0)
    goto LABEL_7;
  if (v17 >= result && (a4 & 1) == 0)
  {
    result = (uint64_t)specialized _NativeDictionary.copy()();
LABEL_7:
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      *(_QWORD *)(v18[7] + 8 * v12) = a1;
      return result;
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    v20 = (uint64_t *)(v18[6] + 16 * v12);
    *v20 = a2;
    v20[1] = a3;
    *(_QWORD *)(v18[7] + 8 * v12) = a1;
    v21 = v18[2];
    v22 = __OFADD__(v21, 1);
    v23 = v21 + 1;
    if (!v22)
    {
      v18[2] = v23;
      return swift_bridgeObjectRetain();
    }
    goto LABEL_14;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a4 & 1);
  result = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  if ((v16 & 1) == (v19 & 1))
  {
    v12 = result;
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t result;
  unint64_t v21;
  char v22;
  uint64_t *v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;

  v5 = v4;
  v10 = *v4;
  v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v16 = v11;
  v17 = *(_QWORD *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0)
    goto LABEL_7;
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
LABEL_7:
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      v19 = v18[7];
      result = swift_bridgeObjectRelease();
      *(_QWORD *)(v19 + 8 * v12) = a1;
      return result;
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    v23 = (uint64_t *)(v18[6] + 16 * v12);
    *v23 = a2;
    v23[1] = a3;
    *(_QWORD *)(v18[7] + 8 * v12) = a1;
    v24 = v18[2];
    v25 = __OFADD__(v24, 1);
    v26 = v24 + 1;
    if (!v25)
    {
      v18[2] = v26;
      return swift_bridgeObjectRetain();
    }
    goto LABEL_14;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
  v21 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  if ((v16 & 1) == (v22 & 1))
  {
    v12 = v21;
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t result;
  unint64_t v20;
  char v21;
  uint64_t *v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;

  v5 = v4;
  v10 = *v4;
  v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v16 = v11;
  v17 = *(_QWORD *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0)
    goto LABEL_7;
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
LABEL_7:
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
      return outlined assign with take of PresenceUpdateMessage(a1, v18[7] + 56 * v12);
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    v22 = (uint64_t *)(v18[6] + 16 * v12);
    *v22 = a2;
    v22[1] = a3;
    v23 = v18[7] + 56 * v12;
    v24 = *(_OWORD *)a1;
    v25 = *(_OWORD *)(a1 + 16);
    v26 = *(_OWORD *)(a1 + 32);
    *(_QWORD *)(v23 + 48) = *(_QWORD *)(a1 + 48);
    *(_OWORD *)(v23 + 16) = v25;
    *(_OWORD *)(v23 + 32) = v26;
    *(_OWORD *)v23 = v24;
    v27 = v18[2];
    v28 = __OFADD__(v27, 1);
    v29 = v27 + 1;
    if (!v28)
    {
      v18[2] = v29;
      return swift_bridgeObjectRetain();
    }
    goto LABEL_14;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
  v20 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  if ((v16 & 1) == (v21 & 1))
  {
    v12 = v20;
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
      return outlined assign with take of PresenceUpdateMessage(a1, v18[7] + 56 * v12);
    goto LABEL_11;
  }
LABEL_15:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t partial apply for closure #1 in ParticipantPresenceCoordinator.beginDeviceCoordination()(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = specialized closure #3 in closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:);
  return closure #1 in ParticipantPresenceCoordinator.beginDeviceCoordination()(a1, v4, v5, v6);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TA(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = specialized closure #3 in closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:);
  return ((uint64_t (*)(uint64_t, int *))((char *)&_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5Tu
                                                 + _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5Tu))(a1, v4);
}

uint64_t objectdestroyTm()
{
  uint64_t v0;

  swift_unknownObjectRelease();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ParticipantPresenceCoordinator.endDeviceCoordination()(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = specialized closure #3 in closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:);
  return closure #1 in ParticipantPresenceCoordinator.endDeviceCoordination()(a1, v4, v5, v6);
}

uint64_t sub_24A41298C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ParticipantPresenceCoordinator.beginCollaborationForShare(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;

  v2 = swift_task_alloc();
  v3 = *(_OWORD *)(v0 + 32);
  *(_QWORD *)(v1 + 16) = v2;
  *(_QWORD *)v2 = v1;
  *(_QWORD *)(v2 + 8) = specialized closure #3 in closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:);
  *(_OWORD *)(v2 + 32) = v3;
  return swift_task_switch();
}

uint64_t partial apply for closure #1 in ParticipantPresenceCoordinator.shareDidUpdate(_:)()
{
  int8x16_t *v0;
  uint64_t v1;
  _QWORD *v2;
  int8x16_t *v3;
  int8x16_t v5;

  v2 = (_QWORD *)swift_task_alloc();
  v5 = v0[2];
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = specialized closure #3 in closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:);
  v3 = (int8x16_t *)swift_task_alloc();
  v2[2] = v3;
  v3->i64[0] = (uint64_t)v2;
  v3->i64[1] = (uint64_t)specialized closure #3 in closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:);
  v3[1] = vextq_s8(v5, v5, 8uLL);
  return swift_task_switch();
}

uint64_t partial apply for closure #1 in ParticipantPresenceCoordinator.endCollaborationForShare(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;

  v2 = swift_task_alloc();
  v3 = *(_OWORD *)(v0 + 32);
  *(_QWORD *)(v1 + 16) = v2;
  *(_QWORD *)v2 = v1;
  *(_QWORD *)(v2 + 8) = specialized closure #3 in closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:);
  *(_OWORD *)(v2 + 16) = v3;
  return swift_task_switch();
}

uint64_t partial apply for closure #1 in ParticipantPresenceCoordinator.moveCurrentParticipant(toTab:inTabGroup:withDeviceIdentifier:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  v6 = *(_OWORD *)(v0 + 48);
  v7 = *(_OWORD *)(v0 + 32);
  v5 = *(_OWORD *)(v0 + 64);
  v2 = *(_QWORD *)(v0 + 80);
  v3 = swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *(_QWORD *)v3 = v1;
  *(_QWORD *)(v3 + 8) = specialized closure #3 in closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:);
  *(_QWORD *)(v3 + 264) = v2;
  *(_OWORD *)(v3 + 248) = v5;
  *(_OWORD *)(v3 + 232) = v6;
  *(_OWORD *)(v3 + 216) = v7;
  return swift_task_switch();
}

uint64_t partial apply for closure #1 in ParticipantPresenceCoordinator.removeTabGroup(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v5;

  v5 = *(_OWORD *)(v0 + 32);
  v2 = *(_QWORD *)(v0 + 48);
  v3 = swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *(_QWORD *)v3 = v1;
  *(_QWORD *)(v3 + 8) = specialized closure #3 in closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:);
  *(_QWORD *)(v3 + 32) = v2;
  *(_OWORD *)(v3 + 16) = v5;
  return swift_task_switch();
}

uint64_t partial apply for closure #1 in ParticipantPresenceCoordinator.removeTab(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v5;

  v5 = *(_OWORD *)(v0 + 32);
  v2 = *(_QWORD *)(v0 + 48);
  v3 = swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *(_QWORD *)v3 = v1;
  *(_QWORD *)(v3 + 8) = specialized closure #3 in closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:);
  *(_QWORD *)(v3 + 32) = v2;
  *(_OWORD *)(v3 + 16) = v5;
  return swift_task_switch();
}

void specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t *v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;

  v5 = v4;
  v10 = *v4;
  v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v16 = v11;
  v17 = *(_QWORD *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0)
    goto LABEL_7;
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
LABEL_7:
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      v19 = v18[7];

      *(_QWORD *)(v19 + 8 * v12) = a1;
      return;
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    v22 = (uint64_t *)(v18[6] + 16 * v12);
    *v22 = a2;
    v22[1] = a3;
    *(_QWORD *)(v18[7] + 8 * v12) = a1;
    v23 = v18[2];
    v24 = __OFADD__(v23, 1);
    v25 = v23 + 1;
    if (!v24)
    {
      v18[2] = v25;
      swift_bridgeObjectRetain();
      return;
    }
    goto LABEL_14;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
  v20 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  if ((v16 & 1) == (v21 & 1))
  {
    v12 = v20;
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
}

uint64_t specialized _NativeSet.subtracting<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int64_t v23;
  uint64_t v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  int64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(char *, unint64_t, uint64_t);
  char v40;
  void (*v41)(char *, uint64_t);
  uint64_t isStackAllocationSafe;
  char v43;
  unint64_t v44;
  size_t v45;
  uint64_t v46;
  void *v48;
  uint64_t v49;
  char *v50;
  unint64_t v51;
  int64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int64_t v59;
  unint64_t v60;
  uint64_t v61;

  v61 = *MEMORY[0x24BDAC8D0];
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Participant?);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v49 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Participant();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v55 = (char *)&v49 - v12;
  if (!*(_QWORD *)(a2 + 16))
  {
    swift_release();
    return MEMORY[0x24BEE4B08];
  }
  v13 = -1 << *(_BYTE *)(a1 + 32);
  v14 = *(_QWORD *)(a1 + 56);
  v15 = ~v13;
  v16 = -v13;
  if (v16 < 64)
    v17 = ~(-1 << v16);
  else
    v17 = -1;
  v56 = a1;
  v57 = a1 + 56;
  v18 = a1;
  v19 = a1 + 56;
  v20 = v17 & v14;
  v21 = v15;
  v58 = v15;
  v59 = 0;
  v60 = v17 & v14;
  v54 = (char *)(a2 + 56);
  v22 = v18;
  swift_bridgeObjectRetain();
  v23 = 0;
  v50 = v6;
  v53 = a2;
  v51 = v20;
  v52 = 0;
  if (!v20)
    goto LABEL_8;
LABEL_6:
  v24 = (v20 - 1) & v20;
  v25 = __clz(__rbit64(v20)) | (v23 << 6);
  v26 = v23;
  v27 = v19;
LABEL_7:
  (*(void (**)(char *, unint64_t, uint64_t))(v8 + 16))(v6, *(_QWORD *)(v22 + 48) + *(_QWORD *)(v8 + 72) * v25, v7);
  v28 = 0;
  while (1)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v6, v28, 1, v7);
    v56 = v22;
    v57 = v27;
    v58 = v21;
    v59 = v26;
    v60 = v24;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
    {
      outlined consume of Set<Participant>.Iterator._Variant();
      outlined destroy of TaskPriority?((uint64_t)v6, &demangling cache variable for type metadata for Participant?);
      return v53;
    }
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v55, v6, v7);
    v32 = v53;
    lazy protocol witness table accessor for type CKShareParticipant and conformance NSObject(&lazy protocol witness table cache variable for type Participant and conformance Participant, (uint64_t (*)(uint64_t))MEMORY[0x24BDD1F00], MEMORY[0x24BDD1F10]);
    v33 = dispatch thunk of Hashable._rawHashValue(seed:)();
    v34 = -1 << *(_BYTE *)(v32 + 32);
    v35 = v33 & ~v34;
    if (((*(_QWORD *)&v54[(v35 >> 3) & 0xFFFFFFFFFFFFF8] >> v35) & 1) != 0)
      break;
    v41 = *(void (**)(char *, uint64_t))(v8 + 8);
LABEL_34:
    v41(v55, v7);
    v23 = v59;
    v20 = v60;
    v22 = v56;
    v19 = v57;
    v21 = v58;
    v6 = v50;
    v51 = v60;
    v52 = v59;
    if (v60)
      goto LABEL_6;
LABEL_8:
    v26 = v23 + 1;
    if (__OFADD__(v23, 1))
      __break(1u);
    v27 = v19;
    v29 = (unint64_t)(v21 + 64) >> 6;
    if (v26 >= v29)
      goto LABEL_26;
    v30 = *(_QWORD *)(v19 + 8 * v26);
    if (v30)
      goto LABEL_11;
    v23 += 2;
    if (v26 + 1 >= v29)
      goto LABEL_36;
    v30 = *(_QWORD *)(v19 + 8 * v23);
    if (v30)
      goto LABEL_14;
    if (v26 + 2 >= v29)
    {
LABEL_26:
      v24 = 0;
      v28 = 1;
      v26 = v23;
    }
    else
    {
      v30 = *(_QWORD *)(v19 + 8 * (v26 + 2));
      if (v30)
      {
        v26 += 2;
        goto LABEL_11;
      }
      v23 = v26 + 3;
      if (v26 + 3 >= v29)
      {
        v24 = 0;
        v28 = 1;
        v26 += 2;
      }
      else
      {
        v30 = *(_QWORD *)(v19 + 8 * v23);
        if (v30)
        {
LABEL_14:
          v26 = v23;
LABEL_11:
          v24 = (v30 - 1) & v30;
          v25 = __clz(__rbit64(v30)) + (v26 << 6);
          goto LABEL_7;
        }
        v26 += 4;
        if (v26 >= v29)
          goto LABEL_26;
        v30 = *(_QWORD *)(v19 + 8 * v26);
        if (v30)
          goto LABEL_11;
        v26 = v29 - 1;
        v31 = v52 + 6;
        while (v29 != v31)
        {
          v30 = *(_QWORD *)(v19 + 8 * v31++);
          if (v30)
          {
            v26 = v31 - 1;
            goto LABEL_11;
          }
        }
LABEL_36:
        v24 = 0;
        v28 = 1;
      }
    }
  }
  v36 = v32;
  v37 = ~v34;
  v38 = *(_QWORD *)(v8 + 72);
  v39 = *(void (**)(char *, unint64_t, uint64_t))(v8 + 16);
  while (1)
  {
    v39(v11, *(_QWORD *)(v36 + 48) + v38 * v35, v7);
    lazy protocol witness table accessor for type CKShareParticipant and conformance NSObject(&lazy protocol witness table cache variable for type Participant and conformance Participant, (uint64_t (*)(uint64_t))MEMORY[0x24BDD1F00], MEMORY[0x24BDD1F18]);
    v40 = dispatch thunk of static Equatable.== infix(_:_:)();
    v41 = *(void (**)(char *, uint64_t))(v8 + 8);
    v41(v11, v7);
    if ((v40 & 1) != 0)
      break;
    v35 = (v35 + 1) & v37;
    if (((*(_QWORD *)&v54[(v35 >> 3) & 0xFFFFFFFFFFFFF8] >> v35) & 1) == 0)
      goto LABEL_34;
  }
  isStackAllocationSafe = ((uint64_t (*)(char *, uint64_t))v41)(v55, v7);
  v43 = *(_BYTE *)(v36 + 32);
  v44 = (unint64_t)((1 << v43) + 63) >> 6;
  v45 = 8 * v44;
  if ((v43 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (_DWORD)isStackAllocationSafe))
  {
    MEMORY[0x24BDAC7A8](isStackAllocationSafe);
    memcpy((char *)&v49 - ((v45 + 15) & 0x3FFFFFFFFFFFFFF0), v54, v45);
    v46 = specialized closure #1 in _NativeSet.subtracting<A>(_:)((unint64_t *)((char *)&v49 - ((v45 + 15) & 0x3FFFFFFFFFFFFFF0)), v44, v36, v35, &v56);
    swift_release();
    outlined consume of Set<Participant>.Iterator._Variant();
  }
  else
  {
    v48 = (void *)swift_slowAlloc();
    memcpy(v48, v54, v45);
    v46 = specialized closure #1 in _NativeSet.subtracting<A>(_:)((unint64_t *)v48, v44, v36, v35, &v56);
    swift_release();
    outlined consume of Set<Participant>.Iterator._Variant();
    MEMORY[0x24BD0F964](v48, -1, -1);
  }
  return v46;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  void (*v15)(char *, unint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char v22;
  void (*v23)(char *, uint64_t);
  uint64_t isStackAllocationSafe;
  char v25;
  unint64_t v26;
  size_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  v4 = type metadata accessor for Participant();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v31 - v9;
  if (*(_QWORD *)(a2 + 16))
  {
    v33 = a1;
    v11 = *(_QWORD *)(a1 + 16);
    swift_bridgeObjectRetain();
    if (v11)
    {
      v12 = 0;
      v31 = v5;
      v32 = (char *)(a2 + 56);
      while (1)
      {
        if (v12 >= v11)
          __break(1u);
        v13 = *(_QWORD *)(v5 + 72);
        v14 = a1
            + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
            + v13 * v12;
        v34 = v12 + 1;
        v15 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
        v15(v10, v14, v4);
        lazy protocol witness table accessor for type CKShareParticipant and conformance NSObject(&lazy protocol witness table cache variable for type Participant and conformance Participant, (uint64_t (*)(uint64_t))MEMORY[0x24BDD1F00], MEMORY[0x24BDD1F10]);
        v16 = dispatch thunk of Hashable._rawHashValue(seed:)();
        v17 = a2;
        v18 = -1 << *(_BYTE *)(a2 + 32);
        v19 = v5;
        v20 = v16 & ~v18;
        if (((*(_QWORD *)&v32[(v20 >> 3) & 0xFFFFFFFFFFFFF8] >> v20) & 1) != 0)
          break;
        v23 = *(void (**)(char *, uint64_t))(v19 + 8);
LABEL_11:
        v23(v10, v4);
        a1 = v33;
        v12 = v34;
        v11 = *(_QWORD *)(v33 + 16);
        a2 = v17;
        v5 = v31;
        if (v34 == v11)
          goto LABEL_12;
      }
      v21 = ~v18;
      while (1)
      {
        v15(v8, *(_QWORD *)(v17 + 48) + v20 * v13, v4);
        lazy protocol witness table accessor for type CKShareParticipant and conformance NSObject(&lazy protocol witness table cache variable for type Participant and conformance Participant, (uint64_t (*)(uint64_t))MEMORY[0x24BDD1F00], MEMORY[0x24BDD1F18]);
        v22 = dispatch thunk of static Equatable.== infix(_:_:)();
        v23 = *(void (**)(char *, uint64_t))(v31 + 8);
        v23(v8, v4);
        if ((v22 & 1) != 0)
          break;
        v20 = (v20 + 1) & v21;
        if (((*(_QWORD *)&v32[(v20 >> 3) & 0xFFFFFFFFFFFFF8] >> v20) & 1) == 0)
          goto LABEL_11;
      }
      isStackAllocationSafe = ((uint64_t (*)(char *, uint64_t))v23)(v10, v4);
      v25 = *(_BYTE *)(v17 + 32);
      v26 = (unint64_t)((1 << v25) + 63) >> 6;
      v27 = 8 * v26;
      if ((v25 & 0x3Fu) <= 0xD
        || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (_DWORD)isStackAllocationSafe))
      {
        MEMORY[0x24BDAC7A8](isStackAllocationSafe);
        memcpy((char *)&v31 - ((v27 + 15) & 0x3FFFFFFFFFFFFFF0), v32, v27);
        v28 = specialized closure #1 in _NativeSet.subtracting<A>(_:)((unint64_t *)((char *)&v31 - ((v27 + 15) & 0x3FFFFFFFFFFFFFF0)), v26, v17, v20, &v33);
        swift_release();
        swift_bridgeObjectRelease();
      }
      else
      {
        v29 = (void *)swift_slowAlloc();
        memcpy(v29, v32, v27);
        v28 = specialized closure #1 in _NativeSet.subtracting<A>(_:)((unint64_t *)v29, v26, v17, v20, &v33);
        swift_release();
        swift_bridgeObjectRelease();
        MEMORY[0x24BD0F964](v29, -1, -1);
      }
      return v28;
    }
    else
    {
LABEL_12:
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    swift_release();
    return MEMORY[0x24BEE4B08];
  }
  return a2;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  SEL *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  int64_t v16;
  void *v17;
  id v18;
  id v19;
  id v20;
  id v21;
  Swift::Int isStackAllocationSafe;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  void *v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  SEL *v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  uint64_t v43;
  void *v44;
  id v45;
  id v46;
  id v47;
  id v48;
  uint64_t v49;
  void *v50;
  id v51;
  char v52;
  id v53;
  char v54;
  unint64_t v55;
  size_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v62;
  uint64_t v63;
  int64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  int64_t v68;
  unint64_t v69;
  id v70;
  _QWORD v71[7];

  v2 = a2;
  v71[5] = *MEMORY[0x24BDAC8D0];
  if (!*(_QWORD *)(a2 + 16))
  {
    swift_release();
    return MEMORY[0x24BEE4B08];
  }
  v3 = *(_QWORD *)(a1 + 56);
  v65 = a1 + 56;
  v4 = -1 << *(_BYTE *)(a1 + 32);
  v63 = ~v4;
  if (-v4 < 64)
    v5 = ~(-1 << -(char)v4);
  else
    v5 = -1;
  v6 = v5 & v3;
  v64 = (unint64_t)(63 - v4) >> 6;
  v7 = (char *)(a2 + 56);
  v8 = swift_bridgeObjectRetain();
  v67 = v7;
  v68 = 0;
  v9 = (SEL *)&unk_251BCB000;
  v66 = v8;
  while (1)
  {
    if (v6)
    {
      v10 = __clz(__rbit64(v6));
      v11 = (v6 - 1) & v6;
      v12 = v10 | (v68 << 6);
    }
    else
    {
      v13 = v68 + 1;
      if (__OFADD__(v68, 1))
      {
        __break(1u);
        goto LABEL_77;
      }
      if (v13 >= v64)
        goto LABEL_66;
      v14 = *(_QWORD *)(v65 + 8 * v13);
      v15 = v68 + 1;
      if (!v14)
      {
        v15 = v68 + 2;
        if (v68 + 2 >= v64)
          goto LABEL_66;
        v14 = *(_QWORD *)(v65 + 8 * v15);
        if (!v14)
        {
          v15 = v68 + 3;
          if (v68 + 3 >= v64)
            goto LABEL_66;
          v14 = *(_QWORD *)(v65 + 8 * v15);
          if (!v14)
          {
            v15 = v68 + 4;
            if (v68 + 4 >= v64)
              goto LABEL_66;
            v14 = *(_QWORD *)(v65 + 8 * v15);
            if (!v14)
            {
              v16 = v68 + 5;
              if (v68 + 5 >= v64)
              {
LABEL_66:
                outlined consume of Set<Participant>.Iterator._Variant();
                return v2;
              }
              v14 = *(_QWORD *)(v65 + 8 * v16);
              if (!v14)
              {
                while (1)
                {
                  v15 = v16 + 1;
                  if (__OFADD__(v16, 1))
                    break;
                  if (v15 >= v64)
                    goto LABEL_66;
                  v14 = *(_QWORD *)(v65 + 8 * v15);
                  ++v16;
                  if (v14)
                    goto LABEL_24;
                }
LABEL_77:
                __break(1u);
              }
              v15 = v68 + 5;
            }
          }
        }
      }
LABEL_24:
      v11 = (v14 - 1) & v14;
      v12 = __clz(__rbit64(v14)) + (v15 << 6);
      v68 = v15;
    }
    v17 = *(void **)(*(_QWORD *)(v8 + 48) + 8 * v12);
    Hasher.init(_seed:)();
    v69 = v11;
    if (v17)
    {
      v18 = v17;
      if (objc_msgSend(v18, v9[247]) == (id)2
        && (v19 = objc_msgSend(v18, sel_userIdentity),
            v20 = objc_msgSend(v19, sel_userRecordID),
            v19,
            v20))
      {
        v21 = objc_msgSend(v20, sel_recordName);

        static String._unconditionallyBridgeFromObjectiveC(_:)();
        Hasher._combine(_:)(1u);
        String.hash(into:)();
        swift_bridgeObjectRelease();

      }
      else
      {
        Hasher._combine(_:)(0);

      }
    }
    else
    {
      String.hash(into:)();
    }
    isStackAllocationSafe = Hasher._finalize()();
    v23 = -1 << *(_BYTE *)(v2 + 32);
    v24 = isStackAllocationSafe & ~v23;
    if (((*(_QWORD *)&v7[(v24 >> 3) & 0xFFFFFFFFFFFFF8] >> v24) & 1) != 0)
      break;
LABEL_6:

    v8 = v66;
    v6 = v69;
  }
  v25 = ~v23;
  while (1)
  {
    v26 = *(void **)(*(_QWORD *)(v2 + 48) + 8 * v24);
    if (v26)
    {
      v27 = v26;
      if (objc_msgSend(v27, v9[247]) != (id)2
        || (v28 = objc_msgSend(v27, sel_userIdentity),
            v29 = objc_msgSend(v28, sel_userRecordID),
            v28,
            !v29))
      {

LABEL_41:
        goto LABEL_34;
      }
      v30 = objc_msgSend(v29, sel_recordName);

      if (!v17)
        goto LABEL_41;
    }
    else if (!v17)
    {
      goto LABEL_70;
    }
    v31 = v17;
    if (objc_msgSend(v31, v9[247]) != (id)2
      || (v32 = objc_msgSend(v31, sel_userIdentity),
          v33 = objc_msgSend(v32, sel_userRecordID),
          v32,
          !v33))
    {

      goto LABEL_34;
    }
    v34 = objc_msgSend(v33, sel_recordName);

    if (!v26)
      goto LABEL_34;
    v35 = v31;
    v36 = v26;
    v37 = v9;
    v38 = v36;
    if (objc_msgSend(v36, (SEL)v37 + 1818) == (id)2
      && (v39 = objc_msgSend(v38, sel_userIdentity),
          v40 = objc_msgSend(v39, sel_userRecordID),
          v39,
          v40))
    {
      v41 = v35;
      v42 = objc_msgSend(v40, sel_recordName);

      v43 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v45 = v44;

      v35 = v41;
    }
    else
    {
      v43 = 0;
      v45 = 0;
    }
    v70 = v35;
    if (objc_msgSend(v35, sel_acceptanceStatus) == (id)2)
    {
      v46 = objc_msgSend(v35, sel_userIdentity);
      v47 = objc_msgSend(v46, sel_userRecordID);

      if (v47)
      {
        v48 = objc_msgSend(v47, sel_recordName);

        v49 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v47 = v50;

        if (!v45)
          goto LABEL_53;
      }
      else
      {
        v49 = 0;
        if (!v45)
        {
LABEL_53:

          v51 = v70;
          if (!v47)
            goto LABEL_68;

          isStackAllocationSafe = swift_bridgeObjectRelease();
          goto LABEL_62;
        }
      }
    }
    else
    {
      v49 = 0;
      v47 = 0;
      if (!v45)
        goto LABEL_53;
    }
    if (!v47)
    {
      swift_bridgeObjectRelease();

LABEL_62:
      v7 = v67;
      v9 = (SEL *)&unk_251BCB000;
      goto LABEL_34;
    }
    if (v43 == v49 && v45 == v47)
      break;
    v52 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    v53 = v70;
    v7 = v67;
    v9 = (SEL *)&unk_251BCB000;
    if ((v52 & 1) != 0)
      goto LABEL_69;
LABEL_34:
    v24 = (v24 + 1) & v25;
    if (((*(_QWORD *)&v7[(v24 >> 3) & 0xFFFFFFFFFFFFF8] >> v24) & 1) == 0)
      goto LABEL_6;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  v51 = v70;
  v38 = v70;
LABEL_68:
  v7 = v67;

  v53 = v38;
LABEL_69:

LABEL_70:
  v71[0] = v66;
  v71[1] = v65;
  v71[2] = v63;
  v71[3] = v68;
  v71[4] = v69;
  v54 = *(_BYTE *)(v2 + 32);
  v55 = (unint64_t)((1 << v54) + 63) >> 6;
  v56 = 8 * v55;
  if ((v54 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (_DWORD)isStackAllocationSafe))
  {
    MEMORY[0x24BDAC7A8](isStackAllocationSafe);
    memcpy((char *)&v62 - ((v56 + 15) & 0x3FFFFFFFFFFFFFF0), v7, v56);
    specialized closure #1 in _NativeSet.subtracting<A>(_:)((unint64_t *)((char *)&v62 - ((v56 + 15) & 0x3FFFFFFFFFFFFFF0)), v55, v2, v24, v71);
    v58 = v57;
    swift_release();
    outlined consume of Set<Participant>.Iterator._Variant();
  }
  else
  {
    v59 = (void *)swift_slowAlloc();
    memcpy(v59, v7, v56);
    specialized closure #1 in _NativeSet.subtracting<A>(_:)((unint64_t *)v59, v55, v2, v24, v71);
    v58 = v60;
    swift_release();
    outlined consume of Set<Participant>.Iterator._Variant();
    MEMORY[0x24BD0F964](v59, -1, -1);
  }
  return v58;
}

uint64_t specialized Set._subtract<A>(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t result;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int64_t v18;
  int64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Participant?);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Participant();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = MEMORY[0x24BDAC7A8](v8);
  v13 = (char *)&v25 - v12;
  if (!*(_QWORD *)(*(_QWORD *)v1 + 16))
    return result;
  v14 = *(_QWORD *)(a1 + 56);
  v26 = a1 + 56;
  v15 = 1 << *(_BYTE *)(a1 + 32);
  v16 = -1;
  if (v15 < 64)
    v16 = ~(-1 << v15);
  v17 = v16 & v14;
  v18 = (unint64_t)(v15 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v19 = 0;
  while (1)
  {
    if (v17)
    {
      v20 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      v21 = v20 | (v19 << 6);
      goto LABEL_6;
    }
    v22 = v19 + 1;
    if (__OFADD__(v19, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v22 >= v18)
      return swift_release();
    v23 = *(_QWORD *)(v26 + 8 * v22);
    ++v19;
    if (!v23)
    {
      v19 = v22 + 1;
      if (v22 + 1 >= v18)
        return swift_release();
      v23 = *(_QWORD *)(v26 + 8 * v19);
      if (!v23)
      {
        v19 = v22 + 2;
        if (v22 + 2 >= v18)
          return swift_release();
        v23 = *(_QWORD *)(v26 + 8 * v19);
        if (!v23)
        {
          v19 = v22 + 3;
          if (v22 + 3 >= v18)
            return swift_release();
          v23 = *(_QWORD *)(v26 + 8 * v19);
          if (!v23)
            break;
        }
      }
    }
LABEL_23:
    v17 = (v23 - 1) & v23;
    v21 = __clz(__rbit64(v23)) + (v19 << 6);
LABEL_6:
    (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v13, *(_QWORD *)(a1 + 48) + *(_QWORD *)(v7 + 72) * v21, v6);
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v10, v13, v6);
    specialized Set._Variant.remove(_:)((uint64_t)v10, (uint64_t)v5);
    outlined destroy of TaskPriority?((uint64_t)v5, &demangling cache variable for type metadata for Participant?);
    result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  }
  v24 = v22 + 4;
  if (v24 >= v18)
    return swift_release();
  v23 = *(_QWORD *)(v26 + 8 * v24);
  if (v23)
  {
    v19 = v24;
    goto LABEL_23;
  }
  while (1)
  {
    v19 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v19 >= v18)
      return swift_release();
    v23 = *(_QWORD *)(v26 + 8 * v19);
    ++v24;
    if (v23)
      goto LABEL_23;
  }
LABEL_27:
  __break(1u);
  return result;
}

void specialized Set._subtract<A>(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  void *v11;
  id v12;
  void *v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;

  if (!*(_QWORD *)(*(_QWORD *)v1 + 16))
    return;
  v3 = a1 + 56;
  v4 = 1 << *(_BYTE *)(a1 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(a1 + 56);
  v7 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain();
  v8 = 0;
  while (1)
  {
    if (v6)
    {
      v9 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v10 = v9 | (v8 << 6);
      goto LABEL_6;
    }
    v14 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v14 >= v7)
      goto LABEL_24;
    v15 = *(_QWORD *)(v3 + 8 * v14);
    ++v8;
    if (!v15)
    {
      v8 = v14 + 1;
      if (v14 + 1 >= v7)
        goto LABEL_24;
      v15 = *(_QWORD *)(v3 + 8 * v8);
      if (!v15)
      {
        v8 = v14 + 2;
        if (v14 + 2 >= v7)
          goto LABEL_24;
        v15 = *(_QWORD *)(v3 + 8 * v8);
        if (!v15)
        {
          v8 = v14 + 3;
          if (v14 + 3 >= v7)
            goto LABEL_24;
          v15 = *(_QWORD *)(v3 + 8 * v8);
          if (!v15)
            break;
        }
      }
    }
LABEL_23:
    v6 = (v15 - 1) & v15;
    v10 = __clz(__rbit64(v15)) + (v8 << 6);
LABEL_6:
    v11 = *(void **)(*(_QWORD *)(a1 + 48) + 8 * v10);
    v12 = v11;
    v13 = (void *)specialized Set._Variant.remove(_:)(v11);
    outlined consume of ParticipantHandleMap.ParticipantKind?(v13);

  }
  v16 = v14 + 4;
  if (v16 >= v7)
  {
LABEL_24:
    swift_release();
    return;
  }
  v15 = *(_QWORD *)(v3 + 8 * v16);
  if (v15)
  {
    v8 = v16;
    goto LABEL_23;
  }
  while (1)
  {
    v8 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v8 >= v7)
      goto LABEL_24;
    v15 = *(_QWORD *)(v3 + 8 * v8);
    ++v16;
    if (v15)
      goto LABEL_23;
  }
LABEL_27:
  __break(1u);
}

uint64_t specialized closure #1 in _NativeSet.subtracting<A>(_:)(unint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4, _QWORD *a5)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(char *, uint64_t);
  uint64_t v24;
  uint64_t v25;
  int64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, unint64_t, uint64_t);
  char v39;
  int64_t v40;
  int64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int64_t v45;
  int64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t *v51;
  char *v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;

  v49 = a2;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Participant?);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Participant();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v48 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = MEMORY[0x24BDAC7A8](v14);
  v57 = (char *)&v48 - v18;
  v19 = *(_QWORD *)(a3 + 16);
  v20 = (a4 >> 3) & 0x1FFFFFFFFFFFFFF8;
  v21 = *(unint64_t *)((char *)a1 + v20) & ((-1 << a4) - 1);
  v51 = a1;
  v52 = v11;
  *(unint64_t *)((char *)a1 + v20) = v21;
  v22 = v19 - 1;
  v55 = a3 + 56;
  v56 = a3;
  v53 = a5;
  while (2)
  {
    v50 = v22;
    do
    {
      while (1)
      {
        v24 = *a5;
        v25 = a5[1];
        v27 = a5[2];
        v26 = a5[3];
        v28 = a5[4];
        v54 = v27;
        if (v28)
        {
          v29 = (v28 - 1) & v28;
          v30 = __clz(__rbit64(v28)) | (v26 << 6);
LABEL_7:
          (*(void (**)(char *, unint64_t, uint64_t))(v13 + 16))(v11, *(_QWORD *)(v24 + 48) + *(_QWORD *)(v13 + 72) * v30, v12);
          v31 = 0;
          goto LABEL_8;
        }
        v40 = v26 + 1;
        if (__OFADD__(v26, 1))
        {
          __break(1u);
          goto LABEL_44;
        }
        v41 = (unint64_t)(v27 + 64) >> 6;
        if (v40 >= v41)
        {
          v29 = 0;
          v31 = 1;
          goto LABEL_8;
        }
        v42 = *(_QWORD *)(v25 + 8 * v40);
        if (v42)
          goto LABEL_17;
        v45 = v26 + 2;
        if (v26 + 2 >= v41)
          goto LABEL_35;
        v42 = *(_QWORD *)(v25 + 8 * v45);
        if (v42)
          goto LABEL_23;
        if (v26 + 3 >= v41)
          goto LABEL_36;
        v42 = *(_QWORD *)(v25 + 8 * (v26 + 3));
        if (v42)
        {
          v40 = v26 + 3;
          goto LABEL_17;
        }
        v45 = v26 + 4;
        if (v26 + 4 < v41)
        {
          v42 = *(_QWORD *)(v25 + 8 * v45);
          if (v42)
          {
LABEL_23:
            v40 = v45;
LABEL_17:
            v29 = (v42 - 1) & v42;
            v30 = __clz(__rbit64(v42)) + (v40 << 6);
            v26 = v40;
            goto LABEL_7;
          }
          v40 = v26 + 5;
          if (v26 + 5 < v41)
          {
            v42 = *(_QWORD *)(v25 + 8 * v40);
            if (v42)
              goto LABEL_17;
            v40 = v41 - 1;
            v46 = v26 + 6;
            while (v41 != v46)
            {
              v42 = *(_QWORD *)(v25 + 8 * v46++);
              if (v42)
              {
                v40 = v46 - 1;
                goto LABEL_17;
              }
            }
LABEL_35:
            v29 = 0;
            v31 = 1;
            v26 = v40;
            goto LABEL_8;
          }
LABEL_36:
          v29 = 0;
          v31 = 1;
          v26 = v45;
          goto LABEL_8;
        }
        v29 = 0;
        v31 = 1;
        v26 += 3;
LABEL_8:
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v11, v31, 1, v12);
        *a5 = v24;
        a5[1] = v25;
        a5[2] = v54;
        a5[3] = v26;
        a5[4] = v29;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
        {
          outlined destroy of TaskPriority?((uint64_t)v11, &demangling cache variable for type metadata for Participant?);
          v47 = v56;
          swift_retain();
          return specialized _NativeSet.extractSubset(using:count:)(v51, v49, v50, v47);
        }
        (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v57, v11, v12);
        v32 = v56;
        lazy protocol witness table accessor for type CKShareParticipant and conformance NSObject(&lazy protocol witness table cache variable for type Participant and conformance Participant, (uint64_t (*)(uint64_t))MEMORY[0x24BDD1F00], MEMORY[0x24BDD1F10]);
        v33 = dispatch thunk of Hashable._rawHashValue(seed:)();
        v34 = -1 << *(_BYTE *)(v32 + 32);
        v35 = v33 & ~v34;
        if (((*(_QWORD *)(v55 + ((v35 >> 3) & 0xFFFFFFFFFFFFF8)) >> v35) & 1) != 0)
          break;
        v23 = *(uint64_t (**)(char *, uint64_t))(v13 + 8);
LABEL_4:
        result = v23(v57, v12);
        v11 = v52;
        a5 = v53;
      }
      v36 = ~v34;
      v37 = *(_QWORD *)(v13 + 72);
      v38 = *(void (**)(char *, unint64_t, uint64_t))(v13 + 16);
      while (1)
      {
        v38(v16, *(_QWORD *)(v56 + 48) + v37 * v35, v12);
        lazy protocol witness table accessor for type CKShareParticipant and conformance NSObject(&lazy protocol witness table cache variable for type Participant and conformance Participant, (uint64_t (*)(uint64_t))MEMORY[0x24BDD1F00], MEMORY[0x24BDD1F18]);
        v39 = dispatch thunk of static Equatable.== infix(_:_:)();
        v23 = *(uint64_t (**)(char *, uint64_t))(v13 + 8);
        v23(v16, v12);
        if ((v39 & 1) != 0)
          break;
        v35 = (v35 + 1) & v36;
        if (((*(_QWORD *)(v55 + ((v35 >> 3) & 0xFFFFFFFFFFFFF8)) >> v35) & 1) == 0)
          goto LABEL_4;
      }
      result = v23(v57, v12);
      v43 = (v35 >> 3) & 0x1FFFFFFFFFFFFFF8;
      v11 = v52;
      v44 = *(unint64_t *)((char *)v51 + v43);
      *(unint64_t *)((char *)v51 + v43) = v44 & ~(1 << v35);
      a5 = v53;
    }
    while ((v44 & (1 << v35)) == 0);
    v22 = v50 - 1;
    if (__OFSUB__(v50, 1))
    {
LABEL_44:
      __break(1u);
      return result;
    }
    if (v50 != 1)
      continue;
    return MEMORY[0x24BEE4B08];
  }
}

{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(char *, uint64_t);
  uint64_t v28;
  char *v29;
  void (*v30)(uint64_t, unint64_t, uint64_t);
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t *v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v41 = a2;
  v9 = type metadata accessor for Participant();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x24BDAC7A8](v11);
  result = MEMORY[0x24BDAC7A8](v14);
  v18 = (char *)&v41 - v17;
  v19 = *(_QWORD *)(a3 + 16);
  v20 = (a4 >> 3) & 0x1FFFFFFFFFFFFFF8;
  v21 = *(unint64_t *)((char *)a1 + v20);
  v42 = a1;
  *(unint64_t *)((char *)a1 + v20) = v21 & ((-1 << a4) - 1);
  v22 = v19 - 1;
  v23 = *a5;
  v24 = a5[1];
  v25 = *(_QWORD *)(*a5 + 16);
  v43 = v22;
  if (v24 == v25)
  {
LABEL_2:
    swift_retain();
    return specialized _NativeSet.extractSubset(using:count:)(v42, v41, v43, a3);
  }
  v45 = v16;
  v46 = a3 + 56;
  v48 = v10;
  v26 = v16;
  v44 = a5;
  while (v24 < v25)
  {
    v28 = v23 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
    v47 = *(_QWORD *)(v10 + 72);
    v29 = v18;
    v30 = *(void (**)(uint64_t, unint64_t, uint64_t))(v10 + 16);
    v30(v26, v28 + v47 * v24, v9);
    a5[1] = v24 + 1;
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 32))(v29, v26, v9);
    lazy protocol witness table accessor for type CKShareParticipant and conformance NSObject(&lazy protocol witness table cache variable for type Participant and conformance Participant, (uint64_t (*)(uint64_t))MEMORY[0x24BDD1F00], MEMORY[0x24BDD1F10]);
    v31 = v29;
    v32 = dispatch thunk of Hashable._rawHashValue(seed:)();
    v33 = a3;
    v34 = -1 << *(_BYTE *)(a3 + 32);
    v35 = v32 & ~v34;
    if (((*(_QWORD *)(v46 + ((v35 >> 3) & 0xFFFFFFFFFFFFF8)) >> v35) & 1) == 0)
    {
      v27 = *(uint64_t (**)(char *, uint64_t))(v48 + 8);
LABEL_6:
      v18 = v31;
      result = v27(v31, v9);
LABEL_7:
      a3 = v33;
      v10 = v48;
      v26 = v45;
      goto LABEL_8;
    }
    v36 = ~v34;
    while (1)
    {
      v30((uint64_t)v13, *(_QWORD *)(v33 + 48) + v35 * v47, v9);
      lazy protocol witness table accessor for type CKShareParticipant and conformance NSObject(&lazy protocol witness table cache variable for type Participant and conformance Participant, (uint64_t (*)(uint64_t))MEMORY[0x24BDD1F00], MEMORY[0x24BDD1F18]);
      v37 = dispatch thunk of static Equatable.== infix(_:_:)();
      v27 = *(uint64_t (**)(char *, uint64_t))(v48 + 8);
      v27(v13, v9);
      if ((v37 & 1) != 0)
        break;
      v35 = (v35 + 1) & v36;
      if (((*(_QWORD *)(v46 + ((v35 >> 3) & 0xFFFFFFFFFFFFF8)) >> v35) & 1) == 0)
        goto LABEL_6;
    }
    v18 = v31;
    result = v27(v31, v9);
    v38 = (v35 >> 3) & 0x1FFFFFFFFFFFFFF8;
    v39 = *(unint64_t *)((char *)v42 + v38);
    *(unint64_t *)((char *)v42 + v38) = v39 & ~(1 << v35);
    if ((v39 & (1 << v35)) == 0)
      goto LABEL_7;
    v40 = v43 - 1;
    v10 = v48;
    v26 = v45;
    if (__OFSUB__(v43, 1))
      goto LABEL_20;
    a3 = v33;
    --v43;
    if (!v40)
      return MEMORY[0x24BEE4B08];
LABEL_8:
    a5 = v44;
    v23 = *v44;
    v24 = v44[1];
    v25 = *(_QWORD *)(*v44 + 16);
    if (v24 == v25)
      goto LABEL_2;
  }
  __break(1u);
LABEL_20:
  __break(1u);
  return result;
}

void specialized closure #1 in _NativeSet.subtracting<A>(_:)(unint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  void *v18;
  id v19;
  id v20;
  id v21;
  id v22;
  Swift::Int v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  void *v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  void *v41;
  id v42;
  id v43;
  id v44;
  id v45;
  uint64_t v46;
  void *v47;
  char v48;
  int64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v56;
  uint64_t v58;
  void *v59;

  v53 = a2;
  v5 = a3;
  v6 = *(_QWORD *)(a3 + 16);
  v56 = a5;
  *(unint64_t *)((char *)a1 + ((a4 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a4) - 1;
  v7 = v6 - 1;
  v8 = a3 + 56;
  v58 = a3 + 56;
  do
  {
    v54 = v7;
    do
    {
      while (1)
      {
        v10 = a5[3];
        v9 = a5[4];
        if (v9)
        {
          v11 = (v9 - 1) & v9;
          v12 = __clz(__rbit64(v9)) | (v10 << 6);
          goto LABEL_16;
        }
        v13 = v10 + 1;
        if (__OFADD__(v10, 1))
        {
          __break(1u);
LABEL_79:
          __break(1u);
          return;
        }
        v14 = (unint64_t)(a5[2] + 64) >> 6;
        if (v13 >= v14)
        {
          v13 = a5[3];
LABEL_75:
          a5[3] = v13;
          a5[4] = 0;
          swift_retain();
          specialized _NativeSet.extractSubset(using:count:)(a1, v53, v54, v5);
          return;
        }
        v15 = a5[1];
        v16 = *(_QWORD *)(v15 + 8 * v13);
        if (!v16)
        {
          v17 = v10 + 2;
          if (v10 + 2 >= v14)
            goto LABEL_75;
          v16 = *(_QWORD *)(v15 + 8 * v17);
          if (!v16)
          {
            if (v10 + 3 >= v14)
              goto LABEL_76;
            v16 = *(_QWORD *)(v15 + 8 * (v10 + 3));
            if (v16)
            {
              v13 = v10 + 3;
              goto LABEL_15;
            }
            v17 = v10 + 4;
            if (v10 + 4 >= v14)
            {
              v13 = v10 + 3;
              goto LABEL_75;
            }
            v16 = *(_QWORD *)(v15 + 8 * v17);
            if (!v16)
            {
              v13 = v10 + 5;
              if (v10 + 5 >= v14)
              {
LABEL_76:
                v13 = v17;
                goto LABEL_75;
              }
              v16 = *(_QWORD *)(v15 + 8 * v13);
              if (!v16)
              {
                v13 = v14 - 1;
                v49 = v10 + 6;
                do
                {
                  if (v14 == v49)
                    goto LABEL_75;
                  v16 = *(_QWORD *)(v15 + 8 * v49++);
                }
                while (!v16);
                v13 = v49 - 1;
              }
              goto LABEL_15;
            }
          }
          v13 = v17;
        }
LABEL_15:
        v11 = (v16 - 1) & v16;
        v12 = __clz(__rbit64(v16)) + (v13 << 6);
        v10 = v13;
LABEL_16:
        v18 = *(void **)(*(_QWORD *)(*a5 + 48) + 8 * v12);
        a5[3] = v10;
        a5[4] = v11;
        Hasher.init(_seed:)();
        if (v18)
        {
          v19 = v18;
          if (objc_msgSend(v19, sel_acceptanceStatus, v53) == (id)2
            && (v20 = objc_msgSend(v19, sel_userIdentity),
                v21 = objc_msgSend(v20, sel_userRecordID),
                v20,
                v21))
          {
            v22 = objc_msgSend(v21, sel_recordName);

            static String._unconditionallyBridgeFromObjectiveC(_:)();
            Hasher._combine(_:)(1u);
            v8 = v58;
            String.hash(into:)();
            swift_bridgeObjectRelease();
          }
          else
          {
            Hasher._combine(_:)(0);
          }

        }
        else
        {
          String.hash(into:)();
        }
        v23 = Hasher._finalize()();
        v24 = -1 << *(_BYTE *)(v5 + 32);
        v25 = v23 & ~v24;
        if (((*(_QWORD *)(v8 + ((v25 >> 3) & 0xFFFFFFFFFFFFF8)) >> v25) & 1) != 0)
          break;
LABEL_3:

        a5 = v56;
      }
      v26 = ~v24;
      while (1)
      {
        v27 = *(void **)(*(_QWORD *)(v5 + 48) + 8 * v25);
        if (v27)
        {
          v28 = v27;
          if (objc_msgSend(v28, sel_acceptanceStatus) != (id)2
            || (v29 = objc_msgSend(v28, sel_userIdentity),
                v30 = objc_msgSend(v29, sel_userRecordID),
                v29,
                !v30))
          {

LABEL_33:
            goto LABEL_26;
          }
          v31 = objc_msgSend(v30, sel_recordName);

          if (!v18)
            goto LABEL_33;
        }
        else if (!v18)
        {
          goto LABEL_70;
        }
        v32 = v18;
        if (objc_msgSend(v32, sel_acceptanceStatus) != (id)2
          || (v33 = objc_msgSend(v32, sel_userIdentity),
              v34 = objc_msgSend(v33, sel_userRecordID),
              v33,
              !v34))
        {

          goto LABEL_26;
        }
        v35 = objc_msgSend(v34, sel_recordName);

        if (!v27)
          goto LABEL_26;
        v36 = v32;
        v37 = v27;
        if (objc_msgSend(v37, sel_acceptanceStatus) == (id)2)
        {
          v38 = objc_msgSend(v37, sel_userIdentity);
          v39 = objc_msgSend(v38, sel_userRecordID);

          if (v39)
          {
            v40 = objc_msgSend(v39, sel_recordName);

            v39 = (id)static String._unconditionallyBridgeFromObjectiveC(_:)();
            v42 = v41;

            goto LABEL_43;
          }
        }
        else
        {
          v39 = 0;
        }
        v42 = 0;
LABEL_43:
        v59 = v36;
        if (objc_msgSend(v36, sel_acceptanceStatus, v53) != (id)2)
        {
          v46 = 0;
          v44 = 0;
          if (!v42)
            break;
          goto LABEL_49;
        }
        v43 = objc_msgSend(v36, sel_userIdentity);
        v44 = objc_msgSend(v43, sel_userRecordID);

        if (v44)
        {
          v45 = objc_msgSend(v44, sel_recordName);

          v46 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          v44 = v47;

          if (!v42)
            break;
          goto LABEL_49;
        }
        v46 = 0;
        if (!v42)
          break;
LABEL_49:
        if (!v44)
        {
          swift_bridgeObjectRelease();

          goto LABEL_55;
        }
        if (v39 == (id)v46 && v42 == v44)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          v50 = v59;
          v37 = v59;
          v5 = a3;
          goto LABEL_68;
        }
        v48 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        v37 = v59;
        v5 = a3;
        v8 = v58;
        if ((v48 & 1) != 0)
          goto LABEL_69;
LABEL_26:
        v25 = (v25 + 1) & v26;
        if (((*(_QWORD *)(v8 + ((v25 >> 3) & 0xFFFFFFFFFFFFF8)) >> v25) & 1) == 0)
          goto LABEL_3;
      }

      if (v44)
      {

        swift_bridgeObjectRelease();
LABEL_55:
        v5 = a3;
        v8 = v58;
        goto LABEL_26;
      }
      v5 = a3;
      v50 = v59;
LABEL_68:
      v8 = v58;

LABEL_69:
LABEL_70:
      v51 = (v25 >> 3) & 0x1FFFFFFFFFFFFFF8;
      a5 = v56;
      v52 = *(unint64_t *)((char *)a1 + v51);
      *(unint64_t *)((char *)a1 + v51) = v52 & ~(1 << v25);
    }
    while ((v52 & (1 << v25)) == 0);
    v7 = v54 - 1;
    if (__OFSUB__(v54, 1))
      goto LABEL_79;
  }
  while (v54 != 1);
}

uint64_t specialized _NativeSet.extractSubset(using:count:)(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t result;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v35;
  unint64_t *v36;
  uint64_t v37;
  uint64_t v38;

  v8 = type metadata accessor for Participant();
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a3)
  {
    swift_release();
    return MEMORY[0x24BEE4B08];
  }
  if (*(_QWORD *)(a4 + 16) == a3)
    return a4;
  v38 = v9;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Participant>);
  result = static _SetStorage.allocate(capacity:)();
  v12 = result;
  v36 = a1;
  v37 = a2;
  if (a2 < 1)
    v14 = 0;
  else
    v14 = *a1;
  v15 = 0;
  v16 = result + 56;
  v17 = v38;
  while (1)
  {
    if (v14)
    {
      v18 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v19 = v18 | (v15 << 6);
    }
    else
    {
      v20 = v15 + 1;
      if (__OFADD__(v15, 1))
        goto LABEL_40;
      if (v20 >= v37)
      {
LABEL_37:
        swift_release();
        return v12;
      }
      v21 = v36[v20];
      ++v15;
      if (!v21)
      {
        v15 = v20 + 1;
        if (v20 + 1 >= v37)
          goto LABEL_37;
        v21 = v36[v15];
        if (!v21)
        {
          v15 = v20 + 2;
          if (v20 + 2 >= v37)
            goto LABEL_37;
          v21 = v36[v15];
          if (!v21)
          {
            v22 = v20 + 3;
            if (v22 >= v37)
              goto LABEL_37;
            v21 = v36[v22];
            if (!v21)
            {
              while (1)
              {
                v15 = v22 + 1;
                if (__OFADD__(v22, 1))
                  goto LABEL_41;
                if (v15 >= v37)
                  goto LABEL_37;
                v21 = v36[v15];
                ++v22;
                if (v21)
                  goto LABEL_24;
              }
            }
            v15 = v22;
          }
        }
      }
LABEL_24:
      v14 = (v21 - 1) & v21;
      v19 = __clz(__rbit64(v21)) + (v15 << 6);
    }
    v23 = a4;
    v24 = *(_QWORD *)(a4 + 48);
    v25 = *(_QWORD *)(v17 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v17 + 16))(v11, v24 + v25 * v19, v8);
    lazy protocol witness table accessor for type CKShareParticipant and conformance NSObject(&lazy protocol witness table cache variable for type Participant and conformance Participant, (uint64_t (*)(uint64_t))MEMORY[0x24BDD1F00], MEMORY[0x24BDD1F10]);
    result = dispatch thunk of Hashable._rawHashValue(seed:)();
    v26 = -1 << *(_BYTE *)(v12 + 32);
    v27 = result & ~v26;
    v28 = v27 >> 6;
    if (((-1 << v27) & ~*(_QWORD *)(v16 + 8 * (v27 >> 6))) != 0)
    {
      v29 = __clz(__rbit64((-1 << v27) & ~*(_QWORD *)(v16 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
      v17 = v38;
    }
    else
    {
      v30 = 0;
      v31 = (unint64_t)(63 - v26) >> 6;
      v17 = v38;
      do
      {
        if (++v28 == v31 && (v30 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v32 = v28 == v31;
        if (v28 == v31)
          v28 = 0;
        v30 |= v32;
        v33 = *(_QWORD *)(v16 + 8 * v28);
      }
      while (v33 == -1);
      v29 = __clz(__rbit64(~v33)) + (v28 << 6);
    }
    *(_QWORD *)(v16 + ((v29 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v29;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v17 + 32))(*(_QWORD *)(v12 + 48) + v29 * v25, v11, v8);
    ++*(_QWORD *)(v12 + 16);
    if (__OFSUB__(a3--, 1))
      break;
    a4 = v23;
    if (!a3)
      goto LABEL_37;
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void *v18;
  id v19;
  id v20;
  id v21;
  id v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  unint64_t *v34;
  uint64_t v35;

  v4 = a4;
  if (!a3)
  {
    v9 = MEMORY[0x24BEE4B08];
LABEL_43:
    swift_release();
    return v9;
  }
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
    return v4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<ParticipantHandleMap.ParticipantKind>);
  result = static _SetStorage.allocate(capacity:)();
  v9 = result;
  v34 = a1;
  if (a2 < 1)
    v10 = 0;
  else
    v10 = *a1;
  v11 = 0;
  v12 = result + 56;
  v32 = a2;
  v33 = v4;
  while (1)
  {
    if (v10)
    {
      v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v14 = v13 | (v11 << 6);
      goto LABEL_24;
    }
    v15 = v11 + 1;
    if (__OFADD__(v11, 1))
      goto LABEL_46;
    if (v15 >= a2)
      goto LABEL_43;
    v16 = v34[v15];
    ++v11;
    if (!v16)
    {
      v11 = v15 + 1;
      if (v15 + 1 >= a2)
        goto LABEL_43;
      v16 = v34[v11];
      if (!v16)
      {
        v11 = v15 + 2;
        if (v15 + 2 >= a2)
          goto LABEL_43;
        v16 = v34[v11];
        if (!v16)
          break;
      }
    }
LABEL_23:
    v10 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v11 << 6);
LABEL_24:
    v18 = *(void **)(*(_QWORD *)(v4 + 48) + 8 * v14);
    Hasher.init(_seed:)();
    if (v18)
    {
      v35 = v11;
      v19 = v18;
      if (objc_msgSend(v19, sel_acceptanceStatus) == (id)2
        && (v20 = objc_msgSend(v19, sel_userIdentity),
            v21 = objc_msgSend(v20, sel_userRecordID),
            v20,
            v21))
      {
        v22 = objc_msgSend(v21, sel_recordName);

        static String._unconditionallyBridgeFromObjectiveC(_:)();
        Hasher._combine(_:)(1u);
        v4 = v33;
        String.hash(into:)();
        a2 = v32;
        swift_bridgeObjectRelease();
      }
      else
      {
        Hasher._combine(_:)(0);
      }

      v11 = v35;
    }
    else
    {
      String.hash(into:)();
    }
    result = Hasher._finalize()();
    v23 = -1 << *(_BYTE *)(v9 + 32);
    v24 = result & ~v23;
    v25 = v24 >> 6;
    if (((-1 << v24) & ~*(_QWORD *)(v12 + 8 * (v24 >> 6))) != 0)
    {
      v26 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)(v12 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_45;
        }
        v29 = v25 == v28;
        if (v25 == v28)
          v25 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v12 + 8 * v25);
      }
      while (v30 == -1);
      v26 = __clz(__rbit64(~v30)) + (v25 << 6);
    }
    *(_QWORD *)(v12 + ((v26 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v26;
    *(_QWORD *)(*(_QWORD *)(v9 + 48) + 8 * v26) = v18;
    ++*(_QWORD *)(v9 + 16);
    if (__OFSUB__(v5--, 1))
    {
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
      goto LABEL_47;
    }
    if (!v5)
      goto LABEL_43;
  }
  v17 = v15 + 3;
  if (v17 >= a2)
    goto LABEL_43;
  v16 = v34[v17];
  if (v16)
  {
    v11 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    v11 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v11 >= a2)
      goto LABEL_43;
    v16 = v34[v11];
    ++v17;
    if (v16)
      goto LABEL_23;
  }
LABEL_47:
  __break(1u);
  return result;
}

uint64_t specialized closure #1 in FastSyncStateMachine.startActivity(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;

  v6[4] = a5;
  v6[5] = a6;
  v6[2] = a1;
  v6[3] = a4;
  return swift_task_switch();
}

uint64_t specialized closure #1 in FastSyncStateMachine.startActivity(_:)()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(uint64_t, _QWORD);

  static Task<>.checkCancellation()();
  v1 = *(_QWORD *)(v0 + 40);
  v4 = (uint64_t (*)(uint64_t, _QWORD))(**(int **)(v0 + 24) + *(_QWORD *)(v0 + 24));
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 48) = v2;
  *v2 = v0;
  v2[1] = specialized closure #1 in FastSyncStateMachine.startActivity(_:);
  return v4(v1, 0);
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t specialized closure #2 in FastSyncStateMachine.startActivity(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  _QWORD *v8;

  v7[4] = a6;
  v7[5] = a7;
  v7[2] = a1;
  v7[3] = a5;
  v8 = (_QWORD *)swift_task_alloc();
  v7[6] = v8;
  *v8 = v7;
  v8[1] = specialized closure #2 in FastSyncStateMachine.startActivity(_:);
  return Task<>.value.getter();
}

{
  _QWORD *v7;
  _QWORD *v8;

  v7[4] = a6;
  v7[5] = a7;
  v7[2] = a1;
  v7[3] = a5;
  v8 = (_QWORD *)swift_task_alloc();
  v7[6] = v8;
  *v8 = v7;
  v8[1] = specialized closure #2 in FastSyncStateMachine.startActivity(_:);
  return Task<>.value.getter();
}

uint64_t specialized closure #2 in FastSyncStateMachine.startActivity(_:)()
{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(uint64_t, _QWORD);

  static Task<>.checkCancellation()();
  v1 = *(_QWORD *)(v0 + 40);
  v4 = (uint64_t (*)(uint64_t, _QWORD))(**(int **)(v0 + 24) + *(_QWORD *)(v0 + 24));
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 56) = v2;
  *v2 = v0;
  v2[1] = specialized closure #2 in FastSyncStateMachine.startActivity(_:);
  return v4(v1, 0);
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(uint64_t, _QWORD);

  static Task<>.checkCancellation()();
  v1 = *(_QWORD *)(v0 + 40);
  v4 = (uint64_t (*)(uint64_t, _QWORD))(**(int **)(v0 + 24) + *(_QWORD *)(v0 + 24));
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 56) = v2;
  *v2 = v0;
  v2[1] = specialized closure #2 in FastSyncStateMachine.startActivity(_:);
  return v4(v1, 0);
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t (*v2)(void);

  **(_QWORD **)(v0 + 16) = *(_QWORD *)(v0 + 40);
  v2 = *(uint64_t (**)(void))(v0 + 8);
  swift_retain();
  return v2();
}

uint64_t specialized closure #3 in FastSyncStateMachine.startActivity(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  _QWORD *v12;

  *(_QWORD *)(v7 + 16) = a1;
  v12 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v7 + 24) = v12;
  *v12 = v7;
  v12[1] = specialized closure #3 in FastSyncStateMachine.startActivity(_:);
  return specialized closure #3 in FastSyncStateMachine.startActivity(_:)(a4, a5, a6, a7);
}

{
  uint64_t v7;
  _QWORD *v12;

  *(_QWORD *)(v7 + 16) = a1;
  v12 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v7 + 24) = v12;
  *v12 = v7;
  v12[1] = specialized closure #3 in FastSyncStateMachine.startActivity(_:);
  return specialized closure #3 in FastSyncStateMachine.startActivity(_:)(a4, a5, a6, a7);
}

uint64_t specialized closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v10 = *a5;
  v11 = a5[1];
  v12 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v5 + 16) = v12;
  *v12 = v5;
  v12[1] = specialized closure #3 in closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:);
  return specialized closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:)(a1, a2, a3, a4, v10, v11);
}

{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v10 = *a5;
  v11 = a5[1];
  v12 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v5 + 16) = v12;
  *v12 = v5;
  v12[1] = specialized closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:);
  return specialized closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:)(a1, a2, a3, a4, v10, v11);
}

uint64_t specialized closure #1 in closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v12 = *a6;
  v13 = a6[1];
  v14 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v6 + 16) = v14;
  *v14 = v6;
  v14[1] = specialized closure #3 in closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:);
  return specialized closure #1 in closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:)(a1, a2, a3, a4, a5, v12, v13);
}

{
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v12 = *a6;
  v13 = a6[1];
  v14 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v6 + 16) = v14;
  *v14 = v6;
  v14[1] = specialized closure #3 in closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:);
  return specialized closure #1 in closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:)(a1, a2, a3, a4, a5, v12, v13);
}

uint64_t specialized closure #2 in closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v12 = *a6;
  v13 = a6[1];
  v14 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v6 + 16) = v14;
  *v14 = v6;
  v14[1] = specialized closure #3 in closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:);
  return specialized closure #2 in closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:)(a1, a2, a3, a4, a5, v12, v13);
}

{
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v12 = *a6;
  v13 = a6[1];
  v14 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v6 + 16) = v14;
  *v14 = v6;
  v14[1] = specialized closure #3 in closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:);
  return specialized closure #2 in closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:)(a1, a2, a3, a4, a5, v12, v13);
}

uint64_t specialized closure #1 in GroupSessionMessengerController._makeTasks()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v10 = *a5;
  v11 = a5[1];
  v12 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v5 + 16) = v12;
  *v12 = v5;
  v12[1] = specialized closure #3 in closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:);
  return specialized closure #1 in GroupSessionMessengerController._makeTasks()(a1, a2, a3, a4, v10, v11);
}

{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v10 = *a5;
  v11 = a5[1];
  v12 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v5 + 16) = v12;
  *v12 = v5;
  v12[1] = specialized closure #3 in closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:);
  return specialized closure #1 in GroupSessionMessengerController._makeTasks()(a1, a2, a3, a4, v10, v11);
}

uint64_t specialized closure #2 in GroupSessionMessengerController._makeTasks()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v10 = *a5;
  v11 = a5[1];
  v12 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v5 + 16) = v12;
  *v12 = v5;
  v12[1] = specialized closure #3 in closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:);
  return specialized closure #2 in GroupSessionMessengerController._makeTasks()(a1, a2, a3, a4, v10, v11);
}

{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v10 = *a5;
  v11 = a5[1];
  v12 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v5 + 16) = v12;
  *v12 = v5;
  v12[1] = specialized closure #3 in closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:);
  return specialized closure #2 in GroupSessionMessengerController._makeTasks()(a1, a2, a3, a4, v10, v11);
}

uint64_t specialized closure #3 in FastSyncStateMachine.startActivity(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);
  uint64_t (*v8)(void);

  v4 = *v2;
  v5 = *v2;
  swift_task_dealloc();
  if (v1)
  {
    v6 = *(uint64_t (**)(void))(v5 + 8);
  }
  else
  {
    **(_QWORD **)(v4 + 16) = a1;
    v8 = *(uint64_t (**)(void))(v5 + 8);
    swift_retain();
    v6 = v8;
  }
  return v6();
}

uint64_t specialized _ArrayProtocol.filter(_:)(uint64_t a1, uint64_t a2, uint64_t *a3, void (*a4)(BOOL, uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void (*v18)(BOOL, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE v22[8];
  uint64_t v23;

  v18 = a4;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<Set<Participant>>.Continuation.YieldResult);
  v19 = *(_QWORD *)(v8 - 8);
  v20 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = MEMORY[0x24BEE4AF8];
  v23 = MEMORY[0x24BEE4AF8];
  v12 = *(_QWORD *)(a1 + 16);
  if (v12)
  {
    v17 = v4;
    v13 = a1 + 32;
    v14 = MEMORY[0x24BEE4AF8];
    do
    {
      outlined init with copy of TaskPriority?(v13, (uint64_t)v22, a3);
      if (swift_weakLoadStrong())
      {
        v21 = a2;
        swift_bridgeObjectRetain();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<Set<Participant>>.Continuation);
        AsyncStream.Continuation.yield(_:)();
        swift_release();
        (*(void (**)(char *, uint64_t))(v19 + 8))(v10, v20);
        outlined init with take of ParticipantPresenceCoordinator.ConnectionManagerStore.SharedConnection?((uint64_t)v22, (uint64_t)&v21, a3);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v18(0, *(_QWORD *)(v14 + 16) + 1, 1);
        v14 = v23;
        v16 = *(_QWORD *)(v23 + 16);
        v15 = *(_QWORD *)(v23 + 24);
        if (v16 >= v15 >> 1)
        {
          v18(v15 > 1, v16 + 1, 1);
          v14 = v23;
        }
        *(_QWORD *)(v14 + 16) = v16 + 1;
        outlined init with take of ParticipantPresenceCoordinator.ConnectionManagerStore.SharedConnection?((uint64_t)&v21, v14 + 8 * v16 + 32, a3);
      }
      else
      {
        outlined destroy of TaskPriority?((uint64_t)v22, a3);
      }
      v13 += 8;
      --v12;
    }
    while (v12);
    return v23;
  }
  return result;
}

uint64_t specialized CollaborationConnectionManager.didLeaveGroupSession(_:)()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 48) = v0;
  return swift_task_switch();
}

{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  char *v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD **)(v0 + 48);
  v2 = v1[21];
  *(_QWORD *)(v0 + 56) = v2;
  if (v2)
  {
    swift_retain();
    return swift_task_switch();
  }
  else
  {
    v1[21] = 0;
    v4 = (char *)v1 + *(_QWORD *)(*v1 + 176);
    swift_beginAccess();
    v5 = *(_QWORD *)(*(_QWORD *)v4 + 16);
    if (v5)
    {
      v6 = *(_QWORD *)v4 + 32;
      swift_bridgeObjectRetain();
      do
      {
        outlined init with copy of TaskPriority?(v6, v0 + 40, &demangling cache variable for type metadata for CollaborationConnectionManager<PersonalDeviceCoordinationActivity, PersonalGroupSessionProvider<PersonalDeviceCoordinationActivity>, PresenceUpdateMessage>.WeakContainer<AsyncBufferedQueue<Set<Participant>>>);
        if (swift_weakLoadStrong())
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<Set<Participant>>.Continuation);
          AsyncStream.Continuation.finish()();
          swift_release();
        }
        outlined destroy of TaskPriority?(v0 + 40, &demangling cache variable for type metadata for CollaborationConnectionManager<PersonalDeviceCoordinationActivity, PersonalGroupSessionProvider<PersonalDeviceCoordinationActivity>, PresenceUpdateMessage>.WeakContainer<AsyncBufferedQueue<Set<Participant>>>);
        v6 += 8;
        --v5;
      }
      while (v5);
      swift_bridgeObjectRelease();
    }
    *(_QWORD *)v4 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

{
  specialized GroupSessionMessengerController.finish()();
  swift_release();
  return swift_task_switch();
}

{
  uint64_t v0;
  _QWORD *v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD **)(v0 + 48);
  v1[21] = 0;
  swift_release();
  v2 = (char *)v1 + *(_QWORD *)(*v1 + 176);
  swift_beginAccess();
  v3 = *(_QWORD *)(*(_QWORD *)v2 + 16);
  if (v3)
  {
    v4 = *(_QWORD *)v2 + 32;
    swift_bridgeObjectRetain();
    do
    {
      outlined init with copy of TaskPriority?(v4, v0 + 40, &demangling cache variable for type metadata for CollaborationConnectionManager<PersonalDeviceCoordinationActivity, PersonalGroupSessionProvider<PersonalDeviceCoordinationActivity>, PresenceUpdateMessage>.WeakContainer<AsyncBufferedQueue<Set<Participant>>>);
      if (swift_weakLoadStrong())
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<Set<Participant>>.Continuation);
        AsyncStream.Continuation.finish()();
        swift_release();
      }
      outlined destroy of TaskPriority?(v0 + 40, &demangling cache variable for type metadata for CollaborationConnectionManager<PersonalDeviceCoordinationActivity, PersonalGroupSessionProvider<PersonalDeviceCoordinationActivity>, PresenceUpdateMessage>.WeakContainer<AsyncBufferedQueue<Set<Participant>>>);
      v4 += 8;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease();
  }
  *(_QWORD *)v2 = MEMORY[0x24BEE4AF8];
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 48) = v0;
  return swift_task_switch();
}

{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  char *v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD **)(v0 + 48);
  v2 = v1[21];
  *(_QWORD *)(v0 + 56) = v2;
  if (v2)
  {
    swift_retain();
    return swift_task_switch();
  }
  else
  {
    v1[21] = 0;
    v4 = (char *)v1 + *(_QWORD *)(*v1 + 176);
    swift_beginAccess();
    v5 = *(_QWORD *)(*(_QWORD *)v4 + 16);
    if (v5)
    {
      v6 = *(_QWORD *)v4 + 32;
      swift_bridgeObjectRetain();
      do
      {
        outlined init with copy of TaskPriority?(v6, v0 + 40, &demangling cache variable for type metadata for CollaborationConnectionManager<CKShareCollaborationActivity, CKShareGroupSessionProvider<CKShareCollaborationActivity>, PresenceUpdateMessage>.WeakContainer<AsyncBufferedQueue<Set<Participant>>>);
        if (swift_weakLoadStrong())
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<Set<Participant>>.Continuation);
          AsyncStream.Continuation.finish()();
          swift_release();
        }
        outlined destroy of TaskPriority?(v0 + 40, &demangling cache variable for type metadata for CollaborationConnectionManager<CKShareCollaborationActivity, CKShareGroupSessionProvider<CKShareCollaborationActivity>, PresenceUpdateMessage>.WeakContainer<AsyncBufferedQueue<Set<Participant>>>);
        v6 += 8;
        --v5;
      }
      while (v5);
      swift_bridgeObjectRelease();
    }
    *(_QWORD *)v4 = MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

{
  specialized GroupSessionMessengerController.finish()();
  swift_release();
  return swift_task_switch();
}

{
  uint64_t v0;
  _QWORD *v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD **)(v0 + 48);
  v1[21] = 0;
  swift_release();
  v2 = (char *)v1 + *(_QWORD *)(*v1 + 176);
  swift_beginAccess();
  v3 = *(_QWORD *)(*(_QWORD *)v2 + 16);
  if (v3)
  {
    v4 = *(_QWORD *)v2 + 32;
    swift_bridgeObjectRetain();
    do
    {
      outlined init with copy of TaskPriority?(v4, v0 + 40, &demangling cache variable for type metadata for CollaborationConnectionManager<CKShareCollaborationActivity, CKShareGroupSessionProvider<CKShareCollaborationActivity>, PresenceUpdateMessage>.WeakContainer<AsyncBufferedQueue<Set<Participant>>>);
      if (swift_weakLoadStrong())
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<Set<Participant>>.Continuation);
        AsyncStream.Continuation.finish()();
        swift_release();
      }
      outlined destroy of TaskPriority?(v0 + 40, &demangling cache variable for type metadata for CollaborationConnectionManager<CKShareCollaborationActivity, CKShareGroupSessionProvider<CKShareCollaborationActivity>, PresenceUpdateMessage>.WeakContainer<AsyncBufferedQueue<Set<Participant>>>);
      v4 += 8;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease();
  }
  *(_QWORD *)v2 = MEMORY[0x24BEE4AF8];
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void specialized CollaborationConnectionManager.handleGroupSessionStateChange(_:state:)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void **v7;
  int v8;
  void *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  id v13;
  id v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;

  v4 = __swift_instantiateConcreteTypeFromMangledName(a3);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (void **)((char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  GroupSession.activity.getter();
  (*(void (**)(void **, uint64_t, uint64_t))(v5 + 16))(v7, a2, v4);
  v8 = (*(uint64_t (**)(void **, uint64_t))(v5 + 88))(v7, v4);
  if (v8 == *MEMORY[0x24BDD1E20])
  {
    (*(void (**)(void **, uint64_t))(v5 + 96))(v7, v4);
    v9 = *v7;
    if (one-time initialization token for tabGroup != -1)
      swift_once();
    v10 = type metadata accessor for Logger();
    __swift_project_value_buffer(v10, (uint64_t)static Logger.tabGroup);
    v12 = v35;
    v11 = v36;
    swift_bridgeObjectRetain();
    v13 = v9;
    swift_bridgeObjectRetain();
    v14 = v9;
    v15 = Logger.logObject.getter();
    v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      v17 = swift_slowAlloc();
      v18 = (_QWORD *)swift_slowAlloc();
      v19 = swift_slowAlloc();
      v37 = v19;
      *(_DWORD *)v17 = 136446466;
      swift_bridgeObjectRetain();
      v34 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v11, &v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v17 + 12) = 2112;
      v20 = v9;
      v21 = _swift_stdlib_bridgeErrorToNSError();
      v34 = v21;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *v18 = v21;

      _os_log_impl(&dword_24A3EF000, v15, v16, "Changed state to invalidated in groupSession for activity %{public}s with error: %@", (uint8_t *)v17, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x24BD0F964](v18, -1, -1);
      swift_arrayDestroy();
      MEMORY[0x24BD0F964](v19, -1, -1);
      MEMORY[0x24BD0F964](v17, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();

    }
    swift_willThrow();
    goto LABEL_19;
  }
  if (v8 == *MEMORY[0x24BDD1E38])
  {
    if (one-time initialization token for tabGroup != -1)
      swift_once();
    v22 = type metadata accessor for Logger();
    __swift_project_value_buffer(v22, (uint64_t)static Logger.tabGroup);
    v24 = v35;
    v23 = v36;
    swift_bridgeObjectRetain_n();
    v25 = Logger.logObject.getter();
    v26 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v25, v26))
    {
      v27 = (uint8_t *)swift_slowAlloc();
      v28 = swift_slowAlloc();
      v37 = v28;
      *(_DWORD *)v27 = 136446210;
      swift_bridgeObjectRetain();
      v34 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v23, &v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      v29 = "Changed state to waiting in groupSession for activity %{public}s";
LABEL_18:
      _os_log_impl(&dword_24A3EF000, v25, v26, v29, v27, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24BD0F964](v28, -1, -1);
      MEMORY[0x24BD0F964](v27, -1, -1);

LABEL_19:
      swift_bridgeObjectRelease();
      return;
    }
LABEL_20:
    swift_bridgeObjectRelease_n();

    return;
  }
  if (v8 == *MEMORY[0x24BDD1E30])
  {
    if (one-time initialization token for tabGroup != -1)
      swift_once();
    v30 = type metadata accessor for Logger();
    __swift_project_value_buffer(v30, (uint64_t)static Logger.tabGroup);
    v32 = v35;
    v31 = v36;
    swift_bridgeObjectRetain_n();
    v25 = Logger.logObject.getter();
    v26 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v25, v26))
    {
      v27 = (uint8_t *)swift_slowAlloc();
      v28 = swift_slowAlloc();
      v37 = v28;
      *(_DWORD *)v27 = 136446210;
      swift_bridgeObjectRetain();
      v34 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v31, &v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      v29 = "Changed state to joined in groupSession for activity %{public}s";
      goto LABEL_18;
    }
    goto LABEL_20;
  }
  swift_bridgeObjectRelease();
  (*(void (**)(void **, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t specialized GroupSessionMessengerController.init(groupSession:)(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = v1;
  v2[5] = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<(PresenceUpdateMessage, GroupSessionMessenger.MessageContext)>.Continuation.BufferingPolicy);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = swift_task_alloc();
  v2[6] = v7;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<PresenceUpdateMessage>.Continuation.BufferingPolicy);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = swift_task_alloc();
  v2[7] = v10;
  swift_defaultActor_initialize();
  v11 = *MEMORY[0x24BEE6A10];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 104))(v10, v11, v8);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncBufferedQueue<PresenceUpdateMessage>);
  swift_allocObject();
  v3[15] = specialized AsyncBufferedQueue.init(bufferingPolicy:)(v10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 104))(v7, v11, v5);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncBufferedQueue<(PresenceUpdateMessage, GroupSessionMessenger.MessageContext)>);
  swift_allocObject();
  v3[16] = specialized AsyncBufferedQueue.init(bufferingPolicy:)(v7);
  v3[18] = MEMORY[0x24BEE4AF8];
  v3[14] = a1;
  type metadata accessor for GroupSessionMessenger();
  swift_allocObject();
  swift_retain_n();
  v3[17] = GroupSessionMessenger.init<A>(session:)();
  return swift_task_switch();
}

{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = v1;
  v2[5] = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<(PresenceUpdateMessage, GroupSessionMessenger.MessageContext)>.Continuation.BufferingPolicy);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = swift_task_alloc();
  v2[6] = v7;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<PresenceUpdateMessage>.Continuation.BufferingPolicy);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = swift_task_alloc();
  v2[7] = v10;
  swift_defaultActor_initialize();
  v11 = *MEMORY[0x24BEE6A10];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 104))(v10, v11, v8);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncBufferedQueue<PresenceUpdateMessage>);
  swift_allocObject();
  v3[15] = specialized AsyncBufferedQueue.init(bufferingPolicy:)(v10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 104))(v7, v11, v5);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncBufferedQueue<(PresenceUpdateMessage, GroupSessionMessenger.MessageContext)>);
  swift_allocObject();
  v3[16] = specialized AsyncBufferedQueue.init(bufferingPolicy:)(v7);
  v3[18] = MEMORY[0x24BEE4AF8];
  v3[14] = a1;
  type metadata accessor for GroupSessionMessenger();
  swift_allocObject();
  swift_retain_n();
  v3[17] = GroupSessionMessenger.init<A>(session:)();
  return swift_task_switch();
}

uint64_t specialized GroupSessionMessengerController.init(groupSession:)()
{
  uint64_t v0;
  uint64_t v1;

  v1 = specialized GroupSessionMessengerController._makeTasks()();
  swift_beginAccess();
  specialized Array.append<A>(contentsOf:)(v1);
  swift_endAccess();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 40));
}

{
  uint64_t v0;
  uint64_t v1;

  v1 = specialized GroupSessionMessengerController._makeTasks()();
  swift_beginAccess();
  specialized Array.append<A>(contentsOf:)(v1);
  swift_endAccess();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 40));
}

uint64_t specialized closure #3 in FastSyncStateMachine.startActivity(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v5;

  v4[4] = a3;
  v4[5] = a4;
  v4[3] = a2;
  v5 = (_QWORD *)swift_task_alloc();
  v4[6] = v5;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersonalGroupSessionProvider<PersonalDeviceCoordinationActivity>);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  *v5 = v4;
  v5[1] = specialized closure #3 in FastSyncStateMachine.startActivity(_:);
  return Task.value.getter();
}

{
  _QWORD *v4;
  _QWORD *v5;

  v4[4] = a3;
  v4[5] = a4;
  v4[3] = a2;
  v5 = (_QWORD *)swift_task_alloc();
  v4[6] = v5;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CKShareGroupSessionProvider<CKShareCollaborationActivity>);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  *v5 = v4;
  v5[1] = specialized closure #3 in FastSyncStateMachine.startActivity(_:);
  return Task.value.getter();
}

uint64_t specialized closure #3 in FastSyncStateMachine.startActivity(_:)()
{
  void *v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 56) = v0;
  swift_task_dealloc();
  if (v0)

  return swift_task_switch();
}

{
  _QWORD *v0;
  int *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t (*v5)(uint64_t, uint64_t);

  v2 = v0[2];
  v1 = (int *)v0[3];
  v0[8] = v2;
  v5 = (uint64_t (*)(uint64_t, uint64_t))((char *)v1 + *v1);
  swift_retain();
  v3 = (_QWORD *)swift_task_alloc();
  v0[9] = v3;
  *v3 = v0;
  v3[1] = specialized closure #3 in FastSyncStateMachine.startActivity(_:);
  return v5(v2, 1);
}

{
  swift_task_dealloc();
  swift_release();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v5)(uint64_t, _QWORD);

  swift_release();
  v1 = *(_QWORD *)(v0 + 56);
  static Task<>.checkCancellation()();
  if (v1)
    return (*(uint64_t (**)(void))(v0 + 8))();
  v3 = *(_QWORD *)(v0 + 40);
  v5 = (uint64_t (*)(uint64_t, _QWORD))(**(int **)(v0 + 24) + *(_QWORD *)(v0 + 24));
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 80) = v4;
  *v4 = v0;
  v4[1] = specialized closure #3 in FastSyncStateMachine.startActivity(_:);
  return v5(v3, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(uint64_t, _QWORD);

  static Task<>.checkCancellation()();
  v1 = *(_QWORD *)(v0 + 40);
  v4 = (uint64_t (*)(uint64_t, _QWORD))(**(int **)(v0 + 24) + *(_QWORD *)(v0 + 24));
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 80) = v2;
  *v2 = v0;
  v2[1] = specialized closure #3 in FastSyncStateMachine.startActivity(_:);
  return v4(v1, 0);
}

{
  void *v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 56) = v0;
  swift_task_dealloc();
  if (v0)

  return swift_task_switch();
}

{
  _QWORD *v0;
  int *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t (*v5)(uint64_t, uint64_t);

  v2 = v0[2];
  v1 = (int *)v0[3];
  v0[8] = v2;
  v5 = (uint64_t (*)(uint64_t, uint64_t))((char *)v1 + *v1);
  swift_retain();
  v3 = (_QWORD *)swift_task_alloc();
  v0[9] = v3;
  *v3 = v0;
  v3[1] = specialized closure #3 in FastSyncStateMachine.startActivity(_:);
  return v5(v2, 1);
}

{
  swift_task_dealloc();
  swift_release();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v5)(uint64_t, _QWORD);

  swift_release();
  v1 = *(_QWORD *)(v0 + 56);
  static Task<>.checkCancellation()();
  if (v1)
    return (*(uint64_t (**)(void))(v0 + 8))();
  v3 = *(_QWORD *)(v0 + 40);
  v5 = (uint64_t (*)(uint64_t, _QWORD))(**(int **)(v0 + 24) + *(_QWORD *)(v0 + 24));
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 80) = v4;
  *v4 = v0;
  v4[1] = specialized closure #3 in FastSyncStateMachine.startActivity(_:);
  return v5(v3, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(uint64_t, _QWORD);

  static Task<>.checkCancellation()();
  v1 = *(_QWORD *)(v0 + 40);
  v4 = (uint64_t (*)(uint64_t, _QWORD))(**(int **)(v0 + 24) + *(_QWORD *)(v0 + 24));
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 80) = v2;
  *v2 = v0;
  v2[1] = specialized closure #3 in FastSyncStateMachine.startActivity(_:);
  return v4(v1, 0);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v3;

  v1 = *v0;
  v3 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(_QWORD))(v3 + 8))(*(_QWORD *)(v1 + 40));
}

uint64_t specialized Sequence.compactMap<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t result;
  int64_t v15;
  unint64_t v16;
  unint64_t i;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  void *v28;
  id v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  uint64_t v38;

  v37 = a2;
  v3 = type metadata accessor for Participant();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = MEMORY[0x24BDAC7A8](v3);
  v7 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v33 - v8;
  v10 = *(_QWORD *)(a1 + 56);
  v35 = a1 + 56;
  v11 = 1 << *(_BYTE *)(a1 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & v10;
  v36 = (unint64_t)(v11 + 63) >> 6;
  v38 = a1;
  result = swift_bridgeObjectRetain();
  v15 = 0;
  v34 = (_QWORD *)MEMORY[0x24BEE4AF8];
  if (v13)
    goto LABEL_7;
LABEL_8:
  while (2)
  {
    v18 = v15 + 1;
    if (!__OFADD__(v15, 1))
    {
      if (v18 < v36)
      {
        v19 = *(_QWORD *)(v35 + 8 * v18);
        ++v15;
        if (v19)
          goto LABEL_23;
        v15 = v18 + 1;
        if (v18 + 1 >= v36)
          goto LABEL_34;
        v19 = *(_QWORD *)(v35 + 8 * v15);
        if (v19)
          goto LABEL_23;
        v15 = v18 + 2;
        if (v18 + 2 >= v36)
          goto LABEL_34;
        v19 = *(_QWORD *)(v35 + 8 * v15);
        if (v19)
          goto LABEL_23;
        v15 = v18 + 3;
        if (v18 + 3 >= v36)
          goto LABEL_34;
        v19 = *(_QWORD *)(v35 + 8 * v15);
        if (v19)
        {
LABEL_23:
          v13 = (v19 - 1) & v19;
          for (i = __clz(__rbit64(v19)) + (v15 << 6); ; i = v16 | (v15 << 6))
          {
            (*(void (**)(char *, unint64_t, uint64_t))(v4 + 16))(v9, *(_QWORD *)(v38 + 48) + *(_QWORD *)(v4 + 72) * i, v3);
            (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v7, v9, v3);
            v21 = Participant.handle.getter();
            v23 = v22;
            v24 = *(_QWORD *)(v37 + 112);
            if (!*(_QWORD *)(v24 + 16))
              goto LABEL_5;
            v25 = v21;
            swift_bridgeObjectRetain();
            v26 = specialized __RawDictionaryStorage.find<A>(_:)(v25, v23);
            if ((v27 & 1) == 0)
              break;
            v28 = *(void **)(*(_QWORD *)(v24 + 56) + 8 * v26);
            v29 = v28;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if (!v28)
              goto LABEL_6;
            (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
            result = swift_isUniquelyReferenced_nonNull_native();
            if ((result & 1) == 0)
            {
              result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v34[2] + 1, 1, v34);
              v34 = (_QWORD *)result;
            }
            v31 = v34[2];
            v30 = v34[3];
            if (v31 >= v30 >> 1)
            {
              result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v30 > 1), v31 + 1, 1, v34);
              v34 = (_QWORD *)result;
            }
            v32 = v34;
            v34[2] = v31 + 1;
            v32[v31 + 4] = v28;
            if (!v13)
              goto LABEL_8;
LABEL_7:
            v16 = __clz(__rbit64(v13));
            v13 &= v13 - 1;
          }
          swift_bridgeObjectRelease();
LABEL_5:
          swift_bridgeObjectRelease();
LABEL_6:
          result = (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v3);
          if (!v13)
            continue;
          goto LABEL_7;
        }
        v20 = v18 + 4;
        if (v20 < v36)
        {
          v19 = *(_QWORD *)(v35 + 8 * v20);
          if (v19)
          {
            v15 = v20;
            goto LABEL_23;
          }
          while (1)
          {
            v15 = v20 + 1;
            if (__OFADD__(v20, 1))
              goto LABEL_36;
            if (v15 >= v36)
              break;
            v19 = *(_QWORD *)(v35 + 8 * v15);
            ++v20;
            if (v19)
              goto LABEL_23;
          }
        }
      }
LABEL_34:
      swift_release();
      return (uint64_t)v34;
    }
    break;
  }
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

uint64_t specialized ParticipantPresenceCoordinator._startActivityForShare(_:tabGroupIdentifier:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2[5] = a1;
  v2[6] = v1;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncStream<(PresenceUpdateMessage, GroupSessionMessenger.MessageContext)>.Continuation.BufferingPolicy);
  v2[7] = v3;
  v2[8] = *(_QWORD *)(v3 - 8);
  v2[9] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t specialized ParticipantPresenceCoordinator._startActivityForShare(_:tabGroupIdentifier:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  id v13;
  char *v14;
  uint64_t v15;

  v2 = v0[8];
  v1 = v0[9];
  v3 = v0[7];
  v4 = (void *)v0[5];
  v5 = objc_msgSend(v4, sel_recordID);
  v6 = objc_msgSend(v5, sel_zoneID);

  v7 = objc_msgSend(v6, sel_zoneName);
  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v10 = v9;

  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = v4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CollaborationConnectionManager<CKShareCollaborationActivity, CKShareGroupSessionProvider<CKShareCollaborationActivity>, PresenceUpdateMessage>);
  v12 = (_QWORD *)swift_allocObject();
  v0[10] = v12;
  v13 = v4;
  swift_defaultActor_initialize();
  v12[21] = 0;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v2 + 104))(v1, *MEMORY[0x24BEE6A10], v3);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AsyncBufferedQueue<(PresenceUpdateMessage, GroupSessionMessenger.MessageContext)>);
  swift_allocObject();
  v12[22] = specialized AsyncBufferedQueue.init(bufferingPolicy:)(v1);
  v14 = (char *)v12 + *(_QWORD *)(*v12 + 160);
  v15 = type metadata accessor for Participant();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v14, 1, 1, v15);
  *(_QWORD *)((char *)v12 + *(_QWORD *)(*v12 + 168)) = MEMORY[0x24BEE4B08];
  *(_QWORD *)((char *)v12 + *(_QWORD *)(*v12 + 176)) = MEMORY[0x24BEE4AF8];
  v12[14] = 0;
  v12[15] = 0;
  v12[16] = 0xA000000000000000;
  v12[17] = v8;
  v12[18] = v10;
  v12[19] = partial apply for closure #1 in ParticipantPresenceCoordinator._startActivityForShare(_:tabGroupIdentifier:);
  v12[20] = v11;
  return swift_task_switch();
}

{
  uint64_t v0;

  swift_beginAccess();
  swift_retain();
  specialized FastSyncStateMachine.startActivity(_:)();
  *(_QWORD *)(v0 + 88) = 0;
  swift_endAccess();
  swift_release();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v9;
  void *v10;
  uint64_t v11;

  v1 = *(_QWORD *)(v0 + 88);
  v2 = *(void **)(v0 + 40);
  type metadata accessor for ParticipantHandleMap();
  v3 = swift_allocObject();
  v4 = v2;
  swift_defaultActor_initialize();
  *(_QWORD *)(v3 + 112) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  v5 = specialized static ParticipantHandleMap.handlesToParticipantKindsForShare(_:)(v4);
  v6 = *(_QWORD *)(v0 + 80);
  if (v1)
  {
    v7 = *(void **)(v0 + 40);
    swift_release();
    swift_release();

    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v9 = v5;
    v10 = *(void **)(v0 + 40);

    *(_QWORD *)(v3 + 112) = v9;
    swift_bridgeObjectRelease();
    v11 = ParticipantPresenceCoordinator._makeSharedConnectionSubscriptionTask(with:share:participantHandleMap:)(v6, v10, v3);
    swift_task_dealloc();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v0 + 8))(v3, *(_QWORD *)(v0 + 80), v11);
  }
}

{
  uint64_t v0;

  swift_release();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t specialized ParticipantPresenceCoordinator.ConnectionManagerStore.addSharedConnection(forShare:createIfNeededUsing:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;

  v4[41] = a3;
  v4[42] = a4;
  v4[39] = a1;
  v4[40] = a2;
  return swift_task_switch();
}

uint64_t specialized ParticipantPresenceCoordinator.ConnectionManagerStore.addSharedConnection(forShare:createIfNeededUsing:)()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  id v3;
  id v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  char v13;
  char v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint8_t *v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint8_t *v31;
  uint64_t v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t *v36;
  void *v37;
  uint64_t v38;
  id v39;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v41;
  uint8_t *v42;
  uint64_t v43;
  _BOOL8 v44;
  uint64_t v45;
  unint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  BOOL v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  NSObject *v61;
  os_log_type_t v62;
  uint8_t *v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  unint64_t v67;
  uint64_t v68;
  _BOOL8 v69;
  uint64_t v70;
  char v71;
  unint64_t v72;
  char v73;
  void *v74;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  __int128 v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  __int128 v86;
  __int128 v87;
  uint64_t v88;

  v2 = objc_msgSend(*(id *)(v0 + 312), sel_recordID);
  v3 = objc_msgSend(v2, sel_zoneID);

  v4 = objc_msgSend(v3, sel_safari_tabGroupRootRecordName);
  if (!v4)
  {
    if (one-time initialization token for tabGroup != -1)
      swift_once();
    v21 = type metadata accessor for Logger();
    __swift_project_value_buffer(v21, (uint64_t)static Logger.tabGroup);
    v22 = Logger.logObject.getter();
    v23 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v22, v23))
    {
      v24 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v24 = 0;
      _os_log_impl(&dword_24A3EF000, v22, v23, "Trying to start a collaboration activity with a CKShare not attached to a tab group", v24, 2u);
      MEMORY[0x24BD0F964](v24, -1, -1);
    }

    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v5 = (uint8_t *)(v0 + 296);
  v6 = *(_QWORD *)(v0 + 320);
  v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v9 = v8;

  v83 = v7;
  *(_QWORD *)(v0 + 344) = v7;
  *(_QWORD *)(v0 + 352) = v9;
  v10 = *(_QWORD *)(v0 + 320);
  if ((*(_BYTE *)(v6 + 152) & 1) != 0)
  {
    v11 = v0 + 312;
    v12 = (uint64_t *)(v10 + 144);
    swift_beginAccess();
    if (!*(_QWORD *)(*(_QWORD *)(v10 + 144) + 16)
      || (swift_bridgeObjectRetain(),
          swift_bridgeObjectRetain(),
          specialized __RawDictionaryStorage.find<A>(_:)(v7, v9),
          v14 = v13,
          swift_bridgeObjectRelease(),
          swift_bridgeObjectRelease(),
          (v14 & 1) == 0))
    {
      if (one-time initialization token for tabGroup != -1)
        goto LABEL_53;
      goto LABEL_20;
    }
    if (one-time initialization token for tabGroup != -1)
      swift_once();
    v15 = type metadata accessor for Logger();
    __swift_project_value_buffer(v15, (uint64_t)static Logger.tabGroup);
    swift_bridgeObjectRetain_n();
    v16 = Logger.logObject.getter();
    v17 = static os_log_type_t.info.getter();
    v5 = (uint8_t *)v17;
    if (!os_log_type_enabled(v16, v17))
      goto LABEL_23;
    v18 = (uint8_t *)swift_slowAlloc();
    v19 = swift_slowAlloc();
    v85 = v19;
    *(_DWORD *)v18 = 136446210;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 304) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v9, &v85);
    v11 = v0 + 312;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_24A3EF000, v16, (os_log_type_t)v5, "Incrementing retain count for paused tab group connection %{public}s", v18, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24BD0F964](v19, -1, -1);
    v20 = v18;
LABEL_22:
    MEMORY[0x24BD0F964](v20, -1, -1);

    while (1)
    {
      v37 = *(void **)v11;
      v38 = swift_allocObject();
      *(_QWORD *)(v38 + 16) = v37;
      swift_beginAccess();
      v1 = swift_allocObject();
      *(_QWORD *)(v1 + 16) = partial apply for implicit closure #3 in ParticipantPresenceCoordinator.ConnectionManagerStore.addSharedConnection(forShare:createIfNeededUsing:);
      *(_QWORD *)(v1 + 24) = v38;
      swift_bridgeObjectRetain();
      v39 = v37;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v85 = *v12;
      v41 = v85;
      *v12 = 0x8000000000000000;
      v11 = specialized __RawDictionaryStorage.find<A>(_:)(v83, v9);
      v43 = *(_QWORD *)(v41 + 16);
      v44 = (v42 & 1) == 0;
      v45 = v43 + v44;
      if (__OFADD__(v43, v44))
      {
        __break(1u);
      }
      else
      {
        v5 = v42;
        if (*(_QWORD *)(v41 + 24) >= v45)
        {
          if (!isUniquelyReferenced_nonNull_native)
          {
LABEL_55:
            specialized _NativeDictionary.copy()();
            v41 = v85;
          }
        }
        else
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v45, isUniquelyReferenced_nonNull_native);
          v41 = v85;
          v46 = specialized __RawDictionaryStorage.find<A>(_:)(v83, v9);
          if ((v5 & 1) != (v47 & 1))
            goto LABEL_41;
          v11 = v46;
        }
        *v12 = v41;
        swift_bridgeObjectRelease();
        v12 = (uint64_t *)*v12;
        v48 = swift_bridgeObjectRetain();
        if ((v5 & 1) == 0)
        {
          v49 = (*(uint64_t (**)(uint64_t))(v1 + 16))(v48);
          v12[(v11 >> 6) + 8] |= 1 << v11;
          v50 = (uint64_t *)(v12[6] + 16 * v11);
          *v50 = v83;
          v50[1] = v9;
          v51 = (uint64_t *)(v12[7] + 16 * v11);
          *v51 = v49;
          v51[1] = v52;
          v53 = v12[2];
          v54 = __OFADD__(v53, 1);
          v55 = v53 + 1;
          if (v54)
            goto LABEL_58;
          v12[2] = v55;
          swift_bridgeObjectRetain();
        }
        v56 = v12[7] + 16 * v11;
        v58 = *(_QWORD *)(v56 + 8);
        v57 = (_QWORD *)(v56 + 8);
        v59 = v58 + 1;
        if (!__OFADD__(v58, 1))
        {
          *v57 = v59;
          swift_endAccess();
          swift_release();
          swift_release();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease();
          return (*(uint64_t (**)(void))(v0 + 8))();
        }
      }
      __break(1u);
LABEL_53:
      swift_once();
LABEL_20:
      v32 = type metadata accessor for Logger();
      __swift_project_value_buffer(v32, (uint64_t)static Logger.tabGroup);
      swift_bridgeObjectRetain_n();
      v16 = Logger.logObject.getter();
      v33 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v16, v33))
      {
        v82 = v11;
        v34 = (uint8_t *)swift_slowAlloc();
        v35 = swift_slowAlloc();
        v85 = v35;
        v36 = (uint64_t *)v5;
        *(_DWORD *)v34 = 136446210;
        v5 = v34 + 12;
        swift_bridgeObjectRetain();
        *v36 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v83, v9, &v85);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_24A3EF000, v16, v33, "Adding paused connection for tab group %{public}s", v34, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x24BD0F964](v35, -1, -1);
        v20 = v34;
        v11 = v82;
        goto LABEL_22;
      }
LABEL_23:

      swift_bridgeObjectRelease_n();
    }
  }
  v25 = (uint64_t *)(v10 + 136);
  swift_beginAccess();
  v26 = *(_QWORD *)(v10 + 136);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized Dictionary.subscript.getter(v7, v9, v26, (_QWORD *)(v0 + 112));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined release of ParticipantPresenceCoordinator.ConnectionManagerStore.SharedConnection?(v0 + 112);
  outlined init with take of ParticipantPresenceCoordinator.ConnectionManagerStore.SharedConnection?(v0 + 112, v0 + 64, &demangling cache variable for type metadata for ParticipantPresenceCoordinator.ConnectionManagerStore.SharedConnection?);
  if (*(_QWORD *)(v0 + 72))
  {
    v12 = (uint64_t *)(v0 + 208);
    if (one-time initialization token for tabGroup != -1)
      swift_once();
    v27 = type metadata accessor for Logger();
    __swift_project_value_buffer(v27, (uint64_t)static Logger.tabGroup);
    swift_bridgeObjectRetain_n();
    v28 = Logger.logObject.getter();
    v29 = static os_log_type_t.info.getter();
    v5 = (uint8_t *)v29;
    if (os_log_type_enabled(v28, v29))
    {
      v30 = (uint8_t *)swift_slowAlloc();
      v1 = swift_slowAlloc();
      v85 = v1;
      *(_DWORD *)v30 = 136446210;
      swift_bridgeObjectRetain();
      *(_QWORD *)(v0 + 288) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v9, &v85);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_24A3EF000, v28, (os_log_type_t)v5, "Incrementing retain count for tab group connection %{public}s", v30, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24BD0F964](v1, -1, -1);
      v31 = v30;
      v12 = (uint64_t *)(v0 + 208);
      MEMORY[0x24BD0F964](v31, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    swift_beginAccess();
    swift_bridgeObjectRetain();
    v11 = swift_isUniquelyReferenced_nonNull_native();
    v84 = *v25;
    v65 = v84;
    *v25 = 0x8000000000000000;
    swift_bridgeObjectRetain();
    v67 = specialized __RawDictionaryStorage.find<A>(_:)(v7, v9);
    v68 = *(_QWORD *)(v65 + 16);
    v69 = (v66 & 1) == 0;
    v70 = v68 + v69;
    if (__OFADD__(v68, v69))
    {
      __break(1u);
      goto LABEL_55;
    }
    v71 = v66;
    if (*(_QWORD *)(v65 + 24) >= v70)
    {
      if ((v11 & 1) == 0)
        specialized _NativeDictionary.copy()();
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v70, v11);
      v72 = specialized __RawDictionaryStorage.find<A>(_:)(v7, v9);
      if ((v71 & 1) != (v73 & 1))
      {
LABEL_41:
        v74 = *(void **)(v0 + 328);

        return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      }
      v67 = v72;
    }
    if ((v71 & 1) != 0)
    {
      v77 = v84;
      v78 = *(_QWORD *)(v84 + 56) + 48 * v67;
      v79 = *(_QWORD *)v78;
      v80 = *(_QWORD *)(v78 + 40);
      v81 = *(_OWORD *)(v78 + 24);
      v86 = *(_OWORD *)(v78 + 8);
      v87 = v81;
      v88 = v80;
      if (!__OFADD__(v79, 1))
      {
        v85 = v79 + 1;
        specialized $defer #1 <A, B>() in _NativeDictionary.subscript.modify(&v85, 1, &v84, v67, v7, v9);
        outlined consume of ParticipantPresenceCoordinator.ConnectionManagerStore.SharedConnection?(v85, (void *)v86);
        swift_bridgeObjectRelease();
        *v25 = v77;
        swift_endAccess();
        swift_bridgeObjectRelease_n();
        return (*(uint64_t (**)(void))(v0 + 8))();
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
LABEL_58:
    __break(1u);
    goto LABEL_59;
  }
  if (one-time initialization token for tabGroup != -1)
LABEL_59:
    swift_once();
  v60 = type metadata accessor for Logger();
  __swift_project_value_buffer(v60, (uint64_t)static Logger.tabGroup);
  swift_bridgeObjectRetain_n();
  v61 = Logger.logObject.getter();
  v62 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v61, v62))
  {
    v63 = (uint8_t *)swift_slowAlloc();
    v64 = swift_slowAlloc();
    v85 = v64;
    *(_DWORD *)v63 = 136446210;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 280) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v83, v9, &v85);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_24A3EF000, v61, v62, "Opening new connection for tab group %{public}s", v63, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24BD0F964](v64, -1, -1);
    MEMORY[0x24BD0F964](v63, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  v76 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 360) = v76;
  *v76 = v0;
  v76[1] = specialized ParticipantPresenceCoordinator.ConnectionManagerStore.addSharedConnection(forShare:createIfNeededUsing:);
  return specialized ParticipantPresenceCoordinator._startActivityForShare(_:tabGroupIdentifier:)(*(_QWORD *)(v0 + 336));
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  id v8;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v11;

  v2 = *(_QWORD *)(v0 + 384);
  v1 = *(_QWORD *)(v0 + 392);
  v3 = *(_QWORD *)(v0 + 376);
  v5 = *(_QWORD *)(v0 + 344);
  v4 = *(_QWORD *)(v0 + 352);
  v6 = *(void **)(v0 + 312);
  v7 = *(_QWORD *)(v0 + 320);
  *(_QWORD *)(v0 + 16) = 1;
  *(_QWORD *)(v0 + 24) = v6;
  *(_QWORD *)(v0 + 32) = v1;
  *(_QWORD *)(v0 + 40) = v2;
  *(_QWORD *)(v0 + 48) = v3;
  *(_QWORD *)(v0 + 56) = 0;
  swift_beginAccess();
  v8 = v6;
  swift_retain();
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v11 = *(_QWORD *)(v7 + 136);
  *(_QWORD *)(v7 + 136) = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((_OWORD *)(v0 + 16), v5, v4, isUniquelyReferenced_nonNull_native);
  *(_QWORD *)(v7 + 136) = v11;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_endAccess();
  swift_release();
  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t specialized ParticipantPresenceCoordinator.ConnectionManagerStore.addSharedConnection(forShare:createIfNeededUsing:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v8;

  v8 = *(_QWORD **)v4;
  *(_QWORD *)(*(_QWORD *)v4 + 368) = v3;
  swift_task_dealloc();
  if (!v3)
  {
    v8[47] = a3;
    v8[48] = a2;
    v8[49] = a1;
  }
  return swift_task_switch();
}

uint64_t specialized ParticipantPresenceCoordinator._stopActivityForShare(_:connectionManager:subscriptionTasks:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[7] = a2;
  v3[8] = a3;
  v3[6] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  v3[9] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t specialized ParticipantPresenceCoordinator._stopActivityForShare(_:connectionManager:subscriptionTasks:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(v0 + 64);
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v3 = v1 + 32;
    swift_bridgeObjectRetain();
    v4 = MEMORY[0x24BEE4AE0] + 8;
    v5 = MEMORY[0x24BEE4078];
    v6 = MEMORY[0x24BEE40A8];
    do
    {
      v3 += 8;
      v7 = swift_retain();
      MEMORY[0x24BD0F088](v7, v4, v5, v6);
      swift_release();
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease();
  }
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = *(_QWORD *)(v0 + 72);
  v2 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
  swift_beginAccess();
  swift_retain();
  specialized FastSyncStateMachine.leaveActivity(priority:_:)();
  *(_BYTE *)(v0 + 80) = v3 & 1;
  outlined destroy of TaskPriority?(v1, &demangling cache variable for type metadata for TaskPriority?);
  swift_endAccess();
  swift_release();
  return swift_task_switch();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  void *v7;
  uint8_t *v8;
  id v9;
  id v10;
  id v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v16;
  uint64_t v17;

  if ((*(_BYTE *)(v0 + 80) & 1) == 0)
  {
    if (one-time initialization token for tabGroup != -1)
      swift_once();
    v1 = *(void **)(v0 + 48);
    v2 = type metadata accessor for Logger();
    __swift_project_value_buffer(v2, (uint64_t)static Logger.tabGroup);
    v3 = v1;
    v4 = Logger.logObject.getter();
    v5 = static os_log_type_t.error.getter();
    v6 = os_log_type_enabled(v4, v5);
    v7 = *(void **)(v0 + 48);
    if (v6)
    {
      v8 = (uint8_t *)swift_slowAlloc();
      v16 = swift_slowAlloc();
      v17 = v16;
      *(_DWORD *)v8 = 136315138;
      v9 = objc_msgSend(v7, sel_recordID);
      v10 = objc_msgSend(v9, sel_zoneID);

      v11 = objc_msgSend(v10, sel_zoneName);
      v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v14 = v13;

      *(_QWORD *)(v0 + 40) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v14, &v17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_24A3EF000, v4, v5, "Failed to leave activity for share %s", v8, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24BD0F964](v16, -1, -1);
      MEMORY[0x24BD0F964](v8, -1, -1);
    }
    else
    {

    }
  }
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t specialized ParticipantPresenceCoordinator.ConnectionManagerStore.removeSharedConnection(forShare:cleanUpIfNeeedUsing:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[54] = a2;
  v3[55] = a3;
  v3[53] = a1;
  return swift_task_switch();
}

uint64_t specialized ParticipantPresenceCoordinator.ConnectionManagerStore.removeSharedConnection(forShare:cleanUpIfNeeedUsing:)()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t (*v9)();
  uint64_t (*v10)();
  _QWORD *v11;
  uint64_t (*v12)();
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint8_t *v26;
  uint64_t v27;
  os_log_type_t v28;
  uint8_t *v29;
  _QWORD *v30;
  uint64_t (*v31)();
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  os_log_type_t v37;
  uint8_t *v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  uint8_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v47;
  NSObject *v48;
  os_log_type_t v49;
  uint8_t *v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;

  v2 = objc_msgSend(*(id *)(v0 + 424), sel_recordID);
  v3 = objc_msgSend(v2, sel_zoneID);

  v4 = objc_msgSend(v3, sel_safari_tabGroupRootRecordName);
  if (!v4)
  {
    if (one-time initialization token for tabGroup != -1)
      swift_once();
    v27 = type metadata accessor for Logger();
    __swift_project_value_buffer(v27, (uint64_t)static Logger.tabGroup);
    v22 = Logger.logObject.getter();
    v28 = static os_log_type_t.fault.getter();
    if (!os_log_type_enabled(v22, v28))
      goto LABEL_36;
    v29 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v29 = 0;
    _os_log_impl(&dword_24A3EF000, v22, v28, "Trying to start a collaboration activity with a CKShare not attached to a tab group", v29, 2u);
    v26 = v29;
    goto LABEL_27;
  }
  v5 = *(_QWORD *)(v0 + 432);
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v8 = v7;

  *(_QWORD *)(v0 + 448) = v6;
  *(_QWORD *)(v0 + 456) = v8;
  LOBYTE(v5) = *(_BYTE *)(v5 + 152);
  swift_bridgeObjectRetain();
  if ((v5 & 1) != 0)
  {
    v9 = (uint64_t (*)())(v0 + 224);
    v10 = ParticipantPresenceCoordinator.ConnectionManagerStore.pausedSharedConnections.modify();
    v12 = specialized Dictionary.subscript.modify((_QWORD *)(v0 + 256), v6, v8);
    if (!*v11)
      goto LABEL_6;
    v13 = v11[1];
    v14 = __OFSUB__(v13, 1);
    v15 = v13 - 1;
    if (!v14)
    {
      v11[1] = v15;
LABEL_6:
      ((void (*)(uint64_t, _QWORD))v12)(v0 + 256, 0);
      swift_bridgeObjectRelease();
      ((void (*)(uint64_t, _QWORD))v10)(v0 + 224, 0);
      v16 = *(_QWORD *)(v0 + 432) + 144;
      swift_beginAccess();
      v17 = *(_QWORD *)v16;
      if (*(_QWORD *)(*(_QWORD *)v16 + 16))
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v18 = specialized __RawDictionaryStorage.find<A>(_:)(v6, v8);
        if ((v19 & 1) != 0)
        {
          v20 = *(_QWORD *)(*(_QWORD *)(v17 + 56) + 16 * v18 + 8);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v20 > 0)
          {
            if (one-time initialization token for tabGroup != -1)
              swift_once();
            v21 = type metadata accessor for Logger();
            __swift_project_value_buffer(v21, (uint64_t)static Logger.tabGroup);
            swift_bridgeObjectRetain();
            v22 = Logger.logObject.getter();
            v23 = static os_log_type_t.info.getter();
            if (os_log_type_enabled(v22, v23))
            {
              v24 = (uint8_t *)swift_slowAlloc();
              v25 = swift_slowAlloc();
              v53 = v25;
              *(_DWORD *)v24 = 136446210;
              swift_bridgeObjectRetain();
              *(_QWORD *)(v0 + 416) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v8, &v53);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease_n();
              _os_log_impl(&dword_24A3EF000, v22, v23, "Decrementing retain count for paused tab group connection %{public}s", v24, 0xCu);
              swift_arrayDestroy();
              MEMORY[0x24BD0F964](v25, -1, -1);
              v26 = v24;
LABEL_27:
              MEMORY[0x24BD0F964](v26, -1, -1);
LABEL_36:

              return (*(uint64_t (**)(void))(v0 + 8))();
            }
            goto LABEL_28;
          }
        }
        else
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
      }
      if (one-time initialization token for tabGroup != -1)
        swift_once();
      v40 = type metadata accessor for Logger();
      __swift_project_value_buffer(v40, (uint64_t)static Logger.tabGroup);
      swift_bridgeObjectRetain_n();
      v41 = Logger.logObject.getter();
      v42 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v41, v42))
      {
        v43 = (uint8_t *)swift_slowAlloc();
        v44 = swift_slowAlloc();
        v53 = v44;
        *(_DWORD *)v43 = 136446210;
        swift_bridgeObjectRetain();
        v45 = v6;
        *(_QWORD *)(v0 + 408) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v8, &v53);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_24A3EF000, v41, v42, "Removing last instance of paused connection for tab group %{public}s", v43, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x24BD0F964](v44, -1, -1);
        MEMORY[0x24BD0F964](v43, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n();
        v45 = v6;
      }
      swift_beginAccess();
      v22 = specialized Dictionary._Variant.removeValue(forKey:)(v45, v8);
      swift_endAccess();
      swift_bridgeObjectRelease();
      goto LABEL_36;
    }
    __break(1u);
    goto LABEL_44;
  }
  v1 = v0 + 192;
  v9 = ParticipantPresenceCoordinator.ConnectionManagerStore.tabGroupIdentifiersToSharedConnections.modify();
  v31 = specialized Dictionary.subscript.modify((_QWORD *)(v0 + 160), v6, v8);
  if (v30[1])
  {
    if (__OFSUB__(*v30, 1))
    {
LABEL_44:
      __break(1u);
      goto LABEL_45;
    }
    --*v30;
  }
  ((void (*)(uint64_t, _QWORD))v31)(v0 + 160, 0);
  swift_bridgeObjectRelease();
  ((void (*)(uint64_t, _QWORD))v9)(v0 + 192, 0);
  v32 = *(_QWORD *)(v0 + 432);
  swift_beginAccess();
  v33 = *(_QWORD *)(v32 + 136);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized Dictionary.subscript.getter(v6, v8, v33, (_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined init with take of ParticipantPresenceCoordinator.ConnectionManagerStore.SharedConnection?(v0 + 16, v0 + 64, &demangling cache variable for type metadata for ParticipantPresenceCoordinator.ConnectionManagerStore.SharedConnection?);
  v34 = *(void **)(v0 + 72);
  *(_QWORD *)(v0 + 464) = v34;
  if (!v34)
  {
LABEL_23:
    if (one-time initialization token for tabGroup != -1)
      swift_once();
    v36 = type metadata accessor for Logger();
    __swift_project_value_buffer(v36, (uint64_t)static Logger.tabGroup);
    swift_bridgeObjectRetain();
    v22 = Logger.logObject.getter();
    v37 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v22, v37))
    {
      v38 = (uint8_t *)swift_slowAlloc();
      v39 = swift_slowAlloc();
      v53 = v39;
      *(_DWORD *)v38 = 136446210;
      swift_bridgeObjectRetain();
      *(_QWORD *)(v0 + 400) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v8, &v53);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_24A3EF000, v22, v37, "Decrementing retain count for tab group connection %{public}s", v38, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x24BD0F964](v39, -1, -1);
      v26 = v38;
      goto LABEL_27;
    }
LABEL_28:

    swift_bridgeObjectRelease_n();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v35 = *(_QWORD *)(v0 + 64);
  v9 = *(uint64_t (**)())(v0 + 88);
  *(_QWORD *)(v0 + 472) = *(_QWORD *)(v0 + 80);
  *(_QWORD *)(v0 + 480) = v9;
  v1 = *(_QWORD *)(v0 + 96);
  *(_QWORD *)(v0 + 488) = v1;
  if (v35 >= 1)
  {
    swift_release();
    swift_release();

    *(_QWORD *)(v0 + 392) = v1;
    outlined release of [Task<(), Never>](v0 + 392);
    goto LABEL_23;
  }
  if (one-time initialization token for tabGroup != -1)
LABEL_45:
    swift_once();
  v47 = type metadata accessor for Logger();
  __swift_project_value_buffer(v47, (uint64_t)static Logger.tabGroup);
  swift_bridgeObjectRetain_n();
  v48 = Logger.logObject.getter();
  v49 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v48, v49))
  {
    v50 = (uint8_t *)swift_slowAlloc();
    v52 = swift_slowAlloc();
    v53 = v52;
    *(_DWORD *)v50 = 136446210;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v0 + 384) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v8, &v53);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_24A3EF000, v48, v49, "Removing last instance of active connection for tab group %{public}s", v50, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x24BD0F964](v52, -1, -1);
    MEMORY[0x24BD0F964](v50, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  v51 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 496) = v51;
  *v51 = v0;
  v51[1] = specialized ParticipantPresenceCoordinator.ConnectionManagerStore.removeSharedConnection(forShare:cleanUpIfNeeedUsing:);
  return specialized ParticipantPresenceCoordinator._stopActivityForShare(_:connectionManager:subscriptionTasks:)(*(_QWORD *)(v0 + 440), (uint64_t)v9, v1);
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(void **)(v0 + 464);
  v2 = *(_QWORD *)(v0 + 448);
  v3 = *(_QWORD *)(v0 + 456);
  swift_beginAccess();
  specialized Dictionary._Variant.removeValue(forKey:)(v2, v3, v0 + 112);
  swift_endAccess();
  swift_bridgeObjectRelease();
  outlined release of ParticipantPresenceCoordinator.ConnectionManagerStore.SharedConnection?(v0 + 112);

  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t specialized ParticipantPresenceCoordinator.ConnectionManagerStore.pauseSharedConnections(using:)(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 96) = a1;
  return swift_task_switch();
}

uint64_t specialized ParticipantPresenceCoordinator.ConnectionManagerStore.pauseSharedConnections(using:)()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  id v25;
  NSObject *v26;
  os_log_type_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;

  if ((*(_BYTE *)(*(_QWORD *)(v0 + 96) + 152) & 1) != 0)
  {
    __break(1u);
  }
  else if (one-time initialization token for tabGroup == -1)
  {
    goto LABEL_3;
  }
  swift_once();
LABEL_3:
  v1 = type metadata accessor for Logger();
  *(_QWORD *)(v0 + 104) = __swift_project_value_buffer(v1, (uint64_t)static Logger.tabGroup);
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_24A3EF000, v2, v3, "Pausing shared connections", v4, 2u);
    MEMORY[0x24BD0F964](v4, -1, -1);
  }
  v5 = *(_QWORD *)(v0 + 96);

  v6 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  swift_beginAccess();
  *(_QWORD *)(v5 + 144) = v6;
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v7 = *(_QWORD *)(v5 + 136);
  *(_QWORD *)(v0 + 112) = v7;
  v8 = *(_BYTE *)(v7 + 32);
  *(_BYTE *)(v0 + 200) = v8;
  v9 = -1;
  v10 = -1 << v8;
  if (-(-1 << v8) < 64)
    v9 = ~(-1 << -(char)v10);
  v11 = v9 & *(_QWORD *)(v7 + 64);
  v12 = (_QWORD *)swift_bridgeObjectRetain();
  if (!v11)
  {
    v34 = 63 - v10;
    if ((unint64_t)(63 - v10) > 0x7F)
    {
      v35 = v12[9];
      if (v35)
      {
        v13 = 1;
LABEL_16:
        v15 = (v35 - 1) & v35;
        v14 = __clz(__rbit64(v35)) + (v13 << 6);
        goto LABEL_9;
      }
      if (v34 >= 0xC0)
      {
        v35 = v12[10];
        if (v35)
        {
          v13 = 2;
          goto LABEL_16;
        }
        if (v34 >= 0x100)
        {
          v35 = v12[11];
          if (v35)
          {
            v13 = 3;
            goto LABEL_16;
          }
          if (v34 >= 0x140)
          {
            v35 = v12[12];
            if (v35)
            {
              v13 = 4;
              goto LABEL_16;
            }
            v36 = 0;
            v37 = v34 >> 6;
            if (v37 <= 5)
              v37 = 5;
            v38 = v37 - 5;
            while (v38 != v36)
            {
              v35 = v12[v36++ + 13];
              if (v35)
              {
                v13 = v36 + 4;
                goto LABEL_16;
              }
            }
          }
        }
      }
    }
    v39 = *(_QWORD *)(v0 + 96);
    swift_release();
    *(_QWORD *)(v39 + 136) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
    swift_bridgeObjectRelease();
    *(_BYTE *)(v39 + 152) = 1;
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v13 = 0;
  v14 = __clz(__rbit64(v11));
  v15 = (v11 - 1) & v11;
LABEL_9:
  *(_QWORD *)(v0 + 120) = v13;
  *(_QWORD *)(v0 + 128) = v15;
  v16 = (uint64_t *)(v12[6] + 16 * v14);
  v17 = *v16;
  *(_QWORD *)(v0 + 136) = *v16;
  v18 = v16[1];
  *(_QWORD *)(v0 + 144) = v18;
  v19 = (uint64_t *)(v12[7] + 48 * v14);
  v20 = *v19;
  *(_QWORD *)(v0 + 152) = *v19;
  v21 = (void *)v19[1];
  *(_QWORD *)(v0 + 160) = v21;
  *(_QWORD *)(v0 + 168) = v19[2];
  v22 = v19[3];
  *(_QWORD *)(v0 + 176) = v22;
  v23 = v19[4];
  *(_QWORD *)(v0 + 184) = v23;
  swift_bridgeObjectRetain_n();
  v24 = v21;
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  v25 = v24;
  v26 = Logger.logObject.getter();
  v27 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v26, v27))
  {
    v41 = v25;
    v28 = v17;
    v29 = swift_slowAlloc();
    v40 = v20;
    v30 = swift_slowAlloc();
    v42 = v30;
    *(_DWORD *)v29 = 136446466;
    swift_bridgeObjectRetain();
    v31 = v28;
    v25 = v41;
    *(_QWORD *)(v29 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, v18, &v42);
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v29 + 12) = 2050;
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();

    *(_QWORD *)(v29 + 14) = v40;
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();

    _os_log_impl(&dword_24A3EF000, v26, v27, "Pausing connection for tab group %{public}s with retain count %{public}ld", (uint8_t *)v29, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x24BD0F964](v30, -1, -1);
    MEMORY[0x24BD0F964](v29, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();

  }
  v32 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 192) = v32;
  *v32 = v0;
  v32[1] = specialized ParticipantPresenceCoordinator.ConnectionManagerStore.pauseSharedConnections(using:);
  return specialized ParticipantPresenceCoordinator._stopActivityForShare(_:connectionManager:subscriptionTasks:)((uint64_t)v25, v22, v23);
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

void specialized ParticipantPresenceCoordinator.ConnectionManagerStore.pauseSharedConnections(using:)()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  _BOOL8 v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  void *v29;
  int64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  id v44;
  NSObject *v45;
  os_log_type_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  int64_t v52;
  int64_t v53;
  uint64_t v54;
  unint64_t v55;
  int64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;

  v1 = *(void **)(v0 + 160);
  v3 = *(_QWORD *)(v0 + 136);
  v2 = *(_QWORD *)(v0 + 144);
  v4 = *(_QWORD *)(v0 + 96);
  swift_beginAccess();
  v5 = v1;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v7 = *(_QWORD *)(v4 + 144);
  *(_QWORD *)(v0 + 88) = v7;
  *(_QWORD *)(v4 + 144) = 0x8000000000000000;
  v9 = specialized __RawDictionaryStorage.find<A>(_:)(v3, v2);
  v10 = *(_QWORD *)(v7 + 16);
  v11 = (v8 & 1) == 0;
  v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
    goto LABEL_34;
  }
  v13 = v8;
  if (*(_QWORD *)(v7 + 24) >= v12)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      specialized _NativeDictionary.copy()();
  }
  else
  {
    v15 = *(_QWORD *)(v0 + 136);
    v14 = *(_QWORD *)(v0 + 144);
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v12, isUniquelyReferenced_nonNull_native);
    v16 = specialized __RawDictionaryStorage.find<A>(_:)(v15, v14);
    if ((v13 & 1) != (v17 & 1))
    {
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      return;
    }
    v9 = v16;
  }
  v18 = *(_QWORD **)(v0 + 88);
  v19 = *(_QWORD *)(v0 + 152);
  v20 = *(_QWORD *)(v0 + 160);
  if ((v13 & 1) != 0)
  {
    v21 = v18[7] + 16 * v9;

    *(_QWORD *)v21 = v20;
    *(_QWORD *)(v21 + 8) = v19;
    goto LABEL_12;
  }
  v23 = *(_QWORD *)(v0 + 136);
  v22 = *(_QWORD *)(v0 + 144);
  v18[(v9 >> 6) + 8] |= 1 << v9;
  v24 = (_QWORD *)(v18[6] + 16 * v9);
  *v24 = v23;
  v24[1] = v22;
  v25 = (_QWORD *)(v18[7] + 16 * v9);
  *v25 = v20;
  v25[1] = v19;
  v26 = v18[2];
  v27 = __OFADD__(v26, 1);
  v28 = v26 + 1;
  if (v27)
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  v18[2] = v28;
  swift_bridgeObjectRetain();
LABEL_12:
  v29 = *(void **)(v0 + 160);
  *(_QWORD *)(*(_QWORD *)(v0 + 96) + 144) = v18;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_endAccess();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  v30 = *(_QWORD *)(v0 + 120);
  v31 = *(_QWORD *)(v0 + 128);
  if (!v31)
  {
    v52 = v30 + 1;
    if (!__OFADD__(v30, 1))
    {
      v53 = (unint64_t)((1 << *(_BYTE *)(v0 + 200)) + 63) >> 6;
      v34 = *(_QWORD *)(v0 + 112);
      if (v52 >= v53)
        goto LABEL_32;
      v54 = v34 + 64;
      v55 = *(_QWORD *)(v34 + 64 + 8 * v52);
      ++v30;
      if (v55)
      {
LABEL_21:
        v32 = (v55 - 1) & v55;
        v33 = __clz(__rbit64(v55)) + (v30 << 6);
        goto LABEL_14;
      }
      v30 = v52 + 1;
      if (v52 + 1 >= v53)
        goto LABEL_32;
      v55 = *(_QWORD *)(v54 + 8 * v30);
      if (v55)
        goto LABEL_21;
      v30 = v52 + 2;
      if (v52 + 2 >= v53)
        goto LABEL_32;
      v55 = *(_QWORD *)(v54 + 8 * v30);
      if (v55)
        goto LABEL_21;
      v56 = v52 + 3;
      if (v56 >= v53)
      {
LABEL_32:
        v57 = *(_QWORD *)(v0 + 96);
        swift_release();
        *(_QWORD *)(v57 + 136) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
        swift_bridgeObjectRelease();
        *(_BYTE *)(v57 + 152) = 1;
        (*(void (**)(void))(v0 + 8))();
        return;
      }
      v55 = *(_QWORD *)(v54 + 8 * v56);
      if (v55)
      {
        v30 = v56;
        goto LABEL_21;
      }
      while (1)
      {
        v30 = v56 + 1;
        if (__OFADD__(v56, 1))
          break;
        if (v30 >= v53)
          goto LABEL_32;
        v55 = *(_QWORD *)(v54 + 8 * v30);
        ++v56;
        if (v55)
          goto LABEL_21;
      }
LABEL_36:
      __break(1u);
      return;
    }
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  v32 = (v31 - 1) & v31;
  v33 = __clz(__rbit64(v31)) | (v30 << 6);
  v34 = *(_QWORD *)(v0 + 112);
LABEL_14:
  *(_QWORD *)(v0 + 120) = v30;
  *(_QWORD *)(v0 + 128) = v32;
  v35 = (uint64_t *)(*(_QWORD *)(v34 + 48) + 16 * v33);
  v36 = *v35;
  *(_QWORD *)(v0 + 136) = *v35;
  v37 = v35[1];
  *(_QWORD *)(v0 + 144) = v37;
  v38 = (uint64_t *)(*(_QWORD *)(v34 + 56) + 48 * v33);
  v39 = *v38;
  *(_QWORD *)(v0 + 152) = *v38;
  v40 = (void *)v38[1];
  *(_QWORD *)(v0 + 160) = v40;
  *(_QWORD *)(v0 + 168) = v38[2];
  v41 = v38[3];
  *(_QWORD *)(v0 + 176) = v41;
  v42 = v38[4];
  *(_QWORD *)(v0 + 184) = v42;
  swift_bridgeObjectRetain_n();
  v43 = v40;
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  v44 = v43;
  v45 = Logger.logObject.getter();
  v46 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v45, v46))
  {
    v59 = v44;
    v47 = v36;
    v48 = swift_slowAlloc();
    v58 = v39;
    v49 = swift_slowAlloc();
    v60 = v49;
    *(_DWORD *)v48 = 136446466;
    swift_bridgeObjectRetain();
    v50 = v47;
    v44 = v59;
    *(_QWORD *)(v48 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v50, v37, &v60);
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v48 + 12) = 2050;
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();

    *(_QWORD *)(v48 + 14) = v58;
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();

    _os_log_impl(&dword_24A3EF000, v45, v46, "Pausing connection for tab group %{public}s with retain count %{public}ld", (uint8_t *)v48, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x24BD0F964](v49, -1, -1);
    MEMORY[0x24BD0F964](v48, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();

  }
  v51 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 192) = v51;
  *v51 = v0;
  v51[1] = specialized ParticipantPresenceCoordinator.ConnectionManagerStore.pauseSharedConnections(using:);
  specialized ParticipantPresenceCoordinator._stopActivityForShare(_:connectionManager:subscriptionTasks:)((uint64_t)v44, v41, v42);
}

uint64_t specialized ParticipantPresenceCoordinator.ConnectionManagerStore.unpauseSharedConnections(using:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 96) = a1;
  *(_QWORD *)(v2 + 104) = a2;
  return swift_task_switch();
}

uint64_t specialized ParticipantPresenceCoordinator.ConnectionManagerStore.unpauseSharedConnections(using:)()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  id v23;
  NSObject *v24;
  os_log_type_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  if (*(_BYTE *)(*(_QWORD *)(v0 + 96) + 152) == 1)
  {
    if (one-time initialization token for tabGroup == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  v1 = type metadata accessor for Logger();
  *(_QWORD *)(v0 + 112) = __swift_project_value_buffer(v1, (uint64_t)static Logger.tabGroup);
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_24A3EF000, v2, v3, "Unpausing shared connections", v4, 2u);
    MEMORY[0x24BD0F964](v4, -1, -1);
  }
  v5 = *(_QWORD *)(v0 + 96);

  v6 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  swift_beginAccess();
  *(_QWORD *)(v5 + 136) = v6;
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v7 = *(_QWORD *)(v5 + 144);
  *(_QWORD *)(v0 + 120) = v7;
  v8 = *(_BYTE *)(v7 + 32);
  *(_BYTE *)(v0 + 216) = v8;
  v9 = -1;
  v10 = -1 << v8;
  if (-(-1 << v8) < 64)
    v9 = ~(-1 << -(char)v10);
  v11 = v9 & *(_QWORD *)(v7 + 64);
  v12 = (_QWORD *)swift_bridgeObjectRetain();
  if (!v11)
  {
    v30 = 63 - v10;
    if ((unint64_t)(63 - v10) > 0x7F)
    {
      v31 = v12[9];
      if (v31)
      {
        v13 = 1;
LABEL_16:
        v15 = (v31 - 1) & v31;
        v14 = __clz(__rbit64(v31)) + (v13 << 6);
        goto LABEL_9;
      }
      if (v30 >= 0xC0)
      {
        v31 = v12[10];
        if (v31)
        {
          v13 = 2;
          goto LABEL_16;
        }
        if (v30 >= 0x100)
        {
          v31 = v12[11];
          if (v31)
          {
            v13 = 3;
            goto LABEL_16;
          }
          if (v30 >= 0x140)
          {
            v31 = v12[12];
            if (v31)
            {
              v13 = 4;
              goto LABEL_16;
            }
            v32 = 0;
            v33 = v30 >> 6;
            if (v33 <= 5)
              v33 = 5;
            v34 = v33 - 5;
            while (v34 != v32)
            {
              v31 = v12[v32++ + 13];
              if (v31)
              {
                v13 = v32 + 4;
                goto LABEL_16;
              }
            }
          }
        }
      }
    }
    v35 = *(_QWORD *)(v0 + 96);
    swift_release();
    *(_QWORD *)(v35 + 144) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
    swift_bridgeObjectRelease();
    *(_BYTE *)(v35 + 152) = 0;
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v13 = 0;
  v14 = __clz(__rbit64(v11));
  v15 = (v11 - 1) & v11;
LABEL_9:
  *(_QWORD *)(v0 + 128) = v13;
  *(_QWORD *)(v0 + 136) = v15;
  v16 = 16 * v14;
  v17 = (uint64_t *)(v12[6] + v16);
  v18 = *v17;
  *(_QWORD *)(v0 + 144) = *v17;
  v19 = v17[1];
  *(_QWORD *)(v0 + 152) = v19;
  v20 = v12[7] + v16;
  v21 = *(void **)v20;
  *(_QWORD *)(v0 + 160) = *(_QWORD *)v20;
  v22 = *(_QWORD *)(v20 + 8);
  *(_QWORD *)(v0 + 168) = v22;
  swift_bridgeObjectRetain_n();
  v23 = v21;
  v24 = Logger.logObject.getter();
  v25 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v24, v25))
  {
    v26 = swift_slowAlloc();
    v27 = swift_slowAlloc();
    v36 = v27;
    *(_DWORD *)v26 = 136446466;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v26 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v19, &v36);
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v26 + 12) = 2050;
    *(_QWORD *)(v26 + 14) = v22;
    _os_log_impl(&dword_24A3EF000, v24, v25, "Unpausing connection for tab group %{public}s with retain count %{public}ld", (uint8_t *)v26, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x24BD0F964](v27, -1, -1);
    MEMORY[0x24BD0F964](v26, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  v28 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 176) = v28;
  *v28 = v0;
  v28[1] = specialized ParticipantPresenceCoordinator.ConnectionManagerStore.unpauseSharedConnections(using:);
  return specialized ParticipantPresenceCoordinator._startActivityForShare(_:tabGroupIdentifier:)((uint64_t)v23);
}

{
  uint64_t v0;

  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t specialized ParticipantPresenceCoordinator.ConnectionManagerStore.unpauseSharedConnections(using:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;

  v5 = (_QWORD *)*v4;
  v5[23] = a1;
  v5[24] = a2;
  v5[25] = a3;
  v5[26] = v3;
  swift_task_dealloc();
  if (v3)
    swift_bridgeObjectRelease();
  return swift_task_switch();
}

void specialized ParticipantPresenceCoordinator.ConnectionManagerStore.unpauseSharedConnections(using:)()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  _BOOL8 v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  void *v32;
  int64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  id v45;
  NSObject *v46;
  os_log_type_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  int64_t v51;
  int64_t v52;
  uint64_t v53;
  unint64_t v54;
  int64_t v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;

  v2 = *(_QWORD *)(v0 + 152);
  v1 = *(void **)(v0 + 160);
  v3 = *(_QWORD *)(v0 + 144);
  v4 = *(_QWORD *)(v0 + 96);
  swift_beginAccess();
  v5 = v1;
  swift_retain();
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v7 = *(_QWORD *)(v4 + 136);
  *(_QWORD *)(v0 + 88) = v7;
  *(_QWORD *)(v4 + 136) = 0x8000000000000000;
  v9 = specialized __RawDictionaryStorage.find<A>(_:)(v3, v2);
  v10 = *(_QWORD *)(v7 + 16);
  v11 = (v8 & 1) == 0;
  v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
    goto LABEL_34;
  }
  v13 = v8;
  if (*(_QWORD *)(v7 + 24) >= v12)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      specialized _NativeDictionary.copy()();
  }
  else
  {
    v15 = *(_QWORD *)(v0 + 144);
    v14 = *(_QWORD *)(v0 + 152);
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v12, isUniquelyReferenced_nonNull_native);
    v16 = specialized __RawDictionaryStorage.find<A>(_:)(v15, v14);
    if ((v13 & 1) != (v17 & 1))
    {
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      return;
    }
    v9 = v16;
  }
  v18 = *(_QWORD **)(v0 + 88);
  v20 = *(_QWORD *)(v0 + 192);
  v19 = *(_QWORD *)(v0 + 200);
  v21 = *(_QWORD *)(v0 + 184);
  v23 = *(_QWORD *)(v0 + 160);
  v22 = *(_QWORD *)(v0 + 168);
  if ((v13 & 1) != 0)
  {
    v24 = (_QWORD *)(v18[7] + 48 * v9);
    v57 = (void *)v24[1];
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();

    *v24 = v22;
    v24[1] = v23;
    v24[2] = v21;
    v24[3] = v20;
    v24[4] = v19;
    v24[5] = 0;
    goto LABEL_12;
  }
  v26 = *(_QWORD *)(v0 + 144);
  v25 = *(_QWORD *)(v0 + 152);
  v18[(v9 >> 6) + 8] |= 1 << v9;
  v27 = (_QWORD *)(v18[6] + 16 * v9);
  *v27 = v26;
  v27[1] = v25;
  v28 = (_QWORD *)(v18[7] + 48 * v9);
  *v28 = v22;
  v28[1] = v23;
  v28[2] = v21;
  v28[3] = v20;
  v28[4] = v19;
  v28[5] = 0;
  v29 = v18[2];
  v30 = __OFADD__(v29, 1);
  v31 = v29 + 1;
  if (v30)
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  v18[2] = v31;
  swift_bridgeObjectRetain();
LABEL_12:
  v32 = *(void **)(v0 + 160);
  *(_QWORD *)(*(_QWORD *)(v0 + 96) + 136) = v18;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_endAccess();
  swift_release();
  swift_release();

  v33 = *(_QWORD *)(v0 + 128);
  v34 = *(_QWORD *)(v0 + 136);
  if (!v34)
  {
    v51 = v33 + 1;
    if (!__OFADD__(v33, 1))
    {
      v52 = (unint64_t)((1 << *(_BYTE *)(v0 + 216)) + 63) >> 6;
      v37 = *(_QWORD *)(v0 + 120);
      if (v51 >= v52)
        goto LABEL_32;
      v53 = v37 + 64;
      v54 = *(_QWORD *)(v37 + 64 + 8 * v51);
      ++v33;
      if (v54)
      {
LABEL_21:
        v35 = (v54 - 1) & v54;
        v36 = __clz(__rbit64(v54)) + (v33 << 6);
        goto LABEL_14;
      }
      v33 = v51 + 1;
      if (v51 + 1 >= v52)
        goto LABEL_32;
      v54 = *(_QWORD *)(v53 + 8 * v33);
      if (v54)
        goto LABEL_21;
      v33 = v51 + 2;
      if (v51 + 2 >= v52)
        goto LABEL_32;
      v54 = *(_QWORD *)(v53 + 8 * v33);
      if (v54)
        goto LABEL_21;
      v55 = v51 + 3;
      if (v55 >= v52)
      {
LABEL_32:
        v56 = *(_QWORD *)(v0 + 96);
        swift_release();
        *(_QWORD *)(v56 + 144) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
        swift_bridgeObjectRelease();
        *(_BYTE *)(v56 + 152) = 0;
        (*(void (**)(void))(v0 + 8))();
        return;
      }
      v54 = *(_QWORD *)(v53 + 8 * v55);
      if (v54)
      {
        v33 = v55;
        goto LABEL_21;
      }
      while (1)
      {
        v33 = v55 + 1;
        if (__OFADD__(v55, 1))
          break;
        if (v33 >= v52)
          goto LABEL_32;
        v54 = *(_QWORD *)(v53 + 8 * v33);
        ++v55;
        if (v54)
          goto LABEL_21;
      }
LABEL_36:
      __break(1u);
      return;
    }
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  v35 = (v34 - 1) & v34;
  v36 = __clz(__rbit64(v34)) | (v33 << 6);
  v37 = *(_QWORD *)(v0 + 120);
LABEL_14:
  *(_QWORD *)(v0 + 128) = v33;
  *(_QWORD *)(v0 + 136) = v35;
  v38 = 16 * v36;
  v39 = (uint64_t *)(*(_QWORD *)(v37 + 48) + v38);
  v40 = *v39;
  *(_QWORD *)(v0 + 144) = *v39;
  v41 = v39[1];
  *(_QWORD *)(v0 + 152) = v41;
  v42 = *(_QWORD *)(v37 + 56) + v38;
  v43 = *(void **)v42;
  *(_QWORD *)(v0 + 160) = *(_QWORD *)v42;
  v44 = *(_QWORD *)(v42 + 8);
  *(_QWORD *)(v0 + 168) = v44;
  swift_bridgeObjectRetain_n();
  v45 = v43;
  v46 = Logger.logObject.getter();
  v47 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v46, v47))
  {
    v48 = swift_slowAlloc();
    v49 = swift_slowAlloc();
    v58 = v49;
    *(_DWORD *)v48 = 136446466;
    swift_bridgeObjectRetain();
    *(_QWORD *)(v48 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v40, v41, &v58);
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v48 + 12) = 2050;
    *(_QWORD *)(v48 + 14) = v44;
    _os_log_impl(&dword_24A3EF000, v46, v47, "Unpausing connection for tab group %{public}s with retain count %{public}ld", (uint8_t *)v48, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x24BD0F964](v49, -1, -1);
    MEMORY[0x24BD0F964](v48, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  v50 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 176) = v50;
  *v50 = v0;
  v50[1] = specialized ParticipantPresenceCoordinator.ConnectionManagerStore.unpauseSharedConnections(using:);
  specialized ParticipantPresenceCoordinator._startActivityForShare(_:tabGroupIdentifier:)((uint64_t)v45);
}

void specialized Set.init(_nonEmptyArrayLiteral:)(unint64_t a1)
{
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  Swift::Int v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  char v18;
  uint64_t v19;
  id v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  Swift::Int v25;
  id v26;
  Swift::Int v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  char v34;
  uint64_t v35;
  id v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v1 = a1;
  v2 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v5 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v5)
    {
LABEL_3:
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<CKShareParticipant>);
      v3 = static _SetStorage.allocate(capacity:)();
      if (!v2)
        goto LABEL_4;
LABEL_8:
      swift_bridgeObjectRetain();
      v4 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v4)
        return;
      goto LABEL_9;
    }
  }
  else if (*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_3;
  }
  v3 = MEMORY[0x24BEE4B08];
  if (v2)
    goto LABEL_8;
LABEL_4:
  v4 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v4)
    return;
LABEL_9:
  v6 = v3 + 56;
  v42 = v4;
  if ((v1 & 0xC000000000000001) != 0)
  {
    v7 = 0;
    v40 = v1;
    while (1)
    {
      v8 = MEMORY[0x24BD0F250](v7, v1);
      v9 = __OFADD__(v7++, 1);
      if (v9)
      {
        __break(1u);
        goto LABEL_37;
      }
      v10 = v8;
      v11 = NSObject._rawHashValue(seed:)(*(_QWORD *)(v3 + 40));
      v12 = -1 << *(_BYTE *)(v3 + 32);
      v13 = v11 & ~v12;
      v14 = v13 >> 6;
      v15 = *(_QWORD *)(v6 + 8 * (v13 >> 6));
      v16 = 1 << v13;
      if (((1 << v13) & v15) != 0)
      {
        type metadata accessor for CKShareParticipant();
        v17 = *(id *)(*(_QWORD *)(v3 + 48) + 8 * v13);
        v18 = static NSObject.== infix(_:_:)();

        if ((v18 & 1) != 0)
        {
LABEL_11:
          swift_unknownObjectRelease();
          v1 = v40;
          goto LABEL_12;
        }
        v19 = ~v12;
        while (1)
        {
          v13 = (v13 + 1) & v19;
          v14 = v13 >> 6;
          v15 = *(_QWORD *)(v6 + 8 * (v13 >> 6));
          v16 = 1 << v13;
          if ((v15 & (1 << v13)) == 0)
            break;
          v20 = *(id *)(*(_QWORD *)(v3 + 48) + 8 * v13);
          v21 = static NSObject.== infix(_:_:)();

          if ((v21 & 1) != 0)
            goto LABEL_11;
        }
        v1 = v40;
      }
      *(_QWORD *)(v6 + 8 * v14) = v16 | v15;
      *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v13) = v10;
      v22 = *(_QWORD *)(v3 + 16);
      v9 = __OFADD__(v22, 1);
      v23 = v22 + 1;
      if (v9)
        goto LABEL_38;
      *(_QWORD *)(v3 + 16) = v23;
LABEL_12:
      if (v7 == v42)
        return;
    }
  }
  v24 = 0;
  v41 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (v24 != v41)
  {
    v25 = *(_QWORD *)(v3 + 40);
    v26 = *(id *)(v1 + 32 + 8 * v24);
    v27 = NSObject._rawHashValue(seed:)(v25);
    v28 = -1 << *(_BYTE *)(v3 + 32);
    v29 = v27 & ~v28;
    v30 = v29 >> 6;
    v31 = *(_QWORD *)(v6 + 8 * (v29 >> 6));
    v32 = 1 << v29;
    if (((1 << v29) & v31) != 0)
    {
      type metadata accessor for CKShareParticipant();
      v33 = *(id *)(*(_QWORD *)(v3 + 48) + 8 * v29);
      v34 = static NSObject.== infix(_:_:)();

      if ((v34 & 1) != 0)
        goto LABEL_24;
      v35 = ~v28;
      v29 = (v29 + 1) & v35;
      v30 = v29 >> 6;
      v31 = *(_QWORD *)(v6 + 8 * (v29 >> 6));
      v32 = 1 << v29;
      if ((v31 & (1 << v29)) != 0)
      {
        while (1)
        {
          v36 = *(id *)(*(_QWORD *)(v3 + 48) + 8 * v29);
          v37 = static NSObject.== infix(_:_:)();

          if ((v37 & 1) != 0)
            break;
          v29 = (v29 + 1) & v35;
          v30 = v29 >> 6;
          v31 = *(_QWORD *)(v6 + 8 * (v29 >> 6));
          v32 = 1 << v29;
          if ((v31 & (1 << v29)) == 0)
            goto LABEL_32;
        }
LABEL_24:

        v4 = v42;
        goto LABEL_25;
      }
LABEL_32:
      v4 = v42;
    }
    *(_QWORD *)(v6 + 8 * v30) = v32 | v31;
    *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v29) = v26;
    v38 = *(_QWORD *)(v3 + 16);
    v9 = __OFADD__(v38, 1);
    v39 = v38 + 1;
    if (v9)
      goto LABEL_39;
    *(_QWORD *)(v3 + 16) = v39;
LABEL_25:
    if (++v24 == v4)
      return;
  }
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
}

uint64_t instantiation function for generic protocol witness table for PersonalGroupSessionProvider<A>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x24BD0F8BC](MEMORY[0x24BDD1BB8]);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for CKShareGroupSessionProvider<A>(uint64_t a1)
{
  uint64_t result;

  result = MEMORY[0x24BD0F8BC](&protocol conformance descriptor for CKShareGroupSessionProvider<A>);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_24A41B950@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1 + OBJC_IVAR____WBParticipantPresenceCoordinator_delegate;
  swift_beginAccess();
  result = MEMORY[0x24BD0FA24](v3);
  *a2 = result;
  return result;
}

uint64_t sub_24A41B9A4()
{
  swift_beginAccess();
  return swift_unknownObjectWeakAssign();
}

uint64_t type metadata accessor for ParticipantPresenceCoordinator()
{
  return objc_opt_self();
}

uint64_t destroy for ParticipantPresenceCoordinator.ConnectionManagerStore.SharedConnection(uint64_t a1)
{

  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for ParticipantPresenceCoordinator.ConnectionManagerStore.SharedConnection(_QWORD *a1, _QWORD *a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  id v6;

  v3 = (void *)a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  v6 = v3;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for ParticipantPresenceCoordinator.ConnectionManagerStore.SharedConnection(_QWORD *a1, _QWORD *a2)
{
  void *v4;
  void *v5;
  id v6;

  *a1 = *a2;
  v4 = (void *)a2[1];
  v5 = (void *)a1[1];
  a1[1] = v4;
  v6 = v4;

  a1[2] = a2[2];
  swift_retain();
  swift_release();
  a1[3] = a2[3];
  swift_retain();
  swift_release();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  return a1;
}

__n128 __swift_memcpy48_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for ParticipantPresenceCoordinator.ConnectionManagerStore.SharedConnection(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;

  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release();
  swift_release();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for ParticipantPresenceCoordinator.ConnectionManagerStore.SharedConnection(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ParticipantPresenceCoordinator.ConnectionManagerStore.SharedConnection(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ParticipantPresenceCoordinator.ConnectionManagerStore.SharedConnection()
{
  return &type metadata for ParticipantPresenceCoordinator.ConnectionManagerStore.SharedConnection;
}

void specialized ParticipantPresenceCoordinator._notifyStoreUpdates(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  Class isa;
  void *v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  int64_t v25;
  int64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  Class v32;
  void *v33;
  int64_t v34;
  unint64_t v35;
  int64_t v36;
  uint64_t v37;
  int64_t v38;
  uint64_t v39;
  uint64_t v40;

  v5 = v2 + OBJC_IVAR____WBParticipantPresenceCoordinator_delegate;
  swift_beginAccess();
  v6 = MEMORY[0x24BD0FA24](v5);
  if (!v6)
    return;
  v7 = (void *)v6;
  v37 = a1 + 64;
  v8 = 1 << *(_BYTE *)(a1 + 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & *(_QWORD *)(a1 + 64);
  v38 = (unint64_t)(v8 + 63) >> 6;
  swift_bridgeObjectRetain();
  v11 = 0;
  while (1)
  {
    if (v10)
    {
      v12 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v13 = v12 | (v11 << 6);
      goto LABEL_6;
    }
    v19 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
LABEL_45:
      __break(1u);
      goto LABEL_46;
    }
    if (v19 >= v38)
      goto LABEL_22;
    v20 = *(_QWORD *)(v37 + 8 * v19);
    ++v11;
    if (!v20)
    {
      v11 = v19 + 1;
      if (v19 + 1 >= v38)
        goto LABEL_22;
      v20 = *(_QWORD *)(v37 + 8 * v11);
      if (!v20)
      {
        v11 = v19 + 2;
        if (v19 + 2 >= v38)
          goto LABEL_22;
        v20 = *(_QWORD *)(v37 + 8 * v11);
        if (!v20)
          break;
      }
    }
LABEL_21:
    v10 = (v20 - 1) & v20;
    v13 = __clz(__rbit64(v20)) + (v11 << 6);
LABEL_6:
    v14 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v13);
    v15 = *v14;
    v16 = v14[1];
    type metadata accessor for CKShareParticipant();
    lazy protocol witness table accessor for type CKShareParticipant and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type CKShareParticipant and conformance NSObject, (uint64_t (*)(uint64_t))type metadata accessor for CKShareParticipant, MEMORY[0x24BEE5BD8]);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    isa = Set._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v18 = (void *)MEMORY[0x24BD0EF2C](v15, v16);
    swift_bridgeObjectRelease();
    objc_msgSend(v7, sel_participantPresenceCoordinator_didUpdateActiveParticipants_inTabGroupWithIdentifier_, v40, isa, v18);

  }
  v21 = v19 + 3;
  if (v21 < v38)
  {
    v20 = *(_QWORD *)(v37 + 8 * v21);
    if (!v20)
    {
      while (1)
      {
        v11 = v21 + 1;
        if (__OFADD__(v21, 1))
          break;
        if (v11 >= v38)
          goto LABEL_22;
        v20 = *(_QWORD *)(v37 + 8 * v11);
        ++v21;
        if (v20)
          goto LABEL_21;
      }
LABEL_46:
      __break(1u);
      goto LABEL_47;
    }
    v11 = v21;
    goto LABEL_21;
  }
LABEL_22:
  swift_release();
  v39 = a2 + 64;
  v22 = 1 << *(_BYTE *)(a2 + 32);
  v23 = -1;
  if (v22 < 64)
    v23 = ~(-1 << v22);
  v24 = v23 & *(_QWORD *)(a2 + 64);
  v25 = (unint64_t)(v22 + 63) >> 6;
  swift_bridgeObjectRetain();
  v26 = 0;
  while (2)
  {
    if (v24)
    {
      v27 = __clz(__rbit64(v24));
      v24 &= v24 - 1;
      v28 = v27 | (v26 << 6);
LABEL_26:
      v29 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * v28);
      v30 = *v29;
      v31 = v29[1];
      type metadata accessor for CKShareParticipant();
      lazy protocol witness table accessor for type CKShareParticipant and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type CKShareParticipant and conformance NSObject, (uint64_t (*)(uint64_t))type metadata accessor for CKShareParticipant, MEMORY[0x24BEE5BD8]);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v32 = Set._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      v33 = (void *)MEMORY[0x24BD0EF2C](v30, v31);
      swift_bridgeObjectRelease();
      objc_msgSend(v7, sel_participantPresenceCoordinator_didUpdateActiveParticipants_inTabWithIdentifier_, v40, v32, v33);

      continue;
    }
    break;
  }
  v34 = v26 + 1;
  if (__OFADD__(v26, 1))
    goto LABEL_45;
  if (v34 >= v25)
  {
LABEL_42:
    swift_unknownObjectRelease();
    swift_release();
    return;
  }
  v35 = *(_QWORD *)(v39 + 8 * v34);
  ++v26;
  if (v35)
    goto LABEL_41;
  v26 = v34 + 1;
  if (v34 + 1 >= v25)
    goto LABEL_42;
  v35 = *(_QWORD *)(v39 + 8 * v26);
  if (v35)
    goto LABEL_41;
  v26 = v34 + 2;
  if (v34 + 2 >= v25)
    goto LABEL_42;
  v35 = *(_QWORD *)(v39 + 8 * v26);
  if (v35)
  {
LABEL_41:
    v24 = (v35 - 1) & v35;
    v28 = __clz(__rbit64(v35)) + (v26 << 6);
    goto LABEL_26;
  }
  v36 = v34 + 3;
  if (v36 >= v25)
    goto LABEL_42;
  v35 = *(_QWORD *)(v39 + 8 * v36);
  if (v35)
  {
    v26 = v36;
    goto LABEL_41;
  }
  while (1)
  {
    v26 = v36 + 1;
    if (__OFADD__(v36, 1))
      break;
    if (v26 >= v25)
      goto LABEL_42;
    v35 = *(_QWORD *)(v39 + 8 * v26);
    ++v36;
    if (v35)
      goto LABEL_41;
  }
LABEL_47:
  __break(1u);
}

Swift::Int specialized Set.init(_nonEmptyArrayLiteral:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  Swift::Int result;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  BOOL v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
    v3 = static _SetStorage.allocate(capacity:)();
    v4 = 0;
    v5 = v3 + 56;
    v25 = a1 + 32;
    while (1)
    {
      v6 = (uint64_t *)(v25 + 16 * v4);
      v8 = *v6;
      v7 = v6[1];
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      result = Hasher._finalize()();
      v10 = -1 << *(_BYTE *)(v3 + 32);
      v11 = result & ~v10;
      v12 = v11 >> 6;
      v13 = *(_QWORD *)(v5 + 8 * (v11 >> 6));
      v14 = 1 << v11;
      if (((1 << v11) & v13) != 0)
      {
        v15 = *(_QWORD *)(v3 + 48);
        v16 = (_QWORD *)(v15 + 16 * v11);
        v17 = *v16 == v8 && v16[1] == v7;
        if (v17 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
        {
LABEL_3:
          swift_bridgeObjectRelease();
          goto LABEL_4;
        }
        v18 = ~v10;
        while (1)
        {
          v11 = (v11 + 1) & v18;
          v12 = v11 >> 6;
          v13 = *(_QWORD *)(v5 + 8 * (v11 >> 6));
          v14 = 1 << v11;
          if ((v13 & (1 << v11)) == 0)
            break;
          v19 = (_QWORD *)(v15 + 16 * v11);
          if (*v19 != v8 || v19[1] != v7)
          {
            result = _stringCompareWithSmolCheck(_:_:expecting:)();
            if ((result & 1) == 0)
              continue;
          }
          goto LABEL_3;
        }
      }
      *(_QWORD *)(v5 + 8 * v12) = v14 | v13;
      v21 = (_QWORD *)(*(_QWORD *)(v3 + 48) + 16 * v11);
      *v21 = v8;
      v21[1] = v7;
      v22 = *(_QWORD *)(v3 + 16);
      v23 = __OFADD__(v22, 1);
      v24 = v22 + 1;
      if (v23)
      {
        __break(1u);
        return result;
      }
      *(_QWORD *)(v3 + 16) = v24;
LABEL_4:
      if (++v4 == v1)
        return v3;
    }
  }
  return MEMORY[0x24BEE4B08];
}

uint64_t outlined assign with take of PresenceUpdateMessage(uint64_t a1, uint64_t a2)
{
  assignWithTake for PresenceUpdateMessage(a2, a1);
  return a2;
}

uint64_t outlined consume of ParticipantPresenceCoordinator.ConnectionManagerStore.SharedConnection?(uint64_t a1, void *a2)
{
  uint64_t result;

  if (a2)
  {

    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t outlined release of ParticipantPresenceCoordinator.ConnectionManagerStore.SharedConnection?(uint64_t a1)
{
  outlined consume of ParticipantPresenceCoordinator.ConnectionManagerStore.SharedConnection?(*(_QWORD *)a1, *(void **)(a1 + 8));
  return a1;
}

uint64_t _sIeghH_IeAgH_TRTA()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  _QWORD *v5;

  v2 = v0[2];
  v3 = v0[3];
  v4 = (int *)v0[4];
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = specialized closure #3 in closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:);
  return ((uint64_t (*)(uint64_t, uint64_t, int *))((char *)&_sIeghH_IeAgH_TRTu + _sIeghH_IeAgH_TRTu))(v2, v3, v4);
}

uint64_t _sIeAgH_ytIeAgHr_TRTA(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = (int *)v1[4];
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = specialized closure #3 in closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&_sIeAgH_ytIeAgHr_TRTu
                                                                   + _sIeAgH_ytIeAgHr_TRTu))(a1, v4, v5, v6);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5TA(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = specialized closure #3 in closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:);
  return ((uint64_t (*)(uint64_t, int *))((char *)&_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5Tu
                                                 + _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5Tu))(a1, v4);
}

uint64_t partial apply for @objc closure #1 in ParticipantPresenceCoordinator.activeParticipantsInTabGroup(_:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  _QWORD *v5;

  v2 = v0[2];
  v3 = (void *)v0[3];
  v4 = (void *)v0[4];
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = specialized closure #3 in closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:);
  return ((uint64_t (*)(int, void *, void *))((char *)&async function pointer to @objc closure #1 in ParticipantPresenceCoordinator.activeParticipantsInTabGroup(_:)
                                                      + async function pointer to @objc closure #1 in ParticipantPresenceCoordinator.activeParticipantsInTabGroup(_:)))(v2, v3, v4);
}

uint64_t partial apply for @objc closure #1 in ParticipantPresenceCoordinator.currentLocationIdentifiersForParticipant(_:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  _QWORD *v5;

  v2 = v0[2];
  v3 = (void *)v0[3];
  v4 = (void *)v0[4];
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = specialized closure #3 in closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:);
  return ((uint64_t (*)(int, void *, void *))((char *)&async function pointer to @objc closure #1 in ParticipantPresenceCoordinator.currentLocationIdentifiersForParticipant(_:)
                                                      + async function pointer to @objc closure #1 in ParticipantPresenceCoordinator.currentLocationIdentifiersForParticipant(_:)))(v2, v3, v4);
}

uint64_t partial apply for @objc closure #1 in ParticipantPresenceCoordinator.tabIdentifierForParticipant(_:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  _QWORD *v5;

  v2 = v0[2];
  v3 = (void *)v0[3];
  v4 = (void *)v0[4];
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = specialized closure #3 in closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:);
  return ((uint64_t (*)(int, void *, void *))((char *)&async function pointer to @objc closure #1 in ParticipantPresenceCoordinator.tabIdentifierForParticipant(_:)
                                                      + async function pointer to @objc closure #1 in ParticipantPresenceCoordinator.tabIdentifierForParticipant(_:)))(v2, v3, v4);
}

uint64_t objectdestroy_41Tm()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 24));
  return swift_deallocObject();
}

uint64_t partial apply for @objc closure #1 in ParticipantPresenceCoordinator.tabGroupIdentifierForParticipant(_:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  _QWORD *v5;

  v2 = v0[2];
  v3 = (void *)v0[3];
  v4 = (void *)v0[4];
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = specialized closure #3 in closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:);
  return ((uint64_t (*)(int, void *, void *))((char *)&async function pointer to @objc closure #1 in ParticipantPresenceCoordinator.tabGroupIdentifierForParticipant(_:)
                                                      + async function pointer to @objc closure #1 in ParticipantPresenceCoordinator.tabGroupIdentifierForParticipant(_:)))(v2, v3, v4);
}

uint64_t objectdestroy_32Tm()
{
  uint64_t v0;

  swift_unknownObjectRelease();

  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t objectdestroy_28Tm()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t objectdestroy_16Tm()
{
  uint64_t v0;

  swift_unknownObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_24A41C738()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));

  return swift_deallocObject();
}

uint64_t partial apply for @objc closure #1 in ParticipantPresenceCoordinator.currentConnectionState()()
{
  uint64_t v0;
  uint64_t v1;
  const void *v2;
  void *v3;
  _QWORD *v4;

  v2 = *(const void **)(v0 + 16);
  v3 = *(void **)(v0 + 24);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = specialized closure #3 in closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:);
  return ((uint64_t (*)(const void *, void *))((char *)&async function pointer to @objc closure #1 in ParticipantPresenceCoordinator.currentConnectionState()
                                                       + async function pointer to @objc closure #1 in ParticipantPresenceCoordinator.currentConnectionState()))(v2, v3);
}

uint64_t objectdestroy_45Tm()
{
  swift_unknownObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t outlined destroy of weak ParticipantPresenceCoordinatorDelegate?(uint64_t a1)
{
  swift_unknownObjectWeakDestroy();
  return a1;
}

uint64_t *outlined retain of PresenceUpdateMessage(uint64_t *a1)
{
  outlined copy of PresenceUpdateMessage.Kind(*a1, a1[1]);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t partial apply for specialized closure #1 in CollaborationConnectionManager.leaveActivity()()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = specialized closure #3 in closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:);
  v2 = (_QWORD *)swift_task_alloc();
  v1[2] = v2;
  *v2 = v1;
  v2[1] = specialized closure #3 in closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:);
  return specialized CollaborationConnectionManager.leaveGroupSessionProvider(_:)();
}

{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = specialized closure #3 in closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:);
  v2 = (_QWORD *)swift_task_alloc();
  v1[2] = v2;
  *v2 = v1;
  v2[1] = specialized closure #3 in closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:);
  return specialized CollaborationConnectionManager.leaveGroupSessionProvider(_:)();
}

uint64_t partial apply for specialized closure #2 in FastSyncStateMachine.leaveActivity(priority:_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  __int128 v4;

  v2 = swift_task_alloc();
  v3 = *(_OWORD *)(v0 + 32);
  v4 = *(_OWORD *)(v0 + 48);
  *(_QWORD *)(v1 + 16) = v2;
  *(_QWORD *)v2 = v1;
  *(_QWORD *)(v2 + 8) = specialized closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:);
  *(_OWORD *)(v2 + 16) = v3;
  *(_OWORD *)(v2 + 32) = v4;
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  __int128 v4;

  v2 = swift_task_alloc();
  v3 = *(_OWORD *)(v0 + 32);
  v4 = *(_OWORD *)(v0 + 48);
  *(_QWORD *)(v1 + 16) = v2;
  *(_QWORD *)v2 = v1;
  *(_QWORD *)(v2 + 8) = specialized closure #3 in closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:);
  *(_OWORD *)(v2 + 16) = v3;
  *(_OWORD *)(v2 + 32) = v4;
  return swift_task_switch();
}

uint64_t sub_24A41C934()
{
  return objectdestroy_168Tm((void (*)(_QWORD))MEMORY[0x24BEE4EF8]);
}

uint64_t partial apply for specialized closure #1 in FastSyncStateMachine.leaveActivity(priority:_:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = specialized closure #3 in closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:);
  return specialized closure #1 in FastSyncStateMachine.leaveActivity(priority:_:)(a1, v4, v5, v6, v7, v8);
}

{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = specialized closure #3 in closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:);
  return specialized closure #1 in FastSyncStateMachine.leaveActivity(priority:_:)(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_24A41C9C0()
{
  uint64_t v0;

  return swift_deallocObject();
}

void *partial apply for implicit closure #3 in ParticipantPresenceCoordinator.ConnectionManagerStore.addSharedConnection(forShare:createIfNeededUsing:)()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + 16);
  v2 = v1;
  return v1;
}

uint64_t sub_24A41CA0C()
{
  return swift_deallocObject();
}

_QWORD *partial apply for closure #1 in ParticipantPresenceCoordinator._startActivityForShare(_:tabGroupIdentifier:)(uint64_t *a1)
{
  uint64_t v1;

  return closure #1 in ParticipantPresenceCoordinator._startActivityForShare(_:tabGroupIdentifier:)(a1, *(void **)(v1 + 16));
}

uint64_t partial apply for specialized closure #1 in CollaborationConnectionManager.startActivity()(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  char v5;
  _QWORD *v6;

  v5 = a2 & 1;
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = specialized closure #3 in closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:);
  return specialized closure #1 in CollaborationConnectionManager.startActivity()(a1, v5, v2);
}

{
  uint64_t v2;
  uint64_t v3;
  char v5;
  _QWORD *v6;

  v5 = a2 & 1;
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = specialized closure #3 in closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:);
  return specialized closure #1 in CollaborationConnectionManager.startActivity()(a1, v5, v2);
}

uint64_t sub_24A41CA94()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ParticipantPresenceCoordinator._makeSharedConnectionSubscriptionTask(with:share:participantHandleMap:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = v1[7];
  v10 = v1[8];
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v11;
  *v11 = v2;
  v11[1] = specialized closure #3 in closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:);
  return closure #1 in ParticipantPresenceCoordinator._makeSharedConnectionSubscriptionTask(with:share:participantHandleMap:)(a1, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_24A41CB6C()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in ParticipantPresenceCoordinator._makeSharedConnectionSubscriptionTask(with:share:participantHandleMap:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = v1[7];
  v10 = v1[8];
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v11;
  *v11 = v2;
  v11[1] = specialized closure #3 in closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:);
  return closure #2 in ParticipantPresenceCoordinator._makeSharedConnectionSubscriptionTask(with:share:participantHandleMap:)(a1, v4, v5, v6, v7, v8, v9, v10);
}

unint64_t lazy protocol witness table accessor for type PresenceUpdateMessage and conformance PresenceUpdateMessage()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PresenceUpdateMessage and conformance PresenceUpdateMessage;
  if (!lazy protocol witness table cache variable for type PresenceUpdateMessage and conformance PresenceUpdateMessage)
  {
    result = MEMORY[0x24BD0F8BC](&protocol conformance descriptor for PresenceUpdateMessage, &type metadata for PresenceUpdateMessage);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PresenceUpdateMessage and conformance PresenceUpdateMessage);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PresenceUpdateMessage and conformance PresenceUpdateMessage;
  if (!lazy protocol witness table cache variable for type PresenceUpdateMessage and conformance PresenceUpdateMessage)
  {
    result = MEMORY[0x24BD0F8BC](&protocol conformance descriptor for PresenceUpdateMessage, &type metadata for PresenceUpdateMessage);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PresenceUpdateMessage and conformance PresenceUpdateMessage);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PresenceUpdateMessage and conformance PresenceUpdateMessage;
  if (!lazy protocol witness table cache variable for type PresenceUpdateMessage and conformance PresenceUpdateMessage)
  {
    result = MEMORY[0x24BD0F8BC](&protocol conformance descriptor for PresenceUpdateMessage, &type metadata for PresenceUpdateMessage);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PresenceUpdateMessage and conformance PresenceUpdateMessage);
  }
  return result;
}

uint64_t outlined consume of Set<Participant>.Iterator._Variant()
{
  return swift_release();
}

void outlined consume of ParticipantHandleMap.ParticipantKind?(id a1)
{
  if (a1 != (id)1)

}

uint64_t partial apply for specialized closure #1 in AsyncBufferedQueue.init(bufferingPolicy:)(uint64_t a1)
{
  uint64_t v1;

  return specialized closure #1 in AsyncBufferedQueue.init(bufferingPolicy:)(a1, *(_QWORD *)(v1 + 16), &demangling cache variable for type metadata for AsyncStream<Set<Participant>>.Continuation?, &demangling cache variable for type metadata for AsyncStream<Set<Participant>>.Continuation);
}

{
  uint64_t v1;

  return specialized closure #1 in AsyncBufferedQueue.init(bufferingPolicy:)(a1, *(_QWORD *)(v1 + 16), &demangling cache variable for type metadata for AsyncStream<PresenceUpdateMessage>.Continuation?, &demangling cache variable for type metadata for AsyncStream<PresenceUpdateMessage>.Continuation);
}

{
  uint64_t v1;

  return specialized closure #1 in AsyncBufferedQueue.init(bufferingPolicy:)(a1, *(_QWORD *)(v1 + 16), &demangling cache variable for type metadata for AsyncStream<(PresenceUpdateMessage, GroupSessionMessenger.MessageContext)>.Continuation?, &demangling cache variable for type metadata for AsyncStream<(PresenceUpdateMessage, GroupSessionMessenger.MessageContext)>.Continuation);
}

uint64_t *outlined release of PresenceUpdateMessage(uint64_t *a1)
{
  outlined consume of PresenceUpdateMessage.Kind(*a1, a1[1]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t partial apply for specialized closure #3 in FastSyncStateMachine.startActivity(_:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v9 = v1[6];
  v8 = v1[7];
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = specialized closure #3 in closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&async function pointer to specialized closure #3 in FastSyncStateMachine.startActivity(_:)
                                                                                                + async function pointer to specialized closure #3 in FastSyncStateMachine.startActivity(_:)))(a1, v4, v5, v6, v7, v9, v8);
}

{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v9 = v1[6];
  v8 = v1[7];
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = specialized closure #3 in closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&async function pointer to specialized closure #3 in FastSyncStateMachine.startActivity(_:)
                                                                                                + async function pointer to specialized closure #3 in FastSyncStateMachine.startActivity(_:)))(a1, v4, v5, v6, v7, v9, v8);
}

uint64_t partial apply for specialized closure #2 in FastSyncStateMachine.startActivity(_:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v9 = v1[6];
  v8 = v1[7];
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = specialized closure #3 in closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&async function pointer to specialized closure #2 in FastSyncStateMachine.startActivity(_:)
                                                                                                + async function pointer to specialized closure #2 in FastSyncStateMachine.startActivity(_:)))(a1, v4, v5, v6, v7, v9, v8);
}

{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v9 = v1[6];
  v8 = v1[7];
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = specialized closure #3 in closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&async function pointer to specialized closure #2 in FastSyncStateMachine.startActivity(_:)
                                                                                                + async function pointer to specialized closure #2 in FastSyncStateMachine.startActivity(_:)))(a1, v4, v5, v6, v7, v9, v8);
}

uint64_t partial apply for specialized closure #1 in FastSyncStateMachine.startActivity(_:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = specialized closure #3 in closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&async function pointer to specialized closure #1 in FastSyncStateMachine.startActivity(_:)
                                                                                       + async function pointer to specialized closure #1 in FastSyncStateMachine.startActivity(_:)))(a1, v4, v5, v6, v7, v8);
}

{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = specialized closure #3 in closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&async function pointer to specialized closure #1 in FastSyncStateMachine.startActivity(_:)
                                                                                       + async function pointer to specialized closure #1 in FastSyncStateMachine.startActivity(_:)))(a1, v4, v5, v6, v7, v8);
}

uint64_t partial apply for specialized closure #1 in CollaborationConnectionManager.joinGroupSessionProvider(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  v2 = *(_QWORD *)(v0 + 40);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = specialized closure #3 in closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:);
  v4 = (_QWORD *)swift_task_alloc();
  v3[2] = v4;
  *v4 = v3;
  v4[1] = specialized closure #3 in closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:);
  return specialized CollaborationConnectionManager.waitForGroupSessions(with:)(v2);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  v2 = *(_QWORD *)(v0 + 40);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = specialized closure #3 in closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:);
  v4 = (_QWORD *)swift_task_alloc();
  v3[2] = v4;
  *v4 = v3;
  v4[1] = specialized closure #3 in closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:);
  return specialized CollaborationConnectionManager.waitForGroupSessions(with:)(v2);
}

uint64_t outlined assign with take of Participant?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Participant?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for specialized closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  _QWORD *v9;

  v6 = v2[2];
  v7 = v2[3];
  v8 = (uint64_t *)v2[4];
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v9;
  *v9 = v3;
  v9[1] = specialized closure #3 in closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *))((char *)&async function pointer to specialized closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:)
                                                                                + async function pointer to specialized closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:)))(a1, a2, v6, v7, v8);
}

{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  _QWORD *v9;

  v6 = v2[2];
  v7 = v2[3];
  v8 = (uint64_t *)v2[4];
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v9;
  *v9 = v3;
  v9[1] = specialized closure #3 in closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *))((char *)&async function pointer to specialized closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:)
                                                                                + async function pointer to specialized closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:)))(a1, a2, v6, v7, v8);
}

uint64_t partial apply for specialized closure #1 in closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = specialized closure #3 in closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *))((char *)&async function pointer to specialized closure #1 in closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:)
                                                                                         + async function pointer to specialized closure #1 in closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:)))(a1, v4, v5, v6, v7, v1 + 6);
}

{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = specialized closure #3 in closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *))((char *)&async function pointer to specialized closure #1 in closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:)
                                                                                         + async function pointer to specialized closure #1 in closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:)))(a1, v4, v5, v6, v7, v1 + 6);
}

uint64_t partial apply for specialized closure #2 in closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = specialized closure #3 in closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *))((char *)&async function pointer to specialized closure #2 in closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:)
                                                                                         + async function pointer to specialized closure #2 in closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:)))(a1, v4, v5, v6, v7, v1 + 6);
}

{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = specialized closure #3 in closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *))((char *)&async function pointer to specialized closure #2 in closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:)
                                                                                         + async function pointer to specialized closure #2 in closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:)))(a1, v4, v5, v6, v7, v1 + 6);
}

uint64_t partial apply for specialized closure #3 in closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  v2 = *(_QWORD *)(v0 + 40);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = specialized closure #3 in closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:);
  v4 = (_QWORD *)swift_task_alloc();
  v3[2] = v4;
  *v4 = v3;
  v4[1] = specialized closure #3 in closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:);
  return specialized CollaborationConnectionManager.runGroupSession(_:)(v2);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  v2 = *(_QWORD *)(v0 + 40);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = specialized closure #3 in closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:);
  v4 = (_QWORD *)swift_task_alloc();
  v3[2] = v4;
  *v4 = v3;
  v4[1] = specialized closure #3 in closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:);
  return specialized CollaborationConnectionManager.runGroupSession(_:)(v2);
}

uint64_t partial apply for specialized closure #1 in GroupSession.leave(on:)(uint64_t a1)
{
  uint64_t v1;

  return specialized closure #1 in GroupSession.leave(on:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), (uint64_t)&unk_251BC9F70, (uint64_t)partial apply for specialized closure #1 in closure #1 in GroupSession.leave(on:), (uint64_t)&block_descriptor);
}

{
  uint64_t v1;

  return specialized closure #1 in GroupSession.leave(on:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), (uint64_t)&unk_251BCA240, (uint64_t)partial apply for specialized closure #1 in closure #1 in GroupSession.leave(on:), (uint64_t)&block_descriptor_402);
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

uint64_t sub_24A41D260()
{
  return objectdestroy_168Tm((void (*)(_QWORD))MEMORY[0x24BEE4BC0]);
}

uint64_t partial apply for specialized closure #1 in GroupSessionMessengerController._makeTasks()(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = specialized closure #3 in closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *))((char *)&async function pointer to specialized closure #1 in GroupSessionMessengerController._makeTasks()
                                                                                + async function pointer to specialized closure #1 in GroupSessionMessengerController._makeTasks()))(a1, v4, v5, v6, v1 + 5);
}

{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = specialized closure #3 in closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *))((char *)&async function pointer to specialized closure #1 in GroupSessionMessengerController._makeTasks()
                                                                                + async function pointer to specialized closure #1 in GroupSessionMessengerController._makeTasks()))(a1, v4, v5, v6, v1 + 5);
}

uint64_t sub_24A41D2F4()
{
  return objectdestroy_168Tm((void (*)(_QWORD))MEMORY[0x24BEE4BC0]);
}

uint64_t partial apply for specialized closure #2 in GroupSessionMessengerController._makeTasks()(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = specialized closure #3 in closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *))((char *)&async function pointer to specialized closure #2 in GroupSessionMessengerController._makeTasks()
                                                                                + async function pointer to specialized closure #2 in GroupSessionMessengerController._makeTasks()))(a1, v4, v5, v6, v1 + 5);
}

{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = specialized closure #3 in closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *))((char *)&async function pointer to specialized closure #2 in GroupSessionMessengerController._makeTasks()
                                                                                + async function pointer to specialized closure #2 in GroupSessionMessengerController._makeTasks()))(a1, v4, v5, v6, v1 + 5);
}

uint64_t partial apply for specialized closure #1 in GroupSession.join(on:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  __int128 v5;

  v4 = swift_task_alloc();
  v5 = *(_OWORD *)(v1 + 16);
  *(_QWORD *)(v2 + 16) = v4;
  *(_QWORD *)v4 = v2;
  *(_QWORD *)(v4 + 8) = specialized closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:);
  *(_OWORD *)(v4 + 24) = v5;
  *(_QWORD *)(v4 + 16) = a1;
  return swift_task_switch();
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  __int128 v5;

  v4 = swift_task_alloc();
  v5 = *(_OWORD *)(v1 + 16);
  *(_QWORD *)(v2 + 16) = v4;
  *(_QWORD *)v4 = v2;
  *(_QWORD *)(v4 + 8) = specialized closure #3 in closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:);
  *(_OWORD *)(v4 + 24) = v5;
  *(_QWORD *)(v4 + 16) = a1;
  return swift_task_switch();
}

void partial apply for specialized closure #2 in GroupSession.join(on:)()
{
  uint64_t v0;

  specialized closure #2 in GroupSession.join(on:)(v0, &demangling cache variable for type metadata for GroupSession<CKShareCollaborationActivity>.JoinState);
}

{
  uint64_t v0;

  specialized closure #2 in GroupSession.join(on:)(v0, &demangling cache variable for type metadata for GroupSession<PersonalDeviceCoordinationActivity>.JoinState);
}

uint64_t partial apply for specialized closure #1 in closure #1 in GroupSession.join(on:)(uint64_t a1)
{
  uint64_t v1;

  return specialized closure #1 in closure #1 in GroupSession.join(on:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), &demangling cache variable for type metadata for GroupSession<CKShareCollaborationActivity>.JoinState, (uint64_t)&unk_251BCA038, (uint64_t)partial apply for specialized closure #1 in GroupSession.JoinState.join(resuming:), (uint64_t)&block_descriptor_297);
}

{
  uint64_t v1;

  return specialized closure #1 in closure #1 in GroupSession.join(on:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), &demangling cache variable for type metadata for GroupSession<PersonalDeviceCoordinationActivity>.JoinState, (uint64_t)&unk_251BCA2E0, (uint64_t)partial apply for specialized closure #1 in GroupSession.JoinState.join(resuming:), (uint64_t)&block_descriptor_427);
}

uint64_t sub_24A41D470()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t *__swift_allocate_boxed_opaque_existential_1(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;

  v1 = a1;
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

id outlined copy of FastSyncStateMachine<CKShareCollaborationActivity, CKShareGroupSessionProvider<CKShareCollaborationActivity>>.State(uint64_t a1, void *a2, unint64_t a3)
{
  id result;

  switch(a3 >> 61)
  {
    case 0uLL:
    case 1uLL:
    case 2uLL:
      swift_retain();
      goto LABEL_4;
    case 3uLL:
      swift_retain();
      swift_retain();
LABEL_4:
      result = (id)swift_retain();
      break;
    case 4uLL:
      swift_retain();
      result = a2;
      break;
    default:
      return result;
  }
  return result;
}

void outlined consume of FastSyncStateMachine<CKShareCollaborationActivity, CKShareGroupSessionProvider<CKShareCollaborationActivity>>.State(uint64_t a1, void *a2, unint64_t a3)
{
  switch(a3 >> 61)
  {
    case 0uLL:
    case 1uLL:
    case 2uLL:
      swift_release();
      goto LABEL_4;
    case 3uLL:
      swift_release();
      swift_release();
LABEL_4:
      swift_release();
      break;
    case 4uLL:
      swift_release();

      break;
    default:
      return;
  }
}

uint64_t sub_24A41D6D8()
{
  return objectdestroy_168Tm((void (*)(_QWORD))MEMORY[0x24BEE4EF8]);
}

uint64_t partial apply for closure #1 in ParticipantPresenceCoordinator._makePersonalDeviceConnectionSubscriptionTask(with:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v7 = v1[4];
  v6 = v1[5];
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = specialized closure #3 in closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:);
  return closure #1 in ParticipantPresenceCoordinator._makePersonalDeviceConnectionSubscriptionTask(with:)(a1, v4, v5, v7, v6);
}

uint64_t objectdestroy_327Tm()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in ParticipantPresenceCoordinator._makePersonalDeviceConnectionSubscriptionTask(with:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v7 = v1[4];
  v6 = v1[5];
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = specialized closure #3 in closure #1 in CollaborationConnectionManager.waitForGroupSessions(with:);
  return closure #2 in ParticipantPresenceCoordinator._makePersonalDeviceConnectionSubscriptionTask(with:)(a1, v4, v5, v7, v6);
}

uint64_t objectdestroy_164Tm()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t objectdestroy_215Tm()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t objectdestroy_243Tm()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t objectdestroy_233Tm()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t objectdestroy_269Tm()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Never>);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t partial apply for specialized closure #1 in closure #1 in GroupSession.leave(on:)()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Never>);
  return specialized closure #1 in closure #1 in GroupSession.leave(on:)();
}

uint64_t sub_24A41DF34()
{
  return objectdestroy_168Tm((void (*)(_QWORD))MEMORY[0x24BEE4BC0]);
}

uint64_t sub_24A41DFC8()
{
  return objectdestroy_168Tm((void (*)(_QWORD))MEMORY[0x24BEE4BC0]);
}

uint64_t objectdestroy_168Tm(void (*a1)(_QWORD))
{
  uint64_t v1;

  swift_unknownObjectRelease();
  swift_release();
  a1(*(_QWORD *)(v1 + 48));
  return swift_deallocObject();
}

uint64_t outlined init with copy of TaskPriority?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined init with take of ParticipantPresenceCoordinator.ConnectionManagerStore.SharedConnection?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t objectdestroy_293Tm()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

void partial apply for specialized closure #1 in GroupSession.JoinState.join(resuming:)()
{
  uint64_t v0;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
  specialized closure #1 in GroupSession.JoinState.join(resuming:)(*(_QWORD *)(v0 + 16));
}

uint64_t lazy protocol witness table accessor for type CKShareGroupSessionProvider<CKShareCollaborationActivity> and conformance CKShareGroupSessionProvider<A>(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    result = MEMORY[0x24BD0F8BC](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

id CKShareParticipant.participantIdentifier.getter()
{
  void *v0;
  id v1;
  id v2;
  id v3;

  if (objc_msgSend(v0, sel_acceptanceStatus) != (id)2)
    return 0;
  v1 = objc_msgSend(v0, sel_userIdentity);
  v2 = objc_msgSend(v1, sel_userRecordID);

  if (v2)
  {
    v3 = objc_msgSend(v2, sel_recordName);

    v2 = (id)static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  return v2;
}

uint64_t (*specialized Dictionary.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3))()
{
  _QWORD *v6;

  v6 = malloc(0x30uLL);
  *a1 = v6;
  v6[4] = a3;
  swift_bridgeObjectRetain();
  v6[5] = specialized Dictionary._Variant.subscript.modify(v6, a2, a3);
  return Dictionary.subscript.modifyspecialized ;
}

{
  _QWORD *v6;

  v6 = malloc(0x30uLL);
  *a1 = v6;
  v6[4] = a3;
  swift_bridgeObjectRetain();
  v6[5] = specialized Dictionary._Variant.subscript.modify(v6, a2, a3);
  return Dictionary.subscript.modifyspecialized ;
}

{
  _QWORD *v6;

  v6 = malloc(0x30uLL);
  *a1 = v6;
  v6[4] = a3;
  swift_bridgeObjectRetain();
  v6[5] = specialized Dictionary._Variant.subscript.modify(v6, a2, a3);
  return Dictionary.subscript.modifyspecialized ;
}

void Dictionary.subscript.modifyspecialized (_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD, _QWORD))(*a1 + 40))(*a1, 0);
  swift_bridgeObjectRelease();
  free(v1);
}

uint64_t (*ParticipantPresenceStore._tabGroupIdentifiersToParticipants.modify())()
{
  swift_beginAccess();
  return ParticipantPresenceCoordinator.ConnectionManagerStore.tabGroupIdentifiersToSharedConnections.modify;
}

uint64_t (*ParticipantPresenceStore._tabIdentifiersToParticipants.modify())()
{
  swift_beginAccess();
  return ParticipantPresenceCoordinator.ConnectionManagerStore.pausedSharedConnections.modify;
}

uint64_t ParticipantPresenceStore.handleCurrentUserPresenceUpdateMessage(_:in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _OWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  _OWORD v19[2];
  _OWORD v20[2];

  v7 = (_OWORD *)(v3 + 144);
  v8 = *(_QWORD *)(v3 + 176);
  v9 = *(_QWORD *)(a1 + 32);
  if (v9 != v8)
  {
    if (v9 < v8)
      return 0;
    if (v8 < v9)
      goto LABEL_11;
    goto LABEL_16;
  }
  if (*(_QWORD *)(a1 + 40) == *(_QWORD *)(v3 + 184) && *(_QWORD *)(a1 + 48) == *(_QWORD *)(v3 + 192))
    goto LABEL_16;
  if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    return 0;
  if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
LABEL_16:
    v14 = *(_QWORD *)(v3 + 152);
    outlined init with take of PresenceUpdateMessage.Kind(a1, v19);
    if (v14)
    {
      outlined init with take of PresenceUpdateMessage.Kind((uint64_t)v19, v20);
    }
    else
    {
      outlined init with take of PresenceUpdateMessage.Kind((uint64_t)v19, v20);
      if (*((_QWORD *)&v20[0] + 1))
      {
        v15 = *(_QWORD *)(v3 + 144);
        v16 = *(_QWORD *)(v3 + 152);
        v17 = *(_OWORD *)(a1 + 16);
        *v7 = *(_OWORD *)a1;
        *(_OWORD *)(v3 + 160) = v17;
        *(_OWORD *)(v3 + 176) = *(_OWORD *)(a1 + 32);
        *(_QWORD *)(v3 + 192) = *(_QWORD *)(a1 + 48);
        outlined retain of PresenceUpdateMessage((uint64_t *)a1);
        outlined consume of PresenceUpdateMessage.Kind(v15, v16);
LABEL_25:
        swift_bridgeObjectRelease();
      }
    }
    return 0;
  }
LABEL_11:
  v11 = *(_QWORD *)(v3 + 144);
  v12 = *(_QWORD *)(v3 + 152);
  v13 = *(_OWORD *)(a1 + 16);
  *v7 = *(_OWORD *)a1;
  *(_OWORD *)(v3 + 160) = v13;
  *(_OWORD *)(v3 + 176) = *(_OWORD *)(a1 + 32);
  *(_QWORD *)(v3 + 192) = *(_QWORD *)(a1 + 48);
  outlined copy of PresenceUpdateMessage.Kind(v11, v12);
  outlined retain of PresenceUpdateMessage((uint64_t *)a1);
  outlined consume of PresenceUpdateMessage.Kind(v11, v12);
  swift_bridgeObjectRelease();
  if (!v12)
    return 0;
  outlined init with take of PresenceUpdateMessage.Kind(a1, v19);
  swift_bridgeObjectRelease();
  outlined init with take of PresenceUpdateMessage.Kind((uint64_t)v19, v20);
  if (*((_QWORD *)&v20[0] + 1))
  {
    if (v11 == *(_QWORD *)&v20[0] && v12 == *((_QWORD *)&v20[0] + 1))
      goto LABEL_25;
  }
  else
  {
    if (!a3)
      return v11;
    if (v11 == a2 && v12 == a3)
      goto LABEL_25;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    goto LABEL_25;
  return v11;
}

uint64_t ParticipantPresenceStore.handleSharedPresenceUpdateMessage(_:from:)(uint64_t *a1, void *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  unint64_t v34;
  char isUniquelyReferenced_nonNull_native;
  void *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t inited;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t result;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  char v75;
  uint64_t v76;
  BOOL v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  char v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  char v94;
  uint64_t v95;
  char v96;
  uint64_t v97;
  char v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  char v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  char v107;
  char v108;
  char v109;
  uint64_t v110;
  unint64_t v111;
  char v112;
  uint64_t v113;
  char v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _QWORD *v119;
  __int128 v120;
  uint64_t v121;
  void *v122;
  uint64_t v123;
  uint64_t v124;
  _QWORD *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;

  v3 = v2;
  v6 = CKShareParticipant.participantIdentifier.getter();
  if (!v7)
    goto LABEL_30;
  v8 = (uint64_t)v6;
  v9 = v7;
  v10 = v2 + 15;
  swift_beginAccess();
  v11 = v2[15];
  if (!*(_QWORD *)(v11 + 16))
  {
LABEL_20:
    swift_beginAccess();
    swift_bridgeObjectRetain();
    outlined retain of PresenceUpdateMessage(a1);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v131 = *v10;
    *v10 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)a1, v8, v9, isUniquelyReferenced_nonNull_native);
    *v10 = v131;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_endAccess();
    v36 = (void *)a1[1];
    if (!v36)
      goto LABEL_29;
    v37 = (_QWORD *)*a1;
    v39 = a1[2];
    v38 = a1[3];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    ParticipantPresenceStore._addParticipant(_:to:in:)(a2, v39, v38, v37, v36);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, (tabGroupIdentifier: String, tabIdentifier: String))>);
    inited = swift_initStackObject();
    v130 = 1;
    *(_OWORD *)(inited + 16) = xmmword_24A42FA50;
    *(_QWORD *)(inited + 32) = v8;
    *(_QWORD *)(inited + 40) = v9;
    *(_QWORD *)(inited + 48) = v37;
    *(_QWORD *)(inited + 56) = v36;
    *(_QWORD *)(inited + 64) = v39;
    *(_QWORD *)(inited + 72) = v38;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v34 = specialized Dictionary.init(dictionaryLiteral:)(inited);
    v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Set<CKShareParticipant>)>);
    v25 = swift_initStackObject();
    *(_OWORD *)(v25 + 16) = xmmword_24A42FA50;
    *(_QWORD *)(v25 + 32) = v37;
    *(_QWORD *)(v25 + 40) = v36;
    swift_beginAccess();
    v42 = v3[16];
    if (*(_QWORD *)(v42 + 16))
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v43 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v37, (uint64_t)v36);
      if ((v44 & 1) == 0)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        __break(1u);
        goto LABEL_110;
      }
      v45 = *(_QWORD *)(*(_QWORD *)(v42 + 56) + 8 * v43);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *(_QWORD *)(v25 + 48) = v45;
      specialized Dictionary.init(dictionaryLiteral:)(v25);
      v41 = swift_initStackObject();
      *(_OWORD *)(v41 + 16) = xmmword_24A42FA50;
      *(_QWORD *)(v41 + 32) = v39;
      *(_QWORD *)(v41 + 40) = v38;
      swift_beginAccess();
      v46 = v3[17];
      if (*(_QWORD *)(v46 + 16))
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v47 = specialized __RawDictionaryStorage.find<A>(_:)(v39, v38);
        if ((v48 & 1) != 0)
        {
          v49 = *(_QWORD *)(*(_QWORD *)(v46 + 56) + 8 * v47);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          *(_QWORD *)(v41 + 48) = v49;
          v50 = v41;
LABEL_31:
          specialized Dictionary.init(dictionaryLiteral:)(v50);
          return v34;
        }
LABEL_110:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        __break(1u);
        goto LABEL_111;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
LABEL_94:
    __break(1u);
    goto LABEL_95;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v12 = specialized __RawDictionaryStorage.find<A>(_:)(v8, v9);
  if ((v13 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_20;
  }
  v124 = v8;
  v125 = v2;
  v14 = (uint64_t *)(*(_QWORD *)(v11 + 56) + 56 * v12);
  v16 = v14[4];
  v15 = v14[5];
  v17 = v14[6];
  v126 = v14[3];
  v127 = *v14;
  v128 = v14[2];
  v130 = v14[1];
  outlined copy of PresenceUpdateMessage.Kind(*v14, v130);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v18 = a1[4];
  v19 = a1[5];
  v20 = a1[6];
  if (v18 != v16)
  {
    v22 = v15;
    if (v18 >= v16)
      goto LABEL_10;
    goto LABEL_28;
  }
  v21 = v19 == v15 && v20 == v17;
  v22 = v15;
  if (!v21)
  {
    v23 = _stringCompareWithSmolCheck(_:_:expecting:)();
    v22 = v15;
    if ((v23 & 1) != 0)
    {
LABEL_28:
      swift_bridgeObjectRelease();
      outlined consume of PresenceUpdateMessage.Kind(v127, v130);
LABEL_29:
      swift_bridgeObjectRelease();
LABEL_30:
      v51 = MEMORY[0x24BEE4AF8];
      v34 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
      specialized Dictionary.init(dictionaryLiteral:)(v51);
      v50 = v51;
      goto LABEL_31;
    }
  }
LABEL_10:
  v25 = *a1;
  v24 = a1[1];
  v26 = a1[2];
  v27 = a1[3];
  if (v130)
  {
    if (!v24)
    {
      if (v18 != v16
        || (v22 == v19 ? (v77 = v17 == v20) : (v77 = 0), !v77
                                                      && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0))
      {
        swift_bridgeObjectRetain();
        v88 = v126;
        swift_bridgeObjectRetain();
        ParticipantPresenceStore._removeParticipant(_:from:in:)(v124, v9, v128, v126, v127, v130);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
        v89 = swift_initStackObject();
        *(_OWORD *)(v89 + 16) = xmmword_24A42FA50;
        *(_QWORD *)(v89 + 32) = v124;
        *(_QWORD *)(v89 + 40) = v9;
        specialized Set.init(_nonEmptyArrayLiteral:)(v89);
        swift_setDeallocating();
        swift_arrayDestroy();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Set<CKShareParticipant>)>);
        v90 = swift_initStackObject();
        *(_OWORD *)(v90 + 16) = xmmword_24A42FA50;
        *(_QWORD *)(v90 + 32) = v127;
        *(_QWORD *)(v90 + 40) = v130;
        swift_beginAccess();
        v91 = v125[16];
        v92 = *(_QWORD *)(v91 + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v92 && (v93 = specialized __RawDictionaryStorage.find<A>(_:)(v127, v130), (v94 & 1) != 0))
        {
          v95 = *(_QWORD *)(*(_QWORD *)(v91 + 56) + 8 * v93);
          swift_bridgeObjectRetain();
        }
        else if ((MEMORY[0x24BEE4AF8] & 0xC000000000000000) != 0)
        {
          if (_CocoaArrayWrapper.endIndex.getter())
          {
            specialized Set.init(_nonEmptyArrayLiteral:)(MEMORY[0x24BEE4AF8]);
            v95 = v117;
          }
          else
          {
            v95 = MEMORY[0x24BEE4B08];
          }
          v88 = v126;
        }
        else
        {
          v95 = MEMORY[0x24BEE4B08];
        }
        swift_bridgeObjectRelease();
        *(_QWORD *)(v90 + 48) = v95;
        swift_bridgeObjectRelease();
        specialized Dictionary.init(dictionaryLiteral:)(v90);
        v99 = swift_initStackObject();
        *(_OWORD *)(v99 + 16) = xmmword_24A42FA50;
        *(_QWORD *)(v99 + 32) = v128;
        *(_QWORD *)(v99 + 40) = v88;
        swift_beginAccess();
        v100 = v125[17];
        v101 = *(_QWORD *)(v100 + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v101 && (v102 = specialized __RawDictionaryStorage.find<A>(_:)(v128, v88), (v103 & 1) != 0))
        {
          v104 = *(_QWORD *)(*(_QWORD *)(v100 + 56) + 8 * v102);
          swift_bridgeObjectRetain();
        }
        else if ((MEMORY[0x24BEE4AF8] & 0xC000000000000000) != 0)
        {
          if (_CocoaArrayWrapper.endIndex.getter())
          {
            specialized Set.init(_nonEmptyArrayLiteral:)(MEMORY[0x24BEE4AF8]);
            v104 = v118;
          }
          else
          {
            v104 = MEMORY[0x24BEE4B08];
          }
        }
        else
        {
          v104 = MEMORY[0x24BEE4B08];
        }
        swift_bridgeObjectRelease();
        *(_QWORD *)(v99 + 48) = v104;
        swift_bridgeObjectRelease();
        specialized Dictionary.init(dictionaryLiteral:)(v99);
        v34 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
        outlined consume of PresenceUpdateMessage.Kind(v127, v130);
        swift_bridgeObjectRelease();
        return v34;
      }
      swift_bridgeObjectRelease();
      v78 = MEMORY[0x24BEE4AF8];
      v34 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
      specialized Dictionary.init(dictionaryLiteral:)(v78);
      specialized Dictionary.init(dictionaryLiteral:)(v78);
      outlined consume of PresenceUpdateMessage.Kind(v127, v130);
      goto LABEL_65;
    }
    if (v18 == v16)
    {
      v28 = v22 == v19 && v17 == v20;
      if (v28
        || (v29 = a1[2],
            v30 = a1[3],
            v31 = a1[1],
            v32 = _stringCompareWithSmolCheck(_:_:expecting:)(),
            v24 = v31,
            v26 = v29,
            v27 = v30,
            (v32 & 1) != 0))
      {
        outlined copy of PresenceUpdateMessage.Kind(v25, v24);
        outlined copy of PresenceUpdateMessage.Kind(v127, v130);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v33 = MEMORY[0x24BEE4AF8];
        v34 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
        specialized Dictionary.init(dictionaryLiteral:)(v33);
        specialized Dictionary.init(dictionaryLiteral:)(v33);
        outlined consume of PresenceUpdateMessage.Kind(v127, v130);
LABEL_65:
        swift_bridgeObjectRelease();
        return v34;
      }
    }
    v121 = v25;
    v122 = (void *)v24;
    v123 = v26;
    v68 = v27;
    outlined copy of PresenceUpdateMessage.Kind(v25, v24);
    outlined copy of PresenceUpdateMessage.Kind(v127, v130);
    ParticipantPresenceStore._removeParticipant(_:from:in:)(v124, v9, v128, v126, v127, v130);
    ParticipantPresenceStore._addParticipant(_:to:in:)(a2, v123, v68, (_QWORD *)v25, v122);
    swift_beginAccess();
    swift_bridgeObjectRetain();
    outlined retain of PresenceUpdateMessage(a1);
    v69 = swift_isUniquelyReferenced_nonNull_native();
    v133 = v125[15];
    v125[15] = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)a1, v124, v9, v69);
    v125[15] = v133;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_endAccess();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, (tabGroupIdentifier: String, tabIdentifier: String))>);
    v70 = swift_initStackObject();
    v120 = xmmword_24A42FA50;
    *(_OWORD *)(v70 + 16) = xmmword_24A42FA50;
    *(_QWORD *)(v70 + 32) = v124;
    *(_QWORD *)(v70 + 40) = v9;
    *(_QWORD *)(v70 + 48) = v25;
    *(_QWORD *)(v70 + 56) = v122;
    *(_QWORD *)(v70 + 64) = v123;
    *(_QWORD *)(v70 + 72) = v68;
    swift_bridgeObjectRetain();
    v124 = v68;
    swift_bridgeObjectRetain();
    v34 = specialized Dictionary.init(dictionaryLiteral:)(v70);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Set<CKShareParticipant>)>);
    v25 = swift_initStackObject();
    *(_OWORD *)(v25 + 16) = xmmword_24A42FA50;
    *(_QWORD *)(v25 + 32) = v127;
    *(_QWORD *)(v25 + 40) = v130;
    v119 = v125 + 16;
    swift_beginAccess();
    v71 = v125[16];
    v72 = *(_QWORD *)(v71 + 16);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    v73 = MEMORY[0x24BEE4AF8];
    if (v72)
    {
      v74 = specialized __RawDictionaryStorage.find<A>(_:)(v127, v130);
      if ((v75 & 1) != 0)
      {
        v41 = v73;
        v76 = *(_QWORD *)(*(_QWORD *)(v71 + 56) + 8 * v74);
        swift_bridgeObjectRetain();
LABEL_51:
        v79 = v126;
        swift_bridgeObjectRelease();
        *(_QWORD *)(v25 + 48) = v76;
        swift_bridgeObjectRelease();
        specialized Dictionary.init(dictionaryLiteral:)(v25);
        v80 = swift_initStackObject();
        *(_OWORD *)(v80 + 16) = v120;
        *(_QWORD *)(v80 + 32) = v128;
        *(_QWORD *)(v80 + 40) = v126;
        v81 = v125 + 17;
        swift_beginAccess();
        v82 = v125[17];
        v83 = *(_QWORD *)(v82 + 16);
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain();
        if (v83 && (v84 = specialized __RawDictionaryStorage.find<A>(_:)(v128, v126), (v85 & 1) != 0))
        {
          v86 = *(_QWORD *)(*(_QWORD *)(v82 + 56) + 8 * v84);
          swift_bridgeObjectRetain();
          v87 = v128;
        }
        else
        {
          if ((v41 & 0xC000000000000000) != 0)
          {
            if (_CocoaArrayWrapper.endIndex.getter())
            {
              specialized Set.init(_nonEmptyArrayLiteral:)(MEMORY[0x24BEE4AF8]);
              v86 = v116;
            }
            else
            {
              v86 = MEMORY[0x24BEE4B08];
            }
            v79 = v126;
          }
          else
          {
            v86 = MEMORY[0x24BEE4B08];
          }
          v87 = v128;
        }
        swift_bridgeObjectRelease();
        *(_QWORD *)(v80 + 48) = v86;
        swift_bridgeObjectRelease();
        specialized Dictionary.init(dictionaryLiteral:)(v80);
        if (v127 == v121 && (void *)v130 == v122)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
LABEL_82:
          if (v87 == v123 && v79 == v124)
          {
            swift_bridgeObjectRelease();
          }
          else
          {
            v109 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            if ((v109 & 1) == 0)
            {
              v110 = *v81;
              if (*(_QWORD *)(*v81 + 16))
              {
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                v111 = specialized __RawDictionaryStorage.find<A>(_:)(v123, v124);
                if ((v112 & 1) != 0)
                {
                  v113 = *(_QWORD *)(*(_QWORD *)(v110 + 56) + 8 * v111);
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  v114 = swift_isUniquelyReferenced_nonNull_native();
                  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v113, v123, v124, v114);
                  swift_bridgeObjectRelease();
                  goto LABEL_89;
                }
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
              }
              specialized Dictionary._Variant.removeValue(forKey:)(v123, v124);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              outlined consume of PresenceUpdateMessage.Kind(v127, v130);
              swift_bridgeObjectRelease();
              return v34;
            }
          }
LABEL_89:
          swift_bridgeObjectRelease();
          outlined consume of PresenceUpdateMessage.Kind(v127, v130);
          swift_bridgeObjectRelease();
          return v34;
        }
        v98 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v98 & 1) != 0)
        {
LABEL_81:
          swift_bridgeObjectRelease();
          v79 = v126;
          goto LABEL_82;
        }
        v105 = *v119;
        if (*(_QWORD *)(*v119 + 16))
        {
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v106 = specialized __RawDictionaryStorage.find<A>(_:)(v121, (uint64_t)v122);
          if ((v107 & 1) != 0)
          {
            v129 = *(_QWORD *)(*(_QWORD *)(v105 + 56) + 8 * v106);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v108 = swift_isUniquelyReferenced_nonNull_native();
            specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v129, v121, (uint64_t)v122, v108);
            swift_bridgeObjectRelease();
            goto LABEL_81;
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        specialized Dictionary._Variant.removeValue(forKey:)(v121, (uint64_t)v122);
        swift_bridgeObjectRelease();
        goto LABEL_81;
      }
    }
    v41 = v73;
    if ((v73 & 0xC000000000000000) == 0)
    {
LABEL_50:
      v76 = MEMORY[0x24BEE4B08];
      goto LABEL_51;
    }
LABEL_96:
    if (_CocoaArrayWrapper.endIndex.getter())
    {
      specialized Set.init(_nonEmptyArrayLiteral:)(MEMORY[0x24BEE4AF8]);
      v76 = v115;
      goto LABEL_51;
    }
    goto LABEL_50;
  }
  if (!v24)
  {
    swift_beginAccess();
    outlined retain of PresenceUpdateMessage(a1);
    v96 = swift_isUniquelyReferenced_nonNull_native();
    v134 = *v10;
    *v10 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)a1, v124, v9, v96);
    *v10 = v134;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_endAccess();
    v97 = MEMORY[0x24BEE4AF8];
    v34 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
    specialized Dictionary.init(dictionaryLiteral:)(v97);
    specialized Dictionary.init(dictionaryLiteral:)(v97);
    v67 = v127;
    goto LABEL_64;
  }
  v53 = a1[3];
  v54 = a1[2];
  v55 = (void *)a1[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  ParticipantPresenceStore._addParticipant(_:to:in:)(a2, v54, v53, (_QWORD *)v25, v55);
  swift_beginAccess();
  swift_bridgeObjectRetain();
  outlined retain of PresenceUpdateMessage(a1);
  v56 = swift_isUniquelyReferenced_nonNull_native();
  v132 = v125[15];
  v125[15] = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)a1, v124, v9, v56);
  v125[15] = v132;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_endAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, (tabGroupIdentifier: String, tabIdentifier: String))>);
  v57 = swift_initStackObject();
  v130 = 1;
  *(_OWORD *)(v57 + 16) = xmmword_24A42FA50;
  *(_QWORD *)(v57 + 32) = v124;
  *(_QWORD *)(v57 + 40) = v9;
  *(_QWORD *)(v57 + 48) = v25;
  *(_QWORD *)(v57 + 56) = v55;
  v123 = v54;
  *(_QWORD *)(v57 + 64) = v54;
  *(_QWORD *)(v57 + 72) = v53;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v34 = specialized Dictionary.init(dictionaryLiteral:)(v57);
  v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Set<CKShareParticipant>)>);
  v58 = swift_initStackObject();
  *(_OWORD *)(v58 + 16) = xmmword_24A42FA50;
  *(_QWORD *)(v58 + 32) = v25;
  *(_QWORD *)(v58 + 40) = v55;
  swift_beginAccess();
  v59 = v125[16];
  if (!*(_QWORD *)(v59 + 16))
    goto LABEL_94;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v60 = specialized __RawDictionaryStorage.find<A>(_:)(v25, (uint64_t)v55);
  if ((v61 & 1) == 0)
  {
LABEL_111:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __break(1u);
    goto LABEL_112;
  }
  v62 = *(_QWORD *)(*(_QWORD *)(v59 + 56) + 8 * v60);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v58 + 48) = v62;
  specialized Dictionary.init(dictionaryLiteral:)(v58);
  v41 = swift_initStackObject();
  *(_OWORD *)(v41 + 16) = xmmword_24A42FA50;
  v25 = v54;
  *(_QWORD *)(v41 + 32) = v54;
  *(_QWORD *)(v41 + 40) = v53;
  swift_beginAccess();
  v63 = v125[17];
  if (!*(_QWORD *)(v63 + 16))
  {
LABEL_95:
    __break(1u);
    goto LABEL_96;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v64 = specialized __RawDictionaryStorage.find<A>(_:)(v54, v53);
  if ((v65 & 1) != 0)
  {
    v66 = *(_QWORD *)(*(_QWORD *)(v63 + 56) + 8 * v64);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v41 + 48) = v66;
    specialized Dictionary.init(dictionaryLiteral:)(v41);
    v67 = v127;
LABEL_64:
    outlined consume of PresenceUpdateMessage.Kind(v67, 0);
    goto LABEL_65;
  }
LABEL_112:
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  __break(1u);
  return result;
}

void specialized thunk for @callee_guaranteed () -> (@owned Set<CKShareParticipant>)(_QWORD *a1@<X8>)
{
  uint64_t v2;

  if ((MEMORY[0x24BEE4AF8] & 0xC000000000000000) != 0 && _CocoaArrayWrapper.endIndex.getter())
    specialized Set.init(_nonEmptyArrayLiteral:)(MEMORY[0x24BEE4AF8]);
  else
    v2 = MEMORY[0x24BEE4B08];
  *a1 = v2;
}

unint64_t ParticipantPresenceStore.replace(share:with:in:)(void *a1, void *a2, _QWORD *a3, void *a4)
{
  uint64_t v4;
  uint64_t v5;
  id v8;
  id v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v39;
  unint64_t v40;
  char v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char v46;
  uint64_t v47;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char v53;
  uint64_t v54;
  char v55;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t valid;
  uint64_t v64;
  uint64_t v65;
  int64_t v66;
  uint64_t *v67;
  uint64_t v68;
  int64_t v69;
  unint64_t v70;
  uint64_t v71;

  v5 = v4;
  type metadata accessor for CKShareParticipant(0, &lazy cache variable for type metadata for NSObject);
  v8 = objc_msgSend(a1, sel_recordID);
  v9 = objc_msgSend(a2, sel_recordID);
  v10 = static NSObject.== infix(_:_:)();

  if ((v10 & 1) == 0)
  {
LABEL_56:
    __break(1u);
    goto LABEL_57;
  }
  valid = CKShare.identifiersToValidParticipants.getter();
  v11 = MEMORY[0x24BEE4AF8];
  v58 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  specialized Dictionary.init(dictionaryLiteral:)(v11);
  v59 = specialized Dictionary.init(dictionaryLiteral:)(v11);
  v71 = MEMORY[0x24BEE4B08];
  v12 = CKShare.identifiersToValidParticipants.getter();
  v65 = v12 + 64;
  v68 = v12;
  v13 = 1 << *(_BYTE *)(v12 + 32);
  v14 = -1;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  v15 = v14 & *(_QWORD *)(v12 + 64);
  v60 = v5;
  v67 = (uint64_t *)(v5 + 120);
  swift_beginAccess();
  swift_beginAccess();
  v16 = 0;
  v66 = (unint64_t)(v13 + 63) >> 6;
  while (v15)
  {
    v17 = __clz(__rbit64(v15));
    v15 &= v15 - 1;
    v69 = v16;
    v18 = v17 | (v16 << 6);
LABEL_21:
    v23 = (uint64_t *)(*(_QWORD *)(v68 + 48) + 16 * v18);
    v25 = *v23;
    v24 = v23[1];
    v26 = *v67;
    v27 = *(_QWORD *)(*v67 + 16);
    swift_bridgeObjectRetain();
    if (!v27)
      goto LABEL_33;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v28 = specialized __RawDictionaryStorage.find<A>(_:)(v25, v24);
    if ((v29 & 1) == 0)
    {
      swift_bridgeObjectRelease();
LABEL_32:
      swift_bridgeObjectRelease();
      goto LABEL_33;
    }
    v30 = (uint64_t *)(*(_QWORD *)(v26 + 56) + 56 * v28);
    v32 = *v30;
    v31 = v30[1];
    v33 = v30[2];
    v34 = v30[3];
    v35 = v30[5];
    v64 = v30[4];
    v36 = v30[6];
    outlined copy of PresenceUpdateMessage.Kind(*v30, v31);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v36
      && (outlined copy of PresenceUpdateMessage.Kind(v32, v31),
          outlined consume of PresenceUpdateMessage?(v32, v31, v33, v34, v64, v35, v36),
          v31))
    {
      v37 = v33;
      if ((_QWORD *)v32 == a3 && v31 == (_QWORD)a4)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        v39 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v39 & 1) == 0)
          goto LABEL_32;
      }
      if (!*(_QWORD *)(valid + 16))
        goto LABEL_39;
      swift_bridgeObjectRetain();
      v40 = specialized __RawDictionaryStorage.find<A>(_:)(v25, v24);
      if ((v41 & 1) == 0)
      {
        swift_bridgeObjectRelease();
LABEL_39:
        ParticipantPresenceStore._removeParticipant(_:from:in:)(v25, v24, v37, v34, (uint64_t)a3, (uint64_t)a4);
        specialized Set._Variant.insert(_:)((Swift::Int *)&v70, v25, v24);
        swift_bridgeObjectRelease();
        v43 = *(_QWORD *)(v60 + 136);
        v44 = *(_QWORD *)(v43 + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v44 && (v45 = specialized __RawDictionaryStorage.find<A>(_:)(v37, v34), (v46 & 1) != 0))
        {
          v47 = *(_QWORD *)(*(_QWORD *)(v43 + 56) + 8 * v45);
          swift_bridgeObjectRetain();
        }
        else
        {
          v47 = MEMORY[0x24BEE4B08];
          if ((MEMORY[0x24BEE4AF8] & 0xC000000000000000) != 0)
          {
            if (_CocoaArrayWrapper.endIndex.getter())
            {
              specialized Set.init(_nonEmptyArrayLiteral:)(MEMORY[0x24BEE4AF8]);
              v47 = v49;
            }
          }
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v70 = v59;
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v47, v37, v34, isUniquelyReferenced_nonNull_native);
        v59 = v70;
        swift_bridgeObjectRelease();
        goto LABEL_33;
      }
      v42 = *(id *)(*(_QWORD *)(valid + 56) + 8 * v40);
      swift_bridgeObjectRelease();
      ParticipantPresenceStore._removeParticipant(_:from:in:)(v25, v24, v37, v34, (uint64_t)a3, (uint64_t)a4);
      swift_bridgeObjectRelease();
      ParticipantPresenceStore._addParticipant(_:to:in:)(v42, v37, v34, a3, a4);
      swift_bridgeObjectRelease();

      v16 = v69;
    }
    else
    {
LABEL_33:
      swift_bridgeObjectRelease();
      v16 = v69;
    }
  }
  v19 = v16 + 1;
  if (__OFADD__(v16, 1))
  {
    __break(1u);
LABEL_55:
    __break(1u);
    goto LABEL_56;
  }
  if (v19 >= v66)
    goto LABEL_46;
  v20 = *(_QWORD *)(v65 + 8 * v19);
  v21 = v16 + 1;
  if (v20)
    goto LABEL_20;
  v21 = v16 + 2;
  if (v16 + 2 >= v66)
    goto LABEL_46;
  v20 = *(_QWORD *)(v65 + 8 * v21);
  if (v20)
    goto LABEL_20;
  v21 = v16 + 3;
  if (v16 + 3 >= v66)
    goto LABEL_46;
  v20 = *(_QWORD *)(v65 + 8 * v21);
  if (v20)
  {
LABEL_20:
    v15 = (v20 - 1) & v20;
    v69 = v21;
    v18 = __clz(__rbit64(v20)) + (v21 << 6);
    goto LABEL_21;
  }
  v22 = v16 + 4;
  if (v16 + 4 < v66)
  {
    v20 = *(_QWORD *)(v65 + 8 * v22);
    if (!v20)
    {
      while (1)
      {
        v21 = v22 + 1;
        if (__OFADD__(v22, 1))
          goto LABEL_55;
        if (v21 >= v66)
          goto LABEL_46;
        v20 = *(_QWORD *)(v65 + 8 * v21);
        ++v22;
        if (v20)
          goto LABEL_20;
      }
    }
    v21 = v16 + 4;
    goto LABEL_20;
  }
LABEL_46:
  swift_bridgeObjectRelease();
  swift_release();
  if (!*(_QWORD *)(v71 + 16))
    return v58;
  swift_beginAccess();
  v50 = *(_QWORD *)(v60 + 128);
  v51 = *(_QWORD *)(v50 + 16);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  if (v51)
  {
    v52 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)a3, (uint64_t)a4);
    if ((v53 & 1) != 0)
    {
      v54 = *(_QWORD *)(*(_QWORD *)(v50 + 56) + 8 * v52);
      swift_bridgeObjectRetain();
      goto LABEL_52;
    }
  }
  if ((MEMORY[0x24BEE4AF8] & 0xC000000000000000) == 0)
  {
LABEL_51:
    v54 = MEMORY[0x24BEE4B08];
    goto LABEL_52;
  }
LABEL_57:
  if (!_CocoaArrayWrapper.endIndex.getter())
    goto LABEL_51;
  specialized Set.init(_nonEmptyArrayLiteral:)(MEMORY[0x24BEE4AF8]);
  v54 = v57;
LABEL_52:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v55 = swift_isUniquelyReferenced_nonNull_native();
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v54, (uint64_t)a3, (uint64_t)a4, v55);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v58;
}

uint64_t CKShare.identifiersToValidParticipants.getter()
{
  void *v0;
  id v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  SEL *v7;
  id v8;
  void *v9;
  id v10;
  id v11;
  unint64_t v12;
  unint64_t v13;
  SEL *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;

  v1 = objc_msgSend(v0, sel_participants);
  type metadata accessor for CKShareParticipant(0, (unint64_t *)&lazy cache variable for type metadata for CKShareParticipant);
  v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v2 >> 62)
  {
    swift_bridgeObjectRetain();
    v3 = _CocoaArrayWrapper.endIndex.getter();
    if (v3)
      goto LABEL_3;
LABEL_18:
    v5 = (_QWORD *)MEMORY[0x24BEE4AF8];
    goto LABEL_19;
  }
  v3 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v3)
    goto LABEL_18;
LABEL_3:
  if (v3 < 1)
  {
    __break(1u);
    result = swift_unexpectedError();
    __break(1u);
    return result;
  }
  v4 = 0;
  v5 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v6 = v2 & 0xC000000000000001;
  v7 = (SEL *)&unk_251BCB000;
  v25 = v3;
  do
  {
    if (v6)
      v8 = (id)MEMORY[0x24BD0F250](v4, v2);
    else
      v8 = *(id *)(v2 + 8 * v4 + 32);
    v9 = v8;
    if (objc_msgSend(v8, v7[247]) == (id)2
      && (v10 = objc_msgSend(v9, sel_userIdentity),
          v11 = objc_msgSend(v10, sel_userRecordID),
          v10,
          v11))
    {
      v12 = v2;
      v13 = v6;
      v14 = v7;
      v15 = objc_msgSend(v11, sel_recordName);

      v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v18 = v17;

      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
      v20 = v5[2];
      v19 = v5[3];
      if (v20 >= v19 >> 1)
        v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v19 > 1), v20 + 1, 1, v5);
      v5[2] = v20 + 1;
      v21 = &v5[3 * v20];
      v21[4] = v16;
      v21[5] = v18;
      v21[6] = v9;
      v7 = v14;
      v6 = v13;
      v2 = v12;
      v3 = v25;
    }
    else
    {

    }
    ++v4;
  }
  while (v3 != v4);
LABEL_19:
  swift_bridgeObjectRelease_n();
  if (v5[2])
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, CKShareParticipant>);
    v22 = static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    v22 = MEMORY[0x24BEE4B00];
  }
  v26 = v22;
  v23 = (_QWORD *)swift_bridgeObjectRetain();
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v23, 1, &v26);
  swift_bridgeObjectRelease();
  return v26;
}

unint64_t ParticipantPresenceStore.participants(_:didLeaveTabGroup:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  SEL *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  id v18;
  int64_t v19;
  unint64_t v20;
  uint64_t v21;
  id v22;
  id v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  unint64_t v41;
  char v42;
  char v43;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char v50;
  char v51;
  char v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  char v67;
  uint64_t v68;
  char v69;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  unint64_t v74;
  Swift::Int v75;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v82;
  uint64_t *v83;
  int64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  Swift::Int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;

  v4 = MEMORY[0x24BEE4AF8];
  v5 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  specialized Dictionary.init(dictionaryLiteral:)(v4);
  v6 = specialized Dictionary.init(dictionaryLiteral:)(v4);
  v90 = MEMORY[0x24BEE4B08];
  v74 = v5;
  v75 = v6;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    type metadata accessor for CKShareParticipant(0, (unint64_t *)&lazy cache variable for type metadata for CKShareParticipant);
    lazy protocol witness table accessor for type CKShareParticipant and conformance NSObject();
    Set.Iterator.init(_cocoa:)();
    a1 = v91;
    v85 = v92;
    v7 = v93;
    v8 = v94;
    v9 = v95;
  }
  else
  {
    v10 = -1 << *(_BYTE *)(a1 + 32);
    v85 = a1 + 56;
    v7 = ~v10;
    v11 = -v10;
    if (v11 < 64)
      v12 = ~(-1 << v11);
    else
      v12 = -1;
    v9 = v12 & *(_QWORD *)(a1 + 56);
    swift_bridgeObjectRetain();
    v8 = 0;
  }
  v84 = (unint64_t)(v7 + 64) >> 6;
  v13 = v77 + 15;
  v72 = v77 + 17;
  v14 = (SEL *)&unk_251BCB000;
  v83 = v77 + 15;
  v82 = a1;
  while (1)
  {
    v15 = v8;
    if (a1 < 0)
    {
      if (!__CocoaSet.Iterator.next()())
        goto LABEL_63;
      type metadata accessor for CKShareParticipant(0, (unint64_t *)&lazy cache variable for type metadata for CKShareParticipant);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      v18 = (id)v89;
      swift_unknownObjectRelease();
      if (!v18)
        goto LABEL_63;
      goto LABEL_33;
    }
    if (v9)
    {
      v16 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v17 = v16 | (v8 << 6);
      goto LABEL_32;
    }
    v19 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_73;
    }
    if (v19 >= v84)
      goto LABEL_63;
    v20 = *(_QWORD *)(v85 + 8 * v19);
    ++v8;
    if (!v20)
    {
      v8 = v15 + 2;
      if (v15 + 2 >= v84)
        goto LABEL_63;
      v20 = *(_QWORD *)(v85 + 8 * v8);
      if (!v20)
      {
        v8 = v15 + 3;
        if (v15 + 3 >= v84)
          goto LABEL_63;
        v20 = *(_QWORD *)(v85 + 8 * v8);
        if (!v20)
        {
          v8 = v15 + 4;
          if (v15 + 4 >= v84)
            goto LABEL_63;
          v20 = *(_QWORD *)(v85 + 8 * v8);
          if (!v20)
            break;
        }
      }
    }
LABEL_31:
    v9 = (v20 - 1) & v20;
    v17 = __clz(__rbit64(v20)) + (v8 << 6);
LABEL_32:
    v18 = *(id *)(*(_QWORD *)(a1 + 48) + 8 * v17);
    if (!v18)
      goto LABEL_63;
LABEL_33:
    if (objc_msgSend(v18, v14[247]) == (id)2
      && (v22 = objc_msgSend(v18, sel_userIdentity),
          v23 = objc_msgSend(v22, sel_userRecordID),
          v22,
          v23))
    {
      v86 = v9;
      v24 = objc_msgSend(v23, sel_recordName);

      v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v27 = v26;

      swift_beginAccess();
      v28 = *v13;
      if (!*(_QWORD *)(*v13 + 16))
        goto LABEL_9;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v29 = specialized __RawDictionaryStorage.find<A>(_:)(v25, v27);
      if ((v30 & 1) == 0)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_9:
        swift_bridgeObjectRelease();
        a1 = v82;
        v13 = v77 + 15;
LABEL_10:
        v14 = (SEL *)&unk_251BCB000;
        v9 = v86;
        goto LABEL_11;
      }
      v31 = (uint64_t *)(*(_QWORD *)(v28 + 56) + 56 * v29);
      v32 = *v31;
      v33 = v31[1];
      v34 = v25;
      v36 = v31[2];
      v35 = v31[3];
      v37 = v31[6];
      v78 = v31[5];
      v79 = v31[4];
      outlined copy of PresenceUpdateMessage.Kind(*v31, v33);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (!v37)
        goto LABEL_9;
      outlined copy of PresenceUpdateMessage.Kind(v32, v33);
      v73 = v36;
      outlined consume of PresenceUpdateMessage?(v32, v33, v36, v35, v79, v78, v37);
      if (!v33)
      {
        v13 = v77 + 15;
        swift_beginAccess();
        swift_bridgeObjectRetain();
        v41 = specialized __RawDictionaryStorage.find<A>(_:)(v34, v27);
        v43 = v42;
        swift_bridgeObjectRelease();
        if ((v43 & 1) != 0)
        {
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v45 = *v83;
          v87 = *v83;
          *v83 = 0x8000000000000000;
          a1 = v82;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            specialized _NativeDictionary.copy()();
            v45 = v87;
          }
          swift_bridgeObjectRelease();
          v46 = (uint64_t *)(*(_QWORD *)(v45 + 56) + 56 * v41);
          v47 = *v46;
          v48 = v46[1];
          specialized _NativeDictionary._delete(at:)(v41, v45);
          *v83 = v45;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          outlined consume of PresenceUpdateMessage.Kind(v47, v48);
          swift_bridgeObjectRelease();
        }
        else
        {
          swift_bridgeObjectRelease();
          a1 = v82;
        }
        swift_endAccess();
        goto LABEL_10;
      }
      v38 = v35;
      if (v32 == a2 && v33 == a3)
      {
        swift_bridgeObjectRelease();
        v40 = v36;
        a1 = v82;
      }
      else
      {
        v39 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        v40 = v36;
        a1 = v82;
        if ((v39 & 1) == 0)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v13 = v77 + 15;
          goto LABEL_10;
        }
      }
      v80 = v38;
      ParticipantPresenceStore._removeParticipant(_:from:in:)(v34, v27, v40, v38, a2, a3);
      v13 = v77 + 15;
      swift_beginAccess();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v49 = specialized __RawDictionaryStorage.find<A>(_:)(v34, v27);
      v51 = v50;
      swift_bridgeObjectRelease();
      if ((v51 & 1) != 0)
      {
        v52 = swift_isUniquelyReferenced_nonNull_native();
        v53 = *v83;
        v88 = *v83;
        *v83 = 0x8000000000000000;
        if ((v52 & 1) == 0)
        {
          specialized _NativeDictionary.copy()();
          v53 = v88;
        }
        swift_bridgeObjectRelease();
        v54 = (uint64_t *)(*(_QWORD *)(v53 + 56) + 56 * v49);
        v55 = *v54;
        v56 = v54[1];
        specialized _NativeDictionary._delete(at:)(v49, v53);
        *v83 = v53;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined consume of PresenceUpdateMessage.Kind(v55, v56);
        swift_bridgeObjectRelease();
        v40 = v73;
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      swift_endAccess();
      specialized Set._Variant.insert(_:)(&v89, v34, v27);
      swift_bridgeObjectRelease();
      swift_beginAccess();
      v57 = *v72;
      v58 = *(_QWORD *)(*v72 + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v14 = (SEL *)&unk_251BCB000;
      if (v58 && (v59 = specialized __RawDictionaryStorage.find<A>(_:)(v40, v80), (v60 & 1) != 0))
      {
        v61 = *(_QWORD *)(*(_QWORD *)(v57 + 56) + 8 * v59);
        swift_bridgeObjectRetain();
      }
      else
      {
        v61 = MEMORY[0x24BEE4B08];
        if ((MEMORY[0x24BEE4AF8] & 0xC000000000000000) != 0)
        {
          if (_CocoaArrayWrapper.endIndex.getter())
          {
            specialized Set.init(_nonEmptyArrayLiteral:)(MEMORY[0x24BEE4AF8]);
            v61 = v63;
          }
          a1 = v82;
          v13 = v77 + 15;
          v40 = v73;
        }
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v62 = swift_isUniquelyReferenced_nonNull_native();
      v89 = v75;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v61, v40, v80, v62);
      v75 = v89;

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v9 = v86;
    }
    else
    {
LABEL_11:

    }
  }
  v21 = v15 + 5;
  while (v84 != v21)
  {
    v20 = *(_QWORD *)(v85 + 8 * v21++);
    if (v20)
    {
      v8 = v21 - 1;
      goto LABEL_31;
    }
  }
LABEL_63:
  outlined consume of Set<Participant>.Iterator._Variant();
  if (*(_QWORD *)(v90 + 16))
  {
    swift_beginAccess();
    v64 = v77[16];
    v65 = *(_QWORD *)(v64 + 16);
    v14 = (SEL *)a3;
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    v9 = v74;
    if (v65)
    {
      v66 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
      if ((v67 & 1) != 0)
      {
        v68 = *(_QWORD *)(*(_QWORD *)(v64 + 56) + 8 * v66);
        swift_bridgeObjectRetain();
LABEL_69:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v69 = swift_isUniquelyReferenced_nonNull_native();
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v68, a2, (uint64_t)v14, v69);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return v9;
      }
    }
    if ((MEMORY[0x24BEE4AF8] & 0xC000000000000000) == 0)
    {
LABEL_68:
      v68 = MEMORY[0x24BEE4B08];
      goto LABEL_69;
    }
LABEL_73:
    if (_CocoaArrayWrapper.endIndex.getter())
    {
      specialized Set.init(_nonEmptyArrayLiteral:)(MEMORY[0x24BEE4AF8]);
      v68 = v71;
      goto LABEL_69;
    }
    goto LABEL_68;
  }
  return v74;
}

uint64_t ParticipantPresenceStore.removeTabGroup(_:)(uint64_t a1, uint64_t isUniquelyReferenced_nonNull_native)
{
  uint64_t v2;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int64_t v24;
  unint64_t v25;
  unint64_t v26;
  id v27;
  id v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  _BOOL8 v43;
  uint64_t v44;
  char v45;
  unint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  uint64_t result;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  int64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  uint64_t v77;
  uint64_t v78[4];
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;

  v5 = MEMORY[0x24BEE4AF8];
  v6 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  v61 = specialized Dictionary.init(dictionaryLiteral:)(v5);
  v7 = specialized Dictionary.init(dictionaryLiteral:)(v5);
  v79 = MEMORY[0x24BEE4B08];
  swift_beginAccess();
  v67 = v2;
  v8 = *(_QWORD *)(v2 + 128);
  v9 = *(_QWORD *)(v8 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v66 = a1;
  if (v9)
  {
    v10 = specialized __RawDictionaryStorage.find<A>(_:)(a1, isUniquelyReferenced_nonNull_native);
    if ((v11 & 1) != 0)
    {
      v12 = *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v10);
      swift_bridgeObjectRetain();
      goto LABEL_6;
    }
  }
  if ((v5 & 0xC000000000000000) != 0)
    goto LABEL_63;
LABEL_5:
  v12 = MEMORY[0x24BEE4B08];
LABEL_6:
  v62 = v6;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v12 & 0xC000000000000001) != 0)
  {
    __CocoaSet.makeIterator()();
    type metadata accessor for CKShareParticipant(0, (unint64_t *)&lazy cache variable for type metadata for CKShareParticipant);
    lazy protocol witness table accessor for type CKShareParticipant and conformance NSObject();
    Set.Iterator.init(_cocoa:)();
    v12 = v80;
    v64 = v81;
    v13 = v82;
    v6 = v83;
    v14 = v84;
  }
  else
  {
    v6 = 0;
    v15 = -1 << *(_BYTE *)(v12 + 32);
    v64 = v12 + 56;
    v16 = ~v15;
    v17 = -v15;
    if (v17 < 64)
      v18 = ~(-1 << v17);
    else
      v18 = -1;
    v14 = v18 & *(_QWORD *)(v12 + 56);
    v13 = v16;
  }
  v63 = (unint64_t)(v13 + 64) >> 6;
  v73 = (uint64_t *)(v67 + 120);
  v65 = v12;
  if ((v12 & 0x8000000000000000) == 0)
  {
    while (1)
    {
      if (v14)
      {
        v22 = (v14 - 1) & v14;
        v23 = __clz(__rbit64(v14)) | (v6 << 6);
        v21 = v6;
      }
      else
      {
        v24 = v6 + 1;
        if (__OFADD__(v6, 1))
          goto LABEL_62;
        if (v24 >= v63)
          goto LABEL_56;
        v25 = *(_QWORD *)(v64 + 8 * v24);
        v21 = v6 + 1;
        if (!v25)
        {
          v21 = v6 + 2;
          if ((uint64_t)(v6 + 2) >= v63)
            goto LABEL_56;
          v25 = *(_QWORD *)(v64 + 8 * v21);
          if (!v25)
          {
            v21 = v6 + 3;
            if ((uint64_t)(v6 + 3) >= v63)
              goto LABEL_56;
            v25 = *(_QWORD *)(v64 + 8 * v21);
            if (!v25)
            {
              v21 = v6 + 4;
              if ((uint64_t)(v6 + 4) >= v63)
                goto LABEL_56;
              v25 = *(_QWORD *)(v64 + 8 * v21);
              if (!v25)
              {
                v26 = v6 + 5;
                while (v63 != v26)
                {
                  v25 = *(_QWORD *)(v64 + 8 * v26++);
                  if (v25)
                  {
                    v21 = v26 - 1;
                    goto LABEL_31;
                  }
                }
                goto LABEL_56;
              }
            }
          }
        }
LABEL_31:
        v22 = (v25 - 1) & v25;
        v23 = __clz(__rbit64(v25)) + (v21 << 6);
      }
      v20 = *(id *)(*(_QWORD *)(v12 + 48) + 8 * v23);
      if (!v20)
        goto LABEL_56;
LABEL_33:
      v69 = v22;
      if (objc_msgSend(v20, sel_acceptanceStatus) != (id)2)
        goto LABEL_72;
      v27 = objc_msgSend(v20, sel_userIdentity);
      v28 = objc_msgSend(v27, sel_userRecordID);

      if (!v28)
        goto LABEL_72;
      v68 = v20;
      v29 = objc_msgSend(v28, sel_recordName);

      v30 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v32 = v31;

      swift_beginAccess();
      v33 = *v73;
      if (!*(_QWORD *)(*v73 + 16))
        goto LABEL_71;
      v70 = v21;
      v71 = v7;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v34 = specialized __RawDictionaryStorage.find<A>(_:)(v30, v32);
      if ((v35 & 1) == 0)
        break;
      v36 = (uint64_t *)(*(_QWORD *)(v33 + 56) + 56 * v34);
      v37 = *v36;
      v5 = v36[1];
      v38 = v36[2];
      v39 = v36[3];
      outlined copy of PresenceUpdateMessage.Kind(*v36, v5);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (!v5)
      {
        outlined consume of PresenceUpdateMessage.Kind(v37, 0);
        swift_bridgeObjectRelease();
        goto LABEL_71;
      }
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v72 = v38;
      outlined consume of PresenceUpdateMessage.Kind(v37, v5);
      swift_bridgeObjectRelease();
      if ((v37 != v66 || v5 != isUniquelyReferenced_nonNull_native)
        && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_71;
      }
      v6 = isUniquelyReferenced_nonNull_native;
      swift_beginAccess();
      swift_bridgeObjectRetain_n();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v78[0] = *v73;
      v40 = v78[0];
      *v73 = 0x8000000000000000;
      swift_bridgeObjectRetain();
      v7 = specialized __RawDictionaryStorage.find<A>(_:)(v30, v32);
      v42 = *(_QWORD *)(v40 + 16);
      v43 = (v41 & 1) == 0;
      v44 = v42 + v43;
      if (__OFADD__(v42, v43))
      {
        __break(1u);
LABEL_62:
        __break(1u);
LABEL_63:
        if (_CocoaArrayWrapper.endIndex.getter())
        {
          specialized Set.init(_nonEmptyArrayLiteral:)(MEMORY[0x24BEE4AF8]);
          v12 = v59;
          goto LABEL_6;
        }
        goto LABEL_5;
      }
      v45 = v41;
      if (*(_QWORD *)(v40 + 24) >= v44)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) != 0)
        {
          isUniquelyReferenced_nonNull_native = v6;
          if ((v41 & 1) == 0)
            goto LABEL_55;
        }
        else
        {
          specialized _NativeDictionary.copy()();
          isUniquelyReferenced_nonNull_native = v6;
          if ((v45 & 1) == 0)
            goto LABEL_55;
        }
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v44, isUniquelyReferenced_nonNull_native);
        v46 = specialized __RawDictionaryStorage.find<A>(_:)(v30, v32);
        if ((v45 & 1) != (v47 & 1))
          goto LABEL_73;
        v7 = v46;
        isUniquelyReferenced_nonNull_native = v6;
        if ((v45 & 1) == 0)
        {
LABEL_55:
          __break(1u);
          goto LABEL_56;
        }
      }
      v48 = *(_QWORD *)(v78[0] + 56) + 56 * v7;
      v49 = *(_QWORD *)v48;
      v50 = *(_QWORD *)(v48 + 8);
      v51 = *(_QWORD *)(v48 + 48);
      v76 = *(_OWORD *)(v48 + 32);
      v77 = v51;
      outlined consume of PresenceUpdateMessage.Kind(v49, v50);
      v74 = 0u;
      v75 = 0u;
      specialized $defer #1 <A, B>() in _NativeDictionary.subscript.modify((uint64_t *)&v74, 1, v78, v7, v30, v32);
      outlined consume of PresenceUpdateMessage?(v74, *((uint64_t *)&v74 + 1), v75, *((uint64_t *)&v75 + 1), v76, *((uint64_t *)&v76 + 1), v77);
      swift_bridgeObjectRelease();
      *(_QWORD *)(v67 + 120) = v78[0];
      swift_bridgeObjectRelease();
      swift_endAccess();
      swift_bridgeObjectRelease();
      v52 = v72;
      ParticipantPresenceStore._removeParticipant(_:from:in:)(v30, v32, v72, v39, v37, v5);
      swift_bridgeObjectRelease();
      specialized Set._Variant.insert(_:)((Swift::Int *)&v74, v30, v32);
      swift_bridgeObjectRelease();
      v53 = MEMORY[0x24BEE4B08];
      v5 = MEMORY[0x24BEE4AF8];
      v6 = v70;
      if ((MEMORY[0x24BEE4AF8] & 0xC000000000000000) != 0)
      {
        if (_CocoaArrayWrapper.endIndex.getter())
        {
          specialized Set.init(_nonEmptyArrayLiteral:)(v5);
          v53 = v55;
        }
        v52 = v72;
      }
      v54 = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)&v74 = v71;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v53, v52, v39, v54);
      v7 = v74;

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v14 = v69;
      v12 = v65;
      if (v65 < 0)
        goto LABEL_13;
    }
    swift_bridgeObjectRelease_n();
LABEL_71:
    swift_bridgeObjectRelease();
LABEL_72:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
LABEL_73:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_13:
  v19 = __CocoaSet.Iterator.next()();
  if (v19)
  {
    v78[1] = v19;
    type metadata accessor for CKShareParticipant(0, (unint64_t *)&lazy cache variable for type metadata for CKShareParticipant);
    swift_unknownObjectRetain();
    swift_dynamicCast();
    v20 = (id)v74;
    swift_unknownObjectRelease();
    v21 = v6;
    v22 = v14;
    if (v20)
      goto LABEL_33;
  }
LABEL_56:
  outlined consume of Set<Participant>.Iterator._Variant();
  if (!*(_QWORD *)(v79 + 16))
    return v62;
  swift_bridgeObjectRetain();
  if ((v5 & 0xC000000000000000) != 0 && _CocoaArrayWrapper.endIndex.getter())
  {
    specialized Set.init(_nonEmptyArrayLiteral:)(MEMORY[0x24BEE4AF8]);
    v56 = v60;
  }
  else
  {
    v56 = MEMORY[0x24BEE4B08];
  }
  v57 = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)&v74 = v61;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v56, v66, isUniquelyReferenced_nonNull_native, v57);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v62;
}

uint64_t ParticipantPresenceStore.removeTab(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  id v23;
  int64_t v24;
  unint64_t v25;
  unint64_t v26;
  id v27;
  id v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _BOOL8 v46;
  uint64_t v47;
  unint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t result;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  int64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  uint64_t v80;
  uint64_t v81[4];
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;

  v5 = MEMORY[0x24BEE4AF8];
  v6 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x24BEE4AF8]);
  v7 = specialized Dictionary.init(dictionaryLiteral:)(v5);
  v65 = specialized Dictionary.init(dictionaryLiteral:)(v5);
  v82 = MEMORY[0x24BEE4B08];
  swift_beginAccess();
  v72 = v2;
  v8 = *(_QWORD *)(v2 + 136);
  v9 = *(_QWORD *)(v8 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v71 = a1;
  if (v9 && (v10 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2), (v11 & 1) != 0))
  {
    v12 = *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v10);
    swift_bridgeObjectRetain();
  }
  else
  {
    if ((MEMORY[0x24BEE4AF8] & 0xC000000000000000) != 0)
    {
LABEL_67:
      if (_CocoaArrayWrapper.endIndex.getter())
      {
        specialized Set.init(_nonEmptyArrayLiteral:)(MEMORY[0x24BEE4AF8]);
        v12 = v63;
        goto LABEL_6;
      }
    }
    v12 = MEMORY[0x24BEE4B08];
  }
LABEL_6:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v66 = v6;
  if ((v12 & 0xC000000000000001) != 0)
  {
    __CocoaSet.makeIterator()();
    type metadata accessor for CKShareParticipant(0, (unint64_t *)&lazy cache variable for type metadata for CKShareParticipant);
    lazy protocol witness table accessor for type CKShareParticipant and conformance NSObject();
    Set.Iterator.init(_cocoa:)();
    v12 = v83;
    v68 = v84;
    v13 = v85;
    v6 = v86;
    v14 = v87;
  }
  else
  {
    v6 = 0;
    v15 = -1 << *(_BYTE *)(v12 + 32);
    v68 = v12 + 56;
    v13 = ~v15;
    v16 = -v15;
    if (v16 < 64)
      v17 = ~(-1 << v16);
    else
      v17 = -1;
    v14 = v17 & *(_QWORD *)(v12 + 56);
  }
  v73 = a2;
  v67 = (unint64_t)(v13 + 64) >> 6;
  v76 = v72 + 120;
  v69 = v72 + 128;
  v70 = v12;
  while (v12 < 0)
  {
    v22 = __CocoaSet.Iterator.next()();
    if (!v22)
      goto LABEL_59;
    v81[1] = v22;
    type metadata accessor for CKShareParticipant(0, (unint64_t *)&lazy cache variable for type metadata for CKShareParticipant);
    swift_unknownObjectRetain();
    swift_dynamicCast();
    v23 = (id)v77;
    swift_unknownObjectRelease();
    v21 = v6;
    v19 = v14;
    if (!v23)
      goto LABEL_59;
LABEL_36:
    if (objc_msgSend(v23, sel_acceptanceStatus) != (id)2)
      goto LABEL_76;
    v27 = objc_msgSend(v23, sel_userIdentity);
    v28 = objc_msgSend(v27, sel_userRecordID);

    if (!v28)
      goto LABEL_76;
    v29 = objc_msgSend(v28, sel_recordName);

    v30 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v32 = v31;

    swift_beginAccess();
    v33 = *(_QWORD *)v76;
    if (!*(_QWORD *)(*(_QWORD *)v76 + 16))
      goto LABEL_75;
    v74 = v19;
    v75 = v21;
    v34 = v7;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v35 = specialized __RawDictionaryStorage.find<A>(_:)(v30, v32);
    if ((v36 & 1) == 0)
    {
      swift_bridgeObjectRelease_n();
      goto LABEL_75;
    }
    v37 = (uint64_t *)(*(_QWORD *)(v33 + 56) + 56 * v35);
    v6 = *v37;
    v38 = v37[1];
    v39 = v37[2];
    v40 = v37[3];
    outlined copy of PresenceUpdateMessage.Kind(*v37, v38);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (!v38)
    {
      outlined consume of PresenceUpdateMessage.Kind(v6, 0);
      swift_bridgeObjectRelease();
      goto LABEL_75;
    }
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined consume of PresenceUpdateMessage.Kind(v6, v38);
    swift_bridgeObjectRelease();
    if ((v39 != v71 || v40 != v73) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_75:
      swift_bridgeObjectRelease();
LABEL_76:
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_77:
      result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      return result;
    }
    v41 = v39;
    a2 = v72;
    ParticipantPresenceStore._removeParticipant(_:from:in:)(v30, v32, v41, v40, v6, v38);
    swift_bridgeObjectRelease();
    swift_beginAccess();
    swift_bridgeObjectRetain_n();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v81[0] = *(_QWORD *)(v72 + 120);
    v43 = v81[0];
    *(_QWORD *)(v72 + 120) = 0x8000000000000000;
    swift_bridgeObjectRetain();
    v7 = specialized __RawDictionaryStorage.find<A>(_:)(v30, v32);
    v45 = *(_QWORD *)(v43 + 16);
    v46 = (v44 & 1) == 0;
    v47 = v45 + v46;
    if (__OFADD__(v45, v46))
    {
      __break(1u);
LABEL_65:
      __break(1u);
LABEL_66:
      __break(1u);
      goto LABEL_67;
    }
    a2 = v44;
    if (*(_QWORD *)(v43 + 24) >= v47)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        if ((v44 & 1) == 0)
          goto LABEL_65;
      }
      else
      {
        specialized _NativeDictionary.copy()();
        if ((a2 & 1) == 0)
          goto LABEL_65;
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v47, isUniquelyReferenced_nonNull_native);
      v48 = specialized __RawDictionaryStorage.find<A>(_:)(v30, v32);
      if ((a2 & 1) != (v49 & 1))
        goto LABEL_77;
      v7 = v48;
      if ((a2 & 1) == 0)
        goto LABEL_65;
    }
    v50 = *(_QWORD *)(v81[0] + 56) + 56 * v7;
    v51 = *(_QWORD *)v50;
    v52 = *(_QWORD *)(v50 + 8);
    v53 = *(_QWORD *)(v50 + 48);
    v79 = *(_OWORD *)(v50 + 32);
    v80 = v53;
    outlined consume of PresenceUpdateMessage.Kind(v51, v52);
    v77 = 0u;
    v78 = 0u;
    specialized $defer #1 <A, B>() in _NativeDictionary.subscript.modify((uint64_t *)&v77, 1, v81, v7, v30, v32);
    outlined consume of PresenceUpdateMessage?(v77, *((uint64_t *)&v77 + 1), v78, *((uint64_t *)&v78 + 1), v79, *((uint64_t *)&v79 + 1), v80);
    swift_bridgeObjectRelease();
    *(_QWORD *)v76 = v81[0];
    swift_bridgeObjectRelease();
    swift_endAccess();
    swift_bridgeObjectRelease();
    specialized Set._Variant.insert(_:)((Swift::Int *)&v77, v30, v32);
    swift_bridgeObjectRelease();
    swift_beginAccess();
    v54 = *(_QWORD *)v69;
    v55 = *(_QWORD *)(*(_QWORD *)v69 + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v55 && (v56 = specialized __RawDictionaryStorage.find<A>(_:)(v6, v38), (v57 & 1) != 0))
    {
      a2 = *(_QWORD *)(*(_QWORD *)(v54 + 56) + 8 * v56);
      swift_bridgeObjectRetain();
    }
    else
    {
      a2 = MEMORY[0x24BEE4B08];
      if ((MEMORY[0x24BEE4AF8] & 0xC000000000000000) != 0)
      {
        v58 = MEMORY[0x24BEE4AF8];
        if (_CocoaArrayWrapper.endIndex.getter())
        {
          specialized Set.init(_nonEmptyArrayLiteral:)(v58);
          a2 = v59;
        }
        else
        {
          a2 = MEMORY[0x24BEE4B08];
        }
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v18 = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)&v77 = v34;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a2, v6, v38, v18);
    v7 = v77;

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v12 = v70;
    v14 = v74;
    v6 = v75;
  }
  if (v14)
  {
    v19 = (v14 - 1) & v14;
    v20 = __clz(__rbit64(v14)) | (v6 << 6);
    v21 = v6;
    goto LABEL_35;
  }
  v24 = v6 + 1;
  if (__OFADD__(v6, 1))
    goto LABEL_66;
  if (v24 >= v67)
    goto LABEL_59;
  v25 = *(_QWORD *)(v68 + 8 * v24);
  v21 = v6 + 1;
  if (v25)
    goto LABEL_34;
  v21 = v6 + 2;
  if ((uint64_t)(v6 + 2) >= v67)
    goto LABEL_59;
  v25 = *(_QWORD *)(v68 + 8 * v21);
  if (v25)
    goto LABEL_34;
  v21 = v6 + 3;
  if ((uint64_t)(v6 + 3) >= v67)
    goto LABEL_59;
  v25 = *(_QWORD *)(v68 + 8 * v21);
  if (v25)
    goto LABEL_34;
  v21 = v6 + 4;
  if ((uint64_t)(v6 + 4) >= v67)
    goto LABEL_59;
  v25 = *(_QWORD *)(v68 + 8 * v21);
  if (v25)
  {
LABEL_34:
    v19 = (v25 - 1) & v25;
    v20 = __clz(__rbit64(v25)) + (v21 << 6);
LABEL_35:
    v23 = *(id *)(*(_QWORD *)(v12 + 48) + 8 * v20);
    if (!v23)
      goto LABEL_59;
    goto LABEL_36;
  }
  v26 = v6 + 5;
  while (v67 != v26)
  {
    v25 = *(_QWORD *)(v68 + 8 * v26++);
    if (v25)
    {
      v21 = v26 - 1;
      goto LABEL_34;
    }
  }
LABEL_59:
  outlined consume of Set<Participant>.Iterator._Variant();
  if (!*(_QWORD *)(v82 + 16))
    return v66;
  swift_bridgeObjectRetain();
  if ((MEMORY[0x24BEE4AF8] & 0xC000000000000000) != 0 && _CocoaArrayWrapper.endIndex.getter())
  {
    specialized Set.init(_nonEmptyArrayLiteral:)(MEMORY[0x24BEE4AF8]);
    v60 = v64;
  }
  else
  {
    v60 = MEMORY[0x24BEE4B08];
  }
  v61 = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)&v77 = v65;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v60, v71, v73, v61);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v66;
}

Swift::tuple_tabGroupIdentifier_String_optional_tabIdentifier_String_optional __swiftcall ParticipantPresenceStore.locationIdentifiersForParticipant(_:)(Swift::String a1)
{
  uint64_t v1;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v4;
  unint64_t v5;
  char v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;
  Swift::tuple_tabGroupIdentifier_String_optional_tabIdentifier_String_optional result;

  object = a1._object;
  countAndFlagsBits = a1._countAndFlagsBits;
  swift_beginAccess();
  v4 = *(_QWORD *)(v1 + 120);
  if (!*(_QWORD *)(v4 + 16))
    goto LABEL_6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v5 = specialized __RawDictionaryStorage.find<A>(_:)(countAndFlagsBits, (uint64_t)object);
  if ((v6 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_6:
    v8 = 0;
    v9 = 0;
LABEL_7:
    v10 = 0;
    v11 = 0;
    goto LABEL_8;
  }
  v7 = (uint64_t *)(*(_QWORD *)(v4 + 56) + 56 * v5);
  v8 = *v7;
  v9 = v7[1];
  v10 = v7[2];
  v11 = (void *)v7[3];
  outlined copy of PresenceUpdateMessage.Kind(*v7, v9);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v9)
  {
    outlined consume of PresenceUpdateMessage.Kind(v8, 0);
    swift_bridgeObjectRelease();
    v8 = 0;
    goto LABEL_7;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined consume of PresenceUpdateMessage.Kind(v8, v9);
  swift_bridgeObjectRelease();
LABEL_8:
  v12 = v8;
  v13 = (void *)v9;
  v14 = v10;
  v15 = v11;
  result.tabIdentifier.value._object = v15;
  result.tabIdentifier.value._countAndFlagsBits = v14;
  result.tabGroupIdentifier.value._object = v13;
  result.tabGroupIdentifier.value._countAndFlagsBits = v12;
  return result;
}

uint64_t ParticipantPresenceStore.activeParticipantsInTabGroup(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v11;

  swift_beginAccess();
  v5 = *(_QWORD *)(v2 + 128);
  v6 = *(_QWORD *)(v5 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v6 && (v7 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2), (v8 & 1) != 0))
  {
    v9 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v7);
    swift_bridgeObjectRetain();
  }
  else if ((MEMORY[0x24BEE4AF8] & 0xC000000000000000) != 0 && _CocoaArrayWrapper.endIndex.getter())
  {
    specialized Set.init(_nonEmptyArrayLiteral:)(MEMORY[0x24BEE4AF8]);
    v9 = v11;
  }
  else
  {
    v9 = MEMORY[0x24BEE4B08];
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v9;
}

uint64_t ParticipantPresenceStore._addParticipant(_:to:in:)(void *a1, uint64_t a2, uint64_t a3, _QWORD *a4, id a5)
{
  _QWORD *v5;
  char v6;
  _QWORD *v7;
  uint64_t v12;
  _QWORD *v13;
  id v14;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v16;
  char v17;
  unint64_t v18;
  uint64_t v19;
  _BOOL8 v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  _QWORD *v24;
  char v25;
  _QWORD *v26;
  char v27;
  uint64_t v28;
  _BOOL8 v29;
  uint64_t v30;
  char v31;
  unint64_t v32;
  char v33;
  _QWORD *v34;
  id v35;
  char v36;
  uint64_t result;
  id v38;
  uint64_t v39;
  _QWORD *v41;

  v7 = v5;
  v38 = CKShareParticipant.participantIdentifier.getter();
  v39 = v12;
  if (!v12)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    goto LABEL_22;
  }
  v13 = v7 + 16;
  swift_beginAccess();
  swift_bridgeObjectRetain();
  v14 = a1;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v41 = (_QWORD *)v7[16];
  v16 = v41;
  v7[16] = 0x8000000000000000;
  v18 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)a4, (uint64_t)a5);
  v19 = v16[2];
  v20 = (v17 & 1) == 0;
  v21 = v19 + v20;
  if (__OFADD__(v19, v20))
  {
    __break(1u);
    goto LABEL_19;
  }
  v6 = v17;
  if (v16[3] >= v21)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      goto LABEL_20;
  }
  else
  {
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v21, isUniquelyReferenced_nonNull_native);
    v16 = v41;
    v22 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)a4, (uint64_t)a5);
    if ((v6 & 1) != (v23 & 1))
      goto LABEL_22;
    v18 = v22;
  }
  while (1)
  {
    *v13 = v16;
    swift_bridgeObjectRelease();
    v24 = (_QWORD *)*v13;
    if ((v6 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      specialized thunk for @callee_guaranteed () -> (@owned Set<CKShareParticipant>)(&v41);
      specialized _NativeDictionary._insert(at:key:value:)(v18, (uint64_t)a4, (uint64_t)a5, (uint64_t)v41, v24);
    }
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    specialized Set._Variant.insert(_:)(&v41, v14);
    swift_endAccess();
    swift_bridgeObjectRelease();

    a4 = v7 + 17;
    swift_beginAccess();
    a5 = v14;
    swift_bridgeObjectRetain();
    v25 = swift_isUniquelyReferenced_nonNull_native();
    v41 = (_QWORD *)v7[17];
    v26 = v41;
    v7[17] = 0x8000000000000000;
    v6 = a2;
    v14 = (id)specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    v28 = v26[2];
    v29 = (v27 & 1) == 0;
    v30 = v28 + v29;
    if (!__OFADD__(v28, v29))
      break;
LABEL_19:
    __break(1u);
LABEL_20:
    specialized _NativeDictionary.copy()();
    v16 = v41;
  }
  v31 = v27;
  if (v26[3] >= v30)
  {
    if ((v25 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      v26 = v41;
    }
    goto LABEL_15;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v30, v25);
  v26 = v41;
  v32 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  if ((v31 & 1) != (v33 & 1))
  {
LABEL_22:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  v14 = (id)v32;
LABEL_15:
  *a4 = v26;
  swift_bridgeObjectRelease();
  v34 = (_QWORD *)*a4;
  if ((v31 & 1) == 0)
  {
    swift_bridgeObjectRetain();
    specialized thunk for @callee_guaranteed () -> (@owned Set<CKShareParticipant>)(&v41);
    specialized _NativeDictionary._insert(at:key:value:)((unint64_t)v14, a2, a3, (uint64_t)v41, v34);
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  specialized Set._Variant.insert(_:)(&v41, a5);
  swift_endAccess();
  swift_bridgeObjectRelease();

  swift_beginAccess();
  v35 = a5;
  v36 = swift_isUniquelyReferenced_nonNull_native();
  v41 = (_QWORD *)v7[14];
  v7[14] = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v35, (uint64_t)v38, v39, v36);
  v7[14] = v41;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_endAccess();
}

void ParticipantPresenceStore._removeParticipant(_:from:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v13;
  unint64_t v14;
  char v15;
  uint64_t v16;
  id v17;
  uint64_t (*v18)();
  uint64_t (*v19)();
  _QWORD *v20;
  void *v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)();
  uint64_t (*v28)();
  _QWORD *v29;
  void *v30;
  void *v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  _QWORD v39[4];
  _BYTE v40[32];

  v7 = v6;
  swift_beginAccess();
  v13 = *(_QWORD *)(v6 + 112);
  if (*(_QWORD *)(v13 + 16))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v14 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
    if ((v15 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return;
    }
    v16 = a1;
    v17 = *(id *)(*(_QWORD *)(v13 + 56) + 8 * v14);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v18 = ParticipantPresenceStore._tabGroupIdentifiersToParticipants.modify();
    v19 = specialized Dictionary.subscript.modify(v39, a5, a6);
    if (*v20)
    {
      v21 = (void *)specialized Set._Variant.remove(_:)(v17);
      ((void (*)(_QWORD *, _QWORD))v19)(v39, 0);
      swift_bridgeObjectRelease();
      ((void (*)(_BYTE *, _QWORD))v18)(v40, 0);

    }
    else
    {
      ((void (*)(_QWORD *, _QWORD))v19)(v39, 0);
      swift_bridgeObjectRelease();
      ((void (*)(_BYTE *, _QWORD))v18)(v40, 0);
    }
    swift_beginAccess();
    v22 = *(_QWORD *)(v7 + 128);
    if (*(_QWORD *)(v22 + 16))
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v23 = specialized __RawDictionaryStorage.find<A>(_:)(a5, a6);
      if ((v24 & 1) == 0)
      {
LABEL_14:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_15;
      }
      v25 = *(_QWORD *)(*(_QWORD *)(v22 + 56) + 8 * v23);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v25 & 0xC000000000000001) != 0)
        v26 = __CocoaSet.count.getter();
      else
        v26 = *(_QWORD *)(v25 + 16);
      swift_bridgeObjectRelease();
      if (!v26)
      {
        swift_beginAccess();
        swift_bridgeObjectRetain();
        specialized Dictionary._Variant.removeValue(forKey:)(a5, a6);
        swift_endAccess();
        goto LABEL_14;
      }
    }
LABEL_15:
    swift_bridgeObjectRetain();
    v27 = ParticipantPresenceStore._tabIdentifiersToParticipants.modify();
    v28 = specialized Dictionary.subscript.modify(v39, a3, a4);
    if (*v29)
    {
      v30 = v17;
      v31 = (void *)specialized Set._Variant.remove(_:)(v17);
      ((void (*)(_QWORD *, _QWORD))v28)(v39, 0);
      swift_bridgeObjectRelease();
      ((void (*)(_BYTE *, _QWORD))v27)(v40, 0);

    }
    else
    {
      ((void (*)(_QWORD *, _QWORD))v28)(v39, 0);
      swift_bridgeObjectRelease();
      ((void (*)(_BYTE *, _QWORD))v27)(v40, 0);
      v30 = v17;
    }
    swift_beginAccess();
    v32 = *(_QWORD *)(v7 + 136);
    if (!*(_QWORD *)(v32 + 16))
      goto LABEL_26;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v33 = specialized __RawDictionaryStorage.find<A>(_:)(a3, a4);
    if ((v34 & 1) != 0)
    {
      v35 = *(_QWORD *)(*(_QWORD *)(v32 + 56) + 8 * v33);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v35 & 0xC000000000000001) != 0)
        v36 = __CocoaSet.count.getter();
      else
        v36 = *(_QWORD *)(v35 + 16);
      swift_bridgeObjectRelease();
      if (v36)
        goto LABEL_26;
      swift_beginAccess();
      swift_bridgeObjectRetain();
      specialized Dictionary._Variant.removeValue(forKey:)(a3, a4);
      swift_endAccess();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_26:
    swift_beginAccess();
    swift_bridgeObjectRetain();
    v37 = (void *)specialized Dictionary._Variant.removeValue(forKey:)(v16, a2);
    swift_endAccess();

    swift_bridgeObjectRelease();
  }
}

uint64_t ParticipantPresenceStore.__deallocating_deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of PresenceUpdateMessage.Kind(*(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 152));
  swift_bridgeObjectRelease();
  swift_defaultActor_destroy();
  return swift_defaultActor_deallocate();
}

_QWORD *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Task<(), Never>>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 25;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4])
          memmove(v13, a4 + 4, 8 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, ParticipantHandleMap.ParticipantKind)>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4])
          memmove(v12, a4 + 4, 24 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ParticipantHandleMap.ParticipantKind>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 25;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4])
          memmove(v13, a4 + 4, 8 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, CKShareParticipant)>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4])
          memmove(v12, a4 + 4, 24 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(_QWORD *a1, int64_t a2, char a3, unint64_t a4)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<CollaborationConnectionManager<PersonalDeviceCoordinationActivity, PersonalGroupSessionProvider<PersonalDeviceCoordinationActivity>, PresenceUpdateMessage>.WeakContainer<AsyncBufferedQueue<Set<Participant>>>>, &demangling cache variable for type metadata for CollaborationConnectionManager<PersonalDeviceCoordinationActivity, PersonalGroupSessionProvider<PersonalDeviceCoordinationActivity>, PresenceUpdateMessage>.WeakContainer<AsyncBufferedQueue<Set<Participant>>>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<CollaborationConnectionManager<CKShareCollaborationActivity, CKShareGroupSessionProvider<CKShareCollaborationActivity>, PresenceUpdateMessage>.WeakContainer<AsyncBufferedQueue<Set<Participant>>>>, &demangling cache variable for type metadata for CollaborationConnectionManager<CKShareCollaborationActivity, CKShareGroupSessionProvider<CKShareCollaborationActivity>, PresenceUpdateMessage>.WeakContainer<AsyncBufferedQueue<Set<Participant>>>);
}

_QWORD *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(_QWORD *result, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t *a6)
{
  char v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;

  v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    v10 = a2;
    goto LABEL_8;
  }
  v9 = *(_QWORD *)(a4 + 24);
  v10 = v9 >> 1;
  if ((uint64_t)(v9 >> 1) >= a2)
    goto LABEL_8;
  if (v10 + 0x4000000000000000 >= 0)
  {
    v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v10 = a2;
LABEL_8:
    v11 = *(_QWORD *)(a4 + 16);
    if (v10 <= v11)
      v12 = *(_QWORD *)(a4 + 16);
    else
      v12 = v10;
    if (v12)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      v13 = (_QWORD *)swift_allocObject();
      v14 = _swift_stdlib_malloc_size(v13);
      v15 = v14 - 32;
      if (v14 < 32)
        v15 = v14 - 25;
      v13[2] = v11;
      v13[3] = 2 * (v15 >> 3);
      v16 = (unint64_t)(v13 + 4);
      if ((v8 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v13 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v16 = MEMORY[0x24BEE4AF8] + 32;
      if ((result & 1) != 0)
      {
LABEL_15:
        if ((unint64_t)v13 < a4 || v16 >= a4 + 32 + 8 * v11)
        {
          __swift_instantiateConcreteTypeFromMangledName(a6);
          swift_arrayInitWithTakeFrontToBack();
        }
        else if (v13 != (_QWORD *)a4)
        {
          __swift_instantiateConcreteTypeFromMangledName(a6);
          swift_arrayInitWithTakeBackToFront();
        }
        *(_QWORD *)(a4 + 16) = 0;
        goto LABEL_26;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v11, v16, a4, a6);
LABEL_26:
    swift_bridgeObjectRelease();
    return v13;
  }
  __break(1u);
  return result;
}

uint64_t specialized Set._Variant.insert(_:)(Swift::Int *a1, Swift::Int a2, Swift::Int a3)
{
  uint64_t *v3;
  uint64_t v7;
  Swift::Int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  BOOL v13;
  Swift::Int *v14;
  Swift::Int v15;
  uint64_t v17;
  _QWORD *v18;
  BOOL v19;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v21;

  v7 = *v3;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  v8 = Hasher._finalize()();
  v9 = -1 << *(_BYTE *)(v7 + 32);
  v10 = v8 & ~v9;
  if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = *(_QWORD *)(v7 + 48);
    v12 = (_QWORD *)(v11 + 16 * v10);
    v13 = *v12 == a2 && v12[1] == a3;
    if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v14 = (Swift::Int *)(*(_QWORD *)(*v3 + 48) + 16 * v10);
      v15 = v14[1];
      *a1 = *v14;
      a1[1] = v15;
      swift_bridgeObjectRetain();
      return 0;
    }
    v17 = ~v9;
    while (1)
    {
      v10 = (v10 + 1) & v17;
      if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
        break;
      v18 = (_QWORD *)(v11 + 16 * v10);
      v19 = *v18 == a2 && v18[1] == a3;
      if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        goto LABEL_7;
    }
  }
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v21 = *v3;
  *v3 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  specialized _NativeSet.insertNew(_:at:isUnique:)(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  *v3 = v21;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t specialized Set._Variant.insert(_:)(_QWORD *a1, void *a2)
{
  _QWORD *v2;
  uint64_t v5;
  id v6;
  uint64_t v7;
  Swift::Int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  SEL *v12;
  void *v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  SEL *v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  id v31;
  id v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  char isUniquelyReferenced_nonNull_native;
  id v38;
  void *v40;
  id v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;

  v5 = *v2;
  Hasher.init(_seed:)();
  v43 = v2;
  v44 = a1;
  if (a2)
  {
    swift_bridgeObjectRetain();
    v6 = a2;
    CKShareParticipant.participantIdentifier.getter();
    if (v7)
    {
      Hasher._combine(_:)(1u);
      String.hash(into:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      Hasher._combine(_:)(0);
    }

  }
  else
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
  }
  v8 = Hasher._finalize()();
  v9 = -1 << *(_BYTE *)(v5 + 32);
  v10 = v8 & ~v9;
  if (((*(_QWORD *)(v5 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
  {
LABEL_41:
    swift_bridgeObjectRelease();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v46 = *v43;
    *v43 = 0x8000000000000000;
    v38 = a2;
    specialized _NativeSet.insertNew(_:at:isUnique:)(a2, v10, isUniquelyReferenced_nonNull_native);
    *v43 = v46;
    swift_bridgeObjectRelease();
    *v44 = a2;
    return 1;
  }
  v11 = ~v9;
  v12 = (SEL *)&unk_251BCB000;
  v42 = ~v9;
  while (1)
  {
    v13 = *(void **)(*(_QWORD *)(v5 + 48) + 8 * v10);
    if (v13)
    {
      v14 = v13;
      if (objc_msgSend(v14, v12[247]) != (id)2
        || (v15 = objc_msgSend(v14, sel_userIdentity),
            v16 = objc_msgSend(v15, sel_userRecordID),
            v15,
            !v16))
      {

LABEL_17:
        goto LABEL_10;
      }
      v17 = objc_msgSend(v16, sel_recordName);

      if (!a2)
        goto LABEL_17;
    }
    else if (!a2)
    {
      goto LABEL_45;
    }
    v18 = a2;
    if (objc_msgSend(v18, v12[247]) != (id)2
      || (v19 = objc_msgSend(v18, sel_userIdentity),
          v20 = objc_msgSend(v19, sel_userRecordID),
          v19,
          !v20))
    {

      goto LABEL_10;
    }
    v21 = objc_msgSend(v20, sel_recordName);

    if (!v13)
      goto LABEL_10;
    v22 = v18;
    v23 = v13;
    if (objc_msgSend(v23, v12[247]) == (id)2
      && (v24 = objc_msgSend(v23, sel_userIdentity),
          v25 = objc_msgSend(v24, sel_userRecordID),
          v24,
          v25))
    {
      v26 = v12;
      v27 = objc_msgSend(v25, sel_recordName);

      v45 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v29 = v28;

      v12 = v26;
    }
    else
    {
      v45 = 0;
      v29 = 0;
    }
    v30 = v22;
    if (objc_msgSend(v22, v12[247]) == (id)2)
    {
      v31 = objc_msgSend(v22, sel_userIdentity);
      v32 = objc_msgSend(v31, sel_userRecordID);

      if (v32)
      {
        v33 = objc_msgSend(v32, sel_recordName);

        v32 = (id)static String._unconditionallyBridgeFromObjectiveC(_:)();
        v35 = v34;

        v30 = v22;
        if (!v29)
          goto LABEL_29;
      }
      else
      {
        v35 = 0;
        if (!v29)
        {
LABEL_29:

          if (!v35)
          {

            swift_bridgeObjectRelease();
            goto LABEL_46;
          }

          swift_bridgeObjectRelease();
          goto LABEL_38;
        }
      }
    }
    else
    {
      v32 = 0;
      v35 = 0;
      if (!v29)
        goto LABEL_29;
    }
    if (!v35)
    {
      swift_bridgeObjectRelease();

LABEL_38:
      v11 = v42;
      v12 = (SEL *)&unk_251BCB000;
      goto LABEL_10;
    }
    if ((id)v45 == v32 && v29 == v35)
      break;
    v36 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    v11 = v42;
    v12 = (SEL *)&unk_251BCB000;
    if ((v36 & 1) != 0)
      goto LABEL_44;
LABEL_10:
    v10 = (v10 + 1) & v11;
    if (((*(_QWORD *)(v5 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
      goto LABEL_41;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

LABEL_44:
LABEL_45:
  swift_bridgeObjectRelease();
LABEL_46:
  v40 = *(void **)(*(_QWORD *)(*v43 + 48) + 8 * v10);
  *v44 = v40;
  v41 = v40;
  return 0;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t result;
  Swift::Int v11;
  Swift::Int v12;
  uint64_t v13;
  unint64_t v14;
  id v15;
  char v16;
  uint64_t v17;
  id v18;
  char v19;
  void *v20;
  id v21;
  Swift::Int v22;
  _QWORD *v23;
  id v24;
  char isUniquelyReferenced_nonNull_native;
  id v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;

  v3 = v2;
  v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0)
      v7 = *v2;
    else
      v7 = v6 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v8 = a2;
    v9 = __CocoaSet.member(for:)();

    if (v9)
    {
      swift_bridgeObjectRelease();

      type metadata accessor for CKShareParticipant(0, (unint64_t *)&lazy cache variable for type metadata for CKShareParticipant);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      *a1 = v27;
      swift_unknownObjectRelease();
      return 0;
    }
    result = __CocoaSet.count.getter();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    v22 = specialized _NativeSet.init(_:capacity:)(v7, result + 1);
    v28 = (_QWORD *)v22;
    if (*(_QWORD *)(v22 + 24) <= *(_QWORD *)(v22 + 16))
    {
      v26 = v8;
      specialized _NativeSet.resize(capacity:)();
      v23 = v28;
    }
    else
    {
      v23 = (_QWORD *)v22;
      v24 = v8;
    }
    specialized _NativeSet._unsafeInsertNew(_:)((uint64_t)v8, v23);
    *v3 = (uint64_t)v23;
  }
  else
  {
    v11 = *(_QWORD *)(v6 + 40);
    swift_bridgeObjectRetain();
    v12 = NSObject._rawHashValue(seed:)(v11);
    v13 = -1 << *(_BYTE *)(v6 + 32);
    v14 = v12 & ~v13;
    if (((*(_QWORD *)(v6 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) != 0)
    {
      type metadata accessor for CKShareParticipant(0, (unint64_t *)&lazy cache variable for type metadata for CKShareParticipant);
      v15 = *(id *)(*(_QWORD *)(v6 + 48) + 8 * v14);
      v16 = static NSObject.== infix(_:_:)();

      if ((v16 & 1) != 0)
      {
LABEL_12:

        swift_bridgeObjectRelease();
        v20 = *(void **)(*(_QWORD *)(*v3 + 48) + 8 * v14);
        *a1 = v20;
        v21 = v20;
        return 0;
      }
      v17 = ~v13;
      while (1)
      {
        v14 = (v14 + 1) & v17;
        if (((*(_QWORD *)(v6 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) == 0)
          break;
        v18 = *(id *)(*(_QWORD *)(v6 + 48) + 8 * v14);
        v19 = static NSObject.== infix(_:_:)();

        if ((v19 & 1) != 0)
          goto LABEL_12;
      }
    }
    swift_bridgeObjectRelease();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v29 = *v3;
    *v3 = 0x8000000000000000;
    v8 = a2;
    specialized _NativeSet.insertNew(_:at:isUnique:)((uint64_t)v8, v14, isUniquelyReferenced_nonNull_native);
    *v3 = v29;
  }
  swift_bridgeObjectRelease();
  *a1 = v8;
  return 1;
}

uint64_t specialized Set._Variant.insert(_:)(uint64_t a1, char *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(_QWORD, _QWORD, _QWORD);
  uint64_t v19;
  void (*v20)(_QWORD, _QWORD, _QWORD);
  char v21;
  void (*v22)(char *, uint64_t);
  uint64_t v23;
  char isUniquelyReferenced_nonNull_native;
  char *v25;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;

  v3 = v2;
  v6 = type metadata accessor for AddressableMember();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v3;
  lazy protocol witness table accessor for type CKShareParticipant and conformance NSObject(&lazy protocol witness table cache variable for type AddressableMember and conformance AddressableMember, v11, MEMORY[0x24BDD1FB8]);
  swift_bridgeObjectRetain();
  v31 = a2;
  v12 = dispatch thunk of Hashable._rawHashValue(seed:)();
  v13 = -1 << *(_BYTE *)(v10 + 32);
  v14 = v12 & ~v13;
  v15 = v10;
  v16 = v10 + 56;
  if (((*(_QWORD *)(v10 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) != 0)
  {
    v27 = v3;
    v28 = a1;
    v29 = ~v13;
    v30 = v7;
    v17 = *(_QWORD *)(v7 + 72);
    v18 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    while (1)
    {
      v19 = v15;
      v20 = v18;
      v18(v9, *(_QWORD *)(v15 + 48) + v17 * v14, v6);
      lazy protocol witness table accessor for type CKShareParticipant and conformance NSObject(&lazy protocol witness table cache variable for type AddressableMember and conformance AddressableMember, (uint64_t (*)(uint64_t))MEMORY[0x24BDD1FA8], MEMORY[0x24BDD1FC0]);
      v21 = dispatch thunk of static Equatable.== infix(_:_:)();
      v22 = *(void (**)(char *, uint64_t))(v30 + 8);
      v22(v9, v6);
      if ((v21 & 1) != 0)
        break;
      v14 = (v14 + 1) & v29;
      v15 = v19;
      v18 = v20;
      if (((*(_QWORD *)(v16 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        v3 = v27;
        a1 = v28;
        v23 = v30;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    v22(v31, v6);
    v20(v28, *(_QWORD *)(*v27 + 48) + v17 * v14, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    v18 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    v23 = v7;
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v25 = v31;
    v18(v9, v31, v6);
    v32 = *v3;
    *v3 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)((uint64_t)v9, v14, isUniquelyReferenced_nonNull_native);
    *v3 = v32;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, char *, uint64_t))(v23 + 32))(a1, v25, v6);
    return 1;
  }
}

Swift::Int specialized _NativeSet.init(_:capacity:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  Swift::Int result;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char v9;
  unint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (a2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<CKShareParticipant>);
    v2 = static _SetStorage.convert(_:capacity:)();
    v14 = v2;
    __CocoaSet.makeIterator()();
    if (__CocoaSet.Iterator.next()())
    {
      type metadata accessor for CKShareParticipant(0, (unint64_t *)&lazy cache variable for type metadata for CKShareParticipant);
      do
      {
        swift_dynamicCast();
        v2 = v14;
        if (*(_QWORD *)(v14 + 24) <= *(_QWORD *)(v14 + 16))
        {
          specialized _NativeSet.resize(capacity:)();
          v2 = v14;
        }
        result = NSObject._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
        v4 = v2 + 56;
        v5 = -1 << *(_BYTE *)(v2 + 32);
        v6 = result & ~v5;
        v7 = v6 >> 6;
        if (((-1 << v6) & ~*(_QWORD *)(v2 + 56 + 8 * (v6 >> 6))) != 0)
        {
          v8 = __clz(__rbit64((-1 << v6) & ~*(_QWORD *)(v2 + 56 + 8 * (v6 >> 6)))) | v6 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          v9 = 0;
          v10 = (unint64_t)(63 - v5) >> 6;
          do
          {
            if (++v7 == v10 && (v9 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            v11 = v7 == v10;
            if (v7 == v10)
              v7 = 0;
            v9 |= v11;
            v12 = *(_QWORD *)(v4 + 8 * v7);
          }
          while (v12 == -1);
          v8 = __clz(__rbit64(~v12)) + (v7 << 6);
        }
        *(_QWORD *)(v4 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v8;
        *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v8) = v13;
        ++*(_QWORD *)(v2 + 16);
      }
      while (__CocoaSet.Iterator.next()());
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return MEMORY[0x24BEE4B08];
  }
  return v2;
}

uint64_t specialized _NativeSet.resize(capacity:)()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
  v3 = static _SetStorage.resize(original:capacity:move:)();
  v4 = v3;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = 1 << *(_BYTE *)(v2 + 32);
    v30 = (_QWORD *)(v2 + 56);
    if (v5 < 64)
      v6 = ~(-1 << v5);
    else
      v6 = -1;
    v7 = v6 & *(_QWORD *)(v2 + 56);
    v8 = (unint64_t)(v5 + 63) >> 6;
    v9 = v3 + 56;
    result = swift_retain();
    v11 = 0;
    while (1)
    {
      if (v7)
      {
        v14 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        v15 = v14 | (v11 << 6);
      }
      else
      {
        v16 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v8)
          goto LABEL_33;
        v17 = v30[v16];
        ++v11;
        if (!v17)
        {
          v11 = v16 + 1;
          if (v16 + 1 >= v8)
            goto LABEL_33;
          v17 = v30[v11];
          if (!v17)
          {
            v11 = v16 + 2;
            if (v16 + 2 >= v8)
              goto LABEL_33;
            v17 = v30[v11];
            if (!v17)
            {
              v18 = v16 + 3;
              if (v18 >= v8)
              {
LABEL_33:
                swift_release();
                v1 = v0;
                v29 = 1 << *(_BYTE *)(v2 + 32);
                if (v29 > 63)
                  bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v30 = -1 << v29;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v17 = v30[v18];
              if (!v17)
              {
                while (1)
                {
                  v11 = v18 + 1;
                  if (__OFADD__(v18, 1))
                    goto LABEL_39;
                  if (v11 >= v8)
                    goto LABEL_33;
                  v17 = v30[v11];
                  ++v18;
                  if (v17)
                    goto LABEL_23;
                }
              }
              v11 = v18;
            }
          }
        }
LABEL_23:
        v7 = (v17 - 1) & v17;
        v15 = __clz(__rbit64(v17)) + (v11 << 6);
      }
      v19 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
      v20 = *v19;
      v21 = v19[1];
      Hasher.init(_seed:)();
      String.hash(into:)();
      result = Hasher._finalize()();
      v22 = -1 << *(_BYTE *)(v4 + 32);
      v23 = result & ~v22;
      v24 = v23 >> 6;
      if (((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6))) != 0)
      {
        v12 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v27 = v24 == v26;
          if (v24 == v26)
            v24 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v9 + 8 * v24);
        }
        while (v28 == -1);
        v12 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(_QWORD *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      v13 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * v12);
      *v13 = v20;
      v13[1] = v21;
      ++*(_QWORD *)(v4 + 16);
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  void *v18;
  id v19;
  id v20;
  id v21;
  id v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  int64_t v32;
  int64_t v33;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<ParticipantHandleMap.ParticipantKind>);
  v3 = static _SetStorage.resize(original:capacity:move:)();
  v4 = v3;
  if (*(_QWORD *)(v2 + 16))
  {
    v31 = v0;
    v5 = 1 << *(_BYTE *)(v2 + 32);
    v6 = (_QWORD *)(v2 + 56);
    if (v5 < 64)
      v7 = ~(-1 << v5);
    else
      v7 = -1;
    v8 = v7 & *(_QWORD *)(v2 + 56);
    v32 = (unint64_t)(v5 + 63) >> 6;
    v9 = v3 + 56;
    result = swift_retain();
    v11 = 0;
    while (1)
    {
      if (v8)
      {
        v13 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
        v14 = v13 | (v11 << 6);
      }
      else
      {
        v15 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_45:
          __break(1u);
LABEL_46:
          __break(1u);
          return result;
        }
        if (v15 >= v32)
          goto LABEL_40;
        v16 = v6[v15];
        ++v11;
        if (!v16)
        {
          v11 = v15 + 1;
          if (v15 + 1 >= v32)
            goto LABEL_40;
          v16 = v6[v11];
          if (!v16)
          {
            v11 = v15 + 2;
            if (v15 + 2 >= v32)
              goto LABEL_40;
            v16 = v6[v11];
            if (!v16)
            {
              v17 = v15 + 3;
              if (v17 >= v32)
              {
LABEL_40:
                swift_release();
                v1 = v31;
                v30 = 1 << *(_BYTE *)(v2 + 32);
                if (v30 > 63)
                  bzero(v6, ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v6 = -1 << v30;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v16 = v6[v17];
              if (!v16)
              {
                while (1)
                {
                  v11 = v17 + 1;
                  if (__OFADD__(v17, 1))
                    goto LABEL_46;
                  if (v11 >= v32)
                    goto LABEL_40;
                  v16 = v6[v11];
                  ++v17;
                  if (v16)
                    goto LABEL_23;
                }
              }
              v11 = v17;
            }
          }
        }
LABEL_23:
        v8 = (v16 - 1) & v16;
        v14 = __clz(__rbit64(v16)) + (v11 << 6);
      }
      v18 = *(void **)(*(_QWORD *)(v2 + 48) + 8 * v14);
      Hasher.init(_seed:)();
      if (v18)
      {
        v33 = v11;
        v19 = v18;
        if (objc_msgSend(v19, sel_acceptanceStatus) == (id)2
          && (v20 = objc_msgSend(v19, sel_userIdentity),
              v21 = objc_msgSend(v20, sel_userRecordID),
              v20,
              v21))
        {
          v22 = objc_msgSend(v21, sel_recordName);

          static String._unconditionallyBridgeFromObjectiveC(_:)();
          Hasher._combine(_:)(1u);
          String.hash(into:)();
          v6 = (_QWORD *)(v2 + 56);
          swift_bridgeObjectRelease();
        }
        else
        {
          Hasher._combine(_:)(0);
        }

        v11 = v33;
      }
      else
      {
        String.hash(into:)();
      }
      result = Hasher._finalize()();
      v23 = -1 << *(_BYTE *)(v4 + 32);
      v24 = result & ~v23;
      v25 = v24 >> 6;
      if (((-1 << v24) & ~*(_QWORD *)(v9 + 8 * (v24 >> 6))) != 0)
      {
        v12 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)(v9 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v26 = 0;
        v27 = (unint64_t)(63 - v23) >> 6;
        do
        {
          if (++v25 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_45;
          }
          v28 = v25 == v27;
          if (v25 == v27)
            v25 = 0;
          v26 |= v28;
          v29 = *(_QWORD *)(v9 + 8 * v25);
        }
        while (v29 == -1);
        v12 = __clz(__rbit64(~v29)) + (v25 << 6);
      }
      *(_QWORD *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v12) = v18;
      ++*(_QWORD *)(v4 + 16);
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, unint64_t, uint64_t);
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  int64_t v34;
  _QWORD *v35;
  uint64_t v36;

  v1 = v0;
  v2 = type metadata accessor for AddressableMember();
  v36 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<AddressableMember>);
  v6 = static _SetStorage.resize(original:capacity:move:)();
  v7 = v6;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 1 << *(_BYTE *)(v5 + 32);
    v9 = *(_QWORD *)(v5 + 56);
    v35 = (_QWORD *)(v5 + 56);
    if (v8 < 64)
      v10 = ~(-1 << v8);
    else
      v10 = -1;
    v11 = v10 & v9;
    v33 = v0;
    v34 = (unint64_t)(v8 + 63) >> 6;
    v12 = v6 + 56;
    result = swift_retain();
    v14 = 0;
    while (1)
    {
      if (v11)
      {
        v16 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v17 = v16 | (v14 << 6);
      }
      else
      {
        v18 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v18 >= v34)
          goto LABEL_33;
        v19 = v35[v18];
        ++v14;
        if (!v19)
        {
          v14 = v18 + 1;
          if (v18 + 1 >= v34)
            goto LABEL_33;
          v19 = v35[v14];
          if (!v19)
          {
            v14 = v18 + 2;
            if (v18 + 2 >= v34)
              goto LABEL_33;
            v19 = v35[v14];
            if (!v19)
            {
              v20 = v18 + 3;
              if (v20 >= v34)
              {
LABEL_33:
                swift_release();
                v1 = v33;
                v32 = 1 << *(_BYTE *)(v5 + 32);
                if (v32 > 63)
                  bzero(v35, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v35 = -1 << v32;
                *(_QWORD *)(v5 + 16) = 0;
                break;
              }
              v19 = v35[v20];
              if (!v19)
              {
                while (1)
                {
                  v14 = v20 + 1;
                  if (__OFADD__(v20, 1))
                    goto LABEL_39;
                  if (v14 >= v34)
                    goto LABEL_33;
                  v19 = v35[v14];
                  ++v20;
                  if (v19)
                    goto LABEL_23;
                }
              }
              v14 = v20;
            }
          }
        }
LABEL_23:
        v11 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v14 << 6);
      }
      v21 = v5;
      v22 = *(_QWORD *)(v5 + 48);
      v23 = *(_QWORD *)(v36 + 72);
      v24 = *(void (**)(char *, unint64_t, uint64_t))(v36 + 32);
      v24(v4, v22 + v23 * v17, v2);
      lazy protocol witness table accessor for type CKShareParticipant and conformance NSObject(&lazy protocol witness table cache variable for type AddressableMember and conformance AddressableMember, (uint64_t (*)(uint64_t))MEMORY[0x24BDD1FA8], MEMORY[0x24BDD1FB8]);
      result = dispatch thunk of Hashable._rawHashValue(seed:)();
      v25 = -1 << *(_BYTE *)(v7 + 32);
      v26 = result & ~v25;
      v27 = v26 >> 6;
      if (((-1 << v26) & ~*(_QWORD *)(v12 + 8 * (v26 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v12 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v28 = 0;
        v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v30 = v27 == v29;
          if (v27 == v29)
            v27 = 0;
          v28 |= v30;
          v31 = *(_QWORD *)(v12 + 8 * v27);
        }
        while (v31 == -1);
        v15 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(_QWORD *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      result = ((uint64_t (*)(unint64_t, char *, uint64_t))v24)(*(_QWORD *)(v7 + 48) + v15 * v23, v4, v2);
      ++*(_QWORD *)(v7 + 16);
      v5 = v21;
    }
  }
  result = swift_release();
  *v1 = v7;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<CKShareParticipant>);
  v3 = static _SetStorage.resize(original:capacity:move:)();
  v4 = v3;
  if (*(_QWORD *)(v2 + 16))
  {
    v28 = v0;
    v5 = 1 << *(_BYTE *)(v2 + 32);
    v6 = (_QWORD *)(v2 + 56);
    if (v5 < 64)
      v7 = ~(-1 << v5);
    else
      v7 = -1;
    v8 = v7 & *(_QWORD *)(v2 + 56);
    v9 = (unint64_t)(v5 + 63) >> 6;
    v10 = v3 + 56;
    result = swift_retain();
    v12 = 0;
    while (1)
    {
      if (v8)
      {
        v14 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
        v15 = v14 | (v12 << 6);
      }
      else
      {
        v16 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v9)
          goto LABEL_33;
        v17 = v6[v16];
        ++v12;
        if (!v17)
        {
          v12 = v16 + 1;
          if (v16 + 1 >= v9)
            goto LABEL_33;
          v17 = v6[v12];
          if (!v17)
          {
            v12 = v16 + 2;
            if (v16 + 2 >= v9)
              goto LABEL_33;
            v17 = v6[v12];
            if (!v17)
            {
              v18 = v16 + 3;
              if (v18 >= v9)
              {
LABEL_33:
                swift_release();
                v1 = v28;
                v27 = 1 << *(_BYTE *)(v2 + 32);
                if (v27 > 63)
                  bzero((void *)(v2 + 56), ((unint64_t)(v27 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v6 = -1 << v27;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v17 = v6[v18];
              if (!v17)
              {
                while (1)
                {
                  v12 = v18 + 1;
                  if (__OFADD__(v18, 1))
                    goto LABEL_39;
                  if (v12 >= v9)
                    goto LABEL_33;
                  v17 = v6[v12];
                  ++v18;
                  if (v17)
                    goto LABEL_23;
                }
              }
              v12 = v18;
            }
          }
        }
LABEL_23:
        v8 = (v17 - 1) & v17;
        v15 = __clz(__rbit64(v17)) + (v12 << 6);
      }
      v19 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
      result = NSObject._rawHashValue(seed:)(*(_QWORD *)(v4 + 40));
      v20 = -1 << *(_BYTE *)(v4 + 32);
      v21 = result & ~v20;
      v22 = v21 >> 6;
      if (((-1 << v21) & ~*(_QWORD *)(v10 + 8 * (v21 >> 6))) != 0)
      {
        v13 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v10 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v23 = 0;
        v24 = (unint64_t)(63 - v20) >> 6;
        do
        {
          if (++v22 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v25 = v22 == v24;
          if (v22 == v24)
            v22 = 0;
          v23 |= v25;
          v26 = *(_QWORD *)(v10 + 8 * v22);
        }
        while (v26 == -1);
        v13 = __clz(__rbit64(~v26)) + (v22 << 6);
      }
      *(_QWORD *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v13) = v19;
      ++*(_QWORD *)(v4 + 16);
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

unint64_t specialized _NativeSet._unsafeInsertNew(_:)(uint64_t a1, _QWORD *a2)
{
  unint64_t result;

  NSObject._rawHashValue(seed:)(a2[5]);
  result = _HashTable.nextHole(atOrAfter:)();
  *(_QWORD *)((char *)a2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 56) |= 1 << result;
  *(_QWORD *)(a2[6] + 8 * result) = a1;
  ++a2[2];
  return result;
}

Swift::Int specialized _NativeSet.insertNew(_:at:isUnique:)(Swift::Int result, Swift::Int a2, unint64_t a3, char a4)
{
  uint64_t *v4;
  uint64_t *v5;
  Swift::Int v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  BOOL v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v20;
  Swift::Int *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  v5 = v4;
  v8 = result;
  v9 = *(_QWORD *)(*v4 + 16);
  v10 = *(_QWORD *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0)
    goto LABEL_22;
  if ((a4 & 1) != 0)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v10 > v9)
    {
      result = (Swift::Int)specialized _NativeSet.copy()();
      goto LABEL_22;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  v11 = *v4;
  Hasher.init(_seed:)();
  String.hash(into:)();
  result = Hasher._finalize()();
  v12 = -1 << *(_BYTE *)(v11 + 32);
  a3 = result & ~v12;
  v13 = v11 + 56;
  if (((*(_QWORD *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
  {
    v14 = *(_QWORD *)(v11 + 48);
    v15 = (_QWORD *)(v14 + 16 * a3);
    v16 = *v15 == v8 && v15[1] == a2;
    if (v16 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
LABEL_21:
      result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      v17 = ~v12;
      while (1)
      {
        a3 = (a3 + 1) & v17;
        if (((*(_QWORD *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) == 0)
          break;
        v18 = (_QWORD *)(v14 + 16 * a3);
        if (*v18 != v8 || v18[1] != a2)
        {
          result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((result & 1) == 0)
            continue;
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  v20 = *v5;
  *(_QWORD *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  v21 = (Swift::Int *)(*(_QWORD *)(v20 + 48) + 16 * a3);
  *v21 = v8;
  v21[1] = a2;
  v22 = *(_QWORD *)(v20 + 16);
  v23 = __OFADD__(v22, 1);
  v24 = v22 + 1;
  if (v23)
    __break(1u);
  else
    *(_QWORD *)(v20 + 16) = v24;
  return result;
}

void specialized _NativeSet.insertNew(_:at:isUnique:)(void *a1, unint64_t a2, char a3)
{
  char *v3;
  id v4;
  char *v5;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  id v11;
  void *v12;
  Swift::Int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  uint64_t v24;
  void *v25;
  id v26;
  id v27;
  uint64_t v28;
  char *v29;
  id v30;
  uint64_t v31;
  void *v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char v41;

  v5 = v3;
  v8 = *(_QWORD *)(*(_QWORD *)v3 + 16);
  v9 = *(_QWORD *)(*(_QWORD *)v3 + 24);
  if (v9 <= v8 || (a3 & 1) == 0)
  {
    if ((a3 & 1) != 0)
    {
      specialized _NativeSet.resize(capacity:)();
    }
    else
    {
      if (v9 > v8)
      {
        specialized _NativeSet.copy()();
        goto LABEL_48;
      }
      specialized _NativeSet.copyAndResize(capacity:)();
    }
    v10 = *(_QWORD *)v3;
    Hasher.init(_seed:)();
    if (a1)
    {
      v11 = a1;
      CKShareParticipant.participantIdentifier.getter();
      if (v12)
      {
        v4 = v12;
        Hasher._combine(_:)(1u);
        String.hash(into:)();
        swift_bridgeObjectRelease();
      }
      else
      {
        Hasher._combine(_:)(0);
      }

    }
    else
    {
      String.hash(into:)();
    }
    v3 = &v41;
    v13 = Hasher._finalize()();
    v14 = -1 << *(_BYTE *)(v10 + 32);
    a2 = v13 & ~v14;
    v15 = v10 + 56;
    if (((*(_QWORD *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
    {
      v39 = v10;
      v40 = ~v14;
      do
      {
        v16 = *(void **)(*(_QWORD *)(v10 + 48) + 8 * a2);
        if (v16)
        {
          v3 = v16;
          if (objc_msgSend(v3, sel_acceptanceStatus) != (id)2
            || (v17 = objc_msgSend(v3, sel_userIdentity),
                v4 = objc_msgSend(v17, sel_userRecordID),
                v17,
                !v4))
          {

LABEL_24:
            goto LABEL_17;
          }
          v18 = objc_msgSend(v4, sel_recordName);

          if (!a1)
            goto LABEL_24;
        }
        else if (!a1)
        {
          goto LABEL_52;
        }
        v3 = a1;
        if (objc_msgSend(v3, sel_acceptanceStatus) != (id)2
          || (v19 = objc_msgSend(v3, sel_userIdentity),
              v4 = objc_msgSend(v19, sel_userRecordID),
              v19,
              !v4))
        {

          goto LABEL_17;
        }
        v20 = objc_msgSend(v4, sel_recordName);

        if (!v16)
          goto LABEL_17;
        v3 = v3;
        v4 = v16;
        if (objc_msgSend(v4, sel_acceptanceStatus) == (id)2)
        {
          v21 = objc_msgSend(v4, sel_userIdentity);
          v22 = objc_msgSend(v21, sel_userRecordID);

          if (v22)
          {
            v23 = objc_msgSend(v22, sel_recordName);

            v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            v22 = v25;

          }
          else
          {
            v24 = 0;
          }
        }
        else
        {
          v24 = 0;
          v22 = 0;
        }
        if (objc_msgSend(v3, sel_acceptanceStatus, v38) == (id)2)
        {
          v26 = objc_msgSend(v3, sel_userIdentity);
          v27 = objc_msgSend(v26, sel_userRecordID);

          if (v27)
          {
            v38 = v3;
            v28 = v24;
            v29 = v5;
            v30 = objc_msgSend(v27, sel_recordName);

            v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            v27 = v32;

            v5 = v29;
            v24 = v28;
            v3 = v38;
            if (!v22)
              goto LABEL_37;
          }
          else
          {
            v31 = 0;
            if (!v22)
            {
LABEL_37:

              v10 = v39;
              if (!v27)
                goto LABEL_52;
              swift_bridgeObjectRelease();
              goto LABEL_17;
            }
          }
        }
        else
        {
          v31 = 0;
          v27 = 0;
          if (!v22)
            goto LABEL_37;
        }
        if (v27)
        {
          if (v24 == v31 && v22 == v27)
            goto LABEL_51;
          v33 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          v10 = v39;
          if ((v33 & 1) != 0)
            goto LABEL_52;
        }
        else
        {
          swift_bridgeObjectRelease();

          v10 = v39;
        }
LABEL_17:
        a2 = (a2 + 1) & v40;
      }
      while (((*(_QWORD *)(v15 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
    }
  }
LABEL_48:
  v34 = *(_QWORD *)v5;
  *(_QWORD *)(*(_QWORD *)v5 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v34 + 48) + 8 * a2) = a1;
  v35 = *(_QWORD *)(v34 + 16);
  v36 = __OFADD__(v35, 1);
  v37 = v35 + 1;
  if (v36)
  {
    __break(1u);
LABEL_51:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

LABEL_52:
    ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v34 + 16) = v37;
  }
}

uint64_t specialized _NativeSet.insertNew(_:at:isUnique:)(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, unint64_t, uint64_t);
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;

  v26 = a1;
  v6 = type metadata accessor for AddressableMember();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(*v3 + 16);
  v11 = *(_QWORD *)(*v3 + 24);
  v25 = v3;
  if (v11 > v10 && (a3 & 1) != 0)
    goto LABEL_12;
  if ((a3 & 1) != 0)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v11 > v10)
    {
      specialized _NativeSet.copy()((uint64_t (*)(_QWORD))MEMORY[0x24BDD1FA8], &demangling cache variable for type metadata for _SetStorage<AddressableMember>);
      goto LABEL_12;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  v12 = *v3;
  lazy protocol witness table accessor for type CKShareParticipant and conformance NSObject(&lazy protocol witness table cache variable for type AddressableMember and conformance AddressableMember, (uint64_t (*)(uint64_t))MEMORY[0x24BDD1FA8], MEMORY[0x24BDD1FB8]);
  v13 = dispatch thunk of Hashable._rawHashValue(seed:)();
  v14 = -1 << *(_BYTE *)(v12 + 32);
  a2 = v13 & ~v14;
  if (((*(_QWORD *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v15 = ~v14;
    v16 = *(_QWORD *)(v7 + 72);
    v17 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    do
    {
      v17(v9, *(_QWORD *)(v12 + 48) + v16 * a2, v6);
      lazy protocol witness table accessor for type CKShareParticipant and conformance NSObject(&lazy protocol witness table cache variable for type AddressableMember and conformance AddressableMember, (uint64_t (*)(uint64_t))MEMORY[0x24BDD1FA8], MEMORY[0x24BDD1FC0]);
      v18 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      if ((v18 & 1) != 0)
        goto LABEL_15;
      a2 = (a2 + 1) & v15;
    }
    while (((*(_QWORD *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  v19 = v26;
  v20 = *v25;
  *(_QWORD *)(*v25 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 32))(*(_QWORD *)(v20 + 48) + *(_QWORD *)(v7 + 72) * a2, v19, v6);
  v22 = *(_QWORD *)(v20 + 16);
  v23 = __OFADD__(v22, 1);
  v24 = v22 + 1;
  if (!v23)
  {
    *(_QWORD *)(v20 + 16) = v24;
    return result;
  }
  __break(1u);
LABEL_15:
  result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void specialized _NativeSet.insertNew(_:at:isUnique:)(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  Swift::Int v9;
  uint64_t v10;
  id v11;
  char v12;
  uint64_t v13;
  id v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;

  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0)
    goto LABEL_14;
  if ((a3 & 1) != 0)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v7 > v6)
    {
      specialized _NativeSet.copy()();
      goto LABEL_14;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  v8 = *v3;
  v9 = NSObject._rawHashValue(seed:)(*(_QWORD *)(*v3 + 40));
  v10 = -1 << *(_BYTE *)(v8 + 32);
  a2 = v9 & ~v10;
  if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    type metadata accessor for CKShareParticipant(0, (unint64_t *)&lazy cache variable for type metadata for CKShareParticipant);
    v11 = *(id *)(*(_QWORD *)(v8 + 48) + 8 * a2);
    v12 = static NSObject.== infix(_:_:)();

    if ((v12 & 1) != 0)
    {
LABEL_13:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      v13 = ~v10;
      while (1)
      {
        a2 = (a2 + 1) & v13;
        if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        v14 = *(id *)(*(_QWORD *)(v8 + 48) + 8 * a2);
        v15 = static NSObject.== infix(_:_:)();

        if ((v15 & 1) != 0)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v16 = *v3;
  *(_QWORD *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v16 + 48) + 8 * a2) = a1;
  v17 = *(_QWORD *)(v16 + 16);
  v18 = __OFADD__(v17, 1);
  v19 = v17 + 1;
  if (v18)
    __break(1u);
  else
    *(_QWORD *)(v16 + 16) = v19;
}

void *specialized _NativeSet.copy()()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_28;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
      {
        v9 = v20 + 2;
        if (v20 + 2 >= v13)
          goto LABEL_28;
        v21 = *(_QWORD *)(v6 + 8 * v9);
        if (!v21)
          break;
      }
    }
LABEL_27:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    v18 = v17[1];
    v19 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v19 = *v17;
    v19[1] = v18;
    result = (void *)swift_bridgeObjectRetain();
  }
  v22 = v20 + 3;
  if (v22 >= v13)
    goto LABEL_28;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

id specialized _NativeSet.copy()()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<ParticipantHandleMap.ParticipantKind>);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (id)swift_release();
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v18 >= v13)
      goto LABEL_28;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      v9 = v18 + 1;
      if (v18 + 1 >= v13)
        goto LABEL_28;
      v19 = *(_QWORD *)(v6 + 8 * v9);
      if (!v19)
      {
        v9 = v18 + 2;
        if (v18 + 2 >= v13)
          goto LABEL_28;
        v19 = *(_QWORD *)(v6 + 8 * v9);
        if (!v19)
          break;
      }
    }
LABEL_27:
    v12 = (v19 - 1) & v19;
    v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(void **)(*(_QWORD *)(v2 + 48) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    result = v17;
  }
  v20 = v18 + 3;
  if (v20 >= v13)
    goto LABEL_28;
  v19 = *(_QWORD *)(v6 + 8 * v20);
  if (v19)
  {
    v9 = v20;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v19 = *(_QWORD *)(v6 + 8 * v9);
    ++v20;
    if (v19)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<CKShareParticipant>);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (id)swift_release();
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v18 >= v13)
      goto LABEL_28;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      v9 = v18 + 1;
      if (v18 + 1 >= v13)
        goto LABEL_28;
      v19 = *(_QWORD *)(v6 + 8 * v9);
      if (!v19)
      {
        v9 = v18 + 2;
        if (v18 + 2 >= v13)
          goto LABEL_28;
        v19 = *(_QWORD *)(v6 + 8 * v9);
        if (!v19)
          break;
      }
    }
LABEL_27:
    v12 = (v19 - 1) & v19;
    v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(void **)(*(_QWORD *)(v2 + 48) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    result = v17;
  }
  v20 = v18 + 3;
  if (v20 >= v13)
    goto LABEL_28;
  v19 = *(_QWORD *)(v6 + 8 * v20);
  if (v19)
  {
    v9 = v20;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v19 = *(_QWORD *)(v6 + 8 * v9);
    ++v20;
    if (v19)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *specialized _NativeSet.copy()(uint64_t (*a1)(_QWORD), uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *result;
  uint64_t v13;
  unint64_t v14;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t *v28;

  v4 = v2;
  v5 = a1(0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v27 - v7;
  __swift_instantiateConcreteTypeFromMangledName(a2);
  v9 = *v2;
  v10 = static _SetStorage.copy(original:)();
  v11 = v10;
  if (!*(_QWORD *)(v9 + 16))
  {
    result = (void *)swift_release();
LABEL_30:
    *v4 = v11;
    return result;
  }
  v28 = v4;
  result = (void *)(v10 + 56);
  v13 = v9 + 56;
  v14 = (unint64_t)((1 << *(_BYTE *)(v11 + 32)) + 63) >> 6;
  if (v11 != v9 || (unint64_t)result >= v9 + 56 + 8 * v14)
    result = memmove(result, (const void *)(v9 + 56), 8 * v14);
  v16 = 0;
  *(_QWORD *)(v11 + 16) = *(_QWORD *)(v9 + 16);
  v17 = 1 << *(_BYTE *)(v9 + 32);
  v18 = -1;
  if (v17 < 64)
    v18 = ~(-1 << v17);
  v19 = v18 & *(_QWORD *)(v9 + 56);
  v20 = (unint64_t)(v17 + 63) >> 6;
  while (1)
  {
    if (v19)
    {
      v21 = __clz(__rbit64(v19));
      v19 &= v19 - 1;
      v22 = v21 | (v16 << 6);
      goto LABEL_12;
    }
    v24 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v24 >= v20)
      goto LABEL_28;
    v25 = *(_QWORD *)(v13 + 8 * v24);
    ++v16;
    if (!v25)
    {
      v16 = v24 + 1;
      if (v24 + 1 >= v20)
        goto LABEL_28;
      v25 = *(_QWORD *)(v13 + 8 * v16);
      if (!v25)
      {
        v16 = v24 + 2;
        if (v24 + 2 >= v20)
          goto LABEL_28;
        v25 = *(_QWORD *)(v13 + 8 * v16);
        if (!v25)
          break;
      }
    }
LABEL_27:
    v19 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v16 << 6);
LABEL_12:
    v23 = *(_QWORD *)(v6 + 72) * v22;
    (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v8, *(_QWORD *)(v9 + 48) + v23, v5);
    result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v6 + 32))(*(_QWORD *)(v11 + 48) + v23, v8, v5);
  }
  v26 = v24 + 3;
  if (v26 >= v20)
  {
LABEL_28:
    result = (void *)swift_release();
    v4 = v28;
    goto LABEL_30;
  }
  v25 = *(_QWORD *)(v13 + 8 * v26);
  if (v25)
  {
    v16 = v26;
    goto LABEL_27;
  }
  while (1)
  {
    v16 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v16 >= v20)
      goto LABEL_28;
    v25 = *(_QWORD *)(v13 + 8 * v16);
    ++v26;
    if (v25)
      goto LABEL_27;
  }
LABEL_32:
  __break(1u);
  return result;
}

uint64_t specialized _NativeSet.copyAndResize(capacity:)()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  int64_t v29;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
  v3 = static _SetStorage.resize(original:capacity:move:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v4;
    return result;
  }
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v6 = v2 + 56;
  if (v5 < 64)
    v7 = ~(-1 << v5);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(v2 + 56);
  v29 = (unint64_t)(v5 + 63) >> 6;
  v9 = v3 + 56;
  result = swift_retain();
  v11 = 0;
  while (1)
  {
    if (v8)
    {
      v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v15 = v14 | (v11 << 6);
      goto LABEL_24;
    }
    v16 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v29)
      goto LABEL_33;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v11;
    if (!v17)
    {
      v11 = v16 + 1;
      if (v16 + 1 >= v29)
        goto LABEL_33;
      v17 = *(_QWORD *)(v6 + 8 * v11);
      if (!v17)
      {
        v11 = v16 + 2;
        if (v16 + 2 >= v29)
          goto LABEL_33;
        v17 = *(_QWORD *)(v6 + 8 * v11);
        if (!v17)
          break;
      }
    }
LABEL_23:
    v8 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v11 << 6);
LABEL_24:
    v19 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v20 = *v19;
    v21 = v19[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    result = Hasher._finalize()();
    v22 = -1 << *(_BYTE *)(v4 + 32);
    v23 = result & ~v22;
    v24 = v23 >> 6;
    if (((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6))) != 0)
    {
      v12 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v27 = v24 == v26;
        if (v24 == v26)
          v24 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v9 + 8 * v24);
      }
      while (v28 == -1);
      v12 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(_QWORD *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    v13 = (_QWORD *)(*(_QWORD *)(v4 + 48) + 16 * v12);
    *v13 = v20;
    v13[1] = v21;
    ++*(_QWORD *)(v4 + 16);
  }
  v18 = v16 + 3;
  if (v18 >= v29)
  {
LABEL_33:
    result = swift_release_n();
    v1 = v0;
    goto LABEL_35;
  }
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v11 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    v11 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v11 >= v29)
      goto LABEL_33;
    v17 = *(_QWORD *)(v6 + 8 * v11);
    ++v18;
    if (v17)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  void *v18;
  id v19;
  id v20;
  id v21;
  id v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  int64_t v31;
  int64_t v32;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<ParticipantHandleMap.ParticipantKind>);
  v3 = static _SetStorage.resize(original:capacity:move:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_42:
    *v1 = v4;
    return result;
  }
  v30 = v0;
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v6 = v2 + 56;
  if (v5 < 64)
    v7 = ~(-1 << v5);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(v2 + 56);
  v31 = (unint64_t)(v5 + 63) >> 6;
  v9 = v3 + 56;
  result = swift_retain();
  v11 = 0;
  while (1)
  {
    if (v8)
    {
      v13 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v14 = v13 | (v11 << 6);
      goto LABEL_24;
    }
    v15 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_43:
      __break(1u);
      goto LABEL_44;
    }
    if (v15 >= v31)
      goto LABEL_40;
    v16 = *(_QWORD *)(v6 + 8 * v15);
    ++v11;
    if (!v16)
    {
      v11 = v15 + 1;
      if (v15 + 1 >= v31)
        goto LABEL_40;
      v16 = *(_QWORD *)(v6 + 8 * v11);
      if (!v16)
      {
        v11 = v15 + 2;
        if (v15 + 2 >= v31)
          goto LABEL_40;
        v16 = *(_QWORD *)(v6 + 8 * v11);
        if (!v16)
          break;
      }
    }
LABEL_23:
    v8 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v11 << 6);
LABEL_24:
    v18 = *(void **)(*(_QWORD *)(v2 + 48) + 8 * v14);
    Hasher.init(_seed:)();
    if (v18)
    {
      v32 = v11;
      v19 = v18;
      if (objc_msgSend(v19, sel_acceptanceStatus) == (id)2
        && (v20 = objc_msgSend(v19, sel_userIdentity),
            v21 = objc_msgSend(v20, sel_userRecordID),
            v20,
            v21))
      {
        v22 = objc_msgSend(v21, sel_recordName);

        static String._unconditionallyBridgeFromObjectiveC(_:)();
        Hasher._combine(_:)(1u);
        v6 = v2 + 56;
        String.hash(into:)();
        swift_bridgeObjectRelease();
      }
      else
      {
        Hasher._combine(_:)(0);
      }

      v11 = v32;
    }
    else
    {
      String.hash(into:)();
    }
    result = Hasher._finalize()();
    v23 = -1 << *(_BYTE *)(v4 + 32);
    v24 = result & ~v23;
    v25 = v24 >> 6;
    if (((-1 << v24) & ~*(_QWORD *)(v9 + 8 * (v24 >> 6))) != 0)
    {
      v12 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)(v9 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_43;
        }
        v28 = v25 == v27;
        if (v25 == v27)
          v25 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v9 + 8 * v25);
      }
      while (v29 == -1);
      v12 = __clz(__rbit64(~v29)) + (v25 << 6);
    }
    *(_QWORD *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v12) = v18;
    ++*(_QWORD *)(v4 + 16);
  }
  v17 = v15 + 3;
  if (v17 >= v31)
  {
LABEL_40:
    result = swift_release_n();
    v1 = v30;
    goto LABEL_42;
  }
  v16 = *(_QWORD *)(v6 + 8 * v17);
  if (v16)
  {
    v11 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    v11 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v11 >= v31)
      goto LABEL_40;
    v16 = *(_QWORD *)(v6 + 8 * v11);
    ++v17;
    if (v16)
      goto LABEL_23;
  }
LABEL_44:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t result;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  int64_t v33;

  v1 = v0;
  v2 = type metadata accessor for AddressableMember();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<AddressableMember>);
  v7 = static _SetStorage.resize(original:capacity:move:)();
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v8;
    return result;
  }
  v9 = 1 << *(_BYTE *)(v6 + 32);
  v10 = *(_QWORD *)(v6 + 56);
  v31 = v0;
  v32 = v6 + 56;
  if (v9 < 64)
    v11 = ~(-1 << v9);
  else
    v11 = -1;
  v12 = v11 & v10;
  v33 = (unint64_t)(v9 + 63) >> 6;
  v13 = v7 + 56;
  result = swift_retain();
  v15 = 0;
  while (1)
  {
    if (v12)
    {
      v17 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v18 = v17 | (v15 << 6);
      goto LABEL_24;
    }
    v19 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v19 >= v33)
      goto LABEL_33;
    v20 = *(_QWORD *)(v32 + 8 * v19);
    ++v15;
    if (!v20)
    {
      v15 = v19 + 1;
      if (v19 + 1 >= v33)
        goto LABEL_33;
      v20 = *(_QWORD *)(v32 + 8 * v15);
      if (!v20)
      {
        v15 = v19 + 2;
        if (v19 + 2 >= v33)
          goto LABEL_33;
        v20 = *(_QWORD *)(v32 + 8 * v15);
        if (!v20)
          break;
      }
    }
LABEL_23:
    v12 = (v20 - 1) & v20;
    v18 = __clz(__rbit64(v20)) + (v15 << 6);
LABEL_24:
    v22 = *(_QWORD *)(v3 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v5, *(_QWORD *)(v6 + 48) + v22 * v18, v2);
    lazy protocol witness table accessor for type CKShareParticipant and conformance NSObject(&lazy protocol witness table cache variable for type AddressableMember and conformance AddressableMember, (uint64_t (*)(uint64_t))MEMORY[0x24BDD1FA8], MEMORY[0x24BDD1FB8]);
    result = dispatch thunk of Hashable._rawHashValue(seed:)();
    v23 = -1 << *(_BYTE *)(v8 + 32);
    v24 = result & ~v23;
    v25 = v24 >> 6;
    if (((-1 << v24) & ~*(_QWORD *)(v13 + 8 * (v24 >> 6))) != 0)
    {
      v16 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)(v13 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v28 = v25 == v27;
        if (v25 == v27)
          v25 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v13 + 8 * v25);
      }
      while (v29 == -1);
      v16 = __clz(__rbit64(~v29)) + (v25 << 6);
    }
    *(_QWORD *)(v13 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v8 + 48) + v16 * v22, v5, v2);
    ++*(_QWORD *)(v8 + 16);
  }
  v21 = v19 + 3;
  if (v21 >= v33)
  {
LABEL_33:
    result = swift_release_n();
    v1 = v31;
    goto LABEL_35;
  }
  v20 = *(_QWORD *)(v32 + 8 * v21);
  if (v20)
  {
    v15 = v21;
    goto LABEL_23;
  }
  while (1)
  {
    v15 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v15 >= v33)
      goto LABEL_33;
    v20 = *(_QWORD *)(v32 + 8 * v15);
    ++v21;
    if (v20)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  Swift::Int v19;
  id v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t *v28;

  v1 = v0;
  v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<CKShareParticipant>);
  v3 = static _SetStorage.resize(original:capacity:move:)();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v4;
    return result;
  }
  v28 = v0;
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v6 = v2 + 56;
  if (v5 < 64)
    v7 = ~(-1 << v5);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(v2 + 56);
  v9 = (unint64_t)(v5 + 63) >> 6;
  v10 = v3 + 56;
  result = swift_retain();
  v12 = 0;
  while (1)
  {
    if (v8)
    {
      v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v15 = v14 | (v12 << 6);
      goto LABEL_24;
    }
    v16 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v9)
      goto LABEL_33;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v12;
    if (!v17)
    {
      v12 = v16 + 1;
      if (v16 + 1 >= v9)
        goto LABEL_33;
      v17 = *(_QWORD *)(v6 + 8 * v12);
      if (!v17)
      {
        v12 = v16 + 2;
        if (v16 + 2 >= v9)
          goto LABEL_33;
        v17 = *(_QWORD *)(v6 + 8 * v12);
        if (!v17)
          break;
      }
    }
LABEL_23:
    v8 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v12 << 6);
LABEL_24:
    v19 = *(_QWORD *)(v4 + 40);
    v20 = *(id *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    result = NSObject._rawHashValue(seed:)(v19);
    v21 = -1 << *(_BYTE *)(v4 + 32);
    v22 = result & ~v21;
    v23 = v22 >> 6;
    if (((-1 << v22) & ~*(_QWORD *)(v10 + 8 * (v22 >> 6))) != 0)
    {
      v13 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)(v10 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v24 = 0;
      v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v26 = v23 == v25;
        if (v23 == v25)
          v23 = 0;
        v24 |= v26;
        v27 = *(_QWORD *)(v10 + 8 * v23);
      }
      while (v27 == -1);
      v13 = __clz(__rbit64(~v27)) + (v23 << 6);
    }
    *(_QWORD *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v13) = v20;
    ++*(_QWORD *)(v4 + 16);
  }
  v18 = v16 + 3;
  if (v18 >= v9)
  {
LABEL_33:
    result = swift_release_n();
    v1 = v28;
    goto LABEL_35;
  }
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v12 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    v12 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v12 >= v9)
      goto LABEL_33;
    v17 = *(_QWORD *)(v6 + 8 * v12);
    ++v18;
    if (v17)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t (*specialized Dictionary._Variant.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3))()
{
  _QWORD *v6;
  char isUniquelyReferenced_nonNull_native;

  v6 = malloc(0x58uLL);
  *a1 = v6;
  v6[8] = a3;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  swift_bridgeObjectRetain();
  v6[9] = specialized Dictionary._Variant.asNative.modify(v6);
  v6[10] = specialized _NativeDictionary.subscript.modify(v6 + 4, a2, a3, isUniquelyReferenced_nonNull_native);
  return Dictionary._Variant.subscript.modifyspecialized ;
}

{
  _QWORD *v6;
  char isUniquelyReferenced_nonNull_native;

  v6 = malloc(0x58uLL);
  *a1 = v6;
  v6[8] = a3;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  swift_bridgeObjectRetain();
  v6[9] = specialized Dictionary._Variant.asNative.modify(v6);
  v6[10] = specialized _NativeDictionary.subscript.modify(v6 + 4, a2, a3, isUniquelyReferenced_nonNull_native);
  return Dictionary._Variant.subscript.modifyspecialized ;
}

{
  _QWORD *v6;
  char isUniquelyReferenced_nonNull_native;

  v6 = malloc(0x58uLL);
  *a1 = v6;
  v6[8] = a3;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  swift_bridgeObjectRetain();
  v6[9] = specialized Dictionary._Variant.asNative.modify(v6);
  v6[10] = specialized _NativeDictionary.subscript.modify(v6 + 4, a2, a3, isUniquelyReferenced_nonNull_native);
  return Dictionary._Variant.subscript.modifyspecialized ;
}

void Dictionary._Variant.subscript.modifyspecialized (uint64_t a1)
{
  void *v1;
  void (*v2)(void *, _QWORD);

  v1 = *(void **)a1;
  v2 = *(void (**)(void *, _QWORD))(*(_QWORD *)a1 + 72);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 80))(*(_QWORD *)a1 + 32, 0);
  swift_bridgeObjectRelease();
  v2(v1, 0);
  free(v1);
}

void (*specialized _NativeDictionary.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3, char a4))(uint64_t **a1)
{
  uint64_t *v4;
  uint64_t *v5;
  char *v10;
  uint64_t v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  void (*result)(uint64_t **);

  v5 = v4;
  v10 = (char *)malloc(0x58uLL);
  *a1 = v10;
  *((_QWORD *)v10 + 7) = a3;
  *((_QWORD *)v10 + 8) = v5;
  *((_QWORD *)v10 + 6) = a2;
  v11 = *v5;
  v13 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  v10[80] = v12 & 1;
  v14 = *(_QWORD *)(v11 + 16);
  v15 = (v12 & 1) == 0;
  v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
  }
  else
  {
    v17 = v12;
    v18 = *(_QWORD *)(v11 + 24);
    if (v18 >= v16 && (a4 & 1) != 0)
    {
LABEL_7:
      *((_QWORD *)v10 + 9) = v13;
      if ((v17 & 1) != 0)
      {
LABEL_8:
        v19 = *(_QWORD *)(*v5 + 56) + 48 * v13;
        v20 = *(_QWORD *)v19;
        v21 = *(_OWORD *)(v19 + 8);
        v22 = *(_OWORD *)(v19 + 24);
        v23 = *(_QWORD *)(v19 + 40);
LABEL_12:
        *(_QWORD *)v10 = v20;
        *(_OWORD *)(v10 + 8) = v21;
        *(_OWORD *)(v10 + 24) = v22;
        *((_QWORD *)v10 + 5) = v23;
        return _NativeDictionary.subscript.modifyspecialized ;
      }
LABEL_11:
      v20 = 0;
      v23 = 0;
      v21 = 0uLL;
      v22 = 0uLL;
      goto LABEL_12;
    }
    if (v18 >= v16 && (a4 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v16, a4 & 1);
    v24 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if ((v17 & 1) == (v25 & 1))
    {
      v13 = v24;
      *((_QWORD *)v10 + 9) = v24;
      if ((v17 & 1) != 0)
        goto LABEL_8;
      goto LABEL_11;
    }
  }
  result = (void (*)(uint64_t **))KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  uint64_t *v4;
  uint64_t *v5;
  _QWORD *v10;
  uint64_t v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  void (*result)(uint64_t **);

  v5 = v4;
  v10 = malloc(0x30uLL);
  *a1 = v10;
  v10[2] = a3;
  v10[3] = v5;
  v10[1] = a2;
  v11 = *v5;
  v13 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  *((_BYTE *)v10 + 40) = v12 & 1;
  v14 = *(_QWORD *)(v11 + 16);
  v15 = (v12 & 1) == 0;
  v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
  }
  else
  {
    v17 = v12;
    v18 = *(_QWORD *)(v11 + 24);
    if (v18 >= v16 && (a4 & 1) != 0)
    {
LABEL_7:
      v10[4] = v13;
      if ((v17 & 1) != 0)
      {
LABEL_8:
        v19 = *(_QWORD *)(*(_QWORD *)(*v5 + 56) + 8 * v13);
LABEL_12:
        *v10 = v19;
        return _NativeDictionary.subscript.modifyspecialized ;
      }
LABEL_11:
      v19 = 0;
      goto LABEL_12;
    }
    if (v18 >= v16 && (a4 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v16, a4 & 1);
    v20 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if ((v17 & 1) == (v21 & 1))
    {
      v13 = v20;
      v10[4] = v20;
      if ((v17 & 1) != 0)
        goto LABEL_8;
      goto LABEL_11;
    }
  }
  result = (void (*)(uint64_t **))KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void _NativeDictionary.subscript.modifyspecialized (uint64_t **a1)
{
  uint64_t *v1;

  v1 = *a1;
  specialized $defer #1 <A, B>() in _NativeDictionary.subscript.modify(*a1, *((_BYTE *)*a1 + 80), (uint64_t *)(*a1)[8], (*a1)[9], (*a1)[6], (*a1)[7]);
  outlined consume of ParticipantPresenceCoordinator.ConnectionManagerStore.SharedConnection?(*v1, (void *)v1[1]);
  free(v1);
}

{
  uint64_t *v1;

  v1 = *a1;
  specialized $defer #1 <A, B>() in _NativeDictionary.subscript.modify(*a1, *((_BYTE *)*a1 + 40), (uint64_t *)(*a1)[3], (*a1)[4], (*a1)[1], (*a1)[2]);
  swift_bridgeObjectRelease();
  free(v1);
}

void (*specialized _NativeDictionary.subscript.modify(_QWORD *a1, uint64_t a2, uint64_t a3, char a4))(uint64_t *a1)
{
  uint64_t *v4;
  uint64_t *v5;
  _QWORD *v10;
  uint64_t v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  void (*result)(uint64_t *);

  v5 = v4;
  v10 = malloc(0x38uLL);
  *a1 = v10;
  v10[3] = a3;
  v10[4] = v5;
  v10[2] = a2;
  v11 = *v5;
  v13 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  *((_BYTE *)v10 + 48) = v12 & 1;
  v14 = *(_QWORD *)(v11 + 16);
  v15 = (v12 & 1) == 0;
  v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
  }
  else
  {
    v17 = v12;
    v18 = *(_QWORD *)(v11 + 24);
    if (v18 >= v16 && (a4 & 1) != 0)
    {
LABEL_7:
      v10[5] = v13;
      if ((v17 & 1) != 0)
      {
LABEL_8:
        v19 = (uint64_t *)(*(_QWORD *)(*v5 + 56) + 16 * v13);
        v20 = *v19;
        v21 = v19[1];
LABEL_12:
        *v10 = v20;
        v10[1] = v21;
        return _NativeDictionary.subscript.modifyspecialized ;
      }
LABEL_11:
      v20 = 0;
      v21 = 0;
      goto LABEL_12;
    }
    if (v18 >= v16 && (a4 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v16, a4 & 1);
    v22 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if ((v17 & 1) == (v23 & 1))
    {
      v13 = v22;
      v10[5] = v22;
      if ((v17 & 1) != 0)
        goto LABEL_8;
      goto LABEL_11;
    }
  }
  result = (void (*)(uint64_t *))KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void _NativeDictionary.subscript.modifyspecialized (uint64_t *a1)
{
  id *v1;

  v1 = (id *)*a1;
  specialized $defer #1 <A, B>() in _NativeDictionary.subscript.modify(*a1, *(_BYTE *)(*a1 + 48), *(uint64_t **)(*a1 + 32), *(_QWORD *)(*a1 + 40), *(_QWORD *)(*a1 + 16), *(_QWORD *)(*a1 + 24));

  free(v1);
}

uint64_t (*specialized Dictionary._Variant.asNative.modify(_QWORD *a1))(uint64_t result)
{
  _QWORD *v1;

  *a1 = *v1;
  a1[1] = v1;
  *v1 = 0x8000000000000000;
  return Dictionary._Variant.asNative.modifyspecialized ;
}

uint64_t Dictionary._Variant.asNative.modifyspecialized (uint64_t result)
{
  **(_QWORD **)(result + 8) = *(_QWORD *)result;
  return result;
}

uint64_t (*specialized Dictionary._Variant.asNative.modify(_QWORD *a1))()
{
  _QWORD *v1;

  *a1 = *v1;
  a1[1] = v1;
  *v1 = 0x8000000000000000;
  return Dictionary._Variant.asNative.modifyspecialized ;
}

uint64_t specialized $defer #1 <A, B>() in _NativeDictionary.subscript.modify(uint64_t *a1, char a2, uint64_t *a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  __int128 v15;
  __int128 v17;
  __int128 v18;
  __int128 v19;

  v9 = *a1;
  v8 = (void *)a1[1];
  v10 = a1[2];
  v11 = a1[3];
  v12 = a1[4];
  v13 = a1[5];
  if (v8)
  {
    *(_QWORD *)&v17 = *a1;
    *((_QWORD *)&v17 + 1) = v8;
    *(_QWORD *)&v18 = v10;
    *((_QWORD *)&v18 + 1) = v11;
    *(_QWORD *)&v19 = v12;
    *((_QWORD *)&v19 + 1) = v13;
    if ((a2 & 1) != 0)
    {
      v14 = (_OWORD *)(*(_QWORD *)(*a3 + 56) + 48 * a4);
      v15 = v18;
      *v14 = v17;
      v14[1] = v15;
      v14[2] = v19;
    }
    else
    {
      specialized _NativeDictionary._insert(at:key:value:)(a4, a5, a6, &v17, (_QWORD *)*a3);
      swift_bridgeObjectRetain();
    }
  }
  else if ((a2 & 1) != 0)
  {
    swift_arrayDestroy();
    specialized _NativeDictionary._delete(at:)(a4, *a3);
  }
  return outlined copy of ParticipantPresenceCoordinator.ConnectionManagerStore.SharedConnection?(v9, v8);
}

{
  uint64_t v8;

  v8 = *a1;
  if (*a1)
  {
    if ((a2 & 1) != 0)
    {
      *(_QWORD *)(*(_QWORD *)(*a3 + 56) + 8 * a4) = v8;
    }
    else
    {
      specialized _NativeDictionary._insert(at:key:value:)(a4, a5, a6, v8, (_QWORD *)*a3);
      swift_bridgeObjectRetain();
    }
  }
  else if ((a2 & 1) != 0)
  {
    swift_arrayDestroy();
    specialized _NativeDictionary._delete(at:)(a4, *a3);
  }
  return swift_bridgeObjectRetain();
}

{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;

  v8 = *a1;
  v9 = a1[1];
  v10 = a1[2];
  v11 = a1[3];
  v12 = a1[4];
  v13 = a1[5];
  v14 = a1[6];
  if (v14)
  {
    *(_QWORD *)&v18 = *a1;
    *((_QWORD *)&v18 + 1) = v9;
    *(_QWORD *)&v19 = v10;
    *((_QWORD *)&v19 + 1) = v11;
    *(_QWORD *)&v20 = v12;
    *((_QWORD *)&v20 + 1) = v13;
    v21 = v14;
    if ((a2 & 1) != 0)
    {
      v15 = *(_QWORD *)(*a3 + 56) + 56 * a4;
      v16 = v19;
      *(_OWORD *)v15 = v18;
      *(_OWORD *)(v15 + 16) = v16;
      *(_OWORD *)(v15 + 32) = v20;
      *(_QWORD *)(v15 + 48) = v21;
    }
    else
    {
      specialized _NativeDictionary._insert(at:key:value:)(a4, a5, a6, (uint64_t)&v18, (_QWORD *)*a3);
      swift_bridgeObjectRetain();
    }
  }
  else if ((a2 & 1) != 0)
  {
    swift_arrayDestroy();
    specialized _NativeDictionary._delete(at:)(a4, *a3);
  }
  return outlined copy of PresenceUpdateMessage?(v8, v9, v10, v11, v12, v13, v14);
}

id specialized $defer #1 <A, B>() in _NativeDictionary.subscript.modify(uint64_t a1, char a2, uint64_t *a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v8;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  void *v14;

  v8 = *(void **)a1;
  if (!*(_QWORD *)a1)
  {
    if ((a2 & 1) == 0)
      return v8;
    v14 = 0;
    swift_arrayDestroy();
    specialized _NativeDictionary._delete(at:)(a4, *a3);
LABEL_7:
    v8 = v14;
    return v8;
  }
  v10 = *(_QWORD *)(a1 + 8);
  v11 = (_QWORD *)*a3;
  if ((a2 & 1) == 0)
  {
    v14 = *(void **)a1;
    specialized _NativeDictionary._insert(at:key:value:)(a4, a5, a6, (uint64_t)v8, v10, v11);
    swift_bridgeObjectRetain();
    goto LABEL_7;
  }
  v12 = (_QWORD *)(v11[7] + 16 * a4);
  *v12 = v8;
  v12[1] = v10;
  return v8;
}

unint64_t specialized _NativeDictionary._delete(at:)(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  Swift::Int v11;
  unint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  _OWORD *v15;
  uint64_t v16;
  __int128 *v17;
  __int128 *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        v11 = Hasher._finalize()();
        result = swift_bridgeObjectRelease();
        v12 = v11 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v12 < v8)
            goto LABEL_5;
        }
        else if (v12 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v12)
        {
LABEL_11:
          v13 = *(_QWORD *)(a2 + 48);
          v14 = (_OWORD *)(v13 + 16 * v3);
          v15 = (_OWORD *)(v13 + 16 * v6);
          if (v3 != v6 || v14 >= v15 + 1)
            *v14 = *v15;
          v16 = *(_QWORD *)(a2 + 56);
          v17 = (__int128 *)(v16 + 48 * v3);
          v18 = (__int128 *)(v16 + 48 * v6);
          if (v3 != v6 || (v3 = v6, v17 >= v18 + 3))
          {
            v9 = *v18;
            v10 = v18[2];
            v17[1] = v18[1];
            v17[2] = v10;
            *v17 = v9;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v19 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v20 = *v19;
    v21 = (-1 << v3) - 1;
  }
  else
  {
    v19 = (uint64_t *)(v4 + 8 * (result >> 6));
    v21 = *v19;
    v20 = (-1 << result) - 1;
  }
  *v19 = v21 & v20;
  v22 = *(_QWORD *)(a2 + 16);
  v23 = __OFSUB__(v22, 1);
  v24 = v22 - 1;
  if (v23)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v24;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  Swift::Int v9;
  unint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        v9 = Hasher._finalize()();
        result = swift_bridgeObjectRelease();
        v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8)
            goto LABEL_5;
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          v11 = *(_QWORD *)(a2 + 48);
          v12 = (_OWORD *)(v11 + 16 * v3);
          v13 = (_OWORD *)(v11 + 16 * v6);
          if (v3 != v6 || v12 >= v13 + 1)
            *v12 = *v13;
          v14 = *(_QWORD *)(a2 + 56);
          v15 = (_OWORD *)(v14 + 16 * v3);
          v16 = (_OWORD *)(v14 + 16 * v6);
          if (v3 != v6 || (v3 = v6, v15 >= v16 + 1))
          {
            *v15 = *v16;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v18 = *v17;
    v19 = (-1 << v3) - 1;
  }
  else
  {
    v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    v19 = *v17;
    v18 = (-1 << result) - 1;
  }
  *v17 = v19 & v18;
  v20 = *(_QWORD *)(a2 + 16);
  v21 = __OFSUB__(v20, 1);
  v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  Swift::Int v9;
  unint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        v9 = Hasher._finalize()();
        result = swift_bridgeObjectRelease();
        v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8)
            goto LABEL_5;
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          v11 = *(_QWORD *)(a2 + 48);
          v12 = (_OWORD *)(v11 + 16 * v3);
          v13 = (_OWORD *)(v11 + 16 * v6);
          if (v3 != v6 || v12 >= v13 + 1)
            *v12 = *v13;
          v14 = *(_QWORD *)(a2 + 56);
          v15 = (_QWORD *)(v14 + 8 * v3);
          v16 = (_QWORD *)(v14 + 8 * v6);
          if (v3 != v6 || (v3 = v6, v15 >= v16 + 1))
          {
            *v15 = *v16;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v18 = *v17;
    v19 = (-1 << v3) - 1;
  }
  else
  {
    v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    v19 = *v17;
    v18 = (-1 << result) - 1;
  }
  *v17 = v19 & v18;
  v20 = *(_QWORD *)(a2 + 16);
  v21 = __OFSUB__(v20, 1);
  v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  Swift::Int v12;
  unint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  uint64_t v17;
  unint64_t v18;
  __int128 *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        v12 = Hasher._finalize()();
        result = swift_bridgeObjectRelease();
        v13 = v12 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v13 < v8)
            goto LABEL_5;
        }
        else if (v13 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v13)
        {
LABEL_11:
          v14 = *(_QWORD *)(a2 + 48);
          v15 = (_OWORD *)(v14 + 16 * v3);
          v16 = (_OWORD *)(v14 + 16 * v6);
          if (v3 != v6 || v15 >= v16 + 1)
            *v15 = *v16;
          v17 = *(_QWORD *)(a2 + 56);
          v18 = v17 + 56 * v3;
          v19 = (__int128 *)(v17 + 56 * v6);
          if (v3 != v6 || (v3 = v6, v18 >= (unint64_t)v19 + 56))
          {
            v9 = *v19;
            v10 = v19[1];
            v11 = v19[2];
            *(_QWORD *)(v18 + 48) = *((_QWORD *)v19 + 6);
            *(_OWORD *)(v18 + 16) = v10;
            *(_OWORD *)(v18 + 32) = v11;
            *(_OWORD *)v18 = v9;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v21 = *v20;
    v22 = (-1 << v3) - 1;
  }
  else
  {
    v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    v22 = *v20;
    v21 = (-1 << result) - 1;
  }
  *v20 = v22 & v21;
  v23 = *(_QWORD *)(a2 + 16);
  v24 = __OFSUB__(v23, 1);
  v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

uint64_t specialized Dictionary._Variant.removeValue(forKey:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  unint64_t v8;
  char v9;
  uint64_t result;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;

  v4 = v3;
  swift_bridgeObjectRetain();
  v8 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  LOBYTE(a2) = v9;
  result = swift_bridgeObjectRelease();
  if ((a2 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v12 = *v4;
    v20 = *v4;
    *v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      specialized _NativeDictionary.copy()();
      v12 = v20;
    }
    swift_bridgeObjectRelease();
    v13 = *(_QWORD *)(v12 + 56) + 48 * v8;
    v14 = *(_QWORD *)v13;
    v18 = *(_OWORD *)(v13 + 24);
    v19 = *(_OWORD *)(v13 + 8);
    v15 = *(_QWORD *)(v13 + 40);
    specialized _NativeDictionary._delete(at:)(v8, v12);
    *v4 = v12;
    result = swift_bridgeObjectRelease();
    v17 = v18;
    v16 = v19;
  }
  else
  {
    v14 = 0;
    v15 = 0;
    v16 = 0uLL;
    v17 = 0uLL;
  }
  *(_QWORD *)a3 = v14;
  *(_OWORD *)(a3 + 8) = v16;
  *(_OWORD *)(a3 + 24) = v17;
  *(_QWORD *)(a3 + 40) = v15;
  return result;
}

uint64_t specialized Dictionary._Variant.removeValue(forKey:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v6;
  char v7;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v3 = v2;
  swift_bridgeObjectRetain();
  v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  LOBYTE(a2) = v7;
  swift_bridgeObjectRelease();
  if ((a2 & 1) == 0)
    return 0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v9 = *v3;
  v12 = *v3;
  *v3 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    specialized _NativeDictionary.copy()();
    v9 = v12;
  }
  swift_bridgeObjectRelease();
  v10 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 16 * v6);
  specialized _NativeDictionary._delete(at:)(v6, v9);
  *v3 = v9;
  swift_bridgeObjectRelease();
  return v10;
}

{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v6;
  char v7;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v3 = v2;
  swift_bridgeObjectRetain();
  v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  LOBYTE(a2) = v7;
  swift_bridgeObjectRelease();
  if ((a2 & 1) == 0)
    return 0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v9 = *v3;
  v12 = *v3;
  *v3 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    specialized _NativeDictionary.copy()();
    v9 = v12;
  }
  swift_bridgeObjectRelease();
  v10 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v6);
  specialized _NativeDictionary._delete(at:)(v6, v9);
  *v3 = v9;
  swift_bridgeObjectRelease();
  return v10;
}

{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v6;
  char v7;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v3 = v2;
  swift_bridgeObjectRetain();
  v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  LOBYTE(a2) = v7;
  swift_bridgeObjectRelease();
  if ((a2 & 1) == 0)
    return 0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v9 = *v3;
  v12 = *v3;
  *v3 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    specialized _NativeDictionary.copy()();
    v9 = v12;
  }
  swift_bridgeObjectRelease();
  v10 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v6);
  specialized _NativeDictionary._delete(at:)(v6, v9);
  *v3 = v9;
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t specialized Set._Variant.remove(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, unint64_t, uint64_t);
  unint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t *v21;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v23;
  unint64_t v24;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v3 = v2;
  v6 = type metadata accessor for Participant();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v3;
  lazy protocol witness table accessor for type CKShareParticipant and conformance NSObject(&lazy protocol witness table cache variable for type Participant and conformance Participant, v11, MEMORY[0x24BDD1F10]);
  swift_bridgeObjectRetain();
  v29 = a1;
  v12 = dispatch thunk of Hashable._rawHashValue(seed:)();
  v13 = -1 << *(_BYTE *)(v10 + 32);
  v14 = v12 & ~v13;
  if (((*(_QWORD *)(v10 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) != 0)
  {
    v27 = v3;
    v28 = a2;
    v15 = ~v13;
    v16 = *(_QWORD *)(v7 + 72);
    v30 = v7;
    v17 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    while (1)
    {
      v18 = v16 * v14;
      v17(v9, *(_QWORD *)(v10 + 48) + v16 * v14, v6);
      lazy protocol witness table accessor for type CKShareParticipant and conformance NSObject(&lazy protocol witness table cache variable for type Participant and conformance Participant, (uint64_t (*)(uint64_t))MEMORY[0x24BDD1F00], MEMORY[0x24BDD1F18]);
      v19 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v30 + 8))(v9, v6);
      if ((v19 & 1) != 0)
        break;
      v14 = (v14 + 1) & v15;
      if (((*(_QWORD *)(v10 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        v20 = 1;
        a2 = v28;
        v7 = v30;
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(a2, v20, 1, v6);
      }
    }
    swift_bridgeObjectRelease();
    v21 = v27;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v23 = *v21;
    v31 = *v21;
    *v21 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      specialized _NativeSet.copy()((uint64_t (*)(_QWORD))MEMORY[0x24BDD1F00], &demangling cache variable for type metadata for _SetStorage<Participant>);
      v23 = v31;
    }
    v24 = *(_QWORD *)(v23 + 48) + v18;
    v7 = v30;
    a2 = v28;
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v30 + 32))(v28, v24, v6);
    specialized _NativeSet._delete(at:)(v14);
    *v21 = v31;
    swift_bridgeObjectRelease();
    v20 = 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    v20 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(a2, v20, 1, v6);
}

uint64_t specialized Set._Variant.remove(_:)(void *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  id v5;
  char v6;
  uint64_t v7;
  Swift::Int v8;
  Swift::Int v9;
  uint64_t v10;
  unint64_t v11;
  id v12;
  char v13;
  uint64_t v14;
  id v15;
  char v16;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v18;
  uint64_t v20;

  v2 = v1;
  v4 = *v1;
  if ((*v1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    v5 = a1;
    v6 = __CocoaSet.contains(_:)();

    if ((v6 & 1) != 0)
    {
      v7 = specialized Set._Variant._migrateToNative(_:removing:)();
      swift_bridgeObjectRelease();
      return v7;
    }
LABEL_12:
    swift_bridgeObjectRelease();
    return 0;
  }
  v8 = *(_QWORD *)(v4 + 40);
  swift_bridgeObjectRetain();
  v9 = NSObject._rawHashValue(seed:)(v8);
  v10 = -1 << *(_BYTE *)(v4 + 32);
  v11 = v9 & ~v10;
  if (((*(_QWORD *)(v4 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) == 0)
    goto LABEL_12;
  type metadata accessor for CKShareParticipant(0, (unint64_t *)&lazy cache variable for type metadata for CKShareParticipant);
  v12 = *(id *)(*(_QWORD *)(v4 + 48) + 8 * v11);
  v13 = static NSObject.== infix(_:_:)();

  if ((v13 & 1) == 0)
  {
    v14 = ~v10;
    do
    {
      v11 = (v11 + 1) & v14;
      if (((*(_QWORD *)(v4 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) == 0)
        goto LABEL_12;
      v15 = *(id *)(*(_QWORD *)(v4 + 48) + 8 * v11);
      v16 = static NSObject.== infix(_:_:)();

    }
    while ((v16 & 1) == 0);
  }
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v18 = *v2;
  v20 = *v2;
  *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    specialized _NativeSet.copy()();
    v18 = v20;
  }
  v7 = *(_QWORD *)(*(_QWORD *)(v18 + 48) + 8 * v11);
  specialized _NativeSet._delete(at:)(v11);
  *v2 = v20;
  swift_bridgeObjectRelease();
  return v7;
}

{
  uint64_t *v1;
  uint64_t v3;
  id v4;
  uint64_t v5;
  Swift::Int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  SEL *v10;
  void *v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  SEL *v24;
  id v25;
  uint64_t v26;
  void *v27;
  id v28;
  id v29;
  id v30;
  uint64_t v31;
  void *v32;
  char v33;
  uint64_t v34;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v36;
  uint64_t *v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;

  v3 = *v1;
  Hasher.init(_seed:)();
  if (a1)
  {
    swift_bridgeObjectRetain();
    v4 = a1;
    CKShareParticipant.participantIdentifier.getter();
    if (v5)
    {
      Hasher._combine(_:)(1u);
      String.hash(into:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      Hasher._combine(_:)(0);
    }

  }
  else
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
  }
  v6 = Hasher._finalize()();
  v7 = -1 << *(_BYTE *)(v3 + 32);
  v8 = v6 & ~v7;
  if (((*(_QWORD *)(v3 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
  {
LABEL_41:
    swift_bridgeObjectRelease();
    return 1;
  }
  v9 = ~v7;
  v10 = (SEL *)&unk_251BCB000;
  v40 = a1;
  v38 = v1;
  v39 = ~v7;
  while (1)
  {
    v11 = *(void **)(*(_QWORD *)(v3 + 48) + 8 * v8);
    if (v11)
    {
      v12 = v11;
      if (objc_msgSend(v12, v10[247]) != (id)2
        || (v13 = objc_msgSend(v12, sel_userIdentity),
            v14 = objc_msgSend(v13, sel_userRecordID),
            v13,
            !v14))
      {

LABEL_17:
        goto LABEL_10;
      }
      v15 = objc_msgSend(v14, sel_recordName);

      if (!a1)
        goto LABEL_17;
    }
    else if (!a1)
    {
      goto LABEL_43;
    }
    v16 = a1;
    if (objc_msgSend(v16, v10[247]) != (id)2
      || (v17 = objc_msgSend(v16, sel_userIdentity),
          v18 = objc_msgSend(v17, sel_userRecordID),
          v17,
          !v18))
    {

      goto LABEL_10;
    }
    v19 = objc_msgSend(v18, sel_recordName);

    if (!v11)
      goto LABEL_10;
    v20 = v16;
    v21 = v11;
    if (objc_msgSend(v21, v10[247]) == (id)2)
    {
      v22 = objc_msgSend(v21, sel_userIdentity);
      v23 = objc_msgSend(v22, sel_userRecordID);

      if (v23)
      {
        v24 = v10;
        v25 = objc_msgSend(v23, sel_recordName);

        v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v23 = v27;

        v10 = v24;
      }
      else
      {
        v26 = 0;
      }
    }
    else
    {
      v26 = 0;
      v23 = 0;
    }
    if (objc_msgSend(v20, v10[247], v38) != (id)2)
    {
      v31 = 0;
      v29 = 0;
      if (!v23)
        break;
      goto LABEL_33;
    }
    v28 = objc_msgSend(v20, sel_userIdentity);
    v29 = objc_msgSend(v28, sel_userRecordID);

    if (v29)
    {
      v30 = objc_msgSend(v29, sel_recordName);

      v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v29 = v32;

      if (!v23)
        break;
      goto LABEL_33;
    }
    v31 = 0;
    if (!v23)
      break;
LABEL_33:
    if (v29)
    {
      if (v26 == v31 && v23 == v29)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

LABEL_43:
        swift_bridgeObjectRelease();
        goto LABEL_44;
      }
      v33 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      v9 = v39;
      a1 = v40;
      v10 = (SEL *)&unk_251BCB000;
      if ((v33 & 1) != 0)
        goto LABEL_43;
    }
    else
    {
      swift_bridgeObjectRelease();

      v9 = v39;
      a1 = v40;
      v10 = (SEL *)&unk_251BCB000;
    }
LABEL_10:
    v8 = (v8 + 1) & v9;
    if (((*(_QWORD *)(v3 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
      goto LABEL_41;
  }

  v9 = v39;
  a1 = v40;
  if (v29)
  {

    swift_bridgeObjectRelease();
    v10 = (SEL *)&unk_251BCB000;
    goto LABEL_10;
  }
  swift_bridgeObjectRelease();

LABEL_44:
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v36 = *v38;
  v41 = *v38;
  *v38 = 0x8000000000000000;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    specialized _NativeSet.copy()();
    v36 = v41;
  }
  v34 = *(_QWORD *)(*(_QWORD *)(v36 + 48) + 8 * v8);
  specialized _NativeSet._delete(at:)(v8);
  *v38 = v41;
  swift_bridgeObjectRelease();
  return v34;
}

uint64_t specialized Set._Variant._migrateToNative(_:removing:)()
{
  Swift::Int *v0;
  Swift::Int *v1;
  uint64_t v2;
  uint64_t v3;
  Swift::Int v4;
  Swift::Int v5;
  Swift::Int v6;
  uint64_t v7;
  unint64_t v8;
  id v9;
  char v10;
  uint64_t v11;
  id v12;
  char v13;
  uint64_t v14;
  uint64_t result;
  Swift::Int v16;

  v1 = v0;
  swift_bridgeObjectRelease();
  v2 = __CocoaSet.count.getter();
  v3 = swift_unknownObjectRetain();
  v4 = specialized _NativeSet.init(_:capacity:)(v3, v2);
  v16 = v4;
  v5 = *(_QWORD *)(v4 + 40);
  swift_retain();
  v6 = NSObject._rawHashValue(seed:)(v5);
  v7 = -1 << *(_BYTE *)(v4 + 32);
  v8 = v6 & ~v7;
  if (((*(_QWORD *)(v4 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0)
  {
    type metadata accessor for CKShareParticipant(0, (unint64_t *)&lazy cache variable for type metadata for CKShareParticipant);
    v9 = *(id *)(*(_QWORD *)(v4 + 48) + 8 * v8);
    v10 = static NSObject.== infix(_:_:)();

    if ((v10 & 1) != 0)
    {
LABEL_6:
      swift_release();
      v14 = *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v8);
      specialized _NativeSet._delete(at:)(v8);
      if ((static NSObject.== infix(_:_:)() & 1) != 0)
      {
        *v1 = v16;
        return v14;
      }
      __break(1u);
    }
    else
    {
      v11 = ~v7;
      while (1)
      {
        v8 = (v8 + 1) & v11;
        if (((*(_QWORD *)(v4 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
          break;
        v12 = *(id *)(*(_QWORD *)(v4 + 48) + 8 * v8);
        v13 = static NSObject.== infix(_:_:)();

        if ((v13 & 1) != 0)
          goto LABEL_6;
      }
    }
    swift_release();
    __break(1u);
  }
  result = swift_release();
  __break(1u);
  return result;
}

uint64_t specialized _NativeSet._delete(at:)(int64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t *v25;
  void (*v26)(char *, unint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;

  v3 = type metadata accessor for Participant();
  v28 = *(_QWORD *)(v3 - 8);
  result = MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v8 = *v1 + 56;
  v9 = -1 << *(_BYTE *)(*v1 + 32);
  v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(_QWORD *)(v8 + 8 * (v10 >> 6))) != 0)
  {
    v25 = v1;
    v11 = ~v9;
    swift_retain();
    v12 = _HashTable.previousHole(before:)();
    v27 = v8;
    if ((*(_QWORD *)(v8 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      v13 = (v12 + 1) & v11;
      v14 = *(_QWORD *)(v28 + 72);
      v26 = *(void (**)(char *, unint64_t, uint64_t))(v28 + 16);
      do
      {
        v15 = v14 * v10;
        v26(v6, *(_QWORD *)(v7 + 48) + v14 * v10, v3);
        lazy protocol witness table accessor for type CKShareParticipant and conformance NSObject(&lazy protocol witness table cache variable for type Participant and conformance Participant, (uint64_t (*)(uint64_t))MEMORY[0x24BDD1F00], MEMORY[0x24BDD1F10]);
        v16 = dispatch thunk of Hashable._rawHashValue(seed:)();
        (*(void (**)(char *, uint64_t))(v28 + 8))(v6, v3);
        v17 = v16 & v11;
        if (a1 >= (uint64_t)v13)
        {
          if (v17 < v13 || a1 < (uint64_t)v17)
            goto LABEL_6;
        }
        else if (v17 < v13 && a1 < (uint64_t)v17)
        {
          goto LABEL_6;
        }
        v20 = v14 * a1;
        if (v14 * a1 < v15 || *(_QWORD *)(v7 + 48) + v14 * a1 >= (unint64_t)(*(_QWORD *)(v7 + 48) + v15 + v14))
        {
          swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          a1 = v10;
          if (v20 == v15)
            goto LABEL_6;
          swift_arrayInitWithTakeBackToFront();
        }
        a1 = v10;
LABEL_6:
        v10 = (v10 + 1) & v11;
      }
      while (((*(_QWORD *)(v27 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    *(_QWORD *)(v27 + (((unint64_t)a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a1) - 1;
    result = swift_release();
    v1 = v25;
  }
  else
  {
    *(_QWORD *)(v8 + (((unint64_t)a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a1) - 1;
  }
  v21 = *v1;
  v22 = *(_QWORD *)(*v1 + 16);
  v23 = __OFSUB__(v22, 1);
  v24 = v22 - 1;
  if (v23)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v21 + 16) = v24;
    ++*(_DWORD *)(v21 + 36);
  }
  return result;
}

unint64_t specialized _NativeSet._delete(at:)(unint64_t result)
{
  uint64_t *v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  Swift::Int v10;
  id v11;
  Swift::Int v12;
  Swift::Int v13;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;

  v2 = result;
  v3 = *v1;
  v4 = *v1 + 56;
  v5 = -1 << *(_BYTE *)(*v1 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    swift_retain();
    v8 = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v9 = (v8 + 1) & v7;
      do
      {
        v10 = *(_QWORD *)(v3 + 40);
        v11 = *(id *)(*(_QWORD *)(v3 + 48) + 8 * v6);
        v12 = NSObject._rawHashValue(seed:)(v10);

        v13 = v12 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v13 >= v9 && v2 >= v13)
          {
LABEL_16:
            v16 = *(_QWORD *)(v3 + 48);
            v17 = (_QWORD *)(v16 + 8 * v2);
            v18 = (_QWORD *)(v16 + 8 * v6);
            if (v2 != v6 || (v2 = v6, v17 >= v18 + 1))
            {
              *v17 = *v18;
              v2 = v6;
            }
          }
        }
        else if (v13 >= v9 || v2 >= v13)
        {
          goto LABEL_16;
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(_QWORD *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    result = swift_release();
  }
  else
  {
    *(_QWORD *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  v19 = *(_QWORD *)(v3 + 16);
  v20 = __OFSUB__(v19, 1);
  v21 = v19 - 1;
  if (v20)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v3 + 16) = v21;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

{
  uint64_t *v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  SEL *v10;
  void *v11;
  id v12;
  id v13;
  id v14;
  id v15;
  Swift::Int v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  unint64_t v24;

  v2 = result;
  v3 = *v1;
  v4 = *v1 + 56;
  v5 = -1 << *(_BYTE *)(*v1 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    swift_retain();
    v8 = _HashTable.previousHole(before:)();
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v9 = (v8 + 1) & v7;
      v10 = (SEL *)&unk_251BCB000;
      v24 = v9;
      do
      {
        v11 = *(void **)(*(_QWORD *)(v3 + 48) + 8 * v6);
        Hasher.init(_seed:)();
        if (v11)
        {
          v12 = v11;
          if (objc_msgSend(v12, v10[247]) == (id)2
            && (v13 = objc_msgSend(v12, sel_userIdentity),
                v14 = objc_msgSend(v13, sel_userRecordID),
                v13,
                v14))
          {
            v15 = objc_msgSend(v14, sel_recordName);

            static String._unconditionallyBridgeFromObjectiveC(_:)();
            Hasher._combine(_:)(1u);
            v9 = v24;
            String.hash(into:)();
            v10 = (SEL *)&unk_251BCB000;
            swift_bridgeObjectRelease();
          }
          else
          {
            Hasher._combine(_:)(0);
          }
        }
        else
        {
          String.hash(into:)();
          v12 = 0;
        }
        v16 = Hasher._finalize()();

        v17 = v16 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v17 < v9)
            goto LABEL_5;
        }
        else if (v17 >= v9)
        {
          goto LABEL_17;
        }
        if (v2 >= (uint64_t)v17)
        {
LABEL_17:
          v18 = *(_QWORD *)(v3 + 48);
          v19 = (_QWORD *)(v18 + 8 * v2);
          v20 = (_QWORD *)(v18 + 8 * v6);
          if (v2 != v6 || (v2 = v6, v19 >= v20 + 1))
          {
            *v19 = *v20;
            v2 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(_QWORD *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    result = swift_release();
  }
  else
  {
    *(_QWORD *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  v21 = *(_QWORD *)(v3 + 16);
  v22 = __OFSUB__(v21, 1);
  v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v3 + 16) = v23;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    v6 = a4 + 8 * a1 + 32;
    v7 = a3 + 8 * v5;
    if (v6 >= v7 || v6 + 8 * v5 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      swift_arrayInitWithCopy();
      return v7;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 8 * a1 + 32;
    v6 = a3 + 8 * v4;
    if (v5 >= v6 || v5 + 8 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Task<(), Never>);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 24 * a1 + 32;
    v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, ParticipantHandleMap.ParticipantKind));
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 8 * a1 + 32;
    v6 = a3 + 8 * v4;
    if (v5 >= v6 || v5 + 8 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 24 * a1 + 32;
    v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, CKShareParticipant));
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type CKShareParticipant and conformance NSObject()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type CKShareParticipant and conformance NSObject;
  if (!lazy protocol witness table cache variable for type CKShareParticipant and conformance NSObject)
  {
    v1 = type metadata accessor for CKShareParticipant(255, (unint64_t *)&lazy cache variable for type metadata for CKShareParticipant);
    result = MEMORY[0x24BD0F8BC](MEMORY[0x24BEE5BD8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CKShareParticipant and conformance NSObject);
  }
  return result;
}

uint64_t outlined consume of PresenceUpdateMessage?(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a7)
  {
    outlined consume of PresenceUpdateMessage.Kind(result, a2);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t outlined copy of PresenceUpdateMessage?(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a7)
  {
    outlined copy of PresenceUpdateMessage.Kind(result, a2);
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t type metadata accessor for CKShareParticipant(uint64_t a1, unint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

_OWORD *outlined init with take of PresenceUpdateMessage.Kind(uint64_t a1, _OWORD *a2)
{
  __swift_memcpy32_8(a2, a1);
  return a2;
}

uint64_t outlined copy of ParticipantPresenceCoordinator.ConnectionManagerStore.SharedConnection?(uint64_t a1, void *a2)
{
  id v2;
  uint64_t result;

  if (a2)
  {
    v2 = a2;
    swift_retain();
    swift_retain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

_QWORD *CKShareGroupSessionProvider.__allocating_init(id:activity:share:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v10;

  v5 = v4;
  swift_allocObject();
  v10 = specialized CKShareGroupSessionProvider.init(id:activity:share:)(a1, a2, a3, a4);
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v5 + 80) - 8) + 8))(a3);
  return v10;
}

uint64_t CKShareGroupSessionProvider.id.getter()
{
  uint64_t v0;

  v0 = specialized CKShareGroupSessionProvider.id.getter();
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t CKShareGroupSessionProvider.id.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_beginAccess();
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*CKShareGroupSessionProvider.id.modify())()
{
  swift_beginAccess();
  return ParticipantPresenceCoordinator.ConnectionManagerStore.tabGroupIdentifiersToSharedConnections.modify;
}

uint64_t CKShareGroupSessionProvider.state.getter()
{
  specialized CKShareGroupSessionProvider.state.getter();
  return swift_retain();
}

uint64_t CKShareGroupSessionProvider.state.setter(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 32) = a1;
  return swift_release();
}

uint64_t (*CKShareGroupSessionProvider.state.modify())()
{
  swift_beginAccess();
  return ParticipantPresenceCoordinator.ConnectionManagerStore.tabGroupIdentifiersToSharedConnections.modify;
}

uint64_t CKShareGroupSessionProvider.presenceInfo.getter()
{
  specialized CKShareGroupSessionProvider.presenceInfo.getter();
  return swift_retain();
}

uint64_t CKShareGroupSessionProvider.presenceInfo.setter(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 40) = a1;
  return swift_release();
}

uint64_t (*CKShareGroupSessionProvider.presenceInfo.modify())()
{
  swift_beginAccess();
  return ParticipantPresenceCoordinator.ConnectionManagerStore.pausedSharedConnections.modify;
}

uint64_t CKShareGroupSessionProvider.members.getter()
{
  specialized CKShareGroupSessionProvider.members.getter();
  return swift_retain();
}

uint64_t CKShareGroupSessionProvider.members.setter(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 48) = a1;
  return swift_release();
}

uint64_t (*CKShareGroupSessionProvider.members.modify())()
{
  swift_beginAccess();
  return ParticipantPresenceCoordinator.ConnectionManagerStore.tabGroupIdentifiersToSharedConnections.modify;
}

uint64_t CKShareGroupSessionProvider.activity.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v1 + 80) - 8) + 16))(a1, v1 + *(_QWORD *)(*(_QWORD *)v1 + 128));
}

uint64_t CKShareGroupSessionProvider.localMember.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of Member?(v1 + *(_QWORD *)(*(_QWORD *)v1 + 136), a1);
}

uint64_t CKShareGroupSessionProvider.share.didset()
{
  uint64_t v0;
  void **v1;
  void *v2;
  id v3;

  swift_beginAccess();
  v1 = (void **)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 144));
  swift_beginAccess();
  v2 = *v1;
  swift_retain();
  v3 = v2;
  CKShare.members.getter();

  CurrentValueSubject.send(_:)();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t CKShare.members.getter()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  id v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  unint64_t v10;
  id v11;
  void *v12;
  id v13;
  id v14;
  id v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  id v22;
  id v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  id v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char *v36;
  id v37;
  void *v38;
  id v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v1 = type metadata accessor for AddressableMember();
  v44 = *(_QWORD *)(v1 - 8);
  v45 = v1;
  MEMORY[0x24BDAC7A8](v1);
  v3 = (char *)&v43 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = objc_msgSend(v0, sel_participants);
  type metadata accessor for CKShareParticipant();
  v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  v6 = MEMORY[0x24BEE4AF8];
  v46 = MEMORY[0x24BEE4AF8];
  if (v5 >> 62)
  {
    swift_bridgeObjectRetain();
    result = _CocoaArrayWrapper.endIndex.getter();
    v7 = result;
    v43 = v3;
    if (result)
      goto LABEL_3;
  }
  else
  {
    v7 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    v43 = v3;
    if (v7)
    {
LABEL_3:
      if (v7 >= 1)
      {
        v9 = 0;
        v10 = v5 & 0xC000000000000001;
        while (1)
        {
          if (v10)
            v11 = (id)MEMORY[0x24BD0F250](v9, v5);
          else
            v11 = *(id *)(v5 + 8 * v9 + 32);
          v12 = v11;
          if (objc_msgSend(v11, sel_acceptanceStatus, v43) == (id)2
            && (v13 = objc_msgSend(v12, sel_userIdentity),
                v14 = objc_msgSend(v13, sel_lookupInfo),
                v13,
                v14))
          {
            v15 = objc_msgSend(v14, sel_emailAddress);
            if (v15)
            {
              v16 = v15;
              v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              v19 = v18;

              v20 = (void *)objc_opt_self();
              v21 = (void *)MEMORY[0x24BD0EF2C](v17, v19);
              swift_bridgeObjectRelease();
              v22 = objc_msgSend(v20, sel_normalizedEmailAddressHandleForValue_, v21);
              goto LABEL_16;
            }
            v23 = objc_msgSend(v14, sel_phoneNumber);
            if (v23)
            {
              v24 = v23;
              v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              v27 = v26;

              v28 = (void *)objc_opt_self();
              v21 = (void *)MEMORY[0x24BD0EF2C](v25, v27);
              swift_bridgeObjectRelease();
              v22 = objc_msgSend(v28, sel_normalizedPhoneNumberHandleForValue_isoCountryCode_, v21, 0);
LABEL_16:
              v29 = v22;

              v10 = v5 & 0xC000000000000001;
              if (v29)
              {
                MEMORY[0x24BD0EF68]();
                if (*(_QWORD *)((v46 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v46 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
                  specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
                specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
                specialized Array._endMutation()();
              }
              goto LABEL_6;
            }

          }
          else
          {

          }
LABEL_6:
          if (v7 == ++v9)
          {
            swift_bridgeObjectRelease();
            v30 = v46;
            v6 = MEMORY[0x24BEE4AF8];
            goto LABEL_24;
          }
        }
      }
      __break(1u);
      goto LABEL_41;
    }
  }
  swift_bridgeObjectRelease();
  v30 = MEMORY[0x24BEE4AF8];
LABEL_24:
  swift_bridgeObjectRelease();
  if (!(v30 >> 62))
  {
    v31 = *(_QWORD *)((v30 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v31)
      goto LABEL_26;
LABEL_38:
    swift_bridgeObjectRelease();
    v33 = MEMORY[0x24BEE4AF8];
LABEL_39:
    v42 = specialized Set.init<A>(_:)(v33);
    swift_bridgeObjectRelease();
    return v42;
  }
  swift_bridgeObjectRetain();
  v31 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v31)
    goto LABEL_38;
LABEL_26:
  v46 = v6;
  result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v31 & ~(v31 >> 63), 0);
  if ((v31 & 0x8000000000000000) == 0)
  {
    v32 = 0;
    v33 = v46;
    v34 = v30 & 0xC000000000000001;
    v35 = v30;
    v36 = v43;
    do
    {
      if (v34)
        v37 = (id)MEMORY[0x24BD0F250](v32, v30);
      else
        v37 = *(id *)(v30 + 8 * v32 + 32);
      v38 = v37;
      v39 = objc_msgSend(v37, sel_normalizedValue, v43);
      if (!v39)
        v39 = objc_msgSend(v38, sel_value);
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      AddressableMember.init(handle:)();
      v46 = v33;
      v41 = *(_QWORD *)(v33 + 16);
      v40 = *(_QWORD *)(v33 + 24);
      if (v41 >= v40 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v40 > 1, v41 + 1, 1);
        v33 = v46;
      }
      ++v32;
      *(_QWORD *)(v33 + 16) = v41 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v44 + 32))(v33+ ((*(unsigned __int8 *)(v44 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v44 + 80))+ *(_QWORD *)(v44 + 72) * v41, v36, v45);
      v30 = v35;
    }
    while (v31 != v32);
    swift_bridgeObjectRelease();
    goto LABEL_39;
  }
LABEL_41:
  __break(1u);
  return result;
}

id CKShareGroupSessionProvider.share.getter()
{
  return (id)specialized CKShareGroupSessionProvider.share.getter();
}

void CKShareGroupSessionProvider.share.setter(void *a1)
{
  specialized CKShareGroupSessionProvider.share.setter(a1);

}

uint64_t (*CKShareGroupSessionProvider.share.modify(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 24) = v1;
  swift_beginAccess();
  return CKShareGroupSessionProvider.share.modify;
}

uint64_t CKShareGroupSessionProvider.share.modify(uint64_t a1, char a2)
{
  uint64_t result;

  result = swift_endAccess();
  if ((a2 & 1) == 0)
    return CKShareGroupSessionProvider.share.didset();
  return result;
}

_QWORD *CKShareGroupSessionProvider.init(id:activity:share:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t *v4;
  uint64_t v6;
  _QWORD *v7;

  v6 = *v4;
  v7 = specialized CKShareGroupSessionProvider.init(id:activity:share:)(a1, a2, a3, a4);
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v6 + 80) - 8) + 8))(a3);
  return v7;
}

id CKShareParticipant.handle.getter()
{
  void *v0;
  id v1;
  id v2;
  id v3;
  void *v4;
  id v5;
  id v6;
  id v7;

  v1 = objc_msgSend(v0, sel_userIdentity);
  v2 = objc_msgSend(v1, sel_lookupInfo);

  if (!v2)
    return 0;
  v3 = objc_msgSend(v2, sel_emailAddress);
  if (!v3)
  {
    v6 = objc_msgSend(v2, sel_phoneNumber);
    if (v6)
    {
      v4 = v6;
      v5 = objc_msgSend((id)objc_opt_self(), sel_normalizedPhoneNumberHandleForValue_isoCountryCode_, v6, 0);
      goto LABEL_6;
    }

    return 0;
  }
  v4 = v3;
  v5 = objc_msgSend((id)objc_opt_self(), sel_normalizedEmailAddressHandleForValue_, v3);
LABEL_6:
  v7 = v5;

  return v7;
}

uint64_t *CKShareGroupSessionProvider.deinit()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v1 + 80) - 8) + 8))((uint64_t)v0 + *(_QWORD *)(*v0 + 128));
  outlined destroy of Member?((uint64_t)v0 + *(_QWORD *)(*v0 + 136));

  return v0;
}

uint64_t CKShareGroupSessionProvider.__deallocating_deinit()
{
  CKShareGroupSessionProvider.deinit();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for Identifiable.id.getter in conformance CKShareGroupSessionProvider<A>@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;

  *a1 = specialized CKShareGroupSessionProvider.id.getter();
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

uint64_t specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<CollaborationConnectionManager<PersonalDeviceCoordinationActivity, PersonalGroupSessionProvider<PersonalDeviceCoordinationActivity>, PresenceUpdateMessage>.WeakContainer<AsyncBufferedQueue<Set<Participant>>>>, &demangling cache variable for type metadata for CollaborationConnectionManager<PersonalDeviceCoordinationActivity, PersonalGroupSessionProvider<PersonalDeviceCoordinationActivity>, PresenceUpdateMessage>.WeakContainer<AsyncBufferedQueue<Set<Participant>>>);
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<CollaborationConnectionManager<CKShareCollaborationActivity, CKShareGroupSessionProvider<CKShareCollaborationActivity>, PresenceUpdateMessage>.WeakContainer<AsyncBufferedQueue<Set<Participant>>>>, &demangling cache variable for type metadata for CollaborationConnectionManager<CKShareCollaborationActivity, CKShareGroupSessionProvider<CKShareCollaborationActivity>, PresenceUpdateMessage>.WeakContainer<AsyncBufferedQueue<Set<Participant>>>);
  *v3 = result;
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<[(String, ParticipantHandleMap.ParticipantKind)]>);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v13 = (unint64_t)(v10 + 4);
  v14 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= v14 + 8 * v8)
      memmove(v10 + 4, a4 + 4, 8 * v8);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 8 * v8 || v13 >= v14 + 8 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(String, ParticipantHandleMap.ParticipantKind)]);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, ParticipantHandleMap.ParticipantKind)>);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v12 = (unint64_t)(v10 + 4);
  v13 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= v13 + 24 * v8)
      memmove(v10 + 4, a4 + 4, 24 * v8);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 24 * v8 || v12 >= v13 + 24 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, ParticipantHandleMap.ParticipantKind));
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  size_t v14;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  unint64_t v22;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (!v9)
  {
    v13 = (_QWORD *)MEMORY[0x24BEE4AF8];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AddressableMember>);
  v10 = *(_QWORD *)(type metadata accessor for AddressableMember() - 8);
  v11 = *(_QWORD *)(v10 + 72);
  v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v13 = (_QWORD *)swift_allocObject();
  v14 = _swift_stdlib_malloc_size(v13);
  if (!v11)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v14 - v12 == 0x8000000000000000 && v11 == -1)
    goto LABEL_34;
  v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(v14 - v12) / v11);
LABEL_19:
  v16 = *(_QWORD *)(type metadata accessor for AddressableMember() - 8);
  v17 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  v18 = (char *)v13 + v17;
  v19 = (char *)a4 + v17;
  if ((a1 & 1) != 0)
  {
    if (v13 < a4 || v18 >= &v19[*(_QWORD *)(v16 + 72) * v8])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  v20 = *(_QWORD *)(v16 + 72) * v8;
  v21 = &v18[v20];
  v22 = (unint64_t)&v19[v20];
  if (v19 >= v21 || (unint64_t)v18 >= v22)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v13;
  }
LABEL_36:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t *a6)
{
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_34;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (v12)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    v13 = (_QWORD *)swift_allocObject();
    v14 = _swift_stdlib_malloc_size(v13);
    v15 = v14 - 32;
    if (v14 < 32)
      v15 = v14 - 25;
    v13[2] = v11;
    v13[3] = 2 * (v15 >> 3);
  }
  else
  {
    v13 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v16 = (unint64_t)(v13 + 4);
  v17 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v13 < a4 || v16 >= v17 + 8 * v11)
    {
      __swift_instantiateConcreteTypeFromMangledName(a6);
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v13 != a4)
    {
      __swift_instantiateConcreteTypeFromMangledName(a6);
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  if (v17 >= v16 + 8 * v11 || v16 >= v17 + 8 * v11)
  {
    __swift_instantiateConcreteTypeFromMangledName(a6);
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v13;
  }
LABEL_34:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Set.init<A>(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  void **v4;
  void *v5;
  id v6;
  id v7;
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 16);
  lazy protocol witness table accessor for type ParticipantHandleMap.ParticipantKind and conformance ParticipantHandleMap.ParticipantKind();
  result = Set.init(minimumCapacity:)();
  v8 = result;
  if (v2)
  {
    v4 = (void **)(a1 + 32);
    do
    {
      v5 = *v4++;
      v6 = v5;
      specialized Set._Variant.insert(_:)(&v7, v5);

      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t);
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;

  v2 = type metadata accessor for AddressableMember();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x24BDAC7A8](v2);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v15 - v7;
  v9 = *(_QWORD *)(a1 + 16);
  lazy protocol witness table accessor for type CKShareParticipant and conformance NSObject(&lazy protocol witness table cache variable for type AddressableMember and conformance AddressableMember, v10, MEMORY[0x24BDD1FB8]);
  result = Set.init(minimumCapacity:)();
  v16 = result;
  if (v9)
  {
    v12 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v13 = *(_QWORD *)(v3 + 72);
    v14 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    do
    {
      v14(v6, v12, v2);
      specialized Set._Variant.insert(_:)((uint64_t)v8, v6);
      (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
      v12 += v13;
      --v9;
    }
    while (v9);
    return v16;
  }
  return result;
}

uint64_t specialized Set.init<A>(_:)(unint64_t a1)
{
  unint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t i;
  void *v6;
  void **v7;
  void *v8;
  id v9;
  uint64_t v10;

  v2 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  type metadata accessor for CKShareParticipant();
  lazy protocol witness table accessor for type CKShareParticipant and conformance NSObject((unint64_t *)&lazy protocol witness table cache variable for type CKShareParticipant and conformance NSObject, (uint64_t (*)(uint64_t))type metadata accessor for CKShareParticipant, MEMORY[0x24BEE5BD8]);
  result = Set.init(minimumCapacity:)();
  v10 = result;
  if (v2)
  {
    swift_bridgeObjectRetain();
    v4 = _CocoaArrayWrapper.endIndex.getter();
    result = swift_bridgeObjectRelease();
    if (!v4)
      return v10;
  }
  else
  {
    v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v4)
      return v10;
  }
  if (v4 >= 1)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      for (i = 0; i != v4; ++i)
      {
        v6 = (void *)MEMORY[0x24BD0F250](i, a1);
        specialized Set._Variant.insert(_:)(&v9, v6);

      }
    }
    else
    {
      v7 = (void **)(a1 + 32);
      do
      {
        v8 = *v7++;
        specialized Set._Variant.insert(_:)(&v9, v8);

        --v4;
      }
      while (v4);
    }
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *specialized CKShareGroupSessionProvider.init(id:activity:share:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  id v19;
  void *v20;
  id v21;
  id v22;
  uint64_t v23;
  id v24;
  NSObject *v25;
  os_log_type_t v26;
  int v27;
  uint8_t *v28;
  id v29;
  id v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint8_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD v44[2];
  uint8_t *v45;
  uint64_t v46;
  int v47;
  char *v48;
  uint64_t v49;
  uint64_t v50[7];

  v5 = v4;
  v10 = *v4;
  v11 = type metadata accessor for PresenceSessionInfo();
  MEMORY[0x24BDAC7A8](v11);
  v12 = type metadata accessor for GroupSessionProviderState();
  MEMORY[0x24BDAC7A8](v12);
  (*(void (**)(char *, _QWORD))(v14 + 104))((char *)v44 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), *MEMORY[0x24BDD1D78]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<GroupSessionProviderState, Never>);
  swift_allocObject();
  v4[4] = CurrentValueSubject.init(_:)();
  static PresenceSessionInfo.default.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<PresenceSessionInfo, Never>);
  swift_allocObject();
  v4[5] = CurrentValueSubject.init(_:)();
  v4[2] = a1;
  v4[3] = a2;
  v15 = (char *)v5 + *(_QWORD *)(*v5 + 128);
  v16 = *(_QWORD *)(v10 + 80);
  v17 = *(_QWORD *)(v16 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v15, a3, v16);
  *(_QWORD *)((char *)v4 + *(_QWORD *)(*v4 + 144)) = a4;
  v18 = a4;
  v50[0] = CKShare.members.getter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurrentValueSubject<Set<AddressableMember>, Never>);
  swift_allocObject();
  v4[6] = CurrentValueSubject.init(_:)();
  v19 = objc_msgSend(v18, sel_currentUserParticipant);
  if (v19 && (v20 = v19, v21 = CKShareParticipant.handle.getter(), v20, v21))
  {
    v22 = objc_msgSend(v21, sel_normalizedValue);
    if (!v22)
      v22 = objc_msgSend(v21, sel_value);
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    v50[3] = type metadata accessor for AddressableMember();
    v50[4] = lazy protocol witness table accessor for type CKShareParticipant and conformance NSObject(&lazy protocol witness table cache variable for type AddressableMember and conformance AddressableMember, (uint64_t (*)(uint64_t))MEMORY[0x24BDD1FA8], MEMORY[0x24BDD1FA0]);
    __swift_allocate_boxed_opaque_existential_1(v50);
    AddressableMember.init(handle:)();

    outlined init with take of Member?((uint64_t)v50, (uint64_t)v5 + *(_QWORD *)(*v5 + 136));
  }
  else
  {
    if (one-time initialization token for tabGroup != -1)
      swift_once();
    v23 = type metadata accessor for Logger();
    __swift_project_value_buffer(v23, (uint64_t)static Logger.tabGroup);
    v24 = v18;
    v25 = Logger.logObject.getter();
    v26 = static os_log_type_t.error.getter();
    v27 = v26;
    if (os_log_type_enabled(v25, v26))
    {
      v47 = v27;
      v28 = (uint8_t *)swift_slowAlloc();
      v46 = swift_slowAlloc();
      v49 = v10;
      v50[0] = v46;
      *(_DWORD *)v28 = 136315138;
      v44[1] = v28 + 4;
      v45 = v28;
      v29 = objc_msgSend(v24, sel_recordID);
      v48 = v15;
      v30 = v29;
      v31 = v17;
      v32 = objc_msgSend(v29, sel_ckShortDescription);

      v33 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v35 = v34;

      v17 = v31;
      v36 = v33;
      v15 = v48;
      v50[6] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v36, v35, v50);
      v10 = v49;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      v37 = v45;
      _os_log_impl(&dword_24A3EF000, v25, (os_log_type_t)v47, "Share %s does not have a currentUserParticipant", v45, 0xCu);
      v38 = v46;
      swift_arrayDestroy();
      MEMORY[0x24BD0F964](v38, -1, -1);
      MEMORY[0x24BD0F964](v37, -1, -1);

    }
    else
    {

    }
    v40 = *(_QWORD *)(v10 + 88);
    v41 = type metadata accessor for CKShareGroupSessionProvider.Errors(0, v16, v40, v39);
    MEMORY[0x24BD0F8BC](&protocol conformance descriptor for CKShareGroupSessionProvider<A>.Errors, v41);
    swift_allocError();
    swift_willThrow();

    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_release();
    (*(void (**)(char *, uint64_t))(v17 + 8))(v15, v16);

    type metadata accessor for CKShareGroupSessionProvider(0, v16, v40, v42);
    swift_deallocPartialClassInstance();
  }
  return v5;
}

uint64_t specialized CKShareGroupSessionProvider.id.getter()
{
  uint64_t v0;

  swift_beginAccess();
  return *(_QWORD *)(v0 + 16);
}

uint64_t specialized CKShareGroupSessionProvider.state.getter()
{
  uint64_t v0;

  swift_beginAccess();
  return *(_QWORD *)(v0 + 32);
}

uint64_t specialized CKShareGroupSessionProvider.presenceInfo.getter()
{
  uint64_t v0;

  swift_beginAccess();
  return *(_QWORD *)(v0 + 40);
}

uint64_t specialized CKShareGroupSessionProvider.members.getter()
{
  uint64_t v0;

  swift_beginAccess();
  return *(_QWORD *)(v0 + 48);
}

uint64_t outlined init with copy of Member?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Member?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t specialized CKShareGroupSessionProvider.share.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + *(_QWORD *)(*(_QWORD *)v0 + 144);
  swift_beginAccess();
  return *(_QWORD *)v1;
}

uint64_t specialized CKShareGroupSessionProvider.share.setter(void *a1)
{
  uint64_t v1;
  void **v3;
  void *v4;
  id v5;

  v3 = (void **)(v1 + *(_QWORD *)(*(_QWORD *)v1 + 144));
  swift_beginAccess();
  v4 = *v3;
  *v3 = a1;
  v5 = a1;

  return CKShareGroupSessionProvider.share.didset();
}

uint64_t outlined destroy of Member?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Member?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void base witness table accessor for Identifiable in CKShareGroupSessionProvider<A>()
{
  JUMPOUT(0x24BD0F8BCLL);
}

uint64_t associated type witness table accessor for GroupSessionProvider.ActivityType : IdentifiableGroupActivity in CKShareGroupSessionProvider<A>(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 88);
}

void base witness table accessor for GroupSessionProvider in CKShareGroupSessionProvider<A>()
{
  JUMPOUT(0x24BD0F8BCLL);
}

uint64_t sub_24A42B388@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;

  *a1 = specialized CKShareGroupSessionProvider.id.getter();
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

uint64_t sub_24A42B3B4(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *a1;
  v2 = a1[1];
  swift_bridgeObjectRetain();
  return CKShareGroupSessionProvider.id.setter(v1, v2);
}

uint64_t sub_24A42B3F0()
{
  return 16;
}

__n128 sub_24A42B3FC(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_24A42B408@<X0>(_QWORD *a1@<X8>)
{
  return keypath_get_1Tm(specialized CKShareGroupSessionProvider.state.getter, a1);
}

uint64_t sub_24A42B414(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_2Tm(a1, a2, a3, a4, CKShareGroupSessionProvider.state.setter);
}

uint64_t sub_24A42B420()
{
  return 16;
}

__n128 sub_24A42B42C(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_24A42B438@<X0>(_QWORD *a1@<X8>)
{
  return keypath_get_1Tm(specialized CKShareGroupSessionProvider.presenceInfo.getter, a1);
}

uint64_t sub_24A42B444(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_2Tm(a1, a2, a3, a4, CKShareGroupSessionProvider.presenceInfo.setter);
}

uint64_t sub_24A42B450()
{
  return 16;
}

__n128 sub_24A42B45C(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_24A42B468@<X0>(_QWORD *a1@<X8>)
{
  return keypath_get_1Tm(specialized CKShareGroupSessionProvider.members.getter, a1);
}

uint64_t keypath_get_1Tm@<X0>(uint64_t (*a1)(void)@<X3>, _QWORD *a2@<X8>)
{
  *a2 = a1();
  return swift_retain();
}

uint64_t sub_24A42B49C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_2Tm(a1, a2, a3, a4, CKShareGroupSessionProvider.members.setter);
}

uint64_t keypath_set_2Tm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t))
{
  uint64_t v6;

  v6 = swift_retain();
  return a5(v6);
}

uint64_t sub_24A42B4D4()
{
  return 16;
}

__n128 sub_24A42B4E0(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

id sub_24A42B4EC@<X0>(_QWORD *a1@<X8>)
{
  void *v2;

  v2 = (void *)specialized CKShareGroupSessionProvider.share.getter();
  *a1 = v2;
  return v2;
}

void sub_24A42B514(id *a1)
{
  id v1;

  v1 = *a1;
  specialized CKShareGroupSessionProvider.share.setter(v1);

}

uint64_t sub_24A42B54C()
{
  return 16;
}

__n128 sub_24A42B558(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t type metadata completion function for CKShareGroupSessionProvider()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t type metadata accessor for CKShareGroupSessionProvider(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CKShareGroupSessionProvider);
}

uint64_t method lookup function for CKShareGroupSessionProvider()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of CKShareGroupSessionProvider.id.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of CKShareGroupSessionProvider.id.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t dispatch thunk of CKShareGroupSessionProvider.id.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
}

uint64_t dispatch thunk of CKShareGroupSessionProvider.state.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

uint64_t dispatch thunk of CKShareGroupSessionProvider.state.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 184))();
}

uint64_t dispatch thunk of CKShareGroupSessionProvider.state.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
}

uint64_t dispatch thunk of CKShareGroupSessionProvider.presenceInfo.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 200))();
}

uint64_t dispatch thunk of CKShareGroupSessionProvider.presenceInfo.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 208))();
}

uint64_t dispatch thunk of CKShareGroupSessionProvider.presenceInfo.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 216))();
}

uint64_t dispatch thunk of CKShareGroupSessionProvider.members.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 224))();
}

uint64_t dispatch thunk of CKShareGroupSessionProvider.members.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 232))();
}

uint64_t dispatch thunk of CKShareGroupSessionProvider.members.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 240))();
}

uint64_t dispatch thunk of CKShareGroupSessionProvider.share.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 248))();
}

uint64_t dispatch thunk of CKShareGroupSessionProvider.share.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 256))();
}

uint64_t dispatch thunk of CKShareGroupSessionProvider.share.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 264))();
}

uint64_t dispatch thunk of CKShareGroupSessionProvider.__allocating_init(id:activity:share:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 272))();
}

uint64_t type metadata accessor for CKShareGroupSessionProvider.Errors(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CKShareGroupSessionProvider.Errors);
}

uint64_t outlined init with take of Member?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Member?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t type metadata instantiation function for CKShareGroupSessionProvider.Errors()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t storeEnumTagSinglePayload for CKShareGroupSessionProvider.Errors(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_24A42B7CC + 4 * byte_24A42FAE0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_24A42B7EC + 4 * byte_24A42FAE5[v4]))();
}

_BYTE *sub_24A42B7CC(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_24A42B7EC(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_24A42B7F4(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_24A42B7FC(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_24A42B804(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_24A42B80C(_DWORD *result)
{
  *result = 0;
  return result;
}

void base witness table accessor for Equatable in CKShareGroupSessionProvider<A>.Errors()
{
  JUMPOUT(0x24BD0F8BCLL);
}

ValueMetadata *type metadata accessor for PersonalDeviceCoordinationActivity()
{
  return &type metadata for PersonalDeviceCoordinationActivity;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PersonalDeviceCoordinationActivity.CodingKeys()
{
  lazy protocol witness table accessor for type PersonalDeviceCoordinationActivity.CodingKeys and conformance PersonalDeviceCoordinationActivity.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PersonalDeviceCoordinationActivity.CodingKeys()
{
  lazy protocol witness table accessor for type PersonalDeviceCoordinationActivity.CodingKeys and conformance PersonalDeviceCoordinationActivity.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t protocol witness for Decodable.init(from:) in conformance PersonalDeviceCoordinationActivity@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PersonalDeviceCoordinationActivity.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PersonalDeviceCoordinationActivity.CodingKeys and conformance PersonalDeviceCoordinationActivity.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v9 = KeyedDecodingContainer.decode(_:forKey:)();
  v11 = v10;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  result = __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  *a2 = v9;
  a2[1] = v11;
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance PersonalDeviceCoordinationActivity(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PersonalDeviceCoordinationActivity.CodingKeys>);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PersonalDeviceCoordinationActivity.CodingKeys and conformance PersonalDeviceCoordinationActivity.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

unint64_t lazy protocol witness table accessor for type PersonalDeviceCoordinationActivity and conformance PersonalDeviceCoordinationActivity()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PersonalDeviceCoordinationActivity and conformance PersonalDeviceCoordinationActivity;
  if (!lazy protocol witness table cache variable for type PersonalDeviceCoordinationActivity and conformance PersonalDeviceCoordinationActivity)
  {
    result = MEMORY[0x24BD0F8BC](&protocol conformance descriptor for PersonalDeviceCoordinationActivity, &type metadata for PersonalDeviceCoordinationActivity);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PersonalDeviceCoordinationActivity and conformance PersonalDeviceCoordinationActivity);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PersonalDeviceCoordinationActivity and conformance PersonalDeviceCoordinationActivity;
  if (!lazy protocol witness table cache variable for type PersonalDeviceCoordinationActivity and conformance PersonalDeviceCoordinationActivity)
  {
    result = MEMORY[0x24BD0F8BC]("ͩy\aD2", &type metadata for PersonalDeviceCoordinationActivity);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PersonalDeviceCoordinationActivity and conformance PersonalDeviceCoordinationActivity);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PersonalDeviceCoordinationActivity and conformance PersonalDeviceCoordinationActivity;
  if (!lazy protocol witness table cache variable for type PersonalDeviceCoordinationActivity and conformance PersonalDeviceCoordinationActivity)
  {
    result = MEMORY[0x24BD0F8BC](&protocol conformance descriptor for PersonalDeviceCoordinationActivity, &type metadata for PersonalDeviceCoordinationActivity);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PersonalDeviceCoordinationActivity and conformance PersonalDeviceCoordinationActivity);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PersonalDeviceCoordinationActivity and conformance PersonalDeviceCoordinationActivity;
  if (!lazy protocol witness table cache variable for type PersonalDeviceCoordinationActivity and conformance PersonalDeviceCoordinationActivity)
  {
    result = MEMORY[0x24BD0F8BC](&protocol conformance descriptor for PersonalDeviceCoordinationActivity, &type metadata for PersonalDeviceCoordinationActivity);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PersonalDeviceCoordinationActivity and conformance PersonalDeviceCoordinationActivity);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PersonalDeviceCoordinationActivity.CodingKeys and conformance PersonalDeviceCoordinationActivity.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PersonalDeviceCoordinationActivity.CodingKeys and conformance PersonalDeviceCoordinationActivity.CodingKeys;
  if (!lazy protocol witness table cache variable for type PersonalDeviceCoordinationActivity.CodingKeys and conformance PersonalDeviceCoordinationActivity.CodingKeys)
  {
    result = MEMORY[0x24BD0F8BC](&protocol conformance descriptor for PersonalDeviceCoordinationActivity.CodingKeys, &unk_251BCA758);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PersonalDeviceCoordinationActivity.CodingKeys and conformance PersonalDeviceCoordinationActivity.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PersonalDeviceCoordinationActivity.CodingKeys and conformance PersonalDeviceCoordinationActivity.CodingKeys;
  if (!lazy protocol witness table cache variable for type PersonalDeviceCoordinationActivity.CodingKeys and conformance PersonalDeviceCoordinationActivity.CodingKeys)
  {
    result = MEMORY[0x24BD0F8BC](&protocol conformance descriptor for PersonalDeviceCoordinationActivity.CodingKeys, &unk_251BCA758);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PersonalDeviceCoordinationActivity.CodingKeys and conformance PersonalDeviceCoordinationActivity.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PersonalDeviceCoordinationActivity.CodingKeys and conformance PersonalDeviceCoordinationActivity.CodingKeys;
  if (!lazy protocol witness table cache variable for type PersonalDeviceCoordinationActivity.CodingKeys and conformance PersonalDeviceCoordinationActivity.CodingKeys)
  {
    result = MEMORY[0x24BD0F8BC](&protocol conformance descriptor for PersonalDeviceCoordinationActivity.CodingKeys, &unk_251BCA758);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PersonalDeviceCoordinationActivity.CodingKeys and conformance PersonalDeviceCoordinationActivity.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PersonalDeviceCoordinationActivity.CodingKeys and conformance PersonalDeviceCoordinationActivity.CodingKeys;
  if (!lazy protocol witness table cache variable for type PersonalDeviceCoordinationActivity.CodingKeys and conformance PersonalDeviceCoordinationActivity.CodingKeys)
  {
    result = MEMORY[0x24BD0F8BC](&protocol conformance descriptor for PersonalDeviceCoordinationActivity.CodingKeys, &unk_251BCA758);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PersonalDeviceCoordinationActivity.CodingKeys and conformance PersonalDeviceCoordinationActivity.CodingKeys);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for PersonalDeviceCoordinationActivity.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_24A42BC40 + 4 * byte_24A42FD20[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_24A42BC60 + 4 * byte_24A42FD25[v4]))();
}

_BYTE *sub_24A42BC40(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_24A42BC60(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_24A42BC68(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_24A42BC70(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_24A42BC78(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_24A42BC80(_DWORD *result)
{
  *result = 0;
  return result;
}

void *type metadata accessor for PersonalDeviceCoordinationActivity.CodingKeys()
{
  return &unk_251BCA758;
}

uint64_t destroy for PresenceUpdateMessage(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 8))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for PresenceUpdateMessage(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;

  v4 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v4;
    v5 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 24) = v5;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v6;
  }
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for PresenceUpdateMessage(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;

  v4 = a2[1];
  if (a1[1])
  {
    if (v4)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      a1[2] = a2[2];
      a1[3] = a2[3];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of (tabGroupIdentifier: String, tabIdentifier: String)((uint64_t)a1);
      v5 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((_OWORD *)a1 + 1) = v5;
    }
  }
  else if (v4)
  {
    *a1 = *a2;
    a1[1] = a2[1];
    a1[2] = a2[2];
    a1[3] = a2[3];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v6 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *((_OWORD *)a1 + 1) = v6;
  }
  a1[4] = a2[4];
  a1[5] = a2[5];
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t outlined destroy of (tabGroupIdentifier: String, tabIdentifier: String)(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (tabGroupIdentifier: String, tabIdentifier: String));
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

__n128 __swift_memcpy56_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for PresenceUpdateMessage(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;

  if (!*(_QWORD *)(a1 + 8))
    goto LABEL_5;
  v4 = *(_QWORD *)(a2 + 8);
  if (!v4)
  {
    outlined destroy of (tabGroupIdentifier: String, tabIdentifier: String)(a1);
LABEL_5:
    v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v6;
    goto LABEL_6;
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
LABEL_6:
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for PresenceUpdateMessage(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 56))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 48);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PresenceUpdateMessage(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 48) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 56) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for PresenceUpdateMessage()
{
  return &type metadata for PresenceUpdateMessage;
}

void specialized == infix<A>(_:_:)(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_24A42C0C0(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_24A42C110 + 4 * byte_24A42FFA5[a2]))(6907764);
}

uint64_t sub_24A42C110(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 6907764 && v1 == 0xE300000000000000)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t protocol witness for static Comparable.< infix(_:_:) in conformance CRDTGeneration(_QWORD *a1, _QWORD *a2)
{
  if (*a1 != *a2)
    return *a1 < *a2;
  if (a1[1] == a2[1] && a1[2] == a2[2])
    return 0;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)();
}

BOOL protocol witness for static Comparable.<= infix(_:_:) in conformance CRDTGeneration(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v7;

  if (*a2 == *a1)
  {
    v2 = a1[1];
    v3 = a1[2];
    v4 = a2[1];
    v5 = a2[2];
    if (v4 == v2 && v5 == v3)
      v7 = 0;
    else
      v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  else
  {
    v7 = *a2 < *a1;
  }
  return (v7 & 1) == 0;
}

BOOL protocol witness for static Comparable.>= infix(_:_:) in conformance CRDTGeneration(_QWORD *a1, _QWORD *a2)
{
  char v3;

  if (*a1 == *a2)
  {
    if (a1[1] == a2[1] && a1[2] == a2[2])
      v3 = 0;
    else
      v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  else
  {
    v3 = *a1 < *a2;
  }
  return (v3 & 1) == 0;
}

uint64_t PresenceUpdateMessage.CodingKeys.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_24A42C2C8 + 4 * byte_24A42FFAA[a1]))(107, 0xE100000000000000);
}

uint64_t sub_24A42C2C8()
{
  return 6907764;
}

uint64_t sub_24A42C2D8()
{
  return 26484;
}

uint64_t sub_24A42C2E4()
{
  return 103;
}

uint64_t sub_24A42C2EC()
{
  return 26980;
}

uint64_t PresenceUpdateMessage.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_24A42C320 + 4 * byte_24A42FFAF[a1]))(107, 0xE100000000000000);
}

uint64_t sub_24A42C320()
{
  return 6907764;
}

uint64_t sub_24A42C330()
{
  return 26484;
}

uint64_t sub_24A42C33C()
{
  return 103;
}

uint64_t sub_24A42C344()
{
  return 26980;
}

uint64_t protocol witness for static Comparable.> infix(_:_:) in conformance CRDTGeneration(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (*a2 != *a1)
    return *a2 < *a1;
  v2 = a1[1];
  v3 = a1[2];
  v4 = a2[1];
  v5 = a2[2];
  if (v4 == v2 && v5 == v3)
    return 0;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CRDTGeneration(_QWORD *a1, _QWORD *a2)
{
  if (*a1 != *a2)
    return 0;
  if (a1[1] == a2[1] && a1[2] == a2[2])
    return 1;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CRDTGeneration()
{
  uint64_t v0;

  return CRDTGeneration.debugDescription.getter(*(_QWORD *)v0, *(_QWORD *)(v0 + 8), *(void **)(v0 + 16));
}

void protocol witness for static Equatable.== infix(_:_:) in conformance PresenceUpdateMessage.CodingKeys(char *a1)
{
  specialized == infix<A>(_:_:)(*a1);
}

void protocol witness for Hashable.hashValue.getter in conformance PresenceUpdateMessage.CodingKeys()
{
  char *v0;

  specialized RawRepresentable<>.hashValue.getter(*v0);
}

void specialized RawRepresentable<>.hashValue.getter(char a1)
{
  Hasher.init(_seed:)();
  __asm { BR              X10 }
}

Swift::Int sub_24A42C438()
{
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance PresenceUpdateMessage.CodingKeys(uint64_t a1)
{
  char *v1;

  specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

void specialized RawRepresentable<>.hash(into:)(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_24A42C4CC()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance PresenceUpdateMessage.CodingKeys(uint64_t a1)
{
  char *v1;

  specialized RawRepresentable<>._rawHashValue(seed:)(a1, *v1);
}

void specialized RawRepresentable<>._rawHashValue(seed:)(uint64_t a1, char a2)
{
  Hasher.init(_seed:)();
  __asm { BR              X10 }
}

Swift::Int sub_24A42C558()
{
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance PresenceUpdateMessage.CodingKeys@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized PresenceUpdateMessage.CodingKeys.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance PresenceUpdateMessage.CodingKeys@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = PresenceUpdateMessage.CodingKeys.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance PresenceUpdateMessage.CodingKeys()
{
  unsigned __int8 *v0;

  return PresenceUpdateMessage.CodingKeys.stringValue.getter(*v0);
}

unint64_t protocol witness for CodingKey.init(stringValue:) in conformance PresenceUpdateMessage.CodingKeys@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized PresenceUpdateMessage.CodingKeys.init(rawValue:)(a1);
  *a2 = result;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance PresenceUpdateMessage.CodingKeys(_BYTE *a1@<X8>)
{
  *a1 = 5;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PresenceUpdateMessage.CodingKeys()
{
  lazy protocol witness table accessor for type PresenceUpdateMessage.CodingKeys and conformance PresenceUpdateMessage.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PresenceUpdateMessage.CodingKeys()
{
  lazy protocol witness table accessor for type PresenceUpdateMessage.CodingKeys and conformance PresenceUpdateMessage.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t PresenceUpdateMessage.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _OWORD v10[2];
  __int128 v11;
  char v12;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PresenceUpdateMessage.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PresenceUpdateMessage.CodingKeys and conformance PresenceUpdateMessage.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v12 = 3;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    v12 = 4;
    KeyedEncodingContainer.encode(_:forKey:)();
    outlined init with take of PresenceUpdateMessage.Kind(v3, v10);
    outlined init with take of PresenceUpdateMessage.Kind((uint64_t)v10, &v11);
    if (*((_QWORD *)&v11 + 1))
    {
      v12 = 0;
      KeyedEncodingContainer.encode(_:forKey:)();
      v12 = 1;
      KeyedEncodingContainer.encode(_:forKey:)();
      v12 = 2;
    }
    else
    {
      v12 = 0;
    }
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t PresenceUpdateMessage.description.getter()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  Swift::String v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;
  unint64_t v9;
  unint64_t v10;
  Swift::String v11;
  _OWORD v13[2];
  __int128 v14;
  uint64_t v15;
  void *v16;

  outlined init with take of PresenceUpdateMessage.Kind(v0, v13);
  outlined init with take of PresenceUpdateMessage.Kind((uint64_t)v13, &v14);
  v1 = (void *)*((_QWORD *)&v14 + 1);
  if (*((_QWORD *)&v14 + 1))
  {
    v2 = v14;
    v3 = v15;
    v4 = v16;
    _StringGuts.grow(_:)(94);
    v5._countAndFlagsBits = 0xD000000000000038;
    v5._object = (void *)0x800000024A430F90;
    String.append(_:)(v5);
    v6._countAndFlagsBits = v2;
    v6._object = v1;
    String.append(_:)(v6);
    v7._object = (void *)0x800000024A430FD0;
    v7._countAndFlagsBits = 0xD000000000000011;
    String.append(_:)(v7);
    v8._countAndFlagsBits = v3;
    v8._object = v4;
    String.append(_:)(v8);
    v9 = 0x6172656E6567203BLL;
    v10 = 0xEE00203A6E6F6974;
  }
  else
  {
    _StringGuts.grow(_:)(52);
    v9 = 0xD000000000000031;
    v10 = 0x800000024A430FF0;
  }
  String.append(_:)(*(Swift::String *)&v9);
  _print_unlocked<A, B>(_:_:)();
  v11._countAndFlagsBits = 62;
  v11._object = (void *)0xE100000000000000;
  String.append(_:)(v11);
  return 0;
}

double protocol witness for Decodable.init(from:) in conformance PresenceUpdateMessage@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  __int128 v7;
  uint64_t v8;

  specialized PresenceUpdateMessage.init(from:)(a1, (uint64_t *)v6);
  if (!v2)
  {
    v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    result = *(double *)&v7;
    *(_OWORD *)(a2 + 32) = v7;
    *(_QWORD *)(a2 + 48) = v8;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance PresenceUpdateMessage(_QWORD *a1)
{
  return PresenceUpdateMessage.encode(to:)(a1);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PresenceUpdateMessage()
{
  return PresenceUpdateMessage.description.getter();
}

unint64_t instantiation function for generic protocol witness table for PresenceUpdateMessage(_QWORD *a1)
{
  unint64_t result;

  a1[1] = lazy protocol witness table accessor for type PresenceUpdateMessage and conformance PresenceUpdateMessage();
  a1[2] = lazy protocol witness table accessor for type PresenceUpdateMessage and conformance PresenceUpdateMessage();
  result = lazy protocol witness table accessor for type PresenceUpdateMessage and conformance PresenceUpdateMessage();
  a1[3] = result;
  return result;
}

unint64_t specialized PresenceUpdateMessage.CodingKeys.init(rawValue:)(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of PresenceUpdateMessage.CodingKeys.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 5)
    return 5;
  else
    return v3;
}

uint64_t specialized PresenceUpdateMessage.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  Swift::String v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  Swift::Int v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t);
  uint64_t v27;
  uint64_t v28;
  Swift::Int v29;
  uint64_t v30;
  char v31;
  char v32;
  char v33;
  char v34;
  char v35;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PresenceUpdateMessage.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PresenceUpdateMessage.CodingKeys and conformance PresenceUpdateMessage.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
    goto LABEL_3;
  v35 = 3;
  v9 = KeyedDecodingContainer.decode(_:forKey:)();
  v34 = 4;
  v10 = KeyedDecodingContainer.decode(_:forKey:)();
  v13 = v12;
  v30 = v10;
  v33 = 0;
  swift_bridgeObjectRetain();
  v14 = KeyedDecodingContainer.decode(_:forKey:)();
  v16 = v15;
  v17._countAndFlagsBits = v14;
  v17._object = v16;
  v29 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of PresenceUpdateMessage.KindCodingValue.init(rawValue:), v17);
  swift_bridgeObjectRelease();
  if (v29 == 1)
  {
    v32 = 1;
    v28 = KeyedDecodingContainer.decode(_:forKey:)();
    v29 = v23;
    v31 = 2;
    v24 = KeyedDecodingContainer.decode(_:forKey:)();
    v21 = v25;
    v26 = *(void (**)(char *, uint64_t))(v6 + 8);
    v20 = v24;
    v26(v8, v5);
    v18 = v28;
    v19 = v29;
    goto LABEL_7;
  }
  if (v29)
  {
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type PresenceUpdateMessageError and conformance PresenceUpdateMessageError();
    swift_allocError();
    swift_willThrow();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
LABEL_3:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    outlined consume of PresenceUpdateMessage.Kind(0, 0);
    return swift_bridgeObjectRelease();
  }
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v18 = 0;
  v19 = 0;
  v20 = 0;
  v21 = 0;
LABEL_7:
  outlined consume of PresenceUpdateMessage.Kind(0, 0);
  outlined copy of PresenceUpdateMessage.Kind(v18, v19);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  outlined consume of PresenceUpdateMessage.Kind(v18, v19);
  result = swift_bridgeObjectRelease();
  *a2 = v18;
  a2[1] = v19;
  a2[2] = v20;
  a2[3] = v21;
  v22 = v30;
  a2[4] = v9;
  a2[5] = v22;
  a2[6] = v13;
  return result;
}

unint64_t lazy protocol witness table accessor for type PresenceUpdateMessage.CodingKeys and conformance PresenceUpdateMessage.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PresenceUpdateMessage.CodingKeys and conformance PresenceUpdateMessage.CodingKeys;
  if (!lazy protocol witness table cache variable for type PresenceUpdateMessage.CodingKeys and conformance PresenceUpdateMessage.CodingKeys)
  {
    result = MEMORY[0x24BD0F8BC](&protocol conformance descriptor for PresenceUpdateMessage.CodingKeys, &unk_251BCAA40);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PresenceUpdateMessage.CodingKeys and conformance PresenceUpdateMessage.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PresenceUpdateMessage.CodingKeys and conformance PresenceUpdateMessage.CodingKeys;
  if (!lazy protocol witness table cache variable for type PresenceUpdateMessage.CodingKeys and conformance PresenceUpdateMessage.CodingKeys)
  {
    result = MEMORY[0x24BD0F8BC](&protocol conformance descriptor for PresenceUpdateMessage.CodingKeys, &unk_251BCAA40);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PresenceUpdateMessage.CodingKeys and conformance PresenceUpdateMessage.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PresenceUpdateMessage.CodingKeys and conformance PresenceUpdateMessage.CodingKeys;
  if (!lazy protocol witness table cache variable for type PresenceUpdateMessage.CodingKeys and conformance PresenceUpdateMessage.CodingKeys)
  {
    result = MEMORY[0x24BD0F8BC](&protocol conformance descriptor for PresenceUpdateMessage.CodingKeys, &unk_251BCAA40);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PresenceUpdateMessage.CodingKeys and conformance PresenceUpdateMessage.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PresenceUpdateMessage.CodingKeys and conformance PresenceUpdateMessage.CodingKeys;
  if (!lazy protocol witness table cache variable for type PresenceUpdateMessage.CodingKeys and conformance PresenceUpdateMessage.CodingKeys)
  {
    result = MEMORY[0x24BD0F8BC]("ͩy\aD/", &unk_251BCAA40);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PresenceUpdateMessage.CodingKeys and conformance PresenceUpdateMessage.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PresenceUpdateMessageError and conformance PresenceUpdateMessageError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PresenceUpdateMessageError and conformance PresenceUpdateMessageError;
  if (!lazy protocol witness table cache variable for type PresenceUpdateMessageError and conformance PresenceUpdateMessageError)
  {
    result = MEMORY[0x24BD0F8BC](&protocol conformance descriptor for PresenceUpdateMessageError, &type metadata for PresenceUpdateMessageError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PresenceUpdateMessageError and conformance PresenceUpdateMessageError);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PresenceUpdateMessageError and conformance PresenceUpdateMessageError;
  if (!lazy protocol witness table cache variable for type PresenceUpdateMessageError and conformance PresenceUpdateMessageError)
  {
    result = MEMORY[0x24BD0F8BC](&protocol conformance descriptor for PresenceUpdateMessageError, &type metadata for PresenceUpdateMessageError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PresenceUpdateMessageError and conformance PresenceUpdateMessageError);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for PresenceUpdateMessageError(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_24A42CF78 + 4 * byte_24A42FFC3[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_24A42CF98 + 4 * byte_24A42FFC8[v4]))();
}

_BYTE *sub_24A42CF78(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_24A42CF98(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_24A42CFA0(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_24A42CFA8(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_24A42CFB0(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_24A42CFB8(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for PresenceUpdateMessageError()
{
  return &type metadata for PresenceUpdateMessageError;
}

_BYTE *__swift_memcpy1_1(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for PresenceUpdateMessage.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFC)
    goto LABEL_17;
  if (a2 + 4 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 4) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 4;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 4;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 4;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 5;
  v8 = v6 - 5;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for PresenceUpdateMessage.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_24A42D0BC + 4 * byte_24A42FFD2[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_24A42D0F0 + 4 * byte_24A42FFCD[v4]))();
}

uint64_t sub_24A42D0F0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_24A42D0F8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x24A42D100);
  return result;
}

uint64_t sub_24A42D10C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x24A42D114);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_24A42D118(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_24A42D120(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t getEnumTag for PresenceUpdateMessage.CodingKeys(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *destructiveInjectEnumTag for PresenceUpdateMessage.CodingKeys(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

void *type metadata accessor for PresenceUpdateMessage.CodingKeys()
{
  return &unk_251BCAA40;
}

uint64_t initializeBufferWithCopyOfBuffer for CRDTGeneration(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for CRDTGeneration()
{
  return swift_bridgeObjectRelease();
}

_QWORD *assignWithCopy for CRDTGeneration(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for CRDTGeneration(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for CRDTGeneration(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CRDTGeneration(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for CRDTGeneration()
{
  return &type metadata for CRDTGeneration;
}

unint64_t destroy for PresenceUpdateMessage.Kind(uint64_t a1)
{
  unint64_t result;

  result = *(_QWORD *)(a1 + 8);
  if (result >= 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for PresenceUpdateMessage.Kind(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  __int128 v5;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 < 0xFFFFFFFF)
  {
    v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
  }
  else
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v3;
    v4 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 24) = v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

_QWORD *assignWithCopy for PresenceUpdateMessage.Kind(_QWORD *a1, _QWORD *a2)
{
  unint64_t v4;
  __int128 v5;

  v4 = a2[1];
  if (a1[1] < 0xFFFFFFFFuLL)
  {
    if (v4 >= 0xFFFFFFFF)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      a1[2] = a2[2];
      a1[3] = a2[3];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      return a1;
    }
LABEL_7:
    v5 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *((_OWORD *)a1 + 1) = v5;
    return a1;
  }
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy32_8(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t assignWithTake for PresenceUpdateMessage.Kind(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  __int128 v6;

  if (*(_QWORD *)(a1 + 8) < 0xFFFFFFFFuLL)
    goto LABEL_5;
  v4 = *(_QWORD *)(a2 + 8);
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_5:
    v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v6;
    return a1;
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for PresenceUpdateMessage.Kind(uint64_t a1, unsigned int a2)
{
  unint64_t v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  if ((v3 + 1) >= 2)
    return v3;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for PresenceUpdateMessage.Kind(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 32) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

uint64_t getEnumTag for PresenceUpdateMessage.Kind(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

_QWORD *destructiveInjectEnumTag for PresenceUpdateMessage.Kind(_QWORD *result, int a2)
{
  if (a2 < 0)
  {
    result[2] = 0;
    result[3] = 0;
    *result = a2 ^ 0x80000000;
    result[1] = 0;
  }
  else if (a2)
  {
    result[1] = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for PresenceUpdateMessage.Kind()
{
  return &type metadata for PresenceUpdateMessage.Kind;
}

unint64_t lazy protocol witness table accessor for type CRDTGeneration and conformance CRDTGeneration()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CRDTGeneration and conformance CRDTGeneration;
  if (!lazy protocol witness table cache variable for type CRDTGeneration and conformance CRDTGeneration)
  {
    result = MEMORY[0x24BD0F8BC](&protocol conformance descriptor for CRDTGeneration, &type metadata for CRDTGeneration);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CRDTGeneration and conformance CRDTGeneration);
  }
  return result;
}

void type metadata completion function for GroupSession.JoinState()
{
  unint64_t v0;
  _QWORD v1[6];

  v1[4] = MEMORY[0x24BEE0190] + 64;
  type metadata accessor for CheckedContinuation<(), Error>();
  if (v0 <= 0x3F)
  {
    swift_getTupleTypeLayout2();
    v1[5] = v1;
    swift_initEnumMetadataMultiPayload();
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for GroupSession.JoinState(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  int EnumCaseMultiPayload;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      *a1 = *a2;
      swift_retain();
      v9 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DispatchWorkItem, CheckedContinuation<(), Error>))
                  + 48);
      v10 = (char *)a1 + v9;
      v11 = (char *)a2 + v9;
      v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(_QWORD *)(v5 + 64));
    }
    else
    {
      *a1 = *a2;
      swift_retain();
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t destroy for GroupSession.JoinState(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result == 1)
  {
    swift_release();
    v3 = a1
       + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DispatchWorkItem, CheckedContinuation<(), Error>))
                + 48);
    v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  }
  else if (!(_DWORD)result)
  {
    return swift_release();
  }
  return result;
}

_QWORD *initializeWithCopy for GroupSession.JoinState(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    *a1 = *a2;
    swift_retain();
    v7 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DispatchWorkItem, CheckedContinuation<(), Error>))
                + 48);
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
    swift_storeEnumTagMultiPayload();
  }
  else if (EnumCaseMultiPayload)
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    *a1 = *a2;
    swift_retain();
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

_QWORD *assignWithCopy for GroupSession.JoinState(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  int EnumCaseMultiPayload;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;

  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a3 - 8);
    (*(void (**)(_QWORD *, uint64_t))(v5 + 8))(a1, a3);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      *a1 = *a2;
      swift_retain();
      v7 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DispatchWorkItem, CheckedContinuation<(), Error>))
                  + 48);
      v8 = (char *)a1 + v7;
      v9 = (char *)a2 + v7;
      v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(_QWORD *)(v5 + 64));
    }
    else
    {
      *a1 = *a2;
      swift_retain();
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

_QWORD *initializeWithTake for GroupSession.JoinState(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  if (swift_getEnumCaseMultiPayload() == 1)
  {
    *a1 = *a2;
    v6 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DispatchWorkItem, CheckedContinuation<(), Error>))
                + 48);
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

_QWORD *assignWithTake for GroupSession.JoinState(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a3 - 8);
    (*(void (**)(_QWORD *, uint64_t))(v5 + 8))(a1, a3);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *a1 = *a2;
      v6 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (DispatchWorkItem, CheckedContinuation<(), Error>))
                  + 48);
      v7 = (char *)a1 + v6;
      v8 = (char *)a2 + v6;
      v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(), Error>);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(v5 + 64));
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for GroupSession.JoinState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a3 - 8) + 48))();
}

uint64_t storeEnumTagSinglePayload for GroupSession.JoinState(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a4 - 8) + 56))();
}

uint64_t destructiveInjectEnumTag for GroupSession.JoinState()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t type metadata accessor for GroupSession.JoinState(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for GroupSession.JoinState);
}

void type metadata accessor for CheckedContinuation<(), Error>()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for CheckedContinuation<(), Error>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Error);
    v0 = type metadata accessor for CheckedContinuation();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for CheckedContinuation<(), Error>);
  }
}

uint64_t compatibilityInitializeAvailabilityCheck()
{
  return _initializeAvailabilityCheck(1);
}

uint64_t __isPlatformVersionAtLeast(uint64_t a1, int a2, int a3, int a4)
{
  BOOL v8;

  if (qword_25792F668 == -1)
  {
    if (qword_25792F670)
      return _availability_version_check();
  }
  else
  {
    dispatch_once_f(&qword_25792F668, 0, (dispatch_function_t)initializeAvailabilityCheck);
    if (qword_25792F670)
      return _availability_version_check();
  }
  if (qword_25792F660 == -1)
  {
    v8 = _MergedGlobals < a2;
    if (_MergedGlobals > a2)
      return 1;
  }
  else
  {
    dispatch_once_f(&qword_25792F660, 0, (dispatch_function_t)compatibilityInitializeAvailabilityCheck);
    v8 = _MergedGlobals < a2;
    if (_MergedGlobals > a2)
      return 1;
  }
  if (v8)
    return 0;
  if (dword_25792F654 > a3)
    return 1;
  return dword_25792F654 >= a3 && dword_25792F658 >= a4;
}

uint64_t initializeAvailabilityCheck()
{
  return _initializeAvailabilityCheck(0);
}

uint64_t _initializeAvailabilityCheck(uint64_t result)
{
  uint64_t (*v1)(void);
  BOOL v2;
  unsigned __int8 *v4;
  uint64_t (*v5)(_QWORD);
  unint64_t v6;
  uint64_t (*v7)(_QWORD, uint64_t, _QWORD, _QWORD);
  uint64_t (*v8)(_QWORD, const char *, uint64_t, unsigned __int8 *);
  uint64_t (*v9)(uint64_t, uint64_t);
  uint64_t (*v10)(uint64_t);
  uint64_t (*v11)(void);
  FILE *v12;
  FILE *v13;
  uint64_t v14;
  size_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  FILE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  FILE *v27;
  unsigned int (*v28)(uint64_t, char *, uint64_t, uint64_t);
  char v29[32];
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v1 = (uint64_t (*)(void))qword_25792F670;
  if (qword_25792F670)
    v2 = (_DWORD)result == 0;
  else
    v2 = 0;
  if (!v2)
  {
    if (MEMORY[0x24BDAC970])
    {
      qword_25792F670 = (uint64_t)MEMORY[0x24BDAC970];
      v1 = MEMORY[0x24BDAC970];
    }
    if (!v1 || (_DWORD)result != 0)
    {
      result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "kCFAllocatorNull");
      if (result)
      {
        v4 = *(unsigned __int8 **)result;
        result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFDataCreateWithBytesNoCopy");
        if (result)
        {
          v5 = (uint64_t (*)(_QWORD))result;
          v6 = (unint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFPropertyListCreateWithData");
          result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFPropertyListCreateFromXMLData");
          if (v6 | result)
          {
            v7 = (uint64_t (*)(_QWORD, uint64_t, _QWORD, _QWORD))result;
            result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFStringCreateWithCStringNoCopy");
            if (result)
            {
              v8 = (uint64_t (*)(_QWORD, const char *, uint64_t, unsigned __int8 *))result;
              result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFDictionaryGetValue");
              if (result)
              {
                v9 = (uint64_t (*)(uint64_t, uint64_t))result;
                result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFGetTypeID");
                if (result)
                {
                  v10 = (uint64_t (*)(uint64_t))result;
                  result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFStringGetTypeID");
                  if (result)
                  {
                    v11 = (uint64_t (*)(void))result;
                    result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFStringGetCString");
                    v28 = (unsigned int (*)(uint64_t, char *, uint64_t, uint64_t))result;
                    if (result)
                    {
                      result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFRelease");
                      if (result)
                      {
                        v12 = (FILE *)result;
                        result = (uint64_t)fopen("/System/Library/CoreServices/SystemVersion.plist", "r");
                        if (result)
                        {
                          v13 = (FILE *)result;
                          v27 = v12;
                          fseek((FILE *)result, 0, 2);
                          v14 = MEMORY[0x24BD0F4B4](v13);
                          if (v14 < 0)
                          {
                            v16 = 0;
                          }
                          else
                          {
                            v15 = v14;
                            rewind(v13);
                            v16 = malloc(v15);
                            if (v16)
                            {
                              v26 = v16;
                              if (fread(v16, 1uLL, v15, v13) == v15)
                              {
                                v17 = v5(0);
                                if (v17)
                                {
                                  v18 = v17;
                                  v19 = v13;
                                  if (v6)
                                    v20 = ((uint64_t (*)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD))v6)(0, v17, 0, 0, 0);
                                  else
                                    v20 = v7(0, v17, 0, 0);
                                  v21 = v20;
                                  if (v20)
                                  {
                                    v22 = v8(0, "ProductVersion", 1536, v4);
                                    if (v22)
                                    {
                                      v23 = v22;
                                      v24 = v9(v21, v22);
                                      ((void (*)(uint64_t))v27)(v23);
                                      if (v24)
                                      {
                                        v25 = v10(v24);
                                        if (v25 == v11())
                                        {
                                          if (v28(v24, v29, 32, 134217984))
                                            sscanf(v29, "%d.%d.%d", &_MergedGlobals, &dword_25792F654, &dword_25792F658);
                                        }
                                      }
                                    }
                                    ((void (*)(uint64_t))v27)(v21);
                                    v19 = v13;
                                  }
                                  ((void (*)(uint64_t))v27)(v18);
                                }
                                else
                                {
                                  v19 = v13;
                                }
                                v16 = v26;
                              }
                              else
                              {
                                v16 = v26;
                                v19 = v13;
                              }
                              goto LABEL_41;
                            }
                          }
                          v19 = v13;
LABEL_41:
                          free(v16);
                          return fclose(v19);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t PersonalGroupSessionProvider.init(id:activity:)()
{
  return MEMORY[0x24BDD1BA8]();
}

uint64_t GroupSessionProvider.isCrossAccount.getter()
{
  return MEMORY[0x24BDD1C30]();
}

uint64_t static GroupSessionProvider.providerIdentifier.getter()
{
  return MEMORY[0x24BDD1C38]();
}

uint64_t GroupSessionProvider.join()()
{
  return MEMORY[0x24BDD1C40]();
}

uint64_t GroupSessionProvider.leave()()
{
  return MEMORY[0x24BDD1C50]();
}

uint64_t GroupSessionProvider.sessions.getter()
{
  return MEMORY[0x24BDD1C60]();
}

uint64_t static GroupActivityMetadata.ActivityType.collaboration.getter()
{
  return MEMORY[0x24BDD1C68]();
}

uint64_t type metadata accessor for GroupActivityMetadata.ActivityType()
{
  return MEMORY[0x24BDD1C78]();
}

uint64_t GroupActivityMetadata.type.setter()
{
  return MEMORY[0x24BDD1CA0]();
}

uint64_t GroupActivityMetadata.init()()
{
  return MEMORY[0x24BDD1CB8]();
}

uint64_t GroupSessionMessenger.MessageContext.source.getter()
{
  return MEMORY[0x24BDD1CF0]();
}

uint64_t type metadata accessor for GroupSessionMessenger.MessageContext()
{
  return MEMORY[0x24BDD1CF8]();
}

uint64_t GroupSessionMessenger.send<A>(_:to:)()
{
  return MEMORY[0x24BDD1D10]();
}

uint64_t GroupSessionMessenger.init<A>(session:)()
{
  return MEMORY[0x24BDD1D30]();
}

uint64_t GroupSessionMessenger.Messages.makeAsyncIterator()()
{
  return MEMORY[0x24BDD1D38]();
}

uint64_t GroupSessionMessenger.messages<A>(of:)()
{
  return MEMORY[0x24BDD1D58]();
}

uint64_t type metadata accessor for GroupSessionMessenger()
{
  return MEMORY[0x24BDD1D60]();
}

uint64_t type metadata accessor for GroupSessionProviderState()
{
  return MEMORY[0x24BDD1D80]();
}

uint64_t GroupSession.localParticipant.getter()
{
  return MEMORY[0x24BDD1DF0]();
}

uint64_t GroupSession.$activeParticipants.getter()
{
  return MEMORY[0x24BDD1E08]();
}

Swift::Void __swiftcall GroupSession.join()()
{
  MEMORY[0x24BDD1E18]();
}

Swift::Void __swiftcall GroupSession.leave()()
{
  MEMORY[0x24BDD1E50]();
}

uint64_t GroupSession.$state.getter()
{
  return MEMORY[0x24BDD1E60]();
}

uint64_t GroupSession.Sessions.makeAsyncIterator()()
{
  return MEMORY[0x24BDD1E68]();
}

uint64_t GroupSession.activity.getter()
{
  return MEMORY[0x24BDD1E88]();
}

uint64_t static GroupActivity._identifiable(by:)()
{
  return MEMORY[0x24BDD1EC8]();
}

uint64_t static GroupActivity.activityIdentifier.getter()
{
  return MEMORY[0x24BDD1ED0]();
}

uint64_t Participant.handle.getter()
{
  return MEMORY[0x24BDD1EF8]();
}

uint64_t type metadata accessor for Participant()
{
  return MEMORY[0x24BDD1F00]();
}

uint64_t type metadata accessor for Participants()
{
  return MEMORY[0x24BDD1F68]();
}

uint64_t AddressableMember.init(handle:)()
{
  return MEMORY[0x24BDD1F98]();
}

uint64_t type metadata accessor for AddressableMember()
{
  return MEMORY[0x24BDD1FA8]();
}

uint64_t static PresenceSessionInfo.default.getter()
{
  return MEMORY[0x24BDD1FE8]();
}

uint64_t type metadata accessor for PresenceSessionInfo()
{
  return MEMORY[0x24BDD1FF0]();
}

uint64_t Logger.logObject.getter()
{
  return MEMORY[0x24BEE78A8]();
}

uint64_t Logger.init(subsystem:category:)()
{
  return MEMORY[0x24BEE78C0]();
}

uint64_t type metadata accessor for Logger()
{
  return MEMORY[0x24BEE78D8]();
}

uint64_t AsyncPublisher.makeAsyncIterator()()
{
  return MEMORY[0x24BDB9B98]();
}

uint64_t CurrentValueSubject.send(_:)()
{
  return MEMORY[0x24BDB9CC0]();
}

uint64_t CurrentValueSubject.init(_:)()
{
  return MEMORY[0x24BDB9D00]();
}

uint64_t Publisher<>.values.getter()
{
  return MEMORY[0x24BDBA128]();
}

uint64_t type metadata accessor for DispatchWorkItemFlags()
{
  return MEMORY[0x24BEE5458]();
}

uint64_t type metadata accessor for DispatchQoS.QoSClass()
{
  return MEMORY[0x24BEE54B0]();
}

uint64_t static DispatchQoS.unspecified.getter()
{
  return MEMORY[0x24BEE54C8]();
}

uint64_t type metadata accessor for DispatchQoS()
{
  return MEMORY[0x24BEE5500]();
}

uint64_t dispatch thunk of DispatchWorkItem.isCancelled.getter()
{
  return MEMORY[0x24BEE55B8]();
}

uint64_t DispatchWorkItem.init(flags:block:)()
{
  return MEMORY[0x24BEE55D8]();
}

uint64_t dispatch thunk of DispatchWorkItem.cancel()()
{
  return MEMORY[0x24BEE55E0]();
}

uint64_t type metadata accessor for DispatchWorkItem()
{
  return MEMORY[0x24BEE55F8]();
}

uint64_t CancellationError.init()()
{
  return MEMORY[0x24BEE67F8]();
}

NSDictionary __swiftcall Dictionary._bridgeToObjectiveC()()
{
  return (NSDictionary)MEMORY[0x24BDCF808]();
}

uint64_t dispatch thunk of Hashable._rawHashValue(seed:)()
{
  return MEMORY[0x24BEE0610]();
}

uint64_t dispatch thunk of static Equatable.== infix(_:_:)()
{
  return MEMORY[0x24BEE0980]();
}

NSString __swiftcall String._bridgeToObjectiveC()()
{
  return (NSString)MEMORY[0x24BDCF9E0]();
}

uint64_t static String._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x24BDCFA28]();
}

uint64_t String.hash(into:)()
{
  return MEMORY[0x24BEE0B20]();
}

Swift::Void __swiftcall String.append(_:)(Swift::String a1)
{
  MEMORY[0x24BEE0BC0](a1._countAndFlagsBits, a1._object);
}

Swift::Int __swiftcall String.UTF8View._foreignCount()()
{
  return MEMORY[0x24BEE0C10]();
}

uint64_t specialized Array._makeUniqueAndReserveCapacityIfNotUnique()()
{
  return MEMORY[0x24BEE1110]();
}

uint64_t static Array._unconditionallyBridgeFromObjectiveC(_:)()
{
  return MEMORY[0x24BDCFBC8]();
}

uint64_t specialized Array._endMutation()()
{
  return MEMORY[0x24BEE1128]();
}

uint64_t specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  return MEMORY[0x24BEE1160]();
}

uint64_t specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)()
{
  return MEMORY[0x24BEE11B8]();
}

uint64_t dispatch thunk of Actor.unownedExecutor.getter()
{
  return MEMORY[0x24BEE6800]();
}

uint64_t CheckedContinuation.resume(throwing:)()
{
  return MEMORY[0x24BEE6820]();
}

uint64_t CheckedContinuation.resume(returning:)()
{
  return MEMORY[0x24BEE6828]();
}

uint64_t type metadata accessor for CheckedContinuation()
{
  return MEMORY[0x24BEE6830]();
}

uint64_t type metadata accessor for CancellationError()
{
  return MEMORY[0x24BEE6838]();
}

uint64_t dispatch thunk of AsyncIteratorProtocol.next()()
{
  return MEMORY[0x24BEE68C8]();
}

uint64_t static MainActor.shared.getter()
{
  return MEMORY[0x24BEE6920]();
}

uint64_t type metadata accessor for MainActor()
{
  return MEMORY[0x24BEE6928]();
}

uint64_t TaskPriority.rawValue.getter()
{
  return MEMORY[0x24BEE6988]();
}

uint64_t type metadata accessor for TaskPriority()
{
  return MEMORY[0x24BEE6990]();
}

uint64_t type metadata accessor for AsyncStream.Continuation.BufferingPolicy()
{
  return MEMORY[0x24BEE6A18]();
}

uint64_t AsyncStream.Continuation.yield(_:)()
{
  return MEMORY[0x24BEE6A30]();
}

Swift::Void __swiftcall AsyncStream.Continuation.finish()()
{
  MEMORY[0x24BEE6A38]();
}

uint64_t type metadata accessor for AsyncStream.Continuation()
{
  return MEMORY[0x24BEE6A40]();
}

uint64_t AsyncStream.makeAsyncIterator()()
{
  return MEMORY[0x24BEE6A50]();
}

uint64_t AsyncStream.Iterator.next(isolation:)()
{
  return MEMORY[0x24BEE6A58]();
}

uint64_t type metadata accessor for AsyncStream()
{
  return MEMORY[0x24BEE6A98]();
}

uint64_t AsyncStream.init(_:bufferingPolicy:_:)()
{
  return MEMORY[0x24BEE6AA0]();
}

uint64_t Task.value.getter()
{
  return MEMORY[0x24BEE6AC0]();
}

Swift::Void __swiftcall Task.cancel()()
{
  MEMORY[0x24BEE6AD0]();
}

uint64_t Task<>.value.getter()
{
  return MEMORY[0x24BEE6B00]();
}

uint64_t static Task<>.isCancelled.getter()
{
  return MEMORY[0x24BEE6B10]();
}

uint64_t static Task<>.checkCancellation()()
{
  return MEMORY[0x24BEE6B20]();
}

uint64_t ThrowingTaskGroup.next(isolation:)()
{
  return MEMORY[0x24BEE6BA0]();
}

uint64_t ThrowingTaskGroup.isEmpty.getter()
{
  return MEMORY[0x24BEE6BB0]();
}

NSSet __swiftcall Set._bridgeToObjectiveC()()
{
  return (NSSet)MEMORY[0x24BDCFCC0]();
}

uint64_t Set.init(minimumCapacity:)()
{
  return MEMORY[0x24BEE15D8]();
}

uint64_t Set.Iterator.init(_cocoa:)()
{
  return MEMORY[0x24BEE1678]();
}

uint64_t static os_log_type_t.info.getter()
{
  return MEMORY[0x24BEE78F0]();
}

uint64_t static os_log_type_t.error.getter()
{
  return MEMORY[0x24BEE7910]();
}

uint64_t static os_log_type_t.fault.getter()
{
  return MEMORY[0x24BEE7920]();
}

uint64_t static os_log_type_t.default.getter()
{
  return MEMORY[0x24BEE7928]();
}

uint64_t type metadata accessor for OS_dispatch_queue.Attributes()
{
  return MEMORY[0x24BEE5688]();
}

uint64_t type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency()
{
  return MEMORY[0x24BEE5760]();
}

uint64_t OS_dispatch_queue.async(group:qos:flags:execute:)()
{
  return MEMORY[0x24BEE5790]();
}

uint64_t OS_dispatch_queue.async(execute:)()
{
  return MEMORY[0x24BEE5798]();
}

uint64_t OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)()
{
  return MEMORY[0x24BEE57A0]();
}

uint64_t static OS_dispatch_queue.global(qos:)()
{
  return MEMORY[0x24BEE57B0]();
}

Swift::Int __swiftcall NSObject._rawHashValue(seed:)(Swift::Int seed)
{
  return MEMORY[0x24BEE5BB8](seed);
}

uint64_t static NSObject.== infix(_:_:)()
{
  return MEMORY[0x24BEE5BC0]();
}

uint64_t type metadata accessor for Optional()
{
  return MEMORY[0x24BEE1C68]();
}

uint64_t UnsafeMutableRawBufferPointer.copyMemory(from:)()
{
  return MEMORY[0x24BEE1F00]();
}

uint64_t UnsafeMutableRawBufferPointer.subscript.setter()
{
  return MEMORY[0x24BEE1F48]();
}

uint64_t dispatch thunk of SetAlgebra.init<A>(_:)()
{
  return MEMORY[0x24BEE22C0]();
}

uint64_t _HashTable.previousHole(before:)()
{
  return MEMORY[0x24BEE22D0]();
}

uint64_t _HashTable.nextHole(atOrAfter:)()
{
  return MEMORY[0x24BEE22E0]();
}

uint64_t __CocoaSet.makeIterator()()
{
  return MEMORY[0x24BEE2300]();
}

uint64_t __CocoaSet.count.getter()
{
  return MEMORY[0x24BEE2330]();
}

uint64_t __CocoaSet.member(for:)()
{
  return MEMORY[0x24BEE2340]();
}

uint64_t __CocoaSet.Iterator.next()()
{
  return MEMORY[0x24BEE2358]();
}

uint64_t __CocoaSet.contains(_:)()
{
  return MEMORY[0x24BEE2360]();
}

uint64_t static _SetStorage.copy(original:)()
{
  return MEMORY[0x24BEE24B8]();
}

uint64_t static _SetStorage.resize(original:capacity:move:)()
{
  return MEMORY[0x24BEE24C0]();
}

uint64_t static _SetStorage.convert(_:capacity:)()
{
  return MEMORY[0x24BEE24C8]();
}

uint64_t static _SetStorage.allocate(capacity:)()
{
  return MEMORY[0x24BEE24D0]();
}

Swift::Void __swiftcall _StringGuts.grow(_:)(Swift::Int a1)
{
  MEMORY[0x24BEE2510](a1);
}

uint64_t _StringGuts.copyUTF8(into:)()
{
  return MEMORY[0x24BEE2518]();
}

uint64_t specialized _ArrayBuffer._getElementSlowPath(_:)()
{
  return MEMORY[0x24BEE2658]();
}

uint64_t _StringObject.sharedUTF8.getter()
{
  return MEMORY[0x24BEE2838]();
}

uint64_t _print_unlocked<A, B>(_:_:)()
{
  return MEMORY[0x24BEE2BE0]();
}

uint64_t _assertionFailure(_:_:file:line:flags:)()
{
  return MEMORY[0x24BEE2F40]();
}

{
  return MEMORY[0x24BEE2F48]();
}

uint64_t _CocoaArrayWrapper.endIndex.getter()
{
  return MEMORY[0x24BEE3068]();
}

uint64_t static _DictionaryStorage.copy(original:)()
{
  return MEMORY[0x24BEE3080]();
}

uint64_t static _DictionaryStorage.resize(original:capacity:move:)()
{
  return MEMORY[0x24BEE3088]();
}

uint64_t static _DictionaryStorage.allocate(capacity:)()
{
  return MEMORY[0x24BEE3098]();
}

uint64_t _fatalErrorMessage(_:_:file:line:flags:)()
{
  return MEMORY[0x24BEE30B0]();
}

Swift::Int __swiftcall _findStringSwitchCase(cases:string:)(Swift::OpaquePointer cases, Swift::String string)
{
  return MEMORY[0x24BEE3290](cases._rawValue, string._countAndFlagsBits, string._object);
}

uint64_t withThrowingTaskGroup<A, B>(of:returning:isolation:body:)()
{
  return MEMORY[0x24BEE6FA8]();
}

uint64_t KeyedDecodingContainer.decode(_:forKey:)()
{
  return MEMORY[0x24BEE3350]();
}

{
  return MEMORY[0x24BEE3370]();
}

uint64_t KeyedEncodingContainer.encode(_:forKey:)()
{
  return MEMORY[0x24BEE34A0]();
}

{
  return MEMORY[0x24BEE34C0]();
}

uint64_t dispatch thunk of CustomStringConvertible.description.getter()
{
  return MEMORY[0x24BEE3568]();
}

uint64_t withCheckedContinuation<A>(isolation:function:_:)()
{
  return MEMORY[0x24BEE7040]();
}

uint64_t DefaultStringInterpolation.appendInterpolation<A>(_:)()
{
  return MEMORY[0x24BEE3930]();
}

uint64_t _stringCompareWithSmolCheck(_:_:expecting:)()
{
  return MEMORY[0x24BEE3A30]();
}

uint64_t withTaskCancellationHandler<A>(operation:onCancel:isolation:)()
{
  return MEMORY[0x24BEE7098]();
}

uint64_t withCheckedThrowingContinuation<A>(isolation:function:_:)()
{
  return MEMORY[0x24BEE70E0]();
}

uint64_t ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return MEMORY[0x24BEE3ED0]();
}

uint64_t KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return MEMORY[0x24BEE3ED8]();
}

uint64_t Error._getEmbeddedNSError()()
{
  return MEMORY[0x24BEE3EF8]();
}

uint64_t Error._code.getter()
{
  return MEMORY[0x24BEE3F00]();
}

uint64_t Error._domain.getter()
{
  return MEMORY[0x24BEE3F08]();
}

uint64_t Error._userInfo.getter()
{
  return MEMORY[0x24BEE3F10]();
}

uint64_t Hasher.init(_seed:)()
{
  return MEMORY[0x24BEE42E0]();
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt a1)
{
  MEMORY[0x24BEE42F8](a1);
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt8 a1)
{
  MEMORY[0x24BEE4300](a1);
}

Swift::Int __swiftcall Hasher._finalize()()
{
  return MEMORY[0x24BEE4328]();
}

uint64_t dispatch thunk of Decoder.container<A>(keyedBy:)()
{
  return MEMORY[0x24BEE4608]();
}

uint64_t dispatch thunk of Encoder.container<A>(keyedBy:)()
{
  return MEMORY[0x24BEE4638]();
}

uint64_t CodingKey.description.getter()
{
  return MEMORY[0x24BEE4A08]();
}

uint64_t CodingKey.debugDescription.getter()
{
  return MEMORY[0x24BEE4A10]();
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x24BDAC720](aBlock);
}

void _Block_release(const void *aBlock)
{
  MEMORY[0x24BDAC738](aBlock);
}

uint64_t _availability_version_check()
{
  return MEMORY[0x24BDAC970]();
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x24BDACB90](dso, log, type, format, buf, *(_QWORD *)&size);
}

uint64_t _swift_stdlib_bridgeErrorToNSError()
{
  return MEMORY[0x24BEE4B30]();
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x24BDAD320](a1, a2);
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x24BDADCC0](queue, block);
}

void dispatch_once_f(dispatch_once_t *predicate, void *context, dispatch_function_t function)
{
  MEMORY[0x24BDADEA0](predicate, context, function);
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return (void *)MEMORY[0x24BDAE088](__handle, __symbol);
}

int fclose(FILE *a1)
{
  return MEMORY[0x24BDAE2E0](a1);
}

FILE *__cdecl fopen(const char *__filename, const char *__mode)
{
  return (FILE *)MEMORY[0x24BDAE410](__filename, __mode);
}

size_t fread(void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x24BDAE448](__ptr, __size, __nitems, __stream);
}

void free(void *a1)
{
  MEMORY[0x24BDAE450](a1);
}

int fseek(FILE *a1, uint64_t a2, int a3)
{
  return MEMORY[0x24BDAE4D8](a1, a2, *(_QWORD *)&a3);
}

uint64_t ftell(FILE *a1)
{
  return MEMORY[0x24BDAE530](a1);
}

void *__cdecl malloc(size_t __size)
{
  return (void *)MEMORY[0x24BDAED08](__size);
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x24BDAED60](ptr);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x24BDAEE80](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x24BDAEE98](__dst, __src, __len);
}

id objc_allocWithZone(Class a1)
{
  return (id)MEMORY[0x24BEDCF78](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x24BEDCF88]();
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x24BEDCFD0](a1);
}

void objc_destroyWeak(id *location)
{
  MEMORY[0x24BEDD038](location);
}

id objc_loadWeakRetained(id *location)
{
  return (id)MEMORY[0x24BEDD0E8](location);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return (id)MEMORY[0x24BEDD108](a1, a2);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x24BEDD120](a1, a2);
}

uint64_t objc_opt_respondsToSelector()
{
  return MEMORY[0x24BEDD160]();
}

uint64_t objc_opt_self()
{
  return MEMORY[0x24BEDD168]();
}

void objc_release(id a1)
{
  MEMORY[0x24BEDD188](a1);
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x24BEDD2A0](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x24BEDD2B8](a1);
}

void objc_storeStrong(id *location, id obj)
{
  MEMORY[0x24BEDD410](location, obj);
}

id objc_storeWeak(id *location, id obj)
{
  return (id)MEMORY[0x24BEDD420](location, obj);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x24BDAF398](oslog, type);
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
  MEMORY[0x24BDAF460](lock);
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
  MEMORY[0x24BDAF488](lock);
}

void rewind(FILE *a1)
{
  MEMORY[0x24BDAFB98](a1);
}

int sscanf(const char *a1, const char *a2, ...)
{
  return MEMORY[0x24BDAFEA0](a1, a2);
}

uint64_t swift_allocBox()
{
  return MEMORY[0x24BEE4B58]();
}

uint64_t swift_allocError()
{
  return MEMORY[0x24BEE4B68]();
}

uint64_t swift_allocObject()
{
  return MEMORY[0x24BEE4B70]();
}

uint64_t swift_allocateGenericClassMetadata()
{
  return MEMORY[0x24BEE4B78]();
}

uint64_t swift_allocateGenericValueMetadata()
{
  return MEMORY[0x24BEE4B80]();
}

uint64_t swift_arrayDestroy()
{
  return MEMORY[0x24BEE4B98]();
}

uint64_t swift_arrayInitWithCopy()
{
  return MEMORY[0x24BEE4BA0]();
}

uint64_t swift_arrayInitWithTakeBackToFront()
{
  return MEMORY[0x24BEE4BA8]();
}

uint64_t swift_arrayInitWithTakeFrontToBack()
{
  return MEMORY[0x24BEE4BB0]();
}

uint64_t swift_beginAccess()
{
  return MEMORY[0x24BEE4BB8]();
}

uint64_t swift_bridgeObjectRelease()
{
  return MEMORY[0x24BEE4BC0]();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return MEMORY[0x24BEE4BC8]();
}

uint64_t swift_bridgeObjectRetain()
{
  return MEMORY[0x24BEE4BD0]();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return MEMORY[0x24BEE4BD8]();
}

uint64_t swift_checkMetadataState()
{
  return MEMORY[0x24BEE4BE0]();
}

uint64_t swift_deallocClassInstance()
{
  return MEMORY[0x24BEE4C00]();
}

uint64_t swift_deallocObject()
{
  return MEMORY[0x24BEE4C10]();
}

uint64_t swift_deallocPartialClassInstance()
{
  return MEMORY[0x24BEE4C18]();
}

uint64_t swift_defaultActor_deallocate()
{
  return MEMORY[0x24BEE71E0]();
}

uint64_t swift_defaultActor_destroy()
{
  return MEMORY[0x24BEE71E8]();
}

uint64_t swift_defaultActor_initialize()
{
  return MEMORY[0x24BEE71F0]();
}

uint64_t swift_dynamicCast()
{
  return MEMORY[0x24BEE4C38]();
}

uint64_t swift_endAccess()
{
  return MEMORY[0x24BEE4C98]();
}

uint64_t swift_errorRelease()
{
  return MEMORY[0x24BEE4CA0]();
}

uint64_t swift_errorRetain()
{
  return MEMORY[0x24BEE4CA8]();
}

uint64_t swift_getEnumCaseMultiPayload()
{
  return MEMORY[0x24BEE4D08]();
}

uint64_t swift_getForeignTypeMetadata()
{
  return MEMORY[0x24BEE4D40]();
}

uint64_t swift_getGenericMetadata()
{
  return MEMORY[0x24BEE4D80]();
}

uint64_t swift_getObjCClassMetadata()
{
  return MEMORY[0x24BEE4DB0]();
}

uint64_t swift_getObjectType()
{
  return MEMORY[0x24BEE4DB8]();
}

uint64_t swift_getTupleTypeLayout2()
{
  return MEMORY[0x24BEE4DE0]();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return MEMORY[0x24BEE4E10]();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return MEMORY[0x24BEE4E18]();
}

uint64_t swift_getWitnessTable()
{
  return MEMORY[0x24BEE4E20]();
}

uint64_t swift_initClassMetadata2()
{
  return MEMORY[0x24BEE4E28]();
}

uint64_t swift_initEnumMetadataMultiPayload()
{
  return MEMORY[0x24BEE4E30]();
}

uint64_t swift_initStackObject()
{
  return MEMORY[0x24BEE4E48]();
}

uint64_t swift_initStructMetadata()
{
  return MEMORY[0x24BEE4E58]();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return MEMORY[0x24BEE4E98]();
}

uint64_t swift_lookUpClassMethod()
{
  return MEMORY[0x24BEE4EA8]();
}

uint64_t swift_once()
{
  return MEMORY[0x24BEE4EC8]();
}

uint64_t swift_release()
{
  return MEMORY[0x24BEE4EF8]();
}

uint64_t swift_release_n()
{
  return MEMORY[0x24BEE4F00]();
}

uint64_t swift_retain()
{
  return MEMORY[0x24BEE4F08]();
}

uint64_t swift_retain_n()
{
  return MEMORY[0x24BEE4F10]();
}

uint64_t swift_setDeallocating()
{
  return MEMORY[0x24BEE4F30]();
}

uint64_t swift_slowAlloc()
{
  return MEMORY[0x24BEE4F38]();
}

uint64_t swift_slowDealloc()
{
  return MEMORY[0x24BEE4F40]();
}

uint64_t swift_stdlib_isStackAllocationSafe()
{
  return MEMORY[0x24BEE4F48]();
}

uint64_t swift_storeEnumTagMultiPayload()
{
  return MEMORY[0x24BEE4F58]();
}

uint64_t swift_taskGroup_wait_next_throwing()
{
  return MEMORY[0x24BEE7218]();
}

uint64_t swift_task_alloc()
{
  return MEMORY[0x24BEE7228]();
}

uint64_t swift_task_create()
{
  return MEMORY[0x24BEE7230]();
}

uint64_t swift_task_dealloc()
{
  return MEMORY[0x24BEE7238]();
}

uint64_t swift_task_switch()
{
  return MEMORY[0x24BEE7278]();
}

uint64_t swift_unexpectedError()
{
  return MEMORY[0x24BEE4F68]();
}

uint64_t swift_unknownObjectRelease()
{
  return MEMORY[0x24BEE4F70]();
}

uint64_t swift_unknownObjectRetain()
{
  return MEMORY[0x24BEE4F80]();
}

uint64_t swift_unknownObjectWeakAssign()
{
  return MEMORY[0x24BEE4FB0]();
}

uint64_t swift_unknownObjectWeakCopyAssign()
{
  return MEMORY[0x24BEE4FB8]();
}

uint64_t swift_unknownObjectWeakCopyInit()
{
  return MEMORY[0x24BEE4FC0]();
}

uint64_t swift_unknownObjectWeakDestroy()
{
  return MEMORY[0x24BEE4FC8]();
}

uint64_t swift_unknownObjectWeakInit()
{
  return MEMORY[0x24BEE4FD0]();
}

uint64_t swift_unknownObjectWeakLoadStrong()
{
  return MEMORY[0x24BEE4FD8]();
}

uint64_t swift_unknownObjectWeakTakeAssign()
{
  return MEMORY[0x24BEE4FE0]();
}

uint64_t swift_unknownObjectWeakTakeInit()
{
  return MEMORY[0x24BEE4FE8]();
}

uint64_t swift_weakInit()
{
  return MEMORY[0x24BEE5030]();
}

uint64_t swift_weakLoadStrong()
{
  return MEMORY[0x24BEE5038]();
}

uint64_t swift_willThrow()
{
  return MEMORY[0x24BEE5050]();
}

uint64_t swift_willThrowTypedImpl()
{
  return MEMORY[0x24BEE5058]();
}

