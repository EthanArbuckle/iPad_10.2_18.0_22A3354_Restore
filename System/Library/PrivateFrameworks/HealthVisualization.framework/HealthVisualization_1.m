_QWORD *assignWithTake for CoreChartTrendDiagram(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  int *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t (*v42)(char *, uint64_t, int *);
  int v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void (*v59)(char *, char *, uint64_t);
  uint64_t v60;
  int *v61;
  _QWORD *v62;

  *a1 = *a2;
  if (a1 != a2)
  {
    v6 = a3[5];
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    sub_1BC997208((uint64_t)a1 + v6, (uint64_t (*)(_QWORD))sub_1BCA0D378);
    sub_1BCA0D378(0);
    v10 = v9;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v11 = sub_1BCAB5904();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v7, v8, v11);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
    }
  }
  v12 = a3[6];
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  *(_QWORD *)((char *)a1 + v12) = *(_QWORD *)((char *)a2 + v12);
  swift_release();
  *((_QWORD *)v13 + 1) = *((_QWORD *)v14 + 1);
  v15 = a3[7];
  v16 = (char *)a1 + v15;
  v17 = (char *)a2 + v15;
  *(_QWORD *)((char *)a1 + v15) = *(_QWORD *)((char *)a2 + v15);
  swift_release();
  *((_QWORD *)v16 + 1) = *((_QWORD *)v17 + 1);
  v61 = a3;
  v62 = a2;
  v18 = a3[8];
  v19 = (char *)a1 + v18;
  v20 = (char *)a2 + v18;
  *(_DWORD *)v19 = *(_DWORD *)((char *)a2 + v18);
  v21 = *(void **)((char *)a1 + v18 + 8);
  *((_QWORD *)v19 + 1) = *(_QWORD *)((char *)a2 + v18 + 8);

  v19[16] = v20[16];
  v22 = type metadata accessor for CoreChartTrendViewModel(0);
  v23 = *(int *)(v22 + 28);
  v24 = &v19[v23];
  v25 = &v20[v23];
  v26 = sub_1BCAB4BD8();
  v58 = *(_QWORD *)(v26 - 8);
  v59 = *(void (**)(char *, char *, uint64_t))(v58 + 40);
  v59(v24, v25, v26);
  v27 = (int *)type metadata accessor for CoreChartTrendLineViewModel(0);
  *(_QWORD *)&v24[v27[5]] = *(_QWORD *)&v25[v27[5]];
  v28 = v27[6];
  v29 = &v24[v28];
  v30 = &v25[v28];
  v32 = *(_QWORD *)v30;
  v31 = *((_QWORD *)v30 + 1);
  *(_QWORD *)v29 = v32;
  *((_QWORD *)v29 + 1) = v31;
  swift_bridgeObjectRelease();
  v33 = v27[7];
  v34 = &v24[v33];
  v35 = &v25[v33];
  v37 = *(_QWORD *)v35;
  v36 = *((_QWORD *)v35 + 1);
  *(_QWORD *)v34 = v37;
  *((_QWORD *)v34 + 1) = v36;
  swift_bridgeObjectRelease();
  v60 = v22;
  v38 = *(int *)(v22 + 32);
  v39 = &v19[v38];
  v40 = &v20[v38];
  v41 = *((_QWORD *)v27 - 1);
  v42 = *(uint64_t (**)(char *, uint64_t, int *))(v41 + 48);
  v43 = v42(&v19[v38], 1, v27);
  v44 = v42(v40, 1, v27);
  if (!v43)
  {
    if (!v44)
    {
      v59(v39, v40, v26);
      *(_QWORD *)&v39[v27[5]] = *(_QWORD *)&v40[v27[5]];
      v48 = v27[6];
      v49 = &v39[v48];
      v50 = &v40[v48];
      v52 = *(_QWORD *)v50;
      v51 = *((_QWORD *)v50 + 1);
      *(_QWORD *)v49 = v52;
      *((_QWORD *)v49 + 1) = v51;
      swift_bridgeObjectRelease();
      v53 = v27[7];
      v54 = &v39[v53];
      v55 = &v40[v53];
      v57 = *(_QWORD *)v55;
      v56 = *((_QWORD *)v55 + 1);
      *(_QWORD *)v54 = v57;
      *((_QWORD *)v54 + 1) = v56;
      swift_bridgeObjectRelease();
      goto LABEL_11;
    }
    sub_1BC997208((uint64_t)v39, type metadata accessor for CoreChartTrendLineViewModel);
    goto LABEL_10;
  }
  if (v44)
  {
LABEL_10:
    sub_1BCA0D60C(0);
    memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
    goto LABEL_11;
  }
  (*(void (**)(char *, char *, uint64_t))(v58 + 32))(v39, v40, v26);
  *(_QWORD *)&v39[v27[5]] = *(_QWORD *)&v40[v27[5]];
  *(_OWORD *)&v39[v27[6]] = *(_OWORD *)&v40[v27[6]];
  *(_OWORD *)&v39[v27[7]] = *(_OWORD *)&v40[v27[7]];
  (*(void (**)(char *, _QWORD, uint64_t, int *))(v41 + 56))(v39, 0, 1, v27);
LABEL_11:
  *(_QWORD *)&v19[*(int *)(v60 + 36)] = *(_QWORD *)&v20[*(int *)(v60 + 36)];
  swift_bridgeObjectRelease();
  v46 = v61[10];
  *((_BYTE *)a1 + v61[9]) = *((_BYTE *)v62 + v61[9]);
  *(_QWORD *)((char *)a1 + v46) = *(_QWORD *)((char *)v62 + v46);
  return a1;
}

uint64_t getEnumTagSinglePayload for CoreChartTrendDiagram()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BCA11924(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int v11;

  sub_1BC998AB0(0, &qword_1ED6C3548, (uint64_t (*)(uint64_t))MEMORY[0x1E0CD86F8], MEMORY[0x1E0CD87E8]);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = a3[5];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  if ((_DWORD)a2 != 2147483646)
  {
    v8 = type metadata accessor for CoreChartTrendViewModel(0);
    v7 = *(_QWORD *)(v8 - 8);
    v9 = a3[8];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v10 = *(_QWORD *)(a1 + a3[6]);
  if (v10 >= 0xFFFFFFFF)
    LODWORD(v10) = -1;
  v11 = v10 - 1;
  if (v11 < 0)
    v11 = -1;
  return (v11 + 1);
}

uint64_t storeEnumTagSinglePayload for CoreChartTrendDiagram()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_1BCA119F8(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  sub_1BC998AB0(0, &qword_1ED6C3548, (uint64_t (*)(uint64_t))MEMORY[0x1E0CD86F8], MEMORY[0x1E0CD87E8]);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = a4[5];
  }
  else
  {
    if (a3 == 2147483646)
    {
      *(_QWORD *)(a1 + a4[6]) = a2;
      return;
    }
    v10 = type metadata accessor for CoreChartTrendViewModel(0);
    v9 = *(_QWORD *)(v10 - 8);
    v11 = a4[8];
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
}

void sub_1BCA11AB0()
{
  unint64_t v0;
  unint64_t v1;

  sub_1BCA0D378(319);
  if (v0 <= 0x3F)
  {
    type metadata accessor for CoreChartTrendViewModel(319);
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for CoreChartTrendLineView(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int (*v25)(char *, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v27 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v27 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_1BCAB4E54();
    v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v8((uint64_t *)((char *)a1 + a3[5]), (uint64_t *)((char *)a2 + a3[5]), v7);
    v9 = a3[6];
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = sub_1BCAB4F68();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
    v13 = a3[8];
    *(_OWORD *)((char *)a1 + a3[7]) = *(_OWORD *)((char *)a2 + a3[7]);
    *(uint64_t *)((char *)a1 + v13) = *(uint64_t *)((char *)a2 + v13);
    v14 = a3[9];
    v15 = a3[10];
    v16 = (uint64_t *)((char *)a1 + v14);
    v17 = (uint64_t *)((char *)a2 + v14);
    v18 = v17[1];
    v19 = *(uint64_t *)((char *)a2 + v15);
    *v16 = *v17;
    v16[1] = v18;
    *(uint64_t *)((char *)a1 + v15) = v19;
    v20 = a3[11];
    v21 = (char *)a1 + v20;
    v22 = (char *)a2 + v20;
    v23 = sub_1BCAB5904();
    v24 = *(_QWORD *)(v23 - 8);
    v25 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48);
    swift_bridgeObjectRetain();
    swift_retain();
    if (v25(v22, 1, v23))
    {
      sub_1BCA0F338(0);
      memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v21, v22, v23);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
    }
  }
  return a1;
}

uint64_t destroy for CoreChartTrendLineView(uint64_t a1, int *a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  v4 = sub_1BCAB4E54();
  v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v5(a1, v4);
  v5(a1 + a2[5], v4);
  v6 = a1 + a2[6];
  v7 = sub_1BCAB4F68();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  swift_bridgeObjectRelease();
  swift_release();
  v8 = a1 + a2[11];
  v9 = sub_1BCAB5904();
  v10 = *(_QWORD *)(v9 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
  return result;
}

uint64_t initializeWithCopy for CoreChartTrendLineView(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  const void *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int (*v24)(const void *, uint64_t, uint64_t);
  uint64_t v25;

  v6 = sub_1BCAB4E54();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v8 = a3[6];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = sub_1BCAB4F68();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
  v12 = a3[8];
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  *(_QWORD *)(a1 + v12) = *(_QWORD *)(a2 + v12);
  v13 = a3[9];
  v14 = a3[10];
  v15 = (_QWORD *)(a1 + v13);
  v16 = (_QWORD *)(a2 + v13);
  v17 = v16[1];
  v18 = *(_QWORD *)(a2 + v14);
  *v15 = *v16;
  v15[1] = v17;
  *(_QWORD *)(a1 + v14) = v18;
  v19 = a3[11];
  v20 = (void *)(a1 + v19);
  v21 = (const void *)(a2 + v19);
  v22 = sub_1BCAB5904();
  v23 = *(_QWORD *)(v22 - 8);
  v24 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v23 + 48);
  swift_bridgeObjectRetain();
  swift_retain();
  if (v24(v21, 1, v22))
  {
    sub_1BCA0F338(0);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v23 + 16))(v20, v21, v22);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
  }
  return a1;
}

uint64_t assignWithCopy for CoreChartTrendLineView(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(void *, uint64_t, uint64_t);
  int v24;
  uint64_t v25;

  v6 = sub_1BCAB4E54();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v8 = a3[6];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = sub_1BCAB4F68();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 24))(v9, v10, v11);
  v12 = a3[7];
  v13 = (_QWORD *)(a1 + v12);
  v14 = (_QWORD *)(a2 + v12);
  *v13 = *v14;
  v13[1] = v14[1];
  *(_QWORD *)(a1 + a3[8]) = *(_QWORD *)(a2 + a3[8]);
  v15 = a3[9];
  v16 = (_QWORD *)(a1 + v15);
  v17 = (_QWORD *)(a2 + v15);
  *v16 = *v17;
  v16[1] = v17[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + a3[10]) = *(_QWORD *)(a2 + a3[10]);
  swift_retain();
  swift_release();
  v18 = a3[11];
  v19 = (void *)(a1 + v18);
  v20 = (void *)(a2 + v18);
  v21 = sub_1BCAB5904();
  v22 = *(_QWORD *)(v21 - 8);
  v23 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v22 + 48);
  LODWORD(v10) = v23(v19, 1, v21);
  v24 = v23(v20, 1, v21);
  if (!(_DWORD)v10)
  {
    if (!v24)
    {
      (*(void (**)(void *, void *, uint64_t))(v22 + 24))(v19, v20, v21);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v22 + 8))(v19, v21);
    goto LABEL_6;
  }
  if (v24)
  {
LABEL_6:
    sub_1BCA0F338(0);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v22 + 16))(v19, v20, v21);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
  return a1;
}

uint64_t initializeWithTake for CoreChartTrendLineView(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  const void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v6 = sub_1BCAB4E54();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v8 = a3[6];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = sub_1BCAB4F68();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
  v12 = a3[8];
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  *(_QWORD *)(a1 + v12) = *(_QWORD *)(a2 + v12);
  v13 = a3[10];
  *(_OWORD *)(a1 + a3[9]) = *(_OWORD *)(a2 + a3[9]);
  *(_QWORD *)(a1 + v13) = *(_QWORD *)(a2 + v13);
  v14 = a3[11];
  v15 = (void *)(a1 + v14);
  v16 = (const void *)(a2 + v14);
  v17 = sub_1BCAB5904();
  v18 = *(_QWORD *)(v17 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
  {
    sub_1BCA0F338(0);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v18 + 32))(v15, v16, v17);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
  }
  return a1;
}

uint64_t assignWithTake for CoreChartTrendLineView(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(void *, uint64_t, uint64_t);
  int v24;
  uint64_t v25;

  v6 = sub_1BCAB4E54();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v8 = a3[6];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = sub_1BCAB4F68();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  v12 = a3[8];
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  *(_QWORD *)(a1 + v12) = *(_QWORD *)(a2 + v12);
  v13 = a3[9];
  v14 = (_QWORD *)(a1 + v13);
  v15 = (uint64_t *)(a2 + v13);
  v17 = *v15;
  v16 = v15[1];
  *v14 = v17;
  v14[1] = v16;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + a3[10]) = *(_QWORD *)(a2 + a3[10]);
  swift_release();
  v18 = a3[11];
  v19 = (void *)(a1 + v18);
  v20 = (void *)(a2 + v18);
  v21 = sub_1BCAB5904();
  v22 = *(_QWORD *)(v21 - 8);
  v23 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v22 + 48);
  LODWORD(v10) = v23(v19, 1, v21);
  v24 = v23(v20, 1, v21);
  if (!(_DWORD)v10)
  {
    if (!v24)
    {
      (*(void (**)(void *, void *, uint64_t))(v22 + 40))(v19, v20, v21);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v22 + 8))(v19, v21);
    goto LABEL_6;
  }
  if (v24)
  {
LABEL_6:
    sub_1BCA0F338(0);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v22 + 32))(v19, v20, v21);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
  return a1;
}

uint64_t getEnumTagSinglePayload for CoreChartTrendLineView()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BCA1240C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v16;

  v6 = sub_1BCAB4E54();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = sub_1BCAB4F68();
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v13 = a3[6];
LABEL_10:
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    sub_1BCA0F338(0);
    v8 = v16;
    v12 = *(_QWORD *)(v16 - 8);
    v13 = a3[11];
    goto LABEL_10;
  }
  v14 = *(_QWORD *)(a1 + a3[9] + 8);
  if (v14 >= 0xFFFFFFFF)
    LODWORD(v14) = -1;
  return (v14 + 1);
}

uint64_t storeEnumTagSinglePayload for CoreChartTrendLineView()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BCA124E8(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = sub_1BCAB4E54();
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    result = sub_1BCAB4F68();
    v14 = *(_QWORD *)(result - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = result;
      v15 = a4[6];
    }
    else
    {
      if (a3 == 0x7FFFFFFF)
      {
        *(_QWORD *)(a1 + a4[9] + 8) = (a2 - 1);
        return result;
      }
      sub_1BCA0F338(0);
      v10 = v16;
      v14 = *(_QWORD *)(v16 - 8);
      v15 = a4[11];
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_1BCA125B4()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  sub_1BCAB4E54();
  if (v0 <= 0x3F)
  {
    sub_1BCAB4F68();
    if (v1 <= 0x3F)
    {
      sub_1BCA0F338(319);
      if (v2 <= 0x3F)
        swift_initStructMetadata();
    }
  }
}

uint64_t sub_1BCA12684()
{
  return sub_1BCA0EC74(&qword_1EF4791E8, (uint64_t (*)(uint64_t))sub_1BCA126B8, (uint64_t (*)(void))sub_1BCA1272C, MEMORY[0x1E0CE0798]);
}

void sub_1BCA126B8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EF4791F0)
  {
    sub_1BCA03158(255, &qword_1EF479098, (uint64_t (*)(uint64_t))sub_1BCA0F08C, (uint64_t (*)(uint64_t))sub_1BCA0D628, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CD9BF0]);
    v0 = sub_1BCAB6384();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EF4791F0);
  }
}

unint64_t sub_1BCA1272C()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[6];

  result = qword_1EF4791F8;
  if (!qword_1EF4791F8)
  {
    sub_1BCA03158(255, &qword_1EF479098, (uint64_t (*)(uint64_t))sub_1BCA0F08C, (uint64_t (*)(uint64_t))sub_1BCA0D628, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CD9BF0]);
    v2 = v1;
    sub_1BCA0EFF0(255);
    v4 = v3;
    sub_1BC9B69A0();
    v6[2] = v4;
    v6[3] = v5;
    v6[4] = sub_1BCA0F168(&qword_1EF479080, (uint64_t (*)(uint64_t))sub_1BCA0EFF0, sub_1BCA0F1D8, sub_1BCA0F218);
    v6[5] = sub_1BC996948(&qword_1ED6C3608, (uint64_t (*)(uint64_t))sub_1BC9B69A0, MEMORY[0x1E0DECD88]);
    v6[0] = swift_getOpaqueTypeConformance2();
    v6[1] = sub_1BC996948((unint64_t *)&qword_1ED6C35B8, (uint64_t (*)(uint64_t))sub_1BCA0D628, MEMORY[0x1E0CDCF80]);
    result = MEMORY[0x1BCCFBE84](MEMORY[0x1E0CD9C20], v2, v6);
    atomic_store(result, (unint64_t *)&qword_1EF4791F8);
  }
  return result;
}

uint64_t sub_1BCA12858()
{
  sub_1BCA0E1E4(255);
  sub_1BCA0E32C(255);
  sub_1BCA0E448(255);
  sub_1BCA0E52C(255);
  sub_1BCA0E5E4(255);
  sub_1BCAB5790();
  sub_1BCA0E678();
  sub_1BCA0E6FC();
  swift_getOpaqueTypeConformance2();
  swift_getOpaqueTypeConformance2();
  swift_getOpaqueTypeConformance2();
  swift_getOpaqueTypeConformance2();
  swift_getOpaqueTypeConformance2();
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1BCA12998@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1BCA09E1C(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t sub_1BCA129A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;

  v1 = type metadata accessor for CoreChartTrendDiagram(0);
  v2 = *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  v3 = v0 + ((v2 + 16) & ~v2);
  v4 = v3 + *(int *)(v1 + 20);
  sub_1BCA0D378(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v5 = sub_1BCAB5904();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  }
  else
  {
    swift_release();
  }
  swift_release();
  swift_release();
  v6 = v3 + *(int *)(v1 + 32);

  v7 = type metadata accessor for CoreChartTrendViewModel(0);
  v8 = v6 + *(int *)(v7 + 28);
  v9 = sub_1BCAB4BD8();
  v10 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8);
  v10(v8, v9);
  v11 = type metadata accessor for CoreChartTrendLineViewModel(0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v12 = v6 + *(int *)(v7 + 32);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(v12, 1, v11))
  {
    v10(v12, v9);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

double sub_1BCA12B40(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for CoreChartTrendDiagram(0) - 8) + 80);
  return sub_1BCA0C6FC(a1, (double *)(v1 + ((v3 + 16) & ~v3)));
}

uint64_t sub_1BCA12B7C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1BC9BFB64(0, &qword_1EF478F38, (uint64_t (*)(uint64_t))sub_1BCA0D764, MEMORY[0x1E0CDA240], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CD9BF0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1BCA12BE0(uint64_t a1)
{
  uint64_t v2;

  sub_1BC9BFB64(0, &qword_1EF478F38, (uint64_t (*)(uint64_t))sub_1BCA0D764, MEMORY[0x1E0CDA240], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CD9BF0]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1BCA12C3C()
{
  return objectdestroy_16Tm((uint64_t (*)(_QWORD))type metadata accessor for CoreChartTrendDistributionSeries);
}

uint64_t sub_1BCA12C48(uint64_t a1)
{
  return sub_1BCA12E08(a1, (uint64_t (*)(_QWORD))type metadata accessor for CoreChartTrendDistributionSeries, (uint64_t (*)(uint64_t, uint64_t))sub_1BC995FD4);
}

uint64_t sub_1BCA12C5C()
{
  return objectdestroy_16Tm((uint64_t (*)(_QWORD))type metadata accessor for CoreChartTrendLineSeries);
}

uint64_t objectdestroy_16Tm(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = a1(0);
  v3 = v1
     + ((*(unsigned __int8 *)(*(_QWORD *)(v2 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v2 - 8) + 80));

  v4 = type metadata accessor for CoreChartTrendViewModel(0);
  v5 = v3 + *(int *)(v4 + 28);
  v6 = sub_1BCAB4BD8();
  v7 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8);
  v7(v5, v6);
  v8 = type metadata accessor for CoreChartTrendLineViewModel(0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v9 = v3 + *(int *)(v4 + 32);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v9, 1, v8))
  {
    v7(v9, v6);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  v10 = v3 + *(int *)(v2 + 20);
  v11 = sub_1BCAB4F68();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  return swift_deallocObject();
}

uint64_t sub_1BCA12DD4(uint64_t a1)
{
  return sub_1BCA12E08(a1, (uint64_t (*)(_QWORD))type metadata accessor for CoreChartTrendLineSeries, (uint64_t (*)(uint64_t, uint64_t))sub_1BCA599A0);
}

uint64_t sub_1BCA12DE8()
{
  return objectdestroy_16Tm((uint64_t (*)(_QWORD))type metadata accessor for CoreChartTrendBarSeries);
}

uint64_t sub_1BCA12DF4(uint64_t a1)
{
  return sub_1BCA12E08(a1, (uint64_t (*)(_QWORD))type metadata accessor for CoreChartTrendBarSeries, (uint64_t (*)(uint64_t, uint64_t))sub_1BCAA941C);
}

uint64_t sub_1BCA12E08(uint64_t a1, uint64_t (*a2)(_QWORD), uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t v3;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(a2(0) - 8) + 80);
  return a3(a1, v3 + ((v5 + 16) & ~v5));
}

void sub_1BCA12E64()
{
  unint64_t TupleTypeMetadata3;
  uint64_t v1;

  if (!qword_1EF479210)
  {
    sub_1BCA0DA98(255);
    sub_1BCA0E078(255);
    sub_1BCA0E7E4(255);
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1)
      atomic_store(TupleTypeMetadata3, (unint64_t *)&qword_1EF479210);
  }
}

uint64_t sub_1BCA12EE8()
{
  return sub_1BCAB6204();
}

uint64_t KeyValueDomainChangePublisher.CacheData.init(dateValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  v4 = sub_1BCAB4E54();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a2, 1, 1, v4);
  return sub_1BCA12F54(a1, a2);
}

uint64_t sub_1BCA12F54(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1BC9AFF04(0, &qword_1ED6C7280, (void (*)(uint64_t))MEMORY[0x1E0CB0870]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1BCA12FB0()
{
  return 0x756C615665746164;
}

uint64_t sub_1BCA12FCC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x756C615665746164 && a2 == 0xE900000000000065)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_1BCAB67C8();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_1BCA1306C()
{
  sub_1BCA131D4();
  return sub_1BCAB68D0();
}

uint64_t sub_1BCA13094()
{
  sub_1BCA131D4();
  return sub_1BCAB68DC();
}

uint64_t KeyValueDomainChangePublisher.CacheData.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;

  sub_1BCA13448(0, &qword_1ED6C4780, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED170]);
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v6 = (char *)&v8 - v5;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BCA131D4();
  sub_1BCAB68B8();
  sub_1BCAB4E54();
  sub_1BC996948(&qword_1ED6C6978, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], MEMORY[0x1E0CB0890]);
  sub_1BCAB6738();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t sub_1BCA131D4()
{
  unint64_t result;

  result = qword_1ED6C4190;
  if (!qword_1ED6C4190)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCAC3AAC, &type metadata for KeyValueDomainChangePublisher.CacheData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED6C4190);
  }
  return result;
}

uint64_t KeyValueDomainChangePublisher.CacheData.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v17 = a2;
  sub_1BC9AFF04(0, &qword_1ED6C7280, (void (*)(uint64_t))MEMORY[0x1E0CB0870]);
  MEMORY[0x1E0C80A78](v3);
  v18 = (uint64_t)&v17 - v4;
  sub_1BCA13448(0, &qword_1ED6C46F0, MEMORY[0x1E0DED048]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v17 - v8;
  v10 = type metadata accessor for KeyValueDomainChangePublisher.CacheData();
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_1BCAB4E54();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v12, 1, 1, v13);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BCA131D4();
  v14 = v19;
  sub_1BCAB68AC();
  if (!v14)
  {
    v15 = v17;
    sub_1BC996948(&qword_1ED6C7518, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], MEMORY[0x1E0CB08C0]);
    sub_1BCAB66A8();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    sub_1BCA12F54(v18, (uint64_t)v12);
    sub_1BC9964B8((uint64_t)v12, v15, (uint64_t (*)(_QWORD))type metadata accessor for KeyValueDomainChangePublisher.CacheData);
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return sub_1BC997208((uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for KeyValueDomainChangePublisher.CacheData);
}

void sub_1BCA13448(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_1BCA131D4();
    v7 = a3(a1, &type metadata for KeyValueDomainChangePublisher.CacheData.CodingKeys, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t type metadata accessor for KeyValueDomainChangePublisher.CacheData()
{
  uint64_t result;

  result = qword_1ED6C3140;
  if (!qword_1ED6C3140)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_1BCA134E0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return KeyValueDomainChangePublisher.CacheData.init(from:)(a1, a2);
}

uint64_t sub_1BCA134F4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;

  sub_1BCA13448(0, &qword_1ED6C4780, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED170]);
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v6 = (char *)&v8 - v5;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BCA131D4();
  sub_1BCAB68B8();
  sub_1BCAB4E54();
  sub_1BC996948(&qword_1ED6C6978, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], MEMORY[0x1E0CB0890]);
  sub_1BCAB6738();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t KeyValueDomainChangePublisher.publisher.getter()
{
  return swift_retain();
}

void sub_1BCA13614(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  os_unfair_lock_s *v5;

  v3 = *(_QWORD *)(v1 + 24);
  v4 = v3 + *(_QWORD *)(*MEMORY[0x1E0DEC528] + *(_QWORD *)v3 + 16);
  v5 = (os_unfair_lock_s *)(v3 + ((*(unsigned int *)(*(_QWORD *)v3 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v5);
  sub_1BC9964B8(v4, a1, (uint64_t (*)(_QWORD))type metadata accessor for KeyValueDomainChangePublisher.CacheData);
  os_unfair_lock_unlock(v5);
}

uint64_t KeyValueDomainChangePublisher.__allocating_init(cacheData:context:darwinNotificationName:key:keyValueDomain:sampleTypes:valueKind:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v17;

  v17 = swift_allocObject();
  KeyValueDomainChangePublisher.init(cacheData:context:darwinNotificationName:key:keyValueDomain:sampleTypes:valueKind:)(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  return v17;
}

uint64_t KeyValueDomainChangePublisher.init(cacheData:context:darwinNotificationName:key:keyValueDomain:sampleTypes:valueKind:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(uint64_t);
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD v40[2];
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51[2];
  uint64_t v52;

  v49 = a8;
  v41 = a6;
  v42 = a7;
  v40[0] = a4;
  v40[1] = a5;
  v43 = a2;
  v44 = a9;
  v45 = a3;
  sub_1BCA13B54();
  v48 = v10;
  v46 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BC9AFF04(0, &qword_1ED6C7280, (void (*)(uint64_t))MEMORY[0x1E0CB0870]);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)v40 - v14;
  sub_1BC9AFF04(0, &qword_1ED6C41A8, (void (*)(uint64_t))type metadata accessor for KeyValueDomainChangePublisher.CacheData);
  MEMORY[0x1E0C80A78](v16);
  v18 = (char *)v40 - v17;
  v19 = type metadata accessor for KeyValueDomainChangePublisher.CacheData();
  v20 = *(_QWORD *)(v19 - 8);
  MEMORY[0x1E0C80A78](v19);
  v22 = (char *)v40 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v23);
  v25 = (char *)v40 - v24;
  v47 = a1;
  sub_1BC9D1640(a1, (uint64_t)v18, &qword_1ED6C41A8, (void (*)(uint64_t))type metadata accessor for KeyValueDomainChangePublisher.CacheData);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19) == 1)
  {
    v26 = sub_1BCAB4E54();
    v27 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56);
    v27(v15, 1, 1, v26);
    v27(v22, 1, 1, v26);
    sub_1BCA12F54((uint64_t)v15, (uint64_t)v22);
    sub_1BCA13BE8((uint64_t)v22, (uint64_t)v25);
    sub_1BC9D11F4((uint64_t)v18, &qword_1ED6C41A8, (void (*)(uint64_t))type metadata accessor for KeyValueDomainChangePublisher.CacheData);
  }
  else
  {
    sub_1BCA13BE8((uint64_t)v18, (uint64_t)v25);
  }
  sub_1BCA13C2C();
  v28 = swift_allocObject();
  *(_DWORD *)(v28 + ((*(unsigned int *)(*(_QWORD *)v28 + 48) + 3) & 0x1FFFFFFFCLL)) = 0;
  sub_1BC9964B8((uint64_t)v25, v28 + *(_QWORD *)(*MEMORY[0x1E0DEC528] + *(_QWORD *)v28 + 16), (uint64_t (*)(_QWORD))type metadata accessor for KeyValueDomainChangePublisher.CacheData);
  sub_1BC997208((uint64_t)v25, (uint64_t (*)(_QWORD))type metadata accessor for KeyValueDomainChangePublisher.CacheData);
  v29 = v50;
  *(_QWORD *)(v50 + 24) = v28;
  sub_1BCAB546C();
  v30 = (uint64_t (*)(uint64_t))MEMORY[0x1E0D2BE60];
  swift_allocObject();
  v52 = sub_1BCAB5460();
  v31 = v49;
  sub_1BC9C2428(v49, (uint64_t)v51);
  v32 = (_QWORD *)swift_allocObject();
  v33 = v42;
  v32[2] = v41;
  v32[3] = v33;
  sub_1BC9C42A4(v51, (uint64_t)(v32 + 4));
  v34 = v45;
  v32[9] = v43;
  v32[10] = v34;
  v35 = v44;
  v32[11] = v28;
  v32[12] = v35;
  v36 = swift_allocObject();
  *(_QWORD *)(v36 + 16) = sub_1BCA13CD4;
  *(_QWORD *)(v36 + 24) = v32;
  sub_1BCAB5034();
  sub_1BC996948(&qword_1ED6C4BE0, v30, MEMORY[0x1E0D2BE58]);
  swift_retain();
  sub_1BCAB58B0();
  swift_release();
  sub_1BC996948(&qword_1ED6C4CE0, (uint64_t (*)(uint64_t))sub_1BCA13B54, MEMORY[0x1E0C95708]);
  v37 = v48;
  v38 = sub_1BCAB58A4();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v31);
  sub_1BC9D11F4(v47, &qword_1ED6C41A8, (void (*)(uint64_t))type metadata accessor for KeyValueDomainChangePublisher.CacheData);
  (*(void (**)(char *, uint64_t))(v46 + 8))(v12, v37);
  *(_QWORD *)(v29 + 16) = v38;
  return v29;
}

void sub_1BCA13B54()
{
  uint64_t (*v0)(uint64_t);
  unint64_t v1;
  uint64_t v2;

  if (!qword_1ED6C4CE8)
  {
    sub_1BCAB546C();
    v0 = (uint64_t (*)(uint64_t))MEMORY[0x1E0D2BE60];
    sub_1BCAB5034();
    sub_1BC996948(&qword_1ED6C4BE0, v0, MEMORY[0x1E0D2BE58]);
    v1 = sub_1BCAB57D8();
    if (!v2)
      atomic_store(v1, (unint64_t *)&qword_1ED6C4CE8);
  }
}

uint64_t sub_1BCA13BE8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for KeyValueDomainChangePublisher.CacheData();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_1BCA13C2C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED6C4D98)
  {
    type metadata accessor for KeyValueDomainChangePublisher.CacheData();
    type metadata accessor for os_unfair_lock_s(255);
    v0 = sub_1BCAB651C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED6C4D98);
  }
}

uint64_t sub_1BCA13C90()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 32);
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1BCA13CD4@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  void *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;

  v3 = (void *)v1[2];
  v4 = v1[3];
  v5 = v1 + 4;
  v6 = v1[9];
  v7 = v1[10];
  v9 = v1[11];
  v8 = v1[12];
  type metadata accessor for KeyValueDomainChangePublisher();
  return sub_1BCA13D48(v3, v4, v5, v6, v7, v9, v8, a1);
}

uint64_t sub_1BCA13D48@<X0>(void *a1@<X0>, uint64_t isUniquelyReferenced_nonNull_native@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X4>, unint64_t a5@<X5>, unint64_t a6@<X6>, unint64_t a7@<X7>, uint64_t a8@<X8>)
{
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  os_unfair_lock_s *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t *boxed_opaque_existential_1;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t *v53;
  char *v54;
  NSObject *v55;
  os_log_type_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  id v63;
  _QWORD *v64;
  id v65;
  unint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  _BOOL8 v70;
  uint64_t v71;
  unint64_t v72;
  char v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  void *v78;
  uint64_t v79;
  BOOL v80;
  uint64_t v81;
  char *v82;
  char v83;
  char v84;
  char v85;
  uint64_t v86;
  void *v87;
  char *v88;
  unint64_t v89;
  NSObject *v90;
  os_log_type_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  void (*v96)(char *, uint64_t);
  uint64_t v97;
  uint64_t (*v98)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  void (*v106)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  NSObject *v111;
  os_log_type_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  char *v117;
  uint64_t v118;
  void (*v119)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  os_unfair_lock_s *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t result;
  uint64_t v127;
  unint64_t v128;
  NSObject *v129;
  os_log_type_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  os_unfair_lock_t v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  char *v144;
  uint64_t v145;
  char *v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  unint64_t v154;
  _QWORD *v155;
  char *v156;
  __int128 v157;
  uint64_t v158;
  _OWORD v159[2];
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;

  v153 = a5;
  v148 = a4;
  v151 = sub_1BCAB5514();
  v150 = *(_QWORD *)(v151 - 8);
  MEMORY[0x1E0C80A78](v151);
  v15 = (uint64_t *)((char *)&v136 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v16);
  v156 = (char *)&v136 - v17;
  MEMORY[0x1E0C80A78](v18);
  v146 = (char *)&v136 - v19;
  MEMORY[0x1E0C80A78](v20);
  v147 = (char *)&v136 - v21;
  sub_1BC9AFF04(0, &qword_1ED6C7280, (void (*)(uint64_t))MEMORY[0x1E0CB0870]);
  MEMORY[0x1E0C80A78](v22);
  v143 = (char *)&v136 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v24);
  v144 = (char *)&v136 - v25;
  MEMORY[0x1E0C80A78](v26);
  v28 = (char *)&v136 - v27;
  MEMORY[0x1E0C80A78](v29);
  v31 = (unint64_t)&v136 - v30;
  v32 = type metadata accessor for KeyValueDomainChangePublisher.CacheData();
  MEMORY[0x1E0C80A78](v32);
  MEMORY[0x1E0C80A78](v33);
  MEMORY[0x1E0C80A78](v34);
  v145 = (uint64_t)&v136 - v35;
  MEMORY[0x1E0C80A78](v36);
  v40 = (uint64_t)&v136 - v39;
  v154 = a7;
  v152 = a8;
  if (!(a7 >> 62))
  {
    v155 = *(_QWORD **)((a7 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v155)
      goto LABEL_3;
LABEL_67:
    sub_1BCAB54B4();
    v128 = v153;
    swift_bridgeObjectRetain_n();
    v129 = sub_1BCAB54FC();
    v130 = sub_1BCAB61BC();
    if (os_log_type_enabled(v129, v130))
    {
      v131 = swift_slowAlloc();
      v132 = swift_slowAlloc();
      *(_QWORD *)&v162 = v132;
      *(_DWORD *)v131 = 136446466;
      v133 = sub_1BCAB68E8();
      *(_QWORD *)&v160 = sub_1BC99BD4C(v133, v134, (uint64_t *)&v162);
      sub_1BCAB63A8();
      v135 = v152;
      swift_bridgeObjectRelease();
      *(_WORD *)(v131 + 12) = 2082;
      swift_bridgeObjectRetain();
      *(_QWORD *)&v160 = sub_1BC99BD4C(v148, v128, (uint64_t *)&v162);
      sub_1BCAB63A8();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1BC989000, v129, v130, "[%{public}s]: No affected sample types in %{public}s", (uint8_t *)v131, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1BCCFBF5C](v132, -1, -1);
      MEMORY[0x1BCCFBF5C](v131, -1, -1);

      (*(void (**)(_QWORD *, uint64_t))(v150 + 8))(v15, v151);
    }
    else
    {

      swift_bridgeObjectRelease_n();
      (*(void (**)(_QWORD *, uint64_t))(v150 + 8))(v15, v151);
      v135 = v152;
    }
    v97 = sub_1BCAB5034();
    v98 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v97 - 8) + 56);
    v99 = v135;
    return v98(v99, 1, 1, v97);
  }
LABEL_66:
  v149 = v40;
  v142 = v37;
  v139 = v38;
  swift_bridgeObjectRetain();
  v40 = v149;
  v127 = sub_1BCAB65DC();
  swift_bridgeObjectRelease();
  v38 = v139;
  v37 = v142;
  v155 = (_QWORD *)v127;
  if (!v127)
    goto LABEL_67;
LABEL_3:
  v139 = v38;
  v142 = v37;
  v41 = a6 + *(_QWORD *)(*MEMORY[0x1E0DEC528] + *(_QWORD *)a6 + 16);
  v42 = (os_unfair_lock_s *)(a6 + ((*(unsigned int *)(*(_QWORD *)a6 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v42);
  v141 = v41;
  v149 = v40;
  sub_1BC9964B8(v41, v40, (uint64_t (*)(_QWORD))type metadata accessor for KeyValueDomainChangePublisher.CacheData);
  v140 = v42;
  os_unfair_lock_unlock(v42);
  a6 = a3[3];
  v43 = a3[4];
  __swift_project_boxed_opaque_existential_1(a3, a6);
  (*(void (**)(void *, uint64_t, unint64_t, uint64_t))(v43 + 8))(a1, isUniquelyReferenced_nonNull_native, a6, v43);
  v44 = sub_1BCAB4E54();
  v45 = *(_QWORD *)(v44 - 8);
  v46 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v45 + 48))(v31, 1, v44);
  a3 = v155;
  if (v46 == 1)
  {
    sub_1BC9D11F4(v31, &qword_1ED6C7280, (void (*)(uint64_t))MEMORY[0x1E0CB0870]);
    v162 = 0u;
    v163 = 0u;
  }
  else
  {
    *((_QWORD *)&v163 + 1) = v44;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v162);
    (*(void (**)(uint64_t *, unint64_t, uint64_t))(v45 + 32))(boxed_opaque_existential_1, v31, v44);
  }
  v48 = v153;
  sub_1BC9D1640(v149, (uint64_t)v28, &qword_1ED6C7280, (void (*)(uint64_t))MEMORY[0x1E0CB0870]);
  v49 = sub_1BCAB4E54();
  v50 = *(_QWORD *)(v49 - 8);
  v51 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v50 + 48))(v28, 1, v49);
  v31 = v154;
  v52 = v152;
  if (v51 == 1)
  {
    sub_1BC9D11F4((uint64_t)v28, &qword_1ED6C7280, (void (*)(uint64_t))MEMORY[0x1E0CB0870]);
    v160 = 0u;
    v161 = 0u;
  }
  else
  {
    *((_QWORD *)&v161 + 1) = v49;
    v53 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v160);
    (*(void (**)(uint64_t *, char *, uint64_t))(v50 + 32))(v53, v28, v49);
  }
  if ((sub_1BCA14EE8((uint64_t)&v162, (uint64_t)&v160) & 1) != 0)
  {
    v54 = v156;
    sub_1BCAB54B4();
    swift_bridgeObjectRetain_n();
    v55 = sub_1BCAB54FC();
    v56 = sub_1BCAB61BC();
    if (os_log_type_enabled(v55, v56))
    {
      v57 = swift_slowAlloc();
      v58 = swift_slowAlloc();
      *(_QWORD *)&v159[0] = v58;
      *(_DWORD *)v57 = 136446466;
      v59 = sub_1BCAB68E8();
      *(_QWORD *)&v157 = sub_1BC99BD4C(v59, v60, (uint64_t *)v159);
      sub_1BCAB63A8();
      swift_bridgeObjectRelease();
      *(_WORD *)(v57 + 12) = 2082;
      swift_bridgeObjectRetain();
      *(_QWORD *)&v157 = sub_1BC99BD4C(v148, v48, (uint64_t *)v159);
      sub_1BCAB63A8();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1BC989000, v55, v56, "[%{public}s]: Value did not change in %{public}s", (uint8_t *)v57, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1BCCFBF5C](v58, -1, -1);
      MEMORY[0x1BCCFBF5C](v57, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    (*(void (**)(char *, uint64_t))(v150 + 8))(v54, v151);
    sub_1BC997208((uint64_t)&v160, (uint64_t (*)(_QWORD))sub_1BC9A6170);
    sub_1BC997208((uint64_t)&v162, (uint64_t (*)(_QWORD))sub_1BC9A6170);
    sub_1BC997208(v149, (uint64_t (*)(_QWORD))type metadata accessor for KeyValueDomainChangePublisher.CacheData);
    v97 = sub_1BCAB5034();
    v98 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v97 - 8) + 56);
    v99 = v52;
    return v98(v99, 1, 1, v97);
  }
  v138 = v50;
  v137 = v49;
  a1 = (void *)objc_opt_self();
  v156 = (char *)(v31 & 0xC000000000000001);
  swift_bridgeObjectRetain();
  v40 = MEMORY[0x1E0DEE9E0];
  v61 = 4;
  do
  {
    v15 = (_QWORD *)(v61 - 4);
    if (v156)
      v63 = (id)MEMORY[0x1BCCFB0D4](v61 - 4, v31);
    else
      v63 = *(id *)(v31 + 8 * v61);
    isUniquelyReferenced_nonNull_native = (uint64_t)v63;
    v64 = (_QWORD *)(v61 - 3);
    if (__OFADD__(v15, 1))
    {
      __break(1u);
LABEL_62:
      __break(1u);
LABEL_63:
      __break(1u);
LABEL_64:
      __break(1u);
LABEL_65:
      __break(1u);
      goto LABEL_66;
    }
    swift_bridgeObjectRetain();
    v28 = (char *)(id)isUniquelyReferenced_nonNull_native;
    v65 = objc_msgSend(a1, sel_sampleTypeChangeWithSampleType_dateInterval_hasUnfrozenSeries_, v28, 0, 0);
    v66 = v40 & 0xC000000000000001;
    if (v65)
    {
      a6 = (unint64_t)v65;
      v15 = (_QWORD *)v40;
      if (v66)
      {
        if (v40 < 0)
          v15 = (_QWORD *)v40;
        else
          v15 = (_QWORD *)(v40 & 0xFFFFFFFFFFFFFF8);
        v67 = sub_1BCAB6444();
        if (__OFADD__(v67, 1))
          goto LABEL_63;
        v15 = (_QWORD *)sub_1BCAB36B0((uint64_t)v15, v67 + 1);
      }
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)&v159[0] = v15;
      v31 = sub_1BC9A2E50((uint64_t)v28);
      v69 = v15[2];
      v70 = (v68 & 1) == 0;
      v71 = v69 + v70;
      if (__OFADD__(v69, v70))
        goto LABEL_62;
      a3 = v68;
      if (v15[3] >= v71)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          sub_1BC9A5994();
      }
      else
      {
        sub_1BC9A4844(v71, isUniquelyReferenced_nonNull_native);
        v72 = sub_1BC9A2E50((uint64_t)v28);
        if ((a3 & 1) != (v73 & 1))
        {
          sub_1BCA15B68();
          result = sub_1BCAB6804();
          __break(1u);
          return result;
        }
        v31 = v72;
      }
      v15 = *(_QWORD **)&v159[0];
      isUniquelyReferenced_nonNull_native = 8 * v31;
      if ((a3 & 1) != 0)
      {
        v62 = *(_QWORD *)(*(_QWORD *)&v159[0] + 56);

        *(_QWORD *)(v62 + 8 * v31) = a6;
      }
      else
      {
        *(_QWORD *)(*(_QWORD *)&v159[0] + 8 * (v31 >> 6) + 64) |= 1 << v31;
        *(_QWORD *)(v15[6] + 8 * v31) = v28;
        *(_QWORD *)(v15[7] + 8 * v31) = a6;
        v79 = v15[2];
        v80 = __OFADD__(v79, 1);
        v81 = v79 + 1;
        if (v80)
          goto LABEL_64;
        v15[2] = v81;
        v82 = v28;
      }
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
      v40 = (uint64_t)v15;
      v31 = v154;
      a3 = v155;
    }
    else if (v66)
    {
      if (v40 < 0)
        v74 = v40;
      else
        v74 = v40 & 0xFFFFFFFFFFFFFF8;
      a6 = v28;
      swift_bridgeObjectRetain();
      v75 = sub_1BCAB65A0();

      if (v75)
      {
        swift_unknownObjectRelease();
        v76 = sub_1BCAB6444();
        v15 = (_QWORD *)sub_1BCAB36B0(v74, v76);
        swift_retain();
        isUniquelyReferenced_nonNull_native = sub_1BC9A2E50(a6);
        a3 = v77;
        swift_release();
        if ((a3 & 1) == 0)
          goto LABEL_65;

        v78 = *(void **)(v15[7] + 8 * isUniquelyReferenced_nonNull_native);
        sub_1BCAB3C94(isUniquelyReferenced_nonNull_native, (uint64_t)v15);

        swift_bridgeObjectRelease_n();
        v40 = (uint64_t)v15;
        a3 = v155;
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
    }
    else
    {
      swift_bridgeObjectRetain();
      a6 = sub_1BC9A2E50((uint64_t)v28);
      v84 = v83;
      swift_bridgeObjectRelease();
      if ((v84 & 1) != 0)
      {
        v85 = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)&v159[0] = v40;
        v86 = v40;
        if ((v85 & 1) == 0)
        {
          sub_1BC9A5994();
          v86 = *(_QWORD *)&v159[0];
        }

        v87 = *(void **)(*(_QWORD *)(v86 + 56) + 8 * a6);
        sub_1BCAB3C94(a6, v86);

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v40 = v86;
      }
      else
      {
        swift_bridgeObjectRelease();

      }
    }
    ++v61;
  }
  while (v64 != a3);
  swift_bridgeObjectRelease();
  v88 = v147;
  sub_1BCAB54B4();
  v89 = v153;
  swift_bridgeObjectRetain_n();
  v90 = sub_1BCAB54FC();
  v91 = sub_1BCAB61BC();
  if (os_log_type_enabled(v90, v91))
  {
    v92 = swift_slowAlloc();
    v93 = swift_slowAlloc();
    *(_QWORD *)&v159[0] = v93;
    *(_DWORD *)v92 = 136446466;
    v94 = sub_1BCAB68E8();
    *(_QWORD *)&v157 = sub_1BC99BD4C(v94, v95, (uint64_t *)v159);
    sub_1BCAB63A8();
    swift_bridgeObjectRelease();
    *(_WORD *)(v92 + 12) = 2082;
    swift_bridgeObjectRetain();
    *(_QWORD *)&v157 = sub_1BC99BD4C(v148, v89, (uint64_t *)v159);
    sub_1BCAB63A8();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1BC989000, v90, v91, "[%{public}s]: Emitting changes in %{public}s", (uint8_t *)v92, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1BCCFBF5C](v93, -1, -1);
    MEMORY[0x1BCCFBF5C](v92, -1, -1);

    v96 = *(void (**)(char *, uint64_t))(v150 + 8);
    v96(v147, v151);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    v96 = *(void (**)(char *, uint64_t))(v150 + 8);
    v96(v88, v151);
  }
  v100 = v152;
  v101 = v146;
  sub_1BC9964B8((uint64_t)&v162, (uint64_t)&v157, (uint64_t (*)(_QWORD))sub_1BC9A6170);
  v102 = v138;
  if (v158)
  {
    sub_1BC9A61C8(&v157, v159);
    sub_1BC99C384((uint64_t)v159, (uint64_t)&v157);
    v103 = (uint64_t)v144;
    v104 = v137;
    v105 = swift_dynamicCast();
    v106 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v102 + 56);
    v106(v103, v105 ^ 1u, 1, v104);
    v107 = v142;
    v106(v142, 1, 1, v104);
    sub_1BCA12F54(v103, v107);
    v108 = v139;
    sub_1BCA13BE8(v107, v139);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v159);
    v109 = v108;
  }
  else
  {
    sub_1BC997208((uint64_t)&v157, (uint64_t (*)(_QWORD))sub_1BC9A6170);
    sub_1BCAB54B4();
    v110 = v153;
    swift_bridgeObjectRetain_n();
    v111 = sub_1BCAB54FC();
    v112 = sub_1BCAB61BC();
    if (os_log_type_enabled(v111, v112))
    {
      v113 = swift_slowAlloc();
      v114 = swift_slowAlloc();
      *(_QWORD *)&v159[0] = v114;
      *(_DWORD *)v113 = 136446466;
      v115 = sub_1BCAB68E8();
      *(_QWORD *)&v157 = sub_1BC99BD4C(v115, v116, (uint64_t *)v159);
      sub_1BCAB63A8();
      v100 = v152;
      swift_bridgeObjectRelease();
      *(_WORD *)(v113 + 12) = 2082;
      swift_bridgeObjectRetain();
      *(_QWORD *)&v157 = sub_1BC99BD4C(v148, v110, (uint64_t *)v159);
      sub_1BCAB63A8();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1BC989000, v111, v112, "[%{public}s: No new value to cache, saving nil in %{public}s", (uint8_t *)v113, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1BCCFBF5C](v114, -1, -1);
      MEMORY[0x1BCCFBF5C](v113, -1, -1);

      v117 = v146;
    }
    else
    {

      swift_bridgeObjectRelease_n();
      v117 = v101;
    }
    v96(v117, v151);
    v118 = (uint64_t)v143;
    v119 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v138 + 56);
    v120 = v137;
    v119(v143, 1, 1, v137);
    v121 = v142;
    v119((char *)v142, 1, 1, v120);
    sub_1BCA12F54(v118, v121);
    v109 = v121;
  }
  v122 = v145;
  sub_1BCA13BE8(v109, v145);
  v123 = v140;
  os_unfair_lock_lock(v140);
  v124 = v141;
  sub_1BC997208(v141, (uint64_t (*)(_QWORD))type metadata accessor for KeyValueDomainChangePublisher.CacheData);
  sub_1BC9964B8(v122, v124, (uint64_t (*)(_QWORD))type metadata accessor for KeyValueDomainChangePublisher.CacheData);
  os_unfair_lock_unlock(v123);
  sub_1BCAB5010();
  sub_1BC997208((uint64_t)&v160, (uint64_t (*)(_QWORD))sub_1BC9A6170);
  sub_1BC997208((uint64_t)&v162, (uint64_t (*)(_QWORD))sub_1BC9A6170);
  sub_1BC997208(v149, (uint64_t (*)(_QWORD))type metadata accessor for KeyValueDomainChangePublisher.CacheData);
  sub_1BC997208(v122, (uint64_t (*)(_QWORD))type metadata accessor for KeyValueDomainChangePublisher.CacheData);
  v125 = sub_1BCAB5034();
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v125 - 8) + 56))(v100, 0, 1, v125);
}

uint64_t sub_1BCA14EA4()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1BCA14EC8()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_1BCA14EE8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  int v21;
  void (*v22)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v23;
  char *v24;
  uint64_t v25;
  void (*v26)(uint64_t);
  unsigned int (*v27)(uint64_t, uint64_t, uint64_t);
  char v28;
  char *v29;
  void (*v30)(uint64_t);
  void (*v31)(char *, uint64_t);
  void (*v32)(uint64_t);
  uint64_t v34;
  char *v35;
  _BYTE v36[24];
  uint64_t v37;

  v4 = sub_1BCAB4E54();
  v5 = (void (*)(uint64_t))MEMORY[0x1E0CB0870];
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v35 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BCA15BA4();
  v9 = v8;
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BC9AFF04(0, &qword_1ED6C7280, v5);
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v17 = (char *)&v34 - v16;
  MEMORY[0x1E0C80A78](v18);
  v20 = (char *)&v34 - v19;
  sub_1BC9964B8(a1, (uint64_t)v36, (uint64_t (*)(_QWORD))sub_1BC9A6170);
  if (v37)
  {
    v21 = swift_dynamicCast();
    v22 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56);
    v22(v20, v21 ^ 1u, 1, v4);
  }
  else
  {
    sub_1BC997208((uint64_t)v36, (uint64_t (*)(_QWORD))sub_1BC9A6170);
    v22 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56);
    v22(v20, 1, 1, v4);
  }
  sub_1BC9964B8(a2, (uint64_t)v36, (uint64_t (*)(_QWORD))sub_1BC9A6170);
  if (v37)
  {
    v23 = swift_dynamicCast() ^ 1;
    v24 = v17;
  }
  else
  {
    sub_1BC997208((uint64_t)v36, (uint64_t (*)(_QWORD))sub_1BC9A6170);
    v24 = v17;
    v23 = 1;
  }
  v22(v24, v23, 1, v4);
  v25 = (uint64_t)&v11[*(int *)(v9 + 48)];
  v26 = (void (*)(uint64_t))MEMORY[0x1E0CB0870];
  sub_1BC9D1640((uint64_t)v20, (uint64_t)v11, &qword_1ED6C7280, (void (*)(uint64_t))MEMORY[0x1E0CB0870]);
  sub_1BC9D1640((uint64_t)v17, v25, &qword_1ED6C7280, v26);
  v27 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  if (v27((uint64_t)v11, 1, v4) != 1)
  {
    sub_1BC9D1640((uint64_t)v11, (uint64_t)v14, &qword_1ED6C7280, (void (*)(uint64_t))MEMORY[0x1E0CB0870]);
    if (v27(v25, 1, v4) != 1)
    {
      v29 = v35;
      (*(void (**)(char *, uint64_t, uint64_t))(v6 + 32))(v35, v25, v4);
      v30 = (void (*)(uint64_t))MEMORY[0x1E0CB0870];
      sub_1BC996948(&qword_1EF479250, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], MEMORY[0x1E0CB08B8]);
      v28 = sub_1BCAB5ED4();
      v31 = *(void (**)(char *, uint64_t))(v6 + 8);
      v31(v29, v4);
      v31(v14, v4);
      sub_1BC9D11F4((uint64_t)v11, &qword_1ED6C7280, v30);
      goto LABEL_14;
    }
    (*(void (**)(char *, uint64_t))(v6 + 8))(v14, v4);
    goto LABEL_12;
  }
  if (v27(v25, 1, v4) != 1)
  {
LABEL_12:
    sub_1BC997208((uint64_t)v11, (uint64_t (*)(_QWORD))sub_1BCA15BA4);
    v28 = 0;
    goto LABEL_14;
  }
  sub_1BC9D11F4((uint64_t)v11, &qword_1ED6C7280, (void (*)(uint64_t))MEMORY[0x1E0CB0870]);
  v28 = 1;
LABEL_14:
  v32 = (void (*)(uint64_t))MEMORY[0x1E0CB0870];
  sub_1BC9D11F4((uint64_t)v17, &qword_1ED6C7280, (void (*)(uint64_t))MEMORY[0x1E0CB0870]);
  sub_1BC9D11F4((uint64_t)v20, &qword_1ED6C7280, v32);
  return v28 & 1;
}

uint64_t KeyValueDomainChangePublisher.deinit()
{
  uint64_t v0;

  swift_release();
  swift_release();
  return v0;
}

uint64_t KeyValueDomainChangePublisher.__deallocating_deinit()
{
  swift_release();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t sub_1BCA152F0()
{
  return swift_retain();
}

uint64_t static KeyValueDomainChangePublisher.ValueKind.== infix(_:_:)()
{
  return 1;
}

uint64_t KeyValueDomainChangePublisher.ValueKind.hash(into:)()
{
  return sub_1BCAB687C();
}

uint64_t KeyValueDomainChangePublisher.ValueKind.hashValue.getter()
{
  sub_1BCAB6870();
  sub_1BCAB687C();
  return sub_1BCAB6894();
}

unint64_t sub_1BCA1536C()
{
  unint64_t result;

  result = qword_1EF479218[0];
  if (!qword_1EF479218[0])
  {
    result = MEMORY[0x1BCCFBE84](&protocol conformance descriptor for KeyValueDomainChangePublisher.ValueKind, &type metadata for KeyValueDomainChangePublisher.ValueKind);
    atomic_store(result, qword_1EF479218);
  }
  return result;
}

uint64_t dispatch thunk of KeyValueDomainProxy.date(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t type metadata accessor for KeyValueDomainChangePublisher()
{
  return objc_opt_self();
}

uint64_t method lookup function for KeyValueDomainChangePublisher()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of KeyValueDomainChangePublisher.cacheData.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 96))();
}

uint64_t dispatch thunk of KeyValueDomainChangePublisher.__allocating_init(cacheData:context:darwinNotificationName:key:keyValueDomain:sampleTypes:valueKind:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t *initializeBufferWithCopyOfBuffer for KeyValueDomainChangePublisher.CacheData(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  sub_1BC9AFF04(0, &qword_1ED6C7280, (void (*)(uint64_t))MEMORY[0x1E0CB0870]);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else
  {
    v7 = sub_1BCAB4E54();
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      memcpy(a1, a2, *(_QWORD *)(v5 + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
  }
  return a1;
}

uint64_t destroy for KeyValueDomainChangePublisher.CacheData(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = sub_1BCAB4E54();
  v3 = *(_QWORD *)(v2 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(a1, 1, v2);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
  return result;
}

void *initializeWithCopy for KeyValueDomainChangePublisher.CacheData(void *a1, const void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = sub_1BCAB4E54();
  v5 = *(_QWORD *)(v4 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(a2, 1, v4))
  {
    sub_1BC9AFF04(0, &qword_1ED6C7280, (void (*)(uint64_t))MEMORY[0x1E0CB0870]);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(a1, a2, v4);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, v4);
  }
  return a1;
}

void *assignWithCopy for KeyValueDomainChangePublisher.CacheData(void *a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void *, uint64_t, uint64_t);
  int v7;
  int v8;
  uint64_t v9;

  v4 = sub_1BCAB4E54();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v5 + 48);
  v7 = v6(a1, 1, v4);
  v8 = v6(a2, 1, v4);
  if (!v7)
  {
    if (!v8)
    {
      (*(void (**)(void *, void *, uint64_t))(v5 + 24))(a1, a2, v4);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v5 + 8))(a1, v4);
    goto LABEL_6;
  }
  if (v8)
  {
LABEL_6:
    sub_1BC9AFF04(0, &qword_1ED6C7280, (void (*)(uint64_t))MEMORY[0x1E0CB0870]);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v5 + 16))(a1, a2, v4);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, v4);
  return a1;
}

void *initializeWithTake for KeyValueDomainChangePublisher.CacheData(void *a1, const void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = sub_1BCAB4E54();
  v5 = *(_QWORD *)(v4 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(a2, 1, v4))
  {
    sub_1BC9AFF04(0, &qword_1ED6C7280, (void (*)(uint64_t))MEMORY[0x1E0CB0870]);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v5 + 32))(a1, a2, v4);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, v4);
  }
  return a1;
}

void *assignWithTake for KeyValueDomainChangePublisher.CacheData(void *a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void *, uint64_t, uint64_t);
  int v7;
  int v8;
  uint64_t v9;

  v4 = sub_1BCAB4E54();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v5 + 48);
  v7 = v6(a1, 1, v4);
  v8 = v6(a2, 1, v4);
  if (!v7)
  {
    if (!v8)
    {
      (*(void (**)(void *, void *, uint64_t))(v5 + 40))(a1, a2, v4);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v5 + 8))(a1, v4);
    goto LABEL_6;
  }
  if (v8)
  {
LABEL_6:
    sub_1BC9AFF04(0, &qword_1ED6C7280, (void (*)(uint64_t))MEMORY[0x1E0CB0870]);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v5 + 32))(a1, a2, v4);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for KeyValueDomainChangePublisher.CacheData()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BCA158BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1BC9AFF04(0, &qword_1ED6C7280, (void (*)(uint64_t))MEMORY[0x1E0CB0870]);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for KeyValueDomainChangePublisher.CacheData()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BCA15914(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1BC9AFF04(0, &qword_1ED6C7280, (void (*)(uint64_t))MEMORY[0x1E0CB0870]);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

void sub_1BCA15964()
{
  unint64_t v0;

  sub_1BC9AFF04(319, &qword_1ED6C7280, (void (*)(uint64_t))MEMORY[0x1E0CB0870]);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

ValueMetadata *type metadata accessor for KeyValueDomainChangePublisher.ValueKind()
{
  return &type metadata for KeyValueDomainChangePublisher.ValueKind;
}

uint64_t _s19HealthVisualization29KeyValueDomainChangePublisherC9ValueKindOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1BCA15A34 + 4 * byte_1BCAC3860[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1BCA15A54 + 4 * byte_1BCAC3865[v4]))();
}

_BYTE *sub_1BCA15A34(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1BCA15A54(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1BCA15A5C(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1BCA15A64(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1BCA15A6C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1BCA15A74(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for KeyValueDomainChangePublisher.CacheData.CodingKeys()
{
  return &type metadata for KeyValueDomainChangePublisher.CacheData.CodingKeys;
}

unint64_t sub_1BCA15A94()
{
  unint64_t result;

  result = qword_1EF479248;
  if (!qword_1EF479248)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCAC3A84, &type metadata for KeyValueDomainChangePublisher.CacheData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF479248);
  }
  return result;
}

unint64_t sub_1BCA15ADC()
{
  unint64_t result;

  result = qword_1ED6C41A0;
  if (!qword_1ED6C41A0)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCAC39F4, &type metadata for KeyValueDomainChangePublisher.CacheData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED6C41A0);
  }
  return result;
}

unint64_t sub_1BCA15B24()
{
  unint64_t result;

  result = qword_1ED6C4198;
  if (!qword_1ED6C4198)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCAC3A1C, &type metadata for KeyValueDomainChangePublisher.CacheData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED6C4198);
  }
  return result;
}

unint64_t sub_1BCA15B68()
{
  unint64_t result;

  result = qword_1ED6C71C8;
  if (!qword_1ED6C71C8)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1ED6C71C8);
  }
  return result;
}

void sub_1BCA15BA4()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_1ED6C3650)
  {
    sub_1BC9AFF04(255, &qword_1ED6C7280, (void (*)(uint64_t))MEMORY[0x1E0CB0870]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1ED6C3650);
  }
}

uint64_t sub_1BCA15C18(uint64_t a1, uint64_t *a2, int *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(void *, const void *, uint64_t);
  uint64_t v14;
  void *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;

  v3 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = v4 + ((v3 + 16) & ~(unint64_t)v3);
    swift_retain();
  }
  else
  {
    v7 = a1;
    *(_QWORD *)(a1 + 8) = a2[1];
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
    v8 = a3[6];
    v9 = (void *)(a1 + v8);
    v10 = (char *)a2 + v8;
    v11 = sub_1BCAB4CE0();
    v12 = *(_QWORD *)(v11 - 8);
    v13 = *(void (**)(void *, const void *, uint64_t))(v12 + 16);
    swift_retain();
    v13(v9, v10, v11);
    v14 = a3[7];
    v15 = (void *)(v7 + v14);
    v16 = (char *)a2 + v14;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))((uint64_t)a2 + v14, 1, v11))
    {
      sub_1BC9FCA58(0);
      memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
    else
    {
      v13(v15, v16, v11);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v15, 0, 1, v11);
    }
    v18 = a3[9];
    *(_QWORD *)(v7 + a3[8]) = *(uint64_t *)((char *)a2 + a3[8]);
    v19 = v7 + v18;
    v20 = (uint64_t)a2 + v18;
    *(_QWORD *)v19 = *(_QWORD *)v20;
    *(_BYTE *)(v19 + 8) = *(_BYTE *)(v20 + 8);
    v21 = a3[10];
    v22 = (_QWORD *)(v7 + v21);
    v23 = (uint64_t *)((char *)a2 + v21);
    v24 = v23[1];
    *v22 = *v23;
    v22[1] = v24;
    swift_bridgeObjectRetain();
  }
  return v7;
}

uint64_t sub_1BCA15D80(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t v8;

  swift_release();
  v4 = a1 + *(int *)(a2 + 24);
  v5 = sub_1BCAB4CE0();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v7(v4, v5);
  v8 = a1 + *(int *)(a2 + 28);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v8, 1, v5))
    v7(v8, v5);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1BCA15E18(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void *, const void *, uint64_t);
  uint64_t v13;
  void *v14;
  const void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v7 = a3[6];
  v8 = (void *)(a1 + v7);
  v9 = (const void *)(a2 + v7);
  v10 = sub_1BCAB4CE0();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(void (**)(void *, const void *, uint64_t))(v11 + 16);
  swift_retain();
  v12(v8, v9, v10);
  v13 = a3[7];
  v14 = (void *)(a1 + v13);
  v15 = (const void *)(a2 + v13);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(a2 + v13, 1, v10))
  {
    sub_1BC9FCA58(0);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    v12(v14, v15, v10);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v14, 0, 1, v10);
  }
  v17 = a3[9];
  *(_QWORD *)(a1 + a3[8]) = *(_QWORD *)(a2 + a3[8]);
  v18 = a1 + v17;
  v19 = a2 + v17;
  *(_QWORD *)v18 = *(_QWORD *)v19;
  *(_BYTE *)(v18 + 8) = *(_BYTE *)(v19 + 8);
  v20 = a3[10];
  v21 = (_QWORD *)(a1 + v20);
  v22 = (_QWORD *)(a2 + v20);
  v23 = v22[1];
  *v21 = *v22;
  v21[1] = v23;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1BCA15F50(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void *v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(void *, const void *, uint64_t);
  uint64_t v12;
  void *v13;
  const void *v14;
  uint64_t (*v15)(const void *, uint64_t, uint64_t);
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v6 = a3[6];
  v7 = (void *)(a1 + v6);
  v8 = (const void *)(a2 + v6);
  v9 = sub_1BCAB4CE0();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(void *, const void *, uint64_t))(v10 + 24);
  v11(v7, v8, v9);
  v12 = a3[7];
  v13 = (void *)(a1 + v12);
  v14 = (const void *)(a2 + v12);
  v15 = *(uint64_t (**)(const void *, uint64_t, uint64_t))(v10 + 48);
  v16 = v15((const void *)(a1 + v12), 1, v9);
  v17 = v15(v14, 1, v9);
  if (!v16)
  {
    if (!v17)
    {
      v11(v13, v14, v9);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v10 + 8))(v13, v9);
    goto LABEL_6;
  }
  if (v17)
  {
LABEL_6:
    sub_1BC9FCA58(0);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, const void *, uint64_t))(v10 + 16))(v13, v14, v9);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v13, 0, 1, v9);
LABEL_7:
  *(_QWORD *)(a1 + a3[8]) = *(_QWORD *)(a2 + a3[8]);
  v19 = a3[9];
  v20 = a1 + v19;
  v21 = (uint64_t *)(a2 + v19);
  v22 = *v21;
  *(_BYTE *)(v20 + 8) = *((_BYTE *)v21 + 8);
  *(_QWORD *)v20 = v22;
  v23 = a3[10];
  v24 = (_QWORD *)(a1 + v23);
  v25 = (_QWORD *)(a2 + v23);
  *v24 = *v25;
  v24[1] = v25[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1BCA160F4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void *v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(void *, const void *, uint64_t);
  uint64_t v12;
  void *v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v6 = a3[6];
  v7 = (void *)(a1 + v6);
  v8 = (const void *)(a2 + v6);
  v9 = sub_1BCAB4CE0();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(void *, const void *, uint64_t))(v10 + 32);
  v11(v7, v8, v9);
  v12 = a3[7];
  v13 = (void *)(a1 + v12);
  v14 = (const void *)(a2 + v12);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a2 + v12, 1, v9))
  {
    sub_1BC9FCA58(0);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  else
  {
    v11(v13, v14, v9);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v13, 0, 1, v9);
  }
  v16 = a3[9];
  *(_QWORD *)(a1 + a3[8]) = *(_QWORD *)(a2 + a3[8]);
  v17 = a1 + v16;
  v18 = a2 + v16;
  *(_QWORD *)v17 = *(_QWORD *)v18;
  *(_BYTE *)(v17 + 8) = *(_BYTE *)(v18 + 8);
  *(_OWORD *)(a1 + a3[10]) = *(_OWORD *)(a2 + a3[10]);
  return a1;
}

uint64_t sub_1BCA16210(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void *v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(void *, const void *, uint64_t);
  uint64_t v12;
  void *v13;
  const void *v14;
  uint64_t (*v15)(const void *, uint64_t, uint64_t);
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v6 = a3[6];
  v7 = (void *)(a1 + v6);
  v8 = (const void *)(a2 + v6);
  v9 = sub_1BCAB4CE0();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(void *, const void *, uint64_t))(v10 + 40);
  v11(v7, v8, v9);
  v12 = a3[7];
  v13 = (void *)(a1 + v12);
  v14 = (const void *)(a2 + v12);
  v15 = *(uint64_t (**)(const void *, uint64_t, uint64_t))(v10 + 48);
  v16 = v15((const void *)(a1 + v12), 1, v9);
  v17 = v15(v14, 1, v9);
  if (!v16)
  {
    if (!v17)
    {
      v11(v13, v14, v9);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v10 + 8))(v13, v9);
    goto LABEL_6;
  }
  if (v17)
  {
LABEL_6:
    sub_1BC9FCA58(0);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v13, v14, v9);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v13, 0, 1, v9);
LABEL_7:
  v19 = a3[9];
  *(_QWORD *)(a1 + a3[8]) = *(_QWORD *)(a2 + a3[8]);
  v20 = a1 + v19;
  v21 = a2 + v19;
  *(_QWORD *)v20 = *(_QWORD *)v21;
  *(_BYTE *)(v20 + 8) = *(_BYTE *)(v21 + 8);
  v22 = a3[10];
  v23 = (_QWORD *)(a1 + v22);
  v24 = (uint64_t *)(a2 + v22);
  v26 = *v24;
  v25 = v24[1];
  *v23 = v26;
  v23[1] = v25;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1BCA16398()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BCA163A4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v12;

  v6 = sub_1BCAB4CE0();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = a3[6];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  sub_1BC9FCA58(0);
  v7 = *(_QWORD *)(v10 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v10;
    v9 = a3[7];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v12 = *(_QWORD *)(a1 + a3[10] + 8);
  if (v12 >= 0xFFFFFFFF)
    LODWORD(v12) = -1;
  return (v12 + 1);
}

uint64_t sub_1BCA1644C()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_1BCA16458(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v8 = sub_1BCAB4CE0();
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = a4[6];
LABEL_5:
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
    return;
  }
  sub_1BC9FCA58(0);
  v9 = *(_QWORD *)(v12 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v12;
    v11 = a4[7];
    goto LABEL_5;
  }
  *(_QWORD *)(a1 + a4[10] + 8) = (a2 - 1);
}

uint64_t type metadata accessor for ActivitySummarySnidgetValueView()
{
  uint64_t result;

  result = qword_1ED6C49D8;
  if (!qword_1ED6C49D8)
    return swift_getSingletonMetadata();
  return result;
}

void sub_1BCA16538()
{
  unint64_t v0;
  unint64_t v1;

  sub_1BCAB4CE0();
  if (v0 <= 0x3F)
  {
    sub_1BC9FCA58(319);
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t sub_1BCA165F0()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1BCA16600@<X0>(void (*a1)(char *)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t (*v13)(_QWORD);
  uint64_t v14;
  uint64_t v16;
  _QWORD v17[2];

  v6 = sub_1BCAB4CE0();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BC9FCA58(0);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BC9964B8(v2, (uint64_t)v12, v13);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v12, 1, v6) == 1)
  {
    sub_1BCA174E0(0, &qword_1ED6C4908, sub_1BCA174C4, (void (*)(uint64_t))MEMORY[0x1E0CDCFD0]);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(a2, 1, 1, v14);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, v12, v6);
    a1(v9);
    if (v3)
    {
      return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      sub_1BCA174E0(0, &qword_1ED6C4908, sub_1BCA174C4, (void (*)(uint64_t))MEMORY[0x1E0CDCFD0]);
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(a2, 0, 1, v16);
    }
  }
}

uint64_t sub_1BCA167B8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1BC9998C0(*a1, *a2);
}

uint64_t sub_1BCA167C4()
{
  sub_1BCAB6870();
  sub_1BCAB5F40();
  swift_bridgeObjectRelease();
  return sub_1BCAB6894();
}

uint64_t sub_1BCA16858()
{
  sub_1BCAB5F40();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1BCA168C8()
{
  sub_1BCAB6870();
  sub_1BCAB5F40();
  swift_bridgeObjectRelease();
  return sub_1BCAB6894();
}

uint64_t sub_1BCA16958@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1BCA178EC();
  *a1 = result;
  return result;
}

void sub_1BCA16984(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xE400000000000000;
  v4 = 0xE800000000000000;
  v5 = 0x6573696372657845;
  if (v2 != 1)
  {
    v5 = 0x646E617453;
    v4 = 0xE500000000000000;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 1702260557;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_1BCA169D8@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t KeyPath;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t result;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;

  sub_1BC9FCA58(0);
  MEMORY[0x1E0C80A78](v4);
  v44 = (uint64_t)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BCA17458();
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v46 = (uint64_t)&v40 - v10;
  v11 = sub_1BCAB4CE0();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BCA17370(0);
  MEMORY[0x1E0C80A78](v15);
  v45 = (uint64_t)&v40 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17);
  v19 = (char *)&v40 - v18;
  MEMORY[0x1E0C80A78](v20);
  v22 = (char *)&v40 - v21;
  v43 = type metadata accessor for ActivitySummarySnidgetValueView();
  (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v14, &a1[*(int *)(v43 + 24)], v11);
  v23 = sub_1BCAB5C58();
  v25 = v24;
  v27 = v26;
  v29 = v28;
  KeyPath = swift_getKeyPath();
  v40 = v25;
  v41 = v23;
  v50 = v23;
  v51 = v25;
  v52 = v27 & 1;
  v42 = v29;
  v53 = v29;
  v54 = KeyPath;
  v55 = 1;
  v56 = 0;
  v48 = 0;
  v49 = 0xE000000000000000;
  if (*(_QWORD *)a1)
  {
    swift_retain();
    sub_1BCAB5238();
    v32 = v31;
    swift_release();
    if (!v32)
      sub_1BCAB5F04();
    v47 = a2;
    sub_1BCAB5F70();
    swift_bridgeObjectRelease();
    sub_1BCAB5F70();
    sub_1BCAB5F70();
    swift_bridgeObjectRelease();
    sub_1BCAB5F70();
    sub_1BCA1738C();
    sub_1BCA17600();
    sub_1BCAB5CDC();
    swift_bridgeObjectRelease();
    sub_1BC9C15C0(v41, v40, v27 & 1);
    swift_release();
    swift_bridgeObjectRelease();
    sub_1BC9AE330((uint64_t)v19, (uint64_t)v22, (uint64_t (*)(_QWORD))sub_1BCA17370);
    v33 = v44;
    v34 = sub_1BC9964B8((uint64_t)&a1[*(int *)(v43 + 28)], v44, (uint64_t (*)(_QWORD))sub_1BC9FCA58);
    MEMORY[0x1E0C80A78](v34);
    *(&v40 - 2) = (uint64_t)a1;
    sub_1BCA16600((void (*)(char *))sub_1BCA17680, (uint64_t)v8);
    sub_1BC997208(v33, (uint64_t (*)(_QWORD))sub_1BC9FCA58);
    v35 = v46;
    sub_1BC9AE330((uint64_t)v8, v46, (uint64_t (*)(_QWORD))sub_1BCA17458);
    v36 = v45;
    sub_1BC9964B8((uint64_t)v22, v45, (uint64_t (*)(_QWORD))sub_1BCA17370);
    sub_1BC9964B8(v35, (uint64_t)v8, (uint64_t (*)(_QWORD))sub_1BCA17458);
    v37 = v47;
    sub_1BC9964B8(v36, v47, (uint64_t (*)(_QWORD))sub_1BCA17370);
    sub_1BCA17304();
    sub_1BC9964B8((uint64_t)v8, v37 + *(int *)(v38 + 48), (uint64_t (*)(_QWORD))sub_1BCA17458);
    sub_1BC997208(v35, (uint64_t (*)(_QWORD))sub_1BCA17458);
    sub_1BC997208((uint64_t)v22, (uint64_t (*)(_QWORD))sub_1BCA17370);
    sub_1BC997208((uint64_t)v8, (uint64_t (*)(_QWORD))sub_1BCA17458);
    return sub_1BC997208(v36, (uint64_t (*)(_QWORD))sub_1BCA17370);
  }
  else
  {
    sub_1BCAB5244();
    sub_1BC996948(&qword_1ED6C4968, (uint64_t (*)(uint64_t))MEMORY[0x1E0D2AF00], MEMORY[0x1E0D2AEF8]);
    result = sub_1BCAB59A0();
    __break(1u);
  }
  return result;
}

uint64_t sub_1BCA16E60@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t, uint64_t, __n128);
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t KeyPath;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t result;
  _QWORD v36[2];
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;

  v41 = a3;
  sub_1BC998AB0(0, &qword_1ED6C48E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0D2B678], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v5);
  v44 = (char *)v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)v36 - v8;
  v10 = sub_1BCAB4CE0();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_1BCAB5340();
  v37 = *(_QWORD *)(v14 - 8);
  v38 = v14;
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)v36 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BCA174C4(0);
  v39 = v17;
  v18 = MEMORY[0x1E0C80A78](v17);
  v40 = (char *)v36 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v11 + 16);
  v36[1] = v13;
  v20(v13, a1, v10, v18);
  v21 = type metadata accessor for ActivitySummarySnidgetValueView();
  v22 = a2;
  sub_1BCAB531C();
  v23 = sub_1BCAB5328();
  v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56);
  v25 = 1;
  v24(v9, 0, 1, v23);
  v26 = *(int *)(v21 + 36);
  v27 = v22;
  if ((*((_BYTE *)v22 + v26 + 8) & 1) == 0)
  {
    sub_1BCAB531C();
    v25 = 0;
  }
  v24(v44, v25, 1, v23);
  sub_1BCAB5334();
  KeyPath = swift_getKeyPath();
  v30 = v37;
  v29 = v38;
  v31 = (uint64_t)v40;
  (*(void (**)(char *, char *, uint64_t))(v37 + 16))(v40, v16, v38);
  v32 = v31 + *(int *)(v39 + 36);
  *(_QWORD *)v32 = KeyPath;
  *(_QWORD *)(v32 + 8) = 1;
  *(_BYTE *)(v32 + 16) = 0;
  (*(void (**)(char *, uint64_t))(v30 + 8))(v16, v29);
  v42 = 0;
  v43 = 0xE000000000000000;
  if (*v27)
  {
    swift_retain();
    sub_1BCAB5238();
    v34 = v33;
    swift_release();
    if (!v34)
      sub_1BCAB5F04();
    sub_1BCAB5F70();
    swift_bridgeObjectRelease();
    sub_1BCAB5F70();
    sub_1BCAB5F70();
    swift_bridgeObjectRelease();
    sub_1BCAB5F70();
    sub_1BCA1769C();
    sub_1BCAB5CDC();
    swift_bridgeObjectRelease();
    return sub_1BC997208(v31, (uint64_t (*)(_QWORD))sub_1BCA174C4);
  }
  else
  {
    sub_1BCAB5244();
    sub_1BC996948(&qword_1ED6C4968, (uint64_t (*)(uint64_t))MEMORY[0x1E0D2AF00], MEMORY[0x1E0D2AEF8]);
    result = sub_1BCAB59A0();
    __break(1u);
  }
  return result;
}

uint64_t sub_1BCA17244@<X0>(uint64_t a1@<X8>)
{
  char *v1;
  uint64_t v3;

  *(_QWORD *)a1 = sub_1BCAB5A90();
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  sub_1BCA17284();
  return sub_1BCA169D8(v1, a1 + *(int *)(v3 + 44));
}

void sub_1BCA17284()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED6C48F0)
  {
    sub_1BCA172E8(255);
    v0 = sub_1BCAB5940();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED6C48F0);
  }
}

void sub_1BCA172E8(uint64_t a1)
{
  sub_1BC998AB0(a1, &qword_1ED6C4940, (uint64_t (*)(uint64_t))sub_1BCA17304, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE0648]);
}

void sub_1BCA17304()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_1ED6C4918)
  {
    sub_1BCA17370(255);
    sub_1BCA17458();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1ED6C4918);
  }
}

void sub_1BCA17370(uint64_t a1)
{
  sub_1BCA174E0(a1, &qword_1ED6C4AB8, (void (*)(uint64_t))sub_1BCA1738C, (void (*)(uint64_t))MEMORY[0x1E0CDCFD0]);
}

void sub_1BCA1738C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED6C3580)
  {
    sub_1BCA173E8(255);
    v0 = sub_1BCAB5970();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED6C3580);
  }
}

void sub_1BCA173E8(uint64_t a1)
{
  sub_1BC998AB0(a1, &qword_1ED6C35C8, (uint64_t (*)(uint64_t))sub_1BCA17404, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CDCF68]);
}

void sub_1BCA17404()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED6C6190)
  {
    v0 = sub_1BCAB6384();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED6C6190);
  }
}

void sub_1BCA17458()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED6C4910)
  {
    sub_1BCA174E0(255, &qword_1ED6C4908, sub_1BCA174C4, (void (*)(uint64_t))MEMORY[0x1E0CDCFD0]);
    v0 = sub_1BCAB6384();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED6C4910);
  }
}

void sub_1BCA174C4(uint64_t a1)
{
  sub_1BCA174E0(a1, &qword_1ED6C4900, (void (*)(uint64_t))MEMORY[0x1E0D2B688], sub_1BCA173E8);
}

void sub_1BCA174E0(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), void (*a4)(uint64_t))
{
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    a3(255);
    a4(255);
    v6 = sub_1BCAB5970();
    if (!v7)
      atomic_store(v6, a2);
  }
}

uint64_t sub_1BCA17548@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;

  result = sub_1BCAB59E8();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_1BCA17578@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;

  result = sub_1BCAB59E8();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_1BCA175A8()
{
  return sub_1BCAB59F4();
}

uint64_t sub_1BCA175D4()
{
  return sub_1BCAB59F4();
}

unint64_t sub_1BCA17600()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[2];

  result = qword_1ED6C4A90;
  if (!qword_1ED6C4A90)
  {
    sub_1BCA1738C();
    v2 = v1;
    v3 = sub_1BC996948(&qword_1ED6C4AE8, (uint64_t (*)(uint64_t))sub_1BCA173E8, MEMORY[0x1E0CDCF80]);
    v4[0] = MEMORY[0x1E0CDDD58];
    v4[1] = v3;
    result = MEMORY[0x1BCCFBE84](MEMORY[0x1E0CD9C20], v2, v4);
    atomic_store(result, (unint64_t *)&qword_1ED6C4A90);
  }
  return result;
}

uint64_t sub_1BCA17680@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1BCA16E60(a1, *(_QWORD **)(v2 + 16), a2);
}

unint64_t sub_1BCA1769C()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_1ED6C48F8;
  if (!qword_1ED6C48F8)
  {
    sub_1BCA174C4(255);
    v2 = v1;
    v3[0] = sub_1BC996948(&qword_1ED6C48E8, (uint64_t (*)(uint64_t))MEMORY[0x1E0D2B688], MEMORY[0x1E0D2B668]);
    v3[1] = sub_1BC996948(&qword_1ED6C4AE8, (uint64_t (*)(uint64_t))sub_1BCA173E8, MEMORY[0x1E0CDCF80]);
    result = MEMORY[0x1BCCFBE84](MEMORY[0x1E0CD9C20], v2, v3);
    atomic_store(result, (unint64_t *)&qword_1ED6C48F8);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for ActivitySummarySnidgetValueView.ValueType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1BCA17780 + 4 * byte_1BCAC3B05[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1BCA177B4 + 4 * byte_1BCAC3B00[v4]))();
}

uint64_t sub_1BCA177B4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BCA177BC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BCA177C4);
  return result;
}

uint64_t sub_1BCA177D0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BCA177D8);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1BCA177DC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BCA177E4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ActivitySummarySnidgetValueView.ValueType()
{
  return &type metadata for ActivitySummarySnidgetValueView.ValueType;
}

uint64_t sub_1BCA17800()
{
  return sub_1BC996948(&qword_1ED6C4928, (uint64_t (*)(uint64_t))sub_1BCA1782C, MEMORY[0x1E0CDFCC0]);
}

void sub_1BCA1782C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED6C4930)
  {
    sub_1BCA172E8(255);
    sub_1BC996948(&qword_1ED6C4938, (uint64_t (*)(uint64_t))sub_1BCA172E8, MEMORY[0x1E0CE0680]);
    v0 = sub_1BCAB5DA8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED6C4930);
  }
}

unint64_t sub_1BCA178A8()
{
  unint64_t result;

  result = qword_1EF479258;
  if (!qword_1EF479258)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCAC3C94, &type metadata for ActivitySummarySnidgetValueView.ValueType);
    atomic_store(result, (unint64_t *)&qword_1EF479258);
  }
  return result;
}

uint64_t sub_1BCA178EC()
{
  unint64_t v0;

  v0 = sub_1BCAB6654();
  swift_bridgeObjectRelease();
  if (v0 >= 3)
    return 3;
  else
    return v0;
}

uint64_t sub_1BCA17934(uint64_t a1)
{
  id v1;
  char v3;

  v1 = *(id *)a1;
  v3 = *(_BYTE *)(a1 + 8);
  sub_1BC9A81A4(*(id *)a1, v3);
  swift_retain();
  sub_1BCAB507C();
  sub_1BC9A836C(v1, v3);
  return swift_release();
}

uint64_t sub_1BCA179B4()
{
  uint64_t v1;

  swift_retain();
  sub_1BCAB5070();
  swift_release();
  return v1;
}

id sub_1BCA17A00()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  void *v4;
  void *v5;
  id v6;

  v1 = qword_1ED6C6A28;
  v2 = *(void **)(v0 + qword_1ED6C6A28);
  if (v2)
  {
    v3 = *(id *)(v0 + qword_1ED6C6A28);
  }
  else
  {
    sub_1BCA17A68(v0 + qword_1ED6D39E8);
    v4 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v5;
    v3 = v5;

    v2 = 0;
  }
  v6 = v2;
  return v3;
}

void sub_1BCA17A68(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  id v18;
  uint64_t v19;
  void *v20;
  void (*v21)(char *, uint64_t);
  void *v22;
  _BYTE *v23;
  void *v24;
  void *v25;
  _BYTE *v26;
  int64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, char *, uint64_t);
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  id v42;
  void *v43;
  id v44;
  id v45;
  char *v46;
  id v47;
  uint64_t v48;
  _BYTE *v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  _QWORD aBlock[7];

  v61 = a1;
  v2 = sub_1BCAB4BD8();
  v55 = *(_QWORD *)(v2 - 8);
  v56 = v2;
  MEMORY[0x1E0C80A78](v2);
  v53 = v3;
  v54 = (char *)&v48 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_1BCAB4E54();
  v60 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v48 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1BCAB4E84();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1BCAB4F74();
  v58 = *(_QWORD *)(v11 - 8);
  v59 = v11;
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v48 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64 = sub_1BCAB54A8();
  v57 = *(_QWORD *)(v64 - 8);
  v14 = *(_QWORD *)(v57 + 64);
  MEMORY[0x1E0C80A78](v64);
  v52 = (char *)&v48 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v17 = (char *)&v48 - v16;
  if (qword_1ED6C7098 != -1)
    swift_once();
  v18 = (id)qword_1ED6C69C0;
  v62 = v1;
  v63 = v17;
  sub_1BCAB549C();
  (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(v10, *MEMORY[0x1E0CB0EF8], v7);
  sub_1BCAB4E90();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  v19 = v61;
  sub_1BCAB4BC0();
  v20 = (void *)sub_1BCAB4DE8();
  v21 = *(void (**)(char *, uint64_t))(v60 + 8);
  v21(v6, v4);
  v22 = (void *)sub_1BCAB4F08();
  v23 = objc_msgSend(v20, sel_hk_morningIndexWithCalendar_, v22);

  sub_1BCAB4B9C();
  v24 = (void *)sub_1BCAB4DE8();
  v21(v6, v4);
  v25 = (void *)sub_1BCAB4F08();
  v26 = objc_msgSend(v24, sel_hk_morningIndexWithCalendar_, v25);

  v27 = v26 - v23;
  if (__OFSUB__(v26, v23))
  {
    __break(1u);
  }
  else
  {
    v60 = v27 + 1;
    if (!__OFADD__(v27, 1))
    {
      v50 = *(_QWORD *)&v62[qword_1ED6D38E8];
      v51 = v13;
      v28 = swift_allocObject();
      swift_unknownObjectWeakInit();
      v29 = v57;
      v30 = *(void (**)(char *, char *, uint64_t))(v57 + 16);
      v49 = v23;
      v31 = v52;
      v30(v52, v63, v64);
      v32 = v19;
      v34 = v54;
      v33 = v55;
      v35 = v56;
      (*(void (**)(char *, uint64_t, uint64_t))(v55 + 16))(v54, v32, v56);
      v36 = (*(unsigned __int8 *)(v29 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80);
      v37 = (v14 + *(unsigned __int8 *)(v33 + 80) + v36) & ~(unint64_t)*(unsigned __int8 *)(v33 + 80);
      v38 = (v53 + v37 + 7) & 0xFFFFFFFFFFFFFFF8;
      v39 = swift_allocObject();
      v40 = v31;
      v41 = v64;
      (*(void (**)(unint64_t, char *, uint64_t))(v29 + 32))(v39 + v36, v40, v64);
      (*(void (**)(unint64_t, char *, uint64_t))(v33 + 32))(v39 + v37, v34, v35);
      *(_QWORD *)(v39 + v38) = v28;
      v42 = objc_allocWithZone(MEMORY[0x1E0CB6BF0]);
      aBlock[4] = sub_1BCA192F8;
      aBlock[5] = v39;
      aBlock[0] = MEMORY[0x1E0C809B0];
      aBlock[1] = 1107296256;
      aBlock[2] = sub_1BCA18DA8;
      aBlock[3] = &block_descriptor_3;
      v43 = _Block_copy(aBlock);
      swift_retain();
      v44 = objc_msgSend(v42, sel_initWithMorningIndexRange_ascending_limit_options_resultsHandler_, v49, v60, 1, 0, v50, v43);
      _Block_release(v43);
      swift_release();
      swift_release();
      v45 = v44;
      v46 = v62;
      v47 = objc_msgSend(v62, sel_name);
      objc_msgSend(v45, sel_setDebugIdentifier_, v47);

      objc_msgSend(v45, sel_setCacheSettings_, *(_QWORD *)&v46[qword_1ED6D38F0]);
      objc_msgSend(v45, sel_setQualityOfService_, *(_QWORD *)&v46[qword_1ED6D39F0]);
      (*(void (**)(char *, uint64_t))(v58 + 8))(v51, v59);
      (*(void (**)(char *, uint64_t))(v29 + 8))(v63, v41);
      return;
    }
  }
  __break(1u);
}

id SleepQueryOperation.__allocating_init(dateInterval:name:queryOptions:queryQualityOfService:queryCacheSettings:healthStore:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, void *a7)
{
  objc_class *v7;
  id v15;
  id v16;

  v15 = objc_allocWithZone(v7);
  v16 = sub_1BCA18E38(a1, a2, a3, a4, a5, a6, a7);

  return v16;
}

id SleepQueryOperation.init(dateInterval:name:queryOptions:queryQualityOfService:queryCacheSettings:healthStore:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, void *a7)
{
  id v9;

  v9 = sub_1BCA18E38(a1, a2, a3, a4, a5, a6, a7);

  return v9;
}

uint64_t SleepQueryOperation.__allocating_init(sleepQueryConfig:endDate:healthStore:name:queryQualityOfService:queryCacheSettings:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  NSObject *v29;
  os_log_type_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v43 = a5;
  v45 = a3;
  v46 = a7;
  v40 = a4;
  v41 = a6;
  v9 = sub_1BCAB5514();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v42 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BC998AB0(0, (unint64_t *)&qword_1ED6C71E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAE5D0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v39 - v13;
  v15 = sub_1BCAB4BD8();
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15);
  v18 = (char *)&v39 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19);
  v21 = (char *)&v39 - v20;
  v22 = *(_BYTE *)a1;
  v23 = *(_QWORD *)(a1 + 8);
  v47 = a2;
  DateRange.dateInterval(endingAt:)(a2, v22, (uint64_t)v14);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15) == 1)
  {
    v39 = v23;
    v40 = v10;
    v24 = v22;
    v41 = v9;
    swift_bridgeObjectRelease();
    sub_1BC9B01E4((uint64_t)v14);
    v48 = v44;
    swift_getMetatypeMetadata();
    v25 = sub_1BCAB5F28();
    v27 = v26;
    v28 = v42;
    sub_1BCAB54B4();
    swift_bridgeObjectRetain();
    v29 = sub_1BCAB54FC();
    v30 = sub_1BCAB61A4();
    if (os_log_type_enabled(v29, v30))
    {
      v31 = swift_slowAlloc();
      v32 = swift_slowAlloc();
      v50 = v32;
      *(_DWORD *)v31 = 136380931;
      swift_bridgeObjectRetain();
      v48 = sub_1BC99BD4C(v25, v27, &v50);
      sub_1BCAB63A8();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v31 + 12) = 2081;
      LOBYTE(v48) = v24;
      v49 = v39;
      v33 = sub_1BCAB5F28();
      v48 = sub_1BC99BD4C(v33, v34, &v50);
      sub_1BCAB63A8();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1BC989000, v29, v30, "%{private}s: Attempted to create query with unsupported configuration %{private}s.", (uint8_t *)v31, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1BCCFBF5C](v32, -1, -1);
      MEMORY[0x1BCCFBF5C](v31, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    v37 = sub_1BCAB4E54();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 8))(v47, v37);
    (*(void (**)(char *, uint64_t))(v40 + 8))(v28, v41);
    return 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v21, v14, v15);
    (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v18, v21, v15);
    v35 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t, id, id))(class metadata base offset for SleepQueryOperation
                                                                                        + v44
                                                                                        + 128))(v18, v40, v43, v23, v41, v46, v45);
    v36 = sub_1BCAB4E54();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 8))(v47, v36);
    (*(void (**)(char *, uint64_t))(v16 + 8))(v21, v15);
  }
  return v35;
}

uint64_t sub_1BCA18410()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  void *v5;
  _BYTE *v6;
  Swift::String v7;
  void *v8;
  void *v9;
  Swift::String v10;
  id v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  id v18;
  _BYTE v20[16];
  void *v21;
  char v22;

  v1 = sub_1BCAB54A8();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v4 = &v20[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1BC9A7EA4();
  v5 = (void *)swift_allocError();
  *v6 = 2;
  v21 = v5;
  v22 = 1;
  swift_retain();
  sub_1BCAB507C();

  swift_release();
  sub_1BCAB4BD8();
  sub_1BCA19018();
  v7._countAndFlagsBits = sub_1BCAB6798();
  v9 = v8;
  v10._countAndFlagsBits = 0x676E696E6E7572;
  v10._object = (void *)0xE700000000000000;
  v7._object = v9;
  NSOperation.logLifeCycleEvent(_:withPrivateInfo:)(v10, v7);
  swift_bridgeObjectRelease();
  if (qword_1ED6C7098 != -1)
    swift_once();
  v11 = (id)qword_1ED6C69C0;
  v12 = v0;
  sub_1BCAB549C();
  sub_1BCAB6270();
  sub_1BC9A7EF4();
  v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_1BCABE680;
  v14 = sub_1BCAB5F04();
  v16 = v15;
  *(_QWORD *)(v13 + 56) = MEMORY[0x1E0DEA968];
  *(_QWORD *)(v13 + 64) = sub_1BC9A7FA4();
  *(_QWORD *)(v13 + 32) = v14;
  *(_QWORD *)(v13 + 40) = v16;
  sub_1BCAB5484();
  swift_bridgeObjectRelease();
  v17 = *(void **)&v12[qword_1ED6D39E0];
  v18 = sub_1BCA17A00();
  objc_msgSend(v17, sel_executeQuery_, v18);

  return (*(uint64_t (**)(_BYTE *, uint64_t))(v2 + 8))(v4, v1);
}

void sub_1BCA18684(void *a1)
{
  id v1;

  v1 = a1;
  sub_1BCA18410();

}

void sub_1BCA186B8()
{
  char *v0;
  void *v1;
  _BYTE *v2;
  Swift::String v3;
  void *v4;
  void *v5;
  Swift::String v6;
  void *v7;
  id v8;

  if (objc_msgSend(v0, sel_isCancelled))
  {
    sub_1BC9A7EA4();
    v1 = (void *)swift_allocError();
    *v2 = 3;
    MEMORY[0x1E0C80A78](v1);
    swift_retain();
    sub_1BCAB507C();

    swift_release();
    sub_1BCAB4BD8();
    sub_1BCA19018();
    v3._countAndFlagsBits = sub_1BCAB6798();
    v5 = v4;
    v6._countAndFlagsBits = 0x656C6C65636E6163;
    v6._object = (void *)0xE900000000000064;
    v3._object = v5;
    NSOperation.logLifeCycleEvent(_:withPrivateInfo:)(v6, v3);
    swift_bridgeObjectRelease();
  }
  v7 = *(void **)&v0[qword_1ED6D39E0];
  v8 = sub_1BCA17A00();
  objc_msgSend(v7, sel_stopQuery_, v8);

}

id SleepQueryOperation.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void SleepQueryOperation.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void sub_1BCA18860()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void sub_1BCA1888C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_release();
  v1 = v0 + qword_1ED6D39E8;
  v2 = sub_1BCAB4BD8();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);

}

id SleepQueryOperation.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SleepQueryOperation();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

void sub_1BCA1893C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  swift_release();
  v2 = a1 + qword_1ED6D39E8;
  v3 = sub_1BCAB4BD8();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);

}

uint64_t sub_1BCA189BC@<X0>(uint64_t a1@<X8>)
{
  _QWORD **v1;
  uint64_t result;
  char v4;

  result = (*(uint64_t (**)(void))(class metadata base offset for SleepQueryOperation + (*MEMORY[0x1E0DEEDD8] & **v1) + 80))();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v4 & 1;
  return result;
}

void sub_1BCA18A10(uint64_t a1, void *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  Swift::String v10;
  void *v11;
  void *v12;
  Swift::String v13;
  Swift::String v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  void *v20;
  uint64_t *v21;
  id v22;
  Swift::String v23;
  Swift::String v24;
  uint64_t *v25;

  v8 = a6 + 16;
  sub_1BCAB6264();
  if (qword_1ED6C7098 != -1)
    swift_once();
  sub_1BC9A7EF4();
  v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_1BCABE680;
  v10 = DateInterval.stringWithISO8601Format()();
  *(_QWORD *)(v9 + 56) = MEMORY[0x1E0DEA968];
  *(_QWORD *)(v9 + 64) = sub_1BC9A7FA4();
  *(Swift::String *)(v9 + 32) = v10;
  sub_1BCAB5484();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v11 = (void *)MEMORY[0x1BCCFC004](v8);
  if (v11)
  {
    v12 = v11;
    if ((objc_msgSend(v11, sel_isCancelled) & 1) != 0)
    {
      v13._countAndFlagsBits = 0xD00000000000002DLL;
      v13._object = (void *)0x80000001BCACE790;
      v14._countAndFlagsBits = 0;
      v14._object = (void *)0xE000000000000000;
      NSOperation.logLifeCycleEvent(_:withPrivateInfo:)(v13, v14);
LABEL_7:

      return;
    }
    v15 = (uint64_t)objc_msgSend(v12, sel_isFinished);
    if ((v15 & 1) != 0)
      goto LABEL_7;
    v16 = a2;
    if (!a2)
    {
      if (a3)
        v17 = 0xD00000000000001ALL;
      else
        v17 = 0;
      if (a3)
        v18 = 0x80000001BCAD10C0;
      else
        v18 = 0;
      if (a3)
        v19 = a3 | 0x8000000000000000;
      else
        v19 = 0xC000000000000000;
      sub_1BC9A82C4();
      v20 = (void *)swift_allocError();
      *v21 = v17;
      v21[1] = v18;
      v21[2] = v19;
      swift_getErrorValue();
      v22 = (id)a3;
      sub_1BC9A8308(v17, v18, v19);
      v23._countAndFlagsBits = sub_1BCAB6810();
      v24._countAndFlagsBits = 0;
      v24._object = (void *)0xE000000000000000;
      NSOperation.logErrorString(_:withInfo:)(v23, v24);
      swift_bridgeObjectRelease();

      v15 = swift_allocError();
      v16 = (void *)v15;
      *v25 = v17;
      v25[1] = v18;
      v25[2] = v19;
    }
    MEMORY[0x1E0C80A78](v15);
    swift_bridgeObjectRetain();
    sub_1BCAB50AC();

    sub_1BC9A836C(v16, a2 == 0);
  }
}

void sub_1BCA18D04(uint64_t a1, void *a2, char a3)
{
  char v4;
  Swift::String v5;
  Swift::String v6;

  v4 = a3 & 1;
  sub_1BC9A81A4(a2, a3 & 1);
  swift_retain();
  sub_1BCAB507C();
  sub_1BC9A836C(a2, v4);
  swift_release();
  v5._countAndFlagsBits = 0x64656873696E6966;
  v5._object = (void *)0xE800000000000000;
  v6._countAndFlagsBits = 0;
  v6._object = (void *)0xE000000000000000;
  NSOperation.logLifeCycleEvent(_:withPrivateInfo:)(v5, v6);
}

uint64_t sub_1BCA18DA8(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  uint64_t v5;
  void (*v7)(id, uint64_t, void *);
  id v8;
  id v9;

  v5 = a3;
  v7 = *(void (**)(id, uint64_t, void *))(a1 + 32);
  if (a3)
  {
    sub_1BCA1938C();
    v5 = sub_1BCAB6018();
  }
  swift_retain();
  v8 = a2;
  v9 = a4;
  v7(v8, v5, a4);
  swift_release();

  return swift_bridgeObjectRelease();
}

id sub_1BCA18E38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, void *a7)
{
  char *v7;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  id v23;
  id v24;
  id v25;
  id v26;
  void *v27;
  objc_super v29;
  uint64_t v30;
  char v31;

  v14 = qword_1ED6C3970;
  sub_1BC9A7EA4();
  v15 = swift_allocError();
  *v16 = 0;
  v30 = v15;
  v31 = 1;
  sub_1BC998AB0(0, &qword_1ED6C3680, (uint64_t (*)(uint64_t))sub_1BCA1941C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0D2E5C8]);
  swift_allocObject();
  v17 = v7;
  *(_QWORD *)&v7[v14] = sub_1BCAB50A0();
  *(_QWORD *)&v17[qword_1ED6C6A28] = 0;
  v18 = &v17[qword_1ED6D39E8];
  v19 = sub_1BCAB4BD8();
  v20 = *(_QWORD *)(v19 - 8);
  v21 = v18;
  v22 = a1;
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v21, a1, v19);
  *(_QWORD *)&v17[qword_1ED6D39E0] = a7;
  *(_QWORD *)&v17[qword_1ED6D38E8] = a4;
  *(_QWORD *)&v17[qword_1ED6D39F0] = a5;
  *(_QWORD *)&v17[qword_1ED6D38F0] = a6;
  v23 = a6;
  v24 = a7;

  v29.receiver = v17;
  v29.super_class = (Class)type metadata accessor for SleepQueryOperation();
  v25 = objc_msgSendSuper2(&v29, sel_init);
  v26 = v25;
  if (a3)
  {
    v27 = (void *)sub_1BCAB5EE0();
    swift_bridgeObjectRelease();
  }
  else
  {
    v27 = 0;
  }
  objc_msgSend(v25, sel_setName_, v27);

  (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v22, v19);
  return v25;
}

unint64_t sub_1BCA19018()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1ED6C6948;
  if (!qword_1ED6C6948)
  {
    v1 = sub_1BCAB4BD8();
    result = MEMORY[0x1BCCFBE84](MEMORY[0x1E0CAE608], v1);
    atomic_store(result, (unint64_t *)&qword_1ED6C6948);
  }
  return result;
}

uint64_t type metadata accessor for SleepQueryOperation()
{
  uint64_t result;

  result = qword_1ED6C6A30;
  if (!qword_1ED6C6A30)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_1BCA1909C@<X0>(_QWORD **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  char v4;

  result = (*(uint64_t (**)(void))(class metadata base offset for SleepQueryOperation + (*MEMORY[0x1E0DEEDD8] & **a1) + 80))();
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = v4 & 1;
  return result;
}

uint64_t sub_1BCA190F4()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1BCAB4BD8();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for SleepQueryOperation()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SleepQueryOperation.result.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))(class metadata base offset for SleepQueryOperation + (*MEMORY[0x1E0DEEDD8] & *v0) + 80))();
}

uint64_t dispatch thunk of SleepQueryOperation.__allocating_init(dateInterval:name:queryOptions:queryQualityOfService:queryCacheSettings:healthStore:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(class metadata base offset for SleepQueryOperation + v0 + 128))();
}

uint64_t sub_1BCA19204()
{
  return type metadata accessor for SleepQueryOperation();
}

uint64_t sub_1BCA1920C()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1BCA19230()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v1 = sub_1BCAB54A8();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = *(_QWORD *)(v2 + 64);
  v5 = sub_1BCAB4BD8();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = (v3 + v4 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  (*(void (**)(unint64_t, uint64_t))(v6 + 8))(v0 + v7, v5);
  swift_release();
  return swift_deallocObject();
}

void sub_1BCA192F8(uint64_t a1, void *a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v7 = *(_QWORD *)(sub_1BCAB54A8() - 8);
  v8 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v9 = *(_QWORD *)(v7 + 64);
  v10 = *(_QWORD *)(sub_1BCAB4BD8() - 8);
  v11 = (v8 + v9 + *(unsigned __int8 *)(v10 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  sub_1BCA18A10(a1, a2, a3, v3 + v8, v3 + v11, *(_QWORD *)(v3 + ((*(_QWORD *)(v10 + 64) + v11 + 7) & 0xFFFFFFFFFFFFF8)));
}

unint64_t sub_1BCA1938C()
{
  unint64_t result;

  result = qword_1ED6C4648;
  if (!qword_1ED6C4648)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1ED6C4648);
  }
  return result;
}

void sub_1BCA193C8()
{
  uint64_t v0;

  sub_1BCA18D04(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24), *(_BYTE *)(v0 + 32));
}

id sub_1BCA193D4(uint64_t a1)
{
  uint64_t v1;
  void *v3;
  char v4;

  v3 = *(void **)(v1 + 16);
  v4 = *(_BYTE *)(v1 + 24);
  sub_1BC9A836C(*(id *)a1, *(_BYTE *)(a1 + 8));
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  return sub_1BC9A81A4(v3, v4);
}

void sub_1BCA1941C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED6C47E8)
  {
    sub_1BC998AB0(255, &qword_1ED6C45E8, (uint64_t (*)(uint64_t))sub_1BCA1938C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
    sub_1BC9A7F58(255, (unint64_t *)&qword_1ED6C6F70);
    v0 = sub_1BCAB68A0();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED6C47E8);
  }
}

Swift::Void __swiftcall UnitChangeObserving.registerForUnitChanges()()
{
  uint64_t v0;
  id v1;

  v1 = objc_msgSend((id)objc_opt_self(), sel_defaultCenter);
  objc_msgSend(v1, sel_addObserver_selector_name_object_, v0, sel_unitDidChange, *MEMORY[0x1E0D2F5B0], 0);

}

Swift::Void __swiftcall UnitChangeObserving.unregisterForUnitChanges()()
{
  uint64_t v0;
  id v1;

  v1 = objc_msgSend((id)objc_opt_self(), sel_defaultCenter);
  objc_msgSend(v1, sel_removeObserver_name_object_, v0, *MEMORY[0x1E0D2F5B0], 0);

}

void sub_1BCA19578()
{
  qword_1ED6D39B0 = 0x4048000000000000;
}

void sub_1BCA19588()
{
  qword_1ED6D39B8 = 0x4000000000000000;
}

id sub_1BCA19598()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  id v5;
  void *v6;
  id v7;

  v1 = OBJC_IVAR____TtC19HealthVisualization22ActivityRingCircleView____lazy_storage___activityRingView;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC19HealthVisualization22ActivityRingCircleView____lazy_storage___activityRingView);
  if (v2)
  {
    v3 = *(id *)(v0 + OBJC_IVAR____TtC19HealthVisualization22ActivityRingCircleView____lazy_storage___activityRingView);
  }
  else
  {
    v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB7850]), sel_init);
    v5 = objc_msgSend((id)objc_opt_self(), sel_clearColor);
    objc_msgSend(v4, sel__setActivityRingViewBackgroundColor_, v5);

    v6 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v4;
    v3 = v4;

    v2 = 0;
  }
  v7 = v2;
  return v3;
}

id sub_1BCA1972C(void *a1)
{
  char *v1;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  objc_super v9;

  *(_QWORD *)&v1[OBJC_IVAR____TtC19HealthVisualization22ActivityRingCircleView____lazy_storage___activityRingView] = 0;
  v9.receiver = v1;
  v9.super_class = (Class)type metadata accessor for ActivityRingCircleView();
  v3 = objc_msgSendSuper2(&v9, sel_initWithCoder_, a1);
  v4 = v3;
  if (v3)
  {
    v5 = v3;
    v6 = sub_1BCA19598();
    objc_msgSend(v5, sel_addSubview_, v6);

    v7 = objc_msgSend((id)objc_opt_self(), sel_clearColor);
    objc_msgSend(v5, sel_setBackgroundColor_, v7);

    a1 = v7;
  }

  return v4;
}

void sub_1BCA19984()
{
  void *v0;
  double v1;
  id v2;
  id v3;
  char v4;
  id v5;
  id v6;
  double v7;
  double v8;
  id v9;
  objc_super v10;
  CGRect v11;

  v10.receiver = v0;
  v10.super_class = (Class)type metadata accessor for ActivityRingCircleView();
  objc_msgSendSuper2(&v10, sel_layoutSubviews);
  if (qword_1ED6C5FE0 != -1)
    swift_once();
  v1 = *(double *)&qword_1ED6D39B0;
  v2 = objc_msgSend(v0, sel_traitCollection);
  v3 = objc_msgSend(v2, sel_preferredContentSizeCategory);

  v4 = sub_1BCAB62AC();
  v5 = objc_msgSend(v0, sel_layer);
  objc_msgSend(v0, sel_bounds);
  objc_msgSend(v5, sel_setCornerRadius_, CGRectGetWidth(v11) * 0.5);

  v6 = sub_1BCA19598();
  if (qword_1ED6C5FE8 != -1)
    swift_once();
  v7 = 1.0;
  if ((v4 & 1) != 0)
    v7 = 1.75;
  v8 = v1 * v7;
  objc_msgSend(v6, sel_bounds);
  objc_msgSend(v6, sel_setBounds_);

  v9 = sub_1BCA19598();
  objc_msgSend(v9, sel_setCenter_, v8 * 0.5, v8 * 0.5);

}

uint64_t type metadata accessor for ActivityRingCircleView()
{
  return objc_opt_self();
}

id ActivityRingCircleView.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ActivityRingCircleView();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t method lookup function for ActivityRingCircleView()
{
  return swift_lookUpClassMethod();
}

uint64_t sub_1BCA19BD0(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t, uint64_t);
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int (*v28)(char *, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  void (*v40)(char *, char *, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  void (*v46)(uint64_t, uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v52;
  int *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v30 = *a2;
    *(_QWORD *)a1 = *a2;
    v31 = v30 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    *(_QWORD *)a1 = *a2;
    *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_WORD *)(a1 + 24) = *((_WORD *)a2 + 12);
    v7 = *(int *)(a3 + 28);
    v8 = a1 + v7;
    v9 = (uint64_t)a2 + v7;
    v10 = sub_1BCAB4F68();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
    v11 = type metadata accessor for TimeBasedDistribution();
    *(_QWORD *)(v8 + *(int *)(v11 + 20)) = *(_QWORD *)(v9 + *(int *)(v11 + 20));
    v12 = *(int *)(v11 + 24);
    v13 = (_QWORD *)(v8 + v12);
    v14 = (_QWORD *)(v9 + v12);
    v15 = v14[1];
    *v13 = *v14;
    v13[1] = v15;
    v16 = *(int *)(a3 + 32);
    v56 = a1;
    v17 = a1 + v16;
    v18 = (uint64_t)a2 + v16;
    *(_BYTE *)v17 = *((_BYTE *)a2 + v16);
    v19 = a1 + v16 + 8;
    v20 = *(_OWORD *)(v18 + 32);
    *(_OWORD *)(v17 + 32) = v20;
    v21 = v20;
    v22 = **(void (***)(uint64_t, uint64_t, uint64_t))(v20 - 8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v22(v19, v18 + 8, v21);
    v53 = (int *)type metadata accessor for TimeBasedDistributionChartModel();
    v54 = v18;
    v23 = v53[6];
    v55 = v17;
    v24 = (char *)(v17 + v23);
    v25 = (char *)(v18 + v23);
    v26 = sub_1BCAB5754();
    v27 = *(_QWORD *)(v26 - 8);
    v28 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48);
    if (v28(v25, 1, v26))
    {
      sub_1BC998AB0(0, (unint64_t *)&qword_1EF478060, (uint64_t (*)(uint64_t))MEMORY[0x1E0C93AA8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v27 + 16))(v24, v25, v26);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
    }
    v32 = (int *)type metadata accessor for TimeBasedDistributionChartDesign();
    v33 = v32[5];
    v34 = &v24[v33];
    v35 = &v25[v33];
    if (v28(&v25[v33], 1, v26))
    {
      sub_1BC998AB0(0, (unint64_t *)&qword_1EF478060, (uint64_t (*)(uint64_t))MEMORY[0x1E0C93AA8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v27 + 16))(v34, v35, v26);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v34, 0, 1, v26);
    }
    *(_QWORD *)&v24[v32[6]] = *(_QWORD *)&v25[v32[6]];
    *(_QWORD *)&v24[v32[7]] = *(_QWORD *)&v25[v32[7]];
    *(_QWORD *)&v24[v32[8]] = *(_QWORD *)&v25[v32[8]];
    *(_QWORD *)&v24[v32[9]] = *(_QWORD *)&v25[v32[9]];
    v37 = v32[10];
    v38 = &v24[v37];
    v52 = &v25[v37];
    v39 = sub_1BCAB5958();
    v40 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v39 - 8) + 16);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    v40(v38, v52, v39);
    *(_QWORD *)&v24[v32[11]] = *(_QWORD *)&v25[v32[11]];
    *(_QWORD *)&v24[v32[12]] = *(_QWORD *)&v25[v32[12]];
    *(_QWORD *)&v24[v32[13]] = *(_QWORD *)&v25[v32[13]];
    *(_QWORD *)&v24[v32[14]] = *(_QWORD *)&v25[v32[14]];
    *(_QWORD *)&v24[v32[15]] = *(_QWORD *)&v25[v32[15]];
    *(_QWORD *)&v24[v32[16]] = *(_QWORD *)&v25[v32[16]];
    *(_QWORD *)&v24[v32[17]] = *(_QWORD *)&v25[v32[17]];
    *(_QWORD *)&v24[v32[18]] = *(_QWORD *)&v25[v32[18]];
    *(_QWORD *)&v24[v32[19]] = *(_QWORD *)&v25[v32[19]];
    *(_QWORD *)&v24[v32[20]] = *(_QWORD *)&v25[v32[20]];
    *(_QWORD *)&v24[v32[21]] = *(_QWORD *)&v25[v32[21]];
    *(_QWORD *)&v24[v32[22]] = *(_QWORD *)&v25[v32[22]];
    *(_QWORD *)&v24[v32[23]] = *(_QWORD *)&v25[v32[23]];
    *(_QWORD *)&v24[v32[24]] = *(_QWORD *)&v25[v32[24]];
    v24[v32[25]] = v25[v32[25]];
    v41 = v53[7];
    v42 = v55 + v41;
    v43 = v54 + v41;
    v44 = *(_OWORD *)(v54 + v41 + 24);
    *(_OWORD *)(v55 + v41 + 24) = v44;
    v45 = v44;
    v46 = **(void (***)(uint64_t, uint64_t, uint64_t))(v44 - 8);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    v46(v42, v43, v45);
    v47 = v53[8];
    v48 = v55 + v47;
    v49 = v54 + v47;
    v50 = sub_1BCAB5514();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 16))(v48, v49, v50);
    return v56;
  }
  return v31;
}

uint64_t sub_1BCA1A020(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v4 = a1 + *(int *)(a2 + 28);
  v5 = sub_1BCAB4F68();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  type metadata accessor for TimeBasedDistribution();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v6 = a1 + *(int *)(a2 + 32);
  __swift_destroy_boxed_opaque_existential_1(v6 + 8);
  v7 = (int *)type metadata accessor for TimeBasedDistributionChartModel();
  v8 = v6 + v7[6];
  v9 = sub_1BCAB5754();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
  if (!v11(v8, 1, v9))
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
  v12 = type metadata accessor for TimeBasedDistributionChartDesign();
  v13 = v8 + *(int *)(v12 + 20);
  if (!v11(v13, 1, v9))
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v13, v9);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  v14 = v8 + *(int *)(v12 + 40);
  v15 = sub_1BCAB5958();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v14, v15);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v6 + v7[7]);
  v16 = v6 + v7[8];
  v17 = sub_1BCAB5514();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(v16, v17);
}

uint64_t sub_1BCA1A200(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t, uint64_t);
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int (*v28)(char *, uint64_t, uint64_t);
  uint64_t v29;
  int *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  void (*v38)(char *, char *, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  void (*v44)(uint64_t, uint64_t, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v50;
  int *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  v6 = *(int *)(a3 + 28);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = sub_1BCAB4F68();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
  v10 = type metadata accessor for TimeBasedDistribution();
  *(_QWORD *)(v7 + *(int *)(v10 + 20)) = *(_QWORD *)(v8 + *(int *)(v10 + 20));
  v11 = *(int *)(v10 + 24);
  v12 = (_QWORD *)(v7 + v11);
  v13 = (_QWORD *)(v8 + v11);
  v14 = v13[1];
  *v12 = *v13;
  v12[1] = v14;
  v15 = *(int *)(a3 + 32);
  v54 = a1;
  v16 = a1 + v15;
  v17 = a2 + v15;
  *(_BYTE *)v16 = *(_BYTE *)(a2 + v15);
  v18 = a1 + v15 + 8;
  v19 = a2 + v15 + 8;
  v20 = *(_OWORD *)(v17 + 32);
  *(_OWORD *)(v16 + 32) = v20;
  v21 = v20;
  v22 = **(void (***)(uint64_t, uint64_t, uint64_t))(v20 - 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v22(v18, v19, v21);
  v51 = (int *)type metadata accessor for TimeBasedDistributionChartModel();
  v52 = v17;
  v23 = v51[6];
  v53 = v16;
  v24 = (char *)(v16 + v23);
  v25 = (char *)(v17 + v23);
  v26 = sub_1BCAB5754();
  v27 = *(_QWORD *)(v26 - 8);
  v28 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48);
  if (v28(v25, 1, v26))
  {
    sub_1BC998AB0(0, (unint64_t *)&qword_1EF478060, (uint64_t (*)(uint64_t))MEMORY[0x1E0C93AA8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v27 + 16))(v24, v25, v26);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
  }
  v30 = (int *)type metadata accessor for TimeBasedDistributionChartDesign();
  v31 = v30[5];
  v32 = &v24[v31];
  v33 = &v25[v31];
  if (v28(&v25[v31], 1, v26))
  {
    sub_1BC998AB0(0, (unint64_t *)&qword_1EF478060, (uint64_t (*)(uint64_t))MEMORY[0x1E0C93AA8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v27 + 16))(v32, v33, v26);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v32, 0, 1, v26);
  }
  *(_QWORD *)&v24[v30[6]] = *(_QWORD *)&v25[v30[6]];
  *(_QWORD *)&v24[v30[7]] = *(_QWORD *)&v25[v30[7]];
  *(_QWORD *)&v24[v30[8]] = *(_QWORD *)&v25[v30[8]];
  *(_QWORD *)&v24[v30[9]] = *(_QWORD *)&v25[v30[9]];
  v35 = v30[10];
  v36 = &v24[v35];
  v50 = &v25[v35];
  v37 = sub_1BCAB5958();
  v38 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v37 - 8) + 16);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  v38(v36, v50, v37);
  *(_QWORD *)&v24[v30[11]] = *(_QWORD *)&v25[v30[11]];
  *(_QWORD *)&v24[v30[12]] = *(_QWORD *)&v25[v30[12]];
  *(_QWORD *)&v24[v30[13]] = *(_QWORD *)&v25[v30[13]];
  *(_QWORD *)&v24[v30[14]] = *(_QWORD *)&v25[v30[14]];
  *(_QWORD *)&v24[v30[15]] = *(_QWORD *)&v25[v30[15]];
  *(_QWORD *)&v24[v30[16]] = *(_QWORD *)&v25[v30[16]];
  *(_QWORD *)&v24[v30[17]] = *(_QWORD *)&v25[v30[17]];
  *(_QWORD *)&v24[v30[18]] = *(_QWORD *)&v25[v30[18]];
  *(_QWORD *)&v24[v30[19]] = *(_QWORD *)&v25[v30[19]];
  *(_QWORD *)&v24[v30[20]] = *(_QWORD *)&v25[v30[20]];
  *(_QWORD *)&v24[v30[21]] = *(_QWORD *)&v25[v30[21]];
  *(_QWORD *)&v24[v30[22]] = *(_QWORD *)&v25[v30[22]];
  *(_QWORD *)&v24[v30[23]] = *(_QWORD *)&v25[v30[23]];
  *(_QWORD *)&v24[v30[24]] = *(_QWORD *)&v25[v30[24]];
  v24[v30[25]] = v25[v30[25]];
  v39 = v51[7];
  v40 = v53 + v39;
  v41 = v52 + v39;
  v42 = *(_OWORD *)(v52 + v39 + 24);
  *(_OWORD *)(v53 + v39 + 24) = v42;
  v43 = v42;
  v44 = **(void (***)(uint64_t, uint64_t, uint64_t))(v42 - 8);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  v44(v40, v41, v43);
  v45 = v51[8];
  v46 = v53 + v45;
  v47 = v52 + v45;
  v48 = sub_1BCAB5514();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v48 - 8) + 16))(v46, v47, v48);
  return v54;
}

uint64_t sub_1BCA1A620(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(char *, uint64_t, uint64_t);
  int v25;
  uint64_t v26;
  int *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int *v43;
  uint64_t v44;
  uint64_t v45;

  v6 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = v6;
  v7 = a2[2];
  *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
  *(_QWORD *)(a1 + 16) = v7;
  *(_BYTE *)(a1 + 25) = *((_BYTE *)a2 + 25);
  v8 = *(int *)(a3 + 28);
  v9 = a1 + v8;
  v10 = (uint64_t)a2 + v8;
  v11 = sub_1BCAB4F68();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 24))(v9, v10, v11);
  v12 = type metadata accessor for TimeBasedDistribution();
  *(_QWORD *)(v9 + *(int *)(v12 + 20)) = *(_QWORD *)(v10 + *(int *)(v12 + 20));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v13 = *(int *)(v12 + 24);
  v14 = (_QWORD *)(v9 + v13);
  v15 = (_QWORD *)(v10 + v13);
  *v14 = *v15;
  v14[1] = v15[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v16 = *(int *)(a3 + 32);
  v17 = a1 + v16;
  v18 = (uint64_t)a2 + v16;
  *(_BYTE *)(a1 + v16) = *(_BYTE *)v18;
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + v16 + 8), (uint64_t *)(v18 + 8));
  v43 = (int *)type metadata accessor for TimeBasedDistributionChartModel();
  v44 = v18;
  v19 = v43[6];
  v45 = v17;
  v20 = (char *)(v17 + v19);
  v21 = (char *)(v18 + v19);
  v22 = sub_1BCAB5754();
  v23 = *(_QWORD *)(v22 - 8);
  v24 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v23 + 48);
  LODWORD(v10) = v24(v20, 1, v22);
  v25 = v24(v21, 1, v22);
  if ((_DWORD)v10)
  {
    if (!v25)
    {
      (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v20, v21, v22);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v25)
  {
    (*(void (**)(char *, uint64_t))(v23 + 8))(v20, v22);
LABEL_6:
    sub_1BC998AB0(0, (unint64_t *)&qword_1EF478060, (uint64_t (*)(uint64_t))MEMORY[0x1E0C93AA8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v23 + 24))(v20, v21, v22);
LABEL_7:
  v27 = (int *)type metadata accessor for TimeBasedDistributionChartDesign();
  v28 = v27[5];
  v29 = &v20[v28];
  v30 = &v21[v28];
  v31 = v24(&v20[v28], 1, v22);
  v32 = v24(v30, 1, v22);
  if (!v31)
  {
    if (!v32)
    {
      (*(void (**)(char *, char *, uint64_t))(v23 + 24))(v29, v30, v22);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v23 + 8))(v29, v22);
    goto LABEL_12;
  }
  if (v32)
  {
LABEL_12:
    sub_1BC998AB0(0, (unint64_t *)&qword_1EF478060, (uint64_t (*)(uint64_t))MEMORY[0x1E0C93AA8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v29, v30, v22);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v29, 0, 1, v22);
LABEL_13:
  *(_QWORD *)&v20[v27[6]] = *(_QWORD *)&v21[v27[6]];
  swift_retain();
  swift_release();
  *(_QWORD *)&v20[v27[7]] = *(_QWORD *)&v21[v27[7]];
  swift_retain();
  swift_release();
  *(_QWORD *)&v20[v27[8]] = *(_QWORD *)&v21[v27[8]];
  swift_retain();
  swift_release();
  *(_QWORD *)&v20[v27[9]] = *(_QWORD *)&v21[v27[9]];
  swift_retain();
  swift_release();
  v34 = v27[10];
  v35 = &v20[v34];
  v36 = &v21[v34];
  v37 = sub_1BCAB5958();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v37 - 8) + 24))(v35, v36, v37);
  *(_QWORD *)&v20[v27[11]] = *(_QWORD *)&v21[v27[11]];
  swift_retain();
  swift_release();
  *(_QWORD *)&v20[v27[12]] = *(_QWORD *)&v21[v27[12]];
  swift_retain();
  swift_release();
  *(_QWORD *)&v20[v27[13]] = *(_QWORD *)&v21[v27[13]];
  swift_retain();
  swift_release();
  *(_QWORD *)&v20[v27[14]] = *(_QWORD *)&v21[v27[14]];
  swift_retain();
  swift_release();
  *(_QWORD *)&v20[v27[15]] = *(_QWORD *)&v21[v27[15]];
  swift_retain();
  swift_release();
  *(_QWORD *)&v20[v27[16]] = *(_QWORD *)&v21[v27[16]];
  swift_retain();
  swift_release();
  *(_QWORD *)&v20[v27[17]] = *(_QWORD *)&v21[v27[17]];
  *(_QWORD *)&v20[v27[18]] = *(_QWORD *)&v21[v27[18]];
  *(_QWORD *)&v20[v27[19]] = *(_QWORD *)&v21[v27[19]];
  *(_QWORD *)&v20[v27[20]] = *(_QWORD *)&v21[v27[20]];
  *(_QWORD *)&v20[v27[21]] = *(_QWORD *)&v21[v27[21]];
  *(_QWORD *)&v20[v27[22]] = *(_QWORD *)&v21[v27[22]];
  *(_QWORD *)&v20[v27[23]] = *(_QWORD *)&v21[v27[23]];
  *(_QWORD *)&v20[v27[24]] = *(_QWORD *)&v21[v27[24]];
  v20[v27[25]] = v21[v27[25]];
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(v45 + v43[7]), (uint64_t *)(v44 + v43[7]));
  v38 = v43[8];
  v39 = v45 + v38;
  v40 = v44 + v38;
  v41 = sub_1BCAB5514();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 24))(v39, v40, v41);
  return a1;
}

uint64_t sub_1BCA1AAEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int (*v19)(char *, uint64_t, uint64_t);
  uint64_t v20;
  int *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int *v39;
  uint64_t v40;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  v6 = *(int *)(a3 + 28);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = sub_1BCAB4F68();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = type metadata accessor for TimeBasedDistribution();
  *(_QWORD *)(v7 + *(int *)(v10 + 20)) = *(_QWORD *)(v8 + *(int *)(v10 + 20));
  *(_OWORD *)(v7 + *(int *)(v10 + 24)) = *(_OWORD *)(v8 + *(int *)(v10 + 24));
  v11 = *(int *)(a3 + 32);
  v40 = a1;
  v12 = a1 + v11;
  v13 = a2 + v11;
  *(_BYTE *)v12 = *(_BYTE *)(a2 + v11);
  *(_OWORD *)(v12 + 8) = *(_OWORD *)(a2 + v11 + 8);
  *(_OWORD *)(v12 + 24) = *(_OWORD *)(a2 + v11 + 24);
  *(_QWORD *)(v12 + 40) = *(_QWORD *)(a2 + v11 + 40);
  v39 = (int *)type metadata accessor for TimeBasedDistributionChartModel();
  v14 = v39[6];
  v15 = (char *)(v12 + v14);
  v16 = (char *)(v13 + v14);
  v17 = sub_1BCAB5754();
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48);
  if (v19(v16, 1, v17))
  {
    sub_1BC998AB0(0, (unint64_t *)&qword_1EF478060, (uint64_t (*)(uint64_t))MEMORY[0x1E0C93AA8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v15, v16, v17);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
  }
  v21 = (int *)type metadata accessor for TimeBasedDistributionChartDesign();
  v22 = v21[5];
  v23 = &v15[v22];
  v24 = &v16[v22];
  if (v19(&v16[v22], 1, v17))
  {
    sub_1BC998AB0(0, (unint64_t *)&qword_1EF478060, (uint64_t (*)(uint64_t))MEMORY[0x1E0C93AA8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v23, v24, v17);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v23, 0, 1, v17);
  }
  *(_QWORD *)&v15[v21[6]] = *(_QWORD *)&v16[v21[6]];
  *(_QWORD *)&v15[v21[7]] = *(_QWORD *)&v16[v21[7]];
  *(_QWORD *)&v15[v21[8]] = *(_QWORD *)&v16[v21[8]];
  *(_QWORD *)&v15[v21[9]] = *(_QWORD *)&v16[v21[9]];
  v26 = v21[10];
  v27 = &v15[v26];
  v28 = &v16[v26];
  v29 = sub_1BCAB5958();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v29 - 8) + 32))(v27, v28, v29);
  *(_QWORD *)&v15[v21[11]] = *(_QWORD *)&v16[v21[11]];
  *(_QWORD *)&v15[v21[12]] = *(_QWORD *)&v16[v21[12]];
  *(_QWORD *)&v15[v21[13]] = *(_QWORD *)&v16[v21[13]];
  *(_QWORD *)&v15[v21[14]] = *(_QWORD *)&v16[v21[14]];
  *(_QWORD *)&v15[v21[15]] = *(_QWORD *)&v16[v21[15]];
  *(_QWORD *)&v15[v21[16]] = *(_QWORD *)&v16[v21[16]];
  *(_QWORD *)&v15[v21[17]] = *(_QWORD *)&v16[v21[17]];
  *(_QWORD *)&v15[v21[18]] = *(_QWORD *)&v16[v21[18]];
  *(_QWORD *)&v15[v21[19]] = *(_QWORD *)&v16[v21[19]];
  *(_QWORD *)&v15[v21[20]] = *(_QWORD *)&v16[v21[20]];
  *(_QWORD *)&v15[v21[21]] = *(_QWORD *)&v16[v21[21]];
  *(_QWORD *)&v15[v21[22]] = *(_QWORD *)&v16[v21[22]];
  *(_QWORD *)&v15[v21[23]] = *(_QWORD *)&v16[v21[23]];
  *(_QWORD *)&v15[v21[24]] = *(_QWORD *)&v16[v21[24]];
  v15[v21[25]] = v16[v21[25]];
  v30 = v39[7];
  v31 = v12 + v30;
  v32 = v13 + v30;
  *(_QWORD *)(v31 + 32) = *(_QWORD *)(v32 + 32);
  v33 = *(_OWORD *)(v32 + 16);
  *(_OWORD *)v31 = *(_OWORD *)v32;
  *(_OWORD *)(v31 + 16) = v33;
  v34 = v39[8];
  v35 = v12 + v34;
  v36 = v13 + v34;
  v37 = sub_1BCAB5514();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 32))(v35, v36, v37);
  return v40;
}

uint64_t sub_1BCA1AE68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(char *, uint64_t, uint64_t);
  int v25;
  uint64_t v26;
  int *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int *v47;
  uint64_t v48;
  uint64_t v49;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
  v6 = *(int *)(a3 + 28);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = sub_1BCAB4F68();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  v10 = type metadata accessor for TimeBasedDistribution();
  *(_QWORD *)(v7 + *(int *)(v10 + 20)) = *(_QWORD *)(v8 + *(int *)(v10 + 20));
  swift_bridgeObjectRelease();
  v11 = *(int *)(v10 + 24);
  v12 = (_QWORD *)(v7 + v11);
  v13 = (uint64_t *)(v8 + v11);
  v15 = *v13;
  v14 = v13[1];
  *v12 = v15;
  v12[1] = v14;
  swift_bridgeObjectRelease();
  v16 = *(int *)(a3 + 32);
  v49 = a1;
  v17 = a1 + v16;
  v18 = a2 + v16;
  *(_BYTE *)v17 = *(_BYTE *)(a2 + v16);
  __swift_destroy_boxed_opaque_existential_1(v17 + 8);
  *(_OWORD *)(v17 + 8) = *(_OWORD *)(v18 + 8);
  *(_OWORD *)(v17 + 24) = *(_OWORD *)(v18 + 24);
  *(_QWORD *)(v17 + 40) = *(_QWORD *)(v18 + 40);
  v47 = (int *)type metadata accessor for TimeBasedDistributionChartModel();
  v48 = v18;
  v19 = v47[6];
  v20 = (char *)(v17 + v19);
  v21 = (char *)(v18 + v19);
  v22 = sub_1BCAB5754();
  v23 = *(_QWORD *)(v22 - 8);
  v24 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v23 + 48);
  LODWORD(v8) = v24(v20, 1, v22);
  v25 = v24(v21, 1, v22);
  if ((_DWORD)v8)
  {
    if (!v25)
    {
      (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v20, v21, v22);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v25)
  {
    (*(void (**)(char *, uint64_t))(v23 + 8))(v20, v22);
LABEL_6:
    sub_1BC998AB0(0, (unint64_t *)&qword_1EF478060, (uint64_t (*)(uint64_t))MEMORY[0x1E0C93AA8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v23 + 40))(v20, v21, v22);
LABEL_7:
  v27 = (int *)type metadata accessor for TimeBasedDistributionChartDesign();
  v28 = v27[5];
  v29 = &v20[v28];
  v30 = &v21[v28];
  v31 = v24(&v20[v28], 1, v22);
  v32 = v24(v30, 1, v22);
  if (!v31)
  {
    if (!v32)
    {
      (*(void (**)(char *, char *, uint64_t))(v23 + 40))(v29, v30, v22);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v23 + 8))(v29, v22);
    goto LABEL_12;
  }
  if (v32)
  {
LABEL_12:
    sub_1BC998AB0(0, (unint64_t *)&qword_1EF478060, (uint64_t (*)(uint64_t))MEMORY[0x1E0C93AA8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v29, v30, v22);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v29, 0, 1, v22);
LABEL_13:
  *(_QWORD *)&v20[v27[6]] = *(_QWORD *)&v21[v27[6]];
  swift_release();
  *(_QWORD *)&v20[v27[7]] = *(_QWORD *)&v21[v27[7]];
  swift_release();
  *(_QWORD *)&v20[v27[8]] = *(_QWORD *)&v21[v27[8]];
  swift_release();
  *(_QWORD *)&v20[v27[9]] = *(_QWORD *)&v21[v27[9]];
  swift_release();
  v34 = v27[10];
  v35 = &v20[v34];
  v36 = &v21[v34];
  v37 = sub_1BCAB5958();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v37 - 8) + 40))(v35, v36, v37);
  *(_QWORD *)&v20[v27[11]] = *(_QWORD *)&v21[v27[11]];
  swift_release();
  *(_QWORD *)&v20[v27[12]] = *(_QWORD *)&v21[v27[12]];
  swift_release();
  *(_QWORD *)&v20[v27[13]] = *(_QWORD *)&v21[v27[13]];
  swift_release();
  *(_QWORD *)&v20[v27[14]] = *(_QWORD *)&v21[v27[14]];
  swift_release();
  *(_QWORD *)&v20[v27[15]] = *(_QWORD *)&v21[v27[15]];
  swift_release();
  *(_QWORD *)&v20[v27[16]] = *(_QWORD *)&v21[v27[16]];
  swift_release();
  *(_QWORD *)&v20[v27[17]] = *(_QWORD *)&v21[v27[17]];
  *(_QWORD *)&v20[v27[18]] = *(_QWORD *)&v21[v27[18]];
  *(_QWORD *)&v20[v27[19]] = *(_QWORD *)&v21[v27[19]];
  *(_QWORD *)&v20[v27[20]] = *(_QWORD *)&v21[v27[20]];
  *(_QWORD *)&v20[v27[21]] = *(_QWORD *)&v21[v27[21]];
  *(_QWORD *)&v20[v27[22]] = *(_QWORD *)&v21[v27[22]];
  *(_QWORD *)&v20[v27[23]] = *(_QWORD *)&v21[v27[23]];
  *(_QWORD *)&v20[v27[24]] = *(_QWORD *)&v21[v27[24]];
  v20[v27[25]] = v21[v27[25]];
  v38 = v47[7];
  v39 = v17 + v38;
  v40 = v48 + v38;
  __swift_destroy_boxed_opaque_existential_1(v17 + v38);
  v41 = *(_OWORD *)(v40 + 16);
  *(_OWORD *)v39 = *(_OWORD *)v40;
  *(_OWORD *)(v39 + 16) = v41;
  *(_QWORD *)(v39 + 32) = *(_QWORD *)(v40 + 32);
  v42 = v47[8];
  v43 = v17 + v42;
  v44 = v48 + v42;
  v45 = sub_1BCAB5514();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 40))(v43, v44, v45);
  return v49;
}

uint64_t sub_1BCA1B2F0()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BCA1B2FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4;
  BOOL v5;
  int v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if ((_DWORD)a2 == 254)
  {
    v4 = *(unsigned __int8 *)(a1 + 25);
    v5 = v4 >= 2;
    v6 = (v4 + 2147483646) & 0x7FFFFFFF;
    if (v5)
      return (v6 + 1);
    else
      return 0;
  }
  else
  {
    v10 = type metadata accessor for TimeBasedDistribution();
    v11 = *(_QWORD *)(v10 - 8);
    if (*(_DWORD *)(v11 + 84) == (_DWORD)a2)
    {
      v12 = v10;
      v13 = *(int *)(a3 + 28);
    }
    else
    {
      v12 = type metadata accessor for TimeBasedDistributionChartModel();
      v11 = *(_QWORD *)(v12 - 8);
      v13 = *(int *)(a3 + 32);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(a1 + v13, a2, v12);
  }
}

uint64_t sub_1BCA1B39C()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BCA1B3A8(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 254)
  {
    *(_BYTE *)(result + 25) = a2 + 1;
  }
  else
  {
    v8 = type metadata accessor for TimeBasedDistribution();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 28);
    }
    else
    {
      v10 = type metadata accessor for TimeBasedDistributionChartModel();
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 32);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

uint64_t type metadata accessor for AFibBurdenDayOfWeekChart()
{
  uint64_t result;

  result = qword_1EF4792F0;
  if (!qword_1EF4792F0)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_1BCA1B47C()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = type metadata accessor for TimeBasedDistribution();
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for TimeBasedDistributionChartModel();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

void sub_1BCA1B518()
{
  qword_1EF486D58 = 0x403A000000000000;
}

void sub_1BCA1B528()
{
  qword_1EF486D60 = 0x4040000000000000;
}

id sub_1BCA1B538()
{
  id v0;
  id result;

  v0 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB3578]), sel_init);
  result = objc_msgSend(v0, sel_setFormattingContext_, 2);
  qword_1EF486D68 = (uint64_t)v0;
  return result;
}

uint64_t sub_1BCA1B584@<X0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned __int8 *v37;
  uint64_t OpaqueTypeConformance2;
  uint64_t (*v39)(uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  id v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char *v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t KeyPath;
  _BOOL4 IsRightToLeft;
  unsigned int *v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unsigned __int8 *v125;
  char *v126;
  uint64_t v127;
  unsigned __int8 *v128;
  char v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  unint64_t v135;

  v123 = a4;
  v124 = sub_1BCAB5964();
  v122 = *(_QWORD *)(v124 - 8);
  MEMORY[0x1E0C80A78](v124);
  v121 = (char *)&v97 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for TimeBasedDistributionChartModel();
  v118 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v119 = v9;
  v120 = (uint64_t)&v97 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BC998AB0(0, &qword_1EF4786D0, (uint64_t (*)(uint64_t))MEMORY[0x1E0C93C30], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v10);
  v114 = (char *)&v97 - v11;
  sub_1BC9B69A0();
  v13 = v12;
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v97 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BCA1D33C();
  v17 = v16;
  v98 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16);
  v19 = (char *)&v97 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BCA1D694(0);
  v100 = v20;
  v99 = *(_QWORD *)(v20 - 8);
  MEMORY[0x1E0C80A78](v20);
  v22 = (char *)&v97 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BCA1D768();
  v102 = v23;
  MEMORY[0x1E0C80A78](v23);
  v25 = (uint64_t *)((char *)&v97 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1BCA1D7CC(0);
  v104 = v26;
  v103 = *((_QWORD *)v26 - 1);
  MEMORY[0x1E0C80A78](v26);
  v101 = (char *)&v97 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BCA1DC58(0);
  v107 = v28;
  v106 = *(_QWORD *)(v28 - 8);
  MEMORY[0x1E0C80A78](v28);
  v126 = (char *)&v97 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BCA1DD34(0);
  v110 = v30;
  v109 = *(_QWORD *)(v30 - 8);
  MEMORY[0x1E0C80A78](v30);
  v108 = (char *)&v97 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BCA1DEDC(0);
  v113 = v32;
  v112 = *(_QWORD *)(v32 - 8);
  MEMORY[0x1E0C80A78](v32);
  v111 = (char *)&v97 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BCA1E078(0);
  v117 = v34;
  v116 = *(_QWORD *)(v34 - 8);
  MEMORY[0x1E0C80A78](v34);
  v115 = (char *)&v97 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v105 = sub_1BC9C3170(a1, a2);
  v127 = v105;
  v128 = a2;
  v129 = a3;
  sub_1BCA1D39C();
  sub_1BCA1D568();
  sub_1BCAB56F4();
  v36 = *(int *)(v8 + 24);
  v125 = a2;
  v37 = &a2[v36 + *(int *)(type metadata accessor for TimeBasedDistributionChartDesign() + 40)];
  OpaqueTypeConformance2 = sub_1BCAB5958();
  v39 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CD9958];
  (*(void (**)(char *, unsigned __int8 *, uint64_t))(*(_QWORD *)(OpaqueTypeConformance2 - 8) + 16))(v15, v37, OpaqueTypeConformance2);
  sub_1BC996948(&qword_1ED6C3568, v39, MEMORY[0x1E0CD9990]);
  if ((sub_1BCAB5ED4() & 1) != 0)
  {
    v40 = sub_1BC996948(&qword_1EF479380, (uint64_t (*)(uint64_t))sub_1BCA1D33C, MEMORY[0x1E0C939B0]);
    v41 = sub_1BC996948(&qword_1ED6C3608, (uint64_t (*)(uint64_t))sub_1BC9B69A0, MEMORY[0x1E0DECD88]);
    sub_1BCAB5CF4();
    sub_1BC997208((uint64_t)v15, (uint64_t (*)(_QWORD))sub_1BC9B69A0);
    (*(void (**)(char *, uint64_t))(v98 + 8))(v19, v17);
    v132 = sub_1BCAB5F04();
    v133 = v42;
    swift_bridgeObjectRetain();
    sub_1BCAB5F70();
    swift_bridgeObjectRelease();
    v132 = v17;
    v133 = v13;
    v134 = v40;
    v135 = v41;
    swift_getOpaqueTypeConformance2();
    v43 = v100;
    sub_1BCAB5CDC();
    swift_bridgeObjectRelease();
    v44 = (*(uint64_t (**)(char *, uint64_t))(v99 + 8))(v22, v43);
    MEMORY[0x1E0C80A78](v44);
    v45 = (uint64_t)v125;
    *(&v97 - 2) = (uint64_t)v125;
    sub_1BCA1D884();
    v47 = v46;
    v48 = sub_1BCA1DB54();
    v49 = sub_1BC996948(&qword_1EF4793C8, (uint64_t (*)(uint64_t))sub_1BCA1D884, MEMORY[0x1E0C93BA0]);
    v50 = v101;
    v51 = v102;
    sub_1BCAB5C70();
    sub_1BC997208((uint64_t)v25, (uint64_t (*)(_QWORD))sub_1BCA1D768);
    v132 = v51;
    v133 = v47;
    v134 = v48;
    v135 = v49;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
    v22 = v104;
    sub_1BCAB5C88();
    (*(void (**)(char *, char *))(v103 + 8))(v50, v22);
    v25 = (_QWORD *)v45;
    if (qword_1EF477C68 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  v52 = (void *)qword_1EF486D68;
  v53 = v25[4];
  v54 = v25[5];
  __swift_project_boxed_opaque_existential_1(v25 + 1, v53);
  v55 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(v54 + 8) + 8))(*(unsigned __int8 *)v25, v53);
  v56 = v52;
  sub_1BCA1E2D8(v55, v56);
  v58 = v57;
  swift_bridgeObjectRelease();

  v130 = v58;
  v59 = sub_1BCAB57CC();
  v103 = *(_QWORD *)(*(_QWORD *)(v59 - 8) + 56);
  v60 = (uint64_t)v114;
  ((void (*)(char *, uint64_t, uint64_t, uint64_t))v103)(v114, 1, 1, v59);
  sub_1BC9A1210(0, (unint64_t *)&qword_1ED6C6E10, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
  v62 = v61;
  v132 = (uint64_t)v22;
  v133 = OpaqueTypeConformance2;
  v63 = swift_getOpaqueTypeConformance2();
  v64 = sub_1BCA1DE6C();
  v65 = v108;
  v66 = v107;
  v67 = v126;
  sub_1BCAB5C94();
  sub_1BC9CF2BC(v60);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v106 + 8))(v67, v66);
  v68 = sub_1BC9DDB80(v105);
  swift_bridgeObjectRelease();
  TimeBasedDistributionChartModel.determineYAxisRange(chartPoints:)(v68);
  v70 = v69;
  v72 = v71;
  swift_bridgeObjectRelease();
  v130 = v70;
  v131 = v72;
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v103)(v60, 1, 1, v59);
  sub_1BC9B75E4(0, (unint64_t *)&qword_1ED6C7560, MEMORY[0x1E0DEB070], MEMORY[0x1E0DEB098], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEA4B0]);
  v74 = v73;
  v132 = v66;
  v133 = v62;
  v134 = v63;
  v135 = v64;
  v75 = swift_getOpaqueTypeConformance2();
  v76 = sub_1BC9B762C();
  v77 = v111;
  v78 = v110;
  sub_1BCAB5CA0();
  sub_1BC9CF2BC(v60);
  (*(void (**)(char *, uint64_t))(v109 + 8))(v65, v78);
  v79 = v120;
  sub_1BC9964B8((uint64_t)v125, v120, (uint64_t (*)(_QWORD))type metadata accessor for TimeBasedDistributionChartModel);
  v80 = (*(unsigned __int8 *)(v118 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v118 + 80);
  v81 = swift_allocObject();
  sub_1BC9AE330(v79, v81 + v80, (uint64_t (*)(_QWORD))type metadata accessor for TimeBasedDistributionChartModel);
  sub_1BC9B76A4(0);
  v132 = v78;
  v133 = v74;
  v134 = v75;
  v135 = v76;
  swift_getOpaqueTypeConformance2();
  sub_1BC9B6708(&qword_1EF478290, (uint64_t (*)(uint64_t))sub_1BC9B76A4, sub_1BC9B76C0, MEMORY[0x1E0CD8D70]);
  v82 = v115;
  v83 = v113;
  sub_1BCAB5CB8();
  swift_release();
  (*(void (**)(char *, uint64_t))(v112 + 8))(v77, v83);
  KeyPath = swift_getKeyPath();
  IsRightToLeft = HKUILocaleIsRightToLeft();
  v86 = (unsigned int *)MEMORY[0x1E0CD9A98];
  v88 = v121;
  v87 = v122;
  if (!IsRightToLeft)
    v86 = (unsigned int *)MEMORY[0x1E0CD9A90];
  v89 = v124;
  (*(void (**)(char *, _QWORD, uint64_t))(v122 + 104))(v121, *v86, v124);
  sub_1BCA1E470();
  v91 = v123;
  v92 = (uint64_t *)(v123 + *(int *)(v90 + 36));
  sub_1BC998AB0(0, &qword_1ED6C35C0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CD9AA8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CDCF68]);
  (*(void (**)(char *, char *, uint64_t))(v87 + 16))((char *)v92 + *(int *)(v93 + 28), v88, v89);
  *v92 = KeyPath;
  v94 = v116;
  v95 = v117;
  (*(void (**)(uint64_t, char *, uint64_t))(v116 + 16))(v91, v82, v117);
  (*(void (**)(char *, uint64_t))(v87 + 8))(v88, v89);
  return (*(uint64_t (**)(char *, uint64_t))(v94 + 8))(v82, v95);
}

uint64_t sub_1BCA1C084@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t OpaqueTypeConformance2;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v23 = a4;
  v7 = type metadata accessor for TimeBasedDistributionChartModel();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  MEMORY[0x1E0C80A78](v7);
  v28 = a1;
  sub_1BC9964B8(a2, (uint64_t)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(_QWORD))type metadata accessor for TimeBasedDistributionChartModel);
  v10 = (*(unsigned __int8 *)(v8 + 80) + 17) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v11 = swift_allocObject();
  *(_BYTE *)(v11 + 16) = a3;
  sub_1BC9AE330((uint64_t)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v11 + v10, (uint64_t (*)(_QWORD))type metadata accessor for TimeBasedDistributionChartModel);
  sub_1BC998AB0(0, &qword_1EF479360, type metadata accessor for TimeBasedDistributionChartPoint.DayOfWeek, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
  sub_1BC9B6390(0);
  sub_1BCA1D508();
  sub_1BC9B64D0(255);
  v13 = v12;
  sub_1BC9B65A0(255);
  v15 = v14;
  sub_1BCA1D448(255);
  v17 = v16;
  v18 = sub_1BCAB5718();
  swift_bridgeObjectRetain();
  v24 = v18;
  v25 = MEMORY[0x1E0C939E0];
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  v24 = v17;
  v25 = MEMORY[0x1E0CDF5D0];
  v26 = OpaqueTypeConformance2;
  v27 = MEMORY[0x1E0CDF598];
  v20 = swift_getOpaqueTypeConformance2();
  v21 = sub_1BC9B6708(&qword_1EF478188, (uint64_t (*)(uint64_t))sub_1BC9B65A0, sub_1BC9B66E4, MEMORY[0x1E0CD90E0]);
  v24 = v13;
  v25 = v15;
  v26 = v20;
  v27 = v21;
  swift_getOpaqueTypeConformance2();
  sub_1BC996948(&qword_1EF479400, type metadata accessor for TimeBasedDistributionChartPoint.DayOfWeek, (uint64_t)&protocol conformance descriptor for TimeBasedDistributionChartPoint.DayOfWeek);
  return sub_1BCAB5DCC();
}

uint64_t sub_1BCA1C2B8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t OpaqueTypeConformance2;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;

  v2 = sub_1BCAB5604();
  MEMORY[0x1E0C80A78](v2);
  v3 = sub_1BCAB5658();
  MEMORY[0x1E0C80A78](v3);
  v4 = sub_1BCAB55EC();
  MEMORY[0x1E0C80A78](v4);
  v5 = type metadata accessor for TimeBasedDistributionChartModel();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  MEMORY[0x1E0C80A78](v5);
  sub_1BC9964B8(a1, (uint64_t)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(_QWORD))type metadata accessor for TimeBasedDistributionChartModel);
  v8 = (*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v9 = swift_allocObject();
  sub_1BC9AE330((uint64_t)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v9 + v8, (uint64_t (*)(_QWORD))type metadata accessor for TimeBasedDistributionChartModel);
  sub_1BCAB55E0();
  sub_1BCAB564C();
  sub_1BCAB55F8();
  sub_1BCA1D970(0);
  sub_1BCA1DA44(255);
  v11 = v10;
  sub_1BC9B75E4(255, &qword_1EF4793B0, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0CE0788], MEMORY[0x1E0C93720]);
  v13 = v12;
  v14 = sub_1BCA1DAEC();
  v17 = v13;
  v18 = MEMORY[0x1E0CDF5D0];
  v19 = v14;
  v20 = MEMORY[0x1E0CDF598];
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  v17 = v11;
  v18 = OpaqueTypeConformance2;
  swift_getOpaqueTypeConformance2();
  return sub_1BCAB579C();
}

uint64_t sub_1BCA1C4E8@<X0>(_QWORD *a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(void);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t OpaqueTypeConformance2;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;

  v62 = a3;
  v71 = a2;
  v69 = a4;
  v5 = type metadata accessor for TimeBasedDistributionChartModel();
  v63 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v64 = v6;
  v65 = (uint64_t)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  OpaqueTypeConformance2 = type metadata accessor for TimeBasedDistributionChartPoint.DayOfWeek(0);
  v59 = *(_QWORD *)(OpaqueTypeConformance2 - 8);
  MEMORY[0x1E0C80A78](OpaqueTypeConformance2);
  v60 = v7;
  v61 = (uint64_t)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1BCAB5688();
  v67 = *(_QWORD *)(v8 - 8);
  v68 = v8;
  MEMORY[0x1E0C80A78](v8);
  v66 = (char *)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = sub_1BCAB5A84();
  v50 = *(_QWORD *)(v51 - 8);
  MEMORY[0x1E0C80A78](v51);
  v49 = (char *)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x1E0C93770];
  sub_1BC9B75E4(0, (unint64_t *)&qword_1EF477EE8, MEMORY[0x1E0DEB070], MEMORY[0x1E0C93DE0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0C93770]);
  MEMORY[0x1E0C80A78](v12);
  sub_1BC9B75E4(0, &qword_1EF479408, MEMORY[0x1E0DEA968], MEMORY[0x1E0C93DB8], (uint64_t (*)(_QWORD, uint64_t, uint64_t))v11);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v44 - v14;
  v45 = sub_1BCAB5718();
  v47 = *(_QWORD *)(v45 - 8);
  MEMORY[0x1E0C80A78](v45);
  v17 = (char *)&v44 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BCA1D448(0);
  v52 = v18;
  v48 = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v18);
  v20 = (char *)&v44 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BC9B64D0(0);
  v58 = v21;
  v57 = *(_QWORD *)(v21 - 8);
  MEMORY[0x1E0C80A78](v21);
  v70 = (char *)&v44 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BC9B6390(0);
  v55 = v23;
  v54 = *(_QWORD *)(v23 - 8);
  MEMORY[0x1E0C80A78](v23);
  v53 = (char *)&v44 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BCAB5A6C();
  v25 = a1[3];
  v72 = a1[2];
  v73 = v25;
  swift_bridgeObjectRetain();
  v46 = v15;
  sub_1BCAB5634();
  v26 = (uint64_t)a1;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1BCAB5A6C();
  v72 = a1[1];
  sub_1BCAB5634();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v71 & 1) != 0)
  {
    if (qword_1EF477C58 == -1)
      goto LABEL_5;
    goto LABEL_6;
  }
  if (qword_1EF477C60 != -1)
LABEL_6:
    swift_once();
LABEL_5:
  sub_1BCAB570C();
  v27 = v50;
  v28 = v49;
  v29 = v51;
  (*(void (**)(char *, _QWORD, uint64_t))(v50 + 104))(v49, *MEMORY[0x1E0CDB0C0], v51);
  v30 = MEMORY[0x1E0C939E0];
  v31 = v45;
  sub_1BCAB5580();
  (*(void (**)(char *, uint64_t))(v27 + 8))(v28, v29);
  (*(void (**)(char *, uint64_t))(v47 + 8))(v17, v31);
  v76 = *(_QWORD *)(v26 + *(int *)(OpaqueTypeConformance2 + 32));
  v72 = v31;
  v73 = v30;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  v32 = v52;
  sub_1BCAB558C();
  (*(void (**)(char *, uint64_t))(v48 + 8))(v20, v32);
  v33 = v66;
  sub_1BCAB567C();
  v34 = v61;
  sub_1BC9964B8(v26, v61, type metadata accessor for TimeBasedDistributionChartPoint.DayOfWeek);
  v35 = v65;
  sub_1BC9964B8(v62, v65, (uint64_t (*)(_QWORD))type metadata accessor for TimeBasedDistributionChartModel);
  v36 = (*(unsigned __int8 *)(v59 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v59 + 80);
  v37 = v36 + v60;
  v38 = (*(unsigned __int8 *)(v63 + 80) + v36 + v60 + 1) & ~(unint64_t)*(unsigned __int8 *)(v63 + 80);
  v39 = swift_allocObject();
  sub_1BC9AE330(v34, v39 + v36, type metadata accessor for TimeBasedDistributionChartPoint.DayOfWeek);
  *(_BYTE *)(v39 + v37) = v71 & 1;
  sub_1BC9AE330(v35, v39 + v38, (uint64_t (*)(_QWORD))type metadata accessor for TimeBasedDistributionChartModel);
  sub_1BCAB5DE4();
  sub_1BC9B65A0(0);
  v72 = v32;
  v73 = MEMORY[0x1E0CDF5D0];
  v74 = OpaqueTypeConformance2;
  v75 = MEMORY[0x1E0CDF598];
  swift_getOpaqueTypeConformance2();
  sub_1BC9B6708(&qword_1EF478188, (uint64_t (*)(uint64_t))sub_1BC9B65A0, sub_1BC9B66E4, MEMORY[0x1E0CD90E0]);
  v40 = v53;
  v41 = v58;
  v42 = v70;
  sub_1BCAB555C();
  swift_release();
  (*(void (**)(char *, uint64_t))(v67 + 8))(v33, v68);
  (*(void (**)(char *, uint64_t))(v57 + 8))(v42, v41);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v54 + 32))(v69, v40, v55);
}

double sub_1BCA1CC84@<D0>(_BYTE *a1@<X1>, char a2@<W2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t KeyPath;
  int v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double result;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;

  v8 = sub_1BCAB4CE0();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for TimeBasedDistributionChartPoint.DayOfWeek(0);
  (*(void (**)(char *, _BYTE *, uint64_t))(v9 + 16))(v11, &a1[*(int *)(v12 + 28)], v8);
  v13 = sub_1BCAB5C58();
  v31 = v14;
  v32 = v13;
  HIDWORD(v30) = v15;
  v33 = v16;
  KeyPath = swift_getKeyPath();
  v18 = *a1;
  v19 = (char)v18;
  if ((v18 - 2) >= 2)
  {
    if (!*a1)
    {
      if ((a2 & 1) != 0)
      {
        if (qword_1EF477C58 == -1)
          goto LABEL_12;
      }
      else if (qword_1EF477C60 == -1)
      {
        goto LABEL_12;
      }
      goto LABEL_13;
    }
    if ((a2 & 1) != 0)
    {
      if (qword_1EF477C58 == -1)
        goto LABEL_12;
      goto LABEL_13;
    }
    if (qword_1EF477C60 != -1)
LABEL_13:
      swift_once();
  }
LABEL_12:
  sub_1BCAB5DE4();
  sub_1BCAB5934();
  v20 = v34;
  v21 = v35;
  v22 = v36;
  v23 = v37;
  v24 = v38;
  v25 = v39;
  v26 = qword_1BCAC3EB8[v19];
  v27 = a3 + *(int *)(type metadata accessor for TimeBasedDistributionChartModel() + 24);
  result = *(double *)(v27 + *(int *)(type metadata accessor for TimeBasedDistributionChartDesign() + 4 * v26));
  v29 = v31;
  *(_QWORD *)a4 = v32;
  *(_QWORD *)(a4 + 8) = v29;
  *(_BYTE *)(a4 + 16) = BYTE4(v30) & 1;
  *(_QWORD *)(a4 + 24) = v33;
  *(_QWORD *)(a4 + 32) = KeyPath;
  *(_BYTE *)(a4 + 40) = 1;
  *(_QWORD *)(a4 + 48) = v20;
  *(_BYTE *)(a4 + 56) = v21;
  *(_QWORD *)(a4 + 64) = v22;
  *(_BYTE *)(a4 + 72) = v23;
  *(_QWORD *)(a4 + 80) = v24;
  *(_QWORD *)(a4 + 88) = v25;
  *(_QWORD *)(a4 + 96) = 0;
  *(double *)(a4 + 104) = result;
  return result;
}

uint64_t sub_1BCA1CF0C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;

  v21 = a2;
  v3 = sub_1BCAB56D0();
  MEMORY[0x1E0C80A78](v3);
  v4 = sub_1BCAB56E8();
  MEMORY[0x1E0C80A78](v4);
  sub_1BC9B75E4(0, &qword_1EF4793B0, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0CE0788], MEMORY[0x1E0C93720]);
  v6 = v5;
  v19 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v18 - v7;
  sub_1BCA1DA44(0);
  v10 = v9;
  v20 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BCAB56DC();
  sub_1BCAB56C4();
  sub_1BCAB5610();
  v13 = a1 + *(int *)(type metadata accessor for TimeBasedDistributionChartModel() + 24);
  v22 = *(_QWORD *)(v13 + *(int *)(type metadata accessor for TimeBasedDistributionChartDesign() + 64));
  v14 = sub_1BCA1DAEC();
  v15 = MEMORY[0x1E0CDF5D0];
  v16 = MEMORY[0x1E0CDF598];
  sub_1BCAB5724();
  (*(void (**)(char *, uint64_t))(v19 + 8))(v8, v6);
  v22 = v6;
  v23 = v15;
  v24 = v14;
  v25 = v16;
  swift_getOpaqueTypeConformance2();
  sub_1BCAB5730();
  return (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v12, v10);
}

uint64_t sub_1BCA1D174@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1BCA1B584(v2 + *(int *)(a1 + 28), (unsigned __int8 *)(v2 + *(int *)(a1 + 32)), *(_BYTE *)(v2 + 25), a2);
}

uint64_t sub_1BCA1D188()
{
  sub_1BC996948(&qword_1EF479348, (uint64_t (*)(uint64_t))type metadata accessor for AFibBurdenDayOfWeekChart, (uint64_t)&unk_1BCAC3DB8);
  return sub_1BCAB53C4();
}

uint64_t sub_1BCA1D1E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1BCA1D1F8(a1, a2, a3, MEMORY[0x1E0D2BA60]);
}

uint64_t sub_1BCA1D1EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1BCA1D1F8(a1, a2, a3, MEMORY[0x1E0D2BA68]);
}

uint64_t sub_1BCA1D1F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v6;

  v6 = sub_1BC996948(&qword_1EF479348, (uint64_t (*)(uint64_t))type metadata accessor for AFibBurdenDayOfWeekChart, (uint64_t)&unk_1BCAC3DB8);
  return a4(a1, a2, v6);
}

uint64_t sub_1BCA1D258()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  sub_1BC996948(&qword_1EF478408, (uint64_t (*)(uint64_t))type metadata accessor for AFibBurdenDayOfWeekChart, (uint64_t)&unk_1BCAC3E10);
  *v1 = v0;
  v1[1] = sub_1BC9CF1E8;
  return sub_1BCAB5250();
}

uint64_t sub_1BCA1D2D4()
{
  return sub_1BC996948(&qword_1EF478408, (uint64_t (*)(uint64_t))type metadata accessor for AFibBurdenDayOfWeekChart, (uint64_t)&unk_1BCAC3E10);
}

uint64_t sub_1BCA1D300()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1BCA1D310()
{
  return sub_1BC996948(&qword_1EF479340, (uint64_t (*)(uint64_t))type metadata accessor for AFibBurdenDayOfWeekChart, (uint64_t)&unk_1BCAC3D90);
}

void sub_1BCA1D33C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EF479350)
  {
    sub_1BCA1D39C();
    sub_1BCA1D568();
    v0 = sub_1BCAB5700();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EF479350);
  }
}

void sub_1BCA1D39C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EF479358)
  {
    sub_1BC998AB0(255, &qword_1EF479360, type metadata accessor for TimeBasedDistributionChartPoint.DayOfWeek, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
    sub_1BC9B6390(255);
    sub_1BCA1D508();
    v0 = sub_1BCAB5DD8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EF479358);
  }
}

void sub_1BCA1D448(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  _QWORD v4[2];

  if (!qword_1EF478170)
  {
    v4[0] = sub_1BCAB5718();
    v4[1] = MEMORY[0x1E0C939E0];
    v2 = MEMORY[0x1BCCFBE48](a1, v4, MEMORY[0x1E0C934E8], 0);
    if (!v3)
      atomic_store(v2, (unint64_t *)&qword_1EF478170);
  }
}

uint64_t sub_1BCA1D4BC(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t, _QWORD))
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a4(255, a2, a3, MEMORY[0x1E0CDCF68]);
    result = MEMORY[0x1BCCFBE84](MEMORY[0x1E0CDCF80], v6);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1BCA1D508()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EF479368;
  if (!qword_1EF479368)
  {
    sub_1BC998AB0(255, &qword_1EF479360, type metadata accessor for TimeBasedDistributionChartPoint.DayOfWeek, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
    result = MEMORY[0x1BCCFBE84](MEMORY[0x1E0DEAF48], v1);
    atomic_store(result, (unint64_t *)&qword_1EF479368);
  }
  return result;
}

unint64_t sub_1BCA1D568()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];

  result = qword_1EF479370;
  if (!qword_1EF479370)
  {
    sub_1BCA1D39C();
    v2 = v1;
    sub_1BC9B64D0(255);
    v4 = v3;
    sub_1BC9B65A0(255);
    v6 = v5;
    sub_1BCA1D448(255);
    sub_1BCAB5718();
    swift_getOpaqueTypeConformance2();
    v7[1] = v4;
    v7[2] = v6;
    v7[3] = swift_getOpaqueTypeConformance2();
    v7[4] = sub_1BC9B6708(&qword_1EF478188, (uint64_t (*)(uint64_t))sub_1BC9B65A0, sub_1BC9B66E4, MEMORY[0x1E0CD90E0]);
    v7[0] = swift_getOpaqueTypeConformance2();
    result = MEMORY[0x1BCCFBE84](MEMORY[0x1E0C93DA0], v2, v7);
    atomic_store(result, (unint64_t *)&qword_1EF479370);
  }
  return result;
}

void sub_1BCA1D694(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD v7[4];

  if (!qword_1EF479378)
  {
    sub_1BCA1D33C();
    v3 = v2;
    sub_1BC9B69A0();
    v7[0] = v3;
    v7[1] = v4;
    v7[2] = sub_1BC996948(&qword_1EF479380, (uint64_t (*)(uint64_t))sub_1BCA1D33C, MEMORY[0x1E0C939B0]);
    v7[3] = sub_1BC996948(&qword_1ED6C3608, (uint64_t (*)(uint64_t))sub_1BC9B69A0, MEMORY[0x1E0DECD88]);
    v5 = MEMORY[0x1BCCFBE48](a1, v7, MEMORY[0x1E0CDE4C8], 0);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_1EF479378);
  }
}

void sub_1BCA1D768()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EF479388)
  {
    sub_1BCA1D694(255);
    sub_1BCAB5B50();
    v0 = sub_1BCAB5970();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EF479388);
  }
}

void sub_1BCA1D7CC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD v7[4];

  if (!qword_1EF479390)
  {
    sub_1BCA1D768();
    v3 = v2;
    sub_1BCA1D884();
    v7[0] = v3;
    v7[1] = v4;
    v7[2] = sub_1BCA1DB54();
    v7[3] = sub_1BC996948(&qword_1EF4793C8, (uint64_t (*)(uint64_t))sub_1BCA1D884, MEMORY[0x1E0C93BA0]);
    v5 = MEMORY[0x1BCCFBE48](a1, v7, MEMORY[0x1E0C93C60], 0);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_1EF479390);
  }
}

void sub_1BCA1D884()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EF479398)
  {
    sub_1BCA1D970(255);
    sub_1BCA1DA44(255);
    sub_1BC9B75E4(255, &qword_1EF4793B0, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0CE0788], MEMORY[0x1E0C93720]);
    sub_1BCA1DAEC();
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    v0 = sub_1BCAB57B4();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EF479398);
  }
}

void sub_1BCA1D970(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD v6[4];

  if (!qword_1EF4793A0)
  {
    sub_1BCA1DA44(255);
    v3 = v2;
    sub_1BC9B75E4(255, &qword_1EF4793B0, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0CE0788], MEMORY[0x1E0C93720]);
    v6[2] = sub_1BCA1DAEC();
    v6[3] = MEMORY[0x1E0CDF598];
    v6[0] = v3;
    v6[1] = swift_getOpaqueTypeConformance2();
    v4 = MEMORY[0x1BCCFBE48](a1, v6, MEMORY[0x1E0C93A50], 0);
    if (!v5)
      atomic_store(v4, (unint64_t *)&qword_1EF4793A0);
  }
}

void sub_1BCA1DA44(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD v7[4];

  if (!qword_1EF4793A8)
  {
    sub_1BC9B75E4(255, &qword_1EF4793B0, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0CE0788], MEMORY[0x1E0C93720]);
    v3 = v2;
    v4 = sub_1BCA1DAEC();
    v7[0] = v3;
    v7[1] = MEMORY[0x1E0CDF5D0];
    v7[2] = v4;
    v7[3] = MEMORY[0x1E0CDF598];
    v5 = MEMORY[0x1BCCFBE48](a1, v7, MEMORY[0x1E0C93A40], 0);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_1EF4793A8);
  }
}

unint64_t sub_1BCA1DAEC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EF4793B8;
  if (!qword_1EF4793B8)
  {
    sub_1BC9B75E4(255, &qword_1EF4793B0, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0CE0788], MEMORY[0x1E0C93720]);
    result = MEMORY[0x1BCCFBE84](MEMORY[0x1E0C93748], v1);
    atomic_store(result, (unint64_t *)&qword_1EF4793B8);
  }
  return result;
}

unint64_t sub_1BCA1DB54()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[6];

  result = qword_1EF4793C0;
  if (!qword_1EF4793C0)
  {
    sub_1BCA1D768();
    v2 = v1;
    sub_1BCA1D33C();
    v4 = v3;
    sub_1BC9B69A0();
    v6[2] = v4;
    v6[3] = v5;
    v6[4] = sub_1BC996948(&qword_1EF479380, (uint64_t (*)(uint64_t))sub_1BCA1D33C, MEMORY[0x1E0C939B0]);
    v6[5] = sub_1BC996948(&qword_1ED6C3608, (uint64_t (*)(uint64_t))sub_1BC9B69A0, MEMORY[0x1E0DECD88]);
    v6[0] = swift_getOpaqueTypeConformance2();
    v6[1] = sub_1BC996948(&qword_1EF478250, (uint64_t (*)(uint64_t))MEMORY[0x1E0CDCFD0], MEMORY[0x1E0CDCFB8]);
    result = MEMORY[0x1BCCFBE84](MEMORY[0x1E0CD9C20], v2, v6);
    atomic_store(result, (unint64_t *)&qword_1EF4793C0);
  }
  return result;
}

void sub_1BCA1DC58(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD v6[4];

  if (!qword_1EF4793D0)
  {
    sub_1BCA1D7CC(255);
    v3 = v2;
    sub_1BCA1D768();
    sub_1BCA1D884();
    v6[2] = sub_1BCA1DB54();
    v6[3] = sub_1BC996948(&qword_1EF4793C8, (uint64_t (*)(uint64_t))sub_1BCA1D884, MEMORY[0x1E0C93BA0]);
    v6[0] = v3;
    v6[1] = swift_getOpaqueTypeConformance2();
    v4 = MEMORY[0x1BCCFBE48](a1, v6, MEMORY[0x1E0C93CB8], 0);
    if (!v5)
      atomic_store(v4, (unint64_t *)&qword_1EF4793D0);
  }
}

void sub_1BCA1DD34(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD v8[4];

  if (!qword_1EF4793D8)
  {
    sub_1BCA1DC58(255);
    v3 = v2;
    sub_1BC9A1210(255, (unint64_t *)&qword_1ED6C6E10, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    v5 = v4;
    sub_1BCA1D7CC(255);
    sub_1BCA1D768();
    sub_1BCA1D884();
    sub_1BCA1DB54();
    sub_1BC996948(&qword_1EF4793C8, (uint64_t (*)(uint64_t))sub_1BCA1D884, MEMORY[0x1E0C93BA0]);
    swift_getOpaqueTypeConformance2();
    v8[0] = v3;
    v8[1] = v5;
    v8[2] = swift_getOpaqueTypeConformance2();
    v8[3] = sub_1BCA1DE6C();
    v6 = MEMORY[0x1BCCFBE48](a1, v8, MEMORY[0x1E0C93CF0], 0);
    if (!v7)
      atomic_store(v6, (unint64_t *)&qword_1EF4793D8);
  }
}

unint64_t sub_1BCA1DE6C()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_1EF4793E0;
  if (!qword_1EF4793E0)
  {
    sub_1BC9A1210(255, (unint64_t *)&qword_1ED6C6E10, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    v2 = MEMORY[0x1E0C93DB8];
    result = MEMORY[0x1BCCFBE84](MEMORY[0x1E0C93DD0], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_1EF4793E0);
  }
  return result;
}

void sub_1BCA1DEDC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD v8[4];

  if (!qword_1EF4793E8)
  {
    sub_1BCA1DD34(255);
    v3 = v2;
    sub_1BC9B75E4(255, (unint64_t *)&qword_1ED6C7560, MEMORY[0x1E0DEB070], MEMORY[0x1E0DEB098], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEA4B0]);
    v5 = v4;
    sub_1BCA1DC58(255);
    sub_1BC9A1210(255, (unint64_t *)&qword_1ED6C6E10, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    sub_1BCA1D7CC(255);
    sub_1BCA1D768();
    sub_1BCA1D884();
    sub_1BCA1DB54();
    sub_1BC996948(&qword_1EF4793C8, (uint64_t (*)(uint64_t))sub_1BCA1D884, MEMORY[0x1E0C93BA0]);
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    sub_1BCA1DE6C();
    v8[0] = v3;
    v8[1] = v5;
    v8[2] = swift_getOpaqueTypeConformance2();
    v8[3] = sub_1BC9B762C();
    v6 = MEMORY[0x1BCCFBE48](a1, v8, MEMORY[0x1E0C93D10], 0);
    if (!v7)
      atomic_store(v6, (unint64_t *)&qword_1EF4793E8);
  }
}

void sub_1BCA1E078(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[4];

  if (!qword_1EF4793F0)
  {
    sub_1BCA1DEDC(255);
    v7 = v2;
    sub_1BC9B76A4(255);
    v6 = v3;
    sub_1BCA1DD34(255);
    sub_1BC9B75E4(255, (unint64_t *)&qword_1ED6C7560, MEMORY[0x1E0DEB070], MEMORY[0x1E0DEB098], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEA4B0]);
    sub_1BCA1DC58(255);
    sub_1BC9A1210(255, (unint64_t *)&qword_1ED6C6E10, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    sub_1BCA1D7CC(255);
    sub_1BCA1D768();
    sub_1BCA1D884();
    sub_1BCA1DB54();
    sub_1BC996948(&qword_1EF4793C8, (uint64_t (*)(uint64_t))sub_1BCA1D884, MEMORY[0x1E0C93BA0]);
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    sub_1BCA1DE6C();
    swift_getOpaqueTypeConformance2();
    sub_1BC9B762C();
    v8[0] = v7;
    v8[1] = v6;
    v8[2] = swift_getOpaqueTypeConformance2();
    v8[3] = sub_1BC9B6708(&qword_1EF478290, (uint64_t (*)(uint64_t))sub_1BC9B76A4, sub_1BC9B76C0, MEMORY[0x1E0CD8D70]);
    v4 = MEMORY[0x1BCCFBE48](a1, v8, MEMORY[0x1E0C93D60], 0);
    if (!v5)
      atomic_store(v4, (unint64_t *)&qword_1EF4793F0);
  }
}

uint64_t sub_1BCA1E278@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1BCA1C084(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_BYTE *)(v1 + 32), a1);
}

uint64_t sub_1BCA1E284()
{
  uint64_t v0;

  return sub_1BCA1C2B8(*(_QWORD *)(v0 + 16));
}

uint64_t sub_1BCA1E28C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1BCAB59D0();
  *a1 = result;
  return result;
}

uint64_t sub_1BCA1E2B4()
{
  return sub_1BCAB59DC();
}

void sub_1BCA1E2D8(uint64_t a1, void *a2)
{
  int64_t v2;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    v17 = MEMORY[0x1E0DEE9D8];
    sub_1BC9BAC24(0, v2, 0);
    v5 = (unint64_t *)(a1 + 32);
    while (1)
    {
      v7 = *v5++;
      v6 = v7;
      v8 = objc_msgSend(a2, sel_shortStandaloneWeekdaySymbols);
      if (!v8)
        break;
      v9 = v8;
      v10 = sub_1BCAB6018();

      if ((v6 & 0x8000000000000000) != 0)
      {
        __break(1u);
LABEL_11:
        __break(1u);
        break;
      }
      if (v6 >= *(_QWORD *)(v10 + 16))
        goto LABEL_11;
      v11 = v10 + 16 * v6;
      v12 = *(_QWORD *)(v11 + 32);
      v13 = *(_QWORD *)(v11 + 40);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v15 = *(_QWORD *)(v17 + 16);
      v14 = *(_QWORD *)(v17 + 24);
      if (v15 >= v14 >> 1)
        sub_1BC9BAC24(v14 > 1, v15 + 1, 1);
      *(_QWORD *)(v17 + 16) = v15 + 1;
      v16 = v17 + 16 * v15;
      *(_QWORD *)(v16 + 32) = v12;
      *(_QWORD *)(v16 + 40) = v13;
      if (!--v2)
        return;
    }
    __break(1u);
  }
}

double sub_1BCA1E41C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  type metadata accessor for TimeBasedDistributionChartModel();
  return sub_1BC9CD9E4(a1, a2);
}

void sub_1BCA1E470()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EF4793F8)
  {
    sub_1BCA1E078(255);
    sub_1BC998AB0(255, &qword_1ED6C35C0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CD9AA8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CDCF68]);
    v0 = sub_1BCAB5970();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EF4793F8);
  }
}

uint64_t sub_1BCA1E4F0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for TimeBasedDistributionChartModel() - 8) + 80);
  return sub_1BCA1CF0C(v1 + ((v3 + 16) & ~v3), a1);
}

uint64_t sub_1BCA1E52C()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = (int *)type metadata accessor for TimeBasedDistributionChartModel();
  v2 = v0
     + ((*(unsigned __int8 *)(*((_QWORD *)v1 - 1) + 80) + 17) & ~(unint64_t)*(unsigned __int8 *)(*((_QWORD *)v1 - 1) + 80));
  __swift_destroy_boxed_opaque_existential_1(v2 + 8);
  v3 = v2 + v1[6];
  v4 = sub_1BCAB5754();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (!v6(v3, 1, v4))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v4);
  v7 = type metadata accessor for TimeBasedDistributionChartDesign();
  v8 = v3 + *(int *)(v7 + 20);
  if (!v6(v8, 1, v4))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v8, v4);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  v9 = v3 + *(int *)(v7 + 40);
  v10 = sub_1BCAB5958();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v2 + v1[7]);
  v11 = v2 + v1[8];
  v12 = sub_1BCAB5514();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
  return swift_deallocObject();
}

uint64_t sub_1BCA1E6F8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for TimeBasedDistributionChartModel() - 8) + 80);
  return sub_1BCA1C4E8(a1, *(unsigned __int8 *)(v2 + 16), v2 + ((v5 + 17) & ~v5), a2);
}

uint64_t sub_1BCA1E748()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(unint64_t, uint64_t, uint64_t);
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;

  v1 = type metadata accessor for TimeBasedDistributionChartPoint.DayOfWeek(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = *(_QWORD *)(v2 + 64);
  v5 = type metadata accessor for TimeBasedDistributionChartModel();
  v6 = (v4 + *(unsigned __int8 *)(*(_QWORD *)(v5 - 8) + 80) + v3 + 1) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v5 - 8) + 80);
  swift_bridgeObjectRelease();
  v7 = v0 + v3 + *(int *)(v1 + 28);
  v8 = sub_1BCAB4CE0();
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  swift_release();
  v9 = v0 + v6;
  __swift_destroy_boxed_opaque_existential_1(v0 + v6 + 8);
  v21 = v5;
  v10 = v0 + v6 + *(int *)(v5 + 24);
  v11 = sub_1BCAB5754();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v12 + 48);
  if (!v13(v10, 1, v11))
    (*(void (**)(unint64_t, uint64_t))(v12 + 8))(v10, v11);
  v14 = type metadata accessor for TimeBasedDistributionChartDesign();
  v15 = v10 + *(int *)(v14 + 20);
  if (!v13(v15, 1, v11))
    (*(void (**)(unint64_t, uint64_t))(v12 + 8))(v15, v11);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  v16 = v10 + *(int *)(v14 + 40);
  v17 = sub_1BCAB5958();
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(v16, v17);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v9 + *(int *)(v21 + 28));
  v18 = v9 + *(int *)(v21 + 32);
  v19 = sub_1BCAB5514();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 8))(v18, v19);
  return swift_deallocObject();
}

double sub_1BCA1E988@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(type metadata accessor for TimeBasedDistributionChartPoint.DayOfWeek(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = v4 + *(_QWORD *)(v3 + 64);
  v6 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for TimeBasedDistributionChartModel() - 8) + 80);
  return sub_1BCA1CC84((_BYTE *)(v1 + v4), *(_BYTE *)(v1 + v5), v1 + ((v5 + v6 + 1) & ~v6), a1);
}

uint64_t sub_1BCA1EA08@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1BCAB59D0();
  *a1 = result;
  return result;
}

uint64_t sub_1BCA1EA30()
{
  return sub_1BCAB59DC();
}

unint64_t sub_1BCA1EA58()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[6];

  result = qword_1EF479410;
  if (!qword_1EF479410)
  {
    sub_1BCA1E470();
    v6 = v1;
    sub_1BCA1DEDC(255);
    v5 = v2;
    sub_1BC9B76A4(255);
    v4 = v3;
    sub_1BCA1DD34(255);
    sub_1BC9B75E4(255, (unint64_t *)&qword_1ED6C7560, MEMORY[0x1E0DEB070], MEMORY[0x1E0DEB098], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEA4B0]);
    sub_1BCA1DC58(255);
    sub_1BC9A1210(255, (unint64_t *)&qword_1ED6C6E10, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    sub_1BCA1D7CC(255);
    sub_1BCA1D768();
    sub_1BCA1D884();
    sub_1BCA1DB54();
    sub_1BC996948(&qword_1EF4793C8, (uint64_t (*)(uint64_t))sub_1BCA1D884, MEMORY[0x1E0C93BA0]);
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    sub_1BCA1DE6C();
    swift_getOpaqueTypeConformance2();
    sub_1BC9B762C();
    v7[2] = v5;
    v7[3] = v4;
    v7[4] = swift_getOpaqueTypeConformance2();
    v7[5] = sub_1BC9B6708(&qword_1EF478290, (uint64_t (*)(uint64_t))sub_1BC9B76A4, sub_1BC9B76C0, MEMORY[0x1E0CD8D70]);
    v7[0] = swift_getOpaqueTypeConformance2();
    v7[1] = sub_1BCA1D4BC((unint64_t *)&qword_1ED6C35B8, (uint64_t)&qword_1ED6C35C0, (uint64_t)MEMORY[0x1E0CD9AA8], (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD))sub_1BC998AB0);
    result = MEMORY[0x1BCCFBE84](MEMORY[0x1E0CD9C20], v6, v7);
    atomic_store(result, (unint64_t *)&qword_1EF479410);
  }
  return result;
}

uint64_t DiagramAxisMetricsProviding.axisMetrics(for:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(a2 + 8))(0, a1);
}

BOOL static DiagramAxisMetricsOrientation.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t DiagramAxisMetricsOrientation.hash(into:)()
{
  return sub_1BCAB687C();
}

uint64_t DiagramAxisMetricsOrientation.hashValue.getter()
{
  sub_1BCAB6870();
  sub_1BCAB687C();
  return sub_1BCAB6894();
}

uint64_t DiagramAxisMetricsCalculatorFactory.__allocating_init(hbxViewControllerFactory:)(uint64_t a1)
{
  uint64_t result;

  result = swift_allocObject();
  *(_QWORD *)(result + 16) = a1;
  return result;
}

uint64_t DiagramAxisMetricsCalculatorFactory.init(hbxViewControllerFactory:)(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return v1;
}

void sub_1BCA1ED60(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1BCAB5514();
  MEMORY[0x1E0C80A78](v2);
  __asm { BR              X10 }
}

uint64_t sub_1BCA1EDD8()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t result;

  v1 = type metadata accessor for DiagramDateAxisMetricsCalculator();
  result = swift_allocObject();
  *(_BYTE *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  v0[3] = v1;
  v0[4] = (uint64_t)&protocol witness table for DiagramDateAxisMetricsCalculator;
  *v0 = result;
  return result;
}

uint64_t type metadata accessor for DiagramAxisMetricsCalculatorFactory.HiLoScalarAxisDimension()
{
  return objc_opt_self();
}

id sub_1BCA1F174(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  id v10;
  void *v11;
  void *v12;
  id v13;
  id v14;
  id v15;
  id v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  void (*v23)(char *, uint64_t);
  char *v24;
  id v25;
  NSObject *v26;
  os_log_type_t v27;
  int v28;
  uint64_t v29;
  uint8_t *v30;
  id v31;
  id v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint8_t *v36;
  uint64_t v37;
  uint8_t *v39;
  uint8_t *v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v3 = sub_1BCAB5514();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v39 - v8;
  v10 = objc_msgSend((id)objc_opt_self(), sel_sharedInstance);
  if (!v10
    || (v11 = v10,
        v12 = (void *)sub_1BCAB60FC(),
        v13 = objc_msgSend(v11, sel_displayTypeWithIdentifier_, v12),
        v11,
        v12,
        !v13))
  {
    sub_1BCAB54D8();
    v17 = sub_1BCAB54FC();
    v18 = sub_1BCAB61A4();
    if (os_log_type_enabled(v17, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc();
      v20 = swift_slowAlloc();
      v43 = a1;
      v44 = v20;
      *(_DWORD *)v19 = 136380675;
      type metadata accessor for HKDisplayTypeIdentifier(0);
      v42 = v3;
      v21 = sub_1BCAB5F28();
      v43 = sub_1BC99BD4C(v21, v22, &v44);
      sub_1BCAB63A8();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1BC989000, v17, v18, "Unable to create display type for provided axis type %{private}s", v19, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BCCFBF5C](v20, -1, -1);
      MEMORY[0x1BCCFBF5C](v19, -1, -1);

      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v42);
      return 0;
    }

    v23 = *(void (**)(char *, uint64_t))(v4 + 8);
    v24 = v6;
LABEL_12:
    v23(v24, v3);
    return 0;
  }
  v14 = objc_msgSend(*(id *)(v1 + 16), sel_createHKUnitPreferenceController);
  v15 = objc_msgSend(v13, sel_hk_dimensionForChartAxisWithUnitController_, v14);
  if (!v15)
  {
    sub_1BCAB54D8();
    v25 = v13;
    v26 = sub_1BCAB54FC();
    v27 = sub_1BCAB61A4();
    v28 = v27;
    if (os_log_type_enabled(v26, v27))
    {
      v29 = swift_slowAlloc();
      v41 = v28;
      v30 = (uint8_t *)v29;
      v42 = swift_slowAlloc();
      v44 = v42;
      v40 = v30;
      *(_DWORD *)v30 = 136380675;
      v39 = v30 + 4;
      v31 = v25;
      v32 = objc_msgSend(v31, sel_description);
      v33 = sub_1BCAB5F04();
      v35 = v34;

      v43 = sub_1BC99BD4C(v33, v35, &v44);
      sub_1BCAB63A8();

      swift_bridgeObjectRelease();
      v36 = v40;
      _os_log_impl(&dword_1BC989000, v26, (os_log_type_t)v41, "Unable to create axis label dimensions for %{private}s; no axis will be rendered.",
        v40,
        0xCu);
      v37 = v42;
      swift_arrayDestroy();
      MEMORY[0x1BCCFBF5C](v37, -1, -1);
      MEMORY[0x1BCCFBF5C](v36, -1, -1);

    }
    else
    {

    }
    v23 = *(void (**)(char *, uint64_t))(v4 + 8);
    v24 = v9;
    goto LABEL_12;
  }
  v16 = v15;

  return v16;
}

id sub_1BCA1F630()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for DiagramAxisMetricsCalculatorFactory.HiLoScalarAxisDimension();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t DiagramAxisMetricsCalculatorFactory.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t DiagramAxisMetricsCalculatorFactory.__deallocating_deinit()
{
  uint64_t v0;

  return swift_deallocClassInstance();
}

void sub_1BCA1F6E8(uint64_t a1)
{
  sub_1BCA1ED60(a1);
}

id sub_1BCA1F708(uint64_t a1, void *a2)
{
  void *v2;
  void *v4;
  char *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  objc_super v16;

  v4 = (void *)objc_opt_self();
  v5 = v2;
  v6 = objc_msgSend(v4, sel_sharedInstance);
  if (!v6)
  {
    *(_QWORD *)&v5[OBJC_IVAR____TtCC19HealthVisualization35DiagramAxisMetricsCalculatorFactory23HiLoScalarAxisDimension_displayType] = 0;
    goto LABEL_5;
  }
  v7 = v6;
  v8 = (void *)sub_1BCAB60FC();
  v9 = objc_msgSend(v7, sel_displayTypeWithIdentifier_, v8);

  *(_QWORD *)&v5[OBJC_IVAR____TtCC19HealthVisualization35DiagramAxisMetricsCalculatorFactory23HiLoScalarAxisDimension_displayType] = v9;
  if (!v9)
  {
LABEL_5:
    v14 = 0;
    *(_QWORD *)&v5[OBJC_IVAR____TtCC19HealthVisualization35DiagramAxisMetricsCalculatorFactory23HiLoScalarAxisDimension_valueFormatter] = 0;
    goto LABEL_6;
  }
  v10 = v9;
  v11 = objc_msgSend(v10, sel_objectType);
  v12 = objc_msgSend(a2, sel_preferredUnitForType_, v11);

  v13 = objc_msgSend(v10, sel_hk_valueFormatterForUnit_, v12);
  *(_QWORD *)&v5[OBJC_IVAR____TtCC19HealthVisualization35DiagramAxisMetricsCalculatorFactory23HiLoScalarAxisDimension_valueFormatter] = v13;
  v14 = objc_msgSend(a2, sel_createHKUnitPreferenceController);

LABEL_6:
  *(_QWORD *)&v5[OBJC_IVAR____TtCC19HealthVisualization35DiagramAxisMetricsCalculatorFactory23HiLoScalarAxisDimension_unitPreferenceController] = v14;

  v16.receiver = v5;
  v16.super_class = (Class)type metadata accessor for DiagramAxisMetricsCalculatorFactory.HiLoScalarAxisDimension();
  return objc_msgSendSuper2(&v16, sel_init);
}

unint64_t sub_1BCA1F898()
{
  unint64_t result;

  result = qword_1EF479418;
  if (!qword_1EF479418)
  {
    result = MEMORY[0x1BCCFBE84](&protocol conformance descriptor for DiagramAxisMetricsOrientation, &type metadata for DiagramAxisMetricsOrientation);
    atomic_store(result, (unint64_t *)&qword_1EF479418);
  }
  return result;
}

uint64_t dispatch thunk of DiagramAxisMetricsProviding.axisMetrics(for:customLocations:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t storeEnumTagSinglePayload for DiagramAxisMetricsOrientation(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1BCA1F930 + 4 * byte_1BCAC3EE5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1BCA1F964 + 4 * byte_1BCAC3EE0[v4]))();
}

uint64_t sub_1BCA1F964(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BCA1F96C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BCA1F974);
  return result;
}

uint64_t sub_1BCA1F980(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BCA1F988);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1BCA1F98C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BCA1F994(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DiagramAxisMetricsOrientation()
{
  return &type metadata for DiagramAxisMetricsOrientation;
}

uint64_t dispatch thunk of DiagramAxisMetricsCalculatorProducing.diagramAxisMetricsCalculator(for:orientation:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t type metadata accessor for DiagramAxisMetricsCalculatorFactory()
{
  return objc_opt_self();
}

uint64_t method lookup function for DiagramAxisMetricsCalculatorFactory()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of DiagramAxisMetricsCalculatorFactory.__allocating_init(hbxViewControllerFactory:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t dispatch thunk of DiagramAxisMetricsCalculatorFactory.diagramAxisMetricsCalculator(for:orientation:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 96))();
}

uint64_t sub_1BCA1F9F8(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  id v9;
  void *v10;
  id v11;
  id v12;

  v2 = (uint64_t)a1;
  v3 = *(void **)(v1
                + OBJC_IVAR____TtCC19HealthVisualization35DiagramAxisMetricsCalculatorFactory23HiLoScalarAxisDimension_displayType);
  if (v3
    && (v4 = *(void **)(v1
                      + OBJC_IVAR____TtCC19HealthVisualization35DiagramAxisMetricsCalculatorFactory23HiLoScalarAxisDimension_valueFormatter)) != 0
    && (v5 = *(void **)(v1
                      + OBJC_IVAR____TtCC19HealthVisualization35DiagramAxisMetricsCalculatorFactory23HiLoScalarAxisDimension_unitPreferenceController)) != 0)
  {
    v6 = v5;
    v7 = v4;
    v8 = v3;
    v9 = objc_msgSend(v7, sel_stringFromValue_displayType_unitController_, v2, v8, v6);
    if (v9)
    {
      v10 = v9;
      v2 = sub_1BCAB5F04();

    }
    else
    {

      return 0;
    }
  }
  else if (a1)
  {
    v11 = a1;
    v12 = objc_msgSend(v11, sel_stringValue);
    v2 = sub_1BCAB5F04();

  }
  return v2;
}

id DiagramGenerator.adjustTransformForReferenceLineAnnotationIfNeeded(transformer:diagramData:referencePosition:referenceAnnotationTextAttributes:size:)@<X0>(double *a1@<X0>, uint64_t a2@<X1>, unsigned __int8 *a3@<X2>, char *a4@<X3>, CGFloat *a5@<X8>)
{
  CGFloat v6;
  CGFloat v7;
  CGFloat v8;
  CGFloat v9;
  CGFloat v10;
  double v11;
  CGFloat v12;
  CGFloat v13;
  CGFloat v14;
  CGFloat v15;
  char v16;
  CGFloat v17;
  uint64_t v18;
  void *v19;
  CGFloat v20;
  CGFloat v21;
  CGFloat v22;
  char v23;
  CGFloat rect;
  CGFloat v26;
  char v27;
  id v28;
  CGAffineTransform v29;
  CGAffineTransform t2;
  CGAffineTransform t1;
  _BYTE v32[40];
  _QWORD v33[4];
  char v34;
  CGPoint v35;
  CGRect v36;

  v28 = *(id *)a1;
  v7 = a1[1];
  v6 = a1[2];
  v9 = a1[3];
  v8 = a1[4];
  v10 = a1[5];
  v11 = a1[6];
  v12 = *(double *)a2;
  v13 = *(double *)(a2 + 8);
  v14 = *(double *)(a2 + 16);
  v15 = *(double *)(a2 + 24);
  v16 = *(_BYTE *)(a2 + 32);
  v17 = *(double *)(a2 + 40);
  v18 = *a3;
  v27 = *a4;
  t1.a = *(CGFloat *)a2;
  t1.b = v13;
  t1.c = v14;
  t1.d = v15;
  LOBYTE(t1.tx) = v16;
  t1.ty = v17;
  LOBYTE(t2.a) = 2;
  sub_1BCA20F20((uint64_t *)&t1, (unsigned __int8 *)&t2, (uint64_t)v32);
  sub_1BC9C83F0((uint64_t)v32, (uint64_t)v33);
  if ((v34 & 1) != 0)
  {
    v19 = v28;
  }
  else
  {
    v26 = v11;
    v20 = *(double *)v33;
    rect = *(double *)&v33[1];
    v22 = *(double *)&v33[2];
    v21 = *(double *)&v33[3];
    t1.a = v12;
    t1.b = v13;
    t1.c = v14;
    t1.d = v15;
    LOBYTE(t1.tx) = v16;
    t1.ty = v17;
    LOBYTE(t2.a) = v18;
    LOBYTE(v29.a) = v27;
    static DiagramGenerator.computeMaxReferenceAnnotationSize(diagramData:referencePosition:textAttributes:)((__int128 *)&t1, (uint64_t)&t2, (char *)&v29);
    if ((v23 & 1) == 0)
    {
      v36.origin.x = v20;
      v36.origin.y = rect;
      v36.size.width = v22;
      v36.size.height = v21;
      v35.y = CGRectGetMaxY(v36);
      t1.a = v7;
      t1.b = v6;
      t1.c = v9;
      t1.d = v8;
      t1.tx = v10;
      t1.ty = v26;
      v35.x = 0.0;
      CGPointApplyAffineTransform(v35, &t1);
      __asm { BR              X9 }
    }
    v19 = v28;
    v11 = v26;
  }
  *(_QWORD *)a5 = v19;
  a5[1] = v7;
  a5[2] = v6;
  a5[3] = v9;
  a5[4] = v8;
  a5[5] = v10;
  a5[6] = v11;
  return v19;
}

void static DiagramGenerator.computeLeftMarginAnnotationBounds(at:annotation:above:textAttributes:)(uint64_t a1@<X1>, char a2@<W2>, char *a3@<X3>, uint64_t a4@<X8>, CGFloat a5@<D0>, CGFloat a6@<D1>)
{
  char v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  double v17;
  double v18;
  double v19;
  CGPoint v20;
  CGFloat x;
  CGFloat y;
  CGAffineTransform v23;
  CGPoint v24;

  if (a1)
  {
    v11 = *a3;
    v12 = (void *)sub_1BCAB5EE0();
    LOBYTE(v23.a) = v11;
    DiagramConfiguration.TextAttributes.toTextAttributes()();
    type metadata accessor for Key(0);
    sub_1BC99F5A0();
    v13 = (void *)sub_1BCAB5E68();
    swift_bridgeObjectRelease();
    objc_msgSend(v12, sel_sizeWithAttributes_, v13, *(_QWORD *)&v23.a);
    v15 = v14;
    v17 = v16;

    v18 = v17 + 5.0;
    if ((a2 & 1) == 0)
      v18 = 5.0;
    v19 = -v18;
    if ((a2 & 1) == 0)
      v19 = 5.0;
    CGAffineTransformMakeTranslation(&v23, 0.0, v19);
    v24.x = a5;
    v24.y = a6;
    v20 = CGPointApplyAffineTransform(v24, &v23);
    x = v20.x;
    y = v20.y;

  }
  else
  {
    x = 0.0;
    y = 0.0;
    v15 = 0;
    v17 = 0.0;
  }
  *(CGFloat *)a4 = x;
  *(CGFloat *)(a4 + 8) = y;
  *(_QWORD *)(a4 + 16) = v15;
  *(double *)(a4 + 24) = v17;
  *(_BYTE *)(a4 + 32) = a1 == 0;
}

uint64_t sub_1BCA1FF10(uint64_t result, unsigned __int8 *a2, void (*a3)(double *, double *, _QWORD *, double, double))
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  double **v10;
  double *v11;
  double *v12;
  double *v13;
  double *v14;
  double *v15;
  uint64_t v16;
  double v17;
  double v18;
  uint64_t v19;
  double *v20;
  double *v21;
  double *v22;
  unsigned __int8 v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v27[5];

  v3 = *(_QWORD *)(result + 40);
  v4 = *(_QWORD *)(v3 + 16);
  if (v4)
  {
    v5 = *a2;
    swift_bridgeObjectRetain();
    v6 = 0;
    v24 = v4;
    v25 = v3;
    v23 = v5;
    while (1)
    {
      v7 = *(_QWORD *)(v3 + 8 * v6 + 32);
      if (*(_QWORD *)(v7 + 16))
      {
        swift_bridgeObjectRetain();
        v8 = sub_1BC9A2C2C(v5);
        if ((v9 & 1) != 0)
        {
          v10 = (double **)(*(_QWORD *)(v7 + 56) + 40 * v8);
          v12 = *v10;
          v11 = v10[1];
          v13 = v10[2];
          v14 = v10[3];
          v15 = v10[4];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          v16 = *((_QWORD *)v12 + 2);
          if (v16)
          {
            v17 = v12[4];
            v18 = v12[5];
            if (v16 == 1)
            {
              v19 = 0;
              v20 = 0;
              v21 = 0;
              v14 = 0;
              v22 = 0;
            }
            else
            {
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              v19 = (uint64_t)v12;
              v20 = v11;
              v21 = v13;
              v22 = v15;
            }
            v27[0] = v19;
            v27[1] = v20;
            v27[2] = v21;
            v27[3] = v14;
            v27[4] = v22;
            a3(v11, v13, v27, v17, v18);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            sub_1BC9A127C(v19);
            v4 = v24;
            v3 = v25;
            v5 = v23;
            goto LABEL_4;
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
      }
LABEL_4:
      if (v4 == ++v6)
        return swift_bridgeObjectRelease();
    }
  }
  return result;
}

double DiagramPointAnnotations.verticalInset()()
{
  uint64_t v0;
  void *v1;
  void *v2;
  double v3;
  double v4;

  if (!*(_QWORD *)(*(_QWORD *)v0 + 16))
    return 0.0;
  swift_bridgeObjectRetain();
  v1 = (void *)sub_1BCAB5EE0();
  swift_bridgeObjectRelease();
  type metadata accessor for Key(0);
  sub_1BC99F5A0();
  v2 = (void *)sub_1BCAB5E68();
  objc_msgSend(v1, sel_sizeWithAttributes_, v2);
  v4 = v3;

  return v4;
}

void DiagramPointAnnotations.horizontalInsets()()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 16);
  if (v2)
  {
    swift_bridgeObjectRetain();
    v3 = (void *)sub_1BCAB5EE0();
    swift_bridgeObjectRelease();
    type metadata accessor for Key(0);
    sub_1BC99F5A0();
    v4 = (void *)sub_1BCAB5E68();
    objc_msgSend(v3, sel_sizeWithAttributes_, v4);

    if (v2 > *(_QWORD *)(v1 + 16))
    {
      __break(1u);
    }
    else
    {
      swift_bridgeObjectRetain();
      v5 = (void *)sub_1BCAB5EE0();
      swift_bridgeObjectRelease();
      v6 = (void *)sub_1BCAB5E68();
      objc_msgSend(v5, sel_sizeWithAttributes_, v6);

    }
  }
}

uint64_t static DiagramGenerator.computeMaxReferenceAnnotationSize(diagramData:referencePosition:textAttributes:)(__int128 *a1, uint64_t a2, char *a3)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t inited;
  uint64_t v9;
  __int128 v11;

  v11 = *a1;
  v3 = *((_QWORD *)a1 + 2);
  v4 = *((_QWORD *)a1 + 3);
  v5 = *((_BYTE *)a1 + 32);
  v6 = *((_QWORD *)a1 + 5);
  v7 = *a3;
  sub_1BC998AB0(0, &qword_1ED6C5B60, (uint64_t (*)(uint64_t))sub_1BC9A0FB8, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1BCABE680;
  *(_OWORD *)(inited + 32) = v11;
  *(_QWORD *)(inited + 48) = v3;
  *(_QWORD *)(inited + 56) = v4;
  *(_BYTE *)(inited + 64) = v5;
  *(_QWORD *)(inited + 72) = v6;
  *(_BYTE *)(inited + 80) = v7;
  swift_bridgeObjectRetain();
  v9 = static DiagramGenerator.computeMaxReferenceAnnotationSize(referenceData:referencePosition:)(inited);
  swift_setDeallocating();
  sub_1BC9A0FB8();
  swift_arrayDestroy();
  return v9;
}

uint64_t static DiagramGenerator.computeMaxReferenceAnnotationSize(referenceData:referencePosition:)(uint64_t a1)
{
  CGFloat v1;
  CGFloat v2;
  CGFloat v3;
  CGFloat v4;
  uint64_t v5;
  CGFloat v6;
  CGFloat v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  __int128 v12;
  CGFloat Width;
  CGFloat v15;
  CGFloat v16;
  unsigned __int8 v17;
  _OWORD v18[2];
  char v19;
  uint64_t v20;
  double v21;
  double v22;
  double v23;
  double v24;
  CGRect v25;
  CGRect v26;
  CGRect v27;
  CGRect v28;

  v1 = *(double *)(MEMORY[0x1E0C9D628] + 8);
  v3 = *(double *)(MEMORY[0x1E0C9D628] + 16);
  v4 = *(double *)(MEMORY[0x1E0C9D628] + 24);
  v21 = *MEMORY[0x1E0C9D628];
  v2 = v21;
  v22 = v1;
  v23 = v3;
  v24 = v4;
  v5 = *(_QWORD *)(a1 + 16);
  v6 = v4;
  v7 = v3;
  v15 = v1;
  v16 = v21;
  if (v5)
  {
    v8 = swift_bridgeObjectRetain();
    v9 = v8 + 80;
    do
    {
      v10 = *(_BYTE *)(v9 - 16);
      v11 = *(_QWORD *)(v9 - 8);
      v12 = *(_OWORD *)(v9 - 32);
      v18[0] = *(_OWORD *)(v9 - 48);
      v18[1] = v12;
      v19 = v10;
      v20 = v11;
      v17 = 2;
      MEMORY[0x1E0C80A78](v8);
      swift_bridgeObjectRetain();
      sub_1BCA1FF10((uint64_t)v18, &v17, (void (*)(double *, double *, _QWORD *, double, double))sub_1BCA21060);
      v8 = swift_bridgeObjectRelease();
      v9 += 56;
      --v5;
    }
    while (v5);
    swift_bridgeObjectRelease();
    v2 = v21;
    v1 = v22;
    v7 = v23;
    v6 = v24;
  }
  v25.origin.x = v2;
  v25.origin.y = v1;
  v25.size.width = v7;
  v25.size.height = v6;
  Width = CGRectGetWidth(v25);
  v26.origin.x = v2;
  v26.origin.y = v1;
  v26.size.width = v7;
  v26.size.height = v6;
  CGRectGetHeight(v26);
  v27.origin.x = v2;
  v27.origin.y = v1;
  v27.size.width = v7;
  v27.size.height = v6;
  v28.origin.x = v16;
  v28.origin.y = v15;
  v28.size.width = v3;
  v28.size.height = v4;
  if (CGRectEqualToRect(v27, v28))
    return 0;
  else
    return *(_QWORD *)&Width;
}

void sub_1BCA20608(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, CGRect *a6)
{
  _BYTE v7[40];
  CGRect v8;
  char v9;

  LOBYTE(v8.origin.x) = a5;
  static DiagramGenerator.computeLeftMarginAnnotationBounds(at:annotation:above:textAttributes:)(a2, 1, (char *)&v8, (uint64_t)v7, 0.0, 0.0);
  sub_1BC9C83F0((uint64_t)v7, (uint64_t)&v8);
  if ((v9 & 1) == 0)
    *a6 = CGRectUnion(*a6, v8);
}

void __swiftcall DiagramGenerator.computeReferenceLineBounds(diagramData:diagramDataKey:)(__C::CGRect_optional *__return_ptr retstr, HealthVisualization::DiagramData *diagramData, HealthVisualization::DiagramDataKey diagramDataKey)
{
  _BYTE v4[40];

  sub_1BCA20F20((uint64_t *)diagramData, (unsigned __int8 *)diagramDataKey, (uint64_t)v4);
  sub_1BC9C83F0((uint64_t)v4, (uint64_t)retstr);
}

void static DiagramGenerator.computeRightMarginAnnotationBounds(at:annotation:textAttributes:)(uint64_t a1@<X1>, char *a2@<X2>, uint64_t a3@<X8>, CGFloat a4@<D0>, CGFloat a5@<D1>)
{
  char v9;
  void *v10;
  void *v11;
  double v12;
  double v13;
  double v14;
  double v15;
  CGPoint v16;
  CGFloat x;
  CGFloat y;
  CGAffineTransform v19;
  CGPoint v20;

  if (a1)
  {
    v9 = *a2;
    v10 = (void *)sub_1BCAB5EE0();
    LOBYTE(v19.a) = v9;
    DiagramConfiguration.TextAttributes.toTextAttributes()();
    type metadata accessor for Key(0);
    sub_1BC99F5A0();
    v11 = (void *)sub_1BCAB5E68();
    swift_bridgeObjectRelease();
    objc_msgSend(v10, sel_sizeWithAttributes_, v11, *(_QWORD *)&v19.a);
    v13 = v12;
    v15 = v14;

    CGAffineTransformMakeTranslation(&v19, -v13, v15 * -0.5);
    v20.x = a4;
    v20.y = a5;
    v16 = CGPointApplyAffineTransform(v20, &v19);
    x = v16.x;
    y = v16.y;

  }
  else
  {
    x = 0.0;
    y = 0.0;
    v13 = 0.0;
    v15 = 0.0;
  }
  *(CGFloat *)a3 = x;
  *(CGFloat *)(a3 + 8) = y;
  *(double *)(a3 + 16) = v13;
  *(double *)(a3 + 24) = v15;
  *(_BYTE *)(a3 + 32) = a1 == 0;
}

unint64_t static DiagramGenerator.computeMaxMinPoints(dataGroupForPointLabels:pointLabels:valueFormatter:dataTable:)@<X0>(unint64_t result@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  int v6;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  double v17;
  uint64_t v18;
  _QWORD *v19;
  double v20;
  double v21;
  _QWORD *v22;
  void *v23;
  Swift::String_optional v24;
  void *object;
  uint64_t countAndFlagsBits;
  unint64_t v27;
  unint64_t v28;
  double *v29;
  void *v30;
  Swift::String_optional v31;
  void *v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  double *v36;
  __int128 v42;
  uint64_t v43;
  double *v44;
  double v45;
  double v46;
  void *v47;
  id v48;
  id v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  id v53;
  void *v54;
  id v55;
  unint64_t v56;
  void *v57;
  id v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  double *v62;
  void *v63;
  id v64;
  id v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  void *v69;
  id v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  double *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  __int128 v79;
  uint64_t v80;

  v6 = *((unsigned __int16 *)a2 + 4) | (*((unsigned __int8 *)a2 + 10) << 16);
  if ((v6 & 0x800000) == 0)
    goto LABEL_36;
  if ((v6 & 0xFEE0E0) == 0xFEE0E0)
    goto LABEL_36;
  if (!*(_QWORD *)(a4 + 16))
    goto LABEL_36;
  v8 = *a3;
  v78 = *((unsigned __int8 *)a3 + 8);
  v9 = *a2;
  result = sub_1BC9A2C2C(*(_BYTE *)result);
  if ((v10 & 1) == 0)
    goto LABEL_36;
  v11 = *(_QWORD *)(*(_QWORD *)(a4 + 56) + 40 * result);
  swift_bridgeObjectRetain();
  if (v9 == 25)
  {
    v12 = 0;
  }
  else
  {
    DiagramConfiguration.TextAttributes.toTextAttributes()();
    v12 = v13;
  }
  if (BYTE1(v9) != 25)
  {
    DiagramConfiguration.TextAttributes.toTextAttributes()();
    v14 = v43;
    if (v12 | v43)
      goto LABEL_10;
    goto LABEL_35;
  }
  v14 = 0;
  if (!v12)
  {
LABEL_35:
    result = swift_bridgeObjectRelease();
LABEL_36:
    *(_QWORD *)a5 = 1;
    *(_OWORD *)(a5 + 8) = 0u;
    *(_OWORD *)(a5 + 24) = 0u;
    *(_QWORD *)(a5 + 40) = 0;
    return result;
  }
LABEL_10:
  v15 = *(_QWORD *)(v11 + 16);
  if (!v15)
  {
    result = swift_bridgeObjectRelease();
    v19 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    v22 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    __asm { FMOV            V0.2D, #6.0 }
    if (v12)
      goto LABEL_32;
    goto LABEL_38;
  }
  v76 = v14;
  v77 = v8;
  v75 = v12;
  v17 = *(double *)(v11 + 32);
  v16 = *(double *)(v11 + 40);
  v18 = v15 - 1;
  if (v15 == 1)
  {
    v19 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    v20 = *(double *)(v11 + 40);
    v21 = *(double *)(v11 + 32);
    v22 = (_QWORD *)MEMORY[0x1E0DEE9D8];
LABEL_13:
    swift_bridgeObjectRelease();
    v23 = (void *)sub_1BCAB4FC8();
    v24 = DiagramConfiguration.ValueFormatter.format(value:)((NSNumber)v23);
    object = v24.value._object;

    if (v24.value._object)
      countAndFlagsBits = v24.value._countAndFlagsBits;
    else
      countAndFlagsBits = 1701736270;
    if (!v24.value._object)
      object = (void *)0xE400000000000000;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v19 = sub_1BC9D9A5C(0, v19[2] + 1, 1, v19);
    v12 = v75;
    v28 = v19[2];
    v27 = v19[3];
    if (v28 >= v27 >> 1)
      v19 = sub_1BC9D9A5C((_QWORD *)(v27 > 1), v28 + 1, 1, v19);
    v19[2] = v28 + 1;
    v29 = (double *)&v19[4 * v28];
    *((_QWORD *)v29 + 4) = countAndFlagsBits;
    *((_QWORD *)v29 + 5) = object;
    v29[6] = v21;
    v29[7] = v20;
    v30 = (void *)sub_1BCAB4FC8();
    v31 = DiagramConfiguration.ValueFormatter.format(value:)((NSNumber)v30);
    v32 = v31.value._object;

    if (v31.value._object)
      v33 = v31.value._countAndFlagsBits;
    else
      v33 = 1701736270;
    if (!v31.value._object)
      v32 = (void *)0xE400000000000000;
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = (unint64_t)sub_1BC9D9A5C(0, v22[2] + 1, 1, v22);
      v22 = (_QWORD *)result;
    }
    v35 = v22[2];
    v34 = v22[3];
    if (v35 >= v34 >> 1)
    {
      result = (unint64_t)sub_1BC9D9A5C((_QWORD *)(v34 > 1), v35 + 1, 1, v22);
      v22 = (_QWORD *)result;
    }
    v22[2] = v35 + 1;
    v36 = (double *)&v22[4 * v35];
    *((_QWORD *)v36 + 4) = v33;
    *((_QWORD *)v36 + 5) = v32;
    v36[6] = v17;
    v36[7] = v16;
    v14 = v76;
    __asm { FMOV            V0.2D, #6.0 }
    if (v75)
    {
LABEL_32:
      *((_QWORD *)&v42 + 1) = *((_QWORD *)&_Q0 + 1);
      *(_QWORD *)&v42 = v19;
      if (v14)
      {
LABEL_33:
        *(_QWORD *)&_Q0 = v22;
LABEL_40:
        *(_OWORD *)a5 = v42;
        *(_QWORD *)(a5 + 16) = v12;
        *(_OWORD *)(a5 + 24) = _Q0;
        *(_QWORD *)(a5 + 40) = v14;
        return result;
      }
LABEL_39:
      v79 = v42;
      result = swift_bridgeObjectRelease();
      v42 = v79;
      _Q0 = 0uLL;
      goto LABEL_40;
    }
LABEL_38:
    v80 = *((_QWORD *)&_Q0 + 1);
    result = swift_bridgeObjectRelease();
    *((_QWORD *)&_Q0 + 1) = v80;
    v42 = 0uLL;
    if (v14)
      goto LABEL_33;
    goto LABEL_39;
  }
  v44 = (double *)(v11 + 56);
  v19 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v45 = v16;
  v46 = v17;
  v20 = v16;
  v21 = v17;
  v22 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  while (1)
  {
    v17 = *(v44 - 1);
    v16 = *v44;
    if (vabdd_f64(v17, v21) < 0.000001)
    {
      if (v16 > v20)
        v20 = *v44;
      if (v45 < v16)
        v16 = v45;
      v17 = v46;
      goto LABEL_47;
    }
    v47 = (void *)sub_1BCAB4FC8();
    if (v78)
      break;
    v53 = (id)HKNumberFormatterWithDecimalPrecision();
    if (v53
      && (v54 = v53,
          v55 = objc_msgSend(v53, sel_stringFromNumber_, v47),
          v54,
          v55))
    {
      v50 = sub_1BCAB5F04();
      v52 = v56;

    }
    else
    {

      v52 = 0xE400000000000000;
      v50 = 1701736270;
    }
LABEL_62:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v19 = sub_1BC9D9A5C(0, v19[2] + 1, 1, v19);
    v61 = v19[2];
    v60 = v19[3];
    if (v61 >= v60 >> 1)
      v19 = sub_1BC9D9A5C((_QWORD *)(v60 > 1), v61 + 1, 1, v19);
    v19[2] = v61 + 1;
    v62 = (double *)&v19[4 * v61];
    *((_QWORD *)v62 + 4) = v50;
    *((_QWORD *)v62 + 5) = v52;
    v62[6] = v21;
    v62[7] = v20;
    v63 = (void *)sub_1BCAB4FC8();
    if (v78)
    {
      if (v8)
      {
        v64 = objc_msgSend((id)objc_opt_self(), sel_hk_percentNumberFormatter);
        v65 = objc_msgSend(v64, sel_stringFromNumber_, v63);

        if (!v65)
          goto LABEL_75;
        v66 = sub_1BCAB5F04();
        v68 = v67;

        v8 = v77;
        goto LABEL_77;
      }
      result = (unint64_t)(id)HKIntegerFormatter();
      if (!result)
        goto LABEL_83;
    }
    else
    {
      result = (unint64_t)(id)HKNumberFormatterWithDecimalPrecision();
      if (!result)
      {

        v68 = 0xE400000000000000;
        v66 = 1701736270;
        goto LABEL_77;
      }
    }
    v69 = (void *)result;
    v70 = objc_msgSend((id)result, sel_stringFromNumber_, v63);

    if (!v70)
    {
LABEL_75:

      v68 = 0xE400000000000000;
      v66 = 1701736270;
      v8 = v77;
      goto LABEL_77;
    }
    v66 = sub_1BCAB5F04();
    v68 = v71;

    v8 = v77;
LABEL_77:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v22 = sub_1BC9D9A5C(0, v22[2] + 1, 1, v22);
    v73 = v22[2];
    v72 = v22[3];
    if (v73 >= v72 >> 1)
      v22 = sub_1BC9D9A5C((_QWORD *)(v72 > 1), v73 + 1, 1, v22);
    v22[2] = v73 + 1;
    v74 = (double *)&v22[4 * v73];
    *((_QWORD *)v74 + 4) = v66;
    *((_QWORD *)v74 + 5) = v68;
    v74[6] = v46;
    v74[7] = v45;
    v20 = v16;
    v21 = v17;
    v46 = v17;
LABEL_47:
    v44 += 2;
    v45 = v16;
    if (!--v18)
      goto LABEL_13;
  }
  if (v8)
  {
    v48 = objc_msgSend((id)objc_opt_self(), sel_hk_percentNumberFormatter);
    v49 = objc_msgSend(v48, sel_stringFromNumber_, v47);

    if (v49)
    {
      v50 = sub_1BCAB5F04();
      v52 = v51;

LABEL_61:
      v8 = v77;
      goto LABEL_62;
    }
    goto LABEL_60;
  }
  result = (unint64_t)(id)HKIntegerFormatter();
  if (result)
  {
    v57 = (void *)result;
    v58 = objc_msgSend((id)result, sel_stringFromNumber_, v47);

    if (v58)
    {
      v50 = sub_1BCAB5F04();
      v52 = v59;

      goto LABEL_61;
    }
LABEL_60:

    v52 = 0xE400000000000000;
    v50 = 1701736270;
    goto LABEL_61;
  }
  __break(1u);
LABEL_83:
  __break(1u);
  return result;
}

BOOL sub_1BCA20F20@<W0>(uint64_t *a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  unsigned __int8 v10;
  CGFloat x;
  CGFloat v12;
  CGFloat v13;
  CGFloat v14;
  CGFloat y;
  CGFloat v16;
  CGFloat height;
  CGFloat width;
  _BOOL8 result;
  CGFloat v20;
  CGFloat v21;
  CGFloat v22;
  CGFloat v23;
  unsigned __int8 v24;
  _QWORD v25[4];
  char v26;
  uint64_t v27;
  CGRect v28;
  CGRect v29;

  v4 = *a1;
  v5 = a1[1];
  v6 = a1[2];
  v7 = a1[3];
  v8 = *((_BYTE *)a1 + 32);
  v9 = a1[5];
  v10 = *a2;
  v12 = *(double *)(MEMORY[0x1E0C9D628] + 8);
  v13 = *(double *)(MEMORY[0x1E0C9D628] + 16);
  v14 = *(double *)(MEMORY[0x1E0C9D628] + 24);
  v28.origin.x = *(CGFloat *)MEMORY[0x1E0C9D628];
  x = v28.origin.x;
  v28.origin.y = v12;
  v28.size.width = v13;
  v28.size.height = v14;
  DiagramData.diagramBounds(forceNonZeroSize:)(1);
  v25[0] = v4;
  v25[1] = v5;
  v25[2] = v6;
  v25[3] = v7;
  v26 = v8;
  v27 = v9;
  v24 = v10;
  sub_1BCA1FF10((uint64_t)v25, &v24, (void (*)(double *, double *, _QWORD *, double, double))sub_1BCA211B4);
  v16 = v28.origin.x;
  y = v28.origin.y;
  width = v28.size.width;
  height = v28.size.height;
  v29.origin.x = x;
  v29.origin.y = v12;
  v29.size.width = v13;
  v29.size.height = v14;
  result = CGRectEqualToRect(v28, v29);
  v20 = 0.0;
  v21 = 0.0;
  v22 = 0.0;
  v23 = 0.0;
  if (!result)
  {
    v20 = v16;
    v21 = y;
    v22 = width;
    v23 = height;
  }
  *(CGFloat *)a3 = v20;
  *(CGFloat *)(a3 + 8) = v21;
  *(CGFloat *)(a3 + 16) = v22;
  *(CGFloat *)(a3 + 24) = v23;
  *(_BYTE *)(a3 + 32) = result;
  return result;
}

void sub_1BCA21060(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  sub_1BCA20608(a1, a2, a3, *(_QWORD *)(v3 + 32), *(_BYTE *)(v3 + 40), *(CGRect **)(v3 + 48));
}

uint64_t dispatch thunk of DiagramGenerator.modelSpace.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of DiagramGenerator.screenInsets.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of DiagramGenerator.drawingBlock.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t destroy for DiagramPointAnnotations()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *_s19HealthVisualization23DiagramPointAnnotationsVwCP_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for DiagramPointAnnotations(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *assignWithTake for DiagramPointAnnotations(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for DiagramPointAnnotations()
{
  return &type metadata for DiagramPointAnnotations;
}

void sub_1BCA211B4(CGFloat a1, CGFloat a2)
{
  uint64_t v2;
  CGRect *v3;
  CGRect v4;

  v4.origin.y = a2;
  v4.origin.x = a1;
  v4.size.width = *(CGFloat *)(v2 + 16);
  v4.size.height = *(CGFloat *)(v2 + 24);
  v3 = *(CGRect **)(v2 + 32);
  *v3 = CGRectUnion(*v3, v4);
}

BOOL static SevenDayDoseOperationError.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t SevenDayDoseOperationError.hash(into:)()
{
  return sub_1BCAB687C();
}

uint64_t SevenDayDoseOperationError.hashValue.getter()
{
  sub_1BCAB6870();
  sub_1BCAB687C();
  return sub_1BCAB6894();
}

uint64_t SevenDayDoseOperation.DoseData.points.getter()
{
  return swift_bridgeObjectRetain();
}

HealthVisualization::SevenDayDoseOperation::DoseData __swiftcall SevenDayDoseOperation.DoseData.init(points:)(HealthVisualization::SevenDayDoseOperation::DoseData points)
{
  HealthVisualization::SevenDayDoseOperation::DoseData *v1;

  v1->points._rawValue = points.points._rawValue;
  return points;
}

uint64_t sub_1BCA21280(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *v3;

  v2 = *a1;
  v3 = (_QWORD *)(*a2 + qword_1ED6C6AE8);
  swift_beginAccess();
  *v3 = v2;
  swift_retain();
  return swift_release();
}

uint64_t sub_1BCA212E8()
{
  swift_beginAccess();
  return swift_retain();
}

double SevenDayDoseOperation.doseIntervalDuration.getter()
{
  return 604800.0;
}

void sub_1BCA21340(void **a1, _QWORD *a2)
{
  void *v2;
  void **v3;
  void *v4;
  id v5;

  v2 = *a1;
  v3 = (void **)(*a2 + qword_1ED6C6AD8);
  swift_beginAccess();
  v4 = *v3;
  *v3 = v2;
  v5 = v2;

}

void *sub_1BCA213A0()
{
  uint64_t v0;
  void **v1;
  void *v2;
  id v3;

  v1 = (void **)(v0 + qword_1ED6C6AD8);
  swift_beginAccess();
  v2 = *v1;
  v3 = v2;
  return v2;
}

uint64_t sub_1BCA213EC(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  sub_1BC998AB0(0, (unint64_t *)&qword_1ED6C71E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAE5D0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v9 - v5;
  sub_1BCA214F8(a1, (uint64_t)&v9 - v5);
  v7 = *a2 + qword_1ED6D3A10;
  swift_beginAccess();
  sub_1BCA2209C((uint64_t)v6, v7);
  return swift_endAccess();
}

uint64_t sub_1BCA214A8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + qword_1ED6D3A10;
  swift_beginAccess();
  return sub_1BCA214F8(v3, a1);
}

uint64_t sub_1BCA214F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1BC998AB0(0, (unint64_t *)&qword_1ED6C71E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAE5D0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

id SevenDayDoseOperation.healthStore.getter()
{
  uint64_t v0;

  return *(id *)(v0 + qword_1ED6D3A08);
}

void *sub_1BCA21564()
{
  char *v0;
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;

  v1 = qword_1ED6C6AD0;
  v2 = *(void **)&v0[qword_1ED6C6AD0];
  v3 = v2;
  if (v2 == (void *)1)
  {
    sub_1BCA215D0(v0);
    v3 = v4;
    v5 = *(void **)&v0[v1];
    *(_QWORD *)&v0[v1] = v4;
    v6 = v4;
    sub_1BC9C82F8(v5);
  }
  sub_1BC9C8250(v2);
  return v3;
}

void sub_1BCA215D0(char *a1)
{
  uint64_t (*v2)(uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 *v8;
  unint64_t v9;
  id *v10;
  id v11;
  id v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  id v17;
  uint64_t ConfigurationOverrides;
  id v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  void *v26;
  int v27;
  unsigned __int8 v28[8];
  uint64_t v29;
  __int16 v30;
  unsigned __int8 v31[8];
  uint64_t v32;
  __int16 v33;

  v2 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
  sub_1BC998AB0(0, &qword_1ED6C6C98, (uint64_t (*)(uint64_t))type metadata accessor for StatisticsQueryConfigurationOverrides, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v3);
  v5 = &v28[-v4];
  sub_1BC998AB0(0, (unint64_t *)&qword_1ED6C71E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAE5D0], v2);
  MEMORY[0x1E0C80A78](v6);
  v8 = &v28[-v7];
  v9 = *(_QWORD *)&a1[qword_1ED6D3A18];
  v10 = (id *)&a1[qword_1ED6C6AD8];
  swift_beginAccess();
  v11 = *v10;
  if (!*v10)
  {
    __break(1u);
    goto LABEL_12;
  }
  swift_bridgeObjectRetain();
  v12 = v11;
  v13 = sub_1BC9E11E8((uint64_t)v12, v9);
  swift_bridgeObjectRelease();

  if ((v13 & 1) == 0)
    return;
  v14 = (uint64_t)&a1[qword_1ED6D3A10];
  swift_beginAccess();
  sub_1BCA214F8(v14, (uint64_t)v8);
  v15 = sub_1BCAB4BD8();
  v16 = (*(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 48))(v8, 1, v15);
  sub_1BC9B01E4((uint64_t)v8);
  if (v16 == 1)
    return;
  if (!*v10)
  {
LABEL_12:
    __break(1u);
    return;
  }
  v17 = *v10;
  sub_1BCA218AC((uint64_t)v31);
  v28[0] = v31[0];
  v29 = v32;
  v30 = v33;
  sub_1BCA214F8(v14, (uint64_t)v5);
  ConfigurationOverrides = type metadata accessor for StatisticsQueryConfigurationOverrides();
  *(_QWORD *)&v5[*(int *)(ConfigurationOverrides + 20)] = 0;
  v5[*(int *)(ConfigurationOverrides + 24)] = 1;
  (*(void (**)(unsigned __int8 *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(ConfigurationOverrides - 8) + 56))(v5, 0, 1, ConfigurationOverrides);
  v19 = objc_msgSend(a1, sel_name);
  if (v19)
  {
    v20 = v19;
    v21 = sub_1BCAB5F04();
    v23 = v22;
  }
  else
  {
    v24 = a1;
    v20 = objc_msgSend(v24, sel_description);
    v21 = sub_1BCAB5F04();
    v23 = v25;

  }
  v26 = *(void **)&a1[qword_1ED6D3A08];
  v27 = a1[qword_1ED6C3978];
  objc_allocWithZone((Class)type metadata accessor for StatisticsCollectionQueryOperation());
  StatisticsCollectionQueryOperation.init(sampleType:configuration:configurationOverrides:name:queryQualityOfService:healthStore:environment:resultHandler:)(v17, v28, (uint64_t)v5, v21, v23, 33, (char *)v26, v27, (void (*)(char *, char *, uint64_t))nullsub_1, 0);
}

void sub_1BCA218AC(uint64_t a1@<X8>)
{
  uint64_t v1;
  void **v3;
  void *v4;
  void *v5;
  id v6;
  id v7;
  void *v8;
  id v9;
  char v10;
  void *v11;

  v3 = (void **)(v1 + qword_1ED6C6AD8);
  swift_beginAccess();
  v4 = *v3;
  v5 = (void *)objc_opt_self();
  v6 = v4;
  v7 = objc_msgSend(v5, sel__quantityTypeWithCode_, 172);
  v8 = v7;
  if (!v4)
  {
    if (!v7)
      goto LABEL_6;
LABEL_8:

LABEL_9:
    v11 = &unk_1E7544408;
    goto LABEL_10;
  }
  if (!v7)
  {
    v8 = v6;
    goto LABEL_8;
  }
  sub_1BC9B3A7C();
  v9 = v6;
  v10 = sub_1BCAB6330();

  if ((v10 & 1) == 0)
    goto LABEL_9;
LABEL_6:
  v11 = &unk_1E75443E0;
LABEL_10:
  *(_BYTE *)a1 = 0;
  *(_QWORD *)(a1 + 8) = v11;
  *(_WORD *)(a1 + 16) = 256;
}

void sub_1BCA219AC(uint64_t a1)
{
  uint64_t v1;
  void *v2;

  v2 = *(void **)(v1 + qword_1ED6C6AD0);
  *(_QWORD *)(v1 + qword_1ED6C6AD0) = a1;
  sub_1BC9C82F8(v2);
}

void (*sub_1BCA219C4(void **a1))(uint64_t a1, char a2)
{
  void *v1;

  a1[1] = v1;
  *a1 = sub_1BCA21564();
  return sub_1BCA219F8;
}

void sub_1BCA219F8(uint64_t a1, char a2)
{
  void *v2;
  uint64_t v3;
  void *v4;
  id v5;

  v2 = *(void **)a1;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(void **)(v3 + qword_1ED6C6AD0);
  *(_QWORD *)(v3 + qword_1ED6C6AD0) = *(_QWORD *)a1;
  if ((a2 & 1) != 0)
  {
    v5 = v2;
    sub_1BC9C82F8(v4);

  }
  else
  {
    sub_1BC9C82F8(v4);
  }
}

id SevenDayDoseOperation.__allocating_init(healthStore:name:environment:)(void *a1, uint64_t a2, uint64_t a3, char a4)
{
  objc_class *v4;
  char v8;
  id v9;

  v8 = a4 & 1;
  v9 = objc_allocWithZone(v4);
  return SevenDayDoseOperation.init(healthStore:name:environment:)(a1, a2, a3, v8);
}

id SevenDayDoseOperation.init(healthStore:name:environment:)(void *a1, uint64_t a2, uint64_t a3, char a4)
{
  char *v4;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  id result;
  uint64_t v17;
  id v18;
  id v19;
  id v20;
  void *v21;
  objc_super v22;
  uint64_t v23;
  char v24;

  v8 = qword_1ED6C6AE8;
  sub_1BCA21D14();
  v9 = swift_allocError();
  *v10 = 0;
  v23 = v9;
  v24 = 1;
  sub_1BC998AB0(0, &qword_1ED6C6990, (uint64_t (*)(uint64_t))sub_1BCA21D58, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0D2E5C8]);
  swift_allocObject();
  v11 = v4;
  *(_QWORD *)&v4[v8] = sub_1BCAB50A0();
  *(_QWORD *)&v11[qword_1ED6C6AE0] = 0x4122750000000000;
  *(_QWORD *)&v11[qword_1ED6C6AD8] = 0;
  v12 = &v11[qword_1ED6D3A10];
  v13 = sub_1BCAB4BD8();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v12, 1, 1, v13);
  *(_QWORD *)&v11[qword_1ED6C6AD0] = 1;
  sub_1BC9AFE08();
  v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_1BCAC1E60;
  v15 = (void *)objc_opt_self();
  result = objc_msgSend(v15, sel__quantityTypeWithCode_, 173);
  if (!result)
  {
    __break(1u);
    goto LABEL_8;
  }
  *(_QWORD *)(v14 + 32) = result;
  result = objc_msgSend(v15, sel__quantityTypeWithCode_, 172);
  if (!result)
  {
LABEL_8:
    __break(1u);
    return result;
  }
  v17 = qword_1ED6D3A18;
  *(_QWORD *)(v14 + 40) = result;
  v23 = v14;
  sub_1BCAB6024();
  *(_QWORD *)&v11[v17] = v14;
  *(_QWORD *)&v11[qword_1ED6D3A08] = a1;
  v11[qword_1ED6C3978] = a4 & 1;
  v18 = a1;

  v22.receiver = v11;
  v22.super_class = (Class)type metadata accessor for SevenDayDoseOperation();
  v19 = objc_msgSendSuper2(&v22, sel_init);
  v20 = v19;
  if (a3)
  {
    v21 = (void *)sub_1BCAB5EE0();
    swift_bridgeObjectRelease();
  }
  else
  {
    v21 = 0;
  }
  objc_msgSend(v19, sel_setName_, v21);

  return v19;
}

unint64_t sub_1BCA21D14()
{
  unint64_t result;

  result = qword_1ED6C6B58;
  if (!qword_1ED6C6B58)
  {
    result = MEMORY[0x1BCCFBE84](&protocol conformance descriptor for SevenDayDoseOperationError, &type metadata for SevenDayDoseOperationError);
    atomic_store(result, (unint64_t *)&qword_1ED6C6B58);
  }
  return result;
}

void sub_1BCA21D58()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED6C6F88)
  {
    sub_1BC9AE2A0();
    v0 = sub_1BCAB68A0();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED6C6F88);
  }
}

uint64_t type metadata accessor for SevenDayDoseOperation()
{
  uint64_t result;

  result = qword_1ED6C6AF0;
  if (!qword_1ED6C6AF0)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_1BCA21DF8(void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  void **v19;
  void *v20;
  id v21;
  uint64_t v22;
  void (*v23)(char *, char *, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t result;
  void *v29;
  unint64_t v30;
  id v31;
  char v32;
  uint64_t v33;
  _BOOL8 v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v40 = a2;
  sub_1BC998AB0(0, (unint64_t *)&qword_1ED6C71E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAE5D0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v4);
  v36 = (uint64_t)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v35 - v7;
  v9 = sub_1BCAB4E54();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v35 - v14;
  MEMORY[0x1E0C80A78](v16);
  v18 = (char *)&v35 - v17;
  v19 = (void **)(v2 + qword_1ED6C6AD8);
  swift_beginAccess();
  v20 = *v19;
  *v19 = a1;
  v21 = a1;

  v22 = v40;
  sub_1BCAB4DA0();
  sub_1BCAB4D94();
  v37 = v18;
  v38 = v10;
  v23 = *(void (**)(char *, char *, uint64_t))(v10 + 16);
  v23(v15, v18, v9);
  v40 = v9;
  v23(v12, (char *)v22, v9);
  v24 = v39;
  sub_1BCAB4BA8();
  v25 = sub_1BCAB4BD8();
  v26 = *(_QWORD *)(v25 - 8);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v8, 0, 1, v25);
  v27 = v24 + qword_1ED6D3A10;
  swift_beginAccess();
  sub_1BCA2209C((uint64_t)v8, v27);
  result = swift_endAccess();
  v29 = *v19;
  if (*v19)
  {
    v30 = *(_QWORD *)(v24 + qword_1ED6D3A18);
    swift_bridgeObjectRetain();
    v31 = v29;
    v32 = sub_1BC9E11E8((uint64_t)v31, v30);
    swift_bridgeObjectRelease();

    if ((v32 & 1) != 0)
    {
      v33 = v36;
      sub_1BCA214F8(v27, v36);
      v34 = (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v26 + 48))(v33, 1, v25) != 1;
      sub_1BC9B01E4(v33);
    }
    else
    {
      v34 = 0;
    }
    (*(void (**)(char *, uint64_t))(v38 + 8))(v37, v40);
    return v34;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1BCA2209C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1BC998AB0(0, (unint64_t *)&qword_1ED6C71E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAE5D0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1BCA220F8(void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  void **v11;
  void *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  void *v18;
  unint64_t v19;
  id v20;
  char v21;
  _BOOL8 v22;
  _BYTE v23[24];

  sub_1BC998AB0(0, (unint64_t *)&qword_1ED6C71E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAE5D0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v5);
  v7 = &v23[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v8);
  v10 = &v23[-v9];
  v11 = (void **)(v2 + qword_1ED6C6AD8);
  swift_beginAccess();
  v12 = *v11;
  *v11 = a1;
  v13 = a1;

  v14 = sub_1BCAB4BD8();
  v15 = *(_QWORD *)(v14 - 8);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v15 + 16))(v10, a2, v14);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v10, 0, 1, v14);
  v16 = v2 + qword_1ED6D3A10;
  swift_beginAccess();
  sub_1BCA2209C((uint64_t)v10, v16);
  result = swift_endAccess();
  v18 = *v11;
  if (v18)
  {
    v19 = *(_QWORD *)(v2 + qword_1ED6D3A18);
    swift_bridgeObjectRetain();
    v20 = v18;
    v21 = sub_1BC9E11E8((uint64_t)v20, v19);
    swift_bridgeObjectRelease();

    if ((v21 & 1) == 0)
      return 0;
    sub_1BCA214F8(v16, (uint64_t)v7);
    v22 = (*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v15 + 48))(v7, 1, v14) != 1;
    sub_1BC9B01E4((uint64_t)v7);
    return v22;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_1BCA222C0()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  id v5;
  void *v6;
  void *v7;
  void *v8;
  id *v9;
  id v10;
  uint64_t v11;
  void *v12;
  void *v13;
  Swift::String v14;
  Swift::String v15;
  uint64_t v16;
  void *v17;
  void *v18;
  id v19;
  char *v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD v27[2];
  uint64_t v28;
  uint64_t aBlock;
  unint64_t v30;
  uint64_t (*v31)(uint64_t);
  void *v32;
  void (*v33)();
  uint64_t v34;
  uint64_t ObjectType;

  v1 = sub_1BCAB5514();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v4 = (char *)v27 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = objc_msgSend((id)objc_opt_self(), sel_currentQueue);
  if (v5)
  {
    v6 = v5;
    v7 = sub_1BCA21564();
    if (!v7)
    {
      sub_1BCAB54B4();
      v20 = v0;
      v21 = sub_1BCAB54FC();
      v22 = sub_1BCAB61A4();
      if (os_log_type_enabled(v21, v22))
      {
        v23 = (uint8_t *)swift_slowAlloc();
        v28 = swift_slowAlloc();
        aBlock = v28;
        *(_DWORD *)v23 = 136446210;
        v27[1] = v23 + 4;
        ObjectType = swift_getObjectType();
        sub_1BCA237B8();
        v24 = sub_1BCAB5F28();
        ObjectType = sub_1BC99BD4C(v24, v25, &aBlock);
        sub_1BCAB63A8();

        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1BC989000, v21, v22, "%{public}s attempted to run with invalid configuration", v23, 0xCu);
        v26 = v28;
        swift_arrayDestroy();
        MEMORY[0x1BCCFBF5C](v26, -1, -1);
        MEMORY[0x1BCCFBF5C](v23, -1, -1);

      }
      else
      {

      }
      (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
      swift_beginAccess();
      swift_retain();
      sub_1BCAB507C();
      swift_release();
      sub_1BCAB50B8();
      goto LABEL_9;
    }
    v8 = v7;
    v9 = (id *)&v0[qword_1ED6C6AD8];
    swift_beginAccess();
    if (*v9)
    {
      v10 = objc_msgSend(*v9, sel_identifier);
      v11 = sub_1BCAB5F04();
      v13 = v12;

      v14._countAndFlagsBits = 0x676E696E6E7572;
      v14._object = (void *)0xE700000000000000;
      v15._countAndFlagsBits = v11;
      v15._object = v13;
      NSOperation.logLifeCycleEvent(_:withPrivateInfo:)(v14, v15);
      swift_bridgeObjectRelease();
      v16 = swift_allocObject();
      swift_unknownObjectWeakInit();
      v33 = sub_1BCA23814;
      v34 = v16;
      aBlock = MEMORY[0x1E0C809B0];
      v30 = 1107296256;
      v31 = sub_1BC9B17C8;
      v32 = &block_descriptor_4;
      v17 = _Block_copy(&aBlock);
      v18 = (void *)objc_opt_self();
      swift_retain();
      v19 = objc_msgSend(v18, sel_blockOperationWithBlock_, v17);
      _Block_release(v17);
      swift_release();
      swift_release();
      objc_msgSend(v19, sel_addDependency_, v8);
      objc_msgSend(v6, sel_addOperation_, v19);
      objc_msgSend(v6, sel_addOperation_, v8);

      v6 = v19;
LABEL_9:

      return;
    }
    __break(1u);
  }
  aBlock = 0;
  v30 = 0xE000000000000000;
  sub_1BCAB64C8();
  swift_getObjectType();
  sub_1BCAB68E8();
  sub_1BCAB5F70();
  swift_bridgeObjectRelease();
  sub_1BCAB5F70();
  sub_1BCAB65C4();
  __break(1u);
}

uint64_t sub_1BCA22730(uint64_t a1)
{
  return sub_1BCA23018(a1, 2);
}

void sub_1BCA22738(void *a1)
{
  id v1;

  v1 = a1;
  sub_1BCA222C0();

}

void sub_1BCA2276C()
{
  char *v0;
  char *v1;
  Swift::String v2;
  Swift::String v3;
  void *v4;
  void *v5;
  void *v6;
  Swift::String v7;
  Swift::String v8;

  v1 = v0;
  v2._countAndFlagsBits = 0x676E696E61656C63;
  v2._object = (void *)0xEB00000000707520;
  v3._countAndFlagsBits = 0;
  v3._object = (void *)0xE000000000000000;
  NSOperation.logLifeCycleEvent(_:withPrivateInfo:)(v2, v3);
  if (objc_msgSend(v0, sel_isCancelled))
  {
    v4 = sub_1BCA21564();
    if (v4)
    {
      v5 = v4;
      if ((objc_msgSend(v4, sel_isCancelled) & 1) == 0)
      {
        objc_msgSend(v5, sel_cancel);
        v6 = *(void **)&v1[qword_1ED6C6AD0];
        *(_QWORD *)&v1[qword_1ED6C6AD0] = 0;
        sub_1BC9C82F8(v6);
      }

    }
    swift_beginAccess();
    swift_retain();
    sub_1BCAB507C();
    swift_release();
    v7._countAndFlagsBits = 0x656C6C65636E6163;
    v7._object = (void *)0xE900000000000064;
    v8._countAndFlagsBits = 0;
    v8._object = (void *)0xE000000000000000;
    NSOperation.logLifeCycleEvent(_:withPrivateInfo:)(v7, v8);
  }
}

uint64_t sub_1BCA22884(uint64_t a1)
{
  return sub_1BCA23018(a1, 1);
}

id SevenDayDoseOperation.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void SevenDayDoseOperation.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void sub_1BCA228D8()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t sub_1BCA22904()
{
  uint64_t v0;

  swift_release();

  sub_1BC9B01E4(v0 + qword_1ED6D3A10);
  sub_1BC9C82F8(*(id *)(v0 + qword_1ED6C6AD0));
  return swift_bridgeObjectRelease();
}

id SevenDayDoseOperation.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SevenDayDoseOperation();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_1BCA229A4(uint64_t a1)
{
  swift_release();

  sub_1BC9B01E4(a1 + qword_1ED6D3A10);
  sub_1BC9C82F8(*(id *)(a1 + qword_1ED6C6AD0));
  return swift_bridgeObjectRelease();
}

id sub_1BCA22A1C()
{
  _QWORD *v0;

  return *(id *)(*v0 + qword_1ED6D3A08);
}

void sub_1BCA22A30(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = a1 + 16;
  swift_beginAccess();
  v2 = MEMORY[0x1BCCFC004](v1);
  if (v2)
  {
    v3 = (void *)v2;
    MEMORY[0x1E0C80A78](v2);
    sub_1BCAB50AC();

  }
}

void sub_1BCA22AB8(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void *v9;
  void *v10;
  NSObject *v11;
  id v12;
  id v13;
  NSObject *v14;
  os_log_type_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  os_log_t v23;
  NSObject *v24;
  id v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  NSObject *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  Swift::String v33;
  Swift::String v34;
  os_log_t v35;
  int v36;
  NSObject *v37;
  uint64_t v38;
  uint64_t ObjectType;
  NSObject *v40;
  char v41;

  v2 = sub_1BCAB5514();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v35 - v7;
  v9 = sub_1BCA21564();
  if (!v9)
  {
LABEL_7:
    sub_1BCAB54B4();
    v25 = a1;
    v26 = sub_1BCAB54FC();
    v27 = sub_1BCAB61A4();
    if (os_log_type_enabled(v26, v27))
    {
      v28 = (uint8_t *)swift_slowAlloc();
      v29 = swift_slowAlloc();
      v40 = v29;
      v38 = v3;
      *(_DWORD *)v28 = 136446210;
      ObjectType = swift_getObjectType();
      sub_1BCA237B8();
      v37 = v2;
      v30 = sub_1BCAB5F28();
      ObjectType = sub_1BC99BD4C(v30, v31, (uint64_t *)&v40);
      sub_1BCAB63A8();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1BC989000, v26, v27, "%{public}s attempted final result processing but base query is not finished", v28, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BCCFBF5C](v29, -1, -1);
      MEMORY[0x1BCCFBF5C](v28, -1, -1);

      (*(void (**)(char *, NSObject *))(v38 + 8))(v5, v37);
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    }
    swift_beginAccess();
    swift_retain();
    sub_1BCAB507C();
    swift_release();
    return;
  }
  v10 = v9;
  if (!objc_msgSend(v9, sel_isFinished))
  {

    goto LABEL_7;
  }
  swift_retain();
  sub_1BCAB5070();
  swift_release();
  v11 = v40;
  if (v41 == 1)
  {
    sub_1BCAB54B4();
    v12 = a1;
    sub_1BC9F3F44(v11);
    v13 = v12;
    sub_1BC9F3F44(v11);
    v14 = sub_1BCAB54FC();
    v15 = sub_1BCAB61A4();
    v16 = v15;
    if (os_log_type_enabled(v14, v15))
    {
      v17 = swift_slowAlloc();
      v36 = v16;
      v18 = v17;
      v37 = swift_slowAlloc();
      v40 = v37;
      *(_DWORD *)v18 = 136446466;
      v35 = v14;
      ObjectType = swift_getObjectType();
      sub_1BCA237B8();
      v38 = v3;
      v19 = sub_1BCAB5F28();
      ObjectType = sub_1BC99BD4C(v19, v20, (uint64_t *)&v40);
      sub_1BCAB63A8();

      swift_bridgeObjectRelease();
      *(_WORD *)(v18 + 12) = 2082;
      swift_getErrorValue();
      v21 = sub_1BCAB6810();
      ObjectType = sub_1BC99BD4C(v21, v22, (uint64_t *)&v40);
      sub_1BCAB63A8();
      swift_bridgeObjectRelease();
      sub_1BC9B39B4(v11);
      sub_1BC9B39B4(v11);
      v23 = v35;
      _os_log_impl(&dword_1BC989000, v35, (os_log_type_t)v36, "%{public}s base query result failed with error: %{public}s", (uint8_t *)v18, 0x16u);
      v24 = v37;
      swift_arrayDestroy();
      MEMORY[0x1BCCFBF5C](v24, -1, -1);
      MEMORY[0x1BCCFBF5C](v18, -1, -1);

      (*(void (**)(char *, uint64_t))(v38 + 8))(v8, v2);
    }
    else
    {

      sub_1BC9B39B4(v11);
      sub_1BC9B39B4(v11);

      (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
    }
    v32 = swift_beginAccess();
    MEMORY[0x1E0C80A78](v32);
    *(&v35 - 2) = v11;
    swift_retain();
    sub_1BCAB507C();
    swift_release();
    sub_1BC9B39B4(v11);
  }
  else
  {
    sub_1BCA23070(v40);
    sub_1BC9B39B4(v11);
  }
  v33._countAndFlagsBits = 0x64656873696E6966;
  v33._object = (void *)0xE800000000000000;
  v34._countAndFlagsBits = 0;
  v34._object = (void *)0xE000000000000000;
  NSOperation.logLifeCycleEvent(_:withPrivateInfo:)(v33, v34);

}

uint64_t sub_1BCA23010(uint64_t a1)
{
  return sub_1BCA23018(a1, 3);
}

uint64_t sub_1BCA23018(uint64_t a1, char a2)
{
  uint64_t result;
  _BYTE *v5;

  sub_1BC9A836C(*(id *)a1, *(_BYTE *)(a1 + 8));
  sub_1BCA21D14();
  result = swift_allocError();
  *v5 = a2;
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = 1;
  return result;
}

uint64_t sub_1BCA23070(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(char *, uint64_t, uint64_t);
  uint64_t result;
  void *v17;
  void (*v18)(char *, uint64_t);
  void (*v19)(char *, uint64_t);
  void *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  double v27;
  unint64_t v28;
  unint64_t v29;
  int64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  double v34;
  unint64_t v35;
  _QWORD v36[2];
  id v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD aBlock[6];

  v37 = a1;
  v39 = sub_1BCAB4E54();
  v2 = *(_QWORD *)(v39 - 8);
  MEMORY[0x1E0C80A78](v39);
  v4 = (char *)v36 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BC998AB0(0, (unint64_t *)&qword_1ED6C71E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAE5D0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)v36 - v9;
  v11 = swift_allocObject();
  v38 = v11;
  *(_QWORD *)(v11 + 16) = MEMORY[0x1E0DEE9D8];
  v36[0] = v1;
  v36[1] = v11 + 16;
  v12 = v1 + qword_1ED6D3A10;
  swift_beginAccess();
  sub_1BCA214F8(v12, (uint64_t)v10);
  v13 = sub_1BCAB4BD8();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48);
  result = v15(v10, 1, v13);
  if ((_DWORD)result == 1)
  {
    __break(1u);
    goto LABEL_18;
  }
  sub_1BCAB4BC0();
  v17 = (void *)sub_1BCAB4DE8();
  v18 = *(void (**)(char *, uint64_t))(v2 + 8);
  v18(v4, v39);
  v19 = *(void (**)(char *, uint64_t))(v14 + 8);
  v19(v10, v13);
  sub_1BCA214F8(v12, (uint64_t)v7);
  result = v15(v7, 1, v13);
  if ((_DWORD)result == 1)
  {
LABEL_18:
    __break(1u);
    return result;
  }
  sub_1BCAB4B9C();
  v20 = (void *)sub_1BCAB4DE8();
  v18(v4, v39);
  v19(v7, v13);
  v21 = v38;
  aBlock[4] = sub_1BCA23D58;
  aBlock[5] = v38;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1BCA2375C;
  aBlock[3] = &block_descriptor_12;
  v22 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  objc_msgSend(v37, sel_enumerateStatisticsFromDate_toDate_withBlock_, v17, v20, v22);
  _Block_release(v22);

  swift_beginAccess();
  v23 = *(_QWORD *)(v21 + 16);
  v24 = *(_QWORD *)(v23 + 16);
  if (v24)
  {
    swift_bridgeObjectRetain();
    v25 = sub_1BC9D9808(0, 1, 1, MEMORY[0x1E0DEE9D8]);
    v26 = *(_QWORD *)(v23 + 32);
    v27 = *(double *)(v23 + 40);
    v29 = v25[2];
    v28 = v25[3];
    v30 = v29 + 1;
    if (v29 >= v28 >> 1)
      goto LABEL_16;
    while (1)
    {
      v25[2] = v30;
      v28 = (unint64_t)&v25[2 * v29];
      *(_QWORD *)(v28 + 32) = v26;
      *(double *)(v28 + 40) = v27 + 0.0;
      if (!--v24)
        break;
      v29 = 0;
      v32 = 0;
      while (1)
      {
        v33 = v25[2];
        if (v32 >= v33)
          break;
        v26 = *(_QWORD *)(v23 + v29 + 48);
        v27 = *(double *)(v23 + v29 + 56);
        v34 = *(double *)((char *)v25 + v29 + 40);
        v35 = v25[3];
        v30 = v33 + 1;
        if (v33 >= v35 >> 1)
          v25 = sub_1BC9D9808((_QWORD *)(v35 > 1), v33 + 1, 1, v25);
        v25[2] = v30;
        v28 = (unint64_t)&v25[2 * v33];
        *(_QWORD *)(v28 + 32) = v26;
        *(double *)(v28 + 40) = v27 + v34;
        ++v32;
        v29 += 16;
        if (v24 == v32)
          goto LABEL_6;
      }
      __break(1u);
LABEL_16:
      v25 = sub_1BC9D9808((_QWORD *)(v28 > 1), v30, 1, v25);
    }
LABEL_6:
    swift_bridgeObjectRelease();
  }
  else
  {
    v25 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  v31 = swift_beginAccess();
  MEMORY[0x1E0C80A78](v31);
  v36[-2] = v25;
  swift_retain();
  sub_1BCAB507C();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_1BCA234A4(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _QWORD *v9;
  id v10;
  char v11;
  char v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v18;
  unint64_t v19;
  double v20;
  double *v21;
  uint64_t v23;

  v5 = sub_1BCAB4E54();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (_QWORD *)(a3 + 16);
  v10 = sub_1BCA23620(7);
  v12 = v11;
  v13 = objc_msgSend(a1, sel_startDate);
  sub_1BCAB4E24();

  sub_1BCAB4DA0();
  v15 = v14;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  swift_beginAccess();
  v16 = *(_QWORD **)(a3 + 16);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(a3 + 16) = v16;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v16 = sub_1BC9D9808(0, v16[2] + 1, 1, v16);
    *v9 = v16;
  }
  v19 = v16[2];
  v18 = v16[3];
  if (v19 >= v18 >> 1)
  {
    v16 = sub_1BC9D9808((_QWORD *)(v18 > 1), v19 + 1, 1, v16);
    *v9 = v16;
  }
  v20 = *(double *)&v10;
  if ((v12 & 1) != 0)
    v20 = 0.0;
  v16[2] = v19 + 1;
  v21 = (double *)&v16[2 * v19];
  *((_QWORD *)v21 + 4) = v15;
  v21[5] = v20;
  return swift_endAccess();
}

id sub_1BCA23620(uint64_t a1)
{
  void *v1;
  id result;
  void *v4;
  void *v5;
  id v6;
  double v7;
  double v8;
  void *v9;
  id v10;
  double v11;
  double v12;
  double v13;

  result = objc_msgSend(v1, sel_averageQuantity);
  if (*(double *)&result != 0.0)
  {
    v4 = result;
    v5 = (void *)objc_opt_self();
    v6 = objc_msgSend(v5, sel_decibelAWeightedSoundPressureLevelUnit);
    objc_msgSend(v4, sel_doubleValueForUnit_, v6);
    v8 = v7;

    result = objc_msgSend(v1, sel_duration);
    if (*(double *)&result != 0.0)
    {
      v9 = result;
      v10 = objc_msgSend(v5, sel_secondUnit);
      objc_msgSend(v9, sel_doubleValueForUnit_, v10);
      v12 = v11;

      objc_msgSend((id)objc_opt_self(), sel_maximumDurationInSecondsForLEQ_days_, a1, v8);
      if (v13 <= COERCE_DOUBLE(1))
        *(double *)&result = 0.0;
      else
        *(double *)&result = v12 / v13;
    }
  }
  return result;
}

void sub_1BCA2375C(uint64_t a1, void *a2)
{
  void (*v3)(void);
  id v4;

  v3 = *(void (**)(void))(a1 + 32);
  swift_retain();
  v4 = a2;
  v3();
  swift_release();

}

unint64_t sub_1BCA237B8()
{
  unint64_t result;

  result = qword_1EF479460;
  if (!qword_1EF479460)
  {
    type metadata accessor for SevenDayDoseOperation();
    result = swift_getMetatypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1EF479460);
  }
  return result;
}

uint64_t sub_1BCA237F0()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

void sub_1BCA23814()
{
  uint64_t v0;

  sub_1BCA22A30(v0);
}

unint64_t sub_1BCA23820()
{
  unint64_t result;

  result = qword_1EF479468;
  if (!qword_1EF479468)
  {
    result = MEMORY[0x1BCCFBE84](&protocol conformance descriptor for SevenDayDoseOperationError, &type metadata for SevenDayDoseOperationError);
    atomic_store(result, (unint64_t *)&qword_1EF479468);
  }
  return result;
}

uint64_t sub_1BCA23864@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v3;

  v3 = (_QWORD *)(*a1 + qword_1ED6C6AE8);
  swift_beginAccess();
  *a2 = *v3;
  return swift_retain();
}

id sub_1BCA238BC@<X0>(_QWORD *a1@<X0>, void **a2@<X8>)
{
  void **v3;
  void *v4;

  v3 = (void **)(*a1 + qword_1ED6C6AD8);
  swift_beginAccess();
  v4 = *v3;
  *a2 = *v3;
  return v4;
}

uint64_t sub_1BCA23910@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;

  v3 = *a1 + qword_1ED6D3A10;
  swift_beginAccess();
  return sub_1BCA214F8(v3, a2);
}

void *sub_1BCA23968@<X0>(_QWORD *a1@<X8>)
{
  void *result;

  result = sub_1BCA21564();
  *a1 = result;
  return result;
}

void sub_1BCA23990(void **a1, _QWORD *a2)
{
  void *v2;
  void *v3;
  id v4;

  v2 = *a1;
  v3 = *(void **)(*a2 + qword_1ED6C6AD0);
  *(_QWORD *)(*a2 + qword_1ED6C6AD0) = *a1;
  v4 = v2;
  sub_1BC9C82F8(v3);
}

uint64_t storeEnumTagSinglePayload for SevenDayDoseOperationError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1BCA23A14 + 4 * byte_1BCAC40A5[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1BCA23A48 + 4 * asc_1BCAC40A0[v4]))();
}

uint64_t sub_1BCA23A48(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BCA23A50(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BCA23A58);
  return result;
}

uint64_t sub_1BCA23A64(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BCA23A6CLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1BCA23A70(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BCA23A78(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SevenDayDoseOperationError()
{
  return &type metadata for SevenDayDoseOperationError;
}

void sub_1BCA23A94()
{
  unint64_t v0;

  sub_1BC998AB0(319, (unint64_t *)&qword_1ED6C71E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAE5D0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  if (v0 <= 0x3F)
    swift_initClassMetadata2();
}

uint64_t method lookup function for SevenDayDoseOperation()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SevenDayDoseOperation.result.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))(class metadata base offset for SevenDayDoseOperation + (*MEMORY[0x1E0DEEDD8] & *v0) + 64))();
}

uint64_t dispatch thunk of SevenDayDoseOperation.quantityType.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))(class metadata base offset for SevenDayDoseOperation + (*MEMORY[0x1E0DEEDD8] & *v0) + 88))();
}

uint64_t dispatch thunk of SevenDayDoseOperation.dateInterval.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))(class metadata base offset for SevenDayDoseOperation + (*MEMORY[0x1E0DEEDD8] & *v0) + 112))();
}

uint64_t dispatch thunk of SevenDayDoseOperation.baseDoseQuery.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))(class metadata base offset for SevenDayDoseOperation + (*MEMORY[0x1E0DEEDD8] & *v0) + 136))();
}

uint64_t dispatch thunk of SevenDayDoseOperation.baseDoseQuery.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))(class metadata base offset for SevenDayDoseOperation + (*MEMORY[0x1E0DEEDD8] & *v0) + 144))();
}

uint64_t dispatch thunk of SevenDayDoseOperation.baseDoseQuery.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))(class metadata base offset for SevenDayDoseOperation + (*MEMORY[0x1E0DEEDD8] & *v0) + 152))();
}

uint64_t dispatch thunk of SevenDayDoseOperation.__allocating_init(healthStore:name:environment:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD))(class metadata base offset for SevenDayDoseOperation
                                                                      + v4
                                                                      + 160))(a1, a2, a3, a4 & 1);
}

uint64_t dispatch thunk of SevenDayDoseOperation.configure(quantityType:targetDate:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))(class metadata base offset for SevenDayDoseOperation + (*MEMORY[0x1E0DEEDD8] & *v0) + 168))();
}

uint64_t dispatch thunk of SevenDayDoseOperation.configure(quantityType:dateInterval:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))(class metadata base offset for SevenDayDoseOperation + (*MEMORY[0x1E0DEEDD8] & *v0) + 176))();
}

uint64_t sub_1BCA23CD8()
{
  return type metadata accessor for SevenDayDoseOperation();
}

ValueMetadata *type metadata accessor for SevenDayDoseOperation.DoseData()
{
  return &type metadata for SevenDayDoseOperation.DoseData;
}

void sub_1BCA23CF0()
{
  uint64_t v0;

  sub_1BCA22AB8(*(void **)(v0 + 16));
}

id sub_1BCA23CF8(uint64_t a1)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 16);
  sub_1BC9A836C(*(id *)a1, *(_BYTE *)(a1 + 8));
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = 1;
  return v3;
}

uint64_t sub_1BCA23D34()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1BCA23D58(void *a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1BCA234A4(a1, a2, v2);
}

uint64_t sub_1BCA23D60(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 16);
  sub_1BC9A836C(*(id *)a1, *(_BYTE *)(a1 + 8));
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = 0;
  return swift_bridgeObjectRetain();
}

id static SharedDiagrams.SevenDayDose.diagramData(contentPoints:referenceLinePositions:valueFormatter:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  int64_t v6;
  uint64_t v7;
  __int128 *v9;
  unint64_t v10;
  __int128 v11;
  unint64_t v12;
  unint64_t v13;
  CGFloat v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t inited;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  CGFloat x;
  CGFloat *v23;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  int64_t v27;
  uint64_t v28;
  CGFloat *v29;
  CGFloat v30;
  uint64_t v31;
  CGFloat v32;
  CGFloat v33;
  uint64_t v34;
  void *v35;
  id v36;
  id v37;
  id result;
  id v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  CGFloat v53;
  CGFloat v54;
  CGFloat v55;
  CGFloat v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  __int128 v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  CGRect v64;
  CGRect v65;
  CGRect v66;
  CGRect v67;
  CGRect v68;
  CGRect v69;
  CGRect v70;
  CGRect v71;
  CGRect v72;
  CGRect v73;
  CGRect v74;

  v59 = *a3;
  v58 = *((unsigned __int8 *)a3 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = MEMORY[0x1E0DEE9D8];
  if (v6)
  {
    v61 = MEMORY[0x1E0DEE9D8];
    sub_1BC9BADBC(0, v6, 0);
    v7 = v61;
    v9 = (__int128 *)(a1 + 32);
    v10 = *(_QWORD *)(v61 + 16);
    do
    {
      v11 = *v9;
      v12 = *(_QWORD *)(v61 + 24);
      v13 = v10 + 1;
      if (v10 >= v12 >> 1)
      {
        v60 = *v9;
        sub_1BC9BADBC(v12 > 1, v10 + 1, 1);
        v11 = v60;
      }
      *(_QWORD *)(v61 + 16) = v13;
      *(_OWORD *)(v61 + 16 * v10 + 32) = v11;
      ++v9;
      ++v10;
      --v6;
    }
    while (v6);
  }
  else
  {
    v13 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
    if (!v13)
    {
      v49 = MEMORY[0x1E0DEE9D8];
      result = (id)swift_bridgeObjectRelease();
      *(_OWORD *)a4 = 0u;
      *(_OWORD *)(a4 + 16) = 0u;
      *(_BYTE *)(a4 + 32) = 1;
LABEL_28:
      *(_QWORD *)(a4 + 40) = v49;
      return result;
    }
  }
  v14 = *(double *)(v7 + 32);
  v15 = v7 + 32 + 16 * v13;
  v17 = *(_QWORD *)(v15 - 16);
  v16 = *(_QWORD *)(v15 - 8);
  sub_1BC9EC1CC(0, &qword_1ED6C6F48, (void (*)(uint64_t))sub_1BCA2438C);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1BCABFE80;
  *(_BYTE *)(inited + 32) = 0;
  *(_QWORD *)(inited + 40) = v7;
  *(_OWORD *)(inited + 48) = 0u;
  *(_OWORD *)(inited + 64) = 0u;
  *(_BYTE *)(inited + 80) = 1;
  *(_QWORD *)(inited + 88) = v7;
  *(_OWORD *)(inited + 96) = 0u;
  *(_OWORD *)(inited + 112) = 0u;
  swift_bridgeObjectRetain_n();
  v52 = sub_1BCA92A0C(inited);
  sub_1BC9EC1CC(0, &qword_1ED6C71D8, type metadata accessor for CGPoint);
  v19 = swift_allocObject();
  *(_OWORD *)(v19 + 16) = xmmword_1BCABE680;
  v57 = v17;
  *(_QWORD *)(v19 + 32) = v17;
  *(_QWORD *)(v19 + 40) = v16;
  v20 = swift_initStackObject();
  *(_OWORD *)(v20 + 16) = xmmword_1BCABE680;
  *(_BYTE *)(v20 + 32) = 1;
  *(_QWORD *)(v20 + 40) = v19;
  *(_OWORD *)(v20 + 48) = 0u;
  *(_OWORD *)(v20 + 64) = 0u;
  v21 = sub_1BCA92A0C(v20);
  x = *(double *)(v7 + 32);
  swift_bridgeObjectRetain();
  v23 = (CGFloat *)(v7 + 40);
  y = 0.0;
  width = 0.0;
  height = 0.0;
  do
  {
    v71.origin.x = *(v23 - 1);
    v71.origin.y = *v23;
    v71.size.width = 0.0;
    v71.size.height = 0.0;
    v64.origin.x = x;
    v64.origin.y = y;
    v64.size.width = width;
    v64.size.height = height;
    v65 = CGRectUnion(v64, v71);
    x = v65.origin.x;
    y = v65.origin.y;
    width = v65.size.width;
    height = v65.size.height;
    v23 += 2;
    --v13;
  }
  while (v13);
  swift_bridgeObjectRelease_n();
  v27 = *(_QWORD *)(a2 + 16);
  v28 = MEMORY[0x1E0DEE9D8];
  if (!v27)
  {
    v47 = v52;
LABEL_27:
    sub_1BC9EC1CC(0, &qword_1ED6C6F58, (void (*)(uint64_t))sub_1BC9BD354);
    v48 = swift_allocObject();
    *(_OWORD *)(v48 + 16) = xmmword_1BCABFE80;
    *(_QWORD *)(v48 + 32) = v47;
    *(_QWORD *)(v48 + 40) = v21;
    v63 = v48;
    result = (id)sub_1BC9E413C(v28);
    v49 = v63;
    *(CGFloat *)a4 = x;
    *(CGFloat *)(a4 + 8) = y;
    *(CGFloat *)(a4 + 16) = width;
    *(CGFloat *)(a4 + 24) = height;
    *(_BYTE *)(a4 + 32) = 0;
    goto LABEL_28;
  }
  v50 = v21;
  v51 = a4;
  v62 = MEMORY[0x1E0DEE9D8];
  sub_1BC9BADA0(0, v27, 0);
  v28 = v62;
  v29 = (CGFloat *)(a2 + 32);
  v55 = *(double *)(MEMORY[0x1E0C9D628] + 8);
  v56 = *MEMORY[0x1E0C9D628];
  v53 = *(double *)(MEMORY[0x1E0C9D628] + 24);
  v54 = *(double *)(MEMORY[0x1E0C9D628] + 16);
  while (1)
  {
    v30 = *v29;
    v31 = swift_allocObject();
    *(_OWORD *)(v31 + 16) = xmmword_1BCABFE80;
    *(CGFloat *)(v31 + 32) = v14;
    *(CGFloat *)(v31 + 40) = v30;
    *(_QWORD *)(v31 + 48) = v57;
    *(CGFloat *)(v31 + 56) = v30;
    swift_bridgeObjectRetain();
    v72.size.width = 0.0;
    v72.size.height = 0.0;
    v66.origin.y = v55;
    v66.origin.x = v56;
    v66.size.height = v53;
    v66.size.width = v54;
    v72.origin.x = v14;
    v72.origin.y = v30;
    v67 = CGRectUnion(v66, v72);
    v73.origin.x = *(CGFloat *)(v31 + 48);
    v73.origin.y = *(CGFloat *)(v31 + 56);
    v73.size.width = 0.0;
    v73.size.height = 0.0;
    v68 = CGRectUnion(v67, v73);
    v32 = v68.origin.y;
    v33 = v68.size.height;
    swift_bridgeObjectRelease();
    v69.origin.x = x;
    v69.origin.y = y;
    v69.size.width = width;
    v69.size.height = height;
    v74.origin.x = x;
    v74.origin.y = v32;
    v74.size.width = width;
    v74.size.height = v33;
    v70 = CGRectUnion(v69, v74);
    x = v70.origin.x;
    y = v70.origin.y;
    width = v70.size.width;
    height = v70.size.height;
    v34 = swift_initStackObject();
    *(_OWORD *)(v34 + 16) = xmmword_1BCABE680;
    *(_BYTE *)(v34 + 32) = 2;
    v35 = (void *)sub_1BCAB4FC8();
    if (!v58)
    {
      result = (id)HKNumberFormatterWithDecimalPrecision();
      if (!result)
        goto LABEL_21;
      goto LABEL_18;
    }
    if (v59)
    {
      v36 = objc_msgSend((id)objc_opt_self(), sel_hk_percentNumberFormatter);
      v37 = objc_msgSend(v36, sel_stringFromNumber_, v35);
      goto LABEL_19;
    }
    result = (id)HKIntegerFormatter();
    if (!result)
      break;
LABEL_18:
    v36 = result;
    v37 = objc_msgSend(result, sel_stringFromNumber_, v35);
LABEL_19:
    v39 = v37;

    if (!v39)
    {
LABEL_21:

      v40 = sub_1BCAB6078();
      v42 = v43;
      goto LABEL_22;
    }
    v40 = sub_1BCAB5F04();
    v42 = v41;

LABEL_22:
    *(_QWORD *)(v34 + 40) = v31;
    *(_QWORD *)(v34 + 48) = v40;
    *(_QWORD *)(v34 + 64) = 0;
    *(_QWORD *)(v34 + 72) = 0;
    *(_QWORD *)(v34 + 56) = v42;
    v44 = sub_1BCA92A0C(v34);
    v46 = *(_QWORD *)(v62 + 16);
    v45 = *(_QWORD *)(v62 + 24);
    if (v46 >= v45 >> 1)
      sub_1BC9BADA0(v45 > 1, v46 + 1, 1);
    *(_QWORD *)(v62 + 16) = v46 + 1;
    *(_QWORD *)(v62 + 8 * v46 + 32) = v44;
    ++v29;
    if (!--v27)
    {
      a4 = v51;
      v47 = v52;
      v21 = v50;
      goto LABEL_27;
    }
  }
  __break(1u);
  return result;
}

double static SharedDiagrams.SevenDayDose.highlightLineDiagramConfig()@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)a1 = &unk_1E7544430;
  *(_OWORD *)(a1 + 8) = xmmword_1BCAC4210;
  *(_OWORD *)(a1 + 24) = xmmword_1BCAC4220;
  result = 0.0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_BYTE *)(a1 + 88) = 64;
  return result;
}

double static SharedDiagrams.SevenDayDose.alertLineDiagramConfig()@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)a1 = &unk_1E7544490;
  *(_OWORD *)(a1 + 8) = xmmword_1BCAC4230;
  *(_OWORD *)(a1 + 24) = xmmword_1BCAC4220;
  result = 0.0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_BYTE *)(a1 + 88) = 64;
  return result;
}

void sub_1BCA2438C()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_1ED6C69E0)
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1ED6C69E0);
  }
}

ValueMetadata *type metadata accessor for SharedDiagrams.SevenDayDose()
{
  return &type metadata for SharedDiagrams.SevenDayDose;
}

uint64_t sub_1BCA24400()
{
  uint64_t v1;

  swift_retain();
  sub_1BCAB5070();
  swift_release();
  return v1;
}

uint64_t sub_1BCA2444C(void *a1, uint64_t a2, char a3)
{
  char v5;

  v5 = a3 & 1;
  swift_retain();
  sub_1BCAB507C();
  sub_1BCA25C08(a1, a2, v5);
  return swift_release();
}

id sub_1BCA244C4(uint64_t a1, void *a2, uint64_t a3, char a4)
{
  sub_1BCA25C08(*(id *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_BYTE *)(a1 + 16) = a4 & 1;
  return sub_1BCA25A90(a2, a3, a4 & 1);
}

id sub_1BCA24518()
{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  id v3;
  uint64_t ObjectType;
  id v5;
  void *v6;
  id v7;

  v1 = qword_1EF4794A8;
  v2 = *(void **)((char *)v0 + qword_1EF4794A8);
  if (v2)
  {
    v3 = *(id *)((char *)v0 + qword_1EF4794A8);
  }
  else
  {
    ObjectType = swift_getObjectType();
    v5 = sub_1BCA24584(v0, ObjectType);
    v6 = *(void **)((char *)v0 + v1);
    *(uint64_t *)((char *)v0 + v1) = (uint64_t)v5;
    v3 = v5;

    v2 = 0;
  }
  v7 = v2;
  return v3;
}

id sub_1BCA24584(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  id v12;
  uint64_t *v13;
  char *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  id v21;
  id v22;
  id v23;
  id v24;
  uint64_t v26;
  id v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  uint64_t v31;

  v31 = a2;
  v3 = *a1;
  v4 = *MEMORY[0x1E0DEEDD8];
  v5 = sub_1BCAB54A8();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v26 - v10;
  if (qword_1ED6C7098 != -1)
    swift_once();
  v28 = v4 & v3;
  v12 = (id)qword_1ED6C69C0;
  v13 = a1;
  sub_1BCAB549C();
  v29 = sub_1BCA25A9C();
  v30 = v11;
  v27 = *(id *)((char *)v13 + qword_1EF4794B0);
  v14 = v11;
  v15 = *(void **)((char *)v13 + qword_1EF4794C0);
  v16 = *(uint64_t *)((char *)v13 + qword_1EF4794C8);
  v17 = swift_allocObject();
  swift_unknownObjectWeakInit();
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v8, v14, v5);
  v18 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v19 = (v7 + v18 + 7) & 0xFFFFFFFFFFFFFFF8;
  v20 = swift_allocObject();
  *(_QWORD *)(v20 + 16) = *(_QWORD *)(v28 + class metadata base offset for CountComparisonQueryOperation);
  *(_QWORD *)(v20 + 24) = v17;
  (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v20 + v18, v8, v5);
  *(_QWORD *)(v20 + v19) = v31;
  swift_bridgeObjectRetain();
  v21 = v27;
  v22 = v15;
  v23 = sub_1BCA25E04(v21, v15, 0, v16, (uint64_t)sub_1BCA25B7C, v20);
  v24 = objc_msgSend(v13, sel_name);
  objc_msgSend(v23, sel_setDebugIdentifier_, v24);

  objc_msgSend(v23, sel_setQualityOfService_, *(uint64_t *)((char *)v13 + qword_1EF4794D0));
  (*(void (**)(char *, uint64_t))(v6 + 8))(v30, v5);
  return v23;
}

void sub_1BCA24804(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;

  v4 = a4 + 16;
  swift_beginAccess();
  v5 = MEMORY[0x1BCCFC004](v4);
  if (v5)
  {
    v6 = (void *)v5;
    MEMORY[0x1E0C80A78](v5);
    sub_1BCAB50AC();

  }
}

uint64_t sub_1BCA248B8(unint64_t a1, uint64_t a2, unint64_t a3)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  id v9;
  uint64_t v10;
  id v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  void *v16;
  uint64_t *v17;
  Swift::String v18;
  Swift::String v19;
  uint64_t *v20;
  char v21;
  id v22;
  id v23;
  id v24;
  Swift::String v25;
  Swift::String v26;
  uint64_t v28;
  uint64_t v29;

  if (a1)
  {
    v5 = (void *)sub_1BCA25324(a1);
    v7 = v6;
  }
  else
  {
    v9 = (id)a3;
    v28 = sub_1BCAB68E8();
    v29 = v10;
    sub_1BCAB5F70();
    v11 = objc_msgSend(*(id *)(a2 + qword_1EF4794D8), sel_profileIdentifier);
    v12 = objc_msgSend(v11, sel_description);
    sub_1BCAB5F04();

    sub_1BCAB5F70();
    swift_bridgeObjectRelease();
    sub_1BCAB5F70();
    v13 = v29;
    if (a3)
    {
      v14 = v28;
      v15 = a3 | 0x8000000000000000;
    }
    else
    {
      swift_bridgeObjectRelease();
      v14 = 0;
      v13 = 0;
      v15 = 0xC000000000000000;
    }
    sub_1BC9A82C4();
    v16 = (void *)swift_allocError();
    *v17 = v14;
    v17[1] = v13;
    v17[2] = v15;
    swift_getErrorValue();
    sub_1BC9A8308(v14, v13, v15);
    v18._countAndFlagsBits = sub_1BCAB6810();
    v19._countAndFlagsBits = 0;
    v19._object = (void *)0xE000000000000000;
    NSOperation.logErrorString(_:withInfo:)(v18, v19);
    swift_bridgeObjectRelease();

    v5 = (void *)swift_allocError();
    v7 = 0;
    *v20 = v14;
    v20[1] = v13;
    v20[2] = v15;
  }
  sub_1BCAB6264();
  if (qword_1ED6C7098 != -1)
    swift_once();
  v21 = a1 == 0;
  sub_1BCAB5490();
  sub_1BCA25A90(v5, v7, v21);
  sub_1BCA2444C(v5, v7, v21);
  sub_1BCAB64C8();
  v22 = objc_msgSend(*(id *)(a2 + qword_1EF4794B0), sel_identifier);
  sub_1BCAB5F04();

  sub_1BCAB5F70();
  swift_bridgeObjectRelease();
  sub_1BCAB5F70();
  v23 = objc_msgSend(*(id *)(a2 + qword_1EF4794D8), sel_profileIdentifier);
  v24 = objc_msgSend(v23, sel_description);
  sub_1BCAB5F04();

  sub_1BCAB5F70();
  swift_bridgeObjectRelease();
  sub_1BCAB5F70();
  sub_1BCA257F4();
  sub_1BCAB67BC();
  sub_1BCAB5F70();
  sub_1BCAB657C();
  v25._countAndFlagsBits = 0;
  v26._countAndFlagsBits = 0x64656873696E6966;
  v26._object = (void *)0xE800000000000000;
  v25._object = (void *)0xE000000000000000;
  NSOperation.logLifeCycleEvent(_:withPrivateInfo:)(v26, v25);
  sub_1BCA25C08(v5, v7, v21);
  return swift_bridgeObjectRelease();
}

id CountComparisonQueryOperation.__allocating_init(sampleType:configuration:predicate:sortDescriptors:name:queryQualityOfService:healthStore:)(void *a1, uint64_t *a2, void *a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, void *a8)
{
  objc_class *v8;
  id v17;

  v17 = objc_allocWithZone(v8);
  return CountComparisonQueryOperation.init(sampleType:configuration:predicate:sortDescriptors:name:queryQualityOfService:healthStore:)(a1, a2, a3, a4, a5, a6, a7, a8);
}

id CountComparisonQueryOperation.init(sampleType:configuration:predicate:sortDescriptors:name:queryQualityOfService:healthStore:)(void *a1, uint64_t *a2, void *a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, void *a8)
{
  _QWORD *v8;
  char v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  _QWORD *v18;
  char *v19;
  id v20;
  id v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  objc_class *Operation;
  id v26;
  id v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v33;
  objc_super v34;
  uint64_t v35;
  uint64_t v36;
  char v37;

  v33 = *MEMORY[0x1E0DEEDD8] & *v8;
  v13 = *((_BYTE *)a2 + 8);
  v29 = a2[2];
  v30 = *a2;
  v14 = *((_BYTE *)a2 + 24);
  v15 = qword_1EF479488;
  sub_1BC9A7EA4();
  v16 = swift_allocError();
  *v17 = 0;
  v35 = v16;
  v36 = 0;
  v37 = 1;
  sub_1BCA257A0();
  swift_allocObject();
  v18 = v8;
  *(_QWORD *)((char *)v8 + v15) = sub_1BCAB50A0();
  *(_QWORD *)((char *)v18 + qword_1EF4794A8) = 0;
  *(_QWORD *)((char *)v18 + qword_1EF4794B0) = a1;
  v19 = (char *)v18 + qword_1EF4794B8;
  *(_QWORD *)v19 = v30;
  v19[8] = v13;
  *((_QWORD *)v19 + 2) = v29;
  v19[24] = v14;
  *(_QWORD *)((char *)v18 + qword_1EF4794C0) = a3;
  *(_QWORD *)((char *)v18 + qword_1EF4794C8) = a4;
  *(_QWORD *)((char *)v18 + qword_1EF4794D0) = a7;
  *(_QWORD *)((char *)v18 + qword_1EF4794D8) = a8;
  v20 = a3;
  v21 = a1;
  v22 = a8;

  Operation = (objc_class *)type metadata accessor for CountComparisonQueryOperation(0, *(_QWORD *)(v33 + class metadata base offset for CountComparisonQueryOperation), v23, v24);
  v34.receiver = v18;
  v34.super_class = Operation;
  v26 = objc_msgSendSuper2(&v34, sel_init);
  v27 = v26;
  if (a6)
  {
    a6 = (void *)sub_1BCAB5EE0();
    swift_bridgeObjectRelease();
  }
  objc_msgSend(v26, sel_setName_, a6);

  return v26;
}

uint64_t sub_1BCA24FA8()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  void *v5;
  _BYTE *v6;
  void *v7;
  id v8;
  uint64_t v9;
  void *v10;
  void *v11;
  Swift::String v12;
  Swift::String v13;
  id v14;
  char *v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  id v22;
  uint64_t v24;

  v1 = sub_1BCAB54A8();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v4 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BC9A7EA4();
  v5 = (void *)swift_allocError();
  *v6 = 2;
  sub_1BCA2444C(v5, 0, 1);
  v7 = *(void **)&v0[qword_1EF4794B0];
  v8 = objc_msgSend(v7, sel_identifier);
  v9 = sub_1BCAB5F04();
  v11 = v10;

  v12._countAndFlagsBits = 0x676E696E6E7572;
  v12._object = (void *)0xE700000000000000;
  v13._countAndFlagsBits = v9;
  v13._object = v11;
  NSOperation.logLifeCycleEvent(_:withPrivateInfo:)(v12, v13);
  swift_bridgeObjectRelease();
  if (qword_1ED6C7098 != -1)
    swift_once();
  v14 = (id)qword_1ED6C69C0;
  v15 = v0;
  sub_1BCAB549C();
  sub_1BCAB6270();
  sub_1BC9A7EF4();
  v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_1BCABE680;
  v17 = objc_msgSend(v7, sel_identifier);
  v18 = sub_1BCAB5F04();
  v20 = v19;

  *(_QWORD *)(v16 + 56) = MEMORY[0x1E0DEA968];
  *(_QWORD *)(v16 + 64) = sub_1BC9A7FA4();
  *(_QWORD *)(v16 + 32) = v18;
  *(_QWORD *)(v16 + 40) = v20;
  sub_1BCAB5484();
  swift_bridgeObjectRelease();
  v21 = *(void **)&v15[qword_1EF4794D8];
  v22 = sub_1BCA24518();
  objc_msgSend(v21, sel_executeQuery_, v22);

  return (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v4, v1);
}

void sub_1BCA251F8(void *a1)
{
  id v1;

  v1 = a1;
  sub_1BCA24FA8();

}

void sub_1BCA2522C()
{
  char *v0;
  void *v1;
  _BYTE *v2;
  id v3;
  uint64_t v4;
  void *v5;
  void *v6;
  Swift::String v7;
  Swift::String v8;
  void *v9;
  id v10;

  if (objc_msgSend(v0, sel_isCancelled))
  {
    sub_1BC9A7EA4();
    v1 = (void *)swift_allocError();
    *v2 = 3;
    sub_1BCA2444C(v1, 0, 1);
    v3 = objc_msgSend(*(id *)&v0[qword_1EF4794B0], sel_identifier);
    v4 = sub_1BCAB5F04();
    v6 = v5;

    v7._countAndFlagsBits = 0x656C6C65636E6163;
    v7._object = (void *)0xE900000000000064;
    v8._countAndFlagsBits = v4;
    v8._object = v6;
    NSOperation.logLifeCycleEvent(_:withPrivateInfo:)(v7, v8);
    swift_bridgeObjectRelease();
  }
  v9 = *(void **)&v0[qword_1EF4794D8];
  v10 = sub_1BCA24518();
  objc_msgSend(v9, sel_stopQuery_, v10);

}

uint64_t sub_1BCA25324(unint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  id v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;

  v9 = 0;
  v10 = 0;
  if (!(a1 >> 62))
  {
    v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v3)
      goto LABEL_3;
LABEL_11:
    swift_bridgeObjectRelease();
    return 0;
  }
  swift_bridgeObjectRetain();
  result = sub_1BCAB65DC();
  v3 = result;
  if (!result)
    goto LABEL_11;
LABEL_3:
  if (v3 < 1)
  {
    __break(1u);
  }
  else
  {
    v5 = 0;
    do
    {
      if ((a1 & 0xC000000000000001) != 0)
        v6 = (id)MEMORY[0x1BCCFB0D4](v5, a1);
      else
        v6 = *(id *)(a1 + 8 * v5 + 32);
      v7 = v6;
      ++v5;
      v8 = v6;
      sub_1BCA2542C(&v8, v1, &v10, &v9);

    }
    while (v3 != v5);
    swift_bridgeObjectRelease();
    return v10;
  }
  return result;
}

uint64_t sub_1BCA2542C(id *a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  char *v14;
  id v15;
  id v16;
  double v17;
  double v18;
  void (*v19)(char *, uint64_t);
  id v20;
  double v21;
  double v22;
  uint64_t result;
  double v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;

  v27 = a4;
  v7 = sub_1BCAB4E54();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v12 = MEMORY[0x1E0C80A78](v11).n128_u64[0];
  v14 = (char *)&v26 - v13;
  v15 = *a1;
  v16 = objc_msgSend(*a1, sel_endDate, v12);
  sub_1BCAB4E24();

  sub_1BCAB4DA0();
  v18 = v17;
  v19 = *(void (**)(char *, uint64_t))(v8 + 8);
  v19(v14, v7);
  v20 = objc_msgSend(v15, sel_startDate);
  sub_1BCAB4E24();

  sub_1BCAB4DA0();
  v22 = v21;
  result = ((uint64_t (*)(char *, uint64_t))v19)(v10, v7);
  v24 = v18 - v22;
  if (v18 - v22 >= 0.0)
  {
    v25 = a2 + qword_1EF4794B8;
    if ((*(_BYTE *)(a2 + qword_1EF4794B8 + 8) & 1) != 0 || *(double *)v25 <= v24)
    {
      if (__OFADD__(*a3, 1))
      {
        __break(1u);
        goto LABEL_12;
      }
      ++*a3;
    }
    if ((*(_BYTE *)(v25 + 24) & 1) != 0 || *(double *)(v25 + 16) <= v24)
    {
      if (!__OFADD__(*v27, 1))
      {
        ++*v27;
        return result;
      }
LABEL_12:
      __break(1u);
    }
  }
  return result;
}

id CountComparisonQueryOperation.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void CountComparisonQueryOperation.init()()
{
  sub_1BCA258E0();
}

void sub_1BCA25614()
{
  sub_1BCA258E0();
}

void sub_1BCA25638()
{
  uint64_t v0;

  swift_release();

  swift_bridgeObjectRelease();
}

id CountComparisonQueryOperation.__deallocating_deinit(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  objc_class *Operation;
  objc_super v7;

  Operation = (objc_class *)type metadata accessor for CountComparisonQueryOperation(0, *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v4)+ class metadata base offset for CountComparisonQueryOperation), a3, a4);
  v7.receiver = v4;
  v7.super_class = Operation;
  return objc_msgSendSuper2(&v7, sel_dealloc);
}

void sub_1BCA256F8(uint64_t a1)
{
  swift_release();

  swift_bridgeObjectRelease();
}

uint64_t sub_1BCA25770@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  uint64_t v3;
  char v4;

  result = sub_1BCA24400();
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = v4 & 1;
  return result;
}

void sub_1BCA257A0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EF479490)
  {
    sub_1BCA257F4();
    v0 = sub_1BCAB5088();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EF479490);
  }
}

void sub_1BCA257F4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EF479498)
  {
    sub_1BCA25870();
    sub_1BC9A7F58(255, (unint64_t *)&qword_1ED6C6F70);
    v0 = sub_1BCAB68A0();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EF479498);
  }
}

void sub_1BCA25870()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_1EF4794A0)
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1EF4794A0);
  }
}

uint64_t type metadata accessor for CountComparisonQueryOperation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CountComparisonQueryOperation);
}

void sub_1BCA258E0()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t sub_1BCA2590C@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  uint64_t v3;
  char v4;

  result = sub_1BCA24400();
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = v4 & 1;
  return result;
}

uint64_t sub_1BCA2593C(uint64_t a1)
{
  id v1;
  uint64_t v2;
  char v3;

  v1 = *(id *)a1;
  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_BYTE *)(a1 + 16);
  sub_1BCA25A90(*(id *)a1, v2, v3);
  return sub_1BCA2444C(v1, v2, v3);
}

uint64_t sub_1BCA25988()
{
  return 8;
}

_QWORD *sub_1BCA25994(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_1BCA259A0()
{
  return swift_initClassMetadata2();
}

uint64_t method lookup function for CountComparisonQueryOperation()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of CountComparisonQueryOperation.result.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))(class metadata base offset for CountComparisonQueryOperation
                              + (*MEMORY[0x1E0DEEDD8] & *v0)
                              + 96))();
}

uint64_t dispatch thunk of CountComparisonQueryOperation.__allocating_init(sampleType:configuration:predicate:sortDescriptors:name:queryQualityOfService:healthStore:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(class metadata base offset for CountComparisonQueryOperation + v0 + 144))();
}

id sub_1BCA25A90(id result, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return result;
  return result;
}

unint64_t sub_1BCA25A9C()
{
  unint64_t result;

  result = qword_1ED6C4D68;
  if (!qword_1ED6C4D68)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1ED6C4D68);
  }
  return result;
}

uint64_t sub_1BCA25AD8()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1BCA25AFC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = sub_1BCAB54A8();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

void sub_1BCA25B7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  sub_1BCAB54A8();
  sub_1BCA24804(a1, a2, a3, *(_QWORD *)(v3 + 24));
}

uint64_t sub_1BCA25BF8()
{
  uint64_t v0;

  return sub_1BCA248B8(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

void sub_1BCA25C08(id a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)

}

id sub_1BCA25C14(uint64_t a1)
{
  uint64_t v1;

  return sub_1BCA244C4(a1, *(void **)(v1 + 16), *(_QWORD *)(v1 + 24), *(_BYTE *)(v1 + 32));
}

uint64_t sub_1BCA25C20(unint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t i;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  id v10;
  uint64_t v12;

  v1 = a1;
  v12 = MEMORY[0x1E0DEE9D8];
  if (a1 >> 62)
    goto LABEL_18;
  sub_1BCAB654C();
  v2 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (v2)
  {
    if ((v1 & 0xC000000000000001) != 0)
    {
      for (i = 0; ; ++i)
      {
        MEMORY[0x1BCCFB0D4](i, v1);
        v4 = i + 1;
        if (__OFADD__(i, 1))
          break;
        objc_opt_self();
        if (!swift_dynamicCastObjCClass())
        {
          swift_unknownObjectRelease();
          goto LABEL_15;
        }
        sub_1BCAB6534();
        sub_1BCAB6558();
        sub_1BCAB6564();
        sub_1BCAB6540();
        if (v4 == v2)
          return v12;
      }
      __break(1u);
    }
    else
    {
      v5 = 0;
      v6 = v1 + 32;
      while (1)
      {
        v7 = v5 + 1;
        if (__OFADD__(v5, 1))
          break;
        v8 = *(void **)(v6 + 8 * v5);
        objc_opt_self();
        v9 = swift_dynamicCastObjCClass();
        if (!v9)
        {
LABEL_15:
          swift_release();
          return 0;
        }
        v1 = v9;
        v10 = v8;
        sub_1BCAB6534();
        sub_1BCAB6558();
        sub_1BCAB6564();
        sub_1BCAB6540();
        ++v5;
        if (v7 == v2)
          return v12;
      }
    }
    __break(1u);
LABEL_18:
    swift_bridgeObjectRetain();
    sub_1BCAB65DC();
    swift_bridgeObjectRelease();
    sub_1BCAB654C();
    swift_bridgeObjectRetain();
    v2 = sub_1BCAB65DC();
    swift_bridgeObjectRelease();
  }
  return v12;
}

id sub_1BCA25E04(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v11;
  id v12;
  void *v13;
  id v14;
  _QWORD v16[6];

  if (a4)
  {
    sub_1BC9A649C(0, &qword_1ED6C6E78);
    v11 = (void *)sub_1BCAB600C();
    swift_bridgeObjectRelease();
  }
  else
  {
    v11 = 0;
  }
  v12 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  v16[4] = a5;
  v16[5] = a6;
  v16[0] = MEMORY[0x1E0C809B0];
  v16[1] = 1107296256;
  v16[2] = sub_1BCA27C00;
  v16[3] = &block_descriptor_12_0;
  v13 = _Block_copy(v16);
  v14 = objc_msgSend(v12, sel_initWithSampleType_predicate_limit_sortDescriptors_resultsHandler_, a1, a2, a3, v11, v13);

  _Block_release(v13);
  swift_release();
  return v14;
}

uint64_t sub_1BCA25F28@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  uint64_t v3;
  char v4;

  swift_retain();
  sub_1BCAB5070();
  result = swift_release();
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  return result;
}

uint64_t sub_1BCA25F84(uint64_t a1)
{
  id v1;
  char v3;

  v1 = *(id *)a1;
  v3 = *(_BYTE *)(a1 + 8);
  sub_1BC9A81A4(*(id *)a1, v3);
  swift_retain();
  sub_1BCAB507C();
  sub_1BC9A836C(v1, v3);
  return swift_release();
}

uint64_t sub_1BCA26004()
{
  uint64_t v1;

  swift_retain();
  sub_1BCAB5070();
  swift_release();
  return v1;
}

id sub_1BCA26050()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  double v4;
  uint64_t v5;
  char *v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  id v28;
  void *v29;
  char *v30;
  id v31;
  void *v33;
  uint64_t v34;
  void *v35;
  char *v36;
  id v37;
  uint64_t aBlock;
  uint64_t v39;
  void *v40;
  void *v41;
  uint64_t (*v42)();
  uint64_t v43;

  v1 = v0;
  v2 = sub_1BCAB4E54();
  v3 = *(_QWORD *)(v2 - 8);
  *(_QWORD *)&v4 = MEMORY[0x1E0C80A78](v2).n128_u64[0];
  v6 = (char *)&aBlock - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(void **)&v1[qword_1ED6C44E8];
  v8 = objc_msgSend(v7, sel_identifier, v4);
  if (!v8)
  {
    sub_1BCAB5F04();
    v8 = (id)sub_1BCAB5EE0();
    swift_bridgeObjectRelease();
  }
  v9 = sub_1BCAB5F04();
  v11 = v10;
  if (v9 == sub_1BCAB5F04() && v11 == v12)
    goto LABEL_14;
  v14 = sub_1BCAB67C8();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v14 & 1) != 0)
    goto LABEL_15;
  v15 = sub_1BCAB5F04();
  v17 = v16;
  if (v15 == sub_1BCAB5F04() && v17 == v18)
  {
LABEL_14:
    swift_bridgeObjectRelease_n();
    goto LABEL_15;
  }
  v20 = sub_1BCAB67C8();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v20 & 1) == 0)
  {
    sub_1BC9A649C(0, (unint64_t *)&qword_1ED6C2E60);
    sub_1BC9A7EF4();
    v21 = swift_allocObject();
    *(_OWORD *)(v21 + 16) = xmmword_1BCABFE80;
    v22 = sub_1BCAB5F04();
    v24 = v23;
    *(_QWORD *)(v21 + 56) = MEMORY[0x1E0DEA968];
    *(_QWORD *)(v21 + 64) = sub_1BC9A7FA4();
    *(_QWORD *)(v21 + 32) = v22;
    *(_QWORD *)(v21 + 40) = v24;
    sub_1BCAB4DB8();
    v25 = sub_1BCAB4DE8();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
    *(_QWORD *)(v21 + 96) = sub_1BC9A649C(0, &qword_1ED6C4670);
    *(_QWORD *)(v21 + 104) = sub_1BCA27DC0(&qword_1ED6C4678, &qword_1ED6C4670, 0x1E0C99D68, MEMORY[0x1E0DEFD08]);
    *(_QWORD *)(v21 + 72) = v25;
    v26 = (void *)sub_1BCAB612C();
    v27 = swift_allocObject();
    *(_QWORD *)(v27 + 16) = v1;
    v28 = objc_allocWithZone(MEMORY[0x1E0CB6AF8]);
    v42 = sub_1BCA27E24;
    v43 = v27;
    aBlock = MEMORY[0x1E0C809B0];
    v39 = 1107296256;
    v40 = sub_1BCA27C00;
    v41 = &block_descriptor_5;
    v29 = _Block_copy(&aBlock);
    v30 = v1;
    v31 = objc_msgSend(v28, sel_initWithSampleType_predicate_limit_sortDescriptors_resultsHandler_, v7, v26, 0, 0, v29);
    _Block_release(v29);

    swift_release();
    return v31;
  }
LABEL_15:
  v33 = (void *)objc_opt_self();
  v34 = swift_allocObject();
  *(_QWORD *)(v34 + 16) = v1;
  v42 = sub_1BCA27E68;
  v43 = v34;
  aBlock = MEMORY[0x1E0C809B0];
  v39 = 1107296256;
  v40 = sub_1BCA2CABC;
  v41 = &block_descriptor_6;
  v35 = _Block_copy(&aBlock);
  v36 = v1;
  swift_release();
  v37 = objc_msgSend(v33, sel_queryForMostRecentSampleOfType_predicate_completion_, v7, 0, v35);
  _Block_release(v35);

  return v37;
}

void sub_1BCA26454(unint64_t a1, void *a2, void *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  void *v16;
  _BYTE *v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  NSObject *v23;
  os_log_type_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  id v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  id v34;
  char *v35;
  NSObject *v36;
  os_log_type_t v37;
  uint8_t *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  char *v46;
  id v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t aBlock[6];
  uint64_t ObjectType;

  v6 = sub_1BCAB5514();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v50 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v50 - v11;
  if (a1 && (v13 = sub_1BCA25C20(a1)) != 0)
  {
    v14 = v13;
    if (v13 >> 62)
    {
      v15 = sub_1BCAB65DC();
      if (v15)
        goto LABEL_5;
    }
    else
    {
      v15 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v15)
      {
LABEL_5:
        MEMORY[0x1E0C80A78](v15);
        *(&v50 - 2) = v14;
        *((_BYTE *)&v50 - 8) = 0;
        swift_retain();
        sub_1BCAB507C();
        swift_release();
        swift_bridgeObjectRelease();
        sub_1BCAB50B8();
        return;
      }
    }
    swift_bridgeObjectRelease();
    sub_1BCAB54CC();
    v35 = a3;
    v36 = sub_1BCAB54FC();
    v37 = sub_1BCAB61BC();
    if (os_log_type_enabled(v36, v37))
    {
      v38 = (uint8_t *)swift_slowAlloc();
      v39 = swift_slowAlloc();
      v52 = v7;
      aBlock[0] = v39;
      *(_DWORD *)v38 = 136446210;
      ObjectType = swift_getObjectType();
      sub_1BCA27CA0();
      v40 = sub_1BCAB5F28();
      ObjectType = sub_1BC99BD4C(v40, v41, aBlock);
      sub_1BCAB63A8();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1BC989000, v36, v37, "[%{public}s] No ongoing factors; querying for most recent sample.",
        v38,
        0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BCCFBF5C](v39, -1, -1);
      MEMORY[0x1BCCFBF5C](v38, -1, -1);

      (*(void (**)(char *, uint64_t))(v52 + 8))(v12, v6);
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v7 + 8))(v12, v6);
    }
    v42 = (void *)objc_opt_self();
    v43 = *(_QWORD *)&v35[qword_1ED6C44E8];
    v44 = swift_allocObject();
    *(_QWORD *)(v44 + 16) = v35;
    aBlock[4] = (uint64_t)sub_1BCA27E68;
    aBlock[5] = v44;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_1BCA2CABC;
    aBlock[3] = (uint64_t)&block_descriptor_21;
    v45 = _Block_copy(aBlock);
    v46 = v35;
    swift_release();
    v47 = objc_msgSend(v42, sel_queryForMostRecentSampleOfType_predicate_completion_, v43, 0, v45);
    _Block_release(v45);
    v48 = qword_1ED6C44D0;
    v49 = *(void **)&v46[qword_1ED6C44D0];
    *(_QWORD *)&v46[qword_1ED6C44D0] = v47;

    if (*(_QWORD *)&v46[v48])
      objc_msgSend(*(id *)&v46[qword_1ED6C44E0], sel_executeQuery_);
  }
  else
  {
    if (a2)
    {
      v16 = a2;
    }
    else
    {
      sub_1BC9A7EA4();
      v16 = (void *)swift_allocError();
      *v17 = 1;
    }
    v18 = a2;
    sub_1BCAB54CC();
    v19 = a3;
    v20 = v16;
    v21 = v19;
    v22 = v16;
    v23 = sub_1BCAB54FC();
    v24 = sub_1BCAB61A4();
    if (os_log_type_enabled(v23, v24))
    {
      v25 = swift_slowAlloc();
      v26 = swift_slowAlloc();
      v52 = v7;
      aBlock[0] = v26;
      v27 = v26;
      *(_DWORD *)v25 = 136446466;
      ObjectType = swift_getObjectType();
      sub_1BCA27CA0();
      v51 = v6;
      v28 = sub_1BCAB5F28();
      ObjectType = sub_1BC99BD4C(v28, v29, aBlock);
      sub_1BCAB63A8();

      swift_bridgeObjectRelease();
      *(_WORD *)(v25 + 12) = 2082;
      ObjectType = (uint64_t)v16;
      v30 = v16;
      sub_1BC9A7F58(0, (unint64_t *)&qword_1ED6C6F70);
      v31 = sub_1BCAB5F28();
      ObjectType = sub_1BC99BD4C(v31, v32, aBlock);
      sub_1BCAB63A8();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1BC989000, v23, v24, "[%{public}s] Error while querying for ongoing factors: %{public}s", (uint8_t *)v25, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1BCCFBF5C](v27, -1, -1);
      MEMORY[0x1BCCFBF5C](v25, -1, -1);

      v33 = (*(uint64_t (**)(char *, uint64_t))(v52 + 8))(v9, v51);
    }
    else
    {

      v33 = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    }
    MEMORY[0x1E0C80A78](v33);
    *(&v50 - 2) = (uint64_t)v16;
    *((_BYTE *)&v50 - 8) = 1;
    v34 = v16;
    swift_retain();
    sub_1BCAB507C();

    swift_release();
    sub_1BCAB50B8();

  }
}

void sub_1BCA26A8C(void *a1, void *a2, void *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  NSObject *v21;
  os_log_type_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  id v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t ObjectType;
  uint64_t v35;

  v6 = sub_1BCAB5514();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1 && (objc_opt_self(), (v8 = swift_dynamicCastObjCClass()) != 0))
  {
    v11 = v8;
    sub_1BC9AFE08();
    v12 = swift_allocObject();
    *(_OWORD *)(v12 + 16) = xmmword_1BCABF370;
    *(_QWORD *)(v12 + 32) = v11;
    v35 = v12;
    v13 = sub_1BCAB6024();
    v14 = v35;
    MEMORY[0x1E0C80A78](v13);
    *(&v32 - 2) = v14;
    *((_BYTE *)&v32 - 8) = 0;
    v15 = a1;
    swift_retain();
    sub_1BCAB507C();

    swift_release();
    swift_bridgeObjectRelease();
  }
  else if (a2)
  {
    v16 = a2;
    sub_1BCAB54CC();
    v17 = a2;
    v18 = a3;
    v19 = a2;
    v20 = v18;
    v21 = sub_1BCAB54FC();
    v22 = sub_1BCAB61A4();
    if (os_log_type_enabled(v21, v22))
    {
      v23 = swift_slowAlloc();
      v33 = swift_slowAlloc();
      v35 = v33;
      *(_DWORD *)v23 = 136446466;
      ObjectType = swift_getObjectType();
      sub_1BCA27CA0();
      v24 = sub_1BCAB5F28();
      ObjectType = sub_1BC99BD4C(v24, v25, &v35);
      sub_1BCAB63A8();

      swift_bridgeObjectRelease();
      *(_WORD *)(v23 + 12) = 2082;
      ObjectType = (uint64_t)a2;
      v26 = a2;
      sub_1BC9A7F58(0, (unint64_t *)&qword_1ED6C6F70);
      v27 = sub_1BCAB5F28();
      ObjectType = sub_1BC99BD4C(v27, v28, &v35);
      sub_1BCAB63A8();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1BC989000, v21, v22, "[%{public}s] Error while querying for most recent sample: %{public}s", (uint8_t *)v23, 0x16u);
      v29 = v33;
      swift_arrayDestroy();
      MEMORY[0x1BCCFBF5C](v29, -1, -1);
      MEMORY[0x1BCCFBF5C](v23, -1, -1);
    }
    else
    {

    }
    v30 = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    MEMORY[0x1E0C80A78](v30);
    *(&v32 - 2) = (uint64_t)a2;
    *((_BYTE *)&v32 - 8) = 1;
    v31 = a2;
    swift_retain();
    sub_1BCAB507C();

    swift_release();
  }
  else
  {
    MEMORY[0x1E0C80A78](v8);
    *(&v32 - 2) = MEMORY[0x1E0DEE9D8];
    *((_BYTE *)&v32 - 8) = 0;
    swift_retain();
    sub_1BCAB507C();
    swift_release();
  }
}

id OngoingCycleFactorsSampleQueryOperation.__allocating_init(categoryType:name:queryQualityOfService:healthStore:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  objc_class *v5;
  id v11;

  v11 = objc_allocWithZone(v5);
  return OngoingCycleFactorsSampleQueryOperation.init(categoryType:name:queryQualityOfService:healthStore:)(a1, a2, a3, a4, a5);
}

id OngoingCycleFactorsSampleQueryOperation.init(categoryType:name:queryQualityOfService:healthStore:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  char *v5;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  char *v16;
  id v17;
  id v18;
  objc_class *Operation;
  id v20;
  id v21;
  void *v22;
  id v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v31;
  id v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t ObjectType;
  objc_super v37;
  uint64_t v38;
  char v39;

  v10 = sub_1BCAB5514();
  v34 = *(_QWORD *)(v10 - 8);
  v35 = v10;
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = qword_1ED6C44F0;
  sub_1BC9A7EA4();
  v14 = swift_allocError();
  *v15 = 0;
  v38 = v14;
  v39 = 1;
  sub_1BCA2721C();
  swift_allocObject();
  v16 = v5;
  *(_QWORD *)&v5[v13] = sub_1BCAB50A0();
  *(_QWORD *)&v16[qword_1ED6C44D8] = 0;
  *(_QWORD *)&v16[qword_1ED6C44D0] = 0;
  *(_QWORD *)&v16[qword_1ED6C44E8] = a1;
  *(_QWORD *)&v16[qword_1ED6C44F8] = a4;
  *(_QWORD *)&v16[qword_1ED6C44E0] = a5;
  v17 = a1;
  v18 = a5;

  Operation = (objc_class *)type metadata accessor for OngoingCycleFactorsSampleQueryOperation();
  v37.receiver = v16;
  v37.super_class = Operation;
  v20 = objc_msgSendSuper2(&v37, sel_init);
  v21 = v20;
  if (a3)
  {
    v22 = (void *)sub_1BCAB5EE0();
    swift_bridgeObjectRelease();
  }
  else
  {
    v22 = 0;
  }
  objc_msgSend(v20, sel_setName_, v22);

  sub_1BCAB54CC();
  v23 = v20;
  v24 = sub_1BCAB54FC();
  v25 = sub_1BCAB61BC();
  if (os_log_type_enabled(v24, v25))
  {
    v33 = v18;
    v26 = (uint8_t *)swift_slowAlloc();
    v27 = swift_slowAlloc();
    v38 = v27;
    *(_DWORD *)v26 = 136446210;
    ObjectType = swift_getObjectType();
    sub_1BCA27CA0();
    v28 = sub_1BCAB5F28();
    v32 = v17;
    ObjectType = sub_1BC99BD4C(v28, v29, &v38);
    sub_1BCAB63A8();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1BC989000, v24, v25, "[%{public}s] initialize", v26, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BCCFBF5C](v27, -1, -1);
    MEMORY[0x1BCCFBF5C](v26, -1, -1);

  }
  else
  {

  }
  (*(void (**)(char *, uint64_t))(v34 + 8))(v12, v35);
  return v23;
}

void sub_1BCA2721C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED6C3678)
  {
    sub_1BCA27270();
    v0 = sub_1BCAB5088();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED6C3678);
  }
}

void sub_1BCA27270()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED6C47E0)
  {
    sub_1BCA272EC();
    sub_1BC9A7F58(255, (unint64_t *)&qword_1ED6C6F70);
    v0 = sub_1BCAB68A0();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED6C47E0);
  }
}

void sub_1BCA272EC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED6C45E0)
  {
    sub_1BC9A649C(255, &qword_1ED6C4640);
    v0 = sub_1BCAB6060();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED6C45E0);
  }
}

uint64_t type metadata accessor for OngoingCycleFactorsSampleQueryOperation()
{
  uint64_t result;

  result = qword_1ED6C4500;
  if (!qword_1ED6C4500)
    return swift_getSingletonMetadata();
  return result;
}

void sub_1BCA2738C()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  id v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t ObjectType;
  uint64_t v19;

  v1 = sub_1BCAB5514();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v4 = (char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BCAB54CC();
  v5 = v0;
  v6 = sub_1BCAB54FC();
  v7 = sub_1BCAB61BC();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = swift_slowAlloc();
    v17 = v1;
    v9 = (uint8_t *)v8;
    v10 = swift_slowAlloc();
    v19 = v10;
    *(_DWORD *)v9 = 136446210;
    ObjectType = swift_getObjectType();
    sub_1BCA27CA0();
    v11 = sub_1BCAB5F28();
    ObjectType = sub_1BC99BD4C(v11, v12, &v19);
    sub_1BCAB63A8();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1BC989000, v6, v7, "[%{public}s] Running...", v9, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BCCFBF5C](v10, -1, -1);
    MEMORY[0x1BCCFBF5C](v9, -1, -1);

    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v17);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  }
  v13 = sub_1BCA26050();
  v14 = qword_1ED6C44D8;
  v15 = *(void **)&v5[qword_1ED6C44D8];
  *(_QWORD *)&v5[qword_1ED6C44D8] = v13;

  if (*(_QWORD *)&v5[v14])
    objc_msgSend(*(id *)&v5[qword_1ED6C44E0], sel_executeQuery_);
}

void sub_1BCA2759C(void *a1)
{
  id v1;

  v1 = a1;
  sub_1BCA2738C();

}

void sub_1BCA275D0()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  void *v14;
  id v15;
  id v16;
  uint64_t v17;
  void *v18;
  void *v19;
  id v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t ObjectType;
  uint64_t v26;

  v1 = sub_1BCAB5514();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BCAB54CC();
  v5 = v0;
  v6 = sub_1BCAB54FC();
  v7 = sub_1BCAB61BC();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = swift_slowAlloc();
    v24 = v1;
    v9 = (uint8_t *)v8;
    v10 = swift_slowAlloc();
    v26 = v10;
    *(_DWORD *)v9 = 136446210;
    ObjectType = swift_getObjectType();
    sub_1BCA27CA0();
    v11 = sub_1BCAB5F28();
    ObjectType = sub_1BC99BD4C(v11, v12, &v26);
    sub_1BCAB63A8();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1BC989000, v6, v7, "[%{public}s] Cleaning up...", v9, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BCCFBF5C](v10, -1, -1);
    MEMORY[0x1BCCFBF5C](v9, -1, -1);

    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v24);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  }
  v13 = *(void **)&v5[qword_1ED6C44D8];
  if (v13)
  {
    v14 = *(void **)&v5[qword_1ED6C44E0];
    v15 = v13;
    v16 = objc_msgSend(v14, sel__queries);
    sub_1BC9A649C(0, &qword_1ED6C6EB0);
    sub_1BCA27DC0(&qword_1ED6C4680, &qword_1ED6C6EB0, 0x1E0CB6A78, MEMORY[0x1E0DEFCF8]);
    v17 = sub_1BCAB60CC();

    LOBYTE(v16) = sub_1BCA27934(v15, v17);
    swift_bridgeObjectRelease();
    if ((v16 & 1) != 0)
      objc_msgSend(v14, sel_stopQuery_, v15);

  }
  v18 = *(void **)&v5[qword_1ED6C44D0];
  if (v18)
  {
    v19 = *(void **)&v5[qword_1ED6C44E0];
    v20 = v18;
    v21 = objc_msgSend(v19, sel__queries);
    sub_1BC9A649C(0, &qword_1ED6C6EB0);
    sub_1BCA27DC0(&qword_1ED6C4680, &qword_1ED6C6EB0, 0x1E0CB6A78, MEMORY[0x1E0DEFCF8]);
    v22 = sub_1BCAB60CC();

    LOBYTE(v21) = sub_1BCA27934(v20, v22);
    swift_bridgeObjectRelease();
    if ((v21 & 1) != 0)
      objc_msgSend(v19, sel_stopQuery_, v20);

  }
}

uint64_t sub_1BCA27934(void *a1, uint64_t a2)
{
  id v3;
  char v4;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  id v10;
  char v11;
  char v12;
  uint64_t v13;
  unint64_t v14;
  id v15;

  if ((a2 & 0xC000000000000001) != 0)
  {
    v3 = a1;
    v4 = sub_1BCAB6474();

    return v4 & 1;
  }
  if (!*(_QWORD *)(a2 + 16)
    || (v6 = sub_1BCAB6324(),
        v7 = -1 << *(_BYTE *)(a2 + 32),
        v8 = v6 & ~v7,
        v9 = a2 + 56,
        ((*(_QWORD *)(a2 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0))
  {
LABEL_11:
    v12 = 0;
    return v12 & 1;
  }
  sub_1BC9A649C(0, &qword_1ED6C6EB0);
  v10 = *(id *)(*(_QWORD *)(a2 + 48) + 8 * v8);
  v11 = sub_1BCAB6330();

  if ((v11 & 1) == 0)
  {
    v13 = ~v7;
    v14 = (v8 + 1) & v13;
    if (((*(_QWORD *)(v9 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) != 0)
    {
      do
      {
        v15 = *(id *)(*(_QWORD *)(a2 + 48) + 8 * v14);
        v12 = sub_1BCAB6330();

        if ((v12 & 1) != 0)
          break;
        v14 = (v14 + 1) & v13;
      }
      while (((*(_QWORD *)(v9 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) != 0);
      return v12 & 1;
    }
    goto LABEL_11;
  }
  v12 = 1;
  return v12 & 1;
}

id OngoingCycleFactorsSampleQueryOperation.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void OngoingCycleFactorsSampleQueryOperation.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void sub_1BCA27ADC()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void sub_1BCA27B08()
{
  uint64_t v0;

  swift_release();

}

id OngoingCycleFactorsSampleQueryOperation.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for OngoingCycleFactorsSampleQueryOperation();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

void sub_1BCA27B98(uint64_t a1)
{
  swift_release();

}

uint64_t sub_1BCA27C00(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  uint64_t v5;
  void (*v7)(id, uint64_t, void *);
  id v8;
  id v9;

  v5 = a3;
  v7 = *(void (**)(id, uint64_t, void *))(a1 + 32);
  if (a3)
  {
    sub_1BC9A649C(0, &qword_1ED6C7538);
    v5 = sub_1BCAB6018();
  }
  swift_retain();
  v8 = a2;
  v9 = a4;
  v7(v8, v5, a4);
  swift_release();

  return swift_bridgeObjectRelease();
}

unint64_t sub_1BCA27CA0()
{
  unint64_t result;

  result = qword_1ED6C4510;
  if (!qword_1ED6C4510)
  {
    type metadata accessor for OngoingCycleFactorsSampleQueryOperation();
    result = swift_getMetatypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1ED6C4510);
  }
  return result;
}

uint64_t sub_1BCA27CE0()
{
  return swift_initClassMetadata2();
}

uint64_t method lookup function for OngoingCycleFactorsSampleQueryOperation()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of OngoingCycleFactorsSampleQueryOperation.result.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))(class metadata base offset for OngoingCycleFactorsSampleQueryOperation
                              + (*MEMORY[0x1E0DEEDD8] & *v0)
                              + 72))();
}

uint64_t dispatch thunk of OngoingCycleFactorsSampleQueryOperation.__allocating_init(categoryType:name:queryQualityOfService:healthStore:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(class metadata base offset for OngoingCycleFactorsSampleQueryOperation + v0 + 160))();
}

uint64_t sub_1BCA27DB8()
{
  return type metadata accessor for OngoingCycleFactorsSampleQueryOperation();
}

uint64_t sub_1BCA27DC0(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v7 = sub_1BC9A649C(255, a2);
    result = MEMORY[0x1BCCFBE84](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1BCA27E00()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_1BCA27E24()
{
  return sub_1BCAB50AC();
}

void sub_1BCA27E6C()
{
  void **v0;

  sub_1BCA26A8C(v0[2], v0[3], v0[4]);
}

void sub_1BCA27E78()
{
  uint64_t v0;

  sub_1BCA26454(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24), *(void **)(v0 + 32));
}

uint64_t sub_1BCA27E84()
{
  return sub_1BCAB50AC();
}

Swift::Double __swiftcall SignificantChangeEngine.fisherExactLess(a:b:c:d:)(Swift::Int a, Swift::Int b, Swift::Int c, Swift::Int d)
{
  Swift::Int v4;
  Swift::Int v6;
  Swift::Int v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  double v14;
  double v15;
  double v16;
  Swift::Double result;

  v4 = a + b;
  if (__OFADD__(a, b))
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  v6 = a + c;
  if (__OFADD__(a, c))
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v7 = v4 + c;
  if (__OFADD__(v4, c))
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  v8 = __OFADD__(v7, d);
  v9 = v7 + d;
  if (v8)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if (a < 0)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v10 = v9 - v4;
  if (__OFSUB__(v9, v4))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v11 = v10 - v6;
  if (!__OFSUB__(v10, v6))
  {
    v12 = 0;
    v13 = (double)v4;
    v14 = (double)v6;
    v15 = 0.0;
    v16 = (double)v9;
    while (!__OFADD__(v11, v12))
    {
      if (((v11 + v12) & 0x8000000000000000) == 0)
      {
        HypergeometricPDF((double)v12, v13, v14, v16);
        v15 = v15 + result;
      }
      if (a == v12)
        return v15;
      v8 = __OFADD__(v12++, 1);
      if (v8)
      {
        __break(1u);
        return v15;
      }
    }
    __break(1u);
    goto LABEL_18;
  }
LABEL_24:
  __break(1u);
  return result;
}

Swift::Double __swiftcall SignificantChangeEngine.fisherExactTwoSided(a:b:c:d:)(Swift::Int a, Swift::Int b, Swift::Int c, Swift::Int d)
{
  Swift::Double result;
  Swift::Int v5;
  Swift::Int v6;
  Swift::Int v7;
  uint64_t v8;
  double v9;
  double v10;
  Swift::Int v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  double v16;

  v5 = a + b;
  if (__OFADD__(a, b))
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v6 = a + c;
  if (__OFADD__(a, c))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v7 = v5 + c;
  if (__OFADD__(v5, c))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v8 = v7 + d;
  if (__OFADD__(v7, d))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  v9 = (double)v5;
  v10 = (double)v6;
  HypergeometricPDF((double)a, (double)v5, (double)v6, (double)v8);
  if (v5 >= v6)
    v11 = v6;
  else
    v11 = v5;
  if (v11 < 0)
    goto LABEL_26;
  v12 = v8 - v5;
  if (__OFSUB__(v8, v5))
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  v13 = v12 - v6;
  if (!__OFSUB__(v12, v6))
  {
    v14 = result;
    v15 = 0;
    v16 = 0.0;
    while (!__OFADD__(v13, v15))
    {
      if (((v13 + v15) & 0x8000000000000000) == 0)
      {
        HypergeometricPDF((double)v15, v9, v10, (double)v8);
        if (result <= v14)
          v16 = v16 + result;
      }
      if (v11 == v15)
        return v16;
      if (__OFADD__(v15++, 1))
      {
        __break(1u);
        return v16;
      }
    }
    __break(1u);
    goto LABEL_22;
  }
LABEL_28:
  __break(1u);
  return result;
}

Swift::Double __swiftcall SignificantChangeEngine.pValue(tTest:degreesOfFreedom:)(Swift::Double tTest, Swift::Double degreesOfFreedom)
{
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v9;

  v9 = StudentsCDF(tTest, degreesOfFreedom, v2, v3, v4, v5, v6, v7);
  if (tTest > 0.0)
    v9 = 1.0 - v9;
  return v9 + v9;
}

uint64_t TimeBasedDistributionChartPoint.TimeOfDay.init(pointKind:yValue:xValue:yPointAnnotation:barColor:)@<X0>(_BYTE *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>, double a6@<D1>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  *(_BYTE *)a4 = *a1;
  *(double *)(a4 + 8) = a5;
  *(double *)(a4 + 16) = a6;
  v9 = type metadata accessor for TimeBasedDistributionChartPoint.TimeOfDay(0);
  v10 = a4 + *(int *)(v9 + 28);
  v11 = sub_1BCAB4CE0();
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v10, a2, v11);
  *(_QWORD *)(a4 + *(int *)(v9 + 32)) = a3;
  return result;
}

uint64_t type metadata accessor for TimeBasedDistributionChartPoint.TimeOfDay(uint64_t a1)
{
  return sub_1BC9B359C(a1, qword_1EF479688);
}

uint64_t TimeBasedDistributionChartPoint.DayOfWeek.init(pointKind:yValue:xValue:yPointAnnotation:barColor:)@<X0>(_BYTE *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>, double a7@<D0>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;

  *(_BYTE *)a6 = *a1;
  *(double *)(a6 + 8) = a7;
  *(_QWORD *)(a6 + 16) = a2;
  *(_QWORD *)(a6 + 24) = a3;
  v10 = type metadata accessor for TimeBasedDistributionChartPoint.DayOfWeek(0);
  v11 = a6 + *(int *)(v10 + 28);
  v12 = sub_1BCAB4CE0();
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v11, a4, v12);
  *(_QWORD *)(a6 + *(int *)(v10 + 32)) = a5;
  return result;
}

uint64_t type metadata accessor for TimeBasedDistributionChartPoint.DayOfWeek(uint64_t a1)
{
  return sub_1BC9B359C(a1, qword_1EF479728);
}

uint64_t TimeBasedDistributionChartPoint.Skeleton.init(pointKind:yValue:yPointAnnotation:barColor:)@<X0>(_BYTE *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  *(_BYTE *)a4 = *a1;
  *(double *)(a4 + 8) = a5;
  v8 = type metadata accessor for TimeBasedDistributionChartPoint.Skeleton(0);
  v9 = a4 + *(int *)(v8 + 24);
  v10 = sub_1BCAB4CE0();
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v9, a2, v10);
  *(_QWORD *)(a4 + *(int *)(v8 + 28)) = a3;
  return result;
}

uint64_t type metadata accessor for TimeBasedDistributionChartPoint.Skeleton(uint64_t a1)
{
  return sub_1BC9B359C(a1, qword_1EF4795F0);
}

uint64_t TimeBasedDistributionChartPoint.PointKind.hash(into:)()
{
  return sub_1BCAB687C();
}

BOOL static TimeBasedDistributionChartPoint.PointKind.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t TimeBasedDistributionChartPoint.PointKind.hashValue.getter()
{
  sub_1BCAB6870();
  sub_1BCAB687C();
  return sub_1BCAB6894();
}

uint64_t (*TimeBasedDistributionChartPoint.Skeleton.pointKind.modify())()
{
  return nullsub_1;
}

uint64_t (*TimeBasedDistributionChartPoint.Skeleton.yValue.modify())()
{
  return nullsub_1;
}

uint64_t TimeBasedDistributionChartPoint.Skeleton.yPointAnnotation.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for TimeBasedDistributionChartPoint.Skeleton(0) + 24);
  v4 = sub_1BCAB4CE0();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t TimeBasedDistributionChartPoint.Skeleton.yPointAnnotation.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for TimeBasedDistributionChartPoint.Skeleton(0) + 24);
  v4 = sub_1BCAB4CE0();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*TimeBasedDistributionChartPoint.Skeleton.yPointAnnotation.modify())(_QWORD)
{
  type metadata accessor for TimeBasedDistributionChartPoint.Skeleton(0);
  return nullsub_1;
}

uint64_t TimeBasedDistributionChartPoint.Skeleton.barColor.getter()
{
  type metadata accessor for TimeBasedDistributionChartPoint.Skeleton(0);
  return swift_retain();
}

uint64_t TimeBasedDistributionChartPoint.Skeleton.barColor.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for TimeBasedDistributionChartPoint.Skeleton(0) + 28);
  result = swift_release();
  *(_QWORD *)(v1 + v3) = a1;
  return result;
}

uint64_t (*TimeBasedDistributionChartPoint.Skeleton.barColor.modify())(_QWORD)
{
  type metadata accessor for TimeBasedDistributionChartPoint.Skeleton(0);
  return nullsub_1;
}

uint64_t sub_1BCA28490@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 24);
  v5 = sub_1BCAB4CE0();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t sub_1BCA284D0()
{
  return swift_retain();
}

void TimeBasedDistributionChartPoint.TimeOfDay.pointKind.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

_BYTE *TimeBasedDistributionChartPoint.TimeOfDay.pointKind.setter(_BYTE *result)
{
  _BYTE *v1;

  *v1 = *result;
  return result;
}

uint64_t (*TimeBasedDistributionChartPoint.TimeOfDay.pointKind.modify())()
{
  return nullsub_1;
}

double TimeBasedDistributionChartPoint.TimeOfDay.yValue.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 8);
}

void TimeBasedDistributionChartPoint.TimeOfDay.yValue.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 8) = a1;
}

uint64_t (*TimeBasedDistributionChartPoint.TimeOfDay.yValue.modify())()
{
  return nullsub_1;
}

void TimeBasedDistributionChartPoint.TimeOfDay.xValue.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 16) = a1;
}

uint64_t (*TimeBasedDistributionChartPoint.TimeOfDay.xValue.modify())()
{
  return nullsub_1;
}

uint64_t TimeBasedDistributionChartPoint.TimeOfDay.yPointAnnotation.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1BCA28664(type metadata accessor for TimeBasedDistributionChartPoint.TimeOfDay, a1);
}

uint64_t TimeBasedDistributionChartPoint.TimeOfDay.yPointAnnotation.setter(uint64_t a1)
{
  return sub_1BCA286BC(a1, type metadata accessor for TimeBasedDistributionChartPoint.TimeOfDay);
}

uint64_t (*TimeBasedDistributionChartPoint.TimeOfDay.yPointAnnotation.modify())(_QWORD)
{
  type metadata accessor for TimeBasedDistributionChartPoint.TimeOfDay(0);
  return nullsub_1;
}

uint64_t TimeBasedDistributionChartPoint.TimeOfDay.barColor.getter()
{
  return sub_1BCA28738((void (*)(_QWORD))type metadata accessor for TimeBasedDistributionChartPoint.TimeOfDay);
}

uint64_t TimeBasedDistributionChartPoint.TimeOfDay.barColor.setter(uint64_t a1)
{
  return sub_1BCA28768(a1, type metadata accessor for TimeBasedDistributionChartPoint.TimeOfDay);
}

uint64_t (*TimeBasedDistributionChartPoint.TimeOfDay.barColor.modify())(_QWORD)
{
  type metadata accessor for TimeBasedDistributionChartPoint.TimeOfDay(0);
  return nullsub_1;
}

double TimeBasedDistributionChartPoint.TimeOfDay.id.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 16);
}

void sub_1BCA285C4(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

double sub_1BCA285D0()
{
  uint64_t v0;

  return *(double *)(v0 + 8);
}

uint64_t sub_1BCA285DC()
{
  return swift_retain();
}

double sub_1BCA285E8@<D0>(double *a1@<X8>)
{
  uint64_t v1;
  double result;

  result = *(double *)(v1 + 16);
  *a1 = result;
  return result;
}

uint64_t (*TimeBasedDistributionChartPoint.DayOfWeek.pointKind.modify())()
{
  return nullsub_1;
}

uint64_t (*TimeBasedDistributionChartPoint.DayOfWeek.yValue.modify())()
{
  return nullsub_1;
}

uint64_t TimeBasedDistributionChartPoint.DayOfWeek.xValue.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return result;
}

uint64_t (*TimeBasedDistributionChartPoint.DayOfWeek.xValue.modify())()
{
  return nullsub_1;
}

uint64_t TimeBasedDistributionChartPoint.DayOfWeek.yPointAnnotation.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1BCA28664(type metadata accessor for TimeBasedDistributionChartPoint.DayOfWeek, a1);
}

uint64_t sub_1BCA28664@<X0>(uint64_t (*a1)(_QWORD)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1(0) + 28);
  v5 = sub_1BCAB4CE0();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t TimeBasedDistributionChartPoint.DayOfWeek.yPointAnnotation.setter(uint64_t a1)
{
  return sub_1BCA286BC(a1, type metadata accessor for TimeBasedDistributionChartPoint.DayOfWeek);
}

uint64_t sub_1BCA286BC(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a2(0) + 28);
  v5 = sub_1BCAB4CE0();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v4, a1, v5);
}

uint64_t (*TimeBasedDistributionChartPoint.DayOfWeek.yPointAnnotation.modify())(_QWORD)
{
  type metadata accessor for TimeBasedDistributionChartPoint.DayOfWeek(0);
  return nullsub_1;
}

uint64_t TimeBasedDistributionChartPoint.DayOfWeek.barColor.getter()
{
  return sub_1BCA28738((void (*)(_QWORD))type metadata accessor for TimeBasedDistributionChartPoint.DayOfWeek);
}

uint64_t sub_1BCA28738(void (*a1)(_QWORD))
{
  a1(0);
  return swift_retain();
}

uint64_t TimeBasedDistributionChartPoint.DayOfWeek.barColor.setter(uint64_t a1)
{
  return sub_1BCA28768(a1, type metadata accessor for TimeBasedDistributionChartPoint.DayOfWeek);
}

uint64_t sub_1BCA28768(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;
  uint64_t v4;
  uint64_t result;

  v4 = *(int *)(a2(0) + 32);
  result = swift_release();
  *(_QWORD *)(v2 + v4) = a1;
  return result;
}

uint64_t (*TimeBasedDistributionChartPoint.DayOfWeek.barColor.modify())(_QWORD)
{
  type metadata accessor for TimeBasedDistributionChartPoint.DayOfWeek(0);
  return nullsub_1;
}

uint64_t TimeBasedDistributionChartPoint.DayOfWeek.id.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

unint64_t sub_1BCA287FC()
{
  unint64_t result;

  result = qword_1EF479590;
  if (!qword_1EF479590)
  {
    result = MEMORY[0x1BCCFBE84](&protocol conformance descriptor for TimeBasedDistributionChartPoint.PointKind, &type metadata for TimeBasedDistributionChartPoint.PointKind);
    atomic_store(result, (unint64_t *)&qword_1EF479590);
  }
  return result;
}

uint64_t sub_1BCA28840()
{
  return MEMORY[0x1E0DEB090];
}

uint64_t sub_1BCA2884C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 28);
  v5 = sub_1BCAB4CE0();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t sub_1BCA2888C()
{
  return MEMORY[0x1E0DEA978];
}

uint64_t sub_1BCA28898@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 24);
  *a1 = *(_QWORD *)(v1 + 16);
  a1[1] = v2;
  return swift_bridgeObjectRetain();
}

uint64_t dispatch thunk of TimeBasedDistributionChartPointProxy.pointKind.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of TimeBasedDistributionChartPointProxy.yValue.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of TimeBasedDistributionChartPointProxy.yPointAnnotation.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of TimeBasedDistributionChartPointProxy.barColor.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

ValueMetadata *type metadata accessor for TimeBasedDistributionChartPoint()
{
  return &type metadata for TimeBasedDistributionChartPoint;
}

uint64_t storeEnumTagSinglePayload for TimeBasedDistributionChartPoint.PointKind(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1BCA28920 + 4 * byte_1BCAC4315[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1BCA28954 + 4 * byte_1BCAC4310[v4]))();
}

uint64_t sub_1BCA28954(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BCA2895C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BCA28964);
  return result;
}

uint64_t sub_1BCA28970(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BCA28978);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1BCA2897C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BCA28984(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TimeBasedDistributionChartPoint.PointKind()
{
  return &type metadata for TimeBasedDistributionChartPoint.PointKind;
}

uint64_t *initializeBufferWithCopyOfBuffer for TimeBasedDistributionChartPoint.Skeleton(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v11 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    a1[1] = a2[1];
    v7 = *(int *)(a3 + 24);
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = sub_1BCAB4CE0();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
    *(uint64_t *)((char *)v4 + *(int *)(a3 + 28)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 28));
  }
  swift_retain();
  return v4;
}

uint64_t destroy for TimeBasedDistributionChartPoint.Skeleton(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + *(int *)(a2 + 24);
  v3 = sub_1BCAB4CE0();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
  return swift_release();
}

uint64_t initializeWithCopy for TimeBasedDistributionChartPoint.Skeleton(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v6 = *(int *)(a3 + 24);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = sub_1BCAB4CE0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
  *(_QWORD *)(a1 + *(int *)(a3 + 28)) = *(_QWORD *)(a2 + *(int *)(a3 + 28));
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for TimeBasedDistributionChartPoint.Skeleton(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v6 = *(int *)(a3 + 24);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = sub_1BCAB4CE0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  *(_QWORD *)(a1 + *(int *)(a3 + 28)) = *(_QWORD *)(a2 + *(int *)(a3 + 28));
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for TimeBasedDistributionChartPoint.Skeleton(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v6 = *(int *)(a3 + 24);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = sub_1BCAB4CE0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  *(_QWORD *)(a1 + *(int *)(a3 + 28)) = *(_QWORD *)(a2 + *(int *)(a3 + 28));
  return a1;
}

uint64_t assignWithTake for TimeBasedDistributionChartPoint.Skeleton(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v6 = *(int *)(a3 + 24);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = sub_1BCAB4CE0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  *(_QWORD *)(a1 + *(int *)(a3 + 28)) = *(_QWORD *)(a2 + *(int *)(a3 + 28));
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for TimeBasedDistributionChartPoint.Skeleton()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BCA28CC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = sub_1BCAB4CE0();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 24), a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 28));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for TimeBasedDistributionChartPoint.Skeleton()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BCA28D54(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_1BCAB4CE0();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + *(int *)(a4 + 24), a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 28)) = (a2 - 1);
  return result;
}

uint64_t sub_1BCA28DD0()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1BCAB4CE0();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for TimeBasedDistributionChartPoint.TimeOfDay(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v11 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 1);
    v7 = *(int *)(a3 + 28);
    v8 = a1 + v7;
    v9 = (uint64_t)a2 + v7;
    v10 = sub_1BCAB4CE0();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
    *(_QWORD *)((char *)v4 + *(int *)(a3 + 32)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 32));
  }
  swift_retain();
  return v4;
}

uint64_t destroy for TimeBasedDistributionChartPoint.TimeOfDay(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + *(int *)(a2 + 28);
  v3 = sub_1BCAB4CE0();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
  return swift_release();
}

uint64_t initializeWithCopy for TimeBasedDistributionChartPoint.TimeOfDay(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v6 = *(int *)(a3 + 28);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = sub_1BCAB4CE0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
  *(_QWORD *)(a1 + *(int *)(a3 + 32)) = *(_QWORD *)(a2 + *(int *)(a3 + 32));
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for TimeBasedDistributionChartPoint.TimeOfDay(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *(int *)(a3 + 28);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = sub_1BCAB4CE0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  *(_QWORD *)(a1 + *(int *)(a3 + 32)) = *(_QWORD *)(a2 + *(int *)(a3 + 32));
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for TimeBasedDistributionChartPoint.TimeOfDay(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v6 = *(int *)(a3 + 28);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = sub_1BCAB4CE0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  *(_QWORD *)(a1 + *(int *)(a3 + 32)) = *(_QWORD *)(a2 + *(int *)(a3 + 32));
  return a1;
}

uint64_t assignWithTake for TimeBasedDistributionChartPoint.TimeOfDay(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v6 = *(int *)(a3 + 28);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = sub_1BCAB4CE0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  *(_QWORD *)(a1 + *(int *)(a3 + 32)) = *(_QWORD *)(a2 + *(int *)(a3 + 32));
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for TimeBasedDistributionChartPoint.TimeOfDay()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BCA2918C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = sub_1BCAB4CE0();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 28), a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 32));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for TimeBasedDistributionChartPoint.TimeOfDay()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BCA29218(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_1BCAB4CE0();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + *(int *)(a4 + 28), a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 32)) = (a2 - 1);
  return result;
}

uint64_t sub_1BCA29294()
{
  return sub_1BCA2974C();
}

_QWORD *initializeBufferWithCopyOfBuffer for TimeBasedDistributionChartPoint.DayOfWeek(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 1);
    *(_QWORD *)(a1 + 24) = a2[3];
    v7 = *(int *)(a3 + 28);
    v8 = a1 + v7;
    v9 = (uint64_t)a2 + v7;
    v10 = sub_1BCAB4CE0();
    v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
    swift_bridgeObjectRetain();
    v11(v8, v9, v10);
    *(_QWORD *)((char *)v4 + *(int *)(a3 + 32)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 32));
  }
  swift_retain();
  return v4;
}

uint64_t destroy for TimeBasedDistributionChartPoint.DayOfWeek(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 28);
  v5 = sub_1BCAB4CE0();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  return swift_release();
}

uint64_t initializeWithCopy for TimeBasedDistributionChartPoint.DayOfWeek(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v6 = *(int *)(a3 + 28);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = sub_1BCAB4CE0();
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  v10(v7, v8, v9);
  *(_QWORD *)(a1 + *(int *)(a3 + 32)) = *(_QWORD *)(a2 + *(int *)(a3 + 32));
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for TimeBasedDistributionChartPoint.DayOfWeek(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 28);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = sub_1BCAB4CE0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  *(_QWORD *)(a1 + *(int *)(a3 + 32)) = *(_QWORD *)(a2 + *(int *)(a3 + 32));
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for TimeBasedDistributionChartPoint.DayOfWeek(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  v6 = *(int *)(a3 + 28);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = sub_1BCAB4CE0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  *(_QWORD *)(a1 + *(int *)(a3 + 32)) = *(_QWORD *)(a2 + *(int *)(a3 + 32));
  return a1;
}

uint64_t assignWithTake for TimeBasedDistributionChartPoint.DayOfWeek(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRelease();
  v7 = *(int *)(a3 + 28);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_1BCAB4CE0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  *(_QWORD *)(a1 + *(int *)(a3 + 32)) = *(_QWORD *)(a2 + *(int *)(a3 + 32));
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for TimeBasedDistributionChartPoint.DayOfWeek()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BCA29644(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 24);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_1BCAB4CE0();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 28), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for TimeBasedDistributionChartPoint.DayOfWeek()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BCA296CC(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 24) = (a2 - 1);
  }
  else
  {
    v7 = sub_1BCAB4CE0();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 28), a2, a2, v7);
  }
  return result;
}

uint64_t sub_1BCA29740()
{
  return sub_1BCA2974C();
}

uint64_t sub_1BCA2974C()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1BCAB4CE0();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

double sub_1BCA29810()
{
  return 0.0;
}

double sub_1BCA29824()
{
  return 2.0;
}

void (*sub_1BCA29838())(CGContext *a1, CGFloat a2, CGFloat a3)
{
  swift_retain();
  return sub_1BCA29A1C;
}

void sub_1BCA29868(CGContext *a1, CGFloat a2, CGFloat a3)
{
  void *v6;
  void *v7;
  double v8;
  double v9;
  double v10;
  double v11;
  id v12;
  CGColor *v13;
  void *v14;
  id v15;
  CGRect v16;

  DiagramConfiguration.TextAttributes.toTextAttributes()();
  v6 = (void *)sub_1BCAB5EE0();
  type metadata accessor for Key(0);
  sub_1BC99F5A0();
  v7 = (void *)sub_1BCAB5E68();
  objc_msgSend(v6, sel_sizeWithAttributes_, v7);
  v9 = v8;
  v11 = v10;

  v12 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3658]), sel_initWithWhite_alpha_, 0.71, 1.0);
  v13 = (CGColor *)objc_msgSend(v12, sel_CGColor);
  CGContextSetFillColorWithColor(a1, v13);

  v16.origin.x = 0.0;
  v16.origin.y = 0.0;
  v16.size.width = a2;
  v16.size.height = a3;
  CGContextFillRect(a1, v16);
  v14 = (void *)sub_1BCAB5EE0();
  v15 = (id)sub_1BCAB5E68();
  swift_bridgeObjectRelease();
  objc_msgSend(v14, sel_drawAtPoint_withAttributes_, v15, (a2 - v9) * 0.5, (a3 - v11) * 0.5);

}

void sub_1BCA29A1C(CGContext *a1, CGFloat a2, CGFloat a3)
{
  sub_1BCA29868(a1, a2, a3);
}

uint64_t static DiagramBanner.imageForTesting(dataGroups:configuration:renderer:imageSize:)(__int128 *a1, uint64_t *a2, void *a3, double a4, double a5)
{
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v23;
  void *v24;
  id v25;
  uint64_t result;
  __int128 v27;
  _QWORD aBlock[6];

  v27 = *a1;
  v8 = *((_QWORD *)a1 + 2);
  v9 = *((_QWORD *)a1 + 3);
  v10 = *((_BYTE *)a1 + 32);
  v11 = *((_QWORD *)a1 + 5);
  v13 = *a2;
  v12 = a2[1];
  v14 = *((_BYTE *)a2 + 16);
  type metadata accessor for DiagramBanner();
  v15 = swift_allocObject();
  *(_QWORD *)(v15 + 16) = v13;
  *(_QWORD *)(v15 + 24) = v12;
  *(_BYTE *)(v15 + 32) = v14;
  *(_OWORD *)(v15 + 40) = v27;
  *(_QWORD *)(v15 + 56) = v8;
  *(_QWORD *)(v15 + 64) = v9;
  *(_BYTE *)(v15 + 72) = v10;
  *(_QWORD *)(v15 + 80) = v11;
  v16 = swift_allocObject();
  *(_QWORD *)(v16 + 16) = 0;
  *(_QWORD *)(v16 + 24) = 0;
  __asm { FMOV            V0.2D, #1.0 }
  *(_OWORD *)(v16 + 32) = _Q0;
  *(_QWORD *)(v16 + 48) = 0;
  *(_QWORD *)(v16 + 56) = 0;
  *(double *)(v16 + 64) = a4;
  *(double *)(v16 + 72) = a5;
  __asm { FMOV            V0.2D, #2.0 }
  *(_OWORD *)(v16 + 80) = _Q0;
  *(_OWORD *)(v16 + 96) = _Q0;
  *(_QWORD *)(v16 + 112) = sub_1BCA29A1C;
  *(_QWORD *)(v16 + 120) = v15;
  v23 = swift_allocObject();
  *(_QWORD *)(v23 + 16) = sub_1BC9C9F50;
  *(_QWORD *)(v23 + 24) = v16;
  aBlock[4] = sub_1BCA29C4C;
  aBlock[5] = v23;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1BC9C94E0;
  aBlock[3] = &block_descriptor_6;
  v24 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_release();
  v25 = objc_msgSend(a3, sel_imageWithActions_, v24);
  _Block_release(v24);
  LOBYTE(v11) = swift_isEscapingClosureAtFileLocation();
  swift_release_n();
  swift_release();
  result = swift_release();
  if ((v11 & 1) == 0)
    return (uint64_t)v25;
  __break(1u);
  return result;
}

uint64_t type metadata accessor for DiagramBanner()
{
  return objc_opt_self();
}

uint64_t sub_1BCA29C2C()
{
  return swift_deallocObject();
}

uint64_t sub_1BCA29C3C()
{
  return swift_deallocObject();
}

uint64_t sub_1BCA29C4C(uint64_t a1)
{
  uint64_t v1;

  return sub_1BC9C94C0(a1, *(uint64_t (**)(void))(v1 + 16));
}

uint64_t DiagramBanner.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t DiagramBanner.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

void (*sub_1BCA29CA4())(CGContext *a1, CGFloat a2, CGFloat a3)
{
  swift_retain();
  return sub_1BCA29A1C;
}

uint64_t method lookup function for DiagramBanner()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of DiagramBanner.modelSpace.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 96))();
}

uint64_t dispatch thunk of DiagramBanner.screenInsets.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

uint64_t dispatch thunk of DiagramBanner.drawingBlock.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t sub_1BCA29D0C(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1BCA29D48 + 4 * byte_1BCAC45B0[a1]))(0x6974736974617473, 0xEA00000000007363);
}

unint64_t sub_1BCA29D48()
{
  return 0xD000000000000014;
}

unint64_t sub_1BCA29D84()
{
  return 0xD000000000000010;
}

uint64_t sub_1BCA29F04()
{
  return 0x7461777265646E75;
}

uint64_t sub_1BCA29F28()
{
  return 0x4D65636E616C6162;
}

uint64_t sub_1BCA29F50()
{
  unsigned __int8 *v0;

  return sub_1BCA29D0C(*v0);
}

uint64_t sub_1BCA29F58@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1BCA2BE84(a1, a2);
  *a3 = result;
  return result;
}

void sub_1BCA29F7C(_BYTE *a1@<X8>)
{
  *a1 = 18;
}

uint64_t sub_1BCA29F88()
{
  sub_1BCA2B444();
  return sub_1BCAB68D0();
}

uint64_t sub_1BCA29FB0()
{
  sub_1BCA2B444();
  return sub_1BCAB68DC();
}

void QueryConfiguration.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  sub_1BCA2B730(0, &qword_1ED6C3190, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED170]);
  MEMORY[0x1E0C80A78](v3);
  v4 = *(unsigned __int8 *)(v1 + 32);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BCA2B444();
  sub_1BCAB68B8();
  __asm { BR              X10 }
}

uint64_t sub_1BCA2A0A8()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  __int16 v3;
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)(v4 - 120) = v2;
  *(_QWORD *)(v4 - 112) = v0;
  *(_WORD *)(v4 - 104) = v3;
  *(_BYTE *)(v4 - 65) = 0;
  sub_1BCA2B4CC();
  v5 = *(_QWORD *)(v4 - 128);
  sub_1BCAB6774();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 136) + 8))(v1, v5);
}

void sub_1BCA2A310(_QWORD *a1)
{
  QueryConfiguration.encode(to:)(a1);
}

uint64_t QueryConfiguration.init(from:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_1BCA2B730(0, &qword_1ED6C6ED0, MEMORY[0x1E0DED048]);
  MEMORY[0x1E0C80A78](v3);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BCA2B444();
  sub_1BCAB68AC();
  if (!v1)
  {
    v4 = sub_1BCAB66F0();
    v5 = *(_QWORD *)(v4 + 16);
    if (v5)
    {
      v6 = *(unsigned __int8 *)(v5 + v4 + 31);
      swift_bridgeObjectRelease();
      __asm { BR              X9 }
    }
    swift_bridgeObjectRelease();
    __break(1u);
    JUMPOUT(0x1BCA2AB40);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_1BCA2AB88(_QWORD *a1)
{
  return QueryConfiguration.init(from:)(a1);
}

void _s19HealthVisualization18QueryConfigurationO2eeoiySbAC_ACtFZ_0(uint64_t a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1BCA2ABF0()
{
  uint64_t v0;
  unsigned int v1;
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 v17;
  char v19;
  char v20;

  if (v1 >= 8)
  {
    swift_bridgeObjectRetain();
    sub_1BC9A98C0(v8, v6, v2, v0, v1);
    sub_1BC9AC294(v9, v7, v5, v3, v4);
    v13 = v8;
    v14 = v6;
    v15 = v2;
    v16 = v0;
    v17 = v1;
    goto LABEL_9;
  }
  sub_1BC9A98C0(v8, v6, v2, v0, v1);
  sub_1BC9A98C0(v9, v7, v5, v3, v4);
  sub_1BC9A98C0(v9, v7, v5, v3, v4);
  sub_1BC9A98C0(v8, v6, v2, v0, v1);
  sub_1BC9991D8(v9);
  if ((v10 & 1) == 0 || (sub_1BC9A920C(v7, v6) & 1) == 0 || (sub_1BC9993E0(v5), (v11 & 1) == 0))
  {
    sub_1BC9AC294(v9, v7, v5, v3, v4);
    sub_1BC9AC294(v8, v6, v2, v0, v1);
    sub_1BC9AC294(v8, v6, v2, v0, v1);
    v13 = v9;
    v14 = v7;
    v15 = v5;
    v16 = v3;
    v17 = v4;
LABEL_9:
    sub_1BC9AC294(v13, v14, v15, v16, v17);
    goto LABEL_10;
  }
  sub_1BC9995AC(SBYTE1(v5));
  v20 = v12;
  sub_1BC9AC294(v9, v7, v5, v3, v4);
  sub_1BC9AC294(v8, v6, v2, v0, v1);
  sub_1BC9AC294(v8, v6, v2, v0, v1);
  sub_1BC9AC294(v9, v7, v5, v3, v4);
  if ((v20 & 1) == 0)
  {
LABEL_10:
    v19 = 0;
    return v19 & 1;
  }
  v19 = 1;
  return v19 & 1;
}

unint64_t sub_1BCA2B444()
{
  unint64_t result;

  result = qword_1ED6C69F8;
  if (!qword_1ED6C69F8)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCAC47A0, &type metadata for QueryConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED6C69F8);
  }
  return result;
}

unint64_t sub_1BCA2B488()
{
  unint64_t result;

  result = qword_1ED6C3168;
  if (!qword_1ED6C3168)
  {
    result = MEMORY[0x1BCCFBE84](&protocol conformance descriptor for EmptyQueryConfiguration, &type metadata for EmptyQueryConfiguration);
    atomic_store(result, (unint64_t *)&qword_1ED6C3168);
  }
  return result;
}

unint64_t sub_1BCA2B4CC()
{
  unint64_t result;

  result = qword_1ED6C4188;
  if (!qword_1ED6C4188)
  {
    result = MEMORY[0x1BCCFBE84](&protocol conformance descriptor for StatisticsQueryConfiguration, &type metadata for StatisticsQueryConfiguration);
    atomic_store(result, (unint64_t *)&qword_1ED6C4188);
  }
  return result;
}

unint64_t sub_1BCA2B510()
{
  unint64_t result;

  result = qword_1ED6C3180;
  if (!qword_1ED6C3180)
  {
    result = MEMORY[0x1BCCFBE84](&protocol conformance descriptor for MostRecentTimePeriodQueryConfiguration, &type metadata for MostRecentTimePeriodQueryConfiguration);
    atomic_store(result, (unint64_t *)&qword_1ED6C3180);
  }
  return result;
}

unint64_t sub_1BCA2B554()
{
  unint64_t result;

  result = qword_1ED6C3DB8;
  if (!qword_1ED6C3DB8)
  {
    result = MEMORY[0x1BCCFBE84](&protocol conformance descriptor for SleepQueryConfiguration, &type metadata for SleepQueryConfiguration);
    atomic_store(result, (unint64_t *)&qword_1ED6C3DB8);
  }
  return result;
}

unint64_t sub_1BCA2B598()
{
  unint64_t result;

  result = qword_1ED6C42D0;
  if (!qword_1ED6C42D0)
  {
    result = MEMORY[0x1BCCFBE84](&protocol conformance descriptor for SampleCountQueryConfiguration, &type metadata for SampleCountQueryConfiguration);
    atomic_store(result, (unint64_t *)&qword_1ED6C42D0);
  }
  return result;
}

unint64_t sub_1BCA2B5DC()
{
  unint64_t result;

  result = qword_1ED6C4CB0;
  if (!qword_1ED6C4CB0)
  {
    result = MEMORY[0x1BCCFBE84](&protocol conformance descriptor for MostRecentRangeQueryConfiguration, &type metadata for MostRecentRangeQueryConfiguration);
    atomic_store(result, (unint64_t *)&qword_1ED6C4CB0);
  }
  return result;
}

unint64_t sub_1BCA2B620()
{
  unint64_t result;

  result = qword_1EF479830;
  if (!qword_1EF479830)
  {
    result = MEMORY[0x1BCCFBE84](&protocol conformance descriptor for CountComparisonQueryConfiguration, &type metadata for CountComparisonQueryConfiguration);
    atomic_store(result, (unint64_t *)&qword_1EF479830);
  }
  return result;
}

unint64_t sub_1BCA2B664()
{
  unint64_t result;

  result = qword_1ED6C3150;
  if (!qword_1ED6C3150)
  {
    result = MEMORY[0x1BCCFBE84](&protocol conformance descriptor for CorrelatedStatisticsQueryConfiguration, &type metadata for CorrelatedStatisticsQueryConfiguration);
    atomic_store(result, (unint64_t *)&qword_1ED6C3150);
  }
  return result;
}

unint64_t sub_1BCA2B6A8()
{
  unint64_t result;

  result = qword_1ED6C3178;
  if (!qword_1ED6C3178)
  {
    result = MEMORY[0x1BCCFBE84](&protocol conformance descriptor for AudioExposureQueryConfiguration, &type metadata for AudioExposureQueryConfiguration);
    atomic_store(result, (unint64_t *)&qword_1ED6C3178);
  }
  return result;
}

unint64_t sub_1BCA2B6EC()
{
  unint64_t result;

  result = qword_1EF479838;
  if (!qword_1EF479838)
  {
    result = MEMORY[0x1BCCFBE84](&protocol conformance descriptor for ActivitySummaryQueryConfiguration, &type metadata for ActivitySummaryQueryConfiguration);
    atomic_store(result, (unint64_t *)&qword_1EF479838);
  }
  return result;
}

void sub_1BCA2B730(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_1BCA2B444();
    v7 = a3(a1, &type metadata for QueryConfiguration.CodingKeys, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

unint64_t sub_1BCA2B78C()
{
  unint64_t result;

  result = qword_1ED6C6B20;
  if (!qword_1ED6C6B20)
  {
    result = MEMORY[0x1BCCFBE84](&protocol conformance descriptor for EmptyQueryConfiguration, &type metadata for EmptyQueryConfiguration);
    atomic_store(result, (unint64_t *)&qword_1ED6C6B20);
  }
  return result;
}

unint64_t sub_1BCA2B7D0()
{
  unint64_t result;

  result = qword_1ED6C6B90;
  if (!qword_1ED6C6B90)
  {
    result = MEMORY[0x1BCCFBE84](&protocol conformance descriptor for StatisticsQueryConfiguration, &type metadata for StatisticsQueryConfiguration);
    atomic_store(result, (unint64_t *)&qword_1ED6C6B90);
  }
  return result;
}

unint64_t sub_1BCA2B814()
{
  unint64_t result;

  result = qword_1ED6C6D18;
  if (!qword_1ED6C6D18)
  {
    result = MEMORY[0x1BCCFBE84](&protocol conformance descriptor for MostRecentTimePeriodQueryConfiguration, &type metadata for MostRecentTimePeriodQueryConfiguration);
    atomic_store(result, (unint64_t *)&qword_1ED6C6D18);
  }
  return result;
}

unint64_t sub_1BCA2B858()
{
  unint64_t result;

  result = qword_1ED6C6B50;
  if (!qword_1ED6C6B50)
  {
    result = MEMORY[0x1BCCFBE84](&protocol conformance descriptor for SleepQueryConfiguration, &type metadata for SleepQueryConfiguration);
    atomic_store(result, (unint64_t *)&qword_1ED6C6B50);
  }
  return result;
}

unint64_t sub_1BCA2B89C()
{
  unint64_t result;

  result = qword_1ED6C6B98;
  if (!qword_1ED6C6B98)
  {
    result = MEMORY[0x1BCCFBE84](&protocol conformance descriptor for SampleCountQueryConfiguration, &type metadata for SampleCountQueryConfiguration);
    atomic_store(result, (unint64_t *)&qword_1ED6C6B98);
  }
  return result;
}

unint64_t sub_1BCA2B8E0()
{
  unint64_t result;

  result = qword_1ED6C4DD8;
  if (!qword_1ED6C4DD8)
  {
    result = MEMORY[0x1BCCFBE84](&protocol conformance descriptor for MostRecentRangeQueryConfiguration, &type metadata for MostRecentRangeQueryConfiguration);
    atomic_store(result, (unint64_t *)&qword_1ED6C4DD8);
  }
  return result;
}

unint64_t sub_1BCA2B924()
{
  unint64_t result;

  result = qword_1EF479840;
  if (!qword_1EF479840)
  {
    result = MEMORY[0x1BCCFBE84](&protocol conformance descriptor for CountComparisonQueryConfiguration, &type metadata for CountComparisonQueryConfiguration);
    atomic_store(result, (unint64_t *)&qword_1EF479840);
  }
  return result;
}

unint64_t sub_1BCA2B968()
{
  unint64_t result;

  result = qword_1ED6C6D10;
  if (!qword_1ED6C6D10)
  {
    result = MEMORY[0x1BCCFBE84](&protocol conformance descriptor for CorrelatedStatisticsQueryConfiguration, &type metadata for CorrelatedStatisticsQueryConfiguration);
    atomic_store(result, (unint64_t *)&qword_1ED6C6D10);
  }
  return result;
}

unint64_t sub_1BCA2B9AC()
{
  unint64_t result;

  result = qword_1ED6C6BB8;
  if (!qword_1ED6C6BB8)
  {
    result = MEMORY[0x1BCCFBE84](&protocol conformance descriptor for AudioExposureQueryConfiguration, &type metadata for AudioExposureQueryConfiguration);
    atomic_store(result, (unint64_t *)&qword_1ED6C6BB8);
  }
  return result;
}

unint64_t sub_1BCA2B9F0()
{
  unint64_t result;

  result = qword_1ED6C6BC0;
  if (!qword_1ED6C6BC0)
  {
    result = MEMORY[0x1BCCFBE84](&protocol conformance descriptor for ActivitySummaryQueryConfiguration, &type metadata for ActivitySummaryQueryConfiguration);
    atomic_store(result, (unint64_t *)&qword_1ED6C6BC0);
  }
  return result;
}

uint64_t destroy for QueryConfiguration(uint64_t a1)
{
  return sub_1BC9AC294(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
}

uint64_t initializeWithCopy for QueryConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_BYTE *)(a2 + 32);
  sub_1BC9A98C0(*(_QWORD *)a2, v4, v5, v6, v7);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 32) = v7;
  return a1;
}

uint64_t assignWithCopy for QueryConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 v12;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_BYTE *)(a2 + 32);
  sub_1BC9A98C0(*(_QWORD *)a2, v4, v5, v6, v7);
  v8 = *(_QWORD *)a1;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  v12 = *(_BYTE *)(a1 + 32);
  *(_BYTE *)(a1 + 32) = v7;
  sub_1BC9AC294(v8, v9, v10, v11, v12);
  return a1;
}

uint64_t assignWithTake for QueryConfiguration(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  unsigned __int8 v9;

  v3 = *(_BYTE *)(a2 + 32);
  v4 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v8;
  v9 = *(_BYTE *)(a1 + 32);
  *(_BYTE *)(a1 + 32) = v3;
  sub_1BC9AC294(v4, v6, v5, v7, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for QueryConfiguration(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x6F && *(_BYTE *)(a1 + 33))
    return (*(_DWORD *)a1 + 111);
  v3 = ((*(unsigned __int8 *)(a1 + 32) >> 3) & 0xFFFFFF9F | (32 * ((*(unsigned __int8 *)(a1 + 32) >> 1) & 3))) ^ 0x7F;
  if (v3 >= 0x6E)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for QueryConfiguration(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x6E)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 - 111;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x6F)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if (a3 >= 0x6F)
      *(_BYTE *)(result + 33) = 0;
    if (a2)
    {
      *(_OWORD *)result = 0u;
      *(_OWORD *)(result + 16) = 0u;
      *(_BYTE *)(result + 32) = 2 * (((-a2 >> 5) & 3) - 4 * a2);
    }
  }
  return result;
}

uint64_t sub_1BCA2BC10(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 32) >> 3;
}

uint64_t sub_1BCA2BC1C(uint64_t result)
{
  *(_BYTE *)(result + 32) &= 7u;
  return result;
}

uint64_t sub_1BCA2BC2C(uint64_t result, char a2)
{
  *(_BYTE *)(result + 32) = *(_BYTE *)(result + 32) & 1 | (8 * a2);
  return result;
}

ValueMetadata *type metadata accessor for QueryConfiguration()
{
  return &type metadata for QueryConfiguration;
}

uint64_t getEnumTagSinglePayload for QueryConfiguration.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xEF)
    goto LABEL_17;
  if (a2 + 17 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 17) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 17;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 17;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 17;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x12;
  v8 = v6 - 18;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for QueryConfiguration.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 17 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 17) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xEF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xEE)
    return ((uint64_t (*)(void))((char *)&loc_1BCA2BD2C + 4 * byte_1BCAC45FF[v4]))();
  *a1 = a2 + 17;
  return ((uint64_t (*)(void))((char *)sub_1BCA2BD60 + 4 * byte_1BCAC45FA[v4]))();
}

uint64_t sub_1BCA2BD60(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BCA2BD68(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BCA2BD70);
  return result;
}

uint64_t sub_1BCA2BD7C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BCA2BD84);
  *(_BYTE *)result = a2 + 17;
  return result;
}

uint64_t sub_1BCA2BD88(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BCA2BD90(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for QueryConfiguration.CodingKeys()
{
  return &type metadata for QueryConfiguration.CodingKeys;
}

unint64_t sub_1BCA2BDB0()
{
  unint64_t result;

  result = qword_1EF479848;
  if (!qword_1EF479848)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCAC4778, &type metadata for QueryConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF479848);
  }
  return result;
}

unint64_t sub_1BCA2BDF8()
{
  unint64_t result;

  result = qword_1ED6C6A08;
  if (!qword_1ED6C6A08)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCAC46E8, &type metadata for QueryConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED6C6A08);
  }
  return result;
}

unint64_t sub_1BCA2BE40()
{
  unint64_t result;

  result = qword_1ED6C6A00;
  if (!qword_1ED6C6A00)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCAC4710, &type metadata for QueryConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED6C6A00);
  }
  return result;
}

uint64_t sub_1BCA2BE84(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 0x6974736974617473 && a2 == 0xEA00000000007363 || (sub_1BCAB67C8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x80000001BCAD1610 || (sub_1BCAB67C8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x7065656C73 && a2 == 0xE500000000000000 || (sub_1BCAB67C8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x80000001BCAD1630 || (sub_1BCAB67C8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000001BCACEE50 || (sub_1BCAB67C8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x6563655274736F6DLL && a2 == 0xEF65676E6152746ELL || (sub_1BCAB67C8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x7974697669746361 && a2 == 0xEF7972616D6D7553 || (sub_1BCAB67C8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x7078456F69647561 && a2 == 0xED0000657275736FLL || (sub_1BCAB67C8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x6172676F69647561 && a2 == 0xE90000000000006DLL || (sub_1BCAB67C8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0x6F43656C706D6173 && a2 == 0xEB00000000746E75 || (sub_1BCAB67C8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0x756F48646E617473 && a2 == 0xEA00000000007372 || (sub_1BCAB67C8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 0x46676E696F676E6FLL && a2 == 0xEE0073726F746361 || (sub_1BCAB67C8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else if (a1 == 0x6D6F43746E756F63 && a2 == 0xEF6E6F7369726170 || (sub_1BCAB67C8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 12;
  }
  else if (a1 == 0x69466F6964726163 && a2 == 0xED00007373656E74 || (sub_1BCAB67C8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 13;
  }
  else if (a1 == 0x6472754262694661 && a2 == 0xEA00000000006E65 || (sub_1BCAB67C8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 14;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x80000001BCAD1650 || (sub_1BCAB67C8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 15;
  }
  else if (a1 == 0x7461777265646E75 && a2 == 0xEF68747065447265 || (sub_1BCAB67C8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 16;
  }
  else if (a1 == 0x4D65636E616C6162 && a2 == 0xEE00736369727465)
  {
    swift_bridgeObjectRelease();
    return 17;
  }
  else
  {
    v5 = sub_1BCAB67C8();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 17;
    else
      return 18;
  }
}

Swift::Void __swiftcall SignificantTimeChangeObserving.registerForSignificantTimeChanges()()
{
  uint64_t v0;
  id v1;

  v1 = objc_msgSend((id)objc_opt_self(), sel_defaultCenter);
  objc_msgSend(v1, sel_addObserver_selector_name_object_, v0, sel_significantTimeChangeDidOccur, *MEMORY[0x1E0DC4838], 0);

}

Swift::Void __swiftcall SignificantTimeChangeObserving.unregisterForSignificantTimeChanges()()
{
  uint64_t v0;
  id v1;

  v1 = objc_msgSend((id)objc_opt_self(), sel_defaultCenter);
  objc_msgSend(v1, sel_removeObserver_name_object_, v0, *MEMORY[0x1E0DC4838], 0);

}

uint64_t QuantityTypeProviding.canonicalUnit.getter(uint64_t a1, uint64_t a2)
{
  void *v2;
  id v3;
  uint64_t result;

  v2 = (void *)(*(uint64_t (**)(void))(a2 + 8))();
  v3 = objc_msgSend(v2, sel_canonicalUnit);

  if (v3)
    return (uint64_t)v3;
  result = sub_1BCAB65C4();
  __break(1u);
  return result;
}

uint64_t dispatch thunk of QuantityTypeProviding.quantityType.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

Swift::Double_optional __swiftcall HKStatistics.doubleValue(for:using:)(HealthVisualization::StatisticsOption a1, HKUnit using)
{
  void *v3;
  double v4;
  void *v5;
  char v6;
  char v7;
  char v8;
  Swift::Double_optional result;

  v8 = *(_BYTE *)a1;
  v3 = (void *)HKStatistics.quantity(for:)((HealthVisualization::StatisticsOption)&v8);
  v5 = v3;
  if (v3)
  {
    objc_msgSend(v3, sel_doubleValueForUnit_, using.super.isa);
    v7 = v6;

    LOBYTE(v3) = v7;
  }
  result.value = v4;
  result.is_nil = (char)v3;
  return result;
}

HKQuantity_optional __swiftcall HKStatistics.quantity(for:)(HealthVisualization::StatisticsOption a1)
{
  HKQuantity_optional result;

  __asm { BR              X10 }
  return result;
}

id sub_1BCA2C8E4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  void *v18;

  return objc_msgSend(v18, sel_duration);
}

void sub_1BCA2CA18()
{
  sub_1BCAB65C4();
  __break(1u);
  JUMPOUT(0x1BCA2CA64);
}

id MostRecentSampleQueryOperation.__allocating_init(sampleType:predicate:name:queryQualityOfService:healthStore:resultHandler:)(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8)
{
  id v8;

  v8 = sub_1BCA2DCB8(a1, a2, a3, a4, a5, a6, a7, a8);
  swift_release();
  return v8;
}

void sub_1BCA2CABC(uint64_t a1, void *a2, void *a3)
{
  void (*v5)(void *, void *);
  id v6;
  id v7;

  v5 = *(void (**)(void *, void *))(a1 + 32);
  swift_retain();
  v7 = a2;
  v6 = a3;
  v5(a2, a3);
  swift_release();

}

id MostRecentSampleQueryOperationCore.sampleType.getter()
{
  uint64_t v0;

  return *(id *)(v0 + qword_1ED6C5E78);
}

id sub_1BCA2CB40()
{
  char *v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  void *v5;
  id v6;

  v1 = qword_1ED6C5E90;
  v2 = *(void **)&v0[qword_1ED6C5E90];
  if (v2)
  {
    v3 = *(id *)&v0[qword_1ED6C5E90];
  }
  else
  {
    v4 = sub_1BCA2CBA0(v0);
    v5 = *(void **)&v0[v1];
    *(_QWORD *)&v0[v1] = v4;
    v3 = v4;

    v2 = 0;
  }
  v6 = v2;
  return v3;
}

id sub_1BCA2CBA0(char *a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  void *v7;
  id v8;
  id v9;
  void *v10;
  _QWORD v12[6];

  v2 = (void *)objc_opt_self();
  v3 = *(void **)&a1[qword_1ED6C5E78];
  v4 = *(_QWORD *)&a1[qword_1ED6C5E98];
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = a1;
  v6 = a1;
  v12[4] = sub_1BCA2E154;
  v12[5] = v5;
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 1107296256;
  v12[2] = sub_1BCA2CABC;
  v12[3] = &block_descriptor_3;
  v7 = _Block_copy(v12);
  swift_release();
  v8 = objc_msgSend(v2, sel_queryForMostRecentSampleOfType_predicate_completion_, v3, v4, v7);
  _Block_release(v7);
  v9 = objc_msgSend(v6, sel_name);
  objc_msgSend(v8, sel_setDebugIdentifier_, v9);

  objc_msgSend(v8, sel_setQualityOfService_, *(_QWORD *)&v6[qword_1ED6C5E88]);
  if (objc_msgSend(v3, sel_code) == (id)248)
  {
    objc_opt_self();
    v10 = (void *)swift_dynamicCastObjCClass();
    if (v10)
      objc_msgSend(v10, sel_setIncludeAutomaticTimeZones_, 1);
  }
  return v8;
}

id MostRecentSampleQueryOperationCore.__allocating_init(sampleType:predicate:name:queryQualityOfService:healthStore:)(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  objc_class *v6;
  id v13;

  v13 = objc_allocWithZone(v6);
  return MostRecentSampleQueryOperationCore.init(sampleType:predicate:name:queryQualityOfService:healthStore:)(a1, a2, a3, a4, a5, a6);
}

id MostRecentSampleQueryOperationCore.init(sampleType:predicate:name:queryQualityOfService:healthStore:)(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  uint64_t *v6;
  uint64_t v11;
  uint64_t v12;
  objc_class *OperationCore;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  void *v19;
  objc_super v21;

  v11 = *v6;
  v12 = *MEMORY[0x1E0DEEDD8];
  *(uint64_t *)((char *)v6 + qword_1ED6C5E90) = 0;
  *(uint64_t *)((char *)v6 + qword_1ED6C5E78) = (uint64_t)a1;
  *(uint64_t *)((char *)v6 + qword_1ED6C5E98) = (uint64_t)a2;
  *(uint64_t *)((char *)v6 + qword_1ED6C5E88) = a5;
  *(uint64_t *)((char *)v6 + qword_1ED6C5E80) = (uint64_t)a6;
  OperationCore = (objc_class *)type metadata accessor for MostRecentSampleQueryOperationCore(0, *(_QWORD *)((v12 & v11)+ class metadata base offset for MostRecentSampleQueryOperationCore), *(_QWORD *)((v12 & v11)+ class metadata base offset for MostRecentSampleQueryOperationCore+ 8), a4);
  v21.receiver = v6;
  v21.super_class = OperationCore;
  v14 = a1;
  v15 = a6;
  v16 = a2;
  v17 = objc_msgSendSuper2(&v21, sel_init);
  v18 = v17;
  if (a4)
  {
    v19 = (void *)sub_1BCAB5EE0();
    swift_bridgeObjectRelease();
  }
  else
  {
    v19 = 0;
  }
  objc_msgSend(v17, sel_setName_, v19, v21.receiver, v21.super_class);

  return v17;
}

void sub_1BCA2CEF0()
{
  uint64_t v0;
  id v1;
  uint64_t v2;
  void *v3;
  void *v4;
  Swift::String v5;
  Swift::String v6;
  void *v7;
  id v8;

  v1 = objc_msgSend(*(id *)(v0 + qword_1ED6C5E78), sel_identifier);
  v2 = sub_1BCAB5F04();
  v4 = v3;

  v5._countAndFlagsBits = 0x676E696E6E7572;
  v5._object = (void *)0xE700000000000000;
  v6._countAndFlagsBits = v2;
  v6._object = v4;
  NSOperation.logLifeCycleEvent(_:withPrivateInfo:)(v5, v6);
  swift_bridgeObjectRelease();
  v7 = *(void **)(v0 + qword_1ED6C5E80);
  v8 = sub_1BCA2CB40();
  objc_msgSend(v7, sel_executeQuery_, v8);

}

void sub_1BCA2CFA0(void *a1)
{
  id v1;

  v1 = a1;
  sub_1BCA2CEF0();

}

void sub_1BCA2CFD4()
{
  char *v0;
  id v1;
  uint64_t v2;
  void *v3;
  void *v4;
  Swift::String v5;
  Swift::String v6;
  void *v7;
  id v8;

  if (objc_msgSend(v0, sel_isCancelled))
  {
    v1 = objc_msgSend(*(id *)&v0[qword_1ED6C5E78], sel_identifier);
    v2 = sub_1BCAB5F04();
    v4 = v3;

    v5._countAndFlagsBits = 0x656C6C65636E6163;
    v5._object = (void *)0xE900000000000064;
    v6._countAndFlagsBits = v2;
    v6._object = v4;
    NSOperation.logLifeCycleEvent(_:withPrivateInfo:)(v5, v6);
    swift_bridgeObjectRelease();
  }
  v7 = *(void **)&v0[qword_1ED6C5E80];
  v8 = sub_1BCA2CB40();
  objc_msgSend(v7, sel_stopQuery_, v8);

}

uint64_t sub_1BCA2D09C(void *a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  char *v14;
  void *v15;
  void (*v16)(uint64_t);
  _QWORD *v17;
  void *v18;
  void *v19;
  id v20;
  id v21;
  id v22;
  void (*v23)(uint64_t);
  _QWORD v25[2];
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD aBlock[6];

  v4 = sub_1BCAB5E44();
  v30 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = sub_1BCAB6234();
  v7 = *(_QWORD *)(v26 - 8);
  MEMORY[0x1E0C80A78](v26);
  v9 = (char *)v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1BCAB6228();
  MEMORY[0x1E0C80A78](v10);
  v11 = sub_1BCAB5E5C();
  v28 = *(_QWORD *)(v11 - 8);
  v29 = v11;
  v12 = MEMORY[0x1E0C80A78](v11);
  v14 = (char *)v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = (void *)MEMORY[0x1BCCFB9A4](v12);
  if (!v15)
  {
    v25[1] = sub_1BCA2DFCC();
    sub_1BCAB5E50();
    aBlock[0] = MEMORY[0x1E0DEE9D8];
    v16 = (void (*)(uint64_t))MEMORY[0x1E0DEF810];
    v25[0] = sub_1BC996948(&qword_1ED6C6E80, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF810], MEMORY[0x1E0DEF828]);
    sub_1BCA2E088(0, &qword_1ED6C6E20, v16);
    sub_1BCA2E008((unint64_t *)&qword_1ED6C6E28, &qword_1ED6C6E20, (void (*)(uint64_t))MEMORY[0x1E0DEF810]);
    sub_1BCAB63E4();
    (*(void (**)(char *, _QWORD, uint64_t))(v7 + 104))(v9, *MEMORY[0x1E0DEF8D0], v26);
    v15 = (void *)sub_1BCAB624C();
  }
  v17 = (_QWORD *)swift_allocObject();
  v18 = v27;
  v17[2] = v27;
  v17[3] = a2;
  v17[4] = a1;
  aBlock[4] = sub_1BCA2E07C;
  aBlock[5] = v17;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1BC9B17C8;
  aBlock[3] = &block_descriptor_7;
  v19 = _Block_copy(aBlock);
  v20 = v18;
  v21 = a2;
  v22 = a1;
  sub_1BCAB5E50();
  v31 = MEMORY[0x1E0DEE9D8];
  v23 = (void (*)(uint64_t))MEMORY[0x1E0DEF4F8];
  sub_1BC996948(&qword_1ED6C5F28, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  sub_1BCA2E088(0, &qword_1ED6C5F30, v23);
  sub_1BCA2E008(&qword_1ED6C5F38, &qword_1ED6C5F30, v23);
  sub_1BCAB63E4();
  MEMORY[0x1BCCFAE34](0, v14, v6, v19);
  _Block_release(v19);

  (*(void (**)(char *, uint64_t))(v30 + 8))(v6, v4);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v14, v29);
  return swift_release();
}

uint64_t sub_1BCA2D414(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  sub_1BCAB50AC();
  v6 = (*(uint64_t (**)(uint64_t, uint64_t))(class metadata base offset for MostRecentSampleQueryOperationCore
                                                   + (*MEMORY[0x1E0DEEDD8] & *a1)
                                                   + 96))(a3, a2);
  MEMORY[0x1E0C80A78](v6);
  return sub_1BCAB50AC();
}

void sub_1BCA2D4E4(void *a1, _BYTE *a2, void *a3)
{
  Swift::String v6;
  Swift::String v7;
  id v8;
  Swift::String v9;
  Swift::String v10;

  if ((objc_msgSend(a1, sel_isCancelled) & 1) != 0)
  {
    v6._object = (void *)0x80000001BCACE790;
    v6._countAndFlagsBits = 0xD00000000000002DLL;
    v7._countAndFlagsBits = 0;
    v7._object = (void *)0xE000000000000000;
    NSOperation.logLifeCycleEvent(_:withPrivateInfo:)(v6, v7);
LABEL_4:
    *a2 = 1;
    return;
  }
  if ((objc_msgSend(a1, sel_isFinished) & 1) != 0)
    goto LABEL_4;
  if (a3)
  {
    swift_getErrorValue();
    v8 = a3;
    v9._countAndFlagsBits = sub_1BCAB6810();
    v10._countAndFlagsBits = 0;
    v10._object = (void *)0xE000000000000000;
    NSOperation.logErrorString(_:withInfo:)(v9, v10);
    swift_bridgeObjectRelease();

  }
}

uint64_t sub_1BCA2D5D0(uint64_t a1)
{
  id v1;
  uint64_t v2;
  void *v3;
  void *v4;
  Swift::String v5;
  Swift::String v6;

  v1 = objc_msgSend(*(id *)(a1 + qword_1ED6C5E78), sel_identifier);
  v2 = sub_1BCAB5F04();
  v4 = v3;

  v5._countAndFlagsBits = 0x64656873696E6966;
  v5._object = (void *)0xE800000000000000;
  v6._countAndFlagsBits = v2;
  v6._object = v4;
  NSOperation.logLifeCycleEvent(_:withPrivateInfo:)(v5, v6);
  return swift_bridgeObjectRelease();
}

void sub_1BCA2D64C()
{
  sub_1BCAB64C8();
  swift_bridgeObjectRelease();
  sub_1BCAB65C4();
  __break(1u);
}

id MostRecentSampleQueryOperationCore.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void MostRecentSampleQueryOperationCore.init()()
{
  sub_1BCA2DD60();
}

void sub_1BCA2D70C()
{
  sub_1BCA2DD60();
}

void sub_1BCA2D734()
{
  uint64_t v0;

}

id MostRecentSampleQueryOperationCore.__deallocating_deinit()
{
  return sub_1BCA2DAB4(&class metadata base offset for MostRecentSampleQueryOperationCore, (uint64_t (*)(_QWORD, _QWORD, _QWORD))type metadata accessor for MostRecentSampleQueryOperationCore);
}

void sub_1BCA2D794(uint64_t a1)
{

}

uint64_t sub_1BCA2D7EC()
{
  uint64_t v1;

  swift_retain();
  sub_1BCAB5070();
  swift_release();
  return v1;
}

uint64_t sub_1BCA2D838(void *a1)
{
  swift_retain();
  sub_1BCAB507C();
  sub_1BC9B39B4(a1);
  return swift_release();
}

id MostRecentSampleQueryOperation.init(sampleType:predicate:name:queryQualityOfService:healthStore:resultHandler:)(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8)
{
  id v8;

  v8 = sub_1BCA2DB78(a1, a2, a3, a4, a5, a6, a7, a8);
  swift_release();
  return v8;
}

void sub_1BCA2D904()
{
  void *v0;
  void *v1;
  _BYTE *v2;

  if (objc_msgSend(v0, sel_isCancelled))
  {
    sub_1BC9A7EA4();
    v1 = (void *)swift_allocError();
    *v2 = 3;
    sub_1BCA2D838(v1);
  }
  sub_1BCA2CFD4();
}

void sub_1BCA2D954(void *a1, id a2)
{
  uint64_t v2;
  id v4;
  id v5;
  uint64_t v7;
  id v8;
  void (*v9)(void *, _QWORD);
  void *v10;
  char v11;

  if (a2)
  {
    v4 = a2;
    v5 = a2;
  }
  else
  {
    if (a1)
    {
      v7 = swift_dynamicCastUnknownClass();
      if (v7)
        v8 = a1;
    }
    else
    {
      v7 = 0;
    }
    v5 = (id)v7;
  }
  sub_1BCA2D838(v5);
  v9 = *(void (**)(void *, _QWORD))(v2 + qword_1ED6C5DE0);
  v10 = (void *)sub_1BCA2D7EC();
  v9(v10, v11 & 1);
  sub_1BC9B39B4(v10);
}

void MostRecentSampleQueryOperation.__allocating_init(sampleType:predicate:name:queryQualityOfService:healthStore:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void MostRecentSampleQueryOperation.init(sampleType:predicate:name:queryQualityOfService:healthStore:)()
{
  sub_1BCA2DD8C();
}

uint64_t sub_1BCA2DA70()
{
  swift_release();
  return swift_release();
}

id MostRecentSampleQueryOperation.__deallocating_deinit()
{
  return sub_1BCA2DAB4(&class metadata base offset for MostRecentSampleQueryOperation, (uint64_t (*)(_QWORD, _QWORD, _QWORD))type metadata accessor for MostRecentSampleQueryOperation);
}

id sub_1BCA2DAB4(_QWORD *a1, uint64_t (*a2)(_QWORD, _QWORD, _QWORD))
{
  _QWORD *v2;
  _QWORD *v3;
  objc_class *v4;
  objc_super v6;

  v3 = (_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v2) + *a1);
  v4 = (objc_class *)a2(0, *v3, v3[1]);
  v6.receiver = v2;
  v6.super_class = v4;
  return objc_msgSendSuper2(&v6, sel_dealloc);
}

uint64_t sub_1BCA2DB0C()
{
  swift_release();
  return swift_release();
}

uint64_t sub_1BCA2DB48@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;

  result = sub_1BCA2D7EC();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return result;
}

id sub_1BCA2DB78(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8)
{
  char *v8;
  uint64_t v15;
  _BYTE *v16;
  char *v17;
  char *v18;

  v15 = qword_1ED6C5DE8;
  sub_1BCAB6384();
  sub_1BC9AE2A0();
  sub_1BCAB68A0();
  sub_1BCAB5088();
  sub_1BC9A7EA4();
  swift_allocError();
  *v16 = 0;
  v17 = v8;
  *(_QWORD *)&v8[v15] = sub_1BCAB5094();
  v18 = &v17[qword_1ED6C5DE0];
  *(_QWORD *)v18 = a7;
  *((_QWORD *)v18 + 1) = a8;
  swift_retain();

  return MostRecentSampleQueryOperationCore.init(sampleType:predicate:name:queryQualityOfService:healthStore:)(a1, a2, a3, a4, a5, a6);
}

id sub_1BCA2DCB8(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  id v17;

  v17 = objc_allocWithZone((Class)type metadata accessor for MostRecentSampleQueryOperation(0, *(_QWORD *)(v8 + class metadata base offset for MostRecentSampleQueryOperation), *(_QWORD *)(v8 + class metadata base offset for MostRecentSampleQueryOperation + 8), a4));
  return sub_1BCA2DB78(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t type metadata accessor for MostRecentSampleQueryOperationCore(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for MostRecentSampleQueryOperationCore);
}

void sub_1BCA2DD60()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void sub_1BCA2DD8C()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t type metadata accessor for MostRecentSampleQueryOperation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for MostRecentSampleQueryOperation);
}

uint64_t sub_1BCA2DDC4@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;

  result = sub_1BCA2D7EC();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_1BCA2DDF4(id *a1)
{
  id v1;

  v1 = *a1;
  sub_1BC9F3F44(*a1);
  return sub_1BCA2D838(v1);
}

uint64_t sub_1BCA2DE38()
{
  return 16;
}

__n128 sub_1BCA2DE44(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1BCA2DE50()
{
  return swift_initClassMetadata2();
}

uint64_t method lookup function for MostRecentSampleQueryOperationCore()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of MostRecentSampleQueryOperationCore.__allocating_init(sampleType:predicate:name:queryQualityOfService:healthStore:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(class metadata base offset for MostRecentSampleQueryOperationCore + v0 + 80))();
}

uint64_t dispatch thunk of MostRecentSampleQueryOperationCore.queryDidFinish(sample:error:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))(class metadata base offset for MostRecentSampleQueryOperationCore
                              + (*MEMORY[0x1E0DEEDD8] & *v0)
                              + 96))();
}

uint64_t sub_1BCA2DF0C()
{
  return swift_initClassMetadata2();
}

uint64_t method lookup function for MostRecentSampleQueryOperation()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of MostRecentSampleQueryOperation.result.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))(class metadata base offset for MostRecentSampleQueryOperation
                              + (*MEMORY[0x1E0DEEDD8] & *v0)
                              + 56))();
}

uint64_t dispatch thunk of MostRecentSampleQueryOperation.__allocating_init(sampleType:predicate:name:queryQualityOfService:healthStore:resultHandler:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(class metadata base offset for MostRecentSampleQueryOperation + v0 + 80))();
}

unint64_t sub_1BCA2DFCC()
{
  unint64_t result;

  result = qword_1ED6C7268;
  if (!qword_1ED6C7268)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1ED6C7268);
  }
  return result;
}

uint64_t sub_1BCA2E008(unint64_t *a1, unint64_t *a2, void (*a3)(uint64_t))
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    sub_1BCA2E088(255, a2, a3);
    result = MEMORY[0x1BCCFBE84](MEMORY[0x1E0DEAF38], v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1BCA2E048()
{
  id *v0;

  return swift_deallocObject();
}

uint64_t sub_1BCA2E07C()
{
  uint64_t v0;

  return sub_1BCA2D414(*(_QWORD **)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

void sub_1BCA2E088(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    v4 = sub_1BCAB6060();
    if (!v5)
      atomic_store(v4, a2);
  }
}

void sub_1BCA2E0D4()
{
  uint64_t v0;

  sub_1BCA2D4E4(*(void **)(v0 + 16), *(_BYTE **)(v0 + 24), *(void **)(v0 + 32));
}

uint64_t sub_1BCA2E0E0()
{
  uint64_t v0;

  return sub_1BCA2D5D0(*(_QWORD *)(v0 + 16));
}

id sub_1BCA2E0E8(uint64_t a1)
{
  uint64_t v1;
  void *v3;
  char v4;

  v3 = *(void **)(v1 + 32);
  v4 = *(_BYTE *)(v1 + 40);
  sub_1BC9B39B4(*(id *)a1);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  return sub_1BC9F3F44(v3);
}

uint64_t sub_1BCA2E130()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_1BCA2E154(void *a1, void *a2)
{
  return sub_1BCA2D09C(a1, a2);
}

uint64_t Calendar.lastWeekday.getter()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;
  BOOL v3;
  uint64_t v4;

  v0 = *(_QWORD *)(sub_1BCAB4EE4() + 16);
  swift_bridgeObjectRelease();
  result = sub_1BCAB4EB4();
  v2 = result - 1;
  if (__OFSUB__(result, 1))
  {
    __break(1u);
    goto LABEL_6;
  }
  v3 = __OFADD__(v2, v0 - 1);
  v4 = v2 + v0 - 1;
  if (v3)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v0)
    return v4 % v0 + 1;
LABEL_7:
  __break(1u);
  return result;
}

uint64_t Calendar.Component.rawValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __n128 v3;
  uint64_t v4;
  char *v5;
  int v6;
  uint64_t result;
  uint64_t v8;

  v1 = sub_1BCAB4F68();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = MEMORY[0x1E0C80A78](v1);
  v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v2 + 16))(v5, v0, v1, v3);
  v6 = (*(uint64_t (**)(char *, uint64_t))(v2 + 88))(v5, v1);
  if (v6 == *MEMORY[0x1E0CB1138])
    return 2;
  if (v6 == *MEMORY[0x1E0CB1158])
    return 14;
  if (v6 == *MEMORY[0x1E0CB1160])
    return 5;
  if (v6 == *MEMORY[0x1E0CB1130])
    return 1;
  if (v6 == *MEMORY[0x1E0CB1140])
    return 3;
  if (v6 == *MEMORY[0x1E0CB1178])
    return 4;
  if (v6 == *MEMORY[0x1E0CB1188])
    return 8;
  if (v6 == *MEMORY[0x1E0CB1198])
    return 10;
  if (v6 == *MEMORY[0x1E0CB1110])
    return 11;
  if (v6 == *MEMORY[0x1E0CB1190])
    return 7;
  if (v6 == *MEMORY[0x1E0CB1108])
    return 12;
  if (v6 == *MEMORY[0x1E0CB10F8])
    return 13;
  if (v6 == *MEMORY[0x1E0CB1118])
    return 15;
  if (v6 == *MEMORY[0x1E0CB10E8])
    return 6;
  if (v6 == *MEMORY[0x1E0CB11A0])
    return 0;
  if (v6 == *MEMORY[0x1E0CB11A8])
    return 9;
  if (v6 == *MEMORY[0x1E0CB1100])
    return 16;
  result = sub_1BCAB65C4();
  __break(1u);
  return result;
}

uint64_t Calendar.Component.init(rawValue:)@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;

  v4 = sub_1BCAB4F68();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1 >= 0x11)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(v5 + 56))(a2, 1, 1, v4, v6);
  (*(void (**)(char *, _QWORD, uint64_t, __n128))(v5 + 104))(v8, **((unsigned int **)&unk_1E754B690 + a1), v4, v6);
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(a2, v8, v4);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v5 + 56))(a2, 0, 1, v4);
}

uint64_t sub_1BCA2E56C@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return Calendar.Component.init(rawValue:)(*a1, a2);
}

uint64_t sub_1BCA2E574@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = Calendar.Component.rawValue.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1BCA2E598()
{
  sub_1BCA2E640();
  return sub_1BCAB5FF4();
}

uint64_t sub_1BCA2E5F4()
{
  sub_1BCA2E640();
  return sub_1BCAB5FDC();
}

unint64_t sub_1BCA2E640()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EF479868;
  if (!qword_1EF479868)
  {
    v1 = sub_1BCAB4F68();
    result = MEMORY[0x1BCCFBE84](&protocol conformance descriptor for Calendar.Component, v1);
    atomic_store(result, (unint64_t *)&qword_1EF479868);
  }
  return result;
}

HealthVisualization::AudioExposureQueryConfiguration __swiftcall AudioExposureQueryConfiguration.init(statistics:)(HealthVisualization::AudioExposureQueryConfiguration statistics)
{
  uint64_t v1;
  uint64_t v2;
  __int16 v3;

  v2 = *(_QWORD *)(*(_QWORD *)&statistics.statistics.dateRange + 8);
  v3 = *(_WORD *)(*(_QWORD *)&statistics.statistics.dateRange + 16);
  *(_BYTE *)v1 = **(_BYTE **)&statistics.statistics.dateRange;
  *(_QWORD *)(v1 + 8) = v2;
  *(_WORD *)(v1 + 16) = v3;
  return statistics;
}

uint64_t static AudioExposureQueryConfiguration.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  char v4;
  uint64_t v5;
  char v6;
  char v7;
  char v8;
  char v9;
  char v10;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_BYTE *)(a1 + 16);
  v4 = *(_BYTE *)(a1 + 17);
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_BYTE *)a1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1BC9991D8(v6);
  if ((v7 & 1) != 0 && (sub_1BC9A920C(v2, v5) & 1) != 0 && (sub_1BC9993E0(v3), (v8 & 1) != 0))
  {
    sub_1BC9995AC(v4);
    v10 = v9;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v10 & 1) != 0)
      return 1;
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return 0;
}

uint64_t AudioExposureQueryConfiguration.statistics.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  __int16 v3;

  v2 = *(_QWORD *)(v1 + 8);
  v3 = *(_WORD *)(v1 + 16);
  *(_BYTE *)a1 = *(_BYTE *)v1;
  *(_QWORD *)(a1 + 8) = v2;
  *(_WORD *)(a1 + 16) = v3;
  return swift_bridgeObjectRetain();
}

uint64_t sub_1BCA2E790()
{
  return 0x6974736974617473;
}

uint64_t sub_1BCA2E7AC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x6974736974617473 && a2 == 0xEA00000000007363)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_1BCAB67C8();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_1BCA2E84C()
{
  sub_1BCA2E9BC();
  return sub_1BCAB68D0();
}

uint64_t sub_1BCA2E874()
{
  sub_1BCA2E9BC();
  return sub_1BCAB68DC();
}

uint64_t AudioExposureQueryConfiguration.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char v7;
  uint64_t v8;
  __int16 v9;
  uint64_t v11;
  char v12;
  uint64_t v13;
  __int16 v14;

  sub_1BCA2EB4C(0, &qword_1ED6C4790, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED170]);
  v4 = v3;
  v11 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v11 - v5;
  v7 = *v1;
  v8 = *((_QWORD *)v1 + 1);
  v9 = *((_WORD *)v1 + 8);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BCA2E9BC();
  sub_1BCAB68B8();
  v12 = v7;
  v13 = v8;
  v14 = v9;
  sub_1BCA2B4CC();
  sub_1BCAB6774();
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v6, v4);
}

unint64_t sub_1BCA2E9BC()
{
  unint64_t result;

  result = qword_1ED6C6BA0;
  if (!qword_1ED6C6BA0)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCAC4AD4, &type metadata for AudioExposureQueryConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED6C6BA0);
  }
  return result;
}

uint64_t AudioExposureQueryConfiguration.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  __int16 v11;
  _BYTE v13[16];
  uint64_t v14;
  __int16 v15;

  sub_1BCA2EB4C(0, &qword_1ED6C6EF8, MEMORY[0x1E0DED048]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v9 = &v13[-v8];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BCA2E9BC();
  sub_1BCAB68AC();
  if (!v2)
  {
    sub_1BCA2B7D0();
    sub_1BCAB66E4();
    (*(void (**)(_BYTE *, uint64_t))(v7 + 8))(v9, v6);
    v10 = v14;
    v11 = v15;
    *(_BYTE *)a2 = v13[8];
    *(_QWORD *)(a2 + 8) = v10;
    *(_WORD *)(a2 + 16) = v11;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

void sub_1BCA2EB4C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_1BCA2E9BC();
    v7 = a3(a1, &type metadata for AudioExposureQueryConfiguration.CodingKeys, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t sub_1BCA2EBA8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return AudioExposureQueryConfiguration.init(from:)(a1, a2);
}

uint64_t sub_1BCA2EBBC(_QWORD *a1)
{
  return AudioExposureQueryConfiguration.encode(to:)(a1);
}

uint64_t sub_1BCA2EBD0(uint64_t a1, char *a2)
{
  uint64_t v2;
  __int16 v3;
  char v4;
  uint64_t v5;
  __int16 v6;
  char v7;
  _BYTE v9[8];
  uint64_t v10;
  __int16 v11;
  _BYTE v12[8];
  uint64_t v13;
  __int16 v14;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_WORD *)(a1 + 16);
  v4 = *a2;
  v5 = *((_QWORD *)a2 + 1);
  v6 = *((_WORD *)a2 + 8);
  v12[0] = *(_BYTE *)a1;
  v13 = v2;
  v14 = v3;
  v9[0] = v4;
  v10 = v5;
  v11 = v6;
  _s19HealthVisualization28StatisticsQueryConfigurationV2eeoiySbAC_ACtFZ_0((uint64_t)v12, (uint64_t)v9);
  return v7 & 1;
}

ValueMetadata *type metadata accessor for AudioExposureQueryConfiguration()
{
  return &type metadata for AudioExposureQueryConfiguration;
}

uint64_t storeEnumTagSinglePayload for AudioExposureQueryConfiguration.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1BCA2EC78 + 4 * byte_1BCAC4960[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1BCA2EC98 + 4 * byte_1BCAC4965[v4]))();
}

_BYTE *sub_1BCA2EC78(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1BCA2EC98(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1BCA2ECA0(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1BCA2ECA8(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1BCA2ECB0(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1BCA2ECB8(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for AudioExposureQueryConfiguration.CodingKeys()
{
  return &type metadata for AudioExposureQueryConfiguration.CodingKeys;
}

unint64_t sub_1BCA2ECD8()
{
  unint64_t result;

  result = qword_1EF479870;
  if (!qword_1EF479870)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCAC4AAC, &type metadata for AudioExposureQueryConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF479870);
  }
  return result;
}

unint64_t sub_1BCA2ED20()
{
  unint64_t result;

  result = qword_1ED6C6BB0;
  if (!qword_1ED6C6BB0)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCAC4A1C, &type metadata for AudioExposureQueryConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED6C6BB0);
  }
  return result;
}

unint64_t sub_1BCA2ED68()
{
  unint64_t result;

  result = qword_1ED6C6BA8;
  if (!qword_1ED6C6BA8)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCAC4A44, &type metadata for AudioExposureQueryConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED6C6BA8);
  }
  return result;
}

uint64_t static SampleCountQueryConfiguration.== infix(_:_:)()
{
  return 1;
}

uint64_t sub_1BCA2EDB8()
{
  sub_1BCA2EF20();
  return sub_1BCAB68D0();
}

uint64_t sub_1BCA2EDE0()
{
  sub_1BCA2EF20();
  return sub_1BCAB68DC();
}

uint64_t SampleCountQueryConfiguration.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;

  sub_1BCA2EEC8();
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BCA2EF20();
  sub_1BCAB68B8();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

void sub_1BCA2EEC8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED6C4788)
  {
    sub_1BCA2EF20();
    v0 = sub_1BCAB6780();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED6C4788);
  }
}

unint64_t sub_1BCA2EF20()
{
  unint64_t result;

  result = qword_1ED6C42B8;
  if (!qword_1ED6C42B8)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCAC4C2C, &type metadata for SampleCountQueryConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED6C42B8);
  }
  return result;
}

uint64_t SampleCountQueryConfiguration.init(from:)(uint64_t a1)
{
  return __swift_destroy_boxed_opaque_existential_1(a1);
}

uint64_t sub_1BCA2EF88(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;

  sub_1BCA2EEC8();
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BCA2EF20();
  sub_1BCAB68B8();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

ValueMetadata *type metadata accessor for SampleCountQueryConfiguration()
{
  return &type metadata for SampleCountQueryConfiguration;
}

ValueMetadata *type metadata accessor for SampleCountQueryConfiguration.CodingKeys()
{
  return &type metadata for SampleCountQueryConfiguration.CodingKeys;
}

unint64_t sub_1BCA2F06C()
{
  unint64_t result;

  result = qword_1ED6C42C8;
  if (!qword_1ED6C42C8)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCAC4BDC, &type metadata for SampleCountQueryConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED6C42C8);
  }
  return result;
}

unint64_t sub_1BCA2F0B4()
{
  unint64_t result;

  result = qword_1ED6C42C0;
  if (!qword_1ED6C42C0)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCAC4C04, &type metadata for SampleCountQueryConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED6C42C0);
  }
  return result;
}

void sub_1BCA2F0F8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, void *a8, double a9, double a10, double a11, double a12, uint64_t a13)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v20;
  __int16 v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  _UNKNOWN **v27;
  uint64_t v28;
  uint64_t v29;
  CGFloat v30;
  CGFloat v31;
  CGFloat v32;
  CGFloat v33;
  double MinX;
  double MaxX;
  uint64_t v36;
  unint64_t *v37;
  unint64_t *v38;
  __int128 *v39;
  uint64_t v40;
  _UNKNOWN **v41;
  uint64_t v42;
  uint64_t v43;
  CGFloat v44;
  CGFloat v45;
  CGFloat v46;
  CGFloat v47;
  double MinY;
  double MaxY;
  uint64_t v50;
  char v52;
  char v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD v60[3];
  uint64_t v61;
  _UNKNOWN **v62;
  CGRect v63;
  CGRect v64;
  CGRect v65;
  CGRect v66;

  v14 = v13;
  v20 = *a1;
  v21 = *((_WORD *)a1 + 6);
  v22 = *((_DWORD *)a1 + 2);
  *(_OWORD *)(v14 + 16) = 0u;
  *(_OWORD *)(v14 + 32) = 0u;
  *(_OWORD *)(v14 + 48) = 0u;
  *(_QWORD *)(v14 + 64) = v20;
  *(_WORD *)(v14 + 76) = v21;
  *(_DWORD *)(v14 + 72) = v22;
  *(double *)(v14 + 80) = a9;
  *(double *)(v14 + 88) = a10;
  *(double *)(v14 + 96) = a11;
  *(double *)(v14 + 104) = a12;
  sub_1BCA31C20(a2, v14 + 112);
  *(_QWORD *)(v14 + 152) = a5;
  *(_QWORD *)(v14 + 160) = a6;
  *(_BYTE *)(v14 + 168) = a7 & 1;
  sub_1BCA31C7C(a13, (uint64_t)&v57);
  if (v58)
  {
    sub_1BC9C42A4(&v57, (uint64_t)v60);
  }
  else
  {
    v23 = type metadata accessor for DiagramAxisMetricsCalculatorFactory();
    v24 = swift_allocObject();
    *(_QWORD *)(v24 + 16) = a8;
    v61 = v23;
    v62 = &protocol witness table for DiagramAxisMetricsCalculatorFactory;
    v60[0] = v24;
    v25 = a8;
    sub_1BCA31D2C((uint64_t)&v57, &qword_1ED6C6058, (unint64_t *)&qword_1ED6C6050);
  }
  if ((v20 & 0xFF00000000) == 0x300000000)
  {

    swift_bridgeObjectRelease();
LABEL_14:
    swift_bridgeObjectRelease();
    v37 = &qword_1ED6C6058;
    v38 = (unint64_t *)&qword_1ED6C6050;
    v39 = (__int128 *)a13;
LABEL_15:
    sub_1BCA31D2C((uint64_t)v39, v37, v38);
LABEL_16:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v60);
    return;
  }
  if ((v20 & 0xFF00000000) == 0x200000000)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v26 = v61;
    v27 = v62;
    __swift_project_boxed_opaque_existential_1(v60, v61);
    v53 = v20;
    v52 = 0;
    ((void (*)(__int128 *__return_ptr, char *, char *, uint64_t, _UNKNOWN **))v27[1])(&v54, &v53, &v52, v26, v27);
    if (v56)
    {
      sub_1BC9C42A4(&v54, (uint64_t)&v57);
      v28 = v58;
      v29 = v59;
      __swift_project_boxed_opaque_existential_1(&v57, v58);
      v30 = *(double *)(v14 + 80);
      v31 = *(double *)(v14 + 88);
      v32 = *(double *)(v14 + 96);
      v33 = *(double *)(v14 + 104);
      v63.origin.x = v30;
      v63.origin.y = v31;
      v63.size.width = v32;
      v63.size.height = v33;
      MinX = CGRectGetMinX(v63);
      v64.origin.x = v30;
      v64.origin.y = v31;
      v64.size.width = v32;
      v64.size.height = v33;
      MaxX = CGRectGetMaxX(v64);
      if (MinX > MaxX)
      {
        __break(1u);
        goto LABEL_22;
      }
      (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t, uint64_t, double, double))(v29 + 8))(&v54, a3, v28, v29, MinX, MaxX);
      swift_bridgeObjectRelease();
      v36 = v55;
      *(_OWORD *)(v14 + 16) = v54;
      *(_QWORD *)(v14 + 32) = v36;
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v57);
    }
    else
    {
      swift_bridgeObjectRelease();
      sub_1BCA31D2C((uint64_t)&v54, &qword_1EF479878, &qword_1ED6C5718);
    }
  }
  if ((v22 & 0xFF000000) == 0x2000000)
  {

    goto LABEL_14;
  }
  v40 = v61;
  v41 = v62;
  __swift_project_boxed_opaque_existential_1(v60, v61);
  v53 = HIBYTE(v20);
  v52 = 1;
  ((void (*)(__int128 *__return_ptr, char *, char *, uint64_t, _UNKNOWN **))v41[1])(&v54, &v53, &v52, v40, v41);
  if (!v56)
  {

    swift_bridgeObjectRelease();
    sub_1BCA31D2C(a13, &qword_1ED6C6058, (unint64_t *)&qword_1ED6C6050);
    v37 = &qword_1EF479878;
    v38 = &qword_1ED6C5718;
    v39 = &v54;
    goto LABEL_15;
  }
  sub_1BC9C42A4(&v54, (uint64_t)&v57);
  v42 = v58;
  v43 = v59;
  __swift_project_boxed_opaque_existential_1(&v57, v58);
  v44 = *(double *)(v14 + 80);
  v45 = *(double *)(v14 + 88);
  v46 = *(double *)(v14 + 96);
  v47 = *(double *)(v14 + 104);
  v65.origin.x = v44;
  v65.origin.y = v45;
  v65.size.width = v46;
  v65.size.height = v47;
  MinY = CGRectGetMinY(v65);
  v66.origin.x = v44;
  v66.origin.y = v45;
  v66.size.width = v46;
  v66.size.height = v47;
  MaxY = CGRectGetMaxY(v66);
  if (MinY <= MaxY)
  {
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t, uint64_t, double, double))(v43 + 8))(&v54, a4, v42, v43, MinY, MaxY);

    swift_bridgeObjectRelease();
    sub_1BCA31D2C(a13, &qword_1ED6C6058, (unint64_t *)&qword_1ED6C6050);
    v50 = v55;
    *(_OWORD *)(v14 + 40) = v54;
    *(_QWORD *)(v14 + 56) = v50;
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v57);
    goto LABEL_16;
  }
LABEL_22:
  __break(1u);
}

double sub_1BCA2F530()
{
  uint64_t v0;
  uint64_t v1;
  double v2;
  uint64_t v3;
  CGFloat v4;
  double v5;
  CGFloat v6;
  CGFloat v7;
  double v8;
  CGRect v10;
  CGRect v11;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = 0.0;
  if (v1)
    v2 = *(double *)(v0 + 24);
  v3 = *(_QWORD *)(v0 + 40);
  v5 = *(double *)(v0 + 80);
  v4 = *(double *)(v0 + 88);
  v7 = *(double *)(v0 + 96);
  v6 = *(double *)(v0 + 104);
  if (v1)
  {
    if (v2 >= v5)
      v8 = *(double *)(v0 + 80);
    else
      v8 = v2;
    CGRectGetMaxX(*(CGRect *)(v0 + 80));
    if (v3)
      goto LABEL_8;
LABEL_10:
    v11.origin.x = v5;
    v11.origin.y = v4;
    v11.size.width = v7;
    v11.size.height = v6;
    CGRectGetHeight(v11);
    return v8;
  }
  CGRectGetWidth(*(CGRect *)(v0 + 80));
  v8 = v5;
  if (!v3)
    goto LABEL_10;
LABEL_8:
  v10.origin.x = v5;
  v10.origin.y = v4;
  v10.size.width = v7;
  v10.size.height = v6;
  CGRectGetMaxY(v10);
  return v8;
}

void sub_1BCA2F63C()
{
  uint64_t v0;
  void *v1;
  void *v2;

  if ((*(_QWORD *)(v0 + 64) & 0xFE00000000 | 0x100000000) != 0x300000000)
  {
    DiagramConfiguration.TextAttributes.toTextAttributes()();
    v1 = (void *)sub_1BCAB5EE0();
    type metadata accessor for Key(0);
    sub_1BC996948((unint64_t *)&qword_1ED6C68F0, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_1BCABE26C);
    v2 = (void *)sub_1BCAB5E68();
    swift_bridgeObjectRelease();
    objc_msgSend(v1, sel_sizeWithAttributes_, v2);

  }
}

double sub_1BCA2F754()
{
  uint64_t v0;
  uint64_t v1;
  double result;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  double v9;
  double v10;
  double v11;

  v1 = *(_QWORD *)(v0 + 40);
  result = 0.0;
  if (v1)
  {
    v3 = v0;
    if ((unint64_t)*(unsigned __int8 *)(v0 + 68) << 32 != 0x300000000)
    {
      v4 = *(unsigned int *)(v0 + 72) | ((unint64_t)*(unsigned __int16 *)(v0 + 76) << 32);
      if ((*(_DWORD *)(v0 + 72) & 0xFF000000) != 0x2000000)
      {
        swift_bridgeObjectRetain();
        DiagramConfiguration.TextAttributes.toTextAttributes()();
        v5 = sub_1BC99F5E8(v1);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v6 = sub_1BC99F55C(v5);
        v8 = v7;
        swift_bridgeObjectRelease();
        v9 = *(double *)&v6;
        v10 = 0.0;
        if ((v8 & 1) != 0)
          v9 = 0.0;
        v11 = 0.0;
        if ((*(_BYTE *)(v3 + 168) & 1) == 0)
          v11 = *(double *)(v3 + 152);
        if ((v4 & 0xFF00000000) == 0)
          v10 = 7.0;
        return v10 + v9 + 2.0 + v11;
      }
    }
  }
  return result;
}

uint64_t sub_1BCA2F854(uint64_t result, uint64_t *a2, double a3, double a4)
{
  uint64_t v4;
  uint64_t v5;
  CGContext *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v18;
  double v19;
  uint64_t v20;
  __int128 v21;
  _BYTE v22[3];
  char v23;
  char v24;
  char v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v5 = *(_QWORD *)(v4 + 64);
  if ((v5 & 0xFF00000000) != 0x300000000)
  {
    v7 = (CGContext *)result;
    v8 = *a2;
    v9 = a2[1];
    v10 = a2[2];
    v11 = a2[3];
    v12 = a2[4];
    v13 = a2[5];
    v14 = a2[6];
    v15 = *(unsigned int *)(v4 + 72) | ((unint64_t)*(unsigned __int16 *)(v4 + 76) << 32);
    if ((v5 & 0xFF00000000) != 0x200000000)
    {
      v16 = *(_QWORD *)(v4 + 16);
      if (v16)
      {
        v27 = *a2;
        v28 = v9;
        v29 = v10;
        v30 = v11;
        v31 = v12;
        v32 = v13;
        v33 = v14;
        *(_WORD *)v22 = v5;
        v22[2] = BYTE2(v5);
        v23 = BYTE3(v5);
        v24 = BYTE4(v5) & 1;
        v25 = BYTE5(v5);
        v26 = BYTE6(v5);
        v20 = v16;
        v21 = *(_OWORD *)(v4 + 24);
        swift_bridgeObjectRetain();
        sub_1BCA2F9FC(v7, (double *)&v27, v22, (CGFloat *)&v20, a3);
        result = swift_bridgeObjectRelease();
      }
    }
    if ((v15 & 0xFF000000) != 0x2000000)
    {
      v18 = *(_QWORD *)(v4 + 40);
      if (v18)
      {
        v27 = v8;
        v28 = v9;
        v29 = v10;
        v30 = v11;
        v31 = v12;
        v32 = v13;
        v33 = v14;
        v22[0] = HIBYTE(v5);
        *(_WORD *)&v22[1] = v15;
        v23 = BYTE2(v15);
        v24 = BYTE3(v15) & 1;
        v25 = BYTE4(v15);
        v26 = BYTE5(v15);
        v20 = v18;
        v21 = *(_OWORD *)(v4 + 48);
        swift_bridgeObjectRetain();
        sub_1BCA304A4(v7, (double *)&v27, v22, &v20, v19, a4);
        return swift_bridgeObjectRelease();
      }
    }
  }
  return result;
}

void sub_1BCA2F9FC(CGContext *a1, double *a2, unsigned __int8 *a3, CGFloat *a4, double a5)
{
  uint64_t v5;
  CGFloat v8;
  CGFloat v9;
  CGFloat v10;
  CGFloat v11;
  CGFloat v12;
  CGFloat v13;
  unsigned __int8 v14;
  unsigned __int8 v15;
  uint64_t v16;
  int v17;
  CGFloat v18;
  double v19;
  double y;
  float v21;
  float v22;
  float v23;
  const CGPath *Mutable;
  CGFloat a;
  unint64_t v26;
  double *v27;
  CGFloat v28;
  CGFloat v29;
  CGFloat v30;
  CGFloat v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  double v35;
  void *v36;
  void *v37;
  double v38;
  double v39;
  double v40;
  CGFloat v41;
  double v42;
  double v43;
  double v44;
  double v45;
  uint64_t v46;
  double v47;
  CGFloat v48;
  CGFloat v49;
  CGFloat v50;
  CGFloat v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  _QWORD *v55;
  BOOL v56;
  void *v57;
  void *v58;
  unint64_t v59;
  unint64_t v60;
  double *v61;
  double v62;
  Class isa;
  CGColor *v64;
  unsigned __int8 v65;
  CGContext *c;
  int v67;
  char v68;
  uint64_t v69;
  double v70;
  double v71;
  double v72;
  double v73;
  const CGPath *v74;
  CGFloat v75;
  char v76;
  uint64_t v77;
  uint64_t v78;
  CGFloat v79;
  CGFloat v80;
  double rect1;
  CGAffineTransform v82;
  CGAffineTransform v83;
  CGPoint v84;
  CGPoint v85;
  CGRect v86;
  CGRect v87;
  CGRect v88;

  v8 = a2[1];
  v9 = a2[2];
  v10 = a2[3];
  v11 = a2[4];
  v12 = a2[5];
  v13 = a2[6];
  v69 = *a3;
  v14 = a3[1];
  v15 = a3[3];
  v67 = a3[4];
  v16 = (char)a3[5];
  v17 = (char)a3[6];
  v18 = *a4;
  sub_1BCA2F530();
  v83.a = v8;
  v83.b = v9;
  v70 = v11;
  v71 = v10;
  v83.c = v10;
  v83.d = v11;
  v79 = v13;
  v80 = v12;
  v83.tx = v12;
  v83.ty = v13;
  v19 = 0.0;
  v84.x = 0.0;
  y = CGPointApplyAffineTransform(v84, &v83).y;
  if ((*(_BYTE *)(v5 + 168) & 1) == 0)
    v19 = *(double *)(v5 + 160);
  if ((_DWORD)v16 && v16 != 1)
    v76 = 1;
  else
    v76 = sub_1BCAB67C8();
  swift_bridgeObjectRelease();
  v72 = v9;
  v73 = v8;
  if (v17 && v17 != 1)
    v68 = 1;
  else
    v68 = sub_1BCAB67C8();
  swift_bridgeObjectRelease();
  v21 = -2.0;
  if (v67)
    v21 = -1.0;
  v22 = flt_1BCAC4CD4[v16] + v21;
  if (v22 < 0.0)
    v23 = 0.0;
  else
    v23 = v22 * 0.5;
  LOBYTE(v83.a) = v14;
  DiagramConfiguration.TextAttributes.toTextAttributes()();
  Mutable = CGPathCreateMutable();
  v83.a = v18;
  swift_bridgeObjectRetain_n();
  sub_1BCA30AD0((uint64_t *)&v83);
  v65 = v15;
  c = a1;
  swift_bridgeObjectRelease();
  a = v83.a;
  v78 = *(_QWORD *)(*(_QWORD *)&v83.a + 16);
  if (v78)
  {
    v74 = Mutable;
    v26 = 0;
    v77 = *(_QWORD *)&v83.a + 32;
    v27 = (double *)MEMORY[0x1E0DEE9D8];
    rect1 = y + v19 + v23 + 2.0;
    v75 = v83.a;
    v29 = v72;
    v28 = v8;
    v31 = v70;
    v30 = v71;
    while (1)
    {
      if (v26 >= *(_QWORD *)(*(_QWORD *)&a + 16))
        goto LABEL_55;
      v32 = v77 + 40 * v26;
      v33 = *(_QWORD *)(v32 + 8);
      v34 = *(_QWORD *)(v32 + 24);
      v85.x = *(CGFloat *)(v32 + 16);
      v82.a = v28;
      v82.b = v29;
      v82.c = v30;
      v82.d = v31;
      v82.tx = v80;
      v82.ty = v79;
      v85.y = 0.0;
      *(_QWORD *)&v35 = *(_OWORD *)&CGPointApplyAffineTransform(v85, &v82);
      if (v34 < 2)
        break;
      if (v34 != 2)
        goto LABEL_56;
      if ((v68 & 1) != 0)
        goto LABEL_26;
      v83.b = 0.0;
      v83.c = 0.0;
      v83.a = 1.0;
      v83.d = 1.0;
      v83.tx = 0.0;
      v83.ty = 0.0;
      swift_bridgeObjectRetain();
      sub_1BCAB61E0();
      sub_1BCAB61F8();
      if (!v33)
        goto LABEL_19;
LABEL_29:
      v36 = (void *)sub_1BCAB5EE0();
      type metadata accessor for Key(0);
      sub_1BC996948((unint64_t *)&qword_1ED6C68F0, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_1BCABE26C);
      v37 = (void *)sub_1BCAB5E68();
      objc_msgSend(v36, sel_sizeWithAttributes_, v37);
      v39 = v38;
      v41 = v40;

      v42 = v35 - v39 * 0.5;
      v43 = v35 + v39 * 0.5;
      if (v42 >= 0.0)
      {
        v44 = 0.0;
        if (v43 > a5)
LABEL_33:
          v44 = a5 - v43;
      }
      else
      {
        if (v43 > a5)
          goto LABEL_33;
        v44 = 0.0 - v42;
      }
      v45 = v42 + v44;
      v46 = *((_QWORD *)v27 + 2);
      if (!v46)
        goto LABEL_42;
      v47 = a5;
      v49 = v27[4];
      v48 = v27[5];
      v51 = v27[6];
      v50 = v27[7];
      swift_bridgeObjectRetain();
      v86.origin.x = v45;
      v86.origin.y = rect1;
      v86.size.width = v39;
      v86.size.height = v41;
      v88.origin.x = v49;
      v88.origin.y = v48;
      v88.size.width = v51;
      v88.size.height = v50;
      if (!CGRectIntersectsRect(v86, v88))
      {
        v52 = 0;
        v53 = v27 + 11;
        v54 = v46 - 1;
        while (v54 != v52)
        {
          if ((unint64_t)++v52 >= *((_QWORD *)v27 + 2))
          {
            __break(1u);
LABEL_55:
            __break(1u);
LABEL_56:
            sub_1BCAB65C4();
            __break(1u);
            swift_release();
            __break(1u);
            JUMPOUT(0x1BCA30464);
          }
          v55 = v53 + 4;
          v87.origin.x = v45;
          v87.origin.y = rect1;
          v87.size.width = v39;
          v87.size.height = v41;
          v56 = CGRectIntersectsRect(v87, *(CGRect *)(v53 - 3));
          v53 = v55;
          if (v56)
            goto LABEL_18;
        }
        swift_bridgeObjectRelease();
        a5 = v47;
        v29 = v72;
        v28 = v73;
        v31 = v70;
        v30 = v71;
LABEL_42:
        v57 = (void *)sub_1BCAB5EE0();
        swift_bridgeObjectRelease();
        v58 = (void *)sub_1BCAB5E68();
        objc_msgSend(v57, sel_drawAtPoint_withAttributes_, v58, v45, rect1);

        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v27 = (double *)sub_1BC9D96E8(0, *((_QWORD *)v27 + 2) + 1, 1, v27);
        a = v75;
        v60 = *((_QWORD *)v27 + 2);
        v59 = *((_QWORD *)v27 + 3);
        if (v60 >= v59 >> 1)
          v27 = (double *)sub_1BC9D96E8((_QWORD *)(v59 > 1), v60 + 1, 1, v27);
        *((_QWORD *)v27 + 2) = v60 + 1;
        v61 = &v27[4 * v60];
        v61[4] = v45;
        v61[5] = rect1;
        v61[6] = v39;
        v61[7] = v41;

        goto LABEL_19;
      }
LABEL_18:

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      a5 = v47;
      v29 = v72;
      v28 = v73;
      v31 = v70;
      v30 = v71;
      a = v75;
LABEL_19:
      if (++v26 == v78)
      {
        swift_release();
        Mutable = v74;
        goto LABEL_49;
      }
    }
    if ((v76 & 1) == 0)
      __asm { BR              X8 }
LABEL_26:
    swift_bridgeObjectRetain();
    if (!v33)
      goto LABEL_19;
    goto LABEL_29;
  }
  swift_release();
LABEL_49:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!CGPathIsEmpty(Mutable))
  {
    CGContextSetBlendMode(c, kCGBlendModeNormal);
    CGContextSetLineCap(c, kCGLineCapRound);
    v62 = 2.0;
    if (v67)
      v62 = 1.0;
    CGContextSetLineWidth(c, v62);
    LOBYTE(v82.a) = v65;
    isa = DiagramConfiguration.Color.toColor()().super.isa;
    v64 = (CGColor *)-[objc_class CGColor](isa, sel_CGColor);

    CGContextSetStrokeColorWithColor(c, v64);
    CGContextAddPath(c, Mutable);
    CGContextStrokePath(c);
  }

}

void sub_1BCA304A4(CGContext *a1, double *a2, _BYTE *a3, uint64_t *a4, double a5, double a6)
{
  uint64_t v6;
  CGFloat v7;
  CGFloat v8;
  CGFloat v9;
  CGFloat v10;
  CGFloat v11;
  CGFloat v12;
  char v13;
  uint64_t v14;
  int v15;
  double v16;
  double v17;
  float v18;
  const CGPath *Mutable;
  uint64_t v20;
  float v21;
  float v22;
  double v23;
  unint64_t *v24;
  double v25;
  void *v26;
  void *v27;
  uint64_t v28;
  unint64_t v29;
  double y;
  void *v31;
  void *v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  Class isa;
  CGColor *v42;
  char v43;
  int v45;
  uint64_t v46;
  char v47;
  char v48;
  CGFloat v50;
  CGFloat v51;
  CGFloat v52;
  CGAffineTransform v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  CGAffineTransform v60;
  CGPoint v61;
  CGPoint v62;

  v7 = a2[1];
  v8 = a2[2];
  v10 = a2[3];
  v9 = a2[4];
  v11 = a2[5];
  v12 = a2[6];
  v13 = a3[1];
  v43 = a3[3];
  v45 = a3[4];
  v14 = (char)a3[5];
  v15 = (char)a3[6];
  v46 = *a4;
  v61.x = sub_1BCA2F530();
  v51 = v8;
  v52 = v7;
  v60.a = v7;
  v60.b = v8;
  v50 = v10;
  v60.c = v10;
  v60.d = v9;
  v60.tx = v11;
  v60.ty = v12;
  v16 = 0.0;
  v61.y = 0.0;
  *(_QWORD *)&v17 = *(_OWORD *)&CGPointApplyAffineTransform(v61, &v60);
  if ((*(_BYTE *)(v6 + 168) & 1) == 0)
    v16 = *(double *)(v6 + 152);
  if ((_DWORD)v14 && v14 != 1)
    v48 = 1;
  else
    v48 = sub_1BCAB67C8();
  swift_bridgeObjectRelease();
  if (v15 && v15 != 1)
    v47 = 1;
  else
    v47 = sub_1BCAB67C8();
  swift_bridgeObjectRelease();
  v18 = flt_1BCAC4CD4[v14];
  LOBYTE(v60.a) = v13;
  DiagramConfiguration.TextAttributes.toTextAttributes()();
  Mutable = CGPathCreateMutable();
  v20 = *(_QWORD *)(v46 + 16);
  if (!v20)
    goto LABEL_36;
  v21 = -2.0;
  if (v45)
    v21 = -1.0;
  v22 = (float)(v18 + v21) * 0.5;
  if ((float)(v18 + v21) < 0.0)
    v22 = 0.0;
  v23 = v17 - v16 - v22 + -2.0;
  v24 = (unint64_t *)(swift_bridgeObjectRetain() + 56);
  do
  {
    v28 = *(v24 - 2);
    v29 = *v24;
    *(_QWORD *)&v62.y = *(v24 - 1);
    v53.a = v52;
    v53.b = v51;
    v53.c = v50;
    v53.d = v9;
    v53.tx = v11;
    v53.ty = v12;
    v62.x = 0.0;
    y = CGPointApplyAffineTransform(v62, &v53).y;
    if (v29 >= 2)
    {
      if (v29 != 2)
      {
        sub_1BCAB65C4();
        __break(1u);
        return;
      }
      if ((v47 & 1) != 0)
      {
LABEL_26:
        swift_bridgeObjectRetain();
        if (v28)
          goto LABEL_30;
        goto LABEL_19;
      }
      v60.b = 0.0;
      v60.c = 0.0;
      v60.a = 1.0;
      v60.d = 1.0;
      v60.tx = 0.0;
      v60.ty = 0.0;
      swift_bridgeObjectRetain();
      sub_1BCAB61E0();
    }
    else
    {
      if ((v48 & 1) != 0)
        goto LABEL_26;
      v55 = 0;
      v56 = 0;
      v54 = 0x3FF0000000000000;
      v57 = 0x3FF0000000000000;
      v58 = 0;
      v59 = 0;
      swift_bridgeObjectRetain();
      sub_1BCAB61E0();
    }
    sub_1BCAB61F8();
    if (v28)
    {
LABEL_30:
      v31 = (void *)sub_1BCAB5EE0();
      type metadata accessor for Key(0);
      sub_1BC996948((unint64_t *)&qword_1ED6C68F0, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_1BCABE26C);
      v32 = (void *)sub_1BCAB5E68();
      objc_msgSend(v31, sel_sizeWithAttributes_, v32);
      v34 = v33;
      v36 = v35;

      v37 = v36 * 0.5;
      v38 = y - v36 * 0.5;
      v39 = y + v37;
      if (v38 >= 0.0)
      {
        v25 = 0.0;
        if (v39 > a6)
          goto LABEL_34;
      }
      else if (v39 <= a6)
      {
        v25 = 0.0 - v38;
      }
      else
      {
LABEL_34:
        v25 = a6 - v39;
      }
      v26 = (void *)sub_1BCAB5EE0();
      swift_bridgeObjectRelease();
      v27 = (void *)sub_1BCAB5E68();
      objc_msgSend(v26, sel_drawAtPoint_withAttributes_, v27, v23 - v34, v38 + v25);

    }
LABEL_19:
    v24 += 5;
    --v20;
  }
  while (v20);
  swift_bridgeObjectRelease();
LABEL_36:
  swift_bridgeObjectRelease();
  if (!CGPathIsEmpty(Mutable))
  {
    CGContextSetBlendMode(a1, kCGBlendModeNormal);
    CGContextSetLineCap(a1, kCGLineCapRound);
    v40 = 2.0;
    if (v45)
      v40 = 1.0;
    CGContextSetLineWidth(a1, v40);
    LOBYTE(v53.a) = v43;
    isa = DiagramConfiguration.Color.toColor()().super.isa;
    v42 = (CGColor *)-[objc_class CGColor](isa, sel_CGColor);

    CGContextSetStrokeColorWithColor(a1, v42);
    CGContextAddPath(a1, Mutable);
    CGContextStrokePath(a1);
  }

}

uint64_t DiagramAxis.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t DiagramAxis.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for DiagramAxis()
{
  return objc_opt_self();
}

uint64_t method lookup function for DiagramAxis()
{
  return swift_lookUpClassMethod();
}

uint64_t sub_1BCA30AD0(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_1BCA31BD0(v2);
  v3 = *(_QWORD *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  result = sub_1BCA30B38(v5);
  *a1 = v2;
  return result;
}

uint64_t sub_1BCA30B38(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  float *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  BOOL v55;
  unint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  BOOL v65;
  uint64_t v66;
  char v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  BOOL v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  char *v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  unint64_t v90;
  char *v91;
  uint64_t v92;
  unint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  double *__dst;

  v3 = a1[1];
  result = sub_1BCAB678C();
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_141;
    if (v3)
      return sub_1BCA31328(0, v3, 1, a1);
    return result;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_149;
  v103 = result;
  v100 = a1;
  if (v3 < 2)
  {
    v8 = MEMORY[0x1E0DEE9D8];
    __dst = (double *)(MEMORY[0x1E0DEE9D8] + 32);
    if (v3 != 1)
    {
      v12 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
      v11 = (char *)MEMORY[0x1E0DEE9D8];
LABEL_107:
      v91 = v11;
      v102 = v8;
      if (v12 >= 2)
      {
        v92 = *v100;
        do
        {
          v93 = v12 - 2;
          if (v12 < 2)
            goto LABEL_136;
          if (!v92)
            goto LABEL_148;
          v94 = v91;
          v95 = *(_QWORD *)&v91[16 * v93 + 32];
          v96 = *(_QWORD *)&v91[16 * v12 + 24];
          sub_1BCA31470((char *)(v92 + 40 * v95), (double *)(v92 + 40 * *(_QWORD *)&v91[16 * v12 + 16]), (char *)(v92 + 40 * v96), __dst);
          if (v1)
            break;
          if (v96 < v95)
            goto LABEL_137;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v94 = sub_1BCA31BBC((uint64_t)v94);
          if (v93 >= *((_QWORD *)v94 + 2))
            goto LABEL_138;
          v97 = &v94[16 * v93 + 32];
          *(_QWORD *)v97 = v95;
          *((_QWORD *)v97 + 1) = v96;
          v98 = *((_QWORD *)v94 + 2);
          if (v12 > v98)
            goto LABEL_139;
          memmove(&v94[16 * v12 + 16], &v94[16 * v12 + 32], 16 * (v98 - v12));
          v91 = v94;
          *((_QWORD *)v94 + 2) = v98 - 1;
          v12 = v98 - 1;
        }
        while (v98 > 2);
      }
LABEL_104:
      swift_bridgeObjectRelease();
      *(_QWORD *)(v102 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    v102 = MEMORY[0x1E0DEE9D8];
  }
  else
  {
    v6 = v5 >> 1;
    v7 = sub_1BCAB6048();
    *(_QWORD *)(v7 + 16) = v6;
    v102 = v7;
    __dst = (double *)(v7 + 32);
  }
  v9 = 0;
  v10 = *a1;
  v101 = *a1 + 112;
  v99 = *a1 - 40;
  v11 = (char *)MEMORY[0x1E0DEE9D8];
  v104 = v3;
  v106 = *a1;
  while (1)
  {
    v13 = v9++;
    if (v9 < v3)
    {
      v14 = v10 + 40 * v9;
      v15 = v10 + 40 * v13;
      if (*(float *)(v14 + 32) == *(float *)(v15 + 32))
      {
        v16 = *(double *)(v14 + 16) < *(double *)(v15 + 16);
      }
      else
      {
        type metadata accessor for UILayoutPriority(0);
        sub_1BC996948(&qword_1ED6C4888, (uint64_t (*)(uint64_t))type metadata accessor for UILayoutPriority, MEMORY[0x1E0DC2B90]);
        v16 = sub_1BCAB5EB0();
      }
      v9 = v13 + 2;
      if (v13 + 2 < v3)
      {
        v17 = (float *)(v101 + 40 * v13);
        do
        {
          if (*v17 == *(v17 - 10))
          {
            if (((v16 ^ (*((double *)v17 - 2) < *((double *)v17 - 7))) & 1) != 0)
              goto LABEL_28;
          }
          else
          {
            type metadata accessor for UILayoutPriority(0);
            sub_1BC996948(&qword_1ED6C4888, (uint64_t (*)(uint64_t))type metadata accessor for UILayoutPriority, MEMORY[0x1E0DC2B90]);
            if (((v16 ^ sub_1BCAB5EB0()) & 1) != 0)
              goto LABEL_28;
          }
          ++v9;
          v17 += 10;
        }
        while (v3 != v9);
        v9 = v3;
      }
LABEL_28:
      if ((v16 & 1) != 0)
      {
        if (v9 < v13)
          goto LABEL_142;
        if (v13 < v9)
        {
          v18 = 40 * v9;
          v19 = 40 * v13;
          v20 = v9;
          v21 = v13;
          do
          {
            if (v21 != --v20)
            {
              if (!v10)
                goto LABEL_147;
              v22 = v10 + v19;
              v23 = *(_QWORD *)(v10 + v19 + 16);
              v24 = v10 + v18;
              v25 = *(_QWORD *)(v10 + v19 + 24);
              v26 = *(_DWORD *)(v10 + v19 + 32);
              v27 = *(_OWORD *)(v10 + v19);
              v28 = *(_QWORD *)(v10 + v18 - 8);
              v29 = *(_OWORD *)(v10 + v18 - 24);
              *(_OWORD *)v22 = *(_OWORD *)(v10 + v18 - 40);
              *(_OWORD *)(v22 + 16) = v29;
              *(_QWORD *)(v22 + 32) = v28;
              *(_OWORD *)(v24 - 40) = v27;
              *(_QWORD *)(v24 - 24) = v23;
              *(_QWORD *)(v24 - 16) = v25;
              *(_DWORD *)(v24 - 8) = v26;
            }
            ++v21;
            v18 -= 40;
            v19 += 40;
          }
          while (v21 < v20);
        }
      }
    }
    if (v9 >= v3)
      goto LABEL_56;
    if (__OFSUB__(v9, v13))
      goto LABEL_140;
    if (v9 - v13 >= v103)
      goto LABEL_56;
    if (__OFADD__(v13, v103))
      goto LABEL_143;
    v30 = v13 + v103 >= v3 ? v3 : v13 + v103;
    if (v30 < v13)
      break;
    if (v9 != v30)
    {
      v31 = v99 + 40 * v9;
      v105 = v13;
      do
      {
        v32 = v31;
        do
        {
          if (*(float *)(v32 + 72) == *(float *)(v32 + 32))
          {
            if (*(double *)(v32 + 56) >= *(double *)(v32 + 16))
              break;
          }
          else
          {
            type metadata accessor for UILayoutPriority(0);
            sub_1BC996948(&qword_1ED6C4888, (uint64_t (*)(uint64_t))type metadata accessor for UILayoutPriority, MEMORY[0x1E0DC2B90]);
            if ((sub_1BCAB5EB0() & 1) == 0)
              break;
          }
          if (!v10)
            goto LABEL_145;
          v33 = v32 + 40;
          v34 = *(_QWORD *)(v32 + 56);
          v35 = *(_QWORD *)(v32 + 64);
          v36 = *(_DWORD *)(v32 + 72);
          v37 = *(_OWORD *)(v32 + 40);
          v38 = *(_OWORD *)(v32 + 16);
          *(_OWORD *)(v32 + 40) = *(_OWORD *)v32;
          *(_OWORD *)(v32 + 56) = v38;
          v39 = *(_QWORD *)(v32 + 32);
          *(_OWORD *)v32 = v37;
          *(_QWORD *)(v32 + 16) = v34;
          *(_QWORD *)(v32 + 24) = v35;
          *(_DWORD *)(v32 + 32) = v36;
          v32 -= 40;
          ++v13;
          *(_QWORD *)(v33 + 32) = v39;
        }
        while (v9 != v13);
        ++v9;
        v31 += 40;
        v13 = v105;
      }
      while (v9 != v30);
      v9 = v30;
    }
LABEL_56:
    if (v9 < v13)
      goto LABEL_135;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v11 = sub_1BCA317E4(0, *((_QWORD *)v11 + 2) + 1, 1, v11);
    v41 = *((_QWORD *)v11 + 2);
    v40 = *((_QWORD *)v11 + 3);
    v12 = v41 + 1;
    if (v41 >= v40 >> 1)
      v11 = sub_1BCA317E4((char *)(v40 > 1), v41 + 1, 1, v11);
    *((_QWORD *)v11 + 2) = v12;
    v42 = v11 + 32;
    v43 = &v11[16 * v41 + 32];
    *(_QWORD *)v43 = v13;
    *((_QWORD *)v43 + 1) = v9;
    if (v41)
    {
      v10 = v106;
      while (1)
      {
        v44 = v12 - 1;
        if (v12 >= 4)
        {
          v49 = &v42[16 * v12];
          v50 = *((_QWORD *)v49 - 8);
          v51 = *((_QWORD *)v49 - 7);
          v55 = __OFSUB__(v51, v50);
          v52 = v51 - v50;
          if (v55)
            goto LABEL_124;
          v54 = *((_QWORD *)v49 - 6);
          v53 = *((_QWORD *)v49 - 5);
          v55 = __OFSUB__(v53, v54);
          v47 = v53 - v54;
          v48 = v55;
          if (v55)
            goto LABEL_125;
          v56 = v12 - 2;
          v57 = &v42[16 * v12 - 32];
          v59 = *(_QWORD *)v57;
          v58 = *((_QWORD *)v57 + 1);
          v55 = __OFSUB__(v58, v59);
          v60 = v58 - v59;
          if (v55)
            goto LABEL_127;
          v55 = __OFADD__(v47, v60);
          v61 = v47 + v60;
          if (v55)
            goto LABEL_130;
          if (v61 >= v52)
          {
            v79 = &v42[16 * v44];
            v81 = *(_QWORD *)v79;
            v80 = *((_QWORD *)v79 + 1);
            v55 = __OFSUB__(v80, v81);
            v82 = v80 - v81;
            if (v55)
              goto LABEL_134;
            v72 = v47 < v82;
            goto LABEL_94;
          }
        }
        else
        {
          if (v12 != 3)
          {
            v73 = *((_QWORD *)v11 + 4);
            v74 = *((_QWORD *)v11 + 5);
            v55 = __OFSUB__(v74, v73);
            v66 = v74 - v73;
            v67 = v55;
            goto LABEL_88;
          }
          v46 = *((_QWORD *)v11 + 4);
          v45 = *((_QWORD *)v11 + 5);
          v55 = __OFSUB__(v45, v46);
          v47 = v45 - v46;
          v48 = v55;
        }
        if ((v48 & 1) != 0)
          goto LABEL_126;
        v56 = v12 - 2;
        v62 = &v42[16 * v12 - 32];
        v64 = *(_QWORD *)v62;
        v63 = *((_QWORD *)v62 + 1);
        v65 = __OFSUB__(v63, v64);
        v66 = v63 - v64;
        v67 = v65;
        if (v65)
          goto LABEL_129;
        v68 = &v42[16 * v44];
        v70 = *(_QWORD *)v68;
        v69 = *((_QWORD *)v68 + 1);
        v55 = __OFSUB__(v69, v70);
        v71 = v69 - v70;
        if (v55)
          goto LABEL_132;
        if (__OFADD__(v66, v71))
          goto LABEL_133;
        if (v66 + v71 >= v47)
        {
          v72 = v47 < v71;
LABEL_94:
          if (v72)
            v44 = v56;
          goto LABEL_96;
        }
LABEL_88:
        if ((v67 & 1) != 0)
          goto LABEL_128;
        v75 = &v42[16 * v44];
        v77 = *(_QWORD *)v75;
        v76 = *((_QWORD *)v75 + 1);
        v55 = __OFSUB__(v76, v77);
        v78 = v76 - v77;
        if (v55)
          goto LABEL_131;
        if (v78 < v66)
          goto LABEL_15;
LABEL_96:
        v83 = v44 - 1;
        if (v44 - 1 >= v12)
        {
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
          goto LABEL_144;
        }
        if (!v10)
          goto LABEL_146;
        v84 = v11;
        v85 = v10;
        v86 = &v42[16 * v83];
        v87 = *(_QWORD *)v86;
        v88 = &v42[16 * v44];
        v89 = *((_QWORD *)v88 + 1);
        sub_1BCA31470((char *)(v85 + 40 * *(_QWORD *)v86), (double *)(v85 + 40 * *(_QWORD *)v88), (char *)(v85 + 40 * v89), __dst);
        if (v1)
          goto LABEL_104;
        if (v89 < v87)
          goto LABEL_121;
        if (v44 > *((_QWORD *)v84 + 2))
          goto LABEL_122;
        *(_QWORD *)v86 = v87;
        *(_QWORD *)&v42[16 * v83 + 8] = v89;
        v90 = *((_QWORD *)v84 + 2);
        if (v44 >= v90)
          goto LABEL_123;
        v11 = v84;
        v12 = v90 - 1;
        memmove(&v42[16 * v44], v88 + 16, 16 * (v90 - 1 - v44));
        *((_QWORD *)v84 + 2) = v90 - 1;
        v72 = v90 > 2;
        v10 = v106;
        if (!v72)
          goto LABEL_15;
      }
    }
    v12 = 1;
    v10 = v106;
LABEL_15:
    v3 = v104;
    if (v9 >= v104)
    {
      v8 = v102;
      goto LABEL_107;
    }
  }
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  __break(1u);
LABEL_148:
  __break(1u);
LABEL_149:
  result = sub_1BCAB65B8();
  __break(1u);
  return result;
}

uint64_t sub_1BCA31328(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v18;

  v18 = result;
  if (a3 != a2)
  {
    v4 = a3;
    v5 = *a4;
    v6 = *a4 + 40 * a3 - 40;
    v7 = MEMORY[0x1E0DC2B90];
LABEL_5:
    v8 = v18;
    v9 = v6;
    while (1)
    {
      if (*(float *)(v9 + 72) == *(float *)(v9 + 32))
      {
        if (*(double *)(v9 + 56) >= *(double *)(v9 + 16))
          goto LABEL_4;
      }
      else
      {
        type metadata accessor for UILayoutPriority(0);
        sub_1BC996948(&qword_1ED6C4888, (uint64_t (*)(uint64_t))type metadata accessor for UILayoutPriority, v7);
        result = sub_1BCAB5EB0();
        if ((result & 1) == 0)
          goto LABEL_4;
      }
      if (!v5)
        break;
      v10 = v9 + 40;
      v11 = *(_QWORD *)(v9 + 56);
      v12 = *(_QWORD *)(v9 + 64);
      v13 = *(_DWORD *)(v9 + 72);
      v14 = *(_OWORD *)(v9 + 40);
      v15 = *(_OWORD *)(v9 + 16);
      *(_OWORD *)(v9 + 40) = *(_OWORD *)v9;
      *(_OWORD *)(v9 + 56) = v15;
      v16 = *(_QWORD *)(v9 + 32);
      *(_OWORD *)v9 = v14;
      *(_QWORD *)(v9 + 16) = v11;
      *(_QWORD *)(v9 + 24) = v12;
      *(_DWORD *)(v9 + 32) = v13;
      v9 -= 40;
      ++v8;
      *(_QWORD *)(v10 + 32) = v16;
      if (v4 == v8)
      {
LABEL_4:
        ++v4;
        v6 += 40;
        if (v4 == a2)
          return result;
        goto LABEL_5;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_1BCA31470(char *__src, double *a2, char *a3, double *__dst)
{
  double *v4;
  char *v5;
  char *v6;
  char *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  __int128 v25;
  __int128 v26;
  char v27;
  __int128 v28;
  __int128 v29;
  uint64_t result;
  char *v31;
  double *v32;
  char *v33;

  v4 = __dst;
  v5 = a3;
  v6 = (char *)a2;
  v7 = __src;
  v8 = (char *)a2 - __src;
  v9 = ((char *)a2 - __src) / 40;
  v10 = a3 - (char *)a2;
  v11 = (a3 - (char *)a2) / 40;
  v33 = __src;
  v32 = __dst;
  if (v9 >= v11)
  {
    if (v10 < -39)
      goto LABEL_45;
    v20 = 5 * v11;
    if (__dst != a2 || &a2[v20] <= __dst)
      memmove(__dst, a2, 40 * v11);
    v21 = (char *)&v4[v20];
    v31 = (char *)&v4[v20];
    v33 = v6;
    if (v7 >= v6 || v10 < 40)
    {
LABEL_44:
      sub_1BCA318F0((void **)&v33, (const void **)&v32, &v31);
      return 1;
    }
    v22 = MEMORY[0x1E0DC2B90];
    while (1)
    {
      if (*((float *)v21 - 2) == *((float *)v6 - 2))
      {
        v23 = (unint64_t)(v5 - 40);
        if (*((double *)v21 - 3) < *((double *)v6 - 3))
          goto LABEL_32;
      }
      else
      {
        type metadata accessor for UILayoutPriority(0);
        sub_1BC996948(&qword_1ED6C4888, (uint64_t (*)(uint64_t))type metadata accessor for UILayoutPriority, v22);
        v27 = sub_1BCAB5EB0();
        v23 = (unint64_t)(v5 - 40);
        if ((v27 & 1) != 0)
        {
LABEL_32:
          v24 = v6 - 40;
          if (v5 != v6 || v23 >= (unint64_t)v6)
          {
            v25 = *(_OWORD *)v24;
            v26 = *(_OWORD *)(v6 - 24);
            *(_QWORD *)(v23 + 32) = *((_QWORD *)v6 - 1);
            *(_OWORD *)v23 = v25;
            *(_OWORD *)(v23 + 16) = v26;
          }
          v33 = v6 - 40;
          if (v24 <= v7)
            goto LABEL_44;
          goto LABEL_43;
        }
      }
      v31 = v21 - 40;
      if (v5 < v21 || v23 >= (unint64_t)v21 || v5 != v21)
      {
        v28 = *(_OWORD *)(v21 - 40);
        v29 = *(_OWORD *)(v21 - 24);
        *(_QWORD *)(v23 + 32) = *((_QWORD *)v21 - 1);
        *(_OWORD *)v23 = v28;
        *(_OWORD *)(v23 + 16) = v29;
      }
      v24 = v6;
      v21 -= 40;
      if (v6 <= v7)
        goto LABEL_44;
LABEL_43:
      v6 = v24;
      v5 = (char *)v23;
      if (v21 <= (char *)v4)
        goto LABEL_44;
    }
  }
  if (v8 >= -39)
  {
    v12 = 5 * v9;
    if (__dst != (double *)__src || &__src[v12 * 8] <= (char *)__dst)
      memmove(__dst, __src, v12 * 8);
    v13 = (char *)&v4[v12];
    v31 = (char *)&v4[v12];
    if (v6 < v5 && v8 >= 40)
    {
      v14 = MEMORY[0x1E0DC2B90];
      while (1)
      {
        if (*((float *)v6 + 8) == *((float *)v4 + 8))
        {
          if (*((double *)v6 + 2) >= v4[2])
            goto LABEL_16;
        }
        else
        {
          type metadata accessor for UILayoutPriority(0);
          sub_1BC996948(&qword_1ED6C4888, (uint64_t (*)(uint64_t))type metadata accessor for UILayoutPriority, v14);
          if ((sub_1BCAB5EB0() & 1) == 0)
          {
LABEL_16:
            if (v7 != (char *)v4 || v7 >= (char *)v4 + 40)
            {
              v18 = *(_OWORD *)v4;
              v19 = *((_OWORD *)v4 + 1);
              *((double *)v7 + 4) = v4[4];
              *(_OWORD *)v7 = v18;
              *((_OWORD *)v7 + 1) = v19;
            }
            v32 = v4 + 5;
            v15 = v6;
            v4 += 5;
            goto LABEL_20;
          }
        }
        v15 = v6 + 40;
        if (v7 < v6 || v7 >= v15 || v7 != v6)
        {
          v16 = *(_OWORD *)v6;
          v17 = *((_OWORD *)v6 + 1);
          *((_QWORD *)v7 + 4) = *((_QWORD *)v6 + 4);
          *(_OWORD *)v7 = v16;
          *((_OWORD *)v7 + 1) = v17;
        }
LABEL_20:
        v7 += 40;
        if (v4 < (double *)v13)
        {
          v6 = v15;
          if (v15 < v5)
            continue;
        }
        v33 = v7;
        goto LABEL_44;
      }
    }
    goto LABEL_44;
  }
LABEL_45:
  result = sub_1BCAB6624();
  __break(1u);
  return result;
}

char *sub_1BCA317E4(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_1BC998AB0(0, &qword_1EF4782F8, (uint64_t (*)(uint64_t))sub_1BC9BD3F8, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_1BCA318F0(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  uint64_t v4;
  char *result;
  size_t v6;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  if (v4 <= -40)
  {
    result = (char *)sub_1BCAB6624();
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v6 = 40 * (v4 / 40);
    if (result != v3 || result >= &v3[v6])
      return (char *)memmove(result, v3, v6);
  }
  return result;
}

char *sub_1BCA319A4(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  uint64_t v4;
  char *result;
  uint64_t v6;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  if (v4 <= -40)
  {
    result = (char *)sub_1BCAB6624();
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v6 = v4 / 40;
    if (result != v3 || result >= &v3[40 * v6])
      return (char *)memmove(result, v3, 40 * v6);
  }
  return result;
}

char *sub_1BCA31A5C(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *result;
  uint64_t v7;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  v5 = v4 + 7;
  if (v4 >= 0)
    v5 = *a3 - (_QWORD)v3;
  if (v4 <= -8)
  {
    result = (char *)sub_1BCAB6624();
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v7 = v5 >> 3;
    if (result != v3 || result >= &v3[8 * v7])
      return (char *)memmove(result, v3, 8 * v7);
  }
  return result;
}

char *sub_1BCA31B04(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  uint64_t v4;
  char *result;
  size_t v6;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  if (v4 <= -24)
  {
    result = (char *)sub_1BCAB6624();
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v6 = 24 * (v4 / 24);
    if (result != v3 || result >= &v3[v6])
      return (char *)memmove(result, v3, v6);
  }
  return result;
}

char *sub_1BCA31BBC(uint64_t a1)
{
  return sub_1BCA317E4(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_1BCA31BD0(uint64_t a1)
{
  return sub_1BC9BB18C(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_1BCA31BE4(uint64_t a1)
{
  return sub_1BC9BB5F4(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_1BCA31BF8(uint64_t a1)
{
  return sub_1BC9BB484(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_1BCA31C0C(uint64_t a1)
{
  return sub_1BC9BC5CC(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_1BCA31C20(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1BC998AB0(0, &qword_1ED6C5AF0, (uint64_t (*)(uint64_t))type metadata accessor for UIEdgeInsets, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1BCA31C7C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1BCA31CD8(0, &qword_1ED6C6058, (unint64_t *)&qword_1ED6C6050);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_1BCA31CD8(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    sub_1BC9A7F58(255, a3);
    v4 = sub_1BCAB6384();
    if (!v5)
      atomic_store(v4, a2);
  }
}

uint64_t sub_1BCA31D2C(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  uint64_t v4;

  sub_1BCA31CD8(0, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

void StatisticsCollectionQueryOperation.__allocating_init(sampleType:configuration:configurationOverrides:name:queryQualityOfService:healthStore:environment:resultHandler:)(void *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char *a7, char a8, void (*a9)(char *, char *, uint64_t), uint64_t a10)
{
  objc_class *v10;
  int v17;
  id v18;

  v17 = a8 & 1;
  v18 = objc_allocWithZone(v10);
  StatisticsCollectionQueryOperation.init(sampleType:configuration:configurationOverrides:name:queryQualityOfService:healthStore:environment:resultHandler:)(a1, a2, a3, a4, a5, a6, a7, v17, a9, a10);
}

uint64_t sub_1BCA31E00@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  uint64_t v3;
  char v4;

  swift_retain();
  sub_1BCAB5070();
  result = swift_release();
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  return result;
}

uint64_t sub_1BCA31E5C(id *a1)
{
  id v1;

  v1 = *a1;
  sub_1BC9F3F44(*a1);
  swift_retain();
  sub_1BCAB507C();
  sub_1BC9B39B4(v1);
  return swift_release();
}

uint64_t sub_1BCA31EDC()
{
  uint64_t v1;

  swift_retain();
  sub_1BCAB5070();
  swift_release();
  return v1;
}

id StatisticsCollectionQueryOperation.query.getter()
{
  uint64_t v0;

  return *(id *)(v0 + qword_1ED6D3A98);
}

void StatisticsCollectionQueryOperation.init(sampleType:configuration:configurationOverrides:name:queryQualityOfService:healthStore:environment:resultHandler:)(void *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char *a7, int a8, void (*a9)(char *, char *, uint64_t), uint64_t a10)
{
  char *v10;
  char *v11;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  int v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _BYTE *v63;
  char *v64;
  uint64_t *v65;
  void *v66;
  char *v67;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  id v72;
  uint64_t v73;
  id v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void (*v80)(char *, char *, uint64_t);
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  id v84;
  uint64_t v85;
  unsigned int (*v86)(uint64_t, uint64_t, uint64_t);
  char *v87;
  char *v88;
  void (*v89)(char *, uint64_t, uint64_t);
  char *v90;
  uint64_t v91;
  char *v92;
  void *v93;
  uint64_t v94;
  void (*v95)(char *, uint64_t);
  void *v96;
  void *v97;
  char *v98;
  char *v99;
  void *v100;
  void *v101;
  char *v102;
  char *v103;
  uint64_t v104;
  void *v105;
  uint64_t v106;
  id v107;
  char *v108;
  void *v109;
  int v110;
  uint64_t v111;
  char *v112;
  _QWORD v113[7];
  char *v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  char *v119;
  uint64_t v120;
  char *v121;
  char *v122;
  char *v123;
  char *v124;
  id v125;
  uint64_t v126;
  char *v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  int v132;
  uint64_t v133;
  id v134;
  int v135;
  uint64_t v136;
  char *v137;
  unsigned int (*v138)(uint64_t, uint64_t, uint64_t);
  int v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  void (*v146)(char *, char *, uint64_t);
  uint64_t v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t ConfigurationOverrides;
  char *v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  uint64_t v158;
  uint64_t aBlock;
  uint64_t v160;

  v11 = v10;
  v135 = a8;
  v157 = a7;
  v136 = a6;
  v141 = a5;
  v144 = a4;
  v158 = a3;
  v151 = a10;
  v146 = a9;
  v113[5] = swift_getObjectType();
  v130 = sub_1BCAB54A8();
  v129 = *(_QWORD *)(v130 - 8);
  MEMORY[0x1E0C80A78](v130);
  v127 = (char *)v113 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v126 = v14;
  MEMORY[0x1E0C80A78](v15);
  v128 = (char *)v113 - v16;
  ConfigurationOverrides = type metadata accessor for StatisticsQueryConfigurationOverrides();
  v145 = *(_QWORD *)(ConfigurationOverrides - 8);
  MEMORY[0x1E0C80A78](ConfigurationOverrides);
  v113[3] = (char *)v113 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v117 = sub_1BCAB5514();
  v116 = *(_QWORD *)(v117 - 8);
  MEMORY[0x1E0C80A78](v117);
  v115 = (char *)v113 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_1BCAB4C74();
  v149 = *(_QWORD *)(v19 - 8);
  v150 = v19;
  MEMORY[0x1E0C80A78](v19);
  v153 = (char *)v113 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
  sub_1BC998AB0(0, (unint64_t *)&qword_1ED6C71E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAE5D0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v22);
  v124 = (char *)v113 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v24);
  v123 = (char *)v113 - v25;
  MEMORY[0x1E0C80A78](v26);
  v148 = (char *)v113 - v27;
  MEMORY[0x1E0C80A78](v28);
  v113[2] = (char *)v113 - v29;
  MEMORY[0x1E0C80A78](v30);
  v113[1] = (char *)v113 - v31;
  MEMORY[0x1E0C80A78](v32);
  v120 = (uint64_t)v113 - v33;
  MEMORY[0x1E0C80A78](v34);
  v137 = (char *)v113 - v35;
  v142 = sub_1BCAB4BD8();
  v155 = *(_QWORD *)(v142 - 8);
  MEMORY[0x1E0C80A78](v142);
  v119 = (char *)v113 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v37);
  v114 = (char *)v113 - v38;
  sub_1BC998AB0(0, &qword_1ED6C6C98, (uint64_t (*)(uint64_t))type metadata accessor for StatisticsQueryConfigurationOverrides, v21);
  MEMORY[0x1E0C80A78](v39);
  v121 = (char *)v113 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v41);
  v113[6] = (char *)v113 - v42;
  MEMORY[0x1E0C80A78](v43);
  v113[4] = (char *)v113 - v44;
  MEMORY[0x1E0C80A78](v45);
  v131 = (char *)v113 - v46;
  v156 = sub_1BCAB4E54();
  v147 = *(_QWORD *)(v156 - 8);
  MEMORY[0x1E0C80A78](v156);
  v122 = (char *)v113 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v48);
  v154 = (char *)v113 - v49;
  MEMORY[0x1E0C80A78](v50);
  v118 = (char *)v113 - v51;
  MEMORY[0x1E0C80A78](v52);
  v143 = (char *)v113 - v53;
  MEMORY[0x1E0C80A78](v54);
  v56 = (char *)v113 - v55;
  v57 = *a2;
  v58 = *((_QWORD *)a2 + 1);
  v59 = a2[16];
  v60 = a2[17];
  v61 = qword_1ED6C6C40;
  sub_1BC9A7EA4();
  v62 = swift_allocError();
  *v63 = 0;
  aBlock = v62;
  LOBYTE(v160) = 1;
  sub_1BC998AB0(0, &qword_1ED6C69A0, (uint64_t (*)(uint64_t))sub_1BCA3424C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0D2E5C8]);
  swift_allocObject();
  v64 = v11;
  *(_QWORD *)&v11[v61] = sub_1BCAB50A0();
  v65 = (uint64_t *)&v64[qword_1ED6D3A88];
  *v65 = 0;
  v65[1] = 0;
  v66 = a1;
  *(_QWORD *)&v64[qword_1ED6C6C30] = a1;
  v67 = &v64[qword_1ED6C6C38];
  v139 = v57;
  *v67 = v57;
  *((_QWORD *)v67 + 1) = v58;
  v132 = v59;
  v67[16] = v59;
  v133 = v60;
  v67[17] = v60;
  v68 = v158;
  sub_1BC9F3F74(v158, (uint64_t)&v64[qword_1ED6D3A90], &qword_1ED6C6C98, (uint64_t (*)(uint64_t))type metadata accessor for StatisticsQueryConfigurationOverrides);
  v140 = v64;
  v69 = v157;
  *(_QWORD *)&v64[qword_1ED6D3A80] = v157;
  v70 = *v65;
  v71 = v151;
  *v65 = (uint64_t)v146;
  v65[1] = v71;
  v72 = v66;
  v73 = (uint64_t)v131;
  v74 = v72;
  swift_bridgeObjectRetain();
  v125 = v69;
  v75 = ConfigurationOverrides;
  swift_retain();
  sub_1BC9EED1C(v70);
  v157 = v56;
  _s19HealthVisualization25PresentationDateProvidingPAAE012presentationD010Foundation0D0VvgZ_0();
  sub_1BC9F3F74(v68, v73, &qword_1ED6C6C98, (uint64_t (*)(uint64_t))type metadata accessor for StatisticsQueryConfigurationOverrides);
  v145 = *(_QWORD *)(v145 + 48);
  v76 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v145)(v73, 1, v75);
  v134 = v74;
  if (v76 == 1)
  {
    sub_1BC9B3A38(v73, &qword_1ED6C6C98, (uint64_t (*)(uint64_t))type metadata accessor for StatisticsQueryConfigurationOverrides);
    v77 = v156;
    v78 = v142;
    v79 = v147;
LABEL_3:
    v80 = *(void (**)(char *, char *, uint64_t))(v79 + 16);
    v81 = (uint64_t)v143;
    v80(v143, v157, v77);
LABEL_4:
    v82 = v120;
    DateRange.dateInterval(endingAt:)(v81, v139, v120);
    v83 = v155;
    v138 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v155 + 48);
    if (v138(v82, 1, v78) == 1)
    {
      sub_1BC9B3A38(v82, (unint64_t *)&qword_1ED6C71E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAE5D0]);
      v137 = 0;
    }
    else
    {
      v89 = *(void (**)(char *, uint64_t, uint64_t))(v83 + 32);
      v146 = v80;
      v90 = v119;
      v89(v119, v82, v78);
      v91 = objc_opt_self();
      v92 = v118;
      sub_1BCAB4BC0();
      v93 = (void *)sub_1BCAB4DE8();
      v94 = v78;
      v95 = *(void (**)(char *, uint64_t))(v147 + 8);
      v95(v92, v77);
      sub_1BCAB4B9C();
      v96 = (void *)sub_1BCAB4DE8();
      v95(v92, v77);
      v97 = (void *)v91;
      v81 = (uint64_t)v143;
      v137 = (char *)objc_msgSend(v97, sel_predicateForSamplesWithStartDate_endDate_options_, v93, v96, 0);

      v79 = v147;
      v98 = v90;
      v80 = v146;
      (*(void (**)(char *, uint64_t))(v83 + 8))(v98, v94);
    }
    goto LABEL_13;
  }
  v84 = v137;
  sub_1BC9F3F74(v73, (uint64_t)v137, (unint64_t *)&qword_1ED6C71E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAE5D0]);
  v85 = v155;
  v86 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v155 + 48);
  v78 = v142;
  if (v86((uint64_t)v84, 1, v142) == 1)
  {
    sub_1BC9B3A38((uint64_t)v84, (unint64_t *)&qword_1ED6C71E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAE5D0]);
    v87 = *(char **)(v73 + *(int *)(v75 + 20));
    v79 = v147;
    if (!v87)
    {
      sub_1BC9F4178(v73);
      v77 = v156;
      goto LABEL_3;
    }
    v138 = v86;
    v137 = v87;
    v88 = v87;
    sub_1BC9F4178(v73);
    v80 = *(void (**)(char *, char *, uint64_t))(v79 + 16);
    v81 = (uint64_t)v143;
    v77 = v156;
    v80(v143, v157, v156);
  }
  else
  {
    v138 = v86;
    v99 = v114;
    (*(void (**)(char *, id, uint64_t))(v85 + 32))(v114, v84, v78);
    v100 = (void *)objc_opt_self();
    v101 = (void *)sub_1BCAB4B78();
    v102 = (char *)objc_msgSend(v100, sel_predicateForSamplesWithinDateInterval_options_, v101, 0);

    v103 = v99;
    v104 = v78;
    (*(void (**)(char *, uint64_t))(v85 + 8))(v103, v78);
    v105 = *(void **)(v73 + *(int *)(v75 + 20));
    if (v105)
    {
      sub_1BC9AFE08();
      v106 = swift_allocObject();
      *(_OWORD *)(v106 + 16) = xmmword_1BCAC1E60;
      *(_QWORD *)(v106 + 32) = v102;
      *(_QWORD *)(v106 + 40) = v105;
      aBlock = v106;
      sub_1BCAB6024();
      sub_1BC9A649C(0, (unint64_t *)&qword_1ED6C2E60);
      v107 = v105;
      v108 = v102;
      v109 = (void *)sub_1BCAB600C();
      swift_bridgeObjectRelease();
      v102 = (char *)objc_msgSend((id)objc_opt_self(), sel_andPredicateWithSubpredicates_, v109);

    }
    v77 = v156;
    sub_1BC9F4178(v73);
    v79 = v147;
    v80 = *(void (**)(char *, char *, uint64_t))(v147 + 16);
    v81 = (uint64_t)v143;
    v80(v143, v157, v77);
    v78 = v104;
    v137 = v102;
    if (!v102)
      goto LABEL_4;
  }
LABEL_13:
  v110 = v135 & 1;
  v147 = *(_QWORD *)(v79 + 8);
  ((void (*)(uint64_t, uint64_t))v147)(v81, v77);
  if (*(_QWORD *)(v58 + 16))
  {
    swift_bridgeObjectRetain();
    __asm { BR              X9 }
  }
  v111 = v133;
  LOBYTE(aBlock) = v132;
  AnchorDate.date.getter();
  v112 = (char *)&loc_1BCA32AE8 + *((int *)qword_1BCA337F0 + v111);
  v146 = v80;
  v135 = v110;
  __asm { BR              X9 }
}

void sub_1BCA33804(uint64_t a1, void *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  Swift::String v15;
  Swift::String v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  void *v21;
  uint64_t *v22;
  id v23;
  Swift::String v24;
  Swift::String v25;
  uint64_t *v26;
  void (*v27)(void *, BOOL);
  id v28;

  v11 = a7 + 16;
  sub_1BCAB6264();
  if (qword_1ED6C7098 != -1)
    swift_once();
  sub_1BC9A7EF4();
  v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_1BCABE680;
  *(_QWORD *)(v12 + 56) = MEMORY[0x1E0DEA968];
  *(_QWORD *)(v12 + 64) = sub_1BC9A7FA4();
  *(_QWORD *)(v12 + 32) = a5;
  *(_QWORD *)(v12 + 40) = a6;
  swift_bridgeObjectRetain();
  sub_1BCAB5484();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v13 = (char *)MEMORY[0x1BCCFC004](v11);
  if (v13)
  {
    v14 = v13;
    if ((objc_msgSend(v13, sel_isCancelled) & 1) != 0
      || (objc_msgSend(v14, sel_isFinished) & 1) != 0)
    {
      v15._countAndFlagsBits = 0xD00000000000002DLL;
      v15._object = (void *)0x80000001BCACE790;
      v16._countAndFlagsBits = 0;
      v16._object = (void *)0xE000000000000000;
      NSOperation.logLifeCycleEvent(_:withPrivateInfo:)(v15, v16);

    }
    else
    {
      v17 = a2;
      if (!a2)
      {
        if (a3)
          v18 = 0xD000000000000029;
        else
          v18 = 0;
        if (a3)
          v19 = 0x80000001BCAD1BC0;
        else
          v19 = 0;
        if (a3)
          v20 = a3 | 0x8000000000000000;
        else
          v20 = 0xC000000000000000;
        sub_1BC9A82C4();
        v21 = (void *)swift_allocError();
        *v22 = v18;
        v22[1] = v19;
        v22[2] = v20;
        swift_getErrorValue();
        v23 = (id)a3;
        sub_1BC9A8308(v18, v19, v20);
        v24._countAndFlagsBits = sub_1BCAB6810();
        v25._countAndFlagsBits = 0;
        v25._object = (void *)0xE000000000000000;
        NSOperation.logErrorString(_:withInfo:)(v24, v25);
        swift_bridgeObjectRelease();

        v17 = (void *)swift_allocError();
        *v26 = v18;
        v26[1] = v19;
        v26[2] = v20;
      }
      v27 = *(void (**)(void *, BOOL))&v14[qword_1ED6D3A88];
      v28 = a2;
      if (v27)
      {
        sub_1BC9B30EC((uint64_t)v27);
        v27(v17, a2 == 0);
        v28 = (id)sub_1BC9EED1C((uint64_t)v27);
      }
      MEMORY[0x1E0C80A78](v28);
      sub_1BCAB50AC();

      sub_1BC9B39B4(v17);
    }
  }
}

uint64_t sub_1BCA33B3C(uint64_t a1, void *a2)
{
  id v4;
  uint64_t v5;
  void *v6;
  void *v7;
  Swift::String v8;
  Swift::String v9;

  sub_1BC9F3F44(a2);
  swift_retain();
  sub_1BCAB507C();
  sub_1BC9B39B4(a2);
  swift_release();
  v4 = objc_msgSend(*(id *)(a1 + qword_1ED6C6C30), sel_identifier);
  v5 = sub_1BCAB5F04();
  v7 = v6;

  v8._countAndFlagsBits = 0x64656873696E6966;
  v8._object = (void *)0xE800000000000000;
  v9._countAndFlagsBits = v5;
  v9._object = v7;
  NSOperation.logLifeCycleEvent(_:withPrivateInfo:)(v8, v9);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1BCA33C1C()
{
  char *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  void *v6;
  _BYTE *v7;
  void *v8;
  id v9;
  uint64_t v10;
  void *v11;
  void *v12;
  Swift::String v13;
  Swift::String v14;
  id v15;
  char *v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE v23[16];
  void *v24;
  char v25;

  v1 = v0;
  v2 = sub_1BCAB54A8();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = &v23[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1BC9A7EA4();
  v6 = (void *)swift_allocError();
  *v7 = 2;
  v24 = v6;
  v25 = 1;
  swift_retain();
  sub_1BCAB507C();

  swift_release();
  v8 = *(void **)&v0[qword_1ED6C6C30];
  v9 = objc_msgSend(v8, sel_identifier);
  v10 = sub_1BCAB5F04();
  v12 = v11;

  v13._countAndFlagsBits = 0x676E696E6E7572;
  v13._object = (void *)0xE700000000000000;
  v14._countAndFlagsBits = v10;
  v14._object = v12;
  NSOperation.logLifeCycleEvent(_:withPrivateInfo:)(v13, v14);
  swift_bridgeObjectRelease();
  if (qword_1ED6C7098 != -1)
    swift_once();
  v15 = (id)qword_1ED6C69C0;
  v16 = v1;
  sub_1BCAB549C();
  sub_1BCAB6270();
  sub_1BC9A7EF4();
  v17 = swift_allocObject();
  *(_OWORD *)(v17 + 16) = xmmword_1BCABE680;
  v18 = objc_msgSend(v8, sel_identifier);
  v19 = sub_1BCAB5F04();
  v21 = v20;

  *(_QWORD *)(v17 + 56) = MEMORY[0x1E0DEA968];
  *(_QWORD *)(v17 + 64) = sub_1BC9A7FA4();
  *(_QWORD *)(v17 + 32) = v19;
  *(_QWORD *)(v17 + 40) = v21;
  sub_1BCAB5484();
  swift_bridgeObjectRelease();
  objc_msgSend(*(id *)&v16[qword_1ED6D3A80], sel_executeQuery_, *(_QWORD *)&v16[qword_1ED6D3A98]);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v3 + 8))(v5, v2);
}

void sub_1BCA33EA8(void *a1)
{
  id v1;

  v1 = a1;
  sub_1BCA33C1C();

}

id sub_1BCA33EDC()
{
  char *v0;
  Swift::String v1;
  Swift::String v2;
  void *v3;
  _BYTE *v4;
  char *v5;
  uint64_t v6;

  if (objc_msgSend(v0, sel_isCancelled))
  {
    v1._countAndFlagsBits = 0x656C6C65636E6163;
    v1._object = (void *)0xE900000000000064;
    v2._countAndFlagsBits = 0;
    v2._object = (void *)0xE000000000000000;
    NSOperation.logLifeCycleEvent(_:withPrivateInfo:)(v1, v2);
    sub_1BC9A7EA4();
    v3 = (void *)swift_allocError();
    *v4 = 3;
    MEMORY[0x1E0C80A78](v3);
    swift_retain();
    sub_1BCAB507C();

    swift_release();
  }
  v5 = &v0[qword_1ED6D3A88];
  v6 = *(_QWORD *)&v0[qword_1ED6D3A88];
  *(_QWORD *)v5 = 0;
  *((_QWORD *)v5 + 1) = 0;
  sub_1BC9EED1C(v6);
  return objc_msgSend(*(id *)&v0[qword_1ED6D3A80], sel_stopQuery_, *(_QWORD *)&v0[qword_1ED6D3A98]);
}

id StatisticsCollectionQueryOperation.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void StatisticsCollectionQueryOperation.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void sub_1BCA3405C()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t sub_1BCA34088()
{
  uint64_t v0;

  swift_release();

  swift_bridgeObjectRelease();
  sub_1BC9B3A38(v0 + qword_1ED6D3A90, &qword_1ED6C6C98, (uint64_t (*)(uint64_t))type metadata accessor for StatisticsQueryConfigurationOverrides);

  return sub_1BC9EED1C(*(_QWORD *)(v0 + qword_1ED6D3A88));
}

id StatisticsCollectionQueryOperation.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for StatisticsCollectionQueryOperation();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_1BCA34150(uint64_t a1)
{
  swift_release();

  swift_bridgeObjectRelease();
  sub_1BC9B3A38(a1 + qword_1ED6D3A90, &qword_1ED6C6C98, (uint64_t (*)(uint64_t))type metadata accessor for StatisticsQueryConfigurationOverrides);

  return sub_1BC9EED1C(*(_QWORD *)(a1 + qword_1ED6D3A88));
}

uint64_t sub_1BCA341F0@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  uint64_t v3;
  char v4;

  swift_retain();
  sub_1BCAB5070();
  result = swift_release();
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  return result;
}

void sub_1BCA3424C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED6C6FA0)
  {
    sub_1BC9A649C(255, &qword_1ED6C6E90);
    sub_1BC9A7F58(255, (unint64_t *)&qword_1ED6C6F70);
    v0 = sub_1BCAB68A0();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED6C6FA0);
  }
}

uint64_t type metadata accessor for StatisticsCollectionQueryOperation()
{
  uint64_t result;

  result = qword_1ED6C6C48;
  if (!qword_1ED6C6C48)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_1BCA34314()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1BCA34338()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_1BCAB54A8();
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

void sub_1BCA343C8(uint64_t a1, void *a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;

  v7 = *(_QWORD *)(sub_1BCAB54A8() - 8);
  v8 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v9 = (*(_QWORD *)(v7 + 64) + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_1BCA33804(a1, a2, a3, v3 + v8, *(_QWORD *)(v3 + v9), *(_QWORD *)(v3 + v9 + 8), *(_QWORD *)(v3 + ((v9 + 23) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_1BCA34440(uint64_t a1, uint64_t a2)
{
  uint64_t ConfigurationOverrides;

  ConfigurationOverrides = type metadata accessor for StatisticsQueryConfigurationOverrides();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(ConfigurationOverrides - 8) + 32))(a2, a1, ConfigurationOverrides);
  return a2;
}

void sub_1BCA3448C()
{
  unint64_t v0;

  sub_1BC998AB0(319, &qword_1ED6C6C98, (uint64_t (*)(uint64_t))type metadata accessor for StatisticsQueryConfigurationOverrides, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  if (v0 <= 0x3F)
    swift_initClassMetadata2();
}

uint64_t method lookup function for StatisticsCollectionQueryOperation()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of StatisticsCollectionQueryOperation.result.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))(class metadata base offset for StatisticsCollectionQueryOperation
                              + (*MEMORY[0x1E0DEEDD8] & *v0)
                              + 80))();
}

uint64_t dispatch thunk of StatisticsCollectionQueryOperation.__allocating_init(sampleType:configuration:configurationOverrides:name:queryQualityOfService:healthStore:environment:resultHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  uint64_t v8;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(class metadata base offset for StatisticsCollectionQueryOperation + v8 + 128))(a1, a2, a3, a4, a5, a6, a7, a8 & 1);
}

uint64_t sub_1BCA345C4()
{
  return type metadata accessor for StatisticsCollectionQueryOperation();
}

uint64_t sub_1BCA345CC()
{
  uint64_t v0;

  return sub_1BCA33B3C(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_1BCA345D8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  void (*v20)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t, uint64_t);
  void (*v26)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v27;
  void (*v28)(char *, _QWORD, uint64_t);
  char *v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t, uint64_t);
  void (*v33)(char *, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(char *, uint64_t);
  void (*v51)(char *, uint64_t, uint64_t);
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;

  v59 = a1;
  v61 = a2;
  v57 = sub_1BCAB5958();
  v56 = *(_QWORD *)(v57 - 8);
  MEMORY[0x1E0C80A78](v57);
  v55 = (char *)&v48 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = sub_1BCAB5C04();
  v3 = *(_QWORD *)(v53 - 8);
  MEMORY[0x1E0C80A78](v53);
  v52 = (char *)&v48 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BC9AFF04(0, &qword_1EF4783E0, (void (*)(uint64_t))MEMORY[0x1E0CDD560]);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v48 - v6;
  v8 = sub_1BCAB5C28();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = v8;
  MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BC9AFF04(0, (unint64_t *)&qword_1EF478060, (void (*)(uint64_t))MEMORY[0x1E0C93AA8]);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v48 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16);
  v18 = (char *)&v48 - v17;
  v60 = (uint64_t)&v48 - v17;
  sub_1BCAB5910();
  v71 = v62;
  v72 = v63;
  v73 = v64;
  sub_1BCAB5748();
  v19 = sub_1BCAB5754();
  v20 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56);
  v20(v18, 0, 1, v19);
  sub_1BCAB5910();
  v68 = v65;
  v69 = v66;
  v70 = v67;
  v58 = v15;
  sub_1BCAB5748();
  v20(v15, 0, 1, v19);
  v21 = *MEMORY[0x1E0CDD7C8];
  v51 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 104);
  v49 = v10;
  v51(v12, v21, v10);
  v22 = *MEMORY[0x1E0CDD550];
  v23 = sub_1BCAB5BA4();
  v24 = *(_QWORD *)(v23 - 8);
  v25 = *(void (**)(char *, uint64_t, uint64_t))(v24 + 104);
  v25(v7, v22, v23);
  v26 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56);
  v26(v7, 0, 1, v23);
  sub_1BCAB5BEC();
  sub_1BCA360B8((uint64_t)v7);
  v50 = *(void (**)(char *, uint64_t))(v9 + 8);
  v50(v12, v10);
  sub_1BCAB5BB0();
  sub_1BCAB5BF8();
  swift_release();
  v27 = v3;
  v28 = *(void (**)(char *, _QWORD, uint64_t))(v3 + 104);
  v29 = v52;
  v30 = v53;
  v28(v52, *MEMORY[0x1E0CDD6D8], v53);
  v54 = sub_1BCAB5C10();
  swift_release();
  (*(void (**)(char *, uint64_t))(v27 + 8))(v29, v30);
  sub_1BCAB5BD4();
  v25(v7, v22, v23);
  v26(v7, 0, 1, v23);
  v53 = sub_1BCAB5BE0();
  sub_1BCA360B8((uint64_t)v7);
  v31 = v49;
  v32 = v51;
  v51(v12, *MEMORY[0x1E0CDD7A0], v49);
  v25(v7, v22, v23);
  v26(v7, 0, 1, v23);
  sub_1BCAB5BEC();
  sub_1BCA360B8((uint64_t)v7);
  v33 = v50;
  v50(v12, v31);
  sub_1BCAB5BB0();
  v34 = sub_1BCAB5BF8();
  swift_release();
  v32(v12, *MEMORY[0x1E0CDD7D0], v31);
  v25(v7, *MEMORY[0x1E0CDD548], v23);
  v26(v7, 0, 1, v23);
  sub_1BCAB5BEC();
  sub_1BCA360B8((uint64_t)v7);
  v33(v12, v31);
  sub_1BCAB5BD4();
  v35 = sub_1BCAB5BF8();
  swift_release();
  v36 = (uint64_t)v55;
  (*(void (**)(char *, _QWORD, uint64_t))(v56 + 104))(v55, *MEMORY[0x1E0CD9918], v57);
  v37 = v59[3];
  v38 = v59[4];
  __swift_project_boxed_opaque_existential_1(v59, v37);
  v39 = (*(uint64_t (**)(uint64_t, uint64_t))(v38 + 16))(v37, v38);
  v40 = MEMORY[0x1BCCFA924](v39);
  v41 = (void *)objc_opt_self();
  v42 = MEMORY[0x1BCCFA924](objc_msgSend(v41, sel_systemGray4Color));
  v43 = MEMORY[0x1BCCFA924](objc_msgSend(v41, sel_tertiaryLabelColor));
  v44 = MEMORY[0x1BCCFA924](objc_msgSend(v41, sel_labelColor));
  v45 = MEMORY[0x1BCCFA924](objc_msgSend(v41, sel_secondaryLabelColor));
  v46 = MEMORY[0x1BCCFA924](objc_msgSend(v41, sel_secondaryLabelColor));
  return sub_1BCA35C14(v60, (uint64_t)v58, v54, v53, v34, v35, v36, v40, v61, 8.5, 144.0, -2.0, -1.0, -4.0, 1.1, 1.3, 1.15, v42, v43,
           v44,
           v45,
           v46,
           1);
}

uint64_t sub_1BCA34C9C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  void (*v19)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v36 = a2;
  v3 = sub_1BCAB5958();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BC9AFF04(0, &qword_1EF4783E0, (void (*)(uint64_t))MEMORY[0x1E0CDD560]);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v31 - v8;
  sub_1BC9AFF04(0, (unint64_t *)&qword_1EF478060, (void (*)(uint64_t))MEMORY[0x1E0C93AA8]);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v31 - v14;
  v16 = sub_1BCAB5754();
  v17 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56);
  v17(v15, 1, 1, v16);
  v17(v12, 1, 1, v16);
  v18 = sub_1BCAB5BA4();
  v19 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56);
  v19(v9, 1, 1, v18);
  sub_1BCAB5BE0();
  sub_1BCA360B8((uint64_t)v9);
  sub_1BCAB5BBC();
  v35 = sub_1BCAB5BF8();
  swift_release();
  v19(v9, 1, 1, v18);
  sub_1BCAB5BE0();
  sub_1BCA360B8((uint64_t)v9);
  sub_1BCAB5BC8();
  v34 = sub_1BCAB5BF8();
  swift_release();
  v19(v9, 1, 1, v18);
  sub_1BCAB5BE0();
  sub_1BCA360B8((uint64_t)v9);
  sub_1BCAB5BC8();
  v33 = sub_1BCAB5BF8();
  swift_release();
  v19(v9, 1, 1, v18);
  sub_1BCAB5BE0();
  sub_1BCA360B8((uint64_t)v9);
  sub_1BCAB5BBC();
  v32 = sub_1BCAB5BF8();
  swift_release();
  (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v6, *MEMORY[0x1E0CD9918], v3);
  v20 = a1[3];
  v21 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v20);
  v22 = (*(uint64_t (**)(uint64_t, uint64_t))(v21 + 16))(v20, v21);
  v23 = MEMORY[0x1BCCFA924](v22);
  v24 = (void *)objc_opt_self();
  v25 = MEMORY[0x1BCCFA924](objc_msgSend(v24, sel_systemGray4Color));
  v26 = MEMORY[0x1BCCFA924](objc_msgSend(v24, sel_tertiaryLabelColor));
  v27 = MEMORY[0x1BCCFA924](objc_msgSend(v24, sel_labelColor));
  v28 = MEMORY[0x1BCCFA924](objc_msgSend(v24, sel_labelColor));
  v29 = MEMORY[0x1BCCFA924](objc_msgSend(v24, sel_labelColor));
  return sub_1BCA35C14((uint64_t)v15, (uint64_t)v12, v35, v34, v33, v32, (uint64_t)v6, v23, v36, 7.0, 144.0, -2.0, 0.0, 2.0, 1.1, 1.2, 1.2, v25, v26,
           v27,
           v28,
           v29,
           0);
}

uint64_t TimeBasedDistributionChartDesign.majorTick.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1BCA3509C(v1, a1);
}

uint64_t sub_1BCA3509C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1BC9AFF04(0, (unint64_t *)&qword_1EF478060, (void (*)(uint64_t))MEMORY[0x1E0C93AA8]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t TimeBasedDistributionChartDesign.majorTick.setter(uint64_t a1)
{
  uint64_t v1;

  return sub_1BCA350F8(a1, v1);
}

uint64_t sub_1BCA350F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1BC9AFF04(0, (unint64_t *)&qword_1EF478060, (void (*)(uint64_t))MEMORY[0x1E0C93AA8]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t (*TimeBasedDistributionChartDesign.majorTick.modify())()
{
  return nullsub_1;
}

uint64_t TimeBasedDistributionChartDesign.minorTick.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for TimeBasedDistributionChartDesign() + 20);
  return sub_1BCA3509C(v3, a1);
}

uint64_t type metadata accessor for TimeBasedDistributionChartDesign()
{
  uint64_t result;

  result = qword_1EF479908;
  if (!qword_1EF479908)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t TimeBasedDistributionChartDesign.minorTick.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for TimeBasedDistributionChartDesign() + 20);
  return sub_1BCA350F8(a1, v3);
}

uint64_t (*TimeBasedDistributionChartDesign.minorTick.modify())(_QWORD)
{
  type metadata accessor for TimeBasedDistributionChartDesign();
  return nullsub_1;
}

uint64_t TimeBasedDistributionChartDesign.nonMaxPointAnnotationFont.getter()
{
  type metadata accessor for TimeBasedDistributionChartDesign();
  return swift_retain();
}

uint64_t TimeBasedDistributionChartDesign.nonMaxPointAnnotationFont.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for TimeBasedDistributionChartDesign() + 24);
  result = swift_release();
  *(_QWORD *)(v1 + v3) = a1;
  return result;
}

uint64_t (*TimeBasedDistributionChartDesign.nonMaxPointAnnotationFont.modify())(_QWORD)
{
  type metadata accessor for TimeBasedDistributionChartDesign();
  return nullsub_1;
}

uint64_t TimeBasedDistributionChartDesign.largeSizeMaxPointAnnotationFont.getter()
{
  type metadata accessor for TimeBasedDistributionChartDesign();
  return swift_retain();
}

uint64_t TimeBasedDistributionChartDesign.largeSizeMaxPointAnnotationFont.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for TimeBasedDistributionChartDesign() + 28);
  result = swift_release();
  *(_QWORD *)(v1 + v3) = a1;
  return result;
}

uint64_t (*TimeBasedDistributionChartDesign.largeSizeMaxPointAnnotationFont.modify())(_QWORD)
{
  type metadata accessor for TimeBasedDistributionChartDesign();
  return nullsub_1;
}

uint64_t TimeBasedDistributionChartDesign.smallSizeMaxPointAnnotationFont.getter()
{
  type metadata accessor for TimeBasedDistributionChartDesign();
  return swift_retain();
}

uint64_t TimeBasedDistributionChartDesign.smallSizeMaxPointAnnotationFont.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for TimeBasedDistributionChartDesign() + 32);
  result = swift_release();
  *(_QWORD *)(v1 + v3) = a1;
  return result;
}

uint64_t (*TimeBasedDistributionChartDesign.smallSizeMaxPointAnnotationFont.modify())(_QWORD)
{
  type metadata accessor for TimeBasedDistributionChartDesign();
  return nullsub_1;
}

uint64_t TimeBasedDistributionChartDesign.axisLabelFont.getter()
{
  type metadata accessor for TimeBasedDistributionChartDesign();
  return swift_retain();
}

uint64_t TimeBasedDistributionChartDesign.axisLabelFont.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for TimeBasedDistributionChartDesign() + 36);
  result = swift_release();
  *(_QWORD *)(v1 + v3) = a1;
  return result;
}

uint64_t (*TimeBasedDistributionChartDesign.axisLabelFont.modify())(_QWORD)
{
  type metadata accessor for TimeBasedDistributionChartDesign();
  return nullsub_1;
}

uint64_t TimeBasedDistributionChartDesign.maximumDynamicTypeSize.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for TimeBasedDistributionChartDesign() + 40);
  v4 = sub_1BCAB5958();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t TimeBasedDistributionChartDesign.maximumDynamicTypeSize.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for TimeBasedDistributionChartDesign() + 40);
  v4 = sub_1BCAB5958();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*TimeBasedDistributionChartDesign.maximumDynamicTypeSize.modify())(_QWORD)
{
  type metadata accessor for TimeBasedDistributionChartDesign();
  return nullsub_1;
}

uint64_t TimeBasedDistributionChartDesign.accentColor.getter()
{
  type metadata accessor for TimeBasedDistributionChartDesign();
  return swift_retain();
}

uint64_t TimeBasedDistributionChartDesign.accentColor.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for TimeBasedDistributionChartDesign() + 44);
  result = swift_release();
  *(_QWORD *)(v1 + v3) = a1;
  return result;
}

uint64_t (*TimeBasedDistributionChartDesign.accentColor.modify())(_QWORD)
{
  type metadata accessor for TimeBasedDistributionChartDesign();
  return nullsub_1;
}

uint64_t TimeBasedDistributionChartDesign.nonMaxBarColor.getter()
{
  type metadata accessor for TimeBasedDistributionChartDesign();
  return swift_retain();
}

uint64_t TimeBasedDistributionChartDesign.nonMaxBarColor.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for TimeBasedDistributionChartDesign() + 48);
  result = swift_release();
  *(_QWORD *)(v1 + v3) = a1;
  return result;
}

uint64_t (*TimeBasedDistributionChartDesign.nonMaxBarColor.modify())(_QWORD)
{
  type metadata accessor for TimeBasedDistributionChartDesign();
  return nullsub_1;
}

uint64_t TimeBasedDistributionChartDesign.noDataColor.getter()
{
  type metadata accessor for TimeBasedDistributionChartDesign();
  return swift_retain();
}

uint64_t TimeBasedDistributionChartDesign.noDataColor.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for TimeBasedDistributionChartDesign() + 52);
  result = swift_release();
  *(_QWORD *)(v1 + v3) = a1;
  return result;
}

uint64_t (*TimeBasedDistributionChartDesign.noDataColor.modify())(_QWORD)
{
  type metadata accessor for TimeBasedDistributionChartDesign();
  return nullsub_1;
}

uint64_t TimeBasedDistributionChartDesign.maxPointAnnotationColor.getter()
{
  type metadata accessor for TimeBasedDistributionChartDesign();
  return swift_retain();
}

uint64_t TimeBasedDistributionChartDesign.maxPointAnnotationColor.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for TimeBasedDistributionChartDesign() + 56);
  result = swift_release();
  *(_QWORD *)(v1 + v3) = a1;
  return result;
}

uint64_t (*TimeBasedDistributionChartDesign.maxPointAnnotationColor.modify())(_QWORD)
{
  type metadata accessor for TimeBasedDistributionChartDesign();
  return nullsub_1;
}

uint64_t TimeBasedDistributionChartDesign.nonMaxPointAnnotationColor.getter()
{
  type metadata accessor for TimeBasedDistributionChartDesign();
  return swift_retain();
}

uint64_t TimeBasedDistributionChartDesign.nonMaxPointAnnotationColor.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for TimeBasedDistributionChartDesign() + 60);
  result = swift_release();
  *(_QWORD *)(v1 + v3) = a1;
  return result;
}

uint64_t (*TimeBasedDistributionChartDesign.nonMaxPointAnnotationColor.modify())(_QWORD)
{
  type metadata accessor for TimeBasedDistributionChartDesign();
  return nullsub_1;
}

uint64_t TimeBasedDistributionChartDesign.axisLabelColor.getter()
{
  type metadata accessor for TimeBasedDistributionChartDesign();
  return swift_retain();
}

uint64_t TimeBasedDistributionChartDesign.axisLabelColor.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for TimeBasedDistributionChartDesign() + 64);
  result = swift_release();
  *(_QWORD *)(v1 + v3) = a1;
  return result;
}

uint64_t (*TimeBasedDistributionChartDesign.axisLabelColor.modify())(_QWORD)
{
  type metadata accessor for TimeBasedDistributionChartDesign();
  return nullsub_1;
}

double TimeBasedDistributionChartDesign.barToTickMargin.getter()
{
  uint64_t v0;

  return *(double *)(v0 + *(int *)(type metadata accessor for TimeBasedDistributionChartDesign() + 68));
}

uint64_t TimeBasedDistributionChartDesign.barToTickMargin.setter(double a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for TimeBasedDistributionChartDesign();
  *(double *)(v1 + *(int *)(result + 68)) = a1;
  return result;
}

uint64_t (*TimeBasedDistributionChartDesign.barToTickMargin.modify())(_QWORD)
{
  type metadata accessor for TimeBasedDistributionChartDesign();
  return nullsub_1;
}

double TimeBasedDistributionChartDesign.chartHeight.getter()
{
  uint64_t v0;

  return *(double *)(v0 + *(int *)(type metadata accessor for TimeBasedDistributionChartDesign() + 72));
}

uint64_t TimeBasedDistributionChartDesign.chartHeight.setter(double a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for TimeBasedDistributionChartDesign();
  *(double *)(v1 + *(int *)(result + 72)) = a1;
  return result;
}

uint64_t (*TimeBasedDistributionChartDesign.chartHeight.modify())(_QWORD)
{
  type metadata accessor for TimeBasedDistributionChartDesign();
  return nullsub_1;
}

double TimeBasedDistributionChartDesign.nonMaxPointAnnotationOffset.getter()
{
  uint64_t v0;

  return *(double *)(v0 + *(int *)(type metadata accessor for TimeBasedDistributionChartDesign() + 76));
}

uint64_t TimeBasedDistributionChartDesign.nonMaxPointAnnotationOffset.setter(double a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for TimeBasedDistributionChartDesign();
  *(double *)(v1 + *(int *)(result + 76)) = a1;
  return result;
}

uint64_t (*TimeBasedDistributionChartDesign.nonMaxPointAnnotationOffset.modify())(_QWORD)
{
  type metadata accessor for TimeBasedDistributionChartDesign();
  return nullsub_1;
}

double TimeBasedDistributionChartDesign.maxPointAnnotationOffset.getter()
{
  uint64_t v0;

  return *(double *)(v0 + *(int *)(type metadata accessor for TimeBasedDistributionChartDesign() + 80));
}

uint64_t TimeBasedDistributionChartDesign.maxPointAnnotationOffset.setter(double a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for TimeBasedDistributionChartDesign();
  *(double *)(v1 + *(int *)(result + 80)) = a1;
  return result;
}

uint64_t (*TimeBasedDistributionChartDesign.maxPointAnnotationOffset.modify())(_QWORD)
{
  type metadata accessor for TimeBasedDistributionChartDesign();
  return nullsub_1;
}

double TimeBasedDistributionChartDesign.noDataPointAnnotationOffset.getter()
{
  uint64_t v0;

  return *(double *)(v0 + *(int *)(type metadata accessor for TimeBasedDistributionChartDesign() + 84));
}

uint64_t TimeBasedDistributionChartDesign.noDataPointAnnotationOffset.setter(double a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for TimeBasedDistributionChartDesign();
  *(double *)(v1 + *(int *)(result + 84)) = a1;
  return result;
}

uint64_t (*TimeBasedDistributionChartDesign.noDataPointAnnotationOffset.modify())(_QWORD)
{
  type metadata accessor for TimeBasedDistributionChartDesign();
  return nullsub_1;
}

double TimeBasedDistributionChartDesign.noMaxYAxisScale.getter()
{
  uint64_t v0;

  return *(double *)(v0 + *(int *)(type metadata accessor for TimeBasedDistributionChartDesign() + 88));
}

uint64_t TimeBasedDistributionChartDesign.noMaxYAxisScale.setter(double a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for TimeBasedDistributionChartDesign();
  *(double *)(v1 + *(int *)(result + 88)) = a1;
  return result;
}

uint64_t (*TimeBasedDistributionChartDesign.noMaxYAxisScale.modify())(_QWORD)
{
  type metadata accessor for TimeBasedDistributionChartDesign();
  return nullsub_1;
}

double TimeBasedDistributionChartDesign.singleMaxYAxisScale.getter()
{
  uint64_t v0;

  return *(double *)(v0 + *(int *)(type metadata accessor for TimeBasedDistributionChartDesign() + 92));
}

uint64_t TimeBasedDistributionChartDesign.singleMaxYAxisScale.setter(double a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for TimeBasedDistributionChartDesign();
  *(double *)(v1 + *(int *)(result + 92)) = a1;
  return result;
}

uint64_t (*TimeBasedDistributionChartDesign.singleMaxYAxisScale.modify())(_QWORD)
{
  type metadata accessor for TimeBasedDistributionChartDesign();
  return nullsub_1;
}

double TimeBasedDistributionChartDesign.multipleMaxYAxisScale.getter()
{
  uint64_t v0;

  return *(double *)(v0 + *(int *)(type metadata accessor for TimeBasedDistributionChartDesign() + 96));
}

uint64_t TimeBasedDistributionChartDesign.multipleMaxYAxisScale.setter(double a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for TimeBasedDistributionChartDesign();
  *(double *)(v1 + *(int *)(result + 96)) = a1;
  return result;
}

uint64_t (*TimeBasedDistributionChartDesign.multipleMaxYAxisScale.modify())(_QWORD)
{
  type metadata accessor for TimeBasedDistributionChartDesign();
  return nullsub_1;
}

uint64_t TimeBasedDistributionChartDesign.shouldPreventLongBarAnnotationOverhang.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for TimeBasedDistributionChartDesign() + 100));
}

uint64_t TimeBasedDistributionChartDesign.shouldPreventLongBarAnnotationOverhang.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for TimeBasedDistributionChartDesign();
  *(_BYTE *)(v1 + *(int *)(result + 100)) = a1;
  return result;
}

uint64_t (*TimeBasedDistributionChartDesign.shouldPreventLongBarAnnotationOverhang.modify())(_QWORD)
{
  type metadata accessor for TimeBasedDistributionChartDesign();
  return nullsub_1;
}

uint64_t sub_1BCA35C14@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, double a10@<D0>, double a11@<D1>, double a12@<D2>, double a13@<D3>, double a14@<D4>, double a15@<D5>, double a16@<D6>, double a17@<D7>, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  int *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t result;

  sub_1BCA372A0(a1, a9);
  v37 = (int *)type metadata accessor for TimeBasedDistributionChartDesign();
  sub_1BCA372A0(a2, a9 + v37[5]);
  *(_QWORD *)(a9 + v37[6]) = a3;
  *(_QWORD *)(a9 + v37[7]) = a4;
  *(_QWORD *)(a9 + v37[8]) = a5;
  *(_QWORD *)(a9 + v37[9]) = a6;
  v38 = a9 + v37[10];
  v39 = sub_1BCAB5958();
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 32))(v38, a7, v39);
  *(_QWORD *)(a9 + v37[11]) = a8;
  *(_QWORD *)(a9 + v37[12]) = a18;
  *(_QWORD *)(a9 + v37[13]) = a19;
  *(_QWORD *)(a9 + v37[14]) = a20;
  *(_QWORD *)(a9 + v37[15]) = a21;
  *(_QWORD *)(a9 + v37[16]) = a22;
  *(double *)(a9 + v37[17]) = a10;
  *(double *)(a9 + v37[18]) = a11;
  *(double *)(a9 + v37[19]) = a12;
  *(double *)(a9 + v37[20]) = a13;
  *(double *)(a9 + v37[21]) = a14;
  *(double *)(a9 + v37[22]) = a15;
  *(double *)(a9 + v37[23]) = a16;
  *(double *)(a9 + v37[24]) = a17;
  *(_BYTE *)(a9 + v37[25]) = a23;
  return result;
}

uint64_t static TimeBasedDistributionChartDesign.makeTestingDesign()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  void (*v17)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v30 = a1;
  v1 = sub_1BCAB5958();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v4 = (char *)&v27 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BC9AFF04(0, &qword_1EF4783E0, (void (*)(uint64_t))MEMORY[0x1E0CDD560]);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v27 - v6;
  sub_1BC9AFF04(0, (unint64_t *)&qword_1EF478060, (void (*)(uint64_t))MEMORY[0x1E0C93AA8]);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v27 - v12;
  v14 = sub_1BCAB5754();
  v15 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56);
  v15(v13, 1, 1, v14);
  v15(v10, 1, 1, v14);
  v16 = sub_1BCAB5BA4();
  v17 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56);
  v17(v7, 1, 1, v16);
  v29 = sub_1BCAB5BE0();
  sub_1BCA360B8((uint64_t)v7);
  v17(v7, 1, 1, v16);
  v28 = sub_1BCAB5BE0();
  sub_1BCA360B8((uint64_t)v7);
  v17(v7, 1, 1, v16);
  v18 = sub_1BCAB5BE0();
  sub_1BCA360B8((uint64_t)v7);
  v17(v7, 1, 1, v16);
  v19 = sub_1BCAB5BE0();
  sub_1BCA360B8((uint64_t)v7);
  (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, *MEMORY[0x1E0CD9918], v1);
  v20 = sub_1BCAB5D48();
  v21 = sub_1BCAB5D60();
  v22 = sub_1BCAB5D3C();
  v23 = sub_1BCAB5D84();
  v24 = sub_1BCAB5D78();
  v25 = sub_1BCAB5D6C();
  return sub_1BCA35C14((uint64_t)v13, (uint64_t)v10, v29, v28, v18, v19, (uint64_t)v4, v20, v30, 5.0, 20.0, -2.0, -1.0, -4.0, 1.1, 1.3, 1.2, v21, v22,
           v23,
           v24,
           v25,
           1);
}

uint64_t sub_1BCA360B8(uint64_t a1)
{
  uint64_t v2;

  sub_1BC9AFF04(0, &qword_1EF4783E0, (void (*)(uint64_t))MEMORY[0x1E0CDD560]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

char *initializeBufferWithCopyOfBuffer for TimeBasedDistributionChartDesign(char *a1, uint64_t *a2, int *a3)
{
  char *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  unsigned int (*v9)(uint64_t *, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  void (*v21)(char *, char *, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v30;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v11 = *a2;
    *(_QWORD *)a1 = *a2;
    v4 = (char *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = sub_1BCAB5754();
    v8 = *(_QWORD *)(v7 - 8);
    v9 = *(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48);
    if (v9(a2, 1, v7))
    {
      sub_1BC9AFF04(0, (unint64_t *)&qword_1EF478060, (void (*)(uint64_t))MEMORY[0x1E0C93AA8]);
      memcpy(v4, a2, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, uint64_t *, uint64_t))(v8 + 16))(v4, a2, v7);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v4, 0, 1, v7);
    }
    v12 = a3[5];
    v13 = &v4[v12];
    v14 = (char *)a2 + v12;
    if (v9((uint64_t *)((char *)a2 + v12), 1, v7))
    {
      sub_1BC9AFF04(0, (unint64_t *)&qword_1EF478060, (void (*)(uint64_t))MEMORY[0x1E0C93AA8]);
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v13, v14, v7);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v13, 0, 1, v7);
    }
    v16 = a3[7];
    *(_QWORD *)&v4[a3[6]] = *(uint64_t *)((char *)a2 + a3[6]);
    *(_QWORD *)&v4[v16] = *(uint64_t *)((char *)a2 + v16);
    v17 = a3[9];
    *(_QWORD *)&v4[a3[8]] = *(uint64_t *)((char *)a2 + a3[8]);
    *(_QWORD *)&v4[v17] = *(uint64_t *)((char *)a2 + v17);
    v18 = a3[10];
    v30 = &v4[v18];
    v19 = (char *)a2 + v18;
    v20 = sub_1BCAB5958();
    v21 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 16);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    v21(v30, v19, v20);
    v22 = a3[12];
    *(_QWORD *)&v4[a3[11]] = *(uint64_t *)((char *)a2 + a3[11]);
    *(_QWORD *)&v4[v22] = *(uint64_t *)((char *)a2 + v22);
    v23 = a3[14];
    *(_QWORD *)&v4[a3[13]] = *(uint64_t *)((char *)a2 + a3[13]);
    *(_QWORD *)&v4[v23] = *(uint64_t *)((char *)a2 + v23);
    v24 = a3[16];
    *(_QWORD *)&v4[a3[15]] = *(uint64_t *)((char *)a2 + a3[15]);
    *(_QWORD *)&v4[v24] = *(uint64_t *)((char *)a2 + v24);
    v25 = a3[18];
    *(_QWORD *)&v4[a3[17]] = *(uint64_t *)((char *)a2 + a3[17]);
    *(_QWORD *)&v4[v25] = *(uint64_t *)((char *)a2 + v25);
    v26 = a3[20];
    *(_QWORD *)&v4[a3[19]] = *(uint64_t *)((char *)a2 + a3[19]);
    *(_QWORD *)&v4[v26] = *(uint64_t *)((char *)a2 + v26);
    v27 = a3[22];
    *(_QWORD *)&v4[a3[21]] = *(uint64_t *)((char *)a2 + a3[21]);
    *(_QWORD *)&v4[v27] = *(uint64_t *)((char *)a2 + v27);
    v28 = a3[24];
    *(_QWORD *)&v4[a3[23]] = *(uint64_t *)((char *)a2 + a3[23]);
    *(_QWORD *)&v4[v28] = *(uint64_t *)((char *)a2 + v28);
    v4[a3[25]] = *((_BYTE *)a2 + a3[25]);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
  }
  swift_retain();
  return v4;
}

uint64_t destroy for TimeBasedDistributionChartDesign(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = sub_1BCAB5754();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (!v6(a1, 1, v4))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  v7 = a1 + *(int *)(a2 + 20);
  if (!v6(v7, 1, v4))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v7, v4);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  v8 = a1 + *(int *)(a2 + 40);
  v9 = sub_1BCAB5958();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

char *initializeWithCopy for TimeBasedDistributionChartDesign(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int (*v8)(char *, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  void (*v19)(char *, char *, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v28;

  v6 = sub_1BCAB5754();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  if (v8(a2, 1, v6))
  {
    sub_1BC9AFF04(0, (unint64_t *)&qword_1EF478060, (void (*)(uint64_t))MEMORY[0x1E0C93AA8]);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v10 = a3[5];
  v11 = &a1[v10];
  v12 = &a2[v10];
  if (v8(&a2[v10], 1, v6))
  {
    sub_1BC9AFF04(0, (unint64_t *)&qword_1EF478060, (void (*)(uint64_t))MEMORY[0x1E0C93AA8]);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v11, v12, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v11, 0, 1, v6);
  }
  v14 = a3[7];
  *(_QWORD *)&a1[a3[6]] = *(_QWORD *)&a2[a3[6]];
  *(_QWORD *)&a1[v14] = *(_QWORD *)&a2[v14];
  v15 = a3[9];
  *(_QWORD *)&a1[a3[8]] = *(_QWORD *)&a2[a3[8]];
  *(_QWORD *)&a1[v15] = *(_QWORD *)&a2[v15];
  v16 = a3[10];
  v28 = &a1[v16];
  v17 = &a2[v16];
  v18 = sub_1BCAB5958();
  v19 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 16);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  v19(v28, v17, v18);
  v20 = a3[12];
  *(_QWORD *)&a1[a3[11]] = *(_QWORD *)&a2[a3[11]];
  *(_QWORD *)&a1[v20] = *(_QWORD *)&a2[v20];
  v21 = a3[14];
  *(_QWORD *)&a1[a3[13]] = *(_QWORD *)&a2[a3[13]];
  *(_QWORD *)&a1[v21] = *(_QWORD *)&a2[v21];
  v22 = a3[16];
  *(_QWORD *)&a1[a3[15]] = *(_QWORD *)&a2[a3[15]];
  *(_QWORD *)&a1[v22] = *(_QWORD *)&a2[v22];
  v23 = a3[18];
  *(_QWORD *)&a1[a3[17]] = *(_QWORD *)&a2[a3[17]];
  *(_QWORD *)&a1[v23] = *(_QWORD *)&a2[v23];
  v24 = a3[20];
  *(_QWORD *)&a1[a3[19]] = *(_QWORD *)&a2[a3[19]];
  *(_QWORD *)&a1[v24] = *(_QWORD *)&a2[v24];
  v25 = a3[22];
  *(_QWORD *)&a1[a3[21]] = *(_QWORD *)&a2[a3[21]];
  *(_QWORD *)&a1[v25] = *(_QWORD *)&a2[v25];
  v26 = a3[24];
  *(_QWORD *)&a1[a3[23]] = *(_QWORD *)&a2[a3[23]];
  *(_QWORD *)&a1[v26] = *(_QWORD *)&a2[v26];
  a1[a3[25]] = a2[a3[25]];
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

char *assignWithCopy for TimeBasedDistributionChartDesign(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;

  v6 = sub_1BCAB5754();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    sub_1BC9AFF04(0, (unint64_t *)&qword_1EF478060, (void (*)(uint64_t))MEMORY[0x1E0C93AA8]);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 24))(a1, a2, v6);
LABEL_7:
  v12 = a3[5];
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = v8(&a1[v12], 1, v6);
  v16 = v8(v14, 1, v6);
  if (!v15)
  {
    if (!v16)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 24))(v13, v14, v6);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(v13, v6);
    goto LABEL_12;
  }
  if (v16)
  {
LABEL_12:
    sub_1BC9AFF04(0, (unint64_t *)&qword_1EF478060, (void (*)(uint64_t))MEMORY[0x1E0C93AA8]);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v13, v14, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v13, 0, 1, v6);
LABEL_13:
  *(_QWORD *)&a1[a3[6]] = *(_QWORD *)&a2[a3[6]];
  swift_retain();
  swift_release();
  *(_QWORD *)&a1[a3[7]] = *(_QWORD *)&a2[a3[7]];
  swift_retain();
  swift_release();
  *(_QWORD *)&a1[a3[8]] = *(_QWORD *)&a2[a3[8]];
  swift_retain();
  swift_release();
  *(_QWORD *)&a1[a3[9]] = *(_QWORD *)&a2[a3[9]];
  swift_retain();
  swift_release();
  v18 = a3[10];
  v19 = &a1[v18];
  v20 = &a2[v18];
  v21 = sub_1BCAB5958();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 24))(v19, v20, v21);
  *(_QWORD *)&a1[a3[11]] = *(_QWORD *)&a2[a3[11]];
  swift_retain();
  swift_release();
  *(_QWORD *)&a1[a3[12]] = *(_QWORD *)&a2[a3[12]];
  swift_retain();
  swift_release();
  *(_QWORD *)&a1[a3[13]] = *(_QWORD *)&a2[a3[13]];
  swift_retain();
  swift_release();
  *(_QWORD *)&a1[a3[14]] = *(_QWORD *)&a2[a3[14]];
  swift_retain();
  swift_release();
  *(_QWORD *)&a1[a3[15]] = *(_QWORD *)&a2[a3[15]];
  swift_retain();
  swift_release();
  *(_QWORD *)&a1[a3[16]] = *(_QWORD *)&a2[a3[16]];
  swift_retain();
  swift_release();
  *(_QWORD *)&a1[a3[17]] = *(_QWORD *)&a2[a3[17]];
  *(_QWORD *)&a1[a3[18]] = *(_QWORD *)&a2[a3[18]];
  *(_QWORD *)&a1[a3[19]] = *(_QWORD *)&a2[a3[19]];
  *(_QWORD *)&a1[a3[20]] = *(_QWORD *)&a2[a3[20]];
  *(_QWORD *)&a1[a3[21]] = *(_QWORD *)&a2[a3[21]];
  *(_QWORD *)&a1[a3[22]] = *(_QWORD *)&a2[a3[22]];
  *(_QWORD *)&a1[a3[23]] = *(_QWORD *)&a2[a3[23]];
  *(_QWORD *)&a1[a3[24]] = *(_QWORD *)&a2[a3[24]];
  a1[a3[25]] = a2[a3[25]];
  return a1;
}

char *initializeWithTake for TimeBasedDistributionChartDesign(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int (*v8)(char *, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v6 = sub_1BCAB5754();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  if (v8(a2, 1, v6))
  {
    sub_1BC9AFF04(0, (unint64_t *)&qword_1EF478060, (void (*)(uint64_t))MEMORY[0x1E0C93AA8]);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v10 = a3[5];
  v11 = &a1[v10];
  v12 = &a2[v10];
  if (v8(&a2[v10], 1, v6))
  {
    sub_1BC9AFF04(0, (unint64_t *)&qword_1EF478060, (void (*)(uint64_t))MEMORY[0x1E0C93AA8]);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v11, v12, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v11, 0, 1, v6);
  }
  v14 = a3[7];
  *(_QWORD *)&a1[a3[6]] = *(_QWORD *)&a2[a3[6]];
  *(_QWORD *)&a1[v14] = *(_QWORD *)&a2[v14];
  v15 = a3[9];
  *(_QWORD *)&a1[a3[8]] = *(_QWORD *)&a2[a3[8]];
  *(_QWORD *)&a1[v15] = *(_QWORD *)&a2[v15];
  v16 = a3[10];
  v17 = &a1[v16];
  v18 = &a2[v16];
  v19 = sub_1BCAB5958();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v17, v18, v19);
  v20 = a3[12];
  *(_QWORD *)&a1[a3[11]] = *(_QWORD *)&a2[a3[11]];
  *(_QWORD *)&a1[v20] = *(_QWORD *)&a2[v20];
  v21 = a3[14];
  *(_QWORD *)&a1[a3[13]] = *(_QWORD *)&a2[a3[13]];
  *(_QWORD *)&a1[v21] = *(_QWORD *)&a2[v21];
  v22 = a3[16];
  *(_QWORD *)&a1[a3[15]] = *(_QWORD *)&a2[a3[15]];
  *(_QWORD *)&a1[v22] = *(_QWORD *)&a2[v22];
  v23 = a3[18];
  *(_QWORD *)&a1[a3[17]] = *(_QWORD *)&a2[a3[17]];
  *(_QWORD *)&a1[v23] = *(_QWORD *)&a2[v23];
  v24 = a3[20];
  *(_QWORD *)&a1[a3[19]] = *(_QWORD *)&a2[a3[19]];
  *(_QWORD *)&a1[v24] = *(_QWORD *)&a2[v24];
  v25 = a3[22];
  *(_QWORD *)&a1[a3[21]] = *(_QWORD *)&a2[a3[21]];
  *(_QWORD *)&a1[v25] = *(_QWORD *)&a2[v25];
  v26 = a3[24];
  *(_QWORD *)&a1[a3[23]] = *(_QWORD *)&a2[a3[23]];
  *(_QWORD *)&a1[v26] = *(_QWORD *)&a2[v26];
  a1[a3[25]] = a2[a3[25]];
  return a1;
}

char *assignWithTake for TimeBasedDistributionChartDesign(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v6 = sub_1BCAB5754();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    sub_1BC9AFF04(0, (unint64_t *)&qword_1EF478060, (void (*)(uint64_t))MEMORY[0x1E0C93AA8]);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 40))(a1, a2, v6);
LABEL_7:
  v12 = a3[5];
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = v8(&a1[v12], 1, v6);
  v16 = v8(v14, 1, v6);
  if (!v15)
  {
    if (!v16)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 40))(v13, v14, v6);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(v13, v6);
    goto LABEL_12;
  }
  if (v16)
  {
LABEL_12:
    sub_1BC9AFF04(0, (unint64_t *)&qword_1EF478060, (void (*)(uint64_t))MEMORY[0x1E0C93AA8]);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v13, v14, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v13, 0, 1, v6);
LABEL_13:
  *(_QWORD *)&a1[a3[6]] = *(_QWORD *)&a2[a3[6]];
  swift_release();
  *(_QWORD *)&a1[a3[7]] = *(_QWORD *)&a2[a3[7]];
  swift_release();
  *(_QWORD *)&a1[a3[8]] = *(_QWORD *)&a2[a3[8]];
  swift_release();
  *(_QWORD *)&a1[a3[9]] = *(_QWORD *)&a2[a3[9]];
  swift_release();
  v18 = a3[10];
  v19 = &a1[v18];
  v20 = &a2[v18];
  v21 = sub_1BCAB5958();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 40))(v19, v20, v21);
  *(_QWORD *)&a1[a3[11]] = *(_QWORD *)&a2[a3[11]];
  swift_release();
  *(_QWORD *)&a1[a3[12]] = *(_QWORD *)&a2[a3[12]];
  swift_release();
  *(_QWORD *)&a1[a3[13]] = *(_QWORD *)&a2[a3[13]];
  swift_release();
  *(_QWORD *)&a1[a3[14]] = *(_QWORD *)&a2[a3[14]];
  swift_release();
  *(_QWORD *)&a1[a3[15]] = *(_QWORD *)&a2[a3[15]];
  swift_release();
  *(_QWORD *)&a1[a3[16]] = *(_QWORD *)&a2[a3[16]];
  swift_release();
  v22 = a3[18];
  *(_QWORD *)&a1[a3[17]] = *(_QWORD *)&a2[a3[17]];
  *(_QWORD *)&a1[v22] = *(_QWORD *)&a2[v22];
  v23 = a3[20];
  *(_QWORD *)&a1[a3[19]] = *(_QWORD *)&a2[a3[19]];
  *(_QWORD *)&a1[v23] = *(_QWORD *)&a2[v23];
  v24 = a3[22];
  *(_QWORD *)&a1[a3[21]] = *(_QWORD *)&a2[a3[21]];
  *(_QWORD *)&a1[v24] = *(_QWORD *)&a2[v24];
  v25 = a3[24];
  *(_QWORD *)&a1[a3[23]] = *(_QWORD *)&a2[a3[23]];
  *(_QWORD *)&a1[v25] = *(_QWORD *)&a2[v25];
  a1[a3[25]] = a2[a3[25]];
  return a1;
}

uint64_t getEnumTagSinglePayload for TimeBasedDistributionChartDesign()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BCA37050(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  unint64_t v11;

  sub_1BC9AFF04(0, (unint64_t *)&qword_1EF478060, (void (*)(uint64_t))MEMORY[0x1E0C93AA8]);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v8 = sub_1BCAB5958();
    v10 = a1 + *(int *)(a3 + 40);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
    return v9(v10, a2, v8);
  }
  v11 = *(_QWORD *)(a1 + *(int *)(a3 + 24));
  if (v11 >= 0xFFFFFFFF)
    LODWORD(v11) = -1;
  return (v11 + 1);
}

uint64_t storeEnumTagSinglePayload for TimeBasedDistributionChartDesign()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_1BCA37114(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  sub_1BC9AFF04(0, (unint64_t *)&qword_1EF478060, (void (*)(uint64_t))MEMORY[0x1E0C93AA8]);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(_QWORD *)(a1 + *(int *)(a4 + 24)) = (a2 - 1);
      return;
    }
    v10 = sub_1BCAB5958();
    v12 = a1 + *(int *)(a4 + 40);
    v11 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  v11(v12, a2, a2, v10);
}

void sub_1BCA371C8()
{
  unint64_t v0;
  unint64_t v1;

  sub_1BC9AFF04(319, (unint64_t *)&qword_1EF478060, (void (*)(uint64_t))MEMORY[0x1E0C93AA8]);
  if (v0 <= 0x3F)
  {
    sub_1BCAB5958();
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t sub_1BCA372A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1BC9AFF04(0, (unint64_t *)&qword_1EF478060, (void (*)(uint64_t))MEMORY[0x1E0C93AA8]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t DiagramLine.__allocating_init(lineDiagramConfig:diagramData:hbxViewControllerFactory:axisMetricsFactory:)(uint64_t a1, uint64_t *a2, void *a3, uint64_t a4)
{
  uint64_t v8;

  v8 = swift_allocObject();
  DiagramLine.init(lineDiagramConfig:diagramData:hbxViewControllerFactory:axisMetricsFactory:)(a1, a2, a3, a4);
  return v8;
}

uint64_t sub_1BCA3735C(uint64_t a1)
{
  CGFloat v1;
  CGFloat v2;
  CGFloat v3;
  double v4;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  double v24;
  CGFloat v25;
  double v26;
  double v27;
  CGPoint v28;
  CGFloat rect2;
  double v31;
  double v32;
  double v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  CGFloat v39;
  CGAffineTransform v40;
  CGPoint v41;
  CGRect v42;
  CGRect v43;
  CGRect v44;
  CGRect v45;
  CGRect v46;
  CGRect v47;
  CGRect v48;

  v1 = *MEMORY[0x1E0C9D628];
  v2 = *(double *)(MEMORY[0x1E0C9D628] + 8);
  v3 = *(double *)(MEMORY[0x1E0C9D628] + 16);
  v4 = *(double *)(MEMORY[0x1E0C9D628] + 24);
  x = *MEMORY[0x1E0C9D628];
  y = v2;
  width = v3;
  height = v4;
  v35 = *(_QWORD *)(a1 + 16);
  rect2 = v4;
  if (!v35)
    goto LABEL_19;
  v34 = a1 + 32;
  swift_bridgeObjectRetain();
  v9 = 0;
  x = v1;
  y = v2;
  width = v3;
  height = v4;
  v32 = v2;
  v33 = v1;
  v31 = v3;
  do
  {
    v10 = v34 + 56 * v9;
    v11 = *(_QWORD *)(v10 + 40);
    v12 = *(_QWORD *)(v11 + 16);
    if (v12)
    {
      v36 = v9;
      v37 = *(_BYTE *)(v10 + 48);
      swift_bridgeObjectRetain_n();
      v13 = 0;
      while (1)
      {
        v14 = *(_QWORD *)(v11 + 8 * v13 + 32);
        if (!*(_QWORD *)(v14 + 16))
          goto LABEL_8;
        swift_bridgeObjectRetain();
        v15 = sub_1BC9A2C2C(2u);
        if ((v16 & 1) == 0)
          goto LABEL_7;
        v17 = (uint64_t *)(*(_QWORD *)(v14 + 56) + 40 * v15);
        v18 = *v17;
        v19 = v17[2];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        v20 = *(_QWORD *)(v18 + 16);
        if (!v20)
          break;
        if (v20 == 1)
        {
          v21 = 0;
          if (!v19)
            goto LABEL_17;
        }
        else
        {
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v21 = v18;
          if (!v19)
          {
LABEL_17:
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            sub_1BC9A127C(v21);
            goto LABEL_8;
          }
        }
        v38 = v21;
        v22 = (void *)sub_1BCAB5EE0();
        LOBYTE(v40.a) = v37;
        DiagramConfiguration.TextAttributes.toTextAttributes()();
        type metadata accessor for Key(0);
        sub_1BC99F5A0();
        v23 = (void *)sub_1BCAB5E68();
        swift_bridgeObjectRelease();
        objc_msgSend(v22, sel_sizeWithAttributes_, v23);
        v25 = v24;
        v27 = v26;

        CGAffineTransformMakeTranslation(&v40, 0.0, -(v27 + 5.0));
        v41.x = 0.0;
        v41.y = 0.0;
        v28 = CGPointApplyAffineTransform(v41, &v40);

        v42.origin.x = x;
        v42.origin.y = y;
        v42.size.width = width;
        v42.size.height = height;
        v47.origin.x = v28.x;
        v47.origin.y = v28.y;
        v47.size.width = v25;
        v47.size.height = v27;
        v43 = CGRectUnion(v42, v47);
        x = v43.origin.x;
        y = v43.origin.y;
        width = v43.size.width;
        height = v43.size.height;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_1BC9A127C(v38);
LABEL_8:
        if (v12 == ++v13)
        {
          swift_bridgeObjectRelease_n();
          v2 = v32;
          v1 = v33;
          v3 = v31;
          v9 = v36;
          goto LABEL_4;
        }
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_7:
      swift_bridgeObjectRelease();
      goto LABEL_8;
    }
LABEL_4:
    ++v9;
  }
  while (v9 != v35);
  swift_bridgeObjectRelease();
LABEL_19:
  v44.origin.x = x;
  v44.origin.y = y;
  v44.size.width = width;
  v44.size.height = height;
  v39 = CGRectGetWidth(v44);
  v45.origin.x = x;
  v45.origin.y = y;
  v45.size.width = width;
  v45.size.height = height;
  CGRectGetHeight(v45);
  v46.origin.x = x;
  v46.origin.y = y;
  v46.size.width = width;
  v46.size.height = height;
  v48.origin.x = v1;
  v48.origin.y = v2;
  v48.size.width = v3;
  v48.size.height = rect2;
  if (CGRectEqualToRect(v46, v48))
    return 0;
  else
    return *(_QWORD *)&v39;
}

unint64_t sub_1BCA3775C@<X0>(unint64_t result@<X0>, __int16 a2@<W1>, int a3@<W2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  double v19;
  uint64_t v20;
  _QWORD *v21;
  double v22;
  double v23;
  _QWORD *v24;
  void *v25;
  Swift::String_optional v26;
  void *object;
  uint64_t countAndFlagsBits;
  unint64_t v29;
  unint64_t v30;
  double *v31;
  void *v32;
  Swift::String_optional v33;
  void *v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  double *v38;
  __int128 v44;
  uint64_t v45;
  double *v46;
  double v47;
  double v48;
  void *v49;
  id v50;
  id v51;
  id v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  double *v58;
  void *v59;
  id v60;
  id v61;
  id v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  double *v68;
  uint64_t v69;
  uint64_t v70;
  __int128 v71;
  char v72;
  uint64_t v73;

  if ((a3 & 0x800000) == 0)
    goto LABEL_36;
  if ((a3 & 0xFEE0E0) == 0xFEE0E0)
    goto LABEL_36;
  if (!*(_QWORD *)(a6 + 16))
    goto LABEL_36;
  result = sub_1BC9A2C2C(result);
  if ((v12 & 1) == 0)
    goto LABEL_36;
  v13 = *(_QWORD *)(*(_QWORD *)(a6 + 56) + 40 * result);
  swift_bridgeObjectRetain();
  if (a2 == 25)
  {
    v14 = 0;
  }
  else
  {
    DiagramConfiguration.TextAttributes.toTextAttributes()();
    v14 = v15;
  }
  if (HIBYTE(a2) != 25)
  {
    DiagramConfiguration.TextAttributes.toTextAttributes()();
    v16 = v45;
    if (v14 | v45)
      goto LABEL_10;
    goto LABEL_35;
  }
  v16 = 0;
  if (!v14)
  {
LABEL_35:
    result = swift_bridgeObjectRelease();
LABEL_36:
    *(_QWORD *)a7 = 1;
    *(_OWORD *)(a7 + 8) = 0u;
    *(_OWORD *)(a7 + 24) = 0u;
    *(_QWORD *)(a7 + 40) = 0;
    return result;
  }
LABEL_10:
  v17 = *(_QWORD *)(v13 + 16);
  if (!v17)
  {
    result = swift_bridgeObjectRelease();
    v21 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    v24 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    __asm { FMOV            V0.2D, #6.0 }
    if (v14)
      goto LABEL_32;
    goto LABEL_38;
  }
  v70 = v16;
  v69 = v14;
  v19 = *(double *)(v13 + 32);
  v18 = *(double *)(v13 + 40);
  v20 = v17 - 1;
  if (v17 == 1)
  {
    v21 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    v22 = *(double *)(v13 + 40);
    v23 = *(double *)(v13 + 32);
    v24 = (_QWORD *)MEMORY[0x1E0DEE9D8];
LABEL_13:
    swift_bridgeObjectRelease();
    v25 = (void *)sub_1BCAB4FC8();
    v26 = DiagramConfiguration.ValueFormatter.format(value:)((NSNumber)v25);
    object = v26.value._object;

    if (v26.value._object)
      countAndFlagsBits = v26.value._countAndFlagsBits;
    else
      countAndFlagsBits = 1701736270;
    if (!v26.value._object)
      object = (void *)0xE400000000000000;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v21 = sub_1BC9D9A5C(0, v21[2] + 1, 1, v21);
    v14 = v69;
    v30 = v21[2];
    v29 = v21[3];
    if (v30 >= v29 >> 1)
      v21 = sub_1BC9D9A5C((_QWORD *)(v29 > 1), v30 + 1, 1, v21);
    v21[2] = v30 + 1;
    v31 = (double *)&v21[4 * v30];
    *((_QWORD *)v31 + 4) = countAndFlagsBits;
    *((_QWORD *)v31 + 5) = object;
    v31[6] = v23;
    v31[7] = v22;
    v32 = (void *)sub_1BCAB4FC8();
    v33 = DiagramConfiguration.ValueFormatter.format(value:)((NSNumber)v32);
    v34 = v33.value._object;

    if (v33.value._object)
      v35 = v33.value._countAndFlagsBits;
    else
      v35 = 1701736270;
    if (!v33.value._object)
      v34 = (void *)0xE400000000000000;
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = (unint64_t)sub_1BC9D9A5C(0, v24[2] + 1, 1, v24);
      v24 = (_QWORD *)result;
    }
    v37 = v24[2];
    v36 = v24[3];
    if (v37 >= v36 >> 1)
    {
      result = (unint64_t)sub_1BC9D9A5C((_QWORD *)(v36 > 1), v37 + 1, 1, v24);
      v24 = (_QWORD *)result;
    }
    v24[2] = v37 + 1;
    v38 = (double *)&v24[4 * v37];
    *((_QWORD *)v38 + 4) = v35;
    *((_QWORD *)v38 + 5) = v34;
    v38[6] = v19;
    v38[7] = v18;
    v16 = v70;
    __asm { FMOV            V0.2D, #6.0 }
    if (v69)
    {
LABEL_32:
      *((_QWORD *)&v44 + 1) = *((_QWORD *)&_Q0 + 1);
      *(_QWORD *)&v44 = v21;
      if (v16)
      {
LABEL_33:
        *(_QWORD *)&_Q0 = v24;
LABEL_40:
        *(_OWORD *)a7 = v44;
        *(_QWORD *)(a7 + 16) = v14;
        *(_OWORD *)(a7 + 24) = _Q0;
        *(_QWORD *)(a7 + 40) = v16;
        return result;
      }
LABEL_39:
      v71 = v44;
      result = swift_bridgeObjectRelease();
      v44 = v71;
      _Q0 = 0uLL;
      goto LABEL_40;
    }
LABEL_38:
    v73 = *((_QWORD *)&_Q0 + 1);
    result = swift_bridgeObjectRelease();
    *((_QWORD *)&_Q0 + 1) = v73;
    v44 = 0uLL;
    if (v16)
      goto LABEL_33;
    goto LABEL_39;
  }
  v46 = (double *)(v13 + 56);
  v21 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v47 = *(double *)(v13 + 40);
  v48 = *(double *)(v13 + 32);
  v22 = v47;
  v23 = v48;
  v24 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v72 = a5;
  while (1)
  {
    v19 = *(v46 - 1);
    v18 = *v46;
    if (vabdd_f64(v19, v23) < 0.000001)
    {
      if (v18 > v22)
        v22 = *v46;
      if (v47 < v18)
        v18 = v47;
      v19 = v48;
      goto LABEL_47;
    }
    v49 = (void *)sub_1BCAB4FC8();
    if ((a5 & 1) == 0)
    {
      result = (unint64_t)(id)HKNumberFormatterWithDecimalPrecision();
      if (!result)
        goto LABEL_58;
      goto LABEL_55;
    }
    if (a4)
    {
      v50 = objc_msgSend((id)objc_opt_self(), sel_hk_percentNumberFormatter);
      v51 = objc_msgSend(v50, sel_stringFromNumber_, v49);
      goto LABEL_56;
    }
    result = (unint64_t)(id)HKIntegerFormatter();
    if (!result)
      break;
LABEL_55:
    v50 = (id)result;
    v51 = objc_msgSend((id)result, sel_stringFromNumber_, v49);
LABEL_56:
    v52 = v51;

    if (v52)
    {
      v53 = sub_1BCAB5F04();
      v55 = v54;

      goto LABEL_59;
    }
LABEL_58:

    v55 = 0xE400000000000000;
    v53 = 1701736270;
LABEL_59:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v21 = sub_1BC9D9A5C(0, v21[2] + 1, 1, v21);
    v57 = v21[2];
    v56 = v21[3];
    if (v57 >= v56 >> 1)
      v21 = sub_1BC9D9A5C((_QWORD *)(v56 > 1), v57 + 1, 1, v21);
    v21[2] = v57 + 1;
    v58 = (double *)&v21[4 * v57];
    *((_QWORD *)v58 + 4) = v53;
    *((_QWORD *)v58 + 5) = v55;
    v58[6] = v23;
    v58[7] = v22;
    v59 = (void *)sub_1BCAB4FC8();
    if ((v72 & 1) != 0)
    {
      if (a4)
      {
        v60 = objc_msgSend((id)objc_opt_self(), sel_hk_percentNumberFormatter);
        v61 = objc_msgSend(v60, sel_stringFromNumber_, v59);
        goto LABEL_70;
      }
      result = (unint64_t)(id)HKIntegerFormatter();
      if (!result)
        goto LABEL_79;
    }
    else
    {
      result = (unint64_t)(id)HKNumberFormatterWithDecimalPrecision();
      if (!result)
        goto LABEL_72;
    }
    v60 = (id)result;
    v61 = objc_msgSend((id)result, sel_stringFromNumber_, v59);
LABEL_70:
    v62 = v61;

    if (!v62)
    {
LABEL_72:

      v65 = 0xE400000000000000;
      v63 = 1701736270;
      goto LABEL_73;
    }
    v63 = sub_1BCAB5F04();
    v65 = v64;

LABEL_73:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v24 = sub_1BC9D9A5C(0, v24[2] + 1, 1, v24);
    v67 = v24[2];
    v66 = v24[3];
    if (v67 >= v66 >> 1)
      v24 = sub_1BC9D9A5C((_QWORD *)(v66 > 1), v67 + 1, 1, v24);
    v24[2] = v67 + 1;
    v68 = (double *)&v24[4 * v67];
    *((_QWORD *)v68 + 4) = v63;
    *((_QWORD *)v68 + 5) = v65;
    v68[6] = v48;
    v68[7] = v47;
    v22 = v18;
    v23 = v19;
    v48 = v19;
    a5 = v72;
LABEL_47:
    v46 += 2;
    v47 = v18;
    if (!--v20)
      goto LABEL_13;
  }
  __break(1u);
LABEL_79:
  __break(1u);
  return result;
}

uint64_t DiagramLine.init(lineDiagramConfig:diagramData:hbxViewControllerFactory:axisMetricsFactory:)(uint64_t a1, uint64_t *a2, void *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int16 v8;
  int v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  double width;
  double height;
  uint64_t v22;
  char v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  __int16 v34;
  uint64_t v35;
  uint64_t v36;
  char v38;
  uint64_t v39;
  int v40;
  __int16 v41;
  uint64_t v42;
  double y;
  double x;
  int *v45;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  __int16 v57;
  uint64_t v58;
  char v59;
  char v60;
  __int128 v61;
  __int128 v62;
  char v63;
  char v64;
  uint64_t v65;
  __C::CGRect v66;

  v5 = v4;
  v7 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v8 = *(_WORD *)(a1 + 20);
  v9 = *(_DWORD *)(a1 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = *(_BYTE *)(a1 + 32);
  v12 = *(_BYTE *)(a1 + 33);
  v13 = *a2;
  v14 = a2[1];
  v16 = a2[2];
  v15 = a2[3];
  v17 = *((_BYTE *)a2 + 32);
  v18 = a2[5];
  *(_QWORD *)(v4 + 16) = *(_QWORD *)a1;
  *(_QWORD *)(v4 + 24) = v6;
  v41 = v8;
  v42 = v6;
  v39 = v10;
  v40 = v9;
  *(_DWORD *)(v4 + 32) = v9;
  v45 = (int *)(v4 + 32);
  *(_WORD *)(v4 + 36) = v8;
  *(_QWORD *)(v4 + 40) = v10;
  v38 = v11;
  *(_BYTE *)(v4 + 48) = v11;
  *(_BYTE *)(v4 + 49) = v12;
  *(_QWORD *)(v4 + 56) = v13;
  *(_QWORD *)(v4 + 64) = v14;
  *(_QWORD *)(v4 + 72) = v16;
  *(_QWORD *)(v4 + 80) = v15;
  *(_BYTE *)(v4 + 88) = v17;
  *(_QWORD *)(v4 + 96) = v18;
  *(_QWORD *)&v61 = v7;
  *((_QWORD *)&v61 + 1) = v6;
  WORD2(v62) = v8;
  LODWORD(v62) = v9;
  *((_QWORD *)&v62 + 1) = v10;
  v63 = v11;
  v64 = v12;
  v48 = 0x404030100080700;
  LOWORD(v49) = 258;
  v50 = 0;
  BYTE2(v51) = -2;
  LOWORD(v51) = -7968;
  swift_bridgeObjectRetain();
  v19 = swift_bridgeObjectRetain();
  *(_QWORD *)(v4 + 160) = sub_1BCA3A2AC(v19, (uint64_t *)&v61, (uint64_t)&v48);
  *(_QWORD *)&v61 = v13;
  *((_QWORD *)&v61 + 1) = v14;
  *(_QWORD *)&v62 = v16;
  *((_QWORD *)&v62 + 1) = v15;
  v63 = v17;
  v65 = v18;
  v66 = DiagramData.diagramBounds(forceNonZeroSize:)(1);
  y = v66.origin.y;
  x = v66.origin.x;
  width = v66.size.width;
  height = v66.size.height;
  *(_QWORD *)&v61 = v13;
  *((_QWORD *)&v61 + 1) = v14;
  *(_QWORD *)&v62 = v16;
  *((_QWORD *)&v62 + 1) = v15;
  v63 = v17;
  v65 = v18;
  v48 = v7;
  v49 = v42;
  WORD2(v50) = v41;
  LODWORD(v50) = v40;
  v51 = v39;
  LOBYTE(v52) = v38;
  BYTE1(v52) = v12;
  v22 = sub_1BCA3A4B8((uint64_t)&v61, &v48);
  swift_bridgeObjectRelease();
  v54 = v7;
  v55 = v42;
  v57 = v41;
  v56 = v40;
  v58 = v39;
  v59 = v38;
  v60 = v12;
  v23 = *(_BYTE *)(v5 + 88);
  v24 = *(_QWORD *)(v5 + 96);
  v25 = *(_OWORD *)(v5 + 72);
  v61 = *(_OWORD *)(v5 + 56);
  v62 = v25;
  v63 = v23;
  v65 = v24;
  v26 = *(_QWORD *)(v5 + 160);
  swift_bridgeObjectRetain();
  sub_1BCA3A9E0(&v54, &v61, v26, (double *)&v48);
  v27 = v48;
  v28 = v49;
  v29 = v50;
  v30 = v51;
  v31 = v52;
  v32 = v53;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v5 + 112) = v27;
  *(_QWORD *)(v5 + 120) = v28;
  *(_QWORD *)(v5 + 128) = v29;
  *(_QWORD *)(v5 + 136) = v30;
  *(_QWORD *)(v5 + 144) = v31;
  *(_QWORD *)(v5 + 152) = v32;
  v33 = *v45;
  v34 = *((_WORD *)v45 + 2);
  v54 = *(_QWORD *)(v5 + 24);
  WORD2(v55) = v34;
  LODWORD(v55) = v33;
  v48 = v27;
  v49 = v28;
  v50 = v29;
  v51 = v30;
  LOBYTE(v52) = 0;
  sub_1BCA31C7C(a4, (uint64_t)&v61);
  type metadata accessor for DiagramAxis();
  swift_allocObject();
  sub_1BCA2F0F8(&v54, (uint64_t)&v48, v22, 0, v31, v32, 0, a3, x, y, width, height, (uint64_t)&v61);
  v36 = v35;
  sub_1BCA3B12C(a4);
  *(_QWORD *)(v5 + 104) = v36;
  return v5;
}

double sub_1BCA38094()
{
  return sub_1BCA2F530();
}

double sub_1BCA380B4()
{
  uint64_t v0;
  uint64_t v1;
  double v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;

  v1 = *(_QWORD *)(v0 + 104);
  v2 = 0.0;
  if ((*(_BYTE *)(v1 + 144) & 1) == 0)
    v2 = *(double *)(v1 + 112);
  v3 = *(_QWORD *)(v1 + 40);
  if (v3
    && (unint64_t)*(unsigned __int8 *)(v1 + 68) << 32 != 0x300000000
    && (*(_DWORD *)(v1 + 72) & 0xFF000000) != 0x2000000)
  {
    swift_bridgeObjectRetain();
    DiagramConfiguration.TextAttributes.toTextAttributes()();
    v4 = sub_1BC99F5E8(v3);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1BC99F55C(v4);
    swift_bridgeObjectRelease();
  }
  if ((*(_QWORD *)(v1 + 64) & 0xFE00000000 | 0x100000000) != 0x300000000)
  {
    DiagramConfiguration.TextAttributes.toTextAttributes()();
    v5 = (void *)sub_1BCAB5EE0();
    type metadata accessor for Key(0);
    sub_1BC99F5A0();
    v6 = (void *)sub_1BCAB5E68();
    swift_bridgeObjectRelease();
    objc_msgSend(v5, sel_sizeWithAttributes_, v6);

  }
  return v2;
}

void (*sub_1BCA382C0())(void *a1, uint64_t a2, CGFloat a3, CGFloat a4)
{
  swift_retain();
  return sub_1BCA3B180;
}

void sub_1BCA382F0(void *a1, uint64_t a2, uint64_t a3, CGFloat a4, CGFloat a5)
{
  uint64_t v5;
  void *v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  uint64_t v13;
  CGFloat v14;
  CGFloat v15;
  CGFloat v16;
  double v17;
  double v18;
  double v19;
  id v20;
  unint64_t v21;
  CGFloat v22;
  CGFloat v23;
  CGFloat v24;
  CGFloat v25;
  CGFloat v26;
  CGFloat v27;
  double v28;
  double v29;
  uint64_t v30;
  CGFloat x;
  double v32;
  CGFloat y;
  CGFloat v34;
  CGFloat height;
  CGFloat width;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char v41;
  double *v42;
  uint64_t v43;
  CGFloat v44;
  CGFloat v45;
  uint64_t v46;
  CGFloat v47;
  CGFloat v48;
  CGFloat v49;
  BOOL v50;
  CGFloat v51;
  CGFloat v52;
  CGFloat v53;
  CGFloat v54;
  CGFloat v55;
  CGFloat v56;
  uint64_t inited;
  char v58;
  char v59;
  CGFloat v60;
  CGFloat v61;
  double v62;
  double v63;
  double v64;
  double v65;
  uint64_t v66;
  CGFloat v67;
  CGFloat v68;
  double v69;
  double v70;
  double v71;
  id v72;
  id v73;
  double v78;
  double v79;
  uint64_t v80;
  id v81;
  uint64_t v82;
  uint64_t v83;
  CGFloat v84;
  CGFloat v85;
  CGFloat v86;
  CGFloat v87;
  CGFloat v88;
  CGFloat rect;
  char rect_8;
  char v91;
  CGFloat v92;
  CGFloat v93;
  double v94;
  double v95;
  double v96;
  double v97;
  CGFloat v98;
  uint64_t v99;
  double v100;
  CGFloat v101;
  unint64_t v102;
  CGFloat v103;
  uint64_t v104;
  CGAffineTransform t2;
  CGAffineTransform t1;
  CGFloat v107;
  double v108;
  double v109;
  double v110;
  CGPoint v111;
  __C::CGRect v112;
  CGRect v113;
  CGRect v114;
  CGRect v115;
  CGRect v116;
  CGRect v117;

  v5 = a3;
  v6 = *(void **)a2;
  v8 = *(double *)(a2 + 8);
  v7 = *(double *)(a2 + 16);
  v10 = *(double *)(a2 + 24);
  v9 = *(double *)(a2 + 32);
  v11 = *(double *)(a2 + 40);
  v12 = *(double *)(a2 + 48);
  v13 = *(_QWORD *)(a3 + 16);
  v83 = *(_QWORD *)(v13 + 16);
  v87 = v7;
  v88 = v8;
  v85 = v9;
  v86 = v10;
  v84 = v11;
  v101 = v12;
  if (!v83)
  {
    v20 = v6;
    v60 = v8;
    v61 = v7;
    v62 = v10;
    v63 = v9;
    v64 = v11;
    v65 = v12;
    goto LABEL_23;
  }
  v14 = *(double *)(a3 + 56);
  v15 = *(double *)(a3 + 64);
  v92 = *(double *)(a3 + 80);
  v93 = *(double *)(a3 + 72);
  v91 = *(_BYTE *)(a3 + 88);
  v16 = *(double *)(a3 + 96);
  v104 = *(_QWORD *)(*(_QWORD *)&v16 + 16);
  v82 = v13 + 32;
  v17 = *(double *)(MEMORY[0x1E0C9D628] + 8);
  v97 = *MEMORY[0x1E0C9D628];
  v18 = *(double *)(MEMORY[0x1E0C9D628] + 16);
  v19 = *(double *)(MEMORY[0x1E0C9D628] + 24);
  v20 = v6;
  swift_bridgeObjectRetain();
  v21 = 0;
  v22 = v17;
  v95 = v18;
  v96 = v17;
  v23 = v18;
  v24 = v19;
  v94 = v19;
  v80 = v13;
  v81 = v20;
  v78 = v15;
  v79 = v14;
  do
  {
    if (v21 >= *(_QWORD *)(v13 + 16))
    {
      __break(1u);
      JUMPOUT(0x1BCA38A98);
    }
    v102 = v21;
    v30 = v82 + 32 * v21;
    v99 = *(unsigned __int8 *)(v30 + 5);
    rect_8 = *(_BYTE *)(v30 + 8);
    t1.a = v14;
    t1.b = v15;
    t1.c = v93;
    t1.d = v92;
    LOBYTE(t1.tx) = v91;
    t1.ty = v16;
    swift_bridgeObjectRetain();
    v112 = DiagramData.diagramBounds(forceNonZeroSize:)(1);
    x = v97;
    v32 = v97;
    y = v22;
    v34 = v23;
    height = v24;
    if (v104)
    {
      width = v112.size.width;
      swift_bridgeObjectRetain();
      v37 = 0;
      y = v22;
      v34 = v23;
      height = v24;
      v38 = v104;
      while (1)
      {
        v39 = *(_QWORD *)(*(_QWORD *)&v16 + 8 * v37 + 32);
        if (*(_QWORD *)(v39 + 16))
        {
          swift_bridgeObjectRetain();
          v40 = sub_1BC9A2C2C(2u);
          if ((v41 & 1) != 0)
          {
            v42 = *(double **)(*(_QWORD *)(v39 + 56) + 40 * v40);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            v43 = *((_QWORD *)v42 + 2);
            if (v43)
            {
              v45 = v42[4];
              v44 = v42[5];
              if (v43 == 1)
              {
                v46 = 0;
              }
              else
              {
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                v46 = (uint64_t)v42;
              }
              v116.size.height = 0.0;
              v113.origin.x = x;
              v113.origin.y = y;
              v113.size.width = v34;
              v113.size.height = height;
              v116.origin.x = v45;
              v116.origin.y = v44;
              v116.size.width = width;
              v114 = CGRectUnion(v113, v116);
              x = v114.origin.x;
              y = v114.origin.y;
              v34 = v114.size.width;
              height = v114.size.height;
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              sub_1BC9A127C(v46);
              v38 = v104;
              goto LABEL_8;
            }
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
          swift_bridgeObjectRelease();
        }
LABEL_8:
        if (v38 == ++v37)
        {
          swift_bridgeObjectRelease();
          v13 = v80;
          v20 = v81;
          v15 = v78;
          v14 = v79;
          v23 = v95;
          v22 = v96;
          v24 = v94;
          v32 = x;
          x = v97;
          break;
        }
      }
    }
    rect = v32;
    v47 = y;
    v48 = v34;
    v49 = height;
    v117.origin.x = x;
    v117.origin.y = v22;
    v117.size.width = v23;
    v117.size.height = v24;
    v50 = CGRectEqualToRect(*(CGRect *)&v32, v117);
    v51 = v88;
    v52 = v87;
    v53 = v86;
    v54 = v85;
    v55 = v84;
    v56 = v101;
    if (!v50)
    {
      sub_1BC998AB0(0, &qword_1ED6C5B60, (uint64_t (*)(uint64_t))sub_1BC9A0FB8, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1BCABE680;
      *(CGFloat *)(inited + 32) = v14;
      *(CGFloat *)(inited + 40) = v15;
      *(CGFloat *)(inited + 48) = v93;
      *(CGFloat *)(inited + 56) = v92;
      *(_BYTE *)(inited + 64) = v91;
      *(CGFloat *)(inited + 72) = v16;
      *(_BYTE *)(inited + 80) = rect_8;
      swift_bridgeObjectRetain();
      sub_1BCA3735C(inited);
      v59 = v58;
      swift_setDeallocating();
      sub_1BC9A0FB8();
      swift_arrayDestroy();
      v51 = v88;
      v52 = v87;
      v53 = v86;
      v54 = v85;
      v55 = v84;
      v56 = v101;
      if ((v59 & 1) == 0)
      {
        v115.origin.x = rect;
        v115.origin.y = y;
        v115.size.width = v34;
        v115.size.height = height;
        v111.y = CGRectGetMaxY(v115);
        t1.a = v88;
        t1.b = v87;
        t1.c = v86;
        t1.d = v85;
        t1.tx = v84;
        t1.ty = v101;
        v111.x = 0.0;
        CGPointApplyAffineTransform(v111, &t1);
        __asm { BR              X8 }
      }
    }
    v98 = v56;
    v25 = v55;
    v26 = v54;
    v27 = v53;
    v28 = v52;
    v29 = v51;
    v21 = v102 + 1;
    swift_bridgeObjectRelease();
    v23 = v95;
    v22 = v96;
    v24 = v94;
  }
  while (v102 + 1 != v83);
  swift_bridgeObjectRelease();
  v5 = a3;
  v60 = v29;
  v61 = v28;
  v62 = v27;
  v63 = v26;
  v64 = v25;
  v65 = v98;
LABEL_23:
  v100 = v65;
  v66 = *(_QWORD *)(v5 + 96);
  t1.a = a4;
  t1.b = a5;
  *(_QWORD *)&t1.c = a1;
  *(_QWORD *)&t1.d = v6;
  t1.tx = v60;
  t1.ty = v61;
  v107 = v62;
  v108 = v63;
  v109 = v64;
  v110 = v65;
  t2.a = 2.56684058e-289;
  LOWORD(t2.b) = 258;
  t2.c = 0.0;
  BYTE2(t2.d) = -2;
  LOWORD(t2.d) = -7968;
  v67 = v60;
  v68 = v61;
  v103 = v61;
  v69 = v62;
  v70 = v64;
  v71 = v63;
  v72 = a1;
  v73 = v20;
  sub_1BCA38AA8((uint64_t)&t1, v66, (uint64_t)&t2);
  t1.a = a4;
  t1.b = a5;
  *(_QWORD *)&t1.c = v72;
  *(_QWORD *)&t1.d = v6;
  t1.tx = v67;
  t1.ty = v68;
  v107 = v69;
  v108 = v71;
  v109 = v70;
  v110 = v100;
  t2.a = 2.56684058e-289;
  LOWORD(t2.b) = 258;
  t2.c = 0.0;
  BYTE2(t2.d) = -2;
  LOWORD(t2.d) = -7968;
  sub_1BCA3BFB4((uint64_t)&t1, 0, (char *)&t2);
  t1.a = a4;
  t1.b = a5;
  *(_QWORD *)&t1.c = v72;
  *(_QWORD *)&t1.d = v6;
  t1.tx = v67;
  t1.ty = v103;
  v107 = v69;
  v108 = v71;
  v109 = v70;
  v110 = v100;
  t2.a = 2.56684058e-289;
  LOWORD(t2.b) = 258;
  t2.c = 0.0;
  BYTE2(t2.d) = -2;
  LOWORD(t2.d) = -7968;
  sub_1BCA3BFB4((uint64_t)&t1, 1, (char *)&t2);
  t1.a = a4;
  t1.b = a5;
  *(_QWORD *)&t1.c = v72;
  *(_QWORD *)&t1.d = v6;
  t1.tx = v67;
  t1.ty = v103;
  v107 = v69;
  v108 = v71;
  v109 = v70;
  v110 = v100;
  sub_1BCA3942C((uint64_t)&t1);
  *(_QWORD *)&t1.a = v6;
  t1.b = v88;
  t1.c = v87;
  t1.d = v86;
  t1.tx = v85;
  t1.ty = v84;
  v107 = v101;
  sub_1BCA2F854((uint64_t)v72, (uint64_t *)&t1, a4, a5);

}

uint64_t sub_1BCA38AA8(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;

  if (*(_QWORD *)(a2 + 16))
  {
    v5 = *(_BYTE *)(a3 + 5);
    v6 = *(_QWORD *)(v3 + 16);
    v11 = *(_QWORD *)(v6 + 16);
    *(id *)(result + 24);
    result = swift_bridgeObjectRetain();
    v10 = v6;
    v7 = v6 + 40;
    if (!v11)
      goto LABEL_5;
    if (*(_QWORD *)(v10 + 16))
    {
      v5 = *(_BYTE *)(v7 - 3);
LABEL_5:
      v8 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + 16);
      swift_bridgeObjectRetain();
      if (v8)
      {
        sub_1BC9A2C2C(2u);
        if ((v9 & 1) != 0)
          swift_bridgeObjectRetain();
      }
      DiagramConfiguration.Color.toColor()();
      DiagramConfiguration.LineWidth.toPoints()();
      __asm { BR              X9 }
    }
    __break(1u);
  }
  return result;
}

void sub_1BCA393D0()
{
  sub_1BCAB65C4();
  __break(1u);
  JUMPOUT(0x1BCA3941CLL);
}

void sub_1BCA3942C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  double *v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  CGPoint v9;
  void *v10;
  void *v11;
  double v12;
  double v13;
  double v14;
  double v15;
  uint64_t v16;
  id v17;
  void *v18;
  void *v19;
  id v20;
  void *v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  id v31;
  uint64_t v32;
  CGAffineTransform v33;
  CGPoint v34;

  v2 = *(_QWORD *)(v1 + 160);
  v25 = *(_QWORD *)(v2 + 16);
  if (v25)
  {
    v27 = *(_QWORD *)(a1 + 16);
    v29 = *(_OWORD *)(a1 + 48);
    v30 = *(_OWORD *)(a1 + 32);
    v24 = v2 + 32;
    v28 = *(_OWORD *)(a1 + 64);
    swift_bridgeObjectRetain();
    v3 = 0;
    v23 = v2;
    while (1)
    {
      if (v3 >= *(_QWORD *)(v2 + 16))
      {
        __break(1u);
        goto LABEL_13;
      }
      v4 = (double *)(v24 + 24 * v3);
      v5 = *(_QWORD *)v4;
      v6 = *(_QWORD *)(*(_QWORD *)v4 + 16);
      if (v6)
        break;
LABEL_3:
      if (++v3 == v25)
      {
        swift_bridgeObjectRelease();
        return;
      }
    }
    v26 = v3;
    v7 = v4[1];
    v31 = (id)objc_opt_self();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    v8 = v5 + 56;
    while (1)
    {
      v32 = v6;
      v34 = *(CGPoint *)(v8 - 8);
      *(_OWORD *)&v33.a = v30;
      *(_OWORD *)&v33.c = v29;
      *(_OWORD *)&v33.tx = v28;
      v9 = CGPointApplyAffineTransform(v34, &v33);
      swift_bridgeObjectRetain();
      v10 = (void *)sub_1BCAB5EE0();
      type metadata accessor for Key(0);
      sub_1BC99F5A0();
      v11 = (void *)sub_1BCAB5E68();
      objc_msgSend(v10, sel_sizeWithAttributes_, v11);
      v13 = v12;
      v15 = v14;

      sub_1BC9AFE08();
      v16 = swift_allocObject();
      *(_OWORD *)(v16 + 16) = xmmword_1BCABF370;
      v17 = objc_allocWithZone(MEMORY[0x1E0D2F8A0]);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v18 = (void *)sub_1BCAB5EE0();
      swift_bridgeObjectRelease();
      v19 = (void *)sub_1BCAB5E68();
      swift_bridgeObjectRelease();
      v20 = objc_msgSend(v17, sel_initWithText_inRect_withAttributes_, v18, v19, v9.x + v13 * -0.5, v9.y - v7 - v15, v13, v15);

      if (!v20)
        break;
      *(_QWORD *)(v16 + 32) = v20;
      *(_QWORD *)&v33.a = v16;
      sub_1BCAB6024();
      sub_1BCA3B1E0();
      v21 = (void *)sub_1BCAB600C();
      swift_bridgeObjectRelease();
      v22 = objc_msgSend((id)objc_opt_self(), sel_clearColor);
      objc_msgSend(v31, sel_drawStrings_outlineWidth_outlineColor_context_, v21, v22, v27, 8.0);
      swift_bridgeObjectRelease();

      v8 += 32;
      v6 = v32 - 1;
      if (v32 == 1)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        v2 = v23;
        v3 = v26;
        goto LABEL_3;
      }
    }
LABEL_13:
    __break(1u);
  }
}

uint64_t DiagramLine.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t DiagramLine.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

double sub_1BCA397F4()
{
  return sub_1BCA2F530();
}

double sub_1BCA39818()
{
  return sub_1BCA380B4();
}

void (*sub_1BCA39838())(void *a1, uint64_t a2, CGFloat a3, CGFloat a4)
{
  swift_retain();
  return sub_1BCA3B180;
}

uint64_t sub_1BCA3986C(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  BOOL v21;

  v2 = result;
  v3 = *(_QWORD *)(v1 + 24);
  v4 = *(_QWORD **)v1;
  v5 = v3 >> 1;
  if ((v3 & 1) == 0 || (result = swift_isUniquelyReferenced_nonNull(), *(_QWORD *)v1 = v4, (result & 1) == 0))
  {
    v9 = v4;
    goto LABEL_9;
  }
  v6 = *(_QWORD *)(v1 + 16);
  v7 = v5 - v6;
  if (__OFSUB__(v5, v6))
  {
LABEL_39:
    __break(1u);
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v8 = *(_QWORD *)(v1 + 8);
  sub_1BCAB67E0();
  swift_unknownObjectRetain();
  result = swift_dynamicCastClass();
  if (!result)
  {
    swift_unknownObjectRelease();
    result = MEMORY[0x1E0DEE9D8];
  }
  v9 = *(_QWORD **)(result + 16);
  if (v8 + 16 * v6 + 16 * v7 == result + 16 * (_QWORD)v9 + 32)
    goto LABEL_31;
  result = swift_release();
  while (1)
  {
    if (v7 >= v2)
      goto LABEL_28;
    v9 = *(_QWORD **)v1;
LABEL_9:
    v7 = *(_QWORD *)(v1 + 16);
    v10 = v5 - v7;
    if (__OFSUB__(v5, v7))
    {
      __break(1u);
      goto LABEL_35;
    }
    v11 = *(_QWORD *)(v1 + 8);
    if (v10 <= v2 ? v2 : v5 - v7)
      break;
    v4 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    if (v5 >= v7)
      goto LABEL_17;
LABEL_30:
    __break(1u);
LABEL_31:
    v19 = *(_QWORD *)(result + 24);
    result = swift_release();
    v20 = (v19 >> 1) - (_QWORD)v9;
    v21 = __OFADD__(v7, v20);
    v7 += v20;
    if (v21)
      goto LABEL_40;
  }
  sub_1BC998AB0(0, &qword_1ED6C71D8, (uint64_t (*)(uint64_t))type metadata accessor for CGPoint, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  v4 = (_QWORD *)swift_allocObject();
  result = _swift_stdlib_malloc_size(v4);
  v13 = result - 32;
  if (result < 32)
    v13 = result - 17;
  v4[2] = v10;
  v4[3] = 2 * (v13 >> 4);
  if (v5 < v7)
    goto LABEL_30;
LABEL_17:
  if ((v10 & 0x8000000000000000) == 0)
  {
    v14 = (unint64_t)(v4 + 4);
    v15 = (_QWORD *)(v11 + 16 * v7);
    if (v15 >= &v4[2 * v10 + 4] || v14 >= (unint64_t)&v15[2 * v10])
    {
      memcpy(v4 + 4, v15, 16 * v10);
      if (!__OFSUB__(0, v7))
      {
        v17 = v4[2];
        v18 = v7 + v17;
        if (!__OFADD__(v7, v17))
        {
          if (v18 >= v7)
          {
            result = swift_unknownObjectRelease();
            if ((v18 & 0x8000000000000000) == 0)
            {
              *(_QWORD *)(v1 + 8) = v14 - 16 * v7;
              *(_QWORD *)(v1 + 16) = v7;
              *(_QWORD *)(v1 + 24) = (2 * v18) | 1;
LABEL_28:
              *(_QWORD *)v1 = v4;
              return result;
            }
            goto LABEL_38;
          }
LABEL_37:
          __break(1u);
LABEL_38:
          __break(1u);
          goto LABEL_39;
        }
LABEL_36:
        __break(1u);
        goto LABEL_37;
      }
LABEL_35:
      __break(1u);
      goto LABEL_36;
    }
  }
LABEL_41:
  result = sub_1BCAB6624();
  __break(1u);
  return result;
}

uint64_t sub_1BCA39AEC(uint64_t *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t))
{
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  BOOL v31;
  uint64_t v32;
  uint64_t result;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(uint64_t, uint64_t);
  char *v37;
  uint64_t v38;
  char *__dst;

  v6 = v4[2];
  v7 = v4[3] >> 1;
  v8 = v7 - v6;
  if (__OFSUB__(v7, v6))
  {
    __break(1u);
    goto LABEL_32;
  }
  v10 = *a1;
  v11 = *(_QWORD *)(*a1 + 16);
  v30 = __OFSUB__(v11, a2);
  v12 = v11 - a2;
  if (v30)
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  v14 = v12 - a3;
  if (__OFSUB__(v12, a3))
  {
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  v15 = v8 - a2;
  if (__OFSUB__(v8, a2))
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  v30 = __OFSUB__(v15, v14);
  v16 = v15 - v14;
  if (v30)
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  v38 = v16;
  __dst = (char *)(v10 + 32);
  v18 = sub_1BCA3A034(v8);
  v37 = (char *)(v10 + 32 + 16 * a2 + 16 * a3);
  if (v18)
  {
    v36 = a4;
    if (a2 < 0)
      goto LABEL_46;
    v19 = v18;
    v20 = v4[2];
    v21 = (char *)(v4[1] + 16 * v20);
    v22 = &v21[16 * a2];
    if (__dst != v21 || __dst >= v22)
      memmove(__dst, v21, 16 * a2);
    v36(v10 + 32 + 16 * a2, a3);
    if (v14 < 0)
      goto LABEL_46;
    v23 = &v22[16 * v38];
    if (v37 != v23 || v37 >= &v23[16 * v14])
      memmove(v37, v23, 16 * v14);
    *(_QWORD *)(v19 + 16) = 0;
    swift_release();
LABEL_26:
    swift_retain();
    result = swift_unknownObjectRelease();
    if (!__OFSUB__(0, v20))
    {
      v34 = *(_QWORD *)(v10 + 16);
      v30 = __OFADD__(v20, v34);
      v35 = v20 + v34;
      if (!v30)
      {
        if (v35 >= v20)
        {
          if ((v35 & 0x8000000000000000) == 0)
          {
            *v4 = v10;
            v4[1] = &__dst[-16 * v20];
            v4[2] = v20;
            v4[3] = (2 * v35) | 1;
            return result;
          }
          goto LABEL_39;
        }
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        goto LABEL_40;
      }
LABEL_37:
      __break(1u);
      goto LABEL_38;
    }
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  v25 = (void (*)(char *, uint64_t))a4;
  v20 = v4[2];
  v26 = v20 + a2;
  if (__OFADD__(v20, a2))
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  if (v26 < v20)
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  if (__OFSUB__(v26, v20))
  {
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  v27 = v4[1];
  memcpy(__dst, (const void *)(v27 + 16 * v20), 16 * a2);
  v25(&__dst[16 * a2], a3);
  v28 = v26 + v38;
  if (__OFADD__(v26, v38))
  {
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
  v29 = v4[3] >> 1;
  v30 = __OFSUB__(v29, v28);
  v31 = v29 < v28;
  v32 = v29 - v28;
  if (v31)
  {
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
  if (!v30)
  {
    memcpy(v37, (const void *)(v27 + 16 * v28), 16 * v32);
    goto LABEL_26;
  }
LABEL_45:
  __break(1u);
LABEL_46:
  result = sub_1BCAB6624();
  __break(1u);
  return result;
}

uint64_t sub_1BCA39D5C(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_QWORD *)(v1 + 16);
  v3 = *(_QWORD *)(v1 + 24);
  v4 = v3 >> 1;
  v5 = __OFSUB__(v3 >> 1, v2);
  v6 = (v3 >> 1) - v2;
  if (v5)
  {
    __break(1u);
    goto LABEL_12;
  }
  v7 = result - v6;
  if (__OFSUB__(result, v6))
  {
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (!v7)
    return result;
  sub_1BCAB67E0();
  swift_unknownObjectRetain();
  result = swift_dynamicCastClass();
  if (!result)
  {
    swift_unknownObjectRelease();
    result = MEMORY[0x1E0DEE9D8];
  }
  v8 = *(_QWORD *)(result + 16);
  v5 = __OFADD__(v8, v7);
  v9 = v8 + v7;
  if (v5)
    goto LABEL_13;
  *(_QWORD *)(result + 16) = v9;
  result = swift_release();
  v10 = v4 + v7;
  if (__OFADD__(v4, v7))
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (v10 < 0)
  {
LABEL_15:
    __break(1u);
    return result;
  }
  *(_QWORD *)(v1 + 24) = v3 & 1 | (2 * v10);
  return result;
}

uint64_t sub_1BCA39E10(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  BOOL v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  int64_t v28;
  uint64_t v29;

  v8 = (a6 >> 1) - a5;
  if (__OFSUB__(a6 >> 1, a5))
  {
    __break(1u);
LABEL_34:
    if (v8 >= v7)
      goto LABEL_21;
LABEL_18:
    if (v8 + 0x4000000000000000 >= 0)
    {
      v8 *= 2;
      goto LABEL_21;
    }
    __break(1u);
    goto LABEL_37;
  }
  v7 = a2;
  v6 = result;
  if ((a6 & 1) == 0)
    goto LABEL_34;
  sub_1BCAB67E0();
  swift_unknownObjectRetain();
  v11 = swift_dynamicCastClass();
  if (!v11)
  {
    swift_unknownObjectRelease();
    v11 = MEMORY[0x1E0DEE9D8];
  }
  v12 = *(_QWORD *)(v11 + 16);
  v13 = a4 + 16 * a5 + 16 * v8;
  if (v13 == v11 + 16 * v12 + 32)
  {
    v15 = *(_QWORD *)(v11 + 24);
    result = swift_release();
    v16 = (v15 >> 1) - v12;
    v14 = v8 + v16;
    if (__OFADD__(v8, v16))
    {
LABEL_37:
      __break(1u);
      goto LABEL_38;
    }
  }
  else
  {
    swift_release();
    v14 = v8;
  }
  swift_unknownObjectRetain();
  v17 = swift_dynamicCastClass();
  if (v14 < v7)
  {
    if (!v17)
    {
      swift_unknownObjectRelease();
      v17 = MEMORY[0x1E0DEE9D8];
    }
    v18 = *(_QWORD *)(v17 + 16);
    if (v13 == v17 + 16 * v18 + 32)
    {
      v20 = *(_QWORD *)(v17 + 24);
      result = swift_release();
      v21 = (v20 >> 1) - v18;
      v22 = __OFADD__(v8, v21);
      v8 += v21;
      if (v22)
      {
LABEL_38:
        __break(1u);
        goto LABEL_39;
      }
    }
    else
    {
      result = swift_release();
    }
    goto LABEL_18;
  }
  if (!v17)
  {
    swift_unknownObjectRelease();
    v17 = MEMORY[0x1E0DEE9D8];
  }
  v19 = *(_QWORD *)(v17 + 16);
  if (v13 == v17 + 16 * v19 + 32)
  {
    v23 = *(_QWORD *)(v17 + 24);
    result = swift_release();
    v24 = (v23 >> 1) - v19;
    v22 = __OFADD__(v8, v24);
    v8 += v24;
    if (!v22)
      goto LABEL_21;
LABEL_39:
    __break(1u);
    return result;
  }
  swift_release();
LABEL_21:
  if (v8 <= v7)
    v25 = v7;
  else
    v25 = v8;
  if (v25 <= v6)
    v26 = v6;
  else
    v26 = v25;
  if (!v26)
    return MEMORY[0x1E0DEE9D8];
  sub_1BC998AB0(0, &qword_1ED6C71D8, (uint64_t (*)(uint64_t))type metadata accessor for CGPoint, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  v27 = (_QWORD *)swift_allocObject();
  v28 = _swift_stdlib_malloc_size(v27);
  v29 = v28 - 32;
  if (v28 < 32)
    v29 = v28 - 17;
  v27[2] = v6;
  v27[3] = 2 * (v29 >> 4);
  return (uint64_t)v27;
}

uint64_t (*sub_1BCA3A024())()
{
  return nullsub_1;
}

uint64_t sub_1BCA3A034(uint64_t a1)
{
  _QWORD *v1;
  int64_t isUniquelyReferenced_nonNull;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t result;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  isUniquelyReferenced_nonNull = swift_isUniquelyReferenced_nonNull();
  if (!(_DWORD)isUniquelyReferenced_nonNull)
    return 0;
  v6 = v1[2];
  v5 = v1[3];
  v7 = (v5 >> 1) - v6;
  if (__OFSUB__(v5 >> 1, v6))
  {
    __break(1u);
    goto LABEL_20;
  }
  v8 = v1[1];
  if ((v5 & 1) == 0)
    goto LABEL_8;
  sub_1BCAB67E0();
  swift_unknownObjectRetain();
  v9 = swift_dynamicCastClass();
  if (!v9)
  {
    swift_unknownObjectRelease();
    v9 = MEMORY[0x1E0DEE9D8];
  }
  v10 = *(_QWORD *)(v9 + 16);
  if (v8 + 16 * v6 + 16 * v7 != v9 + 16 * v10 + 32)
  {
    swift_release();
LABEL_8:
    v11 = v7;
    goto LABEL_10;
  }
  v12 = *(_QWORD *)(v9 + 24);
  result = swift_release();
  v14 = (v12 >> 1) - v10;
  v15 = __OFADD__(v7, v14);
  v11 = v7 + v14;
  if (!v15)
  {
LABEL_10:
    if (v11 < a1)
      return 0;
    sub_1BCAB67E0();
    swift_unknownObjectRetain();
    a1 = swift_dynamicCastClass();
    if (!a1)
    {
      swift_unknownObjectRelease();
      a1 = MEMORY[0x1E0DEE9D8];
    }
    v16 = v8 + 16 * v6 - a1;
    v17 = v16 - 32;
    v18 = v16 - 17;
    if (v17 >= 0)
      v18 = v17;
    isUniquelyReferenced_nonNull = v7 + (v18 >> 4);
    if (!__OFADD__(v7, v18 >> 4))
    {
      v4 = *(_QWORD *)(a1 + 16);
      if (isUniquelyReferenced_nonNull >= v4)
        return a1;
LABEL_21:
      sub_1BCA3B5FC(isUniquelyReferenced_nonNull, v4, 0);
      return a1;
    }
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  __break(1u);
  return result;
}

uint64_t sub_1BCA3A1A0(uint64_t a1, uint64_t a2)
{
  int64_t v2;
  uint64_t v3;
  char v6;
  uint64_t v7;
  char *v8;
  char v9;
  char v10;
  char v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  __int128 v16;
  __int128 v17;
  uint64_t v18;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = MEMORY[0x1E0DEE9D8];
  if (v2)
  {
    v16 = *(_OWORD *)(a2 + 16);
    v17 = *(_OWORD *)a2;
    v6 = *(_BYTE *)(a2 + 32);
    v7 = *(_QWORD *)(a2 + 40);
    v18 = MEMORY[0x1E0DEE9D8];
    sub_1BC9BAD68(0, v2, 0);
    v3 = v18;
    v8 = (char *)(a1 + 40);
    v9 = v6 & 1;
    do
    {
      v11 = *v8;
      v8 += 32;
      v10 = v11;
      sub_1BC9A113C(a2);
      v13 = *(_QWORD *)(v18 + 16);
      v12 = *(_QWORD *)(v18 + 24);
      if (v13 >= v12 >> 1)
        sub_1BC9BAD68(v12 > 1, v13 + 1, 1);
      *(_QWORD *)(v18 + 16) = v13 + 1;
      v14 = v18 + 56 * v13;
      *(_OWORD *)(v14 + 32) = v17;
      *(_OWORD *)(v14 + 48) = v16;
      *(_BYTE *)(v14 + 64) = v9;
      *(_QWORD *)(v14 + 72) = v7;
      *(_BYTE *)(v14 + 80) = v10;
      --v2;
    }
    while (v2);
  }
  return v3;
}

uint64_t sub_1BCA3A2AC(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  unint64_t v7;
  unsigned __int16 *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  int v25;
  uint64_t v26;
  unsigned int v27;
  _QWORD v28[4];

  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
    return MEMORY[0x1E0DEE9D8];
  v4 = a1;
  v21 = *((_BYTE *)a2 + 32);
  v5 = *a2;
  v25 = *(unsigned __int16 *)(a3 + 24) | (*(unsigned __int8 *)(a3 + 26) << 16);
  v26 = *(_QWORD *)(a3 + 16);
  v27 = *(unsigned __int8 *)(a3 + 9);
  v22 = a2[3];
  v23 = *(_QWORD *)(*a2 + 16);
  result = swift_bridgeObjectRetain();
  v7 = 0;
  v20 = v5;
  v8 = (unsigned __int16 *)(v5 + 56);
  v24 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v18 = v3;
  v19 = result;
  while (1)
  {
    v10 = *(_QWORD *)(v4 + 8 * v7 + 32);
    if (v7 >= v23)
      goto LABEL_9;
    if (v7 >= *(_QWORD *)(v20 + 16))
      break;
    v27 = *((unsigned __int8 *)v8 - 15);
    v26 = *((_QWORD *)v8 - 1);
    v25 = *v8 | (*((unsigned __int8 *)v8 + 2) << 16);
LABEL_9:
    swift_bridgeObjectRetain();
    sub_1BCA3775C(v27, v26, v25, v22, v21, v10, (uint64_t)v28);
    result = swift_bridgeObjectRelease();
    v11 = v28[0];
    v12 = v28[1];
    v14 = v28[2];
    v13 = v28[3];
    if (v28[0])
    {
      if (v28[0] == 1)
        goto LABEL_5;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v15 = v24;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v15 = sub_1BC9DA47C(0, v24[2] + 1, 1, v24);
      v17 = v15[2];
      v16 = v15[3];
      v24 = v15;
      if (v17 >= v16 >> 1)
        v24 = sub_1BC9DA47C((_QWORD *)(v16 > 1), v17 + 1, 1, v15);
      v24[2] = v17 + 1;
      v9 = &v24[3 * v17];
      v9[4] = v11;
      v9[5] = v12;
      v9[6] = v14;
      v3 = v18;
      v4 = v19;
    }
    result = sub_1BCA3C43C(v11, v12, v14, v13);
LABEL_5:
    ++v7;
    v8 += 16;
    if (v3 == v7)
    {
      swift_bridgeObjectRelease();
      return (uint64_t)v24;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1BCA3A4B8(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;

  v2 = *a2;
  v3 = *(_QWORD *)(*a2 + 16);
  if (!v3)
    return MEMORY[0x1E0DEE9D8];
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(v4 + 16);
  if (!v5)
    return MEMORY[0x1E0DEE9D8];
  swift_bridgeObjectRetain();
  v6 = 0;
  v7 = MEMORY[0x1E0DEE9D8];
  do
  {
    if (v6 >= *(_QWORD *)(v4 + 16))
    {
      __break(1u);
LABEL_18:
      __break(1u);
LABEL_19:
      __break(1u);
      JUMPOUT(0x1BCA3A778);
    }
    v8 = *(_QWORD *)(v2 + 16);
    if (v6 >= v3)
    {
      v9 = v2 + 32 * v3;
      if (v3 > v8)
        goto LABEL_19;
    }
    else
    {
      if (v6 >= v8)
        goto LABEL_18;
      v9 = v2 + 32 + 32 * v6;
    }
    if (*(_QWORD *)(*(_QWORD *)(v4 + 32 + 8 * v6) + 16))
    {
      v10 = *(unsigned __int8 *)(v9 + 5);
      swift_bridgeObjectRetain();
      sub_1BC9A2C2C(2u);
      if ((v11 & 1) != 0)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        __asm { BR              X8 }
      }
      swift_bridgeObjectRelease();
    }
    ++v6;
  }
  while (v6 != v5);
  swift_bridgeObjectRelease();
  return v7;
}

double sub_1BCA3A788(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t v3;
  double v4;
  double v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  double *v11;
  double v12;
  double v13;
  uint64_t v15;

  v1 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  v2 = MEMORY[0x1E0DEE9D8];
  if (v1)
  {
    v15 = MEMORY[0x1E0DEE9D8];
    swift_bridgeObjectRetain();
    sub_1BC9BAC40(0, v1, 0);
    v3 = 32;
    v2 = v15;
    do
    {
      DiagramConfiguration.LineWidth.toPoints()();
      v5 = v4;
      v7 = *(_QWORD *)(v15 + 16);
      v6 = *(_QWORD *)(v15 + 24);
      if (v7 >= v6 >> 1)
        sub_1BC9BAC40(v6 > 1, v7 + 1, 1);
      *(_QWORD *)(v15 + 16) = v7 + 1;
      *(double *)(v15 + 8 * v7 + 32) = v5 * 0.5;
      v3 += 32;
      --v1;
    }
    while (v1);
    swift_bridgeObjectRelease();
  }
  v8 = *(_QWORD *)(v2 + 16);
  if (v8)
  {
    v9 = *(double *)(v2 + 32);
    v10 = v8 - 1;
    if (v10)
    {
      v11 = (double *)(v2 + 40);
      do
      {
        v12 = *v11++;
        v13 = v12;
        if (v9 < v12)
          v9 = v13;
        --v10;
      }
      while (v10);
    }
  }
  else
  {
    v9 = 0.0;
  }
  swift_bridgeObjectRelease();
  return v9;
}

double sub_1BCA3A8B8(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  double *v11;
  double v12;
  double v13;
  uint64_t v15;

  v1 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  v2 = MEMORY[0x1E0DEE9D8];
  if (v1)
  {
    v15 = MEMORY[0x1E0DEE9D8];
    swift_bridgeObjectRetain();
    sub_1BC9BAC40(0, v1, 0);
    v3 = 35;
    v2 = v15;
    do
    {
      DiagramConfiguration.LineRadius.toFloat()();
      v5 = v4;
      v7 = *(_QWORD *)(v15 + 16);
      v6 = *(_QWORD *)(v15 + 24);
      if (v7 >= v6 >> 1)
        sub_1BC9BAC40(v6 > 1, v7 + 1, 1);
      *(_QWORD *)(v15 + 16) = v7 + 1;
      *(_QWORD *)(v15 + 8 * v7 + 32) = v5;
      v3 += 32;
      --v1;
    }
    while (v1);
    swift_bridgeObjectRelease();
  }
  v8 = *(_QWORD *)(v2 + 16);
  if (v8)
  {
    v9 = *(double *)(v2 + 32);
    v10 = v8 - 1;
    if (v10)
    {
      v11 = (double *)(v2 + 40);
      do
      {
        v12 = *v11++;
        v13 = v12;
        if (v9 < v12)
          v9 = v13;
        --v10;
      }
      while (v10);
    }
  }
  else
  {
    v9 = 0.0;
  }
  swift_bridgeObjectRelease();
  return v9;
}

uint64_t sub_1BCA3A9E0@<X0>(uint64_t *a1@<X0>, _OWORD *a2@<X1>, uint64_t a3@<X2>, double *a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  unsigned __int16 v7;
  int v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  __int128 v12;
  unsigned __int16 v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  uint64_t v19;
  double v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  double v26;
  uint64_t v27;
  unint64_t v28;
  void *v29;
  void *v30;
  double v31;
  double v32;
  void *v33;
  void *v34;
  double v35;
  double v36;
  double v37;
  void *v38;
  void *v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double *v48;
  unsigned __int16 v49;
  uint64_t v50;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  unsigned __int16 v56;
  uint64_t v57;
  char v58;
  char v59;
  _OWORD v60[4];

  v5 = *a1;
  v6 = a1[1];
  v7 = *((_WORD *)a1 + 10);
  v8 = *((_DWORD *)a1 + 4);
  v9 = a1[3];
  v10 = *((_BYTE *)a1 + 32);
  v11 = *((char *)a1 + 33);
  v12 = a2[1];
  v60[0] = *a2;
  v60[1] = v12;
  v60[2] = a2[2];
  v53 = v5;
  v54 = v6;
  v55 = v8;
  v49 = v7;
  v13 = v7;
  v56 = v7;
  v57 = v9;
  v58 = v10;
  v59 = v11;
  v14 = sub_1BCA3A788((uint64_t)&v53);
  v53 = v5;
  v54 = v6;
  v50 = v6;
  v56 = v13;
  v55 = v8;
  v57 = v9;
  v58 = v10;
  v59 = v11;
  v15 = sub_1BCA3A8B8((uint64_t)&v53);
  if (v14 > v15)
    v16 = v14;
  else
    v16 = v15;
  v17 = dbl_1BCAC4EC8[v11];
  v18 = dbl_1BCAC4EE8[v11];
  sub_1BC9A113C((uint64_t)v60);
  v19 = swift_bridgeObjectRetain();
  sub_1BCA3A1A0(v19, (uint64_t)v60);
  sub_1BC9A1164((uint64_t)v60);
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v5 + 16))
  {
    swift_bridgeObjectRetain();
    __asm { BR              X9 }
  }
  swift_bridgeObjectRelease();
  v20 = v18;
  result = a3;
  v22 = *(_QWORD *)(a3 + 16);
  if (!v22)
  {
    v26 = 0.0;
    v25 = 0.0;
    goto LABEL_28;
  }
  v47 = v17;
  v48 = a4;
  v23 = swift_bridgeObjectRetain() + 48;
  v24 = 1 - v22;
  v25 = 0.0;
  while (1)
  {
    v27 = *(_QWORD *)(v23 - 16);
    v28 = *(_QWORD *)(v27 + 16);
    if (!v28)
    {
      v26 = 0.0;
      if (v25 <= 0.0)
        v25 = 0.0;
      if (!v24)
        goto LABEL_27;
      goto LABEL_11;
    }
    v52 = v23;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v29 = (void *)sub_1BCAB5EE0();
    swift_bridgeObjectRelease();
    type metadata accessor for Key(0);
    sub_1BC99F5A0();
    v30 = (void *)sub_1BCAB5E68();
    objc_msgSend(v29, sel_sizeWithAttributes_, v30);
    v32 = v31;

    if (v28 > *(_QWORD *)(v27 + 16))
      goto LABEL_42;
    swift_bridgeObjectRetain();
    v33 = (void *)sub_1BCAB5EE0();
    swift_bridgeObjectRelease();
    v34 = (void *)sub_1BCAB5E68();
    objc_msgSend(v33, sel_sizeWithAttributes_, v34);
    v36 = v35;

    if (!*(_QWORD *)(v27 + 16))
      goto LABEL_43;
    v37 = v32 * 0.5;
    v26 = v36 * 0.5;
    swift_bridgeObjectRetain();
    v38 = (void *)sub_1BCAB5EE0();
    swift_bridgeObjectRelease();
    v39 = (void *)sub_1BCAB5E68();
    objc_msgSend(v38, sel_sizeWithAttributes_, v39);
    v41 = v40;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    if (v25 <= v41)
      v25 = v41;
    if (v37 >= 0.0)
    {
      if (v37 > v26)
        v26 = v37;
      v23 = v52;
LABEL_24:
      if (!v24)
        goto LABEL_27;
      goto LABEL_11;
    }
    v23 = v52;
    if (v26 >= 0.0)
      goto LABEL_24;
    if (!v24)
      break;
LABEL_11:
    v23 += 24;
    if (++v24 == 1)
    {
      __break(1u);
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      sub_1BCAB65C4();
      __break(1u);
      JUMPOUT(0x1BCA3B0B8);
    }
  }
  v26 = 0.0;
LABEL_27:
  result = swift_bridgeObjectRelease();
  a4 = v48;
  v17 = v47;
LABEL_28:
  if ((v50 & 0xFF00000000) == 0x300000000)
  {
    v18 = v18 + 0.0;
    v20 = v20 + v26;
    goto LABEL_36;
  }
  if ((v8 & 0xFF000000) == 0x2000000)
  {
    v42 = 0.0;
    v18 = v18 + 0.0;
    v20 = v20 + v26;
  }
  else
  {
    v43 = 0.0;
    if ((((unint64_t)v49 << 32) & 0xFF00000000) == 0)
      v43 = 3.5;
    v42 = v43 + v16;
  }
  if ((v50 & 0xFF00000000) == 0x200000000)
  {
LABEL_36:
    v44 = v16 + v17;
    v42 = 0.0;
    v45 = 0.0;
  }
  else
  {
    v46 = 0.0;
    if ((v50 & 0xFF0000000000) == 0)
      v46 = 3.5;
    v45 = v46 + v16 + 2.0;
    v44 = v17;
  }
  *a4 = v16 + v17 + v25;
  a4[1] = v16 + v18;
  a4[2] = v44;
  a4[3] = v16 + v20;
  a4[4] = v42;
  a4[5] = v45;
  return result;
}

unint64_t sub_1BCA3B0D8()
{
  unint64_t result;

  result = qword_1ED6C6050;
  if (!qword_1ED6C6050)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1ED6C6050);
  }
  return result;
}

uint64_t sub_1BCA3B12C(uint64_t a1)
{
  uint64_t v2;

  sub_1BC998AB0(0, &qword_1ED6C6058, (uint64_t (*)(uint64_t))sub_1BCA3B0D8, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_1BCA3B180(void *a1, uint64_t a2, CGFloat a3, CGFloat a4)
{
  uint64_t v4;

  sub_1BCA382F0(a1, a2, v4, a3, a4);
}

uint64_t type metadata accessor for DiagramLine()
{
  return objc_opt_self();
}

uint64_t method lookup function for DiagramLine()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of DiagramLine.__allocating_init(lineDiagramConfig:diagramData:hbxViewControllerFactory:axisMetricsFactory:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t dispatch thunk of DiagramLine.modelSpace.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of DiagramLine.screenInsets.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t dispatch thunk of DiagramLine.drawingBlock.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

unint64_t sub_1BCA3B1E0()
{
  unint64_t result;

  result = qword_1EF479990;
  if (!qword_1EF479990)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EF479990);
  }
  return result;
}

uint64_t sub_1BCA3B21C(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t result;
  uint64_t v10;
  unint64_t v11;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;

  v4 = *a2;
  v5 = *(_QWORD *)(*a2 + 16);
  if (!v5 || (v7 = a2[3], v6 = a2[4], v8 = v6 >> 1, v7 == v6 >> 1))
  {
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
LABEL_4:
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    return a1;
  }
  v10 = a2[2];
  if (v7 <= v8)
    v11 = v6 >> 1;
  else
    v11 = a2[3];
  swift_bridgeObjectRetain();
  result = swift_unknownObjectRetain();
  if (v11 != v7)
  {
    result = sub_1BCAB61E0();
    if (v5 == 1 || v7 + 1 == v8)
      goto LABEL_4;
    v13 = v11;
    v14 = 0;
    v15 = v10;
    v16 = v4 + 56;
    v17 = ~v7;
    v18 = ~v7 + v8;
    v19 = v5 - 2;
    v20 = v15 + 16 * v7 + 24;
    v21 = v17 + v13;
    while (v21 != v14)
    {
      if (v14 + 1 >= *(_QWORD *)(a3 + 16) - 1)
      {
        result = sub_1BCAB61F8();
        if (v19 == v14)
          goto LABEL_4;
      }
      else
      {
        result = sub_1BCAB61EC();
        if (v19 == v14)
          goto LABEL_4;
      }
      ++v14;
      v20 += 16;
      v16 += 16;
      if (v18 == v14)
        goto LABEL_4;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1BCA3B400(uint64_t result, uint64_t a2, void *a3, double a4, double a5)
{
  int64_t v5;
  CGContext *v9;
  float64x2_t *v10;
  unint64_t v11;
  int64x2_t v12;
  float64x2_t v13;
  uint64_t v14;
  float64x2_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  CGColor *v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  float64x2_t v25;
  float64x2_t v26;
  int64x2_t v28;
  uint64_t v29;
  CGRect v30;

  v5 = *(_QWORD *)(a2 + 16);
  if (v5)
  {
    v9 = (CGContext *)result;
    v29 = MEMORY[0x1E0DEE9D8];
    sub_1BC9BADD8(0, v5, 0);
    v10 = (float64x2_t *)(a2 + 32);
    v11 = *(_QWORD *)(v29 + 16);
    v12 = vdupq_lane_s64(COERCE__INT64(a4 + a4), 0);
    v13 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&a4, 0);
    v14 = 32 * v11;
    do
    {
      v15 = *v10;
      v16 = *(_QWORD *)(v29 + 24);
      v17 = v11 + 1;
      if (v11 >= v16 >> 1)
      {
        v26 = v13;
        v28 = v12;
        v25 = *v10;
        sub_1BC9BADD8(v16 > 1, v11 + 1, 1);
        v15 = v25;
        v13 = v26;
        v12 = v28;
      }
      *(_QWORD *)(v29 + 16) = v17;
      v18 = v29 + v14;
      *(float64x2_t *)(v18 + 32) = vsubq_f64(v15, v13);
      *(int64x2_t *)(v18 + 48) = v12;
      v14 += 32;
      ++v10;
      v11 = v17;
      --v5;
    }
    while (v5);
    v19 = (CGColor *)objc_msgSend(a3, sel_CGColor);
    CGContextSetFillColorWithColor(v9, v19);

    if (a5 > 0.0)
    {
      CGContextSetBlendMode(v9, kCGBlendModeClear);
      v20 = *(_QWORD *)(v29 + 16);
      if (v20)
      {
        v21 = -a5;
        swift_retain();
        v22 = v29 + 56;
        do
        {
          v30 = CGRectInset(*(CGRect *)(v22 - 24), v21, v21);
          CGContextFillEllipseInRect(v9, v30);
          v22 += 32;
          --v20;
        }
        while (v20);
        swift_release();
      }
    }
    CGContextSetBlendMode(v9, kCGBlendModeNormal);
    v23 = *(_QWORD *)(v29 + 16);
    if (v23)
    {
      swift_retain();
      v24 = v29 + 56;
      do
      {
        CGContextFillEllipseInRect(v9, *(CGRect *)(v24 - 24));
        v24 += 32;
        --v23;
      }
      while (v23);
      swift_release();
    }
    return swift_release();
  }
  return result;
}

unint64_t sub_1BCA3B5FC(unint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  const void *v11;
  uint64_t v13;
  uint64_t v14;

  v4 = a2 - result;
  if (__OFSUB__(a2, result))
  {
    __break(1u);
    goto LABEL_17;
  }
  v6 = a3 - v4;
  if (__OFSUB__(a3, v4))
  {
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (!v6)
    goto LABEL_14;
  v7 = *v3;
  v8 = *(_QWORD *)(v7 + 16);
  v9 = __OFSUB__(v8, a2);
  v10 = v8 - a2;
  if (v9)
    goto LABEL_18;
  if (v10 < 0)
  {
LABEL_21:
    result = sub_1BCAB6624();
    __break(1u);
    return result;
  }
  result = v7 + 32 + 16 * result + 16 * a3;
  v11 = (const void *)(v7 + 32 + 16 * a2);
  if ((const void *)result != v11 || result >= (unint64_t)v11 + 16 * v10)
    result = (unint64_t)memmove((void *)result, v11, 16 * v10);
  v13 = *(_QWORD *)(v7 + 16);
  v9 = __OFADD__(v13, v6);
  v14 = v13 + v6;
  if (v9)
    goto LABEL_19;
  *(_QWORD *)(v7 + 16) = v14;
LABEL_14:
  if (a3 > 0)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  return result;
}

uint64_t sub_1BCA3B6EC(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t (*v8)();
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  BOOL v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _OWORD *v31;
  __int128 *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  __int128 v49;
  unint64_t v50;
  uint64_t v51;

  v3 = *(_QWORD *)(v2 + 16);
  v4 = *(_QWORD *)(v2 + 24);
  v5 = (v4 >> 1) - v3;
  if (__OFSUB__(v4 >> 1, v3))
    goto LABEL_69;
  v47 = *(_QWORD *)(result + 16);
  if (v47 == a2)
    return result;
  if (v47 <= a2)
    goto LABEL_70;
  v6 = (uint64_t *)v2;
  v48 = a2 + 1;
  v46 = result + 32;
  v49 = *(_OWORD *)(result + 32 + 16 * a2);
  v44 = result + 64;
  v45 = result + 48;
  while (1)
  {
    v7 = v5 + 1;
    if (__OFADD__(v5, 1))
      break;
    v51 = sub_1BCA39E10(v5, v5 + 1, *v6, v6[1], v3, v4);
    v8 = sub_1BCA3A024();
    v9 = v6;
    sub_1BCA39AEC(&v51, v5, 0, (void (*)(uint64_t, uint64_t))v8);
    swift_release();
    result = swift_release();
    v3 = v6[2];
    v4 = v6[3];
    v50 = v4 >> 1;
    v10 = (v4 >> 1) - v3;
    if (__OFSUB__(v4 >> 1, v3))
      goto LABEL_64;
    v11 = v6[1];
    if ((v4 & 1) == 0)
      goto LABEL_15;
    sub_1BCAB67E0();
    swift_unknownObjectRetain();
    v12 = swift_dynamicCastClass();
    if (!v12)
    {
      swift_unknownObjectRelease();
      v12 = MEMORY[0x1E0DEE9D8];
    }
    v13 = *(_QWORD *)(v12 + 16);
    if (v11 + 16 * v3 + 16 * v10 != v12 + 16 * v13 + 32)
    {
      result = swift_release();
LABEL_15:
      v14 = (v4 >> 1) - v3;
      if (v5 >= v10)
        goto LABEL_20;
      goto LABEL_16;
    }
    v16 = *(_QWORD *)(v12 + 24);
    result = swift_release();
    v17 = (v16 >> 1) - v13;
    v18 = __OFADD__(v10, v17);
    v14 = v10 + v17;
    if (v18)
      goto LABEL_68;
    v6 = v9;
    if (v5 >= v14)
    {
LABEL_20:
      v15 = 0;
      goto LABEL_54;
    }
LABEL_16:
    *(_OWORD *)(v11 + 16 * v3 + 16 * v5) = v49;
    v49 = 0u;
    result = v48;
    if (v48 != v47)
    {
      if (v48 <= v47)
        v19 = v47;
      else
        v19 = v48;
      v20 = v47 + ~v48;
      v21 = v14 + ~v5;
      if (v20 >= v21)
        v22 = v14 + ~v5;
      else
        v22 = v47 + ~v48;
      v23 = v19 - v48;
      if (v22 >= v19 - v48)
        v22 = v19 - v48;
      v24 = v22 + 1;
      if (v24 > 0x22)
      {
        if (v20 >= v21)
          v20 = v14 + ~v5;
        if (v20 >= v23)
          v20 = v19 - v48;
        v25 = v11 + 16 * (v5 + v3);
        if (v25 + 16 + 16 * v20 >= v25 + 16 && v25 + 24 + 16 * v20 >= v25 + 24 && !(v20 >> 60))
        {
          v26 = v11 + 16 * (v5 + v3);
          v27 = v47 + ~v48;
          if (v27 >= v14 + ~v5)
            v27 = v14 + ~v5;
          if (v27 < v23)
            v23 = v27;
          if (v26 + 16 >= v45 + 16 * v48 + 16 * v23 || v46 + 16 * v48 >= v26 + 16 * v23 + 32)
          {
            v28 = v24 & 3;
            if ((v24 & 3) == 0)
              v28 = 4;
            v29 = v24 - v28;
            v30 = v48 + v29;
            v7 += v29;
            v31 = (_OWORD *)(v11 + 16 * v5 + 16 * v3 + 48);
            v32 = (__int128 *)(v44 + 16 * v48);
            do
            {
              v34 = *(v32 - 2);
              v33 = *(v32 - 1);
              v36 = *v32;
              v35 = v32[1];
              v32 += 4;
              *(v31 - 2) = v34;
              *(v31 - 1) = v33;
              *v31 = v36;
              v31[1] = v35;
              v31 += 4;
              v29 -= 4;
            }
            while (v29);
            result = v30;
          }
        }
      }
      v37 = 0;
      v38 = v19 - result;
      while (v38 != v37)
      {
        v39 = v46 + 16 * result;
        if (v14 - v7 == v37)
        {
          v15 = 0;
          v48 = result + v37 + 1;
          v5 = v14;
          v49 = *(_OWORD *)(v39 + 16 * v37);
          goto LABEL_54;
        }
        *(_OWORD *)(v11 + 16 * v7 + 16 * v3 + 16 * v37) = *(_OWORD *)(v39 + 16 * v37);
        ++v37;
        if (!(result - v47 + v37))
        {
          v5 = v7 + v37;
          v15 = 1;
          v48 = v47;
          goto LABEL_54;
        }
      }
      goto LABEL_62;
    }
    v15 = 1;
    ++v5;
    v48 = v47;
LABEL_54:
    v40 = v5 - v10;
    if (__OFSUB__(v5, v10))
      goto LABEL_65;
    if (v40)
    {
      sub_1BCAB67E0();
      swift_unknownObjectRetain();
      result = swift_dynamicCastClass();
      if (!result)
      {
        swift_unknownObjectRelease();
        result = MEMORY[0x1E0DEE9D8];
      }
      v41 = *(_QWORD *)(result + 16);
      v18 = __OFADD__(v41, v40);
      v42 = v41 + v40;
      if (v18)
        goto LABEL_66;
      *(_QWORD *)(result + 16) = v42;
      result = swift_release();
      v43 = v50 + v40;
      if (__OFADD__(v50, v40))
        goto LABEL_67;
      if ((v43 & 0x8000000000000000) != 0)
      {
        __break(1u);
LABEL_62:
        __break(1u);
        break;
      }
      v4 = v4 & 1 | (2 * v43);
      v6[3] = v4;
    }
    if ((v15 & 1) != 0)
      return result;
  }
  __break(1u);
LABEL_64:
  __break(1u);
LABEL_65:
  __break(1u);
LABEL_66:
  __break(1u);
LABEL_67:
  __break(1u);
LABEL_68:
  __break(1u);
LABEL_69:
  __break(1u);
LABEL_70:
  __break(1u);
  return result;
}

uint64_t sub_1BCA3BAEC(uint64_t a1)
{
  _QWORD *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  int64_t v26;
  char *v27;
  size_t v28;

  v3 = v1[2];
  v2 = v1[3];
  v4 = (v2 >> 1) - v3;
  if (__OFSUB__(v2 >> 1, v3))
  {
    __break(1u);
    goto LABEL_34;
  }
  v6 = *(_QWORD *)(a1 + 16);
  if ((v2 & 1) == 0)
    goto LABEL_7;
  v7 = v1[1];
  sub_1BCAB67E0();
  swift_unknownObjectRetain();
  v8 = swift_dynamicCastClass();
  if (!v8)
  {
    swift_unknownObjectRelease();
    v8 = MEMORY[0x1E0DEE9D8];
  }
  v9 = *(_QWORD *)(v8 + 16);
  if (v7 + 16 * v3 + 16 * v4 != v8 + 16 * v9 + 32)
  {
    swift_release();
LABEL_7:
    v10 = v4;
    goto LABEL_9;
  }
  v11 = *(_QWORD *)(v8 + 24);
  swift_release();
  v12 = (v11 >> 1) - v9;
  v13 = __OFADD__(v4, v12);
  v10 = v4 + v12;
  if (v13)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
LABEL_9:
  v14 = v4 + v6;
  if (__OFADD__(v4, v6))
  {
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  if (v10 < v14)
  {
    if (v10 + 0x4000000000000000 < 0)
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    v15 = 2 * v10;
    if (v15 > v14)
      v14 = v15;
  }
  result = sub_1BCA3986C(v14);
  v18 = v1[2];
  v17 = v1[3];
  v19 = (v17 >> 1) - v18;
  if (__OFSUB__(v17 >> 1, v18))
    goto LABEL_35;
  v20 = (char *)(v1[1] + 16 * v18 + 16 * v19);
  if ((v17 & 1) == 0)
  {
LABEL_20:
    v23 = v19;
    goto LABEL_22;
  }
  sub_1BCAB67E0();
  swift_unknownObjectRetain();
  v21 = swift_dynamicCastClass();
  if (!v21)
  {
    swift_unknownObjectRelease();
    v21 = MEMORY[0x1E0DEE9D8];
  }
  v22 = *(_QWORD *)(v21 + 16);
  if (v20 != (char *)(v21 + 16 * v22 + 32))
  {
    result = swift_release();
    goto LABEL_20;
  }
  v24 = *(_QWORD *)(v21 + 24);
  result = swift_release();
  v25 = (v24 >> 1) - v22;
  v13 = __OFADD__(v19, v25);
  v23 = v19 + v25;
  if (v13)
  {
LABEL_41:
    __break(1u);
LABEL_42:
    result = sub_1BCAB6624();
    __break(1u);
    return result;
  }
LABEL_22:
  v26 = v23 - v19;
  if (__OFSUB__(v23, v19))
  {
LABEL_36:
    __break(1u);
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  if (!v6)
    goto LABEL_30;
  if (v26 < v6)
    goto LABEL_37;
  v27 = (char *)(a1 + 32);
  v28 = 16 * v6;
  if (a1 + 32 < (unint64_t)&v20[16 * v6] && v20 < &v27[v28])
    goto LABEL_42;
  result = (uint64_t)memcpy(v20, v27, v28);
  if (v6 <= 0)
    goto LABEL_30;
  if (__OFADD__(v19, v6))
    goto LABEL_39;
  result = sub_1BCA39D5C(v19 + v6);
LABEL_30:
  if (v6 == v26)
    return sub_1BCA3B6EC(a1, v6);
  return result;
}

void sub_1BCA3BD54(CGContext *a1, uint64_t a2, void *a3, CGFloat a4, double a5)
{
  uint64_t v5;
  uint64_t inited;
  __int128 v11;
  CGMutablePathRef v12;
  const CGPath *Mutable;
  uint64_t v14;
  uint64_t v15;
  CGColor *v16;
  __int128 v17;
  _BYTE v18[40];
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a2 + 16);
  if (v5)
  {
    if (a5 <= 0.0)
    {
      swift_bridgeObjectRetain();
      Mutable = CGPathCreateMutable();
      swift_bridgeObjectRetain();
      sub_1BCAB61E0();
      v14 = v5 - 1;
      if (v14)
      {
        v15 = a2 + 56;
        do
        {
          *(_QWORD *)&v18[16] = 0;
          *(_OWORD *)v18 = 0x3FF0000000000000uLL;
          *(_QWORD *)&v18[24] = 0x3FF0000000000000;
          *(_QWORD *)&v18[32] = 0;
          v19 = 0;
          sub_1BCAB61F8();
          v15 += 16;
          --v14;
        }
        while (v14);
      }
    }
    else
    {
      sub_1BC998AB0(0, &qword_1ED6C71D8, (uint64_t (*)(uint64_t))type metadata accessor for CGPoint, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1BCABE680;
      *(_QWORD *)(inited + 32) = 0;
      *(_QWORD *)(inited + 40) = 0;
      *(_QWORD *)v18 = a2;
      *(_QWORD *)&v18[8] = a2 + 32;
      *(_QWORD *)&v18[16] = 1;
      *(_QWORD *)&v18[24] = (2 * v5) | 1;
      swift_bridgeObjectRetain();
      sub_1BCA3BAEC(inited);
      swift_setDeallocating();
      v11 = *(_OWORD *)&v18[16];
      v17 = *(_OWORD *)v18;
      *(_QWORD *)v18 = a2;
      *(_OWORD *)&v18[8] = v17;
      *(_OWORD *)&v18[24] = v11;
      swift_bridgeObjectRetain();
      v12 = CGPathCreateMutable();
      swift_bridgeObjectRetain();
      Mutable = (const CGPath *)sub_1BCA3B21C((uint64_t)v12, v18, a2);
      swift_unknownObjectRelease();
    }
    swift_bridgeObjectRelease_n();
    CGContextSetLineWidth(a1, a4);
    CGContextSetLineJoin(a1, kCGLineJoinRound);
    CGContextSetLineCap(a1, kCGLineCapRound);
    CGContextSetBlendMode(a1, kCGBlendModeNormal);
    v16 = (CGColor *)objc_msgSend(a3, sel_CGColor);
    CGContextSetStrokeColorWithColor(a1, v16);

    CGContextAddPath(a1, Mutable);
    CGContextStrokePath(a1);

  }
}

void sub_1BCA3BFB4(uint64_t a1, char a2, char *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  CGFloat v7;
  CGFloat v8;
  CGFloat v9;
  CGFloat v10;
  CGFloat v11;
  CGFloat v12;
  CGContext *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  int64_t v25;
  id v26;
  uint64_t v27;
  CGPoint v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  uint64_t v33;
  int64_t v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  CGPoint v38;
  unint64_t v39;
  unint64_t v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  UIColor v47;
  UIColor v48;
  CGContext *v49;
  uint64_t v50;
  char v51;
  id v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  double v56;
  unint64_t v57;
  char v58;
  char v59;
  char v60;
  char v61;
  char v62;
  CGAffineTransform v63;
  uint64_t v64;
  CGPoint v65;
  CGPoint v66;

  v4 = *(_QWORD *)(v3 + 96);
  v5 = *(_QWORD *)(v4 + 16);
  if (v5)
  {
    v7 = *(double *)(a1 + 32);
    v8 = *(double *)(a1 + 40);
    v9 = *(double *)(a1 + 48);
    v10 = *(double *)(a1 + 56);
    v12 = *(double *)(a1 + 64);
    v11 = *(double *)(a1 + 72);
    v58 = a3[4];
    v59 = a3[3];
    v60 = a3[2];
    v61 = a3[1];
    v62 = *a3;
    v13 = *(CGContext **)(a1 + 16);
    v14 = *(_QWORD *)(v3 + 16);
    v15 = v4 + 32;
    v53 = v14 + 32;
    v54 = v14;
    v57 = *(_QWORD *)(v14 + 16);
    v52 = *(id *)(a1 + 24);
    swift_bridgeObjectRetain();
    v16 = 0;
    v51 = a2;
    v49 = v13;
    v50 = v5;
    v56 = v7;
    v55 = v4 + 32;
    while (1)
    {
      v17 = *(_QWORD *)(v15 + 8 * v16);
      if (v16 < v57)
      {
        if (v16 >= *(_QWORD *)(v54 + 16))
        {
          __break(1u);
          return;
        }
        v18 = (char *)(v53 + 32 * v16);
        v61 = v18[1];
        v62 = *v18;
        v59 = v18[3];
        v60 = v18[2];
        v58 = v18[4];
      }
      v19 = *(_QWORD *)(v17 + 16);
      swift_bridgeObjectRetain();
      if (!v19)
      {
        v21 = MEMORY[0x1E0DEE9D8];
        v22 = MEMORY[0x1E0DEE9D8];
        goto LABEL_26;
      }
      v20 = sub_1BC9A2C2C(0);
      v21 = MEMORY[0x1E0DEE9D8];
      v22 = MEMORY[0x1E0DEE9D8];
      if ((v23 & 1) == 0)
        goto LABEL_17;
      v24 = *(_QWORD *)(*(_QWORD *)(v17 + 56) + 40 * v20);
      v25 = *(_QWORD *)(v24 + 16);
      if (v25)
        break;
      v22 = MEMORY[0x1E0DEE9D8];
      v15 = v55;
      if (!*(_QWORD *)(v17 + 16))
        goto LABEL_26;
LABEL_18:
      v31 = sub_1BC9A2C2C(1u);
      if ((v32 & 1) != 0)
      {
        v33 = *(_QWORD *)(*(_QWORD *)(v17 + 56) + 40 * v31);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v34 = *(_QWORD *)(v33 + 16);
        if (v34)
        {
          v64 = MEMORY[0x1E0DEE9D8];
          v35 = v52;
          sub_1BC9BADBC(0, v34, 0);
          v36 = v64;
          v37 = v33 + 40;
          do
          {
            v66 = *(CGPoint *)(v37 - 8);
            v63.a = v7;
            v63.b = v8;
            v63.c = v9;
            v63.d = v10;
            v63.tx = v12;
            v63.ty = v11;
            v38 = CGPointApplyAffineTransform(v66, &v63);
            v64 = v36;
            v40 = *(_QWORD *)(v36 + 16);
            v39 = *(_QWORD *)(v36 + 24);
            if (v40 >= v39 >> 1)
            {
              sub_1BC9BADBC(v39 > 1, v40 + 1, 1);
              v36 = v64;
            }
            *(_QWORD *)(v36 + 16) = v40 + 1;
            *(CGPoint *)(v36 + 16 * v40 + 32) = v38;
            v37 += 16;
            --v34;
          }
          while (v34);
          swift_bridgeObjectRelease();

          a2 = v51;
          v13 = v49;
          v5 = v50;
        }
        else
        {
          swift_bridgeObjectRelease();
          v36 = MEMORY[0x1E0DEE9D8];
        }
        v15 = v55;
        goto LABEL_27;
      }
LABEL_26:
      swift_bridgeObjectRelease();
      v36 = v21;
LABEL_27:
      LOBYTE(v63.a) = v62;
      DiagramConfiguration.LineWidth.toPoints()();
      v42 = v41;
      LOBYTE(v63.a) = v58;
      DiagramConfiguration.LineRadius.toFloat()();
      v44 = v43;
      LOBYTE(v63.a) = v59;
      DiagramConfiguration.LineRadius.toFloat()();
      v46 = v45;
      LOBYTE(v63.a) = v61;
      v47.super.isa = DiagramConfiguration.Color.toColor()().super.isa;
      LOBYTE(v63.a) = v60;
      v48.super.isa = DiagramConfiguration.Color.toColor()().super.isa;
      swift_bridgeObjectRelease();
      if ((a2 & 1) != 0)
      {
        sub_1BCA3B400((uint64_t)v13, v36, v48.super.isa, v46, v42 * 0.8);
        swift_bridgeObjectRelease();

      }
      else
      {
        sub_1BCA3BD54(v13, v22, v47.super.isa, v42, v44);

        swift_bridgeObjectRelease();
      }
      v7 = v56;
      ++v16;

      if (v16 == v5)
      {

        swift_bridgeObjectRelease();
        return;
      }
    }
    v64 = MEMORY[0x1E0DEE9D8];
    v26 = v52;
    swift_bridgeObjectRetain();
    sub_1BC9BADBC(0, v25, 0);
    v22 = v64;
    v27 = v24 + 40;
    do
    {
      v65 = *(CGPoint *)(v27 - 8);
      v63.a = v7;
      v63.b = v8;
      v63.c = v9;
      v63.d = v10;
      v63.tx = v12;
      v63.ty = v11;
      v28 = CGPointApplyAffineTransform(v65, &v63);
      v64 = v22;
      v30 = *(_QWORD *)(v22 + 16);
      v29 = *(_QWORD *)(v22 + 24);
      if (v30 >= v29 >> 1)
      {
        sub_1BC9BADBC(v29 > 1, v30 + 1, 1);
        v22 = v64;
      }
      *(_QWORD *)(v22 + 16) = v30 + 1;
      *(CGPoint *)(v22 + 16 * v30 + 32) = v28;
      v27 += 16;
      --v25;
    }
    while (v25);
    swift_bridgeObjectRelease();

    a2 = v51;
    v13 = v49;
    v5 = v50;
    v15 = v55;
    v21 = MEMORY[0x1E0DEE9D8];
LABEL_17:
    if (!*(_QWORD *)(v17 + 16))
      goto LABEL_26;
    goto LABEL_18;
  }
}

uint64_t sub_1BCA3C43C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (result != 1)
  {
    sub_1BC9A0A18(result);
    return sub_1BC9A0A18(a4);
  }
  return result;
}

void StatisticsOption.bitMaskValue.getter()
{
  __asm { BR              X10 }
}

uint64_t sub_1BCA3C4AC()
{
  return 4;
}

uint64_t sub_1BCA3C4B8()
{
  return 8;
}

uint64_t sub_1BCA3C4C4()
{
  return 16;
}

uint64_t sub_1BCA3C4D0()
{
  return 32;
}

uint64_t sub_1BCA3C4DC()
{
  return 64;
}

uint64_t sub_1BCA3C4E8()
{
  return _HKStatisticOptionsAverageSampleDuration();
}

uint64_t sub_1BCA3C4F0()
{
  return _HKStatisticsOptionPresence();
}

uint64_t sub_1BCA3C4F8()
{
  return _HKStatisticsOptionBaselineRelativeQuantities();
}

uint64_t sub_1BCA3C500()
{
  uint64_t v0;

  v0 = _HKStatisticsOptionAttenuateSamples();
  if ((v0 & 0xFFFFFFFFFFFFFFFDLL) != 0)
    return v0 | 2;
  else
    return 2;
}

HealthVisualization::StatisticsOption_optional __swiftcall StatisticsOption.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  unint64_t v3;
  HealthVisualization::StatisticsOption_optional result;
  char v5;

  v2 = v1;
  v3 = sub_1BCAB6654();
  result.value = swift_bridgeObjectRelease();
  v5 = 10;
  if (v3 < 0xA)
    v5 = v3;
  *v2 = v5;
  return result;
}

void *static StatisticsOption.allCases.getter()
{
  return &unk_1E7544600;
}

uint64_t StatisticsOption.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1BCA3C5BC + 4 * byte_1BCAC4F1A[*v0]))(0x6574657263736964, 0xEF65676172657641);
}

uint64_t sub_1BCA3C5DC()
{
  return 0x6974616C756D7563;
}

uint64_t sub_1BCA3C600()
{
  return 0x6563655274736F6DLL;
}

uint64_t sub_1BCA3C61C()
{
  return 0x6E6F697461727564;
}

uint64_t sub_1BCA3C634()
{
  return 0x4465676172657661;
}

uint64_t sub_1BCA3C658()
{
  return 0x65636E6573657270;
}

unint64_t sub_1BCA3C670()
{
  return 0xD00000000000001ALL;
}

unint64_t sub_1BCA3C690()
{
  return 0xD000000000000019;
}

uint64_t sub_1BCA3C6AC()
{
  char *v0;
  char v1;
  _BYTE v3[72];

  v1 = *v0;
  sub_1BCAB6870();
  sub_1BCA937F8((uint64_t)v3, v1);
  return sub_1BCAB6894();
}

void sub_1BCA3C6F0(uint64_t a1)
{
  char *v1;

  sub_1BCA937F8(a1, *v1);
}

uint64_t sub_1BCA3C6F8()
{
  char *v0;
  char v1;
  _BYTE v3[72];

  v1 = *v0;
  sub_1BCAB6870();
  sub_1BCA937F8((uint64_t)v3, v1);
  return sub_1BCAB6894();
}

HealthVisualization::StatisticsOption_optional sub_1BCA3C738(Swift::String *a1)
{
  return StatisticsOption.init(rawValue:)(*a1);
}

uint64_t sub_1BCA3C744@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = StatisticsOption.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1BCA3C768()
{
  sub_1BCA3CA1C();
  return sub_1BCAB5FE8();
}

uint64_t sub_1BCA3C7C4()
{
  sub_1BCA3CA1C();
  return sub_1BCAB5FD0();
}

void sub_1BCA3C810(_QWORD *a1@<X8>)
{
  *a1 = &unk_1E7544600;
}

void sub_1BCA3C820(char *a1)
{
  sub_1BC99AC84(*a1);
}

unint64_t sub_1BCA3C830()
{
  unint64_t result;

  result = qword_1ED6C69F0;
  if (!qword_1ED6C69F0)
  {
    result = MEMORY[0x1BCCFBE84](&protocol conformance descriptor for StatisticsOption, &type metadata for StatisticsOption);
    atomic_store(result, (unint64_t *)&qword_1ED6C69F0);
  }
  return result;
}

unint64_t sub_1BCA3C878()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EF479998[0];
  if (!qword_1EF479998[0])
  {
    sub_1BC9B7DF8();
    result = MEMORY[0x1BCCFBE84](MEMORY[0x1E0DEAF50], v1);
    atomic_store(result, qword_1EF479998);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for StatisticsOption(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF7)
    goto LABEL_17;
  if (a2 + 9 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 9) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 9;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 9;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 9;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xA;
  v8 = v6 - 10;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for StatisticsOption(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 9 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 9) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF7)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF6)
    return ((uint64_t (*)(void))((char *)&loc_1BCA3C99C + 4 * byte_1BCAC4F29[v4]))();
  *a1 = a2 + 9;
  return ((uint64_t (*)(void))((char *)sub_1BCA3C9D0 + 4 * byte_1BCAC4F24[v4]))();
}

uint64_t sub_1BCA3C9D0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BCA3C9D8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BCA3C9E0);
  return result;
}

uint64_t sub_1BCA3C9EC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BCA3C9F4);
  *(_BYTE *)result = a2 + 9;
  return result;
}

uint64_t sub_1BCA3C9F8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BCA3CA00(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for StatisticsOption()
{
  return &type metadata for StatisticsOption;
}

unint64_t sub_1BCA3CA1C()
{
  unint64_t result;

  result = qword_1ED6C72F0;
  if (!qword_1ED6C72F0)
  {
    result = MEMORY[0x1BCCFBE84](&protocol conformance descriptor for StatisticsOption, &type metadata for StatisticsOption);
    atomic_store(result, (unint64_t *)&qword_1ED6C72F0);
  }
  return result;
}

uint64_t DateInterval.midpoint.getter()
{
  uint64_t v0;

  v0 = sub_1BCAB4E54();
  MEMORY[0x1E0C80A78](v0);
  sub_1BCAB4BCC();
  sub_1BCAB4BC0();
  return sub_1BCAB4DAC();
}

uint64_t DateInterval.timeIntervalSinceReferenceDateRange.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  double v7;
  double v8;
  void (*v9)(char *, uint64_t);
  double v10;
  double v11;
  uint64_t result;
  uint64_t v13;

  v0 = sub_1BCAB4E54();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v3 = (char *)&v13 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v13 - v5;
  sub_1BCAB4BC0();
  sub_1BCAB4DA0();
  v8 = v7;
  v9 = *(void (**)(char *, uint64_t))(v1 + 8);
  v9(v6, v0);
  sub_1BCAB4B9C();
  sub_1BCAB4DA0();
  v11 = v10;
  result = ((uint64_t (*)(char *, uint64_t))v9)(v3, v0);
  if (v8 > v11)
    __break(1u);
  return result;
}

uint64_t DateInterval.shifted(by:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  _QWORD *v24;
  void (*v25)(char *, uint64_t);
  unsigned int (*v26)(char *, uint64_t, uint64_t);
  void (*v27)(char *, char *, uint64_t);
  char *v28;
  char *v29;
  void (*v30)(char *, char *, uint64_t);
  uint64_t result;
  void (*v32)(uint64_t);
  unint64_t *v33;
  _QWORD v34[2];
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  char *v41;
  _QWORD *v42;

  v40 = a1;
  sub_1BC9AFF04(0, &qword_1ED6C7280, (void (*)(uint64_t))MEMORY[0x1E0CB0870]);
  MEMORY[0x1E0C80A78](v2);
  v39 = (char *)v34 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v41 = (char *)v34 - v5;
  v6 = sub_1BCAB4E54();
  v42 = *(_QWORD **)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v38 = (char *)v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v37 = (char *)v34 - v9;
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)v34 - v11;
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)v34 - v14;
  sub_1BC9AFF04(0, &qword_1ED6C7288, (void (*)(uint64_t))MEMORY[0x1E0CB11F0]);
  MEMORY[0x1E0C80A78](v16);
  v18 = (char *)v34 - v17;
  v19 = sub_1BCAB4F74();
  v20 = *(_QWORD *)(v19 - 8);
  MEMORY[0x1E0C80A78](v19);
  v22 = (char *)v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BCAB4C5C();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19) == 1)
  {
    v32 = (void (*)(uint64_t))MEMORY[0x1E0CB11F0];
    v33 = &qword_1ED6C7288;
  }
  else
  {
    v35 = v20;
    v36 = v19;
    (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v22, v18, v19);
    v34[1] = v1;
    sub_1BCAB4BC0();
    v23 = v41;
    sub_1BCAB4F2C();
    v24 = v42;
    v25 = (void (*)(char *, uint64_t))v42[1];
    v25(v12, v6);
    v26 = (unsigned int (*)(char *, uint64_t, uint64_t))v24[6];
    if (v26(v23, 1, v6) == 1)
    {
      v39 = v41;
    }
    else
    {
      v27 = (void (*)(char *, char *, uint64_t))v42[4];
      v27(v15, v41, v6);
      sub_1BCAB4B9C();
      v28 = v39;
      sub_1BCAB4F2C();
      v25(v12, v6);
      if (v26(v28, 1, v6) != 1)
      {
        v29 = v37;
        v27(v37, v28, v6);
        v30 = (void (*)(char *, char *, uint64_t))v42[2];
        v30(v12, v15, v6);
        v30(v38, v29, v6);
        sub_1BCAB4BA8();
        v25(v29, v6);
        v25(v15, v6);
        return (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v22, v36);
      }
      v25(v15, v6);
    }
    (*(void (**)(char *, uint64_t))(v35 + 8))(v22, v36);
    v33 = &qword_1ED6C7280;
    v32 = (void (*)(uint64_t))MEMORY[0x1E0CB0870];
    v18 = v39;
  }
  sub_1BC9D11F4((uint64_t)v18, v33, v32);
  result = sub_1BCAB65C4();
  __break(1u);
  return result;
}

uint64_t DateInterval.inset(by:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  __n128 v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  void (*v34)(char *, uint64_t);
  unsigned int (*v35)(char *, uint64_t, uint64_t);
  char *v36;
  void (*v37)(char *, char *, uint64_t);
  char *v38;
  char *v39;
  char *v40;
  double v41;
  double v42;
  char *v43;
  double v44;
  uint64_t v45;
  void (*v46)(char *, uint64_t);
  uint64_t v47;
  uint64_t result;
  void (*v49)(char *, char *, uint64_t);
  uint64_t v50;
  void (*v51)(char *, uint64_t);
  void (*v52)(uint64_t);
  unint64_t *v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  char *v67;

  v64 = a2;
  sub_1BC9AFF04(0, &qword_1ED6C7280, (void (*)(uint64_t))MEMORY[0x1E0CB0870]);
  MEMORY[0x1E0C80A78](v3);
  v63 = (char *)&v54 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v66 = (char *)&v54 - v6;
  v7 = sub_1BCAB4E54();
  v8 = *(_QWORD **)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v55 = (char *)&v54 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v62 = (char *)&v54 - v11;
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v54 - v13;
  MEMORY[0x1E0C80A78](v15);
  v59 = (char *)&v54 - v16;
  sub_1BC9AFF04(0, &qword_1ED6C7288, (void (*)(uint64_t))MEMORY[0x1E0CB11F0]);
  MEMORY[0x1E0C80A78](v17);
  v19 = (char *)&v54 - v18;
  v20 = sub_1BCAB4F74();
  v21 = *(_QWORD *)(v20 - 8);
  MEMORY[0x1E0C80A78](v20);
  v23 = (char *)&v54 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = sub_1BCAB4C74();
  MEMORY[0x1E0C80A78](v24);
  v26 = (char *)&v54 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = MEMORY[0x1E0C80A78](v27);
  v30 = (char *)&v54 - v29;
  v57 = v32;
  v58 = v31;
  (*(void (**)(char *, uint64_t, __n128))(v32 + 16))((char *)&v54 - v29, a1, v28);
  v67 = v26;
  DateComponents.negated.getter((uint64_t)v26);
  sub_1BCAB4C5C();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20) == 1)
  {
    v52 = (void (*)(uint64_t))MEMORY[0x1E0CB11F0];
    v53 = &qword_1ED6C7288;
LABEL_11:
    sub_1BC9D11F4((uint64_t)v19, v53, v52);
    result = sub_1BCAB65C4();
    __break(1u);
    return result;
  }
  v60 = v21;
  v61 = v20;
  (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v23, v19, v20);
  sub_1BCAB4BC0();
  v33 = v66;
  v56 = v30;
  sub_1BCAB4F2C();
  v34 = (void (*)(char *, uint64_t))v8[1];
  v34(v14, v7);
  v35 = (unsigned int (*)(char *, uint64_t, uint64_t))v8[6];
  v36 = v23;
  if (v35(v33, 1, v7) == 1)
  {
    v63 = v66;
LABEL_10:
    (*(void (**)(char *, uint64_t))(v60 + 8))(v36, v61);
    v53 = &qword_1ED6C7280;
    v52 = (void (*)(uint64_t))MEMORY[0x1E0CB0870];
    v19 = v63;
    goto LABEL_11;
  }
  v37 = (void (*)(char *, char *, uint64_t))v8[4];
  v38 = v59;
  v37(v59, v66, v7);
  sub_1BCAB4B9C();
  v39 = v63;
  sub_1BCAB4F2C();
  v34(v14, v7);
  if (v35(v39, 1, v7) == 1)
  {
    v34(v38, v7);
    goto LABEL_10;
  }
  v40 = v62;
  v37(v62, v39, v7);
  sub_1BCAB4DA0();
  v42 = v41;
  sub_1BCAB4DA0();
  v43 = v56;
  if (v42 <= v44)
  {
    v49 = (void (*)(char *, char *, uint64_t))v8[2];
    v49(v14, v38, v7);
    v49(v55, v40, v7);
    sub_1BCAB4BA8();
    v34(v40, v7);
    v34(v38, v7);
    (*(void (**)(char *, uint64_t))(v60 + 8))(v36, v61);
    v50 = v58;
    v51 = *(void (**)(char *, uint64_t))(v57 + 8);
    v51(v67, v58);
    return ((uint64_t (*)(char *, uint64_t))v51)(v43, v50);
  }
  else
  {
    v34(v40, v7);
    v34(v38, v7);
    (*(void (**)(char *, uint64_t))(v60 + 8))(v36, v61);
    v45 = v58;
    v46 = *(void (**)(char *, uint64_t))(v57 + 8);
    v46(v67, v58);
    v46(v43, v45);
    v47 = sub_1BCAB4BD8();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v47 - 8) + 16))(v64, v65, v47);
  }
}

uint64_t DateInterval.clipStart(maxDuration:)@<X0>(uint64_t a1@<X8>, double a2@<D0>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  double v13;
  uint64_t v15;
  uint64_t v16;

  v5 = sub_1BCAB4E54();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v16 - v8;
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v16 - v11;
  if (a2 <= 0.0 || (sub_1BCAB4BCC(), v13 - a2 <= 0.0))
  {
    v15 = sub_1BCAB4BD8();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(a1, v2, v15);
  }
  else
  {
    sub_1BCAB4B9C();
    sub_1BCAB4DAC();
    (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v9, v12, v5);
    sub_1BCAB4B9C();
    sub_1BCAB4BA8();
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v12, v5);
  }
}

uint64_t static ChartContextHelpers.approximateSecondsInAnHour.getter()
{
  return 3600;
}

uint64_t static ChartContextHelpers.approximateSecondsInADay.getter()
{
  return 86400;
}

uint64_t static ChartContextHelpers.approximateSecondsInAWeek.getter()
{
  return 604800;
}

uint64_t static ChartContextHelpers.approximateSecondsInAMonth.getter()
{
  return 2419200;
}

uint64_t static ChartContextHelpers.approximateSecondsInAYear.getter()
{
  return 29030400;
}

uint64_t static ChartContextHelpers.approximateSeconds(for:)(char a1)
{
  return qword_1BCAC50D8[a1];
}

uint64_t static ChartContextHelpers.chartContextForDay(from:preferredOverlay:chartOptions:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v24[2];
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;

  v26 = a4;
  v28 = a2;
  v24[1] = a1;
  v27 = a3 & 1;
  v25 = sub_1BCAB5130();
  v4 = *(_QWORD *)(v25 - 8);
  MEMORY[0x1E0C80A78](v25);
  v6 = (char *)v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BC9AFF04(0, (unint64_t *)&qword_1ED6C71E0, (void (*)(uint64_t))MEMORY[0x1E0CAE5D0]);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)v24 - v8;
  v10 = sub_1BCAB4F74();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_1BCAB4E54();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14);
  v17 = (char *)v24 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18);
  v20 = (char *)v24 - v19;
  sub_1BCAB4F50();
  sub_1BCAB4E9C();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  sub_1BCAB5154();
  (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v17, v20, v14);
  sub_1BCAB4BB4();
  v21 = sub_1BCAB4BD8();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v9, 0, 1, v21);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v26, v25);
  v22 = sub_1BCAB513C();
  (*(void (**)(char *, uint64_t))(v15 + 8))(v20, v14);
  return v22;
}

uint64_t static ChartContextHelpers.chartContextForDays(with:referenceDate:preferredOverlay:chartOptions:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6)
{
  return sub_1BCA3E014(1, a1, a2, a3, a4, a5 & 1, a6);
}

uint64_t static ChartContextHelpers.chartContext(for:scalarOffsetRange:referenceDate:preferredOverlay:chartOptions:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7)
{
  return sub_1BCA3E014(a1, a2, a3, a4, a5, a6 & 1, a7);
}

uint64_t static ChartContextHelpers.chartContextForCalendarWeek(from:chartOptions:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t);
  void (*v31)(char *, uint64_t);
  unsigned int (*v32)(char *, uint64_t, uint64_t);
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(char *, uint64_t);
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;
  char *v50;
  char *v51;
  char *v52;
  void (*v53)(char *, uint64_t, uint64_t);
  uint64_t v54;
  char *v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;

  v64 = a2;
  v2 = sub_1BCAB5130();
  v62 = *(_QWORD *)(v2 - 8);
  v63 = v2;
  MEMORY[0x1E0C80A78](v2);
  v65 = (char *)&v49 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BC9AFF04(0, &qword_1ED6C7280, (void (*)(uint64_t))MEMORY[0x1E0CB0870]);
  MEMORY[0x1E0C80A78](v4);
  v57 = (char *)&v49 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v59 = (uint64_t)&v49 - v7;
  v61 = sub_1BCAB4E54();
  v66 = *(_QWORD *)(v61 - 8);
  MEMORY[0x1E0C80A78](v61);
  v51 = (char *)&v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v56 = (char *)&v49 - v10;
  MEMORY[0x1E0C80A78](v11);
  v52 = (char *)&v49 - v12;
  v13 = sub_1BCAB4F68();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v49 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_1BCAB4F74();
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17);
  v20 = (char *)&v49 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BC9AFF04(0, (unint64_t *)&qword_1ED6C71E0, (void (*)(uint64_t))MEMORY[0x1E0CAE5D0]);
  MEMORY[0x1E0C80A78](v21);
  v50 = (char *)&v49 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v23);
  v25 = (char *)&v49 - v24;
  v26 = sub_1BCAB4BD8();
  v27 = *(_QWORD *)(v26 - 8);
  MEMORY[0x1E0C80A78](v26);
  v55 = (char *)&v49 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BCAB4F50();
  v29 = *MEMORY[0x1E0CB1108];
  v53 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 104);
  v53(v16, v29, v13);
  sub_1BCAB4EA8();
  v30 = *(void (**)(char *, uint64_t))(v14 + 8);
  v30(v16, v13);
  v31 = *(void (**)(char *, uint64_t))(v18 + 8);
  v54 = v17;
  v31(v20, v17);
  v58 = v27;
  v32 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48);
  v60 = v26;
  if (v32(v25, 1, v26) == 1)
  {
    sub_1BC9D11F4((uint64_t)v25, (unint64_t *)&qword_1ED6C71E0, (void (*)(uint64_t))MEMORY[0x1E0CAE5D0]);
    sub_1BCAB5154();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v66 + 56))(v57, 1, 1, v61);
    (*(void (**)(char *, uint64_t, uint64_t))(v62 + 16))(v65, v64, v63);
    return sub_1BCAB5148();
  }
  else
  {
    v34 = v55;
    (*(void (**)(char *, char *, uint64_t))(v58 + 32))(v55, v25, v60);
    sub_1BCAB4F50();
    v35 = v13;
    v53(v16, *MEMORY[0x1E0CB1188], v13);
    v36 = v56;
    sub_1BCAB4BC0();
    v37 = v59;
    sub_1BCAB4F38();
    v38 = v66;
    v39 = *(void (**)(char *, uint64_t))(v66 + 8);
    v40 = v36;
    v41 = v61;
    v39(v40, v61);
    v30(v16, v35);
    v31(v20, v54);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v38 + 48))(v37, 1, v41) == 1)
    {
      sub_1BC9D11F4(v59, &qword_1ED6C7280, (void (*)(uint64_t))MEMORY[0x1E0CB0870]);
      sub_1BCAB5154();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v66 + 56))(v57, 1, 1, v41);
      (*(void (**)(char *, uint64_t, uint64_t))(v62 + 16))(v65, v64, v63);
      v33 = sub_1BCAB5148();
      (*(void (**)(char *, uint64_t))(v58 + 8))(v34, v60);
    }
    else
    {
      v42 = v66;
      v43 = v52;
      (*(void (**)(char *, uint64_t, uint64_t))(v66 + 32))(v52, v59, v41);
      sub_1BCAB5154();
      sub_1BCAB4BC0();
      (*(void (**)(char *, char *, uint64_t))(v42 + 16))(v51, v43, v41);
      v44 = v50;
      sub_1BCAB4BA8();
      v45 = v34;
      v46 = v58;
      v47 = v60;
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v58 + 56))(v44, 0, 1, v60);
      (*(void (**)(char *, uint64_t, uint64_t))(v62 + 16))(v65, v64, v63);
      v33 = sub_1BCAB513C();
      v39(v43, v41);
      (*(void (**)(char *, uint64_t))(v46 + 8))(v45, v47);
    }
  }
  return v33;
}

uint64_t static ChartContextHelpers.chartContextForStatistics(interval:from:preferredOverlay:chartOptions:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  _QWORD v17[2];

  v17[1] = a3;
  v6 = sub_1BCAB5130();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1BCAB4E54();
  MEMORY[0x1E0C80A78](v10);
  MEMORY[0x1E0C80A78](v11);
  sub_1BC9AFF04(0, (unint64_t *)&qword_1ED6C71E0, (void (*)(uint64_t))MEMORY[0x1E0CAE5D0]);
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)v17 - v13;
  sub_1BCAB5154();
  sub_1BCAB4DDC();
  sub_1BCAB4DDC();
  sub_1BCAB4BA8();
  v15 = sub_1BCAB4BD8();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v14, 0, 1, v15);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a5, v6);
  return sub_1BCAB513C();
}

uint64_t sub_1BCA3E014(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __n128 v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(char *, uint64_t, __n128);
  uint64_t v41;
  uint64_t result;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  void (*v47)(char *, uint64_t);
  unsigned int (*v48)(char *, uint64_t, uint64_t);
  uint64_t v49;
  char *v50;
  uint64_t (*v51)(char *, char *, uint64_t);
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  void (*v56)(char *, char *, uint64_t);
  char *v57;
  uint64_t v58;
  void (*v59)(char *, uint64_t);
  _DWORD v60[4];
  char *v61;
  char *v62;
  char *v63;
  char *v64;
  char *v65;
  char *v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;

  v72 = a7;
  v73 = a5;
  LODWORD(v74) = a6;
  v75 = a4;
  v76 = a1;
  v9 = sub_1BCAB5130();
  v70 = *(_QWORD *)(v9 - 8);
  v71 = v9;
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)v60 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BC9AFF04(0, (unint64_t *)&qword_1ED6C71E0, (void (*)(uint64_t))MEMORY[0x1E0CAE5D0]);
  MEMORY[0x1E0C80A78](v12);
  v64 = (char *)v60 - v13;
  v14 = sub_1BCAB4F74();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14);
  v17 = (char *)v60 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BC9AFF04(0, &qword_1ED6C7280, (void (*)(uint64_t))MEMORY[0x1E0CB0870]);
  MEMORY[0x1E0C80A78](v18);
  v66 = (char *)v60 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v20);
  v65 = (char *)v60 - v21;
  MEMORY[0x1E0C80A78](v22);
  v24 = (char *)v60 - v23;
  v25 = sub_1BCAB4E54();
  v26 = *(_QWORD *)(v25 - 8);
  MEMORY[0x1E0C80A78](v25);
  v62 = (char *)v60 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v28);
  v61 = (char *)v60 - v29;
  MEMORY[0x1E0C80A78](v30);
  v63 = (char *)v60 - v31;
  MEMORY[0x1E0C80A78](v32);
  v68 = (char *)v60 - v33;
  v34 = sub_1BCAB4F68();
  v35 = MEMORY[0x1E0C80A78](v34);
  v37 = (char *)v60 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = **((unsigned int **)&unk_1E754BBF8 + (char)v76);
  v69 = v39;
  v40 = *(void (**)(char *, uint64_t, __n128))(v39 + 104);
  v76 = v41;
  v40(v37, v38, v35);
  result = sub_1BCAB4F50();
  if (__OFSUB__(0, a2))
  {
    __break(1u);
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  v43 = v37;
  v44 = a2;
  v45 = a3;
  v67 = v11;
  v46 = v74 & 1;
  v74 = v43;
  sub_1BCAB4F38();
  v47 = *(void (**)(char *, uint64_t))(v15 + 8);
  v75 = v14;
  v47(v17, v14);
  v48 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48);
  if (v48(v24, 1, v25) == 1)
  {
    sub_1BC9D11F4((uint64_t)v24, &qword_1ED6C7280, (void (*)(uint64_t))MEMORY[0x1E0CB0870]);
    sub_1BCAB5154();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v26 + 56))(v66, 1, 1, v25);
    (*(void (**)(char *, uint64_t, uint64_t))(v70 + 16))(v67, v72, v71);
    v49 = sub_1BCAB5148();
    v50 = v74;
LABEL_9:
    (*(void (**)(char *, uint64_t))(v69 + 8))(v50, v76);
    return v49;
  }
  v60[3] = v46;
  v51 = *(uint64_t (**)(char *, char *, uint64_t))(v26 + 32);
  result = v51(v68, v24, v25);
  if (__OFSUB__(v45, v44))
    goto LABEL_11;
  result = sub_1BCAB4F50();
  if (!__OFSUB__(0, v45 - v44))
  {
    v52 = (uint64_t)v65;
    v50 = v74;
    v53 = v68;
    sub_1BCAB4F38();
    v47(v17, v75);
    if (v48((char *)v52, 1, v25) == 1)
    {
      sub_1BC9D11F4(v52, &qword_1ED6C7280, (void (*)(uint64_t))MEMORY[0x1E0CB0870]);
      sub_1BCAB5154();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v26 + 56))(v66, 1, 1, v25);
      (*(void (**)(char *, uint64_t, uint64_t))(v70 + 16))(v67, v72, v71);
      v49 = sub_1BCAB5148();
      (*(void (**)(char *, uint64_t))(v26 + 8))(v53, v25);
    }
    else
    {
      v54 = v63;
      v51(v63, (char *)v52, v25);
      sub_1BCAB5154();
      v55 = v26;
      v56 = *(void (**)(char *, char *, uint64_t))(v26 + 16);
      v56(v61, v54, v25);
      v56(v62, v53, v25);
      v57 = v64;
      sub_1BCAB4BA8();
      v58 = sub_1BCAB4BD8();
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v58 - 8) + 56))(v57, 0, 1, v58);
      (*(void (**)(char *, uint64_t, uint64_t))(v70 + 16))(v67, v72, v71);
      v49 = sub_1BCAB513C();
      v59 = *(void (**)(char *, uint64_t))(v55 + 8);
      v59(v54, v25);
      v59(v53, v25);
    }
    goto LABEL_9;
  }
LABEL_12:
  __break(1u);
  return result;
}

uint64_t dispatch thunk of ChartContextProducing.chartContext.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

ValueMetadata *type metadata accessor for ChartContextHelpers()
{
  return &type metadata for ChartContextHelpers;
}

uint64_t DiagramBar.__allocating_init(barDiagramConfig:barData:hbxViewControllerFactory:customMetricsFactory:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v8;

  v8 = swift_allocObject();
  DiagramBar.init(barDiagramConfig:barData:hbxViewControllerFactory:customMetricsFactory:)(a1, a2, a3, a4);
  return v8;
}

void (*sub_1BCA3E608())(uint64_t a1, double *a2, double a3, double a4)
{
  swift_retain();
  return sub_1BCA3F5F0;
}

void sub_1BCA3E638(uint64_t a1, double *a2, uint64_t a3, double a4, double a5)
{
  __int128 v10;
  CGFloat v11;
  __int128 v12;
  CGFloat v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  CGAffineTransform v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  CGFloat v22;
  CGPoint v23;
  CGRect v24;

  v10 = *((_OWORD *)a2 + 1);
  v19 = *(_OWORD *)a2;
  v20 = v10;
  v21 = *((_OWORD *)a2 + 2);
  v22 = a2[6];
  *(_QWORD *)&v10 = *(_QWORD *)(a3 + 32);
  v11 = *((double *)&v19 + 1);
  v12 = v20;
  v14 = v21;
  v13 = v22;
  v17.a = *((CGFloat *)&v19 + 1);
  *(_OWORD *)&v17.b = v20;
  *(_OWORD *)&v17.d = v21;
  v17.ty = v22;
  v15 = 0;
  CGPointApplyAffineTransform(*(CGPoint *)((char *)&v10 - 8), &v17);
  v24.origin.x = sub_1BCA2F530();
  v23.y = CGRectGetMaxY(v24);
  v17.a = v11;
  *(_OWORD *)&v17.b = v12;
  *(_OWORD *)&v17.d = v14;
  v17.ty = v13;
  v23.x = 0.0;
  CGPointApplyAffineTransform(v23, &v17);
  v16 = *((_OWORD *)a2 + 1);
  *(_OWORD *)&v17.a = *(_OWORD *)a2;
  *(_OWORD *)&v17.c = v16;
  *(_OWORD *)&v17.tx = *((_OWORD *)a2 + 2);
  v18 = *((_QWORD *)a2 + 6);
  sub_1BCA2F854(a1, (uint64_t *)&v17, a4, a5);
  __asm { BR              X9 }
}

uint64_t sub_1BCA3E790(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, CGFloat width, CGPoint point, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, CGAffineTransform *a16, uint64_t a17, uint64_t widtha, CGPoint pointa, __int128 a20,__int128 a21,uint64_t a22,uint64_t a23,__int128 a24,__int128 a25,__int128 a26,uint64_t a27,uint64_t a28,__int128 a29,__int128 a30,__int128 a31,uint64_t a32)
{
  uint64_t v32;
  CGContext *v33;
  uint64_t v34;
  uint64_t v35;
  double v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  Class isa;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;

  v38 = swift_bridgeObjectRelease();
  v39 = *(_QWORD *)(v32 + 96);
  v40 = *(_QWORD *)(v39 + 16);
  if (v40)
  {
    swift_bridgeObjectRetain();
    v41 = v34;
    v42 = 0;
    v62 = v41;
    v63 = v41;
    do
    {
      v43 = *(_QWORD *)(v39 + 8 * v42 + 32);
      if (*(_QWORD *)(v43 + 16))
      {
        swift_bridgeObjectRetain();
        v44 = sub_1BC9A2C2C(2u);
        if ((v45 & 1) != 0)
        {
          v46 = *(_QWORD *)(v43 + 56) + 40 * v44;
          v48 = *(_OWORD *)v46;
          v47 = *(_OWORD *)(v46 + 16);
          *(_QWORD *)(v35 - 224) = *(_QWORD *)(v46 + 32);
          *(_OWORD *)(v35 - 256) = v48;
          *(_OWORD *)(v35 - 240) = v47;
          if (*(_QWORD *)(*(_QWORD *)(v35 - 256) + 16))
          {
            LOBYTE(a24) = *(_BYTE *)(v32 + 22);
            sub_1BCA40804(v35 - 256);
            isa = DiagramConfiguration.Color.toColor()().super.isa;
            return ((uint64_t (*)(Class, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&loc_1BCA3E944 + *((int *)qword_1BCA3EFE0 + v63)))(isa, v50, v51, v52, v53, v54, v55, v56, a11, a12, a13, v62, v37, v35 - 248, a17, widtha);
          }
        }
        swift_bridgeObjectRelease();
      }
      ++v42;
    }
    while (v40 != v42);
    v38 = swift_bridgeObjectRelease();
    LODWORD(v34) = v62;
  }
  v58 = *(_QWORD *)(v32 + 96);
  v59 = *(_QWORD *)(v58 + 16);
  if (v59)
  {
    swift_bridgeObjectRetain();
    v60 = 0;
    do
    {
      v61 = *(_QWORD *)(v58 + 8 * v60++ + 32);
      a24 = a29;
      a25 = a30;
      a26 = a31;
      a27 = a32;
      swift_bridgeObjectRetain();
      sub_1BCA3FF44(v33, (double *)&a24, v61, *((double *)&a21 + 1), v36);
      swift_bridgeObjectRelease();
    }
    while (v59 != v60);
    v38 = swift_bridgeObjectRelease();
  }
  return ((uint64_t (*)(uint64_t))((char *)&loc_1BCA3EBCC + *((int *)qword_1BCA3EFF0 + v34)))(v38);
}

uint64_t sub_1BCA3EBDC()
{
  uint64_t v1;
  char v2;
  uint64_t result;
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  unint64_t v7;
  char v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  _OWORD v12[2];
  uint64_t v13;

  v2 = sub_1BCAB67C8();
  result = swift_bridgeObjectRelease();
  if ((v2 & 1) == 0)
  {
    v4 = *(_QWORD *)(v1 + 16);
    if (v4)
    {
      swift_bridgeObjectRetain();
      for (i = 0; i != v4; ++i)
      {
        v6 = *(_QWORD *)(v1 + 8 * i + 32);
        if (*(_QWORD *)(v6 + 16))
        {
          swift_bridgeObjectRetain();
          v7 = sub_1BC9A2C2C(2u);
          if ((v8 & 1) != 0)
          {
            v9 = *(_QWORD *)(v6 + 56) + 40 * v7;
            v11 = *(_OWORD *)v9;
            v10 = *(_OWORD *)(v9 + 16);
            v13 = *(_QWORD *)(v9 + 32);
            v12[0] = v11;
            v12[1] = v10;
            if (*(_QWORD *)(v11 + 16))
            {
              sub_1BCA40804((uint64_t)v12);
              DiagramConfiguration.Color.toColor()();
              __asm { BR              X8 }
            }
          }
          swift_bridgeObjectRelease();
        }
      }
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

void sub_1BCA3EF78()
{
  sub_1BCAB65C4();
  __break(1u);
  JUMPOUT(0x1BCA3EFD0);
}

void sub_1BCA3F010(CGContext *a1, CGFloat a2, CGFloat a3, double a4, double a5)
{
  uint64_t v5;
  void *v11;
  void *v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  uint64_t v21;
  double v22;
  double v23;
  double v24;
  CGFloat v25;
  double v26;
  CGColor *v27;
  void *v28;
  void *v29;
  id v30;
  CGRect v31;

  v11 = (void *)sub_1BCAB5EE0();
  type metadata accessor for Key(0);
  sub_1BC99F5A0();
  v12 = (void *)sub_1BCAB5E68();
  objc_msgSend(v11, sel_sizeWithAttributes_, v12);
  v14 = v13;
  v16 = v15;

  v17 = v14 * 0.5 + 1.0;
  v18 = v17 + a3;
  v19 = a3 - v17;
  if (v18 <= a4)
  {
    v20 = 0.0;
    if (v19 >= a5)
      goto LABEL_6;
  }
  else if (v19 >= a5)
  {
    v20 = v18 - a4;
    goto LABEL_6;
  }
  v20 = v19 - a5;
LABEL_6:
  v21 = *(_QWORD *)(v5 + 104);
  if (*(_BYTE *)(v21 + 144))
    v22 = 0.0;
  else
    v22 = *(double *)(v21 + 120);
  v23 = v20 - v14 * 0.5;
  v24 = v22 + sub_1BCA2F754();
  sub_1BCA2F63C();
  v25 = v14 + 2.0;
  v26 = v22 + sub_1BCA2F754();
  sub_1BCA2F63C();
  sub_1BCA3FF08();
  v30 = (id)sub_1BCAB630C();
  CGContextSaveGState(a1);
  CGContextTranslateCTM(a1, a2, a3);
  CGContextRotateCTM(a1, -1.57079633);
  v27 = (CGColor *)objc_msgSend(v30, sel_CGColor);
  CGContextSetFillColorWithColor(a1, v27);

  v31.origin.x = v20 + v25 * -0.5;
  v31.origin.y = -v26;
  v31.size.width = v25;
  v31.size.height = v16 + 2.0;
  CGContextFillRect(a1, v31);
  v28 = (void *)sub_1BCAB5EE0();
  v29 = (void *)sub_1BCAB5E68();
  objc_msgSend(v28, sel_drawAtPoint_withAttributes_, v29, v23, -v24);

  CGContextRestoreGState(a1);
}

uint64_t DiagramBar.init(barDiagramConfig:barData:hbxViewControllerFactory:customMetricsFactory:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  CGFloat v8;
  uint64_t v9;
  unsigned __int16 v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  double v19;
  char v20;
  double v21;
  double x;
  double y;
  double width;
  double height;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v38;
  char v39;
  unsigned __int16 v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v45;
  int v46;
  __int16 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  _QWORD v54[4];
  char v55;
  __C::CGRect v56;
  CGRect v57;
  CGRect v58;

  v5 = v4;
  v6 = *(_BYTE *)(a1 + 8);
  v7 = *(_BYTE *)(a1 + 9);
  v8 = *(double *)(a1 + 16);
  v9 = *(_QWORD *)(a1 + 24);
  v10 = *(_WORD *)(a1 + 36);
  v11 = *(_DWORD *)(a1 + 32);
  v42 = v11 | ((unint64_t)v10 << 32);
  v12 = *(char *)(a1 + 38);
  v14 = *(_QWORD *)a2;
  v13 = *(_QWORD *)(a2 + 8);
  v15 = *(_QWORD *)(a2 + 16);
  v16 = *(_QWORD *)(a2 + 24);
  v17 = *(_BYTE *)(a2 + 32);
  v18 = *(_QWORD *)(a2 + 40);
  v38 = HIBYTE(*(_QWORD *)a1);
  *(_QWORD *)(v4 + 16) = *(_QWORD *)a1;
  v39 = v6;
  *(_BYTE *)(v4 + 24) = v6;
  *(_BYTE *)(v4 + 25) = v7;
  *(CGFloat *)(v4 + 32) = v8;
  *(_QWORD *)(v4 + 40) = v9;
  *(_DWORD *)(v4 + 48) = v11;
  v40 = v10;
  v41 = v12;
  *(_WORD *)(v4 + 52) = v10;
  *(_BYTE *)(v4 + 54) = v12;
  *(_QWORD *)(v4 + 56) = v14;
  *(_QWORD *)(v4 + 64) = v13;
  *(_QWORD *)(v4 + 72) = v15;
  *(_QWORD *)(v4 + 80) = v16;
  *(_BYTE *)(v4 + 88) = v17;
  *(_QWORD *)(v4 + 96) = v18;
  v50 = v15;
  v51 = v16;
  v52 = v17;
  v53 = v18;
  swift_bridgeObjectRetain();
  v19 = COERCE_DOUBLE(sub_1BC9E29E8());
  v48 = v14;
  v49 = v13;
  if ((v20 & 1) != 0)
    v21 = 0.0;
  else
    v21 = v19;
  v50 = v15;
  v51 = v16;
  v52 = v17;
  v53 = v18;
  v56 = DiagramData.diagramBounds(forceNonZeroSize:)(1);
  v58.size.width = 0.0;
  v58.size.height = 0.0;
  v58.origin.x = v21;
  v58.origin.y = v8;
  v57 = CGRectUnion((CGRect)v56, v58);
  x = v57.origin.x;
  y = v57.origin.y;
  width = v57.size.width;
  height = v57.size.height;
  v48 = v9;
  WORD2(v49) = v40;
  LODWORD(v49) = v11;
  v26 = sub_1BCA3FBE4(&v48);
  v28 = v27;
  v48 = v14;
  v49 = v13;
  v50 = v15;
  v51 = v16;
  v52 = v17;
  v53 = v18;
  if ((sub_1BC9E2ABC() & 1) != 0)
  {
    LOBYTE(v54[0]) = v39;
    v48 = v14;
    v49 = v13;
    v50 = v15;
    v51 = v16;
    v52 = v17;
    v53 = v18;
    v29 = sub_1BC9E2B64();
    swift_bridgeObjectRelease();
    v30 = v38;
    if ((v29 & 1) == 0)
      v30 = 25;
    LOBYTE(v48) = v30;
    sub_1BCA3FD6C((uint64_t)v54);
  }
  else
  {
    swift_bridgeObjectRelease();
    v31 = qword_1BCAC51C8[v41];
    v32 = qword_1BCAC51E8[v41];
    v33 = v31;
    v34 = v32;
  }
  v45 = v9;
  v46 = v42;
  v47 = WORD2(v42);
  v54[0] = v31;
  v54[1] = v32;
  v54[2] = v33;
  v54[3] = v34;
  v55 = 0;
  sub_1BCA31C7C(a4, (uint64_t)&v48);
  type metadata accessor for DiagramAxis();
  swift_allocObject();
  sub_1BCA2F0F8(&v45, (uint64_t)v54, 0, 0, v26, v28, 0, a3, x, y, width, height, (uint64_t)&v48);
  v36 = v35;
  sub_1BCA3B12C(a4);
  *(_QWORD *)(v5 + 104) = v36;
  return v5;
}

uint64_t DiagramBar.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_release();
  return v0;
}

uint64_t DiagramBar.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocClassInstance();
}

void (*sub_1BCA3F5BC())(uint64_t a1, double *a2, double a3, double a4)
{
  swift_retain();
  return sub_1BCA3F5F0;
}

void sub_1BCA3F5F0(uint64_t a1, double *a2, double a3, double a4)
{
  uint64_t v4;

  sub_1BCA3E638(a1, a2, v4, a3, a4);
}

void sub_1BCA3F5FC(CGContext *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, double a6, double a7, double a8, double a9)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  void *v19;
  void *v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  CGFloat v29;
  double v30;
  CGFloat v31;
  double v32;
  CGFloat v33;
  CGColor *v34;
  const CGPath *v35;
  void *v36;
  void *v37;
  _QWORD v38[4];
  CGRect v39;

  v38[1] = a4;
  v38[2] = a2;
  v38[3] = a3;
  v15 = sub_1BCAB4FBC();
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15);
  v18 = (char *)v38 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = (void *)sub_1BCAB5EE0();
  type metadata accessor for Key(0);
  sub_1BC99F5A0();
  v20 = (void *)sub_1BCAB5E68();
  objc_msgSend(v19, sel_sizeWithAttributes_, v20);
  v22 = v21;
  v24 = v23;

  v25 = a6 - v22 * 0.5;
  v26 = a7 - v24 * 0.5;
  v27 = UIEdgeInsetsInsetRect(v25, v26, v22, v24, a8, a9);
  v29 = v28;
  v31 = v30;
  v33 = v32;
  CGContextSaveGState(a1);
  v34 = (CGColor *)objc_msgSend(a5, sel_CGColor);
  CGContextSetFillColorWithColor(a1, v34);

  v39.origin.x = v27;
  v39.origin.y = v29;
  v39.size.width = v31;
  v39.size.height = v33;
  v35 = CGPathCreateWithRoundedRect(v39, 6.0, 6.0, 0);
  CGContextAddPath(a1, v35);

  (*(void (**)(char *, _QWORD, uint64_t))(v16 + 104))(v18, *MEMORY[0x1E0C9B8A0], v15);
  sub_1BCAB615C();
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  CGContextSetBlendMode(a1, kCGBlendModeNormal);
  v36 = (void *)sub_1BCAB5EE0();
  v37 = (void *)sub_1BCAB5E68();
  objc_msgSend(v36, sel_drawAtPoint_withAttributes_, v37, v25, v26);

  CGContextRestoreGState(a1);
}

void sub_1BCA3F874(CGContext *a1, double *a2, uint64_t *a3, void *a4, char a5, CGFloat a6, double a7, double a8, double a9, double a10, double a11, double a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v18;
  unint64_t v19;
  CGFloat v20;
  CGFloat v21;
  CGFloat v22;
  CGFloat v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  CGPoint v28;
  double x;
  double y;
  CGPoint v31;
  double v32;
  double v33;
  CGPoint v34;
  CGPoint v35;
  id v36;
  void *v37;
  id v38;
  CGBlendMode v39;
  CGColor *v40;
  uint64_t v41;
  CGFloat v46;
  CGFloat v47;
  CGAffineTransform v49;
  _BYTE v50[16];
  uint64_t v51;
  uint64_t v52;
  CGPoint v53;
  CGPoint v54;

  v12 = *a3;
  v13 = *(_QWORD *)(*a3 + 16);
  if (v13)
  {
    LOBYTE(v49.a) = a5;
    DiagramConfiguration.TextAttributes.toTextAttributes()();
    v19 = v13 - 1;
    if (v13 == 1)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v41 = v18;
      v20 = a2[3];
      v46 = a2[2];
      v47 = a2[1];
      v22 = a2[4];
      v21 = a2[5];
      v23 = a2[6];
      sub_1BCA40894((uint64_t)(a3 + 1), (uint64_t)v50);
      v24 = (void *)objc_opt_self();
      v25 = 0;
      v26 = v13 - 2;
      v27 = v12 + 56;
      while (v19 != v25)
      {
        v53 = *(CGPoint *)(v27 - 24);
        v49.a = v47;
        v49.b = v46;
        v49.c = v20;
        v49.d = v22;
        v49.tx = v21;
        v49.ty = v23;
        v28 = CGPointApplyAffineTransform(v53, &v49);
        x = v28.x;
        y = v28.y;
        v54 = *(CGPoint *)(v27 - 8);
        v49.a = v47;
        v49.b = v46;
        v49.c = v20;
        v49.d = v22;
        v49.tx = v21;
        v49.ty = v23;
        v31 = CGPointApplyAffineTransform(v54, &v49);
        v32 = v31.x;
        v33 = v31.y;
        if (!v25 && a11 > 0.0)
        {
          CGAffineTransformMakeTranslation(&v49, a6 * 0.5 + a11, 0.0);
          v34 = CGPointApplyAffineTransform(v28, &v49);
          x = v34.x;
          y = v34.y;
        }
        if (v26 == v25 && a12 > 0.0)
        {
          CGAffineTransformMakeTranslation(&v49, -(a6 * 0.5 + a12), 0.0);
          v35 = CGPointApplyAffineTransform(v31, &v49);
          v32 = v35.x;
          v33 = v35.y;
        }
        CGContextSaveGState(a1);
        CGContextSaveGState(a1);
        v36 = objc_msgSend(v24, sel__currentTraitCollection);
        if (!v36)
          goto LABEL_25;
        v37 = v36;
        v38 = objc_msgSend(v36, sel_userInterfaceStyle);

        if (v38 == (id)2)
          v39 = kCGBlendModeNormal;
        else
          v39 = kCGBlendModePlusDarker;
        CGContextSetBlendMode(a1, v39);
        CGContextSetLineWidth(a1, a6);
        CGContextSetLineCap(a1, kCGLineCapRound);
        v40 = (CGColor *)objc_msgSend(a4, sel_CGColor);
        CGContextSetStrokeColorWithColor(a1, v40);

        sub_1BCAB6144();
        sub_1BCAB6150();
        CGContextStrokePath(a1);
        CGContextRestoreGState(a1);
        if (v19 >> 1 == v25)
        {
          sub_1BCA40894((uint64_t)v50, (uint64_t)&v51);
          if (v52)
          {
            if ((v19 & 1) != 0)
            {
              x = x + (v32 - x) * 0.5;
              y = y + (v33 - y) * 0.5;
            }
            sub_1BCA3F5FC(a1, v51, v52, v41, a4, x, y, a7, a8);
          }
        }
        ++v25;
        CGContextRestoreGState(a1);
        v27 += 16;
        if (v19 == v25)
        {
          swift_bridgeObjectRelease();
          return;
        }
      }
      __break(1u);
LABEL_25:
      __break(1u);
    }
  }
}

double sub_1BCA3FBE4(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;

  v1 = *a1;
  v2 = *a1 & 0xFF00000000;
  if (v2 != 0x300000000 && v2 != 0x200000000 && *a1 != 1)
  {
    v3 = BYTE6(v1);
    if (!BYTE5(v1) || BYTE5(v1) == 1)
      sub_1BCAB67C8();
    swift_bridgeObjectRelease();
    if (v3 <= 1)
      sub_1BCAB67C8();
    swift_bridgeObjectRelease();
  }
  return 0.0;
}

void sub_1BCA3FD6C(uint64_t a1)
{
  __asm { BR              X11 }
}

double sub_1BCA3FDBC()
{
  double v0;

  return v0;
}

uint64_t type metadata accessor for DiagramBar()
{
  return objc_opt_self();
}

uint64_t method lookup function for DiagramBar()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of DiagramBar.modelSpace.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

uint64_t dispatch thunk of DiagramBar.screenInsets.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t dispatch thunk of DiagramBar.drawingBlock.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t dispatch thunk of DiagramBar.__allocating_init(barDiagramConfig:barData:hbxViewControllerFactory:customMetricsFactory:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 176))();
}

unint64_t sub_1BCA3FF08()
{
  unint64_t result;

  result = qword_1ED6C5B20;
  if (!qword_1ED6C5B20)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1ED6C5B20);
  }
  return result;
}

void sub_1BCA3FF44(CGContext *a1, double *a2, uint64_t a3, double a4, double a5)
{
  _BYTE *v5;
  _BYTE *v6;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  double v16;
  CGFloat v17;
  double v18;
  CGFloat v19;
  double v20;
  CGFloat v21;
  double v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  char v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  UIColor v33;
  uint64_t v34;
  CGFloat v35;
  CGFloat v36;
  CGFloat v37;
  CGFloat v38;
  CGFloat v39;
  CGFloat v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  CGFloat *v44;
  uint64_t v45;
  uint64_t v46;
  CGFloat v47;
  double v48;
  CGPoint v49;
  id v50;
  const CGPath *v51;
  CGColor *v52;
  uint64_t v53;
  Class isa;
  id v55;
  Class v56;
  id v57;
  CGColorSpaceRef DeviceRGB;
  CGColorSpace *v59;
  const __CFArray *v60;
  CGGradientRef v61;
  uint64_t v62;
  uint64_t v63;
  CGFloat *v64;
  uint64_t v65;
  uint64_t v66;
  CGFloat v67;
  CGFloat v68;
  double x;
  double y;
  double v71;
  CGFloat v72;
  CGFloat v73;
  CGGradient *v74;
  id v75;
  const CGPath *v76;
  unint64_t v77;
  char v78;
  int v79;
  double v80;
  uint64_t v81;
  uint64_t v82;
  CGFloat v83;
  CGFloat v84;
  uint64_t v85;
  CGFloat *v86;
  Class v87;
  CGFloat v88;
  double v89;
  CGPoint v90;
  id v91;
  const CGPath *v92;
  Class v93;
  CGColor *v94;
  uint64_t v95;
  CGColorSpace *v96;
  uint64_t v97;
  _BYTE *v98;
  uint64_t v99;
  uint64_t v100;
  id v101;
  double v102;
  double v103;
  CGFloat v104;
  double v105;
  double v106;
  double v107;
  double v108;
  Class v109;
  double v110;
  double v111;
  double v112;
  char v113;
  CGAffineTransform v114;
  CGPoint v115;
  CGPoint v116;
  CGPoint v117;
  CGPoint v118;
  CGPoint v119;
  CGPoint v120;
  CGPoint v121;
  CGPoint v122;

  v6 = v5;
  v12 = sub_1BCAB4FBC();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v95 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(_QWORD *)(a3 + 16))
    return;
  v108 = a5;
  v17 = a2[1];
  v16 = a2[2];
  v18 = a2[3];
  v19 = a2[4];
  v21 = a2[5];
  v20 = a2[6];
  v22 = dbl_1BCAC5208[(char)v6[19]];
  v23 = sub_1BC9A2C2C(0);
  v112 = a4;
  if ((v24 & 1) != 0)
  {
    v100 = v13;
    v99 = a3;
    v25 = *(_QWORD *)(*(_QWORD *)(a3 + 56) + 40 * v23);
    v110 = dbl_1BCAC5220[(char)v6[16]];
    v26 = v6[17];
    v27 = v6[18];
    LOBYTE(v114.a) = v26;
    v113 = v27;
    v28 = DiagramConfiguration.Color.rawValue.getter();
    v30 = v29;
    if (v28 == DiagramConfiguration.Color.rawValue.getter() && v30 == v31)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease_n();
    }
    else
    {
      v32 = sub_1BCAB67C8();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v32 & 1) == 0)
      {
        v98 = v6;
        sub_1BC9A1210(0, (unint64_t *)&qword_1ED6C6710, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
        v53 = swift_allocObject();
        *(_OWORD *)(v53 + 16) = xmmword_1BCAC1E60;
        LOBYTE(v114.a) = v26;
        isa = DiagramConfiguration.Color.toColor()().super.isa;
        v55 = -[objc_class CGColor](isa, sel_CGColor);

        *(_QWORD *)(v53 + 32) = v55;
        LOBYTE(v114.a) = v27;
        v56 = DiagramConfiguration.Color.toColor()().super.isa;
        v57 = -[objc_class CGColor](v56, sel_CGColor);

        *(_QWORD *)(v53 + 40) = v57;
        *(_QWORD *)&v114.a = v53;
        sub_1BCAB6024();
        DeviceRGB = CGColorSpaceCreateDeviceRGB();
        type metadata accessor for CGColor(0);
        v59 = DeviceRGB;
        v60 = (const __CFArray *)sub_1BCAB600C();
        swift_bridgeObjectRelease();
        v61 = CGGradientCreateWithColors(v59, v60, dbl_1E7544650);

        if (v61)
        {
          v62 = *(_QWORD *)(v25 + 16);
          if (v62)
          {
            v96 = v59;
            v102 = v110 * 0.5;
            v101 = (id)objc_opt_self();
            v63 = *MEMORY[0x1E0C9B8A0];
            v97 = v25;
            v64 = (CGFloat *)(v25 + 40);
            v65 = v12;
            v66 = v100;
            v107 = v20;
            v106 = v21;
            v105 = v19;
            *(double *)&v109 = v18;
            v104 = v16;
            v103 = v17;
            v111 = v22;
            do
            {
              v117.x = *(v64 - 1);
              v67 = *v64;
              v68 = v104;
              v114.a = v17;
              v114.b = v104;
              v114.c = v18;
              v114.d = v19;
              v114.tx = v21;
              v114.ty = v20;
              v117.y = 0.0;
              x = CGPointApplyAffineTransform(v117, &v114).x;
              v114.a = v17;
              v114.b = v68;
              v114.c = v18;
              v114.d = v19;
              v114.tx = v21;
              v114.ty = v20;
              v118.x = 0.0;
              v118.y = v67;
              v22 = v111;
              y = CGPointApplyAffineTransform(v118, &v114).y;
              v71 = x - v102;
              v72 = x;
              v73 = v112;
              v74 = v61;
              v75 = objc_msgSend(v101, sel_bezierPathWithRoundedRect_byRoundingCorners_cornerRadii_, 3, v71, y, v110, v112 - y, v22, v22);
              v76 = (const CGPath *)objc_msgSend(v75, sel_CGPath);
              CGContextAddPath(a1, v76);

              CGContextClosePath(a1);
              CGContextSaveGState(a1);
              (*(void (**)(char *, uint64_t, uint64_t))(v66 + 104))(v15, v63, v65);
              sub_1BCAB6138();
              v61 = v74;
              (*(void (**)(char *, uint64_t))(v66 + 8))(v15, v65);
              v119.x = v72;
              v119.y = v108;
              v122.x = v72;
              v122.y = v73;
              CGContextDrawLinearGradient(a1, v74, v119, v122, 0);
              CGContextRestoreGState(a1);
              v64 += 2;
              --v62;
            }
            while (v62);

            swift_bridgeObjectRelease();
            v12 = v65;
            v17 = v103;
            v16 = v104;
            v18 = *(double *)&v109;
            v19 = v105;
            v21 = v106;
            v20 = v107;
          }
          else
          {

            swift_bridgeObjectRelease();
          }

        }
        else
        {
          swift_bridgeObjectRelease();

        }
        v13 = v100;
        goto LABEL_21;
      }
    }
    LOBYTE(v114.a) = v26;
    v33.super.isa = DiagramConfiguration.Color.toColor()().super.isa;
    v34 = *(_QWORD *)(v25 + 16);
    if (!v34)
    {

      swift_bridgeObjectRelease();
      v13 = v100;
LABEL_22:
      a3 = v99;
      goto LABEL_23;
    }
    v98 = v6;
    v111 = v22;
    v35 = v20;
    v36 = v21;
    v37 = v19;
    v38 = v18;
    v39 = v16;
    v40 = v17;
    v108 = v110 * 0.5;
    v109 = v33.super.isa;
    v41 = (void *)objc_opt_self();
    v42 = v25;
    v43 = *MEMORY[0x1E0C9B8A0];
    v97 = v42;
    v44 = (CGFloat *)(v42 + 40);
    v45 = v12;
    v46 = v100;
    do
    {
      v115.x = *(v44 - 1);
      v47 = *v44;
      v114.a = v40;
      v114.b = v39;
      v114.c = v38;
      v114.d = v37;
      v114.tx = v36;
      v114.ty = v35;
      v115.y = 0.0;
      v48 = CGPointApplyAffineTransform(v115, &v114).x;
      v114.a = v40;
      v114.b = v39;
      v114.c = v38;
      v114.d = v37;
      v114.tx = v36;
      v114.ty = v35;
      v116.x = 0.0;
      v116.y = v47;
      v49 = CGPointApplyAffineTransform(v116, &v114);
      v50 = objc_msgSend(v41, sel_bezierPathWithRoundedRect_byRoundingCorners_cornerRadii_, 3, v48 - v108, v49.y, v110, v112 - v49.y, v111, v111);
      v51 = (const CGPath *)objc_msgSend(v50, sel_CGPath);
      CGContextAddPath(a1, v51);

      CGContextClosePath(a1);
      v52 = (CGColor *)-[objc_class CGColor](v109, sel_CGColor);
      CGContextSetFillColorWithColor(a1, v52);

      (*(void (**)(char *, uint64_t, uint64_t))(v46 + 104))(v15, v43, v45);
      sub_1BCAB615C();
      (*(void (**)(char *, uint64_t))(v46 + 8))(v15, v45);
      v44 += 2;
      --v34;
    }
    while (v34);

    swift_bridgeObjectRelease();
    v13 = v46;
    v12 = v45;
    v17 = v40;
    v16 = v39;
    v18 = v38;
    v19 = v37;
    v21 = v36;
    v20 = v35;
    v22 = v111;
LABEL_21:
    v6 = v98;
    goto LABEL_22;
  }
LABEL_23:
  if (*(_QWORD *)(a3 + 16))
  {
    v77 = sub_1BC9A2C2C(1u);
    if ((v78 & 1) != 0)
    {
      v79 = v6[20];
      if (v79 != 35)
      {
        v80 = *(double *)(*(_QWORD *)(a3 + 56) + 40 * v77);
        v81 = *(_QWORD *)(*(_QWORD *)&v80 + 16);
        if (v81)
        {
          v82 = (char)v6[16];
          *(double *)&v109 = v18;
          v83 = v16;
          v111 = v22;
          v84 = v17;
          v110 = dbl_1BCAC5220[v82];
          v108 = v110 * 0.5;
          v107 = COERCE_DOUBLE(objc_opt_self());
          v85 = *MEMORY[0x1E0C9B8A0];
          swift_bridgeObjectRetain();
          v106 = v80;
          v86 = (CGFloat *)(*(_QWORD *)&v80 + 40);
          v87 = v109;
          do
          {
            v120.x = *(v86 - 1);
            v88 = *v86;
            v114.a = v84;
            v114.b = v83;
            *(_QWORD *)&v114.c = v87;
            v114.d = v19;
            v114.tx = v21;
            v114.ty = v20;
            v120.y = 0.0;
            v89 = CGPointApplyAffineTransform(v120, &v114).x;
            v114.a = v84;
            v114.b = v83;
            *(_QWORD *)&v114.c = v87;
            v114.d = v19;
            v114.tx = v21;
            v114.ty = v20;
            v121.x = 0.0;
            v121.y = v88;
            v90 = CGPointApplyAffineTransform(v121, &v114);
            v91 = objc_msgSend(*(id *)&v107, sel_bezierPathWithRoundedRect_byRoundingCorners_cornerRadii_, 3, v89 - v108, v90.y, v110, v112 - v90.y, v111, v111);
            v92 = (const CGPath *)objc_msgSend(v91, sel_CGPath);
            CGContextAddPath(a1, v92);

            CGContextClosePath(a1);
            LOBYTE(v114.a) = v79;
            v93 = DiagramConfiguration.Color.toColor()().super.isa;
            v94 = (CGColor *)-[objc_class CGColor](v93, sel_CGColor);
            CGContextSetFillColorWithColor(a1, v94);

            (*(void (**)(char *, uint64_t, uint64_t))(v13 + 104))(v15, v85, v12);
            sub_1BCAB615C();
            (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);

            v86 += 2;
            --v81;
          }
          while (v81);
          swift_bridgeObjectRelease();
        }
      }
    }
  }
}

uint64_t sub_1BCA40804(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1BCA4084C(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1BCA40894(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1BC9A1210(0, (unint64_t *)&qword_1ED6C2C80, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t DelayedImmutable.init()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 56))(a2, 1, 1);
}

uint64_t DelayedImmutable.wrappedValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;

  v3 = v2;
  v5 = *(_QWORD *)(a1 + 16);
  v6 = sub_1BCAB6384();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v13 - v9;
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v7 + 16))((char *)&v13 - v9, v3, v6, v8);
  v11 = *(_QWORD *)(v5 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v10, 1, v5) != 1)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 32))(a2, v10, v5);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  result = sub_1BCAB65C4();
  __break(1u);
  return result;
}

uint64_t sub_1BCA40A28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v4 = *(_QWORD *)(a4 + a3 - 8);
  v5 = MEMORY[0x1E0C80A78](a1);
  v7 = (char *)&v13 - v6;
  (*(void (**)(char *, __n128))(v8 + 16))((char *)&v13 - v6, v5);
  v11 = type metadata accessor for DelayedImmutable(0, v4, v9, v10);
  return DelayedImmutable.wrappedValue.setter((uint64_t)v7, v11);
}

uint64_t DelayedImmutable.wrappedValue.setter(uint64_t a1, uint64_t a2)
{
  char *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  int v11;
  void (*v12)(char *, uint64_t);
  uint64_t result;
  uint64_t v14;

  v4 = *(_QWORD *)(a2 + 16);
  v5 = sub_1BCAB6384();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v14 - v8;
  (*(void (**)(char *, char *, uint64_t, __n128))(v6 + 16))((char *)&v14 - v8, v2, v5, v7);
  v10 = *(_QWORD *)(v4 - 8);
  v11 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48))(v9, 1, v4);
  v12 = *(void (**)(char *, uint64_t))(v6 + 8);
  v12(v9, v5);
  if (v11 == 1)
  {
    v12(v2, v5);
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 32))(v2, a1, v4);
    return (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v2, 0, 1, v4);
  }
  else
  {
    result = sub_1BCAB65C4();
    __break(1u);
  }
  return result;
}

void (*DelayedImmutable.wrappedValue.modify(_QWORD *a1, uint64_t a2))(uint64_t **a1, char a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  void *v9;

  v5 = malloc(0x30uLL);
  *a1 = v5;
  *v5 = a2;
  v5[1] = v2;
  v6 = *(_QWORD *)(a2 + 16);
  v5[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v5[4] = malloc(v8);
  v9 = malloc(v8);
  v5[5] = v9;
  DelayedImmutable.wrappedValue.getter(a2, (uint64_t)v9);
  return sub_1BCA40C78;
}

void sub_1BCA40C78(uint64_t **a1, char a2)
{
  uint64_t *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *a1;
  v3 = (void *)(*a1)[4];
  v4 = (void *)(*a1)[5];
  if ((a2 & 1) != 0)
  {
    v5 = v2[2];
    v6 = v2[3];
    v7 = *v2;
    (*(void (**)(uint64_t, void *, uint64_t))(v6 + 16))((*a1)[4], v4, v5);
    DelayedImmutable.wrappedValue.setter((uint64_t)v3, v7);
    (*(void (**)(void *, uint64_t))(v6 + 8))(v4, v5);
  }
  else
  {
    DelayedImmutable.wrappedValue.setter((*a1)[5], *v2);
  }
  free(v4);
  free(v3);
  free(v2);
}

uint64_t sub_1BCA40D10@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v5;

  v5 = type metadata accessor for DelayedImmutable(0, *(_QWORD *)(a2 + a1 - 8), a2, a3);
  return DelayedImmutable.wrappedValue.getter(v5, a4);
}

uint64_t sub_1BCA40D4C()
{
  return 8;
}

_QWORD *sub_1BCA40D58(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_1BCA40D64()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t sub_1BCA40D6C()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1BCAB6384();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_1BCA40DD8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  size_t v8;
  uint64_t v11;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_DWORD *)(v6 + 80);
  if (*(_DWORD *)(v6 + 84))
    v8 = *(_QWORD *)(v6 + 64);
  else
    v8 = *(_QWORD *)(v6 + 64) + 1;
  if (*(_DWORD *)(v6 + 80) > 7u || (v7 & 0x100000) != 0 || v8 > 0x18)
  {
    v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v7 + 16) & ~(unint64_t)v7));
    swift_retain();
  }
  else if ((*(unsigned int (**)(uint64_t *, uint64_t, _QWORD))(v6 + 48))(a2, 1, *(_QWORD *)(a3 + 16)))
  {
    memcpy(a1, a2, v8);
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v5);
    (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
  }
  return a1;
}

uint64_t sub_1BCA40EB0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(a1, 1, v3);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  return result;
}

void *sub_1BCA40F0C(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  size_t v7;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
  {
    if (*(_DWORD *)(v6 + 84))
      v7 = *(_QWORD *)(v6 + 64);
    else
      v7 = *(_QWORD *)(v6 + 64) + 1;
    memcpy(a1, a2, v7);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(a1, a2, v5);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
  }
  return a1;
}

void *sub_1BCA40FA4(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void *, uint64_t, uint64_t);
  int v8;
  int v9;
  size_t v10;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  v8 = v7(a1, 1, v5);
  v9 = v7(a2, 1, v5);
  if (v8)
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 16))(a1, a2, v5);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      return a1;
    }
  }
  else
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 24))(a1, a2, v5);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v6 + 8))(a1, v5);
  }
  if (*(_DWORD *)(v6 + 84))
    v10 = *(_QWORD *)(v6 + 64);
  else
    v10 = *(_QWORD *)(v6 + 64) + 1;
  memcpy(a1, a2, v10);
  return a1;
}

void *sub_1BCA41084(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  size_t v7;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
  {
    if (*(_DWORD *)(v6 + 84))
      v7 = *(_QWORD *)(v6 + 64);
    else
      v7 = *(_QWORD *)(v6 + 64) + 1;
    memcpy(a1, a2, v7);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 32))(a1, a2, v5);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
  }
  return a1;
}

void *sub_1BCA4111C(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void *, uint64_t, uint64_t);
  int v8;
  int v9;
  size_t v10;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  v8 = v7(a1, 1, v5);
  v9 = v7(a2, 1, v5);
  if (v8)
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 32))(a1, a2, v5);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      return a1;
    }
  }
  else
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 40))(a1, a2, v5);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v6 + 8))(a1, v5);
  }
  if (*(_DWORD *)(v6 + 84))
    v10 = *(_QWORD *)(v6 + 64);
  else
    v10 = *(_QWORD *)(v6 + 64) + 1;
  memcpy(a1, a2, v10);
  return a1;
}

uint64_t sub_1BCA411FC(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  char v9;
  int v10;
  unsigned int v11;
  int v12;
  int v13;
  unsigned int v14;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = v5 - 1;
  if (!v5)
    v6 = 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (!v5)
    ++v7;
  if (!a2)
    return 0;
  v8 = a2 - v6;
  if (a2 > v6)
  {
    v9 = 8 * v7;
    if (v7 > 3)
      goto LABEL_8;
    v11 = ((v8 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v11))
    {
      v10 = *(_DWORD *)(a1 + v7);
      if (v10)
        goto LABEL_15;
    }
    else
    {
      if (v11 <= 0xFF)
      {
        if (v11 < 2)
          goto LABEL_24;
LABEL_8:
        v10 = *(unsigned __int8 *)(a1 + v7);
        if (!*(_BYTE *)(a1 + v7))
          goto LABEL_24;
LABEL_15:
        v12 = (v10 - 1) << v9;
        if (v7 > 3)
          v12 = 0;
        if ((_DWORD)v7)
        {
          if (v7 <= 3)
            v13 = v7;
          else
            v13 = 4;
          __asm { BR              X12 }
        }
        return v6 + v12 + 1;
      }
      v10 = *(unsigned __int16 *)(a1 + v7);
      if (*(_WORD *)(a1 + v7))
        goto LABEL_15;
    }
  }
LABEL_24:
  if (v5 < 2)
    return 0;
  v14 = (*(uint64_t (**)(void))(v4 + 48))();
  if (v14 >= 2)
    return v14 - 1;
  else
    return 0;
}

void sub_1BCA4133C(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unsigned int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  size_t v10;
  BOOL v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;

  v6 = 0u;
  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  v9 = v8 - 1;
  if (v8)
  {
    v10 = *(_QWORD *)(v7 + 64);
  }
  else
  {
    v9 = 0;
    v10 = *(_QWORD *)(v7 + 64) + 1;
  }
  v11 = a3 >= v9;
  v12 = a3 - v9;
  if (v12 != 0 && v11)
  {
    if (v10 > 3)
    {
      v6 = 1u;
      if (v9 < a2)
        goto LABEL_14;
      goto LABEL_21;
    }
    v13 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
    if (HIWORD(v13))
    {
      v6 = 4u;
      if (v9 < a2)
      {
LABEL_14:
        v14 = ~v9 + a2;
        if (v10 < 4)
        {
          if ((_DWORD)v10)
          {
            v15 = v14 & ~(-1 << (8 * v10));
            bzero(a1, v10);
            if ((_DWORD)v10 == 3)
            {
              *a1 = v15;
              *((_BYTE *)a1 + 2) = BYTE2(v15);
            }
            else if ((_DWORD)v10 == 2)
            {
              *a1 = v15;
            }
            else
            {
              *(_BYTE *)a1 = v15;
            }
          }
        }
        else
        {
          bzero(a1, v10);
          *(_DWORD *)a1 = v14;
        }
        __asm { BR              X10 }
      }
LABEL_21:
      __asm { BR              X11 }
    }
    if (v13 >= 0x100)
      v6 = 2;
    else
      v6 = v13 > 1;
  }
  if (v9 < a2)
    goto LABEL_14;
  goto LABEL_21;
}

void sub_1BCA414E4()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_1BCA414EC()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
}

uint64_t type metadata accessor for DelayedImmutable(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for DelayedImmutable);
}

uint64_t QueryOperationError.init(queryError:context:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  unint64_t v5;

  if (result)
  {
    v5 = result | 0x8000000000000000;
  }
  else
  {
    result = swift_bridgeObjectRelease();
    a2 = 0;
    a3 = 0;
    v5 = 0xC000000000000000;
  }
  *a4 = a2;
  a4[1] = a3;
  a4[2] = v5;
  return result;
}

BOOL QueryOperationError.isRecoverable.getter()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  BOOL v3;
  _BOOL8 result;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = v1 >> 61;
  v3 = v1 >> 61 == 3 || (_DWORD)v2 == 5;
  result = 0;
  if (!v3)
  {
    if ((_DWORD)v2 != 6)
      return 1;
    if (v1 != 0xC000000000000000 || *(_OWORD *)v0 != 0)
      return 1;
  }
  return result;
}

BOOL sub_1BCA415A4()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  BOOL v3;
  _BOOL8 result;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = v1 >> 61;
  v3 = v1 >> 61 == 3 || (_DWORD)v2 == 5;
  result = 0;
  if (!v3)
  {
    if ((_DWORD)v2 != 6)
      return 1;
    if (v1 != 0xC000000000000000 || *(_OWORD *)v0 != 0)
      return 1;
  }
  return result;
}

void QueryOperationError.errorDescription.getter()
{
  __asm { BR              X11 }
}

uint64_t sub_1BCA41640()
{
  sub_1BCAB64C8();
  sub_1BCAB5F70();
  sub_1BCAB5F70();
  return 0;
}

uint64_t _s19HealthVisualization19QueryOperationErrorO2eeoiySbAC_ACtFZ_0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;

  sub_1BC9A82C4();
  v0 = sub_1BCAB6810();
  v2 = v1;
  if (v0 == sub_1BCAB6810() && v2 == v3)
    v5 = 1;
  else
    v5 = sub_1BCAB67C8();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

void destroy for QueryOperationError(uint64_t a1)
{
  sub_1BCA41920(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
}

void sub_1BCA41920(uint64_t a1, uint64_t a2, unint64_t a3)
{
  void *v3;

  switch(a3 >> 61)
  {
    case 0uLL:
    case 1uLL:
    case 2uLL:
    case 3uLL:
    case 5uLL:
      swift_bridgeObjectRelease();
      break;
    case 4uLL:
      v3 = (void *)(a3 & 0x1FFFFFFFFFFFFFFFLL);
      swift_bridgeObjectRelease();

      break;
    default:
      return;
  }
}

uint64_t *_s19HealthVisualization19QueryOperationErrorOwCP_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  sub_1BC9A8308(*a2, v4, v5);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  return a1;
}

uint64_t *assignWithCopy for QueryOperationError(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  sub_1BC9A8308(*a2, v4, v5);
  v6 = *a1;
  v7 = a1[1];
  v8 = a1[2];
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  sub_1BCA41920(v6, v7, v8);
  return a1;
}

uint64_t *assignWithTake for QueryOperationError(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *a1;
  v6 = a1[1];
  v5 = a1[2];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  a1[2] = v3;
  sub_1BCA41920(v4, v6, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for QueryOperationError(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7A && *(_BYTE *)(a1 + 24))
    return (*(_DWORD *)a1 + 122);
  v3 = (((*(_QWORD *)(a1 + 16) >> 57) >> 4) | (8
                                                           * ((*(_QWORD *)(a1 + 16) >> 57) & 8 | *(_QWORD *)(a1 + 16) & 7))) ^ 0x7F;
  if (v3 >= 0x79)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for QueryOperationError(uint64_t result, unsigned int a2, unsigned int a3)
{
  uint64_t v3;

  if (a2 > 0x79)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 122;
    if (a3 >= 0x7A)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if (a3 >= 0x7A)
      *(_BYTE *)(result + 24) = 0;
    if (a2)
    {
      v3 = (-a2 >> 3) & 0xF | (16 * (-a2 & 0x7F));
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = 0;
      *(_QWORD *)(result + 16) = (v3 | (v3 << 57)) & 0xF000000000000007;
    }
  }
  return result;
}

uint64_t sub_1BCA41B08(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 16) >> 61;
  if (v1 <= 5)
    return v1;
  else
    return (*(_DWORD *)a1 + 6);
}

uint64_t sub_1BCA41B24(uint64_t result)
{
  *(_QWORD *)(result + 16) &= 0x1FFFFFFFFFFFFFFFuLL;
  return result;
}

uint64_t sub_1BCA41B34(uint64_t result, uint64_t a2)
{
  if (a2 < 6)
  {
    *(_QWORD *)(result + 16) = *(_QWORD *)(result + 16) & 0xFFFFFFFFFFFFFF8 | (a2 << 61);
  }
  else
  {
    *(_QWORD *)result = (a2 - 6);
    *(_OWORD *)(result + 8) = xmmword_1BCAC5390;
  }
  return result;
}

ValueMetadata *type metadata accessor for QueryOperationError()
{
  return &type metadata for QueryOperationError;
}

uint64_t QuantityTypeIdentifiable.quantityTypeIdentifier.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  (*(void (**)(void))(*(_QWORD *)(a2 + 8) + 8))();
  v2 = sub_1BCAB5EE0();
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t QuantityTypeIdentifiable.quantityType.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  void *ObjCClassFromMetadata;
  void *v9;
  id v10;
  uint64_t result;
  void *v12;
  _QWORD v13[4];

  v5 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1);
  v7 = (char *)v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BC9B3A7C();
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  (*(void (**)(uint64_t))(*(_QWORD *)(a2 + 8) + 8))(a1);
  v9 = (void *)sub_1BCAB5EE0();
  swift_bridgeObjectRelease();
  v10 = objc_msgSend(ObjCClassFromMetadata, sel_quantityTypeForIdentifier_, v9);

  if (v10)
    return (uint64_t)v10;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v2, a1);
  v13[2] = 0;
  v13[3] = 0xE000000000000000;
  sub_1BCAB64C8();
  sub_1BCAB5F70();
  v12 = (void *)QuantityTypeIdentifiable.quantityTypeIdentifier.getter(a1, a2);
  v13[1] = v12;
  type metadata accessor for HKQuantityTypeIdentifier(0);
  sub_1BCAB657C();

  result = sub_1BCAB65C4();
  __break(1u);
  return result;
}

id StatisticsQueryConfigurationOverrides.predicate.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  id v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  id v15;
  id v16;
  void *v17;
  _QWORD v19[2];

  v1 = v0;
  sub_1BC9B0190();
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1BCAB4BD8();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BCA214F8(v1, (uint64_t)v4);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    sub_1BC9B01E4((uint64_t)v4);
    v9 = *(id *)(v1 + *(int *)(type metadata accessor for StatisticsQueryConfigurationOverrides() + 20));
    if (v9)
      v10 = v9;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v4, v5);
    v11 = (void *)objc_opt_self();
    v12 = (void *)sub_1BCAB4B78();
    v9 = objc_msgSend(v11, sel_predicateForSamplesWithinDateInterval_options_, v12, 0);

    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v13 = *(void **)(v1 + *(int *)(type metadata accessor for StatisticsQueryConfigurationOverrides() + 20));
    if (v13)
    {
      sub_1BC9AFE08();
      v14 = swift_allocObject();
      *(_OWORD *)(v14 + 16) = xmmword_1BCAC1E60;
      *(_QWORD *)(v14 + 32) = v9;
      *(_QWORD *)(v14 + 40) = v13;
      v19[1] = v14;
      sub_1BCAB6024();
      sub_1BCA42044();
      v15 = v13;
      v16 = v9;
      v17 = (void *)sub_1BCAB600C();
      swift_bridgeObjectRelease();
      v9 = objc_msgSend((id)objc_opt_self(), sel_andPredicateWithSubpredicates_, v17);

    }
  }
  return v9;
}

uint64_t StatisticsQueryConfigurationOverrides.init(dateInterval:additionalPredicate:useQueryCaching:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t result;

  sub_1BC9B39DC(a1, a4);
  result = type metadata accessor for StatisticsQueryConfigurationOverrides();
  *(_QWORD *)(a4 + *(int *)(result + 20)) = a2;
  *(_BYTE *)(a4 + *(int *)(result + 24)) = a3;
  return result;
}

uint64_t StatisticsQueryConfigurationOverrides.dateInterval.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1BCA214F8(v1, a1);
}

void *StatisticsQueryConfigurationOverrides.additionalPredicate.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + *(int *)(type metadata accessor for StatisticsQueryConfigurationOverrides() + 20));
  v2 = v1;
  return v1;
}

uint64_t StatisticsQueryConfigurationOverrides.useQueryCaching.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for StatisticsQueryConfigurationOverrides() + 24));
}

uint64_t sub_1BCA41FFC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1BCA214F8(v1, a1);
}

uint64_t type metadata accessor for StatisticsQueryConfigurationOverrides()
{
  uint64_t result;

  result = qword_1ED6C6C58;
  if (!qword_1ED6C6C58)
    return swift_getSingletonMetadata();
  return result;
}

unint64_t sub_1BCA42044()
{
  unint64_t result;

  result = qword_1ED6C2E60;
  if (!qword_1ED6C2E60)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1ED6C2E60);
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for StatisticsQueryConfigurationOverrides(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  id v14;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_1BCAB4BD8();
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      sub_1BC9B0190();
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    v11 = *(int *)(a3 + 20);
    v12 = *(int *)(a3 + 24);
    v13 = *(void **)((char *)a2 + v11);
    *(uint64_t *)((char *)a1 + v11) = (uint64_t)v13;
    *((_BYTE *)a1 + v12) = *((_BYTE *)a2 + v12);
    v14 = v13;
  }
  return a1;
}

void destroy for StatisticsQueryConfigurationOverrides(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = sub_1BCAB4BD8();
  v5 = *(_QWORD *)(v4 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1, v4))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);

}

char *initializeWithCopy for StatisticsQueryConfigurationOverrides(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;

  v6 = sub_1BCAB4BD8();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    sub_1BC9B0190();
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v9 = *(int *)(a3 + 20);
  v10 = *(int *)(a3 + 24);
  v11 = *(void **)&a2[v9];
  *(_QWORD *)&a1[v9] = v11;
  a1[v10] = a2[v10];
  v12 = v11;
  return a1;
}

char *assignWithCopy for StatisticsQueryConfigurationOverrides(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  id v15;

  v6 = sub_1BCAB4BD8();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 24))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    sub_1BC9B0190();
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_7:
  v12 = *(int *)(a3 + 20);
  v13 = *(void **)&a1[v12];
  v14 = *(void **)&a2[v12];
  *(_QWORD *)&a1[v12] = v14;
  v15 = v14;

  a1[*(int *)(a3 + 24)] = a2[*(int *)(a3 + 24)];
  return a1;
}

char *initializeWithTake for StatisticsQueryConfigurationOverrides(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = sub_1BCAB4BD8();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    sub_1BC9B0190();
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v9 = *(int *)(a3 + 24);
  *(_QWORD *)&a1[*(int *)(a3 + 20)] = *(_QWORD *)&a2[*(int *)(a3 + 20)];
  a1[v9] = a2[v9];
  return a1;
}

char *assignWithTake for StatisticsQueryConfigurationOverrides(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;

  v6 = sub_1BCAB4BD8();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 40))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    sub_1BC9B0190();
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_7:
  v12 = *(int *)(a3 + 20);
  v13 = *(void **)&a1[v12];
  *(_QWORD *)&a1[v12] = *(_QWORD *)&a2[v12];

  a1[*(int *)(a3 + 24)] = a2[*(int *)(a3 + 24)];
  return a1;
}

uint64_t getEnumTagSinglePayload for StatisticsQueryConfigurationOverrides()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BCA4259C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;

  sub_1BC9B0190();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  v10 = v9 - 1;
  if (v10 < 0)
    v10 = -1;
  return (v10 + 1);
}

uint64_t storeEnumTagSinglePayload for StatisticsQueryConfigurationOverrides()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_1BCA42630(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;

  sub_1BC9B0190();
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, v8);
  else
    *(_QWORD *)(a1 + *(int *)(a4 + 20)) = a2;
}

void sub_1BCA426A8()
{
  unint64_t v0;

  sub_1BC9B0190();
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

void static CurrentValueDateGenerationSupport.startOrEndDate(sample:dateInterval:)(void *a1)
{
  id v2;

  v2 = objc_msgSend(a1, sel_sampleType);
  switch((unint64_t)objc_msgSend(v2, sel_code))
  {
    case 6uLL:
    case 0xBuLL:
    case 0x3BuLL:
    case 0x40uLL:
    case 0x41uLL:
    case 0x42uLL:
    case 0x45uLL:
    case 0x4AuLL:
    case 0x52uLL:
    case 0x54uLL:
    case 0x55uLL:
    case 0x56uLL:
    case 0x58uLL:
    case 0x5DuLL:
    case 0x5EuLL:
    case 0x5FuLL:
    case 0x67uLL:
    case 0x6AuLL:
    case 0x6DuLL:
    case 0x73uLL:
    case 0x75uLL:
    case 0x78uLL:
    case 0x79uLL:
    case 0x7AuLL:
    case 0x7BuLL:
    case 0x87uLL:
    case 0x88uLL:
    case 0x92uLL:
    case 0x94uLL:
    case 0xAEuLL:
    case 0xAFuLL:
    case 0xB0uLL:
    case 0xB1uLL:
    case 0xB5uLL:
    case 0xB8uLL:
    case 0xB9uLL:
    case 0xBFuLL:
    case 0xC0uLL:
    case 0xC1uLL:
    case 0xD0uLL:
    case 0xD7uLL:
    case 0xDAuLL:
    case 0xE3uLL:
    case 0xE4uLL:
    case 0xEEuLL:
    case 0xEFuLL:
    case 0xF7uLL:
    case 0x101uLL:
    case 0x105uLL:
    case 0x10FuLL:
    case 0x116uLL:
    case 0x123uLL:
    case 0x124uLL:
    case 0x132uLL:
    case 0x139uLL:
    case 0x13AuLL:

      if (!objc_msgSend(a1, sel_hasUndeterminedDuration))
        goto LABEL_5;
      sub_1BCAB4BC0();
      break;
    default:

LABEL_5:
      sub_1BCAB4B9C();
      break;
  }

}

uint64_t static CurrentValueDateGenerationSupport.dateInterval(for:calendarCache:)@<X0>(void *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  char *v10;
  id v11;
  id v12;
  void *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v18;

  v6 = sub_1BCAB4BD8();
  v7 = *(_QWORD *)(v6 - 8);
  *(_QWORD *)&v8 = MEMORY[0x1E0C80A78](v6).n128_u64[0];
  v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = objc_msgSend(a1, sel_sampleType, v8);
  v12 = objc_msgSend(a1, sel__timeZoneName);
  if (v12)
  {
    v13 = v12;
    v14 = sub_1BCAB5F04();
    v16 = v15;

  }
  else
  {
    v14 = 0;
    v16 = 0;
  }
  sub_1BCAB6318();
  static CurrentValueDateGenerationSupport.dateInterval(for:sampleTimeZoneName:sampleDateInterval:calendarCache:)(v11, v14, v16, (uint64_t)v10, a2, a3);

  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
}

uint64_t static CurrentValueDateGenerationSupport.dateInterval(for:sampleTimeZoneName:sampleDateInterval:calendarCache:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  char *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  NSObject *v45;
  os_log_type_t v46;
  uint8_t *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  void (*v51)(char *, void *);
  void *v52;
  char *v53;
  void *v54;
  void (*v55)(char *, void *);
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint8_t *v65;
  void *v66;
  id v67;
  uint64_t v68;
  uint64_t v69;
  ValueMetadata *v70;
  uint64_t v71;

  v65 = (uint8_t *)a3;
  v66 = a5;
  v68 = a6;
  v69 = a4;
  v64 = a2;
  v67 = a1;
  v6 = sub_1BCAB5514();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v56 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BC9AFF04(0, (unint64_t *)&qword_1ED6C71E0, (void (*)(uint64_t))MEMORY[0x1E0CAE5D0]);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v56 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v56 - v14;
  MEMORY[0x1E0C80A78](v16);
  v18 = (char *)&v56 - v17;
  v19 = sub_1BCAB4F74();
  v20 = *(_QWORD *)(v19 - 8);
  MEMORY[0x1E0C80A78](v19);
  v22 = (char *)&v56 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v24 = MEMORY[0x1E0C80A78](v23).n128_u64[0];
  v26 = (char *)&v56 - v25;
  if (objc_msgSend(v67, sel_code, v24) == (id)248)
  {
    v57 = v15;
    v58 = v12;
    v67 = v18;
    v62 = v20;
    v63 = v9;
    v59 = v7;
    sub_1BCA432CC((uint64_t)v26, (uint64_t)v22, v64, (unint64_t)v65, v66);
    v27 = (void *)objc_opt_self();
    v28 = (void *)sub_1BCAB4B78();
    v29 = (void *)sub_1BCAB4F08();
    v30 = (void *)sub_1BCAB4F08();
    v31 = objc_msgSend(v27, sel_hk_julianDayDateIntervalFromOpenUpperBoundDateInterval_sourceCalendar_localCalendar_, v28, v29, v30);

    v60 = v22;
    v61 = v26;
    if (v31)
    {
      v32 = (uint64_t)v57;
      sub_1BCAB4B90();

      v33 = sub_1BCAB4BD8();
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 56))(v32, 0, 1, v33);
    }
    else
    {
      v33 = sub_1BCAB4BD8();
      v32 = (uint64_t)v57;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 56))(v57, 1, 1, v33);
    }
    v36 = (uint64_t)v67;
    v37 = v68;
    v38 = (void *)v19;
    v39 = v6;
    v40 = (uint64_t)v58;
    v41 = v59;
    v43 = v62;
    v42 = v63;
    sub_1BC9B39DC(v32, (uint64_t)v67);
    sub_1BCA214F8(v36, v40);
    sub_1BCAB4BD8();
    v44 = *(_QWORD *)(v33 - 8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v44 + 48))(v40, 1, v33) == 1)
    {
      sub_1BC9D11F4(v40, (unint64_t *)&qword_1ED6C71E0, (void (*)(uint64_t))MEMORY[0x1E0CAE5D0]);
      sub_1BCAB54B4();
      v45 = sub_1BCAB54FC();
      v46 = sub_1BCAB61B0();
      if (os_log_type_enabled(v45, v46))
      {
        v66 = v38;
        v47 = (uint8_t *)swift_slowAlloc();
        v48 = swift_slowAlloc();
        *(_DWORD *)v47 = 136446210;
        v65 = v47 + 4;
        v70 = &type metadata for CurrentValueDateGenerationSupport;
        v71 = v48;
        sub_1BCA43694();
        v49 = sub_1BCAB5F28();
        v70 = (ValueMetadata *)sub_1BC99BD4C(v49, v50, &v71);
        v37 = v68;
        sub_1BCAB63A8();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1BC989000, v45, v46, "%{public}s trying to compute julian date interval for invalid sample.", v47, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1BCCFBF5C](v48, -1, -1);
        MEMORY[0x1BCCFBF5C](v47, -1, -1);

        (*(void (**)(char *, uint64_t))(v41 + 8))(v63, v39);
        sub_1BC9D11F4((uint64_t)v67, (unint64_t *)&qword_1ED6C71E0, (void (*)(uint64_t))MEMORY[0x1E0CAE5D0]);
        v51 = *(void (**)(char *, void *))(v62 + 8);
        v52 = v66;
        v51(v60, v66);
        v53 = v61;
        v54 = v52;
      }
      else
      {

        (*(void (**)(char *, uint64_t))(v41 + 8))(v42, v39);
        sub_1BC9D11F4((uint64_t)v67, (unint64_t *)&qword_1ED6C71E0, (void (*)(uint64_t))MEMORY[0x1E0CAE5D0]);
        v51 = *(void (**)(char *, void *))(v43 + 8);
        v51(v60, v38);
        v53 = v61;
        v54 = v38;
      }
      v51(v53, v54);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v44 + 16))(v37, v69, v33);
    }
    else
    {
      sub_1BC9D11F4(v36, (unint64_t *)&qword_1ED6C71E0, (void (*)(uint64_t))MEMORY[0x1E0CAE5D0]);
      v55 = *(void (**)(char *, void *))(v43 + 8);
      v55(v60, v38);
      v55(v61, v38);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v44 + 32))(v37, v40, v33);
    }
  }
  else
  {
    v34 = sub_1BCAB4BD8();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 16))(v68, v69, v34);
  }
}

uint64_t sub_1BCA432CC(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, void *a5)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  void *v28;
  id v29;
  id v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v34 = a1;
  v35 = a2;
  v33 = sub_1BCAB5514();
  v8 = *(_QWORD *)(v33 - 8);
  MEMORY[0x1E0C80A78](v33);
  v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v32 - v12;
  sub_1BC9AFF04(0, (unint64_t *)&qword_1ED6C7290, (void (*)(uint64_t))MEMORY[0x1E0CB1470]);
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)&v32 - v15;
  v17 = sub_1BCAB4FB0();
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17);
  v20 = (char *)&v32 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a4)
  {
    swift_bridgeObjectRetain();
    sub_1BCAB4F80();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17) != 1)
    {
      swift_bridgeObjectRelease();
      (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v20, v16, v17);
      v28 = (void *)sub_1BCAB4FA4();
      v29 = objc_msgSend(a5, sel_calendarForTimeZone_, v28);

      sub_1BCAB4F14();
      v30 = objc_msgSend(a5, sel_currentCalendar);
      sub_1BCAB4F14();

      return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v20, v17);
    }
    sub_1BC9D11F4((uint64_t)v16, (unint64_t *)&qword_1ED6C7290, (void (*)(uint64_t))MEMORY[0x1E0CB1470]);
    sub_1BCAB54B4();
    swift_bridgeObjectRetain();
    v21 = sub_1BCAB54FC();
    v22 = sub_1BCAB61B0();
    if (os_log_type_enabled(v21, v22))
    {
      v23 = (uint8_t *)swift_slowAlloc();
      v24 = swift_slowAlloc();
      v37 = v24;
      *(_DWORD *)v23 = 136446210;
      swift_bridgeObjectRetain();
      v36 = sub_1BC99BD4C(a3, a4, &v37);
      sub_1BCAB63A8();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1BC989000, v21, v22, "Failed to create a TimeZone with %{public}s", v23, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BCCFBF5C](v24, -1, -1);
      MEMORY[0x1BCCFBF5C](v23, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    (*(void (**)(char *, uint64_t))(v8 + 8))(v13, v33);
  }
  else
  {
    sub_1BCAB54B4();
    v25 = sub_1BCAB54FC();
    v26 = sub_1BCAB61B0();
    if (os_log_type_enabled(v25, v26))
    {
      v27 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v27 = 0;
      _os_log_impl(&dword_1BC989000, v25, v26, "Received nil timeZoneName for sample", v27, 2u);
      MEMORY[0x1BCCFBF5C](v27, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v33);
  }
  sub_1BCAB4F50();
  return sub_1BCAB4F50();
}

unint64_t sub_1BCA43694()
{
  unint64_t result;

  result = qword_1EF479A20;
  if (!qword_1EF479A20)
  {
    result = swift_getMetatypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1EF479A20);
  }
  return result;
}

ValueMetadata *type metadata accessor for CurrentValueDateGenerationSupport()
{
  return &type metadata for CurrentValueDateGenerationSupport;
}

uint64_t sub_1BCA436DC(uint64_t a1)
{
  uint64_t v1;
  double v2;
  uint64_t v3;
  double *v4;
  double v5;
  double v6;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return 0;
  v2 = *(double *)(a1 + 32);
  v3 = v1 - 1;
  if (v1 != 1)
  {
    v4 = (double *)(a1 + 40);
    do
    {
      v5 = *v4++;
      v6 = v5;
      if (v5 < v2)
        v2 = v6;
      --v3;
    }
    while (v3);
  }
  return *(_QWORD *)&v2;
}

double LevelView.DataConfiguration.Bucket.range.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

void LevelView.DataConfiguration.Bucket.range.setter(double a1, double a2)
{
  double *v2;

  *v2 = a1;
  v2[1] = a2;
}

uint64_t (*LevelView.DataConfiguration.Bucket.range.modify())()
{
  return nullsub_1;
}

uint64_t LevelView.DataConfiguration.Bucket.highlighted.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t LevelView.DataConfiguration.Bucket.highlighted.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 16) = result;
  return result;
}

uint64_t (*LevelView.DataConfiguration.Bucket.highlighted.modify())()
{
  return nullsub_1;
}

uint64_t LevelView.DataConfiguration.Bucket.init(range:highlighted:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>)
{
  *(double *)a2 = a3;
  *(double *)(a2 + 8) = a4;
  *(_BYTE *)(a2 + 16) = result;
  return result;
}

uint64_t static LevelView.DataConfiguration.Bucket.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (*(double *)a1 == *(double *)a2 && *(double *)(a1 + 8) == *(double *)(a2 + 8))
    return (*(unsigned __int8 *)(a2 + 16) ^ *(unsigned __int8 *)(a1 + 16) ^ 1) & 1;
  else
    return 0;
}

uint64_t sub_1BCA437A0()
{
  _BYTE *v0;

  if (*v0)
    return 0x6867696C68676968;
  else
    return 0x65676E6172;
}

uint64_t sub_1BCA437E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1BCA45BAC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1BCA43804()
{
  sub_1BCA439CC();
  return sub_1BCAB68D0();
}

uint64_t sub_1BCA4382C()
{
  sub_1BCA439CC();
  return sub_1BCAB68DC();
}

uint64_t LevelView.DataConfiguration.Bucket.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[2];
  int v13;
  char v14;

  sub_1BC9ACE04(0, &qword_1ED6C5078, (uint64_t (*)(void))sub_1BCA439CC, (uint64_t)&type metadata for LevelView.DataConfiguration.Bucket.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v8 = (char *)v12 - v7;
  v9 = *v1;
  v10 = v1[1];
  v13 = *((unsigned __int8 *)v1 + 16);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BCA439CC();
  sub_1BCAB68B8();
  v12[0] = v9;
  v12[1] = v10;
  v14 = 0;
  sub_1BCA43A10();
  sub_1BCA43C20(&qword_1ED6C4570, MEMORY[0x1E0DEB080], MEMORY[0x1E0DEA4C8]);
  sub_1BCAB6774();
  if (!v2)
  {
    LOBYTE(v12[0]) = 1;
    sub_1BCAB6750();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_1BCA439CC()
{
  unint64_t result;

  result = qword_1ED6C5040;
  if (!qword_1ED6C5040)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCAC57E0, &type metadata for LevelView.DataConfiguration.Bucket.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED6C5040);
  }
  return result;
}

void sub_1BCA43A10()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED6C7560)
  {
    v0 = sub_1BCAB5EC8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED6C7560);
  }
}

uint64_t LevelView.DataConfiguration.Bucket.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;

  v15 = a2;
  sub_1BC9ACE04(0, &qword_1EF479A68, (uint64_t (*)(void))sub_1BCA439CC, (uint64_t)&type metadata for LevelView.DataConfiguration.Bucket.CodingKeys, MEMORY[0x1E0DED048]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v14 - v7;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BCA439CC();
  sub_1BCAB68AC();
  if (!v2)
  {
    v9 = v15;
    sub_1BCA43A10();
    v18 = 0;
    sub_1BCA43C20(&qword_1ED6C7568, MEMORY[0x1E0DEB0A8], MEMORY[0x1E0DEA4F0]);
    sub_1BCAB66E4();
    v10 = v16;
    v11 = v17;
    LOBYTE(v16) = 1;
    v13 = sub_1BCAB66C0();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *(_QWORD *)v9 = v10;
    *(_QWORD *)(v9 + 8) = v11;
    *(_BYTE *)(v9 + 16) = v13 & 1;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_1BCA43C20(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    sub_1BCA43A10();
    v8 = a2;
    result = MEMORY[0x1BCCFBE84](a3, v7, &v8);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1BCA43C7C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return LevelView.DataConfiguration.Bucket.init(from:)(a1, a2);
}

uint64_t sub_1BCA43C90(_QWORD *a1)
{
  return LevelView.DataConfiguration.Bucket.encode(to:)(a1);
}

uint64_t sub_1BCA43CA4(uint64_t a1, uint64_t a2)
{
  if (*(double *)a1 == *(double *)a2 && *(double *)(a1 + 8) == *(double *)(a2 + 8))
    return (*(unsigned __int8 *)(a2 + 16) ^ *(unsigned __int8 *)(a1 + 16) ^ 1) & 1;
  else
    return 0;
}

double LevelView.DataConfiguration.normalizedValue.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

void LevelView.DataConfiguration.normalizedValue.setter(double a1)
{
  double *v1;

  *v1 = a1;
}

uint64_t (*LevelView.DataConfiguration.normalizedValue.modify())()
{
  return nullsub_1;
}

uint64_t LevelView.DataConfiguration.sortedNormalizedBuckets.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t LevelView.DataConfiguration.sortedNormalizedBuckets.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v1 + 8) = a1;
  return result;
}

uint64_t (*LevelView.DataConfiguration.sortedNormalizedBuckets.modify())()
{
  return nullsub_1;
}

HealthVisualization::LevelView::DataConfiguration __swiftcall LevelView.DataConfiguration.init(normalizedValue:sortedNormalizedBuckets:)(Swift::Double normalizedValue, Swift::OpaquePointer sortedNormalizedBuckets)
{
  uint64_t v2;
  HealthVisualization::LevelView::DataConfiguration result;

  *(Swift::Double *)v2 = normalizedValue;
  *(Swift::OpaquePointer *)(v2 + 8) = sortedNormalizedBuckets;
  result.normalizedValue = normalizedValue;
  result.sortedNormalizedBuckets = sortedNormalizedBuckets;
  return result;
}

HealthVisualization::LevelView::DataConfiguration __swiftcall LevelView.DataConfiguration.init(nonNormalizedValue:nonNormalizedBuckets:)(Swift::Double nonNormalizedValue, Swift::OpaquePointer nonNormalizedBuckets)
{
  uint64_t v2;
  uint64_t v5;
  double v6;
  double v7;
  double v8;
  double v9;
  int64_t v10;
  uint64_t v11;
  double *v12;
  double v13;
  double v14;
  char v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  void *v19;
  double v20;
  uint64_t v21;
  HealthVisualization::LevelView::DataConfiguration result;
  uint64_t v23;

  v5 = v2;
  sub_1BCA45CAC((uint64_t)nonNormalizedBuckets._rawValue);
  v7 = v6;
  v9 = v8 - v6;
  v10 = *((_QWORD *)nonNormalizedBuckets._rawValue + 2);
  if (v10)
  {
    v23 = MEMORY[0x1E0DEE9D8];
    sub_1BC9BADF4(0, v10, 0);
    v11 = v23;
    v12 = (double *)((char *)nonNormalizedBuckets._rawValue + 48);
    while (1)
    {
      v13 = (*(v12 - 2) - v7) / v9;
      v14 = (*(v12 - 1) - v7) / v9;
      if (v13 > v14)
        break;
      v15 = *(_BYTE *)v12;
      v23 = v11;
      v17 = *(_QWORD *)(v11 + 16);
      v16 = *(_QWORD *)(v11 + 24);
      if (v17 >= v16 >> 1)
      {
        sub_1BC9BADF4(v16 > 1, v17 + 1, 1);
        v11 = v23;
      }
      *(_QWORD *)(v11 + 16) = v17 + 1;
      v18 = v11 + 24 * v17;
      *(double *)(v18 + 32) = v13;
      *(double *)(v18 + 40) = v14;
      *(_BYTE *)(v18 + 48) = v15;
      v12 += 3;
      if (!--v10)
      {
        swift_bridgeObjectRelease();
        goto LABEL_9;
      }
    }
    __break(1u);
    v19 = (void *)swift_release();
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
    v11 = MEMORY[0x1E0DEE9D8];
LABEL_9:
    v23 = v11;
    swift_bridgeObjectRetain();
    sub_1BCA45190(&v23);
    v19 = (void *)swift_bridgeObjectRelease();
    v20 = (nonNormalizedValue - v7) / v9;
    if (v20 <= 0.0)
      v20 = 0.0;
    v21 = v23;
    if (v20 > 1.0)
      v20 = 1.0;
    *(double *)v5 = v20;
    *(_QWORD *)(v5 + 8) = v21;
  }
  result.normalizedValue = v20;
  result.sortedNormalizedBuckets._rawValue = v19;
  return result;
}

__C::CGRect __swiftcall LevelView.DataConfiguration.circleRect(for:)(__C::CGRect a1)
{
  double *v1;
  CGFloat height;
  CGFloat width;
  CGFloat y;
  CGFloat x;
  double v6;
  double MidX;
  uint64_t v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  CGRect v15;
  __C::CGRect result;

  height = a1.size.height;
  width = a1.size.width;
  y = a1.origin.y;
  x = a1.origin.x;
  v6 = *v1;
  MidX = CGRectGetMidX((CGRect)a1);
  if (qword_1EF477C78 != -1)
    swift_once();
  v8 = qword_1EF479A30;
  v9 = *(double *)&qword_1EF479A30 * 0.5;
  v10 = MidX - *(double *)&qword_1EF479A30 * 0.5;
  v15.origin.x = x;
  v15.origin.y = y;
  v15.size.width = width;
  v15.size.height = height;
  v11 = v6 * CGRectGetHeight(v15) - v9;
  v12 = v10;
  v13 = *(double *)&v8;
  v14 = *(double *)&v8;
  result.size.height = v14;
  result.size.width = v13;
  result.origin.y = v11;
  result.origin.x = v12;
  return result;
}

double LevelView.DataConfiguration.invert(_:)(double a1)
{
  return 1.0 - a1;
}

uint64_t LevelView.DataConfiguration.buckets(for:displayScale:)(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4)
{
  uint64_t v4;
  double v9;
  uint64_t v10;
  double MidX;
  CGFloat v12;
  double v13;
  double v14;
  double v15;
  CGFloat v16;
  double v17;
  double MinY;
  double v19;
  double v20;
  double v21;
  double MaxY;
  double v23;
  double v24;
  uint64_t v25;
  double v26;
  int64_t v27;
  uint64_t v28;
  unint64_t v29;
  double *v30;
  double v31;
  double v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  CGRect v38;
  CGRect v39;
  CGRect v40;
  CGRect v41;
  CGRect v42;
  CGRect v43;

  v9 = *(double *)v4;
  v10 = *(_QWORD *)(v4 + 8);
  MidX = CGRectGetMidX(*(CGRect *)&a1);
  if (qword_1EF477C78 != -1)
    swift_once();
  v12 = *(double *)&qword_1EF479A30;
  v13 = *(double *)&qword_1EF479A30 * 0.5;
  v14 = MidX - *(double *)&qword_1EF479A30 * 0.5;
  v38.origin.x = a1;
  v38.origin.y = a2;
  v38.size.width = a3;
  v38.size.height = a4;
  v15 = v9 * CGRectGetHeight(v38);
  v16 = a1;
  v17 = v15 - v13;
  v39.origin.x = v16;
  v39.origin.y = a2;
  v39.size.width = a3;
  v39.size.height = a4;
  MinY = CGRectGetMinY(v39);
  v40.origin.x = v14;
  v40.origin.y = v17;
  v40.size.width = v12;
  v40.size.height = v12;
  v19 = MinY - CGRectGetMinY(v40);
  if (v19 > 0.0)
    v20 = v19;
  else
    v20 = 0.0;
  v41.origin.x = v14;
  v41.origin.y = v17;
  v41.size.width = v12;
  v41.size.height = v12;
  v21 = v20;
  MaxY = CGRectGetMaxY(v41);
  v42.origin.x = v16;
  v42.origin.y = a2;
  v42.size.width = a3;
  v42.size.height = a4;
  v23 = MaxY - CGRectGetMaxY(v42);
  if (v23 > 0.0)
    v24 = v23;
  else
    v24 = 0.0;
  if (v21 != 0.0 && v24 != 0.0)
    return MEMORY[0x1E0DEE9D8];
  v43.origin.x = v16;
  v43.origin.y = a2;
  v43.size.width = a3;
  v43.size.height = a4;
  v26 = CGRectGetHeight(v43) - v21 - v24;
  v27 = *(_QWORD *)(v10 + 16);
  v28 = MEMORY[0x1E0DEE9D8];
  if (v27)
  {
    v37 = MEMORY[0x1E0DEE9D8];
    swift_bridgeObjectRetain();
    sub_1BC9BAC40(0, v27, 0);
    v28 = v37;
    v29 = *(_QWORD *)(v37 + 16);
    v30 = (double *)(v10 + 40);
    do
    {
      v31 = *(v30 - 1);
      v32 = *v30;
      v33 = *(_QWORD *)(v37 + 24);
      if (v29 >= v33 >> 1)
        sub_1BC9BAC40(v33 > 1, v29 + 1, 1);
      *(_QWORD *)(v37 + 16) = v29 + 1;
      *(double *)(v37 + 8 * v29 + 32) = v32 - v31;
      v30 += 3;
      ++v29;
      --v27;
    }
    while (v27);
    swift_bridgeObjectRelease();
  }
  sub_1BCA44294(v28, v26);
  v34 = swift_bridgeObjectRelease();
  MEMORY[0x1E0C80A78](v34);
  v35 = swift_bridgeObjectRetain();
  v25 = sub_1BCA45D18(v35, (void (*)(uint64_t *__return_ptr, uint64_t, __int128 *))sub_1BCA45CF8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v25;
}

uint64_t sub_1BCA44294(uint64_t result, double a2)
{
  uint64_t v3;
  double v4;
  int64_t v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  double *v9;
  unint64_t v10;
  int64_t v11;
  double v12;
  unint64_t v13;
  int64_t v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  unint64_t v20;
  double v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  int64_t v27;
  double *v28;
  uint64_t v29;
  int64_t v30;
  double *v31;
  double v32;
  uint64_t v33;
  unint64_t v34;
  double v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  double v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v3 = result;
  if (qword_1EF477C90 != -1)
    result = swift_once();
  v4 = *(double *)&qword_1EF479A48;
  v5 = *(_QWORD *)(v3 + 16);
  if (qword_1EF477C88 != -1)
    result = swift_once();
  v6 = a2 - *(double *)&qword_1EF479A40 * (double)(v5 - 1);
  v7 = MEMORY[0x1E0DEE9D8];
  if (v5)
  {
    v41 = MEMORY[0x1E0DEE9D8];
    sub_1BC9BAC40(0, v5, 0);
    v8 = v41;
    v9 = (double *)(v3 + 32);
    v10 = *(_QWORD *)(v41 + 16);
    v11 = v5;
    do
    {
      v12 = *v9;
      v13 = *(_QWORD *)(v41 + 24);
      v14 = v10 + 1;
      if (v10 >= v13 >> 1)
        sub_1BC9BAC40(v13 > 1, v10 + 1, 1);
      *(_QWORD *)(v41 + 16) = v14;
      *(double *)(v41 + 8 * v10 + 32) = v6 * v12;
      ++v9;
      ++v10;
      --v11;
    }
    while (v11);
LABEL_13:
    v15 = *(double *)(v8 + 32);
    if (v14 != 1)
    {
      v16 = 0;
      do
      {
        v17 = v8 + 8 * v16;
        if (*(double *)(v17 + 40) < v15)
          v15 = *(double *)(v17 + 40);
        ++v16;
      }
      while (v14 - 1 != v16);
    }
    if (v4 < v15)
      return v8;
    v18 = v6 - v4 * (double)v5;
    sub_1BC9BAC40(0, v14, 0);
    v19 = 0;
    v20 = *(_QWORD *)(v7 + 16);
    do
    {
      v21 = *(double *)(v8 + 8 * v19 + 32);
      v22 = *(_QWORD *)(v7 + 24);
      if (v20 >= v22 >> 1)
        sub_1BC9BAC40(v22 > 1, v20 + 1, 1);
      ++v19;
      *(_QWORD *)(v7 + 16) = v20 + 1;
      *(double *)(v7 + 8 * v20++ + 32) = v21 - v15;
    }
    while (v14 != v19);
    swift_bridgeObjectRelease();
    v23 = *(_QWORD *)(v7 + 16);
    if (!v23)
    {
      swift_bridgeObjectRelease();
      v26 = MEMORY[0x1E0DEE9D8];
      v27 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
      if (v27)
      {
LABEL_38:
        v42 = v7;
        sub_1BC9BAC40(0, v27, 0);
        v37 = 0;
        v8 = v42;
        v38 = *(_QWORD *)(v42 + 16);
        do
        {
          v39 = *(double *)(v26 + 8 * v37 + 32);
          v40 = *(_QWORD *)(v42 + 24);
          if (v38 >= v40 >> 1)
            sub_1BC9BAC40(v40 > 1, v38 + 1, 1);
          ++v37;
          *(_QWORD *)(v42 + 16) = v38 + 1;
          *(double *)(v42 + 8 * v38++ + 32) = v4 + v18 * v39;
        }
        while (v27 != v37);
        swift_bridgeObjectRelease();
        return v8;
      }
LABEL_27:
      swift_bridgeObjectRelease();
      return MEMORY[0x1E0DEE9D8];
    }
    if (v23 == 1)
    {
      v24 = 0;
      v25 = 0.0;
    }
    else
    {
      v24 = v23 & 0x7FFFFFFFFFFFFFFELL;
      v28 = (double *)(v7 + 40);
      v25 = 0.0;
      v29 = v23 & 0x7FFFFFFFFFFFFFFELL;
      do
      {
        v25 = v25 + *(v28 - 1) + *v28;
        v28 += 2;
        v29 -= 2;
      }
      while (v29);
      if (v23 == v24)
        goto LABEL_33;
    }
    v30 = v23 - v24;
    v31 = (double *)(v7 + 8 * v24 + 32);
    do
    {
      v32 = *v31++;
      v25 = v25 + v32;
      --v30;
    }
    while (v30);
LABEL_33:
    sub_1BC9BAC40(0, v23, 0);
    v33 = 0;
    v26 = v7;
    v34 = *(_QWORD *)(v7 + 16);
    do
    {
      v35 = *(double *)(v7 + 8 * v33 + 32);
      v36 = *(_QWORD *)(v7 + 24);
      if (v34 >= v36 >> 1)
        sub_1BC9BAC40(v36 > 1, v34 + 1, 1);
      ++v33;
      *(_QWORD *)(v7 + 16) = v34 + 1;
      *(double *)(v7 + 8 * v34++ + 32) = v35 / v25;
    }
    while (v23 != v33);
    swift_bridgeObjectRelease();
    v27 = *(_QWORD *)(v7 + 16);
    if (v27)
      goto LABEL_38;
    goto LABEL_27;
  }
  v14 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
  if (v14)
  {
    v8 = MEMORY[0x1E0DEE9D8];
    goto LABEL_13;
  }
  __break(1u);
  return result;
}

void sub_1BCA44680(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, CGFloat *a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X8>, CGFloat a7@<D0>, CGFloat a8@<D1>, CGFloat a9@<D2>, CGFloat a10@<D3>, double Width@<D4>, double a12@<D5>)
{
  double v12;
  uint64_t v25;
  uint64_t v26;
  __n128 v27;
  uint64_t v28;
  char *v29;
  double v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[2];
  CGRect v34;
  CGRect v35;
  CGRect v36;

  v25 = sub_1BCAB67B0();
  v26 = *(_QWORD *)(v25 - 8);
  v27 = MEMORY[0x1E0C80A78](v25);
  v29 = (char *)v33 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)(a3 + 16) > a1)
  {
    *(double *)v33 = a12;
    LODWORD(a2) = *(unsigned __int8 *)(a2 + 16);
    a3 = *(_QWORD *)(v26 + 104);
    ((void (*)(char *, _QWORD, uint64_t, __n128))a3)(v29, *MEMORY[0x1E0DED508], v25, v27);
    *(CGFloat *)&v33[1] = a7;
    sub_1BCAB4FE0();
    v12 = v30;
    v26 = *(_QWORD *)(v26 + 8);
    ((void (*)(char *, uint64_t))v26)(v29, v25);
    a7 = *a4;
    v34.origin.x = a8;
    v34.origin.y = a9;
    v34.size.width = a10;
    v34.size.height = Width;
    Width = CGRectGetWidth(v34);
    if (qword_1EF477C88 == -1)
      goto LABEL_4;
    goto LABEL_11;
  }
  __break(1u);
LABEL_11:
  swift_once();
LABEL_4:
  *a4 = *a4 + v12 + *(double *)&qword_1EF479A40;
  if ((_DWORD)a2)
  {
    v35.origin.x = 0.0;
    v35.origin.y = a7;
    v35.size.width = Width;
    v35.size.height = v12;
    CGRectGetMinY(v35);
    v36.origin.x = 0.0;
    v36.origin.y = a7;
    v36.size.width = Width;
    v36.size.height = v12;
    CGRectGetHeight(v36);
    if (qword_1EF477C78 != -1)
      swift_once();
    ((void (*)(char *, _QWORD, uint64_t))a3)(v29, *MEMORY[0x1E0DED4F0], v25);
    sub_1BCAB4FE0();
    v32 = v31;
    ((void (*)(char *, uint64_t))v26)(v29, v25);
    *(_QWORD *)(a5 + 8) = v32;
  }
  *(_QWORD *)a6 = a1;
  *(_QWORD *)(a6 + 8) = 0;
  *(CGFloat *)(a6 + 16) = a7;
  *(double *)(a6 + 24) = Width;
  *(double *)(a6 + 32) = v12;
  *(_BYTE *)(a6 + 40) = a2;
}

uint64_t static LevelView.DataConfiguration.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (*(double *)a1 == *(double *)a2)
    return sub_1BC9A89D8(*(_QWORD *)(a1 + 8), *(_QWORD *)(a2 + 8));
  else
    return 0;
}

uint64_t sub_1BCA44910()
{
  _BYTE *v0;

  if (*v0)
    return 0xD000000000000017;
  else
    return 0x7A696C616D726F6ELL;
}

uint64_t sub_1BCA4495C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1BCA465C8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1BCA44980()
{
  sub_1BCA45E68();
  return sub_1BCAB68D0();
}

uint64_t sub_1BCA449A8()
{
  sub_1BCA45E68();
  return sub_1BCAB68DC();
}

uint64_t LevelView.DataConfiguration.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;

  sub_1BC9ACE04(0, &qword_1ED6C5070, (uint64_t (*)(void))sub_1BCA45E68, (uint64_t)&type metadata for LevelView.DataConfiguration.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v10 - v7;
  v10 = *(_QWORD *)(v1 + 8);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BCA45E68();
  sub_1BCAB68B8();
  v13 = 0;
  sub_1BCAB675C();
  if (!v2)
  {
    v12 = v10;
    v11 = 1;
    sub_1BCA45EAC();
    sub_1BCA45F44(&qword_1ED6C5068, (uint64_t (*)(void))sub_1BCA45F00, MEMORY[0x1E0DEAF10]);
    sub_1BCAB6774();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t LevelView.DataConfiguration.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  _QWORD *v14;
  char v15;
  uint64_t v16;
  char v17;

  v14 = a2;
  sub_1BC9ACE04(0, &qword_1EF479A70, (uint64_t (*)(void))sub_1BCA45E68, (uint64_t)&type metadata for LevelView.DataConfiguration.CodingKeys, MEMORY[0x1E0DED048]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v14 - v7;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BCA45E68();
  sub_1BCAB68AC();
  if (!v2)
  {
    v9 = v14;
    v17 = 0;
    sub_1BCAB66CC();
    v11 = v10;
    sub_1BCA45EAC();
    v15 = 1;
    sub_1BCA45F44(&qword_1EF479A78, (uint64_t (*)(void))sub_1BCA45FA8, MEMORY[0x1E0DEAF40]);
    sub_1BCAB66E4();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v13 = v16;
    *v9 = v11;
    v9[1] = v13;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_1BCA44CFC@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return LevelView.DataConfiguration.init(from:)(a1, a2);
}

uint64_t sub_1BCA44D10(_QWORD *a1)
{
  return LevelView.DataConfiguration.encode(to:)(a1);
}

uint64_t sub_1BCA44D24(uint64_t a1, uint64_t a2)
{
  if (*(double *)a1 == *(double *)a2)
    return sub_1BC9A89D8(*(_QWORD *)(a1 + 8), *(_QWORD *)(a2 + 8));
  else
    return 0;
}

id LevelView.ViewConfiguration.barColor.getter()
{
  id *v0;

  return *v0;
}

void LevelView.ViewConfiguration.barColor.setter(void *a1)
{
  id *v1;

  *v1 = a1;
}

uint64_t (*LevelView.ViewConfiguration.barColor.modify())()
{
  return nullsub_1;
}

id LevelView.ViewConfiguration.highlightedBarColor.getter()
{
  uint64_t v0;

  return *(id *)(v0 + 8);
}

void LevelView.ViewConfiguration.highlightedBarColor.setter(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 8) = a1;
}

uint64_t (*LevelView.ViewConfiguration.highlightedBarColor.modify())()
{
  return nullsub_1;
}

id LevelView.ViewConfiguration.dotColor.getter()
{
  uint64_t v0;

  return *(id *)(v0 + 16);
}

void LevelView.ViewConfiguration.dotColor.setter(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
}

uint64_t (*LevelView.ViewConfiguration.dotColor.modify())()
{
  return nullsub_1;
}

HealthVisualization::LevelView::ViewConfiguration __swiftcall LevelView.ViewConfiguration.init(barColor:highlightedBarColor:dotColor:)(UIColor barColor, UIColor highlightedBarColor, UIColor dotColor)
{
  UIColor *v3;
  HealthVisualization::LevelView::ViewConfiguration result;

  v3->super.isa = barColor.super.isa;
  v3[1].super.isa = highlightedBarColor.super.isa;
  v3[2].super.isa = dotColor.super.isa;
  result.dotColor = dotColor;
  result.highlightedBarColor = highlightedBarColor;
  result.barColor = barColor;
  return result;
}

id static LevelView.ViewConfiguration.defaultConfiguration(highlightColor:)@<X0>(void *a1@<X0>, _QWORD *a2@<X8>)
{
  id v4;
  uint64_t v5;
  void *v6;
  id v7;
  uint64_t v8;
  id v9;
  void *v10;
  id v11;
  id v13;
  uint64_t aBlock;
  uint64_t v15;
  id (*v16)(uint64_t, void *);
  void *v17;
  id (*v18)(void *);
  uint64_t v19;

  v4 = objc_allocWithZone(MEMORY[0x1E0DC3658]);
  v18 = sub_1BCA44F64;
  v19 = 0;
  v5 = MEMORY[0x1E0C809B0];
  aBlock = MEMORY[0x1E0C809B0];
  v15 = 1107296256;
  v16 = sub_1BCA9EF10;
  v17 = &block_descriptor_9;
  v6 = _Block_copy(&aBlock);
  v7 = objc_msgSend(v4, sel_initWithDynamicProvider_, v6);
  _Block_release(v6);
  swift_release();
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = a1;
  v9 = objc_allocWithZone(MEMORY[0x1E0DC3658]);
  v18 = sub_1BCA46010;
  v19 = v8;
  aBlock = v5;
  v15 = 1107296256;
  v16 = sub_1BCA9EF10;
  v17 = &block_descriptor_3_0;
  v10 = _Block_copy(&aBlock);
  v13 = a1;
  v11 = objc_msgSend(v9, sel_initWithDynamicProvider_, v10);
  _Block_release(v10);
  swift_release();
  *a2 = v7;
  a2[1] = v11;
  a2[2] = v13;
  return v13;
}

id sub_1BCA44F64(void *a1)
{
  id v1;
  void *v2;
  char **v3;

  v1 = objc_msgSend(a1, sel_userInterfaceStyle);
  v2 = (void *)objc_opt_self();
  v3 = &selRef_systemGray3Color;
  if (v1 != (id)2)
    v3 = &selRef_systemGray6Color;
  return objc_msgSend(v2, *v3);
}

void sub_1BCA44FBC()
{
  qword_1EF479A28 = 0x4008000000000000;
}

double static LevelView.ViewConfiguration.Constants.cornerRadius.getter()
{
  return sub_1BCA450C4(&qword_1EF477C70, (uint64_t)&qword_1EF479A28);
}

void sub_1BCA44FE8()
{
  qword_1EF479A30 = 0x4024000000000000;
}

double static LevelView.ViewConfiguration.Constants.circleDiameter.getter()
{
  return sub_1BCA450C4(&qword_1EF477C78, (uint64_t)&qword_1EF479A30);
}

void sub_1BCA45014()
{
  qword_1EF479A38 = 0x4000000000000000;
}

double static LevelView.ViewConfiguration.Constants.circleGutter.getter()
{
  return sub_1BCA450C4(&qword_1EF477C80, (uint64_t)&qword_1EF479A38);
}

void sub_1BCA45040()
{
  qword_1EF479A40 = 0x4000000000000000;
}

double static LevelView.ViewConfiguration.Constants.interBucketSpacing.getter()
{
  return sub_1BCA450C4(&qword_1EF477C88, (uint64_t)&qword_1EF479A40);
}

void sub_1BCA4506C()
{
  qword_1EF479A48 = 0x4008000000000000;
}

double static LevelView.ViewConfiguration.Constants.bucketMinimumHeight.getter()
{
  return sub_1BCA450C4(&qword_1EF477C90, (uint64_t)&qword_1EF479A48);
}

void sub_1BCA45098()
{
  qword_1EF479A50 = 0x4000000000000000;
}

double static LevelView.ViewConfiguration.Constants.overUnderRunExtra.getter()
{
  return sub_1BCA450C4(&qword_1EF477C98, (uint64_t)&qword_1EF479A50);
}

double sub_1BCA450C4(_QWORD *a1, uint64_t a2)
{
  if (*a1 != -1)
    swift_once();
  return *(double *)a2;
}

double LevelView.LayoutConfiguration.size.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

void LevelView.LayoutConfiguration.size.setter(double a1, double a2)
{
  double *v2;

  *v2 = a1;
  v2[1] = a2;
}

uint64_t (*LevelView.LayoutConfiguration.size.modify())()
{
  return nullsub_1;
}

HealthVisualization::LevelView::LayoutConfiguration __swiftcall LevelView.LayoutConfiguration.init(size:)(HealthVisualization::LevelView::LayoutConfiguration size)
{
  CGFloat *v1;

  *v1 = size.size.width;
  v1[1] = size.size.height;
  return size;
}

int64x2_t sub_1BCA45124()
{
  int64x2_t result;

  result = vdupq_n_s64(0x4046000000000000uLL);
  xmmword_1EF479A58 = (__int128)result;
  return result;
}

double static LevelView.LayoutConfiguration.default.getter@<D0>(_OWORD *a1@<X8>)
{
  double result;

  if (qword_1EF477CA0 != -1)
    swift_once();
  result = *(double *)&xmmword_1EF479A58;
  *a1 = xmmword_1EF479A58;
  return result;
}

uint64_t sub_1BCA45190(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_1BCA31C0C(v2);
  v3 = *(_QWORD *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  result = sub_1BCA451F8(v5);
  *a1 = v2;
  return result;
}

uint64_t sub_1BCA451F8(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  double v15;
  double v16;
  double *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  uint64_t v32;
  char v33;
  unint64_t v34;
  unint64_t v35;
  char *v36;
  char *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  BOOL v49;
  unint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  BOOL v59;
  uint64_t v60;
  char v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  BOOL v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  unint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  double v91;
  uint64_t v92;
  char v93;
  char *v95;
  uint64_t v96;
  unint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  double *__dst;

  v3 = a1[1];
  result = sub_1BCAB678C();
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_137;
    if ((unint64_t)v3 >= 2)
    {
      v85 = *a1;
      v86 = -1;
      v87 = 1;
      v88 = *a1;
      do
      {
        v89 = v86;
        v90 = v88;
        do
        {
          v91 = *(double *)(v90 + 24);
          if (v91 >= *(double *)v90)
            break;
          if (!v85)
            goto LABEL_141;
          v92 = *(_QWORD *)(v90 + 32);
          v93 = *(_BYTE *)(v90 + 40);
          *(_OWORD *)(v90 + 24) = *(_OWORD *)v90;
          *(_QWORD *)(v90 + 40) = *(_QWORD *)(v90 + 16);
          *(double *)v90 = v91;
          *(_QWORD *)(v90 + 8) = v92;
          *(_BYTE *)(v90 + 16) = v93;
          v90 -= 24;
        }
        while (!__CFADD__(v89++, 1));
        ++v87;
        v88 += 24;
        --v86;
      }
      while (v87 != v3);
    }
    return result;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_146;
  v6 = result;
  v104 = a1;
  if (v3 < 2)
  {
    v9 = MEMORY[0x1E0DEE9D8];
    __dst = (double *)(MEMORY[0x1E0DEE9D8] + 32);
    if (v3 != 1)
    {
      v13 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
      v12 = (char *)MEMORY[0x1E0DEE9D8];
LABEL_103:
      v95 = v12;
      v106 = v9;
      if (v13 >= 2)
      {
        v96 = *v104;
        do
        {
          v97 = v13 - 2;
          if (v13 < 2)
            goto LABEL_132;
          if (!v96)
            goto LABEL_145;
          v98 = v95;
          v99 = *(_QWORD *)&v95[16 * v97 + 32];
          v100 = *(_QWORD *)&v95[16 * v13 + 24];
          sub_1BCA4590C((double *)(v96 + 24 * v99), (double *)(v96 + 24 * *(_QWORD *)&v95[16 * v13 + 16]), v96 + 24 * v100, __dst);
          if (v1)
            break;
          if (v100 < v99)
            goto LABEL_133;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v98 = sub_1BCA31BBC((uint64_t)v98);
          if (v97 >= *((_QWORD *)v98 + 2))
            goto LABEL_134;
          v101 = &v98[16 * v97 + 32];
          *(_QWORD *)v101 = v99;
          *((_QWORD *)v101 + 1) = v100;
          v102 = *((_QWORD *)v98 + 2);
          if (v13 > v102)
            goto LABEL_135;
          memmove(&v98[16 * v13 + 16], &v98[16 * v13 + 32], 16 * (v102 - v13));
          v95 = v98;
          *((_QWORD *)v98 + 2) = v102 - 1;
          v13 = v102 - 1;
        }
        while (v102 > 2);
      }
LABEL_93:
      swift_bridgeObjectRelease();
      *(_QWORD *)(v106 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    v106 = MEMORY[0x1E0DEE9D8];
  }
  else
  {
    v7 = v5 >> 1;
    v8 = sub_1BCAB6048();
    *(_QWORD *)(v8 + 16) = v7;
    v106 = v8;
    __dst = (double *)(v8 + 32);
  }
  v10 = 0;
  v11 = *a1;
  v105 = *a1 + 24;
  v103 = *a1 - 24;
  v12 = (char *)MEMORY[0x1E0DEE9D8];
  v107 = v6;
  v108 = v3;
  v109 = v11;
  while (1)
  {
    v14 = v10++;
    if (v10 < v3)
    {
      v15 = *(double *)(v11 + 24 * v10);
      v16 = *(double *)(v11 + 24 * v14);
      v10 = v14 + 2;
      if (v14 + 2 < v3)
      {
        v17 = (double *)(v105 + 24 * v14);
        while (v15 < v16 != v17[3] >= *v17)
        {
          ++v10;
          v17 += 3;
          if (v3 == v10)
          {
            v10 = v3;
            break;
          }
        }
      }
      if (v15 < v16)
      {
        if (v10 < v14)
          goto LABEL_138;
        if (v14 < v10)
        {
          v18 = 24 * v10;
          v19 = 24 * v14;
          v20 = v10;
          v21 = v14;
          do
          {
            if (v21 != --v20)
            {
              if (!v11)
                goto LABEL_144;
              v22 = v11 + v19;
              v23 = v11 + v18;
              v24 = *(_BYTE *)(v11 + v19 + 16);
              v25 = *(_OWORD *)(v11 + v19);
              v26 = *(_QWORD *)(v11 + v18 - 8);
              *(_OWORD *)v22 = *(_OWORD *)(v11 + v18 - 24);
              *(_QWORD *)(v22 + 16) = v26;
              *(_OWORD *)(v23 - 24) = v25;
              *(_BYTE *)(v23 - 8) = v24;
            }
            ++v21;
            v18 -= 24;
            v19 += 24;
          }
          while (v21 < v20);
        }
      }
    }
    if (v10 >= v3)
      goto LABEL_46;
    if (__OFSUB__(v10, v14))
      goto LABEL_136;
    if (v10 - v14 >= v6)
      goto LABEL_46;
    v27 = v14 + v6;
    if (__OFADD__(v14, v6))
      goto LABEL_139;
    if (v27 >= v3)
      v27 = v3;
    if (v27 < v14)
      break;
    if (v10 != v27)
    {
      v28 = v103 + 24 * v10;
      do
      {
        v29 = v14;
        v30 = v28;
        do
        {
          v31 = *(double *)(v30 + 24);
          if (v31 >= *(double *)v30)
            break;
          if (!v11)
            goto LABEL_142;
          v32 = *(_QWORD *)(v30 + 32);
          v33 = *(_BYTE *)(v30 + 40);
          *(_OWORD *)(v30 + 24) = *(_OWORD *)v30;
          *(_QWORD *)(v30 + 40) = *(_QWORD *)(v30 + 16);
          *(double *)v30 = v31;
          *(_QWORD *)(v30 + 8) = v32;
          *(_BYTE *)(v30 + 16) = v33;
          v30 -= 24;
          ++v29;
        }
        while (v10 != v29);
        ++v10;
        v28 += 24;
      }
      while (v10 != v27);
      v10 = v27;
    }
LABEL_46:
    if (v10 < v14)
      goto LABEL_131;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v12 = sub_1BCA317E4(0, *((_QWORD *)v12 + 2) + 1, 1, v12);
    v35 = *((_QWORD *)v12 + 2);
    v34 = *((_QWORD *)v12 + 3);
    v13 = v35 + 1;
    v11 = v109;
    if (v35 >= v34 >> 1)
    {
      v84 = sub_1BCA317E4((char *)(v34 > 1), v35 + 1, 1, v12);
      v11 = v109;
      v12 = v84;
    }
    *((_QWORD *)v12 + 2) = v13;
    v36 = v12 + 32;
    v37 = &v12[16 * v35 + 32];
    *(_QWORD *)v37 = v14;
    *((_QWORD *)v37 + 1) = v10;
    if (v35)
    {
      while (1)
      {
        v38 = v13 - 1;
        if (v13 >= 4)
        {
          v43 = &v36[16 * v13];
          v44 = *((_QWORD *)v43 - 8);
          v45 = *((_QWORD *)v43 - 7);
          v49 = __OFSUB__(v45, v44);
          v46 = v45 - v44;
          if (v49)
            goto LABEL_120;
          v48 = *((_QWORD *)v43 - 6);
          v47 = *((_QWORD *)v43 - 5);
          v49 = __OFSUB__(v47, v48);
          v41 = v47 - v48;
          v42 = v49;
          if (v49)
            goto LABEL_121;
          v50 = v13 - 2;
          v51 = &v36[16 * v13 - 32];
          v53 = *(_QWORD *)v51;
          v52 = *((_QWORD *)v51 + 1);
          v49 = __OFSUB__(v52, v53);
          v54 = v52 - v53;
          if (v49)
            goto LABEL_123;
          v49 = __OFADD__(v41, v54);
          v55 = v41 + v54;
          if (v49)
            goto LABEL_126;
          if (v55 >= v46)
          {
            v73 = &v36[16 * v38];
            v75 = *(_QWORD *)v73;
            v74 = *((_QWORD *)v73 + 1);
            v49 = __OFSUB__(v74, v75);
            v76 = v74 - v75;
            if (v49)
              goto LABEL_130;
            v66 = v41 < v76;
            goto LABEL_83;
          }
        }
        else
        {
          if (v13 != 3)
          {
            v67 = *((_QWORD *)v12 + 4);
            v68 = *((_QWORD *)v12 + 5);
            v49 = __OFSUB__(v68, v67);
            v60 = v68 - v67;
            v61 = v49;
            goto LABEL_77;
          }
          v40 = *((_QWORD *)v12 + 4);
          v39 = *((_QWORD *)v12 + 5);
          v49 = __OFSUB__(v39, v40);
          v41 = v39 - v40;
          v42 = v49;
        }
        if ((v42 & 1) != 0)
          goto LABEL_122;
        v50 = v13 - 2;
        v56 = &v36[16 * v13 - 32];
        v58 = *(_QWORD *)v56;
        v57 = *((_QWORD *)v56 + 1);
        v59 = __OFSUB__(v57, v58);
        v60 = v57 - v58;
        v61 = v59;
        if (v59)
          goto LABEL_125;
        v62 = &v36[16 * v38];
        v64 = *(_QWORD *)v62;
        v63 = *((_QWORD *)v62 + 1);
        v49 = __OFSUB__(v63, v64);
        v65 = v63 - v64;
        if (v49)
          goto LABEL_128;
        if (__OFADD__(v60, v65))
          goto LABEL_129;
        if (v60 + v65 >= v41)
        {
          v66 = v41 < v65;
LABEL_83:
          if (v66)
            v38 = v50;
          goto LABEL_85;
        }
LABEL_77:
        if ((v61 & 1) != 0)
          goto LABEL_124;
        v69 = &v36[16 * v38];
        v71 = *(_QWORD *)v69;
        v70 = *((_QWORD *)v69 + 1);
        v49 = __OFSUB__(v70, v71);
        v72 = v70 - v71;
        if (v49)
          goto LABEL_127;
        if (v72 < v60)
          goto LABEL_15;
LABEL_85:
        v77 = v38 - 1;
        if (v38 - 1 >= v13)
        {
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
          goto LABEL_140;
        }
        if (!v11)
          goto LABEL_143;
        v78 = v12;
        v79 = &v36[16 * v77];
        v80 = *(_QWORD *)v79;
        v81 = &v36[16 * v38];
        v82 = *((_QWORD *)v81 + 1);
        sub_1BCA4590C((double *)(v11 + 24 * *(_QWORD *)v79), (double *)(v11 + 24 * *(_QWORD *)v81), v11 + 24 * v82, __dst);
        if (v1)
          goto LABEL_93;
        if (v82 < v80)
          goto LABEL_117;
        if (v38 > *((_QWORD *)v78 + 2))
          goto LABEL_118;
        *(_QWORD *)v79 = v80;
        *(_QWORD *)&v36[16 * v77 + 8] = v82;
        v83 = *((_QWORD *)v78 + 2);
        if (v38 >= v83)
          goto LABEL_119;
        v12 = v78;
        v13 = v83 - 1;
        memmove(&v36[16 * v38], v81 + 16, 16 * (v83 - 1 - v38));
        *((_QWORD *)v78 + 2) = v83 - 1;
        v11 = v109;
        if (v83 <= 2)
          goto LABEL_15;
      }
    }
    v13 = 1;
LABEL_15:
    v6 = v107;
    v3 = v108;
    if (v10 >= v108)
    {
      v9 = v106;
      goto LABEL_103;
    }
  }
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  result = sub_1BCAB65B8();
  __break(1u);
  return result;
}

uint64_t sub_1BCA4590C(double *__src, double *a2, unint64_t a3, double *__dst)
{
  double *v4;
  double *v6;
  double *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  double *v13;
  double *v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  double *v20;
  double *v21;
  double v22;
  __int128 v23;
  __int128 v24;
  uint64_t result;
  double *v26;
  double *v27;
  double *v28;

  v4 = __dst;
  v6 = a2;
  v7 = __src;
  v8 = (char *)a2 - (char *)__src;
  v9 = ((char *)a2 - (char *)__src) / 24;
  v10 = a3 - (_QWORD)a2;
  v11 = (uint64_t)(a3 - (_QWORD)a2) / 24;
  v27 = __dst;
  v28 = __src;
  if (v9 >= v11)
  {
    if (v10 >= -23)
    {
      v17 = 3 * v11;
      if (__dst != a2 || &a2[v17] <= __dst)
        memmove(__dst, a2, 24 * v11);
      v18 = (char *)&v4[v17];
      v26 = &v4[v17];
      v28 = v6;
      if (v7 < v6 && v10 >= 24)
      {
        v19 = a3 - 24;
        v20 = v6;
        while (1)
        {
          v21 = (double *)(v19 + 24);
          v22 = *(v20 - 3);
          v20 -= 3;
          if (*((double *)v18 - 3) >= v22)
          {
            v26 = (double *)(v18 - 24);
            if (v21 < (double *)v18 || v19 >= (unint64_t)v18 || v21 != (double *)v18)
            {
              v24 = *(_OWORD *)(v18 - 24);
              *(_QWORD *)(v19 + 16) = *((_QWORD *)v18 - 1);
              *(_OWORD *)v19 = v24;
            }
            v20 = v6;
            v18 -= 24;
            if (v6 <= v7)
              goto LABEL_38;
          }
          else
          {
            if (v21 != v6 || v19 >= (unint64_t)v6)
            {
              v23 = *(_OWORD *)v20;
              *(double *)(v19 + 16) = v20[2];
              *(_OWORD *)v19 = v23;
            }
            v28 = v20;
            if (v20 <= v7)
              goto LABEL_38;
          }
          v19 -= 24;
          v6 = v20;
          if (v18 <= (char *)v4)
            goto LABEL_38;
        }
      }
      goto LABEL_38;
    }
  }
  else if (v8 >= -23)
  {
    v12 = 3 * v9;
    if (__dst != __src || &__src[v12] <= __dst)
      memmove(__dst, __src, v12 * 8);
    v13 = &v4[v12];
    v26 = &v4[v12];
    if ((unint64_t)v6 < a3 && v8 >= 24)
    {
      do
      {
        if (*v6 >= *v4)
        {
          if (v7 != v4)
          {
            v16 = *(_OWORD *)v4;
            v7[2] = v4[2];
            *(_OWORD *)v7 = v16;
          }
          v4 += 3;
          v27 = v4;
          v14 = v6;
        }
        else
        {
          v14 = v6 + 3;
          if (v7 < v6 || v7 >= v14 || v7 != v6)
          {
            v15 = *(_OWORD *)v6;
            v7[2] = v6[2];
            *(_OWORD *)v7 = v15;
          }
        }
        v7 += 3;
        if (v4 >= v13)
          break;
        v6 = v14;
      }
      while ((unint64_t)v14 < a3);
      v28 = v7;
    }
LABEL_38:
    sub_1BCA31B04((void **)&v28, (const void **)&v27, &v26);
    return 1;
  }
  result = sub_1BCAB6624();
  __break(1u);
  return result;
}

uint64_t sub_1BCA45BAC(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x65676E6172 && a2 == 0xE500000000000000;
  if (v2 || (sub_1BCAB67C8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6867696C68676968 && a2 == 0xEB00000000646574)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_1BCAB67C8();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_1BCA45CAC(uint64_t result)
{
  uint64_t v1;
  double *v2;
  double v3;
  double v4;

  v1 = *(_QWORD *)(result + 16);
  if (!v1)
    goto LABEL_9;
  v2 = (double *)(result + 40);
  v3 = 1.79769313e308;
  v4 = 2.22507386e-308;
  do
  {
    if (v3 >= *(v2 - 1))
      v3 = *(v2 - 1);
    if (*v2 > v4)
      v4 = *v2;
    v2 += 3;
    --v1;
  }
  while (v1);
  if (v3 > v4)
LABEL_9:
    __break(1u);
  return result;
}

void sub_1BCA45CF8(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  sub_1BCA44680(a1, a2, *(_QWORD *)(v3 + 16), *(CGFloat **)(v3 + 32), *(_QWORD *)(v3 + 88), a3, *(CGFloat *)(v3 + 24), *(CGFloat *)(v3 + 40), *(CGFloat *)(v3 + 48), *(CGFloat *)(v3 + 56), *(double *)(v3 + 64), *(double *)(v3 + 72));
}

uint64_t sub_1BCA45D18(uint64_t a1, void (*a2)(uint64_t *__return_ptr, uint64_t, __int128 *))
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  char v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  char v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  __int128 v16;
  __int128 v17;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  char v22;
  uint64_t v23;
  __int128 v24;
  char v25;
  uint64_t v26;

  v26 = MEMORY[0x1E0DEE9D8];
  sub_1BC9BAE10(0, 0, 0);
  v3 = v26;
  v4 = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRetain();
  if (v4)
  {
    v5 = 0;
    v6 = (_BYTE *)(a1 + 48);
    do
    {
      v7 = *v6;
      v23 = v5;
      v24 = *((_OWORD *)v6 - 1);
      v25 = v7;
      a2(&v19, v5, &v24);
      v8 = v19;
      v9 = v20;
      v10 = v21;
      v11 = v22;
      v26 = v3;
      v13 = *(_QWORD *)(v3 + 16);
      v12 = *(_QWORD *)(v3 + 24);
      if (v13 >= v12 >> 1)
      {
        v16 = v21;
        v17 = v20;
        sub_1BC9BAE10(v12 > 1, v13 + 1, 1);
        v10 = v16;
        v9 = v17;
        v3 = v26;
      }
      *(_QWORD *)(v3 + 16) = v13 + 1;
      v14 = v3 + 48 * v13;
      *(_QWORD *)(v14 + 32) = v8;
      ++v5;
      *(_OWORD *)(v14 + 40) = v9;
      *(_OWORD *)(v14 + 56) = v10;
      *(_BYTE *)(v14 + 72) = v11;
      v6 += 24;
    }
    while (v4 != v5);
  }
  swift_bridgeObjectRelease();
  return v3;
}

unint64_t sub_1BCA45E68()
{
  unint64_t result;

  result = qword_1ED6C5028;
  if (!qword_1ED6C5028)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCAC5790, &type metadata for LevelView.DataConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED6C5028);
  }
  return result;
}

void sub_1BCA45EAC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED6C5060)
  {
    v0 = sub_1BCAB6060();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED6C5060);
  }
}

unint64_t sub_1BCA45F00()
{
  unint64_t result;

  result = qword_1ED6C5058;
  if (!qword_1ED6C5058)
  {
    result = MEMORY[0x1BCCFBE84](&protocol conformance descriptor for LevelView.DataConfiguration.Bucket, &type metadata for LevelView.DataConfiguration.Bucket);
    atomic_store(result, (unint64_t *)&qword_1ED6C5058);
  }
  return result;
}

uint64_t sub_1BCA45F44(unint64_t *a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = *a1;
  if (!result)
  {
    sub_1BCA45EAC();
    v8 = v7;
    v9 = a2();
    result = MEMORY[0x1BCCFBE84](a3, v8, &v9);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1BCA45FA8()
{
  unint64_t result;

  result = qword_1EF479A80;
  if (!qword_1EF479A80)
  {
    result = MEMORY[0x1BCCFBE84](&protocol conformance descriptor for LevelView.DataConfiguration.Bucket, &type metadata for LevelView.DataConfiguration.Bucket);
    atomic_store(result, (unint64_t *)&qword_1EF479A80);
  }
  return result;
}

uint64_t sub_1BCA45FEC()
{
  uint64_t v0;

  return swift_deallocObject();
}

id sub_1BCA46010(void *a1)
{
  uint64_t v1;
  void *v2;
  id v3;
  double v4;

  v2 = *(void **)(v1 + 16);
  v3 = objc_msgSend(a1, sel_userInterfaceStyle);
  v4 = 0.2;
  if (v3 == (id)2)
    v4 = 0.5;
  return objc_msgSend(v2, sel_colorWithAlphaComponent_, v4);
}

ValueMetadata *type metadata accessor for LevelView()
{
  return &type metadata for LevelView;
}

_QWORD *initializeBufferWithCopyOfBuffer for LevelView.DataConfiguration(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for LevelView.DataConfiguration(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *assignWithTake for LevelView.DataConfiguration(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for LevelView.DataConfiguration()
{
  return &type metadata for LevelView.DataConfiguration;
}

__n128 __swift_memcpy17_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for LevelView.DataConfiguration.Bucket(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 16);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for LevelView.DataConfiguration.Bucket(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for LevelView.DataConfiguration.Bucket()
{
  return &type metadata for LevelView.DataConfiguration.Bucket;
}

_QWORD *initializeBufferWithCopyOfBuffer for LevelView.ViewConfiguration(_QWORD *a1, uint64_t a2)
{
  void *v3;
  void *v4;
  void *v5;
  id v6;
  id v7;
  id v8;

  v3 = *(void **)a2;
  v4 = *(void **)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v4;
  v5 = *(void **)(a2 + 16);
  a1[2] = v5;
  v6 = v3;
  v7 = v4;
  v8 = v5;
  return a1;
}

void destroy for LevelView.ViewConfiguration(id *a1)
{

}

uint64_t assignWithCopy for LevelView.ViewConfiguration(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  id v12;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  v7 = *(void **)(a2 + 8);
  v8 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v7;
  v9 = v7;

  v10 = *(void **)(a2 + 16);
  v11 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  v12 = v10;

  return a1;
}

uint64_t assignWithTake for LevelView.ViewConfiguration(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;

  v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;

  v5 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);

  return a1;
}

ValueMetadata *type metadata accessor for LevelView.ViewConfiguration()
{
  return &type metadata for LevelView.ViewConfiguration;
}

ValueMetadata *type metadata accessor for LevelView.ViewConfiguration.Constants()
{
  return &type metadata for LevelView.ViewConfiguration.Constants;
}

ValueMetadata *type metadata accessor for LevelView.LayoutConfiguration()
{
  return &type metadata for LevelView.LayoutConfiguration;
}

ValueMetadata *type metadata accessor for LevelView.DataConfiguration.CodingKeys()
{
  return &type metadata for LevelView.DataConfiguration.CodingKeys;
}

uint64_t _s19HealthVisualization9LevelViewV17DataConfigurationV10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1BCA46398 + 4 * byte_1BCAC5495[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1BCA463CC + 4 * asc_1BCAC5490[v4]))();
}

uint64_t sub_1BCA463CC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BCA463D4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BCA463DCLL);
  return result;
}

uint64_t sub_1BCA463E8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BCA463F0);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1BCA463F4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BCA463FC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for LevelView.DataConfiguration.Bucket.CodingKeys()
{
  return &type metadata for LevelView.DataConfiguration.Bucket.CodingKeys;
}

unint64_t sub_1BCA4641C()
{
  unint64_t result;

  result = qword_1EF479A88;
  if (!qword_1EF479A88)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCAC56B0, &type metadata for LevelView.DataConfiguration.Bucket.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF479A88);
  }
  return result;
}

unint64_t sub_1BCA46464()
{
  unint64_t result;

  result = qword_1EF479A90;
  if (!qword_1EF479A90)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCAC5768, &type metadata for LevelView.DataConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF479A90);
  }
  return result;
}

unint64_t sub_1BCA464AC()
{
  unint64_t result;

  result = qword_1ED6C5038;
  if (!qword_1ED6C5038)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCAC56D8, &type metadata for LevelView.DataConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED6C5038);
  }
  return result;
}

unint64_t sub_1BCA464F4()
{
  unint64_t result;

  result = qword_1ED6C5030;
  if (!qword_1ED6C5030)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCAC5700, &type metadata for LevelView.DataConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED6C5030);
  }
  return result;
}

unint64_t sub_1BCA4653C()
{
  unint64_t result;

  result = qword_1ED6C5050;
  if (!qword_1ED6C5050)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCAC5620, &type metadata for LevelView.DataConfiguration.Bucket.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED6C5050);
  }
  return result;
}

unint64_t sub_1BCA46584()
{
  unint64_t result;

  result = qword_1ED6C5048;
  if (!qword_1ED6C5048)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCAC5648, &type metadata for LevelView.DataConfiguration.Bucket.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED6C5048);
  }
  return result;
}

uint64_t sub_1BCA465C8(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x7A696C616D726F6ELL && a2 == 0xEF65756C61566465;
  if (v2 || (sub_1BCAB67C8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000017 && a2 == 0x80000001BCAD20C0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_1BCAB67C8();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

void AnchorDate.date.getter()
{
  unsigned __int8 *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = sub_1BCAB4F74();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1BCAB4E54();
  MEMORY[0x1E0C80A78](v5);
  v6 = *v0;
  _s19HealthVisualization25PresentationDateProvidingPAAE012presentationD010Foundation0D0VvgZ_0();
  sub_1BCAB4F50();
  sub_1BCAB4F08();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  __asm { BR              X9 }
}

uint64_t sub_1BCA467C4()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  id v6;

  v4 = (void *)sub_1BCAB4DE8();
  v5 = v2;
  v6 = objc_msgSend(v2, sel_hk_startOfDateByAddingDays_toDate_, 0, v4);

  sub_1BCAB4E24();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v1, v0);
}

HealthVisualization::AnchorDate_optional __swiftcall AnchorDate.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  unint64_t v3;
  HealthVisualization::AnchorDate_optional result;
  char v5;

  v2 = v1;
  v3 = sub_1BCAB6654();
  result.value = swift_bridgeObjectRelease();
  v5 = 5;
  if (v3 < 5)
    v5 = v3;
  *v2 = v5;
  return result;
}

void *static AnchorDate.allCases.getter()
{
  return &unk_1E75446F8;
}

uint64_t AnchorDate.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1BCA469C4 + 4 * byte_1BCAC5830[*v0]))(0x54664F7472617473, 0xEC0000007961646FLL);
}

unint64_t sub_1BCA469C4()
{
  return 0xD000000000000010;
}

uint64_t sub_1BCA469E0()
{
  return 0x57664F7472617473;
}

uint64_t sub_1BCA46A00()
{
  return 0x4D664F7472617473;
}

uint64_t sub_1BCA46A20()
{
  return 0x59664F7472617473;
}

unint64_t sub_1BCA46A44()
{
  unint64_t result;

  result = qword_1EF479A98;
  if (!qword_1EF479A98)
  {
    result = MEMORY[0x1BCCFBE84](&protocol conformance descriptor for AnchorDate, &type metadata for AnchorDate);
    atomic_store(result, (unint64_t *)&qword_1EF479A98);
  }
  return result;
}

void sub_1BCA46A88()
{
  char *v0;

  sub_1BCA92DCC(*v0);
}

void sub_1BCA46A90()
{
  __asm { BR              X10 }
}

uint64_t sub_1BCA46AD4()
{
  sub_1BCAB5F40();
  return swift_bridgeObjectRelease();
}

void sub_1BCA46B64(uint64_t a1)
{
  char *v1;

  sub_1BCA93A0C(a1, *v1);
}

HealthVisualization::AnchorDate_optional sub_1BCA46B6C(Swift::String *a1)
{
  return AnchorDate.init(rawValue:)(*a1);
}

uint64_t sub_1BCA46B78()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1BCA46BB0 + 4 * byte_1BCAC583A[*v0]))();
}

void sub_1BCA46BB0(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000010;
  a1[1] = 0x80000001BCACDA50;
}

void sub_1BCA46BD0(_QWORD *a1@<X8>)
{
  *a1 = 0x57664F7472617473;
  a1[1] = 0xEB000000006B6565;
}

void sub_1BCA46BF4(uint64_t a1@<X8>)
{
  strcpy((char *)a1, "startOfMonth");
  *(_BYTE *)(a1 + 13) = 0;
  *(_WORD *)(a1 + 14) = -5120;
}

void sub_1BCA46C18(_QWORD *a1@<X8>)
{
  *a1 = 0x59664F7472617473;
  a1[1] = 0xEB00000000726165;
}

uint64_t sub_1BCA46C3C()
{
  sub_1BCA46E6C();
  return sub_1BCAB5FE8();
}

uint64_t sub_1BCA46C98()
{
  sub_1BCA46E6C();
  return sub_1BCAB5FD0();
}

unint64_t sub_1BCA46CE8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EF479AA0;
  if (!qword_1EF479AA0)
  {
    sub_1BCA46D30();
    result = MEMORY[0x1BCCFBE84](MEMORY[0x1E0DEAF50], v1);
    atomic_store(result, (unint64_t *)&qword_1EF479AA0);
  }
  return result;
}

void sub_1BCA46D30()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EF479AA8)
  {
    v0 = sub_1BCAB6060();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EF479AA8);
  }
}

void sub_1BCA46D84(_QWORD *a1@<X8>)
{
  *a1 = &unk_1E7544720;
}

void sub_1BCA46D94(char *a1)
{
  sub_1BC9993E0(*a1);
}

uint64_t storeEnumTagSinglePayload for AnchorDate(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1BCA46DEC + 4 * byte_1BCAC5844[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1BCA46E20 + 4 * byte_1BCAC583F[v4]))();
}

uint64_t sub_1BCA46E20(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BCA46E28(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BCA46E30);
  return result;
}

uint64_t sub_1BCA46E3C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BCA46E44);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1BCA46E48(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BCA46E50(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AnchorDate()
{
  return &type metadata for AnchorDate;
}

unint64_t sub_1BCA46E6C()
{
  unint64_t result;

  result = qword_1ED6C69C8;
  if (!qword_1ED6C69C8)
  {
    result = MEMORY[0x1BCCFBE84](&protocol conformance descriptor for AnchorDate, &type metadata for AnchorDate);
    atomic_store(result, (unint64_t *)&qword_1ED6C69C8);
  }
  return result;
}

uint64_t ActivitySummaryQueryOperation.result.getter()
{
  uint64_t v1;

  swift_retain();
  sub_1BCAB5070();
  swift_release();
  return v1;
}

uint64_t sub_1BCA46EFC@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  uint64_t v3;
  char v4;

  swift_retain();
  sub_1BCAB5070();
  result = swift_release();
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  return result;
}

uint64_t sub_1BCA46F58(uint64_t a1)
{
  id v1;
  char v3;

  v1 = *(id *)a1;
  v3 = *(_BYTE *)(a1 + 8);
  sub_1BC9A81A4(*(id *)a1, v3);
  swift_retain();
  sub_1BCAB507C();
  sub_1BC9A836C(v1, v3);
  return swift_release();
}

id sub_1BCA46FD8()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  void *v5;
  id v6;

  v1 = qword_1ED6C5DB0;
  v2 = *(void **)(v0 + qword_1ED6C5DB0);
  if (v2)
  {
    v3 = *(id *)(v0 + qword_1ED6C5DB0);
  }
  else
  {
    v4 = sub_1BCA47034();
    v5 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v4;
    v3 = v4;

    v2 = 0;
  }
  v6 = v2;
  return v3;
}

id sub_1BCA47034()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  void *v4;
  char *v5;
  id v6;
  id v7;
  id v8;
  _QWORD v10[6];

  v1 = *(_QWORD *)&v0[qword_1ED6C5DC8];
  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 16) = v0;
  v3 = objc_allocWithZone(MEMORY[0x1E0CB6280]);
  v10[4] = sub_1BCA48FA0;
  v10[5] = v2;
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 1107296256;
  v10[2] = sub_1BCA48A8C;
  v10[3] = &block_descriptor_10;
  v4 = _Block_copy(v10);
  v5 = v0;
  v6 = objc_msgSend(v3, sel_initWithPredicate_resultsHandler_, v1, v4);
  _Block_release(v4);
  swift_release();
  objc_msgSend(v6, sel_setOrderByDateAscending_, v5[qword_1ED6C5D98]);
  objc_msgSend(v6, sel_setLimit_, *(_QWORD *)&v5[qword_1ED6C5DC0]);
  v7 = v6;
  v8 = objc_msgSend(v5, sel_name);
  objc_msgSend(v7, sel_setDebugIdentifier_, v8);

  objc_msgSend(v7, sel_setQualityOfService_, *(_QWORD *)&v5[qword_1ED6C5DA8]);
  return v7;
}

uint64_t sub_1BCA471B0@<X0>(uint64_t a1@<X8>)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  id v13;
  _BYTE v15[24];

  sub_1BC998AB0(0, &qword_1ED6C5F20, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF2118], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v3);
  v5 = &v15[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v6);
  v8 = &v15[-v7];
  v9 = (uint64_t)v1 + qword_1ED6C5DB8;
  swift_beginAccess();
  sub_1BCA48FB4(v9, (uint64_t)v8);
  v10 = sub_1BCAB54A8();
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v11 + 48))(v8, 1, v10) != 1)
    return (*(uint64_t (**)(uint64_t, _BYTE *, uint64_t))(v11 + 32))(a1, v8, v10);
  sub_1BC9B3A38((uint64_t)v8, &qword_1ED6C5F20, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF2118]);
  if (qword_1ED6C7098 != -1)
    swift_once();
  v12 = (id)qword_1ED6C69C0;
  v13 = v1;
  sub_1BCAB549C();
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v11 + 16))(v5, a1, v10);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v5, 0, 1, v10);
  swift_beginAccess();
  sub_1BCA49010((uint64_t)v5, v9);
  return swift_endAccess();
}

id ActivitySummaryQueryOperation.__allocating_init(predicate:orderedAscending:limit:name:queryQualityOfService:healthStore:)(void *a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  objc_class *v7;
  id v15;

  v15 = objc_allocWithZone(v7);
  return ActivitySummaryQueryOperation.init(predicate:orderedAscending:limit:name:queryQualityOfService:healthStore:)(a1, a2, a3, a4, a5, a6, a7);
}

id ActivitySummaryQueryOperation.init(predicate:orderedAscending:limit:name:queryQualityOfService:healthStore:)(void *a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  char *v7;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  id v20;
  id v21;
  id v22;
  id v23;
  void *v24;
  objc_class *ObjectType;
  objc_super v28;
  uint64_t v29;
  char v30;

  ObjectType = (objc_class *)swift_getObjectType();
  v14 = qword_1ED6C5DA0;
  sub_1BC9A82C4();
  v15 = swift_allocError();
  *v16 = 0xD00000000000001DLL;
  v16[1] = 0x80000001BCAC5990;
  v16[2] = 0;
  v29 = v15;
  v30 = 1;
  sub_1BC998AB0(0, &qword_1ED6C5C08, (uint64_t (*)(uint64_t))sub_1BCA475FC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0D2E5C8]);
  swift_allocObject();
  v17 = v7;
  *(_QWORD *)&v7[v14] = sub_1BCAB50A0();
  *(_QWORD *)&v17[qword_1ED6C5DB0] = 0;
  v18 = &v17[qword_1ED6C5DB8];
  v19 = sub_1BCAB54A8();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v18, 1, 1, v19);
  *(_QWORD *)&v17[qword_1ED6C5DC8] = a1;
  v17[qword_1ED6C5D98] = a2;
  *(_QWORD *)&v17[qword_1ED6C5DC0] = a3;
  *(_QWORD *)&v17[qword_1ED6C5DA8] = a6;
  *(_QWORD *)&v17[qword_1ED6C5D90] = a7;
  v20 = a1;
  v21 = a7;

  v28.receiver = v17;
  v28.super_class = ObjectType;
  v22 = objc_msgSendSuper2(&v28, sel_init);
  v23 = v22;
  if (a5)
  {
    v24 = (void *)sub_1BCAB5EE0();
    swift_bridgeObjectRelease();
  }
  else
  {
    v24 = 0;
  }
  objc_msgSend(v22, sel_setName_, v24, a4);

  return v22;
}

void sub_1BCA475FC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED6C5F60)
  {
    sub_1BC998AB0(255, &qword_1ED6C5F40, (uint64_t (*)(uint64_t))sub_1BCA47690, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
    sub_1BC9A7F58(255, (unint64_t *)&qword_1ED6C6F70);
    v0 = sub_1BCAB68A0();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED6C5F60);
  }
}

unint64_t sub_1BCA47690()
{
  unint64_t result;

  result = qword_1ED6C7530;
  if (!qword_1ED6C7530)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1ED6C7530);
  }
  return result;
}

Swift::Void __swiftcall ActivitySummaryQueryOperation.main()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  Swift::String v5;
  Swift::String v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;
  uint64_t v13;

  v1 = sub_1BCAB54A8();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5._countAndFlagsBits = 0x676E696E6E7572;
  v5._object = (void *)0xE700000000000000;
  v6._countAndFlagsBits = 0;
  v6._object = (void *)0xE000000000000000;
  NSOperation.logLifeCycleEvent(_:withPrivateInfo:)(v5, v6);
  sub_1BCAB6270();
  if (qword_1ED6C7098 != -1)
    swift_once();
  sub_1BCA471B0((uint64_t)v4);
  sub_1BC9A7EF4();
  v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_1BCABE680;
  v8 = sub_1BCAB5F04();
  v10 = v9;
  *(_QWORD *)(v7 + 56) = MEMORY[0x1E0DEA968];
  *(_QWORD *)(v7 + 64) = sub_1BC9A7FA4();
  *(_QWORD *)(v7 + 32) = v8;
  *(_QWORD *)(v7 + 40) = v10;
  sub_1BCAB5484();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  v11 = *(void **)(v0 + qword_1ED6C5D90);
  v12 = sub_1BCA46FD8();
  objc_msgSend(v11, sel_executeQuery_, v12);

}

void sub_1BCA47884(void *a1)
{
  id v1;

  v1 = a1;
  ActivitySummaryQueryOperation.main()();

}

Swift::Void __swiftcall ActivitySummaryQueryOperation.cleanUp()()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  Swift::String v5;
  Swift::String v6;
  Swift::String v7;
  void *v8;
  void *v9;
  Swift::String v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[2];

  v1 = sub_1BCAB54A8();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v4 = (char *)v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5._countAndFlagsBits = 0x676E696E61656C63;
  v5._object = (void *)0xEB00000000707520;
  v6._countAndFlagsBits = 0;
  v6._object = (void *)0xE000000000000000;
  NSOperation.logLifeCycleEvent(_:withPrivateInfo:)(v5, v6);
  if (objc_msgSend(v0, sel_isCancelled))
  {
    v17[1] = swift_getObjectType();
    sub_1BCA481B4();
    v7._countAndFlagsBits = sub_1BCAB5F28();
    v9 = v8;
    v10._countAndFlagsBits = 0x656C6C65636E6163;
    v10._object = (void *)0xE900000000000064;
    v7._object = v9;
    NSOperation.logLifeCycleEvent(_:withPrivateInfo:)(v10, v7);
    swift_bridgeObjectRelease();
  }
  v11 = *(void **)&v0[qword_1ED6C5D90];
  v12 = sub_1BCA46FD8();
  objc_msgSend(v11, sel_stopQuery_, v12);

  sub_1BCAB6264();
  if (qword_1ED6C7098 != -1)
    swift_once();
  sub_1BCA471B0((uint64_t)v4);
  sub_1BC9A7EF4();
  v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_1BCABE680;
  v14 = sub_1BCA47ACC();
  v16 = v15;
  *(_QWORD *)(v13 + 56) = MEMORY[0x1E0DEA968];
  *(_QWORD *)(v13 + 64) = sub_1BC9A7FA4();
  *(_QWORD *)(v13 + 32) = v14;
  *(_QWORD *)(v13 + 40) = v16;
  sub_1BCAB5484();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
}

uint64_t sub_1BCA47ACC()
{
  unint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t countAndFlagsBits;
  void *v33;
  char v34;
  uint64_t v35;
  int v36;
  id v37;
  id v38;
  id v39;
  id v40;
  uint64_t result;
  id v42;
  void *v43;
  uint64_t v44;
  id v45;
  uint64_t v46;
  id v47;
  void *v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  void (*v53)(char *, char *, uint64_t);
  char *v54;
  char *v55;
  void (*v56)(char *, uint64_t);
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  char *v63;
  char *v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  char v69;

  v1 = v0;
  v2 = sub_1BCAB4BD8();
  v65 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v64 = (char *)&v58 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BC998AB0(0, &qword_1ED6C7280, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v58 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v58 - v8;
  MEMORY[0x1E0C80A78](v10);
  v66 = (char *)&v58 - v11;
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v58 - v13;
  MEMORY[0x1E0C80A78](v15);
  v17 = (char *)&v58 - v16;
  MEMORY[0x1E0C80A78](v18);
  v20 = (char *)&v58 - v19;
  v21 = sub_1BCAB4E54();
  v22 = *(_QWORD *)(v21 - 8);
  MEMORY[0x1E0C80A78](v21);
  v62 = (char *)&v58 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v24);
  v61 = (char *)&v58 - v25;
  MEMORY[0x1E0C80A78](v26);
  v63 = (char *)&v58 - v27;
  MEMORY[0x1E0C80A78](v28);
  v67 = (char *)&v58 - v29;
  swift_retain();
  sub_1BCAB5070();
  v30 = swift_release();
  v31 = v68;
  if ((v69 & 1) != 0)
  {
    countAndFlagsBits = 1701736302;
    v33 = (void *)v68;
    v34 = 1;
LABEL_48:
    sub_1BC9A836C(v33, v34);
    return countAndFlagsBits;
  }
  v60 = v2;
  if (!((unint64_t)v68 >> 62))
  {
    v35 = *(_QWORD *)((v68 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v35)
      goto LABEL_5;
LABEL_47:
    countAndFlagsBits = 1701736302;
    v33 = (void *)v31;
    v34 = 0;
    goto LABEL_48;
  }
  if (v68 >= 0)
    v57 = v68 & 0xFFFFFFFFFFFFFF8;
  else
    v57 = v68;
  v59 = v57;
  swift_bridgeObjectRetain();
  v58 = sub_1BCAB65DC();
  sub_1BC9A836C((id)v31, 0);
  v35 = v58;
  if (!v58)
    goto LABEL_47;
LABEL_5:
  v36 = *(unsigned __int8 *)(v1 + qword_1ED6C5D98);
  v58 = v35;
  LODWORD(v59) = v36;
  if (v36 == 1)
  {
    if ((v31 & 0xC000000000000001) != 0)
    {
      swift_bridgeObjectRetain();
      v37 = (id)MEMORY[0x1BCCFB0D4](0, v31);
      sub_1BC9A836C((id)v31, 0);
LABEL_9:
      v38 = objc_msgSend(v37, sel__startDate, v58);

      if (v38)
      {
        sub_1BCAB4E24();

        v1 = *(_QWORD *)(v22 + 56);
        ((void (*)(char *, _QWORD, uint64_t, uint64_t))v1)(v17, 0, 1, v21);
      }
      else
      {
        v1 = *(_QWORD *)(v22 + 56);
        ((void (*)(char *, uint64_t, uint64_t, uint64_t))v1)(v17, 1, 1, v21);
      }
      goto LABEL_21;
    }
    if (*(_QWORD *)((v31 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      v37 = *(id *)(v31 + 32);
      goto LABEL_9;
    }
    __break(1u);
    goto LABEL_52;
  }
  v1 = v35 - 1;
  if (__OFSUB__(v35, 1))
  {
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }
  if ((v31 & 0xC000000000000001) != 0)
  {
LABEL_53:
    swift_bridgeObjectRetain();
    v39 = (id)MEMORY[0x1BCCFB0D4](v1, v31);
    sub_1BC9A836C((id)v31, 0);
    goto LABEL_16;
  }
  if ((v1 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_55;
  }
  if (v1 >= *(_QWORD *)((v31 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_55:
    __break(1u);
    goto LABEL_56;
  }
  v39 = *(id *)(v31 + 8 * v1 + 32);
LABEL_16:
  v40 = objc_msgSend(v39, sel__startDate, v58);

  if (v40)
  {
    sub_1BCAB4E24();

    v1 = *(_QWORD *)(v22 + 56);
    ((void (*)(char *, _QWORD, uint64_t, uint64_t))v1)(v14, 0, 1, v21);
  }
  else
  {
    v1 = *(_QWORD *)(v22 + 56);
    ((void (*)(char *, uint64_t, uint64_t, uint64_t))v1)(v14, 1, 1, v21);
  }
  v17 = v14;
LABEL_21:
  sub_1BCA48F20((uint64_t)v17, (uint64_t)v20);
  v17 = *(char **)(v22 + 48);
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v17)(v20, 1, v21) == 1)
  {
    countAndFlagsBits = 1701736302;
    sub_1BC9A836C((id)v31, 0);
    sub_1BC9B3A38((uint64_t)v20, &qword_1ED6C7280, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870]);
    return countAndFlagsBits;
  }
  v14 = *(char **)(v22 + 32);
  result = ((uint64_t (*)(char *, char *, uint64_t))v14)(v67, v20, v21);
  if ((_DWORD)v59)
  {
    v30 = v58 - 1;
    if (!__OFSUB__(v58, 1))
    {
      if ((v31 & 0xC000000000000001) == 0)
      {
        if ((v30 & 0x8000000000000000) != 0)
        {
          __break(1u);
        }
        else if (v30 < *(_QWORD *)((v31 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          v42 = *(id *)(v31 + 8 * v30 + 32);
LABEL_29:
          v43 = v42;
          v44 = v60;
          sub_1BC9A836C((id)v31, 0);
          v45 = objc_msgSend(v43, sel__endDate);

          if (v45)
          {
            sub_1BCAB4E24();

            v46 = 0;
          }
          else
          {
            v46 = 1;
          }
          v51 = (uint64_t)v66;
          ((void (*)(char *, uint64_t, uint64_t, uint64_t))v1)(v9, v46, 1, v21);
LABEL_40:
          sub_1BCA48F20((uint64_t)v9, v51);
          if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v17)(v51, 1, v21) == 1)
          {
            countAndFlagsBits = 1701736302;
            (*(void (**)(char *, uint64_t))(v22 + 8))(v67, v21);
            sub_1BC9B3A38(v51, &qword_1ED6C7280, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870]);
          }
          else
          {
            v52 = v63;
            ((void (*)(char *, uint64_t, uint64_t))v14)(v63, v51, v21);
            v53 = *(void (**)(char *, char *, uint64_t))(v22 + 16);
            v54 = v67;
            v53(v61, v67, v21);
            v53(v62, v52, v21);
            v55 = v64;
            sub_1BCAB4BA8();
            countAndFlagsBits = DateInterval.stringWithISO8601Format()()._countAndFlagsBits;
            (*(void (**)(char *, uint64_t))(v65 + 8))(v55, v44);
            v56 = *(void (**)(char *, uint64_t))(v22 + 8);
            v56(v52, v21);
            v56(v54, v21);
          }
          return countAndFlagsBits;
        }
        __break(1u);
        goto LABEL_60;
      }
LABEL_57:
      v42 = (id)MEMORY[0x1BCCFB0D4](v30, v31);
      goto LABEL_29;
    }
LABEL_56:
    __break(1u);
    goto LABEL_57;
  }
  if ((v31 & 0xC000000000000001) != 0)
  {
LABEL_60:
    v47 = (id)MEMORY[0x1BCCFB0D4](0, v31);
    goto LABEL_34;
  }
  if (*(_QWORD *)((v31 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    v47 = *(id *)(v31 + 32);
LABEL_34:
    v48 = v47;
    v44 = v60;
    sub_1BC9A836C((id)v31, 0);
    v49 = objc_msgSend(v48, sel__endDate);

    if (v49)
    {
      sub_1BCAB4E24();

      v50 = 0;
    }
    else
    {
      v50 = 1;
    }
    v51 = (uint64_t)v66;
    ((void (*)(char *, uint64_t, uint64_t, uint64_t))v1)(v6, v50, 1, v21);
    v9 = v6;
    goto LABEL_40;
  }
  __break(1u);
  return result;
}

unint64_t sub_1BCA481B4()
{
  unint64_t result;

  result = qword_1EF479AB0;
  if (!qword_1EF479AB0)
  {
    type metadata accessor for ActivitySummaryQueryOperation();
    result = swift_getMetatypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1EF479AB0);
  }
  return result;
}

uint64_t type metadata accessor for ActivitySummaryQueryOperation()
{
  uint64_t result;

  result = qword_1ED6C5DD0;
  if (!qword_1ED6C5DD0)
    return swift_getSingletonMetadata();
  return result;
}

void sub_1BCA48228(int a1, void *a2, unint64_t a3, id a4)
{
  Swift::String v7;
  Swift::String v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  void *v14;
  uint64_t *v15;
  id v16;
  Swift::String v17;
  Swift::String v18;
  uint64_t *v19;

  if ((objc_msgSend(a4, sel_isCancelled) & 1) != 0)
  {
    v7._countAndFlagsBits = 0xD00000000000002DLL;
    v7._object = (void *)0x80000001BCACE790;
    v8._countAndFlagsBits = 0;
    v8._object = (void *)0xE000000000000000;
    NSOperation.logLifeCycleEvent(_:withPrivateInfo:)(v7, v8);
  }
  else
  {
    v9 = (uint64_t)objc_msgSend(a4, sel_isFinished);
    if ((v9 & 1) == 0)
    {
      v10 = a2;
      if (!a2)
      {
        if (a3)
          v11 = 0xD000000000000024;
        else
          v11 = 0;
        if (a3)
          v12 = 0x80000001BCAD2200;
        else
          v12 = 0;
        if (a3)
          v13 = a3 | 0x8000000000000000;
        else
          v13 = 0xC000000000000000;
        sub_1BC9A82C4();
        v14 = (void *)swift_allocError();
        *v15 = v11;
        v15[1] = v12;
        v15[2] = v13;
        swift_getErrorValue();
        v16 = (id)a3;
        sub_1BC9A8308(v11, v12, v13);
        v17._countAndFlagsBits = sub_1BCAB6810();
        v18._countAndFlagsBits = 0;
        v18._object = (void *)0xE000000000000000;
        NSOperation.logErrorString(_:withInfo:)(v17, v18);
        swift_bridgeObjectRelease();

        v9 = swift_allocError();
        v10 = (void *)v9;
        *v19 = v11;
        v19[1] = v12;
        v19[2] = v13;
      }
      MEMORY[0x1E0C80A78](v9);
      swift_bridgeObjectRetain();
      sub_1BCAB50AC();
      sub_1BC9A836C(v10, a2 == 0);
    }
  }
}

void sub_1BCA48418(uint64_t a1, void *a2, char a3)
{
  char v4;
  Swift::String v5;
  Swift::String v6;

  v4 = a3 & 1;
  sub_1BC9A81A4(a2, a3 & 1);
  swift_retain();
  sub_1BCAB507C();
  sub_1BC9A836C(a2, v4);
  swift_release();
  v5._countAndFlagsBits = 0x64656873696E6966;
  v5._object = (void *)0xE800000000000000;
  v6._countAndFlagsBits = 0;
  v6._object = (void *)0xE000000000000000;
  NSOperation.logLifeCycleEvent(_:withPrivateInfo:)(v5, v6);
}

id static ActivitySummaryQueryOperation.makePredicate(dateInterval:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  void (*v23)(unint64_t, _QWORD, uint64_t);
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t);
  void *v27;
  void *v28;
  id v29;
  uint64_t v30;
  void (*v31)(uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  _QWORD v35[2];
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v35[1] = a1;
  v1 = sub_1BCAB4E54();
  v36 = *(_QWORD *)(v1 - 8);
  v37 = v1;
  MEMORY[0x1E0C80A78](v1);
  v3 = (char *)v35 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_1BCAB4C74();
  v40 = *(_QWORD *)(v4 - 8);
  v41 = v4;
  MEMORY[0x1E0C80A78](v4);
  v35[0] = (char *)v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)v35 - v7;
  v9 = sub_1BCAB4E84();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_1BCAB4F74();
  v38 = *(_QWORD *)(v13 - 8);
  v39 = v13;
  v14 = MEMORY[0x1E0C80A78](v13);
  v16 = (char *)v35 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD, uint64_t, __n128))(v10 + 104))(v12, *MEMORY[0x1E0CB0EF8], v9, v14);
  sub_1BCAB4E90();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  sub_1BC998AB0(0, &qword_1ED6C5F58, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB11B8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  v17 = sub_1BCAB4F68();
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(_QWORD *)(v18 + 72);
  v20 = (*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80);
  v21 = swift_allocObject();
  *(_OWORD *)(v21 + 16) = xmmword_1BCABFBF0;
  v22 = v21 + v20;
  v23 = *(void (**)(unint64_t, _QWORD, uint64_t))(v18 + 104);
  v23(v22, *MEMORY[0x1E0CB11A0], v17);
  v23(v22 + v19, *MEMORY[0x1E0CB1138], v17);
  v23(v22 + 2 * v19, *MEMORY[0x1E0CB1158], v17);
  v23(v22 + 3 * v19, *MEMORY[0x1E0CB1160], v17);
  v24 = v35[0];
  v23(v22 + 4 * v19, *MEMORY[0x1E0CB1130], v17);
  sub_1BCA48B1C(v21);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  sub_1BCAB4BC0();
  sub_1BCAB4ECC();
  v25 = v37;
  v26 = *(void (**)(char *, uint64_t))(v36 + 8);
  v26(v3, v37);
  sub_1BCAB4B9C();
  sub_1BCAB4ECC();
  swift_bridgeObjectRelease();
  v26(v3, v25);
  LOBYTE(v18) = MEMORY[0x1BCCF97F0](v8, v24);
  v27 = (void *)objc_opt_self();
  v28 = (void *)sub_1BCAB4BF0();
  if ((v18 & 1) != 0)
  {
    v29 = objc_msgSend(v27, sel_predicateForActivitySummaryWithDateComponents_, v28);
  }
  else
  {
    v30 = sub_1BCAB4BF0();
    v29 = objc_msgSend(v27, sel_predicateForActivitySummariesBetweenStartDateComponents_endDateComponents_, v28, v30);

    v28 = (void *)v30;
  }

  v31 = *(void (**)(uint64_t, uint64_t))(v40 + 8);
  v32 = v24;
  v33 = v41;
  v31(v32, v41);
  v31((uint64_t)v8, v33);
  (*(void (**)(char *, uint64_t))(v38 + 8))(v16, v39);
  return v29;
}

id ActivitySummaryQueryOperation.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void ActivitySummaryQueryOperation.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void sub_1BCA488E4()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t sub_1BCA48910()
{
  uint64_t v0;

  swift_release();

  return sub_1BC9B3A38(v0 + qword_1ED6C5DB8, &qword_1ED6C5F20, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF2118]);
}

id ActivitySummaryQueryOperation.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_1BCA489B4(uint64_t a1)
{
  swift_release();

  return sub_1BC9B3A38(a1 + qword_1ED6C5DB8, &qword_1ED6C5F20, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF2118]);
}

uint64_t sub_1BCA48A30@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  uint64_t v3;
  char v4;

  swift_retain();
  sub_1BCAB5070();
  result = swift_release();
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  return result;
}

uint64_t sub_1BCA48A8C(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  uint64_t v5;
  void (*v7)(id, uint64_t, void *);
  id v8;
  id v9;

  v5 = a3;
  v7 = *(void (**)(id, uint64_t, void *))(a1 + 32);
  if (a3)
  {
    sub_1BCA47690();
    v5 = sub_1BCAB6018();
  }
  swift_retain();
  v8 = a2;
  v9 = a4;
  v7(v8, v5, a4);
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1BCA48B1C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t);
  uint64_t result;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t, uint64_t);
  uint64_t v32;

  v2 = sub_1BCAB4F68();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v27 - v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (v9)
  {
    sub_1BCA48E70();
    v10 = sub_1BCAB64B0();
    v11 = 0;
    v12 = *(unsigned __int8 *)(v3 + 80);
    v28 = v9;
    v29 = a1 + ((v12 + 32) & ~v12);
    v13 = *(_QWORD *)(v3 + 72);
    v31 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    v32 = v10 + 56;
    while (1)
    {
      v30 = v11;
      v31(v8, v29 + v13 * v11, v2);
      sub_1BCA48EE0(&qword_1ED6C5BF8, MEMORY[0x1E0CB11D0]);
      v14 = sub_1BCAB5E8C();
      v15 = ~(-1 << *(_BYTE *)(v10 + 32));
      v16 = v14 & v15;
      v17 = (v14 & (unint64_t)v15) >> 6;
      v18 = *(_QWORD *)(v32 + 8 * v17);
      v19 = 1 << (v14 & v15);
      if ((v19 & v18) != 0)
      {
        do
        {
          v31(v5, *(_QWORD *)(v10 + 48) + v16 * v13, v2);
          sub_1BCA48EE0(&qword_1ED6C5C00, MEMORY[0x1E0CB11D8]);
          v20 = sub_1BCAB5ED4();
          v21 = v3;
          v22 = *(void (**)(char *, uint64_t))(v3 + 8);
          v22(v5, v2);
          if ((v20 & 1) != 0)
          {
            v22(v8, v2);
            v3 = v21;
            v9 = v28;
            goto LABEL_4;
          }
          v16 = (v16 + 1) & v15;
          v17 = v16 >> 6;
          v18 = *(_QWORD *)(v32 + 8 * (v16 >> 6));
          v19 = 1 << v16;
          v3 = v21;
        }
        while ((v18 & (1 << v16)) != 0);
        v9 = v28;
      }
      *(_QWORD *)(v32 + 8 * v17) = v19 | v18;
      result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v10 + 48) + v16 * v13, v8, v2);
      v24 = *(_QWORD *)(v10 + 16);
      v25 = __OFADD__(v24, 1);
      v26 = v24 + 1;
      if (v25)
        break;
      *(_QWORD *)(v10 + 16) = v26;
LABEL_4:
      v11 = v30 + 1;
      if (v30 + 1 == v9)
        return v10;
    }
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E0DEE9E8];
  }
  return result;
}

void sub_1BCA48D78()
{
  unint64_t v0;

  sub_1BC998AB0(319, &qword_1ED6C5F20, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF2118], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  if (v0 <= 0x3F)
    swift_initClassMetadata2();
}

uint64_t method lookup function for ActivitySummaryQueryOperation()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ActivitySummaryQueryOperation.__allocating_init(predicate:orderedAscending:limit:name:queryQualityOfService:healthStore:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(class metadata base offset for ActivitySummaryQueryOperation + v0 + 64))();
}

uint64_t sub_1BCA48E68()
{
  return type metadata accessor for ActivitySummaryQueryOperation();
}

void sub_1BCA48E70()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED6C5F48)
  {
    sub_1BCAB4F68();
    sub_1BCA48EE0(&qword_1ED6C5BF8, MEMORY[0x1E0CB11D0]);
    v0 = sub_1BCAB64BC();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED6C5F48);
  }
}

uint64_t sub_1BCA48EE0(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = sub_1BCAB4F68();
    result = MEMORY[0x1BCCFBE84](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1BCA48F20(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1BC998AB0(0, &qword_1ED6C7280, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1BCA48F7C()
{
  uint64_t v0;

  return swift_deallocObject();
}

void sub_1BCA48FA0(int a1, void *a2, unint64_t a3)
{
  uint64_t v3;

  sub_1BCA48228(a1, a2, a3, *(id *)(v3 + 16));
}

void sub_1BCA48FA8()
{
  uint64_t v0;

  sub_1BCA48418(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24), *(_BYTE *)(v0 + 32));
}

uint64_t sub_1BCA48FB4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1BC998AB0(0, &qword_1ED6C5F20, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF2118], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1BCA49010(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1BC998AB0(0, &qword_1ED6C5F20, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF2118], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t AFibBurdenPDFHistogramSectionProvider.__allocating_init(headerProviders:footerProviders:healthStore:logger:analysisBlock:renderableFactory:)(uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14;

  v14 = swift_allocObject();
  AFibBurdenPDFHistogramSectionProvider.init(headerProviders:footerProviders:healthStore:logger:analysisBlock:renderableFactory:)(a1, a2, a3, a4, a5, a6, a7);
  return v14;
}

char *AFibBurdenPDFHistogramSectionProvider.init(headerProviders:footerProviders:healthStore:logger:analysisBlock:renderableFactory:)(uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  char *v7;
  char *v8;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, void *, uint64_t, __n128);
  char *v25;
  void (*v26)(void *, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  _QWORD *v31;
  uint64_t (*v32)(uint64_t, uint64_t);
  void (*v33)(id, uint64_t);
  uint64_t v35;
  char *v36;
  id v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  _UNKNOWN **v43;

  v8 = v7;
  v16 = sub_1BCAB5514();
  MEMORY[0x1E0C80A78](v16);
  v36 = (char *)&v35 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x1E0C80A78](v18);
  v21 = (char *)&v35 - v20;
  *((_QWORD *)v8 + 2) = a1;
  *((_QWORD *)v8 + 3) = a2;
  v23 = v22;
  v37 = a3;
  *((_QWORD *)v8 + 4) = a3;
  v24 = *(void (**)(char *, void *, uint64_t, __n128))(v22 + 16);
  v24(&v8[OBJC_IVAR____TtC19HealthVisualization37AFibBurdenPDFHistogramSectionProvider_logger], a4, v16, v19);
  v25 = &v8[OBJC_IVAR____TtC19HealthVisualization37AFibBurdenPDFHistogramSectionProvider_analysisBlock];
  *(_QWORD *)v25 = a5;
  *((_QWORD *)v25 + 1) = a6;
  v38 = a6;
  sub_1BCA49368(a7, (uint64_t)&v39);
  ((void (*)(char *, void *, uint64_t))v24)(v21, a4, v16);
  if (v40)
  {
    sub_1BCA4B5D0(a7, &qword_1EF479AF8, &qword_1EF479B00, (uint64_t)&protocol descriptor for AFibBurdenPDFHistogramRenderableFactoryProxy, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    v26 = *(void (**)(void *, uint64_t))(v23 + 8);
    v26(a4, v16);
    v26(v21, v16);
    sub_1BC9C42A4(&v39, (uint64_t)&v41);
  }
  else
  {
    v27 = (uint64_t)v36;
    ((void (*)(char *, char *, uint64_t))v24)(v36, v21, v16);
    v28 = type metadata accessor for AFibBurdenPDFHistogramRenderableFactory();
    swift_allocObject();
    v35 = a7;
    v29 = v23;
    v30 = v37;
    v37 = a4;
    swift_retain();
    v31 = sub_1BC9C2054(v30, v27);
    v42 = v28;
    v43 = &protocol witness table for AFibBurdenPDFHistogramRenderableFactory;

    swift_release();
    *(_QWORD *)&v41 = v31;
    v32 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
    sub_1BCA4B5D0(v35, &qword_1EF479AF8, &qword_1EF479B00, (uint64_t)&protocol descriptor for AFibBurdenPDFHistogramRenderableFactoryProxy, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    v33 = *(void (**)(id, uint64_t))(v29 + 8);
    v33(v37, v16);
    v33(v21, v16);
    sub_1BCA4B5D0((uint64_t)&v39, &qword_1EF479AF8, &qword_1EF479B00, (uint64_t)&protocol descriptor for AFibBurdenPDFHistogramRenderableFactoryProxy, v32);
  }
  sub_1BC9C42A4(&v41, (uint64_t)&v8[OBJC_IVAR____TtC19HealthVisualization37AFibBurdenPDFHistogramSectionProvider_renderableFactory]);
  return v8;
}

uint64_t sub_1BCA49368(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1BCA4B60C(0, &qword_1EF479AF8, &qword_1EF479B00, (uint64_t)&protocol descriptor for AFibBurdenPDFHistogramRenderableFactoryProxy, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t AFibBurdenPDFHistogramSectionProvider.pdfSection.getter(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[41] = a1;
  v2[42] = v1;
  v2[43] = *v1;
  sub_1BC9AFF04(0, (unint64_t *)&unk_1EF479B18, (void (*)(uint64_t))MEMORY[0x1E0D2A8D0]);
  v2[44] = swift_task_alloc();
  v3 = type metadata accessor for TimeBasedDistribution();
  v2[45] = v3;
  v2[46] = *(_QWORD *)(v3 - 8);
  v2[47] = swift_task_alloc();
  v2[48] = swift_task_alloc();
  sub_1BC9AFF04(0, (unint64_t *)&qword_1EF4787D8, (void (*)(uint64_t))type metadata accessor for TimeBasedDistribution);
  v2[49] = swift_task_alloc();
  v2[50] = swift_task_alloc();
  v2[51] = swift_task_alloc();
  v2[52] = swift_task_alloc();
  v2[53] = type metadata accessor for AFibBurdenDistributionAnalysis.Result();
  v2[54] = swift_task_alloc();
  v2[55] = swift_task_alloc();
  v4 = sub_1BCAB53F4();
  v2[56] = v4;
  v2[57] = *(_QWORD *)(v4 - 8);
  v2[58] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1BCA4952C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  void *v4;
  NSObject *v6;
  os_log_type_t v7;
  _BOOL4 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20[3];

  v1 = *MEMORY[0x1E0CB4FF8];
  v2 = *(_QWORD *)(*(_QWORD *)(v0 + 336) + 32);
  *(_QWORD *)(v0 + 472) = v2;
  v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB6730]), sel_initWithFeatureIdentifier_healthStore_, v1, v2);
  *(_QWORD *)(v0 + 480) = v3;
  sub_1BCA4B3C4();
  sub_1BCAB543C();
  v4 = (void *)sub_1BCAB5400();
  LODWORD(v2) = objc_msgSend(v4, sel_areAllRequirementsSatisfied);

  if ((_DWORD)v2)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 456) + 8))(*(_QWORD *)(v0 + 464), *(_QWORD *)(v0 + 448));
    *(_QWORD *)(v0 + 488) = OBJC_IVAR____TtC19HealthVisualization37AFibBurdenPDFHistogramSectionProvider_logger;
    return swift_task_switch();
  }
  else
  {
    v6 = sub_1BCAB54FC();
    v7 = sub_1BCAB61BC();
    v8 = os_log_type_enabled(v6, v7);
    v10 = *(_QWORD *)(v0 + 456);
    v9 = *(_QWORD *)(v0 + 464);
    v11 = *(_QWORD *)(v0 + 448);
    if (v8)
    {
      v12 = *(_QWORD *)(v0 + 344);
      v19 = *(_QWORD *)(v0 + 464);
      v13 = (uint8_t *)swift_slowAlloc();
      v14 = swift_slowAlloc();
      v20[0] = v14;
      *(_DWORD *)v13 = 136446210;
      v20[2] = v12;
      swift_getMetatypeMetadata();
      v15 = sub_1BCAB5F28();
      *(_QWORD *)(v0 + 240) = sub_1BC99BD4C(v15, v16, v20);
      sub_1BCAB63A8();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1BC989000, v6, v7, "[%{public}s] Not all requirements satisfied for highlight generation, not including in PDF", v13, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BCCFBF5C](v14, -1, -1);
      MEMORY[0x1BCCFBF5C](v13, -1, -1);

      (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v19, v11);
    }
    else
    {

      (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
    }
    v17 = *(_QWORD *)(v0 + 328);
    v18 = sub_1BCAB510C();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v17, 1, 1, v18);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1BCA49A14()
{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = (void *)v0[59];
  v2 = v0[43];
  v3 = v0[42] + v0[61];
  v0[7] = v0 + 31;
  v0[2] = v0;
  v0[3] = sub_1BCA49A88;
  v4 = swift_continuation_init();
  sub_1BCA4AAA8(v4, v3, v1, v2);
  return swift_continuation_await();
}

uint64_t sub_1BCA49A88()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 48);
  *(_QWORD *)(*v0 + 496) = v2;
  if (v2)
    swift_willThrow();
  else
    *(_QWORD *)(v1 + 504) = *(_QWORD *)(v1 + 248);
  return swift_task_switch();
}

uint64_t sub_1BCA49AFC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  NSObject *v11;
  os_log_type_t v12;
  _BOOL4 v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28[2];

  v2 = *(_QWORD *)(v0 + 432);
  v1 = *(_QWORD *)(v0 + 440);
  v3 = *(_QWORD *)(v0 + 416);
  v4 = *(_QWORD *)(v0 + 360);
  v5 = *(_QWORD *)(v0 + 368);
  (*(void (**)(_QWORD))(*(_QWORD *)(v0 + 336)
                                 + OBJC_IVAR____TtC19HealthVisualization37AFibBurdenPDFHistogramSectionProvider_analysisBlock))(*(_QWORD *)(v0 + 504));
  sub_1BC9D616C(v1, v3);
  v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  *(_QWORD *)(v0 + 512) = v6;
  LODWORD(v4) = v6(v3, 1, v4);
  sub_1BCA4B400(v3);
  sub_1BCA4B44C(v1, v2);
  v7 = *(_QWORD *)(v0 + 432);
  if ((_DWORD)v4 != 1)
  {
    sub_1BC997208(*(_QWORD *)(v0 + 432), (uint64_t (*)(_QWORD))type metadata accessor for AFibBurdenDistributionAnalysis.Result);
    goto LABEL_6;
  }
  v8 = *(_QWORD *)(v0 + 408);
  v9 = *(_QWORD *)(v0 + 360);
  sub_1BC9D616C(v7 + *(int *)(*(_QWORD *)(v0 + 424) + 20), v8);
  sub_1BC997208(v7, (uint64_t (*)(_QWORD))type metadata accessor for AFibBurdenDistributionAnalysis.Result);
  v10 = v6(v8, 1, v9);
  sub_1BCA4B400(v8);
  if (v10 != 1)
  {
LABEL_6:
    v23 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 520) = v23;
    *v23 = v0;
    v23[1] = sub_1BCA49F10;
    return sub_1BCAB603C();
  }
  v11 = sub_1BCAB54FC();
  v12 = sub_1BCAB61BC();
  v13 = os_log_type_enabled(v11, v12);
  v14 = *(void **)(v0 + 504);
  v15 = *(void **)(v0 + 480);
  v16 = *(_QWORD *)(v0 + 440);
  if (v13)
  {
    v17 = *(_QWORD *)(v0 + 344);
    v27 = *(_QWORD *)(v0 + 440);
    v18 = (uint8_t *)swift_slowAlloc();
    v19 = swift_slowAlloc();
    v28[0] = v19;
    v28[1] = v17;
    *(_DWORD *)v18 = 136446210;
    swift_getMetatypeMetadata();
    v20 = sub_1BCAB5F28();
    *(_QWORD *)(v0 + 320) = sub_1BC99BD4C(v20, v21, v28);
    sub_1BCAB63A8();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1BC989000, v11, v12, "[%{public}s] No histograms present after analysis, omitting section", v18, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BCCFBF5C](v19, -1, -1);
    MEMORY[0x1BCCFBF5C](v18, -1, -1);

    v22 = v27;
  }
  else
  {

    v22 = v16;
  }
  sub_1BC997208(v22, (uint64_t (*)(_QWORD))type metadata accessor for AFibBurdenDistributionAnalysis.Result);
  v25 = *(_QWORD *)(v0 + 328);
  v26 = sub_1BCAB510C();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v25, 1, 1, v26);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1BCA49E50()
{
  uint64_t v0;

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1BCA49F10(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(*v2 + 528) = v1;
  swift_task_dealloc();
  if (!v1)
    *(_QWORD *)(v4 + 536) = a1;
  return swift_task_switch();
}

uint64_t sub_1BCA49F84()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 544) = v1;
  *v1 = v0;
  v1[1] = sub_1BCA49FD8;
  return sub_1BCAB603C();
}

uint64_t sub_1BCA49FD8(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(*v2 + 552) = v1;
  swift_task_dealloc();
  if (v1)
    swift_bridgeObjectRelease();
  else
    *(_QWORD *)(v4 + 560) = a1;
  return swift_task_switch();
}

uint64_t sub_1BCA4A064()
{
  uint64_t v0;
  uint8_t *v1;
  uint64_t v2;
  __int128 *v3;
  uint64_t (*v4)(uint64_t, uint64_t, __int128 *);
  uint64_t v5;
  __int128 *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  _BOOL4 v20;
  uint64_t v21;
  uint64_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(uint64_t, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  _BOOL4 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  NSObject *v60;
  os_log_type_t v61;
  _BOOL4 v62;
  void *v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint8_t *v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;

  v2 = v0 + 296;
  v3 = (__int128 *)(v0 + 304);
  v4 = *(uint64_t (**)(uint64_t, uint64_t, __int128 *))(v0 + 512);
  v5 = *(_QWORD *)(v0 + 400);
  v6 = *(__int128 **)(v0 + 360);
  v78 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  sub_1BC9D616C(*(_QWORD *)(v0 + 440), v5);
  v7 = v4(v5, 1, v6);
  v8 = *(_QWORD *)(v0 + 400);
  if (v7 != 1)
  {
    sub_1BCA4B490(v8, *(_QWORD *)(v0 + 384));
    if (!TimeBasedDistribution.containsEnoughInformationToBeShownToUser.getter())
    {
      v18 = sub_1BCAB54FC();
      v19 = sub_1BCAB61BC();
      v20 = os_log_type_enabled(v18, v19);
      v21 = *(_QWORD *)(v0 + 384);
      if (v20)
      {
        v74 = *(_QWORD *)(v0 + 384);
        v22 = *(_QWORD *)(v0 + 344);
        v6 = (__int128 *)(v0 + 304);
        v23 = (uint8_t *)swift_slowAlloc();
        v24 = swift_slowAlloc();
        v80 = v24;
        *(_DWORD *)v23 = 136446210;
        v1 = v23 + 12;
        *(_QWORD *)(v0 + 304) = v22;
        swift_getMetatypeMetadata();
        v25 = sub_1BCAB5F28();
        *(_QWORD *)(v0 + 312) = sub_1BC99BD4C(v25, v26, &v80);
        v3 = (__int128 *)(v0 + 304);
        sub_1BCAB63A8();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1BC989000, v18, v19, "[%{public}s] Not including time of day histogram as it does not contain enough information", v23, 0xCu);
        swift_arrayDestroy();
        v27 = v24;
        v2 = v0 + 296;
        MEMORY[0x1BCCFBF5C](v27, -1, -1);
        MEMORY[0x1BCCFBF5C](v23, -1, -1);

        v17 = v74;
      }
      else
      {

        v17 = v21;
      }
      goto LABEL_9;
    }
    v6 = (__int128 *)(v0 + 80);
    v9 = *(_QWORD *)(v0 + 384);
    v10 = (_QWORD *)(*(_QWORD *)(v0 + 336)
                   + OBJC_IVAR____TtC19HealthVisualization37AFibBurdenPDFHistogramSectionProvider_renderableFactory);
    v11 = v10[3];
    v12 = v10[4];
    __swift_project_boxed_opaque_existential_1(v10, v11);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 8))(v9, v11, v12);
    v13 = sub_1BC9DA6D4(0, 1, 1, MEMORY[0x1E0DEE9D8]);
    v15 = v13[2];
    v14 = v13[3];
    v1 = (uint8_t *)(v15 + 1);
    if (v15 >= v14 >> 1)
      goto LABEL_34;
    goto LABEL_5;
  }
  sub_1BCA4B400(v8);
  while (1)
  {
    v28 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 512);
    v29 = *(_QWORD *)(v0 + 392);
    v30 = *(_QWORD *)(v0 + 360);
    sub_1BC9D616C(*(_QWORD *)(v0 + 440) + *(int *)(*(_QWORD *)(v0 + 424) + 20), v29);
    v31 = v28(v29, 1, v30);
    v32 = *(_QWORD *)(v0 + 392);
    if (v31 == 1)
    {
      sub_1BCA4B400(v32);
      goto LABEL_23;
    }
    sub_1BCA4B490(v32, *(_QWORD *)(v0 + 376));
    if (TimeBasedDistribution.containsEnoughInformationToBeShownToUser.getter())
    {
      v3 = (__int128 *)(v0 + 120);
      v33 = *(_QWORD *)(v0 + 376);
      v34 = (_QWORD *)(*(_QWORD *)(v0 + 336)
                     + OBJC_IVAR____TtC19HealthVisualization37AFibBurdenPDFHistogramSectionProvider_renderableFactory);
      v35 = v34[3];
      v36 = v34[4];
      __swift_project_boxed_opaque_existential_1(v34, v35);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v36 + 8))(v33, v35, v36);
      v37 = v78;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v37 = sub_1BC9DA6D4(0, v78[2] + 1, 1, v78);
      v39 = v37[2];
      v38 = v37[3];
      v6 = (__int128 *)(v39 + 1);
      if (v39 >= v38 >> 1)
        v37 = sub_1BC9DA6D4((_QWORD *)(v38 > 1), v39 + 1, 1, v37);
      v40 = *(_QWORD *)(v0 + 376);
      v37[2] = v6;
      sub_1BC9C42A4((__int128 *)(v0 + 120), (uint64_t)&v37[5 * v39 + 4]);
      v78 = v37;
      goto LABEL_21;
    }
    v41 = sub_1BCAB54FC();
    v42 = sub_1BCAB61BC();
    v43 = os_log_type_enabled(v41, v42);
    v40 = *(_QWORD *)(v0 + 376);
    if (!v43)
    {

LABEL_21:
      v49 = v40;
      goto LABEL_22;
    }
    v75 = *(_QWORD *)(v0 + 376);
    v44 = *(_QWORD *)(v0 + 344);
    v1 = (uint8_t *)swift_slowAlloc();
    v76 = v2;
    v45 = swift_slowAlloc();
    v80 = v45;
    v6 = v3;
    *(_DWORD *)v1 = 136446210;
    v3 = (__int128 *)(v1 + 12);
    *(_QWORD *)(v0 + 264) = v44;
    swift_getMetatypeMetadata();
    v46 = sub_1BCAB5F28();
    *(_QWORD *)(v0 + 296) = sub_1BC99BD4C(v46, v47, &v80);
    sub_1BCAB63A8();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1BC989000, v41, v42, "[%{public}s] Not including day of week histogram as it does not contain enough information", v1, 0xCu);
    swift_arrayDestroy();
    v48 = v45;
    v2 = v76;
    MEMORY[0x1BCCFBF5C](v48, -1, -1);
    MEMORY[0x1BCCFBF5C](v1, -1, -1);

    v49 = v75;
LABEL_22:
    sub_1BC997208(v49, (uint64_t (*)(_QWORD))type metadata accessor for TimeBasedDistribution);
LABEL_23:
    v13 = v78;
    v50 = v78[2];
    if (!v50)
      break;
    if (v50 != 2)
      goto LABEL_27;
    v15 = v0 + 200;
    v51 = sub_1BCAB5178();
    v52 = MEMORY[0x1E0D2AA78];
    *(_QWORD *)(v0 + 224) = v51;
    *(_QWORD *)(v0 + 232) = v52;
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v0 + 200));
    sub_1BCAB516C();
    v14 = v78[2];
    if (v14)
    {
      sub_1BC9C42A4((__int128 *)(v0 + 200), v0 + 160);
      sub_1BCA4B1F4(1, 1, v0 + 160);
LABEL_27:
      v53 = *(void **)(v0 + 504);
      v54 = *(void **)(v0 + 480);
      v55 = *(_QWORD *)(v0 + 440);
      v56 = *(_QWORD *)(v0 + 352);
      v57 = *(_QWORD *)(v0 + 328);
      sub_1BCAB50E8();
      v58 = sub_1BCAB50F4();
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v58 - 8) + 56))(v56, 0, 1, v58);
      sub_1BCAB5100();

      sub_1BC997208(v55, (uint64_t (*)(_QWORD))type metadata accessor for AFibBurdenDistributionAnalysis.Result);
      v59 = sub_1BCAB510C();
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v59 - 8) + 56))(v57, 0, 1, v59);
      goto LABEL_32;
    }
    __break(1u);
LABEL_34:
    v13 = sub_1BC9DA6D4((_QWORD *)(v14 > 1), (int64_t)v1, 1, v13);
LABEL_5:
    v16 = *(_QWORD *)(v0 + 384);
    v13[2] = v1;
    sub_1BC9C42A4(v6, (uint64_t)&v13[5 * v15 + 4]);
    v78 = v13;
    v17 = v16;
LABEL_9:
    sub_1BC997208(v17, (uint64_t (*)(_QWORD))type metadata accessor for TimeBasedDistribution);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v60 = sub_1BCAB54FC();
  v61 = sub_1BCAB61BC();
  v62 = os_log_type_enabled(v60, v61);
  v63 = *(void **)(v0 + 504);
  v64 = *(void **)(v0 + 480);
  v65 = *(_QWORD *)(v0 + 440);
  if (v62)
  {
    v66 = *(_QWORD *)(v0 + 344);
    v77 = *(void **)(v0 + 480);
    v67 = (uint8_t *)swift_slowAlloc();
    v68 = swift_slowAlloc();
    v79 = v68;
    v80 = v66;
    *(_DWORD *)v67 = 136446210;
    swift_getMetatypeMetadata();
    v69 = sub_1BCAB5F28();
    *(_QWORD *)(v0 + 288) = sub_1BC99BD4C(v69, v70, &v79);
    sub_1BCAB63A8();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1BC989000, v60, v61, "[%{public}s] Both histograms excluded, excluding entire page", v67, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1BCCFBF5C](v68, -1, -1);
    MEMORY[0x1BCCFBF5C](v67, -1, -1);

  }
  else
  {

  }
  sub_1BC997208(v65, (uint64_t (*)(_QWORD))type metadata accessor for AFibBurdenDistributionAnalysis.Result);
  v71 = *(_QWORD *)(v0 + 328);
  v72 = sub_1BCAB510C();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v72 - 8) + 56))(v71, 1, 1, v72);
LABEL_32:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1BCA4A8F0()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;

  v1 = *(void **)(v0 + 480);
  v2 = *(_QWORD *)(v0 + 440);

  sub_1BC997208(v2, (uint64_t (*)(_QWORD))type metadata accessor for AFibBurdenDistributionAnalysis.Result);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1BCA4A9CC()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;

  v1 = *(void **)(v0 + 480);
  v2 = *(_QWORD *)(v0 + 440);

  sub_1BC997208(v2, (uint64_t (*)(_QWORD))type metadata accessor for AFibBurdenDistributionAnalysis.Result);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1BCA4AAA8(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  char *v15;
  void (*v16)(char *, uint64_t, uint64_t, __n128);
  unint64_t v17;
  uint64_t v18;
  id v19;
  void *v20;
  id v21;
  _QWORD aBlock[6];

  v8 = sub_1BCAB5514();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)aBlock - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x1E0C80A78](v12);
  v15 = (char *)aBlock - v14;
  v16 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v9 + 16);
  v16((char *)aBlock - v14, a2, v8, v13);
  ((void (*)(char *, char *, uint64_t))v16)(v11, v15, v8);
  v17 = (*(unsigned __int8 *)(v9 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v18 = swift_allocObject();
  *(_QWORD *)(v18 + 16) = a1;
  (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))(v18 + v17, v11, v8);
  *(_QWORD *)(v18 + ((v10 + v17 + 7) & 0xFFFFFFFFFFFFFFF8)) = a4;
  v19 = objc_allocWithZone(MEMORY[0x1E0D2FB98]);
  aBlock[4] = sub_1BCA4B6D8;
  aBlock[5] = v18;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1BC9F3B04;
  aBlock[3] = &block_descriptor_11;
  v20 = _Block_copy(aBlock);
  v21 = objc_msgSend(v19, sel_initWithResultsHandler_, v20);
  _Block_release(v20);
  swift_release();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v15, v8);
  objc_msgSend(a3, sel_executeQuery_, v21);

}

uint64_t sub_1BCA4AC60(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v7;
  id v8;
  id v10;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;

  if (a3)
  {
    sub_1BC9A7F58(0, (unint64_t *)&qword_1ED6C6F70);
    swift_allocError();
    *v7 = a3;
    v8 = a3;
    return swift_continuation_throwingResumeWithError();
  }
  else if (a2)
  {
    **(_QWORD **)(*(_QWORD *)(a4 + 64) + 40) = a2;
    v10 = a2;
    return swift_continuation_throwingResume();
  }
  else
  {
    v12 = sub_1BCAB54FC();
    v13 = sub_1BCAB61B0();
    if (os_log_type_enabled(v12, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc();
      v15 = swift_slowAlloc();
      v21 = v15;
      v22 = a6;
      *(_DWORD *)v14 = 136446210;
      swift_getMetatypeMetadata();
      v16 = sub_1BCAB5F28();
      v22 = sub_1BC99BD4C(v16, v17, &v21);
      sub_1BCAB63A8();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1BC989000, v12, v13, "[%{public}s] No error but did not receive results as expected", v14, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BCCFBF5C](v15, -1, -1);
      MEMORY[0x1BCCFBF5C](v14, -1, -1);
    }

    sub_1BCA4B744();
    v18 = swift_allocError();
    *v19 = 1;
    sub_1BC9A7F58(0, (unint64_t *)&qword_1ED6C6F70);
    swift_allocError();
    *v20 = v18;
    return swift_continuation_throwingResumeWithError();
  }
}

uint64_t AFibBurdenPDFHistogramSectionProvider.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  v1 = v0 + OBJC_IVAR____TtC19HealthVisualization37AFibBurdenPDFHistogramSectionProvider_logger;
  v2 = sub_1BCAB5514();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + OBJC_IVAR____TtC19HealthVisualization37AFibBurdenPDFHistogramSectionProvider_renderableFactory);
  return v0;
}

uint64_t AFibBurdenPDFHistogramSectionProvider.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  v1 = v0 + OBJC_IVAR____TtC19HealthVisualization37AFibBurdenPDFHistogramSectionProvider_logger;
  v2 = sub_1BCAB5514();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + OBJC_IVAR____TtC19HealthVisualization37AFibBurdenPDFHistogramSectionProvider_renderableFactory);
  return swift_deallocClassInstance();
}

uint64_t sub_1BCA4AFC4(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_1BCA4B018;
  return AFibBurdenPDFHistogramSectionProvider.pdfSection.getter(a1);
}

uint64_t sub_1BCA4B018()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

char *sub_1BCA4B060(uint64_t a1, int64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v5;
  int64_t v6;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v13;
  uint64_t v14;
  char *result;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  char *v19;
  size_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v5 = *(_QWORD **)v3;
  v6 = *(_QWORD *)(*(_QWORD *)v3 + 16);
  if (v6 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v8 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v9 = 1 - v8;
  if (__OFSUB__(1, v8))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v10 = v6 + v9;
  if (__OFADD__(v6, v9))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v10 > v5[3] >> 1)
  {
    if (v6 <= v10)
      v13 = v6 + v9;
    else
      v13 = v6;
    v5 = sub_1BC9D9B7C(isUniquelyReferenced_nonNull_native, v13, 1, v5);
  }
  v14 = (uint64_t)&v5[5 * a1 + 4];
  result = (char *)swift_arrayDestroy();
  if (!v9)
    goto LABEL_20;
  v16 = v5[2];
  v17 = __OFSUB__(v16, a2);
  v18 = v16 - a2;
  if (v17)
    goto LABEL_26;
  if ((v18 & 0x8000000000000000) == 0)
  {
    result = (char *)(v14 + 40);
    v19 = (char *)&v5[5 * a2 + 4];
    v20 = 40 * v18;
    if ((char *)(v14 + 40) != v19 || result >= &v19[v20])
      result = (char *)memmove(result, v19, v20);
    v21 = v5[2];
    v17 = __OFADD__(v21, v9);
    v22 = v21 + v9;
    if (!v17)
    {
      v5[2] = v22;
LABEL_20:
      v23 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)v14 = *(_OWORD *)a3;
      *(_OWORD *)(v14 + 16) = v23;
      *(_DWORD *)(v14 + 32) = *(_DWORD *)(a3 + 32);
      *(_QWORD *)v3 = v5;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  result = (char *)sub_1BCAB6624();
  __break(1u);
  return result;
}

uint64_t sub_1BCA4B1F4(uint64_t a1, int64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v5;
  int64_t v6;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v5 = *(_QWORD **)v3;
  v6 = *(_QWORD *)(*(_QWORD *)v3 + 16);
  if (v6 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v8 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v9 = 1 - v8;
  if (__OFSUB__(1, v8))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v10 = v6 + v9;
  if (__OFADD__(v6, v9))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)v3 = v5;
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v10 > v5[3] >> 1)
  {
    if (v6 <= v10)
      v13 = v6 + v9;
    else
      v13 = v6;
    v5 = sub_1BC9DA6D4(isUniquelyReferenced_nonNull_native, v13, 1, v5);
    *(_QWORD *)v3 = v5;
  }
  v14 = (uint64_t)&v5[5 * a1 + 4];
  sub_1BC9A7F58(0, (unint64_t *)&qword_1EF478400);
  swift_arrayDestroy();
  if (!v9)
    goto LABEL_20;
  v15 = v5[2];
  v16 = __OFSUB__(v15, a2);
  v17 = v15 - a2;
  if (v16)
    goto LABEL_26;
  if ((v17 & 0x8000000000000000) == 0)
  {
    v18 = (char *)(v14 + 40);
    v19 = (char *)&v5[5 * a2 + 4];
    if ((char *)(v14 + 40) != v19 || v18 >= &v19[40 * v17])
      memmove(v18, v19, 40 * v17);
    v20 = v5[2];
    v16 = __OFADD__(v20, v9);
    v21 = v20 + v9;
    if (!v16)
    {
      v5[2] = v21;
LABEL_20:
      sub_1BC9C2428(a3, v14);
      return sub_1BCA4B5D0(a3, &qword_1EF479C00, (unint64_t *)&qword_1EF478400, MEMORY[0x1E0D2AA50], MEMORY[0x1E0DEC628]);
    }
    goto LABEL_27;
  }
LABEL_28:
  result = sub_1BCAB6624();
  __break(1u);
  return result;
}

unint64_t sub_1BCA4B3C4()
{
  unint64_t result;

  result = qword_1ED6C4658;
  if (!qword_1ED6C4658)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1ED6C4658);
  }
  return result;
}

uint64_t sub_1BCA4B400(uint64_t a1)
{
  uint64_t v2;

  sub_1BC9AFF04(0, (unint64_t *)&qword_1EF4787D8, (void (*)(uint64_t))type metadata accessor for TimeBasedDistribution);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1BCA4B44C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AFibBurdenDistributionAnalysis.Result();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1BCA4B490(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for TimeBasedDistribution();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1BCA4B4D4()
{
  return type metadata accessor for AFibBurdenPDFHistogramSectionProvider();
}

uint64_t type metadata accessor for AFibBurdenPDFHistogramSectionProvider()
{
  uint64_t result;

  result = qword_1EF479B50;
  if (!qword_1EF479B50)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_1BCA4B518()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1BCAB5514();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for AFibBurdenPDFHistogramSectionProvider()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of AFibBurdenPDFHistogramSectionProvider.__allocating_init(headerProviders:footerProviders:healthStore:logger:analysisBlock:renderableFactory:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t sub_1BCA4B5D0(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t v6;

  sub_1BCA4B60C(0, a2, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1, v6);
  return a1;
}

void sub_1BCA4B60C(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    v8 = sub_1BC9A7F58(255, a3);
    v9 = a5(a1, v8);
    if (!v10)
      atomic_store(v9, a2);
  }
}

uint64_t sub_1BCA4B66C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_1BCAB5514();
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
  return swift_deallocObject();
}

uint64_t sub_1BCA4B6D8(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3;
  uint64_t v7;
  unint64_t v8;

  v7 = *(_QWORD *)(sub_1BCAB5514() - 8);
  v8 = (*(unsigned __int8 *)(v7 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  return sub_1BCA4AC60(a1, a2, a3, *(_QWORD *)(v3 + 16), v3 + v8, *(_QWORD *)(v3 + ((*(_QWORD *)(v7 + 64) + v8 + 7) & 0xFFFFFFFFFFFFF8)));
}

unint64_t sub_1BCA4B744()
{
  unint64_t result;

  result = qword_1EF479C08;
  if (!qword_1EF479C08)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCAC5B30, &type metadata for AFibBurdenPDFHistogramSectionProvider.Errors);
    atomic_store(result, (unint64_t *)&qword_1EF479C08);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for AFibBurdenPDFHistogramSectionProvider.Errors(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1BCA4B7D4 + 4 * byte_1BCAC5A25[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1BCA4B808 + 4 * byte_1BCAC5A20[v4]))();
}

uint64_t sub_1BCA4B808(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BCA4B810(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BCA4B818);
  return result;
}

uint64_t sub_1BCA4B824(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BCA4B82CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1BCA4B830(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BCA4B838(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AFibBurdenPDFHistogramSectionProvider.Errors()
{
  return &type metadata for AFibBurdenPDFHistogramSectionProvider.Errors;
}

unint64_t sub_1BCA4B858()
{
  unint64_t result;

  result = qword_1EF479C10;
  if (!qword_1EF479C10)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCAC5B08, &type metadata for AFibBurdenPDFHistogramSectionProvider.Errors);
    atomic_store(result, (unint64_t *)&qword_1EF479C10);
  }
  return result;
}

uint64_t DayOfWeekDistributionChartView.init(distribution:model:)@<X0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;

  sub_1BC9964B8(a1, a3, (uint64_t (*)(_QWORD))type metadata accessor for TimeBasedDistribution);
  v6 = sub_1BC9C3170(a1, a2);
  sub_1BC997208(a1, (uint64_t (*)(_QWORD))type metadata accessor for TimeBasedDistribution);
  v7 = type metadata accessor for DayOfWeekDistributionChartView();
  *(_QWORD *)(a3 + *(int *)(v7 + 20)) = v6;
  return sub_1BC9B3E64((uint64_t)a2, a3 + *(int *)(v7 + 24));
}

uint64_t type metadata accessor for DayOfWeekDistributionChartView()
{
  uint64_t result;

  result = qword_1EF479C78;
  if (!qword_1EF479C78)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t DayOfWeekDistributionChartView.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v2 = v1;
  v4 = type metadata accessor for AFibBurdenDayOfWeekChart();
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (uint64_t)&v6[*(int *)(v7 + 28)];
  sub_1BC9964B8(v2, v8, (uint64_t (*)(_QWORD))type metadata accessor for TimeBasedDistribution);
  v9 = v2 + *(int *)(type metadata accessor for DayOfWeekDistributionChartView() + 24);
  v10 = (unsigned __int8 *)&v6[*(int *)(v4 + 32)];
  sub_1BC9964B8(v9, (uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for TimeBasedDistributionChartModel);
  v11 = v9 + *(int *)(type metadata accessor for TimeBasedDistributionChartModel() + 24);
  v12 = *(_QWORD *)(v11 + *(int *)(type metadata accessor for TimeBasedDistributionChartDesign() + 72));
  *(_QWORD *)v6 = 0;
  v6[8] = 1;
  *((_QWORD *)v6 + 2) = v12;
  *((_WORD *)v6 + 12) = 0;
  sub_1BCA1B584(v8, v10, 0, a1);
  return sub_1BC997208((uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for AFibBurdenDayOfWeekChart);
}

uint64_t sub_1BCA4BA68@<X0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;

  sub_1BC9964B8(a1, a4, (uint64_t (*)(_QWORD))type metadata accessor for TimeBasedDistribution);
  v8 = sub_1BC9C3170(a1, a2);
  sub_1BC997208(a1, (uint64_t (*)(_QWORD))type metadata accessor for TimeBasedDistribution);
  v9 = *(int *)(a3 + 24);
  *(_QWORD *)(a4 + *(int *)(a3 + 20)) = v8;
  return sub_1BC9B3E64((uint64_t)a2, a4 + v9);
}

uint64_t sub_1BCA4BAE0(uint64_t a1)
{
  uint64_t result;

  result = sub_1BC996948(&qword_1EF479C18, (uint64_t (*)(uint64_t))type metadata accessor for DayOfWeekDistributionChartView, (uint64_t)&protocol conformance descriptor for DayOfWeekDistributionChartView);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1BCA4BB1C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1BCA4BB2C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v4 = v2;
  v6 = type metadata accessor for AFibBurdenDayOfWeekChart();
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (uint64_t)&v8[*(int *)(v9 + 28)];
  sub_1BC9964B8(v4, v10, (uint64_t (*)(_QWORD))type metadata accessor for TimeBasedDistribution);
  v11 = v4 + *(int *)(a1 + 24);
  v12 = (unsigned __int8 *)&v8[*(int *)(v6 + 32)];
  sub_1BC9964B8(v11, (uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for TimeBasedDistributionChartModel);
  v13 = v11 + *(int *)(type metadata accessor for TimeBasedDistributionChartModel() + 24);
  v14 = *(_QWORD *)(v13 + *(int *)(type metadata accessor for TimeBasedDistributionChartDesign() + 72));
  *(_QWORD *)v8 = 0;
  v8[8] = 1;
  *((_QWORD *)v8 + 2) = v14;
  *((_WORD *)v8 + 12) = 0;
  sub_1BCA1B584(v10, v12, 0, a2);
  return sub_1BC997208((uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for AFibBurdenDayOfWeekChart);
}

uint64_t getEnumTagSinglePayload for DayOfWeekDistributionChartView()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BCA4BC4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  unint64_t v11;

  v6 = type metadata accessor for TimeBasedDistribution();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v8 = type metadata accessor for TimeBasedDistributionChartModel();
    v10 = a1 + *(int *)(a3 + 24);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
    return v9(v10, a2, v8);
  }
  v11 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v11 >= 0xFFFFFFFF)
    LODWORD(v11) = -1;
  return (v11 + 1);
}

uint64_t storeEnumTagSinglePayload for DayOfWeekDistributionChartView()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BCA4BD00(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  result = type metadata accessor for TimeBasedDistribution();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
      return result;
    }
    v10 = type metadata accessor for TimeBasedDistributionChartModel();
    v12 = a1 + *(int *)(a4 + 24);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t TimeBasedDistribution.Bucket.init(componentRange:value:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  char v5;
  char v6;
  uint64_t v7;

  v4 = *a3;
  v5 = *((_BYTE *)a3 + 8);
  v6 = *((_BYTE *)a3 + 9);
  v7 = a3[2];
  *(_QWORD *)a4 = result;
  *(_QWORD *)(a4 + 8) = a2;
  *(_QWORD *)(a4 + 16) = v4;
  *(_BYTE *)(a4 + 24) = v5;
  *(_BYTE *)(a4 + 25) = v6;
  *(_QWORD *)(a4 + 32) = v7;
  return result;
}

uint64_t TimeBasedDistribution.init(component:buckets:unitString:minimumComponentInterval:maximumComponentInterval:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v29 = a3;
  v13 = sub_1BCAB5514();
  v30 = *(_QWORD *)(v13 - 8);
  v31 = v13;
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for TimeBasedDistribution();
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16);
  v19 = (char *)&v28 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((sub_1BCA4D4D8(a2, a5, a6) & 1) != 0)
  {
    v20 = sub_1BCAB4F68();
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v19, a1, v20);
    *(_QWORD *)&v19[*(int *)(v16 + 20)] = a2;
    v21 = &v19[*(int *)(v16 + 24)];
    *(_QWORD *)v21 = v29;
    *((_QWORD *)v21 + 1) = a4;
    sub_1BCA4B490((uint64_t)v19, a7);
    v22 = 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1BCAB54B4();
    v23 = sub_1BCAB54FC();
    v24 = sub_1BCAB61B0();
    if (os_log_type_enabled(v23, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v25 = 0;
      _os_log_impl(&dword_1BC989000, v23, v24, "[TimeBasedDistribution] Attempted to create invalid distribution", v25, 2u);
      MEMORY[0x1BCCFBF5C](v25, -1, -1);
    }

    v26 = sub_1BCAB4F68();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 8))(a1, v26);
    (*(void (**)(char *, uint64_t))(v30 + 8))(v15, v31);
    v22 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v17 + 56))(a7, v22, 1, v16);
}

uint64_t type metadata accessor for TimeBasedDistribution()
{
  uint64_t result;

  result = qword_1ED6C6380;
  if (!qword_1ED6C6380)
    return swift_getSingletonMetadata();
  return result;
}

HealthVisualization::TimeBasedDistribution::DistributionValue __swiftcall TimeBasedDistribution.DistributionValue.init(value:isMax:customTags:)(Swift::Double_optional value, Swift::Bool isMax, Swift::OpaquePointer customTags)
{
  uint64_t v3;
  uint64_t v4;
  HealthVisualization::TimeBasedDistribution::DistributionValue result;

  *(_QWORD *)v4 = *(_QWORD *)&value.is_nil;
  *(_BYTE *)(v4 + 8) = isMax;
  *(_BYTE *)(v4 + 9) = customTags._rawValue;
  *(_QWORD *)(v4 + 16) = v3;
  result.value.value = value.value;
  result.value.is_nil = value.is_nil;
  LOBYTE(result.customTags._rawValue) = isMax;
  return result;
}

BOOL TimeBasedDistribution.containsEnoughInformationToBeShownToUser.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  unint64_t v11;
  __int128 v13;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for TimeBasedDistribution() + 20));
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    swift_bridgeObjectRetain();
    v3 = (_QWORD *)(v1 + 64);
    v4 = MEMORY[0x1E0DEE9D8];
    do
    {
      if ((*(_BYTE *)(v3 - 1) & 1) == 0)
      {
        v13 = *((_OWORD *)v3 - 2);
        v8 = *(v3 - 2);
        v9 = *((_BYTE *)v3 - 7);
        v10 = *v3;
        swift_bridgeObjectRetain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          sub_1BC9BACDC(0, *(_QWORD *)(v4 + 16) + 1, 1);
        v6 = *(_QWORD *)(v4 + 16);
        v5 = *(_QWORD *)(v4 + 24);
        if (v6 >= v5 >> 1)
          sub_1BC9BACDC(v5 > 1, v6 + 1, 1);
        *(_QWORD *)(v4 + 16) = v6 + 1;
        v7 = v4 + 40 * v6;
        *(_OWORD *)(v7 + 32) = v13;
        *(_QWORD *)(v7 + 48) = v8;
        *(_BYTE *)(v7 + 56) = 0;
        *(_BYTE *)(v7 + 57) = v9;
        *(_QWORD *)(v7 + 64) = v10;
      }
      v3 += 5;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease();
  }
  else
  {
    v4 = MEMORY[0x1E0DEE9D8];
  }
  v11 = *(_QWORD *)(v4 + 16);
  swift_release();
  return v11 > 2;
}

uint64_t sub_1BCA4C164(uint64_t a1)
{
  return sub_1BCA4C1B8(a1, qword_1EF479CB8, MEMORY[0x1E0CB1140]);
}

uint64_t static TimeBasedDistribution.Constants.TimeOfDay.calendarComponent.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1BCA4C22C(&qword_1EF477CA8, (uint64_t)qword_1EF479CB8, a1);
}

uint64_t static TimeBasedDistribution.Constants.TimeOfDay.minimumComponentInterval.getter()
{
  return 0;
}

uint64_t static TimeBasedDistribution.Constants.TimeOfDay.maximumComponentInterval.getter()
{
  return 24;
}

uint64_t sub_1BCA4C1A4(uint64_t a1)
{
  return sub_1BCA4C1B8(a1, qword_1EF479CD0, MEMORY[0x1E0CB1198]);
}

uint64_t sub_1BCA4C1B8(uint64_t a1, uint64_t *a2, unsigned int *a3)
{
  uint64_t v5;
  uint64_t v6;

  v5 = sub_1BCAB4F68();
  __swift_allocate_value_buffer(v5, a2);
  v6 = __swift_project_value_buffer(v5, (uint64_t)a2);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(v6, *a3, v5);
}

uint64_t static TimeBasedDistribution.Constants.DayOfWeek.calendarComponent.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1BCA4C22C(&qword_1EF477CB0, (uint64_t)qword_1EF479CD0, a1);
}

uint64_t sub_1BCA4C22C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;

  if (*a1 != -1)
    swift_once();
  v5 = sub_1BCAB4F68();
  v6 = __swift_project_value_buffer(v5, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a3, v6, v5);
}

uint64_t static TimeBasedDistribution.Constants.DayOfWeek.minimumComponentInterval.getter()
{
  return 0;
}

uint64_t static TimeBasedDistribution.Constants.DayOfWeek.maximumComponentInterval.getter()
{
  return 7;
}

uint64_t TimeBasedDistribution.DistributionValue.value.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t TimeBasedDistribution.DistributionValue.isMax.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 9);
}

uint64_t TimeBasedDistribution.DistributionValue.customTags.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1BCA4C2C4()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x78614D7369;
  if (*v0 != 1)
    v1 = 0x61546D6F74737563;
  if (*v0)
    return v1;
  else
    return 0x65756C6176;
}

uint64_t sub_1BCA4C31C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1BCA4E568(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1BCA4C340()
{
  sub_1BCA4D648();
  return sub_1BCAB68D0();
}

uint64_t sub_1BCA4C368()
{
  sub_1BCA4D648();
  return sub_1BCAB68DC();
}

uint64_t TimeBasedDistribution.DistributionValue.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  char v19;
  char v20;
  char v21;

  sub_1BC9ACE04(0, &qword_1EF479CE8, (uint64_t (*)(void))sub_1BCA4D648, (uint64_t)&type metadata for TimeBasedDistribution.DistributionValue.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v14 - v5;
  v18 = *(unsigned __int8 *)(v1 + 9);
  v15 = *(_QWORD *)(v1 + 16);
  v7 = a1[3];
  v8 = a1;
  v10 = v9;
  __swift_project_boxed_opaque_existential_1(v8, v7);
  sub_1BCA4D648();
  sub_1BCAB68B8();
  v21 = 0;
  v11 = v16;
  sub_1BCAB6720();
  if (!v11)
  {
    v12 = v15;
    v20 = 1;
    sub_1BCAB6750();
    v17 = v12;
    v19 = 2;
    sub_1BC9ACD0C(0, (unint64_t *)&qword_1ED6C6E10);
    sub_1BCA4D68C(&qword_1ED6C45C8, MEMORY[0x1E0DEA970], MEMORY[0x1E0DEAF10]);
    sub_1BCAB6774();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v10);
}

uint64_t TimeBasedDistribution.DistributionValue.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t v15;
  _QWORD v16[2];
  int v17;
  char v18;
  char v19;
  char v20;

  v16[0] = a2;
  sub_1BC9ACE04(0, &qword_1EF479CF8, (uint64_t (*)(void))sub_1BCA4D648, (uint64_t)&type metadata for TimeBasedDistribution.DistributionValue.CodingKeys, MEMORY[0x1E0DED048]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v8 = (char *)v16 - v7;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BCA4D648();
  sub_1BCAB68AC();
  if (!v2)
  {
    v9 = v6;
    v10 = v16[0];
    v20 = 0;
    v11 = sub_1BCAB6690();
    v13 = v12;
    v19 = 1;
    v17 = sub_1BCAB66C0();
    sub_1BC9ACD0C(0, (unint64_t *)&qword_1ED6C6E10);
    v18 = 2;
    sub_1BCA4D68C(&qword_1ED6C6E18, MEMORY[0x1E0DEA9A0], MEMORY[0x1E0DEAF40]);
    sub_1BCAB66E4();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v8, v5);
    v15 = v16[1];
    *(_QWORD *)v10 = v11;
    *(_BYTE *)(v10 + 8) = v13 & 1;
    *(_BYTE *)(v10 + 9) = v17 & 1;
    *(_QWORD *)(v10 + 16) = v15;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_1BCA4C74C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return TimeBasedDistribution.DistributionValue.init(from:)(a1, a2);
}

uint64_t sub_1BCA4C760(_QWORD *a1)
{
  return TimeBasedDistribution.DistributionValue.encode(to:)(a1);
}

uint64_t TimeBasedDistribution.Bucket.componentRange.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t TimeBasedDistribution.Bucket.value.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;
  char v3;
  uint64_t v4;

  v2 = *(_BYTE *)(v1 + 24);
  v3 = *(_BYTE *)(v1 + 25);
  v4 = *(_QWORD *)(v1 + 32);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 16);
  *(_BYTE *)(a1 + 8) = v2;
  *(_BYTE *)(a1 + 9) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  return swift_bridgeObjectRetain();
}

uint64_t sub_1BCA4C7A8()
{
  _BYTE *v0;

  if (*v0)
    return 0x65756C6176;
  else
    return 0x6E656E6F706D6F63;
}

uint64_t sub_1BCA4C7EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1BCA4E6B8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1BCA4C810()
{
  sub_1BCA4D6F8();
  return sub_1BCAB68D0();
}

uint64_t sub_1BCA4C838()
{
  sub_1BCA4D6F8();
  return sub_1BCAB68DC();
}

uint64_t TimeBasedDistribution.Bucket.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  char v21;

  sub_1BC9ACE04(0, &qword_1EF479D00, (uint64_t (*)(void))sub_1BCA4D6F8, (uint64_t)&type metadata for TimeBasedDistribution.Bucket.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v7 = (char *)&v12 - v6;
  v8 = *v1;
  v9 = v1[1];
  v15 = v1[2];
  v20 = *((unsigned __int8 *)v1 + 24);
  v14 = *((unsigned __int8 *)v1 + 25);
  v13 = v1[4];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BCA4D6F8();
  sub_1BCAB68B8();
  v17 = v8;
  v18 = v9;
  v21 = 0;
  sub_1BC9BD3F8();
  sub_1BCA4D73C(&qword_1EF479D10, MEMORY[0x1E0DEB420], MEMORY[0x1E0DEB880]);
  v10 = v16;
  sub_1BCAB6774();
  if (!v10)
  {
    v17 = v15;
    LOBYTE(v18) = v20;
    BYTE1(v18) = v14;
    v19 = v13;
    v21 = 1;
    sub_1BCA4D798();
    sub_1BCAB6774();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t TimeBasedDistribution.Bucket.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  char v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;

  v18 = a2;
  sub_1BC9ACE04(0, &qword_1EF479D20, (uint64_t (*)(void))sub_1BCA4D6F8, (uint64_t)&type metadata for TimeBasedDistribution.Bucket.CodingKeys, MEMORY[0x1E0DED048]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v18 - v7;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BCA4D6F8();
  sub_1BCAB68AC();
  if (!v2)
  {
    v9 = v6;
    v10 = v18;
    sub_1BC9BD3F8();
    v22 = 0;
    sub_1BCA4D73C(&qword_1EF479D28, MEMORY[0x1E0DEB448], MEMORY[0x1E0DEB8B0]);
    sub_1BCAB66E4();
    v11 = v19;
    v12 = v20;
    v22 = 1;
    sub_1BCA4D7DC();
    sub_1BCAB66E4();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v8, v5);
    v14 = v19;
    v15 = v20;
    v16 = BYTE1(v20);
    v17 = v21;
    *(_QWORD *)v10 = v11;
    *(_QWORD *)(v10 + 8) = v12;
    *(_QWORD *)(v10 + 16) = v14;
    *(_BYTE *)(v10 + 24) = v15;
    *(_BYTE *)(v10 + 25) = v16;
    *(_QWORD *)(v10 + 32) = v17;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_1BCA4CBF4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return TimeBasedDistribution.Bucket.init(from:)(a1, a2);
}

uint64_t sub_1BCA4CC08(_QWORD *a1)
{
  return TimeBasedDistribution.Bucket.encode(to:)(a1);
}

uint64_t TimeBasedDistribution.component.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_1BCAB4F68();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t TimeBasedDistribution.buckets.getter()
{
  type metadata accessor for TimeBasedDistribution();
  return swift_bridgeObjectRetain();
}

uint64_t TimeBasedDistribution.unitString.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for TimeBasedDistribution() + 24));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_1BCA4CCB8()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x7374656B637562;
  if (*v0 != 1)
    v1 = 0x6972745374696E75;
  if (*v0)
    return v1;
  else
    return 0x6E656E6F706D6F63;
}

uint64_t sub_1BCA4CD1C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1BCA4E7C4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1BCA4CD40()
{
  sub_1BCA4D820();
  return sub_1BCAB68D0();
}

uint64_t sub_1BCA4CD68()
{
  sub_1BCA4D820();
  return sub_1BCAB68DC();
}

uint64_t TimeBasedDistribution.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  _QWORD v11[2];
  char v12;
  char v13;
  char v14;

  v3 = v1;
  sub_1BC9ACE04(0, &qword_1EF479D38, (uint64_t (*)(void))sub_1BCA4D820, (uint64_t)&type metadata for TimeBasedDistribution.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v9 = (char *)v11 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BCA4D820();
  sub_1BCAB68B8();
  v14 = 0;
  sub_1BCAB4F68();
  sub_1BCA48EE0(&qword_1EF479D48, (uint64_t)&protocol conformance descriptor for Calendar.Component);
  sub_1BCAB6774();
  if (!v2)
  {
    v11[1] = *(_QWORD *)(v3 + *(int *)(type metadata accessor for TimeBasedDistribution() + 20));
    v13 = 1;
    sub_1BC9ACD0C(0, &qword_1EF479D50);
    sub_1BCA4D8A8(&qword_1EF479D58, (uint64_t (*)(void))sub_1BCA4D864, MEMORY[0x1E0DEAF10]);
    sub_1BCAB6774();
    v12 = 2;
    sub_1BCAB6744();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t TimeBasedDistribution.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  char v31;
  char v32;

  v22 = a2;
  v23 = sub_1BCAB4F68();
  v26 = *(_QWORD *)(v23 - 8);
  MEMORY[0x1E0C80A78](v23);
  v24 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BC9ACE04(0, &qword_1EF479D68, (uint64_t (*)(void))sub_1BCA4D820, (uint64_t)&type metadata for TimeBasedDistribution.CodingKeys, MEMORY[0x1E0DED048]);
  v25 = v4;
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v22 - v6;
  v8 = type metadata accessor for TimeBasedDistribution();
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BCA4D820();
  v27 = v7;
  v11 = v28;
  sub_1BCAB68AC();
  if (v11)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v28 = v8;
  v12 = v26;
  v32 = 0;
  sub_1BCA48EE0(&qword_1EF479D70, (uint64_t)&protocol conformance descriptor for Calendar.Component);
  v14 = v23;
  v13 = v24;
  sub_1BCAB66E4();
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v10, v13, v14);
  sub_1BC9ACD0C(0, &qword_1EF479D50);
  v31 = 1;
  sub_1BCA4D8A8(&qword_1EF479D78, (uint64_t (*)(void))sub_1BCA4D91C, MEMORY[0x1E0DEAF40]);
  sub_1BCAB66E4();
  v15 = v28;
  *(_QWORD *)&v10[*(int *)(v28 + 20)] = v29;
  v30 = 2;
  v16 = sub_1BCAB66B4();
  v17 = *(void (**)(char *, uint64_t))(v5 + 8);
  v19 = v18;
  v17(v27, v25);
  v20 = (uint64_t *)&v10[*(int *)(v15 + 24)];
  *v20 = v16;
  v20[1] = v19;
  sub_1BC9DC7A0((uint64_t)v10, v22);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return sub_1BC9D8A7C((uint64_t)v10);
}

uint64_t sub_1BCA4D298@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return TimeBasedDistribution.init(from:)(a1, a2);
}

uint64_t sub_1BCA4D2AC(_QWORD *a1)
{
  return TimeBasedDistribution.encode(to:)(a1);
}

uint64_t static Range<>.TimeOfDay.midnightToFourAM.getter()
{
  return 0;
}

uint64_t static Range<>.TimeOfDay.fourAMToEightAM.getter()
{
  return 4;
}

uint64_t static Range<>.TimeOfDay.eightAMToNoon.getter()
{
  return 8;
}

uint64_t static Range<>.TimeOfDay.noonToFourPM.getter()
{
  return 12;
}

uint64_t static Range<>.TimeOfDay.fourPMToEightPM.getter()
{
  return 16;
}

uint64_t static Range<>.TimeOfDay.eightPMToMidnight.getter()
{
  return 20;
}

uint64_t static Range<>.DayOfWeek.sunday.getter()
{
  return 0;
}

uint64_t static Range<>.DayOfWeek.monday.getter()
{
  return 1;
}

uint64_t static Range<>.DayOfWeek.tuesday.getter()
{
  return 2;
}

uint64_t static Range<>.DayOfWeek.wednesday.getter()
{
  return 3;
}

uint64_t static Range<>.DayOfWeek.thursday.getter()
{
  return 4;
}

uint64_t static Range<>.DayOfWeek.friday.getter()
{
  return 5;
}

uint64_t static Range<>.DayOfWeek.saturday.getter()
{
  return 6;
}

uint64_t _s19HealthVisualization21TimeBasedDistributionV0E5ValueV2eeoiySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  char v4;
  int v5;
  _QWORD *v6;
  int v7;
  int v8;
  _QWORD *v9;

  v4 = *(_BYTE *)(a1 + 8);
  v5 = *(unsigned __int8 *)(a1 + 9);
  v6 = *(_QWORD **)(a1 + 16);
  v7 = *(unsigned __int8 *)(a2 + 8);
  v8 = *(unsigned __int8 *)(a2 + 9);
  v9 = *(_QWORD **)(a2 + 16);
  if ((v4 & 1) != 0)
  {
    if (!v7)
      return 0;
  }
  else if ((v7 & 1) != 0 || *(double *)a1 != *(double *)a2)
  {
    return 0;
  }
  if (((v5 ^ v8) & 1) == 0)
    return sub_1BC9A8CF4(v6, v9);
  return 0;
}

BOOL _s19HealthVisualization21TimeBasedDistributionV6BucketV2eeoiySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;
  int v5;
  int v6;
  _QWORD *v7;

  result = 0;
  if (*(_QWORD *)a1 == *(_QWORD *)a2 && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8))
  {
    v5 = *(unsigned __int8 *)(a2 + 24);
    v6 = *(unsigned __int8 *)(a2 + 25);
    v7 = *(_QWORD **)(a2 + 32);
    if ((*(_BYTE *)(a1 + 24) & 1) != 0)
    {
      if (!v5)
        return 0;
    }
    else if ((v5 & 1) != 0 || *(double *)(a1 + 16) != *(double *)(a2 + 16))
    {
      return 0;
    }
    return ((*(unsigned __int8 *)(a1 + 25) ^ v6) & 1) == 0 && (sub_1BC9A8CF4(*(_QWORD **)(a1 + 32), v7) & 1) != 0;
  }
  return result;
}

uint64_t _s19HealthVisualization21TimeBasedDistributionV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  if ((sub_1BCAB4F5C() & 1) == 0)
    return 0;
  v4 = type metadata accessor for TimeBasedDistribution();
  if ((sub_1BC9A8B60(*(_QWORD *)(a1 + *(int *)(v4 + 20)), *(_QWORD *)(a2 + *(int *)(v4 + 20))) & 1) == 0)
    return 0;
  v5 = *(int *)(v4 + 24);
  v6 = *(_QWORD *)(a1 + v5);
  v7 = *(_QWORD *)(a1 + v5 + 8);
  v8 = (_QWORD *)(a2 + v5);
  if (v6 == *v8 && v7 == v8[1])
    return 1;
  else
    return sub_1BCAB67C8();
}

uint64_t sub_1BCA4D4D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t result;
  __int128 *v8;
  unint64_t v9;
  unint64_t v10;
  __int128 v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  int v20;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;

  v4 = a2;
  v5 = *(_QWORD *)(a1 + 16);
  if (v5)
  {
    v23 = MEMORY[0x1E0DEE9D8];
    sub_1BC9BAD4C(0, v5, 0);
    result = v23;
    v8 = (__int128 *)(a1 + 32);
    v9 = *(_QWORD *)(v23 + 16);
    v10 = v5;
    do
    {
      v11 = *v8;
      v24 = result;
      v12 = *(_QWORD *)(result + 24);
      v13 = v9 + 1;
      if (v9 >= v12 >> 1)
      {
        v22 = *v8;
        sub_1BC9BAD4C(v12 > 1, v9 + 1, 1);
        v11 = v22;
        result = v24;
      }
      *(_QWORD *)(result + 16) = v13;
      *(_OWORD *)(result + 16 * v9 + 32) = v11;
      v8 = (__int128 *)((char *)v8 + 40);
      ++v9;
      --v10;
    }
    while (v10);
    if (v4 < a3)
    {
      v14 = 0;
      v15 = v13 - 1;
      do
      {
        if (v14 > v15)
        {
          __break(1u);
          return result;
        }
        v16 = (uint64_t *)(result + 32 + 16 * v14);
        v18 = *v16;
        v17 = v16[1];
        v19 = v4 >= v18 && v4 < v17;
        v20 = !v19;
        if (!v19)
          ++v14;
        v4 += v20 ^ 1u;
      }
      while (v4 < a3 && v14 < v5);
      if (v4 == a3)
        goto LABEL_27;
      goto LABEL_28;
    }
  }
  else
  {
    result = MEMORY[0x1E0DEE9D8];
    if (a2 < a3)
    {
LABEL_28:
      swift_bridgeObjectRelease();
      return 0;
    }
  }
  if (v4 != a3)
    goto LABEL_28;
  v14 = 0;
  v15 = *(_QWORD *)(result + 16) - 1;
LABEL_27:
  swift_bridgeObjectRelease();
  return v14 == v15;
}

unint64_t sub_1BCA4D648()
{
  unint64_t result;

  result = qword_1EF479CF0;
  if (!qword_1EF479CF0)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCAC6114, &type metadata for TimeBasedDistribution.DistributionValue.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF479CF0);
  }
  return result;
}

uint64_t sub_1BCA4D68C(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    sub_1BC9ACD0C(255, (unint64_t *)&qword_1ED6C6E10);
    v8 = a2;
    result = MEMORY[0x1BCCFBE84](a3, v7, &v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1BCA4D6F8()
{
  unint64_t result;

  result = qword_1EF479D08;
  if (!qword_1EF479D08)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCAC60C4, &type metadata for TimeBasedDistribution.Bucket.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF479D08);
  }
  return result;
}

uint64_t sub_1BCA4D73C(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    sub_1BC9BD3F8();
    v8 = a2;
    result = MEMORY[0x1BCCFBE84](a3, v7, &v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1BCA4D798()
{
  unint64_t result;

  result = qword_1EF479D18;
  if (!qword_1EF479D18)
  {
    result = MEMORY[0x1BCCFBE84](&protocol conformance descriptor for TimeBasedDistribution.DistributionValue, &type metadata for TimeBasedDistribution.DistributionValue);
    atomic_store(result, (unint64_t *)&qword_1EF479D18);
  }
  return result;
}

unint64_t sub_1BCA4D7DC()
{
  unint64_t result;

  result = qword_1EF479D30;
  if (!qword_1EF479D30)
  {
    result = MEMORY[0x1BCCFBE84](&protocol conformance descriptor for TimeBasedDistribution.DistributionValue, &type metadata for TimeBasedDistribution.DistributionValue);
    atomic_store(result, (unint64_t *)&qword_1EF479D30);
  }
  return result;
}

unint64_t sub_1BCA4D820()
{
  unint64_t result;

  result = qword_1EF479D40;
  if (!qword_1EF479D40)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCAC6074, &type metadata for TimeBasedDistribution.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF479D40);
  }
  return result;
}

unint64_t sub_1BCA4D864()
{
  unint64_t result;

  result = qword_1EF479D60;
  if (!qword_1EF479D60)
  {
    result = MEMORY[0x1BCCFBE84](&protocol conformance descriptor for TimeBasedDistribution.Bucket, &type metadata for TimeBasedDistribution.Bucket);
    atomic_store(result, (unint64_t *)&qword_1EF479D60);
  }
  return result;
}

uint64_t sub_1BCA4D8A8(unint64_t *a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = *a1;
  if (!result)
  {
    sub_1BC9ACD0C(255, &qword_1EF479D50);
    v8 = v7;
    v9 = a2();
    result = MEMORY[0x1BCCFBE84](a3, v8, &v9);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1BCA4D91C()
{
  unint64_t result;

  result = qword_1EF479D80[0];
  if (!qword_1EF479D80[0])
  {
    result = MEMORY[0x1BCCFBE84](&protocol conformance descriptor for TimeBasedDistribution.Bucket, &type metadata for TimeBasedDistribution.Bucket);
    atomic_store(result, qword_1EF479D80);
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for TimeBasedDistribution(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_1BCAB4F68();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 24);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
    v9 = (uint64_t *)((char *)a1 + v8);
    v10 = (uint64_t *)((char *)a2 + v8);
    v11 = v10[1];
    *v9 = *v10;
    v9[1] = v11;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for TimeBasedDistribution(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1BCAB4F68();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for TimeBasedDistribution(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;

  v6 = sub_1BCAB4F68();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 24);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  v10 = v9[1];
  *v8 = *v9;
  v8[1] = v10;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for TimeBasedDistribution(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;

  v6 = sub_1BCAB4F68();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v7 = *(int *)(a3 + 24);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  *v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for TimeBasedDistribution(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = sub_1BCAB4F68();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 24);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  return a1;
}

uint64_t assignWithTake for TimeBasedDistribution(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;

  v6 = sub_1BCAB4F68();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  swift_bridgeObjectRelease();
  v7 = *(int *)(a3 + 24);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v11 = *v9;
  v10 = v9[1];
  *v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for TimeBasedDistribution()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BCA4DC58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = sub_1BCAB4F68();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for TimeBasedDistribution()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BCA4DCE0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_1BCAB4F68();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

uint64_t sub_1BCA4DD58()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1BCAB4F68();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for TimeBasedDistribution.Constants()
{
  return &type metadata for TimeBasedDistribution.Constants;
}

ValueMetadata *type metadata accessor for TimeBasedDistribution.Constants.TimeOfDay()
{
  return &type metadata for TimeBasedDistribution.Constants.TimeOfDay;
}

ValueMetadata *type metadata accessor for TimeBasedDistribution.Constants.DayOfWeek()
{
  return &type metadata for TimeBasedDistribution.Constants.DayOfWeek;
}

uint64_t sub_1BCA4DE0C(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for TimeBasedDistribution.DistributionValue(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 9) = *((_BYTE *)a2 + 9);
  *(_QWORD *)(a1 + 16) = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for TimeBasedDistribution.DistributionValue(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_BYTE *)(a1 + 9) = *(_BYTE *)(a2 + 9);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for TimeBasedDistribution.DistributionValue(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TimeBasedDistribution.DistributionValue(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for TimeBasedDistribution.DistributionValue()
{
  return &type metadata for TimeBasedDistribution.DistributionValue;
}

uint64_t destroy for TimeBasedDistribution.Bucket()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for TimeBasedDistribution.Bucket(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for TimeBasedDistribution.Bucket(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v3 = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v3;
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for TimeBasedDistribution.Bucket(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for TimeBasedDistribution.Bucket(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TimeBasedDistribution.Bucket(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 32) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for TimeBasedDistribution.Bucket()
{
  return &type metadata for TimeBasedDistribution.Bucket;
}

uint64_t sub_1BCA4E114()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t type metadata accessor for Range<>.TimeOfDay(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Range<>.TimeOfDay);
}

uint64_t type metadata accessor for Range<>.DayOfWeek(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Range<>.DayOfWeek);
}

ValueMetadata *type metadata accessor for TimeBasedDistribution.CodingKeys()
{
  return &type metadata for TimeBasedDistribution.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for TimeBasedDistribution.Bucket.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1BCA4E194 + 4 * byte_1BCAC5C05[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1BCA4E1C8 + 4 * asc_1BCAC5C00[v4]))();
}

uint64_t sub_1BCA4E1C8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BCA4E1D0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BCA4E1D8);
  return result;
}

uint64_t sub_1BCA4E1E4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BCA4E1ECLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1BCA4E1F0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BCA4E1F8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TimeBasedDistribution.Bucket.CodingKeys()
{
  return &type metadata for TimeBasedDistribution.Bucket.CodingKeys;
}

uint64_t _s19HealthVisualization21TimeBasedDistributionV10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1BCA4E260 + 4 * byte_1BCAC5C0F[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1BCA4E294 + 4 * byte_1BCAC5C0A[v4]))();
}

uint64_t sub_1BCA4E294(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BCA4E29C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BCA4E2A4);
  return result;
}

uint64_t sub_1BCA4E2B0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BCA4E2B8);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1BCA4E2BC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BCA4E2C4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TimeBasedDistribution.DistributionValue.CodingKeys()
{
  return &type metadata for TimeBasedDistribution.DistributionValue.CodingKeys;
}

unint64_t sub_1BCA4E2E4()
{
  unint64_t result;

  result = qword_1EF479E88;
  if (!qword_1EF479E88)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCAC5EDC, &type metadata for TimeBasedDistribution.DistributionValue.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF479E88);
  }
  return result;
}

unint64_t sub_1BCA4E32C()
{
  unint64_t result;

  result = qword_1EF479E90;
  if (!qword_1EF479E90)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCAC5F94, &type metadata for TimeBasedDistribution.Bucket.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF479E90);
  }
  return result;
}

unint64_t sub_1BCA4E374()
{
  unint64_t result;

  result = qword_1EF479E98;
  if (!qword_1EF479E98)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCAC604C, &type metadata for TimeBasedDistribution.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF479E98);
  }
  return result;
}

unint64_t sub_1BCA4E3BC()
{
  unint64_t result;

  result = qword_1EF479EA0;
  if (!qword_1EF479EA0)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCAC5FBC, &type metadata for TimeBasedDistribution.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF479EA0);
  }
  return result;
}

unint64_t sub_1BCA4E404()
{
  unint64_t result;

  result = qword_1EF479EA8;
  if (!qword_1EF479EA8)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCAC5FE4, &type metadata for TimeBasedDistribution.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF479EA8);
  }
  return result;
}

unint64_t sub_1BCA4E44C()
{
  unint64_t result;

  result = qword_1EF479EB0;
  if (!qword_1EF479EB0)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCAC5F04, &type metadata for TimeBasedDistribution.Bucket.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF479EB0);
  }
  return result;
}

unint64_t sub_1BCA4E494()
{
  unint64_t result;

  result = qword_1EF479EB8;
  if (!qword_1EF479EB8)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCAC5F2C, &type metadata for TimeBasedDistribution.Bucket.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF479EB8);
  }
  return result;
}

unint64_t sub_1BCA4E4DC()
{
  unint64_t result;

  result = qword_1EF479EC0;
  if (!qword_1EF479EC0)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCAC5E4C, &type metadata for TimeBasedDistribution.DistributionValue.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF479EC0);
  }
  return result;
}

unint64_t sub_1BCA4E524()
{
  unint64_t result;

  result = qword_1EF479EC8;
  if (!qword_1EF479EC8)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCAC5E74, &type metadata for TimeBasedDistribution.DistributionValue.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF479EC8);
  }
  return result;
}

uint64_t sub_1BCA4E568(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x65756C6176 && a2 == 0xE500000000000000;
  if (v2 || (sub_1BCAB67C8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x78614D7369 && a2 == 0xE500000000000000 || (sub_1BCAB67C8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x61546D6F74737563 && a2 == 0xEA00000000007367)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_1BCAB67C8();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_1BCA4E6B8(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6E656E6F706D6F63 && a2 == 0xEE0065676E615274;
  if (v2 || (sub_1BCAB67C8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x65756C6176 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_1BCAB67C8();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_1BCA4E7C4(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6E656E6F706D6F63 && a2 == 0xE900000000000074;
  if (v2 || (sub_1BCAB67C8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7374656B637562 && a2 == 0xE700000000000000 || (sub_1BCAB67C8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6972745374696E75 && a2 == 0xEA0000000000676ELL)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_1BCAB67C8();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t PluginFeedItemsConsuming<>.consumePluginFeedItemResults()()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  id v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  unint64_t v18;
  id v19;
  void *v20;
  id v21;
  unint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t);
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  id v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  id v40;
  void *v41;
  id v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  unint64_t v52;
  unint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  _BYTE *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t *v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  id v66[2];
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t *v71;
  _QWORD *v72;
  uint64_t v73;
  _QWORD v74[3];
  char v75;
  id v76;
  __int128 v77;
  __int128 v78;
  uint64_t v79;

  sub_1BCA4F068();
  MEMORY[0x1E0C80A78](v1);
  v3 = (char *)v66 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BC9E5A88();
  v5 = v4;
  v73 = *((_QWORD *)v4 - 1);
  MEMORY[0x1E0C80A78](v4);
  v71 = (uint64_t *)((char *)v66 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v7);
  v72 = (id *)((char *)v66 - v8);
  *(_QWORD *)&v10 = MEMORY[0x1E0C80A78](v9).n128_u64[0];
  v67 = (uint64_t)v66 - v11;
  v12 = objc_msgSend(v0, sel_dependencies, v10);
  v13 = sub_1BC9E986C();
  v14 = sub_1BCAB6018();

  if (v14 >> 62)
  {
    swift_bridgeObjectRetain();
    result = sub_1BCAB65DC();
    v15 = result;
  }
  else
  {
    v15 = *(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
  }
  v70 = v13;
  v66[0] = v0;
  if (v15)
  {
    if (v15 < 1)
    {
      __break(1u);
      goto LABEL_52;
    }
    v69 = v15;
    v17 = 0;
    v18 = MEMORY[0x1E0DEE9D8];
    v68 = v14 & 0xC000000000000001;
    do
    {
      if (v68)
        v19 = (id)MEMORY[0x1BCCFB0D4](v17, v14);
      else
        v19 = *(id *)(v14 + 8 * v17 + 32);
      v20 = v19;
      v74[0] = v19;
      sub_1BC9A7F58(0, &qword_1ED6C6B28);
      v21 = v20;
      if (swift_dynamicCast())
      {
        v22 = v18;
        v23 = v5;
        v24 = *((_QWORD *)&v78 + 1);
        v25 = v79;
        __swift_project_boxed_opaque_existential_1(&v77, *((uint64_t *)&v78 + 1));
        v26 = *(void (**)(uint64_t, uint64_t))(v25 + 8);
        v27 = v24;
        v28 = v21;
        v29 = v73;
        v30 = v25;
        v5 = v23;
        v18 = v22;
        v26(v27, v30);
        (*(void (**)(char *, _QWORD, uint64_t, void *))(v29 + 56))(v3, 0, 1, v5);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v77);

      }
      else
      {
        v79 = 0;
        v77 = 0u;
        v78 = 0u;
        sub_1BCA31D2C((uint64_t)&v77, &qword_1ED6C6B30, &qword_1ED6C6B28);
        (*(void (**)(char *, uint64_t, uint64_t, void *))(v73 + 56))(v3, 1, 1, v5);

      }
      if ((*(unsigned int (**)(char *, uint64_t, void *))(v73 + 48))(v3, 1, v5) == 1)
      {
        sub_1BCA4F0BC((uint64_t)v3);
      }
      else
      {
        v31 = v67;
        sub_1BCA4F104((uint64_t)v3, v67);
        sub_1BCA4F104(v31, (uint64_t)v72);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v18 = sub_1BC9DA808(0, *(_QWORD *)(v18 + 16) + 1, 1, v18);
        v33 = *(_QWORD *)(v18 + 16);
        v32 = *(_QWORD *)(v18 + 24);
        if (v33 >= v32 >> 1)
          v18 = sub_1BC9DA808(v32 > 1, v33 + 1, 1, v18);
        *(_QWORD *)(v18 + 16) = v33 + 1;
        sub_1BCA4F104((uint64_t)v72, v18+ ((*(unsigned __int8 *)(v73 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v73 + 80))+ *(_QWORD *)(v73 + 72) * v33);
      }
      ++v17;
    }
    while (v69 != v17);
  }
  else
  {
    v18 = MEMORY[0x1E0DEE9D8];
  }
  swift_bridgeObjectRelease_n();
  v34 = objc_msgSend(v66[0], sel_dependencies);
  v35 = sub_1BCAB6018();

  if (v35 >> 62)
  {
    swift_bridgeObjectRetain();
    result = sub_1BCAB65DC();
    v36 = result;
  }
  else
  {
    v36 = *(_QWORD *)((v35 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
  }
  v66[1] = v5;
  v68 = v18;
  if (v36)
  {
    if (v36 >= 1)
    {
      v37 = 0;
      v72 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v38 = (unint64_t *)&unk_1ED6C6BC8;
      v39 = v35 & 0xC000000000000001;
      v69 = v35 & 0xC000000000000001;
      do
      {
        if (v39)
          v40 = (id)MEMORY[0x1BCCFB0D4](v37, v35);
        else
          v40 = *(id *)(v35 + 8 * v37 + 32);
        v41 = v40;
        v76 = v40;
        sub_1BC9A7F58(0, v38);
        v42 = v41;
        if ((swift_dynamicCast() & 1) != 0)
        {
          v43 = v36;
          v44 = v38;
          v45 = v35;
          v47 = *((_QWORD *)&v78 + 1);
          v46 = v79;
          __swift_project_boxed_opaque_existential_1(&v77, *((uint64_t *)&v78 + 1));
          (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v46 + 8))(v74, v47, v46);
          v48 = v74[0];
          v49 = v74[1];
          v50 = v74[2];
          v51 = v75;
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v77);

          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v72 = sub_1BC9DA82C(0, v72[2] + 1, 1, v72);
          v53 = v72[2];
          v52 = v72[3];
          if (v53 >= v52 >> 1)
            v72 = sub_1BC9DA82C((_QWORD *)(v52 > 1), v53 + 1, 1, v72);
          v54 = v72;
          v72[2] = v53 + 1;
          v55 = &v54[4 * v53];
          v55[4] = v48;
          v55[5] = v49;
          v55[6] = v50;
          *((_BYTE *)v55 + 56) = v51;
          v35 = v45;
          v38 = v44;
          v36 = v43;
          v39 = v69;
        }
        else
        {
          v79 = 0;
          v77 = 0u;
          v78 = 0u;
          sub_1BCA31D2C((uint64_t)&v77, &qword_1ED6C5E70, v38);

        }
        ++v37;
      }
      while (v36 != v37);
      goto LABEL_38;
    }
LABEL_52:
    __break(1u);
    return result;
  }
  v72 = (_QWORD *)MEMORY[0x1E0DEE9D8];
LABEL_38:
  swift_bridgeObjectRelease_n();
  *(_QWORD *)&v77 = MEMORY[0x1E0DEE9D8];
  v56 = v72[2];
  if (v56)
  {
    v57 = v72 + 7;
    do
    {
      v59 = *((_QWORD *)v57 - 3);
      if ((*v57 & 1) != 0)
      {
        v60 = *((_QWORD *)v57 - 2);
        v61 = *((_QWORD *)v57 - 1);
        v62 = v71;
        *v71 = v59;
        v62[1] = v60;
        v62[2] = v61;
        swift_storeEnumTagMultiPayload();
        v63 = v77;
        sub_1BCA4F0F8(v59, v60, v61, 1);
        sub_1BC9A8308(v59, v60, v61);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v63 = sub_1BC9DA808(0, *(_QWORD *)(v63 + 16) + 1, 1, v63);
        v65 = *(_QWORD *)(v63 + 16);
        v64 = *(_QWORD *)(v63 + 24);
        if (v65 >= v64 >> 1)
          v63 = sub_1BC9DA808(v64 > 1, v65 + 1, 1, v63);
        *(_QWORD *)(v63 + 16) = v65 + 1;
        sub_1BCA4F104((uint64_t)v71, v63+ ((*(unsigned __int8 *)(v73 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v73 + 80))+ *(_QWORD *)(v73 + 72) * v65);
        sub_1BCA4F148(v59, v60, v61, 1);
        *(_QWORD *)&v77 = v63;
      }
      else
      {
        v58 = swift_bridgeObjectRetain();
        sub_1BC9E4298(v58);
      }
      v57 += 32;
      --v56;
    }
    while (v56);
  }
  swift_bridgeObjectRelease();
  v74[0] = v68;
  sub_1BC9E4298(v77);
  return v74[0];
}

void sub_1BCA4F068()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED6C6F80)
  {
    sub_1BC9E5A88();
    v0 = sub_1BCAB6384();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED6C6F80);
  }
}

uint64_t sub_1BCA4F0BC(uint64_t a1)
{
  uint64_t v2;

  sub_1BCA4F068();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

id sub_1BCA4F0F8(uint64_t a1, uint64_t a2, unint64_t a3, char a4)
{
  if ((a4 & 1) != 0)
    return sub_1BC9A8308(a1, a2, a3);
  else
    return (id)swift_bridgeObjectRetain();
}

uint64_t sub_1BCA4F104(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1BC9E5A88();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_1BCA4F148(uint64_t a1, uint64_t a2, unint64_t a3, char a4)
{
  if ((a4 & 1) != 0)
    sub_1BCA41920(a1, a2, a3);
  else
    swift_bridgeObjectRelease();
}

uint64_t dispatch thunk of PluginFeedItemsConsuming.consumePluginFeedItemResults()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

void sub_1BCA4F15C()
{
  qword_1ED6D3960 = 0x4041800000000000;
}

void sub_1BCA4F170()
{
  qword_1ED6D3968 = 0x4008000000000000;
}

__n128 sub_1BCA4F180()
{
  __n128 result;

  __asm { FMOV            V0.2D, #2.0 }
  xmmword_1ED6D3790 = (__int128)result;
  *(__n128 *)&qword_1ED6D37A0 = result;
  return result;
}

uint64_t sub_1BCA4F268@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  sub_1BC998AB0(0, (unint64_t *)&qword_1ED6C5400, type metadata accessor for AXProjectionState, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v16 - v4;
  v6 = type metadata accessor for AXProjectionState(0);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = v1 + OBJC_IVAR____TtC19HealthVisualization24HighlightCalendarDayView_model;
  v11 = type metadata accessor for HighlightCalendarDayViewModel(0);
  sub_1BCA50B20(v10 + *(int *)(v11 + 52), (uint64_t)v5);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    sub_1BCA50B7C((uint64_t)v5);
    v12 = sub_1BCAB4E54();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(a1, 1, 1, v12);
  }
  else
  {
    sub_1BCA50BD0((uint64_t)v5, (uint64_t)v9);
    v14 = sub_1BCAB4E54();
    v15 = *(_QWORD *)(v14 - 8);
    (*(void (**)(uint64_t, char *, uint64_t))(v15 + 16))(a1, v9, v14);
    sub_1BC997208((uint64_t)v9, type metadata accessor for AXProjectionState);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v15 + 56))(a1, 0, 1, v14);
  }
}

void sub_1BCA4F678()
{
  char *v0;
  char *v1;
  char *v2;
  int v3;
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;

  v1 = v0;
  v2 = &v0[OBJC_IVAR____TtC19HealthVisualization24HighlightCalendarDayView_model];
  v3 = v2[48];
  if ((v3 - 1) < 4)
  {
    sub_1BC9D5A08(*((id *)v2 + 3), *((id *)v2 + 4), *((_QWORD *)v2 + 5), v3);
LABEL_3:
    sub_1BC9E72C0();
    v5 = v4;
    v6 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3990]), sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
    objc_msgSend(v6, sel_setTextAlignment_, 1);
    v7 = (void *)sub_1BCAB5EE0();
    objc_msgSend(v6, sel_setText_, v7);

    objc_msgSend(v6, sel_setTextColor_, v5);
    swift_bridgeObjectRelease();

    v8 = *(void **)&v1[OBJC_IVAR____TtC19HealthVisualization24HighlightCalendarDayView_dayLabel];
    *(_QWORD *)&v1[OBJC_IVAR____TtC19HealthVisualization24HighlightCalendarDayView_dayLabel] = v6;
    v9 = v6;

    objc_msgSend(v1, sel_addSubview_, v9);
    return;
  }
  if (v3 == 5)
    goto LABEL_3;
  sub_1BCAB65C4();
  __break(1u);
}

void sub_1BCA4F7FC(double a1)
{
  char *v1;
  void *v2;
  void *v3;
  void *v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  void *v14;
  id v15;

  v2 = *(void **)&v1[OBJC_IVAR____TtC19HealthVisualization24HighlightCalendarDayView_todayIndicatorLayer];
  if (v2)
  {
    v3 = v1;
    v5 = (void *)objc_opt_self();
    v6 = v2;
    v7 = objc_msgSend(v5, sel__currentTraitCollection);
    v8 = objc_msgSend(v3, sel_traitCollection);
    objc_msgSend(v5, sel__setCurrentTraitCollection_, v8);

    v9 = objc_msgSend((id)objc_opt_self(), sel_labelColor);
    v10 = objc_msgSend(v9, sel_colorWithAlphaComponent_, a1);

    v11 = objc_msgSend(v10, sel_CGColor);
    objc_msgSend(v6, sel_setBorderColor_, v11);

    objc_msgSend(v5, sel__setCurrentTraitCollection_, v7);
    v12 = objc_msgSend(v3, sel_traitCollection);
    objc_msgSend(v12, sel_userInterfaceStyle);

    sub_1BCAB5F04();
    v13 = objc_allocWithZone(MEMORY[0x1E0CD2780]);
    v14 = (void *)sub_1BCAB5EE0();
    swift_bridgeObjectRelease();
    v15 = objc_msgSend(v13, sel_initWithType_, v14);

    objc_msgSend(v6, sel_setCompositingFilter_, v15);
  }
}

void sub_1BCA4FB54()
{
  char *v0;
  void *v1;
  id v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  void *v11;
  id v12;
  objc_super v13;

  v13.receiver = v0;
  v13.super_class = (Class)type metadata accessor for HighlightCalendarDayView();
  objc_msgSendSuper2(&v13, sel_layoutSubviews);
  v1 = *(void **)&v0[OBJC_IVAR____TtC19HealthVisualization24HighlightCalendarDayView_activityRingsView];
  if (v1)
  {
    v2 = v1;
    objc_msgSend(v0, sel_bounds);
    v4 = v3;
    v6 = v5;
    v8 = v7;
    v10 = v9;
    if (qword_1ED6C3128 != -1)
      swift_once();
    objc_msgSend(v2, sel_setFrame_, UIEdgeInsetsInsetRect(v4, v6, v8, v10, *(double *)&xmmword_1ED6D3790, *((double *)&xmmword_1ED6D3790 + 1)));

  }
  v11 = *(void **)&v0[OBJC_IVAR____TtC19HealthVisualization24HighlightCalendarDayView_dayLabel];
  if (v11)
  {
    v12 = v11;
    objc_msgSend(v0, sel_bounds);
    objc_msgSend(v12, sel_setFrame_);

  }
}

uint64_t sub_1BCA4FD58()
{
  uint64_t ObjectType;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  ObjectType = swift_getObjectType();
  sub_1BC998AB0(0, (unint64_t *)&qword_1EF4787B8, (uint64_t (*)(uint64_t))sub_1BC9D5ACC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_1BCABE680;
  v2 = sub_1BCAB5538();
  v3 = MEMORY[0x1E0DC29B0];
  *(_QWORD *)(v1 + 32) = v2;
  *(_QWORD *)(v1 + 40) = v3;
  *(_QWORD *)(swift_allocObject() + 16) = ObjectType;
  sub_1BCAB62F4();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1BCABE680;
  v5 = sub_1BCAB552C();
  v6 = MEMORY[0x1E0DC2160];
  *(_QWORD *)(v4 + 32) = v5;
  *(_QWORD *)(v4 + 40) = v6;
  sub_1BCAB62F4();
  swift_unknownObjectRelease();
  return swift_bridgeObjectRelease();
}

id sub_1BCA4FE84(char *a1)
{
  id v2;
  id v3;
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  int v8;
  double v9;
  void *v10;
  void *v11;
  id v12;
  char v14;
  char v15;

  v2 = objc_msgSend(a1, sel_traitCollection);
  v3 = objc_msgSend(v2, sel_preferredContentSizeCategory);

  v4 = a1[OBJC_IVAR____TtC19HealthVisualization24HighlightCalendarDayView_model + 89];
  v6 = *(void **)&a1[OBJC_IVAR____TtC19HealthVisualization24HighlightCalendarDayView_model + 24];
  v5 = *(void **)&a1[OBJC_IVAR____TtC19HealthVisualization24HighlightCalendarDayView_model + 32];
  v7 = *(_QWORD *)&a1[OBJC_IVAR____TtC19HealthVisualization24HighlightCalendarDayView_model + 40];
  v8 = a1[OBJC_IVAR____TtC19HealthVisualization24HighlightCalendarDayView_model + 48];
  if (a1[OBJC_IVAR____TtC19HealthVisualization24HighlightCalendarDayView_model + 48])
  {
    sub_1BC9D5A08(*(id *)&a1[OBJC_IVAR____TtC19HealthVisualization24HighlightCalendarDayView_model + 24], *(id *)&a1[OBJC_IVAR____TtC19HealthVisualization24HighlightCalendarDayView_model + 32], *(_QWORD *)&a1[OBJC_IVAR____TtC19HealthVisualization24HighlightCalendarDayView_model + 40], a1[OBJC_IVAR____TtC19HealthVisualization24HighlightCalendarDayView_model + 48]);
    if ((sub_1BCAB62D0() & 1) != 0)
    {
      v15 = v4;
      sub_1BCA5099C((uint64_t)v3, &v15);

      sub_1BC9D5A40(v6, v5, v7, v8);
    }
    else
    {

      sub_1BC9D5A40(v6, v5, v7, v8);
    }
    __asm { BR              X10 }
  }
  v14 = a1[OBJC_IVAR____TtC19HealthVisualization24HighlightCalendarDayView_model + 89];
  sub_1BC9D5A08(v6, v5, v7, 0);
  v9 = sub_1BCA5099C((uint64_t)v3, &v14);

  sub_1BC9D5A40(v6, v5, v7, 0);
  sub_1BC9E71B4();
  v11 = v10;
  objc_msgSend(a1, sel_setBackgroundColor_, v10);

  v12 = objc_msgSend(a1, sel_layer);
  objc_msgSend(v12, sel_setCornerRadius_, v9 * 0.5);

  return objc_msgSend(a1, sel_invalidateIntrinsicContentSize);
}

id sub_1BCA50600()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for HighlightCalendarDayView();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_1BCA506A4()
{
  return type metadata accessor for HighlightCalendarDayView();
}

uint64_t type metadata accessor for HighlightCalendarDayView()
{
  uint64_t result;

  result = qword_1ED6C5708;
  if (!qword_1ED6C5708)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_1BCA506E8()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for HighlightCalendarDayViewModel(319);
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_1BCA50764()
{
  return swift_deallocObject();
}

id sub_1BCA50774(char *a1)
{
  return sub_1BCA4FE84(a1);
}

uint64_t sub_1BCA5077C()
{
  uint64_t v0;
  id v1;
  _QWORD *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  id v7;
  id v8;
  uint64_t result;

  v1 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB7850]), sel_initWithFrame_renderer_, *(_QWORD *)(v0 + OBJC_IVAR____TtC19HealthVisualization24HighlightCalendarDayView_ringsRenderer), 0.0, 0.0, 0.0, 0.0);
  v2 = (_QWORD *)(v0 + OBJC_IVAR____TtC19HealthVisualization24HighlightCalendarDayView_model);
  if (*(_BYTE *)(v0 + OBJC_IVAR____TtC19HealthVisualization24HighlightCalendarDayView_model + 48) || (v3 = v1) == 0)
  {
    result = sub_1BCAB65C4();
    __break(1u);
  }
  else
  {
    v4 = (void *)v2[3];
    v5 = (void *)v2[4];
    v6 = v2[5];
    sub_1BC9D5A08(v4, v5, v6, 0);
    v7 = v3;
    objc_msgSend(v7, sel_setActivitySummary_animated_, v4, 1);
    v8 = objc_msgSend((id)objc_opt_self(), sel_clearColor);
    objc_msgSend(v7, sel__setActivityRingViewBackgroundColor_, v8);

    sub_1BC9D5A40(v4, v5, v6, 0);
    return (uint64_t)v7;
  }
  return result;
}

void sub_1BCA50920(uint64_t a1)
{
  int v1;

  v1 = *(unsigned __int8 *)(a1 + OBJC_IVAR____TtC19HealthVisualization24HighlightCalendarDayView_model + 48);
  if (v1 == 4 || v1 == 2)
    sub_1BCA4F7FC(*(double *)(a1 + OBJC_IVAR____TtC19HealthVisualization24HighlightCalendarDayView_model + 40));
}

unint64_t sub_1BCA50960()
{
  unint64_t result;

  result = qword_1ED6C5B38;
  if (!qword_1ED6C5B38)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1ED6C5B38);
  }
  return result;
}

double sub_1BCA5099C(uint64_t a1, char *a2)
{
  char v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v16;

  v2 = *a2;
  v3 = sub_1BCAB62D0();
  if ((v2 & 1) == 0)
  {
    if ((v3 & 1) != 0)
      return 32.0;
    v11 = sub_1BCAB5F04();
    v13 = v12;
    if (v11 == sub_1BCAB5F04() && v13 == v14)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      v16 = sub_1BCAB67C8();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v16 & 1) == 0)
      {
        if ((sub_1BCAB62C4() & 1) == 0)
          return 32.0;
        return 34.0;
      }
    }
    return 33.0;
  }
  if ((v3 & 1) != 0)
    return 33.0;
  v4 = sub_1BCAB5F04();
  v6 = v5;
  if (v4 == sub_1BCAB5F04() && v6 == v7)
  {
    swift_bridgeObjectRelease_n();
    return 34.0;
  }
  v9 = sub_1BCAB67C8();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v9 & 1) != 0)
    return 34.0;
  if ((sub_1BCAB62C4() & 1) == 0)
    return 32.0;
  return 35.0;
}

uint64_t sub_1BCA50B20(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1BC998AB0(0, (unint64_t *)&qword_1ED6C5400, type metadata accessor for AXProjectionState, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1BCA50B7C(uint64_t a1)
{
  uint64_t v2;

  sub_1BC998AB0(0, (unint64_t *)&qword_1ED6C5400, type metadata accessor for AXProjectionState, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1BCA50BD0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AXProjectionState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

char *sub_1BCA50C14(uint64_t a1, void *a2)
{
  char *v2;
  id v5;
  char *v6;
  id v7;
  id v8;
  char v9;
  void *v10;
  void *v11;
  uint64_t v12;
  int v13;
  id v14;
  double v15;
  void *v16;
  void *v17;
  id v18;
  void *v19;
  void *v20;
  id v21;
  char *v22;
  double v23;
  char *v24;
  double v25;
  uint64_t v27;
  int v28;
  objc_super v29;

  *(_QWORD *)&v2[OBJC_IVAR____TtC19HealthVisualization24HighlightCalendarDayView_dayLabel] = 0;
  *(_QWORD *)&v2[OBJC_IVAR____TtC19HealthVisualization24HighlightCalendarDayView_todayIndicatorLayer] = 0;
  *(_QWORD *)&v2[OBJC_IVAR____TtC19HealthVisualization24HighlightCalendarDayView_activityRingsView] = 0;
  sub_1BC9D5988(a1, (uint64_t)&v2[OBJC_IVAR____TtC19HealthVisualization24HighlightCalendarDayView_model]);
  *(_QWORD *)&v2[OBJC_IVAR____TtC19HealthVisualization24HighlightCalendarDayView_ringsRenderer] = a2;
  v29.receiver = v2;
  v29.super_class = (Class)type metadata accessor for HighlightCalendarDayView();
  v5 = a2;
  v6 = (char *)objc_msgSendSuper2(&v29, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  sub_1BCA4FD58();
  v7 = objc_msgSend(v6, sel_traitCollection);
  v8 = objc_msgSend(v7, sel_preferredContentSizeCategory);

  v9 = *(_BYTE *)(a1 + 89);
  v11 = *(void **)(a1 + 24);
  v10 = *(void **)(a1 + 32);
  v12 = *(_QWORD *)(a1 + 40);
  v27 = a1;
  v13 = *(unsigned __int8 *)(a1 + 48);
  if (v13)
  {
    sub_1BC9D5A08(v11, v10, v12, v13);
    if ((sub_1BCAB62D0() & 1) != 0)
    {
      LOBYTE(v28) = v9;
      sub_1BCA5099C((uint64_t)v8, (char *)&v28);

      sub_1BC9D5A40(v11, v10, v12, v13);
    }
    else
    {

      sub_1BC9D5A40(v11, v10, v12, v13);
    }
    __asm { BR              X10 }
  }
  LOBYTE(v28) = v9;
  v14 = v11;
  v15 = sub_1BCA5099C((uint64_t)v8, (char *)&v28);

  sub_1BC9D5A40(v11, v10, v12, 0);
  v16 = (void *)sub_1BCA5077C();
  v17 = *(void **)&v6[OBJC_IVAR____TtC19HealthVisualization24HighlightCalendarDayView_activityRingsView];
  *(_QWORD *)&v6[OBJC_IVAR____TtC19HealthVisualization24HighlightCalendarDayView_activityRingsView] = v16;
  v18 = v16;

  objc_msgSend(v6, sel_addSubview_, v18);
  sub_1BC9E71B4();
  v20 = v19;
  objc_msgSend(v6, sel_setBackgroundColor_, v19);

  v21 = objc_msgSend(v6, sel_layer);
  objc_msgSend(v21, sel_setCornerRadius_, v15 * 0.5);

  type metadata accessor for UILayoutPriority(0);
  sub_1BC9D5940();
  v22 = v6;
  sub_1BCAB5520();
  LODWORD(v23) = v28;
  objc_msgSend(v22, sel_setContentCompressionResistancePriority_forAxis_, 1, v23);

  v24 = v22;
  sub_1BCAB5520();
  LODWORD(v25) = v28;
  objc_msgSend(v24, sel_setContentCompressionResistancePriority_forAxis_, 0, v25);

  sub_1BC997208(v27, type metadata accessor for HighlightCalendarDayViewModel);
  return v24;
}

uint64_t DiagramAxisOnly.__allocating_init(config:data:hbxViewControllerFactory:customMetricsFactory:)(unsigned int *a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v8;

  v8 = swift_allocObject();
  DiagramAxisOnly.init(config:data:hbxViewControllerFactory:customMetricsFactory:)(a1, a2, a3, a4);
  return v8;
}

double sub_1BCA526FC()
{
  return sub_1BCA2F530();
}

double sub_1BCA5271C()
{
  uint64_t v0;
  uint64_t v1;
  double v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;

  v1 = *(_QWORD *)(v0 + 40);
  v2 = 0.0;
  if ((*(_BYTE *)(v1 + 144) & 1) == 0)
    v2 = *(double *)(v1 + 112);
  v3 = *(_QWORD *)(v1 + 40);
  if (v3
    && (unint64_t)*(unsigned __int8 *)(v1 + 68) << 32 != 0x300000000
    && (*(_DWORD *)(v1 + 72) & 0xFF000000) != 0x2000000)
  {
    swift_bridgeObjectRetain();
    DiagramConfiguration.TextAttributes.toTextAttributes()();
    v4 = sub_1BC99F5E8(v3);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1BC99F55C(v4);
    swift_bridgeObjectRelease();
  }
  if ((*(_QWORD *)(v1 + 64) & 0xFE00000000 | 0x100000000) != 0x300000000)
  {
    DiagramConfiguration.TextAttributes.toTextAttributes()();
    v5 = (void *)sub_1BCAB5EE0();
    type metadata accessor for Key(0);
    sub_1BC99F5A0();
    v6 = (void *)sub_1BCAB5E68();
    swift_bridgeObjectRelease();
    objc_msgSend(v5, sel_sizeWithAttributes_, v6);

  }
  return v2;
}

void (*sub_1BCA52928())(CGContext *a1, CGFloat *a2, double a3, double a4)
{
  swift_retain();
  return sub_1BCA52F44;
}

void sub_1BCA52958(CGContext *a1, CGFloat *a2, uint64_t a3, double a4, double a5)
{
  CGFloat v8;
  CGFloat v9;
  CGFloat v10;
  CGFloat v11;
  CGFloat v12;
  CGFloat v13;
  double v14;
  id v15;
  CGColor *v16;
  double v17;
  CGFloat v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  CGFloat v32;
  CGFloat v33;
  uint64_t v34;
  __int128 v35;
  _BYTE v36[3];
  char v37;
  char v38;
  char v39;
  char v40;
  CGAffineTransform v41;
  double v42;
  CGPoint v43;
  CGPoint v44;
  CGRect v45;
  CGRect v46;

  v8 = *a2;
  v9 = a2[1];
  v10 = a2[2];
  v11 = a2[3];
  v12 = a2[4];
  v13 = a2[5];
  v14 = a2[6];
  if (*(_BYTE *)(a3 + 34) == 1)
  {
    v15 = objc_msgSend((id)objc_opt_self(), sel_blackColor);
    v16 = (CGColor *)objc_msgSend(v15, sel_CGColor);

    v30 = a4;
    v17 = sub_1BCA2F530();
    v32 = v13;
    v33 = v14;
    v18 = v11;
    v20 = v19;
    v22 = v21;
    v24 = v23;
    CGContextSetFillColorWithColor(a1, v16);
    v41.a = v9;
    v41.b = v10;
    v41.c = v18;
    v41.d = v12;
    v41.tx = v32;
    v41.ty = v33;
    v45.origin.x = v17;
    v45.origin.y = v20;
    v45.size.width = v22;
    v45.size.height = v24;
    v46 = CGRectApplyAffineTransform(v45, &v41);
    CGContextFillRect(a1, v46);
    v41.a = v9;
    v41.b = v10;
    v41.c = v18;
    v41.d = v12;
    v41.tx = v32;
    v41.ty = v33;
    v43.x = v17;
    v43.y = v20;
    CGPointApplyAffineTransform(v43, &v41);
    v44.x = v17 + v22;
    a4 = v30;
    v41.a = v9;
    v41.b = v10;
    v44.y = v20 + v24;
    v11 = v18;
    v13 = v32;
    v14 = v33;
    v41.c = v11;
    v41.d = v12;
    v41.tx = v32;
    v41.ty = v33;
    CGPointApplyAffineTransform(v44, &v41);
    sub_1BCA52FA4(a1);
    sub_1BCA52FA4(a1);

  }
  v25 = *(_QWORD *)(a3 + 40);
  v26 = *(_QWORD *)(v25 + 64);
  if ((v26 & 0xFF00000000) != 0x300000000)
  {
    v27 = *(unsigned int *)(v25 + 72) | ((unint64_t)*(unsigned __int16 *)(v25 + 76) << 32);
    if ((v26 & 0xFF00000000) != 0x200000000)
    {
      v28 = *(_QWORD *)(v25 + 16);
      if (v28)
      {
        v41.a = v8;
        v41.b = v9;
        v41.c = v10;
        v41.d = v11;
        v41.tx = v12;
        v41.ty = v13;
        v42 = v14;
        *(_WORD *)v36 = v26;
        v36[2] = BYTE2(v26);
        v37 = BYTE3(v26);
        v38 = BYTE4(v26) & 1;
        v39 = BYTE5(v26);
        v40 = BYTE6(v26);
        v34 = v28;
        v35 = *(_OWORD *)(v25 + 24);
        swift_bridgeObjectRetain();
        sub_1BCA2F9FC(a1, &v41.a, v36, (CGFloat *)&v34, a4);
        swift_bridgeObjectRelease();
      }
    }
    if ((v27 & 0xFF000000) != 0x2000000)
    {
      v29 = *(_QWORD *)(v25 + 40);
      if (v29)
      {
        v41.a = v8;
        v41.b = v9;
        v41.c = v10;
        v41.d = v11;
        v41.tx = v12;
        v41.ty = v13;
        v42 = v14;
        v36[0] = HIBYTE(v26);
        *(_WORD *)&v36[1] = v27;
        v37 = BYTE2(v27);
        v38 = BYTE3(v27) & 1;
        v39 = BYTE4(v27);
        v40 = BYTE5(v27);
        v34 = v29;
        v35 = *(_OWORD *)(v25 + 48);
        swift_bridgeObjectRetain();
        sub_1BCA304A4(a1, &v41.a, v36, &v34, a4, a5);
        swift_bridgeObjectRelease();
      }
    }
  }
}

uint64_t DiagramAxisOnly.init(config:data:hbxViewControllerFactory:customMetricsFactory:)(unsigned int *a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  double x;
  double y;
  double width;
  double height;
  double v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v36;
  int v37;
  __int16 v38;
  _OWORD v39[2];
  char v40;
  uint64_t v41;
  _QWORD v42[4];
  char v43;
  __C::CGRect v44;
  CGRect v45;
  CGRect v46;

  v5 = v4;
  v7 = *a1;
  v8 = *((char *)a1 + 14);
  v9 = *((char *)a1 + 15);
  v10 = *((char *)a1 + 16);
  v11 = *((char *)a1 + 17);
  v12 = *((_BYTE *)a1 + 18);
  v13 = *((unsigned __int8 *)a1 + 6);
  v14 = *((unsigned __int16 *)a1 + 2) | (v13 << 16);
  v15 = v7 | (v14 << 32);
  v16 = *(unsigned int *)((char *)a1 + 7);
  v17 = *((unsigned __int8 *)a1 + 13);
  v18 = *(unsigned __int16 *)((char *)a1 + 11) | (v17 << 16);
  v19 = v16 | (v18 << 32);
  v20 = *(_BYTE *)(a2 + 32);
  v21 = *(_QWORD *)(a2 + 40);
  *(_DWORD *)(v4 + 16) = v7;
  *(_BYTE *)(v4 + 22) = v13;
  *(_WORD *)(v4 + 20) = v14;
  *(_DWORD *)(v4 + 23) = v16;
  *(_BYTE *)(v4 + 29) = v17;
  *(_WORD *)(v4 + 27) = v18;
  *(_BYTE *)(v4 + 30) = v8;
  *(_BYTE *)(v4 + 31) = v9;
  *(_BYTE *)(v4 + 32) = v10;
  *(_BYTE *)(v4 + 33) = v11;
  *(_BYTE *)(v4 + 34) = v12;
  v22 = qword_1BCAC6260[v8];
  v23 = qword_1BCAC6260[v9];
  v24 = qword_1BCAC6260[v11];
  v25 = qword_1BCAC6260[v10];
  v26 = *(_OWORD *)(a2 + 16);
  v39[0] = *(_OWORD *)a2;
  v39[1] = v26;
  v40 = v20;
  v41 = v21;
  v44 = DiagramData.diagramBounds(forceNonZeroSize:)(0);
  x = v44.origin.x;
  y = v44.origin.y;
  width = v44.size.width;
  height = v44.size.height;
  swift_bridgeObjectRelease();
  v45.origin.x = x;
  v45.origin.y = y;
  v45.size.width = width;
  v45.size.height = height;
  if (CGRectGetWidth(v45) <= 0.0
    || (v46.origin.x = x, v46.origin.y = y,
                          v46.size.width = width,
                          v46.size.height = height,
                          CGRectGetHeight(v46) <= 0.0))
  {
    if (width <= 0.0)
    {
      width = 1.0;
      v31 = 1.0;
      if (height > 0.0)
      {
        v31 = height;
        width = height / 1000000.0;
      }
    }
    else
    {
      v31 = width / 1000000.0;
    }
  }
  else
  {
    v31 = height;
  }
  v36 = v15 & 0xFFFFFFFFFFFFFFLL | ((unint64_t)v19 << 56);
  v38 = HIDWORD(v19) >> 8;
  v37 = v19 >> 8;
  v42[0] = v23;
  v42[1] = v22;
  v42[2] = v23;
  v42[3] = v22;
  v43 = 0;
  sub_1BCA31C7C(a4, (uint64_t)v39);
  type metadata accessor for DiagramAxis();
  swift_allocObject();
  sub_1BCA2F0F8((uint64_t *)&v36, (uint64_t)v42, 0, 0, v24, v25, 0, a3, x, y, width, v31, (uint64_t)v39);
  v33 = v32;
  sub_1BCA3B12C(a4);
  *(_QWORD *)(v5 + 40) = v33;
  return v5;
}

uint64_t DiagramAxisOnly.deinit()
{
  uint64_t v0;

  swift_release();
  return v0;
}

uint64_t DiagramAxisOnly.__deallocating_deinit()
{
  swift_release();
  return swift_deallocClassInstance();
}

double sub_1BCA52ECC()
{
  return sub_1BCA2F530();
}

double sub_1BCA52EF0()
{
  return sub_1BCA5271C();
}

void (*sub_1BCA52F10())(CGContext *a1, CGFloat *a2, double a3, double a4)
{
  swift_retain();
  return sub_1BCA52F44;
}

void sub_1BCA52F44(CGContext *a1, CGFloat *a2, double a3, double a4)
{
  uint64_t v4;

  sub_1BCA52958(a1, a2, v4, a3, a4);
}

uint64_t type metadata accessor for DiagramAxisOnly()
{
  return objc_opt_self();
}

uint64_t method lookup function for DiagramAxisOnly()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of DiagramAxisOnly.modelSpace.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 96))();
}

uint64_t dispatch thunk of DiagramAxisOnly.screenInsets.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

uint64_t dispatch thunk of DiagramAxisOnly.drawingBlock.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t dispatch thunk of DiagramAxisOnly.__allocating_init(config:data:hbxViewControllerFactory:customMetricsFactory:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 120))();
}

void sub_1BCA52FA4(CGContext *a1)
{
  id v2;
  CGColor *color;

  v2 = objc_msgSend((id)objc_opt_self(), sel_whiteColor);
  color = (CGColor *)objc_msgSend(v2, sel_CGColor);

  sub_1BCAB6144();
  sub_1BCAB6150();
  sub_1BCAB6144();
  sub_1BCAB6150();
  sub_1BCAB6144();
  sub_1BCAB6150();
  sub_1BCAB6144();
  sub_1BCAB6150();
  CGContextSetStrokeColorWithColor(a1, color);
  CGContextStrokePath(a1);

}

uint64_t _s19HealthVisualization23LocalizationReplacementO2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  char v11;

  v2 = *(uint64_t *)a1;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(unsigned __int8 *)(a1 + 24);
  v6 = *(uint64_t *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(unsigned __int8 *)(a2 + 24);
  if (*(_BYTE *)(a1 + 24))
  {
    if (v5 == 1)
    {
      if (v9 == 1)
      {
        if (v2 == v6 && v3 == v7)
        {
          LOBYTE(v9) = 1;
          LOBYTE(v5) = 1;
          v11 = 1;
        }
        else
        {
          v11 = sub_1BCAB67C8();
          LOBYTE(v9) = 1;
          LOBYTE(v5) = 1;
        }
        goto LABEL_26;
      }
LABEL_20:
      v11 = 0;
      goto LABEL_26;
    }
    if (v9 != 2)
      goto LABEL_20;
    if (*(double *)&v2 == *(double *)&v6)
    {
      if (v3 == v7 && v4 == v8)
        v11 = 1;
      else
        v11 = sub_1BCAB67C8();
    }
    else
    {
      v11 = 0;
    }
    LOBYTE(v9) = 2;
    LOBYTE(v5) = 2;
  }
  else
  {
    if (*(_BYTE *)(a2 + 24))
      goto LABEL_20;
    if (v2 == v6 && v3 == v7)
    {
      LOBYTE(v9) = 0;
      LOBYTE(v5) = 0;
      v11 = 1;
    }
    else
    {
      v11 = sub_1BCAB67C8();
      LOBYTE(v9) = 0;
      LOBYTE(v5) = 0;
    }
  }
LABEL_26:
  sub_1BC9A5E60(v6, v7, v8, v9);
  sub_1BC9A5E60(v2, v3, v4, v5);
  sub_1BC9A5E80(v2, v3, v4, v5);
  sub_1BC9A5E80(v6, v7, v8, v9);
  return v11 & 1;
}

uint64_t destroy for LocalizationReplacement(uint64_t a1)
{
  return sub_1BC9A5E80(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24));
}

uint64_t initializeWithCopy for LocalizationReplacement(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_BYTE *)(a2 + 24);
  sub_1BC9A5E60(*(_QWORD *)a2, v4, v5, v6);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 24) = v6;
  return a1;
}

uint64_t assignWithCopy for LocalizationReplacement(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_BYTE *)(a2 + 24);
  sub_1BC9A5E60(*(_QWORD *)a2, v4, v5, v6);
  v7 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  v10 = *(_BYTE *)(a1 + 24);
  *(_BYTE *)(a1 + 24) = v6;
  sub_1BC9A5E80(v7, v8, v9, v10);
  return a1;
}

uint64_t assignWithTake for LocalizationReplacement(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_BYTE *)(a2 + 24);
  v5 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = v3;
  v8 = *(_BYTE *)(a1 + 24);
  *(_BYTE *)(a1 + 24) = v4;
  sub_1BC9A5E80(v5, v7, v6, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for LocalizationReplacement(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 25))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 24);
  if (v3 <= 2)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for LocalizationReplacement(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 25) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 25) = 0;
    if (a2)
      *(_BYTE *)(result + 24) = -(char)a2;
  }
  return result;
}

uint64_t sub_1BCA5342C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 24);
}

uint64_t sub_1BCA53434(uint64_t result, char a2)
{
  *(_BYTE *)(result + 24) = a2;
  return result;
}

ValueMetadata *type metadata accessor for LocalizationReplacement()
{
  return &type metadata for LocalizationReplacement;
}

void StatisticsInterval.dateComponents.getter(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1BCA53478()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  if (qword_1ED6C4DD0 != -1)
    swift_once();
  v1 = sub_1BCAB4C74();
  v2 = __swift_project_value_buffer(v1, (uint64_t)qword_1ED6C4DE8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 16))(v0, v2, v1);
}

void StatisticsInterval.calendarComponent.getter(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1BCA53604()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *MEMORY[0x1E0CB1140];
  v2 = sub_1BCAB4F68();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 104))(v0, v1, v2);
}

void *static StatisticsInterval.allCases.getter()
{
  return &unk_1E75447E0;
}

uint64_t StatisticsInterval.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1BCA536AC + 4 * byte_1BCAC62EA[a1]))(0x72756F48656E6FLL, 0xE700000000000000);
}

uint64_t sub_1BCA536AC()
{
  return 0x796144656E6FLL;
}

uint64_t sub_1BCA536C0()
{
  return 0x6B656557656E6FLL;
}

uint64_t sub_1BCA536D4()
{
  return 0x68746E6F4D656E6FLL;
}

uint64_t sub_1BCA536EC()
{
  return 0x72616559656E6FLL;
}

void sub_1BCA53700()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  sub_1BCAB6870();
  __asm { BR              X9 }
}

uint64_t sub_1BCA5374C()
{
  sub_1BCAB5F40();
  swift_bridgeObjectRelease();
  return sub_1BCAB6894();
}

void sub_1BCA537C8()
{
  __asm { BR              X10 }
}

uint64_t sub_1BCA53804()
{
  sub_1BCAB5F40();
  return swift_bridgeObjectRelease();
}

void sub_1BCA5386C()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  sub_1BCAB6870();
  __asm { BR              X9 }
}

uint64_t sub_1BCA538B4()
{
  sub_1BCAB5F40();
  swift_bridgeObjectRelease();
  return sub_1BCAB6894();
}

uint64_t sub_1BCA53930@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = _s19HealthVisualization18StatisticsIntervalO8rawValueACSgSS_tcfC_0();
  *a1 = result;
  return result;
}

uint64_t sub_1BCA5395C()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1BCA5398C + 4 * byte_1BCAC62FE[*v0]))();
}

void sub_1BCA5398C(_QWORD *a1@<X8>)
{
  *a1 = 0x796144656E6FLL;
  a1[1] = 0xE600000000000000;
}

void sub_1BCA539A4(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = 0x6B656557656E6FLL;
  a1[1] = v1;
}

void sub_1BCA539BC(_QWORD *a1@<X8>)
{
  *a1 = 0x68746E6F4D656E6FLL;
  a1[1] = 0xE800000000000000;
}

void sub_1BCA539D8(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = 0x72616559656E6FLL;
  a1[1] = v1;
}

uint64_t sub_1BCA539F0()
{
  sub_1BCA54070();
  return sub_1BCAB5FE8();
}

uint64_t sub_1BCA53A4C()
{
  sub_1BCA54070();
  return sub_1BCAB5FD0();
}

void sub_1BCA53A98(_QWORD *a1@<X8>)
{
  *a1 = &unk_1E7544808;
}

void sub_1BCA53AA8(uint64_t a1)
{
  __asm { BR              X11 }
}

uint64_t sub_1BCA53AFC@<X0>(uint64_t a1@<X8>)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1BCA53B68 + 4 * byte_1BCAC6308[a1]))(0x796144656E6FLL);
}

uint64_t sub_1BCA53B68(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x796144656E6FLL && v1 == 0xE600000000000000)
    v2 = 1;
  else
    v2 = sub_1BCAB67C8();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

void StatisticsInterval.unit.getter(char a1)
{
  __asm { BR              X10 }
}

id sub_1BCA53C48()
{
  return objc_msgSend((id)objc_opt_self(), sel_hourUnit);
}

id sub_1BCA53C90()
{
  void *v0;
  id v1;

  v0 = (void *)sub_1BCAB5EE0();
  v1 = objc_msgSend((id)objc_opt_self(), sel_unitFromString_, v0);

  return v1;
}

void StatisticsInterval.feedItemTimeScope.getter(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1BCA53D84()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *MEMORY[0x1E0D2DB20];
  v2 = sub_1BCAB5040();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 104))(v0, v1, v2);
}

void StatisticsInterval.anchorDate.getter(char a1)
{
  __asm { BR              X12 }
}

uint64_t sub_1BCA53E14@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = result;
  return result;
}

void sub_1BCA53E28()
{
  sub_1BCAB65C4();
  __break(1u);
}

uint64_t _s19HealthVisualization18StatisticsIntervalO8rawValueACSgSS_tcfC_0()
{
  unint64_t v0;

  v0 = sub_1BCAB6654();
  swift_bridgeObjectRelease();
  if (v0 >= 5)
    return 5;
  else
    return v0;
}

unint64_t sub_1BCA53EC0()
{
  unint64_t result;

  result = qword_1ED6C7188;
  if (!qword_1ED6C7188)
  {
    result = MEMORY[0x1BCCFBE84](&protocol conformance descriptor for StatisticsInterval, &type metadata for StatisticsInterval);
    atomic_store(result, (unint64_t *)&qword_1ED6C7188);
  }
  return result;
}

unint64_t sub_1BCA53F08()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EF479FA0;
  if (!qword_1EF479FA0)
  {
    sub_1BCA53F50();
    result = MEMORY[0x1BCCFBE84](MEMORY[0x1E0DEAF50], v1);
    atomic_store(result, (unint64_t *)&qword_1EF479FA0);
  }
  return result;
}

void sub_1BCA53F50()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EF479FA8)
  {
    v0 = sub_1BCAB6060();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EF479FA8);
  }
}

uint64_t storeEnumTagSinglePayload for StatisticsInterval(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1BCA53FF0 + 4 * byte_1BCAC631C[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1BCA54024 + 4 * byte_1BCAC6317[v4]))();
}

uint64_t sub_1BCA54024(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BCA5402C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BCA54034);
  return result;
}

uint64_t sub_1BCA54040(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BCA54048);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1BCA5404C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BCA54054(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for StatisticsInterval()
{
  return &type metadata for StatisticsInterval;
}

unint64_t sub_1BCA54070()
{
  unint64_t result;

  result = qword_1ED6C7190;
  if (!qword_1ED6C7190)
  {
    result = MEMORY[0x1BCCFBE84](&protocol conformance descriptor for StatisticsInterval, &type metadata for StatisticsInterval);
    atomic_store(result, (unint64_t *)&qword_1ED6C7190);
  }
  return result;
}

id HKWorkout.makeEnergyBurnedAttributedText(healthStore:unitPreferenceController:valueFont:unitFont:)(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  id v9;
  void *v10;
  id result;
  void *v12;
  id v13;
  id v14;
  void *v15;
  void *v16;
  id v17;
  id v18;
  id v19;
  void *v20;

  sub_1BC9B3A7C();
  v9 = (id)*MEMORY[0x1E0CB5A48];
  v10 = (void *)MEMORY[0x1BCCFADBC]();
  result = objc_msgSend(a1, sel_displayTypeController);
  if (result)
  {
    v12 = result;
    v13 = objc_msgSend(result, sel_displayTypeForObjectType_, v10);

    if (v13)
    {
      v14 = objc_msgSend(a2, sel_unitForDisplayType_, v13);
      if (v14)
      {
        v15 = v14;
        v16 = (void *)MEMORY[0x1BCCFADBC](v9);
        v17 = objc_msgSend(v4, sel_statisticsForType_, v16);

        if (!v17)
        {

          return v17;
        }
        v18 = objc_msgSend(v17, sel_sumQuantity);

        if (v18)
        {
          objc_msgSend(v18, sel_doubleValueForUnit_, v15);

          v19 = objc_msgSend(v13, sel_hk_valueFormatterForUnit_, v15);
          v20 = (void *)sub_1BCAB4FC8();
          v17 = objc_msgSend(v19, sel_attributedStringFromValue_displayType_unitController_valueFont_unitFont_formatForChart_, v20, v13, a2, a3, a4, 1);

          return v17;
        }

      }
      else
      {

      }
    }
    else
    {

    }
    return 0;
  }
  __break(1u);
  return result;
}

id HKWorkout.makeDistanceAttributedText(healthStore:unitPreferenceController:valueFont:unitFont:)(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  void *v5;
  id v10;
  void **v11;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  id v16;
  id v17;
  void *v18;
  double v19;
  id v20;
  void *v21;
  id v22;

  v5 = v4;
  v10 = objc_msgSend(v4, sel_workoutActivityType);
  v11 = (void **)MEMORY[0x1E0CB5C38];
  switch((unint64_t)v10)
  {
    case 0xDuLL:
      break;
    case 0x2EuLL:
      v11 = (void **)MEMORY[0x1E0CB5C60];
      break;
    case 0x46uLL:
    case 0x47uLL:
      v11 = (void **)MEMORY[0x1E0CB5C70];
      break;
    default:
      v11 = (void **)MEMORY[0x1E0CB5C68];
      break;
  }
  v12 = *v11;
  sub_1BC9B3A7C();
  v13 = (void *)MEMORY[0x1BCCFADBC](v12);
  v14 = objc_msgSend(a1, sel_displayTypeController);
  if (!v14)
  {
    __break(1u);
    JUMPOUT(0x1BCA544B8);
  }
  v15 = v14;
  v16 = objc_msgSend(v14, sel_displayTypeForObjectType_, v13);

  if (!v16)
  {

    return 0;
  }
  v17 = objc_msgSend(a2, sel_unitForDisplayType_, v16);
  if (!v17)
  {

    return 0;
  }
  v18 = v17;
  objc_msgSend(v5, sel__totalDistanceIncludingAllTypesForUnit_, v17);
  if (v19 <= 2.22044605e-16)
  {

    return 0;
  }
  v20 = objc_msgSend(v16, sel_hk_valueFormatterForUnit_, v18);
  v21 = (void *)sub_1BCAB4FC8();
  v22 = objc_msgSend(v20, sel_attributedStringFromValue_displayType_unitController_valueFont_unitFont_formatForChart_, v21, v16, a2, a3, a4, 1);

  return v22;
}

__C::HKQuantityTypeIdentifier __swiftcall HKWorkout.relevantDistanceIdentifier()()
{
  void *v0;
  char *v1;
  id *v2;

  v1 = (char *)objc_msgSend(v0, sel_workoutActivityType);
  v2 = (id *)MEMORY[0x1E0CB5C68];
  if (v1 == (char *)13)
    v2 = (id *)MEMORY[0x1E0CB5C38];
  if (v1 == (char *)46)
    v2 = (id *)MEMORY[0x1E0CB5C60];
  if ((unint64_t)(v1 - 70) < 2)
    v2 = (id *)MEMORY[0x1E0CB5C70];
  return (__C::HKQuantityTypeIdentifier)*v2;
}

HKUnit __swiftcall HKWorkout.preferredDistanceUnit(healthStore:)(HKHealthStore healthStore)
{
  void *v1;
  id v2;
  id v3;
  void **v4;
  void *v5;
  void *v6;
  id v7;

  v2 = -[objc_class viewControllerFactory](healthStore.super.isa, sel_viewControllerFactory);
  v3 = objc_msgSend(v1, sel_workoutActivityType);
  v4 = (void **)MEMORY[0x1E0CB5C38];
  switch((unint64_t)v3)
  {
    case 0xDuLL:
      break;
    case 0x2EuLL:
      v4 = (void **)MEMORY[0x1E0CB5C60];
      break;
    case 0x46uLL:
    case 0x47uLL:
      v4 = (void **)MEMORY[0x1E0CB5C70];
      break;
    default:
      v4 = (void **)MEMORY[0x1E0CB5C68];
      break;
  }
  v5 = *v4;
  sub_1BC9B3A7C();
  v6 = (void *)MEMORY[0x1BCCFADBC](v5);
  v7 = objc_msgSend(v2, sel_preferredUnitForType_, v6);

  return (HKUnit)v7;
}

id HKWorkout.makeDurationAttributedText(healthStore:unitPreferenceController:valueFont:unitFont:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  void *v5;
  id v10;
  id result;
  void *v12;
  id v13;
  id v14;
  id v15;
  void *v16;
  id v17;

  v5 = v4;
  v10 = objc_msgSend((id)objc_opt_self(), sel_hourUnit);
  result = objc_msgSend(a1, sel_displayTypeController);
  if (result)
  {
    v12 = result;
    v13 = objc_msgSend(v5, sel_sampleType);
    v14 = objc_msgSend(v12, sel_displayTypeForObjectType_, v13);

    if (v14)
    {
      v15 = objc_msgSend(v14, sel_hk_valueFormatterForUnit_, v10);
      objc_msgSend(v5, sel_duration);
      v16 = (void *)sub_1BCAB4FC8();
      v17 = objc_msgSend(v15, sel_attributedStringFromValue_displayType_unitController_valueFont_unitFont_formatForChart_, v16, v14, a2, a3, a4, 1);

    }
    else
    {

      return 0;
    }
    return v17;
  }
  else
  {
    __break(1u);
  }
  return result;
}

HealthVisualization::CorrelatedStatisticsQueryConfiguration __swiftcall CorrelatedStatisticsQueryConfiguration.init(correlatedTypeIdentifiers:statisticsQueryConfig:)(Swift::OpaquePointer correlatedTypeIdentifiers, HealthVisualization::StatisticsQueryConfiguration statisticsQueryConfig)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  __int16 v5;
  HealthVisualization::CorrelatedStatisticsQueryConfiguration result;

  v3 = **(_BYTE **)&statisticsQueryConfig.dateRange;
  v4 = *(_QWORD *)(*(_QWORD *)&statisticsQueryConfig.dateRange + 8);
  v5 = *(_WORD *)(*(_QWORD *)&statisticsQueryConfig.dateRange + 16);
  *(Swift::OpaquePointer *)v2 = correlatedTypeIdentifiers;
  *(_BYTE *)(v2 + 8) = v3;
  *(_QWORD *)(v2 + 16) = v4;
  *(_WORD *)(v2 + 24) = v5;
  result.statisticsQueryConfig = statisticsQueryConfig;
  result.correlatedTypeIdentifiers = correlatedTypeIdentifiers;
  return result;
}

uint64_t CorrelatedStatisticsQueryConfiguration.correlatedTypeIdentifiers.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t CorrelatedStatisticsQueryConfiguration.statisticsQueryConfig.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  __int16 v3;

  v2 = *(_QWORD *)(v1 + 16);
  v3 = *(_WORD *)(v1 + 24);
  *(_BYTE *)a1 = *(_BYTE *)(v1 + 8);
  *(_QWORD *)(a1 + 8) = v2;
  *(_WORD *)(a1 + 16) = v3;
  return swift_bridgeObjectRetain();
}

unint64_t sub_1BCA54974()
{
  _BYTE *v0;

  if (*v0)
    return 0xD000000000000015;
  else
    return 0xD000000000000019;
}

uint64_t sub_1BCA549B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1BCA55494(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1BCA549D8()
{
  sub_1BCA55030();
  return sub_1BCAB68D0();
}

uint64_t sub_1BCA54A00()
{
  sub_1BCA55030();
  return sub_1BCAB68DC();
}

uint64_t CorrelatedStatisticsQueryConfiguration.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  int v10;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  int v20;
  char v21;

  sub_1BCA55074(0, &qword_1ED6C47A0, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED170]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v12 - v7;
  v9 = *v1;
  v20 = *((unsigned __int8 *)v1 + 8);
  v15 = v1[2];
  v10 = *((unsigned __int8 *)v1 + 24);
  v13 = *((unsigned __int8 *)v1 + 25);
  v14 = v10;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BCA55030();
  sub_1BCAB68B8();
  v16 = v9;
  v21 = 0;
  sub_1BC9E6670();
  sub_1BCA550D0(&qword_1ED6C45C8, MEMORY[0x1E0DEA970], MEMORY[0x1E0DEAF10]);
  sub_1BCAB6774();
  if (!v2)
  {
    LOBYTE(v16) = v20;
    v17 = v15;
    v18 = v14;
    v19 = v13;
    v21 = 1;
    sub_1BCA2B4CC();
    sub_1BCAB6774();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t CorrelatedStatisticsQueryConfiguration.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  __int16 v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int16 v18;
  char v19;

  sub_1BCA55074(0, &qword_1ED6C6F08, MEMORY[0x1E0DED048]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v15 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BCA55030();
  sub_1BCAB68AC();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  sub_1BC9E6670();
  v19 = 0;
  sub_1BCA550D0(&qword_1ED6C6E18, MEMORY[0x1E0DEA9A0], MEMORY[0x1E0DEAF40]);
  sub_1BCAB66E4();
  v10 = v16;
  v19 = 1;
  sub_1BCA2B7D0();
  swift_bridgeObjectRetain();
  sub_1BCAB66E4();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  v11 = v16;
  v12 = v17;
  v13 = v18;
  *(_QWORD *)a2 = v10;
  *(_BYTE *)(a2 + 8) = v11;
  *(_QWORD *)(a2 + 16) = v12;
  *(_WORD *)(a2 + 24) = v13;
  swift_bridgeObjectRetain();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1BCA54DD4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return CorrelatedStatisticsQueryConfiguration.init(from:)(a1, a2);
}

uint64_t sub_1BCA54DE8(_QWORD *a1)
{
  return CorrelatedStatisticsQueryConfiguration.encode(to:)(a1);
}

uint64_t CorrelatedStatisticsQueryConfiguration.correlatedQuantityTypes.getter()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  void *ObjCClassFromMetadata;
  uint64_t v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v9;

  v1 = *v0;
  v9 = MEMORY[0x1E0DEE9D8];
  v2 = *(_QWORD *)(*v0 + 16);
  if (v2)
  {
    sub_1BC9B3A7C();
    ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
    swift_bridgeObjectRetain_n();
    v4 = v1 + 40;
    do
    {
      swift_bridgeObjectRetain();
      v5 = (void *)sub_1BCAB5EE0();
      v6 = objc_msgSend(ObjCClassFromMetadata, sel_quantityTypeForIdentifier_, v5);
      swift_bridgeObjectRelease();

      if (v6)
      {
        MEMORY[0x1BCCFABF4]();
        if (*(_QWORD *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          sub_1BCAB6030();
        sub_1BCAB6054();
        sub_1BCAB6024();
      }
      v4 += 16;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease();
    v7 = v9;
  }
  else
  {
    swift_bridgeObjectRetain();
    v7 = MEMORY[0x1E0DEE9D8];
  }
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t _s19HealthVisualization38CorrelatedStatisticsQueryConfigurationV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  char v2;
  uint64_t v3;
  char v4;
  char v5;
  uint64_t v6;
  char v7;
  char v8;
  char v9;
  char v10;

  v2 = *(_BYTE *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_BYTE *)(a1 + 24);
  v5 = *(_BYTE *)(a1 + 25);
  v6 = *(_QWORD *)(a2 + 16);
  if ((sub_1BC9A8CF4(*(_QWORD **)a1, *(_QWORD **)a2) & 1) != 0)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1BC9991D8(v2);
    if ((v7 & 1) != 0 && (sub_1BC9A920C(v3, v6) & 1) != 0 && (sub_1BC9993E0(v4), (v8 & 1) != 0))
    {
      sub_1BC9995AC(v5);
      v10 = v9;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v10 & 1) != 0)
        return 1;
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
  }
  return 0;
}

unint64_t sub_1BCA55030()
{
  unint64_t result;

  result = qword_1ED6C6CF8;
  if (!qword_1ED6C6CF8)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCAC65EC, &type metadata for CorrelatedStatisticsQueryConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED6C6CF8);
  }
  return result;
}

void sub_1BCA55074(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_1BCA55030();
    v7 = a3(a1, &type metadata for CorrelatedStatisticsQueryConfiguration.CodingKeys, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t sub_1BCA550D0(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    sub_1BC9E6670();
    v8 = a2;
    result = MEMORY[0x1BCCFBE84](a3, v7, &v8);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t initializeWithCopy for CorrelatedStatisticsQueryConfiguration(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for CorrelatedStatisticsQueryConfiguration(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
  return a1;
}

__n128 __swift_memcpy26_8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 10) = *(_OWORD *)(a2 + 10);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for CorrelatedStatisticsQueryConfiguration(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for CorrelatedStatisticsQueryConfiguration(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 26))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CorrelatedStatisticsQueryConfiguration(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_WORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 26) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 26) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for CorrelatedStatisticsQueryConfiguration()
{
  return &type metadata for CorrelatedStatisticsQueryConfiguration;
}

uint64_t storeEnumTagSinglePayload for CorrelatedStatisticsQueryConfiguration.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1BCA5533C + 4 * byte_1BCAC6475[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1BCA55370 + 4 * asc_1BCAC6470[v4]))();
}

uint64_t sub_1BCA55370(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BCA55378(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BCA55380);
  return result;
}

uint64_t sub_1BCA5538C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BCA55394);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1BCA55398(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BCA553A0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CorrelatedStatisticsQueryConfiguration.CodingKeys()
{
  return &type metadata for CorrelatedStatisticsQueryConfiguration.CodingKeys;
}

unint64_t sub_1BCA553C0()
{
  unint64_t result;

  result = qword_1EF479FB0;
  if (!qword_1EF479FB0)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCAC65C4, &type metadata for CorrelatedStatisticsQueryConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF479FB0);
  }
  return result;
}

unint64_t sub_1BCA55408()
{
  unint64_t result;

  result = qword_1ED6C6D08;
  if (!qword_1ED6C6D08)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCAC6534, &type metadata for CorrelatedStatisticsQueryConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED6C6D08);
  }
  return result;
}

unint64_t sub_1BCA55450()
{
  unint64_t result;

  result = qword_1ED6C6D00;
  if (!qword_1ED6C6D00)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCAC655C, &type metadata for CorrelatedStatisticsQueryConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED6C6D00);
  }
  return result;
}

uint64_t sub_1BCA55494(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 0xD000000000000019 && a2 == 0x80000001BCAD2610 || (sub_1BCAB67C8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x80000001BCAD2630)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v5 = sub_1BCAB67C8();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t static ActivitySnidgetCurrentValueStringSupport.numericalFont.getter()
{
  objc_msgSend((id)objc_opt_self(), sel_hk_currentDeviceHas4InchScreen);
  sub_1BC9C17AC();
  return sub_1BCAB62E8();
}

uint64_t static ActivitySnidgetCurrentValueStringSupport.valueLabelTextFont.getter()
{
  return sub_1BCA55650();
}

uint64_t static ActivitySnidgetCurrentValueStringSupport.supplementaryLabelFont.getter()
{
  return sub_1BCA55650();
}

uint64_t static ActivitySnidgetCurrentValueStringSupport.unitFont.getter()
{
  return sub_1BCA55650();
}

uint64_t static ActivitySnidgetCurrentValueStringSupport.pausedRingTitleFont.getter()
{
  return sub_1BCA55650();
}

uint64_t sub_1BCA55650()
{
  sub_1BC9C17AC();
  return sub_1BCAB62E8();
}

uint64_t static ActivitySnidgetCurrentValueStringSupport.pausedRingDetailFont.getter()
{
  sub_1BC9C17AC();
  return sub_1BCAB62E8();
}

ValueMetadata *type metadata accessor for ActivitySnidgetCurrentValueStringSupport()
{
  return &type metadata for ActivitySnidgetCurrentValueStringSupport;
}

uint64_t static ActivitySummaryQueryConfiguration.== infix(_:_:)()
{
  return 1;
}

uint64_t sub_1BCA55704()
{
  sub_1BCA5586C();
  return sub_1BCAB68D0();
}

uint64_t sub_1BCA5572C()
{
  sub_1BCA5586C();
  return sub_1BCAB68DC();
}

uint64_t ActivitySummaryQueryConfiguration.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;

  sub_1BCA55814();
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BCA5586C();
  sub_1BCAB68B8();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

void sub_1BCA55814()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EF479FB8)
  {
    sub_1BCA5586C();
    v0 = sub_1BCAB6780();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EF479FB8);
  }
}

unint64_t sub_1BCA5586C()
{
  unint64_t result;

  result = qword_1EF479FC0;
  if (!qword_1EF479FC0)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCAC6770, &type metadata for ActivitySummaryQueryConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF479FC0);
  }
  return result;
}

uint64_t ActivitySummaryQueryConfiguration.init(from:)(uint64_t a1)
{
  return __swift_destroy_boxed_opaque_existential_1(a1);
}

uint64_t sub_1BCA558D4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;

  sub_1BCA55814();
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BCA5586C();
  sub_1BCAB68B8();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

ValueMetadata *type metadata accessor for ActivitySummaryQueryConfiguration()
{
  return &type metadata for ActivitySummaryQueryConfiguration;
}

ValueMetadata *type metadata accessor for ActivitySummaryQueryConfiguration.CodingKeys()
{
  return &type metadata for ActivitySummaryQueryConfiguration.CodingKeys;
}

unint64_t sub_1BCA559B8()
{
  unint64_t result;

  result = qword_1EF479FC8;
  if (!qword_1EF479FC8)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCAC6720, &type metadata for ActivitySummaryQueryConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF479FC8);
  }
  return result;
}

unint64_t sub_1BCA55A00()
{
  unint64_t result;

  result = qword_1EF479FD0;
  if (!qword_1EF479FD0)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCAC6748, &type metadata for ActivitySummaryQueryConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF479FD0);
  }
  return result;
}

uint64_t CorrelatedStatisticsCollectionQueryOperation.result.getter()
{
  uint64_t v1;

  swift_retain();
  sub_1BCAB5070();
  swift_release();
  return v1;
}

uint64_t sub_1BCA55A90@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  uint64_t v3;
  char v4;

  swift_retain();
  sub_1BCAB5070();
  result = swift_release();
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  return result;
}

uint64_t sub_1BCA55AEC(uint64_t a1)
{
  id v1;
  char v3;

  v1 = *(id *)a1;
  v3 = *(_BYTE *)(a1 + 8);
  sub_1BC9A81A4(*(id *)a1, v3);
  swift_retain();
  sub_1BCAB507C();
  sub_1BC9A836C(v1, v3);
  return swift_release();
}

id CorrelatedStatisticsCollectionQueryOperation.__allocating_init(correlationType:correlatedQuantityTypes:configuration:configurationOverrides:name:queryQualityOfService:healthStore:environment:resultHandler:)(void *a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, char a9, uint64_t a10, uint64_t a11)
{
  objc_class *v11;
  id v18;
  id v19;

  v18 = objc_allocWithZone(v11);
  v19 = sub_1BCA57044(a1, a2, a3, a4, a5, a6, a7, a8, a9 & 1, a10, a11);

  swift_release();
  return v19;
}

id CorrelatedStatisticsCollectionQueryOperation.init(correlationType:correlatedQuantityTypes:configuration:configurationOverrides:name:queryQualityOfService:healthStore:environment:resultHandler:)(void *a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, char a9, uint64_t a10, uint64_t a11)
{
  id v13;

  v13 = sub_1BCA57044(a1, a2, a3, a4, a5, a6, a7, a8, a9 & 1, a10, a11);

  swift_release();
  return v13;
}

Swift::Void __swiftcall CorrelatedStatisticsCollectionQueryOperation.main()()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  void *v7;
  _BYTE *v8;
  Swift::String v9;
  Swift::String v10;
  id v11;
  char *v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, char *, uint64_t);
  unint64_t v22;
  uint64_t v23;
  void *v24;
  void *v25;
  id v26;
  unsigned __int8 *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t i;
  id v32;
  void *v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  id v41;
  void *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  char v48;
  _QWORD aBlock[6];

  v1 = sub_1BCAB54A8();
  v45 = *(_QWORD *)(v1 - 8);
  v46 = v1;
  v2 = *(_QWORD *)(v45 + 64);
  MEMORY[0x1E0C80A78](v1);
  v3 = (char *)&v43 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v43 - v5;
  sub_1BC9A7EA4();
  v7 = (void *)swift_allocError();
  *v8 = 2;
  v47 = v7;
  v48 = 1;
  swift_retain();
  sub_1BCAB507C();

  swift_release();
  v9._countAndFlagsBits = 0x676E696E6E7572;
  v9._object = (void *)0xE700000000000000;
  v10._countAndFlagsBits = 0;
  v10._object = (void *)0xE000000000000000;
  NSOperation.logLifeCycleEvent(_:withPrivateInfo:)(v9, v10);
  if (qword_1ED6C7098 != -1)
    swift_once();
  v11 = (id)qword_1ED6C69C0;
  v12 = v0;
  sub_1BCAB549C();
  sub_1BCAB6270();
  sub_1BC9A7EF4();
  v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_1BCABE680;
  v14 = objc_msgSend(*(id *)&v12[qword_1ED6C2E30], sel_identifier);
  v15 = sub_1BCAB5F04();
  v17 = v16;

  *(_QWORD *)(v13 + 56) = MEMORY[0x1E0DEA968];
  *(_QWORD *)(v13 + 64) = sub_1BC9A7FA4();
  *(_QWORD *)(v13 + 32) = v15;
  *(_QWORD *)(v13 + 40) = v17;
  sub_1BCAB5484();
  swift_bridgeObjectRelease();
  v18 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v20 = v45;
  v19 = v46;
  v21 = *(void (**)(char *, char *, uint64_t))(v45 + 16);
  v44 = v6;
  v21(v3, v6, v46);
  v22 = (*(unsigned __int8 *)(v20 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80);
  v23 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v20 + 32))(v23 + v22, v3, v19);
  *(_QWORD *)(v23 + ((v2 + v22 + 7) & 0xFFFFFFFFFFFFFFF8)) = v18;
  aBlock[4] = sub_1BCA573B8;
  aBlock[5] = v23;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1BC9B17C8;
  aBlock[3] = &block_descriptor_12;
  v24 = _Block_copy(aBlock);
  v25 = (void *)objc_opt_self();
  swift_retain();
  v26 = objc_msgSend(v25, sel_blockOperationWithBlock_, v24);
  _Block_release(v24);
  swift_release();
  swift_release();
  v27 = v12;
  v28 = swift_bridgeObjectRetain();
  v29 = sub_1BCA56CF0(v28, v27);
  swift_bridgeObjectRelease();

  if (v29 >> 62)
  {
    swift_bridgeObjectRetain();
    v30 = sub_1BCAB65DC();
    if (!v30)
      goto LABEL_12;
  }
  else
  {
    v30 = *(_QWORD *)((v29 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v30)
      goto LABEL_12;
  }
  if (v30 < 1)
  {
    __break(1u);
    goto LABEL_28;
  }
  for (i = 0; i != v30; ++i)
  {
    if ((v29 & 0xC000000000000001) != 0)
      v32 = (id)MEMORY[0x1BCCFB0D4](i, v29);
    else
      v32 = *(id *)(v29 + 8 * i + 32);
    v33 = v32;
    objc_msgSend(v26, sel_addDependency_, v32);

  }
LABEL_12:
  swift_bridgeObjectRelease();
  if (v29 >> 62)
  {
    sub_1BC9A649C(0, (unint64_t *)&qword_1ED6C6E50);
    swift_bridgeObjectRetain();
    v34 = sub_1BCAB65D0();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
    sub_1BCAB67D4();
    sub_1BC9A649C(0, (unint64_t *)&qword_1ED6C6E50);
    v34 = v29;
  }
  swift_bridgeObjectRelease();
  aBlock[0] = v34;
  v35 = v26;
  v36 = swift_bridgeObjectRetain();
  MEMORY[0x1BCCFABF4](v36);
  if (*(_QWORD *)((aBlock[0] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((aBlock[0] & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
    sub_1BCAB6030();
  sub_1BCAB6054();
  sub_1BCAB6024();
  v37 = aBlock[0];
  swift_bridgeObjectRelease();
  if (!(v37 >> 62))
  {
    v38 = *(_QWORD *)((v37 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v38)
      goto LABEL_19;
LABEL_26:
    swift_bridgeObjectRelease_n();
    objc_msgSend(*(id *)&v27[qword_1ED6C2E28], sel_setSuspended_, 0);

    (*(void (**)(char *, uint64_t))(v45 + 8))(v44, v46);
    return;
  }
  swift_bridgeObjectRetain();
  v38 = sub_1BCAB65DC();
  if (!v38)
    goto LABEL_26;
LABEL_19:
  if (v38 >= 1)
  {
    v39 = 0;
    v40 = *(void **)&v27[qword_1ED6C2E28];
    do
    {
      if ((v37 & 0xC000000000000001) != 0)
        v41 = (id)MEMORY[0x1BCCFB0D4](v39, v37);
      else
        v41 = *(id *)(v37 + 8 * v39 + 32);
      v42 = v41;
      ++v39;
      objc_msgSend(v40, sel_addOperation_, v41);

    }
    while (v38 != v39);
    goto LABEL_26;
  }
LABEL_28:
  __break(1u);
}

void sub_1BCA56294(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char *v3;
  char *v4;
  Swift::String v5;
  Swift::String v6;
  uint64_t v7;
  void (*v8)(uint64_t, _QWORD);
  uint64_t v9;

  v2 = a2 + 16;
  sub_1BCAB6264();
  if (qword_1ED6C7098 != -1)
    swift_once();
  sub_1BCAB5490();
  swift_beginAccess();
  v3 = (char *)MEMORY[0x1BCCFC004](v2);
  if (v3)
  {
    v4 = v3;
    if ((objc_msgSend(v3, sel_isCancelled) & 1) != 0)
    {
      v5._object = (void *)0x80000001BCACE790;
      v5._countAndFlagsBits = 0xD00000000000002DLL;
      v6._countAndFlagsBits = 0;
      v6._object = (void *)0xE000000000000000;
      NSOperation.logLifeCycleEvent(_:withPrivateInfo:)(v5, v6);
LABEL_7:

      return;
    }
    if ((objc_msgSend(v4, sel_isFinished) & 1) != 0)
      goto LABEL_7;
    swift_retain();
    sub_1BCAB5070();
    v7 = swift_release();
    v8 = *(void (**)(uint64_t, _QWORD))&v4[qword_1ED6D37D0];
    if (v8)
    {
      swift_retain();
      v8(v9, 0);
      v7 = sub_1BC9EED1C((uint64_t)v8);
    }
    MEMORY[0x1E0C80A78](v7);
    sub_1BCAB50AC();

    swift_bridgeObjectRelease();
  }
}

void sub_1BCA5644C(void *a1)
{
  id v1;

  v1 = a1;
  CorrelatedStatisticsCollectionQueryOperation.main()();

}

Swift::Void __swiftcall CorrelatedStatisticsCollectionQueryOperation.cleanUp()()
{
  char *v0;
  Swift::String v1;
  Swift::String v2;
  void *v3;
  _BYTE *v4;
  char *v5;
  uint64_t v6;

  v1._countAndFlagsBits = 0x676E696E61656C63;
  v1._object = (void *)0xEB00000000707520;
  v2._countAndFlagsBits = 0;
  v2._object = (void *)0xE000000000000000;
  NSOperation.logLifeCycleEvent(_:withPrivateInfo:)(v1, v2);
  if (objc_msgSend(v0, sel_isCancelled))
  {
    sub_1BC9A7EA4();
    v3 = (void *)swift_allocError();
    *v4 = 3;
    MEMORY[0x1E0C80A78](v3);
    swift_retain();
    sub_1BCAB507C();

    swift_release();
  }
  v5 = &v0[qword_1ED6D37D0];
  v6 = *(_QWORD *)&v0[qword_1ED6D37D0];
  *(_QWORD *)v5 = 0;
  *((_QWORD *)v5 + 1) = 0;
  sub_1BC9EED1C(v6);
  objc_msgSend(*(id *)&v0[qword_1ED6C2E28], sel_cancelAllOperations);
}

id CorrelatedStatisticsCollectionQueryOperation.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void CorrelatedStatisticsCollectionQueryOperation.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void sub_1BCA565F4()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void sub_1BCA56620()
{
  uint64_t v0;

  swift_release();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1BCA57564(v0 + qword_1ED6D37E0);

  swift_release();
  sub_1BC9EED1C(*(_QWORD *)(v0 + qword_1ED6D37D0));

}

id CorrelatedStatisticsCollectionQueryOperation.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

void sub_1BCA566F8(uint64_t a1)
{
  swift_release();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1BCA57564(a1 + qword_1ED6D37E0);

  swift_release();
  sub_1BC9EED1C(*(_QWORD *)(a1 + qword_1ED6D37D0));

}

uint64_t sub_1BCA567A8@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  uint64_t v3;
  char v4;

  swift_retain();
  sub_1BCAB5070();
  result = swift_release();
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  return result;
}

void sub_1BCA56804(void *a1, char a2, uint64_t a3, void *a4)
{
  uint64_t v7;
  char *v8;
  char *v9;
  id v10;
  Swift::String v11;
  Swift::String v12;
  id v13;
  id v14;
  Swift::String v15;
  Swift::String v16;
  void (*v17)(void *, uint64_t);
  id v18;

  v7 = a3 + 16;
  swift_beginAccess();
  v8 = (char *)MEMORY[0x1BCCFC004](v7);
  if (v8)
  {
    v9 = v8;
    if ((objc_msgSend(v8, sel_isCancelled) & 1) != 0)
    {
      sub_1BCAB64C8();
      v10 = objc_msgSend(a4, sel_identifier);
      sub_1BCAB5F04();

      sub_1BCAB5F70();
      swift_bridgeObjectRelease();
      sub_1BCAB5F70();
      v11._countAndFlagsBits = 0;
      v12._object = (void *)0x80000001BCACE790;
      v12._countAndFlagsBits = 0xD00000000000002DLL;
      v11._object = (void *)0xE000000000000000;
      NSOperation.logLifeCycleEvent(_:withPrivateInfo:)(v12, v11);

      swift_bridgeObjectRelease();
    }
    else
    {
      v13 = objc_msgSend(v9, sel_isFinished);
      if ((v13 & 1) == 0)
      {
        if ((a2 & 1) != 0)
        {
          swift_getErrorValue();
          v14 = a1;
          v15._countAndFlagsBits = sub_1BCAB6810();
          v16._countAndFlagsBits = 0;
          v16._object = (void *)0xE000000000000000;
          NSOperation.logErrorString(_:withInfo:)(v15, v16);
          swift_bridgeObjectRelease();
          v17 = *(void (**)(void *, uint64_t))&v9[qword_1ED6D37D0];
          if (v17)
          {
            sub_1BC9F3F44(a1);
            sub_1BC9B30EC((uint64_t)v17);
            v17(a1, 1);
            v18 = (id)sub_1BC9EED1C((uint64_t)v17);
          }
          else
          {
            v18 = a1;
          }
          MEMORY[0x1E0C80A78](v18);
          sub_1BCAB50AC();
          sub_1BC9B39B4(a1);
        }
        else
        {
          MEMORY[0x1E0C80A78](v13);
          sub_1BC9F3F44(a1);
          swift_retain();
          sub_1BCAB507C();
          swift_release();
        }
        sub_1BC9B39B4(a1);
        sub_1BCA56ABC((uint64_t)v9, a4);
      }

    }
  }
}

uint64_t sub_1BCA56ABC(uint64_t a1, void *a2)
{
  id v3;
  Swift::String v4;
  Swift::String v5;

  sub_1BCAB64C8();
  v3 = objc_msgSend(a2, sel_identifier);
  sub_1BCAB5F04();

  sub_1BCAB5F70();
  swift_bridgeObjectRelease();
  sub_1BCAB5F70();
  v4._countAndFlagsBits = 0;
  v5._countAndFlagsBits = 0x64656873696E6966;
  v5._object = (void *)0xE800000000000000;
  v4._object = (void *)0xE000000000000000;
  NSOperation.logLifeCycleEvent(_:withPrivateInfo:)(v5, v4);
  return swift_bridgeObjectRelease();
}

void sub_1BCA56B94(uint64_t a1, void *a2, void *a3)
{
  id v4;

  v4 = a2;
  sub_1BCA56C50((uint64_t)a3, v4);

}

uint64_t sub_1BCA56BD4(uint64_t a1, void *a2, char a3)
{
  char v4;

  v4 = a3 & 1;
  sub_1BC9A81A4(a2, a3 & 1);
  swift_retain();
  sub_1BCAB507C();
  sub_1BC9A836C(a2, v4);
  return swift_release();
}

uint64_t sub_1BCA56C50(uint64_t a1, void *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v10;

  v3 = v2;
  v6 = *v2;
  if ((*v2 & 0xC000000000000001) == 0)
    goto LABEL_7;
  if (v6 < 0)
    v7 = *v2;
  else
    v7 = v6 & 0xFFFFFFFFFFFFFF8;
  result = sub_1BCAB6444();
  if (!__OFADD__(result, 1))
  {
    *v3 = sub_1BCAB38FC(v7, result + 1);
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v10 = *v3;
    *v3 = 0x8000000000000000;
    sub_1BC9A6238(a1, a2, isUniquelyReferenced_nonNull_native);
    *v3 = v10;
    return swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t sub_1BCA56CF0(unint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  int v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  id v24;
  id v25;
  char *v26;
  uint64_t v27;
  unsigned __int8 *v28;
  id v29;
  void *v30;
  void *v31;
  id v32;
  uint64_t v33;
  void *v34;
  int v35;
  id v36;
  int v37;
  uint64_t v38;
  int v39;
  int v40;
  unsigned __int8 *v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned __int8 v47[8];
  uint64_t v48;
  char v49;
  char v50;
  uint64_t v51;

  v3 = v2;
  sub_1BC998AB0(0, &qword_1ED6C6C98, (uint64_t (*)(uint64_t))type metadata accessor for StatisticsQueryConfigurationOverrides, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v6);
  v45 = (uint64_t)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v33 - v9;
  if (a1 >> 62)
    goto LABEL_17;
  v11 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    result = MEMORY[0x1E0DEE9D8];
    if (!v11)
      break;
    v51 = MEMORY[0x1E0DEE9D8];
    result = sub_1BCAB654C();
    if (v11 < 0)
    {
      __break(1u);
      return result;
    }
    v33 = v3;
    v13 = 0;
    v41 = &a2[qword_1ED6D37E0];
    v42 = a1 & 0xC000000000000001;
    v14 = a2[qword_1ED6C2E20];
    v3 = *(_QWORD *)&a2[qword_1ED6C2E20 + 8];
    v39 = a2[qword_1ED6C2E20 + 16];
    v40 = v14;
    v38 = *(_QWORD *)&a2[qword_1ED6D37D8];
    v37 = a2[qword_1ED6C2E20 + 17];
    v36 = *(id *)&a2[qword_1ED6D37C8];
    v34 = a2;
    v35 = a2[qword_1ED6D3838];
    v43 = v11;
    v44 = a1;
    while (v11 != v13)
    {
      if (v42)
        v29 = (id)MEMORY[0x1BCCFB0D4](v13, a1);
      else
        v29 = *(id *)(a1 + 8 * v13 + 32);
      v30 = v29;
      v31 = v34;
      sub_1BC9B390C((uint64_t)v41, (uint64_t)v10);
      swift_bridgeObjectRetain();
      v32 = objc_msgSend(v31, sel_name);
      if (v32)
      {
        v15 = v32;
        v46 = sub_1BCAB5F04();
        v17 = v16;

      }
      else
      {
        v46 = 0;
        v17 = 0;
      }
      ++v13;
      v18 = swift_allocObject();
      swift_unknownObjectWeakInit();
      v19 = swift_allocObject();
      *(_QWORD *)(v19 + 16) = v18;
      *(_QWORD *)(v19 + 24) = v30;
      v47[0] = v40;
      v48 = v3;
      v49 = v39;
      v50 = v37;
      v20 = (uint64_t)v10;
      v21 = (uint64_t)v10;
      v22 = v45;
      sub_1BC9B390C(v20, v45);
      v23 = objc_allocWithZone((Class)type metadata accessor for StatisticsCollectionQueryOperation());
      v24 = v30;
      swift_bridgeObjectRetain();
      v25 = v24;
      v26 = (char *)v36;
      v27 = v22;
      v10 = (char *)v21;
      StatisticsCollectionQueryOperation.init(sampleType:configuration:configurationOverrides:name:queryQualityOfService:healthStore:environment:resultHandler:)(v25, v47, v27, v46, v17, v38, v26, v35, (void (*)(char *, char *, uint64_t))sub_1BCA575E4, v19);
      a2 = v28;
      sub_1BCA57564(v21);

      swift_bridgeObjectRelease();
      sub_1BCAB6534();
      sub_1BCAB6558();
      sub_1BCAB6564();
      sub_1BCAB6540();
      v11 = v43;
      a1 = v44;
      if (v43 == v13)
        return v51;
    }
    __break(1u);
LABEL_17:
    swift_bridgeObjectRetain();
    v11 = sub_1BCAB65DC();
    swift_bridgeObjectRelease();
  }
  return result;
}

id sub_1BCA57044(void *a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, char a9, uint64_t a10, uint64_t a11)
{
  char *v11;
  char *v12;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t (*v20)(uint64_t, uint64_t);
  char *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  id v25;
  char *v26;
  uint64_t v27;
  id v28;
  id v29;
  id v30;
  id v31;
  void *v32;
  __int16 v35;
  char v36;
  objc_class *ObjectType;
  objc_super v41;
  unint64_t v42;
  char v43;

  v12 = v11;
  ObjectType = (objc_class *)swift_getObjectType();
  v17 = *((_QWORD *)a3 + 1);
  v35 = *((_WORD *)a3 + 8);
  v36 = *a3;
  v18 = qword_1ED6C2E38;
  sub_1BC9A7EA4();
  swift_allocError();
  *v19 = 0;
  v43 = 1;
  v20 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0D2E5C8];
  sub_1BC998AB0(0, &qword_1ED6C2CD8, (uint64_t (*)(uint64_t))sub_1BCA5761C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0D2E5C8]);
  swift_allocObject();
  v21 = v12;
  *(_QWORD *)&v12[v18] = sub_1BCAB50A0();
  v22 = qword_1ED6D37C0;
  v42 = sub_1BCA92B68(MEMORY[0x1E0DEE9D8]);
  sub_1BC998AB0(0, &qword_1ED6C2CD0, (uint64_t (*)(uint64_t))sub_1BCA57698, v20);
  swift_allocObject();
  *(_QWORD *)&v21[v22] = sub_1BCAB50A0();
  v23 = (uint64_t *)&v21[qword_1ED6D37D0];
  *v23 = 0;
  v23[1] = 0;
  v24 = qword_1ED6C2E28;
  v25 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB3828]), sel_init);
  objc_msgSend(v25, sel_setMaxConcurrentOperationCount_, 1);
  objc_msgSend(v25, sel_setSuspended_, 1);
  *(_QWORD *)&v21[v24] = v25;
  *(_QWORD *)&v21[qword_1ED6C2E30] = a1;
  *(_QWORD *)&v21[qword_1ED6C2E40] = a2;
  v26 = &v21[qword_1ED6C2E20];
  *v26 = v36;
  *((_QWORD *)v26 + 1) = v17;
  *((_WORD *)v26 + 8) = v35;
  sub_1BC9B390C(a4, (uint64_t)&v21[qword_1ED6D37E0]);
  *(_QWORD *)&v21[qword_1ED6D37D8] = a7;
  *(_QWORD *)&v21[qword_1ED6D37C8] = a8;
  v27 = *v23;
  *v23 = a10;
  v23[1] = a11;
  v28 = a1;
  v29 = a8;
  swift_retain();
  sub_1BC9EED1C(v27);
  v21[qword_1ED6D3838] = a9 & 1;

  v41.receiver = v21;
  v41.super_class = ObjectType;
  v30 = objc_msgSendSuper2(&v41, sel_init);
  v31 = v30;
  if (a6)
  {
    v32 = (void *)sub_1BCAB5EE0();
    swift_bridgeObjectRelease();
  }
  else
  {
    v32 = 0;
  }
  objc_msgSend(v30, sel_setName_, v32, a5);

  sub_1BCA57564(a4);
  return v30;
}

uint64_t sub_1BCA57320()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1BCA57344()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_1BCAB54A8();
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
  swift_release();
  return swift_deallocObject();
}

void sub_1BCA573B8()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  v1 = *(_QWORD *)(sub_1BCAB54A8() - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  sub_1BCA56294(v0 + v2, *(_QWORD *)(v0 + ((*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFF8)));
}

uint64_t type metadata accessor for CorrelatedStatisticsCollectionQueryOperation()
{
  uint64_t result;

  result = qword_1ED6C2E48;
  if (!qword_1ED6C2E48)
    return swift_getSingletonMetadata();
  return result;
}

void sub_1BCA5743C()
{
  unint64_t v0;

  sub_1BC998AB0(319, &qword_1ED6C6C98, (uint64_t (*)(uint64_t))type metadata accessor for StatisticsQueryConfigurationOverrides, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  if (v0 <= 0x3F)
    swift_initClassMetadata2();
}

uint64_t method lookup function for CorrelatedStatisticsCollectionQueryOperation()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of CorrelatedStatisticsCollectionQueryOperation.__allocating_init(correlationType:correlatedQuantityTypes:configuration:configurationOverrides:name:queryQualityOfService:healthStore:environment:resultHandler:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(class metadata base offset for CorrelatedStatisticsCollectionQueryOperation + v0 + 88))();
}

uint64_t sub_1BCA5755C()
{
  return type metadata accessor for CorrelatedStatisticsCollectionQueryOperation();
}

uint64_t sub_1BCA57564(uint64_t a1)
{
  uint64_t v2;

  sub_1BC998AB0(0, &qword_1ED6C6C98, (uint64_t (*)(uint64_t))type metadata accessor for StatisticsQueryConfigurationOverrides, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1BCA575B8()
{
  uint64_t v0;

  swift_release();

  return swift_deallocObject();
}

void sub_1BCA575E4(void *a1, char a2)
{
  uint64_t v2;

  sub_1BCA56804(a1, a2 & 1, *(_QWORD *)(v2 + 16), *(void **)(v2 + 24));
}

uint64_t sub_1BCA575F0()
{
  uint64_t v0;

  return sub_1BCA56BD4(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24), *(_BYTE *)(v0 + 32));
}

void sub_1BCA57614(uint64_t a1)
{
  uint64_t v1;

  sub_1BCA56B94(a1, *(void **)(v1 + 16), *(void **)(v1 + 24));
}

void sub_1BCA5761C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED6C2E90)
  {
    sub_1BCA57698();
    sub_1BC9A7F58(255, (unint64_t *)&qword_1ED6C6F70);
    v0 = sub_1BCAB68A0();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED6C2E90);
  }
}

void sub_1BCA57698()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED6C2E58)
  {
    sub_1BC9A649C(255, (unint64_t *)&qword_1ED6C7260);
    sub_1BC9A649C(255, &qword_1ED6C6E90);
    sub_1BCA57730();
    v0 = sub_1BCAB5E80();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED6C2E58);
  }
}

unint64_t sub_1BCA57730()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1ED6C2E68;
  if (!qword_1ED6C2E68)
  {
    v1 = sub_1BC9A649C(255, (unint64_t *)&qword_1ED6C7260);
    result = MEMORY[0x1BCCFBE84](MEMORY[0x1E0DEFCF8], v1);
    atomic_store(result, (unint64_t *)&qword_1ED6C2E68);
  }
  return result;
}

uint64_t static TrendConfiguration.configurations(for:)(void *a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  __int128 v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  int64_t v12;
  int v13;
  int v14;
  char v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v24;

  v1 = objc_msgSend(a1, sel_code);
  v2 = MEMORY[0x1E0DEE9D8];
  switch((unint64_t)v1)
  {
    case 3uLL:
      sub_1BC9D8254(0, &qword_1ED6C48B8);
      v4 = swift_allocObject();
      v2 = v4;
      *(_OWORD *)(v4 + 16) = xmmword_1BCABE680;
      *(_QWORD *)(v4 + 32) = 5;
      *(_QWORD *)(v4 + 40) = &unk_1E7544A38;
      *(_OWORD *)(v4 + 48) = xmmword_1BCAC6850;
      *(_BYTE *)(v4 + 64) = 0;
      *(_QWORD *)(v4 + 72) = 1;
      *(_QWORD *)(v4 + 80) = &unk_1E7544A60;
      v5 = &unk_1E7544A88;
      goto LABEL_32;
    case 4uLL:
    case 5uLL:
    case 6uLL:
    case 9uLL:
    case 0xBuLL:
    case 0xDuLL:
    case 0x10uLL:
    case 0x11uLL:
    case 0x12uLL:
    case 0x13uLL:
    case 0x14uLL:
    case 0x15uLL:
    case 0x16uLL:
    case 0x17uLL:
    case 0x18uLL:
    case 0x19uLL:
    case 0x1AuLL:
    case 0x1BuLL:
    case 0x1CuLL:
    case 0x1DuLL:
    case 0x1EuLL:
    case 0x1FuLL:
    case 0x20uLL:
    case 0x21uLL:
    case 0x22uLL:
    case 0x23uLL:
    case 0x24uLL:
    case 0x25uLL:
    case 0x26uLL:
    case 0x27uLL:
    case 0x28uLL:
    case 0x29uLL:
    case 0x2AuLL:
    case 0x2BuLL:
    case 0x2CuLL:
    case 0x2DuLL:
    case 0x2EuLL:
    case 0x2FuLL:
    case 0x30uLL:
    case 0x31uLL:
    case 0x32uLL:
    case 0x33uLL:
    case 0x34uLL:
    case 0x35uLL:
    case 0x36uLL:
    case 0x37uLL:
    case 0x38uLL:
    case 0x39uLL:
    case 0x3AuLL:
    case 0x3BuLL:
    case 0x3CuLL:
    case 0x40uLL:
    case 0x41uLL:
    case 0x42uLL:
    case 0x43uLL:
    case 0x44uLL:
    case 0x45uLL:
    case 0x47uLL:
    case 0x48uLL:
    case 0x49uLL:
    case 0x4AuLL:
    case 0x4CuLL:
    case 0x4DuLL:
    case 0x4EuLL:
    case 0x50uLL:
    case 0x51uLL:
    case 0x52uLL:
    case 0x53uLL:
    case 0x54uLL:
    case 0x55uLL:
    case 0x56uLL:
    case 0x57uLL:
    case 0x58uLL:
    case 0x59uLL:
    case 0x5AuLL:
    case 0x5BuLL:
    case 0x5CuLL:
    case 0x5DuLL:
    case 0x5EuLL:
    case 0x5FuLL:
    case 0x60uLL:
    case 0x61uLL:
    case 0x62uLL:
    case 0x64uLL:
    case 0x66uLL:
    case 0x67uLL:
    case 0x68uLL:
    case 0x69uLL:
    case 0x6AuLL:
    case 0x6BuLL:
    case 0x6CuLL:
    case 0x6DuLL:
    case 0x6EuLL:
    case 0x6FuLL:
    case 0x70uLL:
    case 0x72uLL:
    case 0x73uLL:
    case 0x74uLL:
    case 0x75uLL:
    case 0x77uLL:
    case 0x78uLL:
    case 0x79uLL:
    case 0x7AuLL:
    case 0x7BuLL:
    case 0x7EuLL:
    case 0x7FuLL:
    case 0x80uLL:
    case 0x81uLL:
    case 0x82uLL:
    case 0x83uLL:
    case 0x84uLL:
    case 0x85uLL:
    case 0x86uLL:
    case 0x87uLL:
    case 0x88uLL:
      return v2;
    case 7uLL:
      sub_1BC9D8254(0, &qword_1ED6C48B8);
      v4 = swift_allocObject();
      v2 = v4;
      *(_OWORD *)(v4 + 16) = xmmword_1BCABE680;
      *(_QWORD *)(v4 + 32) = 5;
      *(_QWORD *)(v4 + 40) = &unk_1E7544FF8;
      *(_OWORD *)(v4 + 48) = xmmword_1BCAC6850;
      *(_BYTE *)(v4 + 64) = 0;
      *(_QWORD *)(v4 + 72) = 1;
      *(_QWORD *)(v4 + 80) = &unk_1E7545020;
      *(_BYTE *)(v4 + 88) = 0;
      *(_QWORD *)(v4 + 96) = &unk_1E7545048;
      v6 = xmmword_1BCAC6890;
      goto LABEL_34;
    case 8uLL:
      sub_1BC9D8254(0, &qword_1ED6C48B8);
      v4 = swift_allocObject();
      v2 = v4;
      *(_OWORD *)(v4 + 16) = xmmword_1BCABE680;
      *(_QWORD *)(v4 + 32) = 5;
      *(_QWORD *)(v4 + 40) = &unk_1E7544B28;
      *(_OWORD *)(v4 + 48) = xmmword_1BCAC6850;
      *(_BYTE *)(v4 + 64) = 0;
      *(_QWORD *)(v4 + 72) = 1;
      *(_QWORD *)(v4 + 80) = &unk_1E7544B50;
      *(_BYTE *)(v4 + 88) = 0;
      *(_QWORD *)(v4 + 96) = &unk_1E7544B78;
      v6 = xmmword_1BCAC6920;
      goto LABEL_34;
    case 0xAuLL:
      sub_1BC9D8254(0, &qword_1ED6C48B8);
      v4 = swift_allocObject();
      v2 = v4;
      *(_OWORD *)(v4 + 16) = xmmword_1BCABE680;
      *(_QWORD *)(v4 + 32) = 5;
      *(_QWORD *)(v4 + 40) = &unk_1E7544830;
      *(_OWORD *)(v4 + 48) = xmmword_1BCAC6850;
      *(_BYTE *)(v4 + 64) = 0;
      *(_QWORD *)(v4 + 72) = 1;
      *(_QWORD *)(v4 + 80) = &unk_1E7544858;
      *(_BYTE *)(v4 + 88) = 0;
      *(_QWORD *)(v4 + 96) = &unk_1E7544880;
      v6 = xmmword_1BCAC6960;
      goto LABEL_34;
    case 0xCuLL:
      sub_1BC9D8254(0, &qword_1ED6C48B8);
      v4 = swift_allocObject();
      v2 = v4;
      *(_OWORD *)(v4 + 16) = xmmword_1BCABE680;
      *(_QWORD *)(v4 + 32) = 5;
      *(_QWORD *)(v4 + 40) = &unk_1E7544C18;
      *(_OWORD *)(v4 + 48) = xmmword_1BCAC6850;
      *(_BYTE *)(v4 + 64) = 0;
      *(_QWORD *)(v4 + 72) = 1;
      *(_QWORD *)(v4 + 80) = &unk_1E7544C40;
      *(_BYTE *)(v4 + 88) = 0;
      *(_QWORD *)(v4 + 96) = &unk_1E7544C68;
      v6 = xmmword_1BCAC6910;
      goto LABEL_34;
    case 0xEuLL:
      sub_1BC9D8254(0, &qword_1ED6C48B8);
      v4 = swift_allocObject();
      v2 = v4;
      *(_OWORD *)(v4 + 16) = xmmword_1BCABE680;
      *(_QWORD *)(v4 + 32) = 5;
      *(_QWORD *)(v4 + 40) = &unk_1E7544E40;
      *(_OWORD *)(v4 + 48) = xmmword_1BCAC6850;
      *(_BYTE *)(v4 + 64) = 0;
      *(_QWORD *)(v4 + 72) = 1;
      *(_QWORD *)(v4 + 80) = &unk_1E7544E68;
      *(_BYTE *)(v4 + 88) = 0;
      *(_QWORD *)(v4 + 96) = &unk_1E7544E90;
      v6 = xmmword_1BCAC68E0;
      goto LABEL_34;
    case 0xFuLL:
      sub_1BC9D8254(0, &qword_1ED6C48B8);
      v4 = swift_allocObject();
      v2 = v4;
      *(_OWORD *)(v4 + 16) = xmmword_1BCABE680;
      *(_QWORD *)(v4 + 32) = 5;
      *(_QWORD *)(v4 + 40) = &unk_1E75449C0;
      *(_OWORD *)(v4 + 48) = xmmword_1BCAC6850;
      *(_BYTE *)(v4 + 64) = 0;
      *(_QWORD *)(v4 + 72) = 1;
      *(_QWORD *)(v4 + 80) = &unk_1E75449E8;
      v7 = &unk_1E7544A10;
      goto LABEL_26;
    case 0x3DuLL:
      sub_1BC9D8254(0, &qword_1ED6C48B8);
      v4 = swift_allocObject();
      v2 = v4;
      *(_OWORD *)(v4 + 16) = xmmword_1BCABE680;
      *(_QWORD *)(v4 + 32) = 5;
      *(_QWORD *)(v4 + 40) = &unk_1E7544EB8;
      *(_OWORD *)(v4 + 48) = xmmword_1BCAC6850;
      *(_BYTE *)(v4 + 64) = 0;
      *(_QWORD *)(v4 + 72) = 1;
      *(_QWORD *)(v4 + 80) = &unk_1E7544EE0;
      *(_BYTE *)(v4 + 88) = 0;
      *(_QWORD *)(v4 + 96) = &unk_1E7544F08;
      v6 = xmmword_1BCAC68D0;
      goto LABEL_34;
    case 0x3EuLL:
      sub_1BC9D8254(0, &qword_1ED6C48B8);
      v4 = swift_allocObject();
      v2 = v4;
      *(_OWORD *)(v4 + 16) = xmmword_1BCABE680;
      *(_QWORD *)(v4 + 32) = 5;
      *(_QWORD *)(v4 + 40) = &unk_1E7544AB0;
      *(_OWORD *)(v4 + 48) = xmmword_1BCAC6850;
      *(_BYTE *)(v4 + 64) = 0;
      *(_QWORD *)(v4 + 72) = 1;
      *(_QWORD *)(v4 + 80) = &unk_1E7544AD8;
      *(_BYTE *)(v4 + 88) = 0;
      *(_QWORD *)(v4 + 96) = &unk_1E7544B00;
      v6 = xmmword_1BCAC6930;
      goto LABEL_34;
    case 0x3FuLL:
      sub_1BC9D8254(0, &qword_1ED6C48B8);
      v8 = swift_allocObject();
      *(_OWORD *)(v8 + 16) = xmmword_1BCABE680;
      v9 = sub_1BCAB62DC();
      v10 = *(_QWORD *)(v9 + 16);
      if (v10)
      {
        v24 = v8;
        sub_1BC9BAC5C(0, v10, 0);
        v11 = v2;
        v12 = sub_1BCA586F8(v9);
        v14 = v13;
        v16 = v15 & 1;
        do
        {
          if (v12 < 0 || v12 >= 1 << *(_BYTE *)(v9 + 32))
          {
            __break(1u);
LABEL_39:
            __break(1u);
LABEL_40:
            __break(1u);
            JUMPOUT(0x1BCA58330);
          }
          if (((*(_QWORD *)(v9 + 56 + (((unint64_t)v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
            goto LABEL_39;
          if (*(_DWORD *)(v9 + 36) != v14)
            goto LABEL_40;
          v17 = *(_QWORD *)(*(_QWORD *)(v9 + 48) + 8 * v12);
          v19 = *(_QWORD *)(v11 + 16);
          v18 = *(_QWORD *)(v11 + 24);
          if (v19 >= v18 >> 1)
            sub_1BC9BAC5C(v18 > 1, v19 + 1, 1);
          *(_QWORD *)(v11 + 16) = v19 + 1;
          *(_QWORD *)(v11 + 8 * v19 + 32) = v17;
          v20 = sub_1BCA5879C(v12, v14, v16 & 1, v9);
          v12 = v20;
          v14 = v21;
          v16 = v22 & 1;
          --v10;
        }
        while (v10);
        sub_1BC9EF2FC(v20, v21, v22 & 1);
        swift_bridgeObjectRelease();
        v8 = v24;
      }
      else
      {
        swift_bridgeObjectRelease();
        v11 = MEMORY[0x1E0DEE9D8];
      }
      *(_OWORD *)(v8 + 32) = xmmword_1BCAC68A0;
      *(_BYTE *)(v8 + 64) = 16;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_QWORD *)(v8 + 72) = v11;
      *(_QWORD *)(v8 + 80) = &unk_1E7544FA8;
      *(_BYTE *)(v8 + 88) = 0;
      *(_QWORD *)(v8 + 96) = &unk_1E7544FD0;
      *(_OWORD *)(v8 + 104) = xmmword_1BCAC68B0;
      *(_BYTE *)(v8 + 120) = 0;
      return v8;
    case 0x46uLL:
      sub_1BC9D8254(0, &qword_1ED6C48B8);
      v4 = swift_allocObject();
      v2 = v4;
      *(_OWORD *)(v4 + 16) = xmmword_1BCABE680;
      *(_QWORD *)(v4 + 32) = 5;
      *(_QWORD *)(v4 + 40) = &unk_1E7544920;
      *(_OWORD *)(v4 + 48) = xmmword_1BCAC6850;
      *(_BYTE *)(v4 + 64) = 0;
      *(_QWORD *)(v4 + 72) = &unk_1E7544948;
      *(_QWORD *)(v4 + 80) = &unk_1E7544970;
      *(_BYTE *)(v4 + 88) = 0;
      *(_QWORD *)(v4 + 96) = &unk_1E7544998;
      v6 = xmmword_1BCAC6950;
      goto LABEL_34;
    case 0x4BuLL:
      sub_1BC9D8254(0, &qword_1ED6C48B8);
      v4 = swift_allocObject();
      v2 = v4;
      *(_OWORD *)(v4 + 16) = xmmword_1BCABE680;
      *(_QWORD *)(v4 + 32) = 5;
      *(_QWORD *)(v4 + 40) = &unk_1E75448A8;
      *(_OWORD *)(v4 + 48) = xmmword_1BCAC6850;
      *(_BYTE *)(v4 + 64) = 0;
      *(_QWORD *)(v4 + 72) = 1;
      *(_QWORD *)(v4 + 80) = &unk_1E75448D0;
      v7 = &unk_1E75448F8;
LABEL_26:
      *(_BYTE *)(v4 + 88) = 0;
      *(_QWORD *)(v4 + 96) = v7;
      v6 = xmmword_1BCAC6940;
      goto LABEL_34;
    case 0x4FuLL:
      sub_1BC9D8254(0, &qword_1ED6C48B8);
      v4 = swift_allocObject();
      v2 = v4;
      *(_OWORD *)(v4 + 16) = xmmword_1BCABE680;
      *(_QWORD *)(v4 + 32) = 5;
      *(_QWORD *)(v4 + 40) = &unk_1E7545160;
      *(_OWORD *)(v4 + 48) = xmmword_1BCAC6850;
      *(_BYTE *)(v4 + 64) = 0;
      *(_QWORD *)(v4 + 72) = 1;
      *(_QWORD *)(v4 + 80) = &unk_1E7545188;
      *(_BYTE *)(v4 + 88) = 0;
      *(_QWORD *)(v4 + 96) = &unk_1E75451B0;
      v6 = xmmword_1BCAC6860;
      goto LABEL_34;
    case 0x63uLL:
      sub_1BC9D8254(0, &qword_1ED6C48B8);
      v4 = swift_allocObject();
      v2 = v4;
      *(_OWORD *)(v4 + 16) = xmmword_1BCABE680;
      *(_QWORD *)(v4 + 32) = 5;
      *(_QWORD *)(v4 + 40) = &unk_1E7544DC8;
      *(_OWORD *)(v4 + 48) = xmmword_1BCAC6850;
      *(_BYTE *)(v4 + 64) = 0;
      *(_QWORD *)(v4 + 72) = 1;
      *(_QWORD *)(v4 + 80) = &unk_1E7544DF0;
      *(_BYTE *)(v4 + 88) = 0;
      *(_QWORD *)(v4 + 96) = &unk_1E7544E18;
      v6 = xmmword_1BCAC68F0;
      goto LABEL_34;
    case 0x65uLL:
    case 0x71uLL:
      sub_1BC9D8254(0, &qword_1ED6C48B8);
      v2 = swift_allocObject();
      *(_OWORD *)(v2 + 16) = xmmword_1BCABE680;
      *(_QWORD *)(v2 + 32) = 5;
      *(_QWORD *)(v2 + 40) = &unk_1E7544BA0;
      *(_OWORD *)(v2 + 48) = xmmword_1BCAC6850;
      *(_BYTE *)(v2 + 64) = 0;
      *(_QWORD *)(v2 + 72) = 1;
      *(_QWORD *)(v2 + 80) = &unk_1E7544BC8;
      *(_BYTE *)(v2 + 88) = 0;
      *(_QWORD *)(v2 + 104) = 0;
      *(_QWORD *)(v2 + 112) = 0;
      *(_QWORD *)(v2 + 96) = &unk_1E7544BF0;
      *(_BYTE *)(v2 + 120) = 1;
      return v2;
    case 0x76uLL:
      sub_1BC9D8254(0, &qword_1ED6C48B8);
      v4 = swift_allocObject();
      v2 = v4;
      *(_OWORD *)(v4 + 16) = xmmword_1BCABE680;
      *(_QWORD *)(v4 + 32) = 5;
      *(_QWORD *)(v4 + 40) = &unk_1E7544F30;
      *(_OWORD *)(v4 + 48) = xmmword_1BCAC6850;
      *(_BYTE *)(v4 + 64) = 0;
      *(_QWORD *)(v4 + 72) = 1;
      *(_QWORD *)(v4 + 80) = &unk_1E7544F58;
      *(_BYTE *)(v4 + 88) = 0;
      *(_QWORD *)(v4 + 96) = &unk_1E7544F80;
      v6 = xmmword_1BCAC68C0;
      goto LABEL_34;
    case 0x7CuLL:
      sub_1BC9D8254(0, &qword_1ED6C48B8);
      v4 = swift_allocObject();
      v2 = v4;
      *(_OWORD *)(v4 + 16) = xmmword_1BCABE680;
      *(_QWORD *)(v4 + 32) = 5;
      *(_QWORD *)(v4 + 40) = &unk_1E7545070;
      *(_OWORD *)(v4 + 48) = xmmword_1BCAC6850;
      *(_BYTE *)(v4 + 64) = 0;
      *(_QWORD *)(v4 + 72) = 1;
      *(_QWORD *)(v4 + 80) = &unk_1E7545098;
      *(_BYTE *)(v4 + 88) = 0;
      *(_QWORD *)(v4 + 96) = &unk_1E75450C0;
      v6 = xmmword_1BCAC6880;
      goto LABEL_34;
    case 0x7DuLL:
      sub_1BC9D8254(0, &qword_1ED6C48B8);
      v4 = swift_allocObject();
      v2 = v4;
      *(_OWORD *)(v4 + 16) = xmmword_1BCABE680;
      *(_QWORD *)(v4 + 32) = 5;
      *(_QWORD *)(v4 + 40) = &unk_1E7544D50;
      *(_OWORD *)(v4 + 48) = xmmword_1BCAC6850;
      *(_BYTE *)(v4 + 64) = 0;
      *(_QWORD *)(v4 + 72) = 1;
      *(_QWORD *)(v4 + 80) = &unk_1E7544D78;
      v5 = &unk_1E7544DA0;
LABEL_32:
      *(_BYTE *)(v4 + 88) = 0;
      *(_QWORD *)(v4 + 96) = v5;
      v6 = xmmword_1BCAC6900;
      goto LABEL_34;
    case 0x89uLL:
      sub_1BC9D8254(0, &qword_1ED6C48B8);
      v4 = swift_allocObject();
      v2 = v4;
      *(_OWORD *)(v4 + 16) = xmmword_1BCABE680;
      *(_QWORD *)(v4 + 32) = 5;
      *(_QWORD *)(v4 + 40) = &unk_1E75450E8;
      *(_OWORD *)(v4 + 48) = xmmword_1BCAC6850;
      *(_BYTE *)(v4 + 64) = 0;
      *(_QWORD *)(v4 + 72) = 1;
      *(_QWORD *)(v4 + 80) = &unk_1E7545110;
      *(_BYTE *)(v4 + 88) = 0;
      *(_QWORD *)(v4 + 96) = &unk_1E7545138;
      v6 = xmmword_1BCAC6870;
LABEL_34:
      *(_OWORD *)(v4 + 104) = v6;
      *(_BYTE *)(v4 + 120) = 0;
      return v2;
    default:
      if (v1 == (id)266)
      {
        sub_1BC9D8254(0, &qword_1ED6C48B8);
        v2 = swift_allocObject();
        *(_OWORD *)(v2 + 16) = xmmword_1BCABE680;
        sub_1BCA92C8C((uint64_t)&unk_1E7544D08);
        *(_QWORD *)(v2 + 32) = 5;
        *(_QWORD *)(v2 + 40) = &unk_1E7544C90;
        *(_OWORD *)(v2 + 48) = xmmword_1BCAC6850;
        *(_BYTE *)(v2 + 64) = 0;
        *(_QWORD *)(v2 + 72) = 1;
        *(_QWORD *)(v2 + 80) = &unk_1E7544CB8;
        *(_BYTE *)(v2 + 88) = 0;
        *(_QWORD *)(v2 + 96) = &unk_1E7544CE0;
        *(_QWORD *)(v2 + 104) = v3;
        *(_QWORD *)(v2 + 112) = 0x401C000000000000;
        *(_BYTE *)(v2 + 120) = 0;
      }
      return v2;
  }
}

uint64_t static TrendConfiguration.correlatedConfigurations(for:)(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if (objc_msgSend(a1, sel_code) != (id)80)
    return MEMORY[0x1E0DEE9D8];
  sub_1BC9D8254(0, &qword_1EF47A008);
  v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_1BCABFE80;
  sub_1BC9D8254(0, &qword_1ED6C48B8);
  v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_1BCABE680;
  *(_QWORD *)(v2 + 32) = 5;
  *(_QWORD *)(v2 + 40) = &unk_1E75451D8;
  *(_OWORD *)(v2 + 48) = xmmword_1BCAC6850;
  *(_BYTE *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = 1;
  *(_QWORD *)(v2 + 80) = &unk_1E7545200;
  *(_BYTE *)(v2 + 88) = 0;
  *(_QWORD *)(v2 + 96) = &unk_1E7545228;
  *(_OWORD *)(v2 + 104) = xmmword_1BCAC68C0;
  *(_BYTE *)(v2 + 120) = 0;
  *(_QWORD *)(v1 + 32) = 0xD00000000000002ELL;
  *(_QWORD *)(v1 + 40) = 0x80000001BCACD930;
  *(_QWORD *)(v1 + 48) = v2;
  v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_1BCABE680;
  *(_QWORD *)(v3 + 32) = 5;
  *(_QWORD *)(v3 + 40) = &unk_1E7545250;
  *(_OWORD *)(v3 + 48) = xmmword_1BCAC6850;
  *(_BYTE *)(v3 + 64) = 0;
  *(_QWORD *)(v3 + 72) = 1;
  *(_QWORD *)(v3 + 80) = &unk_1E7545278;
  *(_BYTE *)(v3 + 88) = 0;
  *(_QWORD *)(v3 + 96) = &unk_1E75452A0;
  *(_OWORD *)(v3 + 104) = xmmword_1BCAC68C0;
  *(_BYTE *)(v3 + 120) = 0;
  *(_QWORD *)(v1 + 56) = 0xD00000000000002DLL;
  *(_QWORD *)(v1 + 64) = 0x80000001BCACD900;
  *(_QWORD *)(v1 + 72) = v3;
  return v1;
}

uint64_t sub_1BCA586F8(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 56);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 3)
    v7 = 3;
  v8 = v7 - 3;
  v9 = (unint64_t *)(a1 + 80);
  v2 = 128;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

int64_t sub_1BCA5879C(int64_t result, int a2, char a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  if ((a3 & 1) != 0)
    goto LABEL_20;
  v4 = result;
  if (result < 0 || (result = 1 << *(_BYTE *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }
  v5 = v4 >> 6;
  v6 = a4 + 56;
  v7 = *(_QWORD *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  v8 = v7 & (-2 << (v4 & 0x3F));
  if (v8)
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0;
  v9 = v5 + 1;
  v10 = (unint64_t)(result + 63) >> 6;
  if (v5 + 1 < v10)
  {
    v11 = *(_QWORD *)(v6 + 8 * v9);
    if (v11)
      return __clz(__rbit64(v11)) + (v9 << 6);
    v9 = v5 + 2;
    if (v5 + 2 < v10)
    {
      v11 = *(_QWORD *)(v6 + 8 * v9);
      if (v11)
        return __clz(__rbit64(v11)) + (v9 << 6);
      while (v10 - 3 != v5)
      {
        v11 = *(_QWORD *)(a4 + 80 + 8 * v5++);
        if (v11)
        {
          v9 = v5 + 2;
          return __clz(__rbit64(v11)) + (v9 << 6);
        }
      }
    }
  }
  return result;
}

unint64_t static HKCategoryValueContraceptive.getLocalizedContraceptiveStringKey(_:)(void *a1)
{
  void *v2;
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v11;
  unint64_t v12;

  objc_opt_self();
  v2 = (void *)swift_dynamicCastObjCClass();
  if (v2)
  {
    v3 = a1;
    v4 = objc_msgSend(v2, sel_categoryType);
    v5 = objc_msgSend(v4, sel_identifier);

    v6 = sub_1BCAB5F04();
    v8 = v7;

    if (v6 == sub_1BCAB5F04() && v8 == v9)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      v11 = sub_1BCAB67C8();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v11 & 1) == 0)
      {
LABEL_12:
        v12 = 0;
LABEL_19:

        return v12;
      }
    }
    switch((unint64_t)objc_msgSend(v2, sel_value))
    {
      case 1uLL:
        v12 = 0xD000000000000019;
        break;
      case 2uLL:
        v12 = 0xD000000000000015;
        break;
      case 3uLL:
        v12 = 0xD000000000000017;
        break;
      case 4uLL:
        v12 = 0xD000000000000021;
        break;
      case 5uLL:
        v12 = 0xD00000000000001FLL;
        break;
      case 6uLL:
        v12 = 0xD000000000000012;
        break;
      case 7uLL:
        v12 = 0xD000000000000013;
        break;
      default:
        goto LABEL_12;
    }
    goto LABEL_19;
  }
  return 0;
}

unint64_t sub_1BCA58B2C(uint64_t a1)
{
  unint64_t result;

  switch(a1)
  {
    case 1:
      result = 0xD000000000000019;
      break;
    case 2:
      result = 0xD000000000000015;
      break;
    case 3:
      result = 0xD000000000000017;
      break;
    case 4:
      result = 0xD000000000000021;
      break;
    case 5:
      result = 0xD00000000000001FLL;
      break;
    case 6:
      result = 0xD000000000000012;
      break;
    case 7:
      result = 0xD000000000000013;
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

id UnitPreferenceProviding.unitPreferenceController.getter(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  id v7;

  v4 = (void *)objc_opt_self();
  v5 = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(a2 + 8) + 8))(a1);
  v6 = objc_msgSend(v4, sel_sharedInstanceForHealthStore_, v5);

  v7 = objc_msgSend(v6, sel_createHKUnitPreferenceController);
  return v7;
}

uint64_t dispatch thunk of UnitPreferenceProviding.unitPreferenceController.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t static HighlightCalendarCache.font(forKey:creation:)(uint64_t a1, uint64_t (*a2)(void))
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  id v7;
  void *v8;
  void *v9;

  if (byte_1EF47A010 != 1)
    return a2();
  if (qword_1ED6C5FF0 != -1)
    swift_once();
  v3 = (id)qword_1ED6C5560;
  HighlightCalendarCache.FontIdentifier.rawValue.getter();
  v5 = v4;
  v6 = objc_msgSend(v3, sel_objectForKey_, v4);

  if (!v6)
  {
    v6 = (id)a2();
    if (byte_1EF47A010 == 1)
    {
      v7 = (id)qword_1ED6C5560;
      HighlightCalendarCache.FontIdentifier.rawValue.getter();
      v9 = v8;
      objc_msgSend(v7, sel_setObject_forKey_, v6, v8);

    }
  }
  return (uint64_t)v6;
}

id static HighlightCalendarCache.clearCaches()()
{
  if (qword_1ED6C5FF0 != -1)
    swift_once();
  return objc_msgSend((id)qword_1ED6C5560, sel_removeAllObjects);
}

HealthVisualization::HighlightCalendarCache::FontIdentifier_optional __swiftcall HighlightCalendarCache.FontIdentifier.init(rawValue:)(NSString rawValue)
{
  char *v1;
  char *v3;
  NSString v4;
  void *v5;
  char v6;
  HealthVisualization::HighlightCalendarCache::FontIdentifier_optional result;
  char v8;
  id v9;
  void *v10;
  char v11;
  id v12;
  void *v13;
  char v14;
  id v15;
  void *v16;
  char v17;
  id v18;
  void *v19;
  char v20;
  id v21;
  void *v22;
  char v23;
  id v24;
  void *v25;
  char v26;

  v3 = v1;
  sub_1BCA50960();
  v4 = rawValue;
  v5 = (void *)sub_1BCAB6348();
  v6 = sub_1BCAB6330();

  if ((v6 & 1) != 0)
  {

    v8 = 0;
  }
  else
  {
    v9 = v4;
    v10 = (void *)sub_1BCAB6348();
    v11 = sub_1BCAB6330();

    if ((v11 & 1) != 0)
    {

      v8 = 1;
    }
    else
    {
      v12 = v9;
      v13 = (void *)sub_1BCAB6348();
      v14 = sub_1BCAB6330();

      if ((v14 & 1) != 0)
      {

        v8 = 2;
      }
      else
      {
        v15 = v12;
        v16 = (void *)sub_1BCAB6348();
        v17 = sub_1BCAB6330();

        if ((v17 & 1) != 0)
        {

          v8 = 3;
        }
        else
        {
          v18 = v15;
          v19 = (void *)sub_1BCAB6348();
          v20 = sub_1BCAB6330();

          if ((v20 & 1) != 0)
          {

            v8 = 4;
          }
          else
          {
            v21 = v18;
            v22 = (void *)sub_1BCAB6348();
            v23 = sub_1BCAB6330();

            if ((v23 & 1) != 0)
            {

              v8 = 5;
            }
            else
            {
              v24 = v21;
              v25 = (void *)sub_1BCAB6348();
              v26 = sub_1BCAB6330();

              if ((v26 & 1) != 0)
                v8 = 6;
              else
                v8 = 7;
            }
          }
        }
      }
    }
  }
  *v3 = v8;
  return result;
}

void HighlightCalendarCache.FontIdentifier.rawValue.getter()
{
  __asm { BR              X10 }
}

uint64_t sub_1BCA590E0()
{
  sub_1BCA50960();
  return sub_1BCAB6348();
}

uint64_t sub_1BCA591AC()
{
  void *v0;
  void *v1;
  void *v2;
  void *v3;
  char v4;

  sub_1BCA50960();
  HighlightCalendarCache.FontIdentifier.rawValue.getter();
  v1 = v0;
  HighlightCalendarCache.FontIdentifier.rawValue.getter();
  v3 = v2;
  v4 = sub_1BCAB6330();

  return v4 & 1;
}

uint64_t sub_1BCA59228()
{
  void *v0;
  void *v1;

  sub_1BCAB6870();
  HighlightCalendarCache.FontIdentifier.rawValue.getter();
  v1 = v0;
  sub_1BCAB633C();

  return sub_1BCAB6894();
}

void sub_1BCA5927C()
{
  void *v0;
  id v1;

  HighlightCalendarCache.FontIdentifier.rawValue.getter();
  v1 = v0;
  sub_1BCAB633C();

}

uint64_t sub_1BCA592C8()
{
  void *v0;
  void *v1;

  sub_1BCAB6870();
  HighlightCalendarCache.FontIdentifier.rawValue.getter();
  v1 = v0;
  sub_1BCAB633C();

  return sub_1BCAB6894();
}

HealthVisualization::HighlightCalendarCache::FontIdentifier_optional sub_1BCA59318(NSString *a1)
{
  return HighlightCalendarCache.FontIdentifier.init(rawValue:)(*a1);
}

void sub_1BCA59320(_QWORD *a1@<X8>)
{
  uint64_t v2;

  HighlightCalendarCache.FontIdentifier.rawValue.getter();
  *a1 = v2;
}

id sub_1BCA59344()
{
  id result;

  result = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C99D38]), sel_init);
  qword_1ED6C5560 = (uint64_t)result;
  return result;
}

id static HighlightCalendarCache.font(forKey:)()
{
  id v0;
  void *v1;
  void *v2;
  id v3;

  if (byte_1EF47A010 != 1)
    return 0;
  if (qword_1ED6C5FF0 != -1)
    swift_once();
  v0 = (id)qword_1ED6C5560;
  HighlightCalendarCache.FontIdentifier.rawValue.getter();
  v2 = v1;
  v3 = objc_msgSend(v0, sel_objectForKey_, v1);

  return v3;
}

void static HighlightCalendarCache.setFont(_:forKey:)(uint64_t a1)
{
  id v2;
  void *v3;
  id v4;

  if (byte_1EF47A010 == 1)
  {
    if (qword_1ED6C5FF0 != -1)
      swift_once();
    v2 = (id)qword_1ED6C5560;
    HighlightCalendarCache.FontIdentifier.rawValue.getter();
    v4 = v3;
    objc_msgSend(v2, sel_setObject_forKey_, a1, v3);

  }
}

id static HighlightCalendarCache.enabled(_:)(id result)
{
  byte_1EF47A010 = (char)result;
  if ((result & 1) == 0)
  {
    if (qword_1ED6C5FF0 != -1)
      swift_once();
    return objc_msgSend((id)qword_1ED6C5560, sel_removeAllObjects);
  }
  return result;
}

unint64_t sub_1BCA59548()
{
  unint64_t result;

  result = qword_1EF47A018[0];
  if (!qword_1EF47A018[0])
  {
    result = MEMORY[0x1BCCFBE84](&protocol conformance descriptor for HighlightCalendarCache.FontIdentifier, &type metadata for HighlightCalendarCache.FontIdentifier);
    atomic_store(result, qword_1EF47A018);
  }
  return result;
}

ValueMetadata *type metadata accessor for HighlightCalendarCache()
{
  return &type metadata for HighlightCalendarCache;
}

uint64_t storeEnumTagSinglePayload for HighlightCalendarCache.FontIdentifier(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_1BCA595E8 + 4 * byte_1BCAC69BC[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_1BCA5961C + 4 * byte_1BCAC69B7[v4]))();
}

uint64_t sub_1BCA5961C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BCA59624(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BCA5962CLL);
  return result;
}

uint64_t sub_1BCA59638(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BCA59640);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_1BCA59644(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BCA5964C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for HighlightCalendarCache.FontIdentifier()
{
  return &type metadata for HighlightCalendarCache.FontIdentifier;
}

uint64_t CoreChartTrendLineSeries.init(dataViewModel:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v4;
  uint64_t v5;
  unsigned int *v6;
  uint64_t v7;
  uint64_t v8;

  sub_1BC9964B8(a1, a2, type metadata accessor for CoreChartTrendViewModel);
  v4 = *(unsigned __int8 *)(a1 + 16);
  sub_1BC997208(a1, type metadata accessor for CoreChartTrendViewModel);
  v5 = a2 + *(int *)(type metadata accessor for CoreChartTrendLineSeries() + 20);
  switch(v4)
  {
    case 2:
      v6 = (unsigned int *)MEMORY[0x1E0CB1140];
      break;
    case 5:
      v6 = (unsigned int *)MEMORY[0x1E0CB10F8];
      break;
    default:
      v6 = (unsigned int *)MEMORY[0x1E0CB1130];
      break;
  }
  v7 = *v6;
  v8 = sub_1BCAB4F68();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 104))(v5, v7, v8);
}

uint64_t type metadata accessor for CoreChartTrendLineSeries()
{
  uint64_t result;

  result = qword_1ED6C32F8;
  if (!qword_1ED6C32F8)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t CoreChartTrendLineSeries.lineSeries.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t OpaqueTypeConformance2;
  uint64_t v18;
  uint64_t v19;
  _QWORD v21[3];
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v21[2] = a1;
  v2 = type metadata accessor for CoreChartTrendLineSeries();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  MEMORY[0x1E0C80A78](v2);
  v26 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for CoreChartTrendViewModel(0) + 36));
  sub_1BC9964B8(v1, (uint64_t)v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(_QWORD))type metadata accessor for CoreChartTrendLineSeries);
  v5 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v6 = swift_allocObject();
  sub_1BCA59FBC((uint64_t)v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v6 + v5);
  sub_1BC998AB0(0, &qword_1EF477CB8, type metadata accessor for CoreChartTrendDataElement, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
  v21[1] = v7;
  v21[0] = sub_1BCAB4E54();
  sub_1BCA0DCA4(0);
  sub_1BC996814();
  sub_1BCA0DDC8(255);
  v9 = v8;
  sub_1BCA0DEB4(255);
  v11 = v10;
  v12 = sub_1BCAB576C();
  sub_1BCA0DF74(255);
  v14 = v13;
  v15 = sub_1BCA0DFF0();
  v16 = sub_1BCA0E034();
  swift_bridgeObjectRetain();
  v22 = MEMORY[0x1E0CDFAD0];
  v23 = v15;
  v24 = v16;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  v22 = v12;
  v23 = v14;
  v24 = MEMORY[0x1E0C93AD8];
  v25 = OpaqueTypeConformance2;
  v18 = swift_getOpaqueTypeConformance2();
  v22 = v11;
  v23 = v18;
  v19 = swift_getOpaqueTypeConformance2();
  v22 = v9;
  v23 = MEMORY[0x1E0CDF5D0];
  v24 = v19;
  v25 = MEMORY[0x1E0CDF598];
  swift_getOpaqueTypeConformance2();
  sub_1BC996948(qword_1EF477CE8, type metadata accessor for CoreChartTrendDataElement, (uint64_t)&protocol conformance descriptor for CoreChartTrendDataElement);
  return sub_1BCAB5DCC();
}

uint64_t sub_1BCA599A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t OpaqueTypeConformance2;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;

  v35 = a1;
  v46 = a2;
  sub_1BCA0DF74(0);
  v3 = *(_QWORD *)(v2 - 8);
  v44 = v2;
  v45 = v3;
  MEMORY[0x1E0C80A78](v2);
  v41 = (char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BC998A54();
  MEMORY[0x1E0C80A78](v5);
  v37 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BC998AB0(0, &qword_1ED6C7288, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB11F0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v34 - v8;
  sub_1BC998B08();
  MEMORY[0x1E0C80A78](v10);
  v11 = sub_1BCAB576C();
  v38 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BCA0DEB4(0);
  v15 = *(_QWORD *)(v14 - 8);
  v39 = v14;
  v40 = v15;
  MEMORY[0x1E0C80A78](v14);
  v17 = (char *)&v34 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BCA0DDC8(0);
  v42 = *(_QWORD *)(v18 - 8);
  v43 = v18;
  MEMORY[0x1E0C80A78](v18);
  v36 = (char *)&v34 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BCAB5A6C();
  type metadata accessor for CoreChartTrendLineSeries();
  v20 = sub_1BCAB4F74();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v9, 1, 1, v20);
  v21 = v35;
  sub_1BCAB5628();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1BC998B64((uint64_t)v9);
  sub_1BCAB5A6C();
  v48 = *(_QWORD *)(v21 + *(int *)(type metadata accessor for CoreChartTrendDataElement(0) + 20));
  sub_1BCAB5634();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1BCAB4E54();
  sub_1BCAB5760();
  v22 = sub_1BCA0DFF0();
  v23 = sub_1BCA0E034();
  v24 = MEMORY[0x1E0CDFAD0];
  v25 = v41;
  sub_1BCAB5670();
  v48 = v24;
  v49 = v22;
  v50 = v23;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  v27 = MEMORY[0x1E0C93AD8];
  v28 = v44;
  sub_1BCAB55A4();
  (*(void (**)(char *, unint64_t))(v45 + 8))(v25, v28);
  (*(void (**)(char *, uint64_t))(v38 + 8))(v13, v11);
  v48 = v11;
  v49 = v28;
  v50 = v27;
  v51 = OpaqueTypeConformance2;
  v29 = v36;
  v30 = swift_getOpaqueTypeConformance2();
  v31 = v39;
  sub_1BCAB5574();
  (*(void (**)(char *, uint64_t))(v40 + 8))(v17, v31);
  if (qword_1ED6C31B8 != -1)
    swift_once();
  v47 = qword_1ED6D3848;
  v48 = v31;
  v49 = v30;
  swift_getOpaqueTypeConformance2();
  v32 = v43;
  sub_1BCAB558C();
  return (*(uint64_t (**)(char *, uint64_t))(v42 + 8))(v29, v32);
}

uint64_t sub_1BCA59E54()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = type metadata accessor for CoreChartTrendLineSeries();
  v2 = v0
     + ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80));

  v3 = type metadata accessor for CoreChartTrendViewModel(0);
  v4 = v2 + *(int *)(v3 + 28);
  v5 = sub_1BCAB4BD8();
  v6 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v6(v4, v5);
  v7 = type metadata accessor for CoreChartTrendLineViewModel(0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v8 = v2 + *(int *)(v3 + 32);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v8, 1, v7))
  {
    v6(v8, v5);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  v9 = v2 + *(int *)(v1 + 20);
  v10 = sub_1BCAB4F68();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  return swift_deallocObject();
}

uint64_t sub_1BCA59FBC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CoreChartTrendLineSeries();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1BCA5A000@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  type metadata accessor for CoreChartTrendLineSeries();
  return sub_1BCA599A0(a1, a2);
}

uint64_t getEnumTagSinglePayload for CoreChartTrendLineSeries()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BCA5A058(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  v6 = type metadata accessor for CoreChartTrendViewModel(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v8 = sub_1BCAB4F68();
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for CoreChartTrendLineSeries()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BCA5A0D8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v8 = type metadata accessor for CoreChartTrendViewModel(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v10 = sub_1BCAB4F68();
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t QuantityDistributionConfiguration.dateRange.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

void QuantityDistributionConfiguration.anchorDate.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 1);
}

uint64_t QuantityDistributionConfiguration.histogramWidth.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 2);
}

void QuantityDistributionConfiguration.bucketSize.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 3);
}

uint64_t QuantityDistributionConfiguration.contextStyle.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t QuantityDistributionConfiguration.init(dateRange:anchorDate:histogramWidth:bucketAnchor:bucketSize:contextStyle:)@<X0>(uint64_t result@<X0>, char *a2@<X1>, char a3@<W2>, char *a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  char v6;
  char v7;

  v6 = *a2;
  v7 = *a4;
  *(_BYTE *)a6 = result;
  *(_BYTE *)(a6 + 1) = v6;
  *(_BYTE *)(a6 + 2) = a3;
  *(_BYTE *)(a6 + 3) = v7;
  *(_QWORD *)(a6 + 8) = a5;
  return result;
}

uint64_t sub_1BCA5A1B0()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1BCA5A1E4
                                                            + 4 * asc_1BCAC6AF0[*v0]))(0x676E615265746164, 0xE900000000000065);
}

uint64_t sub_1BCA5A1E4()
{
  return 0x6144726F68636E61;
}

uint64_t sub_1BCA5A200()
{
  return 0x6172676F74736968;
}

uint64_t sub_1BCA5A224()
{
  return 0x6E4174656B637562;
}

uint64_t sub_1BCA5A244()
{
  return 0x695374656B637562;
}

uint64_t sub_1BCA5A264()
{
  return 0x53747865746E6F63;
}

uint64_t sub_1BCA5A284@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1BCA5B958(a1, a2);
  *a3 = result;
  return result;
}

void sub_1BCA5A2A8(_BYTE *a1@<X8>)
{
  *a1 = 6;
}

uint64_t sub_1BCA5A2B4()
{
  sub_1BCA5B2A0();
  return sub_1BCAB68D0();
}

uint64_t sub_1BCA5A2DC()
{
  sub_1BCA5B2A0();
  return sub_1BCAB68DC();
}

uint64_t QuantityDistributionConfiguration.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char v9;
  int v10;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  int v20;
  char v21;

  sub_1BCA5B36C(0, &qword_1EF47A048, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED170]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v15 - v7;
  v9 = *v1;
  v20 = v1[1];
  v10 = v1[2];
  v17 = v1[3];
  v18 = v10;
  v16 = *((_QWORD *)v1 + 1);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BCA5B2A0();
  sub_1BCAB68B8();
  LOBYTE(v19) = v9;
  v21 = 0;
  sub_1BC99B470();
  sub_1BCAB6774();
  if (!v2)
  {
    v11 = v17;
    v12 = v18;
    v13 = v16;
    LOBYTE(v19) = v20;
    v21 = 1;
    sub_1BC9AC148();
    sub_1BCAB6774();
    LOBYTE(v19) = v12;
    v21 = 2;
    sub_1BC9B7E90();
    sub_1BCAB6774();
    LOBYTE(v19) = 3;
    sub_1BCA5B2E4();
    sub_1BCAB6774();
    LOBYTE(v19) = v11;
    v21 = 4;
    sub_1BCA5B328();
    sub_1BCAB6774();
    v19 = v13;
    v21 = 5;
    type metadata accessor for _HKQuantityDistributionStyle(0);
    sub_1BCA5B450(&qword_1EF47A068, (uint64_t)&protocol conformance descriptor for _HKQuantityDistributionStyle);
    sub_1BCAB6774();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t QuantityDistributionConfiguration.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char v10;
  int v11;
  int v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  char v18;

  sub_1BCA5B36C(0, &qword_1EF47A070, MEMORY[0x1E0DED048]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v15 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BCA5B2A0();
  sub_1BCAB68AC();
  if (!v2)
  {
    v18 = 0;
    sub_1BC99B510();
    sub_1BCAB66E4();
    v10 = v16;
    v18 = 1;
    sub_1BC9AC3EC();
    sub_1BCAB66E4();
    v11 = v16;
    v18 = 2;
    sub_1BC9B7FD8();
    sub_1BCAB66E4();
    v17 = v11;
    v12 = v16;
    LOBYTE(v16) = 3;
    sub_1BCA5B3C8();
    sub_1BCAB66E4();
    HIDWORD(v15) = v12;
    v18 = 4;
    sub_1BCA5B40C();
    sub_1BCAB66E4();
    LOBYTE(v12) = v16;
    type metadata accessor for _HKQuantityDistributionStyle(0);
    v18 = 5;
    sub_1BCA5B450(&qword_1EF47A088, (uint64_t)&protocol conformance descriptor for _HKQuantityDistributionStyle);
    sub_1BCAB66E4();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    v14 = v16;
    *(_BYTE *)a2 = v10;
    *(_BYTE *)(a2 + 1) = v17;
    *(_BYTE *)(a2 + 2) = BYTE4(v15);
    *(_BYTE *)(a2 + 3) = v12;
    *(_QWORD *)(a2 + 8) = v14;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_1BCA5A82C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return QuantityDistributionConfiguration.init(from:)(a1, a2);
}

uint64_t sub_1BCA5A840(_QWORD *a1)
{
  return QuantityDistributionConfiguration.encode(to:)(a1);
}

HKQuantity __swiftcall BucketAnchor.quantityForType(type:)(HKQuantityType type)
{
  HKQuantity result;
  Class isa;
  id v3;

  result.super.isa = (Class)-[objc_class canonicalUnit](type.super.super.super.isa, sel_canonicalUnit);
  if (result.super.isa)
  {
    isa = result.super.isa;
    v3 = objc_msgSend((id)objc_opt_self(), sel_quantityWithUnit_doubleValue_, result.super.isa, 0.0);

    return (HKQuantity)v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t BucketAnchor.init(rawValue:)@<X0>(BOOL *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_1BCAB6654();
  result = swift_bridgeObjectRelease();
  *a1 = v2 != 0;
  return result;
}

void *static BucketAnchor.allCases.getter()
{
  return &unk_1E7545300;
}

uint64_t BucketAnchor.rawValue.getter()
{
  return 1869768058;
}

uint64_t sub_1BCA5A934()
{
  sub_1BCAB6870();
  sub_1BCAB5F40();
  return sub_1BCAB6894();
}

uint64_t sub_1BCA5A97C()
{
  return sub_1BCAB5F40();
}

uint64_t sub_1BCA5A98C()
{
  sub_1BCAB6870();
  sub_1BCAB5F40();
  return sub_1BCAB6894();
}

uint64_t sub_1BCA5A9D0@<X0>(BOOL *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_1BCAB6654();
  result = swift_bridgeObjectRelease();
  *a1 = v2 != 0;
  return result;
}

void sub_1BCA5AA20(_QWORD *a1@<X8>)
{
  *a1 = 1869768058;
  a1[1] = 0xE400000000000000;
}

uint64_t sub_1BCA5AA34()
{
  sub_1BCA5BC8C();
  return sub_1BCAB5FE8();
}

uint64_t sub_1BCA5AA90()
{
  sub_1BCA5BC8C();
  return sub_1BCAB5FD0();
}

void sub_1BCA5AADC(_QWORD *a1@<X8>)
{
  *a1 = &unk_1E7545360;
}

HKQuantity __swiftcall BucketSize.quantityForType(type:)(HKQuantityType type)
{
  HKQuantity result;

  __asm { BR              X10 }
  return result;
}

id sub_1BCA5AB14(void *a1)
{
  id v1;
  void *v2;
  id v3;

  v1 = objc_msgSend(a1, sel_canonicalUnit);
  if (!v1)
  {
    __break(1u);
    JUMPOUT(0x1BCA5AC50);
  }
  v2 = v1;
  v3 = objc_msgSend((id)objc_opt_self(), sel_quantityWithUnit_doubleValue_, v1, 2.0);

  return v3;
}

void static BucketSize.makeBucketSize(quantityType:)(void *a1@<X0>, char *a2@<X8>)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;

  v3 = objc_msgSend(a1, sel_identifier);
  if (!v3)
  {
    sub_1BCAB5F04();
    v3 = (id)sub_1BCAB5EE0();
    swift_bridgeObjectRelease();
  }
  v4 = sub_1BCAB5F04();
  v6 = v5;
  if (v4 == sub_1BCAB5F04() && v6 == v7)
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_18;
  }
  v9 = sub_1BCAB67C8();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v9 & 1) != 0)
  {
LABEL_18:

    v20 = 2;
    goto LABEL_19;
  }
  v10 = sub_1BCAB5F04();
  v12 = v11;
  if (v10 == sub_1BCAB5F04() && v12 == v13)
    goto LABEL_15;
  v15 = sub_1BCAB67C8();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v15 & 1) != 0)
  {
LABEL_16:

    v20 = 1;
    goto LABEL_19;
  }
  v16 = sub_1BCAB5F04();
  v18 = v17;
  if (v16 == sub_1BCAB5F04() && v18 == v19)
  {
LABEL_15:
    swift_bridgeObjectRelease_n();
    goto LABEL_16;
  }
  v21 = sub_1BCAB67C8();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v21 & 1) != 0)
    goto LABEL_16;
  v22 = sub_1BCAB5F04();
  v24 = v23;
  if (v22 == sub_1BCAB5F04() && v24 == v25)
  {
    swift_bridgeObjectRelease_n();
LABEL_25:

    v20 = 3;
    goto LABEL_19;
  }
  v26 = sub_1BCAB67C8();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v26 & 1) != 0)
    goto LABEL_25;
  v27 = sub_1BCAB5F04();
  v29 = v28;
  if (v27 == sub_1BCAB5F04() && v29 == v30)
  {

    swift_bridgeObjectRelease_n();
    v20 = 4;
  }
  else
  {
    v31 = sub_1BCAB67C8();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v31 & 1) != 0)
      v20 = 4;
    else
      v20 = 0;
  }
LABEL_19:
  *a2 = v20;
}

HealthVisualization::BucketSize_optional __swiftcall BucketSize.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  unint64_t v3;
  HealthVisualization::BucketSize_optional result;
  char v5;

  v2 = v1;
  v3 = sub_1BCAB6654();
  result.value = swift_bridgeObjectRelease();
  v5 = 5;
  if (v3 < 5)
    v5 = v3;
  *v2 = v5;
  return result;
}

void *static BucketSize.allCases.getter()
{
  return &unk_1E7545420;
}

uint64_t BucketSize.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1BCA5AFC0 + 4 * byte_1BCAC6AF6[*v0]))(0xD000000000000011, 0x80000001BCACDAC0);
}

uint64_t sub_1BCA5AFC0(uint64_t a1)
{
  return a1 + 6;
}

uint64_t sub_1BCA5AFE8()
{
  return 0x756C47646F6F6C62;
}

uint64_t sub_1BCA5B008()
{
  return 0x7461726970736572;
}

void sub_1BCA5B02C()
{
  char *v0;

  sub_1BCA92EC8(*v0);
}

void sub_1BCA5B034(uint64_t a1)
{
  char *v1;

  sub_1BCA93948(a1, *v1);
}

void sub_1BCA5B03C(uint64_t a1)
{
  char *v1;

  sub_1BCA93B04(a1, *v1);
}

HealthVisualization::BucketSize_optional sub_1BCA5B044(Swift::String *a1)
{
  return BucketSize.init(rawValue:)(*a1);
}

uint64_t sub_1BCA5B050@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = BucketSize.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1BCA5B074()
{
  sub_1BCA5BC48();
  return sub_1BCAB5FE8();
}

uint64_t sub_1BCA5B0D0()
{
  sub_1BCA5BC48();
  return sub_1BCAB5FD0();
}

void sub_1BCA5B11C(_QWORD *a1@<X8>)
{
  *a1 = &unk_1E7545448;
}

void sub_1BCA5B12C(char *a1)
{
  sub_1BC999724(*a1);
}

uint64_t sub_1BCA5B138()
{
  sub_1BCA5B450(&qword_1EF47A0D8, (uint64_t)&unk_1BCABDDB4);
  return sub_1BCAB5FF4();
}

uint64_t sub_1BCA5B1A4()
{
  sub_1BCA5B450(&qword_1EF47A0D8, (uint64_t)&unk_1BCABDDB4);
  return sub_1BCAB5FDC();
}

uint64_t _s19HealthVisualization33QuantityDistributionConfigurationV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  char v9;
  unsigned __int8 v10;

  v2 = *(_BYTE *)(a1 + 1);
  v3 = *(_BYTE *)(a1 + 2);
  v4 = *(_BYTE *)(a1 + 3);
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a2 + 8);
  sub_1BC9991D8(*(_BYTE *)a1);
  if ((v7 & 1) == 0)
    return 0;
  sub_1BC9993E0(v2);
  if ((v8 & 1) == 0)
    return 0;
  sub_1BC9995AC(v3);
  if ((v9 & 1) == 0)
    return 0;
  sub_1BC999724(v4);
  return v10 & (v5 == v6);
}

unint64_t sub_1BCA5B2A0()
{
  unint64_t result;

  result = qword_1EF47A050;
  if (!qword_1EF47A050)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCAC6F88, &type metadata for QuantityDistributionConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF47A050);
  }
  return result;
}

unint64_t sub_1BCA5B2E4()
{
  unint64_t result;

  result = qword_1EF47A058;
  if (!qword_1EF47A058)
  {
    result = MEMORY[0x1BCCFBE84](&protocol conformance descriptor for BucketAnchor, &type metadata for BucketAnchor);
    atomic_store(result, (unint64_t *)&qword_1EF47A058);
  }
  return result;
}

unint64_t sub_1BCA5B328()
{
  unint64_t result;

  result = qword_1EF47A060;
  if (!qword_1EF47A060)
  {
    result = MEMORY[0x1BCCFBE84](&protocol conformance descriptor for BucketSize, &type metadata for BucketSize);
    atomic_store(result, (unint64_t *)&qword_1EF47A060);
  }
  return result;
}

void sub_1BCA5B36C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_1BCA5B2A0();
    v7 = a3(a1, &type metadata for QuantityDistributionConfiguration.CodingKeys, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

unint64_t sub_1BCA5B3C8()
{
  unint64_t result;

  result = qword_1EF47A078;
  if (!qword_1EF47A078)
  {
    result = MEMORY[0x1BCCFBE84](&protocol conformance descriptor for BucketAnchor, &type metadata for BucketAnchor);
    atomic_store(result, (unint64_t *)&qword_1EF47A078);
  }
  return result;
}

unint64_t sub_1BCA5B40C()
{
  unint64_t result;

  result = qword_1EF47A080;
  if (!qword_1EF47A080)
  {
    result = MEMORY[0x1BCCFBE84](&protocol conformance descriptor for BucketSize, &type metadata for BucketSize);
    atomic_store(result, (unint64_t *)&qword_1EF47A080);
  }
  return result;
}

uint64_t sub_1BCA5B450(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    type metadata accessor for _HKQuantityDistributionStyle(255);
    result = MEMORY[0x1BCCFBE84](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1BCA5B494()
{
  unint64_t result;

  result = qword_1EF47A090;
  if (!qword_1EF47A090)
  {
    result = MEMORY[0x1BCCFBE84](&protocol conformance descriptor for BucketAnchor, &type metadata for BucketAnchor);
    atomic_store(result, (unint64_t *)&qword_1EF47A090);
  }
  return result;
}

uint64_t sub_1BCA5B4D8()
{
  return sub_1BCA5B504(&qword_1EF47A098, &qword_1EF47A0A0);
}

uint64_t sub_1BCA5B504(unint64_t *a1, unint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    sub_1BC9ACD0C(255, a2);
    result = MEMORY[0x1BCCFBE84](MEMORY[0x1E0DEAF50], v4);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1BCA5B548()
{
  unint64_t result;

  result = qword_1EF47A0A8;
  if (!qword_1EF47A0A8)
  {
    result = MEMORY[0x1BCCFBE84](&protocol conformance descriptor for BucketSize, &type metadata for BucketSize);
    atomic_store(result, (unint64_t *)&qword_1EF47A0A8);
  }
  return result;
}

uint64_t sub_1BCA5B58C()
{
  return sub_1BCA5B504(&qword_1EF47A0B0, &qword_1EF47A0B8);
}

uint64_t getEnumTagSinglePayload for QuantityDistributionConfiguration(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFC && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 252);
  v3 = *(unsigned __int8 *)(a1 + 1);
  v4 = v3 >= 5;
  v5 = v3 - 5;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for QuantityDistributionConfiguration(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(_QWORD *)result = a2 - 252;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFC)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0xFC)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_BYTE *)(result + 1) = a2 + 4;
  }
  return result;
}

ValueMetadata *type metadata accessor for QuantityDistributionConfiguration()
{
  return &type metadata for QuantityDistributionConfiguration;
}

uint64_t storeEnumTagSinglePayload for BucketAnchor(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1BCA5B68C + 4 * byte_1BCAC6AFB[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1BCA5B6AC + 4 * byte_1BCAC6B00[v4]))();
}

_BYTE *sub_1BCA5B68C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1BCA5B6AC(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1BCA5B6B4(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1BCA5B6BC(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1BCA5B6C4(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1BCA5B6CC(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for BucketAnchor()
{
  return &type metadata for BucketAnchor;
}

uint64_t storeEnumTagSinglePayload for BucketSize(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1BCA5B734 + 4 * byte_1BCAC6B0A[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1BCA5B768 + 4 * byte_1BCAC6B05[v4]))();
}

uint64_t sub_1BCA5B768(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BCA5B770(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BCA5B778);
  return result;
}

uint64_t sub_1BCA5B784(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BCA5B78CLL);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1BCA5B790(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BCA5B798(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BucketSize()
{
  return &type metadata for BucketSize;
}

uint64_t storeEnumTagSinglePayload for QuantityDistributionConfiguration.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_1BCA5B800 + 4 * byte_1BCAC6B14[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_1BCA5B834 + 4 * byte_1BCAC6B0F[v4]))();
}

uint64_t sub_1BCA5B834(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BCA5B83C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BCA5B844);
  return result;
}

uint64_t sub_1BCA5B850(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BCA5B858);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_1BCA5B85C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BCA5B864(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for QuantityDistributionConfiguration.CodingKeys()
{
  return &type metadata for QuantityDistributionConfiguration.CodingKeys;
}

unint64_t sub_1BCA5B884()
{
  unint64_t result;

  result = qword_1EF47A0C0;
  if (!qword_1EF47A0C0)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCAC6F60, &type metadata for QuantityDistributionConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF47A0C0);
  }
  return result;
}

unint64_t sub_1BCA5B8CC()
{
  unint64_t result;

  result = qword_1EF47A0C8;
  if (!qword_1EF47A0C8)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCAC6ED0, &type metadata for QuantityDistributionConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF47A0C8);
  }
  return result;
}

unint64_t sub_1BCA5B914()
{
  unint64_t result;

  result = qword_1EF47A0D0;
  if (!qword_1EF47A0D0)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCAC6EF8, &type metadata for QuantityDistributionConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF47A0D0);
  }
  return result;
}

uint64_t sub_1BCA5B958(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x676E615265746164 && a2 == 0xE900000000000065;
  if (v2 || (sub_1BCAB67C8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6144726F68636E61 && a2 == 0xEA00000000006574 || (sub_1BCAB67C8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6172676F74736968 && a2 == 0xEE0068746469576DLL || (sub_1BCAB67C8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6E4174656B637562 && a2 == 0xEC000000726F6863 || (sub_1BCAB67C8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x695374656B637562 && a2 == 0xEA0000000000657ALL || (sub_1BCAB67C8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x53747865746E6F63 && a2 == 0xEC000000656C7974)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    v6 = sub_1BCAB67C8();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 5;
    else
      return 6;
  }
}

unint64_t sub_1BCA5BC48()
{
  unint64_t result;

  result = qword_1EF47A0E0;
  if (!qword_1EF47A0E0)
  {
    result = MEMORY[0x1BCCFBE84](&protocol conformance descriptor for BucketSize, &type metadata for BucketSize);
    atomic_store(result, (unint64_t *)&qword_1EF47A0E0);
  }
  return result;
}

unint64_t sub_1BCA5BC8C()
{
  unint64_t result;

  result = qword_1EF47A0E8;
  if (!qword_1EF47A0E8)
  {
    result = MEMORY[0x1BCCFBE84](&protocol conformance descriptor for BucketAnchor, &type metadata for BucketAnchor);
    atomic_store(result, (unint64_t *)&qword_1EF47A0E8);
  }
  return result;
}

void *sub_1BCA5BCD0(void *a1, uint64_t a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  char v7;
  id v8;
  void *v10;

  if ((a2 & 0xC000000000000001) == 0)
  {
    if (*(_QWORD *)(a2 + 16))
    {
      v6 = sub_1BC9A2E50((uint64_t)a1);
      if ((v7 & 1) != 0)
      {
        v5 = *(void **)(*(_QWORD *)(a2 + 56) + 8 * v6);
        v8 = v5;
        return v5;
      }
    }
    return 0;
  }
  v3 = a1;
  v4 = sub_1BCAB65A0();

  if (!v4)
    return 0;
  sub_1BC9A649C(0, (unint64_t *)&qword_1ED6C6EB8);
  swift_unknownObjectRetain();
  swift_dynamicCast();
  v5 = v10;
  swift_unknownObjectRelease();
  return v5;
}

uint64_t sub_1BCA5BDA4()
{
  uint64_t v1;

  swift_retain();
  sub_1BCAB5070();
  swift_release();
  return v1;
}

uint64_t sub_1BCA5BDF0(void *a1, char a2)
{
  char v3;

  v3 = a2 & 1;
  swift_retain();
  sub_1BCAB507C();
  sub_1BCA5D0C0(a1, v3);
  return swift_release();
}

id sub_1BCA5BE60()
{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  void *v5;
  id v6;

  v1 = qword_1ED6C3F90;
  v2 = *(void **)((char *)v0 + qword_1ED6C3F90);
  if (v2)
  {
    v3 = *(id *)((char *)v0 + qword_1ED6C3F90);
  }
  else
  {
    v4 = sub_1BCA5BEC0(v0);
    v5 = *(void **)((char *)v0 + v1);
    *(uint64_t *)((char *)v0 + v1) = (uint64_t)v4;
    v3 = v4;

    v2 = 0;
  }
  v6 = v2;
  return v3;
}

id sub_1BCA5BEC0(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  id v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  id v19;
  void *v20;
  id v21;
  id v22;
  id v23;
  uint64_t v25;
  uint64_t v26;
  _QWORD aBlock[6];

  v2 = *a1;
  v3 = *MEMORY[0x1E0DEEDD8];
  v4 = sub_1BCAB54A8();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v25 - v9;
  if (qword_1ED6C7098 != -1)
    swift_once();
  v11 = v3 & v2;
  v12 = (id)qword_1ED6C69C0;
  v13 = a1;
  sub_1BCAB549C();
  v14 = *(uint64_t *)((char *)v13 + qword_1ED6C3F70);
  v25 = *(uint64_t *)((char *)v13 + qword_1ED6C3F98);
  v26 = v14;
  v15 = swift_allocObject();
  swift_unknownObjectWeakInit();
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v7, v10, v4);
  v16 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v17 = (v6 + v16 + 7) & 0xFFFFFFFFFFFFFFF8;
  v18 = swift_allocObject();
  *(_QWORD *)(v18 + 16) = *(_QWORD *)(v11 + class metadata base offset for SampleCountQueryOperation);
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v18 + v16, v7, v4);
  *(_QWORD *)(v18 + v17) = v15;
  v19 = objc_allocWithZone(MEMORY[0x1E0CB6AE0]);
  aBlock[4] = sub_1BCA5D03C;
  aBlock[5] = v18;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1BCA5CAD0;
  aBlock[3] = &block_descriptor_13;
  v20 = _Block_copy(aBlock);
  swift_retain();
  v21 = objc_msgSend(v19, sel_initWithSampleType_predicate_resultsHandler_, v26, v25, v20);
  _Block_release(v20);
  swift_release();
  swift_release();
  v22 = v21;
  v23 = objc_msgSend(v13, sel_name);
  objc_msgSend(v22, sel_setDebugIdentifier_, v23);

  objc_msgSend(v22, sel_setQualityOfService_, *(uint64_t *)((char *)v13 + qword_1ED6C3F88));
  (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
  return v22;
}

void sub_1BCA5C170(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  void *v8;
  void *v9;
  Swift::String v10;
  Swift::String v11;
  id v12;
  char v13;
  char v14;

  v7 = a5 + 16;
  sub_1BCAB6264();
  if (qword_1ED6C7098 != -1)
    swift_once();
  sub_1BCAB5490();
  swift_beginAccess();
  v8 = (void *)MEMORY[0x1BCCFC004](v7);
  if (v8)
  {
    v9 = v8;
    if ((objc_msgSend(v8, sel_isCancelled) & 1) != 0)
    {
      v10._object = (void *)0x80000001BCACE790;
      v10._countAndFlagsBits = 0xD00000000000002DLL;
      v11._countAndFlagsBits = 0;
      v11._object = (void *)0xE000000000000000;
      NSOperation.logLifeCycleEvent(_:withPrivateInfo:)(v10, v11);
LABEL_7:

      return;
    }
    if ((objc_msgSend(v9, sel_isFinished) & 1) != 0)
      goto LABEL_7;
    v12 = sub_1BCA5CC78(a2, a3);
    v14 = v13 & 1;
    MEMORY[0x1E0C80A78](v12);
    sub_1BCAB50AC();
    sub_1BCA5D0C0(v12, v14);

  }
}

uint64_t sub_1BCA5C2E8(uint64_t a1, void *a2, char a3)
{
  char v5;
  id v6;
  uint64_t v7;
  void *v8;
  void *v9;
  Swift::String v10;
  Swift::String v11;

  v5 = a3 & 1;
  sub_1BCA5CF98(a2, a3 & 1);
  sub_1BCA5BDF0(a2, v5);
  v6 = objc_msgSend(*(id *)(a1 + qword_1ED6C3F70), sel_identifier);
  v7 = sub_1BCAB5F04();
  v9 = v8;

  v10._countAndFlagsBits = 0x64656873696E6966;
  v10._object = (void *)0xE800000000000000;
  v11._countAndFlagsBits = v7;
  v11._object = v9;
  NSOperation.logLifeCycleEvent(_:withPrivateInfo:)(v10, v11);
  return swift_bridgeObjectRelease();
}

id SampleCountQueryOperation.__allocating_init(sampleType:predicate:name:queryQualityOfService:healthStore:)(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  objc_class *v6;
  id v13;

  v13 = objc_allocWithZone(v6);
  return SampleCountQueryOperation.init(sampleType:predicate:name:queryQualityOfService:healthStore:)(a1, a2, a3, a4, a5, a6);
}

id SampleCountQueryOperation.init(sampleType:predicate:name:queryQualityOfService:healthStore:)(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  _QWORD *v6;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  _QWORD *v16;
  id v17;
  id v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  objc_class *Operation;
  id v23;
  id v24;
  void *v25;
  objc_super v27;
  uint64_t v28;
  char v29;

  v12 = *MEMORY[0x1E0DEEDD8] & *v6;
  v13 = qword_1ED6C3F80;
  sub_1BC9A7EA4();
  v14 = swift_allocError();
  *v15 = 0;
  v28 = v14;
  v29 = 1;
  sub_1BCA5CBA4();
  swift_allocObject();
  v16 = v6;
  *(_QWORD *)((char *)v6 + v13) = sub_1BCAB50A0();
  *(_QWORD *)((char *)v16 + qword_1ED6C3F90) = 0;
  *(_QWORD *)((char *)v16 + qword_1ED6C3F70) = a1;
  *(_QWORD *)((char *)v16 + qword_1ED6C3F98) = a2;
  *(_QWORD *)((char *)v16 + qword_1ED6C3F88) = a5;
  *(_QWORD *)((char *)v16 + qword_1ED6C3F78) = a6;
  v17 = a2;
  v18 = a1;
  v19 = a6;

  Operation = (objc_class *)type metadata accessor for SampleCountQueryOperation(0, *(_QWORD *)(v12 + class metadata base offset for SampleCountQueryOperation), v20, v21);
  v27.receiver = v16;
  v27.super_class = Operation;
  v23 = objc_msgSendSuper2(&v27, sel_init);
  v24 = v23;
  if (a4)
  {
    v25 = (void *)sub_1BCAB5EE0();
    swift_bridgeObjectRelease();
  }
  else
  {
    v25 = 0;
  }
  objc_msgSend(v23, sel_setName_, v25);

  return v23;
}

uint64_t sub_1BCA5C5AC()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  void *v5;
  _BYTE *v6;
  void *v7;
  id v8;
  uint64_t v9;
  void *v10;
  void *v11;
  Swift::String v12;
  Swift::String v13;
  id v14;
  char *v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  id v22;
  uint64_t v24;

  v1 = sub_1BCAB54A8();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v4 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BC9A7EA4();
  v5 = (void *)swift_allocError();
  *v6 = 2;
  sub_1BCA5BDF0(v5, 1);
  v7 = *(void **)&v0[qword_1ED6C3F70];
  v8 = objc_msgSend(v7, sel_identifier);
  v9 = sub_1BCAB5F04();
  v11 = v10;

  v12._countAndFlagsBits = 0x676E696E6E7572;
  v12._object = (void *)0xE700000000000000;
  v13._countAndFlagsBits = v9;
  v13._object = v11;
  NSOperation.logLifeCycleEvent(_:withPrivateInfo:)(v12, v13);
  swift_bridgeObjectRelease();
  if (qword_1ED6C7098 != -1)
    swift_once();
  v14 = (id)qword_1ED6C69C0;
  v15 = v0;
  sub_1BCAB549C();
  sub_1BCAB6270();
  sub_1BC9A7EF4();
  v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_1BCABE680;
  v17 = objc_msgSend(v7, sel_identifier);
  v18 = sub_1BCAB5F04();
  v20 = v19;

  *(_QWORD *)(v16 + 56) = MEMORY[0x1E0DEA968];
  *(_QWORD *)(v16 + 64) = sub_1BC9A7FA4();
  *(_QWORD *)(v16 + 32) = v18;
  *(_QWORD *)(v16 + 40) = v20;
  sub_1BCAB5484();
  swift_bridgeObjectRelease();
  v21 = *(void **)&v15[qword_1ED6C3F78];
  v22 = sub_1BCA5BE60();
  objc_msgSend(v21, sel_executeQuery_, v22);

  return (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v4, v1);
}

void sub_1BCA5C7F8(void *a1)
{
  id v1;

  v1 = a1;
  sub_1BCA5C5AC();

}

void sub_1BCA5C82C()
{
  char *v0;
  void *v1;
  _BYTE *v2;
  id v3;
  uint64_t v4;
  void *v5;
  void *v6;
  Swift::String v7;
  Swift::String v8;
  void *v9;
  id v10;

  if (objc_msgSend(v0, sel_isCancelled))
  {
    sub_1BC9A7EA4();
    v1 = (void *)swift_allocError();
    *v2 = 3;
    sub_1BCA5BDF0(v1, 1);
    v3 = objc_msgSend(*(id *)&v0[qword_1ED6C3F70], sel_identifier);
    v4 = sub_1BCAB5F04();
    v6 = v5;

    v7._countAndFlagsBits = 0x656C6C65636E6163;
    v7._object = (void *)0xE900000000000064;
    v8._countAndFlagsBits = v4;
    v8._object = v6;
    NSOperation.logLifeCycleEvent(_:withPrivateInfo:)(v7, v8);
    swift_bridgeObjectRelease();
  }
  v9 = *(void **)&v0[qword_1ED6C3F78];
  v10 = sub_1BCA5BE60();
  objc_msgSend(v9, sel_stopQuery_, v10);

}

id SampleCountQueryOperation.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void SampleCountQueryOperation.init()()
{
  sub_1BCA5CDFC();
}

void sub_1BCA5C964()
{
  sub_1BCA5CDFC();
}

void sub_1BCA5C988()
{
  uint64_t v0;

  swift_release();

}

id SampleCountQueryOperation.__deallocating_deinit(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  objc_class *Operation;
  objc_super v7;

  Operation = (objc_class *)type metadata accessor for SampleCountQueryOperation(0, *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v4)+ class metadata base offset for SampleCountQueryOperation), a3, a4);
  v7.receiver = v4;
  v7.super_class = Operation;
  return objc_msgSendSuper2(&v7, sel_dealloc);
}

void sub_1BCA5CA38(uint64_t a1)
{
  swift_release();

}

uint64_t sub_1BCA5CAA0@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;

  result = sub_1BCA5BDA4();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_1BCA5CAD0(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  uint64_t v5;
  void (*v7)(id, uint64_t, void *);
  id v8;
  id v9;

  v5 = a3;
  v7 = *(void (**)(id, uint64_t, void *))(a1 + 32);
  if (a3)
  {
    sub_1BC9A649C(0, (unint64_t *)&qword_1ED6C71C8);
    sub_1BC9A649C(0, (unint64_t *)&qword_1ED6C6EB8);
    sub_1BC9EF2A4();
    v5 = sub_1BCAB5E74();
  }
  swift_retain();
  v8 = a2;
  v9 = a4;
  v7(v8, v5, a4);
  swift_release();

  return swift_bridgeObjectRelease();
}

void sub_1BCA5CBA4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED6C3690)
  {
    sub_1BCA5CBF8();
    v0 = sub_1BCAB5088();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED6C3690);
  }
}

void sub_1BCA5CBF8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED6C4800)
  {
    sub_1BC9A7F58(255, (unint64_t *)&qword_1ED6C6F70);
    v0 = sub_1BCAB68A0();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED6C4800);
  }
}

uint64_t type metadata accessor for SampleCountQueryOperation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SampleCountQueryOperation);
}

id sub_1BCA5CC78(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  id v4;
  void *v5;
  id v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void *v11;
  uint64_t *v12;
  id v13;
  Swift::String v14;
  Swift::String v15;
  uint64_t *v16;

  if (a1)
  {
    v4 = *(id *)(v2 + qword_1ED6C3F70);
    v5 = sub_1BCA5BCD0(v4, a1);

    if (v5)
    {
      v6 = objc_msgSend(v5, sel_integerValue);

    }
    else
    {
      return 0;
    }
  }
  else
  {
    if (a2)
      v8 = 0xD000000000000020;
    else
      v8 = 0;
    if (a2)
      v9 = 0x80000001BCAD29C0;
    else
      v9 = 0;
    if (a2)
      v10 = a2 | 0x8000000000000000;
    else
      v10 = 0xC000000000000000;
    sub_1BC9A82C4();
    v11 = (void *)swift_allocError();
    *v12 = v8;
    v12[1] = v9;
    v12[2] = v10;
    swift_getErrorValue();
    v13 = (id)a2;
    sub_1BC9A8308(v8, v9, v10);
    v14._countAndFlagsBits = sub_1BCAB6810();
    v15._countAndFlagsBits = 0;
    v15._object = (void *)0xE000000000000000;
    NSOperation.logErrorString(_:withInfo:)(v14, v15);
    swift_bridgeObjectRelease();

    v6 = (id)swift_allocError();
    *v16 = v8;
    v16[1] = v9;
    v16[2] = v10;
  }
  return v6;
}

void sub_1BCA5CDFC()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t sub_1BCA5CE28@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;

  result = sub_1BCA5BDA4();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_1BCA5CE58(uint64_t a1)
{
  id v1;
  char v2;

  v1 = *(id *)a1;
  v2 = *(_BYTE *)(a1 + 8);
  sub_1BCA5CF98(*(id *)a1, v2);
  return sub_1BCA5BDF0(v1, v2);
}

uint64_t sub_1BCA5CE9C()
{
  return 8;
}

_QWORD *sub_1BCA5CEA8(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_1BCA5CEB4()
{
  return swift_initClassMetadata2();
}

uint64_t method lookup function for SampleCountQueryOperation()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SampleCountQueryOperation.result.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))(class metadata base offset for SampleCountQueryOperation
                              + (*MEMORY[0x1E0DEEDD8] & *v0)
                              + 80))();
}

uint64_t dispatch thunk of SampleCountQueryOperation.__allocating_init(sampleType:predicate:name:queryQualityOfService:healthStore:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(class metadata base offset for SampleCountQueryOperation + v0 + 128))();
}

id sub_1BCA5CF98(id result, char a2)
{
  if ((a2 & 1) != 0)
    return result;
  return result;
}

uint64_t sub_1BCA5CFA4()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1BCA5CFC8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_1BCAB54A8();
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
  swift_release();
  return swift_deallocObject();
}

void sub_1BCA5D03C(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  unint64_t v8;

  v7 = *(_QWORD *)(sub_1BCAB54A8() - 8);
  v8 = (*(unsigned __int8 *)(v7 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  sub_1BCA5C170(a1, a2, a3, v3 + v8, *(_QWORD *)(v3 + ((*(_QWORD *)(v7 + 64) + v8 + 7) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_1BCA5D0B4()
{
  uint64_t v0;

  return sub_1BCA5C2E8(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24), *(_BYTE *)(v0 + 32));
}

void sub_1BCA5D0C0(id a1, char a2)
{
  if ((a2 & 1) != 0)

}

id sub_1BCA5D0CC(uint64_t a1)
{
  uint64_t v1;
  void *v3;
  char v4;

  v3 = *(void **)(v1 + 16);
  v4 = *(_BYTE *)(v1 + 24);
  sub_1BCA5D0C0(*(id *)a1, *(_BYTE *)(a1 + 8));
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  return sub_1BCA5CF98(v3, v4);
}

__n128 DiagramHeartRateRecovery.__allocating_init(recoveryConfiguration:diagramData:)(_DWORD *a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  __n128 result;
  __int128 v8;

  v4 = swift_allocObject();
  v5 = *(_BYTE *)(a2 + 32);
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(v4 + 72) = 0;
  *(_QWORD *)(v4 + 80) = 0;
  *(_DWORD *)(v4 + 16) = *a1;
  result = *(__n128 *)a2;
  v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)a2;
  *(_OWORD *)(v4 + 40) = v8;
  *(_BYTE *)(v4 + 56) = v5;
  *(_QWORD *)(v4 + 64) = v6;
  return result;
}

void sub_1BCA5D174()
{
  qword_1ED6D3938 = 0x4010000000000000;
}

void sub_1BCA5D184()
{
  qword_1ED6D3948 = 0x4014000000000000;
}

void sub_1BCA5D194()
{
  qword_1ED6D3950 = 0x4018000000000000;
}

void sub_1BCA5D1A4()
{
  qword_1ED6D3940 = 0x404E000000000000;
}

unint64_t sub_1BCA5D1B4@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_1BCA5F16C(*a1);
  *a2 = result;
  return result;
}

void sub_1BCA5D1DC(_QWORD *a1@<X8>)
{
  unsigned __int8 *v1;

  *a1 = *v1;
}

void sub_1BCA5D1E8(_QWORD *a1@<X8>)
{
  *a1 = &unk_1E7545470;
}

void sub_1BCA5D1F8()
{
  qword_1ED6D3928 = 0x4045000000000000;
}

id sub_1BCA5D208()
{
  id result;

  result = (id)HKIntegerFormatter();
  if (result)
    qword_1ED6C5568 = (uint64_t)result;
  else
    __break(1u);
  return result;
}

void sub_1BCA5D234(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1BCA5D264()
{
  void *v0;
  void *v1;
  id v2;
  uint64_t v3;

  if (qword_1ED6C6010 != -1)
    swift_once();
  v0 = (void *)qword_1ED6C5598;
  v1 = (void *)sub_1BCAB4DE8();
  v2 = objc_msgSend(v0, sel_stringFromDate_, v1);

  v3 = sub_1BCAB5F04();
  return v3;
}

void sub_1BCA5D40C()
{
  qword_1ED6D3930 = 0x4030000000000000;
}

id sub_1BCA5D41C()
{
  id result;

  result = (id)HKDateFormatterFromTemplate();
  if (result)
    qword_1ED6C5598 = (uint64_t)result;
  else
    __break(1u);
  return result;
}

void sub_1BCA5D44C(char a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8)
{
  void *v9;
  id v10;
  uint64_t v11;
  id v12;
  void *v13;
  void *v14;

  if ((a1 & 1) == 0)
  {
    if (qword_1ED6C6038 == -1)
      return;
LABEL_13:
    swift_once();
    return;
  }
  if (qword_1ED6C5F98 != -1)
    swift_once();
  v9 = (void *)qword_1ED6C5588;
  v10 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithDouble_, a8);
  if (qword_1ED6C6008 != -1)
    swift_once();
  v11 = qword_1ED6C5580;
  if (qword_1ED6C5FA0 != -1)
    swift_once();
  v12 = objc_msgSend(v9, sel_stringFromValue_displayType_unitController_, v10, v11, qword_1ED6C5590);

  if (!v12)
  {
    __break(1u);
    return;
  }
  sub_1BCAB5F04();

  v13 = (void *)sub_1BCAB5EE0();
  DiagramConfiguration.TextAttributes.toTextAttributes()();
  type metadata accessor for Key(0);
  sub_1BC99F5A0();
  v14 = (void *)sub_1BCAB5E68();
  swift_bridgeObjectRelease();
  objc_msgSend(v13, sel_sizeWithAttributes_, v14);
  swift_bridgeObjectRelease();

  if (qword_1ED6C6038 != -1)
    goto LABEL_13;
}

void sub_1BCA5D674()
{
  id v0;
  void *v1;
  id v2;
  id v3;

  v0 = objc_msgSend((id)objc_opt_self(), sel_sharedInstance);
  if (v0)
  {
    v1 = v0;
    v2 = objc_msgSend((id)objc_opt_self(), sel_heartRateType);
    v3 = objc_msgSend(v1, sel_displayTypeForObjectType_, v2);

    if (v3)
    {
      qword_1ED6C5580 = (uint64_t)v3;
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

void sub_1BCA5D71C()
{
  id v0;
  id v1;

  v0 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB6780]), sel_init);
  v1 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D2F8D8]), sel_initWithHealthStore_, v0);

  qword_1ED6C5590 = (uint64_t)v1;
}

void sub_1BCA5D77C()
{
  void *v0;
  id v1;
  id v2;

  if (qword_1ED6C6008 != -1)
    swift_once();
  v0 = (void *)qword_1ED6C5580;
  v1 = objc_msgSend((id)objc_opt_self(), sel__countPerMinuteUnit);
  v2 = objc_msgSend(v0, sel_hk_valueFormatterForUnit_, v1);

  qword_1ED6C5588 = (uint64_t)v2;
}

uint64_t sub_1BCA5D814()
{
  uint64_t v0;
  uint64_t v1;

  if (*(_QWORD *)(v0 + 72))
  {
    v1 = *(_QWORD *)(v0 + 72);
  }
  else
  {
    v1 = sub_1BCA5D870(v0);
    *(_QWORD *)(v0 + 72) = v1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_1BCA5D870(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t result;

  v1 = *(_QWORD *)(a1 + 64);
  if (*(_QWORD *)(v1 + 16))
  {
    v2 = *(_QWORD *)(v1 + 32);
    if (*(_QWORD *)(v2 + 16))
    {
      swift_bridgeObjectRetain();
      v3 = sub_1BC9A2C2C(0);
      if ((v4 & 1) != 0)
      {
        v5 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 40 * v3);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return v5;
      }
      swift_bridgeObjectRelease();
    }
  }
  result = sub_1BCAB65C4();
  __break(1u);
  return result;
}

_QWORD *sub_1BCA5D950()
{
  uint64_t v0;
  _QWORD *v1;

  if (*(_QWORD *)(v0 + 80))
  {
    v1 = *(_QWORD **)(v0 + 80);
  }
  else
  {
    v1 = sub_1BCA5D9AC(v0);
    *(_QWORD *)(v0 + 80) = v1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  return v1;
}

_QWORD *sub_1BCA5D9AC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  double *v7;
  _QWORD *v8;
  double v9;
  uint64_t v10;
  double v11;
  char isUniquelyReferenced_nonNull_native;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  unint64_t v19;
  char v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;

  v1 = *(_QWORD *)(a1 + 64);
  if (!*(_QWORD *)(v1 + 16))
    goto LABEL_30;
  v2 = *(_QWORD *)(v1 + 32);
  if (!*(_QWORD *)(v2 + 16))
    goto LABEL_30;
  swift_bridgeObjectRetain();
  v3 = sub_1BC9A2C2C(1u);
  if ((v4 & 1) == 0)
    goto LABEL_32;
  v5 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 40 * v3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(v5 + 16);
  if (v6)
  {
    v7 = (double *)(v5 + 40);
    v8 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    while (1)
    {
      v9 = *(v7 - 1);
      if ((~*(_QWORD *)&v9 & 0x7FF0000000000000) == 0)
      {
        __break(1u);
LABEL_26:
        __break(1u);
LABEL_27:
        __break(1u);
LABEL_28:
        __break(1u);
LABEL_29:
        __break(1u);
        while (1)
        {
LABEL_30:
          sub_1BCAB65C4();
          __break(1u);
LABEL_31:
          sub_1BCAB6804();
          __break(1u);
LABEL_32:
          swift_bridgeObjectRelease();
        }
      }
      if (v9 <= -9.22337204e18)
        goto LABEL_26;
      if (v9 >= 9.22337204e18)
        goto LABEL_27;
      v10 = (uint64_t)v9;
      if ((unint64_t)(uint64_t)v9 > 3)
        goto LABEL_30;
      v11 = *v7;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v14 = sub_1BC9A2EE8(v10);
      v15 = v8[2];
      v16 = (v13 & 1) == 0;
      v17 = v15 + v16;
      if (__OFADD__(v15, v16))
        goto LABEL_28;
      v18 = v13;
      if (v8[3] >= v17)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) != 0)
        {
          if ((v13 & 1) != 0)
            goto LABEL_6;
        }
        else
        {
          sub_1BC9A5B44();
          if ((v18 & 1) != 0)
            goto LABEL_6;
        }
      }
      else
      {
        sub_1BC9A4B28(v17, isUniquelyReferenced_nonNull_native);
        v19 = sub_1BC9A2EE8(v10);
        if ((v18 & 1) != (v20 & 1))
          goto LABEL_31;
        v14 = v19;
        if ((v18 & 1) != 0)
        {
LABEL_6:
          *(double *)(v8[7] + 8 * v14) = v11;
          goto LABEL_7;
        }
      }
      v8[(v14 >> 6) + 8] |= 1 << v14;
      *(_BYTE *)(v8[6] + v14) = v10;
      *(double *)(v8[7] + 8 * v14) = v11;
      v21 = v8[2];
      v22 = __OFADD__(v21, 1);
      v23 = v21 + 1;
      if (v22)
        goto LABEL_29;
      v8[2] = v23;
LABEL_7:
      swift_bridgeObjectRelease();
      v7 += 2;
      if (!--v6)
        goto LABEL_24;
    }
  }
  v8 = (_QWORD *)MEMORY[0x1E0DEE9E0];
LABEL_24:
  swift_bridgeObjectRelease();
  return v8;
}

double static DiagramHeartRateRecovery.dataModelSpace(for:recoveryIntervalStartDate:)(uint64_t a1)
{
  uint64_t v1;
  CGFloat height;
  CGFloat width;
  CGFloat x;
  CGFloat y;
  CGFloat *v6;
  double v7;
  double v8;
  CGRect v10;
  CGRect v11;
  CGRect v12;
  CGRect v13;
  CGRect v14;
  CGRect v15;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    width = *(double *)(MEMORY[0x1E0C9D628] + 16);
    height = *(double *)(MEMORY[0x1E0C9D628] + 24);
    x = *MEMORY[0x1E0C9D628];
    y = *(double *)(MEMORY[0x1E0C9D628] + 8);
    v6 = (CGFloat *)(swift_bridgeObjectRetain() + 40);
    do
    {
      v15.origin.x = *(v6 - 1);
      v15.origin.y = *v6;
      v15.size.width = 0.0;
      v15.size.height = 0.0;
      v10.origin.x = x;
      v10.origin.y = y;
      v10.size.width = width;
      v10.size.height = height;
      v11 = CGRectUnion(v10, v15);
      x = v11.origin.x;
      y = v11.origin.y;
      width = v11.size.width;
      height = v11.size.height;
      v6 += 2;
      --v1;
    }
    while (v1);
    swift_bridgeObjectRelease();
  }
  else
  {
    x = 0.0;
    y = 0.0;
    width = 0.0;
    height = 0.0;
  }
  sub_1BCAB4DA0();
  v8 = v7;
  v12.origin.x = x;
  v12.origin.y = y;
  v12.size.width = width;
  v12.size.height = height;
  CGRectGetMaxX(v12);
  v13.origin.x = x;
  v13.origin.y = y;
  v13.size.width = width;
  v13.size.height = height;
  CGRectGetMinY(v13);
  v14.origin.x = x;
  v14.origin.y = y;
  v14.size.width = width;
  v14.size.height = height;
  CGRectGetHeight(v14);
  return v8;
}

uint64_t DiagramHeartRateRecovery.init(recoveryConfiguration:diagramData:)(int *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  __int128 v4;
  char v5;
  uint64_t v6;

  *(_QWORD *)(v2 + 72) = 0;
  *(_QWORD *)(v2 + 80) = 0;
  v3 = *a1;
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)a2;
  v5 = *(_BYTE *)(a2 + 32);
  v6 = *(_QWORD *)(a2 + 40);
  *(_DWORD *)(v2 + 16) = v3;
  *(_OWORD *)(v2 + 40) = v4;
  *(_BYTE *)(v2 + 56) = v5;
  *(_QWORD *)(v2 + 64) = v6;
  return v2;
}

double sub_1BCA5DDF0()
{
  double result;

  *(_QWORD *)&result = (unint64_t)DiagramData.diagramBounds(forceNonZeroSize:)(1);
  return result;
}

void sub_1BCA5DE38()
{
  double MaxY;
  void *v1;
  id v2;
  uint64_t v3;
  id v4;
  void *v5;
  void *v6;
  double MinY;
  void *v8;
  id v9;
  id v10;
  void *v11;
  void *v12;
  __C::CGRect v13;
  __C::CGRect v14;

  v13 = DiagramData.diagramBounds(forceNonZeroSize:)(1);
  MaxY = CGRectGetMaxY((CGRect)v13);
  if (qword_1ED6C5F98 != -1)
    swift_once();
  v1 = (void *)qword_1ED6C5588;
  v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithDouble_, MaxY);
  if (qword_1ED6C6008 != -1)
    swift_once();
  v3 = qword_1ED6C5580;
  if (qword_1ED6C5FA0 != -1)
    swift_once();
  v4 = objc_msgSend(v1, sel_stringFromValue_displayType_unitController_, v2, v3, qword_1ED6C5590);

  if (!v4)
  {
    __break(1u);
    goto LABEL_16;
  }
  sub_1BCAB5F04();

  v5 = (void *)sub_1BCAB5EE0();
  DiagramConfiguration.TextAttributes.toTextAttributes()();
  type metadata accessor for Key(0);
  sub_1BC99F5A0();
  v6 = (void *)sub_1BCAB5E68();
  swift_bridgeObjectRelease();
  objc_msgSend(v5, sel_sizeWithAttributes_, v6);
  swift_bridgeObjectRelease();

  v14 = DiagramData.diagramBounds(forceNonZeroSize:)(1);
  MinY = CGRectGetMinY((CGRect)v14);
  v8 = (void *)qword_1ED6C5588;
  v9 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithDouble_, MinY);
  v10 = objc_msgSend(v8, sel_stringFromValue_displayType_unitController_, v9, qword_1ED6C5580, qword_1ED6C5590);

  if (!v10)
  {
LABEL_16:
    __break(1u);
    return;
  }
  sub_1BCAB5F04();

  v11 = (void *)sub_1BCAB5EE0();
  DiagramConfiguration.TextAttributes.toTextAttributes()();
  v12 = (void *)sub_1BCAB5E68();
  swift_bridgeObjectRelease();
  objc_msgSend(v11, sel_sizeWithAttributes_, v12);
  swift_bridgeObjectRelease();

  if (qword_1ED6C6020 != -1)
    swift_once();
  if (qword_1ED6C6038 != -1)
    swift_once();
  if (qword_1ED6C6028 != -1)
    swift_once();
}

void (*sub_1BCA5E23C())(CGContext *a1, double *a2, double a3, double a4)
{
  swift_retain();
  return sub_1BCA5EE94;
}

void sub_1BCA5E26C(CGContext *a1, double *a2, uint64_t a3, double a4, double a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  CGFloat v11;
  CGFloat v12;
  CGFloat v13;
  unint64_t v14;
  CGFloat v15;
  double v16;
  double v17;
  char v18;
  char v19;
  double v20;
  double v21;
  double v22;
  CGFloat v23;
  Class isa;
  CGColor *v25;
  unint64_t v26;
  uint64_t v27;
  CGFloat v28;
  CGFloat v29;
  unsigned int v30;
  unsigned __int8 v31;
  _QWORD *v32;
  unint64_t v33;
  char v34;
  double v35;
  void *v36;
  id v37;
  id v38;
  double v39;
  double v40;
  double v41;
  double v42;
  void *v43;
  uint64_t v44;
  void *v45;
  uint64_t inited;
  void *v47;
  void *v48;
  id v49;
  id v50;
  id v51;
  Class v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  uint64_t v57;
  double v58;
  double v59;
  double v60;
  double v61;
  void *v62;
  void *v63;
  uint64_t v64;
  void *v65;
  void *v66;
  id v67;
  id v68;
  id v69;
  Class v70;
  void *v71;
  char v72;
  uint64_t v73;
  char v74;
  char v75;
  double MaxY;
  double v77;
  void *v78;
  id v79;
  uint64_t v80;
  id v81;
  double v82;
  double v83;
  double v84;
  double v85;
  double v86;
  double v87;
  CGFloat v88;
  void *v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char v94;
  char v95;
  uint64_t v96;
  CGPoint v97;
  double v98;
  CGFloat v99;
  CGFloat v100;
  CGFloat v101;
  Class v102;
  CGColor *v103;
  _QWORD v104[2];
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  CGFloat v110;
  __int128 v111;
  void *v112;
  void *v113;
  uint64_t v114;
  uint64_t v115;
  CGFloat v116;
  double v117;
  CGFloat v118;
  int v119;
  CGFloat v120;
  CGFloat v121;
  CGFloat v122;
  CGFloat v123;
  CGAffineTransform v124;
  CGPoint v125;
  CGPoint v126;
  CGPoint v127;
  CGPoint v128;
  CGPoint v129;
  __C::CGRect v130;
  __C::CGRect v131;
  __C::CGRect v132;
  __C::CGRect v133;
  __C::CGRect v134;
  __C::CGRect v135;
  CGRect v136;

  v117 = a5;
  v8 = sub_1BCAB4E54();
  v108 = *(_QWORD *)(v8 - 8);
  v109 = v8;
  MEMORY[0x1E0C80A78](v8);
  v107 = (char *)v104 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = 0;
  v11 = a2[1];
  v12 = a2[2];
  v13 = a2[4];
  v110 = a2[3];
  v15 = a2[5];
  v14 = *((unint64_t *)a2 + 6);
  v116 = *(double *)&v14;
  v16 = *(double *)(a3 + 24);
  v122 = *(double *)(a3 + 32);
  v123 = v16;
  v17 = *(double *)(a3 + 40);
  v120 = *(double *)(a3 + 48);
  v121 = v17;
  v119 = *(unsigned __int8 *)(a3 + 56);
  v118 = *(double *)(a3 + 64);
  v18 = *(_BYTE *)(a3 + 19);
  v115 = a3;
  v19 = *(_BYTE *)(a3 + 18);
  do
  {
    LOBYTE(v14) = byte_1E7545498[v10 + 32];
    v20 = (double)v14 * 60.0;
    v124.a = v123;
    v124.b = v122;
    v124.c = v121;
    v124.d = v120;
    LOBYTE(v124.tx) = v119;
    v124.ty = v118;
    v130 = DiagramData.diagramBounds(forceNonZeroSize:)(1);
    v125.x = v20 + CGRectGetMinX((CGRect)v130);
    v124.a = v11;
    v124.b = v12;
    v21 = v12;
    v124.c = v110;
    v124.d = v13;
    v124.tx = v15;
    v124.ty = v116;
    v125.y = 0.0;
    CGPointApplyAffineTransform(v125, &v124);
    if (qword_1ED6C6020 != -1)
      swift_once();
    ++v10;
    LOBYTE(v124.a) = v18;
    DiagramConfiguration.LineWidth.toPoints()();
    v23 = v22;
    LOBYTE(v124.a) = v19;
    isa = DiagramConfiguration.Color.toColor()().super.isa;
    CGContextSetLineWidth(a1, v23);
    CGContextSetLineCap(a1, kCGLineCapRound);
    v25 = (CGColor *)-[objc_class CGColor](isa, sel_CGColor);
    CGContextSetStrokeColorWithColor(a1, v25);

    sub_1BCAB6144();
    sub_1BCAB6150();
    CGContextStrokePath(a1);

    v12 = v21;
  }
  while (v10 != 4);
  v26 = 0;
  v106 = *MEMORY[0x1E0DC4B60];
  v105 = *MEMORY[0x1E0DC1448];
  v27 = *MEMORY[0x1E0DC48F8];
  v113 = (void *)*MEMORY[0x1E0DC1138];
  v114 = v27;
  v112 = (void *)*MEMORY[0x1E0DC1140];
  v111 = xmmword_1BCABFE80;
  v104[1] = MEMORY[0x1E0DEE9B8] + 8;
  v28 = v110;
  v29 = v116;
  do
  {
    if (v26 >= 4)
    {
      __break(1u);
      goto LABEL_51;
    }
    v30 = *((unsigned __int8 *)&unk_1E75454C0 + v26 + 32);
    if (*((_BYTE *)&unk_1E75454C0 + v26 + 32))
    {
      v31 = *((_BYTE *)&unk_1E75454C0 + v26 + 32);
      if (v30 > 3)
        goto LABEL_53;
    }
    else
    {
      v31 = 0;
    }
    v32 = sub_1BCA5D950();
    if (v32[2] && (v33 = sub_1BC9A2EE8(v31), (v34 & 1) != 0))
    {
      v35 = *(double *)(v32[7] + 8 * v33);
      swift_bridgeObjectRelease();
      if (qword_1ED6C5FF8 != -1)
        swift_once();
      v36 = (void *)qword_1ED6C5568;
      v37 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithDouble_, v35);
      v38 = objc_msgSend(v36, sel_stringFromNumber_, v37);

      if (!v38)
        goto LABEL_54;
      sub_1BCAB5F04();

      if (v30)
      {
        if (v30 > 3)
          goto LABEL_55;
        v39 = dbl_1BCAC7198[(char)(v30 - 1)];
      }
      else
      {
        v39 = 0.0;
      }
      if (qword_1ED6C6030 != -1)
        swift_once();
      v40 = v39 + *(double *)&qword_1ED6D3948;
      v124.a = v123;
      v124.b = v122;
      v124.c = v121;
      v124.d = v120;
      LOBYTE(v124.tx) = v119;
      v124.ty = v118;
      v131 = DiagramData.diagramBounds(forceNonZeroSize:)(1);
      v126.x = v40 + CGRectGetMinX((CGRect)v131);
      v124.a = v11;
      v124.b = v12;
      v124.c = v28;
      v124.d = v13;
      v124.tx = v15;
      v124.ty = v29;
      v126.y = 0.0;
      *(_QWORD *)&v41 = *(_OWORD *)&CGPointApplyAffineTransform(v126, &v124);
      if (qword_1ED6C6000 != -1)
        swift_once();
      v42 = v117 - *(double *)&qword_1ED6D3928;
      v43 = (void *)sub_1BCAB5EE0();
      v44 = sub_1BC9A649C(0, (unint64_t *)&qword_1ED6C6908);
      v45 = (void *)sub_1BCAB62E8();
      sub_1BCA5F17C();
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = v111;
      v47 = v113;
      *(_QWORD *)(inited + 32) = v113;
      *(_QWORD *)(inited + 40) = v45;
      *(_QWORD *)(inited + 64) = v44;
      v48 = v112;
      *(_QWORD *)(inited + 72) = v112;
      LOBYTE(v124.a) = 24;
      v49 = v47;
      v50 = v45;
      v51 = v48;
      v52 = DiagramConfiguration.Color.toColor()().super.isa;
      *(_QWORD *)(inited + 104) = sub_1BC9A649C(0, (unint64_t *)&qword_1ED6C5B20);
      *(_QWORD *)(inited + 80) = v52;
      sub_1BCA925B4(inited);

      type metadata accessor for Key(0);
      sub_1BC99F5A0();
      v53 = (void *)sub_1BCAB5E68();
      swift_bridgeObjectRelease();
      objc_msgSend(v43, sel_drawAtPoint_withAttributes_, v53, v41, v42);
      swift_bridgeObjectRelease();

    }
    else
    {
      swift_bridgeObjectRelease();
    }
    ++v26;
  }
  while (v26 != 4);
  v54 = sub_1BC9A649C(0, (unint64_t *)&qword_1ED6C6908);
  v55 = 0;
  v106 = *MEMORY[0x1E0DC4AA0];
  v105 = MEMORY[0x1E0DEE9B8] + 8;
  while (1)
  {
    v56 = byte_1E75454E8[v55 + 32];
    v124.a = v123;
    v124.b = v122;
    v124.c = v121;
    v124.d = v120;
    LOBYTE(v124.tx) = v119;
    v124.ty = v118;
    v132 = DiagramData.diagramBounds(forceNonZeroSize:)(1);
    CGRectGetMinX((CGRect)v132);
    v57 = (uint64_t)v107;
    sub_1BCAB4D94();
    sub_1BCA5D234(v57, v56);
    (*(void (**)(uint64_t, uint64_t))(v108 + 8))(v57, v109);
    if (v56 > 3)
      break;
    v58 = dbl_1BCAC71B0[(char)v56];
    if (qword_1ED6C6030 != -1)
      swift_once();
    v59 = v58 + *(double *)&qword_1ED6D3948;
    v124.a = v123;
    v124.b = v122;
    v124.c = v121;
    v124.d = v120;
    LOBYTE(v124.tx) = v119;
    v124.ty = v118;
    v133 = DiagramData.diagramBounds(forceNonZeroSize:)(1);
    v127.x = v59 + CGRectGetMinX((CGRect)v133);
    v124.a = v11;
    v124.b = v12;
    v124.c = v28;
    v124.d = v13;
    v124.tx = v15;
    v124.ty = v29;
    v127.y = 0.0;
    *(_QWORD *)&v60 = *(_OWORD *)&CGPointApplyAffineTransform(v127, &v124);
    if (qword_1ED6C6018 != -1)
      swift_once();
    ++v55;
    v61 = v117 - *(double *)&qword_1ED6D3930;
    v62 = (void *)sub_1BCAB5EE0();
    v63 = (void *)sub_1BCAB62E8();
    sub_1BCA5F17C();
    v64 = swift_initStackObject();
    *(_OWORD *)(v64 + 16) = v111;
    v66 = v112;
    v65 = v113;
    *(_QWORD *)(v64 + 32) = v113;
    *(_QWORD *)(v64 + 40) = v63;
    *(_QWORD *)(v64 + 64) = v54;
    *(_QWORD *)(v64 + 72) = v66;
    LOBYTE(v124.a) = 27;
    v67 = v65;
    v68 = v63;
    v69 = v66;
    v70 = DiagramConfiguration.Color.toColor()().super.isa;
    *(_QWORD *)(v64 + 104) = sub_1BC9A649C(0, (unint64_t *)&qword_1ED6C5B20);
    *(_QWORD *)(v64 + 80) = v70;
    sub_1BCA925B4(v64);

    type metadata accessor for Key(0);
    sub_1BC99F5A0();
    v71 = (void *)sub_1BCAB5E68();
    swift_bridgeObjectRelease();
    objc_msgSend(v62, sel_drawAtPoint_withAttributes_, v71, v60, v61);
    swift_bridgeObjectRelease();

    if (v55 == 4)
    {
      v72 = 0;
      v73 = 0;
      v114 = MEMORY[0x1E0DEE9B8] + 8;
      while (1)
      {
        v74 = v72;
        v75 = *((_BYTE *)&unk_1E7545510 + v73 + 32);
        v124.a = v123;
        v124.b = v122;
        v124.c = v121;
        v124.d = v120;
        LOBYTE(v124.tx) = v119;
        v124.ty = v118;
        v134 = DiagramData.diagramBounds(forceNonZeroSize:)(1);
        if ((v75 & 1) != 0)
          MaxY = CGRectGetMaxY((CGRect)v134);
        else
          MaxY = CGRectGetMinY((CGRect)v134);
        v77 = MaxY;
        if (qword_1ED6C5F98 != -1)
          swift_once();
        v78 = (void *)qword_1ED6C5588;
        v79 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithDouble_, v77);
        if (qword_1ED6C6008 != -1)
          swift_once();
        v80 = qword_1ED6C5580;
        if (qword_1ED6C5FA0 != -1)
          swift_once();
        v81 = objc_msgSend(v78, sel_stringFromValue_displayType_unitController_, v79, v80, qword_1ED6C5590);

        if (!v81)
          break;
        sub_1BCAB5F04();

        sub_1BCA5DE38();
        sub_1BCA5D44C(v75, v82, v117, v82, v84, v83, v85, v77);
        v87 = v86;
        v124.a = v123;
        v124.b = v122;
        v124.c = v121;
        v124.d = v120;
        LOBYTE(v124.tx) = v119;
        v124.ty = v118;
        v72 = 1;
        v135 = DiagramData.diagramBounds(forceNonZeroSize:)(1);
        v128.x = CGRectGetMaxX((CGRect)v135);
        v124.a = v11;
        v124.b = v12;
        v124.c = v28;
        v124.d = v13;
        v124.tx = v15;
        v124.ty = v29;
        v128.y = 0.0;
        v88 = CGPointApplyAffineTransform(v128, &v124).x + *(double *)&qword_1ED6D3948;
        v89 = (void *)sub_1BCAB5EE0();
        LOBYTE(v124.a) = 13;
        DiagramConfiguration.TextAttributes.toTextAttributes()();
        v90 = (void *)sub_1BCAB5E68();
        swift_bridgeObjectRelease();
        objc_msgSend(v89, sel_drawAtPoint_withAttributes_, v90, v88, v87);
        swift_bridgeObjectRelease();

        v73 = 1u;
        if ((v74 & 1) != 0)
        {
          v91 = v115;
          v92 = sub_1BCA5D814();
          v93 = *(_QWORD *)(v92 + 16);
          if (v93)
          {
            v94 = *(_BYTE *)(v91 + 17);
            v95 = *(_BYTE *)(v91 + 16);
            v96 = v92 + 40;
            do
            {
              v129 = *(CGPoint *)(v96 - 8);
              v124.a = v11;
              v124.b = v12;
              v124.c = v28;
              v124.d = v13;
              v124.tx = v15;
              v124.ty = v29;
              v97 = CGPointApplyAffineTransform(v129, &v124);
              LOBYTE(v124.a) = v94;
              DiagramConfiguration.LineRadius.toFloat()();
              v99 = v97.x - v98;
              v100 = v97.y - v98;
              v101 = v98 + v98;
              LOBYTE(v124.a) = v95;
              v102 = DiagramConfiguration.Color.toColor()().super.isa;
              v103 = (CGColor *)-[objc_class CGColor](v102, sel_CGColor);

              CGContextSetFillColorWithColor(a1, v103);
              CGContextSetBlendMode(a1, kCGBlendModeNormal);
              v136.origin.x = v99;
              v29 = v116;
              v136.origin.y = v100;
              v136.size.width = v101;
              v136.size.height = v101;
              CGContextFillEllipseInRect(a1, v136);
              v96 += 16;
              --v93;
            }
            while (v93);
          }
          swift_bridgeObjectRelease();
          return;
        }
      }
      goto LABEL_52;
    }
  }
LABEL_51:
  __break(1u);
LABEL_52:
  __break(1u);
LABEL_53:
  __break(1u);
LABEL_54:
  __break(1u);
LABEL_55:
  __break(1u);
}

void sub_1BCA5EE94(CGContext *a1, double *a2, double a3, double a4)
{
  uint64_t v4;

  sub_1BCA5E26C(a1, a2, v4, a3, a4);
}

uint64_t DiagramHeartRateRecovery.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t DiagramHeartRateRecovery.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

double sub_1BCA5EEFC()
{
  double result;

  *(_QWORD *)&result = (unint64_t)DiagramData.diagramBounds(forceNonZeroSize:)(1);
  return result;
}

void sub_1BCA5EF48()
{
  sub_1BCA5DE38();
}

void (*sub_1BCA5EF68())(CGContext *a1, double *a2, double a3, double a4)
{
  swift_retain();
  return sub_1BCA5EE94;
}

uint64_t type metadata accessor for DiagramHeartRateRecovery()
{
  return objc_opt_self();
}

uint64_t method lookup function for DiagramHeartRateRecovery()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of DiagramHeartRateRecovery.__allocating_init(recoveryConfiguration:diagramData:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 184))();
}

uint64_t dispatch thunk of DiagramHeartRateRecovery.modelSpace.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
}

uint64_t dispatch thunk of DiagramHeartRateRecovery.screenInsets.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 200))();
}

uint64_t dispatch thunk of DiagramHeartRateRecovery.drawingBlock.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 208))();
}

uint64_t storeEnumTagSinglePayload for DiagramHeartRateRecovery.MinuteLine(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1BCA5F040 + 4 * byte_1BCAC7045[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1BCA5F074 + 4 * byte_1BCAC7040[v4]))();
}

uint64_t sub_1BCA5F074(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BCA5F07C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BCA5F084);
  return result;
}

uint64_t sub_1BCA5F090(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BCA5F098);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1BCA5F09C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BCA5F0A4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DiagramHeartRateRecovery.MinuteLine()
{
  return &type metadata for DiagramHeartRateRecovery.MinuteLine;
}

unint64_t sub_1BCA5F0C4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EF47A108;
  if (!qword_1EF47A108)
  {
    sub_1BC9A1210(255, &qword_1EF47A110, (uint64_t)&type metadata for DiagramHeartRateRecovery.MinuteLine, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    result = MEMORY[0x1BCCFBE84](MEMORY[0x1E0DEAF50], v1);
    atomic_store(result, (unint64_t *)&qword_1EF47A108);
  }
  return result;
}

unint64_t sub_1BCA5F128()
{
  unint64_t result;

  result = qword_1ED6C5578;
  if (!qword_1ED6C5578)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCAC716C, &type metadata for DiagramHeartRateRecovery.MinuteLine);
    atomic_store(result, (unint64_t *)&qword_1ED6C5578);
  }
  return result;
}

unint64_t sub_1BCA5F16C(unint64_t result)
{
  if (result >= 4)
    return 4;
  return result;
}

void sub_1BCA5F17C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED6C5B70)
  {
    sub_1BCA5F1D0();
    v0 = sub_1BCAB67A4();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED6C5B70);
  }
}

void sub_1BCA5F1D0()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_1ED6C5B08)
  {
    type metadata accessor for Key(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1ED6C5B08);
  }
}

uint64_t sub_1BCA5F238@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  uint64_t v3;
  char v4;

  swift_retain();
  sub_1BCAB5070();
  result = swift_release();
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  return result;
}

uint64_t sub_1BCA5F294(uint64_t a1)
{
  id v1;
  char v3;

  v1 = *(id *)a1;
  v3 = *(_BYTE *)(a1 + 8);
  sub_1BC9A81A4(*(id *)a1, v3);
  swift_retain();
  sub_1BCAB507C();
  sub_1BC9A836C(v1, v3);
  return swift_release();
}

uint64_t sub_1BCA5F314()
{
  uint64_t v1;

  swift_retain();
  sub_1BCAB5070();
  swift_release();
  return v1;
}

uint64_t QuantityDistributionQueryOperation.queryStartDate.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1BCA5F3B0(&qword_1ED6D3A50, (uint64_t (*)(_QWORD))MEMORY[0x1E0CB0870], a1);
}

uint64_t QuantityDistributionQueryOperation.queryEndDate.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1BCA5F3B0(&qword_1ED6D3A38, (uint64_t (*)(_QWORD))MEMORY[0x1E0CB0870], a1);
}

uint64_t QuantityDistributionQueryOperation.anchorDate.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1BCA5F3B0(&qword_1ED6D3A30, (uint64_t (*)(_QWORD))MEMORY[0x1E0CB0870], a1);
}

uint64_t QuantityDistributionQueryOperation.intervalComponents.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1BCA5F3B0(&qword_1ED6D3A58, (uint64_t (*)(_QWORD))MEMORY[0x1E0CAEAB0], a1);
}

uint64_t sub_1BCA5F3B0@<X0>(_QWORD *a1@<X0>, uint64_t (*a2)(_QWORD)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v5 = v3 + *a1;
  v6 = a2(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a3, v5, v6);
}

void *QuantityDistributionQueryOperation.queryPredicate.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + qword_1ED6D3A48);
  v2 = v1;
  return v1;
}

id sub_1BCA5F41C()
{
  _BYTE *v0;
  _BYTE *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  char *v16;
  void *v17;
  id v18;
  id result;
  void *v20;
  char *v21;
  void (*v22)(char *, _BYTE *, uint64_t);
  void *v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  void *v27;
  id v28;
  objc_class *v29;
  char *v30;
  objc_class *v31;
  id v32;
  id v33;
  void *v34;
  id v35;
  _QWORD v36[2];
  Class isa;
  id v38;
  id v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  HKQuantityType v43;
  char v44;

  v1 = v0;
  v2 = sub_1BCAB4C74();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1BCAB4E54();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)v36 - v11;
  *(_QWORD *)&v14 = MEMORY[0x1E0C80A78](v13).n128_u64[0];
  v16 = (char *)v36 - v15;
  v17 = *(void **)&v1[qword_1ED6C6BF0];
  if (v17)
  {
    v18 = *(id *)&v1[qword_1ED6C6BF0];
LABEL_5:
    v35 = v17;
    return v18;
  }
  v41 = v5;
  v42 = qword_1ED6C6BF0;
  v43.super.super.super.isa = *(Class *)&v1[qword_1ED6C6C00];
  result = -[objc_class canonicalUnit](v43.super.super.super.isa, sel_canonicalUnit, v14);
  if (result)
  {
    v20 = result;
    v38 = objc_msgSend((id)objc_opt_self(), sel_quantityWithUnit_doubleValue_, result, 0.0);

    v21 = &v1[qword_1ED6D3A40];
    v44 = v1[qword_1ED6D3A40 + 3];
    isa = BucketSize.quantityForType(type:)(v43).super.isa;
    v40 = *((_QWORD *)v21 + 1);
    v22 = *(void (**)(char *, _BYTE *, uint64_t))(v7 + 16);
    v22(v16, &v1[qword_1ED6D3A50], v6);
    v22(v12, &v1[qword_1ED6D3A38], v6);
    v23 = *(void **)&v1[qword_1ED6D3A48];
    v22(v9, &v1[qword_1ED6D3A30], v6);
    v24 = (uint64_t)v41;
    (*(void (**)(char *, _BYTE *, uint64_t))(v3 + 16))(v41, &v1[qword_1ED6D3A58], v2);
    v25 = swift_allocObject();
    *(_QWORD *)(v25 + 16) = v1;
    v36[1] = objc_allocWithZone(MEMORY[0x1E0CB7008]);
    v26 = v23;
    v27 = v23;
    v28 = v38;
    v39 = v38;
    v29 = isa;
    v30 = v1;
    v31 = v43.super.super.super.isa;
    v32 = sub_1BCA609A4(v31, (uint64_t)v16, (uint64_t)v12, v40, v27, (uint64_t)v9, v24, v28, v29, 5, (uint64_t)sub_1BCA62150, v25);
    v33 = objc_msgSend(v30, sel_name);
    objc_msgSend(v32, sel_setDebugIdentifier_, v33);

    objc_msgSend(v32, sel_setQualityOfService_, *(_QWORD *)&v30[qword_1ED6D3A60]);
    v34 = *(void **)&v1[v42];
    *(_QWORD *)&v1[v42] = v32;
    v18 = v32;

    v17 = 0;
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

void *QuantityDistributionQueryOperation.__allocating_init(quantityType:configuration:configurationOverrides:name:queryQualityOfService:healthStore:baseDate:resultHandler:)(void (*a1)(_QWORD, _QWORD, _QWORD), unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int (*a6)(uint64_t, uint64_t, void *), void *a7, uint64_t a8, char *a9, uint64_t (*a10)(_QWORD, _QWORD, _QWORD))
{
  objc_class *v10;
  id v18;
  void *v19;

  v18 = objc_allocWithZone(v10);
  v19 = sub_1BCA61128(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);

  swift_release();
  return v19;
}

void *QuantityDistributionQueryOperation.init(quantityType:configuration:configurationOverrides:name:queryQualityOfService:healthStore:baseDate:resultHandler:)(void (*a1)(_QWORD, _QWORD, _QWORD), unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int (*a6)(uint64_t, uint64_t, void *), void *a7, uint64_t a8, char *a9, uint64_t (*a10)(_QWORD, _QWORD, _QWORD))
{
  void *v12;

  v12 = sub_1BCA61128(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);

  swift_release();
  return v12;
}

_QWORD *static QuantityDistributionQueryOperation.distributionPoints(for:zeroCountForGap:histogramBucketSize:mapDatesToX:)(unint64_t a1, uint64_t a2, void *a3, double (*a4)(char *, char *), uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  double v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  id v19;
  void *v20;
  BOOL v21;
  unint64_t v22;
  id v23;
  char *v24;
  id v25;
  char *v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t);
  id v29;
  id v30;
  double v31;
  double v32;
  id v33;
  id v34;
  double v35;
  double v36;
  id v37;
  id v38;
  double v39;
  double v40;
  id v41;
  unint64_t v42;
  char v43;
  unint64_t v44;
  unint64_t v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  unint64_t v52;
  id v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  unint64_t v58;
  unint64_t v59;
  int64_t v60;
  unint64_t v61;
  double v62;
  _QWORD *v63;
  double *v64;
  double *v65;
  unint64_t v66;
  unint64_t v67;
  id v68;
  _QWORD *v69;
  _QWORD *v70;
  unint64_t v71;
  unint64_t v72;
  id v73;
  uint64_t v74;
  double v75;
  double v76;
  unint64_t v77;
  unint64_t v78;
  int64_t v79;
  unint64_t v80;
  double v81;
  double *v82;
  double v83;
  double v84;
  double *v85;
  _QWORD *v86;
  _QWORD *v87;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  void *v93;
  unint64_t v94;
  unint64_t v95;
  char *v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  double (*v100)(char *, char *);
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  id v104;
  double v105;
  _QWORD *v106;
  uint64_t v107;

  v100 = a4;
  v101 = a5;
  v8 = sub_1BCAB4E54();
  v98 = *(_QWORD *)(v8 - 8);
  v99 = v8;
  MEMORY[0x1E0C80A78](v8);
  v97 = (char *)&v89 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v96 = (char *)&v89 - v11;
  if (a1)
  {
    swift_bridgeObjectRetain();
    v12 = objc_msgSend(a3, sel__unit);
    objc_msgSend(a3, sel_doubleValueForUnit_, v12);
    v14 = v13;

    v15 = a1 & 0xFFFFFFFFFFFFFF8;
    if (a1 >> 62)
      goto LABEL_102;
    v16 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    while (v16)
    {
      v17 = 0;
      v95 = a1 & 0xC000000000000001;
      v18 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v90 = a1 + 32;
      v94 = a1;
      v93 = a3;
      v92 = v15;
      v91 = v16;
      while (1)
      {
        if (v95)
        {
          v19 = (id)MEMORY[0x1BCCFB0D4](v17, a1);
        }
        else
        {
          if (v17 >= *(_QWORD *)(v15 + 16))
            goto LABEL_101;
          v19 = *(id *)(v90 + 8 * v17);
        }
        v20 = v19;
        v21 = __OFADD__(v17, 1);
        v22 = v17 + 1;
        if (v21)
          break;
        v103 = v22;
        v23 = objc_msgSend(v19, sel_startDate);
        v24 = v96;
        sub_1BCAB4E24();

        v25 = objc_msgSend(v20, sel_endDate);
        v26 = v97;
        sub_1BCAB4E24();

        v105 = v100(v24, v26);
        v27 = v99;
        v28 = *(void (**)(char *, uint64_t))(v98 + 8);
        v28(v26, v99);
        v28(v24, v27);
        v29 = objc_msgSend(v20, sel_minimumValue);
        v30 = objc_msgSend(a3, sel__unit);
        objc_msgSend(v29, sel_doubleValueForUnit_, v30);
        v32 = v31;

        v33 = objc_msgSend(v20, sel_maximumValue);
        v34 = objc_msgSend(a3, sel__unit);
        objc_msgSend(v33, sel_doubleValueForUnit_, v34);
        v36 = v35;

        v37 = objc_msgSend(v20, sel_minimumBucketValue);
        v38 = objc_msgSend(a3, sel__unit);
        objc_msgSend(v37, sel_doubleValueForUnit_, v38);
        v40 = v39;

        v104 = v20;
        v41 = objc_msgSend(v20, sel_histogramCounts);
        sub_1BC9A649C(0, (unint64_t *)&qword_1ED6C6EB8);
        v42 = sub_1BCAB6018();

        if (v42 >> 62)
        {
          swift_bridgeObjectRetain();
          a1 = sub_1BCAB65DC();
          swift_bridgeObjectRelease();
          if (a1)
          {
LABEL_14:
            v106 = v18;
            v43 = 0;
            v44 = 0;
            v45 = v42 & 0xC000000000000001;
            v107 = v42 & 0xFFFFFFFFFFFFFF8;
            v102 = v42 + 32;
            v46 = v40;
            while (2)
            {
              if (v46 > v32)
                v47 = v46;
              else
                v47 = v32;
              if (v36 >= v47)
                v48 = v47;
              else
                v48 = v36;
LABEL_21:
              v15 = 0;
              if (v40 > v32)
                v49 = v40;
              else
                v49 = v32;
              if (v36 >= v49)
                v50 = v49;
              else
                v50 = v36;
              v51 = v40;
              v52 = v44;
              v18 = v106;
              while (1)
              {
                v106 = v18;
                if (v45)
                {
                  v53 = (id)MEMORY[0x1BCCFB0D4](v52, v42);
                }
                else
                {
                  if (v52 >= *(_QWORD *)(v107 + 16))
                    goto LABEL_99;
                  v53 = *(id *)(v102 + 8 * v52);
                }
                a3 = v53;
                v44 = v52 + 1;
                if (__OFADD__(v52, 1))
                  goto LABEL_97;
                v54 = objc_msgSend(v53, sel_integerValue);
                v55 = (uint64_t)v54;
                if ((v43 & 1) == 0)
                  break;
                if ((uint64_t)v54 > 0)
                {
LABEL_59:

                  v40 = v14 + v51;
                  v43 = 1;
                  if (v44 != a1)
                    goto LABEL_21;
LABEL_74:
                  v51 = v46;
                  goto LABEL_75;
                }
                v56 = v15 + 1;
                if (__OFADD__(v15, 1))
                  goto LABEL_98;
                if (v56 != a2)
                {

                  if (v44 != a1)
                  {
                    v66 = v52 + 5;
                    while (1)
                    {
                      v67 = v66 - 4;
                      if (v45)
                      {
                        v68 = (id)MEMORY[0x1BCCFB0D4](v66 - 4, v42);
                      }
                      else
                      {
                        if (v67 >= *(_QWORD *)(v107 + 16))
                          goto LABEL_99;
                        v68 = *(id *)(v42 + 8 * v66);
                      }
                      a3 = v68;
                      v21 = __OFADD__(v67, 1);
                      v52 = v66 - 3;
                      if (v21)
                        break;
                      v51 = v14 + v51;
                      if ((uint64_t)objc_msgSend(v68, sel_integerValue) > 0)
                      {
                        v44 = v66 - 3;
                        goto LABEL_59;
                      }
                      if (__OFADD__(v56, 1))
                        goto LABEL_98;
                      if (v56 + 1 == a2)
                        goto LABEL_38;

                      ++v56;
                      ++v66;
                      if (v52 == a1)
                        goto LABEL_74;
                    }
LABEL_97:
                    __break(1u);
LABEL_98:
                    __break(1u);
LABEL_99:
                    __break(1u);
                    goto LABEL_100;
                  }
                  goto LABEL_74;
                }
                ++v52;
LABEL_38:
                v57 = v106;
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                  v57 = sub_1BC9D9808(0, v57[2] + 1, 1, v57);
                v59 = v57[2];
                v58 = v57[3];
                v60 = v58 >> 1;
                v61 = v59 + 1;
                v62 = v105;
                if (v58 >> 1 <= v59)
                {
                  v69 = sub_1BC9D9808((_QWORD *)(v58 > 1), v59 + 1, 1, v57);
                  v62 = v105;
                  v57 = v69;
                  v58 = v69[3];
                  v60 = v58 >> 1;
                }
                v57[2] = v61;
                v63 = v57;
                v64 = (double *)&v57[2 * v59];
                v64[4] = v62;
                v64[5] = v48;
                if (v60 < (uint64_t)(v59 + 2))
                {
                  v70 = sub_1BC9D9808((_QWORD *)(v58 > 1), v59 + 2, 1, v57);
                  v62 = v105;
                  v63 = v70;
                }
                v63[2] = v59 + 2;
                v18 = v63;
                v65 = (double *)&v63[2 * v61];
                v65[4] = v62;
                v65[5] = v50;

                v43 = 0;
                v51 = v14 + v51;
                v15 = a2;
                if (v52 == a1)
                {

                  swift_bridgeObjectRelease();
                  a1 = v94;
                  a3 = v93;
                  v15 = v92;
                  v16 = v91;
                  v17 = v103;
                  goto LABEL_6;
                }
              }

              if (v55 <= 0)
              {
                if (v44 == a1)
                {
LABEL_73:

                  swift_bridgeObjectRelease();
                  a1 = v94;
                  a3 = v93;
                  v15 = v92;
                  v16 = v91;
                  v17 = v103;
                  v18 = v106;
                  goto LABEL_6;
                }
                v71 = v52 + 5;
                while (1)
                {
                  v72 = v71 - 4;
                  if (v45)
                  {
                    v73 = (id)MEMORY[0x1BCCFB0D4](v71 - 4, v42);
                  }
                  else
                  {
                    if (v72 >= *(_QWORD *)(v107 + 16))
                      goto LABEL_99;
                    v73 = *(id *)(v42 + 8 * v71);
                  }
                  a3 = v73;
                  v44 = v71 - 3;
                  if (__OFADD__(v72, 1))
                    goto LABEL_97;
                  v51 = v14 + v51;
                  v74 = (uint64_t)objc_msgSend(v73, sel_integerValue);

                  if (v74 >= 1)
                    break;
                  ++v71;
                  if (v44 == a1)
                    goto LABEL_73;
                }
              }
              v40 = v14 + v51;
              v43 = 1;
              v46 = v51;
              if (v44 != a1)
                continue;
              break;
            }
LABEL_75:
            swift_bridgeObjectRelease();
            if (v51 > v32)
              v75 = v51;
            else
              v75 = v32;
            if (v36 >= v75)
              v76 = v75;
            else
              v76 = v36;
            v18 = v106;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              v18 = sub_1BC9D9808(0, v18[2] + 1, 1, v18);
            a1 = v94;
            a3 = v93;
            v15 = v92;
            v16 = v91;
            v78 = v18[2];
            v77 = v18[3];
            v79 = v77 >> 1;
            v80 = v78 + 1;
            v81 = v105;
            if (v77 >> 1 <= v78)
            {
              v86 = sub_1BC9D9808((_QWORD *)(v77 > 1), v78 + 1, 1, v18);
              v81 = v105;
              v18 = v86;
              v77 = v86[3];
              v79 = v77 >> 1;
            }
            v18[2] = v80;
            v82 = (double *)&v18[2 * v78];
            v82[4] = v81;
            v82[5] = v76;
            if (v40 > v32)
              v83 = v40;
            else
              v83 = v32;
            if (v36 >= v83)
              v84 = v83;
            else
              v84 = v36;
            if (v79 < (uint64_t)(v78 + 2))
            {
              v87 = sub_1BC9D9808((_QWORD *)(v77 > 1), v78 + 2, 1, v18);
              v81 = v105;
              v18 = v87;
            }
            v18[2] = v78 + 2;
            v85 = (double *)&v18[2 * v80];
            v85[4] = v81;
            v85[5] = v84;
            v17 = v103;

            goto LABEL_6;
          }
        }
        else
        {
          a1 = *(_QWORD *)((v42 & 0xFFFFFFFFFFFFF8) + 0x10);
          if (a1)
            goto LABEL_14;
        }

        swift_bridgeObjectRelease();
        v17 = v103;
        a1 = v94;
LABEL_6:
        if (v17 == v16)
        {
          swift_bridgeObjectRelease();
          return v18;
        }
      }
LABEL_100:
      __break(1u);
LABEL_101:
      __break(1u);
LABEL_102:
      swift_bridgeObjectRetain();
      v16 = sub_1BCAB65DC();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
  }
  return (_QWORD *)MEMORY[0x1E0DEE9D8];
}

void sub_1BCA60108()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  void *v5;
  _BYTE *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  void *v14;
  id v15;
  uint64_t v16;
  void *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  char v24;
  uint64_t ObjectType;
  uint64_t v26;

  v1 = sub_1BCAB5514();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v4 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BC9A7EA4();
  v5 = (void *)swift_allocError();
  *v6 = 2;
  v23 = v5;
  v24 = 1;
  swift_retain();
  sub_1BCAB507C();

  swift_release();
  sub_1BCAB54B4();
  v7 = v0;
  v8 = sub_1BCAB54FC();
  v9 = sub_1BCAB618C();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = swift_slowAlloc();
    v11 = (_QWORD *)swift_slowAlloc();
    v21 = swift_slowAlloc();
    v26 = v21;
    *(_DWORD *)v10 = 136380931;
    ObjectType = swift_getObjectType();
    sub_1BCA61F2C();
    v22 = v1;
    v12 = sub_1BCAB5F28();
    ObjectType = sub_1BC99BD4C(v12, v13, &v26);
    sub_1BCAB63A8();

    swift_bridgeObjectRelease();
    *(_WORD *)(v10 + 12) = 2113;
    v20 = v2;
    v14 = *(void **)&v7[qword_1ED6C6C00];
    ObjectType = (uint64_t)v14;
    v15 = v14;
    sub_1BCAB63A8();
    *v11 = v14;

    _os_log_impl(&dword_1BC989000, v8, v9, "%{private}s: Quantity distribution running for %{private}@", (uint8_t *)v10, 0x16u);
    sub_1BC9A61D8(0, &qword_1ED6C4B90, &qword_1ED6C7100, 0x1E0DE7910, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    swift_arrayDestroy();
    MEMORY[0x1BCCFBF5C](v11, -1, -1);
    v16 = v21;
    swift_arrayDestroy();
    MEMORY[0x1BCCFBF5C](v16, -1, -1);
    MEMORY[0x1BCCFBF5C](v10, -1, -1);

    (*(void (**)(char *, uint64_t))(v20 + 8))(v4, v22);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  }
  v17 = *(void **)&v7[qword_1ED6C6BF8];
  v18 = sub_1BCA5F41C();
  objc_msgSend(v17, sel_executeQuery_, v18);

}

void sub_1BCA6042C(void *a1)
{
  id v1;

  v1 = a1;
  sub_1BCA60108();

}

void sub_1BCA60460()
{
  char *v0;
  void *v1;
  _QWORD *v2;
  Swift::String v3;
  Swift::String v4;
  char *v5;
  uint64_t v6;
  void *v7;
  id v8;

  if (objc_msgSend(v0, sel_isCancelled))
  {
    sub_1BC9A82C4();
    v1 = (void *)swift_allocError();
    *v2 = 0xD000000000000022;
    v2[1] = 0x80000001BCAC71C0;
    v2[2] = 0x4000000000000000;
    MEMORY[0x1E0C80A78](v1);
    swift_retain();
    sub_1BCAB507C();

    swift_release();
    v3._countAndFlagsBits = 0x656C6C65636E6163;
    v3._object = (void *)0xE900000000000064;
    v4._countAndFlagsBits = 0;
    v4._object = (void *)0xE000000000000000;
    NSOperation.logLifeCycleEvent(_:withPrivateInfo:)(v3, v4);
  }
  v5 = &v0[qword_1ED6C6C08];
  v6 = *(_QWORD *)&v0[qword_1ED6C6C08];
  *(_QWORD *)v5 = 0;
  *((_QWORD *)v5 + 1) = 0;
  sub_1BC9EED1C(v6);
  v7 = *(void **)&v0[qword_1ED6C6BF8];
  v8 = sub_1BCA5F41C();
  objc_msgSend(v7, sel_stopQuery_, v8);

}

void sub_1BCA605BC(uint64_t a1, void *a2, char a3)
{
  char v4;
  Swift::String v5;
  Swift::String v6;

  v4 = a3 & 1;
  sub_1BC9A81A4(a2, a3 & 1);
  swift_retain();
  sub_1BCAB507C();
  sub_1BC9A836C(a2, v4);
  swift_release();
  v5._countAndFlagsBits = 0x64656873696E6966;
  v5._object = (void *)0xE800000000000000;
  v6._countAndFlagsBits = 0;
  v6._object = (void *)0xE000000000000000;
  NSOperation.logLifeCycleEvent(_:withPrivateInfo:)(v5, v6);
}

id QuantityDistributionQueryOperation.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void QuantityDistributionQueryOperation.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void sub_1BCA606AC()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void sub_1BCA606D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;

  swift_release();

  sub_1BC9EED1C(*(_QWORD *)(v0 + qword_1ED6C6C08));
  sub_1BC9B3A38(v0 + qword_1ED6D3A68, &qword_1ED6C7280, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870]);
  v1 = v0 + qword_1ED6D3A50;
  v2 = sub_1BCAB4E54();
  v3 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8);
  v3(v1, v2);
  v3(v0 + qword_1ED6D3A38, v2);
  v3(v0 + qword_1ED6D3A30, v2);
  v4 = v0 + qword_1ED6D3A58;
  v5 = sub_1BCAB4C74();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);

}

id QuantityDistributionQueryOperation.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for QuantityDistributionQueryOperation();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

void sub_1BCA60828(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;

  swift_release();

  sub_1BC9EED1C(*(_QWORD *)(a1 + qword_1ED6C6C08));
  sub_1BC9B3A38(a1 + qword_1ED6D3A68, &qword_1ED6C7280, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870]);
  v2 = a1 + qword_1ED6D3A50;
  v3 = sub_1BCAB4E54();
  v4 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8);
  v4(v2, v3);
  v4(a1 + qword_1ED6D3A38, v3);
  v4(a1 + qword_1ED6D3A30, v3);
  v5 = a1 + qword_1ED6D3A58;
  v6 = sub_1BCAB4C74();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);

}

uint64_t sub_1BCA60948@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  uint64_t v3;
  char v4;

  swift_retain();
  sub_1BCAB5070();
  result = swift_release();
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  return result;
}

id sub_1BCA609A4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, void *a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t);
  void *v25;
  _QWORD aBlock[7];

  v14 = (void *)sub_1BCAB4DE8();
  v15 = (void *)sub_1BCAB4DE8();
  v16 = (void *)sub_1BCAB4DE8();
  v17 = (void *)sub_1BCAB4BF0();
  aBlock[4] = a11;
  aBlock[5] = a12;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1BCA60B4C;
  aBlock[3] = &block_descriptor_14;
  v18 = _Block_copy(aBlock);
  v19 = objc_msgSend(v25, sel_initWithQuantityType_startDate_endDate_contextStyle_predicate_anchorDate_intervalComponents_histogramAnchor_histogramBucketSize_options_completionHandler_, a1, v14, v15, a4, a5, v16, v17, a8, a9, a10, v18);
  _Block_release(v18);

  v20 = sub_1BCAB4C74();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 8))(a7, v20);
  v21 = sub_1BCAB4E54();
  v22 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 8);
  v22(a6, v21);
  v22(a3, v21);
  v22(a2, v21);
  swift_release();
  return v19;
}

uint64_t sub_1BCA60B4C(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  uint64_t v5;
  void (*v7)(id, uint64_t, void *);
  id v8;
  id v9;

  v5 = a3;
  v7 = *(void (**)(id, uint64_t, void *))(a1 + 32);
  if (a3)
  {
    sub_1BC9A649C(0, &qword_1ED6C6E98);
    v5 = sub_1BCAB6018();
  }
  swift_retain();
  v8 = a2;
  v9 = a4;
  v7(v8, v5, a4);
  swift_release();

  return swift_bridgeObjectRelease();
}

void sub_1BCA60BEC(void *a1, unint64_t a2)
{
  char *v2;
  char *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  char *v13;
  char *v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  id v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  NSObject *v30;
  os_log_type_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  void (*v39)(void *, BOOL);
  uint64_t v40;
  _QWORD v41[2];
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t ObjectType;
  uint64_t v51[3];

  v3 = v2;
  v6 = sub_1BCAB5514();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v11 = MEMORY[0x1E0C80A78](v10).n128_u64[0];
  v13 = (char *)v41 - v12;
  if ((objc_msgSend(v3, sel_isCancelled, v11) & 1) != 0)
  {
    sub_1BCAB54B4();
    v14 = v3;
    v15 = sub_1BCAB54FC();
    v16 = sub_1BCAB6198();
    if (os_log_type_enabled(v15, v16))
    {
      v49 = v7;
      v17 = (uint8_t *)swift_slowAlloc();
      v18 = swift_slowAlloc();
      v51[0] = v18;
      *(_DWORD *)v17 = 136380675;
      ObjectType = swift_getObjectType();
      sub_1BCA61F2C();
      v48 = v6;
      v19 = sub_1BCAB5F28();
      ObjectType = sub_1BC99BD4C(v19, v20, v51);
      sub_1BCAB63A8();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1BC989000, v15, v16, "%{private}s: Query was cancelled; results will not be processed.",
        v17,
        0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BCCFBF5C](v18, -1, -1);
      MEMORY[0x1BCCFBF5C](v17, -1, -1);

      (*(void (**)(char *, uint64_t))(v49 + 8))(v9, v48);
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    }
  }
  else if ((objc_msgSend(v3, sel_isFinished) & 1) == 0)
  {
    v21 = a1;
    if (!a1)
    {
      if (a2)
        v22 = 0xD000000000000029;
      else
        v22 = 0;
      if (a2)
        v23 = 0x80000001BCAD2D30;
      else
        v23 = 0;
      v24 = 0xC000000000000000;
      if (a2)
        v24 = a2 | 0x8000000000000000;
      v51[0] = v22;
      v51[1] = v23;
      v47 = v24;
      v48 = v23;
      v51[2] = v24;
      v25 = (id)a2;
      v26 = sub_1BC9A82C4();
      v46 = sub_1BCAB6810();
      v28 = v27;
      sub_1BCAB54B4();
      v29 = v3;
      swift_bridgeObjectRetain();
      v30 = sub_1BCAB54FC();
      v31 = sub_1BCAB61A4();
      v45 = v31;
      if (os_log_type_enabled(v30, v31))
      {
        v32 = swift_slowAlloc();
        v49 = v7;
        v33 = v32;
        v42 = swift_slowAlloc();
        v51[0] = v42;
        *(_DWORD *)v33 = 136446466;
        v41[1] = v33 + 4;
        ObjectType = swift_getObjectType();
        sub_1BCA61F2C();
        v44 = v22;
        v34 = sub_1BCAB5F28();
        v43 = v26;
        ObjectType = sub_1BC99BD4C(v34, v35, v51);
        sub_1BCAB63A8();

        swift_bridgeObjectRelease();
        *(_WORD *)(v33 + 12) = 2082;
        swift_bridgeObjectRetain();
        ObjectType = sub_1BC99BD4C(v46, v28, v51);
        v22 = v44;
        sub_1BCAB63A8();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_1BC989000, v30, (os_log_type_t)v45, "%{public}s: Error while processing distribution query: %{public}s", (uint8_t *)v33, 0x16u);
        v36 = v42;
        swift_arrayDestroy();
        MEMORY[0x1BCCFBF5C](v36, -1, -1);
        MEMORY[0x1BCCFBF5C](v33, -1, -1);

        (*(void (**)(char *, uint64_t))(v49 + 8))(v13, v6);
      }
      else
      {

        swift_bridgeObjectRelease_n();
        (*(void (**)(char *, uint64_t))(v7 + 8))(v13, v6);
      }
      v21 = (void *)swift_allocError();
      v37 = v48;
      *v38 = v22;
      v38[1] = v37;
      v38[2] = v47;
    }
    v39 = *(void (**)(void *, BOOL))&v3[qword_1ED6C6C08];
    if (v39)
    {
      swift_bridgeObjectRetain();
      sub_1BC9B30EC((uint64_t)v39);
      v39(v21, a1 == 0);
      v40 = sub_1BC9EED1C((uint64_t)v39);
    }
    else
    {
      v40 = swift_bridgeObjectRetain();
    }
    MEMORY[0x1E0C80A78](v40);
    v41[-4] = v3;
    v41[-3] = v21;
    LOBYTE(v41[-2]) = a1 == 0;
    sub_1BCAB50AC();
    sub_1BC9A836C(v21, a1 == 0);
  }
}

void *sub_1BCA61128(void (*a1)(_QWORD, _QWORD, _QWORD), unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int (*a6)(uint64_t, uint64_t, void *), void *a7, uint64_t a8, char *a9, uint64_t (*a10)(_QWORD, _QWORD, _QWORD))
{
  char *v10;
  uint64_t (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _BYTE *v54;
  char *v55;
  int v56;
  uint64_t *v57;
  void *v58;
  char *v59;
  uint64_t v60;
  uint64_t (*v61)(_QWORD, _QWORD, _QWORD);
  void *v62;
  uint64_t v63;
  id v64;
  id v65;
  uint64_t v66;
  uint64_t (*v67)(uint64_t);
  unsigned int (*v68)(uint64_t, uint64_t, void *);
  _BYTE *v69;
  _BYTE *v70;
  _BYTE *v71;
  int v72;
  _BYTE *v73;
  uint64_t v74;
  _BYTE *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unsigned int (*v81)(_BYTE *, uint64_t, uint64_t);
  uint64_t v82;
  void (*v83)(uint64_t, void *);
  uint64_t v84;
  _BYTE *v85;
  unsigned int v86;
  uint64_t v87;
  void (*v88)(uint64_t, uint64_t, uint64_t, void *);
  void *v89;
  _BYTE *v90;
  void (*v91)(char *, uint64_t, void *);
  char *v92;
  uint64_t v93;
  _BYTE *v94;
  unsigned int v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _BYTE *v100;
  uint64_t v101;
  void *v102;
  _BYTE *v103;
  unsigned int v104;
  char *v105;
  void *v106;
  uint64_t v107;
  void *v108;
  _BYTE *v109;
  _BYTE *v110;
  _BYTE *v111;
  uint64_t v112;
  int v113;
  uint64_t v114;
  void (*v115)(char *, uint64_t, uint64_t);
  _BYTE *v116;
  void *v117;
  id v118;
  objc_class *Operation;
  id v120;
  void *v121;
  id v122;
  void *v123;
  id v124;
  _BYTE v126[4];
  int v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  int v131;
  void (*v132)(_QWORD, _QWORD, _QWORD);
  _BYTE *v133;
  _BYTE *v134;
  _BYTE *v135;
  char *v136;
  _BYTE *v137;
  _BYTE *v138;
  _BYTE *v139;
  _BYTE *v140;
  _BYTE *v141;
  _BYTE *v142;
  _BYTE *v143;
  _BYTE *v144;
  uint64_t v145;
  _BYTE *v146;
  _BYTE *v147;
  uint64_t v148;
  _BYTE *v149;
  uint64_t v150;
  unsigned int (*v151)(uint64_t, uint64_t, void *);
  uint64_t (*v152)(_QWORD, _QWORD, _QWORD);
  _BYTE *v153;
  uint64_t v154;
  uint64_t v155;
  _BYTE *v156;
  uint64_t v157;
  _BYTE *v158;
  void *v159;
  objc_super v160;
  uint64_t v161;
  char v162;

  v154 = a8;
  v159 = a7;
  v150 = a5;
  v151 = a6;
  v128 = a4;
  v155 = a3;
  v132 = a1;
  v152 = a10;
  v136 = a9;
  v12 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
  sub_1BC998AB0(0, &qword_1ED6C6968, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAEAB0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v13);
  v146 = &v126[-v14];
  v148 = sub_1BCAB4C74();
  v145 = *(_QWORD *)(v148 - 8);
  MEMORY[0x1E0C80A78](v148);
  v147 = &v126[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1BC998AB0(0, &qword_1ED6C6D60, (uint64_t (*)(uint64_t))type metadata accessor for QuantityDistributionConfigurationOverrides, v12);
  MEMORY[0x1E0C80A78](v16);
  v149 = &v126[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v18);
  v144 = &v126[-v19];
  MEMORY[0x1E0C80A78](v20);
  v139 = &v126[-v21];
  sub_1BC998AB0(0, (unint64_t *)&qword_1ED6C71E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAE5D0], v12);
  MEMORY[0x1E0C80A78](v22);
  v141 = &v126[-((v23 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v24);
  v135 = &v126[-v25];
  MEMORY[0x1E0C80A78](v26);
  v153 = &v126[-v27];
  MEMORY[0x1E0C80A78](v28);
  v156 = &v126[-v29];
  sub_1BC998AB0(0, &qword_1ED6C7280, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], v12);
  MEMORY[0x1E0C80A78](v30);
  v142 = &v126[-((v31 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v32);
  v137 = &v126[-v33];
  MEMORY[0x1E0C80A78](v34);
  v36 = &v126[-v35];
  v37 = sub_1BCAB4E54();
  v157 = *(_QWORD *)(v37 - 8);
  MEMORY[0x1E0C80A78](v37);
  v143 = &v126[-((v38 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v39);
  v138 = &v126[-v40];
  MEMORY[0x1E0C80A78](v41);
  v140 = &v126[-v42];
  MEMORY[0x1E0C80A78](v43);
  v134 = &v126[-v44];
  MEMORY[0x1E0C80A78](v45);
  v133 = &v126[-v46];
  MEMORY[0x1E0C80A78](v47);
  v158 = &v126[-v48];
  v49 = *a2;
  v50 = a2[1];
  v51 = a2[2];
  v131 = a2[3];
  v130 = *((_QWORD *)a2 + 1);
  v52 = qword_1ED6C6C10;
  sub_1BC9A7EA4();
  v53 = swift_allocError();
  *v54 = 0;
  v161 = v53;
  v162 = 1;
  sub_1BC998AB0(0, &qword_1ED6C6998, (uint64_t (*)(uint64_t))sub_1BCA62184, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0D2E5C8]);
  swift_allocObject();
  v55 = v10;
  *(_QWORD *)&v10[v52] = sub_1BCAB50A0();
  v56 = v50;
  v57 = (uint64_t *)&v55[qword_1ED6C6C08];
  *v57 = 0;
  v57[1] = 0;
  *(_QWORD *)&v55[qword_1ED6C6BF0] = 0;
  v58 = v132;
  *(_QWORD *)&v55[qword_1ED6C6C00] = v132;
  v59 = &v55[qword_1ED6D3A40];
  v127 = v49;
  *v59 = v49;
  v59[1] = v50;
  v129 = v51;
  v59[2] = v51;
  v59[3] = v131;
  *((_QWORD *)v59 + 1) = v130;
  v60 = v157;
  v61 = v152;
  *(_QWORD *)&v55[qword_1ED6D3A60] = v151;
  v62 = v159;
  *(_QWORD *)&v55[qword_1ED6C6BF8] = v159;
  v63 = *v57;
  *v57 = (uint64_t)v136;
  v57[1] = (uint64_t)v61;
  v64 = v58;
  v65 = v62;
  swift_retain();
  sub_1BC9EED1C(v63);
  v136 = v55;
  v66 = v154;
  v67 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870];
  sub_1BC9F3F74(v154, (uint64_t)&v55[qword_1ED6D3A68], &qword_1ED6C7280, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870]);
  sub_1BC9F3F74(v66, (uint64_t)v36, &qword_1ED6C7280, v67);
  v68 = *(unsigned int (**)(uint64_t, uint64_t, void *))(v60 + 48);
  v159 = (void *)v37;
  v151 = v68;
  if (v68((uint64_t)v36, 1, (void *)v37) == 1)
  {
    LOBYTE(v161) = v56;
    v69 = v158;
    AnchorDate.date.getter();
    sub_1BC9B3A38((uint64_t)v36, &qword_1ED6C7280, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870]);
  }
  else
  {
    v69 = v158;
    (*(void (**)(_BYTE *, _BYTE *, void *))(v60 + 32))(v158, v36, v159);
  }
  v70 = v139;
  sub_1BC9F3F74(v155, (uint64_t)v139, &qword_1ED6C6D60, (uint64_t (*)(uint64_t))type metadata accessor for QuantityDistributionConfigurationOverrides);
  v71 = (_BYTE *)type metadata accessor for QuantityDistributionConfigurationOverrides();
  v152 = *(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*((_QWORD *)v71 - 1) + 48);
  v72 = v152(v70, 1, v71);
  v73 = v156;
  v74 = (uint64_t)v137;
  v75 = v153;
  if (v72 == 1)
  {
    sub_1BC9B3A38((uint64_t)v70, &qword_1ED6C6D60, (uint64_t (*)(uint64_t))type metadata accessor for QuantityDistributionConfigurationOverrides);
    v76 = sub_1BCAB4BD8();
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v76 - 8) + 56))(v75, 1, 1, v76);
  }
  else
  {
    sub_1BC9F3F74((uint64_t)v70, (uint64_t)v153, (unint64_t *)&qword_1ED6C71E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAE5D0]);
    sub_1BCA62210((uint64_t)v70);
  }
  LODWORD(v139) = v56;
  v77 = v157;
  v78 = (uint64_t)v133;
  v132 = *(void (**)(_QWORD, _QWORD, _QWORD))(v157 + 16);
  v132(v133, v69, v159);
  v79 = sub_1BCAB4BD8();
  v80 = *(_QWORD *)(v79 - 8);
  v81 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v80 + 48);
  if (v81(v75, 1, v79) == 1)
  {
    DateRange.dateInterval(endingAt:)(v78, v127, (uint64_t)v73);
    v82 = v78;
    v83 = *(void (**)(uint64_t, void *))(v77 + 8);
    v83(v82, v159);
    sub_1BC9B3A38((uint64_t)v75, (unint64_t *)&qword_1ED6C71E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAE5D0]);
  }
  else
  {
    v84 = v78;
    v83 = *(void (**)(uint64_t, void *))(v77 + 8);
    v83(v84, v159);
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v80 + 32))(v73, v75, v79);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v80 + 56))(v73, 0, 1, v79);
  }
  v85 = v135;
  sub_1BC9F3F74((uint64_t)v73, (uint64_t)v135, (unint64_t *)&qword_1ED6C71E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAE5D0]);
  v86 = v81(v85, 1, v79);
  v153 = v71;
  if (v86 == 1)
  {
    sub_1BC9B3A38((uint64_t)v85, (unint64_t *)&qword_1ED6C71E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAE5D0]);
    v87 = v157;
    v88 = *(void (**)(uint64_t, uint64_t, uint64_t, void *))(v157 + 56);
    v88(v74, 1, 1, v159);
LABEL_14:
    v90 = v134;
    sub_1BCAB4E0C();
    sub_1BC9B3A38(v74, &qword_1ED6C7280, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870]);
    v91 = *(void (**)(char *, uint64_t, void *))(v87 + 32);
    goto LABEL_16;
  }
  sub_1BCAB4BC0();
  (*(void (**)(_BYTE *, uint64_t))(v80 + 8))(v85, v79);
  v87 = v157;
  v88 = *(void (**)(uint64_t, uint64_t, uint64_t, void *))(v157 + 56);
  v89 = v159;
  v88(v74, 0, 1, v159);
  if (v151(v74, 1, v89) == 1)
  {
    v73 = v156;
    goto LABEL_14;
  }
  v91 = *(void (**)(char *, uint64_t, void *))(v87 + 32);
  v90 = v134;
  v91(v134, v74, v159);
  v73 = v156;
LABEL_16:
  v92 = v136;
  v91(&v136[qword_1ED6D3A50], (uint64_t)v90, v159);
  v93 = (uint64_t)v73;
  v94 = v141;
  sub_1BC9F3F74(v93, (uint64_t)v141, (unint64_t *)&qword_1ED6C71E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAE5D0]);
  v95 = v81(v94, 1, v79);
  v96 = v147;
  if (v95 == 1)
  {
    sub_1BC9B3A38((uint64_t)v94, (unint64_t *)&qword_1ED6C71E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAE5D0]);
    v97 = 1;
    v98 = v145;
    v99 = (uint64_t)v146;
    v100 = v158;
    v101 = (uint64_t)v142;
  }
  else
  {
    v101 = (uint64_t)v142;
    sub_1BCAB4B9C();
    (*(void (**)(_BYTE *, uint64_t))(v80 + 8))(v94, v79);
    v97 = 0;
    v98 = v145;
    v99 = (uint64_t)v146;
    v100 = v158;
  }
  v102 = v159;
  v88(v101, v97, 1, v159);
  v103 = v138;
  v132(v138, v100, v102);
  v104 = v151(v101, 1, v102);
  v105 = v140;
  if (v104 == 1)
  {
    v91(v140, (uint64_t)v103, v159);
    sub_1BC9B3A38(v101, &qword_1ED6C7280, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870]);
  }
  else
  {
    v106 = v159;
    v83((uint64_t)v103, v159);
    v91(v105, v101, v106);
  }
  v107 = v155;
  v108 = v159;
  v91(&v92[qword_1ED6D3A38], (uint64_t)v105, v159);
  LOBYTE(v161) = (_BYTE)v139;
  v109 = v143;
  AnchorDate.date.getter();
  v91(&v92[qword_1ED6D3A30], (uint64_t)v109, v108);
  v110 = v144;
  sub_1BC9F3F74(v107, (uint64_t)v144, &qword_1ED6C6D60, (uint64_t (*)(uint64_t))type metadata accessor for QuantityDistributionConfigurationOverrides);
  v111 = v153;
  if (v152(v110, 1, v153) == 1)
  {
    sub_1BC9B3A38((uint64_t)v110, &qword_1ED6C6D60, (uint64_t (*)(uint64_t))type metadata accessor for QuantityDistributionConfigurationOverrides);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v98 + 56))(v99, 1, 1, v148);
    goto LABEL_25;
  }
  sub_1BC9F3F74((uint64_t)&v110[*((int *)v111 + 6)], v99, &qword_1ED6C6968, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAEAB0]);
  sub_1BCA62210((uint64_t)v110);
  v112 = v148;
  v113 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v98 + 48))(v99, 1, v148);
  v114 = (uint64_t)v149;
  if (v113 == 1)
LABEL_25:
    __asm { BR              X9 }
  v115 = *(void (**)(char *, uint64_t, uint64_t))(v98 + 32);
  v115(v96, v99, v112);
  v115(&v92[qword_1ED6D3A58], (uint64_t)v96, v112);
  sub_1BC9F3F74(v107, v114, &qword_1ED6C6D60, (uint64_t (*)(uint64_t))type metadata accessor for QuantityDistributionConfigurationOverrides);
  v116 = v153;
  if (v152(v114, 1, v153) == 1)
  {
    sub_1BC9B3A38(v114, &qword_1ED6C6D60, (uint64_t (*)(uint64_t))type metadata accessor for QuantityDistributionConfigurationOverrides);
    v117 = 0;
  }
  else
  {
    v117 = *(void **)(v114 + *((int *)v116 + 5));
    v118 = v117;
    sub_1BCA62210(v114);
  }
  *(_QWORD *)&v92[qword_1ED6D3A48] = v117;

  Operation = (objc_class *)type metadata accessor for QuantityDistributionQueryOperation();
  v160.receiver = v92;
  v160.super_class = Operation;
  v120 = objc_msgSendSuper2(&v160, sel_init);
  v121 = v120;
  if (v150)
  {
    v122 = v120;
    v123 = (void *)sub_1BCAB5EE0();
    swift_bridgeObjectRelease();
  }
  else
  {
    v124 = v120;
    v123 = 0;
  }
  objc_msgSend(v121, sel_setName_, v123);

  sub_1BC9B3A38(v154, &qword_1ED6C7280, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870]);
  sub_1BC9B3A38(v107, &qword_1ED6C6D60, (uint64_t (*)(uint64_t))type metadata accessor for QuantityDistributionConfigurationOverrides);
  sub_1BC9B3A38((uint64_t)v156, (unint64_t *)&qword_1ED6C71E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAE5D0]);
  v83((uint64_t)v158, v159);
  return v121;
}

unint64_t sub_1BCA61F2C()
{
  unint64_t result;

  result = qword_1ED6C6C28;
  if (!qword_1ED6C6C28)
  {
    type metadata accessor for QuantityDistributionQueryOperation();
    result = swift_getMetatypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1ED6C6C28);
  }
  return result;
}

uint64_t type metadata accessor for QuantityDistributionQueryOperation()
{
  uint64_t result;

  result = qword_1ED6C6C18;
  if (!qword_1ED6C6C18)
    return swift_getSingletonMetadata();
  return result;
}

void sub_1BCA61FA8()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  sub_1BC998AB0(319, &qword_1ED6C7280, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  if (v0 <= 0x3F)
  {
    sub_1BCAB4E54();
    if (v1 <= 0x3F)
    {
      sub_1BCAB4C74();
      if (v2 <= 0x3F)
        swift_initClassMetadata2();
    }
  }
}

uint64_t method lookup function for QuantityDistributionQueryOperation()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of QuantityDistributionQueryOperation.result.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))(class metadata base offset for QuantityDistributionQueryOperation
                              + (*MEMORY[0x1E0DEEDD8] & *v0)
                              + 128))();
}

uint64_t dispatch thunk of QuantityDistributionQueryOperation.__allocating_init(quantityType:configuration:configurationOverrides:name:queryQualityOfService:healthStore:baseDate:resultHandler:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(class metadata base offset for QuantityDistributionQueryOperation + v0 + 200))();
}

uint64_t sub_1BCA62124()
{
  return type metadata accessor for QuantityDistributionQueryOperation();
}

uint64_t sub_1BCA6212C()
{
  uint64_t v0;

  return swift_deallocObject();
}

void sub_1BCA62150(uint64_t a1, void *a2, unint64_t a3)
{
  sub_1BCA60BEC(a2, a3);
}

void sub_1BCA62178()
{
  uint64_t v0;

  sub_1BCA605BC(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24), *(_BYTE *)(v0 + 32));
}

void sub_1BCA62184()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED6C6F98)
  {
    sub_1BC9A61D8(255, &qword_1ED6C6E30, &qword_1ED6C6E98, 0x1E0CB7000, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
    sub_1BC9AE2A0();
    v0 = sub_1BCAB68A0();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED6C6F98);
  }
}

uint64_t sub_1BCA62210(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for QuantityDistributionConfigurationOverrides();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t static MostRecentTimePeriodQueryConfiguration.== infix(_:_:)()
{
  return 1;
}

uint64_t sub_1BCA62258()
{
  sub_1BCA623C0();
  return sub_1BCAB68D0();
}

uint64_t sub_1BCA62280()
{
  sub_1BCA623C0();
  return sub_1BCAB68DC();
}

uint64_t MostRecentTimePeriodQueryConfiguration.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;

  sub_1BCA62368();
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BCA623C0();
  sub_1BCAB68B8();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

void sub_1BCA62368()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED6C47A8)
  {
    sub_1BCA623C0();
    v0 = sub_1BCAB6780();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED6C47A8);
  }
}

unint64_t sub_1BCA623C0()
{
  unint64_t result;

  result = qword_1ED6C44B8;
  if (!qword_1ED6C44B8)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCAC7374, &type metadata for MostRecentTimePeriodQueryConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED6C44B8);
  }
  return result;
}

uint64_t MostRecentTimePeriodQueryConfiguration.init(from:)(uint64_t a1)
{
  return __swift_destroy_boxed_opaque_existential_1(a1);
}

uint64_t sub_1BCA62428(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;

  sub_1BCA62368();
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BCA623C0();
  sub_1BCAB68B8();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

ValueMetadata *type metadata accessor for MostRecentTimePeriodQueryConfiguration()
{
  return &type metadata for MostRecentTimePeriodQueryConfiguration;
}

ValueMetadata *type metadata accessor for MostRecentTimePeriodQueryConfiguration.CodingKeys()
{
  return &type metadata for MostRecentTimePeriodQueryConfiguration.CodingKeys;
}

unint64_t sub_1BCA6250C()
{
  unint64_t result;

  result = qword_1ED6C44C8;
  if (!qword_1ED6C44C8)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCAC7324, &type metadata for MostRecentTimePeriodQueryConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED6C44C8);
  }
  return result;
}

unint64_t sub_1BCA62554()
{
  unint64_t result;

  result = qword_1ED6C44C0;
  if (!qword_1ED6C44C0)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCAC734C, &type metadata for MostRecentTimePeriodQueryConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED6C44C0);
  }
  return result;
}

unint64_t sub_1BCA62598()
{
  return 0xD00000000000001ALL;
}

uint64_t sub_1BCA625B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1BCA659DC(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_1BCA625DC()
{
  sub_1BCA62720();
  return sub_1BCAB68D0();
}

uint64_t sub_1BCA62604()
{
  sub_1BCA62720();
  return sub_1BCAB68DC();
}

uint64_t TimeZoneChangePublisher.CacheData.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;

  sub_1BCA62888(0, &qword_1EF47A148, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED170]);
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v6 = (char *)&v8 - v5;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BCA62720();
  sub_1BCAB68B8();
  sub_1BCAB6744();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t sub_1BCA62720()
{
  unint64_t result;

  result = qword_1EF47A150;
  if (!qword_1EF47A150)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCAC7588, &type metadata for TimeZoneChangePublisher.CacheData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF47A150);
  }
  return result;
}

uint64_t TimeZoneChangePublisher.CacheData.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  sub_1BCA62888(0, &qword_1EF47A158, MEMORY[0x1E0DED048]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v14 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BCA62720();
  sub_1BCAB68AC();
  if (!v2)
  {
    v10 = sub_1BCAB66B4();
    v12 = v11;
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    *a2 = v10;
    a2[1] = v12;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

void sub_1BCA62888(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_1BCA62720();
    v7 = a3(a1, &type metadata for TimeZoneChangePublisher.CacheData.CodingKeys, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t sub_1BCA628E4@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return TimeZoneChangePublisher.CacheData.init(from:)(a1, a2);
}

uint64_t sub_1BCA628F8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;

  sub_1BCA62888(0, &qword_1EF47A148, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED170]);
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v6 = (char *)&v8 - v5;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BCA62720();
  sub_1BCAB68B8();
  sub_1BCAB6744();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_1BCA629EC()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[2];

  v1 = *v0;
  sub_1BCA62B78();
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v6 = (char *)v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11[1] = *(uint64_t *)((char *)v0
                      + OBJC_IVAR____TtC19HealthVisualization23TimeZoneChangePublisher_changeDetectionSubject);
  v7 = swift_allocObject();
  swift_weakInit();
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = v1;
  sub_1BC9C7954();
  sub_1BCAB5034();
  sub_1BC996948(&qword_1ED6C6DD0, (uint64_t (*)(uint64_t))sub_1BC9C7954, MEMORY[0x1E0C95FB8]);
  swift_retain();
  sub_1BCAB58B0();
  swift_release();
  swift_release();
  sub_1BC996948(&qword_1ED6C4530, (uint64_t (*)(uint64_t))sub_1BCA62B78, MEMORY[0x1E0C95708]);
  v9 = sub_1BCAB58A4();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  return v9;
}

void sub_1BCA62B78()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED6C4538)
  {
    sub_1BC9C7954();
    sub_1BCAB5034();
    sub_1BC996948(&qword_1ED6C6DD0, (uint64_t (*)(uint64_t))sub_1BC9C7954, MEMORY[0x1E0C95FB8]);
    v0 = sub_1BCAB57D8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED6C4538);
  }
}

uint64_t sub_1BCA62C0C()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1BCA62C30@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t Strong;
  uint64_t v19;
  void (*v20)(uint64_t);
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char v27;
  char *v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  int v32;
  uint64_t v33;
  NSObject *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  void (*v41)(char *, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t (*v44)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  NSObject *v48;
  os_log_type_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  void (*v59)(char *, uint64_t);
  uint64_t v60;
  char *v61;
  uint64_t v62;
  void (*v63)(char *, uint64_t);
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  unint64_t v80;

  v75 = a1;
  v3 = sub_1BCAB5514();
  v77 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v70 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v73 = (char *)&v70 - v7;
  v8 = sub_1BCAB4FB0();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v70 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v70 - v13;
  MEMORY[0x1E0C80A78](v15);
  v17 = (char *)&v70 - v16;
  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  if (!Strong)
  {
    v43 = sub_1BCAB5034();
    v44 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 56);
    v45 = a2;
    return v44(v45, 1, 1, v43);
  }
  v19 = Strong;
  v72 = a2;
  v74 = v3;
  v76 = v8;
  v20 = *(void (**)(uint64_t))(Strong
                                       + OBJC_IVAR____TtC19HealthVisualization23TimeZoneChangePublisher_currentTimeZoneGenerator);
  v21 = swift_retain();
  v20(v21);
  swift_release();
  swift_retain();
  sub_1BCAB5070();
  swift_release();
  v23 = v79;
  v22 = v80;
  v24 = v17;
  if (v23 == sub_1BCAB4F8C() && v22 == v25)
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_11;
  }
  v27 = sub_1BCAB67C8();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v27 & 1) != 0)
  {
LABEL_11:
    sub_1BCAB54B4();
    v46 = v9;
    v47 = v76;
    (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v11, v17, v76);
    swift_retain_n();
    v48 = sub_1BCAB54FC();
    v49 = sub_1BCAB61BC();
    v50 = v49;
    if (os_log_type_enabled(v48, v49))
    {
      v51 = swift_slowAlloc();
      v73 = (char *)swift_slowAlloc();
      v78 = v73;
      *(_DWORD *)v51 = 136446978;
      LODWORD(v70) = v50;
      v52 = sub_1BCAB68E8();
      v71 = v46;
      v79 = sub_1BC99BD4C(v52, v53, (uint64_t *)&v78);
      sub_1BCAB63A8();
      swift_bridgeObjectRelease();
      *(_WORD *)(v51 + 12) = 2082;
      v54 = *(_QWORD *)(v19 + 16);
      v55 = *(_QWORD *)(v19 + 24);
      swift_bridgeObjectRetain();
      v79 = sub_1BC99BD4C(v54, v55, (uint64_t *)&v78);
      sub_1BCAB63A8();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v51 + 22) = 2082;
      swift_retain();
      sub_1BCAB5070();
      swift_release();
      v79 = sub_1BC99BD4C(v79, v80, (uint64_t *)&v78);
      sub_1BCAB63A8();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v51 + 32) = 2082;
      v56 = sub_1BCAB4F8C();
      v79 = sub_1BC99BD4C(v56, v57, (uint64_t *)&v78);
      v58 = v72;
      sub_1BCAB63A8();
      swift_bridgeObjectRelease();
      v59 = *(void (**)(char *, uint64_t))(v71 + 8);
      v60 = v76;
      v59(v11, v76);
      _os_log_impl(&dword_1BC989000, v48, (os_log_type_t)v70, "[%{public}s:%{public}s] Time zone not changed (past: %{public}s, current: %{public}s), not sending changes.", (uint8_t *)v51, 0x2Au);
      v61 = v73;
      swift_arrayDestroy();
      MEMORY[0x1BCCFBF5C](v61, -1, -1);
      MEMORY[0x1BCCFBF5C](v51, -1, -1);
      swift_release();

      (*(void (**)(char *, uint64_t))(v77 + 8))(v5, v74);
      v62 = v58;
      v59(v24, v60);
    }
    else
    {

      v63 = *(void (**)(char *, uint64_t))(v46 + 8);
      v63(v11, v47);
      swift_release_n();
      (*(void (**)(char *, uint64_t))(v77 + 8))(v5, v74);
      v63(v17, v47);
      v62 = v72;
    }
    v43 = sub_1BCAB5034();
    v44 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 56);
    v45 = v62;
    return v44(v45, 1, 1, v43);
  }
  v28 = v73;
  sub_1BCAB54B4();
  v29 = v76;
  (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v14, v17, v76);
  swift_retain_n();
  v30 = sub_1BCAB54FC();
  v31 = sub_1BCAB61BC();
  v32 = v31;
  if (os_log_type_enabled(v30, v31))
  {
    v33 = swift_slowAlloc();
    v70 = swift_slowAlloc();
    v78 = (char *)v70;
    *(_DWORD *)v33 = 136446978;
    v71 = v9;
    v34 = v30;
    v35 = sub_1BCAB68E8();
    v79 = sub_1BC99BD4C(v35, v36, (uint64_t *)&v78);
    sub_1BCAB63A8();
    swift_bridgeObjectRelease();
    LODWORD(v75) = v32;
    *(_WORD *)(v33 + 12) = 2082;
    v37 = *(_QWORD *)(v19 + 16);
    v38 = *(_QWORD *)(v19 + 24);
    swift_bridgeObjectRetain();
    v79 = sub_1BC99BD4C(v37, v38, (uint64_t *)&v78);
    sub_1BCAB63A8();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v33 + 22) = 2082;
    swift_retain();
    sub_1BCAB5070();
    swift_release();
    v79 = sub_1BC99BD4C(v79, v80, (uint64_t *)&v78);
    sub_1BCAB63A8();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v33 + 32) = 2082;
    v39 = sub_1BCAB4F8C();
    v79 = sub_1BC99BD4C(v39, v40, (uint64_t *)&v78);
    v29 = v76;
    sub_1BCAB63A8();
    swift_bridgeObjectRelease();
    v41 = *(void (**)(char *, uint64_t))(v71 + 8);
    v41(v14, v29);
    _os_log_impl(&dword_1BC989000, v30, (os_log_type_t)v75, "[%{public}s:%{public}s] Time zone changed from %{public}s to %{public}s, sending changes.", (uint8_t *)v33, 0x2Au);
    v42 = v70;
    swift_arrayDestroy();
    MEMORY[0x1BCCFBF5C](v42, -1, -1);
    MEMORY[0x1BCCFBF5C](v33, -1, -1);

    (*(void (**)(char *, uint64_t))(v77 + 8))(v73, v74);
  }
  else
  {
    swift_release_n();
    v41 = *(void (**)(char *, uint64_t))(v9 + 8);
    v41(v14, v29);

    (*(void (**)(char *, uint64_t))(v77 + 8))(v28, v74);
  }
  v65 = sub_1BCAB4F8C();
  MEMORY[0x1E0C80A78](v65);
  *(&v70 - 2) = v66;
  *(&v70 - 1) = v67;
  swift_retain();
  sub_1BCAB507C();
  swift_bridgeObjectRelease();
  swift_release();
  v68 = v72;
  sub_1BCA6355C(v72);
  swift_release();
  v41(v24, v29);
  v69 = sub_1BCAB5034();
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v69 - 8) + 56))(v68, 0, 1, v69);
}

uint64_t sub_1BCA63450()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1BCA63474@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1BCA62C30(*(_QWORD *)(v1 + 24), a1);
}

uint64_t sub_1BCA6347C@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  swift_retain();
  sub_1BCAB5070();
  result = swift_release();
  *a1 = v3;
  a1[1] = v4;
  return result;
}

uint64_t sub_1BCA634C8()
{
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1BCAB507C();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_1BCA63528()
{
  swift_retain();
  sub_1BCAB5070();
  return swift_release();
}

uint64_t sub_1BCA6355C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v13[24];

  sub_1BCA64074();
  MEMORY[0x1E0C80A78](v3);
  v5 = &v13[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v6);
  v8 = &v13[-v7];
  v9 = v1 + OBJC_IVAR____TtC19HealthVisualization23TimeZoneChangePublisher____lazy_storage___changeSetToUse;
  swift_beginAccess();
  sub_1BC9EF17C(v9, (uint64_t)v8);
  v10 = sub_1BCAB5034();
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v11 + 48))(v8, 1, v10) != 1)
    return (*(uint64_t (**)(uint64_t, _BYTE *, uint64_t))(v11 + 32))(a1, v8, v10);
  sub_1BC9EED2C((uint64_t)v8);
  sub_1BCA636C0();
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v11 + 16))(v5, a1, v10);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v5, 0, 1, v10);
  swift_beginAccess();
  sub_1BC9EF1D8((uint64_t)v5, v9);
  return swift_endAccess();
}

uint64_t sub_1BCA636C0()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  void (*v23)(_QWORD *, _QWORD);
  _QWORD *v24;
  uint64_t result;
  id v26;
  unint64_t v27;
  _QWORD v28[4];
  uint64_t v29;
  uint64_t v30;
  unsigned __int8 v31;
  uint64_t v32;

  v0 = swift_bridgeObjectRetain();
  v1 = sub_1BCA65884(v0);
  swift_bridgeObjectRelease();
  v27 = v1 & 0xC000000000000001;
  if ((v1 & 0xC000000000000001) != 0)
  {
    v2 = sub_1BCAB6444();
    if (v2)
      goto LABEL_3;
LABEL_6:
    swift_bridgeObjectRelease();
    if (*(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16))
    {
LABEL_22:
      sub_1BC9A5EEC();
      v6 = sub_1BCAB660C();
      goto LABEL_23;
    }
LABEL_7:
    v6 = MEMORY[0x1E0DEE9E0];
LABEL_23:
    v28[0] = v6;
    v24 = (_QWORD *)swift_bridgeObjectRetain();
    sub_1BCA6447C(v24, 1, v28);
    swift_bridgeObjectRelease();
    return sub_1BCAB5010();
  }
  v2 = *(_QWORD *)(v1 + 16);
  if (!v2)
    goto LABEL_6;
LABEL_3:
  v32 = MEMORY[0x1E0DEE9D8];
  sub_1BC9BAD84(0, v2 & ~(v2 >> 63), 0);
  if (v27)
  {
    v3 = sub_1BCAB6408();
    v5 = 1;
  }
  else
  {
    v3 = sub_1BCA657FC(v1);
    v5 = v7 & 1;
  }
  v29 = v3;
  v30 = v4;
  v31 = v5;
  if ((v2 & 0x8000000000000000) == 0)
  {
    v26 = (id)objc_opt_self();
    do
    {
      while (1)
      {
        v14 = v29;
        v13 = v30;
        v15 = v31;
        sub_1BCA65594(v29, v30, v31, v1);
        v17 = v16;
        v18 = objc_msgSend(v26, sel_sampleTypeChangeWithSampleType_dateInterval_hasUnfrozenSeries_, v16, 0, 0);
        v19 = v32;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1BC9BAD84(0, *(_QWORD *)(v19 + 16) + 1, 1);
          v19 = v32;
        }
        v21 = *(_QWORD *)(v19 + 16);
        v20 = *(_QWORD *)(v19 + 24);
        if (v21 >= v20 >> 1)
        {
          sub_1BC9BAD84(v20 > 1, v21 + 1, 1);
          v19 = v32;
        }
        *(_QWORD *)(v19 + 16) = v21 + 1;
        v22 = v19 + 16 * v21;
        *(_QWORD *)(v22 + 32) = v17;
        *(_QWORD *)(v22 + 40) = v18;
        if (v27)
          break;
        v8 = sub_1BCA58798(v14, v13, v15, v1);
        v10 = v9;
        v12 = v11;
        sub_1BC9EF2FC(v14, v13, v15);
        v29 = v8;
        v30 = v10;
        v31 = v12 & 1;
        if (!--v2)
          goto LABEL_21;
      }
      if ((v15 & 1) == 0)
        goto LABEL_25;
      if (sub_1BCAB6420())
        swift_isUniquelyReferenced_nonNull_native();
      sub_1BCA65A60(0, (unint64_t *)&qword_1EF478D10, (uint64_t (*)(uint64_t, uint64_t, unint64_t))MEMORY[0x1E0DEB2B0]);
      v23 = (void (*)(_QWORD *, _QWORD))sub_1BCAB60E4();
      sub_1BCAB6480();
      v23(v28, 0);
      --v2;
    }
    while (v2);
LABEL_21:
    sub_1BC9EF2FC(v29, v30, v31);
    swift_bridgeObjectRelease();
    if (*(_QWORD *)(v32 + 16))
      goto LABEL_22;
    goto LABEL_7;
  }
  __break(1u);
LABEL_25:
  __break(1u);
  result = swift_unexpectedError();
  __break(1u);
  return result;
}

uint64_t TimeZoneChangePublisher.__allocating_init(cacheData:sampleTypesToNotifyOnChange:context:currentTimeZoneGenerator:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void), void (*a6)(void))
{
  uint64_t v12;

  v12 = swift_allocObject();
  TimeZoneChangePublisher.init(cacheData:sampleTypesToNotifyOnChange:context:currentTimeZoneGenerator:)(a1, a2, a3, a4, a5, a6);
  return v12;
}

uint64_t *TimeZoneChangePublisher.init(cacheData:sampleTypesToNotifyOnChange:context:currentTimeZoneGenerator:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void), void (*a6)(void))
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(void);
  void (*v23)(void);
  void (*v24)(void);
  uint64_t v25;
  uint64_t v26;
  void (**v27)(void);
  void *v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  void (*v37)(void);
  void (*v38)(void);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v7 = v6;
  v37 = a5;
  v38 = a6;
  v39 = a3;
  v40 = a4;
  v41 = *v7;
  v10 = sub_1BCAB6294();
  v42 = *(_QWORD *)(v10 - 8);
  v43 = v10;
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_1BCAB4FB0();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v36 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = *a1;
  v17 = a1[1];
  v19 = (char *)v7 + OBJC_IVAR____TtC19HealthVisualization23TimeZoneChangePublisher____lazy_storage___changeSetToUse;
  v20 = sub_1BCAB5034();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v19, 1, 1, v20);
  v21 = OBJC_IVAR____TtC19HealthVisualization23TimeZoneChangePublisher_changeDetectionSubject;
  sub_1BC9C7954();
  swift_allocObject();
  *(uint64_t *)((char *)v7 + v21) = sub_1BCAB5850();
  *(uint64_t *)((char *)v7 + OBJC_IVAR____TtC19HealthVisualization23TimeZoneChangePublisher_notificationCancellationToken) = 0;
  v7[5] = a2;
  if (v17)
  {
    v23 = v37;
    v22 = v38;
  }
  else
  {
    v24 = v37;
    v22 = v38;
    v37();
    v18 = sub_1BCAB4F8C();
    v17 = v25;
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
    v23 = v24;
  }
  v44 = v18;
  v45 = v17;
  sub_1BCA63D44();
  swift_allocObject();
  v26 = sub_1BCAB50A0();
  v7[2] = v39;
  v7[3] = v40;
  v7[4] = v26;
  v27 = (void (**)(void))((char *)v7
                        + OBJC_IVAR____TtC19HealthVisualization23TimeZoneChangePublisher_currentTimeZoneGenerator);
  *v27 = v23;
  v27[1] = v22;
  v28 = (void *)objc_opt_self();
  swift_retain();
  v29 = objc_msgSend(v28, sel_defaultCenter);
  sub_1BCAB62A0();

  v30 = swift_allocObject();
  swift_weakInit();
  v31 = swift_allocObject();
  v32 = v41;
  *(_QWORD *)(v31 + 16) = v30;
  *(_QWORD *)(v31 + 24) = v32;
  sub_1BC996948(&qword_1ED6C4650, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1F30], MEMORY[0x1E0CB1F20]);
  v33 = v43;
  v34 = sub_1BCAB58E0();
  swift_release();
  swift_release();
  (*(void (**)(char *, uint64_t))(v42 + 8))(v12, v33);
  *(uint64_t *)((char *)v7 + OBJC_IVAR____TtC19HealthVisualization23TimeZoneChangePublisher_notificationCancellationToken) = v34;
  swift_release();
  return v7;
}

void sub_1BCA63D44()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED6C3658)
  {
    v0 = sub_1BCAB5088();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED6C3658);
  }
}

uint64_t sub_1BCA63D98()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t result;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v0 = sub_1BCAB5514();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v3 = (char *)&v15 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v5 = result;
    sub_1BCAB54B4();
    swift_retain_n();
    v6 = sub_1BCAB54FC();
    v7 = sub_1BCAB61BC();
    if (os_log_type_enabled(v6, v7))
    {
      v8 = swift_slowAlloc();
      v17 = v0;
      v9 = v8;
      v16 = swift_slowAlloc();
      v19 = v16;
      *(_DWORD *)v9 = 136446466;
      v10 = sub_1BCAB68E8();
      v18 = sub_1BC99BD4C(v10, v11, &v19);
      sub_1BCAB63A8();
      swift_bridgeObjectRelease();
      *(_WORD *)(v9 + 12) = 2082;
      v13 = *(_QWORD *)(v5 + 16);
      v12 = *(_QWORD *)(v5 + 24);
      swift_bridgeObjectRetain();
      v18 = sub_1BC99BD4C(v13, v12, &v19);
      sub_1BCAB63A8();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1BC989000, v6, v7, "[%{public}s:%{public}s] Time zone change notification fired", (uint8_t *)v9, 0x16u);
      v14 = v16;
      swift_arrayDestroy();
      MEMORY[0x1BCCFBF5C](v14, -1, -1);
      MEMORY[0x1BCCFBF5C](v9, -1, -1);

      (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v17);
    }
    else
    {

      swift_release_n();
      (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
    }
    swift_retain();
    sub_1BCAB5838();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_1BCA63FFC()
{
  return sub_1BCA63D98();
}

uint64_t TimeZoneChangePublisher.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  sub_1BC9EED2C(v0 + OBJC_IVAR____TtC19HealthVisualization23TimeZoneChangePublisher____lazy_storage___changeSetToUse);
  swift_release();
  swift_release();
  swift_release();
  return v0;
}

void sub_1BCA64074()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED6C7128)
  {
    sub_1BCAB5034();
    v0 = sub_1BCAB6384();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED6C7128);
  }
}

uint64_t TimeZoneChangePublisher.__deallocating_deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  sub_1BC9EED2C(v0 + OBJC_IVAR____TtC19HealthVisualization23TimeZoneChangePublisher____lazy_storage___changeSetToUse);
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t sub_1BCA64144()
{
  return sub_1BCA629EC();
}

uint64_t sub_1BCA6416C()
{
  return type metadata accessor for TimeZoneChangePublisher();
}

uint64_t type metadata accessor for TimeZoneChangePublisher()
{
  uint64_t result;

  result = qword_1ED6C3DE0;
  if (!qword_1ED6C3DE0)
    return swift_getSingletonMetadata();
  return result;
}

void sub_1BCA641B0()
{
  unint64_t v0;

  sub_1BCA64074();
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t method lookup function for TimeZoneChangePublisher()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of TimeZoneChangePublisher.publisher.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t dispatch thunk of TimeZoneChangePublisher.cacheData.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
}

uint64_t dispatch thunk of TimeZoneChangePublisher.__allocating_init(cacheData:sampleTypesToNotifyOnChange:context:currentTimeZoneGenerator:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 264))();
}

_QWORD *assignWithCopy for TimeZoneChangePublisher.CacheData(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *assignWithTake for TimeZoneChangePublisher.CacheData(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for TimeZoneChangePublisher.CacheData()
{
  return &type metadata for TimeZoneChangePublisher.CacheData;
}

uint64_t storeEnumTagSinglePayload for TimeZoneChangePublisher.CacheData.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1BCA64348 + 4 * byte_1BCAC73D0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1BCA64368 + 4 * byte_1BCAC73D5[v4]))();
}

_BYTE *sub_1BCA64348(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1BCA64368(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1BCA64370(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1BCA64378(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1BCA64380(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1BCA64388(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for TimeZoneChangePublisher.CacheData.CodingKeys()
{
  return &type metadata for TimeZoneChangePublisher.CacheData.CodingKeys;
}

unint64_t sub_1BCA643A8()
{
  unint64_t result;

  result = qword_1EF47A160;
  if (!qword_1EF47A160)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCAC7560, &type metadata for TimeZoneChangePublisher.CacheData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF47A160);
  }
  return result;
}

unint64_t sub_1BCA643F0()
{
  unint64_t result;

  result = qword_1EF47A168;
  if (!qword_1EF47A168)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCAC74D0, &type metadata for TimeZoneChangePublisher.CacheData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF47A168);
  }
  return result;
}

unint64_t sub_1BCA64438()
{
  unint64_t result;

  result = qword_1EF47A170;
  if (!qword_1EF47A170)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCAC74F8, &type metadata for TimeZoneChangePublisher.CacheData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF47A170);
  }
  return result;
}

void sub_1BCA6447C(_QWORD *a1, char a2, _QWORD *a3)
{
  uint64_t v4;
  void *v7;
  void *v8;
  _QWORD *v9;
  id v10;
  id v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  _BOOL8 v15;
  uint64_t v16;
  char v17;
  unint64_t v18;
  char v19;
  void *v20;
  id v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  void **v28;
  void *v29;
  _QWORD *v30;
  id v31;
  unint64_t v32;
  char v33;
  uint64_t v34;
  _BOOL8 v35;
  uint64_t v36;
  char v37;
  char v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;

  v4 = a1[2];
  if (!v4)
  {
    swift_bridgeObjectRelease();
    return;
  }
  v7 = (void *)a1[4];
  v8 = (void *)a1[5];
  swift_bridgeObjectRetain();
  v43 = v7;
  v9 = (_QWORD *)*a3;
  v10 = v7;
  v11 = v8;
  v13 = sub_1BC9A2E50((uint64_t)v10);
  v14 = v9[2];
  v15 = (v12 & 1) == 0;
  v16 = v14 + v15;
  if (__OFADD__(v14, v15))
    goto LABEL_23;
  v17 = v12;
  if (v9[3] >= v16)
  {
    if ((a2 & 1) != 0)
    {
      if ((v12 & 1) != 0)
        goto LABEL_10;
    }
    else
    {
      sub_1BC9A5994();
      if ((v17 & 1) != 0)
        goto LABEL_10;
    }
LABEL_13:
    v22 = (_QWORD *)*a3;
    *(_QWORD *)(*a3 + 8 * (v13 >> 6) + 64) |= 1 << v13;
    v23 = 8 * v13;
    *(_QWORD *)(v22[6] + v23) = v10;
    *(_QWORD *)(v22[7] + v23) = v11;
    v24 = v22[2];
    v25 = __OFADD__(v24, 1);
    v26 = v24 + 1;
    if (v25)
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v22[2] = v26;
    v27 = v4 - 1;
    if (v4 == 1)
    {
LABEL_22:
      swift_bridgeObjectRelease_n();
      return;
    }
    v28 = (void **)(a1 + 7);
    while (1)
    {
      v29 = *v28;
      v43 = *(v28 - 1);
      v30 = (_QWORD *)*a3;
      v31 = v43;
      v11 = v29;
      v32 = sub_1BC9A2E50((uint64_t)v31);
      v34 = v30[2];
      v35 = (v33 & 1) == 0;
      v25 = __OFADD__(v34, v35);
      v36 = v34 + v35;
      if (v25)
        break;
      v37 = v33;
      if (v30[3] < v36)
      {
        sub_1BC9A4844(v36, 1);
        v32 = sub_1BC9A2E50((uint64_t)v31);
        if ((v37 & 1) != (v38 & 1))
          goto LABEL_25;
      }
      if ((v37 & 1) != 0)
        goto LABEL_10;
      v39 = (_QWORD *)*a3;
      *(_QWORD *)(*a3 + 8 * (v32 >> 6) + 64) |= 1 << v32;
      v40 = 8 * v32;
      *(_QWORD *)(v39[6] + v40) = v31;
      *(_QWORD *)(v39[7] + v40) = v11;
      v41 = v39[2];
      v25 = __OFADD__(v41, 1);
      v42 = v41 + 1;
      if (v25)
        goto LABEL_24;
      v39[2] = v42;
      v28 += 2;
      if (!--v27)
        goto LABEL_22;
    }
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  sub_1BC9A4844(v16, a2 & 1);
  v18 = sub_1BC9A2E50((uint64_t)v10);
  if ((v17 & 1) == (v19 & 1))
  {
    v13 = v18;
    if ((v17 & 1) == 0)
      goto LABEL_13;
LABEL_10:
    v20 = (void *)swift_allocError();
    swift_willThrow();
    v21 = v20;
    sub_1BC9AE2A0();
    if ((swift_dynamicCast() & 1) == 0)
    {

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      return;
    }
    goto LABEL_26;
  }
LABEL_25:
  sub_1BC9A649C(0, (unint64_t *)&qword_1ED6C71C8);
  sub_1BCAB6804();
  __break(1u);
LABEL_26:
  sub_1BCAB64C8();
  sub_1BCAB5F70();
  sub_1BC9A649C(0, (unint64_t *)&qword_1ED6C71C8);
  sub_1BCAB657C();
  sub_1BCAB5F70();
  sub_1BCAB65C4();
  __break(1u);
}

uint64_t sub_1BCA64814(_QWORD *a1, void *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  id v14;
  char v15;
  uint64_t v16;
  id v17;
  char v18;
  void *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  char isUniquelyReferenced_nonNull_native;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v3 = v2;
  v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0)
      v7 = *v2;
    else
      v7 = v6 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v8 = a2;
    v9 = sub_1BCAB6450();

    if (v9)
    {
      swift_bridgeObjectRelease();

      sub_1BC9A649C(0, (unint64_t *)&qword_1ED6C71C8);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      *a1 = v26;
      swift_unknownObjectRelease();
      return 0;
    }
    result = sub_1BCAB6444();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    v21 = sub_1BCA64AB0(v7, result + 1);
    v27 = v21;
    if (*(_QWORD *)(v21 + 24) <= *(_QWORD *)(v21 + 16))
    {
      v25 = v8;
      sub_1BCA64CB0();
      v22 = v27;
    }
    else
    {
      v22 = v21;
      v23 = v8;
    }
    sub_1BCA64F58((uint64_t)v8, v22);
    *v3 = v22;
  }
  else
  {
    swift_bridgeObjectRetain();
    v11 = sub_1BCAB6324();
    v12 = -1 << *(_BYTE *)(v6 + 32);
    v13 = v11 & ~v12;
    if (((*(_QWORD *)(v6 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) != 0)
    {
      sub_1BC9A649C(0, (unint64_t *)&qword_1ED6C71C8);
      v14 = *(id *)(*(_QWORD *)(v6 + 48) + 8 * v13);
      v15 = sub_1BCAB6330();

      if ((v15 & 1) != 0)
      {
LABEL_12:

        swift_bridgeObjectRelease();
        v19 = *(void **)(*(_QWORD *)(*v2 + 48) + 8 * v13);
        *a1 = v19;
        v20 = v19;
        return 0;
      }
      v16 = ~v12;
      while (1)
      {
        v13 = (v13 + 1) & v16;
        if (((*(_QWORD *)(v6 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
          break;
        v17 = *(id *)(*(_QWORD *)(v6 + 48) + 8 * v13);
        v18 = sub_1BCAB6330();

        if ((v18 & 1) != 0)
          goto LABEL_12;
      }
    }
    swift_bridgeObjectRelease();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v28 = *v2;
    *v2 = 0x8000000000000000;
    v8 = a2;
    sub_1BCA64FD8((uint64_t)v8, v13, isUniquelyReferenced_nonNull_native);
    *v2 = v28;
  }
  swift_bridgeObjectRelease();
  *a1 = v8;
  return 1;
}

uint64_t sub_1BCA64AB0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char v9;
  unint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (a2)
  {
    sub_1BCA65A60(0, &qword_1ED6C4688, (uint64_t (*)(uint64_t, uint64_t, unint64_t))MEMORY[0x1E0DEC268]);
    v2 = sub_1BCAB64A4();
    v14 = v2;
    sub_1BCAB6414();
    if (sub_1BCAB6468())
    {
      sub_1BC9A649C(0, (unint64_t *)&qword_1ED6C71C8);
      do
      {
        swift_dynamicCast();
        v2 = v14;
        if (*(_QWORD *)(v14 + 24) <= *(_QWORD *)(v14 + 16))
        {
          sub_1BCA64CB0();
          v2 = v14;
        }
        result = sub_1BCAB6324();
        v4 = v2 + 56;
        v5 = -1 << *(_BYTE *)(v2 + 32);
        v6 = result & ~v5;
        v7 = v6 >> 6;
        if (((-1 << v6) & ~*(_QWORD *)(v2 + 56 + 8 * (v6 >> 6))) != 0)
        {
          v8 = __clz(__rbit64((-1 << v6) & ~*(_QWORD *)(v2 + 56 + 8 * (v6 >> 6)))) | v6 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          v9 = 0;
          v10 = (unint64_t)(63 - v5) >> 6;
          do
          {
            if (++v7 == v10 && (v9 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            v11 = v7 == v10;
            if (v7 == v10)
              v7 = 0;
            v9 |= v11;
            v12 = *(_QWORD *)(v4 + 8 * v7);
          }
          while (v12 == -1);
          v8 = __clz(__rbit64(~v12)) + (v7 << 6);
        }
        *(_QWORD *)(v4 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v8;
        *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v8) = v13;
        ++*(_QWORD *)(v2 + 16);
      }
      while (sub_1BCAB6468());
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return MEMORY[0x1E0DEE9E8];
  }
  return v2;
}

uint64_t sub_1BCA64CB0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;

  v1 = v0;
  v2 = *v0;
  sub_1BCA65A60(0, &qword_1ED6C4688, (uint64_t (*)(uint64_t, uint64_t, unint64_t))MEMORY[0x1E0DEC268]);
  v3 = sub_1BCAB6498();
  v4 = v3;
  if (*(_QWORD *)(v2 + 16))
  {
    v28 = v0;
    v5 = 1 << *(_BYTE *)(v2 + 32);
    v6 = (_QWORD *)(v2 + 56);
    if (v5 < 64)
      v7 = ~(-1 << v5);
    else
      v7 = -1;
    v8 = v7 & *(_QWORD *)(v2 + 56);
    v9 = (unint64_t)(v5 + 63) >> 6;
    v10 = v3 + 56;
    result = swift_retain();
    v12 = 0;
    while (1)
    {
      if (v8)
      {
        v14 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
        v15 = v14 | (v12 << 6);
      }
      else
      {
        v16 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v9)
          goto LABEL_33;
        v17 = v6[v16];
        ++v12;
        if (!v17)
        {
          v12 = v16 + 1;
          if (v16 + 1 >= v9)
            goto LABEL_33;
          v17 = v6[v12];
          if (!v17)
          {
            v12 = v16 + 2;
            if (v16 + 2 >= v9)
              goto LABEL_33;
            v17 = v6[v12];
            if (!v17)
            {
              v18 = v16 + 3;
              if (v18 >= v9)
              {
LABEL_33:
                swift_release();
                v1 = v28;
                v27 = 1 << *(_BYTE *)(v2 + 32);
                if (v27 > 63)
                  bzero((void *)(v2 + 56), ((unint64_t)(v27 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v6 = -1 << v27;
                *(_QWORD *)(v2 + 16) = 0;
                break;
              }
              v17 = v6[v18];
              if (!v17)
              {
                while (1)
                {
                  v12 = v18 + 1;
                  if (__OFADD__(v18, 1))
                    goto LABEL_39;
                  if (v12 >= v9)
                    goto LABEL_33;
                  v17 = v6[v12];
                  ++v18;
                  if (v17)
                    goto LABEL_23;
                }
              }
              v12 = v18;
            }
          }
        }
LABEL_23:
        v8 = (v17 - 1) & v17;
        v15 = __clz(__rbit64(v17)) + (v12 << 6);
      }
      v19 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
      result = sub_1BCAB6324();
      v20 = -1 << *(_BYTE *)(v4 + 32);
      v21 = result & ~v20;
      v22 = v21 >> 6;
      if (((-1 << v21) & ~*(_QWORD *)(v10 + 8 * (v21 >> 6))) != 0)
      {
        v13 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v10 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v23 = 0;
        v24 = (unint64_t)(63 - v20) >> 6;
        do
        {
          if (++v22 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          v25 = v22 == v24;
          if (v22 == v24)
            v22 = 0;
          v23 |= v25;
          v26 = *(_QWORD *)(v10 + 8 * v22);
        }
        while (v26 == -1);
        v13 = __clz(__rbit64(~v26)) + (v22 << 6);
      }
      *(_QWORD *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v13) = v19;
      ++*(_QWORD *)(v4 + 16);
    }
  }
  result = swift_release();
  *v1 = v4;
  return result;
}

unint64_t sub_1BCA64F58(uint64_t a1, uint64_t a2)
{
  unint64_t result;

  sub_1BCAB6324();
  result = sub_1BCAB63FC();
  *(_QWORD *)(a2 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  *(_QWORD *)(*(_QWORD *)(a2 + 48) + 8 * result) = a1;
  ++*(_QWORD *)(a2 + 16);
  return result;
}

void sub_1BCA64FD8(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  char v12;
  uint64_t v13;
  id v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;

  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0)
    goto LABEL_14;
  if ((a3 & 1) != 0)
  {
    sub_1BCA64CB0();
  }
  else
  {
    if (v7 > v6)
    {
      sub_1BCA6515C();
      goto LABEL_14;
    }
    sub_1BCA65310();
  }
  v8 = *v3;
  v9 = sub_1BCAB6324();
  v10 = -1 << *(_BYTE *)(v8 + 32);
  a2 = v9 & ~v10;
  if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    sub_1BC9A649C(0, (unint64_t *)&qword_1ED6C71C8);
    v11 = *(id *)(*(_QWORD *)(v8 + 48) + 8 * a2);
    v12 = sub_1BCAB6330();

    if ((v12 & 1) != 0)
    {
LABEL_13:
      sub_1BCAB67F8();
      __break(1u);
    }
    else
    {
      v13 = ~v10;
      while (1)
      {
        a2 = (a2 + 1) & v13;
        if (((*(_QWORD *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        v14 = *(id *)(*(_QWORD *)(v8 + 48) + 8 * a2);
        v15 = sub_1BCAB6330();

        if ((v15 & 1) != 0)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v16 = *v3;
  *(_QWORD *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v16 + 48) + 8 * a2) = a1;
  v17 = *(_QWORD *)(v16 + 16);
  v18 = __OFADD__(v17, 1);
  v19 = v17 + 1;
  if (v18)
    __break(1u);
  else
    *(_QWORD *)(v16 + 16) = v19;
}

id sub_1BCA6515C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;

  v1 = v0;
  sub_1BCA65A60(0, &qword_1ED6C4688, (uint64_t (*)(uint64_t, uint64_t, unint64_t))MEMORY[0x1E0DEC268]);
  v2 = *v0;
  v3 = sub_1BCAB648C();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (id)swift_release();
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v18 >= v13)
      goto LABEL_28;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      v9 = v18 + 1;
      if (v18 + 1 >= v13)
        goto LABEL_28;
      v19 = *(_QWORD *)(v6 + 8 * v9);
      if (!v19)
      {
        v9 = v18 + 2;
        if (v18 + 2 >= v13)
          goto LABEL_28;
        v19 = *(_QWORD *)(v6 + 8 * v9);
        if (!v19)
          break;
      }
    }
LABEL_27:
    v12 = (v19 - 1) & v19;
    v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(void **)(*(_QWORD *)(v2 + 48) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    result = v17;
  }
  v20 = v18 + 3;
  if (v20 >= v13)
    goto LABEL_28;
  v19 = *(_QWORD *)(v6 + 8 * v20);
  if (v19)
  {
    v9 = v20;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v19 = *(_QWORD *)(v6 + 8 * v9);
    ++v20;
    if (v19)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_1BCA65310()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  id v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t *v27;

  v1 = v0;
  v2 = *v0;
  sub_1BCA65A60(0, &qword_1ED6C4688, (uint64_t (*)(uint64_t, uint64_t, unint64_t))MEMORY[0x1E0DEC268]);
  v3 = sub_1BCAB6498();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = swift_release();
LABEL_35:
    *v1 = v4;
    return result;
  }
  v27 = v0;
  v5 = 1 << *(_BYTE *)(v2 + 32);
  v6 = v2 + 56;
  if (v5 < 64)
    v7 = ~(-1 << v5);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(v2 + 56);
  v9 = (unint64_t)(v5 + 63) >> 6;
  v10 = v3 + 56;
  result = swift_retain();
  v12 = 0;
  while (1)
  {
    if (v8)
    {
      v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v15 = v14 | (v12 << 6);
      goto LABEL_24;
    }
    v16 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v9)
      goto LABEL_33;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v12;
    if (!v17)
    {
      v12 = v16 + 1;
      if (v16 + 1 >= v9)
        goto LABEL_33;
      v17 = *(_QWORD *)(v6 + 8 * v12);
      if (!v17)
      {
        v12 = v16 + 2;
        if (v16 + 2 >= v9)
          goto LABEL_33;
        v17 = *(_QWORD *)(v6 + 8 * v12);
        if (!v17)
          break;
      }
    }
LABEL_23:
    v8 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v12 << 6);
LABEL_24:
    v19 = *(id *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    result = sub_1BCAB6324();
    v20 = -1 << *(_BYTE *)(v4 + 32);
    v21 = result & ~v20;
    v22 = v21 >> 6;
    if (((-1 << v21) & ~*(_QWORD *)(v10 + 8 * (v21 >> 6))) != 0)
    {
      v13 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v10 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v23 = 0;
      v24 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        v25 = v22 == v24;
        if (v22 == v24)
          v22 = 0;
        v23 |= v25;
        v26 = *(_QWORD *)(v10 + 8 * v22);
      }
      while (v26 == -1);
      v13 = __clz(__rbit64(~v26)) + (v22 << 6);
    }
    *(_QWORD *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v13) = v19;
    ++*(_QWORD *)(v4 + 16);
  }
  v18 = v16 + 3;
  if (v18 >= v9)
  {
LABEL_33:
    result = swift_release_n();
    v1 = v27;
    goto LABEL_35;
  }
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v12 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    v12 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v12 >= v9)
      goto LABEL_33;
    v17 = *(_QWORD *)(v6 + 8 * v12);
    ++v18;
    if (v17)
      goto LABEL_23;
  }
LABEL_37:
  __break(1u);
  return result;
}

void sub_1BCA65594(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  void *v4;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  char v11;
  uint64_t v12;
  id v13;
  char v14;
  id v15;
  void *v16;

  v6 = a1;
  if ((a4 & 0xC000000000000001) == 0)
  {
    if ((a3 & 1) != 0)
      goto LABEL_13;
    if (a1 < 0 || 1 << *(_BYTE *)(a4 + 32) <= a1)
    {
      __break(1u);
    }
    else if (((*(_QWORD *)(a4 + (((unint64_t)a1 >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> a1) & 1) != 0)
    {
      if (*(_DWORD *)(a4 + 36) == (_DWORD)a2)
        goto LABEL_20;
      __break(1u);
LABEL_13:
      if (sub_1BCAB642C() == *(_DWORD *)(a4 + 36))
      {
        sub_1BCAB6438();
        sub_1BC9A649C(0, (unint64_t *)&qword_1ED6C71C8);
        swift_unknownObjectRetain();
        swift_dynamicCast();
        v4 = v16;
        swift_unknownObjectRelease();
        v8 = sub_1BCAB6324();
        v9 = -1 << *(_BYTE *)(a4 + 32);
        v6 = v8 & ~v9;
        if (((*(_QWORD *)(a4 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
        {
          v10 = *(id *)(*(_QWORD *)(a4 + 48) + 8 * v6);
          v11 = sub_1BCAB6330();

          if ((v11 & 1) == 0)
          {
            v12 = ~v9;
            do
            {
              v6 = (v6 + 1) & v12;
              if (((*(_QWORD *)(a4 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
                goto LABEL_24;
              v13 = *(id *)(*(_QWORD *)(a4 + 48) + 8 * v6);
              v14 = sub_1BCAB6330();

            }
            while ((v14 & 1) == 0);
          }

LABEL_20:
          v15 = *(id *)(*(_QWORD *)(a4 + 48) + 8 * v6);
          return;
        }
LABEL_24:

        __break(1u);
        goto LABEL_25;
      }
LABEL_23:
      __break(1u);
      goto LABEL_24;
    }
    __break(1u);
    goto LABEL_23;
  }
  if ((a3 & 1) == 0)
  {
LABEL_25:
    __break(1u);
    return;
  }
  if (a4 < 0)
    v7 = a4;
  else
    v7 = a4 & 0xFFFFFFFFFFFFFF8;
  MEMORY[0x1BCCFB050](a1, a2, v7);
  sub_1BC9A649C(0, (unint64_t *)&qword_1ED6C71C8);
  swift_unknownObjectRetain();
  swift_dynamicCast();
  swift_unknownObjectRelease();
}

uint64_t sub_1BCA657FC(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 56);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2)
    v7 = 2;
  v8 = v7 - 2;
  v9 = (unint64_t *)(a1 + 72);
  v2 = 64;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

uint64_t sub_1BCA65884(unint64_t a1)
{
  unint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t i;
  void *v6;
  void **v7;
  void *v8;
  id v9;
  uint64_t v10;

  v2 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    sub_1BCAB65DC();
    swift_bridgeObjectRelease();
  }
  sub_1BC9A649C(0, (unint64_t *)&qword_1ED6C71C8);
  sub_1BC9EF2A4();
  result = sub_1BCAB60D8();
  v10 = result;
  if (v2)
  {
    swift_bridgeObjectRetain();
    v4 = sub_1BCAB65DC();
    result = swift_bridgeObjectRelease();
    if (!v4)
      return v10;
  }
  else
  {
    v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v4)
      return v10;
  }
  if (v4 >= 1)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      for (i = 0; i != v4; ++i)
      {
        v6 = (void *)MEMORY[0x1BCCFB0D4](i, a1);
        sub_1BCA64814(&v9, v6);

      }
    }
    else
    {
      v7 = (void **)(a1 + 32);
      do
      {
        v8 = *v7++;
        sub_1BCA64814(&v9, v8);

        --v4;
      }
      while (v4);
    }
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_1BCA659DC(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;

  if (a1 == 0xD00000000000001ALL && a2 == 0x80000001BCAD2E00)
  {
    swift_bridgeObjectRelease();
    v2 = 0;
  }
  else
  {
    v3 = sub_1BCAB67C8();
    swift_bridgeObjectRelease();
    v2 = v3 ^ 1;
  }
  return v2 & 1;
}

void sub_1BCA65A60(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, unint64_t))
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;

  if (!*a2)
  {
    v6 = sub_1BC9A649C(255, (unint64_t *)&qword_1ED6C71C8);
    v7 = sub_1BC9EF2A4();
    v8 = a3(a1, v6, v7);
    if (!v9)
      atomic_store(v8, a2);
  }
}

uint64_t sub_1BCA65AD8(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v4 = *(_QWORD *)(v1 + 16);
  v3 = *(_QWORD *)(v1 + 24);
  swift_bridgeObjectRelease();
  *a1 = v4;
  a1[1] = v3;
  return swift_bridgeObjectRetain();
}

uint64_t HealthTypeProxy.objectTypeIdentifier.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

void *HealthTypeProxy.healthStore.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + 16);
  v2 = v1;
  return v1;
}

uint64_t HealthTypeProxy.init(for:healthStore:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  *a4 = result;
  a4[1] = a2;
  a4[2] = a3;
  return result;
}

void *sub_1BCA65B70()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + 16);
  v2 = v1;
  return v1;
}

void destroy for HealthTypeProxy(uint64_t a1)
{
  swift_bridgeObjectRelease();

}

_QWORD *_s19HealthVisualization15HealthTypeProxyVwCP_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  void *v4;
  id v5;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = (void *)a2[2];
  a1[2] = v4;
  swift_bridgeObjectRetain();
  v5 = v4;
  return a1;
}

_QWORD *assignWithCopy for HealthTypeProxy(_QWORD *a1, _QWORD *a2)
{
  void *v4;
  void *v5;
  id v6;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = (void *)a1[2];
  v5 = (void *)a2[2];
  a1[2] = v5;
  v6 = v5;

  return a1;
}

uint64_t assignWithTake for HealthTypeProxy(uint64_t a1, uint64_t a2)
{
  void *v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  v4 = *(void **)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);

  return a1;
}

ValueMetadata *type metadata accessor for HealthTypeProxy()
{
  return &type metadata for HealthTypeProxy;
}

uint64_t sub_1BCA65CAC(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v14;
  id v15;
  id v16;
  id v17;
  void *v18;
  void *v19;
  id v20;
  id v21;
  void *v22;
  id v23;
  _QWORD aBlock[6];

  *(_QWORD *)(v8 + 24) = a1;
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = a7;
  *(_QWORD *)(v14 + 24) = a8;
  v15 = objc_allocWithZone(MEMORY[0x1E0CB6F58]);
  sub_1BC9A649C(0, (unint64_t *)&qword_1ED6C71C8);
  v16 = a1;
  swift_retain();
  v17 = a3;
  v18 = (void *)sub_1BCAB600C();
  swift_bridgeObjectRelease();
  aBlock[4] = sub_1BCA6700C;
  aBlock[5] = v14;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1BCAB34F8;
  aBlock[3] = &block_descriptor_15;
  v19 = _Block_copy(aBlock);
  v20 = objc_msgSend(v15, sel_initWithTypes_anchor_resultsHandler_, v18, v17, v19);

  _Block_release(v19);
  swift_release();
  *(_QWORD *)(v8 + 16) = v20;
  v21 = v20;
  if (a5)
  {
    v22 = (void *)sub_1BCAB5EE0();
    swift_bridgeObjectRelease();
  }
  else
  {
    v22 = 0;
  }
  objc_msgSend(v20, sel_setDebugIdentifier_, v22, a4);

  v23 = *(id *)(v8 + 16);
  objc_msgSend(v23, sel_setIncludeChangeDetails_, a6 & 1);

  swift_release();
  return v8;
}

uint64_t sub_1BCA65E88()
{
  uint64_t v0;

  return swift_deallocClassInstance();
}

id sub_1BCA65EB4()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(*(_QWORD *)v0 + 24), sel_executeQuery_, *(_QWORD *)(*(_QWORD *)v0 + 16));
}

id sub_1BCA65EC8()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(*(_QWORD *)v0 + 24), sel_stopQuery_, *(_QWORD *)(*(_QWORD *)v0 + 16));
}

uint64_t sub_1BCA65EDC(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  sub_1BCA66018();
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BCA65FD4(a1, (uint64_t)v6);
  v7 = *a2 + qword_1ED6D37F8;
  swift_beginAccess();
  sub_1BCA66FA4((uint64_t)v6, v7);
  return swift_endAccess();
}

uint64_t sub_1BCA65F84@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + qword_1ED6D37F8;
  swift_beginAccess();
  return sub_1BCA65FD4(v3, a1);
}

uint64_t sub_1BCA65FD4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1BCA66018();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_1BCA66018()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED6C70C0)
  {
    sub_1BCAB5034();
    sub_1BC9A7F58(255, (unint64_t *)&qword_1ED6C6F70);
    v0 = sub_1BCAB68A0();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED6C70C0);
  }
}

id ChangeDetectorOperation.__allocating_init(types:anchor:healthStore:waitForChanges:includeChangeDetails:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5)
{
  objc_class *v5;
  id v11;

  v11 = objc_allocWithZone(v5);
  return ChangeDetectorOperation.init(types:anchor:healthStore:waitForChanges:includeChangeDetails:)(a1, a2, a3, a4, a5);
}

id ChangeDetectorOperation.init(types:anchor:healthStore:waitForChanges:includeChangeDetails:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5)
{
  _BYTE *v5;
  char *v11;
  uint64_t *v12;
  uint64_t v13;
  _BYTE *v14;
  objc_super v16;

  v11 = &v5[qword_1ED6C2D30];
  *(_OWORD *)v11 = 0u;
  *((_OWORD *)v11 + 1) = 0u;
  *((_QWORD *)v11 + 4) = 0;
  v12 = (uint64_t *)&v5[qword_1ED6D37F8];
  sub_1BCA661FC();
  v13 = swift_allocError();
  *v14 = 1;
  *v12 = v13;
  sub_1BCA66018();
  swift_storeEnumTagMultiPayload();
  *(_QWORD *)&v5[qword_1ED6C2D38] = a1;
  *(_QWORD *)&v5[qword_1ED6C2D40] = a2;
  *(_QWORD *)&v5[qword_1ED6C2D20] = a3;
  v5[qword_1ED6C2D28] = a4;
  v5[qword_1ED6C2D18] = a5;
  v16.receiver = v5;
  v16.super_class = (Class)type metadata accessor for ChangeDetectorOperation();
  return objc_msgSendSuper2(&v16, sel_init);
}

unint64_t sub_1BCA661FC()
{
  unint64_t result;

  result = qword_1ED6C2CE0;
  if (!qword_1ED6C2CE0)
  {
    result = MEMORY[0x1BCCFBE84](&protocol conformance descriptor for ChangeDetectorError, &type metadata for ChangeDetectorError);
    atomic_store(result, (unint64_t *)&qword_1ED6C2CE0);
  }
  return result;
}

uint64_t type metadata accessor for ChangeDetectorOperation()
{
  uint64_t result;

  result = qword_1ED6C2D48;
  if (!qword_1ED6C2D48)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_1BCA6627C()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(_QWORD *__return_ptr, uint64_t, uint64_t, void *, uint64_t, uint64_t, uint64_t, void (*)(void *, int, int), uint64_t);
  _QWORD *v13;
  uint64_t v14;
  id v15;
  Swift::String v16;
  uint64_t v17;
  uint64_t v18;
  Swift::String v20[2];
  _QWORD v21[3];
  uint64_t v22;
  uint64_t v23;

  v1 = v0;
  v2 = *(_QWORD *)((char *)v0 + qword_1ED6C2D20);
  v3 = *(_QWORD *)((char *)v1 + qword_1ED6C2D38);
  v4 = *(void **)((char *)v1 + qword_1ED6C2D40);
  v5 = objc_msgSend(v1, sel_name);
  if (v5)
  {
    v6 = v5;
    v7 = sub_1BCAB5F04();
    v9 = v8;

  }
  else
  {
    v7 = 0;
    v9 = 0;
  }
  v10 = *((unsigned __int8 *)v1 + qword_1ED6C2D18);
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = v1;
  v12 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t, void *, uint64_t, uint64_t, uint64_t, void (*)(void *, int, int), uint64_t))(class metadata base offset for ChangeDetectorOperation + (*MEMORY[0x1E0DEEDD8] & *v1) + 112);
  v13 = v1;
  v12(v21, v2, v3, v4, v7, v9, v10, sub_1BCA66680, v11);
  swift_release();
  swift_bridgeObjectRelease();
  sub_1BC9C2428((uint64_t)v21, (uint64_t)v20);
  v14 = (uint64_t)v13 + qword_1ED6C2D30;
  swift_beginAccess();
  sub_1BCA66688((uint64_t)v20, v14);
  swift_endAccess();
  v20[0]._countAndFlagsBits = 0;
  v20[0]._object = (void *)0xE000000000000000;
  sub_1BCAB64C8();
  swift_bridgeObjectRelease();
  v20[0]._countAndFlagsBits = 0xD00000000000001BLL;
  v20[0]._object = (void *)0x80000001BCAD2E20;
  sub_1BCA666EC(0, &qword_1ED6C6E70, (uint64_t)&unk_1ED6C6E68, 0x1E0CB6A80, (void (*)(uint64_t, uint64_t, uint64_t))sub_1BC9A649C);
  v15 = v4;
  sub_1BCAB5F28();
  sub_1BCAB5F70();
  swift_bridgeObjectRelease();
  v16._countAndFlagsBits = 0;
  v16._object = (void *)0xE000000000000000;
  NSOperation.logLifeCycleEvent(_:withPrivateInfo:)(v20[0], v16);
  swift_bridgeObjectRelease();
  v17 = v22;
  v18 = v23;
  __swift_project_boxed_opaque_existential_1(v21, v22);
  (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v17, v18);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
}

void sub_1BCA664CC(void *a1, int a2, int a3, id a4)
{
  Swift::String v6;
  Swift::String v7;
  id v8;
  Swift::String v9;
  Swift::String v10;
  uint64_t v11;

  if ((objc_msgSend(a4, sel_isCancelled) & 1) != 0)
  {
    v6._countAndFlagsBits = 0xD00000000000002DLL;
    v6._object = (void *)0x80000001BCACE790;
    v7._countAndFlagsBits = 0;
    v7._object = (void *)0xE000000000000000;
    NSOperation.logLifeCycleEvent(_:withPrivateInfo:)(v6, v7);
  }
  else if ((objc_msgSend(a4, sel_isFinished) & 1) == 0)
  {
    sub_1BCAB64C8();
    swift_bridgeObjectRelease();
    sub_1BCA666EC(0, &qword_1ED6C6E70, (uint64_t)&unk_1ED6C6E68, 0x1E0CB6A80, (void (*)(uint64_t, uint64_t, uint64_t))sub_1BC9A649C);
    v8 = a1;
    sub_1BCAB5F28();
    sub_1BCAB5F70();
    swift_bridgeObjectRelease();
    sub_1BCAB5F70();
    v9._countAndFlagsBits = 0xD000000000000026;
    v9._object = (void *)0x80000001BCAD2FB0;
    v10._countAndFlagsBits = 0;
    v10._object = (void *)0xE000000000000000;
    NSOperation.logLifeCycleEvent(_:withPrivateInfo:)(v9, v10);
    v11 = swift_bridgeObjectRelease();
    MEMORY[0x1E0C80A78](v11);
    sub_1BCAB50AC();
  }
}

uint64_t sub_1BCA6665C()
{
  uint64_t v0;

  return swift_deallocObject();
}

void sub_1BCA66680(void *a1, int a2, int a3)
{
  uint64_t v3;

  sub_1BCA664CC(a1, a2, a3, *(id *)(v3 + 16));
}

uint64_t sub_1BCA66688(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1BCA666EC(0, &qword_1ED6C2E18, (uint64_t)&unk_1ED6C2E10, (uint64_t)&protocol descriptor for DatabaseChangesProducing, (void (*)(uint64_t, uint64_t, uint64_t))sub_1BC9A7F58);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

void sub_1BCA666EC(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t, uint64_t))
{
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    a5(255, a3, a4);
    v6 = sub_1BCAB6384();
    if (!v7)
      atomic_store(v6, a2);
  }
}

void sub_1BCA66740(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  void *v11;
  id v12;
  uint64_t v13;
  Swift::String v14;
  Swift::String v15;
  _BYTE *v16;
  uint64_t v17;
  id v18;
  id v19;
  Swift::String v20;
  Swift::String v21;
  uint64_t v22;
  Swift::String v23;
  Swift::String v24;
  uint64_t v25;

  sub_1BCA66018();
  MEMORY[0x1E0C80A78](v8);
  v10 = (uint64_t *)((char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (a2)
  {
    if ((*(_BYTE *)(a1 + qword_1ED6C2D28) & 1) != 0)
    {
      if ((a2 & 0xC000000000000001) != 0)
      {
        swift_bridgeObjectRetain();
        if (!sub_1BCAB6444())
          goto LABEL_13;
      }
      else
      {
        v22 = *(_QWORD *)(a2 + 16);
        swift_bridgeObjectRetain();
        if (!v22)
        {
LABEL_13:
          swift_bridgeObjectRelease();
          v23._object = (void *)0x80000001BCAD2FE0;
          v23._countAndFlagsBits = 0xD000000000000019;
          v24._countAndFlagsBits = 0;
          v24._object = (void *)0xE000000000000000;
          NSOperation.logLifeCycleEvent(_:withPrivateInfo:)(v23, v24);
          return;
        }
      }
    }
    else
    {
      swift_bridgeObjectRetain();
    }
    v12 = a4;
    sub_1BCAB5010();
    swift_storeEnumTagMultiPayload();
    v13 = a1 + qword_1ED6D37F8;
    swift_beginAccess();
    sub_1BCA66FA4((uint64_t)v10, v13);
    swift_endAccess();
    v14._countAndFlagsBits = 0x64656873696E6966;
    v14._object = (void *)0xE800000000000000;
    v15._countAndFlagsBits = 0;
    v15._object = (void *)0xE000000000000000;
    NSOperation.logLifeCycleEvent(_:withPrivateInfo:)(v14, v15);
    sub_1BCA669D4();
    sub_1BCAB50B8();
    return;
  }
  if (a3)
  {
    v11 = a3;
  }
  else
  {
    sub_1BCA661FC();
    v11 = (void *)swift_allocError();
    *v16 = 1;
  }
  *v10 = v11;
  swift_storeEnumTagMultiPayload();
  v17 = a1 + qword_1ED6D37F8;
  swift_beginAccess();
  v18 = a3;
  v19 = v11;
  sub_1BCA66FA4((uint64_t)v10, v17);
  swift_endAccess();
  swift_getErrorValue();
  v20._countAndFlagsBits = sub_1BCAB6810();
  v21._countAndFlagsBits = 0;
  v21._object = (void *)0xE000000000000000;
  NSOperation.logErrorString(_:withInfo:)(v20, v21);
  swift_bridgeObjectRelease();
  sub_1BCA669D4();
  sub_1BCAB50B8();

}

void sub_1BCA669A0(void *a1)
{
  id v1;

  v1 = a1;
  sub_1BCA6627C();

}

uint64_t sub_1BCA669D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;

  v1 = v0 + qword_1ED6C2D30;
  swift_beginAccess();
  sub_1BCA66AA8(v1, (uint64_t)&v5);
  if (v6)
  {
    sub_1BC9C42A4(&v5, (uint64_t)&v7);
    v2 = *((_QWORD *)&v8 + 1);
    v3 = v9;
    __swift_project_boxed_opaque_existential_1(&v7, *((uint64_t *)&v8 + 1));
    (*(void (**)(uint64_t, uint64_t))(v3 + 16))(v2, v3);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v7);
  }
  else
  {
    sub_1BCA66B0C((uint64_t)&v5);
  }
  v9 = 0;
  v7 = 0u;
  v8 = 0u;
  swift_beginAccess();
  sub_1BCA66688((uint64_t)&v7, v1);
  return swift_endAccess();
}

uint64_t sub_1BCA66AA8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1BCA666EC(0, &qword_1ED6C2E18, (uint64_t)&unk_1ED6C2E10, (uint64_t)&protocol descriptor for DatabaseChangesProducing, (void (*)(uint64_t, uint64_t, uint64_t))sub_1BC9A7F58);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1BCA66B0C(uint64_t a1)
{
  uint64_t v2;

  sub_1BCA666EC(0, &qword_1ED6C2E18, (uint64_t)&unk_1ED6C2E10, (uint64_t)&protocol descriptor for DatabaseChangesProducing, (void (*)(uint64_t, uint64_t, uint64_t))sub_1BC9A7F58);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1BCA66B68@<X0>(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>)
{
  uint64_t v17;
  id v18;
  id v19;
  uint64_t result;

  v17 = type metadata accessor for DatabaseChangesProducer();
  swift_allocObject();
  swift_bridgeObjectRetain();
  swift_retain();
  v18 = a1;
  swift_bridgeObjectRetain();
  v19 = a3;
  result = sub_1BCA65CAC(v18, a2, a3, a4, a5, a6, a7, a8);
  a9[3] = v17;
  a9[4] = (uint64_t)&off_1E754DB60;
  *a9 = result;
  return result;
}

uint64_t type metadata accessor for DatabaseChangesProducer()
{
  return objc_opt_self();
}

id ChangeDetectorOperation.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void ChangeDetectorOperation.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void sub_1BCA66CAC()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t sub_1BCA66CD8()
{
  uint64_t v0;

  swift_bridgeObjectRelease();

  sub_1BCA66B0C(v0 + qword_1ED6C2D30);
  return sub_1BCA66F68(v0 + qword_1ED6D37F8);
}

id ChangeDetectorOperation.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ChangeDetectorOperation();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_1BCA66D68(uint64_t a1)
{
  swift_bridgeObjectRelease();

  sub_1BCA66B0C(a1 + qword_1ED6C2D30);
  return sub_1BCA66F68(a1 + qword_1ED6D37F8);
}

uint64_t sub_1BCA66DD0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;

  v3 = *a1 + qword_1ED6D37F8;
  swift_beginAccess();
  return sub_1BCA65FD4(v3, a2);
}

uint64_t dispatch thunk of AnchoredChangeSetProviding.result.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of DatabaseChangesProducing.start()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of DatabaseChangesProducing.stop()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

void sub_1BCA66E40()
{
  unint64_t v0;

  sub_1BCA66018();
  if (v0 <= 0x3F)
    swift_initClassMetadata2();
}

uint64_t method lookup function for ChangeDetectorOperation()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ChangeDetectorOperation.result.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))(class metadata base offset for ChangeDetectorOperation
                              + (*MEMORY[0x1E0DEEDD8] & *v0)
                              + 80))();
}

uint64_t dispatch thunk of ChangeDetectorOperation.__allocating_init(types:anchor:healthStore:waitForChanges:includeChangeDetails:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(class metadata base offset for ChangeDetectorOperation + v0 + 104))();
}

uint64_t dispatch thunk of ChangeDetectorOperation.makeQuery(healthStore:types:anchor:name:includeChangeDetails:resultsHandler:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))(class metadata base offset for ChangeDetectorOperation
                              + (*MEMORY[0x1E0DEEDD8] & *v0)
                              + 112))();
}

uint64_t sub_1BCA66F60()
{
  return type metadata accessor for ChangeDetectorOperation();
}

uint64_t sub_1BCA66F68(uint64_t a1)
{
  uint64_t v2;

  sub_1BCA66018();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1BCA66FA4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1BCA66018();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1BCA66FE8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1BCA6700C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(a2, a3, a4);
}

void sub_1BCA67038()
{
  uint64_t v0;

  sub_1BCA66740(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(void **)(v0 + 32), *(void **)(v0 + 40));
}

uint64_t static SignificantChangeEngine.Parameters.makeParameters(dateRange:trendAnalysisKinds:parameterOverrides:absoluteChangeThreshold:)@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X8>)
{
  char v6;
  uint64_t v8;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t *v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  char v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  double v46;
  uint64_t result;
  uint64_t v48;
  double v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  _BYTE v55[136];
  _QWORD v56[17];
  uint64_t v57[18];

  v6 = a1;
  v8 = *(_QWORD *)(a2 + 16);
  if (!v8)
  {
    sub_1BCA675E0((uint64_t)v57);
    v15 = v57;
LABEL_49:
    sub_1BCA8F4D8((uint64_t)v15, (uint64_t)v56, &qword_1ED6C4890, (uint64_t)&type metadata for SignificantChangeEngine.Parameters.MeanShift);
    sub_1BCA8F4D8((uint64_t)v56, (uint64_t)v57, &qword_1ED6C4890, (uint64_t)&type metadata for SignificantChangeEngine.Parameters.MeanShift);
    v36 = 0;
    v37 = 0;
    v38 = 0;
    v39 = 0;
    v40 = 0;
    v41 = 0;
    v42 = 0;
    v43 = 1;
    goto LABEL_58;
  }
  v48 = *(_QWORD *)(a3 + 8);
  v49 = *(double *)a3;
  v51 = *(_QWORD *)(a3 + 24);
  v52 = *(_QWORD *)(a3 + 16);
  v53 = *(unsigned __int8 *)(a3 + 32);
  swift_bridgeObjectRetain();
  if (*(_BYTE *)(a2 + 32) == 1)
  {
    v12 = 0;
    while (1)
    {
      v13 = sub_1BCAB67C8();
      swift_bridgeObjectRelease();
      if ((v13 & 1) != 0)
        break;
      if (v8 - 1 == v12)
      {
        swift_bridgeObjectRelease();
        sub_1BCA675E0((uint64_t)v57);
        sub_1BCA8F4D8((uint64_t)v57, (uint64_t)v55, &qword_1ED6C4890, (uint64_t)&type metadata for SignificantChangeEngine.Parameters.MeanShift);
        v6 = a1;
        goto LABEL_43;
      }
      v14 = *(_BYTE *)(a2 + v12++ + 33);
      if ((v14 & 1) == 0)
        goto LABEL_7;
    }
  }
  else
  {
LABEL_7:
    swift_bridgeObjectRelease();
  }
  v16 = a5 & 1;
  swift_bridgeObjectRelease();
  v6 = a1;
  if (a1 == 4)
  {
    if ((v53 & 1) != 0)
      v21 = 0;
    else
      v21 = v51;
    if ((v53 & 1) != 0)
      v22 = 0;
    else
      v22 = v52;
    if ((v53 & 1) != 0)
      v23 = 0.0;
    else
      v23 = v49;
    if ((v53 & 1) != 0)
      v24 = 1;
    else
      v24 = v48 & 1;
    static SignificantChangeEngine.Parameters.MeanShift.oneMonth(absoluteChangeThreshold:minimumEffectSize:minimumSegmentLength:minimumDataCount:)(a4, v16, v23, v24, v22, v53, v21, v53, (uint64_t)v57);
    goto LABEL_37;
  }
  if (a1 == 5)
  {
    if ((v53 & 1) != 0)
      v17 = 0;
    else
      v17 = v51;
    if ((v53 & 1) != 0)
      v18 = 0;
    else
      v18 = v52;
    if ((v53 & 1) != 0)
      v19 = 0.0;
    else
      v19 = v49;
    if ((v53 & 1) != 0)
      v20 = 1;
    else
      v20 = v48 & 1;
    static SignificantChangeEngine.Parameters.MeanShift.sixMonths(absoluteChangeThreshold:minimumEffectSize:minimumSegmentLength:minimumDataCount:)(a4, v16, v19, v20, v18, v53, v17, v53, (uint64_t)v57);
LABEL_37:
    nullsub_1(v57);
    goto LABEL_42;
  }
  if (qword_1ED6C4CD8 != -1)
LABEL_61:
    swift_once();
  v25 = sub_1BCAB5514();
  __swift_project_value_buffer(v25, (uint64_t)qword_1ED6C4CC0);
  v26 = sub_1BCAB54FC();
  v27 = sub_1BCAB61A4();
  if (os_log_type_enabled(v26, v27))
  {
    v28 = swift_slowAlloc();
    v50 = swift_slowAlloc();
    v57[0] = v50;
    *(_DWORD *)v28 = 136446466;
    v56[0] = &type metadata for SignificantChangeEngine.Parameters;
    sub_1BCA7EF78();
    v29 = sub_1BCAB5F28();
    v56[0] = sub_1BC99BD4C(v29, v30, v57);
    sub_1BCAB63A8();
    swift_bridgeObjectRelease();
    *(_WORD *)(v28 + 12) = 2082;
    LOBYTE(v56[0]) = a1;
    v31 = sub_1BCAB5F28();
    v56[0] = sub_1BC99BD4C(v31, v32, v57);
    sub_1BCAB63A8();
    v6 = a1;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1BC989000, v26, v27, "[%{public}s]: Unsupported date range submitted: %{public}s", (uint8_t *)v28, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1BCCFBF5C](v50, -1, -1);
    MEMORY[0x1BCCFBF5C](v28, -1, -1);
  }

  sub_1BCA675E0((uint64_t)v57);
LABEL_42:
  sub_1BCA8F4D8((uint64_t)v57, (uint64_t)v55, &qword_1ED6C4890, (uint64_t)&type metadata for SignificantChangeEngine.Parameters.MeanShift);
LABEL_43:
  swift_bridgeObjectRetain();
  v33 = 0;
  while (1)
  {
    v34 = v33 + 1;
    if (__OFADD__(v33, 1))
    {
      __break(1u);
      goto LABEL_61;
    }
    if (*(_BYTE *)(a2 + v33 + 32) == 1)
      break;
    v35 = sub_1BCAB67C8();
    swift_bridgeObjectRelease();
    if ((v35 & 1) != 0)
      goto LABEL_51;
    ++v33;
    if (v34 == v8)
    {
      swift_bridgeObjectRelease();
      v15 = (uint64_t *)v55;
      goto LABEL_49;
    }
  }
  swift_bridgeObjectRelease();
LABEL_51:
  swift_bridgeObjectRelease();
  if (v53)
    v44 = 0;
  else
    v44 = v51;
  if (v53)
    v45 = 0;
  else
    v45 = v52;
  sub_1BCA688FC(v45, v53, v44, v53, (uint64_t)v57);
  v36 = v57[0];
  v37 = v57[1];
  v38 = v57[2];
  v39 = v57[3];
  v40 = v57[4];
  v41 = v57[5];
  v42 = v57[6];
  sub_1BCA8F4D8((uint64_t)v55, (uint64_t)v57, &qword_1ED6C4890, (uint64_t)&type metadata for SignificantChangeEngine.Parameters.MeanShift);
  v43 = 0;
LABEL_58:
  v46 = sub_1BCA7ED74(v6);
  *(_QWORD *)a6 = 10;
  *(double *)(a6 + 8) = v46;
  result = sub_1BCA8F4D8((uint64_t)v57, a6 + 16, &qword_1ED6C4890, (uint64_t)&type metadata for SignificantChangeEngine.Parameters.MeanShift);
  *(_QWORD *)(a6 + 152) = v36;
  *(_QWORD *)(a6 + 160) = v37;
  *(_QWORD *)(a6 + 168) = v38;
  *(_QWORD *)(a6 + 176) = v39;
  *(_QWORD *)(a6 + 184) = v40;
  *(_QWORD *)(a6 + 192) = v41;
  *(_QWORD *)(a6 + 200) = v42;
  *(_BYTE *)(a6 + 208) = v43;
  return result;
}

double sub_1BCA675E0(uint64_t a1)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 1024;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_QWORD *)(a1 + 128) = 0;
  return result;
}

void sub_1BCA67604(uint64_t (*a1)(char *), uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD), void (*a5)(BOOL, uint64_t, uint64_t))
{
  uint64_t v5;
  uint64_t (*v6)(_QWORD);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char v17;
  unint64_t v18;
  unint64_t v19;
  void (*v20)(BOOL, uint64_t, uint64_t);
  uint64_t (*v21)(_QWORD);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(char *);
  uint64_t v27;
  uint64_t v28;

  v20 = a5;
  v6 = a4;
  v26 = a1;
  v27 = a2;
  v8 = a4(0);
  v25 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v24 = (uint64_t)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v20 - v11;
  v28 = MEMORY[0x1E0DEE9D8];
  v23 = *(_QWORD *)(a3 + 16);
  if (v23)
  {
    v13 = 0;
    v14 = MEMORY[0x1E0DEE9D8];
    v21 = v6;
    v22 = a3;
    while (v13 < *(_QWORD *)(a3 + 16))
    {
      v15 = (*(unsigned __int8 *)(v25 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80);
      v16 = *(_QWORD *)(v25 + 72);
      sub_1BC9964B8(a3 + v15 + v16 * v13, (uint64_t)v12, v6);
      v17 = v26(v12);
      if (v5)
      {
        sub_1BC997208((uint64_t)v12, v6);
        swift_release();
        swift_bridgeObjectRelease();
        return;
      }
      if ((v17 & 1) != 0)
      {
        sub_1BC9AE330((uint64_t)v12, v24, v6);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v20(0, *(_QWORD *)(v14 + 16) + 1, 1);
        v14 = v28;
        v19 = *(_QWORD *)(v28 + 16);
        v18 = *(_QWORD *)(v28 + 24);
        if (v19 >= v18 >> 1)
        {
          v20(v18 > 1, v19 + 1, 1);
          v14 = v28;
        }
        *(_QWORD *)(v14 + 16) = v19 + 1;
        v6 = v21;
        sub_1BC9AE330(v24, v14 + v15 + v19 * v16, v21);
        a3 = v22;
      }
      else
      {
        sub_1BC997208((uint64_t)v12, v6);
      }
      if (v23 == ++v13)
        goto LABEL_14;
    }
    __break(1u);
  }
  else
  {
LABEL_14:
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_1BCA67814()
{
  uint64_t v0;

  v0 = sub_1BCAB5514();
  __swift_allocate_value_buffer(v0, qword_1ED6C4CC0);
  __swift_project_value_buffer(v0, (uint64_t)qword_1ED6C4CC0);
  sub_1BCAB54C0();
  return sub_1BCAB5508();
}

uint64_t static Logger.trendGeneration.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_1ED6C4CD8 != -1)
    swift_once();
  v2 = sub_1BCAB5514();
  v3 = __swift_project_value_buffer(v2, (uint64_t)qword_1ED6C4CC0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t SignificantChangeEngine.Output.frequencyChange.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1BCA6ABE8(type metadata accessor for SignificantChangeEngine.Output, sub_1BCA7EFB0, a1);
}

uint64_t SignificantChangeEngine.Output.state.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1BCA6AC40(type metadata accessor for SignificantChangeEngine.Output, sub_1BCA7EFEC, a1);
}

uint64_t SignificantChangeEngine.Output.init(meanShiftChange:frequencyChange:state:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_1BCA6AD60(a1, a2, a3, type metadata accessor for SignificantChangeEngine.Output, (uint64_t (*)(_QWORD))sub_1BCA7EFBC, (uint64_t (*)(_QWORD))sub_1BCA7EFF8, a4);
}

uint64_t sub_1BCA67934()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x636E657571657266;
  if (*v0 != 1)
    v1 = 0x6574617473;
  if (*v0)
    return v1;
  else
    return 0x666968536E61656DLL;
}

uint64_t sub_1BCA67998@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1BCA8E004(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1BCA679BC()
{
  sub_1BCA7F028();
  return sub_1BCAB68D0();
}

uint64_t sub_1BCA679E4()
{
  sub_1BCA7F028();
  return sub_1BCAB68DC();
}

uint64_t SignificantChangeEngine.Output.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;
  char v10;
  char v11;
  char v12;

  sub_1BC9ACE04(0, &qword_1ED6C4768, (uint64_t (*)(void))sub_1BCA7F028, (uint64_t)&type metadata for SignificantChangeEngine.Output.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v7 = (char *)&v9 - v6;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BCA7F028();
  sub_1BCAB68B8();
  v12 = 0;
  type metadata accessor for SignificantChange(0);
  sub_1BC996948(&qword_1ED6C3888, type metadata accessor for SignificantChange, (uint64_t)&protocol conformance descriptor for SignificantChange);
  sub_1BCAB6738();
  if (!v1)
  {
    type metadata accessor for SignificantChangeEngine.Output(0);
    v11 = 1;
    sub_1BCAB6738();
    v10 = 2;
    type metadata accessor for SignificantChangeEngine.State(0);
    sub_1BC996948(&qword_1ED6C3C50, type metadata accessor for SignificantChangeEngine.State, (uint64_t)&protocol conformance descriptor for SignificantChangeEngine.State);
    sub_1BCAB6738();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t SignificantChangeEngine.Output.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  _QWORD *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  _QWORD *v32;
  char v33;
  char v34;
  char v35;

  v26 = a2;
  sub_1BCA7EFF8(0);
  MEMORY[0x1E0C80A78](v3);
  v27 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BCA7EFBC(0);
  MEMORY[0x1E0C80A78](v5);
  v28 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v29 = (char *)&v25 - v8;
  sub_1BC9ACE04(0, &qword_1ED6C46E0, (uint64_t (*)(void))sub_1BCA7F028, (uint64_t)&type metadata for SignificantChangeEngine.Output.CodingKeys, MEMORY[0x1E0DED048]);
  v31 = v9;
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v25 - v11;
  v13 = type metadata accessor for SignificantChangeEngine.Output(0);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BCA7F028();
  v30 = v12;
  v16 = v32;
  sub_1BCAB68AC();
  if (v16)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v17 = (uint64_t)v28;
  v25 = v10;
  v32 = a1;
  type metadata accessor for SignificantChange(0);
  v35 = 0;
  sub_1BC996948(&qword_1ED6C3890, type metadata accessor for SignificantChange, (uint64_t)&protocol conformance descriptor for SignificantChange);
  v19 = v29;
  v18 = v30;
  sub_1BCAB66A8();
  v20 = (uint64_t)v19;
  v21 = (uint64_t)v15;
  sub_1BC9AE330(v20, (uint64_t)v15, (uint64_t (*)(_QWORD))sub_1BCA7EFBC);
  v34 = 1;
  sub_1BCAB66A8();
  sub_1BC9AE330(v17, (uint64_t)&v15[*(int *)(v13 + 20)], (uint64_t (*)(_QWORD))sub_1BCA7EFBC);
  type metadata accessor for SignificantChangeEngine.State(0);
  v33 = 2;
  sub_1BC996948(&qword_1ED6C3C58, type metadata accessor for SignificantChangeEngine.State, (uint64_t)&protocol conformance descriptor for SignificantChangeEngine.State);
  v22 = (uint64_t)v27;
  sub_1BCAB66A8();
  v23 = (uint64_t)v32;
  (*(void (**)(char *, uint64_t))(v25 + 8))(v18, v31);
  sub_1BC9AE330(v22, v21 + *(int *)(v13 + 24), (uint64_t (*)(_QWORD))sub_1BCA7EFF8);
  sub_1BC9964B8(v21, v26, type metadata accessor for SignificantChangeEngine.Output);
  __swift_destroy_boxed_opaque_existential_1(v23);
  return sub_1BC997208(v21, type metadata accessor for SignificantChangeEngine.Output);
}

uint64_t sub_1BCA67FA8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return SignificantChangeEngine.Output.init(from:)(a1, a2);
}

uint64_t sub_1BCA67FBC(_QWORD *a1)
{
  return SignificantChangeEngine.Output.encode(to:)(a1);
}

double SignificantChangeEngine.Parameters.windowDuration.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 8);
}

uint64_t SignificantChangeEngine.Parameters.meanShift.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  _BYTE v4[136];

  sub_1BCA8F4D8(v1 + 16, (uint64_t)v4, &qword_1ED6C4890, (uint64_t)&type metadata for SignificantChangeEngine.Parameters.MeanShift);
  return sub_1BCA8F4D8((uint64_t)v4, a1, &qword_1ED6C4890, (uint64_t)&type metadata for SignificantChangeEngine.Parameters.MeanShift);
}

__n128 SignificantChangeEngine.Parameters.frequencyShift.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  __int128 v4;
  __n128 result;

  v2 = *(_QWORD *)(v1 + 200);
  v3 = *(_BYTE *)(v1 + 208);
  v4 = *(_OWORD *)(v1 + 168);
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 152);
  *(_OWORD *)(a1 + 16) = v4;
  result = *(__n128 *)(v1 + 184);
  *(__n128 *)(a1 + 32) = result;
  *(_QWORD *)(a1 + 48) = v2;
  *(_BYTE *)(a1 + 56) = v3;
  return result;
}

uint64_t static SignificantChangeEngine.Parameters.MeanShift.oneMonth(absoluteChangeThreshold:minimumEffectSize:minimumSegmentLength:minimumDataCount:)@<X0>(uint64_t result@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X6>, char a8@<W7>, uint64_t a9@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  double v12;
  char v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25[2];

  v9 = 5;
  if ((a6 & 1) == 0)
    v9 = a5;
  v10 = 10;
  if ((a8 & 1) == 0)
    v10 = a7;
  if (v9 + 0x4000000000000000 < 0)
  {
    __break(1u);
  }
  else if (v10 >= 2 * v9)
  {
    if ((a4 & 1) != 0)
      a3 = 2.0;
    *(_QWORD *)a9 = 0x3F50624DD2F1A9FCLL;
    *(_BYTE *)(a9 + 8) = 0;
    v12 = *(double *)&result * 0.5;
    v13 = a2 & 1;
    if ((a2 & 1) != 0)
      v12 = *(double *)&result;
    *(double *)(a9 + 16) = a3;
    *(_BYTE *)(a9 + 24) = 0;
    *(double *)(a9 + 32) = *(double *)&result;
    *(_BYTE *)(a9 + 40) = v13;
    *(_QWORD *)(a9 + 48) = 0x3F747AE147AE147BLL;
    *(_BYTE *)(a9 + 56) = 0;
    *(double *)(a9 + 64) = a3 * 0.75;
    *(_BYTE *)(a9 + 72) = 0;
    *(double *)(a9 + 80) = v12;
    *(_BYTE *)(a9 + 88) = v13;
    *(_BYTE *)(a9 + 89) = 1;
    *(_QWORD *)(a9 + 96) = v9;
    *(_QWORD *)(a9 + 104) = v10;
    *(_QWORD *)(a9 + 112) = 4;
    *(_BYTE *)(a9 + 120) = 0;
    *(_QWORD *)(a9 + 128) = 0x4122750000000000;
    return result;
  }
  if (qword_1ED6C4CD8 != -1)
    swift_once();
  v14 = sub_1BCAB5514();
  __swift_project_value_buffer(v14, (uint64_t)qword_1ED6C4CC0);
  v15 = sub_1BCAB54FC();
  v16 = sub_1BCAB61A4();
  if (os_log_type_enabled(v15, v16))
  {
    v17 = swift_slowAlloc();
    v18 = swift_slowAlloc();
    *(_DWORD *)v17 = 136446722;
    v25[0] = v18;
    sub_1BCA7F06C();
    v19 = sub_1BCAB5F28();
    sub_1BC99BD4C(v19, v20, v25);
    sub_1BCAB63A8();
    swift_bridgeObjectRelease();
    *(_WORD *)(v17 + 12) = 2082;
    v21 = sub_1BCAB6798();
    sub_1BC99BD4C(v21, v22, v25);
    sub_1BCAB63A8();
    swift_bridgeObjectRelease();
    *(_WORD *)(v17 + 22) = 2082;
    v23 = sub_1BCAB6798();
    sub_1BC99BD4C(v23, v24, v25);
    sub_1BCAB63A8();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1BC989000, v15, v16, "[%{public}s]: Invalid parameter values for minimumSegmentLength (%{public}s) and minimumDataCount (%{public}s", (uint8_t *)v17, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x1BCCFBF5C](v18, -1, -1);
    MEMORY[0x1BCCFBF5C](v17, -1, -1);
  }

  v25[0] = 0;
  v25[1] = 0xE000000000000000;
  sub_1BCAB64C8();
  sub_1BCAB5F70();
  sub_1BCA7F06C();
  sub_1BCAB5F28();
  sub_1BCAB5F70();
  swift_bridgeObjectRelease();
  sub_1BCAB5F70();
  sub_1BCAB6798();
  sub_1BCAB5F70();
  swift_bridgeObjectRelease();
  sub_1BCAB5F70();
  sub_1BCAB6798();
  sub_1BCAB5F70();
  swift_bridgeObjectRelease();
  *(double *)&result = COERCE_DOUBLE(sub_1BCAB65C4());
  __break(1u);
  return result;
}

uint64_t static SignificantChangeEngine.Parameters.MeanShift.sixMonths(absoluteChangeThreshold:minimumEffectSize:minimumSegmentLength:minimumDataCount:)@<X0>(uint64_t result@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X6>, char a8@<W7>, uint64_t a9@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  double v12;
  char v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25[2];

  v9 = 25;
  if ((a6 & 1) == 0)
    v9 = a5;
  v10 = 50;
  if ((a8 & 1) == 0)
    v10 = a7;
  if (v9 + 0x4000000000000000 < 0)
  {
    __break(1u);
  }
  else if (v10 >= 2 * v9)
  {
    if ((a4 & 1) != 0)
      a3 = 1.0;
    *(_QWORD *)a9 = 0x3F50624DD2F1A9FCLL;
    *(_BYTE *)(a9 + 8) = 0;
    v12 = *(double *)&result * 0.5;
    v13 = a2 & 1;
    if ((a2 & 1) != 0)
      v12 = *(double *)&result;
    *(double *)(a9 + 16) = a3;
    *(_BYTE *)(a9 + 24) = 0;
    *(double *)(a9 + 32) = *(double *)&result;
    *(_BYTE *)(a9 + 40) = v13;
    *(_QWORD *)(a9 + 48) = 0x3F747AE147AE147BLL;
    *(_BYTE *)(a9 + 56) = 0;
    *(double *)(a9 + 64) = a3 * 0.75;
    *(_BYTE *)(a9 + 72) = 0;
    *(double *)(a9 + 80) = v12;
    *(_BYTE *)(a9 + 88) = v13;
    *(_BYTE *)(a9 + 89) = 1;
    *(_QWORD *)(a9 + 96) = v9;
    *(_QWORD *)(a9 + 104) = v10;
    *(_QWORD *)(a9 + 112) = 28;
    *(_BYTE *)(a9 + 120) = 0;
    *(_QWORD *)(a9 + 128) = 0x41407AC000000000;
    return result;
  }
  if (qword_1ED6C4CD8 != -1)
    swift_once();
  v14 = sub_1BCAB5514();
  __swift_project_value_buffer(v14, (uint64_t)qword_1ED6C4CC0);
  v15 = sub_1BCAB54FC();
  v16 = sub_1BCAB61A4();
  if (os_log_type_enabled(v15, v16))
  {
    v17 = swift_slowAlloc();
    v18 = swift_slowAlloc();
    *(_DWORD *)v17 = 136446722;
    v25[0] = v18;
    sub_1BCA7F06C();
    v19 = sub_1BCAB5F28();
    sub_1BC99BD4C(v19, v20, v25);
    sub_1BCAB63A8();
    swift_bridgeObjectRelease();
    *(_WORD *)(v17 + 12) = 2082;
    v21 = sub_1BCAB6798();
    sub_1BC99BD4C(v21, v22, v25);
    sub_1BCAB63A8();
    swift_bridgeObjectRelease();
    *(_WORD *)(v17 + 22) = 2082;
    v23 = sub_1BCAB6798();
    sub_1BC99BD4C(v23, v24, v25);
    sub_1BCAB63A8();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1BC989000, v15, v16, "[%{public}s]: Invalid parameter values for minimumSegmentLength (%{public}s) and minimumDataCount (%{public}s", (uint8_t *)v17, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x1BCCFBF5C](v18, -1, -1);
    MEMORY[0x1BCCFBF5C](v17, -1, -1);
  }

  v25[0] = 0;
  v25[1] = 0xE000000000000000;
  sub_1BCAB64C8();
  sub_1BCAB5F70();
  sub_1BCA7F06C();
  sub_1BCAB5F28();
  sub_1BCAB5F70();
  swift_bridgeObjectRelease();
  sub_1BCAB5F70();
  sub_1BCAB6798();
  sub_1BCAB5F70();
  swift_bridgeObjectRelease();
  sub_1BCAB5F70();
  sub_1BCAB6798();
  sub_1BCAB5F70();
  swift_bridgeObjectRelease();
  *(double *)&result = COERCE_DOUBLE(sub_1BCAB65C4());
  __break(1u);
  return result;
}

uint64_t sub_1BCA688FC@<X0>(uint64_t result@<X0>, char a2@<W1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18[2];

  v5 = 5;
  if ((a2 & 1) == 0)
    v5 = result;
  v6 = 10;
  if ((a4 & 1) == 0)
    v6 = a3;
  if (v5 + 0x4000000000000000 < 0)
  {
    __break(1u);
  }
  else if (v6 >= 2 * v5)
  {
    *(_QWORD *)a5 = 0x3F847AE147AE147BLL;
    *(_QWORD *)(a5 + 8) = v5;
    *(_QWORD *)(a5 + 16) = v6;
    *(_OWORD *)(a5 + 24) = xmmword_1BCAC7740;
    *(_QWORD *)(a5 + 40) = 28;
    *(_QWORD *)(a5 + 48) = 0x4122750000000000;
    return result;
  }
  if (qword_1ED6C4CD8 != -1)
    swift_once();
  v7 = sub_1BCAB5514();
  __swift_project_value_buffer(v7, (uint64_t)qword_1ED6C4CC0);
  v8 = sub_1BCAB54FC();
  v9 = sub_1BCAB61A4();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = swift_slowAlloc();
    v11 = swift_slowAlloc();
    *(_DWORD *)v10 = 136446722;
    v18[0] = v11;
    sub_1BCA8F710();
    v12 = sub_1BCAB5F28();
    sub_1BC99BD4C(v12, v13, v18);
    sub_1BCAB63A8();
    swift_bridgeObjectRelease();
    *(_WORD *)(v10 + 12) = 2082;
    v14 = sub_1BCAB6798();
    sub_1BC99BD4C(v14, v15, v18);
    sub_1BCAB63A8();
    swift_bridgeObjectRelease();
    *(_WORD *)(v10 + 22) = 2082;
    v16 = sub_1BCAB6798();
    sub_1BC99BD4C(v16, v17, v18);
    sub_1BCAB63A8();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1BC989000, v8, v9, "[%{public}s]: Invalid parameter values for minimumSegmentLength (%{public}s) and minimumDataCount (%{public}s", (uint8_t *)v10, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x1BCCFBF5C](v11, -1, -1);
    MEMORY[0x1BCCFBF5C](v10, -1, -1);
  }

  v18[0] = 0;
  v18[1] = 0xE000000000000000;
  sub_1BCAB64C8();
  sub_1BCAB5F70();
  sub_1BCA8F710();
  sub_1BCAB5F28();
  sub_1BCAB5F70();
  swift_bridgeObjectRelease();
  sub_1BCAB5F70();
  sub_1BCAB6798();
  sub_1BCAB5F70();
  swift_bridgeObjectRelease();
  sub_1BCAB5F70();
  sub_1BCAB6798();
  sub_1BCAB5F70();
  swift_bridgeObjectRelease();
  result = sub_1BCAB65C4();
  __break(1u);
  return result;
}

uint64_t SignificantChangeEngine.Parameters.Thresholds.maximumPValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t SignificantChangeEngine.Parameters.Thresholds.minimumEffectSize.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t SignificantChangeEngine.Parameters.Thresholds.minimumAbsoluteChange.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 32);
}

uint64_t sub_1BCA68D00()
{
  _BYTE *v0;
  unint64_t v1;

  v1 = 0xD000000000000011;
  if (*v0 != 1)
    v1 = 0xD000000000000015;
  if (*v0)
    return v1;
  else
    return 0x506D756D6978616DLL;
}

uint64_t sub_1BCA68D6C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1BCA8E178(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1BCA68D90()
{
  sub_1BCA7F0A4();
  return sub_1BCAB68D0();
}

uint64_t sub_1BCA68DB8()
{
  sub_1BCA7F0A4();
  return sub_1BCAB68DC();
}

uint64_t SignificantChangeEngine.Parameters.Thresholds.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD v11[2];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  char v16;
  char v17;
  char v18;

  sub_1BC9ACE04(0, &qword_1EF47A1A0, (uint64_t (*)(void))sub_1BCA7F0A4, (uint64_t)&type metadata for SignificantChangeEngine.Parameters.Thresholds.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v7 = (char *)v11 - v6;
  v8 = *(_QWORD *)(v1 + 16);
  v15 = *(unsigned __int8 *)(v1 + 24);
  v12 = *(_QWORD *)(v1 + 32);
  v13 = v8;
  v11[1] = *(unsigned __int8 *)(v1 + 40);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BCA7F0A4();
  sub_1BCAB68B8();
  v18 = 0;
  v9 = v14;
  sub_1BCAB6720();
  if (!v9)
  {
    v17 = 1;
    sub_1BCAB6720();
    v16 = 2;
    sub_1BCAB6720();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t SignificantChangeEngine.Parameters.Thresholds.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  int v14;
  uint64_t v16;
  void (*v17)(char *, uint64_t);
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  char v23;
  char v24;
  char v25;

  v21 = a2;
  sub_1BC9ACE04(0, &qword_1EF47A1B0, (uint64_t (*)(void))sub_1BCA7F0A4, (uint64_t)&type metadata for SignificantChangeEngine.Parameters.Thresholds.CodingKeys, MEMORY[0x1E0DED048]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v20 - v7;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BCA7F0A4();
  sub_1BCAB68AC();
  if (!v2)
  {
    v9 = v21;
    v25 = 0;
    v10 = sub_1BCAB6690();
    v12 = v11;
    v24 = 1;
    v13 = sub_1BCAB6690();
    v22 = v14;
    v20 = v13;
    v23 = 2;
    v16 = sub_1BCAB6690();
    v17 = *(void (**)(char *, uint64_t))(v6 + 8);
    v19 = v18;
    v17(v8, v5);
    *(_QWORD *)v9 = v10;
    *(_BYTE *)(v9 + 8) = v12 & 1;
    *(_QWORD *)(v9 + 16) = v20;
    *(_BYTE *)(v9 + 24) = v22 & 1;
    *(_QWORD *)(v9 + 32) = v16;
    *(_BYTE *)(v9 + 40) = v19 & 1;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_1BCA69138@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return SignificantChangeEngine.Parameters.Thresholds.init(from:)(a1, a2);
}

uint64_t sub_1BCA6914C(_QWORD *a1)
{
  return SignificantChangeEngine.Parameters.Thresholds.encode(to:)(a1);
}

HealthVisualization::SignificantChangeEngine::Parameters::ChangepointMode_optional __swiftcall SignificantChangeEngine.Parameters.ChangepointMode.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  unint64_t v3;
  HealthVisualization::SignificantChangeEngine::Parameters::ChangepointMode_optional result;
  char v5;

  v2 = v1;
  v3 = sub_1BCAB6654();
  result.value = swift_bridgeObjectRelease();
  v5 = 4;
  if (v3 < 4)
    v5 = v3;
  *v2 = v5;
  return result;
}

uint64_t SignificantChangeEngine.Parameters.ChangepointMode.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1BCA691E4 + 4 * byte_1BCAC7750[*v0]))(0x65756C615670, 0xE600000000000000);
}

uint64_t sub_1BCA691E4()
{
  return 0x6953746365666665;
}

uint64_t sub_1BCA69204()
{
  return 0x6D726F4E326CLL;
}

uint64_t sub_1BCA69214()
{
  return 0x7473697461745374;
}

void sub_1BCA69230()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  sub_1BCAB6870();
  __asm { BR              X9 }
}

uint64_t sub_1BCA69278()
{
  sub_1BCAB5F40();
  swift_bridgeObjectRelease();
  return sub_1BCAB6894();
}

void sub_1BCA692EC()
{
  __asm { BR              X10 }
}

uint64_t sub_1BCA69324()
{
  sub_1BCAB5F40();
  return swift_bridgeObjectRelease();
}

void sub_1BCA69384()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  sub_1BCAB6870();
  __asm { BR              X9 }
}

uint64_t sub_1BCA693C8()
{
  sub_1BCAB5F40();
  swift_bridgeObjectRelease();
  return sub_1BCAB6894();
}

HealthVisualization::SignificantChangeEngine::Parameters::ChangepointMode_optional sub_1BCA6943C(Swift::String *a1)
{
  return SignificantChangeEngine.Parameters.ChangepointMode.init(rawValue:)(*a1);
}

uint64_t sub_1BCA69448()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1BCA69474 + 4 * byte_1BCAC7760[*v0]))();
}

void sub_1BCA69474(_QWORD *a1@<X8>)
{
  *a1 = 0x6953746365666665;
  a1[1] = 0xEA0000000000657ALL;
}

void sub_1BCA69498(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = 0x6D726F4E326CLL;
  a1[1] = v1;
}

void sub_1BCA694AC(_QWORD *a1@<X8>)
{
  *a1 = 0x7473697461745374;
  a1[1] = 0xEA00000000006369;
}

void sub_1BCA694CC(char *a1)
{
  sub_1BC999A68(*a1);
}

uint64_t sub_1BCA694D8()
{
  sub_1BCA8F450();
  return sub_1BCAB5FE8();
}

uint64_t sub_1BCA69534()
{
  sub_1BCA8F450();
  return sub_1BCAB5FD0();
}

void SignificantChangeEngine.Parameters.MeanShift.thresholds.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v6;

  v2 = *(_BYTE *)(v1 + 8);
  v3 = *(_QWORD *)(v1 + 16);
  v4 = *(_BYTE *)(v1 + 24);
  v5 = *(_QWORD *)(v1 + 32);
  v6 = *(_BYTE *)(v1 + 40);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_BYTE *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v3;
  *(_BYTE *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = v5;
  *(_BYTE *)(a1 + 40) = v6;
}

void SignificantChangeEngine.Parameters.MeanShift.opportunisticThresholds.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v6;

  v2 = *(_BYTE *)(v1 + 56);
  v3 = *(_QWORD *)(v1 + 64);
  v4 = *(_BYTE *)(v1 + 72);
  v5 = *(_QWORD *)(v1 + 80);
  v6 = *(_BYTE *)(v1 + 88);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 48);
  *(_BYTE *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v3;
  *(_BYTE *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = v5;
  *(_BYTE *)(a1 + 40) = v6;
}

void SignificantChangeEngine.Parameters.MeanShift.mode.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 89);
}

uint64_t SignificantChangeEngine.Parameters.MeanShift.minimumSegmentLength.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 96);
}

uint64_t SignificantChangeEngine.Parameters.MeanShift.minimumDataCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 104);
}

uint64_t SignificantChangeEngine.Parameters.MeanShift.maxSegmentLengthWithoutRecentData.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 112);
}

double SignificantChangeEngine.Parameters.MeanShift.cooldownPeriodLength.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 128);
}

uint64_t sub_1BCA6961C(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1BCA69654 + 4 * byte_1BCAC7764[a1]))(0x6C6F687365726874, 0xEA00000000007364);
}

unint64_t sub_1BCA69654()
{
  return 0xD000000000000017;
}

uint64_t sub_1BCA696DC()
{
  unsigned __int8 *v0;

  return sub_1BCA6961C(*v0);
}

uint64_t sub_1BCA696E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1BCA8E2E4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1BCA69708()
{
  sub_1BCA7F0E8();
  return sub_1BCAB68D0();
}

uint64_t sub_1BCA69730()
{
  sub_1BCA7F0E8();
  return sub_1BCAB68DC();
}

uint64_t SignificantChangeEngine.Parameters.MeanShift.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v16;
  char v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  int v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  char v40;

  sub_1BC9ACE04(0, &qword_1EF47A1B8, (uint64_t (*)(void))sub_1BCA7F0E8, (uint64_t)&type metadata for SignificantChangeEngine.Parameters.MeanShift.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v4 = v3;
  v29 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v18 - v5;
  v7 = *v1;
  v8 = *((unsigned __int8 *)v1 + 8);
  v9 = v1[2];
  v31 = *((unsigned __int8 *)v1 + 24);
  v32 = v8;
  v10 = v1[4];
  v30 = *((unsigned __int8 *)v1 + 40);
  v28 = v1[6];
  v27 = *((unsigned __int8 *)v1 + 56);
  v26 = v1[8];
  v25 = *((unsigned __int8 *)v1 + 72);
  v24 = v1[10];
  v11 = *((unsigned __int8 *)v1 + 88);
  v22 = *((unsigned __int8 *)v1 + 89);
  v23 = v11;
  v12 = v1[12];
  v20 = v1[13];
  v21 = v12;
  v18 = v1[14];
  v19 = *((unsigned __int8 *)v1 + 120);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BCA7F0E8();
  sub_1BCAB68B8();
  v35 = v7;
  v36 = v32;
  v37 = v9;
  v38 = v31;
  v13 = v6;
  v39 = v10;
  v40 = v30;
  v34 = 0;
  sub_1BCA7F12C();
  v14 = v33;
  sub_1BCAB6774();
  if (v14)
    return (*(uint64_t (**)(char *, uint64_t))(v29 + 8))(v6, v4);
  v16 = v29;
  v35 = v28;
  v36 = v27;
  v37 = v26;
  v38 = v25;
  v39 = v24;
  v17 = v22;
  v40 = v23;
  v34 = 1;
  sub_1BCAB6774();
  LOBYTE(v35) = v17;
  v34 = 2;
  sub_1BCA7F170();
  sub_1BCAB6774();
  LOBYTE(v35) = 3;
  sub_1BCAB6768();
  LOBYTE(v35) = 4;
  sub_1BCAB6768();
  LOBYTE(v35) = 5;
  sub_1BCAB672C();
  LOBYTE(v35) = 6;
  sub_1BCAB675C();
  return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v13, v4);
}

uint64_t SignificantChangeEngine.Parameters.MeanShift.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v24;
  uint64_t v25;
  char v26;
  _QWORD *v27;
  int v28;
  int v29;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  _QWORD *v46;
  _BYTE v47[7];
  char v48;
  int v49;
  __int16 v50;
  char v51;
  _BYTE v52[7];
  char v53;
  _BYTE v54[7];
  char v55;
  _BYTE v56[7];
  char v57;
  _BYTE v58[7];
  char v59;
  char v60;
  char v61;
  uint64_t v62;
  unsigned __int8 v63;
  uint64_t v64;
  unsigned __int8 v65;
  uint64_t v66;
  unsigned __int8 v67;

  sub_1BC9ACE04(0, &qword_1EF47A1D8, (uint64_t (*)(void))sub_1BCA7F0E8, (uint64_t)&type metadata for SignificantChangeEngine.Parameters.MeanShift.CodingKeys, MEMORY[0x1E0DED048]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v30 - v8;
  v10 = a1[3];
  v46 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v10);
  sub_1BCA7F0E8();
  sub_1BCAB68AC();
  if (!v2)
  {
    v44 = a2;
    v45 = v7;
    v58[0] = 0;
    sub_1BCA7F1B4();
    v11 = v6;
    sub_1BCAB66E4();
    v43 = v62;
    v42 = v63;
    v12 = v64;
    v13 = v65;
    v14 = v66;
    v15 = v67;
    v58[0] = 1;
    sub_1BCAB66E4();
    v38 = v15;
    v39 = v13;
    v40 = v14;
    v41 = v12;
    v37 = v62;
    LODWORD(v14) = v63;
    v16 = v64;
    v17 = v65;
    v18 = v66;
    v19 = v67;
    v58[0] = 2;
    sub_1BCA7F1F8();
    sub_1BCAB66E4();
    v32 = v19;
    v33 = v17;
    v34 = v16;
    v35 = v14;
    v36 = v18;
    LODWORD(v18) = v62;
    LOBYTE(v62) = 3;
    v30 = sub_1BCAB66D8();
    v31 = v18;
    LOBYTE(v62) = 4;
    v20 = sub_1BCAB66D8();
    LOBYTE(v62) = 5;
    v21 = sub_1BCAB669C();
    LOBYTE(v19) = v22;
    v61 = 6;
    sub_1BCAB66CC();
    v25 = v24;
    (*(void (**)(char *, uint64_t))(v45 + 8))(v9, v11);
    LOBYTE(v17) = v42;
    v60 = v42;
    v26 = v39;
    v59 = v39;
    v57 = v38;
    v55 = v35;
    v53 = v33;
    v51 = v32;
    v48 = v19 & 1;
    v27 = v44;
    *v44 = v43;
    *((_BYTE *)v27 + 8) = v17;
    *(_DWORD *)((char *)v27 + 9) = v62;
    *((_DWORD *)v27 + 3) = *(_DWORD *)((char *)&v62 + 3);
    v27[2] = v41;
    *((_BYTE *)v27 + 24) = v26;
    v28 = *(_DWORD *)v58;
    *((_DWORD *)v27 + 7) = *(_DWORD *)&v58[3];
    *(_DWORD *)((char *)v27 + 25) = v28;
    v27[4] = v40;
    *((_BYTE *)v27 + 40) = v57;
    *(_DWORD *)((char *)v27 + 41) = *(_DWORD *)v56;
    *((_DWORD *)v27 + 11) = *(_DWORD *)&v56[3];
    v27[6] = v37;
    *((_BYTE *)v27 + 56) = v55;
    *(_DWORD *)((char *)v27 + 57) = *(_DWORD *)v54;
    *((_DWORD *)v27 + 15) = *(_DWORD *)&v54[3];
    v27[8] = v34;
    *((_BYTE *)v27 + 72) = v53;
    *((_DWORD *)v27 + 19) = *(_DWORD *)&v52[3];
    *(_DWORD *)((char *)v27 + 73) = *(_DWORD *)v52;
    v27[10] = v36;
    *((_BYTE *)v27 + 88) = v51;
    *((_BYTE *)v27 + 89) = v31;
    *((_WORD *)v27 + 47) = v50;
    *(_DWORD *)((char *)v27 + 90) = v49;
    v27[12] = v30;
    v27[13] = v20;
    v27[14] = v21;
    *((_BYTE *)v27 + 120) = v48;
    v29 = *(_DWORD *)v47;
    *((_DWORD *)v27 + 31) = *(_DWORD *)&v47[3];
    *(_DWORD *)((char *)v27 + 121) = v29;
    v27[16] = v25;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v46);
}

uint64_t sub_1BCA69EB8@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return SignificantChangeEngine.Parameters.MeanShift.init(from:)(a1, a2);
}

uint64_t sub_1BCA69ECC(_QWORD *a1)
{
  return SignificantChangeEngine.Parameters.MeanShift.encode(to:)(a1);
}

double SignificantChangeEngine.Parameters.FrequencyShift.pThreshold.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

uint64_t SignificantChangeEngine.Parameters.FrequencyShift.minimumSegmentLength.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t SignificantChangeEngine.Parameters.FrequencyShift.minimumDataCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t SignificantChangeEngine.Parameters.FrequencyShift.confirmedLoggingThreshold.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24);
}

uint64_t SignificantChangeEngine.Parameters.FrequencyShift.minimumAbsenceCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 32);
}

uint64_t SignificantChangeEngine.Parameters.FrequencyShift.maxInactivePeriods.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 40);
}

double SignificantChangeEngine.Parameters.FrequencyShift.coldStartLoggingThreshold.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 48);
}

uint64_t sub_1BCA69F1C(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1BCA69F54 + 4 * byte_1BCAC776B[a1]))(0x6F68736572685470, 0xEA0000000000646CLL);
}

unint64_t sub_1BCA69F54()
{
  return 0xD000000000000014;
}

uint64_t sub_1BCA69FE4()
{
  unsigned __int8 *v0;

  return sub_1BCA69F1C(*v0);
}

uint64_t sub_1BCA69FEC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1BCA8E590(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1BCA6A010()
{
  sub_1BCA7F23C();
  return sub_1BCAB68D0();
}

uint64_t sub_1BCA6A038()
{
  sub_1BCA7F23C();
  return sub_1BCAB68DC();
}

uint64_t SignificantChangeEngine.Parameters.FrequencyShift.encode(to:)(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[6];
  char v13;
  char v14;
  char v15;
  char v16;
  char v17;
  char v18;
  char v19;

  sub_1BC9ACE04(0, &qword_1EF47A1F0, (uint64_t (*)(void))sub_1BCA7F23C, (uint64_t)&type metadata for SignificantChangeEngine.Parameters.FrequencyShift.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v8 = (char *)v12 - v7;
  v9 = v1[1];
  v12[4] = v1[2];
  v12[5] = v9;
  v10 = v1[3];
  v12[2] = v1[4];
  v12[3] = v10;
  v12[1] = v1[5];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BCA7F23C();
  sub_1BCAB68B8();
  v19 = 0;
  sub_1BCAB675C();
  if (!v2)
  {
    v18 = 1;
    sub_1BCAB6768();
    v17 = 2;
    sub_1BCAB6768();
    v16 = 3;
    sub_1BCAB6768();
    v15 = 4;
    sub_1BCAB6768();
    v14 = 5;
    sub_1BCAB6768();
    v13 = 6;
    sub_1BCAB675C();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t SignificantChangeEngine.Parameters.FrequencyShift.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char v24;
  char v25;
  char v26;
  char v27;
  char v28;
  char v29;

  sub_1BC9ACE04(0, &qword_1EF47A200, (uint64_t (*)(void))sub_1BCA7F23C, (uint64_t)&type metadata for SignificantChangeEngine.Parameters.FrequencyShift.CodingKeys, MEMORY[0x1E0DED048]);
  v22 = v5;
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v19 - v7;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BCA7F23C();
  sub_1BCAB68AC();
  if (!v2)
  {
    v9 = v6;
    v29 = 0;
    sub_1BCAB66CC();
    v11 = v10;
    v28 = 1;
    v13 = sub_1BCAB66D8();
    v27 = 2;
    v14 = sub_1BCAB66D8();
    v26 = 3;
    v15 = sub_1BCAB66D8();
    v25 = 4;
    v21 = sub_1BCAB66D8();
    v24 = 5;
    v20 = sub_1BCAB66D8();
    v23 = 6;
    sub_1BCAB66CC();
    v17 = v16;
    (*(void (**)(char *, uint64_t))(v9 + 8))(v8, v22);
    *a2 = v11;
    a2[1] = v13;
    a2[2] = v14;
    v18 = v21;
    a2[3] = v15;
    a2[4] = v18;
    a2[5] = v20;
    a2[6] = v17;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_1BCA6A514@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return SignificantChangeEngine.Parameters.FrequencyShift.init(from:)(a1, a2);
}

uint64_t sub_1BCA6A528(_QWORD *a1)
{
  return SignificantChangeEngine.Parameters.FrequencyShift.encode(to:)(a1);
}

uint64_t sub_1BCA6A540()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1BCA6A574 + 4 * byte_1BCAC7772[*v0]))(0xD000000000000012, 0x80000001BCAD31D0);
}

uint64_t sub_1BCA6A574()
{
  return 0x7544776F646E6977;
}

uint64_t sub_1BCA6A598()
{
  return 0x666968536E61656DLL;
}

uint64_t sub_1BCA6A5B4()
{
  return 0x636E657571657266;
}

uint64_t sub_1BCA6A5D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1BCA8E844(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1BCA6A5FC()
{
  sub_1BCA7F280();
  return sub_1BCAB68D0();
}

uint64_t sub_1BCA6A624()
{
  sub_1BCA7F280();
  return sub_1BCAB68DC();
}

uint64_t SignificantChangeEngine.Parameters.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  _QWORD v27[7];
  char v28;
  _BYTE v29[144];

  sub_1BC9ACE04(0, &qword_1EF47A208, (uint64_t (*)(void))sub_1BCA7F280, (uint64_t)&type metadata for SignificantChangeEngine.Parameters.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v7 = (char *)&v16 - v6;
  sub_1BCA8F4D8(v1 + 16, (uint64_t)v29, &qword_1ED6C4890, (uint64_t)&type metadata for SignificantChangeEngine.Parameters.MeanShift);
  v8 = *(_QWORD *)(v1 + 152);
  v23 = *(_QWORD *)(v1 + 160);
  v24 = v8;
  v9 = *(_QWORD *)(v1 + 168);
  v21 = *(_QWORD *)(v1 + 176);
  v22 = v9;
  v10 = *(_QWORD *)(v1 + 184);
  v19 = *(_QWORD *)(v1 + 192);
  v20 = v10;
  v18 = *(_QWORD *)(v1 + 200);
  v17 = *(unsigned __int8 *)(v1 + 208);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BCA7F280();
  sub_1BCAB68B8();
  LOBYTE(v27[0]) = 0;
  v11 = v25;
  sub_1BCAB6768();
  if (!v11)
  {
    v13 = v22;
    v12 = v23;
    v14 = v24;
    LOBYTE(v27[0]) = 1;
    sub_1BCAB675C();
    sub_1BCA8F4D8((uint64_t)v29, (uint64_t)v27, &qword_1ED6C4890, (uint64_t)&type metadata for SignificantChangeEngine.Parameters.MeanShift);
    v26 = 2;
    sub_1BCA7F2C4();
    sub_1BCAB6738();
    v27[0] = v14;
    v27[1] = v12;
    v27[2] = v13;
    v27[3] = v21;
    v27[4] = v20;
    v27[5] = v19;
    v27[6] = v18;
    v28 = v17;
    v26 = 3;
    sub_1BCA7F308();
    sub_1BCAB6738();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t SignificantChangeEngine.Parameters.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  _OWORD *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  _OWORD v31[8];
  _OWORD v32[2];
  __int128 v33;
  __int128 v34;
  char v35;
  char v36;
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  _BYTE v43[144];
  _BYTE v44[144];

  v28 = a2;
  sub_1BC9ACE04(0, &qword_1EF47A228, (uint64_t (*)(void))sub_1BCA7F280, (uint64_t)&type metadata for SignificantChangeEngine.Parameters.CodingKeys, MEMORY[0x1E0DED048]);
  *(_QWORD *)&v29 = v4;
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v27 - v6;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BCA7F280();
  sub_1BCAB68AC();
  if (v2)
  {
    v26 = (uint64_t)a1;
  }
  else
  {
    v8 = a1;
    v9 = v5;
    LOBYTE(v30) = 0;
    v10 = v29;
    v11 = sub_1BCAB66D8();
    LOBYTE(v30) = 1;
    sub_1BCAB66CC();
    v13 = v12;
    v43[143] = 2;
    sub_1BCA7F34C();
    sub_1BCAB66A8();
    sub_1BCA8F4D8((uint64_t)v44, (uint64_t)v43, &qword_1ED6C4890, (uint64_t)&type metadata for SignificantChangeEngine.Parameters.MeanShift);
    v36 = 3;
    sub_1BCA7F390();
    sub_1BCAB66A8();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v7, v10);
    v29 = v37;
    v27 = v39;
    v15 = v38;
    v16 = v40;
    v17 = v41;
    v18 = v42;
    *(_QWORD *)&v30 = v11;
    *((_QWORD *)&v30 + 1) = v13;
    sub_1BCA8F4D8((uint64_t)v43, (uint64_t)v31, &qword_1ED6C4890, (uint64_t)&type metadata for SignificantChangeEngine.Parameters.MeanShift);
    *(_OWORD *)((char *)v32 + 8) = v29;
    *((_QWORD *)&v32[1] + 1) = v15;
    v33 = v27;
    *(_QWORD *)&v34 = v16;
    *((_QWORD *)&v34 + 1) = v17;
    v35 = v18;
    v19 = (_OWORD *)v28;
    *(_BYTE *)(v28 + 208) = v18;
    v20 = v31[6];
    v19[6] = v31[5];
    v19[7] = v20;
    v21 = v31[2];
    v19[2] = v31[1];
    v19[3] = v21;
    v22 = v31[4];
    v19[4] = v31[3];
    v19[5] = v22;
    v23 = v31[0];
    *v19 = v30;
    v19[1] = v23;
    v24 = v33;
    v19[10] = v32[1];
    v19[11] = v24;
    v19[12] = v34;
    v25 = v32[0];
    v19[8] = v31[7];
    v19[9] = v25;
    v26 = (uint64_t)v8;
  }
  return __swift_destroy_boxed_opaque_existential_1(v26);
}

uint64_t sub_1BCA6AB74@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return SignificantChangeEngine.Parameters.init(from:)(a1, a2);
}

uint64_t sub_1BCA6AB88(_QWORD *a1)
{
  return SignificantChangeEngine.Parameters.encode(to:)(a1);
}

uint64_t SignificantChangeEngine.State.lastWindowEndpoint.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_1BCAB4BD8();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t SignificantChangeEngine.State.meanShift.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1BCA6ABE8(type metadata accessor for SignificantChangeEngine.State, sub_1BCA7F3D4, a1);
}

uint64_t sub_1BCA6ABE8@<X0>(uint64_t (*a1)(_QWORD)@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;

  v5 = v3 + *(int *)(a1(0) + 20);
  return a2(v5, a3);
}

uint64_t SignificantChangeEngine.State.frequencyShift.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1BCA6AC40(type metadata accessor for SignificantChangeEngine.State, sub_1BCA7F410, a1);
}

uint64_t sub_1BCA6AC40@<X0>(uint64_t (*a1)(_QWORD)@<X0>, uint64_t (*a2)(uint64_t, uint64_t)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;

  v5 = v3 + *(int *)(a1(0) + 24);
  return a2(v5, a3);
}

uint64_t SignificantChangeEngine.State.init(lastWindowEndpoint:meanShift:frequencyShift:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;

  v8 = sub_1BCAB4BD8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a4, a1, v8);
  v9 = type metadata accessor for SignificantChangeEngine.State(0);
  sub_1BC9AE330(a2, a4 + *(int *)(v9 + 20), (uint64_t (*)(_QWORD))sub_1BCA7F3E0);
  return sub_1BC9AE330(a3, a4 + *(int *)(v9 + 24), (uint64_t (*)(_QWORD))sub_1BCA7F41C);
}

uint64_t SignificantChangeEngine.State.MeanShift.activeChange.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1BCA7EFB0(v1, a1);
}

uint64_t SignificantChangeEngine.State.MeanShift.activeChangepoint.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1BCA6ABE8(type metadata accessor for SignificantChangeEngine.State.MeanShift, sub_1BCA7F44C, a1);
}

uint64_t SignificantChangeEngine.State.MeanShift.lastChangepointStartDate.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1BCA6AC40(type metadata accessor for SignificantChangeEngine.State.MeanShift, sub_1BC9AFC58, a1);
}

uint64_t SignificantChangeEngine.State.MeanShift.init(activeChange:activeChangepoint:lastChangepointStartDate:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_1BCA6AD60(a1, a2, a3, type metadata accessor for SignificantChangeEngine.State.MeanShift, (uint64_t (*)(_QWORD))sub_1BC9DBE2C, (uint64_t (*)(_QWORD))sub_1BCA7F46C, a4);
}

uint64_t sub_1BCA6AD60@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t (*a4)(_QWORD)@<X3>, uint64_t (*a5)(_QWORD)@<X4>, uint64_t (*a6)(_QWORD)@<X5>, uint64_t a7@<X8>)
{
  uint64_t v13;

  sub_1BC9AE330(a1, a7, (uint64_t (*)(_QWORD))sub_1BCA7EFBC);
  v13 = a4(0);
  sub_1BC9AE330(a2, a7 + *(int *)(v13 + 20), a5);
  return sub_1BC9AE330(a3, a7 + *(int *)(v13 + 24), a6);
}

uint64_t sub_1BCA6ADE8()
{
  _BYTE *v0;
  unint64_t v1;

  v1 = 0xD000000000000011;
  if (*v0 != 1)
    v1 = 0xD000000000000018;
  if (*v0)
    return v1;
  else
    return 0x6843657669746361;
}

uint64_t sub_1BCA6AE50@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1BCA8EA4C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1BCA6AE74()
{
  sub_1BCA7F488();
  return sub_1BCAB68D0();
}

uint64_t sub_1BCA6AE9C()
{
  sub_1BCA7F488();
  return sub_1BCAB68DC();
}

uint64_t SignificantChangeEngine.State.MeanShift.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;
  char v10;
  char v11;
  char v12;

  sub_1BC9ACE04(0, &qword_1ED6C4760, (uint64_t (*)(void))sub_1BCA7F488, (uint64_t)&type metadata for SignificantChangeEngine.State.MeanShift.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v7 = (char *)&v9 - v6;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BCA7F488();
  sub_1BCAB68B8();
  v12 = 0;
  type metadata accessor for SignificantChange(0);
  sub_1BC996948(&qword_1ED6C3888, type metadata accessor for SignificantChange, (uint64_t)&protocol conformance descriptor for SignificantChange);
  sub_1BCAB6738();
  if (!v1)
  {
    type metadata accessor for SignificantChangeEngine.State.MeanShift(0);
    v11 = 1;
    type metadata accessor for SignificantChangeEngine.Changepoint(0);
    sub_1BC996948(&qword_1ED6C39A8, type metadata accessor for SignificantChangeEngine.Changepoint, (uint64_t)&protocol conformance descriptor for SignificantChangeEngine.Changepoint);
    sub_1BCAB6738();
    v10 = 2;
    sub_1BCAB4E54();
    sub_1BC996948(&qword_1ED6C6978, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], MEMORY[0x1E0CB0890]);
    sub_1BCAB6738();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t SignificantChangeEngine.State.MeanShift.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char v31;
  char v32;
  char v33;

  v24 = a2;
  sub_1BCA7F46C(0);
  MEMORY[0x1E0C80A78](v3);
  v25 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BC9DBE2C(0);
  MEMORY[0x1E0C80A78](v5);
  v26 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BCA7EFBC(0);
  MEMORY[0x1E0C80A78](v7);
  v27 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BC9ACE04(0, &qword_1ED6C46D8, (uint64_t (*)(void))sub_1BCA7F488, (uint64_t)&type metadata for SignificantChangeEngine.State.MeanShift.CodingKeys, MEMORY[0x1E0DED048]);
  v28 = v9;
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v23 - v11;
  v13 = type metadata accessor for SignificantChangeEngine.State.MeanShift(0);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BCA7F488();
  v29 = v12;
  v16 = v30;
  sub_1BCAB68AC();
  if (v16)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v17 = (uint64_t)v26;
  v18 = v10;
  v19 = (uint64_t)a1;
  type metadata accessor for SignificantChange(0);
  v33 = 0;
  sub_1BC996948(&qword_1ED6C3890, type metadata accessor for SignificantChange, (uint64_t)&protocol conformance descriptor for SignificantChange);
  v20 = (uint64_t)v27;
  sub_1BCAB66A8();
  sub_1BC9AE330(v20, (uint64_t)v15, (uint64_t (*)(_QWORD))sub_1BCA7EFBC);
  type metadata accessor for SignificantChangeEngine.Changepoint(0);
  v32 = 1;
  sub_1BC996948(&qword_1ED6C39B0, type metadata accessor for SignificantChangeEngine.Changepoint, (uint64_t)&protocol conformance descriptor for SignificantChangeEngine.Changepoint);
  sub_1BCAB66A8();
  sub_1BC9AE330(v17, (uint64_t)&v15[*(int *)(v13 + 20)], (uint64_t (*)(_QWORD))sub_1BC9DBE2C);
  sub_1BCAB4E54();
  v31 = 2;
  sub_1BC996948(&qword_1ED6C7518, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], MEMORY[0x1E0CB08C0]);
  v21 = (uint64_t)v25;
  sub_1BCAB66A8();
  (*(void (**)(char *, uint64_t))(v18 + 8))(v29, v28);
  sub_1BC9AE330(v21, (uint64_t)&v15[*(int *)(v13 + 24)], (uint64_t (*)(_QWORD))sub_1BCA7F46C);
  sub_1BC9964B8((uint64_t)v15, v24, type metadata accessor for SignificantChangeEngine.State.MeanShift);
  __swift_destroy_boxed_opaque_existential_1(v19);
  return sub_1BC997208((uint64_t)v15, type metadata accessor for SignificantChangeEngine.State.MeanShift);
}

uint64_t sub_1BCA6B4AC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return SignificantChangeEngine.State.MeanShift.init(from:)(a1, a2);
}

uint64_t sub_1BCA6B4C0(_QWORD *a1)
{
  return SignificantChangeEngine.State.MeanShift.encode(to:)(a1);
}

HealthVisualization::SignificantChangeEngine::State::FrequencyShift::Mode_optional __swiftcall SignificantChangeEngine.State.FrequencyShift.Mode.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  uint64_t v3;
  HealthVisualization::SignificantChangeEngine::State::FrequencyShift::Mode_optional result;
  char v5;

  v2 = v1;
  v3 = sub_1BCAB6654();
  result.value = swift_bridgeObjectRelease();
  if (v3 == 1)
    v5 = 1;
  else
    v5 = 2;
  if (!v3)
    v5 = 0;
  *v2 = v5;
  return result;
}

uint64_t SignificantChangeEngine.State.FrequencyShift.Mode.rawValue.getter()
{
  _BYTE *v0;

  if (*v0)
    return 0x6967676F4C746F6ELL;
  else
    return 0x676E6967676F6CLL;
}

uint64_t sub_1BCA6B574()
{
  sub_1BCAB6870();
  sub_1BCAB5F40();
  swift_bridgeObjectRelease();
  return sub_1BCAB6894();
}

uint64_t sub_1BCA6B5F8()
{
  sub_1BCAB5F40();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1BCA6B658()
{
  sub_1BCAB6870();
  sub_1BCAB5F40();
  swift_bridgeObjectRelease();
  return sub_1BCAB6894();
}

HealthVisualization::SignificantChangeEngine::State::FrequencyShift::Mode_optional sub_1BCA6B6D8(Swift::String *a1)
{
  return SignificantChangeEngine.State.FrequencyShift.Mode.init(rawValue:)(*a1);
}

void sub_1BCA6B6E4(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 0x676E6967676F6CLL;
  if (*v1)
    v2 = 0x6967676F4C746F6ELL;
  v3 = 0xE700000000000000;
  if (*v1)
    v3 = 0xEA0000000000676ELL;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_1BCA6B728(char *a1, char *a2)
{
  return sub_1BC9999C0(*a1, *a2);
}

uint64_t sub_1BCA6B734()
{
  sub_1BCA8F40C();
  return sub_1BCAB5FE8();
}

uint64_t sub_1BCA6B790()
{
  sub_1BCA8F40C();
  return sub_1BCAB5FD0();
}

uint64_t SignificantChangeEngine.State.FrequencyShift.init(transitionDate:mode:activeChange:)@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  char v6;
  uint64_t v7;

  v6 = *a2;
  sub_1BC9AE330(a1, a4, (uint64_t (*)(_QWORD))sub_1BCA7F46C);
  v7 = type metadata accessor for SignificantChangeEngine.State.FrequencyShift(0);
  *(_BYTE *)(a4 + *(int *)(v7 + 20)) = v6;
  return sub_1BC9AE330(a3, a4 + *(int *)(v7 + 24), (uint64_t (*)(_QWORD))sub_1BCA7EFBC);
}

uint64_t sub_1BCA6B844()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 1701080941;
  if (*v0 != 1)
    v1 = 0x6843657669746361;
  if (*v0)
    return v1;
  else
    return 0x697469736E617274;
}

uint64_t sub_1BCA6B8AC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1BCA8EBAC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1BCA6B8D0()
{
  sub_1BCA7F4CC();
  return sub_1BCAB68D0();
}

uint64_t sub_1BCA6B8F8()
{
  sub_1BCA7F4CC();
  return sub_1BCAB68DC();
}

uint64_t SignificantChangeEngine.State.FrequencyShift.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v11;
  char v12;
  char v13;
  char v14;
  char v15;

  v3 = v1;
  sub_1BC9ACE04(0, &qword_1ED6C4758, (uint64_t (*)(void))sub_1BCA7F4CC, (uint64_t)&type metadata for SignificantChangeEngine.State.FrequencyShift.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v11 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BCA7F4CC();
  sub_1BCAB68B8();
  v15 = 0;
  sub_1BCAB4E54();
  sub_1BC996948(&qword_1ED6C6978, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], MEMORY[0x1E0CB0890]);
  sub_1BCAB6738();
  if (!v2)
  {
    v14 = *(_BYTE *)(v3 + *(int *)(type metadata accessor for SignificantChangeEngine.State.FrequencyShift(0) + 20));
    v13 = 1;
    sub_1BCA7F510();
    sub_1BCAB6774();
    v12 = 2;
    type metadata accessor for SignificantChange(0);
    sub_1BC996948(&qword_1ED6C3888, type metadata accessor for SignificantChange, (uint64_t)&protocol conformance descriptor for SignificantChange);
    sub_1BCAB6738();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t SignificantChangeEngine.State.FrequencyShift.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char v27;
  char v28;
  char v29;

  v20 = a2;
  sub_1BCA7EFBC(0);
  MEMORY[0x1E0C80A78](v3);
  v21 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BCA7F46C(0);
  MEMORY[0x1E0C80A78](v5);
  v22 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BC9ACE04(0, &qword_1ED6C46D0, (uint64_t (*)(void))sub_1BCA7F4CC, (uint64_t)&type metadata for SignificantChangeEngine.State.FrequencyShift.CodingKeys, MEMORY[0x1E0DED048]);
  v24 = v7;
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v20 - v9;
  v11 = type metadata accessor for SignificantChangeEngine.State.FrequencyShift(0);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BCA7F4CC();
  v23 = v10;
  v14 = v25;
  sub_1BCAB68AC();
  if (v14)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v15 = v8;
  v16 = (uint64_t)v21;
  sub_1BCAB4E54();
  v29 = 0;
  sub_1BC996948(&qword_1ED6C7518, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], MEMORY[0x1E0CB08C0]);
  v17 = (uint64_t)v22;
  v18 = v23;
  sub_1BCAB66A8();
  sub_1BC9AE330(v17, (uint64_t)v13, (uint64_t (*)(_QWORD))sub_1BCA7F46C);
  v27 = 1;
  sub_1BCA7F554();
  sub_1BCAB66E4();
  v13[*(int *)(v11 + 20)] = v28;
  type metadata accessor for SignificantChange(0);
  v26 = 2;
  sub_1BC996948(&qword_1ED6C3890, type metadata accessor for SignificantChange, (uint64_t)&protocol conformance descriptor for SignificantChange);
  sub_1BCAB66A8();
  (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v24);
  sub_1BC9AE330(v16, (uint64_t)&v13[*(int *)(v11 + 24)], (uint64_t (*)(_QWORD))sub_1BCA7EFBC);
  sub_1BC9964B8((uint64_t)v13, v20, type metadata accessor for SignificantChangeEngine.State.FrequencyShift);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return sub_1BC997208((uint64_t)v13, type metadata accessor for SignificantChangeEngine.State.FrequencyShift);
}

uint64_t sub_1BCA6BE6C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return SignificantChangeEngine.State.FrequencyShift.init(from:)(a1, a2);
}

uint64_t sub_1BCA6BE80(_QWORD *a1)
{
  return SignificantChangeEngine.State.FrequencyShift.encode(to:)(a1);
}

unint64_t sub_1BCA6BE98()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x666968536E61656DLL;
  if (*v0 != 1)
    v1 = 0x636E657571657266;
  if (*v0)
    return v1;
  else
    return 0xD000000000000012;
}

uint64_t sub_1BCA6BF08@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1BCA8ED2C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1BCA6BF2C()
{
  sub_1BCA7F598();
  return sub_1BCAB68D0();
}

uint64_t sub_1BCA6BF54()
{
  sub_1BCA7F598();
  return sub_1BCAB68DC();
}

uint64_t SignificantChangeEngine.State.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;
  char v10;
  char v11;
  char v12;

  sub_1BC9ACE04(0, &qword_1ED6C4750, (uint64_t (*)(void))sub_1BCA7F598, (uint64_t)&type metadata for SignificantChangeEngine.State.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v7 = (char *)&v9 - v6;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BCA7F598();
  sub_1BCAB68B8();
  v12 = 0;
  sub_1BCAB4BD8();
  sub_1BC996948(&qword_1ED6C3618, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAE5D0], MEMORY[0x1E0CAE5E8]);
  sub_1BCAB6774();
  if (!v1)
  {
    type metadata accessor for SignificantChangeEngine.State(0);
    v11 = 1;
    type metadata accessor for SignificantChangeEngine.State.MeanShift(0);
    sub_1BC996948(&qword_1ED6C3BA0, type metadata accessor for SignificantChangeEngine.State.MeanShift, (uint64_t)&protocol conformance descriptor for SignificantChangeEngine.State.MeanShift);
    sub_1BCAB6738();
    v10 = 2;
    type metadata accessor for SignificantChangeEngine.State.FrequencyShift(0);
    sub_1BC996948(&qword_1ED6C3AD8, type metadata accessor for SignificantChangeEngine.State.FrequencyShift, (uint64_t)&protocol conformance descriptor for SignificantChangeEngine.State.FrequencyShift);
    sub_1BCAB6738();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t SignificantChangeEngine.State.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, char *, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  char v34;
  char v35;
  char v36;

  v25 = a2;
  sub_1BCA7F41C(0);
  MEMORY[0x1E0C80A78](v3);
  v26 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BCA7F3E0(0);
  MEMORY[0x1E0C80A78](v5);
  v28 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = sub_1BCAB4BD8();
  v27 = *(_QWORD *)(v29 - 8);
  MEMORY[0x1E0C80A78](v29);
  v30 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BC9ACE04(0, &qword_1ED6C46C8, (uint64_t (*)(void))sub_1BCA7F598, (uint64_t)&type metadata for SignificantChangeEngine.State.CodingKeys, MEMORY[0x1E0DED048]);
  v31 = v8;
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v24 - v10;
  v12 = type metadata accessor for SignificantChangeEngine.State(0);
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BCA7F598();
  v32 = v11;
  v15 = v33;
  sub_1BCAB68AC();
  if (v15)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v16 = v28;
  v17 = v9;
  v36 = 0;
  sub_1BC996948(&qword_1ED6C3620, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAE5D0], MEMORY[0x1E0CAE600]);
  v18 = v29;
  sub_1BCAB66E4();
  v19 = *(void (**)(char *, char *, uint64_t))(v27 + 32);
  v33 = v14;
  v19(v14, v30, v18);
  type metadata accessor for SignificantChangeEngine.State.MeanShift(0);
  v35 = 1;
  sub_1BC996948(&qword_1ED6C3BA8, type metadata accessor for SignificantChangeEngine.State.MeanShift, (uint64_t)&protocol conformance descriptor for SignificantChangeEngine.State.MeanShift);
  v20 = (uint64_t)v16;
  sub_1BCAB66A8();
  v30 = (char *)v12;
  v21 = (uint64_t)v33;
  sub_1BC9AE330(v20, (uint64_t)&v33[*(int *)(v12 + 20)], (uint64_t (*)(_QWORD))sub_1BCA7F3E0);
  type metadata accessor for SignificantChangeEngine.State.FrequencyShift(0);
  v34 = 2;
  sub_1BC996948(&qword_1ED6C3AE0, type metadata accessor for SignificantChangeEngine.State.FrequencyShift, (uint64_t)&protocol conformance descriptor for SignificantChangeEngine.State.FrequencyShift);
  v22 = (uint64_t)v26;
  sub_1BCAB66A8();
  (*(void (**)(char *, uint64_t))(v17 + 8))(v32, v31);
  sub_1BC9AE330(v22, v21 + *((int *)v30 + 6), (uint64_t (*)(_QWORD))sub_1BCA7F41C);
  sub_1BC9964B8(v21, v25, type metadata accessor for SignificantChangeEngine.State);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return sub_1BC997208(v21, type metadata accessor for SignificantChangeEngine.State);
}

uint64_t sub_1BCA6C57C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return SignificantChangeEngine.State.init(from:)(a1, a2);
}

uint64_t sub_1BCA6C590(_QWORD *a1)
{
  return SignificantChangeEngine.State.encode(to:)(a1);
}

uint64_t SignificantChangeEngine.analyzeForSignificantChanges(_:parameters:state:)@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v54;
  uint64_t v55;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  void (*v62)(char *, char *, uint64_t);
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int (*v67)(uint64_t, uint64_t, uint64_t);
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void (*v73)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  void (*v79)(uint64_t);
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void (*v92)(char *, char *, uint64_t);
  char *v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  char *v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  _OWORD v123[2];
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  _OWORD v135[3];

  v109 = a2;
  v110 = a3;
  sub_1BCA7EFBC(0);
  MEMORY[0x1E0C80A78](v4);
  v103 = (char *)&v92 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v102 = (uint64_t)&v92 - v7;
  sub_1BCA7F41C(0);
  MEMORY[0x1E0C80A78](v8);
  v99 = (char *)&v92 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BCA7EFF8(0);
  MEMORY[0x1E0C80A78](v10);
  v97 = (char *)&v92 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v94 = (uint64_t)&v92 - v13;
  sub_1BCA7F3E0(0);
  MEMORY[0x1E0C80A78](v14);
  v105 = (uint64_t)&v92 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v101 = type metadata accessor for SignificantChangeEngine.State(0);
  v107 = *(_QWORD *)(v101 - 8);
  MEMORY[0x1E0C80A78](v101);
  v106 = (char *)&v92 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BCA7F5DC(0);
  MEMORY[0x1E0C80A78](v17);
  v100 = (uint64_t)&v92 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19);
  v98 = (uint64_t)&v92 - v20;
  MEMORY[0x1E0C80A78](v21);
  v96 = (char *)&v92 - v22;
  MEMORY[0x1E0C80A78](v23);
  v95 = (uint64_t)&v92 - v24;
  MEMORY[0x1E0C80A78](v25);
  v104 = (uint64_t)&v92 - v26;
  MEMORY[0x1E0C80A78](v27);
  v108 = (uint64_t)&v92 - v28;
  sub_1BC9BD26C(0);
  v30 = *(_QWORD *)(v29 - 8);
  MEMORY[0x1E0C80A78](v29);
  v32 = (char *)&v92 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BC998AB0(0, (unint64_t *)&qword_1ED6C71E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAE5D0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v33);
  v35 = (char *)&v92 - v34;
  v36 = sub_1BCAB4BD8();
  v37 = *(_QWORD *)(v36 - 8);
  MEMORY[0x1E0C80A78](v36);
  MEMORY[0x1E0C80A78](v38);
  v43 = (char *)&v92 - v42;
  v44 = *a1;
  v45 = *(_OWORD *)(a1 + 19);
  v46 = *(_OWORD *)(a1 + 23);
  v134 = *(_OWORD *)(a1 + 21);
  v135[0] = v46;
  *(_OWORD *)((char *)v135 + 9) = *(_OWORD *)((char *)a1 + 193);
  v47 = *(_OWORD *)(a1 + 11);
  v48 = *(_OWORD *)(a1 + 15);
  v130 = *(_OWORD *)(a1 + 13);
  v131 = v48;
  v132 = *(_OWORD *)(a1 + 17);
  v133 = v45;
  v49 = *(_OWORD *)(a1 + 3);
  v50 = *(_OWORD *)(a1 + 7);
  v126 = *(_OWORD *)(a1 + 5);
  v127 = v50;
  v128 = *(_OWORD *)(a1 + 9);
  v129 = v47;
  v124 = *(_OWORD *)(a1 + 1);
  v125 = v49;
  v51 = *(_QWORD *)(v41 + 16);
  if (v51 < v44)
  {
    v52 = type metadata accessor for SignificantChange(0);
    v53 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 56);
    v54 = v110;
    v53(v110, 1, 1, v52);
    v55 = type metadata accessor for SignificantChangeEngine.Output(0);
    v53(v54 + *(int *)(v55 + 20), 1, 1, v52);
    return sub_1BCA7EFEC(v109, v54 + *(int *)(v55 + 24));
  }
  if (!v51)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v37 + 56))(v35, 1, 1);
    goto LABEL_8;
  }
  v93 = v40;
  v57 = v41 + ((*(unsigned __int8 *)(v30 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80));
  v58 = *(_QWORD *)(v30 + 72);
  v59 = v41;
  v60 = v39;
  sub_1BC9964B8(v57 + v58 * (v51 - 1), (uint64_t)v32, (uint64_t (*)(_QWORD))sub_1BC9BD26C);
  v61 = v32;
  v62 = *(void (**)(char *, char *, uint64_t))(v37 + 32);
  v62(v35, v61, v60);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v37 + 56))(v35, 0, 1, v60);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48))(v35, 1, v60) == 1)
  {
LABEL_8:
    sub_1BC9B3A38((uint64_t)v35, (unint64_t *)&qword_1ED6C71E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAE5D0]);
    v72 = type metadata accessor for SignificantChange(0);
    v73 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v72 - 8) + 56);
    v74 = v110;
    v73(v110, 1, 1, v72);
    v75 = type metadata accessor for SignificantChangeEngine.Output(0);
    v73(v74 + *(int *)(v75 + 20), 1, 1, v72);
    return sub_1BCA7EFEC(v109, v74 + *(int *)(v75 + 24));
  }
  v62(v43, v35, v60);
  v121 = v133;
  v122 = v134;
  v123[0] = v135[0];
  *(_OWORD *)((char *)v123 + 9) = *(_OWORD *)((char *)v135 + 9);
  v116 = v128;
  v117 = v129;
  v118 = v130;
  v119 = v131;
  v120 = v132;
  v113 = v125;
  v114 = v126;
  v115 = v127;
  v111 = v44;
  v112 = v124;
  v63 = v109;
  sub_1BCA6CFB0(v59, (uint64_t)&v111, v109, v108);
  v121 = v133;
  v122 = v134;
  v123[0] = v135[0];
  *(_OWORD *)((char *)v123 + 9) = *(_OWORD *)((char *)v135 + 9);
  v116 = v128;
  v117 = v129;
  v118 = v130;
  v119 = v131;
  v120 = v132;
  v113 = v125;
  v114 = v126;
  v115 = v127;
  v111 = v44;
  v112 = v124;
  v64 = v104;
  sub_1BCA6DBBC(v59, (uint64_t)&v111, v63, v104);
  v109 = v60;
  v62(v93, v43, v60);
  v65 = v95;
  sub_1BC9964B8(v64, v95, (uint64_t (*)(_QWORD))sub_1BCA7F5DC);
  v66 = type metadata accessor for SignificantChangeEngine.Output(0);
  v67 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v66 - 8) + 48);
  if (v67(v65, 1, v66) == 1)
  {
    sub_1BC997208(v65, (uint64_t (*)(_QWORD))sub_1BCA7F5DC);
    v68 = v101;
    v69 = (uint64_t)v99;
    v70 = (uint64_t)v96;
    v71 = (uint64_t)v97;
LABEL_11:
    v78 = type metadata accessor for SignificantChangeEngine.State.MeanShift(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v78 - 8) + 56))(v105, 1, 1, v78);
    goto LABEL_13;
  }
  v92 = v62;
  v76 = v94;
  sub_1BCA7EFEC(v65 + *(int *)(v66 + 24), v94);
  sub_1BC997208(v65, type metadata accessor for SignificantChangeEngine.Output);
  v68 = v101;
  v77 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v107 + 48))(v76, 1, v101);
  v69 = (uint64_t)v99;
  v70 = (uint64_t)v96;
  v71 = (uint64_t)v97;
  if (v77 == 1)
  {
    sub_1BC997208(v76, (uint64_t (*)(_QWORD))sub_1BCA7EFF8);
    v62 = v92;
    goto LABEL_11;
  }
  sub_1BCA7F3D4(v76 + *(int *)(v68 + 20), v105);
  sub_1BC997208(v76, type metadata accessor for SignificantChangeEngine.State);
  v62 = v92;
LABEL_13:
  sub_1BC9964B8(v108, v70, (uint64_t (*)(_QWORD))sub_1BCA7F5DC);
  if (v67(v70, 1, v66) == 1)
  {
    v79 = sub_1BCA7F5DC;
    v80 = v70;
  }
  else
  {
    sub_1BCA7EFEC(v70 + *(int *)(v66 + 24), v71);
    sub_1BC997208(v70, type metadata accessor for SignificantChangeEngine.Output);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v107 + 48))(v71, 1, v68) != 1)
    {
      sub_1BCA7F410(v71 + *(int *)(v68 + 24), v69);
      sub_1BC997208(v71, type metadata accessor for SignificantChangeEngine.State);
      goto LABEL_19;
    }
    v79 = sub_1BCA7EFF8;
    v80 = v71;
  }
  sub_1BC997208(v80, (uint64_t (*)(_QWORD))v79);
  v81 = type metadata accessor for SignificantChangeEngine.State.FrequencyShift(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v81 - 8) + 56))(v69, 1, 1, v81);
LABEL_19:
  v82 = v69;
  v83 = (uint64_t)v106;
  v62(v106, v93, v109);
  sub_1BC9AE330(v105, v83 + *(int *)(v68 + 20), (uint64_t (*)(_QWORD))sub_1BCA7F3E0);
  sub_1BC9AE330(v82, v83 + *(int *)(v68 + 24), (uint64_t (*)(_QWORD))sub_1BCA7F41C);
  v84 = v98;
  sub_1BC9AE330(v104, v98, (uint64_t (*)(_QWORD))sub_1BCA7F5DC);
  if (v67(v84, 1, v66) == 1)
  {
    sub_1BC997208(v84, (uint64_t (*)(_QWORD))sub_1BCA7F5DC);
    v85 = type metadata accessor for SignificantChange(0);
    v86 = v102;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v85 - 8) + 56))(v102, 1, 1, v85);
  }
  else
  {
    v86 = v102;
    sub_1BCA7EFB0(v84, v102);
    sub_1BC997208(v84, type metadata accessor for SignificantChangeEngine.Output);
  }
  v87 = v100;
  v88 = (uint64_t)v103;
  sub_1BC9AE330(v108, v100, (uint64_t (*)(_QWORD))sub_1BCA7F5DC);
  if (v67(v87, 1, v66) == 1)
  {
    sub_1BC997208(v87, (uint64_t (*)(_QWORD))sub_1BCA7F5DC);
    v89 = type metadata accessor for SignificantChange(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v89 - 8) + 56))(v88, 1, 1, v89);
  }
  else
  {
    sub_1BCA7EFB0(v87 + *(int *)(v66 + 20), v88);
    sub_1BC997208(v87, type metadata accessor for SignificantChangeEngine.Output);
  }
  v90 = v110;
  v91 = v110 + *(int *)(v66 + 24);
  sub_1BC9AE330((uint64_t)v106, v91, type metadata accessor for SignificantChangeEngine.State);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v107 + 56))(v91, 0, 1, v68);
  sub_1BC9AE330(v86, v90, (uint64_t (*)(_QWORD))sub_1BCA7EFBC);
  return sub_1BC9AE330(v88, v90 + *(int *)(v66 + 20), (uint64_t (*)(_QWORD))sub_1BCA7EFBC);
}

uint64_t sub_1BCA6CFB0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __n128 v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  void (*v54)(char *, char *, uint64_t);
  void (*v55)(char *, uint64_t, uint64_t, uint64_t);
  char *v56;
  uint64_t v57;
  uint64_t result;
  uint64_t v59;
  void (*v60)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int (*v65)(char *, uint64_t);
  uint64_t v66;
  uint64_t (*v67)(_QWORD);
  uint64_t v68;
  uint64_t v69;
  char v70;
  char v71;
  uint64_t v72;
  void (*v73)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unsigned int (*v77)(uint64_t, uint64_t, uint64_t);
  char *v78;
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void (*v85)(char *, uint64_t);
  unsigned int (*v86)(uint64_t, uint64_t, uint64_t);
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  void (*v96)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  void (*v111)(char *, uint64_t);
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  char *v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  char *v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  unsigned int (*v142)(uint64_t, uint64_t, uint64_t);
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;

  v126 = a3;
  v144 = a1;
  v134 = a4;
  v5 = sub_1BCAB4E54();
  v140 = *(_QWORD *)(v5 - 8);
  v141 = v5;
  MEMORY[0x1E0C80A78](v5);
  v139 = (char *)&v116 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v138 = (char *)&v116 - v8;
  sub_1BCA7F41C(0);
  MEMORY[0x1E0C80A78](v9);
  v120 = (uint64_t)&v116 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BCA7EFBC(0);
  MEMORY[0x1E0C80A78](v11);
  v125 = (char *)&v116 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v124 = (char *)&v116 - v14;
  sub_1BCA7F5DC(0);
  MEMORY[0x1E0C80A78](v15);
  v136 = (uint64_t)&v116 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17);
  v143 = (uint64_t)&v116 - v18;
  sub_1BCA7EFF8(0);
  MEMORY[0x1E0C80A78](v19);
  v122 = (uint64_t)&v116 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v23 = (char *)&v116 - v22;
  MEMORY[0x1E0C80A78](v24);
  v142 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))((char *)&v116 - v25);
  MEMORY[0x1E0C80A78](v26);
  v121 = (uint64_t)&v116 - v27;
  MEMORY[0x1E0C80A78](v28);
  v30 = (char *)&v116 - v29;
  sub_1BC9BD26C(0);
  v32 = *(_QWORD *)(v31 - 8);
  MEMORY[0x1E0C80A78](v31);
  v135 = (uint64_t)&v116 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v34);
  v36 = (char *)&v116 - v35;
  sub_1BC998AB0(0, (unint64_t *)&qword_1ED6C71E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAE5D0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v37);
  v39 = (char *)&v116 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v40);
  v42 = (char *)&v116 - v41;
  v43 = sub_1BCAB4BD8();
  v46 = MEMORY[0x1E0C80A78](v43);
  v48 = (char *)&v116 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = *(char **)(v44 + 16);
  if (!v49)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v45 + 56))(v42, 1, 1, v43, v46);
    goto LABEL_6;
  }
  v127 = v23;
  v119 = v48;
  v50 = *(_QWORD *)(a2 + 152);
  v133 = *(_QWORD *)(a2 + 160);
  v132 = *(_QWORD *)(a2 + 168);
  v131 = *(_QWORD *)(a2 + 176);
  v130 = *(_QWORD *)(a2 + 184);
  v129 = *(_QWORD *)(a2 + 192);
  v51 = *(_QWORD *)(a2 + 200);
  v52 = *(_BYTE *)(a2 + 208);
  v117 = v49;
  v116 = (*(unsigned __int8 *)(v32 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v32 + 80);
  v128 = *(_QWORD *)(v32 + 72);
  v53 = v45;
  sub_1BC9964B8(v44 + v116 + v128 * (_QWORD)(v49 - 1), (uint64_t)v36, (uint64_t (*)(_QWORD))sub_1BC9BD26C);
  v54 = *(void (**)(char *, char *, uint64_t))(v53 + 32);
  v54(v42, v36, v43);
  v55 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v53 + 56);
  v55(v42, 0, 1, v43);
  v137 = v53;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v53 + 48))(v42, 1, v43) == 1)
  {
LABEL_6:
    sub_1BC9B3A38((uint64_t)v42, (unint64_t *)&qword_1ED6C71E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAE5D0]);
    v59 = type metadata accessor for SignificantChange(0);
    v60 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v59 - 8) + 56);
    v61 = v134;
    v60(v134, 1, 1, v59);
    v62 = type metadata accessor for SignificantChangeEngine.Output(0);
    v60(v61 + *(int *)(v62 + 20), 1, 1, v59);
    sub_1BCA7EFEC(v126, v61 + *(int *)(v62 + 24));
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v62 - 8) + 56))(v61, 0, 1, v62);
  }
  v56 = v119;
  v54(v119, v42, v43);
  if ((v52 & 1) != 0)
  {
    (*(void (**)(char *, uint64_t))(v137 + 8))(v56, v43);
    v57 = type metadata accessor for SignificantChangeEngine.Output(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v57 - 8) + 56))(v134, 1, 1, v57);
  }
  v63 = v126;
  sub_1BCA7EFEC(v126, (uint64_t)v30);
  v64 = type metadata accessor for SignificantChangeEngine.State(0);
  v118 = *(_QWORD *)(v64 - 8);
  v65 = *(unsigned int (**)(char *, uint64_t))(v118 + 48);
  v66 = 1;
  v123 = v64;
  if (v65(v30, 1) == 1)
  {
    v67 = (uint64_t (*)(_QWORD))sub_1BCA7EFF8;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v137 + 16))(v39, v30, v43);
    v66 = 0;
    v67 = type metadata accessor for SignificantChangeEngine.State;
  }
  sub_1BC997208((uint64_t)v30, v67);
  v55(v39, v66, 1, v43);
  v68 = v144;
  v69 = sub_1BCA73830((uint64_t)v39);
  v71 = v70;
  sub_1BC9B3A38((uint64_t)v39, (unint64_t *)&qword_1ED6C71E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAE5D0]);
  if ((v71 & 1) != 0)
  {
    v78 = v138;
    sub_1BCAB4B9C();
    v79 = v56;
    v80 = v139;
    v81 = sub_1BCAB4DDC();
    MEMORY[0x1E0C80A78](v81);
    *(&v116 - 2) = (unint64_t)v78;
    *(&v116 - 1) = (unint64_t)v80;
    swift_bridgeObjectRetain();
    sub_1BCA67604((uint64_t (*)(char *))sub_1BCA8F748, (uint64_t)(&v116 - 4), v68, (uint64_t (*)(_QWORD))sub_1BC9BD26C, (void (*)(BOOL, uint64_t, uint64_t))sub_1BC9BAE48);
    v83 = v82;
    v84 = v141;
    v85 = *(void (**)(char *, uint64_t))(v140 + 8);
    v85(v80, v141);
    v85(v78, v84);
    v145 = v50;
    v146 = v133;
    v147 = v132;
    v148 = v131;
    v149 = v130;
    v150 = v129;
    v151 = v51;
    v86 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v122;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v118 + 56))(v122, 1, 1, v123);
    sub_1BCA73A0C(v83, (uint64_t)&v145, v86, v134);
    swift_bridgeObjectRelease();
    sub_1BC997208((uint64_t)v86, (uint64_t (*)(_QWORD))sub_1BCA7EFF8);
    return (*(uint64_t (**)(char *, uint64_t))(v137 + 8))(v79, v43);
  }
  v122 = v69;
  v72 = type metadata accessor for SignificantChange(0);
  v73 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v72 - 8) + 56);
  v74 = (uint64_t)v124;
  v73(v124, 1, 1, v72);
  v75 = v121;
  sub_1BCA7EFEC(v63, v121);
  v76 = v123;
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v65)(v75, 1, v123) == 1)
  {
    sub_1BC997208(v75, (uint64_t (*)(_QWORD))sub_1BCA7EFF8);
    v77 = v142;
LABEL_16:
    v92 = (uint64_t)v125;
    v73(v125, 1, 1, v72);
    goto LABEL_18;
  }
  v87 = v75 + *(int *)(v76 + 24);
  v88 = v75;
  v89 = v120;
  sub_1BCA7F410(v87, v120);
  sub_1BC997208(v88, type metadata accessor for SignificantChangeEngine.State);
  v90 = type metadata accessor for SignificantChangeEngine.State.FrequencyShift(0);
  v91 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v90 - 8) + 48))(v89, 1, v90);
  v77 = v142;
  if (v91 == 1)
  {
    sub_1BC997208(v89, (uint64_t (*)(_QWORD))sub_1BCA7F41C);
    goto LABEL_16;
  }
  v93 = v89 + *(int *)(v90 + 24);
  v92 = (uint64_t)v125;
  sub_1BCA7EFB0(v93, (uint64_t)v125);
  sub_1BC997208(v89, type metadata accessor for SignificantChangeEngine.State.FrequencyShift);
LABEL_18:
  v94 = type metadata accessor for SignificantChangeEngine.Output(0);
  v95 = v143;
  sub_1BCA7EFEC(v63, v143 + *(int *)(v94 + 24));
  sub_1BC9AE330(v74, v95, (uint64_t (*)(_QWORD))sub_1BCA7EFBC);
  sub_1BC9AE330(v92, v95 + *(int *)(v94 + 20), (uint64_t (*)(_QWORD))sub_1BCA7EFBC);
  v124 = *(char **)(v94 - 8);
  v96 = (void (*)(uint64_t, _QWORD, uint64_t, uint64_t))*((_QWORD *)v124 + 7);
  v125 = (char *)v94;
  v96(v95, 0, 1, v94);
  result = sub_1BCA7EFEC(v63, (uint64_t)v77);
  v97 = v122 + 1;
  if (__OFADD__(v122, 1))
  {
    __break(1u);
    goto LABEL_30;
  }
  v126 = v43;
  if ((uint64_t)v117 < v97)
  {
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  if ((char *)v97 == v117)
  {
LABEL_21:
    sub_1BC997208((uint64_t)v77, (uint64_t (*)(_QWORD))sub_1BCA7EFF8);
    (*(void (**)(char *, uint64_t))(v137 + 8))(v119, v126);
    v98 = v143;
    sub_1BC9964B8(v143, v134, (uint64_t (*)(_QWORD))sub_1BCA7F5DC);
    return sub_1BC997208(v98, (uint64_t (*)(_QWORD))sub_1BCA7F5DC);
  }
  if (v97 >= (uint64_t)v117)
    goto LABEL_31;
  if ((v97 & 0x8000000000000000) == 0)
  {
    v99 = &v117[~v122];
    v100 = v144 + v116 + v128 * v97;
    v101 = v138;
    do
    {
      v104 = v135;
      sub_1BC9964B8(v100, v135, (uint64_t (*)(_QWORD))sub_1BC9BD26C);
      sub_1BCAB4B9C();
      (*(void (**)(uint64_t, uint64_t))(v137 + 8))(v104, v126);
      v105 = v139;
      v106 = sub_1BCAB4DDC();
      MEMORY[0x1E0C80A78](v106);
      *(&v116 - 2) = (unint64_t)v101;
      *(&v116 - 1) = (unint64_t)v105;
      v107 = v144;
      swift_bridgeObjectRetain();
      sub_1BCA67604((uint64_t (*)(char *))sub_1BCA8F748, (uint64_t)(&v116 - 4), v107, (uint64_t (*)(_QWORD))sub_1BC9BD26C, (void (*)(BOOL, uint64_t, uint64_t))sub_1BC9BAE48);
      v109 = v108;
      v110 = v141;
      v111 = *(void (**)(char *, uint64_t))(v140 + 8);
      v111(v105, v141);
      v112 = v110;
      v77 = v142;
      v111(v101, v112);
      v145 = v50;
      v146 = v133;
      v147 = v132;
      v148 = v131;
      v149 = v130;
      v150 = v129;
      v151 = v51;
      v113 = v136;
      sub_1BCA73A0C(v109, (uint64_t)&v145, v77, v136);
      swift_bridgeObjectRelease();
      sub_1BC997208((uint64_t)v77, (uint64_t (*)(_QWORD))sub_1BCA7EFF8);
      v114 = v143;
      sub_1BCA8F568(v113, v143);
      v115 = (uint64_t)v125;
      if ((*((unsigned int (**)(uint64_t, uint64_t, char *))v124 + 6))(v114, 1, v125))
      {
        v103 = (uint64_t)v127;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v118 + 56))(v127, 1, 1, v123);
      }
      else
      {
        v102 = v114 + *(int *)(v115 + 24);
        v103 = (uint64_t)v127;
        sub_1BCA7EFEC(v102, (uint64_t)v127);
      }
      sub_1BC9AE330(v103, (uint64_t)v77, (uint64_t (*)(_QWORD))sub_1BCA7EFF8);
      v100 += v128;
      --v99;
    }
    while (v99);
    goto LABEL_21;
  }
LABEL_32:
  __break(1u);
  return result;
}

uint64_t sub_1BCA6DBBC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  void (*v23)(char *, char *, uint64_t);
  uint64_t v24;
  uint64_t v26;
  void (*v27)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(char *, uint64_t);
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42[8];
  uint64_t v43;
  _OWORD v44[8];
  uint64_t v45;
  _BYTE v46[144];

  v40 = a3;
  v41 = a4;
  v6 = sub_1BCAB4E54();
  v38 = *(_QWORD *)(v6 - 8);
  v39 = v6;
  MEMORY[0x1E0C80A78](v6);
  v37 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v36 - v9;
  sub_1BC9BD26C(0);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BC998AB0(0, (unint64_t *)&qword_1ED6C71E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAE5D0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v15);
  v17 = (char *)&v36 - v16;
  v18 = sub_1BCAB4BD8();
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v18);
  v21 = (char *)&v36 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BCA8F4D8(a2 + 16, (uint64_t)v46, &qword_1ED6C4890, (uint64_t)&type metadata for SignificantChangeEngine.Parameters.MeanShift);
  v22 = *(_QWORD *)(a1 + 16);
  if (!v22)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v19 + 56))(v17, 1, 1, v18);
    goto LABEL_6;
  }
  sub_1BC9964B8(a1+ ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80))+ *(_QWORD *)(v12 + 72) * (v22 - 1), (uint64_t)v14, (uint64_t (*)(_QWORD))sub_1BC9BD26C);
  v23 = *(void (**)(char *, char *, uint64_t))(v19 + 32);
  v23(v17, v14, v18);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v17, 0, 1, v18);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18) == 1)
  {
LABEL_6:
    sub_1BC9B3A38((uint64_t)v17, (unint64_t *)&qword_1ED6C71E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAE5D0]);
    v26 = type metadata accessor for SignificantChange(0);
    v27 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56);
    v28 = v41;
    v27(v41, 1, 1, v26);
    v29 = type metadata accessor for SignificantChangeEngine.Output(0);
    v27(v28 + *(int *)(v29 + 20), 1, 1, v26);
    sub_1BCA7EFEC(v40, v28 + *(int *)(v29 + 24));
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v28, 0, 1, v29);
  }
  v23(v21, v17, v18);
  sub_1BCA8F4D8((uint64_t)v46, (uint64_t)v44, &qword_1ED6C4890, (uint64_t)&type metadata for SignificantChangeEngine.Parameters.MeanShift);
  if (sub_1BCA8F494((uint64_t)v44) == 1)
  {
    (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
    v24 = type metadata accessor for SignificantChangeEngine.Output(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v41, 1, 1, v24);
  }
  else
  {
    sub_1BCAB4B9C();
    v30 = v37;
    v31 = sub_1BCAB4DDC();
    MEMORY[0x1E0C80A78](v31);
    *(&v36 - 2) = (uint64_t)v10;
    *(&v36 - 1) = (uint64_t)v30;
    swift_bridgeObjectRetain();
    sub_1BCA67604((uint64_t (*)(char *))sub_1BCA8F4A8, (uint64_t)(&v36 - 4), a1, (uint64_t (*)(_QWORD))sub_1BC9BD26C, (void (*)(BOOL, uint64_t, uint64_t))sub_1BC9BAE48);
    v33 = v32;
    v34 = v39;
    v35 = *(void (**)(char *, uint64_t))(v38 + 8);
    v35(v30, v39);
    v35(v10, v34);
    v42[6] = v44[6];
    v42[7] = v44[7];
    v43 = v45;
    v42[2] = v44[2];
    v42[3] = v44[3];
    v42[4] = v44[4];
    v42[5] = v44[5];
    v42[0] = v44[0];
    v42[1] = v44[1];
    sub_1BCA6DFFC(v33, v42, v40, v41);
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v21, v18);
  }
}

uint64_t sub_1BCA6DFE8@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return SignificantChangeEngine.analyzeForSignificantChanges(_:parameters:state:)(a1, a2, a3);
}

uint64_t sub_1BCA6DFFC@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t (*v77)(uint64_t, uint64_t);
  uint64_t v78;
  uint64_t v79;
  NSObject *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  int *v141;
  uint64_t v142;
  BOOL v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  int64_t v148;
  uint64_t v149;
  uint64_t v150;
  Class v151;
  uint64_t v152;
  char *v153;
  NSObject *v154;
  char *v155;
  char *v156;
  uint64_t v157;
  unsigned int (*v158)(_QWORD, _QWORD, _QWORD);
  void (*v159)(char *, char *, uint64_t);
  objc_class *v160;
  uint64_t v161;
  void (*v162)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  char *v168;
  uint64_t *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  os_log_t v173;
  void (*v174)(char *, uint64_t);
  void (*v175)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v176;
  uint64_t v177;
  uint64_t isa_low;
  char *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  int v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  int v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  NSObject *v194;
  uint64_t *v195;
  uint64_t v196;
  uint64_t v197;
  unint64_t v198;
  NSObject *v199;
  os_log_type_t v200;
  int v201;
  _BOOL4 v202;
  uint64_t v203;
  uint64_t v204;
  NSObject *v205;
  char *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  unint64_t v213;
  unint64_t v214;
  os_log_t v215;
  void (*v216)(_QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  char *v220;
  os_log_t v221;
  uint64_t v222;
  uint64_t v223;
  char *v224;
  double v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  char *v231;
  uint64_t v232;
  double v233;
  int v234;
  double v235;
  void (*v236)(char *, uint64_t);
  uint64_t v237;
  double v238;
  char *v239;
  char *v240;
  uint64_t v241;
  char *v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  void (*v251)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  int v257;
  uint64_t v258;
  uint64_t v259;
  char *v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  int v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  char *v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  char *v277;
  NSObject *v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  void (*v283)(char *, uint64_t);
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  void (*v287)(char *, uint64_t, uint64_t);
  uint64_t v288;
  unint64_t v289;
  NSObject *v290;
  os_log_type_t v291;
  int v292;
  _BOOL4 v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  char *v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  unint64_t v305;
  unint64_t v306;
  uint64_t v307;
  uint64_t v308;
  NSObject *v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  os_log_t v313;
  uint64_t v314;
  double v315;
  uint64_t v316;
  uint64_t v317;
  os_log_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  int v324;
  uint64_t v325;
  uint64_t v326;
  int v327;
  void (*v328)(char *, uint64_t, uint64_t);
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  void (*v335)(char *, uint64_t);
  uint64_t v336;
  uint64_t v337;
  void (*v338)(_QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v339;
  void (*v340)(char *, uint64_t, uint64_t);
  os_log_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  int *v347;
  void (*v348)(char *, uint64_t);
  uint64_t v349;
  uint64_t v350;
  void (*v351)(_QWORD, _QWORD, _QWORD, _QWORD);
  void (*v352)(char *, char *, uint64_t);
  uint64_t v353;
  void (*v354)(char *, uint64_t, uint64_t);
  char *v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  void (*v361)(char *, uint64_t);
  uint64_t v362;
  uint64_t v363;
  unint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  void (*v370)(char *, char *, uint64_t);
  uint64_t v371;
  void (*v372)(_QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v373;
  os_log_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  int v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  char *v387;
  uint64_t v388;
  uint64_t v389;
  void (*v390)(uint64_t, char *, uint64_t);
  char *v391;
  void (*v392)(char *, uint64_t);
  uint64_t v393;
  uint64_t v394;
  int v395;
  os_log_t v396;
  uint64_t v397;
  void (*v398)(char *, uint64_t, uint64_t);
  uint64_t v399;
  char *v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  char *v407;
  uint64_t v408;
  uint64_t v409;
  void (*v410)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v411;
  uint64_t v412;
  void (*isa)(char *, char *, uint64_t);
  uint64_t v414;
  uint64_t v415;
  char *v416;
  uint64_t v417;
  uint64_t v418;
  char *v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  char *v423;
  uint64_t v424;
  char *v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  char *v429;
  uint64_t v430;
  char *v431;
  uint64_t v432;
  uint64_t v433;
  char *v434;
  char *v435;
  char *v436;
  char *v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  char *v442;
  char *v443;
  char *v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  char *v449;
  char *v450;
  char *v451;
  char *v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  char *v463;
  uint64_t v464;
  char *v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  char *v469;
  char *v470;
  char *v471;
  char *v472;
  uint64_t v473;
  __int128 v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  char *v478;
  uint64_t v479;
  char *v480;
  uint64_t v481;
  os_log_t v482;
  uint64_t *v483;
  char *v484;
  uint64_t *v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  NSObject *v489;
  char *v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  Class v495;
  uint64_t v496;
  __int128 v497;
  __int128 v498;
  __int128 v499;
  __int128 v500;
  __int128 v501;
  __int128 v502;
  __int128 v503;
  __int128 v504;
  uint64_t v505;
  __int128 v506;
  _OWORD v507[2];
  __int128 v508;
  __int128 v509;
  __int128 v510;
  __int128 v511;
  __int128 v512;
  uint64_t v513;
  __int128 v514;
  _BYTE v515[25];
  _BYTE v516[16];
  _BYTE v517[16];
  _BYTE v518[16];
  _BYTE v519[16];
  uint64_t v520;
  char v521;
  double v522;
  char v523;
  double v524;
  char v525;
  double v526;
  char v527;

  v494 = a3;
  sub_1BCA8025C(0);
  MEMORY[0x1E0C80A78](v7);
  v448 = (uint64_t)&v412 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v468 = type metadata accessor for SignificantChange.Notification(0);
  v466 = *(_QWORD *)(v468 - 8);
  MEMORY[0x1E0C80A78](v468);
  v454 = (uint64_t)&v412 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BC9DBE2C(0);
  MEMORY[0x1E0C80A78](v10);
  v457 = (uint64_t)&v412 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v426 = (uint64_t)&v412 - v13;
  MEMORY[0x1E0C80A78](v14);
  v422 = (uint64_t)&v412 - v15;
  MEMORY[0x1E0C80A78](v16);
  v453 = (uint64_t)&v412 - v17;
  MEMORY[0x1E0C80A78](v18);
  v443 = (char *)&v412 - v19;
  sub_1BCA7EFBC(0);
  MEMORY[0x1E0C80A78](v20);
  v455 = (uint64_t)&v412 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v22);
  v414 = (uint64_t)&v412 - v23;
  MEMORY[0x1E0C80A78](v24);
  v441 = (uint64_t)&v412 - v25;
  v477 = type metadata accessor for SignificantChangeEngine.State(0);
  v473 = *(_QWORD *)(v477 - 8);
  MEMORY[0x1E0C80A78](v477);
  v431 = (char *)&v412 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v27);
  v444 = (char *)&v412 - v28;
  v493 = type metadata accessor for SignificantChange(0);
  v492 = *(_QWORD *)(v493 - 8);
  MEMORY[0x1E0C80A78](v493);
  v456 = (uint64_t)&v412 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v30);
  v442 = (char *)&v412 - v31;
  v460 = type metadata accessor for SignificantChange.Period(0);
  v428 = *(_QWORD *)(v460 - 8);
  MEMORY[0x1E0C80A78](v460);
  v429 = (char *)&v412 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v33);
  v450 = (char *)&v412 - v34;
  MEMORY[0x1E0C80A78](v35);
  v461 = (uint64_t)&v412 - v36;
  MEMORY[0x1E0C80A78](v37);
  v437 = (char *)&v412 - v38;
  v479 = type metadata accessor for SignificantChangeEngine.Changepoint(0);
  v467 = *(_QWORD *)(v479 - 8);
  MEMORY[0x1E0C80A78](v479);
  v433 = (uint64_t)&v412 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BCA7EFF8(0);
  MEMORY[0x1E0C80A78](v40);
  v420 = (uint64_t)&v412 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v42);
  v427 = (uint64_t)&v412 - v43;
  MEMORY[0x1E0C80A78](v44);
  v424 = (uint64_t)&v412 - v45;
  MEMORY[0x1E0C80A78](v46);
  v439 = (uint64_t)&v412 - v47;
  MEMORY[0x1E0C80A78](v48);
  v459 = (uint64_t)&v412 - v49;
  sub_1BCA7F3E0(0);
  MEMORY[0x1E0C80A78](v50);
  v415 = (uint64_t)&v412 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v52);
  v430 = (uint64_t)&v412 - v53;
  MEMORY[0x1E0C80A78](v54);
  v418 = (uint64_t)&v412 - v55;
  MEMORY[0x1E0C80A78](v56);
  v417 = (uint64_t)&v412 - v57;
  MEMORY[0x1E0C80A78](v58);
  v421 = (uint64_t)&v412 - v59;
  MEMORY[0x1E0C80A78](v60);
  v440 = (uint64_t)&v412 - v61;
  MEMORY[0x1E0C80A78](v62);
  v432 = (uint64_t)&v412 - v63;
  sub_1BCA7F46C(0);
  MEMORY[0x1E0C80A78](v64);
  v445 = (uint64_t)&v412 - ((v65 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v66);
  v423 = (char *)&v412 - v67;
  MEMORY[0x1E0C80A78](v68);
  v438 = (uint64_t)&v412 - v69;
  MEMORY[0x1E0C80A78](v70);
  v462 = (uint64_t)&v412 - v71;
  v476 = sub_1BCAB4E54();
  v475 = *(_QWORD *)(v476 - 8);
  MEMORY[0x1E0C80A78](v476);
  v469 = (char *)&v412 - ((v72 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v73);
  v472 = (char *)&v412 - v74;
  MEMORY[0x1E0C80A78](v75);
  v416 = (char *)&v412 - v76;
  v77 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
  sub_1BC998AB0(0, &qword_1ED6C3158, (uint64_t (*)(uint64_t))sub_1BCA8F4C4, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v78);
  *((_QWORD *)&v474 + 1) = (char *)&v412 - v79;
  sub_1BCA8F4C4(0);
  v482 = v80;
  *&v474 = v80[-1];
  MEMORY[0x1E0C80A78](v80);
  v419 = (char *)&v412 - ((v81 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v82);
  v452 = (char *)&v412 - v83;
  MEMORY[0x1E0C80A78](v84);
  v447 = (uint64_t)&v412 - v85;
  MEMORY[0x1E0C80A78](v86);
  v446 = (uint64_t)&v412 - v87;
  MEMORY[0x1E0C80A78](v88);
  v425 = (char *)&v412 - v89;
  MEMORY[0x1E0C80A78](v90);
  v470 = (char *)&v412 - v91;
  MEMORY[0x1E0C80A78](v92);
  v458 = (uint64_t)&v412 - v93;
  MEMORY[0x1E0C80A78](v94);
  v464 = (uint64_t)&v412 - v95;
  MEMORY[0x1E0C80A78](v96);
  v434 = (char *)&v412 - v97;
  MEMORY[0x1E0C80A78](v98);
  v481 = (uint64_t)&v412 - v99;
  sub_1BC998AB0(0, (unint64_t *)&qword_1ED6C71E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAE5D0], v77);
  MEMORY[0x1E0C80A78](v100);
  v480 = (char *)&v412 - ((v101 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v102);
  v485 = (uint64_t *)((char *)&v412 - v103);
  v104 = sub_1BCAB4BD8();
  v489 = *(NSObject **)(v104 - 8);
  MEMORY[0x1E0C80A78](v104);
  v451 = (char *)&v412 - ((v105 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v106);
  v465 = (char *)&v412 - v107;
  MEMORY[0x1E0C80A78](v108);
  v471 = (char *)&v412 - v109;
  MEMORY[0x1E0C80A78](v110);
  v449 = (char *)&v412 - v111;
  MEMORY[0x1E0C80A78](v112);
  v463 = (char *)&v412 - v113;
  MEMORY[0x1E0C80A78](v114);
  v436 = (char *)&v412 - v115;
  MEMORY[0x1E0C80A78](v116);
  v478 = (char *)&v412 - v117;
  MEMORY[0x1E0C80A78](v118);
  v484 = (char *)&v412 - v119;
  sub_1BC9BD26C(0);
  v121 = v120;
  MEMORY[0x1E0C80A78](v120);
  v490 = (char *)&v412 - ((v122 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v123);
  v435 = (char *)&v412 - v124;
  MEMORY[0x1E0C80A78](v125);
  v483 = (uint64_t *)((char *)&v412 - v126);
  MEMORY[0x1E0C80A78](v127);
  v129 = (char *)&v412 - v128;
  MEMORY[0x1E0C80A78](v130);
  v133 = (char *)&v412 - v132;
  v134 = a2[7];
  v511 = a2[6];
  v512 = v134;
  v513 = *((_QWORD *)a2 + 16);
  v135 = a2[3];
  v507[1] = a2[2];
  v508 = v135;
  v136 = a2[5];
  v509 = a2[4];
  v510 = v136;
  v137 = a2[1];
  v506 = *a2;
  v507[0] = v137;
  v138 = *(_QWORD *)(a1 + 16);
  v491 = a4;
  v487 = v104;
  v488 = a1;
  v486 = v138;
  v495 = (Class)v131;
  if (v138)
  {
    v139 = a1 + ((*(unsigned __int8 *)(v131 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v131 + 80));
    a4 = *(_QWORD *)(v131 + 72);
    swift_bridgeObjectRetain();
    v140 = 0;
    v141 = (int *)sub_1BC9BD26C;
    do
    {
      sub_1BC9964B8(v139, (uint64_t)v133, (uint64_t (*)(_QWORD))sub_1BC9BD26C);
      v142 = (v133[*(int *)(v121 + 48) + 8] & 1) == 0;
      v143 = __OFADD__(v140, v142);
      v140 += v142;
      if (v143)
      {
        __break(1u);
        goto LABEL_47;
      }
      sub_1BC997208((uint64_t)v133, (uint64_t (*)(_QWORD))sub_1BC9BD26C);
      v139 += a4;
      --v138;
    }
    while (v138);
    a1 = v488;
    swift_bridgeObjectRelease();
    a4 = v491;
    if (v140 >= *((uint64_t *)&v511 + 1))
      goto LABEL_9;
    goto LABEL_25;
  }
  if (*((uint64_t *)&v511 + 1) > 0)
  {
LABEL_25:
    v162 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v492 + 56);
    goto LABEL_26;
  }
  v140 = 0;
LABEL_9:
  v144 = MEMORY[0x1E0DEB418];
  sub_1BCA8F4D8((uint64_t)&v512, (uint64_t)v519, (unint64_t *)&qword_1ED6C6190, MEMORY[0x1E0DEB418]);
  sub_1BCA8F4D8((uint64_t)v519, (uint64_t)&v520, (unint64_t *)&qword_1ED6C6190, v144);
  if ((v521 & 1) == 0)
  {
    isa = (void (*)(char *, char *, uint64_t))sub_1BCA70A4C(v520, a1);
    v148 = v147 >> 1;
    if (v146 == v147 >> 1)
    {
      swift_bridgeObjectRetain();
LABEL_16:
      swift_unknownObjectRelease();
      goto LABEL_22;
    }
    v149 = v145;
    v150 = v146;
    swift_bridgeObjectRetain();
    while (v150 < v148)
    {
      sub_1BC9964B8(v149 + *((_QWORD *)v495 + 9) * v150, (uint64_t)v129, (uint64_t (*)(_QWORD))sub_1BC9BD26C);
      if ((v129[*(int *)(v121 + 48) + 8] & 1) == 0)
      {
        sub_1BC997208((uint64_t)v129, (uint64_t (*)(_QWORD))sub_1BC9BD26C);
        swift_unknownObjectRelease();
        a4 = v491;
        a1 = v488;
        goto LABEL_18;
      }
      ++v150;
      sub_1BC997208((uint64_t)v129, (uint64_t (*)(_QWORD))sub_1BC9BD26C);
      if (v148 == v150)
        goto LABEL_16;
    }
    __break(1u);
    goto LABEL_94;
  }
LABEL_18:
  if (!v486)
  {
    v155 = (char *)v485;
    ((void (*)(uint64_t *, uint64_t, uint64_t, uint64_t))v489[7].isa)(v485, 1, 1, v487);
    goto LABEL_24;
  }
  v151 = v495;
  v152 = a1 + ((*((unsigned __int8 *)v495 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v495 + 80));
  v153 = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD))v483;
  sub_1BC9964B8(v152, (uint64_t)v483, (uint64_t (*)(_QWORD))sub_1BC9BD26C);
  v154 = v489;
  v155 = (char *)v485;
  v156 = (char *)v153;
  v157 = v487;
  isa = (void (*)(char *, char *, uint64_t))v489[4].isa;
  isa((char *)v485, v156, v487);
  v483 = (uint64_t *)v154[7].isa;
  ((void (*)(char *, _QWORD, uint64_t, uint64_t))v483)(v155, 0, 1, v157);
  v158 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))v154[6].isa;
  if (v158(v155, 1, v157) == 1)
  {
LABEL_24:
    sub_1BC9B3A38((uint64_t)v155, (unint64_t *)&qword_1ED6C71E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAE5D0]);
    goto LABEL_25;
  }
  v159 = isa;
  isa(v484, v155, v157);
  v160 = (objc_class *)*((_QWORD *)v151 + 9);
  v412 = v152;
  sub_1BC9964B8(v152 + (_QWORD)v160 * (v486 - 1), (uint64_t)v133, (uint64_t (*)(_QWORD))sub_1BC9BD26C);
  v161 = (uint64_t)v480;
  v159(v480, v133, v157);
  ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v483)(v161, 0, 1, v157);
  if (v158(v161, 1, v157) != 1)
  {
    v495 = v160;
    v168 = v478;
    v159(v478, (char *)v161, v157);
    v169 = (uint64_t *)sub_1BCA70AB0(v488, v511);
    MEMORY[0x1E0C80A78](v169);
    v170 = v494;
    *(&v412 - 2) = (uint64_t)&v506;
    *(&v412 - 1) = v170;
    swift_bridgeObjectRetain();
    sub_1BCA67604((uint64_t (*)(char *))sub_1BCA8F530, (uint64_t)(&v412 - 4), (uint64_t)v169, (uint64_t (*)(_QWORD))sub_1BC9BD1B8, (void (*)(BOOL, uint64_t, uint64_t))sub_1BC9BAE74);
    LOBYTE(v497) = BYTE9(v510);
    v171 = *((_QWORD *)&v474 + 1);
    sub_1BCA71AD4(v172, (unsigned __int8 *)&v497, *((uint64_t *)&v474 + 1));
    swift_bridgeObjectRelease();
    v173 = v482;
    if ((*(unsigned int (**)(uint64_t, uint64_t, os_log_t))(v474 + 48))(v171, 1, v482) == 1)
    {
      swift_bridgeObjectRelease();
      v174 = (void (*)(char *, uint64_t))v489[1].isa;
      v174(v168, v157);
      v174(v484, v157);
      sub_1BC9B3A38(v171, &qword_1ED6C3158, (uint64_t (*)(uint64_t))sub_1BCA8F4C4);
      v175 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v492 + 56);
      v176 = v170;
      a4 = v491;
      v177 = v493;
      v175(v491, 1, 1, v493);
      v164 = type metadata accessor for SignificantChangeEngine.Output(0);
      v175(a4 + *(int *)(v164 + 20), 1, 1, v177);
      v165 = a4 + *(int *)(v164 + 24);
      v166 = v176;
      goto LABEL_27;
    }
    v485 = v169;
    isa_low = SLODWORD(v173[6].isa);
    v179 = (char *)(v481 + isa_low);
    v180 = v171 + isa_low;
    ((void (*)(void))isa)();
    sub_1BC9AE330(v180, (uint64_t)v179, type metadata accessor for SignificantChangeEngine.Changepoint);
    v181 = v459;
    sub_1BCA7EFEC(v170, v459);
    v182 = v477;
    v480 = *(char **)(v473 + 48);
    v183 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v480)(v181, 1, v477);
    a4 = v491;
    if (v183 == 1)
    {
      sub_1BC997208(v181, (uint64_t (*)(_QWORD))sub_1BCA7EFF8);
      v184 = v475;
    }
    else
    {
      v185 = v181 + *(int *)(v182 + 20);
      v186 = v432;
      sub_1BCA7F3D4(v185, v432);
      sub_1BC997208(v181, type metadata accessor for SignificantChangeEngine.State);
      v187 = type metadata accessor for SignificantChangeEngine.State.MeanShift(0);
      v188 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v187 - 8) + 48))(v186, 1, v187);
      v184 = v475;
      if (v188 != 1)
      {
        v259 = v186 + *(int *)(v187 + 24);
        v189 = v462;
        sub_1BC9AFC58(v259, v462);
        sub_1BC997208(v186, type metadata accessor for SignificantChangeEngine.State.MeanShift);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v184 + 48))(v189, 1, v476) != 1)
        {
          v260 = v416;
          v261 = v476;
          (*(void (**)(char *, uint64_t, uint64_t))(v184 + 32))(v416, v189, v476);
          *(_QWORD *)&v497 = 0;
          *((_QWORD *)&v497 + 1) = 0xE000000000000000;
          sub_1BCAB64C8();
          swift_bridgeObjectRelease();
          *(_QWORD *)&v497 = 0x676E697472617453;
          *((_QWORD *)&v497 + 1) = 0xEF203A6D6F726620;
          sub_1BC996948(&qword_1ED6C70C8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], MEMORY[0x1E0CB08F0]);
          sub_1BCAB6798();
          sub_1BCAB5F70();
          swift_bridgeObjectRelease();
          v474 = v497;
          (*(void (**)(char *, uint64_t))(v184 + 8))(v260, v261);
LABEL_37:
          v141 = (int *)v479;
          v514 = v506;
          *(_OWORD *)v515 = v507[0];
          *(_OWORD *)&v515[9] = *(_OWORD *)((char *)v507 + 9);
          v190 = MEMORY[0x1E0DEB070];
          sub_1BCA8F4D8((uint64_t)&v514, (uint64_t)v518, &qword_1ED6C4600, MEMORY[0x1E0DEB070]);
          sub_1BCA8F4D8((uint64_t)v518, (uint64_t)&v522, &qword_1ED6C4600, v190);
          v483 = (uint64_t *)v179;
          if ((v523 & 1) == 0 && v522 < *(double *)&v179[v141[5]]
            || (sub_1BCA8F4D8((uint64_t)v515, (uint64_t)v517, &qword_1ED6C4600, v190),
                sub_1BCA8F4D8((uint64_t)v517, (uint64_t)&v524, &qword_1ED6C4600, v190),
                (v525 & 1) == 0)
            && *(double *)&v179[v141[9]] < v524
            || (sub_1BCA8F4D8((uint64_t)&v515[16], (uint64_t)v516, &qword_1ED6C4600, v190),
                sub_1BCA8F4D8((uint64_t)v516, (uint64_t)&v526, &qword_1ED6C4600, v190),
                (v527 & 1) == 0)
            && fabs(*(double *)&v179[v141[7]]) < v526)
          {
            swift_bridgeObjectRelease();
            if (qword_1ED6C4CD8 == -1)
            {
LABEL_44:
              v191 = sub_1BCAB5514();
              __swift_project_value_buffer(v191, (uint64_t)qword_1ED6C4CC0);
              v192 = (uint64_t)v434;
              v193 = (uint64_t)&v434[SLODWORD(v482[6].isa)];
              v194 = v489;
              v195 = (uint64_t *)v489[2].isa;
              ((void (*)(char *, uint64_t, uint64_t))v195)(v434, v481, v487);
              sub_1BC9964B8((uint64_t)v483, v193, type metadata accessor for SignificantChangeEngine.Changepoint);
              v196 = v464;
              sub_1BC9964B8(v192, v464, (uint64_t (*)(_QWORD))sub_1BCA8F4C4);
              v197 = v458;
              sub_1BC9AE330(v192, v458, (uint64_t (*)(_QWORD))sub_1BCA8F4C4);
              v198 = *((_QWORD *)&v474 + 1);
              swift_bridgeObjectRetain();
              v199 = sub_1BCAB54FC();
              v200 = sub_1BCAB61BC();
              v201 = v200;
              v202 = os_log_type_enabled(v199, v200);
              v485 = v195;
              if (v202)
              {
                v203 = swift_slowAlloc();
                v483 = (uint64_t *)swift_slowAlloc();
                *(_QWORD *)&v497 = v483;
                *(_DWORD *)v203 = 136315394;
                LODWORD(v471) = v201;
                swift_bridgeObjectRetain();
                v496 = sub_1BC99BD4C(v474, v198, (uint64_t *)&v497);
                *(_QWORD *)&v474 = &v497;
                sub_1BCAB63A8();
                swift_bridgeObjectRelease_n();
                *(_WORD *)(v203 + 12) = 2080;
                *((_QWORD *)&v474 + 1) = v203 + 14;
                v204 = SLODWORD(v482[6].isa);
                v205 = v194;
                v206 = v470;
                v207 = (uint64_t)&v470[v204];
                v208 = v464 + v204;
                v482 = v199;
                v209 = v487;
                ((void (*)(char *))v195)(v470);
                sub_1BC9964B8(v208, v207, type metadata accessor for SignificantChangeEngine.Changepoint);
                v210 = v207;
                v211 = v433;
                sub_1BC9AE330(v210, v433, type metadata accessor for SignificantChangeEngine.Changepoint);
                ((void (*)(char *, uint64_t))v205[1].isa)(v206, v209);
                v212 = SignificantChangeEngine.Changepoint.description.getter();
                v214 = v213;
                sub_1BC997208(v211, type metadata accessor for SignificantChangeEngine.Changepoint);
                v496 = sub_1BC99BD4C(v212, v214, (uint64_t *)&v497);
                sub_1BCAB63A8();
                swift_bridgeObjectRelease();
                sub_1BC997208(v458, (uint64_t (*)(_QWORD))sub_1BCA8F4C4);
                sub_1BC997208(v464, (uint64_t (*)(_QWORD))sub_1BCA8F4C4);
                v215 = v482;
                _os_log_impl(&dword_1BC989000, v482, (os_log_type_t)v471, "[%s] No significant mean shift; maximum changepoint is: %s",
                  (uint8_t *)v203,
                  0x16u);
                v216 = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD))v483;
                swift_arrayDestroy();
                MEMORY[0x1BCCFBF5C](v216, -1, -1);
                MEMORY[0x1BCCFBF5C](v203, -1, -1);

              }
              else
              {
                swift_bridgeObjectRelease_n();
                sub_1BC997208(v197, (uint64_t (*)(_QWORD))sub_1BCA8F4C4);
                sub_1BC997208(v196, (uint64_t (*)(_QWORD))sub_1BCA8F4C4);

              }
              v224 = v490;
              swift_bridgeObjectRetain();
              v225 = 0.0;
              v226 = (uint64_t)v435;
              v227 = v486;
              v228 = v412;
              v229 = v487;
              do
              {
                sub_1BC9964B8(v228, v226, (uint64_t (*)(_QWORD))sub_1BC9BD26C);
                v230 = *(int *)(v121 + 48);
                v231 = &v224[v230];
                v232 = v226 + v230;
                ((void (*)(char *, uint64_t, uint64_t))v485)(v490, v226, v229);
                v233 = *(double *)v232;
                v234 = *(unsigned __int8 *)(v232 + 8);
                v224 = v490;
                *(double *)v231 = v233;
                v231[8] = v234;
                v235 = v233;
                if (v234)
                  v235 = -0.0;
                v225 = v225 + v235;
                v236 = (void (*)(char *, uint64_t))v489[1].isa;
                v236(v224, v229);
                sub_1BC997208(v226, (uint64_t (*)(_QWORD))sub_1BC9BD26C);
                v228 += (uint64_t)v495;
                --v227;
              }
              while (v227);
              v237 = v488;
              swift_bridgeObjectRelease();
              v238 = v225 / (double)v140;
              v239 = v484;
              sub_1BCAB4BC0();
              v240 = v478;
              sub_1BCAB4B9C();
              v241 = (uint64_t)v436;
              sub_1BCAB4BA8();
              v242 = v437;
              v243 = v487;
              ((void (*)(char *, uint64_t, uint64_t))v485)(v437, v241, v487);
              sub_1BCA72894(v237, v241);
              v244 = v460;
              *(double *)&v242[*(int *)(v460 + 20)] = v238;
              *(_QWORD *)&v242[*(int *)(v244 + 24)] = v245;
              v242[*(int *)(v244 + 28)] = 2;
              v246 = (uint64_t)v242;
              v247 = v461;
              sub_1BC9AE330(v246, v461, type metadata accessor for SignificantChange.Period);
              v236((char *)v241, v243);
              sub_1BC997208(v481, (uint64_t (*)(_QWORD))sub_1BCA8F4C4);
              v236(v239, v243);
              v248 = v493;
              v249 = (uint64_t)v442;
              (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v466 + 56))(&v442[*(int *)(v493 + 24)], 1, 1, v468);
              sub_1BC9AE330(v247, v249, type metadata accessor for SignificantChange.Period);
              *(_QWORD *)(v249 + *(int *)(v248 + 20)) = MEMORY[0x1E0DEE9D8];
              isa(v463, v240, v243);
              v250 = v441;
              sub_1BC9964B8(v249, v441, type metadata accessor for SignificantChange);
              v251 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v492 + 56);
              v251(v250, 0, 1, v248);
              v252 = (uint64_t)v443;
              (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v467 + 56))(v443, 1, 1, v479);
              v253 = v439;
              sub_1BCA7EFEC(v494, v439);
              v254 = v477;
              if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v480)(v253, 1, v477) == 1)
              {
                sub_1BC997208(v253, (uint64_t (*)(_QWORD))sub_1BCA7EFF8);
                a4 = v491;
              }
              else
              {
                v255 = v421;
                sub_1BCA7F3D4(v253 + *(int *)(v254 + 20), v421);
                sub_1BC997208(v253, type metadata accessor for SignificantChangeEngine.State);
                v256 = type metadata accessor for SignificantChangeEngine.State.MeanShift(0);
                v257 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v256 - 8) + 48))(v255, 1, v256);
                a4 = v491;
                if (v257 != 1)
                {
                  v266 = v255 + *(int *)(v256 + 24);
                  v267 = v255;
                  v258 = v438;
                  sub_1BC9AFC58(v266, v438);
                  sub_1BC997208(v267, type metadata accessor for SignificantChangeEngine.State.MeanShift);
                  goto LABEL_65;
                }
                sub_1BC997208(v255, (uint64_t (*)(_QWORD))sub_1BCA7F3E0);
              }
              v258 = v438;
              (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v475 + 56))(v438, 1, 1, v476);
LABEL_65:
              v268 = v250;
              v269 = v440;
              sub_1BC9AE330(v268, v440, (uint64_t (*)(_QWORD))sub_1BCA7EFBC);
              v270 = type metadata accessor for SignificantChangeEngine.State.MeanShift(0);
              sub_1BC9AE330(v252, v269 + *(int *)(v270 + 20), (uint64_t (*)(_QWORD))sub_1BC9DBE2C);
              sub_1BC9AE330(v258, v269 + *(int *)(v270 + 24), (uint64_t (*)(_QWORD))sub_1BCA7F46C);
              (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v270 - 8) + 56))(v269, 0, 1, v270);
              v271 = (uint64_t)v444;
              v272 = &v444[*(int *)(v254 + 24)];
              v273 = type metadata accessor for SignificantChangeEngine.State.FrequencyShift(0);
              (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v273 - 8) + 56))(v272, 1, 1, v273);
              isa((char *)v271, v463, v487);
              sub_1BC9AE330(v269, v271 + *(int *)(v254 + 20), (uint64_t (*)(_QWORD))sub_1BCA7F3E0);
              sub_1BC9AE330(v249, a4, type metadata accessor for SignificantChange);
              v251(a4, 0, 1, v248);
              v164 = type metadata accessor for SignificantChangeEngine.Output(0);
              v251(a4 + *(int *)(v164 + 20), 1, 1, v248);
              v274 = a4 + *(int *)(v164 + 24);
              sub_1BC9AE330(v271, v274, type metadata accessor for SignificantChangeEngine.State);
              (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v473 + 56))(v274, 0, 1, v254);
              return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v164 - 8) + 56))(a4, 0, 1, v164);
            }
LABEL_94:
            swift_once();
            goto LABEL_44;
          }
LABEL_47:
          v217 = v424;
          sub_1BCA7EFEC(v494, v424);
          v218 = v477;
          if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v480)(v217, 1, v477) == 1)
          {
            sub_1BC997208(v217, (uint64_t (*)(_QWORD))sub_1BCA7EFF8);
            v219 = v481;
            v220 = v470;
            v221 = v482;
            v222 = v467;
            v223 = v422;
          }
          else
          {
            v262 = v217 + *(int *)(v218 + 20);
            v263 = v417;
            sub_1BCA7F3D4(v262, v417);
            sub_1BC997208(v217, type metadata accessor for SignificantChangeEngine.State);
            v264 = type metadata accessor for SignificantChangeEngine.State.MeanShift(0);
            v265 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v264 - 8) + 48))(v263, 1, v264);
            v219 = v481;
            v220 = v470;
            v221 = v482;
            v222 = v467;
            v223 = v422;
            if (v265 != 1)
            {
              sub_1BCA7F44C(v263 + *(int *)(v264 + 20), v422);
              sub_1BC997208(v263, type metadata accessor for SignificantChangeEngine.State.MeanShift);
LABEL_67:
              v503 = v511;
              v504 = v512;
              v505 = v513;
              v499 = v507[1];
              v500 = v508;
              v501 = v509;
              v502 = v510;
              v497 = v506;
              v498 = v507[0];
              v275 = v453;
              sub_1BCA72D80(v223, (uint64_t)v485, (uint64_t)&v497, v453);
              swift_bridgeObjectRelease();
              sub_1BC997208(v223, (uint64_t (*)(_QWORD))sub_1BC9DBE2C);
              v276 = (uint64_t)&v220[SLODWORD(v221[6].isa)];
              v277 = v220;
              v278 = v489;
              v279 = v219;
              v280 = v487;
              v495 = v489[2].isa;
              ((void (*)(char *, uint64_t, uint64_t))v495)(v277, v279, v487);
              sub_1BC9964B8((uint64_t)v483, v276, type metadata accessor for SignificantChangeEngine.Changepoint);
              v281 = v276;
              v282 = v426;
              sub_1BC9AE330(v281, v426, type metadata accessor for SignificantChangeEngine.Changepoint);
              v485 = *(uint64_t **)(v467 + 56);
              ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v485)(v282, 0, 1, v479);
              v503 = v511;
              v504 = v512;
              v505 = v513;
              v499 = v507[1];
              v500 = v508;
              v501 = v509;
              v502 = v510;
              v497 = v506;
              v498 = v507[0];
              LODWORD(v486) = sub_1BCA73330(v275, v282, (uint64_t)&v497);
              sub_1BC997208(v282, (uint64_t (*)(_QWORD))sub_1BC9DBE2C);
              v283 = (void (*)(char *, uint64_t))v278[1].isa;
              v283(v277, v280);
              if (qword_1ED6C4CD8 != -1)
                swift_once();
              v284 = sub_1BCAB5514();
              __swift_project_value_buffer(v284, (uint64_t)qword_1ED6C4CC0);
              v285 = (uint64_t)v425;
              v286 = (uint64_t)&v425[SLODWORD(v482[6].isa)];
              v287 = (void (*)(char *, uint64_t, uint64_t))v495;
              ((void (*)(char *, uint64_t, uint64_t))v495)(v425, v481, v280);
              sub_1BC9964B8((uint64_t)v483, v286, type metadata accessor for SignificantChangeEngine.Changepoint);
              v288 = v446;
              sub_1BC9964B8(v285, v446, (uint64_t (*)(_QWORD))sub_1BCA8F4C4);
              sub_1BC9AE330(v285, v447, (uint64_t (*)(_QWORD))sub_1BCA8F4C4);
              v289 = *((_QWORD *)&v474 + 1);
              swift_bridgeObjectRetain();
              v290 = sub_1BCAB54FC();
              v291 = sub_1BCAB61BC();
              v292 = v291;
              v489 = v290;
              v293 = os_log_type_enabled(v290, v291);
              v490 = (char *)v283;
              v294 = v280;
              if (v293)
              {
                v295 = v288;
                v296 = swift_slowAlloc();
                v467 = swift_slowAlloc();
                *(_QWORD *)&v497 = v467;
                *(_DWORD *)v296 = 136315394;
                LODWORD(v464) = v292;
                swift_bridgeObjectRetain();
                v496 = sub_1BC99BD4C(v474, v289, (uint64_t *)&v497);
                sub_1BCAB63A8();
                swift_bridgeObjectRelease_n();
                *(_WORD *)(v296 + 12) = 2080;
                *((_QWORD *)&v474 + 1) = v296 + 14;
                v297 = SLODWORD(v482[6].isa);
                v298 = v470;
                v299 = (uint64_t)&v470[v297];
                v300 = v295;
                v301 = v295 + v297;
                ((void (*)(char *, uint64_t, uint64_t))v495)(v470, v300, v294);
                sub_1BC9964B8(v301, v299, type metadata accessor for SignificantChangeEngine.Changepoint);
                v302 = v299;
                v303 = v433;
                sub_1BC9AE330(v302, v433, type metadata accessor for SignificantChangeEngine.Changepoint);
                ((void (*)(char *, uint64_t))v490)(v298, v294);
                v304 = SignificantChangeEngine.Changepoint.description.getter();
                v306 = v305;
                v307 = v481;
                sub_1BC997208(v303, type metadata accessor for SignificantChangeEngine.Changepoint);
                v496 = sub_1BC99BD4C(v304, v306, (uint64_t *)&v497);
                v283 = (void (*)(char *, uint64_t))v490;
                v308 = v294;
                sub_1BCAB63A8();
                v287 = (void (*)(char *, uint64_t, uint64_t))v495;
                swift_bridgeObjectRelease();
                sub_1BC997208(v447, (uint64_t (*)(_QWORD))sub_1BCA8F4C4);
                sub_1BC997208(v446, (uint64_t (*)(_QWORD))sub_1BCA8F4C4);
                v309 = v489;
                _os_log_impl(&dword_1BC989000, v489, (os_log_type_t)v464, "[%s] Significant Mean Shift Changepoint: %s", (uint8_t *)v296, 0x16u);
                v310 = v467;
                swift_arrayDestroy();
                MEMORY[0x1BCCFBF5C](v310, -1, -1);
                v311 = v296;
                v312 = v479;
                MEMORY[0x1BCCFBF5C](v311, -1, -1);

              }
              else
              {
                swift_bridgeObjectRelease_n();
                sub_1BC997208(v447, (uint64_t (*)(_QWORD))sub_1BCA8F4C4);
                sub_1BC997208(v288, (uint64_t (*)(_QWORD))sub_1BCA8F4C4);

                v298 = v470;
                v308 = v294;
                v312 = v479;
                v307 = v481;
              }
              v313 = v482;
              v314 = (uint64_t)&v298[SLODWORD(v482[6].isa)];
              v287(v298, v307, v308);
              sub_1BC9964B8((uint64_t)v483, v314, type metadata accessor for SignificantChangeEngine.Changepoint);
              v315 = *(double *)(v314 + *(int *)(v312 + 28));
              sub_1BC997208(v314, type metadata accessor for SignificantChangeEngine.Changepoint);
              v283(v298, v308);
              v316 = v427;
              sub_1BCA7EFEC(v494, v427);
              v317 = v477;
              v318 = v313;
              if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v480)(v316, 1, v477) == 1)
              {
                sub_1BC997208(v316, (uint64_t (*)(_QWORD))sub_1BCA7EFF8);
                v319 = v468;
                v320 = v448;
              }
              else
              {
                v321 = v316 + *(int *)(v317 + 20);
                v322 = v418;
                sub_1BCA7F3D4(v321, v418);
                sub_1BC997208(v316, type metadata accessor for SignificantChangeEngine.State);
                v323 = type metadata accessor for SignificantChangeEngine.State.MeanShift(0);
                v324 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v323 - 8) + 48))(v322, 1, v323);
                v319 = v468;
                if (v324 == 1)
                {
                  sub_1BC997208(v322, (uint64_t (*)(_QWORD))sub_1BCA7F3E0);
                  v320 = v448;
                }
                else
                {
                  v325 = v414;
                  sub_1BCA7EFB0(v322, v414);
                  sub_1BC997208(v322, type metadata accessor for SignificantChangeEngine.State.MeanShift);
                  v326 = v493;
                  v327 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v492 + 48))(v325, 1, v493);
                  v320 = v448;
                  if (v327 != 1)
                  {
                    sub_1BC9964B8(v325 + *(int *)(v326 + 24), v448, (uint64_t (*)(_QWORD))sub_1BCA8025C);
                    sub_1BC997208(v325, type metadata accessor for SignificantChange);
                    v328 = (void (*)(char *, uint64_t, uint64_t))v495;
LABEL_79:
                    LODWORD(v489) = v315 <= 0.0;
                    v329 = (uint64_t)&v298[SLODWORD(v318[6].isa)];
                    v330 = v487;
                    v328(v298, v481, v487);
                    sub_1BC9964B8((uint64_t)v483, v329, type metadata accessor for SignificantChangeEngine.Changepoint);
                    v331 = v475;
                    v332 = (uint64_t)v472;
                    v333 = v476;
                    *(_QWORD *)&v474 = *(_QWORD *)(v475 + 16);
                    ((void (*)(char *, uint64_t, uint64_t))v474)(v472, v329, v476);
                    sub_1BC997208(v329, type metadata accessor for SignificantChangeEngine.Changepoint);
                    LOBYTE(v497) = v315 <= 0.0;
                    v334 = v448;
                    sub_1BCA73544(v448, v486 & 1, v332, 1, v454);
                    (*(void (**)(uint64_t, uint64_t))(v331 + 8))(v332, v333);
                    sub_1BC997208(v334, (uint64_t (*)(_QWORD))sub_1BCA8025C);
                    v335 = (void (*)(char *, uint64_t))v490;
                    ((void (*)(char *, uint64_t))v490)(v298, v330);
                    sub_1BCAB4BC0();
                    v336 = (uint64_t)&v298[SLODWORD(v482[6].isa)];
                    v337 = v481;
                    ((void (*)(char *, uint64_t, uint64_t))v495)(v298, v481, v330);
                    v338 = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD))v483;
                    sub_1BC9964B8((uint64_t)v483, v336, type metadata accessor for SignificantChangeEngine.Changepoint);
                    sub_1BCAB4BC0();
                    v335(v298, v330);
                    v339 = (uint64_t)v449;
                    sub_1BCAB4BA8();
                    sub_1BC997208(v336, type metadata accessor for SignificantChangeEngine.Changepoint);
                    v340 = (void (*)(char *, uint64_t, uint64_t))v495;
                    ((void (*)(char *, uint64_t, uint64_t))v495)(v471, v339, v330);
                    v341 = v482;
                    v342 = (uint64_t)&v298[SLODWORD(v482[6].isa)];
                    v340(v298, v337, v330);
                    sub_1BC9964B8((uint64_t)v338, v342, type metadata accessor for SignificantChangeEngine.Changepoint);
                    v343 = *(_QWORD *)(v342 + *(int *)(v479 + 44) + 24);
                    sub_1BC997208(v342, type metadata accessor for SignificantChangeEngine.Changepoint);
                    sub_1BCA72894(v488, v339);
                    v345 = v344;
                    v346 = (uint64_t)v450;
                    isa(v450, v471, v330);
                    v347 = (int *)v460;
                    *(_QWORD *)(v346 + *(int *)(v460 + 20)) = v343;
                    *(_QWORD *)(v346 + v347[6]) = v345;
                    *(_BYTE *)(v346 + v347[7]) = 2;
                    v348 = (void (*)(char *, uint64_t))v490;
                    ((void (*)(char *, uint64_t))v490)(v298, v330);
                    *((_QWORD *)&v474 + 1) = &v298[SLODWORD(v341[6].isa)];
                    v349 = *((_QWORD *)&v474 + 1);
                    v350 = v481;
                    v340(v298, v481, v330);
                    v351 = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD))v483;
                    sub_1BC9964B8((uint64_t)v483, v349, type metadata accessor for SignificantChangeEngine.Changepoint);
                    sub_1BCAB4BC0();
                    v348(v298, v330);
                    sub_1BCAB4B9C();
                    v352 = (void (*)(char *, char *, uint64_t))v495;
                    sub_1BCAB4BA8();
                    sub_1BC997208(*((uint64_t *)&v474 + 1), type metadata accessor for SignificantChangeEngine.Changepoint);
                    v353 = (uint64_t)v465;
                    v352(v471, v465, v330);
                    v354 = (void (*)(char *, uint64_t, uint64_t))v352;
                    v355 = v298;
                    v356 = (uint64_t)&v298[SLODWORD(v482[6].isa)];
                    v354(v298, v350, v330);
                    sub_1BC9964B8((uint64_t)v351, v356, type metadata accessor for SignificantChangeEngine.Changepoint);
                    v357 = *(_QWORD *)(v356 + *(int *)(v479 + 48) + 24);
                    sub_1BC997208(v356, type metadata accessor for SignificantChangeEngine.Changepoint);
                    sub_1BCA72894(v488, v353);
                    v359 = v358;
                    v360 = (uint64_t)v429;
                    isa(v429, v471, v330);
                    *(_QWORD *)(v360 + v347[5]) = v357;
                    *(_QWORD *)(v360 + v347[6]) = v359;
                    *(_BYTE *)(v360 + v347[7]) = (_BYTE)v489;
                    v361 = (void (*)(char *, uint64_t))v490;
                    ((void (*)(char *, uint64_t))v490)(v355, v330);
                    v362 = (uint64_t)v450;
                    v363 = v461;
                    sub_1BC9964B8((uint64_t)v450, v461, type metadata accessor for SignificantChange.Period);
                    sub_1BCA8F54C(0);
                    v364 = (*(unsigned __int8 *)(v428 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v428 + 80);
                    v365 = swift_allocObject();
                    *(_OWORD *)(v365 + 16) = xmmword_1BCABE680;
                    sub_1BC9AE330(v360, v365 + v364, type metadata accessor for SignificantChange.Period);
                    v361(v465, v330);
                    sub_1BC997208(v362, type metadata accessor for SignificantChange.Period);
                    v361(v449, v330);
                    sub_1BC997208(v453, (uint64_t (*)(_QWORD))sub_1BC9DBE2C);
                    v361(v484, v330);
                    v366 = v493;
                    v367 = v456;
                    v368 = v456 + *(int *)(v493 + 24);
                    sub_1BC9AE330(v454, v368, type metadata accessor for SignificantChange.Notification);
                    v369 = v368;
                    v370 = isa;
                    v371 = v481;
                    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v466 + 56))(v369, 0, 1, v468);
                    sub_1BC9AE330(v363, v367, type metadata accessor for SignificantChange.Period);
                    *(_QWORD *)(v367 + *(int *)(v366 + 20)) = v365;
                    v372 = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD))v483;
                    v370(v451, v478, v330);
                    v373 = v367;
                    v374 = v482;
                    v375 = v455;
                    sub_1BC9964B8(v373, v455, type metadata accessor for SignificantChange);
                    v492 = *(_QWORD *)(v492 + 56);
                    ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v492)(v375, 0, 1, v366);
                    v376 = (uint64_t)&v452[SLODWORD(v374[6].isa)];
                    ((void (*)(void))v495)();
                    sub_1BC9964B8((uint64_t)v372, v376, type metadata accessor for SignificantChangeEngine.Changepoint);
                    v377 = v376;
                    v378 = v457;
                    sub_1BC9AE330(v377, v457, type metadata accessor for SignificantChangeEngine.Changepoint);
                    ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v485)(v378, 0, 1, v479);
                    if ((v486 & 1) == 0)
                    {
                      v387 = v470;
                      v388 = (uint64_t)&v470[SLODWORD(v374[6].isa)];
                      v370(v470, (char *)v371, v330);
                      v389 = (uint64_t)v372;
                      v390 = (void (*)(uint64_t, char *, uint64_t))v370;
                      sub_1BC9AE330(v389, v388, type metadata accessor for SignificantChangeEngine.Changepoint);
                      v383 = (uint64_t)v423;
                      v382 = v476;
                      ((void (*)(char *, uint64_t, uint64_t))v474)(v423, v388, v476);
                      sub_1BC997208(v388, type metadata accessor for SignificantChangeEngine.Changepoint);
                      v391 = v387;
                      v392 = (void (*)(char *, uint64_t))v490;
                      ((void (*)(char *, uint64_t))v490)(v391, v330);
                      v384 = v475;
LABEL_92:
                      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v384 + 56))(v383, 0, 1, v382);
                      v403 = v430;
                      sub_1BC9AE330(v455, v430, (uint64_t (*)(_QWORD))sub_1BCA7EFBC);
                      v404 = type metadata accessor for SignificantChangeEngine.State.MeanShift(0);
                      sub_1BC9AE330(v457, v403 + *(int *)(v404 + 20), (uint64_t (*)(_QWORD))sub_1BC9DBE2C);
                      sub_1BC9AE330(v383, v403 + *(int *)(v404 + 24), (uint64_t (*)(_QWORD))sub_1BCA7F46C);
                      v392(v452, v330);
                      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v404 - 8) + 56))(v403, 0, 1, v404);
                      v405 = v477;
                      v406 = (uint64_t)v431;
                      v407 = &v431[*(int *)(v477 + 24)];
                      v408 = type metadata accessor for SignificantChangeEngine.State.FrequencyShift(0);
                      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v408 - 8) + 56))(v407, 1, 1, v408);
                      v390(v406, v451, v330);
                      sub_1BC9AE330(v403, v406 + *(int *)(v405 + 20), (uint64_t (*)(_QWORD))sub_1BCA7F3E0);
                      sub_1BC9AE330(v456, a4, type metadata accessor for SignificantChange);
                      v409 = v493;
                      v410 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v492;
                      ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v492)(a4, 0, 1, v493);
                      v164 = type metadata accessor for SignificantChangeEngine.Output(0);
                      v410(a4 + *(int *)(v164 + 20), 1, 1, v409);
                      v411 = a4 + *(int *)(v164 + 24);
                      sub_1BC9AE330(v406, v411, type metadata accessor for SignificantChangeEngine.State);
                      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v473 + 56))(v411, 0, 1, v405);
                      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v164 - 8) + 56))(a4, 0, 1, v164);
                    }
                    v379 = v420;
                    sub_1BCA7EFEC(v494, v420);
                    v380 = v477;
                    v381 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v480)(v379, 1, v477);
                    v382 = v476;
                    v383 = (uint64_t)v423;
                    if (v381 == 1)
                    {
                      sub_1BC997208(v379, (uint64_t (*)(_QWORD))sub_1BCA7EFF8);
                      v384 = v475;
                      v385 = v445;
                      v386 = (uint64_t)v419;
                    }
                    else
                    {
                      v393 = v415;
                      sub_1BCA7F3D4(v379 + *(int *)(v380 + 20), v415);
                      sub_1BC997208(v379, type metadata accessor for SignificantChangeEngine.State);
                      v394 = type metadata accessor for SignificantChangeEngine.State.MeanShift(0);
                      v395 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v394 - 8) + 48))(v393, 1, v394);
                      v384 = v475;
                      v385 = v445;
                      v386 = (uint64_t)v419;
                      if (v395 != 1)
                      {
                        sub_1BC9AFC58(v393 + *(int *)(v394 + 24), v445);
                        sub_1BC997208(v393, type metadata accessor for SignificantChangeEngine.State.MeanShift);
                        goto LABEL_88;
                      }
                      sub_1BC997208(v393, (uint64_t (*)(_QWORD))sub_1BCA7F3E0);
                    }
                    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v384 + 56))(v385, 1, 1, v382);
LABEL_88:
                    v396 = v482;
                    v397 = v386 + SLODWORD(v482[6].isa);
                    v330 = v487;
                    v398 = (void (*)(char *, uint64_t, uint64_t))isa;
                    ((void (*)(uint64_t, uint64_t))isa)(v386, v481);
                    sub_1BC9AE330((uint64_t)v483, v397, type metadata accessor for SignificantChangeEngine.Changepoint);
                    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v384 + 48))(v445, 1, v382) == 1)
                    {
                      v399 = SLODWORD(v396[6].isa);
                      v400 = v470;
                      v401 = (uint64_t)&v470[v399];
                      v398(v470, v386, v330);
                      sub_1BC9AE330(v397, v401, type metadata accessor for SignificantChangeEngine.Changepoint);
                      ((void (*)(uint64_t, uint64_t, uint64_t))v474)(v383, v401, v476);
                      v402 = v401;
                      v384 = v475;
                      v382 = v476;
                      sub_1BC997208(v402, type metadata accessor for SignificantChangeEngine.Changepoint);
                      v392 = (void (*)(char *, uint64_t))v490;
                      ((void (*)(char *, uint64_t))v490)(v400, v330);
                      sub_1BC997208(v445, (uint64_t (*)(_QWORD))sub_1BCA7F46C);
                    }
                    else
                    {
                      sub_1BC997208(v386, (uint64_t (*)(_QWORD))sub_1BCA8F4C4);
                      (*(void (**)(uint64_t, uint64_t, uint64_t))(v384 + 32))(v383, v445, v382);
                      v392 = (void (*)(char *, uint64_t))v490;
                    }
                    v390 = (void (*)(uint64_t, char *, uint64_t))v398;
                    goto LABEL_92;
                  }
                  sub_1BC997208(v325, (uint64_t (*)(_QWORD))sub_1BCA7EFBC);
                }
              }
              v328 = (void (*)(char *, uint64_t, uint64_t))v495;
              (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v466 + 56))(v320, 1, 1, v319);
              goto LABEL_79;
            }
            sub_1BC997208(v263, (uint64_t (*)(_QWORD))sub_1BCA7F3E0);
          }
          (*(void (**)(uint64_t, uint64_t, uint64_t, int *))(v222 + 56))(v223, 1, 1, v141);
          goto LABEL_67;
        }
LABEL_36:
        sub_1BC997208(v189, (uint64_t (*)(_QWORD))sub_1BCA7F46C);
        *(_QWORD *)&v474 = 0xD000000000000019;
        *((_QWORD *)&v474 + 1) = 0x80000001BCAD3270;
        goto LABEL_37;
      }
      sub_1BC997208(v186, (uint64_t (*)(_QWORD))sub_1BCA7F3E0);
    }
    v189 = v462;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v184 + 56))(v462, 1, 1, v476);
    goto LABEL_36;
  }
  ((void (*)(char *, uint64_t))v489[1].isa)(v484, v157);
  sub_1BC9B3A38(v161, (unint64_t *)&qword_1ED6C71E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAE5D0]);
LABEL_22:
  v162 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v492 + 56);
  a4 = v491;
LABEL_26:
  v163 = v493;
  v162(a4, 1, 1, v493);
  v164 = type metadata accessor for SignificantChangeEngine.Output(0);
  v162(a4 + *(int *)(v164 + 20), 1, 1, v163);
  v165 = a4 + *(int *)(v164 + 24);
  v166 = v494;
LABEL_27:
  sub_1BCA7EFEC(v166, v165);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v164 - 8) + 56))(a4, 0, 1, v164);
}

uint64_t sub_1BCA70A4C(uint64_t result, uint64_t a2)
{
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    sub_1BC9BD26C(0);
    return a2;
  }
  return result;
}

unint64_t sub_1BCA70AB0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  double v27;
  double v28;
  uint64_t v29;
  unint64_t v30;
  double v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  double v37;
  double v38;
  uint64_t v39;
  uint64_t v40;
  double v41;
  double v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(char *, uint64_t, uint64_t);
  double v49;
  int v50;
  double v51;
  void (*v52)(_QWORD, uint64_t);
  uint64_t v53;
  uint64_t v54;
  double v55;
  double v56;
  uint64_t v57;
  uint64_t v58;
  void (*v59)(_QWORD, uint64_t);
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  double v64;
  int v65;
  double v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  double v70;
  int v71;
  double v72;
  double v73;
  unint64_t v74;
  double v75;
  void (*v76)(uint64_t);
  double v77;
  double v78;
  double v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  double v87;
  void (*v88)(uint64_t);
  char v89;
  uint64_t v90;
  uint64_t v91;
  void (*v92)(void);
  char *v93;
  void (*v94)(char *, uint64_t, uint64_t);
  void (*v95)(char *, uint64_t);
  char *v96;
  char *v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  double v104;
  double v105;
  double v106;
  uint64_t v108;
  double v109;
  char *v110;
  char *v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  double v119;
  char *v120;
  char *v121;
  double v122;
  double v123;
  double v124;
  double v125;
  void (*v126)(char *, uint64_t);
  uint64_t v127;
  void (*v128)(char *, uint64_t, uint64_t);
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  double v132;
  double v133;
  double v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  double v140[5];
  _QWORD v141[5];
  _QWORD v142[5];

  v118 = a2;
  sub_1BC9BD1B8(0);
  v117 = v3;
  v116 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v130 = (uint64_t)&v108 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v115 = sub_1BCAB4E54();
  v114 = *(_QWORD *)(v115 - 8);
  MEMORY[0x1E0C80A78](v115);
  v113 = (char *)&v108 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BC9DBE2C(0);
  MEMORY[0x1E0C80A78](v6);
  v112 = (uint64_t)&v108 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BC9BD26C(0);
  v9 = v8;
  MEMORY[0x1E0C80A78](v8);
  v111 = (char *)&v108 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v110 = (char *)&v108 - v12;
  MEMORY[0x1E0C80A78](v13);
  v121 = (char *)&v108 - v14;
  MEMORY[0x1E0C80A78](v15);
  v120 = (char *)&v108 - v16;
  MEMORY[0x1E0C80A78](v17);
  v131 = (uint64_t)&v108 - v18;
  MEMORY[0x1E0C80A78](v19);
  MEMORY[0x1E0C80A78](v20);
  MEMORY[0x1E0C80A78](v21);
  MEMORY[0x1E0C80A78](v22);
  MEMORY[0x1E0C80A78]((char *)&v108 - v23);
  v25 = (char *)&v108 - v24;
  MEMORY[0x1E0C80A78](v26);
  v33 = (char *)&v108 - v32;
  v34 = *(_QWORD *)(a1 + 16);
  if (!v34)
    return MEMORY[0x1E0DEE9D8];
  v133 = v27;
  v134 = v31;
  v132 = v28;
  v135 = v30;
  v35 = a1 + ((*(unsigned __int8 *)(v29 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80));
  v36 = *(_QWORD *)(v29 + 72);
  swift_bridgeObjectRetain();
  v137 = v35;
  v136 = v34;
  v37 = 0.0;
  do
  {
    sub_1BC9964B8(v35, (uint64_t)v33, (uint64_t (*)(_QWORD))sub_1BC9BD26C);
    if (v33[*(int *)(v9 + 48) + 8])
      v38 = 0.0;
    else
      v38 = 1.0;
    v37 = v37 + v38;
    sub_1BC997208((uint64_t)v33, (uint64_t (*)(_QWORD))sub_1BC9BD26C);
    v35 += v36;
    --v34;
  }
  while (v34);
  swift_bridgeObjectRelease();
  v108 = a1;
  swift_bridgeObjectRetain();
  v39 = v137;
  v139 = v9;
  v40 = v136;
  v41 = 0.0;
  v138 = v36;
  v42 = v133;
  do
  {
    sub_1BC9964B8(v39, (uint64_t)v25, (uint64_t (*)(_QWORD))sub_1BC9BD26C);
    v43 = *(int *)(v139 + 48);
    v44 = *(_QWORD *)&v42 + v43;
    v45 = &v25[v43];
    v46 = sub_1BCAB4BD8();
    v47 = *(_QWORD *)(v46 - 8);
    v48 = *(void (**)(char *, uint64_t, uint64_t))(v47 + 16);
    v48(*(char **)&v42, (uint64_t)v25, v46);
    v49 = *(double *)v45;
    v50 = v45[8];
    *(_QWORD *)v44 = *(_QWORD *)v45;
    *(_BYTE *)(v44 + 8) = v50;
    if (v50)
      v51 = 0.0;
    else
      v51 = v49;
    v52 = *(void (**)(_QWORD, uint64_t))(v47 + 8);
    v52(*(_QWORD *)&v42, v46);
    v41 = v41 + v51;
    sub_1BC997208((uint64_t)v25, (uint64_t (*)(_QWORD))sub_1BC9BD26C);
    v39 += v138;
    --v40;
  }
  while (v40);
  v129 = v47;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v53 = v137;
  v54 = v136;
  v55 = 0.0;
  v56 = v132;
  v57 = v46;
  v58 = *(_QWORD *)&v134;
  do
  {
    sub_1BC9964B8(v53, v58, (uint64_t (*)(_QWORD))sub_1BC9BD26C);
    v59 = v52;
    v60 = v139;
    v61 = *(int *)(v139 + 48);
    v62 = *(_QWORD *)&v56 + v61;
    v63 = v58 + v61;
    v48(*(char **)&v56, v58, v57);
    v64 = *(double *)v63;
    v65 = *(unsigned __int8 *)(v63 + 8);
    *(_QWORD *)v62 = *(_QWORD *)v63;
    *(_BYTE *)(v62 + 8) = v65;
    if (v65)
      v66 = 0.0;
    else
      v66 = v64;
    v59(*(_QWORD *)&v56, v57);
    v67 = *(int *)(v60 + 48);
    v52 = v59;
    v68 = v135;
    v69 = v135 + v67;
    v48((char *)v135, v58, v57);
    v70 = *(double *)v63;
    v71 = *(unsigned __int8 *)(v63 + 8);
    *(_QWORD *)v69 = *(_QWORD *)v63;
    *(_BYTE *)(v69 + 8) = v71;
    if (v71)
      v72 = 0.0;
    else
      v72 = v70;
    v52(v68, v57);
    v55 = v55 + v66 * v72;
    sub_1BC997208(v58, (uint64_t (*)(_QWORD))sub_1BC9BD26C);
    v53 += v138;
    --v54;
  }
  while (v54);
  v128 = v48;
  swift_bridgeObjectRelease();
  v132 = 0.00000001;
  v73 = 0.00000001;
  if (v37 >= 2.0)
  {
    if ((v55 - v41 * v41 / v37) / (v37 + -1.0) > 0.00000001)
      v73 = (v55 - v41 * v41 / v37) / (v37 + -1.0);
    else
      v73 = 0.00000001;
  }
  v127 = v131 + *(int *)(v139 + 48);
  v119 = v41 / v37;
  swift_bridgeObjectRetain();
  v74 = MEMORY[0x1E0DEE9D8];
  v125 = NAN;
  v75 = 0.0;
  v76 = sub_1BC9BD26C;
  v77 = 0.0;
  v134 = 0.0;
  v124 = v132;
  v78 = v37;
  v79 = v41;
  v133 = v55;
  v123 = v119;
  v122 = v73;
  v80 = v121;
  v81 = (uint64_t)v120;
  v109 = v73;
  v82 = v57;
  v83 = v137;
  v126 = (void (*)(char *, uint64_t))v52;
  do
  {
    v135 = v74;
    v137 = v83;
    v86 = v131;
    sub_1BC9964B8(v83, v131, (uint64_t (*)(_QWORD))v76);
    v87 = *(double *)v127;
    v88 = v76;
    v89 = *(_BYTE *)(v127 + 8);
    v90 = v139;
    v91 = v81 + *(int *)(v139 + 48);
    v92 = *(void (**)(void))(v129 + 32);
    ((void (*)(uint64_t, uint64_t, uint64_t))v92)(v81, v86, v82);
    *(double *)v91 = v87;
    *(_BYTE *)(v91 + 8) = v89;
    v93 = &v80[*(int *)(v90 + 48)];
    v94 = v128;
    v128(v80, v81, v82);
    *(double *)v93 = v87;
    v93[8] = v89;
    if ((v89 & 1) != 0)
    {
      sub_1BC997208(v81, (uint64_t (*)(_QWORD))v88);
      v126(v80, v82);
      v84 = v137;
      v85 = v138;
      v74 = v135;
      v76 = v88;
    }
    else
    {
      v95 = v126;
      v126(v80, v82);
      v96 = &v110[*(int *)(v90 + 48)];
      v94(v110, v81, v82);
      *(double *)v96 = v87;
      v96[8] = 0;
      *(double *)v142 = v75;
      *(double *)&v142[1] = v77;
      *(double *)&v142[2] = v134;
      *(double *)&v142[3] = v125;
      *(double *)&v142[4] = v124;
      *(double *)v141 = v78;
      *(double *)&v141[1] = v79;
      *(double *)&v141[2] = v133;
      *(double *)&v141[3] = v123;
      *(double *)&v141[4] = v122;
      v140[0] = v37;
      v140[1] = v41;
      v140[2] = v55;
      v140[3] = v119;
      v97 = v111;
      v98 = &v111[*(int *)(v90 + 48)];
      v140[4] = v73;
      v94(v111, v81, v82);
      *(double *)v98 = v87;
      v98[8] = 0;
      v99 = (uint64_t)v113;
      sub_1BCAB4BC0();
      v95(v97, v82);
      v100 = v112;
      sub_1BCA7B8CC((uint64_t)v142, (uint64_t)v141, v140, v99, v118, v112);
      (*(void (**)(uint64_t, uint64_t))(v114 + 8))(v99, v115);
      v101 = v130 + *(int *)(v117 + 48);
      v92();
      sub_1BC9AE330(v100, v101, (uint64_t (*)(_QWORD))sub_1BC9DBE2C);
      v74 = v135;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v74 = sub_1BC9DA97C(0, *(_QWORD *)(v74 + 16) + 1, 1, v74);
      v84 = v137;
      v103 = *(_QWORD *)(v74 + 16);
      v102 = *(_QWORD *)(v74 + 24);
      v80 = v121;
      v81 = (uint64_t)v120;
      if (v103 >= v102 >> 1)
        v74 = sub_1BC9DA97C(v102 > 1, v103 + 1, 1, v74);
      *(_QWORD *)(v74 + 16) = v103 + 1;
      sub_1BC9AE330(v130, v74+ ((*(unsigned __int8 *)(v116 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v116 + 80))+ *(_QWORD *)(v116 + 72) * v103, (uint64_t (*)(_QWORD))sub_1BC9BD1B8);
      v76 = sub_1BC9BD26C;
      sub_1BC997208(v81, (uint64_t (*)(_QWORD))sub_1BC9BD26C);
      v75 = v75 + 1.0;
      v77 = v77 + v87;
      v134 = v134 + v87 * v87;
      v104 = v132;
      if (v75 >= 2.0)
      {
        v104 = (v134 - v77 * v77 / v75) / (v75 + -1.0);
        if (v104 <= v132)
          v104 = v132;
      }
      v124 = v104;
      v125 = v77 / v75;
      v78 = v78 + -1.0;
      v79 = v79 - v87;
      v105 = v133 - v87 * v87;
      v123 = v79 / v78;
      v85 = v138;
      v133 = v105;
      if (v78 >= 2.0)
      {
        v106 = (v105 - v79 * v79 / v78) / (v78 + -1.0);
        if (v106 <= v132)
          v106 = v132;
      }
      else
      {
        v106 = v132;
      }
      v122 = v106;
      v73 = v109;
    }
    v83 = v84 + v85;
    --v136;
  }
  while (v136);
  swift_bridgeObjectRelease();
  return v74;
}

uint64_t sub_1BCA71580(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  void (*v35)(char *, uint64_t);
  double v36;
  double v37;
  uint64_t v38;
  double v39;
  char v40;
  void (*v42)(char *, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  char *v51;
  char *v52;
  uint64_t v53;
  char *v54;
  void (*v55)(char *, uint64_t);
  void (*v56)(char *, uint64_t, uint64_t);
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;

  v64 = a3;
  v69 = (char *)a2;
  sub_1BCA7EFF8(0);
  MEMORY[0x1E0C80A78](v4);
  v65 = (uint64_t)&v56 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BCA7F3E0(0);
  MEMORY[0x1E0C80A78](v6);
  v63 = (uint64_t)&v56 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BCA7F46C(0);
  MEMORY[0x1E0C80A78](v8);
  v66 = (uint64_t)&v56 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1BCAB4E54();
  v67 = *(_QWORD *)(v10 - 8);
  v68 = v10;
  MEMORY[0x1E0C80A78](v10);
  v61 = (char *)&v56 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v60 = (char *)&v56 - v13;
  sub_1BC9BD1B8(0);
  v15 = v14;
  MEMORY[0x1E0C80A78](v14);
  v59 = (char *)&v56 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17);
  v19 = (char *)&v56 - v18;
  v20 = type metadata accessor for SignificantChangeEngine.Changepoint(0);
  v21 = *(_QWORD *)(v20 - 8);
  MEMORY[0x1E0C80A78](v20);
  v23 = (char *)&v56 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v24);
  v26 = (char *)&v56 - v25;
  v58 = v15;
  v27 = *(int *)(v15 + 48);
  v28 = (uint64_t)&v19[v27];
  v29 = a1 + v27;
  v30 = sub_1BCAB4BD8();
  v31 = *(_QWORD *)(v30 - 8);
  v32 = *(void (**)(char *, uint64_t, uint64_t))(v31 + 16);
  v62 = a1;
  v33 = a1;
  v34 = v30;
  v56 = v32;
  v32(v19, v33, v30);
  v57 = v29;
  sub_1BCA7F44C(v29, v28);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v21 + 48))(v28, 1, v20) != 1)
  {
    sub_1BC9AE330(v28, (uint64_t)v26, type metadata accessor for SignificantChangeEngine.Changepoint);
    v35 = *(void (**)(char *, uint64_t))(v31 + 8);
    v35(v19, v34);
    v36 = *(double *)&v26[*(int *)(v20 + 44)];
    v37 = (double)*((uint64_t *)v69 + 12);
    sub_1BC9964B8((uint64_t)v26, (uint64_t)v23, type metadata accessor for SignificantChangeEngine.Changepoint);
    v38 = (uint64_t)v26;
    if (v36 < v37)
    {
      sub_1BC997208((uint64_t)v23, type metadata accessor for SignificantChangeEngine.Changepoint);
LABEL_6:
      sub_1BC997208((uint64_t)v26, type metadata accessor for SignificantChangeEngine.Changepoint);
      goto LABEL_7;
    }
    v39 = *(double *)&v23[*(int *)(v20 + 48)];
    sub_1BC997208((uint64_t)v23, type metadata accessor for SignificantChangeEngine.Changepoint);
    if (v39 < v37)
      goto LABEL_6;
    v42 = v35;
    v43 = v65;
    sub_1BCA7EFEC(v64, v65);
    v44 = type metadata accessor for SignificantChangeEngine.State(0);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 48))(v43, 1, v44) == 1)
    {
      sub_1BC997208(v43, (uint64_t (*)(_QWORD))sub_1BCA7EFF8);
      v46 = v67;
      v45 = v68;
      v47 = v66;
    }
    else
    {
      v48 = v63;
      sub_1BCA7F3D4(v43 + *(int *)(v44 + 20), v63);
      sub_1BC997208(v43, type metadata accessor for SignificantChangeEngine.State);
      v49 = type metadata accessor for SignificantChangeEngine.State.MeanShift(0);
      v50 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 48))(v48, 1, v49);
      v46 = v67;
      v45 = v68;
      v47 = v66;
      if (v50 != 1)
      {
        sub_1BC9AFC58(v48 + *(int *)(v49 + 24), v66);
        sub_1BC997208(v48, type metadata accessor for SignificantChangeEngine.State.MeanShift);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v46 + 48))(v47, 1, v45) != 1)
        {
          v51 = v60;
          (*(void (**)(char *, uint64_t, uint64_t))(v46 + 32))(v60, v47, v45);
          v52 = v59;
          v69 = &v59[*(int *)(v58 + 48)];
          v53 = (uint64_t)v69;
          v56(v59, v62, v34);
          sub_1BCA7F44C(v57, v53);
          v54 = v61;
          sub_1BCAB4BC0();
          v42(v52, v34);
          sub_1BC996948(&qword_1ED6C71E8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], MEMORY[0x1E0CB08B0]);
          v40 = sub_1BCAB5EB0() ^ 1;
          v55 = *(void (**)(char *, uint64_t))(v46 + 8);
          v55(v54, v45);
          v55(v51, v45);
          sub_1BC997208(v38, type metadata accessor for SignificantChangeEngine.Changepoint);
          sub_1BC997208((uint64_t)v69, (uint64_t (*)(_QWORD))sub_1BC9DBE2C);
          return v40 & 1;
        }
        goto LABEL_14;
      }
      sub_1BC997208(v48, (uint64_t (*)(_QWORD))sub_1BCA7F3E0);
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v46 + 56))(v47, 1, 1, v45);
LABEL_14:
    sub_1BC997208(v38, type metadata accessor for SignificantChangeEngine.Changepoint);
    sub_1BC997208(v47, (uint64_t (*)(_QWORD))sub_1BCA7F46C);
    v40 = 1;
    return v40 & 1;
  }
  sub_1BC997208(v28, (uint64_t (*)(_QWORD))sub_1BC9DBE2C);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v19, v34);
LABEL_7:
  v40 = 0;
  return v40 & 1;
}

void sub_1BCA71AD4(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  void (*v59)(char *, uint64_t, uint64_t);
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void (*v66)(char *, char *, uint64_t);
  BOOL v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  char *v72;
  _QWORD v73[2];
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  char *v78;
  char *v79;
  char *v80;
  char *v81;
  char *v82;
  char *v83;
  char *v84;
  char *v85;
  char *v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;

  v77 = a3;
  v5 = type metadata accessor for SignificantChangeEngine.Changepoint(0);
  v92 = *(_QWORD *)(v5 - 8);
  v93 = v5;
  MEMORY[0x1E0C80A78](v5);
  v91 = (uint64_t)v73 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BC998AB0(0, &qword_1ED6C3158, (uint64_t (*)(uint64_t))sub_1BCA8F4C4, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)v73 - v8;
  sub_1BCA8F4C4(0);
  v11 = v10;
  v12 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v14 = (char *)v73 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v76 = (char *)v73 - v16;
  MEMORY[0x1E0C80A78](v17);
  v73[1] = (char *)v73 - v18;
  MEMORY[0x1E0C80A78](v19);
  v80 = (char *)v73 - v20;
  MEMORY[0x1E0C80A78](v21);
  v78 = (char *)v73 - v22;
  MEMORY[0x1E0C80A78](v23);
  v82 = (char *)v73 - v24;
  MEMORY[0x1E0C80A78](v25);
  v85 = (char *)v73 - v26;
  MEMORY[0x1E0C80A78](v27);
  v84 = (char *)v73 - v28;
  MEMORY[0x1E0C80A78](v29);
  v73[0] = (char *)v73 - v30;
  MEMORY[0x1E0C80A78](v31);
  v79 = (char *)v73 - v32;
  MEMORY[0x1E0C80A78](v33);
  v35 = (char *)v73 - v34;
  MEMORY[0x1E0C80A78](v36);
  v87 = (uint64_t)v73 - v37;
  sub_1BC9BD1B8(0);
  v97 = v38;
  MEMORY[0x1E0C80A78](v38);
  v86 = (char *)v73 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v40);
  v42 = (char *)v73 - v41;
  MEMORY[0x1E0C80A78](v43);
  v46 = (char *)v73 - v45;
  v47 = *a2;
  v48 = *(_QWORD *)(a1 + 16);
  v94 = v11;
  v90 = v12;
  if (v48)
  {
    v74 = v47;
    v81 = v14;
    v49 = a1 + ((*(unsigned __int8 *)(v44 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v44 + 80));
    v89 = *(_QWORD *)(v44 + 72);
    v75 = a1;
    swift_bridgeObjectRetain();
    v50 = MEMORY[0x1E0DEE9D8];
    v51 = v97;
    v83 = v35;
    do
    {
      v95 = v49;
      v96 = v48;
      v98 = v50;
      sub_1BC9964B8(v49, (uint64_t)v46, (uint64_t (*)(_QWORD))sub_1BC9BD1B8);
      v52 = *(int *)(v51 + 48);
      v53 = (uint64_t)v46;
      v54 = (uint64_t)&v42[v52];
      v55 = v53 + v52;
      v56 = sub_1BCAB4BD8();
      v57 = *(_QWORD *)(v56 - 8);
      v58 = v42;
      v59 = *(void (**)(char *, uint64_t, uint64_t))(v57 + 16);
      v59(v58, v53, v56);
      sub_1BCA7F44C(v55, v54);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v92 + 48))(v54, 1, v93) == 1)
      {
        sub_1BC997208(v54, (uint64_t (*)(_QWORD))sub_1BC9DBE2C);
        (*(void (**)(char *, uint64_t))(v57 + 8))(v58, v56);
        v60 = v94;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v9, 1, 1, v94);
        v42 = v58;
        v51 = v97;
      }
      else
      {
        sub_1BC9AE330(v54, v91, type metadata accessor for SignificantChangeEngine.Changepoint);
        (*(void (**)(char *, uint64_t))(v57 + 8))(v58, v56);
        v61 = v94;
        v88 = &v9[*(int *)(v94 + 48)];
        v62 = v86;
        v63 = (uint64_t)&v86[*(int *)(v97 + 48)];
        v59(v86, v53, v56);
        v64 = v55;
        v65 = v63;
        sub_1BCA7F44C(v64, v63);
        v66 = *(void (**)(char *, char *, uint64_t))(v57 + 32);
        v60 = v61;
        v12 = v90;
        v66(v9, v62, v56);
        v35 = v83;
        sub_1BC9AE330(v91, (uint64_t)v88, type metadata accessor for SignificantChangeEngine.Changepoint);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v60);
        v51 = v97;
        sub_1BC997208(v65, (uint64_t (*)(_QWORD))sub_1BC9DBE2C);
        v42 = v58;
      }
      sub_1BC997208(v53, (uint64_t (*)(_QWORD))sub_1BC9BD1B8);
      v67 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v9, 1, v60) == 1;
      v50 = v98;
      v46 = (char *)v53;
      v68 = v95;
      if (v67)
      {
        sub_1BC9B3A38((uint64_t)v9, &qword_1ED6C3158, (uint64_t (*)(uint64_t))sub_1BCA8F4C4);
      }
      else
      {
        v69 = v87;
        sub_1BC9AE330((uint64_t)v9, v87, (uint64_t (*)(_QWORD))sub_1BCA8F4C4);
        sub_1BC9AE330(v69, (uint64_t)v35, (uint64_t (*)(_QWORD))sub_1BCA8F4C4);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v50 = sub_1BC9DA9A0(0, *(_QWORD *)(v50 + 16) + 1, 1, v50);
        v71 = *(_QWORD *)(v50 + 16);
        v70 = *(_QWORD *)(v50 + 24);
        if (v71 >= v70 >> 1)
          v50 = sub_1BC9DA9A0(v70 > 1, v71 + 1, 1, v50);
        *(_QWORD *)(v50 + 16) = v71 + 1;
        sub_1BC9AE330((uint64_t)v35, v50+ ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80))+ *(_QWORD *)(v12 + 72) * v71, (uint64_t (*)(_QWORD))sub_1BCA8F4C4);
        v51 = v97;
      }
      v49 = v68 + v89;
      v48 = v96 - 1;
    }
    while (v96 != 1);
    swift_bridgeObjectRelease();
    v47 = v74;
  }
  else
  {
    v50 = MEMORY[0x1E0DEE9D8];
  }
  v72 = (char *)&loc_1BCA720EC + dword_1BCA72884[v47];
  v98 = v50;
  __asm { BR              X9 }
}

uint64_t sub_1BCA72100()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  void (*v26)(uint64_t, uint64_t);
  uint64_t v27;

  v7 = *(_QWORD *)(v4 + 16);
  if (v7)
  {
    v8 = v4 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    *(_QWORD *)(v6 - 128) = v8;
    sub_1BC9964B8(v8, v1, (uint64_t (*)(_QWORD))sub_1BCA8F4C4);
    swift_bridgeObjectRetain();
    if (v7 != 1)
    {
      v9 = 1;
      *(_QWORD *)(v6 - 248) = v5;
      *(_QWORD *)(v6 - 136) = v7;
      do
      {
        if (v9 >= *(_QWORD *)(v4 + 16))
        {
          __break(1u);
          JUMPOUT(0x1BCA72878);
        }
        sub_1BC9964B8(*(_QWORD *)(v6 - 128) + *(_QWORD *)(v3 + 72) * v9, v5, (uint64_t (*)(_QWORD))sub_1BCA8F4C4);
        v10 = *(_QWORD *)(v6 - 144);
        v11 = *(int *)(v10 + 48);
        v12 = v1;
        v13 = *(_QWORD *)(v6 - 224);
        v14 = v13 + v11;
        v15 = v5 + v11;
        v16 = sub_1BCAB4BD8();
        v17 = *(_QWORD *)(v16 - 8);
        *(_QWORD *)(v6 - 120) = v17;
        v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16);
        v18(v13, v5, v16);
        sub_1BC9964B8(v15, v14, type metadata accessor for SignificantChangeEngine.Changepoint);
        v19 = *(_QWORD *)(v6 - 152);
        v20 = *(double *)(v14 + *(int *)(v19 + 20));
        sub_1BC997208(v14, type metadata accessor for SignificantChangeEngine.Changepoint);
        v21 = *(int *)(v10 + 48);
        v22 = *(_QWORD *)(v6 - 216);
        v23 = v22 + v21;
        v24 = v12 + v21;
        v18(v22, v12, v16);
        sub_1BC9964B8(v24, v23, type metadata accessor for SignificantChangeEngine.Changepoint);
        v25 = *(double *)(v23 + *(int *)(v19 + 20));
        sub_1BC997208(v23, type metadata accessor for SignificantChangeEngine.Changepoint);
        v26 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 120) + 8);
        v26(v22, v16);
        v26(v13, v16);
        if (v20 >= v25)
        {
          v5 = *(_QWORD *)(v6 - 248);
          sub_1BC997208(v5, (uint64_t (*)(_QWORD))sub_1BCA8F4C4);
        }
        else
        {
          sub_1BC997208(v12, (uint64_t (*)(_QWORD))sub_1BCA8F4C4);
          v5 = *(_QWORD *)(v6 - 248);
          sub_1BC9AE330(v5, v12, (uint64_t (*)(_QWORD))sub_1BCA8F4C4);
        }
        v1 = v12;
        ++v9;
        v3 = *(_QWORD *)(v6 - 176);
        v4 = *(_QWORD *)(v6 - 112);
      }
      while (*(_QWORD *)(v6 - 136) != v9);
      v0 = *(_QWORD *)(v6 - 280);
      v2 = *(_QWORD *)(v6 - 144);
    }
    swift_bridgeObjectRelease();
    sub_1BC9AE330(v1, v0, (uint64_t (*)(_QWORD))sub_1BCA8F4C4);
    v27 = 0;
  }
  else
  {
    v27 = 1;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 56))(v0, v27, 1, v2);
  return swift_bridgeObjectRelease();
}

void sub_1BCA72894(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(char *, uint64_t);
  uint64_t v43;
  void (*v44)(char *, uint64_t, uint64_t);
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  char *v51;
  char *v52;
  void (*v53)(char *, uint64_t);
  char *v54;
  char v55;
  char *v56;
  void (*v57)(char *, uint64_t);
  uint64_t v58;
  char *v59;
  char *v60;
  char *v61;
  char *v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void (*v71)(char *, uint64_t);
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  void (*v78)(char *, uint64_t);
  int v79;
  void (*v80)(char *, char *, uint64_t);

  v69 = a2;
  v3 = sub_1BCAB4BD8();
  v68 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v75 = (char *)&v58 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1BCAB4E54();
  v67 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v74 = (char *)&v58 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v58 - v8;
  sub_1BC9BD26C(0);
  MEMORY[0x1E0C80A78](v10);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v58 - v12;
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)&v58 - v15;
  MEMORY[0x1E0C80A78](v17);
  v22 = (char *)&v58 - v21;
  v23 = *(_QWORD *)(a1 + 16);
  if (v23)
  {
    v65 = v20;
    v66 = v5;
    v73 = v18;
    v64 = &v22[*(int *)(v18 + 48)];
    v24 = a1;
    v25 = a1 + ((*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80));
    v63 = *(_QWORD *)(v19 + 72);
    v58 = v24;
    swift_bridgeObjectRetain();
    v26 = 0.0;
    v27 = 0.0;
    v59 = v22;
    v61 = v16;
    v60 = v9;
    v62 = v13;
    do
    {
      v76 = v25;
      v77 = v23;
      sub_1BC9964B8(v25, (uint64_t)v22, (uint64_t (*)(_QWORD))sub_1BC9BD26C);
      v30 = *(_QWORD *)v64;
      v31 = v64[8];
      v32 = v73;
      v33 = &v16[*(int *)(v73 + 48)];
      v34 = v68;
      (*(void (**)(char *, char *, uint64_t))(v68 + 32))(v16, v22, v3);
      *(_QWORD *)v33 = v30;
      v33[8] = v31;
      v35 = &v13[*(int *)(v32 + 48)];
      v80 = *(void (**)(char *, char *, uint64_t))(v34 + 16);
      v80(v13, v16, v3);
      *(_QWORD *)v35 = v30;
      v35[8] = v31;
      sub_1BCAB4BC0();
      v78 = *(void (**)(char *, uint64_t))(v34 + 8);
      v78(v13, v3);
      v36 = v74;
      v37 = v9;
      v38 = v3;
      v39 = v69;
      sub_1BCAB4BC0();
      v40 = sub_1BC996948(&qword_1ED6C71E8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], MEMORY[0x1E0CB08B0]);
      v41 = v66;
      v70 = v40;
      v79 = sub_1BCAB5EB0();
      v42 = *(void (**)(char *, uint64_t))(v67 + 8);
      v42(v36, v41);
      v71 = v42;
      v42(v37, v41);
      v43 = *(int *)(v32 + 48);
      v44 = (void (*)(char *, uint64_t, uint64_t))v80;
      v45 = v62;
      v46 = v65;
      v47 = v65 + v43;
      v80((char *)v65, v16, v38);
      v72 = v30;
      *(_QWORD *)v47 = v30;
      *(_BYTE *)(v47 + 8) = v31;
      v48 = v75;
      v49 = v39;
      v3 = v38;
      v44(v75, v49, v38);
      if ((v79 & 1) != 0)
      {
        v78(v48, v38);
        sub_1BC997208(v46, (uint64_t (*)(_QWORD))sub_1BC9BD26C);
        v16 = v61;
        sub_1BC997208((uint64_t)v61, (uint64_t (*)(_QWORD))sub_1BC9BD26C);
        v9 = v60;
        v13 = v45;
        v22 = v59;
        v28 = v76;
        v29 = v77;
      }
      else
      {
        v50 = &v45[*(int *)(v73 + 48)];
        v44(v45, v46, v38);
        *(_QWORD *)v50 = v72;
        v50[8] = v31;
        v51 = v75;
        v9 = v60;
        sub_1BCAB4B9C();
        v52 = v45;
        v53 = v78;
        v78(v45, v3);
        v54 = v74;
        sub_1BCAB4B9C();
        v55 = sub_1BCAB5EB0();
        v56 = v54;
        v57 = v71;
        v71(v56, v41);
        v57(v9, v41);
        v53(v51, v3);
        sub_1BC997208(v46, (uint64_t (*)(_QWORD))sub_1BC9BD26C);
        v16 = v61;
        sub_1BC997208((uint64_t)v61, (uint64_t (*)(_QWORD))sub_1BC9BD26C);
        if ((v55 & 1) == 0)
        {
          v27 = v27 + 1.0;
          if (!v31)
            v26 = v26 + 1.0;
        }
        v13 = v52;
        v22 = v59;
        v28 = v76;
        v29 = v77;
      }
      v25 = v28 + v63;
      v23 = v29 - 1;
    }
    while (v23);
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_1BCA72D80@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  int *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  double v31;
  int v32;
  double v33;
  double v34;
  double v35;
  int v36;
  double v37;
  int v38;
  double v39;
  unsigned int (*v40)(char *, uint64_t, int *);
  uint64_t (*v41)(uint64_t, uint64_t, uint64_t, int *);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(char *, uint64_t);
  uint64_t v53;
  uint64_t v54;
  uint64_t (*v55)(_QWORD);
  uint64_t v56;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  int *v64;
  uint64_t (*v65)(uint64_t, uint64_t, int *);
  uint64_t v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;

  v75 = a2;
  v76 = a4;
  v78 = (char *)a1;
  v5 = sub_1BCAB4E54();
  v79 = *(_QWORD *)(v5 - 8);
  v80 = v5;
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v62 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BC9BD1B8(0);
  v81 = v8;
  v77 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v62 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v62 - v12;
  MEMORY[0x1E0C80A78](v14);
  v73 = (uint64_t)&v62 - v15;
  sub_1BC9DBE2C(0);
  MEMORY[0x1E0C80A78](v16);
  v74 = (uint64_t)&v62 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18);
  v20 = (char *)&v62 - v19;
  v21 = (int *)type metadata accessor for SignificantChangeEngine.Changepoint(0);
  v22 = *((_QWORD *)v21 - 1);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v62 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v25);
  v27 = (char *)&v62 - v26;
  MEMORY[0x1E0C80A78](v28);
  v30 = (char *)&v62 - v29;
  v31 = *(double *)a3;
  v32 = *(unsigned __int8 *)(a3 + 8);
  v33 = *(double *)(a3 + 16);
  v71 = *(unsigned __int8 *)(a3 + 24);
  v72 = v32;
  v34 = *(double *)(a3 + 32);
  v35 = *(double *)(a3 + 48);
  v36 = *(unsigned __int8 *)(a3 + 56);
  v69 = *(unsigned __int8 *)(a3 + 40);
  v70 = v36;
  v37 = *(double *)(a3 + 64);
  v38 = *(unsigned __int8 *)(a3 + 72);
  v39 = *(double *)(a3 + 80);
  v67 = *(unsigned __int8 *)(a3 + 88);
  v68 = v38;
  sub_1BCA7F44C((uint64_t)v78, (uint64_t)v20);
  v40 = *(unsigned int (**)(char *, uint64_t, int *))(v22 + 48);
  if (v40(v20, 1, v21) == 1)
  {
    sub_1BC997208((uint64_t)v20, (uint64_t (*)(_QWORD))sub_1BC9DBE2C);
    v41 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *))(v22 + 56);
    v42 = v76;
    return v41(v42, 1, 1, v21);
  }
  v65 = (uint64_t (*)(uint64_t, uint64_t, int *))v40;
  v62 = v24;
  v63 = v27;
  v66 = v22;
  sub_1BC9AE330((uint64_t)v20, (uint64_t)v30, type metadata accessor for SignificantChangeEngine.Changepoint);
  v43 = v76;
  v44 = *(_QWORD *)(v75 + 16);
  if (!v44)
  {
LABEL_8:
    v53 = v66;
    v54 = v74;
    (*(void (**)(uint64_t, uint64_t, uint64_t, int *))(v66 + 56))(v74, 1, 1, v21);
LABEL_9:
    sub_1BC997208((uint64_t)v30, type metadata accessor for SignificantChangeEngine.Changepoint);
    v55 = (uint64_t (*)(_QWORD))sub_1BC9DBE2C;
    v56 = v54;
LABEL_10:
    sub_1BC997208(v56, v55);
    v41 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *))(v53 + 56);
    v42 = v43;
    return v41(v42, 1, 1, v21);
  }
  v64 = v21;
  v45 = v75 + ((*(unsigned __int8 *)(v77 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v77 + 80));
  v77 = *(_QWORD *)(v77 + 72);
  v78 = v30;
  swift_bridgeObjectRetain();
  v46 = v81;
  while (1)
  {
    sub_1BC9964B8(v45, (uint64_t)v13, (uint64_t (*)(_QWORD))sub_1BC9BD1B8);
    v47 = *(int *)(v46 + 48);
    v48 = (uint64_t)&v10[v47];
    v49 = (uint64_t)&v13[v47];
    v50 = sub_1BCAB4BD8();
    v51 = *(_QWORD *)(v50 - 8);
    (*(void (**)(char *, char *, uint64_t))(v51 + 16))(v10, v13, v50);
    sub_1BCA7F44C(v49, v48);
    sub_1BCAB4BC0();
    v52 = *(void (**)(char *, uint64_t))(v51 + 8);
    v52(v10, v50);
    LOBYTE(v49) = sub_1BCAB4E18();
    (*(void (**)(char *, uint64_t))(v79 + 8))(v7, v80);
    sub_1BC997208(v48, (uint64_t (*)(_QWORD))sub_1BC9DBE2C);
    if ((v49 & 1) != 0)
      break;
    sub_1BC997208((uint64_t)v13, (uint64_t (*)(_QWORD))sub_1BC9BD1B8);
    v45 += v77;
    --v44;
    v46 = v81;
    if (!v44)
    {
      swift_bridgeObjectRelease();
      v43 = v76;
      v21 = v64;
      v30 = v78;
      goto LABEL_8;
    }
  }
  swift_bridgeObjectRelease();
  v58 = v73;
  sub_1BC9AE330((uint64_t)v13, v73, (uint64_t (*)(_QWORD))sub_1BC9BD1B8);
  v54 = v74;
  sub_1BC9AE330(v58 + *(int *)(v81 + 48), v74, (uint64_t (*)(_QWORD))sub_1BC9DBE2C);
  v52((char *)v58, v50);
  v21 = v64;
  v59 = v65(v54, 1, v64);
  v43 = v76;
  v53 = v66;
  v30 = v78;
  if (v59 == 1)
    goto LABEL_9;
  v60 = (uint64_t)v63;
  sub_1BC9AE330(v54, (uint64_t)v63, type metadata accessor for SignificantChangeEngine.Changepoint);
  if (((v72 & 1) != 0 || v31 >= *(double *)(v60 + v21[5]))
    && ((v71 & 1) != 0 || *(double *)(v60 + v21[9]) >= v33)
    && ((v69 & 1) != 0 || fabs(*(double *)(v60 + v21[7])) >= v34))
  {
    v61 = (uint64_t)v62;
    sub_1BC9964B8(v60, (uint64_t)v62, type metadata accessor for SignificantChangeEngine.Changepoint);
  }
  else
  {
    v61 = (uint64_t)v62;
    sub_1BC9964B8(v60, (uint64_t)v62, type metadata accessor for SignificantChangeEngine.Changepoint);
    if ((v70 & 1) == 0 && v35 < *(double *)(v61 + v21[5])
      || (v68 & 1) == 0 && *(double *)(v61 + v21[9]) < v37
      || (v67 & 1) == 0 && fabs(*(double *)(v61 + v21[7])) < v39)
    {
      sub_1BC997208(v61, type metadata accessor for SignificantChangeEngine.Changepoint);
      sub_1BC997208((uint64_t)v30, type metadata accessor for SignificantChangeEngine.Changepoint);
      v56 = v60;
      v55 = type metadata accessor for SignificantChangeEngine.Changepoint;
      goto LABEL_10;
    }
  }
  sub_1BC997208(v61, type metadata accessor for SignificantChangeEngine.Changepoint);
  sub_1BC997208((uint64_t)v30, type metadata accessor for SignificantChangeEngine.Changepoint);
  sub_1BC9AE330(v60, v43, type metadata accessor for SignificantChangeEngine.Changepoint);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, int *))(v53 + 56))(v43, 0, 1, v21);
}

BOOL sub_1BCA73330(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  double v19;
  unsigned int (*v20)(char *, uint64_t, uint64_t);
  uint64_t (*v21)(_QWORD);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  double v26;
  uint64_t v28;

  sub_1BC9DBE2C(0);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v28 - v10;
  v12 = type metadata accessor for SignificantChangeEngine.Changepoint(0);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16);
  v18 = (char *)&v28 - v17;
  v19 = *(double *)(a3 + 128);
  sub_1BCA7F44C(a1, (uint64_t)v11);
  v20 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
  if (v20(v11, 1, v12) != 1)
  {
    sub_1BC9AE330((uint64_t)v11, (uint64_t)v18, type metadata accessor for SignificantChangeEngine.Changepoint);
    sub_1BCA7F44C(a2, (uint64_t)v8);
    if (v20(v8, 1, v12) == 1)
    {
      sub_1BC997208((uint64_t)v18, type metadata accessor for SignificantChangeEngine.Changepoint);
      v21 = (uint64_t (*)(_QWORD))sub_1BC9DBE2C;
      v22 = (uint64_t)v8;
      goto LABEL_10;
    }
    sub_1BC9AE330((uint64_t)v8, (uint64_t)v15, type metadata accessor for SignificantChangeEngine.Changepoint);
    v23 = *(int *)(v12 + 28);
    v24 = *(_QWORD *)&v18[v23];
    if ((*(_QWORD *)&v15[v23] & 0x8000000000000000) != 0)
    {
      if (v24 < 0)
        goto LABEL_7;
    }
    else if ((v24 & 0x8000000000000000) == 0)
    {
LABEL_7:
      sub_1BCAB4DC4();
      v26 = fabs(v25);
      sub_1BC997208((uint64_t)v15, type metadata accessor for SignificantChangeEngine.Changepoint);
      sub_1BC997208((uint64_t)v18, type metadata accessor for SignificantChangeEngine.Changepoint);
      return v19 >= v26;
    }
    sub_1BC997208((uint64_t)v15, type metadata accessor for SignificantChangeEngine.Changepoint);
    v22 = (uint64_t)v18;
    v21 = type metadata accessor for SignificantChangeEngine.Changepoint;
    goto LABEL_10;
  }
  v21 = (uint64_t (*)(_QWORD))sub_1BC9DBE2C;
  v22 = (uint64_t)v11;
LABEL_10:
  sub_1BC997208(v22, v21);
  return 0;
}

uint64_t sub_1BCA73544@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t (*v18)(_QWORD);
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, _BYTE *, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t result;
  _BYTE v35[12];
  int v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;

  v38 = a4;
  v37 = a3;
  v36 = a2;
  v7 = sub_1BCAB4DD0();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = &v35[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1BCA8025C(0);
  MEMORY[0x1E0C80A78](v11);
  v13 = &v35[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v14 = type metadata accessor for SignificantChange.Notification(0);
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14);
  v17 = &v35[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1BC9964B8(a1, (uint64_t)v13, (uint64_t (*)(_QWORD))sub_1BCA8025C);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) == 1)
  {
    v18 = (uint64_t (*)(_QWORD))sub_1BCA8025C;
    v19 = (uint64_t)v13;
LABEL_7:
    v28 = sub_1BC997208(v19, v18);
    MEMORY[0x1BCCF9700](v28);
    sub_1BC996948(&qword_1EF478EE8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0670], MEMORY[0x1E0CB0660]);
    v29 = v37;
    sub_1BCAB4E3C();
    (*(void (**)(_BYTE *, uint64_t))(v8 + 8))(v10, v7);
    sub_1BCAB5F70();
    sub_1BCAB5F70();
    swift_bridgeObjectRelease();
    v30 = v39;
    v31 = v40;
    _s19HealthVisualization25PresentationDateProvidingPAAE012presentationD010Foundation0D0VvgZ_0();
    v32 = a5 + *(int *)(v14 + 28);
    v33 = sub_1BCAB4E54();
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 16))(v32, v29, v33);
    *(_QWORD *)a5 = v30;
    *(_QWORD *)(a5 + 8) = v31;
    *(_BYTE *)(a5 + 16) = v38 & 1;
    return result;
  }
  sub_1BC9AE330((uint64_t)v13, (uint64_t)v17, type metadata accessor for SignificantChange.Notification);
  if ((v36 & 1) == 0)
  {
    v18 = type metadata accessor for SignificantChange.Notification;
    v19 = (uint64_t)v17;
    goto LABEL_7;
  }
  v20 = v38 & 1;
  if (v17[16] == (v38 & 1))
  {
    sub_1BC9964B8((uint64_t)v17, a5, type metadata accessor for SignificantChange.Notification);
  }
  else
  {
    v22 = *(_QWORD *)v17;
    v21 = *((_QWORD *)v17 + 1);
    v23 = *(int *)(v14 + 24);
    v24 = &v17[v23];
    v25 = a5 + v23;
    v26 = sub_1BCAB4E54();
    v27 = *(void (**)(uint64_t, _BYTE *, uint64_t))(*(_QWORD *)(v26 - 8) + 16);
    v27(v25, v24, v26);
    v27(a5 + *(int *)(v14 + 28), &v17[*(int *)(v14 + 28)], v26);
    *(_QWORD *)a5 = v22;
    *(_QWORD *)(a5 + 8) = v21;
    *(_BYTE *)(a5 + 16) = v20;
    swift_bridgeObjectRetain();
  }
  return sub_1BC997208((uint64_t)v17, type metadata accessor for SignificantChange.Notification);
}

uint64_t sub_1BCA73830(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  double *v16;
  uint64_t v17;
  double v18;
  double v19;
  _BYTE v21[16];

  sub_1BC998AB0(0, (unint64_t *)&qword_1ED6C71E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAE5D0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v2);
  v4 = &v21[-v3];
  v5 = sub_1BCAB4BD8();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = &v21[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1BCA214F8(a1, (uint64_t)v4);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    sub_1BC9B3A38((uint64_t)v4, (unint64_t *)&qword_1ED6C71E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAE5D0]);
    return 0;
  }
  else
  {
    v10 = (*(uint64_t (**)(_BYTE *, _BYTE *, uint64_t))(v6 + 32))(v8, v4, v5);
    MEMORY[0x1E0C80A78](v10);
    *(_QWORD *)&v21[-16] = v8;
    v11 = swift_bridgeObjectRetain();
    v12 = sub_1BCA8DDB4(v11, (uint64_t (*)(_QWORD))sub_1BCA8F608, (uint64_t)&v21[-32]);
    swift_bridgeObjectRelease();
    v13 = *(_QWORD *)(v12 + 16);
    if (v13)
    {
      v9 = *(_QWORD *)(v12 + 32);
      v14 = v13 - 1;
      if (v14)
      {
        v15 = *(double *)(v12 + 40);
        v16 = (double *)(v12 + 56);
        do
        {
          v17 = *((_QWORD *)v16 - 1);
          v18 = *v16;
          v16 += 2;
          v19 = v18;
          if (v18 <= v15)
          {
            v9 = v17;
            v15 = v19;
          }
          --v14;
        }
        while (v14);
      }
    }
    else
    {
      v9 = 0;
    }
    swift_bridgeObjectRelease();
    (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
  }
  return v9;
}

unint64_t sub_1BCA73A0C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int (*a3)(uint64_t, uint64_t, uint64_t)@<X2>, uint64_t a4@<X8>)
{
  uint64_t (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  char *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  char *v196;
  uint64_t v197;
  uint64_t v198;
  char *v199;
  uint64_t v200;
  uint64_t v201;
  char *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  __n128 v229;
  unint64_t v230;
  double v231;
  uint64_t v232;
  double v233;
  void (*v234)(char *, unint64_t, uint64_t);
  uint64_t v235;
  void (*v236)(char *, char *, uint64_t);
  void (*v237)(char *, _QWORD, uint64_t, uint64_t);
  unsigned int (*v238)(char *, uint64_t, uint64_t);
  char *v239;
  uint64_t v240;
  uint64_t (*v241)(uint64_t);
  uint64_t v242;
  uint64_t v243;
  void (*v244)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v245;
  uint64_t v246;
  unint64_t result;
  uint64_t v248;
  void (*v249)(uint64_t, uint64_t);
  unsigned int (*v250)(uint64_t, uint64_t, uint64_t);
  uint64_t v251;
  uint64_t v252;
  void (*v253)(uint64_t, uint64_t);
  uint64_t v254;
  void (*v255)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  unsigned int (*v261)(uint64_t, uint64_t, uint64_t);
  uint64_t v262;
  uint64_t v263;
  void (*v264)(uint64_t, uint64_t);
  uint64_t v265;
  uint64_t v266;
  void (*v267)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  void (*v271)(uint64_t, char *, uint64_t);
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  int v275;
  void (*v276)(uint64_t, uint64_t, uint64_t);
  void (*v277)(uint64_t, uint64_t);
  uint64_t v278;
  unsigned int (*v279)(uint64_t, uint64_t, uint64_t);
  uint64_t v280;
  char *v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t (*v287)(uint64_t, uint64_t, uint64_t);
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  char v299;
  unint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  void (*v315)(char *, uint64_t);
  uint64_t v316;
  void (*v317)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v318;
  uint64_t v319;
  int v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  void (*v326)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v327;
  void (*v328)(uint64_t, uint64_t);
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  void (*v332)(uint64_t, uint64_t, uint64_t, uint64_t);
  void (*v333)(uint64_t, uint64_t);
  uint64_t *v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  int v340;
  uint64_t v341;
  uint64_t v342;
  unint64_t v343;
  uint64_t v344;
  char *v345;
  uint64_t v346;
  uint64_t v347;
  unint64_t v348;
  unint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  char *v354;
  uint64_t v355;
  uint64_t v356;
  char v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  unint64_t v363;
  uint64_t v364;
  uint64_t v365;
  unint64_t v366;
  unint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  void (*v372)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  Swift::Int v381;
  uint64_t v382;
  char *v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  char v387;
  int *v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  void (*v395)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  void (*v399)(uint64_t, uint64_t);
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  int v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  void (*v407)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  void (*v411)(char *, uint64_t);
  void (*v412)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v413;
  uint64_t v414;
  double v415;
  uint64_t v416;
  void (*v417)(uint64_t, uint64_t, uint64_t);
  void (*v418)(uint64_t, uint64_t, uint64_t);
  uint64_t v419;
  unint64_t v420;
  uint64_t v421;
  char *v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  char *v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  char *v432;
  uint64_t v433;
  uint64_t v434;
  void (*v435)(char *, char *, uint64_t);
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  void (*v441)(uint64_t, uint64_t, uint64_t);
  char v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  void (*v447)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  void (*v451)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  double v458;
  uint64_t v459;
  uint64_t v460;
  char *v461;
  uint64_t v462;
  uint64_t v463;
  void (*v464)(uint64_t, uint64_t, uint64_t);
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  void (*v473)(uint64_t, uint64_t, uint64_t);
  void (*v474)(uint64_t, uint64_t);
  uint64_t v475;
  int *v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t (*v482)(uint64_t, uint64_t, uint64_t);
  int v483;
  uint64_t v484;
  void (*v485)(uint64_t, uint64_t, uint64_t);
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  void (*v492)(uint64_t, uint64_t);
  uint64_t v493;
  uint64_t *v494;
  uint64_t v495;
  uint64_t v496;
  unint64_t v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  uint64_t v502;
  unint64_t v503;
  unint64_t v504;
  uint64_t v505;
  uint64_t v506;
  void (*v507)(uint64_t, uint64_t);
  void (*v508)(uint64_t, char *, uint64_t);
  char *v509;
  char *v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t *v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t v517;
  uint64_t v518;
  uint64_t v519;
  unint64_t v520;
  uint64_t v521;
  uint64_t v522;
  void (*v523)(uint64_t, uint64_t, uint64_t);
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  void (*v527)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v528;
  uint64_t v529;
  void (*v530)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v531;
  uint64_t v532;
  uint64_t v533;
  uint64_t v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  uint64_t v539;
  uint64_t v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  void (*v544)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v545;
  uint64_t v546;
  void (*v547)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v548;
  uint64_t v549;
  uint64_t v550;
  uint64_t v551;
  uint64_t v552;
  double v553;
  uint64_t v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t v557;
  uint64_t v558;
  char *v559;
  uint64_t v560;
  uint64_t v561;
  void (*v562)(char *, uint64_t);
  uint64_t v563;
  uint64_t v564;
  uint64_t v565;
  char *v566;
  uint64_t v567;
  uint64_t v568;
  void (*v569)(char *, uint64_t);
  uint64_t v570;
  uint64_t v571;
  uint64_t v572;
  uint64_t v573;
  uint64_t v574;
  void (*v575)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v576;
  uint64_t v577;
  uint64_t v578;
  uint64_t v579;
  uint64_t v580;
  uint64_t v581;
  uint64_t v582;
  uint64_t v583;
  unsigned int v584;
  uint64_t v585;
  uint64_t v586;
  void (*v587)(uint64_t, uint64_t);
  uint64_t v588;
  uint64_t v589;
  uint64_t v590;
  uint64_t v591;
  char *v592;
  uint64_t v593;
  uint64_t v594;
  uint64_t v595;
  char *v596;
  void (*v597)(char *, char *, uint64_t);
  uint64_t v598;
  void (*v599)(uint64_t, uint64_t, uint64_t);
  uint64_t v600;
  uint64_t v601;
  uint64_t v602;
  uint64_t v603;
  uint64_t v604;
  char *v605;
  uint64_t v606;
  uint64_t v607;
  uint64_t v608;
  uint64_t v609;
  uint64_t v610;
  uint64_t v611;
  uint64_t v612;
  uint64_t v613;
  uint64_t v614;
  uint64_t v615;
  uint64_t v616;
  char *v617;
  int64_t v618;
  uint64_t v619;
  unint64_t v620;
  uint64_t v621;
  char *v622;
  unint64_t v623;
  char *v624;
  uint64_t v625;
  uint64_t v626;
  uint64_t v627;
  char *v628;
  uint64_t v629;
  uint64_t v630;
  uint64_t v631;
  char *v632;
  char *v633;
  char *v634;
  uint64_t v635;
  char *v636;
  char *v637;
  uint64_t v638;
  uint64_t v639;
  uint64_t v640;
  uint64_t v641;
  uint64_t v642;
  uint64_t v643;
  uint64_t v644;
  uint64_t v645;
  char *v646;
  char *v647;
  uint64_t v648;
  uint64_t v649;
  uint64_t v650;
  uint64_t v651;
  uint64_t v652;
  uint64_t v653;
  char *v654;
  uint64_t v655;
  uint64_t v656;
  uint64_t v657;
  uint64_t v658;
  uint64_t v659;
  uint64_t v660;
  uint64_t v661;
  uint64_t v662;
  uint64_t v663;
  uint64_t v664;
  uint64_t v665;
  char *v666;
  uint64_t v667;
  uint64_t v668;
  char *v669;
  uint64_t *v670;
  char *v671;
  uint64_t v672;
  uint64_t v673;
  uint64_t v674;
  uint64_t v675;
  uint64_t v676;
  uint64_t v677;
  uint64_t v678;
  uint64_t v679;
  uint64_t v680;
  uint64_t v681;
  uint64_t v682;
  uint64_t v683;
  uint64_t v684;
  uint64_t v685;
  uint64_t v686;
  char *v687;
  uint64_t v688;
  uint64_t v689;
  uint64_t v690;
  uint64_t v691;
  uint64_t v692;
  char *v693;
  uint64_t v694;
  uint64_t v695;
  uint64_t v696;
  uint64_t v697;
  uint64_t v698;
  uint64_t v699;
  uint64_t v700;
  uint64_t v701;
  uint64_t v702;
  char *v703;
  char *v704;
  uint64_t v705;
  uint64_t v706;
  char *v707;
  uint64_t v708;
  uint64_t v709;
  uint64_t v710;
  uint64_t v711;
  char *v712;
  unint64_t v713;
  char *v714;
  void (*v715)(uint64_t, uint64_t, uint64_t);
  uint64_t v716;
  uint64_t v717;
  uint64_t v718;
  uint64_t v719;
  void (*v720)(char *, unint64_t, uint64_t);
  char *v721;
  uint64_t v722;
  char *v723;
  uint64_t v724;
  void (*v725)(uint64_t, uint64_t);
  uint64_t v726;
  uint64_t v727;
  uint64_t v728;
  uint64_t v729;
  unsigned int (*v730)(uint64_t, uint64_t, uint64_t);
  uint64_t v731;
  uint64_t v732;
  uint64_t v733;
  _QWORD v734[7];
  uint64_t v735;
  uint64_t v736;

  v729 = a4;
  v730 = a3;
  v733 = a1;
  v5 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
  sub_1BC998AB0(0, &qword_1ED6C3138, type metadata accessor for SignificantChange.Period, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v6);
  v645 = (uint64_t)&v599 - v7;
  v689 = sub_1BCAB4E78();
  v688 = *(_QWORD *)(v689 - 8);
  MEMORY[0x1E0C80A78](v689);
  v687 = (char *)&v599 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v690 = type metadata accessor for SignificantChange.Notification(0);
  v691 = *(_QWORD *)(v690 - 8);
  MEMORY[0x1E0C80A78](v690);
  v670 = (uint64_t *)((char *)&v599 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v10);
  v696 = (uint64_t)&v599 - v11;
  MEMORY[0x1E0C80A78](v12);
  v636 = (char *)&v599 - v13;
  sub_1BCA8025C(0);
  MEMORY[0x1E0C80A78](v14);
  v627 = (uint64_t)&v599 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16);
  v637 = (char *)&v599 - v17;
  v692 = type metadata accessor for SignificantChange.Period(0);
  v694 = *(_QWORD *)(v692 - 8);
  MEMORY[0x1E0C80A78](v692);
  v626 = (uint64_t)&v599 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19);
  v710 = (uint64_t)&v599 - v20;
  MEMORY[0x1E0C80A78](v21);
  v702 = (uint64_t)&v599 - v22;
  MEMORY[0x1E0C80A78](v23);
  v662 = (uint64_t)&v599 - v24;
  MEMORY[0x1E0C80A78](v25);
  v665 = (uint64_t)&v599 - v26;
  MEMORY[0x1E0C80A78](v27);
  v664 = (uint64_t)&v599 - v28;
  sub_1BC998AB0(0, &qword_1ED6C3640, (uint64_t (*)(uint64_t))sub_1BC9BD26C, v5);
  MEMORY[0x1E0C80A78](v29);
  v624 = (char *)&v599 - v30;
  sub_1BCA7F3E0(0);
  MEMORY[0x1E0C80A78](v31);
  v655 = (uint64_t)&v599 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v33);
  v648 = (uint64_t)&v599 - v34;
  MEMORY[0x1E0C80A78](v35);
  v649 = (uint64_t)&v599 - v36;
  MEMORY[0x1E0C80A78](v37);
  v638 = (uint64_t)&v599 - v38;
  MEMORY[0x1E0C80A78](v39);
  v629 = (uint64_t)&v599 - v40;
  sub_1BCA7EFBC(0);
  MEMORY[0x1E0C80A78](v41);
  v686 = (uint64_t)&v599 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v43);
  v685 = (uint64_t)&v599 - v44;
  MEMORY[0x1E0C80A78](v45);
  v699 = (uint64_t)&v599 - v46;
  MEMORY[0x1E0C80A78](v47);
  v679 = (uint64_t)&v599 - v48;
  MEMORY[0x1E0C80A78](v49);
  v677 = (uint64_t)&v599 - v50;
  MEMORY[0x1E0C80A78](v51);
  v680 = (uint64_t)&v599 - v52;
  MEMORY[0x1E0C80A78](v53);
  v678 = (uint64_t)&v599 - v54;
  MEMORY[0x1E0C80A78](v55);
  v625 = (uint64_t)&v599 - v56;
  MEMORY[0x1E0C80A78](v57);
  v672 = (uint64_t)&v599 - v58;
  MEMORY[0x1E0C80A78](v59);
  v660 = (uint64_t)&v599 - v60;
  MEMORY[0x1E0C80A78](v61);
  v632 = (char *)&v599 - v62;
  MEMORY[0x1E0C80A78](v63);
  v639 = (uint64_t)&v599 - v64;
  MEMORY[0x1E0C80A78](v65);
  v663 = (uint64_t)&v599 - v66;
  MEMORY[0x1E0C80A78](v67);
  v644 = (uint64_t)&v599 - v68;
  MEMORY[0x1E0C80A78](v69);
  v643 = (uint64_t)&v599 - v70;
  MEMORY[0x1E0C80A78](v71);
  v667 = (uint64_t)&v599 - v72;
  v73 = type metadata accessor for SignificantChange(0);
  v74 = *(_QWORD *)(v73 - 8);
  v731 = v73;
  v732 = v74;
  MEMORY[0x1E0C80A78](v73);
  v684 = (uint64_t)&v599 - ((v75 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v76);
  v683 = (uint64_t)&v599 - v77;
  MEMORY[0x1E0C80A78](v78);
  v697 = (uint64_t)&v599 - v79;
  MEMORY[0x1E0C80A78](v80);
  v661 = (uint64_t)&v599 - v81;
  MEMORY[0x1E0C80A78](v82);
  v642 = (uint64_t)&v599 - v83;
  MEMORY[0x1E0C80A78](v84);
  v658 = (uint64_t)&v599 - v85;
  sub_1BCA7F46C(0);
  MEMORY[0x1E0C80A78](v86);
  v706 = (uint64_t)&v599 - ((v87 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v88);
  v669 = (char *)&v599 - v89;
  MEMORY[0x1E0C80A78](v90);
  v705 = (uint64_t)&v599 - v91;
  v92 = sub_1BCAB4E54();
  v716 = *(_QWORD *)(v92 - 8);
  MEMORY[0x1E0C80A78](v92);
  v713 = (unint64_t)&v599 - ((v93 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v94);
  v693 = (char *)&v599 - v95;
  MEMORY[0x1E0C80A78](v96);
  v707 = (char *)&v599 - v97;
  MEMORY[0x1E0C80A78](v98);
  v712 = (char *)&v599 - v99;
  sub_1BCA7F41C(0);
  MEMORY[0x1E0C80A78](v100);
  v657 = (uint64_t)&v599 - ((v101 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v102);
  v698 = (uint64_t)&v599 - v103;
  MEMORY[0x1E0C80A78](v104);
  v652 = (uint64_t)&v599 - v105;
  MEMORY[0x1E0C80A78](v106);
  v653 = (uint64_t)&v599 - v107;
  MEMORY[0x1E0C80A78](v108);
  v635 = (uint64_t)&v599 - v109;
  MEMORY[0x1E0C80A78](v110);
  v641 = (uint64_t)&v599 - v111;
  MEMORY[0x1E0C80A78](v112);
  v668 = (uint64_t)&v599 - v113;
  MEMORY[0x1E0C80A78](v114);
  v715 = (void (*)(uint64_t, uint64_t, uint64_t))((char *)&v599 - v115);
  v719 = type metadata accessor for SignificantChangeEngine.State.FrequencyShift(0);
  v717 = *(_QWORD *)(v719 - 8);
  MEMORY[0x1E0C80A78](v719);
  v675 = (uint64_t)&v599 - ((v116 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v117);
  v676 = (uint64_t)&v599 - v118;
  MEMORY[0x1E0C80A78](v119);
  v634 = (char *)&v599 - v120;
  MEMORY[0x1E0C80A78](v121);
  v123 = (char *)&v599 - v122;
  sub_1BCA7EFF8(0);
  MEMORY[0x1E0C80A78](v124);
  v656 = (uint64_t)&v599 - ((v125 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v126);
  v682 = (uint64_t)&v599 - v127;
  MEMORY[0x1E0C80A78](v128);
  v654 = (char *)&v599 - v129;
  MEMORY[0x1E0C80A78](v130);
  v650 = (uint64_t)&v599 - v131;
  MEMORY[0x1E0C80A78](v132);
  v673 = (uint64_t)&v599 - v133;
  MEMORY[0x1E0C80A78](v134);
  v646 = (char *)&v599 - v135;
  MEMORY[0x1E0C80A78](v136);
  v651 = (uint64_t)&v599 - v137;
  MEMORY[0x1E0C80A78](v138);
  v674 = (uint64_t)&v599 - v139;
  MEMORY[0x1E0C80A78](v140);
  v647 = (char *)&v599 - v141;
  MEMORY[0x1E0C80A78](v142);
  v631 = (uint64_t)&v599 - v143;
  MEMORY[0x1E0C80A78](v144);
  v659 = (uint64_t)&v599 - v145;
  MEMORY[0x1E0C80A78](v146);
  v633 = (char *)&v599 - v147;
  MEMORY[0x1E0C80A78](v148);
  v700 = (uint64_t)&v599 - v149;
  MEMORY[0x1E0C80A78](v150);
  v724 = (uint64_t)&v599 - v151;
  MEMORY[0x1E0C80A78](v152);
  v630 = (uint64_t)&v599 - v153;
  MEMORY[0x1E0C80A78](v154);
  v640 = (uint64_t)&v599 - v155;
  MEMORY[0x1E0C80A78](v156);
  v628 = (char *)&v599 - v157;
  MEMORY[0x1E0C80A78](v158);
  v725 = (void (*)(uint64_t, uint64_t))((char *)&v599 - v159);
  v726 = type metadata accessor for SignificantChangeEngine.State(0);
  v160 = *(_QWORD *)(v726 - 8);
  MEMORY[0x1E0C80A78](v726);
  v722 = (uint64_t)&v599 - ((v161 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v162);
  v718 = (uint64_t)&v599 - v163;
  sub_1BC9BD26C(0);
  v727 = v164;
  v165 = *(_QWORD *)(v164 - 8);
  MEMORY[0x1E0C80A78](v164);
  v720 = (void (*)(char *, unint64_t, uint64_t))((char *)&v599 - ((v166 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v167);
  v671 = (char *)&v599 - v168;
  MEMORY[0x1E0C80A78](v169);
  v721 = (char *)&v599 - v170;
  MEMORY[0x1E0C80A78](v171);
  v703 = (char *)&v599 - v172;
  MEMORY[0x1E0C80A78](v173);
  v681 = (uint64_t)&v599 - v174;
  MEMORY[0x1E0C80A78](v175);
  v711 = (uint64_t)&v599 - v176;
  MEMORY[0x1E0C80A78](v177);
  v666 = (char *)&v599 - v178;
  MEMORY[0x1E0C80A78](v179);
  v714 = (char *)&v599 - v180;
  MEMORY[0x1E0C80A78](v181);
  v183 = (char *)&v599 - v182;
  MEMORY[0x1E0C80A78](v184);
  v701 = (uint64_t)&v599 - v185;
  MEMORY[0x1E0C80A78](v186);
  v709 = (uint64_t)&v599 - v187;
  MEMORY[0x1E0C80A78](v188);
  v695 = (uint64_t)&v599 - v189;
  MEMORY[0x1E0C80A78](v190);
  v708 = (uint64_t)&v599 - v191;
  MEMORY[0x1E0C80A78](v192);
  v728 = (uint64_t)&v599 - v193;
  MEMORY[0x1E0C80A78](v194);
  v196 = (char *)&v599 - v195;
  sub_1BC998AB0(0, (unint64_t *)&qword_1ED6C71E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAE5D0], v5);
  MEMORY[0x1E0C80A78](v197);
  v199 = (char *)&v599 - ((v198 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v200);
  v202 = (char *)&v599 - v201;
  v203 = sub_1BCAB4BD8();
  v204 = *(_QWORD *)(v203 - 8);
  MEMORY[0x1E0C80A78](v203);
  MEMORY[0x1E0C80A78](v205);
  MEMORY[0x1E0C80A78](v206);
  MEMORY[0x1E0C80A78](v207);
  MEMORY[0x1E0C80A78](v208);
  MEMORY[0x1E0C80A78](v209);
  MEMORY[0x1E0C80A78](v210);
  MEMORY[0x1E0C80A78](v211);
  MEMORY[0x1E0C80A78]((char *)&v599 - v212);
  MEMORY[0x1E0C80A78](v213);
  v704 = (char *)&v599 - v214;
  MEMORY[0x1E0C80A78](v215);
  v229 = MEMORY[0x1E0C80A78](v216);
  v230 = *(_QWORD *)(v733 + 16);
  if (!v230)
  {
    (*(void (**)(char *, uint64_t, uint64_t, __n128))(v204 + 56))(v202, 1, 1, v229);
    goto LABEL_6;
  }
  v612 = v224;
  v605 = v183;
  v623 = v230;
  v608 = v223;
  v603 = v222;
  v604 = v221;
  v609 = v219;
  v610 = v218;
  v611 = v217;
  v606 = v228;
  v607 = v227;
  v621 = v160;
  v622 = (char *)v226;
  v723 = (char *)&v599 - v225;
  v617 = v123;
  v619 = v92;
  v231 = *(double *)a2;
  v616 = *(_QWORD *)(a2 + 8);
  v232 = *(_QWORD *)(a2 + 24);
  v615 = *(_QWORD *)(a2 + 16);
  v618 = *(_QWORD *)(a2 + 32);
  v614 = *(_QWORD *)(a2 + 40);
  v233 = *(double *)(a2 + 48);
  v620 = (*(unsigned __int8 *)(v165 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v165 + 80);
  v234 = (void (*)(char *, unint64_t, uint64_t))(v733 + v620);
  v235 = v220;
  sub_1BC9964B8(v733 + v620, (uint64_t)v196, (uint64_t (*)(_QWORD))sub_1BC9BD26C);
  v236 = *(void (**)(char *, char *, uint64_t))(v204 + 32);
  v236(v202, v196, v235);
  v237 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v204 + 56);
  v237(v202, 0, 1, v235);
  v238 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v204 + 48);
  if (v238(v202, 1, v235) == 1)
  {
LABEL_6:
    v241 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CAE5D0];
    v242 = (uint64_t)v202;
    goto LABEL_7;
  }
  v602 = v232;
  v239 = v723;
  v236(v723, v202, v235);
  v601 = v165;
  v613 = *(_QWORD *)(v165 + 72);
  v240 = v728;
  sub_1BC9964B8((uint64_t)v234 + v613 * (v623 - 1), v728, (uint64_t (*)(_QWORD))sub_1BC9BD26C);
  v236(v199, (char *)v240, v235);
  v237(v199, 0, 1, v235);
  if (v238(v199, 1, v235) == 1)
  {
    (*(void (**)(char *, uint64_t))(v204 + 8))(v239, v235);
    v241 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CAE5D0];
    v242 = (uint64_t)v199;
LABEL_7:
    sub_1BC9B3A38(v242, (unint64_t *)&qword_1ED6C71E0, v241);
    v243 = v731;
    v244 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v732 + 56);
    v245 = v729;
    v244(v729, 1, 1, v731);
    v246 = type metadata accessor for SignificantChangeEngine.Output(0);
    v244(v245 + *(int *)(v246 + 20), 1, 1, v243);
    sub_1BCA7EFEC((uint64_t)v730, v245 + *(int *)(v246 + 24));
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v246 - 8) + 56))(v245, 0, 1, v246);
  }
  v248 = (uint64_t)v622;
  v599 = (void (*)(uint64_t, uint64_t, uint64_t))v236;
  v236(v622, v199, v235);
  v249 = v725;
  sub_1BCA7EFEC((uint64_t)v730, (uint64_t)v725);
  v250 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v621 + 48);
  v251 = v726;
  if (v250((uint64_t)v249, 1, v726) == 1)
  {
    sub_1BC997208((uint64_t)v249, (uint64_t (*)(_QWORD))sub_1BCA7EFF8);
    v252 = v724;
    sub_1BCA77EEC(v733, v602, v724, v233);
    v253 = *(void (**)(uint64_t, uint64_t))(v204 + 8);
    v253(v248, v235);
    v253((uint64_t)v723, v235);
    v254 = v731;
    v255 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v732 + 56);
    v245 = v729;
    v255(v729, 1, 1, v731);
    v246 = type metadata accessor for SignificantChangeEngine.Output(0);
    v255(v245 + *(int *)(v246 + 20), 1, 1, v254);
    sub_1BC9AE330(v252, v245 + *(int *)(v246 + 24), (uint64_t (*)(_QWORD))sub_1BCA7EFF8);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v246 - 8) + 56))(v245, 0, 1, v246);
  }
  v600 = v235;
  v256 = v718;
  sub_1BC9AE330((uint64_t)v249, v718, type metadata accessor for SignificantChangeEngine.State);
  *(double *)v734 = v231;
  v734[1] = v616;
  v734[2] = v615;
  v257 = v602;
  v734[3] = v602;
  v734[4] = v618;
  v734[5] = v614;
  *(double *)&v734[6] = v233;
  v258 = v722;
  v259 = v733;
  sub_1BCA78BAC(v733, (uint64_t)v734, v256, v722);
  v260 = (uint64_t)v715;
  sub_1BCA7F410(v256 + *(int *)(v251 + 24), (uint64_t)v715);
  v261 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v717 + 48);
  v262 = v719;
  if (v261(v260, 1, v719) == 1)
  {
    sub_1BC997208(v260, (uint64_t (*)(_QWORD))sub_1BCA7F41C);
    v263 = v724;
    sub_1BCA77EEC(v259, v257, v724, v233);
    sub_1BC997208(v258, type metadata accessor for SignificantChangeEngine.State);
    sub_1BC997208(v256, type metadata accessor for SignificantChangeEngine.State);
    v264 = *(void (**)(uint64_t, uint64_t))(v204 + 8);
    v265 = v600;
    v264((uint64_t)v622, v600);
    v264((uint64_t)v723, v265);
    v266 = v731;
    v267 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v732 + 56);
    v245 = v729;
    v267(v729, 1, 1, v731);
    v246 = type metadata accessor for SignificantChangeEngine.Output(0);
    v267(v245 + *(int *)(v246 + 20), 1, 1, v266);
    sub_1BC9AE330(v263, v245 + *(int *)(v246 + 24), (uint64_t (*)(_QWORD))sub_1BCA7EFF8);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v246 - 8) + 56))(v245, 0, 1, v246);
  }
  v730 = v250;
  v268 = (uint64_t)v617;
  sub_1BC9AE330(v260, (uint64_t)v617, type metadata accessor for SignificantChangeEngine.State.FrequencyShift);
  if ((*(_BYTE *)(v268 + *(int *)(v262 + 20)) & 1) != 0)
  {
    v269 = v268;
    v270 = v706;
    sub_1BC9AFC58(v269, v706);
    v271 = *(void (**)(uint64_t, char *, uint64_t))(v204 + 16);
    v272 = v612;
    v273 = v600;
    v271(v612, v723, v600);
    v274 = v716;
    v275 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v716 + 48))(v270, 1, v619);
    v715 = (void (*)(uint64_t, uint64_t, uint64_t))v271;
    if (v275 == 1)
    {
      v276 = (void (*)(uint64_t, uint64_t, uint64_t))v713;
      sub_1BCAB4BC0();
      v277 = *(void (**)(uint64_t, uint64_t))(v204 + 8);
      v277(v272, v273);
      v278 = sub_1BC997208(v270, (uint64_t (*)(_QWORD))sub_1BCA7F46C);
    }
    else
    {
      v277 = *(void (**)(uint64_t, uint64_t))(v204 + 8);
      v277(v272, v273);
      v276 = (void (*)(uint64_t, uint64_t, uint64_t))v713;
      v278 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v274 + 32))(v713, v270, v619);
    }
    v285 = v621;
    v286 = (uint64_t)v703;
    v287 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v261;
    MEMORY[0x1E0C80A78](v278);
    *(&v599 - 2) = v276;
    v288 = swift_bridgeObjectRetain();
    v289 = sub_1BCA8DBD4(v288, (uint64_t (*)(_QWORD, _QWORD, _QWORD))sub_1BCA8F5AC);
    swift_bridgeObjectRelease();
    v290 = *(_QWORD *)(v289 + 16);
    v725 = v277;
    if (v290)
    {
      v714 = 0;
      v291 = v289;
      v292 = v289 + v620;
      v293 = v289 + v620;
      v294 = v727;
      while (1)
      {
        sub_1BC9964B8(v293, v286, (uint64_t (*)(_QWORD))sub_1BC9BD26C);
        v295 = *(int *)(v294 + 48);
        if (*(_BYTE *)(v286 + 8 + v295) != 1)
          break;
        sub_1BC997208(v286, (uint64_t (*)(_QWORD))sub_1BC9BD26C);
        v293 += v613;
        if (!--v290)
        {
          swift_bridgeObjectRelease();
          v285 = v621;
          goto LABEL_33;
        }
      }
      v335 = v294;
      v336 = v711;
      v337 = v711 + v295;
      v338 = v681;
      sub_1BC9AE330(v286, v681, (uint64_t (*)(_QWORD))sub_1BC9BD26C);
      v339 = v338 + *(int *)(v335 + 48);
      v599(v336, v338, v600);
      v340 = *(unsigned __int8 *)(v339 + 8);
      v724 = *(_QWORD *)v339;
      *(_QWORD *)v337 = v724;
      LODWORD(v733) = v340;
      *(_BYTE *)(v337 + 8) = v340;
      v341 = MEMORY[0x1E0DEE9D8];
      v734[0] = MEMORY[0x1E0DEE9D8];
      v342 = *(_QWORD *)(v291 + 16);
      result = swift_bridgeObjectRetain();
      if (v342)
      {
        v343 = 0;
        v344 = (uint64_t)v721;
        v345 = v721 + 8;
        v346 = v727;
        v347 = v613;
        while (v343 < *(_QWORD *)(v291 + 16))
        {
          sub_1BC9964B8(v292, v344, (uint64_t (*)(_QWORD))sub_1BC9BD26C);
          if ((v345[*(int *)(v346 + 48)] & 1) != 0)
          {
            result = sub_1BC997208(v344, (uint64_t (*)(_QWORD))sub_1BC9BD26C);
          }
          else
          {
            sub_1BC9AE330(v344, (uint64_t)v720, (uint64_t (*)(_QWORD))sub_1BC9BD26C);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              sub_1BC9BAE48(0, *(_QWORD *)(v341 + 16) + 1, 1);
            v341 = v734[0];
            v349 = *(_QWORD *)(v734[0] + 16);
            v348 = *(_QWORD *)(v734[0] + 24);
            if (v349 >= v348 >> 1)
            {
              sub_1BC9BAE48(v348 > 1, v349 + 1, 1);
              v341 = v734[0];
            }
            *(_QWORD *)(v341 + 16) = v349 + 1;
            v347 = v613;
            result = sub_1BC9AE330((uint64_t)v720, v341 + v620 + v349 * v613, (uint64_t (*)(_QWORD))sub_1BC9BD26C);
            v346 = v727;
          }
          ++v343;
          v292 += v347;
          v344 = (uint64_t)v721;
          if (v342 == v343)
          {
            v341 = v734[0];
            goto LABEL_74;
          }
        }
        __break(1u);
LABEL_127:
        __break(1u);
LABEL_128:
        __break(1u);
        goto LABEL_129;
      }
      v346 = v727;
LABEL_74:
      swift_bridgeObjectRelease();
      v457 = *(_QWORD *)(v341 + 16);
      swift_release();
      v721 = (char *)v457;
      v458 = (double)v457;
      v459 = v346;
      v460 = (uint64_t)v671;
      v461 = &v671[*(int *)(v346 + 48)];
      v462 = v711;
      v463 = v600;
      v464 = v715;
      v465 = ((uint64_t (*)(char *, uint64_t, uint64_t))v715)(v671, v711, v600);
      v466 = v724;
      *(_QWORD *)v461 = v724;
      v461[8] = v733;
      MEMORY[0x1E0C80A78](v465);
      *(&v599 - 2) = (void (*)(uint64_t, uint64_t, uint64_t))v460;
      sub_1BCA67604((uint64_t (*)(char *))sub_1BCA8F5B8, (uint64_t)(&v599 - 4), v291, (uint64_t (*)(_QWORD))sub_1BC9BD26C, (void (*)(BOOL, uint64_t, uint64_t))sub_1BC9BAE48);
      v468 = v467;
      sub_1BC997208(v460, (uint64_t (*)(_QWORD))sub_1BC9BD26C);
      v469 = *(_QWORD *)(v468 + 16);
      swift_bridgeObjectRelease();
      v720 = *(void (**)(char *, unint64_t, uint64_t))(v716 + 16);
      v720(v707, v713, v619);
      v470 = v728;
      v471 = v728 + *(int *)(v459 + 48);
      v472 = v462;
      v473 = v464;
      v464(v728, v472, v463);
      *(_QWORD *)v471 = v466;
      LOBYTE(v459) = v733;
      *(_BYTE *)(v471 + 8) = v733;
      sub_1BCAB4BC0();
      v474 = v725;
      v725(v470, v463);
      v475 = v702;
      sub_1BCAB4BA8();
      v476 = (int *)v692;
      *(_QWORD *)(v475 + *(int *)(v692 + 20)) = 0;
      *(_QWORD *)(v475 + v476[6]) = 0;
      *(_BYTE *)(v475 + v476[7]) = 2;
      v477 = v470 + *(int *)(v727 + 48);
      v473(v470, v711, v463);
      *(_QWORD *)v477 = v466;
      *(_BYTE *)(v477 + 8) = v459;
      sub_1BCAB4BC0();
      v474(v470, v463);
      sub_1BCAB4B9C();
      v478 = v710;
      sub_1BCAB4BA8();
      *(_QWORD *)(v478 + v476[5]) = 0;
      *(double *)(v478 + v476[6]) = v458 / (double)v469;
      *(_BYTE *)(v478 + v476[7]) = 0;
      v479 = (uint64_t)&v617[*(int *)(v719 + 24)];
      v480 = v672;
      sub_1BCA7EFB0(v479, v672);
      v481 = v731;
      v482 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v732 + 48);
      v483 = v482(v480, 1, v731);
      v245 = v729;
      v484 = v690;
      if (v483 == 1)
      {
        sub_1BC997208(v480, (uint64_t (*)(_QWORD))sub_1BCA7EFBC);
        v485 = v715;
      }
      else
      {
        v486 = (uint64_t)v715;
        v487 = *(_QWORD *)(v480 + *(int *)(v481 + 20));
        swift_bridgeObjectRetain();
        sub_1BC997208(v480, type metadata accessor for SignificantChange);
        v488 = v694;
        if (*(_QWORD *)(v487 + 16))
        {
          v489 = v645;
          sub_1BC9964B8(v487 + ((*(unsigned __int8 *)(v694 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v694 + 80)), v645, type metadata accessor for SignificantChange.Period);
          v490 = 0;
        }
        else
        {
          v490 = 1;
          v489 = v645;
        }
        (*(void (**)(uint64_t, uint64_t, uint64_t, int *))(v488 + 56))(v489, v490, 1, v476);
        swift_bridgeObjectRelease();
        if ((*(unsigned int (**)(uint64_t, uint64_t, int *))(v488 + 48))(v489, 1, v476) != 1)
        {
          v553 = *(double *)(v489 + v476[6]);
          sub_1BC997208(v489, type metadata accessor for SignificantChange.Period);
          v485 = (void (*)(uint64_t, uint64_t, uint64_t))v486;
          v508 = (void (*)(uint64_t, char *, uint64_t))v720;
          if (v553 > 0.0)
          {
            v554 = v479;
            v555 = v625;
            sub_1BCA7EFB0(v554, v625);
            if (v482(v555, 1, v481) == 1)
            {
              sub_1BC997208(v555, (uint64_t (*)(_QWORD))sub_1BCA7EFBC);
              v556 = v691;
              v557 = v627;
              (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v691 + 56))(v627, 1, 1, v484);
            }
            else
            {
              v557 = v627;
              sub_1BC9964B8(v555 + *(int *)(v481 + 24), v627, (uint64_t (*)(_QWORD))sub_1BCA8025C);
              sub_1BC997208(v555, type metadata accessor for SignificantChange);
              v556 = v691;
            }
            v591 = v626;
            sub_1BC9964B8(v710, v626, type metadata accessor for SignificantChange.Period);
            if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v556 + 48))(v557, 1, v484) == 1)
            {
              sub_1BCAB4BC0();
              v592 = v687;
              sub_1BCAB4E6C();
              v593 = sub_1BCAB4E60();
              v595 = v594;
              (*(void (**)(char *, uint64_t))(v688 + 8))(v592, v689);
              v596 = v693;
              _s19HealthVisualization25PresentationDateProvidingPAAE012presentationD010Foundation0D0VvgZ_0();
              sub_1BC997208(v591, type metadata accessor for SignificantChange.Period);
              v514 = v670;
              *v670 = v593;
              v514[1] = v595;
              *((_BYTE *)v514 + 16) = 0;
              v597 = *(void (**)(char *, char *, uint64_t))(v716 + 32);
              v598 = v619;
              v597((char *)v514 + *(int *)(v484 + 24), v596, v619);
              v597((char *)v514 + *(int *)(v484 + 28), v707, v598);
              sub_1BC997208(v627, (uint64_t (*)(_QWORD))sub_1BCA8025C);
            }
            else
            {
              sub_1BC997208(v591, type metadata accessor for SignificantChange.Period);
              v514 = v670;
              sub_1BC9AE330(v557, (uint64_t)v670, type metadata accessor for SignificantChange.Notification);
            }
            goto LABEL_97;
          }
LABEL_96:
          v509 = v707;
          sub_1BCAB4BC0();
          v510 = v687;
          sub_1BCAB4E6C();
          v511 = sub_1BCAB4E60();
          v513 = v512;
          (*(void (**)(char *, uint64_t))(v688 + 8))(v510, v689);
          v514 = v670;
          _s19HealthVisualization25PresentationDateProvidingPAAE012presentationD010Foundation0D0VvgZ_0();
          *v514 = v511;
          v514[1] = v513;
          *((_BYTE *)v514 + 16) = 0;
          (*(void (**)(char *, char *, uint64_t))(v716 + 32))((char *)v514 + *(int *)(v484 + 28), v509, v619);
LABEL_97:
          if (*((_BYTE *)v514 + 16) == 1)
          {
            v515 = v696;
            sub_1BC9964B8((uint64_t)v514, v696, type metadata accessor for SignificantChange.Notification);
          }
          else
          {
            v517 = *v514;
            v516 = v514[1];
            v515 = v696;
            v518 = v619;
            v508(v696 + *(int *)(v484 + 24), (char *)v514 + *(int *)(v484 + 24), v619);
            v508(v515 + *(int *)(v484 + 28), (char *)v514 + *(int *)(v484 + 28), v518);
            *(_QWORD *)v515 = v517;
            *(_QWORD *)(v515 + 8) = v516;
            *(_BYTE *)(v515 + 16) = 1;
            swift_bridgeObjectRetain();
          }
          sub_1BC997208((uint64_t)v514, type metadata accessor for SignificantChange.Notification);
          v519 = v697;
          sub_1BC9964B8(v702, v697, type metadata accessor for SignificantChange.Period);
          sub_1BCA8F54C(0);
          v520 = (*(unsigned __int8 *)(v694 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v694 + 80);
          v521 = swift_allocObject();
          *(_OWORD *)(v521 + 16) = xmmword_1BCABE680;
          sub_1BC9964B8(v710, v521 + v520, type metadata accessor for SignificantChange.Period);
          v522 = v519 + *(int *)(v481 + 24);
          sub_1BC9964B8(v515, v522, type metadata accessor for SignificantChange.Notification);
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v691 + 56))(v522, 0, 1, v484);
          *(_QWORD *)(v519 + *(int *)(v481 + 20)) = v521;
          if ((uint64_t)v721 >= v602)
          {
            v536 = v728;
            v537 = v728 + *(int *)(v727 + 48);
            v538 = v600;
            v485(v728, v711, v600);
            *(_QWORD *)v537 = v724;
            *(_BYTE *)(v537 + 8) = v733;
            v539 = v519;
            v540 = (uint64_t)v669;
            sub_1BCAB4B9C();
            v725(v536, v538);
            (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v716 + 56))(v540, 0, 1, v619);
            v541 = v719;
            v542 = v676;
            v543 = v676 + *(int *)(v719 + 24);
            sub_1BC9964B8(v539, v543, type metadata accessor for SignificantChange);
            v544 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v732 + 56);
            v544(v543, 0, 1, v481);
            sub_1BC9AE330(v540, v542, (uint64_t (*)(_QWORD))sub_1BCA7F46C);
            *(_BYTE *)(v542 + *(int *)(v541 + 20)) = 0;
            v544(v678, 1, 1, v481);
            v545 = v680;
            sub_1BC9964B8(v539, v680, type metadata accessor for SignificantChange);
            v544(v545, 0, 1, v481);
            v546 = v674;
            sub_1BC9964B8(v722, v674, type metadata accessor for SignificantChangeEngine.State);
            v547 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v621 + 56);
            v548 = v726;
            v547(v546, 0, 1, v726);
            v549 = v653;
            sub_1BC9964B8(v542, v653, type metadata accessor for SignificantChangeEngine.State.FrequencyShift);
            (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v717 + 56))(v549, 0, 1, v541);
            v715(v607, (uint64_t)v622, v538);
            v550 = v651;
            sub_1BCA7EFEC(v546, v651);
            if (v730(v550, 1, v548) == 1)
            {
              sub_1BC997208(v550, (uint64_t (*)(_QWORD))sub_1BCA7EFF8);
              v551 = type metadata accessor for SignificantChangeEngine.State.MeanShift(0);
              v552 = v649;
              (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v551 - 8) + 56))(v649, 1, 1, v551);
            }
            else
            {
              v552 = v649;
              sub_1BCA7F3D4(v550 + *(int *)(v548 + 20), v649);
              sub_1BC997208(v550, type metadata accessor for SignificantChangeEngine.State);
            }
            v565 = v696;
            v566 = v647;
            sub_1BCA7F410(v549, (uint64_t)&v647[*(int *)(v548 + 24)]);
            v567 = v600;
            v599((uint64_t)v566, v607, v600);
            sub_1BC9AE330(v552, (uint64_t)&v566[*(int *)(v548 + 20)], (uint64_t (*)(_QWORD))sub_1BCA7F3E0);
            sub_1BC997208(v549, (uint64_t (*)(_QWORD))sub_1BCA7F41C);
            v568 = v548;
            sub_1BC997208(v674, (uint64_t (*)(_QWORD))sub_1BCA7EFF8);
            sub_1BC997208(v676, type metadata accessor for SignificantChangeEngine.State.FrequencyShift);
            sub_1BC997208(v697, type metadata accessor for SignificantChange);
            sub_1BC997208(v565, type metadata accessor for SignificantChange.Notification);
            sub_1BC997208(v710, type metadata accessor for SignificantChange.Period);
            sub_1BC997208(v702, type metadata accessor for SignificantChange.Period);
            sub_1BC997208(v711, (uint64_t (*)(_QWORD))sub_1BC9BD26C);
            sub_1BC997208(v722, type metadata accessor for SignificantChangeEngine.State);
            sub_1BC997208(v718, type metadata accessor for SignificantChangeEngine.State);
            v569 = (void (*)(char *, uint64_t))v725;
            v725((uint64_t)v622, v567);
            v569(v723, v567);
            v547((uint64_t)v566, 0, 1, v568);
            sub_1BC9AE330(v678, v245, (uint64_t (*)(_QWORD))sub_1BCA7EFBC);
            v246 = type metadata accessor for SignificantChangeEngine.Output(0);
            sub_1BC9AE330(v680, v245 + *(int *)(v246 + 20), (uint64_t (*)(_QWORD))sub_1BCA7EFBC);
            v563 = v245 + *(int *)(v246 + 24);
            v564 = (uint64_t)v566;
          }
          else
          {
            v523 = v485;
            v524 = v675;
            sub_1BC9AFC58((uint64_t)v617, v675);
            v525 = v719;
            v526 = v524 + *(int *)(v719 + 24);
            sub_1BC9964B8(v519, v526, type metadata accessor for SignificantChange);
            v527 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v732 + 56);
            v527(v526, 0, 1, v481);
            *(_BYTE *)(v524 + *(int *)(v525 + 20)) = 1;
            v527(v677, 1, 1, v481);
            v528 = v679;
            sub_1BC9964B8(v519, v679, type metadata accessor for SignificantChange);
            v527(v528, 0, 1, v481);
            v529 = v673;
            sub_1BC9964B8(v722, v673, type metadata accessor for SignificantChangeEngine.State);
            v530 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v621 + 56);
            v531 = v726;
            v530(v529, 0, 1, v726);
            v532 = v652;
            sub_1BC9964B8(v524, v652, type metadata accessor for SignificantChangeEngine.State.FrequencyShift);
            (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v717 + 56))(v532, 0, 1, v525);
            v523(v606, (uint64_t)v622, v600);
            v533 = v650;
            sub_1BCA7EFEC(v529, v650);
            if (v730(v533, 1, v531) == 1)
            {
              sub_1BC997208(v533, (uint64_t (*)(_QWORD))sub_1BCA7EFF8);
              v534 = type metadata accessor for SignificantChangeEngine.State.MeanShift(0);
              v535 = v648;
              (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v534 - 8) + 56))(v648, 1, 1, v534);
            }
            else
            {
              v535 = v648;
              sub_1BCA7F3D4(v533 + *(int *)(v531 + 20), v648);
              sub_1BC997208(v533, type metadata accessor for SignificantChangeEngine.State);
            }
            v558 = v696;
            v559 = v646;
            sub_1BCA7F410(v532, (uint64_t)&v646[*(int *)(v531 + 24)]);
            v560 = v600;
            v599((uint64_t)v559, v606, v600);
            sub_1BC9AE330(v535, (uint64_t)&v559[*(int *)(v531 + 20)], (uint64_t (*)(_QWORD))sub_1BCA7F3E0);
            sub_1BC997208(v532, (uint64_t (*)(_QWORD))sub_1BCA7F41C);
            v561 = v531;
            sub_1BC997208(v673, (uint64_t (*)(_QWORD))sub_1BCA7EFF8);
            sub_1BC997208(v675, type metadata accessor for SignificantChangeEngine.State.FrequencyShift);
            sub_1BC997208(v697, type metadata accessor for SignificantChange);
            sub_1BC997208(v558, type metadata accessor for SignificantChange.Notification);
            sub_1BC997208(v710, type metadata accessor for SignificantChange.Period);
            sub_1BC997208(v702, type metadata accessor for SignificantChange.Period);
            sub_1BC997208(v711, (uint64_t (*)(_QWORD))sub_1BC9BD26C);
            sub_1BC997208(v722, type metadata accessor for SignificantChangeEngine.State);
            sub_1BC997208(v718, type metadata accessor for SignificantChangeEngine.State);
            v562 = (void (*)(char *, uint64_t))v725;
            v725((uint64_t)v622, v560);
            v562(v723, v560);
            v530((uint64_t)v559, 0, 1, v561);
            sub_1BC9AE330(v677, v245, (uint64_t (*)(_QWORD))sub_1BCA7EFBC);
            v246 = type metadata accessor for SignificantChangeEngine.Output(0);
            sub_1BC9AE330(v679, v245 + *(int *)(v246 + 20), (uint64_t (*)(_QWORD))sub_1BCA7EFBC);
            v563 = v245 + *(int *)(v246 + 24);
            v564 = (uint64_t)v559;
          }
          sub_1BC9AE330(v564, v563, (uint64_t (*)(_QWORD))sub_1BCA7EFF8);
          (*(void (**)(unint64_t, uint64_t))(v716 + 8))(v713, v619);
LABEL_113:
          sub_1BC997208((uint64_t)v617, type metadata accessor for SignificantChangeEngine.State.FrequencyShift);
          return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v246 - 8) + 56))(v245, 0, 1, v246);
        }
        sub_1BC9B3A38(v489, &qword_1ED6C3138, type metadata accessor for SignificantChange.Period);
        v485 = (void (*)(uint64_t, uint64_t, uint64_t))v486;
      }
      v508 = (void (*)(uint64_t, char *, uint64_t))v720;
      goto LABEL_96;
    }
    swift_bridgeObjectRelease();
LABEL_33:
    v318 = v698;
    sub_1BCA7F410(v722 + *(int *)(v726 + 24), v698);
    v319 = v719;
    v320 = v287(v318, 1, v719);
    v245 = v729;
    v321 = v732;
    v322 = v699;
    if (v320 == 1)
    {
      sub_1BC997208(v318, (uint64_t (*)(_QWORD))sub_1BCA7F41C);
      v323 = v731;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v321 + 56))(v322, 1, 1, v731);
LABEL_36:
      sub_1BC997208(v322, (uint64_t (*)(_QWORD))sub_1BCA7EFBC);
      v324 = v722;
      v325 = v700;
      sub_1BC9964B8(v722, v700, type metadata accessor for SignificantChangeEngine.State);
      v326 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v285 + 56);
      v327 = v726;
      v326(v325, 0, 1, v726);
      v329 = v724;
      v328 = v725;
      v330 = (uint64_t)v622;
      sub_1BCA7A2FC(v325, (uint64_t)v622, v724);
      sub_1BC997208(v325, (uint64_t (*)(_QWORD))sub_1BCA7EFF8);
      sub_1BC997208(v324, type metadata accessor for SignificantChangeEngine.State);
      sub_1BC997208(v718, type metadata accessor for SignificantChangeEngine.State);
      v331 = v600;
      v328(v330, v600);
      v328((uint64_t)v723, v331);
      v326(v329, 0, 1, v327);
      v332 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v732 + 56);
      v332(v245, 1, 1, v323);
      v246 = type metadata accessor for SignificantChangeEngine.Output(0);
      v332(v245 + *(int *)(v246 + 20), 1, 1, v323);
      sub_1BC9AE330(v329, v245 + *(int *)(v246 + 24), (uint64_t (*)(_QWORD))sub_1BCA7EFF8);
      v333 = *(void (**)(uint64_t, uint64_t))(v716 + 8);
      v334 = &v736;
LABEL_70:
      v413 = *(v334 - 32);
      v414 = v619;
LABEL_121:
      v333(v413, v414);
      sub_1BC997208((uint64_t)v617, type metadata accessor for SignificantChangeEngine.State.FrequencyShift);
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v246 - 8) + 56))(v245, 0, 1, v246);
    }
    sub_1BCA7EFB0(v318 + *(int *)(v319 + 24), v699);
    sub_1BC997208(v318, type metadata accessor for SignificantChangeEngine.State.FrequencyShift);
    v323 = v731;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v321 + 48))(v322, 1, v731) == 1)
      goto LABEL_36;
    sub_1BC9AE330(v322, v683, type metadata accessor for SignificantChange);
    v368 = (uint64_t)v707;
    v369 = (uint64_t)v622;
    sub_1BCAB4B9C();
    v370 = v684;
    sub_1BCA79E68(v368, v684, 0.0, 0.0);
    v733 = *(_QWORD *)(v716 + 8);
    ((void (*)(uint64_t, uint64_t))v733)(v368, v619);
    v371 = v285;
    v372 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v321 + 56);
    v372(v685, 1, 1, v323);
    v373 = v686;
    sub_1BC9964B8(v370, v686, type metadata accessor for SignificantChange);
    v372(v373, 0, 1, v323);
    v374 = v682;
    sub_1BC9964B8(v722, v682, type metadata accessor for SignificantChangeEngine.State);
    v375 = v726;
    v732 = *(_QWORD *)(v371 + 56);
    ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v732)(v374, 0, 1, v726);
    v376 = v657;
    sub_1BC9AFC58((uint64_t)v617, v657);
    v377 = v376 + *(int *)(v319 + 24);
    sub_1BC9964B8(v370, v377, type metadata accessor for SignificantChange);
    v372(v377, 0, 1, v323);
    *(_BYTE *)(v376 + *(int *)(v319 + 20)) = 1;
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v717 + 56))(v376, 0, 1, v319);
    v715(v608, v369, v600);
    v378 = v656;
    sub_1BCA7EFEC(v374, v656);
    if (v730(v378, 1, v375) == 1)
    {
      sub_1BC997208(v378, (uint64_t (*)(_QWORD))sub_1BCA7EFF8);
      v379 = type metadata accessor for SignificantChangeEngine.State.MeanShift(0);
      v380 = v655;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v379 - 8) + 56))(v655, 1, 1, v379);
    }
    else
    {
      v380 = v655;
      sub_1BCA7F3D4(v378 + *(int *)(v375 + 20), v655);
      sub_1BC997208(v378, type metadata accessor for SignificantChangeEngine.State);
    }
    v491 = (uint64_t)v654;
    v492 = v725;
    sub_1BCA7F410(v376, (uint64_t)&v654[*(int *)(v375 + 24)]);
    v493 = v600;
    v599(v491, v608, v600);
    sub_1BC9AE330(v380, v491 + *(int *)(v375 + 20), (uint64_t (*)(_QWORD))sub_1BCA7F3E0);
    sub_1BC997208(v376, (uint64_t (*)(_QWORD))sub_1BCA7F41C);
    sub_1BC997208(v682, (uint64_t (*)(_QWORD))sub_1BCA7EFF8);
    sub_1BC997208(v684, type metadata accessor for SignificantChange);
    sub_1BC997208(v683, type metadata accessor for SignificantChange);
    sub_1BC997208(v722, type metadata accessor for SignificantChangeEngine.State);
    sub_1BC997208(v718, type metadata accessor for SignificantChangeEngine.State);
    v492((uint64_t)v622, v493);
    v492((uint64_t)v723, v493);
    ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v732)(v491, 0, 1, v375);
    sub_1BC9AE330(v685, v245, (uint64_t (*)(_QWORD))sub_1BCA7EFBC);
    v246 = type metadata accessor for SignificantChangeEngine.Output(0);
    sub_1BC9AE330(v686, v245 + *(int *)(v246 + 20), (uint64_t (*)(_QWORD))sub_1BCA7EFBC);
    sub_1BC9AE330(v491, v245 + *(int *)(v246 + 24), (uint64_t (*)(_QWORD))sub_1BCA7EFF8);
    v494 = &v736;
LABEL_120:
    v413 = *(v494 - 32);
    v414 = v619;
    v333 = (void (*)(uint64_t, uint64_t))v733;
    goto LABEL_121;
  }
  v279 = v261;
  v720 = v234;
  v280 = v705;
  sub_1BC9AFC58(v268, v705);
  v281 = v704;
  v282 = v600;
  v721 = *(char **)(v204 + 16);
  ((void (*)(char *, char *, uint64_t))v721)(v704, v723, v600);
  v283 = v716;
  v284 = v619;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v716 + 48))(v280, 1, v619) == 1)
  {
    sub_1BCAB4BC0();
    v725 = *(void (**)(uint64_t, uint64_t))(v204 + 8);
    v725((uint64_t)v281, v282);
    sub_1BC997208(v280, (uint64_t (*)(_QWORD))sub_1BCA7F46C);
  }
  else
  {
    v725 = *(void (**)(uint64_t, uint64_t))(v204 + 8);
    v725((uint64_t)v281, v282);
    (*(void (**)(char *, uint64_t, uint64_t))(v283 + 32))(v712, v280, v284);
  }
  v296 = v733;
  result = sub_1BCA79C58(v733);
  v297 = v727;
  v298 = v601;
  if ((v299 & 1) != 0)
  {
    v313 = v724;
    sub_1BCA77EEC(v296, v602, v724, v233);
    sub_1BC997208(v258, type metadata accessor for SignificantChangeEngine.State);
    sub_1BC997208(v256, type metadata accessor for SignificantChangeEngine.State);
    v314 = v600;
    v315 = (void (*)(char *, uint64_t))v725;
    v725((uint64_t)v622, v600);
    v315(v723, v314);
    v316 = v731;
    v317 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v732 + 56);
    v245 = v729;
    v317(v729, 1, 1, v731);
    v246 = type metadata accessor for SignificantChangeEngine.Output(0);
    v317(v245 + *(int *)(v246 + 20), 1, 1, v316);
    sub_1BC9AE330(v313, v245 + *(int *)(v246 + 24), (uint64_t (*)(_QWORD))sub_1BCA7EFF8);
    (*(void (**)(char *, uint64_t))(v283 + 8))(v712, v284);
    sub_1BC997208(v268, type metadata accessor for SignificantChangeEngine.State.FrequencyShift);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v246 - 8) + 56))(v245, 0, 1, v246);
  }
  v300 = result + 1;
  if (__OFADD__(result, 1))
    goto LABEL_128;
  v301 = (uint64_t)v714;
  if (__OFSUB__(v623, v300))
  {
LABEL_129:
    __break(1u);
    goto LABEL_130;
  }
  if ((uint64_t)(v623 - v300) < v618)
  {
    MEMORY[0x1E0C80A78](result);
    *(&v599 - 2) = (void (*)(uint64_t, uint64_t, uint64_t))v268;
    v302 = swift_bridgeObjectRetain();
    v303 = v258;
    v304 = sub_1BCA8DBD4(v302, (uint64_t (*)(_QWORD, _QWORD, _QWORD))sub_1BCA8F5E0);
    swift_bridgeObjectRelease();
    v305 = v726;
    v306 = v303 + *(int *)(v726 + 24);
    v307 = v668;
    sub_1BCA7F410(v306, v668);
    v308 = v719;
    if (v279(v307, 1, v719) == 1)
    {
      sub_1BC997208(v307, (uint64_t (*)(_QWORD))sub_1BCA7F41C);
      v310 = v731;
      v309 = v732;
      v311 = v667;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v732 + 56))(v667, 1, 1, v731);
      v312 = v621;
    }
    else
    {
      v402 = v307 + *(int *)(v308 + 24);
      v311 = v667;
      sub_1BCA7EFB0(v402, v667);
      sub_1BC997208(v307, type metadata accessor for SignificantChangeEngine.State.FrequencyShift);
      v310 = v731;
      v309 = v732;
      v403 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v732 + 48))(v311, 1, v731);
      v312 = v621;
      if (v403 != 1)
      {
        sub_1BC9AE330(v311, v658, type metadata accessor for SignificantChange);
        v495 = *(_QWORD *)(v304 + 16);
        if (v495)
        {
          v496 = v304 + v620;
          swift_bridgeObjectRetain();
          v497 = MEMORY[0x1E0DEE9D8];
          v498 = (uint64_t)v624;
          do
          {
            v500 = v708;
            sub_1BC9964B8(v496, v708, (uint64_t (*)(_QWORD))sub_1BC9BD26C);
            sub_1BC9964B8(v500, v498, (uint64_t (*)(_QWORD))sub_1BC9BD26C);
            v501 = v727;
            (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v298 + 56))(v498, 0, 1, v727);
            sub_1BC997208(v500, (uint64_t (*)(_QWORD))sub_1BC9BD26C);
            if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v298 + 48))(v498, 1, v501) == 1)
            {
              sub_1BC9B3A38(v498, &qword_1ED6C3640, (uint64_t (*)(uint64_t))sub_1BC9BD26C);
              v499 = v613;
            }
            else
            {
              v502 = v695;
              sub_1BC9AE330(v498, v695, (uint64_t (*)(_QWORD))sub_1BC9BD26C);
              sub_1BC9AE330(v502, v709, (uint64_t (*)(_QWORD))sub_1BC9BD26C);
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                v497 = sub_1BC9DA968(0, *(_QWORD *)(v497 + 16) + 1, 1, v497);
              v504 = *(_QWORD *)(v497 + 16);
              v503 = *(_QWORD *)(v497 + 24);
              if (v504 >= v503 >> 1)
                v497 = sub_1BC9DA968(v503 > 1, v504 + 1, 1, v497);
              *(_QWORD *)(v497 + 16) = v504 + 1;
              v499 = v613;
              sub_1BC9AE330(v709, v497 + v620 + v504 * v613, (uint64_t (*)(_QWORD))sub_1BC9BD26C);
            }
            v496 += v499;
            --v495;
          }
          while (v495);
          swift_bridgeObjectRelease();
          v310 = v731;
        }
        else
        {
          v497 = MEMORY[0x1E0DEE9D8];
        }
        v570 = *(_QWORD *)(v497 + 16);
        swift_bridgeObjectRelease();
        v571 = *(_QWORD *)(v304 + 16);
        swift_bridgeObjectRelease();
        v572 = (uint64_t)v707;
        v573 = (uint64_t)v622;
        sub_1BCAB4B9C();
        v574 = v642;
        sub_1BCA79E68(v572, v642, 0.0, (double)v570 / (double)v571);
        v733 = *(_QWORD *)(v716 + 8);
        ((void (*)(uint64_t, uint64_t))v733)(v572, v619);
        v575 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v732 + 56);
        v575(v643, 1, 1, v310);
        v576 = v644;
        sub_1BC9964B8(v574, v644, type metadata accessor for SignificantChange);
        v575(v576, 0, 1, v310);
        v577 = v640;
        sub_1BC9964B8(v722, v640, type metadata accessor for SignificantChangeEngine.State);
        v578 = v310;
        v579 = v726;
        v732 = *(_QWORD *)(v621 + 56);
        ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v732)(v577, 0, 1, v726);
        v580 = v641;
        sub_1BC9AFC58((uint64_t)v617, v641);
        v581 = v719;
        v582 = v580 + *(int *)(v719 + 24);
        sub_1BC9964B8(v574, v582, type metadata accessor for SignificantChange);
        v575(v582, 0, 1, v578);
        *(_BYTE *)(v580 + *(int *)(v581 + 20)) = 0;
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v717 + 56))(v580, 0, 1, v581);
        ((void (*)(uint64_t, uint64_t, uint64_t))v721)(v603, v573, v600);
        v583 = v630;
        sub_1BCA7EFEC(v577, v630);
        v584 = v730(v583, 1, v579);
        v245 = v729;
        if (v584 == 1)
        {
          sub_1BC997208(v583, (uint64_t (*)(_QWORD))sub_1BCA7EFF8);
          v585 = type metadata accessor for SignificantChangeEngine.State.MeanShift(0);
          v586 = v629;
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v585 - 8) + 56))(v629, 1, 1, v585);
        }
        else
        {
          v586 = v629;
          sub_1BCA7F3D4(v583 + *(int *)(v579 + 20), v629);
          sub_1BC997208(v583, type metadata accessor for SignificantChangeEngine.State);
        }
        v587 = v725;
        v588 = (uint64_t)v628;
        v589 = v641;
        sub_1BCA7F410(v641, (uint64_t)&v628[*(int *)(v579 + 24)]);
        v590 = v600;
        v599(v588, v603, v600);
        sub_1BC9AE330(v586, v588 + *(int *)(v579 + 20), (uint64_t (*)(_QWORD))sub_1BCA7F3E0);
        sub_1BC997208(v589, (uint64_t (*)(_QWORD))sub_1BCA7F41C);
        sub_1BC997208(v640, (uint64_t (*)(_QWORD))sub_1BCA7EFF8);
        sub_1BC997208(v642, type metadata accessor for SignificantChange);
        sub_1BC997208(v658, type metadata accessor for SignificantChange);
        sub_1BC997208(v722, type metadata accessor for SignificantChangeEngine.State);
        sub_1BC997208(v718, type metadata accessor for SignificantChangeEngine.State);
        v587((uint64_t)v622, v590);
        v587((uint64_t)v723, v590);
        ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v732)(v588, 0, 1, v579);
        sub_1BC9AE330(v643, v245, (uint64_t (*)(_QWORD))sub_1BCA7EFBC);
        v246 = type metadata accessor for SignificantChangeEngine.Output(0);
        sub_1BC9AE330(v644, v245 + *(int *)(v246 + 20), (uint64_t (*)(_QWORD))sub_1BCA7EFBC);
        sub_1BC9AE330(v588, v245 + *(int *)(v246 + 24), (uint64_t (*)(_QWORD))sub_1BCA7EFF8);
        v494 = &v735;
        goto LABEL_120;
      }
    }
    swift_bridgeObjectRelease();
    sub_1BC997208(v311, (uint64_t (*)(_QWORD))sub_1BCA7EFBC);
    v404 = v722;
    v405 = v310;
    v406 = v700;
    sub_1BC9964B8(v722, v700, type metadata accessor for SignificantChangeEngine.State);
    v407 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v312 + 56);
    v407(v406, 0, 1, v305);
    v408 = v724;
    v409 = (uint64_t)v622;
    sub_1BCA7A2FC(v406, (uint64_t)v622, v724);
    sub_1BC997208(v406, (uint64_t (*)(_QWORD))sub_1BCA7EFF8);
    sub_1BC997208(v404, type metadata accessor for SignificantChangeEngine.State);
    sub_1BC997208(v718, type metadata accessor for SignificantChangeEngine.State);
    v410 = v600;
    v411 = (void (*)(char *, uint64_t))v725;
    v725(v409, v600);
    v411(v723, v410);
    v407(v408, 0, 1, v305);
    v412 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v309 + 56);
    v245 = v729;
    v412(v729, 1, 1, v405);
    v246 = type metadata accessor for SignificantChangeEngine.Output(0);
    v412(v245 + *(int *)(v246 + 20), 1, 1, v405);
    v400 = v245 + *(int *)(v246 + 24);
    v401 = v408;
LABEL_69:
    sub_1BC9AE330(v401, v400, (uint64_t (*)(_QWORD))sub_1BCA7EFF8);
    v333 = *(void (**)(uint64_t, uint64_t))(v716 + 8);
    v334 = &v735;
    goto LABEL_70;
  }
  v713 = result + 1;
  v711 = v623 - v300;
  if (result >= v623)
  {
LABEL_130:
    __break(1u);
    goto LABEL_131;
  }
  v350 = v701;
  v351 = v701 + *(int *)(v727 + 48);
  v352 = v613;
  sub_1BC9964B8((uint64_t)v720 + result * v613, v701, (uint64_t (*)(_QWORD))sub_1BC9BD26C);
  v353 = (uint64_t)v605;
  v354 = &v605[*(int *)(v297 + 48)];
  v355 = ((uint64_t (*)(char *, uint64_t, uint64_t))v721)(v605, v350, v600);
  v356 = *(_QWORD *)v351;
  v715 = (void (*)(uint64_t, uint64_t, uint64_t))v351;
  v357 = *(_BYTE *)(v351 + 8);
  *(_QWORD *)v354 = v356;
  v354[8] = v357;
  MEMORY[0x1E0C80A78](v355);
  *(&v599 - 2) = (void (*)(uint64_t, uint64_t, uint64_t))v712;
  *(&v599 - 1) = (void (*)(uint64_t, uint64_t, uint64_t))v353;
  v358 = swift_bridgeObjectRetain();
  v359 = sub_1BCA8DBD4(v358, (uint64_t (*)(_QWORD, _QWORD, _QWORD))sub_1BCA8F5D4);
  swift_bridgeObjectRelease();
  sub_1BC997208(v353, (uint64_t (*)(_QWORD))sub_1BC9BD26C);
  v360 = MEMORY[0x1E0DEE9D8];
  v734[0] = MEMORY[0x1E0DEE9D8];
  v361 = *(_QWORD *)(v359 + 16);
  result = swift_bridgeObjectRetain();
  v362 = (uint64_t)v666;
  if (v361)
  {
    v363 = 0;
    v364 = v301 + 8;
    v365 = v359 + v620;
    while (v363 < *(_QWORD *)(v359 + 16))
    {
      sub_1BC9964B8(v365, v301, (uint64_t (*)(_QWORD))sub_1BC9BD26C);
      if ((*(_BYTE *)(v364 + *(int *)(v727 + 48)) & 1) != 0)
      {
        result = sub_1BC997208(v301, (uint64_t (*)(_QWORD))sub_1BC9BD26C);
      }
      else
      {
        sub_1BC9AE330(v301, v362, (uint64_t (*)(_QWORD))sub_1BC9BD26C);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          sub_1BC9BAE48(0, *(_QWORD *)(v360 + 16) + 1, 1);
        v360 = v734[0];
        v367 = *(_QWORD *)(v734[0] + 16);
        v366 = *(_QWORD *)(v734[0] + 24);
        if (v367 >= v366 >> 1)
        {
          sub_1BC9BAE48(v366 > 1, v367 + 1, 1);
          v360 = v734[0];
        }
        *(_QWORD *)(v360 + 16) = v367 + 1;
        v352 = v613;
        result = sub_1BC9AE330(v362, v360 + v620 + v367 * v613, (uint64_t (*)(_QWORD))sub_1BC9BD26C);
        v301 = (uint64_t)v714;
      }
      ++v363;
      v365 += v352;
      if (v361 == v363)
      {
        v360 = v734[0];
        goto LABEL_64;
      }
    }
    goto LABEL_127;
  }
LABEL_64:
  swift_bridgeObjectRelease();
  v381 = *(_QWORD *)(v360 + 16);
  swift_release();
  v382 = *(_QWORD *)(v359 + 16);
  swift_bridgeObjectRelease();
  v383 = v707;
  sub_1BCAB4BC0();
  v384 = v728;
  v385 = v728 + *(int *)(v727 + 48);
  v386 = v600;
  ((void (*)(uint64_t, uint64_t, uint64_t))v721)(v728, v701, v600);
  v387 = *((_BYTE *)v715 + 8);
  *(_QWORD *)v385 = *(_QWORD *)v715;
  *(_BYTE *)(v385 + 8) = v387;
  sub_1BCAB4B9C();
  v725(v384, v386);
  result = sub_1BCAB4BA8();
  v388 = (int *)v692;
  if (v713 < v623)
  {
    sub_1BC9964B8((uint64_t)v720 + v713 * v352, v384, (uint64_t (*)(_QWORD))sub_1BC9BD26C);
    v389 = v610;
    v599(v610, v384, v386);
    sub_1BCAB4BC0();
    sub_1BCAB4B9C();
    v390 = v609;
    sub_1BCAB4BA8();
    if (SignificantChangeEngine.fisherExactLess(a:b:c:d:)(v382 - v381, v711, v381, 0) <= v231)
    {
      v415 = (double)v381 / (double)v382;
      v416 = v664;
      v417 = (void (*)(uint64_t, uint64_t, uint64_t))v721;
      ((void (*)(uint64_t, uint64_t, uint64_t))v721)(v664, v611, v386);
      v418 = v417;
      *(_QWORD *)(v416 + v388[5]) = 0;
      *(double *)(v416 + v388[6]) = v415;
      *(_BYTE *)(v416 + v388[7]) = 2;
      v419 = v665;
      v418(v665, v390, v386);
      *(_QWORD *)(v419 + v388[5]) = 0;
      *(_QWORD *)(v419 + v388[6]) = 0;
      *(_BYTE *)(v419 + v388[7]) = 1;
      sub_1BC9964B8(v416, v662, type metadata accessor for SignificantChange.Period);
      sub_1BCA8F54C(0);
      v420 = (*(unsigned __int8 *)(v694 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v694 + 80);
      v421 = swift_allocObject();
      v733 = v421;
      *(_OWORD *)(v421 + 16) = xmmword_1BCABE680;
      sub_1BC9964B8(v419, v421 + v420, type metadata accessor for SignificantChange.Period);
      sub_1BCAB4BC0();
      v422 = v687;
      sub_1BCAB4E6C();
      v423 = sub_1BCAB4E60();
      v724 = v423;
      v425 = v424;
      (*(void (**)(char *, uint64_t))(v688 + 8))(v422, v689);
      v426 = v690;
      v427 = (uint64_t)v636;
      v428 = &v636[*(int *)(v690 + 24)];
      _s19HealthVisualization25PresentationDateProvidingPAAE012presentationD010Foundation0D0VvgZ_0();
      *(_QWORD *)v427 = v423;
      *(_QWORD *)(v427 + 8) = v425;
      *(_BYTE *)(v427 + 16) = 0;
      v429 = v427 + *(int *)(v426 + 28);
      v430 = v384;
      v431 = v716;
      v432 = v383;
      v433 = v619;
      (*(void (**)(uint64_t, char *, uint64_t))(v716 + 32))(v429, v432, v619);
      v434 = (uint64_t)v637;
      v435 = *(void (**)(char *, char *, uint64_t))(v431 + 16);
      v435(&v637[*(int *)(v426 + 24)], v428, v433);
      v435((char *)(v434 + *(int *)(v426 + 28)), (char *)v429, v433);
      *(_QWORD *)v434 = v724;
      *(_QWORD *)(v434 + 8) = v425;
      *(_BYTE *)(v434 + 16) = 1;
      swift_bridgeObjectRetain();
      sub_1BC997208(v427, type metadata accessor for SignificantChange.Notification);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v691 + 56))(v434, 0, 1, v426);
      v436 = v661;
      v437 = v433;
      sub_1BC9AE330(v662, v661, type metadata accessor for SignificantChange.Period);
      v438 = v731;
      *(_QWORD *)(v436 + *(int *)(v731 + 20)) = v733;
      sub_1BC9AE330(v434, v436 + *(int *)(v438 + 24), (uint64_t (*)(_QWORD))sub_1BCA8025C);
      v439 = v430 + *(int *)(v727 + 48);
      v440 = v600;
      v441 = (void (*)(uint64_t, uint64_t, uint64_t))v721;
      ((void (*)(uint64_t, uint64_t, uint64_t))v721)(v430, v701, v600);
      v442 = *((_BYTE *)v715 + 8);
      *(_QWORD *)v439 = *(_QWORD *)v715;
      *(_BYTE *)(v439 + 8) = v442;
      v443 = (uint64_t)v669;
      sub_1BCAB4B9C();
      v725(v430, v440);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v431 + 56))(v443, 0, 1, v437);
      v444 = v719;
      v445 = (uint64_t)v634;
      v446 = (uint64_t)&v634[*(int *)(v719 + 24)];
      sub_1BC9964B8(v436, v446, type metadata accessor for SignificantChange);
      v447 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v732 + 56);
      v447(v446, 0, 1, v438);
      sub_1BC9AE330(v443, v445, (uint64_t (*)(_QWORD))sub_1BCA7F46C);
      *(_BYTE *)(v445 + *(int *)(v444 + 20)) = 1;
      v447(v663, 1, 1, v438);
      v448 = v436;
      v449 = v639;
      sub_1BC9964B8(v448, v639, type metadata accessor for SignificantChange);
      v447(v449, 0, 1, v438);
      v450 = v659;
      sub_1BC9964B8(v722, v659, type metadata accessor for SignificantChangeEngine.State);
      v451 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v621 + 56);
      v452 = v726;
      v451(v450, 0, 1, v726);
      v453 = v635;
      sub_1BC9964B8(v445, v635, type metadata accessor for SignificantChangeEngine.State.FrequencyShift);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v717 + 56))(v453, 0, 1, v444);
      v441(v604, (uint64_t)v622, v600);
      v454 = v631;
      sub_1BCA7EFEC(v450, v631);
      if (v730(v454, 1, v452) == 1)
      {
        sub_1BC997208(v454, (uint64_t (*)(_QWORD))sub_1BCA7EFF8);
        v455 = type metadata accessor for SignificantChangeEngine.State.MeanShift(0);
        v456 = v638;
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v455 - 8) + 56))(v638, 1, 1, v455);
      }
      else
      {
        v456 = v638;
        sub_1BCA7F3D4(v454 + *(int *)(v452 + 20), v638);
        sub_1BC997208(v454, type metadata accessor for SignificantChangeEngine.State);
      }
      v245 = v729;
      v505 = (uint64_t)v633;
      sub_1BCA7F410(v453, (uint64_t)&v633[*(int *)(v452 + 24)]);
      v506 = v600;
      v599(v505, v604, v600);
      sub_1BC9AE330(v456, v505 + *(int *)(v452 + 20), (uint64_t (*)(_QWORD))sub_1BCA7F3E0);
      sub_1BC997208(v453, (uint64_t (*)(_QWORD))sub_1BCA7F41C);
      sub_1BC997208(v659, (uint64_t (*)(_QWORD))sub_1BCA7EFF8);
      sub_1BC997208(v445, type metadata accessor for SignificantChangeEngine.State.FrequencyShift);
      sub_1BC997208(v661, type metadata accessor for SignificantChange);
      sub_1BC997208(v665, type metadata accessor for SignificantChange.Period);
      sub_1BC997208(v664, type metadata accessor for SignificantChange.Period);
      v507 = v725;
      v725(v609, v506);
      v507(v610, v506);
      v507(v611, v506);
      sub_1BC997208(v701, (uint64_t (*)(_QWORD))sub_1BC9BD26C);
      sub_1BC997208(v722, type metadata accessor for SignificantChangeEngine.State);
      sub_1BC997208(v718, type metadata accessor for SignificantChangeEngine.State);
      v507((uint64_t)v622, v506);
      v507((uint64_t)v723, v506);
      v451(v505, 0, 1, v452);
      sub_1BC9AE330(v663, v245, (uint64_t (*)(_QWORD))sub_1BCA7EFBC);
      v246 = type metadata accessor for SignificantChangeEngine.Output(0);
      sub_1BC9AE330(v449, v245 + *(int *)(v246 + 20), (uint64_t (*)(_QWORD))sub_1BCA7EFBC);
      sub_1BC9AE330(v505, v245 + *(int *)(v246 + 24), (uint64_t (*)(_QWORD))sub_1BCA7EFF8);
      (*(void (**)(char *, uint64_t))(v716 + 8))(v712, v619);
      goto LABEL_113;
    }
    v391 = (uint64_t)v632;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v732 + 56))(v632, 1, 1, v731);
    sub_1BCA7EFB0((uint64_t)&v617[*(int *)(v719 + 24)], v660);
    v392 = v722;
    v393 = v386;
    v394 = v700;
    sub_1BC9964B8(v722, v700, type metadata accessor for SignificantChangeEngine.State);
    v395 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v621 + 56);
    v396 = v726;
    v395(v394, 0, 1, v726);
    v397 = v724;
    v398 = (uint64_t)v622;
    sub_1BCA7A2FC(v394, (uint64_t)v622, v724);
    sub_1BC997208(v394, (uint64_t (*)(_QWORD))sub_1BCA7EFF8);
    v399 = v725;
    v725(v390, v393);
    v399(v389, v393);
    v399(v611, v393);
    sub_1BC997208(v701, (uint64_t (*)(_QWORD))sub_1BC9BD26C);
    sub_1BC997208(v392, type metadata accessor for SignificantChangeEngine.State);
    sub_1BC997208(v718, type metadata accessor for SignificantChangeEngine.State);
    v399(v398, v393);
    v399((uint64_t)v723, v393);
    v395(v397, 0, 1, v396);
    v245 = v729;
    sub_1BC9AE330(v391, v729, (uint64_t (*)(_QWORD))sub_1BCA7EFBC);
    v246 = type metadata accessor for SignificantChangeEngine.Output(0);
    sub_1BC9AE330(v660, v245 + *(int *)(v246 + 20), (uint64_t (*)(_QWORD))sub_1BCA7EFBC);
    v400 = v245 + *(int *)(v246 + 24);
    v401 = v397;
    goto LABEL_69;
  }
LABEL_131:
  __break(1u);
  return result;
}

uint64_t sub_1BCA77EEC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE *v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE *v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _BYTE *v45;
  _BYTE *v46;
  uint64_t v47;
  __n128 v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  void (*v53)(uint64_t, uint64_t, uint64_t);
  void (*v54)(_BYTE *, _QWORD, uint64_t, uint64_t);
  unsigned int (*v55)(_BYTE *, uint64_t, uint64_t);
  uint64_t v56;
  _BYTE *v57;
  uint64_t (*v58)(uint64_t);
  uint64_t v59;
  uint64_t v60;
  uint64_t result;
  _BYTE *v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  _BYTE *v66;
  _BYTE *v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  _BYTE *v71;
  _QWORD *v72;
  _BYTE *v73;
  _BYTE *v74;
  uint64_t v75;
  uint64_t v76;
  _BYTE *v77;
  _BYTE *v78;
  void (*v79)(uint64_t, uint64_t);
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _BYTE *v90;
  _BYTE *v91;
  uint64_t v92;
  _BYTE *v93;
  _BYTE *v94;
  int v95;
  uint64_t v96;
  _BYTE *v97;
  _BYTE *v98;
  uint64_t v99;
  BOOL v100;
  _BYTE *v101;
  double v102;
  double v103;
  _BYTE *v104;
  _BYTE *v105;
  uint64_t v106;
  uint64_t v107;
  _BYTE *v108;
  _QWORD *v109;
  void (*v110)(_BYTE *, _BYTE *, uint64_t);
  _BYTE *v111;
  void (*v112)(_BYTE *, uint64_t);
  double v113;
  double v114;
  _BYTE *v115;
  uint64_t v116;
  uint64_t v117;
  _BYTE *v118;
  double v119;
  uint64_t v120;
  uint64_t v121;
  _BYTE *v122;
  uint64_t v124;
  _BYTE *v125;
  _BYTE *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  _BYTE *v131;
  _BYTE *v132;
  uint64_t v133;
  uint64_t v134;
  _BYTE v135[4];
  int v136;
  uint64_t v137;
  int v138;
  void (*v139)(uint64_t, uint64_t, uint64_t);
  _BYTE *v140;
  uint64_t v141;
  _BYTE *v142;
  _BYTE *v143;
  _BYTE *v144;
  _QWORD *v145;
  _BYTE *v146;
  uint64_t v147;
  _BYTE *v148;
  _BYTE *v149;
  _BYTE *v150;
  uint64_t v151;
  _BYTE *v152;
  uint64_t v153;
  _BYTE *v154;
  _BYTE *v155;
  _BYTE *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;

  v157 = a3;
  sub_1BCA7F41C(0);
  MEMORY[0x1E0C80A78](v7);
  v9 = &v135[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1BCA7F3E0(0);
  MEMORY[0x1E0C80A78](v10);
  v12 = &v135[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v151 = sub_1BCAB4E54();
  v153 = *(_QWORD *)(v151 - 8);
  MEMORY[0x1E0C80A78](v151);
  v148 = &v135[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v14);
  v154 = &v135[-v15];
  v16 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
  sub_1BC998AB0(0, &qword_1ED6C3640, (uint64_t (*)(uint64_t))sub_1BC9BD26C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v17);
  v152 = &v135[-v18];
  sub_1BC9BD26C(0);
  v158 = *(_QWORD *)(v19 - 8);
  v159 = v19;
  MEMORY[0x1E0C80A78](v19);
  v21 = &v135[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v22);
  v149 = &v135[-v23];
  MEMORY[0x1E0C80A78](v24);
  v150 = &v135[-v25];
  MEMORY[0x1E0C80A78](v26);
  v28 = &v135[-v27];
  MEMORY[0x1E0C80A78](v29);
  v156 = &v135[-v30];
  MEMORY[0x1E0C80A78](v31);
  v33 = &v135[-v32];
  sub_1BC998AB0(0, (unint64_t *)&qword_1ED6C71E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAE5D0], v16);
  MEMORY[0x1E0C80A78](v34);
  v36 = &v135[-((v35 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v37);
  v39 = &v135[-v38];
  v40 = sub_1BCAB4BD8();
  MEMORY[0x1E0C80A78](*(_QWORD *)(v40 - 8));
  MEMORY[0x1E0C80A78](v41);
  v48 = MEMORY[0x1E0C80A78](v42);
  v49 = *(_QWORD *)(a1 + 16);
  if (!v49)
  {
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t, __n128))(v43 + 56))(v39, 1, 1, v40, v48);
    goto LABEL_6;
  }
  v146 = v46;
  v155 = &v135[-v44];
  v141 = a2;
  v143 = v45;
  v144 = v12;
  v142 = v9;
  v50 = (*(unsigned __int8 *)(v158 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v158 + 80);
  v147 = v47;
  v51 = v47 + v50;
  v52 = (_QWORD *)v43;
  sub_1BC9964B8(v47 + v50, (uint64_t)v33, (uint64_t (*)(_QWORD))sub_1BC9BD26C);
  v53 = (void (*)(uint64_t, uint64_t, uint64_t))v52[4];
  v53((uint64_t)v39, (uint64_t)v33, v40);
  v54 = (void (*)(_BYTE *, _QWORD, uint64_t, uint64_t))v52[7];
  v54(v39, 0, 1, v40);
  v145 = v52;
  v55 = (unsigned int (*)(_BYTE *, uint64_t, uint64_t))v52[6];
  if (v55(v39, 1, v40) == 1)
  {
LABEL_6:
    v58 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CAE5D0];
    v59 = (uint64_t)v39;
    goto LABEL_7;
  }
  v140 = v28;
  v53((uint64_t)v155, (uint64_t)v39, v40);
  v56 = *(_QWORD *)(v158 + 72);
  v57 = v156;
  sub_1BC9964B8(v51 + v56 * (v49 - 1), (uint64_t)v156, (uint64_t (*)(_QWORD))sub_1BC9BD26C);
  v53((uint64_t)v36, (uint64_t)v57, v40);
  v54(v36, 0, 1, v40);
  if (v55(v36, 1, v40) == 1)
  {
    ((void (*)(_BYTE *, uint64_t))v145[1])(v155, v40);
    v58 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CAE5D0];
    v59 = (uint64_t)v36;
LABEL_7:
    sub_1BC9B3A38(v59, (unint64_t *)&qword_1ED6C71E0, v58);
    v60 = type metadata accessor for SignificantChangeEngine.State(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v60 - 8) + 56))(v157, 1, 1, v60);
  }
  v53((uint64_t)v146, (uint64_t)v36, v40);
  v62 = v152;
  sub_1BCA78AD4(v147, (uint64_t)v152);
  v63 = v159;
  v64 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v158 + 48))(v62, 1, v159);
  v139 = v53;
  if (v64 == 1)
  {
    sub_1BC9B3A38((uint64_t)v62, &qword_1ED6C3640, (uint64_t (*)(uint64_t))sub_1BC9BD26C);
LABEL_14:
    v72 = v145;
    v73 = v146;
    v74 = v143;
    ((void (*)(_BYTE *, _BYTE *, uint64_t))v145[2])(v143, v146, v40);
    v75 = type metadata accessor for SignificantChangeEngine.State.MeanShift(0);
    v76 = (uint64_t)v144;
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v75 - 8) + 56))(v144, 1, 1, v75);
    v78 = v154;
    v77 = v155;
    sub_1BCAB4BC0();
    v79 = (void (*)(uint64_t, uint64_t))v72[1];
    v79((uint64_t)v73, v40);
    v79((uint64_t)v77, v40);
    v80 = v153;
    v81 = (uint64_t)v142;
    v82 = v151;
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v153 + 16))(v142, v78, v151);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v80 + 56))(v81, 0, 1, v82);
    v83 = type metadata accessor for SignificantChangeEngine.State.FrequencyShift(0);
    v84 = v81 + *(int *)(v83 + 24);
    v85 = type metadata accessor for SignificantChange(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v85 - 8) + 56))(v84, 1, 1, v85);
    *(_BYTE *)(v81 + *(int *)(v83 + 20)) = 1;
    (*(void (**)(_BYTE *, uint64_t))(v80 + 8))(v78, v82);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v83 - 8) + 56))(v81, 0, 1, v83);
    v86 = v157;
    v139(v157, (uint64_t)v74, v40);
    v87 = type metadata accessor for SignificantChangeEngine.State(0);
    sub_1BC9AE330(v76, v86 + *(int *)(v87 + 20), (uint64_t (*)(_QWORD))sub_1BCA7F3E0);
    v88 = v86 + *(int *)(v87 + 24);
    v89 = v81;
  }
  else
  {
    v65 = *(int *)(v63 + 48);
    v66 = &v140[v65];
    v67 = &v62[v65];
    v158 = v40;
    ((void (*)(void))v53)();
    v68 = v67[8];
    v152 = *(_BYTE **)v67;
    *(_QWORD *)v66 = v152;
    v138 = v68;
    v66[8] = v68;
    swift_bridgeObjectRetain();
    v69 = v51;
    v70 = v49;
    v71 = v156;
    while (1)
    {
      sub_1BC9964B8(v69, (uint64_t)v21, (uint64_t (*)(_QWORD))sub_1BC9BD26C);
      if (v21[*(int *)(v63 + 48) + 8] != 1)
        break;
      sub_1BC997208((uint64_t)v21, (uint64_t (*)(_QWORD))sub_1BC9BD26C);
      v69 += v56;
      if (!--v70)
      {
        swift_bridgeObjectRelease();
        sub_1BC997208((uint64_t)v140, (uint64_t (*)(_QWORD))sub_1BC9BD26C);
        v40 = v158;
        goto LABEL_14;
      }
    }
    swift_bridgeObjectRelease();
    v90 = v150;
    v91 = &v150[*(int *)(v63 + 48)];
    v92 = (uint64_t)v21;
    v93 = v149;
    sub_1BC9AE330(v92, (uint64_t)v149, (uint64_t (*)(_QWORD))sub_1BC9BD26C);
    v94 = &v93[*(int *)(v63 + 48)];
    v139((uint64_t)v90, (uint64_t)v93, v158);
    v95 = v94[8];
    v137 = *(_QWORD *)v94;
    *(_QWORD *)v91 = v137;
    v136 = v95;
    v91[8] = v95;
    swift_bridgeObjectRetain();
    v96 = 0;
    v97 = v154;
    v98 = v152;
    do
    {
      result = sub_1BC9964B8(v51, (uint64_t)v71, (uint64_t (*)(_QWORD))sub_1BC9BD26C);
      v99 = (v71[*(int *)(v159 + 48) + 8] & 1) == 0;
      v100 = __OFADD__(v96, v99);
      v96 += v99;
      if (v100)
      {
        __break(1u);
        return result;
      }
      sub_1BC997208((uint64_t)v71, (uint64_t (*)(_QWORD))sub_1BC9BD26C);
      v51 += v56;
      --v49;
    }
    while (v49);
    swift_bridgeObjectRelease();
    v101 = v146;
    sub_1BCAB4B9C();
    sub_1BCAB4DA0();
    v103 = v102;
    v104 = v97;
    v105 = *(_BYTE **)(v153 + 8);
    v106 = v151;
    ((void (*)(_BYTE *, uint64_t))v105)(v104, v151);
    v107 = v158;
    v108 = &v71[*(int *)(v159 + 48)];
    v109 = v145;
    v110 = (void (*)(_BYTE *, _BYTE *, uint64_t))v145[2];
    v110(v71, v140, v158);
    *(_QWORD *)v108 = v98;
    v108[8] = v138;
    v111 = v148;
    sub_1BCAB4B9C();
    v112 = (void (*)(_BYTE *, uint64_t))v109[1];
    v112(v71, v107);
    sub_1BCAB4DA0();
    v114 = v113;
    v115 = v111;
    v116 = v106;
    v117 = v106;
    v118 = v101;
    v149 = v105;
    ((void (*)(_BYTE *, uint64_t))v105)(v115, v117);
    v119 = v103 - v114;
    v110(v143, v101, v107);
    v120 = type metadata accessor for SignificantChangeEngine.State.MeanShift(0);
    v121 = v153;
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v120 - 8) + 56))(v144, 1, 1, v120);
    v122 = &v71[*(int *)(v159 + 48)];
    if (v96 >= v141 && v119 < a4)
    {
      v131 = v150;
      v110(v71, v150, v107);
      *(_QWORD *)v122 = v137;
      v122[8] = v136;
      v132 = v154;
      sub_1BCAB4BC0();
      sub_1BC997208((uint64_t)v131, (uint64_t (*)(_QWORD))sub_1BC9BD26C);
      sub_1BC997208((uint64_t)v140, (uint64_t (*)(_QWORD))sub_1BC9BD26C);
      v112(v118, v107);
      v112(v155, v107);
      v112(v71, v107);
      v126 = v132;
      v127 = (uint64_t)v142;
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v121 + 16))(v142, v126, v116);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v121 + 56))(v127, 0, 1, v116);
      v128 = type metadata accessor for SignificantChangeEngine.State.FrequencyShift(0);
      v133 = v127 + *(int *)(v128 + 24);
      v134 = type metadata accessor for SignificantChange(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v134 - 8) + 56))(v133, 1, 1, v134);
      *(_BYTE *)(v127 + *(int *)(v128 + 20)) = 0;
    }
    else
    {
      v124 = (uint64_t)v140;
      v110(v71, v140, v107);
      *(_QWORD *)v122 = v152;
      v122[8] = v138;
      v125 = v154;
      sub_1BCAB4B9C();
      sub_1BC997208((uint64_t)v150, (uint64_t (*)(_QWORD))sub_1BC9BD26C);
      sub_1BC997208(v124, (uint64_t (*)(_QWORD))sub_1BC9BD26C);
      v112(v118, v107);
      v112(v155, v107);
      v112(v71, v107);
      v126 = v125;
      v127 = (uint64_t)v142;
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v121 + 16))(v142, v126, v116);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v121 + 56))(v127, 0, 1, v116);
      v128 = type metadata accessor for SignificantChangeEngine.State.FrequencyShift(0);
      v129 = v127 + *(int *)(v128 + 24);
      v130 = type metadata accessor for SignificantChange(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v130 - 8) + 56))(v129, 1, 1, v130);
      *(_BYTE *)(v127 + *(int *)(v128 + 20)) = 1;
    }
    ((void (*)(_BYTE *, uint64_t))v149)(v126, v116);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v128 - 8) + 56))(v127, 0, 1, v128);
    v86 = v157;
    v139(v157, (uint64_t)v143, v107);
    v87 = type metadata accessor for SignificantChangeEngine.State(0);
    sub_1BC9AE330((uint64_t)v144, v86 + *(int *)(v87 + 20), (uint64_t (*)(_QWORD))sub_1BCA7F3E0);
    v88 = v86 + *(int *)(v87 + 24);
    v89 = v127;
  }
  sub_1BC9AE330(v89, v88, (uint64_t (*)(_QWORD))sub_1BCA7F41C);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v87 - 8) + 56))(v86, 0, 1, v87);
}

uint64_t sub_1BCA78AD4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    sub_1BC9BD26C(0);
    v6 = v5;
    v7 = *(_QWORD *)(v5 - 8);
    v8 = *(_QWORD *)(v7 + 72);
    v9 = *(int *)(v5 + 48);
    v10 = a1
        + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))
        + v8 * (v3 - 1);
    while ((*(_BYTE *)(v10 + v9 + 8) & 1) != 0)
    {
      v10 -= v8;
      if (!--v3)
        goto LABEL_5;
    }
    sub_1BC9964B8(v10, a2, (uint64_t (*)(_QWORD))sub_1BC9BD26C);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v7 + 56))(a2, 0, 1, v6);
  }
  else
  {
LABEL_5:
    sub_1BC9BD26C(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(a2, 1, 1, v11);
  }
}

uint64_t sub_1BCA78BAC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  double v63;
  char *v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  void (*v70)(char *, char *, uint64_t);
  uint64_t v71;
  int v72;
  uint64_t v73;
  void (*v74)(uint64_t, _QWORD, uint64_t, uint64_t);
  unsigned int (*v75)(uint64_t, uint64_t, uint64_t);
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  unsigned int v80;
  uint64_t v81;
  char *v82;
  void (*v83)(char *, char *, uint64_t);
  uint64_t v84;
  char *v85;
  uint64_t v86;
  int v87;
  _QWORD *v88;
  char *v89;
  void (*v90)(char *, uint64_t);
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  char *v100;
  uint64_t v101;
  char *v102;
  void (*v103)(char *, uint64_t);
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  void (*v108)(uint64_t, uint64_t, uint64_t);
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  unsigned __int8 v115;
  char *v116;
  char *v117;
  _QWORD *v118;
  void (*v119)(char *, char *, uint64_t);
  char *v120;
  void (*v121)(char *, uint64_t);
  double v122;
  double v123;
  void (*v124)(char *, uint64_t);
  uint64_t v125;
  char *v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  double v131;
  double v132;
  void (*v133)(char *, char *, uint64_t);
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  char *v138;
  uint64_t v139;
  unsigned int (*v140)(uint64_t, uint64_t, uint64_t);
  uint64_t v141;
  uint64_t v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  void (*v153)(char *, uint64_t);
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  void (*v159)(char *, uint64_t);
  uint64_t v160;
  void (*v161)(char *, uint64_t);
  uint64_t v162;
  void (*v163)(char *, uint64_t);
  char v164;
  char v165;
  uint64_t v166;
  char *v167;
  char *v168;
  uint64_t v169;
  unint64_t v170;
  int v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  char *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  char *v179;
  uint64_t v180;
  _QWORD *v181;
  uint64_t v182;
  uint64_t v183;
  char *v184;
  char *v185;
  uint64_t v186;
  uint64_t v187;
  char *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  char *v192;
  uint64_t v193;
  uint64_t v194;
  char *v195;
  char *v196;
  void (*v197)(char *, char *, uint64_t);
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  char *v201;
  uint64_t v202;
  unsigned int (*v203)(uint64_t, uint64_t, uint64_t);
  char *v204;
  char *v205;
  uint64_t v206;

  v206 = a3;
  sub_1BCA7F3E0(0);
  MEMORY[0x1E0C80A78](v7);
  v182 = (uint64_t)&v166 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BCA7EFF8(0);
  MEMORY[0x1E0C80A78](v9);
  v183 = (uint64_t)&v166 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v187 = (uint64_t)&v166 - v12;
  MEMORY[0x1E0C80A78](v13);
  v190 = (uint64_t)&v166 - v14;
  v199 = type metadata accessor for SignificantChangeEngine.State(0);
  v189 = *(_QWORD *)(v199 - 8);
  MEMORY[0x1E0C80A78](v199);
  v194 = (uint64_t)&v166 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16);
  v18 = (char *)&v166 - v17;
  v193 = sub_1BCAB4E54();
  v191 = *(_QWORD *)(v193 - 8);
  MEMORY[0x1E0C80A78](v193);
  v188 = (char *)&v166 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v20);
  v196 = (char *)&v166 - v21;
  sub_1BCA7F41C(0);
  MEMORY[0x1E0C80A78](v22);
  v184 = (char *)&v166 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v24);
  v186 = (uint64_t)&v166 - v25;
  MEMORY[0x1E0C80A78](v26);
  v197 = (void (*)(char *, char *, uint64_t))((char *)&v166 - v27);
  v200 = type metadata accessor for SignificantChangeEngine.State.FrequencyShift(0);
  v198 = *(_QWORD *)(v200 - 8);
  MEMORY[0x1E0C80A78](v200);
  v29 = (char *)&v166 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BC998AB0(0, (unint64_t *)&qword_1ED6C71E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAE5D0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v30);
  v203 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))((char *)&v166 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v32);
  v205 = (char *)&v166 - v33;
  v34 = sub_1BCAB4BD8();
  v35 = *(_QWORD **)(v34 - 8);
  MEMORY[0x1E0C80A78](v34);
  v185 = (char *)&v166 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v37);
  v192 = (char *)&v166 - v38;
  MEMORY[0x1E0C80A78](v39);
  v195 = (char *)&v166 - v40;
  MEMORY[0x1E0C80A78](v41);
  v201 = (char *)&v166 - v42;
  MEMORY[0x1E0C80A78](v43);
  v204 = (char *)&v166 - v44;
  sub_1BC9BD26C(0);
  MEMORY[0x1E0C80A78](v45);
  MEMORY[0x1E0C80A78](v46);
  MEMORY[0x1E0C80A78](v47);
  MEMORY[0x1E0C80A78](v48);
  v50 = (char *)&v166 - v49;
  MEMORY[0x1E0C80A78](v51);
  v53 = (char *)&v166 - v52;
  MEMORY[0x1E0C80A78](v54);
  v61 = (char *)&v166 - v60;
  v62 = *(_QWORD *)(a1 + 16);
  if (!v62)
  {
    v76 = v206;
    v77 = a4;
    return sub_1BC9964B8(v76, v77, type metadata accessor for SignificantChangeEngine.State);
  }
  v172 = v56;
  v175 = v59;
  v178 = v58;
  v179 = v29;
  v168 = v18;
  v202 = a4;
  v173 = *(_QWORD *)(a2 + 24);
  v63 = *(double *)(a2 + 48);
  v64 = &v61[*(int *)(v55 + 48)];
  v65 = v62 - 1;
  v66 = (*(unsigned __int8 *)(v57 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v57 + 80);
  v177 = a1;
  v170 = v66;
  v67 = a1 + v66;
  v169 = *(_QWORD *)(v57 + 72);
  v176 = v65;
  v68 = v55;
  v180 = a1 + v66 + v169 * v65;
  sub_1BC9964B8(v180, (uint64_t)v53, (uint64_t (*)(_QWORD))sub_1BC9BD26C);
  v174 = v68;
  v69 = &v53[*(int *)(v68 + 48)];
  v70 = (void (*)(char *, char *, uint64_t))v35[4];
  v70(v61, v53, v34);
  v71 = *(_QWORD *)v69;
  v72 = v69[8];
  *(_QWORD *)v64 = *(_QWORD *)v69;
  v171 = v72;
  v64[8] = v72;
  sub_1BC9964B8(v67, (uint64_t)v50, (uint64_t (*)(_QWORD))sub_1BC9BD26C);
  v73 = (uint64_t)v205;
  v70(v205, v50, v34);
  v74 = (void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v35[7];
  v74(v73, 0, 1, v34);
  v181 = v35;
  v75 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v35[6];
  if (v75(v73, 1, v34) == 1)
  {
    sub_1BC997208((uint64_t)v61, (uint64_t (*)(_QWORD))sub_1BC9BD26C);
    sub_1BC9B3A38(v73, (unint64_t *)&qword_1ED6C71E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAE5D0]);
LABEL_4:
    v76 = v206;
LABEL_10:
    v77 = v202;
    return sub_1BC9964B8(v76, v77, type metadata accessor for SignificantChangeEngine.State);
  }
  v167 = v61;
  v78 = v204;
  v70(v204, (char *)v73, v34);
  sub_1BC9964B8(v180, (uint64_t)v50, (uint64_t (*)(_QWORD))sub_1BC9BD26C);
  v79 = (uint64_t)v203;
  v205 = v50;
  v70((char *)v203, v50, v34);
  v74(v79, 0, 1, v34);
  v80 = v75(v79, 1, v34);
  v81 = v206;
  if (v80 == 1)
  {
    ((void (*)(char *, uint64_t))v181[1])(v78, v34);
    sub_1BC997208((uint64_t)v167, (uint64_t (*)(_QWORD))sub_1BC9BD26C);
    sub_1BC9B3A38(v79, (unint64_t *)&qword_1ED6C71E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAE5D0]);
    v76 = v81;
    goto LABEL_10;
  }
  v82 = v201;
  v70(v201, (char *)v79, v34);
  v83 = v197;
  sub_1BCA7F410(v81 + *(int *)(v199 + 24), (uint64_t)v197);
  v84 = v81;
  v85 = *(char **)(v198 + 48);
  v86 = v200;
  v87 = ((uint64_t (*)(_QWORD, uint64_t, uint64_t))v85)(v83, 1, v200);
  v88 = v181;
  if (v87 == 1)
  {
    v89 = v78;
    v90 = (void (*)(char *, uint64_t))v181[1];
    v90(v82, v34);
    v90(v89, v34);
    sub_1BC997208((uint64_t)v167, (uint64_t (*)(_QWORD))sub_1BC9BD26C);
    sub_1BC997208((uint64_t)v83, (uint64_t (*)(_QWORD))sub_1BCA7F41C);
    v76 = v84;
    goto LABEL_10;
  }
  v203 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v85;
  v92 = (uint64_t)v179;
  sub_1BC9AE330((uint64_t)v83, (uint64_t)v179, type metadata accessor for SignificantChangeEngine.State.FrequencyShift);
  if ((*(_BYTE *)(v92 + *(int *)(v86 + 20)) & 1) == 0)
  {
    sub_1BC997208(v92, type metadata accessor for SignificantChangeEngine.State.FrequencyShift);
    v102 = v78;
    v103 = (void (*)(char *, uint64_t))v88[1];
    v103(v82, v34);
    v104 = v102;
LABEL_28:
    v103(v104, v34);
    sub_1BC997208((uint64_t)v167, (uint64_t (*)(_QWORD))sub_1BC9BD26C);
    goto LABEL_4;
  }
  v197 = v70;
  v93 = sub_1BCA79BE8(v176, v177);
  v95 = v94;
  v97 = v96;
  v99 = v98;
  if ((v98 & 1) == 0)
  {
    swift_bridgeObjectRetain();
    v100 = v196;
LABEL_15:
    v101 = sub_1BCA7C8DC(v93, v95, v97, v99, sub_1BCA8F5EC, (uint64_t (*)(_QWORD))sub_1BC9BD26C);
    goto LABEL_23;
  }
  sub_1BCAB67E0();
  swift_unknownObjectRetain_n();
  swift_bridgeObjectRetain();
  v105 = swift_dynamicCastClass();
  v100 = v196;
  if (!v105)
  {
    swift_unknownObjectRelease();
    v105 = MEMORY[0x1E0DEE9D8];
  }
  v106 = *(_QWORD *)(v105 + 16);
  swift_release();
  if (__OFSUB__(v99 >> 1, v97))
  {
    __break(1u);
    goto LABEL_41;
  }
  if (v106 != (v99 >> 1) - v97)
  {
LABEL_41:
    swift_unknownObjectRelease();
    v92 = (uint64_t)v179;
    goto LABEL_15;
  }
  v101 = swift_dynamicCastClass();
  v92 = (uint64_t)v179;
  if (!v101)
  {
    swift_unknownObjectRelease();
    v101 = MEMORY[0x1E0DEE9D8];
  }
LABEL_23:
  swift_unknownObjectRelease();
  v107 = *(_QWORD *)(v101 + 16);
  v108 = (void (*)(uint64_t, uint64_t, uint64_t))v197;
  if (!v107)
  {
    swift_release();
    sub_1BC997208(v92, type metadata accessor for SignificantChangeEngine.State.FrequencyShift);
    v103 = (void (*)(char *, uint64_t))v181[1];
    v103(v201, v34);
    v104 = v204;
    goto LABEL_28;
  }
  v109 = v174;
  v110 = v178;
  v111 = v178 + *(int *)(v174 + 48);
  v112 = v100;
  v113 = v172;
  sub_1BC9964B8(v101 + v170 + (v107 - 1) * v169, v172, (uint64_t (*)(_QWORD))sub_1BC9BD26C);
  v114 = v113 + *(int *)(v109 + 48);
  v108(v110, v113, v34);
  v180 = *(_QWORD *)v114;
  v115 = *(_BYTE *)(v114 + 8);
  LODWORD(v177) = v115;
  *(_QWORD *)v111 = v180;
  *(_BYTE *)(v111 + 8) = v115;
  v116 = v205;
  v117 = &v205[*(int *)(v109 + 48)];
  v118 = v181;
  v119 = (void (*)(char *, char *, uint64_t))v181[2];
  v119(v205, v167, v34);
  *(_QWORD *)v117 = v71;
  v117[8] = v171;
  v120 = v112;
  sub_1BCAB4B9C();
  v121 = (void (*)(char *, uint64_t))v118[1];
  v121(v116, v34);
  sub_1BCAB4DA0();
  v123 = v122;
  v124 = *(void (**)(char *, uint64_t))(v191 + 8);
  v125 = v193;
  v124(v120, v193);
  v126 = v175;
  v127 = &v175[*(int *)(v109 + 48)];
  v128 = v110;
  v129 = v125;
  v119(v175, (char *)v128, v34);
  *(_QWORD *)v127 = v180;
  v127[8] = v177;
  v130 = v188;
  sub_1BCAB4B9C();
  v205 = (char *)v121;
  v121(v126, v34);
  sub_1BCAB4DA0();
  v132 = v131;
  v188 = (char *)v124;
  v124(v130, v129);
  v133 = v119;
  v134 = v34;
  v135 = v190;
  sub_1BCA77EEC(v101, v173, v190, v63 - (v123 - v132));
  swift_release();
  v136 = v194;
  sub_1BC9964B8(v206, v194, type metadata accessor for SignificantChangeEngine.State);
  v137 = v195;
  v133(v195, v201, v34);
  v138 = v192;
  v133(v192, v204, v34);
  v139 = v189;
  v140 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v189 + 48);
  v141 = v199;
  if (v140(v135, 1, v199) == 1)
  {
    v142 = v187;
    sub_1BC9964B8(v136, v187, type metadata accessor for SignificantChangeEngine.State);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v139 + 56))(v142, 0, 1, v141);
    v143 = v196;
    sub_1BCAB4BC0();
    v144 = v191;
    v145 = v193;
    v146 = v186;
    (*(void (**)(uint64_t, char *, uint64_t))(v191 + 16))(v186, v143, v193);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v144 + 56))(v146, 0, 1, v145);
    v147 = v200;
    v148 = v146 + *(int *)(v200 + 24);
    v149 = type metadata accessor for SignificantChange(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v149 - 8) + 56))(v148, 1, 1, v149);
    *(_BYTE *)(v146 + *(int *)(v147 + 20)) = 1;
    ((void (*)(char *, uint64_t))v188)(v143, v145);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v198 + 56))(v146, 0, 1, v147);
    v133(v185, v195, v134);
    v150 = v183;
    sub_1BCA7EFEC(v142, v183);
    if (v140(v150, 1, v141) == 1)
    {
      sub_1BC997208(v150, (uint64_t (*)(_QWORD))sub_1BCA7EFF8);
      v151 = type metadata accessor for SignificantChangeEngine.State.MeanShift(0);
      v152 = v182;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v151 - 8) + 56))(v182, 1, 1, v151);
    }
    else
    {
      v152 = v182;
      sub_1BCA7F3D4(v150 + *(int *)(v141 + 20), v182);
      sub_1BC997208(v150, type metadata accessor for SignificantChangeEngine.State);
    }
    v155 = v206;
    v154 = (uint64_t)v168;
    v157 = v190;
    v156 = (uint64_t)v184;
    v158 = v186;
    sub_1BCA7F410(v186, (uint64_t)&v168[*(int *)(v141 + 24)]);
    v197((char *)v154, v185, v134);
    sub_1BC9AE330(v152, v154 + *(int *)(v141 + 20), (uint64_t (*)(_QWORD))sub_1BCA7F3E0);
    sub_1BC997208(v158, (uint64_t (*)(_QWORD))sub_1BCA7F41C);
    sub_1BC997208(v187, (uint64_t (*)(_QWORD))sub_1BCA7EFF8);
    v159 = (void (*)(char *, uint64_t))v205;
    ((void (*)(char *, uint64_t))v205)(v192, v134);
    v159(v195, v134);
    sub_1BC997208(v194, type metadata accessor for SignificantChangeEngine.State);
    sub_1BC997208(v157, (uint64_t (*)(_QWORD))sub_1BCA7EFF8);
  }
  else
  {
    v153 = (void (*)(char *, uint64_t))v205;
    ((void (*)(char *, uint64_t))v205)(v138, v134);
    v153(v137, v134);
    sub_1BC997208(v136, type metadata accessor for SignificantChangeEngine.State);
    v154 = (uint64_t)v168;
    sub_1BC9AE330(v135, (uint64_t)v168, type metadata accessor for SignificantChangeEngine.State);
    v155 = v206;
    v156 = (uint64_t)v184;
  }
  sub_1BCA7F410(v154 + *(int *)(v141 + 24), v156);
  v160 = v200;
  if (v203(v156, 1, v200) == 1)
  {
    sub_1BC997208(v156, (uint64_t (*)(_QWORD))sub_1BCA7F41C);
    sub_1BC997208(v178, (uint64_t (*)(_QWORD))sub_1BC9BD26C);
    sub_1BC997208((uint64_t)v179, type metadata accessor for SignificantChangeEngine.State.FrequencyShift);
    v161 = (void (*)(char *, uint64_t))v205;
    ((void (*)(char *, uint64_t))v205)(v201, v134);
    v161(v204, v134);
    sub_1BC997208((uint64_t)v167, (uint64_t (*)(_QWORD))sub_1BC9BD26C);
    v162 = v202;
LABEL_34:
    sub_1BC997208(v154, type metadata accessor for SignificantChangeEngine.State);
    v76 = v155;
    v77 = v162;
    return sub_1BC9964B8(v76, v77, type metadata accessor for SignificantChangeEngine.State);
  }
  v163 = (void (*)(char *, uint64_t))v205;
  v164 = *(_BYTE *)(v156 + *(int *)(v160 + 20));
  sub_1BC997208(v156, type metadata accessor for SignificantChangeEngine.State.FrequencyShift);
  v162 = v202;
  if ((v164 & 1) != 0)
  {
    v165 = sub_1BCAB67C8();
    swift_bridgeObjectRelease();
    sub_1BC997208(v178, (uint64_t (*)(_QWORD))sub_1BC9BD26C);
    sub_1BC997208((uint64_t)v179, type metadata accessor for SignificantChangeEngine.State.FrequencyShift);
    v163(v201, v134);
    v163(v204, v134);
    sub_1BC997208((uint64_t)v167, (uint64_t (*)(_QWORD))sub_1BC9BD26C);
    if ((v165 & 1) == 0)
      goto LABEL_34;
  }
  else
  {
    swift_bridgeObjectRelease();
    sub_1BC997208(v178, (uint64_t (*)(_QWORD))sub_1BC9BD26C);
    sub_1BC997208((uint64_t)v179, type metadata accessor for SignificantChangeEngine.State.FrequencyShift);
    v163(v201, v134);
    v163(v204, v134);
    sub_1BC997208((uint64_t)v167, (uint64_t (*)(_QWORD))sub_1BC9BD26C);
  }
  return sub_1BC9AE330(v154, v162, type metadata accessor for SignificantChangeEngine.State);
}

uint64_t sub_1BCA79BE8(uint64_t result, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;

  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    v3 = *(_QWORD *)(a2 + 16);
    if ((uint64_t)v3 >= result)
      v4 = result;
    else
      v4 = *(_QWORD *)(a2 + 16);
    if (result)
      v5 = v4;
    else
      v5 = 0;
    if (v3 >= v5)
    {
      sub_1BC9BD26C(0);
      return a2;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1BCA79C58(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  _BYTE *v9;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return 0;
  sub_1BC9BD26C(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = *(_QWORD *)(v4 + 72);
  v7 = *(int *)(v3 + 48);
  result = v1 - 1;
  v9 = (_BYTE *)(v5 + v6 * (v1 - 1) + v7 + a1 + 8);
  while (*v9 == 1)
  {
    --result;
    v9 -= v6;
    if (result == -1)
      return 0;
  }
  return result;
}

uint64_t sub_1BCA79CF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char v15;
  void (*v16)(char *, uint64_t);
  uint64_t v18;

  sub_1BCA7F46C(0);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1BCAB4E54();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v18 - v13;
  sub_1BC9AFC58(a4, (uint64_t)v7);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
  {
    sub_1BC997208((uint64_t)v7, (uint64_t (*)(_QWORD))sub_1BCA7F46C);
    v15 = 1;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v14, v7, v8);
    sub_1BCAB4B9C();
    sub_1BC996948(&qword_1ED6C71E8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], MEMORY[0x1E0CB08B0]);
    v15 = sub_1BCAB5EB0() ^ 1;
    v16 = *(void (**)(char *, uint64_t))(v9 + 8);
    v16(v11, v8);
    v16(v14, v8);
  }
  return v15 & 1;
}

uint64_t sub_1BCA79E68@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t result;
  char *v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;

  v5 = v4;
  v61 = a1;
  v62 = a2;
  v8 = sub_1BCAB4BD8();
  v59 = *(_QWORD *)(v8 - 8);
  v60 = v8;
  MEMORY[0x1E0C80A78](v8);
  v58 = (char *)&v53 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1BCAB4E54();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v53 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)&v53 - v15;
  v17 = (int *)type metadata accessor for SignificantChange.Period(0);
  v18 = *((_QWORD *)v17 - 1);
  MEMORY[0x1E0C80A78](v17);
  v56 = (uint64_t)&v53 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v20);
  v57 = (char *)&v53 - v21;
  MEMORY[0x1E0C80A78](v22);
  v24 = (char *)&v53 - v23;
  v25 = type metadata accessor for SignificantChange(0);
  v26 = *(int *)(v25 + 20);
  v27 = v5;
  v28 = *(_QWORD *)(v5 + v26);
  v29 = *(_QWORD *)(v28 + 16);
  if (!v29)
    return sub_1BC9964B8(v27, v62, type metadata accessor for SignificantChange);
  v30 = (*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80);
  v54 = *(_QWORD *)(v18 + 72);
  v55 = v25;
  sub_1BC9964B8(v28 + v30 + v54 * (v29 - 1), (uint64_t)v24, type metadata accessor for SignificantChange.Period);
  sub_1BCAB4BC0();
  sub_1BC996948(&qword_1ED6C71E8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], MEMORY[0x1E0CB08B0]);
  v31 = sub_1BCAB5EB0();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v16, v10);
  if ((v31 & 1) != 0)
  {
    sub_1BC997208((uint64_t)v24, type metadata accessor for SignificantChange.Period);
    return sub_1BC9964B8(v27, v62, type metadata accessor for SignificantChange);
  }
  v53 = v30;
  sub_1BCAB4BC0();
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v61, v10);
  v33 = v58;
  sub_1BCAB4BA8();
  v34 = (uint64_t)v57;
  (*(void (**)(char *, char *, uint64_t))(v59 + 16))(v57, v33, v60);
  v35 = v24[v17[7]];
  *(double *)(v34 + v17[5]) = a3;
  *(double *)(v34 + v17[6]) = a4;
  *(_BYTE *)(v34 + v17[7]) = v35;
  v36 = v27;
  v37 = sub_1BCA7BFE4(1, *(_QWORD *)(v27 + v26));
  v39 = v38;
  v41 = v40;
  v43 = v42;
  if ((v42 & 1) != 0)
  {
    sub_1BCAB67E0();
    swift_unknownObjectRetain_n();
    swift_bridgeObjectRetain();
    v46 = swift_dynamicCastClass();
    if (!v46)
    {
      swift_unknownObjectRelease();
      v46 = MEMORY[0x1E0DEE9D8];
    }
    v47 = *(_QWORD *)(v46 + 16);
    swift_release();
    v44 = v53;
    if (__OFSUB__(v43 >> 1, v41))
    {
      __break(1u);
    }
    else if (v47 == (v43 >> 1) - v41)
    {
      v45 = swift_dynamicCastClass();
      v34 = (uint64_t)v57;
      if (!v45)
      {
        swift_unknownObjectRelease();
        v45 = MEMORY[0x1E0DEE9D8];
      }
      goto LABEL_14;
    }
    swift_unknownObjectRelease();
    v34 = (uint64_t)v57;
  }
  else
  {
    swift_bridgeObjectRetain();
    v44 = v53;
  }
  v45 = sub_1BCA7C8DC(v37, v39, v41, v43, sub_1BCA8F54C, type metadata accessor for SignificantChange.Period);
LABEL_14:
  swift_unknownObjectRelease();
  v48 = v56;
  sub_1BC9964B8(v34, v56, type metadata accessor for SignificantChange.Period);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v45 = sub_1BC9DA954(0, *(_QWORD *)(v45 + 16) + 1, 1, v45);
  v50 = *(_QWORD *)(v45 + 16);
  v49 = *(_QWORD *)(v45 + 24);
  if (v50 >= v49 >> 1)
    v45 = sub_1BC9DA954(v49 > 1, v50 + 1, 1, v45);
  *(_QWORD *)(v45 + 16) = v50 + 1;
  sub_1BC9AE330(v48, v45 + v44 + v50 * v54, type metadata accessor for SignificantChange.Period);
  sub_1BC997208(v34, type metadata accessor for SignificantChange.Period);
  (*(void (**)(char *, uint64_t))(v59 + 8))(v58, v60);
  sub_1BC997208((uint64_t)v24, type metadata accessor for SignificantChange.Period);
  v51 = v62;
  sub_1BC9964B8(v36, v62, type metadata accessor for SignificantChange.Period);
  v52 = v55;
  result = sub_1BC9964B8(v36 + *(int *)(v55 + 24), v51 + *(int *)(v55 + 24), (uint64_t (*)(_QWORD))sub_1BCA8025C);
  *(_QWORD *)(v51 + *(int *)(v52 + 20)) = v45;
  return result;
}

uint64_t sub_1BCA7A2FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  unsigned int (*v23)(char *, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;

  v29 = a3;
  sub_1BCA7F41C(0);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BCA7EFF8(0);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v28 - v12;
  sub_1BCA7F3E0(0);
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)&v28 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_1BCAB4BD8();
  v18 = *(_QWORD *)(v17 - 8);
  v19 = MEMORY[0x1E0C80A78](v17);
  v21 = (char *)&v28 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v18 + 16))(v21, a2, v17, v19);
  sub_1BCA7EFEC(a1, (uint64_t)v13);
  v22 = type metadata accessor for SignificantChangeEngine.State(0);
  v23 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 48);
  if (v23(v13, 1, v22) == 1)
  {
    sub_1BC997208((uint64_t)v13, (uint64_t (*)(_QWORD))sub_1BCA7EFF8);
    v24 = type metadata accessor for SignificantChangeEngine.State.MeanShift(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v16, 1, 1, v24);
  }
  else
  {
    sub_1BCA7F3D4((uint64_t)&v13[*(int *)(v22 + 20)], (uint64_t)v16);
    sub_1BC997208((uint64_t)v13, type metadata accessor for SignificantChangeEngine.State);
  }
  sub_1BCA7EFEC(a1, (uint64_t)v10);
  if (v23(v10, 1, v22) == 1)
  {
    sub_1BC997208((uint64_t)v10, (uint64_t (*)(_QWORD))sub_1BCA7EFF8);
    v25 = type metadata accessor for SignificantChangeEngine.State.FrequencyShift(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v7, 1, 1, v25);
  }
  else
  {
    sub_1BCA7F410((uint64_t)&v10[*(int *)(v22 + 24)], (uint64_t)v7);
    sub_1BC997208((uint64_t)v10, type metadata accessor for SignificantChangeEngine.State);
  }
  v26 = v29;
  (*(void (**)(uint64_t, char *, uint64_t))(v18 + 32))(v29, v21, v17);
  sub_1BC9AE330((uint64_t)v16, v26 + *(int *)(v22 + 20), (uint64_t (*)(_QWORD))sub_1BCA7F3E0);
  return sub_1BC9AE330((uint64_t)v7, v26 + *(int *)(v22 + 24), (uint64_t (*)(_QWORD))sub_1BCA7F41C);
}

uint64_t sub_1BCA7A5A0(uint64_t a1, uint64_t a2, uint64_t a3, char *a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char v22;
  void (*v23)(char *, uint64_t);
  void (*v24)(char *, uint64_t, uint64_t);
  uint64_t v25;
  char *v26;
  uint64_t *v27;
  uint64_t v28;
  char v29;
  char v30;
  char *v31;
  char *v32;
  char *v33;
  void (*v34)(char *, uint64_t);
  _QWORD v36[2];
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;

  v40 = a5;
  v42 = a4;
  sub_1BC9BD26C(0);
  v7 = v6;
  MEMORY[0x1E0C80A78](v6);
  v39 = (char *)v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)v36 - v10;
  v12 = sub_1BCAB4BD8();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_1BCAB4E54();
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16);
  v37 = (char *)v36 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19);
  v21 = (char *)v36 - v20;
  sub_1BCAB4B9C();
  v36[1] = sub_1BC996948(&qword_1ED6C71E8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], MEMORY[0x1E0CB08B0]);
  v22 = sub_1BCAB5EB0();
  v23 = *(void (**)(char *, uint64_t))(v17 + 8);
  v23(v21, v16);
  v41 = v13;
  v42 = v15;
  v24 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  v24(v15, a1, v12);
  v38 = v7;
  v25 = *(int *)(v7 + 48);
  v26 = &v11[v25];
  v27 = (uint64_t *)(v40 + v25);
  ((void (*)(char *))v24)(v11);
  v28 = *v27;
  v29 = *((_BYTE *)v27 + 8);
  *(_QWORD *)v26 = v28;
  v26[8] = v29;
  if ((v22 & 1) != 0)
  {
    sub_1BC997208((uint64_t)v11, (uint64_t (*)(_QWORD))sub_1BC9BD26C);
    v30 = 0;
    (*(void (**)(char *, uint64_t))(v41 + 8))(v42, v12);
  }
  else
  {
    sub_1BCAB4B9C();
    v31 = v39;
    v32 = &v39[*(int *)(v38 + 48)];
    v24(v39, (uint64_t)v11, v12);
    *(_QWORD *)v32 = v28;
    v32[8] = v29;
    v33 = v37;
    sub_1BCAB4B9C();
    v34 = *(void (**)(char *, uint64_t))(v41 + 8);
    v34(v31, v12);
    v30 = sub_1BCAB5EB0() ^ 1;
    v23(v33, v16);
    v23(v21, v16);
    sub_1BC997208((uint64_t)v11, (uint64_t (*)(_QWORD))sub_1BC9BD26C);
    v34(v42, v12);
  }
  return v30 & 1;
}

BOOL sub_1BCA7A83C()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char v5;
  uint64_t v7;

  v0 = sub_1BCAB4E54();
  v1 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870];
  v2 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BCAB4BC0();
  sub_1BC996948(&qword_1ED6C71E8, v1, MEMORY[0x1E0CB08B0]);
  v5 = sub_1BCAB5EB0();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v0);
  return (v5 & 1) == 0;
}

BOOL sub_1BCA7A904(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t, uint64_t);
  char v20;
  char *v21;
  void (*v22)(char *, uint64_t);
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char v26;
  char *v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t);
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;

  v35 = a2;
  v33 = sub_1BCAB4E54();
  v36 = *(_QWORD *)(v33 - 8);
  MEMORY[0x1E0C80A78](v33);
  v34 = (char *)&v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v32 = (char *)&v31 - v5;
  sub_1BC9BD26C(0);
  v7 = v6;
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v31 - v11;
  v14 = *(int *)(v13 + 48);
  v15 = (char *)&v31 + v14 - v11;
  v16 = a1 + v14;
  v17 = sub_1BCAB4BD8();
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(void (**)(char *, uint64_t, uint64_t))(v18 + 16);
  v19(v12, a1, v17);
  v20 = *(_BYTE *)(v16 + 8);
  *(_QWORD *)v15 = *(_QWORD *)v16;
  v15[8] = v20;
  v21 = v32;
  sub_1BCAB4BC0();
  v22 = *(void (**)(char *, uint64_t))(v18 + 8);
  v22(v12, v17);
  v23 = *(int *)(v7 + 48);
  v24 = &v9[v23];
  v25 = v35 + v23;
  ((void (*)(char *))v19)(v9);
  v26 = *(_BYTE *)(v25 + 8);
  *(_QWORD *)v24 = *(_QWORD *)v25;
  v24[8] = v26;
  v27 = v34;
  sub_1BCAB4BC0();
  v22(v9, v17);
  sub_1BC996948(&qword_1ED6C71E8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], MEMORY[0x1E0CB08B0]);
  v28 = v33;
  LOBYTE(v17) = sub_1BCAB5EB0();
  v29 = *(void (**)(char *, uint64_t))(v36 + 8);
  v29(v27, v28);
  v29(v21, v28);
  return (v17 & 1) == 0;
}

uint64_t sub_1BCA7AB14()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1BCA7AB40 + 4 * byte_1BCAC7776[*v0]))(0x746E756F63, 0xE500000000000000);
}

uint64_t sub_1BCA7AB40()
{
  return 7173491;
}

uint64_t sub_1BCA7AB50()
{
  return 0x5364657261757173;
}

uint64_t sub_1BCA7AB6C()
{
  return 1851876717;
}

uint64_t sub_1BCA7AB7C()
{
  return 0x65636E6169726176;
}

uint64_t sub_1BCA7AB94@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1BCA8EEAC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1BCA7ABB8()
{
  sub_1BCA7F5F8();
  return sub_1BCAB68D0();
}

uint64_t sub_1BCA7ABE0()
{
  sub_1BCA7F5F8();
  return sub_1BCAB68DC();
}

uint64_t SignificantChangeEngine.ChangepointComponent.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE v9[16];

  sub_1BC9ACE04(0, &qword_1ED6C4748, (uint64_t (*)(void))sub_1BCA7F5F8, (uint64_t)&type metadata for SignificantChangeEngine.ChangepointComponent.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v7 = &v9[-v6];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BCA7F5F8();
  sub_1BCAB68B8();
  v9[15] = 0;
  sub_1BCAB675C();
  if (!v1)
  {
    v9[14] = 1;
    sub_1BCAB675C();
    v9[13] = 2;
    sub_1BCAB675C();
    v9[12] = 3;
    sub_1BCAB675C();
    v9[11] = 4;
    sub_1BCAB675C();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t SignificantChangeEngine.ChangepointComponent.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  char v22;
  char v23;
  char v24;
  char v25;
  char v26;

  v21 = a2;
  sub_1BC9ACE04(0, &qword_1ED6C46C0, (uint64_t (*)(void))sub_1BCA7F5F8, (uint64_t)&type metadata for SignificantChangeEngine.ChangepointComponent.CodingKeys, MEMORY[0x1E0DED048]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v21 - v7;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BCA7F5F8();
  sub_1BCAB68AC();
  if (!v2)
  {
    v9 = v21;
    v26 = 0;
    sub_1BCAB66CC();
    v11 = v10;
    v25 = 1;
    sub_1BCAB66CC();
    v13 = v12;
    v24 = 2;
    sub_1BCAB66CC();
    v15 = v14;
    v23 = 3;
    sub_1BCAB66CC();
    v17 = v16;
    v22 = 4;
    sub_1BCAB66CC();
    v20 = v19;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *v9 = v11;
    v9[1] = v13;
    v9[2] = v15;
    v9[3] = v17;
    v9[4] = v20;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_1BCA7AFE0@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return SignificantChangeEngine.ChangepointComponent.init(from:)(a1, a2);
}

uint64_t sub_1BCA7AFF4(_QWORD *a1)
{
  return SignificantChangeEngine.ChangepointComponent.encode(to:)(a1);
}

uint64_t sub_1BCA7B00C(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1BCA7B038 + 4 * byte_1BCAC777B[a1]))(1702125924, 0xE400000000000000);
}

uint64_t sub_1BCA7B038()
{
  return 0x65756C615670;
}

uint64_t sub_1BCA7B04C()
{
  return 0x7473655474;
}

uint64_t sub_1BCA7B060()
{
  return 0x666968536E61656DLL;
}

unint64_t sub_1BCA7B07C()
{
  return 0xD000000000000010;
}

uint64_t sub_1BCA7B098()
{
  return 0x6953746365666665;
}

uint64_t sub_1BCA7B0B4()
{
  return 12908;
}

uint64_t sub_1BCA7B0C0()
{
  return 7563372;
}

uint64_t sub_1BCA7B0D0()
{
  return 7563378;
}

uint64_t sub_1BCA7B0E4()
{
  unsigned __int8 *v0;

  return sub_1BCA7B00C(*v0);
}

uint64_t sub_1BCA7B0EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1BCA8F0AC(a1, a2);
  *a3 = result;
  return result;
}

void sub_1BCA7B110(_BYTE *a1@<X8>)
{
  *a1 = 9;
}

uint64_t sub_1BCA7B11C()
{
  sub_1BCA7F63C();
  return sub_1BCAB68D0();
}

uint64_t sub_1BCA7B144()
{
  sub_1BCA7F63C();
  return sub_1BCAB68DC();
}

uint64_t SignificantChangeEngine.Changepoint.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  __int128 *v11;
  uint64_t v12;
  __int128 v13;
  __int128 *v14;
  uint64_t v15;
  __int128 v16;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  char v21;

  v3 = v1;
  sub_1BC9ACE04(0, &qword_1ED6C4740, (uint64_t (*)(void))sub_1BCA7F63C, (uint64_t)&type metadata for SignificantChangeEngine.Changepoint.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v18 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BCA7F63C();
  sub_1BCAB68B8();
  LOBYTE(v18) = 0;
  sub_1BCAB4E54();
  sub_1BC996948(&qword_1ED6C6978, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], MEMORY[0x1E0CB0890]);
  sub_1BCAB6774();
  if (!v2)
  {
    v10 = type metadata accessor for SignificantChangeEngine.Changepoint(0);
    LOBYTE(v18) = 1;
    sub_1BCAB675C();
    LOBYTE(v18) = 2;
    sub_1BCAB675C();
    LOBYTE(v18) = 3;
    sub_1BCAB675C();
    LOBYTE(v18) = 4;
    sub_1BCAB675C();
    LOBYTE(v18) = 5;
    sub_1BCAB675C();
    LOBYTE(v18) = 6;
    sub_1BCAB675C();
    v11 = (__int128 *)(v3 + *(int *)(v10 + 44));
    v12 = *((_QWORD *)v11 + 4);
    v13 = v11[1];
    v18 = *v11;
    v19 = v13;
    v20 = v12;
    v21 = 7;
    sub_1BCA7F680();
    sub_1BCAB6774();
    v14 = (__int128 *)(v3 + *(int *)(v10 + 48));
    v15 = *((_QWORD *)v14 + 4);
    v16 = v14[1];
    v18 = *v14;
    v19 = v16;
    v20 = v15;
    v21 = 8;
    sub_1BCAB6774();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t SignificantChangeEngine.Changepoint.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  __int128 v23;
  uint64_t v24;
  char *v25;
  __int128 v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  char v39;

  v29 = a2;
  v30 = sub_1BCAB4E54();
  v32 = *(_QWORD *)(v30 - 8);
  MEMORY[0x1E0C80A78](v30);
  v33 = (char *)&v28 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BC9ACE04(0, &qword_1ED6C46B8, (uint64_t (*)(void))sub_1BCA7F63C, (uint64_t)&type metadata for SignificantChangeEngine.Changepoint.CodingKeys, MEMORY[0x1E0DED048]);
  v31 = v4;
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v28 - v6;
  v8 = (int *)type metadata accessor for SignificantChangeEngine.Changepoint(0);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BCA7F63C();
  v34 = v7;
  v11 = v35;
  sub_1BCAB68AC();
  if (v11)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v12 = v5;
  v13 = v32;
  LOBYTE(v36) = 0;
  sub_1BC996948(&qword_1ED6C7518, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], MEMORY[0x1E0CB08C0]);
  v14 = v30;
  sub_1BCAB66E4();
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v10, v33, v14);
  LOBYTE(v36) = 1;
  sub_1BCAB66CC();
  *(_QWORD *)&v10[v8[5]] = v15;
  LOBYTE(v36) = 2;
  sub_1BCAB66CC();
  *(_QWORD *)&v10[v8[6]] = v16;
  LOBYTE(v36) = 3;
  sub_1BCAB66CC();
  *(_QWORD *)&v10[v8[7]] = v17;
  LOBYTE(v36) = 4;
  sub_1BCAB66CC();
  *(_QWORD *)&v10[v8[8]] = v18;
  LOBYTE(v36) = 5;
  sub_1BCAB66CC();
  *(_QWORD *)&v10[v8[9]] = v19;
  LOBYTE(v36) = 6;
  sub_1BCAB66CC();
  *(_QWORD *)&v10[v8[10]] = v20;
  v39 = 7;
  sub_1BCA7F6C4();
  sub_1BCAB66E4();
  v21 = v38;
  v22 = &v10[v8[11]];
  v23 = v37;
  *(_OWORD *)v22 = v36;
  *((_OWORD *)v22 + 1) = v23;
  *((_QWORD *)v22 + 4) = v21;
  v39 = 8;
  sub_1BCAB66E4();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v34, v31);
  v24 = v38;
  v25 = &v10[v8[12]];
  v26 = v37;
  *(_OWORD *)v25 = v36;
  *((_OWORD *)v25 + 1) = v26;
  *((_QWORD *)v25 + 4) = v24;
  sub_1BC9964B8((uint64_t)v10, v29, type metadata accessor for SignificantChangeEngine.Changepoint);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return sub_1BC997208((uint64_t)v10, type metadata accessor for SignificantChangeEngine.Changepoint);
}

uint64_t sub_1BCA7B8A4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return SignificantChangeEngine.Changepoint.init(from:)(a1, a2);
}

uint64_t sub_1BCA7B8B8(_QWORD *a1)
{
  return SignificantChangeEngine.Changepoint.encode(to:)(a1);
}

uint64_t sub_1BCA7B8CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, double *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  double v7;
  double v8;
  int *v9;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t, int *);
  uint64_t v11;
  uint64_t v12;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  double v33;
  double v34;
  double v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  uint64_t v39;
  uint64_t v40;
  double v41;

  v7 = *(double *)a1;
  if (*(double *)a1 >= (double)a5 && (v8 = *(double *)a2, *(double *)a2 >= (double)a5))
  {
    v14 = *(double *)(a1 + 32);
    v36 = *(_QWORD *)(a1 + 24);
    v37 = *(_QWORD *)(a1 + 16);
    v15 = *(double *)(a2 + 32);
    v39 = *(_QWORD *)(a2 + 24);
    v40 = *(_QWORD *)(a2 + 16);
    v33 = a3[4];
    v35 = *a3;
    v38 = *(double *)(a1 + 8);
    v16 = v38 / v7;
    v41 = *(double *)(a2 + 8);
    v17 = v41 / v8;
    v21 = vabdd_f64(v38 / v7, v41 / v8) * pow(v14 / v7 + v15 / v8, -0.5);
    v22 = v8 * v8 * (v8 + -1.0);
    v23 = v15 * v15 / v22;
    v24 = v14 * v14 / (v7 * v7 * (v7 + -1.0)) + v23;
    if (v24 <= 0.0)
    {
      v22 = v35;
      v23 = v22 * v22;
      v24 = v33 * v33 / (v22 * v22 * (v35 + -1.0));
    }
    v18 = v14 / v7 + v15 / v8;
    if (v18 * v18 / v24 > 0.00000001)
      v25 = v18 * v18 / v24;
    else
      v25 = 0.00000001;
    v34 = v17 - v16;
    v26 = vabdd_f64(v17, v16) / sqrt((v14 + v15) * 0.5);
    v27 = StudentsCDF(v21, v25, 0.5, v23, v22, v8 + -1.0, v19, v20);
    if (v21 > 0.0)
      v27 = 1.0 - v27;
    v28 = v27 + v27;
    v29 = sub_1BCAB4E54();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 16))(a6, a4, v29);
    v9 = (int *)type metadata accessor for SignificantChangeEngine.Changepoint(0);
    *(double *)(a6 + v9[5]) = v28;
    *(double *)(a6 + v9[6]) = v21;
    *(double *)(a6 + v9[7]) = v34;
    *(double *)(a6 + v9[8]) = v25;
    *(double *)(a6 + v9[9]) = v26;
    *(double *)(a6 + v9[10]) = v7 * v14 + v8 * v15;
    v30 = a6 + v9[11];
    *(double *)v30 = v7;
    *(double *)(v30 + 8) = v38;
    *(_QWORD *)(v30 + 16) = v37;
    *(_QWORD *)(v30 + 24) = v36;
    *(double *)(v30 + 32) = v14;
    v31 = a6 + v9[12];
    *(double *)v31 = v8;
    *(double *)(v31 + 8) = v41;
    *(_QWORD *)(v31 + 16) = v40;
    *(_QWORD *)(v31 + 24) = v39;
    *(double *)(v31 + 32) = v15;
    v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *))(*((_QWORD *)v9 - 1) + 56);
    v11 = a6;
    v12 = 0;
  }
  else
  {
    v9 = (int *)type metadata accessor for SignificantChangeEngine.Changepoint(0);
    v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *))(*((_QWORD *)v9 - 1) + 56);
    v11 = a6;
    v12 = 1;
  }
  return v10(v11, v12, 1, v9);
}

double sub_1BCA7BB10(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  double v13;
  uint64_t v15;

  sub_1BC9BD26C(0);
  v8 = v7;
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1BCAB4BD8();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v10, a2, v11);
  v12 = &v10[*(int *)(v8 + 48)];
  *(_QWORD *)v12 = a3;
  v12[8] = a4 & 1;
  v13 = sub_1BCA7BBF8();
  sub_1BC997208((uint64_t)v10, (uint64_t (*)(_QWORD))sub_1BC9BD26C);
  return v13;
}

double sub_1BCA7BBF8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  double v7;
  double v8;
  void (*v9)(char *, uint64_t);
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  uint64_t v18;

  v0 = sub_1BCAB4E54();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v3 = (char *)&v18 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v18 - v5;
  sub_1BCAB4BC0();
  sub_1BCAB4DA0();
  v8 = v7;
  v9 = *(void (**)(char *, uint64_t))(v1 + 8);
  v9(v6, v0);
  sub_1BCAB4BC0();
  sub_1BCAB4DA0();
  v11 = v10;
  v9(v3, v0);
  v12 = vabdd_f64(v8, v11);
  sub_1BCAB4B9C();
  sub_1BCAB4DA0();
  v14 = v13;
  v9(v6, v0);
  sub_1BCAB4B9C();
  sub_1BCAB4DA0();
  v16 = v15;
  v9(v3, v0);
  return v12 + vabdd_f64(v14, v16);
}

uint64_t sub_1BCA7BD38(uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t);
  char *v24;
  char *v25;
  void (*v26)(char *, char *, uint64_t);
  uint64_t v27;
  uint64_t v28;
  char v29;
  char *v30;
  char v31;
  uint64_t v32;
  char *v33;
  char *v34;
  void (*v35)(char *, uint64_t);
  uint64_t v37;
  void (*v38)(char *, uint64_t);
  char *v39;
  void (*v40)(char *, uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;
  void (*v43)(char *, uint64_t);
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;

  v47 = a3;
  v46 = a2;
  v42 = sub_1BCAB4E54();
  v44 = *(_QWORD *)(v42 - 8);
  MEMORY[0x1E0C80A78](v42);
  v45 = (char *)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v37 - v6;
  sub_1BC9BD26C(0);
  v48 = v8;
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v37 - v12;
  v15 = *(int *)(v14 + 48);
  v16 = (char *)&v37 + v15 - v12;
  v41 = a1;
  v17 = (uint64_t *)(a1 + v15);
  v18 = sub_1BCAB4BD8();
  v19 = *(_QWORD *)(v18 - 8);
  v40 = *(void (**)(char *, uint64_t, uint64_t))(v19 + 16);
  v40(v13, a1, v18);
  v20 = *((_BYTE *)v17 + 8);
  *(_QWORD *)v16 = *v17;
  v16[8] = v20;
  sub_1BCAB4B9C();
  v38 = *(void (**)(char *, uint64_t))(v19 + 8);
  v38(v13, v18);
  sub_1BC996948(&qword_1ED6C71E8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], MEMORY[0x1E0CB08B0]);
  v21 = v42;
  LOBYTE(v16) = sub_1BCAB5EB0();
  v22 = v44;
  v23 = *(void (**)(char *, uint64_t))(v44 + 8);
  v39 = v7;
  v43 = v23;
  v23(v7, v21);
  v24 = &v10[*(int *)(v48 + 48)];
  v46 = v10;
  v25 = v10;
  v26 = (void (*)(char *, char *, uint64_t))v40;
  v27 = v21;
  v40(v25, v41, v18);
  v28 = *v17;
  v29 = *((_BYTE *)v17 + 8);
  *(_QWORD *)v24 = v28;
  v24[8] = v29;
  v30 = v45;
  (*(void (**)(char *, uint64_t, uint64_t))(v22 + 16))(v45, v47, v27);
  if ((v16 & 1) != 0)
  {
    v31 = 0;
    v32 = (uint64_t)v46;
    v43(v30, v27);
  }
  else
  {
    v33 = &v13[*(int *)(v48 + 48)];
    v32 = (uint64_t)v46;
    v26(v13, v46, v18);
    *(_QWORD *)v33 = v28;
    v33[8] = v29;
    v34 = v39;
    sub_1BCAB4B9C();
    v38(v13, v18);
    v31 = sub_1BCAB4DF4();
    v35 = v43;
    v43(v34, v27);
    v35(v30, v27);
  }
  sub_1BC997208(v32, (uint64_t (*)(_QWORD))sub_1BC9BD26C);
  return v31 & 1;
}

uint64_t sub_1BCA7BFE4(uint64_t result, uint64_t a2)
{
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    type metadata accessor for SignificantChange.Period(0);
    return a2;
  }
  return result;
}

uint64_t SignificantChangeEngine.Changepoint.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = v0;
  sub_1BC998AB0(0, (unint64_t *)&qword_1ED6C7540, (uint64_t (*)(uint64_t))sub_1BC9E97E0, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_1BCABE680;
  v3 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for SignificantChangeEngine.Changepoint(0) + 28));
  v4 = MEMORY[0x1E0DEB100];
  *(_QWORD *)(v2 + 56) = MEMORY[0x1E0DEB070];
  *(_QWORD *)(v2 + 64) = v4;
  *(_QWORD *)(v2 + 32) = v3;
  sub_1BCAB5F1C();
  sub_1BCAB64C8();
  sub_1BCAB5F70();
  sub_1BCAB4E54();
  sub_1BC996948(&qword_1ED6C70C8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], MEMORY[0x1E0CB08F0]);
  sub_1BCAB6798();
  sub_1BCAB5F70();
  swift_bridgeObjectRelease();
  sub_1BCAB5F70();
  sub_1BCAB6084();
  sub_1BCAB5F70();
  sub_1BCAB6084();
  sub_1BCAB5F70();
  sub_1BCAB5F70();
  swift_bridgeObjectRelease();
  sub_1BCAB5F70();
  sub_1BCAB6084();
  sub_1BCAB5F70();
  sub_1BCAB6084();
  sub_1BCAB5F70();
  sub_1BCAB6084();
  sub_1BCAB5F70();
  sub_1BCAB6084();
  sub_1BCAB5F70();
  sub_1BCAB6084();
  sub_1BCAB5F70();
  sub_1BCAB6084();
  sub_1BCAB5F70();
  return 0;
}

uint64_t SignificantChange.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;

  v1 = type metadata accessor for SignificantChange.Period(0);
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v4 = (char *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = 0x2865676E616843;
  v26 = 0xE700000000000000;
  v5 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for SignificantChange(0) + 20));
  sub_1BCAB5F70();
  swift_bridgeObjectRelease();
  SignificantChange.Period.description.getter();
  sub_1BCAB5F70();
  swift_bridgeObjectRelease();
  sub_1BCAB5F70();
  v6 = *(_QWORD *)(v5 + 16);
  v7 = MEMORY[0x1E0DEE9D8];
  if (v6)
  {
    v23 = MEMORY[0x1E0DEE9D8];
    swift_bridgeObjectRetain();
    sub_1BC9BAC24(0, v6, 0);
    v8 = *(unsigned __int8 *)(v2 + 80);
    v21 = v5;
    v9 = v5 + ((v8 + 32) & ~v8);
    v22 = *(_QWORD *)(v2 + 72);
    v7 = v23;
    do
    {
      sub_1BC9964B8(v9, (uint64_t)v4, type metadata accessor for SignificantChange.Period);
      v10 = SignificantChange.Period.description.getter();
      v12 = v11;
      sub_1BC997208((uint64_t)v4, type metadata accessor for SignificantChange.Period);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1BC9BAC24(0, *(_QWORD *)(v7 + 16) + 1, 1);
        v7 = v23;
      }
      v14 = *(_QWORD *)(v7 + 16);
      v13 = *(_QWORD *)(v7 + 24);
      if (v14 >= v13 >> 1)
      {
        sub_1BC9BAC24(v13 > 1, v14 + 1, 1);
        v7 = v23;
      }
      *(_QWORD *)(v7 + 16) = v14 + 1;
      v15 = v7 + 16 * v14;
      *(_QWORD *)(v15 + 32) = v10;
      *(_QWORD *)(v15 + 40) = v12;
      v9 += v22;
      --v6;
    }
    while (v6);
    swift_bridgeObjectRelease();
  }
  v16 = *(_QWORD *)(v7 + 16);
  if (v16)
  {
    swift_bridgeObjectRetain();
    v17 = 0;
    v18 = v7 + 40;
    v19 = 0xE000000000000000;
    do
    {
      v23 = v17;
      v24 = v19;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1BCAB5F70();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v17 = v23;
      v19 = v24;
      v18 += 16;
      --v16;
    }
    while (v16);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  sub_1BCAB5F70();
  swift_bridgeObjectRelease();
  return v25;
}

uint64_t SignificantChange.Period.description.getter()
{
  uint64_t v0;

  if (*(_BYTE *)(v0 + *(int *)(type metadata accessor for SignificantChange.Period(0) + 28)) == 2)
  {
    sub_1BCAB64C8();
  }
  else
  {
    sub_1BCAB64C8();
    sub_1BCAB5F70();
    sub_1BCAB5F70();
    swift_bridgeObjectRelease();
  }
  sub_1BCAB5F70();
  sub_1BCAB6084();
  sub_1BCAB5F70();
  sub_1BCAB6084();
  sub_1BCAB5F70();
  sub_1BCAB4BD8();
  sub_1BC996948((unint64_t *)&qword_1ED6C6948, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAE5D0], MEMORY[0x1E0CAE608]);
  sub_1BCAB6798();
  sub_1BCAB5F70();
  swift_bridgeObjectRelease();
  sub_1BCAB5F70();
  return 0;
}

uint64_t sub_1BCA7C7F8(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  _QWORD *v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = a2 - result;
  if (__OFSUB__(a2, result))
  {
    __break(1u);
    goto LABEL_13;
  }
  v3 = v2 + 1;
  if (__OFADD__(v2, 1))
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (v2 == -1)
    return MEMORY[0x1E0DEE9D8];
  v5 = result;
  if (v3 <= 0)
  {
    v6 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  else
  {
    sub_1BC9A1210(0, &qword_1ED6C6940, MEMORY[0x1E0DEB418], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v6 = (_QWORD *)swift_allocObject();
    v7 = _swift_stdlib_malloc_size(v6);
    v8 = v7 - 32;
    if (v7 < 32)
      v8 = v7 - 25;
    v6[2] = v3;
    v6[3] = 2 * (v8 >> 3);
  }
  result = sub_1BCA7CAA4((uint64_t)&v9, (uint64_t)(v6 + 4), v3, v5, a2);
  if (result == v3)
    return (uint64_t)v6;
LABEL_14:
  __break(1u);
  return result;
}

uint64_t sub_1BCA7C8DC(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, void (*a5)(_QWORD), uint64_t (*a6)(_QWORD))
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  size_t v15;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char *v22;
  unint64_t v23;
  uint64_t result;

  v6 = a4 >> 1;
  v7 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
    goto LABEL_21;
  if (!v7)
    return MEMORY[0x1E0DEE9D8];
  if (v7 <= 0)
  {
    v14 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    if (v6 != a3)
    {
LABEL_10:
      if (v7 < 0)
        goto LABEL_24;
      v17 = *(_QWORD *)(a6(0) - 8);
      v18 = (char *)v14 + ((*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80));
      v19 = *(_QWORD *)(v17 + 72);
      v20 = a2 + v19 * a3;
      v21 = v19 * v7;
      v22 = &v18[v21];
      v23 = v20 + v21;
      if (v20 < (unint64_t)v22 && (unint64_t)v18 < v23)
        goto LABEL_24;
      swift_arrayInitWithCopy();
      return (uint64_t)v14;
    }
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  a5(0);
  v11 = *(_QWORD *)(a6(0) - 8);
  v12 = *(_QWORD *)(v11 + 72);
  v13 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  v14 = (_QWORD *)swift_allocObject();
  v15 = _swift_stdlib_malloc_size(v14);
  if (v12)
  {
    if (v15 - v13 == 0x8000000000000000 && v12 == -1)
      goto LABEL_23;
    v14[2] = v7;
    v14[3] = 2 * ((uint64_t)(v15 - v13) / v12);
    if (v6 != a3)
      goto LABEL_10;
    goto LABEL_20;
  }
LABEL_22:
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  result = sub_1BCAB6624();
  __break(1u);
  return result;
}

uint64_t sub_1BCA7CAA4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  BOOL v9;

  if (!a2)
  {
    v7 = 0;
    a3 = 0;
    goto LABEL_14;
  }
  if (!a3)
  {
    v7 = 0;
LABEL_14:
    v8 = a4;
LABEL_15:
    *(_QWORD *)result = a4;
    *(_QWORD *)(result + 8) = a5;
    *(_QWORD *)(result + 16) = v8;
    *(_BYTE *)(result + 24) = v7;
    return a3;
  }
  if (a3 < 0)
    goto LABEL_17;
  v5 = 0;
  v6 = a4;
  while (1)
  {
    v7 = v6 == a5;
    if (v6 != a5)
      break;
    v8 = 0;
LABEL_8:
    *(_QWORD *)(a2 + 8 * v5) = v6;
    if (a3 - 1 == v5)
      goto LABEL_15;
    ++v5;
    v9 = v6 == a5;
    v6 = v8;
    if (v9)
    {
      v7 = 1;
      a3 = v5;
      goto LABEL_15;
    }
  }
  v8 = v6 + 1;
  if (!__OFADD__(v6, 1))
    goto LABEL_8;
  __break(1u);
LABEL_17:
  __break(1u);
  return result;
}

BOOL _s19HealthVisualization23SignificantChangeEngineV10ParametersV10ThresholdsV2eeoiySbAG_AGtFZ_0(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;
  char v4;

  v2 = *(_BYTE *)(a2 + 8);
  v3 = *(_BYTE *)(a2 + 24);
  v4 = *(_BYTE *)(a2 + 40);
  if ((*(_BYTE *)(a1 + 8) & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 8))
      return 0;
  }
  else
  {
    if (*(double *)a1 != *(double *)a2)
      v2 = 1;
    if ((v2 & 1) != 0)
      return 0;
  }
  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 24))
      return 0;
  }
  else
  {
    if (*(double *)(a1 + 16) != *(double *)(a2 + 16))
      v3 = 1;
    if ((v3 & 1) != 0)
      return 0;
  }
  if ((*(_BYTE *)(a1 + 40) & 1) == 0)
  {
    if (*(double *)(a1 + 32) != *(double *)(a2 + 32))
      v4 = 1;
    return (v4 & 1) == 0;
  }
  return (*(_BYTE *)(a2 + 40) & 1) != 0;
}

BOOL _s19HealthVisualization23SignificantChangeEngineV10ParametersV14FrequencyShiftV2eeoiySbAG_AGtFZ_0(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;

  result = 0;
  if (*(double *)a1 == *(double *)a2
    && (~vaddv_s16((int16x4_t)vand_s8((int8x8_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_s64(*(int64x2_t *)(a1 + 8), *(int64x2_t *)(a2 + 8)), (int32x4_t)vceqq_s64(*(int64x2_t *)(a1 + 24), *(int64x2_t *)(a2 + 24)))), 0xFuLL)), (int8x8_t)0x8000400020001)) & 0xF) == 0&& *(_QWORD *)(a1 + 40) == *(_QWORD *)(a2 + 40))
  {
    return *(double *)(a1 + 48) == *(double *)(a2 + 48);
  }
  return result;
}

BOOL _s19HealthVisualization23SignificantChangeEngineV10ParametersV9MeanShiftV2eeoiySbAG_AGtFZ_0(uint64_t a1, uint64_t a2)
{
  char v3;
  double v4;
  char v5;
  double v6;
  char v7;
  double v8;
  char v9;
  double v10;
  char v11;
  double v12;
  char v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  double v24;
  char v25;
  char v26;
  char v27;
  char v28;
  char v29;
  char v30;
  char v31;
  char v32;
  _BOOL8 result;
  char v34;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = *(double *)(a1 + 16);
  v5 = *(_BYTE *)(a1 + 24);
  v6 = *(double *)(a1 + 32);
  v7 = *(_BYTE *)(a1 + 40);
  v8 = *(double *)(a1 + 48);
  v9 = *(_BYTE *)(a1 + 56);
  v10 = *(double *)(a1 + 64);
  v11 = *(_BYTE *)(a1 + 72);
  v12 = *(double *)(a1 + 80);
  v13 = *(_BYTE *)(a1 + 88);
  v14 = *(_BYTE *)(a1 + 89);
  v16 = *(_QWORD *)(a1 + 96);
  v15 = *(_QWORD *)(a1 + 104);
  v17 = *(_QWORD *)(a1 + 112);
  v18 = *(_BYTE *)(a1 + 120);
  v19 = *(double *)(a1 + 128);
  v21 = *(_QWORD *)(a2 + 96);
  v20 = *(_QWORD *)(a2 + 104);
  v22 = *(_QWORD *)(a2 + 112);
  v23 = *(unsigned __int8 *)(a2 + 120);
  v24 = *(double *)(a2 + 128);
  if ((v3 & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 8))
      return 0;
  }
  else
  {
    if (*(double *)a1 == *(double *)a2)
      v25 = *(_BYTE *)(a2 + 8);
    else
      v25 = 1;
    if ((v25 & 1) != 0)
      return 0;
  }
  if ((v5 & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 24))
      return 0;
  }
  else
  {
    if (v4 == *(double *)(a2 + 16))
      v26 = *(_BYTE *)(a2 + 24);
    else
      v26 = 1;
    if ((v26 & 1) != 0)
      return 0;
  }
  if ((v7 & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 40))
      return 0;
  }
  else
  {
    if (v6 == *(double *)(a2 + 32))
      v27 = *(_BYTE *)(a2 + 40);
    else
      v27 = 1;
    if ((v27 & 1) != 0)
      return 0;
  }
  if ((v9 & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 56))
      return 0;
  }
  else
  {
    if (v8 == *(double *)(a2 + 48))
      v28 = *(_BYTE *)(a2 + 56);
    else
      v28 = 1;
    if ((v28 & 1) != 0)
      return 0;
  }
  if ((v11 & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 72))
      return 0;
  }
  else
  {
    if (v10 == *(double *)(a2 + 64))
      v29 = *(_BYTE *)(a2 + 72);
    else
      v29 = 1;
    if ((v29 & 1) != 0)
      return 0;
  }
  if ((v13 & 1) != 0)
  {
    if (*(_BYTE *)(a2 + 88))
      goto LABEL_43;
    return 0;
  }
  if (v12 == *(double *)(a2 + 80))
    v30 = *(_BYTE *)(a2 + 88);
  else
    v30 = 1;
  if ((v30 & 1) != 0)
    return 0;
LABEL_43:
  sub_1BC999A68(v14);
  v32 = v31;
  result = 0;
  if ((v32 & 1) != 0 && v16 == v21 && v15 == v20)
  {
    if ((v18 & 1) != 0)
    {
      if (v23)
        return v19 == v24;
    }
    else
    {
      if (v17 == v22)
        v34 = v23;
      else
        v34 = 1;
      if ((v34 & 1) == 0)
        return v19 == v24;
    }
    return 0;
  }
  return result;
}

uint64_t _s19HealthVisualization23SignificantChangeEngineV10ParametersV2eeoiySbAE_AEtFZ_0(double *a1, double *a2)
{
  double v4;
  double v5;
  double v6;
  uint64_t v7;
  double v8;
  char v9;
  double v10;
  double v11;
  uint64_t result;
  double v13;
  uint64_t v14;
  double v15;
  int v16;
  int64x2_t v17;
  int64x2_t v18;
  int64x2_t v19;
  int64x2_t v20;
  _OWORD v21[8];
  uint64_t v22;
  _OWORD v23[8];
  uint64_t v24;
  _BYTE v25[136];
  _BYTE v26[136];
  _BYTE v27[136];
  _BYTE v28[136];
  _BYTE v29[136];

  v4 = *a1;
  v5 = a1[1];
  sub_1BCA8F4D8((uint64_t)(a1 + 2), (uint64_t)v28, &qword_1ED6C4890, (uint64_t)&type metadata for SignificantChangeEngine.Parameters.MeanShift);
  v6 = a1[19];
  v7 = *((_QWORD *)a1 + 24);
  v8 = a1[25];
  v9 = *((_BYTE *)a1 + 208);
  v10 = *a2;
  v11 = a2[1];
  v19 = *(int64x2_t *)(a1 + 20);
  v20 = *(int64x2_t *)(a1 + 22);
  sub_1BCA8F4D8((uint64_t)(a2 + 2), (uint64_t)v29, &qword_1ED6C4890, (uint64_t)&type metadata for SignificantChangeEngine.Parameters.MeanShift);
  result = 0;
  if (*(_QWORD *)&v4 == *(_QWORD *)&v10 && v5 == v11)
  {
    v13 = a2[19];
    v17 = *(int64x2_t *)(a2 + 20);
    v18 = *(int64x2_t *)(a2 + 22);
    v14 = *((_QWORD *)a2 + 24);
    v15 = a2[25];
    v16 = *((unsigned __int8 *)a2 + 208);
    sub_1BCA8F4D8((uint64_t)v28, (uint64_t)v27, &qword_1ED6C4890, (uint64_t)&type metadata for SignificantChangeEngine.Parameters.MeanShift);
    if (sub_1BCA8F494((uint64_t)v27) == 1)
    {
      sub_1BCA8F4D8((uint64_t)v29, (uint64_t)v26, &qword_1ED6C4890, (uint64_t)&type metadata for SignificantChangeEngine.Parameters.MeanShift);
      if (sub_1BCA8F494((uint64_t)v26) != 1)
        return 0;
    }
    else
    {
      sub_1BCA8F4D8((uint64_t)v28, (uint64_t)v25, &qword_1ED6C4890, (uint64_t)&type metadata for SignificantChangeEngine.Parameters.MeanShift);
      sub_1BCA8F4D8((uint64_t)v29, (uint64_t)v26, &qword_1ED6C4890, (uint64_t)&type metadata for SignificantChangeEngine.Parameters.MeanShift);
      if (sub_1BCA8F494((uint64_t)v26) == 1)
        return 0;
      sub_1BCA8F4D8((uint64_t)v29, (uint64_t)v23, &qword_1ED6C4890, (uint64_t)&type metadata for SignificantChangeEngine.Parameters.MeanShift);
      v21[6] = v23[6];
      v21[7] = v23[7];
      v22 = v24;
      v21[2] = v23[2];
      v21[3] = v23[3];
      v21[4] = v23[4];
      v21[5] = v23[5];
      v21[0] = v23[0];
      v21[1] = v23[1];
      if (!_s19HealthVisualization23SignificantChangeEngineV10ParametersV9MeanShiftV2eeoiySbAG_AGtFZ_0((uint64_t)v25, (uint64_t)v21))return 0;
    }
    if ((v9 & 1) != 0)
    {
      if (!v16)
        return 0;
    }
    else if ((v16 & 1) != 0
           || (vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_s64(v19, v17), (int32x4_t)vceqq_s64(v20, v18))), 0xFuLL))) & 1) == 0|| v7 != v14|| v6 != v13|| v8 != v15)
    {
      return 0;
    }
    return 1;
  }
  return result;
}

BOOL _s19HealthVisualization23SignificantChangeEngineV20ChangepointComponentV2eeoiySbAE_AEtFZ_0(float64x2_t *a1, float64x2_t *a2)
{
  return (vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_f64(*a1, *a2), (int32x4_t)vceqq_f64(a1[1], a2[1]))), 0xFuLL))) & 1) != 0&& a1[2].f64[0] == a2[2].f64[0];
}

BOOL _s19HealthVisualization23SignificantChangeEngineV11ChangepointV2eeoiySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  int *v4;
  uint64_t v5;
  double v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  float64x2_t *v10;
  float64x2_t *v11;
  uint64_t v12;
  float64x2_t *v13;
  float64x2_t *v14;

  if ((sub_1BCAB4E18() & 1) == 0)
    return 0;
  v4 = (int *)type metadata accessor for SignificantChangeEngine.Changepoint(0);
  if (*(double *)(a1 + v4[5]) != *(double *)(a2 + v4[5])
    || *(double *)(a1 + v4[6]) != *(double *)(a2 + v4[6])
    || *(double *)(a1 + v4[7]) != *(double *)(a2 + v4[7])
    || *(double *)(a1 + v4[8]) != *(double *)(a2 + v4[8])
    || *(double *)(a1 + v4[9]) != *(double *)(a2 + v4[9]))
  {
    return 0;
  }
  v5 = v4[10];
  v6 = *(double *)(a1 + v5);
  v7 = *(double *)(a2 + v5);
  v8 = 0;
  if (v6 == v7)
  {
    v9 = v4[11];
    v10 = (float64x2_t *)(a1 + v9);
    v11 = (float64x2_t *)(a2 + v9);
    if ((vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_f64(*v10, *v11), (int32x4_t)vceqq_f64(v10[1], v11[1]))), 0xFuLL))) & 1) != 0&& v10[2].f64[0] == v11[2].f64[0])
    {
      v12 = v4[12];
      v13 = (float64x2_t *)(a1 + v12);
      v14 = (float64x2_t *)(a2 + v12);
      if ((vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_f64(*v13, *v14), (int32x4_t)vceqq_f64(v13[1], v14[1]))), 0xFuLL))) & 1) != 0)return v13[2].f64[0] == v14[2].f64[0];
      return 0;
    }
  }
  return v8;
}

BOOL _s19HealthVisualization23SignificantChangeEngineV6OutputV2eeoiySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  uint64_t v35;
  uint64_t v36;
  _BYTE *v37;
  uint64_t v38;
  unsigned int (*v39)(uint64_t, uint64_t, uint64_t);
  unint64_t *v40;
  void (*v41)(uint64_t);
  uint64_t v42;
  _BYTE *v43;
  uint64_t v44;
  uint64_t v45;
  _BYTE *v46;
  uint64_t v47;
  uint64_t v48;
  _BYTE *v49;
  uint64_t v50;
  _BYTE *v51;
  _BYTE *v52;
  char v53;
  _BYTE *v54;
  uint64_t v55;
  _BYTE *v56;
  _BYTE *v57;
  uint64_t v58;
  unsigned int (*v59)(uint64_t, uint64_t, uint64_t);
  uint64_t v60;
  _BYTE *v61;
  _BYTE *v63;
  BOOL v64;
  _BYTE v65[12];
  int v66;
  _BYTE *v67;
  _BYTE *v68;
  uint64_t v69;
  uint64_t v70;
  _BYTE *v71;
  _BYTE *v72;
  uint64_t v73;
  _BYTE *v74;
  _BYTE *v75;
  _BYTE *v76;
  _BYTE *v77;
  uint64_t v78;
  uint64_t v79;
  _BYTE *v80;

  v73 = type metadata accessor for SignificantChangeEngine.State(0);
  v70 = *(_QWORD *)(v73 - 8);
  MEMORY[0x1E0C80A78](v73);
  v67 = &v65[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1BCA8F67C(0, &qword_1EF47A308, sub_1BCA7EFF8);
  v69 = v5;
  MEMORY[0x1E0C80A78](v5);
  v74 = &v65[-v6];
  sub_1BCA7EFF8(0);
  MEMORY[0x1E0C80A78](v7);
  v68 = &v65[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v9);
  v71 = &v65[-v10];
  MEMORY[0x1E0C80A78](v11);
  v72 = &v65[-v12];
  v13 = type metadata accessor for SignificantChange(0);
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13);
  v76 = &v65[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1BCA8F67C(0, &qword_1EF47A2F8, sub_1BCA7EFBC);
  v17 = v16;
  MEMORY[0x1E0C80A78](v16);
  v77 = &v65[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v19);
  v21 = &v65[-v20];
  sub_1BCA7EFBC(0);
  MEMORY[0x1E0C80A78](v22);
  v75 = &v65[-((v23 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v24);
  v26 = &v65[-v25];
  MEMORY[0x1E0C80A78](v27);
  v80 = &v65[-v28];
  MEMORY[0x1E0C80A78](v29);
  v31 = &v65[-v30];
  MEMORY[0x1E0C80A78](v32);
  v34 = &v65[-v33];
  MEMORY[0x1E0C80A78](v35);
  v37 = &v65[-v36];
  v78 = a1;
  sub_1BCA7EFB0(a1, (uint64_t)&v65[-v36]);
  v79 = a2;
  sub_1BCA7EFB0(a2, (uint64_t)v34);
  v38 = (uint64_t)&v21[*(int *)(v17 + 48)];
  sub_1BCA7EFB0((uint64_t)v37, (uint64_t)v21);
  sub_1BCA7EFB0((uint64_t)v34, v38);
  v39 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48);
  if (v39((uint64_t)v21, 1, v13) == 1)
  {
    sub_1BC997208((uint64_t)v34, (uint64_t (*)(_QWORD))sub_1BCA7EFBC);
    sub_1BC997208((uint64_t)v37, (uint64_t (*)(_QWORD))sub_1BCA7EFBC);
    if (v39(v38, 1, v13) == 1)
    {
      sub_1BC997208((uint64_t)v21, (uint64_t (*)(_QWORD))sub_1BCA7EFBC);
      goto LABEL_8;
    }
LABEL_6:
    v40 = &qword_1EF47A2F8;
    v41 = sub_1BCA7EFBC;
    v42 = (uint64_t)v21;
LABEL_21:
    sub_1BCA8F6D4(v42, v40, v41);
    return 0;
  }
  sub_1BCA7EFB0((uint64_t)v21, (uint64_t)v31);
  if (v39(v38, 1, v13) == 1)
  {
    sub_1BC997208((uint64_t)v34, (uint64_t (*)(_QWORD))sub_1BCA7EFBC);
    sub_1BC997208((uint64_t)v37, (uint64_t (*)(_QWORD))sub_1BCA7EFBC);
    sub_1BC997208((uint64_t)v31, type metadata accessor for SignificantChange);
    goto LABEL_6;
  }
  v43 = v76;
  sub_1BC9AE330(v38, (uint64_t)v76, type metadata accessor for SignificantChange);
  v66 = _s19HealthVisualization17SignificantChangeV2eeoiySbAC_ACtFZ_0((uint64_t)v31, (uint64_t)v43);
  sub_1BC997208((uint64_t)v43, type metadata accessor for SignificantChange);
  sub_1BC997208((uint64_t)v34, (uint64_t (*)(_QWORD))sub_1BCA7EFBC);
  sub_1BC997208((uint64_t)v37, (uint64_t (*)(_QWORD))sub_1BCA7EFBC);
  sub_1BC997208((uint64_t)v31, type metadata accessor for SignificantChange);
  sub_1BC997208((uint64_t)v21, (uint64_t (*)(_QWORD))sub_1BCA7EFBC);
  if ((v66 & 1) == 0)
    return 0;
LABEL_8:
  v44 = type metadata accessor for SignificantChangeEngine.Output(0);
  v45 = v78;
  v46 = v80;
  sub_1BCA7EFB0(v78 + *(int *)(v44 + 20), (uint64_t)v80);
  v47 = v79;
  sub_1BCA7EFB0(v79 + *(int *)(v44 + 20), (uint64_t)v26);
  v48 = *(int *)(v17 + 48);
  v49 = v77;
  v50 = (uint64_t)&v77[v48];
  sub_1BCA7EFB0((uint64_t)v46, (uint64_t)v77);
  sub_1BCA7EFB0((uint64_t)v26, v50);
  if (v39((uint64_t)v49, 1, v13) != 1)
  {
    v51 = v75;
    sub_1BCA7EFB0((uint64_t)v49, (uint64_t)v75);
    if (v39(v50, 1, v13) != 1)
    {
      v52 = v76;
      sub_1BC9AE330(v50, (uint64_t)v76, type metadata accessor for SignificantChange);
      v53 = _s19HealthVisualization17SignificantChangeV2eeoiySbAC_ACtFZ_0((uint64_t)v51, (uint64_t)v52);
      sub_1BC997208((uint64_t)v52, type metadata accessor for SignificantChange);
      sub_1BC997208((uint64_t)v26, (uint64_t (*)(_QWORD))sub_1BCA7EFBC);
      sub_1BC997208((uint64_t)v80, (uint64_t (*)(_QWORD))sub_1BCA7EFBC);
      sub_1BC997208((uint64_t)v51, type metadata accessor for SignificantChange);
      sub_1BC997208((uint64_t)v49, (uint64_t (*)(_QWORD))sub_1BCA7EFBC);
      if ((v53 & 1) == 0)
        return 0;
      goto LABEL_15;
    }
    sub_1BC997208((uint64_t)v26, (uint64_t (*)(_QWORD))sub_1BCA7EFBC);
    sub_1BC997208((uint64_t)v80, (uint64_t (*)(_QWORD))sub_1BCA7EFBC);
    sub_1BC997208((uint64_t)v51, type metadata accessor for SignificantChange);
    goto LABEL_13;
  }
  sub_1BC997208((uint64_t)v26, (uint64_t (*)(_QWORD))sub_1BCA7EFBC);
  sub_1BC997208((uint64_t)v46, (uint64_t (*)(_QWORD))sub_1BCA7EFBC);
  if (v39(v50, 1, v13) != 1)
  {
LABEL_13:
    v40 = &qword_1EF47A2F8;
    v41 = sub_1BCA7EFBC;
    v42 = (uint64_t)v49;
    goto LABEL_21;
  }
  sub_1BC997208((uint64_t)v49, (uint64_t (*)(_QWORD))sub_1BCA7EFBC);
LABEL_15:
  v54 = v72;
  sub_1BCA7EFEC(v45 + *(int *)(v44 + 24), (uint64_t)v72);
  v55 = v47 + *(int *)(v44 + 24);
  v56 = v71;
  sub_1BCA7EFEC(v55, (uint64_t)v71);
  v57 = v74;
  v58 = (uint64_t)&v74[*(int *)(v69 + 48)];
  sub_1BCA7EFEC((uint64_t)v54, (uint64_t)v74);
  sub_1BCA7EFEC((uint64_t)v56, v58);
  v59 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v70 + 48);
  v60 = v73;
  if (v59((uint64_t)v57, 1, v73) == 1)
  {
    sub_1BC997208((uint64_t)v56, (uint64_t (*)(_QWORD))sub_1BCA7EFF8);
    sub_1BC997208((uint64_t)v54, (uint64_t (*)(_QWORD))sub_1BCA7EFF8);
    if (v59(v58, 1, v60) == 1)
    {
      sub_1BC997208((uint64_t)v57, (uint64_t (*)(_QWORD))sub_1BCA7EFF8);
      return 1;
    }
    goto LABEL_20;
  }
  v61 = v68;
  sub_1BCA7EFEC((uint64_t)v57, (uint64_t)v68);
  if (v59(v58, 1, v60) == 1)
  {
    sub_1BC997208((uint64_t)v56, (uint64_t (*)(_QWORD))sub_1BCA7EFF8);
    sub_1BC997208((uint64_t)v54, (uint64_t (*)(_QWORD))sub_1BCA7EFF8);
    sub_1BC997208((uint64_t)v61, type metadata accessor for SignificantChangeEngine.State);
LABEL_20:
    v40 = &qword_1EF47A308;
    v41 = sub_1BCA7EFF8;
    v42 = (uint64_t)v57;
    goto LABEL_21;
  }
  v63 = v67;
  sub_1BC9AE330(v58, (uint64_t)v67, type metadata accessor for SignificantChangeEngine.State);
  v64 = _s19HealthVisualization23SignificantChangeEngineV5StateV2eeoiySbAE_AEtFZ_0((uint64_t)v61, (uint64_t)v63);
  sub_1BC997208((uint64_t)v63, type metadata accessor for SignificantChangeEngine.State);
  sub_1BC997208((uint64_t)v56, (uint64_t (*)(_QWORD))sub_1BCA7EFF8);
  sub_1BC997208((uint64_t)v54, (uint64_t (*)(_QWORD))sub_1BCA7EFF8);
  sub_1BC997208((uint64_t)v61, type metadata accessor for SignificantChangeEngine.State);
  sub_1BC997208((uint64_t)v57, (uint64_t (*)(_QWORD))sub_1BCA7EFF8);
  return v64;
}

BOOL _s19HealthVisualization23SignificantChangeEngineV5StateV2eeoiySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int (*v39)(uint64_t, uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t *v43;
  void (*v44)(uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  BOOL v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int (*v54)(uint64_t, uint64_t, uint64_t);
  uint64_t v55;
  uint64_t v57;
  BOOL v58;
  uint64_t v59;
  char *v60;
  char *v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;

  v72 = a2;
  v3 = type metadata accessor for SignificantChangeEngine.State.FrequencyShift(0);
  v4 = *(_QWORD *)(v3 - 8);
  v67 = v3;
  v68 = v4;
  MEMORY[0x1E0C80A78](v3);
  v64 = (uint64_t)&v59 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BCA8F67C(0, &qword_1EF47A2E8, sub_1BCA7F41C);
  v66 = v6;
  MEMORY[0x1E0C80A78](v6);
  v69 = (uint64_t)&v59 - v7;
  sub_1BCA7F41C(0);
  MEMORY[0x1E0C80A78](v8);
  v65 = (uint64_t)&v59 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v59 - v11;
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v59 - v14;
  v16 = type metadata accessor for SignificantChangeEngine.State.MeanShift(0);
  v70 = *(_QWORD *)(v16 - 8);
  v71 = v16;
  MEMORY[0x1E0C80A78](v16);
  v18 = (char *)&v59 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BCA8F67C(0, &qword_1EF47A2F0, sub_1BCA7F3E0);
  v20 = v19;
  MEMORY[0x1E0C80A78](v19);
  v22 = (char *)&v59 - v21;
  sub_1BCA7F3E0(0);
  MEMORY[0x1E0C80A78](v23);
  v25 = (char *)&v59 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v26);
  v28 = (char *)&v59 - v27;
  MEMORY[0x1E0C80A78](v29);
  v31 = (char *)&v59 - v30;
  v32 = a1;
  v33 = v72;
  if ((sub_1BCAB4B84() & 1) == 0)
    return 0;
  v62 = v15;
  v63 = v25;
  v60 = v18;
  v61 = v12;
  v34 = type metadata accessor for SignificantChangeEngine.State(0);
  v35 = v32;
  sub_1BCA7F3D4(v32 + *(int *)(v34 + 20), (uint64_t)v31);
  v36 = v33;
  sub_1BCA7F3D4(v33 + *(int *)(v34 + 20), (uint64_t)v28);
  v37 = (uint64_t)&v22[*(int *)(v20 + 48)];
  sub_1BCA7F3D4((uint64_t)v31, (uint64_t)v22);
  sub_1BCA7F3D4((uint64_t)v28, v37);
  v38 = v71;
  v39 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v70 + 48);
  v40 = (uint64_t)v22;
  if (v39((uint64_t)v22, 1, v71) != 1)
  {
    v41 = (uint64_t)v31;
    v42 = (uint64_t)v63;
    sub_1BCA7F3D4(v40, (uint64_t)v63);
    if (v39(v37, 1, v38) != 1)
    {
      v46 = v42;
      v47 = (uint64_t)v60;
      sub_1BC9AE330(v37, (uint64_t)v60, type metadata accessor for SignificantChangeEngine.State.MeanShift);
      v48 = _s19HealthVisualization23SignificantChangeEngineV5StateV9MeanShiftV2eeoiySbAG_AGtFZ_0(v46, v47);
      sub_1BC997208(v47, type metadata accessor for SignificantChangeEngine.State.MeanShift);
      sub_1BC997208((uint64_t)v28, (uint64_t (*)(_QWORD))sub_1BCA7F3E0);
      sub_1BC997208(v41, (uint64_t (*)(_QWORD))sub_1BCA7F3E0);
      sub_1BC997208(v46, type metadata accessor for SignificantChangeEngine.State.MeanShift);
      sub_1BC997208(v40, (uint64_t (*)(_QWORD))sub_1BCA7F3E0);
      if (!v48)
        return 0;
      goto LABEL_9;
    }
    sub_1BC997208((uint64_t)v28, (uint64_t (*)(_QWORD))sub_1BCA7F3E0);
    sub_1BC997208(v41, (uint64_t (*)(_QWORD))sub_1BCA7F3E0);
    sub_1BC997208(v42, type metadata accessor for SignificantChangeEngine.State.MeanShift);
LABEL_7:
    v43 = &qword_1EF47A2F0;
    v44 = sub_1BCA7F3E0;
    v45 = v40;
LABEL_15:
    sub_1BCA8F6D4(v45, v43, v44);
    return 0;
  }
  sub_1BC997208((uint64_t)v28, (uint64_t (*)(_QWORD))sub_1BCA7F3E0);
  sub_1BC997208((uint64_t)v31, (uint64_t (*)(_QWORD))sub_1BCA7F3E0);
  if (v39(v37, 1, v38) != 1)
    goto LABEL_7;
  sub_1BC997208((uint64_t)v22, (uint64_t (*)(_QWORD))sub_1BCA7F3E0);
LABEL_9:
  v49 = (uint64_t)v62;
  sub_1BCA7F410(v35 + *(int *)(v34 + 24), (uint64_t)v62);
  v50 = (uint64_t)v61;
  sub_1BCA7F410(v36 + *(int *)(v34 + 24), (uint64_t)v61);
  v51 = v69;
  v52 = v69 + *(int *)(v66 + 48);
  sub_1BCA7F410(v49, v69);
  sub_1BCA7F410(v50, v52);
  v53 = v67;
  v54 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v68 + 48);
  if (v54(v51, 1, v67) == 1)
  {
    sub_1BC997208(v50, (uint64_t (*)(_QWORD))sub_1BCA7F41C);
    v51 = v69;
    sub_1BC997208(v49, (uint64_t (*)(_QWORD))sub_1BCA7F41C);
    if (v54(v52, 1, v53) == 1)
    {
      sub_1BC997208(v51, (uint64_t (*)(_QWORD))sub_1BCA7F41C);
      return 1;
    }
    goto LABEL_14;
  }
  v55 = v65;
  sub_1BCA7F410(v51, v65);
  if (v54(v52, 1, v53) == 1)
  {
    sub_1BC997208(v50, (uint64_t (*)(_QWORD))sub_1BCA7F41C);
    sub_1BC997208(v49, (uint64_t (*)(_QWORD))sub_1BCA7F41C);
    sub_1BC997208(v55, type metadata accessor for SignificantChangeEngine.State.FrequencyShift);
LABEL_14:
    v43 = &qword_1EF47A2E8;
    v44 = sub_1BCA7F41C;
    v45 = v51;
    goto LABEL_15;
  }
  v57 = v64;
  sub_1BC9AE330(v52, v64, type metadata accessor for SignificantChangeEngine.State.FrequencyShift);
  v58 = _s19HealthVisualization23SignificantChangeEngineV5StateV14FrequencyShiftV2eeoiySbAG_AGtFZ_0(v55, v57);
  sub_1BC997208(v57, type metadata accessor for SignificantChangeEngine.State.FrequencyShift);
  sub_1BC997208(v50, (uint64_t (*)(_QWORD))sub_1BCA7F41C);
  sub_1BC997208(v49, (uint64_t (*)(_QWORD))sub_1BCA7F41C);
  sub_1BC997208(v55, type metadata accessor for SignificantChangeEngine.State.FrequencyShift);
  sub_1BC997208(v51, (uint64_t (*)(_QWORD))sub_1BCA7F41C);
  return v58;
}

BOOL _s19HealthVisualization23SignificantChangeEngineV5StateV9MeanShiftV2eeoiySbAG_AGtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  unsigned int (*v40)(uint64_t, uint64_t, uint64_t);
  unint64_t *v41;
  void (*v42)(uint64_t);
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int (*v52)(uint64_t, uint64_t, uint64_t);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  BOOL v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int (*v62)(uint64_t, uint64_t, uint64_t);
  uint64_t v63;
  uint64_t v64;
  char *v66;
  char v67;
  void (*v68)(char *, uint64_t);
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;

  v77 = sub_1BCAB4E54();
  v75 = *(_QWORD *)(v77 - 8);
  MEMORY[0x1E0C80A78](v77);
  v69 = (char *)&v69 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BCA8F67C(0, (unint64_t *)&qword_1ED6C3650, sub_1BCA7F46C);
  v72 = v5;
  MEMORY[0x1E0C80A78](v5);
  v76 = (uint64_t)&v69 - v6;
  sub_1BCA7F46C(0);
  MEMORY[0x1E0C80A78](v7);
  v70 = (uint64_t)&v69 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v73 = (uint64_t)&v69 - v10;
  MEMORY[0x1E0C80A78](v11);
  v74 = (uint64_t)&v69 - v12;
  v82 = type metadata accessor for SignificantChangeEngine.Changepoint(0);
  v80 = *(_QWORD *)(v82 - 8);
  MEMORY[0x1E0C80A78](v82);
  v71 = (uint64_t)&v69 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BCA8F67C(0, &qword_1EF47A300, sub_1BC9DBE2C);
  v79 = v14;
  MEMORY[0x1E0C80A78](v14);
  v83 = (uint64_t)&v69 - v15;
  sub_1BC9DBE2C(0);
  MEMORY[0x1E0C80A78](v16);
  v78 = (uint64_t)&v69 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18);
  v86 = (uint64_t)&v69 - v19;
  MEMORY[0x1E0C80A78](v20);
  v81 = (uint64_t)&v69 - v21;
  v22 = type metadata accessor for SignificantChange(0);
  v23 = *(_QWORD *)(v22 - 8);
  MEMORY[0x1E0C80A78](v22);
  v25 = (char *)&v69 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BCA8F67C(0, &qword_1EF47A2F8, sub_1BCA7EFBC);
  v27 = v26;
  MEMORY[0x1E0C80A78](v26);
  v29 = (char *)&v69 - v28;
  sub_1BCA7EFBC(0);
  MEMORY[0x1E0C80A78](v30);
  v32 = (char *)&v69 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v33);
  v35 = (char *)&v69 - v34;
  MEMORY[0x1E0C80A78](v36);
  v38 = (char *)&v69 - v37;
  v84 = a1;
  sub_1BCA7EFB0(a1, (uint64_t)&v69 - v37);
  v85 = a2;
  sub_1BCA7EFB0(a2, (uint64_t)v35);
  v39 = (uint64_t)&v29[*(int *)(v27 + 48)];
  sub_1BCA7EFB0((uint64_t)v38, (uint64_t)v29);
  sub_1BCA7EFB0((uint64_t)v35, v39);
  v40 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v23 + 48);
  if (v40((uint64_t)v29, 1, v22) == 1)
  {
    sub_1BC997208((uint64_t)v35, (uint64_t (*)(_QWORD))sub_1BCA7EFBC);
    sub_1BC997208((uint64_t)v38, (uint64_t (*)(_QWORD))sub_1BCA7EFBC);
    if (v40(v39, 1, v22) == 1)
    {
      sub_1BC997208((uint64_t)v29, (uint64_t (*)(_QWORD))sub_1BCA7EFBC);
      goto LABEL_8;
    }
LABEL_6:
    v41 = &qword_1EF47A2F8;
    v42 = sub_1BCA7EFBC;
    v43 = (uint64_t)v29;
LABEL_21:
    sub_1BCA8F6D4(v43, v41, v42);
    return 0;
  }
  sub_1BCA7EFB0((uint64_t)v29, (uint64_t)v32);
  if (v40(v39, 1, v22) == 1)
  {
    sub_1BC997208((uint64_t)v35, (uint64_t (*)(_QWORD))sub_1BCA7EFBC);
    sub_1BC997208((uint64_t)v38, (uint64_t (*)(_QWORD))sub_1BCA7EFBC);
    sub_1BC997208((uint64_t)v32, type metadata accessor for SignificantChange);
    goto LABEL_6;
  }
  sub_1BC9AE330(v39, (uint64_t)v25, type metadata accessor for SignificantChange);
  v44 = _s19HealthVisualization17SignificantChangeV2eeoiySbAC_ACtFZ_0((uint64_t)v32, (uint64_t)v25);
  sub_1BC997208((uint64_t)v25, type metadata accessor for SignificantChange);
  sub_1BC997208((uint64_t)v35, (uint64_t (*)(_QWORD))sub_1BCA7EFBC);
  sub_1BC997208((uint64_t)v38, (uint64_t (*)(_QWORD))sub_1BCA7EFBC);
  sub_1BC997208((uint64_t)v32, type metadata accessor for SignificantChange);
  sub_1BC997208((uint64_t)v29, (uint64_t (*)(_QWORD))sub_1BCA7EFBC);
  if ((v44 & 1) == 0)
    return 0;
LABEL_8:
  v45 = type metadata accessor for SignificantChangeEngine.State.MeanShift(0);
  v46 = v84;
  v47 = v81;
  sub_1BCA7F44C(v84 + *(int *)(v45 + 20), v81);
  v48 = v85;
  v49 = v86;
  sub_1BCA7F44C(v85 + *(int *)(v45 + 20), v86);
  v50 = v83;
  v51 = v83 + *(int *)(v79 + 48);
  sub_1BCA7F44C(v47, v83);
  sub_1BCA7F44C(v49, v51);
  v52 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v80 + 48);
  v53 = v82;
  if (v52(v50, 1, v82) != 1)
  {
    v54 = v78;
    sub_1BCA7F44C(v50, v78);
    if (v52(v51, 1, v53) != 1)
    {
      v55 = v71;
      sub_1BC9AE330(v51, v71, type metadata accessor for SignificantChangeEngine.Changepoint);
      v56 = _s19HealthVisualization23SignificantChangeEngineV11ChangepointV2eeoiySbAE_AEtFZ_0(v54, v55);
      sub_1BC997208(v55, type metadata accessor for SignificantChangeEngine.Changepoint);
      sub_1BC997208(v86, (uint64_t (*)(_QWORD))sub_1BC9DBE2C);
      sub_1BC997208(v47, (uint64_t (*)(_QWORD))sub_1BC9DBE2C);
      sub_1BC997208(v54, type metadata accessor for SignificantChangeEngine.Changepoint);
      sub_1BC997208(v50, (uint64_t (*)(_QWORD))sub_1BC9DBE2C);
      if (!v56)
        return 0;
      goto LABEL_15;
    }
    sub_1BC997208(v86, (uint64_t (*)(_QWORD))sub_1BC9DBE2C);
    sub_1BC997208(v47, (uint64_t (*)(_QWORD))sub_1BC9DBE2C);
    sub_1BC997208(v54, type metadata accessor for SignificantChangeEngine.Changepoint);
    goto LABEL_13;
  }
  sub_1BC997208(v49, (uint64_t (*)(_QWORD))sub_1BC9DBE2C);
  sub_1BC997208(v47, (uint64_t (*)(_QWORD))sub_1BC9DBE2C);
  if (v52(v51, 1, v53) != 1)
  {
LABEL_13:
    v41 = &qword_1EF47A300;
    v42 = sub_1BC9DBE2C;
    v43 = v50;
    goto LABEL_21;
  }
  sub_1BC997208(v50, (uint64_t (*)(_QWORD))sub_1BC9DBE2C);
LABEL_15:
  v57 = v74;
  sub_1BC9AFC58(v46 + *(int *)(v45 + 24), v74);
  v58 = v73;
  sub_1BC9AFC58(v48 + *(int *)(v45 + 24), v73);
  v59 = v76;
  v60 = v76 + *(int *)(v72 + 48);
  sub_1BC9AFC58(v57, v76);
  sub_1BC9AFC58(v58, v60);
  v61 = v75;
  v62 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v75 + 48);
  v63 = v77;
  if (v62(v59, 1, v77) == 1)
  {
    sub_1BC997208(v58, (uint64_t (*)(_QWORD))sub_1BCA7F46C);
    sub_1BC997208(v57, (uint64_t (*)(_QWORD))sub_1BCA7F46C);
    if (v62(v60, 1, v63) == 1)
    {
      sub_1BC997208(v59, (uint64_t (*)(_QWORD))sub_1BCA7F46C);
      return 1;
    }
    goto LABEL_20;
  }
  v64 = v70;
  sub_1BC9AFC58(v59, v70);
  if (v62(v60, 1, v63) == 1)
  {
    sub_1BC997208(v58, (uint64_t (*)(_QWORD))sub_1BCA7F46C);
    sub_1BC997208(v57, (uint64_t (*)(_QWORD))sub_1BCA7F46C);
    (*(void (**)(uint64_t, uint64_t))(v61 + 8))(v64, v63);
LABEL_20:
    v41 = (unint64_t *)&qword_1ED6C3650;
    v42 = sub_1BCA7F46C;
    v43 = v59;
    goto LABEL_21;
  }
  v66 = v69;
  (*(void (**)(char *, uint64_t, uint64_t))(v61 + 32))(v69, v60, v63);
  sub_1BC996948(&qword_1EF479250, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], MEMORY[0x1E0CB08B8]);
  v67 = sub_1BCAB5ED4();
  v68 = *(void (**)(char *, uint64_t))(v61 + 8);
  v68(v66, v63);
  sub_1BC997208(v58, (uint64_t (*)(_QWORD))sub_1BCA7F46C);
  sub_1BC997208(v57, (uint64_t (*)(_QWORD))sub_1BCA7F46C);
  v68((char *)v64, v63);
  sub_1BC997208(v59, (uint64_t (*)(_QWORD))sub_1BCA7F46C);
  return (v67 & 1) != 0;
}

BOOL _s19HealthVisualization23SignificantChangeEngineV5StateV14FrequencyShiftV2eeoiySbAG_AGtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int (*v32)(uint64_t, uint64_t, uint64_t);
  unint64_t *v33;
  void (*v34)(uint64_t);
  char v35;
  void (*v36)(char *, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char v46;
  _BOOL8 result;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int (*v51)(uint64_t, uint64_t, uint64_t);
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;

  v63 = type metadata accessor for SignificantChange(0);
  v60 = *(_QWORD *)(v63 - 8);
  MEMORY[0x1E0C80A78](v63);
  v57 = (uint64_t)&v56 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BCA8F67C(0, &qword_1EF47A2F8, sub_1BCA7EFBC);
  v59 = v5;
  MEMORY[0x1E0C80A78](v5);
  v64 = (char *)&v56 - v6;
  sub_1BCA7EFBC(0);
  MEMORY[0x1E0C80A78](v7);
  v58 = (uint64_t)&v56 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v61 = (uint64_t)&v56 - v10;
  MEMORY[0x1E0C80A78](v11);
  v62 = (uint64_t)&v56 - v12;
  v13 = sub_1BCAB4E54();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v56 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BCA8F67C(0, (unint64_t *)&qword_1ED6C3650, sub_1BCA7F46C);
  v18 = v17;
  MEMORY[0x1E0C80A78](v17);
  v20 = (char *)&v56 - v19;
  sub_1BCA7F46C(0);
  MEMORY[0x1E0C80A78](v21);
  v23 = (char *)&v56 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v24);
  v26 = (char *)&v56 - v25;
  MEMORY[0x1E0C80A78](v27);
  v29 = (char *)&v56 - v28;
  v65 = a1;
  sub_1BC9AFC58(a1, (uint64_t)&v56 - v28);
  v30 = a2;
  sub_1BC9AFC58(a2, (uint64_t)v26);
  v31 = (uint64_t)&v20[*(int *)(v18 + 48)];
  sub_1BC9AFC58((uint64_t)v29, (uint64_t)v20);
  sub_1BC9AFC58((uint64_t)v26, v31);
  v32 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48);
  if (v32((uint64_t)v20, 1, v13) == 1)
  {
    sub_1BC997208((uint64_t)v26, (uint64_t (*)(_QWORD))sub_1BCA7F46C);
    sub_1BC997208((uint64_t)v29, (uint64_t (*)(_QWORD))sub_1BCA7F46C);
    if (v32(v31, 1, v13) == 1)
    {
      sub_1BC997208((uint64_t)v20, (uint64_t (*)(_QWORD))sub_1BCA7F46C);
LABEL_8:
      v37 = type metadata accessor for SignificantChangeEngine.State.FrequencyShift(0);
      v38 = *(int *)(v37 + 20);
      v39 = v65;
      v40 = *(unsigned __int8 *)(v65 + v38);
      v41 = *(unsigned __int8 *)(v30 + v38);
      if (v40)
        v42 = 0x6967676F4C746F6ELL;
      else
        v42 = 0x676E6967676F6CLL;
      if (v40)
        v43 = 0xEA0000000000676ELL;
      else
        v43 = 0xE700000000000000;
      if (v41)
        v44 = 0x6967676F4C746F6ELL;
      else
        v44 = 0x676E6967676F6CLL;
      if (v41)
        v45 = 0xEA0000000000676ELL;
      else
        v45 = 0xE700000000000000;
      if (v42 == v44 && v43 == v45)
      {
        swift_bridgeObjectRelease_n();
      }
      else
      {
        v46 = sub_1BCAB67C8();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        result = 0;
        if ((v46 & 1) == 0)
          return result;
      }
      v48 = v62;
      sub_1BCA7EFB0(v39 + *(int *)(v37 + 24), v62);
      v49 = v61;
      sub_1BCA7EFB0(v30 + *(int *)(v37 + 24), v61);
      v20 = v64;
      v50 = (uint64_t)&v64[*(int *)(v59 + 48)];
      sub_1BCA7EFB0(v48, (uint64_t)v64);
      sub_1BCA7EFB0(v49, v50);
      v51 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v60 + 48);
      v52 = v63;
      if (v51((uint64_t)v20, 1, v63) == 1)
      {
        sub_1BC997208(v49, (uint64_t (*)(_QWORD))sub_1BCA7EFBC);
        sub_1BC997208(v48, (uint64_t (*)(_QWORD))sub_1BCA7EFBC);
        if (v51(v50, 1, v52) == 1)
        {
          sub_1BC997208((uint64_t)v20, (uint64_t (*)(_QWORD))sub_1BCA7EFBC);
          return 1;
        }
      }
      else
      {
        v53 = v58;
        sub_1BCA7EFB0((uint64_t)v20, v58);
        if (v51(v50, 1, v52) != 1)
        {
          v54 = v57;
          sub_1BC9AE330(v50, v57, type metadata accessor for SignificantChange);
          v55 = _s19HealthVisualization17SignificantChangeV2eeoiySbAC_ACtFZ_0(v53, v54);
          sub_1BC997208(v54, type metadata accessor for SignificantChange);
          sub_1BC997208(v49, (uint64_t (*)(_QWORD))sub_1BCA7EFBC);
          sub_1BC997208(v48, (uint64_t (*)(_QWORD))sub_1BCA7EFBC);
          sub_1BC997208(v53, type metadata accessor for SignificantChange);
          sub_1BC997208((uint64_t)v20, (uint64_t (*)(_QWORD))sub_1BCA7EFBC);
          return (v55 & 1) != 0;
        }
        sub_1BC997208(v49, (uint64_t (*)(_QWORD))sub_1BCA7EFBC);
        sub_1BC997208(v48, (uint64_t (*)(_QWORD))sub_1BCA7EFBC);
        sub_1BC997208(v53, type metadata accessor for SignificantChange);
      }
      v33 = &qword_1EF47A2F8;
      v34 = sub_1BCA7EFBC;
      goto LABEL_30;
    }
LABEL_6:
    v33 = (unint64_t *)&qword_1ED6C3650;
    v34 = sub_1BCA7F46C;
LABEL_30:
    sub_1BCA8F6D4((uint64_t)v20, v33, v34);
    return 0;
  }
  sub_1BC9AFC58((uint64_t)v20, (uint64_t)v23);
  if (v32(v31, 1, v13) == 1)
  {
    sub_1BC997208((uint64_t)v26, (uint64_t (*)(_QWORD))sub_1BCA7F46C);
    sub_1BC997208((uint64_t)v29, (uint64_t (*)(_QWORD))sub_1BCA7F46C);
    (*(void (**)(char *, uint64_t))(v14 + 8))(v23, v13);
    goto LABEL_6;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 32))(v16, v31, v13);
  sub_1BC996948(&qword_1EF479250, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], MEMORY[0x1E0CB08B8]);
  v35 = sub_1BCAB5ED4();
  v36 = *(void (**)(char *, uint64_t))(v14 + 8);
  v36(v16, v13);
  sub_1BC997208((uint64_t)v26, (uint64_t (*)(_QWORD))sub_1BCA7F46C);
  sub_1BC997208((uint64_t)v29, (uint64_t (*)(_QWORD))sub_1BCA7F46C);
  v36(v23, v13);
  sub_1BC997208((uint64_t)v20, (uint64_t (*)(_QWORD))sub_1BCA7F46C);
  if ((v35 & 1) != 0)
    goto LABEL_8;
  return 0;
}

double sub_1BCA7ED74(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13[11];

  if (a1 == 4)
    return 2419200.0;
  if (a1 == 5)
    return 15724800.0;
  v13[9] = v1;
  v13[10] = v2;
  if (qword_1ED6C4CD8 != -1)
    swift_once();
  v4 = sub_1BCAB5514();
  __swift_project_value_buffer(v4, (uint64_t)qword_1ED6C4CC0);
  v5 = sub_1BCAB54FC();
  v6 = sub_1BCAB61A4();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = swift_slowAlloc();
    v8 = swift_slowAlloc();
    *(_DWORD *)v7 = 136446466;
    v13[0] = v8;
    sub_1BCA7EF78();
    v9 = sub_1BCAB5F28();
    sub_1BC99BD4C(v9, v10, v13);
    sub_1BCAB63A8();
    swift_bridgeObjectRelease();
    *(_WORD *)(v7 + 12) = 2082;
    v11 = sub_1BCAB5F28();
    sub_1BC99BD4C(v11, v12, v13);
    sub_1BCAB63A8();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1BC989000, v5, v6, "[%{public}s]: Unsupported date range submitted: %{public}s", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1BCCFBF5C](v8, -1, -1);
    MEMORY[0x1BCCFBF5C](v7, -1, -1);
  }

  return 0.0;
}

unint64_t sub_1BCA7EF78()
{
  unint64_t result;

  result = qword_1EF47A190;
  if (!qword_1EF47A190)
  {
    result = swift_getMetatypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1EF47A190);
  }
  return result;
}

uint64_t sub_1BCA7EFB0(uint64_t a1, uint64_t a2)
{
  return sub_1BC9964B8(a1, a2, (uint64_t (*)(_QWORD))sub_1BCA7EFBC);
}

void sub_1BCA7EFBC(uint64_t a1)
{
  sub_1BC998AB0(a1, &qword_1ED6C38D8, type metadata accessor for SignificantChange, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
}

uint64_t type metadata accessor for SignificantChangeEngine.Output(uint64_t a1)
{
  return sub_1BC9B359C(a1, qword_1ED6C3D18);
}

uint64_t sub_1BCA7EFEC(uint64_t a1, uint64_t a2)
{
  return sub_1BC9964B8(a1, a2, (uint64_t (*)(_QWORD))sub_1BCA7EFF8);
}

void sub_1BCA7EFF8(uint64_t a1)
{
  sub_1BC998AB0(a1, &qword_1ED6C3CA0, type metadata accessor for SignificantChangeEngine.State, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
}

uint64_t type metadata accessor for SignificantChangeEngine.State(uint64_t a1)
{
  return sub_1BC9B359C(a1, qword_1ED6C3C60);
}

unint64_t sub_1BCA7F028()
{
  unint64_t result;

  result = qword_1ED6C3D00;
  if (!qword_1ED6C3D00)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCAC8A8C, &type metadata for SignificantChangeEngine.Output.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED6C3D00);
  }
  return result;
}

unint64_t sub_1BCA7F06C()
{
  unint64_t result;

  result = qword_1EF47A198;
  if (!qword_1EF47A198)
  {
    result = swift_getMetatypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1EF47A198);
  }
  return result;
}

unint64_t sub_1BCA7F0A4()
{
  unint64_t result;

  result = qword_1EF47A1A8;
  if (!qword_1EF47A1A8)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCAC8A3C, &type metadata for SignificantChangeEngine.Parameters.Thresholds.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF47A1A8);
  }
  return result;
}

unint64_t sub_1BCA7F0E8()
{
  unint64_t result;

  result = qword_1EF47A1C0;
  if (!qword_1EF47A1C0)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCAC89EC, &type metadata for SignificantChangeEngine.Parameters.MeanShift.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF47A1C0);
  }
  return result;
}

unint64_t sub_1BCA7F12C()
{
  unint64_t result;

  result = qword_1EF47A1C8;
  if (!qword_1EF47A1C8)
  {
    result = MEMORY[0x1BCCFBE84](&protocol conformance descriptor for SignificantChangeEngine.Parameters.Thresholds, &type metadata for SignificantChangeEngine.Parameters.Thresholds);
    atomic_store(result, (unint64_t *)&qword_1EF47A1C8);
  }
  return result;
}

unint64_t sub_1BCA7F170()
{
  unint64_t result;

  result = qword_1EF47A1D0;
  if (!qword_1EF47A1D0)
  {
    result = MEMORY[0x1BCCFBE84](&protocol conformance descriptor for SignificantChangeEngine.Parameters.ChangepointMode, &type metadata for SignificantChangeEngine.Parameters.ChangepointMode);
    atomic_store(result, (unint64_t *)&qword_1EF47A1D0);
  }
  return result;
}

unint64_t sub_1BCA7F1B4()
{
  unint64_t result;

  result = qword_1EF47A1E0;
  if (!qword_1EF47A1E0)
  {
    result = MEMORY[0x1BCCFBE84](&protocol conformance descriptor for SignificantChangeEngine.Parameters.Thresholds, &type metadata for SignificantChangeEngine.Parameters.Thresholds);
    atomic_store(result, (unint64_t *)&qword_1EF47A1E0);
  }
  return result;
}

unint64_t sub_1BCA7F1F8()
{
  unint64_t result;

  result = qword_1EF47A1E8;
  if (!qword_1EF47A1E8)
  {
    result = MEMORY[0x1BCCFBE84](&protocol conformance descriptor for SignificantChangeEngine.Parameters.ChangepointMode, &type metadata for SignificantChangeEngine.Parameters.ChangepointMode);
    atomic_store(result, (unint64_t *)&qword_1EF47A1E8);
  }
  return result;
}

unint64_t sub_1BCA7F23C()
{
  unint64_t result;

  result = qword_1EF47A1F8;
  if (!qword_1EF47A1F8)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCAC899C, &type metadata for SignificantChangeEngine.Parameters.FrequencyShift.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF47A1F8);
  }
  return result;
}

unint64_t sub_1BCA7F280()
{
  unint64_t result;

  result = qword_1EF47A210;
  if (!qword_1EF47A210)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCAC894C, &type metadata for SignificantChangeEngine.Parameters.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF47A210);
  }
  return result;
}

unint64_t sub_1BCA7F2C4()
{
  unint64_t result;

  result = qword_1EF47A218;
  if (!qword_1EF47A218)
  {
    result = MEMORY[0x1BCCFBE84](&protocol conformance descriptor for SignificantChangeEngine.Parameters.MeanShift, &type metadata for SignificantChangeEngine.Parameters.MeanShift);
    atomic_store(result, (unint64_t *)&qword_1EF47A218);
  }
  return result;
}

unint64_t sub_1BCA7F308()
{
  unint64_t result;

  result = qword_1EF47A220;
  if (!qword_1EF47A220)
  {
    result = MEMORY[0x1BCCFBE84](&protocol conformance descriptor for SignificantChangeEngine.Parameters.FrequencyShift, &type metadata for SignificantChangeEngine.Parameters.FrequencyShift);
    atomic_store(result, (unint64_t *)&qword_1EF47A220);
  }
  return result;
}

unint64_t sub_1BCA7F34C()
{
  unint64_t result;

  result = qword_1EF47A230;
  if (!qword_1EF47A230)
  {
    result = MEMORY[0x1BCCFBE84](&protocol conformance descriptor for SignificantChangeEngine.Parameters.MeanShift, &type metadata for SignificantChangeEngine.Parameters.MeanShift);
    atomic_store(result, (unint64_t *)&qword_1EF47A230);
  }
  return result;
}

unint64_t sub_1BCA7F390()
{
  unint64_t result;

  result = qword_1EF47A238;
  if (!qword_1EF47A238)
  {
    result = MEMORY[0x1BCCFBE84](&protocol conformance descriptor for SignificantChangeEngine.Parameters.FrequencyShift, &type metadata for SignificantChangeEngine.Parameters.FrequencyShift);
    atomic_store(result, (unint64_t *)&qword_1EF47A238);
  }
  return result;
}

uint64_t sub_1BCA7F3D4(uint64_t a1, uint64_t a2)
{
  return sub_1BC9964B8(a1, a2, (uint64_t (*)(_QWORD))sub_1BCA7F3E0);
}

void sub_1BCA7F3E0(uint64_t a1)
{
  sub_1BC998AB0(a1, &qword_1ED6C3BF0, type metadata accessor for SignificantChangeEngine.State.MeanShift, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
}

uint64_t type metadata accessor for SignificantChangeEngine.State.MeanShift(uint64_t a1)
{
  return sub_1BC9B359C(a1, qword_1ED6C3BB0);
}

uint64_t sub_1BCA7F410(uint64_t a1, uint64_t a2)
{
  return sub_1BC9964B8(a1, a2, (uint64_t (*)(_QWORD))sub_1BCA7F41C);
}

void sub_1BCA7F41C(uint64_t a1)
{
  sub_1BC998AB0(a1, &qword_1ED6C3B28, type metadata accessor for SignificantChangeEngine.State.FrequencyShift, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
}

uint64_t type metadata accessor for SignificantChangeEngine.State.FrequencyShift(uint64_t a1)
{
  return sub_1BC9B359C(a1, qword_1ED6C3AE8);
}

uint64_t sub_1BCA7F44C(uint64_t a1, uint64_t a2)
{
  return sub_1BC9964B8(a1, a2, (uint64_t (*)(_QWORD))sub_1BC9DBE2C);
}

uint64_t type metadata accessor for SignificantChangeEngine.Changepoint(uint64_t a1)
{
  return sub_1BC9B359C(a1, qword_1ED6C39B8);
}

void sub_1BCA7F46C(uint64_t a1)
{
  sub_1BC998AB0(a1, &qword_1ED6C7280, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
}

unint64_t sub_1BCA7F488()
{
  unint64_t result;

  result = qword_1ED6C3B88;
  if (!qword_1ED6C3B88)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCAC88FC, &type metadata for SignificantChangeEngine.State.MeanShift.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED6C3B88);
  }
  return result;
}

unint64_t sub_1BCA7F4CC()
{
  unint64_t result;

  result = qword_1ED6C3AA8;
  if (!qword_1ED6C3AA8)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCAC88AC, &type metadata for SignificantChangeEngine.State.FrequencyShift.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED6C3AA8);
  }
  return result;
}

unint64_t sub_1BCA7F510()
{
  unint64_t result;

  result = qword_1ED6C3AC0;
  if (!qword_1ED6C3AC0)
  {
    result = MEMORY[0x1BCCFBE84](&protocol conformance descriptor for SignificantChangeEngine.State.FrequencyShift.Mode, &type metadata for SignificantChangeEngine.State.FrequencyShift.Mode);
    atomic_store(result, (unint64_t *)&qword_1ED6C3AC0);
  }
  return result;
}

unint64_t sub_1BCA7F554()
{
  unint64_t result;

  result = qword_1ED6C3AD0;
  if (!qword_1ED6C3AD0)
  {
    result = MEMORY[0x1BCCFBE84](&protocol conformance descriptor for SignificantChangeEngine.State.FrequencyShift.Mode, &type metadata for SignificantChangeEngine.State.FrequencyShift.Mode);
    atomic_store(result, (unint64_t *)&qword_1ED6C3AD0);
  }
  return result;
}

unint64_t sub_1BCA7F598()
{
  unint64_t result;

  result = qword_1ED6C3A90;
  if (!qword_1ED6C3A90)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCAC885C, &type metadata for SignificantChangeEngine.State.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED6C3A90);
  }
  return result;
}

void sub_1BCA7F5DC(uint64_t a1)
{
  sub_1BC998AB0(a1, &qword_1ED6C3D58, type metadata accessor for SignificantChangeEngine.Output, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
}

unint64_t sub_1BCA7F5F8()
{
  unint64_t result;

  result = qword_1ED6C3A68;
  if (!qword_1ED6C3A68)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCAC880C, &type metadata for SignificantChangeEngine.ChangepointComponent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED6C3A68);
  }
  return result;
}

unint64_t sub_1BCA7F63C()
{
  unint64_t result;

  result = qword_1ED6C3990;
  if (!qword_1ED6C3990)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCAC87BC, &type metadata for SignificantChangeEngine.Changepoint.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED6C3990);
  }
  return result;
}

unint64_t sub_1BCA7F680()
{
  unint64_t result;

  result = qword_1ED6C3A80;
  if (!qword_1ED6C3A80)
  {
    result = MEMORY[0x1BCCFBE84](&protocol conformance descriptor for SignificantChangeEngine.ChangepointComponent, &type metadata for SignificantChangeEngine.ChangepointComponent);
    atomic_store(result, (unint64_t *)&qword_1ED6C3A80);
  }
  return result;
}

unint64_t sub_1BCA7F6C4()
{
  unint64_t result;

  result = qword_1ED6C3A88;
  if (!qword_1ED6C3A88)
  {
    result = MEMORY[0x1BCCFBE84](&protocol conformance descriptor for SignificantChangeEngine.ChangepointComponent, &type metadata for SignificantChangeEngine.ChangepointComponent);
    atomic_store(result, (unint64_t *)&qword_1ED6C3A88);
  }
  return result;
}

unint64_t sub_1BCA7F70C()
{
  unint64_t result;

  result = qword_1EF47A240;
  if (!qword_1EF47A240)
  {
    result = MEMORY[0x1BCCFBE84](&protocol conformance descriptor for SignificantChangeEngine.Parameters.ChangepointMode, &type metadata for SignificantChangeEngine.Parameters.ChangepointMode);
    atomic_store(result, (unint64_t *)&qword_1EF47A240);
  }
  return result;
}

unint64_t sub_1BCA7F754()
{
  unint64_t result;

  result = qword_1EF47A248;
  if (!qword_1EF47A248)
  {
    result = MEMORY[0x1BCCFBE84](&protocol conformance descriptor for SignificantChangeEngine.State.FrequencyShift.Mode, &type metadata for SignificantChangeEngine.State.FrequencyShift.Mode);
    atomic_store(result, (unint64_t *)&qword_1EF47A248);
  }
  return result;
}

uint64_t dispatch thunk of SignificantChangeAnalyzing.analyzeForSignificantChanges(_:parameters:state:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 8))();
}

ValueMetadata *type metadata accessor for SignificantChangeEngine()
{
  return &type metadata for SignificantChangeEngine;
}

uint64_t *initializeBufferWithCopyOfBuffer for SignificantChangeEngine.Output(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  unsigned int (*v9)(_QWORD, _QWORD, _QWORD);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int (*v19)(_QWORD *, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, char *, uint64_t);
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  int *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int (*v37)(char *, uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(char *, char *, uint64_t);
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  char *v60;
  int *v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  unsigned int (*v66)(char *, uint64_t, uint64_t);
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void (*v71)(char *, char *, uint64_t);
  uint64_t v72;
  char *v73;
  char *v74;
  int *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  __int128 v82;
  uint64_t v83;
  char *v84;
  char *v85;
  __int128 v86;
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  char *v104;
  uint64_t v105;
  int *v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  unsigned int (*v110)(char *, uint64_t, uint64_t);
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  void (*v115)(char *, char *, uint64_t);
  char *v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  void (*v124)(char *, char *, uint64_t);
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  char *v131;
  char *v132;
  uint64_t v133;
  char *v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  void *__dst;
  char *__dsta;
  uint64_t v142;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for SignificantChange(0);
    v8 = *(_QWORD *)(v7 - 8);
    v9 = *(unsigned int (**)(_QWORD, _QWORD, _QWORD))(v8 + 48);
    v142 = v7;
    __dst = v9;
    if (v9(a2, 1, v7))
    {
      sub_1BCA7EFBC(0);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
    }
    else
    {
      v12 = sub_1BCAB4BD8();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(a1, a2, v12);
      v13 = (int *)type metadata accessor for SignificantChange.Period(0);
      *(uint64_t *)((char *)a1 + v13[5]) = *(uint64_t *)((char *)a2 + v13[5]);
      *(uint64_t *)((char *)a1 + v13[6]) = *(uint64_t *)((char *)a2 + v13[6]);
      *((_BYTE *)a1 + v13[7]) = *((_BYTE *)a2 + v13[7]);
      *(uint64_t *)((char *)a1 + *(int *)(v7 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(v7 + 20));
      v14 = *(int *)(v7 + 24);
      v15 = (uint64_t *)((char *)a1 + v14);
      v16 = (uint64_t *)((char *)a2 + v14);
      v17 = type metadata accessor for SignificantChange.Notification(0);
      v18 = *(_QWORD *)(v17 - 8);
      v19 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v18 + 48);
      swift_bridgeObjectRetain();
      if (v19(v16, 1, v17))
      {
        sub_1BCA8025C(0);
        memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
      }
      else
      {
        v21 = v16[1];
        *v15 = *v16;
        v15[1] = v21;
        *((_BYTE *)v15 + 16) = *((_BYTE *)v16 + 16);
        v22 = *(int *)(v17 + 24);
        v130 = (char *)v16 + v22;
        v134 = (char *)v15 + v22;
        v137 = v8;
        v23 = sub_1BCAB4E54();
        v24 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 16);
        swift_bridgeObjectRetain();
        v24(v134, v130, v23);
        v25 = v23;
        v8 = v137;
        v24((char *)v15 + *(int *)(v17 + 28), (char *)v16 + *(int *)(v17 + 28), v25);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
      }
      v7 = v142;
      v9 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))__dst;
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v142);
    }
    v26 = *(int *)(a3 + 20);
    v27 = (char *)a1 + v26;
    v28 = (char *)a2 + v26;
    if (v9((char *)a2 + v26, 1, v7))
    {
      sub_1BCA7EFBC(0);
      memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    }
    else
    {
      v138 = v8;
      v30 = sub_1BCAB4BD8();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v30 - 8) + 16))(v27, v28, v30);
      v31 = (int *)type metadata accessor for SignificantChange.Period(0);
      *(_QWORD *)&v27[v31[5]] = *(_QWORD *)&v28[v31[5]];
      *(_QWORD *)&v27[v31[6]] = *(_QWORD *)&v28[v31[6]];
      v27[v31[7]] = v28[v31[7]];
      *(_QWORD *)&v27[*(int *)(v7 + 20)] = *(_QWORD *)&v28[*(int *)(v7 + 20)];
      v32 = *(int *)(v7 + 24);
      v33 = &v27[v32];
      v34 = &v28[v32];
      v35 = type metadata accessor for SignificantChange.Notification(0);
      v36 = *(_QWORD *)(v35 - 8);
      v37 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48);
      swift_bridgeObjectRetain();
      if (v37(v34, 1, v35))
      {
        sub_1BCA8025C(0);
        memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
      }
      else
      {
        v39 = *((_QWORD *)v34 + 1);
        *(_QWORD *)v33 = *(_QWORD *)v34;
        *((_QWORD *)v33 + 1) = v39;
        v33[16] = v34[16];
        v40 = *(int *)(v35 + 24);
        v131 = &v34[v40];
        v135 = &v33[v40];
        v41 = sub_1BCAB4E54();
        v42 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v41 - 8) + 16);
        swift_bridgeObjectRetain();
        v42(v135, v131, v41);
        v42(&v33[*(int *)(v35 + 28)], &v34[*(int *)(v35 + 28)], v41);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v35);
      }
      v7 = v142;
      v8 = v138;
      v9 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))__dst;
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v138 + 56))(v27, 0, 1, v142);
    }
    v43 = *(int *)(a3 + 24);
    v44 = (char *)a1 + v43;
    v45 = (char *)a2 + v43;
    v46 = type metadata accessor for SignificantChangeEngine.State(0);
    v47 = *(_QWORD *)(v46 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v47 + 48))(v45, 1, v46))
    {
      sub_1BCA7EFF8(0);
      memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
    }
    else
    {
      v139 = v8;
      v49 = sub_1BCAB4BD8();
      v124 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v49 - 8) + 16);
      v124(v44, v45, v49);
      v132 = v44;
      v136 = v46;
      v50 = *(int *)(v46 + 20);
      v51 = &v44[v50];
      v52 = &v45[v50];
      v53 = type metadata accessor for SignificantChangeEngine.State.MeanShift(0);
      v54 = *(_QWORD *)(v53 - 8);
      v122 = v49;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v54 + 48))(v52, 1, v53))
      {
        sub_1BCA7F3E0(0);
        memcpy(v51, v52, *(_QWORD *)(*(_QWORD *)(v55 - 8) + 64));
        v56 = v132;
        v57 = v136;
      }
      else
      {
        v120 = v54;
        v126 = v53;
        v58 = v52;
        v128 = v47;
        if (v9(v52, 1, v7))
        {
          sub_1BCA7EFBC(0);
          v60 = v51;
          memcpy(v51, v52, *(_QWORD *)(*(_QWORD *)(v59 - 8) + 64));
          v57 = v136;
        }
        else
        {
          v124(v51, v52, v49);
          v61 = (int *)type metadata accessor for SignificantChange.Period(0);
          *(_QWORD *)&v51[v61[5]] = *(_QWORD *)&v52[v61[5]];
          *(_QWORD *)&v51[v61[6]] = *(_QWORD *)&v52[v61[6]];
          v51[v61[7]] = v52[v61[7]];
          *(_QWORD *)&v51[*(int *)(v7 + 20)] = *(_QWORD *)&v52[*(int *)(v7 + 20)];
          v62 = *(int *)(v7 + 24);
          v63 = &v51[v62];
          v64 = &v52[v62];
          v65 = type metadata accessor for SignificantChange.Notification(0);
          v119 = *(_QWORD *)(v65 - 8);
          v66 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v119 + 48);
          swift_bridgeObjectRetain();
          v57 = v136;
          if (v66(v64, 1, v65))
          {
            sub_1BCA8025C(0);
            memcpy(v63, v64, *(_QWORD *)(*(_QWORD *)(v67 - 8) + 64));
          }
          else
          {
            v68 = *((_QWORD *)v64 + 1);
            *(_QWORD *)v63 = *(_QWORD *)v64;
            *((_QWORD *)v63 + 1) = v68;
            v63[16] = v64[16];
            v69 = *(int *)(v65 + 24);
            v117 = &v64[v69];
            v118 = &v63[v69];
            v70 = sub_1BCAB4E54();
            v71 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v70 - 8) + 16);
            swift_bridgeObjectRetain();
            v71(v118, v117, v70);
            v71(&v63[*(int *)(v65 + 28)], &v64[*(int *)(v65 + 28)], v70);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v119 + 56))(v63, 0, 1, v65);
          }
          v53 = v126;
          v60 = v51;
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v139 + 56))(v51, 0, 1, v142);
        }
        v72 = *(int *)(v53 + 20);
        v73 = &v60[v72];
        v74 = &v58[v72];
        v75 = (int *)type metadata accessor for SignificantChangeEngine.Changepoint(0);
        v76 = *((_QWORD *)v75 - 1);
        if ((*(unsigned int (**)(char *, uint64_t, int *))(v76 + 48))(v74, 1, v75))
        {
          sub_1BC9DBE2C(0);
          memcpy(v73, v74, *(_QWORD *)(*(_QWORD *)(v77 - 8) + 64));
        }
        else
        {
          v78 = sub_1BCAB4E54();
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v78 - 8) + 16))(v73, v74, v78);
          *(_QWORD *)&v73[v75[5]] = *(_QWORD *)&v74[v75[5]];
          *(_QWORD *)&v73[v75[6]] = *(_QWORD *)&v74[v75[6]];
          *(_QWORD *)&v73[v75[7]] = *(_QWORD *)&v74[v75[7]];
          *(_QWORD *)&v73[v75[8]] = *(_QWORD *)&v74[v75[8]];
          *(_QWORD *)&v73[v75[9]] = *(_QWORD *)&v74[v75[9]];
          *(_QWORD *)&v73[v75[10]] = *(_QWORD *)&v74[v75[10]];
          v79 = v75[11];
          v80 = &v73[v79];
          v81 = &v74[v79];
          v82 = *((_OWORD *)v81 + 1);
          *(_OWORD *)v80 = *(_OWORD *)v81;
          *((_OWORD *)v80 + 1) = v82;
          *((_QWORD *)v80 + 4) = *((_QWORD *)v81 + 4);
          v83 = v75[12];
          v84 = &v73[v83];
          v85 = &v74[v83];
          v86 = *((_OWORD *)v85 + 1);
          *(_OWORD *)v84 = *(_OWORD *)v85;
          *((_OWORD *)v84 + 1) = v86;
          *((_QWORD *)v84 + 4) = *((_QWORD *)v85 + 4);
          (*(void (**)(char *, _QWORD, uint64_t, int *))(v76 + 56))(v73, 0, 1, v75);
        }
        v56 = v132;
        v87 = *(int *)(v126 + 24);
        v88 = &v51[v87];
        v89 = &v58[v87];
        v90 = sub_1BCAB4E54();
        v91 = *(_QWORD *)(v90 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v91 + 48))(v89, 1, v90))
        {
          sub_1BCA7F46C(0);
          memcpy(v88, v89, *(_QWORD *)(*(_QWORD *)(v92 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v91 + 16))(v88, v89, v90);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v91 + 56))(v88, 0, 1, v90);
        }
        v7 = v142;
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v120 + 56))(v51, 0, 1, v126);
        v47 = v128;
      }
      v93 = *(int *)(v57 + 24);
      v94 = &v56[v93];
      v95 = &v45[v93];
      v96 = type metadata accessor for SignificantChangeEngine.State.FrequencyShift(0);
      v97 = *(_QWORD *)(v96 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v97 + 48))(v95, 1, v96))
      {
        sub_1BCA7F41C(0);
        memcpy(v94, v95, *(_QWORD *)(*(_QWORD *)(v98 - 8) + 64));
      }
      else
      {
        v99 = sub_1BCAB4E54();
        v100 = *(_QWORD *)(v99 - 8);
        v129 = v47;
        v133 = v99;
        v127 = v100;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v100 + 48))(v95, 1, v99))
        {
          sub_1BCA7F46C(0);
          memcpy(v94, v95, *(_QWORD *)(*(_QWORD *)(v101 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v100 + 16))(v94, v95, v99);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v100 + 56))(v94, 0, 1, v99);
        }
        v94[*(int *)(v96 + 20)] = v95[*(int *)(v96 + 20)];
        v102 = *(int *)(v96 + 24);
        v103 = &v94[v102];
        v104 = &v95[v102];
        v57 = v136;
        if (((unsigned int (*)(char *, uint64_t, uint64_t))__dst)(&v95[v102], 1, v7))
        {
          sub_1BCA7EFBC(0);
          memcpy(v103, v104, *(_QWORD *)(*(_QWORD *)(v105 - 8) + 64));
          v47 = v129;
        }
        else
        {
          v124(v103, v104, v122);
          v106 = (int *)type metadata accessor for SignificantChange.Period(0);
          *(_QWORD *)&v103[v106[5]] = *(_QWORD *)&v104[v106[5]];
          *(_QWORD *)&v103[v106[6]] = *(_QWORD *)&v104[v106[6]];
          v103[v106[7]] = v104[v106[7]];
          *(_QWORD *)&v103[*(int *)(v7 + 20)] = *(_QWORD *)&v104[*(int *)(v7 + 20)];
          v107 = *(int *)(v7 + 24);
          __dsta = &v103[v107];
          v108 = &v104[v107];
          v109 = type metadata accessor for SignificantChange.Notification(0);
          v123 = *(_QWORD *)(v109 - 8);
          v110 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v123 + 48);
          swift_bridgeObjectRetain();
          v125 = v109;
          if (v110(v108, 1, v109))
          {
            sub_1BCA8025C(0);
            memcpy(__dsta, v108, *(_QWORD *)(*(_QWORD *)(v111 - 8) + 64));
          }
          else
          {
            v112 = *((_QWORD *)v108 + 1);
            *(_QWORD *)__dsta = *(_QWORD *)v108;
            *((_QWORD *)__dsta + 1) = v112;
            __dsta[16] = v108[16];
            v113 = *(int *)(v109 + 24);
            v114 = &__dsta[v113];
            v121 = &v108[v113];
            v115 = *(void (**)(char *, char *, uint64_t))(v127 + 16);
            swift_bridgeObjectRetain();
            v115(v114, v121, v133);
            v115(&__dsta[*(int *)(v125 + 28)], &v108[*(int *)(v125 + 28)], v133);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v123 + 56))(__dsta, 0, 1, v125);
          }
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v139 + 56))(v103, 0, 1, v142);
          v47 = v129;
          v57 = v136;
        }
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v97 + 56))(v94, 0, 1, v96);
      }
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v47 + 56))(v56, 0, 1, v57);
    }
  }
  return a1;
}

void sub_1BCA8025C(uint64_t a1)
{
  sub_1BC998AB0(a1, &qword_1ED6C3750, type metadata accessor for SignificantChange.Notification, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
}

uint64_t destroy for SignificantChangeEngine.Output(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int (*v5)(uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(uint64_t, uint64_t);
  void (*v44)(uint64_t, uint64_t);

  v4 = type metadata accessor for SignificantChange(0);
  v5 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48);
  if (!v5(a1, 1, v4))
  {
    v6 = sub_1BCAB4BD8();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1, v6);
    swift_bridgeObjectRelease();
    v7 = a1 + *(int *)(v4 + 24);
    v8 = type metadata accessor for SignificantChange.Notification(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v7, 1, v8))
    {
      swift_bridgeObjectRelease();
      v9 = v7 + *(int *)(v8 + 24);
      v10 = sub_1BCAB4E54();
      v11 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8);
      v11(v9, v10);
      v11(v7 + *(int *)(v8 + 28), v10);
    }
  }
  v12 = a1 + *(int *)(a2 + 20);
  if (!v5(v12, 1, v4))
  {
    v13 = sub_1BCAB4BD8();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12, v13);
    swift_bridgeObjectRelease();
    v14 = v12 + *(int *)(v4 + 24);
    v15 = type metadata accessor for SignificantChange.Notification(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 48))(v14, 1, v15))
    {
      swift_bridgeObjectRelease();
      v16 = v14 + *(int *)(v15 + 24);
      v17 = sub_1BCAB4E54();
      v18 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 8);
      v18(v16, v17);
      v18(v14 + *(int *)(v15 + 28), v17);
    }
  }
  v19 = a1 + *(int *)(a2 + 24);
  v20 = type metadata accessor for SignificantChangeEngine.State(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 48))(v19, 1, v20);
  if (!(_DWORD)result)
  {
    v22 = sub_1BCAB4BD8();
    v23 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 8);
    v23(v19, v22);
    v24 = v19 + *(int *)(v20 + 20);
    v25 = type metadata accessor for SignificantChangeEngine.State.MeanShift(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 48))(v24, 1, v25))
    {
      if (!v5(v24, 1, v4))
      {
        v23(v24, v22);
        swift_bridgeObjectRelease();
        v26 = v24 + *(int *)(v4 + 24);
        v27 = type metadata accessor for SignificantChange.Notification(0);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 48))(v26, 1, v27))
        {
          swift_bridgeObjectRelease();
          v42 = v26 + *(int *)(v27 + 24);
          v41 = sub_1BCAB4E54();
          v43 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 8);
          v43(v42, v41);
          v43(v26 + *(int *)(v27 + 28), v41);
        }
      }
      v28 = v24 + *(int *)(v25 + 20);
      v29 = type metadata accessor for SignificantChangeEngine.Changepoint(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 48))(v28, 1, v29))
      {
        v30 = sub_1BCAB4E54();
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 8))(v28, v30);
      }
      v31 = v24 + *(int *)(v25 + 24);
      v32 = sub_1BCAB4E54();
      v33 = *(_QWORD *)(v32 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v33 + 48))(v31, 1, v32))
        (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v31, v32);
    }
    v34 = v19 + *(int *)(v20 + 24);
    v35 = type metadata accessor for SignificantChangeEngine.State.FrequencyShift(0);
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 48))(v34, 1, v35);
    if (!(_DWORD)result)
    {
      v36 = sub_1BCAB4E54();
      v37 = *(_QWORD *)(v36 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v34, 1, v36))
        (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v34, v36);
      v38 = v34 + *(int *)(v35 + 24);
      result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v5)(v38, 1, v4);
      if (!(_DWORD)result)
      {
        v23(v38, v22);
        swift_bridgeObjectRelease();
        v39 = v38 + *(int *)(v4 + 24);
        v40 = type metadata accessor for SignificantChange.Notification(0);
        result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 48))(v39, 1, v40);
        if (!(_DWORD)result)
        {
          swift_bridgeObjectRelease();
          v44 = *(void (**)(uint64_t, uint64_t))(v37 + 8);
          v44(v39 + *(int *)(v40 + 24), v36);
          return ((uint64_t (*)(uint64_t, uint64_t))v44)(v39 + *(int *)(v40 + 28), v36);
        }
      }
    }
  }
  return result;
}

char *initializeWithCopy for SignificantChangeEngine.Output(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  unsigned int (*v7)(_QWORD, _QWORD, _QWORD);
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int (*v16)(char *, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, char *, uint64_t);
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  int *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int (*v33)(char *, uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, char *, uint64_t);
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  int *v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  unsigned int (*v63)(char *, uint64_t, uint64_t);
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void (*v68)(char *, char *, uint64_t);
  uint64_t v69;
  char *v70;
  char *v71;
  int *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  __int128 v79;
  uint64_t v80;
  char *v81;
  char *v82;
  __int128 v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  char *v102;
  uint64_t v103;
  int *v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  unsigned int (*v108)(char *, uint64_t, uint64_t);
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  char *v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  void (*v120)(char *, char *, uint64_t);
  uint64_t v121;
  char *v122;
  char *v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  void (*v127)(char *, char *, uint64_t);
  uint64_t v128;
  uint64_t v129;
  char *v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  char *v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unsigned int (*v140)(_QWORD, _QWORD, _QWORD);
  unsigned int (*v141)(_QWORD, _QWORD, _QWORD);
  unsigned int (*v142)(_QWORD, _QWORD, _QWORD);
  char *v143;
  uint64_t v144;

  v6 = type metadata accessor for SignificantChange(0);
  v144 = *(_QWORD *)(v6 - 8);
  v7 = *(unsigned int (**)(_QWORD, _QWORD, _QWORD))(v144 + 48);
  if (v7(a2, 1, v6))
  {
    sub_1BCA7EFBC(0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    v140 = v7;
    v9 = sub_1BCAB4BD8();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a1, a2, v9);
    v10 = (int *)type metadata accessor for SignificantChange.Period(0);
    *(_QWORD *)&a1[v10[5]] = *(_QWORD *)&a2[v10[5]];
    *(_QWORD *)&a1[v10[6]] = *(_QWORD *)&a2[v10[6]];
    a1[v10[7]] = a2[v10[7]];
    *(_QWORD *)&a1[*(int *)(v6 + 20)] = *(_QWORD *)&a2[*(int *)(v6 + 20)];
    v11 = *(int *)(v6 + 24);
    v12 = &a1[v11];
    v13 = &a2[v11];
    v14 = type metadata accessor for SignificantChange.Notification(0);
    v15 = *(_QWORD *)(v14 - 8);
    v16 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48);
    swift_bridgeObjectRetain();
    if (v16(v13, 1, v14))
    {
      sub_1BCA8025C(0);
      memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
    else
    {
      v18 = *((_QWORD *)v13 + 1);
      *(_QWORD *)v12 = *(_QWORD *)v13;
      *((_QWORD *)v12 + 1) = v18;
      v12[16] = v13[16];
      v19 = *(int *)(v14 + 24);
      v130 = &v13[v19];
      v134 = &v12[v19];
      v20 = sub_1BCAB4E54();
      v137 = v6;
      v21 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 16);
      swift_bridgeObjectRetain();
      v21(v134, v130, v20);
      v21(&v12[*(int *)(v14 + 28)], &v13[*(int *)(v14 + 28)], v20);
      v6 = v137;
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
    }
    v7 = v140;
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v144 + 56))(a1, 0, 1, v6);
  }
  v22 = *(int *)(a3 + 20);
  v23 = &a1[v22];
  v24 = &a2[v22];
  if (v7(&a2[v22], 1, v6))
  {
    sub_1BCA7EFBC(0);
    memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
  }
  else
  {
    v141 = v7;
    v26 = sub_1BCAB4BD8();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v26 - 8) + 16))(v23, v24, v26);
    v27 = (int *)type metadata accessor for SignificantChange.Period(0);
    *(_QWORD *)&v23[v27[5]] = *(_QWORD *)&v24[v27[5]];
    *(_QWORD *)&v23[v27[6]] = *(_QWORD *)&v24[v27[6]];
    v23[v27[7]] = v24[v27[7]];
    *(_QWORD *)&v23[*(int *)(v6 + 20)] = *(_QWORD *)&v24[*(int *)(v6 + 20)];
    v138 = v6;
    v28 = *(int *)(v6 + 24);
    v29 = &v23[v28];
    v30 = &v24[v28];
    v31 = type metadata accessor for SignificantChange.Notification(0);
    v32 = *(_QWORD *)(v31 - 8);
    v33 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48);
    swift_bridgeObjectRetain();
    if (v33(v30, 1, v31))
    {
      sub_1BCA8025C(0);
      memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
    }
    else
    {
      v35 = *((_QWORD *)v30 + 1);
      *(_QWORD *)v29 = *(_QWORD *)v30;
      *((_QWORD *)v29 + 1) = v35;
      v29[16] = v30[16];
      v36 = *(int *)(v31 + 24);
      v131 = &v30[v36];
      v135 = &v29[v36];
      v37 = sub_1BCAB4E54();
      v122 = a1;
      v38 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v37 - 8) + 16);
      swift_bridgeObjectRetain();
      v38(v135, v131, v37);
      v38(&v29[*(int *)(v31 + 28)], &v30[*(int *)(v31 + 28)], v37);
      a1 = v122;
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v29, 0, 1, v31);
    }
    v6 = v138;
    v7 = v141;
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v144 + 56))(v23, 0, 1, v138);
  }
  v39 = *(int *)(a3 + 24);
  v40 = &a1[v39];
  v41 = &a2[v39];
  v42 = type metadata accessor for SignificantChangeEngine.State(0);
  v43 = *(_QWORD *)(v42 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48))(v41, 1, v42))
  {
    sub_1BCA7EFF8(0);
    memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
  }
  else
  {
    v45 = sub_1BCAB4BD8();
    v120 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v45 - 8) + 16);
    v120(v40, v41, v45);
    v132 = v42;
    v136 = v40;
    v46 = *(int *)(v42 + 20);
    v47 = &v40[v46];
    v48 = &v41[v46];
    v49 = type metadata accessor for SignificantChangeEngine.State.MeanShift(0);
    v50 = *(_QWORD *)(v49 - 8);
    v139 = v6;
    v118 = v45;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v50 + 48))(v48, 1, v49))
    {
      sub_1BCA7F3E0(0);
      memcpy(v47, v48, *(_QWORD *)(*(_QWORD *)(v51 - 8) + 64));
      v53 = v132;
      v52 = v136;
    }
    else
    {
      v117 = v50;
      v125 = v49;
      v54 = v48;
      v142 = v7;
      v128 = v43;
      if (v7(v48, 1, v6))
      {
        sub_1BCA7EFBC(0);
        v56 = v47;
        memcpy(v47, v48, *(_QWORD *)(*(_QWORD *)(v55 - 8) + 64));
        v57 = v49;
        v53 = v132;
        v52 = v136;
      }
      else
      {
        v123 = a1;
        v120(v47, v48, v45);
        v58 = (int *)type metadata accessor for SignificantChange.Period(0);
        *(_QWORD *)&v47[v58[5]] = *(_QWORD *)&v48[v58[5]];
        *(_QWORD *)&v47[v58[6]] = *(_QWORD *)&v48[v58[6]];
        v47[v58[7]] = v48[v58[7]];
        *(_QWORD *)&v47[*(int *)(v6 + 20)] = *(_QWORD *)&v48[*(int *)(v6 + 20)];
        v59 = *(int *)(v6 + 24);
        v60 = &v47[v59];
        v61 = &v48[v59];
        v62 = type metadata accessor for SignificantChange.Notification(0);
        v116 = *(_QWORD *)(v62 - 8);
        v63 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v116 + 48);
        swift_bridgeObjectRetain();
        v53 = v132;
        v52 = v136;
        if (v63(v61, 1, v62))
        {
          sub_1BCA8025C(0);
          memcpy(v60, v61, *(_QWORD *)(*(_QWORD *)(v64 - 8) + 64));
        }
        else
        {
          v65 = *((_QWORD *)v61 + 1);
          *(_QWORD *)v60 = *(_QWORD *)v61;
          *((_QWORD *)v60 + 1) = v65;
          v60[16] = v61[16];
          v66 = *(int *)(v62 + 24);
          v114 = &v61[v66];
          v115 = &v60[v66];
          v67 = sub_1BCAB4E54();
          v68 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v67 - 8) + 16);
          swift_bridgeObjectRetain();
          v68(v115, v114, v67);
          v68(&v60[*(int *)(v62 + 28)], &v61[*(int *)(v62 + 28)], v67);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v116 + 56))(v60, 0, 1, v62);
        }
        v56 = v47;
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v144 + 56))(v47, 0, 1, v139);
        a1 = v123;
        v57 = v125;
      }
      v69 = *(int *)(v57 + 20);
      v70 = &v56[v69];
      v71 = &v54[v69];
      v72 = (int *)type metadata accessor for SignificantChangeEngine.Changepoint(0);
      v73 = *((_QWORD *)v72 - 1);
      if ((*(unsigned int (**)(char *, uint64_t, int *))(v73 + 48))(v71, 1, v72))
      {
        sub_1BC9DBE2C(0);
        memcpy(v70, v71, *(_QWORD *)(*(_QWORD *)(v74 - 8) + 64));
      }
      else
      {
        v75 = sub_1BCAB4E54();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v75 - 8) + 16))(v70, v71, v75);
        *(_QWORD *)&v70[v72[5]] = *(_QWORD *)&v71[v72[5]];
        *(_QWORD *)&v70[v72[6]] = *(_QWORD *)&v71[v72[6]];
        *(_QWORD *)&v70[v72[7]] = *(_QWORD *)&v71[v72[7]];
        *(_QWORD *)&v70[v72[8]] = *(_QWORD *)&v71[v72[8]];
        *(_QWORD *)&v70[v72[9]] = *(_QWORD *)&v71[v72[9]];
        *(_QWORD *)&v70[v72[10]] = *(_QWORD *)&v71[v72[10]];
        v76 = v72[11];
        v77 = &v70[v76];
        v78 = &v71[v76];
        v79 = *((_OWORD *)v78 + 1);
        *(_OWORD *)v77 = *(_OWORD *)v78;
        *((_OWORD *)v77 + 1) = v79;
        *((_QWORD *)v77 + 4) = *((_QWORD *)v78 + 4);
        v80 = v72[12];
        v81 = &v70[v80];
        v82 = &v71[v80];
        v83 = *((_OWORD *)v82 + 1);
        *(_OWORD *)v81 = *(_OWORD *)v82;
        *((_OWORD *)v81 + 1) = v83;
        *((_QWORD *)v81 + 4) = *((_QWORD *)v82 + 4);
        (*(void (**)(char *, _QWORD, uint64_t, int *))(v73 + 56))(v70, 0, 1, v72);
      }
      v84 = *(int *)(v125 + 24);
      v85 = &v47[v84];
      v86 = &v54[v84];
      v87 = sub_1BCAB4E54();
      v88 = *(_QWORD *)(v87 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v88 + 48))(v86, 1, v87))
      {
        sub_1BCA7F46C(0);
        memcpy(v85, v86, *(_QWORD *)(*(_QWORD *)(v89 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v88 + 16))(v85, v86, v87);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v88 + 56))(v85, 0, 1, v87);
      }
      v7 = v142;
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v117 + 56))(v47, 0, 1, v125);
      v43 = v128;
    }
    v90 = *(int *)(v53 + 24);
    v91 = &v52[v90];
    v92 = &v41[v90];
    v93 = type metadata accessor for SignificantChangeEngine.State.FrequencyShift(0);
    v94 = *(_QWORD *)(v93 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v94 + 48))(v92, 1, v93))
    {
      sub_1BCA7F41C(0);
      memcpy(v91, v92, *(_QWORD *)(*(_QWORD *)(v95 - 8) + 64));
    }
    else
    {
      v96 = v53;
      v97 = sub_1BCAB4E54();
      v98 = *(_QWORD *)(v97 - 8);
      v129 = v43;
      v133 = v97;
      v126 = v98;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v98 + 48))(v92, 1, v97))
      {
        sub_1BCA7F46C(0);
        memcpy(v91, v92, *(_QWORD *)(*(_QWORD *)(v99 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v98 + 16))(v91, v92, v97);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v98 + 56))(v91, 0, 1, v97);
      }
      v91[*(int *)(v93 + 20)] = v92[*(int *)(v93 + 20)];
      v100 = *(int *)(v93 + 24);
      v101 = &v91[v100];
      v102 = &v92[v100];
      v53 = v96;
      if (v7(&v92[v100], 1, v139))
      {
        sub_1BCA7EFBC(0);
        memcpy(v101, v102, *(_QWORD *)(*(_QWORD *)(v103 - 8) + 64));
        v43 = v129;
        v52 = v136;
      }
      else
      {
        v124 = a1;
        v120(v101, v102, v118);
        v104 = (int *)type metadata accessor for SignificantChange.Period(0);
        *(_QWORD *)&v101[v104[5]] = *(_QWORD *)&v102[v104[5]];
        *(_QWORD *)&v101[v104[6]] = *(_QWORD *)&v102[v104[6]];
        v101[v104[7]] = v102[v104[7]];
        *(_QWORD *)&v101[*(int *)(v139 + 20)] = *(_QWORD *)&v102[*(int *)(v139 + 20)];
        v105 = *(int *)(v139 + 24);
        v143 = &v101[v105];
        v106 = &v102[v105];
        v107 = type metadata accessor for SignificantChange.Notification(0);
        v121 = *(_QWORD *)(v107 - 8);
        v108 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v121 + 48);
        swift_bridgeObjectRetain();
        v52 = v136;
        if (v108(v106, 1, v107))
        {
          sub_1BCA8025C(0);
          memcpy(v143, v106, *(_QWORD *)(*(_QWORD *)(v109 - 8) + 64));
        }
        else
        {
          v110 = *((_QWORD *)v106 + 1);
          *(_QWORD *)v143 = *(_QWORD *)v106;
          *((_QWORD *)v143 + 1) = v110;
          v143[16] = v106[16];
          v111 = *(int *)(v107 + 24);
          v112 = &v143[v111];
          v119 = &v106[v111];
          v127 = *(void (**)(char *, char *, uint64_t))(v126 + 16);
          swift_bridgeObjectRetain();
          v127(v112, v119, v133);
          v127(&v143[*(int *)(v107 + 28)], &v106[*(int *)(v107 + 28)], v133);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v121 + 56))(v143, 0, 1, v107);
        }
        a1 = v124;
        v43 = v129;
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v144 + 56))(v101, 0, 1, v139);
      }
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v94 + 56))(v91, 0, 1, v93);
    }
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v43 + 56))(v52, 0, 1, v53);
  }
  return a1;
}

uint64_t assignWithCopy for SignificantChangeEngine.Output(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t);
  int v8;
  int v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int (*v17)(_QWORD *, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  size_t v20;
  void *v21;
  const void *v22;
  uint64_t v23;
  int *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(uint64_t, uint64_t, uint64_t);
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  void (*v37)(void *, char *, uint64_t);
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  void (*v44)(char *, char *, uint64_t);
  char *v45;
  char *v46;
  uint64_t v47;
  _BYTE *v48;
  _BYTE *v49;
  int v50;
  int v51;
  uint64_t v52;
  int *v53;
  uint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int (*v59)(_QWORD *, uint64_t, uint64_t);
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t (*v67)(_BYTE *, uint64_t, uint64_t);
  int v68;
  int v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  void (*v74)(char *, char *, uint64_t);
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  void (*v81)(char *, char *, uint64_t);
  char *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  int *v86;
  uint64_t v87;
  uint64_t (*v88)(uint64_t, uint64_t, int *);
  int v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  unsigned int (**v96)(const void *, uint64_t, uint64_t);
  uint64_t v97;
  uint64_t v98;
  size_t v99;
  void *v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  char *v105;
  uint64_t v106;
  uint64_t (*v107)(char *, uint64_t, uint64_t);
  char *v108;
  int v109;
  char *v110;
  char *v111;
  uint64_t v112;
  _QWORD *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  int *v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  unsigned int (*v121)(char *, uint64_t, uint64_t);
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  void (*v129)(uint64_t, char *, uint64_t);
  uint64_t v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  char *v136;
  uint64_t v137;
  void (*v138)(char *, char *, uint64_t);
  char *v139;
  uint64_t v140;
  char *v141;
  int v142;
  char *v143;
  int v144;
  int *v145;
  uint64_t v146;
  char *v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  unsigned int (*v151)(char *, uint64_t, uint64_t);
  uint64_t v152;
  int *v153;
  uint64_t v154;
  char *v155;
  char *v156;
  uint64_t v157;
  unsigned int (*v158)(char *, uint64_t, uint64_t);
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  char *v163;
  char *v164;
  int *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  char *v170;
  char *v171;
  uint64_t v172;
  __int128 v173;
  uint64_t v174;
  char *v175;
  char *v176;
  __int128 v177;
  __int128 v178;
  uint64_t v179;
  char *v180;
  char *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  char *v186;
  char *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  char *v195;
  char *v196;
  uint64_t v197;
  int *v198;
  uint64_t v199;
  uint64_t v200;
  unsigned int (*v201)(char *, uint64_t, uint64_t);
  uint64_t v202;
  uint64_t v203;
  void (*v204)(char *, char *, uint64_t);
  void (*v205)(uint64_t, _QWORD, uint64_t, int *);
  uint64_t v206;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  void (*v211)(char *, char *, uint64_t);
  uint64_t v212;
  char *v213;
  char *v214;
  int *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  char *v220;
  char *v221;
  uint64_t v222;
  __int128 v223;
  uint64_t v224;
  char *v225;
  char *v226;
  __int128 v227;
  __int128 v228;
  uint64_t v229;
  char *v230;
  char *v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  int *v235;
  uint64_t v236;
  uint64_t v237;
  char *v238;
  uint64_t v239;
  uint64_t (*v240)(uint64_t, uint64_t, uint64_t);
  int v241;
  int v242;
  uint64_t v243;
  uint64_t v244;
  void (*v245)(uint64_t, char *, uint64_t);
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  void (*v249)(char *, char *, uint64_t);
  uint64_t v250;
  uint64_t v251;
  char *v252;
  char *v253;
  int *v254;
  uint64_t v255;
  uint64_t (*v256)(char *, uint64_t, int *);
  int v257;
  int v258;
  uint64_t v259;
  uint64_t v260;
  char *v261;
  char *v262;
  uint64_t v263;
  __int128 v264;
  uint64_t v265;
  char *v266;
  char *v267;
  __int128 v268;
  __int128 v269;
  uint64_t v270;
  uint64_t v271;
  char *v272;
  char *v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t (*v276)(char *, uint64_t, uint64_t);
  int v277;
  int v278;
  uint64_t v279;
  uint64_t v280;
  char *v281;
  char *v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t (*v285)(char *, uint64_t, uint64_t);
  int v286;
  int v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t (*v295)(char *, uint64_t, uint64_t);
  int v296;
  int v297;
  uint64_t v298;
  char *v299;
  char *v300;
  uint64_t v301;
  int *v302;
  uint64_t v303;
  char *v304;
  uint64_t v305;
  unsigned int (*v306)(char *, uint64_t, uint64_t);
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  char *v311;
  int v312;
  int v313;
  int *v314;
  uint64_t v315;
  _QWORD *v316;
  char *v317;
  uint64_t v318;
  uint64_t v319;
  unsigned int (*v320)(char *, uint64_t, uint64_t);
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  char *v324;
  void (*v325)(char *, char *, uint64_t);
  uint64_t v326;
  uint64_t v327;
  char *v328;
  char *v329;
  uint64_t v330;
  char *v331;
  char *v332;
  int *v333;
  uint64_t v334;
  uint64_t v335;
  char *v336;
  uint64_t v337;
  uint64_t (*v338)(uint64_t, uint64_t, int *);
  int v339;
  int v340;
  uint64_t v341;
  uint64_t v342;
  char *v343;
  void (*v344)(uint64_t, char *, uint64_t);
  uint64_t v345;
  char *v346;
  char *v347;
  void (*v348)(char *, char *, uint64_t);
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  void (*v353)(uint64_t, char *, uint64_t);
  void (*v354)(uint64_t, char *, uint64_t);
  char *v355;
  char *v356;
  char *v357;
  char *v358;
  char *v359;
  uint64_t v360;
  uint64_t v361;
  void (*v362)(char *, char *, uint64_t);
  char *v363;
  uint64_t v364;
  char *v365;
  char *v366;
  char *v367;
  void (*v368)(uint64_t, char *);
  uint64_t v369;
  char *v370;
  _QWORD *__dst;
  char *__dsta;
  _QWORD *__dstb;
  _QWORD *v374;
  unsigned int (**v375)(const void *, uint64_t, uint64_t);
  _QWORD *v376;
  char *v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  void *__srcc;
  char *__srcd;
  void (*__src)(uint64_t, char *, uint64_t);
  char *__srca;
  char *__srcb;
  char *__srce;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t (*v411)(uint64_t, uint64_t, uint64_t);
  char *v412;
  char *v413;
  uint64_t v414;

  v6 = type metadata accessor for SignificantChange(0);
  v414 = *(_QWORD *)(v6 - 8);
  v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v414 + 48);
  v8 = v7(a1, 1, v6);
  v9 = v7((uint64_t)a2, 1, v6);
  v411 = v7;
  if (!v8)
  {
    if (!v9)
    {
      v404 = a3;
      v23 = sub_1BCAB4BD8();
      (*(void (**)(uint64_t, _BYTE *, uint64_t))(*(_QWORD *)(v23 - 8) + 24))(a1, a2, v23);
      v24 = (int *)type metadata accessor for SignificantChange.Period(0);
      *(_QWORD *)(a1 + v24[5]) = *(_QWORD *)&a2[v24[5]];
      *(_QWORD *)(a1 + v24[6]) = *(_QWORD *)&a2[v24[6]];
      *(_BYTE *)(a1 + v24[7]) = a2[v24[7]];
      *(_QWORD *)(a1 + *(int *)(v6 + 20)) = *(_QWORD *)&a2[*(int *)(v6 + 20)];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v25 = *(int *)(v6 + 24);
      v26 = a1 + v25;
      v27 = &a2[v25];
      v28 = type metadata accessor for SignificantChange.Notification(0);
      v29 = *(_QWORD *)(v28 - 8);
      v30 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v29 + 48);
      v31 = v30(v26, 1, v28);
      v32 = v30((uint64_t)v27, 1, v28);
      if (v31)
      {
        a3 = v404;
        if (!v32)
        {
          *(_QWORD *)v26 = *(_QWORD *)v27;
          *(_QWORD *)(v26 + 8) = *((_QWORD *)v27 + 1);
          *(_BYTE *)(v26 + 16) = v27[16];
          v33 = *(int *)(v28 + 24);
          __srcc = (void *)(v26 + v33);
          v34 = a1;
          v35 = &v27[v33];
          v387 = v6;
          v36 = sub_1BCAB4E54();
          v37 = *(void (**)(void *, char *, uint64_t))(*(_QWORD *)(v36 - 8) + 16);
          a3 = v404;
          swift_bridgeObjectRetain();
          v38 = v35;
          a1 = v34;
          v7 = v411;
          v37(__srcc, v38, v36);
          v39 = v36;
          v6 = v387;
          v37((void *)(v26 + *(int *)(v28 + 28)), &v27[*(int *)(v28 + 28)], v39);
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
          goto LABEL_14;
        }
      }
      else
      {
        a3 = v404;
        if (!v32)
        {
          *(_QWORD *)v26 = *(_QWORD *)v27;
          *(_QWORD *)(v26 + 8) = *((_QWORD *)v27 + 1);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          *(_BYTE *)(v26 + 16) = v27[16];
          v123 = *(int *)(v28 + 24);
          v124 = v26 + v123;
          v125 = v6;
          v126 = &v27[v123];
          v127 = a1;
          v128 = sub_1BCAB4E54();
          v129 = *(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v128 - 8) + 24);
          v130 = v124;
          v131 = v126;
          v6 = v125;
          a3 = v404;
          v7 = v411;
          v129(v130, v131, v128);
          v132 = v128;
          a1 = v127;
          v129(v26 + *(int *)(v28 + 28), &v27[*(int *)(v28 + 28)], v132);
          goto LABEL_14;
        }
        sub_1BC997208(v26, type metadata accessor for SignificantChange.Notification);
      }
      sub_1BCA8025C(0);
      v20 = *(_QWORD *)(*(_QWORD *)(v115 - 8) + 64);
      v21 = (void *)v26;
      v22 = v27;
LABEL_8:
      memcpy(v21, v22, v20);
      goto LABEL_14;
    }
    sub_1BC997208(a1, type metadata accessor for SignificantChange);
LABEL_7:
    sub_1BCA7EFBC(0);
    v20 = *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64);
    v21 = (void *)a1;
    v22 = a2;
    goto LABEL_8;
  }
  if (v9)
    goto LABEL_7;
  v10 = sub_1BCAB4BD8();
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(a1, a2, v10);
  v11 = (int *)type metadata accessor for SignificantChange.Period(0);
  *(_QWORD *)(a1 + v11[5]) = *(_QWORD *)&a2[v11[5]];
  *(_QWORD *)(a1 + v11[6]) = *(_QWORD *)&a2[v11[6]];
  *(_BYTE *)(a1 + v11[7]) = a2[v11[7]];
  *(_QWORD *)(a1 + *(int *)(v6 + 20)) = *(_QWORD *)&a2[*(int *)(v6 + 20)];
  v12 = *(int *)(v6 + 24);
  v13 = (_QWORD *)(a1 + v12);
  v14 = &a2[v12];
  v15 = type metadata accessor for SignificantChange.Notification(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v16 + 48);
  swift_bridgeObjectRetain();
  if (v17(v14, 1, v15))
  {
    sub_1BCA8025C(0);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  else
  {
    *v13 = *v14;
    v13[1] = v14[1];
    *((_BYTE *)v13 + 16) = *((_BYTE *)v14 + 16);
    v40 = *(int *)(v15 + 24);
    v388 = v6;
    v399 = a1;
    v41 = (char *)v13 + v40;
    v42 = (char *)v14 + v40;
    v43 = sub_1BCAB4E54();
    v44 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v43 - 8) + 16);
    swift_bridgeObjectRetain();
    v45 = v41;
    v46 = v42;
    v6 = v388;
    a1 = v399;
    v44(v45, v46, v43);
    v44((char *)v13 + *(int *)(v15 + 28), (char *)v14 + *(int *)(v15 + 28), v43);
    v7 = v411;
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  }
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v414 + 56))(a1, 0, 1, v6);
LABEL_14:
  v47 = *(int *)(a3 + 20);
  v48 = (_BYTE *)(a1 + v47);
  v49 = &a2[v47];
  v50 = v7(a1 + v47, 1, v6);
  v51 = v7((uint64_t)v49, 1, v6);
  if (!v50)
  {
    if (!v51)
    {
      v62 = sub_1BCAB4BD8();
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v62 - 8) + 24))(v48, v49, v62);
      v63 = (int *)type metadata accessor for SignificantChange.Period(0);
      *(_QWORD *)&v48[v63[5]] = *(_QWORD *)&v49[v63[5]];
      *(_QWORD *)&v48[v63[6]] = *(_QWORD *)&v49[v63[6]];
      v48[v63[7]] = v49[v63[7]];
      *(_QWORD *)&v48[*(int *)(v6 + 20)] = *(_QWORD *)&v49[*(int *)(v6 + 20)];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v64 = *(int *)(v6 + 24);
      v48 += v64;
      v49 += v64;
      v65 = type metadata accessor for SignificantChange.Notification(0);
      v66 = *(_QWORD *)(v65 - 8);
      v67 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v66 + 48);
      v68 = v67(v48, 1, v65);
      v69 = v67(v49, 1, v65);
      if (v68)
      {
        if (!v69)
        {
          *(_QWORD *)v48 = *(_QWORD *)v49;
          *((_QWORD *)v48 + 1) = *((_QWORD *)v49 + 1);
          v48[16] = v49[16];
          v70 = *(int *)(v65 + 24);
          v406 = a3;
          v71 = &v48[v70];
          v389 = v6;
          v72 = &v49[v70];
          v400 = a1;
          v73 = sub_1BCAB4E54();
          v74 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v73 - 8) + 16);
          swift_bridgeObjectRetain();
          v75 = v71;
          a3 = v406;
          v76 = v72;
          v6 = v389;
          v74(v75, v76, v73);
          v77 = v73;
          a1 = v400;
          v74(&v48[*(int *)(v65 + 28)], &v49[*(int *)(v65 + 28)], v77);
          (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v66 + 56))(v48, 0, 1, v65);
          goto LABEL_27;
        }
      }
      else
      {
        if (!v69)
        {
          *(_QWORD *)v48 = *(_QWORD *)v49;
          *((_QWORD *)v48 + 1) = *((_QWORD *)v49 + 1);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          v48[16] = v49[16];
          v133 = *(int *)(v65 + 24);
          v134 = &v48[v133];
          v135 = a3;
          v136 = &v49[v133];
          v393 = v6;
          v137 = sub_1BCAB4E54();
          v138 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v137 - 8) + 24);
          v139 = v136;
          a3 = v135;
          v138(v134, v139, v137);
          v140 = v137;
          v6 = v393;
          v138(&v48[*(int *)(v65 + 28)], &v49[*(int *)(v65 + 28)], v140);
          goto LABEL_27;
        }
        sub_1BC997208((uint64_t)v48, type metadata accessor for SignificantChange.Notification);
      }
      sub_1BCA8025C(0);
LABEL_21:
      memcpy(v48, v49, *(_QWORD *)(*(_QWORD *)(v61 - 8) + 64));
      goto LABEL_27;
    }
    sub_1BC997208((uint64_t)v48, type metadata accessor for SignificantChange);
LABEL_20:
    sub_1BCA7EFBC(0);
    goto LABEL_21;
  }
  if (v51)
    goto LABEL_20;
  v405 = a3;
  v52 = sub_1BCAB4BD8();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v52 - 8) + 16))(v48, v49, v52);
  v53 = (int *)type metadata accessor for SignificantChange.Period(0);
  *(_QWORD *)&v48[v53[5]] = *(_QWORD *)&v49[v53[5]];
  *(_QWORD *)&v48[v53[6]] = *(_QWORD *)&v49[v53[6]];
  v48[v53[7]] = v49[v53[7]];
  *(_QWORD *)&v48[*(int *)(v6 + 20)] = *(_QWORD *)&v49[*(int *)(v6 + 20)];
  v54 = *(int *)(v6 + 24);
  v55 = &v48[v54];
  v56 = &v49[v54];
  v57 = type metadata accessor for SignificantChange.Notification(0);
  v58 = *(_QWORD *)(v57 - 8);
  v59 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v58 + 48);
  swift_bridgeObjectRetain();
  if (v59(v56, 1, v57))
  {
    sub_1BCA8025C(0);
    memcpy(v55, v56, *(_QWORD *)(*(_QWORD *)(v60 - 8) + 64));
  }
  else
  {
    *v55 = *v56;
    v55[1] = v56[1];
    *((_BYTE *)v55 + 16) = *((_BYTE *)v56 + 16);
    v78 = *(int *)(v57 + 24);
    __srcd = (char *)v55 + v78;
    v401 = a1;
    v79 = (char *)v56 + v78;
    v80 = sub_1BCAB4E54();
    v390 = v6;
    v81 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v80 - 8) + 16);
    swift_bridgeObjectRetain();
    v82 = v79;
    a1 = v401;
    v81(__srcd, v82, v80);
    v81((char *)v55 + *(int *)(v57 + 28), (char *)v56 + *(int *)(v57 + 28), v80);
    v6 = v390;
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v58 + 56))(v55, 0, 1, v57);
  }
  a3 = v405;
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v414 + 56))(v48, 0, 1, v6);
LABEL_27:
  v83 = *(int *)(a3 + 24);
  v84 = a1 + v83;
  v85 = &a2[v83];
  v86 = (int *)type metadata accessor for SignificantChangeEngine.State(0);
  v87 = *((_QWORD *)v86 - 1);
  v88 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v87 + 48);
  v89 = v88(v84, 1, v86);
  v90 = v88((uint64_t)v85, 1, v86);
  if (v89)
  {
    if (!v90)
    {
      v391 = v6;
      v91 = sub_1BCAB4BD8();
      __src = *(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v91 - 8) + 16);
      __src(v84, v85, v91);
      v92 = v86[5];
      v93 = (char *)(v84 + v92);
      v94 = &v85[v92];
      v95 = type metadata accessor for SignificantChangeEngine.State.MeanShift(0);
      v96 = *(unsigned int (***)(const void *, uint64_t, uint64_t))(v95 - 8);
      v402 = a1;
      if (v96[6](v94, 1, v95))
      {
        sub_1BCA7F3E0(0);
        memcpy(v93, v94, *(_QWORD *)(*(_QWORD *)(v97 - 8) + 64));
      }
      else
      {
        v375 = v96;
        v408 = v84;
        v379 = v91;
        if (v411((uint64_t)v94, 1, v391))
        {
          sub_1BCA7EFBC(0);
          memcpy(v93, v94, *(_QWORD *)(*(_QWORD *)(v114 - 8) + 64));
        }
        else
        {
          __src((uint64_t)v93, v94, v91);
          v117 = (int *)type metadata accessor for SignificantChange.Period(0);
          *(_QWORD *)&v93[v117[5]] = *(_QWORD *)&v94[v117[5]];
          *(_QWORD *)&v93[v117[6]] = *(_QWORD *)&v94[v117[6]];
          v93[v117[7]] = v94[v117[7]];
          *(_QWORD *)&v93[*(int *)(v391 + 20)] = *(_QWORD *)&v94[*(int *)(v391 + 20)];
          v118 = *(int *)(v391 + 24);
          __dsta = &v93[v118];
          v119 = &v94[v118];
          v120 = type metadata accessor for SignificantChange.Notification(0);
          v369 = *(_QWORD *)(v120 - 8);
          v121 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v369 + 48);
          swift_bridgeObjectRetain();
          if (v121(v119, 1, v120))
          {
            sub_1BCA8025C(0);
            memcpy(__dsta, v119, *(_QWORD *)(*(_QWORD *)(v122 - 8) + 64));
          }
          else
          {
            *(_QWORD *)__dsta = *(_QWORD *)v119;
            *((_QWORD *)__dsta + 1) = *((_QWORD *)v119 + 1);
            __dsta[16] = v119[16];
            v160 = *(int *)(v120 + 24);
            v355 = &v119[v160];
            v358 = &__dsta[v160];
            v161 = sub_1BCAB4E54();
            v362 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v161 - 8) + 16);
            swift_bridgeObjectRetain();
            v362(v358, v355, v161);
            v362(&__dsta[*(int *)(v120 + 28)], &v119[*(int *)(v120 + 28)], v161);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v369 + 56))(__dsta, 0, 1, v120);
          }
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v414 + 56))(v93, 0, 1, v391);
        }
        v162 = *(int *)(v95 + 20);
        v163 = &v93[v162];
        v164 = &v94[v162];
        v165 = (int *)type metadata accessor for SignificantChangeEngine.Changepoint(0);
        v166 = *((_QWORD *)v165 - 1);
        if ((*(unsigned int (**)(char *, uint64_t, int *))(v166 + 48))(v164, 1, v165))
        {
          sub_1BC9DBE2C(0);
          memcpy(v163, v164, *(_QWORD *)(*(_QWORD *)(v167 - 8) + 64));
        }
        else
        {
          v168 = sub_1BCAB4E54();
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v168 - 8) + 16))(v163, v164, v168);
          *(_QWORD *)&v163[v165[5]] = *(_QWORD *)&v164[v165[5]];
          *(_QWORD *)&v163[v165[6]] = *(_QWORD *)&v164[v165[6]];
          *(_QWORD *)&v163[v165[7]] = *(_QWORD *)&v164[v165[7]];
          *(_QWORD *)&v163[v165[8]] = *(_QWORD *)&v164[v165[8]];
          *(_QWORD *)&v163[v165[9]] = *(_QWORD *)&v164[v165[9]];
          *(_QWORD *)&v163[v165[10]] = *(_QWORD *)&v164[v165[10]];
          v169 = v165[11];
          v170 = &v163[v169];
          v171 = &v164[v169];
          v172 = *((_QWORD *)v171 + 4);
          v173 = *((_OWORD *)v171 + 1);
          *(_OWORD *)v170 = *(_OWORD *)v171;
          *((_OWORD *)v170 + 1) = v173;
          *((_QWORD *)v170 + 4) = v172;
          v174 = v165[12];
          v175 = &v163[v174];
          v176 = &v164[v174];
          v178 = *(_OWORD *)v176;
          v177 = *((_OWORD *)v176 + 1);
          *((_QWORD *)v175 + 4) = *((_QWORD *)v176 + 4);
          *(_OWORD *)v175 = v178;
          *((_OWORD *)v175 + 1) = v177;
          (*(void (**)(char *, _QWORD, uint64_t, int *))(v166 + 56))(v163, 0, 1, v165);
        }
        v179 = *(int *)(v95 + 24);
        v180 = &v93[v179];
        v181 = &v94[v179];
        v182 = sub_1BCAB4E54();
        v183 = *(_QWORD *)(v182 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v183 + 48))(v181, 1, v182))
        {
          sub_1BCA7F46C(0);
          memcpy(v180, v181, *(_QWORD *)(*(_QWORD *)(v184 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v183 + 16))(v180, v181, v182);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v183 + 56))(v180, 0, 1, v182);
        }
        v91 = v379;
        ((void (*)(char *, _QWORD, uint64_t, uint64_t))v375[7])(v93, 0, 1, v95);
        v84 = v408;
      }
      v185 = v86[6];
      v186 = (char *)(v84 + v185);
      v187 = &v85[v185];
      v188 = type metadata accessor for SignificantChangeEngine.State.FrequencyShift(0);
      v189 = *(_QWORD *)(v188 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v189 + 48))(v187, 1, v188))
      {
        sub_1BCA7F41C(0);
        memcpy(v186, v187, *(_QWORD *)(*(_QWORD *)(v190 - 8) + 64));
        a1 = v402;
      }
      else
      {
        v191 = sub_1BCAB4E54();
        v192 = *(_QWORD *)(v191 - 8);
        v409 = v84;
        v376 = (_QWORD *)v192;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v192 + 48))(v187, 1, v191))
        {
          sub_1BCA7F46C(0);
          memcpy(v186, v187, *(_QWORD *)(*(_QWORD *)(v193 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v192 + 16))(v186, v187, v191);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v192 + 56))(v186, 0, 1, v191);
        }
        v186[*(int *)(v188 + 20)] = v187[*(int *)(v188 + 20)];
        v194 = *(int *)(v188 + 24);
        v195 = &v186[v194];
        v196 = &v187[v194];
        if (v411((uint64_t)&v187[v194], 1, v391))
        {
          sub_1BCA7EFBC(0);
          memcpy(v195, v196, *(_QWORD *)(*(_QWORD *)(v197 - 8) + 64));
          a1 = v402;
        }
        else
        {
          __src((uint64_t)v195, v196, v91);
          v198 = (int *)type metadata accessor for SignificantChange.Period(0);
          *(_QWORD *)&v195[v198[5]] = *(_QWORD *)&v196[v198[5]];
          *(_QWORD *)&v195[v198[6]] = *(_QWORD *)&v196[v198[6]];
          v195[v198[7]] = v196[v198[7]];
          *(_QWORD *)&v195[*(int *)(v391 + 20)] = *(_QWORD *)&v196[*(int *)(v391 + 20)];
          v199 = *(int *)(v391 + 24);
          __srcb = &v195[v199];
          v412 = &v196[v199];
          v200 = type metadata accessor for SignificantChange.Notification(0);
          __dstb = *(_QWORD **)(v200 - 8);
          v201 = (unsigned int (*)(char *, uint64_t, uint64_t))__dstb[6];
          swift_bridgeObjectRetain();
          v380 = v200;
          if (v201(v412, 1, v200))
          {
            sub_1BCA8025C(0);
            memcpy(__srcb, v412, *(_QWORD *)(*(_QWORD *)(v202 - 8) + 64));
          }
          else
          {
            *(_QWORD *)__srcb = *(_QWORD *)v412;
            *((_QWORD *)__srcb + 1) = *((_QWORD *)v412 + 1);
            __srcb[16] = v412[16];
            v203 = *(int *)(v200 + 24);
            v363 = &v412[v203];
            v370 = &__srcb[v203];
            v204 = (void (*)(char *, char *, uint64_t))v376[2];
            swift_bridgeObjectRetain();
            v204(v370, v363, v191);
            v204(&__srcb[*(int *)(v380 + 28)], &v412[*(int *)(v380 + 28)], v191);
            ((void (*)(char *, _QWORD, uint64_t, uint64_t))__dstb[7])(__srcb, 0, 1, v380);
          }
          a1 = v402;
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v414 + 56))(v195, 0, 1, v391);
        }
        v84 = v409;
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v189 + 56))(v186, 0, 1, v188);
      }
      v205 = *(void (**)(uint64_t, _QWORD, uint64_t, int *))(v87 + 56);
      v206 = v84;
      goto LABEL_82;
    }
    goto LABEL_33;
  }
  if (v90)
  {
    sub_1BC997208(v84, type metadata accessor for SignificantChangeEngine.State);
LABEL_33:
    sub_1BCA7EFF8(0);
    v99 = *(_QWORD *)(*(_QWORD *)(v98 - 8) + 64);
    v100 = (void *)v84;
    v101 = v85;
LABEL_34:
    memcpy(v100, v101, v99);
    return a1;
  }
  v102 = sub_1BCAB4BD8();
  __dst = *(_QWORD **)(v102 - 8);
  v378 = v102;
  v368 = (void (*)(uint64_t, char *))__dst[3];
  v368(v84, v85);
  v103 = v86[5];
  v104 = (char *)(v84 + v103);
  v105 = &v85[v103];
  v106 = type metadata accessor for SignificantChangeEngine.State.MeanShift(0);
  v374 = *(_QWORD **)(v106 - 8);
  v107 = (uint64_t (*)(char *, uint64_t, uint64_t))v374[6];
  v108 = v104;
  LODWORD(v104) = v107(v104, 1, v106);
  __srca = v105;
  v109 = v107(v105, 1, v106);
  v403 = a1;
  if ((_DWORD)v104)
  {
    if (!v109)
    {
      v110 = v105;
      v111 = v108;
      v392 = v6;
      v407 = v84;
      if (v411((uint64_t)__srca, 1, v6))
      {
        sub_1BCA7EFBC(0);
        memcpy(v108, __srca, *(_QWORD *)(*(_QWORD *)(v112 - 8) + 64));
        v113 = v374;
      }
      else
      {
        ((void (*)(char *, char *, uint64_t))__dst[2])(v108, __srca, v378);
        v153 = (int *)type metadata accessor for SignificantChange.Period(0);
        *(_QWORD *)&v108[v153[5]] = *(_QWORD *)&__srca[v153[5]];
        *(_QWORD *)&v108[v153[6]] = *(_QWORD *)&__srca[v153[6]];
        v108[v153[7]] = __srca[v153[7]];
        *(_QWORD *)&v108[*(int *)(v6 + 20)] = *(_QWORD *)&__srca[*(int *)(v6 + 20)];
        v154 = *(int *)(v6 + 24);
        v155 = &v108[v154];
        v156 = &__srca[v154];
        v157 = type metadata accessor for SignificantChange.Notification(0);
        v361 = *(_QWORD *)(v157 - 8);
        v158 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v361 + 48);
        swift_bridgeObjectRetain();
        v113 = v374;
        if (v158(v156, 1, v157))
        {
          sub_1BCA8025C(0);
          memcpy(v155, v156, *(_QWORD *)(*(_QWORD *)(v159 - 8) + 64));
        }
        else
        {
          *(_QWORD *)v155 = *(_QWORD *)v156;
          *((_QWORD *)v155 + 1) = *((_QWORD *)v156 + 1);
          v155[16] = v156[16];
          v209 = *(int *)(v157 + 24);
          v356 = &v156[v209];
          v359 = &v155[v209];
          v210 = sub_1BCAB4E54();
          v211 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v210 - 8) + 16);
          swift_bridgeObjectRetain();
          v211(v359, v356, v210);
          v211(&v155[*(int *)(v157 + 28)], &v156[*(int *)(v157 + 28)], v210);
          v113 = v374;
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v361 + 56))(v155, 0, 1, v157);
        }
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v414 + 56))(v111, 0, 1, v392);
        v110 = __srca;
      }
      v212 = *(int *)(v106 + 20);
      v213 = &v111[v212];
      v214 = &v110[v212];
      v215 = (int *)type metadata accessor for SignificantChangeEngine.Changepoint(0);
      v216 = *((_QWORD *)v215 - 1);
      if ((*(unsigned int (**)(char *, uint64_t, int *))(v216 + 48))(v214, 1, v215))
      {
        sub_1BC9DBE2C(0);
        memcpy(v213, v214, *(_QWORD *)(*(_QWORD *)(v217 - 8) + 64));
      }
      else
      {
        v218 = sub_1BCAB4E54();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v218 - 8) + 16))(v213, v214, v218);
        *(_QWORD *)&v213[v215[5]] = *(_QWORD *)&v214[v215[5]];
        *(_QWORD *)&v213[v215[6]] = *(_QWORD *)&v214[v215[6]];
        *(_QWORD *)&v213[v215[7]] = *(_QWORD *)&v214[v215[7]];
        *(_QWORD *)&v213[v215[8]] = *(_QWORD *)&v214[v215[8]];
        *(_QWORD *)&v213[v215[9]] = *(_QWORD *)&v214[v215[9]];
        *(_QWORD *)&v213[v215[10]] = *(_QWORD *)&v214[v215[10]];
        v219 = v215[11];
        v220 = &v213[v219];
        v221 = &v214[v219];
        v222 = *((_QWORD *)v221 + 4);
        v223 = *((_OWORD *)v221 + 1);
        *(_OWORD *)v220 = *(_OWORD *)v221;
        *((_OWORD *)v220 + 1) = v223;
        *((_QWORD *)v220 + 4) = v222;
        v224 = v215[12];
        v225 = &v213[v224];
        v226 = &v214[v224];
        v228 = *(_OWORD *)v226;
        v227 = *((_OWORD *)v226 + 1);
        *((_QWORD *)v225 + 4) = *((_QWORD *)v226 + 4);
        *(_OWORD *)v225 = v228;
        *((_OWORD *)v225 + 1) = v227;
        (*(void (**)(char *, _QWORD, uint64_t, int *))(v216 + 56))(v213, 0, 1, v215);
      }
      v229 = *(int *)(v106 + 24);
      v230 = &v111[v229];
      v231 = &__srca[v229];
      v232 = sub_1BCAB4E54();
      v233 = *(_QWORD *)(v232 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v233 + 48))(v231, 1, v232))
      {
        sub_1BCA7F46C(0);
        memcpy(v230, v231, *(_QWORD *)(*(_QWORD *)(v234 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v233 + 16))(v230, v231, v232);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v233 + 56))(v230, 0, 1, v232);
      }
      v6 = v392;
      ((void (*)(char *, _QWORD, uint64_t, uint64_t))v113[7])(v111, 0, 1, v106);
      goto LABEL_119;
    }
LABEL_49:
    sub_1BCA7F3E0(0);
    memcpy(v108, v105, *(_QWORD *)(*(_QWORD *)(v116 - 8) + 64));
    goto LABEL_120;
  }
  if (v109)
  {
    sub_1BC997208((uint64_t)v108, type metadata accessor for SignificantChangeEngine.State.MeanShift);
    goto LABEL_49;
  }
  v141 = v108;
  v142 = v411((uint64_t)v108, 1, v6);
  v143 = __srca;
  v144 = v411((uint64_t)__srca, 1, v6);
  v407 = v84;
  if (v142)
  {
    if (!v144)
    {
      ((void (*)(char *, char *, uint64_t))__dst[2])(v108, __srca, v378);
      v145 = (int *)type metadata accessor for SignificantChange.Period(0);
      *(_QWORD *)&v108[v145[5]] = *(_QWORD *)&__srca[v145[5]];
      *(_QWORD *)&v108[v145[6]] = *(_QWORD *)&__srca[v145[6]];
      v108[v145[7]] = __srca[v145[7]];
      *(_QWORD *)&v108[*(int *)(v6 + 20)] = *(_QWORD *)&__srca[*(int *)(v6 + 20)];
      v394 = v6;
      v146 = *(int *)(v6 + 24);
      v147 = &v108[v146];
      v148 = &__srca[v146];
      v149 = type metadata accessor for SignificantChange.Notification(0);
      v150 = *(_QWORD *)(v149 - 8);
      v151 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v150 + 48);
      swift_bridgeObjectRetain();
      if (v151(v148, 1, v149))
      {
        sub_1BCA8025C(0);
        memcpy(v147, v148, *(_QWORD *)(*(_QWORD *)(v152 - 8) + 64));
      }
      else
      {
        *(_QWORD *)v147 = *(_QWORD *)v148;
        *((_QWORD *)v147 + 1) = *((_QWORD *)v148 + 1);
        v147[16] = v148[16];
        v247 = *(int *)(v149 + 24);
        v377 = &v147[v247];
        v365 = &v148[v247];
        v248 = sub_1BCAB4E54();
        v249 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v248 - 8) + 16);
        swift_bridgeObjectRetain();
        v249(v377, v365, v248);
        v249(&v147[*(int *)(v149 + 28)], &v148[*(int *)(v149 + 28)], v248);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v150 + 56))(v147, 0, 1, v149);
      }
      v6 = v394;
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v414 + 56))(v141, 0, 1, v394);
      goto LABEL_106;
    }
LABEL_86:
    sub_1BCA7EFBC(0);
    memcpy(v108, __srca, *(_QWORD *)(*(_QWORD *)(v208 - 8) + 64));
    goto LABEL_107;
  }
  if (v144)
  {
    sub_1BC997208((uint64_t)v108, type metadata accessor for SignificantChange);
    goto LABEL_86;
  }
  ((void (*)(char *, char *, uint64_t))v368)(v108, __srca, v378);
  v235 = (int *)type metadata accessor for SignificantChange.Period(0);
  *(_QWORD *)&v108[v235[5]] = *(_QWORD *)&__srca[v235[5]];
  *(_QWORD *)&v108[v235[6]] = *(_QWORD *)&__srca[v235[6]];
  v108[v235[7]] = __srca[v235[7]];
  *(_QWORD *)&v108[*(int *)(v6 + 20)] = *(_QWORD *)&__srca[*(int *)(v6 + 20)];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v236 = *(int *)(v6 + 24);
  v237 = (uint64_t)&v108[v236];
  v238 = &__srca[v236];
  v239 = type metadata accessor for SignificantChange.Notification(0);
  v364 = *(_QWORD *)(v239 - 8);
  v240 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v364 + 48);
  v241 = v240(v237, 1, v239);
  v242 = v240((uint64_t)v238, 1, v239);
  if (v241)
  {
    if (!v242)
    {
      *(_QWORD *)v237 = *(_QWORD *)v238;
      *(_QWORD *)(v237 + 8) = *((_QWORD *)v238 + 1);
      *(_BYTE *)(v237 + 16) = v238[16];
      v243 = *(int *)(v239 + 24);
      v357 = &v238[v243];
      v360 = v237 + v243;
      v395 = v6;
      v244 = sub_1BCAB4E54();
      v245 = *(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v244 - 8) + 16);
      swift_bridgeObjectRetain();
      v245(v360, v357, v244);
      v246 = v244;
      v6 = v395;
      v245(v237 + *(int *)(v239 + 28), &v238[*(int *)(v239 + 28)], v246);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v364 + 56))(v237, 0, 1, v239);
LABEL_106:
      v143 = __srca;
      goto LABEL_107;
    }
LABEL_105:
    sub_1BCA8025C(0);
    memcpy((void *)v237, v238, *(_QWORD *)(*(_QWORD *)(v250 - 8) + 64));
    goto LABEL_106;
  }
  if (v242)
  {
    sub_1BC997208(v237, type metadata accessor for SignificantChange.Notification);
    goto LABEL_105;
  }
  *(_QWORD *)v237 = *(_QWORD *)v238;
  *(_QWORD *)(v237 + 8) = *((_QWORD *)v238 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(v237 + 16) = v238[16];
  v350 = *(int *)(v239 + 24);
  v351 = v237 + v350;
  v367 = &v238[v350];
  v352 = sub_1BCAB4E54();
  v398 = v6;
  v353 = *(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v352 - 8) + 24);
  v353(v351, v367, v352);
  v353(v237 + *(int *)(v239 + 28), &v238[*(int *)(v239 + 28)], v352);
  v143 = __srca;
  v6 = v398;
LABEL_107:
  v251 = *(int *)(v106 + 20);
  v366 = v141;
  v252 = &v141[v251];
  v253 = &v143[v251];
  v254 = (int *)type metadata accessor for SignificantChangeEngine.Changepoint(0);
  v255 = *((_QWORD *)v254 - 1);
  v256 = *(uint64_t (**)(char *, uint64_t, int *))(v255 + 48);
  v257 = v256(v252, 1, v254);
  v258 = v256(v253, 1, v254);
  if (v257)
  {
    if (!v258)
    {
      v259 = sub_1BCAB4E54();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v259 - 8) + 16))(v252, v253, v259);
      *(_QWORD *)&v252[v254[5]] = *(_QWORD *)&v253[v254[5]];
      *(_QWORD *)&v252[v254[6]] = *(_QWORD *)&v253[v254[6]];
      *(_QWORD *)&v252[v254[7]] = *(_QWORD *)&v253[v254[7]];
      *(_QWORD *)&v252[v254[8]] = *(_QWORD *)&v253[v254[8]];
      *(_QWORD *)&v252[v254[9]] = *(_QWORD *)&v253[v254[9]];
      *(_QWORD *)&v252[v254[10]] = *(_QWORD *)&v253[v254[10]];
      v260 = v254[11];
      v261 = &v252[v260];
      v262 = &v253[v260];
      v263 = *((_QWORD *)v262 + 4);
      v264 = *((_OWORD *)v262 + 1);
      *(_OWORD *)v261 = *(_OWORD *)v262;
      *((_OWORD *)v261 + 1) = v264;
      *((_QWORD *)v261 + 4) = v263;
      v265 = v254[12];
      v266 = &v252[v265];
      v267 = &v253[v265];
      v269 = *(_OWORD *)v267;
      v268 = *((_OWORD *)v267 + 1);
      *((_QWORD *)v266 + 4) = *((_QWORD *)v267 + 4);
      *(_OWORD *)v266 = v269;
      *((_OWORD *)v266 + 1) = v268;
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v255 + 56))(v252, 0, 1, v254);
      goto LABEL_113;
    }
    goto LABEL_112;
  }
  if (v258)
  {
    sub_1BC997208((uint64_t)v252, type metadata accessor for SignificantChangeEngine.Changepoint);
LABEL_112:
    sub_1BC9DBE2C(0);
    memcpy(v252, v253, *(_QWORD *)(*(_QWORD *)(v270 - 8) + 64));
    goto LABEL_113;
  }
  v326 = sub_1BCAB4E54();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v326 - 8) + 24))(v252, v253, v326);
  *(_QWORD *)&v252[v254[5]] = *(_QWORD *)&v253[v254[5]];
  *(_QWORD *)&v252[v254[6]] = *(_QWORD *)&v253[v254[6]];
  *(_QWORD *)&v252[v254[7]] = *(_QWORD *)&v253[v254[7]];
  *(_QWORD *)&v252[v254[8]] = *(_QWORD *)&v253[v254[8]];
  *(_QWORD *)&v252[v254[9]] = *(_QWORD *)&v253[v254[9]];
  *(_QWORD *)&v252[v254[10]] = *(_QWORD *)&v253[v254[10]];
  v327 = v254[11];
  v328 = &v252[v327];
  v329 = &v253[v327];
  *(_QWORD *)v328 = *(_QWORD *)v329;
  *((_QWORD *)v328 + 1) = *((_QWORD *)v329 + 1);
  *((_QWORD *)v328 + 2) = *((_QWORD *)v329 + 2);
  *((_QWORD *)v328 + 3) = *((_QWORD *)v329 + 3);
  *((_QWORD *)v328 + 4) = *((_QWORD *)v329 + 4);
  v330 = v254[12];
  v331 = &v252[v330];
  v332 = &v253[v330];
  *(_QWORD *)v331 = *(_QWORD *)v332;
  *((_QWORD *)v331 + 1) = *((_QWORD *)v332 + 1);
  *((_QWORD *)v331 + 2) = *((_QWORD *)v332 + 2);
  *((_QWORD *)v331 + 3) = *((_QWORD *)v332 + 3);
  *((_QWORD *)v331 + 4) = *((_QWORD *)v332 + 4);
LABEL_113:
  v271 = *(int *)(v106 + 24);
  v272 = &v366[v271];
  v273 = &__srca[v271];
  v274 = sub_1BCAB4E54();
  v275 = *(_QWORD *)(v274 - 8);
  v276 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v275 + 48);
  v277 = v276(v272, 1, v274);
  v278 = v276(v273, 1, v274);
  if (!v277)
  {
    if (!v278)
    {
      (*(void (**)(char *, char *, uint64_t))(v275 + 24))(v272, v273, v274);
      goto LABEL_119;
    }
    (*(void (**)(char *, uint64_t))(v275 + 8))(v272, v274);
    goto LABEL_118;
  }
  if (v278)
  {
LABEL_118:
    sub_1BCA7F46C(0);
    memcpy(v272, v273, *(_QWORD *)(*(_QWORD *)(v279 - 8) + 64));
    goto LABEL_119;
  }
  (*(void (**)(char *, char *, uint64_t))(v275 + 16))(v272, v273, v274);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v275 + 56))(v272, 0, 1, v274);
LABEL_119:
  v84 = v407;
LABEL_120:
  v280 = v86[6];
  v281 = (char *)(v84 + v280);
  v282 = &v85[v280];
  v283 = type metadata accessor for SignificantChangeEngine.State.FrequencyShift(0);
  v284 = *(_QWORD *)(v283 - 8);
  v285 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v284 + 48);
  v286 = v285(v281, 1, v283);
  v287 = v285(v282, 1, v283);
  if (v286)
  {
    if (v287)
    {
      sub_1BCA7F41C(0);
      memcpy(v281, v282, *(_QWORD *)(*(_QWORD *)(v288 - 8) + 64));
      return v403;
    }
    else
    {
      v290 = sub_1BCAB4E54();
      v291 = *(_QWORD *)(v290 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v291 + 48))(v282, 1, v290))
      {
        sub_1BCA7F46C(0);
        memcpy(v281, v282, *(_QWORD *)(*(_QWORD *)(v292 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v291 + 16))(v281, v282, v290);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v291 + 56))(v281, 0, 1, v290);
      }
      v281[*(int *)(v283 + 20)] = v282[*(int *)(v283 + 20)];
      v298 = *(int *)(v283 + 24);
      v299 = &v281[v298];
      v300 = &v282[v298];
      if (v411((uint64_t)&v282[v298], 1, v6))
      {
        sub_1BCA7EFBC(0);
        memcpy(v299, v300, *(_QWORD *)(*(_QWORD *)(v301 - 8) + 64));
      }
      else
      {
        ((void (*)(char *, char *, uint64_t))__dst[2])(v299, v300, v378);
        v302 = (int *)type metadata accessor for SignificantChange.Period(0);
        *(_QWORD *)&v299[v302[5]] = *(_QWORD *)&v300[v302[5]];
        *(_QWORD *)&v299[v302[6]] = *(_QWORD *)&v300[v302[6]];
        v299[v302[7]] = v300[v302[7]];
        *(_QWORD *)&v299[*(int *)(v6 + 20)] = *(_QWORD *)&v300[*(int *)(v6 + 20)];
        v396 = v6;
        v303 = *(int *)(v6 + 24);
        v413 = &v299[v303];
        v304 = &v300[v303];
        v305 = type metadata accessor for SignificantChange.Notification(0);
        v410 = *(_QWORD *)(v305 - 8);
        v306 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v410 + 48);
        swift_bridgeObjectRetain();
        if (v306(v304, 1, v305))
        {
          sub_1BCA8025C(0);
          memcpy(v413, v304, *(_QWORD *)(*(_QWORD *)(v307 - 8) + 64));
        }
        else
        {
          *(_QWORD *)v413 = *(_QWORD *)v304;
          *((_QWORD *)v413 + 1) = *((_QWORD *)v304 + 1);
          v413[16] = v304[16];
          v323 = *(int *)(v305 + 24);
          v324 = &v413[v323];
          __srce = &v304[v323];
          v325 = *(void (**)(char *, char *, uint64_t))(v291 + 16);
          swift_bridgeObjectRetain();
          v325(v324, __srce, v290);
          v325(&v413[*(int *)(v305 + 28)], &v304[*(int *)(v305 + 28)], v290);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v410 + 56))(v413, 0, 1, v305);
        }
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v414 + 56))(v299, 0, 1, v396);
      }
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v284 + 56))(v281, 0, 1, v283);
      return v403;
    }
  }
  a1 = v403;
  if (v287)
  {
    sub_1BC997208((uint64_t)v281, type metadata accessor for SignificantChangeEngine.State.FrequencyShift);
    sub_1BCA7F41C(0);
    v99 = *(_QWORD *)(*(_QWORD *)(v289 - 8) + 64);
    v100 = v281;
    v101 = v282;
    goto LABEL_34;
  }
  v293 = sub_1BCAB4E54();
  v294 = *(_QWORD *)(v293 - 8);
  v295 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v294 + 48);
  v296 = v295(v281, 1, v293);
  v297 = v295(v282, 1, v293);
  if (v296)
  {
    if (!v297)
    {
      (*(void (**)(char *, char *, uint64_t))(v294 + 16))(v281, v282, v293);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v294 + 56))(v281, 0, 1, v293);
      goto LABEL_138;
    }
    goto LABEL_137;
  }
  if (v297)
  {
    (*(void (**)(char *, uint64_t))(v294 + 8))(v281, v293);
LABEL_137:
    sub_1BCA7F46C(0);
    memcpy(v281, v282, *(_QWORD *)(*(_QWORD *)(v308 - 8) + 64));
    goto LABEL_138;
  }
  (*(void (**)(char *, char *, uint64_t))(v294 + 24))(v281, v282, v293);
LABEL_138:
  v281[*(int *)(v283 + 20)] = v282[*(int *)(v283 + 20)];
  v309 = *(int *)(v283 + 24);
  v310 = (uint64_t)&v281[v309];
  v311 = &v282[v309];
  v312 = v411(v310, 1, v6);
  v313 = v411((uint64_t)v311, 1, v6);
  if (!v312)
  {
    if (!v313)
    {
      ((void (*)(uint64_t, char *, uint64_t))v368)(v310, v311, v378);
      v333 = (int *)type metadata accessor for SignificantChange.Period(0);
      *(_QWORD *)(v310 + v333[5]) = *(_QWORD *)&v311[v333[5]];
      *(_QWORD *)(v310 + v333[6]) = *(_QWORD *)&v311[v333[6]];
      *(_BYTE *)(v310 + v333[7]) = v311[v333[7]];
      *(_QWORD *)(v310 + *(int *)(v6 + 20)) = *(_QWORD *)&v311[*(int *)(v6 + 20)];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v334 = *(int *)(v6 + 24);
      v335 = v310 + v334;
      v336 = &v311[v334];
      v86 = (int *)type metadata accessor for SignificantChange.Notification(0);
      v337 = *((_QWORD *)v86 - 1);
      v338 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v337 + 48);
      v339 = v338(v335, 1, v86);
      v340 = v338((uint64_t)v336, 1, v86);
      if (v339)
      {
        if (!v340)
        {
          *(_QWORD *)v335 = *(_QWORD *)v336;
          *(_QWORD *)(v335 + 8) = *((_QWORD *)v336 + 1);
          *(_BYTE *)(v335 + 16) = v336[16];
          v341 = v86[6];
          v342 = v335 + v341;
          v343 = &v336[v341];
          v344 = *(void (**)(uint64_t, char *, uint64_t))(v294 + 16);
          swift_bridgeObjectRetain();
          v344(v342, v343, v293);
          v344(v335 + v86[7], &v336[v86[7]], v293);
          v205 = *(void (**)(uint64_t, _QWORD, uint64_t, int *))(v337 + 56);
          v206 = v335;
LABEL_82:
          v205(v206, 0, 1, v86);
          return a1;
        }
      }
      else
      {
        if (!v340)
        {
          *(_QWORD *)v335 = *(_QWORD *)v336;
          *(_QWORD *)(v335 + 8) = *((_QWORD *)v336 + 1);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          *(_BYTE *)(v335 + 16) = v336[16];
          v354 = *(void (**)(uint64_t, char *, uint64_t))(v294 + 24);
          v354(v335 + v86[6], &v336[v86[6]], v293);
          v354(v335 + v86[7], &v336[v86[7]], v293);
          return a1;
        }
        sub_1BC997208(v335, type metadata accessor for SignificantChange.Notification);
      }
      sub_1BCA8025C(0);
      v99 = *(_QWORD *)(*(_QWORD *)(v349 - 8) + 64);
      v100 = (void *)v335;
      v101 = v336;
      goto LABEL_34;
    }
    sub_1BC997208(v310, type metadata accessor for SignificantChange);
    goto LABEL_144;
  }
  if (v313)
  {
LABEL_144:
    sub_1BCA7EFBC(0);
    v99 = *(_QWORD *)(*(_QWORD *)(v322 - 8) + 64);
    v100 = (void *)v310;
    v101 = v311;
    goto LABEL_34;
  }
  ((void (*)(uint64_t, char *, uint64_t))__dst[2])(v310, v311, v378);
  v314 = (int *)type metadata accessor for SignificantChange.Period(0);
  *(_QWORD *)(v310 + v314[5]) = *(_QWORD *)&v311[v314[5]];
  *(_QWORD *)(v310 + v314[6]) = *(_QWORD *)&v311[v314[6]];
  *(_BYTE *)(v310 + v314[7]) = v311[v314[7]];
  *(_QWORD *)(v310 + *(int *)(v6 + 20)) = *(_QWORD *)&v311[*(int *)(v6 + 20)];
  v397 = v6;
  v315 = *(int *)(v6 + 24);
  v316 = (_QWORD *)(v310 + v315);
  v317 = &v311[v315];
  v318 = type metadata accessor for SignificantChange.Notification(0);
  v319 = *(_QWORD *)(v318 - 8);
  v320 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v319 + 48);
  swift_bridgeObjectRetain();
  if (v320(v317, 1, v318))
  {
    sub_1BCA8025C(0);
    memcpy(v316, v317, *(_QWORD *)(*(_QWORD *)(v321 - 8) + 64));
  }
  else
  {
    *v316 = *(_QWORD *)v317;
    v316[1] = *((_QWORD *)v317 + 1);
    *((_BYTE *)v316 + 16) = v317[16];
    v345 = *(int *)(v318 + 24);
    v346 = (char *)v316 + v345;
    v347 = &v317[v345];
    v348 = *(void (**)(char *, char *, uint64_t))(v294 + 16);
    swift_bridgeObjectRetain();
    v348(v346, v347, v293);
    v348((char *)v316 + *(int *)(v318 + 28), &v317[*(int *)(v318 + 28)], v293);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v319 + 56))(v316, 0, 1, v318);
  }
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v414 + 56))(v310, 0, 1, v397);
  return a1;
}

char *initializeWithTake for SignificantChangeEngine.Output(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int (*v8)(_QWORD, _QWORD, _QWORD);
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  void (*v22)(char *, char *, uint64_t);
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  void (*v40)(char *, char *, uint64_t);
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  int *v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void (*v71)(char *, char *, uint64_t);
  uint64_t v72;
  char *v73;
  char *v74;
  int *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  __int128 v82;
  uint64_t v83;
  char *v84;
  char *v85;
  __int128 v86;
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  char *v105;
  uint64_t v106;
  int *v107;
  uint64_t v108;
  char *v109;
  char *v110;
  uint64_t v111;
  char *v112;
  int v113;
  uint64_t v114;
  void (*v115)(char *, char *, uint64_t);
  char *v117;
  char *v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  void (*v122)(char *, char *, uint64_t);
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  char *v134;
  char *v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unsigned int (*v140)(_QWORD, _QWORD, _QWORD);
  unsigned int (*v141)(_QWORD, _QWORD, _QWORD);
  unsigned int (*v142)(_QWORD, _QWORD, _QWORD);
  uint64_t v143;

  v6 = type metadata accessor for SignificantChange(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned int (**)(_QWORD, _QWORD, _QWORD))(v7 + 48);
  if (v8(a2, 1, v6))
  {
    sub_1BCA7EFBC(0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  else
  {
    v140 = v8;
    v10 = sub_1BCAB4BD8();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(a1, a2, v10);
    v11 = (int *)type metadata accessor for SignificantChange.Period(0);
    *(_QWORD *)&a1[v11[5]] = *(_QWORD *)&a2[v11[5]];
    *(_QWORD *)&a1[v11[6]] = *(_QWORD *)&a2[v11[6]];
    a1[v11[7]] = a2[v11[7]];
    *(_QWORD *)&a1[*(int *)(v6 + 20)] = *(_QWORD *)&a2[*(int *)(v6 + 20)];
    v12 = *(int *)(v6 + 24);
    v13 = &a1[v12];
    v14 = &a2[v12];
    v15 = type metadata accessor for SignificantChange.Notification(0);
    v16 = *(_QWORD *)(v15 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
    {
      sub_1BCA8025C(0);
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
    else
    {
      *(_OWORD *)v13 = *(_OWORD *)v14;
      v13[16] = v14[16];
      v18 = *(int *)(v15 + 24);
      v19 = &v13[v18];
      v130 = v7;
      v20 = &v14[v18];
      v133 = a1;
      v137 = v6;
      v21 = sub_1BCAB4E54();
      v22 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 32);
      v23 = v20;
      v7 = v130;
      v22(v19, v23, v21);
      v24 = v21;
      v6 = v137;
      v22(&v13[*(int *)(v15 + 28)], &v14[*(int *)(v15 + 28)], v24);
      a1 = v133;
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
    }
    v8 = v140;
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v25 = *(int *)(a3 + 20);
  v26 = &a1[v25];
  v27 = &a2[v25];
  if (v8(&a2[v25], 1, v6))
  {
    sub_1BCA7EFBC(0);
    memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
  }
  else
  {
    v134 = a1;
    v29 = sub_1BCAB4BD8();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v29 - 8) + 32))(v26, v27, v29);
    v30 = (int *)type metadata accessor for SignificantChange.Period(0);
    *(_QWORD *)&v26[v30[5]] = *(_QWORD *)&v27[v30[5]];
    *(_QWORD *)&v26[v30[6]] = *(_QWORD *)&v27[v30[6]];
    v26[v30[7]] = v27[v30[7]];
    *(_QWORD *)&v26[*(int *)(v6 + 20)] = *(_QWORD *)&v27[*(int *)(v6 + 20)];
    v31 = *(int *)(v6 + 24);
    v32 = &v26[v31];
    v33 = &v27[v31];
    v34 = type metadata accessor for SignificantChange.Notification(0);
    v35 = *(_QWORD *)(v34 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v33, 1, v34))
    {
      sub_1BCA8025C(0);
      memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
    }
    else
    {
      *(_OWORD *)v32 = *(_OWORD *)v33;
      v32[16] = v33[16];
      v37 = *(int *)(v34 + 24);
      v128 = &v32[v37];
      v138 = v6;
      v38 = &v33[v37];
      v141 = v8;
      v39 = sub_1BCAB4E54();
      v131 = v7;
      v40 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v39 - 8) + 32);
      v41 = v38;
      v6 = v138;
      v40(v128, v41, v39);
      v42 = v39;
      v8 = v141;
      v40(&v32[*(int *)(v34 + 28)], &v33[*(int *)(v34 + 28)], v42);
      v7 = v131;
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, v34);
    }
    a1 = v134;
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v26, 0, 1, v6);
  }
  v43 = *(int *)(a3 + 24);
  v44 = &a1[v43];
  v45 = &a2[v43];
  v46 = type metadata accessor for SignificantChangeEngine.State(0);
  v47 = *(_QWORD *)(v46 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v47 + 48))(v45, 1, v46))
  {
    sub_1BCA7EFF8(0);
    memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
  }
  else
  {
    v132 = v7;
    v49 = sub_1BCAB4BD8();
    v122 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v49 - 8) + 32);
    v122(v44, v45, v49);
    v125 = v46;
    v50 = *(int *)(v46 + 20);
    v129 = v44;
    v51 = &v44[v50];
    v52 = &v45[v50];
    v53 = type metadata accessor for SignificantChangeEngine.State.MeanShift(0);
    v54 = *(_QWORD *)(v53 - 8);
    v139 = v6;
    v127 = v47;
    v121 = v49;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v54 + 48))(v52, 1, v53))
    {
      sub_1BCA7F3E0(0);
      memcpy(v51, v52, *(_QWORD *)(*(_QWORD *)(v55 - 8) + 64));
      v56 = v129;
      v57 = v125;
    }
    else
    {
      v120 = v54;
      v123 = v53;
      v58 = v52;
      v142 = v8;
      if (v8(v52, 1, v6))
      {
        sub_1BCA7EFBC(0);
        v60 = v51;
        memcpy(v51, v52, *(_QWORD *)(*(_QWORD *)(v59 - 8) + 64));
        v61 = v53;
        v57 = v125;
        v56 = v129;
      }
      else
      {
        v122(v51, v52, v49);
        v62 = (int *)type metadata accessor for SignificantChange.Period(0);
        *(_QWORD *)&v51[v62[5]] = *(_QWORD *)&v52[v62[5]];
        *(_QWORD *)&v51[v62[6]] = *(_QWORD *)&v52[v62[6]];
        v51[v62[7]] = v52[v62[7]];
        *(_QWORD *)&v51[*(int *)(v6 + 20)] = *(_QWORD *)&v52[*(int *)(v6 + 20)];
        v63 = *(int *)(v6 + 24);
        v64 = &v51[v63];
        v65 = &v52[v63];
        v66 = type metadata accessor for SignificantChange.Notification(0);
        v67 = *(_QWORD *)(v66 - 8);
        v56 = v129;
        v57 = v125;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v67 + 48))(v65, 1, v66))
        {
          sub_1BCA8025C(0);
          memcpy(v64, v65, *(_QWORD *)(*(_QWORD *)(v68 - 8) + 64));
        }
        else
        {
          *(_OWORD *)v64 = *(_OWORD *)v65;
          v64[16] = v65[16];
          v69 = *(int *)(v66 + 24);
          v117 = &v65[v69];
          v118 = &v64[v69];
          v119 = v64;
          v70 = sub_1BCAB4E54();
          v135 = a1;
          v71 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v70 - 8) + 32);
          v71(v118, v117, v70);
          v71(&v119[*(int *)(v66 + 28)], &v65[*(int *)(v66 + 28)], v70);
          a1 = v135;
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v67 + 56))(v119, 0, 1, v66);
        }
        v60 = v51;
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v132 + 56))(v51, 0, 1, v139);
        v61 = v123;
      }
      v72 = *(int *)(v61 + 20);
      v73 = &v60[v72];
      v74 = &v58[v72];
      v75 = (int *)type metadata accessor for SignificantChangeEngine.Changepoint(0);
      v76 = *((_QWORD *)v75 - 1);
      if ((*(unsigned int (**)(char *, uint64_t, int *))(v76 + 48))(v74, 1, v75))
      {
        sub_1BC9DBE2C(0);
        memcpy(v73, v74, *(_QWORD *)(*(_QWORD *)(v77 - 8) + 64));
      }
      else
      {
        v78 = sub_1BCAB4E54();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v78 - 8) + 32))(v73, v74, v78);
        *(_QWORD *)&v73[v75[5]] = *(_QWORD *)&v74[v75[5]];
        *(_QWORD *)&v73[v75[6]] = *(_QWORD *)&v74[v75[6]];
        *(_QWORD *)&v73[v75[7]] = *(_QWORD *)&v74[v75[7]];
        *(_QWORD *)&v73[v75[8]] = *(_QWORD *)&v74[v75[8]];
        *(_QWORD *)&v73[v75[9]] = *(_QWORD *)&v74[v75[9]];
        *(_QWORD *)&v73[v75[10]] = *(_QWORD *)&v74[v75[10]];
        v79 = v75[11];
        v80 = &v73[v79];
        v81 = &v74[v79];
        v82 = *((_OWORD *)v81 + 1);
        *(_OWORD *)v80 = *(_OWORD *)v81;
        *((_OWORD *)v80 + 1) = v82;
        *((_QWORD *)v80 + 4) = *((_QWORD *)v81 + 4);
        v83 = v75[12];
        v84 = &v73[v83];
        v85 = &v74[v83];
        v86 = *((_OWORD *)v85 + 1);
        *(_OWORD *)v84 = *(_OWORD *)v85;
        *((_OWORD *)v84 + 1) = v86;
        *((_QWORD *)v84 + 4) = *((_QWORD *)v85 + 4);
        (*(void (**)(char *, _QWORD, uint64_t, int *))(v76 + 56))(v73, 0, 1, v75);
      }
      v87 = *(int *)(v123 + 24);
      v88 = &v51[v87];
      v89 = &v58[v87];
      v90 = sub_1BCAB4E54();
      v91 = *(_QWORD *)(v90 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v91 + 48))(v89, 1, v90))
      {
        sub_1BCA7F46C(0);
        memcpy(v88, v89, *(_QWORD *)(*(_QWORD *)(v92 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v91 + 32))(v88, v89, v90);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v91 + 56))(v88, 0, 1, v90);
      }
      v8 = v142;
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v120 + 56))(v51, 0, 1, v123);
    }
    v93 = *(int *)(v57 + 24);
    v94 = &v56[v93];
    v95 = &v45[v93];
    v96 = type metadata accessor for SignificantChangeEngine.State.FrequencyShift(0);
    v97 = *(_QWORD *)(v96 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v97 + 48))(v95, 1, v96))
    {
      sub_1BCA7F41C(0);
      memcpy(v94, v95, *(_QWORD *)(*(_QWORD *)(v98 - 8) + 64));
    }
    else
    {
      v99 = v57;
      v100 = sub_1BCAB4E54();
      v101 = *(_QWORD *)(v100 - 8);
      v124 = v101;
      v126 = v100;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v101 + 48))(v95, 1, v100))
      {
        sub_1BCA7F46C(0);
        memcpy(v94, v95, *(_QWORD *)(*(_QWORD *)(v102 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v101 + 32))(v94, v95, v100);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v101 + 56))(v94, 0, 1, v100);
      }
      v94[*(int *)(v96 + 20)] = v95[*(int *)(v96 + 20)];
      v103 = *(int *)(v96 + 24);
      v104 = &v94[v103];
      v105 = &v95[v103];
      v57 = v99;
      if (v8(v105, 1, v139))
      {
        sub_1BCA7EFBC(0);
        memcpy(v104, v105, *(_QWORD *)(*(_QWORD *)(v106 - 8) + 64));
        v56 = v129;
      }
      else
      {
        v122(v104, v105, v121);
        v107 = (int *)type metadata accessor for SignificantChange.Period(0);
        *(_QWORD *)&v104[v107[5]] = *(_QWORD *)&v105[v107[5]];
        *(_QWORD *)&v104[v107[6]] = *(_QWORD *)&v105[v107[6]];
        v104[v107[7]] = v105[v107[7]];
        *(_QWORD *)&v104[*(int *)(v139 + 20)] = *(_QWORD *)&v105[*(int *)(v139 + 20)];
        v108 = *(int *)(v139 + 24);
        v109 = &v104[v108];
        v110 = &v105[v108];
        v111 = type metadata accessor for SignificantChange.Notification(0);
        v143 = *(_QWORD *)(v111 - 8);
        v112 = v110;
        v113 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v143 + 48))(v110, 1, v111);
        v56 = v129;
        if (v113)
        {
          sub_1BCA8025C(0);
          memcpy(v109, v112, *(_QWORD *)(*(_QWORD *)(v114 - 8) + 64));
        }
        else
        {
          *(_OWORD *)v109 = *(_OWORD *)v112;
          v109[16] = v112[16];
          v136 = a1;
          v115 = *(void (**)(char *, char *, uint64_t))(v124 + 32);
          v115(&v109[*(int *)(v111 + 24)], &v112[*(int *)(v111 + 24)], v126);
          v115(&v109[*(int *)(v111 + 28)], &v112[*(int *)(v111 + 28)], v126);
          a1 = v136;
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v143 + 56))(v109, 0, 1, v111);
        }
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v132 + 56))(v104, 0, 1, v139);
      }
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v97 + 56))(v94, 0, 1, v96);
    }
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v127 + 56))(v56, 0, 1, v57);
  }
  return a1;
}

uint64_t assignWithTake for SignificantChangeEngine.Output(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int (*v8)(uint64_t, uint64_t, uint64_t);
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  _BYTE *v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  size_t v20;
  void *v21;
  const void *v22;
  uint64_t v23;
  int *v24;
  uint64_t v25;
  _BYTE *v26;
  _BYTE *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(_BYTE *, uint64_t, uint64_t);
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE *v35;
  _BYTE *v36;
  uint64_t v37;
  void (*v38)(_BYTE *, _BYTE *, uint64_t);
  _BYTE *v39;
  _BYTE *v40;
  uint64_t v41;
  uint64_t v42;
  _BYTE *v43;
  _BYTE *v44;
  unsigned int v45;
  unsigned int v46;
  uint64_t v47;
  int *v48;
  uint64_t v49;
  _BYTE *v50;
  _BYTE *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t (*v61)(_BYTE *, uint64_t, uint64_t);
  int v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  _BYTE *v66;
  _BYTE *v67;
  uint64_t v68;
  void (*v69)(_BYTE *, _BYTE *, uint64_t);
  _BYTE *v70;
  _BYTE *v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  int *v76;
  uint64_t v77;
  uint64_t (*v78)(char *, uint64_t, int *);
  int v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  uint64_t (*v96)(char *, uint64_t, uint64_t);
  char *v97;
  int v98;
  uint64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _BYTE *v109;
  _BYTE *v110;
  uint64_t v111;
  void (*v112)(_BYTE *, _BYTE *, uint64_t);
  _BYTE *v113;
  _BYTE *v114;
  uint64_t v115;
  uint64_t v116;
  _BYTE *v117;
  _BYTE *v118;
  uint64_t v119;
  void (*v120)(_BYTE *, _BYTE *, uint64_t);
  _BYTE *v121;
  uint64_t v122;
  int *v123;
  uint64_t v124;
  char *v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  _BYTE *v132;
  uint64_t v133;
  _BYTE *v134;
  uint64_t v135;
  void (*v136)(_BYTE *, _BYTE *, uint64_t);
  _BYTE *v137;
  _BYTE *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  _BYTE *v142;
  uint64_t v143;
  _BYTE *v144;
  uint64_t v145;
  void (*v146)(_BYTE *, _BYTE *, uint64_t);
  _BYTE *v147;
  uint64_t v148;
  char *v149;
  unsigned int v150;
  char *v151;
  unsigned int v152;
  uint64_t v153;
  int *v154;
  uint64_t v155;
  char *v156;
  char *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  int *v161;
  uint64_t v162;
  char *v163;
  char *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  void (*v169)(char *, char *, uint64_t);
  uint64_t v170;
  char *v171;
  char *v172;
  int *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  char *v178;
  char *v179;
  __int128 v180;
  uint64_t v181;
  char *v182;
  char *v183;
  __int128 v184;
  uint64_t v185;
  char *v186;
  char *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  char *v192;
  char *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  char *v201;
  char *v202;
  uint64_t v203;
  int *v204;
  uint64_t v205;
  char *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  void (*v210)(char *, _QWORD, uint64_t, int *);
  char *v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  void (*v215)(char *, char *, uint64_t);
  uint64_t v216;
  char *v217;
  char *v218;
  int *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  char *v224;
  char *v225;
  __int128 v226;
  uint64_t v227;
  char *v228;
  char *v229;
  __int128 v230;
  uint64_t v231;
  char *v232;
  char *v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  int *v237;
  uint64_t v238;
  char *v239;
  char *v240;
  uint64_t v241;
  uint64_t (*v242)(char *, uint64_t, uint64_t);
  int v243;
  int v244;
  uint64_t v245;
  char *v246;
  char *v247;
  uint64_t v248;
  void (*v249)(char *, char *, uint64_t);
  uint64_t v250;
  uint64_t v251;
  char *v252;
  char *v253;
  uint64_t v254;
  void (*v255)(char *, char *, uint64_t);
  char *v256;
  uint64_t v257;
  uint64_t v258;
  char *v259;
  char *v260;
  int *v261;
  uint64_t v262;
  uint64_t (*v263)(char *, uint64_t, int *);
  int v264;
  int v265;
  uint64_t v266;
  uint64_t v267;
  char *v268;
  char *v269;
  __int128 v270;
  uint64_t v271;
  char *v272;
  char *v273;
  __int128 v274;
  uint64_t v275;
  uint64_t v276;
  char *v277;
  char *v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t (*v281)(char *, uint64_t, uint64_t);
  int v282;
  int v283;
  uint64_t v284;
  uint64_t v285;
  char *v286;
  char *v287;
  uint64_t v288;
  uint64_t (*v289)(char *, uint64_t, int *);
  int v290;
  int v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  size_t v296;
  void *v297;
  char *v298;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t (*v303)(char *, uint64_t, uint64_t);
  int v304;
  int v305;
  uint64_t v306;
  uint64_t v307;
  char *v308;
  char *v309;
  uint64_t v310;
  int *v311;
  uint64_t v312;
  char *v313;
  char *v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  char *v321;
  unsigned int v322;
  unsigned int v323;
  int *v324;
  uint64_t v325;
  _BYTE *v326;
  char *v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  void (*v332)(char *, char *, uint64_t);
  uint64_t v333;
  uint64_t v334;
  char *v335;
  char *v336;
  __int128 v337;
  uint64_t v338;
  char *v339;
  char *v340;
  __int128 v341;
  int *v342;
  uint64_t v343;
  uint64_t v344;
  char *v345;
  uint64_t v346;
  uint64_t (*v347)(uint64_t, uint64_t, int *);
  int v348;
  int v349;
  void (*v350)(uint64_t, char *, uint64_t);
  void (*v351)(_BYTE *, char *, uint64_t);
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  char *v355;
  char *v356;
  uint64_t v357;
  void (*v358)(char *, char *, uint64_t);
  uint64_t v359;
  uint64_t v360;
  void (*v361)(uint64_t, char *, uint64_t);
  char *v362;
  uint64_t v363;
  char *v364;
  uint64_t v365;
  void (*v366)(char *, char *);
  char *v367;
  _QWORD *v368;
  char *v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  char *v374;
  uint64_t v375;
  void (*v376)(char *, char *);
  uint64_t v377;
  void *__src;
  char *__srca;
  void (*__srcc)(char *, char *, uint64_t);
  char *__srcb;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  char *v404;
  char *v405;
  char *v406;
  unsigned int (*v407)(uint64_t, uint64_t, uint64_t);
  char *v408;

  v6 = type metadata accessor for SignificantChange(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8((uint64_t)a2, 1, v6);
  v407 = v8;
  if (v9)
  {
    if (!v10)
    {
      v400 = a3;
      v11 = sub_1BCAB4BD8();
      (*(void (**)(uint64_t, _BYTE *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(a1, a2, v11);
      v12 = (int *)type metadata accessor for SignificantChange.Period(0);
      *(_QWORD *)(a1 + v12[5]) = *(_QWORD *)&a2[v12[5]];
      *(_QWORD *)(a1 + v12[6]) = *(_QWORD *)&a2[v12[6]];
      *(_BYTE *)(a1 + v12[7]) = a2[v12[7]];
      *(_QWORD *)(a1 + *(int *)(v6 + 20)) = *(_QWORD *)&a2[*(int *)(v6 + 20)];
      v13 = *(int *)(v6 + 24);
      v14 = (_BYTE *)(a1 + v13);
      v15 = &a2[v13];
      v16 = type metadata accessor for SignificantChange.Notification(0);
      v17 = *(_QWORD *)(v16 - 8);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
      {
        sub_1BCA8025C(0);
        memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
      }
      else
      {
        *(_OWORD *)v14 = *(_OWORD *)v15;
        v14[16] = v15[16];
        v34 = *(int *)(v16 + 24);
        v35 = &v14[v34];
        v382 = v7;
        v36 = &v15[v34];
        v392 = v6;
        v37 = sub_1BCAB4E54();
        v38 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v37 - 8) + 32);
        v39 = v35;
        v8 = v407;
        v40 = v36;
        v7 = v382;
        v38(v39, v40, v37);
        v41 = v37;
        v6 = v392;
        v38(&v14[*(int *)(v16 + 28)], &v15[*(int *)(v16 + 28)], v41);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
      }
      a3 = v400;
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_15;
    }
    goto LABEL_7;
  }
  if (v10)
  {
    sub_1BC997208(a1, type metadata accessor for SignificantChange);
LABEL_7:
    sub_1BCA7EFBC(0);
    v20 = *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64);
    v21 = (void *)a1;
    v22 = a2;
    goto LABEL_8;
  }
  v401 = a3;
  v23 = sub_1BCAB4BD8();
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(*(_QWORD *)(v23 - 8) + 40))(a1, a2, v23);
  v24 = (int *)type metadata accessor for SignificantChange.Period(0);
  *(_QWORD *)(a1 + v24[5]) = *(_QWORD *)&a2[v24[5]];
  *(_QWORD *)(a1 + v24[6]) = *(_QWORD *)&a2[v24[6]];
  *(_BYTE *)(a1 + v24[7]) = a2[v24[7]];
  *(_QWORD *)(a1 + *(int *)(v6 + 20)) = *(_QWORD *)&a2[*(int *)(v6 + 20)];
  swift_bridgeObjectRelease();
  v25 = *(int *)(v6 + 24);
  v26 = (_BYTE *)(a1 + v25);
  v27 = &a2[v25];
  v28 = type metadata accessor for SignificantChange.Notification(0);
  v29 = *(_QWORD *)(v28 - 8);
  v30 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v29 + 48);
  v31 = v30(v26, 1, v28);
  v32 = v30(v27, 1, v28);
  if (!v31)
  {
    v8 = v407;
    a3 = v401;
    if (!v32)
    {
      v130 = *((_QWORD *)v27 + 1);
      *(_QWORD *)v26 = *(_QWORD *)v27;
      *((_QWORD *)v26 + 1) = v130;
      swift_bridgeObjectRelease();
      v26[16] = v27[16];
      v131 = *(int *)(v28 + 24);
      v132 = &v26[v131];
      v133 = v7;
      v134 = &v27[v131];
      v398 = v6;
      v135 = sub_1BCAB4E54();
      v136 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v135 - 8) + 40);
      v137 = v132;
      v8 = v407;
      v138 = v134;
      v7 = v133;
      v136(v137, v138, v135);
      v139 = v135;
      v6 = v398;
      v136(&v26[*(int *)(v28 + 28)], &v27[*(int *)(v28 + 28)], v139);
      a3 = v401;
      goto LABEL_15;
    }
    sub_1BC997208((uint64_t)v26, type metadata accessor for SignificantChange.Notification);
    sub_1BCA8025C(0);
    v20 = *(_QWORD *)(*(_QWORD *)(v106 - 8) + 64);
    v21 = v26;
    v22 = v27;
LABEL_8:
    memcpy(v21, v22, v20);
    goto LABEL_15;
  }
  v8 = v407;
  if (v32)
  {
    sub_1BCA8025C(0);
    memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
  }
  else
  {
    *(_OWORD *)v26 = *(_OWORD *)v27;
    v26[16] = v27[16];
    v108 = *(int *)(v28 + 24);
    v109 = &v26[v108];
    v386 = v7;
    v110 = &v27[v108];
    v396 = v6;
    v111 = sub_1BCAB4E54();
    v112 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v111 - 8) + 32);
    v113 = v109;
    v8 = v407;
    v114 = v110;
    v7 = v386;
    v112(v113, v114, v111);
    v115 = v111;
    v6 = v396;
    v112(&v26[*(int *)(v28 + 28)], &v27[*(int *)(v28 + 28)], v115);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
  }
  a3 = v401;
LABEL_15:
  v42 = *(int *)(a3 + 20);
  v43 = (_BYTE *)(a1 + v42);
  v44 = &a2[v42];
  v45 = v8(a1 + v42, 1, v6);
  v46 = v8((uint64_t)v44, 1, v6);
  if (v45)
  {
    if (!v46)
    {
      v47 = sub_1BCAB4BD8();
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v47 - 8) + 32))(v43, v44, v47);
      v48 = (int *)type metadata accessor for SignificantChange.Period(0);
      *(_QWORD *)&v43[v48[5]] = *(_QWORD *)&v44[v48[5]];
      *(_QWORD *)&v43[v48[6]] = *(_QWORD *)&v44[v48[6]];
      v43[v48[7]] = v44[v48[7]];
      *(_QWORD *)&v43[*(int *)(v6 + 20)] = *(_QWORD *)&v44[*(int *)(v6 + 20)];
      v49 = *(int *)(v6 + 24);
      v50 = &v43[v49];
      v51 = &v44[v49];
      v52 = type metadata accessor for SignificantChange.Notification(0);
      v53 = *(_QWORD *)(v52 - 8);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v53 + 48))(v51, 1, v52))
      {
        sub_1BCA8025C(0);
        memcpy(v50, v51, *(_QWORD *)(*(_QWORD *)(v54 - 8) + 64));
      }
      else
      {
        *(_OWORD *)v50 = *(_OWORD *)v51;
        v50[16] = v51[16];
        v65 = *(int *)(v52 + 24);
        v383 = v7;
        v66 = &v50[v65];
        v393 = v6;
        v67 = &v51[v65];
        v403 = a3;
        v68 = sub_1BCAB4E54();
        v390 = a1;
        v69 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v68 - 8) + 32);
        v70 = v66;
        v7 = v383;
        v71 = v67;
        v6 = v393;
        v69(v70, v71, v68);
        v72 = v68;
        a3 = v403;
        v69(&v50[*(int *)(v52 + 28)], &v51[*(int *)(v52 + 28)], v72);
        a1 = v390;
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v53 + 56))(v50, 0, 1, v52);
      }
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v43, 0, 1, v6);
      goto LABEL_29;
    }
    goto LABEL_21;
  }
  if (v46)
  {
    sub_1BC997208((uint64_t)v43, type metadata accessor for SignificantChange);
LABEL_21:
    sub_1BCA7EFBC(0);
    goto LABEL_22;
  }
  v402 = a3;
  v56 = sub_1BCAB4BD8();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v56 - 8) + 40))(v43, v44, v56);
  v57 = (int *)type metadata accessor for SignificantChange.Period(0);
  *(_QWORD *)&v43[v57[5]] = *(_QWORD *)&v44[v57[5]];
  *(_QWORD *)&v43[v57[6]] = *(_QWORD *)&v44[v57[6]];
  v43[v57[7]] = v44[v57[7]];
  *(_QWORD *)&v43[*(int *)(v6 + 20)] = *(_QWORD *)&v44[*(int *)(v6 + 20)];
  swift_bridgeObjectRelease();
  v58 = *(int *)(v6 + 24);
  v43 += v58;
  v44 += v58;
  v59 = type metadata accessor for SignificantChange.Notification(0);
  v60 = *(_QWORD *)(v59 - 8);
  v61 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v60 + 48);
  v62 = v61(v43, 1, v59);
  v63 = v61(v44, 1, v59);
  if (!v62)
  {
    a3 = v402;
    if (!v63)
    {
      v140 = *((_QWORD *)v44 + 1);
      *(_QWORD *)v43 = *(_QWORD *)v44;
      *((_QWORD *)v43 + 1) = v140;
      swift_bridgeObjectRelease();
      v43[16] = v44[16];
      v141 = *(int *)(v59 + 24);
      v142 = &v43[v141];
      v143 = v7;
      v144 = &v44[v141];
      v399 = v6;
      v145 = sub_1BCAB4E54();
      v146 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v145 - 8) + 40);
      v147 = v144;
      v7 = v143;
      v146(v142, v147, v145);
      v148 = v145;
      v6 = v399;
      v146(&v43[*(int *)(v59 + 28)], &v44[*(int *)(v59 + 28)], v148);
      a3 = v402;
      goto LABEL_29;
    }
    sub_1BC997208((uint64_t)v43, type metadata accessor for SignificantChange.Notification);
    sub_1BCA8025C(0);
LABEL_22:
    memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v55 - 8) + 64));
    goto LABEL_29;
  }
  if (v63)
  {
    sub_1BCA8025C(0);
    memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v64 - 8) + 64));
  }
  else
  {
    *(_OWORD *)v43 = *(_OWORD *)v44;
    v43[16] = v44[16];
    v116 = *(int *)(v59 + 24);
    v117 = &v43[v116];
    v387 = v7;
    v118 = &v44[v116];
    v397 = v6;
    v119 = sub_1BCAB4E54();
    v120 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v119 - 8) + 32);
    v121 = v118;
    v7 = v387;
    v120(v117, v121, v119);
    v122 = v119;
    v6 = v397;
    v120(&v43[*(int *)(v59 + 28)], &v44[*(int *)(v59 + 28)], v122);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v60 + 56))(v43, 0, 1, v59);
  }
  a3 = v402;
LABEL_29:
  v73 = *(int *)(a3 + 24);
  v74 = (char *)(a1 + v73);
  v75 = &a2[v73];
  v76 = (int *)type metadata accessor for SignificantChangeEngine.State(0);
  v77 = *((_QWORD *)v76 - 1);
  v78 = *(uint64_t (**)(char *, uint64_t, int *))(v77 + 48);
  v79 = v78(v74, 1, v76);
  v80 = v78(v75, 1, v76);
  if (!v79)
  {
    if (v80)
    {
      sub_1BC997208((uint64_t)v74, type metadata accessor for SignificantChangeEngine.State);
      goto LABEL_35;
    }
    v89 = v75;
    v90 = v7;
    v91 = sub_1BCAB4BD8();
    v370 = *(_QWORD *)(v91 - 8);
    v372 = v91;
    v366 = *(void (**)(char *, char *))(v370 + 40);
    v366(v74, v89);
    v92 = v76[5];
    v93 = &v74[v92];
    v374 = v89;
    v94 = &v89[v92];
    v95 = type metadata accessor for SignificantChangeEngine.State.MeanShift(0);
    v368 = *(_QWORD **)(v95 - 8);
    v96 = (uint64_t (*)(char *, uint64_t, uint64_t))v368[6];
    v97 = v93;
    LODWORD(v93) = v96(v93, 1, v95);
    v377 = v95;
    __srca = v94;
    v98 = v96(v94, 1, v95);
    v391 = a1;
    v395 = v6;
    v99 = v90;
    if ((_DWORD)v93)
    {
      if (!v98)
      {
        v100 = v97;
        v101 = v374;
        v385 = v99;
        v404 = v74;
        if (v407((uint64_t)__srca, 1, v6))
        {
          sub_1BCA7EFBC(0);
          memcpy(v97, __srca, *(_QWORD *)(*(_QWORD *)(v102 - 8) + 64));
          v103 = v377;
          v104 = __srca;
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v370 + 32))(v97, __srca, v372);
          v161 = (int *)type metadata accessor for SignificantChange.Period(0);
          *(_QWORD *)&v97[v161[5]] = *(_QWORD *)&__srca[v161[5]];
          *(_QWORD *)&v97[v161[6]] = *(_QWORD *)&__srca[v161[6]];
          v97[v161[7]] = __srca[v161[7]];
          *(_QWORD *)&v97[*(int *)(v6 + 20)] = *(_QWORD *)&__srca[*(int *)(v6 + 20)];
          v162 = *(int *)(v6 + 24);
          v163 = &v97[v162];
          v164 = &__srca[v162];
          v165 = type metadata accessor for SignificantChange.Notification(0);
          v166 = *(_QWORD *)(v165 - 8);
          v104 = __srca;
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v166 + 48))(v164, 1, v165))
          {
            sub_1BCA8025C(0);
            memcpy(v163, v164, *(_QWORD *)(*(_QWORD *)(v167 - 8) + 64));
          }
          else
          {
            *(_OWORD *)v163 = *(_OWORD *)v164;
            v163[16] = v164[16];
            v213 = *(int *)(v165 + 24);
            v362 = &v164[v213];
            v364 = &v163[v213];
            v214 = sub_1BCAB4E54();
            v215 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v214 - 8) + 32);
            v215(v364, v362, v214);
            v215(&v163[*(int *)(v165 + 28)], &v164[*(int *)(v165 + 28)], v214);
            v6 = v395;
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v166 + 56))(v163, 0, 1, v165);
          }
          v103 = v377;
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v385 + 56))(v100, 0, 1, v6);
        }
        v216 = *(int *)(v103 + 20);
        v217 = &v100[v216];
        v218 = &v104[v216];
        v219 = (int *)type metadata accessor for SignificantChangeEngine.Changepoint(0);
        v220 = *((_QWORD *)v219 - 1);
        if ((*(unsigned int (**)(char *, uint64_t, int *))(v220 + 48))(v218, 1, v219))
        {
          sub_1BC9DBE2C(0);
          memcpy(v217, v218, *(_QWORD *)(*(_QWORD *)(v221 - 8) + 64));
        }
        else
        {
          v222 = sub_1BCAB4E54();
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v222 - 8) + 32))(v217, v218, v222);
          *(_QWORD *)&v217[v219[5]] = *(_QWORD *)&v218[v219[5]];
          *(_QWORD *)&v217[v219[6]] = *(_QWORD *)&v218[v219[6]];
          *(_QWORD *)&v217[v219[7]] = *(_QWORD *)&v218[v219[7]];
          *(_QWORD *)&v217[v219[8]] = *(_QWORD *)&v218[v219[8]];
          *(_QWORD *)&v217[v219[9]] = *(_QWORD *)&v218[v219[9]];
          *(_QWORD *)&v217[v219[10]] = *(_QWORD *)&v218[v219[10]];
          v223 = v219[11];
          v224 = &v217[v223];
          v225 = &v218[v223];
          v226 = *((_OWORD *)v225 + 1);
          *(_OWORD *)v224 = *(_OWORD *)v225;
          *((_OWORD *)v224 + 1) = v226;
          *((_QWORD *)v224 + 4) = *((_QWORD *)v225 + 4);
          v227 = v219[12];
          v228 = &v217[v227];
          v229 = &v218[v227];
          v230 = *((_OWORD *)v229 + 1);
          *(_OWORD *)v228 = *(_OWORD *)v229;
          *((_OWORD *)v228 + 1) = v230;
          *((_QWORD *)v228 + 4) = *((_QWORD *)v229 + 4);
          (*(void (**)(char *, _QWORD, uint64_t, int *))(v220 + 56))(v217, 0, 1, v219);
        }
        v231 = *(int *)(v103 + 24);
        v232 = &v100[v231];
        v233 = &v104[v231];
        v234 = sub_1BCAB4E54();
        v235 = *(_QWORD *)(v234 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v235 + 48))(v233, 1, v234))
        {
          sub_1BCA7F46C(0);
          memcpy(v232, v233, *(_QWORD *)(*(_QWORD *)(v236 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v235 + 32))(v232, v233, v234);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v235 + 56))(v232, 0, 1, v234);
        }
        v99 = v385;
        ((void (*)(char *, _QWORD, uint64_t, uint64_t))v368[7])(v100, 0, 1, v103);
        goto LABEL_117;
      }
LABEL_48:
      sub_1BCA7F3E0(0);
      memcpy(v97, __srca, *(_QWORD *)(*(_QWORD *)(v107 - 8) + 64));
      v101 = v374;
      goto LABEL_118;
    }
    if (v98)
    {
      sub_1BC997208((uint64_t)v97, type metadata accessor for SignificantChangeEngine.State.MeanShift);
      goto LABEL_48;
    }
    v149 = v97;
    v150 = v407((uint64_t)v97, 1, v6);
    v151 = __srca;
    v152 = v407((uint64_t)__srca, 1, v6);
    v404 = v74;
    if (v150)
    {
      v153 = v377;
      if (!v152)
      {
        v388 = v90;
        (*(void (**)(char *, char *, uint64_t))(v370 + 32))(v149, __srca, v372);
        v154 = (int *)type metadata accessor for SignificantChange.Period(0);
        *(_QWORD *)&v149[v154[5]] = *(_QWORD *)&__srca[v154[5]];
        *(_QWORD *)&v149[v154[6]] = *(_QWORD *)&__srca[v154[6]];
        v149[v154[7]] = __srca[v154[7]];
        *(_QWORD *)&v149[*(int *)(v6 + 20)] = *(_QWORD *)&__srca[*(int *)(v6 + 20)];
        v155 = *(int *)(v6 + 24);
        v156 = &v149[v155];
        v157 = &__srca[v155];
        v158 = type metadata accessor for SignificantChange.Notification(0);
        v159 = *(_QWORD *)(v158 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v159 + 48))(v157, 1, v158))
        {
          sub_1BCA8025C(0);
          memcpy(v156, v157, *(_QWORD *)(*(_QWORD *)(v160 - 8) + 64));
        }
        else
        {
          *(_OWORD *)v156 = *(_OWORD *)v157;
          v156[16] = v157[16];
          v251 = *(int *)(v158 + 24);
          v252 = &v156[v251];
          v253 = &v157[v251];
          v254 = sub_1BCAB4E54();
          v255 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v254 - 8) + 32);
          v256 = v253;
          v6 = v395;
          v255(v252, v256, v254);
          v255(&v156[*(int *)(v158 + 28)], &v157[*(int *)(v158 + 28)], v254);
          v151 = __srca;
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v159 + 56))(v156, 0, 1, v158);
        }
        v153 = v377;
        v99 = v388;
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v388 + 56))(v149, 0, 1, v6);
LABEL_105:
        v258 = *(int *)(v153 + 20);
        __srcb = v149;
        v259 = &v149[v258];
        v260 = &v151[v258];
        v261 = (int *)type metadata accessor for SignificantChangeEngine.Changepoint(0);
        v262 = *((_QWORD *)v261 - 1);
        v263 = *(uint64_t (**)(char *, uint64_t, int *))(v262 + 48);
        v264 = v263(v259, 1, v261);
        v265 = v263(v260, 1, v261);
        if (v264)
        {
          if (!v265)
          {
            v266 = sub_1BCAB4E54();
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v266 - 8) + 32))(v259, v260, v266);
            *(_QWORD *)&v259[v261[5]] = *(_QWORD *)&v260[v261[5]];
            *(_QWORD *)&v259[v261[6]] = *(_QWORD *)&v260[v261[6]];
            *(_QWORD *)&v259[v261[7]] = *(_QWORD *)&v260[v261[7]];
            *(_QWORD *)&v259[v261[8]] = *(_QWORD *)&v260[v261[8]];
            *(_QWORD *)&v259[v261[9]] = *(_QWORD *)&v260[v261[9]];
            *(_QWORD *)&v259[v261[10]] = *(_QWORD *)&v260[v261[10]];
            v267 = v261[11];
            v268 = &v259[v267];
            v269 = &v260[v267];
            v270 = *((_OWORD *)v269 + 1);
            *(_OWORD *)v268 = *(_OWORD *)v269;
            *((_OWORD *)v268 + 1) = v270;
            *((_QWORD *)v268 + 4) = *((_QWORD *)v269 + 4);
            v271 = v261[12];
            v272 = &v259[v271];
            v273 = &v260[v271];
            v274 = *((_OWORD *)v273 + 1);
            *(_OWORD *)v272 = *(_OWORD *)v273;
            *((_OWORD *)v272 + 1) = v274;
            *((_QWORD *)v272 + 4) = *((_QWORD *)v273 + 4);
            (*(void (**)(char *, _QWORD, uint64_t, int *))(v262 + 56))(v259, 0, 1, v261);
            goto LABEL_111;
          }
        }
        else
        {
          if (!v265)
          {
            v333 = sub_1BCAB4E54();
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v333 - 8) + 40))(v259, v260, v333);
            *(_QWORD *)&v259[v261[5]] = *(_QWORD *)&v260[v261[5]];
            *(_QWORD *)&v259[v261[6]] = *(_QWORD *)&v260[v261[6]];
            *(_QWORD *)&v259[v261[7]] = *(_QWORD *)&v260[v261[7]];
            *(_QWORD *)&v259[v261[8]] = *(_QWORD *)&v260[v261[8]];
            *(_QWORD *)&v259[v261[9]] = *(_QWORD *)&v260[v261[9]];
            *(_QWORD *)&v259[v261[10]] = *(_QWORD *)&v260[v261[10]];
            v334 = v261[11];
            v335 = &v259[v334];
            v336 = &v260[v334];
            v337 = *((_OWORD *)v336 + 1);
            *(_OWORD *)v335 = *(_OWORD *)v336;
            *((_OWORD *)v335 + 1) = v337;
            *((_QWORD *)v335 + 4) = *((_QWORD *)v336 + 4);
            v338 = v261[12];
            v339 = &v259[v338];
            v340 = &v260[v338];
            v341 = *((_OWORD *)v340 + 1);
            *(_OWORD *)v339 = *(_OWORD *)v340;
            *((_OWORD *)v339 + 1) = v341;
            *((_QWORD *)v339 + 4) = *((_QWORD *)v340 + 4);
LABEL_111:
            v101 = v374;
            v276 = *(int *)(v377 + 24);
            v277 = &__srcb[v276];
            v278 = &v151[v276];
            v279 = sub_1BCAB4E54();
            v280 = *(_QWORD *)(v279 - 8);
            v281 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v280 + 48);
            v282 = v281(v277, 1, v279);
            v283 = v281(v278, 1, v279);
            if (v282)
            {
              if (!v283)
              {
                (*(void (**)(char *, char *, uint64_t))(v280 + 32))(v277, v278, v279);
                (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v280 + 56))(v277, 0, 1, v279);
LABEL_117:
                v74 = v404;
LABEL_118:
                v285 = v76[6];
                v286 = &v74[v285];
                v287 = &v101[v285];
                v76 = (int *)type metadata accessor for SignificantChangeEngine.State.FrequencyShift(0);
                v288 = *((_QWORD *)v76 - 1);
                v289 = *(uint64_t (**)(char *, uint64_t, int *))(v288 + 48);
                v290 = v289(v286, 1, v76);
                v291 = v289(v287, 1, v76);
                if (v290)
                {
                  if (!v291)
                  {
                    v292 = sub_1BCAB4E54();
                    v293 = *(_QWORD *)(v292 - 8);
                    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v293 + 48))(v287, 1, v292))
                    {
                      sub_1BCA7F46C(0);
                      memcpy(v286, v287, *(_QWORD *)(*(_QWORD *)(v294 - 8) + 64));
                    }
                    else
                    {
                      (*(void (**)(char *, char *, uint64_t))(v293 + 32))(v286, v287, v292);
                      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v293 + 56))(v286, 0, 1, v292);
                    }
                    v286[v76[5]] = v287[v76[5]];
                    v307 = v76[6];
                    v308 = &v286[v307];
                    v309 = &v287[v307];
                    if (v407((uint64_t)&v287[v307], 1, v395))
                    {
                      sub_1BCA7EFBC(0);
                      memcpy(v308, v309, *(_QWORD *)(*(_QWORD *)(v310 - 8) + 64));
                    }
                    else
                    {
                      v389 = v99;
                      (*(void (**)(char *, char *, uint64_t))(v370 + 32))(v308, v309, v372);
                      v311 = (int *)type metadata accessor for SignificantChange.Period(0);
                      *(_QWORD *)&v308[v311[5]] = *(_QWORD *)&v309[v311[5]];
                      *(_QWORD *)&v308[v311[6]] = *(_QWORD *)&v309[v311[6]];
                      v308[v311[7]] = v309[v311[7]];
                      *(_QWORD *)&v308[*(int *)(v395 + 20)] = *(_QWORD *)&v309[*(int *)(v395 + 20)];
                      v312 = *(int *)(v395 + 24);
                      v313 = &v308[v312];
                      v314 = &v309[v312];
                      v315 = type metadata accessor for SignificantChange.Notification(0);
                      v316 = *(_QWORD *)(v315 - 8);
                      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v316 + 48))(v314, 1, v315))
                      {
                        sub_1BCA8025C(0);
                        memcpy(v313, v314, *(_QWORD *)(*(_QWORD *)(v317 - 8) + 64));
                      }
                      else
                      {
                        *(_OWORD *)v313 = *(_OWORD *)v314;
                        v313[16] = v314[16];
                        v332 = *(void (**)(char *, char *, uint64_t))(v293 + 32);
                        v332(&v313[*(int *)(v315 + 24)], &v314[*(int *)(v315 + 24)], v292);
                        v332(&v313[*(int *)(v315 + 28)], &v314[*(int *)(v315 + 28)], v292);
                        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v316 + 56))(v313, 0, 1, v315);
                      }
                      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v389 + 56))(v308, 0, 1, v395);
                    }
                    v210 = *(void (**)(char *, _QWORD, uint64_t, int *))(v288 + 56);
                    v211 = v286;
                    goto LABEL_83;
                  }
                  goto LABEL_124;
                }
                if (v291)
                {
                  sub_1BC997208((uint64_t)v286, type metadata accessor for SignificantChangeEngine.State.FrequencyShift);
LABEL_124:
                  sub_1BCA7F41C(0);
                  v296 = *(_QWORD *)(*(_QWORD *)(v295 - 8) + 64);
                  v297 = v286;
                  v298 = v287;
                  goto LABEL_125;
                }
                v300 = v99;
                v301 = sub_1BCAB4E54();
                v302 = *(_QWORD *)(v301 - 8);
                v303 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v302 + 48);
                v304 = v303(v286, 1, v301);
                v305 = v303(v287, 1, v301);
                if (v304)
                {
                  v306 = v395;
                  if (!v305)
                  {
                    (*(void (**)(char *, char *, uint64_t))(v302 + 32))(v286, v287, v301);
                    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v302 + 56))(v286, 0, 1, v301);
                    goto LABEL_139;
                  }
                }
                else
                {
                  v306 = v395;
                  if (!v305)
                  {
                    (*(void (**)(char *, char *, uint64_t))(v302 + 40))(v286, v287, v301);
LABEL_139:
                    v286[v76[5]] = v287[v76[5]];
                    v319 = v76[6];
                    v320 = (uint64_t)&v286[v319];
                    v321 = &v287[v319];
                    v322 = v407(v320, 1, v306);
                    v323 = v407((uint64_t)v321, 1, v306);
                    if (v322)
                    {
                      if (!v323)
                      {
                        (*(void (**)(uint64_t, char *, uint64_t))(v370 + 32))(v320, v321, v372);
                        v324 = (int *)type metadata accessor for SignificantChange.Period(0);
                        *(_QWORD *)(v320 + v324[5]) = *(_QWORD *)&v321[v324[5]];
                        *(_QWORD *)(v320 + v324[6]) = *(_QWORD *)&v321[v324[6]];
                        *(_BYTE *)(v320 + v324[7]) = v321[v324[7]];
                        *(_QWORD *)(v320 + *(int *)(v306 + 20)) = *(_QWORD *)&v321[*(int *)(v306 + 20)];
                        v325 = *(int *)(v306 + 24);
                        v326 = (_BYTE *)(v320 + v325);
                        v327 = &v321[v325];
                        v328 = type metadata accessor for SignificantChange.Notification(0);
                        v329 = *(_QWORD *)(v328 - 8);
                        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v329 + 48))(v327, 1, v328))
                        {
                          sub_1BCA8025C(0);
                          memcpy(v326, v327, *(_QWORD *)(*(_QWORD *)(v330 - 8) + 64));
                        }
                        else
                        {
                          *(_OWORD *)v326 = *(_OWORD *)v327;
                          v326[16] = v327[16];
                          v351 = *(void (**)(_BYTE *, char *, uint64_t))(v302 + 32);
                          v351(&v326[*(int *)(v328 + 24)], &v327[*(int *)(v328 + 24)], v301);
                          v351(&v326[*(int *)(v328 + 28)], &v327[*(int *)(v328 + 28)], v301);
                          (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v329 + 56))(v326, 0, 1, v328);
                        }
                        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v300 + 56))(v320, 0, 1, v306);
                        return v391;
                      }
                    }
                    else
                    {
                      if (!v323)
                      {
                        ((void (*)(uint64_t, char *, uint64_t))v366)(v320, v321, v372);
                        v342 = (int *)type metadata accessor for SignificantChange.Period(0);
                        *(_QWORD *)(v320 + v342[5]) = *(_QWORD *)&v321[v342[5]];
                        *(_QWORD *)(v320 + v342[6]) = *(_QWORD *)&v321[v342[6]];
                        *(_BYTE *)(v320 + v342[7]) = v321[v342[7]];
                        *(_QWORD *)(v320 + *(int *)(v306 + 20)) = *(_QWORD *)&v321[*(int *)(v306 + 20)];
                        swift_bridgeObjectRelease();
                        v343 = *(int *)(v306 + 24);
                        v344 = v320 + v343;
                        v345 = &v321[v343];
                        v76 = (int *)type metadata accessor for SignificantChange.Notification(0);
                        v346 = *((_QWORD *)v76 - 1);
                        v347 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v346 + 48);
                        v348 = v347(v344, 1, v76);
                        v349 = v347((uint64_t)v345, 1, v76);
                        if (v348)
                        {
                          if (!v349)
                          {
                            *(_OWORD *)v344 = *(_OWORD *)v345;
                            *(_BYTE *)(v344 + 16) = v345[16];
                            v350 = *(void (**)(uint64_t, char *, uint64_t))(v302 + 32);
                            v350(v344 + v76[6], &v345[v76[6]], v301);
                            v350(v344 + v76[7], &v345[v76[7]], v301);
                            v210 = *(void (**)(char *, _QWORD, uint64_t, int *))(v346 + 56);
                            v211 = (char *)v344;
LABEL_83:
                            v210(v211, 0, 1, v76);
                            return v391;
                          }
                        }
                        else
                        {
                          if (!v349)
                          {
                            v360 = *((_QWORD *)v345 + 1);
                            *(_QWORD *)v344 = *(_QWORD *)v345;
                            *(_QWORD *)(v344 + 8) = v360;
                            swift_bridgeObjectRelease();
                            *(_BYTE *)(v344 + 16) = v345[16];
                            v361 = *(void (**)(uint64_t, char *, uint64_t))(v302 + 40);
                            v361(v344 + v76[6], &v345[v76[6]], v301);
                            v361(v344 + v76[7], &v345[v76[7]], v301);
                            return v391;
                          }
                          sub_1BC997208(v344, type metadata accessor for SignificantChange.Notification);
                        }
                        sub_1BCA8025C(0);
                        v296 = *(_QWORD *)(*(_QWORD *)(v352 - 8) + 64);
                        v297 = (void *)v344;
                        v298 = v345;
LABEL_125:
                        memcpy(v297, v298, v296);
                        return v391;
                      }
                      sub_1BC997208(v320, type metadata accessor for SignificantChange);
                    }
                    sub_1BCA7EFBC(0);
                    v296 = *(_QWORD *)(*(_QWORD *)(v331 - 8) + 64);
                    v297 = (void *)v320;
                    v298 = v321;
                    goto LABEL_125;
                  }
                  (*(void (**)(char *, uint64_t))(v302 + 8))(v286, v301);
                }
                sub_1BCA7F46C(0);
                memcpy(v286, v287, *(_QWORD *)(*(_QWORD *)(v318 - 8) + 64));
                goto LABEL_139;
              }
            }
            else
            {
              if (!v283)
              {
                (*(void (**)(char *, char *, uint64_t))(v280 + 40))(v277, v278, v279);
                goto LABEL_117;
              }
              (*(void (**)(char *, uint64_t))(v280 + 8))(v277, v279);
            }
            sub_1BCA7F46C(0);
            memcpy(v277, v278, *(_QWORD *)(*(_QWORD *)(v284 - 8) + 64));
            goto LABEL_117;
          }
          sub_1BC997208((uint64_t)v259, type metadata accessor for SignificantChangeEngine.Changepoint);
        }
        sub_1BC9DBE2C(0);
        memcpy(v259, v260, *(_QWORD *)(*(_QWORD *)(v275 - 8) + 64));
        goto LABEL_111;
      }
LABEL_86:
      sub_1BCA7EFBC(0);
      memcpy(v149, __srca, *(_QWORD *)(*(_QWORD *)(v212 - 8) + 64));
      goto LABEL_105;
    }
    v153 = v377;
    if (v152)
    {
      sub_1BC997208((uint64_t)v149, type metadata accessor for SignificantChange);
      goto LABEL_86;
    }
    ((void (*)(char *, char *, uint64_t))v366)(v149, __srca, v372);
    v237 = (int *)type metadata accessor for SignificantChange.Period(0);
    *(_QWORD *)&v149[v237[5]] = *(_QWORD *)&__srca[v237[5]];
    *(_QWORD *)&v149[v237[6]] = *(_QWORD *)&__srca[v237[6]];
    v149[v237[7]] = __srca[v237[7]];
    *(_QWORD *)&v149[*(int *)(v6 + 20)] = *(_QWORD *)&__srca[*(int *)(v6 + 20)];
    swift_bridgeObjectRelease();
    v238 = *(int *)(v6 + 24);
    v239 = &v149[v238];
    v240 = &__srca[v238];
    v241 = type metadata accessor for SignificantChange.Notification(0);
    v365 = *(_QWORD *)(v241 - 8);
    v242 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v365 + 48);
    v243 = v242(v239, 1, v241);
    v244 = v242(v240, 1, v241);
    if (v243)
    {
      v153 = v377;
      if (!v244)
      {
        *(_OWORD *)v239 = *(_OWORD *)v240;
        v239[16] = v240[16];
        v245 = *(int *)(v241 + 24);
        v246 = &v239[v245];
        v247 = &v240[v245];
        v248 = sub_1BCAB4E54();
        v249 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v248 - 8) + 32);
        v249(v246, v247, v248);
        v250 = v248;
        v99 = v90;
        v249(&v239[*(int *)(v241 + 28)], &v240[*(int *)(v241 + 28)], v250);
        v153 = v377;
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v365 + 56))(v239, 0, 1, v241);
LABEL_104:
        v151 = __srca;
        goto LABEL_105;
      }
    }
    else
    {
      v153 = v377;
      if (!v244)
      {
        v353 = *((_QWORD *)v240 + 1);
        *(_QWORD *)v239 = *(_QWORD *)v240;
        *((_QWORD *)v239 + 1) = v353;
        swift_bridgeObjectRelease();
        v239[16] = v240[16];
        v354 = *(int *)(v241 + 24);
        v355 = &v239[v354];
        v356 = &v240[v354];
        v357 = sub_1BCAB4E54();
        v358 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v357 - 8) + 40);
        v358(v355, v356, v357);
        v359 = v357;
        v99 = v90;
        v358(&v239[*(int *)(v241 + 28)], &v240[*(int *)(v241 + 28)], v359);
        v153 = v377;
        v151 = __srca;
        goto LABEL_105;
      }
      sub_1BC997208((uint64_t)v239, type metadata accessor for SignificantChange.Notification);
    }
    sub_1BCA8025C(0);
    memcpy(v239, v240, *(_QWORD *)(*(_QWORD *)(v257 - 8) + 64));
    goto LABEL_104;
  }
  if (!v80)
  {
    v384 = v7;
    v81 = sub_1BCAB4BD8();
    v376 = *(void (**)(char *, char *))(*(_QWORD *)(v81 - 8) + 32);
    __src = (void *)v81;
    v376(v74, v75);
    v82 = v76[5];
    v83 = &v74[v82];
    v84 = &v75[v82];
    v85 = type metadata accessor for SignificantChangeEngine.State.MeanShift(0);
    v86 = *(_QWORD *)(v85 - 8);
    v391 = a1;
    v394 = v6;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v86 + 48))(v84, 1, v85))
    {
      sub_1BCA7F3E0(0);
      memcpy(v83, v84, *(_QWORD *)(*(_QWORD *)(v87 - 8) + 64));
    }
    else
    {
      v373 = v86;
      v405 = v74;
      if (v407((uint64_t)v84, 1, v6))
      {
        sub_1BCA7EFBC(0);
        memcpy(v83, v84, *(_QWORD *)(*(_QWORD *)(v105 - 8) + 64));
      }
      else
      {
        ((void (*)(char *, char *, void *))v376)(v83, v84, __src);
        v123 = (int *)type metadata accessor for SignificantChange.Period(0);
        *(_QWORD *)&v83[v123[5]] = *(_QWORD *)&v84[v123[5]];
        *(_QWORD *)&v83[v123[6]] = *(_QWORD *)&v84[v123[6]];
        v83[v123[7]] = v84[v123[7]];
        *(_QWORD *)&v83[*(int *)(v6 + 20)] = *(_QWORD *)&v84[*(int *)(v6 + 20)];
        v124 = *(int *)(v6 + 24);
        v125 = &v83[v124];
        v126 = &v84[v124];
        v127 = type metadata accessor for SignificantChange.Notification(0);
        v128 = *(_QWORD *)(v127 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v128 + 48))(v126, 1, v127))
        {
          sub_1BCA8025C(0);
          memcpy(v125, v126, *(_QWORD *)(*(_QWORD *)(v129 - 8) + 64));
        }
        else
        {
          *(_OWORD *)v125 = *(_OWORD *)v126;
          v125[16] = v126[16];
          v168 = *(int *)(v127 + 24);
          v367 = &v126[v168];
          v369 = &v125[v168];
          v363 = sub_1BCAB4E54();
          v371 = v128;
          v169 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v363 - 8) + 32);
          v169(v369, v367, v363);
          v169(&v125[*(int *)(v127 + 28)], &v126[*(int *)(v127 + 28)], v363);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v371 + 56))(v125, 0, 1, v127);
        }
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v384 + 56))(v83, 0, 1, v394);
      }
      v170 = *(int *)(v85 + 20);
      v171 = &v83[v170];
      v172 = &v84[v170];
      v173 = (int *)type metadata accessor for SignificantChangeEngine.Changepoint(0);
      v174 = *((_QWORD *)v173 - 1);
      if ((*(unsigned int (**)(char *, uint64_t, int *))(v174 + 48))(v172, 1, v173))
      {
        sub_1BC9DBE2C(0);
        memcpy(v171, v172, *(_QWORD *)(*(_QWORD *)(v175 - 8) + 64));
      }
      else
      {
        v176 = sub_1BCAB4E54();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v176 - 8) + 32))(v171, v172, v176);
        *(_QWORD *)&v171[v173[5]] = *(_QWORD *)&v172[v173[5]];
        *(_QWORD *)&v171[v173[6]] = *(_QWORD *)&v172[v173[6]];
        *(_QWORD *)&v171[v173[7]] = *(_QWORD *)&v172[v173[7]];
        *(_QWORD *)&v171[v173[8]] = *(_QWORD *)&v172[v173[8]];
        *(_QWORD *)&v171[v173[9]] = *(_QWORD *)&v172[v173[9]];
        *(_QWORD *)&v171[v173[10]] = *(_QWORD *)&v172[v173[10]];
        v177 = v173[11];
        v178 = &v171[v177];
        v179 = &v172[v177];
        v180 = *((_OWORD *)v179 + 1);
        *(_OWORD *)v178 = *(_OWORD *)v179;
        *((_OWORD *)v178 + 1) = v180;
        *((_QWORD *)v178 + 4) = *((_QWORD *)v179 + 4);
        v181 = v173[12];
        v182 = &v171[v181];
        v183 = &v172[v181];
        v184 = *((_OWORD *)v183 + 1);
        *(_OWORD *)v182 = *(_OWORD *)v183;
        *((_OWORD *)v182 + 1) = v184;
        *((_QWORD *)v182 + 4) = *((_QWORD *)v183 + 4);
        (*(void (**)(char *, _QWORD, uint64_t, int *))(v174 + 56))(v171, 0, 1, v173);
      }
      v185 = *(int *)(v85 + 24);
      v186 = &v83[v185];
      v187 = &v84[v185];
      v188 = sub_1BCAB4E54();
      v189 = *(_QWORD *)(v188 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v189 + 48))(v187, 1, v188))
      {
        sub_1BCA7F46C(0);
        memcpy(v186, v187, *(_QWORD *)(*(_QWORD *)(v190 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v189 + 32))(v186, v187, v188);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v189 + 56))(v186, 0, 1, v188);
      }
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v373 + 56))(v83, 0, 1, v85);
      v74 = v405;
    }
    v191 = v76[6];
    v192 = &v74[v191];
    v193 = &v75[v191];
    v194 = type metadata accessor for SignificantChangeEngine.State.FrequencyShift(0);
    v195 = *(_QWORD *)(v194 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v195 + 48))(v193, 1, v194))
    {
      sub_1BCA7F41C(0);
      memcpy(v192, v193, *(_QWORD *)(*(_QWORD *)(v196 - 8) + 64));
    }
    else
    {
      v197 = sub_1BCAB4E54();
      v198 = *(_QWORD *)(v197 - 8);
      v406 = v74;
      v375 = v198;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v198 + 48))(v193, 1, v197))
      {
        sub_1BCA7F46C(0);
        memcpy(v192, v193, *(_QWORD *)(*(_QWORD *)(v199 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v198 + 32))(v192, v193, v197);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v198 + 56))(v192, 0, 1, v197);
      }
      v192[*(int *)(v194 + 20)] = v193[*(int *)(v194 + 20)];
      v200 = *(int *)(v194 + 24);
      v201 = &v192[v200];
      v202 = &v193[v200];
      if (v407((uint64_t)&v193[v200], 1, v394))
      {
        sub_1BCA7EFBC(0);
        memcpy(v201, v202, *(_QWORD *)(*(_QWORD *)(v203 - 8) + 64));
      }
      else
      {
        ((void (*)(char *, char *, void *))v376)(v201, v202, __src);
        v204 = (int *)type metadata accessor for SignificantChange.Period(0);
        *(_QWORD *)&v201[v204[5]] = *(_QWORD *)&v202[v204[5]];
        *(_QWORD *)&v201[v204[6]] = *(_QWORD *)&v202[v204[6]];
        v201[v204[7]] = v202[v204[7]];
        *(_QWORD *)&v201[*(int *)(v394 + 20)] = *(_QWORD *)&v202[*(int *)(v394 + 20)];
        v205 = *(int *)(v394 + 24);
        v408 = &v201[v205];
        v206 = &v202[v205];
        v207 = type metadata accessor for SignificantChange.Notification(0);
        v208 = *(_QWORD *)(v207 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v208 + 48))(v206, 1, v207))
        {
          sub_1BCA8025C(0);
          memcpy(v408, v206, *(_QWORD *)(*(_QWORD *)(v209 - 8) + 64));
        }
        else
        {
          *(_OWORD *)v408 = *(_OWORD *)v206;
          v408[16] = v206[16];
          __srcc = *(void (**)(char *, char *, uint64_t))(v375 + 32);
          __srcc(&v408[*(int *)(v207 + 24)], &v206[*(int *)(v207 + 24)], v197);
          __srcc(&v408[*(int *)(v207 + 28)], &v206[*(int *)(v207 + 28)], v197);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v208 + 56))(v408, 0, 1, v207);
        }
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v384 + 56))(v201, 0, 1, v394);
      }
      v74 = v406;
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v195 + 56))(v192, 0, 1, v194);
    }
    v210 = *(void (**)(char *, _QWORD, uint64_t, int *))(v77 + 56);
    v211 = v74;
    goto LABEL_83;
  }
LABEL_35:
  sub_1BCA7EFF8(0);
  memcpy(v74, v75, *(_QWORD *)(*(_QWORD *)(v88 - 8) + 64));
  return a1;
}

uint64_t getEnumTagSinglePayload for SignificantChangeEngine.Output()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BCA85AFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  sub_1BCA7EFBC(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    sub_1BCA7EFF8(0);
    v8 = v11;
    v12 = *(_QWORD *)(v11 - 8);
    v10 = a1 + *(int *)(a3 + 24);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for SignificantChangeEngine.Output()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BCA85B7C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  sub_1BCA7EFBC(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    sub_1BCA7EFF8(0);
    v10 = v13;
    v14 = *(_QWORD *)(v13 - 8);
    v12 = a1 + *(int *)(a4 + 24);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_1BCA85BF8()
{
  unint64_t v0;
  unint64_t v1;

  sub_1BCA7EFBC(319);
  if (v0 <= 0x3F)
  {
    sub_1BCA7EFF8(319);
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

__n128 __swift_memcpy209_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __n128 result;
  __int128 v10;
  __int128 v11;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  v8 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v8;
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  result = *(__n128 *)(a2 + 160);
  v10 = *(_OWORD *)(a2 + 176);
  v11 = *(_OWORD *)(a2 + 192);
  *(_BYTE *)(a1 + 208) = *(_BYTE *)(a2 + 208);
  *(_OWORD *)(a1 + 176) = v10;
  *(_OWORD *)(a1 + 192) = v11;
  *(__n128 *)(a1 + 160) = result;
  return result;
}

uint64_t getEnumTagSinglePayload for SignificantChangeEngine.Parameters(uint64_t a1, unsigned int a2)
{
  int v3;
  int v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFC && *(_BYTE *)(a1 + 209))
    return (*(_DWORD *)a1 + 252);
  if (*(unsigned __int8 *)(a1 + 105) <= 4u)
    v3 = 4;
  else
    v3 = *(unsigned __int8 *)(a1 + 105);
  v4 = v3 - 5;
  if (*(unsigned __int8 *)(a1 + 105) < 4u)
    v5 = -1;
  else
    v5 = v4;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for SignificantChangeEngine.Parameters(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(_QWORD *)(result + 200) = 0;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 208) = 0;
    *(_QWORD *)result = a2 - 252;
    if (a3 >= 0xFC)
      *(_BYTE *)(result + 209) = 1;
  }
  else
  {
    if (a3 >= 0xFC)
      *(_BYTE *)(result + 209) = 0;
    if (a2)
      *(_BYTE *)(result + 105) = a2 + 4;
  }
  return result;
}

ValueMetadata *type metadata accessor for SignificantChangeEngine.Parameters()
{
  return &type metadata for SignificantChangeEngine.Parameters;
}

__n128 __swift_memcpy41_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for SignificantChangeEngine.Parameters.Thresholds(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 41))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for SignificantChangeEngine.Parameters.Thresholds(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 40) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 41) = v3;
  return result;
}

ValueMetadata *type metadata accessor for SignificantChangeEngine.Parameters.Thresholds()
{
  return &type metadata for SignificantChangeEngine.Parameters.Thresholds;
}

ValueMetadata *type metadata accessor for SignificantChangeEngine.Parameters.ChangepointMode()
{
  return &type metadata for SignificantChangeEngine.Parameters.ChangepointMode;
}

__n128 __swift_memcpy136_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v2 = *(_OWORD *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  result = *(__n128 *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 80) = result;
  return result;
}

uint64_t getEnumTagSinglePayload for SignificantChangeEngine.Parameters.MeanShift(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFD && *(_BYTE *)(a1 + 136))
    return (*(_DWORD *)a1 + 253);
  v3 = *(unsigned __int8 *)(a1 + 89);
  v4 = v3 >= 4;
  v5 = v3 - 4;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for SignificantChangeEngine.Parameters.MeanShift(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_QWORD *)result = a2 - 253;
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 136) = 1;
  }
  else
  {
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 136) = 0;
    if (a2)
      *(_BYTE *)(result + 89) = a2 + 3;
  }
  return result;
}

ValueMetadata *type metadata accessor for SignificantChangeEngine.Parameters.MeanShift()
{
  return &type metadata for SignificantChangeEngine.Parameters.MeanShift;
}

uint64_t getEnumTagSinglePayload for SignificantChangeEngine.Parameters.FrequencyShift(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 56))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for SignificantChangeEngine.Parameters.FrequencyShift(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 56) = v3;
  return result;
}

ValueMetadata *type metadata accessor for SignificantChangeEngine.Parameters.FrequencyShift()
{
  return &type metadata for SignificantChangeEngine.Parameters.FrequencyShift;
}

uint64_t *initializeBufferWithCopyOfBuffer for SignificantChangeEngine.State(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t (*v24)(char *, uint64_t, uint64_t);
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, char *, uint64_t);
  void (*v32)(char *, char *, uint64_t);
  uint64_t v33;
  char *v34;
  char *v35;
  int *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  __int128 v43;
  uint64_t v44;
  char *v45;
  char *v46;
  __int128 v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int *v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  unsigned int (*v73)(char *, uint64_t, uint64_t);
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  void (*v78)(char *, char *, uint64_t);
  char *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void (*v92)(uint64_t *, uint64_t *, uint64_t);
  char *v93;
  char *__dst;
  _QWORD *__dsta;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_1BCAB4BD8();
    v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v9 = *(int *)(a3 + 20);
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for SignificantChangeEngine.State.MeanShift(0);
    v13 = *(_QWORD *)(v12 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
    {
      sub_1BCA7F3E0(0);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      __dst = v10;
      v16 = type metadata accessor for SignificantChange(0);
      v17 = *(_QWORD *)(v16 - 8);
      v88 = v7;
      v90 = v13;
      v92 = v8;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v11, 1, v16))
      {
        sub_1BCA7EFBC(0);
        v19 = __dst;
        memcpy(__dst, v11, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
      }
      else
      {
        v86 = v17;
        v8((uint64_t *)__dst, (uint64_t *)v11, v7);
        v20 = (int *)type metadata accessor for SignificantChange.Period(0);
        *(_QWORD *)&__dst[v20[5]] = *(_QWORD *)&v11[v20[5]];
        *(_QWORD *)&__dst[v20[6]] = *(_QWORD *)&v11[v20[6]];
        __dst[v20[7]] = v11[v20[7]];
        *(_QWORD *)&__dst[*(int *)(v16 + 20)] = *(_QWORD *)&v11[*(int *)(v16 + 20)];
        v21 = *(int *)(v16 + 24);
        v85 = &__dst[v21];
        v22 = &v11[v21];
        v23 = type metadata accessor for SignificantChange.Notification(0);
        v83 = *(_QWORD *)(v23 - 8);
        v24 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v83 + 48);
        swift_bridgeObjectRetain();
        v25 = v24(v22, 1, v23);
        v26 = v16;
        if (v25)
        {
          sub_1BCA8025C(0);
          memcpy(v85, v22, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
        }
        else
        {
          v28 = *((_QWORD *)v22 + 1);
          *(_QWORD *)v85 = *(_QWORD *)v22;
          *((_QWORD *)v85 + 1) = v28;
          v85[16] = v22[16];
          v29 = *(int *)(v23 + 24);
          v81 = &v85[v29];
          v80 = &v22[v29];
          v82 = v26;
          v30 = sub_1BCAB4E54();
          v31 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v30 - 8) + 16);
          swift_bridgeObjectRetain();
          v31(v81, v80, v30);
          v32 = v31;
          v26 = v82;
          v32(&v85[*(int *)(v23 + 28)], &v22[*(int *)(v23 + 28)], v30);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v83 + 56))(v85, 0, 1, v23);
        }
        v19 = __dst;
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v86 + 56))(__dst, 0, 1, v26);
      }
      v33 = *(int *)(v12 + 20);
      v34 = &v19[v33];
      v35 = &v11[v33];
      v36 = (int *)type metadata accessor for SignificantChangeEngine.Changepoint(0);
      v37 = *((_QWORD *)v36 - 1);
      if ((*(unsigned int (**)(char *, uint64_t, int *))(v37 + 48))(v35, 1, v36))
      {
        sub_1BC9DBE2C(0);
        memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
      }
      else
      {
        v39 = sub_1BCAB4E54();
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v39 - 8) + 16))(v34, v35, v39);
        *(_QWORD *)&v34[v36[5]] = *(_QWORD *)&v35[v36[5]];
        *(_QWORD *)&v34[v36[6]] = *(_QWORD *)&v35[v36[6]];
        *(_QWORD *)&v34[v36[7]] = *(_QWORD *)&v35[v36[7]];
        *(_QWORD *)&v34[v36[8]] = *(_QWORD *)&v35[v36[8]];
        *(_QWORD *)&v34[v36[9]] = *(_QWORD *)&v35[v36[9]];
        *(_QWORD *)&v34[v36[10]] = *(_QWORD *)&v35[v36[10]];
        v40 = v36[11];
        v41 = &v34[v40];
        v42 = &v35[v40];
        v43 = *((_OWORD *)v42 + 1);
        *(_OWORD *)v41 = *(_OWORD *)v42;
        *((_OWORD *)v41 + 1) = v43;
        *((_QWORD *)v41 + 4) = *((_QWORD *)v42 + 4);
        v44 = v36[12];
        v45 = &v34[v44];
        v46 = &v35[v44];
        v47 = *((_OWORD *)v46 + 1);
        *(_OWORD *)v45 = *(_OWORD *)v46;
        *((_OWORD *)v45 + 1) = v47;
        *((_QWORD *)v45 + 4) = *((_QWORD *)v46 + 4);
        (*(void (**)(char *, _QWORD, uint64_t, int *))(v37 + 56))(v34, 0, 1, v36);
      }
      v48 = *(int *)(v12 + 24);
      v49 = &v19[v48];
      v50 = &v11[v48];
      v51 = sub_1BCAB4E54();
      v52 = *(_QWORD *)(v51 - 8);
      v8 = v92;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v52 + 48))(v50, 1, v51))
      {
        sub_1BCA7F46C(0);
        memcpy(v49, v50, *(_QWORD *)(*(_QWORD *)(v53 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v52 + 16))(v49, v50, v51);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v52 + 56))(v49, 0, 1, v51);
      }
      v7 = v88;
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v90 + 56))(v19, 0, 1, v12);
    }
    v54 = *(int *)(a3 + 24);
    v55 = (char *)a1 + v54;
    v56 = (char *)a2 + v54;
    v57 = type metadata accessor for SignificantChangeEngine.State.FrequencyShift(0);
    v58 = *(_QWORD *)(v57 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v58 + 48))(v56, 1, v57))
    {
      sub_1BCA7F41C(0);
      memcpy(v55, v56, *(_QWORD *)(*(_QWORD *)(v59 - 8) + 64));
    }
    else
    {
      v60 = sub_1BCAB4E54();
      v61 = *(_QWORD *)(v60 - 8);
      __dsta = (_QWORD *)v61;
      v91 = v60;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v61 + 48))(v56, 1, v60))
      {
        sub_1BCA7F46C(0);
        memcpy(v55, v56, *(_QWORD *)(*(_QWORD *)(v62 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v61 + 16))(v55, v56, v60);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v61 + 56))(v55, 0, 1, v60);
      }
      v55[*(int *)(v57 + 20)] = v56[*(int *)(v57 + 20)];
      v63 = *(int *)(v57 + 24);
      v64 = &v55[v63];
      v65 = &v56[v63];
      v66 = type metadata accessor for SignificantChange(0);
      v67 = *(_QWORD *)(v66 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v67 + 48))(v65, 1, v66))
      {
        sub_1BCA7EFBC(0);
        memcpy(v64, v65, *(_QWORD *)(*(_QWORD *)(v68 - 8) + 64));
      }
      else
      {
        v87 = v67;
        v8((uint64_t *)v64, (uint64_t *)v65, v7);
        v69 = (int *)type metadata accessor for SignificantChange.Period(0);
        *(_QWORD *)&v64[v69[5]] = *(_QWORD *)&v65[v69[5]];
        *(_QWORD *)&v64[v69[6]] = *(_QWORD *)&v65[v69[6]];
        v64[v69[7]] = v65[v69[7]];
        *(_QWORD *)&v64[*(int *)(v66 + 20)] = *(_QWORD *)&v65[*(int *)(v66 + 20)];
        v70 = *(int *)(v66 + 24);
        v93 = &v64[v70];
        v71 = &v65[v70];
        v72 = type metadata accessor for SignificantChange.Notification(0);
        v89 = *(_QWORD *)(v72 - 8);
        v73 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v89 + 48);
        swift_bridgeObjectRetain();
        if (v73(v71, 1, v72))
        {
          sub_1BCA8025C(0);
          memcpy(v93, v71, *(_QWORD *)(*(_QWORD *)(v74 - 8) + 64));
        }
        else
        {
          v75 = *((_QWORD *)v71 + 1);
          *(_QWORD *)v93 = *(_QWORD *)v71;
          *((_QWORD *)v93 + 1) = v75;
          v93[16] = v71[16];
          v76 = *(int *)(v72 + 24);
          v77 = &v93[v76];
          v84 = &v71[v76];
          v78 = (void (*)(char *, char *, uint64_t))__dsta[2];
          swift_bridgeObjectRetain();
          v78(v77, v84, v91);
          v78(&v93[*(int *)(v72 + 28)], &v71[*(int *)(v72 + 28)], v91);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v89 + 56))(v93, 0, 1, v72);
        }
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v87 + 56))(v64, 0, 1, v66);
      }
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v58 + 56))(v55, 0, 1, v57);
    }
  }
  return a1;
}

uint64_t destroy for SignificantChangeEngine.State(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t);

  v4 = sub_1BCAB4BD8();
  v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v5(a1, v4);
  v6 = a1 + *(int *)(a2 + 20);
  v7 = type metadata accessor for SignificantChangeEngine.State.MeanShift(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7))
  {
    v8 = type metadata accessor for SignificantChange(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v6, 1, v8))
    {
      v5(v6, v4);
      swift_bridgeObjectRelease();
      v9 = v6 + *(int *)(v8 + 24);
      v10 = type metadata accessor for SignificantChange.Notification(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(v9, 1, v10))
      {
        swift_bridgeObjectRelease();
        v28 = v9 + *(int *)(v10 + 24);
        v11 = sub_1BCAB4E54();
        v12 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8);
        v12(v28, v11);
        v12(v9 + *(int *)(v10 + 28), v11);
      }
    }
    v13 = v6 + *(int *)(v7 + 20);
    v14 = type metadata accessor for SignificantChangeEngine.Changepoint(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 48))(v13, 1, v14))
    {
      v15 = sub_1BCAB4E54();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v13, v15);
    }
    v16 = v6 + *(int *)(v7 + 24);
    v17 = sub_1BCAB4E54();
    v18 = *(_QWORD *)(v17 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
      (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v16, v17);
  }
  v19 = a1 + *(int *)(a2 + 24);
  v20 = type metadata accessor for SignificantChangeEngine.State.FrequencyShift(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 48))(v19, 1, v20);
  if (!(_DWORD)result)
  {
    v22 = sub_1BCAB4E54();
    v23 = *(_QWORD *)(v22 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v23 + 48))(v19, 1, v22))
      (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v19, v22);
    v24 = v19 + *(int *)(v20 + 24);
    v25 = type metadata accessor for SignificantChange(0);
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 48))(v24, 1, v25);
    if (!(_DWORD)result)
    {
      v5(v24, v4);
      swift_bridgeObjectRelease();
      v26 = v24 + *(int *)(v25 + 24);
      v27 = type metadata accessor for SignificantChange.Notification(0);
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 48))(v26, 1, v27);
      if (!(_DWORD)result)
      {
        swift_bridgeObjectRelease();
        v29 = *(void (**)(uint64_t, uint64_t))(v23 + 8);
        v29(v26 + *(int *)(v27 + 24), v22);
        return ((uint64_t (*)(uint64_t, uint64_t))v29)(v26 + *(int *)(v27 + 28), v22);
      }
    }
  }
  return result;
}

uint64_t initializeWithCopy for SignificantChangeEngine.State(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  unsigned int (*v21)(char *, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, char *, uint64_t);
  uint64_t v27;
  char *v28;
  char *v29;
  int *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  __int128 v37;
  uint64_t v38;
  char *v39;
  char *v40;
  __int128 v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int *v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  unsigned int (*v67)(char *, uint64_t, uint64_t);
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void (*v71)(char *, char *, uint64_t);
  char *v73;
  char *v74;
  uint64_t v75;
  char *__dst;
  char *__dsta;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void (*v85)(uint64_t, uint64_t, uint64_t);
  uint64_t v86;
  void *v87;
  char *v88;

  v6 = sub_1BCAB4BD8();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v8 = *(int *)(a3 + 20);
  v9 = (char *)(a1 + v8);
  v10 = (char *)(a2 + v8);
  v11 = type metadata accessor for SignificantChangeEngine.State.MeanShift(0);
  v12 = *(_QWORD *)(v11 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
  {
    sub_1BCA7F3E0(0);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v81 = a3;
    v14 = type metadata accessor for SignificantChange(0);
    v15 = *(_QWORD *)(v14 - 8);
    v85 = v7;
    v87 = (void *)v6;
    v83 = v12;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v10, 1, v14))
    {
      sub_1BCA7EFBC(0);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
      a3 = v81;
    }
    else
    {
      v78 = v15;
      v7((uint64_t)v9, (uint64_t)v10, v6);
      v17 = (int *)type metadata accessor for SignificantChange.Period(0);
      *(_QWORD *)&v9[v17[5]] = *(_QWORD *)&v10[v17[5]];
      *(_QWORD *)&v9[v17[6]] = *(_QWORD *)&v10[v17[6]];
      v9[v17[7]] = v10[v17[7]];
      *(_QWORD *)&v9[*(int *)(v14 + 20)] = *(_QWORD *)&v10[*(int *)(v14 + 20)];
      v18 = *(int *)(v14 + 24);
      __dst = &v9[v18];
      v19 = &v10[v18];
      v20 = type metadata accessor for SignificantChange.Notification(0);
      v75 = *(_QWORD *)(v20 - 8);
      v21 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v75 + 48);
      swift_bridgeObjectRetain();
      if (v21(v19, 1, v20))
      {
        sub_1BCA8025C(0);
        memcpy(__dst, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
      }
      else
      {
        v23 = *((_QWORD *)v19 + 1);
        *(_QWORD *)__dst = *(_QWORD *)v19;
        *((_QWORD *)__dst + 1) = v23;
        __dst[16] = v19[16];
        v24 = *(int *)(v20 + 24);
        v74 = &__dst[v24];
        v73 = &v19[v24];
        v25 = sub_1BCAB4E54();
        v26 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 16);
        swift_bridgeObjectRetain();
        v26(v74, v73, v25);
        v26(&__dst[*(int *)(v20 + 28)], &v19[*(int *)(v20 + 28)], v25);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v75 + 56))(__dst, 0, 1, v20);
      }
      a3 = v81;
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v78 + 56))(v9, 0, 1, v14);
    }
    v27 = *(int *)(v11 + 20);
    v28 = &v9[v27];
    v29 = &v10[v27];
    v30 = (int *)type metadata accessor for SignificantChangeEngine.Changepoint(0);
    v31 = *((_QWORD *)v30 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v31 + 48))(v29, 1, v30))
    {
      sub_1BC9DBE2C(0);
      memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    }
    else
    {
      v33 = sub_1BCAB4E54();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v33 - 8) + 16))(v28, v29, v33);
      *(_QWORD *)&v28[v30[5]] = *(_QWORD *)&v29[v30[5]];
      *(_QWORD *)&v28[v30[6]] = *(_QWORD *)&v29[v30[6]];
      *(_QWORD *)&v28[v30[7]] = *(_QWORD *)&v29[v30[7]];
      *(_QWORD *)&v28[v30[8]] = *(_QWORD *)&v29[v30[8]];
      *(_QWORD *)&v28[v30[9]] = *(_QWORD *)&v29[v30[9]];
      *(_QWORD *)&v28[v30[10]] = *(_QWORD *)&v29[v30[10]];
      v34 = v30[11];
      v35 = &v28[v34];
      v36 = &v29[v34];
      v37 = *((_OWORD *)v36 + 1);
      *(_OWORD *)v35 = *(_OWORD *)v36;
      *((_OWORD *)v35 + 1) = v37;
      *((_QWORD *)v35 + 4) = *((_QWORD *)v36 + 4);
      v38 = v30[12];
      v39 = &v28[v38];
      v40 = &v29[v38];
      v41 = *((_OWORD *)v40 + 1);
      *(_OWORD *)v39 = *(_OWORD *)v40;
      *((_OWORD *)v39 + 1) = v41;
      *((_QWORD *)v39 + 4) = *((_QWORD *)v40 + 4);
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v31 + 56))(v28, 0, 1, v30);
    }
    v42 = *(int *)(v11 + 24);
    v43 = &v9[v42];
    v44 = &v10[v42];
    v45 = sub_1BCAB4E54();
    v46 = *(_QWORD *)(v45 - 8);
    v7 = v85;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v46 + 48))(v44, 1, v45))
    {
      sub_1BCA7F46C(0);
      memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v46 + 16))(v43, v44, v45);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v46 + 56))(v43, 0, 1, v45);
    }
    v6 = (uint64_t)v87;
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v83 + 56))(v9, 0, 1, v11);
  }
  v48 = *(int *)(a3 + 24);
  v49 = (char *)(a1 + v48);
  v50 = (char *)(a2 + v48);
  v51 = type metadata accessor for SignificantChangeEngine.State.FrequencyShift(0);
  v52 = *(_QWORD *)(v51 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v52 + 48))(v50, 1, v51))
  {
    sub_1BCA7F41C(0);
    memcpy(v49, v50, *(_QWORD *)(*(_QWORD *)(v53 - 8) + 64));
  }
  else
  {
    v54 = sub_1BCAB4E54();
    v55 = *(_QWORD *)(v54 - 8);
    v84 = v55;
    v80 = a1;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v55 + 48))(v50, 1, v54))
    {
      sub_1BCA7F46C(0);
      memcpy(v49, v50, *(_QWORD *)(*(_QWORD *)(v56 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v55 + 16))(v49, v50, v54);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v55 + 56))(v49, 0, 1, v54);
    }
    v49[*(int *)(v51 + 20)] = v50[*(int *)(v51 + 20)];
    v57 = *(int *)(v51 + 24);
    v58 = &v49[v57];
    v59 = &v50[v57];
    v60 = type metadata accessor for SignificantChange(0);
    v61 = *(_QWORD *)(v60 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v61 + 48))(v59, 1, v60))
    {
      sub_1BCA7EFBC(0);
      memcpy(v58, v59, *(_QWORD *)(*(_QWORD *)(v62 - 8) + 64));
      a1 = v80;
    }
    else
    {
      v82 = v61;
      v7((uint64_t)v58, (uint64_t)v59, v6);
      v63 = (int *)type metadata accessor for SignificantChange.Period(0);
      *(_QWORD *)&v58[v63[5]] = *(_QWORD *)&v59[v63[5]];
      *(_QWORD *)&v58[v63[6]] = *(_QWORD *)&v59[v63[6]];
      v58[v63[7]] = v59[v63[7]];
      *(_QWORD *)&v58[*(int *)(v60 + 20)] = *(_QWORD *)&v59[*(int *)(v60 + 20)];
      v64 = *(int *)(v60 + 24);
      v88 = &v58[v64];
      v65 = &v59[v64];
      v66 = type metadata accessor for SignificantChange.Notification(0);
      v86 = *(_QWORD *)(v66 - 8);
      v67 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v86 + 48);
      swift_bridgeObjectRetain();
      if (v67(v65, 1, v66))
      {
        sub_1BCA8025C(0);
        memcpy(v88, v65, *(_QWORD *)(*(_QWORD *)(v68 - 8) + 64));
      }
      else
      {
        v69 = *((_QWORD *)v65 + 1);
        *(_QWORD *)v88 = *(_QWORD *)v65;
        *((_QWORD *)v88 + 1) = v69;
        v88[16] = v65[16];
        v70 = *(int *)(v66 + 24);
        __dsta = &v65[v70];
        v79 = &v88[v70];
        v71 = *(void (**)(char *, char *, uint64_t))(v84 + 16);
        swift_bridgeObjectRetain();
        v71(v79, __dsta, v54);
        v71(&v88[*(int *)(v66 + 28)], &v65[*(int *)(v66 + 28)], v54);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v86 + 56))(v88, 0, 1, v66);
      }
      a1 = v80;
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v82 + 56))(v58, 0, 1, v60);
    }
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v52 + 56))(v49, 0, 1, v51);
  }
  return a1;
}

uint64_t assignWithCopy for SignificantChangeEngine.State(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  _BYTE *v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(_BYTE *, uint64_t, uint64_t);
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  size_t v20;
  char *v21;
  char *v22;
  int *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(_BYTE *, uint64_t, uint64_t);
  int v27;
  int v28;
  int *v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  unsigned int (*v34)(_QWORD *, uint64_t, uint64_t);
  uint64_t v35;
  int *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  unsigned int (*v40)(_QWORD *, uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;
  size_t v43;
  void *v44;
  const void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  int *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  __int128 v59;
  uint64_t v60;
  char *v61;
  char *v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t (*v76)(char *, uint64_t, uint64_t);
  int v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t (*v85)(char *, uint64_t, uint64_t);
  int v86;
  int v87;
  uint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  int *v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  unsigned int (*v98)(char *, uint64_t, uint64_t);
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t (*v106)(uint64_t, uint64_t, uint64_t);
  int v107;
  int v108;
  int *v109;
  uint64_t v110;
  _QWORD *v111;
  char *v112;
  uint64_t v113;
  unsigned int (*v114)(char *, uint64_t, uint64_t);
  uint64_t v115;
  uint64_t v116;
  size_t v117;
  void *v118;
  char *v119;
  uint64_t v120;
  void (*v121)(char *, char *, uint64_t);
  int *v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t (*v129)(uint64_t, uint64_t, uint64_t);
  int v130;
  int v131;
  uint64_t v132;
  uint64_t v133;
  void (*v134)(void *, char *, uint64_t);
  int *v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t (*v141)(uint64_t, uint64_t, uint64_t);
  int v142;
  int v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  void (*v147)(uint64_t, char *, uint64_t);
  uint64_t v148;
  uint64_t v149;
  void (*v150)(char *, char *, uint64_t);
  uint64_t v151;
  char *v152;
  char *v153;
  int *v154;
  uint64_t v155;
  uint64_t (*v156)(char *, uint64_t, int *);
  int v157;
  int v158;
  uint64_t v159;
  uint64_t v160;
  char *v161;
  char *v162;
  uint64_t v163;
  __int128 v164;
  uint64_t v165;
  char *v166;
  char *v167;
  __int128 v168;
  __int128 v169;
  uint64_t v170;
  uint64_t v171;
  char *v172;
  char *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t (*v176)(char *, uint64_t, uint64_t);
  int v177;
  int v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  char *v182;
  char *v183;
  uint64_t v184;
  char *v185;
  char *v186;
  uint64_t v187;
  char *v188;
  void (*v189)(char *, char *, uint64_t);
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  char *v194;
  uint64_t v195;
  void (*v196)(uint64_t, char *, uint64_t);
  void (*v197)(uint64_t, char *, uint64_t);
  char *v198;
  char *v199;
  void (*v200)(char *, char *, uint64_t);
  char *v201;
  uint64_t v202;
  char *v203;
  char *v204;
  _QWORD *__dst;
  _QWORD *__dsta;
  char *__dstb;
  void *__dstc;
  uint64_t v209;
  uint64_t v210;
  void (*v211)(uint64_t, uint64_t, uint64_t);
  void (*v212)(uint64_t, uint64_t, uint64_t);
  uint64_t v213;
  uint64_t v214;
  char *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  char *v222;
  int *v223;
  char *v224;
  _QWORD *v225;

  v6 = sub_1BCAB4BD8();
  v220 = *(_QWORD *)(v6 - 8);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v220 + 24);
  v7(a1, a2, v6);
  v223 = a3;
  v8 = a3[5];
  v9 = (_BYTE *)(a1 + v8);
  v10 = (_BYTE *)(a2 + v8);
  v11 = type metadata accessor for SignificantChangeEngine.State.MeanShift(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v12 + 48);
  v14 = v13(v9, 1, v11);
  v15 = v13(v10, 1, v11);
  v214 = v6;
  if (!v14)
  {
    if (v15)
    {
      sub_1BC997208((uint64_t)v9, type metadata accessor for SignificantChangeEngine.State.MeanShift);
      goto LABEL_7;
    }
    v209 = a2;
    v212 = v7;
    v24 = type metadata accessor for SignificantChange(0);
    v25 = *(_QWORD *)(v24 - 8);
    v26 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v25 + 48);
    v27 = v26(v9, 1, v24);
    v28 = v26(v10, 1, v24);
    v217 = a1;
    if (v27)
    {
      if (!v28)
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v220 + 16))(v9, v10, v6);
        v29 = (int *)type metadata accessor for SignificantChange.Period(0);
        *(_QWORD *)&v9[v29[5]] = *(_QWORD *)&v10[v29[5]];
        *(_QWORD *)&v9[v29[6]] = *(_QWORD *)&v10[v29[6]];
        v9[v29[7]] = v10[v29[7]];
        *(_QWORD *)&v9[*(int *)(v24 + 20)] = *(_QWORD *)&v10[*(int *)(v24 + 20)];
        v30 = *(int *)(v24 + 24);
        v31 = &v9[v30];
        v32 = &v10[v30];
        v33 = type metadata accessor for SignificantChange.Notification(0);
        __dst = *(_QWORD **)(v33 - 8);
        v34 = (unsigned int (*)(_QWORD *, uint64_t, uint64_t))__dst[6];
        swift_bridgeObjectRetain();
        if (v34(v32, 1, v33))
        {
          sub_1BCA8025C(0);
          memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
        }
        else
        {
          *v31 = *v32;
          v31[1] = v32[1];
          *((_BYTE *)v31 + 16) = *((_BYTE *)v32 + 16);
          v148 = *(int *)(v33 + 24);
          v201 = (char *)v32 + v148;
          v204 = (char *)v31 + v148;
          v149 = sub_1BCAB4E54();
          v150 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v149 - 8) + 16);
          swift_bridgeObjectRetain();
          v150(v204, v201, v149);
          v150((char *)v31 + *(int *)(v33 + 28), (char *)v32 + *(int *)(v33 + 28), v149);
          ((void (*)(_QWORD *, _QWORD, uint64_t, uint64_t))__dst[7])(v31, 0, 1, v33);
        }
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v9, 0, 1, v24);
LABEL_68:
        v151 = *(int *)(v11 + 20);
        v152 = &v9[v151];
        v153 = &v10[v151];
        v154 = (int *)type metadata accessor for SignificantChangeEngine.Changepoint(0);
        v155 = *((_QWORD *)v154 - 1);
        v156 = *(uint64_t (**)(char *, uint64_t, int *))(v155 + 48);
        v157 = v156(v152, 1, v154);
        v158 = v156(v153, 1, v154);
        if (v157)
        {
          if (!v158)
          {
            v159 = sub_1BCAB4E54();
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v159 - 8) + 16))(v152, v153, v159);
            *(_QWORD *)&v152[v154[5]] = *(_QWORD *)&v153[v154[5]];
            *(_QWORD *)&v152[v154[6]] = *(_QWORD *)&v153[v154[6]];
            *(_QWORD *)&v152[v154[7]] = *(_QWORD *)&v153[v154[7]];
            *(_QWORD *)&v152[v154[8]] = *(_QWORD *)&v153[v154[8]];
            *(_QWORD *)&v152[v154[9]] = *(_QWORD *)&v153[v154[9]];
            *(_QWORD *)&v152[v154[10]] = *(_QWORD *)&v153[v154[10]];
            v160 = v154[11];
            v161 = &v152[v160];
            v162 = &v153[v160];
            v163 = *((_QWORD *)v162 + 4);
            v164 = *((_OWORD *)v162 + 1);
            *(_OWORD *)v161 = *(_OWORD *)v162;
            *((_OWORD *)v161 + 1) = v164;
            *((_QWORD *)v161 + 4) = v163;
            v165 = v154[12];
            v166 = &v152[v165];
            v167 = &v153[v165];
            v169 = *(_OWORD *)v167;
            v168 = *((_OWORD *)v167 + 1);
            *((_QWORD *)v166 + 4) = *((_QWORD *)v167 + 4);
            *(_OWORD *)v166 = v169;
            *((_OWORD *)v166 + 1) = v168;
            (*(void (**)(char *, _QWORD, uint64_t, int *))(v155 + 56))(v152, 0, 1, v154);
LABEL_74:
            a1 = v217;
            a2 = v209;
            v7 = v212;
            v171 = *(int *)(v11 + 24);
            v172 = &v9[v171];
            v173 = &v10[v171];
            v174 = sub_1BCAB4E54();
            v175 = *(_QWORD *)(v174 - 8);
            v176 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v175 + 48);
            v177 = v176(v172, 1, v174);
            v178 = v176(v173, 1, v174);
            if (v177)
            {
              if (!v178)
              {
                (*(void (**)(char *, char *, uint64_t))(v175 + 16))(v172, v173, v174);
                (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v175 + 56))(v172, 0, 1, v174);
                goto LABEL_9;
              }
            }
            else
            {
              if (!v178)
              {
                (*(void (**)(char *, char *, uint64_t))(v175 + 24))(v172, v173, v174);
                goto LABEL_9;
              }
              (*(void (**)(char *, uint64_t))(v175 + 8))(v172, v174);
            }
            sub_1BCA7F46C(0);
            v20 = *(_QWORD *)(*(_QWORD *)(v179 - 8) + 64);
            v21 = v172;
            v22 = v173;
LABEL_8:
            memcpy(v21, v22, v20);
LABEL_9:
            v23 = v223;
            goto LABEL_29;
          }
        }
        else
        {
          if (!v158)
          {
            v180 = sub_1BCAB4E54();
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v180 - 8) + 24))(v152, v153, v180);
            *(_QWORD *)&v152[v154[5]] = *(_QWORD *)&v153[v154[5]];
            *(_QWORD *)&v152[v154[6]] = *(_QWORD *)&v153[v154[6]];
            *(_QWORD *)&v152[v154[7]] = *(_QWORD *)&v153[v154[7]];
            *(_QWORD *)&v152[v154[8]] = *(_QWORD *)&v153[v154[8]];
            *(_QWORD *)&v152[v154[9]] = *(_QWORD *)&v153[v154[9]];
            *(_QWORD *)&v152[v154[10]] = *(_QWORD *)&v153[v154[10]];
            v181 = v154[11];
            v182 = &v152[v181];
            v183 = &v153[v181];
            *(_QWORD *)v182 = *(_QWORD *)v183;
            *((_QWORD *)v182 + 1) = *((_QWORD *)v183 + 1);
            *((_QWORD *)v182 + 2) = *((_QWORD *)v183 + 2);
            *((_QWORD *)v182 + 3) = *((_QWORD *)v183 + 3);
            *((_QWORD *)v182 + 4) = *((_QWORD *)v183 + 4);
            v184 = v154[12];
            v185 = &v152[v184];
            v186 = &v153[v184];
            *(_QWORD *)v185 = *(_QWORD *)v186;
            *((_QWORD *)v185 + 1) = *((_QWORD *)v186 + 1);
            *((_QWORD *)v185 + 2) = *((_QWORD *)v186 + 2);
            *((_QWORD *)v185 + 3) = *((_QWORD *)v186 + 3);
            *((_QWORD *)v185 + 4) = *((_QWORD *)v186 + 4);
            goto LABEL_74;
          }
          sub_1BC997208((uint64_t)v152, type metadata accessor for SignificantChangeEngine.Changepoint);
        }
        sub_1BC9DBE2C(0);
        memcpy(v152, v153, *(_QWORD *)(*(_QWORD *)(v170 - 8) + 64));
        goto LABEL_74;
      }
    }
    else
    {
      if (!v28)
      {
        v212((uint64_t)v9, (uint64_t)v10, v6);
        v123 = (int *)type metadata accessor for SignificantChange.Period(0);
        *(_QWORD *)&v9[v123[5]] = *(_QWORD *)&v10[v123[5]];
        *(_QWORD *)&v9[v123[6]] = *(_QWORD *)&v10[v123[6]];
        v9[v123[7]] = v10[v123[7]];
        *(_QWORD *)&v9[*(int *)(v24 + 20)] = *(_QWORD *)&v10[*(int *)(v24 + 20)];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        v124 = *(int *)(v24 + 24);
        v125 = (uint64_t)&v9[v124];
        v126 = &v10[v124];
        v127 = type metadata accessor for SignificantChange.Notification(0);
        v128 = *(_QWORD *)(v127 - 8);
        v129 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v128 + 48);
        v130 = v129(v125, 1, v127);
        v131 = v129((uint64_t)v126, 1, v127);
        if (v130)
        {
          if (!v131)
          {
            *(_QWORD *)v125 = *(_QWORD *)v126;
            *(_QWORD *)(v125 + 8) = *((_QWORD *)v126 + 1);
            *(_BYTE *)(v125 + 16) = v126[16];
            v132 = *(int *)(v127 + 24);
            v203 = &v126[v132];
            __dstc = (void *)(v125 + v132);
            v133 = sub_1BCAB4E54();
            v134 = *(void (**)(void *, char *, uint64_t))(*(_QWORD *)(v133 - 8) + 16);
            swift_bridgeObjectRetain();
            v134(__dstc, v203, v133);
            v134((void *)(v125 + *(int *)(v127 + 28)), &v126[*(int *)(v127 + 28)], v133);
            (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v128 + 56))(v125, 0, 1, v127);
            goto LABEL_68;
          }
        }
        else
        {
          if (!v131)
          {
            *(_QWORD *)v125 = *(_QWORD *)v126;
            *(_QWORD *)(v125 + 8) = *((_QWORD *)v126 + 1);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            *(_BYTE *)(v125 + 16) = v126[16];
            v192 = *(int *)(v127 + 24);
            v193 = v125 + v192;
            v194 = &v126[v192];
            v195 = sub_1BCAB4E54();
            v196 = *(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v195 - 8) + 24);
            v196(v193, v194, v195);
            v196(v125 + *(int *)(v127 + 28), &v126[*(int *)(v127 + 28)], v195);
            goto LABEL_68;
          }
          sub_1BC997208(v125, type metadata accessor for SignificantChange.Notification);
        }
        sub_1BCA8025C(0);
        v43 = *(_QWORD *)(*(_QWORD *)(v190 - 8) + 64);
        v44 = (void *)v125;
        v45 = v126;
LABEL_19:
        memcpy(v44, v45, v43);
        goto LABEL_68;
      }
      sub_1BC997208((uint64_t)v9, type metadata accessor for SignificantChange);
    }
    sub_1BCA7EFBC(0);
    v43 = *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64);
    v44 = v9;
    v45 = v10;
    goto LABEL_19;
  }
  if (v15)
  {
LABEL_7:
    sub_1BCA7F3E0(0);
    v20 = *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64);
    v21 = v9;
    v22 = v10;
    goto LABEL_8;
  }
  v211 = v7;
  v216 = a1;
  v16 = type metadata accessor for SignificantChange(0);
  v17 = *(_QWORD *)(v16 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v17 + 48))(v10, 1, v16))
  {
    sub_1BCA7EFBC(0);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  else
  {
    v210 = a2;
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v220 + 16))(v9, v10, v6);
    v36 = (int *)type metadata accessor for SignificantChange.Period(0);
    *(_QWORD *)&v9[v36[5]] = *(_QWORD *)&v10[v36[5]];
    *(_QWORD *)&v9[v36[6]] = *(_QWORD *)&v10[v36[6]];
    v9[v36[7]] = v10[v36[7]];
    *(_QWORD *)&v9[*(int *)(v16 + 20)] = *(_QWORD *)&v10[*(int *)(v16 + 20)];
    v37 = *(int *)(v16 + 24);
    __dsta = &v9[v37];
    v38 = &v10[v37];
    v39 = type metadata accessor for SignificantChange.Notification(0);
    v202 = *(_QWORD *)(v39 - 8);
    v40 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v202 + 48);
    swift_bridgeObjectRetain();
    if (v40(v38, 1, v39))
    {
      sub_1BCA8025C(0);
      memcpy(__dsta, v38, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
    }
    else
    {
      *__dsta = *v38;
      __dsta[1] = v38[1];
      *((_BYTE *)__dsta + 16) = *((_BYTE *)v38 + 16);
      v46 = *(int *)(v39 + 24);
      v198 = (char *)v38 + v46;
      v199 = (char *)__dsta + v46;
      v47 = sub_1BCAB4E54();
      v200 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v47 - 8) + 16);
      swift_bridgeObjectRetain();
      v200(v199, v198, v47);
      v200((char *)__dsta + *(int *)(v39 + 28), (char *)v38 + *(int *)(v39 + 28), v47);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v202 + 56))(__dsta, 0, 1, v39);
    }
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v9, 0, 1, v16);
    a2 = v210;
  }
  v48 = *(int *)(v11 + 20);
  v49 = &v9[v48];
  v50 = &v10[v48];
  v51 = (int *)type metadata accessor for SignificantChangeEngine.Changepoint(0);
  v52 = *((_QWORD *)v51 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v52 + 48))(v50, 1, v51))
  {
    sub_1BC9DBE2C(0);
    memcpy(v49, v50, *(_QWORD *)(*(_QWORD *)(v53 - 8) + 64));
  }
  else
  {
    v54 = sub_1BCAB4E54();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v54 - 8) + 16))(v49, v50, v54);
    *(_QWORD *)&v49[v51[5]] = *(_QWORD *)&v50[v51[5]];
    *(_QWORD *)&v49[v51[6]] = *(_QWORD *)&v50[v51[6]];
    *(_QWORD *)&v49[v51[7]] = *(_QWORD *)&v50[v51[7]];
    *(_QWORD *)&v49[v51[8]] = *(_QWORD *)&v50[v51[8]];
    *(_QWORD *)&v49[v51[9]] = *(_QWORD *)&v50[v51[9]];
    *(_QWORD *)&v49[v51[10]] = *(_QWORD *)&v50[v51[10]];
    v55 = v51[11];
    v56 = &v49[v55];
    v57 = &v50[v55];
    v58 = *((_QWORD *)v57 + 4);
    v59 = *((_OWORD *)v57 + 1);
    *(_OWORD *)v56 = *(_OWORD *)v57;
    *((_OWORD *)v56 + 1) = v59;
    *((_QWORD *)v56 + 4) = v58;
    v60 = v51[12];
    v61 = &v49[v60];
    v62 = &v50[v60];
    v64 = *(_OWORD *)v62;
    v63 = *((_OWORD *)v62 + 1);
    *((_QWORD *)v61 + 4) = *((_QWORD *)v62 + 4);
    *(_OWORD *)v61 = v64;
    *((_OWORD *)v61 + 1) = v63;
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v52 + 56))(v49, 0, 1, v51);
  }
  a1 = v216;
  v65 = *(int *)(v11 + 24);
  v66 = &v9[v65];
  v67 = &v10[v65];
  v68 = sub_1BCAB4E54();
  v69 = *(_QWORD *)(v68 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v69 + 48))(v67, 1, v68))
  {
    sub_1BCA7F46C(0);
    memcpy(v66, v67, *(_QWORD *)(*(_QWORD *)(v70 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v69 + 16))(v66, v67, v68);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v69 + 56))(v66, 0, 1, v68);
  }
  v7 = v211;
  v23 = v223;
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
LABEL_29:
  v71 = v23[6];
  v72 = (char *)(a1 + v71);
  v73 = (char *)(a2 + v71);
  v74 = type metadata accessor for SignificantChangeEngine.State.FrequencyShift(0);
  v75 = *(_QWORD *)(v74 - 8);
  v76 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v75 + 48);
  v77 = v76(v72, 1, v74);
  v78 = v76(v73, 1, v74);
  if (v77)
  {
    if (!v78)
    {
      v79 = sub_1BCAB4E54();
      v80 = *(_QWORD *)(v79 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v80 + 48))(v73, 1, v79))
      {
        sub_1BCA7F46C(0);
        memcpy(v72, v73, *(_QWORD *)(*(_QWORD *)(v81 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v80 + 16))(v72, v73, v79);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v80 + 56))(v72, 0, 1, v79);
      }
      v72[*(int *)(v74 + 20)] = v73[*(int *)(v74 + 20)];
      v88 = *(int *)(v74 + 24);
      v89 = &v72[v88];
      v90 = &v73[v88];
      v91 = type metadata accessor for SignificantChange(0);
      v92 = *(_QWORD *)(v91 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v92 + 48))(v90, 1, v91))
      {
        sub_1BCA7EFBC(0);
        memcpy(v89, v90, *(_QWORD *)(*(_QWORD *)(v93 - 8) + 64));
      }
      else
      {
        v213 = v92;
        v219 = a1;
        (*(void (**)(char *, char *, uint64_t))(v220 + 16))(v89, v90, v214);
        v94 = (int *)type metadata accessor for SignificantChange.Period(0);
        *(_QWORD *)&v89[v94[5]] = *(_QWORD *)&v90[v94[5]];
        *(_QWORD *)&v89[v94[6]] = *(_QWORD *)&v90[v94[6]];
        v89[v94[7]] = v90[v94[7]];
        *(_QWORD *)&v89[*(int *)(v91 + 20)] = *(_QWORD *)&v90[*(int *)(v91 + 20)];
        v95 = *(int *)(v91 + 24);
        v224 = &v89[v95];
        v96 = &v90[v95];
        v97 = type metadata accessor for SignificantChange.Notification(0);
        v221 = *(_QWORD *)(v97 - 8);
        v98 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v221 + 48);
        swift_bridgeObjectRetain();
        if (v98(v96, 1, v97))
        {
          sub_1BCA8025C(0);
          memcpy(v224, v96, *(_QWORD *)(*(_QWORD *)(v99 - 8) + 64));
        }
        else
        {
          *(_QWORD *)v224 = *(_QWORD *)v96;
          *((_QWORD *)v224 + 1) = *((_QWORD *)v96 + 1);
          v224[16] = v96[16];
          v120 = *(int *)(v97 + 24);
          v215 = &v224[v120];
          __dstb = &v96[v120];
          v121 = *(void (**)(char *, char *, uint64_t))(v80 + 16);
          swift_bridgeObjectRetain();
          v121(v215, __dstb, v79);
          v121(&v224[*(int *)(v97 + 28)], &v96[*(int *)(v97 + 28)], v79);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v221 + 56))(v224, 0, 1, v97);
        }
        a1 = v219;
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v213 + 56))(v89, 0, 1, v91);
      }
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v75 + 56))(v72, 0, 1, v74);
      return a1;
    }
LABEL_35:
    sub_1BCA7F41C(0);
    memcpy(v72, v73, *(_QWORD *)(*(_QWORD *)(v82 - 8) + 64));
    return a1;
  }
  if (v78)
  {
    sub_1BC997208((uint64_t)v72, type metadata accessor for SignificantChangeEngine.State.FrequencyShift);
    goto LABEL_35;
  }
  v218 = a1;
  v83 = sub_1BCAB4E54();
  v84 = *(_QWORD *)(v83 - 8);
  v85 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v84 + 48);
  v86 = v85(v72, 1, v83);
  v87 = v85(v73, 1, v83);
  if (v86)
  {
    if (!v87)
    {
      (*(void (**)(char *, char *, uint64_t))(v84 + 16))(v72, v73, v83);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v84 + 56))(v72, 0, 1, v83);
      goto LABEL_47;
    }
    goto LABEL_46;
  }
  if (v87)
  {
    (*(void (**)(char *, uint64_t))(v84 + 8))(v72, v83);
LABEL_46:
    sub_1BCA7F46C(0);
    memcpy(v72, v73, *(_QWORD *)(*(_QWORD *)(v100 - 8) + 64));
    goto LABEL_47;
  }
  (*(void (**)(char *, char *, uint64_t))(v84 + 24))(v72, v73, v83);
LABEL_47:
  v72[*(int *)(v74 + 20)] = v73[*(int *)(v74 + 20)];
  v101 = *(int *)(v74 + 24);
  v102 = (uint64_t)&v72[v101];
  v103 = &v73[v101];
  v104 = type metadata accessor for SignificantChange(0);
  v105 = *(_QWORD *)(v104 - 8);
  v106 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v105 + 48);
  v107 = v106(v102, 1, v104);
  v108 = v106((uint64_t)v103, 1, v104);
  if (!v107)
  {
    if (!v108)
    {
      v7(v102, (uint64_t)v103, v214);
      v135 = (int *)type metadata accessor for SignificantChange.Period(0);
      *(_QWORD *)(v102 + v135[5]) = *(_QWORD *)&v103[v135[5]];
      *(_QWORD *)(v102 + v135[6]) = *(_QWORD *)&v103[v135[6]];
      *(_BYTE *)(v102 + v135[7]) = v103[v135[7]];
      *(_QWORD *)(v102 + *(int *)(v104 + 20)) = *(_QWORD *)&v103[*(int *)(v104 + 20)];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v136 = *(int *)(v104 + 24);
      v137 = v102 + v136;
      v138 = &v103[v136];
      v139 = type metadata accessor for SignificantChange.Notification(0);
      v140 = *(_QWORD *)(v139 - 8);
      v141 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v140 + 48);
      v142 = v141(v137, 1, v139);
      v143 = v141((uint64_t)v138, 1, v139);
      if (v142)
      {
        if (!v143)
        {
          *(_QWORD *)v137 = *(_QWORD *)v138;
          *(_QWORD *)(v137 + 8) = *((_QWORD *)v138 + 1);
          *(_BYTE *)(v137 + 16) = v138[16];
          v144 = *(int *)(v139 + 24);
          v145 = v137 + v144;
          v146 = &v138[v144];
          v147 = *(void (**)(uint64_t, char *, uint64_t))(v84 + 16);
          swift_bridgeObjectRetain();
          v147(v145, v146, v83);
          v147(v137 + *(int *)(v139 + 28), &v138[*(int *)(v139 + 28)], v83);
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v140 + 56))(v137, 0, 1, v139);
          return v218;
        }
      }
      else
      {
        if (!v143)
        {
          *(_QWORD *)v137 = *(_QWORD *)v138;
          *(_QWORD *)(v137 + 8) = *((_QWORD *)v138 + 1);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          *(_BYTE *)(v137 + 16) = v138[16];
          v197 = *(void (**)(uint64_t, char *, uint64_t))(v84 + 24);
          v197(v137 + *(int *)(v139 + 24), &v138[*(int *)(v139 + 24)], v83);
          v197(v137 + *(int *)(v139 + 28), &v138[*(int *)(v139 + 28)], v83);
          return v218;
        }
        sub_1BC997208(v137, type metadata accessor for SignificantChange.Notification);
      }
      sub_1BCA8025C(0);
      v117 = *(_QWORD *)(*(_QWORD *)(v191 - 8) + 64);
      v118 = (void *)v137;
      v119 = v138;
      goto LABEL_54;
    }
    sub_1BC997208(v102, type metadata accessor for SignificantChange);
LABEL_53:
    sub_1BCA7EFBC(0);
    v117 = *(_QWORD *)(*(_QWORD *)(v116 - 8) + 64);
    v118 = (void *)v102;
    v119 = v103;
LABEL_54:
    memcpy(v118, v119, v117);
    return v218;
  }
  if (v108)
    goto LABEL_53;
  (*(void (**)(uint64_t, char *, uint64_t))(v220 + 16))(v102, v103, v214);
  v109 = (int *)type metadata accessor for SignificantChange.Period(0);
  *(_QWORD *)(v102 + v109[5]) = *(_QWORD *)&v103[v109[5]];
  *(_QWORD *)(v102 + v109[6]) = *(_QWORD *)&v103[v109[6]];
  *(_BYTE *)(v102 + v109[7]) = v103[v109[7]];
  *(_QWORD *)(v102 + *(int *)(v104 + 20)) = *(_QWORD *)&v103[*(int *)(v104 + 20)];
  v110 = *(int *)(v104 + 24);
  v111 = (_QWORD *)(v102 + v110);
  v112 = &v103[v110];
  v113 = type metadata accessor for SignificantChange.Notification(0);
  v225 = *(_QWORD **)(v113 - 8);
  v114 = (unsigned int (*)(char *, uint64_t, uint64_t))v225[6];
  swift_bridgeObjectRetain();
  if (v114(v112, 1, v113))
  {
    sub_1BCA8025C(0);
    memcpy(v111, v112, *(_QWORD *)(*(_QWORD *)(v115 - 8) + 64));
  }
  else
  {
    *v111 = *(_QWORD *)v112;
    v111[1] = *((_QWORD *)v112 + 1);
    *((_BYTE *)v111 + 16) = v112[16];
    v187 = *(int *)(v113 + 24);
    v188 = (char *)v111 + v187;
    v222 = &v112[v187];
    v189 = *(void (**)(char *, char *, uint64_t))(v84 + 16);
    swift_bridgeObjectRetain();
    v189(v188, v222, v83);
    v189((char *)v111 + *(int *)(v113 + 28), &v112[*(int *)(v113 + 28)], v83);
    ((void (*)(_QWORD *, _QWORD, uint64_t, uint64_t))v225[7])(v111, 0, 1, v113);
  }
  a1 = v218;
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v105 + 56))(v102, 0, 1, v104);
  return a1;
}

uint64_t initializeWithTake for SignificantChangeEngine.State(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  int *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  __int128 v34;
  uint64_t v35;
  char *v36;
  char *v37;
  __int128 v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int *v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  void (*v68)(char *, char *, uint64_t);
  uint64_t v70;
  char *v71;
  char *v72;
  void (*v73)(char *, char *, uint64_t);
  char *__dst;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  void (*v81)(char *, char *, uint64_t);
  uint64_t v82;

  v6 = sub_1BCAB4BD8();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v8 = *(int *)(a3 + 20);
  v9 = (char *)(a1 + v8);
  v10 = (char *)(a2 + v8);
  v11 = type metadata accessor for SignificantChangeEngine.State.MeanShift(0);
  v12 = *(_QWORD *)(v11 - 8);
  v81 = (void (*)(char *, char *, uint64_t))v7;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
  {
    sub_1BCA7F3E0(0);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v77 = v12;
    v14 = type metadata accessor for SignificantChange(0);
    v15 = *(_QWORD *)(v14 - 8);
    v79 = v6;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v10, 1, v14))
    {
      sub_1BCA7EFBC(0);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    }
    else
    {
      v75 = v15;
      v7((uint64_t)v9, (uint64_t)v10, v6);
      v17 = (int *)type metadata accessor for SignificantChange.Period(0);
      *(_QWORD *)&v9[v17[5]] = *(_QWORD *)&v10[v17[5]];
      *(_QWORD *)&v9[v17[6]] = *(_QWORD *)&v10[v17[6]];
      v9[v17[7]] = v10[v17[7]];
      *(_QWORD *)&v9[*(int *)(v14 + 20)] = *(_QWORD *)&v10[*(int *)(v14 + 20)];
      v18 = *(int *)(v14 + 24);
      __dst = &v9[v18];
      v19 = &v10[v18];
      v20 = type metadata accessor for SignificantChange.Notification(0);
      v21 = *(_QWORD *)(v20 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
      {
        sub_1BCA8025C(0);
        memcpy(__dst, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
      }
      else
      {
        *(_OWORD *)__dst = *(_OWORD *)v19;
        __dst[16] = v19[16];
        v23 = *(int *)(v20 + 24);
        v71 = &v19[v23];
        v72 = &__dst[v23];
        v70 = sub_1BCAB4E54();
        v73 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v70 - 8) + 32);
        v73(v72, v71, v70);
        v73(&__dst[*(int *)(v20 + 28)], &v19[*(int *)(v20 + 28)], v70);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(__dst, 0, 1, v20);
      }
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v75 + 56))(v9, 0, 1, v14);
    }
    v24 = *(int *)(v11 + 20);
    v25 = &v9[v24];
    v26 = &v10[v24];
    v27 = (int *)type metadata accessor for SignificantChangeEngine.Changepoint(0);
    v28 = *((_QWORD *)v27 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v28 + 48))(v26, 1, v27))
    {
      sub_1BC9DBE2C(0);
      memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    }
    else
    {
      v30 = sub_1BCAB4E54();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v30 - 8) + 32))(v25, v26, v30);
      *(_QWORD *)&v25[v27[5]] = *(_QWORD *)&v26[v27[5]];
      *(_QWORD *)&v25[v27[6]] = *(_QWORD *)&v26[v27[6]];
      *(_QWORD *)&v25[v27[7]] = *(_QWORD *)&v26[v27[7]];
      *(_QWORD *)&v25[v27[8]] = *(_QWORD *)&v26[v27[8]];
      *(_QWORD *)&v25[v27[9]] = *(_QWORD *)&v26[v27[9]];
      *(_QWORD *)&v25[v27[10]] = *(_QWORD *)&v26[v27[10]];
      v31 = v27[11];
      v32 = &v25[v31];
      v33 = &v26[v31];
      v34 = *((_OWORD *)v33 + 1);
      *(_OWORD *)v32 = *(_OWORD *)v33;
      *((_OWORD *)v32 + 1) = v34;
      *((_QWORD *)v32 + 4) = *((_QWORD *)v33 + 4);
      v35 = v27[12];
      v36 = &v25[v35];
      v37 = &v26[v35];
      v38 = *((_OWORD *)v37 + 1);
      *(_OWORD *)v36 = *(_OWORD *)v37;
      *((_OWORD *)v36 + 1) = v38;
      *((_QWORD *)v36 + 4) = *((_QWORD *)v37 + 4);
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v28 + 56))(v25, 0, 1, v27);
    }
    v39 = *(int *)(v11 + 24);
    v40 = &v9[v39];
    v41 = &v10[v39];
    v42 = sub_1BCAB4E54();
    v43 = *(_QWORD *)(v42 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48))(v41, 1, v42))
    {
      sub_1BCA7F46C(0);
      memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v43 + 32))(v40, v41, v42);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v43 + 56))(v40, 0, 1, v42);
    }
    v6 = v79;
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v77 + 56))(v9, 0, 1, v11);
  }
  v45 = *(int *)(a3 + 24);
  v46 = (char *)(a1 + v45);
  v47 = (char *)(a2 + v45);
  v48 = type metadata accessor for SignificantChangeEngine.State.FrequencyShift(0);
  v49 = *(_QWORD *)(v48 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v49 + 48))(v47, 1, v48))
  {
    sub_1BCA7F41C(0);
    memcpy(v46, v47, *(_QWORD *)(*(_QWORD *)(v50 - 8) + 64));
  }
  else
  {
    v51 = sub_1BCAB4E54();
    v52 = *(_QWORD *)(v51 - 8);
    v78 = v52;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v52 + 48))(v47, 1, v51))
    {
      sub_1BCA7F46C(0);
      memcpy(v46, v47, *(_QWORD *)(*(_QWORD *)(v53 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v52 + 32))(v46, v47, v51);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v52 + 56))(v46, 0, 1, v51);
    }
    v46[*(int *)(v48 + 20)] = v47[*(int *)(v48 + 20)];
    v54 = *(int *)(v48 + 24);
    v55 = &v46[v54];
    v56 = &v47[v54];
    v57 = type metadata accessor for SignificantChange(0);
    v58 = *(_QWORD *)(v57 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v58 + 48))(v56, 1, v57))
    {
      sub_1BCA7EFBC(0);
      memcpy(v55, v56, *(_QWORD *)(*(_QWORD *)(v59 - 8) + 64));
    }
    else
    {
      v76 = v58;
      v81(v55, v56, v6);
      v60 = (int *)type metadata accessor for SignificantChange.Period(0);
      *(_QWORD *)&v55[v60[5]] = *(_QWORD *)&v56[v60[5]];
      *(_QWORD *)&v55[v60[6]] = *(_QWORD *)&v56[v60[6]];
      v55[v60[7]] = v56[v60[7]];
      *(_QWORD *)&v55[*(int *)(v57 + 20)] = *(_QWORD *)&v56[*(int *)(v57 + 20)];
      v61 = *(int *)(v57 + 24);
      v62 = &v55[v61];
      v63 = &v56[v61];
      v64 = type metadata accessor for SignificantChange.Notification(0);
      v82 = *(_QWORD *)(v64 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v82 + 48))(v63, 1, v64))
      {
        sub_1BCA8025C(0);
        memcpy(v62, v63, *(_QWORD *)(*(_QWORD *)(v65 - 8) + 64));
      }
      else
      {
        *(_OWORD *)v62 = *(_OWORD *)v63;
        v62[16] = v63[16];
        v66 = *(int *)(v64 + 24);
        v67 = &v62[v66];
        v80 = v62;
        v68 = *(void (**)(char *, char *, uint64_t))(v78 + 32);
        v68(v67, &v63[v66], v51);
        v68(&v80[*(int *)(v64 + 28)], &v63[*(int *)(v64 + 28)], v51);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v82 + 56))(v80, 0, 1, v64);
      }
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v76 + 56))(v55, 0, 1, v57);
    }
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v49 + 56))(v46, 0, 1, v48);
  }
  return a1;
}

uint64_t assignWithTake for SignificantChangeEngine.State(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  _BYTE *v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(_BYTE *, uint64_t, uint64_t);
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  size_t v20;
  char *v21;
  char *v22;
  int *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(_BYTE *, uint64_t, uint64_t);
  int v27;
  int v28;
  int *v29;
  uint64_t v30;
  _BYTE *v31;
  _BYTE *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int *v36;
  uint64_t v37;
  _BYTE *v38;
  _BYTE *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  size_t v43;
  void *v44;
  const void *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  int *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  __int128 v57;
  uint64_t v58;
  char *v59;
  char *v60;
  __int128 v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t (*v73)(char *, uint64_t, uint64_t);
  int v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  size_t v80;
  void *v81;
  char *v82;
  void (*v83)(char *, char *, uint64_t);
  uint64_t v84;
  uint64_t v85;
  uint64_t (*v86)(char *, uint64_t, uint64_t);
  int v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int *v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t (*v106)(char *, uint64_t, uint64_t);
  int v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  void (*v111)(char *, char *, uint64_t);
  int *v113;
  uint64_t v114;
  char *v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  int *v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t (*v126)(uint64_t, uint64_t, uint64_t);
  int v127;
  int v128;
  uint64_t v129;
  uint64_t v130;
  void (*v131)(uint64_t, char *, uint64_t);
  int *v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t (*v138)(uint64_t, uint64_t, uint64_t);
  int v139;
  int v140;
  void (*v141)(uint64_t, char *, uint64_t);
  uint64_t v142;
  uint64_t v143;
  void (*v144)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v145;
  char *v146;
  char *v147;
  int *v148;
  uint64_t v149;
  uint64_t (*v150)(char *, uint64_t, int *);
  int v151;
  int v152;
  uint64_t v153;
  uint64_t v154;
  char *v155;
  char *v156;
  __int128 v157;
  uint64_t v158;
  char *v159;
  char *v160;
  __int128 v161;
  uint64_t v162;
  uint64_t v163;
  char *v164;
  char *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t (*v168)(char *, uint64_t, uint64_t);
  int v169;
  int v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  char *v174;
  char *v175;
  __int128 v176;
  uint64_t v177;
  char *v178;
  char *v179;
  __int128 v180;
  void (*v181)(char *, char *, uint64_t);
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  void (*v188)(uint64_t, char *, uint64_t);
  uint64_t v189;
  void (*v190)(uint64_t, char *, uint64_t);
  uint64_t v191;
  _BYTE *v192;
  _BYTE *v193;
  _BYTE *v194;
  _BYTE *v195;
  void (*v196)(_BYTE *, _BYTE *, uint64_t);
  char *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  _BYTE *v201;
  char *v202;
  void (*v203)(uint64_t, uint64_t, uint64_t);
  void (*v204)(uint64_t, uint64_t, uint64_t);
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  int *__dst;
  char *__dsta;

  v6 = sub_1BCAB4BD8();
  v209 = *(_QWORD *)(v6 - 8);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v209 + 40);
  v7(a1, a2, v6);
  __dst = a3;
  v8 = a3[5];
  v9 = (_BYTE *)(a1 + v8);
  v10 = (_BYTE *)(a2 + v8);
  v11 = type metadata accessor for SignificantChangeEngine.State.MeanShift(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v12 + 48);
  v14 = v13(v9, 1, v11);
  v15 = v13(v10, 1, v11);
  v208 = v6;
  if (!v14)
  {
    if (v15)
    {
      sub_1BC997208((uint64_t)v9, type metadata accessor for SignificantChangeEngine.State.MeanShift);
      goto LABEL_7;
    }
    v204 = v7;
    v24 = type metadata accessor for SignificantChange(0);
    v25 = *(_QWORD *)(v24 - 8);
    v26 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v25 + 48);
    v27 = v26(v9, 1, v24);
    v28 = v26(v10, 1, v24);
    v206 = a1;
    if (v27)
    {
      if (!v28)
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v209 + 32))(v9, v10, v6);
        v29 = (int *)type metadata accessor for SignificantChange.Period(0);
        *(_QWORD *)&v9[v29[5]] = *(_QWORD *)&v10[v29[5]];
        *(_QWORD *)&v9[v29[6]] = *(_QWORD *)&v10[v29[6]];
        v9[v29[7]] = v10[v29[7]];
        *(_QWORD *)&v9[*(int *)(v24 + 20)] = *(_QWORD *)&v10[*(int *)(v24 + 20)];
        v30 = *(int *)(v24 + 24);
        v31 = &v9[v30];
        v32 = &v10[v30];
        v33 = type metadata accessor for SignificantChange.Notification(0);
        v34 = *(_QWORD *)(v33 - 8);
        if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v34 + 48))(v32, 1, v33))
        {
          sub_1BCA8025C(0);
          memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
        }
        else
        {
          *(_OWORD *)v31 = *(_OWORD *)v32;
          v31[16] = v32[16];
          v142 = *(int *)(v33 + 24);
          v193 = &v32[v142];
          v195 = &v31[v142];
          v198 = v34;
          v201 = v31;
          v143 = sub_1BCAB4E54();
          v144 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v143 - 8) + 32);
          v144(v195, v193, v143);
          v144(&v201[*(int *)(v33 + 28)], &v32[*(int *)(v33 + 28)], v143);
          (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v198 + 56))(v201, 0, 1, v33);
        }
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v9, 0, 1, v24);
LABEL_69:
        v145 = *(int *)(v11 + 20);
        v146 = &v9[v145];
        v147 = &v10[v145];
        v148 = (int *)type metadata accessor for SignificantChangeEngine.Changepoint(0);
        v149 = *((_QWORD *)v148 - 1);
        v150 = *(uint64_t (**)(char *, uint64_t, int *))(v149 + 48);
        v151 = v150(v146, 1, v148);
        v152 = v150(v147, 1, v148);
        if (v151)
        {
          if (!v152)
          {
            v153 = sub_1BCAB4E54();
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v153 - 8) + 32))(v146, v147, v153);
            *(_QWORD *)&v146[v148[5]] = *(_QWORD *)&v147[v148[5]];
            *(_QWORD *)&v146[v148[6]] = *(_QWORD *)&v147[v148[6]];
            *(_QWORD *)&v146[v148[7]] = *(_QWORD *)&v147[v148[7]];
            *(_QWORD *)&v146[v148[8]] = *(_QWORD *)&v147[v148[8]];
            *(_QWORD *)&v146[v148[9]] = *(_QWORD *)&v147[v148[9]];
            *(_QWORD *)&v146[v148[10]] = *(_QWORD *)&v147[v148[10]];
            v154 = v148[11];
            v155 = &v146[v154];
            v156 = &v147[v154];
            v157 = *((_OWORD *)v156 + 1);
            *(_OWORD *)v155 = *(_OWORD *)v156;
            *((_OWORD *)v155 + 1) = v157;
            *((_QWORD *)v155 + 4) = *((_QWORD *)v156 + 4);
            v158 = v148[12];
            v159 = &v146[v158];
            v160 = &v147[v158];
            v161 = *((_OWORD *)v160 + 1);
            *(_OWORD *)v159 = *(_OWORD *)v160;
            *((_OWORD *)v159 + 1) = v161;
            *((_QWORD *)v159 + 4) = *((_QWORD *)v160 + 4);
            (*(void (**)(char *, _QWORD, uint64_t, int *))(v149 + 56))(v146, 0, 1, v148);
LABEL_75:
            v7 = v204;
            a1 = v206;
            v163 = *(int *)(v11 + 24);
            v164 = &v9[v163];
            v165 = &v10[v163];
            v166 = sub_1BCAB4E54();
            v167 = *(_QWORD *)(v166 - 8);
            v168 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v167 + 48);
            v169 = v168(v164, 1, v166);
            v170 = v168(v165, 1, v166);
            if (v169)
            {
              if (!v170)
              {
                (*(void (**)(char *, char *, uint64_t))(v167 + 32))(v164, v165, v166);
                (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v167 + 56))(v164, 0, 1, v166);
                goto LABEL_9;
              }
            }
            else
            {
              if (!v170)
              {
                (*(void (**)(char *, char *, uint64_t))(v167 + 40))(v164, v165, v166);
                goto LABEL_9;
              }
              (*(void (**)(char *, uint64_t))(v167 + 8))(v164, v166);
            }
            sub_1BCA7F46C(0);
            v20 = *(_QWORD *)(*(_QWORD *)(v171 - 8) + 64);
            v21 = v164;
            v22 = v165;
LABEL_8:
            memcpy(v21, v22, v20);
LABEL_9:
            v23 = __dst;
            goto LABEL_29;
          }
        }
        else
        {
          if (!v152)
          {
            v172 = sub_1BCAB4E54();
            (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v172 - 8) + 40))(v146, v147, v172);
            *(_QWORD *)&v146[v148[5]] = *(_QWORD *)&v147[v148[5]];
            *(_QWORD *)&v146[v148[6]] = *(_QWORD *)&v147[v148[6]];
            *(_QWORD *)&v146[v148[7]] = *(_QWORD *)&v147[v148[7]];
            *(_QWORD *)&v146[v148[8]] = *(_QWORD *)&v147[v148[8]];
            *(_QWORD *)&v146[v148[9]] = *(_QWORD *)&v147[v148[9]];
            *(_QWORD *)&v146[v148[10]] = *(_QWORD *)&v147[v148[10]];
            v173 = v148[11];
            v174 = &v146[v173];
            v175 = &v147[v173];
            v176 = *((_OWORD *)v175 + 1);
            *(_OWORD *)v174 = *(_OWORD *)v175;
            *((_OWORD *)v174 + 1) = v176;
            *((_QWORD *)v174 + 4) = *((_QWORD *)v175 + 4);
            v177 = v148[12];
            v178 = &v146[v177];
            v179 = &v147[v177];
            v180 = *((_OWORD *)v179 + 1);
            *(_OWORD *)v178 = *(_OWORD *)v179;
            *((_OWORD *)v178 + 1) = v180;
            *((_QWORD *)v178 + 4) = *((_QWORD *)v179 + 4);
            goto LABEL_75;
          }
          sub_1BC997208((uint64_t)v146, type metadata accessor for SignificantChangeEngine.Changepoint);
        }
        sub_1BC9DBE2C(0);
        memcpy(v146, v147, *(_QWORD *)(*(_QWORD *)(v162 - 8) + 64));
        goto LABEL_75;
      }
    }
    else
    {
      if (!v28)
      {
        v204((uint64_t)v9, (uint64_t)v10, v6);
        v120 = (int *)type metadata accessor for SignificantChange.Period(0);
        *(_QWORD *)&v9[v120[5]] = *(_QWORD *)&v10[v120[5]];
        *(_QWORD *)&v9[v120[6]] = *(_QWORD *)&v10[v120[6]];
        v9[v120[7]] = v10[v120[7]];
        *(_QWORD *)&v9[*(int *)(v24 + 20)] = *(_QWORD *)&v10[*(int *)(v24 + 20)];
        swift_bridgeObjectRelease();
        v121 = *(int *)(v24 + 24);
        v122 = (uint64_t)&v9[v121];
        v123 = &v10[v121];
        v124 = type metadata accessor for SignificantChange.Notification(0);
        v125 = *(_QWORD *)(v124 - 8);
        v126 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v125 + 48);
        v127 = v126(v122, 1, v124);
        v128 = v126((uint64_t)v123, 1, v124);
        if (v127)
        {
          if (!v128)
          {
            *(_OWORD *)v122 = *(_OWORD *)v123;
            *(_BYTE *)(v122 + 16) = v123[16];
            v129 = *(int *)(v124 + 24);
            v197 = &v123[v129];
            v200 = v122 + v129;
            v130 = sub_1BCAB4E54();
            v131 = *(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v130 - 8) + 32);
            v131(v200, v197, v130);
            v131(v122 + *(int *)(v124 + 28), &v123[*(int *)(v124 + 28)], v130);
            (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v125 + 56))(v122, 0, 1, v124);
            goto LABEL_69;
          }
        }
        else
        {
          if (!v128)
          {
            v184 = *((_QWORD *)v123 + 1);
            *(_QWORD *)v122 = *(_QWORD *)v123;
            *(_QWORD *)(v122 + 8) = v184;
            swift_bridgeObjectRelease();
            *(_BYTE *)(v122 + 16) = v123[16];
            v185 = *(int *)(v124 + 24);
            v186 = v122 + v185;
            v202 = &v123[v185];
            v187 = sub_1BCAB4E54();
            v188 = *(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v187 - 8) + 40);
            v188(v186, v202, v187);
            v188(v122 + *(int *)(v124 + 28), &v123[*(int *)(v124 + 28)], v187);
            goto LABEL_69;
          }
          sub_1BC997208(v122, type metadata accessor for SignificantChange.Notification);
        }
        sub_1BCA8025C(0);
        v43 = *(_QWORD *)(*(_QWORD *)(v182 - 8) + 64);
        v44 = (void *)v122;
        v45 = v123;
LABEL_19:
        memcpy(v44, v45, v43);
        goto LABEL_69;
      }
      sub_1BC997208((uint64_t)v9, type metadata accessor for SignificantChange);
    }
    sub_1BCA7EFBC(0);
    v43 = *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64);
    v44 = v9;
    v45 = v10;
    goto LABEL_19;
  }
  if (v15)
  {
LABEL_7:
    sub_1BCA7F3E0(0);
    v20 = *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64);
    v21 = v9;
    v22 = v10;
    goto LABEL_8;
  }
  v203 = v7;
  v16 = type metadata accessor for SignificantChange(0);
  v17 = *(_QWORD *)(v16 - 8);
  v205 = a1;
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v17 + 48))(v10, 1, v16))
  {
    sub_1BCA7EFBC(0);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v209 + 32))(v9, v10, v6);
    v36 = (int *)type metadata accessor for SignificantChange.Period(0);
    *(_QWORD *)&v9[v36[5]] = *(_QWORD *)&v10[v36[5]];
    *(_QWORD *)&v9[v36[6]] = *(_QWORD *)&v10[v36[6]];
    v9[v36[7]] = v10[v36[7]];
    *(_QWORD *)&v9[*(int *)(v16 + 20)] = *(_QWORD *)&v10[*(int *)(v16 + 20)];
    v37 = *(int *)(v16 + 24);
    v38 = &v9[v37];
    v39 = &v10[v37];
    v40 = type metadata accessor for SignificantChange.Notification(0);
    v199 = *(_QWORD *)(v40 - 8);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v199 + 48))(v39, 1, v40))
    {
      sub_1BCA8025C(0);
      memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
    }
    else
    {
      *(_OWORD *)v38 = *(_OWORD *)v39;
      v38[16] = v39[16];
      v46 = *(int *)(v40 + 24);
      v192 = &v39[v46];
      v194 = &v38[v46];
      v191 = sub_1BCAB4E54();
      v196 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v191 - 8) + 32);
      v196(v194, v192, v191);
      v196(&v38[*(int *)(v40 + 28)], &v39[*(int *)(v40 + 28)], v191);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v199 + 56))(v38, 0, 1, v40);
    }
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v9, 0, 1, v16);
  }
  v47 = *(int *)(v11 + 20);
  v48 = &v9[v47];
  v49 = &v10[v47];
  v50 = (int *)type metadata accessor for SignificantChangeEngine.Changepoint(0);
  v51 = *((_QWORD *)v50 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v51 + 48))(v49, 1, v50))
  {
    sub_1BC9DBE2C(0);
    memcpy(v48, v49, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
  }
  else
  {
    v53 = sub_1BCAB4E54();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v53 - 8) + 32))(v48, v49, v53);
    *(_QWORD *)&v48[v50[5]] = *(_QWORD *)&v49[v50[5]];
    *(_QWORD *)&v48[v50[6]] = *(_QWORD *)&v49[v50[6]];
    *(_QWORD *)&v48[v50[7]] = *(_QWORD *)&v49[v50[7]];
    *(_QWORD *)&v48[v50[8]] = *(_QWORD *)&v49[v50[8]];
    *(_QWORD *)&v48[v50[9]] = *(_QWORD *)&v49[v50[9]];
    *(_QWORD *)&v48[v50[10]] = *(_QWORD *)&v49[v50[10]];
    v54 = v50[11];
    v55 = &v48[v54];
    v56 = &v49[v54];
    v57 = *((_OWORD *)v56 + 1);
    *(_OWORD *)v55 = *(_OWORD *)v56;
    *((_OWORD *)v55 + 1) = v57;
    *((_QWORD *)v55 + 4) = *((_QWORD *)v56 + 4);
    v58 = v50[12];
    v59 = &v48[v58];
    v60 = &v49[v58];
    v61 = *((_OWORD *)v60 + 1);
    *(_OWORD *)v59 = *(_OWORD *)v60;
    *((_OWORD *)v59 + 1) = v61;
    *((_QWORD *)v59 + 4) = *((_QWORD *)v60 + 4);
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v51 + 56))(v48, 0, 1, v50);
  }
  a1 = v205;
  v62 = *(int *)(v11 + 24);
  v63 = &v9[v62];
  v64 = &v10[v62];
  v65 = sub_1BCAB4E54();
  v66 = *(_QWORD *)(v65 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v66 + 48))(v64, 1, v65))
  {
    sub_1BCA7F46C(0);
    memcpy(v63, v64, *(_QWORD *)(*(_QWORD *)(v67 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v66 + 32))(v63, v64, v65);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v66 + 56))(v63, 0, 1, v65);
  }
  v7 = v203;
  v23 = __dst;
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
LABEL_29:
  v68 = v23[6];
  v69 = (char *)(a1 + v68);
  v70 = (char *)(a2 + v68);
  v71 = type metadata accessor for SignificantChangeEngine.State.FrequencyShift(0);
  v72 = *(_QWORD *)(v71 - 8);
  v73 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v72 + 48);
  v74 = v73(v69, 1, v71);
  v75 = v73(v70, 1, v71);
  if (v74)
  {
    if (!v75)
    {
      v76 = sub_1BCAB4E54();
      v77 = *(_QWORD *)(v76 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v77 + 48))(v70, 1, v76))
      {
        sub_1BCA7F46C(0);
        memcpy(v69, v70, *(_QWORD *)(*(_QWORD *)(v78 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v77 + 32))(v69, v70, v76);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v77 + 56))(v69, 0, 1, v76);
      }
      v69[*(int *)(v71 + 20)] = v70[*(int *)(v71 + 20)];
      v90 = *(int *)(v71 + 24);
      v91 = &v69[v90];
      v92 = &v70[v90];
      v93 = type metadata accessor for SignificantChange(0);
      v94 = *(_QWORD *)(v93 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v94 + 48))(v92, 1, v93))
      {
        sub_1BCA7EFBC(0);
        memcpy(v91, v92, *(_QWORD *)(*(_QWORD *)(v95 - 8) + 64));
      }
      else
      {
        v207 = a1;
        (*(void (**)(char *, char *, uint64_t))(v209 + 32))(v91, v92, v208);
        v96 = (int *)type metadata accessor for SignificantChange.Period(0);
        *(_QWORD *)&v91[v96[5]] = *(_QWORD *)&v92[v96[5]];
        *(_QWORD *)&v91[v96[6]] = *(_QWORD *)&v92[v96[6]];
        v91[v96[7]] = v92[v96[7]];
        *(_QWORD *)&v91[*(int *)(v93 + 20)] = *(_QWORD *)&v92[*(int *)(v93 + 20)];
        v97 = *(int *)(v93 + 24);
        __dsta = &v91[v97];
        v98 = &v92[v97];
        v99 = type metadata accessor for SignificantChange.Notification(0);
        v210 = *(_QWORD *)(v99 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v210 + 48))(v98, 1, v99))
        {
          sub_1BCA8025C(0);
          memcpy(__dsta, v98, *(_QWORD *)(*(_QWORD *)(v100 - 8) + 64));
        }
        else
        {
          *(_OWORD *)__dsta = *(_OWORD *)v98;
          __dsta[16] = v98[16];
          v111 = *(void (**)(char *, char *, uint64_t))(v77 + 32);
          v111(&__dsta[*(int *)(v99 + 24)], &v98[*(int *)(v99 + 24)], v76);
          v111(&__dsta[*(int *)(v99 + 28)], &v98[*(int *)(v99 + 28)], v76);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v210 + 56))(__dsta, 0, 1, v99);
        }
        a1 = v207;
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v94 + 56))(v91, 0, 1, v93);
      }
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v72 + 56))(v69, 0, 1, v71);
      return a1;
    }
    goto LABEL_35;
  }
  if (v75)
  {
    sub_1BC997208((uint64_t)v69, type metadata accessor for SignificantChangeEngine.State.FrequencyShift);
LABEL_35:
    sub_1BCA7F41C(0);
    v80 = *(_QWORD *)(*(_QWORD *)(v79 - 8) + 64);
    v81 = v69;
    goto LABEL_36;
  }
  v83 = (void (*)(char *, char *, uint64_t))v7;
  v84 = sub_1BCAB4E54();
  v85 = *(_QWORD *)(v84 - 8);
  v86 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v85 + 48);
  v87 = v86(v69, 1, v84);
  v88 = v86(v70, 1, v84);
  v89 = a1;
  if (v87)
  {
    if (!v88)
    {
      (*(void (**)(char *, char *, uint64_t))(v85 + 32))(v69, v70, v84);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v85 + 56))(v69, 0, 1, v84);
      goto LABEL_49;
    }
    goto LABEL_48;
  }
  if (v88)
  {
    (*(void (**)(char *, uint64_t))(v85 + 8))(v69, v84);
LABEL_48:
    sub_1BCA7F46C(0);
    memcpy(v69, v70, *(_QWORD *)(*(_QWORD *)(v101 - 8) + 64));
    goto LABEL_49;
  }
  (*(void (**)(char *, char *, uint64_t))(v85 + 40))(v69, v70, v84);
LABEL_49:
  v69[*(int *)(v71 + 20)] = v70[*(int *)(v71 + 20)];
  v102 = *(int *)(v71 + 24);
  v103 = &v69[v102];
  v70 += v102;
  v104 = type metadata accessor for SignificantChange(0);
  v105 = *(_QWORD *)(v104 - 8);
  v106 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v105 + 48);
  v107 = v106(v103, 1, v104);
  v108 = v106(v70, 1, v104);
  if (!v107)
  {
    a1 = v89;
    if (!v108)
    {
      v83(v103, v70, v208);
      v132 = (int *)type metadata accessor for SignificantChange.Period(0);
      *(_QWORD *)&v103[v132[5]] = *(_QWORD *)&v70[v132[5]];
      *(_QWORD *)&v103[v132[6]] = *(_QWORD *)&v70[v132[6]];
      v103[v132[7]] = v70[v132[7]];
      *(_QWORD *)&v103[*(int *)(v104 + 20)] = *(_QWORD *)&v70[*(int *)(v104 + 20)];
      swift_bridgeObjectRelease();
      v133 = *(int *)(v104 + 24);
      v134 = (uint64_t)&v103[v133];
      v135 = &v70[v133];
      v136 = type metadata accessor for SignificantChange.Notification(0);
      v137 = *(_QWORD *)(v136 - 8);
      v138 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v137 + 48);
      v139 = v138(v134, 1, v136);
      v140 = v138((uint64_t)v135, 1, v136);
      if (v139)
      {
        if (!v140)
        {
          *(_OWORD *)v134 = *(_OWORD *)v135;
          *(_BYTE *)(v134 + 16) = v135[16];
          v141 = *(void (**)(uint64_t, char *, uint64_t))(v85 + 32);
          v141(v134 + *(int *)(v136 + 24), &v135[*(int *)(v136 + 24)], v84);
          v141(v134 + *(int *)(v136 + 28), &v135[*(int *)(v136 + 28)], v84);
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v137 + 56))(v134, 0, 1, v136);
          return a1;
        }
      }
      else
      {
        if (!v140)
        {
          v189 = *((_QWORD *)v135 + 1);
          *(_QWORD *)v134 = *(_QWORD *)v135;
          *(_QWORD *)(v134 + 8) = v189;
          swift_bridgeObjectRelease();
          *(_BYTE *)(v134 + 16) = v135[16];
          v190 = *(void (**)(uint64_t, char *, uint64_t))(v85 + 40);
          v190(v134 + *(int *)(v136 + 24), &v135[*(int *)(v136 + 24)], v84);
          v190(v134 + *(int *)(v136 + 28), &v135[*(int *)(v136 + 28)], v84);
          return a1;
        }
        sub_1BC997208(v134, type metadata accessor for SignificantChange.Notification);
      }
      sub_1BCA8025C(0);
      v80 = *(_QWORD *)(*(_QWORD *)(v183 - 8) + 64);
      v81 = (void *)v134;
      v82 = v135;
      goto LABEL_37;
    }
    sub_1BC997208((uint64_t)v103, type metadata accessor for SignificantChange);
    sub_1BCA7EFBC(0);
    v80 = *(_QWORD *)(*(_QWORD *)(v110 - 8) + 64);
    v81 = v103;
LABEL_36:
    v82 = v70;
LABEL_37:
    memcpy(v81, v82, v80);
    return a1;
  }
  if (v108)
  {
    sub_1BCA7EFBC(0);
    memcpy(v103, v70, *(_QWORD *)(*(_QWORD *)(v109 - 8) + 64));
    return v89;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v209 + 32))(v103, v70, v208);
    v113 = (int *)type metadata accessor for SignificantChange.Period(0);
    *(_QWORD *)&v103[v113[5]] = *(_QWORD *)&v70[v113[5]];
    *(_QWORD *)&v103[v113[6]] = *(_QWORD *)&v70[v113[6]];
    v103[v113[7]] = v70[v113[7]];
    *(_QWORD *)&v103[*(int *)(v104 + 20)] = *(_QWORD *)&v70[*(int *)(v104 + 20)];
    v114 = *(int *)(v104 + 24);
    v115 = &v103[v114];
    v116 = &v70[v114];
    v117 = type metadata accessor for SignificantChange.Notification(0);
    v118 = *(_QWORD *)(v117 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v118 + 48))(v116, 1, v117))
    {
      sub_1BCA8025C(0);
      memcpy(v115, v116, *(_QWORD *)(*(_QWORD *)(v119 - 8) + 64));
    }
    else
    {
      *(_OWORD *)v115 = *(_OWORD *)v116;
      v115[16] = v116[16];
      v181 = *(void (**)(char *, char *, uint64_t))(v85 + 32);
      v181(&v115[*(int *)(v117 + 24)], &v116[*(int *)(v117 + 24)], v84);
      v181(&v115[*(int *)(v117 + 28)], &v116[*(int *)(v117 + 28)], v84);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v118 + 56))(v115, 0, 1, v117);
    }
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v105 + 56))(v103, 0, 1, v104);
    return v89;
  }
}

uint64_t getEnumTagSinglePayload for SignificantChangeEngine.State()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BCA8991C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_index_1Tm(a1, a2, a3, (uint64_t (*)(_QWORD))MEMORY[0x1E0CAE5D0], (uint64_t (*)(_QWORD))sub_1BCA7F3E0, (uint64_t (*)(_QWORD))sub_1BCA7F41C);
}

uint64_t storeEnumTagSinglePayload for SignificantChangeEngine.State()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BCA89944(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_index_2Tm(a1, a2, a3, a4, (uint64_t (*)(_QWORD))MEMORY[0x1E0CAE5D0], (uint64_t (*)(_QWORD))sub_1BCA7F3E0, (uint64_t (*)(_QWORD))sub_1BCA7F41C);
}

uint64_t sub_1BCA89960(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1BCA8B480(a1, a2, a3, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAE5D0], (uint64_t (*)(uint64_t))sub_1BCA7F3E0, (uint64_t (*)(uint64_t))sub_1BCA7F41C);
}

uint64_t *initializeBufferWithCopyOfBuffer for SignificantChangeEngine.State.MeanShift(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  unsigned int (*v17)(_QWORD *, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, char *, uint64_t);
  uint64_t v23;
  char *v24;
  char *v25;
  int *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  __int128 v33;
  uint64_t v34;
  char *v35;
  char *v36;
  __int128 v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v45;
  char *v46;
  uint64_t v47;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for SignificantChange(0);
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      sub_1BCA7EFBC(0);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      v11 = sub_1BCAB4BD8();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a1, a2, v11);
      v12 = (int *)type metadata accessor for SignificantChange.Period(0);
      *(uint64_t *)((char *)a1 + v12[5]) = *(uint64_t *)((char *)a2 + v12[5]);
      *(uint64_t *)((char *)a1 + v12[6]) = *(uint64_t *)((char *)a2 + v12[6]);
      *((_BYTE *)a1 + v12[7]) = *((_BYTE *)a2 + v12[7]);
      *(uint64_t *)((char *)a1 + *(int *)(v7 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(v7 + 20));
      v13 = *(int *)(v7 + 24);
      v14 = (uint64_t *)((char *)a1 + v13);
      v15 = (uint64_t *)((char *)a2 + v13);
      v16 = type metadata accessor for SignificantChange.Notification(0);
      v47 = *(_QWORD *)(v16 - 8);
      v17 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v47 + 48);
      swift_bridgeObjectRetain();
      if (v17(v15, 1, v16))
      {
        sub_1BCA8025C(0);
        memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
      }
      else
      {
        v19 = v15[1];
        *v14 = *v15;
        v14[1] = v19;
        *((_BYTE *)v14 + 16) = *((_BYTE *)v15 + 16);
        v20 = *(int *)(v16 + 24);
        v45 = (char *)v15 + v20;
        v46 = (char *)v14 + v20;
        v21 = sub_1BCAB4E54();
        v22 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 16);
        swift_bridgeObjectRetain();
        v22(v46, v45, v21);
        v22((char *)v14 + *(int *)(v16 + 28), (char *)v15 + *(int *)(v16 + 28), v21);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v47 + 56))(v14, 0, 1, v16);
      }
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    v23 = *(int *)(a3 + 20);
    v24 = (char *)a1 + v23;
    v25 = (char *)a2 + v23;
    v26 = (int *)type metadata accessor for SignificantChangeEngine.Changepoint(0);
    v27 = *((_QWORD *)v26 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v27 + 48))(v25, 1, v26))
    {
      sub_1BC9DBE2C(0);
      memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    }
    else
    {
      v29 = sub_1BCAB4E54();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v29 - 8) + 16))(v24, v25, v29);
      *(_QWORD *)&v24[v26[5]] = *(_QWORD *)&v25[v26[5]];
      *(_QWORD *)&v24[v26[6]] = *(_QWORD *)&v25[v26[6]];
      *(_QWORD *)&v24[v26[7]] = *(_QWORD *)&v25[v26[7]];
      *(_QWORD *)&v24[v26[8]] = *(_QWORD *)&v25[v26[8]];
      *(_QWORD *)&v24[v26[9]] = *(_QWORD *)&v25[v26[9]];
      *(_QWORD *)&v24[v26[10]] = *(_QWORD *)&v25[v26[10]];
      v30 = v26[11];
      v31 = &v24[v30];
      v32 = &v25[v30];
      v33 = *((_OWORD *)v32 + 1);
      *(_OWORD *)v31 = *(_OWORD *)v32;
      *((_OWORD *)v31 + 1) = v33;
      *((_QWORD *)v31 + 4) = *((_QWORD *)v32 + 4);
      v34 = v26[12];
      v35 = &v24[v34];
      v36 = &v25[v34];
      v37 = *((_OWORD *)v36 + 1);
      *(_OWORD *)v35 = *(_OWORD *)v36;
      *((_OWORD *)v35 + 1) = v37;
      *((_QWORD *)v35 + 4) = *((_QWORD *)v36 + 4);
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v27 + 56))(v24, 0, 1, v26);
    }
    v38 = *(int *)(a3 + 24);
    v39 = (char *)a1 + v38;
    v40 = (char *)a2 + v38;
    v41 = sub_1BCAB4E54();
    v42 = *(_QWORD *)(v41 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v40, 1, v41))
    {
      sub_1BCA7F46C(0);
      memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v42 + 16))(v39, v40, v41);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v42 + 56))(v39, 0, 1, v41);
    }
  }
  return a1;
}

uint64_t destroy for SignificantChangeEngine.State.MeanShift(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;

  v4 = type metadata accessor for SignificantChange(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, 1, v4))
  {
    v5 = sub_1BCAB4BD8();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
    swift_bridgeObjectRelease();
    v6 = a1 + *(int *)(v4 + 24);
    v7 = type metadata accessor for SignificantChange.Notification(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7))
    {
      swift_bridgeObjectRelease();
      v8 = v6 + *(int *)(v7 + 24);
      v9 = sub_1BCAB4E54();
      v10 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8);
      v10(v8, v9);
      v10(v6 + *(int *)(v7 + 28), v9);
    }
  }
  v11 = a1 + *(int *)(a2 + 20);
  v12 = type metadata accessor for SignificantChangeEngine.Changepoint(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 48))(v11, 1, v12))
  {
    v13 = sub_1BCAB4E54();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v11, v13);
  }
  v14 = a1 + *(int *)(a2 + 24);
  v15 = sub_1BCAB4E54();
  v16 = *(_QWORD *)(v15 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 8))(v14, v15);
  return result;
}

char *initializeWithCopy for SignificantChangeEngine.State.MeanShift(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int (*v16)(char *, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, char *, uint64_t);
  uint64_t v22;
  char *v23;
  char *v24;
  int *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  __int128 v32;
  uint64_t v33;
  char *v34;
  char *v35;
  __int128 v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v44;
  char *v45;
  uint64_t v46;

  v6 = type metadata accessor for SignificantChange(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    sub_1BCA7EFBC(0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    v46 = a3;
    v9 = sub_1BCAB4BD8();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a1, a2, v9);
    v10 = (int *)type metadata accessor for SignificantChange.Period(0);
    *(_QWORD *)&a1[v10[5]] = *(_QWORD *)&a2[v10[5]];
    *(_QWORD *)&a1[v10[6]] = *(_QWORD *)&a2[v10[6]];
    a1[v10[7]] = a2[v10[7]];
    *(_QWORD *)&a1[*(int *)(v6 + 20)] = *(_QWORD *)&a2[*(int *)(v6 + 20)];
    v11 = *(int *)(v6 + 24);
    v12 = &a1[v11];
    v13 = &a2[v11];
    v14 = type metadata accessor for SignificantChange.Notification(0);
    v15 = *(_QWORD *)(v14 - 8);
    v16 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48);
    swift_bridgeObjectRetain();
    if (v16(v13, 1, v14))
    {
      sub_1BCA8025C(0);
      memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
    else
    {
      v18 = *((_QWORD *)v13 + 1);
      *(_QWORD *)v12 = *(_QWORD *)v13;
      *((_QWORD *)v12 + 1) = v18;
      v12[16] = v13[16];
      v19 = *(int *)(v14 + 24);
      v44 = &v13[v19];
      v45 = &v12[v19];
      v20 = sub_1BCAB4E54();
      v21 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 16);
      swift_bridgeObjectRetain();
      v21(v45, v44, v20);
      v21(&v12[*(int *)(v14 + 28)], &v13[*(int *)(v14 + 28)], v20);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
    }
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
    a3 = v46;
  }
  v22 = *(int *)(a3 + 20);
  v23 = &a1[v22];
  v24 = &a2[v22];
  v25 = (int *)type metadata accessor for SignificantChangeEngine.Changepoint(0);
  v26 = *((_QWORD *)v25 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v26 + 48))(v24, 1, v25))
  {
    sub_1BC9DBE2C(0);
    memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
  }
  else
  {
    v28 = sub_1BCAB4E54();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v28 - 8) + 16))(v23, v24, v28);
    *(_QWORD *)&v23[v25[5]] = *(_QWORD *)&v24[v25[5]];
    *(_QWORD *)&v23[v25[6]] = *(_QWORD *)&v24[v25[6]];
    *(_QWORD *)&v23[v25[7]] = *(_QWORD *)&v24[v25[7]];
    *(_QWORD *)&v23[v25[8]] = *(_QWORD *)&v24[v25[8]];
    *(_QWORD *)&v23[v25[9]] = *(_QWORD *)&v24[v25[9]];
    *(_QWORD *)&v23[v25[10]] = *(_QWORD *)&v24[v25[10]];
    v29 = v25[11];
    v30 = &v23[v29];
    v31 = &v24[v29];
    v32 = *((_OWORD *)v31 + 1);
    *(_OWORD *)v30 = *(_OWORD *)v31;
    *((_OWORD *)v30 + 1) = v32;
    *((_QWORD *)v30 + 4) = *((_QWORD *)v31 + 4);
    v33 = v25[12];
    v34 = &v23[v33];
    v35 = &v24[v33];
    v36 = *((_OWORD *)v35 + 1);
    *(_OWORD *)v34 = *(_OWORD *)v35;
    *((_OWORD *)v34 + 1) = v36;
    *((_QWORD *)v34 + 4) = *((_QWORD *)v35 + 4);
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v26 + 56))(v23, 0, 1, v25);
  }
  v37 = *(int *)(a3 + 24);
  v38 = &a1[v37];
  v39 = &a2[v37];
  v40 = sub_1BCAB4E54();
  v41 = *(_QWORD *)(v40 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48))(v39, 1, v40))
  {
    sub_1BCA7F46C(0);
    memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v41 + 16))(v38, v39, v40);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v41 + 56))(v38, 0, 1, v40);
  }
  return a1;
}

uint64_t assignWithCopy for SignificantChangeEngine.State.MeanShift(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int (*v18)(_QWORD *, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  size_t v21;
  void *v22;
  const void *v23;
  uint64_t v24;
  int *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(uint64_t, uint64_t, uint64_t);
  int v32;
  int v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  void (*v37)(uint64_t, char *, uint64_t);
  char *v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(char *, char *, uint64_t);
  uint64_t v42;
  char *v43;
  char *v44;
  int *v45;
  uint64_t v46;
  uint64_t (*v47)(char *, uint64_t, int *);
  int v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  __int128 v55;
  uint64_t v56;
  char *v57;
  char *v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t (*v67)(void *, uint64_t, uint64_t);
  int v68;
  int v69;
  uint64_t v70;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  void (*v85)(uint64_t, char *, uint64_t);
  uint64_t v86;
  char *v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;

  v6 = type metadata accessor for SignificantChange(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8((uint64_t)a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      v24 = sub_1BCAB4BD8();
      (*(void (**)(uint64_t, _BYTE *, uint64_t))(*(_QWORD *)(v24 - 8) + 24))(a1, a2, v24);
      v25 = (int *)type metadata accessor for SignificantChange.Period(0);
      *(_QWORD *)(a1 + v25[5]) = *(_QWORD *)&a2[v25[5]];
      *(_QWORD *)(a1 + v25[6]) = *(_QWORD *)&a2[v25[6]];
      *(_BYTE *)(a1 + v25[7]) = a2[v25[7]];
      *(_QWORD *)(a1 + *(int *)(v6 + 20)) = *(_QWORD *)&a2[*(int *)(v6 + 20)];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v26 = *(int *)(v6 + 24);
      v27 = a1 + v26;
      v28 = &a2[v26];
      v29 = type metadata accessor for SignificantChange.Notification(0);
      v30 = *(_QWORD *)(v29 - 8);
      v31 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v30 + 48);
      v32 = v31(v27, 1, v29);
      v33 = v31((uint64_t)v28, 1, v29);
      if (v32)
      {
        if (!v33)
        {
          *(_QWORD *)v27 = *(_QWORD *)v28;
          *(_QWORD *)(v27 + 8) = *((_QWORD *)v28 + 1);
          *(_BYTE *)(v27 + 16) = v28[16];
          v34 = *(int *)(v29 + 24);
          v88 = v27 + v34;
          v91 = a3;
          v35 = &v28[v34];
          v36 = sub_1BCAB4E54();
          v37 = *(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v36 - 8) + 16);
          swift_bridgeObjectRetain();
          v38 = v35;
          a3 = v91;
          v37(v88, v38, v36);
          v37(v27 + *(int *)(v29 + 28), &v28[*(int *)(v29 + 28)], v36);
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, v29);
          goto LABEL_14;
        }
      }
      else
      {
        if (!v33)
        {
          *(_QWORD *)v27 = *(_QWORD *)v28;
          *(_QWORD *)(v27 + 8) = *((_QWORD *)v28 + 1);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          *(_BYTE *)(v27 + 16) = v28[16];
          v80 = *(int *)(v29 + 24);
          v81 = v27 + v80;
          v82 = &v28[v80];
          v83 = a3;
          v84 = sub_1BCAB4E54();
          v85 = *(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v84 - 8) + 24);
          v85(v81, v82, v84);
          v86 = v84;
          a3 = v83;
          v85(v27 + *(int *)(v29 + 28), &v28[*(int *)(v29 + 28)], v86);
          goto LABEL_14;
        }
        sub_1BC997208(v27, type metadata accessor for SignificantChange.Notification);
      }
      sub_1BCA8025C(0);
      v21 = *(_QWORD *)(*(_QWORD *)(v79 - 8) + 64);
      v22 = (void *)v27;
      v23 = v28;
LABEL_8:
      memcpy(v22, v23, v21);
      goto LABEL_14;
    }
    sub_1BC997208(a1, type metadata accessor for SignificantChange);
LABEL_7:
    sub_1BCA7EFBC(0);
    v21 = *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64);
    v22 = (void *)a1;
    v23 = a2;
    goto LABEL_8;
  }
  if (v10)
    goto LABEL_7;
  v90 = a3;
  v11 = sub_1BCAB4BD8();
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a1, a2, v11);
  v12 = (int *)type metadata accessor for SignificantChange.Period(0);
  *(_QWORD *)(a1 + v12[5]) = *(_QWORD *)&a2[v12[5]];
  *(_QWORD *)(a1 + v12[6]) = *(_QWORD *)&a2[v12[6]];
  *(_BYTE *)(a1 + v12[7]) = a2[v12[7]];
  *(_QWORD *)(a1 + *(int *)(v6 + 20)) = *(_QWORD *)&a2[*(int *)(v6 + 20)];
  v13 = *(int *)(v6 + 24);
  v14 = (_QWORD *)(a1 + v13);
  v15 = &a2[v13];
  v16 = type metadata accessor for SignificantChange.Notification(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v17 + 48);
  swift_bridgeObjectRetain();
  if (v18(v15, 1, v16))
  {
    sub_1BCA8025C(0);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  }
  else
  {
    *v14 = *v15;
    v14[1] = v15[1];
    *((_BYTE *)v14 + 16) = *((_BYTE *)v15 + 16);
    v39 = *(int *)(v16 + 24);
    v87 = (char *)v15 + v39;
    v89 = (char *)v14 + v39;
    v40 = sub_1BCAB4E54();
    v41 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v40 - 8) + 16);
    swift_bridgeObjectRetain();
    v41(v89, v87, v40);
    v41((char *)v14 + *(int *)(v16 + 28), (char *)v15 + *(int *)(v16 + 28), v40);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  }
  a3 = v90;
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_14:
  v42 = *(int *)(a3 + 20);
  v43 = (char *)(a1 + v42);
  v44 = &a2[v42];
  v45 = (int *)type metadata accessor for SignificantChangeEngine.Changepoint(0);
  v46 = *((_QWORD *)v45 - 1);
  v47 = *(uint64_t (**)(char *, uint64_t, int *))(v46 + 48);
  v48 = v47(v43, 1, v45);
  v49 = v47(v44, 1, v45);
  if (v48)
  {
    if (!v49)
    {
      v50 = sub_1BCAB4E54();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v50 - 8) + 16))(v43, v44, v50);
      *(_QWORD *)&v43[v45[5]] = *(_QWORD *)&v44[v45[5]];
      *(_QWORD *)&v43[v45[6]] = *(_QWORD *)&v44[v45[6]];
      *(_QWORD *)&v43[v45[7]] = *(_QWORD *)&v44[v45[7]];
      *(_QWORD *)&v43[v45[8]] = *(_QWORD *)&v44[v45[8]];
      *(_QWORD *)&v43[v45[9]] = *(_QWORD *)&v44[v45[9]];
      *(_QWORD *)&v43[v45[10]] = *(_QWORD *)&v44[v45[10]];
      v51 = v45[11];
      v52 = &v43[v51];
      v53 = &v44[v51];
      v54 = *((_QWORD *)v53 + 4);
      v55 = *((_OWORD *)v53 + 1);
      *(_OWORD *)v52 = *(_OWORD *)v53;
      *((_OWORD *)v52 + 1) = v55;
      *((_QWORD *)v52 + 4) = v54;
      v56 = v45[12];
      v57 = &v43[v56];
      v58 = &v44[v56];
      v60 = *(_OWORD *)v58;
      v59 = *((_OWORD *)v58 + 1);
      *((_QWORD *)v57 + 4) = *((_QWORD *)v58 + 4);
      *(_OWORD *)v57 = v60;
      *((_OWORD *)v57 + 1) = v59;
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v46 + 56))(v43, 0, 1, v45);
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  if (v49)
  {
    sub_1BC997208((uint64_t)v43, type metadata accessor for SignificantChangeEngine.Changepoint);
LABEL_19:
    sub_1BC9DBE2C(0);
    memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v61 - 8) + 64));
    goto LABEL_20;
  }
  v72 = sub_1BCAB4E54();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v72 - 8) + 24))(v43, v44, v72);
  *(_QWORD *)&v43[v45[5]] = *(_QWORD *)&v44[v45[5]];
  *(_QWORD *)&v43[v45[6]] = *(_QWORD *)&v44[v45[6]];
  *(_QWORD *)&v43[v45[7]] = *(_QWORD *)&v44[v45[7]];
  *(_QWORD *)&v43[v45[8]] = *(_QWORD *)&v44[v45[8]];
  *(_QWORD *)&v43[v45[9]] = *(_QWORD *)&v44[v45[9]];
  *(_QWORD *)&v43[v45[10]] = *(_QWORD *)&v44[v45[10]];
  v73 = v45[11];
  v74 = &v43[v73];
  v75 = &v44[v73];
  *(_QWORD *)v74 = *(_QWORD *)v75;
  *((_QWORD *)v74 + 1) = *((_QWORD *)v75 + 1);
  *((_QWORD *)v74 + 2) = *((_QWORD *)v75 + 2);
  *((_QWORD *)v74 + 3) = *((_QWORD *)v75 + 3);
  *((_QWORD *)v74 + 4) = *((_QWORD *)v75 + 4);
  v76 = v45[12];
  v77 = &v43[v76];
  v78 = &v44[v76];
  *(_QWORD *)v77 = *(_QWORD *)v78;
  *((_QWORD *)v77 + 1) = *((_QWORD *)v78 + 1);
  *((_QWORD *)v77 + 2) = *((_QWORD *)v78 + 2);
  *((_QWORD *)v77 + 3) = *((_QWORD *)v78 + 3);
  *((_QWORD *)v77 + 4) = *((_QWORD *)v78 + 4);
LABEL_20:
  v62 = *(int *)(a3 + 24);
  v63 = (void *)(a1 + v62);
  v64 = &a2[v62];
  v65 = sub_1BCAB4E54();
  v66 = *(_QWORD *)(v65 - 8);
  v67 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v66 + 48);
  v68 = v67(v63, 1, v65);
  v69 = v67(v64, 1, v65);
  if (!v68)
  {
    if (!v69)
    {
      (*(void (**)(void *, char *, uint64_t))(v66 + 24))(v63, v64, v65);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v66 + 8))(v63, v65);
    goto LABEL_25;
  }
  if (v69)
  {
LABEL_25:
    sub_1BCA7F46C(0);
    memcpy(v63, v64, *(_QWORD *)(*(_QWORD *)(v70 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, char *, uint64_t))(v66 + 16))(v63, v64, v65);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v66 + 56))(v63, 0, 1, v65);
  return a1;
}

char *initializeWithTake for SignificantChangeEngine.State.MeanShift(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, char *, uint64_t);
  uint64_t v20;
  char *v21;
  char *v22;
  int *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  __int128 v30;
  uint64_t v31;
  char *v32;
  char *v33;
  __int128 v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v42;
  char *v43;
  uint64_t v44;

  v6 = type metadata accessor for SignificantChange(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    sub_1BCA7EFBC(0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    v9 = sub_1BCAB4BD8();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(a1, a2, v9);
    v10 = (int *)type metadata accessor for SignificantChange.Period(0);
    *(_QWORD *)&a1[v10[5]] = *(_QWORD *)&a2[v10[5]];
    *(_QWORD *)&a1[v10[6]] = *(_QWORD *)&a2[v10[6]];
    a1[v10[7]] = a2[v10[7]];
    *(_QWORD *)&a1[*(int *)(v6 + 20)] = *(_QWORD *)&a2[*(int *)(v6 + 20)];
    v11 = *(int *)(v6 + 24);
    v12 = &a1[v11];
    v13 = &a2[v11];
    v14 = type metadata accessor for SignificantChange.Notification(0);
    v15 = *(_QWORD *)(v14 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
    {
      sub_1BCA8025C(0);
      memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    }
    else
    {
      *(_OWORD *)v12 = *(_OWORD *)v13;
      v12[16] = v13[16];
      v17 = *(int *)(v14 + 24);
      v42 = &v13[v17];
      v43 = &v12[v17];
      v18 = sub_1BCAB4E54();
      v44 = a3;
      v19 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32);
      v19(v43, v42, v18);
      v19(&v12[*(int *)(v14 + 28)], &v13[*(int *)(v14 + 28)], v18);
      a3 = v44;
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
    }
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v20 = *(int *)(a3 + 20);
  v21 = &a1[v20];
  v22 = &a2[v20];
  v23 = (int *)type metadata accessor for SignificantChangeEngine.Changepoint(0);
  v24 = *((_QWORD *)v23 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v24 + 48))(v22, 1, v23))
  {
    sub_1BC9DBE2C(0);
    memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
  }
  else
  {
    v26 = sub_1BCAB4E54();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v26 - 8) + 32))(v21, v22, v26);
    *(_QWORD *)&v21[v23[5]] = *(_QWORD *)&v22[v23[5]];
    *(_QWORD *)&v21[v23[6]] = *(_QWORD *)&v22[v23[6]];
    *(_QWORD *)&v21[v23[7]] = *(_QWORD *)&v22[v23[7]];
    *(_QWORD *)&v21[v23[8]] = *(_QWORD *)&v22[v23[8]];
    *(_QWORD *)&v21[v23[9]] = *(_QWORD *)&v22[v23[9]];
    *(_QWORD *)&v21[v23[10]] = *(_QWORD *)&v22[v23[10]];
    v27 = v23[11];
    v28 = &v21[v27];
    v29 = &v22[v27];
    v30 = *((_OWORD *)v29 + 1);
    *(_OWORD *)v28 = *(_OWORD *)v29;
    *((_OWORD *)v28 + 1) = v30;
    *((_QWORD *)v28 + 4) = *((_QWORD *)v29 + 4);
    v31 = v23[12];
    v32 = &v21[v31];
    v33 = &v22[v31];
    v34 = *((_OWORD *)v33 + 1);
    *(_OWORD *)v32 = *(_OWORD *)v33;
    *((_OWORD *)v32 + 1) = v34;
    *((_QWORD *)v32 + 4) = *((_QWORD *)v33 + 4);
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v24 + 56))(v21, 0, 1, v23);
  }
  v35 = *(int *)(a3 + 24);
  v36 = &a1[v35];
  v37 = &a2[v35];
  v38 = sub_1BCAB4E54();
  v39 = *(_QWORD *)(v38 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48))(v37, 1, v38))
  {
    sub_1BCA7F46C(0);
    memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v39 + 32))(v36, v37, v38);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, v38);
  }
  return a1;
}

uint64_t assignWithTake for SignificantChangeEngine.State.MeanShift(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  _BYTE *v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  size_t v20;
  void *v21;
  const void *v22;
  uint64_t v23;
  uint64_t v24;
  int *v25;
  uint64_t v26;
  _BYTE *v27;
  _BYTE *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(_BYTE *, uint64_t, uint64_t);
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  int *v42;
  uint64_t v43;
  uint64_t (*v44)(char *, uint64_t, int *);
  int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  __int128 v51;
  uint64_t v52;
  char *v53;
  char *v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t (*v62)(void *, uint64_t, uint64_t);
  int v63;
  int v64;
  uint64_t v65;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  __int128 v71;
  uint64_t v72;
  char *v73;
  char *v74;
  __int128 v75;
  uint64_t v76;
  uint64_t v77;
  _BYTE *v78;
  uint64_t v79;
  void (*v80)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v81;
  uint64_t v82;
  _BYTE *v83;
  _BYTE *v84;
  uint64_t v85;
  void (*v86)(_BYTE *, _BYTE *, uint64_t);
  _BYTE *v87;
  _BYTE *v88;
  uint64_t v89;
  _BYTE *v90;

  v6 = type metadata accessor for SignificantChange(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8((uint64_t)a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      v11 = sub_1BCAB4BD8();
      (*(void (**)(uint64_t, _BYTE *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(a1, a2, v11);
      v12 = (int *)type metadata accessor for SignificantChange.Period(0);
      *(_QWORD *)(a1 + v12[5]) = *(_QWORD *)&a2[v12[5]];
      *(_QWORD *)(a1 + v12[6]) = *(_QWORD *)&a2[v12[6]];
      *(_BYTE *)(a1 + v12[7]) = a2[v12[7]];
      *(_QWORD *)(a1 + *(int *)(v6 + 20)) = *(_QWORD *)&a2[*(int *)(v6 + 20)];
      v13 = *(int *)(v6 + 24);
      v14 = (_BYTE *)(a1 + v13);
      v15 = &a2[v13];
      v16 = type metadata accessor for SignificantChange.Notification(0);
      v17 = *(_QWORD *)(v16 - 8);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
      {
        sub_1BCA8025C(0);
        memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
      }
      else
      {
        *(_OWORD *)v14 = *(_OWORD *)v15;
        v14[16] = v15[16];
        v35 = *(int *)(v16 + 24);
        v87 = &v15[v35];
        v88 = &v14[v35];
        v89 = a3;
        v36 = sub_1BCAB4E54();
        v37 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v36 - 8) + 32);
        v37(v88, v87, v36);
        v38 = v36;
        a3 = v89;
        v37(&v14[*(int *)(v16 + 28)], &v15[*(int *)(v16 + 28)], v38);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
      }
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_15;
    }
    goto LABEL_7;
  }
  if (v10)
  {
    sub_1BC997208(a1, type metadata accessor for SignificantChange);
LABEL_7:
    sub_1BCA7EFBC(0);
    v20 = *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64);
    v21 = (void *)a1;
    v22 = a2;
    goto LABEL_8;
  }
  v23 = a3;
  v24 = sub_1BCAB4BD8();
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(*(_QWORD *)(v24 - 8) + 40))(a1, a2, v24);
  v25 = (int *)type metadata accessor for SignificantChange.Period(0);
  *(_QWORD *)(a1 + v25[5]) = *(_QWORD *)&a2[v25[5]];
  *(_QWORD *)(a1 + v25[6]) = *(_QWORD *)&a2[v25[6]];
  *(_BYTE *)(a1 + v25[7]) = a2[v25[7]];
  *(_QWORD *)(a1 + *(int *)(v6 + 20)) = *(_QWORD *)&a2[*(int *)(v6 + 20)];
  swift_bridgeObjectRelease();
  v26 = *(int *)(v6 + 24);
  v27 = (_BYTE *)(a1 + v26);
  v28 = &a2[v26];
  v29 = type metadata accessor for SignificantChange.Notification(0);
  v30 = *(_QWORD *)(v29 - 8);
  v31 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v30 + 48);
  v32 = v31(v27, 1, v29);
  v33 = v31(v28, 1, v29);
  if (!v32)
  {
    if (!v33)
    {
      v81 = *((_QWORD *)v28 + 1);
      *(_QWORD *)v27 = *(_QWORD *)v28;
      *((_QWORD *)v27 + 1) = v81;
      swift_bridgeObjectRelease();
      v27[16] = v28[16];
      v82 = *(int *)(v29 + 24);
      v83 = &v27[v82];
      v84 = &v28[v82];
      v85 = sub_1BCAB4E54();
      v86 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v85 - 8) + 40);
      v86(v83, v84, v85);
      v86(&v27[*(int *)(v29 + 28)], &v28[*(int *)(v29 + 28)], v85);
      a3 = v23;
      goto LABEL_15;
    }
    a3 = v23;
    sub_1BC997208((uint64_t)v27, type metadata accessor for SignificantChange.Notification);
    sub_1BCA8025C(0);
    v20 = *(_QWORD *)(*(_QWORD *)(v76 - 8) + 64);
    v21 = v27;
    v22 = v28;
LABEL_8:
    memcpy(v21, v22, v20);
    goto LABEL_15;
  }
  if (v33)
  {
    sub_1BCA8025C(0);
    memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
  }
  else
  {
    *(_OWORD *)v27 = *(_OWORD *)v28;
    v27[16] = v28[16];
    v77 = *(int *)(v29 + 24);
    v90 = &v27[v77];
    v78 = &v28[v77];
    v79 = sub_1BCAB4E54();
    v80 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v79 - 8) + 32);
    v80(v90, v78, v79);
    v80(&v27[*(int *)(v29 + 28)], &v28[*(int *)(v29 + 28)], v79);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, v29);
  }
  a3 = v23;
LABEL_15:
  v39 = *(int *)(a3 + 20);
  v40 = (char *)(a1 + v39);
  v41 = &a2[v39];
  v42 = (int *)type metadata accessor for SignificantChangeEngine.Changepoint(0);
  v43 = *((_QWORD *)v42 - 1);
  v44 = *(uint64_t (**)(char *, uint64_t, int *))(v43 + 48);
  v45 = v44(v40, 1, v42);
  v46 = v44(v41, 1, v42);
  if (v45)
  {
    if (!v46)
    {
      v47 = sub_1BCAB4E54();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v47 - 8) + 32))(v40, v41, v47);
      *(_QWORD *)&v40[v42[5]] = *(_QWORD *)&v41[v42[5]];
      *(_QWORD *)&v40[v42[6]] = *(_QWORD *)&v41[v42[6]];
      *(_QWORD *)&v40[v42[7]] = *(_QWORD *)&v41[v42[7]];
      *(_QWORD *)&v40[v42[8]] = *(_QWORD *)&v41[v42[8]];
      *(_QWORD *)&v40[v42[9]] = *(_QWORD *)&v41[v42[9]];
      *(_QWORD *)&v40[v42[10]] = *(_QWORD *)&v41[v42[10]];
      v48 = v42[11];
      v49 = &v40[v48];
      v50 = &v41[v48];
      v51 = *((_OWORD *)v50 + 1);
      *(_OWORD *)v49 = *(_OWORD *)v50;
      *((_OWORD *)v49 + 1) = v51;
      *((_QWORD *)v49 + 4) = *((_QWORD *)v50 + 4);
      v52 = v42[12];
      v53 = &v40[v52];
      v54 = &v41[v52];
      v55 = *((_OWORD *)v54 + 1);
      *(_OWORD *)v53 = *(_OWORD *)v54;
      *((_OWORD *)v53 + 1) = v55;
      *((_QWORD *)v53 + 4) = *((_QWORD *)v54 + 4);
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v43 + 56))(v40, 0, 1, v42);
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  if (v46)
  {
    sub_1BC997208((uint64_t)v40, type metadata accessor for SignificantChangeEngine.Changepoint);
LABEL_20:
    sub_1BC9DBE2C(0);
    memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v56 - 8) + 64));
    goto LABEL_21;
  }
  v67 = sub_1BCAB4E54();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v67 - 8) + 40))(v40, v41, v67);
  *(_QWORD *)&v40[v42[5]] = *(_QWORD *)&v41[v42[5]];
  *(_QWORD *)&v40[v42[6]] = *(_QWORD *)&v41[v42[6]];
  *(_QWORD *)&v40[v42[7]] = *(_QWORD *)&v41[v42[7]];
  *(_QWORD *)&v40[v42[8]] = *(_QWORD *)&v41[v42[8]];
  *(_QWORD *)&v40[v42[9]] = *(_QWORD *)&v41[v42[9]];
  *(_QWORD *)&v40[v42[10]] = *(_QWORD *)&v41[v42[10]];
  v68 = v42[11];
  v69 = &v40[v68];
  v70 = &v41[v68];
  v71 = *((_OWORD *)v70 + 1);
  *(_OWORD *)v69 = *(_OWORD *)v70;
  *((_OWORD *)v69 + 1) = v71;
  *((_QWORD *)v69 + 4) = *((_QWORD *)v70 + 4);
  v72 = v42[12];
  v73 = &v40[v72];
  v74 = &v41[v72];
  v75 = *((_OWORD *)v74 + 1);
  *(_OWORD *)v73 = *(_OWORD *)v74;
  *((_OWORD *)v73 + 1) = v75;
  *((_QWORD *)v73 + 4) = *((_QWORD *)v74 + 4);
LABEL_21:
  v57 = *(int *)(a3 + 24);
  v58 = (void *)(a1 + v57);
  v59 = &a2[v57];
  v60 = sub_1BCAB4E54();
  v61 = *(_QWORD *)(v60 - 8);
  v62 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v61 + 48);
  v63 = v62(v58, 1, v60);
  v64 = v62(v59, 1, v60);
  if (!v63)
  {
    if (!v64)
    {
      (*(void (**)(void *, char *, uint64_t))(v61 + 40))(v58, v59, v60);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v61 + 8))(v58, v60);
    goto LABEL_26;
  }
  if (v64)
  {
LABEL_26:
    sub_1BCA7F46C(0);
    memcpy(v58, v59, *(_QWORD *)(*(_QWORD *)(v65 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, char *, uint64_t))(v61 + 32))(v58, v59, v60);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v61 + 56))(v58, 0, 1, v60);
  return a1;
}

uint64_t getEnumTagSinglePayload for SignificantChangeEngine.State.MeanShift()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BCA8B2C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_index_1Tm(a1, a2, a3, (uint64_t (*)(_QWORD))sub_1BCA7EFBC, (uint64_t (*)(_QWORD))sub_1BC9DBE2C, (uint64_t (*)(_QWORD))sub_1BCA7F46C);
}

uint64_t __swift_get_extra_inhabitant_index_1Tm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD), uint64_t (*a5)(_QWORD), uint64_t (*a6)(_QWORD))
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v11 = a4(0);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v13 = v11;
    v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    v15 = a1;
  }
  else
  {
    v16 = a5(0);
    v17 = *(_QWORD *)(v16 - 8);
    if (*(_DWORD *)(v17 + 84) == (_DWORD)a2)
    {
      v13 = v16;
      v18 = *(int *)(a3 + 20);
    }
    else
    {
      v13 = a6(0);
      v17 = *(_QWORD *)(v13 - 8);
      v18 = *(int *)(a3 + 24);
    }
    v15 = a1 + v18;
    v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v17 + 48);
  }
  return v14(v15, a2, v13);
}

uint64_t storeEnumTagSinglePayload for SignificantChangeEngine.State.MeanShift()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BCA8B398(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_index_2Tm(a1, a2, a3, a4, (uint64_t (*)(_QWORD))sub_1BCA7EFBC, (uint64_t (*)(_QWORD))sub_1BC9DBE2C, (uint64_t (*)(_QWORD))sub_1BCA7F46C);
}

uint64_t __swift_store_extra_inhabitant_index_2Tm(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t (*a5)(_QWORD), uint64_t (*a6)(_QWORD), uint64_t (*a7)(_QWORD))
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v13 = a5(0);
  v14 = *(_QWORD *)(v13 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v15 = v13;
    v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    v17 = a1;
  }
  else
  {
    v18 = a6(0);
    v19 = *(_QWORD *)(v18 - 8);
    if (*(_DWORD *)(v19 + 84) == a3)
    {
      v15 = v18;
      v20 = *(int *)(a4 + 20);
    }
    else
    {
      v15 = a7(0);
      v19 = *(_QWORD *)(v15 - 8);
      v20 = *(int *)(a4 + 24);
    }
    v17 = a1 + v20;
    v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v19 + 56);
  }
  return v16(v17, a2, a2, v15);
}

uint64_t sub_1BCA8B464(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1BCA8B480(a1, a2, a3, (uint64_t (*)(uint64_t))sub_1BCA7EFBC, (uint64_t (*)(uint64_t))sub_1BC9DBE2C, (uint64_t (*)(uint64_t))sub_1BCA7F46C);
}

uint64_t sub_1BCA8B480(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t), uint64_t (*a5)(uint64_t), uint64_t (*a6)(uint64_t))
{
  uint64_t result;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  result = a4(319);
  if (v9 <= 0x3F)
  {
    result = a5(319);
    if (v10 <= 0x3F)
    {
      result = a6(319);
      if (v11 <= 0x3F)
      {
        swift_initStructMetadata();
        return 0;
      }
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for SignificantChangeEngine.State.FrequencyShift(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  unsigned int (*v23)(char *, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  void (*v28)(char *, char *, uint64_t);
  char *v30;
  uint64_t v31;
  uint64_t v32;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_1BCAB4E54();
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      sub_1BCA7F46C(0);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    v11 = *(int *)(a3 + 24);
    *((_BYTE *)a1 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
    v12 = (char *)a1 + v11;
    v13 = (char *)a2 + v11;
    v14 = type metadata accessor for SignificantChange(0);
    v15 = *(_QWORD *)(v14 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
    {
      sub_1BCA7EFBC(0);
      memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    }
    else
    {
      v32 = v15;
      v17 = sub_1BCAB4BD8();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v12, v13, v17);
      v18 = (int *)type metadata accessor for SignificantChange.Period(0);
      *(_QWORD *)&v12[v18[5]] = *(_QWORD *)&v13[v18[5]];
      *(_QWORD *)&v12[v18[6]] = *(_QWORD *)&v13[v18[6]];
      v12[v18[7]] = v13[v18[7]];
      *(_QWORD *)&v12[*(int *)(v14 + 20)] = *(_QWORD *)&v13[*(int *)(v14 + 20)];
      v19 = *(int *)(v14 + 24);
      v20 = &v12[v19];
      v21 = &v13[v19];
      v22 = type metadata accessor for SignificantChange.Notification(0);
      v31 = *(_QWORD *)(v22 - 8);
      v23 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48);
      swift_bridgeObjectRetain();
      if (v23(v21, 1, v22))
      {
        sub_1BCA8025C(0);
        memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
      }
      else
      {
        v25 = *((_QWORD *)v21 + 1);
        *(_QWORD *)v20 = *(_QWORD *)v21;
        *((_QWORD *)v20 + 1) = v25;
        v20[16] = v21[16];
        v26 = *(int *)(v22 + 24);
        v27 = &v20[v26];
        v30 = &v21[v26];
        v28 = *(void (**)(char *, char *, uint64_t))(v8 + 16);
        swift_bridgeObjectRetain();
        v28(v27, v30, v7);
        v28(&v20[*(int *)(v22 + 28)], &v21[*(int *)(v22 + 28)], v7);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v20, 0, 1, v22);
      }
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v12, 0, 1, v14);
    }
  }
  return a1;
}

uint64_t destroy for SignificantChangeEngine.State.FrequencyShift(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);

  v4 = sub_1BCAB4E54();
  v5 = *(_QWORD *)(v4 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1, v4))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  v6 = a1 + *(int *)(a2 + 24);
  v7 = type metadata accessor for SignificantChange(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7);
  if (!(_DWORD)result)
  {
    v9 = sub_1BCAB4BD8();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v6, v9);
    swift_bridgeObjectRelease();
    v10 = v6 + *(int *)(v7 + 24);
    v11 = type metadata accessor for SignificantChange.Notification(0);
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(v10, 1, v11);
    if (!(_DWORD)result)
    {
      swift_bridgeObjectRelease();
      v12 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
      v12(v10 + *(int *)(v11 + 24), v4);
      return ((uint64_t (*)(uint64_t, uint64_t))v12)(v10 + *(int *)(v11 + 28), v4);
    }
  }
  return result;
}

char *initializeWithCopy for SignificantChangeEngine.State.FrequencyShift(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  unsigned int (*v21)(char *, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  void (*v26)(char *, char *, uint64_t);
  char *v28;
  uint64_t v29;
  uint64_t v30;

  v6 = sub_1BCAB4E54();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    sub_1BCA7F46C(0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v9 = *(int *)(a3 + 24);
  a1[*(int *)(a3 + 20)] = a2[*(int *)(a3 + 20)];
  v10 = &a1[v9];
  v11 = &a2[v9];
  v12 = type metadata accessor for SignificantChange(0);
  v13 = *(_QWORD *)(v12 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
  {
    sub_1BCA7EFBC(0);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    v30 = v13;
    v15 = sub_1BCAB4BD8();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v10, v11, v15);
    v16 = (int *)type metadata accessor for SignificantChange.Period(0);
    *(_QWORD *)&v10[v16[5]] = *(_QWORD *)&v11[v16[5]];
    *(_QWORD *)&v10[v16[6]] = *(_QWORD *)&v11[v16[6]];
    v10[v16[7]] = v11[v16[7]];
    *(_QWORD *)&v10[*(int *)(v12 + 20)] = *(_QWORD *)&v11[*(int *)(v12 + 20)];
    v17 = *(int *)(v12 + 24);
    v18 = &v10[v17];
    v19 = &v11[v17];
    v20 = type metadata accessor for SignificantChange.Notification(0);
    v29 = *(_QWORD *)(v20 - 8);
    v21 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48);
    swift_bridgeObjectRetain();
    if (v21(v19, 1, v20))
    {
      sub_1BCA8025C(0);
      memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    }
    else
    {
      v23 = *((_QWORD *)v19 + 1);
      *(_QWORD *)v18 = *(_QWORD *)v19;
      *((_QWORD *)v18 + 1) = v23;
      v18[16] = v19[16];
      v24 = *(int *)(v20 + 24);
      v25 = &v18[v24];
      v28 = &v19[v24];
      v26 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
      swift_bridgeObjectRetain();
      v26(v25, v28, v6);
      v26(&v18[*(int *)(v20 + 28)], &v19[*(int *)(v20 + 28)], v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v18, 0, 1, v20);
    }
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v10, 0, 1, v12);
  }
  return a1;
}

void *assignWithCopy for SignificantChangeEngine.State.FrequencyShift(void *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t, uint64_t);
  int v18;
  int v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  _QWORD *v23;
  char *v24;
  uint64_t v25;
  unsigned int (*v26)(char *, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  size_t v29;
  void *v30;
  char *v31;
  uint64_t v32;
  int *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t (*v39)(uint64_t, uint64_t, uint64_t);
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  void (*v45)(uint64_t, char *, uint64_t);
  uint64_t v46;
  char *v47;
  void (*v48)(char *, char *, uint64_t);
  uint64_t v50;
  void (*v51)(uint64_t, char *, uint64_t);
  char *v52;
  uint64_t v53;
  uint64_t v54;

  v6 = sub_1BCAB4E54();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(void *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(void *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    sub_1BCA7F46C(0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, char *, uint64_t))(v7 + 24))(a1, a2, v6);
LABEL_7:
  *((_BYTE *)a1 + *(int *)(a3 + 20)) = a2[*(int *)(a3 + 20)];
  v12 = *(int *)(a3 + 24);
  v13 = (uint64_t)a1 + v12;
  v14 = &a2[v12];
  v15 = type metadata accessor for SignificantChange(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
  v18 = v17(v13, 1, v15);
  v19 = v17((uint64_t)v14, 1, v15);
  if (!v18)
  {
    if (!v19)
    {
      v32 = sub_1BCAB4BD8();
      (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v32 - 8) + 24))(v13, v14, v32);
      v33 = (int *)type metadata accessor for SignificantChange.Period(0);
      *(_QWORD *)(v13 + v33[5]) = *(_QWORD *)&v14[v33[5]];
      *(_QWORD *)(v13 + v33[6]) = *(_QWORD *)&v14[v33[6]];
      *(_BYTE *)(v13 + v33[7]) = v14[v33[7]];
      *(_QWORD *)(v13 + *(int *)(v15 + 20)) = *(_QWORD *)&v14[*(int *)(v15 + 20)];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v34 = *(int *)(v15 + 24);
      v35 = v13 + v34;
      v36 = &v14[v34];
      v37 = type metadata accessor for SignificantChange.Notification(0);
      v38 = *(_QWORD *)(v37 - 8);
      v39 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v38 + 48);
      v40 = v39(v35, 1, v37);
      v41 = v39((uint64_t)v36, 1, v37);
      if (v40)
      {
        if (!v41)
        {
          *(_QWORD *)v35 = *(_QWORD *)v36;
          *(_QWORD *)(v35 + 8) = *((_QWORD *)v36 + 1);
          *(_BYTE *)(v35 + 16) = v36[16];
          v42 = *(int *)(v37 + 24);
          v43 = v35 + v42;
          v44 = &v36[v42];
          v45 = *(void (**)(uint64_t, char *, uint64_t))(v7 + 16);
          swift_bridgeObjectRetain();
          v45(v43, v44, v6);
          v45(v35 + *(int *)(v37 + 28), &v36[*(int *)(v37 + 28)], v6);
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v37);
          return a1;
        }
      }
      else
      {
        if (!v41)
        {
          *(_QWORD *)v35 = *(_QWORD *)v36;
          *(_QWORD *)(v35 + 8) = *((_QWORD *)v36 + 1);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          *(_BYTE *)(v35 + 16) = v36[16];
          v51 = *(void (**)(uint64_t, char *, uint64_t))(v7 + 24);
          v51(v35 + *(int *)(v37 + 24), &v36[*(int *)(v37 + 24)], v6);
          v51(v35 + *(int *)(v37 + 28), &v36[*(int *)(v37 + 28)], v6);
          return a1;
        }
        sub_1BC997208(v35, type metadata accessor for SignificantChange.Notification);
      }
      sub_1BCA8025C(0);
      v29 = *(_QWORD *)(*(_QWORD *)(v50 - 8) + 64);
      v30 = (void *)v35;
      v31 = v36;
      goto LABEL_14;
    }
    sub_1BC997208(v13, type metadata accessor for SignificantChange);
LABEL_13:
    sub_1BCA7EFBC(0);
    v29 = *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64);
    v30 = (void *)v13;
    v31 = v14;
LABEL_14:
    memcpy(v30, v31, v29);
    return a1;
  }
  if (v19)
    goto LABEL_13;
  v54 = v7;
  v20 = sub_1BCAB4BD8();
  (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v13, v14, v20);
  v21 = (int *)type metadata accessor for SignificantChange.Period(0);
  *(_QWORD *)(v13 + v21[5]) = *(_QWORD *)&v14[v21[5]];
  *(_QWORD *)(v13 + v21[6]) = *(_QWORD *)&v14[v21[6]];
  *(_BYTE *)(v13 + v21[7]) = v14[v21[7]];
  *(_QWORD *)(v13 + *(int *)(v15 + 20)) = *(_QWORD *)&v14[*(int *)(v15 + 20)];
  v22 = *(int *)(v15 + 24);
  v23 = (_QWORD *)(v13 + v22);
  v24 = &v14[v22];
  v25 = type metadata accessor for SignificantChange.Notification(0);
  v53 = *(_QWORD *)(v25 - 8);
  v26 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v53 + 48);
  swift_bridgeObjectRetain();
  if (v26(v24, 1, v25))
  {
    sub_1BCA8025C(0);
    memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
  }
  else
  {
    *v23 = *(_QWORD *)v24;
    v23[1] = *((_QWORD *)v24 + 1);
    *((_BYTE *)v23 + 16) = v24[16];
    v46 = *(int *)(v25 + 24);
    v47 = (char *)v23 + v46;
    v52 = &v24[v46];
    v48 = *(void (**)(char *, char *, uint64_t))(v54 + 16);
    swift_bridgeObjectRetain();
    v48(v47, v52, v6);
    v48((char *)v23 + *(int *)(v25 + 28), &v24[*(int *)(v25 + 28)], v6);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v53 + 56))(v23, 0, 1, v25);
  }
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  return a1;
}

char *initializeWithTake for SignificantChangeEngine.State.FrequencyShift(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *, char *, uint64_t);

  v6 = sub_1BCAB4E54();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    sub_1BCA7F46C(0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v9 = *(int *)(a3 + 24);
  a1[*(int *)(a3 + 20)] = a2[*(int *)(a3 + 20)];
  v10 = &a1[v9];
  v11 = &a2[v9];
  v12 = type metadata accessor for SignificantChange(0);
  v13 = *(_QWORD *)(v12 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
  {
    sub_1BCA7EFBC(0);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    v15 = sub_1BCAB4BD8();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v10, v11, v15);
    v16 = (int *)type metadata accessor for SignificantChange.Period(0);
    *(_QWORD *)&v10[v16[5]] = *(_QWORD *)&v11[v16[5]];
    *(_QWORD *)&v10[v16[6]] = *(_QWORD *)&v11[v16[6]];
    v10[v16[7]] = v11[v16[7]];
    *(_QWORD *)&v10[*(int *)(v12 + 20)] = *(_QWORD *)&v11[*(int *)(v12 + 20)];
    v17 = *(int *)(v12 + 24);
    v18 = &v10[v17];
    v19 = &v11[v17];
    v20 = type metadata accessor for SignificantChange.Notification(0);
    v21 = *(_QWORD *)(v20 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
    {
      sub_1BCA8025C(0);
      memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    }
    else
    {
      *(_OWORD *)v18 = *(_OWORD *)v19;
      v18[16] = v19[16];
      v23 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
      v23(&v18[*(int *)(v20 + 24)], &v19[*(int *)(v20 + 24)], v6);
      v23(&v18[*(int *)(v20 + 28)], &v19[*(int *)(v20 + 28)], v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
    }
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
  }
  return a1;
}

void *assignWithTake for SignificantChangeEngine.State.FrequencyShift(void *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t, uint64_t);
  int v18;
  int v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  _BYTE *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  size_t v29;
  void *v30;
  char *v31;
  uint64_t v32;
  int *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t (*v39)(uint64_t, uint64_t, uint64_t);
  int v40;
  int v41;
  void (*v42)(uint64_t, char *, uint64_t);
  void (*v43)(_BYTE *, char *, uint64_t);
  uint64_t v45;
  uint64_t v46;
  void (*v47)(uint64_t, char *, uint64_t);

  v6 = sub_1BCAB4E54();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(void *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(void *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    sub_1BCA7F46C(0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, char *, uint64_t))(v7 + 40))(a1, a2, v6);
LABEL_7:
  v12 = *(int *)(a3 + 24);
  *((_BYTE *)a1 + *(int *)(a3 + 20)) = a2[*(int *)(a3 + 20)];
  v13 = (uint64_t)a1 + v12;
  v14 = &a2[v12];
  v15 = type metadata accessor for SignificantChange(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
  v18 = v17(v13, 1, v15);
  v19 = v17((uint64_t)v14, 1, v15);
  if (!v18)
  {
    if (!v19)
    {
      v32 = sub_1BCAB4BD8();
      (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v32 - 8) + 40))(v13, v14, v32);
      v33 = (int *)type metadata accessor for SignificantChange.Period(0);
      *(_QWORD *)(v13 + v33[5]) = *(_QWORD *)&v14[v33[5]];
      *(_QWORD *)(v13 + v33[6]) = *(_QWORD *)&v14[v33[6]];
      *(_BYTE *)(v13 + v33[7]) = v14[v33[7]];
      *(_QWORD *)(v13 + *(int *)(v15 + 20)) = *(_QWORD *)&v14[*(int *)(v15 + 20)];
      swift_bridgeObjectRelease();
      v34 = *(int *)(v15 + 24);
      v35 = v13 + v34;
      v36 = &v14[v34];
      v37 = type metadata accessor for SignificantChange.Notification(0);
      v38 = *(_QWORD *)(v37 - 8);
      v39 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v38 + 48);
      v40 = v39(v35, 1, v37);
      v41 = v39((uint64_t)v36, 1, v37);
      if (v40)
      {
        if (!v41)
        {
          *(_OWORD *)v35 = *(_OWORD *)v36;
          *(_BYTE *)(v35 + 16) = v36[16];
          v42 = *(void (**)(uint64_t, char *, uint64_t))(v7 + 32);
          v42(v35 + *(int *)(v37 + 24), &v36[*(int *)(v37 + 24)], v6);
          v42(v35 + *(int *)(v37 + 28), &v36[*(int *)(v37 + 28)], v6);
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v37);
          return a1;
        }
      }
      else
      {
        if (!v41)
        {
          v46 = *((_QWORD *)v36 + 1);
          *(_QWORD *)v35 = *(_QWORD *)v36;
          *(_QWORD *)(v35 + 8) = v46;
          swift_bridgeObjectRelease();
          *(_BYTE *)(v35 + 16) = v36[16];
          v47 = *(void (**)(uint64_t, char *, uint64_t))(v7 + 40);
          v47(v35 + *(int *)(v37 + 24), &v36[*(int *)(v37 + 24)], v6);
          v47(v35 + *(int *)(v37 + 28), &v36[*(int *)(v37 + 28)], v6);
          return a1;
        }
        sub_1BC997208(v35, type metadata accessor for SignificantChange.Notification);
      }
      sub_1BCA8025C(0);
      v29 = *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64);
      v30 = (void *)v35;
      v31 = v36;
      goto LABEL_14;
    }
    sub_1BC997208(v13, type metadata accessor for SignificantChange);
LABEL_13:
    sub_1BCA7EFBC(0);
    v29 = *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64);
    v30 = (void *)v13;
    v31 = v14;
LABEL_14:
    memcpy(v30, v31, v29);
    return a1;
  }
  if (v19)
    goto LABEL_13;
  v20 = sub_1BCAB4BD8();
  (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v13, v14, v20);
  v21 = (int *)type metadata accessor for SignificantChange.Period(0);
  *(_QWORD *)(v13 + v21[5]) = *(_QWORD *)&v14[v21[5]];
  *(_QWORD *)(v13 + v21[6]) = *(_QWORD *)&v14[v21[6]];
  *(_BYTE *)(v13 + v21[7]) = v14[v21[7]];
  *(_QWORD *)(v13 + *(int *)(v15 + 20)) = *(_QWORD *)&v14[*(int *)(v15 + 20)];
  v22 = *(int *)(v15 + 24);
  v23 = (_BYTE *)(v13 + v22);
  v24 = &v14[v22];
  v25 = type metadata accessor for SignificantChange.Notification(0);
  v26 = *(_QWORD *)(v25 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
  {
    sub_1BCA8025C(0);
    memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
  }
  else
  {
    *(_OWORD *)v23 = *(_OWORD *)v24;
    v23[16] = v24[16];
    v43 = *(void (**)(_BYTE *, char *, uint64_t))(v7 + 32);
    v43(&v23[*(int *)(v25 + 24)], &v24[*(int *)(v25 + 24)], v6);
    v43(&v23[*(int *)(v25 + 28)], &v24[*(int *)(v25 + 28)], v6);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
  }
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  return a1;
}

uint64_t getEnumTagSinglePayload for SignificantChangeEngine.State.FrequencyShift()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BCA8C628(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;
  uint64_t v10;

  sub_1BCA7F46C(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  if ((_DWORD)a2 == 254)
  {
    v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20));
    if (v9 >= 2)
      return v9 - 1;
    else
      return 0;
  }
  else
  {
    sub_1BCA7EFBC(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for SignificantChangeEngine.State.FrequencyShift()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_1BCA8C6D4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  sub_1BCA7F46C(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 254)
    {
      *(_BYTE *)(a1 + *(int *)(a4 + 20)) = a2 + 1;
      return;
    }
    sub_1BCA7EFBC(0);
    v10 = v13;
    v14 = *(_QWORD *)(v13 - 8);
    v12 = a1 + *(int *)(a4 + 24);
    v11 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  v11(v12, a2, a2, v10);
}

void sub_1BCA8C774()
{
  unint64_t v0;
  unint64_t v1;

  sub_1BCA7F46C(319);
  if (v0 <= 0x3F)
  {
    sub_1BCA7EFBC(319);
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t storeEnumTagSinglePayload for SignificantChangeEngine.State.FrequencyShift.Mode(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1BCA8C84C + 4 * byte_1BCAC7789[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1BCA8C880 + 4 * byte_1BCAC7784[v4]))();
}

uint64_t sub_1BCA8C880(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BCA8C888(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BCA8C890);
  return result;
}

uint64_t sub_1BCA8C89C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BCA8C8A4);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1BCA8C8A8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BCA8C8B0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SignificantChangeEngine.State.FrequencyShift.Mode()
{
  return &type metadata for SignificantChangeEngine.State.FrequencyShift.Mode;
}

uint64_t getEnumTagSinglePayload for SignificantChangeEngine.ChangepointComponent(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 40))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for SignificantChangeEngine.ChangepointComponent(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 40) = v3;
  return result;
}

ValueMetadata *type metadata accessor for SignificantChangeEngine.ChangepointComponent()
{
  return &type metadata for SignificantChangeEngine.ChangepointComponent;
}

uint64_t *initializeBufferWithCopyOfBuffer for SignificantChangeEngine.Changepoint(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  __int128 v15;
  char *v16;
  char *v17;
  __int128 v18;
  uint64_t v19;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v19 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_1BCAB4E54();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[6];
    *(uint64_t *)((char *)a1 + a3[5]) = *(uint64_t *)((char *)a2 + a3[5]);
    *(uint64_t *)((char *)a1 + v8) = *(uint64_t *)((char *)a2 + v8);
    v9 = a3[8];
    *(uint64_t *)((char *)a1 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
    *(uint64_t *)((char *)a1 + v9) = *(uint64_t *)((char *)a2 + v9);
    v10 = a3[10];
    *(uint64_t *)((char *)a1 + a3[9]) = *(uint64_t *)((char *)a2 + a3[9]);
    *(uint64_t *)((char *)a1 + v10) = *(uint64_t *)((char *)a2 + v10);
    v11 = a3[11];
    v12 = a3[12];
    v13 = (char *)a1 + v11;
    v14 = (char *)a2 + v11;
    v15 = *((_OWORD *)v14 + 1);
    *(_OWORD *)v13 = *(_OWORD *)v14;
    *((_OWORD *)v13 + 1) = v15;
    *((_QWORD *)v13 + 4) = *((_QWORD *)v14 + 4);
    v16 = (char *)a1 + v12;
    v17 = (char *)a2 + v12;
    *((_QWORD *)v16 + 4) = *((_QWORD *)v17 + 4);
    v18 = *((_OWORD *)v17 + 1);
    *(_OWORD *)v16 = *(_OWORD *)v17;
    *((_OWORD *)v16 + 1) = v18;
  }
  return a1;
}

uint64_t initializeWithCopy for SignificantChangeEngine.Changepoint(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;

  v6 = sub_1BCAB4E54();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[6];
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  v8 = a3[8];
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  *(_QWORD *)(a1 + v8) = *(_QWORD *)(a2 + v8);
  v9 = a3[10];
  *(_QWORD *)(a1 + a3[9]) = *(_QWORD *)(a2 + a3[9]);
  *(_QWORD *)(a1 + v9) = *(_QWORD *)(a2 + v9);
  v10 = a3[11];
  v11 = a3[12];
  v12 = a1 + v10;
  v13 = a2 + v10;
  v14 = *(_OWORD *)(v13 + 16);
  *(_OWORD *)v12 = *(_OWORD *)v13;
  *(_OWORD *)(v12 + 16) = v14;
  *(_QWORD *)(v12 + 32) = *(_QWORD *)(v13 + 32);
  v15 = a1 + v11;
  v16 = a2 + v11;
  *(_QWORD *)(v15 + 32) = *(_QWORD *)(v16 + 32);
  v17 = *(_OWORD *)(v16 + 16);
  *(_OWORD *)v15 = *(_OWORD *)v16;
  *(_OWORD *)(v15 + 16) = v17;
  return a1;
}

uint64_t assignWithCopy for SignificantChangeEngine.Changepoint(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;

  v6 = sub_1BCAB4E54();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  *(_QWORD *)(a1 + a3[6]) = *(_QWORD *)(a2 + a3[6]);
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  *(_QWORD *)(a1 + a3[8]) = *(_QWORD *)(a2 + a3[8]);
  *(_QWORD *)(a1 + a3[9]) = *(_QWORD *)(a2 + a3[9]);
  *(_QWORD *)(a1 + a3[10]) = *(_QWORD *)(a2 + a3[10]);
  v7 = a3[11];
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  *v8 = *v9;
  v8[1] = v9[1];
  v8[2] = v9[2];
  v8[3] = v9[3];
  v8[4] = v9[4];
  v10 = a3[12];
  v11 = (_QWORD *)(a1 + v10);
  v12 = (_QWORD *)(a2 + v10);
  *v11 = *v12;
  v11[1] = v12[1];
  v11[2] = v12[2];
  v11[3] = v12[3];
  v11[4] = v12[4];
  return a1;
}

uint64_t initializeWithTake for SignificantChangeEngine.Changepoint(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;

  v6 = sub_1BCAB4E54();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  v8 = a3[8];
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  *(_QWORD *)(a1 + v8) = *(_QWORD *)(a2 + v8);
  v9 = a3[10];
  *(_QWORD *)(a1 + a3[9]) = *(_QWORD *)(a2 + a3[9]);
  *(_QWORD *)(a1 + v9) = *(_QWORD *)(a2 + v9);
  v10 = a3[11];
  v11 = a3[12];
  v12 = a1 + v10;
  v13 = a2 + v10;
  v14 = *(_OWORD *)(v13 + 16);
  *(_OWORD *)v12 = *(_OWORD *)v13;
  *(_OWORD *)(v12 + 16) = v14;
  *(_QWORD *)(v12 + 32) = *(_QWORD *)(v13 + 32);
  v15 = a1 + v11;
  v16 = a2 + v11;
  *(_QWORD *)(v15 + 32) = *(_QWORD *)(v16 + 32);
  v17 = *(_OWORD *)(v16 + 16);
  *(_OWORD *)v15 = *(_OWORD *)v16;
  *(_OWORD *)(v15 + 16) = v17;
  return a1;
}

uint64_t assignWithTake for SignificantChangeEngine.Changepoint(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;

  v6 = sub_1BCAB4E54();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[6];
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  v8 = a3[8];
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  *(_QWORD *)(a1 + v8) = *(_QWORD *)(a2 + v8);
  v9 = a3[10];
  *(_QWORD *)(a1 + a3[9]) = *(_QWORD *)(a2 + a3[9]);
  *(_QWORD *)(a1 + v9) = *(_QWORD *)(a2 + v9);
  v10 = a3[11];
  v11 = a3[12];
  v12 = a1 + v10;
  v13 = a2 + v10;
  v14 = *(_OWORD *)(v13 + 16);
  *(_OWORD *)v12 = *(_OWORD *)v13;
  *(_OWORD *)(v12 + 16) = v14;
  *(_QWORD *)(v12 + 32) = *(_QWORD *)(v13 + 32);
  v15 = a1 + v11;
  v16 = a2 + v11;
  v17 = *(_OWORD *)(v16 + 16);
  *(_OWORD *)v15 = *(_OWORD *)v16;
  *(_OWORD *)(v15 + 16) = v17;
  *(_QWORD *)(v15 + 32) = *(_QWORD *)(v16 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for SignificantChangeEngine.Changepoint()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BCA8CD68(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1BCAB4E54();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for SignificantChangeEngine.Changepoint()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BCA8CDB0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1BCAB4E54();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t sub_1BCA8CDF0()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1BCAB4E54();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for SignificantChangeEngine.Changepoint.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF8)
    goto LABEL_17;
  if (a2 + 8 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 8) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 8;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 8;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 8;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 9;
  v8 = v6 - 9;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for SignificantChangeEngine.Changepoint.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 8 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 8) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF8)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF7)
    return ((uint64_t (*)(void))((char *)&loc_1BCA8CF58 + 4 * byte_1BCAC7793[v4]))();
  *a1 = a2 + 8;
  return ((uint64_t (*)(void))((char *)sub_1BCA8CF8C + 4 * byte_1BCAC778E[v4]))();
}

uint64_t sub_1BCA8CF8C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BCA8CF94(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BCA8CF9CLL);
  return result;
}

uint64_t sub_1BCA8CFA8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BCA8CFB0);
  *(_BYTE *)result = a2 + 8;
  return result;
}

uint64_t sub_1BCA8CFB4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BCA8CFBC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SignificantChangeEngine.Changepoint.CodingKeys()
{
  return &type metadata for SignificantChangeEngine.Changepoint.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for SignificantChangeEngine.ChangepointComponent.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1BCA8D024 + 4 * byte_1BCAC779D[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1BCA8D058 + 4 * byte_1BCAC7798[v4]))();
}

uint64_t sub_1BCA8D058(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BCA8D060(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BCA8D068);
  return result;
}

uint64_t sub_1BCA8D074(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BCA8D07CLL);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1BCA8D080(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BCA8D088(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SignificantChangeEngine.ChangepointComponent.CodingKeys()
{
  return &type metadata for SignificantChangeEngine.ChangepointComponent.CodingKeys;
}

ValueMetadata *type metadata accessor for SignificantChangeEngine.State.CodingKeys()
{
  return &type metadata for SignificantChangeEngine.State.CodingKeys;
}

ValueMetadata *type metadata accessor for SignificantChangeEngine.State.FrequencyShift.CodingKeys()
{
  return &type metadata for SignificantChangeEngine.State.FrequencyShift.CodingKeys;
}

ValueMetadata *type metadata accessor for SignificantChangeEngine.State.MeanShift.CodingKeys()
{
  return &type metadata for SignificantChangeEngine.State.MeanShift.CodingKeys;
}

uint64_t _s19HealthVisualization23SignificantChangeEngineV10ParametersV15ChangepointModeOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1BCA8D124 + 4 * byte_1BCAC77A7[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1BCA8D158 + 4 * byte_1BCAC77A2[v4]))();
}

uint64_t sub_1BCA8D158(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BCA8D160(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BCA8D168);
  return result;
}

uint64_t sub_1BCA8D174(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BCA8D17CLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1BCA8D180(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BCA8D188(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SignificantChangeEngine.Parameters.CodingKeys()
{
  return &type metadata for SignificantChangeEngine.Parameters.CodingKeys;
}

ValueMetadata *type metadata accessor for SignificantChangeEngine.Parameters.FrequencyShift.CodingKeys()
{
  return &type metadata for SignificantChangeEngine.Parameters.FrequencyShift.CodingKeys;
}

uint64_t _s19HealthVisualization23SignificantChangeEngineV10ParametersV14FrequencyShiftV10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_1BCA8D208 + 4 * byte_1BCAC77B1[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_1BCA8D23C + 4 * byte_1BCAC77AC[v4]))();
}

uint64_t sub_1BCA8D23C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BCA8D244(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BCA8D24CLL);
  return result;
}

uint64_t sub_1BCA8D258(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BCA8D260);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_1BCA8D264(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BCA8D26C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SignificantChangeEngine.Parameters.MeanShift.CodingKeys()
{
  return &type metadata for SignificantChangeEngine.Parameters.MeanShift.CodingKeys;
}

ValueMetadata *type metadata accessor for SignificantChangeEngine.Parameters.Thresholds.CodingKeys()
{
  return &type metadata for SignificantChangeEngine.Parameters.Thresholds.CodingKeys;
}

uint64_t _s19HealthVisualization23SignificantChangeEngineV5StateV10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1BCA8D2E4 + 4 * byte_1BCAC77BB[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1BCA8D318 + 4 * byte_1BCAC77B6[v4]))();
}

uint64_t sub_1BCA8D318(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BCA8D320(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BCA8D328);
  return result;
}

uint64_t sub_1BCA8D334(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BCA8D33CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1BCA8D340(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BCA8D348(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SignificantChangeEngine.Output.CodingKeys()
{
  return &type metadata for SignificantChangeEngine.Output.CodingKeys;
}

unint64_t sub_1BCA8D368()
{
  unint64_t result;

  result = qword_1EF47A250;
  if (!qword_1EF47A250)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCAC811C, &type metadata for SignificantChangeEngine.Output.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF47A250);
  }
  return result;
}

unint64_t sub_1BCA8D3B0()
{
  unint64_t result;

  result = qword_1EF47A258;
  if (!qword_1EF47A258)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCAC81D4, &type metadata for SignificantChangeEngine.Parameters.Thresholds.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF47A258);
  }
  return result;
}

unint64_t sub_1BCA8D3F8()
{
  unint64_t result;

  result = qword_1EF47A260;
  if (!qword_1EF47A260)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCAC828C, &type metadata for SignificantChangeEngine.Parameters.MeanShift.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF47A260);
  }
  return result;
}

unint64_t sub_1BCA8D440()
{
  unint64_t result;

  result = qword_1EF47A268;
  if (!qword_1EF47A268)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCAC8344, &type metadata for SignificantChangeEngine.Parameters.FrequencyShift.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF47A268);
  }
  return result;
}

unint64_t sub_1BCA8D488()
{
  unint64_t result;

  result = qword_1EF47A270;
  if (!qword_1EF47A270)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCAC83FC, &type metadata for SignificantChangeEngine.Parameters.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF47A270);
  }
  return result;
}

unint64_t sub_1BCA8D4D0()
{
  unint64_t result;

  result = qword_1EF47A278;
  if (!qword_1EF47A278)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCAC84B4, &type metadata for SignificantChangeEngine.State.MeanShift.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF47A278);
  }
  return result;
}

unint64_t sub_1BCA8D518()
{
  unint64_t result;

  result = qword_1EF47A280;
  if (!qword_1EF47A280)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCAC856C, &type metadata for SignificantChangeEngine.State.FrequencyShift.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF47A280);
  }
  return result;
}

unint64_t sub_1BCA8D560()
{
  unint64_t result;

  result = qword_1EF47A288;
  if (!qword_1EF47A288)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCAC8624, &type metadata for SignificantChangeEngine.State.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF47A288);
  }
  return result;
}

unint64_t sub_1BCA8D5A8()
{
  unint64_t result;

  result = qword_1EF47A290;
  if (!qword_1EF47A290)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCAC86DC, &type metadata for SignificantChangeEngine.ChangepointComponent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF47A290);
  }
  return result;
}

unint64_t sub_1BCA8D5F0()
{
  unint64_t result;

  result = qword_1EF47A298;
  if (!qword_1EF47A298)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCAC8794, &type metadata for SignificantChangeEngine.Changepoint.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF47A298);
  }
  return result;
}

unint64_t sub_1BCA8D638()
{
  unint64_t result;

  result = qword_1ED6C39A0;
  if (!qword_1ED6C39A0)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCAC8704, &type metadata for SignificantChangeEngine.Changepoint.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED6C39A0);
  }
  return result;
}

unint64_t sub_1BCA8D680()
{
  unint64_t result;

  result = qword_1ED6C3998;
  if (!qword_1ED6C3998)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCAC872C, &type metadata for SignificantChangeEngine.Changepoint.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED6C3998);
  }
  return result;
}

unint64_t sub_1BCA8D6C8()
{
  unint64_t result;

  result = qword_1ED6C3A78;
  if (!qword_1ED6C3A78)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCAC864C, &type metadata for SignificantChangeEngine.ChangepointComponent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED6C3A78);
  }
  return result;
}

unint64_t sub_1BCA8D710()
{
  unint64_t result;

  result = qword_1ED6C3A70;
  if (!qword_1ED6C3A70)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCAC8674, &type metadata for SignificantChangeEngine.ChangepointComponent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED6C3A70);
  }
  return result;
}

unint64_t sub_1BCA8D758()
{
  unint64_t result;

  result = qword_1ED6C3AA0;
  if (!qword_1ED6C3AA0)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCAC8594, &type metadata for SignificantChangeEngine.State.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED6C3AA0);
  }
  return result;
}

unint64_t sub_1BCA8D7A0()
{
  unint64_t result;

  result = qword_1ED6C3A98;
  if (!qword_1ED6C3A98)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCAC85BC, &type metadata for SignificantChangeEngine.State.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED6C3A98);
  }
  return result;
}

unint64_t sub_1BCA8D7E8()
{
  unint64_t result;

  result = qword_1ED6C3AB8;
  if (!qword_1ED6C3AB8)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCAC84DC, &type metadata for SignificantChangeEngine.State.FrequencyShift.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED6C3AB8);
  }
  return result;
}

unint64_t sub_1BCA8D830()
{
  unint64_t result;

  result = qword_1ED6C3AB0;
  if (!qword_1ED6C3AB0)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCAC8504, &type metadata for SignificantChangeEngine.State.FrequencyShift.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED6C3AB0);
  }
  return result;
}

unint64_t sub_1BCA8D878()
{
  unint64_t result;

  result = qword_1ED6C3B98;
  if (!qword_1ED6C3B98)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCAC8424, &type metadata for SignificantChangeEngine.State.MeanShift.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED6C3B98);
  }
  return result;
}

unint64_t sub_1BCA8D8C0()
{
  unint64_t result;

  result = qword_1ED6C3B90;
  if (!qword_1ED6C3B90)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCAC844C, &type metadata for SignificantChangeEngine.State.MeanShift.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED6C3B90);
  }
  return result;
}

unint64_t sub_1BCA8D908()
{
  unint64_t result;

  result = qword_1EF47A2A0;
  if (!qword_1EF47A2A0)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCAC836C, &type metadata for SignificantChangeEngine.Parameters.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF47A2A0);
  }
  return result;
}

unint64_t sub_1BCA8D950()
{
  unint64_t result;

  result = qword_1EF47A2A8;
  if (!qword_1EF47A2A8)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCAC8394, &type metadata for SignificantChangeEngine.Parameters.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF47A2A8);
  }
  return result;
}

unint64_t sub_1BCA8D998()
{
  unint64_t result;

  result = qword_1EF47A2B0;
  if (!qword_1EF47A2B0)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCAC82B4, &type metadata for SignificantChangeEngine.Parameters.FrequencyShift.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF47A2B0);
  }
  return result;
}

unint64_t sub_1BCA8D9E0()
{
  unint64_t result;

  result = qword_1EF47A2B8;
  if (!qword_1EF47A2B8)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCAC82DC, &type metadata for SignificantChangeEngine.Parameters.FrequencyShift.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF47A2B8);
  }
  return result;
}

unint64_t sub_1BCA8DA28()
{
  unint64_t result;

  result = qword_1EF47A2C0;
  if (!qword_1EF47A2C0)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCAC81FC, &type metadata for SignificantChangeEngine.Parameters.MeanShift.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF47A2C0);
  }
  return result;
}

unint64_t sub_1BCA8DA70()
{
  unint64_t result;

  result = qword_1EF47A2C8;
  if (!qword_1EF47A2C8)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCAC8224, &type metadata for SignificantChangeEngine.Parameters.MeanShift.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF47A2C8);
  }
  return result;
}

unint64_t sub_1BCA8DAB8()
{
  unint64_t result;

  result = qword_1EF47A2D0;
  if (!qword_1EF47A2D0)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCAC8144, &type metadata for SignificantChangeEngine.Parameters.Thresholds.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF47A2D0);
  }
  return result;
}

unint64_t sub_1BCA8DB00()
{
  unint64_t result;

  result = qword_1EF47A2D8;
  if (!qword_1EF47A2D8)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCAC816C, &type metadata for SignificantChangeEngine.Parameters.Thresholds.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF47A2D8);
  }
  return result;
}

unint64_t sub_1BCA8DB48()
{
  unint64_t result;

  result = qword_1ED6C3D10;
  if (!qword_1ED6C3D10)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCAC808C, &type metadata for SignificantChangeEngine.Output.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED6C3D10);
  }
  return result;
}

unint64_t sub_1BCA8DB90()
{
  unint64_t result;

  result = qword_1ED6C3D08;
  if (!qword_1ED6C3D08)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCAC80B4, &type metadata for SignificantChangeEngine.Output.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED6C3D08);
  }
  return result;
}

uint64_t sub_1BCA8DBD4(uint64_t a1, uint64_t (*a2)(_QWORD, _QWORD, _QWORD))
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(_QWORD, _QWORD, _QWORD);
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  sub_1BC9BD26C(0);
  v6 = v5;
  MEMORY[0x1E0C80A78](v5);
  v24 = (uint64_t)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v19 - v10;
  result = MEMORY[0x1E0DEE9D8];
  v25 = MEMORY[0x1E0DEE9D8];
  v13 = *(_QWORD *)(a1 + 16);
  if (v13)
  {
    v19 = v2;
    v14 = *(_QWORD *)(v9 + 72);
    v22 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
    v15 = a1 + v22;
    v16 = MEMORY[0x1E0DEE9D8];
    v23 = v6;
    v20 = v14;
    v21 = a2;
    do
    {
      sub_1BC9964B8(v15, (uint64_t)v11, (uint64_t (*)(_QWORD))sub_1BC9BD26C);
      if ((a2(v11, *(_QWORD *)&v11[*(int *)(v6 + 48)], v11[*(int *)(v6 + 48) + 8]) & 1) != 0)
      {
        sub_1BC9AE330((uint64_t)v11, v24, (uint64_t (*)(_QWORD))sub_1BC9BD26C);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          sub_1BC9BAE48(0, *(_QWORD *)(v16 + 16) + 1, 1);
        v16 = v25;
        v18 = *(_QWORD *)(v25 + 16);
        v17 = *(_QWORD *)(v25 + 24);
        if (v18 >= v17 >> 1)
        {
          sub_1BC9BAE48(v17 > 1, v18 + 1, 1);
          v16 = v25;
        }
        *(_QWORD *)(v16 + 16) = v18 + 1;
        v14 = v20;
        sub_1BC9AE330(v24, v16 + v22 + v18 * v20, (uint64_t (*)(_QWORD))sub_1BC9BD26C);
        a2 = v21;
        v6 = v23;
      }
      else
      {
        sub_1BC997208((uint64_t)v11, (uint64_t (*)(_QWORD))sub_1BC9BD26C);
      }
      v15 += v14;
      --v13;
    }
    while (v13);
    return v25;
  }
  return result;
}

uint64_t sub_1BCA8DDB4(uint64_t a1, uint64_t (*a2)(_QWORD), uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t (*v34)(_QWORD);
  uint64_t v35;
  uint64_t v36;

  v34 = a2;
  v35 = a3;
  sub_1BCA8F614();
  v33 = v4;
  MEMORY[0x1E0C80A78](v4);
  v32 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v8 = (uint64_t *)((char *)&v28 - v7);
  MEMORY[0x1E0C80A78](v9);
  v11 = (uint64_t *)((char *)&v28 - v10);
  v36 = MEMORY[0x1E0DEE9D8];
  sub_1BC9BAE2C(0, 0, 0);
  v12 = v36;
  v13 = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRetain();
  v31 = v13;
  v28 = a1;
  if (v13)
  {
    sub_1BC9BD26C(0);
    v14 = 0;
    v16 = *(_QWORD *)(v15 - 8);
    v17 = a1 + ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80));
    v29 = *(_QWORD *)(v16 + 72);
    v30 = v15;
    do
    {
      v18 = v33;
      v19 = (uint64_t)&v32[*(int *)(v33 + 48)];
      sub_1BC9964B8(v17, v19, (uint64_t (*)(_QWORD))sub_1BC9BD26C);
      v20 = (uint64_t)v8 + *(int *)(v18 + 48);
      *v8 = v14;
      sub_1BC9AE330(v19, v20, (uint64_t (*)(_QWORD))sub_1BC9BD26C);
      sub_1BC9AE330((uint64_t)v8, (uint64_t)v11, (uint64_t (*)(_QWORD))sub_1BCA8F614);
      v21 = v34(*v11);
      v23 = v22;
      sub_1BC997208((uint64_t)v11, (uint64_t (*)(_QWORD))sub_1BCA8F614);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1BC9BAE2C(0, *(_QWORD *)(v12 + 16) + 1, 1);
        v12 = v36;
      }
      v25 = *(_QWORD *)(v12 + 16);
      v24 = *(_QWORD *)(v12 + 24);
      if (v25 >= v24 >> 1)
      {
        sub_1BC9BAE2C(v24 > 1, v25 + 1, 1);
        v12 = v36;
      }
      ++v14;
      *(_QWORD *)(v12 + 16) = v25 + 1;
      v26 = v12 + 16 * v25;
      *(_QWORD *)(v26 + 32) = v21;
      *(_QWORD *)(v26 + 40) = v23;
      v17 += v29;
    }
    while (v31 != v14);
  }
  swift_bridgeObjectRelease();
  return v12;
}

uint64_t sub_1BCA8E004(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x666968536E61656DLL && a2 == 0xEF65676E61684374;
  if (v2 || (sub_1BCAB67C8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x636E657571657266 && a2 == 0xEF65676E61684379 || (sub_1BCAB67C8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6574617473 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_1BCAB67C8();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_1BCA8E178(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x506D756D6978616DLL && a2 == 0xED000065756C6156;
  if (v2 || (sub_1BCAB67C8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000001BCACED70 || (sub_1BCAB67C8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x80000001BCAD30C0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_1BCAB67C8();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_1BCA8E2E4(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6C6F687365726874 && a2 == 0xEA00000000007364;
  if (v2 || (sub_1BCAB67C8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000017 && a2 == 0x80000001BCAD30E0 || (sub_1BCAB67C8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 1701080941 && a2 == 0xE400000000000000 || (sub_1BCAB67C8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x80000001BCACED90 || (sub_1BCAB67C8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000001BCACEDB0 || (sub_1BCAB67C8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD000000000000021 && a2 == 0x80000001BCAD3100 || (sub_1BCAB67C8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x80000001BCAD3130)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else
  {
    v6 = sub_1BCAB67C8();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 6;
    else
      return 7;
  }
}

uint64_t sub_1BCA8E590(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6F68736572685470 && a2 == 0xEA0000000000646CLL;
  if (v2 || (sub_1BCAB67C8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x80000001BCACED90 || (sub_1BCAB67C8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000001BCACEDB0 || (sub_1BCAB67C8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000019 && a2 == 0x80000001BCAD3150 || (sub_1BCAB67C8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x80000001BCAD3170 || (sub_1BCAB67C8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x80000001BCAD3190 || (sub_1BCAB67C8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0xD000000000000019 && a2 == 0x80000001BCAD31B0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else
  {
    v6 = sub_1BCAB67C8();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 6;
    else
      return 7;
  }
}

uint64_t sub_1BCA8E844(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 0xD000000000000012 && a2 == 0x80000001BCAD31D0 || (sub_1BCAB67C8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7544776F646E6977 && a2 == 0xEE006E6F69746172 || (sub_1BCAB67C8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x666968536E61656DLL && a2 == 0xE900000000000074 || (sub_1BCAB67C8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x636E657571657266 && a2 == 0xEE00746669685379)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v5 = sub_1BCAB67C8();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_1BCA8EA4C(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6843657669746361 && a2 == 0xEC00000065676E61;
  if (v2 || (sub_1BCAB67C8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000001BCAD31F0 || (sub_1BCAB67C8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000018 && a2 == 0x80000001BCAD3210)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_1BCAB67C8();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_1BCA8EBAC(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x697469736E617274 && a2 == 0xEE00657461446E6FLL;
  if (v2 || (sub_1BCAB67C8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1701080941 && a2 == 0xE400000000000000 || (sub_1BCAB67C8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6843657669746361 && a2 == 0xEC00000065676E61)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_1BCAB67C8();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_1BCA8ED2C(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 0xD000000000000012 && a2 == 0x80000001BCAD3230 || (sub_1BCAB67C8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x666968536E61656DLL && a2 == 0xE900000000000074 || (sub_1BCAB67C8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x636E657571657266 && a2 == 0xEE00746669685379)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v5 = sub_1BCAB67C8();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_1BCA8EEAC(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x746E756F63 && a2 == 0xE500000000000000;
  if (v2 || (sub_1BCAB67C8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 7173491 && a2 == 0xE300000000000000 || (sub_1BCAB67C8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x5364657261757173 && a2 == 0xEA00000000006D75 || (sub_1BCAB67C8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 1851876717 && a2 == 0xE400000000000000 || (sub_1BCAB67C8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x65636E6169726176 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    v6 = sub_1BCAB67C8();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

uint64_t sub_1BCA8F0AC(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 1702125924 && a2 == 0xE400000000000000;
  if (v2 || (sub_1BCAB67C8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x65756C615670 && a2 == 0xE600000000000000 || (sub_1BCAB67C8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x7473655474 && a2 == 0xE500000000000000 || (sub_1BCAB67C8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x666968536E61656DLL && a2 == 0xE900000000000074 || (sub_1BCAB67C8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000001BCAD3250 || (sub_1BCAB67C8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x6953746365666665 && a2 == 0xEA0000000000657ALL || (sub_1BCAB67C8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 12908 && a2 == 0xE200000000000000 || (sub_1BCAB67C8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 7563372 && a2 == 0xE300000000000000 || (sub_1BCAB67C8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 7563378 && a2 == 0xE300000000000000)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else
  {
    v6 = sub_1BCAB67C8();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 8;
    else
      return 9;
  }
}

unint64_t sub_1BCA8F40C()
{
  unint64_t result;

  result = qword_1ED6C3AC8;
  if (!qword_1ED6C3AC8)
  {
    result = MEMORY[0x1BCCFBE84](&protocol conformance descriptor for SignificantChangeEngine.State.FrequencyShift.Mode, &type metadata for SignificantChangeEngine.State.FrequencyShift.Mode);
    atomic_store(result, (unint64_t *)&qword_1ED6C3AC8);
  }
  return result;
}

unint64_t sub_1BCA8F450()
{
  unint64_t result;

  result = qword_1EF47A2E0;
  if (!qword_1EF47A2E0)
  {
    result = MEMORY[0x1BCCFBE84](&protocol conformance descriptor for SignificantChangeEngine.Parameters.ChangepointMode, &type metadata for SignificantChangeEngine.Parameters.ChangepointMode);
    atomic_store(result, (unint64_t *)&qword_1EF47A2E0);
  }
  return result;
}

uint64_t sub_1BCA8F494(uint64_t a1)
{
  unsigned int v1;

  v1 = *(unsigned __int8 *)(a1 + 89);
  if (v1 >= 4)
    return v1 - 3;
  else
    return 0;
}

uint64_t sub_1BCA8F4A8(uint64_t a1)
{
  uint64_t v1;

  return sub_1BCA7BD38(a1, *(char **)(v1 + 16), *(_QWORD *)(v1 + 24)) & 1;
}

void sub_1BCA8F4C4(uint64_t a1)
{
  sub_1BC9DBDBC(a1, &qword_1ED6C3630, (void (*)(uint64_t))type metadata accessor for SignificantChangeEngine.Changepoint);
}

uint64_t sub_1BCA8F4D8(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  uint64_t v6;

  sub_1BC9A1210(0, a3, a4, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a2, a1, v6);
  return a2;
}

uint64_t sub_1BCA8F530(uint64_t a1)
{
  uint64_t v1;

  return sub_1BCA71580(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24)) & 1;
}

void sub_1BCA8F54C(uint64_t a1)
{
  sub_1BC998AB0(a1, &qword_1ED6C47B8, type metadata accessor for SignificantChange.Period, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
}

uint64_t sub_1BCA8F568(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1BCA7F5DC(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

BOOL sub_1BCA8F5AC()
{
  return sub_1BCA7A83C();
}

BOOL sub_1BCA8F5B8(uint64_t a1)
{
  uint64_t v1;

  return sub_1BCA7A904(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_1BCA8F5D4(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;

  return sub_1BCA7A5A0(a1, a2, a3 & 1, *(char **)(v3 + 16), *(_QWORD *)(v3 + 24));
}

uint64_t sub_1BCA8F5E0(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;

  return sub_1BCA79CF0(a1, a2, a3 & 1, *(_QWORD *)(v3 + 16));
}

void sub_1BCA8F5EC(uint64_t a1)
{
  sub_1BC998AB0(a1, &qword_1ED6C31A8, (uint64_t (*)(uint64_t))sub_1BC9BD26C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
}

double sub_1BCA8F608(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return sub_1BCA7BB10(a1, a2, a3, a4 & 1);
}

void sub_1BCA8F614()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_1ED6C4618)
  {
    sub_1BC9BD26C(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1ED6C4618);
  }
}

void sub_1BCA8F67C(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t TupleTypeMetadata2;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v5)
      atomic_store(TupleTypeMetadata2, a2);
  }
}

uint64_t sub_1BCA8F6D4(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  uint64_t v4;

  sub_1BCA8F67C(0, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

unint64_t sub_1BCA8F710()
{
  unint64_t result;

  result = qword_1EF47A310;
  if (!qword_1EF47A310)
  {
    result = swift_getMetatypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1EF47A310);
  }
  return result;
}

uint64_t sub_1BCA8F748(uint64_t a1)
{
  return sub_1BCA8F4A8(a1) & 1;
}

uint64_t sub_1BCA8F764()
{
  return static PresentationDateProviding.presentationDate.getter();
}

uint64_t dispatch thunk of static PresentationDateProviding.presentationDate.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

Swift::Bool __swiftcall CountComparisonQueryConfiguration.DurationCondition.isValid(_:)(Swift::Double a1)
{
  double *v1;

  return *v1 <= a1;
}

void CountComparisonQueryConfiguration.firstDurationCondition.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(v1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_BYTE *)(a1 + 8) = v2;
}

uint64_t CountComparisonQueryConfiguration.firstDurationCondition.setter(uint64_t result)
{
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(result + 8);
  *(_QWORD *)v1 = *(_QWORD *)result;
  *(_BYTE *)(v1 + 8) = v2;
  return result;
}

uint64_t (*CountComparisonQueryConfiguration.firstDurationCondition.modify())()
{
  return nullsub_1;
}

void CountComparisonQueryConfiguration.secondDurationCondition.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(v1 + 24);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 16);
  *(_BYTE *)(a1 + 8) = v2;
}

uint64_t CountComparisonQueryConfiguration.secondDurationCondition.setter(uint64_t result)
{
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(result + 8);
  *(_QWORD *)(v1 + 16) = *(_QWORD *)result;
  *(_BYTE *)(v1 + 24) = v2;
  return result;
}

uint64_t (*CountComparisonQueryConfiguration.secondDurationCondition.modify())()
{
  return nullsub_1;
}

uint64_t CountComparisonQueryConfiguration.init(firstDurationCondition:secondDurationCondition:)@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  char v3;
  uint64_t v4;
  char v5;

  v3 = *(_BYTE *)(result + 8);
  v4 = *a2;
  v5 = *((_BYTE *)a2 + 8);
  *(_QWORD *)a3 = *(_QWORD *)result;
  *(_BYTE *)(a3 + 8) = v3;
  *(_QWORD *)(a3 + 16) = v4;
  *(_BYTE *)(a3 + 24) = v5;
  return result;
}

unint64_t sub_1BCA8F82C()
{
  _BYTE *v0;

  if (*v0)
    return 0xD000000000000017;
  else
    return 0xD000000000000016;
}

uint64_t sub_1BCA8F86C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1BCA90570(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1BCA8F890()
{
  sub_1BCA900E0();
  return sub_1BCAB68D0();
}

uint64_t sub_1BCA8F8B8()
{
  sub_1BCA900E0();
  return sub_1BCAB68DC();
}

uint64_t CountComparisonQueryConfiguration.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  _QWORD v12[2];
  uint64_t v13;
  char v14;
  int v15;
  char v16;

  sub_1BC9ACE04(0, &qword_1EF47A318, (uint64_t (*)(void))sub_1BCA900E0, (uint64_t)&type metadata for CountComparisonQueryConfiguration.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v7 = (char *)v12 - v6;
  v8 = *v1;
  v9 = *((_BYTE *)v1 + 8);
  v12[0] = v1[2];
  v15 = *((unsigned __int8 *)v1 + 24);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BCA900E0();
  sub_1BCAB68B8();
  v13 = v8;
  v14 = v9;
  v16 = 0;
  sub_1BCA90124();
  v10 = v12[1];
  sub_1BCAB6738();
  if (!v10)
  {
    v13 = v12[0];
    v14 = v15;
    v16 = 1;
    sub_1BCAB6738();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t CountComparisonQueryConfiguration.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char v10;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;

  v15 = a2;
  sub_1BC9ACE04(0, &qword_1EF47A330, (uint64_t (*)(void))sub_1BCA900E0, (uint64_t)&type metadata for CountComparisonQueryConfiguration.CodingKeys, MEMORY[0x1E0DED048]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v14 - v7;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BCA900E0();
  sub_1BCAB68AC();
  if (!v2)
  {
    v9 = v15;
    v18 = 0;
    sub_1BCA90168();
    sub_1BCAB66A8();
    v14 = v16;
    v10 = v17;
    v18 = 1;
    sub_1BCAB66A8();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v12 = v16;
    v13 = v17;
    *(_QWORD *)v9 = v14;
    *(_BYTE *)(v9 + 8) = v10;
    *(_QWORD *)(v9 + 16) = v12;
    *(_BYTE *)(v9 + 24) = v13;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_1BCA8FC18@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return CountComparisonQueryConfiguration.init(from:)(a1, a2);
}

uint64_t sub_1BCA8FC2C(_QWORD *a1)
{
  return CountComparisonQueryConfiguration.encode(to:)(a1);
}

unint64_t sub_1BCA8FC44()
{
  return 0xD000000000000014;
}

uint64_t sub_1BCA8FC60@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1BCA90658(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_1BCA8FC88()
{
  sub_1BCA901AC();
  return sub_1BCAB68D0();
}

uint64_t sub_1BCA8FCB0()
{
  sub_1BCA901AC();
  return sub_1BCAB68DC();
}

uint64_t CountComparisonQueryConfiguration.DurationCondition.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;

  sub_1BC9ACE04(0, &qword_1EF47A340, (uint64_t (*)(void))sub_1BCA901AC, (uint64_t)&type metadata for CountComparisonQueryConfiguration.DurationCondition.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v6 = (char *)&v8 - v5;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BCA901AC();
  sub_1BCAB68B8();
  sub_1BCAB675C();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t CountComparisonQueryConfiguration.DurationCondition.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;

  v15 = a2;
  sub_1BC9ACE04(0, &qword_1EF47A350, (uint64_t (*)(void))sub_1BCA901AC, (uint64_t)&type metadata for CountComparisonQueryConfiguration.DurationCondition.CodingKeys, MEMORY[0x1E0DED048]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v14 - v7;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BCA901AC();
  sub_1BCAB68AC();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v9 = v15;
  v10 = *(_QWORD *)(sub_1BCAB66F0() + 16);
  result = swift_bridgeObjectRelease();
  if (v10)
  {
    sub_1BCAB66CC();
    v13 = v12;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *v9 = v13;
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  __break(1u);
  return result;
}

BOOL static CountComparisonQueryConfiguration.DurationCondition.== infix(_:_:)(double *a1, double *a2)
{
  return *a1 == *a2;
}

uint64_t sub_1BCA8FF54@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return CountComparisonQueryConfiguration.DurationCondition.init(from:)(a1, a2);
}

uint64_t sub_1BCA8FF68(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;

  sub_1BC9ACE04(0, &qword_1EF47A340, (uint64_t (*)(void))sub_1BCA901AC, (uint64_t)&type metadata for CountComparisonQueryConfiguration.DurationCondition.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v6 = (char *)&v8 - v5;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BCA901AC();
  sub_1BCAB68B8();
  sub_1BCAB675C();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

BOOL sub_1BCA90070(double *a1, double *a2)
{
  return *a1 == *a2;
}

BOOL _s19HealthVisualization33CountComparisonQueryConfigurationV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;

  v2 = *(_BYTE *)(a2 + 8);
  v3 = *(_BYTE *)(a2 + 24);
  if ((*(_BYTE *)(a1 + 8) & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 8))
      return 0;
  }
  else
  {
    if (*(double *)a1 != *(double *)a2)
      v2 = 1;
    if ((v2 & 1) != 0)
      return 0;
  }
  if ((*(_BYTE *)(a1 + 24) & 1) == 0)
  {
    if (*(double *)(a1 + 16) != *(double *)(a2 + 16))
      v3 = 1;
    return (v3 & 1) == 0;
  }
  return (*(_BYTE *)(a2 + 24) & 1) != 0;
}

unint64_t sub_1BCA900E0()
{
  unint64_t result;

  result = qword_1EF47A320;
  if (!qword_1EF47A320)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCAC8E24, &type metadata for CountComparisonQueryConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF47A320);
  }
  return result;
}

unint64_t sub_1BCA90124()
{
  unint64_t result;

  result = qword_1EF47A328;
  if (!qword_1EF47A328)
  {
    result = MEMORY[0x1BCCFBE84](&protocol conformance descriptor for CountComparisonQueryConfiguration.DurationCondition, &type metadata for CountComparisonQueryConfiguration.DurationCondition);
    atomic_store(result, (unint64_t *)&qword_1EF47A328);
  }
  return result;
}

unint64_t sub_1BCA90168()
{
  unint64_t result;

  result = qword_1EF47A338;
  if (!qword_1EF47A338)
  {
    result = MEMORY[0x1BCCFBE84](&protocol conformance descriptor for CountComparisonQueryConfiguration.DurationCondition, &type metadata for CountComparisonQueryConfiguration.DurationCondition);
    atomic_store(result, (unint64_t *)&qword_1EF47A338);
  }
  return result;
}

unint64_t sub_1BCA901AC()
{
  unint64_t result;

  result = qword_1EF47A348;
  if (!qword_1EF47A348)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCAC8DD4, &type metadata for CountComparisonQueryConfiguration.DurationCondition.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF47A348);
  }
  return result;
}

ValueMetadata *type metadata accessor for CountComparisonQueryConfiguration()
{
  return &type metadata for CountComparisonQueryConfiguration;
}

uint64_t getEnumTagSinglePayload for CountComparisonQueryConfiguration.DurationCondition(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for CountComparisonQueryConfiguration.DurationCondition(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 8) = v3;
  return result;
}

ValueMetadata *type metadata accessor for CountComparisonQueryConfiguration.DurationCondition()
{
  return &type metadata for CountComparisonQueryConfiguration.DurationCondition;
}

uint64_t storeEnumTagSinglePayload for CountComparisonQueryConfiguration.DurationCondition.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1BCA90298 + 4 * byte_1BCAC8B00[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1BCA902B8 + 4 * byte_1BCAC8B05[v4]))();
}

_BYTE *sub_1BCA90298(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1BCA902B8(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1BCA902C0(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1BCA902C8(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1BCA902D0(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1BCA902D8(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for CountComparisonQueryConfiguration.DurationCondition.CodingKeys()
{
  return &type metadata for CountComparisonQueryConfiguration.DurationCondition.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for CountComparisonQueryConfiguration.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1BCA90340 + 4 * byte_1BCAC8B0F[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1BCA90374 + 4 * byte_1BCAC8B0A[v4]))();
}

uint64_t sub_1BCA90374(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BCA9037C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BCA90384);
  return result;
}

uint64_t sub_1BCA90390(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BCA90398);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1BCA9039C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BCA903A4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CountComparisonQueryConfiguration.CodingKeys()
{
  return &type metadata for CountComparisonQueryConfiguration.CodingKeys;
}

unint64_t sub_1BCA903C4()
{
  unint64_t result;

  result = qword_1EF47A358;
  if (!qword_1EF47A358)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCAC8CF4, &type metadata for CountComparisonQueryConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF47A358);
  }
  return result;
}

unint64_t sub_1BCA9040C()
{
  unint64_t result;

  result = qword_1EF47A360;
  if (!qword_1EF47A360)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCAC8DAC, &type metadata for CountComparisonQueryConfiguration.DurationCondition.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF47A360);
  }
  return result;
}

unint64_t sub_1BCA90454()
{
  unint64_t result;

  result = qword_1EF47A368;
  if (!qword_1EF47A368)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCAC8D1C, &type metadata for CountComparisonQueryConfiguration.DurationCondition.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF47A368);
  }
  return result;
}

unint64_t sub_1BCA9049C()
{
  unint64_t result;

  result = qword_1EF47A370;
  if (!qword_1EF47A370)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCAC8D44, &type metadata for CountComparisonQueryConfiguration.DurationCondition.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF47A370);
  }
  return result;
}

unint64_t sub_1BCA904E4()
{
  unint64_t result;

  result = qword_1EF47A378;
  if (!qword_1EF47A378)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCAC8C64, &type metadata for CountComparisonQueryConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF47A378);
  }
  return result;
}

unint64_t sub_1BCA9052C()
{
  unint64_t result;

  result = qword_1EF47A380;
  if (!qword_1EF47A380)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCAC8C8C, &type metadata for CountComparisonQueryConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF47A380);
  }
  return result;
}

uint64_t sub_1BCA90570(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 0xD000000000000016 && a2 == 0x80000001BCAD32D0 || (sub_1BCAB67C8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000017 && a2 == 0x80000001BCAD32F0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v5 = sub_1BCAB67C8();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_1BCA90658(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;

  if (a1 == 0xD000000000000014 && a2 == 0x80000001BCAD3310)
  {
    swift_bridgeObjectRelease();
    v2 = 0;
  }
  else
  {
    v3 = sub_1BCAB67C8();
    swift_bridgeObjectRelease();
    v2 = v3 ^ 1;
  }
  return v2 & 1;
}

id sub_1BCA906DC()
{
  uint64_t ObjCClassFromMetadata;
  id result;

  type metadata accessor for DiagramFactory();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  result = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
  qword_1ED6D3830 = (uint64_t)result;
  return result;
}

uint64_t TimeBasedDistributionFlavor.init(distribution:)(uint64_t a1)
{
  return sub_1BCA907C0(a1) & 1;
}

BOOL static TimeBasedDistributionFlavor.== infix(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

uint64_t TimeBasedDistributionFlavor.hash(into:)()
{
  return sub_1BCAB687C();
}

uint64_t TimeBasedDistributionFlavor.hashValue.getter()
{
  sub_1BCAB6870();
  sub_1BCAB687C();
  return sub_1BCAB6894();
}

uint64_t sub_1BCA907C0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  __int8 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int64x2_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int64x2_t v15;
  int64x2_t v16;
  int64x2_t v17;
  int64x2_t v18;
  _BOOL8 v19;
  uint64_t result;
  int64x2_t v21;
  uint64_t v22;
  unint64_t v23;

  v2 = type metadata accessor for TimeBasedDistribution();
  MEMORY[0x1E0C80A78](v2);
  v4 = &v21.i8[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = sub_1BCAB4F68();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = &v21.i8[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = *(int64x2_t **)(a1 + *(int *)(v2 + 20));
  v10 = v9[1].i64[0];
  if (!v10)
    goto LABEL_11;
  v21 = v9[2];
  v11 = (uint64_t)&v9[2].i64[5 * v10];
  v13 = *(_QWORD *)(v11 - 40);
  v12 = *(_QWORD *)(v11 - 32);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a1, v5);
  v14 = (*(uint64_t (**)(char *, uint64_t))(v6 + 88))(v8, v5);
  if (v14 == *MEMORY[0x1E0CB1140])
  {
    v15.i64[0] = v13;
    v15.i64[1] = v12;
    v16 = (int64x2_t)xmmword_1BCAC0BD0;
    v17 = (int64x2_t)xmmword_1BCAC0B80;
    v18 = v21;
    goto LABEL_6;
  }
  v18 = v21;
  if (v14 == *MEMORY[0x1E0CB1198])
  {
    v15.i64[0] = v13;
    v15.i64[1] = v12;
    v16 = (int64x2_t)xmmword_1BCAC0B60;
    v17 = (int64x2_t)xmmword_1BCAC0B10;
LABEL_6:
    if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqq_s64(v18, v17), (int32x4_t)vceqq_s64(v15, v16))))) & 1) == 0)
    {
      v19 = v14 == *MEMORY[0x1E0CB1140];
      sub_1BC9D8A7C(a1);
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      return v19;
    }
    goto LABEL_10;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
LABEL_10:
  sub_1BC9DC7A0(a1, (uint64_t)v4);
  v22 = 0;
  v23 = 0xE000000000000000;
  sub_1BCAB64C8();
  sub_1BCAB5F70();
  sub_1BCAB657C();
LABEL_11:
  result = sub_1BCAB65C4();
  __break(1u);
  return result;
}

unint64_t sub_1BCA90A68()
{
  unint64_t result;

  result = qword_1EF47A388;
  if (!qword_1EF47A388)
  {
    result = MEMORY[0x1BCCFBE84](&protocol conformance descriptor for TimeBasedDistributionFlavor, &type metadata for TimeBasedDistributionFlavor);
    atomic_store(result, (unint64_t *)&qword_1EF47A388);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for TimeBasedDistributionFlavor(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1BCA90AF8 + 4 * byte_1BCAC8E85[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1BCA90B2C + 4 * byte_1BCAC8E80[v4]))();
}

uint64_t sub_1BCA90B2C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BCA90B34(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BCA90B3CLL);
  return result;
}

uint64_t sub_1BCA90B48(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BCA90B50);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1BCA90B54(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BCA90B5C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TimeBasedDistributionFlavor()
{
  return &type metadata for TimeBasedDistributionFlavor;
}

__C::CGRect __swiftcall CGRect.adjustedForZeroDimensionsIfNecessary()()
{
  double v0;
  double v1;
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  __C::CGRect result;

  v4 = v3;
  v5 = v2;
  v6 = v1;
  v7 = v0;
  if (v2 <= 2.22507386e-308 || v3 <= 2.22507386e-308)
  {
    swift_beginAccess();
    v9 = *(double *)&qword_1EF478CA8;
    v10 = unk_1EF478CB0;
    if (*(double *)&qword_1EF478CA8 < v5)
      v9 = v5;
    if (unk_1EF478CB0 < v4)
      v10 = v4;
    v7 = v7 - (v9 - v5) * 0.5;
    v6 = v6 - (v10 - v4) * 0.5;
    v5 = v9;
    v4 = v10;
  }
  v11 = v7;
  v12 = v6;
  v13 = v5;
  v14 = v4;
  result.size.height = v14;
  result.size.width = v13;
  result.origin.y = v12;
  result.origin.x = v11;
  return result;
}

UIColor __swiftcall DiagramConfiguration.Color.toColor()()
{
  UIColor result;

  __asm { BR              X10 }
  return result;
}

id sub_1BCA90C64()
{
  void *v0;
  id v1;
  id v2;
  uint64_t v3;
  id v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  uint64_t v10;
  uint64_t v11;
  id (*v12)(uint64_t, void *);
  void *v13;
  uint64_t (*v14)();
  uint64_t v15;

  v0 = (void *)objc_opt_self();
  v1 = objc_msgSend(v0, sel_systemGray3Color);
  v2 = objc_msgSend(v0, sel_systemGray4Color);
  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 16) = v1;
  *(_QWORD *)(v3 + 24) = v2;
  v4 = objc_allocWithZone(MEMORY[0x1E0DC3658]);
  v14 = sub_1BCA9C250;
  v15 = v3;
  v10 = MEMORY[0x1E0C809B0];
  v11 = 1107296256;
  v12 = sub_1BCA9EF10;
  v13 = &block_descriptor_28;
  v5 = _Block_copy(&v10);
  v6 = v1;
  v7 = v2;
  v8 = objc_msgSend(v4, sel_initWithDynamicProvider_, v5, v10, v11);
  _Block_release(v5);

  swift_release();
  return v8;
}

id sub_1BCA913B8()
{
  return objc_msgSend((id)objc_opt_self(), sel_systemLightGrayColor);
}

id sub_1BCA913D8()
{
  return objc_msgSend((id)objc_opt_self(), sel_systemDarkGrayColor);
}

void sub_1BCA913F8()
{
  objc_msgSend((id)objc_opt_self(), sel_systemDarkYellowColor);
  JUMPOUT(0x1BCA91414);
}

void DiagramConfiguration.LineWidth.toPoints()()
{
  __asm { BR              X10 }
}

void DiagramConfiguration.TextAttributes.toTextAttributes()()
{
  __asm { BR              X10 }
}

uint64_t sub_1BCA9158C()
{
  return sub_1BCA9D828(11.0);
}

double DiagramConfiguration.DistributionWidth.toFloat()()
{
  char *v0;

  return dbl_1BCACC098[*v0];
}

double DiagramConfiguration.DistributionPadding.toFloat()()
{
  char *v0;

  return dbl_1BCACC0C8[*v0];
}

UIEdgeInsets __swiftcall DiagramConfiguration.Insets.toInsets()()
{
  char *v0;
  uint64_t v1;
  double v2;
  double v3;
  double v4;
  double v5;
  UIEdgeInsets result;

  v1 = 8 * *v0;
  v2 = *(double *)((char *)&unk_1BCACC0E0 + v1);
  v3 = *(double *)((char *)&unk_1BCACC100 + v1);
  v4 = v2;
  v5 = v3;
  result.right = v5;
  result.bottom = v4;
  result.left = v3;
  result.top = v2;
  return result;
}

Swift::Float __swiftcall DiagramConfiguration.AxisTickLength.toPoints()()
{
  _BYTE *v0;
  Swift::Float result;

  result = 0.0;
  if (!*v0)
    return 7.0;
  return result;
}

Swift::String_optional __swiftcall DiagramConfiguration.ValueFormatter.format(value:)(NSNumber value)
{
  uint64_t v1;
  id v3;
  id v4;
  id v5;
  id v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  Swift::String_optional result;

  if (*(_BYTE *)(v1 + 8) == 1)
  {
    if (*(_QWORD *)v1)
    {
      v3 = objc_msgSend((id)objc_opt_self(), sel_hk_percentNumberFormatter);
      v4 = objc_msgSend(v3, sel_stringFromNumber_, value.super.super.isa);
    }
    else
    {
      v6 = (id)HKIntegerFormatter();
      if (!v6)
      {
        __break(1u);
        goto LABEL_14;
      }
      v3 = v6;
      v4 = objc_msgSend(v6, sel_stringFromNumber_, value.super.super.isa);
    }
  }
  else
  {
    v5 = (id)HKNumberFormatterWithDecimalPrecision();
    v3 = v5;
    if (!v5)
    {
LABEL_11:
      v10 = 0;
      goto LABEL_12;
    }
    v4 = objc_msgSend(v5, sel_stringFromNumber_, value.super.super.isa);
  }
  v8 = v4;

  if (!v8)
  {
    v3 = 0;
    goto LABEL_11;
  }
  v3 = (id)sub_1BCAB5F04();
  v10 = v9;

LABEL_12:
  v6 = v3;
  v7 = v10;
LABEL_14:
  result.value._object = v7;
  result.value._countAndFlagsBits = (uint64_t)v6;
  return result;
}

unint64_t sub_1BCA925B4(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  sub_1BC9A6514();
  v2 = sub_1BCAB660C();
  v3 = (_QWORD *)v2;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  v5 = v2 + 64;
  v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_1BCAA9100(v6, (uint64_t)&v13);
    v7 = v13;
    result = sub_1BC9A2CF0(v13);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(_QWORD *)(v3[6] + 8 * result) = v7;
    result = (unint64_t)sub_1BC9A61C8(&v14, (_OWORD *)(v3[7] + 32 * result));
    v10 = v3[2];
    v11 = __OFADD__(v10, 1);
    v12 = v10 + 1;
    if (v11)
      goto LABEL_11;
    v3[2] = v12;
    v6 += 40;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1BCA926C8(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  unint64_t result;
  char v9;
  _QWORD *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  sub_1BC9A6670();
  v2 = (_QWORD *)sub_1BCAB660C();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v5 = *(v4 - 1);
    v6 = *v4;
    v7 = (id)*(v4 - 2);
    swift_bridgeObjectRetain();
    result = sub_1BC9A2D70((uint64_t)v7);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_QWORD *)(v2[6] + 8 * result) = v7;
    v10 = (_QWORD *)(v2[7] + 16 * result);
    *v10 = v5;
    v10[1] = v6;
    v11 = v2[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v4 += 3;
    v2[2] = v13;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1BCA927D8(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  sub_1BCAA90A0();
  v2 = (_QWORD *)sub_1BCAB660C();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 56);
  while (1)
  {
    v5 = *(v4 - 3);
    v6 = *(v4 - 2);
    v8 = *(v4 - 1);
    v7 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = sub_1BC9A2DBC(v5, v6);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v11 = (uint64_t *)(v2[6] + 16 * result);
    *v11 = v5;
    v11[1] = v6;
    v12 = (_QWORD *)(v2[7] + 16 * result);
    *v12 = v8;
    v12[1] = v7;
    v13 = v2[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4 += 4;
    v2[2] = v15;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1BCA928F4(uint64_t a1)
{
  return sub_1BCA92B7C(a1, (void (*)(_QWORD))sub_1BC9A5EEC, (uint64_t (*)(id))sub_1BC9A2E50);
}

unint64_t sub_1BCA92908(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void **v4;
  void *v5;
  id v6;
  id v7;
  unint64_t result;
  char v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  sub_1BCAA9018();
  v2 = (_QWORD *)sub_1BCAB660C();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (void **)(a1 + 40);
  while (1)
  {
    v5 = *v4;
    v6 = *(v4 - 1);
    v7 = v5;
    result = sub_1BC9A2CF0((uint64_t)v6);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v10 = 8 * result;
    *(_QWORD *)(v2[6] + v10) = v6;
    *(_QWORD *)(v2[7] + v10) = v7;
    v11 = v2[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v2[2] = v13;
    v4 += 2;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1BCA92A0C(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t result;
  char v12;
  _QWORD *v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  sub_1BC9A6580(0, &qword_1ED6C6EC8, (void (*)(void))sub_1BC9BD3B4);
  v2 = (_QWORD *)sub_1BCAB660C();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (_QWORD *)(a1 + 72);
  while (1)
  {
    v5 = *((_BYTE *)v4 - 40);
    v6 = *(v4 - 4);
    v7 = *(v4 - 3);
    v9 = *(v4 - 2);
    v8 = *(v4 - 1);
    v10 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = sub_1BC9A2C2C(v5);
    if ((v12 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_BYTE *)(v2[6] + result) = v5;
    v13 = (_QWORD *)(v2[7] + 40 * result);
    *v13 = v6;
    v13[1] = v7;
    v13[2] = v9;
    v13[3] = v8;
    v13[4] = v10;
    v14 = v2[2];
    v15 = __OFADD__(v14, 1);
    v16 = v14 + 1;
    if (v15)
      goto LABEL_11;
    v4 += 6;
    v2[2] = v16;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1BCA92B68(uint64_t a1)
{
  return sub_1BCA92B7C(a1, (void (*)(_QWORD))sub_1BC9A63E4, (uint64_t (*)(id))sub_1BC9A2E9C);
}

unint64_t sub_1BCA92B7C(uint64_t a1, void (*a2)(_QWORD), uint64_t (*a3)(id))
{
  _QWORD *v5;
  uint64_t v6;
  void **v7;
  void *v8;
  id v9;
  id v10;
  unint64_t result;
  char v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  if (!*(_QWORD *)(a1 + 16))
  {
    v5 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  a2(0);
  v5 = (_QWORD *)sub_1BCAB660C();
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v5;
  }
  swift_retain();
  v7 = (void **)(a1 + 40);
  while (1)
  {
    v8 = *v7;
    v9 = *(v7 - 1);
    v10 = v8;
    result = a3(v9);
    if ((v12 & 1) != 0)
      break;
    *(_QWORD *)((char *)v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v13 = 8 * result;
    *(_QWORD *)(v5[6] + v13) = v9;
    *(_QWORD *)(v5[7] + v13) = v10;
    v14 = v5[2];
    v15 = __OFADD__(v14, 1);
    v16 = v14 + 1;
    if (v15)
      goto LABEL_11;
    v5[2] = v16;
    v7 += 2;
    if (!--v6)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

void sub_1BCA92C8C(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  _OWORD *v4;
  char v5;
  uint64_t v6;
  char v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  __int128 v14;

  if (*(_QWORD *)(a1 + 16)
    && (sub_1BC9A6580(0, &qword_1ED6C4DA0, (void (*)(void))sub_1BC9A65E0),
        v2 = (_QWORD *)sub_1BCAB660C(),
        (v3 = *(_QWORD *)(a1 + 16)) != 0))
  {
    swift_retain();
    v4 = (_OWORD *)(a1 + 56);
    while (1)
    {
      v5 = *((_BYTE *)v4 - 24);
      v6 = *((_QWORD *)v4 - 2);
      v7 = *((_BYTE *)v4 - 8);
      v14 = *v4;
      sub_1BC9A2B08(v5);
      if ((v9 & 1) != 0)
        break;
      *(_QWORD *)((char *)v2 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v8;
      *(_BYTE *)(v2[6] + v8) = v5;
      v10 = v2[7] + 32 * v8;
      *(_QWORD *)v10 = v6;
      *(_BYTE *)(v10 + 8) = v7;
      *(_OWORD *)(v10 + 16) = v14;
      v11 = v2[2];
      v12 = __OFADD__(v11, 1);
      v13 = v11 + 1;
      if (v12)
        goto LABEL_10;
      v2[2] = v13;
      v4 = (_OWORD *)((char *)v4 + 40);
      if (!--v3)
      {
        swift_release();
        goto LABEL_8;
      }
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
LABEL_8:
    swift_bridgeObjectRelease();
  }
}

void sub_1BCA92DCC(char a1)
{
  sub_1BCAB6870();
  __asm { BR              X10 }
}

uint64_t sub_1BCA92E24()
{
  sub_1BCAB5F40();
  swift_bridgeObjectRelease();
  return sub_1BCAB6894();
}

void sub_1BCA92EC8(char a1)
{
  sub_1BCAB6870();
  __asm { BR              X10 }
}

uint64_t sub_1BCA92F20()
{
  sub_1BCAB5F40();
  swift_bridgeObjectRelease();
  return sub_1BCAB6894();
}

uint64_t sub_1BCA92FBC()
{
  sub_1BCAB6870();
  sub_1BCAB5F40();
  swift_bridgeObjectRelease();
  return sub_1BCAB6894();
}

void sub_1BCA9306C(char a1)
{
  sub_1BCAB6870();
  __asm { BR              X10 }
}

uint64_t sub_1BCA930C8()
{
  sub_1BCAB5F40();
  swift_bridgeObjectRelease();
  return sub_1BCAB6894();
}

uint64_t sub_1BCA93170()
{
  sub_1BCAB6870();
  sub_1BCAB5F40();
  swift_bridgeObjectRelease();
  return sub_1BCAB6894();
}

void sub_1BCA93218(char a1)
{
  sub_1BCAB6870();
  __asm { BR              X10 }
}

uint64_t sub_1BCA93274()
{
  sub_1BCAB5F40();
  swift_bridgeObjectRelease();
  return sub_1BCAB6894();
}

uint64_t sub_1BCA93304()
{
  sub_1BCAB6870();
  sub_1BCAB5F40();
  swift_bridgeObjectRelease();
  return sub_1BCAB6894();
}

void sub_1BCA933B0(char a1)
{
  sub_1BCAB6870();
  __asm { BR              X10 }
}

uint64_t sub_1BCA93410()
{
  sub_1BCAB5F40();
  swift_bridgeObjectRelease();
  return sub_1BCAB6894();
}

void sub_1BCA9348C(char a1)
{
  sub_1BCAB6870();
  __asm { BR              X10 }
}

uint64_t sub_1BCA934E4()
{
  sub_1BCAB5F40();
  swift_bridgeObjectRelease();
  return sub_1BCAB6894();
}

void sub_1BCA935A8(uint64_t a1, char a2)
{
  __asm { BR              X11 }
}

uint64_t sub_1BCA935F4()
{
  sub_1BCAB5F40();
  return swift_bridgeObjectRelease();
}

void sub_1BCA93658(uint64_t a1, char a2)
{
  __asm { BR              X11 }
}

uint64_t sub_1BCA936A0()
{
  sub_1BCAB5F40();
  return swift_bridgeObjectRelease();
}

void sub_1BCA93718(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1BCA93764()
{
  sub_1BCAB5F40();
  return swift_bridgeObjectRelease();
}

void sub_1BCA937F8(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1BCA93844()
{
  sub_1BCAB5F40();
  return swift_bridgeObjectRelease();
}

void sub_1BCA93948(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1BCA9398C()
{
  sub_1BCAB5F40();
  return swift_bridgeObjectRelease();
}

void sub_1BCA93A0C(uint64_t a1, char a2)
{
  sub_1BCAB6870();
  __asm { BR              X10 }
}

uint64_t sub_1BCA93A60()
{
  sub_1BCAB5F40();
  swift_bridgeObjectRelease();
  return sub_1BCAB6894();
}

void sub_1BCA93B04(uint64_t a1, char a2)
{
  sub_1BCAB6870();
  __asm { BR              X10 }
}

uint64_t sub_1BCA93B58()
{
  sub_1BCAB5F40();
  swift_bridgeObjectRelease();
  return sub_1BCAB6894();
}

uint64_t sub_1BCA93BF4()
{
  sub_1BCAB6870();
  sub_1BCAB5F40();
  swift_bridgeObjectRelease();
  return sub_1BCAB6894();
}

void sub_1BCA93CA0(uint64_t a1, char a2)
{
  sub_1BCAB6870();
  __asm { BR              X10 }
}

uint64_t sub_1BCA93CF8()
{
  sub_1BCAB5F40();
  swift_bridgeObjectRelease();
  return sub_1BCAB6894();
}

uint64_t sub_1BCA93DA0()
{
  sub_1BCAB6870();
  sub_1BCAB5F40();
  swift_bridgeObjectRelease();
  return sub_1BCAB6894();
}

void sub_1BCA93E44(uint64_t a1, char a2)
{
  sub_1BCAB6870();
  __asm { BR              X10 }
}

uint64_t sub_1BCA93E9C()
{
  sub_1BCAB5F40();
  swift_bridgeObjectRelease();
  return sub_1BCAB6894();
}

uint64_t sub_1BCA93F2C()
{
  sub_1BCAB6870();
  sub_1BCAB5F40();
  swift_bridgeObjectRelease();
  return sub_1BCAB6894();
}

void sub_1BCA93FD4(uint64_t a1, char a2)
{
  sub_1BCAB6870();
  __asm { BR              X10 }
}

uint64_t sub_1BCA94030()
{
  sub_1BCAB5F40();
  swift_bridgeObjectRelease();
  return sub_1BCAB6894();
}

void sub_1BCA940AC(uint64_t a1, char a2)
{
  sub_1BCAB6870();
  __asm { BR              X10 }
}

uint64_t sub_1BCA94100()
{
  sub_1BCAB5F40();
  swift_bridgeObjectRelease();
  return sub_1BCAB6894();
}

uint64_t DiagramConfiguration.LineProperties.init(lineWidth:lineColor:lineHighlightColor:linePointRadius:lineCornerRadius:referenceAnnotationPosition:referenceLineColor:referenceLineWidth:referenceLineTextAttributes:dataGroupForPointLabels:pointLabels:)@<X0>(char *a1@<X0>, char *a2@<X1>, char *a3@<X2>, char *a4@<X3>, char *a5@<X4>, char *a6@<X5>, unsigned __int8 *a7@<X6>, char *a8@<X7>, uint64_t a9@<X8>, char *a10, char *a11, uint64_t *a12)
{
  char v12;
  char v13;
  char v14;
  char v15;
  char v16;
  char v17;
  uint64_t result;
  char v19;
  char v20;
  char v21;
  uint64_t v22;
  __int16 v23;
  char v24;

  v12 = *a1;
  v13 = *a2;
  v14 = *a3;
  v15 = *a4;
  v16 = *a5;
  v17 = *a6;
  result = *a7;
  v19 = *a8;
  v20 = *a10;
  v21 = *a11;
  v22 = *a12;
  v23 = *((_WORD *)a12 + 4);
  v24 = *((_BYTE *)a12 + 10);
  *(_BYTE *)a9 = v12;
  *(_BYTE *)(a9 + 1) = v13;
  *(_BYTE *)(a9 + 2) = v14;
  *(_BYTE *)(a9 + 3) = v15;
  *(_BYTE *)(a9 + 4) = v16;
  *(_BYTE *)(a9 + 5) = v17;
  *(_BYTE *)(a9 + 6) = result;
  *(_BYTE *)(a9 + 7) = v19;
  *(_BYTE *)(a9 + 8) = v20;
  *(_BYTE *)(a9 + 9) = v21;
  *(_QWORD *)(a9 + 16) = v22;
  *(_BYTE *)(a9 + 26) = v24;
  *(_WORD *)(a9 + 24) = v23;
  return result;
}

HealthVisualization::DiagramConfiguration::AxisProperties __swiftcall DiagramConfiguration.AxisProperties.init(axisType:labelTextAttributes:labelColor:gridLineColor:gridLineWidth:majorTickLength:minorTickLength:)(HealthVisualization::DiagramConfiguration::AxisType axisType, HealthVisualization::DiagramConfiguration::TextAttributes labelTextAttributes, HealthVisualization::DiagramConfiguration::Color labelColor, HealthVisualization::DiagramConfiguration::Color gridLineColor, HealthVisualization::DiagramConfiguration::AxisLineWidth gridLineWidth, HealthVisualization::DiagramConfiguration::AxisTickLength majorTickLength, HealthVisualization::DiagramConfiguration::AxisTickLength minorTickLength)
{
  _BYTE *v7;
  char v8;
  char v9;
  char v10;
  char v11;
  char v12;
  char v13;
  HealthVisualization::DiagramConfiguration::AxisProperties result;

  v8 = *(_BYTE *)labelTextAttributes;
  v9 = *(_BYTE *)labelColor;
  v10 = *(_BYTE *)gridLineColor;
  v11 = *(_BYTE *)gridLineWidth;
  v12 = *(_BYTE *)majorTickLength;
  v13 = *(_BYTE *)minorTickLength;
  *v7 = *(_BYTE *)axisType;
  v7[1] = v8;
  v7[2] = v9;
  v7[3] = v10;
  v7[4] = v11;
  v7[5] = v12;
  v7[6] = v13;
  result.axisType = axisType;
  return result;
}

HealthVisualization::DiagramConfiguration::Axis __swiftcall DiagramConfiguration.Axis.init(horizontal:vertical:)(HealthVisualization::DiagramConfiguration::AxisProperties_optional horizontal, HealthVisualization::DiagramConfiguration::AxisProperties_optional vertical)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  __int16 v5;
  __int16 v6;
  int v7;
  uint64_t v8;
  __int16 v9;
  HealthVisualization::DiagramConfiguration::Axis result;

  v3 = **(_DWORD **)&horizontal.value.axisType;
  v6 = *(_WORD *)(*(_QWORD *)&horizontal.value.axisType + 4);
  v4 = *(_QWORD *)&horizontal.value.axisType + 4;
  v5 = v6;
  v7 = **(_DWORD **)&vertical.value.axisType;
  v9 = *(_WORD *)(*(_QWORD *)&vertical.value.axisType + 4);
  v8 = *(_QWORD *)&vertical.value.axisType + 4;
  *(_WORD *)(v2 + 4) = v5;
  *(_DWORD *)v2 = v3;
  *(_BYTE *)(v2 + 6) = *(_BYTE *)(v4 + 2);
  *(_WORD *)(v2 + 11) = v9;
  *(_DWORD *)(v2 + 7) = v7;
  *(_BYTE *)(v2 + 13) = *(_BYTE *)(v8 + 2);
  *(_DWORD *)&result.vertical.value.labelTextAttributes = v8;
  *(_WORD *)&result.vertical.value.majorTickLength = WORD2(v8);
  result.horizontal = (HealthVisualization::DiagramConfiguration::AxisProperties_optional)v4;
  result.vertical.value.axisType = HIBYTE(v4);
  return result;
}

HealthVisualization::DiagramConfiguration::PointLabelAllPointsAttributes __swiftcall DiagramConfiguration.PointLabelAllPointsAttributes.init(valueAttributes:)(HealthVisualization::DiagramConfiguration::PointLabelAllPointsAttributes valueAttributes)
{
  _BYTE *v1;

  *v1 = *(_BYTE *)valueAttributes.valueAttributes;
  return valueAttributes;
}

HealthVisualization::DiagramConfiguration::PointLabelAllPointsConfiguration __swiftcall DiagramConfiguration.PointLabelAllPointsConfiguration.init(maxPointsAttributes:minPointsAttributes:)(HealthVisualization::DiagramConfiguration::PointLabelAllPointsAttributes_optional maxPointsAttributes, HealthVisualization::DiagramConfiguration::PointLabelAllPointsAttributes_optional minPointsAttributes)
{
  _BYTE *v2;
  char v3;
  HealthVisualization::DiagramConfiguration::PointLabelAllPointsConfiguration result;

  v3 = *(_BYTE *)minPointsAttributes.value.valueAttributes;
  *v2 = *(_BYTE *)maxPointsAttributes.value.valueAttributes;
  v2[1] = v3;
  result.maxPointsAttributes = maxPointsAttributes;
  return result;
}

Swift::Float __swiftcall DiagramConfiguration.AxisLineWidth.toPoints()()
{
  _BYTE *v0;
  Swift::Float result;

  result = 2.0;
  if (*v0)
    return 1.0;
  return result;
}

void DiagramConfiguration.LineRadius.toFloat()()
{
  __asm { BR              X10 }
}

void sub_1BCA94314()
{
  ((double (*)(void))DiagramConfiguration.LineRadius.toFloat())();
}

Swift::Float __swiftcall DiagramConfiguration.BarWidth.toPoints()()
{
  char *v0;

  return flt_1BCACC170[*v0];
}

CGSize __swiftcall DiagramConfiguration.CornerSize.toSize()()
{
  char *v0;
  double v1;
  double v2;
  CGSize result;

  v1 = dbl_1BCACC120[*v0];
  v2 = v1;
  result.height = v2;
  result.width = v1;
  return result;
}

Swift::Float __swiftcall DiagramConfiguration.AxisInset.toFloat()()
{
  char *v0;

  return flt_1BCACC138[*v0];
}

BOOL static DiagramConfiguration.PointLabelConfigurationKeys.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t DiagramConfiguration.PointLabelConfigurationKeys.hash(into:)()
{
  return sub_1BCAB687C();
}

HealthVisualization::DiagramConfiguration::PointLabelConfigurationKeys_optional __swiftcall DiagramConfiguration.PointLabelConfigurationKeys.init(stringValue:)(Swift::String stringValue)
{
  char *v1;
  char *v2;
  BOOL v3;
  void *object;
  uint64_t countAndFlagsBits;
  HealthVisualization::DiagramConfiguration::PointLabelConfigurationKeys_optional result;
  char v7;
  char v8;

  v2 = v1;
  v3 = stringValue._countAndFlagsBits == 0x78614D6E696DLL && stringValue._object == (void *)0xE600000000000000;
  if (v3
    || (object = stringValue._object, countAndFlagsBits = stringValue._countAndFlagsBits, (sub_1BCAB67C8() & 1) != 0))
  {
    result.value = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else if (countAndFlagsBits == 0x746E696F506C6C61 && object == (void *)0xE900000000000073)
  {
    result.value = swift_bridgeObjectRelease();
    v7 = 1;
  }
  else
  {
    v8 = sub_1BCAB67C8();
    result.value = swift_bridgeObjectRelease();
    if ((v8 & 1) != 0)
      v7 = 1;
    else
      v7 = 2;
  }
  *v2 = v7;
  return result;
}

HealthVisualization::DiagramConfiguration::PointLabelConfigurationKeys_optional __swiftcall DiagramConfiguration.PointLabelConfigurationKeys.init(intValue:)(Swift::Int intValue)
{
  _BYTE *v1;

  *v1 = 2;
  return (HealthVisualization::DiagramConfiguration::PointLabelConfigurationKeys_optional)intValue;
}

uint64_t DiagramConfiguration.PointLabelConfigurationKeys.hashValue.getter()
{
  sub_1BCAB6870();
  sub_1BCAB687C();
  return sub_1BCAB6894();
}

uint64_t DiagramConfiguration.PointLabelConfigurationKeys.intValue.getter()
{
  return 0;
}

uint64_t DiagramConfiguration.PointLabelConfigurationKeys.stringValue.getter()
{
  _BYTE *v0;

  if (*v0)
    return 0x746E696F506C6C61;
  else
    return 0x78614D6E696DLL;
}

uint64_t sub_1BCA945C4()
{
  _BYTE *v0;

  if (*v0)
    return 0x746E696F506C6C61;
  else
    return 0x78614D6E696DLL;
}

uint64_t sub_1BCA94604()
{
  sub_1BCAA1EE4();
  return sub_1BCAB68D0();
}

uint64_t sub_1BCA9462C()
{
  sub_1BCAA1EE4();
  return sub_1BCAB68DC();
}

uint64_t DiagramConfiguration.PointLabelConfiguration.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  int v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int16 v13;
  char v14;
  char v15;
  char v16;
  __int16 v17;

  sub_1BC9ACE04(0, &qword_1ED6C2E78, (uint64_t (*)(void))sub_1BCAA1EE4, (uint64_t)&type metadata for DiagramConfiguration.PointLabelConfigurationKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v4 = v3;
  v11 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v10 - v5;
  v7 = *v1;
  v8 = *((unsigned __int16 *)v1 + 4) | (*((char *)v1 + 10) << 16);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BCAA1EE4();
  sub_1BCAB68B8();
  if (v8 < 0)
  {
    v17 = v7;
    v16 = 1;
    sub_1BCAA1F28();
  }
  else
  {
    v12 = v7;
    v13 = v8;
    v14 = BYTE2(v8) & 1;
    v15 = 0;
    sub_1BCAA1F6C();
  }
  sub_1BCAB6774();
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v6, v4);
}

uint64_t DiagramConfiguration.PointLabelConfiguration.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int16 v21;
  char v22;
  char v23;
  char v24;
  unsigned __int16 v25;

  v19 = a2;
  sub_1BC9ACE04(0, &qword_1ED6C6920, (uint64_t (*)(void))sub_1BCAA1EE4, (uint64_t)&type metadata for DiagramConfiguration.PointLabelConfigurationKeys, MEMORY[0x1E0DED048]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v18 - v7;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BCAA1EE4();
  sub_1BCAB68AC();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v9 = v6;
  v10 = v19;
  v11 = sub_1BCAB66F0();
  v12 = *(_QWORD *)(v11 + 16);
  if (v12)
  {
    v13 = *(_BYTE *)(v12 + v11 + 31);
    swift_bridgeObjectRelease();
    if ((v13 & 1) != 0)
    {
      v24 = 1;
      sub_1BCAA1FB0();
      sub_1BCAB66E4();
      (*(void (**)(char *, uint64_t))(v9 + 8))(v8, v5);
      v14 = v25;
      v15 = 0x800000;
    }
    else
    {
      v23 = 0;
      sub_1BCAA1FF4();
      sub_1BCAB66E4();
      (*(void (**)(char *, uint64_t))(v9 + 8))(v8, v5);
      v14 = v20;
      if (v22)
        v16 = 0x10000;
      else
        v16 = 0;
      v15 = v21 | v16;
    }
    *(_QWORD *)v10 = v14;
    *(_WORD *)(v10 + 8) = v15;
    *(_BYTE *)(v10 + 10) = BYTE2(v15);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  result = swift_bridgeObjectRelease();
  __break(1u);
  return result;
}

uint64_t sub_1BCA949DC(_QWORD *a1)
{
  return DiagramConfiguration.PointLabelConfiguration.encode(to:)(a1);
}

uint64_t sub_1BCA949F0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return DiagramConfiguration.PointLabelConfiguration.init(from:)(a1, a2);
}

uint64_t DiagramConfiguration.PointLabelMinMaxSet.rawValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

HealthVisualization::DiagramConfiguration::PointLabelMinMaxSet __swiftcall DiagramConfiguration.PointLabelMinMaxSet.init(rawValue:)(HealthVisualization::DiagramConfiguration::PointLabelMinMaxSet rawValue)
{
  HealthVisualization::DiagramConfiguration::PointLabelMinMaxSet *v1;

  v1->rawValue = rawValue.rawValue;
  return rawValue;
}

void static DiagramConfiguration.PointLabelMinMaxSet.labelMin.getter(_QWORD *a1@<X8>)
{
  *a1 = 1;
}

void static DiagramConfiguration.PointLabelMinMaxSet.labelMax.getter(_QWORD *a1@<X8>)
{
  *a1 = 2;
}

void sub_1BCA94A30()
{
  qword_1ED6C7380 = 3;
}

uint64_t static DiagramConfiguration.PointLabelMinMaxSet.labelAll.getter@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;

  if (qword_1ED6C7550 != -1)
    result = swift_once();
  *a1 = qword_1ED6C7380;
  return result;
}

uint64_t sub_1BCA94AA4()
{
  sub_1BCAA361C();
  return sub_1BCAB5FF4();
}

uint64_t sub_1BCA94B00()
{
  sub_1BCAA361C();
  return sub_1BCAB5FDC();
}

void DiagramConfiguration.PointLabelMinMaxConfiguration.labelOptions.getter(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

void DiagramConfiguration.PointLabelMinMaxConfiguration.labelAttributes.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 8);
}

void DiagramConfiguration.PointLabelMinMaxConfiguration.valueAttributes.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 9);
}

uint64_t DiagramConfiguration.PointLabelMinMaxConfiguration.avoidOverlappingLabelWithDataGroups.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 10);
}

HealthVisualization::DiagramConfiguration::PointLabelMinMaxConfiguration __swiftcall DiagramConfiguration.PointLabelMinMaxConfiguration.init(labelAttributes:valueAttributes:labelOptions:avoidOverlappingLabelWithDataGroups:)(HealthVisualization::DiagramConfiguration::TextAttributes labelAttributes, HealthVisualization::DiagramConfiguration::TextAttributes valueAttributes, HealthVisualization::DiagramConfiguration::PointLabelMinMaxSet labelOptions, Swift::Bool avoidOverlappingLabelWithDataGroups)
{
  uint64_t v4;
  char v5;
  char v6;
  HealthVisualization::DiagramConfiguration::PointLabelMinMaxConfiguration result;

  v5 = *(_BYTE *)labelAttributes;
  v6 = *(_BYTE *)valueAttributes;
  *(_QWORD *)v4 = *(_QWORD *)labelOptions.rawValue;
  *(_BYTE *)(v4 + 8) = v5;
  *(_BYTE *)(v4 + 9) = v6;
  *(_BYTE *)(v4 + 10) = avoidOverlappingLabelWithDataGroups;
  result.labelAttributes = valueAttributes;
  LOBYTE(result.labelOptions.rawValue) = labelAttributes;
  return result;
}

uint64_t sub_1BCA94B9C()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1BCA94BD4 + 4 * byte_1BCAC8F8B[*v0]))(0x74704F6C6562616CLL, 0xEC000000736E6F69);
}

uint64_t sub_1BCA94BD4()
{
  return 0x7474416C6562616CLL;
}

unint64_t sub_1BCA94C08()
{
  return 0xD000000000000023;
}

uint64_t sub_1BCA94C24@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1BCAA67B4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1BCA94C48()
{
  sub_1BCAA2038();
  return sub_1BCAB68D0();
}

uint64_t sub_1BCA94C70()
{
  sub_1BCAA2038();
  return sub_1BCAB68DC();
}

uint64_t DiagramConfiguration.PointLabelMinMaxConfiguration.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  char v11;
  _DWORD v13[2];
  int v14;
  int v15;
  uint64_t v16;
  char v17;
  char v18;
  char v19;
  char v20;
  char v21;
  char v22;
  uint64_t v23;

  sub_1BC9ACE04(0, &qword_1ED6C2E80, (uint64_t (*)(void))sub_1BCAA2038, (uint64_t)&type metadata for DiagramConfiguration.PointLabelMinMaxConfiguration.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v7 = (char *)v13 - v6;
  v8 = *v1;
  v9 = *((unsigned __int8 *)v1 + 8);
  v14 = *((unsigned __int8 *)v1 + 9);
  v15 = v9;
  v13[1] = *((unsigned __int8 *)v1 + 10);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BCAA2038();
  sub_1BCAB68B8();
  v23 = v8;
  v22 = 0;
  sub_1BCAA207C();
  v10 = v16;
  sub_1BCAB6774();
  if (!v10)
  {
    v11 = v14;
    v21 = v15;
    v20 = 1;
    sub_1BCAA20C0();
    sub_1BCAB6774();
    v19 = v11;
    v18 = 2;
    sub_1BCAB6774();
    v17 = 3;
    sub_1BCAB6750();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t DiagramConfiguration.PointLabelMinMaxConfiguration.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  char v20;
  char v21;
  unsigned __int8 v22;
  char v23;
  uint64_t v24;

  sub_1BC9ACE04(0, &qword_1ED6C6928, (uint64_t (*)(void))sub_1BCAA2038, (uint64_t)&type metadata for DiagramConfiguration.PointLabelMinMaxConfiguration.CodingKeys, MEMORY[0x1E0DED048]);
  v17 = v5;
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v15 - v7;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BCAA2038();
  sub_1BCAB68AC();
  if (!v2)
  {
    v9 = v6;
    v23 = 0;
    sub_1BCAA2104();
    v10 = v17;
    sub_1BCAB66E4();
    v11 = v24;
    v21 = 1;
    sub_1BCAA2148();
    sub_1BCAB66E4();
    v16 = v11;
    LODWORD(v11) = v22;
    v19 = 2;
    sub_1BCAB66E4();
    HIDWORD(v15) = v11;
    v12 = v20;
    v18 = 3;
    v14 = sub_1BCAB66C0();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v8, v10);
    *(_QWORD *)a2 = v16;
    *(_BYTE *)(a2 + 8) = BYTE4(v15);
    *(_BYTE *)(a2 + 9) = v12;
    *(_BYTE *)(a2 + 10) = v14 & 1;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_1BCA9509C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return DiagramConfiguration.PointLabelMinMaxConfiguration.init(from:)(a1, a2);
}

uint64_t sub_1BCA950B0(_QWORD *a1)
{
  return DiagramConfiguration.PointLabelMinMaxConfiguration.encode(to:)(a1);
}

void DiagramConfiguration.PointLabelAllPointsConfiguration.maxPointsAttributes.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

void DiagramConfiguration.PointLabelAllPointsConfiguration.minPointsAttributes.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 1);
}

unint64_t sub_1BCA950E0()
{
  return 0xD000000000000013;
}

uint64_t sub_1BCA95110@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1BCAA69C0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1BCA95134()
{
  sub_1BCAA218C();
  return sub_1BCAB68D0();
}

uint64_t sub_1BCA9515C()
{
  sub_1BCAA218C();
  return sub_1BCAB68DC();
}

uint64_t DiagramConfiguration.PointLabelAllPointsConfiguration.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char v8;
  uint64_t v9;
  _QWORD v11[2];
  int v12;
  char v13;
  char v14;
  char v15;
  char v16;

  sub_1BC9ACE04(0, &qword_1EF47A3A0, (uint64_t (*)(void))sub_1BCAA218C, (uint64_t)&type metadata for DiagramConfiguration.PointLabelAllPointsConfiguration.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v7 = (char *)v11 - v6;
  v8 = *v1;
  v12 = v1[1];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BCAA218C();
  sub_1BCAB68B8();
  v16 = v8;
  v15 = 0;
  sub_1BCAA21D0();
  v9 = v11[1];
  sub_1BCAB6738();
  if (!v9)
  {
    v14 = v12;
    v13 = 1;
    sub_1BCAB6738();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t DiagramConfiguration.PointLabelAllPointsConfiguration.init(from:)@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _BYTE *v9;
  char v10;
  char v12;
  uint64_t v13;
  _BYTE *v14;
  char v15;
  char v16;
  char v17;
  char v18;

  v14 = a2;
  sub_1BC9ACE04(0, &qword_1EF47A3B8, (uint64_t (*)(void))sub_1BCAA218C, (uint64_t)&type metadata for DiagramConfiguration.PointLabelAllPointsConfiguration.CodingKeys, MEMORY[0x1E0DED048]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v13 - v7;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BCAA218C();
  sub_1BCAB68AC();
  if (!v2)
  {
    v9 = v14;
    v17 = 0;
    sub_1BCAA2214();
    sub_1BCAB66A8();
    v10 = v18;
    v15 = 1;
    sub_1BCAB66A8();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v12 = v16;
    *v9 = v10;
    v9[1] = v12;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_1BCA9548C@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return DiagramConfiguration.PointLabelAllPointsConfiguration.init(from:)(a1, a2);
}

uint64_t sub_1BCA954A0(_QWORD *a1)
{
  return DiagramConfiguration.PointLabelAllPointsConfiguration.encode(to:)(a1);
}

void DiagramConfiguration.PointLabelAllPointsAttributes.valueAttributes.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

uint64_t static DiagramConfiguration.PointLabelAllPointsAttributes.== infix(_:_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;

  v0 = DiagramConfiguration.TextAttributes.rawValue.getter();
  v2 = v1;
  if (v0 == DiagramConfiguration.TextAttributes.rawValue.getter() && v2 == v3)
    v5 = 1;
  else
    v5 = sub_1BCAB67C8();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

uint64_t sub_1BCA95560()
{
  return 0x74744165756C6176;
}

uint64_t sub_1BCA95584@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x74744165756C6176 && a2 == 0xEF73657475626972)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_1BCAB67C8();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_1BCA9563C()
{
  sub_1BCAA2258();
  return sub_1BCAB68D0();
}

uint64_t sub_1BCA95664()
{
  sub_1BCAA2258();
  return sub_1BCAB68DC();
}

uint64_t DiagramConfiguration.PointLabelAllPointsAttributes.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  char v8;
  _BYTE v10[32];

  sub_1BC9ACE04(0, &qword_1EF47A3C8, (uint64_t (*)(void))sub_1BCAA2258, (uint64_t)&type metadata for DiagramConfiguration.PointLabelAllPointsAttributes.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v7 = &v10[-v6];
  v8 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BCAA2258();
  sub_1BCAB68B8();
  v10[31] = v8;
  sub_1BCAA20C0();
  sub_1BCAB6774();
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t DiagramConfiguration.PointLabelAllPointsAttributes.init(from:)@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _BYTE *v9;
  uint64_t v11;
  _BYTE *v12;
  char v13;

  v12 = a2;
  sub_1BC9ACE04(0, &qword_1EF47A3D8, (uint64_t (*)(void))sub_1BCAA2258, (uint64_t)&type metadata for DiagramConfiguration.PointLabelAllPointsAttributes.CodingKeys, MEMORY[0x1E0DED048]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v11 - v7;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BCAA2258();
  sub_1BCAB68AC();
  if (!v2)
  {
    v9 = v12;
    sub_1BCAA2148();
    sub_1BCAB66E4();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *v9 = v13;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_1BCA958F8@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return DiagramConfiguration.PointLabelAllPointsAttributes.init(from:)(a1, a2);
}

uint64_t sub_1BCA9590C(_QWORD *a1)
{
  return DiagramConfiguration.PointLabelAllPointsAttributes.encode(to:)(a1);
}

void DiagramConfiguration.Bar.width.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

void DiagramConfiguration.Bar.topColor.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 1);
}

void DiagramConfiguration.Bar.bottomColor.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 2);
}

void DiagramConfiguration.Bar.cornerSize.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 3);
}

void DiagramConfiguration.Bar.highlightColor.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 4);
}

void DiagramConfiguration.Bar.axisLineColor.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 5);
}

void DiagramConfiguration.Bar.referenceLineColor.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 6);
}

void DiagramConfiguration.Bar.referenceLineTextAttributes.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 7);
}

void DiagramConfiguration.Bar.referenceAnnotationPosition.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 8);
}

void DiagramConfiguration.Bar.axisText.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 9);
}

double DiagramConfiguration.Bar.baseValue.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 16);
}

void DiagramConfiguration.Bar.axis.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  int v2;
  __int16 v3;

  v2 = *(_DWORD *)(v1 + 32);
  v3 = *(_WORD *)(v1 + 36);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 24);
  *(_WORD *)(a1 + 12) = v3;
  *(_DWORD *)(a1 + 8) = v2;
}

void DiagramConfiguration.Bar.outerInsets.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 38);
}

void __swiftcall DiagramConfiguration.Bar.init(width:topColor:bottomColor:cornerSize:highlightColor:axisLineColor:referenceLineColor:referenceLineTextAttributes:referenceAnnotationPosition:axisText:baseValue:axis:outerInsets:)(HealthVisualization::DiagramConfiguration::Bar *__return_ptr retstr, HealthVisualization::DiagramConfiguration::BarWidth width, HealthVisualization::DiagramConfiguration::Color topColor, HealthVisualization::DiagramConfiguration::Color bottomColor, HealthVisualization::DiagramConfiguration::CornerSize cornerSize, HealthVisualization::DiagramConfiguration::Color highlightColor, HealthVisualization::DiagramConfiguration::Color axisLineColor, HealthVisualization::DiagramConfiguration::Color referenceLineColor, HealthVisualization::DiagramConfiguration::TextAttributes referenceLineTextAttributes, HealthVisualization::DiagramConfiguration::ReferenceAnnotationPosition referenceAnnotationPosition, HealthVisualization::DiagramConfiguration::TextAttributes axisText, Swift::Double baseValue, HealthVisualization::DiagramConfiguration::Axis_optional axis, HealthVisualization::DiagramConfiguration::Insets outerInsets)
{
  HealthVisualization::DiagramConfiguration::BarWidth v14;
  HealthVisualization::DiagramConfiguration::Color v15;
  HealthVisualization::DiagramConfiguration::Color v16;
  HealthVisualization::DiagramConfiguration::CornerSize v17;
  HealthVisualization::DiagramConfiguration::Color v18;
  HealthVisualization::DiagramConfiguration::Color v19;
  HealthVisualization::DiagramConfiguration::Color v20;
  HealthVisualization::DiagramConfiguration::TextAttributes v21;
  HealthVisualization::DiagramConfiguration::ReferenceAnnotationPosition v22;
  HealthVisualization::DiagramConfiguration::TextAttributes v23;
  uint64_t v24;
  int v25;
  __int16 v26;
  HealthVisualization::DiagramConfiguration::Insets v27;

  v14 = *(_BYTE *)width;
  v15 = *(_BYTE *)topColor;
  v16 = *(_BYTE *)bottomColor;
  v17 = *(_BYTE *)cornerSize;
  v18 = *(_BYTE *)highlightColor;
  v19 = *(_BYTE *)axisLineColor;
  v20 = *(_BYTE *)referenceLineColor;
  v21 = *(_BYTE *)referenceLineTextAttributes;
  v22 = *(_BYTE *)referenceAnnotationPosition;
  v23 = **(_BYTE **)&axis.value.horizontal.value.axisType;
  v24 = **(_QWORD **)&axis.value.vertical.value.labelTextAttributes;
  v25 = *(_DWORD *)(*(_QWORD *)&axis.value.vertical.value.labelTextAttributes + 8);
  v26 = *(_WORD *)(*(_QWORD *)&axis.value.vertical.value.labelTextAttributes + 12);
  v27 = *(_BYTE *)outerInsets;
  retstr->width = v14;
  retstr->topColor = v15;
  retstr->bottomColor = v16;
  retstr->cornerSize = v17;
  retstr->highlightColor.value = v18;
  retstr->axisLineColor = v19;
  retstr->referenceLineColor = v20;
  retstr->referenceLineTextAttributes = v21;
  retstr->referenceAnnotationPosition = v22;
  retstr->axisText = v23;
  retstr->baseValue = baseValue;
  *(_QWORD *)&retstr->axis.value.horizontal.value.axisType = v24;
  *(_WORD *)&retstr->axis.value.vertical.value.majorTickLength = v26;
  *(_DWORD *)&retstr->axis.value.vertical.value.labelTextAttributes = v25;
  retstr->outerInsets = v27;
}

uint64_t sub_1BCA95A48(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1BCA95A78 + 4 * byte_1BCAC8F8F[a1]))(0x6874646977, 0xE500000000000000);
}

uint64_t sub_1BCA95A78()
{
  return 0x726F6C6F43706F74;
}

uint64_t sub_1BCA95A90()
{
  return 0x6F436D6F74746F62;
}

uint64_t sub_1BCA95AB0()
{
  return 0x695372656E726F63;
}

uint64_t sub_1BCA95ACC()
{
  return 0x6867696C68676968;
}

uint64_t sub_1BCA95AF0()
{
  return 0x656E694C73697861;
}

unint64_t sub_1BCA95B14()
{
  return 0xD000000000000012;
}

unint64_t sub_1BCA95B34()
{
  return 0xD00000000000001BLL;
}

uint64_t sub_1BCA95B5C()
{
  return 0x7478655473697861;
}

uint64_t sub_1BCA95B74()
{
  return 0x756C615665736162;
}

uint64_t sub_1BCA95B90()
{
  return 1936291937;
}

uint64_t sub_1BCA95BA0()
{
  return 0x736E49726574756FLL;
}

uint64_t sub_1BCA95BC0()
{
  unsigned __int8 *v0;

  return sub_1BCA95A48(*v0);
}

uint64_t sub_1BCA95BC8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1BCAA6AA8(a1, a2);
  *a3 = result;
  return result;
}

void sub_1BCA95BEC(_BYTE *a1@<X8>)
{
  *a1 = 13;
}

uint64_t sub_1BCA95BF8()
{
  sub_1BCAA229C();
  return sub_1BCAB68D0();
}

uint64_t sub_1BCA95C20()
{
  sub_1BCAA229C();
  return sub_1BCAB68DC();
}

uint64_t DiagramConfiguration.Bar.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char v8;
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  char v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  __int16 v35;
  char v36;

  sub_1BC9ACE04(0, &qword_1ED6C5F50, (uint64_t (*)(void))sub_1BCAA229C, (uint64_t)&type metadata for DiagramConfiguration.Bar.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v7 = (char *)&v19 - v6;
  v8 = *v1;
  v9 = v1[1];
  v30 = v1[2];
  v31 = v9;
  v10 = v1[3];
  v28 = v1[4];
  v29 = v10;
  v11 = v1[5];
  v26 = v1[6];
  v27 = v11;
  v12 = v1[7];
  v24 = v1[8];
  v25 = v12;
  v23 = v1[9];
  v13 = *((_QWORD *)v1 + 3);
  v21 = *((unsigned __int16 *)v1 + 18);
  v22 = v13;
  v20 = *((unsigned int *)v1 + 8);
  HIDWORD(v19) = v1[38];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BCAA229C();
  sub_1BCAB68B8();
  LOBYTE(v33) = v8;
  v36 = 0;
  sub_1BCAA22E0();
  v14 = v32;
  sub_1BCAB6774();
  if (!v14)
  {
    v16 = v29;
    v15 = v30;
    v17 = v28;
    LOBYTE(v33) = v31;
    v36 = 1;
    sub_1BCAA2324();
    sub_1BCAB6774();
    LOBYTE(v33) = v15;
    v36 = 2;
    sub_1BCAB6774();
    v32 = v5;
    LOBYTE(v33) = v16;
    v36 = 3;
    sub_1BCAA2368();
    sub_1BCAB6774();
    LOBYTE(v33) = v17;
    v36 = 4;
    sub_1BCAB6738();
    LOBYTE(v33) = v27;
    v36 = 5;
    sub_1BCAB6774();
    LOBYTE(v33) = v26;
    v36 = 6;
    sub_1BCAB6774();
    LOBYTE(v33) = v25;
    v36 = 7;
    sub_1BCAA20C0();
    sub_1BCAB6774();
    LOBYTE(v33) = v24;
    v36 = 8;
    sub_1BCAA23AC();
    sub_1BCAB6774();
    LOBYTE(v33) = v23;
    v36 = 9;
    sub_1BCAB6774();
    LOBYTE(v33) = 10;
    sub_1BCAB675C();
    v33 = v22;
    v34 = v20;
    v35 = (v20 | (unint64_t)(v21 << 32)) >> 32;
    v36 = 11;
    sub_1BCAA23F0();
    sub_1BCAB6738();
    LOBYTE(v33) = BYTE4(v19);
    v36 = 12;
    sub_1BCAA2434();
    sub_1BCAB6774();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t DiagramConfiguration.Bar.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  unsigned __int16 v37;
  char v38;

  sub_1BC9ACE04(0, &qword_1ED6C6938, (uint64_t (*)(void))sub_1BCAA229C, (uint64_t)&type metadata for DiagramConfiguration.Bar.CodingKeys, MEMORY[0x1E0DED048]);
  v34 = v5;
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v23 - v7;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BCAA229C();
  sub_1BCAB68AC();
  if (!v2)
  {
    v9 = v6;
    v38 = 0;
    sub_1BCAA2478();
    sub_1BCAB66E4();
    v10 = v35;
    v38 = 1;
    sub_1BCAA24BC();
    sub_1BCAB66E4();
    v33 = v10;
    v11 = v35;
    v38 = 2;
    sub_1BCAB66E4();
    v32 = v11;
    v12 = v35;
    v38 = 3;
    sub_1BCAA2500();
    sub_1BCAB66E4();
    v31 = v12;
    v13 = v35;
    v38 = 4;
    sub_1BCAB66A8();
    v30 = v13;
    v14 = v35;
    v38 = 5;
    sub_1BCAB66E4();
    v29 = v14;
    v15 = v35;
    v38 = 6;
    sub_1BCAB66E4();
    v28 = v15;
    LOBYTE(v15) = v35;
    v38 = 7;
    sub_1BCAA2148();
    sub_1BCAB66E4();
    v27 = v35;
    v38 = 8;
    sub_1BCAA2544();
    sub_1BCAB66E4();
    v26 = v35;
    v38 = 9;
    sub_1BCAB66E4();
    v17 = v35;
    LOBYTE(v35) = 10;
    sub_1BCAB66CC();
    v19 = v18;
    v38 = 11;
    sub_1BCAA2588();
    sub_1BCAB66A8();
    v20 = v35;
    v25 = v37;
    v24 = v36;
    v38 = 12;
    sub_1BCAA25CC();
    sub_1BCAB66E4();
    v21 = v24 | (v25 << 32);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v8, v34);
    v22 = v35;
    *(_BYTE *)a2 = v33;
    *(_BYTE *)(a2 + 1) = v32;
    *(_BYTE *)(a2 + 2) = v31;
    *(_BYTE *)(a2 + 3) = v30;
    *(_BYTE *)(a2 + 4) = v29;
    *(_BYTE *)(a2 + 5) = v28;
    *(_BYTE *)(a2 + 6) = v15;
    *(_BYTE *)(a2 + 7) = v27;
    *(_BYTE *)(a2 + 8) = v26;
    *(_BYTE *)(a2 + 9) = v17;
    *(_QWORD *)(a2 + 16) = v19;
    *(_QWORD *)(a2 + 24) = v20;
    *(_WORD *)(a2 + 36) = WORD2(v21);
    *(_DWORD *)(a2 + 32) = v21;
    *(_BYTE *)(a2 + 38) = v22;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_1BCA965D0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return DiagramConfiguration.Bar.init(from:)(a1, a2);
}

uint64_t sub_1BCA965E4(_QWORD *a1)
{
  return DiagramConfiguration.Bar.encode(to:)(a1);
}

uint64_t DiagramConfiguration.Banner.bannerText.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

void DiagramConfiguration.Banner.bannerTextStyle.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 16);
}

HealthVisualization::DiagramConfiguration::Banner __swiftcall DiagramConfiguration.Banner.init(bannerText:bannerTextStyle:)(Swift::String bannerText, HealthVisualization::DiagramConfiguration::TextAttributes bannerTextStyle)
{
  uint64_t v2;
  char v3;
  HealthVisualization::DiagramConfiguration::Banner result;

  v3 = *(_BYTE *)bannerTextStyle;
  *(Swift::String *)v2 = bannerText;
  *(_BYTE *)(v2 + 16) = v3;
  result.bannerText = bannerText;
  result.bannerTextStyle = bannerTextStyle;
  return result;
}

uint64_t sub_1BCA96644()
{
  return 0x655472656E6E6162;
}

uint64_t sub_1BCA9667C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1BCAA7048(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1BCA966A0()
{
  sub_1BCAA2610();
  return sub_1BCAB68D0();
}

uint64_t sub_1BCA966C8()
{
  sub_1BCAA2610();
  return sub_1BCAB68DC();
}

uint64_t DiagramConfiguration.Banner.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  _QWORD v10[2];
  int v11;
  char v12;
  char v13;
  char v14;

  sub_1BC9ACE04(0, &qword_1EF47A3E0, (uint64_t (*)(void))sub_1BCAA2610, (uint64_t)&type metadata for DiagramConfiguration.Banner.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v7 = (char *)v10 - v6;
  v11 = *(unsigned __int8 *)(v1 + 16);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BCAA2610();
  sub_1BCAB68B8();
  v14 = 0;
  v8 = v10[1];
  sub_1BCAB6744();
  if (!v8)
  {
    v13 = v11;
    v12 = 1;
    sub_1BCAA20C0();
    sub_1BCAB6774();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t DiagramConfiguration.Banner.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  char v19;

  v16 = a2;
  sub_1BC9ACE04(0, &qword_1EF47A3F0, (uint64_t (*)(void))sub_1BCAA2610, (uint64_t)&type metadata for DiagramConfiguration.Banner.CodingKeys, MEMORY[0x1E0DED048]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v15 - v7;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BCAA2610();
  sub_1BCAB68AC();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v9 = v16;
  v19 = 0;
  v10 = sub_1BCAB66B4();
  v12 = v11;
  v17 = 1;
  sub_1BCAA2148();
  swift_bridgeObjectRetain();
  sub_1BCAB66E4();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v13 = v18;
  *(_QWORD *)v9 = v10;
  *(_QWORD *)(v9 + 8) = v12;
  *(_BYTE *)(v9 + 16) = v13;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1BCA96A0C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return DiagramConfiguration.Banner.init(from:)(a1, a2);
}

uint64_t sub_1BCA96A20(_QWORD *a1)
{
  return DiagramConfiguration.Banner.encode(to:)(a1);
}

void DiagramConfiguration.AxisOnly.axis.getter(uint64_t a1@<X8>)
{
  int *v1;
  int *v2;
  __int16 v3;
  int v4;
  int v5;
  uint64_t v6;
  int v7;

  v2 = v1 + 1;
  v3 = *((_WORD *)v1 + 2);
  v4 = *v1;
  v7 = *(int *)((char *)v1 + 7);
  v6 = (uint64_t)v1 + 7;
  v5 = v7;
  LOWORD(v7) = *(_WORD *)(v6 + 4);
  *(_WORD *)(a1 + 4) = v3;
  *(_DWORD *)a1 = v4;
  *(_BYTE *)(a1 + 6) = *((_BYTE *)v2 + 2);
  *(_DWORD *)(a1 + 7) = v5;
  *(_WORD *)(a1 + 11) = v7;
  *(_BYTE *)(a1 + 13) = *(_BYTE *)(v6 + 6);
}

void DiagramConfiguration.AxisOnly.horizontalAxisInset.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 14);
}

void DiagramConfiguration.AxisOnly.verticalAxisInset.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 15);
}

void DiagramConfiguration.AxisOnly.innerHorizontalInset.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 16);
}

void DiagramConfiguration.AxisOnly.innerVerticalInset.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 17);
}

uint64_t DiagramConfiguration.AxisOnly.drawModelAreaForDebug.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 18);
}

HealthVisualization::DiagramConfiguration::AxisOnly __swiftcall DiagramConfiguration.AxisOnly.init(axis:horizontalAxisInset:verticalAxisInset:innerHorizontalInset:innerVerticalInset:drawModelAreaForDebug:)(HealthVisualization::DiagramConfiguration::Axis axis, HealthVisualization::DiagramConfiguration::AxisInset horizontalAxisInset, HealthVisualization::DiagramConfiguration::AxisInset verticalAxisInset, HealthVisualization::DiagramConfiguration::AxisInset innerHorizontalInset, HealthVisualization::DiagramConfiguration::AxisInset innerVerticalInset, Swift::Bool drawModelAreaForDebug)
{
  uint64_t v6;
  uint64_t v7;
  __int16 v8;
  int v9;
  int v10;
  int v11;
  char v12;
  char v13;
  char v14;
  char v15;
  HealthVisualization::DiagramConfiguration::AxisOnly result;

  v7 = *(_QWORD *)&axis.horizontal.value.axisType + 4;
  v8 = *(_WORD *)(*(_QWORD *)&axis.horizontal.value.axisType + 4);
  v9 = **(_DWORD **)&axis.horizontal.value.axisType;
  v11 = *(_DWORD *)(*(_QWORD *)&axis.horizontal.value.axisType + 7);
  *(_QWORD *)&axis.horizontal.value.axisType += 7;
  v10 = v11;
  LOWORD(v11) = *(_WORD *)(*(_QWORD *)&axis.horizontal.value.axisType + 4);
  *(_QWORD *)&axis.horizontal.value.axisType += 4;
  v12 = **(_BYTE **)&axis.vertical.value.labelTextAttributes;
  v13 = *(_BYTE *)horizontalAxisInset;
  v14 = *(_BYTE *)verticalAxisInset;
  v15 = *(_BYTE *)innerHorizontalInset;
  *(_WORD *)(v6 + 4) = v8;
  *(_DWORD *)v6 = v9;
  *(_BYTE *)(v6 + 6) = *(_BYTE *)(v7 + 2);
  *(_DWORD *)(v6 + 7) = v10;
  *(_WORD *)(v6 + 11) = v11;
  *(_BYTE *)(v6 + 13) = *(_BYTE *)(*(_QWORD *)&axis.horizontal.value.axisType + 2);
  *(_BYTE *)(v6 + 14) = v12;
  *(_BYTE *)(v6 + 15) = v13;
  *(_BYTE *)(v6 + 16) = v14;
  *(_BYTE *)(v6 + 17) = v15;
  *(_BYTE *)(v6 + 18) = innerVerticalInset;
  result.axis = axis;
  result.innerHorizontalInset = horizontalAxisInset;
  return result;
}

uint64_t sub_1BCA96B10(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1BCA96B3C + 4 * byte_1BCAC8F9C[a1]))(1936291937, 0xE400000000000000);
}

unint64_t sub_1BCA96B3C()
{
  return 0xD000000000000013;
}

uint64_t sub_1BCA96BC0()
{
  unsigned __int8 *v0;

  return sub_1BCA96B10(*v0);
}

uint64_t sub_1BCA96BC8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1BCAA7160(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1BCA96BEC()
{
  sub_1BCAA2654();
  return sub_1BCAB68D0();
}

uint64_t sub_1BCA96C14()
{
  sub_1BCAA2654();
  return sub_1BCAB68DC();
}

uint64_t DiagramConfiguration.AxisOnly.encode(to:)(_QWORD *a1)
{
  int *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  int v7;
  int v8;
  int v9;
  char v10;
  char v11;
  char *v12;
  uint64_t v13;
  char v15;
  char v16;
  char v17;
  uint64_t v18;
  _DWORD v19[3];
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  __int16 v29;
  char v30;
  int v31;
  __int16 v32;
  char v33;
  int v34;
  char v35;

  sub_1BC9ACE04(0, &qword_1EF47A3F8, (uint64_t (*)(void))sub_1BCAA2654, (uint64_t)&type metadata for DiagramConfiguration.AxisOnly.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v4 = v3;
  v23 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)v19 - v5;
  v25 = *((unsigned __int16 *)v1 + 2);
  v26 = *(unsigned int *)((char *)v1 + 7);
  v7 = *v1;
  v24 = *(unsigned __int16 *)((char *)v1 + 11);
  v34 = *((unsigned __int8 *)v1 + 14);
  v8 = *((unsigned __int8 *)v1 + 15);
  v21 = *((unsigned __int8 *)v1 + 16);
  v22 = v8;
  v9 = *((unsigned __int8 *)v1 + 17);
  v19[2] = *((unsigned __int8 *)v1 + 18);
  v20 = v9;
  v10 = *((_BYTE *)v1 + 6);
  v11 = *((_BYTE *)v1 + 13);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BCAA2654();
  sub_1BCAB68B8();
  v30 = v10;
  v29 = v25;
  v28 = v7;
  v33 = v11;
  v32 = v24;
  v12 = v6;
  v31 = v26;
  v35 = 0;
  sub_1BCAA23F0();
  v13 = v27;
  sub_1BCAB6774();
  if (v13)
    return (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v6, v4);
  v15 = v21;
  v16 = v22;
  v17 = v20;
  v18 = v23;
  LOBYTE(v28) = v34;
  v35 = 1;
  sub_1BCAA2698();
  sub_1BCAB6774();
  LOBYTE(v28) = v16;
  v35 = 2;
  sub_1BCAB6774();
  LOBYTE(v28) = v15;
  v35 = 3;
  sub_1BCAB6774();
  LOBYTE(v28) = v17;
  v35 = 4;
  sub_1BCAB6774();
  LOBYTE(v28) = 5;
  sub_1BCAB6750();
  return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v12, v4);
}

uint64_t DiagramConfiguration.AxisOnly.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  char v16;
  char v18;
  uint64_t v19;
  unint64_t v20;
  void (*v21)(char *, uint64_t);
  unint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  unsigned int v32;
  unsigned __int16 v33;
  unsigned __int8 v34;
  unsigned int v35;
  unsigned __int16 v36;
  unsigned __int8 v37;
  int v38;
  char v39;

  sub_1BC9ACE04(0, &qword_1EF47A410, (uint64_t (*)(void))sub_1BCAA2654, (uint64_t)&type metadata for DiagramConfiguration.AxisOnly.CodingKeys, MEMORY[0x1E0DED048]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v25 - v8;
  v10 = a1[3];
  v31 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v10);
  sub_1BCAA2654();
  sub_1BCAB68AC();
  if (!v2)
  {
    v11 = v7;
    v30 = a2;
    v39 = 0;
    sub_1BCAA2588();
    v12 = v6;
    sub_1BCAB66E4();
    v38 = v34;
    v28 = v33;
    v29 = v32;
    v13 = v37;
    v14 = v36;
    v15 = v35;
    v39 = 1;
    sub_1BCAA26DC();
    sub_1BCAB66E4();
    HIDWORD(v25) = v14;
    v26 = v15;
    v27 = v13;
    LOBYTE(v13) = v32;
    v39 = 2;
    sub_1BCAB66E4();
    LOBYTE(v14) = v32;
    v39 = 3;
    sub_1BCAB66E4();
    LOBYTE(v15) = v32;
    v39 = 4;
    sub_1BCAB66E4();
    v16 = v32;
    LOBYTE(v32) = 5;
    v18 = sub_1BCAB66C0();
    v19 = v12;
    v20 = v29 | ((unint64_t)(v28 | (v38 << 16)) << 32);
    v21 = *(void (**)(char *, uint64_t))(v11 + 8);
    LOBYTE(v11) = v15;
    v22 = v26 | ((unint64_t)(HIDWORD(v25) | (v27 << 16)) << 32);
    v21(v9, v19);
    v23 = v14;
    v24 = v30;
    *(_BYTE *)(v30 + 6) = BYTE6(v20);
    *(_WORD *)(v24 + 4) = WORD2(v20);
    *(_DWORD *)v24 = v20;
    *(_BYTE *)(v24 + 13) = BYTE6(v22);
    *(_WORD *)(v24 + 11) = WORD2(v22);
    *(_DWORD *)(v24 + 7) = v22;
    *(_BYTE *)(v24 + 14) = v13;
    *(_BYTE *)(v24 + 15) = v23;
    *(_BYTE *)(v24 + 16) = v11;
    *(_BYTE *)(v24 + 17) = v16;
    *(_BYTE *)(v24 + 18) = v18 & 1;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v31);
}

uint64_t sub_1BCA97204@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return DiagramConfiguration.AxisOnly.init(from:)(a1, a2);
}

uint64_t sub_1BCA97218(_QWORD *a1)
{
  return DiagramConfiguration.AxisOnly.encode(to:)(a1);
}

HealthVisualization::DiagramConfiguration::BarWidth_optional __swiftcall DiagramConfiguration.BarWidth.init(rawValue:)(Swift::String rawValue)
{
  char *v1;

  return (HealthVisualization::DiagramConfiguration::BarWidth_optional)sub_1BCA9DF78(v1);
}

uint64_t DiagramConfiguration.BarWidth.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1BCA97270 + 4 * byte_1BCAC8FA2[*v0]))(0x7464695772756F68, 0xE900000000000068);
}

uint64_t sub_1BCA97270()
{
  return 0x6874646957796164;
}

uint64_t sub_1BCA97288()
{
  return 0x746469576B656577;
}

uint64_t sub_1BCA9729C()
{
  return 0x5774686769736E69;
}

void sub_1BCA972BC()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  sub_1BCAB6870();
  __asm { BR              X9 }
}

uint64_t sub_1BCA9730C()
{
  sub_1BCAB5F40();
  swift_bridgeObjectRelease();
  return sub_1BCAB6894();
}

void sub_1BCA97380()
{
  __asm { BR              X10 }
}

uint64_t sub_1BCA973C0()
{
  sub_1BCAB5F40();
  return swift_bridgeObjectRelease();
}

void sub_1BCA97420()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  sub_1BCAB6870();
  __asm { BR              X9 }
}

uint64_t sub_1BCA9746C()
{
  sub_1BCAB5F40();
  swift_bridgeObjectRelease();
  return sub_1BCAB6894();
}

HealthVisualization::DiagramConfiguration::BarWidth_optional sub_1BCA974E0(Swift::String *a1)
{
  return DiagramConfiguration.BarWidth.init(rawValue:)(*a1);
}

uint64_t sub_1BCA974EC()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1BCA97520 + 4 * byte_1BCAC8FB2[*v0]))();
}

void sub_1BCA97520(_QWORD *a1@<X8>)
{
  *a1 = 0x6874646957796164;
  a1[1] = 0xE800000000000000;
}

void sub_1BCA9753C(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = 0x746469576B656577;
  a1[1] = v1;
}

void sub_1BCA97554(uint64_t a1@<X8>)
{
  strcpy((char *)a1, "insightWidth");
  *(_BYTE *)(a1 + 13) = 0;
  *(_WORD *)(a1 + 14) = -5120;
}

uint64_t sub_1BCA97578()
{
  sub_1BCAA8F04();
  return sub_1BCAB5FE8();
}

uint64_t sub_1BCA975D4()
{
  sub_1BCAA8F04();
  return sub_1BCAB5FD0();
}

void sub_1BCA97620(char *a1)
{
  sub_1BC999F10(*a1);
}

uint64_t DiagramConfiguration.Line.lineProperties.getter()
{
  return swift_bridgeObjectRetain();
}

void DiagramConfiguration.Line.axis.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  int v2;
  __int16 v3;

  v2 = *(_DWORD *)(v1 + 16);
  v3 = *(_WORD *)(v1 + 20);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 8);
  *(_WORD *)(a1 + 12) = v3;
  *(_DWORD *)(a1 + 8) = v2;
}

void DiagramConfiguration.Line.valueFormatter.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(v1 + 32);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 24);
  *(_BYTE *)(a1 + 8) = v2;
}

void DiagramConfiguration.Line.outerInsets.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 33);
}

uint64_t _s19HealthVisualization20DiagramConfigurationO4LineV14lineProperties4axis14valueFormatter11outerInsetsAESayAC0eG0VG_AC4AxisVSgAC05ValueJ0OAC0L0OtcfC_0@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, char *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  int v6;
  __int16 v7;
  uint64_t v8;
  char v9;
  char v10;

  v5 = *a2;
  v6 = *((_DWORD *)a2 + 2);
  v7 = *((_WORD *)a2 + 6);
  v8 = *a3;
  v9 = *((_BYTE *)a3 + 8);
  v10 = *a4;
  *(_QWORD *)a5 = result;
  *(_QWORD *)(a5 + 8) = v5;
  *(_WORD *)(a5 + 20) = v7;
  *(_DWORD *)(a5 + 16) = v6;
  *(_QWORD *)(a5 + 24) = v8;
  *(_BYTE *)(a5 + 32) = v9;
  *(_BYTE *)(a5 + 33) = v10;
  return result;
}

uint64_t static DiagramConfiguration.ValueFormatter.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *(unsigned __int8 *)(a2 + 8);
  v3 = (*(_QWORD *)a1 == *(_QWORD *)a2) & ~v2;
  if (*(_QWORD *)a2)
    v4 = *(unsigned __int8 *)(a2 + 8);
  else
    v4 = 0;
  if (*(_QWORD *)a2)
    v2 = 0;
  if (*(_QWORD *)a1)
    v5 = v4;
  else
    v5 = v2;
  if (*(_BYTE *)(a1 + 8) == 1)
    return v5;
  else
    return v3;
}

uint64_t sub_1BCA976E4()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1BCA97720 + 4 * byte_1BCAC8FB6[*v0]))(0x706F7250656E696CLL, 0xEE00736569747265);
}

uint64_t sub_1BCA97720()
{
  return 1936291937;
}

uint64_t sub_1BCA97730()
{
  return 0x726F4665756C6176;
}

uint64_t sub_1BCA97754()
{
  return 0x736E49726574756FLL;
}

uint64_t sub_1BCA97774@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1BCAA739C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1BCA97798()
{
  sub_1BCAA2720();
  return sub_1BCAB68D0();
}

uint64_t sub_1BCA977C0()
{
  sub_1BCAA2720();
  return sub_1BCAB68DC();
}

uint64_t DiagramConfiguration.Line.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  __int16 v23;
  int v24;
  char v25;

  sub_1BC9ACE04(0, &qword_1ED6C6F40, (uint64_t (*)(void))sub_1BCAA2720, (uint64_t)&type metadata for DiagramConfiguration.Line.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v7 = (char *)&v15 - v6;
  v9 = *v1;
  v8 = v1[1];
  v18 = *((unsigned __int16 *)v1 + 10);
  v19 = v8;
  v17 = *((unsigned int *)v1 + 4);
  v16 = v1[3];
  v24 = *((unsigned __int8 *)v1 + 32);
  HIDWORD(v15) = *((unsigned __int8 *)v1 + 33);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BCAA2720();
  sub_1BCAB68B8();
  v21 = v9;
  v25 = 0;
  sub_1BCAA2764();
  sub_1BCAA2840(&qword_1ED6C6DF8, (uint64_t (*)(void))sub_1BCAA27B8, MEMORY[0x1E0DEAF10]);
  v10 = v20;
  sub_1BCAB6774();
  if (!v10)
  {
    v11 = v24;
    v12 = v16;
    v13 = BYTE4(v15);
    v21 = v19;
    v23 = (v17 | (unint64_t)(v18 << 32)) >> 32;
    v22 = v17;
    v25 = 1;
    sub_1BCAA23F0();
    sub_1BCAB6738();
    v21 = v12;
    LOBYTE(v22) = v11;
    v25 = 2;
    sub_1BCAA27FC();
    sub_1BCAB6774();
    LOBYTE(v21) = v13;
    v25 = 3;
    sub_1BCAA2434();
    sub_1BCAB6774();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t DiagramConfiguration.Line.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unsigned __int16 v24;
  int v25;
  char v26;

  sub_1BC9ACE04(0, &qword_1ED6C7278, (uint64_t (*)(void))sub_1BCAA2720, (uint64_t)&type metadata for DiagramConfiguration.Line.CodingKeys, MEMORY[0x1E0DED048]);
  v21 = v5;
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v18 - v7;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BCAA2720();
  sub_1BCAB68AC();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v9 = v6;
  sub_1BCAA2764();
  v26 = 0;
  sub_1BCAA2840(&qword_1ED6C7258, (uint64_t (*)(void))sub_1BCAA28A4, MEMORY[0x1E0DEAF40]);
  v10 = v21;
  sub_1BCAB66E4();
  v11 = v22;
  v26 = 1;
  sub_1BCAA2588();
  swift_bridgeObjectRetain();
  sub_1BCAB66A8();
  v19 = v24;
  v20 = v22;
  v12 = v23;
  v26 = 2;
  sub_1BCAA28E8();
  sub_1BCAB66E4();
  v18 = v12;
  v13 = v22;
  v25 = v23;
  v26 = 3;
  sub_1BCAA25CC();
  sub_1BCAB66E4();
  v15 = v18 | (v19 << 32);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v8, v10);
  v16 = v22;
  v17 = v20;
  *(_QWORD *)a2 = v11;
  *(_QWORD *)(a2 + 8) = v17;
  *(_WORD *)(a2 + 20) = WORD2(v15);
  *(_DWORD *)(a2 + 16) = v15;
  *(_QWORD *)(a2 + 24) = v13;
  *(_BYTE *)(a2 + 32) = v25;
  *(_BYTE *)(a2 + 33) = v16;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1BCA97CE4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return DiagramConfiguration.Line.init(from:)(a1, a2);
}

uint64_t sub_1BCA97CF8(_QWORD *a1)
{
  return DiagramConfiguration.Line.encode(to:)(a1);
}

void DiagramConfiguration.LineProperties.lineWidth.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

void DiagramConfiguration.LineProperties.lineColor.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 1);
}

void DiagramConfiguration.LineProperties.lineHighlightColor.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 2);
}

void DiagramConfiguration.LineProperties.linePointRadius.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 3);
}

void DiagramConfiguration.LineProperties.lineCornerRadius.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 4);
}

void DiagramConfiguration.LineProperties.referenceAnnotationPosition.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 5);
}

void DiagramConfiguration.LineProperties.referenceLineColor.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 6);
}

void DiagramConfiguration.LineProperties.referenceLineWidth.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 7);
}

void DiagramConfiguration.LineProperties.referenceLineTextAttributes.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 8);
}

void DiagramConfiguration.LineProperties.dataGroupForPointLabels.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 9);
}

void DiagramConfiguration.LineProperties.pointLabels.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  __int16 v2;
  char v3;

  v2 = *(_WORD *)(v1 + 24);
  v3 = *(_BYTE *)(v1 + 26);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 16);
  *(_BYTE *)(a1 + 10) = v3;
  *(_WORD *)(a1 + 8) = v2;
}

uint64_t sub_1BCA97DA8(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1BCA97DE0 + 4 * byte_1BCAC8FBA[a1]))(0x74646957656E696CLL, 0xE900000000000068);
}

uint64_t sub_1BCA97DE0()
{
  return 0x6F6C6F43656E696CLL;
}

unint64_t sub_1BCA97DF8()
{
  return 0xD000000000000012;
}

unint64_t sub_1BCA97E84()
{
  return 0xD000000000000017;
}

uint64_t sub_1BCA97EA0()
{
  return 0x62614C746E696F70;
}

void sub_1BCA97EC0()
{
  JUMPOUT(0x1BCA97ED8);
}

uint64_t sub_1BCA97EE4()
{
  unsigned __int8 *v0;

  return sub_1BCA97DA8(*v0);
}

uint64_t sub_1BCA97EEC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1BCAA75A4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1BCA97F10()
{
  sub_1BCAA292C();
  return sub_1BCAB68D0();
}

uint64_t sub_1BCA97F38()
{
  sub_1BCAA292C();
  return sub_1BCAB68DC();
}

uint64_t DiagramConfiguration.LineProperties.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char v8;
  int v9;
  int v10;
  int v11;
  int v12;
  char *v13;
  uint64_t v14;
  char v15;
  char v16;
  char v17;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  __int16 v33;
  char v34;
  int v35;
  char v36;

  sub_1BC9ACE04(0, &qword_1ED6C6F30, (uint64_t (*)(void))sub_1BCAA292C, (uint64_t)&type metadata for DiagramConfiguration.LineProperties.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v7 = (char *)&v19 - v6;
  v8 = *v1;
  v35 = v1[1];
  v9 = v1[2];
  v29 = v1[3];
  v30 = v9;
  v10 = v1[4];
  v27 = v1[5];
  v28 = v10;
  v11 = v1[6];
  v25 = v1[7];
  v26 = v11;
  v12 = v1[8];
  v23 = v1[9];
  v24 = v12;
  v22 = *((_QWORD *)v1 + 2);
  LODWORD(v6) = *((unsigned __int16 *)v1 + 12);
  v20 = v1[26];
  v21 = v6;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BCAA292C();
  sub_1BCAB68B8();
  LOBYTE(v32) = v8;
  v13 = v7;
  v36 = 0;
  sub_1BCAA2970();
  v14 = v31;
  sub_1BCAB6774();
  if (v14)
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  v15 = v29;
  v16 = v30;
  v17 = v28;
  LOBYTE(v32) = v35;
  v36 = 1;
  sub_1BCAA2324();
  sub_1BCAB6774();
  LOBYTE(v32) = v16;
  v36 = 2;
  sub_1BCAB6774();
  LOBYTE(v32) = v15;
  v36 = 3;
  sub_1BCAA29B4();
  sub_1BCAB6774();
  LOBYTE(v32) = v17;
  v36 = 4;
  sub_1BCAB6774();
  LOBYTE(v32) = v27;
  v36 = 5;
  sub_1BCAA23AC();
  sub_1BCAB6774();
  LOBYTE(v32) = v26;
  v36 = 6;
  sub_1BCAB6774();
  LOBYTE(v32) = v25;
  v36 = 7;
  sub_1BCAB6774();
  LOBYTE(v32) = v24;
  v36 = 8;
  sub_1BCAA20C0();
  sub_1BCAB6774();
  LOBYTE(v32) = v23;
  v36 = 9;
  sub_1BC9E4E50();
  sub_1BCAB6774();
  v32 = v22;
  v34 = (v21 | (v20 << 16)) >> 16;
  v33 = v21;
  v36 = 10;
  sub_1BCAA29F8();
  sub_1BCAB6738();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v13, v4);
}

uint64_t DiagramConfiguration.LineProperties.init(from:)@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  int v10;
  int v11;
  int v13;
  int v14;
  int v15;
  int v16;
  char v17;
  uint64_t v18;
  __int16 v19;
  char v20;
  _BYTE *v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  _BYTE *v29;
  uint64_t v30;
  uint64_t v31;
  __int16 v32;
  char v33;
  int v34;
  char v35;

  sub_1BC9ACE04(0, &qword_1ED6C7270, (uint64_t (*)(void))sub_1BCAA292C, (uint64_t)&type metadata for DiagramConfiguration.LineProperties.CodingKeys, MEMORY[0x1E0DED048]);
  v30 = v5;
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v22 - v7;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BCAA292C();
  sub_1BCAB68AC();
  if (!v2)
  {
    v9 = v6;
    v29 = a2;
    v35 = 0;
    sub_1BCAA2A3C();
    sub_1BCAB66E4();
    v10 = v31;
    v35 = 1;
    sub_1BCAA24BC();
    sub_1BCAB66E4();
    v34 = v10;
    v11 = v31;
    v35 = 2;
    sub_1BCAB66E4();
    v28 = v11;
    v13 = v31;
    v35 = 3;
    sub_1BCAA2A80();
    sub_1BCAB66E4();
    v27 = v13;
    v14 = v31;
    v35 = 4;
    sub_1BCAB66E4();
    v26 = v14;
    v15 = v31;
    v35 = 5;
    sub_1BCAA2544();
    sub_1BCAB66E4();
    v25 = v15;
    LOBYTE(v15) = v31;
    v35 = 6;
    sub_1BCAB66E4();
    LOBYTE(v14) = v28;
    v16 = v31;
    v35 = 7;
    sub_1BCAB66E4();
    v17 = v31;
    v35 = 8;
    sub_1BCAA2148();
    sub_1BCAB66E4();
    v23 = v31;
    v24 = v16;
    v35 = 9;
    sub_1BC9E4FE8();
    sub_1BCAB66E4();
    HIDWORD(v22) = v31;
    v35 = 10;
    sub_1BCAA2AC4();
    sub_1BCAB66A8();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v8, v30);
    v18 = v31;
    v19 = v32;
    v20 = v33;
    v21 = v29;
    *v29 = v34;
    v21[1] = v14;
    v21[2] = v27;
    v21[3] = v26;
    v21[4] = v25;
    v21[5] = v15;
    v21[6] = v24;
    v21[7] = v17;
    v21[8] = v23;
    v21[9] = BYTE4(v22);
    *((_QWORD *)v21 + 2) = v18;
    v21[26] = v20;
    *((_WORD *)v21 + 12) = v19;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_1BCA987C8@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return DiagramConfiguration.LineProperties.init(from:)(a1, a2);
}

uint64_t sub_1BCA987DC(_QWORD *a1)
{
  return DiagramConfiguration.LineProperties.encode(to:)(a1);
}

HealthVisualization::DiagramConfiguration::LineWidth_optional __swiftcall DiagramConfiguration.LineWidth.init(rawValue:)(Swift::String rawValue)
{
  char *v1;

  return (HealthVisualization::DiagramConfiguration::LineWidth_optional)sub_1BCA99BE0(v1);
}

uint64_t DiagramConfiguration.LineWidth.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1BCA98838 + 4 * byte_1BCAC8FC5[*v0]))(0x57746C7561666564, 0xEC00000068746469);
}

uint64_t sub_1BCA98838()
{
  return 0x656E696C72696168;
}

uint64_t sub_1BCA98870()
{
  return 0x74646957666C6168;
}

uint64_t sub_1BCA9888C()
{
  return 0x64726968546F7774;
}

uint64_t sub_1BCA988B0()
{
  return 0x7269685472756F66;
}

void sub_1BCA988D4()
{
  char *v0;

  sub_1BCA9348C(*v0);
}

void sub_1BCA988DC()
{
  __asm { BR              X10 }
}

uint64_t sub_1BCA98920()
{
  sub_1BCAB5F40();
  return swift_bridgeObjectRelease();
}

void sub_1BCA989D0(uint64_t a1)
{
  char *v1;

  sub_1BCA940AC(a1, *v1);
}

HealthVisualization::DiagramConfiguration::LineWidth_optional sub_1BCA989D8(Swift::String *a1)
{
  return DiagramConfiguration.LineWidth.init(rawValue:)(*a1);
}

uint64_t sub_1BCA989E4()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1BCA98A1C + 4 * byte_1BCAC8FD1[*v0]))();
}

void sub_1BCA98A1C(uint64_t a1@<X8>)
{
  strcpy((char *)a1, "hairlineWidth");
  *(_WORD *)(a1 + 14) = -4864;
}

void sub_1BCA98A44(uint64_t a1@<X8>)
{
  strcpy((char *)a1, "oneThirdWidth");
  *(_WORD *)(a1 + 14) = -4864;
}

void sub_1BCA98A6C(_QWORD *a1@<X8>)
{
  *a1 = 0x74646957666C6168;
  a1[1] = 0xE900000000000068;
}

void sub_1BCA98A8C(char *a1@<X8>)
{
  strcpy(a1, "twoThirdsWidth");
  a1[15] = -18;
}

void sub_1BCA98AB4(_QWORD *a1@<X8>)
{
  *a1 = 0x7269685472756F66;
  a1[1] = 0xEF68746469577364;
}

uint64_t sub_1BCA98ADC()
{
  sub_1BCAA8EC0();
  return sub_1BCAB5FE8();
}

uint64_t sub_1BCA98B38()
{
  sub_1BCAA8EC0();
  return sub_1BCAB5FD0();
}

void sub_1BCA98B84(char *a1)
{
  sub_1BC999BD0(*a1);
}

HealthVisualization::DiagramConfiguration::LineRadius_optional __swiftcall DiagramConfiguration.LineRadius.init(rawValue:)(Swift::String rawValue)
{
  char *v1;

  return (HealthVisualization::DiagramConfiguration::LineRadius_optional)sub_1BCA99BE0(v1);
}

uint64_t DiagramConfiguration.LineRadius.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1BCA98BD8 + 4 * byte_1BCAC8FD7[*v0]))(0x52746C7561666564, 0xED00007375696461);
}

uint64_t sub_1BCA98BD8()
{
  return 0x69646152666C6168;
}

unint64_t sub_1BCA98C00()
{
  return 0xD00000000000001ALL;
}

unint64_t sub_1BCA98C3C()
{
  return 0xD000000000000010;
}

void sub_1BCA98C58()
{
  char *v0;

  sub_1BCA9306C(*v0);
}

void sub_1BCA98C60(uint64_t a1)
{
  char *v1;

  sub_1BCA93718(a1, *v1);
}

void sub_1BCA98C68(uint64_t a1)
{
  char *v1;

  sub_1BCA93CA0(a1, *v1);
}

HealthVisualization::DiagramConfiguration::LineRadius_optional sub_1BCA98C70(Swift::String *a1)
{
  return DiagramConfiguration.LineRadius.init(rawValue:)(*a1);
}

uint64_t sub_1BCA98C7C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = DiagramConfiguration.LineRadius.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1BCA98CA0()
{
  sub_1BCAA8E7C();
  return sub_1BCAB5FE8();
}

uint64_t sub_1BCA98CFC()
{
  sub_1BCAA8E7C();
  return sub_1BCAB5FD0();
}

void sub_1BCA98D48(char *a1)
{
  sub_1BC99A63C(*a1);
}

void DiagramConfiguration.Distribution.barWidth.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

void DiagramConfiguration.Distribution.padding.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 1);
}

void DiagramConfiguration.Distribution.contentColor.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 2);
}

void DiagramConfiguration.Distribution.highlightColor.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 3);
}

void DiagramConfiguration.Distribution.referenceLineColor.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 4);
}

void DiagramConfiguration.Distribution.referenceLineTextAttributes.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 5);
}

void DiagramConfiguration.Distribution.referenceAnnotationPosition.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 6);
}

void DiagramConfiguration.Distribution.dataGroupForPointLabels.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 7);
}

void DiagramConfiguration.Distribution.pointLabels.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  __int16 v2;
  char v3;

  v2 = *(_WORD *)(v1 + 16);
  v3 = *(_BYTE *)(v1 + 18);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 8);
  *(_BYTE *)(a1 + 10) = v3;
  *(_WORD *)(a1 + 8) = v2;
}

__n128 DiagramConfiguration.Distribution.verticalLimits.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  __n128 result;
  __int128 v5;

  v2 = *(_QWORD *)(v1 + 56);
  v3 = *(_BYTE *)(v1 + 64);
  result = *(__n128 *)(v1 + 24);
  v5 = *(_OWORD *)(v1 + 40);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 32) = v2;
  *(_BYTE *)(a1 + 40) = v3;
  return result;
}

void DiagramConfiguration.Distribution.axis.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  int v2;
  __int16 v3;

  v2 = *(_DWORD *)(v1 + 73);
  v3 = *(_WORD *)(v1 + 77);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 65);
  *(_WORD *)(a1 + 12) = v3;
  *(_DWORD *)(a1 + 8) = v2;
}

void DiagramConfiguration.Distribution.outerInsets.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 79);
}

void DiagramConfiguration.Distribution.valueFormatter.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;

  v2 = *(_BYTE *)(v1 + 88);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 80);
  *(_BYTE *)(a1 + 8) = v2;
}

uint64_t DiagramConfiguration.Distribution.init(barWidth:padding:contentColor:highlightColor:referenceLineColor:referenceLineTextAttributes:referenceAnnotationPosition:dataGroupForPointLabels:pointLabels:verticalLimits:axis:outerInsets:valueFormatter:)@<X0>(char *a1@<X0>, char *a2@<X1>, char *a3@<X2>, char *a4@<X3>, unsigned __int8 *a5@<X4>, char *a6@<X5>, char *a7@<X6>, char *a8@<X7>, uint64_t a9@<X8>, uint64_t *a10, uint64_t a11, uint64_t *a12, char *a13, uint64_t *a14)
{
  __int128 v14;
  char v15;
  char v16;
  char v17;
  char v18;
  uint64_t result;
  char v20;
  char v21;
  char v22;
  uint64_t v23;
  __int16 v24;
  char v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  int v29;
  __int16 v30;
  char v31;
  uint64_t v32;
  char v33;

  v14 = *(_OWORD *)(a11 + 16);
  *(_OWORD *)(a9 + 24) = *(_OWORD *)a11;
  v15 = *a1;
  v16 = *a2;
  v17 = *a3;
  v18 = *a4;
  result = *a5;
  v20 = *a6;
  v21 = *a7;
  v22 = *a8;
  v23 = *a10;
  v24 = *((_WORD *)a10 + 4);
  v25 = *((_BYTE *)a10 + 10);
  v26 = *(_QWORD *)(a11 + 32);
  v27 = *(_BYTE *)(a11 + 40);
  v28 = *a12;
  v29 = *((_DWORD *)a12 + 2);
  v30 = *((_WORD *)a12 + 6);
  v31 = *a13;
  v32 = *a14;
  v33 = *((_BYTE *)a14 + 8);
  *(_BYTE *)a9 = v15;
  *(_BYTE *)(a9 + 1) = v16;
  *(_BYTE *)(a9 + 2) = v17;
  *(_BYTE *)(a9 + 3) = v18;
  *(_BYTE *)(a9 + 4) = result;
  *(_BYTE *)(a9 + 5) = v20;
  *(_BYTE *)(a9 + 6) = v21;
  *(_BYTE *)(a9 + 7) = v22;
  *(_QWORD *)(a9 + 8) = v23;
  *(_BYTE *)(a9 + 18) = v25;
  *(_WORD *)(a9 + 16) = v24;
  *(_OWORD *)(a9 + 40) = v14;
  *(_QWORD *)(a9 + 56) = v26;
  *(_BYTE *)(a9 + 64) = v27;
  *(_QWORD *)(a9 + 65) = v28;
  *(_WORD *)(a9 + 77) = v30;
  *(_DWORD *)(a9 + 73) = v29;
  *(_BYTE *)(a9 + 79) = v31;
  *(_QWORD *)(a9 + 80) = v32;
  *(_BYTE *)(a9 + 88) = v33;
  return result;
}

uint64_t sub_1BCA98EE8(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1BCA98F1C + 4 * byte_1BCAC8FDD[a1]))(0x6874646957726162, 0xE800000000000000);
}

uint64_t sub_1BCA98F1C()
{
  return 0x676E6964646170;
}

uint64_t sub_1BCA98F34()
{
  return 0x43746E65746E6F63;
}

uint64_t sub_1BCA98F54()
{
  return 0x6867696C68676968;
}

unint64_t sub_1BCA98F78()
{
  return 0xD000000000000012;
}

uint64_t sub_1BCA98FD8()
{
  return 0x62614C746E696F70;
}

uint64_t sub_1BCA98FF8()
{
  return 0x6C61636974726576;
}

uint64_t sub_1BCA9901C()
{
  return 1936291937;
}

uint64_t sub_1BCA9902C()
{
  return 0x736E49726574756FLL;
}

uint64_t sub_1BCA99050()
{
  return 0x726F4665756C6176;
}

uint64_t sub_1BCA99074()
{
  unsigned __int8 *v0;

  return sub_1BCA98EE8(*v0);
}

uint64_t sub_1BCA9907C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1BCAA7A00(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1BCA990A0()
{
  sub_1BCAA2B08();
  return sub_1BCAB68D0();
}

uint64_t sub_1BCA990C8()
{
  sub_1BCAA2B08();
  return sub_1BCAB68DC();
}

uint64_t DiagramConfiguration.Distribution.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  char v21;
  uint64_t v22;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  uint64_t v37;
  int v38;
  int v39;
  int v40;
  uint64_t v41;
  int v42;
  int v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  int v52;
  char v53;

  sub_1BC9ACE04(0, &qword_1ED6C2E88, (uint64_t (*)(void))sub_1BCAA2B08, (uint64_t)&type metadata for DiagramConfiguration.Distribution.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v24 - v5;
  v7 = *v1;
  v52 = v1[1];
  v8 = v1[2];
  v43 = v1[3];
  v44 = v8;
  v42 = v1[4];
  v9 = v1[5];
  v39 = v1[6];
  v40 = v9;
  v38 = v1[7];
  v37 = *((_QWORD *)v1 + 1);
  LODWORD(v5) = *((unsigned __int16 *)v1 + 8);
  v35 = v1[18];
  v36 = v5;
  v10 = *((_QWORD *)v1 + 3);
  v11 = *((_QWORD *)v1 + 4);
  v33 = *((_QWORD *)v1 + 5);
  v34 = v11;
  v12 = *((_QWORD *)v1 + 6);
  v31 = *((_QWORD *)v1 + 7);
  v32 = v12;
  v30 = v1[64];
  v28 = *(_QWORD *)(v1 + 65);
  v29 = v10;
  v27 = *(unsigned __int16 *)(v1 + 77);
  v26 = *(unsigned int *)(v1 + 73);
  v25 = v1[79];
  v41 = *((_QWORD *)v1 + 10);
  v13 = v1[88];
  v14 = a1[3];
  v15 = a1;
  v17 = v16;
  __swift_project_boxed_opaque_existential_1(v15, v14);
  sub_1BCAA2B08();
  sub_1BCAB68B8();
  LOBYTE(v46) = v7;
  v53 = 0;
  sub_1BCAA2B4C();
  v18 = v45;
  sub_1BCAB6774();
  if (!v18)
  {
    v20 = v43;
    v19 = v44;
    v21 = v42;
    LODWORD(v45) = v13;
    v22 = v41;
    LOBYTE(v46) = v52;
    v53 = 1;
    sub_1BCAA2B90();
    sub_1BCAB6774();
    LOBYTE(v46) = v19;
    v53 = 2;
    sub_1BCAA2324();
    sub_1BCAB6774();
    LOBYTE(v46) = v20;
    v53 = 3;
    sub_1BCAB6774();
    LOBYTE(v46) = v21;
    v53 = 4;
    sub_1BCAB6774();
    LOBYTE(v46) = v40;
    v53 = 5;
    sub_1BCAA20C0();
    sub_1BCAB6774();
    LOBYTE(v46) = v39;
    v53 = 6;
    sub_1BCAA23AC();
    sub_1BCAB6774();
    LOBYTE(v46) = v38;
    v53 = 7;
    sub_1BC9E4E50();
    sub_1BCAB6774();
    v46 = v37;
    BYTE2(v47) = (v36 | (v35 << 16)) >> 16;
    LOWORD(v47) = v36;
    v53 = 8;
    sub_1BCAA29F8();
    sub_1BCAB6738();
    v46 = v29;
    v47 = v34;
    v48 = v33;
    v49 = v32;
    v50 = v31;
    v51 = v30;
    v53 = 9;
    sub_1BCAA2BD4();
    sub_1BCAB6738();
    v46 = v28;
    WORD2(v47) = (v26 | (unint64_t)(v27 << 32)) >> 32;
    LODWORD(v47) = v26;
    v53 = 10;
    sub_1BCAA23F0();
    sub_1BCAB6738();
    LOBYTE(v46) = v25;
    v53 = 11;
    sub_1BCAA2434();
    sub_1BCAB6774();
    v46 = v22;
    LOBYTE(v47) = v45;
    v53 = 12;
    sub_1BCAA27FC();
    sub_1BCAB6774();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v17);
}

uint64_t DiagramConfiguration.Distribution.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  uint64_t v16;
  int v17;
  void (*v18)(char *, uint64_t);
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  uint64_t v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned __int8 v47;
  int v48;
  char v49;

  sub_1BC9ACE04(0, &qword_1ED6C6930, (uint64_t (*)(void))sub_1BCAA2B08, (uint64_t)&type metadata for DiagramConfiguration.Distribution.CodingKeys, MEMORY[0x1E0DED048]);
  v41 = v5;
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v24 - v7;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BCAA2B08();
  sub_1BCAB68AC();
  if (!v2)
  {
    v9 = v6;
    v49 = 0;
    sub_1BCAA2C18();
    sub_1BCAB66E4();
    v10 = v42;
    v49 = 1;
    sub_1BCAA2C5C();
    sub_1BCAB66E4();
    v48 = v10;
    v11 = v42;
    v49 = 2;
    sub_1BCAA24BC();
    sub_1BCAB66E4();
    v40 = v11;
    v12 = v42;
    v49 = 3;
    sub_1BCAB66E4();
    v39 = v12;
    LOBYTE(v12) = v42;
    v49 = 4;
    sub_1BCAB66E4();
    LOBYTE(v10) = v12;
    v13 = v42;
    v49 = 5;
    sub_1BCAA2148();
    sub_1BCAB66E4();
    v38 = v13;
    v14 = v42;
    v49 = 6;
    sub_1BCAA2544();
    sub_1BCAB66E4();
    v37 = v14;
    LOBYTE(v14) = v42;
    v49 = 7;
    sub_1BC9E4FE8();
    sub_1BCAB66E4();
    v36 = v42;
    v49 = 8;
    sub_1BCAA2AC4();
    sub_1BCAB66A8();
    v35 = v42;
    v33 = (unsigned __int16)v43;
    v34 = BYTE2(v43);
    v49 = 9;
    sub_1BCAA2CA0();
    sub_1BCAB66A8();
    v16 = v42;
    v31 = v44;
    v32 = v43;
    v29 = v46;
    v30 = v45;
    v28 = v47;
    v49 = 10;
    sub_1BCAA2588();
    sub_1BCAB66A8();
    v26 = WORD2(v43);
    v27 = v42;
    v25 = v43;
    v49 = 11;
    sub_1BCAA25CC();
    sub_1BCAB66E4();
    HIDWORD(v24) = v42;
    v49 = 12;
    sub_1BCAA28E8();
    sub_1BCAB66E4();
    v17 = v33 | (v34 << 16);
    v18 = *(void (**)(char *, uint64_t))(v9 + 8);
    v19 = v25 | (v26 << 32);
    v18(v8, v41);
    v20 = v42;
    v21 = v43;
    *(_BYTE *)a2 = v48;
    *(_BYTE *)(a2 + 1) = v40;
    *(_BYTE *)(a2 + 2) = v39;
    *(_BYTE *)(a2 + 3) = v10;
    *(_BYTE *)(a2 + 4) = v38;
    *(_BYTE *)(a2 + 5) = v37;
    *(_BYTE *)(a2 + 6) = v14;
    *(_BYTE *)(a2 + 7) = v36;
    *(_QWORD *)(a2 + 8) = v35;
    *(_BYTE *)(a2 + 18) = BYTE2(v17);
    *(_WORD *)(a2 + 16) = v17;
    v22 = v32;
    *(_QWORD *)(a2 + 24) = v16;
    *(_QWORD *)(a2 + 32) = v22;
    v23 = v30;
    *(_QWORD *)(a2 + 40) = v31;
    *(_QWORD *)(a2 + 48) = v23;
    *(_QWORD *)(a2 + 56) = v29;
    *(_BYTE *)(a2 + 64) = v28;
    *(_QWORD *)(a2 + 65) = v27;
    *(_WORD *)(a2 + 77) = WORD2(v19);
    *(_DWORD *)(a2 + 73) = v19;
    *(_BYTE *)(a2 + 79) = BYTE4(v24);
    *(_QWORD *)(a2 + 80) = v20;
    *(_BYTE *)(a2 + 88) = v21;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_1BCA99BA8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return DiagramConfiguration.Distribution.init(from:)(a1, a2);
}

uint64_t sub_1BCA99BBC(_QWORD *a1)
{
  return DiagramConfiguration.Distribution.encode(to:)(a1);
}

HealthVisualization::DiagramConfiguration::DistributionWidth_optional __swiftcall DiagramConfiguration.DistributionWidth.init(rawValue:)(Swift::String rawValue)
{
  char *v1;

  return (HealthVisualization::DiagramConfiguration::DistributionWidth_optional)sub_1BCA99BE0(v1);
}

uint64_t sub_1BCA99BE0@<X0>(char *a1@<X8>)
{
  unint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_1BCAB6654();
  result = swift_bridgeObjectRelease();
  v4 = 6;
  if (v2 < 6)
    v4 = v2;
  *a1 = v4;
  return result;
}

uint64_t DiagramConfiguration.DistributionWidth.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1BCA99C6C + 4 * byte_1BCAC8FEA[*v0]))(0xD000000000000018, 0x80000001BCACDC70);
}

unint64_t sub_1BCA99C6C()
{
  return 0xD000000000000015;
}

uint64_t sub_1BCA99C88@<X0>(uint64_t a1@<X8>)
{
  return a1 + 12;
}

void sub_1BCA99CD0()
{
  char *v0;

  sub_1BCA93218(*v0);
}

void sub_1BCA99CD8(uint64_t a1)
{
  char *v1;

  sub_1BCA93658(a1, *v1);
}

void sub_1BCA99CE0(uint64_t a1)
{
  char *v1;

  sub_1BCA93E44(a1, *v1);
}

HealthVisualization::DiagramConfiguration::DistributionWidth_optional sub_1BCA99CE8(Swift::String *a1)
{
  return DiagramConfiguration.DistributionWidth.init(rawValue:)(*a1);
}

uint64_t sub_1BCA99CF4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = DiagramConfiguration.DistributionWidth.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1BCA99D18()
{
  sub_1BCAA8E38();
  return sub_1BCAB5FE8();
}

uint64_t sub_1BCA99D74()
{
  sub_1BCAA8E38();
  return sub_1BCAB5FD0();
}

void sub_1BCA99DC0(char *a1)
{
  sub_1BC99A81C(*a1);
}

HealthVisualization::DiagramConfiguration::DistributionPadding_optional __swiftcall DiagramConfiguration.DistributionPadding.init(rawValue:)(Swift::String rawValue)
{
  char *v1;

  return (HealthVisualization::DiagramConfiguration::DistributionPadding_optional)sub_1BCA9C878(v1);
}

uint64_t DiagramConfiguration.DistributionPadding.rawValue.getter()
{
  _BYTE *v0;
  unint64_t v1;

  v1 = 0xD00000000000001ALL;
  if (*v0 != 1)
    v1 = 0xD00000000000001CLL;
  if (*v0)
    return v1;
  else
    return 0x646461506F72657ALL;
}

uint64_t sub_1BCA99E40()
{
  return sub_1BCA93304();
}

uint64_t sub_1BCA99E48()
{
  sub_1BCAB5F40();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1BCA99ED0()
{
  return sub_1BCA93F2C();
}

HealthVisualization::DiagramConfiguration::DistributionPadding_optional sub_1BCA99ED8(Swift::String *a1)
{
  return DiagramConfiguration.DistributionPadding.init(rawValue:)(*a1);
}

void sub_1BCA99EE4(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xEB00000000676E69;
  v4 = 0x80000001BCACDD50;
  v5 = 0xD00000000000001ALL;
  if (v2 != 1)
  {
    v5 = 0xD00000000000001CLL;
    v4 = 0x80000001BCACDD70;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0x646461506F72657ALL;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_1BCA99F50()
{
  sub_1BCAA8DF4();
  return sub_1BCAB5FE8();
}

uint64_t sub_1BCA99FAC()
{
  sub_1BCAA8DF4();
  return sub_1BCAB5FD0();
}

uint64_t sub_1BCA99FF8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1BC99A52C(*a1, *a2);
}

void DiagramConfiguration.DistributionLimits.limitGradientColor.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

double DiagramConfiguration.DistributionLimits.gradientSpanPercent.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 8);
}

uint64_t DiagramConfiguration.DistributionLimits.lowLimit.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t DiagramConfiguration.DistributionLimits.highLimit.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 32);
}

void __swiftcall DiagramConfiguration.DistributionLimits.init(limitGradientColor:gradientSpanPercent:lowLimit:highLimit:)(HealthVisualization::DiagramConfiguration::DistributionLimits *__return_ptr retstr, HealthVisualization::DiagramConfiguration::Color limitGradientColor, Swift::Double gradientSpanPercent, Swift::Double_optional lowLimit, Swift::Double_optional highLimit)
{
  Swift::Double v5;
  char v6;

  retstr->limitGradientColor = *(_BYTE *)limitGradientColor;
  retstr->gradientSpanPercent = gradientSpanPercent;
  retstr->lowLimit.value = *(Swift::Double *)&lowLimit.is_nil;
  retstr->lowLimit.is_nil = highLimit.is_nil;
  retstr->highLimit.value = v5;
  retstr->highLimit.is_nil = v6 & 1;
}

uint64_t sub_1BCA9A05C()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1BCA9A090 + 4 * byte_1BCAC8FF0[*v0]))(0xD000000000000012, 0x80000001BCAD3690);
}

uint64_t sub_1BCA9A090(uint64_t a1)
{
  return a1 + 1;
}

uint64_t sub_1BCA9A0A8()
{
  return 0x74696D694C776F6CLL;
}

uint64_t sub_1BCA9A0C0()
{
  return 0x696D694C68676968;
}

uint64_t sub_1BCA9A0DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1BCAA7F9C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1BCA9A100()
{
  sub_1BCAA2CE4();
  return sub_1BCAB68D0();
}

uint64_t sub_1BCA9A128()
{
  sub_1BCAA2CE4();
  return sub_1BCAB68DC();
}

uint64_t DiagramConfiguration.DistributionLimits.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char v8;
  uint64_t v9;
  _DWORD v11[2];
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  char v18;
  char v19;
  char v20;

  sub_1BC9ACE04(0, &qword_1EF47A420, (uint64_t (*)(void))sub_1BCAA2CE4, (uint64_t)&type metadata for DiagramConfiguration.DistributionLimits.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v7 = (char *)v11 - v6;
  v8 = *v1;
  v14 = *((_QWORD *)v1 + 2);
  v13 = v1[24];
  v12 = *((_QWORD *)v1 + 4);
  v11[1] = v1[40];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BCAA2CE4();
  sub_1BCAB68B8();
  v20 = v8;
  v19 = 0;
  sub_1BCAA2324();
  v9 = v15;
  sub_1BCAB6774();
  if (!v9)
  {
    v18 = 1;
    sub_1BCAB675C();
    v17 = 2;
    sub_1BCAB6720();
    v16 = 3;
    sub_1BCAB6720();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t DiagramConfiguration.DistributionLimits.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  uint64_t v18;
  char *v19;
  char v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  char v26;
  char v27;
  char v28;
  char v29;

  sub_1BC9ACE04(0, &qword_1EF47A430, (uint64_t (*)(void))sub_1BCAA2CE4, (uint64_t)&type metadata for DiagramConfiguration.DistributionLimits.CodingKeys, MEMORY[0x1E0DED048]);
  v24 = v5;
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v22 - v7;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BCAA2CE4();
  sub_1BCAB68AC();
  if (!v2)
  {
    v9 = v6;
    v28 = 0;
    sub_1BCAA24BC();
    v10 = v24;
    sub_1BCAB66E4();
    v11 = v29;
    v27 = 1;
    sub_1BCAB66CC();
    v13 = v12;
    v26 = 2;
    v14 = sub_1BCAB6690();
    v16 = v15;
    v23 = v14;
    v25 = 3;
    v18 = sub_1BCAB6690();
    v19 = v8;
    v21 = v20;
    (*(void (**)(char *, uint64_t))(v9 + 8))(v19, v10);
    *(_BYTE *)a2 = v11;
    *(_QWORD *)(a2 + 8) = v13;
    *(_QWORD *)(a2 + 16) = v23;
    *(_BYTE *)(a2 + 24) = v16 & 1;
    *(_QWORD *)(a2 + 32) = v18;
    *(_BYTE *)(a2 + 40) = v21 & 1;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_1BCA9A534@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return DiagramConfiguration.DistributionLimits.init(from:)(a1, a2);
}

uint64_t sub_1BCA9A548(_QWORD *a1)
{
  return DiagramConfiguration.DistributionLimits.encode(to:)(a1);
}

void DiagramConfiguration.HeartRateRecovery.pointColor.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

void DiagramConfiguration.HeartRateRecovery.pointRadius.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 1);
}

void DiagramConfiguration.HeartRateRecovery.minuteLineColor.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 2);
}

void DiagramConfiguration.HeartRateRecovery.minuteLineWidth.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 3);
}

HealthVisualization::DiagramConfiguration::HeartRateRecovery __swiftcall DiagramConfiguration.HeartRateRecovery.init(pointColor:pointRadius:minuteLineColor:minuteLineWidth:)(HealthVisualization::DiagramConfiguration::Color pointColor, HealthVisualization::DiagramConfiguration::LineRadius pointRadius, HealthVisualization::DiagramConfiguration::Color minuteLineColor, HealthVisualization::DiagramConfiguration::LineWidth minuteLineWidth)
{
  _BYTE *v4;
  char v5;
  char v6;
  char v7;
  HealthVisualization::DiagramConfiguration::HeartRateRecovery result;

  v5 = *(_BYTE *)pointRadius;
  v6 = *(_BYTE *)minuteLineColor;
  v7 = *(_BYTE *)minuteLineWidth;
  *v4 = *(_BYTE *)pointColor;
  v4[1] = v5;
  v4[2] = v6;
  v4[3] = v7;
  result.pointColor = pointColor;
  return result;
}

uint64_t sub_1BCA9A5B4()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1BCA9A5E8 + 4 * byte_1BCAC8FF4[*v0]))(0x6C6F43746E696F70, 0xEA0000000000726FLL);
}

uint64_t sub_1BCA9A5E8()
{
  return 0x646152746E696F70;
}

uint64_t sub_1BCA9A608()
{
  return 0x694C6574756E696DLL;
}

uint64_t sub_1BCA9A640@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1BCAA8158(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1BCA9A664()
{
  sub_1BCAA2D28();
  return sub_1BCAB68D0();
}

uint64_t sub_1BCA9A68C()
{
  sub_1BCAA2D28();
  return sub_1BCAB68DC();
}

uint64_t DiagramConfiguration.HeartRateRecovery.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char v8;
  int v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  char v19;
  char v20;
  char v21;
  char v22;
  char v23;
  char v24;
  char v25;
  char v26;

  sub_1BC9ACE04(0, &qword_1EF47A438, (uint64_t (*)(void))sub_1BCAA2D28, (uint64_t)&type metadata for DiagramConfiguration.HeartRateRecovery.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v7 = (char *)&v14 - v6;
  v8 = *v1;
  v9 = v1[1];
  v16 = v1[2];
  v17 = v9;
  v15 = v1[3];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BCAA2D28();
  sub_1BCAB68B8();
  v26 = v8;
  v25 = 0;
  sub_1BCAA2324();
  v10 = v18;
  sub_1BCAB6774();
  if (!v10)
  {
    v11 = v15;
    v12 = v16;
    v24 = v17;
    v23 = 1;
    sub_1BCAA29B4();
    sub_1BCAB6774();
    v22 = v12;
    v21 = 2;
    sub_1BCAB6774();
    v20 = v11;
    v19 = 3;
    sub_1BCAA2970();
    sub_1BCAB6774();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t DiagramConfiguration.HeartRateRecovery.init(from:)@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  char v12;
  char v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  char v19;
  char v20;
  char v21;
  char v22;
  char v23;
  unsigned __int8 v24;

  sub_1BC9ACE04(0, &qword_1EF47A448, (uint64_t (*)(void))sub_1BCAA2D28, (uint64_t)&type metadata for DiagramConfiguration.HeartRateRecovery.CodingKeys, MEMORY[0x1E0DED048]);
  v16 = v5;
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v15 - v7;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BCAA2D28();
  sub_1BCAB68AC();
  if (!v2)
  {
    v9 = v6;
    v23 = 0;
    sub_1BCAA24BC();
    v10 = v16;
    sub_1BCAB66E4();
    v11 = v24;
    v21 = 1;
    sub_1BCAA2A80();
    sub_1BCAB66E4();
    HIDWORD(v15) = v11;
    LOBYTE(v11) = v22;
    v19 = 2;
    sub_1BCAB66E4();
    v12 = v11;
    LOBYTE(v11) = v20;
    v17 = 3;
    sub_1BCAA2A3C();
    sub_1BCAB66E4();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v8, v10);
    v14 = v18;
    *a2 = BYTE4(v15);
    a2[1] = v12;
    a2[2] = v11;
    a2[3] = v14;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_1BCA9AADC@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return DiagramConfiguration.HeartRateRecovery.init(from:)(a1, a2);
}

uint64_t sub_1BCA9AAF0(_QWORD *a1)
{
  return DiagramConfiguration.HeartRateRecovery.encode(to:)(a1);
}

void DiagramConfiguration.Axis.horizontal.getter(uint64_t a1@<X8>)
{
  int *v1;
  int v2;

  v2 = *v1;
  *(_WORD *)(a1 + 4) = *((_WORD *)v1 + 2);
  *(_DWORD *)a1 = v2;
  *(_BYTE *)(a1 + 6) = *((_BYTE *)v1 + 6);
}

void DiagramConfiguration.Axis.vertical.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  int v4;

  v4 = *(_DWORD *)(v1 + 7);
  v3 = v1 + 7;
  v2 = v4;
  LOWORD(v4) = *(_WORD *)(v3 + 4);
  *(_DWORD *)a1 = v2;
  *(_WORD *)(a1 + 4) = v4;
  *(_BYTE *)(a1 + 6) = *(_BYTE *)(v3 + 6);
}

uint64_t sub_1BCA9AB50()
{
  _BYTE *v0;

  if (*v0)
    return 0x6C61636974726576;
  else
    return 0x746E6F7A69726F68;
}

uint64_t sub_1BCA9AB90@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1BCAA8374(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1BCA9ABB4()
{
  sub_1BCAA2D6C();
  return sub_1BCAB68D0();
}

uint64_t sub_1BCA9ABDC()
{
  sub_1BCAA2D6C();
  return sub_1BCAB68DC();
}

uint64_t DiagramConfiguration.Axis.encode(to:)(_QWORD *a1)
{
  int *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char v7;
  __int16 v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  __int16 v20;
  char v21;
  char v22;

  sub_1BC9ACE04(0, &qword_1ED6C6F38, (uint64_t (*)(void))sub_1BCAA2D6C, (uint64_t)&type metadata for DiagramConfiguration.Axis.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v4 = v3;
  v17 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v14 - v5;
  v7 = *((_BYTE *)v1 + 6);
  v8 = *((_WORD *)v1 + 2);
  v9 = *v1;
  v10 = *((unsigned __int8 *)v1 + 13);
  v14 = *(unsigned __int16 *)((char *)v1 + 11);
  v15 = v10;
  v16 = *(unsigned int *)((char *)v1 + 7);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BCAA2D6C();
  sub_1BCAB68B8();
  v21 = v7;
  v20 = v8;
  v19 = v9;
  v22 = 0;
  sub_1BCAA2DB0();
  v11 = v18;
  sub_1BCAB6738();
  if (v11)
    return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v6, v4);
  v13 = v17;
  v21 = (v16 | ((unint64_t)(v14 | (v15 << 16)) << 32)) >> 48;
  v20 = (v16 | ((unint64_t)(v14 | (v15 << 16)) << 32)) >> 32;
  v19 = v16;
  v22 = 1;
  sub_1BCAB6738();
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v6, v4);
}

uint64_t DiagramConfiguration.Axis.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  int v10;
  unint64_t v12;
  unsigned int v13;
  unsigned __int16 v14;
  unsigned __int8 v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unsigned __int16 v21;
  unsigned __int8 v22;
  char v23;

  v19 = a2;
  sub_1BC9ACE04(0, &qword_1ED6C7508, (uint64_t (*)(void))sub_1BCAA2D6C, (uint64_t)&type metadata for DiagramConfiguration.Axis.CodingKeys, MEMORY[0x1E0DED048]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v16 - v7;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BCAA2D6C();
  sub_1BCAB68AC();
  if (!v2)
  {
    v9 = v19;
    v23 = 0;
    sub_1BCAA2DF4();
    sub_1BCAB66A8();
    v17 = v22;
    v10 = v21;
    v18 = v20;
    v23 = 1;
    sub_1BCAB66A8();
    v12 = v18 | ((unint64_t)(v10 | (v17 << 16)) << 32);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v13 = v20;
    v14 = v21;
    v15 = v22;
    *(_BYTE *)(v9 + 6) = BYTE6(v12);
    *(_WORD *)(v9 + 4) = WORD2(v12);
    *(_DWORD *)v9 = v12;
    *(_BYTE *)(v9 + 13) = v15;
    *(_WORD *)(v9 + 11) = v14;
    *(_DWORD *)(v9 + 7) = v13;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_1BCA9AF9C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return DiagramConfiguration.Axis.init(from:)(a1, a2);
}

uint64_t sub_1BCA9AFB0(_QWORD *a1)
{
  return DiagramConfiguration.Axis.encode(to:)(a1);
}

void DiagramConfiguration.AxisProperties.axisType.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

void DiagramConfiguration.AxisProperties.labelTextAttributes.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 1);
}

void DiagramConfiguration.AxisProperties.labelColor.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 2);
}

void DiagramConfiguration.AxisProperties.gridLineColor.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 3);
}

void DiagramConfiguration.AxisProperties.gridLineWidth.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 4);
}

void DiagramConfiguration.AxisProperties.majorTickLength.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 5);
}

void DiagramConfiguration.AxisProperties.minorTickLength.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 6);
}

uint64_t sub_1BCA9B020(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1BCA9B054 + 4 * byte_1BCAC8FF8[a1]))(0x6570795473697861, 0xE800000000000000);
}

unint64_t sub_1BCA9B054()
{
  return 0xD000000000000013;
}

uint64_t sub_1BCA9B070()
{
  return 0x6C6F436C6562616CLL;
}

uint64_t sub_1BCA9B08C()
{
  return 0x656E694C64697267;
}

uint64_t sub_1BCA9B0C0()
{
  return 0x636954726F6A616DLL;
}

uint64_t sub_1BCA9B0F0()
{
  unsigned __int8 *v0;

  return sub_1BCA9B020(*v0);
}

uint64_t sub_1BCA9B0F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1BCAA8470(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1BCA9B11C()
{
  sub_1BCAA2E38();
  return sub_1BCAB68D0();
}

uint64_t sub_1BCA9B144()
{
  sub_1BCAA2E38();
  return sub_1BCAB68DC();
}

uint64_t DiagramConfiguration.AxisProperties.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  char v13;
  char v14;
  char v15;
  char v16;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  char v26;
  char v27;
  char v28;
  char v29;
  char v30;
  char v31;
  char v32;
  char v33;
  char v34;
  char v35;
  char v36;
  char v37;
  char v38;
  char v39;

  sub_1BC9ACE04(0, &qword_1ED6C6F28, (uint64_t (*)(void))sub_1BCAA2E38, (uint64_t)&type metadata for DiagramConfiguration.AxisProperties.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v7 = (char *)&v18 - v6;
  v8 = *v1;
  v9 = v1[1];
  v23 = v1[2];
  v24 = v9;
  v10 = v1[3];
  v21 = v1[4];
  v22 = v10;
  v11 = v1[5];
  v19 = v1[6];
  v20 = v11;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BCAA2E38();
  sub_1BCAB68B8();
  v39 = v8;
  v38 = 0;
  sub_1BCAA2E7C();
  v12 = v25;
  sub_1BCAB6774();
  if (!v12)
  {
    v14 = v22;
    v13 = v23;
    v15 = v20;
    v16 = v21;
    v37 = v24;
    v36 = 1;
    sub_1BCAA20C0();
    sub_1BCAB6774();
    v35 = v13;
    v34 = 2;
    sub_1BCAA2324();
    sub_1BCAB6774();
    v33 = v14;
    v32 = 3;
    sub_1BCAB6774();
    v31 = v16;
    v30 = 4;
    sub_1BCAA2EC0();
    sub_1BCAB6774();
    v29 = v15;
    v28 = 5;
    sub_1BCAA2F04();
    sub_1BCAB6774();
    v27 = v19;
    v26 = 6;
    sub_1BCAB6774();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t DiagramConfiguration.AxisProperties.init(from:)@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  int v14;
  int v15;
  int v16;
  int v17;
  char v19;
  int v20;
  int v21;
  int v22;
  int v23;
  _QWORD *v24;
  char v25;
  char v26;
  char v27;
  char v28;
  char v29;
  unsigned __int8 v30;
  char v31;
  unsigned __int8 v32;
  char v33;
  unsigned __int8 v34;
  char v35;
  unsigned __int8 v36;
  char v37;
  char v38;

  sub_1BC9ACE04(0, &qword_1ED6C7500, (uint64_t (*)(void))sub_1BCAA2E38, (uint64_t)&type metadata for DiagramConfiguration.AxisProperties.CodingKeys, MEMORY[0x1E0DED048]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v20 - v8;
  v10 = a1[3];
  v24 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v10);
  sub_1BCAA2E38();
  sub_1BCAB68AC();
  if (!v2)
  {
    v11 = v7;
    v37 = 0;
    sub_1BCAA2F48();
    v12 = v6;
    sub_1BCAB66E4();
    v13 = v38;
    v35 = 1;
    sub_1BCAA2148();
    sub_1BCAB66E4();
    v14 = v36;
    v33 = 2;
    sub_1BCAA24BC();
    sub_1BCAB66E4();
    v23 = v14;
    v15 = v34;
    v31 = 3;
    sub_1BCAB66E4();
    v22 = v15;
    v16 = v32;
    v29 = 4;
    sub_1BCAA2F8C();
    sub_1BCAB66E4();
    v21 = v16;
    v17 = v30;
    v27 = 5;
    sub_1BCAA2FD0();
    sub_1BCAB66E4();
    v20 = v17;
    LOBYTE(v17) = v28;
    v25 = 6;
    sub_1BCAB66E4();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v9, v12);
    v19 = v26;
    *a2 = v13;
    a2[1] = v23;
    a2[2] = v22;
    a2[3] = v21;
    a2[4] = v20;
    a2[5] = v17;
    a2[6] = v19;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
}

uint64_t sub_1BCA9B74C@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return DiagramConfiguration.AxisProperties.init(from:)(a1, a2);
}

uint64_t sub_1BCA9B760(_QWORD *a1)
{
  return DiagramConfiguration.AxisProperties.encode(to:)(a1);
}

HealthVisualization::DiagramConfiguration::AxisTickLength_optional __swiftcall DiagramConfiguration.AxisTickLength.init(rawValue:)(Swift::String rawValue)
{
  char *v1;

  return (HealthVisualization::DiagramConfiguration::AxisTickLength_optional)sub_1BCA9C878(v1);
}

unint64_t DiagramConfiguration.AxisTickLength.rawValue.getter()
{
  _BYTE *v0;
  unint64_t v1;

  v1 = 0x676E654C6F72657ALL;
  if (*v0 == 1)
    v1 = 0xD000000000000012;
  if (*v0)
    return v1;
  else
    return 0xD000000000000012;
}

uint64_t sub_1BCA9B7E4()
{
  return sub_1BCA93170();
}

uint64_t sub_1BCA9B7EC()
{
  sub_1BCAB5F40();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1BCA9B86C()
{
  return sub_1BCA93DA0();
}

HealthVisualization::DiagramConfiguration::AxisTickLength_optional sub_1BCA9B874(Swift::String *a1)
{
  return DiagramConfiguration.AxisTickLength.init(rawValue:)(*a1);
}

void sub_1BCA9B880(unint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  unint64_t v7;

  v2 = *v1;
  v3 = 0x80000001BCACDD90;
  v4 = 0x80000001BCACDDB0;
  v5 = 0xD000000000000012;
  if (v2 != 1)
  {
    v5 = 0x676E654C6F72657ALL;
    v4 = 0xEA00000000006874;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0xD000000000000012;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_1BCA9B8EC()
{
  sub_1BCAA8DB0();
  return sub_1BCAB5FE8();
}

uint64_t sub_1BCA9B948()
{
  sub_1BCAA8DB0();
  return sub_1BCAB5FD0();
}

uint64_t sub_1BCA9B994(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1BC99AAD0(*a1, *a2);
}

HealthVisualization::DiagramConfiguration::AxisLineWidth_optional __swiftcall DiagramConfiguration.AxisLineWidth.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  uint64_t v3;
  HealthVisualization::DiagramConfiguration::AxisLineWidth_optional result;
  char v5;

  v2 = v1;
  v3 = sub_1BCAB6654();
  result.value = swift_bridgeObjectRelease();
  if (v3 == 1)
    v5 = 1;
  else
    v5 = 2;
  if (!v3)
    v5 = 0;
  *v2 = v5;
  return result;
}

uint64_t DiagramConfiguration.AxisLineWidth.rawValue.getter()
{
  _BYTE *v0;

  if (*v0)
    return 0x74646957666C6168;
  else
    return 0x57746C7561666564;
}

uint64_t sub_1BCA9BA48()
{
  sub_1BCAB6870();
  sub_1BCAB5F40();
  swift_bridgeObjectRelease();
  return sub_1BCAB6894();
}

uint64_t sub_1BCA9BAD4()
{
  sub_1BCAB5F40();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1BCA9BB3C()
{
  sub_1BCAB6870();
  sub_1BCAB5F40();
  swift_bridgeObjectRelease();
  return sub_1BCAB6894();
}

HealthVisualization::DiagramConfiguration::AxisLineWidth_optional sub_1BCA9BBC4(Swift::String *a1)
{
  return DiagramConfiguration.AxisLineWidth.init(rawValue:)(*a1);
}

void sub_1BCA9BBD0(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 0x57746C7561666564;
  if (*v1)
    v2 = 0x74646957666C6168;
  v3 = 0xEC00000068746469;
  if (*v1)
    v3 = 0xE900000000000068;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_1BCA9BC1C()
{
  sub_1BCAA8D6C();
  return sub_1BCAB5FE8();
}

uint64_t sub_1BCA9BC78()
{
  sub_1BCAA8D6C();
  return sub_1BCAB5FD0();
}

uint64_t sub_1BCA9BCC4(char *a1, char *a2)
{
  return sub_1BC99ABD4(*a1, *a2);
}

HealthVisualization::DiagramConfiguration::AxisType_optional __swiftcall DiagramConfiguration.AxisType.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  unint64_t v3;
  HealthVisualization::DiagramConfiguration::AxisType_optional result;
  char v5;

  v2 = v1;
  v3 = sub_1BCAB6654();
  result.value = swift_bridgeObjectRelease();
  v5 = 16;
  if (v3 < 0x10)
    v5 = v3;
  *v2 = v5;
  return result;
}

uint64_t DiagramConfiguration.AxisType.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1BCA9BD64 + 4 * byte_1BCAC8FFF[*v0]))(0x44746C7561666564, 0xEF73697841657461);
}

unint64_t sub_1BCA9BD64()
{
  return 0xD000000000000014;
}

uint64_t sub_1BCA9BEC8()
{
  return 0x78416D6F74737563;
}

uint64_t sub_1BCA9BEE4(uint64_t a1, uint64_t a2)
{
  return sub_1BCA9DD54(a1, a2, (void (*)(uint64_t))DiagramConfiguration.AxisType.rawValue.getter);
}

uint64_t sub_1BCA9BEF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1BCA9DDC8(a1, a2, a3, (void (*)(void))DiagramConfiguration.AxisType.rawValue.getter);
}

uint64_t sub_1BCA9BEFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1BCA9DE24(a1, a2, a3, (void (*)(uint64_t))DiagramConfiguration.AxisType.rawValue.getter);
}

HealthVisualization::DiagramConfiguration::AxisType_optional sub_1BCA9BF08(Swift::String *a1)
{
  return DiagramConfiguration.AxisType.init(rawValue:)(*a1);
}

uint64_t sub_1BCA9BF14@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = DiagramConfiguration.AxisType.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1BCA9BF38()
{
  sub_1BCAA8D28();
  return sub_1BCAB5FE8();
}

uint64_t sub_1BCA9BF94()
{
  sub_1BCAA8D28();
  return sub_1BCAB5FD0();
}

uint64_t sub_1BCA9BFE0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1BC99A07C(*a1, *a2);
}

HealthVisualization::DiagramConfiguration::CornerSize_optional __swiftcall DiagramConfiguration.CornerSize.init(rawValue:)(Swift::String rawValue)
{
  char *v1;

  return (HealthVisualization::DiagramConfiguration::CornerSize_optional)sub_1BCA9C878(v1);
}

unint64_t DiagramConfiguration.CornerSize.rawValue.getter()
{
  _BYTE *v0;
  unint64_t v1;

  v1 = 0x6E726F436F72657ALL;
  if (*v0 != 1)
    v1 = 0xD000000000000012;
  if (*v0)
    return v1;
  else
    return 0xD000000000000011;
}

uint64_t sub_1BCA9C060()
{
  return sub_1BCA92FBC();
}

uint64_t sub_1BCA9C068()
{
  sub_1BCAB5F40();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1BCA9C0F0()
{
  return sub_1BCA93BF4();
}

HealthVisualization::DiagramConfiguration::CornerSize_optional sub_1BCA9C0F8(Swift::String *a1)
{
  return DiagramConfiguration.CornerSize.init(rawValue:)(*a1);
}

void sub_1BCA9C104(unint64_t *a1@<X8>)
{
  _BYTE *v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v2 = 0xD000000000000011;
  v3 = 0xEE00657A69537265;
  v4 = 0x6E726F436F72657ALL;
  if (*v1 != 1)
  {
    v4 = 0xD000000000000012;
    v3 = 0x80000001BCACDFD0;
  }
  if (*v1)
  {
    v2 = v4;
    v5 = v3;
  }
  else
  {
    v5 = 0x80000001BCACDFA0;
  }
  *a1 = v2;
  a1[1] = v5;
}

uint64_t sub_1BCA9C170()
{
  sub_1BCAA8CE4();
  return sub_1BCAB5FE8();
}

uint64_t sub_1BCA9C1CC()
{
  sub_1BCAA8CE4();
  return sub_1BCAB5FD0();
}

uint64_t sub_1BCA9C218(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1BC99A29C(*a1, *a2);
}

uint64_t sub_1BCA9C224()
{
  uint64_t v0;

  return swift_deallocObject();
}

HealthVisualization::DiagramConfiguration::Color_optional __swiftcall DiagramConfiguration.Color.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  uint64_t v3;
  HealthVisualization::DiagramConfiguration::Color_optional result;
  char v5;
  char v6;

  v2 = v1;
  v3 = sub_1BCAB67EC();
  result.value = swift_bridgeObjectRelease();
  v5 = 0;
  v6 = 17;
  switch(v3)
  {
    case 0:
      goto LABEL_19;
    case 1:
      v5 = 1;
      goto LABEL_19;
    case 2:
      v5 = 2;
      goto LABEL_19;
    case 3:
      v5 = 3;
      goto LABEL_19;
    case 4:
      v5 = 4;
      goto LABEL_19;
    case 5:
      v5 = 5;
      goto LABEL_19;
    case 6:
      v5 = 6;
      goto LABEL_19;
    case 7:
      v5 = 7;
      goto LABEL_19;
    case 8:
      v5 = 8;
      goto LABEL_19;
    case 9:
      v5 = 9;
      goto LABEL_19;
    case 10:
      v5 = 10;
      goto LABEL_19;
    case 11:
      v5 = 11;
      goto LABEL_19;
    case 12:
      v5 = 12;
      goto LABEL_19;
    case 13:
      v5 = 13;
      goto LABEL_19;
    case 14:
      v5 = 14;
      goto LABEL_19;
    case 15:
      v5 = 15;
      goto LABEL_19;
    case 16:
      v5 = 16;
LABEL_19:
      v6 = v5;
      break;
    case 17:
      break;
    case 18:
      v6 = 18;
      break;
    case 19:
      v6 = 19;
      break;
    case 20:
      v6 = 20;
      break;
    case 21:
      v6 = 21;
      break;
    case 22:
      v6 = 22;
      break;
    case 23:
      v6 = 23;
      break;
    case 24:
      v6 = 24;
      break;
    case 25:
      v6 = 25;
      break;
    case 26:
      v6 = 26;
      break;
    case 27:
      v6 = 27;
      break;
    case 28:
      v6 = 28;
      break;
    case 29:
      v6 = 29;
      break;
    case 30:
      v6 = 30;
      break;
    case 31:
      v6 = 31;
      break;
    case 32:
      v6 = 32;
      break;
    case 33:
      v6 = 33;
      break;
    case 34:
      v6 = 34;
      break;
    default:
      v6 = 35;
      break;
  }
  *v2 = v6;
  return result;
}

uint64_t DiagramConfiguration.Color.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1BCA9C41C + 4 * byte_1BCAC9032[*v0]))(0x42746C7561666564, 0xEF726F6C6F437261);
}

unint64_t sub_1BCA9C41C()
{
  return 0xD000000000000010;
}

void sub_1BCA9C740()
{
  JUMPOUT(0x1BCA9C758);
}

uint64_t sub_1BCA9C764(uint64_t a1, uint64_t a2)
{
  return sub_1BCA9DD54(a1, a2, (void (*)(uint64_t))DiagramConfiguration.Color.rawValue.getter);
}

uint64_t sub_1BCA9C770(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1BCA9DDC8(a1, a2, a3, (void (*)(void))DiagramConfiguration.Color.rawValue.getter);
}

uint64_t sub_1BCA9C77C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1BCA9DE24(a1, a2, a3, (void (*)(uint64_t))DiagramConfiguration.Color.rawValue.getter);
}

HealthVisualization::DiagramConfiguration::Color_optional sub_1BCA9C788(Swift::String *a1)
{
  return DiagramConfiguration.Color.init(rawValue:)(*a1);
}

uint64_t sub_1BCA9C794@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = DiagramConfiguration.Color.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1BCA9C7B8()
{
  sub_1BCAA8CA0();
  return sub_1BCAB5FE8();
}

uint64_t sub_1BCA9C814()
{
  sub_1BCAA8CA0();
  return sub_1BCAB5FD0();
}

uint64_t sub_1BCA9C860(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1BC99A1F8(*a1, *a2);
}

HealthVisualization::DiagramConfiguration::AxisInset_optional __swiftcall DiagramConfiguration.AxisInset.init(rawValue:)(Swift::String rawValue)
{
  char *v1;

  return (HealthVisualization::DiagramConfiguration::AxisInset_optional)sub_1BCA9C878(v1);
}

uint64_t sub_1BCA9C878@<X0>(char *a1@<X8>)
{
  unint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_1BCAB6654();
  result = swift_bridgeObjectRelease();
  v4 = 3;
  if (v2 < 3)
    v4 = v2;
  *a1 = v4;
  return result;
}

uint64_t DiagramConfiguration.AxisInset.rawValue.getter()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x65736E4965646977;
  if (*v0 != 1)
    v1 = 0x7465736E496F6ELL;
  if (*v0)
    return v1;
  else
    return 0x49746C7561666564;
}

uint64_t sub_1BCA9C934(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1BC999DE8(*a1, *a2);
}

uint64_t sub_1BCA9C940()
{
  sub_1BCAB6870();
  sub_1BCAB5F40();
  swift_bridgeObjectRelease();
  return sub_1BCAB6894();
}

uint64_t sub_1BCA9C9EC()
{
  sub_1BCAB5F40();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1BCA9CA74()
{
  sub_1BCAB6870();
  sub_1BCAB5F40();
  swift_bridgeObjectRelease();
  return sub_1BCAB6894();
}

HealthVisualization::DiagramConfiguration::AxisInset_optional sub_1BCA9CB1C(Swift::String *a1)
{
  return DiagramConfiguration.AxisInset.init(rawValue:)(*a1);
}

void sub_1BCA9CB28(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xEC0000007465736ELL;
  v4 = 0xE900000000000074;
  v5 = 0x65736E4965646977;
  if (v2 != 1)
  {
    v5 = 0x7465736E496F6ELL;
    v4 = 0xE700000000000000;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0x49746C7561666564;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_1BCA9CB94()
{
  sub_1BCAA8C5C();
  return sub_1BCAB5FD0();
}

uint64_t sub_1BCA9CBE0()
{
  sub_1BCAA8C5C();
  return sub_1BCAB5FE8();
}

HealthVisualization::DiagramConfiguration::Insets_optional __swiftcall DiagramConfiguration.Insets.init(rawValue:)(Swift::String rawValue)
{
  char *v1;

  return (HealthVisualization::DiagramConfiguration::Insets_optional)sub_1BCA9DF78(v1);
}

uint64_t DiagramConfiguration.Insets.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1BCA9CC84 + 4 * byte_1BCAC9055[*v0]))(0xD000000000000019, 0x80000001BCACE410);
}

unint64_t sub_1BCA9CC84()
{
  return 0xD000000000000010;
}

uint64_t sub_1BCA9CCA0@<X0>(uint64_t a1@<X8>)
{
  return a1 + 1;
}

uint64_t sub_1BCA9CCB8()
{
  return 0x65736E496F72657ALL;
}

void sub_1BCA9CCD4(char *a1)
{
  sub_1BC99A088(*a1);
}

void sub_1BCA9CCE0()
{
  char *v0;

  sub_1BCA933B0(*v0);
}

void sub_1BCA9CCE8(uint64_t a1)
{
  char *v1;

  sub_1BCA935A8(a1, *v1);
}

void sub_1BCA9CCF0(uint64_t a1)
{
  char *v1;

  sub_1BCA93FD4(a1, *v1);
}

HealthVisualization::DiagramConfiguration::Insets_optional sub_1BCA9CCF8(Swift::String *a1)
{
  return DiagramConfiguration.Insets.init(rawValue:)(*a1);
}

uint64_t sub_1BCA9CD04@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = DiagramConfiguration.Insets.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1BCA9CD28()
{
  sub_1BCAA8C18();
  return sub_1BCAB5FD0();
}

uint64_t sub_1BCA9CD74()
{
  sub_1BCAA8C18();
  return sub_1BCAB5FE8();
}

uint64_t sub_1BCA9CDD0()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x6C616D69636564;
  if (*v0 != 1)
    v1 = 0x746E6563726570;
  if (*v0)
    return v1;
  else
    return 0x647261646E617473;
}

uint64_t sub_1BCA9CE2C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1BCAA87D0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1BCA9CE50()
{
  sub_1BCAA30E0();
  return sub_1BCAB68D0();
}

uint64_t sub_1BCA9CE78()
{
  sub_1BCAA30E0();
  return sub_1BCAB68DC();
}

uint64_t sub_1BCA9CEA0()
{
  return 0x6F69736963657270;
}

uint64_t sub_1BCA9CEBC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x6F69736963657270 && a2 == 0xE90000000000006ELL)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_1BCAB67C8();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_1BCA9CF5C()
{
  sub_1BCAA3058();
  return sub_1BCAB68D0();
}

uint64_t sub_1BCA9CF84()
{
  sub_1BCAA3058();
  return sub_1BCAB68DC();
}

uint64_t sub_1BCA9CFAC()
{
  sub_1BCAA3014();
  return sub_1BCAB68D0();
}

uint64_t sub_1BCA9CFD4()
{
  sub_1BCAA3014();
  return sub_1BCAB68DC();
}

uint64_t sub_1BCA9CFFC()
{
  sub_1BCAA309C();
  return sub_1BCAB68D0();
}

uint64_t sub_1BCA9D024()
{
  sub_1BCAA309C();
  return sub_1BCAB68DC();
}

uint64_t DiagramConfiguration.ValueFormatter.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  int v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  char v34;
  char v35;

  v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170];
  sub_1BC9ACE04(0, &qword_1ED6C4720, (uint64_t (*)(void))sub_1BCAA3014, (uint64_t)&type metadata for DiagramConfiguration.ValueFormatter.PercentCodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v27 = *(_QWORD *)(v4 - 8);
  v28 = v4;
  MEMORY[0x1E0C80A78](v4);
  v26 = (char *)&v22 - v5;
  sub_1BC9ACE04(0, &qword_1ED6C4718, (uint64_t (*)(void))sub_1BCAA3058, (uint64_t)&type metadata for DiagramConfiguration.ValueFormatter.DecimalCodingKeys, v3);
  v30 = *(_QWORD *)(v6 - 8);
  v31 = v6;
  MEMORY[0x1E0C80A78](v6);
  v29 = (char *)&v22 - v7;
  sub_1BC9ACE04(0, &qword_1ED6C4728, (uint64_t (*)(void))sub_1BCAA309C, (uint64_t)&type metadata for DiagramConfiguration.ValueFormatter.StandardCodingKeys, v3);
  v24 = *(_QWORD *)(v8 - 8);
  v25 = v8;
  MEMORY[0x1E0C80A78](v8);
  v23 = (char *)&v22 - v9;
  sub_1BC9ACE04(0, &qword_1ED6C4710, (uint64_t (*)(void))sub_1BCAA30E0, (uint64_t)&type metadata for DiagramConfiguration.ValueFormatter.CodingKeys, v3);
  v11 = v10;
  v32 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v22 - v12;
  v14 = *v1;
  v15 = *((unsigned __int8 *)v1 + 8);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BCAA30E0();
  sub_1BCAB68B8();
  if (v15 == 1)
  {
    if (v14)
    {
      v35 = 2;
      sub_1BCAA3014();
      v16 = v26;
      sub_1BCAB66FC();
      v18 = v27;
      v17 = v28;
    }
    else
    {
      v33 = 0;
      sub_1BCAA309C();
      v16 = v23;
      sub_1BCAB66FC();
      v18 = v24;
      v17 = v25;
    }
    (*(void (**)(char *, uint64_t))(v18 + 8))(v16, v17);
  }
  else
  {
    v34 = 1;
    sub_1BCAA3058();
    v19 = v29;
    sub_1BCAB66FC();
    v20 = v31;
    sub_1BCAB6768();
    (*(void (**)(char *, uint64_t))(v30 + 8))(v19, v20);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v13, v11);
}

uint64_t DiagramConfiguration.ValueFormatter.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t *v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  char *v42;
  char *v43;
  uint64_t v44;
  char v45;
  char v46;
  char v47;

  v41 = a2;
  v3 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048];
  sub_1BC9ACE04(0, &qword_1ED6C61A8, (uint64_t (*)(void))sub_1BCAA3014, (uint64_t)&type metadata for DiagramConfiguration.ValueFormatter.PercentCodingKeys, MEMORY[0x1E0DED048]);
  v40 = v4;
  v37 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v43 = (char *)&v33 - v5;
  sub_1BC9ACE04(0, &qword_1ED6C61A0, (uint64_t (*)(void))sub_1BCAA3058, (uint64_t)&type metadata for DiagramConfiguration.ValueFormatter.DecimalCodingKeys, v3);
  v7 = *(_QWORD *)(v6 - 8);
  v38 = v6;
  v39 = v7;
  MEMORY[0x1E0C80A78](v6);
  v42 = (char *)&v33 - v8;
  sub_1BC9ACE04(0, &qword_1ED6C61B0, (uint64_t (*)(void))sub_1BCAA309C, (uint64_t)&type metadata for DiagramConfiguration.ValueFormatter.StandardCodingKeys, v3);
  v35 = *(_QWORD *)(v9 - 8);
  v36 = v9;
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v33 - v10;
  sub_1BC9ACE04(0, &qword_1ED6C6198, (uint64_t (*)(void))sub_1BCAA30E0, (uint64_t)&type metadata for DiagramConfiguration.ValueFormatter.CodingKeys, v3);
  v13 = v12;
  v14 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v16 = (char *)&v33 - v15;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BCAA30E0();
  v17 = v44;
  sub_1BCAB68AC();
  if (!v17)
  {
    v19 = v42;
    v18 = v43;
    v44 = v14;
    v34 = a1;
    v20 = sub_1BCAB66F0();
    v21 = v16;
    if (*(_QWORD *)(v20 + 16) == 1)
    {
      if (*(_BYTE *)(v20 + 32))
      {
        if (*(_BYTE *)(v20 + 32) == 1)
        {
          v46 = 1;
          sub_1BCAA3058();
          sub_1BCAB6660();
          v22 = v38;
          v23 = sub_1BCAB66D8();
          v24 = v44;
          v31 = v23;
          (*(void (**)(char *, uint64_t))(v39 + 8))(v19, v22);
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v24 + 8))(v21, v13);
          v32 = 0;
          goto LABEL_16;
        }
        v47 = 2;
        sub_1BCAA3014();
        sub_1BCAB6660();
        (*(void (**)(char *, uint64_t))(v37 + 8))(v18, v40);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v44 + 8))(v16, v13);
        v31 = 1;
      }
      else
      {
        v45 = 0;
        sub_1BCAA309C();
        sub_1BCAB6660();
        (*(void (**)(char *, uint64_t))(v35 + 8))(v11, v36);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v44 + 8))(v16, v13);
        v31 = 0;
      }
      v32 = 1;
LABEL_16:
      v30 = v41;
      *v41 = v31;
      *((_BYTE *)v30 + 8) = v32;
      v28 = (uint64_t)v34;
      return __swift_destroy_boxed_opaque_existential_1(v28);
    }
    v25 = sub_1BCAB6510();
    swift_allocError();
    v27 = v26;
    sub_1BCAA3124();
    *v27 = &type metadata for DiagramConfiguration.ValueFormatter;
    sub_1BCAB666C();
    sub_1BCAB64F8();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v25 - 8) + 104))(v27, *MEMORY[0x1E0DEC450], v25);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v44 + 8))(v16, v13);
    a1 = v34;
  }
  v28 = (uint64_t)a1;
  return __swift_destroy_boxed_opaque_existential_1(v28);
}

uint64_t sub_1BCA9D7C4@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return DiagramConfiguration.ValueFormatter.init(from:)(a1, a2);
}

uint64_t sub_1BCA9D7D8(_QWORD *a1)
{
  return DiagramConfiguration.ValueFormatter.encode(to:)(a1);
}

uint64_t sub_1BCA9D7EC(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *(unsigned __int8 *)(a2 + 8);
  v3 = (*(_QWORD *)a1 == *(_QWORD *)a2) & ~v2;
  if (*(_QWORD *)a2)
    v4 = *(unsigned __int8 *)(a2 + 8);
  else
    v4 = 0;
  if (*(_QWORD *)a2)
    v2 = 0;
  if (*(_QWORD *)a1)
    v5 = v4;
  else
    v5 = v2;
  if (*(_BYTE *)(a1 + 8) == 1)
    return v5;
  else
    return v3;
}

uint64_t sub_1BCA9D828(double a1)
{
  void *v2;
  id v3;
  id v4;
  uint64_t inited;
  void *v6;
  uint64_t v7;
  void **v8;
  void *v9;
  id v10;
  id v11;
  id v12;
  Class isa;
  uint64_t v14;
  void *v15;
  id v16;
  unint64_t v17;
  uint64_t result;

  v2 = (void *)sub_1BCAB5EE0();
  v3 = objc_msgSend((id)objc_opt_self(), sel_fontWithName_size_, v2, a1);

  if (v3)
  {
    v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC1288]), sel_init);
    objc_msgSend(v4, sel_setLineHeightMultiple_, 0.8);
    objc_msgSend(v4, sel_setLineSpacing_, 0.0);
    sub_1BCA5F17C();
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1BCACC160;
    v6 = (void *)*MEMORY[0x1E0DC1138];
    *(_QWORD *)(inited + 32) = *MEMORY[0x1E0DC1138];
    v7 = sub_1BC9A649C(0, (unint64_t *)&qword_1ED6C6908);
    v8 = (void **)MEMORY[0x1E0DC1140];
    *(_QWORD *)(inited + 40) = v3;
    v9 = *v8;
    *(_QWORD *)(inited + 64) = v7;
    *(_QWORD *)(inited + 72) = v9;
    v10 = v6;
    v11 = v3;
    v12 = v9;
    isa = DiagramConfiguration.Color.toColor()().super.isa;
    v14 = sub_1BC9A649C(0, (unint64_t *)&qword_1ED6C5B20);
    *(_QWORD *)(inited + 80) = isa;
    v15 = (void *)*MEMORY[0x1E0DC1178];
    *(_QWORD *)(inited + 104) = v14;
    *(_QWORD *)(inited + 112) = v15;
    *(_QWORD *)(inited + 144) = sub_1BC9A649C(0, &qword_1EF47A5F0);
    *(_QWORD *)(inited + 120) = v4;
    v16 = v15;
    v17 = sub_1BCA925B4(inited);

    return v17;
  }
  else
  {
    result = sub_1BCAB65C4();
    __break(1u);
  }
  return result;
}

HealthVisualization::DiagramConfiguration::TextAttributes_optional __swiftcall DiagramConfiguration.TextAttributes.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  uint64_t v3;
  HealthVisualization::DiagramConfiguration::TextAttributes_optional result;
  char v5;
  char v6;

  v2 = v1;
  v3 = sub_1BCAB67EC();
  result.value = swift_bridgeObjectRelease();
  v5 = 0;
  v6 = 7;
  switch(v3)
  {
    case 0:
      goto LABEL_9;
    case 1:
      v5 = 1;
      goto LABEL_9;
    case 2:
      v5 = 2;
      goto LABEL_9;
    case 3:
      v5 = 3;
      goto LABEL_9;
    case 4:
      v5 = 4;
      goto LABEL_9;
    case 5:
      v5 = 5;
      goto LABEL_9;
    case 6:
      v5 = 6;
LABEL_9:
      v6 = v5;
      break;
    case 7:
      break;
    case 8:
      v6 = 8;
      break;
    case 9:
      v6 = 9;
      break;
    case 10:
      v6 = 10;
      break;
    case 11:
      v6 = 11;
      break;
    case 12:
      v6 = 12;
      break;
    case 13:
      v6 = 13;
      break;
    case 14:
      v6 = 14;
      break;
    case 15:
      v6 = 15;
      break;
    case 16:
      v6 = 16;
      break;
    case 17:
      v6 = 17;
      break;
    case 18:
      v6 = 18;
      break;
    case 19:
      v6 = 19;
      break;
    case 20:
      v6 = 20;
      break;
    case 21:
      v6 = 21;
      break;
    case 22:
      v6 = 22;
      break;
    case 23:
      v6 = 23;
      break;
    case 24:
      v6 = 24;
      break;
    default:
      v6 = 25;
      break;
  }
  *v2 = v6;
  return result;
}

uint64_t DiagramConfiguration.TextAttributes.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1BCA9DBAC + 4 * byte_1BCAC9072[*v0]))(0xD000000000000015, 0x80000001BCACE470);
}

unint64_t sub_1BCA9DBAC()
{
  return 0xD000000000000012;
}

uint64_t sub_1BCA9DD48(uint64_t a1, uint64_t a2)
{
  return sub_1BCA9DD54(a1, a2, (void (*)(uint64_t))DiagramConfiguration.TextAttributes.rawValue.getter);
}

uint64_t sub_1BCA9DD54(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t v4;

  v4 = sub_1BCAB6870();
  a3(v4);
  sub_1BCAB5F40();
  swift_bridgeObjectRelease();
  return sub_1BCAB6894();
}

uint64_t sub_1BCA9DDBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1BCA9DDC8(a1, a2, a3, (void (*)(void))DiagramConfiguration.TextAttributes.rawValue.getter);
}

uint64_t sub_1BCA9DDC8(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  a4();
  sub_1BCAB5F40();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1BCA9DE18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1BCA9DE24(a1, a2, a3, (void (*)(uint64_t))DiagramConfiguration.TextAttributes.rawValue.getter);
}

uint64_t sub_1BCA9DE24(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v5;

  v5 = sub_1BCAB6870();
  a4(v5);
  sub_1BCAB5F40();
  swift_bridgeObjectRelease();
  return sub_1BCAB6894();
}

HealthVisualization::DiagramConfiguration::TextAttributes_optional sub_1BCA9DE88(Swift::String *a1)
{
  return DiagramConfiguration.TextAttributes.init(rawValue:)(*a1);
}

uint64_t sub_1BCA9DE94@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = DiagramConfiguration.TextAttributes.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1BCA9DEB8()
{
  sub_1BCAA8BD4();
  return sub_1BCAB5FE8();
}

uint64_t sub_1BCA9DF14()
{
  sub_1BCAA8BD4();
  return sub_1BCAB5FD0();
}

uint64_t sub_1BCA9DF60(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1BC999BC4(*a1, *a2);
}

HealthVisualization::DiagramConfiguration::ReferenceAnnotationPosition_optional __swiftcall DiagramConfiguration.ReferenceAnnotationPosition.init(rawValue:)(Swift::String rawValue)
{
  char *v1;

  return (HealthVisualization::DiagramConfiguration::ReferenceAnnotationPosition_optional)sub_1BCA9DF78(v1);
}

uint64_t sub_1BCA9DF78@<X0>(char *a1@<X8>)
{
  unint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_1BCAB6654();
  result = swift_bridgeObjectRelease();
  v4 = 4;
  if (v2 < 4)
    v4 = v2;
  *a1 = v4;
  return result;
}

uint64_t DiagramConfiguration.ReferenceAnnotationPosition.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1BCA9E000 + 4 * byte_1BCAC908B[*v0]))(0x6772614D7466656CLL, 0xEA00000000006E69);
}

uint64_t sub_1BCA9E000()
{
  return 0x72614D7468676972;
}

uint64_t sub_1BCA9E020()
{
  return 0x7265746E6563;
}

uint64_t sub_1BCA9E034()
{
  return 0x614D6D6F74746F62;
}

void sub_1BCA9E054()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  sub_1BCAB6870();
  __asm { BR              X9 }
}

uint64_t sub_1BCA9E0A4()
{
  sub_1BCAB5F40();
  swift_bridgeObjectRelease();
  return sub_1BCAB6894();
}

void sub_1BCA9E120()
{
  __asm { BR              X10 }
}

uint64_t sub_1BCA9E160()
{
  sub_1BCAB5F40();
  return swift_bridgeObjectRelease();
}

void sub_1BCA9E1C8()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  sub_1BCAB6870();
  __asm { BR              X9 }
}

uint64_t sub_1BCA9E214()
{
  sub_1BCAB5F40();
  swift_bridgeObjectRelease();
  return sub_1BCAB6894();
}

HealthVisualization::DiagramConfiguration::ReferenceAnnotationPosition_optional sub_1BCA9E290(Swift::String *a1)
{
  return DiagramConfiguration.ReferenceAnnotationPosition.init(rawValue:)(*a1);
}

uint64_t sub_1BCA9E29C()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1BCA9E2D0 + 4 * byte_1BCAC909B[*v0]))();
}

void sub_1BCA9E2D0(_QWORD *a1@<X8>)
{
  *a1 = 0x72614D7468676972;
  a1[1] = 0xEB000000006E6967;
}

void sub_1BCA9E2F4(_QWORD *a1@<X8>)
{
  *a1 = 0x7265746E6563;
  a1[1] = 0xE600000000000000;
}

void sub_1BCA9E30C(uint64_t a1@<X8>)
{
  strcpy((char *)a1, "bottomMargin");
  *(_BYTE *)(a1 + 13) = 0;
  *(_WORD *)(a1 + 14) = -5120;
}

uint64_t sub_1BCA9E330()
{
  sub_1BCAA8B90();
  return sub_1BCAB5FE8();
}

uint64_t sub_1BCA9E38C()
{
  sub_1BCAA8B90();
  return sub_1BCAB5FD0();
}

void sub_1BCA9E3D8(char *a1)
{
  sub_1BC99A3B0(*a1);
}

uint64_t sub_1BCA9E3E4()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1BCA9E40C + 4 * byte_1BCAC909F[*v0]))(7496034, 0xE300000000000000);
}

uint64_t sub_1BCA9E40C()
{
  return 0x72656E6E6162;
}

uint64_t sub_1BCA9E420()
{
  return 1701734764;
}

uint64_t sub_1BCA9E430()
{
  return 0x796C6E4F73697861;
}

uint64_t sub_1BCA9E448()
{
  return 0x7562697274736964;
}

unint64_t sub_1BCA9E468()
{
  return 0xD000000000000011;
}

uint64_t sub_1BCA9E484@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1BCAA8924(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1BCA9E4A8()
{
  sub_1BCAA31CC();
  return sub_1BCAB68D0();
}

uint64_t sub_1BCA9E4D0()
{
  sub_1BCAA31CC();
  return sub_1BCAB68DC();
}

void DiagramConfiguration.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  int v4;

  sub_1BC9ACE04(0, &qword_1ED6C6F20, (uint64_t (*)(void))sub_1BCAA31CC, (uint64_t)&type metadata for DiagramConfiguration.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  MEMORY[0x1E0C80A78](v3);
  v4 = *(unsigned __int8 *)(v1 + 88);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BCAA31CC();
  sub_1BCAB68B8();
  __asm { BR              X10 }
}

uint64_t sub_1BCA9E614()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v3 - 184) = v0;
  *(_BYTE *)(v3 - 176) = v2;
  v4 = *(_QWORD *)(v3 - 224);
  *(_BYTE *)(v3 - 175) = HIBYTE(v2);
  v5 = *(_QWORD *)(v3 - 232);
  *(_QWORD *)(v3 - 168) = *(_QWORD *)(v3 - 216);
  *(_QWORD *)(v3 - 160) = v5;
  *(_DWORD *)(v3 - 152) = v4;
  *(_WORD *)(v3 - 148) = WORD2(v4);
  *(_BYTE *)(v3 - 146) = BYTE6(v4);
  *(_BYTE *)(v3 - 65) = 0;
  sub_1BCAA3364();
  v6 = *(_QWORD *)(v3 - 192);
  sub_1BCAB6774();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 200) + 8))(v1, v6);
}

void sub_1BCA9E8C0(_QWORD *a1)
{
  DiagramConfiguration.encode(to:)(a1);
}

uint64_t DiagramConfiguration.init(from:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_1BC9ACE04(0, &qword_1ED6C74F8, (uint64_t (*)(void))sub_1BCAA31CC, (uint64_t)&type metadata for DiagramConfiguration.CodingKeys, MEMORY[0x1E0DED048]);
  MEMORY[0x1E0C80A78](v3);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BCAA31CC();
  sub_1BCAB68AC();
  if (!v1)
  {
    v4 = sub_1BCAB66F0();
    v5 = *(_QWORD *)(v4 + 16);
    if (v5)
    {
      v6 = *(unsigned __int8 *)(v5 + v4 + 31);
      swift_bridgeObjectRelease();
      __asm { BR              X9 }
    }
    swift_bridgeObjectRelease();
    __break(1u);
    JUMPOUT(0x1BCA9ED94);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_1BCA9EDAC(_QWORD *a1)
{
  return DiagramConfiguration.init(from:)(a1);
}

void static DiagramConfiguration.Color.diagramColor(sampleType:)(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  id v4;
  void *v5;
  id v6;

  v4 = objc_msgSend((id)objc_opt_self(), sel_sharedInstance);
  if (v4
    && (v5 = v4,
        v6 = objc_msgSend(v4, sel_displayTypeForObjectType_, a1),
        v5,
        v6))
  {
    static DiagramConfiguration.Color.diagramColor(displayType:)(v6, a2);

  }
  else
  {
    sub_1BCAB65C4();
    __break(1u);
  }
}

void static DiagramConfiguration.Color.diagramColor(displayType:)(void *a1@<X0>, _BYTE *a2@<X8>)
{
  id v3;
  _BYTE *v4;
  char v5;

  v3 = objc_msgSend(a1, sel_displayCategory);
  v4 = objc_msgSend(v3, sel_categoryID);

  if ((unint64_t)(v4 - 1) > 0xC)
    v5 = 0;
  else
    v5 = byte_1BCACC144[(_QWORD)(v4 - 1)];
  *a2 = v5;
}

id sub_1BCA9EF10(uint64_t a1, void *a2)
{
  uint64_t (*v3)(void);
  id v4;
  void *v5;

  v3 = *(uint64_t (**)(void))(a1 + 32);
  swift_retain();
  v4 = a2;
  v5 = (void *)v3();
  swift_release();

  return v5;
}

id sub_1BCA9EF60(void *a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;

  v2 = *(void **)(v1 + 16);
  v3 = *(void **)(v1 + 24);
  if (objc_msgSend(a1, sel_userInterfaceStyle) == (id)2)
    v4 = v2;
  else
    v4 = v3;
  return v4;
}

uint64_t _s19HealthVisualization20DiagramConfigurationO016PointLabelMinMaxD0V2eeoiySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;

  if (*(_QWORD *)a1 != *(_QWORD *)a2)
    return 0;
  v2 = *(unsigned __int8 *)(a1 + 10);
  v3 = *(unsigned __int8 *)(a2 + 10);
  v4 = DiagramConfiguration.TextAttributes.rawValue.getter();
  v6 = v5;
  if (v4 == DiagramConfiguration.TextAttributes.rawValue.getter() && v6 == v7)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    v9 = sub_1BCAB67C8();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    result = 0;
    if ((v9 & 1) == 0)
      return result;
  }
  v10 = DiagramConfiguration.TextAttributes.rawValue.getter();
  v12 = v11;
  if (v10 == DiagramConfiguration.TextAttributes.rawValue.getter() && v12 == v13)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    v14 = sub_1BCAB67C8();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    result = 0;
    if ((v14 & 1) == 0)
      return result;
  }
  return v2 ^ v3 ^ 1u;
}

BOOL _s19HealthVisualization20DiagramConfigurationO019PointLabelAllPointsD0V2eeoiySbAE_AEtFZ_0(_BYTE *a1, unsigned __int8 *a2)
{
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  _BOOL8 result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;

  v2 = a1[1];
  v3 = *a2;
  v4 = a2[1];
  if (*a1 == 25)
  {
    if (v3 != 25)
      return 0;
  }
  else
  {
    if (v3 == 25)
      return 0;
    v5 = DiagramConfiguration.TextAttributes.rawValue.getter();
    v7 = v6;
    if (v5 == DiagramConfiguration.TextAttributes.rawValue.getter() && v7 == v8)
    {
      swift_bridgeObjectRelease_n();
    }
    else
    {
      v9 = sub_1BCAB67C8();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      result = 0;
      if ((v9 & 1) == 0)
        return result;
    }
  }
  if (v2 == 25)
    return v4 == 25;
  if (v4 != 25)
  {
    v11 = DiagramConfiguration.TextAttributes.rawValue.getter();
    v13 = v12;
    if (v11 == DiagramConfiguration.TextAttributes.rawValue.getter() && v13 == v14)
    {
      swift_bridgeObjectRelease_n();
      return 1;
    }
    v15 = sub_1BCAB67C8();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v15 & 1) != 0)
      return 1;
  }
  return 0;
}

uint64_t _s19HealthVisualization20DiagramConfigurationO010PointLabelD0O2eeoiySbAE_AEtFZ_0(uint64_t *a1, uint64_t *a2)
{
  int v2;
  uint64_t v3;
  int v4;
  char v5;
  uint64_t v7;
  __int16 v8;
  char v9;
  uint64_t v10;
  __int16 v11;
  char v12;

  v2 = *((unsigned __int16 *)a1 + 4) | (*((char *)a1 + 10) << 16);
  v3 = *a2;
  v4 = *((unsigned __int16 *)a2 + 4) | (*((char *)a2 + 10) << 16);
  if (v2 < 0)
  {
    if (v4 < 0)
    {
      LOWORD(v10) = *a1;
      LOWORD(v7) = v3;
      v5 = _s19HealthVisualization20DiagramConfigurationO019PointLabelAllPointsD0V2eeoiySbAE_AEtFZ_0(&v10, (unsigned __int8 *)&v7);
      return v5 & 1;
    }
    goto LABEL_5;
  }
  if (v4 < 0)
  {
LABEL_5:
    v5 = 0;
    return v5 & 1;
  }
  v10 = *a1;
  v11 = v2;
  v12 = BYTE2(v2) & 1;
  v7 = v3;
  v8 = v4;
  v9 = BYTE2(v4) & 1;
  v5 = _s19HealthVisualization20DiagramConfigurationO016PointLabelMinMaxD0V2eeoiySbAE_AEtFZ_0((uint64_t)&v10, (uint64_t)&v7);
  return v5 & 1;
}

uint64_t _s19HealthVisualization20DiagramConfigurationO18DistributionLimitsV2eeoiySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  double v2;
  double v3;
  char v4;
  double v5;
  char v6;
  double v7;
  double v8;
  int v9;
  double v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t result;
  char v18;
  char v19;

  v3 = *(double *)(a1 + 8);
  v2 = *(double *)(a1 + 16);
  v4 = *(_BYTE *)(a1 + 24);
  v5 = *(double *)(a1 + 32);
  v6 = *(_BYTE *)(a1 + 40);
  v8 = *(double *)(a2 + 8);
  v7 = *(double *)(a2 + 16);
  v9 = *(unsigned __int8 *)(a2 + 24);
  v10 = *(double *)(a2 + 32);
  v11 = *(_BYTE *)(a2 + 40);
  v12 = DiagramConfiguration.Color.rawValue.getter();
  v14 = v13;
  if (v12 == DiagramConfiguration.Color.rawValue.getter() && v14 == v15)
  {
    swift_bridgeObjectRelease_n();
    if (v3 != v8)
      return 0;
LABEL_7:
    if ((v4 & 1) != 0)
    {
      if (!v9)
        return 0;
    }
    else
    {
      if (v2 == v7)
        v18 = v9;
      else
        v18 = 1;
      if ((v18 & 1) != 0)
        return 0;
    }
    if ((v6 & 1) != 0)
    {
      if ((v11 & 1) == 0)
        return 0;
    }
    else
    {
      if (v5 == v10)
        v19 = v11;
      else
        v19 = 1;
      if ((v19 & 1) != 0)
        return 0;
    }
    return 1;
  }
  v16 = sub_1BCAB67C8();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  result = 0;
  if ((v16 & 1) != 0 && v3 == v8)
    goto LABEL_7;
  return result;
}

uint64_t _s19HealthVisualization20DiagramConfigurationO14AxisPropertiesV2eeoiySbAE_AEtFZ_0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  int v31;
  char v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  int v36;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;

  v41 = a1[5];
  v42 = a1[4];
  v43 = a2[4];
  v39 = a1[6];
  v40 = a2[5];
  v38 = a2[6];
  v2 = DiagramConfiguration.AxisType.rawValue.getter();
  v4 = v3;
  if (v2 == DiagramConfiguration.AxisType.rawValue.getter() && v4 == v5)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    v6 = sub_1BCAB67C8();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v7 = 0;
    if ((v6 & 1) == 0)
      return v7 & 1;
  }
  v8 = DiagramConfiguration.TextAttributes.rawValue.getter();
  v10 = v9;
  if (v8 == DiagramConfiguration.TextAttributes.rawValue.getter() && v10 == v11)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    v12 = sub_1BCAB67C8();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v7 = 0;
    if ((v12 & 1) == 0)
      return v7 & 1;
  }
  v13 = DiagramConfiguration.Color.rawValue.getter();
  v15 = v14;
  if (v13 == DiagramConfiguration.Color.rawValue.getter() && v15 == v16)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    v17 = sub_1BCAB67C8();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v7 = 0;
    if ((v17 & 1) == 0)
      return v7 & 1;
  }
  v18 = DiagramConfiguration.Color.rawValue.getter();
  v20 = v19;
  if (v18 == DiagramConfiguration.Color.rawValue.getter() && v20 == v21)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    v22 = sub_1BCAB67C8();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v7 = 0;
    if ((v22 & 1) == 0)
      return v7 & 1;
  }
  if (v42)
    v23 = 0x74646957666C6168;
  else
    v23 = 0x57746C7561666564;
  if (v42)
    v24 = 0xE900000000000068;
  else
    v24 = 0xEC00000068746469;
  if (v43)
    v25 = 0x74646957666C6168;
  else
    v25 = 0x57746C7561666564;
  if (v43)
    v26 = 0xE900000000000068;
  else
    v26 = 0xEC00000068746469;
  if (v23 == v25 && v24 == v26)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    v27 = sub_1BCAB67C8();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v7 = 0;
    if ((v27 & 1) == 0)
      return v7 & 1;
  }
  v28 = 0x80000001BCACDD90;
  if (v41)
  {
    if (v41 == 1)
    {
      v29 = 0x80000001BCACDDB0;
      v30 = 0xD000000000000012;
      v31 = v40;
      if (!v40)
        goto LABEL_42;
    }
    else
    {
      v30 = 0x676E654C6F72657ALL;
      v29 = 0xEA00000000006874;
      v31 = v40;
      if (!v40)
        goto LABEL_42;
    }
  }
  else
  {
    v30 = 0xD000000000000012;
    v29 = 0x80000001BCACDD90;
    v31 = v40;
    if (!v40)
      goto LABEL_42;
  }
  if (v31 != 1)
  {
    v28 = 0xEA00000000006874;
    if (v30 != 0x676E654C6F72657ALL)
      goto LABEL_47;
LABEL_45:
    if (v29 == v28)
    {
      swift_bridgeObjectRelease_n();
      goto LABEL_48;
    }
    goto LABEL_47;
  }
  v28 = 0x80000001BCACDDB0;
LABEL_42:
  if (v30 == 0xD000000000000012)
    goto LABEL_45;
LABEL_47:
  v32 = sub_1BCAB67C8();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v7 = 0;
  if ((v32 & 1) != 0)
  {
LABEL_48:
    v33 = 0x80000001BCACDD90;
    if (v39)
    {
      if (v39 == 1)
      {
        v34 = 0x80000001BCACDDB0;
        v35 = 0xD000000000000012;
        v36 = v38;
        if (!v38)
          goto LABEL_57;
      }
      else
      {
        v35 = 0x676E654C6F72657ALL;
        v34 = 0xEA00000000006874;
        v36 = v38;
        if (!v38)
          goto LABEL_57;
      }
    }
    else
    {
      v35 = 0xD000000000000012;
      v34 = 0x80000001BCACDD90;
      v36 = v38;
      if (!v38)
        goto LABEL_57;
    }
    if (v36 != 1)
    {
      v33 = 0xEA00000000006874;
      if (v35 != 0x676E654C6F72657ALL)
        goto LABEL_62;
      goto LABEL_60;
    }
    v33 = 0x80000001BCACDDB0;
LABEL_57:
    if (v35 != 0xD000000000000012)
      goto LABEL_62;
LABEL_60:
    if (v34 == v33)
    {
      v7 = 1;
LABEL_63:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
    }
LABEL_62:
    v7 = sub_1BCAB67C8();
    goto LABEL_63;
  }
  return v7 & 1;
}

uint64_t _s19HealthVisualization20DiagramConfigurationO4AxisV2eeoiySbAE_AEtFZ_0(unsigned int *a1, unsigned int *a2)
{
  unint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  __int16 v12;
  char v13;
  char v14;
  char v15;
  char v16;
  char v17;
  int v18;
  __int16 v19;
  char v20;

  v2 = *a1 | ((unint64_t)(*((unsigned __int16 *)a1 + 2) | (*((unsigned __int8 *)a1 + 6) << 16)) << 32);
  v3 = *((unsigned __int8 *)a1 + 13);
  v4 = *(unsigned __int16 *)((char *)a1 + 11);
  v5 = *(unsigned int *)((char *)a1 + 7);
  v6 = *a2 | ((unint64_t)(*((unsigned __int16 *)a2 + 2) | (*((unsigned __int8 *)a2 + 6) << 16)) << 32);
  v7 = *((unsigned __int8 *)a2 + 13);
  v8 = *(unsigned __int16 *)((char *)a2 + 11);
  v9 = *(unsigned int *)((char *)a2 + 7);
  if ((v2 & 0xFF00000000) != 0x200000000)
  {
    v18 = *a1;
    v20 = BYTE6(v2);
    v19 = WORD2(v2);
    if ((v6 & 0xFF00000000) == 0x200000000)
      return 0;
    v12 = v6;
    v13 = BYTE2(v6);
    v14 = BYTE3(v6);
    v15 = BYTE4(v6) & 1;
    v16 = BYTE5(v6);
    v17 = BYTE6(v6);
    if ((_s19HealthVisualization20DiagramConfigurationO14AxisPropertiesV2eeoiySbAE_AEtFZ_0((unsigned __int8 *)&v18, (unsigned __int8 *)&v12) & 1) == 0)return 0;
LABEL_6:
    v10 = v9 | ((unint64_t)(v8 | (v7 << 16)) << 32);
    if (((v5 | ((unint64_t)(v4 | (v3 << 16)) << 32)) & 0xFF00000000) == 0x200000000)
    {
      if ((v10 & 0xFF00000000) != 0x200000000)
        return 0;
    }
    else
    {
      v18 = v5;
      v20 = (v5 | ((unint64_t)(v4 | (v3 << 16)) << 32)) >> 48;
      v19 = (v5 | ((unint64_t)(v4 | (v3 << 16)) << 32)) >> 32;
      if ((v10 & 0xFF00000000) == 0x200000000)
        return 0;
      v12 = v9;
      v13 = BYTE2(v9);
      v14 = BYTE3(v9);
      v15 = BYTE4(v10) & 1;
      v16 = (unsigned __int16)((v9 | ((unint64_t)(v8 | (v7 << 16)) << 32)) >> 32) >> 8;
      v17 = (v9 | ((unint64_t)(v8 | (v7 << 16)) << 32)) >> 48;
      if ((_s19HealthVisualization20DiagramConfigurationO14AxisPropertiesV2eeoiySbAE_AEtFZ_0((unsigned __int8 *)&v18, (unsigned __int8 *)&v12) & 1) == 0)return 0;
    }
    return 1;
  }
  if ((v6 & 0xFF00000000) == 0x200000000)
    goto LABEL_6;
  return 0;
}

uint64_t _s19HealthVisualization20DiagramConfigurationO12DistributionV2eeoiySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  int v2;
  char v3;
  char v4;
  char v5;
  int v6;
  char v7;
  char v8;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  const char *v17;
  unint64_t v18;
  const char *v19;
  char v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  char v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  char v47;
  int v48;
  uint64_t v49;
  __int128 v50;
  char v51;
  char v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  char v83;
  char v84;
  __int128 v85;
  uint64_t v86;
  char v87;
  uint64_t v88;
  char v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char v95;

  v2 = *(unsigned __int8 *)(a1 + 1);
  v3 = *(_BYTE *)(a1 + 2);
  v4 = *(_BYTE *)(a1 + 3);
  v5 = *(_BYTE *)(a1 + 4);
  v83 = *(_BYTE *)(a1 + 6);
  v84 = *(_BYTE *)(a1 + 5);
  v82 = *(unsigned __int8 *)(a1 + 7);
  v76 = *(_QWORD *)(a1 + 8);
  v6 = *(unsigned __int8 *)(a2 + 1);
  v7 = *(_BYTE *)(a2 + 2);
  v8 = *(_BYTE *)(a2 + 3);
  v9 = *(_BYTE *)(a2 + 4);
  v10 = *(_BYTE *)(a2 + 5);
  v80 = *(unsigned __int8 *)(a2 + 18);
  v81 = *(unsigned __int8 *)(a2 + 7);
  v79 = *(unsigned __int16 *)(a2 + 16);
  v73 = *(_QWORD *)(a2 + 8);
  v74 = *(unsigned __int8 *)(a2 + 24);
  v11 = *(_QWORD *)(a2 + 32);
  v62 = *(_QWORD *)(a2 + 40);
  v63 = *(_QWORD *)(a2 + 48);
  v64 = *(_BYTE *)(a2 + 64);
  v65 = *(_QWORD *)(a2 + 56);
  v66 = *(_QWORD *)(a2 + 65);
  v58 = *(unsigned __int16 *)(a2 + 77);
  v57 = *(unsigned int *)(a2 + 73);
  v12 = *(_QWORD *)(a2 + 80);
  v54 = *(unsigned __int8 *)(a2 + 88);
  v77 = *(unsigned __int16 *)(a1 + 16);
  v78 = *(unsigned __int8 *)(a1 + 18);
  v75 = *(_QWORD *)(a1 + 24);
  v68 = *(_QWORD *)(a1 + 32);
  v69 = *(_QWORD *)(a1 + 40);
  v70 = *(_QWORD *)(a1 + 48);
  v71 = *(_QWORD *)(a1 + 56);
  v72 = *(_BYTE *)(a1 + 64);
  v67 = *(_QWORD *)(a1 + 65);
  v61 = *(unsigned __int16 *)(a1 + 77);
  v60 = *(unsigned int *)(a1 + 73);
  v59 = *(_BYTE *)(a1 + 79);
  v55 = *(_QWORD *)(a1 + 80);
  v56 = *(unsigned __int8 *)(a1 + 88);
  sub_1BC99A81C(*(_BYTE *)a1);
  if ((v13 & 1) == 0)
    return 0;
  v53 = v12;
  v14 = 0xEB00000000676E69;
  v15 = 0x646461506F72657ALL;
  if (!v2)
  {
    v16 = 0x646461506F72657ALL;
    v18 = 0xEB00000000676E69;
    if (!v6)
      goto LABEL_13;
    goto LABEL_9;
  }
  if (v2 == 1)
  {
    v16 = 0xD00000000000001ALL;
    v17 = "defaultDistributionPadding";
  }
  else
  {
    v16 = 0xD00000000000001CLL;
    v17 = "heartRateDistributionPadding";
  }
  v18 = (unint64_t)(v17 - 32) | 0x8000000000000000;
  if (v6)
  {
LABEL_9:
    if (v6 == 1)
    {
      v15 = 0xD00000000000001ALL;
      v19 = "defaultDistributionPadding";
    }
    else
    {
      v15 = 0xD00000000000001CLL;
      v19 = "heartRateDistributionPadding";
    }
    v14 = (unint64_t)(v19 - 32) | 0x8000000000000000;
  }
LABEL_13:
  if (v16 == v15 && v18 == v14)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    v20 = sub_1BCAB67C8();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    result = 0;
    if ((v20 & 1) == 0)
      return result;
  }
  LOBYTE(v90) = v3;
  LOBYTE(v85) = v7;
  v22 = DiagramConfiguration.Color.rawValue.getter();
  v24 = v23;
  if (v22 == DiagramConfiguration.Color.rawValue.getter() && v24 == v25)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    v26 = sub_1BCAB67C8();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    result = 0;
    if ((v26 & 1) == 0)
      return result;
  }
  LOBYTE(v90) = v4;
  LOBYTE(v85) = v8;
  v27 = DiagramConfiguration.Color.rawValue.getter();
  v29 = v28;
  if (v27 == DiagramConfiguration.Color.rawValue.getter() && v29 == v30)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    v31 = sub_1BCAB67C8();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    result = 0;
    if ((v31 & 1) == 0)
      return result;
  }
  LOBYTE(v90) = v5;
  LOBYTE(v85) = v9;
  v32 = DiagramConfiguration.Color.rawValue.getter();
  v34 = v33;
  if (v32 == DiagramConfiguration.Color.rawValue.getter() && v34 == v35)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    v36 = sub_1BCAB67C8();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    result = 0;
    if ((v36 & 1) == 0)
      return result;
  }
  LOBYTE(v90) = v84;
  LOBYTE(v85) = v10;
  v37 = DiagramConfiguration.TextAttributes.rawValue.getter();
  v39 = v38;
  if (v37 == DiagramConfiguration.TextAttributes.rawValue.getter() && v39 == v40)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    v41 = sub_1BCAB67C8();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    result = 0;
    if ((v41 & 1) == 0)
      return result;
  }
  sub_1BC99A3B0(v83);
  if ((v42 & 1) == 0)
    return 0;
  v43 = 0x746E65746E6F43;
  if (v82)
  {
    if (v82 == 1)
    {
      v44 = 0x80000001BCACD8D0;
      v45 = 0xD000000000000012;
    }
    else
    {
      v45 = 0x636E657265666552;
      v44 = 0xED0000656E694C65;
    }
  }
  else
  {
    v44 = 0xE700000000000000;
    v45 = 0x746E65746E6F43;
  }
  if (v81)
  {
    if (v81 == 1)
    {
      v46 = 0x80000001BCACD8D0;
      v43 = 0xD000000000000012;
    }
    else
    {
      v43 = 0x636E657265666552;
      v46 = 0xED0000656E694C65;
    }
  }
  else
  {
    v46 = 0xE700000000000000;
  }
  if (v45 == v43 && v44 == v46)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    v47 = sub_1BCAB67C8();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    result = 0;
    if ((v47 & 1) == 0)
      return result;
  }
  v48 = v79 | (v80 << 16);
  if ((~(v77 | (v78 << 16)) & 0xFEE0E0) != 0)
  {
    v90 = v76;
    LOWORD(v91) = v77;
    BYTE2(v91) = (v77 | (v78 << 16)) >> 16;
    v49 = v53;
    if ((~v48 & 0xFEE0E0) == 0)
      return 0;
    *(_QWORD *)&v85 = v73;
    WORD4(v85) = v79;
    BYTE10(v85) = (v79 | (v80 << 16)) >> 16;
    if ((_s19HealthVisualization20DiagramConfigurationO010PointLabelD0O2eeoiySbAE_AEtFZ_0(&v90, (uint64_t *)&v85) & 1) == 0)
      return 0;
  }
  else
  {
    v49 = v53;
    if ((~v48 & 0xFEE0E0) != 0)
      return 0;
  }
  if (v75 == 35)
  {
    if (v74 != 35)
      return 0;
  }
  else
  {
    v90 = v75;
    v91 = v68;
    v92 = v69;
    v93 = v70;
    v94 = v71;
    v95 = v72;
    if (v74 == 35)
      return 0;
    LOBYTE(v85) = v74;
    *((_QWORD *)&v85 + 1) = v11;
    v86 = v62;
    v87 = v63 & 1;
    v88 = v65;
    v89 = v64 & 1;
    if ((_s19HealthVisualization20DiagramConfigurationO18DistributionLimitsV2eeoiySbAE_AEtFZ_0((uint64_t)&v90, (uint64_t)&v85) & 1) == 0)return 0;
  }
  if ((v67 & 0xFF00000000) == 0x300000000)
  {
    if ((v66 & 0xFF00000000) != 0x300000000)
      return 0;
  }
  else
  {
    v90 = v67;
    LODWORD(v91) = v60;
    WORD2(v91) = (v60 | (unint64_t)(v61 << 32)) >> 32;
    if ((v66 & 0xFF00000000) == 0x300000000)
      return 0;
    LODWORD(v85) = v66;
    BYTE6(v85) = BYTE6(v66);
    *((_QWORD *)&v50 + 1) = v57 | (v58 << 32);
    *(_QWORD *)&v50 = v66;
    WORD2(v85) = WORD2(v66);
    *(_DWORD *)((char *)&v85 + 7) = v50 >> 56;
    BYTE13(v85) = (unint64_t)(v50 >> 56) >> 48;
    *(_WORD *)((char *)&v85 + 11) = (unint64_t)(v50 >> 56) >> 32;
    if ((_s19HealthVisualization20DiagramConfigurationO4AxisV2eeoiySbAE_AEtFZ_0((unsigned int *)&v90, (unsigned int *)&v85) & 1) == 0)return 0;
  }
  sub_1BC99A088(v59);
  if ((v51 & 1) != 0)
  {
    if (v56)
    {
      if (v55)
      {
        if (v54)
          return v49 != 0;
      }
      else if (v54)
      {
        return v49 == 0;
      }
    }
    else
    {
      v52 = v54;
      if (v55 != v49)
        v52 = 1;
      if ((v52 & 1) == 0)
        return 1;
    }
  }
  return 0;
}

