_QWORD *__swift_project_boxed_opaque_existential_1(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

uint64_t __swift_destroy_boxed_opaque_existential_1(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 24) - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release();
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

double UIEdgeInsetsInsetRect(double a1, double a2, double a3, double a4, double a5, double a6)
{
  return a1 + a6;
}

_BYTE *__swift_memcpy1_1(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

__n128 __swift_memcpy33_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

__n128 __swift_memcpy18_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u16[0] = a2[1].n128_u16[0];
  *a1 = result;
  return result;
}

__n128 __swift_memcpy40_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

uint64_t block_destroy_helper_0()
{
  return swift_release();
}

uint64_t block_destroy_helper_1()
{
  return swift_release();
}

uint64_t block_destroy_helper_2()
{
  return swift_release();
}

uint64_t block_destroy_helper_3()
{
  return swift_release();
}

uint64_t block_destroy_helper_4()
{
  return swift_release();
}

uint64_t block_destroy_helper_5()
{
  return swift_release();
}

uint64_t block_destroy_helper_6()
{
  return swift_release();
}

uint64_t block_destroy_helper_7()
{
  return swift_release();
}

uint64_t block_destroy_helper_8()
{
  return swift_release();
}

uint64_t block_destroy_helper_9()
{
  return swift_release();
}

uint64_t block_destroy_helper_10()
{
  return swift_release();
}

uint64_t block_destroy_helper_11()
{
  return swift_release();
}

uint64_t block_destroy_helper_12()
{
  return swift_release();
}

uint64_t block_destroy_helper_13()
{
  return swift_release();
}

uint64_t block_destroy_helper_14()
{
  return swift_release();
}

uint64_t block_destroy_helper_15()
{
  return swift_release();
}

uint64_t block_destroy_helper_16()
{
  return swift_release();
}

uint64_t block_destroy_helper_17()
{
  return swift_release();
}

uint64_t block_destroy_helper_18()
{
  return swift_release();
}

__n128 __swift_memcpy27_8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 11) = *(_OWORD *)(a2 + 11);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_2(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_3(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_5(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_6(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_7(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_9(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_10(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_11(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_12(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_13(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_14(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_15(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_16(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_17(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_18(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

__n128 __swift_memcpy25_8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

__n128 __swift_memcpy89_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 73) = *(_OWORD *)(a2 + 73);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

__n128 __swift_memcpy48_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

double StudentsCDF(double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8)
{
  double v9;
  double v10;

  v9 = a2;
  v10 = a1;
  if (a2 <= 0.0)
    boost::math::policies::detail::raise_error<std::domain_error,double>("boost::math::students_t_distribution<%1%>::students_t_distribution", "Degrees of freedom argument is %1%, but must be > 0 !");
  return boost::math::cdf<double,boost::math::policies::policy<boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(&v9, &v10, a1, a2, a3, a4, a5, a6, a7, a8);
}

double boost::math::cdf<double,boost::math::policies::policy<boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(double *a1, double *a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9, double a10)
{
  double v10;
  double result;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  __int128 v18;
  double v19;

  v10 = *a1;
  v19 = v10;
  if (v10 <= 0.0)
    boost::math::policies::detail::raise_error<std::domain_error,double>("boost::math::cdf(const students_t_distribution<%1%>&, %1%)", "Degrees of freedom argument is %1%, but must be > 0 !");
  *(double *)&v18 = *a2;
  result = 0.5;
  if (*(double *)&v18 != 0.0)
  {
    if (fabs(*(double *)&v18) == INFINITY)
    {
      result = 1.0;
      if (*(double *)&v18 < 0.0)
        return 0.0;
    }
    else if (v10 <= 4.50359963e15)
    {
      v13 = *(double *)&v18 * *(double *)&v18;
      v14 = v13 + v13;
      v15 = *(double *)&v18 * *(double *)&v18 + v10;
      v16 = v10 * 0.5;
      if (v10 <= v13 + v13)
        v17 = boost::math::ibeta<double,double,double,boost::math::policies::policy<boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(v16, 0.5, v10 / v15, v16, v14, a8, a9, a10);
      else
        v17 = boost::math::ibetac<double,double,double,boost::math::policies::policy<boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(0.5, v10 * 0.5, v13 / v15, v16, v14, a8, a9, a10);
      result = v17 * 0.5;
      if (*a2 > 0.0)
        return 1.0 - result;
    }
    else
    {
      v18 = xmmword_1BCAB7800;
      boost::math::cdf<double,boost::math::policies::policy<boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>((double *)&v18, a2);
    }
  }
  return result;
}

void HypergeometricPDF(double a1, double a2, double a3, double a4)
{
  double v6;
  double v7;
  unsigned int v9;
  unsigned int v10[3];
  unsigned int v11;
  double v12;

  v10[0] = a3;
  v10[1] = a4;
  v10[2] = a2;
  v12 = 0.0;
  boost::math::hypergeometric_distribution<double,boost::math::policies::policy<boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>::check_params(v10, (char *)boost::math::hypergeometric_distribution<double,boost::math::policies::policy<boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>::hypergeometric_distribution(unsigned int,unsigned int,unsigned int)::function);
  v12 = a1;
  if ((*(_QWORD *)&a1 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    goto LABEL_9;
  v6 = floor(a1);
  v7 = ceil(a1);
  if (a1 < 0.0)
    v6 = v7;
  if (v6 > 2147483650.0 || v6 < -2147483650.0)
  {
LABEL_9:
    if (a1 <= 0.0)
      v9 = 0x80000000;
    else
      v9 = 0x7FFFFFFF;
  }
  else
  {
    v9 = (int)v6;
  }
  v11 = v9;
  if ((double)v9 != a1)
    boost::math::policies::detail::raise_error<std::domain_error,double>((char *)boost::math::pdf<double,boost::math::policies::policy<boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>,double>(boost::math::hypergeometric_distribution<double,boost::math::policies::policy<boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>> const&,double const&)::function, "Random variable out of range: must be an integer but got %1%");
  boost::math::pdf<double,boost::math::policies::policy<boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(v10, &v11);
}

void boost::math::policies::detail::raise_error<std::domain_error,double>(char *a1, char *a2)
{
  char *v2;
  char *v3;
  std::string *v4;
  std::string::size_type size;
  const char *v6;
  std::string *v7;
  std::string::size_type v8;
  std::logic_error v9;
  _QWORD v10[2];
  char v11;
  std::string v12;
  std::string v13;
  std::string v14;

  v2 = "Unknown function operating on type %1%";
  if (a1)
    v2 = a1;
  if (a2)
    v3 = a2;
  else
    v3 = "Cause unknown: error caused by bad argument with value %1%";
  std::string::basic_string[abi:ne180100]<0>(&v14, v2);
  std::string::basic_string[abi:ne180100]<0>(&v13, v3);
  std::string::basic_string[abi:ne180100]<0>(&v12, "Error in function ");
  boost::math::policies::detail::replace_all_in_string(&v14, "%1%", "double");
  if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v4 = &v14;
  else
    v4 = (std::string *)v14.__r_.__value_.__r.__words[0];
  if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v14.__r_.__value_.__r.__words[2]);
  else
    size = v14.__r_.__value_.__l.__size_;
  std::string::append(&v12, (const std::string::value_type *)v4, size);
  std::string::append(&v12, ": ", 2uLL);
  boost::math::policies::detail::prec_format<double>(v10);
  if (v11 >= 0)
    v6 = (const char *)v10;
  else
    v6 = (const char *)v10[0];
  boost::math::policies::detail::replace_all_in_string(&v13, "%1%", v6);
  if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v7 = &v13;
  else
    v7 = (std::string *)v13.__r_.__value_.__r.__words[0];
  if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v8 = HIBYTE(v13.__r_.__value_.__r.__words[2]);
  else
    v8 = v13.__r_.__value_.__l.__size_;
  std::string::append(&v12, (const std::string::value_type *)v7, v8);
  std::logic_error::logic_error(&v9, &v12);
  v9.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
  boost::throw_exception<std::domain_error>(&v9);
}

uint64_t boost::math::policies::detail::replace_all_in_string(std::string *a1, char *__s, const char *a3)
{
  size_t v6;
  size_t v7;
  int v8;
  uint64_t *v9;
  std::string::size_type size;
  uint64_t result;
  int64_t v12;
  std::string::size_type v13;
  std::string::size_type v14;
  int64_t v15;
  int v16;
  int64_t v17;
  uint64_t v18;
  size_t v19;
  int v20;

  v6 = strlen(__s);
  v7 = strlen(a3);
  v8 = SHIBYTE(a1->__r_.__value_.__r.__words[2]);
  if (v8 >= 0)
    v9 = (uint64_t *)a1;
  else
    v9 = (uint64_t *)a1->__r_.__value_.__r.__words[0];
  if (v8 >= 0)
    size = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  else
    size = a1->__r_.__value_.__l.__size_;
  result = strlen(__s);
  v12 = result;
  v13 = 0;
  while (!v12)
  {
LABEL_18:
    if (v13 != -1)
    {
      v19 = strlen(a3);
      std::string::replace(a1, v13, v6, a3, v19);
      v13 += v7;
      v20 = SHIBYTE(a1->__r_.__value_.__r.__words[2]);
      v9 = v20 >= 0 ? (uint64_t *)a1 : (uint64_t *)a1->__r_.__value_.__r.__words[0];
      size = v20 >= 0 ? HIBYTE(a1->__r_.__value_.__r.__words[2]) : a1->__r_.__value_.__l.__size_;
      result = strlen(__s);
      v12 = result;
      if (size >= v13)
        continue;
    }
    return result;
  }
  result = (uint64_t)v9 + v13;
  v14 = (std::string::size_type)v9 + size;
  v15 = size - v13;
  if ((uint64_t)(size - v13) >= v12)
  {
    v16 = *__s;
    do
    {
      v17 = v15 - v12;
      if (v17 == -1)
        break;
      result = (uint64_t)memchr((void *)result, v16, v17 + 1);
      if (!result)
        break;
      v18 = result;
      result = memcmp((const void *)result, __s, v12);
      if (!(_DWORD)result)
      {
        if (v18 == v14)
          return result;
        v13 = v18 - (_QWORD)v9;
        goto LABEL_18;
      }
      result = v18 + 1;
      v15 = v14 - (v18 + 1);
    }
    while (v15 >= v12);
  }
  return result;
}

uint64_t boost::math::policies::detail::prec_format<double>@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  _QWORD v4[2];
  uint64_t v5;
  _QWORD v6[10];
  char v7;
  uint64_t v8;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v4);
  *(_QWORD *)((char *)&v6[1] + *(_QWORD *)(v5 - 24)) = 17;
  std::ostream::operator<<();
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v6, a1);
  v4[0] = *MEMORY[0x1E0DE4F50];
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v4 + *(_QWORD *)(v4[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v5 = v2;
  v6[0] = MEMORY[0x1E0DE4FB8] + 16;
  if (v7 < 0)
    operator delete((void *)v6[8]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1BCCFB8B4](&v8);
}

void sub_1BC98C660(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void boost::throw_exception<std::domain_error>(const std::logic_error *a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x40uLL);
  boost::wrapexcept<std::domain_error>::wrapexcept((uint64_t)exception, a1);
}

void sub_1BC98C6B0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::string::basic_string[abi:ne180100]<0>(_QWORD *a1, char *__s)
{
  size_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v4;
    v6 = a1;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  return a1;
}

void std::string::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("basic_string");
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E7543428, MEMORY[0x1E0DE42D0]);
}

void sub_1BC98C7C4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5020] + 16);
  return result;
}

void __clang_call_terminate(void *a1)
{
  __cxa_begin_catch(a1);
  std::terminate();
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  std::ios_base *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = MEMORY[0x1E0DE4FD0];
  v3 = MEMORY[0x1E0DE4FD0] + 104;
  *(_QWORD *)(a1 + 128) = MEMORY[0x1E0DE4FD0] + 104;
  *(_QWORD *)(a1 + 16) = v2 + 64;
  v4 = a1 + 16;
  v5 = (_QWORD *)MEMORY[0x1E0DE4F50];
  v6 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 16);
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 24);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + *(_QWORD *)(v6 - 24)) = v7;
  *(_QWORD *)(a1 + 8) = 0;
  v8 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v8, (void *)(a1 + 24));
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  v9 = v5[4];
  v10 = v5[5];
  *(_QWORD *)(a1 + 16) = v9;
  *(_QWORD *)(v4 + *(_QWORD *)(v9 - 24)) = v10;
  v11 = v5[1];
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + *(_QWORD *)(v11 - 24)) = v5[6];
  *(_QWORD *)a1 = v2 + 24;
  *(_QWORD *)(a1 + 128) = v3;
  *(_QWORD *)(a1 + 16) = v2 + 64;
  std::streambuf::basic_streambuf();
  *(_QWORD *)(a1 + 24) = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 24;
  return a1;
}

void sub_1BC98C910(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::iostream::~basic_iostream();
  MEMORY[0x1BCCFB8B4](v1);
  _Unwind_Resume(a1);
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = MEMORY[0x1E0DE4F50];
  v3 = *MEMORY[0x1E0DE4F50];
  *(_QWORD *)a1 = *MEMORY[0x1E0DE4F50];
  v4 = *(_QWORD *)(v2 + 72);
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 64);
  *(_QWORD *)(a1 + 24) = MEMORY[0x1E0DE4FB8] + 16;
  *(_QWORD *)(a1 + 16) = v4;
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1BCCFB8B4](a1 + 128);
  return a1;
}

uint64_t std::stringbuf::str[abi:ne180100]<std::allocator<char>>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  unint64_t v4;
  const void *v5;
  size_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  result = std::stringbuf::view[abi:ne180100](a1);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = (const void *)result;
  v6 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v9 = operator new(v7 + 1);
    a2[1] = v6;
    a2[2] = v8 | 0x8000000000000000;
    *a2 = v9;
    a2 = v9;
  }
  else
  {
    *((_BYTE *)a2 + 23) = v4;
    if (!v4)
      goto LABEL_9;
  }
  result = (uint64_t)memmove(a2, v5, v6);
LABEL_9:
  *((_BYTE *)a2 + v6) = 0;
  return result;
}

uint64_t std::stringbuf::view[abi:ne180100](uint64_t a1)
{
  int v1;
  unint64_t v3;

  v1 = *(_DWORD *)(a1 + 96);
  if ((v1 & 0x10) != 0)
  {
    v3 = *(_QWORD *)(a1 + 48);
    if (*(_QWORD *)(a1 + 88) < v3)
      *(_QWORD *)(a1 + 88) = v3;
    return *(_QWORD *)(a1 + 40);
  }
  else if ((v1 & 8) != 0)
  {
    return *(_QWORD *)(a1 + 16);
  }
  else
  {
    return 0;
  }
}

uint64_t boost::wrapexcept<std::domain_error>::wrapexcept(uint64_t a1, const std::logic_error *a2)
{
  *(_QWORD *)a1 = &unk_1E7543AC0;
  std::logic_error::logic_error((std::logic_error *)(a1 + 8), a2);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = -1;
  *(_QWORD *)a1 = &unk_1E7543A48;
  *(_QWORD *)(a1 + 8) = &unk_1E7543A78;
  *(_QWORD *)(a1 + 24) = &unk_1E7543AA0;
  *(_QWORD *)(a1 + 32) = 0;
  return a1;
}

uint64_t boost::wrapexcept<std::domain_error>::~wrapexcept(uint64_t a1)
{
  *(_QWORD *)(a1 + 24) = &unk_1E7543AF0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 32));
  MEMORY[0x1BCCFB800](a1 + 8);
  return a1;
}

uint64_t boost::wrapexcept<std::domain_error>::clone(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = operator new();
  *(_QWORD *)v2 = &unk_1E7543AC0;
  std::logic_error::logic_error((std::logic_error *)(v2 + 8), (const std::logic_error *)(a1 + 8));
  *(_QWORD *)(v2 + 8) = MEMORY[0x1E0DE5018] + 16;
  *(_QWORD *)(v2 + 24) = &unk_1E7543AF0;
  v3 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(v2 + 32) = v3;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *(_DWORD *)(v2 + 56) = *(_DWORD *)(a1 + 56);
  *(_QWORD *)v2 = &unk_1E7543A48;
  *(_QWORD *)(v2 + 8) = &unk_1E7543A78;
  *(_QWORD *)(v2 + 24) = &unk_1E7543AA0;
  boost::exception_detail::copy_boost_exception(v2 + 24, a1 + 24);
  return v2;
}

void boost::wrapexcept<std::domain_error>::rethrow(uint64_t a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x40uLL);
  boost::wrapexcept<std::domain_error>::wrapexcept((uint64_t)exception, a1);
}

void sub_1BC98CC9C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void boost::wrapexcept<std::domain_error>::~wrapexcept(uint64_t a1)
{
  *(_QWORD *)(a1 + 24) = &unk_1E7543AF0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 32));
  MEMORY[0x1BCCFB800](a1 + 8);
  JUMPOUT(0x1BCCFB8D8);
}

void `non-virtual thunk to'boost::wrapexcept<std::domain_error>::~wrapexcept(uint64_t a1)
{
  *(_QWORD *)(a1 + 16) = &unk_1E7543AF0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 24));
  JUMPOUT(0x1BCCFB800);
}

{
  *(_QWORD *)(a1 + 16) = &unk_1E7543AF0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 24));
  MEMORY[0x1BCCFB800](a1);
  JUMPOUT(0x1BCCFB8D8);
}

void `non-virtual thunk to'boost::wrapexcept<std::domain_error>::~wrapexcept(_QWORD *a1)
{
  *a1 = &unk_1E7543AF0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);
  JUMPOUT(0x1BCCFB800);
}

{
  *a1 = &unk_1E7543AF0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);
  MEMORY[0x1BCCFB800](a1 - 2);
  JUMPOUT(0x1BCCFB8D8);
}

uint64_t *boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  if (v2 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2))
    *a1 = 0;
  return a1;
}

uint64_t boost::wrapexcept<std::domain_error>::wrapexcept(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)a1 = &unk_1E7543AC0;
  std::logic_error::logic_error((std::logic_error *)(a1 + 8), (const std::logic_error *)(a2 + 8));
  *(_QWORD *)(a1 + 8) = MEMORY[0x1E0DE5018] + 16;
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = &unk_1E7543AF0;
  *(_QWORD *)(a1 + 32) = v4;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v5 = *(_OWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v5;
  *(_QWORD *)a1 = &unk_1E7543A48;
  *(_QWORD *)(a1 + 8) = &unk_1E7543A78;
  *(_QWORD *)(a1 + 24) = &unk_1E7543AA0;
  return a1;
}

uint64_t boost::exception_detail::copy_boost_exception(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v4 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v4 + 40))(&v7);
    v5 = v7;
    if (v7)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7);
      if (v7)
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 32))(v7);
    }
  }
  else
  {
    v5 = 0;
  }
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  result = *(_QWORD *)(a1 + 8);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 32))(result);
  *(_QWORD *)(a1 + 8) = v5;
  if (v5)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
  }
  return result;
}

void sub_1BC98CFE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 32))(a10);
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
  _Unwind_Resume(exception_object);
}

void boost::math::cdf<double,boost::math::policies::policy<boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(double *a1, double *a2)
{
  double v2;
  double v3;
  char *v5;
  double v6;

  v3 = *a1;
  v2 = a1[1];
  if (v2 <= 0.0 || (*(_QWORD *)&v2 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    v5 = "Scale parameter is %1%, but must be > 0 !";
    goto LABEL_6;
  }
  if ((*(_QWORD *)&v3 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    v5 = "Location parameter is %1%, but must be finite!";
    goto LABEL_6;
  }
  v6 = *a2;
  if (fabs(*a2) == INFINITY)
    return;
  if ((*(_QWORD *)&v6 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    v5 = "Random variate x is %1%, but must be finite!";
LABEL_6:
    boost::math::policies::detail::raise_error<std::domain_error,double>((char *)boost::math::cdf<double,boost::math::policies::policy<boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(boost::math::normal_distribution<double,boost::math::policies::policy<boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>> const&,double const&)::function, v5);
  }
  if (fabs(boost::math::detail::erf_imp<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(1, (v6 - v3) / (v2 * -1.41421356))) > 1.79769313e308)boost::math::policies::detail::raise_error<std::overflow_error,double>("boost::math::erfc<%1%>(%1%, %1%)", "numeric overflow");
}

double boost::math::ibetac<double,double,double,boost::math::policies::policy<boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8)
{
  double v8;
  char v10;

  v8 = boost::math::detail::ibeta_imp<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>((uint64_t)&v10, 1u, 1, 0, a1, a2, a3, a4, a5, a6, a7, a8);
  if (fabs(v8) > 1.79769313e308)
    boost::math::policies::detail::raise_error<std::overflow_error,double>("boost::math::ibetac<%1%>(%1%,%1%,%1%)", "numeric overflow");
  return v8;
}

double boost::math::ibeta<double,double,double,boost::math::policies::policy<boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8)
{
  double v8;
  char v10;

  v8 = boost::math::detail::ibeta_imp<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>((uint64_t)&v10, 0, 1, 0, a1, a2, a3, a4, a5, a6, a7, a8);
  if (fabs(v8) > 1.79769313e308)
    boost::math::policies::detail::raise_error<std::overflow_error,double>("boost::math::ibeta<%1%>(%1%,%1%,%1%)", "numeric overflow");
  return v8;
}

double boost::math::detail::erf_imp<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(int a1, long double a2)
{
  int v3;
  double v4;
  double v6;
  double v7;
  float64x2_t v8;
  long double v9;
  float64x2_t v10;
  float64x2_t v11;
  long double v12;
  float64x2_t v13;
  double v14;
  long double v15;
  int v16;
  long double v17;
  float64x2_t v18;
  double v19;
  long double v20;
  long double v21;
  long double v22;
  double v23;
  double v24;
  double v25;
  long double v26;
  int v27;
  double v28;
  long double v29;
  long double v30;
  long double v31;
  double v32;
  int __e;
  int v35;
  int v36;
  double v37;
  double v38;

  v3 = a1;
  if (a2 < 0.0)
  {
    if ((a1 & 1) == 0)
      return -boost::math::detail::erf_imp<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(0, -a2);
    v4 = -a2;
    if (a2 >= -0.5)
      return boost::math::detail::erf_imp<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(0, v4)+ 1.0;
    else
      return 2.0
           - boost::math::detail::erf_imp<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(1, v4);
  }
  if (a2 < 0.5)
  {
    if (a2 >= 1.0e-10)
    {
      v8 = vaddq_f64(vmulq_n_f64(vmlaq_n_f64((float64x2_t)xmmword_1BCAB7940, (float64x2_t)xmmword_1BCAB7930, a2 * a2 * (a2 * a2)), a2 * a2), vaddq_f64(vmulq_n_f64(vmlaq_n_f64((float64x2_t)xmmword_1BCAB7920, (float64x2_t)xmmword_1BCAB7910, a2 * a2 * (a2 * a2)), a2 * a2 * (a2 * a2)), (float64x2_t)xmmword_1BCAB7950));
      v6 = (vdivq_f64(v8, (float64x2_t)vdupq_laneq_s64((int64x2_t)v8, 1)).f64[0] + 1.04494858) * a2;
    }
    else
    {
      v6 = 0.0;
      if (a2 != 0.0)
        v6 = a2 * 0.0033791671 + a2 * 1.125;
    }
    goto LABEL_25;
  }
  if (a1)
    v7 = 28.0;
  else
    v7 = 5.92999983;
  v3 = a1 ^ 1;
  if (a2 >= v7)
  {
    v6 = 0.0;
    goto LABEL_25;
  }
  if (a2 < 1.5)
  {
    v9 = a2 + -0.5;
    v10.f64[0] = v9 * v9 * 0.0195049001 + 0.191003696;
    v10.f64[1] = v9 * v9 * (v9 * v9 * 0.00000337511472 + 0.123850975) + 1.42628005;
    v11 = vaddq_f64(vaddq_f64(vmulq_n_f64(v10, v9 * v9), (float64x2_t)xmmword_1BCAB7900), vmulq_n_f64(vaddq_f64(vmulq_n_f64(vmlaq_n_f64((float64x2_t)xmmword_1BCAB78E0, (float64x2_t)xmmword_1BCAB78D0, v9 * v9), v9 * v9), (float64x2_t)xmmword_1BCAB78F0), a2 + -0.5));
    v6 = exp(-(a2 * a2)) / a2 * (vdivq_f64(v11, (float64x2_t)vdupq_laneq_s64((int64x2_t)v11, 1)).f64[0] + 0.405935764);
    goto LABEL_25;
  }
  if (a2 < 2.5)
  {
    v12 = a2 + -1.5;
    v13 = vaddq_f64(vaddq_f64(vmulq_n_f64(vmlaq_n_f64((float64x2_t)xmmword_1BCAB78A0, (float64x2_t)xmmword_1BCAB7890, v12 * v12), v12 * v12), (float64x2_t)xmmword_1BCAB78C0), vmulq_n_f64(vaddq_f64(vmulq_n_f64(vmlaq_n_f64((float64x2_t)xmmword_1BCAB7880, (float64x2_t)xmmword_1BCAB7870, v12 * v12), v12 * v12), (float64x2_t)xmmword_1BCAB78B0), a2 + -1.5));
    v14 = vdivq_f64(v13, (float64x2_t)vdupq_laneq_s64((int64x2_t)v13, 1)).f64[0] + 0.506728172;
    v15 = frexp(a2, &__e);
    v16 = __e;
LABEL_23:
    v19 = ldexp(v15, 26);
    v20 = ldexp(floor(v19), v16 - 26);
    v21 = a2 - v20;
    v22 = v20 * v20 - a2 * a2 + (v20 + v20) * (a2 - v20);
    v23 = exp(-(a2 * a2));
    v6 = v14 * (v23 * exp(-(v22 + v21 * v21)) / a2);
    goto LABEL_25;
  }
  if (a2 < 4.5)
  {
    v17 = a2 + -3.5;
    v18 = vaddq_f64(vaddq_f64(vmulq_n_f64(vmlaq_n_f64((float64x2_t)xmmword_1BCAB7840, (float64x2_t)xmmword_1BCAB7830, v17 * v17), v17 * v17), (float64x2_t)xmmword_1BCAB7860), vmulq_n_f64(vaddq_f64(vmulq_n_f64(vmlaq_n_f64((float64x2_t)xmmword_1BCAB7820, (float64x2_t)xmmword_1BCAB7810, v17 * v17), v17 * v17), (float64x2_t)xmmword_1BCAB7850), a2 + -3.5));
    v14 = vdivq_f64(v18, (float64x2_t)vdupq_laneq_s64((int64x2_t)v18, 1)).f64[0] + 0.540575027;
    v15 = frexp(a2, &v35);
    v16 = v35;
    goto LABEL_23;
  }
  v38 = 1.0 / a2;
  v24 = boost::math::tools::evaluate_polynomial<7ul,long double,long double>(boost::math::detail::erf_imp<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(long double,BOOL,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy> const&,std::integral_constant<int,53> const&)::P, &v38);
  v37 = 1.0 / a2;
  v25 = v24
      / boost::math::tools::evaluate_polynomial<7ul,long double,long double>(boost::math::detail::erf_imp<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(long double,BOOL,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy> const&,std::integral_constant<int,53> const&)::Q, &v37)+ 0.557909012;
  v26 = frexp(a2, &v36);
  v27 = v36;
  v28 = ldexp(v26, 26);
  v29 = ldexp(floor(v28), v27 - 26);
  v30 = a2 - v29;
  v31 = v29 * v29 - a2 * a2 + (v29 + v29) * (a2 - v29);
  v32 = exp(-(a2 * a2));
  v6 = v32 * exp(-(v31 + v30 * v30)) / a2 * v25;
LABEL_25:
  if (v3)
    return 1.0 - v6;
  else
    return v6;
}

void boost::math::policies::detail::raise_error<std::overflow_error,double>(char *a1, const char *a2)
{
  char *v2;
  const char *v3;
  std::string *v4;
  std::string::size_type size;
  size_t v6;
  std::runtime_error v7;
  std::string v8;
  std::string v9;

  v2 = "Unknown function operating on type %1%";
  if (a1)
    v2 = a1;
  if (a2)
    v3 = a2;
  else
    v3 = "Cause unknown";
  std::string::basic_string[abi:ne180100]<0>(&v9, v2);
  std::string::basic_string[abi:ne180100]<0>(&v8, "Error in function ");
  boost::math::policies::detail::replace_all_in_string(&v9, "%1%", "double");
  if ((v9.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v4 = &v9;
  else
    v4 = (std::string *)v9.__r_.__value_.__r.__words[0];
  if ((v9.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v9.__r_.__value_.__r.__words[2]);
  else
    size = v9.__r_.__value_.__l.__size_;
  std::string::append(&v8, (const std::string::value_type *)v4, size);
  std::string::append(&v8, ": ", 2uLL);
  v6 = strlen(v3);
  std::string::append(&v8, v3, v6);
  std::runtime_error::runtime_error(&v7, &v8);
  v7.__vftable = (std::runtime_error_vtbl *)(MEMORY[0x1E0DE5030] + 16);
  boost::throw_exception<std::overflow_error>(&v7);
}

void sub_1BC98D73C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::runtime_error a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  std::runtime_error::~runtime_error(&a9);
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(a1);
}

void boost::throw_exception<std::overflow_error>(const std::runtime_error *a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x40uLL);
  boost::wrapexcept<std::overflow_error>::wrapexcept((uint64_t)exception, a1);
}

void sub_1BC98D7C0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::wrapexcept<std::overflow_error>::wrapexcept(uint64_t a1, const std::runtime_error *a2)
{
  *(_QWORD *)a1 = &unk_1E7543AC0;
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 8), a2);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = -1;
  *(_QWORD *)a1 = &unk_1E7543B58;
  *(_QWORD *)(a1 + 8) = &unk_1E7543B88;
  *(_QWORD *)(a1 + 24) = &unk_1E7543BB0;
  *(_QWORD *)(a1 + 32) = 0;
  return a1;
}

uint64_t boost::wrapexcept<std::overflow_error>::~wrapexcept(uint64_t a1)
{
  *(_QWORD *)(a1 + 24) = &unk_1E7543AF0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 32));
  std::runtime_error::~runtime_error((std::runtime_error *)(a1 + 8));
  return a1;
}

uint64_t boost::wrapexcept<std::overflow_error>::clone(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = operator new();
  *(_QWORD *)v2 = &unk_1E7543AC0;
  std::runtime_error::runtime_error((std::runtime_error *)(v2 + 8), (const std::runtime_error *)(a1 + 8));
  *(_QWORD *)(v2 + 8) = MEMORY[0x1E0DE5030] + 16;
  *(_QWORD *)(v2 + 24) = &unk_1E7543AF0;
  v3 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(v2 + 32) = v3;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *(_DWORD *)(v2 + 56) = *(_DWORD *)(a1 + 56);
  *(_QWORD *)v2 = &unk_1E7543B58;
  *(_QWORD *)(v2 + 8) = &unk_1E7543B88;
  *(_QWORD *)(v2 + 24) = &unk_1E7543BB0;
  boost::exception_detail::copy_boost_exception(v2 + 24, a1 + 24);
  return v2;
}

void sub_1BC98D948(_Unwind_Exception *a1)
{
  uint64_t v1;
  std::runtime_error *v2;

  std::runtime_error::~runtime_error(v2);
  MEMORY[0x1BCCFB8D8](v1, 0x10F1C40250A9ABCLL);
  _Unwind_Resume(a1);
}

void boost::wrapexcept<std::overflow_error>::rethrow(uint64_t a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x40uLL);
  boost::wrapexcept<std::overflow_error>::wrapexcept((uint64_t)exception, a1);
}

void sub_1BC98D9C8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void boost::wrapexcept<std::overflow_error>::~wrapexcept(uint64_t a1)
{
  *(_QWORD *)(a1 + 24) = &unk_1E7543AF0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 32));
  std::runtime_error::~runtime_error((std::runtime_error *)(a1 + 8));
  JUMPOUT(0x1BCCFB8D8);
}

void `non-virtual thunk to'boost::wrapexcept<std::overflow_error>::~wrapexcept(uint64_t a1)
{
  *(_QWORD *)(a1 + 16) = &unk_1E7543AF0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 24));
  std::runtime_error::~runtime_error((std::runtime_error *)a1);
}

{
  *(_QWORD *)(a1 + 16) = &unk_1E7543AF0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 24));
  std::runtime_error::~runtime_error((std::runtime_error *)a1);
  JUMPOUT(0x1BCCFB8D8);
}

void `non-virtual thunk to'boost::wrapexcept<std::overflow_error>::~wrapexcept(_QWORD *a1)
{
  *a1 = &unk_1E7543AF0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);
  std::runtime_error::~runtime_error((std::runtime_error *)a1 - 1);
}

{
  *a1 = &unk_1E7543AF0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);
  std::runtime_error::~runtime_error((std::runtime_error *)a1 - 1);
  JUMPOUT(0x1BCCFB8D8);
}

uint64_t boost::wrapexcept<std::overflow_error>::wrapexcept(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)a1 = &unk_1E7543AC0;
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 8), (const std::runtime_error *)(a2 + 8));
  *(_QWORD *)(a1 + 8) = MEMORY[0x1E0DE5030] + 16;
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = &unk_1E7543AF0;
  *(_QWORD *)(a1 + 32) = v4;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v5 = *(_OWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v5;
  *(_QWORD *)a1 = &unk_1E7543B58;
  *(_QWORD *)(a1 + 8) = &unk_1E7543B88;
  *(_QWORD *)(a1 + 24) = &unk_1E7543BB0;
  return a1;
}

void sub_1BC98DBF0(_Unwind_Exception *a1)
{
  std::runtime_error *v1;

  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

double boost::math::tools::evaluate_polynomial<7ul,long double,long double>(double *a1, double *a2)
{
  double v2;

  v2 = *a2;
  return v2 * v2 * (v2 * v2 * (a1[4] + a1[6] * (v2 * v2)) + a1[2])
       + *a1
       + *a2 * (v2 * v2 * (a1[3] + a1[5] * (v2 * v2)) + a1[1]);
}

double boost::math::detail::ibeta_imp<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(uint64_t a1, unsigned int a2, int a3, double *a4, double a5, double a6, double a7, double a8, double a9, double a10, double a11, double a12)
{
  int v14;
  double v16;
  double v17;
  double v18;
  double v19;
  char *v21;
  char *v22;
  double v23;
  double v24;
  double v25;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  int v50;
  double v51;
  double v52;
  long double v53;
  long double v54;
  long double v55;
  double v56;
  char v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  long double v64;
  long double v65;
  long double v66;
  int v67;
  double v68;
  double v69;
  double v70;
  double v71;
  int v72;
  double v73;
  double v74;
  double v75;
  int v76;
  double v77;
  long double v78;
  long double v79;
  long double v80;
  double v81;
  double v82;
  double v83;
  double v84;
  int v85;
  double v86;
  double v87;
  double v88;
  double v89;
  double v90;
  double v91;
  double v92;
  double v93;
  double v94;
  double v95;
  double v96;
  double v97;
  double v98;
  double v99;
  double v100;
  double v101;
  double v102;
  int v103;
  double v104;
  double v105;
  double v106;
  double v107;
  double v108;
  double v109;
  double v110;
  double v111;
  long double v112;
  long double v113;
  double v114;
  double v115;
  uint64_t v116;
  int v117;
  double v118;
  double v119;
  double v120;
  long double v121;
  long double v122;
  double v123;
  uint64_t v124;
  int v125;
  double v126;
  double v127;
  double v128;
  double v129;
  double v130;
  BOOL v131;
  double v132;
  double v133;
  double v134;
  double v135;
  double v136;
  double v137;

  v14 = a2;
  v16 = a7;
  v17 = a6;
  v18 = a5;
  v136 = a6;
  v137 = a5;
  v135 = a7;
  if (a4 && (a3 & 1) == 0)
    boost::math::detail::ibeta_imp<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>();
  if (a4)
    *a4 = -1.0;
  v19 = 1.0;
  if (a7 < 0.0 || a7 > 1.0)
  {
    v21 = (char *)boost::math::detail::ibeta_imp<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(long double,long double,long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy> const&,BOOL,BOOL,long double*)::function;
    v22 = "Parameter x outside the range [0,1] in the incomplete beta function (got x=%1%).";
    goto LABEL_33;
  }
  if (a3)
  {
    if (v18 < 0.0)
    {
      v21 = (char *)boost::math::detail::ibeta_imp<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(long double,long double,long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy> const&,BOOL,BOOL,long double*)::function;
      v22 = "The argument a to the incomplete beta function must be >= zero (got a=%1%).";
      goto LABEL_33;
    }
    if (a6 < 0.0)
    {
      v21 = (char *)boost::math::detail::ibeta_imp<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(long double,long double,long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy> const&,BOOL,BOOL,long double*)::function;
      v22 = "The argument b to the incomplete beta function must be >= zero (got b=%1%).";
      goto LABEL_33;
    }
    if (v18 == 0.0)
    {
      if (a6 == 0.0)
      {
        v21 = (char *)boost::math::detail::ibeta_imp<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(long double,long double,long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy> const&,BOOL,BOOL,long double*)::function;
        v22 = "The arguments a and b to the incomplete beta function cannot both be zero, with x=%1%.";
LABEL_33:
        boost::math::policies::detail::raise_error<std::domain_error,long double>(v21, v22);
      }
      if (a6 > 0.0)
        return (double)(a2 ^ 1);
    }
    else if (v18 > 0.0 && a6 == 0.0)
    {
      return (double)a2;
    }
  }
  else
  {
    if (v18 <= 0.0)
    {
      v21 = (char *)boost::math::detail::ibeta_imp<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(long double,long double,long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy> const&,BOOL,BOOL,long double*)::function;
      v22 = "The argument a to the incomplete beta function must be greater than zero (got a=%1%).";
      goto LABEL_33;
    }
    if (a6 <= 0.0)
    {
      v21 = (char *)boost::math::detail::ibeta_imp<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(long double,long double,long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy> const&,BOOL,BOOL,long double*)::function;
      v22 = "The argument b to the incomplete beta function must be greater than zero (got b=%1%).";
      goto LABEL_33;
    }
  }
  if (a7 == 0.0)
  {
    if (a4)
    {
      v23 = 4.45014772e-308;
      a7 = 8.98846567e307;
      if (v18 < 1.0)
        v23 = 8.98846567e307;
      if (v18 != 1.0)
        v19 = v23;
      *a4 = v19;
    }
    if (a2)
      v24 = 1.0;
    else
      v24 = 0.0;
    if (a2 && (a3 & 1) == 0)
    {
      boost::math::detail::beta_imp<long double,boost::math::lanczos::lanczos13m53,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(v18, v17, a7, a8, a9, a10, a11, a12);
      v24 = v25;
      if (fabs(v25) > 1.79769313e308)
        boost::math::policies::detail::raise_error<std::overflow_error,long double>("boost::math::beta<%1%>(%1%,%1%)", "numeric overflow");
    }
    return v24;
  }
  if (a7 != 1.0)
  {
    v28 = 1.0 - a7;
    if (v18 == 0.5 && a6 == 0.5)
    {
      if (a4)
        *a4 = sqrt(v28 * a7) * 0.318309886;
      if (a2)
        v29 = 1.0 - a7;
      else
        v29 = a7;
      v30 = asinl(sqrt(v29)) / 1.57079633;
      if (a3)
        return v30;
      else
        return v30 * 3.14159265;
    }
    if (v18 == 1.0)
    {
      v14 = a2 ^ 1;
      v31 = a7;
      goto LABEL_70;
    }
    if (a6 == 1.0)
    {
      v31 = 1.0 - a7;
      v17 = v18;
      v28 = a7;
LABEL_70:
      if (v17 == 1.0)
      {
        if (a4)
          *a4 = 1.0;
        if (v14)
          return v31;
        else
          return v28;
      }
      if (a4)
        *a4 = v17 * pow(v28, v17 + -1.0);
      if (v31 >= 0.5)
      {
        if (v14)
        {
          v33 = boost::math::detail::powm1_imp<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(a1, v28, v17);
          goto LABEL_83;
        }
        v38 = pow(v28, v17);
      }
      else
      {
        v32 = v17
            * boost::math::log1p<boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(-v31);
        if (v14)
        {
          v33 = boost::math::expm1<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(v32);
LABEL_83:
          v24 = -v33;
          goto LABEL_96;
        }
        v38 = exp(v32);
      }
      v24 = v38;
LABEL_96:
      if ((a3 & 1) == 0)
        return v24 / v17;
      return v24;
    }
    if (a6 >= v18)
      v34 = v18;
    else
      v34 = a6;
    if (v34 > 1.0)
    {
      v35 = -(a6 - (a6 + v18) * v28);
      if (v18 < a6)
        v35 = v18 - (a6 + v18) * a7;
      if (v35 >= 0.0)
      {
        v36 = a7;
        v37 = v18;
        v18 = a6;
        v16 = 1.0 - a7;
      }
      else
      {
        v136 = v18;
        v137 = a6;
        v14 = a2 ^ 1;
        v36 = 1.0 - a7;
        v37 = a6;
        v135 = 1.0 - a7;
      }
      if (v18 >= 40.0)
      {
        v53 = v37;
        v54 = v18;
        v55 = v36;
        v56 = v16;
        v57 = a3;
LABEL_123:
        v24 = boost::math::detail::ibeta_fraction2<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(a1, v57, a4, v53, v54, v55, v56, a9, a10, a11, a12);
LABEL_182:
        if (a4)
        {
          v128 = *a4;
          v42 = v135;
          if (*a4 < 0.0)
          {
            boost::math::detail::ibeta_power_terms<long double,boost::math::lanczos::lanczos13m53,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(v137, v136, v135, v16, 1.0, v45, v46, v47, (uint64_t)&v134, 1, a1, "boost::math::ibeta<%1%>(%1%, %1%, %1%)");
            *a4 = v128;
            v42 = v135;
          }
          if (v128 != 0.0)
          {
            v129 = v16 * v42;
            v42 = v16 * v42 * 1.79769313e308;
            v130 = v128 / v129;
            v131 = v42 < v128;
            v132 = 8.98846567e307;
            if (!v131)
              v132 = v130;
            *a4 = v132;
          }
        }
        if (v14)
        {
          v133 = 1.0;
          if ((a3 & 1) == 0)
            v133 = boost::math::beta<long double,long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(v137, v136, v42, v43, v44, v45, v46, v47);
          return v133 - v24;
        }
        return v24;
      }
      v41 = floor(v18);
      if (v41 == v18 && floor(v37) == v37 && v37 < 2147483550.0 && v16 != 1.0)
      {
        v24 = boost::math::detail::binomial_ccdf<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(v18 + v37 + -1.0, v37 + -1.0, v36, v16);
        if ((a3 & 1) == 0)
          v24 = v24
              * boost::math::beta<long double,long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(v37, v18, v42, v43, v44, v45, v46, v47);
        goto LABEL_182;
      }
      if (v18 * v36 > 0.7)
      {
        if (v37 > 15.0)
        {
          v134 = v41;
          v67 = boost::math::itrunc<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(&v134);
          v72 = v67 - (v136 == (double)v67);
          v73 = v136 - (double)v72;
          v74 = 1.0;
          if ((a3 & 1) == 0 && v72 >= 1)
          {
            v75 = 0.0;
            v76 = v72;
            do
            {
              v69 = v73 + v75;
              v68 = (v73 + v137 + v75) / (v73 + v75);
              v74 = v74 * v68;
              v75 = v75 + 1.0;
              --v76;
            }
            while (v76);
          }
          boost::math::detail::ibeta_a_step<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(v72, a1, a3, 0, v136 - (double)v72, v137, v16, v135, v68, v69, v70, v71);
          v24 = boost::math::detail::beta_small_b_large_a_series<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(a1, a3, v137, v73, v135, v16, v77, 1.0)/ v74;
          goto LABEL_182;
        }
        if (a3)
        {
          v134 = v41;
          v85 = boost::math::itrunc<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(&v134);
          v90 = v136 - (double)v85;
          if (v90 > 0.0)
            v91 = v136 - (double)v85;
          else
            v91 = v90 + 1.0;
          boost::math::detail::ibeta_a_step<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(v85 - (v90 <= 0.0), a1, 1, 0, v91, v137, v16, v135, v86, v87, v88, v89);
          v93 = v92;
          boost::math::detail::ibeta_a_step<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(20, a1, 1, 0, v137, v91, v135, v16, v94, v95, v96, v97);
          v99 = v93 + v98;
          if (v14)
            v100 = v99 + -1.0;
          else
            v100 = v99;
          v101 = boost::math::detail::beta_small_b_large_a_series<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(a1, 1, v137 + 20.0, v91, v135, v16, v100, 1.0);
          if (v14)
            v24 = -v101;
          else
            v24 = v101;
          goto LABEL_164;
        }
        v53 = v37;
        v54 = v18;
        v55 = v36;
        v56 = v16;
        v57 = 0;
        goto LABEL_123;
      }
      if ((v14 & 1) != 0)
      {
        v82 = 1.0;
        if ((a3 & 1) == 0)
          v82 = boost::math::beta<long double,long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(v37, v18, 0.7, a8, a9, a10, a11, a12);
        v63 = -v82;
        v64 = v37;
        v65 = v18;
        v66 = v36;
LABEL_148:
        v14 = 0;
        v24 = -boost::math::detail::ibeta_series<long double,boost::math::lanczos::lanczos13m53,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(v64, v65, v66, v63, v16, a10, a11, a12, (uint64_t)&v134, a3, a4);
        goto LABEL_182;
      }
      v78 = v37;
      v79 = v18;
      v80 = v36;
      goto LABEL_163;
    }
    if (a7 <= 0.5)
    {
      v39 = a7;
      v40 = v18;
      v18 = a6;
      v16 = 1.0 - a7;
    }
    else
    {
      v136 = v18;
      v137 = a6;
      v14 = a2 ^ 1;
      v39 = 1.0 - a7;
      v40 = a6;
      v135 = 1.0 - a7;
    }
    if (v40 >= v18)
      v48 = v40;
    else
      v48 = v18;
    if (v48 <= 1.0)
    {
      v58 = pow(v39, v40);
      if (v40 < fmin(v18, 0.2) && v58 > 0.9)
      {
        v136 = v40;
        v137 = v18;
        v135 = v16;
        if (v39 < 0.3)
        {
          if ((a3 & 1) == 0)
          {
            v102 = 0.0;
            v103 = 20;
            v51 = 1.0;
            do
            {
              v52 = v18 + v102;
              v51 = v51 * ((v18 + v40 + v102) / (v18 + v102));
              v102 = v102 + 1.0;
              --v103;
            }
            while (v103);
            goto LABEL_167;
          }
LABEL_128:
          boost::math::detail::ibeta_a_step<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(20, a1, 1, a4, v18, v40, v16, v39, a9, a10, a11, a12);
          v60 = v59;
          v51 = 1.0;
          v61 = 1.0;
          if (v14)
          {
LABEL_168:
            v111 = v18 + 20.0;
            v112 = v40;
            v113 = v16;
            v114 = v39;
            v115 = v60;
            v116 = a1;
            v117 = a3;
            v118 = v51;
LABEL_171:
            v81 = boost::math::detail::beta_small_b_large_a_series<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(v116, v117, v111, v112, v113, v114, v115, v118);
            goto LABEL_172;
          }
          goto LABEL_175;
        }
LABEL_142:
        if (v14)
        {
          v81 = boost::math::detail::ibeta_series<long double,boost::math::lanczos::lanczos13m53,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(v18, v40, v16, 0.0, v39, a10, a11, a12, (uint64_t)&v134, a3, a4);
LABEL_172:
          v24 = v81;
          v14 = 0;
LABEL_181:
          v16 = v39;
          goto LABEL_182;
        }
        v83 = 1.0;
        if ((a3 & 1) == 0)
          v83 = boost::math::beta<long double,long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(v18, v40, a7, a8, a9, a10, a11, a12);
        v84 = boost::math::detail::ibeta_series<long double,boost::math::lanczos::lanczos13m53,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(v18, v40, v16, -v83, v39, a10, a11, a12, (uint64_t)&v134, a3, a4);
LABEL_180:
        v14 = 0;
        v24 = -v84;
        goto LABEL_181;
      }
    }
    else if (v18 > 1.0 && (v39 >= 0.1 || pow(v18 * v39, v40) > 0.7))
    {
      v136 = v40;
      v137 = v18;
      v135 = v16;
      if (v39 < 0.3)
      {
        if (v18 >= 15.0)
        {
          if (v14)
          {
            v115 = 0.0;
            v118 = 1.0;
            v111 = v18;
            v112 = v40;
            v113 = v16;
            v114 = v39;
            v116 = a1;
            v117 = a3;
            goto LABEL_171;
          }
          v127 = 1.0;
          if ((a3 & 1) == 0)
            v127 = boost::math::beta<long double,long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(v18, v40, a7, a8, a9, a10, a11, a12);
          v119 = -v127;
          v126 = 1.0;
          v120 = v18;
          v121 = v40;
          v122 = v16;
          v123 = v39;
          v124 = a1;
          v125 = a3;
          goto LABEL_179;
        }
        if ((a3 & 1) == 0)
        {
          v49 = 0.0;
          v50 = 20;
          v51 = 1.0;
          do
          {
            v52 = v18 + v49;
            v51 = v51 * ((v18 + v40 + v49) / (v18 + v49));
            v49 = v49 + 1.0;
            --v50;
          }
          while (v50);
LABEL_167:
          boost::math::detail::ibeta_a_step<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(20, a1, 0, a4, v18, v40, v16, v39, v52, a10, a11, a12);
          v60 = v110;
          if ((v14 & 1) != 0)
            goto LABEL_168;
          v61 = boost::math::beta<long double,long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(v18, v40, v104, v105, v106, v107, v108, v109);
LABEL_175:
          v119 = v60 - v61;
          v120 = v18 + 20.0;
          v121 = v40;
          v122 = v16;
          v123 = v39;
          v124 = a1;
          v125 = a3;
          v126 = v51;
LABEL_179:
          v84 = boost::math::detail::beta_small_b_large_a_series<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(v124, v125, v120, v121, v122, v123, v119, v126);
          goto LABEL_180;
        }
        goto LABEL_128;
      }
      goto LABEL_142;
    }
    if ((v14 & 1) != 0)
    {
      v62 = 1.0;
      if ((a3 & 1) == 0)
        v62 = boost::math::beta<long double,long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(v40, v18, a7, a8, a9, a10, a11, a12);
      v63 = -v62;
      v64 = v40;
      v65 = v18;
      v66 = v39;
      goto LABEL_148;
    }
    v78 = v40;
    v79 = v18;
    v80 = v39;
LABEL_163:
    v24 = boost::math::detail::ibeta_series<long double,boost::math::lanczos::lanczos13m53,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(v78, v79, v80, 0.0, v16, a10, a11, a12, (uint64_t)&v134, a3, a4);
LABEL_164:
    v14 = 0;
    goto LABEL_182;
  }
  if (a4)
  {
    v27 = 4.45014772e-308;
    a7 = 8.98846567e307;
    if (v17 < 1.0)
      v27 = 8.98846567e307;
    if (v17 != 1.0)
      v19 = v27;
    *a4 = v19;
  }
  if (a2)
    v24 = 0.0;
  else
    v24 = 1.0;
  if ((a2 & 1) != 0 || (a3 & 1) != 0)
    return v24;
  return boost::math::beta<long double,long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(v18, v17, a7, a8, a9, a10, a11, a12);
}

double boost::math::beta<long double,long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8)
{
  double result;

  boost::math::detail::beta_imp<long double,boost::math::lanczos::lanczos13m53,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(a1, a2, a3, a4, a5, a6, a7, a8);
  if (fabs(result) > 1.79769313e308)
    boost::math::policies::detail::raise_error<std::overflow_error,long double>("boost::math::beta<%1%>(%1%,%1%)", "numeric overflow");
  return result;
}

double boost::math::expm1<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(double a1)
{
  double v1;

  v1 = boost::math::detail::expm1_imp<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(a1);
  if (fabs(v1) > 1.79769313e308)
    boost::math::policies::detail::raise_error<std::overflow_error,long double>("boost::math::expm1<%1%>(%1%)", "numeric overflow");
  return v1;
}

double boost::math::log1p<boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(long double a1)
{
  if (a1 < -1.0)
    boost::math::policies::detail::raise_error<std::domain_error,long double>("log1p<%1%>(%1%)", "log1p(x) requires x > -1, but got x = %1%.");
  if (a1 == -1.0)
    boost::math::policies::detail::raise_error<std::overflow_error,long double>("log1p<%1%>(%1%)", "Overflow Error");
  return log1pl(a1);
}

double boost::math::detail::ibeta_series<long double,boost::math::lanczos::lanczos13m53,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(long double a1, long double a2, long double a3, double a4, long double a5, double a6, double a7, double a8, uint64_t a9, int a10, long double *a11)
{
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  long double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  long double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  long double v45;
  long double v46;
  long double v47;
  double v48;
  double v49;
  int v50;
  uint64_t v51;
  long double v52;
  double v53;
  unint64_t v54;
  long double v56;
  double v57;
  double v58;
  double __x;
  double v61;
  long double __y;
  double v63;
  double v64;

  v14 = a1;
  __y = a2;
  v63 = a1;
  if (a11 && (a10 & 1) == 0)
    boost::math::detail::ibeta_series<long double,boost::math::lanczos::lanczos13m53,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>();
  if (!a10)
  {
    v44 = pow(a3, a1);
LABEL_14:
    v48 = v44;
    goto LABEL_15;
  }
  v64 = a1 + a2;
  v15 = a1 + 6.02468004 + -0.5;
  v16 = a2 + 6.02468004;
  v17 = v16 + -0.5;
  v18 = v64 + 6.02468004 + -0.5;
  v19 = boost::math::tools::detail::evaluate_rational_c_imp<long double,unsigned int,long double>((uint64_t)&boost::math::lanczos::lanczos13m53::lanczos_sum_expG_scaled<long double>(long double const&)::num, (uint64_t)&boost::math::lanczos::lanczos13m53::lanczos_sum_expG_scaled<long double>(long double const&)::denom, &v64, v64 + 6.02468004, v16, 6.02468004, a1 + 6.02468004, a5, a6, a7, a8);
  v27 = boost::math::tools::detail::evaluate_rational_c_imp<long double,unsigned int,long double>((uint64_t)&boost::math::lanczos::lanczos13m53::lanczos_sum_expG_scaled<long double>(long double const&)::num, (uint64_t)&boost::math::lanczos::lanczos13m53::lanczos_sum_expG_scaled<long double>(long double const&)::denom, &v63, v19, v20, v21, v22, v23, v24, v25, v26);
  __x = v19
      / (v27
       * boost::math::tools::detail::evaluate_rational_c_imp<long double,unsigned int,long double>((uint64_t)&boost::math::lanczos::lanczos13m53::lanczos_sum_expG_scaled<long double>(long double const&)::num, (uint64_t)&boost::math::lanczos::lanczos13m53::lanczos_sum_expG_scaled<long double>(long double const&)::denom, &__y, v27, v28, v29, v30, v31, v32, v33, v34));
  v57 = v18 / v17;
  v58 = v17;
  v35 = log(v18 / v17);
  v36 = __y;
  v37 = __y + -0.5;
  v38 = v35 * (__y + -0.5);
  v61 = v15;
  v39 = v18 * a3 / v15;
  v40 = log(v39);
  v14 = v63;
  v41 = v40 * v63;
  if (v38 <= -708.0 || v38 >= 709.0 || v41 <= -708.0 || v41 >= 709.0)
  {
    v45 = v41 + log(__x) + v38;
    v46 = (log(v61) + -1.0) * 0.5 + v45;
    if (a11)
    {
      v47 = log(a5);
      *a11 = exp(v46 + v36 * v47);
    }
    v44 = exp(v46);
    goto LABEL_14;
  }
  if (v36 * v63 >= v58 * 10.0)
  {
    v43 = pow(v57, v37);
  }
  else
  {
    v42 = boost::math::log1p<boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(v63 / v58);
    v43 = exp(v37 * v42);
    v14 = v63;
  }
  v48 = sqrt(v61 / 2.71828183) * (__x * v43 * pow(v39, v14));
  if (a11)
  {
    v56 = v48 * pow(a5, __y);
    *a11 = v56;
    if (v56 < 0.0)
      boost::math::detail::ibeta_series<long double,boost::math::lanczos::lanczos13m53,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>();
  }
LABEL_15:
  if (v48 >= 2.22507386e-308)
  {
    v49 = 1.0 - __y;
    v50 = 1;
    v51 = 1000000;
    do
    {
      a4 = v48 / v14 + a4;
      if (fabs(a4 * 2.22044605e-16) >= fabs(v48 / v14))
        break;
      v52 = v49 * a3;
      v49 = v49 + 1.0;
      v53 = (double)v50++;
      v48 = v48 * (v52 / v53);
      v14 = v14 + 1.0;
      --v51;
    }
    while (v51);
    v54 = 1000000 - v51;
    if (v54 >= 0xF4240)
    {
      v64 = (double)v54;
      boost::math::policies::detail::raise_error<boost::math::evaluation_error,long double>("boost::math::ibeta<%1%>(%1%, %1%, %1%) in ibeta_series (with lanczos)", "Series evaluation exceeded %1% iterations, giving up now.");
    }
  }
  return a4;
}

void boost::math::detail::ibeta_a_step<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(int a1, uint64_t a2, char a3, double *a4, long double a5, long double a6, long double a7, double a8, double a9, double a10, double a11, double a12)
{
  double v17;
  double v18;
  int v19;
  double v20;
  double v21;
  char v22;

  boost::math::detail::ibeta_power_terms<long double,boost::math::lanczos::lanczos13m53,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(a5, a6, a7, a8, 1.0, a10, a11, a12, (uint64_t)&v22, a3, a2, "boost::math::ibeta<%1%>(%1%, %1%, %1%)");
  if (a4)
  {
    *a4 = v17;
    if (v17 < 0.0)
      boost::math::detail::ibeta_a_step<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>();
  }
  if (v17 / a5 != 0.0)
  {
    v18 = 1.0;
    if (a1 >= 2)
    {
      v19 = a1 - 1;
      v20 = 0.0;
      v21 = 1.0;
      do
      {
        v21 = v21 * ((a5 + a6 + v20) * a7 / (v20 + a5 + 1.0));
        v18 = v18 + v21;
        v20 = v20 + 1.0;
        --v19;
      }
      while (v19);
    }
  }
}

double boost::math::detail::beta_small_b_large_a_series<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(uint64_t a1, int a2, double a3, long double a4, long double a5, double a6, double a7, double a8)
{
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  long double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  uint64_t v37;
  double v38;
  uint64_t v39;
  unint64_t v40;
  double v41;
  double v42;
  double v43;
  double v44;
  unsigned int v45;
  uint64_t v46;
  double *v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v54;
  char v55;
  double v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  uint64_t v81;
  uint64_t v82;

  v82 = *MEMORY[0x1E0C80C00];
  v14 = a4 + -1.0;
  v15 = (a4 + -1.0) * 0.5 + a3;
  if (a6 >= 0.35)
  {
    v16 = log(a5);
  }
  else
  {
    v56 = -a6;
    if (a6 > 1.0)
      boost::math::policies::detail::raise_error<std::domain_error,long double>("log1p<%1%>(%1%)", "log1p(x) requires x > -1, but got x = %1%.");
    if (a6 == 1.0)
      boost::math::policies::detail::raise_error<std::overflow_error,long double>("log1p<%1%>(%1%)", "Overflow Error");
    v16 = log1pl(-a6);
  }
  v54 = v16;
  v17 = -(v15 * v16);
  v24 = boost::math::detail::regularised_gamma_prefix<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>,boost::math::lanczos::lanczos13m53>(a1, (uint64_t)&v56, a4, v17);
  if (v24 > 2.22507386e-308)
  {
    if (a2)
    {
      v25 = boost::math::detail::tgamma_delta_ratio_imp<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(a3, a4, v18, v19, v20, v21, v22, v23);
      if (fabs(v25) > 1.79769313e308)
        boost::math::policies::detail::raise_error<std::overflow_error,long double>("boost::math::tgamma_delta_ratio<%1%>(%1%, %1%)", "numeric overflow");
      v26 = v24 / v25;
    }
    else
    {
      boost::math::detail::full_igamma_prefix<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(a4, v17);
      v26 = v27;
    }
    v28 = pow(v15, a4);
    v79 = 0u;
    v80 = 0u;
    v77 = 0u;
    v78 = 0u;
    v75 = 0u;
    v76 = 0u;
    v73 = 0u;
    v74 = 0u;
    v81 = 0;
    v72 = 0u;
    v71 = 0u;
    v70 = 0u;
    v69 = 0u;
    v68 = 0u;
    v67 = 0u;
    v66 = 0u;
    v65 = 0u;
    v29 = v26 / v28 * a8;
    v63 = 0u;
    v64 = 0u;
    v61 = 0u;
    v62 = 0u;
    v59 = 0u;
    v60 = 0u;
    v57 = 0u;
    v58 = 0u;
    v56 = 1.0;
    v36 = boost::math::detail::gamma_incomplete_imp<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(1, 1, (uint64_t)&v55, 0, a4, (__n128)*(unint64_t *)&v17, v30, v31, v32, v33, v34, v35);
    if (fabs(v36) > 1.79769313e308)
      boost::math::policies::detail::raise_error<std::overflow_error,long double>("gamma_q<%1%>(%1%, %1%)", "numeric overflow");
    v37 = 0;
    v38 = v36 / v24;
    a7 = a7 + v29 * (v36 / v24);
    v39 = 1;
    v40 = 1;
    v41 = a4;
    v42 = 1.0;
    do
    {
      *(&v56 + v40) = 0.0;
      v43 = (double)v40;
      v44 = 0.0;
      if (v40 >= 2)
      {
        v45 = 1;
        v46 = v37;
        v47 = (double *)&qword_1BCAB8250;
        do
        {
          v48 = *v47;
          v47 += 2;
          v44 = v44 + ((double)v45 * a4 - v43) * *(&v56 + v46) / v48;
          *(&v56 + v40) = v44;
          ++v45;
          --v46;
        }
        while (v46);
      }
      v39 += 2;
      v49 = v44 / v43 + v14 / dbl_1BCAB8238[v39];
      *(&v56 + v40) = v49;
      v38 = (v42 * (v17 + v41 + 1.0) + v41 * (v41 + 1.0) * v38) / (v15 * (v15 * 4.0));
      v50 = v38 * (v29 * v49);
      a7 = a7 + v50;
      if (v50 <= 1.0)
      {
        v51 = fabs(v50 * 4.50359963e15);
        v52 = fabs(a7);
      }
      else
      {
        v51 = fabs(v50);
        v52 = fabs(a7 * 2.22044605e-16);
      }
      if (v51 < v52)
        break;
      v42 = v54 * 0.5 * (v54 * 0.5) * v42;
      v41 = v41 + 2.0;
      ++v40;
      ++v37;
    }
    while (v40 != 50);
  }
  return a7;
}

double boost::math::detail::binomial_ccdf<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(double a1, double a2, long double a3, long double a4)
{
  double v8;
  double v9;
  double v10;
  double v13;
  double v14;
  double v16;
  double v17;
  double v18;
  unsigned int v20;
  double v21;
  unsigned int v22;
  double v23;
  signed int v24;
  double v25;
  double v26;
  double v29;
  double v30;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v43;
  double v44;
  double v45;
  double v46;
  _BOOL4 v47;
  unsigned int v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  unsigned int v60;
  double v61;
  double v62;
  unsigned int v63;
  double v64;
  double v66;

  v8 = pow(a3, a1);
  if (v8 <= 2.22507386e-308)
  {
    v16 = a1 * a3;
    if (COERCE__INT64(fabs(a1 * a3)) >= 0x7FF0000000000000)
      boost::math::policies::detail::raise_error<boost::math::rounding_error,long double>("boost::math::trunc<%1%>(%1%)", "Value %1% can not be represented in the target integer type.");
    v17 = floor(v16);
    v18 = ceil(v16);
    if (v16 < 0.0)
      v17 = v18;
    if (v17 > 2147483650.0 || v17 < -2147483650.0)
      boost::math::policies::detail::raise_error<boost::math::rounding_error,long double>("boost::math::itrunc<%1%>(%1%)", "Value %1% can not be represented in the target integer type.");
    v24 = (int)v17;
    if (a2 + 1.0 >= (double)v24)
    {
      v25 = a2 + 2.0;
      v26 = fabs(a2 + 2.0);
      if ((unint64_t)(*(_QWORD *)&v26 - 0x10000000000000) >> 53 >= 0x3FF
        && (unint64_t)(*(_QWORD *)&v26 - 1) >= 0xFFFFFFFFFFFFFLL
        && COERCE__INT64(a2 + 2.0) != 0)
      {
        boost::math::policies::detail::raise_error<boost::math::rounding_error,long double>("boost::math::trunc<%1%>(%1%)", "Value %1% can not be represented in the target integer type.");
      }
      v29 = floor(v25);
      v30 = ceil(v25);
      if (v25 < 0.0)
        v29 = v30;
      if (v29 > 2147483650.0 || v29 < -2147483650.0)
        boost::math::policies::detail::raise_error<boost::math::rounding_error,long double>("boost::math::itrunc<%1%>(%1%)", "Value %1% can not be represented in the target integer type.");
      v24 = (int)v29;
    }
    v32 = pow(a3, (double)v24);
    v39 = v32 * pow(a4, a1 - (double)v24);
    if ((*(_QWORD *)&a1 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
      boost::math::policies::detail::raise_error<boost::math::rounding_error,long double>("boost::math::trunc<%1%>(%1%)", "Value %1% can not be represented in the target integer type.");
    v40 = floor(a1);
    v41 = ceil(a1);
    if (a1 < 0.0)
      v40 = v41;
    if (v40 > 2147483650.0 || v40 < -2147483650.0)
      boost::math::policies::detail::raise_error<boost::math::rounding_error,long double>("boost::math::itrunc<%1%>(%1%)", "Value %1% can not be represented in the target integer type.");
    boost::math::binomial_coefficient<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>((int)v40, v24, v40, -2147483650.0, v33, v34, v35, v36, v37, v38);
    v23 = v39 * v43;
    v44 = (double)(v24 - 1);
    if (v23 == 0.0)
    {
      if (v44 > a2)
      {
        v45 = floor(a1);
        v46 = ceil(a1);
        if (a1 >= 0.0)
          v46 = v45;
        v66 = v46;
        v47 = v46 < -2147483650.0 || v46 > 2147483650.0;
        v48 = v24 - 2;
        do
        {
          v49 = pow(a3, (double)(int)(v48 + 1));
          v57 = pow(a4, a1 - v44);
          if ((*(_QWORD *)&a1 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
            boost::math::policies::detail::raise_error<boost::math::rounding_error,long double>("boost::math::trunc<%1%>(%1%)", "Value %1% can not be represented in the target integer type.");
          if (v47)
            boost::math::policies::detail::raise_error<boost::math::rounding_error,long double>("boost::math::itrunc<%1%>(%1%)", "Value %1% can not be represented in the target integer type.");
          if (((v48 + 1) & 0x80000000) != 0)
            boost::math::policies::detail::raise_error<boost::math::rounding_error,double>("boost::math::itrunc<%1%>(%1%)", "Value %1% can not be represented in the target integer type.");
          boost::math::binomial_coefficient<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>((int)v66, v48 + 1, v66, v50, v51, v52, v53, v54, v55, v56);
          v23 = v23 + v49 * v57 * v58;
          v44 = (double)v48--;
        }
        while (v44 > a2);
      }
    }
    else
    {
      v59 = v23;
      if (v44 > a2)
      {
        v60 = v24;
        v61 = v23;
        v59 = v23;
        do
        {
          v61 = v61 * ((double)v60 * a4 / ((a1 - v44) * a3));
          v59 = v59 + v61;
          v44 = (double)(v60 - 2);
          --v60;
        }
        while (v44 > a2);
      }
      v62 = (double)(v24 + 1);
      if (v62 <= a1)
      {
        v63 = v24 + 2;
        v64 = v23;
        v23 = v59;
        do
        {
          v64 = v64 * ((a1 - v62 + 1.0) * a3 / (v62 * a4));
          v23 = v23 + v64;
          v62 = (double)v63++;
        }
        while (v62 <= a1);
      }
      else
      {
        return v59;
      }
    }
  }
  else
  {
    v9 = a1 + -1.0;
    v10 = fabs(a1 + -1.0);
    if ((unint64_t)(*(_QWORD *)&v10 - 0x10000000000000) >> 53 >= 0x3FF
      && (unint64_t)(*(_QWORD *)&v10 - 1) >= 0xFFFFFFFFFFFFFLL
      && COERCE__INT64(a1 + -1.0) != 0)
    {
      boost::math::policies::detail::raise_error<boost::math::rounding_error,long double>("boost::math::trunc<%1%>(%1%)", "Value %1% can not be represented in the target integer type.");
    }
    v13 = floor(v9);
    v14 = ceil(v9);
    if (v9 < 0.0)
      v13 = v14;
    if (v13 > 2147483650.0 || v13 < -2147483650.0)
      boost::math::policies::detail::raise_error<boost::math::rounding_error,long double>("boost::math::itrunc<%1%>(%1%)", "Value %1% can not be represented in the target integer type.");
    v20 = (int)v13;
    v21 = (double)v20;
    if ((double)v20 <= a2)
    {
      return v8;
    }
    else
    {
      v22 = v20 + 1;
      v23 = v8;
      do
      {
        v8 = v8 * ((double)v22 * a4 / ((a1 - v21) * a3));
        v23 = v23 + v8;
        v21 = (double)(v22 - 2);
        --v22;
      }
      while (v21 > a2);
    }
  }
  return v23;
}

uint64_t boost::math::itrunc<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(double *a1)
{
  double v1;
  double v2;
  double v3;

  v1 = *a1;
  if ((*(_QWORD *)a1 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    boost::math::policies::detail::raise_error<boost::math::rounding_error,long double>("boost::math::trunc<%1%>(%1%)", "Value %1% can not be represented in the target integer type.");
  v2 = floor(v1);
  v3 = ceil(v1);
  if (v1 < 0.0)
    v2 = v3;
  if (v2 > 2147483650.0 || v2 < -2147483650.0)
    boost::math::policies::detail::raise_error<boost::math::rounding_error,long double>("boost::math::itrunc<%1%>(%1%)", "Value %1% can not be represented in the target integer type.");
  return (int)v2;
}

double boost::math::detail::ibeta_fraction2<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(uint64_t a1, char a2, double *a3, long double a4, long double a5, long double a6, double a7, double a8, double a9, double a10, double a11)
{
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  uint64_t v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  _QWORD v29[4];
  int v30;

  boost::math::detail::ibeta_power_terms<long double,boost::math::lanczos::lanczos13m53,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(a4, a5, a6, a7, 1.0, a9, a10, a11, (uint64_t)v29, a2, a1, "boost::math::ibeta<%1%>(%1%, %1%, %1%)");
  v17 = v16;
  if (a3)
  {
    *a3 = v16;
    if (v16 < 0.0)
      boost::math::detail::ibeta_fraction2<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>();
  }
  if (v16 != 0.0)
  {
    *(long double *)v29 = a4;
    *(long double *)&v29[1] = a5;
    *(long double *)&v29[2] = a6;
    *(double *)&v29[3] = a7;
    v30 = 0;
    boost::math::detail::ibeta_fraction2_t<long double>::operator()((uint64_t)v29);
    if (v18 == 0.0)
      v19 = 3.56011817e-307;
    else
      v19 = v18;
    v20 = 0.0;
    v21 = 2;
    v22 = v19;
    do
    {
      v23 = boost::math::detail::ibeta_fraction2_t<long double>::operator()((uint64_t)v29);
      v25 = v24 + v23 * v20;
      v26 = v24 + v23 / v22;
      if (v26 == 0.0)
        v22 = 3.56011817e-307;
      else
        v22 = v26;
      if (v25 == 0.0)
        v20 = 2.80889552e306;
      else
        v20 = 1.0 / v25;
      v19 = v19 * (v20 * v22);
    }
    while (fabs(v20 * v22 + -1.0) > 2.22044605e-16 && v21++ != 0);
    return v17 / v19;
  }
  return v17;
}

void boost::math::detail::ibeta_power_terms<long double,boost::math::lanczos::lanczos13m53,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(long double a1, long double a2, long double a3, double a4, double a5, double a6, double a7, double a8, uint64_t a9, char a10, uint64_t a11, char *a12)
{
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  long double v39;
  long double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  long double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  long double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  long double v62;
  double v63;
  long double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  long double v70;
  long double v71;
  long double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  long double v78;
  double v79;
  double v80;
  double v81;
  long double v82;
  double v83;
  double v84;
  long double v85;
  long double v86;
  double v87;
  double v88;
  double v89;
  long double __x;
  double v91;
  double v92;
  long double v93;
  double v94;

  v92 = a2;
  v93 = a1;
  if ((a10 & 1) == 0)
  {
    pow(a3, a1);
    v48 = a4;
    v49 = a2;
LABEL_15:
    pow(v48, v49);
    return;
  }
  v91 = a1 + a2;
  v17 = a1 + 6.02468004 + -0.5;
  v18 = a2 + 6.02468004 + -0.5;
  v19 = a1 + a2 + 6.02468004 + -0.5;
  v20 = boost::math::tools::detail::evaluate_rational_c_imp<long double,unsigned int,long double>((uint64_t)&boost::math::lanczos::lanczos13m53::lanczos_sum_expG_scaled<long double>(long double const&)::num, (uint64_t)&boost::math::lanczos::lanczos13m53::lanczos_sum_expG_scaled<long double>(long double const&)::denom, &v91, a1 + a2 + 6.02468004, a2 + 6.02468004, 6.02468004, -0.5, a5, a6, a7, a8);
  v28 = boost::math::tools::detail::evaluate_rational_c_imp<long double,unsigned int,long double>((uint64_t)&boost::math::lanczos::lanczos13m53::lanczos_sum_expG_scaled<long double>(long double const&)::num, (uint64_t)&boost::math::lanczos::lanczos13m53::lanczos_sum_expG_scaled<long double>(long double const&)::denom, &v93, v20, v21, v22, v23, v24, v25, v26, v27);
  v36 = boost::math::tools::detail::evaluate_rational_c_imp<long double,unsigned int,long double>((uint64_t)&boost::math::lanczos::lanczos13m53::lanczos_sum_expG_scaled<long double>(long double const&)::num, (uint64_t)&boost::math::lanczos::lanczos13m53::lanczos_sum_expG_scaled<long double>(long double const&)::denom, &v92, v28, v29, v30, v31, v32, v33, v34, v35);
  v37 = v19;
  v38 = sqrt(v17 / v19) * (sqrt(v18 / 2.71828183) * (v20 / (v28 * v36) * a5));
  v40 = v92;
  v39 = v93;
  v41 = (a3 * v92 - v17 * a4) / v17;
  v42 = fabs(v41);
  v43 = (a4 * v93 - v18 * a3) / v18;
  v44 = fabs(v43);
  if (v44 >= v42)
    v45 = v42;
  else
    v45 = v44;
  if (v45 >= 0.2)
  {
    __x = v38;
    v50 = v37 * a3 / v17;
    v51 = v37 * a4 / v18;
    v52 = log(v50);
    v53 = v52 * v39;
    v54 = log(v51);
    v55 = v54 * v40;
    if (v52 * v39 < 709.0 && v53 > -708.0 && v55 < 709.0 && v55 > -708.0)
    {
      pow(v50, v39);
      pow(v51, v40);
      return;
    }
    if (v39 >= v40)
    {
      v62 = pow(v50, v39 / v40);
      v63 = v40 * (v54 + log(v62));
      if (v63 < 709.0 && v63 > -708.0)
      {
        v48 = v51 * v62;
        v49 = v40;
        goto LABEL_15;
      }
    }
    else
    {
      v56 = pow(v51, v40 / v39);
      v57 = v39 * (v52 + log(v56));
      if (v57 < 709.0 && v57 > -708.0)
      {
        v48 = v50 * v56;
        v49 = v39;
        goto LABEL_15;
      }
    }
    v64 = v54 * v40 + v53 + log(__x);
    if (v64 >= 709.0)
      goto LABEL_65;
    goto LABEL_40;
  }
  if (v41 * v43 <= 0.0)
  {
    v46 = v92 >= v93 ? v93 : v92;
    if (v46 >= 1.0)
    {
      if (v42 >= v44)
        v60 = v42;
      else
        v60 = v44;
      if (v60 < 0.5)
      {
        v61 = v92 / v93;
        if ((v93 >= v92 || v61 * v43 >= 0.1) && (v93 < v92 || v41 / v61 <= 0.1))
        {
          v78 = v41;
          v79 = v43;
          v80 = boost::math::log1p<boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(v78);
          v81 = boost::math::expm1<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(v80 / v61);
          v82 = v79 + v81 + v81 * v79;
          v83 = v92;
          v84 = boost::math::log1p<boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(v82);
        }
        else
        {
          v94 = v43;
          if (v43 < -1.0)
            boost::math::policies::detail::raise_error<std::domain_error,long double>("log1p<%1%>(%1%)", "log1p(x) requires x > -1, but got x = %1%.");
          if (v43 == -1.0)
            boost::math::policies::detail::raise_error<std::overflow_error,long double>("log1p<%1%>(%1%)", "Overflow Error");
          v86 = log1pl(v43);
          v87 = boost::math::detail::expm1_imp<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(v61 * v86);
          if (fabs(v87) > 1.79769313e308)
            boost::math::policies::detail::raise_error<std::overflow_error,long double>("boost::math::expm1<%1%>(%1%)", "numeric overflow");
          v88 = v41 + v87 + v87 * v41;
          v83 = v93;
          v94 = v88;
          if (v88 < -1.0)
            boost::math::policies::detail::raise_error<std::domain_error,long double>("log1p<%1%>(%1%)", "log1p(x) requires x > -1, but got x = %1%.");
          if (v88 == -1.0)
            boost::math::policies::detail::raise_error<std::overflow_error,long double>("log1p<%1%>(%1%)", "Overflow Error");
          v84 = log1pl(v88);
        }
        v77 = v83 * v84;
        goto LABEL_74;
      }
      if (v42 >= v44)
      {
        v73 = v38;
        v74 = v37;
        v75 = boost::math::log1p<boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(v43);
        v76 = v93;
        v70 = log(v74 * a3 / v17) * v76 + v40 * v75;
        if (v70 > -708.0 && v70 < 709.0)
        {
          v77 = v70;
LABEL_74:
          exp(v77);
          return;
        }
        v85 = v73;
      }
      else
      {
        v66 = v38;
        v67 = v37;
        v68 = boost::math::log1p<boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(v41);
        v69 = v92;
        v70 = log(v67 * a4 / v18) * v69 + v39 * v68;
        if (v70 > -708.0 && v70 < 709.0)
        {
          exp(v70);
          return;
        }
        v85 = v66;
      }
      v64 = log(v85) + v70;
      if (v64 >= 709.0)
LABEL_65:
        boost::math::policies::detail::raise_error<std::overflow_error,long double>(a12, "Overflow Error");
LABEL_40:
      exp(v64);
      return;
    }
  }
  v89 = v37;
  if (v42 >= 0.1)
  {
    v58 = (a4 * v93 - v18 * a3) / v18;
    pow(v37 * a3 / v17, v93);
    v59 = v58;
  }
  else
  {
    v94 = (a3 * v92 - v17 * a4) / v17;
    v47 = (a4 * v93 - v18 * a3) / v18;
    if (v41 < -1.0)
      boost::math::policies::detail::raise_error<std::domain_error,long double>("log1p<%1%>(%1%)", "log1p(x) requires x > -1, but got x = %1%.");
    if (v41 == -1.0)
      boost::math::policies::detail::raise_error<std::overflow_error,long double>("log1p<%1%>(%1%)", "Overflow Error");
    v71 = log1pl(v41);
    exp(v39 * v71);
    v59 = v47;
  }
  if (v44 >= 0.1)
  {
    v49 = v92;
    v48 = v89 * a4 / v18;
    goto LABEL_15;
  }
  v65 = v92;
  v94 = v59;
  if (v59 < -1.0)
    boost::math::policies::detail::raise_error<std::domain_error,long double>("log1p<%1%>(%1%)", "log1p(x) requires x > -1, but got x = %1%.");
  if (v59 == -1.0)
    boost::math::policies::detail::raise_error<std::overflow_error,long double>("log1p<%1%>(%1%)", "Overflow Error");
  v72 = log1pl(v59);
  exp(v65 * v72);
}

void boost::math::policies::detail::raise_error<std::domain_error,long double>(char *a1, char *a2)
{
  char *v2;
  char *v3;
  std::string *v4;
  std::string::size_type size;
  const char *v6;
  std::string *v7;
  std::string::size_type v8;
  std::logic_error v9;
  _QWORD v10[2];
  char v11;
  std::string v12;
  std::string v13;
  std::string v14;

  v2 = "Unknown function operating on type %1%";
  if (a1)
    v2 = a1;
  if (a2)
    v3 = a2;
  else
    v3 = "Cause unknown: error caused by bad argument with value %1%";
  std::string::basic_string[abi:ne180100]<0>(&v14, v2);
  std::string::basic_string[abi:ne180100]<0>(&v13, v3);
  std::string::basic_string[abi:ne180100]<0>(&v12, "Error in function ");
  boost::math::policies::detail::replace_all_in_string(&v14, "%1%", "long double");
  if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v4 = &v14;
  else
    v4 = (std::string *)v14.__r_.__value_.__r.__words[0];
  if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v14.__r_.__value_.__r.__words[2]);
  else
    size = v14.__r_.__value_.__l.__size_;
  std::string::append(&v12, (const std::string::value_type *)v4, size);
  std::string::append(&v12, ": ", 2uLL);
  boost::math::policies::detail::prec_format<long double>(v10);
  if (v11 >= 0)
    v6 = (const char *)v10;
  else
    v6 = (const char *)v10[0];
  boost::math::policies::detail::replace_all_in_string(&v13, "%1%", v6);
  if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v7 = &v13;
  else
    v7 = (std::string *)v13.__r_.__value_.__r.__words[0];
  if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v8 = HIBYTE(v13.__r_.__value_.__r.__words[2]);
  else
    v8 = v13.__r_.__value_.__l.__size_;
  std::string::append(&v12, (const std::string::value_type *)v7, v8);
  std::logic_error::logic_error(&v9, &v12);
  v9.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
  boost::throw_exception<std::domain_error>(&v9);
}

uint64_t boost::math::policies::detail::prec_format<long double>@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  _QWORD v4[2];
  uint64_t v5;
  _QWORD v6[10];
  char v7;
  uint64_t v8;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v4);
  *(_QWORD *)((char *)&v6[1] + *(_QWORD *)(v5 - 24)) = 17;
  std::ostream::operator<<();
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v6, a1);
  v4[0] = *MEMORY[0x1E0DE4F50];
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v4 + *(_QWORD *)(v4[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v5 = v2;
  v6[0] = MEMORY[0x1E0DE4FB8] + 16;
  if (v7 < 0)
    operator delete((void *)v6[8]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1BCCFB8B4](&v8);
}

void sub_1BC98FF9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void boost::math::detail::beta_imp<long double,boost::math::lanczos::lanczos13m53,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8)
{
  double v8;
  BOOL v9;
  char *v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v34;
  double v35;
  double v36;
  double v37;
  long double __y;
  double v39;

  __y = a2;
  v39 = a1;
  if (a1 <= 0.0)
  {
    v10 = "The arguments to the beta function must be greater than zero (got a=%1%).";
    goto LABEL_12;
  }
  if (a2 <= 0.0)
  {
    v10 = "The arguments to the beta function must be greater than zero (got b=%1%).";
LABEL_12:
    boost::math::policies::detail::raise_error<std::domain_error,long double>("boost::math::beta<%1%>(%1%,%1%)", v10);
  }
  v8 = a1 + a2;
  v37 = a1 + a2;
  v9 = a2 < 2.22044605e-16 && v8 == a1;
  if (!v9 && (a1 >= 2.22044605e-16 || v8 != a2) && a2 != 1.0 && a1 != 1.0 && v8 >= 2.22044605e-16)
  {
    if (a1 >= a2)
    {
      v11 = a2;
      a2 = a1;
    }
    else
    {
      __y = a1;
      v39 = a2;
      v11 = a1;
    }
    v12 = a2 + 6.02468004;
    v13 = v12 + -0.5;
    v14 = v11 + 6.02468004;
    v15 = v8 + 6.02468004 + -0.5;
    v16 = boost::math::tools::detail::evaluate_rational_c_imp<long double,unsigned int,long double>((uint64_t)&boost::math::lanczos::lanczos13m53::lanczos_sum_expG_scaled<long double>(long double const&)::num, (uint64_t)&boost::math::lanczos::lanczos13m53::lanczos_sum_expG_scaled<long double>(long double const&)::denom, &v39, v8 + 6.02468004, v12, v8, v11, a5, a6, a7, a8);
    v24 = boost::math::tools::detail::evaluate_rational_c_imp<long double,unsigned int,long double>((uint64_t)&boost::math::lanczos::lanczos13m53::lanczos_sum_expG_scaled<long double>(long double const&)::num, (uint64_t)&boost::math::lanczos::lanczos13m53::lanczos_sum_expG_scaled<long double>(long double const&)::denom, &__y, v16, v17, v18, v19, v20, v21, v22, v23);
    boost::math::tools::detail::evaluate_rational_c_imp<long double,unsigned int,long double>((uint64_t)&boost::math::lanczos::lanczos13m53::lanczos_sum_expG_scaled<long double>(long double const&)::num, (uint64_t)&boost::math::lanczos::lanczos13m53::lanczos_sum_expG_scaled<long double>(long double const&)::denom, &v37, v24, v25, v26, v27, v28, v29, v30, v31);
    v32 = v39 + -0.5 - __y;
    if (fabs(__y * v32) >= v15 * 100.0 || v39 <= 100.0)
    {
      pow(v13 / v15, v39 + -0.5 - __y);
    }
    else
    {
      v34 = boost::math::log1p<boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(-__y / v15);
      exp(v32 * v34);
    }
    v35 = v14 + -0.5;
    if (v15 <= 1.0e10)
      v36 = v13 * v35 / (v15 * v15);
    else
      v36 = v13 / v15 * (v35 / v15);
    pow(v36, __y);
  }
}

void boost::math::policies::detail::raise_error<std::overflow_error,long double>(char *a1, const char *a2)
{
  char *v2;
  const char *v3;
  std::string *v4;
  std::string::size_type size;
  size_t v6;
  std::runtime_error v7;
  std::string v8;
  std::string v9;

  v2 = "Unknown function operating on type %1%";
  if (a1)
    v2 = a1;
  if (a2)
    v3 = a2;
  else
    v3 = "Cause unknown";
  std::string::basic_string[abi:ne180100]<0>(&v9, v2);
  std::string::basic_string[abi:ne180100]<0>(&v8, "Error in function ");
  boost::math::policies::detail::replace_all_in_string(&v9, "%1%", "long double");
  if ((v9.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v4 = &v9;
  else
    v4 = (std::string *)v9.__r_.__value_.__r.__words[0];
  if ((v9.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v9.__r_.__value_.__r.__words[2]);
  else
    size = v9.__r_.__value_.__l.__size_;
  std::string::append(&v8, (const std::string::value_type *)v4, size);
  std::string::append(&v8, ": ", 2uLL);
  v6 = strlen(v3);
  std::string::append(&v8, v3, v6);
  std::runtime_error::runtime_error(&v7, &v8);
  v7.__vftable = (std::runtime_error_vtbl *)(MEMORY[0x1E0DE5030] + 16);
  boost::throw_exception<std::overflow_error>(&v7);
}

void sub_1BC9902E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::runtime_error a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  std::runtime_error::~runtime_error(&a9);
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(a1);
}

double boost::math::tools::detail::evaluate_rational_c_imp<long double,unsigned int,long double>(uint64_t a1, uint64_t a2, double *a3, double a4, double a5, double a6, double a7, double a8, double a9, double a10, double a11)
{
  unint64_t v11;
  unint64_t v12;
  double v13;
  float64x2_t v14;
  float64x2_t v20;
  float64x2_t v21;
  uint64_t v22;
  uint64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  uint64_t v26;
  uint64_t v27;
  float64x2_t v28;
  float64x2_t v29;
  uint64_t v30;
  uint64_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  double v37;
  double v38;
  double v39;
  double v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  uint64_t v45;
  uint64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;

  v13 = *a3;
  v14.f64[0] = v13 * v13;
  if (*a3 <= 1.0)
  {
    v37 = *(double *)(a1 + 88);
    v38 = *(double *)(a1 + 72) + v37 * v14.f64[0];
    LODWORD(a11) = *(_DWORD *)(a2 + 44);
    LODWORD(v37) = *(_DWORD *)(a2 + 48);
    LODWORD(a10) = *(_DWORD *)(a2 + 40);
    v39 = (double)*(unint64_t *)&a10 + (double)*(unint64_t *)&v37 * v14.f64[0];
    v40 = (double)*(unint64_t *)&a11;
    LODWORD(v11) = *(_DWORD *)(a2 + 32);
    LODWORD(a11) = *(_DWORD *)(a2 + 36);
    v41.f64[0] = v14.f64[0] * (*(double *)(a1 + 80) + *(double *)(a1 + 96) * v14.f64[0]) + *(double *)(a1 + 64);
    v42.f64[0] = v14.f64[0] * v39 + (double)v11;
    v41.f64[1] = v38;
    v43 = vaddq_f64(vmulq_n_f64(vaddq_f64(vmulq_n_f64(vaddq_f64(vmulq_n_f64(vaddq_f64(vmulq_n_f64(v41, v14.f64[0]), *(float64x2_t *)(a1 + 48)), v14.f64[0]), *(float64x2_t *)(a1 + 32)), v14.f64[0]), *(float64x2_t *)(a1 + 16)), v14.f64[0]), *(float64x2_t *)a1);
    v42.f64[1] = (double)*(unint64_t *)&a11 + v40 * v14.f64[0];
    v44 = vmulq_n_f64(v42, v14.f64[0]);
    v45 = *(_QWORD *)(a2 + 16);
    v42.f64[0] = *(float64_t *)(a2 + 24);
    v46.i64[0] = LODWORD(v42.f64[0]);
    v46.i64[1] = HIDWORD(v42.f64[0]);
    v47 = vmulq_n_f64(vaddq_f64(v44, vcvtq_f64_u64(v46)), v14.f64[0]);
    v46.i64[0] = v45;
    v46.i64[1] = HIDWORD(v45);
    v48 = vmulq_n_f64(vaddq_f64(v47, vcvtq_f64_u64(v46)), v14.f64[0]);
    v42.f64[0] = *(float64_t *)(a2 + 8);
    v46.i64[0] = LODWORD(v42.f64[0]);
    v46.i64[1] = HIDWORD(v42.f64[0]);
    v49 = vmulq_n_f64(vaddq_f64(v48, vcvtq_f64_u64(v46)), v14.f64[0]);
    v46.i64[0] = *(_QWORD *)a2;
    v46.i64[1] = HIDWORD(*(_QWORD *)a2);
    v50 = vaddq_f64(v49, vcvtq_f64_u64(v46));
    return (vmuld_lane_f64(v13, v43, 1) + v43.f64[0]) / (vmuld_lane_f64(v13, v50, 1) + v50.f64[0]);
  }
  else
  {
    LODWORD(v12) = *(_DWORD *)(a2 + 48);
    v14.f64[1] = *a3;
    __asm { FMOV            V0.2D, #1.0 }
    v20 = vdivq_f64(_Q0, v14);
    v21.f64[0] = vmlad_n_f64(*(double *)(a1 + 24), *(double *)(a1 + 8), v20.f64[0]);
    v22 = *(_QWORD *)(a2 + 8);
    v23.i64[0] = *(_QWORD *)a2;
    v23.i64[1] = HIDWORD(*(_QWORD *)a2);
    v24 = vcvtq_f64_u64(v23);
    v23.i64[0] = v22;
    v23.i64[1] = HIDWORD(v22);
    v25 = vmulq_n_f64(vmlaq_n_f64(vcvtq_f64_u64(v23), v24, v20.f64[0]), v20.f64[0]);
    v26 = *(_QWORD *)(a2 + 16);
    v27 = *(_QWORD *)(a2 + 24);
    v23.i64[0] = v26;
    v23.i64[1] = HIDWORD(v26);
    v28 = vmulq_n_f64(vaddq_f64(v25, vcvtq_f64_u64(v23)), v20.f64[0]);
    v23.i64[0] = v27;
    v23.i64[1] = HIDWORD(v27);
    v29 = vmulq_n_f64(vaddq_f64(v28, vcvtq_f64_u64(v23)), v20.f64[0]);
    v30 = *(_QWORD *)(a2 + 32);
    v31 = *(_QWORD *)(a2 + 40);
    v23.i64[0] = v30;
    v23.i64[1] = HIDWORD(v30);
    v32 = vmulq_n_f64(vaddq_f64(v29, vcvtq_f64_u64(v23)), v20.f64[0]);
    v23.i64[0] = v31;
    v23.i64[1] = HIDWORD(v31);
    v21.f64[1] = vmlad_n_f64(*(double *)(a1 + 16), *(double *)a1, v20.f64[0]) * v20.f64[0] + *(double *)(a1 + 32);
    v33 = vaddq_f64(v32, vcvtq_f64_u64(v23));
    v34 = vaddq_f64(vmulq_n_f64(vaddq_f64(vmulq_n_f64(vaddq_f64(vmulq_n_f64(vaddq_f64(vmulq_n_f64(v21, v20.f64[0]), *(float64x2_t *)(a1 + 40)), v20.f64[0]), *(float64x2_t *)(a1 + 56)), v20.f64[0]), *(float64x2_t *)(a1 + 72)), v20.f64[0]), *(float64x2_t *)(a1 + 88));
    v35 = vmulq_f64(v20, v33);
    return vaddq_f64(vmulq_laneq_f64(v34, v20, 1), (float64x2_t)vdupq_laneq_s64((int64x2_t)v34, 1)).f64[0]
         / (v35.f64[1] + v35.f64[0] + (double)v12);
  }
}

double boost::math::detail::expm1_imp<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(double result)
{
  double v1;
  float64x2_t v2;
  BOOL v3;

  v1 = fabs(result);
  if (v1 <= 0.5)
  {
    if (v1 >= 2.22044605e-16)
    {
      v2 = vaddq_f64(vaddq_f64(vmulq_n_f64(vmlaq_n_f64((float64x2_t)xmmword_1BCAB7990, (float64x2_t)xmmword_1BCAB7980, result * result), result * result), (float64x2_t)xmmword_1BCAB79B0), vmulq_n_f64(vaddq_f64(vmulq_n_f64(vmlaq_n_f64((float64x2_t)xmmword_1BCAB7970, (float64x2_t)xmmword_1BCAB7960, result * result), result * result), (float64x2_t)xmmword_1BCAB79A0), result));
      return result * v2.f64[0] / v2.f64[1] + result * 1.02812767;
    }
  }
  else if (v1 >= 709.0)
  {
    v3 = result <= 0.0;
    result = -1.0;
    if (!v3)
      boost::math::policies::detail::raise_error<std::overflow_error,long double>("boost::math::expm1<%1%>(%1%)", "Overflow Error");
  }
  else
  {
    return exp(result) + -1.0;
  }
  return result;
}

double boost::math::detail::powm1_imp<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(uint64_t a1, long double a2, double a3)
{
  double v5;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;

  if (a2 <= 0.0)
  {
    if ((*(_QWORD *)&a3 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
      boost::math::policies::detail::raise_error<boost::math::rounding_error,long double>("boost::math::trunc<%1%>(%1%)", "Value %1% can not be represented in the target integer type.");
    v9 = ceil(a3);
    v10 = floor(a3);
    if (a3 >= 0.0)
      v9 = v10;
    if (v9 != a3)
      boost::math::policies::detail::raise_error<std::domain_error,long double>((char *)boost::math::detail::powm1_imp<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(long double,long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy> const&)::function, "For non-integral exponent, expected base > 0 but got %1%");
    v11 = a3 * 0.5;
    if (COERCE__INT64(fabs(a3 * 0.5)) >= 0x7FF0000000000000)
      boost::math::policies::detail::raise_error<boost::math::rounding_error,long double>("boost::math::trunc<%1%>(%1%)", "Value %1% can not be represented in the target integer type.");
    if (v11 >= 0.0)
      v12 = floor(v11);
    else
      v12 = ceil(v11);
    if (v12 != v11)
      return pow(a2, a3) + -1.0;
    return boost::math::detail::powm1_imp<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(a1, -a2, a3);
  }
  else
  {
    v5 = fabs((a2 + -1.0) * a3);
    if (fabs(a3) >= 0.2 && v5 >= 0.5)
      return pow(a2, a3) + -1.0;
    v7 = log(a2) * a3;
    if (v7 >= 0.5)
    {
      if (v7 > 709.0)
        boost::math::policies::detail::raise_error<std::overflow_error,long double>((char *)boost::math::detail::powm1_imp<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(long double,long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy> const&)::function, "Overflow Error");
      return pow(a2, a3) + -1.0;
    }
    v8 = boost::math::detail::expm1_imp<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(v7);
    if (fabs(v8) > 1.79769313e308)
      boost::math::policies::detail::raise_error<std::overflow_error,long double>("boost::math::expm1<%1%>(%1%)", "numeric overflow");
  }
  return v8;
}

void boost::math::policies::detail::raise_error<boost::math::rounding_error,long double>(char *a1, char *a2)
{
  char *v2;
  char *v3;
  std::string *v4;
  std::string::size_type size;
  const char *v6;
  std::string *v7;
  std::string::size_type v8;
  std::runtime_error v9;
  _QWORD v10[2];
  char v11;
  std::string v12;
  std::string v13;
  std::string v14;

  v2 = "Unknown function operating on type %1%";
  if (a1)
    v2 = a1;
  if (a2)
    v3 = a2;
  else
    v3 = "Cause unknown: error caused by bad argument with value %1%";
  std::string::basic_string[abi:ne180100]<0>(&v14, v2);
  std::string::basic_string[abi:ne180100]<0>(&v13, v3);
  std::string::basic_string[abi:ne180100]<0>(&v12, "Error in function ");
  boost::math::policies::detail::replace_all_in_string(&v14, "%1%", "long double");
  if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v4 = &v14;
  else
    v4 = (std::string *)v14.__r_.__value_.__r.__words[0];
  if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v14.__r_.__value_.__r.__words[2]);
  else
    size = v14.__r_.__value_.__l.__size_;
  std::string::append(&v12, (const std::string::value_type *)v4, size);
  std::string::append(&v12, ": ", 2uLL);
  boost::math::policies::detail::prec_format<long double>(v10);
  if (v11 >= 0)
    v6 = (const char *)v10;
  else
    v6 = (const char *)v10[0];
  boost::math::policies::detail::replace_all_in_string(&v13, "%1%", v6);
  if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v7 = &v13;
  else
    v7 = (std::string *)v13.__r_.__value_.__r.__words[0];
  if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v8 = HIBYTE(v13.__r_.__value_.__r.__words[2]);
  else
    v8 = v13.__r_.__value_.__l.__size_;
  std::string::append(&v12, (const std::string::value_type *)v7, v8);
  std::runtime_error::runtime_error(&v9, &v12);
  v9.__vftable = (std::runtime_error_vtbl *)&off_1E7543BD0;
  boost::throw_exception<boost::math::rounding_error>(&v9);
}

void sub_1BC990900(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::runtime_error a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;

  std::runtime_error::~runtime_error(&a9);
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  if (*(char *)(v27 - 17) < 0)
    operator delete(*(void **)(v27 - 40));
  _Unwind_Resume(a1);
}

void boost::throw_exception<boost::math::rounding_error>(const std::runtime_error *a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x40uLL);
  boost::wrapexcept<boost::math::rounding_error>::wrapexcept((uint64_t)exception, a1);
}

void sub_1BC9909B8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void boost::math::rounding_error::~rounding_error(std::runtime_error *this)
{
  std::runtime_error::~runtime_error(this);
  JUMPOUT(0x1BCCFB8D8);
}

uint64_t boost::wrapexcept<boost::math::rounding_error>::wrapexcept(uint64_t a1, const std::runtime_error *a2)
{
  *(_QWORD *)a1 = &unk_1E7543AC0;
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 8), a2);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = -1;
  *(_QWORD *)a1 = &off_1E7543C58;
  *(_QWORD *)(a1 + 8) = &unk_1E7543C88;
  *(_QWORD *)(a1 + 24) = &unk_1E7543CB0;
  *(_QWORD *)(a1 + 32) = 0;
  return a1;
}

uint64_t boost::wrapexcept<boost::math::rounding_error>::~wrapexcept(uint64_t a1)
{
  *(_QWORD *)(a1 + 24) = &unk_1E7543AF0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 32));
  std::runtime_error::~runtime_error((std::runtime_error *)(a1 + 8));
  return a1;
}

uint64_t boost::wrapexcept<boost::math::rounding_error>::clone(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = operator new();
  *(_QWORD *)v2 = &unk_1E7543AC0;
  std::runtime_error::runtime_error((std::runtime_error *)(v2 + 8), (const std::runtime_error *)(a1 + 8));
  *(_QWORD *)(v2 + 8) = &off_1E7543BD0;
  *(_QWORD *)(v2 + 24) = &unk_1E7543AF0;
  v3 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(v2 + 32) = v3;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *(_DWORD *)(v2 + 56) = *(_DWORD *)(a1 + 56);
  *(_QWORD *)v2 = &off_1E7543C58;
  *(_QWORD *)(v2 + 8) = &unk_1E7543C88;
  *(_QWORD *)(v2 + 24) = &unk_1E7543CB0;
  boost::exception_detail::copy_boost_exception(v2 + 24, a1 + 24);
  return v2;
}

void sub_1BC990B5C(_Unwind_Exception *a1)
{
  uint64_t v1;
  std::runtime_error *v2;

  std::runtime_error::~runtime_error(v2);
  MEMORY[0x1BCCFB8D8](v1, 0x10F1C40250A9ABCLL);
  _Unwind_Resume(a1);
}

void boost::wrapexcept<boost::math::rounding_error>::rethrow(uint64_t a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x40uLL);
  boost::wrapexcept<boost::math::rounding_error>::wrapexcept((uint64_t)exception, a1);
}

void sub_1BC990BDC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void boost::wrapexcept<boost::math::rounding_error>::~wrapexcept(uint64_t a1)
{
  *(_QWORD *)(a1 + 24) = &unk_1E7543AF0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 32));
  std::runtime_error::~runtime_error((std::runtime_error *)(a1 + 8));
  JUMPOUT(0x1BCCFB8D8);
}

void `non-virtual thunk to'boost::wrapexcept<boost::math::rounding_error>::~wrapexcept(uint64_t a1)
{
  *(_QWORD *)(a1 + 16) = &unk_1E7543AF0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 24));
  std::runtime_error::~runtime_error((std::runtime_error *)a1);
}

{
  *(_QWORD *)(a1 + 16) = &unk_1E7543AF0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 24));
  std::runtime_error::~runtime_error((std::runtime_error *)a1);
  JUMPOUT(0x1BCCFB8D8);
}

void `non-virtual thunk to'boost::wrapexcept<boost::math::rounding_error>::~wrapexcept(_QWORD *a1)
{
  *a1 = &unk_1E7543AF0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);
  std::runtime_error::~runtime_error((std::runtime_error *)a1 - 1);
}

{
  *a1 = &unk_1E7543AF0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);
  std::runtime_error::~runtime_error((std::runtime_error *)a1 - 1);
  JUMPOUT(0x1BCCFB8D8);
}

uint64_t boost::wrapexcept<boost::math::rounding_error>::wrapexcept(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)a1 = &unk_1E7543AC0;
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 8), (const std::runtime_error *)(a2 + 8));
  *(_QWORD *)(a1 + 8) = &off_1E7543BD0;
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = &unk_1E7543AF0;
  *(_QWORD *)(a1 + 32) = v4;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v5 = *(_OWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v5;
  *(_QWORD *)a1 = &off_1E7543C58;
  *(_QWORD *)(a1 + 8) = &unk_1E7543C88;
  *(_QWORD *)(a1 + 24) = &unk_1E7543CB0;
  return a1;
}

void sub_1BC990DFC(_Unwind_Exception *a1)
{
  std::runtime_error *v1;

  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

void boost::math::policies::detail::raise_error<boost::math::evaluation_error,long double>(char *a1, char *a2)
{
  char *v2;
  char *v3;
  std::string *v4;
  std::string::size_type size;
  const char *v6;
  std::string *v7;
  std::string::size_type v8;
  std::runtime_error v9;
  _QWORD v10[2];
  char v11;
  std::string v12;
  std::string v13;
  std::string v14;

  v2 = "Unknown function operating on type %1%";
  if (a1)
    v2 = a1;
  if (a2)
    v3 = a2;
  else
    v3 = "Cause unknown: error caused by bad argument with value %1%";
  std::string::basic_string[abi:ne180100]<0>(&v14, v2);
  std::string::basic_string[abi:ne180100]<0>(&v13, v3);
  std::string::basic_string[abi:ne180100]<0>(&v12, "Error in function ");
  boost::math::policies::detail::replace_all_in_string(&v14, "%1%", "long double");
  if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v4 = &v14;
  else
    v4 = (std::string *)v14.__r_.__value_.__r.__words[0];
  if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v14.__r_.__value_.__r.__words[2]);
  else
    size = v14.__r_.__value_.__l.__size_;
  std::string::append(&v12, (const std::string::value_type *)v4, size);
  std::string::append(&v12, ": ", 2uLL);
  boost::math::policies::detail::prec_format<long double>(v10);
  if (v11 >= 0)
    v6 = (const char *)v10;
  else
    v6 = (const char *)v10[0];
  boost::math::policies::detail::replace_all_in_string(&v13, "%1%", v6);
  if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v7 = &v13;
  else
    v7 = (std::string *)v13.__r_.__value_.__r.__words[0];
  if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v8 = HIBYTE(v13.__r_.__value_.__r.__words[2]);
  else
    v8 = v13.__r_.__value_.__l.__size_;
  std::string::append(&v12, (const std::string::value_type *)v7, v8);
  std::runtime_error::runtime_error(&v9, &v12);
  v9.__vftable = (std::runtime_error_vtbl *)&off_1E7543CD0;
  boost::throw_exception<boost::math::evaluation_error>(&v9);
}

void sub_1BC990F34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::runtime_error a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;

  std::runtime_error::~runtime_error(&a9);
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  if (*(char *)(v27 - 17) < 0)
    operator delete(*(void **)(v27 - 40));
  _Unwind_Resume(a1);
}

void boost::throw_exception<boost::math::evaluation_error>(const std::runtime_error *a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x40uLL);
  boost::wrapexcept<boost::math::evaluation_error>::wrapexcept((uint64_t)exception, a1);
}

void sub_1BC990FEC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void boost::math::evaluation_error::~evaluation_error(std::runtime_error *this)
{
  std::runtime_error::~runtime_error(this);
  JUMPOUT(0x1BCCFB8D8);
}

uint64_t boost::wrapexcept<boost::math::evaluation_error>::wrapexcept(uint64_t a1, const std::runtime_error *a2)
{
  *(_QWORD *)a1 = &unk_1E7543AC0;
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 8), a2);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = -1;
  *(_QWORD *)a1 = &off_1E7543D58;
  *(_QWORD *)(a1 + 8) = &unk_1E7543D88;
  *(_QWORD *)(a1 + 24) = &unk_1E7543DB0;
  *(_QWORD *)(a1 + 32) = 0;
  return a1;
}

uint64_t boost::wrapexcept<boost::math::evaluation_error>::~wrapexcept(uint64_t a1)
{
  *(_QWORD *)(a1 + 24) = &unk_1E7543AF0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 32));
  std::runtime_error::~runtime_error((std::runtime_error *)(a1 + 8));
  return a1;
}

uint64_t boost::wrapexcept<boost::math::evaluation_error>::clone(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = operator new();
  *(_QWORD *)v2 = &unk_1E7543AC0;
  std::runtime_error::runtime_error((std::runtime_error *)(v2 + 8), (const std::runtime_error *)(a1 + 8));
  *(_QWORD *)(v2 + 8) = &off_1E7543CD0;
  *(_QWORD *)(v2 + 24) = &unk_1E7543AF0;
  v3 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(v2 + 32) = v3;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *(_DWORD *)(v2 + 56) = *(_DWORD *)(a1 + 56);
  *(_QWORD *)v2 = &off_1E7543D58;
  *(_QWORD *)(v2 + 8) = &unk_1E7543D88;
  *(_QWORD *)(v2 + 24) = &unk_1E7543DB0;
  boost::exception_detail::copy_boost_exception(v2 + 24, a1 + 24);
  return v2;
}

void sub_1BC991190(_Unwind_Exception *a1)
{
  uint64_t v1;
  std::runtime_error *v2;

  std::runtime_error::~runtime_error(v2);
  MEMORY[0x1BCCFB8D8](v1, 0x10F1C40250A9ABCLL);
  _Unwind_Resume(a1);
}

void boost::wrapexcept<boost::math::evaluation_error>::rethrow(uint64_t a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x40uLL);
  boost::wrapexcept<boost::math::evaluation_error>::wrapexcept((uint64_t)exception, a1);
}

void sub_1BC991210(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void boost::wrapexcept<boost::math::evaluation_error>::~wrapexcept(uint64_t a1)
{
  *(_QWORD *)(a1 + 24) = &unk_1E7543AF0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 32));
  std::runtime_error::~runtime_error((std::runtime_error *)(a1 + 8));
  JUMPOUT(0x1BCCFB8D8);
}

void `non-virtual thunk to'boost::wrapexcept<boost::math::evaluation_error>::~wrapexcept(uint64_t a1)
{
  *(_QWORD *)(a1 + 16) = &unk_1E7543AF0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 24));
  std::runtime_error::~runtime_error((std::runtime_error *)a1);
}

{
  *(_QWORD *)(a1 + 16) = &unk_1E7543AF0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 24));
  std::runtime_error::~runtime_error((std::runtime_error *)a1);
  JUMPOUT(0x1BCCFB8D8);
}

void `non-virtual thunk to'boost::wrapexcept<boost::math::evaluation_error>::~wrapexcept(_QWORD *a1)
{
  *a1 = &unk_1E7543AF0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);
  std::runtime_error::~runtime_error((std::runtime_error *)a1 - 1);
}

{
  *a1 = &unk_1E7543AF0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);
  std::runtime_error::~runtime_error((std::runtime_error *)a1 - 1);
  JUMPOUT(0x1BCCFB8D8);
}

uint64_t boost::wrapexcept<boost::math::evaluation_error>::wrapexcept(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)a1 = &unk_1E7543AC0;
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 8), (const std::runtime_error *)(a2 + 8));
  *(_QWORD *)(a1 + 8) = &off_1E7543CD0;
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = &unk_1E7543AF0;
  *(_QWORD *)(a1 + 32) = v4;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v5 = *(_OWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v5;
  *(_QWORD *)a1 = &off_1E7543D58;
  *(_QWORD *)(a1 + 8) = &unk_1E7543D88;
  *(_QWORD *)(a1 + 24) = &unk_1E7543DB0;
  return a1;
}

void sub_1BC991430(_Unwind_Exception *a1)
{
  std::runtime_error *v1;

  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

double boost::math::detail::regularised_gamma_prefix<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>,boost::math::lanczos::lanczos13m53>(uint64_t a1, uint64_t a2, double a3, long double a4)
{
  double result;
  double v9;
  double v10;
  long double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  long double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  long double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  long double v51;
  double v52;
  double v53;
  double v54;
  long double v55;
  double v56;
  double v57;
  double v58;
  int v59;
  uint64_t v60;
  double v61;
  double v62[3];

  v62[0] = a3;
  result = 0.0;
  if (a4 < 1.79769313e308)
  {
    if (a3 < 1.0)
    {
      v9 = -a4;
      if (a4 <= -708.0)
      {
        v22 = a3 * log(a4) - a4;
        v30 = v22
            - boost::math::detail::lgamma_imp<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>,boost::math::lanczos::lanczos13m53>(a1, a2, 0, a3, v23, v24, v25, v26, v27, v28, v29);
        return exp(v30);
      }
      else
      {
        v10 = pow(a4, a3);
        v11 = v10 * exp(v9);
        boost::math::detail::gamma_imp<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>,boost::math::lanczos::lanczos13m53>(a3, v12, v13, v14, v15, v16, v17, v18);
        return v11 / v19;
      }
    }
    v20 = a3 + 6.02468004 + -0.5;
    if (a3 > 150.0)
    {
      v21 = (a4 - a3 + -6.02468004 + 0.5) / v20;
      if (fabs(v21 * v21 * a3) <= 100.0)
      {
        v62[1] = (a4 - a3 + -6.02468004 + 0.5) / v20;
        if (v21 < -1.0)
          boost::math::policies::detail::raise_error<std::domain_error,long double>((char *)boost::math::log1pmx<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy> const&)::function, "log1pmx(x) requires x > -1, but got x = %1%.");
        if (v21 == -1.0)
          boost::math::policies::detail::raise_error<std::overflow_error,long double>((char *)boost::math::log1pmx<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy> const&)::function, "Overflow Error");
        v56 = fabs(v21);
        if (v56 <= 0.949999988)
        {
          v58 = -v21;
          if (v56 >= 2.22044605e-16)
          {
            v57 = 0.0;
            v59 = 2;
            v60 = 1000000;
            do
            {
              v21 = v21 * v58;
              v61 = v21 / (double)v59;
              v57 = v57 + v61;
              if (fabs(v57 * 2.22044605e-16) >= fabs(v61))
                break;
              ++v59;
              --v60;
            }
            while (v60);
            if ((unint64_t)(1000000 - v60) >= 0xF4240)
            {
              v62[2] = (double)(unint64_t)(1000000 - v60);
              boost::math::policies::detail::raise_error<boost::math::evaluation_error,long double>((char *)boost::math::log1pmx<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy> const&)::function, "Series evaluation exceeded %1% iterations, giving up now.");
            }
          }
          else
          {
            v57 = v21 * v58 * 0.5;
          }
        }
        else
        {
          v57 = log(v21 + 1.0) - v21;
        }
        v52 = a4 * -5.52468004 / v20 + a3 * v57;
        goto LABEL_36;
      }
    }
    v31 = a4 / v20;
    v32 = log(a4 / v20);
    v33 = v32 * a3;
    v34 = a3 - a4;
    if (a3 - a4 >= v32 * a3)
      v35 = v32 * a3;
    else
      v35 = a3 - a4;
    if (v35 <= -708.0 || (v33 >= v34 ? (v36 = v33) : (v36 = a3 - a4), v36 >= 709.0))
    {
      if (v35 * 0.5 <= -708.0 || (v33 >= v34 ? (v46 = v33) : (v46 = a3 - a4), v46 * 0.5 >= 709.0))
      {
        if (v35 * 0.25 <= -708.0 || (v33 >= v34 ? (v49 = v33) : (v49 = a3 - a4), a3 >= a4 || v49 * 0.25 >= 709.0))
        {
          v54 = v34 / a3;
          if (v34 / a3 > -708.0 && v54 < 709.0)
          {
            v55 = exp(v54);
            v53 = pow(v55 * a4 / v20, a3);
            goto LABEL_37;
          }
          v52 = v34 + v33;
LABEL_36:
          v53 = exp(v52);
LABEL_37:
          v45 = v53;
          return v45
               * (sqrt(v20 / 2.71828183)
                / boost::math::tools::detail::evaluate_rational_c_imp<long double,unsigned int,long double>((uint64_t)&boost::math::lanczos::lanczos13m53::lanczos_sum_expG_scaled<long double>(long double const&)::num, (uint64_t)&boost::math::lanczos::lanczos13m53::lanczos_sum_expG_scaled<long double>(long double const&)::denom, v62, v20 / 2.71828183, v38, v39, v40, v41, v42, v43, v44));
        }
        v50 = pow(v31, a3 * 0.25);
        v51 = exp(v34 * 0.25);
        v48 = v50 * v51 * (v50 * v51);
      }
      else
      {
        v47 = pow(v31, a3 * 0.5);
        v48 = v47 * exp(v34 * 0.5);
      }
      v45 = v48 * v48;
    }
    else
    {
      v37 = pow(a4 / v20, a3);
      v45 = exp(v34) * v37;
    }
    return v45
         * (sqrt(v20 / 2.71828183)
          / boost::math::tools::detail::evaluate_rational_c_imp<long double,unsigned int,long double>((uint64_t)&boost::math::lanczos::lanczos13m53::lanczos_sum_expG_scaled<long double>(long double const&)::num, (uint64_t)&boost::math::lanczos::lanczos13m53::lanczos_sum_expG_scaled<long double>(long double const&)::denom, v62, v20 / 2.71828183, v38, v39, v40, v41, v42, v43, v44));
  }
  return result;
}

void boost::math::detail::full_igamma_prefix<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(long double a1, long double a2)
{
  double v4;
  double v5;
  double v6;
  long double v7;
  double v8;
  double v9;
  long double v10;

  if (a2 <= 1.79769313e308)
  {
    v4 = log(a2) * a1;
    if (a2 >= 1.0)
    {
      if (a2 < 708.0 && v4 < 709.0)
      {
        v7 = -a2;
        v8 = pow(a2, a1);
        v6 = v8 * exp(v7);
        goto LABEL_13;
      }
      if (a1 >= 1.0)
      {
        v9 = a2 / a1;
LABEL_11:
        v10 = exp(v9);
        v6 = pow(a2 / v10, a1);
        goto LABEL_13;
      }
    }
    else
    {
      if (v4 > -708.0)
      {
        v5 = pow(a2, a1);
        v6 = v5 * exp(-a2);
        goto LABEL_13;
      }
      v9 = a2 / a1;
      if (a2 / a1 < 709.0)
        goto LABEL_11;
    }
    v6 = exp(v4 - a2);
LABEL_13:
    if (fabs(v6) == INFINITY)
      boost::math::policies::detail::raise_error<std::overflow_error,long double>("boost::math::detail::full_igamma_prefix<%1%>(%1%, %1%)", "Result of incomplete gamma function is too large to represent.");
  }
}

double boost::math::detail::lgamma_imp<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>,boost::math::lanczos::lanczos13m53>(uint64_t a1, uint64_t a2, int *a3, double a4, double a5, double a6, double a7, double a8, double a9, double a10, double a11)
{
  char *v15;
  char *v16;
  double v17;
  double v18;
  double v19;
  int v20;
  double v21;
  double v22;
  double v23;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  long double v33;
  double v35;

  v35 = a4;
  if (a4 <= -0.0000000149011612)
  {
    if (floor(a4) == a4)
    {
      v15 = (char *)boost::math::detail::lgamma_imp<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>,boost::math::lanczos::lanczos13m53>(long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy> const&,boost::math::lanczos::lanczos13m53 const&,int *)::function;
      v16 = "Evaluation of lgamma at a negative integer %1%.";
LABEL_7:
      boost::math::policies::detail::raise_error<std::domain_error,long double>(v15, v16);
    }
    v18 = boost::math::detail::sinpx<long double>(a4);
    v19 = -a4;
    if (v18 < 0.0)
      v20 = 1;
    else
      v20 = -1;
    if (v18 >= 0.0)
      v21 = v18;
    else
      v21 = -v18;
    v22 = 1.14472989
        - boost::math::detail::lgamma_imp<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>,boost::math::lanczos::lanczos13m53>(a1, a2, 0, v19);
    v23 = v22 - log(v21);
    if (a3)
      goto LABEL_29;
    return v23;
  }
  if (a4 >= 0.0000000149011612)
  {
    if (a4 >= 15.0)
    {
      if (a4 < 3.0 || a4 >= 100.0)
      {
        v23 = (a4 + -0.5) * (log(a4 + 6.02468004 + -0.5) + -1.0);
        if (v23 * 2.22044605e-16 < 20.0)
        {
          v31 = boost::math::tools::detail::evaluate_rational_c_imp<long double,unsigned int,long double>((uint64_t)&boost::math::lanczos::lanczos13m53::lanczos_sum_expG_scaled<long double>(long double const&)::num, (uint64_t)&boost::math::lanczos::lanczos13m53::lanczos_sum_expG_scaled<long double>(long double const&)::denom, &v35, v23 * 2.22044605e-16, 20.0, v25, v26, v27, v28, v29, v30);
          v23 = v23 + log(v31);
        }
        goto LABEL_28;
      }
      boost::math::detail::gamma_imp<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>,boost::math::lanczos::lanczos13m53>(a4, a5, a6, a7, a8, a9, a10, a11);
      v17 = log(v33);
    }
    else
    {
      boost::math::detail::lgamma_small_imp<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>,boost::math::lanczos::lanczos13m53>(a4, a4 + -1.0, a4 + -2.0);
    }
    v23 = v17;
    goto LABEL_28;
  }
  if (a4 == 0.0)
  {
    v15 = (char *)boost::math::detail::lgamma_imp<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>,boost::math::lanczos::lanczos13m53>(long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy> const&,boost::math::lanczos::lanczos13m53 const&,int *)::function;
    v16 = "Evaluation of lgamma at %1%.";
    goto LABEL_7;
  }
  v32 = fabs(a4);
  if (v32 * 4.0 >= 2.22044605e-16)
    v23 = log(fabs(1.0 / a4 + -0.577215665));
  else
    v23 = -log(v32);
  if (a4 < 0.0)
  {
    v20 = -1;
    if (!a3)
      return v23;
    goto LABEL_29;
  }
LABEL_28:
  v20 = 1;
  if (a3)
LABEL_29:
    *a3 = v20;
  return v23;
}

void boost::math::detail::gamma_imp<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>,boost::math::lanczos::lanczos13m53>(double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8)
{
  double v8;
  double v9;
  double v10;
  double v12;
  double v14;
  double v15;
  double v16;
  char *v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;

  v8 = a1;
  v22 = a1;
  v9 = 1.0;
  if (a1 <= 0.0)
  {
    if (floor(a1) == a1)
      boost::math::policies::detail::raise_error<std::domain_error,long double>((char *)boost::math::detail::gamma_imp<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>,boost::math::lanczos::lanczos13m53>(long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy> const&,boost::math::lanczos::lanczos13m53 const&)::function, "Evaluation of tgamma at a negative integer %1%.");
    if (a1 <= -20.0)
    {
      v18 = boost::math::detail::gamma_imp<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>,boost::math::lanczos::lanczos13m53>(-a1);
      v19 = fabs(v18 * boost::math::detail::sinpx<long double>(v8));
      if (v19 < 1.0 && v19 * 1.79769313e308 < 3.14159265)
        boost::math::policies::detail::raise_error<std::overflow_error,long double>((char *)boost::math::detail::gamma_imp<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>,boost::math::lanczos::lanczos13m53>(long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy> const&,boost::math::lanczos::lanczos13m53 const&)::function, "Result of tgamma is too large to represent.");
      return;
    }
    if (a1 < 0.0)
    {
      do
      {
        v9 = v9 / v8;
        v8 = v8 + 1.0;
      }
      while (v8 < 0.0);
    }
    v22 = v8;
  }
  v10 = floor(v8);
  if (v8 < 170.0 && v10 == v8)
  {
    if ((*(_QWORD *)&v8 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    {
      v23 = v8;
      boost::math::policies::detail::raise_error<boost::math::rounding_error,long double>("boost::math::trunc<%1%>(%1%)", "Value %1% can not be represented in the target integer type.");
    }
    v12 = ceil(v8);
    if (v8 < 0.0)
      v10 = v12;
    if (v10 > 2147483650.0 || v10 < -2147483650.0)
    {
      v23 = v8;
      boost::math::policies::detail::raise_error<boost::math::rounding_error,long double>("boost::math::itrunc<%1%>(%1%)", "Value %1% can not be represented in the target integer type.");
    }
  }
  else
  {
    if (v8 >= 0.0000000149011612)
    {
      v21 = v9
          * boost::math::tools::detail::evaluate_rational_c_imp<long double,unsigned int,long double>((uint64_t)&boost::math::lanczos::lanczos13m53::lanczos_sum<long double>(long double const&)::num, (uint64_t)&boost::math::lanczos::lanczos13m53::lanczos_sum<long double>(long double const&)::denom, &v22, 0.0000000149011612, 170.0, a3, a4, a5, a6, a7, a8);
      v14 = v22;
      v15 = v22 + 6.02468004 + -0.5;
      v16 = v14 * log(v15);
      if (v16 <= 709.0)
      {
        pow(v15, v14 + -0.5);
        exp(v15);
        return;
      }
      if (v16 * 0.5 <= 709.0)
      {
        v20 = pow(v15, v14 * 0.5 + -0.25);
        if (1.79769313e308 / v20 >= v21 * (v20 / exp(v15)))
          return;
        v17 = (char *)boost::math::detail::gamma_imp<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>,boost::math::lanczos::lanczos13m53>(long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy> const&,boost::math::lanczos::lanczos13m53 const&)::function;
      }
      else
      {
        v17 = (char *)boost::math::detail::gamma_imp<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>,boost::math::lanczos::lanczos13m53>(long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy> const&,boost::math::lanczos::lanczos13m53 const&)::function;
      }
      boost::math::policies::detail::raise_error<std::overflow_error,long double>(v17, "Result of tgamma is too large to represent.");
    }
    if (v8 < COERCE_DOUBLE(0x4000000000000))
      boost::math::policies::detail::raise_error<std::overflow_error,long double>((char *)boost::math::detail::gamma_imp<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>,boost::math::lanczos::lanczos13m53>(long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy> const&,boost::math::lanczos::lanczos13m53 const&)::function, "Overflow Error");
  }
}

void sub_1BC991F54()
{
  JUMPOUT(0x1BC991DF0);
}

long double boost::math::detail::sinpx<long double>(double a1)
{
  char v1;
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;

  if (a1 < 0.0)
    a1 = -a1;
  v1 = vcvtmd_s64_f64(a1);
  v2 = floor(a1);
  v3 = v2 + 1.0;
  if ((v1 & 1) != 0)
    v4 = v2 + 1.0;
  else
    v4 = v2;
  if (v4 < 0.0)
    boost::math::detail::sinpx<long double>();
  v5 = a1 - v2;
  v6 = v3 - a1;
  if ((v1 & 1) != 0)
  {
    v5 = v6;
    v7 = -a1;
  }
  else
  {
    v7 = a1;
  }
  if (v5 <= 0.5)
    v8 = v5;
  else
    v8 = 1.0 - v5;
  return v7 * sin(v8 * 3.14159265);
}

void boost::math::detail::lgamma_small_imp<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>,boost::math::lanczos::lanczos13m53>(long double a1, double a2, double a3)
{
  double v3;
  double v4;

  v3 = a1;
  if (a1 < 2.22044605e-16)
  {
LABEL_9:
    log(a1);
    return;
  }
  if (a2 == 0.0 || a3 == 0.0)
    return;
  if (a1 <= 2.0)
  {
    if (a1 >= 1.0)
      return;
    goto LABEL_9;
  }
  v4 = 0.0;
  if (a1 >= 3.0)
  {
    do
    {
      v3 = v3 + -1.0;
      v4 = v4 + log(v3);
    }
    while (v3 >= 3.0);
  }
}

double boost::math::detail::tgamma_delta_ratio_imp<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8)
{
  double v8;
  double v9;
  double v10;
  BOOL v11;
  double v12;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double i;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v32;

  v8 = a1 + a2;
  if (a1 <= 0.0 || v8 <= 0.0)
  {
    boost::math::detail::gamma_imp<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>,boost::math::lanczos::lanczos13m53>(a1, a2, a3, a4, a5, a6, a7, a8);
    v21 = v20;
    if (fabs(v20) > 1.79769313e308)
      boost::math::policies::detail::raise_error<std::overflow_error,long double>("boost::math::tgamma<%1%>(%1%)", "numeric overflow");
    boost::math::detail::gamma_imp<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>,boost::math::lanczos::lanczos13m53>(v8, 1.79769313e308, v14, v15, v16, v17, v18, v19);
    if (fabs(v22) > 1.79769313e308)
      boost::math::policies::detail::raise_error<std::overflow_error,long double>("boost::math::tgamma<%1%>(%1%)", "numeric overflow");
    return v21 / v22;
  }
  else
  {
    v9 = floor(a2);
    if (v9 != a2)
      goto LABEL_31;
    v10 = floor(a1);
    v11 = a1 <= 170.0 && v10 == a1;
    if (v11 && v8 <= 170.0)
    {
      if ((*(_QWORD *)&a1 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
        boost::math::policies::detail::raise_error<boost::math::rounding_error,long double>("boost::math::trunc<%1%>(%1%)", "Value %1% can not be represented in the target integer type.");
      v12 = ceil(a1);
      if (a1 >= 0.0)
        v12 = v10;
      if (v12 > 2147483650.0 || v12 < -2147483650.0)
        boost::math::policies::detail::raise_error<boost::math::rounding_error,long double>("boost::math::itrunc<%1%>(%1%)", "Value %1% can not be represented in the target integer type.");
      v27 = dbl_1BCAB8238[(int)v12 - 1];
      if ((*(_QWORD *)&v8 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
        boost::math::policies::detail::raise_error<boost::math::rounding_error,long double>("boost::math::trunc<%1%>(%1%)", "Value %1% can not be represented in the target integer type.");
      v28 = floor(v8);
      v29 = ceil(v8);
      if (v8 < 0.0)
        v28 = v29;
      if (v28 > 2147483650.0 || v28 < -2147483650.0)
        boost::math::policies::detail::raise_error<boost::math::rounding_error,long double>("boost::math::itrunc<%1%>(%1%)", "Value %1% can not be represented in the target integer type.");
      return v27 / dbl_1BCAB8238[(int)v28 - 1];
    }
    v9 = fabs(a2);
    a4 = 20.0;
    if (v9 >= 20.0)
    {
LABEL_31:
      boost::math::detail::tgamma_delta_ratio_imp_lanczos<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>,boost::math::lanczos::lanczos13m53>(a1, a2, v9, a4, a5, a6, a7, a8);
      return v26;
    }
    i = 1.0;
    if (a2 != 0.0)
    {
      if (a2 >= 0.0)
      {
        v32 = a2 + -1.0;
        for (i = 1.0 / a1; v32 != 0.0; i = i / a1)
        {
          a1 = a1 + 1.0;
          v32 = v32 + -1.0;
        }
      }
      else
      {
        i = a1 + -1.0;
        v24 = a2 + 1.0;
        if (v24 != 0.0)
        {
          v25 = a1 + -1.0;
          do
          {
            v25 = v25 + -1.0;
            i = v25 * i;
            v24 = v24 + 1.0;
          }
          while (v24 != 0.0);
        }
      }
    }
  }
  return i;
}

double boost::math::tgamma<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8)
{
  double result;

  boost::math::detail::gamma_imp<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>,boost::math::lanczos::lanczos13m53>(a1, a2, a3, a4, a5, a6, a7, a8);
  if (fabs(result) > 1.79769313e308)
    boost::math::policies::detail::raise_error<std::overflow_error,long double>("boost::math::tgamma<%1%>(%1%)", "numeric overflow");
  return result;
}

void boost::math::detail::tgamma_delta_ratio_imp_lanczos<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>,boost::math::lanczos::lanczos13m53>(double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8)
{
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  long double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;

  v28 = a1;
  if (a1 >= 2.22044605e-16)
  {
    v9 = a1 + 6.02468004 + -0.5;
    if (a1 + a2 == a1)
    {
      if (fabs(a2 / v9) < 2.22044605e-16)
        exp(-a2);
    }
    else
    {
      if (fabs(a2) >= 10.0)
      {
        v12 = pow(v9 / (v9 + a2), a1 + -0.5);
      }
      else
      {
        v11 = 0.5 - a1;
        v29 = a2 / v9;
        if (a2 / v9 < -1.0)
          boost::math::policies::detail::raise_error<std::domain_error,long double>("log1p<%1%>(%1%)", "log1p(x) requires x > -1, but got x = %1%.");
        if (a2 / v9 == -1.0)
          boost::math::policies::detail::raise_error<std::overflow_error,long double>("log1p<%1%>(%1%)", "Overflow Error");
        v20 = log1pl(a2 / v9);
        v12 = exp(v11 * v20);
      }
      boost::math::tools::detail::evaluate_rational_c_imp<long double,unsigned int,long double>((uint64_t)&boost::math::lanczos::lanczos13m53::lanczos_sum<long double>(long double const&)::num, (uint64_t)&boost::math::lanczos::lanczos13m53::lanczos_sum<long double>(long double const&)::denom, &v28, v12, v13, v14, v15, v16, v17, v18, v19);
      v29 = v28 + a2;
      boost::math::tools::detail::evaluate_rational_c_imp<long double,unsigned int,long double>((uint64_t)&boost::math::lanczos::lanczos13m53::lanczos_sum<long double>(long double const&)::num, (uint64_t)&boost::math::lanczos::lanczos13m53::lanczos_sum<long double>(long double const&)::denom, &v29, v28 + a2, v21, v22, v23, v24, v25, v26, v27);
    }
    pow(2.71828183 / (v9 + a2), a2);
  }
  else if (a2 <= 170.0)
  {
    boost::math::detail::gamma_imp<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>,boost::math::lanczos::lanczos13m53>(a1 + a2, a2, a3, a4, a5, a6, a7, a8);
    if (fabs(v10) > 1.79769313e308)
      boost::math::policies::detail::raise_error<std::overflow_error,long double>("boost::math::tgamma<%1%>(%1%)", "numeric overflow");
  }
  else
  {
    boost::math::detail::tgamma_delta_ratio_imp_lanczos<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>,boost::math::lanczos::lanczos13m53>(a2, 170.0 - a2);
  }
}

double boost::math::detail::gamma_incomplete_imp<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(int a1, int a2, uint64_t a3, double *a4, double a5, __n128 a6, double a7, double a8, double a9, double a10, double a11, double a12)
{
  double v12;
  char *v13;
  char *v14;
  int v18;
  double v20;
  BOOL v21;
  double v22;
  long double v23;
  double v24;
  long double v25;
  double v26;
  double v27;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  uint64_t v46;
  double v47;
  double v48;
  double v49;
  double v50;
  double v52;
  double v53;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  char v76;
  double v77;
  double v78;
  double v79;
  double v80;
  double v81;
  double v82;
  double v83;
  double v84;
  double v85;

  v84 = a6.n128_f64[0];
  v85 = a5;
  if (a5 <= 0.0)
  {
    v13 = (char *)boost::math::detail::gamma_incomplete_imp<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(long double,long double,BOOL,BOOL,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy> const&,long double*)::function;
    v14 = "Argument a to the incomplete gamma function must be greater than zero (got a=%1%).";
LABEL_5:
    boost::math::policies::detail::raise_error<std::domain_error,long double>(v13, v14);
  }
  v12 = a6.n128_f64[0];
  if (a6.n128_f64[0] < 0.0)
  {
    v13 = (char *)boost::math::detail::gamma_incomplete_imp<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(long double,long double,BOOL,BOOL,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy> const&,long double*)::function;
    v14 = "Argument x to the incomplete gamma function must be >= 0 (got x=%1%).";
    goto LABEL_5;
  }
  v18 = a2;
  v20 = a5;
  if (a5 < 170.0 || (a1 & 1) != 0)
  {
    if (a4 && (a1 & 1) == 0)
      boost::math::detail::gamma_incomplete_imp<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>();
    v26 = a6.n128_f64[0] + 1.0;
    v27 = 30.0;
    if (v12 < 709.0 && a5 < 30.0 && v26 >= a5)
    {
      v30 = floor(a5);
      if (v30 == a5)
      {
        v26 = 0.6;
        if (v12 > 0.6)
        {
          v38 = boost::math::detail::finite_gamma_q<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(a5, v12, a3, a4);
          if ((a1 & 1) == 0)
          {
            v39 = v38
                * boost::math::tgamma<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(v20, v31, v32, v33, v34, v35, v36, v37);
            if ((v18 & 1) != 0)
              goto LABEL_157;
            goto LABEL_154;
          }
          goto LABEL_147;
        }
      }
      else
      {
        v26 = vabdd_f64(v30, a5);
        v27 = 0.5;
        if (v12 > 0.2 && v26 == 0.5)
        {
          v38 = boost::math::detail::finite_half_gamma_q<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(a4, a5, v12);
          if ((a1 & 1) == 0)
            v38 = v38
                * boost::math::tgamma<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(v20, v31, v32, v33, v34, v35, v36, v37);
          if (!a4 || *a4 != 0.0)
          {
            v18 ^= 1u;
            goto LABEL_148;
          }
          v58 = boost::math::detail::regularised_gamma_prefix<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>,boost::math::lanczos::lanczos13m53>(a3, (uint64_t)&v83, v20, v12);
          *a4 = v58;
          v31 = 1.0;
          if ((a1 & (v38 > 1.0)) != 0)
            v39 = 1.0;
          else
            v39 = v38;
          if ((v18 & 1) != 0)
            goto LABEL_159;
          goto LABEL_152;
        }
      }
    }
    if (a5 > 1.0 && v12 < 0.0000000149011612)
    {
      if ((a1 & 1) != 0)
      {
        v55 = boost::math::tgamma<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(a5 + 1.0, v26, v27, a8, a9, a10, a11, a12);
        v32 = pow(v12, v20) / v55;
      }
      else
      {
        v32 = pow(v12, a5) / a5;
      }
      v31 = v84;
      v34 = v85 + 1.0;
      v33 = 1.0 - v85 * v84 / (v85 + 1.0);
      v38 = v32 * v33;
      if (a4)
      {
        v58 = boost::math::detail::regularised_gamma_prefix<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>,boost::math::lanczos::lanczos13m53>(a3, (uint64_t)&v83, v85, v84);
        *a4 = v58;
        if ((a1 & (v38 > 1.0)) != 0)
          v39 = 1.0;
        else
          v39 = v38;
        if ((v18 & 1) == 0)
          goto LABEL_159;
        goto LABEL_152;
      }
LABEL_148:
      if ((a1 & (v38 > 1.0)) != 0)
        v39 = 1.0;
      else
        v39 = v38;
      if (!v18)
        goto LABEL_157;
      goto LABEL_152;
    }
    if (v12 > 1000.0 && (a5 < v12 || fabs(a5 + -50.0) / v12 < 1.0))
    {
      if (a1)
        v56 = boost::math::detail::regularised_gamma_prefix<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>,boost::math::lanczos::lanczos13m53>(a3, (uint64_t)&v83, a5, v12);
      else
        boost::math::detail::full_igamma_prefix<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(a5, v12);
      if (a4)
        *a4 = v56;
      v31 = v84;
      v38 = v56 / v84;
      if (v56 / v84 != 0.0)
      {
        v69 = boost::math::detail::incomplete_tgamma_large_x<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(&v85, &v84);
        goto LABEL_100;
      }
      goto LABEL_147;
    }
    if (v12 < 0.5)
    {
      v57 = -0.4 / log(v12);
      goto LABEL_81;
    }
    if (v12 < 1.1)
    {
      v57 = v12 * 0.75;
LABEL_81:
      if (v57 >= v20)
      {
        v83 = 0.0;
        boost::math::detail::tgamma_small_upper_part<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(a3, &v83, v18 ^ 1, a4, v20, v12, v27, a8, a9, a10, a11, a12);
        if (a1)
          v68 = v68 / v83;
        goto LABEL_129;
      }
LABEL_82:
      if (a1)
        v67 = boost::math::detail::regularised_gamma_prefix<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>,boost::math::lanczos::lanczos13m53>(a3, (uint64_t)&v83, v20, v12);
      else
        boost::math::detail::full_igamma_prefix<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(v20, v12);
      v38 = v67;
      if (a4)
        *a4 = v67;
      if (v67 == 0.0)
        goto LABEL_148;
      if ((v18 & 1) != 0)
      {
        if (a1)
        {
          v73 = v85;
          v74 = 1.0 / v38;
        }
        else
        {
          v77 = boost::math::tgamma<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(v85, v31, v32, v33, v34, v35, v36, v37);
          v75 = 0.0;
          v73 = v85;
          if (v38 < 1.0 && v38 * 1.79769313e308 <= v77 || (v74 = v77 / v38, v85 >= 1.0) && 1.79769313e308 / v85 <= v74)
          {
            v76 = 0;
            goto LABEL_127;
          }
        }
        v75 = -(v73 * v74);
        v76 = 1;
      }
      else
      {
        v76 = 0;
        v75 = 0.0;
        v73 = v85;
      }
LABEL_127:
      v78 = boost::math::detail::lower_gamma_series<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(v73, v84, v75);
      v31 = v85;
      v79 = v78 / v85;
      if ((v76 & 1) == 0)
      {
        v38 = v38 * v79;
        goto LABEL_148;
      }
      v68 = -(v38 * v79);
LABEL_129:
      if ((a1 & (v68 > 1.0)) != 0)
        v39 = 1.0;
      else
        v39 = v68;
      goto LABEL_157;
    }
    if (a5 > 20.0 && a1)
    {
      v71 = (v12 - a5) / a5;
      if (v20 > 200.0)
      {
        if (20.0 / v20 <= v71 * v71)
          goto LABEL_109;
        goto LABEL_134;
      }
      if (fabs(v71) < 0.4)
      {
LABEL_134:
        v38 = boost::math::detail::igamma_temme_large<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(v20, v12);
        if (v12 >= v20)
          v18 ^= 1u;
        if (!a4)
          goto LABEL_148;
        v58 = boost::math::detail::regularised_gamma_prefix<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>,boost::math::lanczos::lanczos13m53>(a3, (uint64_t)&v83, v20, v12);
        *a4 = v58;
        v31 = 1.0;
        if (v38 <= 1.0)
          v39 = v38;
        else
          v39 = 1.0;
        if ((v18 & 1) == 0)
          goto LABEL_159;
LABEL_152:
        v80 = 1.0;
        if ((a1 & 1) != 0)
        {
LABEL_156:
          v39 = v80 - v39;
LABEL_157:
          if (!a4)
            return v39;
          v58 = *a4;
LABEL_159:
          v82 = v84;
          if (v84 < 1.0 && v84 * 1.79769313e308 < v58)
          {
            *a4 = 8.98846567e307;
            v58 = 8.98846567e307;
          }
          *a4 = v58 / v82;
          return v39;
        }
        v20 = v85;
LABEL_154:
        boost::math::detail::gamma_imp<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>,boost::math::lanczos::lanczos13m53>(v20, v31, v32, v33, v34, v35, v36, v37);
        v80 = v81;
        if (fabs(v81) > 1.79769313e308)
          boost::math::policies::detail::raise_error<std::overflow_error,long double>("boost::math::tgamma<%1%>(%1%)", "numeric overflow");
        goto LABEL_156;
      }
    }
LABEL_109:
    if (v12 + -1.0 / (v12 * 3.0) >= v20)
    {
      if (a1)
        v72 = boost::math::detail::regularised_gamma_prefix<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>,boost::math::lanczos::lanczos13m53>(a3, (uint64_t)&v83, v20, v12);
      else
        boost::math::detail::full_igamma_prefix<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(v20, v12);
      v38 = v72;
      if (a4)
        *a4 = v72;
      if (v72 != 0.0)
      {
        v69 = boost::math::detail::upper_gamma_fraction<long double>(v85, v84, 2.22044605e-16);
LABEL_100:
        v70 = v38 * v69;
        v31 = 1.0;
        if ((a1 & (v70 > 1.0)) != 0)
          v39 = 1.0;
        else
          v39 = v70;
        if ((v18 & 1) != 0)
          goto LABEL_157;
        goto LABEL_152;
      }
LABEL_147:
      v18 ^= 1u;
      goto LABEL_148;
    }
    goto LABEL_82;
  }
  v21 = a5 * 4.0 >= a6.n128_f64[0] || a2 == 0;
  if (v21)
  {
    if ((a2 & 1) != 0)
    {
      v22 = boost::math::detail::gamma_incomplete_imp<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(1, 1, a3, a4, a5, a6);
      if (v22 == 0.0)
      {
        v23 = log(1.0 / (v20 * 12.0) + 1.0 + 1.0 / (v20 * 288.0 * v20)) - v20;
        v24 = v23 + (v20 + -0.5) * log(v20) + 0.918938533;
        if (a4)
        {
          v25 = log(v12);
          *a4 = exp(-(v12 - v20 * v25));
        }
        goto LABEL_53;
      }
    }
    else if (a6.n128_f64[0] * 4.0 < a5
           || (v22 = boost::math::detail::gamma_incomplete_imp<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(1, 0, a3, a4, a5, a6), v22 == 0.0))
    {
      v53 = log(v12);
      v41 = -(v12 - v20 * v53);
      if (a4)
        *a4 = exp(-(v12 - v20 * v53));
      v52 = boost::math::detail::lower_gamma_series<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(v20, v12, 0.0)/ v20;
      goto LABEL_52;
    }
    v59 = log(v22);
    v24 = v59
        + boost::math::lgamma<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(v20, v60, v61, v62, v63, v64, v65, v66);
    goto LABEL_53;
  }
  v40 = log(a6.n128_f64[0]);
  v41 = -(v12 - v20 * v40);
  if (a4)
    *a4 = exp(-(v12 - v20 * v40));
  v42 = v12 - v20 + 1.0;
  v43 = v42 + 2.0;
  v44 = 3.56011817e-307;
  if (v42 + 2.0 != 0.0)
    v44 = v42 + 2.0;
  v45 = 0.0;
  v46 = 2;
  v47 = v44;
  do
  {
    v43 = v43 + 2.0;
    v48 = (v20 - (double)(int)v46) * (double)(int)v46;
    v49 = v43 + v48 * v45;
    v50 = 1.0 / v49;
    v47 = v43 + v48 / v47;
    if (v47 == 0.0)
      v47 = 3.56011817e-307;
    v21 = v49 == 0.0;
    v45 = 2.80889552e306;
    if (!v21)
      v45 = v50;
    v44 = v44 * (v45 * v47);
  }
  while (fabs(v45 * v47 + -1.0) > 2.22044605e-16 && v46++ != 0);
  v52 = 1.0 / (v42 + (v20 + -1.0) / v44);
LABEL_52:
  v24 = v41 + log(v52);
LABEL_53:
  if (v24 > 709.0)
    boost::math::policies::detail::raise_error<std::overflow_error,long double>((char *)boost::math::detail::gamma_incomplete_imp<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(long double,long double,BOOL,BOOL,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy> const&,long double*)::function, "Overflow Error");
  return exp(v24);
}

double boost::math::detail::upper_gamma_fraction<long double>(double a1, double a2, double a3)
{
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  uint64_t v8;
  double v9;
  double v10;
  double v11;
  double v12;
  BOOL v13;

  v3 = a2 - a1 + 1.0;
  v4 = fabs(a3);
  v5 = v3 + 2.0;
  v6 = 3.56011817e-307;
  if (v3 + 2.0 != 0.0)
    v6 = v3 + 2.0;
  v7 = 0.0;
  v8 = 2;
  v9 = v6;
  do
  {
    v5 = v5 + 2.0;
    v10 = (a1 - (double)(int)v8) * (double)(int)v8;
    v11 = v5 + v10 * v7;
    v12 = 1.0 / v11;
    v9 = v5 + v10 / v9;
    if (v9 == 0.0)
      v9 = 3.56011817e-307;
    v13 = v11 == 0.0;
    v7 = 2.80889552e306;
    if (!v13)
      v7 = v12;
    v6 = v6 * (v7 * v9);
    v13 = fabs(v7 * v9 + -1.0) <= v4 || v8++ == 0;
  }
  while (!v13);
  return 1.0 / (v3 + (a1 + -1.0) / v6);
}

double boost::math::detail::lower_gamma_series<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(double a1, double a2, double a3)
{
  double v4;
  uint64_t v5;

  v4 = 1.0;
  v5 = 1000000;
  do
  {
    a3 = v4 + a3;
    if (fabs(a3 * 2.22044605e-16) >= fabs(v4))
      break;
    a1 = a1 + 1.0;
    v4 = v4 * (a2 / a1);
    --v5;
  }
  while (v5);
  if ((unint64_t)(1000000 - v5) >= 0xF4240)
    boost::math::policies::detail::raise_error<boost::math::evaluation_error,long double>("boost::math::detail::lower_gamma_series<%1%>(%1%)", "Series evaluation exceeded %1% iterations, giving up now.");
  return a3;
}

double boost::math::lgamma<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8)
{
  double v8;
  char v10;
  char v11;

  v8 = boost::math::detail::lgamma_imp<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>,boost::math::lanczos::lanczos13m53>((uint64_t)&v11, (uint64_t)&v10, 0, a1, a2, a3, a4, a5, a6, a7, a8);
  if (fabs(v8) > 1.79769313e308)
    boost::math::policies::detail::raise_error<std::overflow_error,long double>("boost::math::lgamma<%1%>(%1%)", "numeric overflow");
  return v8;
}

double boost::math::detail::finite_gamma_q<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(long double a1, long double a2, uint64_t a3, double *a4)
{
  double v7;
  double v8;
  unsigned int v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v18;
  double v19;

  v7 = exp(-a2);
  v8 = 1.0;
  if (v7 == 0.0 || a1 <= 1.0)
  {
    v12 = v7;
  }
  else
  {
    v10 = 2;
    v11 = v7;
    v12 = v7;
    do
    {
      v11 = v11 / v8 * a2;
      v12 = v12 + v11;
      v8 = (double)v10++;
    }
    while (v8 < a1);
  }
  if (a4)
  {
    v13 = v7 * pow(a2, a1);
    v14 = a1 + -1.0;
    v15 = fabs(a1 + -1.0);
    if ((unint64_t)(*(_QWORD *)&v15 - 0x10000000000000) >> 53 >= 0x3FF
      && (unint64_t)(*(_QWORD *)&v15 - 1) >= 0xFFFFFFFFFFFFFLL
      && COERCE__INT64(a1 + -1.0) != 0)
    {
      boost::math::policies::detail::raise_error<boost::math::rounding_error,long double>("boost::math::trunc<%1%>(%1%)", "Value %1% can not be represented in the target integer type.");
    }
    v18 = floor(v14);
    v19 = ceil(v14);
    if (v14 < 0.0)
      v18 = v19;
    if (v18 > 2147483650.0 || v18 < -2147483650.0)
      boost::math::policies::detail::raise_error<boost::math::rounding_error,long double>("boost::math::itrunc<%1%>(%1%)", "Value %1% can not be represented in the target integer type.");
    *a4 = v13 / dbl_1BCAB8238[(int)v18];
  }
  return v12;
}

double boost::math::detail::finite_half_gamma_q<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(double *a1, double a2, double a3)
{
  double v6;
  double v7;
  long double v8;
  double v9;
  double v10;
  double v11;
  unsigned int v12;
  double v13;
  double v14;

  v6 = sqrt(a3);
  v7 = boost::math::detail::erf_imp<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(1, v6);
  if (fabs(v7) > 1.79769313e308)
    boost::math::policies::detail::raise_error<std::overflow_error,long double>("boost::math::erfc<%1%>(%1%, %1%)", "numeric overflow");
  if (a2 <= 1.0 || v7 == 0.0)
  {
    if (!a1)
      return v7;
    v14 = v6 * exp(-a3) / 1.77245385;
LABEL_12:
    *a1 = v14;
    return v7;
  }
  v8 = exp(-a3);
  v9 = sqrt(a3 * 3.14159265);
  v10 = v8 / v9 * a3 + v8 / v9 * a3;
  v11 = 2.0;
  if (a2 > 2.0)
  {
    v12 = 3;
    v13 = v10;
    do
    {
      v13 = v13 / (v11 + -0.5) * a3;
      v10 = v10 + v13;
      v11 = (double)v12++;
    }
    while (v11 < a2);
  }
  v7 = v7 + v10;
  v14 = 0.0;
  if (a1)
    goto LABEL_12;
  return v7;
}

void boost::math::detail::tgamma_small_upper_part<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(uint64_t a1, double *a2, int a3, long double *a4, double a5, long double a6, double a7, double a8, double a9, double a10, double a11, double a12)
{
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  int v26;
  double v27;
  uint64_t v28;
  double v29;

  v17 = a5;
  v18 = boost::math::detail::tgammap1m1_imp<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>,boost::math::lanczos::lanczos13m53>(a5, a6, a7, a8, a9, a10, a11, a12);
  if (fabs(v18) > 1.79769313e308)
    boost::math::policies::detail::raise_error<std::overflow_error,long double>("boost::math::tgamma1pm1<%!%>(%1%)", "numeric overflow");
  if (a2)
    *a2 = (v18 + 1.0) / v17;
  v19 = boost::math::detail::powm1_imp<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(a1, a6, v17);
  v20 = v18 - v19;
  v21 = v19 + 1.0;
  if (a4)
  {
    v22 = *a2;
    *a4 = v21 / (exp(a6) * v22);
  }
  v23 = 0.0;
  if (a3)
    v23 = *a2;
  v24 = -a6;
  v25 = v23 - v20 / v17;
  v26 = 2;
  v27 = -a6;
  v28 = 999990;
  v29 = v25 / v21;
  do
  {
    v17 = v17 + 1.0;
    v29 = v27 / v17 + v29;
    if (fabs(v29 * 2.22044605e-16) >= fabs(v27 / v17))
      break;
    v27 = v27 * v24 / (double)v26++;
    --v28;
  }
  while (v28);
  if ((unint64_t)(999990 - v28) >= 0xF4240)
    boost::math::policies::detail::raise_error<boost::math::evaluation_error,long double>("boost::math::tgamma_small_upper_part<%1%>(%1%, %1%)", "Series evaluation exceeded %1% iterations, giving up now.");
}

double boost::math::detail::igamma_temme_large<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(double a1, double a2)
{
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  float64x2_t v10;
  float64x2_t v11;
  float64x2_t v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t v17;
  const double *v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  double v22;
  double v23;
  double v25;
  double v26;
  double v27;
  int v28;
  uint64_t v29;
  double v30;

  v4 = (a2 - a1) / a1;
  if (v4 < -1.0)
    boost::math::policies::detail::raise_error<std::domain_error,long double>((char *)boost::math::log1pmx<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy> const&)::function, "log1pmx(x) requires x > -1, but got x = %1%.");
  if (v4 == -1.0)
    boost::math::policies::detail::raise_error<std::overflow_error,long double>((char *)boost::math::log1pmx<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy> const&)::function, "Overflow Error");
  v25 = fabs(v4);
  if (v25 <= 0.949999988)
  {
    v27 = -v4;
    if (v25 >= 2.22044605e-16)
    {
      v26 = 0.0;
      v28 = 2;
      v29 = 1000000;
      do
      {
        v4 = v4 * v27;
        v30 = v4 / (double)v28;
        v26 = v26 + v30;
        if (fabs(v26 * 2.22044605e-16) >= fabs(v30))
          break;
        ++v28;
        --v29;
      }
      while (v29);
      if ((unint64_t)(1000000 - v29) >= 0xF4240)
        boost::math::policies::detail::raise_error<boost::math::evaluation_error,long double>((char *)boost::math::log1pmx<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy> const&)::function, "Series evaluation exceeded %1% iterations, giving up now.");
    }
    else
    {
      v26 = v4 * v27 * 0.5;
    }
  }
  else
  {
    v26 = log(v4 + 1.0) - v4;
  }
  v5 = -(v26 * a1);
  v6 = boost::math::detail::erf_imp<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(1, sqrt(v5));
  if (fabs(v6) > 1.79769313e308)
    boost::math::policies::detail::raise_error<std::overflow_error,long double>("boost::math::erfc<%1%>(%1%, %1%)", "numeric overflow");
  v7 = sqrt(v26 * -2.0);
  v8 = exp(-v5);
  if (a2 >= a1)
    v9 = v7;
  else
    v9 = -v7;
  v10.f64[0] = v9 * v9 * -0.000109765822 + -0.000334931611;
  v11.f64[0] = v9 * v9 * 0.000281269515 + 0.0000517179091;
  v12.f64[0] = v9 * v9 * (v9 * v9 * -0.00000229148118 + -0.0000135940482) + 0.0000679778048;
  v13.f64[0] = v9 * v9 * (v9 * v9 * 0.00000801847026 + 0.000000141906292) + -0.000199325705;
  v14.f64[0] = v9 * v9 * 0.00000142309007 + 0.0000110826541;
  v15.f64[0] = v9 * v9 * -0.00000567495283 + -0.000000239650511;
  v16.f64[0] = v9 * v9 * 0.0000000119516286 + 0.000000137863345;
  v17.f64[0] = v9 * v9 * -0.000000057525456 + 0.0000000046471278;
  v10.f64[1] = v9 * v9 * (v9 * v9 * -0.0000183291166 + -0.0000815396937) + 0.00027087821;
  v11.f64[1] = v9 * v9 * (v9 * v9 * 0.0000561168275 + 0.000000790235323) + -0.000592166437;
  v18 = (const double *)&unk_1BCAB7F30;
  *(_QWORD *)&v19.f64[0] = *(_OWORD *)&vld1q_dup_f64(v18);
  v20 = vaddq_f64(vmulq_n_f64(v11, v9), vaddq_f64(vmulq_n_f64(v10, v9 * v9), (float64x2_t)xmmword_1BCAB7AC0));
  v19.f64[1] = 1.0 / a1 * (1.0 / a1);
  v10.f64[0] = v19.f64[1];
  v10.f64[1] = (v9 * -0.000438297099 + 0.000839498721) * v9 + -0.000652623919;
  v12.f64[1] = v9 * v9 * 0.000011375727 + 0.0000664149822;
  v13.f64[1] = v9 * v9 * -0.0000396836505 + -0.00000146384526;
  v14.f64[1] = v9 * v9 * (v9 * v9 * 0.000000142806142 + 0.00000137219573) + -0.0000127606352;
  v15.f64[1] = v9 * v9 * (v9 * v9 * -0.000000629899214 + 0.0000000342357873) + 0.0000529234488;
  v16.f64[1] = v9 * v9 * (v9 * v9 * 9.14769958e-10 + 0.0000000102618098) + -0.000000176659527;
  v17.f64[1] = v9 * v9 * (v9 * v9 * -0.00000000438203602 + 0.00000000670785354) + 0.000000829671134;
  v21 = vaddq_f64(vmulq_n_f64(vaddq_f64(vaddq_f64(vmulq_n_f64(vaddq_f64(vmulq_n_f64(vaddq_f64(vmulq_n_f64(v15, v9 * v9), (float64x2_t)xmmword_1BCAB7B30), v9 * v9), (float64x2_t)xmmword_1BCAB7B40), v9), vaddq_f64(vmulq_n_f64(vaddq_f64(vmulq_n_f64(vaddq_f64(vmulq_n_f64(v14, v9 * v9), (float64x2_t)xmmword_1BCAB7B00), v9 * v9), (float64x2_t)xmmword_1BCAB7B10), v9 * v9), (float64x2_t)xmmword_1BCAB7B20)), vmulq_n_f64(vaddq_f64(vmulq_n_f64(vmlaq_f64(v20, v19, v10), v19.f64[1]), vaddq_f64(
                    vmulq_n_f64(vaddq_f64(vmulq_n_f64(v13, v9 * v9), (float64x2_t)xmmword_1BCAB7AF0), v9),
                    vaddq_f64(vmulq_n_f64(vaddq_f64(vmulq_n_f64(v12, v9 * v9), (float64x2_t)xmmword_1BCAB7AD0), v9 * v9), (float64x2_t)xmmword_1BCAB7AE0))), v19.f64[1])), v19.f64[1]), vaddq_f64(vmulq_n_f64(vaddq_f64(vmulq_n_f64(vaddq_f64(vmulq_n_f64(vaddq_f64(vmulq_n_f64(vaddq_f64(vmulq_n_f64(v17, v9 * v9), (float64x2_t)xmmword_1BCAB7BA0), v9 * v9), (float64x2_t)xmmword_1BCAB7BB0), v9 * v9), (float64x2_t)xmmword_1BCAB7BC0), v9 * v9), (float64x2_t)xmmword_1BCAB7BD0), v9), vaddq_f64(
              vmulq_n_f64(vaddq_f64(vmulq_n_f64(vaddq_f64(vmulq_n_f64(vaddq_f64(vmulq_n_f64(vaddq_f64(vmulq_n_f64(v16, v9 * v9), (float64x2_t)xmmword_1BCAB7B50), v9 * v9), (float64x2_t)xmmword_1BCAB7B60), v9 * v9), (float64x2_t)xmmword_1BCAB7B70), v9 * v9), (float64x2_t)xmmword_1BCAB7B80), v9 * v9), (float64x2_t)xmmword_1BCAB7B90)));
  v22 = v8 / sqrt(a1 * 6.28318531) * (1.0 / a1 * v21.f64[0] + v21.f64[1]);
  v23 = -v22;
  if (a2 >= a1)
    v23 = v22;
  return v6 * 0.5 + v23;
}

double boost::math::detail::incomplete_tgamma_large_x<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(double *a1, double *a2)
{
  double v2;
  double v3;
  double v4;
  uint64_t v5;

  v2 = *a1;
  v3 = 0.0;
  v4 = 1.0;
  v5 = 1000000;
  do
  {
    v3 = v4 + v3;
    if (fabs(v3 * 2.22044605e-16) >= fabs(v4))
      break;
    v2 = v2 + -1.0;
    v4 = v4 * (v2 / *a2);
    --v5;
  }
  while (v5);
  if ((unint64_t)(1000000 - v5) >= 0xF4240)
    boost::math::policies::detail::raise_error<boost::math::evaluation_error,long double>("boost::math::tgamma<%1%>(%1%,%1%)", "Series evaluation exceeded %1% iterations, giving up now.");
  return v3;
}

double boost::math::detail::tgammap1m1_imp<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>,boost::math::lanczos::lanczos13m53>(double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8)
{
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v15;

  if (a1 >= 0.0)
  {
    v9 = a1 + 1.0;
    a2 = 2.0;
    if (a1 >= 2.0)
      goto LABEL_6;
    boost::math::detail::lgamma_small_imp<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>,boost::math::lanczos::lanczos13m53>(v9, a1, a1 + -1.0);
  }
  else
  {
    if (a1 < -0.5)
    {
      v9 = a1 + 1.0;
LABEL_6:
      boost::math::detail::gamma_imp<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>,boost::math::lanczos::lanczos13m53>(v9, a2, a3, a4, a5, a6, a7, a8);
      if (fabs(v11) > 1.79769313e308)
        boost::math::policies::detail::raise_error<std::overflow_error,long double>("boost::math::tgamma<%1%>(%1%)", "numeric overflow");
      return v11 + -1.0;
    }
    if (a1 < -1.0)
      boost::math::policies::detail::raise_error<std::domain_error,long double>("log1p<%1%>(%1%)", "log1p(x) requires x > -1, but got x = %1%.");
    if (a1 == -1.0)
      boost::math::policies::detail::raise_error<std::overflow_error,long double>("log1p<%1%>(%1%)", "Overflow Error");
    v15 = log1pl(a1);
    boost::math::detail::lgamma_small_imp<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>,boost::math::lanczos::lanczos13m53>(a1 + 2.0, a1 + 1.0, a1);
    v10 = v13 - v15;
  }
  v12 = boost::math::detail::expm1_imp<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(v10);
  if (fabs(v12) > 1.79769313e308)
    boost::math::policies::detail::raise_error<std::overflow_error,long double>("boost::math::expm1<%1%>(%1%)", "numeric overflow");
  return v12;
}

void boost::math::binomial_coefficient<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(unsigned int a1, unsigned int a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9, double a10)
{
  unsigned int v10;
  double v11;
  double v12;
  double v13;
  double v14;

  if (a1 < a2)
    boost::math::policies::detail::raise_error<std::domain_error,long double>((char *)boost::math::binomial_coefficient<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(unsigned int,unsigned int,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy> const&)::function, "The binomial coefficient is undefined for k > n, but got k = %1%.");
  if (a2)
  {
    v10 = a1 - a2;
    if (a1 != a2 && a2 != 1 && a1 - 1 != a2 && a1 > 0xAA)
    {
      if (v10 <= a2)
      {
        v11 = (double)v10;
        v13 = (double)(a2 + 1);
        v12 = (double)v10;
      }
      else
      {
        v11 = (double)a2;
        v12 = (double)(v10 + 1);
        v13 = (double)a2;
      }
      boost::math::detail::beta_imp<long double,boost::math::lanczos::lanczos13m53,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(v13, v12, a5, a6, a7, a8, a9, a10);
      if (fabs(v14) > 1.79769313e308)
        boost::math::policies::detail::raise_error<std::overflow_error,long double>("boost::math::beta<%1%>(%1%,%1%)", "numeric overflow");
      if (v14 * v11 == 0.0)
        boost::math::policies::detail::raise_error<std::overflow_error,long double>((char *)boost::math::binomial_coefficient<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(unsigned int,unsigned int,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy> const&)::function, "Overflow Error");
    }
  }
}

void boost::math::policies::detail::raise_error<boost::math::rounding_error,double>(char *a1, char *a2)
{
  char *v2;
  char *v3;
  std::string *v4;
  std::string::size_type size;
  const char *v6;
  std::string *v7;
  std::string::size_type v8;
  std::runtime_error v9;
  _QWORD v10[2];
  char v11;
  std::string v12;
  std::string v13;
  std::string v14;

  v2 = "Unknown function operating on type %1%";
  if (a1)
    v2 = a1;
  if (a2)
    v3 = a2;
  else
    v3 = "Cause unknown: error caused by bad argument with value %1%";
  std::string::basic_string[abi:ne180100]<0>(&v14, v2);
  std::string::basic_string[abi:ne180100]<0>(&v13, v3);
  std::string::basic_string[abi:ne180100]<0>(&v12, "Error in function ");
  boost::math::policies::detail::replace_all_in_string(&v14, "%1%", "double");
  if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v4 = &v14;
  else
    v4 = (std::string *)v14.__r_.__value_.__r.__words[0];
  if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v14.__r_.__value_.__r.__words[2]);
  else
    size = v14.__r_.__value_.__l.__size_;
  std::string::append(&v12, (const std::string::value_type *)v4, size);
  std::string::append(&v12, ": ", 2uLL);
  boost::math::policies::detail::prec_format<double>(v10);
  if (v11 >= 0)
    v6 = (const char *)v10;
  else
    v6 = (const char *)v10[0];
  boost::math::policies::detail::replace_all_in_string(&v13, "%1%", v6);
  if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v7 = &v13;
  else
    v7 = (std::string *)v13.__r_.__value_.__r.__words[0];
  if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v8 = HIBYTE(v13.__r_.__value_.__r.__words[2]);
  else
    v8 = v13.__r_.__value_.__l.__size_;
  std::string::append(&v12, (const std::string::value_type *)v7, v8);
  std::runtime_error::runtime_error(&v9, &v12);
  v9.__vftable = (std::runtime_error_vtbl *)&off_1E7543BD0;
  boost::throw_exception<boost::math::rounding_error>(&v9);
}

void sub_1BC994064(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::runtime_error a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;

  std::runtime_error::~runtime_error(&a9);
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  if (*(char *)(v27 - 17) < 0)
    operator delete(*(void **)(v27 - 40));
  _Unwind_Resume(a1);
}

double boost::math::detail::ibeta_fraction2_t<long double>::operator()(uint64_t a1)
{
  int v1;
  double result;

  v1 = *(_DWORD *)(a1 + 32);
  result = *(double *)(a1 + 16)
         * (*(double *)(a1 + 16)
          * ((*(double *)(a1 + 8) - (double)v1)
           * ((*(double *)a1 + (double)v1 + -1.0)
            * (*(double *)a1 + *(double *)(a1 + 8) + (double)v1 + -1.0)
            * (double)v1)))
         / ((*(double *)a1 + (double)(2 * v1) + -1.0)
          * (*(double *)a1 + (double)(2 * v1) + -1.0));
  *(_DWORD *)(a1 + 32) = v1 + 1;
  return result;
}

uint64_t boost::math::hypergeometric_distribution<double,boost::math::policies::policy<boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>::check_params(unsigned int *a1, char *a2)
{
  unsigned int v2;
  char *v3;

  v2 = a1[1];
  if (a1[2] > v2)
  {
    v3 = "Parameter r out of range: must be <= N but got %1%";
    goto LABEL_5;
  }
  if (*a1 > v2)
  {
    v3 = "Parameter n out of range: must be <= N but got %1%";
LABEL_5:
    boost::math::policies::detail::raise_error<std::domain_error,double>(a2, v3);
  }
  return 1;
}

double boost::math::pdf<double,boost::math::policies::policy<boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(unsigned int *a1, unsigned int *a2)
{
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  double v8;
  double v9;
  _DWORD v11[4];
  uint64_t v12;
  __int128 v13;

  if ((boost::math::hypergeometric_distribution<double,boost::math::policies::policy<boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>::check_params(a1, (char *)boost::math::pdf<double,boost::math::policies::policy<boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(boost::math::hypergeometric_distribution<double,boost::math::policies::policy<boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>> const&,unsigned int const&)::function) & 1) == 0|| (boost::math::hypergeometric_distribution<double,boost::math::policies::policy<boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>::check_x(a1, *a2, (char *)boost::math::pdf<double,boost::math::policies::policy<boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(boost::math::hypergeometric_distribution<double,boost::math::policies::policy<boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>> const&,unsigned int const&)::function) & 1) == 0)
  {
    return 0.0;
  }
  v4 = *a2;
  v6 = a1[1];
  v5 = a1[2];
  v7 = *a1;
  if (v6 > 0xAA)
  {
    if (v6 <= 0x19913)
    {
      v13 = xmmword_1BCAB7BE0;
      v11[0] = v4;
      v11[1] = v5;
      v11[2] = v7;
      v11[3] = v6;
      v12 = 0x200000000;
      boost::math::detail::hypergeometric_pdf_prime_loop_imp<long double>(v11, (uint64_t)&v13);
    }
    else
    {
      boost::math::detail::hypergeometric_pdf_lanczos_imp<long double,boost::math::lanczos::lanczos13m53,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(v4, v5, v7, v6);
    }
  }
  else
  {
    v8 = boost::math::detail::hypergeometric_pdf_factorial_imp<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(v4, v5, v7, v6);
  }
  if (v8 > 1.0)
    v8 = 1.0;
  if (v8 >= 0.0)
    v9 = v8;
  else
    v9 = 0.0;
  if (fabs(v9) > 1.79769313e308)
    boost::math::policies::detail::raise_error<std::overflow_error,double>("boost::math::hypergeometric_pdf<%1%>(%1%,%1%,%1%,%1%)", "numeric overflow");
  return v9;
}

uint64_t boost::math::hypergeometric_distribution<double,boost::math::policies::policy<boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>::check_x(unsigned int *a1, unsigned int a2, char *a3)
{
  unsigned int v3;
  unsigned int v4;
  char *v5;

  v3 = a1[2];
  v4 = *a1;
  if (((v3 + v4 - a1[1]) & ~((int)(v3 + v4 - a1[1]) >> 31)) > a2)
  {
    v5 = "Random variable out of range: must be > 0 and > m + r - N but got %1%";
    goto LABEL_7;
  }
  if (v4 < v3)
    v3 = *a1;
  if (v3 < a2)
  {
    v5 = "Random variable out of range: must be less than both n and r but got %1%";
LABEL_7:
    boost::math::policies::detail::raise_error<std::domain_error,double>(a3, v5);
  }
  return 1;
}

double boost::math::detail::hypergeometric_pdf_factorial_imp<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(int a1, int a2, int a3, unsigned int a4)
{
  uint64_t v4;
  uint64_t v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double result;
  double v11;
  _QWORD v12[5];
  _QWORD v13[4];

  v13[3] = *MEMORY[0x1E0C80C00];
  if (a4 >= 0xAB)
    boost::math::detail::hypergeometric_pdf_factorial_imp<long double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>();
  LODWORD(v4) = 0;
  LODWORD(v5) = 0;
  v6 = dbl_1BCAB8238[a4 - a2];
  v7 = dbl_1BCAB8238[a4 - a3];
  *(double *)v13 = dbl_1BCAB8238[a2];
  *(double *)&v13[1] = v7;
  *(double *)&v13[2] = v6;
  v8 = dbl_1BCAB8238[a1];
  *(double *)v12 = dbl_1BCAB8238[a4];
  *(double *)&v12[1] = v8;
  v9 = dbl_1BCAB8238[a2 - a1];
  *(double *)&v12[2] = dbl_1BCAB8238[a3 - a1];
  *(double *)&v12[3] = v9;
  *(double *)&v12[4] = dbl_1BCAB8238[a1 - a2 + a4 - a3];
  result = dbl_1BCAB8238[a3];
  do
  {
    if ((int)v4 > 4)
    {
LABEL_8:
      if ((int)v5 > 2)
        continue;
    }
    else
    {
      v4 = (int)v4;
      while ((int)v5 > 2 || result >= 1.0)
      {
        v11 = *(double *)&v12[v4++];
        result = result / v11;
        if (v4 == 5)
          goto LABEL_8;
      }
    }
    v5 = (int)v5;
    do
    {
      if ((int)v4 <= 4 && result > 1.0)
        break;
      result = result * *(double *)&v13[v5++];
    }
    while (v5 != 3);
  }
  while ((int)v5 < 3 || (int)v4 < 5);
  return result;
}

void boost::math::detail::hypergeometric_pdf_lanczos_imp<long double,boost::math::lanczos::lanczos13m53,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(unsigned int a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  double v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  long double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  uint64_t i;
  uint64_t v42;
  double v43;
  double v44;
  double v45;
  double v46;
  long double v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;
  double v79;
  double v80;
  double v81;
  double v82;
  double v83;
  double v84;
  double v85;
  double v86;
  double v87;
  double v88;
  double v89;
  double v90;
  double v91;
  double v92;
  double v93;
  double v94;
  double v95;
  double v96;
  double v97;
  double v98;
  double v99;
  double v100;
  double v101;
  double v102;
  double v103;
  unsigned int v104;
  unsigned int v105;
  uint64_t v106;
  double v107;
  double v108;
  double v109;
  double v110;
  double v111;
  double v112;
  double v113;
  double v114;
  _OWORD v115[2];
  int v116;
  int v117[3];
  _OWORD v118[2];
  int v119;
  double v120[9];
  double v121[11];

  v121[9] = *(double *)MEMORY[0x1E0C80C00];
  v121[0] = (double)a3 + 6.02468004 + 0.5;
  v121[1] = (double)a2 + 6.02468004 + 0.5;
  v8 = (double)(a4 - a3);
  v9 = a4 - a2;
  v121[2] = v8 + 6.02468004 + 0.5;
  v121[3] = (double)(a4 - a2) + 6.02468004 + 0.5;
  v121[4] = 1.0 / ((double)a4 + 6.02468004 + 0.5);
  v121[5] = 1.0 / ((double)a1 + 6.02468004 + 0.5);
  v10 = a3 - a1;
  v11 = a2 - a1;
  v121[6] = 1.0 / ((double)(a3 - a1) + 6.02468004 + 0.5);
  v121[7] = 1.0 / ((double)(a2 - a1) + 6.02468004 + 0.5);
  v105 = a4 - a3;
  v12 = a4 - a3 - a2 + a1;
  v121[8] = 1.0 / ((double)v12 + 6.02468004 + 0.5);
  v120[0] = (double)a3 + 0.5;
  v120[1] = (double)a2 + 0.5;
  v120[2] = v8 + 0.5;
  v120[3] = (double)(a4 - a2) + 0.5;
  v120[4] = (double)a4 + 0.5;
  v120[5] = (double)a1 + 0.5;
  v120[6] = (double)(a3 - a1) + 0.5;
  v120[7] = (double)(a2 - a1) + 0.5;
  v120[8] = (double)v12 + 0.5;
  v119 = 1;
  v118[0] = xmmword_1BCABD57C;
  v118[1] = unk_1BCABD58C;
  v116 = 8;
  v115[0] = xmmword_1BCABD5A0;
  v115[1] = unk_1BCABD5B0;
  v114 = COERCE_DOUBLE(v120);
  std::__introsort<std::_ClassicAlgPolicy,boost::math::detail::sort_functor<long double> &,int *,false>((uint64_t)v115, v117, (uint64_t *)&v114, 6, 1);
  v13 = DWORD1(v115[0]);
  v14 = v120[SDWORD1(v115[0])];
  while (1)
  {
    v15 = SLODWORD(v115[0]);
    v120[SLODWORD(v115[0])] = v120[SLODWORD(v115[0])] - v14;
    v16 = v13;
    v17 = v121[v15] * v121[v13];
    v121[v13] = v17;
    if (v17 < 2.22507386e-308 && v120[v13] != 0.0)
      break;
    v18 = 0;
    *((_DWORD *)v118 + v16) += *((_DWORD *)v118 + v15);
    do
    {
      v19 = *(int *)((char *)v115 + v18);
      v20 = *(int *)((char *)v115 + v18 + 4);
      if (v120[v19] > v120[v20])
        break;
      *(_DWORD *)((char *)v115 + v18) = v20;
      *(_DWORD *)((char *)v115 + v18 + 4) = v19;
      v18 += 4;
    }
    while (v18 != 32);
    v13 = DWORD1(v115[0]);
    v14 = v120[SDWORD1(v115[0])];
    if (v14 <= 1.0)
    {
      v21 = 8;
      do
        v22 = v120[*((int *)v115 + v21--)];
      while (v22 == 0.0);
      v104 = v11;
      if ((_DWORD)v21 != -1)
      {
        LODWORD(v23) = v21 + 1;
        do
        {
          v23 = (int)v23;
          do
          {
            v24 = v23 - 1;
            v25 = *((int *)v115 + v23 - 1);
            v26 = *((int *)v115 + v23);
            if (v120[v25] != v120[v26])
              break;
            v121[v25] = v121[v26] * v121[v25];
            v120[v26] = 0.0;
            *((_DWORD *)v118 + v25) += *((_DWORD *)v118 + v26);
            while (v23 != 8)
            {
              v27 = (int *)v115 + v23;
              v28 = *v27;
              v29 = v27[1];
              if (v120[v28] > v120[v29])
                break;
              *((_DWORD *)v115 + v23) = v29;
              v27[1] = v28;
              ++v23;
            }
            v23 = v24;
          }
          while (v24);
          LODWORD(v23) = v23 - 1;
        }
        while ((_DWORD)v23);
      }
      v30 = SLODWORD(v115[0]);
      v31 = v121[SLODWORD(v115[0])];
      v32 = exp((double)*((int *)v118 + SLODWORD(v115[0])));
      v40 = pow(v31 * v32, v120[v30]);
      for (i = 0; i != 32; i += 4)
      {
        v42 = *(int *)((char *)v115 + i + 4);
        v43 = v120[v42];
        if (v43 <= 0.0)
          break;
        if (v40 < 2.22507386e-308)
          return;
        if (v43 == 1.0)
        {
          v44 = v121[v42];
          v45 = v44 * exp((double)*((int *)v118 + v42));
        }
        else
        {
          v46 = v121[v42];
          v47 = v46 * exp((double)*((int *)v118 + v42));
          v45 = v43 == 0.5 ? sqrt(v47) : pow(v47, v43);
        }
        v40 = v40 * v45;
      }
      v114 = (double)(a3 + 1);
      boost::math::tools::detail::evaluate_rational_c_imp<long double,unsigned int,long double>((uint64_t)&boost::math::lanczos::lanczos13m53::lanczos_sum_expG_scaled<long double>(long double const&)::num, (uint64_t)&boost::math::lanczos::lanczos13m53::lanczos_sum_expG_scaled<long double>(long double const&)::denom, &v114, v114, v33, v34, v35, v36, v37, v38, v39);
      v113 = (double)(a2 + 1);
      boost::math::tools::detail::evaluate_rational_c_imp<long double,unsigned int,long double>((uint64_t)&boost::math::lanczos::lanczos13m53::lanczos_sum_expG_scaled<long double>(long double const&)::num, (uint64_t)&boost::math::lanczos::lanczos13m53::lanczos_sum_expG_scaled<long double>(long double const&)::denom, &v113, v113, v48, v49, v50, v51, v52, v53, v54);
      v112 = (double)(v105 + 1);
      boost::math::tools::detail::evaluate_rational_c_imp<long double,unsigned int,long double>((uint64_t)&boost::math::lanczos::lanczos13m53::lanczos_sum_expG_scaled<long double>(long double const&)::num, (uint64_t)&boost::math::lanczos::lanczos13m53::lanczos_sum_expG_scaled<long double>(long double const&)::denom, &v112, v112, v55, v56, v57, v58, v59, v60, v61);
      v111 = (double)(v9 + 1);
      boost::math::tools::detail::evaluate_rational_c_imp<long double,unsigned int,long double>((uint64_t)&boost::math::lanczos::lanczos13m53::lanczos_sum_expG_scaled<long double>(long double const&)::num, (uint64_t)&boost::math::lanczos::lanczos13m53::lanczos_sum_expG_scaled<long double>(long double const&)::denom, &v111, v111, v62, v63, v64, v65, v66, v67, v68);
      v110 = (double)(a4 + 1);
      boost::math::tools::detail::evaluate_rational_c_imp<long double,unsigned int,long double>((uint64_t)&boost::math::lanczos::lanczos13m53::lanczos_sum_expG_scaled<long double>(long double const&)::num, (uint64_t)&boost::math::lanczos::lanczos13m53::lanczos_sum_expG_scaled<long double>(long double const&)::denom, &v110, v110, v69, v70, v71, v72, v73, v74, v75);
      v109 = (double)(a1 + 1);
      boost::math::tools::detail::evaluate_rational_c_imp<long double,unsigned int,long double>((uint64_t)&boost::math::lanczos::lanczos13m53::lanczos_sum_expG_scaled<long double>(long double const&)::num, (uint64_t)&boost::math::lanczos::lanczos13m53::lanczos_sum_expG_scaled<long double>(long double const&)::denom, &v109, v109, v76, v77, v78, v79, v80, v81, v82);
      v108 = (double)(v10 + 1);
      boost::math::tools::detail::evaluate_rational_c_imp<long double,unsigned int,long double>((uint64_t)&boost::math::lanczos::lanczos13m53::lanczos_sum_expG_scaled<long double>(long double const&)::num, (uint64_t)&boost::math::lanczos::lanczos13m53::lanczos_sum_expG_scaled<long double>(long double const&)::denom, &v108, v108, v83, v84, v85, v86, v87, v88, v89);
      v107 = (double)(v104 + 1);
      boost::math::tools::detail::evaluate_rational_c_imp<long double,unsigned int,long double>((uint64_t)&boost::math::lanczos::lanczos13m53::lanczos_sum_expG_scaled<long double>(long double const&)::num, (uint64_t)&boost::math::lanczos::lanczos13m53::lanczos_sum_expG_scaled<long double>(long double const&)::denom, &v107, v107, v90, v91, v92, v93, v94, v95, v96);
      boost::math::tools::detail::evaluate_rational_c_imp<long double,unsigned int,long double>((uint64_t)&boost::math::lanczos::lanczos13m53::lanczos_sum_expG_scaled<long double>(long double const&)::num, (uint64_t)&boost::math::lanczos::lanczos13m53::lanczos_sum_expG_scaled<long double>(long double const&)::denom, (double *)&v106, (double)(v12 + 1), v97, v98, v99, v100, v101, v102, v103);
      return;
    }
  }
}

uint64_t boost::math::prime<boost::math::policies::policy<boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(unsigned int a1)
{
  if (a1 <= 0x35)
    return byte_1BCAB8790[a1];
  if (a1 >> 1 <= 0xCC6)
    return word_1BCAB87C6[a1 - 54];
  if (a1 >> 4 >= 0x271)
    boost::math::policies::detail::raise_error<std::domain_error,unsigned int>("boost::math::prime<%1%>", "Argument n out of range: got %1%");
  return word_1BCABBA76[a1 - 6542] + 0xFFFF;
}

void boost::math::policies::detail::raise_error<std::domain_error,unsigned int>(char *a1, char *a2)
{
  char *v2;
  char *v3;
  std::string *v4;
  std::string::size_type size;
  const char *v6;
  std::string *v7;
  std::string::size_type v8;
  std::logic_error v9;
  _QWORD v10[2];
  char v11;
  std::string v12;
  std::string v13;
  std::string v14;

  v2 = "Unknown function operating on type %1%";
  if (a1)
    v2 = a1;
  if (a2)
    v3 = a2;
  else
    v3 = "Cause unknown: error caused by bad argument with value %1%";
  std::string::basic_string[abi:ne180100]<0>(&v14, v2);
  std::string::basic_string[abi:ne180100]<0>(&v13, v3);
  std::string::basic_string[abi:ne180100]<0>(&v12, "Error in function ");
  boost::math::policies::detail::replace_all_in_string(&v14, "%1%", (const char *)(*(_QWORD *)(MEMORY[0x1E0DE4EF8] + 8) & 0x7FFFFFFFFFFFFFFFLL));
  if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v4 = &v14;
  else
    v4 = (std::string *)v14.__r_.__value_.__r.__words[0];
  if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v14.__r_.__value_.__r.__words[2]);
  else
    size = v14.__r_.__value_.__l.__size_;
  std::string::append(&v12, (const std::string::value_type *)v4, size);
  std::string::append(&v12, ": ", 2uLL);
  boost::math::policies::detail::prec_format<unsigned int>(v10);
  if (v11 >= 0)
    v6 = (const char *)v10;
  else
    v6 = (const char *)v10[0];
  boost::math::policies::detail::replace_all_in_string(&v13, "%1%", v6);
  if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v7 = &v13;
  else
    v7 = (std::string *)v13.__r_.__value_.__r.__words[0];
  if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v8 = HIBYTE(v13.__r_.__value_.__r.__words[2]);
  else
    v8 = v13.__r_.__value_.__l.__size_;
  std::string::append(&v12, (const std::string::value_type *)v7, v8);
  std::logic_error::logic_error(&v9, &v12);
  v9.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5018] + 16);
  boost::throw_exception<std::domain_error>(&v9);
}

uint64_t boost::math::policies::detail::prec_format<unsigned int>@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  _QWORD v4[2];
  uint64_t v5;
  _QWORD v6[10];
  char v7;
  uint64_t v8;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v4);
  *(_QWORD *)((char *)&v6[1] + *(_QWORD *)(v5 - 24)) = 11;
  std::ostream::operator<<();
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v6, a1);
  v4[0] = *MEMORY[0x1E0DE4F50];
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v4 + *(_QWORD *)(v4[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v5 = v2;
  v6[0] = MEMORY[0x1E0DE4FB8] + 16;
  if (v7 < 0)
    operator delete((void *)v6[8]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1BCCFB8B4](&v8);
}

void sub_1BC994D8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t boost::math::detail::hypergeometric_pdf_prime_loop_imp<long double>(_DWORD *a1, uint64_t a2)
{
  uint64_t result;
  unsigned int i;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  double v10;
  double v11;
  unsigned int v12;
  uint64_t v13;
  double v14;
  int v15;
  int v16;
  char v17;
  unsigned int v18;
  long double v19[2];

  result = a1[5];
  for (i = a1[3]; result <= i; i = a1[3])
  {
    v6 = 0;
    v9 = result;
    do
    {
      v7 = a1[2];
      v8 = a1[1];
      v6 = v7 / v9
         + v6
         + v8 / v9
         + (i - v7) / v9
         + (i - v8) / v9
         - (i / v9
          + *a1 / v9
          + (v7 - *a1) / v9
          + (v8 - *a1) / v9
          + (i - v7 - v8 + *a1) / v9);
      v9 *= (_DWORD)result;
    }
    while (v9 <= i);
    if (v6)
    {
      v19[0] = (double)result;
      v10 = boost::math::detail::integer_power<long double>(v19, v6);
      v11 = *(double *)a2;
      if (v10 > 1.0 && 1.79769313e308 / v10 < v11 || v10 < 1.0 && 2.22507386e-308 / v10 > v11)
      {
        v19[0] = v10;
        *(_QWORD *)&v19[1] = a2;
        v18 = a1[4] + 1;
        a1[4] = v18;
        a1[5] = boost::math::prime<boost::math::policies::policy<boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(v18);
        return boost::math::detail::hypergeometric_pdf_prime_loop_imp<long double>(a1, v19);
      }
      *(double *)a2 = v10 * v11;
    }
    v12 = a1[4] + 1;
    a1[4] = v12;
    result = boost::math::prime<boost::math::policies::policy<boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>>(v12);
    a1[5] = result;
  }
  v13 = a2;
  do
  {
    if (*(double *)v13 >= 1.0)
      break;
    v13 = *(_QWORD *)(v13 + 8);
  }
  while (v13);
  do
  {
    if (*(double *)a2 < 1.0)
      goto LABEL_18;
    a2 = *(_QWORD *)(a2 + 8);
  }
  while (a2);
  if (v13)
  {
    a2 = 0;
LABEL_18:
    v14 = 1.0;
    while (1)
    {
      if (!v13)
        goto LABEL_29;
      if (!a2 || v14 <= 1.0)
        break;
      v15 = 0;
LABEL_30:
      if (v14 >= 1.0)
        v16 = 1;
      else
        v16 = v15;
      if (a2 && v16)
      {
LABEL_35:
        v14 = v14 * *(double *)a2;
        while (1)
        {
          a2 = *(_QWORD *)(a2 + 8);
          if (!a2)
            break;
          if (*(double *)a2 < 1.0)
          {
            if (v14 >= 1.0)
              v17 = 1;
            else
              v17 = v15;
            if ((v17 & 1) != 0)
              goto LABEL_35;
            break;
          }
        }
      }
      if (!(v13 | a2))
        return result;
    }
LABEL_23:
    v14 = v14 * *(double *)v13;
    while (1)
    {
      v13 = *(_QWORD *)(v13 + 8);
      if (!v13)
        break;
      if (*(double *)v13 >= 1.0)
      {
        if (!a2)
          goto LABEL_23;
        v15 = 0;
        if (v14 <= 1.0)
          goto LABEL_23;
        goto LABEL_30;
      }
    }
LABEL_29:
    v15 = 1;
    goto LABEL_30;
  }
  return result;
}

double boost::math::detail::integer_power<long double>(long double *a1, int a2)
{
  double result;
  double v3;
  double v4;
  double v5;
  double v6;

  if (a2 < 0)
    return 1.0 / boost::math::detail::integer_power<long double>(a1, -a2);
  result = 1.0;
  switch(a2)
  {
    case 0:
      return result;
    case 1:
      return *a1;
    case 2:
      v3 = *a1;
      goto LABEL_15;
    case 3:
      return *a1 * (*a1 * *a1);
    case 4:
      v4 = *a1;
      goto LABEL_14;
    case 5:
      v5 = *a1;
      v6 = v5 * v5;
      goto LABEL_12;
    case 6:
      v3 = *a1 * (*a1 * *a1);
      goto LABEL_15;
    case 7:
      v5 = *a1;
      v6 = v5 * (v5 * v5);
LABEL_12:
      result = v6 * (v5 * v6);
      break;
    case 8:
      v4 = *a1 * *a1;
LABEL_14:
      v3 = v4 * v4;
LABEL_15:
      result = v3 * v3;
      break;
    default:
      result = pow(*a1, (double)a2);
      break;
  }
  return result;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,boost::math::detail::sort_functor<long double> &,int *,false>(uint64_t result, int *a2, uint64_t *a3, uint64_t a4, char a5)
{
  int *v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int *v15;
  int v16;
  int *v17;
  char v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;

  v8 = (int *)result;
LABEL_2:
  v9 = v8;
LABEL_3:
  v10 = 1 - a4;
  while (2)
  {
    v8 = v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = a2 - v9;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v20 = *(a2 - 1);
        v21 = *v9;
        if (*(double *)(*a3 + 8 * v20) > *(double *)(*a3 + 8 * v21))
        {
          *v9 = v20;
          *(a2 - 1) = v21;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,boost::math::detail::sort_functor<long double> &,int *>(v9, v9 + 1, a2 - 1, a3);
      case 4uLL:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,boost::math::detail::sort_functor<long double> &,int *>(v9, v9 + 1, v9 + 2, a2 - 1, a3);
      case 5uLL:
        return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,boost::math::detail::sort_functor<long double> &,int *>(v9, v9 + 1, v9 + 2, v9 + 3, a2 - 1, a3);
      default:
        if (v12 <= 95)
        {
          if ((a5 & 1) != 0)
            return (uint64_t)std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,boost::math::detail::sort_functor<long double> &,int *>(v9, a2, a3);
          else
            return (uint64_t)std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,boost::math::detail::sort_functor<long double> &,int *>(v9, a2, a3);
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = &v9[v13 >> 1];
          if ((unint64_t)v12 < 0x201)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,boost::math::detail::sort_functor<long double> &,int *>(&v9[v13 >> 1], v9, a2 - 1, a3);
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,boost::math::detail::sort_functor<long double> &,int *>(v9, &v9[v13 >> 1], a2 - 1, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,boost::math::detail::sort_functor<long double> &,int *>(v9 + 1, v15 - 1, a2 - 2, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,boost::math::detail::sort_functor<long double> &,int *>(v9 + 2, &v9[v14 + 1], a2 - 3, a3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,boost::math::detail::sort_functor<long double> &,int *>(v15 - 1, v15, &v9[v14 + 1], a3);
            v16 = *v9;
            *v9 = *v15;
            *v15 = v16;
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          if (*(double *)(*a3 + 8 * *(v9 - 1)) <= *(double *)(*a3 + 8 * *v9))
          {
            result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,int *,boost::math::detail::sort_functor<long double> &>(v9, a2, a3);
            v9 = (int *)result;
            goto LABEL_17;
          }
LABEL_12:
          v17 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,int *,boost::math::detail::sort_functor<long double> &>(v9, a2, a3);
          if ((v18 & 1) == 0)
            goto LABEL_15;
          v19 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,boost::math::detail::sort_functor<long double> &,int *>(v9, v17, a3);
          v9 = v17 + 1;
          result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,boost::math::detail::sort_functor<long double> &,int *>(v17 + 1, a2, a3);
          if (!(_DWORD)result)
          {
            v10 = v11 + 1;
            if (v19)
              continue;
LABEL_15:
            result = std::__introsort<std::_ClassicAlgPolicy,boost::math::detail::sort_functor<long double> &,int *,false>(v8, v17, a3, -v11, a5 & 1);
            v9 = v17 + 1;
LABEL_17:
            a5 = 0;
            a4 = -v11;
            goto LABEL_3;
          }
          a4 = -v11;
          a2 = v17;
          if (v19)
            return result;
          goto LABEL_2;
        }
        if (v9 != a2)
          return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,boost::math::detail::sort_functor<long double> &,int *,int *>(v9, a2, a2, a3);
        return result;
    }
  }
}

int *std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,boost::math::detail::sort_functor<long double> &,int *>(int *result, int *a2, uint64_t *a3)
{
  int *v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  _DWORD *v11;

  if (result != a2)
  {
    v3 = result + 1;
    if (result + 1 != a2)
    {
      v4 = 0;
      v5 = *a3;
      v6 = result;
      do
      {
        v8 = *v6;
        v7 = v6[1];
        v6 = v3;
        v9 = *(double *)(v5 + 8 * v7);
        if (v9 > *(double *)(v5 + 8 * v8))
        {
          v10 = v4;
          while (1)
          {
            *(int *)((char *)result + v10 + 4) = v8;
            if (!v10)
              break;
            v8 = *(int *)((char *)result + v10 - 4);
            v10 -= 4;
            if (v9 <= *(double *)(v5 + 8 * v8))
            {
              v11 = (int *)((char *)result + v10 + 4);
              goto LABEL_10;
            }
          }
          v11 = result;
LABEL_10:
          *v11 = v7;
        }
        v3 = v6 + 1;
        v4 += 4;
      }
      while (v6 + 1 != a2);
    }
  }
  return result;
}

int *std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,boost::math::detail::sort_functor<long double> &,int *>(int *result, int *a2, uint64_t *a3)
{
  int *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;

  if (result != a2)
  {
    v3 = result + 1;
    if (result + 1 != a2)
    {
      v4 = *a3;
      do
      {
        v6 = *result;
        v5 = result[1];
        result = v3;
        v7 = *(double *)(v4 + 8 * v5);
        if (v7 > *(double *)(v4 + 8 * v6))
        {
          do
          {
            *v3 = v6;
            v6 = *(v3 - 2);
            --v3;
          }
          while (v7 > *(double *)(v4 + 8 * v6));
          *v3 = v5;
        }
        v3 = result + 1;
      }
      while (result + 1 != a2);
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,boost::math::detail::sort_functor<long double> &,int *>(int *a1, int *a2, int *a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  double v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = *a2;
  v5 = *a1;
  v6 = *a4;
  v7 = *(double *)(*a4 + 8 * v4);
  v8 = *(double *)(*a4 + 8 * v5);
  v9 = *a3;
  v10 = *(double *)(*a4 + 8 * v9);
  if (v7 > v8)
  {
    if (v10 > v7)
    {
      *a1 = v9;
      *a3 = v5;
      return 1;
    }
    *a1 = v4;
    *a2 = v5;
    v13 = *a3;
    if (*(double *)(v6 + 8 * v13) <= v8)
      return 1;
    *a2 = v13;
    *a3 = v5;
    return 2;
  }
  if (v10 > v7)
  {
    *a2 = v9;
    *a3 = v4;
    v11 = *a2;
    v12 = *a1;
    if (*(double *)(v6 + 8 * v11) <= *(double *)(v6 + 8 * v12))
      return 1;
    *a1 = v11;
    *a2 = v12;
    return 2;
  }
  return 0;
}

int *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,int *,boost::math::detail::sort_functor<long double> &>(int *a1, int *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  int *v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *a1;
  v4 = *a3;
  v5 = *(double *)(*a3 + 8 * v3);
  if (v5 <= *(double *)(*a3 + 8 * *(a2 - 1)))
  {
    v8 = a1 + 1;
    do
    {
      v6 = v8;
      if (v8 >= a2)
        break;
      ++v8;
    }
    while (v5 <= *(double *)(v4 + 8 * *v6));
  }
  else
  {
    v6 = a1;
    do
    {
      v7 = v6[1];
      ++v6;
    }
    while (v5 <= *(double *)(v4 + 8 * v7));
  }
  if (v6 < a2)
  {
    do
      v9 = *--a2;
    while (v5 > *(double *)(v4 + 8 * v9));
  }
  if (v6 < a2)
  {
    v10 = *v6;
    v11 = *a2;
    do
    {
      *v6 = v11;
      *a2 = v10;
      do
      {
        v12 = v6[1];
        ++v6;
        v10 = v12;
      }
      while (v5 <= *(double *)(v4 + 8 * v12));
      do
      {
        v13 = *--a2;
        v11 = v13;
      }
      while (v5 > *(double *)(v4 + 8 * v13));
    }
    while (v6 < a2);
  }
  if (v6 - 1 != a1)
    *a1 = *(v6 - 1);
  *(v6 - 1) = v3;
  return v6;
}

int *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,int *,boost::math::detail::sort_functor<long double> &>(int *a1, int *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  int *v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  int *v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;

  v3 = 0;
  v4 = *a1;
  v5 = *a3;
  v6 = *(double *)(*a3 + 8 * v4);
  do
    v7 = a1[++v3];
  while (*(double *)(v5 + 8 * v7) > v6);
  v8 = &a1[v3];
  v9 = &a1[v3 - 1];
  if (v3 == 1)
  {
    do
    {
      if (v8 >= a2)
        break;
      v11 = *--a2;
    }
    while (*(double *)(v5 + 8 * v11) <= v6);
  }
  else
  {
    do
      v10 = *--a2;
    while (*(double *)(v5 + 8 * v10) <= v6);
  }
  if (v8 < a2)
  {
    v12 = *a2;
    v13 = v7;
    v14 = v8;
    v15 = a2;
    do
    {
      *v14 = v12;
      *v15 = v13;
      do
      {
        v16 = v14[1];
        ++v14;
        v13 = v16;
      }
      while (*(double *)(v5 + 8 * v16) > v6);
      do
      {
        v17 = *--v15;
        v12 = v17;
      }
      while (*(double *)(v5 + 8 * v17) <= v6);
    }
    while (v14 < v15);
    v9 = v14 - 1;
  }
  if (v9 != a1)
    *a1 = *v9;
  *v9 = v4;
  return v9;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,boost::math::detail::sort_functor<long double> &,int *>(int *a1, int *a2, uint64_t *a3)
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  int *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = *(a2 - 1);
      v9 = *a1;
      if (*(double *)(*a3 + 8 * v8) > *(double *)(*a3 + 8 * v9))
      {
        *a1 = v8;
        *(a2 - 1) = v9;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,boost::math::detail::sort_functor<long double> &,int *>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,boost::math::detail::sort_functor<long double> &,int *>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,boost::math::detail::sort_functor<long double> &,int *>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v10 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,boost::math::detail::sort_functor<long double> &,int *>(a1, a1 + 1, a1 + 2, a3);
      v11 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v12 = 0;
      v13 = *a3;
      v14 = 12;
      break;
  }
  while (1)
  {
    v15 = *v11;
    v16 = *v10;
    v17 = *(double *)(v13 + 8 * v15);
    if (v17 > *(double *)(v13 + 8 * v16))
    {
      v18 = v14;
      while (1)
      {
        *(int *)((char *)a1 + v18) = v16;
        v19 = v18 - 4;
        if (v18 == 4)
          break;
        v16 = *(int *)((char *)a1 + v18 - 8);
        v18 -= 4;
        if (v17 <= *(double *)(v13 + 8 * v16))
        {
          v20 = (int *)((char *)a1 + v19);
          goto LABEL_12;
        }
      }
      v20 = a1;
LABEL_12:
      *v20 = v15;
      if (++v12 == 8)
        return v11 + 1 == a2;
    }
    v10 = v11;
    v14 += 4;
    if (++v11 == a2)
      return 1;
  }
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,boost::math::detail::sort_functor<long double> &,int *>(int *a1, int *a2, int *a3, int *a4, uint64_t *a5)
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,boost::math::detail::sort_functor<long double> &,int *>(a1, a2, a3, a5);
  v11 = *a4;
  v12 = *a3;
  v13 = *a5;
  if (*(double *)(*a5 + 8 * v11) > *(double *)(*a5 + 8 * v12))
  {
    *a3 = v11;
    *a4 = v12;
    v14 = *a3;
    v15 = *a2;
    if (*(double *)(v13 + 8 * v14) > *(double *)(v13 + 8 * v15))
    {
      *a2 = v14;
      *a3 = v15;
      v16 = *a2;
      v17 = *a1;
      if (*(double *)(v13 + 8 * v16) > *(double *)(v13 + 8 * v17))
      {
        *a1 = v16;
        *a2 = v17;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,boost::math::detail::sort_functor<long double> &,int *>(int *a1, int *a2, int *a3, int *a4, int *a5, uint64_t *a6)
{
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,boost::math::detail::sort_functor<long double> &,int *>(a1, a2, a3, a4, a6);
  v13 = *a5;
  v14 = *a4;
  v15 = *a6;
  if (*(double *)(*a6 + 8 * v13) > *(double *)(*a6 + 8 * v14))
  {
    *a4 = v13;
    *a5 = v14;
    v16 = *a4;
    v17 = *a3;
    if (*(double *)(v15 + 8 * v16) > *(double *)(v15 + 8 * v17))
    {
      *a3 = v16;
      *a4 = v17;
      v18 = *a3;
      v19 = *a2;
      if (*(double *)(v15 + 8 * v18) > *(double *)(v15 + 8 * v19))
      {
        *a2 = v18;
        *a3 = v19;
        v20 = *a2;
        v21 = *a1;
        if (*(double *)(v15 + 8 * v20) > *(double *)(v15 + 8 * v21))
        {
          *a1 = v20;
          *a2 = v21;
        }
      }
    }
  }
  return result;
}

int *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,boost::math::detail::sort_functor<long double> &,int *,int *>(int *a1, int *a2, int *a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int *v12;
  int *v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  int v19;
  int *v20;

  if (a1 != a2)
  {
    v8 = (char *)a2 - (char *)a1;
    v9 = a2 - a1;
    if ((char *)a2 - (char *)a1 >= 5)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = &a1[v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,boost::math::detail::sort_functor<long double> &,int *>((uint64_t)a1, a4, v9, v12--);
        --v11;
      }
      while (v11);
    }
    v13 = a2;
    if (a2 != a3)
    {
      v14 = a2;
      do
      {
        v15 = *v14;
        v16 = *a1;
        if (*(double *)(*a4 + 8 * v15) > *(double *)(*a4 + 8 * v16))
        {
          *v14 = v16;
          *a1 = v15;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,boost::math::detail::sort_functor<long double> &,int *>((uint64_t)a1, a4, v9, a1);
        }
        ++v14;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 5)
    {
      v17 = (unint64_t)v8 >> 2;
      v18 = a2 - 1;
      do
      {
        v19 = *a1;
        v20 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,boost::math::detail::sort_functor<long double> &,int *>(a1, a4, v17);
        if (v18 == v20)
        {
          *v20 = v19;
        }
        else
        {
          *v20 = *v18;
          *v18 = v19;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,boost::math::detail::sort_functor<long double> &,int *>((uint64_t)a1, (uint64_t)(v20 + 1), a4, v20 + 1 - a1);
        }
        --v18;
      }
      while (v17-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,boost::math::detail::sort_functor<long double> &,int *>(uint64_t result, uint64_t *a2, uint64_t a3, int *a4)
{
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;

  if (a3 >= 2)
  {
    v4 = (unint64_t)(a3 - 2) >> 1;
    if (v4 >= ((uint64_t)a4 - result) >> 2)
    {
      v5 = ((uint64_t)a4 - result) >> 1;
      v6 = v5 + 1;
      v7 = (int *)(result + 4 * (v5 + 1));
      v8 = v5 + 2;
      v9 = *a2;
      if (v8 < a3 && *(double *)(v9 + 8 * *v7) > *(double *)(v9 + 8 * v7[1]))
      {
        ++v7;
        v6 = v8;
      }
      v10 = *v7;
      v11 = *a4;
      v12 = *(double *)(v9 + 8 * v11);
      if (*(double *)(v9 + 8 * v10) <= v12)
      {
        do
        {
          v13 = v7;
          *a4 = v10;
          if (v4 < v6)
            break;
          v14 = 2 * v6;
          v6 = (2 * v6) | 1;
          v7 = (int *)(result + 4 * v6);
          v15 = v14 + 2;
          if (v15 < a3 && *(double *)(v9 + 8 * *v7) > *(double *)(v9 + 8 * v7[1]))
          {
            ++v7;
            v6 = v15;
          }
          v10 = *v7;
          a4 = v13;
        }
        while (*(double *)(v9 + 8 * v10) <= v12);
        *v13 = v11;
      }
    }
  }
  return result;
}

int *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,boost::math::detail::sort_functor<long double> &,int *>(int *result, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = 0;
  v4 = a3 - 2;
  if (a3 < 2)
    v4 = a3 - 1;
  v5 = v4 >> 1;
  v6 = *a2;
  do
  {
    v7 = result;
    result += v3 + 1;
    v8 = 2 * v3;
    v3 = (2 * v3) | 1;
    v9 = v8 + 2;
    if (v9 < a3 && *(double *)(v6 + 8 * *result) > *(double *)(v6 + 8 * result[1]))
    {
      ++result;
      v3 = v9;
    }
    *v7 = *result;
  }
  while (v3 <= v5);
  return result;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,boost::math::detail::sort_functor<long double> &,int *>(uint64_t result, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  unint64_t v4;
  int *v5;
  uint64_t v6;
  _DWORD *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  _DWORD *v12;

  if (a4 >= 2)
  {
    v4 = (unint64_t)(a4 - 2) >> 1;
    v5 = (int *)(result + 4 * v4);
    v6 = *v5;
    v9 = *(int *)(a2 - 4);
    v7 = (_DWORD *)(a2 - 4);
    v8 = v9;
    v10 = *a3;
    v11 = *(double *)(*a3 + 8 * v9);
    if (*(double *)(*a3 + 8 * v6) > v11)
    {
      do
      {
        v12 = v5;
        *v7 = v6;
        if (!v4)
          break;
        v4 = (v4 - 1) >> 1;
        v5 = (int *)(result + 4 * v4);
        v6 = *v5;
        v7 = v12;
      }
      while (*(double *)(v10 + 8 * v6) > v11);
      *v12 = v8;
    }
  }
  return result;
}

uint64_t CoreChartTrendDistributionSeries.init(dataViewModel:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v4;
  uint64_t v5;
  unsigned int *v6;
  uint64_t v7;
  uint64_t v8;

  sub_1BC9964B8(a1, a2, type metadata accessor for CoreChartTrendViewModel);
  v4 = *(unsigned __int8 *)(a1 + 16);
  sub_1BC997208(a1, type metadata accessor for CoreChartTrendViewModel);
  v5 = a2 + *(int *)(type metadata accessor for CoreChartTrendDistributionSeries() + 20);
  switch(v4)
  {
    case 2:
      v6 = (unsigned int *)MEMORY[0x1E0CB1140];
      break;
    case 5:
      v6 = (unsigned int *)MEMORY[0x1E0CB10F8];
      break;
    default:
      v6 = (unsigned int *)MEMORY[0x1E0CB1130];
      break;
  }
  v7 = *v6;
  v8 = sub_1BCAB4F68();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 104))(v5, v7, v8);
}

uint64_t type metadata accessor for CoreChartTrendDistributionSeries()
{
  uint64_t result;

  result = qword_1ED6C34C8;
  if (!qword_1ED6C34C8)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t CoreChartTrendDistributionSeries.distributionSeries.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD v7[2];

  v1 = type metadata accessor for CoreChartTrendDistributionSeries();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 64);
  MEMORY[0x1E0C80A78](v1);
  v7[1] = *(_QWORD *)(v0 + *(int *)(type metadata accessor for CoreChartTrendViewModel(0) + 36));
  sub_1BC9964B8(v0, (uint64_t)v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(_QWORD))type metadata accessor for CoreChartTrendDistributionSeries);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  sub_1BC996664((uint64_t)v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), v5 + v4);
  sub_1BC998AB0(0, &qword_1EF477CB8, type metadata accessor for CoreChartTrendDataElement, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
  sub_1BCAB4E54();
  sub_1BC998AB0(0, &qword_1EF477CC0, (uint64_t (*)(uint64_t))sub_1BC9966F4, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  sub_1BC996814();
  sub_1BC996874();
  sub_1BC996948(qword_1EF477CE8, type metadata accessor for CoreChartTrendDataElement, (uint64_t)&protocol conformance descriptor for CoreChartTrendDataElement);
  swift_bridgeObjectRetain();
  return sub_1BCAB5DCC();
}

uint64_t sub_1BC995FD4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  char *v46;
  char *v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53[6];

  v43 = a2;
  sub_1BC998A54();
  v5 = ((uint64_t (*)(void))MEMORY[0x1E0C80A78])();
  v48 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v46 = (char *)&v37 - v7;
  sub_1BC998AB0(0, &qword_1ED6C7288, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB11F0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v37 - v9;
  sub_1BC998B08();
  MEMORY[0x1E0C80A78](v11);
  v49 = (char *)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_1BCAB5790();
  v45 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BC9967A0(0);
  v17 = v16;
  v18 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16);
  v44 = (char *)&v37 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BC9966F4(0);
  v21 = v20;
  v22 = *(_QWORD *)(v20 - 8);
  MEMORY[0x1E0C80A78](v20);
  v47 = (char *)&v37 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = type metadata accessor for CoreChartTrendDataElement(0);
  v25 = (uint64_t *)(a1 + *(int *)(v24 + 24));
  if ((v25[1] & 1) != 0)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v22 + 56))(a3, 1, 1, v21);
  v27 = v24;
  v38 = v22;
  v39 = v18;
  v40 = v17;
  v41 = v21;
  v42 = a3;
  v28 = *v25;
  sub_1BCAB5A6C();
  type metadata accessor for CoreChartTrendDistributionSeries();
  v29 = sub_1BCAB4F74();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v10, 1, 1, v29);
  sub_1BCAB5628();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1BC998B64((uint64_t)v10);
  sub_1BCAB5A6C();
  v53[0] = *(_QWORD *)(a1 + *(int *)(v27 + 20));
  sub_1BCAB5634();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1BCAB5A6C();
  v53[0] = v28;
  sub_1BCAB5634();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1BCAB4E54();
  sub_1BCAB5778();
  sub_1BCAB5910();
  v30 = MEMORY[0x1E0C93B30];
  v31 = v44;
  sub_1BCAB55C8();
  sub_1BC998BB8((uint64_t)v53);
  (*(void (**)(char *, uint64_t))(v45 + 8))(v15, v13);
  if (qword_1ED6C31B8 != -1)
    swift_once();
  v51 = v30;
  v52 = qword_1ED6D3848;
  v50 = v13;
  swift_getOpaqueTypeConformance2();
  v32 = v47;
  v33 = v40;
  sub_1BCAB558C();
  (*(void (**)(char *, uint64_t))(v39 + 8))(v31, v33);
  v34 = v38;
  v36 = v41;
  v35 = v42;
  (*(void (**)(uint64_t, char *, uint64_t))(v38 + 32))(v42, v32, v41);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v34 + 56))(v35, 0, 1, v36);
}

uint64_t sub_1BC9964B8(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1BC9964FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = type metadata accessor for CoreChartTrendDistributionSeries();
  v2 = v0
     + ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80));

  v3 = type metadata accessor for CoreChartTrendViewModel(0);
  v4 = v2 + *(int *)(v3 + 28);
  v5 = sub_1BCAB4BD8();
  v6 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v6(v4, v5);
  v7 = type metadata accessor for CoreChartTrendLineViewModel(0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v8 = v2 + *(int *)(v3 + 32);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v8, 1, v7))
  {
    v6(v8, v5);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  v9 = v2 + *(int *)(v1 + 20);
  v10 = sub_1BCAB4F68();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  return swift_deallocObject();
}

uint64_t sub_1BC996664(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CoreChartTrendDistributionSeries();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1BC9966A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for CoreChartTrendDistributionSeries() - 8) + 80);
  return sub_1BC995FD4(a1, v2 + ((v5 + 16) & ~v5), a2);
}

void sub_1BC9966F4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t OpaqueTypeConformance2;
  unint64_t v5;
  uint64_t v6;
  _QWORD v7[4];

  if (!qword_1EF477CC8)
  {
    sub_1BC9967A0(255);
    v3 = v2;
    sub_1BCAB5790();
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
    v7[0] = v3;
    v7[1] = MEMORY[0x1E0CDF5D0];
    v7[2] = OpaqueTypeConformance2;
    v7[3] = MEMORY[0x1E0CDF598];
    v5 = MEMORY[0x1BCCFBE48](a1, v7, MEMORY[0x1E0C93510], 0);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_1EF477CC8);
  }
}

void sub_1BC9967A0(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  _QWORD v4[2];

  if (!qword_1EF477CD0)
  {
    v4[0] = sub_1BCAB5790();
    v4[1] = MEMORY[0x1E0C93B30];
    v2 = MEMORY[0x1BCCFBE48](a1, v4, MEMORY[0x1E0C93650], 0);
    if (!v3)
      atomic_store(v2, (unint64_t *)&qword_1EF477CD0);
  }
}

unint64_t sub_1BC996814()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EF477CD8;
  if (!qword_1EF477CD8)
  {
    sub_1BC998AB0(255, &qword_1EF477CB8, type metadata accessor for CoreChartTrendDataElement, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
    result = MEMORY[0x1BCCFBE84](MEMORY[0x1E0DEAF48], v1);
    atomic_store(result, (unint64_t *)&qword_1EF477CD8);
  }
  return result;
}

unint64_t sub_1BC996874()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t OpaqueTypeConformance2;
  _QWORD v6[5];

  result = qword_1EF477CE0;
  if (!qword_1EF477CE0)
  {
    sub_1BC998AB0(255, &qword_1EF477CC0, (uint64_t (*)(uint64_t))sub_1BC9966F4, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    v2 = v1;
    sub_1BC9967A0(255);
    v4 = v3;
    sub_1BCAB5790();
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
    v6[1] = v4;
    v6[2] = MEMORY[0x1E0CDF5D0];
    v6[3] = OpaqueTypeConformance2;
    v6[4] = MEMORY[0x1E0CDF598];
    v6[0] = swift_getOpaqueTypeConformance2();
    result = MEMORY[0x1BCCFBE84](MEMORY[0x1E0C93E00], v2, v6);
    atomic_store(result, (unint64_t *)&qword_1EF477CE0);
  }
  return result;
}

uint64_t sub_1BC996948(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = MEMORY[0x1BCCFBE84](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for CoreChartTrendDistributionSeries(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v4;
  int v5;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  id v14;
  int *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  unsigned int (*v28)(char *, uint64_t, int *);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  void (*v39)(char *, _QWORD, uint64_t, int *);
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(char *, uint64_t, uint64_t);
  void (*v46)(char *, char *, uint64_t);
  uint64_t v47;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v30 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v30 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    v7 = (void *)a2[1];
    *(_QWORD *)(a1 + 8) = v7;
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
    v8 = type metadata accessor for CoreChartTrendViewModel(0);
    v9 = *(int *)(v8 + 28);
    v10 = (char *)v4 + v9;
    v11 = (char *)a2 + v9;
    v12 = sub_1BCAB4BD8();
    v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
    v14 = v7;
    v46 = v13;
    v13(v10, v11, v12);
    v15 = (int *)type metadata accessor for CoreChartTrendLineViewModel(0);
    *(_QWORD *)&v10[v15[5]] = *(_QWORD *)&v11[v15[5]];
    v16 = v15[6];
    v17 = &v10[v16];
    v18 = &v11[v16];
    v19 = *((_QWORD *)v18 + 1);
    *(_QWORD *)v17 = *(_QWORD *)v18;
    *((_QWORD *)v17 + 1) = v19;
    v20 = v15[7];
    v21 = &v10[v20];
    v22 = &v11[v20];
    v23 = *((_QWORD *)v22 + 1);
    *(_QWORD *)v21 = *(_QWORD *)v22;
    *((_QWORD *)v21 + 1) = v23;
    v47 = v8;
    v24 = *(int *)(v8 + 32);
    v25 = (char *)v4 + v24;
    v26 = (char *)a2 + v24;
    v27 = *((_QWORD *)v15 - 1);
    v28 = *(unsigned int (**)(char *, uint64_t, int *))(v27 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v28(v26, 1, v15))
    {
      sub_1BC998AB0(0, &qword_1ED6C6130, type metadata accessor for CoreChartTrendLineViewModel, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    }
    else
    {
      v46(v25, v26, v12);
      *(_QWORD *)&v25[v15[5]] = *(_QWORD *)&v26[v15[5]];
      v31 = v15[6];
      v32 = &v25[v31];
      v33 = &v26[v31];
      v34 = *((_QWORD *)v33 + 1);
      *(_QWORD *)v32 = *(_QWORD *)v33;
      *((_QWORD *)v32 + 1) = v34;
      v35 = v15[7];
      v36 = &v25[v35];
      v37 = &v26[v35];
      v38 = *((_QWORD *)v37 + 1);
      *(_QWORD *)v36 = *(_QWORD *)v37;
      *((_QWORD *)v36 + 1) = v38;
      v39 = *(void (**)(char *, _QWORD, uint64_t, int *))(v27 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v39(v25, 0, 1, v15);
    }
    *(_QWORD *)((char *)v4 + *(int *)(v47 + 36)) = *(uint64_t *)((char *)a2 + *(int *)(v47 + 36));
    v40 = *(int *)(a3 + 20);
    v41 = (char *)v4 + v40;
    v42 = (uint64_t)a2 + v40;
    v43 = sub_1BCAB4F68();
    v44 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 16);
    swift_bridgeObjectRetain();
    v44(v41, v42, v43);
  }
  return v4;
}

uint64_t destroy for CoreChartTrendDistributionSeries(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = type metadata accessor for CoreChartTrendViewModel(0);
  v5 = a1 + *(int *)(v4 + 28);
  v6 = sub_1BCAB4BD8();
  v7 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8);
  v7(v5, v6);
  v8 = type metadata accessor for CoreChartTrendLineViewModel(0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v9 = a1 + *(int *)(v4 + 32);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v9, 1, v8))
  {
    v7(v9, v6);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  v10 = a1 + *(int *)(a2 + 20);
  v11 = sub_1BCAB4F68();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
}

uint64_t initializeWithCopy for CoreChartTrendDistributionSeries(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  id v12;
  int *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  unsigned int (*v26)(char *, uint64_t, int *);
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  void (*v36)(char *, _QWORD, uint64_t, int *);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(uint64_t, uint64_t, uint64_t);
  uint64_t v43;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v5 = *(void **)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v6 = type metadata accessor for CoreChartTrendViewModel(0);
  v7 = *(int *)(v6 + 28);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_1BCAB4BD8();
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  v12 = v5;
  v11(v8, v9, v10);
  v13 = (int *)type metadata accessor for CoreChartTrendLineViewModel(0);
  *(_QWORD *)(v8 + v13[5]) = *(_QWORD *)(v9 + v13[5]);
  v14 = v13[6];
  v15 = (_QWORD *)(v8 + v14);
  v16 = (_QWORD *)(v9 + v14);
  v17 = v16[1];
  *v15 = *v16;
  v15[1] = v17;
  v18 = v13[7];
  v19 = (_QWORD *)(v8 + v18);
  v20 = (_QWORD *)(v9 + v18);
  v21 = v20[1];
  *v19 = *v20;
  v19[1] = v21;
  v43 = v6;
  v22 = *(int *)(v6 + 32);
  v23 = (char *)(a1 + v22);
  v24 = (char *)(a2 + v22);
  v25 = *((_QWORD *)v13 - 1);
  v26 = *(unsigned int (**)(char *, uint64_t, int *))(v25 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v26(v24, 1, v13))
  {
    sub_1BC998AB0(0, &qword_1ED6C6130, type metadata accessor for CoreChartTrendLineViewModel, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
  }
  else
  {
    v11((uint64_t)v23, (uint64_t)v24, v10);
    *(_QWORD *)&v23[v13[5]] = *(_QWORD *)&v24[v13[5]];
    v28 = v13[6];
    v29 = &v23[v28];
    v30 = &v24[v28];
    v31 = *((_QWORD *)v30 + 1);
    *(_QWORD *)v29 = *(_QWORD *)v30;
    *((_QWORD *)v29 + 1) = v31;
    v32 = v13[7];
    v33 = &v23[v32];
    v34 = &v24[v32];
    v35 = *((_QWORD *)v34 + 1);
    *(_QWORD *)v33 = *(_QWORD *)v34;
    *((_QWORD *)v33 + 1) = v35;
    v36 = *(void (**)(char *, _QWORD, uint64_t, int *))(v25 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v36(v23, 0, 1, v13);
  }
  *(_QWORD *)(a1 + *(int *)(v43 + 36)) = *(_QWORD *)(a2 + *(int *)(v43 + 36));
  v37 = *(int *)(a3 + 20);
  v38 = a1 + v37;
  v39 = a2 + v37;
  v40 = sub_1BCAB4F68();
  v41 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 16);
  swift_bridgeObjectRetain();
  v41(v38, v39, v40);
  return a1;
}

uint64_t assignWithCopy for CoreChartTrendDistributionSeries(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  int *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t (*v25)(uint64_t, uint64_t, int *);
  int v26;
  int v27;
  uint64_t (*v28)(uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  void (*v36)(char *, _QWORD, uint64_t, int *);
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v48;
  uint64_t v49;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v5 = *(void **)(a2 + 8);
  v6 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v5;
  v7 = v5;

  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v8 = type metadata accessor for CoreChartTrendViewModel(0);
  v9 = *(int *)(v8 + 28);
  v10 = a1 + v9;
  v11 = a2 + v9;
  v12 = sub_1BCAB4BD8();
  v48 = *(_QWORD *)(v12 - 8);
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v48 + 24);
  v13(v10, v11, v12);
  v14 = (int *)type metadata accessor for CoreChartTrendLineViewModel(0);
  *(_QWORD *)(v10 + v14[5]) = *(_QWORD *)(v11 + v14[5]);
  v15 = v14[6];
  v16 = (_QWORD *)(v10 + v15);
  v17 = (_QWORD *)(v11 + v15);
  *v16 = *v17;
  v16[1] = v17[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v18 = v14[7];
  v19 = (_QWORD *)(v10 + v18);
  v20 = (_QWORD *)(v11 + v18);
  *v19 = *v20;
  v19[1] = v20[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v49 = v8;
  v21 = *(int *)(v8 + 32);
  v22 = (char *)(a1 + v21);
  v23 = (char *)(a2 + v21);
  v24 = *((_QWORD *)v14 - 1);
  v25 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v24 + 48);
  v26 = v25(a1 + v21, 1, v14);
  v27 = v25((uint64_t)v23, 1, v14);
  if (v26)
  {
    if (!v27)
    {
      (*(void (**)(char *, char *, uint64_t))(v48 + 16))(v22, v23, v12);
      *(_QWORD *)&v22[v14[5]] = *(_QWORD *)&v23[v14[5]];
      v30 = v14[6];
      v31 = &v22[v30];
      v32 = &v23[v30];
      *(_QWORD *)v31 = *(_QWORD *)v32;
      *((_QWORD *)v31 + 1) = *((_QWORD *)v32 + 1);
      v33 = v14[7];
      v34 = &v22[v33];
      v35 = &v23[v33];
      *(_QWORD *)v34 = *(_QWORD *)v35;
      *((_QWORD *)v34 + 1) = *((_QWORD *)v35 + 1);
      v36 = *(void (**)(char *, _QWORD, uint64_t, int *))(v24 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v36(v22, 0, 1, v14);
      goto LABEL_9;
    }
    v28 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
  }
  else
  {
    if (!v27)
    {
      v13((uint64_t)v22, (uint64_t)v23, v12);
      *(_QWORD *)&v22[v14[5]] = *(_QWORD *)&v23[v14[5]];
      v37 = v14[6];
      v38 = &v22[v37];
      v39 = &v23[v37];
      *(_QWORD *)v38 = *(_QWORD *)v39;
      *((_QWORD *)v38 + 1) = *((_QWORD *)v39 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v40 = v14[7];
      v41 = &v22[v40];
      v42 = &v23[v40];
      *(_QWORD *)v41 = *(_QWORD *)v42;
      *((_QWORD *)v41 + 1) = *((_QWORD *)v42 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_9;
    }
    sub_1BC997208((uint64_t)v22, type metadata accessor for CoreChartTrendLineViewModel);
    v28 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
  }
  sub_1BC998AB0(0, &qword_1ED6C6130, type metadata accessor for CoreChartTrendLineViewModel, v28);
  memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
LABEL_9:
  *(_QWORD *)(a1 + *(int *)(v49 + 36)) = *(_QWORD *)(a2 + *(int *)(v49 + 36));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v43 = *(int *)(a3 + 20);
  v44 = a1 + v43;
  v45 = a2 + v43;
  v46 = sub_1BCAB4F68();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 24))(v44, v45, v46);
  return a1;
}

uint64_t sub_1BC997208(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v3;

  v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t initializeWithTake for CoreChartTrendDistributionSeries(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  int *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v6 = (int *)type metadata accessor for CoreChartTrendViewModel(0);
  v7 = v6[7];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_1BCAB4BD8();
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32);
  v11(v8, v9, v10);
  v12 = (int *)type metadata accessor for CoreChartTrendLineViewModel(0);
  *(_QWORD *)(v8 + v12[5]) = *(_QWORD *)(v9 + v12[5]);
  *(_OWORD *)(v8 + v12[6]) = *(_OWORD *)(v9 + v12[6]);
  *(_OWORD *)(v8 + v12[7]) = *(_OWORD *)(v9 + v12[7]);
  v13 = v6[8];
  v14 = (char *)(a1 + v13);
  v15 = (char *)(a2 + v13);
  v16 = *((_QWORD *)v12 - 1);
  if ((*(unsigned int (**)(uint64_t, uint64_t, int *))(v16 + 48))(a2 + v13, 1, v12))
  {
    sub_1BC998AB0(0, &qword_1ED6C6130, type metadata accessor for CoreChartTrendLineViewModel, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    v11((uint64_t)v14, (uint64_t)v15, v10);
    *(_QWORD *)&v14[v12[5]] = *(_QWORD *)&v15[v12[5]];
    *(_OWORD *)&v14[v12[6]] = *(_OWORD *)&v15[v12[6]];
    *(_OWORD *)&v14[v12[7]] = *(_OWORD *)&v15[v12[7]];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v16 + 56))(v14, 0, 1, v12);
  }
  *(_QWORD *)(a1 + v6[9]) = *(_QWORD *)(a2 + v6[9]);
  v18 = *(int *)(a3 + 20);
  v19 = a1 + v18;
  v20 = a2 + v18;
  v21 = sub_1BCAB4F68();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(v19, v20, v21);
  return a1;
}

uint64_t assignWithTake for CoreChartTrendDistributionSeries(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  int *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t (*v27)(uint64_t, uint64_t, int *);
  int v28;
  int v29;
  uint64_t (*v30)(uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v47;
  uint64_t v48;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v5 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);

  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v6 = type metadata accessor for CoreChartTrendViewModel(0);
  v7 = *(int *)(v6 + 28);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_1BCAB4BD8();
  v47 = *(_QWORD *)(v10 - 8);
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v47 + 40);
  v11(v8, v9, v10);
  v12 = (int *)type metadata accessor for CoreChartTrendLineViewModel(0);
  *(_QWORD *)(v8 + v12[5]) = *(_QWORD *)(v9 + v12[5]);
  v13 = v12[6];
  v14 = (_QWORD *)(v8 + v13);
  v15 = (uint64_t *)(v9 + v13);
  v17 = *v15;
  v16 = v15[1];
  *v14 = v17;
  v14[1] = v16;
  swift_bridgeObjectRelease();
  v18 = v12[7];
  v19 = (_QWORD *)(v8 + v18);
  v20 = (uint64_t *)(v9 + v18);
  v22 = *v20;
  v21 = v20[1];
  *v19 = v22;
  v19[1] = v21;
  swift_bridgeObjectRelease();
  v48 = v6;
  v23 = *(int *)(v6 + 32);
  v24 = (char *)(a1 + v23);
  v25 = (char *)(a2 + v23);
  v26 = *((_QWORD *)v12 - 1);
  v27 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v26 + 48);
  v28 = v27(a1 + v23, 1, v12);
  v29 = v27((uint64_t)v25, 1, v12);
  if (v28)
  {
    if (!v29)
    {
      (*(void (**)(char *, char *, uint64_t))(v47 + 32))(v24, v25, v10);
      *(_QWORD *)&v24[v12[5]] = *(_QWORD *)&v25[v12[5]];
      *(_OWORD *)&v24[v12[6]] = *(_OWORD *)&v25[v12[6]];
      *(_OWORD *)&v24[v12[7]] = *(_OWORD *)&v25[v12[7]];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v26 + 56))(v24, 0, 1, v12);
      goto LABEL_9;
    }
    v30 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
  }
  else
  {
    if (!v29)
    {
      v11((uint64_t)v24, (uint64_t)v25, v10);
      *(_QWORD *)&v24[v12[5]] = *(_QWORD *)&v25[v12[5]];
      v32 = v12[6];
      v33 = &v24[v32];
      v34 = &v25[v32];
      v36 = *(_QWORD *)v34;
      v35 = *((_QWORD *)v34 + 1);
      *(_QWORD *)v33 = v36;
      *((_QWORD *)v33 + 1) = v35;
      swift_bridgeObjectRelease();
      v37 = v12[7];
      v38 = &v24[v37];
      v39 = &v25[v37];
      v41 = *(_QWORD *)v39;
      v40 = *((_QWORD *)v39 + 1);
      *(_QWORD *)v38 = v41;
      *((_QWORD *)v38 + 1) = v40;
      swift_bridgeObjectRelease();
      goto LABEL_9;
    }
    sub_1BC997208((uint64_t)v24, type metadata accessor for CoreChartTrendLineViewModel);
    v30 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
  }
  sub_1BC998AB0(0, &qword_1ED6C6130, type metadata accessor for CoreChartTrendLineViewModel, v30);
  memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
LABEL_9:
  *(_QWORD *)(a1 + *(int *)(v48 + 36)) = *(_QWORD *)(a2 + *(int *)(v48 + 36));
  swift_bridgeObjectRelease();
  v42 = *(int *)(a3 + 20);
  v43 = a1 + v42;
  v44 = a2 + v42;
  v45 = sub_1BCAB4F68();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 40))(v43, v44, v45);
  return a1;
}

uint64_t getEnumTagSinglePayload for CoreChartTrendDistributionSeries()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BC9976A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  v6 = type metadata accessor for CoreChartTrendViewModel(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v8 = sub_1BCAB4F68();
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for CoreChartTrendDistributionSeries()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BC997724(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v8 = type metadata accessor for CoreChartTrendViewModel(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v10 = sub_1BCAB4F68();
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t sub_1BC9977A0()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = type metadata accessor for CoreChartTrendViewModel(319);
  if (v1 <= 0x3F)
  {
    result = sub_1BCAB4F68();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

unint64_t sub_1BC997828()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  result = qword_1EF477D18;
  if (!qword_1EF477D18)
  {
    sub_1BC997888();
    v2 = v1;
    v3 = sub_1BC996874();
    result = MEMORY[0x1BCCFBE84](MEMORY[0x1E0C93DA0], v2, &v3);
    atomic_store(result, (unint64_t *)&qword_1EF477D18);
  }
  return result;
}

void sub_1BC997888()
{
  uint64_t (*v0)(uint64_t);
  unint64_t v1;
  uint64_t v2;

  if (!qword_1EF477D20)
  {
    sub_1BC998AB0(255, &qword_1EF477CB8, type metadata accessor for CoreChartTrendDataElement, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
    sub_1BCAB4E54();
    v0 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870];
    sub_1BC998AB0(255, &qword_1EF477CC0, (uint64_t (*)(uint64_t))sub_1BC9966F4, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    sub_1BC996814();
    sub_1BC996948(&qword_1EF477D28, v0, MEMORY[0x1E0CB08A8]);
    v1 = sub_1BCAB5DD8();
    if (!v2)
      atomic_store(v1, (unint64_t *)&qword_1EF477D20);
  }
}

void type metadata accessor for HKCodableSummaryTrendTileViewModel_TrendDiagramStyle(uint64_t a1)
{
  sub_1BC998C08(a1, &qword_1EF477D90);
}

void type metadata accessor for HKFeatureAvailabilityContext(uint64_t a1)
{
  sub_1BC998C08(a1, &qword_1EF477D98);
}

void type metadata accessor for HKTimeScope(uint64_t a1)
{
  sub_1BC998C08(a1, &qword_1EF477DA0);
}

void type metadata accessor for UIContentSizeCategory(uint64_t a1)
{
  sub_1BC998C08(a1, &qword_1EF477DA8);
}

void type metadata accessor for UILayoutPriority(uint64_t a1)
{
  sub_1BC998C08(a1, &qword_1ED6C5B00);
}

void type metadata accessor for HKAxisLabelType(uint64_t a1)
{
  sub_1BC998C08(a1, &qword_1EF477DB0);
}

uint64_t sub_1BC9979EC(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 48))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_1BC997A0C(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 48) = v3;
  return result;
}

void type metadata accessor for CGAffineTransform(uint64_t a1)
{
  sub_1BC998C08(a1, &qword_1EF477DB8);
}

void type metadata accessor for QualityOfService(uint64_t a1)
{
  sub_1BC998C08(a1, &qword_1EF477DC0);
}

void type metadata accessor for _HKQuantityDistributionStyle(uint64_t a1)
{
  sub_1BC998C08(a1, &qword_1EF477DC8);
}

void type metadata accessor for HKQuantityTypeIdentifier(uint64_t a1)
{
  sub_1BC998C08(a1, &qword_1EF477DD0);
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
  sub_1BC998C08(a1, &qword_1ED6C4D78);
}

void type metadata accessor for HKFeatureIdentifier(uint64_t a1)
{
  sub_1BC998C08(a1, &qword_1EF477DD8);
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

void type metadata accessor for CGPoint(uint64_t a1)
{
  sub_1BC998C08(a1, &qword_1ED6C74E0);
}

void type metadata accessor for CGContext(uint64_t a1)
{
  sub_1BC998C08(a1, &qword_1EF477DE0);
}

uint64_t getEnumTagSinglePayload for LevelView.LayoutConfiguration(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for LevelView.LayoutConfiguration(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 16) = v3;
  return result;
}

void type metadata accessor for CGSize(uint64_t a1)
{
  sub_1BC998C08(a1, &qword_1ED6C35F8);
}

uint64_t initializeBufferWithCopyOfBuffer for DiagramConfiguration.Distribution(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain();
  return v3;
}

__n128 __swift_memcpy32_8(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for ParameterOverrides(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for ParameterOverrides(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 32) = v3;
  return result;
}

void type metadata accessor for UIEdgeInsets(uint64_t a1)
{
  sub_1BC998C08(a1, &qword_1ED6C5AE8);
}

void type metadata accessor for HKElectrocardiogramAlgorithmVersion(uint64_t a1)
{
  sub_1BC998C08(a1, &qword_1ED6C4660);
}

void type metadata accessor for CGRect(uint64_t a1)
{
  sub_1BC998C08(a1, &qword_1ED6C74D0);
}

void type metadata accessor for Key(uint64_t a1)
{
  sub_1BC998C08(a1, &qword_1ED6C6900);
}

void type metadata accessor for HKSleepDaySummaryQueryOptions(uint64_t a1)
{
  sub_1BC998C08(a1, &qword_1ED6C4D90);
}

uint64_t sub_1BC997C38@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    v4 = 0;
    v5 = (uint64_t *)(a1 + 32);
    do
    {
      v7 = *v5++;
      v6 = v7;
      if ((v7 & ~v4) == 0)
        v6 = 0;
      v4 |= v6;
      --v3;
    }
    while (v3);
  }
  else
  {
    v4 = 0;
  }
  result = swift_bridgeObjectRelease();
  *a2 = v4;
  return result;
}

uint64_t sub_1BC997C8C(uint64_t a1, uint64_t a2)
{
  return sub_1BC99862C(a1, a2, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1940]);
}

_QWORD *sub_1BC997CB0@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

void sub_1BC997CC0(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

uint64_t sub_1BC997CCC()
{
  return sub_1BCAB6090();
}

uint64_t sub_1BC997CD4(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  char v4;
  int v5;
  int v6;
  char v7;

  v6 = 0;
  v7 = 1;
  result = MEMORY[0x1BCCFAC90](a1, &v6);
  v4 = v7;
  v5 = v6;
  if (v7)
    v5 = 0;
  *(_DWORD *)a2 = v5;
  *(_BYTE *)(a2 + 4) = v4;
  return result;
}

uint64_t sub_1BC997D24(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;
  int v5;
  int v7;
  char v8;

  v7 = 0;
  v8 = 1;
  v3 = MEMORY[0x1BCCFAC9C](a1, &v7);
  v4 = v8;
  v5 = v7;
  if (v8)
    v5 = 0;
  *(_DWORD *)a2 = v5;
  *(_BYTE *)(a2 + 4) = v4;
  return v3 & 1;
}

void sub_1BC997D78(float *a1@<X8>)
{
  *a1 = MEMORY[0x1BCCFACA8]();
}

float sub_1BC997D9C@<S0>(_DWORD *a1@<X8>)
{
  float *v1;
  float result;

  result = *v1;
  *a1 = *(_DWORD *)v1;
  return result;
}

uint64_t sub_1BC997DA8(uint64_t a1, id *a2)
{
  uint64_t result;

  result = sub_1BCAB5EEC();
  *a2 = 0;
  return result;
}

uint64_t sub_1BC997E1C(uint64_t a1, id *a2)
{
  char v3;

  v3 = sub_1BCAB5EF8();
  *a2 = 0;
  return v3 & 1;
}

uint64_t sub_1BC997E98@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  sub_1BCAB5F04();
  v2 = sub_1BCAB5EE0();
  result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

void sub_1BC997ED8(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

_QWORD *sub_1BC997EE0@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 | *result;
  return result;
}

_QWORD *sub_1BC997EF4@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 ^ *result;
  return result;
}

_QWORD *sub_1BC997F08@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;

  v3 = *v2 & *result;
  if (v3)
    *v2 &= ~*result;
  *(_QWORD *)a2 = v3;
  *(_BYTE *)(a2 + 8) = v3 == 0;
  return result;
}

uint64_t *sub_1BC997F34@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *result;
  v4 = *v2;
  *v2 |= *result;
  v5 = v4 & v3;
  *(_QWORD *)a2 = v5;
  *(_BYTE *)(a2 + 8) = v5 == 0;
  return result;
}

_QWORD *sub_1BC997F58(_QWORD *result)
{
  _QWORD *v1;

  *v1 ^= *result;
  return result;
}

_QWORD *sub_1BC997F6C@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 & ~*result;
  return result;
}

BOOL sub_1BC997F80(_QWORD *a1)
{
  _QWORD *v1;

  return (*v1 & ~*a1) == 0;
}

BOOL sub_1BC997F94(_QWORD *a1)
{
  _QWORD *v1;

  return (*v1 & *a1) == 0;
}

BOOL sub_1BC997FA8(_QWORD *a1)
{
  _QWORD *v1;

  return (*a1 & ~*v1) == 0;
}

BOOL sub_1BC997FBC()
{
  _QWORD *v0;

  return *v0 == 0;
}

uint64_t sub_1BC997FCC()
{
  return sub_1BCAB63D8();
}

_QWORD *sub_1BC997FE4(_QWORD *result)
{
  _QWORD *v1;

  *v1 &= ~*result;
  return result;
}

_DWORD *sub_1BC997FF8@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = *result;
  *(_BYTE *)(a2 + 4) = 0;
  return result;
}

void sub_1BC998008(_DWORD *a1@<X8>)
{
  _DWORD *v1;

  *a1 = *v1;
}

_QWORD *sub_1BC998014@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 & *result;
  return result;
}

BOOL sub_1BC998028(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = *v2 & *a2;
  if (v4 != *a2)
    *v2 |= v3;
  *a1 = v3;
  return v4 != v3;
}

_QWORD *sub_1BC998058(_QWORD *result)
{
  _QWORD *v1;

  *v1 |= *result;
  return result;
}

_QWORD *sub_1BC99806C(_QWORD *result)
{
  _QWORD *v1;

  *v1 &= *result;
  return result;
}

BOOL sub_1BC998084(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

uint64_t sub_1BC998098@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = sub_1BC998A1C(a1);
  result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

uint64_t sub_1BC9980D4()
{
  return sub_1BC996948(&qword_1EF477DE8, (uint64_t (*)(uint64_t))type metadata accessor for HKSleepDaySummaryQueryOptions, (uint64_t)&unk_1BCABD890);
}

uint64_t sub_1BC998100()
{
  return sub_1BC996948(&qword_1EF477DF0, (uint64_t (*)(uint64_t))type metadata accessor for HKSleepDaySummaryQueryOptions, (uint64_t)&unk_1BCABD860);
}

uint64_t sub_1BC99812C()
{
  return sub_1BC996948(&qword_1EF477DF8, (uint64_t (*)(uint64_t))type metadata accessor for HKSleepDaySummaryQueryOptions, (uint64_t)&unk_1BCABD8B8);
}

uint64_t sub_1BC998158()
{
  return sub_1BC996948(&qword_1EF477E00, (uint64_t (*)(uint64_t))type metadata accessor for HKSleepDaySummaryQueryOptions, (uint64_t)&unk_1BCABD8F0);
}

_QWORD *sub_1BC998184@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t sub_1BC998190()
{
  sub_1BC996948((unint64_t *)&qword_1ED6C68F0, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_1BCABE26C);
  sub_1BC996948(&qword_1EF477EE0, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_1BCABDA64);
  return sub_1BCAB663C();
}

uint64_t sub_1BC998214()
{
  return sub_1BC996948(&qword_1EF477E08, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_1BCABDA28);
}

uint64_t sub_1BC998240()
{
  return sub_1BC996948(&qword_1EF477E10, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_1BCABD9FC);
}

uint64_t sub_1BC99826C()
{
  sub_1BC996948(&qword_1EF477EC0, (uint64_t (*)(uint64_t))type metadata accessor for HKQuantityTypeIdentifier, (uint64_t)&unk_1BCABDD24);
  sub_1BC996948(&qword_1EF477EC8, (uint64_t (*)(uint64_t))type metadata accessor for HKQuantityTypeIdentifier, (uint64_t)&unk_1BCABDCC4);
  return sub_1BCAB663C();
}

uint64_t sub_1BC9982F0()
{
  sub_1BC996948(&qword_1EF477EA0, (uint64_t (*)(uint64_t))type metadata accessor for UIContentSizeCategory, (uint64_t)&unk_1BCABE060);
  sub_1BC996948(&qword_1EF477EA8, (uint64_t (*)(uint64_t))type metadata accessor for UIContentSizeCategory, (uint64_t)&unk_1BCABE000);
  return sub_1BCAB663C();
}

uint64_t sub_1BC998374()
{
  sub_1BC996948(&qword_1EF477EB0, (uint64_t (*)(uint64_t))type metadata accessor for UILayoutPriority, (uint64_t)&unk_1BCABDF08);
  sub_1BC996948(&qword_1EF477EB8, (uint64_t (*)(uint64_t))type metadata accessor for UILayoutPriority, (uint64_t)&unk_1BCABDEA8);
  return sub_1BCAB663C();
}

uint64_t sub_1BC998408@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = sub_1BCAB5F04();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1BC998430()
{
  sub_1BC996948(&qword_1EF477ED0, (uint64_t (*)(uint64_t))type metadata accessor for HKFeatureIdentifier, (uint64_t)&unk_1BCABDBC8);
  sub_1BC996948(&qword_1EF477ED8, (uint64_t (*)(uint64_t))type metadata accessor for HKFeatureIdentifier, (uint64_t)&unk_1BCABDB70);
  return sub_1BCAB663C();
}

uint64_t sub_1BC9984B4()
{
  return sub_1BC996948(&qword_1EF477E18, (uint64_t (*)(uint64_t))type metadata accessor for HKFeatureIdentifier, (uint64_t)&unk_1BCABDB38);
}

uint64_t sub_1BC9984E0()
{
  return sub_1BC996948(&qword_1EF477E20, (uint64_t (*)(uint64_t))type metadata accessor for HKFeatureIdentifier, (uint64_t)&unk_1BCABDB10);
}

uint64_t sub_1BC99850C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_1BCAB5EE0();
  result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_1BC998550()
{
  sub_1BC996948(&qword_1EF477E90, (uint64_t (*)(uint64_t))type metadata accessor for HKFeatureAvailabilityContext, (uint64_t)&unk_1BCABE1A8);
  sub_1BC996948(&qword_1EF477E98, (uint64_t (*)(uint64_t))type metadata accessor for HKFeatureAvailabilityContext, (uint64_t)&unk_1BCABE150);
  return sub_1BCAB663C();
}

uint64_t sub_1BC9985D4()
{
  return sub_1BCAB60C0();
}

uint64_t sub_1BC9985DC()
{
  return sub_1BCAB6888();
}

void sub_1BC99860C()
{
  JUMPOUT(0x1BCCFB44CLL);
}

uint64_t sub_1BC998620(uint64_t a1, uint64_t a2)
{
  return sub_1BC99862C(a1, a2, MEMORY[0x1E0DEA950]);
}

uint64_t sub_1BC99862C(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;

  v4 = sub_1BCAB5F04();
  v5 = a3(v4);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_1BC998668()
{
  sub_1BCAB5F04();
  sub_1BCAB5F40();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1BC9986A8()
{
  uint64_t v0;

  sub_1BCAB5F04();
  sub_1BCAB6870();
  sub_1BCAB5F40();
  v0 = sub_1BCAB6894();
  swift_bridgeObjectRelease();
  return v0;
}

BOOL sub_1BC998718(float *a1, float *a2)
{
  return *a1 == *a2;
}

uint64_t sub_1BC99872C()
{
  return sub_1BC996948(&qword_1EF477E28, (uint64_t (*)(uint64_t))type metadata accessor for HKFeatureIdentifier, (uint64_t)&unk_1BCABDBA0);
}

uint64_t sub_1BC998758()
{
  return sub_1BC996948(&qword_1EF477E30, (uint64_t (*)(uint64_t))type metadata accessor for HKQuantityTypeIdentifier, (uint64_t)&unk_1BCABDC88);
}

uint64_t sub_1BC998784()
{
  return sub_1BC996948(&qword_1EF477E38, (uint64_t (*)(uint64_t))type metadata accessor for HKQuantityTypeIdentifier, (uint64_t)&unk_1BCABDC5C);
}

uint64_t sub_1BC9987B0()
{
  return sub_1BC996948(&qword_1EF477E40, (uint64_t (*)(uint64_t))type metadata accessor for HKQuantityTypeIdentifier, (uint64_t)&unk_1BCABDCF8);
}

uint64_t sub_1BC9987DC()
{
  return sub_1BC996948(&qword_1EF477E48, (uint64_t (*)(uint64_t))type metadata accessor for UILayoutPriority, (uint64_t)&unk_1BCABDE6C);
}

uint64_t sub_1BC998808()
{
  return sub_1BC996948(&qword_1EF477E50, (uint64_t (*)(uint64_t))type metadata accessor for UILayoutPriority, (uint64_t)&unk_1BCABDE40);
}

uint64_t sub_1BC998834()
{
  return sub_1BC996948(&qword_1EF477E58, (uint64_t (*)(uint64_t))type metadata accessor for UILayoutPriority, (uint64_t)&unk_1BCABDEDC);
}

uint64_t sub_1BC998860()
{
  return sub_1BC996948(&qword_1EF477E60, (uint64_t (*)(uint64_t))type metadata accessor for UIContentSizeCategory, (uint64_t)&unk_1BCABDFC4);
}

uint64_t sub_1BC99888C()
{
  return sub_1BC996948(&qword_1EF477E68, (uint64_t (*)(uint64_t))type metadata accessor for UIContentSizeCategory, (uint64_t)&unk_1BCABDF98);
}

uint64_t sub_1BC9988B8()
{
  return sub_1BC996948(&qword_1EF477E70, (uint64_t (*)(uint64_t))type metadata accessor for UIContentSizeCategory, (uint64_t)&unk_1BCABE034);
}

uint64_t sub_1BC9988E4()
{
  return sub_1BC996948(&qword_1EF477E78, (uint64_t (*)(uint64_t))type metadata accessor for HKFeatureAvailabilityContext, (uint64_t)&unk_1BCABE118);
}

uint64_t sub_1BC998910()
{
  return sub_1BC996948(&qword_1EF477E80, (uint64_t (*)(uint64_t))type metadata accessor for HKFeatureAvailabilityContext, (uint64_t)&unk_1BCABE0F0);
}

uint64_t sub_1BC99893C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;

  v0 = sub_1BCAB5F04();
  v2 = v1;
  if (v0 == sub_1BCAB5F04() && v2 == v3)
    v5 = 1;
  else
    v5 = sub_1BCAB67C8();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

uint64_t sub_1BC9989C4()
{
  return sub_1BC996948(&qword_1EF477E88, (uint64_t (*)(uint64_t))type metadata accessor for HKFeatureAvailabilityContext, (uint64_t)&unk_1BCABE180);
}

uint64_t sub_1BC9989F0()
{
  return sub_1BC996948(&qword_1ED6C68F8, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_1BCABDA98);
}

uint64_t sub_1BC998A1C(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return 0;
  result = 0;
  v4 = (uint64_t *)(a1 + 32);
  do
  {
    v6 = *v4++;
    v5 = v6;
    if ((v6 & ~result) == 0)
      v5 = 0;
    result |= v5;
    --v1;
  }
  while (v1);
  return result;
}

void sub_1BC998A54()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EF477EE8)
  {
    v0 = sub_1BCAB5640();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EF477EE8);
  }
}

void sub_1BC998AB0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  if (!*a2)
  {
    v7 = a3(255);
    v8 = a4(a1, v7);
    if (!v9)
      atomic_store(v8, a2);
  }
}

void sub_1BC998B08()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EF477EF0)
  {
    sub_1BCAB4E54();
    v0 = sub_1BCAB5640();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EF477EF0);
  }
}

uint64_t sub_1BC998B64(uint64_t a1)
{
  uint64_t v2;

  sub_1BC998AB0(0, &qword_1ED6C7288, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB11F0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1BC998BB8(uint64_t a1)
{
  swift_bridgeObjectRelease();
  return a1;
}

void type metadata accessor for HKDisplayTypeIdentifier(uint64_t a1)
{
  sub_1BC998C08(a1, &qword_1EF477EF8);
}

void type metadata accessor for CGColor(uint64_t a1)
{
  sub_1BC998C08(a1, &qword_1EF477F00);
}

void sub_1BC998C08(uint64_t a1, unint64_t *a2)
{
  unint64_t ForeignTypeMetadata;
  uint64_t v4;

  if (!*a2)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4)
      atomic_store(ForeignTypeMetadata, a2);
  }
}

BOOL static SupplementaryLabelConfiguration.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t SupplementaryLabelConfiguration.hash(into:)()
{
  return sub_1BCAB687C();
}

uint64_t SupplementaryLabelConfiguration.hashValue.getter()
{
  sub_1BCAB6870();
  sub_1BCAB687C();
  return sub_1BCAB6894();
}

BOOL sub_1BC998D14(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t sub_1BC998D2C()
{
  sub_1BCAB6870();
  sub_1BCAB687C();
  return sub_1BCAB6894();
}

uint64_t sub_1BC998D70()
{
  return sub_1BCAB687C();
}

uint64_t sub_1BC998D98()
{
  sub_1BCAB6870();
  sub_1BCAB687C();
  return sub_1BCAB6894();
}

unint64_t sub_1BC998DDC()
{
  unint64_t result;

  result = qword_1EF477F08;
  if (!qword_1EF477F08)
  {
    result = MEMORY[0x1BCCFBE84](&protocol conformance descriptor for SupplementaryLabelConfiguration, &type metadata for SupplementaryLabelConfiguration);
    atomic_store(result, (unint64_t *)&qword_1EF477F08);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for SupplementaryLabelConfiguration(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = v6 - 2;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for SupplementaryLabelConfiguration(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1BC998EFC + 4 * byte_1BCABE2F5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1BC998F30 + 4 * asc_1BCABE2F0[v4]))();
}

uint64_t sub_1BC998F30(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BC998F38(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BC998F40);
  return result;
}

uint64_t sub_1BC998F4C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BC998F54);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1BC998F58(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BC998F60(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BC998F6C(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_1BC998F78(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for SupplementaryLabelConfiguration()
{
  return &type metadata for SupplementaryLabelConfiguration;
}

uint64_t SleepQueryConfiguration.dateRange.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t SleepQueryConfiguration.queryOptions.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

HealthVisualization::SleepQueryConfiguration __swiftcall SleepQueryConfiguration.init(dateRange:queryOptions:)(HealthVisualization::DateRange dateRange, __C::HKSleepDaySummaryQueryOptions queryOptions)
{
  uint64_t v2;
  HealthVisualization::SleepQueryConfiguration result;

  *(_BYTE *)v2 = dateRange;
  *(__C::HKSleepDaySummaryQueryOptions *)(v2 + 8) = queryOptions;
  result.queryOptions = queryOptions;
  result.dateRange = dateRange;
  return result;
}

void static SleepQueryConfiguration.== infix(_:_:)(uint64_t a1)
{
  __asm { BR              X11 }
}

uint64_t sub_1BC999024@<X0>(uint64_t a1@<X8>)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1BC9990C8 + 4 * byte_1BCABE3A6[a1]))(0x656D69546C6C61);
}

BOOL sub_1BC9990C8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  _BOOL8 result;

  if (a1 == 0x656D69546C6C61 && v1 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    v4 = sub_1BCAB67C8();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    result = 0;
    if ((v4 & 1) == 0)
      return result;
  }
  return v2 == v3;
}

void sub_1BC9991D8(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1BC99923C(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1BC9992E4 + 4 * byte_1BCABE3B2[a2]))(0x656D69546C6C61);
}

uint64_t sub_1BC9992E4(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x656D69546C6C61 && v1 == 0xE700000000000000)
    v2 = 1;
  else
    v2 = sub_1BCAB67C8();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

void sub_1BC9993E0(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1BC999444(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1BC9994D4 + 4 * byte_1BCABE3BD[a2]))(0xD000000000000010);
}

uint64_t sub_1BC9994D4(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0xD000000000000010 && v1 == 0x80000001BCACDA50)
    v2 = 1;
  else
    v2 = sub_1BCAB67C8();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

void sub_1BC9995AC(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1BC9995FC(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1BC99966C + 4 * byte_1BCABE3C7[a2]))(0x796144656E6FLL);
}

uint64_t sub_1BC99966C(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x796144656E6FLL && v1 == 0xE600000000000000)
    v2 = 1;
  else
    v2 = sub_1BCAB67C8();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

void sub_1BC999724(char a1)
{
  __asm { BR              X11 }
}

uint64_t sub_1BC999770(uint64_t a1, unsigned __int8 a2, uint64_t a3)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1BC9997F8 + 4 * byte_1BCABE3D1[a2]))(a3 + 6);
}

uint64_t sub_1BC9997F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  char v4;

  if (a1 == a3 + 6 && v3 == 0x80000001BCACDAE0)
    v4 = 1;
  else
    v4 = sub_1BCAB67C8();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v4 & 1;
}

uint64_t sub_1BC9998C0(unsigned __int8 a1, unsigned __int8 a2)
{
  int v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  char v8;

  v2 = a1;
  if (a1)
  {
    if (a1 == 1)
      v3 = 0x6573696372657845;
    else
      v3 = 0x646E617453;
    if (v2 == 1)
      v4 = 0xE800000000000000;
    else
      v4 = 0xE500000000000000;
    v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1)
        v6 = 0x6573696372657845;
      else
        v6 = 0x646E617453;
      if (v5 == 1)
        v7 = 0xE800000000000000;
      else
        v7 = 0xE500000000000000;
      if (v3 != v6)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  else
  {
    v4 = 0xE400000000000000;
    v3 = 1702260557;
    v5 = a2;
    if (a2)
      goto LABEL_9;
  }
  v7 = 0xE400000000000000;
  if (v3 != 1702260557)
  {
LABEL_21:
    v8 = sub_1BCAB67C8();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7)
    goto LABEL_21;
  v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_1BC9999C0(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x6967676F4C746F6ELL;
  else
    v3 = 0x676E6967676F6CLL;
  if (v2)
    v4 = 0xE700000000000000;
  else
    v4 = 0xEA0000000000676ELL;
  if ((a2 & 1) != 0)
    v5 = 0x6967676F4C746F6ELL;
  else
    v5 = 0x676E6967676F6CLL;
  if ((a2 & 1) != 0)
    v6 = 0xEA0000000000676ELL;
  else
    v6 = 0xE700000000000000;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_1BCAB67C8();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

void sub_1BC999A68(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1BC999AB0(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1BC999B18 + 4 * byte_1BCABE3DA[a2]))(0x6953746365666665);
}

uint64_t sub_1BC999B18(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x6953746365666665 && v1 == 0xEA0000000000657ALL)
    v2 = 1;
  else
    v2 = sub_1BCAB67C8();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_1BC999BC4(uint64_t a1, uint64_t a2)
{
  return sub_1BC99A204(a1, a2, DiagramConfiguration.TextAttributes.rawValue.getter);
}

void sub_1BC999BD0(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1BC999C34(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1BC999CE8 + 4 * byte_1BCABE3E4[a2]))(0x656E696C72696168);
}

uint64_t sub_1BC999CE8(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x656E696C72696168 && v1 == 0xED00006874646957)
    v2 = 1;
  else
    v2 = sub_1BCAB67C8();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_1BC999DE8(unsigned __int8 a1, unsigned __int8 a2)
{
  unint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  char v8;

  v2 = 0xEC0000007465736ELL;
  v3 = 0x49746C7561666564;
  v4 = a1;
  if (a1)
  {
    if (a1 == 1)
      v5 = 0x65736E4965646977;
    else
      v5 = 0x7465736E496F6ELL;
    if (v4 == 1)
      v6 = 0xE900000000000074;
    else
      v6 = 0xE700000000000000;
    v7 = a2;
    if (!a2)
      goto LABEL_15;
    goto LABEL_9;
  }
  v5 = 0x49746C7561666564;
  v6 = 0xEC0000007465736ELL;
  v7 = a2;
  if (a2)
  {
LABEL_9:
    if (v7 == 1)
      v3 = 0x65736E4965646977;
    else
      v3 = 0x7465736E496F6ELL;
    if (v7 == 1)
      v2 = 0xE900000000000074;
    else
      v2 = 0xE700000000000000;
  }
LABEL_15:
  if (v5 == v3 && v6 == v2)
    v8 = 1;
  else
    v8 = sub_1BCAB67C8();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

void sub_1BC999F10(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1BC999F6C(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1BC999FD0 + 4 * byte_1BCABE3EE[a2]))(0x6874646957796164);
}

uint64_t sub_1BC999FD0(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x6874646957796164 && v1 == 0xE800000000000000)
    v2 = 1;
  else
    v2 = sub_1BCAB67C8();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_1BC99A07C(uint64_t a1, uint64_t a2)
{
  return sub_1BC99A204(a1, a2, DiagramConfiguration.AxisType.rawValue.getter);
}

void sub_1BC99A088(char a1)
{
  __asm { BR              X12 }
}

uint64_t sub_1BC99A0D8(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1BC99A148 + 4 * byte_1BCABE3F6[a2]))(0xD000000000000010);
}

uint64_t sub_1BC99A148(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0xD000000000000010 && v1 == 0x80000001BCACE430)
    v2 = 1;
  else
    v2 = sub_1BCAB67C8();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_1BC99A1F8(uint64_t a1, uint64_t a2)
{
  return sub_1BC99A204(a1, a2, DiagramConfiguration.Color.rawValue.getter);
}

uint64_t sub_1BC99A204(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v9;

  v4 = a3();
  v6 = v5;
  if (v4 == a3() && v6 == v7)
    v9 = 1;
  else
    v9 = sub_1BCAB67C8();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v9 & 1;
}

uint64_t sub_1BC99A29C(unsigned __int8 a1, unsigned __int8 a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  char v8;

  v2 = 0xD000000000000011;
  v3 = 0x80000001BCACDFA0;
  v4 = a1;
  if (a1)
  {
    if (a1 == 1)
      v5 = 0x6E726F436F72657ALL;
    else
      v5 = 0xD000000000000012;
    if (v4 == 1)
      v6 = 0xEE00657A69537265;
    else
      v6 = 0x80000001BCACDFD0;
    v7 = a2;
    if (!a2)
      goto LABEL_15;
    goto LABEL_9;
  }
  v5 = 0xD000000000000011;
  v6 = 0x80000001BCACDFA0;
  v7 = a2;
  if (a2)
  {
LABEL_9:
    if (v7 == 1)
      v2 = 0x6E726F436F72657ALL;
    else
      v2 = 0xD000000000000012;
    if (v7 == 1)
      v3 = 0xEE00657A69537265;
    else
      v3 = 0x80000001BCACDFD0;
  }
LABEL_15:
  if (v5 == v2 && v6 == v3)
    v8 = 1;
  else
    v8 = sub_1BCAB67C8();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

void sub_1BC99A3B0(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1BC99A40C(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1BC99A478 + 4 * byte_1BCABE3FE[a2]))(0x72614D7468676972);
}

uint64_t sub_1BC99A478(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x72614D7468676972 && v1 == 0xEB000000006E6967)
    v2 = 1;
  else
    v2 = sub_1BCAB67C8();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_1BC99A52C(unsigned __int8 a1, unsigned __int8 a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  char v8;

  v2 = 0xEB00000000676E69;
  v3 = 0x646461506F72657ALL;
  v4 = a1;
  if (a1)
  {
    if (a1 == 1)
      v5 = 0xD00000000000001ALL;
    else
      v5 = 0xD00000000000001CLL;
    if (v4 == 1)
      v6 = 0x80000001BCACDD50;
    else
      v6 = 0x80000001BCACDD70;
    v7 = a2;
    if (!a2)
      goto LABEL_15;
    goto LABEL_9;
  }
  v5 = 0x646461506F72657ALL;
  v6 = 0xEB00000000676E69;
  v7 = a2;
  if (a2)
  {
LABEL_9:
    if (v7 == 1)
      v3 = 0xD00000000000001ALL;
    else
      v3 = 0xD00000000000001CLL;
    if (v7 == 1)
      v2 = 0x80000001BCACDD50;
    else
      v2 = 0x80000001BCACDD70;
  }
LABEL_15:
  if (v5 == v3 && v6 == v2)
    v8 = 1;
  else
    v8 = sub_1BCAB67C8();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

void sub_1BC99A63C(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1BC99A6A8(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1BC99A740 + 4 * byte_1BCABE408[a2]))(0x69646152666C6168);
}

uint64_t sub_1BC99A740(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x69646152666C6168 && v1 == 0xEA00000000007375)
    v2 = 1;
  else
    v2 = sub_1BCAB67C8();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

void sub_1BC99A81C(char a1)
{
  __asm { BR              X12 }
}

uint64_t sub_1BC99A868(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1BC99A8EC + 4 * byte_1BCABE414[a2]))(0xD000000000000015);
}

uint64_t sub_1BC99A8EC(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0xD000000000000015 && v1 == 0x80000001BCACDC90)
    v2 = 1;
  else
    v2 = sub_1BCAB67C8();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_1BC99A9A0(unsigned __int8 a1, unsigned __int8 a2)
{
  int v2;
  unint64_t v3;
  unint64_t v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  char v8;

  v2 = a1;
  if (a1)
  {
    if (a1 == 1)
      v3 = 0xD000000000000012;
    else
      v3 = 0x636E657265666552;
    if (v2 == 1)
      v4 = 0x80000001BCACD8D0;
    else
      v4 = 0xED0000656E694C65;
    v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1)
        v6 = 0xD000000000000012;
      else
        v6 = 0x636E657265666552;
      if (v5 == 1)
        v7 = 0x80000001BCACD8D0;
      else
        v7 = 0xED0000656E694C65;
      if (v3 != v6)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  else
  {
    v4 = 0xE700000000000000;
    v3 = 0x746E65746E6F43;
    v5 = a2;
    if (a2)
      goto LABEL_9;
  }
  v7 = 0xE700000000000000;
  if (v3 != 0x746E65746E6F43)
  {
LABEL_21:
    v8 = sub_1BCAB67C8();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7)
    goto LABEL_21;
  v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_1BC99AAD0(unsigned __int8 a1, unsigned __int8 a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  char v8;

  v2 = 0xD000000000000012;
  v3 = 0x80000001BCACDD90;
  v4 = a1;
  if (a1)
  {
    if (a1 == 1)
      v5 = 0xD000000000000012;
    else
      v5 = 0x676E654C6F72657ALL;
    if (v4 == 1)
      v6 = 0x80000001BCACDDB0;
    else
      v6 = 0xEA00000000006874;
    v7 = a2;
    if (!a2)
      goto LABEL_12;
  }
  else
  {
    v5 = 0xD000000000000012;
    v6 = 0x80000001BCACDD90;
    v7 = a2;
    if (!a2)
      goto LABEL_12;
  }
  if (v7 == 1)
  {
    v3 = 0x80000001BCACDDB0;
  }
  else
  {
    v2 = 0x676E654C6F72657ALL;
    v3 = 0xEA00000000006874;
  }
LABEL_12:
  if (v5 == v2 && v6 == v3)
    v8 = 1;
  else
    v8 = sub_1BCAB67C8();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_1BC99ABD4(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x74646957666C6168;
  else
    v3 = 0x57746C7561666564;
  if (v2)
    v4 = 0xEC00000068746469;
  else
    v4 = 0xE900000000000068;
  if ((a2 & 1) != 0)
    v5 = 0x74646957666C6168;
  else
    v5 = 0x57746C7561666564;
  if ((a2 & 1) != 0)
    v6 = 0xE900000000000068;
  else
    v6 = 0xEC00000068746469;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_1BCAB67C8();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

void sub_1BC99AC84(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1BC99ACF0(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(void))((char *)sub_1BC99ADF8 + 4 * byte_1BCABE424[a2]))();
}

uint64_t sub_1BC99ADF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  char v4;

  if (a1 == a3 && v3 == 0xEF6D756D696E694DLL)
    v4 = 1;
  else
    v4 = sub_1BCAB67C8();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v4 & 1;
}

uint64_t sub_1BC99AF6C(char a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  if ((a1 & 1) != 0)
    v2 = 0x6973616572636564;
  else
    v2 = 0x6973616572636E69;
  if ((a2 & 1) != 0)
    v3 = 0x6973616572636564;
  else
    v3 = 0x6973616572636E69;
  if (v2 == v3)
    v4 = 1;
  else
    v4 = sub_1BCAB67C8();
  swift_bridgeObjectRelease_n();
  return v4 & 1;
}

uint64_t sub_1BC99AFE8()
{
  _BYTE *v0;

  if (*v0)
    return 0x74704F7972657571;
  else
    return 0x676E615265746164;
}

uint64_t sub_1BC99B030@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1BC99B7CC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1BC99B054()
{
  return 0;
}

void sub_1BC99B060(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_1BC99B06C()
{
  sub_1BC99B42C();
  return sub_1BCAB68D0();
}

uint64_t sub_1BC99B094()
{
  sub_1BC99B42C();
  return sub_1BCAB68DC();
}

uint64_t SleepQueryConfiguration.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char v9;
  _QWORD v11[2];
  char v12;
  char v13;
  char v14;

  sub_1BC99B4B4(0, &qword_1ED6C3198, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED170]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v8 = (char *)v11 - v7;
  v9 = *v1;
  v11[0] = *((_QWORD *)v1 + 1);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BC99B42C();
  sub_1BCAB68B8();
  v14 = v9;
  v13 = 0;
  sub_1BC99B470();
  sub_1BCAB6774();
  if (!v2)
  {
    v11[1] = v11[0];
    v12 = 1;
    type metadata accessor for HKSleepDaySummaryQueryOptions(0);
    sub_1BC99B554(&qword_1ED6C4D88, MEMORY[0x1E0CB45E8]);
    sub_1BCAB6774();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t SleepQueryConfiguration.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char v10;
  uint64_t v12;
  _QWORD v13[2];
  char v14;
  char v15;
  char v16;

  sub_1BC99B4B4(0, &qword_1ED6C6EE0, MEMORY[0x1E0DED048]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v9 = (char *)v13 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BC99B42C();
  sub_1BCAB68AC();
  if (!v2)
  {
    v15 = 0;
    sub_1BC99B510();
    sub_1BCAB66E4();
    v10 = v16;
    type metadata accessor for HKSleepDaySummaryQueryOptions(0);
    v14 = 1;
    sub_1BC99B554(&qword_1EF477F10, MEMORY[0x1E0CB45F0]);
    sub_1BCAB66E4();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    v12 = v13[1];
    *(_BYTE *)a2 = v10;
    *(_QWORD *)(a2 + 8) = v12;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_1BC99B3CC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return SleepQueryConfiguration.init(from:)(a1, a2);
}

uint64_t sub_1BC99B3E0(_QWORD *a1)
{
  return SleepQueryConfiguration.encode(to:)(a1);
}

uint64_t sub_1BC99B3F4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 v4;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  sub_1BC9991D8(*(_BYTE *)a1);
  return v4 & (v2 == v3);
}

unint64_t sub_1BC99B42C()
{
  unint64_t result;

  result = qword_1ED6C6B38;
  if (!qword_1ED6C6B38)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCABE59C, &type metadata for SleepQueryConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED6C6B38);
  }
  return result;
}

unint64_t sub_1BC99B470()
{
  unint64_t result;

  result = qword_1ED6C4518;
  if (!qword_1ED6C4518)
  {
    result = MEMORY[0x1BCCFBE84](&protocol conformance descriptor for DateRange, &type metadata for DateRange);
    atomic_store(result, (unint64_t *)&qword_1ED6C4518);
  }
  return result;
}

void sub_1BC99B4B4(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_1BC99B42C();
    v7 = a3(a1, &type metadata for SleepQueryConfiguration.CodingKeys, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

unint64_t sub_1BC99B510()
{
  unint64_t result;

  result = qword_1ED6C6DC8;
  if (!qword_1ED6C6DC8)
  {
    result = MEMORY[0x1BCCFBE84](&protocol conformance descriptor for DateRange, &type metadata for DateRange);
    atomic_store(result, (unint64_t *)&qword_1ED6C6DC8);
  }
  return result;
}

uint64_t sub_1BC99B554(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    type metadata accessor for HKSleepDaySummaryQueryOptions(255);
    result = MEMORY[0x1BCCFBE84](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for SleepQueryConfiguration(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFB && a1[16])
    return (*(_DWORD *)a1 + 251);
  v3 = *a1;
  v4 = v3 >= 6;
  v5 = v3 - 6;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for SleepQueryConfiguration(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFA)
  {
    *(_QWORD *)result = a2 - 251;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFB)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0xFB)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_BYTE *)result = a2 + 5;
  }
  return result;
}

ValueMetadata *type metadata accessor for SleepQueryConfiguration()
{
  return &type metadata for SleepQueryConfiguration;
}

uint64_t storeEnumTagSinglePayload for SleepQueryConfiguration.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1BC99B674 + 4 * byte_1BCABE433[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1BC99B6A8 + 4 * byte_1BCABE42E[v4]))();
}

uint64_t sub_1BC99B6A8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BC99B6B0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BC99B6B8);
  return result;
}

uint64_t sub_1BC99B6C4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BC99B6CCLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1BC99B6D0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BC99B6D8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SleepQueryConfiguration.CodingKeys()
{
  return &type metadata for SleepQueryConfiguration.CodingKeys;
}

unint64_t sub_1BC99B6F8()
{
  unint64_t result;

  result = qword_1EF477F18;
  if (!qword_1EF477F18)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCABE574, &type metadata for SleepQueryConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF477F18);
  }
  return result;
}

unint64_t sub_1BC99B740()
{
  unint64_t result;

  result = qword_1ED6C6B48;
  if (!qword_1ED6C6B48)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCABE4E4, &type metadata for SleepQueryConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED6C6B48);
  }
  return result;
}

unint64_t sub_1BC99B788()
{
  unint64_t result;

  result = qword_1ED6C6B40;
  if (!qword_1ED6C6B40)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCABE50C, &type metadata for SleepQueryConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED6C6B40);
  }
  return result;
}

uint64_t sub_1BC99B7CC(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x676E615265746164 && a2 == 0xE900000000000065;
  if (v2 || (sub_1BCAB67C8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x74704F7972657571 && a2 == 0xEC000000736E6F69)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_1BCAB67C8();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

Swift::Void __swiftcall NSOperation.logLifeCycleEvent(_:withPrivateInfo:)(Swift::String _, Swift::String withPrivateInfo)
{
  sub_1BC99BA28(_._countAndFlagsBits, (unint64_t)_._object, withPrivateInfo._countAndFlagsBits, (unint64_t)withPrivateInfo._object, MEMORY[0x1E0DF2290], "%{public}s: %{public}s%{private}s.");
}

Swift::Void __swiftcall NSOperation.logRunning(withInfo:)(Swift::String withInfo)
{
  Swift::String v2;

  v2._countAndFlagsBits = 0x676E696E6E7572;
  v2._object = (void *)0xE700000000000000;
  NSOperation.logLifeCycleEvent(_:withPrivateInfo:)(v2, withInfo);
}

Swift::Void __swiftcall NSOperation.logCancelled(withInfo:)(Swift::String withInfo)
{
  Swift::String v2;

  v2._countAndFlagsBits = 0x656C6C65636E6163;
  v2._object = (void *)0xE900000000000064;
  NSOperation.logLifeCycleEvent(_:withPrivateInfo:)(v2, withInfo);
}

Swift::Void __swiftcall NSOperation.logCleanUp(withInfo:)(Swift::String withInfo)
{
  Swift::String v2;

  v2._countAndFlagsBits = 0x676E696E61656C63;
  v2._object = (void *)0xEB00000000707520;
  NSOperation.logLifeCycleEvent(_:withPrivateInfo:)(v2, withInfo);
}

Swift::Void __swiftcall NSOperation.logFinished(withInfo:)(Swift::String withInfo)
{
  Swift::String v2;

  v2._countAndFlagsBits = 0x64656873696E6966;
  v2._object = (void *)0xE800000000000000;
  NSOperation.logLifeCycleEvent(_:withPrivateInfo:)(v2, withInfo);
}

Swift::Void __swiftcall NSOperation.logAbortingDueToCancellation(withInfo:)(Swift::String withInfo)
{
  Swift::String v2;

  v2._object = (void *)0x80000001BCACE790;
  v2._countAndFlagsBits = 0xD00000000000002DLL;
  NSOperation.logLifeCycleEvent(_:withPrivateInfo:)(v2, withInfo);
}

uint64_t NSOperation.logError(_:withInfo:)(uint64_t a1, uint64_t a2, void *a3)
{
  Swift::String v5;
  Swift::String v6;

  swift_getErrorValue();
  v5._countAndFlagsBits = sub_1BCAB6810();
  v6._countAndFlagsBits = a2;
  v6._object = a3;
  NSOperation.logErrorString(_:withInfo:)(v5, v6);
  return swift_bridgeObjectRelease();
}

Swift::Void __swiftcall NSOperation.logErrorString(_:withInfo:)(Swift::String _, Swift::String withInfo)
{
  sub_1BC99BA28(_._countAndFlagsBits, (unint64_t)_._object, withInfo._countAndFlagsBits, (unint64_t)withInfo._object, MEMORY[0x1E0DF2280], "%{public}s: error occurred - %{public}s%{private}s.");
}

uint64_t sub_1BC99BA28(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t (*a5)(void), const char *a6)
{
  void *v6;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  id v15;
  id v16;
  NSObject *v17;
  int v18;
  uint64_t v19;
  id v20;
  id v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;

  v37 = a1;
  v38 = a3;
  v11 = sub_1BCAB5514();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BCAB54B4();
  v15 = v6;
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  v16 = v15;
  v17 = sub_1BCAB54FC();
  v18 = a5();
  if (os_log_type_enabled(v17, (os_log_type_t)v18))
  {
    v33 = v18;
    v34 = a6;
    v35 = v12;
    v36 = v11;
    v19 = swift_slowAlloc();
    v32 = swift_slowAlloc();
    v41 = v32;
    *(_DWORD *)v19 = 136446723;
    v20 = v16;
    v21 = objc_msgSend(v20, sel_description);
    v22 = sub_1BCAB5F04();
    v24 = v23;

    v39 = sub_1BC99BD4C(v22, v24, &v41);
    sub_1BCAB63A8();

    swift_bridgeObjectRelease();
    *(_WORD *)(v19 + 12) = 2082;
    swift_bridgeObjectRetain();
    v39 = sub_1BC99BD4C(v37, a2, &v41);
    sub_1BCAB63A8();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v19 + 22) = 2081;
    v25 = HIBYTE(a4) & 0xF;
    if ((a4 & 0x2000000000000000) == 0)
      v25 = v38 & 0xFFFFFFFFFFFFLL;
    if (v25)
    {
      v39 = 0x203A6F666E692820;
      v40 = 0xE800000000000000;
      sub_1BCAB5F70();
      sub_1BCAB5F70();
      v26 = v39;
      v27 = v40;
    }
    else
    {
      v26 = 0;
      v27 = 0xE000000000000000;
    }
    v30 = v34;
    v29 = v35;
    v39 = sub_1BC99BD4C(v26, v27, &v41);
    sub_1BCAB63A8();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1BC989000, v17, (os_log_type_t)v33, v30, (uint8_t *)v19, 0x20u);
    v31 = v32;
    swift_arrayDestroy();
    MEMORY[0x1BCCFBF5C](v31, -1, -1);
    MEMORY[0x1BCCFBF5C](v19, -1, -1);

    return (*(uint64_t (**)(char *, uint64_t))(v29 + 8))(v14, v36);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();

    return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  }
}

uint64_t sub_1BC99BD4C(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  uint64_t ObjectType;

  v6 = sub_1BC99BE1C(v12, 0, 0, 1, a1, a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = swift_getObjectType();
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      sub_1BC99C384((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = MEMORY[0x1E0DEC2B8];
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      sub_1BC99C384((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  return v7;
}

uint64_t sub_1BC99BE1C(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (_QWORD *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            sub_1BCAB63B4();
            result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    result = sub_1BC99BFD4(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0)
    goto LABEL_13;
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  v8 = sub_1BCAB6528();
  if (!v8)
  {
    sub_1BCAB65B8();
    __break(1u);
LABEL_17:
    result = sub_1BCAB6624();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return swift_unknownObjectRetain();
}

uint64_t sub_1BC99BFD4(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = sub_1BC99C068(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_1BC99C23C(0, *(_QWORD *)(v2 + 16) + 1, 1, (char *)v2);
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if (v4 >= v3 >> 1)
    v2 = sub_1BC99C23C(v3 > 1, v4 + 1, 1, (char *)v2);
  *(_QWORD *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t sub_1BC99C068(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  char v6;
  uint64_t result;

  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_10;
  if ((a2 & 0x2000000000000000) != 0)
    v2 = HIBYTE(a2) & 0xF;
  else
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (v2)
  {
    while (1)
    {
      v3 = sub_1BC99C1DC(v2, 0);
      if (v2 < 0)
        break;
      v4 = v3;
      v5 = sub_1BCAB64D4();
      if ((v6 & 1) != 0)
        goto LABEL_14;
      if (v5 == v2)
        return (uint64_t)v4;
      sub_1BCAB65B8();
      __break(1u);
LABEL_10:
      v2 = sub_1BCAB5F7C();
      if (!v2)
        return MEMORY[0x1E0DEE9D8];
    }
    sub_1BCAB6624();
    __break(1u);
LABEL_14:
    result = sub_1BCAB65B8();
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E0DEE9D8];
  }
  return result;
}

_QWORD *sub_1BC99C1DC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  size_t v5;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  sub_1BC99C3C0();
  v4 = (_QWORD *)swift_allocObject();
  v5 = _swift_stdlib_malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t sub_1BC99C23C(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_1BC99C3C0();
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v8])
      memmove(v12, v13, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_1BCAB6624();
  __break(1u);
  return result;
}

uint64_t sub_1BC99C384(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

void sub_1BC99C3C0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED6C47D0)
  {
    v0 = sub_1BCAB67A4();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED6C47D0);
  }
}

Swift::Int __swiftcall _HKQuantityDistributionData.sampleCount()()
{
  void *v0;
  id v1;
  unint64_t v2;
  Swift::Int v3;
  Swift::Int result;
  uint64_t v5;
  Swift::Int v6;
  id v7;
  void *v8;
  id v9;
  BOOL v10;

  v1 = objc_msgSend(v0, sel_histogramCounts);
  sub_1BC99C53C();
  v2 = sub_1BCAB6018();

  if (v2 >> 62)
    goto LABEL_12;
  v3 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
  result = swift_bridgeObjectRetain();
  if (v3)
  {
    while (v3 >= 1)
    {
      v5 = 0;
      v6 = 0;
      while (1)
      {
        v7 = (v2 & 0xC000000000000001) != 0 ? (id)MEMORY[0x1BCCFB0D4](v5, v2) : *(id *)(v2 + 8 * v5 + 32);
        v8 = v7;
        v9 = objc_msgSend(v7, sel_integerValue);

        v10 = __OFADD__(v6, v9);
        v6 += (Swift::Int)v9;
        if (v10)
          break;
        if (v3 == ++v5)
          goto LABEL_14;
      }
      __break(1u);
LABEL_12:
      swift_bridgeObjectRetain();
      result = sub_1BCAB65DC();
      v3 = result;
      if (!result)
        goto LABEL_13;
    }
    __break(1u);
  }
  else
  {
LABEL_13:
    v6 = 0;
LABEL_14:
    swift_bridgeObjectRelease_n();
    return v6;
  }
  return result;
}

unint64_t sub_1BC99C53C()
{
  unint64_t result;

  result = qword_1ED6C6EB8;
  if (!qword_1ED6C6EB8)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1ED6C6EB8);
  }
  return result;
}

uint64_t Collection<>.histogramSampleCount()()
{
  char v0;
  uint64_t result;
  uint64_t v2;

  v0 = sub_1BCAB6108();
  result = 0;
  if ((v0 & 1) == 0)
  {
    sub_1BCAB5FC4();
    return v2;
  }
  return result;
}

Swift::Int sub_1BC99C5EC@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  Swift::Int result;

  v3 = *a1;
  result = _HKQuantityDistributionData.sampleCount()();
  if (__OFADD__(v3, result))
    __break(1u);
  else
    *a2 = v3 + result;
  return result;
}

double Collection<>.histogramSamplesPerMinute(startDate:endDate:)()
{
  uint64_t v0;
  double v1;
  double v2;
  double result;
  double v4;

  v0 = Collection<>.histogramSampleCount()();
  sub_1BCAB4DC4();
  v2 = v1;
  result = 0.0;
  if (v0 >= 1)
  {
    v4 = v2 / 60.0;
    if (v4 > 0.0)
      return (double)v0 / v4;
  }
  return result;
}

double sub_1BC99C6A4(uint64_t a1)
{
  double v2;
  double v3;
  double result;
  double v5;

  sub_1BCAB4DC4();
  v3 = v2;
  result = 0.0;
  if (a1 >= 1)
  {
    v5 = v3 / 60.0;
    if (v5 > 0.0)
      return (double)a1 / v5;
  }
  return result;
}

uint64_t HistogramUtilities.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t HistogramUtilities.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for HistogramUtilities()
{
  return objc_opt_self();
}

uint64_t method lookup function for HistogramUtilities()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of static HistogramUtilities.histogramSamplesPerMinute(sampleCount:startDate:endDate:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 80))();
}

int *ValueHistogramCollectionQueryConfiguration.init(dateInterval:anchorDate:statisticsInterval:quantityRanges:)@<X0>(uint64_t a1@<X0>, char *a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  char v9;
  uint64_t v10;
  int *result;

  v9 = *a2;
  v10 = sub_1BCAB4BD8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(a5, a1, v10);
  result = (int *)type metadata accessor for ValueHistogramCollectionQueryConfiguration();
  *(_BYTE *)(a5 + result[5]) = v9;
  *(_BYTE *)(a5 + result[6]) = a3;
  *(_QWORD *)(a5 + result[7]) = a4;
  return result;
}

uint64_t type metadata accessor for ValueHistogramCollectionQueryConfiguration()
{
  uint64_t result;

  result = qword_1ED6C3048;
  if (!qword_1ED6C3048)
    return swift_getSingletonMetadata();
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for ValueHistogramCollectionQueryConfiguration(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_1BCAB4BD8();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[6];
    *((_BYTE *)a1 + a3[5]) = *((_BYTE *)a2 + a3[5]);
    *((_BYTE *)a1 + v8) = *((_BYTE *)a2 + v8);
    *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for ValueHistogramCollectionQueryConfiguration(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1BCAB4BD8();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ValueHistogramCollectionQueryConfiguration(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = sub_1BCAB4BD8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  *(_BYTE *)(a1 + v7) = *(_BYTE *)(a2 + v7);
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ValueHistogramCollectionQueryConfiguration(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;

  v6 = sub_1BCAB4BD8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for ValueHistogramCollectionQueryConfiguration(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = sub_1BCAB4BD8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  *(_BYTE *)(a1 + v7) = *(_BYTE *)(a2 + v7);
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  return a1;
}

uint64_t assignWithTake for ValueHistogramCollectionQueryConfiguration(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = sub_1BCAB4BD8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  *(_BYTE *)(a1 + v7) = *(_BYTE *)(a2 + v7);
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ValueHistogramCollectionQueryConfiguration()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BC99CACC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = sub_1BCAB4BD8();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 28));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for ValueHistogramCollectionQueryConfiguration()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BC99CB54(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_1BCAB4BD8();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 28)) = (a2 - 1);
  return result;
}

uint64_t sub_1BC99CBCC()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1BCAB4BD8();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void sub_1BC99CC4C()
{
  qword_1ED6D3780 = 0x4000000000000000;
}

double sub_1BC99CC5C()
{
  return sub_1BCA2F530();
}

double sub_1BC99CC7C()
{
  uint64_t v0;
  uint64_t v1;
  double v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  double *v8;
  double v9;
  double v10;
  void *v11;
  void *v12;

  v1 = *(_QWORD *)(v0 + 440);
  v2 = 0.0;
  if ((*(_BYTE *)(v1 + 144) & 1) == 0)
    v2 = *(double *)(v1 + 112);
  v3 = *(_QWORD *)(v1 + 40);
  if (v3
    && (unint64_t)*(unsigned __int8 *)(v1 + 68) << 32 != 0x300000000
    && (*(_DWORD *)(v1 + 72) & 0xFF000000) != 0x2000000)
  {
    swift_bridgeObjectRetain();
    DiagramConfiguration.TextAttributes.toTextAttributes()();
    v4 = sub_1BC99F5E8(v3);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v5 = *(_QWORD *)(v4 + 16);
    if (v5)
    {
      v6 = *(double *)(v4 + 32);
      v7 = v5 - 1;
      if (v7)
      {
        v8 = (double *)(v4 + 40);
        do
        {
          v9 = *v8++;
          v10 = v9;
          if (v6 < v9)
            v6 = v10;
          --v7;
        }
        while (v7);
      }
    }
    swift_bridgeObjectRelease();
  }
  if ((*(_QWORD *)(v1 + 64) & 0xFE00000000 | 0x100000000) != 0x300000000)
  {
    DiagramConfiguration.TextAttributes.toTextAttributes()();
    v11 = (void *)sub_1BCAB5EE0();
    type metadata accessor for Key(0);
    sub_1BC99F5A0();
    v12 = (void *)sub_1BCAB5E68();
    swift_bridgeObjectRelease();
    objc_msgSend(v11, sel_sizeWithAttributes_, v12);

  }
  return v2;
}

void (*sub_1BC99CE98())(uint64_t a1, uint64_t a2, double a3, double a4)
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *v0;
  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 16) = v0;
  *(_QWORD *)(v2 + 24) = v1;
  swift_retain();
  return sub_1BC99F774;
}

void sub_1BC99CEF0(uint64_t a1, uint64_t a2, uint64_t a3, double a4, double a5)
{
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  char v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  _OWORD v21[3];
  uint64_t v22;
  _OWORD v23[4];

  v9 = *(_OWORD *)(a2 + 16);
  v21[0] = *(_OWORD *)a2;
  v21[1] = v9;
  v21[2] = *(_OWORD *)(a2 + 32);
  v22 = *(_QWORD *)(a2 + 48);
  v10 = *(_OWORD *)(a3 + 128);
  v23[0] = *(_OWORD *)(a3 + 112);
  v23[1] = v10;
  v23[2] = *(_OWORD *)(a3 + 144);
  v11 = *(unsigned __int8 *)(a3 + 22);
  v12 = *(_BYTE *)(a3 + 21);
  sub_1BC9A113C((uint64_t)v23);
  sub_1BC99DBD4((uint64_t)v21, v23, v11, v12, (uint64_t)&v13);
  sub_1BC9A1164((uint64_t)v23);
  v17 = v13;
  v18 = v14;
  v19 = v15;
  v20 = v16;
  LOBYTE(v13) = *(_BYTE *)(a3 + 20);
  DiagramConfiguration.Color.toColor()();
  v13 = v17;
  v14 = v18;
  v15 = v19;
  v16 = v20;
  sub_1BCA2F854(a1, (uint64_t *)&v13, a4, a5);
  __asm { BR              X9 }
}

void sub_1BC99D03C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  CGContext *v3;
  uint64_t v4;
  double v5;
  UIColor v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Class isa;
  __int128 v14;
  uint64_t v15;
  double y;
  double v17;
  double v18;
  double v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  UIColor v23;
  uint64_t v24;
  double v25;
  __int128 v26;
  CGPoint v27;
  double v28;
  CGFloat v29;
  void *v30;
  void *v31;
  CGFloat v32;
  void *v33;
  void *v34;
  __int128 v35;
  CGPoint v36;
  CGFloat v37;
  CGFloat v38;
  void *v39;
  void *v40;
  CGFloat v41;
  CGFloat v42;
  void *v43;
  void *v44;
  CGFloat v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  CGPoint v52;
  void *v53;
  id v54;
  CGColor *v55;
  CGPoint v56;
  id v57;
  CGColor *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  CGPoint v69;
  void *v70;
  void *v71;
  double v72;
  double v73;
  double v74;
  double v75;
  CGFloat v76;
  void *v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  CGPoint v89;
  void *v90;
  void *v91;
  double v92;
  double v93;
  double v94;
  void *v95;
  void *v96;
  CGPoint v97;
  CGPoint v98;
  CGPoint v99;
  CGPoint v100;
  CGPoint v101;
  CGPoint v102;
  CGRect v103;
  CGRect v104;
  CGRect v105;
  CGRect v106;

  v4 = swift_bridgeObjectRelease();
  *(_BYTE *)(v0 + 416) = 2;
  MEMORY[0x1E0C80A78](v4);
  sub_1BC99F368((unsigned __int8 *)(v0 + 416), (void (*)(double *, double *, _QWORD *, double, double))sub_1BC9A11FC);
  v5 = dbl_1BCABE740[*(char *)(v2 + 16)];
  *(_BYTE *)(v0 + 416) = *(_BYTE *)(v2 + 18);
  v6.super.isa = DiagramConfiguration.Color.toColor()().super.isa;
  v7 = *(unsigned __int8 *)(v2 + 40);
  *(UIColor *)(v0 + 40) = v6;
  if (v7 == 35)
    goto LABEL_10;
  v8 = *(_BYTE *)(v2 + 80);
  v10 = *(_QWORD *)(v2 + 64);
  v9 = *(_QWORD *)(v2 + 72);
  v11 = *(_QWORD *)(v2 + 56);
  v12 = *(_QWORD *)(v2 + 48);
  *(_BYTE *)(v0 + 416) = v7;
  *(_QWORD *)(v0 + 424) = v12;
  *(_QWORD *)(v0 + 432) = v11;
  *(_BYTE *)(v0 + 440) = v10 & 1;
  *(_QWORD *)(v0 + 448) = v9;
  *(_BYTE *)(v0 + 456) = v8 & 1;
  v6.super.isa = sub_1BC99FA2C(v0 + 416, v6.super.isa);
  if (!v6.super.isa)
  {
LABEL_10:
    *(_BYTE *)(v0 + 416) = 0;
    MEMORY[0x1E0C80A78](v6.super.isa);
    sub_1BC99F1D8((unsigned __int8 *)(v0 + 416), sub_1BC9A118C);
  }
  else
  {
    isa = v6.super.isa;
    v103.origin.x = sub_1BCA2F530();
    v14 = *(_OWORD *)(v1 + 24);
    *(_OWORD *)(v0 + 416) = *(_OWORD *)(v1 + 8);
    *(_OWORD *)(v0 + 432) = v14;
    *(_OWORD *)(v0 + 448) = *(_OWORD *)(v1 + 40);
    v104 = CGRectApplyAffineTransform(v103, (CGAffineTransform *)(v0 + 416));
    v15 = 0;
    if ((v8 & 1) != 0)
      y = 0.0;
    else
      y = v104.origin.y;
    v17 = v104.origin.y + v104.size.height;
    if ((v10 & 1) != 0)
      v18 = 0.0;
    else
      v18 = v17;
    v19 = v18 - y;
    v20 = y;
    v21 = *(_QWORD *)(v0 + 64);
    CGContextClipToRect(v3, *(CGRect *)&v15);
    CGContextSetLineWidth(v3, v5);
    CGContextSetLineCap(v3, kCGLineCapRound);
    *(_BYTE *)(v0 + 416) = 0;
    MEMORY[0x1E0C80A78](v22);
    sub_1BC99F1D8((unsigned __int8 *)(v0 + 416), (uint64_t (*)(void))sub_1BC9A11EC);

  }
  *(_BYTE *)(v0 + 416) = *(_BYTE *)(v2 + 19);
  v23.super.isa = DiagramConfiguration.Color.toColor()().super.isa;
  *(_BYTE *)(v0 + 416) = 1;
  MEMORY[0x1E0C80A78](v23.super.isa);
  *(_QWORD *)(v0 + 32) = v24;
  sub_1BC99F1D8((unsigned __int8 *)(v0 + 416), sub_1BC9A118C);
  sub_1BC9A1020(v2 + 160, v0 + 184, (uint64_t)&unk_1ED6C5460, (uint64_t)&type metadata for DiagramDistribution.DiagramDistributionMinMax, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))sub_1BC9A1210);
  sub_1BC9A1020(v0 + 184, v0 + 416, (uint64_t)&unk_1ED6C5460, (uint64_t)&type metadata for DiagramDistribution.DiagramDistributionMinMax, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))sub_1BC9A1210);
  if (sub_1BC9A0FA0(v0 + 416) != 1)
  {
    v25 = dbl_1BCABE7A0[*(char *)(v2 + 17)];
    if ((*(_BYTE *)(v0 + 560) & 1) == 0)
    {
      v97 = *(CGPoint *)(v0 + 544);
      v26 = *(_OWORD *)(v1 + 24);
      *(_OWORD *)(v0 + 128) = *(_OWORD *)(v1 + 8);
      *(_OWORD *)(v0 + 144) = v26;
      *(_OWORD *)(v0 + 160) = *(_OWORD *)(v1 + 40);
      v27 = CGPointApplyAffineTransform(v97, (CGAffineTransform *)(v0 + 128));
      v28 = *(double *)(v0 + 488);
      v29 = v27.x - *(double *)(v0 + 480) * 0.5;
      v30 = (void *)sub_1BCAB5EE0();
      type metadata accessor for Key(0);
      sub_1BC99F5A0();
      v31 = (void *)sub_1BCAB5E68();
      objc_msgSend(v30, byte_1E75541DB, v31, v29, v25 + v27.y + 2.0);

      v32 = v27.x - *(double *)(v0 + 512) * 0.5;
      v33 = (void *)sub_1BCAB5EE0();
      v1 = v0 + 656;
      v34 = (void *)sub_1BCAB5E68();
      objc_msgSend(v33, byte_1E75541DB, v34, v32, v25 + v27.y + 2.0 + v28);

    }
    if ((*(_BYTE *)(v0 + 584) & 1) == 0)
    {
      v98 = *(CGPoint *)(v0 + 568);
      v35 = *(_OWORD *)(v1 + 24);
      *(_OWORD *)(v0 + 128) = *(_OWORD *)(v1 + 8);
      *(_OWORD *)(v0 + 144) = v35;
      *(_OWORD *)(v0 + 160) = *(_OWORD *)(v1 + 40);
      v36 = CGPointApplyAffineTransform(v98, (CGAffineTransform *)(v0 + 128));
      v37 = v36.x - *(double *)(v0 + 528) * 0.5;
      v38 = v36.y + -2.0 - *(double *)(v0 + 536);
      v39 = (void *)sub_1BCAB5EE0();
      type metadata accessor for Key(0);
      sub_1BC99F5A0();
      v40 = (void *)sub_1BCAB5E68();
      objc_msgSend(v39, sel_drawAtPoint_withAttributes_, v40, v37, v38 - v25);

      v41 = v36.x - *(double *)(v0 + 496) * 0.5;
      v42 = v38 - *(double *)(v0 + 504) - v25;
      v43 = (void *)sub_1BCAB5EE0();
      v44 = (void *)sub_1BCAB5E68();
      objc_msgSend(v43, sel_drawAtPoint_withAttributes_, v44, v41, v42);

    }
    if (*(_BYTE *)(v0 + 624) == 1)
    {
      if (qword_1ED6C2EF0 != -1)
        swift_once();
      v45 = v5 - (*(double *)&qword_1ED6D3780 + *(double *)&qword_1ED6D3780);
      v99 = *(CGPoint *)(v0 + 592);
      v46 = *(_QWORD *)(v0 + 664);
      v47 = *(_QWORD *)(v0 + 672);
      v48 = *(_QWORD *)(v0 + 680);
      v49 = *(_QWORD *)(v0 + 688);
      v50 = *(_QWORD *)(v0 + 696);
      v51 = *(_QWORD *)(v0 + 704);
      *(_QWORD *)(v0 + 128) = v46;
      *(_QWORD *)(v0 + 136) = v47;
      *(_QWORD *)(v0 + 144) = v48;
      *(_QWORD *)(v0 + 152) = v49;
      *(_QWORD *)(v0 + 160) = v50;
      *(_QWORD *)(v0 + 168) = v51;
      v52 = CGPointApplyAffineTransform(v99, (CGAffineTransform *)(v0 + 128));
      *(CGFloat *)(v0 + 112) = v52.y;
      *(CGFloat *)(v0 + 120) = v52.x;
      CGContextSaveGState(v3);
      CGContextSetBlendMode(v3, kCGBlendModeClear);
      v53 = (void *)objc_opt_self();
      v54 = objc_msgSend(v53, sel_blackColor);
      v55 = (CGColor *)objc_msgSend(v54, sel_CGColor);

      CGContextSetFillColorWithColor(v3, v55);
      v105.origin.x = *(double *)(v0 + 120) - v45 * 0.5;
      v105.origin.y = *(double *)(v0 + 112) - v45 * 0.5;
      v105.size.width = v45;
      v105.size.height = v45;
      CGContextFillEllipseInRect(v3, v105);
      CGContextRestoreGState(v3);
      v100 = *(CGPoint *)(v0 + 608);
      *(_QWORD *)(v0 + 128) = v46;
      *(_QWORD *)(v0 + 136) = v47;
      *(_QWORD *)(v0 + 144) = v48;
      *(_QWORD *)(v0 + 152) = v49;
      *(_QWORD *)(v0 + 160) = v50;
      *(_QWORD *)(v0 + 168) = v51;
      v56 = CGPointApplyAffineTransform(v100, (CGAffineTransform *)(v0 + 128));
      CGContextSaveGState(v3);
      CGContextSetBlendMode(v3, kCGBlendModeClear);
      v57 = objc_msgSend(v53, sel_blackColor);
      v58 = (CGColor *)objc_msgSend(v57, sel_CGColor);

      CGContextSetFillColorWithColor(v3, v58);
      v106.origin.x = v56.x - v45 * 0.5;
      v106.origin.y = v56.y - v45 * 0.5;
      v106.size.width = v45;
      v106.size.height = v45;
      CGContextFillEllipseInRect(v3, v106);
      CGContextRestoreGState(v3);
    }
  }
  v59 = *(_QWORD *)(v2 + 392);
  if (v59)
  {
    v60 = *(_QWORD *)(v59 + 16);
    if (v60)
    {
      *(_QWORD *)(v0 + 16) = v3;
      *(_QWORD *)(v0 + 24) = v2;
      *(_QWORD *)(v0 + 112) = *(_QWORD *)(v2 + 408);
      v61 = *(_QWORD *)(v2 + 400);
      *(_QWORD *)(v0 + 96) = *(_QWORD *)(v0 + 664);
      *(_QWORD *)(v0 + 104) = v61;
      *(_QWORD *)(v0 + 88) = *(_QWORD *)(v0 + 672);
      v62 = *(_QWORD *)(v0 + 680);
      v63 = *(_QWORD *)(v0 + 688);
      v64 = *(_QWORD *)(v0 + 696);
      v65 = *(_QWORD *)(v0 + 704);
      v66 = swift_bridgeObjectRetain();
      *(_QWORD *)(v0 + 8) = v66;
      v67 = v66 + 56;
      *(_QWORD *)(v0 + 80) = MEMORY[0x1E0DEE9B8] + 8;
      do
      {
        *(_QWORD *)(v0 + 120) = *(_QWORD *)(v67 - 24);
        v101 = *(CGPoint *)(v67 - 8);
        v68 = *(_QWORD *)(v0 + 88);
        *(_QWORD *)(v0 + 128) = *(_QWORD *)(v0 + 96);
        *(_QWORD *)(v0 + 136) = v68;
        *(_QWORD *)(v0 + 144) = v62;
        *(_QWORD *)(v0 + 152) = v63;
        *(_QWORD *)(v0 + 160) = v64;
        *(_QWORD *)(v0 + 168) = v65;
        v69 = CGPointApplyAffineTransform(v101, (CGAffineTransform *)(v0 + 128));
        swift_bridgeObjectRetain();
        v70 = (void *)sub_1BCAB5EE0();
        type metadata accessor for Key(0);
        sub_1BC99F5A0();
        v71 = (void *)sub_1BCAB5E68();
        objc_msgSend(v70, sel_sizeWithAttributes_, v71);
        v73 = v72;
        v75 = v74;

        v76 = v69.y - *(double *)(v0 + 104) - v75;
        v77 = (void *)sub_1BCAB5EE0();
        v78 = (void *)sub_1BCAB5E68();
        objc_msgSend(v77, sel_drawAtPoint_withAttributes_, v78, v69.x + v73 * -0.5, v76);
        swift_bridgeObjectRelease();

        v67 += 32;
        --v60;
      }
      while (v60);
      swift_bridgeObjectRelease();
      v3 = *(CGContext **)(v0 + 16);
      v2 = *(_QWORD *)(v0 + 24);
    }
  }
  v79 = *(_QWORD *)(v2 + 416);
  if (v79)
  {
    v80 = *(_QWORD *)(v79 + 16);
    if (v80)
    {
      *(_QWORD *)(v0 + 16) = v3;
      *(_QWORD *)(v0 + 24) = v2;
      *(_QWORD *)(v0 + 112) = *(_QWORD *)(v2 + 432);
      v81 = *(_QWORD *)(v2 + 424);
      *(_QWORD *)(v0 + 96) = *(_QWORD *)(v0 + 664);
      *(_QWORD *)(v0 + 104) = v81;
      v82 = *(_QWORD *)(v0 + 672);
      v83 = *(_QWORD *)(v0 + 680);
      v84 = *(_QWORD *)(v0 + 688);
      v85 = *(_QWORD *)(v0 + 696);
      v86 = *(_QWORD *)(v0 + 704);
      v87 = swift_bridgeObjectRetain();
      *(_QWORD *)(v0 + 80) = v87;
      v88 = v87 + 56;
      *(_QWORD *)(v0 + 88) = MEMORY[0x1E0DEE9B8] + 8;
      do
      {
        *(_QWORD *)(v0 + 120) = *(_QWORD *)(v88 - 24);
        v102 = *(CGPoint *)(v88 - 8);
        *(_QWORD *)(v0 + 128) = *(_QWORD *)(v0 + 96);
        *(_QWORD *)(v0 + 136) = v82;
        *(_QWORD *)(v0 + 144) = v83;
        *(_QWORD *)(v0 + 152) = v84;
        *(_QWORD *)(v0 + 160) = v85;
        *(_QWORD *)(v0 + 168) = v86;
        v89 = CGPointApplyAffineTransform(v102, (CGAffineTransform *)(v0 + 128));
        swift_bridgeObjectRetain();
        v90 = (void *)sub_1BCAB5EE0();
        type metadata accessor for Key(0);
        sub_1BC99F5A0();
        v91 = (void *)sub_1BCAB5E68();
        objc_msgSend(v90, sel_sizeWithAttributes_, v91);
        v93 = v92;

        v94 = *(double *)(v0 + 104) + v89.y;
        v95 = (void *)sub_1BCAB5EE0();
        v96 = (void *)sub_1BCAB5E68();
        objc_msgSend(v95, sel_drawAtPoint_withAttributes_, v96, v89.x + v93 * -0.5, v94);
        swift_bridgeObjectRelease();

        v88 += 32;
        --v80;
      }
      while (v80);
      swift_bridgeObjectRelease();
    }
  }
  __asm { BR              X10 }
}

id *sub_1BC99DBD4@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  CGFloat v10;
  CGFloat v11;
  CGFloat v12;
  CGFloat v13;
  uint64_t inited;
  __int128 v15;
  __int128 v16;
  char v17;
  char v18;
  CGFloat v19;
  CGFloat v20;
  CGFloat v21;
  CGFloat v22;
  CGFloat v23;
  __int128 v24;
  CGAffineTransform t1;
  _BYTE v27[40];
  _QWORD v28[4];
  char v29;
  CGPoint v30;
  CGRect v31;

  sub_1BC99F79C((uint64_t)a2, 2u, (uint64_t)v27);
  sub_1BC9A1020((uint64_t)v27, (uint64_t)v28, (uint64_t)&qword_1ED6C71D0, (uint64_t)type metadata accessor for CGRect, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))sub_1BC998AB0);
  if ((v29 & 1) == 0)
  {
    v10 = *(double *)v28;
    v11 = *(double *)&v28[1];
    v12 = *(double *)&v28[2];
    v13 = *(double *)&v28[3];
    sub_1BC998AB0(0, &qword_1ED6C5B60, (uint64_t (*)(uint64_t))sub_1BC9A0FB8, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1BCABE680;
    v16 = a2[1];
    v15 = a2[2];
    *(_OWORD *)(inited + 32) = *a2;
    *(_OWORD *)(inited + 48) = v16;
    *(_OWORD *)(inited + 64) = v15;
    *(_BYTE *)(inited + 80) = a4;
    sub_1BC9A113C((uint64_t)a2);
    sub_1BCA37358(inited, a3);
    v18 = v17;
    swift_setDeallocating();
    sub_1BC9A0FB8();
    swift_arrayDestroy();
    if ((v18 & 1) == 0)
    {
      v31.origin.x = v10;
      v31.origin.y = v11;
      v31.size.width = v12;
      v31.size.height = v13;
      v30.y = CGRectGetMaxY(v31);
      v19 = *(double *)(a1 + 16);
      v20 = *(double *)(a1 + 24);
      v21 = *(double *)(a1 + 32);
      v22 = *(double *)(a1 + 40);
      v23 = *(double *)(a1 + 48);
      t1.a = *(CGFloat *)(a1 + 8);
      t1.b = v19;
      t1.c = v20;
      t1.d = v21;
      t1.tx = v22;
      t1.ty = v23;
      v30.x = 0.0;
      CGPointApplyAffineTransform(v30, &t1);
      __asm { BR              X10 }
    }
  }
  v24 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a5 = *(_OWORD *)a1;
  *(_OWORD *)(a5 + 16) = v24;
  *(_OWORD *)(a5 + 32) = *(_OWORD *)(a1 + 32);
  *(_QWORD *)(a5 + 48) = *(_QWORD *)(a1 + 48);
  return sub_1BC9A1254((id *)a1);
}

void sub_1BC99DE80(double a1, CGFloat a2, uint64_t a3, uint64_t a4, uint64_t a5, CGFloat *a6, uint64_t a7, CGContext *a8, void *a9)
{
  CGFloat a;
  CGFloat v15;
  CGFloat v16;
  CGFloat v17;
  CGFloat v18;
  CGFloat v19;
  uint64_t v20;
  CGFloat y;
  CGFloat v22;
  CGColor *v23;
  double v24;
  double b;
  void *v26;
  void *v27;
  CGAffineTransform v28;
  _BYTE v29[40];
  CGPoint v30;

  v15 = a6[2];
  v16 = a6[3];
  v17 = a6[4];
  v19 = a6[5];
  v18 = a6[6];
  v28.a = a6[1];
  a = v28.a;
  v28.b = v15;
  v28.c = v16;
  v28.d = v17;
  v28.tx = v19;
  v28.ty = v18;
  v20 = 0;
  y = CGPointApplyAffineTransform(*(CGPoint *)(&a2 + -8), &v28).y;
  v28.a = a;
  v28.b = v15;
  v28.c = v16;
  v28.d = v17;
  v28.tx = v19;
  v28.ty = v18;
  v30.x = 0.0;
  v30.y = a2;
  CGPointApplyAffineTransform(v30, &v28);
  LOBYTE(v28.a) = 2;
  DiagramConfiguration.LineWidth.toPoints()();
  CGContextSetLineWidth(a8, v22);
  CGContextSetLineCap(a8, kCGLineCapRound);
  v23 = (CGColor *)objc_msgSend(a9, sel_CGColor);
  CGContextSetStrokeColorWithColor(a8, v23);

  sub_1BCAB6144();
  sub_1BCAB6150();
  CGContextStrokePath(a8);
  if (a4)
  {
    LOBYTE(v28.a) = *(_BYTE *)(a7 + 21);
    static DiagramGenerator.computeLeftMarginAnnotationBounds(at:annotation:above:textAttributes:)(a4, 1, (char *)&v28, (uint64_t)v29, 0.0, y);
    sub_1BC9A1020((uint64_t)v29, (uint64_t)&v28, (uint64_t)&qword_1ED6C71D0, (uint64_t)type metadata accessor for CGRect, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))sub_1BC998AB0);
    if ((LOBYTE(v28.tx) & 1) == 0)
    {
      v24 = v28.a;
      b = v28.b;
      v26 = (void *)sub_1BCAB5EE0();
      DiagramConfiguration.TextAttributes.toTextAttributes()();
      type metadata accessor for Key(0);
      sub_1BC99F5A0();
      v27 = (void *)sub_1BCAB5E68();
      swift_bridgeObjectRelease();
      objc_msgSend(v26, sel_drawAtPoint_withAttributes_, v27, v24, b);

    }
  }
}

void sub_1BC99E09C(CGFloat *a1, CGContext *a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8, uint64_t a9, CGGradient *a10)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  CGFloat a;
  CGFloat v20;
  CGFloat v21;
  CGFloat v22;
  CGFloat v23;
  CGFloat v24;
  CGFloat v25;
  CGPoint v26;
  CGFloat v27;
  CGFloat v28;
  CGAffineTransform v29;
  CGPoint v30;
  CGPoint v31;
  CGPoint v32;

  v27 = a7;
  v28 = a8;
  v26.x = a5;
  v26.y = a6;
  v15 = sub_1BCAB4FBC();
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15);
  v18 = (char *)&v26 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = a1[2];
  v21 = a1[3];
  v22 = a1[4];
  v23 = a1[5];
  v24 = a1[6];
  v29.a = a1[1];
  a = v29.a;
  v29.b = v20;
  v29.c = v21;
  v29.d = v22;
  v29.tx = v23;
  v29.ty = v24;
  v30.x = a3;
  v30.y = a4;
  *(_QWORD *)&v25 = *(_OWORD *)&CGPointApplyAffineTransform(v30, &v29);
  v29.a = a;
  v29.b = v20;
  v29.c = v21;
  v29.d = v22;
  v29.tx = v23;
  v29.ty = v24;
  CGPointApplyAffineTransform(v26, &v29);
  sub_1BCAB6144();
  sub_1BCAB6150();
  CGContextReplacePathWithStrokedPath(a2);
  CGContextSaveGState(a2);
  (*(void (**)(char *, _QWORD, uint64_t))(v16 + 104))(v18, *MEMORY[0x1E0C9B8A0], v15);
  sub_1BCAB6138();
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  v31.x = v25;
  v31.y = v27;
  v32.y = v28;
  v32.x = v25;
  CGContextDrawLinearGradient(a2, a10, v31, v32, 0);
  CGContextRestoreGState(a2);
}

void sub_1BC99E210(CGFloat *a1, double a2, double a3, CGFloat a4, CGFloat a5, CGFloat a6, uint64_t a7, CGContext *a8, void *a9)
{
  CGFloat a;
  CGFloat v14;
  CGFloat v15;
  CGFloat v16;
  CGFloat v17;
  CGFloat v18;
  CGColor *v19;
  CGAffineTransform v21;
  CGPoint v22;

  v14 = a1[2];
  v16 = a1[3];
  v15 = a1[4];
  v18 = a1[5];
  v17 = a1[6];
  v21.a = a1[1];
  a = v21.a;
  v21.b = v14;
  v21.c = v16;
  v21.d = v15;
  v21.tx = v18;
  v21.ty = v17;
  CGPointApplyAffineTransform(*(CGPoint *)&a2, &v21);
  v21.a = a;
  v21.b = v14;
  v21.c = v16;
  v21.d = v15;
  v21.tx = v18;
  v21.ty = v17;
  v22.x = a4;
  v22.y = a5;
  CGPointApplyAffineTransform(v22, &v21);
  CGContextSetLineWidth(a8, a6);
  CGContextSetLineCap(a8, kCGLineCapRound);
  v19 = (CGColor *)objc_msgSend(a9, sel_CGColor);
  CGContextSetStrokeColorWithColor(a8, v19);

  sub_1BCAB6144();
  sub_1BCAB6150();
  CGContextStrokePath(a8);
}

uint64_t sub_1BC99E30C(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  __int128 v11;
  uint64_t result;
  uint64_t v13;
  __int128 v14;
  __int128 v15;

  if (*a3)
  {
    v13 = *a3;
    v11 = *(_OWORD *)(a3 + 3);
    v14 = *(_OWORD *)(a3 + 1);
    v15 = v11;
    DiagramConfiguration.LineWidth.toPoints()();
    return sub_1BCA3F5F8(a5, a6, &v13, a7, *(unsigned __int8 *)(a4 + 21));
  }
  return result;
}

uint64_t DiagramDistribution.__allocating_init(distributionConfiguration:distributionData:hbxViewControllerFactory:)(char *a1, uint64_t a2, void *a3)
{
  uint64_t v6;

  v6 = swift_allocObject();
  DiagramDistribution.init(distributionConfiguration:distributionData:hbxViewControllerFactory:)(a1, a2, a3);
  return v6;
}

uint64_t DiagramDistribution.init(distributionConfiguration:distributionData:hbxViewControllerFactory:)(char *a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  char v6;
  char v7;
  char v8;
  char v9;
  char v10;
  char v11;
  unsigned __int8 v12;
  unsigned __int16 v13;
  uint64_t v14;
  char v15;
  unsigned __int16 v16;
  unsigned int v17;
  char v18;
  uint64_t v19;
  char v20;
  char v21;
  char v22;
  unsigned int v23;
  unsigned __int16 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  double x;
  double y;
  double width;
  double height;
  double v38;
  double v39;
  double v40;
  uint64_t v41;
  unsigned int v43;
  int v44;
  uint64_t v46;
  unsigned __int8 v47;
  unsigned __int16 v48;
  char v49;
  uint64_t v50;
  char v51;
  char v52;
  char v53;
  char v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  unint64_t v60;
  double v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  double v77;
  char v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86[3];
  uint64_t v87[3];
  __int128 v88;
  __int128 v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  double v93;
  char v94;
  uint64_t v95;
  int v96;
  __int16 v97;
  char v98;
  uint64_t v99;
  char v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char v105;
  uint64_t v106;
  _BYTE v107[232];
  char v108;
  char v109;
  char v110;
  char v111;
  char v112;
  char v113;
  char v114;
  char v115;
  uint64_t v116;
  unsigned __int16 v117;
  unsigned __int8 v118;
  uint64_t v119;
  uint64_t v120;
  double v121;
  uint64_t v122;
  double v123;
  char v124;
  uint64_t v125;
  unsigned int v126;
  unsigned __int16 v127;
  char v128;
  uint64_t v129;
  char v130;
  __C::CGRect v131;

  v4 = v3;
  v70 = *a1;
  v5 = a1[1];
  v6 = a1[2];
  v54 = v6;
  v7 = a1[3];
  v68 = v7;
  v8 = a1[4];
  v66 = v8;
  v9 = a1[5];
  v64 = v9;
  v10 = a1[6];
  v11 = a1[7];
  v52 = v11;
  v12 = a1[18];
  v13 = *((_WORD *)a1 + 8);
  v48 = v13;
  v44 = v13 | (v12 << 16);
  v14 = *((_QWORD *)a1 + 3);
  v46 = *((_QWORD *)a1 + 4);
  v61 = *((double *)a1 + 5);
  v62 = *((_QWORD *)a1 + 1);
  v76 = *((_QWORD *)a1 + 6);
  v77 = *((double *)a1 + 7);
  v15 = a1[64];
  v78 = v15;
  v79 = *(_QWORD *)(a1 + 65);
  v16 = *(_WORD *)(a1 + 77);
  v17 = *(_DWORD *)(a1 + 73);
  v60 = v17 | ((unint64_t)v16 << 32);
  v18 = a1[79];
  v50 = *((_QWORD *)a1 + 10);
  v49 = a1[88];
  v73 = *(_QWORD *)(a2 + 8);
  v74 = *(_QWORD *)a2;
  v19 = *(_QWORD *)(a2 + 16);
  v71 = *(_QWORD *)(a2 + 24);
  v20 = *(_BYTE *)(a2 + 32);
  v59 = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(v4 + 16) = *a1;
  *(_BYTE *)(v4 + 17) = v5;
  v21 = v5;
  v56 = v5;
  *(_BYTE *)(v4 + 18) = v6;
  *(_BYTE *)(v4 + 19) = v7;
  *(_BYTE *)(v4 + 20) = v8;
  *(_BYTE *)(v4 + 21) = v9;
  *(_BYTE *)(v4 + 22) = v10;
  v22 = v10;
  v53 = v10;
  *(_BYTE *)(v4 + 23) = v11;
  *(_QWORD *)(v4 + 24) = v62;
  v47 = v12;
  *(_BYTE *)(v4 + 34) = v12;
  *(_WORD *)(v4 + 32) = v13;
  v75 = v14;
  *(_QWORD *)(v4 + 40) = v14;
  *(_QWORD *)(v4 + 48) = v46;
  *(double *)(v4 + 56) = v61;
  *(_QWORD *)(v4 + 64) = v76;
  *(double *)(v4 + 72) = v77;
  *(_BYTE *)(v4 + 80) = v15;
  *(_QWORD *)(v4 + 81) = v79;
  v23 = v17;
  v43 = v17;
  *(_DWORD *)(v4 + 89) = v17;
  v24 = v16;
  *(_WORD *)(v4 + 93) = v16;
  *(_BYTE *)(v4 + 95) = v18;
  LOBYTE(v17) = v18;
  v51 = v18;
  *(_QWORD *)(v4 + 96) = v50;
  *(_BYTE *)(v4 + 104) = v49;
  *(_QWORD *)(v4 + 112) = v74;
  *(_QWORD *)(v4 + 120) = v73;
  v72 = v19;
  *(_QWORD *)(v4 + 128) = v19;
  *(_QWORD *)(v4 + 136) = v71;
  v58 = v20;
  *(_BYTE *)(v4 + 144) = v20;
  *(_QWORD *)(v4 + 152) = v59;
  type metadata accessor for DiagramDistribution();
  v108 = v70;
  v109 = v21;
  v110 = v54;
  v111 = v68;
  v112 = v66;
  v113 = v64;
  v114 = v22;
  v115 = v52;
  v116 = v62;
  v118 = v47;
  v117 = v48;
  v119 = v14;
  v120 = v46;
  v121 = v61;
  v122 = v76;
  v123 = v77;
  v124 = v15;
  v125 = v79;
  v127 = v24;
  v126 = v23;
  v128 = v17;
  v129 = v50;
  v130 = v49;
  *(_QWORD *)&v88 = v74;
  *((_QWORD *)&v88 + 1) = v73;
  *(_QWORD *)&v89 = v19;
  *((_QWORD *)&v89 + 1) = v71;
  LOBYTE(v90) = v20;
  v91 = v59;
  swift_bridgeObjectRetain();
  sub_1BC99FD00((uint64_t)&v108, &v88, (uint64_t)v107);
  sub_1BC9A1020((uint64_t)v107, v4 + 160, (uint64_t)&unk_1ED6C5460, (uint64_t)&type metadata for DiagramDistribution.DiagramDistributionMinMax, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))sub_1BC9A1210);
  v108 = v70;
  v109 = v56;
  v110 = v54;
  v111 = v68;
  v112 = v66;
  v113 = v64;
  v114 = v53;
  v115 = v52;
  v116 = v62;
  v118 = v47;
  v117 = v48;
  v119 = v14;
  v120 = v46;
  v121 = v61;
  v122 = v76;
  v123 = v77;
  v124 = v15;
  v125 = v79;
  v127 = v24;
  v126 = v43;
  v128 = v51;
  v129 = v50;
  v130 = v49;
  v101 = v74;
  v102 = v73;
  v103 = v19;
  v104 = v71;
  v105 = v20;
  v106 = v59;
  sub_1BC99EAC8((uint64_t)&v108, (uint64_t)&v101, (uint64_t)&v88);
  v25 = v88;
  if ((_QWORD)v88 == 1)
  {
    v26 = 0;
    v27 = 0;
    v28 = 0;
    *(_QWORD *)(v4 + 392) = 0;
    *(_QWORD *)(v4 + 400) = 0;
    *(_QWORD *)(v4 + 408) = 0;
  }
  else
  {
    v29 = *((_QWORD *)&v88 + 1);
    v26 = *((_QWORD *)&v89 + 1);
    v30 = v89;
    v27 = v90;
    v28 = v91;
    sub_1BC9A09EC(v88);
    sub_1BC9A09EC(v26);
    sub_1BC9A0A18(v26);
    *(_QWORD *)(v4 + 392) = v25;
    *(_QWORD *)(v4 + 400) = v29;
    *(_QWORD *)(v4 + 408) = v30;
    sub_1BC9A0A18(v25);
  }
  *(_QWORD *)(v4 + 416) = v26;
  *(_QWORD *)(v4 + 424) = v27;
  *(_QWORD *)(v4 + 432) = v28;
  LOBYTE(v88) = v70;
  BYTE1(v88) = v56;
  BYTE2(v88) = v54;
  BYTE3(v88) = v68;
  BYTE4(v88) = v66;
  BYTE5(v88) = v64;
  BYTE6(v88) = v53;
  BYTE7(v88) = v52;
  *((_QWORD *)&v88 + 1) = v62;
  BYTE2(v89) = BYTE2(v44);
  LOWORD(v89) = v44;
  *((_QWORD *)&v89 + 1) = v75;
  v90 = v46;
  v91 = *(_QWORD *)&v61;
  v92 = v76;
  v93 = v77;
  v94 = v78;
  v95 = v79;
  v97 = WORD2(v60);
  v96 = v60;
  v98 = v51;
  v99 = v50;
  v100 = v49;
  sub_1BC9A1020(v4 + 160, (uint64_t)&v108, (uint64_t)&unk_1ED6C5460, (uint64_t)&type metadata for DiagramDistribution.DiagramDistributionMinMax, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))sub_1BC9A1210);
  v31 = *(_QWORD *)(v4 + 392);
  v32 = *(_QWORD *)(v4 + 400);
  v33 = *(_QWORD *)(v4 + 408);
  v87[0] = v31;
  v87[1] = v32;
  v87[2] = v33;
  v86[0] = v26;
  v86[1] = v27;
  v86[2] = v28;
  v101 = v74;
  v102 = v73;
  v103 = v72;
  v104 = v71;
  v105 = v58;
  v106 = v59;
  sub_1BC9A09EC(v31);
  sub_1BC9A09EC(v26);
  sub_1BC9A03A8((char *)&v88, (uint64_t)&v108, v87, v86, &v101, (double *)&v80);
  v63 = v81;
  v65 = v80;
  v55 = v83;
  v57 = v82;
  v67 = v85;
  v69 = v84;
  sub_1BC9A0A18(v26);
  sub_1BC9A0A18(v31);
  *(_QWORD *)&v88 = v74;
  *((_QWORD *)&v88 + 1) = v73;
  *(_QWORD *)&v89 = v72;
  *((_QWORD *)&v89 + 1) = v71;
  LOBYTE(v90) = v58;
  v91 = v59;
  v131 = DiagramData.diagramBounds(forceNonZeroSize:)(1);
  x = v131.origin.x;
  y = v131.origin.y;
  width = v131.size.width;
  height = v131.size.height;
  swift_bridgeObjectRelease();
  if (v75 != 35)
  {
    v38 = y - v61;
    if ((v76 & 1) != 0)
      v38 = -0.0;
    v39 = height + v38;
    if ((v76 & 1) == 0)
      y = v61;
    v40 = v77 - (y + v39);
    if ((v78 & 1) != 0)
      v40 = -0.0;
    height = v39 + v40;
  }
  v80 = v79;
  LODWORD(v81) = v60;
  WORD2(v81) = WORD2(v60);
  v101 = v65;
  v102 = v63;
  v103 = v57;
  v104 = v55;
  v105 = 0;
  type metadata accessor for DiagramAxis();
  v88 = 0u;
  v89 = 0u;
  v90 = 0;
  swift_allocObject();
  sub_1BCA2F0F8(&v80, (uint64_t)&v101, 0, 0, v69, v67, 0, a3, x, y, width, height, (uint64_t)&v88);
  *(_QWORD *)(v4 + 440) = v41;
  return v4;
}

uint64_t sub_1BC99EAC8@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  double v17;
  uint64_t v18;
  _QWORD *v19;
  double v20;
  double v21;
  _QWORD *v22;
  void *v23;
  Swift::String_optional v24;
  void *object;
  uint64_t countAndFlagsBits;
  unint64_t v27;
  unint64_t v28;
  double *v29;
  void *v30;
  Swift::String_optional v31;
  void *v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  double *v36;
  double v37;
  double v38;
  double v39;
  double v40;
  uint64_t v41;
  double *v42;
  double v43;
  double v44;
  void *v45;
  id v46;
  id v47;
  id v48;
  void *v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  void *v53;
  id v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  double *v58;
  void *v59;
  id v60;
  id v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  void *v65;
  id v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  double *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  _OWORD v77[2];
  char v78;
  uint64_t v79;
  unsigned __int8 v80[9];

  v4 = *(unsigned __int16 *)(result + 16) | (*(unsigned __int8 *)(result + 18) << 16);
  if ((v4 & 0x800000) == 0)
    goto LABEL_12;
  if ((v4 & 0xFEE0E0) == 0xFEE0E0)
    goto LABEL_12;
  v5 = *(char *)result;
  v6 = *(char *)(result + 1);
  v76 = *(_QWORD *)(result + 80);
  v75 = *(unsigned __int8 *)(result + 88);
  v7 = *(_QWORD *)(a2 + 40);
  v8 = *(_BYTE *)(a2 + 32);
  v9 = *(_QWORD *)(result + 8);
  v80[0] = *(_BYTE *)(result + 7);
  v10 = *(_OWORD *)(a2 + 16);
  v77[0] = *(_OWORD *)a2;
  v77[1] = v10;
  v78 = v8;
  v79 = v7;
  result = sub_1BC99FBC8(v80, (uint64_t)v77);
  if (!result)
    goto LABEL_12;
  v11 = result;
  if (v9 == 25)
  {
    v12 = 0;
  }
  else
  {
    LOBYTE(v77[0]) = v9;
    DiagramConfiguration.TextAttributes.toTextAttributes()();
    v12 = v13;
  }
  if (BYTE1(v9) == 25)
  {
    v14 = 0;
  }
  else
  {
    LOBYTE(v77[0]) = BYTE1(v9);
    DiagramConfiguration.TextAttributes.toTextAttributes()();
  }
  v74 = v14;
  if (!(v12 | v14))
  {
    result = swift_bridgeObjectRelease();
LABEL_12:
    *(_QWORD *)a3 = 1;
    *(_OWORD *)(a3 + 8) = 0u;
    *(_OWORD *)(a3 + 24) = 0u;
    *(_QWORD *)(a3 + 40) = 0;
    return result;
  }
  v15 = *(_QWORD *)(v11 + 16);
  if (!v15)
  {
    result = swift_bridgeObjectRelease();
    v19 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    v22 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    goto LABEL_36;
  }
  v72 = v5;
  v73 = v6;
  v71 = v12;
  v17 = *(double *)(v11 + 32);
  v16 = *(double *)(v11 + 40);
  v18 = v15 - 1;
  if (v15 == 1)
  {
    v19 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    v20 = v16;
    v21 = v17;
    v22 = (_QWORD *)MEMORY[0x1E0DEE9D8];
LABEL_16:
    swift_bridgeObjectRelease();
    *(_QWORD *)&v77[0] = v76;
    BYTE8(v77[0]) = v75;
    v23 = (void *)sub_1BCAB4FC8();
    v24 = DiagramConfiguration.ValueFormatter.format(value:)((NSNumber)v23);
    object = v24.value._object;

    if (v24.value._object)
      countAndFlagsBits = v24.value._countAndFlagsBits;
    else
      countAndFlagsBits = 1701736270;
    if (!v24.value._object)
      object = (void *)0xE400000000000000;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v19 = sub_1BC9D9A5C(0, v19[2] + 1, 1, v19);
    v12 = v71;
    v28 = v19[2];
    v27 = v19[3];
    if (v28 >= v27 >> 1)
      v19 = sub_1BC9D9A5C((_QWORD *)(v27 > 1), v28 + 1, 1, v19);
    v19[2] = v28 + 1;
    v29 = (double *)&v19[4 * v28];
    *((_QWORD *)v29 + 4) = countAndFlagsBits;
    *((_QWORD *)v29 + 5) = object;
    v29[6] = v21;
    v29[7] = v20;
    *(_QWORD *)&v77[0] = v76;
    BYTE8(v77[0]) = v75;
    v30 = (void *)sub_1BCAB4FC8();
    v31 = DiagramConfiguration.ValueFormatter.format(value:)((NSNumber)v30);
    v32 = v31.value._object;

    if (v31.value._object)
      v33 = v31.value._countAndFlagsBits;
    else
      v33 = 1701736270;
    if (!v31.value._object)
      v32 = (void *)0xE400000000000000;
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = (uint64_t)sub_1BC9D9A5C(0, v22[2] + 1, 1, v22);
      v22 = (_QWORD *)result;
    }
    v35 = v22[2];
    v34 = v22[3];
    if (v35 >= v34 >> 1)
    {
      result = (uint64_t)sub_1BC9D9A5C((_QWORD *)(v34 > 1), v35 + 1, 1, v22);
      v22 = (_QWORD *)result;
    }
    v22[2] = v35 + 1;
    v36 = (double *)&v22[4 * v35];
    *((_QWORD *)v36 + 4) = v33;
    *((_QWORD *)v36 + 5) = v32;
    v36[6] = v17;
    v36[7] = v16;
    v5 = v72;
    v6 = v73;
LABEL_36:
    v37 = dbl_1BCABE770[v5];
    v38 = dbl_1BCABE7A0[v6];
    v39 = v37 + v38;
    if (v12)
    {
      v40 = v37 + v38;
      v41 = v74;
      if (v74)
      {
LABEL_39:
        *(_QWORD *)a3 = v19;
        *(double *)(a3 + 8) = v40;
        *(_QWORD *)(a3 + 16) = v12;
        *(_QWORD *)(a3 + 24) = v22;
        *(double *)(a3 + 32) = v39;
        *(_QWORD *)(a3 + 40) = v41;
        return result;
      }
    }
    else
    {
      result = swift_bridgeObjectRelease();
      v19 = 0;
      v40 = 0.0;
      v41 = v74;
      if (v74)
        goto LABEL_39;
    }
    result = swift_bridgeObjectRelease();
    v41 = v74;
    v22 = 0;
    v39 = 0.0;
    goto LABEL_39;
  }
  v42 = (double *)(v11 + 56);
  v19 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v43 = v16;
  v44 = v17;
  v20 = v16;
  v21 = v17;
  v22 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  while (1)
  {
    v17 = *(v42 - 1);
    v16 = *v42;
    if (vabdd_f64(v17, v21) < 0.000001)
    {
      if (v16 > v20)
        v20 = *v42;
      if (v43 < v16)
        v16 = v43;
      v17 = v44;
      goto LABEL_48;
    }
    v45 = (void *)sub_1BCAB4FC8();
    if (!v75)
    {
      v48 = (id)HKNumberFormatterWithDecimalPrecision();
      if (v48)
      {
        v49 = v48;
        v47 = objc_msgSend(v48, sel_stringFromNumber_, v45);

        if (v47)
        {
LABEL_56:
          v50 = sub_1BCAB5F04();
          v52 = v51;

          goto LABEL_61;
        }
      }
      goto LABEL_60;
    }
    if (v76)
    {
      v46 = objc_msgSend((id)objc_opt_self(), sel_hk_percentNumberFormatter);
      v47 = objc_msgSend(v46, sel_stringFromNumber_, v45);

      if (v47)
        goto LABEL_56;
      goto LABEL_60;
    }
    result = (uint64_t)(id)HKIntegerFormatter();
    if (!result)
      break;
    v53 = (void *)result;
    v54 = objc_msgSend((id)result, sel_stringFromNumber_, v45);

    if (v54)
    {
      v50 = sub_1BCAB5F04();
      v52 = v55;

      goto LABEL_61;
    }
LABEL_60:

    v52 = 0xE400000000000000;
    v50 = 1701736270;
LABEL_61:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v19 = sub_1BC9D9A5C(0, v19[2] + 1, 1, v19);
    v57 = v19[2];
    v56 = v19[3];
    if (v57 >= v56 >> 1)
      v19 = sub_1BC9D9A5C((_QWORD *)(v56 > 1), v57 + 1, 1, v19);
    v19[2] = v57 + 1;
    v58 = (double *)&v19[4 * v57];
    *((_QWORD *)v58 + 4) = v50;
    *((_QWORD *)v58 + 5) = v52;
    v58[6] = v21;
    v58[7] = v20;
    v59 = (void *)sub_1BCAB4FC8();
    if (v75)
    {
      if (v76)
      {
        v60 = objc_msgSend((id)objc_opt_self(), sel_hk_percentNumberFormatter);
        v61 = objc_msgSend(v60, sel_stringFromNumber_, v59);

        if (!v61)
          goto LABEL_74;
        v62 = sub_1BCAB5F04();
        v64 = v63;

        goto LABEL_75;
      }
      result = (uint64_t)(id)HKIntegerFormatter();
      if (!result)
        goto LABEL_81;
    }
    else
    {
      result = (uint64_t)(id)HKNumberFormatterWithDecimalPrecision();
      if (!result)
        goto LABEL_74;
    }
    v65 = (void *)result;
    v66 = objc_msgSend((id)result, sel_stringFromNumber_, v59);

    if (!v66)
    {
LABEL_74:

      v64 = 0xE400000000000000;
      v62 = 1701736270;
      goto LABEL_75;
    }
    v62 = sub_1BCAB5F04();
    v64 = v67;

LABEL_75:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v22 = sub_1BC9D9A5C(0, v22[2] + 1, 1, v22);
    v69 = v22[2];
    v68 = v22[3];
    if (v69 >= v68 >> 1)
      v22 = sub_1BC9D9A5C((_QWORD *)(v68 > 1), v69 + 1, 1, v22);
    v22[2] = v69 + 1;
    v70 = (double *)&v22[4 * v69];
    *((_QWORD *)v70 + 4) = v62;
    *((_QWORD *)v70 + 5) = v64;
    v70[6] = v44;
    v70[7] = v43;
    v20 = v16;
    v21 = v17;
    v44 = v17;
LABEL_48:
    v42 += 2;
    v43 = v16;
    if (!--v18)
      goto LABEL_16;
  }
  __break(1u);
LABEL_81:
  __break(1u);
  return result;
}

unsigned __int8 *sub_1BC99F1D8(unsigned __int8 *result, uint64_t (*a2)(void))
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unsigned __int8 v18;

  v3 = *(_QWORD *)(v2 + 152);
  v4 = *(_QWORD *)(v3 + 16);
  if (v4)
  {
    v6 = *result;
    v7 = v3 + 32;
    result = (unsigned __int8 *)swift_bridgeObjectRetain();
    v8 = 0;
    v18 = v6;
    while (v8 < *(_QWORD *)(v3 + 16))
    {
      v9 = *(_QWORD *)(v7 + 8 * v8);
      if (*(_QWORD *)(v9 + 16))
      {
        swift_bridgeObjectRetain();
        v10 = sub_1BC9A2C2C(v6);
        if ((v11 & 1) != 0)
        {
          v12 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 40 * v10);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          result = (unsigned __int8 *)swift_bridgeObjectRelease();
          v13 = *(_QWORD *)(v12 + 16);
          if (v13)
          {
            v14 = v12 + 56;
            v15 = 1;
            while (1)
            {
              v17 = *(_QWORD *)(v12 + 16);
              if (v15 - 1 >= v17)
                break;
              if (v15 < v13 && v15 >= v17)
                goto LABEL_20;
              result = (unsigned __int8 *)a2();
              v16 = v15 + 1;
              v15 += 2;
              v14 += 32;
              if (v16 >= v13)
              {
                v6 = v18;
                v7 = v3 + 32;
                goto LABEL_4;
              }
            }
            __break(1u);
LABEL_20:
            __break(1u);
            break;
          }
        }
LABEL_4:
        result = (unsigned __int8 *)swift_bridgeObjectRelease();
      }
      if (++v8 == v4)
        return (unsigned __int8 *)swift_bridgeObjectRelease();
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_1BC99F368(unsigned __int8 *a1, void (*a2)(double *, double *, _QWORD *, double, double))
{
  uint64_t v2;
  unsigned __int8 v4;
  char v5;
  uint64_t v6;
  __int128 v7;
  unsigned __int8 v9;
  _OWORD v10[2];
  char v11;
  uint64_t v12;

  v4 = *a1;
  v5 = *(_BYTE *)(v2 + 144);
  v6 = *(_QWORD *)(v2 + 152);
  v7 = *(_OWORD *)(v2 + 128);
  v10[0] = *(_OWORD *)(v2 + 112);
  v10[1] = v7;
  v11 = v5;
  v12 = v6;
  v9 = v4;
  swift_bridgeObjectRetain();
  sub_1BCA1FF10((uint64_t)v10, &v9, a2);
  return swift_bridgeObjectRelease();
}

uint64_t DiagramDistribution.deinit()
{
  uint64_t v0;
  uint64_t v2[29];

  swift_bridgeObjectRelease();
  sub_1BC9A1020(v0 + 160, (uint64_t)v2, (uint64_t)&unk_1ED6C5460, (uint64_t)&type metadata for DiagramDistribution.DiagramDistributionMinMax, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))sub_1BC9A1210);
  sub_1BC9A0A44(v2);
  sub_1BC9A0A18(*(_QWORD *)(v0 + 392));
  sub_1BC9A0A18(*(_QWORD *)(v0 + 416));
  swift_release();
  return v0;
}

uint64_t DiagramDistribution.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v2[29];

  swift_bridgeObjectRelease();
  sub_1BC9A1020(v0 + 160, (uint64_t)v2, (uint64_t)&unk_1ED6C5460, (uint64_t)&type metadata for DiagramDistribution.DiagramDistributionMinMax, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))sub_1BC9A1210);
  sub_1BC9A0A44(v2);
  sub_1BC9A0A18(*(_QWORD *)(v0 + 392));
  sub_1BC9A0A18(*(_QWORD *)(v0 + 416));
  swift_release();
  return swift_deallocClassInstance();
}

double sub_1BC99F4F0()
{
  return sub_1BCA2F530();
}

double sub_1BC99F514()
{
  return sub_1BC99CC7C();
}

void (*sub_1BC99F534())(uint64_t a1, uint64_t a2, double a3, double a4)
{
  sub_1BC99CE98();
  return sub_1BC99F774;
}

uint64_t sub_1BC99F55C(uint64_t a1)
{
  uint64_t v1;
  double v2;
  uint64_t v3;
  double *v4;
  double v5;
  double v6;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return 0;
  v2 = *(double *)(a1 + 32);
  v3 = v1 - 1;
  if (v1 != 1)
  {
    v4 = (double *)(a1 + 40);
    do
    {
      v5 = *v4++;
      v6 = v5;
      if (v2 < v5)
        v2 = v6;
      --v3;
    }
    while (v3);
  }
  return *(_QWORD *)&v2;
}

unint64_t sub_1BC99F5A0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1ED6C68F0;
  if (!qword_1ED6C68F0)
  {
    type metadata accessor for Key(255);
    result = MEMORY[0x1BCCFBE84](&unk_1BCABE26C, v1);
    atomic_store(result, (unint64_t *)&qword_1ED6C68F0);
  }
  return result;
}

uint64_t sub_1BC99F5E8(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  _QWORD *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v12;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x1E0DEE9D8];
  if (v1)
  {
    sub_1BC9BAC40(0, v1, 0);
    v2 = v12;
    v4 = (_QWORD *)(a1 + 40);
    do
    {
      if (*v4)
      {
        swift_bridgeObjectRetain();
        v5 = (void *)sub_1BCAB5EE0();
        type metadata accessor for Key(0);
        sub_1BC99F5A0();
        v6 = (void *)sub_1BCAB5E68();
        objc_msgSend(v5, sel_sizeWithAttributes_, v6);
        v8 = v7;
        swift_bridgeObjectRelease();

      }
      else
      {
        swift_bridgeObjectRelease();
        v8 = 0;
      }
      v10 = *(_QWORD *)(v12 + 16);
      v9 = *(_QWORD *)(v12 + 24);
      if (v10 >= v9 >> 1)
        sub_1BC9BAC40(v9 > 1, v10 + 1, 1);
      *(_QWORD *)(v12 + 16) = v10 + 1;
      *(_QWORD *)(v12 + 8 * v10 + 32) = v8;
      v4 += 5;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t sub_1BC99F750()
{
  swift_release();
  return swift_deallocObject();
}

void sub_1BC99F774(uint64_t a1, uint64_t a2, double a3, double a4)
{
  uint64_t v4;

  sub_1BC99CEF0(a1, a2, *(_QWORD *)(v4 + 16), a3, a4);
}

uint64_t type metadata accessor for DiagramDistribution()
{
  return objc_opt_self();
}

BOOL sub_1BC99F79C@<W0>(uint64_t a1@<X0>, unsigned __int8 a2@<W1>, uint64_t a3@<X8>)
{
  CGFloat v6;
  CGFloat v7;
  CGFloat v8;
  CGFloat v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double x;
  double y;
  double width;
  double height;
  uint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  double *v21;
  uint64_t v22;
  double v23;
  double v24;
  CGFloat v25;
  CGFloat v26;
  uint64_t v27;
  _BOOL8 result;
  double v29;
  double v30;
  double v31;
  double v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  double v36;
  unsigned __int8 v37;
  CGFloat r2;
  __C::CGRect v39;
  CGRect v40;
  CGRect v41;
  CGRect v42;
  CGRect v43;
  CGRect v44;

  v6 = *MEMORY[0x1E0C9D628];
  v7 = *(double *)(MEMORY[0x1E0C9D628] + 8);
  v8 = *(double *)(MEMORY[0x1E0C9D628] + 16);
  v9 = *(double *)(MEMORY[0x1E0C9D628] + 24);
  v39 = DiagramData.diagramBounds(forceNonZeroSize:)(1);
  v10 = a1;
  r2 = v39.size.width;
  v11 = *(_QWORD *)(a1 + 40);
  v12 = *(_QWORD *)(v11 + 16);
  x = v6;
  y = v7;
  width = v8;
  height = v9;
  if (!v12)
    goto LABEL_14;
  v33 = v10;
  v34 = a3;
  v17 = (uint64_t *)(v11 + 32);
  sub_1BC9A113C(v10);
  x = v6;
  y = v7;
  width = v8;
  height = v9;
  v37 = a2;
  v35 = v8;
  v36 = v9;
  do
  {
    v18 = *v17;
    if (*(_QWORD *)(*v17 + 16))
    {
      swift_bridgeObjectRetain();
      v19 = sub_1BC9A2C2C(a2);
      if ((v20 & 1) == 0)
        goto LABEL_3;
      v21 = *(double **)(*(_QWORD *)(v18 + 56) + 40 * v19);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v22 = *((_QWORD *)v21 + 2);
      if (!v22)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_3:
        swift_bridgeObjectRelease();
        goto LABEL_4;
      }
      v23 = v7;
      v24 = v6;
      v25 = v21[4];
      v26 = v21[5];
      if (v22 == 1)
      {
        v27 = 0;
      }
      else
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v27 = (uint64_t)v21;
      }
      v43.size.height = 0.0;
      v40.origin.x = x;
      v40.origin.y = y;
      v40.size.width = width;
      v40.size.height = height;
      v43.origin.x = v25;
      v43.origin.y = v26;
      v43.size.width = r2;
      v41 = CGRectUnion(v40, v43);
      x = v41.origin.x;
      y = v41.origin.y;
      width = v41.size.width;
      height = v41.size.height;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1BC9A127C(v27);
      v6 = v24;
      v7 = v23;
      v8 = v35;
      v9 = v36;
      a2 = v37;
    }
LABEL_4:
    ++v17;
    --v12;
  }
  while (v12);
  sub_1BC9A1164(v33);
  a3 = v34;
LABEL_14:
  v42.origin.x = x;
  v42.origin.y = y;
  v42.size.width = width;
  v42.size.height = height;
  v44.origin.x = v6;
  v44.origin.y = v7;
  v44.size.width = v8;
  v44.size.height = v9;
  result = CGRectEqualToRect(v42, v44);
  v29 = 0.0;
  if (result)
    v30 = 0.0;
  else
    v30 = x;
  if (result)
    v31 = 0.0;
  else
    v31 = y;
  if (result)
    v32 = 0.0;
  else
    v32 = width;
  if (!result)
    v29 = height;
  *(double *)a3 = v30;
  *(double *)(a3 + 8) = v31;
  *(double *)(a3 + 16) = v32;
  *(double *)(a3 + 24) = v29;
  *(_BYTE *)(a3 + 32) = result;
  return result;
}

CGGradientRef sub_1BC99FA2C(uint64_t a1, void *a2)
{
  double v3;
  int v4;
  int v5;
  CGColorSpaceRef DeviceRGB;
  Class isa;
  id v8;
  id v9;
  uint64_t v10;
  double v11;
  double v12;
  id v13;
  id v14;
  id v15;
  CGColorSpace *v16;
  const __CFArray *v17;
  CGGradientRef v18;
  CGFloat v20[5];

  v3 = *(double *)(a1 + 8);
  v4 = *(unsigned __int8 *)(a1 + 24);
  v5 = *(unsigned __int8 *)(a1 + 40);
  DeviceRGB = CGColorSpaceCreateDeviceRGB();
  isa = DiagramConfiguration.Color.toColor()().super.isa;
  v8 = -[objc_class CGColor](isa, sel_CGColor);

  v9 = objc_msgSend(a2, sel_CGColor);
  sub_1BC9A1210(0, (unint64_t *)&qword_1ED6C6710, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_1BCABE690;
  *(_QWORD *)(v10 + 32) = v8;
  *(_QWORD *)(v10 + 40) = v9;
  *(_QWORD *)(v10 + 48) = v9;
  *(_QWORD *)(v10 + 56) = v8;
  *(_QWORD *)&v20[4] = v10;
  sub_1BCAB6024();
  v11 = 0.0;
  if (!v5)
    v11 = v3;
  v12 = 1.0;
  if (!v4)
    v12 = 1.0 - v3;
  v20[0] = 0.0;
  v20[1] = v11;
  v20[2] = v12;
  v20[3] = 1.0;
  type metadata accessor for CGColor(0);
  v13 = v8;
  v14 = v9;
  v15 = v13;
  v16 = DeviceRGB;
  v17 = (const __CFArray *)sub_1BCAB600C();
  swift_bridgeObjectRelease();
  v18 = CGGradientCreateWithColors(v16, v17, v20);

  return v18;
}

uint64_t sub_1BC99FBC8(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *(_QWORD *)(a2 + 40);
  v3 = *(_QWORD *)(v2 + 16);
  if (!v3)
    return 0;
  v4 = *a1;
  swift_bridgeObjectRetain();
  v5 = 0;
  for (i = 0; i != v3; ++i)
  {
    v7 = *(_QWORD *)(v2 + 8 * i + 32);
    if (*(_QWORD *)(v7 + 16))
    {
      swift_bridgeObjectRetain();
      v8 = sub_1BC9A2C2C(v4);
      if ((v9 & 1) != 0)
      {
        v10 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 40 * v8);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        if (v5)
        {
          v11 = swift_bridgeObjectRetain();
          sub_1BC9E3964(v11);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        else
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v5 = v10;
        }
      }
      else
      {
        swift_bridgeObjectRelease();
      }
    }
  }
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_1BC99FD00@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  __int128 *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  __int128 v13;
  uint64_t v14;
  uint64_t object;
  uint64_t v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double *v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  double *v25;
  uint64_t v26;
  double v27;
  void *v28;
  Swift::String_optional v29;
  void *v30;
  Swift::String_optional v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  double v62;
  double v63;
  uint64_t v64;
  uint64_t i;
  uint64_t v66;
  __int128 *v67;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  double *v74;
  double v75;
  double v76;
  double v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void *v95;
  uint64_t countAndFlagsBits;
  _QWORD v97[18];
  BOOL v98;
  uint64_t v99;
  uint64_t v100;
  BOOL v101;
  double v102;
  double v103;
  double v104;
  double v105;
  char v106;
  uint64_t v107;
  uint64_t v108;
  __int128 v109;
  __int128 v110;
  char v111;
  uint64_t v112;

  v6 = *(unsigned __int16 *)(a1 + 16) | (*(unsigned __int8 *)(a1 + 18) << 16);
  if ((v6 & 0x800000) != 0)
    goto LABEL_25;
  v7 = &v109;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 80);
  v10 = *(unsigned __int8 *)(a1 + 88);
  v11 = *((_QWORD *)a2 + 5);
  v12 = *((_BYTE *)a2 + 32);
  LOBYTE(v97[0]) = *(_BYTE *)(a1 + 7);
  v13 = a2[1];
  v109 = *a2;
  v110 = v13;
  v111 = v12;
  v112 = v11;
  v14 = sub_1BC99FBC8((unsigned __int8 *)v97, (uint64_t)&v109);
  if (!v14)
    goto LABEL_25;
  object = v14;
  v16 = *(_QWORD *)(v14 + 16);
  if (!v16)
    goto LABEL_24;
  v17 = *(double *)(v14 + 32);
  v18 = *(double *)(v14 + 40);
  if (v16 != 1)
  {
    v21 = (double *)(v14 + 56);
    v22 = 1;
    v23 = *(double *)(v14 + 40);
    do
    {
      if (*v21 < v23)
      {
        v17 = *(v21 - 1);
        v18 = *v21;
        v23 = *v21;
      }
      ++v22;
      v21 += 2;
    }
    while (v16 != v22);
    v24 = v14 + 32 + 16 * (v16 - 1);
    v19 = *(double *)v24;
    v20 = *(double *)(v24 + 8);
    v25 = (double *)(v14 + 16 * v16 + 8);
    v26 = v16 - 2;
    v27 = v20;
    while (v26 < v16)
    {
      if (v27 < *v25)
      {
        v19 = *(v25 - 1);
        v20 = *v25;
        v27 = *v25;
      }
      v25 -= 2;
      if (--v26 == -1)
        goto LABEL_15;
    }
    __break(1u);
    goto LABEL_28;
  }
  v19 = *(double *)(v14 + 32);
  v20 = *(double *)(v14 + 40);
LABEL_15:
  swift_bridgeObjectRelease();
  *(_QWORD *)&v109 = v9;
  BYTE8(v109) = v10;
  v28 = (void *)sub_1BCAB4FC8();
  v29 = DiagramConfiguration.ValueFormatter.format(value:)((NSNumber)v28);
  countAndFlagsBits = v29.value._countAndFlagsBits;
  object = (uint64_t)v29.value._object;

  if (v29.value._object)
  {
    *(_QWORD *)&v109 = v9;
    BYTE8(v109) = v10;
    v30 = (void *)sub_1BCAB4FC8();
    v31 = DiagramConfiguration.ValueFormatter.format(value:)((NSNumber)v30);

    v95 = v31.value._object;
    if (v31.value._object)
    {
      v89 = v8;
      v91 = BYTE1(v6);
      v82 = v6 & 0x10000;
      v109 = 0u;
      v110 = 0u;
      if (qword_1ED6C7070 != -1)
        swift_once();
      v32 = sub_1BC9A1984(0xD000000000000018, 0x80000001BCACEB40, 0, (uint64_t)&v109, 0, 0);
      v34 = v33;
      sub_1BC9A10A0((uint64_t)&v109);
      *(_QWORD *)&v109 = v32;
      *((_QWORD *)&v109 + 1) = v34;
      sub_1BC9A10F8();
      v35 = sub_1BCAB63C0();
      v37 = v36;
      swift_bridgeObjectRelease();
      v109 = 0u;
      v110 = 0u;
      v38 = sub_1BC9A1984(0xD000000000000018, 0x80000001BCACEB60, 0, (uint64_t)&v109, 0, 0);
      v40 = v39;
      sub_1BC9A10A0((uint64_t)&v109);
      *(_QWORD *)&v109 = v38;
      *((_QWORD *)&v109 + 1) = v40;
      v41 = sub_1BCAB63C0();
      v93 = v42;
      v94 = v41;
      swift_bridgeObjectRelease();
      LOBYTE(v109) = v6;
      DiagramConfiguration.TextAttributes.toTextAttributes()();
      v44 = v43;
      LOBYTE(v109) = v91;
      DiagramConfiguration.TextAttributes.toTextAttributes()();
      v92 = v45;
      v90 = v35;
      v88 = v37;
      v46 = (void *)sub_1BCAB5EE0();
      type metadata accessor for Key(0);
      sub_1BC99F5A0();
      v47 = (void *)sub_1BCAB5E68();
      objc_msgSend(v46, sel_sizeWithAttributes_, v47);
      v85 = v49;
      v86 = v48;

      v50 = (void *)sub_1BCAB5EE0();
      v87 = v44;
      v6 = v92;
      v51 = (void *)sub_1BCAB5E68();
      objc_msgSend(v50, sel_sizeWithAttributes_, v51);
      v83 = v53;
      v84 = v52;

      v54 = (void *)sub_1BCAB5EE0();
      v55 = (void *)sub_1BCAB5E68();
      objc_msgSend(v54, sel_sizeWithAttributes_, v55);
      v80 = v57;
      v81 = v56;

      v10 = v31.value._countAndFlagsBits;
      v58 = (void *)sub_1BCAB5EE0();
      v59 = (void *)sub_1BCAB5E68();
      objc_msgSend(v58, sel_sizeWithAttributes_, v59);
      v3 = v60;
      v4 = v61;

      v62 = v20;
      v63 = v18;
      BYTE2(v9) = BYTE2(v82);
      v8 = v89;
      if (!v82)
        goto LABEL_47;
      v7 = (__int128 *)MEMORY[0x1E0DEE9D8];
      *(_QWORD *)&v109 = MEMORY[0x1E0DEE9D8];
      v64 = *(_QWORD *)(v11 + 16);
      if (v64)
      {
        swift_bridgeObjectRetain_n();
        for (i = 0; i != v64; ++i)
        {
          v66 = swift_bridgeObjectRetain();
          sub_1BC9E3AA8(v66);
        }
        swift_bridgeObjectRelease_n();
        v67 = (__int128 *)v109;
        v6 = v92;
LABEL_29:
        *(_QWORD *)&v109 = v7;
        v69 = *((_QWORD *)v67 + 2);
        if (v69)
        {
          swift_bridgeObjectRetain();
          v70 = 32;
          do
          {
            v71 = swift_bridgeObjectRetain();
            sub_1BC9E3964(v71);
            v70 += 40;
            --v69;
          }
          while (v69);
          swift_bridgeObjectRelease_n();
          v72 = v109;
        }
        else
        {
          swift_bridgeObjectRelease();
          v72 = MEMORY[0x1E0DEE9D8];
        }
        v73 = *(_QWORD *)(v72 + 16);
        v62 = v20;
        v63 = v18;
        if (v73)
        {
          v74 = (double *)(v72 + 40);
          v62 = v20;
          v63 = v18;
          do
          {
            v75 = *(v74 - 1);
            v76 = *v74;
            if (v63 >= *v74)
              v77 = *v74;
            else
              v77 = v63;
            if (v75 == v17)
              v63 = v77;
            if (v76 <= v62)
              v76 = v62;
            if (v75 == v19)
              v62 = v76;
            v74 += 2;
            --v73;
          }
          while (v73);
        }
        swift_bridgeObjectRelease();
LABEL_47:
        v78 = v8 << 63 >> 63;
        v97[0] = v90;
        v97[1] = v88;
        v79 = v8 << 62 >> 63;
        v97[2] = v94;
        v97[3] = v93;
        v97[4] = countAndFlagsBits;
        v97[5] = object;
        v97[6] = v10;
        v97[7] = v95;
        v97[8] = v86;
        v97[9] = v85;
        v97[10] = v84;
        v97[11] = v83;
        v97[12] = v81;
        v97[13] = v80;
        v97[14] = v3;
        v97[15] = v4;
        v97[16] = v78 & *(_QWORD *)&v17;
        v97[17] = v78 & *(_QWORD *)&v63;
        v98 = (v8 & 1) == 0;
        v99 = v79 & *(_QWORD *)&v19;
        v100 = v79 & *(_QWORD *)&v62;
        v101 = (v8 & 2) == 0;
        v102 = v17;
        v103 = v18;
        v104 = v19;
        v105 = v20;
        v106 = BYTE2(v9);
        v107 = v87;
        v108 = v6;
        nullsub_1(v97);
        goto LABEL_26;
      }
LABEL_28:
      v67 = v7;
      goto LABEL_29;
    }
LABEL_24:
    swift_bridgeObjectRelease();
  }
LABEL_25:
  sub_1BC9A1078((uint64_t)v97);
LABEL_26:
  sub_1BC9A1020((uint64_t)v97, (uint64_t)&v109, (uint64_t)&unk_1ED6C5460, (uint64_t)&type metadata for DiagramDistribution.DiagramDistributionMinMax, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))sub_1BC9A1210);
  return sub_1BC9A1020((uint64_t)&v109, a3, (uint64_t)&unk_1ED6C5460, (uint64_t)&type metadata for DiagramDistribution.DiagramDistributionMinMax, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))sub_1BC9A1210);
}

uint64_t sub_1BC9A03A8@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X4>, double *a6@<X8>)
{
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  double v16;
  int v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  uint64_t v24;
  void *v25;
  void *v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  void *v35;
  uint64_t v36;
  void *v37;
  double v38;
  double v39;
  double v40;
  uint64_t v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  int v50;
  uint64_t result;
  double v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  double v64;
  double v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  double v72;
  double v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  double v77;
  double v78;
  double v79;
  double v80;
  _OWORD v81[4];
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  uint64_t v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  _OWORD v102[5];
  uint64_t v103;
  _BYTE v104[24];
  _BYTE v105[24];
  _BYTE v106[24];
  _BYTE v107[40];

  v7 = a1[5];
  v8 = a1[6];
  v9 = *(_QWORD *)(a1 + 65);
  v62 = *(_DWORD *)(a1 + 73);
  v10 = *a3;
  v11 = a3[1];
  v12 = a3[2];
  v13 = *a4;
  v61 = a4[1];
  v60 = a4[2];
  v71 = *a5;
  v70 = a5[1];
  v68 = a5[2];
  v69 = a5[3];
  v14 = 8 * a1[79];
  v15 = *(double *)((char *)&unk_1BCABE7B8 + v14);
  v66 = *((_BYTE *)a5 + 32);
  v67 = a5[5];
  v72 = *(double *)((char *)&unk_1BCABE7D8 + v14);
  v73 = dbl_1BCABE770[*a1];
  v16 = dbl_1BCABE7A0[a1[1]];
  sub_1BC9A1020(a2, (uint64_t)v81, (uint64_t)&unk_1ED6C5460, (uint64_t)&type metadata for DiagramDistribution.DiagramDistributionMinMax, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))sub_1BC9A1210);
  v17 = sub_1BC9A0FA0((uint64_t)v81);
  v18 = 0.0;
  v19 = 0.0;
  v20 = 0.0;
  if (v17 != 1)
  {
    v102[3] = v90;
    v102[4] = v91;
    v103 = v92;
    v101 = v86;
    v102[0] = v87;
    v102[1] = v88;
    v102[2] = v89;
    v97 = v82;
    v98 = v83;
    v99 = v84;
    v100 = v85;
    v93 = v81[0];
    v94 = v81[1];
    v95 = v81[2];
    v96 = v81[3];
    v21 = v16 + *((double *)&v82 + 1) + *((double *)&v84 + 1) + 2.0;
    sub_1BC9A1020((uint64_t)&v101, (uint64_t)v105, (uint64_t)&unk_1ED6C5B18, (uint64_t)type metadata accessor for CGPoint, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))sub_1BC998AB0);
    sub_1BC9A1020((uint64_t)v105, (uint64_t)v106, (uint64_t)&unk_1ED6C5B18, (uint64_t)type metadata accessor for CGPoint, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))sub_1BC998AB0);
    if (v106[16])
      v19 = 0.0;
    else
      v19 = v21;
    sub_1BC9A1020((uint64_t)v102 + 8, (uint64_t)v104, (uint64_t)&unk_1ED6C5B18, (uint64_t)type metadata accessor for CGPoint, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))sub_1BC998AB0);
    sub_1BC9A1020((uint64_t)v104, (uint64_t)v107, (uint64_t)&unk_1ED6C5B18, (uint64_t)type metadata accessor for CGPoint, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))sub_1BC998AB0);
    if (v107[16])
      v20 = 0.0;
    else
      v20 = v21;
  }
  v65 = v20;
  v22 = 0.0;
  v23 = 0.0;
  if (v10)
  {
    if (*(_QWORD *)(v10 + 16))
    {
      v24 = v13;
      swift_bridgeObjectRetain();
      v25 = (void *)sub_1BCAB5EE0();
      swift_bridgeObjectRelease();
      type metadata accessor for Key(0);
      sub_1BC99F5A0();
      v26 = (void *)sub_1BCAB5E68();
      objc_msgSend(v25, sel_sizeWithAttributes_, v26);
      v23 = v27;

      v13 = v24;
    }
    v23 = v16 + v23;
    v74 = v10;
    v75 = v11;
    v76 = v12;
    DiagramPointAnnotations.horizontalInsets()();
    v22 = v28;
    v18 = v29;
  }
  v64 = v23;
  v59 = v18;
  v30 = v73 + v15;
  v31 = 0.0;
  v32 = 0.0;
  v33 = 0.0;
  v34 = 0.0;
  if (v13)
  {
    if (*(_QWORD *)(v13 + 16))
    {
      swift_bridgeObjectRetain();
      v35 = (void *)sub_1BCAB5EE0();
      swift_bridgeObjectRelease();
      type metadata accessor for Key(0);
      sub_1BC99F5A0();
      v36 = v60;
      v37 = (void *)sub_1BCAB5E68();
      objc_msgSend(v35, sel_sizeWithAttributes_, v37);
      v32 = v38;

    }
    else
    {
      v36 = v60;
    }
    v34 = v16 + v32;
    v74 = v13;
    v75 = v61;
    v76 = v36;
    DiagramPointAnnotations.horizontalInsets()();
    v33 = v39;
    v32 = v40;
  }
  v41 = v9 & 0xFE00000000 | 0x100000000;
  v42 = 3.5;
  if ((v9 & 0xFF0000000000) != 0)
    v42 = 0.0;
  v43 = v42 + v73 + v19 + v34 + 2.0;
  if (v41 == 0x300000000)
    v44 = v30 + v19 + v34;
  else
    v44 = v30;
  if (v41 == 0x300000000)
    v45 = 0.0;
  else
    v45 = v43;
  sub_1BC9A1020(a2, (uint64_t)&v74, (uint64_t)&unk_1ED6C5460, (uint64_t)&type metadata for DiagramDistribution.DiagramDistributionMinMax, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))sub_1BC9A1210);
  if (sub_1BC9A0FA0((uint64_t)&v74) != 1)
  {
    v46 = v77;
    if (v77 <= v78)
      v46 = v78;
    if (v46 <= v79)
      v46 = v79;
    if (v46 <= v80)
      v46 = v80;
    v31 = v46 * 0.5 + 2.0;
  }
  sub_1BC998AB0(0, &qword_1ED6C5B60, (uint64_t (*)(uint64_t))sub_1BC9A0FB8, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  v47 = swift_allocObject();
  *(_OWORD *)(v47 + 16) = xmmword_1BCABE680;
  *(_QWORD *)(v47 + 32) = v71;
  *(_QWORD *)(v47 + 40) = v70;
  *(_QWORD *)(v47 + 48) = v68;
  *(_QWORD *)(v47 + 56) = v69;
  *(_BYTE *)(v47 + 64) = v66;
  *(_QWORD *)(v47 + 72) = v67;
  *(_BYTE *)(v47 + 80) = v7;
  swift_bridgeObjectRetain();
  *(double *)&v48 = COERCE_DOUBLE(sub_1BCA37358(v47, v8));
  v50 = v49 & 1 | v8;
  swift_setDeallocating();
  sub_1BC9A0FB8();
  swift_arrayDestroy();
  result = swift_deallocClassInstance();
  if ((v9 & 0xFF00000000) == 0x300000000 || (v62 & 0xFF000000) == 0x2000000)
  {
    v55 = *(double *)&v48;
    if (v50)
      v55 = -0.0;
    v52 = v72;
    v56 = v72 + v55;
    if (v33 > v22)
      v57 = v33;
    else
      v57 = v22;
    v54 = v57 + v31 + v56;
    v58 = v59;
    if (v32 > v59)
      v58 = v32;
    v31 = v58 + v31;
    v53 = 0.0;
    goto LABEL_45;
  }
  v52 = v72;
  if (v50)
  {
    v53 = v73 + v31 + 15.0;
    v54 = v72;
LABEL_45:
    *a6 = v30 + v65 + v64;
    a6[1] = v54;
    a6[2] = v44;
    a6[3] = v52 + v31;
    a6[4] = v53;
    a6[5] = v45;
    return result;
  }
  result = sub_1BCAB65C4();
  __break(1u);
  return result;
}

uint64_t sub_1BC9A09EC(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_1BC9A0A18(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t *sub_1BC9A0A44(uint64_t *a1)
{
  sub_1BC9A0AB4(*a1, a1[1]);
  return a1;
}

uint64_t sub_1BC9A0AB4(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t method lookup function for DiagramDistribution()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of DiagramDistribution.modelSpace.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of DiagramDistribution.screenInsets.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t dispatch thunk of DiagramDistribution.drawingBlock.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t dispatch thunk of DiagramDistribution.__allocating_init(distributionConfiguration:distributionData:hbxViewControllerFactory:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 152))();
}

uint64_t destroy for DiagramDistribution.DiagramDistributionMinMax()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for DiagramDistribution.DiagramDistributionMinMax(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  v6 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v6;
  v7 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v7;
  v8 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v8;
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  v9 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 192) = v9;
  *(_BYTE *)(a1 + 208) = *(_BYTE *)(a2 + 208);
  v10 = *(_QWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 224) = v10;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for DiagramDistribution.DiagramDistributionMinMax(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  v4 = *(_OWORD *)(a2 + 128);
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = v4;
  v5 = *(_OWORD *)(a2 + 152);
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  *(_OWORD *)(a1 + 152) = v5;
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  *(_BYTE *)(a1 + 208) = *(_BYTE *)(a2 + 208);
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy232_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __n128 result;
  __int128 v11;
  __int128 v12;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  v4 = a2[3];
  v5 = a2[4];
  v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  v7 = a2[7];
  v8 = a2[8];
  v9 = a2[10];
  *(_OWORD *)(a1 + 144) = a2[9];
  *(_OWORD *)(a1 + 160) = v9;
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  result = (__n128)a2[11];
  v11 = a2[12];
  v12 = a2[13];
  *(_QWORD *)(a1 + 224) = *((_QWORD *)a2 + 28);
  *(_OWORD *)(a1 + 192) = v11;
  *(_OWORD *)(a1 + 208) = v12;
  *(__n128 *)(a1 + 176) = result;
  return result;
}

uint64_t assignWithTake for DiagramDistribution.DiagramDistributionMinMax(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v7;
  swift_bridgeObjectRelease();
  v8 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v8;
  v9 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v9;
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  v10 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 192) = v10;
  *(_BYTE *)(a1 + 208) = *(_BYTE *)(a2 + 208);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for DiagramDistribution.DiagramDistributionMinMax(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 232))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DiagramDistribution.DiagramDistributionMinMax(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 232) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 232) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for DiagramDistribution.DiagramDistributionMinMax()
{
  return &type metadata for DiagramDistribution.DiagramDistributionMinMax;
}

uint64_t sub_1BC9A0FA0(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

void sub_1BC9A0FB8()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_1ED6C5300)
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1ED6C5300);
  }
}

uint64_t sub_1BC9A1020(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD, uint64_t, uint64_t, _QWORD))
{
  uint64_t v7;

  v7 = a5(0, a3, a4, MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a2, a1, v7);
  return a2;
}

double sub_1BC9A1078(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 224) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t sub_1BC9A10A0(uint64_t a1)
{
  uint64_t v2;

  sub_1BC9A1210(0, (unint64_t *)&qword_1ED6C7510, MEMORY[0x1E0DEE9B8] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1BC9A10F8()
{
  unint64_t result;

  result = qword_1ED6C5AE0;
  if (!qword_1ED6C5AE0)
  {
    result = MEMORY[0x1BCCFBE84](MEMORY[0x1E0DEA9B8], MEMORY[0x1E0DEA968]);
    atomic_store(result, (unint64_t *)&qword_1ED6C5AE0);
  }
  return result;
}

uint64_t sub_1BC9A113C(uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1BC9A1164(uint64_t a1)
{
  swift_bridgeObjectRelease();
  return a1;
}

void sub_1BC9A1190(double a1, double a2, CGFloat a3, CGFloat a4)
{
  uint64_t v4;

  sub_1BC99E210(*(CGFloat **)(v4 + 16), a1, a2, a3, a4, *(CGFloat *)(v4 + 40), *(_QWORD *)(v4 + 24), *(CGContext **)(v4 + 32), *(void **)(v4 + 48));
}

uint64_t sub_1BC9A11B4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v3;

  return sub_1BC99E30C(a1, a2, a3, v3[2], v3[3], v3[6], v3[7]);
}

id *sub_1BC9A11C4(id *a1)
{

  return a1;
}

void sub_1BC9A11EC(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4)
{
  uint64_t v4;

  sub_1BC99E09C(*(CGFloat **)(v4 + 16), *(CGContext **)(v4 + 24), a1, a2, a3, a4, *(CGFloat *)(v4 + 48), *(CGFloat *)(v4 + 56), *(_QWORD *)(v4 + 32), *(CGGradient **)(v4 + 40));
}

void sub_1BC9A11FC(uint64_t a1, uint64_t a2, uint64_t a3, double a4, CGFloat a5)
{
  uint64_t v5;

  sub_1BC99DE80(a4, a5, a1, a2, a3, *(CGFloat **)(v5 + 16), *(_QWORD *)(v5 + 40), *(CGContext **)(v5 + 48), *(void **)(v5 + 56));
}

void sub_1BC9A1210(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(_QWORD, uint64_t))
{
  unint64_t v5;
  uint64_t v6;

  if (!*a2)
  {
    v5 = a4(0, a3);
    if (!v6)
      atomic_store(v5, a2);
  }
}

id *sub_1BC9A1254(id *a1)
{
  id v2;

  v2 = *a1;
  return a1;
}

uint64_t sub_1BC9A127C(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t sub_1BC9A12B4()
{
  _QWORD *v0;
  unint64_t result;

  type metadata accessor for Localization();
  v0 = (_QWORD *)swift_allocObject();
  result = sub_1BCA926C8(MEMORY[0x1E0DEE9D8]);
  v0[2] = result;
  v0[3] = 0x617A696C61636F4CLL;
  v0[4] = 0xEB00000000656C62;
  qword_1ED6C6720 = (uint64_t)v0;
  return result;
}

uint64_t sub_1BC9A1318(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  if (qword_1ED6C7070 != -1)
    swift_once();
  return sub_1BC9A1984(a1, a2, a3, a4, 0, 0);
}

uint64_t sub_1BC9A139C(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (qword_1ED6C7070 != -1)
    swift_once();
  return sub_1BC9A1984(a1, a2, a3, a4, a5, a6);
}

uint64_t sub_1BC9A1430(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (qword_1ED6C7070 != -1)
    swift_once();
  return sub_1BC9A1BB8(a1, a2, a3, a4, a5, a6, a7);
}

void sub_1BC9A14CC(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (qword_1ED6C7070 != -1)
    swift_once();
  sub_1BC9A15C8(a1, a2, a3);
}

id sub_1BC9A1538()
{
  uint64_t ObjCClassFromMetadata;
  id result;

  type metadata accessor for Localization();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  result = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
  qword_1ED6C6718 = (uint64_t)result;
  return result;
}

id static Localization.defaultLocalizationBundle.getter()
{
  if (qword_1ED6C70D8 != -1)
    swift_once();
  return (id)qword_1ED6C6718;
}

void sub_1BC9A15C8(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t ObjCClassFromMetadata;
  id v12;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  id v17;
  NSObject *v18;
  os_log_type_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  _QWORD *v24;
  os_log_t v25;
  uint64_t v26;
  os_log_t v27;
  _QWORD *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32[3];

  v4 = v3;
  v7 = sub_1BCAB5514();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  v12 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
  swift_beginAccess();
  swift_bridgeObjectRetain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v31 = *(_QWORD *)(v4 + 16);
  *(_QWORD *)(v4 + 16) = 0x8000000000000000;
  v14 = sub_1BC9A381C(a2, a3, v12, isUniquelyReferenced_nonNull_native);
  v16 = v15;
  *(_QWORD *)(v4 + 16) = v31;
  swift_bridgeObjectRelease();
  swift_endAccess();
  if (!v16)
    goto LABEL_6;
  if (v14 == a2 && v16 == a3 || (sub_1BCAB67C8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
LABEL_6:

    return;
  }
  sub_1BCAB54F0();
  swift_bridgeObjectRetain_n();
  v17 = v12;
  swift_bridgeObjectRetain();
  v18 = sub_1BCAB54FC();
  v19 = sub_1BCAB618C();
  v20 = v19;
  if (os_log_type_enabled(v18, v19))
  {
    v21 = swift_slowAlloc();
    v29 = v20;
    v22 = v21;
    v28 = (_QWORD *)swift_slowAlloc();
    v30 = swift_slowAlloc();
    v32[0] = v30;
    *(_DWORD *)v22 = 136446722;
    v27 = v18;
    swift_bridgeObjectRetain();
    v31 = sub_1BC99BD4C(v14, v16, v32);
    sub_1BCAB63A8();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v22 + 12) = 2082;
    swift_bridgeObjectRetain();
    v31 = sub_1BC99BD4C(a2, a3, v32);
    sub_1BCAB63A8();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v22 + 22) = 2114;
    v31 = (uint64_t)v17;
    v23 = v17;
    sub_1BCAB63A8();
    v24 = v28;
    *v28 = v17;

    v25 = v27;
    _os_log_impl(&dword_1BC989000, v27, (os_log_type_t)v29, "Localization: replacing previously registered localization file %{public}s with %{public}s for bundle %{public}@", (uint8_t *)v22, 0x20u);
    sub_1BC9A61D8(0, &qword_1ED6C4B90, &qword_1ED6C7100, 0x1E0DE7910, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    swift_arrayDestroy();
    MEMORY[0x1BCCFBF5C](v24, -1, -1);
    v26 = v30;
    swift_arrayDestroy();
    MEMORY[0x1BCCFBF5C](v26, -1, -1);
    MEMORY[0x1BCCFBF5C](v22, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();

  }
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t sub_1BC9A1984(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  _QWORD v24[3];
  uint64_t v25;

  v12 = sub_1BCAB5514();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_1BC9A1E14(a1, a2, a4, a5, a6);
  v18 = HIBYTE(v17) & 0xF;
  if ((v17 & 0x2000000000000000) == 0)
    v18 = v16 & 0xFFFFFFFFFFFFLL;
  if (v18)
  {
    a1 = sub_1BC9A6DA8(v16, v17, a3);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    sub_1BCAB54F0();
    swift_bridgeObjectRetain_n();
    v19 = sub_1BCAB54FC();
    v20 = sub_1BCAB618C();
    if (os_log_type_enabled(v19, v20))
    {
      v21 = (uint8_t *)swift_slowAlloc();
      v22 = swift_slowAlloc();
      v25 = v22;
      *(_DWORD *)v21 = 136446210;
      v24[1] = v21 + 4;
      swift_bridgeObjectRetain();
      v24[2] = sub_1BC99BD4C(a1, a2, &v25);
      sub_1BCAB63A8();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1BC989000, v19, v20, "Localization: no localization found for '%{public}s'", v21, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BCCFBF5C](v22, -1, -1);
      MEMORY[0x1BCCFBF5C](v21, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_1BC9A1BB8(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;

  v13 = sub_1BCAB5514();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13);
  v28 = (char *)&v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_1BC9A1E14(a1, a2, a5, a6, a7);
  v18 = HIBYTE(v17) & 0xF;
  if ((v17 & 0x2000000000000000) == 0)
    v18 = v16 & 0xFFFFFFFFFFFFLL;
  if (v18)
  {
    v19 = sub_1BCAB5F10();
    v21 = v20;
    swift_bridgeObjectRelease();
    a1 = sub_1BC9A6DA8(v19, v21, a4);
    swift_bridgeObjectRelease();
  }
  else
  {
    v27 = v13;
    swift_bridgeObjectRelease();
    sub_1BCAB54D8();
    swift_bridgeObjectRetain_n();
    v22 = sub_1BCAB54FC();
    v23 = sub_1BCAB61A4();
    if (os_log_type_enabled(v22, v23))
    {
      v24 = (uint8_t *)swift_slowAlloc();
      v25 = swift_slowAlloc();
      v30 = v25;
      *(_DWORD *)v24 = 136446210;
      swift_bridgeObjectRetain();
      v29 = sub_1BC99BD4C(a1, a2, &v30);
      sub_1BCAB63A8();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1BC989000, v22, v23, "Localization: no localization found for '%{public}s'", v24, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BCCFBF5C](v25, -1, -1);
      MEMORY[0x1BCCFBF5C](v24, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    (*(void (**)(char *, uint64_t))(v14 + 8))(v28, v27);
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_1BC9A1E14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t DynamicType;
  uint64_t v13;
  uint64_t ObjCClassFromMetadata;
  id v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  char v20;
  NSObject *v21;
  NSObject *v22;
  os_log_type_t v23;
  int v24;
  uint64_t v25;
  uint8_t *v26;
  NSObject *v27;
  uint8_t *v28;
  _QWORD *v29;
  _QWORD v31[3];
  uint8_t *v32;
  int v33;
  _QWORD *v34;
  NSObject *v35;
  NSObject *v36;
  __int128 v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;

  v8 = sub_1BCAB5514();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BC9A612C(a3, (uint64_t)&v37);
  if (!v38)
  {
    sub_1BC9A10A0((uint64_t)&v37);
    if (a5)
      goto LABEL_13;
    goto LABEL_12;
  }
  sub_1BC9A61C8(&v37, &v39);
  __swift_project_boxed_opaque_existential_1(&v39, v40);
  DynamicType = swift_getDynamicType();
  if (swift_isClassType())
    v13 = DynamicType;
  else
    v13 = 0;
  if (v13)
  {
    ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    v15 = objc_msgSend((id)objc_opt_self(), sel_bundleForClass_, ObjCClassFromMetadata);
    if (v15)
    {
      v16 = v15;
      if (a5)
      {
        v17 = sub_1BCAB4CF8();

LABEL_24:
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v39);
        return v17;
      }
      swift_beginAccess();
      if (*(_QWORD *)(*(_QWORD *)(v5 + 16) + 16))
      {
        v19 = v16;
        swift_bridgeObjectRetain();
        sub_1BC9A2D70((uint64_t)v19);
        if ((v20 & 1) != 0)
        {
          swift_bridgeObjectRetain();

          swift_bridgeObjectRelease();
          v17 = sub_1BCAB4CF8();

          swift_bridgeObjectRelease();
          goto LABEL_24;
        }

        swift_bridgeObjectRelease();
      }
      sub_1BCAB54F0();
      v21 = v16;
      v22 = sub_1BCAB54FC();
      v23 = sub_1BCAB618C();
      v24 = v23;
      if (os_log_type_enabled(v22, v23))
      {
        v35 = v21;
        v25 = swift_slowAlloc();
        v33 = v24;
        v26 = (uint8_t *)v25;
        v34 = (_QWORD *)swift_slowAlloc();
        v32 = v26;
        *(_DWORD *)v26 = 138543362;
        v36 = v35;
        v31[1] = &v37;
        v31[2] = v26 + 4;
        v27 = v35;
        sub_1BCAB63A8();
        *v34 = v16;

        v21 = v35;
        v28 = v32;
        _os_log_impl(&dword_1BC989000, v22, (os_log_type_t)v33, "Localization: no localization file registered for %{public}@", v32, 0xCu);
        sub_1BC9A61D8(0, &qword_1ED6C4B90, &qword_1ED6C7100, 0x1E0DE7910, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
        v29 = v34;
        swift_arrayDestroy();
        MEMORY[0x1BCCFBF5C](v29, -1, -1);
        MEMORY[0x1BCCFBF5C](v28, -1, -1);
      }
      else
      {

        v22 = v21;
      }

      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
      v17 = sub_1BCAB4CF8();

      goto LABEL_24;
    }
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v39);
  if (!a5)
LABEL_12:
    swift_bridgeObjectRetain();
LABEL_13:
  v18 = qword_1ED6C70D8;
  swift_bridgeObjectRetain();
  if (v18 != -1)
    swift_once();
  v17 = sub_1BCAB4CF8();
  swift_bridgeObjectRelease();
  return v17;
}

unint64_t sub_1BC9A2270(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char v10;

  v4 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0)
    v4 = a3 & 0xFFFFFFFFFFFFLL;
  if (!v4)
    return 0;
  v7 = 4 * v4;
  v8 = 15;
  while (sub_1BCAB5FA0() != a1 || v9 != a2)
  {
    v10 = sub_1BCAB67C8();
    swift_bridgeObjectRelease();
    if ((v10 & 1) != 0)
      return v8;
    v8 = sub_1BCAB5F58();
    if (v7 == v8 >> 14)
      return 0;
  }
  swift_bridgeObjectRelease();
  return v8;
}

unint64_t sub_1BC9A235C(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v4;
  uint64_t v8;
  char v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v14;

  v14 = a4 >> 14;
  if (a4 >> 14 == a3 >> 14)
    return 0;
  if (sub_1BCAB639C() == a1 && v8 == a2)
  {
    v4 = a3;
LABEL_6:
    swift_bridgeObjectRelease();
  }
  else
  {
    v9 = sub_1BCAB67C8();
    swift_bridgeObjectRelease();
    if ((v9 & 1) != 0)
    {
      return a3;
    }
    else
    {
      while (1)
      {
        v11 = sub_1BCAB6390();
        if (v11 >> 14 == v14)
          return 0;
        v4 = v11;
        if (sub_1BCAB639C() == a1 && v12 == a2)
          goto LABEL_6;
        v10 = sub_1BCAB67C8();
        swift_bridgeObjectRelease();
        if ((v10 & 1) != 0)
          return v4;
      }
    }
  }
  return v4;
}

unint64_t sub_1BC9A24D4(unint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3;

  v3 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0)
    v3 = a2 & 0xFFFFFFFFFFFFLL;
  if (4 * v3 >= result >> 14)
    return sub_1BCAB5FAC();
  __break(1u);
  return result;
}

uint64_t Localization.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t Localization.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t static Localization.localize(_:replacements:mySelf:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  id v30;
  void *v31;
  id v32;
  char *v33;
  void *v34;
  uint64_t v35;
  id v36;
  unint64_t v37;
  char isUniquelyReferenced_nonNull_native;
  char v39;
  unint64_t v40;
  uint64_t v41;
  _BOOL8 v42;
  uint64_t v43;
  char v44;
  unint64_t v45;
  char v46;
  _QWORD *v47;
  uint64_t *v48;
  uint64_t v49;
  BOOL v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t result;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  id v59;
  uint64_t v60;
  id v61;
  uint64_t v62;
  int64_t v63;
  uint64_t v64;
  int64_t v65;
  uint64_t v66;
  _QWORD *v67;

  v60 = a4;
  v54 = a1;
  v55 = a2;
  sub_1BC9A61D8(0, &qword_1EF477F20, &qword_1EF477F28, 0x1E0CB3A50, MEMORY[0x1E0CAE328]);
  v62 = v5;
  v58 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v57 = (char *)&v54 - v6;
  v59 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB3760]), sel_init);
  if (a3)
  {
    v7 = a3 + 64;
    v8 = 1 << *(_BYTE *)(a3 + 32);
    v9 = -1;
    if (v8 < 64)
      v9 = ~(-1 << v8);
    v10 = v9 & *(_QWORD *)(a3 + 64);
    v63 = (unint64_t)(v8 + 63) >> 6;
    swift_bridgeObjectRetain();
    v11 = 0;
    v12 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    v56 = a3 + 64;
    while (1)
    {
      if (v10)
      {
        v64 = (v10 - 1) & v10;
        v65 = v11;
        v14 = __clz(__rbit64(v10)) | (v11 << 6);
      }
      else
      {
        v15 = v11 + 1;
        if (__OFADD__(v11, 1))
          goto LABEL_48;
        if (v15 >= v63)
        {
LABEL_42:
          swift_release();
          goto LABEL_44;
        }
        v16 = *(_QWORD *)(v7 + 8 * v15);
        v17 = v11 + 1;
        if (!v16)
        {
          v17 = v11 + 2;
          if (v11 + 2 >= v63)
            goto LABEL_42;
          v16 = *(_QWORD *)(v7 + 8 * v17);
          if (!v16)
          {
            v17 = v11 + 3;
            if (v11 + 3 >= v63)
              goto LABEL_42;
            v16 = *(_QWORD *)(v7 + 8 * v17);
            if (!v16)
            {
              v18 = v11 + 4;
              if (v11 + 4 >= v63)
                goto LABEL_42;
              v16 = *(_QWORD *)(v7 + 8 * v18);
              if (!v16)
              {
                while (1)
                {
                  v17 = v18 + 1;
                  if (__OFADD__(v18, 1))
                    goto LABEL_49;
                  if (v17 >= v63)
                    goto LABEL_42;
                  v16 = *(_QWORD *)(v7 + 8 * v17);
                  ++v18;
                  if (v16)
                    goto LABEL_22;
                }
              }
              v17 = v11 + 4;
            }
          }
        }
LABEL_22:
        v64 = (v16 - 1) & v16;
        v65 = v17;
        v14 = __clz(__rbit64(v16)) + (v17 << 6);
      }
      v19 = *(_QWORD *)(a3 + 56);
      v20 = (uint64_t *)(*(_QWORD *)(a3 + 48) + 16 * v14);
      v21 = v20[1];
      v66 = *v20;
      v22 = v19 + 32 * v14;
      v24 = *(_QWORD *)v22;
      v23 = *(_QWORD *)(v22 + 8);
      v25 = *(_QWORD *)(v22 + 16);
      v26 = *(unsigned __int8 *)(v22 + 24);
      if (v26)
      {
        if (v26 == 1)
        {
          swift_bridgeObjectRetain();
          sub_1BC9A5E60(v24, v23, v25, 1u);
          v27 = v23;
          goto LABEL_31;
        }
        v30 = objc_allocWithZone(MEMORY[0x1E0CB3A50]);
        swift_bridgeObjectRetain();
        sub_1BC9A5E60(v24, v23, v25, 2u);
        v31 = (void *)sub_1BCAB5EE0();
        v32 = objc_msgSend(v30, sel_initWithSymbol_, v31, v54, v55);

        sub_1BC9A649C(0, &qword_1EF477F28);
        v61 = v32;
        v33 = v57;
        sub_1BCAB4B6C();
        v34 = (void *)sub_1BCAB4B60();
        v35 = a3;
        v36 = objc_msgSend(v59, sel_stringFromMeasurement_, v34);

        v28 = sub_1BCAB5F04();
        v27 = v37;

        a3 = v35;
        v7 = v56;
        sub_1BC9A5E80(v24, v23, v25, 2u);

        (*(void (**)(char *, uint64_t))(v58 + 8))(v33, v62);
      }
      else
      {
        swift_bridgeObjectRetain();
        sub_1BC9A5E60(v24, v23, v25, 0);
        if (qword_1ED6C7070 != -1)
          swift_once();
        v28 = sub_1BC9A1984(v24, v23, 0, v60, 0, 0);
        v27 = v29;
        sub_1BC9A5E80(v24, v23, v25, 0);
      }
      v24 = v28;
LABEL_31:
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v67 = v12;
      v40 = sub_1BC9A2DBC(v66, v21);
      v41 = v12[2];
      v42 = (v39 & 1) == 0;
      v43 = v41 + v42;
      if (__OFADD__(v41, v42))
      {
        __break(1u);
LABEL_47:
        __break(1u);
LABEL_48:
        __break(1u);
LABEL_49:
        __break(1u);
        goto LABEL_50;
      }
      v44 = v39;
      if (v12[3] >= v43)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) != 0)
        {
          v12 = v67;
          if ((v39 & 1) != 0)
            goto LABEL_5;
        }
        else
        {
          sub_1BC9A51DC();
          v12 = v67;
          if ((v44 & 1) != 0)
            goto LABEL_5;
        }
      }
      else
      {
        sub_1BC9A3C50(v43, isUniquelyReferenced_nonNull_native);
        v45 = sub_1BC9A2DBC(v66, v21);
        if ((v44 & 1) != (v46 & 1))
        {
          result = sub_1BCAB6804();
          __break(1u);
          return result;
        }
        v40 = v45;
        v12 = v67;
        if ((v44 & 1) != 0)
        {
LABEL_5:
          v13 = (uint64_t *)(v12[7] + 16 * v40);
          swift_bridgeObjectRelease();
          *v13 = v24;
          v13[1] = v27;
          goto LABEL_6;
        }
      }
      v12[(v40 >> 6) + 8] |= 1 << v40;
      v47 = (_QWORD *)(v12[6] + 16 * v40);
      *v47 = v66;
      v47[1] = v21;
      v48 = (uint64_t *)(v12[7] + 16 * v40);
      *v48 = v24;
      v48[1] = v27;
      v49 = v12[2];
      v50 = __OFADD__(v49, 1);
      v51 = v49 + 1;
      if (v50)
        goto LABEL_47;
      v12[2] = v51;
      swift_bridgeObjectRetain();
LABEL_6:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v10 = v64;
      v11 = v65;
    }
  }
  v12 = (_QWORD *)MEMORY[0x1E0DEE9E0];
LABEL_44:
  if (qword_1ED6C7070 != -1)
LABEL_50:
    swift_once();
  v52 = sub_1BC9A1984(v54, v55, (uint64_t)v12, v60, 0, 0);
  swift_bridgeObjectRelease();

  return v52;
}

void sub_1BC9A2B08(char a1)
{
  sub_1BCAB6870();
  __asm { BR              X10 }
}

uint64_t sub_1BC9A2B68()
{
  uint64_t v0;
  uint64_t v1;

  sub_1BCAB5F40();
  swift_bridgeObjectRelease();
  v1 = sub_1BCAB6894();
  return sub_1BC9A2F40(v0, v1);
}

unint64_t sub_1BC9A2C2C(unsigned __int8 a1)
{
  uint64_t v2;

  sub_1BCAB6870();
  sub_1BCAB5F40();
  swift_bridgeObjectRelease();
  v2 = sub_1BCAB6894();
  return sub_1BC9A31C8(a1, v2);
}

unint64_t sub_1BC9A2CF0(uint64_t a1)
{
  uint64_t v2;

  sub_1BCAB5F04();
  sub_1BCAB6870();
  sub_1BCAB5F40();
  v2 = sub_1BCAB6894();
  swift_bridgeObjectRelease();
  return sub_1BC9A337C(a1, v2);
}

unint64_t sub_1BC9A2D70(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1BCAB6324();
  return sub_1BC9A366C(a1, v2, &qword_1ED6C6910);
}

unint64_t sub_1BC9A2DBC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1BCAB6870();
  sub_1BCAB5F40();
  v4 = sub_1BCAB6894();
  return sub_1BC9A34F0(a1, a2, v4);
}

unint64_t sub_1BC9A2E20(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1BCAB6864();
  return sub_1BC9A35D0(a1, v2);
}

unint64_t sub_1BC9A2E50(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1BCAB6324();
  return sub_1BC9A366C(a1, v2, (unint64_t *)&qword_1ED6C71C8);
}

unint64_t sub_1BC9A2E9C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1BCAB6324();
  return sub_1BC9A366C(a1, v2, (unint64_t *)&qword_1ED6C7260);
}

unint64_t sub_1BC9A2EE8(unsigned __int8 a1)
{
  uint64_t v2;

  sub_1BCAB6870();
  sub_1BCAB687C();
  v2 = sub_1BCAB6894();
  return sub_1BC9A377C(a1, v2);
}

uint64_t sub_1BC9A2F40(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;

  v3 = a2 & ~(-1 << *(_BYTE *)(v2 + 32));
  if (((*(_QWORD *)(v2 + 64 + ((v3 >> 3) & 0xFFFFFFFFFFFFF8)) >> v3) & 1) != 0)
    __asm { BR              X9 }
  return a2 & ~(-1 << *(_BYTE *)(v2 + 32));
}

unint64_t sub_1BC9A31C8(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  char v12;

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v6 = ~v3;
    while (1)
    {
      if (*(_BYTE *)(*(_QWORD *)(v2 + 48) + v4))
      {
        if (*(_BYTE *)(*(_QWORD *)(v2 + 48) + v4) == 1)
        {
          v7 = 0x80000001BCACD8D0;
          v8 = 0xD000000000000012;
          v9 = a1;
          if (!a1)
            goto LABEL_17;
        }
        else
        {
          v8 = 0x636E657265666552;
          v7 = 0xED0000656E694C65;
          v9 = a1;
          if (!a1)
          {
LABEL_17:
            v11 = 0xE700000000000000;
            if (v8 != 0x746E65746E6F43)
              goto LABEL_19;
            goto LABEL_18;
          }
        }
      }
      else
      {
        v7 = 0xE700000000000000;
        v8 = 0x746E65746E6F43;
        v9 = a1;
        if (!a1)
          goto LABEL_17;
      }
      if (v9 == 1)
        v10 = 0xD000000000000012;
      else
        v10 = 0x636E657265666552;
      if (v9 == 1)
        v11 = 0x80000001BCACD8D0;
      else
        v11 = 0xED0000656E694C65;
      if (v8 != v10)
        goto LABEL_19;
LABEL_18:
      if (v7 == v11)
      {
        swift_bridgeObjectRelease_n();
        return v4;
      }
LABEL_19:
      v12 = sub_1BCAB67C8();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v12 & 1) == 0)
      {
        v4 = (v4 + 1) & v6;
        if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
          continue;
      }
      return v4;
    }
  }
  return v4;
}

unint64_t sub_1BC9A337C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v18;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  v5 = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
  {
    v6 = sub_1BCAB5F04();
    v8 = v7;
    if (v6 == sub_1BCAB5F04() && v8 == v9)
    {
LABEL_16:
      swift_bridgeObjectRelease_n();
      return v5;
    }
    v11 = sub_1BCAB67C8();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v11 & 1) == 0)
    {
      v12 = ~v4;
      v5 = (v5 + 1) & v12;
      if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
      {
        while (1)
        {
          v13 = sub_1BCAB5F04();
          v15 = v14;
          if (v13 == sub_1BCAB5F04() && v15 == v16)
            break;
          v18 = sub_1BCAB67C8();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v18 & 1) == 0)
          {
            v5 = (v5 + 1) & v12;
            if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
              continue;
          }
          return v5;
        }
        goto LABEL_16;
      }
    }
  }
  return v5;
}

unint64_t sub_1BC9A34F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  BOOL v11;
  uint64_t v12;
  _QWORD *v13;
  BOOL v14;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (sub_1BCAB67C8() & 1) == 0)
    {
      v12 = ~v5;
      do
      {
        v6 = (v6 + 1) & v12;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v13 = (_QWORD *)(v9 + 16 * v6);
        v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (sub_1BCAB67C8() & 1) == 0);
    }
  }
  return v6;
}

unint64_t sub_1BC9A35D0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  v4 = v2 + 64;
  v5 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v5;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = *(_QWORD *)(v2 + 48);
    if (*(_QWORD *)(v7 + 8 * result) != a1)
    {
      v8 = ~v5;
      for (result = (result + 1) & v8;
            ((*(_QWORD *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v8)
      {
        if (*(_QWORD *)(v7 + 8 * result) == a1)
          break;
      }
    }
  }
  return result;
}

unint64_t sub_1BC9A366C(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t i;
  id v7;
  char v8;
  uint64_t v9;
  id v10;
  char v11;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  i = a2 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
  {
    sub_1BC9A649C(0, a3);
    v7 = *(id *)(*(_QWORD *)(v3 + 48) + 8 * i);
    v8 = sub_1BCAB6330();

    if ((v8 & 1) == 0)
    {
      v9 = ~v5;
      for (i = (i + 1) & v9; ((*(_QWORD *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0; i = (i + 1) & v9)
      {
        v10 = *(id *)(*(_QWORD *)(v3 + 48) + 8 * i);
        v11 = sub_1BCAB6330();

        if ((v11 & 1) != 0)
          break;
      }
    }
  }
  return i;
}

unint64_t sub_1BC9A377C(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  v4 = v2 + 64;
  v5 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v5;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = *(_QWORD *)(v2 + 48);
    if (*(unsigned __int8 *)(v7 + result) != a1)
    {
      v8 = ~v5;
      for (result = (result + 1) & v8;
            ((*(_QWORD *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v8)
      {
        if (*(unsigned __int8 *)(v7 + result) == a1)
          break;
      }
    }
  }
  return result;
}

uint64_t sub_1BC9A381C(uint64_t a1, uint64_t a2, void *a3, char a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t result;
  unint64_t v21;
  char v22;
  uint64_t *v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  id v27;

  v5 = v4;
  v10 = *v4;
  v12 = sub_1BC9A2D70((uint64_t)a3);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v16 = v11;
  v17 = *(_QWORD *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0)
    goto LABEL_7;
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_1BC9A502C();
LABEL_7:
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      v19 = (uint64_t *)(v18[7] + 16 * v12);
      result = *v19;
      *v19 = a1;
      v19[1] = a2;
      return result;
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    *(_QWORD *)(v18[6] + 8 * v12) = a3;
    v23 = (uint64_t *)(v18[7] + 16 * v12);
    *v23 = a1;
    v23[1] = a2;
    v24 = v18[2];
    v25 = __OFADD__(v24, 1);
    v26 = v24 + 1;
    if (!v25)
    {
      v18[2] = v26;
      v27 = a3;
      return 0;
    }
    goto LABEL_14;
  }
  sub_1BC9A3970(v15, a4 & 1);
  v21 = sub_1BC9A2D70((uint64_t)a3);
  if ((v16 & 1) == (v22 & 1))
  {
    v12 = v21;
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  sub_1BC9A649C(0, &qword_1ED6C6910);
  result = sub_1BCAB6804();
  __break(1u);
  return result;
}

uint64_t sub_1BC9A3970(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  void *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  char v38;

  v3 = v2;
  v5 = *v2;
  sub_1BC9A6670();
  v38 = a2;
  v6 = sub_1BCAB65F4();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v36 = v2;
  v37 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v11 = (unint64_t)(v8 + 63) >> 6;
  v12 = v6 + 64;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v10)
    {
      v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v11)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v37 + 8 * v22);
    ++v14;
    if (!v24)
    {
      v14 = v22 + 1;
      if (v22 + 1 >= v11)
        goto LABEL_33;
      v24 = *(_QWORD *)(v37 + 8 * v14);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v11)
        {
LABEL_33:
          swift_release();
          v3 = v36;
          if ((v38 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v24 = *(_QWORD *)(v37 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v14 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_42;
            if (v14 >= v11)
              goto LABEL_33;
            v24 = *(_QWORD *)(v37 + 8 * v14);
            ++v25;
            if (v24)
              goto LABEL_30;
          }
        }
        v14 = v25;
      }
    }
LABEL_30:
    v10 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    v30 = *(void **)(*(_QWORD *)(v5 + 48) + 8 * v21);
    v31 = (uint64_t *)(*(_QWORD *)(v5 + 56) + 16 * v21);
    v32 = *v31;
    v33 = v31[1];
    if ((v38 & 1) == 0)
    {
      v34 = v30;
      swift_bridgeObjectRetain();
    }
    result = sub_1BCAB6324();
    v15 = -1 << *(_BYTE *)(v7 + 32);
    v16 = result & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v18) = v30;
    v19 = (_QWORD *)(*(_QWORD *)(v7 + 56) + 16 * v18);
    *v19 = v32;
    v19[1] = v33;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v36;
  v23 = (_QWORD *)(v5 + 64);
  if ((v38 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v35 = 1 << *(_BYTE *)(v5 + 32);
  if (v35 >= 64)
    bzero(v23, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v35;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_1BC9A3C50(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  int64_t v40;
  uint64_t v41;
  char v42;

  v3 = v2;
  v5 = *v2;
  sub_1BC9A6624(0, (unint64_t *)&qword_1ED6C7108);
  v42 = a2;
  v6 = sub_1BCAB65F4();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_40;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v41 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v39 = v2;
  v40 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v21 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v22 = v21 | (v13 << 6);
      goto LABEL_31;
    }
    v23 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v23 >= v40)
      break;
    v24 = (_QWORD *)(v5 + 64);
    v25 = *(_QWORD *)(v41 + 8 * v23);
    ++v13;
    if (!v25)
    {
      v13 = v23 + 1;
      if (v23 + 1 >= v40)
        goto LABEL_33;
      v25 = *(_QWORD *)(v41 + 8 * v13);
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v40)
        {
LABEL_33:
          swift_release();
          v3 = v39;
          if ((v42 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v25 = *(_QWORD *)(v41 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            v13 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_42;
            if (v13 >= v40)
              goto LABEL_33;
            v25 = *(_QWORD *)(v41 + 8 * v13);
            ++v26;
            if (v25)
              goto LABEL_30;
          }
        }
        v13 = v26;
      }
    }
LABEL_30:
    v10 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v13 << 6);
LABEL_31:
    v31 = 16 * v22;
    v32 = (uint64_t *)(*(_QWORD *)(v5 + 48) + v31);
    v34 = *v32;
    v33 = v32[1];
    v35 = (uint64_t *)(*(_QWORD *)(v5 + 56) + v31);
    v36 = *v35;
    v37 = v35[1];
    if ((v42 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    sub_1BCAB6870();
    sub_1BCAB5F40();
    result = sub_1BCAB6894();
    v14 = -1 << *(_BYTE *)(v7 + 32);
    v15 = result & ~v14;
    v16 = v15 >> 6;
    if (((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v29 = v16 == v28;
        if (v16 == v28)
          v16 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v11 + 8 * v16);
      }
      while (v30 == -1);
      v17 = __clz(__rbit64(~v30)) + (v16 << 6);
    }
    *(_QWORD *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    v18 = 16 * v17;
    v19 = (_QWORD *)(*(_QWORD *)(v7 + 48) + v18);
    *v19 = v34;
    v19[1] = v33;
    v20 = (_QWORD *)(*(_QWORD *)(v7 + 56) + v18);
    *v20 = v36;
    v20[1] = v37;
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v3 = v39;
  v24 = (_QWORD *)(v5 + 64);
  if ((v42 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v38 = 1 << *(_BYTE *)(v5 + 32);
  if (v38 >= 64)
    bzero(v24, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v38;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v3 = v7;
  return result;
}

void sub_1BC9A3F8C(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;

  v3 = v2;
  v5 = *v2;
  sub_1BC9A6580(0, qword_1EF477F38, (void (*)(void))sub_1BC9A65E0);
  v6 = sub_1BCAB65F4();
  if (*(_QWORD *)(v5 + 16))
  {
    v7 = 1 << *(_BYTE *)(v5 + 32);
    v8 = (_QWORD *)(v5 + 64);
    v9 = -1;
    if (v7 < 64)
      v9 = ~(-1 << v7);
    v10 = v9 & *(_QWORD *)(v5 + 64);
    v11 = (unint64_t)(v7 + 63) >> 6;
    swift_retain();
    v12 = 0;
    while (1)
    {
      if (v10)
      {
        v13 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        v14 = v13 | (v12 << 6);
      }
      else
      {
        v15 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
          __break(1u);
LABEL_27:
          __break(1u);
          return;
        }
        if (v15 >= v11)
          goto LABEL_20;
        v16 = v8[v15];
        ++v12;
        if (!v16)
        {
          v12 = v15 + 1;
          if (v15 + 1 >= v11)
            goto LABEL_20;
          v16 = v8[v12];
          if (!v16)
          {
            v17 = v15 + 2;
            if (v17 >= v11)
            {
LABEL_20:
              swift_release();
              if ((a2 & 1) != 0)
              {
                v18 = 1 << *(_BYTE *)(v5 + 32);
                if (v18 > 63)
                  bzero((void *)(v5 + 64), ((unint64_t)(v18 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v8 = -1 << v18;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v16 = v8[v17];
            if (!v16)
            {
              while (1)
              {
                v12 = v17 + 1;
                if (__OFADD__(v17, 1))
                  goto LABEL_27;
                if (v12 >= v11)
                  goto LABEL_20;
                v16 = v8[v12];
                ++v17;
                if (v16)
                  goto LABEL_19;
              }
            }
            v12 = v17;
          }
        }
LABEL_19:
        v10 = (v16 - 1) & v16;
        v14 = __clz(__rbit64(v16)) + (v12 << 6);
      }
      sub_1BC9A4E0C(*(_BYTE *)(*(_QWORD *)(v5 + 48) + v14));
    }
  }
  swift_release();
  *v3 = v6;
}

uint64_t sub_1BC9A4200(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  int64_t v36;
  uint64_t *v37;
  char v38;
  __int128 v39;

  v3 = v2;
  v5 = *v2;
  sub_1BC9A6624(0, (unint64_t *)&qword_1EF477F30);
  v38 = a2;
  result = sub_1BCAB65F4();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v8 = 0;
    v37 = (uint64_t *)(v5 + 64);
    v9 = 1 << *(_BYTE *)(v5 + 32);
    v33 = -1 << v9;
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v34 = 1 << *(_BYTE *)(v5 + 32);
    v35 = v3;
    v36 = (unint64_t)(v9 + 63) >> 6;
    v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        v18 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v19 = v18 | (v8 << 6);
      }
      else
      {
        v20 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        result = v5 + 64;
        if (v20 >= v36)
          goto LABEL_33;
        v21 = v37[v20];
        ++v8;
        if (!v21)
        {
          v8 = v20 + 1;
          if (v20 + 1 >= v36)
            goto LABEL_33;
          v21 = v37[v8];
          if (!v21)
          {
            v22 = v20 + 2;
            if (v22 >= v36)
            {
LABEL_33:
              if ((v38 & 1) == 0)
              {
                result = swift_release();
                v3 = v35;
                goto LABEL_40;
              }
              if (v34 >= 64)
                bzero(v37, 8 * v36);
              else
                *v37 = v33;
              v3 = v35;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v21 = v37[v22];
            if (!v21)
            {
              while (1)
              {
                v8 = v22 + 1;
                if (__OFADD__(v22, 1))
                  goto LABEL_42;
                if (v8 >= v36)
                  goto LABEL_33;
                v21 = v37[v8];
                ++v22;
                if (v21)
                  goto LABEL_30;
              }
            }
            v8 = v22;
          }
        }
LABEL_30:
        v11 = (v21 - 1) & v21;
        v19 = __clz(__rbit64(v21)) + (v8 << 6);
      }
      v27 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v19);
      v28 = *(_QWORD *)(v5 + 56) + 40 * v19;
      v39 = *(_OWORD *)v28;
      v29 = *(_QWORD *)(v28 + 16);
      v30 = *(_BYTE *)(v28 + 24);
      v31 = *(_BYTE *)(v28 + 25);
      v32 = *(_QWORD *)(v28 + 32);
      if ((v38 & 1) == 0)
        swift_bridgeObjectRetain();
      result = sub_1BCAB6864();
      v13 = -1 << *(_BYTE *)(v7 + 32);
      v14 = result & ~v13;
      v15 = v14 >> 6;
      if (((-1 << v14) & ~*(_QWORD *)(v12 + 8 * (v14 >> 6))) != 0)
      {
        v16 = __clz(__rbit64((-1 << v14) & ~*(_QWORD *)(v12 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v23 = 0;
        v24 = (unint64_t)(63 - v13) >> 6;
        do
        {
          if (++v15 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v25 = v15 == v24;
          if (v15 == v24)
            v15 = 0;
          v23 |= v25;
          v26 = *(_QWORD *)(v12 + 8 * v15);
        }
        while (v26 == -1);
        v16 = __clz(__rbit64(~v26)) + (v15 << 6);
      }
      *(_QWORD *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v16) = v27;
      v17 = *(_QWORD *)(v7 + 56) + 40 * v16;
      *(_OWORD *)v17 = v39;
      *(_QWORD *)(v17 + 16) = v29;
      *(_BYTE *)(v17 + 24) = v30;
      *(_BYTE *)(v17 + 25) = v31;
      *(_QWORD *)(v17 + 32) = v32;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_40:
  *v3 = v7;
  return result;
}

uint64_t sub_1BC9A4510(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  _QWORD *v18;
  unint64_t v19;
  int64_t v20;
  void *v21;
  _OWORD *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  uint64_t v34;
  char v35;
  _OWORD v36[2];

  v3 = v2;
  v5 = *v2;
  sub_1BC9A6514();
  v35 = a2;
  v6 = sub_1BCAB65F4();
  v7 = v6;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_41;
  v8 = 1 << *(_BYTE *)(v5 + 32);
  v34 = v5 + 64;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v5 + 64);
  v33 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 64;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v15 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v16 = v15 | (v13 << 6);
      goto LABEL_22;
    }
    v17 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v17 >= v33)
      break;
    v18 = (_QWORD *)(v5 + 64);
    v19 = *(_QWORD *)(v34 + 8 * v17);
    ++v13;
    if (!v19)
    {
      v13 = v17 + 1;
      if (v17 + 1 >= v33)
        goto LABEL_34;
      v19 = *(_QWORD *)(v34 + 8 * v13);
      if (!v19)
      {
        v20 = v17 + 2;
        if (v20 >= v33)
        {
LABEL_34:
          swift_release();
          if ((v35 & 1) == 0)
            goto LABEL_41;
          goto LABEL_37;
        }
        v19 = *(_QWORD *)(v34 + 8 * v20);
        if (!v19)
        {
          while (1)
          {
            v13 = v20 + 1;
            if (__OFADD__(v20, 1))
              goto LABEL_43;
            if (v13 >= v33)
              goto LABEL_34;
            v19 = *(_QWORD *)(v34 + 8 * v13);
            ++v20;
            if (v19)
              goto LABEL_21;
          }
        }
        v13 = v20;
      }
    }
LABEL_21:
    v10 = (v19 - 1) & v19;
    v16 = __clz(__rbit64(v19)) + (v13 << 6);
LABEL_22:
    v21 = *(void **)(*(_QWORD *)(v5 + 48) + 8 * v16);
    v22 = (_OWORD *)(*(_QWORD *)(v5 + 56) + 32 * v16);
    if ((v35 & 1) != 0)
    {
      sub_1BC9A61C8(v22, v36);
    }
    else
    {
      sub_1BC99C384((uint64_t)v22, (uint64_t)v36);
      v23 = v21;
    }
    sub_1BCAB5F04();
    sub_1BCAB6870();
    sub_1BCAB5F40();
    v24 = sub_1BCAB6894();
    result = swift_bridgeObjectRelease();
    v25 = -1 << *(_BYTE *)(v7 + 32);
    v26 = v24 & ~v25;
    v27 = v26 >> 6;
    if (((-1 << v26) & ~*(_QWORD *)(v11 + 8 * (v26 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v11 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v28 = 0;
      v29 = (unint64_t)(63 - v25) >> 6;
      do
      {
        if (++v27 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v30 = v27 == v29;
        if (v27 == v29)
          v27 = 0;
        v28 |= v30;
        v31 = *(_QWORD *)(v11 + 8 * v27);
      }
      while (v31 == -1);
      v14 = __clz(__rbit64(~v31)) + (v27 << 6);
    }
    *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v14) = v21;
    result = (uint64_t)sub_1BC9A61C8(v36, (_OWORD *)(*(_QWORD *)(v7 + 56) + 32 * v14));
    ++*(_QWORD *)(v7 + 16);
  }
  swift_release();
  v18 = (_QWORD *)(v5 + 64);
  if ((v35 & 1) == 0)
    goto LABEL_41;
LABEL_37:
  v32 = 1 << *(_BYTE *)(v5 + 32);
  if (v32 >= 64)
    bzero(v18, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v18 = -1 << v32;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_41:
  result = swift_release();
  *v3 = v7;
  return result;
}

uint64_t sub_1BC9A4844(uint64_t a1, char a2)
{
  return sub_1BC9A485C(a1, a2, (void (*)(_QWORD))sub_1BC9A5EEC);
}

uint64_t sub_1BC9A4850(uint64_t a1, char a2)
{
  return sub_1BC9A485C(a1, a2, (void (*)(_QWORD))sub_1BC9A63E4);
}

uint64_t sub_1BC9A485C(uint64_t a1, char a2, void (*a3)(_QWORD))
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t result;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  void *v33;
  id v34;
  id v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;

  v4 = v3;
  v6 = *v3;
  a3(0);
  v7 = sub_1BCAB65F4();
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
    goto LABEL_40;
  v9 = 1 << *(_BYTE *)(v6 + 32);
  v37 = v3;
  v38 = v6 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v6 + 64);
  v12 = (unint64_t)(v9 + 63) >> 6;
  v13 = v7 + 64;
  result = swift_retain();
  v15 = 0;
  while (1)
  {
    if (v11)
    {
      v21 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v22 = v21 | (v15 << 6);
      goto LABEL_31;
    }
    v23 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v23 >= v12)
      break;
    v24 = (_QWORD *)(v6 + 64);
    v25 = *(_QWORD *)(v38 + 8 * v23);
    ++v15;
    if (!v25)
    {
      v15 = v23 + 1;
      if (v23 + 1 >= v12)
        goto LABEL_33;
      v25 = *(_QWORD *)(v38 + 8 * v15);
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v12)
        {
LABEL_33:
          swift_release();
          v4 = v37;
          if ((a2 & 1) == 0)
            goto LABEL_40;
          goto LABEL_36;
        }
        v25 = *(_QWORD *)(v38 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            v15 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_42;
            if (v15 >= v12)
              goto LABEL_33;
            v25 = *(_QWORD *)(v38 + 8 * v15);
            ++v26;
            if (v25)
              goto LABEL_30;
          }
        }
        v15 = v26;
      }
    }
LABEL_30:
    v11 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v15 << 6);
LABEL_31:
    v31 = 8 * v22;
    v32 = *(void **)(*(_QWORD *)(v6 + 48) + v31);
    v33 = *(void **)(*(_QWORD *)(v6 + 56) + v31);
    if ((a2 & 1) == 0)
    {
      v34 = v32;
      v35 = v33;
    }
    result = sub_1BCAB6324();
    v16 = -1 << *(_BYTE *)(v8 + 32);
    v17 = result & ~v16;
    v18 = v17 >> 6;
    if (((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v16) >> 6;
      do
      {
        if (++v18 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v29 = v18 == v28;
        if (v18 == v28)
          v18 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v13 + 8 * v18);
      }
      while (v30 == -1);
      v19 = __clz(__rbit64(~v30)) + (v18 << 6);
    }
    *(_QWORD *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    v20 = 8 * v19;
    *(_QWORD *)(*(_QWORD *)(v8 + 48) + v20) = v32;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + v20) = v33;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release();
  v4 = v37;
  v24 = (_QWORD *)(v6 + 64);
  if ((a2 & 1) == 0)
    goto LABEL_40;
LABEL_36:
  v36 = 1 << *(_BYTE *)(v6 + 32);
  if (v36 >= 64)
    bzero(v24, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v36;
  *(_QWORD *)(v6 + 16) = 0;
LABEL_40:
  result = swift_release();
  *v4 = v8;
  return result;
}

uint64_t sub_1BC9A4B28(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  char v31;

  v3 = v2;
  v5 = *v2;
  sub_1BC9A6580(0, &qword_1ED6C5B40, (void (*)(void))sub_1BC9A60E8);
  result = sub_1BCAB65F4();
  v7 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v31 = a2;
    v8 = 0;
    v9 = (_QWORD *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v13 = (unint64_t)(v10 + 63) >> 6;
    v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        v16 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v17 = v16 | (v8 << 6);
      }
      else
      {
        v18 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v18 >= v13)
          goto LABEL_31;
        v19 = v9[v18];
        ++v8;
        if (!v19)
        {
          v8 = v18 + 1;
          if (v18 + 1 >= v13)
            goto LABEL_31;
          v19 = v9[v8];
          if (!v19)
          {
            v20 = v18 + 2;
            if (v20 >= v13)
            {
LABEL_31:
              if ((v31 & 1) == 0)
              {
                result = swift_release();
                v3 = v2;
                goto LABEL_38;
              }
              v30 = 1 << *(_BYTE *)(v5 + 32);
              if (v30 >= 64)
                bzero((void *)(v5 + 64), ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v9 = -1 << v30;
              v3 = v2;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v19 = v9[v20];
            if (!v19)
            {
              while (1)
              {
                v8 = v20 + 1;
                if (__OFADD__(v20, 1))
                  goto LABEL_40;
                if (v8 >= v13)
                  goto LABEL_31;
                v19 = v9[v8];
                ++v20;
                if (v19)
                  goto LABEL_21;
              }
            }
            v8 = v20;
          }
        }
LABEL_21:
        v12 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v8 << 6);
      }
      v21 = *(_BYTE *)(*(_QWORD *)(v5 + 48) + v17);
      v22 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v17);
      sub_1BCAB6870();
      sub_1BCAB687C();
      result = sub_1BCAB6894();
      v23 = -1 << *(_BYTE *)(v7 + 32);
      v24 = result & ~v23;
      v25 = v24 >> 6;
      if (((-1 << v24) & ~*(_QWORD *)(v14 + 8 * (v24 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)(v14 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v26 = 0;
        v27 = (unint64_t)(63 - v23) >> 6;
        do
        {
          if (++v25 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          v28 = v25 == v27;
          if (v25 == v27)
            v25 = 0;
          v26 |= v28;
          v29 = *(_QWORD *)(v14 + 8 * v25);
        }
        while (v29 == -1);
        v15 = __clz(__rbit64(~v29)) + (v25 << 6);
      }
      *(_QWORD *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      *(_BYTE *)(*(_QWORD *)(v7 + 48) + v15) = v21;
      *(_QWORD *)(*(_QWORD *)(v7 + 56) + 8 * v15) = v22;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release();
LABEL_38:
  *v3 = v7;
  return result;
}

void sub_1BC9A4E0C(char a1)
{
  sub_1BCAB6870();
  __asm { BR              X10 }
}

__n128 sub_1BC9A4E70()
{
  _QWORD *v0;
  uint64_t v1;
  char v2;
  unint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __n128 result;
  __int128 v12;

  sub_1BCAB5F40();
  swift_bridgeObjectRelease();
  sub_1BCAB6894();
  v3 = sub_1BCAB63FC();
  *(_QWORD *)((char *)v0 + ((v3 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v3;
  *(_BYTE *)(v0[6] + v3) = v2;
  v4 = v0[7] + 216 * v3;
  v5 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)v4 = *(_OWORD *)v1;
  *(_OWORD *)(v4 + 16) = v5;
  v6 = *(_OWORD *)(v1 + 80);
  *(_OWORD *)(v4 + 64) = *(_OWORD *)(v1 + 64);
  *(_OWORD *)(v4 + 80) = v6;
  v7 = *(_OWORD *)(v1 + 48);
  *(_OWORD *)(v4 + 32) = *(_OWORD *)(v1 + 32);
  *(_OWORD *)(v4 + 48) = v7;
  v8 = *(_OWORD *)(v1 + 144);
  *(_OWORD *)(v4 + 128) = *(_OWORD *)(v1 + 128);
  *(_OWORD *)(v4 + 144) = v8;
  v9 = *(_OWORD *)(v1 + 112);
  *(_OWORD *)(v4 + 96) = *(_OWORD *)(v1 + 96);
  *(_OWORD *)(v4 + 112) = v9;
  *(_BYTE *)(v4 + 208) = *(_BYTE *)(v1 + 208);
  v10 = *(_OWORD *)(v1 + 192);
  v12 = *(_OWORD *)(v1 + 160);
  result = *(__n128 *)(v1 + 176);
  *(__n128 *)(v4 + 176) = result;
  *(_OWORD *)(v4 + 192) = v10;
  *(_OWORD *)(v4 + 160) = v12;
  ++v0[2];
  return result;
}

_OWORD *sub_1BC9A4FC8(unint64_t a1, uint64_t a2, _OWORD *a3, _QWORD *a4)
{
  _OWORD *result;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(_QWORD *)(a4[6] + 8 * a1) = a2;
  result = sub_1BC9A61C8(a3, (_OWORD *)(a4[7] + 32 * a1));
  v6 = a4[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a4[2] = v8;
  return result;
}

void *sub_1BC9A502C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  id v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;

  v1 = v0;
  sub_1BC9A6670();
  v2 = *v0;
  v3 = sub_1BCAB65E8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v24 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v24 >= v13)
      goto LABEL_26;
    v25 = *(_QWORD *)(v6 + 8 * v24);
    ++v9;
    if (!v25)
    {
      v9 = v24 + 1;
      if (v24 + 1 >= v13)
        goto LABEL_26;
      v25 = *(_QWORD *)(v6 + 8 * v9);
      if (!v25)
        break;
    }
LABEL_25:
    v12 = (v25 - 1) & v25;
    v15 = __clz(__rbit64(v25)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(void **)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = 16 * v15;
    v19 = (uint64_t *)(*(_QWORD *)(v2 + 56) + v18);
    v20 = *v19;
    v21 = v19[1];
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    v22 = (_QWORD *)(*(_QWORD *)(v4 + 56) + v18);
    *v22 = v20;
    v22[1] = v21;
    v23 = v17;
    result = (void *)swift_bridgeObjectRetain();
  }
  v26 = v24 + 2;
  if (v26 >= v13)
    goto LABEL_26;
  v25 = *(_QWORD *)(v6 + 8 * v26);
  if (v25)
  {
    v9 = v26;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v25 = *(_QWORD *)(v6 + 8 * v9);
    ++v26;
    if (v25)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1BC9A51DC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;

  v1 = v0;
  sub_1BC9A6624(0, (unint64_t *)&qword_1ED6C7108);
  v2 = *v0;
  v3 = sub_1BCAB65E8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v25 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v25 >= v13)
      goto LABEL_26;
    v26 = *(_QWORD *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      v9 = v25 + 1;
      if (v25 + 1 >= v13)
        goto LABEL_26;
      v26 = *(_QWORD *)(v6 + 8 * v9);
      if (!v26)
        break;
    }
LABEL_25:
    v12 = (v26 - 1) & v26;
    v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + v16);
    v19 = *v17;
    v18 = v17[1];
    v20 = (uint64_t *)(*(_QWORD *)(v2 + 56) + v16);
    v21 = *v20;
    v22 = v20[1];
    v23 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v23 = v19;
    v23[1] = v18;
    v24 = (_QWORD *)(*(_QWORD *)(v4 + 56) + v16);
    *v24 = v21;
    v24[1] = v22;
    swift_bridgeObjectRetain();
    result = (void *)swift_bridgeObjectRetain();
  }
  v27 = v25 + 2;
  if (v27 >= v13)
    goto LABEL_26;
  v26 = *(_QWORD *)(v6 + 8 * v27);
  if (v26)
  {
    v9 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v26 = *(_QWORD *)(v6 + 8 * v9);
    ++v27;
    if (v26)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1BC9A53AC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  char v35;

  v1 = v0;
  sub_1BC9A6580(0, qword_1EF477F38, (void (*)(void))sub_1BC9A65E0);
  v2 = *v0;
  v3 = sub_1BCAB65E8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      v9 = v18 + 1;
      if (v18 + 1 >= v13)
        goto LABEL_26;
      v19 = *(_QWORD *)(v6 + 8 * v9);
      if (!v19)
        break;
    }
LABEL_25:
    v21 = __clz(__rbit64(v19));
    v12 = (v19 - 1) & v19;
    v15 = v21 + (v9 << 6);
LABEL_12:
    v16 = *(_QWORD *)(v2 + 56) + 216 * v15;
    v32 = *(_OWORD *)(v16 + 160);
    v33 = *(_OWORD *)(v16 + 176);
    v34 = *(_OWORD *)(v16 + 192);
    v35 = *(_BYTE *)(v16 + 208);
    v28 = *(_OWORD *)(v16 + 96);
    v29 = *(_OWORD *)(v16 + 112);
    v30 = *(_OWORD *)(v16 + 128);
    v31 = *(_OWORD *)(v16 + 144);
    v24 = *(_OWORD *)(v16 + 32);
    v25 = *(_OWORD *)(v16 + 48);
    v26 = *(_OWORD *)(v16 + 64);
    v27 = *(_OWORD *)(v16 + 80);
    v22 = *(_OWORD *)v16;
    v23 = *(_OWORD *)(v16 + 16);
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + v15) = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v15);
    v17 = *(_QWORD *)(v4 + 56) + 216 * v15;
    *(_OWORD *)(v17 + 160) = v32;
    *(_OWORD *)(v17 + 176) = v33;
    *(_OWORD *)(v17 + 192) = v34;
    *(_BYTE *)(v17 + 208) = v35;
    *(_OWORD *)(v17 + 96) = v28;
    *(_OWORD *)(v17 + 112) = v29;
    *(_OWORD *)(v17 + 128) = v30;
    *(_OWORD *)(v17 + 144) = v31;
    *(_OWORD *)(v17 + 32) = v24;
    *(_OWORD *)(v17 + 48) = v25;
    *(_OWORD *)(v17 + 64) = v26;
    *(_OWORD *)(v17 + 80) = v27;
    *(_OWORD *)v17 = v22;
    *(_OWORD *)(v17 + 16) = v23;
  }
  v20 = v18 + 2;
  if (v20 >= v13)
    goto LABEL_26;
  v19 = *(_QWORD *)(v6 + 8 * v20);
  if (v19)
  {
    v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v9);
    ++v20;
    if (v19)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1BC9A55E8()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;

  v1 = v0;
  sub_1BC9A6624(0, (unint64_t *)&qword_1EF477F30);
  v2 = *v0;
  v3 = sub_1BCAB65E8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v26 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v26 >= v13)
      goto LABEL_26;
    v27 = *(_QWORD *)(v6 + 8 * v26);
    ++v9;
    if (!v27)
    {
      v9 = v26 + 1;
      if (v26 + 1 >= v13)
        goto LABEL_26;
      v27 = *(_QWORD *)(v6 + 8 * v9);
      if (!v27)
        break;
    }
LABEL_25:
    v12 = (v27 - 1) & v27;
    v15 = __clz(__rbit64(v27)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = 40 * v15;
    v19 = *(_QWORD *)(v2 + 56) + v18;
    v20 = *(_QWORD *)(v19 + 16);
    v21 = *(_BYTE *)(v19 + 24);
    v22 = *(_BYTE *)(v19 + 25);
    v23 = *(_QWORD *)(v19 + 32);
    v24 = *(_OWORD *)v19;
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    v25 = *(_QWORD *)(v4 + 56) + v18;
    *(_OWORD *)v25 = v24;
    *(_QWORD *)(v25 + 16) = v20;
    *(_BYTE *)(v25 + 24) = v21;
    *(_BYTE *)(v25 + 25) = v22;
    *(_QWORD *)(v25 + 32) = v23;
    result = (void *)swift_bridgeObjectRetain();
  }
  v28 = v26 + 2;
  if (v28 >= v13)
    goto LABEL_26;
  v27 = *(_QWORD *)(v6 + 8 * v28);
  if (v27)
  {
    v9 = v28;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v28 + 1;
    if (__OFADD__(v28, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v27 = *(_QWORD *)(v6 + 8 * v9);
    ++v28;
    if (v27)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_1BC9A57D4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  _OWORD v22[2];

  v1 = v0;
  sub_1BC9A6514();
  v2 = *v0;
  v3 = sub_1BCAB65E8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (id)swift_release();
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v19 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v13)
      goto LABEL_26;
    v20 = *(_QWORD *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      v9 = v19 + 1;
      if (v19 + 1 >= v13)
        goto LABEL_26;
      v20 = *(_QWORD *)(v6 + 8 * v9);
      if (!v20)
        break;
    }
LABEL_25:
    v12 = (v20 - 1) & v20;
    v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(void **)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = 32 * v15;
    sub_1BC99C384(*(_QWORD *)(v2 + 56) + 32 * v15, (uint64_t)v22);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    sub_1BC9A61C8(v22, (_OWORD *)(*(_QWORD *)(v4 + 56) + v18));
    result = v17;
  }
  v21 = v19 + 2;
  if (v21 >= v13)
    goto LABEL_26;
  v20 = *(_QWORD *)(v6 + 8 * v21);
  if (v20)
  {
    v9 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v20 = *(_QWORD *)(v6 + 8 * v9);
    ++v21;
    if (v20)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

id sub_1BC9A5994()
{
  return sub_1BC9A59A0((void (*)(_QWORD))sub_1BC9A5EEC);
}

id sub_1BC9A59A0(void (*a1)(_QWORD))
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  id v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;

  v2 = v1;
  a1(0);
  v3 = *v1;
  v4 = sub_1BCAB65E8();
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_26:
    result = (id)swift_release();
    *v2 = v5;
    return result;
  }
  result = (id)(v4 + 64);
  v7 = v3 + 64;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8)
    result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 64);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v21 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v14)
      goto LABEL_26;
    v22 = *(_QWORD *)(v7 + 8 * v21);
    ++v10;
    if (!v22)
    {
      v10 = v21 + 1;
      if (v21 + 1 >= v14)
        goto LABEL_26;
      v22 = *(_QWORD *)(v7 + 8 * v10);
      if (!v22)
        break;
    }
LABEL_25:
    v13 = (v22 - 1) & v22;
    v16 = __clz(__rbit64(v22)) + (v10 << 6);
LABEL_12:
    v17 = 8 * v16;
    v18 = *(void **)(*(_QWORD *)(v3 + 48) + v17);
    v19 = *(void **)(*(_QWORD *)(v3 + 56) + v17);
    *(_QWORD *)(*(_QWORD *)(v5 + 48) + v17) = v18;
    *(_QWORD *)(*(_QWORD *)(v5 + 56) + v17) = v19;
    v20 = v18;
    result = v19;
  }
  v23 = v21 + 2;
  if (v23 >= v14)
    goto LABEL_26;
  v22 = *(_QWORD *)(v7 + 8 * v23);
  if (v22)
  {
    v10 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v10 >= v14)
      goto LABEL_26;
    v22 = *(_QWORD *)(v7 + 8 * v10);
    ++v23;
    if (v22)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1BC9A5B44()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;

  v1 = v0;
  sub_1BC9A6580(0, &qword_1ED6C5B40, (void (*)(void))sub_1BC9A60E8);
  v2 = *v0;
  v3 = sub_1BCAB65E8();
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v17 >= v13)
      goto LABEL_26;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      v9 = v17 + 1;
      if (v17 + 1 >= v13)
        goto LABEL_26;
      v18 = *(_QWORD *)(v6 + 8 * v9);
      if (!v18)
        break;
    }
LABEL_25:
    v20 = __clz(__rbit64(v18));
    v12 = (v18 - 1) & v18;
    v15 = v20 + (v9 << 6);
LABEL_12:
    v16 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v15);
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + v15) = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v15);
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v15) = v16;
  }
  v19 = v17 + 2;
  if (v19 >= v13)
    goto LABEL_26;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
    v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v18 = *(_QWORD *)(v6 + 8 * v9);
    ++v19;
    if (v18)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_1BC9A5CEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t result;
  unint64_t v23;
  char v24;
  uint64_t *v25;
  _QWORD *v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;

  v6 = v5;
  v12 = *v5;
  v14 = sub_1BC9A2DBC(a3, a4);
  v15 = *(_QWORD *)(v12 + 16);
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v18 = v13;
  v19 = *(_QWORD *)(v12 + 24);
  if (v19 >= v17 && (a5 & 1) != 0)
    goto LABEL_7;
  if (v19 >= v17 && (a5 & 1) == 0)
  {
    sub_1BC9A51DC();
LABEL_7:
    v20 = (_QWORD *)*v6;
    if ((v18 & 1) != 0)
    {
LABEL_8:
      v21 = (_QWORD *)(v20[7] + 16 * v14);
      result = swift_bridgeObjectRelease();
      *v21 = a1;
      v21[1] = a2;
      return result;
    }
LABEL_11:
    v20[(v14 >> 6) + 8] |= 1 << v14;
    v25 = (uint64_t *)(v20[6] + 16 * v14);
    *v25 = a3;
    v25[1] = a4;
    v26 = (_QWORD *)(v20[7] + 16 * v14);
    *v26 = a1;
    v26[1] = a2;
    v27 = v20[2];
    v28 = __OFADD__(v27, 1);
    v29 = v27 + 1;
    if (!v28)
    {
      v20[2] = v29;
      return swift_bridgeObjectRetain();
    }
    goto LABEL_14;
  }
  sub_1BC9A3C50(v17, a5 & 1);
  v23 = sub_1BC9A2DBC(a3, a4);
  if ((v18 & 1) == (v24 & 1))
  {
    v14 = v23;
    v20 = (_QWORD *)*v6;
    if ((v18 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = sub_1BCAB6804();
  __break(1u);
  return result;
}

uint64_t sub_1BC9A5E60(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  uint64_t result;

  if (a4 <= 2u)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t sub_1BC9A5E80(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  uint64_t result;

  if (a4 <= 2u)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t type metadata accessor for Localization()
{
  return objc_opt_self();
}

uint64_t method lookup function for Localization()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of static Localization.localize(_:substitutions:mySelf:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of static Localization.localize(_:substitutions:mySelf:tableName:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t dispatch thunk of static Localization.localize(stringsDictKey:stringsDictFormatArguments:substitutions:mySelf:tableName:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t dispatch thunk of static Localization.registerLocalization(classForBundle:localizationFile:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 120))();
}

void sub_1BC9A5EEC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED6C30F0)
  {
    sub_1BC9A649C(255, (unint64_t *)&qword_1ED6C71C8);
    sub_1BC9A649C(255, &qword_1ED6C6E88);
    sub_1BC9A64D4((unint64_t *)&qword_1ED6C6E60, (unint64_t *)&qword_1ED6C71C8);
    v0 = sub_1BCAB6618();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED6C30F0);
  }
}

_OWORD *sub_1BC9A5FA4(_OWORD *a1, void *a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  _BOOL8 v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  _QWORD *v15;
  _OWORD *v16;
  _OWORD *result;
  unint64_t v18;
  char v19;

  v4 = (_QWORD **)v3;
  v7 = (_QWORD *)*v3;
  v9 = sub_1BC9A2CF0((uint64_t)a2);
  v10 = v7[2];
  v11 = (v8 & 1) == 0;
  v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
  }
  else
  {
    v13 = v8;
    v14 = v7[3];
    if (v14 >= v12 && (a3 & 1) != 0)
    {
LABEL_7:
      v15 = *v4;
      if ((v13 & 1) != 0)
      {
LABEL_8:
        v16 = (_OWORD *)(v15[7] + 32 * v9);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
        return sub_1BC9A61C8(a1, v16);
      }
      goto LABEL_11;
    }
    if (v14 >= v12 && (a3 & 1) == 0)
    {
      sub_1BC9A57D4();
      goto LABEL_7;
    }
    sub_1BC9A4510(v12, a3 & 1);
    v18 = sub_1BC9A2CF0((uint64_t)a2);
    if ((v13 & 1) == (v19 & 1))
    {
      v9 = v18;
      v15 = *v4;
      if ((v13 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_1BC9A4FC8(v9, (uint64_t)a2, a1, v15);
      return a2;
    }
  }
  type metadata accessor for Key(0);
  result = (_OWORD *)sub_1BCAB6804();
  __break(1u);
  return result;
}

void sub_1BC9A60C4(uint64_t a1, void *a2, char a3)
{
  sub_1BC9A625C(a1, a2, a3, (uint64_t (*)(void *))sub_1BC9A2E50, (void (*)(_QWORD))sub_1BC9A5EEC, (unint64_t *)&qword_1ED6C71C8);
}

unint64_t sub_1BC9A60E8()
{
  unint64_t result;

  result = qword_1ED6C5570;
  if (!qword_1ED6C5570)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCAC712C, &type metadata for DiagramHeartRateRecovery.MinuteLine);
    atomic_store(result, (unint64_t *)&qword_1ED6C5570);
  }
  return result;
}

uint64_t sub_1BC9A612C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1BC9A6170();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_1BC9A6170()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED6C7510)
  {
    v0 = sub_1BCAB6384();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED6C7510);
  }
}

_OWORD *sub_1BC9A61C8(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

void sub_1BC9A61D8(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    v8 = sub_1BC9A649C(255, a3);
    v9 = a5(a1, v8);
    if (!v10)
      atomic_store(v9, a2);
  }
}

void sub_1BC9A6238(uint64_t a1, void *a2, char a3)
{
  sub_1BC9A625C(a1, a2, a3, (uint64_t (*)(void *))sub_1BC9A2E9C, (void (*)(_QWORD))sub_1BC9A63E4, (unint64_t *)&qword_1ED6C7260);
}

void sub_1BC9A625C(uint64_t a1, void *a2, char a3, uint64_t (*a4)(void *), void (*a5)(_QWORD), unint64_t *a6)
{
  _QWORD *v6;
  _QWORD *v10;
  uint64_t v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  _BOOL8 v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  id v29;

  v10 = v6;
  v13 = *v6;
  v15 = a4(a2);
  v16 = *(_QWORD *)(v13 + 16);
  v17 = (v14 & 1) == 0;
  v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v19 = v14;
  v20 = *(_QWORD *)(v13 + 24);
  if (v20 >= v18 && (a3 & 1) != 0)
    goto LABEL_7;
  if (v20 >= v18 && (a3 & 1) == 0)
  {
    sub_1BC9A59A0(a5);
LABEL_7:
    v21 = (_QWORD *)*v10;
    if ((v19 & 1) != 0)
    {
LABEL_8:
      v22 = v21[7];

      *(_QWORD *)(v22 + 8 * v15) = a1;
      return;
    }
LABEL_11:
    v21[(v15 >> 6) + 8] |= 1 << v15;
    v25 = 8 * v15;
    *(_QWORD *)(v21[6] + v25) = a2;
    *(_QWORD *)(v21[7] + v25) = a1;
    v26 = v21[2];
    v27 = __OFADD__(v26, 1);
    v28 = v26 + 1;
    if (!v27)
    {
      v21[2] = v28;
      v29 = a2;
      return;
    }
    goto LABEL_14;
  }
  sub_1BC9A485C(v18, a3 & 1, a5);
  v23 = a4(a2);
  if ((v19 & 1) == (v24 & 1))
  {
    v15 = v23;
    v21 = (_QWORD *)*v10;
    if ((v19 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  sub_1BC9A649C(0, a6);
  sub_1BCAB6804();
  __break(1u);
}

void sub_1BC9A63E4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED6C2E70)
  {
    sub_1BC9A649C(255, (unint64_t *)&qword_1ED6C7260);
    sub_1BC9A649C(255, &qword_1ED6C6E90);
    sub_1BC9A64D4((unint64_t *)&qword_1ED6C2E68, (unint64_t *)&qword_1ED6C7260);
    v0 = sub_1BCAB6618();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED6C2E70);
  }
}

uint64_t sub_1BC9A649C(uint64_t a1, unint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t sub_1BC9A64D4(unint64_t *a1, unint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = sub_1BC9A649C(255, a2);
    result = MEMORY[0x1BCCFBE84](MEMORY[0x1E0DEFCF8], v4);
    atomic_store(result, a1);
  }
  return result;
}

void sub_1BC9A6514()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED6C6918)
  {
    type metadata accessor for Key(255);
    sub_1BC99F5A0();
    v0 = sub_1BCAB6618();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED6C6918);
  }
}

void sub_1BC9A6580(uint64_t a1, unint64_t *a2, void (*a3)(void))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    a3();
    v4 = sub_1BCAB6618();
    if (!v5)
      atomic_store(v4, a2);
  }
}

unint64_t sub_1BC9A65E0()
{
  unint64_t result;

  result = qword_1ED6C4CB8;
  if (!qword_1ED6C4CB8)
  {
    result = MEMORY[0x1BCCFBE84](&protocol conformance descriptor for DateRange, &type metadata for DateRange);
    atomic_store(result, (unint64_t *)&qword_1ED6C4CB8);
  }
  return result;
}

void sub_1BC9A6624(uint64_t a1, unint64_t *a2)
{
  unint64_t v3;
  uint64_t v4;

  if (!*a2)
  {
    v3 = sub_1BCAB6618();
    if (!v4)
      atomic_store(v3, a2);
  }
}

void sub_1BC9A6670()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED6C5B48)
  {
    sub_1BC9A649C(255, &qword_1ED6C6910);
    sub_1BC9A64D4(&qword_1ED6C5B30, &qword_1ED6C6910);
    v0 = sub_1BCAB6618();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED6C5B48);
  }
}

uint64_t sub_1BC9A6708@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  char v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v20;
  uint64_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  NSObject *v46;
  os_log_type_t v47;
  uint8_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint8_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  v6 = sub_1BCAB5514();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v50 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1BC9A2270(64, 0xE100000000000000, a1, a2);
  if ((v11 & 1) != 0)
  {
LABEL_9:
    result = swift_bridgeObjectRetain();
    v40 = 0;
    v43 = 0;
    v42 = 0xE000000000000000;
    v45 = 0xE000000000000000;
    goto LABEL_10;
  }
  v12 = v10;
  v53 = v6;
  v13 = sub_1BCAB5F64();
  swift_bridgeObjectRetain();
  v14 = sub_1BC9A24D4(v13, a1, a2);
  v16 = v15;
  swift_bridgeObjectRelease();
  v17 = sub_1BC9A235C(64, 0xE100000000000000, v14, v16);
  LOBYTE(v16) = v18;
  swift_bridgeObjectRelease();
  if ((v16 & 1) != 0)
  {
    sub_1BCAB54F0();
    swift_bridgeObjectRetain_n();
    v46 = sub_1BCAB54FC();
    v47 = sub_1BCAB618C();
    if (os_log_type_enabled(v46, v47))
    {
      v48 = (uint8_t *)swift_slowAlloc();
      v49 = swift_slowAlloc();
      v55 = v49;
      *(_DWORD *)v48 = 136446210;
      v52 = v48 + 4;
      swift_bridgeObjectRetain();
      v54 = sub_1BC99BD4C(a1, a2, &v55);
      sub_1BCAB63A8();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1BC989000, v46, v47, "Localization: potentially mismatched @ phrase: '%{public}s'", v48, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BCCFBF5C](v49, -1, -1);
      MEMORY[0x1BCCFBF5C](v48, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v53);
    goto LABEL_9;
  }
  result = sub_1BCAB5F64();
  if (v17 >> 14 >= v12 >> 14)
  {
    v20 = result;
    swift_bridgeObjectRetain();
    sub_1BCAB5F58();
    v21 = sub_1BCAB5FAC();
    v52 = v22;
    v53 = v21;
    v51 = v23;
    v25 = v24;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v26 = sub_1BC9A24D4(v20, a1, a2);
    v50 = v27;
    v29 = v28;
    v31 = v30;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v32 = sub_1BCAB5FAC();
    v34 = v33;
    v36 = v35;
    v38 = v37;
    swift_bridgeObjectRelease();
    a1 = MEMORY[0x1BCCFAB28](v32, v34, v36, v38);
    a2 = v39;
    swift_bridgeObjectRelease();
    v40 = MEMORY[0x1BCCFAB28](v53, v52, v51, v25);
    v42 = v41;
    swift_bridgeObjectRelease();
    v43 = MEMORY[0x1BCCFAB28](v26, v50, v29, v31);
    v45 = v44;
    result = swift_bridgeObjectRelease();
LABEL_10:
    *a3 = a1;
    a3[1] = a2;
    a3[2] = v40;
    a3[3] = v42;
    a3[4] = v43;
    a3[5] = v45;
    return result;
  }
  __break(1u);
  return result;
}

unint64_t sub_1BC9A6AB4(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t result;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  _QWORD v23[3];
  uint64_t v24;

  v6 = sub_1BCAB5514();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((sub_1BCAB5F88() & 1) == 0 || (sub_1BCAB5F94() & 1) == 0)
    goto LABEL_13;
  v10 = sub_1BCAB5F64();
  result = sub_1BCAB5F64();
  if (result >> 14 >= v10 >> 14)
  {
    v12 = sub_1BCAB5FAC();
    if (!((v12 ^ v13) >> 14))
    {
      swift_bridgeObjectRelease();
      return 64;
    }
    v14 = MEMORY[0x1BCCFAB28]();
    v16 = v15;
    swift_bridgeObjectRelease();
    if (*(_QWORD *)(a3 + 16))
    {
      v17 = sub_1BC9A2DBC(v14, v16);
      if ((v18 & 1) != 0)
      {
        a1 = *(_QWORD *)(*(_QWORD *)(a3 + 56) + 16 * v17);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        return a1;
      }
    }
    swift_bridgeObjectRelease();
    sub_1BCAB54F0();
    swift_bridgeObjectRetain_n();
    v19 = sub_1BCAB54FC();
    v20 = sub_1BCAB618C();
    if (os_log_type_enabled(v19, v20))
    {
      v21 = (uint8_t *)swift_slowAlloc();
      v22 = swift_slowAlloc();
      v24 = v22;
      *(_DWORD *)v21 = 136446210;
      v23[1] = v21 + 4;
      swift_bridgeObjectRetain();
      v23[2] = sub_1BC99BD4C(a1, a2, &v24);
      sub_1BCAB63A8();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1BC989000, v19, v20, "Localization: no substitution was found for '%{public}s'", v21, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BCCFBF5C](v22, -1, -1);
      MEMORY[0x1BCCFBF5C](v21, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
LABEL_13:
    swift_bridgeObjectRetain();
    return a1;
  }
  __break(1u);
  return result;
}

uint64_t sub_1BC9A6DA8(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;

  v3 = a2;
  v4 = a1;
  if (a3)
  {
    v19 = 0;
    v20 = 0xE000000000000000;
    if ((a2 & 0x2000000000000000) != 0)
      v6 = HIBYTE(a2) & 0xF;
    else
      v6 = a1 & 0xFFFFFFFFFFFFLL;
    swift_bridgeObjectRetain();
    if (v6)
    {
      do
      {
        sub_1BC9A6708(v4, v3, &v13);
        v8 = v13;
        v7 = v14;
        v9 = v15;
        v10 = v16;
        v4 = v17;
        v3 = v18;
        swift_bridgeObjectRelease();
        sub_1BC9A6AB4(v9, v10, a3);
        swift_bridgeObjectRelease();
        v13 = v8;
        v14 = v7;
        swift_bridgeObjectRetain();
        sub_1BCAB5F70();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_1BCAB5F70();
        swift_bridgeObjectRelease();
        v11 = HIBYTE(v3) & 0xF;
        if ((v3 & 0x2000000000000000) == 0)
          v11 = v4 & 0xFFFFFFFFFFFFLL;
      }
      while (v11);
      v4 = v19;
    }
    else
    {
      v4 = 0;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t sub_1BC9A6EE8()
{
  uint64_t v1;

  swift_retain();
  sub_1BCAB5070();
  swift_release();
  return v1;
}

uint64_t sub_1BC9A6F34(void *a1, char a2)
{
  char v3;

  v3 = a2 & 1;
  swift_retain();
  sub_1BCAB507C();
  sub_1BC9A836C(a1, v3);
  return swift_release();
}

id sub_1BC9A6FD0()
{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  void *v5;
  id v6;

  v1 = qword_1ED6C5CF8;
  v2 = *(void **)((char *)v0 + qword_1ED6C5CF8);
  if (v2)
  {
    v3 = *(id *)((char *)v0 + qword_1ED6C5CF8);
  }
  else
  {
    v4 = sub_1BC9A7030(v0);
    v5 = *(void **)((char *)v0 + v1);
    *(uint64_t *)((char *)v0 + v1) = (uint64_t)v4;
    v3 = v4;

    v2 = 0;
  }
  v6 = v2;
  return v3;
}

id sub_1BC9A7030(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  id v11;
  uint64_t *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  id v23;
  id v24;
  id v25;
  uint64_t v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;

  v2 = *a1;
  v3 = *MEMORY[0x1E0DEEDD8];
  v4 = sub_1BCAB54A8();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v27 - v9;
  if (qword_1ED6C7098 != -1)
    swift_once();
  v30 = v3 & v2;
  v11 = (id)qword_1ED6C69C0;
  v12 = a1;
  sub_1BCAB549C();
  v31 = sub_1BC9A649C(0, (unint64_t *)&qword_1ED6C4D68);
  v13 = *(void **)((char *)v12 + qword_1ED6C5D08);
  v14 = *(uint64_t *)((char *)v12 + qword_1ED6C5D00);
  v28 = *(id *)((char *)v12 + qword_1ED6C5CC8);
  v29 = v14;
  v15 = *(uint64_t *)((char *)v12 + qword_1ED6C5CE0);
  v16 = swift_allocObject();
  swift_unknownObjectWeakInit();
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v7, v10, v4);
  v17 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v32 = v10;
  v18 = v4;
  v19 = (v6 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
  v20 = swift_allocObject();
  v21 = v30 + class metadata base offset for SampleQueryOperation;
  *(_QWORD *)(v20 + 16) = *(_QWORD *)(v30 + class metadata base offset for SampleQueryOperation);
  *(_QWORD *)(v20 + 24) = *(_QWORD *)(v21 + 8);
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v20 + v17, v7, v18);
  *(_QWORD *)(v20 + v19) = v16;
  swift_bridgeObjectRetain();
  v22 = v28;
  v23 = v13;
  v24 = sub_1BCA25E04(v22, v13, v29, v15, (uint64_t)sub_1BC9A8248, v20);
  v25 = objc_msgSend(v12, sel_name);
  objc_msgSend(v24, sel_setDebugIdentifier_, v25);

  objc_msgSend(v24, sel_setQualityOfService_, *(uint64_t *)((char *)v12 + qword_1ED6C5CF0));
  (*(void (**)(char *, uint64_t))(v5 + 8))(v32, v18);
  return v24;
}

void sub_1BC9A72D4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  char *v8;
  char *v9;
  Swift::String v10;
  Swift::String v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  void *v18;
  uint64_t *v19;
  id v20;
  Swift::String v21;
  Swift::String v22;
  uint64_t *v23;
  void (*v24)(void *, uint64_t);
  uint64_t v25;

  v7 = a5 + 16;
  sub_1BCAB6264();
  if (qword_1ED6C7098 != -1)
    swift_once();
  sub_1BCAB5490();
  swift_beginAccess();
  v8 = (char *)MEMORY[0x1BCCFC004](v7);
  if (v8)
  {
    v9 = v8;
    if ((objc_msgSend(v8, sel_isCancelled) & 1) != 0)
    {
      v10._countAndFlagsBits = 0xD00000000000002DLL;
      v10._object = (void *)0x80000001BCACE790;
      v11._countAndFlagsBits = 0;
      v11._object = (void *)0xE000000000000000;
      NSOperation.logLifeCycleEvent(_:withPrivateInfo:)(v10, v11);
LABEL_7:

      return;
    }
    if ((objc_msgSend(v9, sel_isFinished) & 1) != 0)
      goto LABEL_7;
    if (a2 && (sub_1BC9A649C(0, &qword_1ED6C7538), (v12 = sub_1BCAB6648()) != 0))
    {
      v13 = (void *)v12;
      v14 = 0;
    }
    else
    {
      if (a3)
        v15 = 0xD00000000000001BLL;
      else
        v15 = 0;
      if (a3)
        v16 = 0x80000001BCACECD0;
      else
        v16 = 0;
      if (a3)
        v17 = a3 | 0x8000000000000000;
      else
        v17 = 0xC000000000000000;
      sub_1BC9A82C4();
      v18 = (void *)swift_allocError();
      *v19 = v15;
      v19[1] = v16;
      v19[2] = v17;
      swift_getErrorValue();
      v20 = (id)a3;
      sub_1BC9A8308(v15, v16, v17);
      v21._countAndFlagsBits = sub_1BCAB6810();
      v22._countAndFlagsBits = 0;
      v22._object = (void *)0xE000000000000000;
      NSOperation.logErrorString(_:withInfo:)(v21, v22);
      swift_bridgeObjectRelease();

      v13 = (void *)swift_allocError();
      *v23 = v15;
      v23[1] = v16;
      v23[2] = v17;
      v14 = 1;
    }
    v24 = *(void (**)(void *, uint64_t))&v9[qword_1ED6C5CD8];
    swift_retain();
    v24(v13, v14);
    v25 = swift_release();
    MEMORY[0x1E0C80A78](v25);
    sub_1BCAB50AC();

    sub_1BC9A836C(v13, v14);
  }
}

uint64_t sub_1BC9A75A0(uint64_t a1, void *a2, char a3)
{
  char v5;
  id v6;
  uint64_t v7;
  void *v8;
  void *v9;
  Swift::String v10;
  Swift::String v11;

  v5 = a3 & 1;
  sub_1BC9A81A4(a2, a3 & 1);
  sub_1BC9A6F34(a2, v5);
  v6 = objc_msgSend(*(id *)(a1 + qword_1ED6C5CC8), sel_identifier);
  v7 = sub_1BCAB5F04();
  v9 = v8;

  v10._countAndFlagsBits = 0x64656873696E6966;
  v10._object = (void *)0xE800000000000000;
  v11._countAndFlagsBits = v7;
  v11._object = v9;
  NSOperation.logLifeCycleEvent(_:withPrivateInfo:)(v10, v11);
  return swift_bridgeObjectRelease();
}

id SampleQueryOperation.__allocating_init(sampleType:predicate:limit:sortDescriptors:name:queryQualityOfService:healthStore:resultHandler:)(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, uint64_t a9, uint64_t a10)
{
  objc_class *v10;
  id v18;

  v18 = objc_allocWithZone(v10);
  return SampleQueryOperation.init(sampleType:predicate:limit:sortDescriptors:name:queryQualityOfService:healthStore:resultHandler:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

id SampleQueryOperation.init(sampleType:predicate:limit:sortDescriptors:name:queryQualityOfService:healthStore:resultHandler:)(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v10;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  _QWORD *v19;
  _QWORD *v20;
  id v21;
  id v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  id v27;
  void *v28;
  objc_super v35;
  uint64_t v36;
  char v37;

  v14 = *MEMORY[0x1E0DEEDD8] & *v10;
  v15 = qword_1ED6C5CE8;
  v16 = *(_QWORD *)(class metadata base offset for SampleQueryOperation + v14 + 8);
  sub_1BCAB6060();
  sub_1BC9A7F58(255, (unint64_t *)&qword_1ED6C6F70);
  sub_1BCAB68A0();
  sub_1BCAB5088();
  sub_1BC9A7EA4();
  v17 = swift_allocError();
  *v18 = 0;
  v36 = v17;
  v37 = 1;
  v19 = v10;
  *(_QWORD *)((char *)v10 + v15) = sub_1BCAB5094();
  *(_QWORD *)((char *)v19 + qword_1ED6C5CF8) = 0;
  *(_QWORD *)((char *)v19 + qword_1ED6C5CC8) = a1;
  *(_QWORD *)((char *)v19 + qword_1ED6C5D08) = a2;
  *(_QWORD *)((char *)v19 + qword_1ED6C5D00) = a3;
  *(_QWORD *)((char *)v19 + qword_1ED6C5CE0) = a4;
  *(_QWORD *)((char *)v19 + qword_1ED6C5CF0) = a7;
  *(_QWORD *)((char *)v19 + qword_1ED6C5CD0) = a8;
  v20 = (_QWORD *)((char *)v19 + qword_1ED6C5CD8);
  *v20 = a9;
  v20[1] = a10;
  v21 = a2;
  v22 = a1;
  v23 = a8;
  swift_retain();

  v24 = *(_QWORD *)(v14 + class metadata base offset for SampleQueryOperation);
  v35.receiver = v19;
  v35.super_class = (Class)type metadata accessor for SampleQueryOperation(0, v24, v16, v25);
  v26 = objc_msgSendSuper2(&v35, sel_init);
  v27 = v26;
  if (a6)
  {
    v28 = (void *)sub_1BCAB5EE0();
    swift_bridgeObjectRelease();
  }
  else
  {
    v28 = 0;
  }
  objc_msgSend(v26, sel_setName_, v28, a5);

  swift_release();
  return v26;
}

uint64_t sub_1BC9A792C()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  void *v5;
  _BYTE *v6;
  void *v7;
  id v8;
  uint64_t v9;
  void *v10;
  void *v11;
  Swift::String v12;
  Swift::String v13;
  id v14;
  char *v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  id v22;
  uint64_t v24;

  v1 = sub_1BCAB54A8();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v4 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BC9A7EA4();
  v5 = (void *)swift_allocError();
  *v6 = 2;
  sub_1BC9A6F34(v5, 1);
  v7 = *(void **)&v0[qword_1ED6C5CC8];
  v8 = objc_msgSend(v7, sel_identifier);
  v9 = sub_1BCAB5F04();
  v11 = v10;

  v12._countAndFlagsBits = 0x676E696E6E7572;
  v12._object = (void *)0xE700000000000000;
  v13._countAndFlagsBits = v9;
  v13._object = v11;
  NSOperation.logLifeCycleEvent(_:withPrivateInfo:)(v12, v13);
  swift_bridgeObjectRelease();
  if (qword_1ED6C7098 != -1)
    swift_once();
  v14 = (id)qword_1ED6C69C0;
  v15 = v0;
  sub_1BCAB549C();
  sub_1BCAB6270();
  sub_1BC9A7EF4();
  v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_1BCABE680;
  v17 = objc_msgSend(v7, sel_identifier);
  v18 = sub_1BCAB5F04();
  v20 = v19;

  *(_QWORD *)(v16 + 56) = MEMORY[0x1E0DEA968];
  *(_QWORD *)(v16 + 64) = sub_1BC9A7FA4();
  *(_QWORD *)(v16 + 32) = v18;
  *(_QWORD *)(v16 + 40) = v20;
  sub_1BCAB5484();
  swift_bridgeObjectRelease();
  v21 = *(void **)&v15[qword_1ED6C5CD0];
  v22 = sub_1BC9A6FD0();
  objc_msgSend(v21, sel_executeQuery_, v22);

  return (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v4, v1);
}

void sub_1BC9A7B78(void *a1)
{
  id v1;

  v1 = a1;
  sub_1BC9A792C();

}

void sub_1BC9A7BAC()
{
  char *v0;
  void *v1;
  _BYTE *v2;
  id v3;
  uint64_t v4;
  void *v5;
  void *v6;
  Swift::String v7;
  Swift::String v8;
  void *v9;
  id v10;

  if (objc_msgSend(v0, sel_isCancelled))
  {
    sub_1BC9A7EA4();
    v1 = (void *)swift_allocError();
    *v2 = 3;
    sub_1BC9A6F34(v1, 1);
    v3 = objc_msgSend(*(id *)&v0[qword_1ED6C5CC8], sel_identifier);
    v4 = sub_1BCAB5F04();
    v6 = v5;

    v7._countAndFlagsBits = 0x656C6C65636E6163;
    v7._object = (void *)0xE900000000000064;
    v8._countAndFlagsBits = v4;
    v8._object = v6;
    NSOperation.logLifeCycleEvent(_:withPrivateInfo:)(v7, v8);
    swift_bridgeObjectRelease();
  }
  v9 = *(void **)&v0[qword_1ED6C5CD0];
  v10 = sub_1BC9A6FD0();
  objc_msgSend(v9, sel_stopQuery_, v10);

}

id SampleQueryOperation.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void SampleQueryOperation.init()()
{
  sub_1BC9A7FE8();
}

void sub_1BC9A7CE8()
{
  sub_1BC9A7FE8();
}

void sub_1BC9A7D10()
{
  uint64_t v0;

  swift_release();

  swift_bridgeObjectRelease();
  swift_release();

}

id SampleQueryOperation.__deallocating_deinit(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  objc_class *Operation;
  objc_super v7;

  Operation = (objc_class *)type metadata accessor for SampleQueryOperation(0, *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v4)+ class metadata base offset for SampleQueryOperation), *(_QWORD *)((*MEMORY[0x1E0DEEDD8] & *v4)+ class metadata base offset for SampleQueryOperation+ 8), a4);
  v7.receiver = v4;
  v7.super_class = Operation;
  return objc_msgSendSuper2(&v7, sel_dealloc);
}

void sub_1BC9A7DE8(uint64_t a1)
{
  swift_release();

  swift_bridgeObjectRelease();
  swift_release();

}

uint64_t sub_1BC9A7E74@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;

  result = sub_1BC9A6EE8();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return result;
}

unint64_t sub_1BC9A7EA4()
{
  unint64_t result;

  result = qword_1ED6C6AC8;
  if (!qword_1ED6C6AC8)
  {
    result = MEMORY[0x1BCCFBE84](&protocol conformance descriptor for ResultProducingError, &type metadata for ResultProducingError);
    atomic_store(result, (unint64_t *)&qword_1ED6C6AC8);
  }
  return result;
}

uint64_t type metadata accessor for SampleQueryOperation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SampleQueryOperation);
}

void sub_1BC9A7EF4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED6C7540)
  {
    sub_1BC9A7F58(255, (unint64_t *)&qword_1ED6C7548);
    v0 = sub_1BCAB67A4();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED6C7540);
  }
}

uint64_t sub_1BC9A7F58(uint64_t a1, unint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, a2);
  }
  return result;
}

unint64_t sub_1BC9A7FA4()
{
  unint64_t result;

  result = qword_1ED6C7528;
  if (!qword_1ED6C7528)
  {
    result = MEMORY[0x1BCCFBE84](MEMORY[0x1E0CB1A70], MEMORY[0x1E0DEA968]);
    atomic_store(result, (unint64_t *)&qword_1ED6C7528);
  }
  return result;
}

void sub_1BC9A7FE8()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t sub_1BC9A8014@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;

  result = sub_1BC9A6EE8();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_1BC9A8044(uint64_t a1)
{
  id v1;
  char v2;

  v1 = *(id *)a1;
  v2 = *(_BYTE *)(a1 + 8);
  sub_1BC9A81A4(*(id *)a1, v2);
  return sub_1BC9A6F34(v1, v2);
}

uint64_t sub_1BC9A8088()
{
  return 16;
}

__n128 sub_1BC9A8094(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1BC9A80A4()
{
  return swift_initClassMetadata2();
}

uint64_t method lookup function for SampleQueryOperation()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SampleQueryOperation.result.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))(class metadata base offset for SampleQueryOperation + (*MEMORY[0x1E0DEEDD8] & *v0) + 112))();
}

uint64_t dispatch thunk of SampleQueryOperation.__allocating_init(sampleType:predicate:limit:sortDescriptors:name:queryQualityOfService:healthStore:resultHandler:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(class metadata base offset for SampleQueryOperation + v0 + 160))();
}

id sub_1BC9A81A4(id a1, char a2)
{
  if ((a2 & 1) != 0)
    return a1;
  else
    return (id)swift_bridgeObjectRetain();
}

uint64_t sub_1BC9A81B0()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1BC9A81D4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_1BCAB54A8();
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
  swift_release();
  return swift_deallocObject();
}

void sub_1BC9A8248(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  unint64_t v8;

  v7 = *(_QWORD *)(sub_1BCAB54A8() - 8);
  v8 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  sub_1BC9A72D4(a1, a2, a3, v3 + v8, *(_QWORD *)(v3 + ((*(_QWORD *)(v7 + 64) + v8 + 7) & 0xFFFFFFFFFFFFF8)));
}

unint64_t sub_1BC9A82C4()
{
  unint64_t result;

  result = qword_1ED6C6A20;
  if (!qword_1ED6C6A20)
  {
    result = MEMORY[0x1BCCFBE84](&protocol conformance descriptor for QueryOperationError, &type metadata for QueryOperationError);
    atomic_store(result, (unint64_t *)&qword_1ED6C6A20);
  }
  return result;
}

id sub_1BC9A8308(uint64_t a1, uint64_t a2, unint64_t a3)
{
  id result;
  void *v4;

  switch(a3 >> 61)
  {
    case 0uLL:
    case 1uLL:
    case 2uLL:
    case 3uLL:
    case 5uLL:
      result = (id)swift_bridgeObjectRetain();
      break;
    case 4uLL:
      v4 = (void *)(a3 & 0x1FFFFFFFFFFFFFFFLL);
      swift_bridgeObjectRetain();
      result = v4;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1BC9A8360()
{
  uint64_t v0;

  return sub_1BC9A75A0(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24), *(_BYTE *)(v0 + 32));
}

void sub_1BC9A836C(id a1, char a2)
{
  if ((a2 & 1) != 0)

  else
    swift_bridgeObjectRelease();
}

id sub_1BC9A8378(uint64_t a1)
{
  uint64_t v1;
  void *v3;
  char v4;

  v3 = *(void **)(v1 + 32);
  v4 = *(_BYTE *)(v1 + 40);
  sub_1BC9A836C(*(id *)a1, *(_BYTE *)(a1 + 8));
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  return sub_1BC9A81A4(v3, v4);
}

uint64_t __swift_instantiateGenericMetadata(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[3];

  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return MEMORY[0x1BCCFBDF4](a1, v6, a5);
}

uint64_t TrendPredicate.init(categoryValues:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t TrendPredicate.categoryValues.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t static TrendPredicate.== infix(_:_:)(_QWORD **a1, _QWORD **a2)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = *a1;
  v3 = *a2;
  if (v2)
  {
    if (v3 && sub_1BC9A97A4(v2, v3))
      return 1;
  }
  else if (!v3)
  {
    return 1;
  }
  return 0;
}

uint64_t sub_1BC9A8438()
{
  return 1;
}

uint64_t sub_1BC9A8440()
{
  sub_1BCAB6870();
  sub_1BCAB687C();
  return sub_1BCAB6894();
}

uint64_t sub_1BC9A8480()
{
  return sub_1BCAB687C();
}

uint64_t sub_1BC9A84A4()
{
  sub_1BCAB6870();
  sub_1BCAB687C();
  return sub_1BCAB6894();
}

uint64_t sub_1BC9A84E0()
{
  return 0x79726F6765746163;
}

uint64_t sub_1BC9A8504@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x79726F6765746163 && a2 == 0xEE007365756C6156)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_1BCAB67C8();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

void sub_1BC9A85BC(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_1BC9A85C8()
{
  sub_1BC9A9810();
  return sub_1BCAB68D0();
}

uint64_t sub_1BC9A85F0()
{
  sub_1BC9A9810();
  return sub_1BCAB68DC();
}

uint64_t TrendPredicate.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  _QWORD v10[4];

  sub_1BC9ACE04(0, &qword_1EF477F58, (uint64_t (*)(void))sub_1BC9A9810, (uint64_t)&type metadata for TrendPredicate.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v7 = (char *)v10 - v6;
  v8 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BC9A9810();
  sub_1BCAB68B8();
  v10[3] = v8;
  sub_1BC9ACD0C(0, &qword_1ED6C45D0);
  sub_1BC9A9854(&qword_1EF477F60, MEMORY[0x1E0DEB420], MEMORY[0x1E0DEAF10]);
  sub_1BCAB6738();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t TrendPredicate.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _QWORD *v9;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;

  v12 = a2;
  sub_1BC9ACE04(0, &qword_1ED6C4690, (uint64_t (*)(void))sub_1BC9A9810, (uint64_t)&type metadata for TrendPredicate.CodingKeys, MEMORY[0x1E0DED048]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v11 - v7;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BC9A9810();
  sub_1BCAB68AC();
  if (!v2)
  {
    v9 = v12;
    sub_1BC9ACD0C(0, &qword_1ED6C45D0);
    sub_1BC9A9854(&qword_1ED6C45D8, MEMORY[0x1E0DEB448], MEMORY[0x1E0DEAF40]);
    sub_1BCAB66A8();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *v9 = v13;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_1BC9A88E4@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return TrendPredicate.init(from:)(a1, a2);
}

uint64_t sub_1BC9A88F8(_QWORD *a1)
{
  return TrendPredicate.encode(to:)(a1);
}

uint64_t sub_1BC9A890C(_QWORD **a1, _QWORD **a2)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = *a1;
  v3 = *a2;
  if (v2)
  {
    if (v3 && sub_1BC9A97A4(v2, v3))
      return 1;
  }
  else if (!v3)
  {
    return 1;
  }
  return 0;
}

uint64_t TrendConfiguration.queryConfiguration.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;

  v2 = *(_QWORD *)v1;
  v3 = *(_QWORD *)(v1 + 8);
  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  v6 = *(_BYTE *)(v1 + 32);
  *(_BYTE *)(a1 + 32) = v6;
  return sub_1BC9A98C0(v2, v3, v4, v5, v6);
}

uint64_t TrendConfiguration.predicate.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 40);
  *a1 = v2;
  return sub_1BC9A9920(v2);
}

uint64_t TrendConfiguration.dateRanges.getter()
{
  return swift_bridgeObjectRetain();
}

void TrendConfiguration.endingDate.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 56);
}

uint64_t TrendConfiguration.analysisKinds.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t TrendConfiguration.parameterOverrides.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t TrendConfiguration.absoluteChangeThreshold.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 80);
}

__n128 TrendConfiguration.init(queryConfiguration:predicate:dateRanges:endingDate:analysisKinds:absoluteChangeThreshold:parameterOverrides:)@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, char *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char a7@<W6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  char v9;
  uint64_t v10;
  char v11;
  __n128 result;
  __int128 v13;

  v9 = *(_BYTE *)(a1 + 32);
  v10 = *a2;
  v11 = *a4;
  result = *(__n128 *)a1;
  v13 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a9 = *(_OWORD *)a1;
  *(_OWORD *)(a9 + 16) = v13;
  *(_BYTE *)(a9 + 32) = v9;
  *(_QWORD *)(a9 + 40) = v10;
  *(_QWORD *)(a9 + 48) = a3;
  *(_BYTE *)(a9 + 56) = v11;
  *(_QWORD *)(a9 + 64) = a5;
  *(_QWORD *)(a9 + 72) = a8;
  *(_QWORD *)(a9 + 80) = a6;
  *(_BYTE *)(a9 + 88) = a7 & 1;
  return result;
}

uint64_t sub_1BC9A89D8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  double *v4;
  double *v5;
  uint64_t v6;
  _BOOL4 v7;
  int v8;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  v3 = v2 - 1;
  v4 = (double *)(a2 + 48);
  v5 = (double *)(a1 + 48);
  do
  {
    v6 = v3;
    v7 = *(v5 - 2) != *(v4 - 2);
    if (*(v5 - 1) != *(v4 - 1))
      v7 = 1;
    v8 = v7 | *(unsigned __int8 *)v5 ^ *(unsigned __int8 *)v4;
    if ((v8 & 1) != 0)
      break;
    --v3;
    v4 += 3;
    v5 += 3;
  }
  while (v6);
  return (v8 ^ 1) & 1;
}

BOOL sub_1BC9A8A60(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  char v12;
  __int128 v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  char v19;
  __int128 v20;
  BOOL v21;
  BOOL v23;
  _OWORD v25[2];
  char v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  __int128 v31;
  char v32;
  _OWORD v33[2];
  char v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  __int128 v39;
  char v40;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 == *(_QWORD *)(a2 + 16))
  {
    if (!v2 || a1 == a2)
    {
      return 1;
    }
    else
    {
      v5 = 0;
      v6 = v2 - 1;
      do
      {
        v7 = *(_BYTE *)(a1 + v5 + 64);
        v8 = *(_QWORD *)(a1 + v5 + 72);
        v9 = *(_QWORD *)(a1 + v5 + 80);
        v10 = *(_BYTE *)(a1 + v5 + 88);
        v11 = *(_QWORD *)(a1 + v5 + 96);
        v12 = *(_BYTE *)(a1 + v5 + 120);
        v13 = *(_OWORD *)(a1 + v5 + 48);
        v33[0] = *(_OWORD *)(a1 + v5 + 32);
        v33[1] = v13;
        v34 = v7;
        v35 = v8;
        v36 = v9;
        v37 = v10;
        v38 = v11;
        v39 = *(_OWORD *)(a1 + v5 + 104);
        v40 = v12;
        v14 = *(_BYTE *)(a2 + v5 + 64);
        v15 = *(_QWORD *)(a2 + v5 + 72);
        v16 = *(_QWORD *)(a2 + v5 + 80);
        v17 = *(_BYTE *)(a2 + v5 + 88);
        v18 = *(_QWORD *)(a2 + v5 + 96);
        v19 = *(_BYTE *)(a2 + v5 + 120);
        v20 = *(_OWORD *)(a2 + v5 + 48);
        v25[0] = *(_OWORD *)(a2 + v5 + 32);
        v25[1] = v20;
        v26 = v14;
        v27 = v15;
        v28 = v16;
        v29 = v17;
        v30 = v18;
        v31 = *(_OWORD *)(a2 + v5 + 104);
        v32 = v19;
        v21 = _s19HealthVisualization18TrendConfigurationV2eeoiySbAC_ACtFZ_0((uint64_t)v33, (uint64_t)v25);
        v23 = v6-- != 0;
        if (!v21)
          break;
        v5 += 96;
      }
      while (v23);
    }
  }
  else
  {
    return 0;
  }
  return v21;
}

uint64_t sub_1BC9A8B60(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t result;
  uint64_t v12;
  BOOL v13;
  BOOL v14;
  BOOL v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  BOOL v19;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (v2 && a1 != a2)
  {
    v3 = 0;
    v4 = a1 + 32;
    v5 = a2 + 32;
    while (1)
    {
      v6 = v4 + 40 * v3;
      v7 = v5 + 40 * v3;
      if (*(_QWORD *)v6 != *(_QWORD *)v7 || *(_QWORD *)(v6 + 8) != *(_QWORD *)(v7 + 8))
        return 0;
      v9 = *(_QWORD **)(v6 + 32);
      v10 = *(_QWORD **)(v7 + 32);
      if ((*(_BYTE *)(v6 + 24) & 1) != 0)
      {
        result = 0;
        if (!*(_BYTE *)(v7 + 24))
          return result;
      }
      else
      {
        result = 0;
        if ((*(_BYTE *)(v7 + 24) & 1) != 0 || *(double *)(v6 + 16) != *(double *)(v7 + 16))
          return result;
      }
      if (((*(unsigned __int8 *)(v6 + 25) ^ *(unsigned __int8 *)(v7 + 25)) & 1) != 0)
        return result;
      v12 = v9[2];
      if (v12 != v10[2])
        return 0;
      if (v12)
        v13 = v9 == v10;
      else
        v13 = 1;
      if (!v13)
      {
        v14 = v9[4] == v10[4] && v9[5] == v10[5];
        if (!v14 && (sub_1BCAB67C8() & 1) == 0)
          return 0;
        if (v12 != 1)
        {
          v15 = v9[6] == v10[6] && v9[7] == v10[7];
          if (!v15 && (sub_1BCAB67C8() & 1) == 0)
            return 0;
          v16 = v12 - 2;
          if (v16)
          {
            v17 = v10 + 9;
            v18 = v9 + 9;
            do
            {
              v19 = *(v18 - 1) == *(v17 - 1) && *v18 == *v17;
              if (!v19 && (sub_1BCAB67C8() & 1) == 0)
                return 0;
              v17 += 2;
              v18 += 2;
            }
            while (--v16);
          }
        }
      }
      if (++v3 == v2)
        return 1;
    }
  }
  return 1;
}

uint64_t sub_1BC9A8CF4(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  BOOL v5;
  char v6;
  uint64_t result;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *i;
  BOOL v11;

  v2 = a1[2];
  if (v2 != a2[2])
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  v5 = a1[4] == a2[4] && a1[5] == a2[5];
  if (v5 || (v6 = sub_1BCAB67C8(), result = 0, (v6 & 1) != 0))
  {
    v8 = v2 - 1;
    if (!v8)
      return 1;
    v9 = a2 + 7;
    for (i = a1 + 7; ; i += 2)
    {
      v11 = *(i - 1) == *(v9 - 1) && *i == *v9;
      if (!v11 && (sub_1BCAB67C8() & 1) == 0)
        break;
      v9 += 2;
      if (!--v8)
        return 1;
    }
    return 0;
  }
  return result;
}

BOOL sub_1BC9A8DB8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  __int16 v7;
  uint64_t v8;
  __int16 v9;
  char v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  char v14;
  BOOL v15;
  BOOL v17;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  char v23;
  uint64_t v24;
  __int16 v25;
  uint64_t v26;
  __int16 v27;
  char v28;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 == *(_QWORD *)(a2 + 16))
  {
    if (!v2 || a1 == a2)
    {
      return 1;
    }
    else
    {
      v5 = 0;
      v6 = v2 - 1;
      do
      {
        v7 = *(_WORD *)(a1 + v5 + 40);
        v8 = *(_QWORD *)(a1 + v5 + 48);
        v9 = *(_WORD *)(a1 + v5 + 56);
        v10 = *(_BYTE *)(a1 + v5 + 58);
        v24 = *(_QWORD *)(a1 + v5 + 32);
        v25 = v7;
        v26 = v8;
        v28 = v10;
        v27 = v9;
        v11 = *(_WORD *)(a2 + v5 + 40);
        v12 = *(_QWORD *)(a2 + v5 + 48);
        v13 = *(_WORD *)(a2 + v5 + 56);
        v14 = *(_BYTE *)(a2 + v5 + 58);
        v19 = *(_QWORD *)(a2 + v5 + 32);
        v20 = v11;
        v21 = v12;
        v23 = v14;
        v22 = v13;
        v15 = _s19HealthVisualization20DiagramConfigurationO14LinePropertiesV2eeoiySbAE_AEtFZ_0((uint64_t)&v24, (uint64_t)&v19);
        v17 = v6-- != 0;
        if (!v15)
          break;
        v5 += 32;
      }
      while (v17);
    }
  }
  else
  {
    return 0;
  }
  return v15;
}

uint64_t sub_1BC9A8E98(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (v2)
  {
    if (a1 != a2)
      __asm { BR              X10 }
  }
  return 1;
}

uint64_t sub_1BC9A90FC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BYTE *v3;
  _BYTE *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v10;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (v2 && a1 != a2)
  {
    v3 = (_BYTE *)(a1 + 32);
    v4 = (_BYTE *)(a2 + 32);
    do
    {
      if (*v3)
        v5 = 0x636E657571657266;
      else
        v5 = 0x666968536E61656DLL;
      if (*v3)
        v6 = 0xEF65676E61684379;
      else
        v6 = 0xEF65676E61684374;
      if (*v4)
        v7 = 0x636E657571657266;
      else
        v7 = 0x666968536E61656DLL;
      if (*v4)
        v8 = 0xEF65676E61684379;
      else
        v8 = 0xEF65676E61684374;
      if (v5 == v7 && v6 == v8)
      {
        swift_bridgeObjectRelease_n();
      }
      else
      {
        v10 = sub_1BCAB67C8();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v10 & 1) == 0)
          return 0;
      }
      ++v3;
      ++v4;
      --v2;
    }
    while (v2);
  }
  return 1;
}

uint64_t sub_1BC9A920C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (v2)
  {
    if (a1 != a2)
      __asm { BR              X10 }
  }
  return 1;
}

uint64_t sub_1BC9A9540(uint64_t a1, uint64_t a2)
{
  int *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v21;

  v4 = (int *)type metadata accessor for SignificantChange.Period(0);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v21 - v9;
  v11 = *(_QWORD *)(a1 + 16);
  if (v11 != *(_QWORD *)(a2 + 16))
    return 0;
  if (v11 && a1 != a2)
  {
    v12 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
    v13 = *(_QWORD *)(v8 + 72);
    while (1)
    {
      sub_1BC9AE148(a1 + v12, (uint64_t)v10);
      sub_1BC9AE148(a2 + v12, (uint64_t)v6);
      if ((sub_1BCAB4B84() & 1) == 0
        || *(double *)&v10[v4[5]] != *(double *)&v6[v4[5]]
        || *(double *)&v10[v4[6]] != *(double *)&v6[v4[6]])
      {
        break;
      }
      v14 = v4[7];
      v15 = v10[v14];
      v16 = v6[v14];
      if (v15 == 2)
      {
        if (v16 != 2)
          break;
      }
      else
      {
        if (v16 == 2)
          break;
        if ((v15 & 1) != 0)
          v17 = 0x6973616572636564;
        else
          v17 = 0x6973616572636E69;
        if ((v16 & 1) != 0)
          v18 = 0x6973616572636564;
        else
          v18 = 0x6973616572636E69;
        if (v17 == v18)
        {
          swift_bridgeObjectRelease_n();
        }
        else
        {
          v19 = sub_1BCAB67C8();
          swift_bridgeObjectRelease_n();
          if ((v19 & 1) == 0)
            break;
        }
      }
      sub_1BC9AE18C((uint64_t)v6);
      sub_1BC9AE18C((uint64_t)v10);
      v12 += v13;
      if (!--v11)
        return 1;
    }
    sub_1BC9AE18C((uint64_t)v6);
    sub_1BC9AE18C((uint64_t)v10);
    return 0;
  }
  return 1;
}

int32x2_t sub_1BC9A9724(uint64_t a1, uint64_t a2, int32x2_t result)
{
  uint64_t v3;
  float64x2_t *v5;
  float64x2_t *v6;
  uint64_t v7;
  float64x2_t v8;
  float64x2_t v9;
  float64x2_t v10;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3 == *(_QWORD *)(a2 + 16) && v3 && a1 != a2)
  {
    result = *(int32x2_t *)(a1 + 40);
    if (*(double *)(a1 + 32) == *(double *)(a2 + 32) && *(double *)&result == *(double *)(a2 + 40))
    {
      v5 = (float64x2_t *)(a1 + 48);
      v6 = (float64x2_t *)(a2 + 48);
      v7 = v3 - 1;
      do
      {
        if (!v7)
          break;
        v8 = *v5++;
        v9 = v8;
        v10 = *v6++;
        result = vmovn_s64(vceqq_f64(v9, v10));
        --v7;
      }
      while ((result.i32[0] & result.i32[1] & 1) != 0);
    }
  }
  return result;
}

BOOL sub_1BC9A97A4(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  _BOOL8 result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = a1[2];
  if (v2 != a2[2])
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  if (a1[4] != a2[4])
    return 0;
  v3 = a1 + 5;
  v4 = a2 + 5;
  v5 = v2 - 1;
  do
  {
    result = v5 == 0;
    if (!v5)
      break;
    v8 = *v3++;
    v7 = v8;
    v9 = *v4++;
    --v5;
  }
  while (v7 == v9);
  return result;
}

unint64_t sub_1BC9A9810()
{
  unint64_t result;

  result = qword_1ED6C36B0;
  if (!qword_1ED6C36B0)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCABF148, &type metadata for TrendPredicate.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED6C36B0);
  }
  return result;
}

uint64_t sub_1BC9A9854(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    sub_1BC9ACD0C(255, &qword_1ED6C45D0);
    v8 = a2;
    result = MEMORY[0x1BCCFBE84](a3, v7, &v8);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1BC9A98C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  uint64_t result;

  switch(a5 >> 3)
  {
    case 0:
    case 7:
    case 16:
      goto LABEL_3;
    case 1:
    case 4:
    case 8:
      swift_bridgeObjectRetain();
LABEL_3:
      result = swift_bridgeObjectRetain();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1BC9A9920(uint64_t result)
{
  if (result != 1)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t sub_1BC9A9930(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v17;

  v2 = a1[2];
  if (v2 != a2[2])
    goto LABEL_7;
  if (!v2 || a1 == a2)
    goto LABEL_6;
  v5 = a1[4];
  v6 = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v7 = sub_1BC9AB688(v5, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v7 & 1) == 0)
  {
LABEL_7:
    v8 = 0;
    return v8 & 1;
  }
  if (v2 == 1)
  {
LABEL_6:
    v8 = 1;
    return v8 & 1;
  }
  v10 = v2 - 2;
  v11 = a1 + 5;
  v12 = a2 + 5;
  do
  {
    v14 = *v11++;
    v13 = v14;
    v15 = *v12++;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v8 = sub_1BC9AB688(v13, v15);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v17 = v10-- != 0;
  }
  while ((v8 & 1) != 0 && v17);
  return v8 & 1;
}

uint64_t sub_1BC9A9A28(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1BC9A9A60 + 4 * byte_1BCABE931[a1]))(0xD000000000000012, 0x80000001BCACED10);
}

uint64_t sub_1BC9A9A60()
{
  return 0x7461636964657270;
}

uint64_t sub_1BC9A9A7C()
{
  return 0x676E615265746164;
}

uint64_t sub_1BC9A9A9C()
{
  return 0x6144676E69646E65;
}

uint64_t sub_1BC9A9AB8()
{
  return 0x736973796C616E61;
}

uint64_t sub_1BC9A9B08()
{
  unsigned __int8 *v0;

  return sub_1BC9A9A28(*v0);
}

uint64_t sub_1BC9A9B10@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1BC9AC5B8(a1, a2);
  *a3 = result;
  return result;
}

void sub_1BC9A9B34(_BYTE *a1@<X8>)
{
  *a1 = 7;
}

uint64_t sub_1BC9A9B40()
{
  sub_1BC9AC00C();
  return sub_1BCAB68D0();
}

uint64_t sub_1BC9A9B68()
{
  sub_1BC9AC00C();
  return sub_1BCAB68DC();
}

uint64_t TrendConfiguration.encode(to:)(_QWORD *a1)
{
  __int128 *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[2];
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  int v33;
  char v34;

  sub_1BC9ACE04(0, &qword_1EF477F68, (uint64_t (*)(void))sub_1BC9AC00C, (uint64_t)&type metadata for TrendConfiguration.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v4 = v3;
  v26 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)v20 - v5;
  v27 = *v1;
  v7 = *((_QWORD *)v1 + 2);
  v8 = *((_QWORD *)v1 + 3);
  v9 = *((_BYTE *)v1 + 32);
  v10 = *((_QWORD *)v1 + 5);
  v24 = *((_QWORD *)v1 + 6);
  v25 = v10;
  v33 = *((unsigned __int8 *)v1 + 56);
  v11 = *((_QWORD *)v1 + 8);
  v22 = *((_QWORD *)v1 + 9);
  v23 = v11;
  v20[1] = *((_QWORD *)v1 + 10);
  v21 = *((unsigned __int8 *)v1 + 88);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BC9AC00C();
  sub_1BCAB68B8();
  v29 = v27;
  v30 = v7;
  v31 = v8;
  v32 = v9;
  v12 = v6;
  v34 = 0;
  sub_1BC9AC050();
  v13 = v28;
  sub_1BCAB6774();
  if (v13)
    return (*(uint64_t (**)(char *, uint64_t))(v26 + 8))(v6, v4);
  v16 = v23;
  v15 = v24;
  v17 = v33;
  v18 = v22;
  v19 = v26;
  *(_QWORD *)&v29 = v25;
  v34 = 1;
  sub_1BC9AC094();
  sub_1BCAB6738();
  *(_QWORD *)&v29 = v15;
  v34 = 2;
  sub_1BC9ACD0C(0, (unint64_t *)&qword_1ED6C45B8);
  sub_1BC9AC0D8();
  sub_1BCAB6774();
  LOBYTE(v29) = v17;
  v34 = 3;
  sub_1BC9AC148();
  sub_1BCAB6774();
  *(_QWORD *)&v29 = v16;
  v34 = 4;
  sub_1BC9ACD0C(0, &qword_1ED6C4598);
  sub_1BC9AC18C();
  sub_1BCAB6774();
  *(_QWORD *)&v29 = v18;
  v34 = 5;
  sub_1BC9ACC20(0, &qword_1ED6C4E38, (uint64_t)&type metadata for ParameterOverrides, (uint64_t (*)(uint64_t, ValueMetadata *, uint64_t, unint64_t))MEMORY[0x1E0DEA048]);
  sub_1BC9AC4E4(&qword_1EF477F98, (uint64_t (*)(void))sub_1BC99B470, (uint64_t (*)(void))sub_1BC9AC240, MEMORY[0x1E0DEA0B8]);
  sub_1BCAB6738();
  LOBYTE(v29) = 6;
  sub_1BCAB6720();
  return (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v12, v4);
}

uint64_t TrendConfiguration.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int8 v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned __int8 v51;
  int v52;
  char v53;

  sub_1BC9ACE04(0, &qword_1ED6C46B0, (uint64_t (*)(void))sub_1BC9AC00C, (uint64_t)&type metadata for TrendConfiguration.CodingKeys, MEMORY[0x1E0DED048]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v34 - v8;
  v10 = a1[3];
  v46 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v10);
  sub_1BC9AC00C();
  sub_1BCAB68AC();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v46);
  v44 = a2;
  v45 = v7;
  v53 = 0;
  sub_1BC9AC2F4();
  v11 = v6;
  sub_1BCAB66E4();
  v12 = v49;
  v13 = v50;
  v14 = v51;
  v53 = 1;
  v15 = v47;
  v16 = v48;
  sub_1BC9A98C0(v47, v48, v49, v50, v51);
  sub_1BC9AC338();
  sub_1BCAB66A8();
  v42 = v16;
  v43 = v15;
  v41 = v13;
  v52 = v14;
  v17 = v47;
  sub_1BC9ACD0C(0, (unint64_t *)&qword_1ED6C45B8);
  v53 = 2;
  sub_1BC9A9920(v17);
  sub_1BC9AC37C();
  sub_1BCAB66E4();
  v18 = v17;
  v19 = v47;
  v53 = 3;
  sub_1BC9AC3EC();
  swift_bridgeObjectRetain();
  sub_1BCAB66E4();
  LODWORD(v15) = v47;
  sub_1BC9ACD0C(0, &qword_1ED6C4598);
  v53 = 4;
  sub_1BC9AC430();
  sub_1BCAB66E4();
  LODWORD(v40) = v15;
  v21 = v47;
  sub_1BC9ACC20(0, &qword_1ED6C4E38, (uint64_t)&type metadata for ParameterOverrides, (uint64_t (*)(uint64_t, ValueMetadata *, uint64_t, unint64_t))MEMORY[0x1E0DEA048]);
  v53 = 5;
  sub_1BC9AC4E4(&qword_1ED6C4E40, (uint64_t (*)(void))sub_1BC99B510, (uint64_t (*)(void))sub_1BC9AC574, MEMORY[0x1E0DEA0D8]);
  swift_bridgeObjectRetain();
  sub_1BCAB66A8();
  v22 = v47;
  LOBYTE(v47) = 6;
  v39 = v22;
  swift_bridgeObjectRetain();
  v37 = sub_1BCAB6690();
  v38 = v23;
  (*(void (**)(char *, uint64_t))(v45 + 8))(v9, v11);
  v25 = v42;
  v24 = v43;
  v26 = v12;
  v27 = v12;
  v28 = v41;
  v29 = v52;
  sub_1BC9A98C0(v43, v42, v27, v41, v52);
  v35 = v18;
  sub_1BC9A9920(v18);
  sub_1BC9AC284(v18);
  v30 = v26;
  v36 = v26;
  sub_1BC9AC294(v24, v25, v26, v28, v29);
  v31 = v44;
  *v44 = v24;
  v31[1] = v25;
  v31[2] = v30;
  v31[3] = v28;
  *((_BYTE *)v31 + 32) = v29;
  v32 = v35;
  v31[5] = v35;
  v31[6] = v19;
  *((_BYTE *)v31 + 56) = v40;
  v33 = v39;
  v31[8] = v21;
  v31[9] = v33;
  v31[10] = v37;
  *((_BYTE *)v31 + 88) = v38 & 1;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v46);
  sub_1BC9AC294(v43, v25, v36, v28, v29);
  sub_1BC9AC284(v32);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1BC9AA584@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return TrendConfiguration.init(from:)(a1, a2);
}

uint64_t sub_1BC9AA598(_QWORD *a1)
{
  return TrendConfiguration.encode(to:)(a1);
}

uint64_t TrendConfiguration.dateRangeToEngineParameters.getter()
{
  _OWORD *v0;
  __int128 v1;
  __int128 v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  _OWORD v9[4];
  _OWORD v10[2];

  v1 = v0[3];
  v9[2] = v0[2];
  v9[3] = v1;
  v10[0] = v0[4];
  *(_OWORD *)((char *)v10 + 9) = *(_OWORD *)((char *)v0 + 73);
  v2 = v0[1];
  v9[0] = *v0;
  v9[1] = v2;
  sub_1BC9ACB48((uint64_t)v9);
  v3 = swift_bridgeObjectRetain();
  v4 = sub_1BC9AC8BC(v3, (uint64_t)v9);
  sub_1BC9ACBB4((uint64_t)v9);
  swift_bridgeObjectRelease();
  if (v4[2])
  {
    sub_1BC9ACC20(0, qword_1EF477F38, (uint64_t)&type metadata for SignificantChangeEngine.Parameters, (uint64_t (*)(uint64_t, ValueMetadata *, uint64_t, unint64_t))MEMORY[0x1E0DECD58]);
    v5 = sub_1BCAB660C();
  }
  else
  {
    v5 = MEMORY[0x1E0DEE9E0];
  }
  v8 = v5;
  v6 = swift_bridgeObjectRetain();
  sub_1BC9AB9F0(v6, 1, &v8);
  swift_bridgeObjectRelease();
  return v8;
}

HealthVisualization::TrendAnalysisKind_optional __swiftcall TrendAnalysisKind.init(rawValue:)(Swift::String rawValue)
{
  uint64_t v1;
  HealthVisualization::TrendAnalysisKind_optional v2;

  v1 = sub_1BCAB6654();
  swift_bridgeObjectRelease();
  if (v1 == 1)
    v2.value = HealthVisualization_TrendAnalysisKind_frequencyChange;
  else
    v2.value = HealthVisualization_TrendAnalysisKind_unknownDefault;
  if (v1)
    return v2;
  else
    return 0;
}

void *static TrendAnalysisKind.allCases.getter()
{
  return &unk_1E7543E70;
}

uint64_t TrendAnalysisKind.rawValue.getter(char a1)
{
  if ((a1 & 1) != 0)
    return 0x636E657571657266;
  else
    return 0x666968536E61656DLL;
}

uint64_t sub_1BC9AA758()
{
  sub_1BCAB6870();
  sub_1BCAB5F40();
  swift_bridgeObjectRelease();
  return sub_1BCAB6894();
}

uint64_t sub_1BC9AA7E4()
{
  sub_1BCAB5F40();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1BC9AA84C()
{
  sub_1BCAB6870();
  sub_1BCAB5F40();
  swift_bridgeObjectRelease();
  return sub_1BCAB6894();
}

uint64_t sub_1BC9AA8D4@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_1BCAB6654();
  result = swift_bridgeObjectRelease();
  if (v2 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (!v2)
    v4 = 0;
  *a1 = v4;
  return result;
}

void sub_1BC9AA930(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 0x666968536E61656DLL;
  if (*v1)
    v2 = 0x636E657571657266;
  v3 = 0xEF65676E61684374;
  if (*v1)
    v3 = 0xEF65676E61684379;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_1BC9AA97C(_BYTE *a1, _BYTE *a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v8;

  v2 = *a1 == 0;
  if (*a1)
    v3 = 0x636E657571657266;
  else
    v3 = 0x666968536E61656DLL;
  if (v2)
    v4 = 0xEF65676E61684374;
  else
    v4 = 0xEF65676E61684379;
  if (*a2)
    v5 = 0x636E657571657266;
  else
    v5 = 0x666968536E61656DLL;
  if (*a2)
    v6 = 0xEF65676E61684379;
  else
    v6 = 0xEF65676E61684374;
  if (v3 == v5 && v4 == v6)
    v8 = 1;
  else
    v8 = sub_1BCAB67C8();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_1BC9AAA30()
{
  sub_1BC9AE104();
  return sub_1BCAB5FE8();
}

uint64_t sub_1BC9AAA8C()
{
  sub_1BC9AE104();
  return sub_1BCAB5FD0();
}

void sub_1BC9AAAD8(_QWORD *a1@<X8>)
{
  *a1 = &unk_1E7543E98;
}

uint64_t ParameterOverrides.minimumEffectSize.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t ParameterOverrides.minimumSegmentLength.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t ParameterOverrides.minimumDataCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24);
}

HealthVisualization::ParameterOverrides __swiftcall ParameterOverrides.init(minimumEffectSize:minimumSegmentLength:minimumDataCount:)(Swift::Double_optional minimumEffectSize, Swift::Int minimumSegmentLength, Swift::Int minimumDataCount)
{
  uint64_t v3;
  uint64_t v4;
  HealthVisualization::ParameterOverrides result;

  *(_QWORD *)v4 = *(_QWORD *)&minimumEffectSize.is_nil;
  *(_BYTE *)(v4 + 8) = minimumSegmentLength & 1;
  *(_QWORD *)(v4 + 16) = minimumDataCount;
  *(_QWORD *)(v4 + 24) = v3;
  result.minimumEffectSize.value = minimumEffectSize.value;
  result.minimumEffectSize.is_nil = minimumEffectSize.is_nil;
  result.minimumDataCount = minimumDataCount;
  result.minimumSegmentLength = minimumSegmentLength;
  return result;
}

unint64_t sub_1BC9AAB1C(char a1)
{
  if (!a1)
    return 0xD000000000000011;
  if (a1 == 1)
    return 0xD000000000000014;
  return 0xD000000000000010;
}

BOOL sub_1BC9AAB78(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

unint64_t sub_1BC9AAB8C()
{
  char *v0;

  return sub_1BC9AAB1C(*v0);
}

uint64_t sub_1BC9AAB94@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1BC9ADED8(a1, a2);
  *a3 = result;
  return result;
}

void sub_1BC9AABB8(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

uint64_t sub_1BC9AABC4()
{
  sub_1BC9ACC84();
  return sub_1BCAB68D0();
}

uint64_t sub_1BC9AABEC()
{
  sub_1BC9ACC84();
  return sub_1BCAB68DC();
}

uint64_t ParameterOverrides.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[4];
  char v12;
  char v13;
  char v14;

  sub_1BC9ACE04(0, &qword_1EF477FA8, (uint64_t (*)(void))sub_1BC9ACC84, (uint64_t)&type metadata for ParameterOverrides.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v7 = (char *)v11 - v6;
  v8 = *(_QWORD *)(v1 + 16);
  v11[1] = *(_QWORD *)(v1 + 24);
  v11[2] = v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BC9ACC84();
  sub_1BCAB68B8();
  v14 = 0;
  v9 = v11[3];
  sub_1BCAB6720();
  if (!v9)
  {
    v13 = 1;
    sub_1BCAB6768();
    v12 = 2;
    sub_1BCAB6768();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t ParameterOverrides.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  char v19;

  v16 = a2;
  sub_1BC9ACE04(0, &qword_1ED6C4E48, (uint64_t (*)(void))sub_1BC9ACC84, (uint64_t)&type metadata for ParameterOverrides.CodingKeys, MEMORY[0x1E0DED048]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v15 - v7;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BC9ACC84();
  sub_1BCAB68AC();
  if (!v2)
  {
    v9 = v16;
    v19 = 0;
    v10 = sub_1BCAB6690();
    v12 = v11;
    v18 = 1;
    v15 = sub_1BCAB66D8();
    v17 = 2;
    v14 = sub_1BCAB66D8();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *(_QWORD *)v9 = v10;
    *(_BYTE *)(v9 + 8) = v12 & 1;
    *(_QWORD *)(v9 + 16) = v15;
    *(_QWORD *)(v9 + 24) = v14;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_1BC9AAF30@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return ParameterOverrides.init(from:)(a1, a2);
}

uint64_t sub_1BC9AAF44(_QWORD *a1)
{
  return ParameterOverrides.encode(to:)(a1);
}

uint64_t CorrelatedTrendConfiguration.objectTypeIdentifier.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t CorrelatedTrendConfiguration.trendConfigurations.getter()
{
  return swift_bridgeObjectRetain();
}

HealthVisualization::CorrelatedTrendConfiguration __swiftcall CorrelatedTrendConfiguration.init(objectTypeIdentifier:trendConfigurations:)(Swift::String objectTypeIdentifier, Swift::OpaquePointer trendConfigurations)
{
  uint64_t v2;
  HealthVisualization::CorrelatedTrendConfiguration result;

  *(Swift::String *)v2 = objectTypeIdentifier;
  *(Swift::OpaquePointer *)(v2 + 16) = trendConfigurations;
  result.objectTypeIdentifier = objectTypeIdentifier;
  result.trendConfigurations = trendConfigurations;
  return result;
}

BOOL static CorrelatedTrendConfiguration.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;

  v2 = a1[2];
  v3 = a2[2];
  v4 = *a1 == *a2 && a1[1] == a2[1];
  return (v4 || (sub_1BCAB67C8() & 1) != 0) && sub_1BC9A8A60(v2, v3);
}

unint64_t sub_1BC9AAFF8()
{
  _BYTE *v0;

  if (*v0)
    return 0xD000000000000013;
  else
    return 0xD000000000000014;
}

uint64_t sub_1BC9AB034@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1BC9AE018(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1BC9AB058()
{
  sub_1BC9ACCC8();
  return sub_1BCAB68D0();
}

uint64_t sub_1BC9AB080()
{
  sub_1BC9ACCC8();
  return sub_1BCAB68DC();
}

uint64_t CorrelatedTrendConfiguration.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;

  sub_1BC9ACE04(0, &qword_1EF477FB0, (uint64_t (*)(void))sub_1BC9ACCC8, (uint64_t)&type metadata for CorrelatedTrendConfiguration.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v7 = (char *)&v10 - v6;
  v11 = *(_QWORD *)(v1 + 16);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BC9ACCC8();
  sub_1BCAB68B8();
  v15 = 0;
  v8 = v12;
  sub_1BCAB6744();
  if (!v8)
  {
    v13 = v11;
    v14 = 1;
    sub_1BC9ACD0C(0, &qword_1ED6C45A8);
    sub_1BC9ACD50();
    sub_1BCAB6774();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t CorrelatedTrendConfiguration.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[2];
  char v16;
  char v17;

  v15[0] = a2;
  sub_1BC9ACE04(0, &qword_1ED6C4E50, (uint64_t (*)(void))sub_1BC9ACCC8, (uint64_t)&type metadata for CorrelatedTrendConfiguration.CodingKeys, MEMORY[0x1E0DED048]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v8 = (char *)v15 - v7;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BC9ACCC8();
  sub_1BCAB68AC();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v9 = (uint64_t *)v15[0];
  v17 = 0;
  v10 = sub_1BCAB66B4();
  v12 = v11;
  sub_1BC9ACD0C(0, &qword_1ED6C45A8);
  v16 = 1;
  sub_1BC9ACE60();
  swift_bridgeObjectRetain();
  sub_1BCAB66E4();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v13 = v15[1];
  *v9 = v10;
  v9[1] = v12;
  v9[2] = v13;
  swift_bridgeObjectRetain();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1BC9AB40C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return CorrelatedTrendConfiguration.init(from:)(a1, a2);
}

uint64_t sub_1BC9AB420(_QWORD *a1)
{
  return CorrelatedTrendConfiguration.encode(to:)(a1);
}

BOOL sub_1BC9AB434(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;

  v2 = a1[2];
  v3 = a2[2];
  v4 = *a1 == *a2 && a1[1] == a2[1];
  return (v4 || (sub_1BCAB67C8() & 1) != 0) && sub_1BC9A8A60(v2, v3);
}

uint64_t sub_1BC9AB494()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

void sub_1BC9AB4C0(uint64_t a1, uint64_t a2)
{
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  double v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;

  if (a1 == a2 || *(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
    return;
  v4 = 0;
  v5 = a1 + 64;
  v6 = 1 << *(_BYTE *)(a1 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(a1 + 64);
  v9 = (unint64_t)(v6 + 63) >> 6;
  while (v8)
  {
    v11 = __clz(__rbit64(v8));
    v8 &= v8 - 1;
    v12 = v11 | (v4 << 6);
LABEL_30:
    v16 = *(_QWORD *)(a1 + 56) + 32 * v12;
    v17 = *(double *)v16;
    v18 = *(unsigned __int8 *)(v16 + 8);
    v20 = *(_QWORD *)(v16 + 16);
    v19 = *(_QWORD *)(v16 + 24);
    sub_1BC9A2B08(*(_BYTE *)(*(_QWORD *)(a1 + 48) + v12));
    if ((v22 & 1) == 0)
      return;
    v23 = *(_QWORD *)(a2 + 56) + 32 * v21;
    v25 = *(_QWORD *)(v23 + 16);
    v24 = *(_QWORD *)(v23 + 24);
    if ((*(_BYTE *)(v23 + 8) & 1) != 0)
    {
      if (!v18)
        return;
      if (v25 != v20 || v24 != v19)
        return;
    }
    else
    {
      if ((v18 & 1) != 0)
        return;
      v26 = *(double *)v23 == v17 && v25 == v20;
      if (!v26 || v24 != v19)
        return;
    }
  }
  v13 = v4 + 1;
  if (__OFADD__(v4, 1))
  {
    __break(1u);
    goto LABEL_43;
  }
  if (v13 >= v9)
    return;
  v14 = *(_QWORD *)(v5 + 8 * v13);
  ++v4;
  if (v14)
    goto LABEL_29;
  v4 = v13 + 1;
  if (v13 + 1 >= v9)
    return;
  v14 = *(_QWORD *)(v5 + 8 * v4);
  if (v14)
    goto LABEL_29;
  v4 = v13 + 2;
  if (v13 + 2 >= v9)
    return;
  v14 = *(_QWORD *)(v5 + 8 * v4);
  if (v14)
    goto LABEL_29;
  v4 = v13 + 3;
  if (v13 + 3 >= v9)
    return;
  v14 = *(_QWORD *)(v5 + 8 * v4);
  if (v14)
  {
LABEL_29:
    v8 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v4 << 6);
    goto LABEL_30;
  }
  v15 = v13 + 4;
  if (v15 >= v9)
    return;
  v14 = *(_QWORD *)(v5 + 8 * v15);
  if (v14)
  {
    v4 = v15;
    goto LABEL_29;
  }
  while (1)
  {
    v4 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v4 >= v9)
      return;
    v14 = *(_QWORD *)(v5 + 8 * v4);
    ++v15;
    if (v14)
      goto LABEL_29;
  }
LABEL_43:
  __break(1u);
}

uint64_t sub_1BC9AB688(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  double *v16;
  double *v17;
  double *v18;
  double *v19;
  unsigned __int8 v20;
  unint64_t v21;
  char v22;
  double **v23;
  double *v24;
  uint64_t v25;
  double *v26;
  double *v27;
  double *v28;
  double *v29;
  BOOL v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  double *v34;
  uint64_t v35;
  uint64_t v36;
  int64_t v37;
  int64_t v38;

  if (result == a2)
    return 1;
  v3 = result;
  if (*(_QWORD *)(result + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v4 = 0;
  v36 = result + 64;
  v5 = 1 << *(_BYTE *)(result + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(result + 64);
  v37 = (unint64_t)(v5 + 63) >> 6;
  while (1)
  {
    if (v7)
    {
      v8 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v38 = v4;
      v9 = v8 | (v4 << 6);
      goto LABEL_24;
    }
    v10 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_58;
    }
    if (v10 >= v37)
      return 1;
    v11 = *(_QWORD *)(v36 + 8 * v10);
    v12 = v4 + 1;
    if (!v11)
    {
      v12 = v4 + 2;
      if (v4 + 2 >= v37)
        return 1;
      v11 = *(_QWORD *)(v36 + 8 * v12);
      if (!v11)
      {
        v12 = v4 + 3;
        if (v4 + 3 >= v37)
          return 1;
        v11 = *(_QWORD *)(v36 + 8 * v12);
        if (!v11)
        {
          v12 = v4 + 4;
          if (v4 + 4 >= v37)
            return 1;
          v11 = *(_QWORD *)(v36 + 8 * v12);
          if (!v11)
            break;
        }
      }
    }
LABEL_23:
    v7 = (v11 - 1) & v11;
    v38 = v12;
    v9 = __clz(__rbit64(v11)) + (v12 << 6);
LABEL_24:
    v14 = (uint64_t *)(*(_QWORD *)(v3 + 56) + 40 * v9);
    v15 = *v14;
    v16 = (double *)v14[1];
    v17 = (double *)v14[2];
    v18 = (double *)v14[3];
    v19 = (double *)v14[4];
    v20 = *(_BYTE *)(*(_QWORD *)(v3 + 48) + v9);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v21 = sub_1BC9A2C2C(v20);
    if ((v22 & 1) == 0)
      goto LABEL_54;
    v23 = (double **)(*(_QWORD *)(a2 + 56) + 40 * v21);
    v24 = *v23;
    v25 = *((_QWORD *)*v23 + 2);
    if (v25 != *(_QWORD *)(v15 + 16))
      goto LABEL_54;
    v26 = v23[1];
    v27 = v23[2];
    v28 = v23[3];
    v29 = v23[4];
    if (v25)
      v30 = v24 == (double *)v15;
    else
      v30 = 1;
    if (!v30)
    {
      if (v24[4] != *(double *)(v15 + 32) || v24[5] != *(double *)(v15 + 40))
        goto LABEL_54;
      v31 = v25 - 1;
      if (v31)
      {
        if (v24[6] != *(double *)(v15 + 48) || v24[7] != *(double *)(v15 + 56))
          goto LABEL_54;
        v33 = 0;
        while (--v31)
        {
          v34 = &v24[v33];
          v35 = v15 + v33 * 8;
          if (v24[v33 + 8] == *(double *)(v15 + v33 * 8 + 64))
          {
            v33 += 2;
            if (v34[9] == *(double *)(v35 + 72))
              continue;
          }
          goto LABEL_54;
        }
      }
    }
    if (v27)
    {
      if (!v17 || (v26 != v16 || v27 != v17) && (sub_1BCAB67C8() & 1) == 0)
      {
LABEL_54:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return 0;
      }
    }
    else if (v17)
    {
      goto LABEL_54;
    }
    if (v29)
    {
      if (!v19)
        goto LABEL_54;
      if (v28 == v18 && v29 == v19)
        goto LABEL_47;
      v32 = sub_1BCAB67C8();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      v4 = v38;
      if ((v32 & 1) == 0)
        return 0;
    }
    else
    {
      if (v19)
        goto LABEL_54;
LABEL_47:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      v4 = v38;
    }
  }
  v13 = v4 + 5;
  if (v4 + 5 >= v37)
    return 1;
  v11 = *(_QWORD *)(v36 + 8 * v13);
  if (v11)
  {
    v12 = v4 + 5;
    goto LABEL_23;
  }
  while (1)
  {
    v12 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v12 >= v37)
      return 1;
    v11 = *(_QWORD *)(v36 + 8 * v12);
    ++v13;
    if (v11)
      goto LABEL_23;
  }
LABEL_58:
  __break(1u);
  return result;
}

void sub_1BC9AB9F0(uint64_t a1, char a2, _QWORD *a3)
{
  unint64_t v4;
  unint64_t v5;
  _OWORD *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  char v13;
  _QWORD *v14;
  char v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _BOOL8 v19;
  uint64_t v20;
  char v21;
  unint64_t v22;
  char v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  void *v29;
  id v30;
  uint64_t v31;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  char v47;
  _BYTE v48[224];
  _BYTE v49[170];
  _BYTE v50[217];
  char v51;

  v4 = *(_QWORD *)(a1 + 16);
  v31 = a1 + 32;
  swift_bridgeObjectRetain();
  v5 = 0;
  if (v4)
    goto LABEL_3;
LABEL_2:
  sub_1BC9AE2F4((uint64_t)v49);
  sub_1BC9AE330((uint64_t)v49, (uint64_t)v50, (uint64_t (*)(_QWORD))sub_1BC9AE1C8);
  v5 = v4;
  while (1)
  {
    sub_1BC9AE330((uint64_t)v50, (uint64_t)v48, (uint64_t (*)(_QWORD))sub_1BC9AE1C8);
    sub_1BC9AE330((uint64_t)v48, (uint64_t)v49, (uint64_t (*)(_QWORD))sub_1BC9AE1C8);
    if (sub_1BC9AE280((uint64_t)v49) == 1)
    {
      swift_bridgeObjectRelease_n();
      return;
    }
    v13 = v50[0];
    v51 = v50[0];
    v44 = *(_OWORD *)&v50[168];
    v45 = *(_OWORD *)&v50[184];
    v46 = *(_OWORD *)&v50[200];
    v47 = v50[216];
    v40 = *(_OWORD *)&v50[104];
    v41 = *(_OWORD *)&v50[120];
    v42 = *(_OWORD *)&v50[136];
    v43 = *(_OWORD *)&v50[152];
    v36 = *(_OWORD *)&v50[40];
    v37 = *(_OWORD *)&v50[56];
    v38 = *(_OWORD *)&v50[72];
    v39 = *(_OWORD *)&v50[88];
    v34 = *(_OWORD *)&v50[8];
    v35 = *(_OWORD *)&v50[24];
    v14 = (_QWORD *)*a3;
    sub_1BC9A2B08(v50[0]);
    v17 = v16;
    v18 = v14[2];
    v19 = (v15 & 1) == 0;
    v20 = v18 + v19;
    if (__OFADD__(v18, v19))
    {
      __break(1u);
LABEL_21:
      __break(1u);
LABEL_22:
      __break(1u);
LABEL_23:
      sub_1BCAB6804();
      __break(1u);
      goto LABEL_24;
    }
    v21 = v15;
    if (v14[3] < v20)
      break;
    if ((a2 & 1) != 0)
    {
      if ((v15 & 1) != 0)
        goto LABEL_17;
    }
    else
    {
      sub_1BC9A53AC();
      if ((v21 & 1) != 0)
        goto LABEL_17;
    }
LABEL_13:
    v24 = (_QWORD *)*a3;
    *(_QWORD *)(*a3 + 8 * (v17 >> 6) + 64) |= 1 << v17;
    *(_BYTE *)(v24[6] + v17) = v13;
    v25 = v24[7] + 216 * v17;
    *(_OWORD *)(v25 + 64) = v38;
    *(_OWORD *)(v25 + 80) = v39;
    *(_OWORD *)(v25 + 32) = v36;
    *(_OWORD *)(v25 + 48) = v37;
    *(_OWORD *)(v25 + 128) = v42;
    *(_OWORD *)(v25 + 144) = v43;
    *(_OWORD *)(v25 + 96) = v40;
    *(_OWORD *)(v25 + 112) = v41;
    *(_BYTE *)(v25 + 208) = v47;
    *(_OWORD *)(v25 + 176) = v45;
    *(_OWORD *)(v25 + 192) = v46;
    *(_OWORD *)(v25 + 160) = v44;
    *(_OWORD *)v25 = v34;
    *(_OWORD *)(v25 + 16) = v35;
    v26 = v24[2];
    v27 = __OFADD__(v26, 1);
    v28 = v26 + 1;
    if (v27)
      goto LABEL_21;
    v24[2] = v28;
    a2 = 1;
    if (v5 == v4)
      goto LABEL_2;
LABEL_3:
    if (v5 >= *(_QWORD *)(a1 + 16))
      goto LABEL_22;
    v6 = (_OWORD *)(v31 + 224 * v5);
    v7 = v6[11];
    *(_OWORD *)&v50[160] = v6[10];
    *(_OWORD *)&v50[176] = v7;
    *(_OWORD *)&v50[192] = v6[12];
    *(_OWORD *)&v50[201] = *(_OWORD *)((char *)v6 + 201);
    v8 = v6[7];
    *(_OWORD *)&v50[96] = v6[6];
    *(_OWORD *)&v50[112] = v8;
    v9 = v6[9];
    *(_OWORD *)&v50[128] = v6[8];
    *(_OWORD *)&v50[144] = v9;
    v10 = v6[3];
    *(_OWORD *)&v50[32] = v6[2];
    *(_OWORD *)&v50[48] = v10;
    v11 = v6[5];
    *(_OWORD *)&v50[64] = v6[4];
    *(_OWORD *)&v50[80] = v11;
    v12 = v6[1];
    ++v5;
    *(_OWORD *)v50 = *v6;
    *(_OWORD *)&v50[16] = v12;
    nullsub_1(v50);
  }
  sub_1BC9A3F8C(v20, a2 & 1);
  sub_1BC9A2B08(v13);
  if ((v21 & 1) != (v23 & 1))
    goto LABEL_23;
  v17 = v22;
  if ((v21 & 1) == 0)
    goto LABEL_13;
LABEL_17:
  v29 = (void *)swift_allocError();
  swift_willThrow();
  v30 = v29;
  sub_1BC9AE2A0();
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_bridgeObjectRelease_n();

    return;
  }
LABEL_24:
  sub_1BCAB64C8();
  sub_1BCAB5F70();
  sub_1BCAB657C();
  sub_1BCAB5F70();
  sub_1BCAB65C4();
  __break(1u);
}

BOOL _s19HealthVisualization18ParameterOverridesV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a2 + 16);
  if ((*(_BYTE *)(a1 + 8) & 1) != 0)
  {
    if (v2 == v3)
      v4 = *(unsigned __int8 *)(a2 + 8);
    else
      v4 = 0;
    if (v4 != 1)
      return 0;
  }
  else
  {
    if ((*(_BYTE *)(a2 + 8) & 1) != 0)
      return 0;
    if (*(double *)a1 != *(double *)a2 || v2 != v3)
      return 0;
  }
  return *(_QWORD *)(a1 + 24) == *(_QWORD *)(a2 + 24);
}

BOOL _s19HealthVisualization18TrendConfigurationV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  char v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  char v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  char v13;
  __int128 v14;
  char v15;
  char v16;
  uint64_t v17;
  char v18;
  char v19;
  BOOL v21;
  char v22;
  char v23;
  char v24;
  uint64_t v25;
  _OWORD v26[2];
  char v27;

  v2 = *(_BYTE *)(a1 + 32);
  v3 = *(_QWORD **)(a1 + 40);
  v25 = *(_QWORD *)(a1 + 48);
  v24 = *(_BYTE *)(a1 + 56);
  v5 = *(_QWORD *)(a1 + 64);
  v4 = *(_QWORD *)(a1 + 72);
  v6 = *(double *)(a1 + 80);
  v7 = *(_BYTE *)(a1 + 88);
  v9 = *(_QWORD **)(a2 + 40);
  v8 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a2 + 64);
  v10 = *(_QWORD *)(a2 + 72);
  v12 = *(double *)(a2 + 80);
  v13 = *(_BYTE *)(a2 + 88);
  v14 = *(_OWORD *)(a1 + 16);
  v26[0] = *(_OWORD *)a1;
  v26[1] = v14;
  v27 = v2;
  _s19HealthVisualization18QueryConfigurationO2eeoiySbAC_ACtFZ_0((uint64_t)v26);
  if ((v15 & 1) == 0)
    return 0;
  v23 = v7;
  if (v3 == (_QWORD *)1)
  {
    if (v9 == (_QWORD *)1)
      goto LABEL_4;
LABEL_13:
    sub_1BC9A9920((uint64_t)v9);
    sub_1BC9AC284((uint64_t)v3);
    sub_1BC9AC284((uint64_t)v9);
    return 0;
  }
  if (v9 == (_QWORD *)1)
  {
    swift_bridgeObjectRetain();
    goto LABEL_13;
  }
  if (v3)
  {
    if (!v9)
    {
      sub_1BC9A9920((uint64_t)v3);
      swift_bridgeObjectRelease();
      return 0;
    }
    v21 = sub_1BC9A97A4(v3, v9);
    sub_1BC9A9920((uint64_t)v3);
    swift_bridgeObjectRelease();
    if (!v21)
      return 0;
  }
  else if (v9)
  {
    return 0;
  }
LABEL_4:
  if ((sub_1BC9A8E98(v25, v8) & 1) == 0)
    return 0;
  sub_1BC9993E0(v24);
  if ((v16 & 1) == 0 || (sub_1BC9A90FC(v5, v11) & 1) == 0)
    return 0;
  if (v4)
  {
    if (!v10)
      return 0;
    swift_bridgeObjectRetain();
    v17 = swift_bridgeObjectRetain();
    sub_1BC9AB4C0(v17, v10);
    v19 = v18;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v19 & 1) == 0)
      return 0;
  }
  else if (v10)
  {
    return 0;
  }
  if ((v23 & 1) == 0)
  {
    v22 = v13;
    if (v6 != v12)
      v22 = 1;
    return (v22 & 1) == 0;
  }
  return (v13 & 1) != 0;
}

unint64_t sub_1BC9AC00C()
{
  unint64_t result;

  result = qword_1ED6C3950;
  if (!qword_1ED6C3950)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCABF0F8, &type metadata for TrendConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED6C3950);
  }
  return result;
}

unint64_t sub_1BC9AC050()
{
  unint64_t result;

  result = qword_1EF477F70;
  if (!qword_1EF477F70)
  {
    result = MEMORY[0x1BCCFBE84](&protocol conformance descriptor for QueryConfiguration, &type metadata for QueryConfiguration);
    atomic_store(result, (unint64_t *)&qword_1EF477F70);
  }
  return result;
}

unint64_t sub_1BC9AC094()
{
  unint64_t result;

  result = qword_1EF477F78;
  if (!qword_1EF477F78)
  {
    result = MEMORY[0x1BCCFBE84](&protocol conformance descriptor for TrendPredicate, &type metadata for TrendPredicate);
    atomic_store(result, (unint64_t *)&qword_1EF477F78);
  }
  return result;
}

unint64_t sub_1BC9AC0D8()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  result = qword_1EF477F80;
  if (!qword_1EF477F80)
  {
    sub_1BC9ACD0C(255, (unint64_t *)&qword_1ED6C45B8);
    v2 = v1;
    v3 = sub_1BC99B470();
    result = MEMORY[0x1BCCFBE84](MEMORY[0x1E0DEAF10], v2, &v3);
    atomic_store(result, (unint64_t *)&qword_1EF477F80);
  }
  return result;
}

unint64_t sub_1BC9AC148()
{
  unint64_t result;

  result = qword_1ED6C36A8;
  if (!qword_1ED6C36A8)
  {
    result = MEMORY[0x1BCCFBE84](&protocol conformance descriptor for AnchorDate, &type metadata for AnchorDate);
    atomic_store(result, (unint64_t *)&qword_1ED6C36A8);
  }
  return result;
}

unint64_t sub_1BC9AC18C()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  result = qword_1EF477F88;
  if (!qword_1EF477F88)
  {
    sub_1BC9ACD0C(255, &qword_1ED6C4598);
    v2 = v1;
    v3 = sub_1BC9AC1FC();
    result = MEMORY[0x1BCCFBE84](MEMORY[0x1E0DEAF10], v2, &v3);
    atomic_store(result, (unint64_t *)&qword_1EF477F88);
  }
  return result;
}

unint64_t sub_1BC9AC1FC()
{
  unint64_t result;

  result = qword_1EF477F90;
  if (!qword_1EF477F90)
  {
    result = MEMORY[0x1BCCFBE84](&protocol conformance descriptor for TrendAnalysisKind, &type metadata for TrendAnalysisKind);
    atomic_store(result, (unint64_t *)&qword_1EF477F90);
  }
  return result;
}

unint64_t sub_1BC9AC240()
{
  unint64_t result;

  result = qword_1EF477FA0;
  if (!qword_1EF477FA0)
  {
    result = MEMORY[0x1BCCFBE84](&protocol conformance descriptor for ParameterOverrides, &type metadata for ParameterOverrides);
    atomic_store(result, (unint64_t *)&qword_1EF477FA0);
  }
  return result;
}

uint64_t sub_1BC9AC284(uint64_t result)
{
  if (result != 1)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t sub_1BC9AC294(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  uint64_t result;

  switch(a5 >> 3)
  {
    case 0:
    case 7:
    case 16:
      goto LABEL_3;
    case 1:
    case 4:
    case 8:
      swift_bridgeObjectRelease();
LABEL_3:
      result = swift_bridgeObjectRelease();
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_1BC9AC2F4()
{
  unint64_t result;

  result = qword_1ED6C6A10;
  if (!qword_1ED6C6A10)
  {
    result = MEMORY[0x1BCCFBE84](&protocol conformance descriptor for QueryConfiguration, &type metadata for QueryConfiguration);
    atomic_store(result, (unint64_t *)&qword_1ED6C6A10);
  }
  return result;
}

unint64_t sub_1BC9AC338()
{
  unint64_t result;

  result = qword_1ED6C36C8;
  if (!qword_1ED6C36C8)
  {
    result = MEMORY[0x1BCCFBE84](&protocol conformance descriptor for TrendPredicate, &type metadata for TrendPredicate);
    atomic_store(result, (unint64_t *)&qword_1ED6C36C8);
  }
  return result;
}

unint64_t sub_1BC9AC37C()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  result = qword_1ED6C45C0;
  if (!qword_1ED6C45C0)
  {
    sub_1BC9ACD0C(255, (unint64_t *)&qword_1ED6C45B8);
    v2 = v1;
    v3 = sub_1BC99B510();
    result = MEMORY[0x1BCCFBE84](MEMORY[0x1E0DEAF40], v2, &v3);
    atomic_store(result, (unint64_t *)&qword_1ED6C45C0);
  }
  return result;
}

unint64_t sub_1BC9AC3EC()
{
  unint64_t result;

  result = qword_1ED6C69D0;
  if (!qword_1ED6C69D0)
  {
    result = MEMORY[0x1BCCFBE84](&protocol conformance descriptor for AnchorDate, &type metadata for AnchorDate);
    atomic_store(result, (unint64_t *)&qword_1ED6C69D0);
  }
  return result;
}

unint64_t sub_1BC9AC430()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  result = qword_1ED6C45A0;
  if (!qword_1ED6C45A0)
  {
    sub_1BC9ACD0C(255, &qword_1ED6C4598);
    v2 = v1;
    v3 = sub_1BC9AC4A0();
    result = MEMORY[0x1BCCFBE84](MEMORY[0x1E0DEAF40], v2, &v3);
    atomic_store(result, (unint64_t *)&qword_1ED6C45A0);
  }
  return result;
}

unint64_t sub_1BC9AC4A0()
{
  unint64_t result;

  result = qword_1ED6C3940;
  if (!qword_1ED6C3940)
  {
    result = MEMORY[0x1BCCFBE84](&protocol conformance descriptor for TrendAnalysisKind, &type metadata for TrendAnalysisKind);
    atomic_store(result, (unint64_t *)&qword_1ED6C3940);
  }
  return result;
}

uint64_t sub_1BC9AC4E4(unint64_t *a1, uint64_t (*a2)(void), uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[2];

  result = *a1;
  if (!result)
  {
    sub_1BC9ACC20(255, &qword_1ED6C4E38, (uint64_t)&type metadata for ParameterOverrides, (uint64_t (*)(uint64_t, ValueMetadata *, uint64_t, unint64_t))MEMORY[0x1E0DEA048]);
    v10 = v9;
    v11[0] = a2();
    v11[1] = a3();
    result = MEMORY[0x1BCCFBE84](a4, v10, v11);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1BC9AC574()
{
  unint64_t result;

  result = qword_1ED6C4E18;
  if (!qword_1ED6C4E18)
  {
    result = MEMORY[0x1BCCFBE84](&protocol conformance descriptor for ParameterOverrides, &type metadata for ParameterOverrides);
    atomic_store(result, (unint64_t *)&qword_1ED6C4E18);
  }
  return result;
}

uint64_t sub_1BC9AC5B8(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 0xD000000000000012 && a2 == 0x80000001BCACED10 || (sub_1BCAB67C8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7461636964657270 && a2 == 0xE900000000000065 || (sub_1BCAB67C8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x676E615265746164 && a2 == 0xEA00000000007365 || (sub_1BCAB67C8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6144676E69646E65 && a2 == 0xEA00000000006574 || (sub_1BCAB67C8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x736973796C616E61 && a2 == 0xED000073646E694BLL || (sub_1BCAB67C8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x80000001BCACED30 || (sub_1BCAB67C8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0xD000000000000017 && a2 == 0x80000001BCACED50)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else
  {
    v5 = sub_1BCAB67C8();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 6;
    else
      return 7;
  }
}

_QWORD *sub_1BC9AC8BC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  char v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  char v32;
  uint64_t v33;
  _BYTE v34[216];
  _OWORD v35[13];
  char v36;
  _BYTE v37[8];
  uint64_t v38;
  uint64_t v39;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  v5 = a2 + 72;
  swift_bridgeObjectRetain();
  sub_1BC9AE330(v5, (uint64_t)v37, (uint64_t (*)(_QWORD))sub_1BC9AE374);
  v6 = 0;
  v39 = *(_QWORD *)(a2 + 64);
  v33 = *(_QWORD *)(a2 + 80);
  v32 = *(_BYTE *)(a2 + 88);
  v7 = v2 - 1;
  v8 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  while (1)
  {
    v9 = *(_BYTE *)(a1 + v6 + 32);
    sub_1BC9AE330((uint64_t)v37, (uint64_t)&v38, (uint64_t (*)(_QWORD))sub_1BC9AE374);
    v10 = v38;
    v11 = 0uLL;
    if (v38 && *(_QWORD *)(v38 + 16))
    {
      sub_1BC9A2B08(v9);
      if ((v13 & 1) != 0)
      {
        v14 = 0;
        v15 = *(_QWORD *)(v10 + 56) + 32 * v12;
        v16 = *(_QWORD *)v15;
        v17 = *(unsigned __int8 *)(v15 + 8);
        v11 = *(_OWORD *)(v15 + 16);
      }
      else
      {
        v16 = 0;
        v17 = 0;
        v14 = 1;
        v11 = 0uLL;
      }
    }
    else
    {
      v16 = 0;
      v17 = 0;
      v14 = 1;
    }
    *(_QWORD *)v34 = v16;
    *(_QWORD *)&v34[8] = v17;
    *(_OWORD *)&v34[16] = v11;
    v34[32] = v14;
    static SignificantChangeEngine.Parameters.makeParameters(dateRange:trendAnalysisKinds:parameterOverrides:absoluteChangeThreshold:)(v9, v39, (uint64_t)v34, v33, v32, (uint64_t)v35);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v8 = sub_1BC9D9CAC(0, v8[2] + 1, 1, v8);
    v19 = v8[2];
    v18 = v8[3];
    if (v19 >= v18 >> 1)
      v8 = sub_1BC9D9CAC((_QWORD *)(v18 > 1), v19 + 1, 1, v8);
    *(_OWORD *)&v34[7] = v35[0];
    *(_OWORD *)&v34[23] = v35[1];
    *(_OWORD *)&v34[71] = v35[4];
    *(_OWORD *)&v34[87] = v35[5];
    *(_OWORD *)&v34[39] = v35[2];
    *(_OWORD *)&v34[55] = v35[3];
    *(_OWORD *)&v34[135] = v35[8];
    *(_OWORD *)&v34[151] = v35[9];
    *(_OWORD *)&v34[103] = v35[6];
    *(_OWORD *)&v34[119] = v35[7];
    v34[215] = v36;
    *(_OWORD *)&v34[183] = v35[11];
    *(_OWORD *)&v34[199] = v35[12];
    *(_OWORD *)&v34[167] = v35[10];
    v8[2] = v19 + 1;
    v20 = &v8[28 * v19];
    *((_BYTE *)v20 + 32) = v9;
    v21 = *(_OWORD *)v34;
    *(_OWORD *)((char *)v20 + 49) = *(_OWORD *)&v34[16];
    *(_OWORD *)((char *)v20 + 33) = v21;
    v22 = *(_OWORD *)&v34[32];
    v23 = *(_OWORD *)&v34[48];
    v24 = *(_OWORD *)&v34[64];
    *(_OWORD *)((char *)v20 + 113) = *(_OWORD *)&v34[80];
    *(_OWORD *)((char *)v20 + 97) = v24;
    *(_OWORD *)((char *)v20 + 81) = v23;
    *(_OWORD *)((char *)v20 + 65) = v22;
    v25 = *(_OWORD *)&v34[96];
    v26 = *(_OWORD *)&v34[112];
    v27 = *(_OWORD *)&v34[128];
    *(_OWORD *)((char *)v20 + 177) = *(_OWORD *)&v34[144];
    *(_OWORD *)((char *)v20 + 161) = v27;
    *(_OWORD *)((char *)v20 + 145) = v26;
    *(_OWORD *)((char *)v20 + 129) = v25;
    v28 = *(_OWORD *)&v34[160];
    v29 = *(_OWORD *)&v34[176];
    v30 = *(_OWORD *)&v34[192];
    *(_QWORD *)((char *)v20 + 241) = *(_QWORD *)&v34[208];
    *(_OWORD *)((char *)v20 + 225) = v30;
    *(_OWORD *)((char *)v20 + 209) = v29;
    *(_OWORD *)((char *)v20 + 193) = v28;
    if (v7 == v6)
      break;
    ++v6;
  }
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t sub_1BC9ACB48(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 40);
  sub_1BC9A98C0(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
  sub_1BC9A9920(v2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1BC9ACBB4(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 40);
  sub_1BC9AC294(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
  sub_1BC9AC284(v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

void sub_1BC9ACC20(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(uint64_t, ValueMetadata *, uint64_t, unint64_t))
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    v8 = sub_1BC9A65E0();
    v9 = a4(a1, &type metadata for DateRange, a3, v8);
    if (!v10)
      atomic_store(v9, a2);
  }
}

unint64_t sub_1BC9ACC84()
{
  unint64_t result;

  result = qword_1ED6C4E00;
  if (!qword_1ED6C4E00)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCABF0A8, &type metadata for ParameterOverrides.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED6C4E00);
  }
  return result;
}

unint64_t sub_1BC9ACCC8()
{
  unint64_t result;

  result = qword_1ED6C4E20;
  if (!qword_1ED6C4E20)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCABF058, &type metadata for CorrelatedTrendConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED6C4E20);
  }
  return result;
}

void sub_1BC9ACD0C(uint64_t a1, unint64_t *a2)
{
  unint64_t v3;
  uint64_t v4;

  if (!*a2)
  {
    v3 = sub_1BCAB6060();
    if (!v4)
      atomic_store(v3, a2);
  }
}

unint64_t sub_1BC9ACD50()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  result = qword_1EF477FB8;
  if (!qword_1EF477FB8)
  {
    sub_1BC9ACD0C(255, &qword_1ED6C45A8);
    v2 = v1;
    v3 = sub_1BC9ACDC0();
    result = MEMORY[0x1BCCFBE84](MEMORY[0x1E0DEAF10], v2, &v3);
    atomic_store(result, (unint64_t *)&qword_1EF477FB8);
  }
  return result;
}

unint64_t sub_1BC9ACDC0()
{
  unint64_t result;

  result = qword_1EF477FC0;
  if (!qword_1EF477FC0)
  {
    result = MEMORY[0x1BCCFBE84](&protocol conformance descriptor for TrendConfiguration, &type metadata for TrendConfiguration);
    atomic_store(result, (unint64_t *)&qword_1EF477FC0);
  }
  return result;
}

void sub_1BC9ACE04(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  if (!*a2)
  {
    v9 = a3();
    v10 = a5(a1, a4, v9);
    if (!v11)
      atomic_store(v10, a2);
  }
}

unint64_t sub_1BC9ACE60()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  result = qword_1ED6C45B0;
  if (!qword_1ED6C45B0)
  {
    sub_1BC9ACD0C(255, &qword_1ED6C45A8);
    v2 = v1;
    v3 = sub_1BC9ACED0();
    result = MEMORY[0x1BCCFBE84](MEMORY[0x1E0DEAF40], v2, &v3);
    atomic_store(result, (unint64_t *)&qword_1ED6C45B0);
  }
  return result;
}

unint64_t sub_1BC9ACED0()
{
  unint64_t result;

  result = qword_1ED6C3968;
  if (!qword_1ED6C3968)
  {
    result = MEMORY[0x1BCCFBE84](&protocol conformance descriptor for TrendConfiguration, &type metadata for TrendConfiguration);
    atomic_store(result, (unint64_t *)&qword_1ED6C3968);
  }
  return result;
}

unint64_t sub_1BC9ACF18()
{
  unint64_t result;

  result = qword_1EF477FC8;
  if (!qword_1EF477FC8)
  {
    result = MEMORY[0x1BCCFBE84](&protocol conformance descriptor for TrendAnalysisKind, &type metadata for TrendAnalysisKind);
    atomic_store(result, (unint64_t *)&qword_1EF477FC8);
  }
  return result;
}

unint64_t sub_1BC9ACF60()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EF477FD0;
  if (!qword_1EF477FD0)
  {
    sub_1BC9ACD0C(255, &qword_1ED6C4598);
    result = MEMORY[0x1BCCFBE84](MEMORY[0x1E0DEAF50], v1);
    atomic_store(result, (unint64_t *)&qword_1EF477FD0);
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for TrendPredicate(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for DiagramConfiguration.Line()
{
  return swift_bridgeObjectRelease();
}

_QWORD *assignWithCopy for TrendPredicate(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *__swift_memcpy8_8(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  return result;
}

_QWORD *assignWithTake for TrendPredicate(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for TrendPredicate(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 8))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for TrendPredicate(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for TrendPredicate()
{
  return &type metadata for TrendPredicate;
}

uint64_t destroy for TrendConfiguration(uint64_t a1)
{
  sub_1BC9AC294(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
  if (*(_QWORD *)(a1 + 40) != 1)
    swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for TrendConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_BYTE *)(a2 + 32);
  sub_1BC9A98C0(*(_QWORD *)a2, v5, v6, v7, v8);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  *(_BYTE *)(a1 + 32) = v8;
  v9 = *(_QWORD *)(a2 + 40);
  if (v9 != 1)
    v9 = swift_bridgeObjectRetain();
  v10 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v9;
  *(_QWORD *)(a1 + 48) = v10;
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v11 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v11;
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for TrendConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_BYTE *)(a2 + 32);
  sub_1BC9A98C0(*(_QWORD *)a2, v5, v6, v7, v8);
  v9 = *(_QWORD *)a1;
  v10 = *(_QWORD *)(a1 + 8);
  v11 = *(_QWORD *)(a1 + 16);
  v12 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  v13 = *(_BYTE *)(a1 + 32);
  *(_BYTE *)(a1 + 32) = v8;
  sub_1BC9AC294(v9, v10, v11, v12, v13);
  v14 = (uint64_t *)(a1 + 40);
  v15 = *(_QWORD *)(a2 + 40);
  if (*(_QWORD *)(a1 + 40) == 1)
  {
    if (v15 != 1)
    {
      *v14 = v15;
      swift_bridgeObjectRetain();
      goto LABEL_9;
    }
    v16 = 1;
  }
  else
  {
    if (v15 != 1)
    {
      *v14 = v15;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_9;
    }
    sub_1BC9AD364(a1 + 40);
    v16 = *(_QWORD *)(a2 + 40);
  }
  *v14 = v16;
LABEL_9:
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v17 = *(_QWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = v17;
  return a1;
}

uint64_t sub_1BC9AD364(uint64_t a1)
{
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for TrendConfiguration(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  unsigned __int8 v10;
  uint64_t *v11;
  uint64_t v12;

  v4 = *(_BYTE *)(a2 + 32);
  v5 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v9;
  v10 = *(_BYTE *)(a1 + 32);
  *(_BYTE *)(a1 + 32) = v4;
  sub_1BC9AC294(v5, v6, v7, v8, v10);
  v11 = (uint64_t *)(a1 + 40);
  v12 = *(_QWORD *)(a2 + 40);
  if (*(_QWORD *)(a1 + 40) != 1)
  {
    if (v12 != 1)
    {
      *v11 = v12;
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    sub_1BC9AD364(a1 + 40);
    v12 = 1;
  }
  *v11 = v12;
LABEL_6:
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  return a1;
}

uint64_t getEnumTagSinglePayload for TrendConfiguration(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 89))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 48);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TrendConfiguration(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 88) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 89) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 48) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 89) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for TrendConfiguration()
{
  return &type metadata for TrendConfiguration;
}

ValueMetadata *type metadata accessor for TrendAnalysisKind()
{
  return &type metadata for TrendAnalysisKind;
}

ValueMetadata *type metadata accessor for ParameterOverrides()
{
  return &type metadata for ParameterOverrides;
}

uint64_t destroy for CorrelatedTrendConfiguration()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *_s19HealthVisualization28CorrelatedTrendConfigurationVwCP_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for CorrelatedTrendConfiguration(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for CorrelatedTrendConfiguration(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for CorrelatedTrendConfiguration(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CorrelatedTrendConfiguration(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for CorrelatedTrendConfiguration()
{
  return &type metadata for CorrelatedTrendConfiguration;
}

uint64_t _s19HealthVisualization17TrendAnalysisKindOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1BC9AD744 + 4 * byte_1BCABE94E[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1BC9AD778 + 4 * byte_1BCABE949[v4]))();
}

uint64_t sub_1BC9AD778(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BC9AD780(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BC9AD788);
  return result;
}

uint64_t sub_1BC9AD794(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BC9AD79CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1BC9AD7A0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BC9AD7A8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CorrelatedTrendConfiguration.CodingKeys()
{
  return &type metadata for CorrelatedTrendConfiguration.CodingKeys;
}

uint64_t getEnumTagSinglePayload for ParameterOverrides.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 2 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 2) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 2;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 2;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 2;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 3;
  v8 = v6 - 3;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ParameterOverrides.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1BC9AD8A0 + 4 * byte_1BCABE958[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1BC9AD8D4 + 4 * byte_1BCABE953[v4]))();
}

uint64_t sub_1BC9AD8D4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BC9AD8DC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BC9AD8E4);
  return result;
}

uint64_t sub_1BC9AD8F0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BC9AD8F8);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1BC9AD8FC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BC9AD904(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *sub_1BC9AD910(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for ParameterOverrides.CodingKeys()
{
  return &type metadata for ParameterOverrides.CodingKeys;
}

uint64_t getEnumTagSinglePayload for TrendConfiguration.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFA)
    goto LABEL_17;
  if (a2 + 6 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 6) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 6;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 6;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 6;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 7;
  v8 = v6 - 7;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for TrendConfiguration.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_1BC9ADA04 + 4 * byte_1BCABE962[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_1BC9ADA38 + 4 * byte_1BCABE95D[v4]))();
}

uint64_t sub_1BC9ADA38(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BC9ADA40(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BC9ADA48);
  return result;
}

uint64_t sub_1BC9ADA54(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BC9ADA5CLL);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_1BC9ADA60(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BC9ADA68(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TrendConfiguration.CodingKeys()
{
  return &type metadata for TrendConfiguration.CodingKeys;
}

uint64_t getEnumTagSinglePayload for TrendPredicate.CodingKeys(unsigned int *a1, int a2)
{
  int v2;
  int v3;

  if (!a2)
    return 0;
  if ((a2 + 1) >= 0x10000)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) < 0x100)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
    return *a1;
  if (v3 == 2)
    return *(unsigned __int16 *)a1;
  return *(unsigned __int8 *)a1;
}

uint64_t storeEnumTagSinglePayload for TrendPredicate.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1BC9ADB14 + 4 * byte_1BCABE967[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1BC9ADB34 + 4 * byte_1BCABE96C[v4]))();
}

_BYTE *sub_1BC9ADB14(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1BC9ADB34(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1BC9ADB3C(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1BC9ADB44(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1BC9ADB4C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1BC9ADB54(_DWORD *result)
{
  *result = 0;
  return result;
}

uint64_t sub_1BC9ADB60()
{
  return 0;
}

ValueMetadata *type metadata accessor for TrendPredicate.CodingKeys()
{
  return &type metadata for TrendPredicate.CodingKeys;
}

unint64_t sub_1BC9ADB7C()
{
  unint64_t result;

  result = qword_1EF477FD8;
  if (!qword_1EF477FD8)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCABEE08, &type metadata for TrendPredicate.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF477FD8);
  }
  return result;
}

unint64_t sub_1BC9ADBC4()
{
  unint64_t result;

  result = qword_1EF477FE0;
  if (!qword_1EF477FE0)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCABEEC0, &type metadata for TrendConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF477FE0);
  }
  return result;
}

unint64_t sub_1BC9ADC0C()
{
  unint64_t result;

  result = qword_1EF477FE8;
  if (!qword_1EF477FE8)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCABEF78, &type metadata for ParameterOverrides.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF477FE8);
  }
  return result;
}

unint64_t sub_1BC9ADC54()
{
  unint64_t result;

  result = qword_1EF477FF0;
  if (!qword_1EF477FF0)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCABF030, &type metadata for CorrelatedTrendConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF477FF0);
  }
  return result;
}

unint64_t sub_1BC9ADC9C()
{
  unint64_t result;

  result = qword_1ED6C4E30;
  if (!qword_1ED6C4E30)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCABEFA0, &type metadata for CorrelatedTrendConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED6C4E30);
  }
  return result;
}

unint64_t sub_1BC9ADCE4()
{
  unint64_t result;

  result = qword_1ED6C4E28;
  if (!qword_1ED6C4E28)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCABEFC8, &type metadata for CorrelatedTrendConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED6C4E28);
  }
  return result;
}

unint64_t sub_1BC9ADD2C()
{
  unint64_t result;

  result = qword_1ED6C4E10;
  if (!qword_1ED6C4E10)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCABEEE8, &type metadata for ParameterOverrides.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED6C4E10);
  }
  return result;
}

unint64_t sub_1BC9ADD74()
{
  unint64_t result;

  result = qword_1ED6C4E08;
  if (!qword_1ED6C4E08)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCABEF10, &type metadata for ParameterOverrides.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED6C4E08);
  }
  return result;
}

unint64_t sub_1BC9ADDBC()
{
  unint64_t result;

  result = qword_1ED6C3960;
  if (!qword_1ED6C3960)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCABEE30, &type metadata for TrendConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED6C3960);
  }
  return result;
}

unint64_t sub_1BC9ADE04()
{
  unint64_t result;

  result = qword_1ED6C3958;
  if (!qword_1ED6C3958)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCABEE58, &type metadata for TrendConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED6C3958);
  }
  return result;
}

unint64_t sub_1BC9ADE4C()
{
  unint64_t result;

  result = qword_1ED6C36C0;
  if (!qword_1ED6C36C0)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCABED78, &type metadata for TrendPredicate.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED6C36C0);
  }
  return result;
}

unint64_t sub_1BC9ADE94()
{
  unint64_t result;

  result = qword_1ED6C36B8;
  if (!qword_1ED6C36B8)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCABEDA0, &type metadata for TrendPredicate.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED6C36B8);
  }
  return result;
}

uint64_t sub_1BC9ADED8(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 0xD000000000000011 && a2 == 0x80000001BCACED70 || (sub_1BCAB67C8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x80000001BCACED90 || (sub_1BCAB67C8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000001BCACEDB0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v5 = sub_1BCAB67C8();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_1BC9AE018(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 0xD000000000000014 && a2 == 0x80000001BCACEDD0 || (sub_1BCAB67C8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x80000001BCACEDF0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v5 = sub_1BCAB67C8();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

unint64_t sub_1BC9AE104()
{
  unint64_t result;

  result = qword_1ED6C3938;
  if (!qword_1ED6C3938)
  {
    result = MEMORY[0x1BCCFBE84](&protocol conformance descriptor for TrendAnalysisKind, &type metadata for TrendAnalysisKind);
    atomic_store(result, (unint64_t *)&qword_1ED6C3938);
  }
  return result;
}

uint64_t sub_1BC9AE148(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SignificantChange.Period(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1BC9AE18C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for SignificantChange.Period(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_1BC9AE1C8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EF477FF8)
  {
    sub_1BC9AE21C();
    v0 = sub_1BCAB6384();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EF477FF8);
  }
}

void sub_1BC9AE21C()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_1EF478000)
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1EF478000);
  }
}

uint64_t sub_1BC9AE280(uint64_t a1)
{
  int v1;
  unsigned int v2;

  if (*(unsigned __int8 *)(a1 + 113) <= 4u)
    v1 = 4;
  else
    v1 = *(unsigned __int8 *)(a1 + 113);
  v2 = v1 - 4;
  if (*(unsigned __int8 *)(a1 + 113) >= 4u)
    return v2;
  else
    return 0;
}

unint64_t sub_1BC9AE2A0()
{
  unint64_t result;

  result = qword_1ED6C6F70;
  if (!qword_1ED6C6F70)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1ED6C6F70);
  }
  return result;
}

double sub_1BC9AE2F4(uint64_t a1)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_QWORD *)(a1 + 112) = 1280;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_BYTE *)(a1 + 216) = 0;
  return result;
}

uint64_t sub_1BC9AE330(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

void sub_1BC9AE374()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EF478008)
  {
    sub_1BC9ACC20(255, &qword_1ED6C4E38, (uint64_t)&type metadata for ParameterOverrides, (uint64_t (*)(uint64_t, ValueMetadata *, uint64_t, unint64_t))MEMORY[0x1E0DEA048]);
    v0 = sub_1BCAB6384();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EF478008);
  }
}

uint64_t AudiogramQueryConfiguration.mostRecentSample.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v2 = *(_QWORD *)(v1 + 24);
  v3 = *(_BYTE *)(v1 + 32);
  *(_QWORD *)a1 = *(_QWORD *)v1;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(v1 + 8);
  *(_QWORD *)(a1 + 24) = v2;
  *(_BYTE *)(a1 + 32) = v3;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

BOOL static AudiogramQueryConfiguration.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  BOOL v11;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(unsigned __int8 *)(a1 + 32);
  v7 = *(_QWORD *)(a2 + 8);
  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(_QWORD *)(a2 + 24);
  v10 = *(unsigned __int8 *)(a2 + 32);
  if (v3)
  {
    if (!v7)
      return 0;
    v11 = *(_QWORD *)a1 == *(_QWORD *)a2 && v3 == v7;
    if (!v11 && (sub_1BCAB67C8() & 1) == 0)
      return 0;
  }
  else if (v7)
  {
    return 0;
  }
  if (!v5)
  {
    if (v9)
      return 0;
    return ((v6 ^ v10) & 1) == 0;
  }
  if (v9)
  {
    if (v4 == v8 && v5 == v9)
      return v6 == v10;
    if ((sub_1BCAB67C8() & 1) != 0)
      return ((v6 ^ v10) & 1) == 0;
  }
  return 0;
}

unint64_t sub_1BC9AE50C()
{
  return 0xD000000000000010;
}

uint64_t sub_1BC9AE528@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1BC9AED08(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_1BC9AE550()
{
  sub_1BC9AE87C();
  return sub_1BCAB68D0();
}

uint64_t sub_1BC9AE578()
{
  sub_1BC9AE87C();
  return sub_1BCAB68DC();
}

uint64_t AudiogramQueryConfiguration.encode(to:)(_QWORD *a1)
{
  __int128 *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  char v16;

  sub_1BC9AE904(0, &qword_1EF478010, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED170]);
  v4 = v3;
  v12 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v11 - v5;
  v11 = *v1;
  v8 = *((_QWORD *)v1 + 2);
  v7 = *((_QWORD *)v1 + 3);
  v9 = *((_BYTE *)v1 + 32);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BC9AE87C();
  sub_1BCAB68B8();
  v13 = v11;
  v14 = v8;
  v15 = v7;
  v16 = v9;
  sub_1BC9AE8C0();
  sub_1BCAB6774();
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v6, v4);
}

uint64_t AudiogramQueryConfiguration.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char v10;
  __int128 v11;
  _OWORD v13[2];
  char v14;

  sub_1BC9AE904(0, &qword_1ED6C6EE8, MEMORY[0x1E0DED048]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v9 = (char *)v13 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BC9AE87C();
  sub_1BCAB68AC();
  if (!v2)
  {
    sub_1BC9AE960();
    sub_1BCAB66E4();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    v10 = v14;
    v11 = v13[1];
    *(_OWORD *)a2 = v13[0];
    *(_OWORD *)(a2 + 16) = v11;
    *(_BYTE *)(a2 + 32) = v10;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_1BC9AE80C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return AudiogramQueryConfiguration.init(from:)(a1, a2);
}

uint64_t sub_1BC9AE820(_QWORD *a1)
{
  return AudiogramQueryConfiguration.encode(to:)(a1);
}

uint64_t sub_1BC9AE834(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[2];
  char v8;
  _OWORD v9[2];
  char v10;

  v2 = *(_BYTE *)(a1 + 32);
  v3 = *(_BYTE *)(a2 + 32);
  v4 = *(_OWORD *)(a1 + 16);
  v9[0] = *(_OWORD *)a1;
  v9[1] = v4;
  v10 = v2;
  v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  v8 = v3;
  return _s19HealthVisualization34MostRecentSampleQueryConfigurationV2eeoiySbAC_ACtFZ_0((uint64_t)v9, (uint64_t)v7) & 1;
}

unint64_t sub_1BC9AE87C()
{
  unint64_t result;

  result = qword_1ED6C6B60;
  if (!qword_1ED6C6B60)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCABF310, &type metadata for AudiogramQueryConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED6C6B60);
  }
  return result;
}

unint64_t sub_1BC9AE8C0()
{
  unint64_t result;

  result = qword_1ED6C43B0;
  if (!qword_1ED6C43B0)
  {
    result = MEMORY[0x1BCCFBE84](&protocol conformance descriptor for MostRecentSampleQueryConfiguration, &type metadata for MostRecentSampleQueryConfiguration);
    atomic_store(result, (unint64_t *)&qword_1ED6C43B0);
  }
  return result;
}

void sub_1BC9AE904(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_1BC9AE87C();
    v7 = a3(a1, &type metadata for AudiogramQueryConfiguration.CodingKeys, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

unint64_t sub_1BC9AE960()
{
  unint64_t result;

  result = qword_1ED6C6BE8;
  if (!qword_1ED6C6BE8)
  {
    result = MEMORY[0x1BCCFBE84](&protocol conformance descriptor for MostRecentSampleQueryConfiguration, &type metadata for MostRecentSampleQueryConfiguration);
    atomic_store(result, (unint64_t *)&qword_1ED6C6BE8);
  }
  return result;
}

uint64_t destroy for MostRecentSampleQueryConfiguration()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for MostRecentSampleQueryConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for MostRecentSampleQueryConfiguration(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return a1;
}

uint64_t assignWithTake for MostRecentSampleQueryConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for MostRecentSampleQueryConfiguration(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 33))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for MostRecentSampleQueryConfiguration(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 33) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for AudiogramQueryConfiguration()
{
  return &type metadata for AudiogramQueryConfiguration;
}

uint64_t storeEnumTagSinglePayload for AudiogramQueryConfiguration.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1BC9AEBD4 + 4 * byte_1BCABF1A0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1BC9AEBF4 + 4 * byte_1BCABF1A5[v4]))();
}

_BYTE *sub_1BC9AEBD4(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1BC9AEBF4(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1BC9AEBFC(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1BC9AEC04(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1BC9AEC0C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1BC9AEC14(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for AudiogramQueryConfiguration.CodingKeys()
{
  return &type metadata for AudiogramQueryConfiguration.CodingKeys;
}

unint64_t sub_1BC9AEC34()
{
  unint64_t result;

  result = qword_1EF478018;
  if (!qword_1EF478018)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCABF2E8, &type metadata for AudiogramQueryConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF478018);
  }
  return result;
}

unint64_t sub_1BC9AEC7C()
{
  unint64_t result;

  result = qword_1ED6C6B70;
  if (!qword_1ED6C6B70)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCABF258, &type metadata for AudiogramQueryConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED6C6B70);
  }
  return result;
}

unint64_t sub_1BC9AECC4()
{
  unint64_t result;

  result = qword_1ED6C6B68;
  if (!qword_1ED6C6B68)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCABF280, &type metadata for AudiogramQueryConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED6C6B68);
  }
  return result;
}

uint64_t sub_1BC9AED08(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;

  if (a1 == 0xD000000000000010 && a2 == 0x80000001BCACEE50)
  {
    swift_bridgeObjectRelease();
    v2 = 0;
  }
  else
  {
    v3 = sub_1BCAB67C8();
    swift_bridgeObjectRelease();
    v2 = v3 ^ 1;
  }
  return v2 & 1;
}

void HKHealthStore.statisticsCollectionPublisher(for:configuration:anchorDateOverride:dateInterval:receivesUpdates:predicate:cacheSettings:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, void *a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  void *v18;
  id v19;
  id v20;
  id v21;
  id v22;
  void *v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[2];
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;

  v36 = a7;
  v34 = a5;
  v30 = a3;
  v32 = a8;
  v33 = a1;
  v11 = sub_1BCAB4C74();
  v37 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  sub_1BC9AFF04(0, &qword_1ED6C7280, (void (*)(uint64_t))MEMORY[0x1E0CB0870]);
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)v27 - v13;
  v31 = sub_1BCAB4E54();
  v38 = *(_QWORD *)(v31 - 8);
  MEMORY[0x1E0C80A78](v31);
  v16 = (char *)v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *(_QWORD *)(a2 + 8);
  v28 = *(unsigned __int8 *)(a2 + 16);
  v29 = *(unsigned __int8 *)(a2 + 17);
  sub_1BC9A649C(0, &qword_1ED6C6EB0);
  v35 = a4;
  v18 = (void *)sub_1BCAB6300();
  v40 = MEMORY[0x1E0DEE9D8];
  if (v18)
  {
    v19 = a6;
    v20 = v18;
    MEMORY[0x1BCCFABF4]();
    if (*(_QWORD *)((v40 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v40 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      sub_1BCAB6030();
    sub_1BCAB6054();
    sub_1BCAB6024();
    if (!a6)
    {
LABEL_10:

      sub_1BC9A649C(0, (unint64_t *)&qword_1ED6C2E60);
      v23 = (void *)sub_1BCAB600C();
      swift_bridgeObjectRelease();
      v24 = objc_msgSend((id)objc_opt_self(), sel_andPredicateWithSubpredicates_, v23);

      if (*(_QWORD *)(v17 + 16))
      {
        v27[1] = v11;
        swift_bridgeObjectRetain();
        __asm { BR              X9 }
      }
      sub_1BC9AFC58(v30, (uint64_t)v14);
      v25 = v38;
      v26 = v31;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48))(v14, 1, v31) == 1)
      {
        v39 = v28;
        AnchorDate.date.getter();
        sub_1BC9AFCAC((uint64_t)v14);
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v16, v14, v26);
      }
      __asm { BR              X9 }
    }
  }
  else
  {
    v21 = a6;
    if (!a6)
      goto LABEL_10;
  }
  v22 = a6;
  MEMORY[0x1BCCFABF4]();
  if (*(_QWORD *)((v40 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v40 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
    sub_1BCAB6030();
  sub_1BCAB6054();
  sub_1BCAB6024();
  goto LABEL_10;
}

uint64_t HKHealthStore.mostRecentSamplePublisher(for:predicate:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  _QWORD v17[2];

  v4 = sub_1BCAB6168();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BC9AFD10();
  v9 = v8;
  v10 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v12 = (char *)v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BC9AFE08();
  v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_1BCABF370;
  *(_QWORD *)(v13 + 32) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB6A88]), sel_initWithSampleType_predicate_, a1, a2);
  v17[1] = v13;
  sub_1BCAB6024();
  v14 = objc_msgSend((id)objc_opt_self(), sel_sortDescriptorsForMostRecentSamples);
  sub_1BC9A649C(0, &qword_1ED6C6E78);
  sub_1BCAB6018();

  sub_1BCAB6174();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1BC9AFDA4();
  sub_1BC996948(&qword_1ED6C4D60, (uint64_t (*)(uint64_t))MEMORY[0x1E0D2BFD8], MEMORY[0x1E0D2BFD0]);
  sub_1BCAB58BC();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  sub_1BC996948(&qword_1ED6C4D20, (uint64_t (*)(uint64_t))sub_1BC9AFD10, MEMORY[0x1E0C95950]);
  v15 = sub_1BCAB58A4();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  return v15;
}

uint64_t sub_1BC9AF568@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  id v6;

  v3 = *a1;
  if ((unint64_t)*a1 >> 62)
  {
    swift_bridgeObjectRetain();
    result = sub_1BCAB65DC();
    v4 = result;
    if (!result)
      goto LABEL_7;
  }
  else
  {
    v4 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (!v4)
    {
LABEL_7:
      result = swift_bridgeObjectRelease();
      *a2 = v4;
      return result;
    }
  }
  if ((v3 & 0xC000000000000001) != 0)
  {
    v6 = (id)MEMORY[0x1BCCFB0D4](0, v3);
    goto LABEL_6;
  }
  if (*(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v6 = *(id *)(v3 + 32);
LABEL_6:
    v4 = (uint64_t)v6;
    goto LABEL_7;
  }
  __break(1u);
  return result;
}

uint64_t HKHealthStore.cumulativeTimePeriodPublisher(for:dateInterval:additionalPredicate:configuration:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  id v14;
  id v15;
  void *v16;
  id v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;

  v5 = sub_1BCAB6168();
  v26 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BC9AFE60();
  v27 = *(_QWORD *)(v8 - 8);
  v28 = v8;
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BC9AFE08();
  v11 = swift_allocObject();
  v29 = xmmword_1BCABF370;
  *(_OWORD *)(v11 + 16) = xmmword_1BCABF370;
  v12 = (void *)objc_opt_self();
  v13 = (void *)sub_1BCAB4B78();
  v14 = objc_msgSend(v12, sel_predicateForSamplesWithinDateInterval_options_, v13, 0);

  *(_QWORD *)(v11 + 32) = v14;
  v30 = v11;
  sub_1BCAB6024();
  if (a3)
  {
    v15 = a3;
    MEMORY[0x1BCCFABF4]();
    if (*(_QWORD *)((v30 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v30 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      sub_1BCAB6030();
    sub_1BCAB6054();
    sub_1BCAB6024();
  }
  sub_1BC9A649C(0, (unint64_t *)&qword_1ED6C2E60);
  v16 = (void *)sub_1BCAB600C();
  swift_bridgeObjectRelease();
  v17 = objc_msgSend((id)objc_opt_self(), sel_andPredicateWithSubpredicates_, v16);

  v18 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB6A88]), sel_initWithSampleType_predicate_, a1, v17);
  v19 = swift_allocObject();
  *(_OWORD *)(v19 + 16) = v29;
  *(_QWORD *)(v19 + 32) = v18;
  v30 = v19;
  sub_1BCAB6024();
  v20 = swift_allocObject();
  *(_OWORD *)(v20 + 16) = v29;
  sub_1BC9A649C(0, &qword_1ED6C6E78);
  swift_getKeyPath();
  v21 = v18;
  *(_QWORD *)(v20 + 32) = sub_1BCAB6210();
  v30 = v20;
  sub_1BCAB6024();
  sub_1BCAB6174();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1BC9AFF04(0, &qword_1ED6C45F0, (void (*)(uint64_t))sub_1BC9AFF50);
  sub_1BC996948(&qword_1ED6C4D60, (uint64_t (*)(uint64_t))MEMORY[0x1E0D2BFD8], MEMORY[0x1E0D2BFD0]);
  sub_1BCAB58BC();
  (*(void (**)(char *, uint64_t))(v26 + 8))(v7, v5);
  sub_1BC996948(&qword_1ED6C4D10, (uint64_t (*)(uint64_t))sub_1BC9AFE60, MEMORY[0x1E0C95950]);
  v22 = v28;
  v23 = sub_1BCAB58A4();

  (*(void (**)(char *, uint64_t))(v27 + 8))(v10, v22);
  return v23;
}

unint64_t sub_1BC9AF9BC@<X0>(unint64_t *a1@<X0>, double *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t result;
  id v14;
  void *v15;
  double v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  void (*v21)(char *, char *, uint64_t);
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  sub_1BC9AFFD0();
  v5 = v4;
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v27 - v9;
  v11 = *a1;
  if (!(v11 >> 62))
  {
    v12 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v12)
      goto LABEL_3;
LABEL_13:
    swift_bridgeObjectRelease();
    sub_1BC9AFF50();
    return (*(uint64_t (**)(double *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(a2, 1, 1, v26);
  }
  swift_bridgeObjectRetain();
  v12 = sub_1BCAB65DC();
  if (!v12)
    goto LABEL_13;
LABEL_3:
  result = v12 - 1;
  if (__OFSUB__(v12, 1))
  {
    __break(1u);
    goto LABEL_15;
  }
  if ((v11 & 0xC000000000000001) != 0)
  {
LABEL_15:
    v14 = (id)MEMORY[0x1BCCFB0D4](result, v11);
    goto LABEL_8;
  }
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (result >= *(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_17:
    __break(1u);
    return result;
  }
  v14 = *(id *)(v11 + 8 * result + 32);
LABEL_8:
  v15 = v14;
  swift_bridgeObjectRelease();
  v16 = static MostRecentTimePeriodQuerySupport.totalDuration(for:referenceSample:)(v11, v15);
  v17 = &v10[*(int *)(v5 + 48)];
  static MostRecentTimePeriodQuerySupport.timestamp(sample:)(v15);
  if (v11 >> 62)
  {
    swift_bridgeObjectRetain();
    v18 = sub_1BCAB65DC();

    swift_bridgeObjectRelease();
  }
  else
  {
    v18 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10);

  }
  v19 = &v7[*(int *)(v5 + 48)];
  v20 = sub_1BCAB4E54();
  v21 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 32);
  v21(v19, v17, v20);
  sub_1BC9AFF50();
  v23 = v22;
  v24 = (char *)a2 + *(int *)(v22 + 48);
  v25 = *(int *)(v23 + 64);
  *a2 = v16;
  v21(v24, v19, v20);
  *(_QWORD *)((char *)a2 + v25) = v18;
  return (*(uint64_t (**)(double *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(a2, 0, 1, v23);
}

void sub_1BC9AFC0C(id *a1)
{
  id v1;

  v1 = objc_msgSend(*a1, sel_endDate);
  sub_1BCAB4E24();

}

uint64_t sub_1BC9AFC58(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1BC9AFF04(0, &qword_1ED6C7280, (void (*)(uint64_t))MEMORY[0x1E0CB0870]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1BC9AFCAC(uint64_t a1)
{
  uint64_t v2;

  sub_1BC9AFF04(0, &qword_1ED6C7280, (void (*)(uint64_t))MEMORY[0x1E0CB0870]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

void sub_1BC9AFD10()
{
  uint64_t (*v0)(uint64_t);
  unint64_t v1;
  uint64_t v2;

  if (!qword_1ED6C4D28)
  {
    sub_1BCAB6168();
    v0 = (uint64_t (*)(uint64_t))MEMORY[0x1E0D2BFD8];
    sub_1BC9AFDA4();
    sub_1BC996948(&qword_1ED6C4D60, v0, MEMORY[0x1E0D2BFD0]);
    v1 = sub_1BCAB57F0();
    if (!v2)
      atomic_store(v1, (unint64_t *)&qword_1ED6C4D28);
  }
}

void sub_1BC9AFDA4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED6C70B8)
  {
    sub_1BC9A649C(255, &qword_1ED6C7538);
    v0 = sub_1BCAB6384();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED6C70B8);
  }
}

void sub_1BC9AFE08()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED6C6710)
  {
    v0 = sub_1BCAB67A4();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED6C6710);
  }
}

void sub_1BC9AFE60()
{
  uint64_t (*v0)(uint64_t);
  unint64_t v1;
  uint64_t v2;

  if (!qword_1ED6C4D18)
  {
    sub_1BCAB6168();
    v0 = (uint64_t (*)(uint64_t))MEMORY[0x1E0D2BFD8];
    sub_1BC9AFF04(255, &qword_1ED6C45F0, (void (*)(uint64_t))sub_1BC9AFF50);
    sub_1BC996948(&qword_1ED6C4D60, v0, MEMORY[0x1E0D2BFD0]);
    v1 = sub_1BCAB57F0();
    if (!v2)
      atomic_store(v1, (unint64_t *)&qword_1ED6C4D18);
  }
}

void sub_1BC9AFF04(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    v4 = sub_1BCAB6384();
    if (!v5)
      atomic_store(v4, a2);
  }
}

void sub_1BC9AFF50()
{
  unint64_t TupleTypeMetadata3;
  uint64_t v1;

  if (!qword_1ED6C3188)
  {
    sub_1BCAB4E54();
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1)
      atomic_store(TupleTypeMetadata3, (unint64_t *)&qword_1ED6C3188);
  }
}

char *keypath_get_selector_endDate()
{
  return sel_endDate;
}

void sub_1BC9AFFD0()
{
  unint64_t TupleTypeMetadata3;
  uint64_t v1;

  if (!qword_1ED6C4608)
  {
    sub_1BCAB4E54();
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1)
      atomic_store(TupleTypeMetadata3, (unint64_t *)&qword_1ED6C4608);
  }
}

void __swiftcall QueryConfigurationOverrides.datePredicate()(NSPredicate_optional *__return_ptr retstr)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  char *v12;
  void *v13;
  void *v14;
  uint64_t v15;

  v3 = v2;
  v4 = v1;
  sub_1BC9B0190();
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1BCAB4BD8();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, uint64_t, __n128))(v3 + 8))(v4, v3, v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
  {
    sub_1BC9B01E4((uint64_t)v7);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v12, v7, v8);
    v13 = (void *)objc_opt_self();
    v14 = (void *)sub_1BCAB4B78();
    objc_msgSend(v13, sel_predicateForSamplesWithinDateInterval_options_, v14, 0);

    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  }
}

void sub_1BC9B0190()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED6C71E0)
  {
    sub_1BCAB4BD8();
    v0 = sub_1BCAB6384();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED6C71E0);
  }
}

uint64_t sub_1BC9B01E4(uint64_t a1)
{
  uint64_t v2;

  sub_1BC9B0190();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t dispatch thunk of QueryConfigurationOverrides.dateInterval.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

double AudioExposureStatistics.leqValue.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

uint64_t AudioExposureStatistics.leqUnitString.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

double AudioExposureStatistics.secondsListened.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 24);
}

uint64_t AudioExposureStatistics.daysAggregated.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 32);
}

uint64_t AudioExposureStatistics.lastUpdated.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for AudioExposureStatistics(0) + 32);
  v4 = sub_1BCAB4E54();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for AudioExposureStatistics(uint64_t a1)
{
  return sub_1BC9B359C(a1, qword_1ED6C73F8);
}

uint64_t sub_1BC9B02CC()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1BC9B02FC + 4 * byte_1BCABF3D0[*v0]))(0x65756C615671656CLL, 0xE800000000000000);
}

uint64_t sub_1BC9B02FC()
{
  return 0x5374696E5571656CLL;
}

uint64_t sub_1BC9B0320()
{
  return 0x4C73646E6F636573;
}

uint64_t sub_1BC9B0344()
{
  return 0x7267674173796164;
}

uint64_t sub_1BC9B0368()
{
  return 0x616470557473616CLL;
}

uint64_t sub_1BC9B0388@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1BC9B29D4(a1, a2);
  *a3 = result;
  return result;
}

void sub_1BC9B03AC(_BYTE *a1@<X8>)
{
  *a1 = 5;
}

uint64_t sub_1BC9B03B8()
{
  sub_1BC9B28F4();
  return sub_1BCAB68D0();
}

uint64_t sub_1BC9B03E0()
{
  sub_1BC9B28F4();
  return sub_1BCAB68DC();
}

uint64_t AudioExposureStatistics.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE v9[16];

  sub_1BC9B2938(0, &qword_1ED6C4730, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED170]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v7 = &v9[-v6];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BC9B28F4();
  sub_1BCAB68B8();
  v9[15] = 0;
  sub_1BCAB675C();
  if (!v1)
  {
    v9[14] = 1;
    sub_1BCAB6744();
    v9[13] = 2;
    sub_1BCAB675C();
    v9[12] = 3;
    sub_1BCAB6768();
    type metadata accessor for AudioExposureStatistics(0);
    v9[11] = 4;
    sub_1BCAB4E54();
    sub_1BC9B2994(&qword_1ED6C6978, MEMORY[0x1E0CB0890]);
    sub_1BCAB6774();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t AudioExposureStatistics.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char v27;
  char v28;
  char v29;
  char v30;

  v21 = a2;
  v23 = sub_1BCAB4E54();
  v20 = *(_QWORD *)(v23 - 8);
  MEMORY[0x1E0C80A78](v23);
  v22 = (char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BC9B2938(0, &qword_1ED6C6ED8, MEMORY[0x1E0DED048]);
  v24 = v4;
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v20 - v6;
  v8 = type metadata accessor for AudioExposureStatistics(0);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BC9B28F4();
  v11 = v25;
  sub_1BCAB68AC();
  if (v11)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v25 = v8;
  v12 = v5;
  v14 = v22;
  v13 = v23;
  v30 = 0;
  v15 = v24;
  sub_1BCAB66CC();
  *(_QWORD *)v10 = v16;
  v29 = 1;
  *((_QWORD *)v10 + 1) = sub_1BCAB66B4();
  *((_QWORD *)v10 + 2) = v17;
  v28 = 2;
  sub_1BCAB66CC();
  *((_QWORD *)v10 + 3) = v18;
  v27 = 3;
  *((_QWORD *)v10 + 4) = sub_1BCAB66D8();
  v26 = 4;
  sub_1BC9B2994(&qword_1ED6C7518, MEMORY[0x1E0CB08C0]);
  sub_1BCAB66E4();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v7, v15);
  (*(void (**)(char *, char *, uint64_t))(v20 + 32))(&v10[*(int *)(v25 + 32)], v14, v13);
  sub_1BC9964B8((uint64_t)v10, v21, type metadata accessor for AudioExposureStatistics);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return sub_1BC997208((uint64_t)v10, type metadata accessor for AudioExposureStatistics);
}

uint64_t sub_1BC9B08B0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return AudioExposureStatistics.init(from:)(a1, a2);
}

uint64_t sub_1BC9B08C4(_QWORD *a1)
{
  return AudioExposureStatistics.encode(to:)(a1);
}

id AudioExposureStatistics.leqQuantity.getter()
{
  double *v0;
  id v1;
  id v2;

  v1 = objc_msgSend((id)objc_opt_self(), sel_decibelAWeightedSoundPressureLevelUnit);
  v2 = objc_msgSend((id)objc_opt_self(), sel_quantityWithUnit_doubleValue_, v1, *v0);

  return v2;
}

uint64_t AudioExposureStatistics.init(leq:duration:days:lastUpdated:)@<X0>(void *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;

  v9 = (void *)objc_opt_self();
  v10 = objc_msgSend(v9, sel_decibelAWeightedSoundPressureLevelUnit);
  objc_msgSend(a1, sel_doubleValueForUnit_, v10);
  v12 = v11;
  v13 = objc_msgSend(v10, sel_unitString);
  v14 = sub_1BCAB5F04();
  v16 = v15;

  v17 = objc_msgSend(v9, sel_secondUnit);
  objc_msgSend(a2, sel_doubleValueForUnit_, v17);
  v19 = v18;

  *a5 = v12;
  a5[1] = v14;
  a5[2] = v16;
  a5[3] = v19;
  a5[4] = a3;
  v20 = (char *)a5 + *(int *)(type metadata accessor for AudioExposureStatistics(0) + 32);
  v21 = sub_1BCAB4E54();
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(v20, a4, v21);
}

uint64_t AudioExposureStatisticsQueryOperation.result.getter()
{
  swift_retain();
  sub_1BCAB5070();
  return swift_release();
}

uint64_t sub_1BC9B0AD8()
{
  swift_retain();
  sub_1BCAB5070();
  return swift_release();
}

uint64_t sub_1BC9B0B18(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  _BYTE v6[16];
  _BYTE *v7;

  sub_1BC9B2F54();
  MEMORY[0x1E0C80A78](v2);
  v4 = &v6[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1BC9964B8(a1, (uint64_t)v4, (uint64_t (*)(_QWORD))sub_1BC9B2F54);
  v7 = v4;
  swift_retain();
  sub_1BCAB507C();
  swift_release();
  return sub_1BC997208((uint64_t)v4, (uint64_t (*)(_QWORD))sub_1BC9B2F54);
}

id sub_1BC9B0BD4()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  void *v5;
  id v6;

  v1 = qword_1ED6C4460;
  v2 = *(void **)(v0 + qword_1ED6C4460);
  if (v2)
  {
    v3 = *(id *)(v0 + qword_1ED6C4460);
  }
  else
  {
    v4 = sub_1BC9B0C30();
    v5 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v4;
    v3 = v4;

    v2 = 0;
  }
  v6 = v2;
  return v3;
}

id sub_1BC9B0C30()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  id v4;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  id v13;
  id v14;
  id v15;
  char v17[8];
  uint64_t v18;
  __int16 v19;
  char v20[8];
  uint64_t v21;
  __int16 v22;

  sub_1BC998AB0(0, &qword_1ED6C6C98, (uint64_t (*)(uint64_t))type metadata accessor for StatisticsQueryConfigurationOverrides, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v1);
  v3 = &v17[-v2];
  v4 = *(id *)&v0[qword_1ED6C4480];
  sub_1BC9B0ED8((uint64_t)v20);
  v17[0] = v20[0];
  v18 = v21;
  v19 = v22;
  sub_1BC9B390C((uint64_t)&v0[qword_1ED6C4498], (uint64_t)v3);
  v5 = objc_msgSend(v0, sel_name);
  if (v5)
  {
    v6 = v5;
    v7 = sub_1BCAB5F04();
    v9 = v8;

  }
  else
  {
    v7 = 0;
    v9 = 0;
  }
  v10 = *(_QWORD *)&v0[qword_1ED6C44A0];
  v11 = *(void **)&v0[qword_1ED6C4470];
  v12 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v13 = objc_allocWithZone((Class)type metadata accessor for StatisticsQueryOperation());
  v14 = v11;
  v15 = sub_1BC9F3B8C(v4, v17, (uint64_t)v3, v7, v9, v10, v14, (uint64_t)sub_1BC9B398C, v12);

  swift_release();
  return v15;
}

id sub_1BC9B0DD0()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;
  _QWORD v10[6];

  v1 = qword_1ED6C4468;
  v2 = *(void **)(v0 + qword_1ED6C4468);
  if (v2)
  {
    v3 = *(id *)(v0 + qword_1ED6C4468);
  }
  else
  {
    v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB34C8]), sel_init);
    v5 = swift_allocObject();
    swift_unknownObjectWeakInit();
    v10[4] = sub_1BC9B3AB8;
    v10[5] = v5;
    v10[0] = MEMORY[0x1E0C809B0];
    v10[1] = 1107296256;
    v10[2] = sub_1BC9B17C8;
    v10[3] = &block_descriptor_9;
    v6 = _Block_copy(v10);
    swift_release();
    objc_msgSend(v4, sel_addExecutionBlock_, v6);
    _Block_release(v6);
    v7 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v4;
    v3 = v4;

    v2 = 0;
  }
  v8 = v2;
  return v3;
}

void sub_1BC9B0ED8(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  void *v9;
  id v10;
  char v11;
  __int16 v12;

  v3 = v1 + qword_1ED6C4478;
  v4 = *(_QWORD *)(v1 + qword_1ED6C4478 + 8);
  v5 = *(void **)(v1 + qword_1ED6C4480);
  v6 = (void *)objc_opt_self();
  swift_bridgeObjectRetain();
  v7 = v5;
  v8 = objc_msgSend(v6, sel__quantityTypeWithCode_, 172);
  if (v8)
  {
    v9 = v8;
    sub_1BC9B3A7C();
    v10 = v7;
    v11 = sub_1BCAB6330();

    if ((v11 & 1) != 0 && *(_QWORD *)(v4 + 16))
    {
      swift_bridgeObjectRetain();
      __asm { BR              X9 }
    }
  }
  else
  {

  }
  v12 = *(_WORD *)(v3 + 16);
  *(_BYTE *)a1 = *(_BYTE *)v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_WORD *)(a1 + 16) = v12;
}

void sub_1BC9B1178()
{
  swift_bridgeObjectRelease();
  JUMPOUT(0x1BC9B1120);
}

uint64_t AudioExposureStatisticsQueryOperation.audioExposureResult.getter()
{
  return swift_retain();
}

id AudioExposureStatisticsQueryOperation.__allocating_init(quantityType:operationQueue:queryConfiguration:queryConfigurationOverrides:name:queryQualityOfService:healthStore:)(void *a1, void *a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8)
{
  objc_class *v8;
  id v17;
  id v18;

  v17 = objc_allocWithZone(v8);
  v18 = sub_1BC9B2C74(a1, a2, a3, a4, a5, a6, a7, a8);

  return v18;
}

id AudioExposureStatisticsQueryOperation.init(quantityType:operationQueue:queryConfiguration:queryConfigurationOverrides:name:queryQualityOfService:healthStore:)(void *a1, void *a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8)
{
  id v11;

  v11 = sub_1BC9B2C74(a1, a2, a3, a4, a5, a6, a7, a8);

  return v11;
}

Swift::Void __swiftcall AudioExposureStatisticsQueryOperation.main()()
{
  char *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  _BYTE *v12;
  void *v13;
  id v14;
  uint64_t v15;
  void *v16;
  void *v17;
  Swift::String v18;
  Swift::String v19;
  id v20;
  id v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  id v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  void *v34;
  char *v35;
  void *v36;
  id v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  _QWORD aBlock[6];

  v1 = v0;
  v2 = sub_1BCAB54A8();
  v39 = *(_QWORD *)(v2 - 8);
  v40 = v2;
  v3 = *(_QWORD *)(v39 + 64);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v39 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v39 - v6;
  sub_1BC9B2F54();
  MEMORY[0x1E0C80A78](v8);
  v10 = (uint64_t *)((char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1BC9A7EA4();
  v11 = swift_allocError();
  *v12 = 2;
  *v10 = v11;
  swift_storeEnumTagMultiPayload();
  v41 = v10;
  swift_retain();
  sub_1BCAB507C();
  swift_release();
  sub_1BC997208((uint64_t)v10, (uint64_t (*)(_QWORD))sub_1BC9B2F54);
  v13 = *(void **)&v0[qword_1ED6C4480];
  v14 = objc_msgSend(v13, sel_identifier);
  v15 = sub_1BCAB5F04();
  v17 = v16;

  v18._countAndFlagsBits = 0x676E696E6E7572;
  v18._object = (void *)0xE700000000000000;
  v19._countAndFlagsBits = v15;
  v19._object = v17;
  NSOperation.logLifeCycleEvent(_:withPrivateInfo:)(v18, v19);
  swift_bridgeObjectRelease();
  if (qword_1ED6C7098 != -1)
    swift_once();
  v20 = (id)qword_1ED6C69C0;
  v21 = v1;
  sub_1BCAB549C();
  sub_1BCAB6270();
  sub_1BC9A7EF4();
  v22 = swift_allocObject();
  *(_OWORD *)(v22 + 16) = xmmword_1BCABE680;
  v23 = objc_msgSend(v13, sel_identifier);
  v24 = sub_1BCAB5F04();
  v26 = v25;

  *(_QWORD *)(v22 + 56) = MEMORY[0x1E0DEA968];
  *(_QWORD *)(v22 + 64) = sub_1BC9A7FA4();
  *(_QWORD *)(v22 + 32) = v24;
  *(_QWORD *)(v22 + 40) = v26;
  sub_1BCAB5484();
  swift_bridgeObjectRelease();
  v27 = sub_1BC9B0DD0();
  v28 = sub_1BC9B0BD4();
  objc_msgSend(v27, sel_addDependency_, v28);

  v29 = sub_1BC9B0DD0();
  v31 = v39;
  v30 = v40;
  (*(void (**)(char *, char *, uint64_t))(v39 + 16))(v4, v7, v40);
  v32 = (*(unsigned __int8 *)(v31 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v31 + 80);
  v33 = swift_allocObject();
  *(_QWORD *)(v33 + 16) = v21;
  (*(void (**)(unint64_t, char *, uint64_t))(v31 + 32))(v33 + v32, v4, v30);
  aBlock[4] = sub_1BC9B308C;
  aBlock[5] = v33;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1BC9B17C8;
  aBlock[3] = &block_descriptor;
  v34 = _Block_copy(aBlock);
  v35 = (char *)v21;
  sub_1BC9B30EC((uint64_t)sub_1BC9B308C);
  swift_release();
  objc_msgSend(v29, sel_setCompletionBlock_, v34);

  _Block_release(v34);
  swift_release();
  v36 = *(void **)&v35[qword_1ED6C4488];
  v37 = sub_1BC9B0BD4();
  objc_msgSend(v36, sel_addOperation_, v37);

  v38 = sub_1BC9B0DD0();
  objc_msgSend(v36, sel_addOperation_, v38);

  (*(void (**)(char *, uint64_t))(v31 + 8))(v7, v30);
}

uint64_t sub_1BC9B16EC(uint64_t a1, uint64_t a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  void *v6;
  Swift::String v7;
  Swift::String v8;

  sub_1BCAB6264();
  if (qword_1ED6C7098 != -1)
    swift_once();
  sub_1BCAB5490();
  v3 = objc_msgSend(*(id *)(a2 + qword_1ED6C4480), sel_identifier);
  v4 = sub_1BCAB5F04();
  v6 = v5;

  v7._countAndFlagsBits = 0x64656873696E6966;
  v7._object = (void *)0xE800000000000000;
  v8._countAndFlagsBits = v4;
  v8._object = v6;
  NSOperation.logLifeCycleEvent(_:withPrivateInfo:)(v7, v8);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1BC9B17C8(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  v2 = swift_retain();
  v1(v2);
  return swift_release();
}

void sub_1BC9B17F4(void *a1)
{
  id v1;

  v1 = a1;
  AudioExposureStatisticsQueryOperation.main()();

}

Swift::Void __swiftcall AudioExposureStatisticsQueryOperation.cleanUp()()
{
  char *v0;
  char *v1;
  uint64_t v2;
  double v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  void *v11;
  void *v12;
  Swift::String v13;
  Swift::String v14;
  uint64_t v15;

  v1 = v0;
  sub_1BC9B2F54();
  *(_QWORD *)&v3 = MEMORY[0x1E0C80A78](v2).n128_u64[0];
  v5 = (uint64_t *)((char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (objc_msgSend(v0, sel_isCancelled, v3))
  {
    sub_1BC9A7EA4();
    v6 = swift_allocError();
    *v7 = 3;
    *v5 = v6;
    v8 = swift_storeEnumTagMultiPayload();
    MEMORY[0x1E0C80A78](v8);
    *(&v15 - 2) = (uint64_t)v5;
    swift_retain();
    sub_1BCAB507C();
    swift_release();
    sub_1BC997208((uint64_t)v5, (uint64_t (*)(_QWORD))sub_1BC9B2F54);
    v9 = objc_msgSend(*(id *)&v0[qword_1ED6C4480], sel_identifier);
    v10 = sub_1BCAB5F04();
    v12 = v11;

    v13._countAndFlagsBits = 0x656C6C65636E6163;
    v13._object = (void *)0xE900000000000064;
    v14._countAndFlagsBits = v10;
    v14._object = v12;
    NSOperation.logLifeCycleEvent(_:withPrivateInfo:)(v13, v14);
    swift_bridgeObjectRelease();
  }
  objc_msgSend(*(id *)&v1[qword_1ED6C4488], sel_cancelAllOperations);
}

id AudioExposureStatisticsQueryOperation.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void AudioExposureStatisticsQueryOperation.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void sub_1BC9B1A08()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t sub_1BC9B1A34()
{
  uint64_t v0;

  swift_release();

  swift_bridgeObjectRelease();
  sub_1BC9B3A38(v0 + qword_1ED6C4498, &qword_1ED6C6C98, (uint64_t (*)(uint64_t))type metadata accessor for StatisticsQueryConfigurationOverrides);

  return swift_release();
}

id AudioExposureStatisticsQueryOperation.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_1BC9B1B18(uint64_t a1)
{
  swift_release();

  swift_bridgeObjectRelease();
  sub_1BC9B3A38(a1 + qword_1ED6C4498, &qword_1ED6C6C98, (uint64_t (*)(uint64_t))type metadata accessor for StatisticsQueryConfigurationOverrides);

  return swift_release();
}

uint64_t sub_1BC9B1BD4()
{
  swift_retain();
  sub_1BCAB5070();
  return swift_release();
}

void sub_1BC9B1C14(void *a1, char a2)
{
  id v3;
  id v4;
  id v5;
  void *v6;
  id v7;
  void *v8;
  id v9;
  double v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if ((a2 & 1) == 0)
  {
    v4 = a1;
    v5 = objc_msgSend(v4, sel_averageQuantity);
    if (v5)
    {
      v6 = v5;
      v7 = objc_msgSend(v4, sel_duration);
      if (v7)
      {
        v8 = v7;
        v9 = objc_msgSend((id)objc_opt_self(), sel_secondUnit);
        objc_msgSend(v8, sel_doubleValueForUnit_, v9);
        v11 = v10;

        if (v11 > 2.22507386e-308)
        {
          MEMORY[0x1E0C80A78](v12);
          sub_1BCAB507C();

          goto LABEL_11;
        }
        sub_1BCAB64C8();
        swift_getObjectType();
        sub_1BCAB68E8();
        sub_1BCAB5F70();
        swift_bridgeObjectRelease();
        v14 = sub_1BCAB5F70();
        MEMORY[0x1E0C80A78](v14);
        sub_1BCAB507C();

LABEL_10:
        swift_bridgeObjectRelease();
        goto LABEL_11;
      }

    }
    sub_1BCAB64C8();
    swift_getObjectType();
    sub_1BCAB68E8();
    sub_1BCAB5F70();
    swift_bridgeObjectRelease();
    v13 = sub_1BCAB5F70();
    MEMORY[0x1E0C80A78](v13);
    sub_1BCAB507C();
    goto LABEL_10;
  }
  MEMORY[0x1E0C80A78](a1);
  v3 = a1;
  sub_1BCAB507C();
LABEL_11:
  sub_1BC9B39B4(a1);
}

id sub_1BC9B1EE4(_QWORD *a1, void *a2)
{
  sub_1BC997208((uint64_t)a1, (uint64_t (*)(_QWORD))sub_1BC9B2F54);
  *a1 = a2;
  sub_1BC9B2F54();
  swift_storeEnumTagMultiPayload();
  return a2;
}

id sub_1BC9B1F30(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v14;

  sub_1BC9B2F54();
  MEMORY[0x1E0C80A78](v8);
  v10 = (uint64_t *)((char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1BC997208(a1, (uint64_t (*)(_QWORD))sub_1BC9B2F54);
  sub_1BC9A82C4();
  v11 = swift_allocError();
  *v12 = a2;
  v12[1] = a3;
  v12[2] = a4;
  *v10 = v11;
  swift_storeEnumTagMultiPayload();
  sub_1BC9AE330((uint64_t)v10, a1, (uint64_t (*)(_QWORD))sub_1BC9B2F54);
  return sub_1BC9A8308(a2, a3, a4);
}

uint64_t sub_1BC9B2018(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v12;

  sub_1BC9B2F54();
  MEMORY[0x1E0C80A78](v6);
  v8 = (uint64_t *)((char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1BC997208(a1, (uint64_t (*)(_QWORD))sub_1BC9B2F54);
  sub_1BC9A82C4();
  v9 = swift_allocError();
  *v10 = a2;
  v10[1] = a3;
  v10[2] = 0x6000000000000000;
  *v8 = v9;
  swift_storeEnumTagMultiPayload();
  sub_1BC9AE330((uint64_t)v8, a1, (uint64_t (*)(_QWORD))sub_1BC9B2F54);
  return swift_bridgeObjectRetain();
}

uint64_t sub_1BC9B20F0(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  int v24;
  uint64_t v25;
  id v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  id v31;
  char *v32;
  void *v33;
  id v34;
  id v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t result;
  uint64_t v47;
  uint64_t v48;
  id v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v49 = a3;
  v50 = a2;
  v8 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
  sub_1BC998AB0(0, (unint64_t *)&qword_1ED6C71E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAE5D0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v47 - v13;
  sub_1BC998AB0(0, &qword_1ED6C7280, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], v8);
  MEMORY[0x1E0C80A78](v15);
  v17 = (char *)&v47 - v16;
  v18 = sub_1BCAB4E54();
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v18);
  v21 = (char *)&v47 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = type metadata accessor for AudioExposureStatistics(0);
  MEMORY[0x1E0C80A78](v51);
  v23 = (char *)&v47 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BC997208(a1, (uint64_t (*)(_QWORD))sub_1BC9B2F54);
  v24 = *(unsigned __int8 *)(a4 + qword_1ED6C4478);
  v25 = 1;
  if (v24 == 2)
    goto LABEL_4;
  if (v24 == 3)
  {
    v25 = *MEMORY[0x1E0CB4B98];
LABEL_4:
    v48 = v25;
    v26 = objc_msgSend(a5, sel_mostRecentQuantityDateInterval);
    v54 = a1;
    if (v26)
    {
      v27 = v26;
      sub_1BCAB4B90();

      v28 = sub_1BCAB4BD8();
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v11, 0, 1, v28);
    }
    else
    {
      v28 = sub_1BCAB4BD8();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v11, 1, 1, v28);
    }
    sub_1BC9B39DC((uint64_t)v11, (uint64_t)v14);
    sub_1BCAB4BD8();
    v29 = *(_QWORD *)(v28 - 8);
    v30 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v29 + 48))(v14, 1, v28);
    v52 = v19;
    v53 = v18;
    if (v30 == 1)
    {
      sub_1BC9B3A38((uint64_t)v14, (unint64_t *)&qword_1ED6C71E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAE5D0]);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v19 + 56))(v17, 1, 1, v18);
    }
    else
    {
      sub_1BCAB4B9C();
      (*(void (**)(char *, uint64_t))(v29 + 8))(v14, v28);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v17, 0, 1, v18);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18) != 1)
      {
        (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v21, v17, v18);
        goto LABEL_12;
      }
    }
    v31 = objc_msgSend(a5, sel_endDate);
    sub_1BCAB4E24();

    sub_1BC9B3A38((uint64_t)v17, &qword_1ED6C7280, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870]);
LABEL_12:
    v32 = v21;
    v33 = (void *)objc_opt_self();
    v34 = v49;
    v35 = v50;
    v36 = objc_msgSend(v33, sel_decibelAWeightedSoundPressureLevelUnit);
    objc_msgSend(v35, sel_doubleValueForUnit_, v36);
    v38 = v37;
    v39 = objc_msgSend(v36, sel_unitString);
    v40 = sub_1BCAB5F04();
    v42 = v41;

    v43 = objc_msgSend(v33, sel_secondUnit);
    objc_msgSend(v34, sel_doubleValueForUnit_, v43);
    v45 = v44;

    *(_QWORD *)v23 = v38;
    *((_QWORD *)v23 + 1) = v40;
    *((_QWORD *)v23 + 2) = v42;
    *((_QWORD *)v23 + 3) = v45;
    *((_QWORD *)v23 + 4) = v48;
    (*(void (**)(char *, char *, uint64_t))(v52 + 32))(&v23[*(int *)(v51 + 32)], v32, v53);
    sub_1BC9AE330((uint64_t)v23, v54, type metadata accessor for AudioExposureStatistics);
    sub_1BC9B2F54();
    return swift_storeEnumTagMultiPayload();
  }
  result = sub_1BCAB65C4();
  __break(1u);
  return result;
}

void sub_1BC9B25AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  void *v4;
  void *v5;
  id v6;

  v3 = a3 + 16;
  swift_beginAccess();
  v4 = (void *)MEMORY[0x1BCCFC004](v3);
  if (v4)
  {
    v5 = v4;
    if (objc_msgSend(v4, sel_isCancelled) || (v6 = objc_msgSend(v5, sel_isFinished), (_DWORD)v6))
    {

    }
    else
    {
      MEMORY[0x1E0C80A78](v6);
      sub_1BCAB50AC();

    }
  }
}

void sub_1BC9B2678(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  sub_1BC9B2F54();
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  v5 = (void *)MEMORY[0x1BCCFC004](a1 + 16);
  if (v5)
  {
    v6 = v5;
    if ((objc_msgSend(v5, sel_isCancelled) & 1) != 0
      || (objc_msgSend(v6, sel_isFinished) & 1) != 0)
    {

    }
    else
    {
      swift_retain();
      sub_1BCAB5070();
      v7 = swift_release();
      MEMORY[0x1E0C80A78](v7);
      *(&v8 - 2) = (uint64_t)v6;
      *(&v8 - 1) = (uint64_t)v4;
      sub_1BCAB50AC();

      sub_1BC997208((uint64_t)v4, (uint64_t (*)(_QWORD))sub_1BC9B2F54);
    }
  }
}

uint64_t sub_1BC9B27A4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  _BYTE v7[16];
  _BYTE *v8;

  sub_1BC9B2F54();
  MEMORY[0x1E0C80A78](v3);
  v5 = &v7[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1BC9964B8(a2, (uint64_t)v5, (uint64_t (*)(_QWORD))sub_1BC9B2F54);
  v8 = v5;
  swift_retain();
  sub_1BCAB507C();
  swift_release();
  return sub_1BC997208((uint64_t)v5, (uint64_t (*)(_QWORD))sub_1BC9B2F54);
}

uint64_t _s19HealthVisualization23AudioExposureStatisticsV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  BOOL v4;

  if (*(double *)a1 != *(double *)a2)
    return 0;
  v4 = *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8) && *(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16);
  if (!v4 && (sub_1BCAB67C8() & 1) == 0
    || *(double *)(a1 + 24) != *(double *)(a2 + 24)
    || *(_QWORD *)(a1 + 32) != *(_QWORD *)(a2 + 32))
  {
    return 0;
  }
  type metadata accessor for AudioExposureStatistics(0);
  return sub_1BCAB4E18();
}

unint64_t sub_1BC9B28F4()
{
  unint64_t result;

  result = qword_1ED6C6B08;
  if (!qword_1ED6C6B08)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCABF5D4, &type metadata for AudioExposureStatistics.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED6C6B08);
  }
  return result;
}

void sub_1BC9B2938(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_1BC9B28F4();
    v7 = a3(a1, &type metadata for AudioExposureStatistics.CodingKeys, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t sub_1BC9B2994(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = sub_1BCAB4E54();
    result = MEMORY[0x1BCCFBE84](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1BC9B29D4(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x65756C615671656CLL && a2 == 0xE800000000000000;
  if (v2 || (sub_1BCAB67C8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x5374696E5571656CLL && a2 == 0xED0000676E697274 || (sub_1BCAB67C8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x4C73646E6F636573 && a2 == 0xEF64656E65747369 || (sub_1BCAB67C8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x7267674173796164 && a2 == 0xEE00646574616765 || (sub_1BCAB67C8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x616470557473616CLL && a2 == 0xEB00000000646574)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    v6 = sub_1BCAB67C8();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

id sub_1BC9B2C74(void *a1, void *a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8)
{
  char *v8;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  void *v31;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  objc_class *ObjectType;
  objc_super v41;

  v38 = a4;
  v39 = a7;
  v33 = a5;
  v34 = a6;
  ObjectType = (objc_class *)swift_getObjectType();
  sub_1BC9B2F54();
  MEMORY[0x1E0C80A78](v13);
  v15 = (uint64_t *)((char *)&v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v37 = *a3;
  v36 = *((_QWORD *)a3 + 1);
  v35 = *((unsigned __int16 *)a3 + 8);
  v16 = qword_1ED6C4490;
  sub_1BC9A7EA4();
  v17 = swift_allocError();
  *v18 = 0;
  *v15 = v17;
  swift_storeEnumTagMultiPayload();
  sub_1BC998AB0(0, &qword_1ED6C3670, (uint64_t (*)(uint64_t))sub_1BC9B2F54, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0D2E5C8]);
  swift_allocObject();
  v19 = v8;
  *(_QWORD *)&v8[v16] = sub_1BCAB50A0();
  *(_QWORD *)&v19[qword_1ED6C4460] = 0;
  *(_QWORD *)&v19[qword_1ED6C4468] = 0;
  v20 = qword_1ED6D38C0;
  sub_1BC9A82C4();
  v21 = swift_allocError();
  *v22 = 0xD00000000000005CLL;
  v22[1] = 0x80000001BCACF100;
  v22[2] = 0;
  *v15 = v21;
  v23 = v34;
  swift_storeEnumTagMultiPayload();
  swift_allocObject();
  *(_QWORD *)&v19[v20] = sub_1BCAB50A0();
  v24 = v38;
  *(_QWORD *)&v19[qword_1ED6C4480] = a1;
  *(_QWORD *)&v19[qword_1ED6C4488] = a2;
  v25 = &v19[qword_1ED6C4478];
  *v25 = v37;
  *((_QWORD *)v25 + 1) = v36;
  *((_WORD *)v25 + 8) = v35;
  sub_1BC9B390C(v24, (uint64_t)&v19[qword_1ED6C4498]);
  *(_QWORD *)&v19[qword_1ED6C44A0] = v39;
  *(_QWORD *)&v19[qword_1ED6C4470] = a8;
  v26 = a1;
  v27 = a2;
  v28 = a8;

  v41.receiver = v19;
  v41.super_class = ObjectType;
  v29 = objc_msgSendSuper2(&v41, sel_init, v33);
  v30 = v29;
  if (v23)
  {
    v31 = (void *)sub_1BCAB5EE0();
    swift_bridgeObjectRelease();
  }
  else
  {
    v31 = 0;
  }
  objc_msgSend(v29, sel_setName_, v31);

  sub_1BC9B3A38(v24, &qword_1ED6C6C98, (uint64_t (*)(uint64_t))type metadata accessor for StatisticsQueryConfigurationOverrides);
  return v29;
}

void sub_1BC9B2F54()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED6C47D8)
  {
    type metadata accessor for AudioExposureStatistics(255);
    sub_1BC9A7F58(255, (unint64_t *)&qword_1ED6C6F70);
    v0 = sub_1BCAB68A0();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED6C47D8);
  }
}

uint64_t sub_1BC9B2FD0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 16);
  sub_1BC997208(a1, (uint64_t (*)(_QWORD))sub_1BC9B2F54);
  return sub_1BC9964B8(v3, a1, (uint64_t (*)(_QWORD))sub_1BC9B2F54);
}

uint64_t sub_1BC9B3018()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = sub_1BCAB54A8();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);

  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t sub_1BC9B308C()
{
  sub_1BCAB54A8();
  return sub_1BCAB50AC();
}

uint64_t sub_1BC9B30EC(uint64_t result)
{
  if (result)
    return swift_retain();
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for AudioExposureStatistics(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  v3 = (_QWORD *)a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v10 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v10 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
    v5 = *(int *)(a3 + 32);
    v6 = a1 + v5;
    v7 = (uint64_t)a2 + v5;
    v8 = sub_1BCAB4E54();
    v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
    swift_bridgeObjectRetain();
    v9(v6, v7, v8);
  }
  return v3;
}

uint64_t destroy for AudioExposureStatistics(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 32);
  v5 = sub_1BCAB4E54();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t initializeWithCopy for AudioExposureStatistics(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v4 = *(int *)(a3 + 32);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = sub_1BCAB4E54();
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
  swift_bridgeObjectRetain();
  v8(v5, v6, v7);
  return a1;
}

_QWORD *assignWithCopy for AudioExposureStatistics(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  a1[4] = a2[4];
  v6 = *(int *)(a3 + 32);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_1BCAB4E54();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

uint64_t initializeWithTake for AudioExposureStatistics(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v4 = *(int *)(a3 + 32);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = sub_1BCAB4E54();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

_QWORD *assignWithTake for AudioExposureStatistics(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;

  *a1 = *a2;
  v6 = a2[2];
  a1[1] = a2[1];
  a1[2] = v6;
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  a1[4] = a2[4];
  v7 = *(int *)(a3 + 32);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = sub_1BCAB4E54();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for AudioExposureStatistics()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BC9B3408(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_1BCAB4E54();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 32), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for AudioExposureStatistics()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BC9B3490(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 16) = (a2 - 1);
  }
  else
  {
    v7 = sub_1BCAB4E54();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 32), a2, a2, v7);
  }
  return result;
}

uint64_t sub_1BC9B3504()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1BCAB4E54();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for AudioExposureStatisticsQueryOperation(uint64_t a1)
{
  return sub_1BC9B359C(a1, (uint64_t *)&unk_1ED6C44A8);
}

uint64_t sub_1BC9B359C(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
    return swift_getSingletonMetadata();
  return result;
}

void sub_1BC9B35D0()
{
  unint64_t v0;

  sub_1BC998AB0(319, &qword_1ED6C6C98, (uint64_t (*)(uint64_t))type metadata accessor for StatisticsQueryConfigurationOverrides, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  if (v0 <= 0x3F)
    swift_initClassMetadata2();
}

uint64_t method lookup function for AudioExposureStatisticsQueryOperation()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of AudioExposureStatisticsQueryOperation.__allocating_init(quantityType:operationQueue:queryConfiguration:queryConfigurationOverrides:name:queryQualityOfService:healthStore:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(class metadata base offset for AudioExposureStatisticsQueryOperation + v0 + 80))();
}

uint64_t sub_1BC9B36C8()
{
  return type metadata accessor for AudioExposureStatisticsQueryOperation(0);
}

uint64_t getEnumTagSinglePayload for AnchorDate(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFC)
    goto LABEL_17;
  if (a2 + 4 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 4) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 4;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 4;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 4;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 5;
  v8 = v6 - 5;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for AudioExposureStatistics.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1BC9B37AC + 4 * byte_1BCABF3DA[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1BC9B37E0 + 4 * byte_1BCABF3D5[v4]))();
}

uint64_t sub_1BC9B37E0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BC9B37E8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BC9B37F0);
  return result;
}

uint64_t sub_1BC9B37FC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BC9B3804);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1BC9B3808(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BC9B3810(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AudioExposureStatistics.CodingKeys()
{
  return &type metadata for AudioExposureStatistics.CodingKeys;
}

unint64_t sub_1BC9B3830()
{
  unint64_t result;

  result = qword_1EF478050;
  if (!qword_1EF478050)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCABF5AC, &type metadata for AudioExposureStatistics.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF478050);
  }
  return result;
}

unint64_t sub_1BC9B3878()
{
  unint64_t result;

  result = qword_1ED6C6B18;
  if (!qword_1ED6C6B18)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCABF51C, &type metadata for AudioExposureStatistics.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED6C6B18);
  }
  return result;
}

unint64_t sub_1BC9B38C0()
{
  unint64_t result;

  result = qword_1ED6C6B10;
  if (!qword_1ED6C6B10)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCABF544, &type metadata for AudioExposureStatistics.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED6C6B10);
  }
  return result;
}

uint64_t sub_1BC9B3904()
{
  uint64_t v0;

  return sub_1BC9B16EC(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1BC9B390C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1BC998AB0(0, &qword_1ED6C6C98, (uint64_t (*)(uint64_t))type metadata accessor for StatisticsQueryConfigurationOverrides, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1BC9B3968()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

void sub_1BC9B398C(uint64_t a1, char a2)
{
  uint64_t v2;

  sub_1BC9B25AC(a1, a2 & 1, v2);
}

void sub_1BC9B3998()
{
  uint64_t v0;

  sub_1BC9B1C14(*(void **)(v0 + 16), *(_BYTE *)(v0 + 24));
}

id sub_1BC9B39A8(uint64_t a1)
{
  uint64_t v1;

  return sub_1BC9B1F30(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
}

void sub_1BC9B39B4(id a1)
{

}

uint64_t sub_1BC9B39C0(uint64_t a1)
{
  uint64_t v1;

  return sub_1BC9B2018(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_1BC9B39C8(uint64_t a1)
{
  uint64_t v1;

  return sub_1BC9B20F0(a1, *(void **)(v1 + 16), *(void **)(v1 + 24), *(_QWORD *)(v1 + 32), *(void **)(v1 + 40));
}

id sub_1BC9B39D4(_QWORD *a1)
{
  uint64_t v1;

  return sub_1BC9B1EE4(a1, *(void **)(v1 + 16));
}

uint64_t sub_1BC9B39DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1BC998AB0(0, (unint64_t *)&qword_1ED6C71E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAE5D0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1BC9B3A38(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4;

  sub_1BC998AB0(0, a2, a3, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

unint64_t sub_1BC9B3A7C()
{
  unint64_t result;

  result = qword_1ED6C7260;
  if (!qword_1ED6C7260)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1ED6C7260);
  }
  return result;
}

void sub_1BC9B3AB8()
{
  uint64_t v0;

  sub_1BC9B2678(v0);
}

uint64_t sub_1BC9B3AC0()
{
  uint64_t v0;

  return sub_1BC9B27A4(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t TimeOfDayDistributionChartView.init(distribution:model:)@<X0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;

  sub_1BC9964B8(a1, a3, (uint64_t (*)(_QWORD))type metadata accessor for TimeBasedDistribution);
  v6 = sub_1BC9C2720(a1, a2);
  sub_1BC997208(a1, (uint64_t (*)(_QWORD))type metadata accessor for TimeBasedDistribution);
  v7 = type metadata accessor for TimeOfDayDistributionChartView();
  *(_QWORD *)(a3 + *(int *)(v7 + 20)) = v6;
  return sub_1BC9B3E64((uint64_t)a2, a3 + *(int *)(v7 + 24));
}

uint64_t TimeOfDayDistributionChartView.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v2 = v1;
  v4 = type metadata accessor for AFibBurdenTimeOfDayChart();
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (uint64_t)&v6[*(int *)(v7 + 24)];
  sub_1BC9964B8(v2, v8, (uint64_t (*)(_QWORD))type metadata accessor for TimeBasedDistribution);
  v9 = v2 + *(int *)(type metadata accessor for TimeOfDayDistributionChartView() + 24);
  v10 = (unsigned __int8 *)&v6[*(int *)(v4 + 28)];
  sub_1BC9964B8(v9, (uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for TimeBasedDistributionChartModel);
  v11 = v9 + *(int *)(type metadata accessor for TimeBasedDistributionChartModel() + 24);
  v12 = *(_QWORD *)(v11 + *(int *)(type metadata accessor for TimeBasedDistributionChartDesign() + 72));
  *(_QWORD *)v6 = 0;
  v6[8] = 1;
  *((_QWORD *)v6 + 2) = v12;
  v6[24] = 0;
  v6[*(int *)(v4 + 32)] = 0;
  sub_1BC9CC928(v8, v10, 0, a1);
  return sub_1BC997208((uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for AFibBurdenTimeOfDayChart);
}

uint64_t sub_1BC9B3C74@<X0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;

  sub_1BC9964B8(a1, a4, (uint64_t (*)(_QWORD))type metadata accessor for TimeBasedDistribution);
  v8 = sub_1BC9C2720(a1, a2);
  sub_1BC997208(a1, (uint64_t (*)(_QWORD))type metadata accessor for TimeBasedDistribution);
  v9 = *(int *)(a3 + 24);
  *(_QWORD *)(a4 + *(int *)(a3 + 20)) = v8;
  return sub_1BC9B3E64((uint64_t)a2, a4 + v9);
}

uint64_t sub_1BC9B3CF4()
{
  return sub_1BCAB5CE8();
}

uint64_t sub_1BC9B3D0C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v4 = v2;
  v6 = type metadata accessor for AFibBurdenTimeOfDayChart();
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (uint64_t)&v8[*(int *)(v9 + 24)];
  sub_1BC9964B8(v4, v10, (uint64_t (*)(_QWORD))type metadata accessor for TimeBasedDistribution);
  v11 = v4 + *(int *)(a1 + 24);
  v12 = (unsigned __int8 *)&v8[*(int *)(v6 + 28)];
  sub_1BC9964B8(v11, (uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for TimeBasedDistributionChartModel);
  v13 = v11 + *(int *)(type metadata accessor for TimeBasedDistributionChartModel() + 24);
  v14 = *(_QWORD *)(v13 + *(int *)(type metadata accessor for TimeBasedDistributionChartDesign() + 72));
  *(_QWORD *)v8 = 0;
  v8[8] = 1;
  *((_QWORD *)v8 + 2) = v14;
  v8[24] = 0;
  v8[*(int *)(v6 + 32)] = 0;
  sub_1BC9CC928(v10, v12, 0, a2);
  return sub_1BC997208((uint64_t)v8, (uint64_t (*)(_QWORD))type metadata accessor for AFibBurdenTimeOfDayChart);
}

uint64_t type metadata accessor for TimeOfDayDistributionChartView()
{
  uint64_t result;

  result = qword_1EF4780C0;
  if (!qword_1EF4780C0)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_1BC9B3E64(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for TimeBasedDistributionChartModel();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1BC9B3EA8(uint64_t a1)
{
  uint64_t result;

  result = sub_1BC996948(&qword_1EF478058, (uint64_t (*)(uint64_t))type metadata accessor for TimeOfDayDistributionChartView, (uint64_t)&protocol conformance descriptor for TimeOfDayDistributionChartView);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1BC9B3EE4()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t dispatch thunk of TimeBasedDistributionChartView.init(distribution:model:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

_QWORD *initializeBufferWithCopyOfBuffer for TimeOfDayDistributionChartView(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  void (*v19)(uint64_t, char *, uint64_t);
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int (*v25)(char *, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  void (*v37)(char *, char *, uint64_t);
  uint64_t v38;
  char *v39;
  char *v40;
  __int128 v41;
  uint64_t v42;
  void (*v43)(char *, char *, uint64_t);
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  char *v49;
  int *v50;
  char *v51;
  char *v52;
  _QWORD *v53;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v27 = *a2;
    *a1 = *a2;
    v28 = v27 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    v7 = sub_1BCAB4F68();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = type metadata accessor for TimeBasedDistribution();
    *(_QWORD *)((char *)a1 + *(int *)(v8 + 20)) = *(_QWORD *)((char *)a2 + *(int *)(v8 + 20));
    v9 = *(int *)(v8 + 24);
    v10 = (_QWORD *)((char *)a1 + v9);
    v11 = (_QWORD *)((char *)a2 + v9);
    v12 = v11[1];
    *v10 = *v11;
    v10[1] = v12;
    v13 = *(int *)(a3 + 24);
    *(_QWORD *)((char *)a1 + *(int *)(a3 + 20)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 20));
    v53 = a1;
    v14 = (char *)a1 + v13;
    v15 = (char *)a2 + v13;
    *v14 = *((_BYTE *)a2 + v13);
    v16 = (uint64_t)a1 + v13 + 8;
    v17 = *((_OWORD *)v15 + 2);
    *((_OWORD *)v14 + 2) = v17;
    v18 = v17;
    v19 = **(void (***)(uint64_t, char *, uint64_t))(v17 - 8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v19(v16, v15 + 8, v18);
    v50 = (int *)type metadata accessor for TimeBasedDistributionChartModel();
    v51 = v15;
    v20 = v50[6];
    v52 = v14;
    v21 = &v14[v20];
    v22 = &v15[v20];
    v23 = sub_1BCAB5754();
    v24 = *(_QWORD *)(v23 - 8);
    v25 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48);
    if (v25(v22, 1, v23))
    {
      sub_1BC998AB0(0, (unint64_t *)&qword_1EF478060, (uint64_t (*)(uint64_t))MEMORY[0x1E0C93AA8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v21, v22, v23);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
    }
    v29 = (int *)type metadata accessor for TimeBasedDistributionChartDesign();
    v30 = v29[5];
    v31 = &v21[v30];
    v32 = &v22[v30];
    if (v25(&v22[v30], 1, v23))
    {
      sub_1BC998AB0(0, (unint64_t *)&qword_1EF478060, (uint64_t (*)(uint64_t))MEMORY[0x1E0C93AA8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v31, v32, v23);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v31, 0, 1, v23);
    }
    *(_QWORD *)&v21[v29[6]] = *(_QWORD *)&v22[v29[6]];
    *(_QWORD *)&v21[v29[7]] = *(_QWORD *)&v22[v29[7]];
    *(_QWORD *)&v21[v29[8]] = *(_QWORD *)&v22[v29[8]];
    *(_QWORD *)&v21[v29[9]] = *(_QWORD *)&v22[v29[9]];
    v34 = v29[10];
    v35 = &v21[v34];
    v49 = &v22[v34];
    v36 = sub_1BCAB5958();
    v37 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v36 - 8) + 16);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    v37(v35, v49, v36);
    *(_QWORD *)&v21[v29[11]] = *(_QWORD *)&v22[v29[11]];
    *(_QWORD *)&v21[v29[12]] = *(_QWORD *)&v22[v29[12]];
    *(_QWORD *)&v21[v29[13]] = *(_QWORD *)&v22[v29[13]];
    *(_QWORD *)&v21[v29[14]] = *(_QWORD *)&v22[v29[14]];
    *(_QWORD *)&v21[v29[15]] = *(_QWORD *)&v22[v29[15]];
    *(_QWORD *)&v21[v29[16]] = *(_QWORD *)&v22[v29[16]];
    *(_QWORD *)&v21[v29[17]] = *(_QWORD *)&v22[v29[17]];
    *(_QWORD *)&v21[v29[18]] = *(_QWORD *)&v22[v29[18]];
    *(_QWORD *)&v21[v29[19]] = *(_QWORD *)&v22[v29[19]];
    *(_QWORD *)&v21[v29[20]] = *(_QWORD *)&v22[v29[20]];
    *(_QWORD *)&v21[v29[21]] = *(_QWORD *)&v22[v29[21]];
    *(_QWORD *)&v21[v29[22]] = *(_QWORD *)&v22[v29[22]];
    *(_QWORD *)&v21[v29[23]] = *(_QWORD *)&v22[v29[23]];
    *(_QWORD *)&v21[v29[24]] = *(_QWORD *)&v22[v29[24]];
    v21[v29[25]] = v22[v29[25]];
    v38 = v50[7];
    v39 = &v52[v38];
    v40 = &v51[v38];
    v41 = *(_OWORD *)&v51[v38 + 24];
    *(_OWORD *)&v52[v38 + 24] = v41;
    v42 = v41;
    v43 = **(void (***)(char *, char *, uint64_t))(v41 - 8);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    v43(v39, v40, v42);
    v44 = v50[8];
    v45 = &v52[v44];
    v46 = &v51[v44];
    v47 = sub_1BCAB5514();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v47 - 8) + 16))(v45, v46, v47);
    return v53;
  }
  return (_QWORD *)v28;
}

uint64_t destroy for TimeOfDayDistributionChartView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4 = sub_1BCAB4F68();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  type metadata accessor for TimeBasedDistribution();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v5 = a1 + *(int *)(a2 + 24);
  __swift_destroy_boxed_opaque_existential_1(v5 + 8);
  v6 = (int *)type metadata accessor for TimeBasedDistributionChartModel();
  v7 = v5 + v6[6];
  v8 = sub_1BCAB5754();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (!v10(v7, 1, v8))
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
  v11 = type metadata accessor for TimeBasedDistributionChartDesign();
  v12 = v7 + *(int *)(v11 + 20);
  if (!v10(v12, 1, v8))
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v12, v8);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  v13 = v7 + *(int *)(v11 + 40);
  v14 = sub_1BCAB5958();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v5 + v6[7]);
  v15 = v5 + v6[8];
  v16 = sub_1BCAB5514();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v15, v16);
}

uint64_t initializeWithCopy for TimeOfDayDistributionChartView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int (*v24)(char *, uint64_t, uint64_t);
  uint64_t v25;
  int *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  void (*v34)(char *, char *, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  void (*v40)(uint64_t, uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v46;
  int *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v6 = sub_1BCAB4F68();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = type metadata accessor for TimeBasedDistribution();
  *(_QWORD *)(a1 + *(int *)(v7 + 20)) = *(_QWORD *)(a2 + *(int *)(v7 + 20));
  v8 = *(int *)(v7 + 24);
  v9 = (_QWORD *)(a1 + v8);
  v10 = (_QWORD *)(a2 + v8);
  v11 = v10[1];
  *v9 = *v10;
  v9[1] = v11;
  v12 = *(int *)(a3 + 24);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  v50 = a1;
  v13 = a1 + v12;
  v14 = a2 + v12;
  *(_BYTE *)v13 = *(_BYTE *)(a2 + v12);
  v15 = a1 + v12 + 8;
  v16 = *(_OWORD *)(v14 + 32);
  *(_OWORD *)(v13 + 32) = v16;
  v17 = v16;
  v18 = **(void (***)(uint64_t, uint64_t, uint64_t))(v16 - 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v18(v15, v14 + 8, v17);
  v47 = (int *)type metadata accessor for TimeBasedDistributionChartModel();
  v48 = v14;
  v19 = v47[6];
  v49 = v13;
  v20 = (char *)(v13 + v19);
  v21 = (char *)(v14 + v19);
  v22 = sub_1BCAB5754();
  v23 = *(_QWORD *)(v22 - 8);
  v24 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48);
  if (v24(v21, 1, v22))
  {
    sub_1BC998AB0(0, (unint64_t *)&qword_1EF478060, (uint64_t (*)(uint64_t))MEMORY[0x1E0C93AA8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v20, v21, v22);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
  }
  v26 = (int *)type metadata accessor for TimeBasedDistributionChartDesign();
  v27 = v26[5];
  v28 = &v20[v27];
  v29 = &v21[v27];
  if (v24(&v21[v27], 1, v22))
  {
    sub_1BC998AB0(0, (unint64_t *)&qword_1EF478060, (uint64_t (*)(uint64_t))MEMORY[0x1E0C93AA8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v28, v29, v22);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v28, 0, 1, v22);
  }
  *(_QWORD *)&v20[v26[6]] = *(_QWORD *)&v21[v26[6]];
  *(_QWORD *)&v20[v26[7]] = *(_QWORD *)&v21[v26[7]];
  *(_QWORD *)&v20[v26[8]] = *(_QWORD *)&v21[v26[8]];
  *(_QWORD *)&v20[v26[9]] = *(_QWORD *)&v21[v26[9]];
  v31 = v26[10];
  v32 = &v20[v31];
  v46 = &v21[v31];
  v33 = sub_1BCAB5958();
  v34 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v33 - 8) + 16);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  v34(v32, v46, v33);
  *(_QWORD *)&v20[v26[11]] = *(_QWORD *)&v21[v26[11]];
  *(_QWORD *)&v20[v26[12]] = *(_QWORD *)&v21[v26[12]];
  *(_QWORD *)&v20[v26[13]] = *(_QWORD *)&v21[v26[13]];
  *(_QWORD *)&v20[v26[14]] = *(_QWORD *)&v21[v26[14]];
  *(_QWORD *)&v20[v26[15]] = *(_QWORD *)&v21[v26[15]];
  *(_QWORD *)&v20[v26[16]] = *(_QWORD *)&v21[v26[16]];
  *(_QWORD *)&v20[v26[17]] = *(_QWORD *)&v21[v26[17]];
  *(_QWORD *)&v20[v26[18]] = *(_QWORD *)&v21[v26[18]];
  *(_QWORD *)&v20[v26[19]] = *(_QWORD *)&v21[v26[19]];
  *(_QWORD *)&v20[v26[20]] = *(_QWORD *)&v21[v26[20]];
  *(_QWORD *)&v20[v26[21]] = *(_QWORD *)&v21[v26[21]];
  *(_QWORD *)&v20[v26[22]] = *(_QWORD *)&v21[v26[22]];
  *(_QWORD *)&v20[v26[23]] = *(_QWORD *)&v21[v26[23]];
  *(_QWORD *)&v20[v26[24]] = *(_QWORD *)&v21[v26[24]];
  v20[v26[25]] = v21[v26[25]];
  v35 = v47[7];
  v36 = v49 + v35;
  v37 = v48 + v35;
  v38 = *(_OWORD *)(v48 + v35 + 24);
  *(_OWORD *)(v49 + v35 + 24) = v38;
  v39 = v38;
  v40 = **(void (***)(uint64_t, uint64_t, uint64_t))(v38 - 8);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  v40(v36, v37, v39);
  v41 = v47[8];
  v42 = v49 + v41;
  v43 = v48 + v41;
  v44 = sub_1BCAB5514();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 16))(v42, v43, v44);
  return v50;
}

uint64_t assignWithCopy for TimeOfDayDistributionChartView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(char *, uint64_t, uint64_t);
  int v20;
  int v21;
  uint64_t v22;
  int *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int *v39;
  uint64_t v40;
  uint64_t v41;

  v6 = sub_1BCAB4F68();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = type metadata accessor for TimeBasedDistribution();
  *(_QWORD *)(a1 + *(int *)(v7 + 20)) = *(_QWORD *)(a2 + *(int *)(v7 + 20));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v8 = *(int *)(v7 + 24);
  v9 = (_QWORD *)(a1 + v8);
  v10 = (_QWORD *)(a2 + v8);
  *v9 = *v10;
  v9[1] = v10[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v11 = *(int *)(a3 + 24);
  v12 = a1 + v11;
  v13 = a2 + v11;
  *(_BYTE *)(a1 + v11) = *(_BYTE *)v13;
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + v11 + 8), (uint64_t *)(v13 + 8));
  v39 = (int *)type metadata accessor for TimeBasedDistributionChartModel();
  v40 = v13;
  v14 = v39[6];
  v41 = v12;
  v15 = (char *)(v12 + v14);
  v16 = (char *)(v13 + v14);
  v17 = sub_1BCAB5754();
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48);
  v20 = v19(v15, 1, v17);
  v21 = v19(v16, 1, v17);
  if (v20)
  {
    if (!v21)
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v15, v16, v17);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v21)
  {
    (*(void (**)(char *, uint64_t))(v18 + 8))(v15, v17);
LABEL_6:
    sub_1BC998AB0(0, (unint64_t *)&qword_1EF478060, (uint64_t (*)(uint64_t))MEMORY[0x1E0C93AA8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v18 + 24))(v15, v16, v17);
LABEL_7:
  v23 = (int *)type metadata accessor for TimeBasedDistributionChartDesign();
  v24 = v23[5];
  v25 = &v15[v24];
  v26 = &v16[v24];
  v27 = v19(&v15[v24], 1, v17);
  v28 = v19(v26, 1, v17);
  if (!v27)
  {
    if (!v28)
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 24))(v25, v26, v17);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v18 + 8))(v25, v17);
    goto LABEL_12;
  }
  if (v28)
  {
LABEL_12:
    sub_1BC998AB0(0, (unint64_t *)&qword_1EF478060, (uint64_t (*)(uint64_t))MEMORY[0x1E0C93AA8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v25, v26, v17);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v25, 0, 1, v17);
LABEL_13:
  *(_QWORD *)&v15[v23[6]] = *(_QWORD *)&v16[v23[6]];
  swift_retain();
  swift_release();
  *(_QWORD *)&v15[v23[7]] = *(_QWORD *)&v16[v23[7]];
  swift_retain();
  swift_release();
  *(_QWORD *)&v15[v23[8]] = *(_QWORD *)&v16[v23[8]];
  swift_retain();
  swift_release();
  *(_QWORD *)&v15[v23[9]] = *(_QWORD *)&v16[v23[9]];
  swift_retain();
  swift_release();
  v30 = v23[10];
  v31 = &v15[v30];
  v32 = &v16[v30];
  v33 = sub_1BCAB5958();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v33 - 8) + 24))(v31, v32, v33);
  *(_QWORD *)&v15[v23[11]] = *(_QWORD *)&v16[v23[11]];
  swift_retain();
  swift_release();
  *(_QWORD *)&v15[v23[12]] = *(_QWORD *)&v16[v23[12]];
  swift_retain();
  swift_release();
  *(_QWORD *)&v15[v23[13]] = *(_QWORD *)&v16[v23[13]];
  swift_retain();
  swift_release();
  *(_QWORD *)&v15[v23[14]] = *(_QWORD *)&v16[v23[14]];
  swift_retain();
  swift_release();
  *(_QWORD *)&v15[v23[15]] = *(_QWORD *)&v16[v23[15]];
  swift_retain();
  swift_release();
  *(_QWORD *)&v15[v23[16]] = *(_QWORD *)&v16[v23[16]];
  swift_retain();
  swift_release();
  *(_QWORD *)&v15[v23[17]] = *(_QWORD *)&v16[v23[17]];
  *(_QWORD *)&v15[v23[18]] = *(_QWORD *)&v16[v23[18]];
  *(_QWORD *)&v15[v23[19]] = *(_QWORD *)&v16[v23[19]];
  *(_QWORD *)&v15[v23[20]] = *(_QWORD *)&v16[v23[20]];
  *(_QWORD *)&v15[v23[21]] = *(_QWORD *)&v16[v23[21]];
  *(_QWORD *)&v15[v23[22]] = *(_QWORD *)&v16[v23[22]];
  *(_QWORD *)&v15[v23[23]] = *(_QWORD *)&v16[v23[23]];
  *(_QWORD *)&v15[v23[24]] = *(_QWORD *)&v16[v23[24]];
  v15[v23[25]] = v16[v23[25]];
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(v41 + v39[7]), (uint64_t *)(v40 + v39[7]));
  v34 = v39[8];
  v35 = v41 + v34;
  v36 = v40 + v34;
  v37 = sub_1BCAB5514();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 24))(v35, v36, v37);
  return a1;
}

uint64_t *__swift_assign_boxed_opaque_existential_1(uint64_t *result, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[24];

  if (result != a2)
  {
    v3 = result;
    v4 = result[3];
    v5 = a2[3];
    if (v4 == v5)
    {
      v9 = *(_QWORD *)(v4 - 8);
      if ((*(_BYTE *)(v9 + 82) & 2) != 0)
      {
        v10 = *a2;
        swift_retain();
        result = (uint64_t *)swift_release();
        *v3 = v10;
      }
      else
      {
        return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t *, uint64_t))(v9 + 24))(result, a2, result[3]);
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      v6 = *(_QWORD *)(v4 - 8);
      v7 = *(_QWORD *)(v5 - 8);
      v8 = *(_DWORD *)(v7 + 80);
      if ((*(_BYTE *)(v6 + 82) & 2) != 0)
      {
        if ((v8 & 0x20000) != 0)
        {
          *result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(_BYTE *, uint64_t *, uint64_t))(v6 + 32))(v11, result, v4);
        if ((v8 & 0x20000) != 0)
        {
          *v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v11, v4);
      }
    }
  }
  return result;
}

uint64_t initializeWithTake for TimeOfDayDistributionChartView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int (*v16)(char *, uint64_t, uint64_t);
  uint64_t v17;
  int *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int *v36;
  uint64_t v37;

  v6 = sub_1BCAB4F68();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = type metadata accessor for TimeBasedDistribution();
  *(_QWORD *)(a1 + *(int *)(v7 + 20)) = *(_QWORD *)(a2 + *(int *)(v7 + 20));
  *(_OWORD *)(a1 + *(int *)(v7 + 24)) = *(_OWORD *)(a2 + *(int *)(v7 + 24));
  v8 = *(int *)(a3 + 24);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  v37 = a1;
  v9 = a1 + v8;
  v10 = a2 + v8;
  *(_BYTE *)v9 = *(_BYTE *)(a2 + v8);
  *(_OWORD *)(v9 + 8) = *(_OWORD *)(a2 + v8 + 8);
  *(_OWORD *)(v9 + 24) = *(_OWORD *)(a2 + v8 + 24);
  *(_QWORD *)(v9 + 40) = *(_QWORD *)(a2 + v8 + 40);
  v36 = (int *)type metadata accessor for TimeBasedDistributionChartModel();
  v11 = v36[6];
  v12 = (char *)(v9 + v11);
  v13 = (char *)(v10 + v11);
  v14 = sub_1BCAB5754();
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48);
  if (v16(v13, 1, v14))
  {
    sub_1BC998AB0(0, (unint64_t *)&qword_1EF478060, (uint64_t (*)(uint64_t))MEMORY[0x1E0C93AA8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v12, v13, v14);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  v18 = (int *)type metadata accessor for TimeBasedDistributionChartDesign();
  v19 = v18[5];
  v20 = &v12[v19];
  v21 = &v13[v19];
  if (v16(&v13[v19], 1, v14))
  {
    sub_1BC998AB0(0, (unint64_t *)&qword_1EF478060, (uint64_t (*)(uint64_t))MEMORY[0x1E0C93AA8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v20, v21, v14);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v20, 0, 1, v14);
  }
  *(_QWORD *)&v12[v18[6]] = *(_QWORD *)&v13[v18[6]];
  *(_QWORD *)&v12[v18[7]] = *(_QWORD *)&v13[v18[7]];
  *(_QWORD *)&v12[v18[8]] = *(_QWORD *)&v13[v18[8]];
  *(_QWORD *)&v12[v18[9]] = *(_QWORD *)&v13[v18[9]];
  v23 = v18[10];
  v24 = &v12[v23];
  v25 = &v13[v23];
  v26 = sub_1BCAB5958();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v26 - 8) + 32))(v24, v25, v26);
  *(_QWORD *)&v12[v18[11]] = *(_QWORD *)&v13[v18[11]];
  *(_QWORD *)&v12[v18[12]] = *(_QWORD *)&v13[v18[12]];
  *(_QWORD *)&v12[v18[13]] = *(_QWORD *)&v13[v18[13]];
  *(_QWORD *)&v12[v18[14]] = *(_QWORD *)&v13[v18[14]];
  *(_QWORD *)&v12[v18[15]] = *(_QWORD *)&v13[v18[15]];
  *(_QWORD *)&v12[v18[16]] = *(_QWORD *)&v13[v18[16]];
  *(_QWORD *)&v12[v18[17]] = *(_QWORD *)&v13[v18[17]];
  *(_QWORD *)&v12[v18[18]] = *(_QWORD *)&v13[v18[18]];
  *(_QWORD *)&v12[v18[19]] = *(_QWORD *)&v13[v18[19]];
  *(_QWORD *)&v12[v18[20]] = *(_QWORD *)&v13[v18[20]];
  *(_QWORD *)&v12[v18[21]] = *(_QWORD *)&v13[v18[21]];
  *(_QWORD *)&v12[v18[22]] = *(_QWORD *)&v13[v18[22]];
  *(_QWORD *)&v12[v18[23]] = *(_QWORD *)&v13[v18[23]];
  *(_QWORD *)&v12[v18[24]] = *(_QWORD *)&v13[v18[24]];
  v12[v18[25]] = v13[v18[25]];
  v27 = v36[7];
  v28 = v9 + v27;
  v29 = v10 + v27;
  *(_QWORD *)(v28 + 32) = *(_QWORD *)(v29 + 32);
  v30 = *(_OWORD *)(v29 + 16);
  *(_OWORD *)v28 = *(_OWORD *)v29;
  *(_OWORD *)(v28 + 16) = v30;
  v31 = v36[8];
  v32 = v9 + v31;
  v33 = v10 + v31;
  v34 = sub_1BCAB5514();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 32))(v32, v33, v34);
  return v37;
}

uint64_t assignWithTake for TimeOfDayDistributionChartView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(char *, uint64_t, uint64_t);
  int v22;
  int v23;
  uint64_t v24;
  int *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int *v45;
  uint64_t v46;
  uint64_t v47;

  v6 = sub_1BCAB4F68();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = type metadata accessor for TimeBasedDistribution();
  *(_QWORD *)(a1 + *(int *)(v7 + 20)) = *(_QWORD *)(a2 + *(int *)(v7 + 20));
  swift_bridgeObjectRelease();
  v8 = *(int *)(v7 + 24);
  v9 = (_QWORD *)(a1 + v8);
  v10 = (uint64_t *)(a2 + v8);
  v12 = *v10;
  v11 = v10[1];
  *v9 = v12;
  v9[1] = v11;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  swift_bridgeObjectRelease();
  v13 = *(int *)(a3 + 24);
  v47 = a1;
  v14 = a1 + v13;
  v15 = a2 + v13;
  *(_BYTE *)v14 = *(_BYTE *)(a2 + v13);
  __swift_destroy_boxed_opaque_existential_1(v14 + 8);
  *(_OWORD *)(v14 + 8) = *(_OWORD *)(v15 + 8);
  *(_OWORD *)(v14 + 24) = *(_OWORD *)(v15 + 24);
  *(_QWORD *)(v14 + 40) = *(_QWORD *)(v15 + 40);
  v45 = (int *)type metadata accessor for TimeBasedDistributionChartModel();
  v46 = v15;
  v16 = v45[6];
  v17 = (char *)(v14 + v16);
  v18 = (char *)(v15 + v16);
  v19 = sub_1BCAB5754();
  v20 = *(_QWORD *)(v19 - 8);
  v21 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v20 + 48);
  v22 = v21(v17, 1, v19);
  v23 = v21(v18, 1, v19);
  if (v22)
  {
    if (!v23)
    {
      (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v17, v18, v19);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v23)
  {
    (*(void (**)(char *, uint64_t))(v20 + 8))(v17, v19);
LABEL_6:
    sub_1BC998AB0(0, (unint64_t *)&qword_1EF478060, (uint64_t (*)(uint64_t))MEMORY[0x1E0C93AA8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v20 + 40))(v17, v18, v19);
LABEL_7:
  v25 = (int *)type metadata accessor for TimeBasedDistributionChartDesign();
  v26 = v25[5];
  v27 = &v17[v26];
  v28 = &v18[v26];
  v29 = v21(&v17[v26], 1, v19);
  v30 = v21(v28, 1, v19);
  if (!v29)
  {
    if (!v30)
    {
      (*(void (**)(char *, char *, uint64_t))(v20 + 40))(v27, v28, v19);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v20 + 8))(v27, v19);
    goto LABEL_12;
  }
  if (v30)
  {
LABEL_12:
    sub_1BC998AB0(0, (unint64_t *)&qword_1EF478060, (uint64_t (*)(uint64_t))MEMORY[0x1E0C93AA8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v27, v28, v19);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v27, 0, 1, v19);
LABEL_13:
  *(_QWORD *)&v17[v25[6]] = *(_QWORD *)&v18[v25[6]];
  swift_release();
  *(_QWORD *)&v17[v25[7]] = *(_QWORD *)&v18[v25[7]];
  swift_release();
  *(_QWORD *)&v17[v25[8]] = *(_QWORD *)&v18[v25[8]];
  swift_release();
  *(_QWORD *)&v17[v25[9]] = *(_QWORD *)&v18[v25[9]];
  swift_release();
  v32 = v25[10];
  v33 = &v17[v32];
  v34 = &v18[v32];
  v35 = sub_1BCAB5958();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v35 - 8) + 40))(v33, v34, v35);
  *(_QWORD *)&v17[v25[11]] = *(_QWORD *)&v18[v25[11]];
  swift_release();
  *(_QWORD *)&v17[v25[12]] = *(_QWORD *)&v18[v25[12]];
  swift_release();
  *(_QWORD *)&v17[v25[13]] = *(_QWORD *)&v18[v25[13]];
  swift_release();
  *(_QWORD *)&v17[v25[14]] = *(_QWORD *)&v18[v25[14]];
  swift_release();
  *(_QWORD *)&v17[v25[15]] = *(_QWORD *)&v18[v25[15]];
  swift_release();
  *(_QWORD *)&v17[v25[16]] = *(_QWORD *)&v18[v25[16]];
  swift_release();
  *(_QWORD *)&v17[v25[17]] = *(_QWORD *)&v18[v25[17]];
  *(_QWORD *)&v17[v25[18]] = *(_QWORD *)&v18[v25[18]];
  *(_QWORD *)&v17[v25[19]] = *(_QWORD *)&v18[v25[19]];
  *(_QWORD *)&v17[v25[20]] = *(_QWORD *)&v18[v25[20]];
  *(_QWORD *)&v17[v25[21]] = *(_QWORD *)&v18[v25[21]];
  *(_QWORD *)&v17[v25[22]] = *(_QWORD *)&v18[v25[22]];
  *(_QWORD *)&v17[v25[23]] = *(_QWORD *)&v18[v25[23]];
  *(_QWORD *)&v17[v25[24]] = *(_QWORD *)&v18[v25[24]];
  v17[v25[25]] = v18[v25[25]];
  v36 = v45[7];
  v37 = v14 + v36;
  v38 = v46 + v36;
  __swift_destroy_boxed_opaque_existential_1(v14 + v36);
  v39 = *(_OWORD *)(v38 + 16);
  *(_OWORD *)v37 = *(_OWORD *)v38;
  *(_OWORD *)(v37 + 16) = v39;
  *(_QWORD *)(v37 + 32) = *(_QWORD *)(v38 + 32);
  v40 = v45[8];
  v41 = v14 + v40;
  v42 = v46 + v40;
  v43 = sub_1BCAB5514();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 40))(v41, v42, v43);
  return v47;
}

uint64_t getEnumTagSinglePayload for TimeOfDayDistributionChartView()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BC9B5700(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  unint64_t v11;

  v6 = type metadata accessor for TimeBasedDistribution();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v8 = type metadata accessor for TimeBasedDistributionChartModel();
    v10 = a1 + *(int *)(a3 + 24);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
    return v9(v10, a2, v8);
  }
  v11 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v11 >= 0xFFFFFFFF)
    LODWORD(v11) = -1;
  return (v11 + 1);
}

uint64_t storeEnumTagSinglePayload for TimeOfDayDistributionChartView()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BC9B57B4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  result = type metadata accessor for TimeBasedDistribution();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
      return result;
    }
    v10 = type metadata accessor for TimeBasedDistributionChartModel();
    v12 = a1 + *(int *)(a4 + 24);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t sub_1BC9B5858()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = type metadata accessor for TimeBasedDistribution();
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for TimeBasedDistributionChartModel();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

unint64_t sub_1BC9B58EC()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);
  uint64_t v7;
  _QWORD v8[6];

  result = qword_1EF478100;
  if (!qword_1EF478100)
  {
    sub_1BC9B5AE8();
    v7 = v1;
    sub_1BC9B5D4C(255);
    v3 = v2;
    sub_1BC9B76A4(255);
    v5 = v4;
    sub_1BC9B5ED4(255);
    v6 = MEMORY[0x1E0DEA4B0];
    sub_1BC9B75E4(255, (unint64_t *)&qword_1ED6C7560, MEMORY[0x1E0DEB070], MEMORY[0x1E0DEB098], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEA4B0]);
    sub_1BC9B5FF8(255);
    sub_1BC9B75E4(255, &qword_1EF478270, MEMORY[0x1E0DEB418], MEMORY[0x1E0DEB430], (uint64_t (*)(_QWORD, uint64_t, uint64_t))v6);
    sub_1BC9B60B8(255);
    sub_1BC9B614C();
    sub_1BC9B6A18();
    sub_1BC9B7330();
    sub_1BC9B7434();
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    sub_1BC9B756C();
    swift_getOpaqueTypeConformance2();
    sub_1BC9B762C();
    v8[2] = v3;
    v8[3] = v5;
    v8[4] = swift_getOpaqueTypeConformance2();
    v8[5] = sub_1BC9B6708(&qword_1EF478290, (uint64_t (*)(uint64_t))sub_1BC9B76A4, sub_1BC9B76C0, MEMORY[0x1E0CD8D70]);
    v8[0] = swift_getOpaqueTypeConformance2();
    v8[1] = sub_1BC9B76DC();
    result = MEMORY[0x1BCCFBE84](MEMORY[0x1E0CD9C20], v7, v8);
    atomic_store(result, (unint64_t *)&qword_1EF478100);
  }
  return result;
}

void sub_1BC9B5AE8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EF478108)
  {
    sub_1BC9B5B64(255);
    sub_1BC998AB0(255, &qword_1ED6C35C0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CD9AA8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CDCF68]);
    v0 = sub_1BCAB5970();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EF478108);
  }
}

void sub_1BC9B5B64(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void);
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[4];

  if (!qword_1EF478110)
  {
    sub_1BC9B5D4C(255);
    v8 = v2;
    sub_1BC9B76A4(255);
    v4 = v3;
    sub_1BC9B5ED4(255);
    v5 = MEMORY[0x1E0DEA4B0];
    sub_1BC9B75E4(255, (unint64_t *)&qword_1ED6C7560, MEMORY[0x1E0DEB070], MEMORY[0x1E0DEB098], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEA4B0]);
    sub_1BC9B5FF8(255);
    sub_1BC9B75E4(255, &qword_1EF478270, MEMORY[0x1E0DEB418], MEMORY[0x1E0DEB430], (uint64_t (*)(_QWORD, uint64_t, uint64_t))v5);
    sub_1BC9B60B8(255);
    sub_1BC9B614C();
    sub_1BC9B6A18();
    sub_1BC9B7330();
    sub_1BC9B7434();
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    sub_1BC9B756C();
    swift_getOpaqueTypeConformance2();
    sub_1BC9B762C();
    v9[0] = v8;
    v9[1] = v4;
    v9[2] = swift_getOpaqueTypeConformance2();
    v9[3] = sub_1BC9B6708(&qword_1EF478290, (uint64_t (*)(uint64_t))sub_1BC9B76A4, sub_1BC9B76C0, MEMORY[0x1E0CD8D70]);
    v6 = MEMORY[0x1BCCFBE48](a1, v9, MEMORY[0x1E0C93D60], 0);
    if (!v7)
      atomic_store(v6, (unint64_t *)&qword_1EF478110);
  }
}

void sub_1BC9B5D4C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD v9[4];

  if (!qword_1EF478118)
  {
    sub_1BC9B5ED4(255);
    v3 = v2;
    v4 = MEMORY[0x1E0DEA4B0];
    sub_1BC9B75E4(255, (unint64_t *)&qword_1ED6C7560, MEMORY[0x1E0DEB070], MEMORY[0x1E0DEB098], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEA4B0]);
    v6 = v5;
    sub_1BC9B5FF8(255);
    sub_1BC9B75E4(255, &qword_1EF478270, MEMORY[0x1E0DEB418], MEMORY[0x1E0DEB430], (uint64_t (*)(_QWORD, uint64_t, uint64_t))v4);
    sub_1BC9B60B8(255);
    sub_1BC9B614C();
    sub_1BC9B6A18();
    sub_1BC9B7330();
    sub_1BC9B7434();
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    sub_1BC9B756C();
    v9[0] = v3;
    v9[1] = v6;
    v9[2] = swift_getOpaqueTypeConformance2();
    v9[3] = sub_1BC9B762C();
    v7 = MEMORY[0x1BCCFBE48](a1, v9, MEMORY[0x1E0C93D10], 0);
    if (!v8)
      atomic_store(v7, (unint64_t *)&qword_1EF478118);
  }
}

void sub_1BC9B5ED4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD v8[4];

  if (!qword_1EF478120)
  {
    sub_1BC9B5FF8(255);
    v3 = v2;
    sub_1BC9B75E4(255, &qword_1EF478270, MEMORY[0x1E0DEB418], MEMORY[0x1E0DEB430], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEA4B0]);
    v5 = v4;
    sub_1BC9B60B8(255);
    sub_1BC9B614C();
    sub_1BC9B6A18();
    sub_1BC9B7330();
    sub_1BC9B7434();
    swift_getOpaqueTypeConformance2();
    v8[0] = v3;
    v8[1] = v5;
    v8[2] = swift_getOpaqueTypeConformance2();
    v8[3] = sub_1BC9B756C();
    v6 = MEMORY[0x1BCCFBE48](a1, v8, MEMORY[0x1E0C93CF0], 0);
    if (!v7)
      atomic_store(v6, (unint64_t *)&qword_1EF478120);
  }
}

void sub_1BC9B5FF8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD v6[4];

  if (!qword_1EF478128)
  {
    sub_1BC9B60B8(255);
    v3 = v2;
    sub_1BC9B614C();
    sub_1BC9B6A18();
    v6[2] = sub_1BC9B7330();
    v6[3] = sub_1BC9B7434();
    v6[0] = v3;
    v6[1] = swift_getOpaqueTypeConformance2();
    v4 = MEMORY[0x1BCCFBE48](a1, v6, MEMORY[0x1E0C93CB8], 0);
    if (!v5)
      atomic_store(v4, (unint64_t *)&qword_1EF478128);
  }
}

void sub_1BC9B60B8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD v7[4];

  if (!qword_1EF478130)
  {
    sub_1BC9B614C();
    v3 = v2;
    sub_1BC9B6A18();
    v7[0] = v3;
    v7[1] = v4;
    v7[2] = sub_1BC9B7330();
    v7[3] = sub_1BC9B7434();
    v5 = MEMORY[0x1BCCFBE48](a1, v7, MEMORY[0x1E0C93C60], 0);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_1EF478130);
  }
}

void sub_1BC9B614C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EF478138)
  {
    sub_1BC9B61B0(255);
    sub_1BCAB5B50();
    v0 = sub_1BCAB5970();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EF478138);
  }
}

void sub_1BC9B61B0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD v7[4];

  if (!qword_1EF478140)
  {
    sub_1BC9B6284();
    v3 = v2;
    sub_1BC9B69A0();
    v7[0] = v3;
    v7[1] = v4;
    v7[2] = sub_1BC996948(&qword_1EF4781B8, (uint64_t (*)(uint64_t))sub_1BC9B6284, MEMORY[0x1E0C939B0]);
    v7[3] = sub_1BC996948(&qword_1ED6C3608, (uint64_t (*)(uint64_t))sub_1BC9B69A0, MEMORY[0x1E0DECD88]);
    v5 = MEMORY[0x1BCCFBE48](a1, v7, MEMORY[0x1E0CDE4C8], 0);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_1EF478140);
  }
}

void sub_1BC9B6284()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EF478148)
  {
    sub_1BC9B62E4();
    sub_1BC9B6850();
    v0 = sub_1BCAB5700();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EF478148);
  }
}

void sub_1BC9B62E4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EF478150)
  {
    sub_1BC998AB0(255, &qword_1EF478158, type metadata accessor for TimeBasedDistributionChartPoint.TimeOfDay, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
    sub_1BC9B6390(255);
    sub_1BC9B67F0();
    v0 = sub_1BCAB5DD8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EF478150);
  }
}

void sub_1BC9B6390(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD v8[4];

  if (!qword_1EF478160)
  {
    sub_1BC9B64D0(255);
    v3 = v2;
    sub_1BC9B65A0(255);
    v5 = v4;
    sub_1BC9B6EA4(255, (unint64_t *)&qword_1EF478170, (uint64_t (*)(uint64_t))MEMORY[0x1E0C939F0], MEMORY[0x1E0C939E0], MEMORY[0x1E0C934E8]);
    sub_1BCAB5718();
    swift_getOpaqueTypeConformance2();
    v8[0] = v3;
    v8[1] = v5;
    v8[2] = swift_getOpaqueTypeConformance2();
    v8[3] = sub_1BC9B6708(&qword_1EF478188, (uint64_t (*)(uint64_t))sub_1BC9B65A0, sub_1BC9B66E4, MEMORY[0x1E0CD90E0]);
    v6 = MEMORY[0x1BCCFBE48](a1, v8, MEMORY[0x1E0C93498], 0);
    if (!v7)
      atomic_store(v6, (unint64_t *)&qword_1EF478160);
  }
}

void sub_1BC9B64D0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t OpaqueTypeConformance2;
  unint64_t v5;
  uint64_t v6;
  _QWORD v7[4];

  if (!qword_1EF478168)
  {
    sub_1BC9B6EA4(255, (unint64_t *)&qword_1EF478170, (uint64_t (*)(uint64_t))MEMORY[0x1E0C939F0], MEMORY[0x1E0C939E0], MEMORY[0x1E0C934E8]);
    v3 = v2;
    sub_1BCAB5718();
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
    v7[0] = v3;
    v7[1] = MEMORY[0x1E0CDF5D0];
    v7[2] = OpaqueTypeConformance2;
    v7[3] = MEMORY[0x1E0CDF598];
    v5 = MEMORY[0x1BCCFBE48](a1, v7, MEMORY[0x1E0C93510], 0);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_1EF478168);
  }
}

void sub_1BC9B65A0(uint64_t a1)
{
  sub_1BC9B65D8(a1, &qword_1EF478178, sub_1BC9B65BC);
}

void sub_1BC9B65BC(uint64_t a1)
{
  sub_1BC9B65D8(a1, &qword_1EF478180, (void (*)(uint64_t))sub_1BC9B6634);
}

void sub_1BC9B65D8(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    v4 = sub_1BCAB5970();
    if (!v5)
      atomic_store(v4, a2);
  }
}

void sub_1BC9B6634()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED6C3578)
  {
    sub_1BC9B6690();
    v0 = sub_1BCAB5970();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED6C3578);
  }
}

void sub_1BC9B6690()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED6C35B0)
  {
    v0 = sub_1BCAB5B44();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED6C35B0);
  }
}

uint64_t sub_1BC9B66E4()
{
  return sub_1BC9B6708(&qword_1EF478190, (uint64_t (*)(uint64_t))sub_1BC9B65BC, (uint64_t (*)(void))sub_1BC9B6770, MEMORY[0x1E0CD8D70]);
}

uint64_t sub_1BC9B6708(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t result;
  uint64_t v8;
  _QWORD v9[2];

  result = *a1;
  if (!result)
  {
    v8 = a2(255);
    v9[0] = a3();
    v9[1] = a4;
    result = MEMORY[0x1BCCFBE84](MEMORY[0x1E0CD9C20], v8, v9);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1BC9B6770()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[2];

  result = qword_1EF478198;
  if (!qword_1EF478198)
  {
    sub_1BC9B6634();
    v2 = v1;
    v3 = sub_1BC996948(&qword_1EF4781A0, (uint64_t (*)(uint64_t))sub_1BC9B6690, MEMORY[0x1E0CDCF80]);
    v4[0] = MEMORY[0x1E0CDDD58];
    v4[1] = v3;
    result = MEMORY[0x1BCCFBE84](MEMORY[0x1E0CD9C20], v2, v4);
    atomic_store(result, (unint64_t *)&qword_1EF478198);
  }
  return result;
}

unint64_t sub_1BC9B67F0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EF4781A8;
  if (!qword_1EF4781A8)
  {
    sub_1BC998AB0(255, &qword_1EF478158, type metadata accessor for TimeBasedDistributionChartPoint.TimeOfDay, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
    result = MEMORY[0x1BCCFBE84](MEMORY[0x1E0DEAF48], v1);
    atomic_store(result, (unint64_t *)&qword_1EF4781A8);
  }
  return result;
}

unint64_t sub_1BC9B6850()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];

  result = qword_1EF4781B0;
  if (!qword_1EF4781B0)
  {
    sub_1BC9B62E4();
    v2 = v1;
    sub_1BC9B64D0(255);
    v4 = v3;
    sub_1BC9B65A0(255);
    v6 = v5;
    sub_1BC9B6EA4(255, (unint64_t *)&qword_1EF478170, (uint64_t (*)(uint64_t))MEMORY[0x1E0C939F0], MEMORY[0x1E0C939E0], MEMORY[0x1E0C934E8]);
    sub_1BCAB5718();
    swift_getOpaqueTypeConformance2();
    v7[1] = v4;
    v7[2] = v6;
    v7[3] = swift_getOpaqueTypeConformance2();
    v7[4] = sub_1BC9B6708(&qword_1EF478188, (uint64_t (*)(uint64_t))sub_1BC9B65A0, sub_1BC9B66E4, MEMORY[0x1E0CD90E0]);
    v7[0] = swift_getOpaqueTypeConformance2();
    result = MEMORY[0x1BCCFBE84](MEMORY[0x1E0C93DA0], v2, v7);
    atomic_store(result, (unint64_t *)&qword_1EF4781B0);
  }
  return result;
}

void sub_1BC9B69A0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED6C3610)
  {
    sub_1BCAB5958();
    sub_1BC996948(&qword_1ED6C3560, (uint64_t (*)(uint64_t))MEMORY[0x1E0CD9958], MEMORY[0x1E0CD9980]);
    v0 = sub_1BCAB6630();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED6C3610);
  }
}

void sub_1BC9B6A18()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EF4781C0)
  {
    sub_1BC9B6ABC(255, &qword_1EF4781C8, &qword_1EF4781D0, (uint64_t (*)(uint64_t))sub_1BC9B6B34, (void (*)(void))sub_1BC9B6D18);
    sub_1BC9B6ABC(255, &qword_1EF478200, &qword_1EF478208, (uint64_t (*)(uint64_t))sub_1BC9B6E14, (void (*)(void))sub_1BC9B7174);
    v0 = sub_1BCAB5694();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EF4781C0);
  }
}

void sub_1BC9B6ABC(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t (*a4)(uint64_t), void (*a5)(void))
{
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    sub_1BC998AB0(255, a3, a4, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    a5();
    v7 = sub_1BCAB57B4();
    if (!v8)
      atomic_store(v7, a2);
  }
}

void sub_1BC9B6B34(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD v6[4];

  if (!qword_1EF4781D8)
  {
    sub_1BC9B6C08(255);
    v3 = v2;
    sub_1BC9B75E4(255, &qword_1EF4781E8, MEMORY[0x1E0CDDD78], MEMORY[0x1E0CDDD58], MEMORY[0x1E0C93720]);
    v6[2] = sub_1BC9B6CB0();
    v6[3] = MEMORY[0x1E0CDF598];
    v6[0] = v3;
    v6[1] = swift_getOpaqueTypeConformance2();
    v4 = MEMORY[0x1BCCFBE48](a1, v6, MEMORY[0x1E0C93A50], 0);
    if (!v5)
      atomic_store(v4, (unint64_t *)&qword_1EF4781D8);
  }
}

void sub_1BC9B6C08(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD v7[4];

  if (!qword_1EF4781E0)
  {
    sub_1BC9B75E4(255, &qword_1EF4781E8, MEMORY[0x1E0CDDD78], MEMORY[0x1E0CDDD58], MEMORY[0x1E0C93720]);
    v3 = v2;
    v4 = sub_1BC9B6CB0();
    v7[0] = v3;
    v7[1] = MEMORY[0x1E0CDF5D0];
    v7[2] = v4;
    v7[3] = MEMORY[0x1E0CDF598];
    v5 = MEMORY[0x1BCCFBE48](a1, v7, MEMORY[0x1E0C93A40], 0);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_1EF4781E0);
  }
}

unint64_t sub_1BC9B6CB0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EF4781F0;
  if (!qword_1EF4781F0)
  {
    sub_1BC9B75E4(255, &qword_1EF4781E8, MEMORY[0x1E0CDDD78], MEMORY[0x1E0CDDD58], MEMORY[0x1E0C93720]);
    result = MEMORY[0x1BCCFBE84](MEMORY[0x1E0C93748], v1);
    atomic_store(result, (unint64_t *)&qword_1EF4781F0);
  }
  return result;
}

unint64_t sub_1BC9B6D18()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v5[5];

  result = qword_1EF4781F8;
  if (!qword_1EF4781F8)
  {
    sub_1BC998AB0(255, &qword_1EF4781D0, (uint64_t (*)(uint64_t))sub_1BC9B6B34, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    v2 = v1;
    sub_1BC9B6C08(255);
    v4 = v3;
    sub_1BC9B75E4(255, &qword_1EF4781E8, MEMORY[0x1E0CDDD78], MEMORY[0x1E0CDDD58], MEMORY[0x1E0C93720]);
    v5[3] = sub_1BC9B6CB0();
    v5[4] = MEMORY[0x1E0CDF598];
    v5[1] = v4;
    v5[2] = swift_getOpaqueTypeConformance2();
    v5[0] = swift_getOpaqueTypeConformance2();
    result = MEMORY[0x1BCCFBE84](MEMORY[0x1E0C93E10], v2, v5);
    atomic_store(result, (unint64_t *)&qword_1EF4781F8);
  }
  return result;
}

void sub_1BC9B6E14()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EF478210)
  {
    sub_1BC9B6EA4(255, &qword_1EF478218, (uint64_t (*)(uint64_t))MEMORY[0x1E0C93AA8], MEMORY[0x1E0C93A98], MEMORY[0x1E0C93A60]);
    sub_1BC9B6F14(255);
    v0 = sub_1BCAB5550();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EF478210);
  }
}

void sub_1BC9B6EA4(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t a4, uint64_t a5)
{
  unint64_t v9;
  uint64_t v10;
  _QWORD v11[2];

  if (!*a2)
  {
    v11[0] = a3(255);
    v11[1] = a4;
    v9 = MEMORY[0x1BCCFBE48](a1, v11, a5, 0);
    if (!v10)
      atomic_store(v9, a2);
  }
}

void sub_1BC9B6F14(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD v6[4];

  if (!qword_1EF478220)
  {
    sub_1BC9B700C(255);
    v3 = v2;
    sub_1BC9B70E0(255);
    sub_1BC9B75E4(255, &qword_1EF4781E8, MEMORY[0x1E0CDDD78], MEMORY[0x1E0CDDD58], MEMORY[0x1E0C93720]);
    sub_1BC9B6CB0();
    v6[2] = swift_getOpaqueTypeConformance2();
    v6[3] = MEMORY[0x1E0CDF598];
    v6[0] = v3;
    v6[1] = swift_getOpaqueTypeConformance2();
    v4 = MEMORY[0x1BCCFBE48](a1, v6, MEMORY[0x1E0C93A50], 0);
    if (!v5)
      atomic_store(v4, (unint64_t *)&qword_1EF478220);
  }
}

void sub_1BC9B700C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t OpaqueTypeConformance2;
  unint64_t v5;
  uint64_t v6;
  _QWORD v7[4];

  if (!qword_1EF478228)
  {
    sub_1BC9B70E0(255);
    v3 = v2;
    sub_1BC9B75E4(255, &qword_1EF4781E8, MEMORY[0x1E0CDDD78], MEMORY[0x1E0CDDD58], MEMORY[0x1E0C93720]);
    sub_1BC9B6CB0();
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
    v7[0] = v3;
    v7[1] = MEMORY[0x1E0CDF5D0];
    v7[2] = OpaqueTypeConformance2;
    v7[3] = MEMORY[0x1E0CDF598];
    v5 = MEMORY[0x1BCCFBE48](a1, v7, MEMORY[0x1E0C93A40], 0);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_1EF478228);
  }
}

void sub_1BC9B70E0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD v5[2];

  if (!qword_1EF478230)
  {
    sub_1BC9B75E4(255, &qword_1EF4781E8, MEMORY[0x1E0CDDD78], MEMORY[0x1E0CDDD58], MEMORY[0x1E0C93720]);
    v5[0] = v2;
    v5[1] = sub_1BC9B6CB0();
    v3 = MEMORY[0x1BCCFBE48](a1, v5, MEMORY[0x1E0C93A60], 0);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1EF478230);
  }
}

unint64_t sub_1BC9B7174()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  result = qword_1EF478238;
  if (!qword_1EF478238)
  {
    sub_1BC998AB0(255, &qword_1EF478208, (uint64_t (*)(uint64_t))sub_1BC9B6E14, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    v2 = v1;
    v3 = sub_1BC9B71EC();
    result = MEMORY[0x1BCCFBE84](MEMORY[0x1E0C93E10], v2, &v3);
    atomic_store(result, (unint64_t *)&qword_1EF478238);
  }
  return result;
}

unint64_t sub_1BC9B71EC()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v5[5];
  _QWORD v6[2];

  result = qword_1EF478240;
  if (!qword_1EF478240)
  {
    sub_1BC9B6E14();
    v2 = v1;
    sub_1BCAB5754();
    v6[0] = swift_getOpaqueTypeConformance2();
    sub_1BC9B700C(255);
    v4 = v3;
    sub_1BC9B70E0(255);
    sub_1BC9B75E4(255, &qword_1EF4781E8, MEMORY[0x1E0CDDD78], MEMORY[0x1E0CDDD58], MEMORY[0x1E0C93720]);
    sub_1BC9B6CB0();
    v5[3] = swift_getOpaqueTypeConformance2();
    v5[4] = MEMORY[0x1E0CDF598];
    v5[1] = v4;
    v5[2] = swift_getOpaqueTypeConformance2();
    v6[1] = swift_getOpaqueTypeConformance2();
    v5[0] = v6;
    result = MEMORY[0x1BCCFBE84](MEMORY[0x1E0C93450], v2, v5);
    atomic_store(result, (unint64_t *)&qword_1EF478240);
  }
  return result;
}

unint64_t sub_1BC9B7330()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[6];

  result = qword_1EF478248;
  if (!qword_1EF478248)
  {
    sub_1BC9B614C();
    v2 = v1;
    sub_1BC9B6284();
    v4 = v3;
    sub_1BC9B69A0();
    v6[2] = v4;
    v6[3] = v5;
    v6[4] = sub_1BC996948(&qword_1EF4781B8, (uint64_t (*)(uint64_t))sub_1BC9B6284, MEMORY[0x1E0C939B0]);
    v6[5] = sub_1BC996948(&qword_1ED6C3608, (uint64_t (*)(uint64_t))sub_1BC9B69A0, MEMORY[0x1E0DECD88]);
    v6[0] = swift_getOpaqueTypeConformance2();
    v6[1] = sub_1BC996948(&qword_1EF478250, (uint64_t (*)(uint64_t))MEMORY[0x1E0CDCFD0], MEMORY[0x1E0CDCFB8]);
    result = MEMORY[0x1BCCFBE84](MEMORY[0x1E0CD9C20], v2, v6);
    atomic_store(result, (unint64_t *)&qword_1EF478248);
  }
  return result;
}

unint64_t sub_1BC9B7434()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_1EF478258;
  if (!qword_1EF478258)
  {
    sub_1BC9B6A18();
    v2 = v1;
    v3[0] = sub_1BC9B749C();
    v3[1] = sub_1BC9B7504();
    result = MEMORY[0x1BCCFBE84](MEMORY[0x1E0C93838], v2, v3);
    atomic_store(result, (unint64_t *)&qword_1EF478258);
  }
  return result;
}

unint64_t sub_1BC9B749C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EF478260;
  if (!qword_1EF478260)
  {
    sub_1BC9B6ABC(255, &qword_1EF4781C8, &qword_1EF4781D0, (uint64_t (*)(uint64_t))sub_1BC9B6B34, (void (*)(void))sub_1BC9B6D18);
    result = MEMORY[0x1BCCFBE84](MEMORY[0x1E0C93BA0], v1);
    atomic_store(result, (unint64_t *)&qword_1EF478260);
  }
  return result;
}

unint64_t sub_1BC9B7504()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EF478268;
  if (!qword_1EF478268)
  {
    sub_1BC9B6ABC(255, &qword_1EF478200, &qword_1EF478208, (uint64_t (*)(uint64_t))sub_1BC9B6E14, (void (*)(void))sub_1BC9B7174);
    result = MEMORY[0x1BCCFBE84](MEMORY[0x1E0C93BA0], v1);
    atomic_store(result, (unint64_t *)&qword_1EF478268);
  }
  return result;
}

unint64_t sub_1BC9B756C()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_1EF478278;
  if (!qword_1EF478278)
  {
    sub_1BC9B75E4(255, &qword_1EF478270, MEMORY[0x1E0DEB418], MEMORY[0x1E0DEB430], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEA4B0]);
    v2 = MEMORY[0x1E0C93DE8];
    result = MEMORY[0x1BCCFBE84](MEMORY[0x1E0C93DA8], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_1EF478278);
  }
  return result;
}

void sub_1BC9B75E4(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD, uint64_t, uint64_t))
{
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    v6 = a5(0, a3, a4);
    if (!v7)
      atomic_store(v6, a2);
  }
}

unint64_t sub_1BC9B762C()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_1EF478280;
  if (!qword_1EF478280)
  {
    sub_1BC9B75E4(255, (unint64_t *)&qword_1ED6C7560, MEMORY[0x1E0DEB070], MEMORY[0x1E0DEB098], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEA4B0]);
    v2 = MEMORY[0x1E0C93DE0];
    result = MEMORY[0x1BCCFBE84](MEMORY[0x1E0C93DA8], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_1EF478280);
  }
  return result;
}

void sub_1BC9B76A4(uint64_t a1)
{
  sub_1BC9B65D8(a1, &qword_1EF478288, (void (*)(uint64_t))MEMORY[0x1E0C937B0]);
}

uint64_t sub_1BC9B76C0()
{
  return sub_1BC996948(&qword_1EF478298, (uint64_t (*)(uint64_t))MEMORY[0x1E0C937B0], MEMORY[0x1E0C937A8]);
}

unint64_t sub_1BC9B76DC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1ED6C35B8;
  if (!qword_1ED6C35B8)
  {
    sub_1BC998AB0(255, &qword_1ED6C35C0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CD9AA8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CDCF68]);
    result = MEMORY[0x1BCCFBE84](MEMORY[0x1E0CDCF80], v1);
    atomic_store(result, (unint64_t *)&qword_1ED6C35B8);
  }
  return result;
}

HealthVisualization::StatisticsQueryConfiguration __swiftcall StatisticsQueryConfiguration.init(dateRange:statisticsOptions:anchorDate:aggregationInterval:)(HealthVisualization::DateRange dateRange, Swift::OpaquePointer statisticsOptions, HealthVisualization::AnchorDate anchorDate, HealthVisualization::StatisticsInterval aggregationInterval)
{
  uint64_t v4;
  char v5;
  HealthVisualization::StatisticsQueryConfiguration result;

  v5 = *(_BYTE *)anchorDate;
  *(_BYTE *)v4 = dateRange;
  *(Swift::OpaquePointer *)(v4 + 8) = statisticsOptions;
  *(_BYTE *)(v4 + 16) = v5;
  *(_BYTE *)(v4 + 17) = aggregationInterval;
  result.statisticsOptions = statisticsOptions;
  result.anchorDate = anchorDate;
  result.dateRange = dateRange;
  return result;
}

uint64_t StatisticsQueryConfiguration.dateRange.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t StatisticsQueryConfiguration.statisticsOptions.getter()
{
  return swift_bridgeObjectRetain();
}

void StatisticsQueryConfiguration.anchorDate.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 16);
}

uint64_t StatisticsQueryConfiguration.aggregationInterval.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 17);
}

uint64_t sub_1BC9B777C()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1BC9B77B0 + 4 * byte_1BCABF6E0[*v0]))(0x676E615265746164, 0xE900000000000065);
}

unint64_t sub_1BC9B77B0()
{
  return 0xD000000000000011;
}

uint64_t sub_1BC9B77CC()
{
  return 0x6144726F68636E61;
}

unint64_t sub_1BC9B77E8()
{
  return 0xD000000000000013;
}

uint64_t sub_1BC9B7808@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1BC9B83D0(a1, a2);
  *a3 = result;
  return result;
}

void sub_1BC9B782C(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

uint64_t sub_1BC9B7838()
{
  sub_1BC9B7DB4();
  return sub_1BCAB68D0();
}

uint64_t sub_1BC9B7860()
{
  sub_1BC9B7DB4();
  return sub_1BCAB68DC();
}

uint64_t StatisticsQueryConfiguration.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char v9;
  int v10;
  char v11;
  char v12;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  char v21;
  char v22;
  char v23;
  char v24;
  char v25;

  sub_1BC9B7ED4(0, &qword_1ED6C4778, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED170]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v14 - v7;
  v9 = *v1;
  v17 = *((_QWORD *)v1 + 1);
  v10 = v1[16];
  v15 = v1[17];
  v16 = v10;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BC9B7DB4();
  sub_1BCAB68B8();
  v25 = v9;
  v24 = 0;
  sub_1BC99B470();
  sub_1BCAB6774();
  if (!v2)
  {
    v11 = v15;
    v12 = v16;
    v18 = v17;
    v23 = 1;
    sub_1BC9B7DF8();
    sub_1BC9B7F30(&qword_1ED6C4578, (uint64_t (*)(void))sub_1BC9B7E4C, MEMORY[0x1E0DEAF10]);
    sub_1BCAB6774();
    v22 = v12;
    v21 = 2;
    sub_1BC9AC148();
    sub_1BCAB6774();
    v20 = v11;
    v19 = 3;
    sub_1BC9B7E90();
    sub_1BCAB6774();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t StatisticsQueryConfiguration.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char v10;
  uint64_t v11;
  char v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  char v18;
  unsigned __int8 v19;
  char v20;
  char v21;
  char v22;

  sub_1BC9B7ED4(0, &qword_1ED6C6EF0, MEMORY[0x1E0DED048]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v14 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BC9B7DB4();
  sub_1BCAB68AC();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v21 = 0;
  sub_1BC99B510();
  sub_1BCAB66E4();
  v10 = v22;
  sub_1BC9B7DF8();
  v20 = 1;
  sub_1BC9B7F30(&qword_1ED6C6DF0, (uint64_t (*)(void))sub_1BC9B7F94, MEMORY[0x1E0DEAF40]);
  sub_1BCAB66E4();
  v11 = v15;
  v18 = 2;
  sub_1BC9AC3EC();
  swift_bridgeObjectRetain();
  sub_1BCAB66E4();
  HIDWORD(v14) = v19;
  v16 = 3;
  sub_1BC9B7FD8();
  sub_1BCAB66E4();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  v13 = v17;
  *(_BYTE *)a2 = v10;
  *(_QWORD *)(a2 + 8) = v11;
  *(_BYTE *)(a2 + 16) = BYTE4(v14);
  *(_BYTE *)(a2 + 17) = v13;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1BC9B7CF8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return StatisticsQueryConfiguration.init(from:)(a1, a2);
}

uint64_t sub_1BC9B7D0C(_QWORD *a1)
{
  return StatisticsQueryConfiguration.encode(to:)(a1);
}

void _s19HealthVisualization28StatisticsQueryConfigurationV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v3;
  char v4;
  uint64_t v5;
  char v6;
  char v7;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_BYTE *)(a1 + 16);
  v4 = *(_BYTE *)(a1 + 17);
  v5 = *(_QWORD *)(a2 + 8);
  sub_1BC9991D8(*(_BYTE *)a1);
  if ((v6 & 1) != 0 && (sub_1BC9A920C(v2, v5) & 1) != 0)
  {
    sub_1BC9993E0(v3);
    if ((v7 & 1) != 0)
      sub_1BC9995AC(v4);
  }
}

unint64_t sub_1BC9B7DB4()
{
  unint64_t result;

  result = qword_1ED6C6B78;
  if (!qword_1ED6C6B78)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCABF860, &type metadata for StatisticsQueryConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED6C6B78);
  }
  return result;
}

void sub_1BC9B7DF8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED6C6DE8)
  {
    v0 = sub_1BCAB6060();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED6C6DE8);
  }
}

unint64_t sub_1BC9B7E4C()
{
  unint64_t result;

  result = qword_1ED6C6088;
  if (!qword_1ED6C6088)
  {
    result = MEMORY[0x1BCCFBE84](&protocol conformance descriptor for StatisticsOption, &type metadata for StatisticsOption);
    atomic_store(result, (unint64_t *)&qword_1ED6C6088);
  }
  return result;
}

unint64_t sub_1BC9B7E90()
{
  unint64_t result;

  result = qword_1ED6C3948;
  if (!qword_1ED6C3948)
  {
    result = MEMORY[0x1BCCFBE84](&protocol conformance descriptor for StatisticsInterval, &type metadata for StatisticsInterval);
    atomic_store(result, (unint64_t *)&qword_1ED6C3948);
  }
  return result;
}

void sub_1BC9B7ED4(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_1BC9B7DB4();
    v7 = a3(a1, &type metadata for StatisticsQueryConfiguration.CodingKeys, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t sub_1BC9B7F30(unint64_t *a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = *a1;
  if (!result)
  {
    sub_1BC9B7DF8();
    v8 = v7;
    v9 = a2();
    result = MEMORY[0x1BCCFBE84](a3, v8, &v9);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1BC9B7F94()
{
  unint64_t result;

  result = qword_1ED6C7520;
  if (!qword_1ED6C7520)
  {
    result = MEMORY[0x1BCCFBE84](&protocol conformance descriptor for StatisticsOption, &type metadata for StatisticsOption);
    atomic_store(result, (unint64_t *)&qword_1ED6C7520);
  }
  return result;
}

unint64_t sub_1BC9B7FD8()
{
  unint64_t result;

  result = qword_1ED6C6A18;
  if (!qword_1ED6C6A18)
  {
    result = MEMORY[0x1BCCFBE84](&protocol conformance descriptor for StatisticsInterval, &type metadata for StatisticsInterval);
    atomic_store(result, (unint64_t *)&qword_1ED6C6A18);
  }
  return result;
}

uint64_t destroy for DiagramConfiguration.Banner()
{
  return swift_bridgeObjectRelease();
}

uint64_t _s19HealthVisualization28StatisticsQueryConfigurationVwCP_0(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for StatisticsQueryConfiguration(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  return a1;
}

uint64_t assignWithTake for StatisticsQueryConfiguration(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for StatisticsQueryConfiguration(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 18))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for StatisticsQueryConfiguration(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_WORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 18) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 18) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for StatisticsQueryConfiguration()
{
  return &type metadata for StatisticsQueryConfiguration;
}

uint64_t getEnumTagSinglePayload for TimeBasedDistributionChartPoint.PointKind(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFD)
    goto LABEL_17;
  if (a2 + 3 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 3) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 3;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 3;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 3;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 4;
  v8 = v6 - 4;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for StatisticsQueryConfiguration.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1BC9B8278 + 4 * byte_1BCABF6E9[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1BC9B82AC + 4 * byte_1BCABF6E4[v4]))();
}

uint64_t sub_1BC9B82AC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BC9B82B4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BC9B82BCLL);
  return result;
}

uint64_t sub_1BC9B82C8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BC9B82D0);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1BC9B82D4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BC9B82DC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for StatisticsQueryConfiguration.CodingKeys()
{
  return &type metadata for StatisticsQueryConfiguration.CodingKeys;
}

unint64_t sub_1BC9B82FC()
{
  unint64_t result;

  result = qword_1EF4782A0;
  if (!qword_1EF4782A0)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCABF838, &type metadata for StatisticsQueryConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF4782A0);
  }
  return result;
}

unint64_t sub_1BC9B8344()
{
  unint64_t result;

  result = qword_1ED6C6B88;
  if (!qword_1ED6C6B88)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCABF7A8, &type metadata for StatisticsQueryConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED6C6B88);
  }
  return result;
}

unint64_t sub_1BC9B838C()
{
  unint64_t result;

  result = qword_1ED6C6B80;
  if (!qword_1ED6C6B80)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCABF7D0, &type metadata for StatisticsQueryConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED6C6B80);
  }
  return result;
}

uint64_t sub_1BC9B83D0(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x676E615265746164 && a2 == 0xE900000000000065;
  if (v2 || (sub_1BCAB67C8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000001BCACF160 || (sub_1BCAB67C8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6144726F68636E61 && a2 == 0xEA00000000006574 || (sub_1BCAB67C8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x80000001BCACF180)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v6 = sub_1BCAB67C8();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

id static MostRecentTimePeriodQuerySupport.predicateForAllSamples(dateInterval:additionalPredicate:)(uint64_t a1, void *a2)
{
  uint64_t v3;
  void *v4;
  void *v5;
  id v6;
  id v7;
  void *v8;
  id v9;

  sub_1BC9A1210(0, (unint64_t *)&qword_1ED6C6710, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_1BCABF370;
  v4 = (void *)objc_opt_self();
  v5 = (void *)sub_1BCAB4B78();
  v6 = objc_msgSend(v4, sel_predicateForSamplesWithinDateInterval_options_, v5, 0);

  *(_QWORD *)(v3 + 32) = v6;
  sub_1BCAB6024();
  if (a2)
  {
    v7 = a2;
    MEMORY[0x1BCCFABF4]();
    if (*(_QWORD *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      sub_1BCAB6030();
    sub_1BCAB6054();
    sub_1BCAB6024();
  }
  sub_1BC9A649C(0, (unint64_t *)&qword_1ED6C2E60);
  v8 = (void *)sub_1BCAB600C();
  swift_bridgeObjectRelease();
  v9 = objc_msgSend((id)objc_opt_self(), sel_andPredicateWithSubpredicates_, v8);

  return v9;
}

uint64_t static MostRecentTimePeriodQuerySupport.sortDescriptorsForSamples.getter()
{
  uint64_t v0;

  sub_1BC9A1210(0, (unint64_t *)&qword_1ED6C6710, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1BCABF370;
  sub_1BC9A649C(0, &qword_1ED6C6E78);
  swift_getKeyPath();
  *(_QWORD *)(v0 + 32) = sub_1BCAB6210();
  sub_1BCAB6024();
  return v0;
}

double static MostRecentTimePeriodQuerySupport.totalDuration(for:referenceSample:)(unint64_t a1, void *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  double v16;
  char *v17;
  void *v18;
  void *v19;
  void (*v20)(char *, uint64_t);
  void *v21;
  id v22;
  uint64_t v23;
  _QWORD *v24;
  int64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  void (*v29)(char *, char *, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  double *v37;
  uint64_t v38;
  uint64_t v39;
  double *v40;
  double v41;
  uint64_t v43;
  _QWORD v44[2];
  id v45;
  uint64_t v46;

  v4 = (_QWORD *)sub_1BCAB5514();
  v44[1] = *(v4 - 1);
  v45 = v4;
  MEMORY[0x1E0C80A78](v4);
  v5 = sub_1BCAB4E54();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1BCAB4BD8();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)v44 - v14;
  if (a1 >> 62)
  {
    v44[0] = (char *)v44 - v14;
    swift_bridgeObjectRetain();
    v43 = sub_1BCAB65DC();
    swift_bridgeObjectRelease();
    v15 = (char *)v44[0];
    v16 = 0.0;
    if (!v43)
      return v16;
LABEL_3:
    v17 = v15;
    sub_1BC9BA7BC(a2, (uint64_t)v15);
    v45 = (id)objc_opt_self();
    sub_1BC9A649C(0, &qword_1ED6C7538);
    v18 = (void *)sub_1BCAB600C();
    sub_1BCAB4BC0();
    v19 = (void *)sub_1BCAB4DE8();
    v20 = *(void (**)(char *, uint64_t))(v6 + 8);
    v20(v8, v5);
    v44[0] = v17;
    sub_1BCAB4B9C();
    v21 = (void *)sub_1BCAB4DE8();
    v20(v8, v5);
    v22 = objc_msgSend(v45, sel_coalesceTimePeriodsFromSamples_strictStartDate_strictEndDate_, v18, v19, v21);

    v23 = MEMORY[0x1E0DEE9D8];
    if (v22)
    {
      v24 = (_QWORD *)sub_1BCAB6018();

      v25 = v24[2];
      if (v25)
      {
LABEL_5:
        v46 = v23;
        sub_1BC9BACC0(0, v25, 0);
        v26 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
        v45 = v24;
        v27 = (char *)v24 + v26;
        v28 = *(_QWORD *)(v10 + 72);
        v29 = *(void (**)(char *, char *, uint64_t))(v10 + 16);
        do
        {
          v29(v12, v27, v9);
          sub_1BCAB4BCC();
          v31 = v30;
          (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
          v32 = v46;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_1BC9BACC0(0, *(_QWORD *)(v32 + 16) + 1, 1);
            v32 = v46;
          }
          v34 = *(_QWORD *)(v32 + 16);
          v33 = *(_QWORD *)(v32 + 24);
          if (v34 >= v33 >> 1)
          {
            sub_1BC9BACC0(v33 > 1, v34 + 1, 1);
            v32 = v46;
          }
          *(_QWORD *)(v32 + 16) = v34 + 1;
          *(_QWORD *)(v32 + 8 * v34 + 32) = v31;
          v27 += v28;
          --v25;
        }
        while (v25);
        swift_bridgeObjectRelease();
        v35 = *(_QWORD *)(v32 + 16);
        if (v35)
          goto LABEL_12;
        goto LABEL_16;
      }
    }
    else
    {
      v24 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v25 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
      if (v25)
        goto LABEL_5;
    }
    swift_bridgeObjectRelease();
    v32 = MEMORY[0x1E0DEE9D8];
    v35 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
    if (v35)
    {
LABEL_12:
      if (v35 == 1)
      {
        v36 = 0;
        v16 = 0.0;
      }
      else
      {
        v36 = v35 & 0x7FFFFFFFFFFFFFFELL;
        v37 = (double *)(v32 + 40);
        v16 = 0.0;
        v38 = v35 & 0x7FFFFFFFFFFFFFFELL;
        do
        {
          v16 = v16 + *(v37 - 1) + *v37;
          v37 += 2;
          v38 -= 2;
        }
        while (v38);
        if (v35 == v36)
          goto LABEL_22;
      }
      v39 = v35 - v36;
      v40 = (double *)(v32 + 8 * v36 + 32);
      do
      {
        v41 = *v40++;
        v16 = v16 + v41;
        --v39;
      }
      while (v39);
LABEL_22:
      swift_bridgeObjectRelease();
      (*(void (**)(_QWORD, uint64_t))(v10 + 8))(v44[0], v9);
      return v16;
    }
LABEL_16:
    v16 = 0.0;
    goto LABEL_22;
  }
  v16 = 0.0;
  if (*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_3;
  return v16;
}

void static MostRecentTimePeriodQuerySupport.timestamp(sample:)(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  char *v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v17;
  id v18;
  id v19;
  void (*v20)(char *, uint64_t);
  id v21;
  id v22;
  uint64_t v23;
  id v24;

  v2 = sub_1BCAB4E54();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v7 = MEMORY[0x1E0C80A78](v6).n128_u64[0];
  v9 = (char *)&v23 - v8;
  v10 = objc_msgSend(a1, sel_sampleType, v7);
  v11 = objc_msgSend(v10, sel_identifier);

  v12 = sub_1BCAB5F04();
  v14 = v13;

  if (sub_1BCAB5F04() == v12 && v15 == v14)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    v17 = sub_1BCAB67C8();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v17 & 1) == 0)
    {
      v24 = objc_msgSend(a1, sel_endDate);
      sub_1BCAB4E24();

      return;
    }
  }
  v18 = objc_msgSend(a1, sel_endDate);
  sub_1BCAB4E24();

  v19 = objc_msgSend(a1, sel__creationDate);
  sub_1BCAB4E24();

  LOBYTE(v19) = sub_1BCAB4E00();
  v20 = *(void (**)(char *, uint64_t))(v3 + 8);
  v20(v5, v2);
  v20(v9, v2);
  if ((v19 & 1) != 0)
    v21 = objc_msgSend(a1, sel_endDate);
  else
    v21 = objc_msgSend(a1, sel__creationDate);
  v22 = v21;
  sub_1BCAB4E24();

}

uint64_t MostRecentTimePeriodQueryOperation.result.getter()
{
  swift_retain();
  sub_1BCAB5070();
  return swift_release();
}

uint64_t sub_1BC9B8FF0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v6;

  sub_1BC9BCE9C();
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BC9BD174(a1, (uint64_t)v4);
  return sub_1BC9B9068((uint64_t)v4);
}

uint64_t sub_1BC9B9068(uint64_t a1)
{
  swift_retain();
  sub_1BCAB507C();
  swift_release();
  return sub_1BC9BD548(a1);
}

id sub_1BC9B90C4()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  void *v5;
  id v6;

  v1 = qword_1ED6C43B8;
  v2 = *(void **)(v0 + qword_1ED6C43B8);
  if (v2)
  {
    v3 = *(id *)(v0 + qword_1ED6C43B8);
  }
  else
  {
    v4 = sub_1BC9B9120();
    v5 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v4;
    v3 = v4;

    v2 = 0;
  }
  v6 = v2;
  return v3;
}

id sub_1BC9B9120()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  id v9;
  void *v10;
  id v11;
  id v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  _QWORD *v24;
  id v25;
  id v27;
  uint64_t v28;

  v1 = v0;
  v2 = *(_QWORD *)v0;
  v3 = *MEMORY[0x1E0DEEDD8];
  sub_1BC9A1210(0, (unint64_t *)&qword_1ED6C6710, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1BCABF370;
  v5 = (void *)objc_opt_self();
  v6 = (void *)sub_1BCAB4DE8();
  v7 = objc_msgSend(v5, sel_predicateForSamplesWithStartDate_endDate_options_, 0, v6, 0);

  *(_QWORD *)(v4 + 32) = v7;
  v28 = v4;
  sub_1BCAB6024();
  v8 = *(void **)&v1[qword_1ED6C43D8];
  if (v8)
  {
    v9 = v8;
    MEMORY[0x1BCCFABF4]();
    if (*(_QWORD *)((v28 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v28 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      sub_1BCAB6030();
    sub_1BCAB6054();
    sub_1BCAB6024();

  }
  sub_1BC9A649C(0, (unint64_t *)&qword_1ED6C2E60);
  v10 = (void *)sub_1BCAB600C();
  swift_bridgeObjectRelease();
  v27 = objc_msgSend((id)objc_opt_self(), sel_andPredicateWithSubpredicates_, v10);

  v11 = *(id *)&v1[qword_1ED6C43C0];
  v12 = objc_msgSend(v1, sel_name);
  if (v12)
  {
    v14 = v12;
    v15 = sub_1BCAB5F04();
    v17 = v16;

  }
  else
  {
    v15 = 0;
    v17 = 0;
  }
  v18 = (uint64_t *)((v3 & v2) + class metadata base offset for MostRecentTimePeriodQueryOperation);
  v19 = *v18;
  v20 = v18[1];
  type metadata accessor for MostRecentSampleQueryOperation(0, *v18, v20, v13);
  v21 = *(_QWORD *)&v1[qword_1ED6D38A0];
  v22 = *(void **)&v1[qword_1ED6D3898];
  v23 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v24 = (_QWORD *)swift_allocObject();
  v24[2] = v19;
  v24[3] = v20;
  v24[4] = v23;
  v25 = sub_1BCA2DCB8(v11, v27, v15, v17, v21, v22, (uint64_t)sub_1BC9BD4EC, (uint64_t)v24);
  swift_release();
  return v25;
}

id MostRecentTimePeriodQueryOperation.__allocating_init(sampleType:endDate:predicate:name:queryQualityOfService:healthStore:)(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  objc_class *v7;
  id v15;
  id v16;

  v15 = objc_allocWithZone(v7);
  v16 = sub_1BC9BCC34(a1, a2, a3, a4, a5, a6, a7);

  return v16;
}

id MostRecentTimePeriodQueryOperation.init(sampleType:endDate:predicate:name:queryQualityOfService:healthStore:)(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  id v10;

  v10 = sub_1BC9BCC34(a1, a2, a3, a4, a5, a6, a7);

  return v10;
}

Swift::Void __swiftcall MostRecentTimePeriodQueryOperation.main()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  _BYTE *v5;
  Swift::String v6;
  Swift::String v7;
  void *v8;
  id v9;
  uint64_t v10;

  sub_1BC9BCE9C();
  MEMORY[0x1E0C80A78](v1);
  v3 = (uint64_t *)((char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1BC9A7EA4();
  v4 = swift_allocError();
  *v5 = 2;
  *v3 = v4;
  swift_storeEnumTagMultiPayload();
  sub_1BC9B9068((uint64_t)v3);
  v6._countAndFlagsBits = 0x676E696E6E7572;
  v6._object = (void *)0xE700000000000000;
  v7._countAndFlagsBits = 0;
  v7._object = (void *)0xE000000000000000;
  NSOperation.logLifeCycleEvent(_:withPrivateInfo:)(v6, v7);
  v8 = *(void **)(v0 + qword_1ED6C43C8);
  v9 = sub_1BC9B90C4();
  objc_msgSend(v8, sel_addOperation_, v9);

}

void sub_1BC9B95B8(void *a1)
{
  id v1;

  v1 = a1;
  MostRecentTimePeriodQueryOperation.main()();

}

Swift::Void __swiftcall MostRecentTimePeriodQueryOperation.cleanUp()()
{
  char *v0;
  uint64_t v1;
  double v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  _BYTE *v6;
  Swift::String v7;
  Swift::String v8;
  uint64_t v9;

  sub_1BC9BCE9C();
  *(_QWORD *)&v2 = MEMORY[0x1E0C80A78](v1).n128_u64[0];
  v4 = (uint64_t *)((char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (objc_msgSend(v0, sel_isCancelled, v2))
  {
    sub_1BC9A7EA4();
    v5 = swift_allocError();
    *v6 = 3;
    *v4 = v5;
    swift_storeEnumTagMultiPayload();
    sub_1BC9B9068((uint64_t)v4);
    v7._countAndFlagsBits = 0x656C6C65636E6163;
    v7._object = (void *)0xE900000000000064;
    v8._countAndFlagsBits = 0;
    v8._object = (void *)0xE000000000000000;
    NSOperation.logLifeCycleEvent(_:withPrivateInfo:)(v7, v8);
  }
  objc_msgSend(*(id *)&v0[qword_1ED6C43C8], sel_cancelAllOperations);
}

id MostRecentTimePeriodQueryOperation.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void MostRecentTimePeriodQueryOperation.init()()
{
  sub_1BC9BCF80();
}

void sub_1BC9B9720()
{
  sub_1BC9BCF80();
}

void sub_1BC9B9748()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_release();

  v1 = v0 + qword_1ED6D38A8;
  v2 = sub_1BCAB4E54();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);

}

id MostRecentTimePeriodQueryOperation.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

void sub_1BC9B9828(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  swift_release();

  v2 = a1 + qword_1ED6D38A8;
  v3 = sub_1BCAB4E54();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);

}

uint64_t sub_1BC9B98D8()
{
  return MostRecentTimePeriodQueryOperation.result.getter();
}

void sub_1BC9B98F8(void *a1, char a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  void *v14;
  void *v15;
  Swift::String v16;
  Swift::String v17;
  uint64_t v18;
  uint64_t v19;

  sub_1BC998AB0(0, &qword_1ED6C47F8, (uint64_t (*)(uint64_t))sub_1BC9BCE9C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v6);
  v8 = (uint64_t *)((char *)&v19 - v7);
  sub_1BC9BCE9C();
  v10 = v9;
  v11 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  v14 = (void *)MEMORY[0x1BCCFC004](a3 + 16);
  if (v14)
  {
    v15 = v14;
    if ((objc_msgSend(v14, sel_isCancelled) & 1) != 0)
    {
      v16._object = (void *)0x80000001BCACE790;
      v16._countAndFlagsBits = 0xD00000000000002DLL;
      v17._countAndFlagsBits = 0;
      v17._object = (void *)0xE000000000000000;
      NSOperation.logLifeCycleEvent(_:withPrivateInfo:)(v16, v17);
LABEL_5:

      return;
    }
    if ((objc_msgSend(v15, sel_isFinished) & 1) != 0)
      goto LABEL_5;
    sub_1BC9B9AD8(a1, a2 & 1, v8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v11 + 48))(v8, 1, v10) == 1)
    {

      sub_1BC9B3A38((uint64_t)v8, &qword_1ED6C47F8, (uint64_t (*)(uint64_t))sub_1BC9BCE9C);
    }
    else
    {
      v18 = sub_1BC9BD4FC((uint64_t)v8, (uint64_t)v13);
      MEMORY[0x1E0C80A78](v18);
      *(&v19 - 2) = (uint64_t)v15;
      *(&v19 - 1) = (uint64_t)v13;
      sub_1BCAB50AC();

      sub_1BC9BD548((uint64_t)v13);
    }
  }
}

uint64_t sub_1BC9B9AD8@<X0>(void *a1@<X0>, char a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  id v15;
  id v16;
  Swift::String v17;
  Swift::String v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  Swift::String v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  void (*v28)(char *, char *, uint64_t);
  uint64_t v29;
  char *v30;
  uint64_t v31;
  void *v32;
  id v33;
  uint64_t v34;
  uint64_t v36;
  Swift::String v37;

  v4 = v3;
  sub_1BC9BD584();
  v9 = v8;
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v36 - v13;
  if ((a2 & 1) != 0)
  {
    swift_getErrorValue();
    v16 = a1;
    v17._countAndFlagsBits = sub_1BCAB6810();
    v18._countAndFlagsBits = 0;
    v18._object = (void *)0xE000000000000000;
    NSOperation.logErrorString(_:withInfo:)(v17, v18);
    swift_bridgeObjectRelease();
    *a3 = a1;
    sub_1BC9BCE9C();
    v20 = v19;
  }
  else
  {
    if (a1)
    {
      v15 = sub_1BC9B9EB4(a1);
      v32 = *(void **)(v4 + qword_1ED6D3890);
      *(_QWORD *)(v4 + qword_1ED6D3890) = v15;
      v33 = v15;

      objc_msgSend(*(id *)(v4 + qword_1ED6C43C8), sel_addOperation_, v33);
      sub_1BC9B39B4(a1);
      sub_1BC9B39B4(a1);

      sub_1BC9BCE9C();
      return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(a3, 1, 1, v34);
    }
    v37._countAndFlagsBits = 0;
    v37._object = (void *)0xE000000000000000;
    sub_1BCAB64C8();
    swift_bridgeObjectRelease();
    v37._countAndFlagsBits = 0xD00000000000001DLL;
    v37._object = (void *)0x80000001BCACF2A0;
    v21 = objc_msgSend(*(id *)(v4 + qword_1ED6C43C0), sel_identifier);
    sub_1BCAB5F04();

    sub_1BCAB5F70();
    swift_bridgeObjectRelease();
    v22._countAndFlagsBits = 0x64656873696E6966;
    v22._object = (void *)0xE800000000000000;
    NSOperation.logLifeCycleEvent(_:withPrivateInfo:)(v22, v37);
    swift_bridgeObjectRelease();
    v23 = &v14[*(int *)(v9 + 48)];
    v24 = v4 + qword_1ED6D38A8;
    v25 = sub_1BCAB4E54();
    v26 = *(_QWORD *)(v25 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v26 + 16))(v23, v24, v25);
    v27 = &v11[*(int *)(v9 + 48)];
    v28 = *(void (**)(char *, char *, uint64_t))(v26 + 32);
    v28(v27, v23, v25);
    sub_1BC9BCF18();
    v30 = (char *)a3 + *(int *)(v29 + 48);
    *a3 = 0;
    v28(v30, v27, v25);
    sub_1BC9BCE9C();
    v20 = v31;
  }
  swift_storeEnumTagMultiPayload();
  return (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(a3, 0, 1, v20);
}

uint64_t sub_1BC9B9E40(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  sub_1BC9BCE9C();
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BC9BD174(a2, (uint64_t)v5);
  return sub_1BC9B9068((uint64_t)v5);
}

id sub_1BC9B9EB4(void *a1)
{
  void **v1;
  uint64_t v2;
  void **v3;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void *v11;
  id result;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  id v17;
  id v18;
  unint64_t v19;
  void *v20;
  void *v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  _QWORD *v33;
  void *v34;
  id v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  unint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;

  v3 = v1;
  v5 = *v3;
  v6 = *MEMORY[0x1E0DEEDD8];
  v7 = sub_1BCAB4BD8();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(void **)((char *)v3 + qword_1ED6C43D8);
  result = (id)sub_1BC9BA7BC(a1, (uint64_t)v10);
  if (!v2)
  {
    v38 = v6;
    v40 = (unint64_t)v5;
    v41 = a1;
    sub_1BC9A1210(0, (unint64_t *)&qword_1ED6C6710, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v42 = v13;
    v14 = swift_allocObject();
    v39 = xmmword_1BCABF370;
    *(_OWORD *)(v14 + 16) = xmmword_1BCABF370;
    v15 = (void *)objc_opt_self();
    v16 = (void *)sub_1BCAB4B78();
    v17 = objc_msgSend(v15, sel_predicateForSamplesWithinDateInterval_options_, v16, 0);

    *(_QWORD *)(v14 + 32) = v17;
    v43 = v14;
    sub_1BCAB6024();
    if (v11)
    {
      v18 = v11;
      MEMORY[0x1BCCFABF4]();
      if (*(_QWORD *)((v43 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v43 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        sub_1BCAB6030();
      sub_1BCAB6054();
      sub_1BCAB6024();
    }
    v19 = v38 & v40;
    sub_1BC9A649C(0, (unint64_t *)&qword_1ED6C2E60);
    v20 = (void *)sub_1BCAB600C();
    swift_bridgeObjectRelease();
    v40 = (unint64_t)objc_msgSend((id)objc_opt_self(), sel_andPredicateWithSubpredicates_, v20);

    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    v21 = *(void **)((char *)v3 + qword_1ED6C43C0);
    v22 = swift_allocObject();
    *(_OWORD *)(v22 + 16) = v39;
    sub_1BC9A649C(0, &qword_1ED6C6E78);
    swift_getKeyPath();
    *(_QWORD *)&v39 = v21;
    *(_QWORD *)(v22 + 32) = sub_1BCAB6210();
    v43 = v22;
    sub_1BCAB6024();
    v42 = v43;
    v23 = objc_msgSend(v3, sel_name);
    if (v23)
    {
      v25 = v23;
      v38 = sub_1BCAB5F04();
      v27 = v26;

    }
    else
    {
      v38 = 0;
      v27 = 0;
    }
    v29 = *(_QWORD *)(v19 + class metadata base offset for MostRecentTimePeriodQueryOperation);
    v28 = *(_QWORD *)(v19 + class metadata base offset for MostRecentTimePeriodQueryOperation + 8);
    type metadata accessor for SampleQueryOperation(0, v29, v28, v24);
    v30 = *(uint64_t *)((char *)v3 + qword_1ED6D38A0);
    v31 = *(void **)((char *)v3 + qword_1ED6D3898);
    v32 = swift_allocObject();
    swift_unknownObjectWeakInit();
    v33 = (_QWORD *)swift_allocObject();
    v33[2] = v29;
    v33[3] = v28;
    v33[4] = v32;
    v34 = v41;
    v33[5] = v41;
    v35 = v31;
    v36 = v34;
    return SampleQueryOperation.__allocating_init(sampleType:predicate:limit:sortDescriptors:name:queryQualityOfService:healthStore:resultHandler:)((void *)v39, (void *)v40, 0, v42, v38, v27, v30, v35, (uint64_t)sub_1BC9BD614, (uint64_t)v33);
  }
  return result;
}

uint64_t static MostRecentTimePeriodQuerySupport.predicateForAllSamples(onDayOf:additionalPredicate:)(void *a1, void *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t result;
  uint64_t v10;
  void *v11;
  void *v12;
  id v13;
  id v14;
  void *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;

  v5 = sub_1BCAB4BD8();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = sub_1BC9BA7BC(a1, (uint64_t)v8);
  if (!v2)
  {
    sub_1BC9A1210(0, (unint64_t *)&qword_1ED6C6710, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v10 = swift_allocObject();
    *(_OWORD *)(v10 + 16) = xmmword_1BCABF370;
    v11 = (void *)objc_opt_self();
    v12 = (void *)sub_1BCAB4B78();
    v13 = objc_msgSend(v11, sel_predicateForSamplesWithinDateInterval_options_, v12, 0);

    *(_QWORD *)(v10 + 32) = v13;
    v18 = v10;
    sub_1BCAB6024();
    if (a2)
    {
      v14 = a2;
      MEMORY[0x1BCCFABF4]();
      if (*(_QWORD *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        sub_1BCAB6030();
      sub_1BCAB6054();
      sub_1BCAB6024();
    }
    sub_1BC9A649C(0, (unint64_t *)&qword_1ED6C2E60);
    v15 = (void *)sub_1BCAB600C();
    swift_bridgeObjectRelease();
    v16 = objc_msgSend((id)objc_opt_self(), sel_andPredicateWithSubpredicates_, v15);

    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    return (uint64_t)v16;
  }
  return result;
}

void sub_1BC9BA46C(void *a1, char a2, uint64_t a3, void *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  double *v17;
  void *v18;
  void *v19;
  Swift::String v20;
  Swift::String v21;
  unint64_t v22;
  double v23;
  char *v24;
  char *v25;
  uint64_t v26;
  void (*v27)(char *, char *, uint64_t);
  uint64_t v28;
  char *v29;
  id v30;
  uint64_t v31;

  sub_1BC9BD584();
  v9 = v8;
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v31 - v13;
  sub_1BC9BCE9C();
  MEMORY[0x1E0C80A78](v15);
  v17 = (double *)((char *)&v31 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  swift_beginAccess();
  v18 = (void *)MEMORY[0x1BCCFC004](a3 + 16);
  if (v18)
  {
    v19 = v18;
    if ((objc_msgSend(v18, sel_isCancelled) & 1) != 0)
    {
      v20._object = (void *)0x80000001BCACE790;
      v20._countAndFlagsBits = 0xD00000000000002DLL;
      v21._countAndFlagsBits = 0;
      v21._object = (void *)0xE000000000000000;
      NSOperation.logLifeCycleEvent(_:withPrivateInfo:)(v20, v21);
LABEL_5:

      return;
    }
    if ((objc_msgSend(v19, sel_isFinished) & 1) != 0)
      goto LABEL_5;
    if ((a2 & 1) != 0)
    {
      *(_QWORD *)v17 = a1;
      swift_storeEnumTagMultiPayload();
      v30 = a1;
    }
    else
    {
      sub_1BC9A649C(0, &qword_1ED6C7538);
      v22 = sub_1BCAB6570();
      v23 = static MostRecentTimePeriodQuerySupport.totalDuration(for:referenceSample:)(v22, a4);
      swift_bridgeObjectRelease();
      v24 = &v14[*(int *)(v9 + 48)];
      static MostRecentTimePeriodQuerySupport.timestamp(sample:)(a4);
      v25 = &v11[*(int *)(v9 + 48)];
      v26 = sub_1BCAB4E54();
      v27 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v26 - 8) + 32);
      v27(v25, v24, v26);
      sub_1BC9BCF18();
      v29 = (char *)v17 + *(int *)(v28 + 48);
      *v17 = v23;
      v27(v29, v25, v26);
      v30 = (id)swift_storeEnumTagMultiPayload();
    }
    MEMORY[0x1E0C80A78](v30);
    *(&v31 - 2) = (uint64_t)v19;
    *(&v31 - 1) = (uint64_t)v17;
    sub_1BCAB50AC();

    sub_1BC9BD548((uint64_t)v17);
  }
}

uint64_t sub_1BC9BA6EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  id v7;
  uint64_t v8;
  void *v9;
  void *v10;
  Swift::String v11;
  Swift::String v12;
  uint64_t v14;

  sub_1BC9BCE9C();
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BC9BD174(a2, (uint64_t)v6);
  sub_1BC9B9068((uint64_t)v6);
  v7 = objc_msgSend(*(id *)(a1 + qword_1ED6C43C0), sel_identifier);
  v8 = sub_1BCAB5F04();
  v10 = v9;

  v11._countAndFlagsBits = 0x64656873696E6966;
  v11._object = (void *)0xE800000000000000;
  v12._countAndFlagsBits = v8;
  v12._object = v10;
  NSOperation.logLifeCycleEvent(_:withPrivateInfo:)(v11, v12);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1BC9BA7BC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  id v23;
  void (*v24)(char *, uint64_t);
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  char *v36;
  void (*v37)(char *, char *, uint64_t);
  char *v38;
  uint64_t (*v39)(char *, uint64_t);
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  void (*v50)(char *, uint64_t);
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;

  v43 = a2;
  v3 = sub_1BCAB4F68();
  v47 = *(_QWORD *)(v3 - 8);
  v48 = v3;
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BC998AB0(0, &qword_1ED6C7280, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v6);
  v46 = (char *)&v40 - v7;
  v8 = sub_1BCAB4F74();
  v9 = *(_QWORD *)(v8 - 8);
  v44 = v8;
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1BCAB4E54();
  v45 = *(_QWORD *)(v12 - 8);
  v13 = v45;
  MEMORY[0x1E0C80A78](v12);
  v42 = (char *)&v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v41 = (char *)&v40 - v16;
  MEMORY[0x1E0C80A78](v17);
  v19 = (char *)&v40 - v18;
  MEMORY[0x1E0C80A78](v20);
  v22 = (char *)&v40 - v21;
  sub_1BCAB4F50();
  v23 = objc_msgSend(a1, sel_endDate);
  sub_1BCAB4E24();

  sub_1BCAB4E9C();
  v50 = *(void (**)(char *, uint64_t))(v13 + 8);
  v50(v19, v12);
  v24 = *(void (**)(char *, uint64_t))(v9 + 8);
  v25 = v12;
  v26 = v22;
  v24(v11, v8);
  sub_1BCAB4F50();
  v27 = v47;
  v28 = v48;
  (*(void (**)(char *, _QWORD, uint64_t))(v47 + 104))(v5, *MEMORY[0x1E0CB1130], v48);
  v29 = (uint64_t)v46;
  v49 = v26;
  sub_1BCAB4F38();
  (*(void (**)(char *, uint64_t))(v27 + 8))(v5, v28);
  v24(v11, v44);
  v30 = v45;
  v31 = v25;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v45 + 48))(v29, 1, v25) == 1)
  {
    sub_1BC9B3A38(v29, &qword_1ED6C7280, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870]);
    v51 = 0;
    v52 = 0xE000000000000000;
    sub_1BCAB64C8();
    sub_1BCAB5F70();
    sub_1BCAB5F70();
    sub_1BCAB5F70();
    sub_1BCAB5F70();
    v53 = 209;
    sub_1BCAB6798();
    sub_1BCAB5F70();
    swift_bridgeObjectRelease();
    sub_1BCAB5F70();
    v32 = v51;
    v33 = v52;
    sub_1BC9A82C4();
    swift_allocError();
    *v34 = v32;
    v34[1] = v33;
    v34[2] = 0x2000000000000000;
    swift_willThrow();
    return ((uint64_t (*)(char *, uint64_t))v50)(v49, v25);
  }
  else
  {
    v36 = v41;
    (*(void (**)(char *, uint64_t, uint64_t))(v30 + 32))(v41, v29, v31);
    v37 = *(void (**)(char *, char *, uint64_t))(v30 + 16);
    v38 = v49;
    v37(v19, v49, v31);
    v37(v42, v36, v31);
    sub_1BCAB4BA8();
    v39 = (uint64_t (*)(char *, uint64_t))v50;
    v50(v36, v31);
    return v39(v38, v31);
  }
}

unint64_t sub_1BC9BABEC()
{
  unint64_t result;

  result = qword_1EF4782A8;
  if (!qword_1EF4782A8)
  {
    result = swift_getMetatypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1EF4782A8);
  }
  return result;
}

uint64_t sub_1BC9BAC24(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1BC9BAEA0(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1BC9BAC40(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1BC9BB01C(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1BC9BAC5C(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1BC9BB314(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1BC9BAC78(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1BC9BB18C(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1BC9BAC94(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1BC9BCA44(a1, a2, a3, (_QWORD *)*v3, &qword_1ED6C5B50, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870]);
  *v3 = result;
  return result;
}

uint64_t sub_1BC9BACC0(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1BC9BB484(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1BC9BACDC(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1BC9BB5F4(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1BC9BACF8(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1BC9BB788(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_1BC9BAD14(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1BC9BB954(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_1BC9BAD30(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1BC9BBB1C(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1BC9BAD4C(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1BC9BBCA0(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1BC9BAD68(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1BC9BBE10(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_1BC9BAD84(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1BC9BBFBC(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_1BC9BADA0(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1BC9BC154(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_1BC9BADBC(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1BC9BC2EC(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1BC9BADD8(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1BC9BC45C(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1BC9BADF4(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1BC9BC5CC(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1BC9BAE10(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1BC9BC74C(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1BC9BAE2C(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1BC9BC8CC(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1BC9BAE48(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1BC9BCA44(a1, a2, a3, (_QWORD *)*v3, &qword_1ED6C31A8, (uint64_t (*)(uint64_t))sub_1BC9BD26C);
  *v3 = result;
  return result;
}

uint64_t sub_1BC9BAE74(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1BC9BCA44(a1, a2, a3, (_QWORD *)*v3, &qword_1ED6C31A0, (uint64_t (*)(uint64_t))sub_1BC9BD1B8);
  *v3 = result;
  return result;
}

uint64_t sub_1BC9BAEA0(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_1BC9A1210(0, &qword_1ED6C61B8, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_1BCAB6624();
  __break(1u);
  return result;
}

uint64_t sub_1BC9BB01C(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_1BC9A1210(0, &qword_1ED6C5B58, MEMORY[0x1E0DEF040], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8])
      memmove(v13, v14, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    memcpy(v13, v14, 8 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_1BCAB6624();
  __break(1u);
  return result;
}

uint64_t sub_1BC9BB18C(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  size_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_1BC9A1210(0, (unint64_t *)&qword_1ED6C5B68, (uint64_t)&type metadata for DiagramAxisLabel, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  v14 = 40 * v8;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v14])
      memmove(v12, v13, v14);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v14] || v12 >= &v13[v14])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_1BCAB6624();
  __break(1u);
  return result;
}

uint64_t sub_1BC9BB314(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_1BC9A1210(0, &qword_1ED6C6940, MEMORY[0x1E0DEB418], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8])
      memmove(v13, v14, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    memcpy(v13, v14, 8 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_1BCAB6624();
  __break(1u);
  return result;
}

uint64_t sub_1BC9BB484(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_1BC9A1210(0, &qword_1ED6C5FA8, MEMORY[0x1E0DEB070], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8])
      memmove(v13, v14, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[8 * v8] || v13 >= &v14[8 * v8])
  {
    memcpy(v13, v14, 8 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_1BCAB6624();
  __break(1u);
  return result;
}

uint64_t sub_1BC9BB5F4(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_1BC9A1210(0, &qword_1EF4782E8, (uint64_t)&type metadata for TimeBasedDistribution.Bucket, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[40 * v8])
      memmove(v12, v13, 40 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[40 * v8] || v12 >= &v13[40 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_1BCAB6624();
  __break(1u);
  return result;
}

uint64_t sub_1BC9BB788(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    sub_1BC9BD290(0, &qword_1EF478308, (uint64_t)&qword_1EF478310, (uint64_t)&type metadata for TimeBasedDistribution.Bucket, (void (*)(uint64_t, uint64_t, uint64_t))sub_1BC9BD454);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 48);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  v12 = (unint64_t)(v10 + 4);
  v13 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= v13 + 48 * v8)
      memmove(v10 + 4, a4 + 4, 48 * v8);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 48 * v8 || v12 >= v13 + 48 * v8)
  {
    sub_1BC9BD454(0, &qword_1EF478310);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_1BCAB6624();
  __break(1u);
  return result;
}

uint64_t sub_1BC9BB954(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    sub_1BC9BD290(0, &qword_1EF4782C8, (uint64_t)&qword_1EF4782D0, (uint64_t)&protocol descriptor for TimeBasedDistributionChartPointProxy, (void (*)(uint64_t, uint64_t, uint64_t))sub_1BC9A7F58);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  v12 = (unint64_t)(v10 + 4);
  v13 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= v13 + 40 * v8)
      memmove(v10 + 4, a4 + 4, 40 * v8);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 40 * v8 || v12 >= v13 + 40 * v8)
  {
    sub_1BC9A7F58(0, &qword_1EF4782D0);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_1BCAB6624();
  __break(1u);
  return result;
}

uint64_t sub_1BC9BBB1C(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_1BC9A1210(0, &qword_1EF4782F0, MEMORY[0x1E0DEE9B8] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 1;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8])
      memmove(v13, v14, 32 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[32 * v8] || v13 >= &v14[32 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_1BCAB6624();
  __break(1u);
  return result;
}

uint64_t sub_1BC9BBCA0(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_1BC998AB0(0, &qword_1EF4782F8, (uint64_t (*)(uint64_t))sub_1BC9BD3F8, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    memcpy(v13, v14, 16 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_1BCAB6624();
  __break(1u);
  return result;
}

uint64_t sub_1BC9BBE10(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;
  _QWORD *v13;
  size_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    sub_1BC998AB0(0, &qword_1ED6C5B60, (uint64_t (*)(uint64_t))sub_1BC9A0FB8, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 56);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 4;
  v13 = a4 + 4;
  v14 = 7 * v8;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v14])
      memmove(v10 + 4, a4 + 4, v14 * 8);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v14] || v12 >= &v13[v14])
  {
    sub_1BC9A0FB8();
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_1BCAB6624();
  __break(1u);
  return result;
}

uint64_t sub_1BC9BBFBC(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    sub_1BC998AB0(0, &qword_1ED6C47C8, (uint64_t (*)(uint64_t))sub_1BC9BD0E8, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  v13 = (unint64_t)(v10 + 4);
  v14 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= v14 + 16 * v8)
      memmove(v10 + 4, a4 + 4, 16 * v8);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 16 * v8 || v13 >= v14 + 16 * v8)
  {
    sub_1BC9BD0E8();
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_1BCAB6624();
  __break(1u);
  return result;
}

uint64_t sub_1BC9BC154(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    sub_1BC998AB0(0, &qword_1ED6C6F58, (uint64_t (*)(uint64_t))sub_1BC9BD354, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 25;
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 3);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  v13 = (unint64_t)(v10 + 4);
  v14 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= v14 + 8 * v8)
      memmove(v10 + 4, a4 + 4, 8 * v8);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 8 * v8 || v13 >= v14 + 8 * v8)
  {
    sub_1BC9BD354();
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_1BCAB6624();
  __break(1u);
  return result;
}

uint64_t sub_1BC9BC2EC(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_1BC998AB0(0, &qword_1ED6C71D8, (uint64_t (*)(uint64_t))type metadata accessor for CGPoint, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    memcpy(v13, v14, 16 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_1BCAB6624();
  __break(1u);
  return result;
}

uint64_t sub_1BC9BC45C(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_1BC998AB0(0, &qword_1ED6C5B78, (uint64_t (*)(uint64_t))type metadata accessor for CGRect, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 1;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8])
      memmove(v13, v14, 32 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[32 * v8] || v13 >= &v14[32 * v8])
  {
    memcpy(v13, v14, 32 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_1BCAB6624();
  __break(1u);
  return result;
}

uint64_t sub_1BC9BC5CC(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  size_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_1BC9A1210(0, &qword_1ED6C4E60, (uint64_t)&type metadata for LevelView.DataConfiguration.Bucket, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  v14 = 24 * v8;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v14])
      memmove(v12, v13, v14);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v14] || v12 >= &v13[v14])
  {
    memcpy(v12, v13, v14);
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_1BCAB6624();
  __break(1u);
  return result;
}

uint64_t sub_1BC9BC74C(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  size_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_1BC998AB0(0, &qword_1EF4782D8, (uint64_t (*)(uint64_t))sub_1BC9BD2E4, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 48);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  v14 = 48 * v8;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v14])
      memmove(v12, v13, v14);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v14] || v12 >= &v13[v14])
  {
    memcpy(v12, v13, v14);
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_1BCAB6624();
  __break(1u);
  return result;
}

uint64_t sub_1BC9BC8CC(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    sub_1BC9BD290(0, &qword_1ED6C47C0, (uint64_t)&unk_1ED6C4620, MEMORY[0x1E0DEB070], (void (*)(uint64_t, uint64_t, uint64_t))sub_1BC9BD454);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    memcpy(v13, v14, 16 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_1BCAB6624();
  __break(1u);
  return result;
}

uint64_t sub_1BC9BCA44(char a1, int64_t a2, char a3, _QWORD *a4, unint64_t *a5, uint64_t (*a6)(uint64_t))
{
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  size_t v17;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (!v12)
  {
    v16 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    goto LABEL_19;
  }
  sub_1BC998AB0(0, a5, a6, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  v13 = *(_QWORD *)(a6(0) - 8);
  v14 = *(_QWORD *)(v13 + 72);
  v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v16 = (_QWORD *)swift_allocObject();
  v17 = _swift_stdlib_malloc_size(v16);
  if (!v14)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v17 - v15 == 0x8000000000000000 && v14 == -1)
    goto LABEL_34;
  v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  v19 = *(_QWORD *)(a6(0) - 8);
  v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  v21 = (char *)v16 + v20;
  v22 = (char *)a4 + v20;
  if ((a1 & 1) != 0)
  {
    if (v16 < a4 || v21 >= &v22[*(_QWORD *)(v19 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  v23 = *(_QWORD *)(v19 + 72) * v11;
  v24 = &v21[v23];
  v25 = (unint64_t)&v22[v23];
  if (v22 >= v24 || (unint64_t)v21 >= v25)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v16;
  }
LABEL_36:
  result = sub_1BCAB6624();
  __break(1u);
  return result;
}

id sub_1BC9BCC34(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  char *v7;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  char *v19;
  uint64_t v20;
  id v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  void *v30;
  _QWORD v32[2];
  uint64_t v33;
  objc_class *ObjectType;
  objc_super v35;

  v32[1] = a4;
  v33 = a6;
  ObjectType = (objc_class *)swift_getObjectType();
  sub_1BC9BCE9C();
  MEMORY[0x1E0C80A78](v13);
  v15 = (_QWORD *)((char *)v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v16 = qword_1ED6C43D0;
  sub_1BC9A7EA4();
  v17 = swift_allocError();
  *v18 = 0;
  *v15 = v17;
  swift_storeEnumTagMultiPayload();
  sub_1BC998AB0(0, &qword_1ED6C3688, (uint64_t (*)(uint64_t))sub_1BC9BCE9C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0D2E5C8]);
  swift_allocObject();
  v19 = v7;
  *(_QWORD *)&v7[v16] = sub_1BCAB50A0();
  v20 = qword_1ED6C43C8;
  v21 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB3828]), sel_init);
  objc_msgSend(v21, sel_setMaxConcurrentOperationCount_, 1);
  *(_QWORD *)&v19[v20] = v21;
  *(_QWORD *)&v19[qword_1ED6C43B8] = 0;
  *(_QWORD *)&v19[qword_1ED6D3890] = 0;
  *(_QWORD *)&v19[qword_1ED6C43C0] = a1;
  v22 = &v19[qword_1ED6D38A8];
  v23 = sub_1BCAB4E54();
  v24 = *(_QWORD *)(v23 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v24 + 16))(v22, a2, v23);
  *(_QWORD *)&v19[qword_1ED6C43D8] = a3;
  *(_QWORD *)&v19[qword_1ED6D38A0] = v33;
  *(_QWORD *)&v19[qword_1ED6D3898] = a7;
  v25 = a3;
  v26 = a1;
  v27 = a7;

  v35.receiver = v19;
  v35.super_class = ObjectType;
  v28 = objc_msgSendSuper2(&v35, sel_init);
  v29 = v28;
  if (a5)
  {
    v30 = (void *)sub_1BCAB5EE0();
    swift_bridgeObjectRelease();
  }
  else
  {
    v30 = 0;
  }
  objc_msgSend(v28, sel_setName_, v30);

  (*(void (**)(uint64_t, uint64_t))(v24 + 8))(a2, v23);
  return v28;
}

void sub_1BC9BCE9C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED6C47F0)
  {
    sub_1BC9BCF18();
    sub_1BC9A7F58(255, (unint64_t *)&qword_1ED6C6F70);
    v0 = sub_1BCAB68A0();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED6C47F0);
  }
}

void sub_1BC9BCF18()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_1ED6C45F8)
  {
    sub_1BCAB4E54();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1ED6C45F8);
  }
}

void sub_1BC9BCF80()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t sub_1BC9BCFAC()
{
  return MostRecentTimePeriodQueryOperation.result.getter();
}

uint64_t sub_1BC9BCFD0()
{
  return 16;
}

__n128 sub_1BC9BCFDC(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1BC9BCFE8()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1BCAB4E54();
  if (v1 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t type metadata accessor for MostRecentTimePeriodQueryOperation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for MostRecentTimePeriodQueryOperation);
}

uint64_t method lookup function for MostRecentTimePeriodQueryOperation()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of MostRecentTimePeriodQueryOperation.__allocating_init(sampleType:endDate:predicate:name:queryQualityOfService:healthStore:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(class metadata base offset for MostRecentTimePeriodQueryOperation + v0 + 88))();
}

ValueMetadata *type metadata accessor for MostRecentTimePeriodQuerySupport()
{
  return &type metadata for MostRecentTimePeriodQuerySupport;
}

void sub_1BC9BD0E8()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_1ED6C4630)
  {
    sub_1BC9A649C(255, (unint64_t *)&qword_1ED6C71C8);
    sub_1BC9A649C(255, &qword_1ED6C6E88);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1ED6C4630);
  }
}

uint64_t sub_1BC9BD174(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1BC9BCE9C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_1BC9BD1B8(uint64_t a1)
{
  sub_1BC9BD1DC(a1, &qword_1ED6C3628, (uint64_t)&qword_1ED6C3170, (uint64_t)type metadata accessor for SignificantChangeEngine.Changepoint, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t (*)(void)))sub_1BC998AB0);
}

void sub_1BC9BD1DC(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t, uint64_t, uint64_t (*)(void)))
{
  unint64_t TupleTypeMetadata2;
  uint64_t v10;

  if (!*a2)
  {
    sub_1BCAB4BD8();
    a5(255, a3, a4, MEMORY[0x1E0DEB940]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v10)
      atomic_store(TupleTypeMetadata2, a2);
  }
}

void sub_1BC9BD26C(uint64_t a1)
{
  sub_1BC9BD1DC(a1, &qword_1ED6C3638, (uint64_t)&unk_1ED6C4600, MEMORY[0x1E0DEB070], (void (*)(uint64_t, uint64_t, uint64_t, uint64_t (*)(void)))sub_1BC9A1210);
}

void sub_1BC9BD290(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t, uint64_t))
{
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    a5(255, a3, a4);
    v6 = sub_1BCAB67A4();
    if (!v7)
      atomic_store(v6, a2);
  }
}

void sub_1BC9BD2E4()
{
  unint64_t TupleTypeMetadata3;
  uint64_t v1;

  if (!qword_1EF4782E0)
  {
    type metadata accessor for CGRect(255);
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1)
      atomic_store(TupleTypeMetadata3, (unint64_t *)&qword_1EF4782E0);
  }
}

void sub_1BC9BD354()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED6C7498)
  {
    sub_1BC9BD3B4();
    v0 = sub_1BCAB5E80();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED6C7498);
  }
}

unint64_t sub_1BC9BD3B4()
{
  unint64_t result;

  result = qword_1ED6C72B0;
  if (!qword_1ED6C72B0)
  {
    result = MEMORY[0x1BCCFBE84](&protocol conformance descriptor for DiagramDataKey, &type metadata for DiagramDataKey);
    atomic_store(result, (unint64_t *)&qword_1ED6C72B0);
  }
  return result;
}

void sub_1BC9BD3F8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EF478300)
  {
    v0 = sub_1BCAB6114();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EF478300);
  }
}

void sub_1BC9BD454(uint64_t a1, unint64_t *a2)
{
  unint64_t TupleTypeMetadata2;
  uint64_t v4;

  if (!*a2)
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v4)
      atomic_store(TupleTypeMetadata2, a2);
  }
}

uint64_t sub_1BC9BD4A4()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1BC9BD4C8()
{
  swift_release();
  return swift_deallocObject();
}

void sub_1BC9BD4EC(void *a1, char a2)
{
  uint64_t v2;

  sub_1BC9B98F8(a1, a2 & 1, *(_QWORD *)(v2 + 32));
}

uint64_t sub_1BC9BD4FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1BC9BCE9C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1BC9BD540()
{
  uint64_t v0;

  return sub_1BC9B9E40(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1BC9BD548(uint64_t a1)
{
  uint64_t v2;

  sub_1BC9BCE9C();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_1BC9BD584()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_1ED6C4610)
  {
    sub_1BCAB4E54();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1ED6C4610);
  }
}

uint64_t sub_1BC9BD5E8()
{
  uint64_t v0;

  swift_release();

  return swift_deallocObject();
}

void sub_1BC9BD614(void *a1, char a2)
{
  uint64_t v2;

  sub_1BC9BA46C(a1, a2 & 1, *(_QWORD *)(v2 + 32), *(void **)(v2 + 40));
}

uint64_t sub_1BC9BD624()
{
  uint64_t v0;

  return sub_1BC9BA6EC(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1BC9BD62C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 16);
  sub_1BC9BD548(a1);
  return sub_1BC9BD174(v3, a1);
}

uint64_t sub_1BC9BD658@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  swift_getKeyPath();
  swift_getKeyPath();
  sub_1BCAB588C();
  swift_release();
  result = swift_release();
  *a1 = v3;
  a1[1] = v4;
  return result;
}

uint64_t sub_1BC9BD6D4()
{
  swift_getKeyPath();
  swift_getKeyPath();
  swift_bridgeObjectRetain();
  swift_retain();
  return sub_1BCAB5898();
}

uint64_t sub_1BC9BD754()
{
  uint64_t v1;

  swift_getKeyPath();
  swift_getKeyPath();
  sub_1BCAB588C();
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_1BC9BD7CC()
{
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  return sub_1BCAB5898();
}

uint64_t (*sub_1BC9BD844(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x38uLL);
  *a1 = v2;
  v2[4] = swift_getKeyPath();
  v2[5] = swift_getKeyPath();
  v2[6] = sub_1BCAB5880();
  return sub_1BC9BD8BC;
}

uint64_t sub_1BC9BD8C0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  char *v11;
  void (*v12)(char *, uint64_t, uint64_t, __n128);
  uint64_t v14;

  v2 = MEMORY[0x1E0DEA968];
  sub_1BC9A1210(0, &qword_1EF478318, MEMORY[0x1E0DEA968], MEMORY[0x1E0C96180]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v14 - v10;
  v12 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v5 + 16);
  v12((char *)&v14 - v10, a1, v4, v9);
  ((void (*)(char *, char *, uint64_t))v12)(v7, v11, v4);
  swift_beginAccess();
  sub_1BC9A1210(0, &qword_1ED6C3530, v2, MEMORY[0x1E0C96198]);
  sub_1BCAB5874();
  swift_endAccess();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v11, v4);
}

uint64_t sub_1BC9BD9FC()
{
  return sub_1BC9BE11C((uint64_t)&OBJC_IVAR____TtC19HealthVisualization25SummaryTrendTileViewModel__textString, (uint64_t)&qword_1ED6C3530, MEMORY[0x1E0DEA968], (void (*)(_QWORD, uint64_t, uint64_t, _QWORD))sub_1BC9A1210);
}

uint64_t sub_1BC9BDA20(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  uint64_t v9;

  v2 = MEMORY[0x1E0DEA968];
  sub_1BC9A1210(0, &qword_1EF478318, MEMORY[0x1E0DEA968], MEMORY[0x1E0C96180]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  v6 = MEMORY[0x1E0C80A78](v3);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v5 + 16))((char *)&v9 - v7, a1, v4, v6);
  swift_beginAccess();
  sub_1BC9A1210(0, &qword_1ED6C3530, v2, MEMORY[0x1E0C96198]);
  sub_1BCAB5874();
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
}

uint64_t (*sub_1BC9BDB18(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;

  v3 = malloc(0x88uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = MEMORY[0x1E0DEA968];
  sub_1BC9A1210(0, &qword_1EF478318, MEMORY[0x1E0DEA968], MEMORY[0x1E0C96180]);
  v3[10] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v3[11] = v6;
  v7 = *(_QWORD *)(v6 + 64);
  v3[12] = malloc(v7);
  v3[13] = malloc(v7);
  v8 = malloc(v7);
  v9 = OBJC_IVAR____TtC19HealthVisualization25SummaryTrendTileViewModel__textString;
  v3[14] = v8;
  v3[15] = v9;
  swift_beginAccess();
  sub_1BC9A1210(0, &qword_1ED6C3530, v4, MEMORY[0x1E0C96198]);
  v3[16] = v10;
  sub_1BCAB5868();
  swift_endAccess();
  return sub_1BC9BDC08;
}

uint64_t sub_1BC9BDC0C()
{
  swift_getKeyPath();
  swift_getKeyPath();
  sub_1BCAB588C();
  swift_release();
  return swift_release();
}

uint64_t sub_1BC9BDC74(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;

  sub_1BC9BDE9C(0);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v9 - v6;
  sub_1BC9964B8(a1, (uint64_t)&v9 - v6, (uint64_t (*)(_QWORD))sub_1BC9BDE9C);
  swift_getKeyPath();
  swift_getKeyPath();
  sub_1BC9964B8((uint64_t)v7, (uint64_t)v4, (uint64_t (*)(_QWORD))sub_1BC9BDE9C);
  swift_retain();
  sub_1BCAB5898();
  return sub_1BC997208((uint64_t)v7, (uint64_t (*)(_QWORD))sub_1BC9BDE9C);
}

uint64_t sub_1BC9BDD6C()
{
  swift_getKeyPath();
  swift_getKeyPath();
  sub_1BCAB588C();
  swift_release();
  return swift_release();
}

uint64_t sub_1BC9BDDD8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v6;

  sub_1BC9BDE9C(0);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getKeyPath();
  swift_getKeyPath();
  sub_1BC9964B8(a1, (uint64_t)v4, (uint64_t (*)(_QWORD))sub_1BC9BDE9C);
  swift_retain();
  sub_1BCAB5898();
  return sub_1BC997208(a1, (uint64_t (*)(_QWORD))sub_1BC9BDE9C);
}

void sub_1BC9BDE9C(uint64_t a1)
{
  sub_1BC998AB0(a1, &qword_1EF478328, type metadata accessor for CoreChartTrendViewModel, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
}

uint64_t (*sub_1BC9BDEB8(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x38uLL);
  *a1 = v2;
  v2[4] = swift_getKeyPath();
  v2[5] = swift_getKeyPath();
  v2[6] = sub_1BCAB5880();
  return sub_1BC9BD8BC;
}

uint64_t sub_1BC9BDF30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(_QWORD, uint64_t, uint64_t, _QWORD))
{
  swift_beginAccess();
  a7(0, a5, a6, MEMORY[0x1E0C96198]);
  sub_1BCAB5868();
  return swift_endAccess();
}

uint64_t sub_1BC9BDFBC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  char *v10;
  void (*v11)(char *, uint64_t, uint64_t, __n128);
  uint64_t v13;

  sub_1BC998AB0(0, &qword_1EF478338, (uint64_t (*)(uint64_t))sub_1BC9BDE9C, MEMORY[0x1E0C96180]);
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v13 - v9;
  v11 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v4 + 16);
  v11((char *)&v13 - v9, a1, v3, v8);
  ((void (*)(char *, char *, uint64_t))v11)(v6, v10, v3);
  swift_beginAccess();
  sub_1BC998AB0(0, &qword_1EF478330, (uint64_t (*)(uint64_t))sub_1BC9BDE9C, MEMORY[0x1E0C96198]);
  sub_1BCAB5874();
  swift_endAccess();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v10, v3);
}

uint64_t sub_1BC9BE0F8()
{
  return sub_1BC9BE11C((uint64_t)&OBJC_IVAR____TtC19HealthVisualization25SummaryTrendTileViewModel__trendModel, (uint64_t)&qword_1EF478330, (uint64_t)sub_1BC9BDE9C, (void (*)(_QWORD, uint64_t, uint64_t, _QWORD))sub_1BC998AB0);
}

uint64_t sub_1BC9BE11C(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD, uint64_t, uint64_t, _QWORD))
{
  swift_beginAccess();
  a4(0, a2, a3, MEMORY[0x1E0C96198]);
  sub_1BCAB5868();
  return swift_endAccess();
}

uint64_t sub_1BC9BE1A0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  uint64_t v8;

  sub_1BC998AB0(0, &qword_1EF478338, (uint64_t (*)(uint64_t))sub_1BC9BDE9C, MEMORY[0x1E0C96180]);
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  v5 = MEMORY[0x1E0C80A78](v2);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v4 + 16))((char *)&v8 - v6, a1, v3, v5);
  swift_beginAccess();
  sub_1BC998AB0(0, &qword_1EF478330, (uint64_t (*)(uint64_t))sub_1BC9BDE9C, MEMORY[0x1E0C96198]);
  sub_1BCAB5874();
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
}

uint64_t (*sub_1BC9BE298(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = malloc(0x88uLL);
  *a1 = v3;
  v3[9] = v1;
  sub_1BC998AB0(0, &qword_1EF478338, (uint64_t (*)(uint64_t))sub_1BC9BDE9C, MEMORY[0x1E0C96180]);
  v3[10] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[11] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[12] = malloc(v6);
  v3[13] = malloc(v6);
  v7 = malloc(v6);
  v8 = OBJC_IVAR____TtC19HealthVisualization25SummaryTrendTileViewModel__trendModel;
  v3[14] = v7;
  v3[15] = v8;
  swift_beginAccess();
  sub_1BC998AB0(0, &qword_1EF478330, (uint64_t (*)(uint64_t))sub_1BC9BDE9C, MEMORY[0x1E0C96198]);
  v3[16] = v9;
  sub_1BCAB5868();
  swift_endAccess();
  return sub_1BC9BDC08;
}

double sub_1BC9BE388@<D0>(_OWORD *a1@<X8>)
{
  double result;
  __int128 v3;

  swift_getKeyPath();
  swift_getKeyPath();
  sub_1BCAB588C();
  swift_release();
  swift_release();
  result = *(double *)&v3;
  *a1 = v3;
  return result;
}

uint64_t sub_1BC9BE404()
{
  swift_getKeyPath();
  swift_getKeyPath();
  swift_bridgeObjectRetain();
  swift_retain();
  return sub_1BCAB5898();
}

uint64_t sub_1BC9BE484()
{
  uint64_t v1;

  swift_getKeyPath();
  swift_getKeyPath();
  sub_1BCAB588C();
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_1BC9BE4FC()
{
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  return sub_1BCAB5898();
}

uint64_t (*sub_1BC9BE574(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x38uLL);
  *a1 = v2;
  v2[4] = swift_getKeyPath();
  v2[5] = swift_getKeyPath();
  v2[6] = sub_1BCAB5880();
  return sub_1BC9BD8BC;
}

void sub_1BC9BE5EC(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD, _QWORD))(*a1 + 48))(*a1, 0);
  swift_release();
  swift_release();
  free(v1);
}

uint64_t sub_1BC9BE638()
{
  swift_beginAccess();
  sub_1BC9BE888(0, &qword_1EF478348, (unint64_t *)&qword_1ED6C2C80, MEMORY[0x1E0DEA968], MEMORY[0x1E0C96198]);
  sub_1BCAB5868();
  return swift_endAccess();
}

uint64_t sub_1BC9BE6B8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  char *v11;
  void (*v12)(char *, uint64_t, uint64_t, __n128);
  uint64_t v14;

  v2 = MEMORY[0x1E0DEA968];
  sub_1BC9BE888(0, &qword_1EF478350, (unint64_t *)&qword_1ED6C2C80, MEMORY[0x1E0DEA968], MEMORY[0x1E0C96180]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v14 - v10;
  v12 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v5 + 16);
  v12((char *)&v14 - v10, a1, v4, v9);
  ((void (*)(char *, char *, uint64_t))v12)(v7, v11, v4);
  swift_beginAccess();
  sub_1BC9BE888(0, &qword_1EF478348, (unint64_t *)&qword_1ED6C2C80, v2, MEMORY[0x1E0C96198]);
  sub_1BCAB5874();
  swift_endAccess();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v11, v4);
}

uint64_t sub_1BC9BE80C()
{
  swift_beginAccess();
  sub_1BC9BE888(0, &qword_1EF478348, (unint64_t *)&qword_1ED6C2C80, MEMORY[0x1E0DEA968], MEMORY[0x1E0C96198]);
  sub_1BCAB5868();
  return swift_endAccess();
}

void sub_1BC9BE888(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    sub_1BC9A1210(255, a3, a4, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    v9 = a5(a1, v8);
    if (!v10)
      atomic_store(v9, a2);
  }
}

uint64_t sub_1BC9BE8F4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  uint64_t v9;

  v2 = MEMORY[0x1E0DEA968];
  sub_1BC9BE888(0, &qword_1EF478350, (unint64_t *)&qword_1ED6C2C80, MEMORY[0x1E0DEA968], MEMORY[0x1E0C96180]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  v6 = MEMORY[0x1E0C80A78](v3);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v5 + 16))((char *)&v9 - v7, a1, v4, v6);
  swift_beginAccess();
  sub_1BC9BE888(0, &qword_1EF478348, (unint64_t *)&qword_1ED6C2C80, v2, MEMORY[0x1E0C96198]);
  sub_1BCAB5874();
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
}

uint64_t (*sub_1BC9BEA04(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;

  v3 = malloc(0x88uLL);
  *a1 = v3;
  v3[9] = v1;
  v4 = MEMORY[0x1E0DEA968];
  sub_1BC9BE888(0, &qword_1EF478350, (unint64_t *)&qword_1ED6C2C80, MEMORY[0x1E0DEA968], MEMORY[0x1E0C96180]);
  v3[10] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v3[11] = v6;
  v7 = *(_QWORD *)(v6 + 64);
  v3[12] = malloc(v7);
  v3[13] = malloc(v7);
  v8 = malloc(v7);
  v9 = OBJC_IVAR____TtC19HealthVisualization25SummaryTrendTileViewModel__pregnancyText;
  v3[14] = v8;
  v3[15] = v9;
  swift_beginAccess();
  sub_1BC9BE888(0, &qword_1EF478348, (unint64_t *)&qword_1ED6C2C80, v4, MEMORY[0x1E0C96198]);
  v3[16] = v10;
  sub_1BCAB5868();
  swift_endAccess();
  return sub_1BC9BDC08;
}

void sub_1BC9BEB0C(uint64_t a1, char a2)
{
  _QWORD *v3;
  void (*v4)(_QWORD, _QWORD, _QWORD);
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void *, uint64_t);

  v3 = *(_QWORD **)a1;
  v4 = *(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(*(_QWORD *)a1 + 88) + 16);
  v4(*(_QWORD *)(*(_QWORD *)a1 + 104), v3[14], v3[10]);
  v5 = (void *)v3[13];
  v6 = (void *)v3[14];
  v8 = v3[11];
  v7 = (void *)v3[12];
  v9 = v3[10];
  if ((a2 & 1) != 0)
  {
    v4(v3[12], v3[13], v3[10]);
    swift_beginAccess();
    sub_1BCAB5874();
    swift_endAccess();
    v10 = *(void (**)(void *, uint64_t))(v8 + 8);
    v10(v5, v9);
  }
  else
  {
    swift_beginAccess();
    sub_1BCAB5874();
    swift_endAccess();
    v10 = *(void (**)(void *, uint64_t))(v8 + 8);
  }
  v10(v6, v9);
  free(v6);
  free(v5);
  free(v7);
  free(v3);
}

uint64_t SummaryTrendTileViewModel.__allocating_init(text:trendModel:pregnancyText:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;

  v10 = swift_allocObject();
  SummaryTrendTileViewModel.init(text:trendModel:pregnancyText:)(a1, a2, a3, a4, a5);
  return v10;
}

uint64_t SummaryTrendTileViewModel.init(text:trendModel:pregnancyText:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v31 = a4;
  v32 = a5;
  v29 = a2;
  v30 = a3;
  v28 = a1;
  v6 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0C96198];
  sub_1BC9BE888(0, &qword_1EF478348, (unint64_t *)&qword_1ED6C2C80, MEMORY[0x1E0DEA968], MEMORY[0x1E0C96198]);
  v26 = *(_QWORD *)(v7 - 8);
  v27 = v7;
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v26 - v8;
  sub_1BC998AB0(0, &qword_1EF478330, (uint64_t (*)(uint64_t))sub_1BC9BDE9C, v6);
  v11 = v10;
  v12 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v26 - v13;
  sub_1BC9BDE9C(0);
  MEMORY[0x1E0C80A78](v15);
  v17 = (char *)&v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18);
  v20 = (char *)&v26 - v19;
  v21 = v5 + OBJC_IVAR____TtC19HealthVisualization25SummaryTrendTileViewModel__trendModel;
  v22 = type metadata accessor for CoreChartTrendViewModel(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v20, 1, 1, v22);
  sub_1BC9964B8((uint64_t)v20, (uint64_t)v17, (uint64_t (*)(_QWORD))sub_1BC9BDE9C);
  sub_1BCAB585C();
  sub_1BC997208((uint64_t)v20, (uint64_t (*)(_QWORD))sub_1BC9BDE9C);
  (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(v21, v14, v11);
  v23 = v5 + OBJC_IVAR____TtC19HealthVisualization25SummaryTrendTileViewModel__pregnancyText;
  sub_1BC9A1210(0, (unint64_t *)&qword_1ED6C2C80, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  v35 = 0;
  v36 = 0;
  sub_1BCAB585C();
  (*(void (**)(uint64_t, char *, uint64_t))(v26 + 32))(v23, v9, v27);
  swift_beginAccess();
  v33 = v28;
  v34 = v29;
  sub_1BCAB585C();
  swift_endAccess();
  v24 = v30;
  sub_1BC9964B8(v30, (uint64_t)v20, (uint64_t (*)(_QWORD))sub_1BC9BDE9C);
  swift_getKeyPath();
  swift_getKeyPath();
  sub_1BC9964B8((uint64_t)v20, (uint64_t)v17, (uint64_t (*)(_QWORD))sub_1BC9BDE9C);
  swift_retain();
  sub_1BCAB5898();
  sub_1BC997208((uint64_t)v20, (uint64_t (*)(_QWORD))sub_1BC9BDE9C);
  swift_getKeyPath();
  swift_getKeyPath();
  v35 = v31;
  v36 = v32;
  swift_retain();
  sub_1BCAB5898();
  sub_1BC997208(v24, (uint64_t (*)(_QWORD))sub_1BC9BDE9C);
  return v5;
}

uint64_t SummaryTrendTileViewModel.__allocating_init()()
{
  uint64_t v0;

  v0 = swift_allocObject();
  SummaryTrendTileViewModel.init()();
  return v0;
}

uint64_t SummaryTrendTileViewModel.init()()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  void (*v20)(char *, uint64_t, uint64_t, uint64_t);
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  __int128 v26;

  v1 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0C96198];
  sub_1BC9BE888(0, &qword_1EF478348, (unint64_t *)&qword_1ED6C2C80, MEMORY[0x1E0DEA968], MEMORY[0x1E0C96198]);
  v22 = *(_QWORD *)(v2 - 8);
  v23 = v2;
  MEMORY[0x1E0C80A78](v2);
  v21 = (char *)&v20 - v3;
  sub_1BC998AB0(0, &qword_1EF478330, (uint64_t (*)(uint64_t))sub_1BC9BDE9C, v1);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v20 - v7;
  sub_1BC9BDE9C(0);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v20 - v13;
  v15 = v0 + OBJC_IVAR____TtC19HealthVisualization25SummaryTrendTileViewModel__trendModel;
  v16 = type metadata accessor for CoreChartTrendViewModel(0);
  v20 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56);
  v20(v14, 1, 1, v16);
  sub_1BC9964B8((uint64_t)v14, (uint64_t)v11, (uint64_t (*)(_QWORD))sub_1BC9BDE9C);
  sub_1BCAB585C();
  sub_1BC997208((uint64_t)v14, (uint64_t (*)(_QWORD))sub_1BC9BDE9C);
  (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(v15, v8, v5);
  v17 = v0 + OBJC_IVAR____TtC19HealthVisualization25SummaryTrendTileViewModel__pregnancyText;
  sub_1BC9A1210(0, (unint64_t *)&qword_1ED6C2C80, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  v26 = 0uLL;
  v18 = v21;
  sub_1BCAB585C();
  (*(void (**)(uint64_t, char *, uint64_t))(v22 + 32))(v17, v18, v23);
  swift_beginAccess();
  v24 = 0;
  v25 = 0xE000000000000000;
  sub_1BCAB585C();
  swift_endAccess();
  v20(v14, 1, 1, v16);
  swift_getKeyPath();
  swift_getKeyPath();
  sub_1BC9964B8((uint64_t)v14, (uint64_t)v11, (uint64_t (*)(_QWORD))sub_1BC9BDE9C);
  swift_retain();
  sub_1BCAB5898();
  sub_1BC997208((uint64_t)v14, (uint64_t (*)(_QWORD))sub_1BC9BDE9C);
  swift_getKeyPath();
  swift_getKeyPath();
  v26 = xmmword_1BCABF990;
  swift_retain();
  sub_1BCAB5898();
  return v0;
}

uint64_t SummaryTrendTileViewModel.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = v0 + OBJC_IVAR____TtC19HealthVisualization25SummaryTrendTileViewModel__textString;
  v2 = MEMORY[0x1E0DEA968];
  v3 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0C96198];
  sub_1BC9A1210(0, &qword_1ED6C3530, MEMORY[0x1E0DEA968], MEMORY[0x1E0C96198]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v1, v4);
  v5 = v0 + OBJC_IVAR____TtC19HealthVisualization25SummaryTrendTileViewModel__trendModel;
  sub_1BC998AB0(0, &qword_1EF478330, (uint64_t (*)(uint64_t))sub_1BC9BDE9C, v3);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = v0 + OBJC_IVAR____TtC19HealthVisualization25SummaryTrendTileViewModel__pregnancyText;
  sub_1BC9BE888(0, &qword_1EF478348, (unint64_t *)&qword_1ED6C2C80, v2, v3);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  return v0;
}

uint64_t SummaryTrendTileViewModel.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = v0 + OBJC_IVAR____TtC19HealthVisualization25SummaryTrendTileViewModel__textString;
  v2 = MEMORY[0x1E0DEA968];
  v3 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0C96198];
  sub_1BC9A1210(0, &qword_1ED6C3530, MEMORY[0x1E0DEA968], MEMORY[0x1E0C96198]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v1, v4);
  v5 = v0 + OBJC_IVAR____TtC19HealthVisualization25SummaryTrendTileViewModel__trendModel;
  sub_1BC998AB0(0, &qword_1EF478330, (uint64_t (*)(uint64_t))sub_1BC9BDE9C, v3);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = v0 + OBJC_IVAR____TtC19HealthVisualization25SummaryTrendTileViewModel__pregnancyText;
  sub_1BC9BE888(0, &qword_1EF478348, (unint64_t *)&qword_1ED6C2C80, v2, v3);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  return swift_deallocClassInstance();
}

uint64_t sub_1BC9BF4C0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  type metadata accessor for SummaryTrendTileViewModel();
  result = sub_1BCAB582C();
  *a1 = result;
  return result;
}

uint64_t SummaryTrendTileView.init(summaryViewModel:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  type metadata accessor for SummaryTrendTileViewModel();
  sub_1BC996948(&qword_1ED6C3368, (uint64_t (*)(uint64_t))type metadata accessor for SummaryTrendTileViewModel, (uint64_t)&protocol conformance descriptor for SummaryTrendTileViewModel);
  result = sub_1BCAB594C();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t type metadata accessor for SummaryTrendTileViewModel()
{
  uint64_t result;

  result = qword_1ED6C3370;
  if (!qword_1ED6C3370)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t SummaryTrendTileView.init(text:trendViewModel:pregnancyText:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t (*v15)(_QWORD);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;

  sub_1BC9BDE9C(0);
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BC9964B8(a3, (uint64_t)v14, v15);
  type metadata accessor for SummaryTrendTileViewModel();
  swift_allocObject();
  SummaryTrendTileViewModel.init(text:trendModel:pregnancyText:)(a1, a2, (uint64_t)v14, a4, a5);
  sub_1BC996948(&qword_1ED6C3368, (uint64_t (*)(uint64_t))type metadata accessor for SummaryTrendTileViewModel, (uint64_t)&protocol conformance descriptor for SummaryTrendTileViewModel);
  v16 = sub_1BCAB594C();
  v18 = v17;
  result = sub_1BC997208(a3, (uint64_t (*)(_QWORD))sub_1BC9BDE9C);
  *a6 = v16;
  a6[1] = v18;
  return result;
}

uint64_t SummaryTrendTileView.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  sub_1BC9BF794();
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v6 = v1[1];
  *(_QWORD *)v5 = sub_1BCAB5A90();
  *((_QWORD *)v5 + 1) = 0;
  v5[16] = 0;
  sub_1BC9C0F24();
  sub_1BC9BFCC4(v7, v6, (uint64_t *)&v5[*(int *)(v8 + 44)]);
  v9 = sub_1BCAB5D54();
  LOBYTE(v7) = sub_1BCAB5B80();
  sub_1BC9964B8((uint64_t)v5, a1, (uint64_t (*)(_QWORD))sub_1BC9BF794);
  sub_1BC9C0FA0();
  v11 = a1 + *(int *)(v10 + 36);
  *(_QWORD *)v11 = v9;
  *(_BYTE *)(v11 + 8) = v7;
  return sub_1BC997208((uint64_t)v5, (uint64_t (*)(_QWORD))sub_1BC9BF794);
}

void sub_1BC9BF794()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EF478358)
  {
    sub_1BC998AB0(255, &qword_1EF478360, (uint64_t (*)(uint64_t))sub_1BC9BF80C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE0648]);
    sub_1BC9BFC64();
    v0 = sub_1BCAB5DA8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EF478358);
  }
}

void sub_1BC9BF80C()
{
  unint64_t TupleTypeMetadata;
  uint64_t v1;

  if (!qword_1EF478368)
  {
    sub_1BC9BF8D4();
    sub_1BC998AB0(255, &qword_1EF478370, (uint64_t (*)(uint64_t))sub_1BC9BF9DC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    sub_1BC9BFB64(255, &qword_1EF478388, (uint64_t (*)(uint64_t))MEMORY[0x1E0CDFE58], MEMORY[0x1E0CD9778], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CD9BF0]);
    sub_1BC9BFA50(255);
    TupleTypeMetadata = swift_getTupleTypeMetadata();
    if (!v1)
      atomic_store(TupleTypeMetadata, (unint64_t *)&qword_1EF478368);
  }
}

void sub_1BC9BF8D4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED6C3590)
  {
    sub_1BC9BF958();
    sub_1BC9BFB64(255, &qword_1ED6C35A0, MEMORY[0x1E0CDBFF0], MEMORY[0x1E0CDBFE8], MEMORY[0x1E0CDBED0]);
    v0 = sub_1BCAB5970();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED6C3590);
  }
}

void sub_1BC9BF958()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED6C3588)
  {
    sub_1BC9B6634();
    sub_1BC9BE888(255, &qword_1ED6C35C8, (unint64_t *)&qword_1ED6C6190, MEMORY[0x1E0DEB418], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CDCF68]);
    v0 = sub_1BCAB5970();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED6C3588);
  }
}

void sub_1BC9BF9DC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EF478378)
  {
    sub_1BC9B75E4(255, &qword_1EF478380, MEMORY[0x1E0CDDD78], MEMORY[0x1E0CD9778], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CD9BF0]);
    v0 = sub_1BCAB6384();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EF478378);
  }
}

void sub_1BC9BFA50(uint64_t a1)
{
  sub_1BC998AB0(a1, &qword_1EF478390, (uint64_t (*)(uint64_t))sub_1BC9BFA6C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
}

void sub_1BC9BFA6C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EF478398)
  {
    sub_1BC9BFAD0(255);
    sub_1BCAB5B50();
    v0 = sub_1BCAB5970();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EF478398);
  }
}

void sub_1BC9BFAD0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD v5[2];

  if (!qword_1EF4783A0)
  {
    sub_1BC9BFB64(255, &qword_1ED6C3570, type metadata accessor for CoreChartTrendDiagram, MEMORY[0x1E0CD9778], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CD9BF0]);
    v5[0] = v2;
    v5[1] = sub_1BC9BFBC4();
    v3 = MEMORY[0x1BCCFBE48](a1, v5, MEMORY[0x1E0CDEA98], 0);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1EF4783A0);
  }
}

void sub_1BC9BFB64(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  if (!*a2)
  {
    v9 = a3(255);
    v10 = a5(a1, v9, a4);
    if (!v11)
      atomic_store(v10, a2);
  }
}

unint64_t sub_1BC9BFBC4()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_1EF4783A8;
  if (!qword_1EF4783A8)
  {
    sub_1BC9BFB64(255, &qword_1ED6C3570, type metadata accessor for CoreChartTrendDiagram, MEMORY[0x1E0CD9778], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CD9BF0]);
    v2 = v1;
    v3[0] = sub_1BC996948(&qword_1EF4783B0, type metadata accessor for CoreChartTrendDiagram, (uint64_t)&protocol conformance descriptor for CoreChartTrendDiagram);
    v3[1] = MEMORY[0x1E0CD9758];
    result = MEMORY[0x1BCCFBE84](MEMORY[0x1E0CD9C20], v2, v3);
    atomic_store(result, (unint64_t *)&qword_1EF4783A8);
  }
  return result;
}

unint64_t sub_1BC9BFC64()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EF4783B8;
  if (!qword_1EF4783B8)
  {
    sub_1BC998AB0(255, &qword_1EF478360, (uint64_t (*)(uint64_t))sub_1BC9BF80C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE0648]);
    result = MEMORY[0x1BCCFBE84](MEMORY[0x1E0CE0680], v1);
    atomic_store(result, (unint64_t *)&qword_1EF4783B8);
  }
  return result;
}

void sub_1BC9BFCC4(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v10)(uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(char *, _QWORD, uint64_t);
  uint64_t v55;
  uint64_t v56;
  void (*v57)(uint64_t, uint64_t);
  char *v58;
  void (*v59)(_QWORD);
  uint64_t v60;
  void (*v61)(char *, uint64_t);
  uint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t KeyPath;
  uint64_t v68;
  id v69;
  void *v70;
  id v71;
  unsigned int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  void (*v87)(char *, uint64_t, uint64_t);
  char v88;
  char v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unsigned __int8 v93;
  uint64_t v94;
  uint64_t v95;
  void (*v96)(char *, _QWORD, uint64_t, uint64_t);
  char *v97;
  char *v98;
  char v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  _QWORD *v117;
  uint64_t *v118;
  uint64_t *v119;
  uint64_t v120;
  uint64_t *v121;
  uint64_t v122;
  uint64_t v123;
  _DWORD *v124;
  void *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  unint64_t v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  char v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  char *v159;
  uint64_t v160;
  char *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  void (*v169)(char *, uint64_t, uint64_t);
  void (*v170)(char *, _QWORD, uint64_t);
  void (*v171)(char *, uint64_t);
  unsigned int v172;
  void (*v173)(uint64_t, uint64_t);
  void (*v174)(char *, _QWORD, uint64_t);
  uint64_t v175;
  _QWORD *v176;
  uint64_t v177;
  uint64_t v178;
  char *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  char *v184;
  uint64_t v185;
  char *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t *v194;
  uint64_t v195;
  char *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  char *v201;
  int v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  void (*v206)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v207;
  void (*v208)(char *, uint64_t, uint64_t);
  char *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  char *v216;
  uint64_t v217;
  uint64_t v218;
  char *v219;
  uint64_t v220;
  uint64_t v221;
  unint64_t v222;
  uint64_t v223;
  uint64_t v224;
  ValueMetadata *v225;

  v185 = a1;
  v194 = a3;
  v181 = sub_1BCAB5B38();
  v180 = *(_QWORD *)(v181 - 8);
  MEMORY[0x1E0C80A78](v181);
  v179 = (char *)&v170 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v203 = type metadata accessor for CoreChartTrendDiagram(0);
  MEMORY[0x1E0C80A78](v203);
  v176 = (void (**)(char *, _QWORD, uint64_t))((char *)&v170 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v6);
  v177 = (uint64_t)&v170 - v7;
  v8 = MEMORY[0x1E0CD9778];
  v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CD9BF0];
  sub_1BC9BFB64(0, &qword_1ED6C3570, v10, MEMORY[0x1E0CD9778], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CD9BF0]);
  v182 = v11;
  MEMORY[0x1E0C80A78](v11);
  v178 = (uint64_t)&v170 - v12;
  sub_1BC9BFAD0(0);
  v188 = v13;
  v187 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13);
  v186 = (char *)&v170 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BC9BFA6C();
  v204 = v15;
  v193 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15);
  v184 = (char *)&v170 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17);
  v183 = (uint64_t)&v170 - v18;
  sub_1BC9BDE9C(0);
  MEMORY[0x1E0C80A78](v19);
  v201 = (char *)&v170 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v200 = type metadata accessor for CoreChartTrendViewModel(0);
  v199 = *(_QWORD *)(v200 - 8);
  MEMORY[0x1E0C80A78](v200);
  v175 = (uint64_t)&v170 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v22);
  v192 = (uint64_t)&v170 - v23;
  sub_1BC9BFA50(0);
  MEMORY[0x1E0C80A78](v24);
  v212 = (uint64_t)&v170 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v26);
  v214 = (uint64_t)&v170 - v27;
  v198 = sub_1BCAB5DC0();
  v197 = *(_QWORD *)(v198 - 8);
  MEMORY[0x1E0C80A78](v198);
  v196 = (char *)&v170 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BC9BFB64(0, &qword_1EF478388, v29, v8, v9);
  v195 = v30;
  MEMORY[0x1E0C80A78](v30);
  v215 = (uint64_t)&v170 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v32);
  v213 = (uint64_t)&v170 - v33;
  v34 = sub_1BCAB5C04();
  v219 = *(char **)(v34 - 8);
  v220 = v34;
  MEMORY[0x1E0C80A78](v34);
  v36 = (char *)&v170 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BC9C15A4(0);
  MEMORY[0x1E0C80A78](v37);
  v39 = (char *)&v170 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = sub_1BCAB5C28();
  v218 = *(_QWORD *)(v40 - 8);
  MEMORY[0x1E0C80A78](v40);
  v42 = (char *)&v170 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = sub_1BCAB5A60();
  MEMORY[0x1E0C80A78](v43);
  sub_1BCAB5A54();
  sub_1BCAB5A48();
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  sub_1BCAB588C();
  v205 = a2;
  swift_release();
  swift_release();
  swift_release();
  sub_1BCAB5A3C();
  swift_bridgeObjectRelease();
  sub_1BCAB5A48();
  sub_1BCAB5A78();
  v44 = sub_1BCAB5C4C();
  v46 = v45;
  v217 = v47;
  LOBYTE(v9) = v48 & 1;
  v49 = *MEMORY[0x1E0CDD7E8];
  v50 = v218;
  v208 = *(void (**)(char *, uint64_t, uint64_t))(v218 + 104);
  v208(v42, v49, v40);
  v51 = *MEMORY[0x1E0CDD550];
  v52 = sub_1BCAB5BA4();
  v53 = *(_QWORD *)(v52 - 8);
  v54 = *(void (**)(char *, _QWORD, uint64_t))(v53 + 104);
  LODWORD(v207) = v51;
  v55 = v51;
  v56 = v52;
  v174 = v54;
  v54(v39, v55, v52);
  v206 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v53 + 56);
  v206(v39, 0, 1, v56);
  sub_1BCAB5BEC();
  v216 = v39;
  sub_1BC997208((uint64_t)v39, (uint64_t (*)(_QWORD))sub_1BC9C15A4);
  v57 = *(void (**)(uint64_t, uint64_t))(v50 + 8);
  v209 = v42;
  v218 = v40;
  v173 = v57;
  v57((uint64_t)v42, v40);
  v58 = v219;
  v59 = (void (*)(_QWORD))*((_QWORD *)v219 + 13);
  v172 = *MEMORY[0x1E0CDD6D8];
  v60 = v220;
  v170 = (void (*)(char *, _QWORD, uint64_t))v59;
  v59(v36);
  sub_1BCAB5C10();
  swift_release();
  v61 = (void (*)(char *, uint64_t))*((_QWORD *)v58 + 1);
  v219 = v36;
  v171 = v61;
  v61(v36, v60);
  sub_1BCAB5BD4();
  sub_1BCAB5BF8();
  swift_release();
  v62 = sub_1BCAB5C40();
  v211 = v63;
  v202 = v64;
  v66 = v65;
  swift_release();
  sub_1BC9C15C0(v44, v46, (char)v9);
  swift_bridgeObjectRelease();
  KeyPath = swift_getKeyPath();
  v68 = swift_getKeyPath();
  v69 = objc_msgSend((id)objc_opt_self(), sel_sharedBehavior);
  if (!v69)
  {
    __break(1u);
    goto LABEL_17;
  }
  v70 = v69;
  v189 = v68;
  v190 = KeyPath;
  v191 = v62;
  v210 = v66;
  v71 = objc_msgSend(v69, sel_features);

  if (!v71)
  {
LABEL_17:
    __break(1u);
    return;
  }
  v72 = objc_msgSend(v71, sel_seahorse);

  v73 = v213;
  v74 = v214;
  v75 = v205;
  v76 = (int *)v203;
  if (v72)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    swift_retain();
    sub_1BCAB588C();
    swift_release();
    swift_release();
    swift_release();
    if (v224)
    {
      sub_1BC9A10F8();
      v77 = sub_1BCAB5C64();
      v79 = v78;
      v81 = v80 & 1;
      v82 = (uint64_t)v209;
      v83 = v218;
      v208(v209, *MEMORY[0x1E0CDD790], v218);
      v84 = (uint64_t)v216;
      v174(v216, v207, v56);
      v206((char *)v84, 0, 1, v56);
      sub_1BCAB5BEC();
      sub_1BC997208(v84, (uint64_t (*)(_QWORD))sub_1BC9C15A4);
      v173(v82, v83);
      v86 = v219;
      v85 = v220;
      v170(v219, v172, v220);
      sub_1BCAB5C10();
      swift_release();
      v171(v86, v85);
      v209 = (char *)sub_1BCAB5C40();
      v208 = v87;
      v89 = v88;
      v220 = v90;
      swift_release();
      v219 = (char *)(v89 & 1);
      v91 = v77;
      v73 = v213;
      v74 = v214;
      v92 = v79;
      v75 = v205;
      sub_1BC9C15C0(v91, v92, v81);
      swift_bridgeObjectRelease();
      v93 = sub_1BCAB5B8C();
      sub_1BCAB58EC();
      v218 = v94;
      v207 = v95;
      v206 = v96;
      v216 = v97;
      v217 = v93;
    }
    else
    {
      v209 = 0;
      v208 = 0;
      v219 = 0;
      v220 = 0;
      v217 = 0;
      v218 = 0;
      v207 = 0;
      v206 = 0;
      v216 = 0;
    }
  }
  else
  {
    v209 = 0;
    v208 = 0;
    v218 = 0;
    v219 = 0;
    v217 = 0;
    v207 = 0;
    v206 = 0;
    v216 = 0;
    v220 = 1;
  }
  v98 = v196;
  sub_1BCAB5DB4();
  v99 = sub_1BCAB5B8C();
  sub_1BCAB58EC();
  v101 = v100;
  v103 = v102;
  v105 = v104;
  v107 = v106;
  v108 = v197;
  v109 = v215;
  v110 = v198;
  (*(void (**)(uint64_t, char *, uint64_t))(v197 + 16))(v215, v98, v198);
  v111 = v109 + *(int *)(v195 + 36);
  *(_BYTE *)v111 = v99;
  *(_QWORD *)(v111 + 8) = v101;
  *(_QWORD *)(v111 + 16) = v103;
  *(_QWORD *)(v111 + 24) = v105;
  *(_QWORD *)(v111 + 32) = v107;
  *(_BYTE *)(v111 + 40) = 0;
  (*(void (**)(char *, uint64_t))(v108 + 8))(v98, v110);
  sub_1BC9C15E0(v109, v73);
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  v112 = (uint64_t)v201;
  sub_1BCAB588C();
  swift_release();
  swift_release();
  swift_release();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v199 + 48))(v112, 1, v200) == 1)
  {
    sub_1BC997208(v112, (uint64_t (*)(_QWORD))sub_1BC9BDE9C);
    v113 = 1;
    v114 = v193;
  }
  else
  {
    v115 = v192;
    sub_1BC9AE330(v112, v192, type metadata accessor for CoreChartTrendViewModel);
    v116 = v175;
    sub_1BC9964B8(v115, v175, type metadata accessor for CoreChartTrendViewModel);
    v117 = v176;
    *v176 = 0x4000000000000000;
    v118 = (_QWORD *)((char *)v117 + v76[5]);
    *v118 = swift_getKeyPath();
    sub_1BC998AB0(0, &qword_1ED6C3540, (uint64_t (*)(uint64_t))MEMORY[0x1E0CD86F8], MEMORY[0x1E0CD87D0]);
    swift_storeEnumTagMultiPayload();
    v119 = (_QWORD *)((char *)v117 + v76[6]);
    sub_1BCAB5244();
    sub_1BC996948(&qword_1ED6C4968, (uint64_t (*)(uint64_t))MEMORY[0x1E0D2AF00], MEMORY[0x1E0D2AEF8]);
    *v119 = sub_1BCAB59AC();
    v119[1] = v120;
    v121 = (_QWORD *)((char *)v117 + v76[7]);
    sub_1BCAB51FC();
    sub_1BC996948(&qword_1EF4783E8, (uint64_t (*)(uint64_t))MEMORY[0x1E0D2AEC0], MEMORY[0x1E0D2AEA0]);
    *v121 = sub_1BCAB59AC();
    v121[1] = v122;
    v123 = v76[9];
    *((_BYTE *)v117 + v123) = 0;
    v124 = (_DWORD *)((char *)v117 + v76[8]);
    sub_1BC9964B8(v116, (uint64_t)v124, type metadata accessor for CoreChartTrendViewModel);
    if (!*v124)
      *((_BYTE *)v117 + v123) = 1;
    sub_1BC9C17AC();
    v125 = (void *)sub_1BCAB62E8();
    objc_msgSend(v125, sel_lineHeight);
    v127 = v126;

    sub_1BC997208(v116, type metadata accessor for CoreChartTrendViewModel);
    *(_QWORD *)((char *)v117 + v76[10]) = v127;
    v128 = (uint64_t)v117;
    v129 = v177;
    sub_1BC9AE330(v128, v177, type metadata accessor for CoreChartTrendDiagram);
    v130 = sub_1BCAB5B8C();
    sub_1BCAB58EC();
    v132 = v131;
    v134 = v133;
    v136 = v135;
    v138 = v137;
    v139 = v178;
    sub_1BC9964B8(v129, v178, type metadata accessor for CoreChartTrendDiagram);
    v140 = v182;
    v141 = v139 + *(int *)(v182 + 36);
    *(_BYTE *)v141 = v130;
    *(_QWORD *)(v141 + 8) = v132;
    *(_QWORD *)(v141 + 16) = v134;
    *(_QWORD *)(v141 + 24) = v136;
    *(_QWORD *)(v141 + 32) = v138;
    *(_BYTE *)(v141 + 40) = 0;
    sub_1BC997208(v129, type metadata accessor for CoreChartTrendDiagram);
    v142 = v179;
    sub_1BCAB5B20();
    v143 = sub_1BC9BFBC4();
    v144 = v186;
    sub_1BCAB5D0C();
    (*(void (**)(char *, uint64_t))(v180 + 8))(v142, v181);
    sub_1BC9C1708(v139, &qword_1ED6C3570, type metadata accessor for CoreChartTrendDiagram);
    v225 = &type metadata for SummaryTrendTileView;
    v223 = v185;
    v224 = v75;
    v145 = qword_1ED6C7070;
    swift_retain();
    if (v145 != -1)
      swift_once();
    v146 = sub_1BC9A1984(0xD00000000000001ELL, 0x80000001BCACF420, 0, (uint64_t)&v223, 0, 0);
    v148 = v147;
    sub_1BC9A10A0((uint64_t)&v223);
    v223 = v146;
    v224 = v148;
    v221 = v140;
    v222 = v143;
    swift_getOpaqueTypeConformance2();
    sub_1BC9A10F8();
    v149 = (uint64_t)v184;
    v150 = v188;
    sub_1BCAB5D00();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v187 + 8))(v144, v150);
    sub_1BC997208(v192, type metadata accessor for CoreChartTrendViewModel);
    v151 = v183;
    sub_1BC9AE330(v149, v183, (uint64_t (*)(_QWORD))sub_1BC9BFA6C);
    sub_1BC9AE330(v151, v74, (uint64_t (*)(_QWORD))sub_1BC9BFA6C);
    v113 = 0;
    v114 = v193;
    v109 = v215;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v114 + 56))(v74, v113, 1, v204);
  v152 = v202 & 1;
  LOBYTE(v223) = v202 & 1;
  sub_1BC9C1644(v73, v109);
  v153 = v212;
  sub_1BC9964B8(v74, v212, (uint64_t (*)(_QWORD))sub_1BC9BFA50);
  v154 = v191;
  v155 = v194;
  v156 = v211;
  *v194 = v191;
  v155[1] = v156;
  *((_BYTE *)v155 + 16) = v152;
  v157 = v190;
  v155[3] = v210;
  v155[4] = v157;
  *((_BYTE *)v155 + 40) = 0;
  v155[6] = v189;
  v155[7] = 0;
  *((_BYTE *)v155 + 64) = 1;
  v158 = (uint64_t)v209;
  v155[9] = 0x3FF0000000000000;
  v155[10] = v158;
  v159 = v219;
  v155[11] = (uint64_t)v208;
  v155[12] = (uint64_t)v159;
  v161 = v216;
  v160 = v217;
  v155[13] = v220;
  v155[14] = v160;
  v162 = v207;
  v155[15] = v218;
  v155[16] = v162;
  v155[17] = (uint64_t)v206;
  v155[18] = (uint64_t)v161;
  v216 = v161;
  *((_BYTE *)v155 + 152) = 0;
  sub_1BC9BF80C();
  v164 = v163;
  sub_1BC9C1644(v109, (uint64_t)v155 + *(int *)(v163 + 64));
  sub_1BC9964B8(v153, (uint64_t)v155 + *(int *)(v164 + 80), (uint64_t (*)(_QWORD))sub_1BC9BFA50);
  v165 = v154;
  v166 = v154;
  v167 = v211;
  sub_1BC9C16A8(v166, v211, v152);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  v168 = (uint64_t)v209;
  v169 = v208;
  sub_1BC9C16B8((uint64_t)v209, (uint64_t)v208, (char)v219, v220);
  sub_1BC9C16A8(v165, v167, v152);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  sub_1BC997208(v214, (uint64_t (*)(_QWORD))sub_1BC9BFA50);
  sub_1BC9C1708(v213, &qword_1EF478388, (uint64_t (*)(uint64_t))MEMORY[0x1E0CDFE58]);
  sub_1BC9C15C0(v165, v167, v152);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  sub_1BC997208(v212, (uint64_t (*)(_QWORD))sub_1BC9BFA50);
  sub_1BC9C1708(v215, &qword_1EF478388, (uint64_t (*)(uint64_t))MEMORY[0x1E0CDFE58]);
  sub_1BC9C1754(v168, (uint64_t)v169, (char)v219, v220);
  sub_1BC9C15C0(v165, v167, v223);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
}

void sub_1BC9C0F24()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EF4783C0)
  {
    sub_1BC998AB0(255, &qword_1EF478360, (uint64_t (*)(uint64_t))sub_1BC9BF80C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE0648]);
    v0 = sub_1BCAB5940();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EF4783C0);
  }
}

void sub_1BC9C0FA0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EF4783C8)
  {
    sub_1BC9BF794();
    sub_1BC9B75E4(255, &qword_1ED6C3130, MEMORY[0x1E0CDF5D0], MEMORY[0x1E0CDF598], MEMORY[0x1E0CDC6B0]);
    v0 = sub_1BCAB5970();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EF4783C8);
  }
}

uint64_t sub_1BC9C1024()
{
  return MEMORY[0x1E0C96020];
}

uint64_t sub_1BC9C1030()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1BC9C1040@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  sub_1BC9BF794();
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  v6 = v1[1];
  *(_QWORD *)v5 = sub_1BCAB5A90();
  *((_QWORD *)v5 + 1) = 0;
  v5[16] = 0;
  sub_1BC9C0F24();
  sub_1BC9BFCC4(v7, v6, (uint64_t *)&v5[*(int *)(v8 + 44)]);
  v9 = sub_1BCAB5D54();
  LOBYTE(v7) = sub_1BCAB5B80();
  sub_1BC9964B8((uint64_t)v5, a1, (uint64_t (*)(_QWORD))sub_1BC9BF794);
  sub_1BC9C0FA0();
  v11 = a1 + *(int *)(v10 + 36);
  *(_QWORD *)v11 = v9;
  *(_BYTE *)(v11 + 8) = v7;
  return sub_1BC997208((uint64_t)v5, (uint64_t (*)(_QWORD))sub_1BC9BF794);
}

uint64_t sub_1BC9C111C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1BC9BDF30(a1, a2, a3, (uint64_t)&OBJC_IVAR____TtC19HealthVisualization25SummaryTrendTileViewModel__textString, (uint64_t)&qword_1ED6C3530, MEMORY[0x1E0DEA968], (void (*)(_QWORD, uint64_t, uint64_t, _QWORD))sub_1BC9A1210);
}

uint64_t sub_1BC9C1154(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1BC9BDF30(a1, a2, a3, (uint64_t)&OBJC_IVAR____TtC19HealthVisualization25SummaryTrendTileViewModel__trendModel, (uint64_t)&qword_1EF478330, (uint64_t)sub_1BC9BDE9C, (void (*)(_QWORD, uint64_t, uint64_t, _QWORD))sub_1BC998AB0);
}

uint64_t sub_1BC9C1194()
{
  return type metadata accessor for SummaryTrendTileViewModel();
}

void sub_1BC9C119C()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  sub_1BC9A1210(319, &qword_1ED6C3530, MEMORY[0x1E0DEA968], MEMORY[0x1E0C96198]);
  if (v0 <= 0x3F)
  {
    sub_1BC998AB0(319, &qword_1EF478330, (uint64_t (*)(uint64_t))sub_1BC9BDE9C, MEMORY[0x1E0C96198]);
    if (v1 <= 0x3F)
    {
      sub_1BC9BE888(319, &qword_1EF478348, (unint64_t *)&qword_1ED6C2C80, MEMORY[0x1E0DEA968], MEMORY[0x1E0C96198]);
      if (v2 <= 0x3F)
        swift_updateClassMetadata2();
    }
  }
}

uint64_t method lookup function for SummaryTrendTileViewModel()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SummaryTrendTileViewModel.textString.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

uint64_t dispatch thunk of SummaryTrendTileViewModel.textString.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t dispatch thunk of SummaryTrendTileViewModel.textString.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t dispatch thunk of SummaryTrendTileViewModel.$textString.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of SummaryTrendTileViewModel.$textString.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t dispatch thunk of SummaryTrendTileViewModel.$textString.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t dispatch thunk of SummaryTrendTileViewModel.trendModel.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of SummaryTrendTileViewModel.trendModel.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t dispatch thunk of SummaryTrendTileViewModel.trendModel.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
}

uint64_t dispatch thunk of SummaryTrendTileViewModel.$trendModel.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

uint64_t dispatch thunk of SummaryTrendTileViewModel.$trendModel.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 184))();
}

uint64_t dispatch thunk of SummaryTrendTileViewModel.$trendModel.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
}

uint64_t dispatch thunk of SummaryTrendTileViewModel.pregnancyText.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 200))();
}

uint64_t dispatch thunk of SummaryTrendTileViewModel.pregnancyText.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 208))();
}

uint64_t dispatch thunk of SummaryTrendTileViewModel.pregnancyText.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 216))();
}

uint64_t dispatch thunk of SummaryTrendTileViewModel.$pregnancyText.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 224))();
}

uint64_t dispatch thunk of SummaryTrendTileViewModel.$pregnancyText.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 232))();
}

uint64_t dispatch thunk of SummaryTrendTileViewModel.$pregnancyText.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 240))();
}

uint64_t dispatch thunk of SummaryTrendTileViewModel.__allocating_init(text:trendModel:pregnancyText:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 248))();
}

uint64_t dispatch thunk of SummaryTrendTileViewModel.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 256))();
}

_QWORD *initializeBufferWithCopyOfBuffer for SummaryTrendTileView(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  return a1;
}

uint64_t destroy for SummaryTrendTileView()
{
  return swift_release();
}

_QWORD *assignWithCopy for SummaryTrendTileView(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  return a1;
}

_QWORD *assignWithTake for SummaryTrendTileView(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for SummaryTrendTileView(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SummaryTrendTileView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SummaryTrendTileView()
{
  return &type metadata for SummaryTrendTileView;
}

unint64_t sub_1BC9C14BC()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_1EF4783D0;
  if (!qword_1EF4783D0)
  {
    sub_1BC9C0FA0();
    v2 = v1;
    v3[0] = sub_1BC996948(&qword_1EF4783D8, (uint64_t (*)(uint64_t))sub_1BC9BF794, MEMORY[0x1E0CDFCC0]);
    v3[1] = sub_1BC9C153C();
    result = MEMORY[0x1BCCFBE84](MEMORY[0x1E0CD9C20], v2, v3);
    atomic_store(result, (unint64_t *)&qword_1EF4783D0);
  }
  return result;
}

unint64_t sub_1BC9C153C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1ED6C35A8;
  if (!qword_1ED6C35A8)
  {
    sub_1BC9B75E4(255, &qword_1ED6C3130, MEMORY[0x1E0CDF5D0], MEMORY[0x1E0CDF598], MEMORY[0x1E0CDC6B0]);
    result = MEMORY[0x1BCCFBE84](MEMORY[0x1E0CDC6D0], v1);
    atomic_store(result, (unint64_t *)&qword_1ED6C35A8);
  }
  return result;
}

void sub_1BC9C15A4(uint64_t a1)
{
  sub_1BC998AB0(a1, &qword_1EF4783E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CDD560], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
}

uint64_t sub_1BC9C15C0(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_release();
  else
    return swift_bridgeObjectRelease();
}

uint64_t sub_1BC9C15E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1BC9BFB64(0, &qword_1EF478388, (uint64_t (*)(uint64_t))MEMORY[0x1E0CDFE58], MEMORY[0x1E0CD9778], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CD9BF0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1BC9C1644(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1BC9BFB64(0, &qword_1EF478388, (uint64_t (*)(uint64_t))MEMORY[0x1E0CDFE58], MEMORY[0x1E0CD9778], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CD9BF0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1BC9C16A8(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_retain();
  else
    return swift_bridgeObjectRetain();
}

uint64_t sub_1BC9C16B8(uint64_t result, uint64_t a2, char a3, uint64_t a4)
{
  if (a4 != 1)
    return sub_1BC9C16D8(result, a2, a3, a4);
  return result;
}

uint64_t sub_1BC9C16D8(uint64_t result, uint64_t a2, char a3, uint64_t a4)
{
  if (a4)
  {
    sub_1BC9C16A8(result, a2, a3 & 1);
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_1BC9C1708(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4;

  sub_1BC9BFB64(0, a2, a3, MEMORY[0x1E0CD9778], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CD9BF0]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t sub_1BC9C1754(uint64_t result, uint64_t a2, char a3, uint64_t a4)
{
  if (a4 != 1)
    return sub_1BC9C1774(result, a2, a3, a4);
  return result;
}

uint64_t sub_1BC9C1774(uint64_t result, uint64_t a2, char a3, uint64_t a4)
{
  if (a4)
  {
    sub_1BC9C15C0(result, a2, a3 & 1);
    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t sub_1BC9C17AC()
{
  unint64_t result;

  result = qword_1ED6C6908;
  if (!qword_1ED6C6908)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1ED6C6908);
  }
  return result;
}

uint64_t sub_1BC9C17EC()
{
  uint64_t result;

  sub_1BC9A649C(0, (unint64_t *)&qword_1ED6C7260);
  result = MEMORY[0x1BCCFADBC]((id)*MEMORY[0x1E0CB5A78]);
  qword_1EF486D00 = result;
  return result;
}

id sub_1BC9C183C()
{
  id result;

  result = objc_msgSend((id)objc_opt_self(), sel_percentUnit);
  qword_1EF486D08 = (uint64_t)result;
  return result;
}

void sub_1BC9C1874()
{
  qword_1EF486D10 = 0x405E000000000000;
}

uint64_t AFibBurdenPDFHistogramRenderableFactory.generateHighlight(for:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t (*v14)(_QWORD);
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  _BYTE *v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  _BYTE *v31;
  int *v32;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  void *v37;
  id v38;
  id v39;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  id v60;
  uint64_t v61;
  void (*v62)(char *, uint64_t, uint64_t);
  uint64_t v63;
  char *v64;
  uint64_t *v65;
  int v66;
  uint64_t v67;
  _BYTE *v68;
  void *v69;
  _OWORD v70[2];
  __int128 v71;
  uint64_t v72;
  uint64_t v73[3];
  uint64_t v74;
  uint64_t v75;

  v65 = a2;
  v63 = sub_1BCAB51CC();
  v61 = *(_QWORD *)(v63 - 8);
  MEMORY[0x1E0C80A78](v63);
  v64 = (char *)&v60 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1BCAB5514();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v60 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (int *)type metadata accessor for TimeBasedDistributionChartModel();
  MEMORY[0x1E0C80A78](v9);
  v68 = (char *)&v60 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for TimeBasedDistribution();
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v60 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v67 = a1;
  sub_1BC9964B8(a1, (uint64_t)v13, v14);
  LOBYTE(v66) = sub_1BCA907C0((uint64_t)v13) & 1;
  v66 = v66;
  v15 = qword_1EF477BF0;
  v60 = *(id *)(v2 + 16);
  if (v15 != -1)
    swift_once();
  v16 = (_QWORD *)(v2 + 64);
  v62 = (void (*)(char *, uint64_t, uint64_t))v2;
  v17 = v2 + 24;
  v18 = objc_msgSend((id)qword_1EF486D00, sel_identifier, v60);
  v19 = sub_1BCAB5F04();
  v21 = v20;

  if (sub_1BCAB5F04() == v19 && v22 == v21)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    v23 = sub_1BCAB67C8();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v23 & 1) == 0)
    {
      sub_1BCAB54D8();
      v25 = v67;
      v24 = v68;
      goto LABEL_11;
    }
  }
  v25 = v67;
  v24 = v68;
  if (qword_1EF477C50 != -1)
    swift_once();
  v26 = __swift_project_value_buffer(v5, (uint64_t)qword_1EF478F00);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v26, v5);
LABEL_11:
  sub_1BCA34C9C(v16, (uint64_t)&v24[v9[6]]);
  sub_1BC9964B8(v25, (uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for TimeBasedDistribution);
  v27 = sub_1BCA907C0((uint64_t)v13) & 1;
  sub_1BC9C2428((uint64_t)v16, (uint64_t)(v24 + 8));
  sub_1BC9C2428(v17, (uint64_t)&v24[v9[7]]);
  *v24 = v27;
  (*(void (**)(_BYTE *, char *, uint64_t))(v6 + 32))(&v24[v9[8]], v8, v5);

  if (v66)
  {
    v32 = (int *)type metadata accessor for AFibBurdenTimeOfDayChart();
    v74 = (uint64_t)v32;
    v75 = sub_1BC996948(&qword_1EF4783F0, (uint64_t (*)(uint64_t))type metadata accessor for AFibBurdenTimeOfDayChart, (uint64_t)&unk_1BCAC03F0);
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v73);
    sub_1BC9964B8(v25, (uint64_t)boxed_opaque_existential_1 + v32[6], (uint64_t (*)(_QWORD))type metadata accessor for TimeBasedDistribution);
    sub_1BC9964B8((uint64_t)v24, (uint64_t)boxed_opaque_existential_1 + v32[7], (uint64_t (*)(_QWORD))type metadata accessor for TimeBasedDistributionChartModel);
    if (qword_1EF477C00 != -1)
      swift_once();
    v34 = qword_1EF486D10;
    *boxed_opaque_existential_1 = 0;
    *((_BYTE *)boxed_opaque_existential_1 + 8) = 1;
    boxed_opaque_existential_1[2] = v34;
    *((_BYTE *)boxed_opaque_existential_1 + 24) = 0;
    v31 = (char *)boxed_opaque_existential_1 + v32[8];
  }
  else
  {
    v28 = type metadata accessor for AFibBurdenDayOfWeekChart();
    v74 = v28;
    v75 = sub_1BC996948(&qword_1EF478408, (uint64_t (*)(uint64_t))type metadata accessor for AFibBurdenDayOfWeekChart, (uint64_t)&unk_1BCAC3E10);
    v29 = __swift_allocate_boxed_opaque_existential_1(v73);
    sub_1BC9964B8(v25, (uint64_t)v29 + *(int *)(v28 + 28), (uint64_t (*)(_QWORD))type metadata accessor for TimeBasedDistribution);
    sub_1BC9964B8((uint64_t)v24, (uint64_t)v29 + *(int *)(v28 + 32), (uint64_t (*)(_QWORD))type metadata accessor for TimeBasedDistributionChartModel);
    if (qword_1EF477C00 != -1)
      swift_once();
    v30 = qword_1EF486D10;
    *v29 = 0;
    *((_BYTE *)v29 + 8) = 1;
    v29[2] = v30;
    *((_BYTE *)v29 + 24) = 0;
    v31 = (char *)v29 + 25;
  }
  *v31 = 1;
  v35 = MEMORY[0x1BCCF9D0C]();
  v36 = (void *)*MEMORY[0x1E0DC1138];
  v37 = (void *)objc_opt_self();
  v38 = v36;
  v39 = objc_msgSend(v37, sel_systemFontOfSize_, 12.0);
  v72 = sub_1BC9A649C(0, (unint64_t *)&qword_1ED6C6908);
  *(_QWORD *)&v71 = v39;
  sub_1BC9A61C8(&v71, v70);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v69 = (void *)v35;
  sub_1BC9A5FA4(v70, v38, isUniquelyReferenced_nonNull_native);
  v60 = v69;

  swift_bridgeObjectRelease();
  sub_1BC9C2380();
  v41 = swift_allocObject();
  *(_OWORD *)(v41 + 16) = xmmword_1BCABFBF0;
  v42 = v66;
  v43 = sub_1BC9DD684(v66);
  v45 = v44;
  v46 = *MEMORY[0x1E0D2ABF0];
  v62 = *(void (**)(char *, uint64_t, uint64_t))(v61 + 104);
  v47 = v63;
  v48 = v64;
  v62(v64, v46, v63);
  v49 = sub_1BCAB5124();
  v50 = sub_1BCAB51B4();
  v51 = MEMORY[0x1E0D2AB38];
  *(_QWORD *)(v41 + 56) = v50;
  *(_QWORD *)(v41 + 64) = v51;
  __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v41 + 32));
  MEMORY[0x1BCCF9DB4](v43, v45, v48, v49);
  v52 = sub_1BCAB51D8();
  v53 = MEMORY[0x1E0D2AC38];
  *(_QWORD *)(v41 + 96) = v52;
  *(_QWORD *)(v41 + 104) = v53;
  __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v41 + 72));
  sub_1BCAB51E4();
  AFibBurdenPDFHistogramTextSupport.makeDescription(for:flavor:)(v67, v42);
  v62(v48, v46, v47);
  v54 = sub_1BCAB53AC();
  v55 = MEMORY[0x1E0D2BA38];
  *(_QWORD *)(v41 + 136) = v54;
  *(_QWORD *)(v41 + 144) = v55;
  __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v41 + 112));
  sub_1BCAB53A0();
  *(_QWORD *)(v41 + 176) = v52;
  *(_QWORD *)(v41 + 184) = v53;
  __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v41 + 152));
  sub_1BCAB51E4();
  sub_1BC9C2428((uint64_t)v73, v41 + 192);
  v56 = sub_1BCAB53DC();
  v57 = MEMORY[0x1E0D2BAA8];
  v58 = v65;
  v65[3] = v56;
  v58[4] = v57;
  __swift_allocate_boxed_opaque_existential_1(v58);
  sub_1BCAB53D0();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v73);
  return sub_1BC9C246C((uint64_t)v68);
}

uint64_t AFibBurdenPDFHistogramRenderableFactory.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  __swift_destroy_boxed_opaque_existential_1(v0 + 24);
  __swift_destroy_boxed_opaque_existential_1(v0 + 64);
  swift_release();
  v1 = v0 + OBJC_IVAR____TtC19HealthVisualization39AFibBurdenPDFHistogramRenderableFactory_logger;
  v2 = sub_1BCAB5514();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t AFibBurdenPDFHistogramRenderableFactory.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  __swift_destroy_boxed_opaque_existential_1(v0 + 24);
  __swift_destroy_boxed_opaque_existential_1(v0 + 64);
  swift_release();
  v1 = v0 + OBJC_IVAR____TtC19HealthVisualization39AFibBurdenPDFHistogramRenderableFactory_logger;
  v2 = sub_1BCAB5514();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance();
}

uint64_t sub_1BC9C2034@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return AFibBurdenPDFHistogramRenderableFactory.generateHighlight(for:)(a1, a2);
}

_QWORD *sub_1BC9C2054(void *a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  id v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  char *v27;
  id v28;
  _QWORD *v29;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37[5];
  uint64_t v38[3];
  uint64_t v39;
  uint64_t v40;

  v3 = v2;
  v36 = a2;
  v5 = sub_1BCAB4E54();
  v34 = *(_QWORD *)(v5 - 8);
  v35 = v5;
  MEMORY[0x1E0C80A78](v5);
  v32 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = sub_1BCAB5514();
  v7 = *(_QWORD *)(v33 - 8);
  MEMORY[0x1E0C80A78](v33);
  v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3[2] = a1;
  v10 = qword_1EF477BF0;
  v11 = a1;
  if (v10 != -1)
    swift_once();
  v12 = qword_1EF477BF8;
  v13 = (id)qword_1EF486D00;
  if (v12 != -1)
    swift_once();
  v14 = (void *)qword_1EF486D08;
  v15 = type metadata accessor for TimeBasedDistributionChartTextSupportImpl();
  swift_allocObject();
  sub_1BC9E13FC((uint64_t)v11, (uint64_t)v13, (uint64_t)v14);
  v17 = v16;

  v3[6] = v15;
  v3[7] = &protocol witness table for TimeBasedDistributionChartTextSupportImpl;
  v3[3] = v17;
  v37[0] = (uint64_t)v11;
  TimeBasedDistributionChartModelFactory.makeChartConfiguration(sampleType:)((void *)qword_1EF486D00, v38);
  sub_1BC9C2428((uint64_t)v38, (uint64_t)(v3 + 8));
  v18 = type metadata accessor for TimeBasedDistributionMaxBucketTextSupport();
  v20 = v39;
  v19 = v40;
  v21 = __swift_project_boxed_opaque_existential_1(v38, v39);
  v37[3] = v20;
  v22 = *(_QWORD *)(v19 + 8);
  v37[4] = v22;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v37);
  (*(void (**)(uint64_t *, _QWORD *, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(boxed_opaque_existential_1, v21, v20);
  v24 = v36;
  v25 = v33;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v36, v33);
  v26 = sub_1BC9DEE18((uint64_t)boxed_opaque_existential_1, (uint64_t)v9, v18, v20, v22);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v37);
  swift_retain();
  v27 = v32;
  _s19HealthVisualization25PresentationDateProvidingPAAE012presentationD010Foundation0D0VvgZ_0();
  v28 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB6360]), sel_init);
  swift_release();

  type metadata accessor for AFibBurdenPDFHistogramTextSupport();
  v29 = (_QWORD *)swift_allocObject();
  v29[5] = v18;
  v29[6] = &protocol witness table for TimeBasedDistributionMaxBucketTextSupport;
  v29[2] = v26;
  (*(void (**)(uint64_t, char *, uint64_t))(v34 + 32))((uint64_t)v29 + OBJC_IVAR____TtC19HealthVisualization33AFibBurdenPDFHistogramTextSupport_now, v27, v35);
  *(_QWORD *)((char *)v29 + OBJC_IVAR____TtC19HealthVisualization33AFibBurdenPDFHistogramTextSupport_calendarCache) = v28;
  v3[13] = v29;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))((uint64_t)v3 + OBJC_IVAR____TtC19HealthVisualization39AFibBurdenPDFHistogramRenderableFactory_logger, v24, v25);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v38);
  return v3;
}

uint64_t *__swift_allocate_boxed_opaque_existential_1(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;

  v1 = a1;
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

void sub_1BC9C2380()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EF4783F8)
  {
    sub_1BC9C23D4();
    v0 = sub_1BCAB67A4();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EF4783F8);
  }
}

unint64_t sub_1BC9C23D4()
{
  unint64_t result;

  result = qword_1EF478400;
  if (!qword_1EF478400)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1EF478400);
  }
  return result;
}

uint64_t sub_1BC9C2428(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_1BC9C246C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for TimeBasedDistributionChartModel();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t dispatch thunk of AFibBurdenPDFHistogramRenderableFactoryProxy.generateHighlight(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t sub_1BC9C24B0()
{
  return type metadata accessor for AFibBurdenPDFHistogramRenderableFactory();
}

uint64_t type metadata accessor for AFibBurdenPDFHistogramRenderableFactory()
{
  uint64_t result;

  result = qword_1EF478440;
  if (!qword_1EF478440)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_1BC9C24F4()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1BCAB5514();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for AFibBurdenPDFHistogramRenderableFactory()
{
  return swift_lookUpClassMethod();
}

uint64_t TimeBasedDistributionChartModel.generateTimeOfDayChartPoints(for:)(uint64_t a1)
{
  unsigned __int8 *v1;

  return sub_1BC9C2720(a1, v1);
}

uint64_t TimeBasedDistributionChartModel.flavor.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t TimeBasedDistributionChartModel.configuration.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1BC9C2428(v1 + 8, a1);
}

uint64_t TimeBasedDistributionChartModel.design.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for TimeBasedDistributionChartModel();
  return sub_1BC9964B8(v1 + *(int *)(v3 + 24), a1, (uint64_t (*)(_QWORD))type metadata accessor for TimeBasedDistributionChartDesign);
}

uint64_t TimeBasedDistributionChartModel.textSupport.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for TimeBasedDistributionChartModel();
  return sub_1BC9C2428(v1 + *(int *)(v3 + 28), a1);
}

uint64_t TimeBasedDistributionChartModel.logger.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for TimeBasedDistributionChartModel() + 32);
  v4 = sub_1BCAB5514();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t TimeBasedDistributionChartModel.init(flavor:configuration:design:textSupport:logger:)@<X0>(char a1@<W0>, __int128 *a2@<X1>, uint64_t a3@<X2>, __int128 *a4@<X3>, uint64_t a5@<X4>, _BYTE *a6@<X8>)
{
  int *v10;
  _BYTE *v11;
  uint64_t v12;

  *a6 = a1 & 1;
  sub_1BC9C42A4(a2, (uint64_t)(a6 + 8));
  v10 = (int *)type metadata accessor for TimeBasedDistributionChartModel();
  sub_1BC9AE330(a3, (uint64_t)&a6[v10[6]], (uint64_t (*)(_QWORD))type metadata accessor for TimeBasedDistributionChartDesign);
  sub_1BC9C42A4(a4, (uint64_t)&a6[v10[7]]);
  v11 = &a6[v10[8]];
  v12 = sub_1BCAB5514();
  return (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v11, a5, v12);
}

uint64_t sub_1BC9C2720(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  char isUniquelyReferenced_nonNull_native;
  unsigned __int8 *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  uint64_t v45;
  double v46;
  unsigned int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  unsigned __int8 *v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(double *, uint64_t, uint64_t);
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  char *v58;
  NSObject *v59;
  os_log_type_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  double v65;
  uint64_t v66;
  char *v67;
  uint64_t KeyPath;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unsigned __int8 *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  double *v80;
  uint64_t v81;
  _BYTE *v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  double v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  __int128 v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  double *v112;
  uint64_t v113;
  uint64_t v114;
  unsigned __int8 *v115;
  uint64_t v116;
  __int128 v117;
  double v118;
  char v119;
  char v120;
  uint64_t v121;
  uint64_t v122;

  v115 = a2;
  v104 = type metadata accessor for TimeBasedDistributionChartPoint.TimeOfDay(0);
  v103 = *(_QWORD *)(v104 - 8);
  MEMORY[0x1E0C80A78](v104);
  v113 = (uint64_t)&v94 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_1BCAB4D10();
  MEMORY[0x1E0C80A78](v4);
  v102 = (char *)&v94 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v101 = sub_1BCAB4CE0();
  v100 = *(_QWORD *)(v101 - 8);
  MEMORY[0x1E0C80A78](v101);
  v99 = (char *)&v94 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v98 = type metadata accessor for TimeBasedDistributionChartPoint.Skeleton(0);
  MEMORY[0x1E0C80A78](v98);
  v112 = (double *)((char *)&v94 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v107 = sub_1BCAB5514();
  v114 = *(_QWORD *)(v107 - 8);
  MEMORY[0x1E0C80A78](v107);
  v9 = (char *)&v94 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for TimeBasedDistribution() + 20));
  v11 = *(_QWORD *)(v10 + 16);
  v12 = MEMORY[0x1E0DEE9D8];
  v108 = v9;
  v111 = v10;
  if (v11)
  {
    v118 = MEMORY[0x1E0DEE9D8];
    swift_bridgeObjectRetain();
    sub_1BC9BACF8(0, v11, 0);
    v12 = *(_QWORD *)&v118;
    v13 = (_QWORD *)(v10 + 64);
    do
    {
      v14 = *(v13 - 4);
      v15 = *(v13 - 3);
      *(_QWORD *)&v117 = *(v13 - 2);
      v16 = *((_BYTE *)v13 - 8);
      LODWORD(v116) = *((unsigned __int8 *)v13 - 7);
      v17 = *v13;
      v118 = *(double *)&v12;
      v19 = *(_QWORD *)(v12 + 16);
      v18 = *(_QWORD *)(v12 + 24);
      swift_bridgeObjectRetain();
      if (v19 >= v18 >> 1)
      {
        sub_1BC9BACF8(v18 > 1, v19 + 1, 1);
        v12 = *(_QWORD *)&v118;
      }
      *(_QWORD *)(v12 + 16) = v19 + 1;
      v20 = v12 + 48 * v19;
      *(_QWORD *)(v20 + 32) = v14;
      *(_QWORD *)(v20 + 40) = v14;
      v21 = v117;
      *(_QWORD *)(v20 + 48) = v15;
      *(_QWORD *)(v20 + 56) = v21;
      *(_BYTE *)(v20 + 64) = v16;
      *(_BYTE *)(v20 + 65) = v116;
      *(_QWORD *)(v20 + 72) = v17;
      v13 += 5;
      --v11;
    }
    while (v11);
    v10 = v111;
    swift_bridgeObjectRelease();
    v9 = v108;
  }
  if (*(_QWORD *)(v12 + 16))
  {
    sub_1BC9C576C();
    v22 = sub_1BCAB660C();
  }
  else
  {
    v22 = MEMORY[0x1E0DEE9E0];
  }
  v118 = *(double *)&v22;
  v23 = swift_bridgeObjectRetain();
  sub_1BC9C57D0(v23, 1, &v118);
  swift_bridgeObjectRelease();
  v24 = *(_QWORD *)&v118;
  v25 = *(_QWORD *)(v10 + 16);
  v116 = *(_QWORD *)&v118;
  if (v25)
  {
    swift_bridgeObjectRetain();
    v26 = (_QWORD *)(v10 + 64);
    v27 = MEMORY[0x1E0DEE9D8];
    do
    {
      if (*((_BYTE *)v26 - 7) == 1)
      {
        v117 = *((_OWORD *)v26 - 2);
        v31 = *(v26 - 2);
        v32 = *((_BYTE *)v26 - 8);
        v33 = *v26;
        swift_bridgeObjectRetain();
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v118 = *(double *)&v27;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_1BC9BACDC(0, *(_QWORD *)(v27 + 16) + 1, 1);
          v27 = *(_QWORD *)&v118;
        }
        v29 = *(_QWORD *)(v27 + 16);
        v28 = *(_QWORD *)(v27 + 24);
        if (v29 >= v28 >> 1)
        {
          sub_1BC9BACDC(v28 > 1, v29 + 1, 1);
          v27 = *(_QWORD *)&v118;
        }
        *(_QWORD *)(v27 + 16) = v29 + 1;
        v30 = v27 + 40 * v29;
        *(_OWORD *)(v30 + 32) = v117;
        *(_QWORD *)(v30 + 48) = v31;
        *(_BYTE *)(v30 + 56) = v32;
        *(_BYTE *)(v30 + 57) = 1;
        *(_QWORD *)(v30 + 64) = v33;
      }
      v26 += 5;
      --v25;
    }
    while (v25);
    swift_bridgeObjectRelease();
    v9 = v108;
    v24 = v116;
  }
  else
  {
    v27 = MEMORY[0x1E0DEE9D8];
  }
  v95 = *(_QWORD *)(v27 + 16);
  swift_release();
  v35 = v115;
  v36 = *((_QWORD *)v115 + 4);
  v37 = *((_QWORD *)v115 + 5);
  __swift_project_boxed_opaque_existential_1((_QWORD *)v115 + 1, v36);
  v38 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(v37 + 8) + 8))(*v35, v36);
  v39 = *(_QWORD *)(v38 + 16);
  if (v39)
  {
    swift_bridgeObjectRetain();
    v40 = 0;
    *(_QWORD *)&v117 = MEMORY[0x1E0DEE9D8];
    *(_QWORD *)&v41 = 136446210;
    v106 = v41;
    v105 = MEMORY[0x1E0DEE9B8] + 8;
    v42 = v107;
    v97 = v38;
    v96 = v39;
    while (1)
    {
      if (!*(_QWORD *)(v24 + 16) || (v43 = sub_1BC9A2E20(*(_QWORD *)(v38 + 8 * v40 + 32)), (v44 & 1) == 0))
      {
        sub_1BCAB54D8();
        v59 = sub_1BCAB54FC();
        v60 = sub_1BCAB61B0();
        if (os_log_type_enabled(v59, v60))
        {
          v61 = swift_slowAlloc();
          v62 = swift_slowAlloc();
          v118 = *(double *)&v62;
          *(_DWORD *)v61 = v106;
          v122 = type metadata accessor for TimeBasedDistributionChartModel();
          sub_1BC9C5BCC();
          v63 = sub_1BCAB5F28();
          *(_QWORD *)(v61 + 4) = sub_1BC99BD4C(v63, v64, (uint64_t *)&v118);
          v24 = v116;
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_1BC989000, v59, v60, "[%{public}s] Expected to have bucket for each component range.", (uint8_t *)v61, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x1BCCFBF5C](v62, -1, -1);
          MEMORY[0x1BCCFBF5C](v61, -1, -1);
        }

        (*(void (**)(char *, uint64_t))(v114 + 8))(v9, v42);
        goto LABEL_24;
      }
      v45 = *(_QWORD *)(v24 + 56) + 40 * v43;
      v110 = *(_QWORD *)v45;
      v46 = *(double *)(v45 + 16);
      v47 = *(unsigned __int8 *)(v45 + 24);
      v48 = *(unsigned __int8 *)(v45 + 25);
      v49 = *(_QWORD *)(v45 + 32);
      v50 = type metadata accessor for TimeBasedDistributionChartModel();
      v51 = &v115[*(int *)(v50 + 28)];
      v52 = *((_QWORD *)v51 + 3);
      v53 = *((_QWORD *)v51 + 4);
      __swift_project_boxed_opaque_existential_1(v51, v52);
      v118 = v46;
      v119 = v47;
      v120 = v48;
      v121 = v49;
      v54 = *(void (**)(double *, uint64_t, uint64_t))(v53 + 8);
      v111 = v49;
      swift_bridgeObjectRetain();
      v54(&v118, v52, v53);
      v56 = v55;
      v57 = v47;
      if ((v47 & 1) == 0 && v48)
      {
        v58 = (char *)&v115[*(int *)(v50 + 24)];
        if (v58[*(int *)(type metadata accessor for TimeBasedDistributionChartDesign() + 100)] != 1
          || sub_1BCAB5F4C() < 4)
        {
          if (v95 <= 1)
            goto LABEL_38;
LABEL_32:
          v57 = 2;
          goto LABEL_39;
        }
        if (!v40)
          goto LABEL_32;
        v57 = 2;
        if (v95 <= 1 && v40 != *(_QWORD *)(v97 + 16) - 1)
LABEL_38:
          v57 = 3;
      }
LABEL_39:
      if (v47)
        v65 = 0.0;
      else
        v65 = v46;
      swift_bridgeObjectRetain();
      sub_1BCAB4D04();
      v66 = v50;
      v67 = v99;
      sub_1BCAB4CEC();
      KeyPath = swift_getKeyPath();
      MEMORY[0x1E0C80A78](KeyPath);
      *(&v94 - 2) = v69;
      swift_getKeyPath();
      v70 = 8 * v57;
      v71 = *(_QWORD *)((char *)&unk_1BCABFE38 + v70);
      v72 = *(int *)(v66 + 24);
      v109 = v56;
      v73 = v115;
      v74 = (char *)&v115[v72];
      v75 = type metadata accessor for TimeBasedDistributionChartDesign();
      v118 = *(double *)&v74[*(int *)(v75 + 4 * v71)];
      sub_1BC9C5C20();
      swift_retain();
      sub_1BCAB4CC8();
      v76 = swift_getKeyPath();
      MEMORY[0x1E0C80A78](v76);
      *(&v94 - 2) = v77;
      swift_getKeyPath();
      v118 = *(double *)&v73[*(int *)(v66 + 24) + *(int *)(v75 + 4 * *(_QWORD *)((char *)&unk_1BCABFE58 + v70))];
      sub_1BC9C5D0C();
      swift_retain();
      sub_1BCAB4CC8();
      swift_bridgeObjectRelease();
      v78 = 44;
      if (v57 < 2)
        v78 = 48;
      v79 = *(_QWORD *)&v73[*(int *)(v66 + 24) + *(int *)(v75 + v78)];
      v80 = v112;
      *(_BYTE *)v112 = v57;
      v80[1] = v65;
      v81 = v98;
      v82 = (char *)v80 + *(int *)(v98 + 24);
      v83 = v100;
      v84 = v67;
      v85 = v101;
      (*(void (**)(_BYTE *, char *, uint64_t))(v100 + 32))(v82, v84, v101);
      *(_QWORD *)((char *)v80 + *(int *)(v81 + 28)) = v79;
      v86 = (double)v110;
      v87 = v104;
      v88 = v113;
      (*(void (**)(uint64_t, _BYTE *, uint64_t))(v83 + 16))(v113 + *(int *)(v104 + 28), v82, v85);
      *(_BYTE *)v88 = v57;
      *(double *)(v88 + 8) = v65;
      *(double *)(v88 + 16) = v86;
      *(_QWORD *)(v88 + *(int *)(v87 + 32)) = v79;
      swift_retain_n();
      swift_bridgeObjectRelease();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      {
        v42 = v107;
        v9 = v108;
        v24 = v116;
        v89 = v117;
      }
      else
      {
        v89 = sub_1BC9D9EF0(0, *(_QWORD *)(v117 + 16) + 1, 1, v117);
        v42 = v107;
        v9 = v108;
        v24 = v116;
      }
      v39 = v96;
      v91 = *(_QWORD *)(v89 + 16);
      v90 = *(_QWORD *)(v89 + 24);
      v38 = v97;
      if (v91 >= v90 >> 1)
        v89 = sub_1BC9D9EF0(v90 > 1, v91 + 1, 1, v89);
      *(_QWORD *)(v89 + 16) = v91 + 1;
      v92 = (*(unsigned __int8 *)(v103 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v103 + 80);
      *(_QWORD *)&v117 = v89;
      sub_1BC9AE330(v113, v89 + v92 + *(_QWORD *)(v103 + 72) * v91, type metadata accessor for TimeBasedDistributionChartPoint.TimeOfDay);
      sub_1BC997208((uint64_t)v112, type metadata accessor for TimeBasedDistributionChartPoint.Skeleton);
LABEL_24:
      if (v39 == ++v40)
      {
        swift_release();
        swift_bridgeObjectRelease_n();
        return v117;
      }
    }
  }
  swift_bridgeObjectRelease();
  swift_release();
  return MEMORY[0x1E0DEE9D8];
}

uint64_t type metadata accessor for TimeBasedDistributionChartModel()
{
  uint64_t result;

  result = qword_1EF478558;
  if (!qword_1EF478558)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_1BC9C3170(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  char isUniquelyReferenced_nonNull_native;
  unsigned __int8 *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  unint64_t v44;
  char v45;
  uint64_t v46;
  double v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  unsigned __int8 *v52;
  uint64_t v53;
  uint64_t v54;
  void (*v55)(double *, uint64_t, uint64_t);
  uint64_t v56;
  char *v57;
  NSObject *v58;
  os_log_type_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  double v64;
  char *v65;
  uint64_t KeyPath;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unsigned __int8 *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unsigned int v75;
  uint64_t v76;
  uint64_t v77;
  double *v78;
  uint64_t v79;
  _BYTE *v80;
  uint64_t v81;
  id v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t result;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  char *v102;
  __int128 v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  double *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unsigned __int8 *v115;
  uint64_t v116;
  __int128 v117;
  double v118;
  char v119;
  char v120;
  uint64_t v121;
  uint64_t v122;

  v115 = a2;
  v99 = type metadata accessor for TimeBasedDistributionChartPoint.DayOfWeek(0);
  v98 = *(_QWORD *)(v99 - 8);
  MEMORY[0x1E0C80A78](v99);
  v109 = (uint64_t)&v95 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_1BCAB4D10();
  MEMORY[0x1E0C80A78](v4);
  v102 = (char *)&v95 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1BCAB4CE0();
  v111 = *(_QWORD *)(v6 - 8);
  v112 = v6;
  MEMORY[0x1E0C80A78](v6);
  v101 = (char *)&v95 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v100 = type metadata accessor for TimeBasedDistributionChartPoint.Skeleton(0);
  MEMORY[0x1E0C80A78](v100);
  v110 = (double *)((char *)&v95 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v105 = sub_1BCAB5514();
  v114 = *(_QWORD *)(v105 - 8);
  MEMORY[0x1E0C80A78](v105);
  v10 = (char *)&v95 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for TimeBasedDistribution() + 20));
  v12 = *(_QWORD *)(v11 + 16);
  v13 = MEMORY[0x1E0DEE9D8];
  v106 = v10;
  v108 = v11;
  if (v12)
  {
    v118 = MEMORY[0x1E0DEE9D8];
    swift_bridgeObjectRetain();
    sub_1BC9BACF8(0, v12, 0);
    v13 = *(_QWORD *)&v118;
    v14 = (_QWORD *)(v11 + 64);
    do
    {
      v15 = *(v14 - 4);
      v16 = *(v14 - 3);
      *(_QWORD *)&v117 = *(v14 - 2);
      v17 = *((_BYTE *)v14 - 8);
      LODWORD(v116) = *((unsigned __int8 *)v14 - 7);
      v18 = *v14;
      v118 = *(double *)&v13;
      v20 = *(_QWORD *)(v13 + 16);
      v19 = *(_QWORD *)(v13 + 24);
      swift_bridgeObjectRetain();
      if (v20 >= v19 >> 1)
      {
        sub_1BC9BACF8(v19 > 1, v20 + 1, 1);
        v13 = *(_QWORD *)&v118;
      }
      *(_QWORD *)(v13 + 16) = v20 + 1;
      v21 = v13 + 48 * v20;
      *(_QWORD *)(v21 + 32) = v15;
      *(_QWORD *)(v21 + 40) = v15;
      v22 = v117;
      *(_QWORD *)(v21 + 48) = v16;
      *(_QWORD *)(v21 + 56) = v22;
      *(_BYTE *)(v21 + 64) = v17;
      *(_BYTE *)(v21 + 65) = v116;
      *(_QWORD *)(v21 + 72) = v18;
      v14 += 5;
      --v12;
    }
    while (v12);
    v11 = v108;
    swift_bridgeObjectRelease();
    v10 = v106;
  }
  if (*(_QWORD *)(v13 + 16))
  {
    sub_1BC9C576C();
    v23 = sub_1BCAB660C();
  }
  else
  {
    v23 = MEMORY[0x1E0DEE9E0];
  }
  v118 = *(double *)&v23;
  v24 = swift_bridgeObjectRetain();
  sub_1BC9C57D0(v24, 1, &v118);
  swift_bridgeObjectRelease();
  v25 = *(_QWORD *)&v118;
  v26 = *(_QWORD *)(v11 + 16);
  v113 = *(_QWORD *)&v118;
  if (v26)
  {
    swift_bridgeObjectRetain();
    v27 = (_QWORD *)(v11 + 64);
    v28 = MEMORY[0x1E0DEE9D8];
    do
    {
      if (*((_BYTE *)v27 - 7) == 1)
      {
        v117 = *((_OWORD *)v27 - 2);
        v32 = *(v27 - 2);
        v33 = *((_BYTE *)v27 - 8);
        v34 = *v27;
        swift_bridgeObjectRetain();
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v118 = *(double *)&v28;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_1BC9BACDC(0, *(_QWORD *)(v28 + 16) + 1, 1);
          v28 = *(_QWORD *)&v118;
        }
        v30 = *(_QWORD *)(v28 + 16);
        v29 = *(_QWORD *)(v28 + 24);
        if (v30 >= v29 >> 1)
        {
          sub_1BC9BACDC(v29 > 1, v30 + 1, 1);
          v28 = *(_QWORD *)&v118;
        }
        *(_QWORD *)(v28 + 16) = v30 + 1;
        v31 = v28 + 40 * v30;
        *(_OWORD *)(v31 + 32) = v117;
        *(_QWORD *)(v31 + 48) = v32;
        *(_BYTE *)(v31 + 56) = v33;
        *(_BYTE *)(v31 + 57) = 1;
        *(_QWORD *)(v31 + 64) = v34;
      }
      v27 += 5;
      --v26;
    }
    while (v26);
    swift_bridgeObjectRelease();
    v10 = v106;
    v25 = v113;
  }
  else
  {
    v28 = MEMORY[0x1E0DEE9D8];
  }
  v95 = *(_QWORD *)(v28 + 16);
  swift_release();
  v36 = v115;
  v37 = *((_QWORD *)v115 + 4);
  v38 = *((_QWORD *)v115 + 5);
  __swift_project_boxed_opaque_existential_1((_QWORD *)v115 + 1, v37);
  v39 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(v38 + 8) + 8))(*v36, v37);
  v40 = *(_QWORD *)(v39 + 16);
  if (!v40)
  {
    swift_bridgeObjectRelease();
    swift_release();
    return MEMORY[0x1E0DEE9D8];
  }
  swift_bridgeObjectRetain();
  v41 = 0;
  *(_QWORD *)&v117 = MEMORY[0x1E0DEE9D8];
  v104 = MEMORY[0x1E0DEE9B8] + 8;
  *(_QWORD *)&v42 = 136446210;
  v103 = v42;
  v43 = v105;
  v97 = v39;
  v96 = v40;
  while (1)
  {
    if (!*(_QWORD *)(v25 + 16) || (v44 = sub_1BC9A2E20(*(_QWORD *)(v39 + 8 * v41 + 32)), (v45 & 1) == 0))
    {
      sub_1BCAB54D8();
      v58 = sub_1BCAB54FC();
      v59 = sub_1BCAB61B0();
      if (os_log_type_enabled(v58, v59))
      {
        v60 = swift_slowAlloc();
        v61 = swift_slowAlloc();
        v118 = *(double *)&v61;
        *(_DWORD *)v60 = v103;
        v122 = type metadata accessor for TimeBasedDistributionChartModel();
        sub_1BC9C5BCC();
        v62 = sub_1BCAB5F28();
        *(_QWORD *)(v60 + 4) = sub_1BC99BD4C(v62, v63, (uint64_t *)&v118);
        v25 = v113;
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1BC989000, v58, v59, "[%{public}s] Expected to have bucket for each component range.", (uint8_t *)v60, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1BCCFBF5C](v61, -1, -1);
        MEMORY[0x1BCCFBF5C](v60, -1, -1);
      }

      (*(void (**)(char *, uint64_t))(v114 + 8))(v10, v43);
      goto LABEL_24;
    }
    v46 = *(_QWORD *)(v25 + 56) + 40 * v44;
    v107 = *(_QWORD *)v46;
    v47 = *(double *)(v46 + 16);
    v48 = *(unsigned __int8 *)(v46 + 24);
    v49 = *(unsigned __int8 *)(v46 + 25);
    v50 = *(_QWORD *)(v46 + 32);
    v51 = type metadata accessor for TimeBasedDistributionChartModel();
    v52 = &v115[*(int *)(v51 + 28)];
    v53 = *((_QWORD *)v52 + 3);
    v54 = *((_QWORD *)v52 + 4);
    __swift_project_boxed_opaque_existential_1(v52, v53);
    v118 = v47;
    v119 = v48;
    v120 = v49;
    v121 = v50;
    v55 = *(void (**)(double *, uint64_t, uint64_t))(v54 + 8);
    v116 = v50;
    swift_bridgeObjectRetain();
    v55(&v118, v53, v54);
    v56 = v48;
    if ((v48 & 1) == 0 && v49)
    {
      v57 = (char *)&v115[*(int *)(v51 + 24)];
      if (v57[*(int *)(type metadata accessor for TimeBasedDistributionChartDesign() + 100)] == 1
        && sub_1BCAB5F4C() >= 4)
      {
        if (!v41)
        {
LABEL_32:
          v56 = 2;
          goto LABEL_39;
        }
        v56 = 2;
        if (v95 > 1 || v41 == *(_QWORD *)(v97 + 16) - 1)
          goto LABEL_39;
      }
      else if (v95 > 1)
      {
        goto LABEL_32;
      }
      v56 = 3;
    }
LABEL_39:
    v108 = v56;
    if ((_DWORD)v48)
      v64 = 0.0;
    else
      v64 = v47;
    swift_bridgeObjectRetain();
    sub_1BCAB4D04();
    v65 = v101;
    sub_1BCAB4CEC();
    KeyPath = swift_getKeyPath();
    MEMORY[0x1E0C80A78](KeyPath);
    *(&v95 - 2) = v67;
    swift_getKeyPath();
    v68 = 8 * v56;
    v69 = *(_QWORD *)((char *)&unk_1BCABFE38 + v68);
    v70 = v115;
    v71 = (char *)&v115[*(int *)(v51 + 24)];
    v72 = type metadata accessor for TimeBasedDistributionChartDesign();
    v118 = *(double *)&v71[*(int *)(v72 + 4 * v69)];
    sub_1BC9C5C20();
    swift_retain();
    sub_1BCAB4CC8();
    v73 = swift_getKeyPath();
    MEMORY[0x1E0C80A78](v73);
    *(&v95 - 2) = v74;
    swift_getKeyPath();
    v118 = *(double *)&v70[*(int *)(v51 + 24) + *(int *)(v72 + 4 * *(_QWORD *)((char *)&unk_1BCABFE58 + v68))];
    sub_1BC9C5D0C();
    swift_retain();
    sub_1BCAB4CC8();
    v75 = v108;
    swift_bridgeObjectRelease();
    v76 = 44;
    if (v75 < 2)
      v76 = 48;
    v77 = *(_QWORD *)&v70[*(int *)(v51 + 24) + *(int *)(v72 + v76)];
    v78 = v110;
    *(_BYTE *)v110 = v75;
    v78[1] = v64;
    v79 = v100;
    v80 = (char *)v78 + *(int *)(v100 + 24);
    (*(void (**)(_BYTE *, char *, uint64_t))(v111 + 32))(v80, v65, v112);
    *(_QWORD *)((char *)v78 + *(int *)(v79 + 28)) = v77;
    v81 = qword_1EF477C38;
    swift_bridgeObjectRetain();
    swift_retain();
    if (v81 != -1)
      swift_once();
    v82 = objc_msgSend((id)qword_1EF486D50, sel_shortStandaloneWeekdaySymbols);
    v40 = v96;
    if (!v82)
      goto LABEL_59;
    v83 = v82;
    v84 = sub_1BCAB6018();

    if ((v107 & 0x8000000000000000) != 0)
      break;
    if (v107 >= *(_QWORD *)(v84 + 16))
      goto LABEL_58;
    v85 = v84 + 16 * v107;
    v86 = *(_QWORD *)(v85 + 32);
    v87 = *(_QWORD *)(v85 + 40);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v88 = v99;
    v89 = v109;
    (*(void (**)(uint64_t, _BYTE *, uint64_t))(v111 + 16))(v109 + *(int *)(v99 + 28), v80, v112);
    *(_BYTE *)v89 = v75;
    *(double *)(v89 + 8) = v64;
    *(_QWORD *)(v89 + 16) = v86;
    *(_QWORD *)(v89 + 24) = v87;
    *(_QWORD *)(v89 + *(int *)(v88 + 32)) = v77;
    swift_retain();
    swift_bridgeObjectRelease();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
    {
      v43 = v105;
      v10 = v106;
      v25 = v113;
      v39 = v97;
      v90 = v117;
    }
    else
    {
      v90 = sub_1BC9D9F04(0, *(_QWORD *)(v117 + 16) + 1, 1, v117);
      v43 = v105;
      v10 = v106;
      v25 = v113;
      v39 = v97;
    }
    v92 = *(_QWORD *)(v90 + 16);
    v91 = *(_QWORD *)(v90 + 24);
    if (v92 >= v91 >> 1)
      v90 = sub_1BC9D9F04(v91 > 1, v92 + 1, 1, v90);
    *(_QWORD *)(v90 + 16) = v92 + 1;
    v93 = (*(unsigned __int8 *)(v98 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v98 + 80);
    *(_QWORD *)&v117 = v90;
    sub_1BC9AE330(v109, v90 + v93 + *(_QWORD *)(v98 + 72) * v92, type metadata accessor for TimeBasedDistributionChartPoint.DayOfWeek);
    sub_1BC997208((uint64_t)v110, type metadata accessor for TimeBasedDistributionChartPoint.Skeleton);
LABEL_24:
    if (v40 == ++v41)
    {
      swift_release();
      swift_bridgeObjectRelease_n();
      return v117;
    }
  }
  __break(1u);
LABEL_58:
  __break(1u);
LABEL_59:
  __break(1u);
  result = swift_unexpectedError();
  __break(1u);
  return result;
}

uint64_t TimeBasedDistributionChartModel.generateDayOfWeekChartPoints(for:)(uint64_t a1)
{
  unsigned __int8 *v1;

  return sub_1BC9C3170(a1, v1);
}

uint64_t sub_1BC9C3C24(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  sub_1BC9C5E04(0, a4);
  return sub_1BCAB5ED4() & 1;
}

uint64_t TimeBasedDistributionChartModel.componentRangeLowerBoundOrder()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[4];
  v2 = v0[5];
  __swift_project_boxed_opaque_existential_1(v0 + 1, v1);
  return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(v2 + 8) + 8))(*(unsigned __int8 *)v0, v1);
}

uint64_t TimeBasedDistributionChartModel.determineYAxisRange(chartPoints:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t result;
  uint64_t v30;
  uint64_t v31;
  double v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  double v37;
  uint8_t *v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43[3];
  uint64_t v44;
  uint64_t v45;

  v2 = v1;
  v4 = type metadata accessor for TimeBasedDistributionChartModel();
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v38 - v8;
  v10 = sub_1BCAB5514();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43[0] = a1;
  swift_getKeyPath();
  sub_1BC9C423C(0, &qword_1EF4784E8, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
  sub_1BC9C4198();
  v14 = sub_1BCAB5FB8();
  swift_release();
  v15 = *(_QWORD *)(v14 + 16);
  if (v15)
  {
    sub_1BC9C2428(v14 + 40 * v15 - 8, (uint64_t)&v40);
  }
  else
  {
    v42 = 0;
    v40 = 0u;
    v41 = 0u;
  }
  swift_bridgeObjectRelease();
  if (*((_QWORD *)&v41 + 1))
  {
    sub_1BC9C42A4(&v40, (uint64_t)v43);
    v16 = v44;
    v17 = v45;
    __swift_project_boxed_opaque_existential_1(v43, v44);
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v17 + 8))(&v40, v16, v17);
    if (v40 >= 2u)
    {
      v30 = v44;
      v31 = v45;
      if (v40 == 2)
      {
        __swift_project_boxed_opaque_existential_1(v43, v44);
        v20 = (*(double (**)(uint64_t, uint64_t))(v31 + 16))(v30, v31);
        v21 = v2 + *(int *)(v4 + 24);
        v22 = *(int *)(type metadata accessor for TimeBasedDistributionChartDesign() + 96);
      }
      else
      {
        __swift_project_boxed_opaque_existential_1(v43, v44);
        v20 = (*(double (**)(uint64_t, uint64_t))(v31 + 16))(v30, v31);
        v21 = v2 + *(int *)(v4 + 24);
        v22 = *(int *)(type metadata accessor for TimeBasedDistributionChartDesign() + 92);
      }
    }
    else
    {
      v18 = v44;
      v19 = v45;
      __swift_project_boxed_opaque_existential_1(v43, v44);
      v20 = (*(double (**)(uint64_t, uint64_t))(v19 + 16))(v18, v19);
      v21 = v2 + *(int *)(v4 + 24);
      v22 = *(int *)(type metadata accessor for TimeBasedDistributionChartDesign() + 88);
    }
    v32 = v20 * *(double *)(v21 + v22);
    v33 = (_QWORD *)(v2 + 8);
    v34 = *(_QWORD *)(v2 + 32);
    v35 = *(_QWORD *)(v2 + 40);
    __swift_project_boxed_opaque_existential_1(v33, v34);
    *(double *)&result = COERCE_DOUBLE((*(uint64_t (**)(uint64_t, uint64_t))(v35 + 24))(v34, v35));
    if ((v36 & 1) != 0)
    {
      v37 = v32;
      if (v32 <= 0.0)
      {
LABEL_18:
        *(double *)&result = COERCE_DOUBLE(__swift_destroy_boxed_opaque_existential_1((uint64_t)v43));
        return result;
      }
    }
    else
    {
      v37 = *(double *)&result;
      if (v32 > *(double *)&result)
        v37 = v32;
    }
    if (v37 >= 0.0)
      goto LABEL_18;
    __break(1u);
  }
  else
  {
    sub_1BC9C41F0((uint64_t)&v40);
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v2 + *(int *)(v4 + 32), v10);
    sub_1BC9964B8(v2, (uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for TimeBasedDistributionChartModel);
    v23 = sub_1BCAB54FC();
    v24 = sub_1BCAB61B0();
    if (os_log_type_enabled(v23, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc();
      v26 = swift_slowAlloc();
      v43[0] = v26;
      v39 = v10;
      *(_DWORD *)v25 = 136446210;
      v38 = v25 + 4;
      sub_1BC9964B8((uint64_t)v9, (uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for TimeBasedDistributionChartModel);
      v27 = sub_1BCAB5F28();
      *(_QWORD *)&v40 = sub_1BC99BD4C(v27, v28, v43);
      sub_1BCAB63A8();
      swift_bridgeObjectRelease();
      sub_1BC997208((uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for TimeBasedDistributionChartModel);
      _os_log_impl(&dword_1BC989000, v23, v24, "[%{public}s] Unable to determine max, returning basic scale", v25, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BCCFBF5C](v26, -1, -1);
      MEMORY[0x1BCCFBF5C](v25, -1, -1);

      *(double *)&result = COERCE_DOUBLE((*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v39));
    }
    else
    {
      sub_1BC997208((uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for TimeBasedDistributionChartModel);

      *(double *)&result = COERCE_DOUBLE((*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10));
    }
  }
  return result;
}

void sub_1BC9C4150(_QWORD *a1@<X0>, double *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a1[3];
  v4 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v3);
  *a2 = (*(double (**)(uint64_t, uint64_t))(v4 + 16))(v3, v4);
}

unint64_t sub_1BC9C4198()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EF4784F0;
  if (!qword_1EF4784F0)
  {
    sub_1BC9C423C(255, &qword_1EF4784E8, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
    result = MEMORY[0x1BCCFBE84](MEMORY[0x1E0DEAF38], v1);
    atomic_store(result, (unint64_t *)&qword_1EF4784F0);
  }
  return result;
}

uint64_t sub_1BC9C41F0(uint64_t a1)
{
  uint64_t v2;

  sub_1BC9C423C(0, &qword_1EF4784F8, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_1BC9C423C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_1BC9A7F58(255, &qword_1EF4782D0);
    v7 = a3(a1, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t sub_1BC9C42A4(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t initializeBufferWithCopyOfBuffer for TimeBasedDistributionChartModel(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  __int128 v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  void (*v25)(char *, char *, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  void (*v31)(uint64_t, uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *(_QWORD *)a1 = *a2;
    v16 = v15 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    v7 = *((_OWORD *)a2 + 2);
    *(_OWORD *)(a1 + 32) = v7;
    (**(void (***)(uint64_t, uint64_t))(v7 - 8))(a1 + 8, (uint64_t)(a2 + 1));
    v38 = a3;
    v39 = a2;
    v8 = *(int *)(a3 + 24);
    v9 = (char *)(a1 + v8);
    v10 = (char *)a2 + v8;
    v11 = sub_1BCAB5754();
    v12 = *(_QWORD *)(v11 - 8);
    v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
    if (v13(v10, 1, v11))
    {
      sub_1BC9C4630();
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
    v17 = (int *)type metadata accessor for TimeBasedDistributionChartDesign();
    v18 = v17[5];
    v19 = &v9[v18];
    v20 = &v10[v18];
    v40 = a1;
    if (v13(&v10[v18], 1, v11))
    {
      sub_1BC9C4630();
      memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v19, v20, v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v19, 0, 1, v11);
    }
    *(_QWORD *)&v9[v17[6]] = *(_QWORD *)&v10[v17[6]];
    *(_QWORD *)&v9[v17[7]] = *(_QWORD *)&v10[v17[7]];
    *(_QWORD *)&v9[v17[8]] = *(_QWORD *)&v10[v17[8]];
    *(_QWORD *)&v9[v17[9]] = *(_QWORD *)&v10[v17[9]];
    v22 = v17[10];
    v23 = &v9[v22];
    v37 = &v10[v22];
    v24 = sub_1BCAB5958();
    v25 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 16);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    v25(v23, v37, v24);
    *(_QWORD *)&v9[v17[11]] = *(_QWORD *)&v10[v17[11]];
    *(_QWORD *)&v9[v17[12]] = *(_QWORD *)&v10[v17[12]];
    *(_QWORD *)&v9[v17[13]] = *(_QWORD *)&v10[v17[13]];
    *(_QWORD *)&v9[v17[14]] = *(_QWORD *)&v10[v17[14]];
    *(_QWORD *)&v9[v17[15]] = *(_QWORD *)&v10[v17[15]];
    *(_QWORD *)&v9[v17[16]] = *(_QWORD *)&v10[v17[16]];
    *(_QWORD *)&v9[v17[17]] = *(_QWORD *)&v10[v17[17]];
    *(_QWORD *)&v9[v17[18]] = *(_QWORD *)&v10[v17[18]];
    *(_QWORD *)&v9[v17[19]] = *(_QWORD *)&v10[v17[19]];
    *(_QWORD *)&v9[v17[20]] = *(_QWORD *)&v10[v17[20]];
    *(_QWORD *)&v9[v17[21]] = *(_QWORD *)&v10[v17[21]];
    *(_QWORD *)&v9[v17[22]] = *(_QWORD *)&v10[v17[22]];
    *(_QWORD *)&v9[v17[23]] = *(_QWORD *)&v10[v17[23]];
    *(_QWORD *)&v9[v17[24]] = *(_QWORD *)&v10[v17[24]];
    v9[v17[25]] = v10[v17[25]];
    v26 = *(int *)(v38 + 28);
    v16 = v40;
    v27 = v40 + v26;
    v28 = (uint64_t)v39 + v26;
    v29 = *(_OWORD *)((char *)v39 + v26 + 24);
    *(_OWORD *)(v40 + v26 + 24) = v29;
    v30 = v29;
    v31 = **(void (***)(uint64_t, uint64_t, uint64_t))(v29 - 8);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    v31(v27, v28, v30);
    v32 = *(int *)(v38 + 32);
    v33 = v40 + v32;
    v34 = (uint64_t)v39 + v32;
    v35 = sub_1BCAB5514();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 16))(v33, v34, v35);
  }
  return v16;
}

void sub_1BC9C4630()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EF478060)
  {
    sub_1BCAB5754();
    v0 = sub_1BCAB6384();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EF478060);
  }
}

uint64_t destroy for TimeBasedDistributionChartModel(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  __swift_destroy_boxed_opaque_existential_1(a1 + 8);
  v4 = a1 + a2[6];
  v5 = sub_1BCAB5754();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  if (!v7(v4, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  v8 = type metadata accessor for TimeBasedDistributionChartDesign();
  v9 = v4 + *(int *)(v8 + 20);
  if (!v7(v9, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v9, v5);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  v10 = v4 + *(int *)(v8 + 40);
  v11 = sub_1BCAB5958();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(a1 + a2[7]);
  v12 = a1 + a2[8];
  v13 = sub_1BCAB5514();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12, v13);
}

uint64_t initializeWithCopy for TimeBasedDistributionChartModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(char *, uint64_t, uint64_t);
  uint64_t v13;
  int *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  void (*v22)(char *, char *, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v6 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 32) = v6;
  (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1 + 8, a2 + 8);
  v35 = a3;
  v36 = a2;
  v7 = *(int *)(a3 + 24);
  v37 = a1;
  v8 = (char *)(a1 + v7);
  v9 = (char *)(a2 + v7);
  v10 = sub_1BCAB5754();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  if (v12(v9, 1, v10))
  {
    sub_1BC9C4630();
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  v14 = (int *)type metadata accessor for TimeBasedDistributionChartDesign();
  v15 = v14[5];
  v16 = &v8[v15];
  v17 = &v9[v15];
  if (v12(&v9[v15], 1, v10))
  {
    sub_1BC9C4630();
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v16, v17, v10);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v16, 0, 1, v10);
  }
  *(_QWORD *)&v8[v14[6]] = *(_QWORD *)&v9[v14[6]];
  *(_QWORD *)&v8[v14[7]] = *(_QWORD *)&v9[v14[7]];
  *(_QWORD *)&v8[v14[8]] = *(_QWORD *)&v9[v14[8]];
  *(_QWORD *)&v8[v14[9]] = *(_QWORD *)&v9[v14[9]];
  v19 = v14[10];
  v20 = &v8[v19];
  v34 = &v9[v19];
  v21 = sub_1BCAB5958();
  v22 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 16);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  v22(v20, v34, v21);
  *(_QWORD *)&v8[v14[11]] = *(_QWORD *)&v9[v14[11]];
  *(_QWORD *)&v8[v14[12]] = *(_QWORD *)&v9[v14[12]];
  *(_QWORD *)&v8[v14[13]] = *(_QWORD *)&v9[v14[13]];
  *(_QWORD *)&v8[v14[14]] = *(_QWORD *)&v9[v14[14]];
  *(_QWORD *)&v8[v14[15]] = *(_QWORD *)&v9[v14[15]];
  *(_QWORD *)&v8[v14[16]] = *(_QWORD *)&v9[v14[16]];
  *(_QWORD *)&v8[v14[17]] = *(_QWORD *)&v9[v14[17]];
  *(_QWORD *)&v8[v14[18]] = *(_QWORD *)&v9[v14[18]];
  *(_QWORD *)&v8[v14[19]] = *(_QWORD *)&v9[v14[19]];
  *(_QWORD *)&v8[v14[20]] = *(_QWORD *)&v9[v14[20]];
  *(_QWORD *)&v8[v14[21]] = *(_QWORD *)&v9[v14[21]];
  *(_QWORD *)&v8[v14[22]] = *(_QWORD *)&v9[v14[22]];
  *(_QWORD *)&v8[v14[23]] = *(_QWORD *)&v9[v14[23]];
  *(_QWORD *)&v8[v14[24]] = *(_QWORD *)&v9[v14[24]];
  v8[v14[25]] = v9[v14[25]];
  v23 = *(int *)(v35 + 28);
  v24 = v37 + v23;
  v25 = v36 + v23;
  v26 = *(_OWORD *)(v36 + v23 + 24);
  *(_OWORD *)(v37 + v23 + 24) = v26;
  v27 = v26;
  v28 = **(void (***)(uint64_t, uint64_t, uint64_t))(v26 - 8);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  v28(v24, v25, v27);
  v29 = *(int *)(v35 + 32);
  v30 = v37 + v29;
  v31 = v36 + v29;
  v32 = sub_1BCAB5514();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 16))(v30, v31, v32);
  return v37;
}

uint64_t assignWithCopy for TimeBasedDistributionChartModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(char *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 8), (uint64_t *)(a2 + 8));
  v31 = a3;
  v32 = a1;
  v6 = *(int *)(a3 + 24);
  v7 = (char *)(a1 + v6);
  v8 = (char *)(a2 + v6);
  v9 = sub_1BCAB5754();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    sub_1BC9C4630();
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v7, v8, v9);
LABEL_7:
  v15 = (int *)type metadata accessor for TimeBasedDistributionChartDesign();
  v16 = v15[5];
  v17 = &v7[v16];
  v18 = &v8[v16];
  v19 = v11(&v7[v16], 1, v9);
  v20 = v11(v18, 1, v9);
  if (!v19)
  {
    if (!v20)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v17, v18, v9);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v17, v9);
    goto LABEL_12;
  }
  if (v20)
  {
LABEL_12:
    sub_1BC9C4630();
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v17, v18, v9);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v17, 0, 1, v9);
LABEL_13:
  *(_QWORD *)&v7[v15[6]] = *(_QWORD *)&v8[v15[6]];
  swift_retain();
  swift_release();
  *(_QWORD *)&v7[v15[7]] = *(_QWORD *)&v8[v15[7]];
  swift_retain();
  swift_release();
  *(_QWORD *)&v7[v15[8]] = *(_QWORD *)&v8[v15[8]];
  swift_retain();
  swift_release();
  *(_QWORD *)&v7[v15[9]] = *(_QWORD *)&v8[v15[9]];
  swift_retain();
  swift_release();
  v22 = v15[10];
  v23 = &v7[v22];
  v24 = &v8[v22];
  v25 = sub_1BCAB5958();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 24))(v23, v24, v25);
  *(_QWORD *)&v7[v15[11]] = *(_QWORD *)&v8[v15[11]];
  swift_retain();
  swift_release();
  *(_QWORD *)&v7[v15[12]] = *(_QWORD *)&v8[v15[12]];
  swift_retain();
  swift_release();
  *(_QWORD *)&v7[v15[13]] = *(_QWORD *)&v8[v15[13]];
  swift_retain();
  swift_release();
  *(_QWORD *)&v7[v15[14]] = *(_QWORD *)&v8[v15[14]];
  swift_retain();
  swift_release();
  *(_QWORD *)&v7[v15[15]] = *(_QWORD *)&v8[v15[15]];
  swift_retain();
  swift_release();
  *(_QWORD *)&v7[v15[16]] = *(_QWORD *)&v8[v15[16]];
  swift_retain();
  swift_release();
  *(_QWORD *)&v7[v15[17]] = *(_QWORD *)&v8[v15[17]];
  *(_QWORD *)&v7[v15[18]] = *(_QWORD *)&v8[v15[18]];
  *(_QWORD *)&v7[v15[19]] = *(_QWORD *)&v8[v15[19]];
  *(_QWORD *)&v7[v15[20]] = *(_QWORD *)&v8[v15[20]];
  *(_QWORD *)&v7[v15[21]] = *(_QWORD *)&v8[v15[21]];
  *(_QWORD *)&v7[v15[22]] = *(_QWORD *)&v8[v15[22]];
  *(_QWORD *)&v7[v15[23]] = *(_QWORD *)&v8[v15[23]];
  *(_QWORD *)&v7[v15[24]] = *(_QWORD *)&v8[v15[24]];
  v7[v15[25]] = v8[v15[25]];
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(v32 + *(int *)(v31 + 28)), (uint64_t *)(a2 + *(int *)(v31 + 28)));
  v26 = *(int *)(v31 + 32);
  v27 = v32 + v26;
  v28 = a2 + v26;
  v29 = sub_1BCAB5514();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 24))(v27, v28, v29);
  return v32;
}

uint64_t initializeWithTake for TimeBasedDistributionChartModel(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int (*v10)(char *, uint64_t, uint64_t);
  uint64_t v11;
  int *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v5 = a3[6];
  v6 = (char *)(a1 + v5);
  v7 = (char *)(a2 + v5);
  v8 = sub_1BCAB5754();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48);
  if (v10(v7, 1, v8))
  {
    sub_1BC9C4630();
    memcpy(v6, v7, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v6, v7, v8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v6, 0, 1, v8);
  }
  v12 = (int *)type metadata accessor for TimeBasedDistributionChartDesign();
  v13 = v12[5];
  v14 = &v6[v13];
  v15 = &v7[v13];
  if (v10(&v7[v13], 1, v8))
  {
    sub_1BC9C4630();
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v14, v15, v8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v14, 0, 1, v8);
  }
  *(_QWORD *)&v6[v12[6]] = *(_QWORD *)&v7[v12[6]];
  *(_QWORD *)&v6[v12[7]] = *(_QWORD *)&v7[v12[7]];
  *(_QWORD *)&v6[v12[8]] = *(_QWORD *)&v7[v12[8]];
  *(_QWORD *)&v6[v12[9]] = *(_QWORD *)&v7[v12[9]];
  v17 = v12[10];
  v18 = &v6[v17];
  v19 = &v7[v17];
  v20 = sub_1BCAB5958();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v18, v19, v20);
  *(_QWORD *)&v6[v12[11]] = *(_QWORD *)&v7[v12[11]];
  *(_QWORD *)&v6[v12[12]] = *(_QWORD *)&v7[v12[12]];
  *(_QWORD *)&v6[v12[13]] = *(_QWORD *)&v7[v12[13]];
  *(_QWORD *)&v6[v12[14]] = *(_QWORD *)&v7[v12[14]];
  *(_QWORD *)&v6[v12[15]] = *(_QWORD *)&v7[v12[15]];
  *(_QWORD *)&v6[v12[16]] = *(_QWORD *)&v7[v12[16]];
  *(_QWORD *)&v6[v12[17]] = *(_QWORD *)&v7[v12[17]];
  *(_QWORD *)&v6[v12[18]] = *(_QWORD *)&v7[v12[18]];
  *(_QWORD *)&v6[v12[19]] = *(_QWORD *)&v7[v12[19]];
  *(_QWORD *)&v6[v12[20]] = *(_QWORD *)&v7[v12[20]];
  *(_QWORD *)&v6[v12[21]] = *(_QWORD *)&v7[v12[21]];
  *(_QWORD *)&v6[v12[22]] = *(_QWORD *)&v7[v12[22]];
  *(_QWORD *)&v6[v12[23]] = *(_QWORD *)&v7[v12[23]];
  *(_QWORD *)&v6[v12[24]] = *(_QWORD *)&v7[v12[24]];
  v6[v12[25]] = v7[v12[25]];
  v21 = a3[7];
  v22 = a3[8];
  v23 = a1 + v21;
  v24 = a2 + v21;
  v25 = *(_OWORD *)(v24 + 16);
  *(_OWORD *)v23 = *(_OWORD *)v24;
  *(_OWORD *)(v23 + 16) = v25;
  *(_QWORD *)(v23 + 32) = *(_QWORD *)(v24 + 32);
  v26 = a1 + v22;
  v27 = a2 + v22;
  v28 = sub_1BCAB5514();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 32))(v26, v27, v28);
  return a1;
}

uint64_t assignWithTake for TimeBasedDistributionChartModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(char *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  __swift_destroy_boxed_opaque_existential_1(a1 + 8);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v35 = a3;
  v36 = a2;
  v6 = *(int *)(a3 + 24);
  v7 = (char *)(a1 + v6);
  v8 = (char *)(a2 + v6);
  v9 = sub_1BCAB5754();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    sub_1BC9C4630();
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 40))(v7, v8, v9);
LABEL_7:
  v15 = (int *)type metadata accessor for TimeBasedDistributionChartDesign();
  v16 = v15[5];
  v17 = &v7[v16];
  v18 = &v8[v16];
  v19 = v11(&v7[v16], 1, v9);
  v20 = v11(v18, 1, v9);
  if (!v19)
  {
    if (!v20)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 40))(v17, v18, v9);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v17, v9);
    goto LABEL_12;
  }
  if (v20)
  {
LABEL_12:
    sub_1BC9C4630();
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v17, v18, v9);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v17, 0, 1, v9);
LABEL_13:
  *(_QWORD *)&v7[v15[6]] = *(_QWORD *)&v8[v15[6]];
  swift_release();
  *(_QWORD *)&v7[v15[7]] = *(_QWORD *)&v8[v15[7]];
  swift_release();
  *(_QWORD *)&v7[v15[8]] = *(_QWORD *)&v8[v15[8]];
  swift_release();
  *(_QWORD *)&v7[v15[9]] = *(_QWORD *)&v8[v15[9]];
  swift_release();
  v22 = v15[10];
  v23 = &v7[v22];
  v24 = &v8[v22];
  v25 = sub_1BCAB5958();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 40))(v23, v24, v25);
  *(_QWORD *)&v7[v15[11]] = *(_QWORD *)&v8[v15[11]];
  swift_release();
  *(_QWORD *)&v7[v15[12]] = *(_QWORD *)&v8[v15[12]];
  swift_release();
  *(_QWORD *)&v7[v15[13]] = *(_QWORD *)&v8[v15[13]];
  swift_release();
  *(_QWORD *)&v7[v15[14]] = *(_QWORD *)&v8[v15[14]];
  swift_release();
  *(_QWORD *)&v7[v15[15]] = *(_QWORD *)&v8[v15[15]];
  swift_release();
  *(_QWORD *)&v7[v15[16]] = *(_QWORD *)&v8[v15[16]];
  swift_release();
  *(_QWORD *)&v7[v15[17]] = *(_QWORD *)&v8[v15[17]];
  *(_QWORD *)&v7[v15[18]] = *(_QWORD *)&v8[v15[18]];
  *(_QWORD *)&v7[v15[19]] = *(_QWORD *)&v8[v15[19]];
  *(_QWORD *)&v7[v15[20]] = *(_QWORD *)&v8[v15[20]];
  *(_QWORD *)&v7[v15[21]] = *(_QWORD *)&v8[v15[21]];
  *(_QWORD *)&v7[v15[22]] = *(_QWORD *)&v8[v15[22]];
  *(_QWORD *)&v7[v15[23]] = *(_QWORD *)&v8[v15[23]];
  *(_QWORD *)&v7[v15[24]] = *(_QWORD *)&v8[v15[24]];
  v7[v15[25]] = v8[v15[25]];
  v26 = *(int *)(v35 + 28);
  v27 = a1 + v26;
  v28 = v36 + v26;
  __swift_destroy_boxed_opaque_existential_1(a1 + v26);
  v29 = *(_OWORD *)(v28 + 16);
  *(_OWORD *)v27 = *(_OWORD *)v28;
  *(_OWORD *)(v27 + 16) = v29;
  *(_QWORD *)(v27 + 32) = *(_QWORD *)(v28 + 32);
  v30 = *(int *)(v35 + 32);
  v31 = a1 + v30;
  v32 = v36 + v30;
  v33 = sub_1BCAB5514();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 40))(v31, v32, v33);
  return a1;
}

uint64_t getEnumTagSinglePayload for TimeBasedDistributionChartModel()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BC9C558C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 32);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for TimeBasedDistributionChartDesign();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 24);
    }
    else
    {
      v10 = sub_1BCAB5514();
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 32);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for TimeBasedDistributionChartModel()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BC9C5638(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 32) = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for TimeBasedDistributionChartDesign();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 24);
    }
    else
    {
      v10 = sub_1BCAB5514();
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 32);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

uint64_t sub_1BC9C56D4()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = type metadata accessor for TimeBasedDistributionChartDesign();
  if (v1 <= 0x3F)
  {
    result = sub_1BCAB5514();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

void sub_1BC9C576C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EF477F30)
  {
    v0 = sub_1BCAB6618();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EF477F30);
  }
}

void sub_1BC9C57D0(uint64_t a1, char a2, _QWORD *a3)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  _QWORD *v12;
  unint64_t v13;
  char v14;
  uint64_t v15;
  _BOOL8 v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  void *v21;
  id v22;
  char v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  char v33;
  uint64_t v34;
  _BOOL8 v35;
  uint64_t v36;
  char v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v5 = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRetain();
  v44 = v5;
  if (v5)
  {
    if (!*(_QWORD *)(a1 + 16))
    {
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }
    v7 = *(_QWORD *)(a1 + 32);
    v6 = *(_QWORD *)(a1 + 40);
    v8 = *(_QWORD *)(a1 + 48);
    v9 = *(_QWORD *)(a1 + 56);
    v10 = *(_BYTE *)(a1 + 64);
    v11 = *(_BYTE *)(a1 + 65);
    v45 = swift_bridgeObjectRetain();
    if (v45)
    {
      v42 = a1;
      v12 = (_QWORD *)*a3;
      v13 = sub_1BC9A2E20(v7);
      v15 = v12[2];
      v16 = (v14 & 1) == 0;
      v17 = __OFADD__(v15, v16);
      v18 = v15 + v16;
      if (v17)
      {
LABEL_27:
        __break(1u);
        goto LABEL_28;
      }
      LOBYTE(v19) = v14;
      if (v12[3] < v18)
      {
        sub_1BC9A4200(v18, a2 & 1);
        v13 = sub_1BC9A2E20(v7);
        if ((v19 & 1) == (v20 & 1))
          goto LABEL_9;
LABEL_7:
        v13 = sub_1BCAB6804();
        __break(1u);
      }
      if ((a2 & 1) == 0)
      {
        v23 = v11;
        v24 = v13;
        sub_1BC9A55E8();
        v13 = v24;
        v11 = v23;
        if ((v19 & 1) != 0)
        {
LABEL_10:
          v21 = (void *)swift_allocError();
          swift_willThrow();
          v22 = v21;
          sub_1BC9A7F58(0, (unint64_t *)&qword_1ED6C6F70);
          if ((swift_dynamicCast() & 1) == 0)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease_n();

            return;
          }
          goto LABEL_29;
        }
LABEL_13:
        v25 = (_QWORD *)*a3;
        *(_QWORD *)(*a3 + 8 * (v13 >> 6) + 64) |= 1 << v13;
        *(_QWORD *)(v25[6] + 8 * v13) = v7;
        v26 = v25[7] + 40 * v13;
        *(_QWORD *)v26 = v6;
        *(_QWORD *)(v26 + 8) = v8;
        *(_QWORD *)(v26 + 16) = v9;
        *(_BYTE *)(v26 + 24) = v10;
        *(_BYTE *)(v26 + 25) = v11;
        *(_QWORD *)(v26 + 32) = v45;
        v27 = v25[2];
        v17 = __OFADD__(v27, 1);
        v28 = v27 + 1;
        v29 = v42;
        if (v17)
        {
LABEL_28:
          __break(1u);
LABEL_29:
          sub_1BCAB64C8();
          sub_1BCAB5F70();
          sub_1BCAB657C();
          sub_1BCAB5F70();
          sub_1BCAB65C4();
          __break(1u);
          return;
        }
        v25[2] = v28;
        if (v44 != 1)
        {
          v19 = v42 + 120;
          v6 = 1;
          while (v6 < *(_QWORD *)(v29 + 16))
          {
            v7 = *(_QWORD *)(v19 - 40);
            v30 = *(_QWORD *)(v19 - 32);
            v9 = *(_QWORD *)(v19 - 24);
            v8 = *(_QWORD *)(v19 - 16);
            v10 = *(_BYTE *)(v19 - 8);
            v11 = *(_BYTE *)(v19 - 7);
            v45 = swift_bridgeObjectRetain();
            if (!v45)
              goto LABEL_24;
            v43 = v30;
            v31 = (_QWORD *)*a3;
            v32 = sub_1BC9A2E20(v7);
            v34 = v31[2];
            v35 = (v33 & 1) == 0;
            v17 = __OFADD__(v34, v35);
            v36 = v34 + v35;
            if (v17)
              goto LABEL_27;
            a2 = v33;
            if (v31[3] < v36)
            {
              sub_1BC9A4200(v36, 1);
              v32 = sub_1BC9A2E20(v7);
              if ((a2 & 1) != (v37 & 1))
                goto LABEL_7;
            }
            if ((a2 & 1) != 0)
              goto LABEL_10;
            v38 = (_QWORD *)*a3;
            *(_QWORD *)(*a3 + 8 * (v32 >> 6) + 64) |= 1 << v32;
            *(_QWORD *)(v38[6] + 8 * v32) = v7;
            v39 = v38[7] + 40 * v32;
            v29 = v42;
            *(_QWORD *)v39 = v43;
            *(_QWORD *)(v39 + 8) = v9;
            *(_QWORD *)(v39 + 16) = v8;
            *(_BYTE *)(v39 + 24) = v10;
            *(_BYTE *)(v39 + 25) = v11;
            *(_QWORD *)(v39 + 32) = v45;
            v40 = v38[2];
            v17 = __OFADD__(v40, 1);
            v41 = v40 + 1;
            if (v17)
              goto LABEL_28;
            ++v6;
            v38[2] = v41;
            v19 += 48;
            if (v44 == v6)
              goto LABEL_24;
          }
          goto LABEL_26;
        }
        goto LABEL_24;
      }
LABEL_9:
      if ((v19 & 1) != 0)
        goto LABEL_10;
      goto LABEL_13;
    }
  }
LABEL_24:
  swift_bridgeObjectRelease_n();
}

unint64_t sub_1BC9C5BCC()
{
  unint64_t result;

  result = qword_1EF4785A0;
  if (!qword_1EF4785A0)
  {
    type metadata accessor for TimeBasedDistributionChartModel();
    result = swift_getMetatypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1EF4785A0);
  }
  return result;
}

void sub_1BC9C5C04()
{
  sub_1BCAB4CB0();
  __break(1u);
}

unint64_t sub_1BC9C5C20()
{
  unint64_t result;

  result = qword_1EF4785A8;
  if (!qword_1EF4785A8)
  {
    result = MEMORY[0x1BCCFBE84](MEMORY[0x1E0CD8168], MEMORY[0x1E0CD8188]);
    atomic_store(result, (unint64_t *)&qword_1EF4785A8);
  }
  return result;
}

void sub_1BC9C5C64()
{
  sub_1BC9C5C20();
  sub_1BCAB4D34();
  __break(1u);
}

uint64_t sub_1BC9C5C88()
{
  return 8;
}

uint64_t sub_1BC9C5C94()
{
  return swift_release();
}

uint64_t sub_1BC9C5C9C(_QWORD *a1, _QWORD *a2)
{
  *a2 = *a1;
  return swift_retain();
}

uint64_t sub_1BC9C5CA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1BC9C3C24(a1, a2, a3, &qword_1EF4785C0) & 1;
}

uint64_t sub_1BC9C5CD0(uint64_t a1, uint64_t a2)
{
  return keypath_hashTm(a1, a2, &qword_1EF4785C0);
}

_QWORD *sub_1BC9C5CE4(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

void sub_1BC9C5CF0()
{
  sub_1BCAB4CA4();
  __break(1u);
}

unint64_t sub_1BC9C5D0C()
{
  unint64_t result;

  result = qword_1EF4785B0;
  if (!qword_1EF4785B0)
  {
    result = MEMORY[0x1BCCFBE84](MEMORY[0x1E0CD8138], MEMORY[0x1E0CD8148]);
    atomic_store(result, (unint64_t *)&qword_1EF4785B0);
  }
  return result;
}

void sub_1BC9C5D50()
{
  sub_1BC9C5D0C();
  sub_1BCAB4D34();
  __break(1u);
}

uint64_t sub_1BC9C5D74()
{
  return 8;
}

uint64_t sub_1BC9C5D80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1BC9C3C24(a1, a2, a3, &qword_1EF4785B8) & 1;
}

uint64_t sub_1BC9C5DA8(uint64_t a1, uint64_t a2)
{
  return keypath_hashTm(a1, a2, &qword_1EF4785B8);
}

uint64_t keypath_hashTm(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  sub_1BC9C5E04(0, a3);
  return sub_1BCAB5E98();
}

void sub_1BC9C5E04(uint64_t a1, unint64_t *a2)
{
  unint64_t v3;
  uint64_t v4;

  if (!*a2)
  {
    sub_1BCAB4CBC();
    v3 = sub_1BCAB68C4();
    if (!v4)
      atomic_store(v3, a2);
  }
}

id ActivityRingSwiftUICircleView.makeUIView(context:)()
{
  return objc_msgSend(objc_allocWithZone((Class)type metadata accessor for ActivityRingCircleView()), sel_init);
}

void ActivityRingSwiftUICircleView.updateUIView(_:context:)(void *a1)
{
  void **v1;
  void *v3;
  id v4;
  void *v5;
  char **v6;
  id v7;
  id v8;

  v3 = *v1;
  v4 = sub_1BCA19598();
  objc_msgSend(v4, sel_setActivitySummary_animated_, v3, 1);

  LODWORD(v4) = objc_msgSend(v3, sel_isPaused);
  v5 = (void *)objc_opt_self();
  v6 = &selRef_clearColor;
  if (!(_DWORD)v4)
    v6 = &selRef_blackColor;
  v7 = objc_msgSend(v5, *v6);
  objc_msgSend(a1, sel_setBackgroundColor_, v7);

  sub_1BC9C5F90();
  v8 = (id)sub_1BCAB5EE0();
  swift_bridgeObjectRelease();
  objc_msgSend(a1, sel_setAccessibilityIdentifier_, v8);

}

uint64_t sub_1BC9C5F90()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t inited;
  void *v5;
  id v6;
  void *v7;
  id v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  void *v18;
  id v19;
  uint64_t v20;

  v2 = *(void **)v0;
  v1 = *(_QWORD *)(v0 + 8);
  v3 = *(_QWORD *)(v0 + 16);
  sub_1BC9C65BC();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1BCABFE80;
  *(_QWORD *)(inited + 32) = v1;
  *(_QWORD *)(inited + 40) = v3;
  *(_OWORD *)(inited + 48) = xmmword_1BCABFE90;
  v5 = (void *)objc_opt_self();
  swift_bridgeObjectRetain();
  v6 = objc_msgSend(v5, sel_sharedBehavior);
  if (!v6)
  {
    __break(1u);
    goto LABEL_19;
  }
  v7 = v6;
  v8 = objc_msgSend(v6, sel_features);

  if (!v8)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v9 = objc_msgSend(v8, sel_pauseRings);

  if (v9 && objc_msgSend(v2, sel_isPaused))
  {
    inited = (uint64_t)sub_1BC9DA254((_QWORD *)1, 3, 1, (_QWORD *)inited);
    *(_QWORD *)(inited + 16) = 3;
    *(_OWORD *)(inited + 64) = xmmword_1BCABFEA0;
  }
  v10 = *(_QWORD *)(inited + 16);
  if (v10)
  {
    swift_bridgeObjectRetain_n();
    v11 = (uint64_t *)(inited + 40);
    v12 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    do
    {
      v14 = *v11;
      if (*v11)
      {
        v15 = *(v11 - 1);
        swift_bridgeObjectRetain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v12 = sub_1BC9DA134(0, v12[2] + 1, 1, v12);
        v17 = v12[2];
        v16 = v12[3];
        if (v17 >= v16 >> 1)
          v12 = sub_1BC9DA134((_QWORD *)(v16 > 1), v17 + 1, 1, v12);
        v12[2] = v17 + 1;
        v13 = &v12[2 * v17];
        v13[4] = v15;
        v13[5] = v14;
      }
      v11 += 2;
      --v10;
    }
    while (v10);
    swift_bridgeObjectRelease_n();
  }
  v18 = (void *)sub_1BCAB600C();
  swift_bridgeObjectRelease();
  v19 = (id)HKUIJoinStringsForAutomationIdentifier();

  if (!v19)
LABEL_20:
    __break(1u);
  v20 = sub_1BCAB5F04();
  swift_bridgeObjectRelease();

  return v20;
}

double ActivityRingSwiftUICircleView.sizeThatFits(_:uiView:context:)(int a1, int a2, int a3, int a4, id a5)
{
  double result;

  objc_msgSend(a5, sel_sizeThatFits_, 0.0, 0.0);
  return result;
}

id sub_1BC9C6244()
{
  return objc_msgSend(objc_allocWithZone((Class)type metadata accessor for ActivityRingCircleView()), sel_init);
}

double sub_1BC9C6278(int a1, int a2, int a3, int a4, id a5)
{
  double result;

  objc_msgSend(a5, sel_sizeThatFits_, 0.0, 0.0);
  return result;
}

uint64_t sub_1BC9C62BC()
{
  sub_1BC9C6578();
  return sub_1BCAB5AFC();
}

uint64_t sub_1BC9C630C()
{
  sub_1BC9C6578();
  return sub_1BCAB5AA8();
}

void sub_1BC9C635C()
{
  sub_1BC9C6578();
  sub_1BCAB5AF0();
  __break(1u);
}

unint64_t sub_1BC9C6384()
{
  unint64_t result;

  result = qword_1ED6C49C8;
  if (!qword_1ED6C49C8)
  {
    result = MEMORY[0x1BCCFBE84](&protocol conformance descriptor for ActivityRingSwiftUICircleView, &type metadata for ActivityRingSwiftUICircleView);
    atomic_store(result, (unint64_t *)&qword_1ED6C49C8);
  }
  return result;
}

uint64_t sub_1BC9C63C8()
{
  return MEMORY[0x1E0CE0788];
}

uint64_t destroy for ActivityRingSwiftUICircleView(id *a1)
{

  return swift_bridgeObjectRelease();
}

_QWORD *_s19HealthVisualization29ActivityRingSwiftUICircleViewVwCP_0(_QWORD *a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  id v5;

  v3 = *(void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v4;
  a1[2] = *(_QWORD *)(a2 + 16);
  v5 = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ActivityRingSwiftUICircleView(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for ActivityRingSwiftUICircleView(uint64_t a1, _QWORD *a2)
{
  void *v4;
  uint64_t v5;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *a2;

  v5 = a2[2];
  *(_QWORD *)(a1 + 8) = a2[1];
  *(_QWORD *)(a1 + 16) = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for DiagramPointAnnotations(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DiagramPointAnnotations(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ActivityRingSwiftUICircleView()
{
  return &type metadata for ActivityRingSwiftUICircleView;
}

unint64_t sub_1BC9C6578()
{
  unint64_t result;

  result = qword_1ED6C49D0;
  if (!qword_1ED6C49D0)
  {
    result = MEMORY[0x1BCCFBE84](&protocol conformance descriptor for ActivityRingSwiftUICircleView, &type metadata for ActivityRingSwiftUICircleView);
    atomic_store(result, (unint64_t *)&qword_1ED6C49D0);
  }
  return result;
}

void sub_1BC9C65BC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED6C4FA8)
  {
    sub_1BC9C6610();
    v0 = sub_1BCAB67A4();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED6C4FA8);
  }
}

void sub_1BC9C6610()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED6C2C80)
  {
    v0 = sub_1BCAB6384();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED6C2C80);
  }
}

uint64_t ECGAlgorithmVersionChangePublisher.CacheData.algorithmVersionRawValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

HealthVisualization::ECGAlgorithmVersionChangePublisher::CacheData __swiftcall ECGAlgorithmVersionChangePublisher.CacheData.init(algorithmVersionRawValue:)(HealthVisualization::ECGAlgorithmVersionChangePublisher::CacheData algorithmVersionRawValue)
{
  uint64_t v1;

  *(_QWORD *)v1 = algorithmVersionRawValue.algorithmVersionRawValue.value;
  *(_BYTE *)(v1 + 8) = algorithmVersionRawValue.algorithmVersionRawValue.is_nil;
  return algorithmVersionRawValue;
}

unint64_t sub_1BC9C6680()
{
  return 0xD000000000000018;
}

uint64_t sub_1BC9C669C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1BC9C7D64(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_1BC9C66C4()
{
  sub_1BC9C680C();
  return sub_1BCAB68D0();
}

uint64_t sub_1BC9C66EC()
{
  sub_1BC9C680C();
  return sub_1BCAB68DC();
}

uint64_t ECGAlgorithmVersionChangePublisher.CacheData.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;

  sub_1BC9C697C(0, &qword_1EF4785C8, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED170]);
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v6 = (char *)&v8 - v5;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BC9C680C();
  sub_1BCAB68B8();
  sub_1BCAB672C();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t sub_1BC9C680C()
{
  unint64_t result;

  result = qword_1EF4785D0;
  if (!qword_1EF4785D0)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCAC0168, &type metadata for ECGAlgorithmVersionChangePublisher.CacheData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF4785D0);
  }
  return result;
}

uint64_t ECGAlgorithmVersionChangePublisher.CacheData.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v14;

  sub_1BC9C697C(0, &qword_1EF4785D8, MEMORY[0x1E0DED048]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v14 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BC9C680C();
  sub_1BCAB68AC();
  if (!v2)
  {
    v10 = sub_1BCAB669C();
    v12 = v11;
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    *(_QWORD *)a2 = v10;
    *(_BYTE *)(a2 + 8) = v12 & 1;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

void sub_1BC9C697C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_1BC9C680C();
    v7 = a3(a1, &type metadata for ECGAlgorithmVersionChangePublisher.CacheData.CodingKeys, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t sub_1BC9C69D8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return ECGAlgorithmVersionChangePublisher.CacheData.init(from:)(a1, a2);
}

uint64_t sub_1BC9C69EC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;

  sub_1BC9C697C(0, &qword_1EF4785C8, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED170]);
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v6 = (char *)&v8 - v5;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BC9C680C();
  sub_1BCAB68B8();
  sub_1BCAB672C();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_1BC9C6AE4()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[2];

  v1 = *v0;
  sub_1BC9C6CEC();
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v6 = (char *)v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BC9C6DE0();
  v8 = v7;
  v15[0] = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15[1] = v0[4];
  v11 = swift_allocObject();
  swift_weakInit();
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = v11;
  *(_QWORD *)(v12 + 24) = v1;
  sub_1BC9C6D64();
  sub_1BC996948(&qword_1ED6C4560, (uint64_t (*)(uint64_t))sub_1BC9C6D64, MEMORY[0x1E0C95D90]);
  swift_retain();
  sub_1BCAB58C8();
  swift_release();
  swift_release();
  sub_1BCAB5034();
  sub_1BC996948(&qword_1ED6C4550, (uint64_t (*)(uint64_t))sub_1BC9C6CEC, MEMORY[0x1E0C95AD0]);
  sub_1BCAB58BC();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  sub_1BC996948(&qword_1ED6C4540, (uint64_t (*)(uint64_t))sub_1BC9C6DE0, MEMORY[0x1E0C95950]);
  v13 = sub_1BCAB58A4();
  (*(void (**)(char *, uint64_t))(v15[0] + 8))(v10, v8);
  return v13;
}

void sub_1BC9C6CEC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED6C4558)
  {
    sub_1BC9C6D64();
    sub_1BC996948(&qword_1ED6C4560, (uint64_t (*)(uint64_t))sub_1BC9C6D64, MEMORY[0x1E0C95D90]);
    v0 = sub_1BCAB57FC();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED6C4558);
  }
}

void sub_1BC9C6D64()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED6C4568)
  {
    sub_1BC998AB0(255, &qword_1ED6C4668, (uint64_t (*)(uint64_t))type metadata accessor for HKElectrocardiogramAlgorithmVersion, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    v0 = sub_1BCAB5814();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED6C4568);
  }
}

void sub_1BC9C6DE0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED6C4548)
  {
    sub_1BC9C6CEC();
    sub_1BCAB5034();
    sub_1BC996948(&qword_1ED6C4550, (uint64_t (*)(uint64_t))sub_1BC9C6CEC, MEMORY[0x1E0C95AD0]);
    v0 = sub_1BCAB57F0();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED6C4548);
  }
}

uint64_t sub_1BC9C6E74()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1BC9C6E98(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  uint64_t v11;
  int v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t Strong;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  char v35;

  v2 = sub_1BCAB5514();
  v31 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v27 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *a1;
  v6 = *((unsigned __int8 *)a1 + 8);
  swift_beginAccess();
  if (swift_weakLoadStrong() && (sub_1BCAB5070(), swift_release(), v35 != 1))
  {
    v7 = v33;
    if (v6)
      v11 = 0;
    else
      v11 = v5;
    v30 = v11;
    v12 = (v33 == v11) & ~v6;
    v9 = v34;
    if (v34)
      v10 = v6;
    else
      v10 = v12;
  }
  else
  {
    v7 = 0;
    if (v6)
      v8 = 0;
    else
      v8 = v5;
    v30 = v8;
    v9 = 1;
    v10 = v6;
  }
  sub_1BCAB54B4();
  v13 = sub_1BCAB54FC();
  v14 = sub_1BCAB61BC();
  if (os_log_type_enabled(v13, v14))
  {
    v15 = swift_slowAlloc();
    v29 = v10;
    v16 = v15;
    v27 = swift_slowAlloc();
    v32 = v27;
    *(_DWORD *)v16 = 136446978;
    v28 = v2;
    v17 = sub_1BCAB68E8();
    v33 = sub_1BC99BD4C(v17, v18, &v32);
    sub_1BCAB63A8();
    swift_bridgeObjectRelease();
    *(_WORD *)(v16 + 12) = 2080;
    v33 = v7;
    v34 = v9;
    sub_1BC9C7E0C(0, (unint64_t *)&qword_1ED6C6190);
    v19 = sub_1BCAB5F28();
    v33 = sub_1BC99BD4C(v19, v20, &v32);
    sub_1BCAB63A8();
    swift_bridgeObjectRelease();
    *(_WORD *)(v16 + 22) = 2080;
    v33 = v30;
    v34 = v6;
    v21 = sub_1BCAB5F28();
    v33 = sub_1BC99BD4C(v21, v22, &v32);
    sub_1BCAB63A8();
    swift_bridgeObjectRelease();
    *(_WORD *)(v16 + 32) = 1024;
    LODWORD(v33) = v29 ^ 1;
    sub_1BCAB63A8();
    _os_log_impl(&dword_1BC989000, v13, v14, "[%{public}s] Generation algorithm version: %s, current algorithm version: %s, shouldRegenerate: %{BOOL}d", (uint8_t *)v16, 0x26u);
    v23 = v27;
    swift_arrayDestroy();
    MEMORY[0x1BCCFBF5C](v23, -1, -1);
    v24 = v16;
    v10 = v29;
    MEMORY[0x1BCCFBF5C](v24, -1, -1);

    (*(void (**)(char *, uint64_t))(v31 + 8))(v4, v28);
    if ((v10 & 1) != 0)
      return v10 ^ 1u;
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v31 + 8))(v4, v2);
    if ((v10 & 1) != 0)
      return v10 ^ 1u;
  }
  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  if (Strong)
  {
    MEMORY[0x1E0C80A78](Strong);
    *(&v27 - 2) = v30;
    *((_BYTE *)&v27 - 8) = v6;
    *((_BYTE *)&v27 - 7) = 0;
    sub_1BCAB507C();
    swift_release();
  }
  return v10 ^ 1u;
}

uint64_t sub_1BC9C7258()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1BC9C727C(uint64_t *a1)
{
  return sub_1BC9C6E98(a1);
}

void sub_1BC9C7284()
{
  id v0;
  id v1;
  uint64_t inited;
  id v3;
  id v4;

  v0 = objc_msgSend((id)objc_opt_self(), sel_electrocardiogramType);
  v1 = objc_msgSend((id)objc_opt_self(), sel_sampleTypeChangeWithSampleType_dateInterval_hasUnfrozenSeries_, v0, 0, 0);
  sub_1BC998AB0(0, &qword_1ED6C47C8, (uint64_t (*)(uint64_t))sub_1BC9BD0E8, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1BCABE680;
  *(_QWORD *)(inited + 32) = v0;
  *(_QWORD *)(inited + 40) = v1;
  v3 = v0;
  v4 = v1;
  sub_1BCA928F4(inited);
  sub_1BCAB5010();

}

uint64_t sub_1BC9C736C()
{
  return sub_1BCAB5070();
}

uint64_t sub_1BC9C738C()
{
  return sub_1BCAB507C();
}

uint64_t (*sub_1BC9C73DC(uint64_t a1))()
{
  uint64_t v1;

  *(_QWORD *)(a1 + 16) = *(_QWORD *)(v1 + 24);
  sub_1BCAB5070();
  return sub_1BC9C7414;
}

uint64_t sub_1BC9C7414()
{
  return sub_1BCAB507C();
}

_QWORD *ECGAlgorithmVersionChangePublisher.__allocating_init(currentCacheData:healthStore:)(uint64_t *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  int v14;
  void *v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t);
  id v18;
  id v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD v24[2];
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  char v31;
  char v32;

  v29 = a2;
  v3 = sub_1BCAB50DC();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1BCAB6234();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1BCAB6228();
  MEMORY[0x1E0C80A78](v11);
  v12 = sub_1BCAB5E5C();
  v13 = MEMORY[0x1E0C80A78](v12);
  v28 = *a1;
  v14 = *((unsigned __int8 *)a1 + 8);
  v26 = *((unsigned __int8 *)a1 + 9);
  v27 = v14;
  v15 = (void *)MEMORY[0x1BCCFB9A4](v13);
  if (!v15)
  {
    v24[1] = sub_1BC9A649C(0, (unint64_t *)&qword_1ED6C7268);
    sub_1BCAB5E50();
    v30 = MEMORY[0x1E0DEE9D8];
    v25 = v3;
    v16 = v4;
    v17 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF810];
    sub_1BC996948(&qword_1ED6C6E80, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF810], MEMORY[0x1E0DEF828]);
    sub_1BC998AB0(0, &qword_1ED6C6E20, v17, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
    sub_1BC9C7790();
    v4 = v16;
    v3 = v25;
    sub_1BCAB63E4();
    (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(v10, *MEMORY[0x1E0DEF8D0], v7);
    v15 = (void *)sub_1BCAB624C();
  }
  v18 = v29;
  v19 = v15;
  sub_1BCAB50D0();
  sub_1BC996948(&qword_1ED6C36A0, (uint64_t (*)(uint64_t))MEMORY[0x1E0D2A5A0], MEMORY[0x1E0D2A598]);
  v20 = sub_1BCAB58A4();
  type metadata accessor for ECGAlgorithmVersionChangePublisher();
  v21 = (_QWORD *)swift_allocObject();
  sub_1BC9C7954();
  swift_allocObject();
  v21[2] = sub_1BCAB5850();
  v30 = v28;
  v31 = v27;
  v32 = v26;
  sub_1BC9C79BC();
  swift_allocObject();
  v22 = sub_1BCAB50A0();

  v21[3] = v22;
  v21[4] = v20;
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  return v21;
}

unint64_t sub_1BC9C7790()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1ED6C6E28;
  if (!qword_1ED6C6E28)
  {
    sub_1BC998AB0(255, &qword_1ED6C6E20, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF810], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
    result = MEMORY[0x1BCCFBE84](MEMORY[0x1E0DEAF38], v1);
    atomic_store(result, (unint64_t *)&qword_1ED6C6E28);
  }
  return result;
}

_QWORD *ECGAlgorithmVersionChangePublisher.__allocating_init(currentCacheData:algorithmVersionPublisher:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;

  v3 = (_QWORD *)swift_allocObject();
  sub_1BC9C7954();
  swift_allocObject();
  v3[2] = sub_1BCAB5850();
  sub_1BC9C79BC();
  swift_allocObject();
  v3[3] = sub_1BCAB50A0();
  v3[4] = a2;
  return v3;
}

uint64_t type metadata accessor for ECGAlgorithmVersionChangePublisher()
{
  return objc_opt_self();
}

_QWORD *ECGAlgorithmVersionChangePublisher.init(currentCacheData:algorithmVersionPublisher:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  sub_1BC9C7954();
  swift_allocObject();
  v2[2] = sub_1BCAB5850();
  sub_1BC9C79BC();
  swift_allocObject();
  v2[3] = sub_1BCAB50A0();
  v2[4] = a2;
  return v2;
}

void sub_1BC9C7954()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED6C6DD8)
  {
    v0 = sub_1BCAB5844();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED6C6DD8);
  }
}

void sub_1BC9C79BC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED6C3668)
  {
    sub_1BC9C7E0C(255, &qword_1ED6C42D8);
    v0 = sub_1BCAB5088();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED6C3668);
  }
}

uint64_t ECGAlgorithmVersionChangePublisher.deinit()
{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_release();
  return v0;
}

uint64_t ECGAlgorithmVersionChangePublisher.__deallocating_deinit()
{
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t sub_1BC9C7A80()
{
  return sub_1BC9C6AE4();
}

uint64_t sub_1BC9C7AA0@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  uint64_t v3;
  char v4;
  char v5;

  result = sub_1BCAB5070();
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 9) = v5;
  return result;
}

uint64_t sub_1BC9C7AEC()
{
  return sub_1BCAB507C();
}

uint64_t method lookup function for ECGAlgorithmVersionChangePublisher()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ECGAlgorithmVersionChangePublisher.publisher.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

uint64_t dispatch thunk of ECGAlgorithmVersionChangePublisher.currentCacheData.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t dispatch thunk of ECGAlgorithmVersionChangePublisher.currentCacheData.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t dispatch thunk of ECGAlgorithmVersionChangePublisher.currentCacheData.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of ECGAlgorithmVersionChangePublisher.__allocating_init(currentCacheData:algorithmVersionPublisher:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 136))();
}

uint64_t __swift_memcpy9_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for DiagramConfiguration.ValueFormatter(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for ECGAlgorithmVersionChangePublisher.CacheData(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 9) = v3;
  return result;
}

ValueMetadata *type metadata accessor for ECGAlgorithmVersionChangePublisher.CacheData()
{
  return &type metadata for ECGAlgorithmVersionChangePublisher.CacheData;
}

uint64_t storeEnumTagSinglePayload for ECGAlgorithmVersionChangePublisher.CacheData.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1BC9C7C30 + 4 * byte_1BCABFFC0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1BC9C7C50 + 4 * byte_1BCABFFC5[v4]))();
}

_BYTE *sub_1BC9C7C30(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1BC9C7C50(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1BC9C7C58(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1BC9C7C60(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1BC9C7C68(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1BC9C7C70(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for ECGAlgorithmVersionChangePublisher.CacheData.CodingKeys()
{
  return &type metadata for ECGAlgorithmVersionChangePublisher.CacheData.CodingKeys;
}

unint64_t sub_1BC9C7C90()
{
  unint64_t result;

  result = qword_1EF4785E0;
  if (!qword_1EF4785E0)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCAC0140, &type metadata for ECGAlgorithmVersionChangePublisher.CacheData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF4785E0);
  }
  return result;
}

unint64_t sub_1BC9C7CD8()
{
  unint64_t result;

  result = qword_1EF4785E8;
  if (!qword_1EF4785E8)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCAC00B0, &type metadata for ECGAlgorithmVersionChangePublisher.CacheData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF4785E8);
  }
  return result;
}

unint64_t sub_1BC9C7D20()
{
  unint64_t result;

  result = qword_1EF4785F0;
  if (!qword_1EF4785F0)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCAC00D8, &type metadata for ECGAlgorithmVersionChangePublisher.CacheData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF4785F0);
  }
  return result;
}

uint64_t sub_1BC9C7D64(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;

  if (a1 == 0xD000000000000018 && a2 == 0x80000001BCACF5A0)
  {
    swift_bridgeObjectRelease();
    v2 = 0;
  }
  else
  {
    v3 = sub_1BCAB67C8();
    swift_bridgeObjectRelease();
    v2 = v3 ^ 1;
  }
  return v2 & 1;
}

uint64_t sub_1BC9C7DE8(uint64_t result)
{
  uint64_t v1;
  char v2;
  char v3;

  v2 = *(_BYTE *)(v1 + 24);
  v3 = *(_BYTE *)(v1 + 25);
  *(_QWORD *)result = *(_QWORD *)(v1 + 16);
  *(_BYTE *)(result + 8) = v2;
  *(_BYTE *)(result + 9) = v3;
  return result;
}

void sub_1BC9C7E0C(uint64_t a1, unint64_t *a2)
{
  unint64_t v3;
  uint64_t v4;

  if (!*a2)
  {
    v3 = sub_1BCAB6384();
    if (!v4)
      atomic_store(v3, a2);
  }
}

CGFloat DiagramImageView.DiagramTransformer.toScreenY(_:)(CGFloat a1)
{
  uint64_t v1;
  __int128 v2;
  CGAffineTransform v4;
  CGPoint v5;

  v5.y = a1;
  v2 = *(_OWORD *)(v1 + 24);
  *(_OWORD *)&v4.a = *(_OWORD *)(v1 + 8);
  *(_OWORD *)&v4.c = v2;
  *(_OWORD *)&v4.tx = *(_OWORD *)(v1 + 40);
  v5.x = 0.0;
  return CGPointApplyAffineTransform(v5, &v4).y;
}

__C::CGRect __swiftcall DiagramImageView.DiagramTransformer.toScreen(_:)(__C::CGRect a1)
{
  uint64_t v1;
  __int128 v2;
  CGAffineTransform v3;

  v2 = *(_OWORD *)(v1 + 24);
  *(_OWORD *)&v3.a = *(_OWORD *)(v1 + 8);
  *(_OWORD *)&v3.c = v2;
  *(_OWORD *)&v3.tx = *(_OWORD *)(v1 + 40);
  return (__C::CGRect)CGRectApplyAffineTransform((CGRect)a1, &v3);
}

CGPoint __swiftcall DiagramImageView.DiagramTransformer.toScreen(_:)(CGPoint a1)
{
  uint64_t v1;
  __int128 v2;
  double x;
  double y;
  CGPoint v5;
  CGPoint result;
  CGAffineTransform v7;

  v2 = *(_OWORD *)(v1 + 24);
  *(_OWORD *)&v7.a = *(_OWORD *)(v1 + 8);
  *(_OWORD *)&v7.c = v2;
  *(_OWORD *)&v7.tx = *(_OWORD *)(v1 + 40);
  v5 = CGPointApplyAffineTransform(a1, &v7);
  y = v5.y;
  x = v5.x;
  result.y = y;
  result.x = x;
  return result;
}

uint64_t sub_1BC9C7F00()
{
  uint64_t v0;
  uint64_t v1;

  v1 = v0 + OBJC_IVAR____TtC19HealthVisualization16DiagramImageView_delegate;
  swift_beginAccess();
  return MEMORY[0x1BCCFC004](v1);
}

uint64_t sub_1BC9C7F4C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  v4 = v2 + OBJC_IVAR____TtC19HealthVisualization16DiagramImageView_delegate;
  swift_beginAccess();
  *(_QWORD *)(v4 + 8) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

void (*sub_1BC9C7FB4(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v4 = OBJC_IVAR____TtC19HealthVisualization16DiagramImageView_delegate;
  v3[5] = v1;
  v3[6] = v4;
  v5 = v1 + v4;
  swift_beginAccess();
  v6 = MEMORY[0x1BCCFC004](v5);
  v7 = *(_QWORD *)(v5 + 8);
  v3[3] = v6;
  v3[4] = v7;
  return sub_1BC9C8028;
}

void sub_1BC9C8028(uint64_t a1, char a2)
{
  void *v3;

  v3 = *(void **)a1;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 40) + *(_QWORD *)(*(_QWORD *)a1 + 48) + 8) = *(_QWORD *)(*(_QWORD *)a1 + 32);
  swift_unknownObjectWeakAssign();
  if ((a2 & 1) != 0)
  {
    swift_unknownObjectRelease();
    swift_endAccess();
  }
  else
  {
    swift_endAccess();
    swift_unknownObjectRelease();
  }
  free(v3);
}

id sub_1BC9C809C@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *a1 + OBJC_IVAR____TtC19HealthVisualization16DiagramImageView_lastUsedTransformer;
  swift_beginAccess();
  v4 = *(void **)v3;
  v5 = *(_QWORD *)(v3 + 8);
  v6 = *(_QWORD *)(v3 + 16);
  v7 = *(_QWORD *)(v3 + 24);
  v8 = *(_QWORD *)(v3 + 32);
  v9 = *(_QWORD *)(v3 + 40);
  v10 = *(_QWORD *)(v3 + 48);
  *a2 = *(_QWORD *)v3;
  a2[1] = v5;
  a2[2] = v6;
  a2[3] = v7;
  a2[4] = v8;
  a2[5] = v9;
  a2[6] = v10;
  return sub_1BC9C8250(v4);
}

void sub_1BC9C8108(uint64_t a1, _QWORD *a2)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;

  v2 = *(void **)a1;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_QWORD *)(a1 + 32);
  v7 = *(_QWORD *)(a1 + 40);
  v8 = *(_QWORD *)(a1 + 48);
  v9 = *a2 + OBJC_IVAR____TtC19HealthVisualization16DiagramImageView_lastUsedTransformer;
  swift_beginAccess();
  v10 = *(void **)v9;
  *(_QWORD *)v9 = v2;
  *(_QWORD *)(v9 + 8) = v3;
  *(_QWORD *)(v9 + 16) = v4;
  *(_QWORD *)(v9 + 24) = v5;
  *(_QWORD *)(v9 + 32) = v6;
  *(_QWORD *)(v9 + 40) = v7;
  *(_QWORD *)(v9 + 48) = v8;
  sub_1BC9C8250(v2);
  sub_1BC9C82F8(v10);
}

id sub_1BC9C81E8@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = v1 + OBJC_IVAR____TtC19HealthVisualization16DiagramImageView_lastUsedTransformer;
  swift_beginAccess();
  v4 = *(void **)v3;
  v5 = *(_QWORD *)(v3 + 8);
  v6 = *(_QWORD *)(v3 + 16);
  v7 = *(_QWORD *)(v3 + 24);
  v8 = *(_QWORD *)(v3 + 32);
  v9 = *(_QWORD *)(v3 + 40);
  v10 = *(_QWORD *)(v3 + 48);
  *a1 = *(_QWORD *)v3;
  a1[1] = v5;
  a1[2] = v6;
  a1[3] = v7;
  a1[4] = v8;
  a1[5] = v9;
  a1[6] = v10;
  return sub_1BC9C8250(v4);
}

id sub_1BC9C8250(id result)
{
  if (result != (id)1)
    return result;
  return result;
}

__n128 sub_1BC9C8260(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  __n128 result;
  __int128 v8;
  __int128 v9;

  v2 = *a1;
  v3 = a1[3];
  v8 = *((_OWORD *)a1 + 2);
  v9 = *(_OWORD *)(a1 + 1);
  v4 = a1[6];
  v5 = v1 + OBJC_IVAR____TtC19HealthVisualization16DiagramImageView_lastUsedTransformer;
  swift_beginAccess();
  v6 = *(void **)v5;
  *(_QWORD *)v5 = v2;
  *(_OWORD *)(v5 + 8) = v9;
  *(_QWORD *)(v5 + 24) = v3;
  *(_OWORD *)(v5 + 32) = v8;
  *(_QWORD *)(v5 + 48) = v4;
  sub_1BC9C82F8(v6);
  return result;
}

void sub_1BC9C82F8(id a1)
{
  if (a1 != (id)1)

}

uint64_t (*sub_1BC9C8308())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

__n128 sub_1BC9C834C@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  char v4;
  __n128 result;
  __int128 v6;

  v3 = v1 + OBJC_IVAR____TtC19HealthVisualization16DiagramImageView_lastUsedModelSpace;
  swift_beginAccess();
  v4 = *(_BYTE *)(v3 + 32);
  result = *(__n128 *)v3;
  v6 = *(_OWORD *)(v3 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v3;
  *(_OWORD *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 32) = v4;
  return result;
}

uint64_t sub_1BC9C83A0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + OBJC_IVAR____TtC19HealthVisualization16DiagramImageView_lastUsedModelSpace;
  swift_beginAccess();
  return sub_1BC9C83F0(a1, v3);
}

uint64_t sub_1BC9C83F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1BC9C8434();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_1BC9C8434()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED6C71D0)
  {
    type metadata accessor for CGRect(255);
    v0 = sub_1BCAB6384();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED6C71D0);
  }
}

uint64_t (*sub_1BC9C8488())()
{
  swift_beginAccess();
  return j__swift_endAccess;
}

uint64_t type metadata accessor for DiagramImageView()
{
  return objc_opt_self();
}

id sub_1BC9C8530(void *a1, uint64_t a2, SEL *a3)
{
  objc_super v5;

  v5.receiver = a1;
  v5.super_class = (Class)type metadata accessor for DiagramImageView();
  return objc_msgSendSuper2(&v5, *a3);
}

void sub_1BC9C8580(void *a1, double a2, double a3, double a4, double a5, uint64_t a6, const char **a7, SEL *a8)
{
  const char *v14;
  id v15;
  double v16;
  double v17;
  objc_super v18;

  v18.receiver = a1;
  v18.super_class = (Class)type metadata accessor for DiagramImageView();
  v14 = *a7;
  v15 = v18.receiver;
  objc_msgSendSuper2(&v18, v14, a2, a3, a4, a5);
  objc_msgSend(v15, *a8, v18.receiver, v18.super_class);
  sub_1BC9C8A3C(v16, v17);

}

id DiagramImageView.__allocating_init(frame:)(double a1, double a2, double a3, double a4)
{
  objc_class *v4;

  return objc_msgSend(objc_allocWithZone(v4), sel_initWithFrame_, a1, a2, a3, a4);
}

id DiagramImageView.init(frame:)(double a1, double a2, double a3, double a4)
{
  char *v4;
  char *v9;
  char *v10;
  id v11;
  double v12;
  double v13;
  uint64_t v14;
  id v15;
  void *v16;
  __int128 v18;
  __int128 v19;
  objc_super v20;

  *(_QWORD *)&v4[OBJC_IVAR____TtC19HealthVisualization16DiagramImageView_imageRenderer] = 0;
  *(_QWORD *)&v4[OBJC_IVAR____TtC19HealthVisualization16DiagramImageView_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  v9 = &v4[OBJC_IVAR____TtC19HealthVisualization16DiagramImageView_lastUsedTransformer];
  *(_QWORD *)v9 = 1;
  *(_OWORD *)(v9 + 40) = 0u;
  *(_OWORD *)(v9 + 24) = 0u;
  *(_OWORD *)(v9 + 8) = 0u;
  v10 = &v4[OBJC_IVAR____TtC19HealthVisualization16DiagramImageView_lastUsedModelSpace];
  *(_OWORD *)v10 = 0u;
  *((_OWORD *)v10 + 1) = 0u;
  v10[32] = 1;
  v20.receiver = v4;
  v20.super_class = (Class)type metadata accessor for DiagramImageView();
  v11 = objc_msgSendSuper2(&v20, sel_initWithFrame_, a1, a2, a3, a4);
  objc_msgSend(v11, sel_frame);
  sub_1BC9C8A3C(v12, v13);
  objc_msgSend(v11, sel_setIsAccessibilityElement_, 1);
  v18 = 0u;
  v19 = 0u;
  v14 = qword_1ED6C7070;
  v15 = v11;
  if (v14 != -1)
    swift_once();
  sub_1BC9A1984(0xD000000000000025, 0x80000001BCACF5C0, 0, (uint64_t)&v18, 0, 0);
  sub_1BC9A10A0((uint64_t)&v18);
  v16 = (void *)sub_1BCAB5EE0();
  swift_bridgeObjectRelease();
  objc_msgSend(v15, sel_setAccessibilityLabel_, v16, v18, v19);

  return v15;
}

id DiagramImageView.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v3;
}

id DiagramImageView.init(coder:)(void *a1)
{
  char *v1;
  char *v3;
  char *v4;
  id v5;
  id v6;
  id v7;
  double v8;
  double v9;
  objc_super v11;

  *(_QWORD *)&v1[OBJC_IVAR____TtC19HealthVisualization16DiagramImageView_imageRenderer] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC19HealthVisualization16DiagramImageView_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  v3 = &v1[OBJC_IVAR____TtC19HealthVisualization16DiagramImageView_lastUsedTransformer];
  *(_QWORD *)v3 = 1;
  *(_OWORD *)(v3 + 40) = 0u;
  *(_OWORD *)(v3 + 24) = 0u;
  *(_OWORD *)(v3 + 8) = 0u;
  v4 = &v1[OBJC_IVAR____TtC19HealthVisualization16DiagramImageView_lastUsedModelSpace];
  *(_OWORD *)v4 = 0u;
  *((_OWORD *)v4 + 1) = 0u;
  v4[32] = 1;
  v11.receiver = v1;
  v11.super_class = (Class)type metadata accessor for DiagramImageView();
  v5 = objc_msgSendSuper2(&v11, sel_initWithCoder_, a1);
  v6 = v5;
  if (v5)
  {
    v7 = v5;
    objc_msgSend(v7, sel_frame);
    sub_1BC9C8A3C(v8, v9);

  }
  return v6;
}

char *DiagramImageView.__allocating_init(frame:delegate:)(double a1, double a2, double a3, double a4, uint64_t a5, uint64_t a6)
{
  objc_class *v6;
  char *v8;
  char *v9;

  v8 = (char *)objc_msgSend(objc_allocWithZone(v6), sel_initWithFrame_, a1, a2, a3, a4);
  v9 = &v8[OBJC_IVAR____TtC19HealthVisualization16DiagramImageView_delegate];
  swift_beginAccess();
  *((_QWORD *)v9 + 1) = a6;
  swift_unknownObjectWeakAssign();
  swift_unknownObjectRelease();
  return v8;
}

void sub_1BC9C8A3C(double a1, double a2)
{
  uint64_t v2;
  uint64_t v5;
  void *v6;
  id v7;
  id v8;
  double v9;
  double v10;
  double v11;
  double v12;
  id v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t ObjectType;

  v5 = OBJC_IVAR____TtC19HealthVisualization16DiagramImageView_imageRenderer;
  v6 = *(void **)(v2 + OBJC_IVAR____TtC19HealthVisualization16DiagramImageView_imageRenderer);
  if (!v6)
    goto LABEL_6;
  v7 = v6;
  v8 = objc_msgSend(v7, sel_format);
  objc_msgSend(v8, sel_bounds);
  v10 = v9;
  v12 = v11;

  if (v10 != a1 || v12 != a2)
  {
LABEL_6:
    v14 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3828]), sel_initWithSize_, a1, a2);
    v15 = *(void **)(v2 + v5);
    *(_QWORD *)(v2 + v5) = v14;

    v16 = v2 + OBJC_IVAR____TtC19HealthVisualization16DiagramImageView_delegate;
    swift_beginAccess();
    if (MEMORY[0x1BCCFC004](v16))
    {
      v17 = *(_QWORD *)(v16 + 8);
      ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t, uint64_t, uint64_t, double, double))(v17 + 16))(v2, ObjectType, v17, a1, a2);
      swift_unknownObjectRelease();
    }
  }
}

uint64_t sub_1BC9C8B60(void *a1)
{
  char *v1;
  id v3;
  id v4;
  _BOOL4 v5;
  id v6;
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v14;
  uint64_t result;
  char *v16;
  void *v17;
  uint64_t v18;
  uint64_t ObjectType;
  id v20;
  double v21;
  double v22;
  double v23;
  double v24;

  v3 = objc_msgSend(v1, sel_traitCollection);
  v4 = objc_msgSend(v3, sel_userInterfaceStyle);

  if (a1)
    v5 = v4 != objc_msgSend(a1, sel_userInterfaceStyle);
  else
    v5 = 1;
  v6 = objc_msgSend(v1, sel_traitCollection);
  v7 = objc_msgSend(v6, sel_preferredContentSizeCategory);

  if (!a1)
  {

LABEL_13:
    v16 = &v1[OBJC_IVAR____TtC19HealthVisualization16DiagramImageView_delegate];
    swift_beginAccess();
    result = MEMORY[0x1BCCFC004](v16);
    if (result)
    {
      v17 = *(void **)&v1[OBJC_IVAR____TtC19HealthVisualization16DiagramImageView_imageRenderer];
      if (v17)
      {
        v18 = *((_QWORD *)v16 + 1);
        ObjectType = swift_getObjectType();
        v20 = objc_msgSend(v17, sel_format);
        objc_msgSend(v20, sel_bounds);
        v22 = v21;
        v24 = v23;

        (*(void (**)(char *, uint64_t, uint64_t, double, double))(v18 + 16))(v1, ObjectType, v18, v22, v24);
        return swift_unknownObjectRelease();
      }
      else
      {
        __break(1u);
      }
    }
    return result;
  }
  v8 = objc_msgSend(a1, sel_preferredContentSizeCategory);
  v9 = sub_1BCAB5F04();
  v11 = v10;
  if (v9 == sub_1BCAB5F04() && v11 == v12)
    v14 = 0;
  else
    v14 = sub_1BCAB67C8() ^ 1;

  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  if (((v5 | v14) & 1) != 0)
    goto LABEL_13;
  return result;
}

void sub_1BC9C8DBC(uint64_t a1, uint64_t a2, uint64_t a3, double a4, double a5, double a6, double a7)
{
  char *v7;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  void *v23;
  id v24;
  id v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  id v32;
  id v33;
  char *v34;
  char *v35;
  void *v36;
  uint64_t v37;
  void (*v38)(uint64_t, void *);
  void *v39;
  uint64_t (*v40)();
  uint64_t v41;
  uint64_t v42;
  void (*v43)(char *, void **, _BYTE *, uint64_t, uint64_t);
  uint64_t v45;
  void *v47;
  void *v49;
  uint64_t ObjectType;
  void *aBlock;
  uint64_t v53;
  void (*v54)(uint64_t, void *);
  void *v55;
  uint64_t (*v56)();
  uint64_t v57;
  uint64_t v58;
  _QWORD v59[5];
  _BYTE v60[40];
  _BYTE v61[48];
  CGRect v62;
  CGRect v63;

  sub_1BC9C83F0(a1, (uint64_t)v59);
  v11 = *(double *)v59;
  v12 = *(double *)&v59[1];
  v13 = *(double *)&v59[2];
  v14 = *(double *)&v59[3];
  objc_msgSend(v7, sel_bounds);
  v16 = v15;
  v18 = v17;
  v20 = v19;
  v22 = v21;
  sub_1BC9C83F0(a1, (uint64_t)v60);
  if ((v60[32] & 1) != 0)
  {
    v11 = v16;
    v12 = v18;
    v13 = v20;
    v14 = v22;
  }
  v63.origin.x = 0.0;
  v63.origin.y = 0.0;
  v63.size.width = 0.0;
  v63.size.height = 0.0;
  v62.origin.x = v16;
  v62.origin.y = v18;
  v62.size.width = v20;
  v62.size.height = v22;
  if (CGRectEqualToRect(v62, v63))
  {
    objc_msgSend(v7, sel_setImage_, 0);
    return;
  }
  v23 = (void *)objc_opt_self();
  v24 = objc_msgSend(v23, sel__currentTraitCollection);
  v25 = objc_msgSend(v7, sel_traitCollection);
  objc_msgSend(v23, sel__setCurrentTraitCollection_, v25);

  v26 = *(void **)&v7[OBJC_IVAR____TtC19HealthVisualization16DiagramImageView_imageRenderer];
  if (!v26)
    goto LABEL_11;
  v27 = (uint64_t)&v7[OBJC_IVAR____TtC19HealthVisualization16DiagramImageView_lastUsedModelSpace];
  swift_beginAccess();
  *(double *)v27 = v11;
  *(double *)(v27 + 8) = v12;
  *(double *)(v27 + 16) = v13;
  *(double *)(v27 + 24) = v14;
  *(_BYTE *)(v27 + 32) = 0;
  v28 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v29 = swift_allocObject();
  *(double *)(v29 + 16) = v11;
  *(double *)(v29 + 24) = v12;
  *(double *)(v29 + 32) = v13;
  *(double *)(v29 + 40) = v14;
  *(double *)(v29 + 48) = v16;
  *(double *)(v29 + 56) = v18;
  *(double *)(v29 + 64) = v20;
  *(double *)(v29 + 72) = v22;
  *(double *)(v29 + 80) = a4;
  *(double *)(v29 + 88) = a5;
  *(double *)(v29 + 96) = a6;
  *(double *)(v29 + 104) = a7;
  *(_QWORD *)(v29 + 112) = v28;
  *(_QWORD *)(v29 + 120) = a2;
  *(_QWORD *)(v29 + 128) = a3;
  v30 = swift_allocObject();
  *(_QWORD *)(v30 + 16) = sub_1BC9C9CEC;
  *(_QWORD *)(v30 + 24) = v29;
  v56 = sub_1BC9C9D40;
  v57 = v30;
  aBlock = (void *)MEMORY[0x1E0C809B0];
  v53 = 1107296256;
  v54 = sub_1BC9C94E0;
  v55 = &block_descriptor_0;
  v31 = _Block_copy(&aBlock);
  swift_retain();
  v32 = v26;
  swift_release();
  v33 = objc_msgSend(v32, sel_imageWithActions_, v31);
  _Block_release(v31);
  LOBYTE(v31) = swift_isEscapingClosureAtFileLocation();

  swift_release();
  swift_release();
  if ((v31 & 1) != 0)
  {
    __break(1u);
LABEL_11:
    __break(1u);
    return;
  }
  objc_msgSend(v7, sel_setImage_, v33);
  objc_msgSend(v23, sel__setCurrentTraitCollection_, v24);
  v34 = &v7[OBJC_IVAR____TtC19HealthVisualization16DiagramImageView_delegate];
  swift_beginAccess();
  if (MEMORY[0x1BCCFC004](v34))
  {
    v45 = *((_QWORD *)v34 + 1);
    ObjectType = swift_getObjectType();
    v35 = &v7[OBJC_IVAR____TtC19HealthVisualization16DiagramImageView_lastUsedTransformer];
    swift_beginAccess();
    v47 = v33;
    v49 = v24;
    v36 = *(void **)v35;
    v37 = *((_QWORD *)v35 + 1);
    v38 = (void (*)(uint64_t, void *))*((_QWORD *)v35 + 2);
    v39 = (void *)*((_QWORD *)v35 + 3);
    v40 = (uint64_t (*)())*((_QWORD *)v35 + 4);
    v41 = *((_QWORD *)v35 + 5);
    v42 = *((_QWORD *)v35 + 6);
    aBlock = v36;
    v53 = v37;
    v54 = v38;
    v55 = v39;
    v56 = v40;
    v57 = v41;
    v58 = v42;
    sub_1BC9C83F0(v27, (uint64_t)v61);
    v43 = *(void (**)(char *, void **, _BYTE *, uint64_t, uint64_t))(v45 + 8);
    sub_1BC9C8250(v36);
    v43(v7, &aBlock, v61, ObjectType, v45);

    swift_unknownObjectRelease();
    sub_1BC9C82F8(v36);
  }
  else
  {

  }
}

void sub_1BC9C91FC(void *a1, uint64_t a2, void (*a3)(id, id *, double, double), CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, double a8, double a9, double a10, double a11, double a12, double a13)
{
  uint64_t v23;
  id v24;
  double v25;
  double v26;
  CGFloat v27;
  double v28;
  CGFloat v29;
  double v30;
  CGFloat v31;
  id v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  void *v41;
  id v42;
  id v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v23 = a2 + 16;
  v24 = objc_msgSend(a1, sel_CGContext);
  v25 = UIEdgeInsetsInsetRect(a8, a9, a10, a11, a12, a13);
  v27 = v26;
  v29 = v28;
  v31 = v30;
  v32 = v24;
  sub_1BC9C9D60(&v53, a4, a5, a6, a7, v25, v27, v29, v31);
  v33 = v53;
  v34 = v54;
  v35 = v55;
  v36 = v56;
  v37 = v57;
  swift_beginAccess();
  v38 = MEMORY[0x1BCCFC004](v23);
  if (v38)
  {
    v39 = (void *)v38;
    v40 = v38 + OBJC_IVAR____TtC19HealthVisualization16DiagramImageView_lastUsedTransformer;
    swift_beginAccess();
    v41 = *(void **)v40;
    *(_QWORD *)v40 = v24;
    *(_OWORD *)(v40 + 8) = v33;
    *(_QWORD *)(v40 + 24) = v34;
    *(_QWORD *)(v40 + 32) = v35;
    *(_QWORD *)(v40 + 40) = v36;
    *(_QWORD *)(v40 + 48) = v37;
    v42 = v32;
    sub_1BC9C82F8(v41);

  }
  v47 = v24;
  v48 = v33;
  v49 = v34;
  v50 = v35;
  v51 = v36;
  v52 = v37;
  a3(v32, &v47, a10, a11);

}

double DiagramImageView.DiagramTransformer.init(modelSpace:screenSpace:screenInsets:context:)@<D0>(void *a1@<X0>, uint64_t a2@<X8>, CGFloat a3@<D0>, CGFloat a4@<D1>, CGFloat a5@<D2>, CGFloat a6@<D3>, double a7@<D4>, double a8@<D5>, double a9@<D6>, double a10@<D7>, double a11, double a12)
{
  double v18;
  double v19;
  CGFloat v20;
  double v21;
  CGFloat v22;
  double v23;
  CGFloat v24;
  id v25;
  __int128 v26;
  double result;
  __int128 v28[2];
  __int128 v29;

  v18 = UIEdgeInsetsInsetRect(a7, a8, a9, a10, a11, a12);
  v20 = v19;
  v22 = v21;
  v24 = v23;
  v25 = a1;
  sub_1BC9C9D60(v28, a3, a4, a5, a6, v18, v20, v22, v24);

  *(_QWORD *)a2 = a1;
  v26 = v28[1];
  *(_OWORD *)(a2 + 8) = v28[0];
  *(_OWORD *)(a2 + 24) = v26;
  result = *(double *)&v29;
  *(_OWORD *)(a2 + 40) = v29;
  return result;
}

uint64_t sub_1BC9C94C0(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

void sub_1BC9C94E0(uint64_t a1, void *a2)
{
  void (*v2)(void);
  id v3;

  v2 = *(void (**)(void))(a1 + 32);
  v3 = a2;
  v2();

}

uint64_t static DiagramImageView.generateTestImage(modelSpace:screenSpace:screenInsets:imageRenderer:drawingBlock:)(void *a1, uint64_t a2, uint64_t a3, double a4, double a5, double a6, double a7, double a8, double a9, double a10, double a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, __int128 a17, uint64_t a18, uint64_t a19)
{
  uint64_t v28;
  uint64_t v29;
  void *v30;
  id v31;
  uint64_t result;
  _QWORD aBlock[6];

  v28 = swift_allocObject();
  *(double *)(v28 + 16) = a4;
  *(double *)(v28 + 24) = a5;
  *(double *)(v28 + 32) = a6;
  *(double *)(v28 + 40) = a7;
  *(double *)(v28 + 48) = a8;
  *(double *)(v28 + 56) = a9;
  *(double *)(v28 + 64) = a10;
  *(double *)(v28 + 72) = a11;
  *(_OWORD *)(v28 + 80) = a17;
  *(_QWORD *)(v28 + 96) = a18;
  *(_QWORD *)(v28 + 104) = a19;
  *(_QWORD *)(v28 + 112) = a2;
  *(_QWORD *)(v28 + 120) = a3;
  v29 = swift_allocObject();
  *(_QWORD *)(v29 + 16) = sub_1BC9C9F50;
  *(_QWORD *)(v29 + 24) = v28;
  aBlock[4] = sub_1BC9CA71C;
  aBlock[5] = v29;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1BC9C94E0;
  aBlock[3] = &block_descriptor_16;
  v30 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  v31 = objc_msgSend(a1, sel_imageWithActions_, v30);
  _Block_release(v30);
  LOBYTE(v30) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  result = swift_release();
  if ((v30 & 1) == 0)
    return (uint64_t)v31;
  __break(1u);
  return result;
}

void sub_1BC9C96C0(void *a1, void (*a2)(id, id *, double, double), CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6, double a7, double a8, double a9, double a10, double a11, double a12)
{
  id v23;
  double v24;
  double v25;
  CGFloat v26;
  double v27;
  CGFloat v28;
  double v29;
  CGFloat v30;
  id v35;
  id v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40[3];

  v23 = objc_msgSend(a1, sel_CGContext);
  v24 = UIEdgeInsetsInsetRect(a7, a8, a9, a10, a11, a12);
  v26 = v25;
  v28 = v27;
  v30 = v29;
  v35 = v23;
  sub_1BC9C9D60(v40, a3, a4, a5, a6, v24, v26, v28, v30);
  v36 = v23;
  v37 = v40[0];
  v38 = v40[1];
  v39 = v40[2];
  a2(v35, &v36, a9, a10);

}

id DiagramImageView.DiagramTransformer.context.getter()
{
  id *v0;
  id v1;
  id v2;

  v1 = *v0;
  v2 = *v0;
  return v1;
}

__n128 DiagramImageView.DiagramTransformer.transform.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __int128 v2;
  __n128 result;

  v2 = *(_OWORD *)(v1 + 24);
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 8);
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(v1 + 40);
  *(__n128 *)(a1 + 32) = result;
  return result;
}

double static DiagramImageView.DiagramTransformer.buildTransform(modelSpace:screenSpace:)@<D0>(_OWORD *a1@<X8>, CGFloat a2@<D0>, CGFloat a3@<D1>, CGFloat a4@<D2>, CGFloat a5@<D3>, CGFloat a6@<D4>, CGFloat a7@<D5>, CGFloat a8@<D6>, CGFloat a9@<D7>)
{
  __int128 v10;
  double result;
  __int128 v12[2];
  __int128 v13;

  sub_1BC9C9D60(v12, a2, a3, a4, a5, a6, a7, a8, a9);
  v10 = v12[1];
  *a1 = v12[0];
  a1[1] = v10;
  result = *(double *)&v13;
  a1[2] = v13;
  return result;
}

__n128 DiagramImageView.DiagramTransformer.init(transform:context:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  __int128 v3;
  __n128 result;

  *(_QWORD *)a3 = a2;
  v3 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(a3 + 8) = *(_OWORD *)a1;
  *(_OWORD *)(a3 + 24) = v3;
  result = *(__n128 *)(a1 + 32);
  *(__n128 *)(a3 + 40) = result;
  return result;
}

id DiagramImageView.DiagramTransformer.transformer(applying:)@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  id v10;
  CGAffineTransform v11;
  CGAffineTransform t2;
  CGAffineTransform t1;

  v10 = *(id *)v2;
  v4 = *(_OWORD *)(v2 + 24);
  *(_OWORD *)&t1.a = *(_OWORD *)(v2 + 8);
  *(_OWORD *)&t1.c = v4;
  *(_OWORD *)&t1.tx = *(_OWORD *)(v2 + 40);
  v5 = a1[1];
  *(_OWORD *)&t2.a = *a1;
  *(_OWORD *)&t2.c = v5;
  *(_OWORD *)&t2.tx = a1[2];
  CGAffineTransformConcat(&v11, &t1, &t2);
  v6 = *(_OWORD *)&v11.a;
  v7 = *(_OWORD *)&v11.c;
  v8 = *(_OWORD *)&v11.tx;
  *(_QWORD *)a2 = v10;
  *(_OWORD *)(a2 + 8) = v6;
  *(_OWORD *)(a2 + 24) = v7;
  *(_OWORD *)(a2 + 40) = v8;
  return v10;
}

double DiagramImageView.DiagramTransformer.toScreenX(_:)(double a1)
{
  uint64_t v1;
  __int128 v2;
  uint64_t v3;
  double result;
  CGAffineTransform v5;

  v2 = *(_OWORD *)(v1 + 24);
  *(_OWORD *)&v5.a = *(_OWORD *)(v1 + 8);
  *(_OWORD *)&v5.c = v2;
  *(_OWORD *)&v5.tx = *(_OWORD *)(v1 + 40);
  v3 = 0;
  *(_QWORD *)&result = *(_OWORD *)&CGPointApplyAffineTransform(*(CGPoint *)&a1, &v5);
  return result;
}

void DiagramImageView.DiagramTransformer.drawContent(modelSpace:screenSpace:screenInsets:drawingBlock:)(void (*a1)(CGContext *, void **, double, double), CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8, CGFloat a9, double a10, double a11)
{
  void **v18;
  void *v19;
  CGContext *v26;
  double x;
  double y;
  double width;
  double height;
  double v31;
  double v32;
  CGFloat v33;
  double v34;
  CGFloat v35;
  double v36;
  CGFloat v37;
  CGContext *c;
  void *v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46[3];
  CGRect v47;
  CGRect v48;

  v19 = *v18;
  if (*v18)
  {
    v26 = v19;
    CGContextSaveGState(v26);
    CGContextTranslateCTM(v26, a6, a7);
    v47.origin.x = a6;
    v47.origin.y = a7;
    v47.size.width = a8;
    v47.size.height = a9;
    v48 = CGRectOffset(v47, -a6, -a7);
    x = v48.origin.x;
    y = v48.origin.y;
    width = v48.size.width;
    height = v48.size.height;
    CGContextClipToRect(v26, v48);
    v31 = UIEdgeInsetsInsetRect(x, y, width, height, a10, a11);
    v33 = v32;
    v35 = v34;
    v37 = v36;
    c = v26;
    sub_1BC9C9D60(v46, a2, a3, a4, a5, v31, v33, v35, v37);
    v42 = v19;
    v43 = v46[0];
    v44 = v46[1];
    v45 = v46[2];
    a1(c, &v42, width, height);
    CGContextRestoreGState(c);

  }
}

id DiagramImageView.__allocating_init(image:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithImage_, a1);

  return v3;
}

void DiagramImageView.init(image:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id DiagramImageView.__allocating_init(image:highlightedImage:)(void *a1, void *a2)
{
  objc_class *v2;
  id v5;

  v5 = objc_msgSend(objc_allocWithZone(v2), sel_initWithImage_highlightedImage_, a1, a2);

  return v5;
}

void DiagramImageView.init(image:highlightedImage:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id DiagramImageView.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for DiagramImageView();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_1BC9C9CA4()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1BC9C9CC8()
{
  swift_release();
  return swift_deallocObject();
}

void sub_1BC9C9CEC(void *a1)
{
  uint64_t v1;

  sub_1BC9C91FC(a1, *(_QWORD *)(v1 + 112), *(void (**)(id, id *, double, double))(v1 + 120), *(CGFloat *)(v1 + 16), *(CGFloat *)(v1 + 24), *(CGFloat *)(v1 + 32), *(CGFloat *)(v1 + 40), *(double *)(v1 + 48), *(double *)(v1 + 56), *(double *)(v1 + 64), *(double *)(v1 + 72), *(double *)(v1 + 80), *(double *)(v1 + 88));
}

uint64_t sub_1BC9C9D30()
{
  return swift_deallocObject();
}

uint64_t sub_1BC9C9D40()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

CGAffineTransform *sub_1BC9C9D60@<X0>(__int128 *a1@<X8>, CGFloat a2@<D0>, CGFloat a3@<D1>, CGFloat a4@<D2>, CGFloat a5@<D3>, CGFloat a6@<D4>, CGFloat a7@<D5>, CGFloat a8@<D6>, CGFloat a9@<D7>)
{
  CGAffineTransform *result;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  CGFloat Height;
  double Width;
  CGFloat v24;
  CGFloat v25;
  CGFloat v26;
  CGFloat rect;
  CGFloat v28;
  CGFloat v29;
  __int128 v30;
  __int128 v31;
  CGFloat ty;
  CGFloat tx;
  __int128 v34;
  __int128 v35;
  CGAffineTransform v36;
  CGAffineTransform t2;
  CGAffineTransform t1;
  CGRect v39;
  CGRect v40;
  CGRect v41;
  CGRect v42;
  CGRect v43;

  result = (CGAffineTransform *)CGRectIsEmpty(*(CGRect *)&a2);
  if ((result & 1) != 0)
  {
    v19 = xmmword_1BCAB7800;
    v20 = xmmword_1BCAB7BE0;
    v21 = 0uLL;
  }
  else
  {
    CGAffineTransformMakeTranslation(&t1, -a2, -a3);
    v34 = *(_OWORD *)&t1.c;
    v35 = *(_OWORD *)&t1.a;
    ty = t1.ty;
    tx = t1.tx;
    v39.origin.x = a6;
    v39.origin.y = a7;
    v39.size.width = a8;
    v39.size.height = a9;
    Height = CGRectGetHeight(v39);
    CGAffineTransformMakeTranslation(&t1, 0.0, Height);
    CGAffineTransformTranslate(&t2, &t1, a6, a7);
    v30 = *(_OWORD *)&t2.c;
    v31 = *(_OWORD *)&t2.a;
    v28 = t2.ty;
    v29 = t2.tx;
    v40.origin.x = a6;
    v40.origin.y = a7;
    v40.size.width = a8;
    v40.size.height = a9;
    rect = a9;
    Width = CGRectGetWidth(v40);
    v41.origin.x = a2;
    v41.origin.y = a3;
    v41.size.width = a4;
    v41.size.height = a5;
    v24 = Width / CGRectGetWidth(v41);
    v42.origin.x = a6;
    v42.origin.y = a7;
    v42.size.width = a8;
    v42.size.height = rect;
    v25 = -CGRectGetHeight(v42);
    v43.origin.x = a2;
    v43.origin.y = a3;
    v43.size.width = a4;
    v43.size.height = a5;
    v26 = CGRectGetHeight(v43);
    *(_OWORD *)&t1.a = v31;
    *(_OWORD *)&t1.c = v30;
    t1.tx = v29;
    t1.ty = v28;
    CGAffineTransformScale(&t2, &t1, v24, v25 / v26);
    *(_OWORD *)&t1.a = v35;
    *(_OWORD *)&t1.c = v34;
    t1.tx = tx;
    t1.ty = ty;
    result = CGAffineTransformConcat(&v36, &t1, &t2);
    v20 = *(_OWORD *)&v36.a;
    v19 = *(_OWORD *)&v36.c;
    v21 = *(_OWORD *)&v36.tx;
  }
  *a1 = v20;
  a1[1] = v19;
  a1[2] = v21;
  return result;
}

uint64_t sub_1BC9C9F40()
{
  return swift_deallocObject();
}

void sub_1BC9C9F50(void *a1)
{
  uint64_t v1;

  sub_1BC9C96C0(a1, *(void (**)(id, id *, double, double))(v1 + 112), *(CGFloat *)(v1 + 16), *(CGFloat *)(v1 + 24), *(CGFloat *)(v1 + 32), *(CGFloat *)(v1 + 40), *(double *)(v1 + 48), *(double *)(v1 + 56), *(double *)(v1 + 64), *(double *)(v1 + 72), *(double *)(v1 + 80), *(double *)(v1 + 88));
}

uint64_t sub_1BC9C9F90()
{
  return swift_deallocObject();
}

uint64_t sub_1BC9C9FA0@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v3 = *a1 + OBJC_IVAR____TtC19HealthVisualization16DiagramImageView_delegate;
  swift_beginAccess();
  result = MEMORY[0x1BCCFC004](v3);
  v5 = *(_QWORD *)(v3 + 8);
  *a2 = result;
  a2[1] = v5;
  return result;
}

uint64_t sub_1BC9C9FF8(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *a2 + OBJC_IVAR____TtC19HealthVisualization16DiagramImageView_delegate;
  swift_beginAccess();
  *(_QWORD *)(v3 + 8) = v2;
  return swift_unknownObjectWeakAssign();
}

__n128 sub_1BC9CA060@<Q0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  char v4;
  __n128 result;
  __int128 v6;

  v3 = *a1 + OBJC_IVAR____TtC19HealthVisualization16DiagramImageView_lastUsedModelSpace;
  swift_beginAccess();
  v4 = *(_BYTE *)(v3 + 32);
  result = *(__n128 *)v3;
  v6 = *(_OWORD *)(v3 + 16);
  *(_OWORD *)a2 = *(_OWORD *)v3;
  *(_OWORD *)(a2 + 16) = v6;
  *(_BYTE *)(a2 + 32) = v4;
  return result;
}

__n128 sub_1BC9CA0B8(__n128 *a1, _QWORD *a2)
{
  unint64_t v2;
  unint64_t v3;
  unsigned __int8 v4;
  uint64_t v5;
  __n128 result;
  __n128 v7;

  v7 = *a1;
  v2 = a1[1].n128_u64[0];
  v3 = a1[1].n128_u64[1];
  v4 = a1[2].n128_u8[0];
  v5 = *a2 + OBJC_IVAR____TtC19HealthVisualization16DiagramImageView_lastUsedModelSpace;
  swift_beginAccess();
  result = v7;
  *(__n128 *)v5 = v7;
  *(_QWORD *)(v5 + 16) = v2;
  *(_QWORD *)(v5 + 24) = v3;
  *(_BYTE *)(v5 + 32) = v4;
  return result;
}

uint64_t dispatch thunk of DiagramImageViewDelegate.diagramImageViewDidRender(_:transformer:modelSpace:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char v5;
  uint64_t (*v6)(uint64_t, uint64_t, _OWORD *);
  __int128 v7;
  _OWORD v9[2];
  char v10;

  v5 = *(_BYTE *)(a3 + 32);
  v6 = *(uint64_t (**)(uint64_t, uint64_t, _OWORD *))(a5 + 8);
  v7 = *(_OWORD *)(a3 + 16);
  v9[0] = *(_OWORD *)a3;
  v9[1] = v7;
  v10 = v5;
  return v6(a1, a2, v9);
}

uint64_t dispatch thunk of DiagramImageViewDelegate.diagramImageViewDidUpdate(_:renderSize:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t method lookup function for DiagramImageView()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of DiagramImageView.delegate.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x88))();
}

uint64_t dispatch thunk of DiagramImageView.delegate.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x90))();
}

uint64_t dispatch thunk of DiagramImageView.delegate.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x98))();
}

uint64_t dispatch thunk of DiagramImageView.lastUsedTransformer.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xA0))();
}

uint64_t dispatch thunk of DiagramImageView.lastUsedTransformer.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xA8))();
}

uint64_t dispatch thunk of DiagramImageView.lastUsedTransformer.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xB0))();
}

uint64_t dispatch thunk of DiagramImageView.lastUsedModelSpace.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xB8))();
}

uint64_t dispatch thunk of DiagramImageView.lastUsedModelSpace.setter(uint64_t a1)
{
  _QWORD *v1;
  char v2;
  uint64_t (*v3)(_OWORD *);
  __int128 v4;
  _OWORD v6[2];
  char v7;

  v2 = *(_BYTE *)(a1 + 32);
  v3 = *(uint64_t (**)(_OWORD *))((*MEMORY[0x1E0DEEDD8] & *v1) + 0xC0);
  v4 = *(_OWORD *)(a1 + 16);
  v6[0] = *(_OWORD *)a1;
  v6[1] = v4;
  v7 = v2;
  return v3(v6);
}

uint64_t dispatch thunk of DiagramImageView.lastUsedModelSpace.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xC8))();
}

uint64_t dispatch thunk of DiagramImageView.drawContent(modelSpace:screenInsets:drawingBlock:)(uint64_t a1)
{
  _QWORD *v1;
  char v2;
  uint64_t (*v3)(_OWORD *);
  __int128 v4;
  _OWORD v6[2];
  char v7;

  v2 = *(_BYTE *)(a1 + 32);
  v3 = *(uint64_t (**)(_OWORD *))((*MEMORY[0x1E0DEEDD8] & *v1) + 0xD8);
  v4 = *(_OWORD *)(a1 + 16);
  v6[0] = *(_OWORD *)a1;
  v6[1] = v4;
  v7 = v2;
  return v3(v6);
}

void destroy for DiagramImageView.DiagramDrawBlockContext(uint64_t a1)
{

}

uint64_t initializeWithCopy for DiagramImageView.DiagramDrawBlockContext(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  __int128 v5;
  id v6;
  id v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(void **)(a2 + 16);
  v4 = *(void **)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = v4;
  v5 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v5;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  v6 = v3;
  v7 = v4;
  return a1;
}

_QWORD *assignWithCopy for DiagramImageView.DiagramDrawBlockContext(_QWORD *a1, _QWORD *a2)
{
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;

  *a1 = *a2;
  a1[1] = a2[1];
  v4 = (void *)a2[2];
  v5 = (void *)a1[2];
  a1[2] = v4;
  v6 = v4;

  v7 = (void *)a1[3];
  v8 = (void *)a2[3];
  a1[3] = v8;
  v9 = v8;

  a1[4] = a2[4];
  a1[5] = a2[5];
  a1[6] = a2[6];
  a1[7] = a2[7];
  a1[8] = a2[8];
  a1[9] = a2[9];
  return a1;
}

__n128 __swift_memcpy80_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v3;
  return result;
}

uint64_t assignWithTake for DiagramImageView.DiagramDrawBlockContext(uint64_t a1, _OWORD *a2)
{
  void *v4;
  __int128 v5;

  *(_OWORD *)a1 = *a2;

  v4 = *(void **)(a1 + 24);
  *(_OWORD *)(a1 + 16) = a2[1];

  v5 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v5;
  *(_OWORD *)(a1 + 64) = a2[4];
  return a1;
}

uint64_t getEnumTagSinglePayload for DiagramImageView.DiagramDrawBlockContext(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 80))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DiagramImageView.DiagramDrawBlockContext(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 80) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 80) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for DiagramImageView.DiagramDrawBlockContext()
{
  return &type metadata for DiagramImageView.DiagramDrawBlockContext;
}

void destroy for DiagramImageView.DiagramTransformer(id *a1)
{

}

uint64_t initializeWithCopy for DiagramImageView.DiagramTransformer(uint64_t a1, uint64_t a2)
{
  void *v3;
  id v4;

  v3 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  v4 = v3;
  return a1;
}

uint64_t assignWithCopy for DiagramImageView.DiagramTransformer(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  v4 = *(void **)a1;
  v5 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v5;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  return a1;
}

__n128 __swift_memcpy56_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for DiagramImageView.DiagramTransformer(uint64_t a1, uint64_t a2)
{
  void *v4;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for DiagramImageView.DiagramTransformer(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 56))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for DiagramImageView.DiagramTransformer(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 56) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for DiagramImageView.DiagramTransformer()
{
  return &type metadata for DiagramImageView.DiagramTransformer;
}

uint64_t sub_1BC9CA6EC(uint64_t a1)
{
  swift_unknownObjectWeakDestroy();
  return a1;
}

id sub_1BC9CA720()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id result;
  uint64_t v8;

  sub_1BC9CAA78();
  MEMORY[0x1E0C80A78](v0);
  v2 = (char *)&v8 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB36A8]), sel_init);
  sub_1BCAB4F98();
  v4 = sub_1BCAB4FB0();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v2, 1, v4) != 1)
  {
    v6 = (void *)sub_1BCAB4FA4();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v2, v4);
  }
  objc_msgSend(v3, sel_setTimeZone_, v6);

  result = objc_msgSend(v3, sel_setFormatOptions_, 19);
  qword_1ED6D3AB0 = (uint64_t)v3;
  return result;
}

void sub_1BC9CA82C()
{
  id v0;
  void *v1;

  v0 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB3590]), sel_init);
  v1 = (void *)sub_1BCAB5EE0();
  objc_msgSend(v0, sel_setDateTemplate_, v1);

  qword_1ED6C4D80 = (uint64_t)v0;
}

id static NSDateIntervalFormatter.abbreviatedMonthDay.getter()
{
  if (qword_1ED6C48B0 != -1)
    swift_once();
  return (id)qword_1ED6C4D80;
}

Swift::String __swiftcall DateInterval.stringWithISO8601Format()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  void *v4;
  void *v5;
  void (*v6)(char *, uint64_t);
  id v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  void *v11;
  id v12;
  uint64_t v13;
  void *v14;
  Swift::String result;
  uint64_t v16;
  unint64_t v17;

  v0 = sub_1BCAB4E54();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v3 = (char *)&v16 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1ED6C70B0 != -1)
    swift_once();
  v4 = (void *)qword_1ED6D3AB0;
  v16 = 0;
  v17 = 0xE000000000000000;
  sub_1BCAB4BC0();
  v5 = (void *)sub_1BCAB4DE8();
  v6 = *(void (**)(char *, uint64_t))(v1 + 8);
  v6(v3, v0);
  v7 = objc_msgSend(v4, sel_stringFromDate_, v5);

  v8 = sub_1BCAB5F04();
  v10 = v9;

  swift_bridgeObjectRelease();
  v16 = v8;
  v17 = v10;
  sub_1BCAB5F70();
  sub_1BCAB4B9C();
  v11 = (void *)sub_1BCAB4DE8();
  v6(v3, v0);
  v12 = objc_msgSend(v4, sel_stringFromDate_, v11);

  sub_1BCAB5F04();
  sub_1BCAB5F70();
  swift_bridgeObjectRelease();
  v13 = v16;
  v14 = (void *)v17;
  result._object = v14;
  result._countAndFlagsBits = v13;
  return result;
}

void sub_1BC9CAA78()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED6C7290)
  {
    sub_1BCAB4FB0();
    v0 = sub_1BCAB6384();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED6C7290);
  }
}

uint64_t DiagramAxisLabel.text.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

double DiagramAxisLabel.location.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 16);
}

uint64_t DiagramAxisLabel.type.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24);
}

float DiagramAxisLabel.priority.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 32);
}

uint64_t DiagramAxisLabel.init(text:location:type:priority:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>, float a6@<S1>)
{
  *(_QWORD *)a4 = result;
  *(_QWORD *)(a4 + 8) = a2;
  *(double *)(a4 + 16) = a5;
  *(_QWORD *)(a4 + 24) = a3;
  *(float *)(a4 + 32) = a6;
  return result;
}

uint64_t DiagramAxisMetrics.labels.getter()
{
  return swift_bridgeObjectRetain();
}

double DiagramAxisMetrics.adjustedModelCoordinateRange.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 8);
}

uint64_t DiagramAxisMetrics.init(labels:adjustedModelCoordinateRange:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>)
{
  *(_QWORD *)a2 = result;
  *(double *)(a2 + 8) = a3;
  *(double *)(a2 + 16) = a4;
  return result;
}

BOOL _s19HealthVisualization16DiagramAxisLabelV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  double v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  float v10;
  char v12;
  _BOOL8 result;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(double *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(float *)(a1 + 32);
  v7 = *(_QWORD *)(a2 + 8);
  v8 = *(double *)(a2 + 16);
  v9 = *(_QWORD *)(a2 + 24);
  v10 = *(float *)(a2 + 32);
  if (!v3)
  {
    result = 0;
    if (v7)
      return result;
    goto LABEL_10;
  }
  if (!v7)
    return 0;
  if (*(_QWORD *)a1 == *(_QWORD *)a2 && v3 == v7)
  {
    if (v4 == v8 && v5 == v9)
      return v6 == v10;
    return 0;
  }
  v12 = sub_1BCAB67C8();
  result = 0;
  if ((v12 & 1) == 0)
    return result;
LABEL_10:
  if (v4 == v8 && v5 == v9)
    return v6 == v10;
  return result;
}

uint64_t initializeWithCopy for DiagramAxisLabel(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for DiagramAxisLabel(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  return a1;
}

__n128 __swift_memcpy36_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for DiagramAxisLabel(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for DiagramAxisLabel(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 36))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for DiagramAxisLabel(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_DWORD *)(result + 32) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 36) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 36) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for DiagramAxisLabel()
{
  return &type metadata for DiagramAxisLabel;
}

uint64_t initializeBufferWithCopyOfBuffer for DiagramAxisMetrics(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for DiagramAxisMetrics(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  return a1;
}

uint64_t assignWithTake for DiagramAxisMetrics(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  return a1;
}

ValueMetadata *type metadata accessor for DiagramAxisMetrics()
{
  return &type metadata for DiagramAxisMetrics;
}

id ObjectTypeIdentifiable.objectType.getter(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  v4 = (void *)objc_opt_self();
  (*(void (**)(uint64_t, uint64_t))(a2 + 8))(a1, a2);
  v5 = (void *)sub_1BCAB5EE0();
  swift_bridgeObjectRelease();
  v6 = objc_msgSend(v4, sel__typeWithIdentifier_, v5);

  return v6;
}

uint64_t dispatch thunk of ObjectTypeIdentifiable.objectTypeIdentifier.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t sub_1BC9CAF24(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t, uint64_t);
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int (*v28)(char *, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  void (*v40)(char *, char *, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  void (*v46)(uint64_t, uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v52;
  int *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v30 = *a2;
    *(_QWORD *)a1 = *a2;
    v31 = v30 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    *(_QWORD *)a1 = *a2;
    *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
    v7 = *(int *)(a3 + 24);
    v8 = a1 + v7;
    v9 = (uint64_t)a2 + v7;
    v10 = sub_1BCAB4F68();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
    v11 = type metadata accessor for TimeBasedDistribution();
    *(_QWORD *)(v8 + *(int *)(v11 + 20)) = *(_QWORD *)(v9 + *(int *)(v11 + 20));
    v12 = *(int *)(v11 + 24);
    v13 = (_QWORD *)(v8 + v12);
    v14 = (_QWORD *)(v9 + v12);
    v15 = v14[1];
    *v13 = *v14;
    v13[1] = v15;
    v16 = *(int *)(a3 + 28);
    v57 = a2;
    v58 = a1;
    v17 = a1 + v16;
    v18 = (uint64_t)a2 + v16;
    *(_BYTE *)v17 = *(_BYTE *)v18;
    v19 = a1 + v16 + 8;
    v20 = *(_OWORD *)(v18 + 32);
    *(_OWORD *)(v17 + 32) = v20;
    v21 = v20;
    v22 = **(void (***)(uint64_t, uint64_t, uint64_t))(v20 - 8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v22(v19, v18 + 8, v21);
    v53 = (int *)type metadata accessor for TimeBasedDistributionChartModel();
    v54 = v18;
    v23 = v53[6];
    v55 = v17;
    v24 = (char *)(v17 + v23);
    v25 = (char *)(v18 + v23);
    v26 = sub_1BCAB5754();
    v27 = *(_QWORD *)(v26 - 8);
    v28 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48);
    if (v28(v25, 1, v26))
    {
      sub_1BC998AB0(0, (unint64_t *)&qword_1EF478060, (uint64_t (*)(uint64_t))MEMORY[0x1E0C93AA8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v27 + 16))(v24, v25, v26);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
    }
    v32 = (int *)type metadata accessor for TimeBasedDistributionChartDesign();
    v33 = v32[5];
    v34 = &v24[v33];
    v35 = &v25[v33];
    v56 = a3;
    if (v28(&v25[v33], 1, v26))
    {
      sub_1BC998AB0(0, (unint64_t *)&qword_1EF478060, (uint64_t (*)(uint64_t))MEMORY[0x1E0C93AA8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v27 + 16))(v34, v35, v26);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v34, 0, 1, v26);
    }
    *(_QWORD *)&v24[v32[6]] = *(_QWORD *)&v25[v32[6]];
    *(_QWORD *)&v24[v32[7]] = *(_QWORD *)&v25[v32[7]];
    *(_QWORD *)&v24[v32[8]] = *(_QWORD *)&v25[v32[8]];
    *(_QWORD *)&v24[v32[9]] = *(_QWORD *)&v25[v32[9]];
    v37 = v32[10];
    v38 = &v24[v37];
    v52 = &v25[v37];
    v39 = sub_1BCAB5958();
    v40 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v39 - 8) + 16);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    v40(v38, v52, v39);
    *(_QWORD *)&v24[v32[11]] = *(_QWORD *)&v25[v32[11]];
    *(_QWORD *)&v24[v32[12]] = *(_QWORD *)&v25[v32[12]];
    *(_QWORD *)&v24[v32[13]] = *(_QWORD *)&v25[v32[13]];
    *(_QWORD *)&v24[v32[14]] = *(_QWORD *)&v25[v32[14]];
    *(_QWORD *)&v24[v32[15]] = *(_QWORD *)&v25[v32[15]];
    *(_QWORD *)&v24[v32[16]] = *(_QWORD *)&v25[v32[16]];
    *(_QWORD *)&v24[v32[17]] = *(_QWORD *)&v25[v32[17]];
    *(_QWORD *)&v24[v32[18]] = *(_QWORD *)&v25[v32[18]];
    *(_QWORD *)&v24[v32[19]] = *(_QWORD *)&v25[v32[19]];
    *(_QWORD *)&v24[v32[20]] = *(_QWORD *)&v25[v32[20]];
    *(_QWORD *)&v24[v32[21]] = *(_QWORD *)&v25[v32[21]];
    *(_QWORD *)&v24[v32[22]] = *(_QWORD *)&v25[v32[22]];
    *(_QWORD *)&v24[v32[23]] = *(_QWORD *)&v25[v32[23]];
    *(_QWORD *)&v24[v32[24]] = *(_QWORD *)&v25[v32[24]];
    v24[v32[25]] = v25[v32[25]];
    v41 = v53[7];
    v42 = v55 + v41;
    v43 = v54 + v41;
    v44 = *(_OWORD *)(v54 + v41 + 24);
    *(_OWORD *)(v55 + v41 + 24) = v44;
    v45 = v44;
    v46 = **(void (***)(uint64_t, uint64_t, uint64_t))(v44 - 8);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    v46(v42, v43, v45);
    v47 = v53[8];
    v48 = v55 + v47;
    v49 = v54 + v47;
    v50 = sub_1BCAB5514();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 16))(v48, v49, v50);
    v31 = v58;
    *(_BYTE *)(v58 + *(int *)(v56 + 32)) = *((_BYTE *)v57 + *(int *)(v56 + 32));
  }
  return v31;
}

uint64_t sub_1BC9CB388(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v4 = a1 + *(int *)(a2 + 24);
  v5 = sub_1BCAB4F68();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  type metadata accessor for TimeBasedDistribution();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v6 = a1 + *(int *)(a2 + 28);
  __swift_destroy_boxed_opaque_existential_1(v6 + 8);
  v7 = (int *)type metadata accessor for TimeBasedDistributionChartModel();
  v8 = v6 + v7[6];
  v9 = sub_1BCAB5754();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
  if (!v11(v8, 1, v9))
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
  v12 = type metadata accessor for TimeBasedDistributionChartDesign();
  v13 = v8 + *(int *)(v12 + 20);
  if (!v11(v13, 1, v9))
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v13, v9);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  v14 = v8 + *(int *)(v12 + 40);
  v15 = sub_1BCAB5958();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v14, v15);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v6 + v7[7]);
  v16 = v6 + v7[8];
  v17 = sub_1BCAB5514();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(v16, v17);
}

uint64_t sub_1BC9CB568(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t, uint64_t);
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int (*v27)(char *, uint64_t, uint64_t);
  uint64_t v28;
  int *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  void (*v37)(char *, char *, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  void (*v43)(uint64_t, uint64_t, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t result;
  char *v49;
  int *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v6 = *(int *)(a3 + 24);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = sub_1BCAB4F68();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
  v10 = type metadata accessor for TimeBasedDistribution();
  *(_QWORD *)(v7 + *(int *)(v10 + 20)) = *(_QWORD *)(v8 + *(int *)(v10 + 20));
  v11 = *(int *)(v10 + 24);
  v12 = (_QWORD *)(v7 + v11);
  v13 = (_QWORD *)(v8 + v11);
  v14 = v13[1];
  *v12 = *v13;
  v12[1] = v14;
  v52 = a3;
  v53 = a2;
  v15 = *(int *)(a3 + 28);
  v54 = a1;
  v16 = a1 + v15;
  v17 = a2 + v15;
  *(_BYTE *)v16 = *(_BYTE *)v17;
  v18 = a1 + v15 + 8;
  v19 = *(_OWORD *)(v17 + 32);
  *(_OWORD *)(v16 + 32) = v19;
  v20 = v19;
  v21 = **(void (***)(uint64_t, uint64_t, uint64_t))(v19 - 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v21(v18, v17 + 8, v20);
  v50 = (int *)type metadata accessor for TimeBasedDistributionChartModel();
  v51 = v17;
  v22 = v50[6];
  v23 = (char *)(v16 + v22);
  v24 = (char *)(v17 + v22);
  v25 = sub_1BCAB5754();
  v26 = *(_QWORD *)(v25 - 8);
  v27 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48);
  if (v27(v24, 1, v25))
  {
    sub_1BC998AB0(0, (unint64_t *)&qword_1EF478060, (uint64_t (*)(uint64_t))MEMORY[0x1E0C93AA8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v26 + 16))(v23, v24, v25);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
  }
  v29 = (int *)type metadata accessor for TimeBasedDistributionChartDesign();
  v30 = v29[5];
  v31 = &v23[v30];
  v32 = &v24[v30];
  if (v27(&v24[v30], 1, v25))
  {
    sub_1BC998AB0(0, (unint64_t *)&qword_1EF478060, (uint64_t (*)(uint64_t))MEMORY[0x1E0C93AA8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v26 + 16))(v31, v32, v25);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v31, 0, 1, v25);
  }
  *(_QWORD *)&v23[v29[6]] = *(_QWORD *)&v24[v29[6]];
  *(_QWORD *)&v23[v29[7]] = *(_QWORD *)&v24[v29[7]];
  *(_QWORD *)&v23[v29[8]] = *(_QWORD *)&v24[v29[8]];
  *(_QWORD *)&v23[v29[9]] = *(_QWORD *)&v24[v29[9]];
  v34 = v29[10];
  v35 = &v23[v34];
  v49 = &v24[v34];
  v36 = sub_1BCAB5958();
  v37 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v36 - 8) + 16);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  v37(v35, v49, v36);
  *(_QWORD *)&v23[v29[11]] = *(_QWORD *)&v24[v29[11]];
  *(_QWORD *)&v23[v29[12]] = *(_QWORD *)&v24[v29[12]];
  *(_QWORD *)&v23[v29[13]] = *(_QWORD *)&v24[v29[13]];
  *(_QWORD *)&v23[v29[14]] = *(_QWORD *)&v24[v29[14]];
  *(_QWORD *)&v23[v29[15]] = *(_QWORD *)&v24[v29[15]];
  *(_QWORD *)&v23[v29[16]] = *(_QWORD *)&v24[v29[16]];
  *(_QWORD *)&v23[v29[17]] = *(_QWORD *)&v24[v29[17]];
  *(_QWORD *)&v23[v29[18]] = *(_QWORD *)&v24[v29[18]];
  *(_QWORD *)&v23[v29[19]] = *(_QWORD *)&v24[v29[19]];
  *(_QWORD *)&v23[v29[20]] = *(_QWORD *)&v24[v29[20]];
  *(_QWORD *)&v23[v29[21]] = *(_QWORD *)&v24[v29[21]];
  *(_QWORD *)&v23[v29[22]] = *(_QWORD *)&v24[v29[22]];
  *(_QWORD *)&v23[v29[23]] = *(_QWORD *)&v24[v29[23]];
  *(_QWORD *)&v23[v29[24]] = *(_QWORD *)&v24[v29[24]];
  v23[v29[25]] = v24[v29[25]];
  v38 = v50[7];
  v39 = v16 + v38;
  v40 = v51 + v38;
  v41 = *(_OWORD *)(v51 + v38 + 24);
  *(_OWORD *)(v16 + v38 + 24) = v41;
  v42 = v41;
  v43 = **(void (***)(uint64_t, uint64_t, uint64_t))(v41 - 8);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  v43(v39, v40, v42);
  v44 = v50[8];
  v45 = v16 + v44;
  v46 = v51 + v44;
  v47 = sub_1BCAB5514();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v47 - 8) + 16))(v45, v46, v47);
  result = v54;
  *(_BYTE *)(v54 + *(int *)(v52 + 32)) = *(_BYTE *)(v53 + *(int *)(v52 + 32));
  return result;
}

uint64_t sub_1BC9CB99C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(char *, uint64_t, uint64_t);
  int v25;
  int v26;
  uint64_t v27;
  int *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;

  v6 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = v6;
  v7 = a2[2];
  *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
  *(_QWORD *)(a1 + 16) = v7;
  v8 = *(int *)(a3 + 24);
  v9 = a1 + v8;
  v10 = (uint64_t)a2 + v8;
  v11 = sub_1BCAB4F68();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 24))(v9, v10, v11);
  v12 = type metadata accessor for TimeBasedDistribution();
  *(_QWORD *)(v9 + *(int *)(v12 + 20)) = *(_QWORD *)(v10 + *(int *)(v12 + 20));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v13 = *(int *)(v12 + 24);
  v14 = (_QWORD *)(v9 + v13);
  v15 = (_QWORD *)(v10 + v13);
  *v14 = *v15;
  v14[1] = v15[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v47 = a3;
  v48 = a2;
  v16 = *(int *)(a3 + 28);
  v17 = a1 + v16;
  v18 = (uint64_t)a2 + v16;
  *(_BYTE *)(a1 + v16) = *(_BYTE *)v18;
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + v16 + 8), (uint64_t *)(v18 + 8));
  v44 = (int *)type metadata accessor for TimeBasedDistributionChartModel();
  v45 = v18;
  v19 = v44[6];
  v46 = v17;
  v20 = (char *)(v17 + v19);
  v21 = (char *)(v18 + v19);
  v22 = sub_1BCAB5754();
  v23 = *(_QWORD *)(v22 - 8);
  v24 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v23 + 48);
  v25 = v24(v20, 1, v22);
  v26 = v24(v21, 1, v22);
  if (v25)
  {
    if (!v26)
    {
      (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v20, v21, v22);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v26)
  {
    (*(void (**)(char *, uint64_t))(v23 + 8))(v20, v22);
LABEL_6:
    sub_1BC998AB0(0, (unint64_t *)&qword_1EF478060, (uint64_t (*)(uint64_t))MEMORY[0x1E0C93AA8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v23 + 24))(v20, v21, v22);
LABEL_7:
  v28 = (int *)type metadata accessor for TimeBasedDistributionChartDesign();
  v29 = v28[5];
  v30 = &v20[v29];
  v31 = &v21[v29];
  v32 = v24(&v20[v29], 1, v22);
  v33 = v24(v31, 1, v22);
  if (!v32)
  {
    if (!v33)
    {
      (*(void (**)(char *, char *, uint64_t))(v23 + 24))(v30, v31, v22);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v23 + 8))(v30, v22);
    goto LABEL_12;
  }
  if (v33)
  {
LABEL_12:
    sub_1BC998AB0(0, (unint64_t *)&qword_1EF478060, (uint64_t (*)(uint64_t))MEMORY[0x1E0C93AA8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v30, v31, v22);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v30, 0, 1, v22);
LABEL_13:
  *(_QWORD *)&v20[v28[6]] = *(_QWORD *)&v21[v28[6]];
  swift_retain();
  swift_release();
  *(_QWORD *)&v20[v28[7]] = *(_QWORD *)&v21[v28[7]];
  swift_retain();
  swift_release();
  *(_QWORD *)&v20[v28[8]] = *(_QWORD *)&v21[v28[8]];
  swift_retain();
  swift_release();
  *(_QWORD *)&v20[v28[9]] = *(_QWORD *)&v21[v28[9]];
  swift_retain();
  swift_release();
  v35 = v28[10];
  v36 = &v20[v35];
  v37 = &v21[v35];
  v38 = sub_1BCAB5958();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v38 - 8) + 24))(v36, v37, v38);
  *(_QWORD *)&v20[v28[11]] = *(_QWORD *)&v21[v28[11]];
  swift_retain();
  swift_release();
  *(_QWORD *)&v20[v28[12]] = *(_QWORD *)&v21[v28[12]];
  swift_retain();
  swift_release();
  *(_QWORD *)&v20[v28[13]] = *(_QWORD *)&v21[v28[13]];
  swift_retain();
  swift_release();
  *(_QWORD *)&v20[v28[14]] = *(_QWORD *)&v21[v28[14]];
  swift_retain();
  swift_release();
  *(_QWORD *)&v20[v28[15]] = *(_QWORD *)&v21[v28[15]];
  swift_retain();
  swift_release();
  *(_QWORD *)&v20[v28[16]] = *(_QWORD *)&v21[v28[16]];
  swift_retain();
  swift_release();
  *(_QWORD *)&v20[v28[17]] = *(_QWORD *)&v21[v28[17]];
  *(_QWORD *)&v20[v28[18]] = *(_QWORD *)&v21[v28[18]];
  *(_QWORD *)&v20[v28[19]] = *(_QWORD *)&v21[v28[19]];
  *(_QWORD *)&v20[v28[20]] = *(_QWORD *)&v21[v28[20]];
  *(_QWORD *)&v20[v28[21]] = *(_QWORD *)&v21[v28[21]];
  *(_QWORD *)&v20[v28[22]] = *(_QWORD *)&v21[v28[22]];
  *(_QWORD *)&v20[v28[23]] = *(_QWORD *)&v21[v28[23]];
  *(_QWORD *)&v20[v28[24]] = *(_QWORD *)&v21[v28[24]];
  v20[v28[25]] = v21[v28[25]];
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(v46 + v44[7]), (uint64_t *)(v45 + v44[7]));
  v39 = v44[8];
  v40 = v46 + v39;
  v41 = v45 + v39;
  v42 = sub_1BCAB5514();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 24))(v40, v41, v42);
  *(_BYTE *)(a1 + *(int *)(v47 + 32)) = *((_BYTE *)v48 + *(int *)(v47 + 32));
  return a1;
}

uint64_t sub_1BC9CBE74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int (*v19)(char *, uint64_t, uint64_t);
  uint64_t v20;
  int *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t result;
  int *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v6 = *(int *)(a3 + 24);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = sub_1BCAB4F68();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = type metadata accessor for TimeBasedDistribution();
  *(_QWORD *)(v7 + *(int *)(v10 + 20)) = *(_QWORD *)(v8 + *(int *)(v10 + 20));
  *(_OWORD *)(v7 + *(int *)(v10 + 24)) = *(_OWORD *)(v8 + *(int *)(v10 + 24));
  v40 = a3;
  v41 = a2;
  v11 = *(int *)(a3 + 28);
  v42 = a1;
  v12 = a1 + v11;
  v13 = a2 + v11;
  *(_BYTE *)v12 = *(_BYTE *)v13;
  *(_OWORD *)(v12 + 8) = *(_OWORD *)(v13 + 8);
  *(_OWORD *)(v12 + 24) = *(_OWORD *)(v13 + 24);
  *(_QWORD *)(v12 + 40) = *(_QWORD *)(v13 + 40);
  v39 = (int *)type metadata accessor for TimeBasedDistributionChartModel();
  v14 = v39[6];
  v15 = (char *)(v12 + v14);
  v16 = (char *)(v13 + v14);
  v17 = sub_1BCAB5754();
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48);
  if (v19(v16, 1, v17))
  {
    sub_1BC998AB0(0, (unint64_t *)&qword_1EF478060, (uint64_t (*)(uint64_t))MEMORY[0x1E0C93AA8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v15, v16, v17);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
  }
  v21 = (int *)type metadata accessor for TimeBasedDistributionChartDesign();
  v22 = v21[5];
  v23 = &v15[v22];
  v24 = &v16[v22];
  if (v19(&v16[v22], 1, v17))
  {
    sub_1BC998AB0(0, (unint64_t *)&qword_1EF478060, (uint64_t (*)(uint64_t))MEMORY[0x1E0C93AA8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v23, v24, v17);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v23, 0, 1, v17);
  }
  *(_QWORD *)&v15[v21[6]] = *(_QWORD *)&v16[v21[6]];
  *(_QWORD *)&v15[v21[7]] = *(_QWORD *)&v16[v21[7]];
  *(_QWORD *)&v15[v21[8]] = *(_QWORD *)&v16[v21[8]];
  *(_QWORD *)&v15[v21[9]] = *(_QWORD *)&v16[v21[9]];
  v26 = v21[10];
  v27 = &v15[v26];
  v28 = &v16[v26];
  v29 = sub_1BCAB5958();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v29 - 8) + 32))(v27, v28, v29);
  *(_QWORD *)&v15[v21[11]] = *(_QWORD *)&v16[v21[11]];
  *(_QWORD *)&v15[v21[12]] = *(_QWORD *)&v16[v21[12]];
  *(_QWORD *)&v15[v21[13]] = *(_QWORD *)&v16[v21[13]];
  *(_QWORD *)&v15[v21[14]] = *(_QWORD *)&v16[v21[14]];
  *(_QWORD *)&v15[v21[15]] = *(_QWORD *)&v16[v21[15]];
  *(_QWORD *)&v15[v21[16]] = *(_QWORD *)&v16[v21[16]];
  *(_QWORD *)&v15[v21[17]] = *(_QWORD *)&v16[v21[17]];
  *(_QWORD *)&v15[v21[18]] = *(_QWORD *)&v16[v21[18]];
  *(_QWORD *)&v15[v21[19]] = *(_QWORD *)&v16[v21[19]];
  *(_QWORD *)&v15[v21[20]] = *(_QWORD *)&v16[v21[20]];
  *(_QWORD *)&v15[v21[21]] = *(_QWORD *)&v16[v21[21]];
  *(_QWORD *)&v15[v21[22]] = *(_QWORD *)&v16[v21[22]];
  *(_QWORD *)&v15[v21[23]] = *(_QWORD *)&v16[v21[23]];
  *(_QWORD *)&v15[v21[24]] = *(_QWORD *)&v16[v21[24]];
  v15[v21[25]] = v16[v21[25]];
  v30 = v39[7];
  v31 = v12 + v30;
  v32 = v13 + v30;
  *(_QWORD *)(v31 + 32) = *(_QWORD *)(v32 + 32);
  v33 = *(_OWORD *)(v32 + 16);
  *(_OWORD *)v31 = *(_OWORD *)v32;
  *(_OWORD *)(v31 + 16) = v33;
  v34 = v39[8];
  v35 = v12 + v34;
  v36 = v13 + v34;
  v37 = sub_1BCAB5514();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 32))(v35, v36, v37);
  result = v42;
  *(_BYTE *)(v42 + *(int *)(v40 + 32)) = *(_BYTE *)(v41 + *(int *)(v40 + 32));
  return result;
}

uint64_t sub_1BC9CC204(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(char *, uint64_t, uint64_t);
  int v25;
  int v26;
  uint64_t v27;
  int *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t result;
  int *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v6 = *(int *)(a3 + 24);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = sub_1BCAB4F68();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  v10 = type metadata accessor for TimeBasedDistribution();
  *(_QWORD *)(v7 + *(int *)(v10 + 20)) = *(_QWORD *)(v8 + *(int *)(v10 + 20));
  swift_bridgeObjectRelease();
  v11 = *(int *)(v10 + 24);
  v12 = (_QWORD *)(v7 + v11);
  v13 = (uint64_t *)(v8 + v11);
  v15 = *v13;
  v14 = v13[1];
  *v12 = v15;
  v12[1] = v14;
  swift_bridgeObjectRelease();
  v50 = a3;
  v51 = a2;
  v16 = *(int *)(a3 + 28);
  v52 = a1;
  v17 = a1 + v16;
  v18 = a2 + v16;
  *(_BYTE *)v17 = *(_BYTE *)(a2 + v16);
  __swift_destroy_boxed_opaque_existential_1(v17 + 8);
  *(_OWORD *)(v17 + 8) = *(_OWORD *)(v18 + 8);
  *(_OWORD *)(v17 + 24) = *(_OWORD *)(v18 + 24);
  *(_QWORD *)(v17 + 40) = *(_QWORD *)(v18 + 40);
  v48 = (int *)type metadata accessor for TimeBasedDistributionChartModel();
  v49 = v18;
  v19 = v48[6];
  v20 = (char *)(v17 + v19);
  v21 = (char *)(v18 + v19);
  v22 = sub_1BCAB5754();
  v23 = *(_QWORD *)(v22 - 8);
  v24 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v23 + 48);
  v25 = v24(v20, 1, v22);
  v26 = v24(v21, 1, v22);
  if (v25)
  {
    if (!v26)
    {
      (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v20, v21, v22);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v26)
  {
    (*(void (**)(char *, uint64_t))(v23 + 8))(v20, v22);
LABEL_6:
    sub_1BC998AB0(0, (unint64_t *)&qword_1EF478060, (uint64_t (*)(uint64_t))MEMORY[0x1E0C93AA8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v23 + 40))(v20, v21, v22);
LABEL_7:
  v28 = (int *)type metadata accessor for TimeBasedDistributionChartDesign();
  v29 = v28[5];
  v30 = &v20[v29];
  v31 = &v21[v29];
  v32 = v24(&v20[v29], 1, v22);
  v33 = v24(v31, 1, v22);
  if (!v32)
  {
    if (!v33)
    {
      (*(void (**)(char *, char *, uint64_t))(v23 + 40))(v30, v31, v22);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v23 + 8))(v30, v22);
    goto LABEL_12;
  }
  if (v33)
  {
LABEL_12:
    sub_1BC998AB0(0, (unint64_t *)&qword_1EF478060, (uint64_t (*)(uint64_t))MEMORY[0x1E0C93AA8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v30, v31, v22);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v30, 0, 1, v22);
LABEL_13:
  *(_QWORD *)&v20[v28[6]] = *(_QWORD *)&v21[v28[6]];
  swift_release();
  *(_QWORD *)&v20[v28[7]] = *(_QWORD *)&v21[v28[7]];
  swift_release();
  *(_QWORD *)&v20[v28[8]] = *(_QWORD *)&v21[v28[8]];
  swift_release();
  *(_QWORD *)&v20[v28[9]] = *(_QWORD *)&v21[v28[9]];
  swift_release();
  v35 = v28[10];
  v36 = &v20[v35];
  v37 = &v21[v35];
  v38 = sub_1BCAB5958();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v38 - 8) + 40))(v36, v37, v38);
  *(_QWORD *)&v20[v28[11]] = *(_QWORD *)&v21[v28[11]];
  swift_release();
  *(_QWORD *)&v20[v28[12]] = *(_QWORD *)&v21[v28[12]];
  swift_release();
  *(_QWORD *)&v20[v28[13]] = *(_QWORD *)&v21[v28[13]];
  swift_release();
  *(_QWORD *)&v20[v28[14]] = *(_QWORD *)&v21[v28[14]];
  swift_release();
  *(_QWORD *)&v20[v28[15]] = *(_QWORD *)&v21[v28[15]];
  swift_release();
  *(_QWORD *)&v20[v28[16]] = *(_QWORD *)&v21[v28[16]];
  swift_release();
  *(_QWORD *)&v20[v28[17]] = *(_QWORD *)&v21[v28[17]];
  *(_QWORD *)&v20[v28[18]] = *(_QWORD *)&v21[v28[18]];
  *(_QWORD *)&v20[v28[19]] = *(_QWORD *)&v21[v28[19]];
  *(_QWORD *)&v20[v28[20]] = *(_QWORD *)&v21[v28[20]];
  *(_QWORD *)&v20[v28[21]] = *(_QWORD *)&v21[v28[21]];
  *(_QWORD *)&v20[v28[22]] = *(_QWORD *)&v21[v28[22]];
  *(_QWORD *)&v20[v28[23]] = *(_QWORD *)&v21[v28[23]];
  *(_QWORD *)&v20[v28[24]] = *(_QWORD *)&v21[v28[24]];
  v20[v28[25]] = v21[v28[25]];
  v39 = v48[7];
  v40 = v17 + v39;
  v41 = v49 + v39;
  __swift_destroy_boxed_opaque_existential_1(v17 + v39);
  v42 = *(_OWORD *)(v41 + 16);
  *(_OWORD *)v40 = *(_OWORD *)v41;
  *(_OWORD *)(v40 + 16) = v42;
  *(_QWORD *)(v40 + 32) = *(_QWORD *)(v41 + 32);
  v43 = v48[8];
  v44 = v17 + v43;
  v45 = v49 + v43;
  v46 = sub_1BCAB5514();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 40))(v44, v45, v46);
  result = v52;
  *(_BYTE *)(v52 + *(int *)(v50 + 32)) = *(_BYTE *)(v51 + *(int *)(v50 + 32));
  return result;
}

uint64_t sub_1BC9CC698()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BC9CC6A4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v12;

  v6 = type metadata accessor for TimeBasedDistribution();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = a3[6];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v10 = type metadata accessor for TimeBasedDistributionChartModel();
  v7 = *(_QWORD *)(v10 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v10;
    v9 = a3[7];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v12 = *(unsigned __int8 *)(a1 + a3[8]);
  if (v12 >= 2)
    return ((v12 + 2147483646) & 0x7FFFFFFF) + 1;
  else
    return 0;
}

uint64_t sub_1BC9CC758()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BC9CC764(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  v8 = type metadata accessor for TimeBasedDistribution();
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = a4[6];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
  }
  result = type metadata accessor for TimeBasedDistributionChartModel();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = a4[7];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
  }
  *(_BYTE *)(a1 + a4[8]) = a2 + 1;
  return result;
}

uint64_t type metadata accessor for AFibBurdenTimeOfDayChart()
{
  uint64_t result;

  result = qword_1EF478670;
  if (!qword_1EF478670)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_1BC9CC840()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = type metadata accessor for TimeBasedDistribution();
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for TimeBasedDistributionChartModel();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

void sub_1BC9CC8D8()
{
  qword_1EF486D18 = 0x4045000000000000;
}

void sub_1BC9CC8E8()
{
  qword_1EF486D20 = 0x4040000000000000;
}

id sub_1BC9CC8F8()
{
  id result;

  result = (id)HKDateFormatterFromTemplate();
  if (result)
    qword_1EF486D28 = (uint64_t)result;
  else
    __break(1u);
  return result;
}

uint64_t sub_1BC9CC928@<X0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  unsigned __int8 *v38;
  uint64_t v39;
  uint64_t (*v40)(uint64_t);
  uint64_t result;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t OpaqueTypeConformance2;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  void (*v59)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t KeyPath;
  _BOOL4 IsRightToLeft;
  unsigned int *v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t *v98;
  char *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  unsigned __int8 *v124;
  uint64_t v125;
  unsigned __int8 *v126;
  char v127;
  uint64_t v128;
  uint64_t v129;
  __int128 v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  unint64_t v134;

  v107 = a4;
  v7 = sub_1BCAB5964();
  v123 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v122 = (char *)&v95 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for TimeBasedDistributionChartModel();
  v119 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v120 = v10;
  v121 = (uint64_t)&v95 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BC998AB0(0, &qword_1EF4786D0, (uint64_t (*)(uint64_t))MEMORY[0x1E0C93C30], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v11);
  v115 = (char *)&v95 - v12;
  sub_1BC9B69A0();
  v14 = v13;
  MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v95 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BC9B6284();
  v18 = v17;
  v96 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17);
  v20 = (char *)&v95 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BC9B61B0(0);
  v98 = v21;
  v97 = *(v21 - 1);
  MEMORY[0x1E0C80A78](v21);
  v23 = (char *)&v95 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BC9B614C();
  v101 = v24;
  MEMORY[0x1E0C80A78](v24);
  v99 = (char *)&v95 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BC9B60B8(0);
  v104 = v26;
  v103 = *(_QWORD *)(v26 - 8);
  MEMORY[0x1E0C80A78](v26);
  v100 = (char *)&v95 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BC9B5FF8(0);
  v108 = v28;
  v106 = *(_QWORD *)(v28 - 8);
  MEMORY[0x1E0C80A78](v28);
  v105 = (char *)&v95 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BC9B5ED4(0);
  v111 = v30;
  v110 = *(_QWORD *)(v30 - 8);
  MEMORY[0x1E0C80A78](v30);
  v109 = (char *)&v95 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BC9B5D4C(0);
  v114 = v32;
  v113 = *(_QWORD *)(v32 - 8);
  MEMORY[0x1E0C80A78](v32);
  v112 = (char *)&v95 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BC9B5B64(0);
  v118 = v34;
  v117 = *(_QWORD *)(v34 - 8);
  MEMORY[0x1E0C80A78](v34);
  v116 = (char *)&v95 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v102 = sub_1BC9C2720(a1, a2);
  v125 = v102;
  v126 = a2;
  v36 = a3;
  v127 = a3;
  sub_1BC9B62E4();
  sub_1BC9B6850();
  sub_1BCAB56F4();
  v37 = *(int *)(v9 + 24);
  v124 = a2;
  v38 = &a2[v37 + *(int *)(type metadata accessor for TimeBasedDistributionChartDesign() + 40)];
  v39 = sub_1BCAB5958();
  v40 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CD9958];
  (*(void (**)(char *, unsigned __int8 *, uint64_t))(*(_QWORD *)(v39 - 8) + 16))(v16, v38, v39);
  sub_1BC996948(&qword_1ED6C3568, v40, MEMORY[0x1E0CD9990]);
  result = sub_1BCAB5ED4();
  if ((result & 1) != 0)
  {
    v42 = sub_1BC996948(&qword_1EF4781B8, (uint64_t (*)(uint64_t))sub_1BC9B6284, MEMORY[0x1E0C939B0]);
    v43 = sub_1BC996948(&qword_1ED6C3608, (uint64_t (*)(uint64_t))sub_1BC9B69A0, MEMORY[0x1E0DECD88]);
    v95 = v7;
    v44 = v43;
    sub_1BCAB5CF4();
    sub_1BC997208((uint64_t)v16, (uint64_t (*)(_QWORD))sub_1BC9B69A0);
    (*(void (**)(char *, uint64_t))(v96 + 8))(v20, v18);
    v131 = sub_1BCAB5F04();
    v132 = v45;
    swift_bridgeObjectRetain();
    sub_1BCAB5F70();
    swift_bridgeObjectRelease();
    v131 = v18;
    v132 = v14;
    v133 = v42;
    v134 = v44;
    swift_getOpaqueTypeConformance2();
    v46 = (uint64_t)v99;
    v47 = v98;
    sub_1BCAB5CDC();
    swift_bridgeObjectRelease();
    v48 = (*(uint64_t (**)(char *, uint64_t *))(v97 + 8))(v23, v47);
    v98 = &v95;
    MEMORY[0x1E0C80A78](v48);
    *(&v95 - 2) = (uint64_t)v124;
    *((_BYTE *)&v95 - 8) = v36 & 1;
    sub_1BC9CF360(0, (unint64_t *)&qword_1EF4781C0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0C93820]);
    v50 = v49;
    v51 = sub_1BC9B7330();
    v52 = sub_1BC9B7434();
    v53 = v100;
    v54 = v101;
    sub_1BCAB5C70();
    sub_1BC997208(v46, (uint64_t (*)(_QWORD))sub_1BC9B614C);
    v131 = v54;
    v132 = v50;
    v133 = v51;
    v134 = v52;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
    v56 = v105;
    v57 = v104;
    sub_1BCAB5C88();
    (*(void (**)(char *, uint64_t))(v103 + 8))(v53, v57);
    v130 = xmmword_1BCAC0310;
    v58 = sub_1BCAB57CC();
    v59 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v58 - 8) + 56);
    v60 = (uint64_t)v115;
    v59(v115, 1, 1, v58);
    sub_1BC9B75E4(0, &qword_1EF478270, MEMORY[0x1E0DEB418], MEMORY[0x1E0DEB430], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEA4B0]);
    v62 = v61;
    v131 = v57;
    v132 = OpaqueTypeConformance2;
    v63 = swift_getOpaqueTypeConformance2();
    v64 = sub_1BC9B756C();
    v65 = v109;
    v66 = v108;
    sub_1BCAB5C94();
    sub_1BC9CF2BC(v60);
    (*(void (**)(char *, uint64_t))(v106 + 8))(v56, v66);
    v67 = sub_1BC9DDA48(v102);
    swift_bridgeObjectRelease();
    TimeBasedDistributionChartModel.determineYAxisRange(chartPoints:)(v67);
    v69 = v68;
    v71 = v70;
    swift_bridgeObjectRelease();
    v128 = v69;
    v129 = v71;
    v59((char *)v60, 1, 1, v58);
    sub_1BC9B75E4(0, (unint64_t *)&qword_1ED6C7560, MEMORY[0x1E0DEB070], MEMORY[0x1E0DEB098], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEA4B0]);
    v73 = v72;
    v131 = v66;
    v132 = v62;
    v133 = v63;
    v134 = v64;
    v74 = swift_getOpaqueTypeConformance2();
    v75 = sub_1BC9B762C();
    v76 = v112;
    v77 = v111;
    sub_1BCAB5CA0();
    sub_1BC9CF2BC(v60);
    (*(void (**)(char *, uint64_t))(v110 + 8))(v65, v77);
    v78 = v121;
    sub_1BC9964B8((uint64_t)v124, v121, (uint64_t (*)(_QWORD))type metadata accessor for TimeBasedDistributionChartModel);
    v79 = (*(unsigned __int8 *)(v119 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v119 + 80);
    v80 = swift_allocObject();
    sub_1BC9AE330(v78, v80 + v79, (uint64_t (*)(_QWORD))type metadata accessor for TimeBasedDistributionChartModel);
    sub_1BC9B76A4(0);
    v131 = v77;
    v132 = v73;
    v133 = v74;
    v134 = v75;
    swift_getOpaqueTypeConformance2();
    sub_1BC9B6708(&qword_1EF478290, (uint64_t (*)(uint64_t))sub_1BC9B76A4, sub_1BC9B76C0, MEMORY[0x1E0CD8D70]);
    v81 = v116;
    v82 = v114;
    sub_1BCAB5CB8();
    swift_release();
    (*(void (**)(char *, uint64_t))(v113 + 8))(v76, v82);
    KeyPath = swift_getKeyPath();
    IsRightToLeft = HKUILocaleIsRightToLeft();
    v85 = (unsigned int *)MEMORY[0x1E0CD9A98];
    v87 = v122;
    v86 = v123;
    if (!IsRightToLeft)
      v85 = (unsigned int *)MEMORY[0x1E0CD9A90];
    v88 = v95;
    (*(void (**)(char *, _QWORD, uint64_t))(v123 + 104))(v122, *v85, v95);
    sub_1BC9B5AE8();
    v90 = v107;
    v91 = (uint64_t *)(v107 + *(int *)(v89 + 36));
    sub_1BC998AB0(0, &qword_1ED6C35C0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CD9AA8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CDCF68]);
    (*(void (**)(char *, char *, uint64_t))(v86 + 16))((char *)v91 + *(int *)(v92 + 28), v87, v88);
    *v91 = KeyPath;
    v93 = v117;
    v94 = v118;
    (*(void (**)(uint64_t, char *, uint64_t))(v117 + 16))(v90, v81, v118);
    (*(void (**)(char *, uint64_t))(v86 + 8))(v87, v88);
    return (*(uint64_t (**)(char *, uint64_t))(v93 + 8))(v81, v94);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1BC9CD3CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t OpaqueTypeConformance2;
  uint64_t v22;
  uint64_t v23;
  _QWORD v25[3];
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v25[2] = a4;
  v7 = type metadata accessor for TimeBasedDistributionChartModel();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  MEMORY[0x1E0C80A78](v7);
  v30 = a1;
  sub_1BC9964B8(a2, (uint64_t)v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(_QWORD))type metadata accessor for TimeBasedDistributionChartModel);
  v10 = (*(unsigned __int8 *)(v8 + 80) + 17) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v11 = swift_allocObject();
  *(_BYTE *)(v11 + 16) = a3;
  sub_1BC9AE330((uint64_t)v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v11 + v10, (uint64_t (*)(_QWORD))type metadata accessor for TimeBasedDistributionChartModel);
  sub_1BC998AB0(0, &qword_1EF478158, type metadata accessor for TimeBasedDistributionChartPoint.TimeOfDay, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
  v25[1] = v12;
  sub_1BC9B6390(0);
  sub_1BC9B67F0();
  sub_1BC9B64D0(255);
  v14 = v13;
  sub_1BC9B65A0(255);
  v16 = v15;
  v17 = MEMORY[0x1E0C939E0];
  sub_1BC9B6EA4(255, (unint64_t *)&qword_1EF478170, (uint64_t (*)(uint64_t))MEMORY[0x1E0C939F0], MEMORY[0x1E0C939E0], MEMORY[0x1E0C934E8]);
  v19 = v18;
  v20 = sub_1BCAB5718();
  swift_bridgeObjectRetain();
  v26 = v20;
  v27 = v17;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  v26 = v19;
  v27 = MEMORY[0x1E0CDF5D0];
  v28 = OpaqueTypeConformance2;
  v29 = MEMORY[0x1E0CDF598];
  v22 = swift_getOpaqueTypeConformance2();
  v23 = sub_1BC9B6708(&qword_1EF478188, (uint64_t (*)(uint64_t))sub_1BC9B65A0, sub_1BC9B66E4, MEMORY[0x1E0CD90E0]);
  v26 = v14;
  v27 = v16;
  v28 = v22;
  v29 = v23;
  swift_getOpaqueTypeConformance2();
  sub_1BC996948(&qword_1EF4786E8, type metadata accessor for TimeBasedDistributionChartPoint.TimeOfDay, (uint64_t)&protocol conformance descriptor for TimeBasedDistributionChartPoint.TimeOfDay);
  return sub_1BCAB5DCC();
}

uint64_t sub_1BC9CD614@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v27 = a1;
  v28 = a3;
  sub_1BC9B6ABC(0, &qword_1EF478200, &qword_1EF478208, (uint64_t (*)(uint64_t))sub_1BC9B6E14, (void (*)(void))sub_1BC9B7174);
  v25 = *(_QWORD *)(v4 - 8);
  v26 = v4;
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v25 - v5;
  v7 = sub_1BCAB5658();
  MEMORY[0x1E0C80A78](v7);
  v8 = sub_1BCAB55EC();
  MEMORY[0x1E0C80A78](v8);
  v9 = type metadata accessor for TimeBasedDistributionChartModel();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BC9B6ABC(0, &qword_1EF4781C8, &qword_1EF4781D0, (uint64_t (*)(uint64_t))sub_1BC9B6B34, (void (*)(void))sub_1BC9B6D18);
  v14 = v13;
  v15 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v25 - v16;
  if ((a2 & 1) != 0)
  {
    sub_1BC9964B8(v27, (uint64_t)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(_QWORD))type metadata accessor for TimeBasedDistributionChartModel);
    v18 = (*(unsigned __int8 *)(v10 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
    v19 = swift_allocObject();
    sub_1BC9AE330((uint64_t)v12, v19 + v18, (uint64_t (*)(_QWORD))type metadata accessor for TimeBasedDistributionChartModel);
    sub_1BCAB55E0();
    sub_1BCAB564C();
    sub_1BC998AB0(0, &qword_1EF4781D0, (uint64_t (*)(uint64_t))sub_1BC9B6B34, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    sub_1BC9B6D18();
    sub_1BCAB57A8();
    (*(void (**)(uint64_t, char *, uint64_t))(v15 + 16))(v28, v17, v14);
    sub_1BC9CF360(0, &qword_1EF4786D8, MEMORY[0x1E0C93808]);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  }
  else
  {
    sub_1BCAB55D4();
    sub_1BCA7C7F8(0, 24);
    sub_1BC9964B8(v27, (uint64_t)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(_QWORD))type metadata accessor for TimeBasedDistributionChartModel);
    v21 = (*(unsigned __int8 *)(v10 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
    v22 = swift_allocObject();
    sub_1BC9AE330((uint64_t)v12, v22 + v21, (uint64_t (*)(_QWORD))type metadata accessor for TimeBasedDistributionChartModel);
    sub_1BCAB564C();
    sub_1BC998AB0(0, &qword_1EF478208, (uint64_t (*)(uint64_t))sub_1BC9B6E14, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    sub_1BC9B7174();
    sub_1BCAB57A8();
    v24 = v25;
    v23 = v26;
    (*(void (**)(uint64_t, char *, uint64_t))(v25 + 16))(v28, v6, v26);
    sub_1BC9CF360(0, &qword_1EF4786D8, MEMORY[0x1E0C93808]);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v6, v23);
  }
}

double sub_1BC9CD9E4@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _OWORD *v6;
  double result;
  __int128 v8;
  __int128 v9;
  __int128 v10;

  type metadata accessor for TimeBasedDistributionChartModel();
  type metadata accessor for TimeBasedDistributionChartDesign();
  sub_1BCAB5DE4();
  sub_1BCAB5934();
  v4 = sub_1BCAB5664();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  sub_1BC9B76A4(0);
  v6 = (_OWORD *)(a2 + *(int *)(v5 + 36));
  *v6 = v8;
  v6[1] = v9;
  result = *(double *)&v10;
  v6[2] = v10;
  return result;
}

uint64_t sub_1BC9CDA9C@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t (*v16)(uint64_t);
  double v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  double v46;
  char *v47;
  uint64_t OpaqueTypeConformance2;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  int v66;
  double v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;

  v57 = a3;
  v66 = a2;
  v64 = a4;
  v5 = type metadata accessor for TimeBasedDistributionChartModel();
  v58 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v59 = v6;
  v60 = (uint64_t)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  OpaqueTypeConformance2 = type metadata accessor for TimeBasedDistributionChartPoint.TimeOfDay(0);
  v54 = *(_QWORD *)(OpaqueTypeConformance2 - 8);
  MEMORY[0x1E0C80A78](OpaqueTypeConformance2);
  v55 = v7;
  v51 = (uint64_t)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1BCAB5688();
  v62 = *(_QWORD *)(v8 - 8);
  v63 = v8;
  MEMORY[0x1E0C80A78](v8);
  v61 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = sub_1BCAB5A84();
  v44 = *(_QWORD *)(v45 - 8);
  MEMORY[0x1E0C80A78](v45);
  v41 = (char *)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BC9B75E4(0, (unint64_t *)&qword_1EF477EE8, MEMORY[0x1E0DEB070], MEMORY[0x1E0C93DE0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0C93770]);
  MEMORY[0x1E0C80A78](v11);
  MEMORY[0x1E0C80A78](v12);
  *(double *)&v13 = COERCE_DOUBLE(sub_1BCAB5718());
  v42 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v41 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BC9B6EA4(0, (unint64_t *)&qword_1EF478170, v16, MEMORY[0x1E0C939E0], MEMORY[0x1E0C934E8]);
  v46 = v17;
  v43 = *(_QWORD *)(*(_QWORD *)&v17 - 8);
  MEMORY[0x1E0C80A78](*(_QWORD *)&v17);
  v19 = (char *)&v41 - v18;
  sub_1BC9B64D0(0);
  v53 = v20;
  v52 = *(_QWORD *)(v20 - 8);
  MEMORY[0x1E0C80A78](v20);
  v65 = (char *)&v41 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BC9B6390(0);
  v50 = v22;
  v49 = *(_QWORD *)(v22 - 8);
  MEMORY[0x1E0C80A78](v22);
  v47 = (char *)&v41 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BCAB5A6C();
  v67 = *(double *)(a1 + 16) + 2.0;
  sub_1BCAB5634();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1BCAB5A6C();
  v56 = a1;
  v67 = *(double *)(a1 + 8);
  sub_1BCAB5634();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v66 & 1) != 0)
  {
    if (qword_1EF477C10 == -1)
      goto LABEL_5;
    goto LABEL_6;
  }
  if (qword_1EF477C08 != -1)
LABEL_6:
    swift_once();
LABEL_5:
  sub_1BCAB570C();
  v24 = v44;
  v25 = v41;
  v26 = v45;
  (*(void (**)(char *, _QWORD, uint64_t))(v44 + 104))(v41, *MEMORY[0x1E0CDB0C0], v45);
  v27 = MEMORY[0x1E0C939E0];
  sub_1BCAB5580();
  (*(void (**)(char *, uint64_t))(v24 + 8))(v25, v26);
  (*(void (**)(char *, uint64_t))(v42 + 8))(v15, v13);
  v28 = v56;
  v71 = *(_QWORD *)(v56 + *(int *)(OpaqueTypeConformance2 + 32));
  v67 = *(double *)&v13;
  v68 = v27;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  v29 = v46;
  sub_1BCAB558C();
  (*(void (**)(char *, double))(v43 + 8))(v19, COERCE_DOUBLE(*(_QWORD *)&v29));
  v30 = v61;
  sub_1BCAB567C();
  v31 = v51;
  sub_1BC9964B8(v28, v51, type metadata accessor for TimeBasedDistributionChartPoint.TimeOfDay);
  v32 = v60;
  sub_1BC9964B8(v57, v60, (uint64_t (*)(_QWORD))type metadata accessor for TimeBasedDistributionChartModel);
  v33 = (*(unsigned __int8 *)(v54 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v54 + 80);
  v34 = v33 + v55;
  v35 = (*(unsigned __int8 *)(v58 + 80) + v33 + v55 + 1) & ~(unint64_t)*(unsigned __int8 *)(v58 + 80);
  v36 = swift_allocObject();
  sub_1BC9AE330(v31, v36 + v33, type metadata accessor for TimeBasedDistributionChartPoint.TimeOfDay);
  *(_BYTE *)(v36 + v34) = v66 & 1;
  sub_1BC9AE330(v32, v36 + v35, (uint64_t (*)(_QWORD))type metadata accessor for TimeBasedDistributionChartModel);
  sub_1BCAB5DE4();
  sub_1BC9B65A0(0);
  v67 = v29;
  v68 = MEMORY[0x1E0CDF5D0];
  v69 = OpaqueTypeConformance2;
  v70 = MEMORY[0x1E0CDF598];
  swift_getOpaqueTypeConformance2();
  sub_1BC9B6708(&qword_1EF478188, (uint64_t (*)(uint64_t))sub_1BC9B65A0, sub_1BC9B66E4, MEMORY[0x1E0CD90E0]);
  v37 = v47;
  v38 = v53;
  v39 = v65;
  sub_1BCAB555C();
  swift_release();
  (*(void (**)(char *, uint64_t))(v62 + 8))(v30, v63);
  (*(void (**)(char *, uint64_t))(v52 + 8))(v39, v38);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v49 + 32))(v64, v37, v50);
}

double sub_1BC9CE1E0@<D0>(_BYTE *a1@<X1>, char a2@<W2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t KeyPath;
  int v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double result;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;

  v8 = sub_1BCAB4CE0();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for TimeBasedDistributionChartPoint.TimeOfDay(0);
  (*(void (**)(char *, _BYTE *, uint64_t))(v9 + 16))(v11, &a1[*(int *)(v12 + 28)], v8);
  v13 = sub_1BCAB5C58();
  v31 = v14;
  v32 = v13;
  HIDWORD(v30) = v15;
  v33 = v16;
  KeyPath = swift_getKeyPath();
  v18 = *a1;
  v19 = (char)v18;
  if ((v18 - 2) >= 2)
  {
    if (!*a1)
    {
      if ((a2 & 1) != 0)
      {
        if (qword_1EF477C10 == -1)
          goto LABEL_12;
      }
      else if (qword_1EF477C08 == -1)
      {
        goto LABEL_12;
      }
      goto LABEL_13;
    }
    if ((a2 & 1) != 0)
    {
      if (qword_1EF477C10 == -1)
        goto LABEL_12;
      goto LABEL_13;
    }
    if (qword_1EF477C08 != -1)
LABEL_13:
      swift_once();
  }
LABEL_12:
  sub_1BCAB5DE4();
  sub_1BCAB5934();
  v20 = v34;
  v21 = v35;
  v22 = v36;
  v23 = v37;
  v24 = v38;
  v25 = v39;
  v26 = qword_1BCAC0498[v19];
  v27 = a3 + *(int *)(type metadata accessor for TimeBasedDistributionChartModel() + 24);
  result = *(double *)(v27 + *(int *)(type metadata accessor for TimeBasedDistributionChartDesign() + 4 * v26));
  v29 = v31;
  *(_QWORD *)a4 = v32;
  *(_QWORD *)(a4 + 8) = v29;
  *(_BYTE *)(a4 + 16) = BYTE4(v30) & 1;
  *(_QWORD *)(a4 + 24) = v33;
  *(_QWORD *)(a4 + 32) = KeyPath;
  *(_BYTE *)(a4 + 40) = 1;
  *(_QWORD *)(a4 + 48) = v20;
  *(_BYTE *)(a4 + 56) = v21;
  *(_QWORD *)(a4 + 64) = v22;
  *(_BYTE *)(a4 + 72) = v23;
  *(_QWORD *)(a4 + 80) = v24;
  *(_QWORD *)(a4 + 88) = v25;
  *(_QWORD *)(a4 + 96) = 0;
  *(double *)(a4 + 104) = result;
  return result;
}

uint64_t sub_1BC9CE468@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  double v6;
  double v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;

  v4 = sub_1BCAB56D0();
  MEMORY[0x1E0C80A78](v4);
  v5 = sub_1BCAB56E8();
  MEMORY[0x1E0C80A78](v5);
  sub_1BC9B75E4(0, &qword_1EF4781E8, MEMORY[0x1E0CDDD78], MEMORY[0x1E0CDDD58], MEMORY[0x1E0C93720]);
  v7 = v6;
  v29 = *(_QWORD *)(*(_QWORD *)&v6 - 8);
  MEMORY[0x1E0C80A78](*(_QWORD *)&v6);
  v9 = (char *)&v28 - v8;
  sub_1BC9B6C08(0);
  v30 = *(_QWORD *)(v10 - 8);
  v31 = v10;
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BC9B6B34(0);
  v14 = v13;
  v15 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13);
  v28 = (char *)&v28 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = sub_1BCAB57C0();
  if ((v33 & 1) != 0)
  {
    v18 = 1;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 56))(a2, v18, 1, v14);
  }
  if ((~*(_QWORD *)&v32 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v32 <= -9.22337204e18)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if (v32 < 9.22337204e18)
  {
    v32 = COERCE_DOUBLE(sub_1BC9CF640((uint64_t)v32));
    v33 = v19;
    sub_1BCAB56DC();
    sub_1BCAB56C4();
    sub_1BC9A10F8();
    sub_1BCAB561C();
    v20 = type metadata accessor for TimeBasedDistributionChartModel();
    v21 = a1;
    v22 = v15;
    v23 = v14;
    v24 = v21 + *(int *)(v20 + 24);
    v32 = *(double *)(v24 + *(int *)(type metadata accessor for TimeBasedDistributionChartDesign() + 64));
    v25 = sub_1BC9B6CB0();
    sub_1BCAB5724();
    (*(void (**)(char *, double))(v29 + 8))(v9, COERCE_DOUBLE(*(_QWORD *)&v7));
    v14 = v23;
    v15 = v22;
    v32 = v7;
    v33 = MEMORY[0x1E0CDF5D0];
    v34 = v25;
    v35 = MEMORY[0x1E0CDF598];
    swift_getOpaqueTypeConformance2();
    v26 = v28;
    v27 = v31;
    sub_1BCAB5730();
    (*(void (**)(char *, uint64_t))(v30 + 8))(v12, v27);
    (*(void (**)(uint64_t, char *, uint64_t))(v15 + 32))(a2, v26, v14);
    v18 = 0;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 56))(a2, v18, 1, v14);
  }
LABEL_10:
  __break(1u);
  return result;
}

void sub_1BC9CE7F0(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t (*v28)(uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  long double v39;
  void (*v40)(char *, char *, uint64_t);
  uint64_t v41;
  unint64_t v42;
  char *v43;
  unint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t OpaqueTypeConformance2;
  unint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(char *, char *, uint64_t);
  uint64_t v57;
  void (*v58)(char *, char *, uint64_t);
  char *v59;
  uint64_t v60;
  void (*v61)(char *, char *, uint64_t);
  char *v62;
  char *v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  void (*v67)(char *, uint64_t);
  void (*v68)(char *, uint64_t);
  uint64_t v69;
  void (*v70)(char *, char *, uint64_t);
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  char *v75;
  char *v76;
  char *v77;
  char *v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  __int128 v100;
  __int128 v101;
  uint64_t v102;
  __int128 v103;
  __int128 v104;
  uint64_t v105;

  v91 = a1;
  sub_1BC9CF9D4();
  v93 = v3;
  MEMORY[0x1E0C80A78](v3);
  v92 = (char *)&v70 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BC998AB0(0, &qword_1EF478208, (uint64_t (*)(uint64_t))sub_1BC9B6E14, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v5);
  v94 = (char *)&v70 - v6;
  v7 = sub_1BCAB56D0();
  MEMORY[0x1E0C80A78](v7);
  v78 = (char *)&v70 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1BCAB56E8();
  MEMORY[0x1E0C80A78](v9);
  v76 = (char *)&v70 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BC9B75E4(0, &qword_1EF4781E8, MEMORY[0x1E0CDDD78], MEMORY[0x1E0CDDD58], MEMORY[0x1E0C93720]);
  v81 = v11;
  v79 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v77 = (char *)&v70 - v12;
  sub_1BC9B70E0(0);
  v86 = v13;
  v84 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13);
  v83 = (char *)&v70 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BC9B700C(0);
  v82 = v15;
  v87 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15);
  v85 = (char *)&v70 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BC9B6F14(0);
  v88 = v17;
  v89 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17);
  v90 = (char *)&v70 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19);
  v80 = (char *)&v70 - v20;
  MEMORY[0x1E0C80A78](v21);
  v23 = (char *)&v70 - v22;
  v24 = sub_1BCAB5754();
  v25 = *(_QWORD *)(v24 - 8);
  MEMORY[0x1E0C80A78](v24);
  v27 = (char *)&v70 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BC9B6EA4(0, &qword_1EF478218, v28, MEMORY[0x1E0C93A98], MEMORY[0x1E0C93A60]);
  v30 = v29;
  v31 = *(_QWORD *)(v29 - 8);
  MEMORY[0x1E0C80A78](v29);
  v33 = (char *)&v70 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v34);
  v36 = (char *)&v70 - v35;
  sub_1BCAB57C0();
  if ((BYTE8(v103) & 1) != 0)
  {
    sub_1BC9B6E14();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 56))(a2, 1, 1, v37);
    return;
  }
  v72 = a2;
  v38 = v103;
  v39 = *(double *)&v103;
  sub_1BCAB5910();
  v103 = v100;
  v104 = v101;
  v105 = v102;
  sub_1BCAB5748();
  sub_1BCAB573C();
  (*(void (**)(char *, uint64_t))(v25 + 8))(v27, v24);
  v40 = *(void (**)(char *, char *, uint64_t))(v31 + 32);
  v40(v36, v33, v30);
  if (remainder(v39, 12.0) != 0.0)
  {
    v41 = 0;
    v42 = 0xE000000000000000;
    goto LABEL_9;
  }
  if ((~v38 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_16;
  }
  if (v39 <= -9.22337204e18)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (v39 >= 9.22337204e18)
  {
LABEL_17:
    __break(1u);
    return;
  }
  v41 = sub_1BC9CF640((uint64_t)v39);
LABEL_9:
  v95 = v41;
  v96 = v42;
  v71 = v30;
  v75 = v33;
  v74 = v31;
  v73 = v36;
  v70 = v40;
  if (v39 == 0.0)
  {
    sub_1BCAB5E20();
  }
  else if (v39 == 24.0)
  {
    sub_1BCAB5E2C();
  }
  else
  {
    sub_1BCAB5E38();
  }
  sub_1BCAB56DC();
  sub_1BCAB56C4();
  sub_1BC9A10F8();
  v43 = v77;
  sub_1BCAB561C();
  v44 = sub_1BC9B6CB0();
  v45 = v83;
  v46 = v81;
  sub_1BCAB573C();
  (*(void (**)(char *, uint64_t))(v79 + 8))(v43, v46);
  v47 = v91 + *(int *)(type metadata accessor for TimeBasedDistributionChartModel() + 24);
  v99 = *(_QWORD *)(v47 + *(int *)(type metadata accessor for TimeBasedDistributionChartDesign() + 64));
  v95 = v46;
  v96 = v44;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  v49 = MEMORY[0x1E0CDF5D0];
  v50 = MEMORY[0x1E0CDF598];
  v51 = v85;
  v52 = v86;
  sub_1BCAB5724();
  (*(void (**)(char *, uint64_t))(v84 + 8))(v45, v52);
  v95 = v52;
  v96 = v49;
  v97 = OpaqueTypeConformance2;
  v98 = v50;
  swift_getOpaqueTypeConformance2();
  v53 = v80;
  v54 = v82;
  sub_1BCAB5730();
  (*(void (**)(char *, uint64_t))(v87 + 8))(v51, v54);
  v55 = v89;
  v56 = *(void (**)(char *, char *, uint64_t))(v89 + 32);
  v57 = v88;
  v56(v23, v53, v88);
  v58 = *(void (**)(char *, char *, uint64_t))(v74 + 16);
  v59 = v75;
  v60 = v71;
  v58(v75, v73, v71);
  v61 = *(void (**)(char *, char *, uint64_t))(v55 + 16);
  v62 = v90;
  v61(v90, v23, v57);
  v63 = v92;
  v58(v92, v59, v60);
  v64 = v93;
  v65 = &v63[*(int *)(v93 + 48)];
  v61(v65, v62, v57);
  v66 = (uint64_t)v94;
  v70(v94, v63, v60);
  v56((char *)(v66 + *(int *)(v64 + 48)), v65, v57);
  v67 = *(void (**)(char *, uint64_t))(v55 + 8);
  v67(v23, v57);
  v68 = *(void (**)(char *, uint64_t))(v74 + 8);
  v68(v73, v60);
  v67(v62, v57);
  v68(v75, v60);
  sub_1BC9B6E14();
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v69 - 8) + 56))(v66, 0, 1, v69);
  sub_1BC9CFA60(v66, v72);
}

uint64_t sub_1BC9CF064@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1BC9CC928(v2 + a1[6], (unsigned __int8 *)(v2 + a1[7]), *(_BYTE *)(v2 + a1[8]), a2);
}

uint64_t sub_1BC9CF080()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t sub_1BC9CF08C()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t sub_1BC9CF09C()
{
  sub_1BC996948(&qword_1EF4786C8, (uint64_t (*)(uint64_t))type metadata accessor for AFibBurdenTimeOfDayChart, (uint64_t)&unk_1BCAC0398);
  return sub_1BCAB53C4();
}

uint64_t sub_1BC9CF0F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1BC9CF10C(a1, a2, a3, MEMORY[0x1E0D2BA60]);
}

uint64_t sub_1BC9CF100(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1BC9CF10C(a1, a2, a3, MEMORY[0x1E0D2BA68]);
}

uint64_t sub_1BC9CF10C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v6;

  v6 = sub_1BC996948(&qword_1EF4786C8, (uint64_t (*)(uint64_t))type metadata accessor for AFibBurdenTimeOfDayChart, (uint64_t)&unk_1BCAC0398);
  return a4(a1, a2, v6);
}

uint64_t sub_1BC9CF16C()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 16) = v1;
  sub_1BC996948(&qword_1EF4783F0, (uint64_t (*)(uint64_t))type metadata accessor for AFibBurdenTimeOfDayChart, (uint64_t)&unk_1BCAC03F0);
  *v1 = v0;
  v1[1] = sub_1BC9CF1E8;
  return sub_1BCAB5250();
}

uint64_t sub_1BC9CF1E8(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *v2;
  v5 = swift_task_dealloc();
  if (!v1)
    v5 = a1;
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(v5);
}

uint64_t sub_1BC9CF23C()
{
  return sub_1BC996948(&qword_1EF4783F0, (uint64_t (*)(uint64_t))type metadata accessor for AFibBurdenTimeOfDayChart, (uint64_t)&unk_1BCAC03F0);
}

uint64_t sub_1BC9CF268()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1BC9CF278()
{
  return sub_1BC996948(&qword_1EF4786C0, (uint64_t (*)(uint64_t))type metadata accessor for AFibBurdenTimeOfDayChart, (uint64_t)&unk_1BCAC0370);
}

uint64_t sub_1BC9CF2A4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1BC9CD3CC(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_BYTE *)(v1 + 32), a1);
}

uint64_t sub_1BC9CF2B0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1BC9CD614(*(_QWORD *)(v1 + 16), *(_BYTE *)(v1 + 24), a1);
}

uint64_t sub_1BC9CF2BC(uint64_t a1)
{
  uint64_t v2;

  sub_1BC998AB0(0, &qword_1EF4786D0, (uint64_t (*)(uint64_t))MEMORY[0x1E0C93C30], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1BC9CF314(uint64_t a1)
{
  return sub_1BC9CF5E4(a1, (uint64_t (*)(uint64_t, uint64_t))sub_1BC9CD9E4);
}

BOOL HKUILocaleIsRightToLeft()
{
  return objc_msgSend(MEMORY[0x1E0DC3F10], "userInterfaceLayoutDirectionForSemanticContentAttribute:", 0) == 1;
}

uint64_t sub_1BC9CF354(uint64_t a1)
{
  return sub_1BC9CF5E4(a1, (uint64_t (*)(uint64_t, uint64_t))sub_1BC9CE7F0);
}

void sub_1BC9CF360(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    sub_1BC9B6ABC(255, &qword_1EF4781C8, &qword_1EF4781D0, (uint64_t (*)(uint64_t))sub_1BC9B6B34, (void (*)(void))sub_1BC9B6D18);
    v7 = v6;
    sub_1BC9B6ABC(255, &qword_1EF478200, &qword_1EF478208, (uint64_t (*)(uint64_t))sub_1BC9B6E14, (void (*)(void))sub_1BC9B7174);
    v9 = a3(a1, v7, v8);
    if (!v10)
      atomic_store(v9, a2);
  }
}

uint64_t objectdestroyTm()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = (int *)type metadata accessor for TimeBasedDistributionChartModel();
  v2 = v0
     + ((*(unsigned __int8 *)(*((_QWORD *)v1 - 1) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*((_QWORD *)v1 - 1) + 80));
  __swift_destroy_boxed_opaque_existential_1(v2 + 8);
  v3 = v2 + v1[6];
  v4 = sub_1BCAB5754();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (!v6(v3, 1, v4))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v4);
  v7 = type metadata accessor for TimeBasedDistributionChartDesign();
  v8 = v3 + *(int *)(v7 + 20);
  if (!v6(v8, 1, v4))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v8, v4);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  v9 = v3 + *(int *)(v7 + 40);
  v10 = sub_1BCAB5958();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v2 + v1[7]);
  v11 = v2 + v1[8];
  v12 = sub_1BCAB5514();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
  return swift_deallocObject();
}

uint64_t sub_1BC9CF5D8(uint64_t a1)
{
  return sub_1BC9CF5E4(a1, (uint64_t (*)(uint64_t, uint64_t))sub_1BC9CE468);
}

uint64_t sub_1BC9CF5E4(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t))
{
  uint64_t v2;
  uint64_t v4;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for TimeBasedDistributionChartModel() - 8) + 80);
  return a2(a1, v2 + ((v4 + 16) & ~v4));
}

uint64_t sub_1BC9CF640(uint64_t a1)
{
  uint64_t (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t result;
  void *v25;
  void *v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v34 = a1;
  v1 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
  sub_1BC998AB0(0, (unint64_t *)&qword_1ED6C7290, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1470], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v2);
  v31 = (char *)&v29 - v3;
  sub_1BC998AB0(0, &qword_1ED6C7288, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB11F0], v1);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v29 - v5;
  v7 = sub_1BCAB4C74();
  v32 = *(_QWORD *)(v7 - 8);
  v33 = v7;
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1BCAB4F74();
  v11 = *(_QWORD *)(v10 - 8);
  v30 = v10;
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BC998AB0(0, &qword_1ED6C7280, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], v1);
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)&v29 - v15;
  v17 = sub_1BCAB4E54();
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17);
  v20 = (char *)&v29 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BCAB4F50();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v6, 1, 1, v10);
  v21 = sub_1BCAB4FB0();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v31, 1, 1, v21);
  sub_1BCAB4C50();
  sub_1BCAB4F20();
  v22 = v9;
  v23 = v17;
  (*(void (**)(char *, uint64_t))(v32 + 8))(v22, v33);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v30);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v20, v16, v17);
    if (qword_1EF477C18 != -1)
      swift_once();
    v25 = (void *)qword_1EF486D28;
    v26 = (void *)sub_1BCAB4DE8();
    v27 = objc_msgSend(v25, sel_stringFromDate_, v26);

    v28 = sub_1BCAB5F04();
    (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v23);
    return v28;
  }
  return result;
}

void sub_1BC9CF9D4()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_1EF4786E0)
  {
    sub_1BC9B6EA4(255, &qword_1EF478218, (uint64_t (*)(uint64_t))MEMORY[0x1E0C93AA8], MEMORY[0x1E0C93A98], MEMORY[0x1E0C93A60]);
    sub_1BC9B6F14(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1EF4786E0);
  }
}

uint64_t sub_1BC9CFA60(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1BC998AB0(0, &qword_1EF478208, (uint64_t (*)(uint64_t))sub_1BC9B6E14, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1BC9CFABC()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = (int *)type metadata accessor for TimeBasedDistributionChartModel();
  v2 = v0
     + ((*(unsigned __int8 *)(*((_QWORD *)v1 - 1) + 80) + 17) & ~(unint64_t)*(unsigned __int8 *)(*((_QWORD *)v1 - 1) + 80));
  __swift_destroy_boxed_opaque_existential_1(v2 + 8);
  v3 = v2 + v1[6];
  v4 = sub_1BCAB5754();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (!v6(v3, 1, v4))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v4);
  v7 = type metadata accessor for TimeBasedDistributionChartDesign();
  v8 = v3 + *(int *)(v7 + 20);
  if (!v6(v8, 1, v4))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v8, v4);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  v9 = v3 + *(int *)(v7 + 40);
  v10 = sub_1BCAB5958();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v2 + v1[7]);
  v11 = v2 + v1[8];
  v12 = sub_1BCAB5514();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
  return swift_deallocObject();
}

uint64_t sub_1BC9CFC88@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for TimeBasedDistributionChartModel() - 8) + 80);
  return sub_1BC9CDA9C(a1, *(unsigned __int8 *)(v2 + 16), v2 + ((v5 + 17) & ~v5), a2);
}

uint64_t sub_1BC9CFCD8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(unint64_t, uint64_t, uint64_t);
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;

  v1 = type metadata accessor for TimeBasedDistributionChartPoint.TimeOfDay(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = *(_QWORD *)(v2 + 64);
  v5 = type metadata accessor for TimeBasedDistributionChartModel();
  v6 = (v4 + *(unsigned __int8 *)(*(_QWORD *)(v5 - 8) + 80) + v3 + 1) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v5 - 8) + 80);
  v7 = v0 + v3 + *(int *)(v1 + 28);
  v8 = sub_1BCAB4CE0();
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  swift_release();
  v9 = v0 + v6;
  __swift_destroy_boxed_opaque_existential_1(v0 + v6 + 8);
  v21 = v5;
  v10 = v0 + v6 + *(int *)(v5 + 24);
  v11 = sub_1BCAB5754();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v12 + 48);
  if (!v13(v10, 1, v11))
    (*(void (**)(unint64_t, uint64_t))(v12 + 8))(v10, v11);
  v14 = type metadata accessor for TimeBasedDistributionChartDesign();
  v15 = v10 + *(int *)(v14 + 20);
  if (!v13(v15, 1, v11))
    (*(void (**)(unint64_t, uint64_t))(v12 + 8))(v15, v11);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  v16 = v10 + *(int *)(v14 + 40);
  v17 = sub_1BCAB5958();
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(v16, v17);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v9 + *(int *)(v21 + 28));
  v18 = v9 + *(int *)(v21 + 32);
  v19 = sub_1BCAB5514();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 8))(v18, v19);
  return swift_deallocObject();
}

double sub_1BC9CFF10@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(type metadata accessor for TimeBasedDistributionChartPoint.TimeOfDay(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = v4 + *(_QWORD *)(v3 + 64);
  v6 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for TimeBasedDistributionChartModel() - 8) + 80);
  return sub_1BC9CE1E0((_BYTE *)(v1 + v4), *(_BYTE *)(v1 + v5), v1 + ((v5 + v6 + 1) & ~v6), a1);
}

Swift::String __swiftcall Data.logDescription(messageLength:messageLengthLimit:)(Swift::Int messageLength, Swift::Int messageLengthLimit)
{
  Swift::Int v3;
  uint64_t v4;
  void *v5;
  Swift::String result;

  v3 = messageLengthLimit - messageLength;
  if (__OFSUB__(messageLengthLimit, messageLength))
  {
    __break(1u);
    goto LABEL_7;
  }
  if (v3 >= 1)
  {
    if ((unsigned __int128)(v3 * (__int128)3) >> 64 == (3 * v3) >> 63)
      __asm { BR              X12 }
LABEL_7:
    __break(1u);
    JUMPOUT(0x1BC9D0084);
  }
  v4 = 0;
  v5 = (void *)0xE000000000000000;
  result._object = v5;
  result._countAndFlagsBits = v4;
  return result;
}

uint64_t sub_1BC9D0098(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release();
  }
  return swift_release();
}

void *static DateRange.allCases.getter()
{
  return &unk_1E7543FF8;
}

uint64_t DateRange.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1BC9D0128 + 4 * byte_1BCAC04C0[a1]))(0x6669636570736E75, 0xEB00000000646569);
}

uint64_t sub_1BC9D0128()
{
  return 0x656D69546C6C61;
}

uint64_t sub_1BC9D0140()
{
  return 0x7961646F74;
}

uint64_t sub_1BC9D0154()
{
  return 0x57676E696C6C6F72;
}

uint64_t sub_1BC9D0174()
{
  return 0x4D676E696C6C6F72;
}

uint64_t sub_1BC9D0194()
{
  return 0x48676E696C6C6F72;
}

void sub_1BC9D01B8()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  sub_1BCAB6870();
  __asm { BR              X9 }
}

uint64_t sub_1BC9D020C()
{
  sub_1BCAB5F40();
  swift_bridgeObjectRelease();
  return sub_1BCAB6894();
}

void sub_1BC9D02C4()
{
  __asm { BR              X10 }
}

uint64_t sub_1BC9D0308()
{
  sub_1BCAB5F40();
  return swift_bridgeObjectRelease();
}

void sub_1BC9D03AC()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  sub_1BCAB6870();
  __asm { BR              X9 }
}

uint64_t sub_1BC9D03FC()
{
  sub_1BCAB5F40();
  swift_bridgeObjectRelease();
  return sub_1BCAB6894();
}

uint64_t sub_1BC9D04B4@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = _s19HealthVisualization9DateRangeO8rawValueACSgSS_tcfC_0();
  *a1 = result;
  return result;
}

uint64_t sub_1BC9D04E0()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1BC9D0518 + 4 * byte_1BCAC04D8[*v0]))();
}

void sub_1BC9D0518(_QWORD *a1@<X8>)
{
  *a1 = 0x656D69546C6C61;
  a1[1] = 0xE700000000000000;
}

void sub_1BC9D0534(_QWORD *a1@<X8>)
{
  *a1 = 0x7961646F74;
  a1[1] = 0xE500000000000000;
}

void sub_1BC9D054C(_QWORD *a1@<X8>)
{
  *a1 = 0x57676E696C6C6F72;
  a1[1] = 0xEB000000006B6565;
}

void sub_1BC9D0570(uint64_t a1@<X8>)
{
  strcpy((char *)a1, "rollingMonth");
  *(_BYTE *)(a1 + 13) = 0;
  *(_WORD *)(a1 + 14) = -5120;
}

void sub_1BC9D0594(_QWORD *a1@<X8>)
{
  *a1 = 0x48676E696C6C6F72;
  a1[1] = 0xEF72616559666C61;
}

uint64_t sub_1BC9D05BC()
{
  sub_1BC9D1474();
  return sub_1BCAB5FE8();
}

uint64_t sub_1BC9D0618()
{
  sub_1BC9D1474();
  return sub_1BCAB5FD0();
}

void sub_1BC9D0664(_QWORD *a1@<X8>)
{
  *a1 = &unk_1E7543FF8;
}

void sub_1BC9D0674(uint64_t a1)
{
  __asm { BR              X11 }
}

uint64_t sub_1BC9D06DC@<X0>(uint64_t a1@<X8>)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1BC9D0780 + 4 * byte_1BCAC04E4[a1]))(0x656D69546C6C61);
}

uint64_t sub_1BC9D0780(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x656D69546C6C61 && v1 == 0xE700000000000000)
    v2 = 1;
  else
    v2 = sub_1BCAB67C8();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

id DateRange.predicate(endingAt:)(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  id v15;
  void *v16;
  void *v17;
  void (*v18)(char *, uint64_t);
  void *v19;
  uint64_t v21;

  v4 = sub_1BCAB4E54();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BC9AFF04(0, (unint64_t *)&qword_1ED6C71E0, (void (*)(uint64_t))MEMORY[0x1E0CAE5D0]);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v21 - v9;
  v11 = sub_1BCAB4BD8();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  DateRange.dateInterval(endingAt:)(a1, a2, (uint64_t)v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    sub_1BC9D11F4((uint64_t)v10, (unint64_t *)&qword_1ED6C71E0, (void (*)(uint64_t))MEMORY[0x1E0CAE5D0]);
    return 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v14, v10, v11);
    v16 = (void *)objc_opt_self();
    sub_1BCAB4BC0();
    v17 = (void *)sub_1BCAB4DE8();
    v18 = *(void (**)(char *, uint64_t))(v5 + 8);
    v18(v7, v4);
    sub_1BCAB4B9C();
    v19 = (void *)sub_1BCAB4DE8();
    v18(v7, v4);
    v15 = objc_msgSend(v16, sel_predicateForSamplesWithStartDate_endDate_options_, v17, v19, 0);

    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  }
  return v15;
}

void DateRange.dateInterval(endingAt:)(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[10];

  v19[8] = a1;
  v19[9] = a3;
  v4 = sub_1BCAB4F68();
  v19[4] = *(_QWORD *)(v4 - 8);
  v19[5] = v4;
  MEMORY[0x1E0C80A78](v4);
  sub_1BC9AFF04(0, &qword_1ED6C7280, (void (*)(uint64_t))MEMORY[0x1E0CB0870]);
  MEMORY[0x1E0C80A78](v5);
  v19[1] = (char *)v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  MEMORY[0x1E0C80A78](v8);
  v9 = sub_1BCAB4E54();
  v19[6] = *(_QWORD *)(v9 - 8);
  v19[7] = v9;
  MEMORY[0x1E0C80A78](v9);
  v19[0] = (char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  MEMORY[0x1E0C80A78](v12);
  v19[3] = (char *)v19 - v13;
  MEMORY[0x1E0C80A78](v14);
  v19[2] = (char *)v19 - v15;
  MEMORY[0x1E0C80A78](v16);
  sub_1BC9AFF04(0, (unint64_t *)&qword_1ED6C71E0, (void (*)(uint64_t))MEMORY[0x1E0CAE5D0]);
  MEMORY[0x1E0C80A78](v17);
  v18 = sub_1BCAB4F74();
  MEMORY[0x1E0C80A78](v18);
  __asm { BR              X10 }
}

uint64_t sub_1BC9D0C98()
{
  uint64_t v0;
  uint64_t v1;

  v1 = sub_1BCAB4BD8();
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 56))(*(_QWORD *)(v0 - 88), 1, 1, v1);
}

uint64_t sub_1BC9D0CD8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;

  v5 = (void *)objc_opt_self();
  v6 = (void *)sub_1BCAB4DE8();
  sub_1BCAB4F50();
  v7 = (void *)sub_1BCAB4F08();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v0, v1);
  v8 = objc_msgSend(v5, sel_hk_dateIntervalForDayFromDate_calendar_, v6, v7);

  if (v8)
  {
    sub_1BCAB4B90();

    v9 = sub_1BCAB4BD8();
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v2, 0, 1, v9);
  }
  else
  {
    v10 = sub_1BCAB4BD8();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v2, 1, 1, v10);
  }
  return sub_1BC9B39DC(v2, *(_QWORD *)(v4 - 88));
}

uint64_t DateRange.relatedTimeScope.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, _QWORD))((char *)sub_1BC9D117C + 4 * byte_1BCAC04EA[a1]))(6, 0);
}

uint64_t sub_1BC9D117C()
{
  return 0;
}

uint64_t sub_1BC9D1188()
{
  return 5;
}

uint64_t sub_1BC9D1194()
{
  return 4;
}

uint64_t sub_1BC9D11A0()
{
  return 3;
}

uint64_t _s19HealthVisualization9DateRangeO8rawValueACSgSS_tcfC_0()
{
  unint64_t v0;

  v0 = sub_1BCAB6654();
  swift_bridgeObjectRelease();
  if (v0 >= 6)
    return 6;
  else
    return v0;
}

uint64_t sub_1BC9D11F4(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  uint64_t v4;

  sub_1BC9AFF04(0, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

unint64_t sub_1BC9D1234()
{
  unint64_t result;

  result = qword_1ED6C4520;
  if (!qword_1ED6C4520)
  {
    result = MEMORY[0x1BCCFBE84](&protocol conformance descriptor for DateRange, &type metadata for DateRange);
    atomic_store(result, (unint64_t *)&qword_1ED6C4520);
  }
  return result;
}

unint64_t sub_1BC9D127C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EF4786F0;
  if (!qword_1EF4786F0)
  {
    sub_1BC9D12C4();
    result = MEMORY[0x1BCCFBE84](MEMORY[0x1E0DEAF50], v1);
    atomic_store(result, (unint64_t *)&qword_1EF4786F0);
  }
  return result;
}

void sub_1BC9D12C4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED6C45B8)
  {
    v0 = sub_1BCAB6060();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED6C45B8);
  }
}

uint64_t getEnumTagSinglePayload for DateRange(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFB)
    goto LABEL_17;
  if (a2 + 5 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 5) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 5;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 5;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 5;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 6;
  v8 = v6 - 6;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for DateRange(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_1BC9D13F4 + 4 * byte_1BCAC04F5[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_1BC9D1428 + 4 * byte_1BCAC04F0[v4]))();
}

uint64_t sub_1BC9D1428(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BC9D1430(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BC9D1438);
  return result;
}

uint64_t sub_1BC9D1444(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BC9D144CLL);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_1BC9D1450(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BC9D1458(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DateRange()
{
  return &type metadata for DateRange;
}

unint64_t sub_1BC9D1474()
{
  unint64_t result;

  result = qword_1ED6C6DC0;
  if (!qword_1ED6C6DC0)
  {
    result = MEMORY[0x1BCCFBE84](&protocol conformance descriptor for DateRange, &type metadata for DateRange);
    atomic_store(result, (unint64_t *)&qword_1ED6C6DC0);
  }
  return result;
}

uint64_t dispatch thunk of PluginFeedItemProducing.feedItemResult.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of PluginFeedItemCollectionProducing.feedItemsResult.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t QuantityDistributionConfigurationOverrides.dateInterval.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1BC9D1640(v1, a1, (unint64_t *)&qword_1ED6C71E0, (void (*)(uint64_t))MEMORY[0x1E0CAE5D0]);
}

uint64_t QuantityDistributionConfigurationOverrides.dateInterval.setter(uint64_t a1)
{
  uint64_t v1;

  return sub_1BC9D16D0(a1, v1, (unint64_t *)&qword_1ED6C71E0, (void (*)(uint64_t))MEMORY[0x1E0CAE5D0]);
}

uint64_t (*QuantityDistributionConfigurationOverrides.dateInterval.modify())()
{
  return nullsub_1;
}

void *QuantityDistributionConfigurationOverrides.predicate.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + *(int *)(type metadata accessor for QuantityDistributionConfigurationOverrides() + 20));
  v2 = v1;
  return v1;
}

uint64_t type metadata accessor for QuantityDistributionConfigurationOverrides()
{
  uint64_t result;

  result = qword_1ED6C6D20;
  if (!qword_1ED6C6D20)
    return swift_getSingletonMetadata();
  return result;
}

void QuantityDistributionConfigurationOverrides.predicate.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(int *)(type metadata accessor for QuantityDistributionConfigurationOverrides() + 20);

  *(_QWORD *)(v1 + v3) = a1;
}

uint64_t (*QuantityDistributionConfigurationOverrides.predicate.modify())(_QWORD)
{
  type metadata accessor for QuantityDistributionConfigurationOverrides();
  return nullsub_1;
}

uint64_t QuantityDistributionConfigurationOverrides.histogramWidth.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for QuantityDistributionConfigurationOverrides();
  return sub_1BC9D1640(v1 + *(int *)(v3 + 24), a1, &qword_1ED6C6968, (void (*)(uint64_t))MEMORY[0x1E0CAEAB0]);
}

uint64_t sub_1BC9D1640(uint64_t a1, uint64_t a2, unint64_t *a3, void (*a4)(uint64_t))
{
  uint64_t v6;

  sub_1BC9AFF04(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

uint64_t QuantityDistributionConfigurationOverrides.histogramWidth.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for QuantityDistributionConfigurationOverrides();
  return sub_1BC9D16D0(a1, v1 + *(int *)(v3 + 24), &qword_1ED6C6968, (void (*)(uint64_t))MEMORY[0x1E0CAEAB0]);
}

uint64_t sub_1BC9D16D0(uint64_t a1, uint64_t a2, unint64_t *a3, void (*a4)(uint64_t))
{
  uint64_t v6;

  sub_1BC9AFF04(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a2, a1, v6);
  return a2;
}

uint64_t (*QuantityDistributionConfigurationOverrides.histogramWidth.modify())(_QWORD)
{
  type metadata accessor for QuantityDistributionConfigurationOverrides();
  return nullsub_1;
}

uint64_t QuantityDistributionConfigurationOverrides.init(dateInterval:predicate:histogramWidth:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  void (*v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t);

  v8 = sub_1BCAB4BD8();
  v9 = (void (*)(uint64_t))MEMORY[0x1E0CAE5D0];
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(a4, 1, 1, v8);
  v10 = type metadata accessor for QuantityDistributionConfigurationOverrides();
  v11 = *(int *)(v10 + 20);
  *(_QWORD *)(a4 + v11) = 0;
  v12 = a4 + *(int *)(v10 + 24);
  v13 = sub_1BCAB4C74();
  v14 = (void (*)(uint64_t))MEMORY[0x1E0CAEAB0];
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v12, 1, 1, v13);
  sub_1BC9D16D0(a1, a4, (unint64_t *)&qword_1ED6C71E0, v9);

  *(_QWORD *)(a4 + v11) = a2;
  return sub_1BC9D16D0(a3, v12, &qword_1ED6C6968, v14);
}

uint64_t sub_1BC9D1830@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1BC9D1640(v1, a1, (unint64_t *)&qword_1ED6C71E0, (void (*)(uint64_t))MEMORY[0x1E0CAE5D0]);
}

uint64_t *initializeBufferWithCopyOfBuffer for QuantityDistributionConfigurationOverrides(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int (*v18)(char *, uint64_t, uint64_t);
  id v19;
  uint64_t v20;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_1BCAB4BD8();
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      sub_1BC9AFF04(0, (unint64_t *)&qword_1ED6C71E0, (void (*)(uint64_t))MEMORY[0x1E0CAE5D0]);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    v11 = *(int *)(a3 + 20);
    v12 = *(int *)(a3 + 24);
    v13 = *(void **)((char *)a2 + v11);
    *(uint64_t *)((char *)a1 + v11) = (uint64_t)v13;
    v14 = (char *)a1 + v12;
    v15 = (char *)a2 + v12;
    v16 = sub_1BCAB4C74();
    v17 = *(_QWORD *)(v16 - 8);
    v18 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48);
    v19 = v13;
    if (v18(v15, 1, v16))
    {
      sub_1BC9AFF04(0, &qword_1ED6C6968, (void (*)(uint64_t))MEMORY[0x1E0CAEAB0]);
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v14, v15, v16);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
    }
  }
  return a1;
}

uint64_t destroy for QuantityDistributionConfigurationOverrides(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  v4 = sub_1BCAB4BD8();
  v5 = *(_QWORD *)(v4 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1, v4))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);

  v6 = a1 + *(int *)(a2 + 24);
  v7 = sub_1BCAB4C74();
  v8 = *(_QWORD *)(v7 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  return result;
}

char *initializeWithCopy for QuantityDistributionConfigurationOverrides(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int (*v16)(char *, uint64_t, uint64_t);
  id v17;
  uint64_t v18;

  v6 = sub_1BCAB4BD8();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    sub_1BC9AFF04(0, (unint64_t *)&qword_1ED6C71E0, (void (*)(uint64_t))MEMORY[0x1E0CAE5D0]);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v9 = *(int *)(a3 + 20);
  v10 = *(int *)(a3 + 24);
  v11 = *(void **)&a2[v9];
  *(_QWORD *)&a1[v9] = v11;
  v12 = &a1[v10];
  v13 = &a2[v10];
  v14 = sub_1BCAB4C74();
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48);
  v17 = v11;
  if (v16(v13, 1, v14))
  {
    sub_1BC9AFF04(0, &qword_1ED6C6968, (void (*)(uint64_t))MEMORY[0x1E0CAEAB0]);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v12, v13, v14);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  return a1;
}

char *assignWithCopy for QuantityDistributionConfigurationOverrides(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  id v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(char *, uint64_t, uint64_t);
  int v22;
  int v23;
  uint64_t v24;

  v6 = sub_1BCAB4BD8();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    sub_1BC9AFF04(0, (unint64_t *)&qword_1ED6C71E0, (void (*)(uint64_t))MEMORY[0x1E0CAE5D0]);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 24))(a1, a2, v6);
LABEL_7:
  v12 = *(int *)(a3 + 20);
  v13 = *(void **)&a1[v12];
  v14 = *(void **)&a2[v12];
  *(_QWORD *)&a1[v12] = v14;
  v15 = v14;

  v16 = *(int *)(a3 + 24);
  v17 = &a1[v16];
  v18 = &a2[v16];
  v19 = sub_1BCAB4C74();
  v20 = *(_QWORD *)(v19 - 8);
  v21 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v20 + 48);
  v22 = v21(v17, 1, v19);
  v23 = v21(v18, 1, v19);
  if (!v22)
  {
    if (!v23)
    {
      (*(void (**)(char *, char *, uint64_t))(v20 + 24))(v17, v18, v19);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v20 + 8))(v17, v19);
    goto LABEL_12;
  }
  if (v23)
  {
LABEL_12:
    sub_1BC9AFF04(0, &qword_1ED6C6968, (void (*)(uint64_t))MEMORY[0x1E0CAEAB0]);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v17, v18, v19);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
  return a1;
}

char *initializeWithTake for QuantityDistributionConfigurationOverrides(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = sub_1BCAB4BD8();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    sub_1BC9AFF04(0, (unint64_t *)&qword_1ED6C71E0, (void (*)(uint64_t))MEMORY[0x1E0CAE5D0]);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v9 = *(int *)(a3 + 24);
  *(_QWORD *)&a1[*(int *)(a3 + 20)] = *(_QWORD *)&a2[*(int *)(a3 + 20)];
  v10 = &a1[v9];
  v11 = &a2[v9];
  v12 = sub_1BCAB4C74();
  v13 = *(_QWORD *)(v12 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
  {
    sub_1BC9AFF04(0, &qword_1ED6C6968, (void (*)(uint64_t))MEMORY[0x1E0CAEAB0]);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v10, v11, v12);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
  }
  return a1;
}

char *assignWithTake for QuantityDistributionConfigurationOverrides(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(char *, uint64_t, uint64_t);
  int v20;
  int v21;
  uint64_t v22;

  v6 = sub_1BCAB4BD8();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    sub_1BC9AFF04(0, (unint64_t *)&qword_1ED6C71E0, (void (*)(uint64_t))MEMORY[0x1E0CAE5D0]);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 40))(a1, a2, v6);
LABEL_7:
  v12 = *(int *)(a3 + 20);
  v13 = *(void **)&a1[v12];
  *(_QWORD *)&a1[v12] = *(_QWORD *)&a2[v12];

  v14 = *(int *)(a3 + 24);
  v15 = &a1[v14];
  v16 = &a2[v14];
  v17 = sub_1BCAB4C74();
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48);
  v20 = v19(v15, 1, v17);
  v21 = v19(v16, 1, v17);
  if (!v20)
  {
    if (!v21)
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 40))(v15, v16, v17);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v18 + 8))(v15, v17);
    goto LABEL_12;
  }
  if (v21)
  {
LABEL_12:
    sub_1BC9AFF04(0, &qword_1ED6C6968, (void (*)(uint64_t))MEMORY[0x1E0CAEAB0]);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v15, v16, v17);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
  return a1;
}

uint64_t getEnumTagSinglePayload for QuantityDistributionConfigurationOverrides()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BC9D2144(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;
  uint64_t v11;

  sub_1BC9AFF04(0, (unint64_t *)&qword_1ED6C71E0, (void (*)(uint64_t))MEMORY[0x1E0CAE5D0]);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  if ((_DWORD)a2 == 2147483646)
  {
    v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
    if (v9 >= 0xFFFFFFFF)
      LODWORD(v9) = -1;
    v10 = v9 - 1;
    if (v10 < 0)
      v10 = -1;
    return (v10 + 1);
  }
  else
  {
    sub_1BC9AFF04(0, &qword_1ED6C6968, (void (*)(uint64_t))MEMORY[0x1E0CAEAB0]);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v11);
  }
}

uint64_t storeEnumTagSinglePayload for QuantityDistributionConfigurationOverrides()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_1BC9D2224(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  sub_1BC9AFF04(0, (unint64_t *)&qword_1ED6C71E0, (void (*)(uint64_t))MEMORY[0x1E0CAE5D0]);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 2147483646)
    {
      *(_QWORD *)(a1 + *(int *)(a4 + 20)) = a2;
      return;
    }
    sub_1BC9AFF04(0, &qword_1ED6C6968, (void (*)(uint64_t))MEMORY[0x1E0CAEAB0]);
    v10 = v13;
    v14 = *(_QWORD *)(v13 - 8);
    v12 = a1 + *(int *)(a4 + 24);
    v11 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  v11(v12, a2, a2, v10);
}

void sub_1BC9D22E8()
{
  unint64_t v0;
  unint64_t v1;

  sub_1BC9AFF04(319, (unint64_t *)&qword_1ED6C71E0, (void (*)(uint64_t))MEMORY[0x1E0CAE5D0]);
  if (v0 <= 0x3F)
  {
    sub_1BC9AFF04(319, &qword_1ED6C6968, (void (*)(uint64_t))MEMORY[0x1E0CAEAB0]);
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

id sub_1BC9D2394()
{
  qword_1EF486D30 = *MEMORY[0x1E0DC48C8];
  return (id)qword_1EF486D30;
}

void sub_1BC9D23AC(_QWORD *a1@<X8>)
{
  *a1 = &unk_1E7544020;
}

id sub_1BC9D23BC()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  void *v5;
  id v6;

  v1 = OBJC_IVAR____TtC19HealthVisualization29HighlightActivityCalendarView____lazy_storage___ringsRenderer;
  v2 = *(void **)(v0
                + OBJC_IVAR____TtC19HealthVisualization29HighlightActivityCalendarView____lazy_storage___ringsRenderer);
  if (v2)
  {
    v3 = *(id *)(v0
               + OBJC_IVAR____TtC19HealthVisualization29HighlightActivityCalendarView____lazy_storage___ringsRenderer);
  }
  else
  {
    v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CF51B8]), sel_init);
    v5 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v4;
    v3 = v4;

    v2 = 0;
  }
  v6 = v2;
  return v3;
}

id sub_1BC9D242C()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  id v5;
  void *v6;
  id v7;

  v1 = OBJC_IVAR____TtC19HealthVisualization29HighlightActivityCalendarView____lazy_storage___unitPreferenceController;
  v2 = *(void **)(v0
                + OBJC_IVAR____TtC19HealthVisualization29HighlightActivityCalendarView____lazy_storage___unitPreferenceController);
  if (v2)
  {
    v3 = *(id *)(v0
               + OBJC_IVAR____TtC19HealthVisualization29HighlightActivityCalendarView____lazy_storage___unitPreferenceController);
  }
  else
  {
    v4 = objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC19HealthVisualization29HighlightActivityCalendarView_healthStore), sel_viewControllerFactory);
    v5 = objc_msgSend(v4, sel_createHKUnitPreferenceController);

    v6 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v5;
    v3 = v5;

    v2 = 0;
  }
  v7 = v2;
  return v3;
}

id sub_1BC9D24CC()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id result;
  void *v5;
  id v6;

  v1 = OBJC_IVAR____TtC19HealthVisualization29HighlightActivityCalendarView____lazy_storage___displayTypeController;
  v2 = *(void **)(v0
                + OBJC_IVAR____TtC19HealthVisualization29HighlightActivityCalendarView____lazy_storage___displayTypeController);
  if (v2)
  {
    v3 = *(id *)(v0
               + OBJC_IVAR____TtC19HealthVisualization29HighlightActivityCalendarView____lazy_storage___displayTypeController);
LABEL_5:
    v6 = v2;
    return v3;
  }
  result = objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC19HealthVisualization29HighlightActivityCalendarView_healthStore), sel_displayTypeController);
  if (result)
  {
    v5 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = result;
    v3 = result;

    v2 = 0;
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

id HighlightActivityCalendarView.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v3;
}

void HighlightActivityCalendarView.__allocating_init(model:healthStore:)(uint64_t *a1, void *a2)
{
  objc_class *v2;
  id v5;

  v5 = objc_allocWithZone(v2);
  HighlightActivityCalendarView.init(model:healthStore:)(a1, a2);
}

void HighlightActivityCalendarView.init(model:healthStore:)(uint64_t *a1, void *a2)
{
  _BYTE *v2;
  _BYTE *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  objc_class *v16;
  id v17;
  id v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint64_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint8_t *v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  id v36;
  id v37;
  id v38;
  uint64_t v39;
  id v40;
  uint64_t ObjectType;
  uint64_t v42;
  uint64_t v43;
  objc_super v44;
  uint64_t v45;

  v3 = v2;
  ObjectType = swift_getObjectType();
  v6 = sub_1BCAB5514();
  v42 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v39 - v10;
  v12 = *a1;
  v13 = a1[1];
  v14 = a1[2];
  v3[OBJC_IVAR____TtC19HealthVisualization29HighlightActivityCalendarView_currentWeekdayStringLength] = 0;
  v15 = (void *)*MEMORY[0x1E0DC4938];
  *(_QWORD *)&v3[OBJC_IVAR____TtC19HealthVisualization29HighlightActivityCalendarView_currentLabelMaximumContentSizeCategory] = *MEMORY[0x1E0DC4938];
  *(_QWORD *)&v3[OBJC_IVAR____TtC19HealthVisualization29HighlightActivityCalendarView____lazy_storage___ringsRenderer] = 0;
  *(_QWORD *)&v3[OBJC_IVAR____TtC19HealthVisualization29HighlightActivityCalendarView____lazy_storage___unitPreferenceController] = 0;
  *(_QWORD *)&v3[OBJC_IVAR____TtC19HealthVisualization29HighlightActivityCalendarView____lazy_storage___displayTypeController] = 0;
  *(_QWORD *)&v3[OBJC_IVAR____TtC19HealthVisualization29HighlightActivityCalendarView_longWeekdayStrings] = v13;
  *(_QWORD *)&v3[OBJC_IVAR____TtC19HealthVisualization29HighlightActivityCalendarView_shortWeekdayStrings] = v14;
  *(_QWORD *)&v3[OBJC_IVAR____TtC19HealthVisualization29HighlightActivityCalendarView_healthStore] = a2;
  v16 = (objc_class *)type metadata accessor for HighlightActivityCalendarView();
  v44.receiver = v3;
  v44.super_class = v16;
  v17 = v15;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v18 = a2;
  v19 = objc_msgSendSuper2(&v44, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  sub_1BC9D2B10();
  objc_msgSend(v19, sel_setHorizontalDistribution_, 0);
  objc_msgSend(v19, sel_setVerticalAlignment_, 3);
  objc_msgSend(v19, sel_setColumnSpacing_, 10.0);
  v20 = *(_QWORD *)(v12 + 16);
  if (v20)
  {
    v21 = *(_QWORD *)(v12 + 32);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v20 != 1)
    {
      sub_1BCAB54D8();
      v22 = sub_1BCAB54FC();
      v23 = sub_1BCAB61A4();
      if (os_log_type_enabled(v22, v23))
      {
        v24 = swift_slowAlloc();
        v40 = v18;
        v25 = (uint8_t *)v24;
        v26 = swift_slowAlloc();
        v43 = v26;
        *(_DWORD *)v25 = 136446210;
        v39 = v6;
        v45 = ObjectType;
        swift_getMetatypeMetadata();
        v27 = sub_1BCAB5F28();
        v45 = sub_1BC99BD4C(v27, v28, &v43);
        sub_1BCAB63A8();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1BC989000, v22, v23, "%{public}s: the view model provided more than one week, which is nonsensical for this view.", v25, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1BCCFBF5C](v26, -1, -1);
        v29 = v25;
        v18 = v40;
        MEMORY[0x1BCCFBF5C](v29, -1, -1);

        (*(void (**)(char *, uint64_t))(v42 + 8))(v8, v39);
      }
      else
      {

        (*(void (**)(char *, uint64_t))(v42 + 8))(v8, v6);
      }
    }
    v45 = v21;
    sub_1BC9D2C58(&v45);
    swift_bridgeObjectRelease();
    v36 = sub_1BC9D24CC();
    v37 = objc_msgSend(v36, sel_wheelchairUseCharacteristicCache);

    if (v37)
    {
      v38 = v19;
      objc_msgSend(v37, sel_registerObserver_, v38);

    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1BCAB54D8();
    v30 = sub_1BCAB54FC();
    v31 = sub_1BCAB61A4();
    if (os_log_type_enabled(v30, v31))
    {
      v40 = v18;
      v32 = (uint8_t *)swift_slowAlloc();
      v33 = swift_slowAlloc();
      v43 = v33;
      *(_DWORD *)v32 = 136446210;
      v45 = ObjectType;
      swift_getMetatypeMetadata();
      v34 = sub_1BCAB5F28();
      v39 = v6;
      v45 = sub_1BC99BD4C(v34, v35, &v43);
      sub_1BCAB63A8();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1BC989000, v30, v31, "%{public}s: the view model did not provide any weeks, which is unexpected", v32, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BCCFBF5C](v33, -1, -1);
      MEMORY[0x1BCCFBF5C](v32, -1, -1);

      (*(void (**)(char *, uint64_t))(v42 + 8))(v11, v39);
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v42 + 8))(v11, v6);
    }
  }
}

uint64_t sub_1BC9D2B10()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  swift_getObjectType();
  sub_1BC9D5A78();
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1BCABFE80;
  v1 = sub_1BCAB5538();
  v2 = MEMORY[0x1E0DC29B0];
  *(_QWORD *)(v0 + 32) = v1;
  *(_QWORD *)(v0 + 40) = v2;
  v3 = sub_1BCAB552C();
  v4 = MEMORY[0x1E0DC2160];
  *(_QWORD *)(v0 + 48) = v3;
  *(_QWORD *)(v0 + 56) = v4;
  sub_1BCAB62F4();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1BCABE680;
  *(_QWORD *)(v5 + 32) = v1;
  *(_QWORD *)(v5 + 40) = v2;
  sub_1BCAB62F4();
  swift_unknownObjectRelease();
  return swift_bridgeObjectRelease();
}

void sub_1BC9D2C58(uint64_t *a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  char *v16;
  id v17;
  id v18;
  id v19;
  char *v20;
  double v21;
  uint64_t v22;
  char *v23;
  id v24;
  id v25;
  id v26;
  id v27;
  void *v28;
  id v29;
  id v30;
  void *v31;
  int v32;
  void *v33;
  uint64_t v34;
  void *v35;
  void *v36;
  uint64_t v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  void *v44;
  void *v45;
  uint64_t v46;
  char *v47;
  id v48;
  char *v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  int v58;

  v2 = v1;
  v4 = type metadata accessor for HighlightCalendarDayViewModel(0);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v54 = (uint64_t)&v46 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v46 - v8;
  v10 = *a1;
  v11 = *(_QWORD *)(v10 + 16);
  if (v11)
  {
    type metadata accessor for UILayoutPriority(0);
    v53 = v12;
    v13 = v10 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    v52 = *(_QWORD *)(v5 + 72);
    v46 = v10;
    swift_bridgeObjectRetain();
    v51 = MEMORY[0x1E0DEE9B0] + 8;
    v50 = xmmword_1BCAC0710;
    v49 = v9;
    do
    {
      sub_1BC9D5988(v13, (uint64_t)v9);
      v30 = sub_1BC9D5300();
      v31 = v30;
      v32 = v9[48];
      v55 = v11;
      if (v32)
      {
        v14 = v54;
        sub_1BC9D5988((uint64_t)v9, v54);
        v15 = objc_allocWithZone((Class)type metadata accessor for HighlightCalendarDayView());
        v16 = sub_1BCA50C14(v14, 0);
        v17 = sub_1BC9D3054(0, 0);
        v18 = sub_1BC9D3054(1, 0);
        v19 = sub_1BC9D3054(2, 0);
      }
      else
      {
        v33 = (void *)*((_QWORD *)v9 + 4);
        v34 = *((_QWORD *)v9 + 5);
        v48 = v30;
        v35 = v2;
        v36 = (void *)*((_QWORD *)v9 + 3);
        v37 = v54;
        sub_1BC9D5988((uint64_t)v9, v54);
        sub_1BC9D5A08(v36, v33, v34, 0);
        v38 = v36;
        v39 = sub_1BC9D23BC();
        v40 = objc_allocWithZone((Class)type metadata accessor for HighlightCalendarDayView());
        v47 = sub_1BCA50C14(v37, v39);

        v41 = v38;
        v17 = sub_1BC9D3054(0, v36);
        sub_1BC9D5A40(v36, v33, v34, 0);
        v42 = v41;
        v18 = sub_1BC9D3054(1, v36);
        sub_1BC9D5A40(v36, v33, v34, 0);
        v43 = v42;
        v19 = sub_1BC9D3054(2, v36);
        sub_1BC9D5A40(v36, v33, v34, 0);
        v44 = v36;
        v2 = v35;
        v45 = v33;
        v16 = v47;
        v31 = v48;
        sub_1BC9D5A40(v44, v45, v34, 0);

      }
      v57 = 1065353216;
      v58 = 1148846080;
      sub_1BC9D5940();
      v20 = v16;
      sub_1BCAB5520();
      LODWORD(v21) = v56;
      objc_msgSend(v20, sel_setContentCompressionResistancePriority_forAxis_, 0, v21);

      sub_1BC9A1210(0, (unint64_t *)&qword_1ED6C6710, v51, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
      v22 = swift_allocObject();
      *(_OWORD *)(v22 + 16) = v50;
      *(_QWORD *)(v22 + 32) = v20;
      *(_QWORD *)(v22 + 40) = v31;
      *(_QWORD *)(v22 + 48) = v17;
      *(_QWORD *)(v22 + 56) = v18;
      *(_QWORD *)(v22 + 64) = v19;
      v56 = v22;
      sub_1BCAB6024();
      sub_1BC9A649C(0, (unint64_t *)&qword_1ED6C5B10);
      v23 = v20;
      v24 = v31;
      v25 = v17;
      v26 = v18;
      v27 = v19;
      v28 = (void *)sub_1BCAB600C();
      swift_bridgeObjectRelease();
      v29 = objc_msgSend(v2, sel_addRowWithArrangedSubviews_, v28);

      swift_unknownObjectRelease();
      v9 = v49;
      sub_1BC9D59CC((uint64_t)v49);
      v13 += v52;
      v11 = v55 - 1;
    }
    while (v55 != 1);
    swift_bridgeObjectRelease();
  }
}

id sub_1BC9D3054(char a1, void *a2)
{
  void *v2;
  id v5;
  id result;
  void *v7;
  void *v8;
  id v9;
  id v10;
  void *v11;
  id v12;
  void *v13;
  id v14;
  id v15;
  id v16;
  void *v17;
  id v18;

  v5 = sub_1BC9D5600();
  result = objc_msgSend(v5, sel_font);
  if (result)
  {
    v7 = result;
    sub_1BC9D324C(a1, (uint64_t)result);
    v9 = v8;

    sub_1BC9D3450(a1, a2);
    v10 = objc_allocWithZone(MEMORY[0x1E0CB3778]);
    v11 = (void *)sub_1BCAB5EE0();
    v12 = objc_msgSend(v10, sel_initWithString_, v11);

    if (v9)
    {
      v13 = (void *)objc_opt_self();
      v9 = v9;
      v14 = objc_msgSend(v13, sel_textAttachmentWithImage_, v9);
      v15 = objc_msgSend((id)objc_opt_self(), sel_attributedStringWithAttachment_, v14);

      objc_msgSend(v12, sel_insertAttributedString_atIndex_, v15, 0);
      if ((objc_msgSend(v2, sel_hk_isLeftToRight) & 1) != 0)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        v16 = objc_allocWithZone(MEMORY[0x1E0CB3498]);
        v17 = (void *)sub_1BCAB5EE0();
        v18 = objc_msgSend(v16, sel_initWithString_, v17);

        objc_msgSend(v12, sel_insertAttributedString_atIndex_, v18, 0);
        swift_bridgeObjectRelease();

      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    objc_msgSend(v5, sel_setAttributedText_, v12);

    return v5;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_1BC9D324C(char a1, uint64_t a2)
{
  id v3;
  char **v4;
  id v5;
  id v6;
  id v7;
  id v8;
  void *v9;
  id v10;
  id v11;

  v3 = objc_msgSend((id)objc_opt_self(), sel_configurationWithFont_, a2);
  if (a1)
  {
    if (a1 == 1)
    {
      v4 = &selRef_hk_activityExerciseGoalLineColor;
    }
    else
    {
      v5 = sub_1BC9D24CC();
      v6 = objc_msgSend(v5, sel_wheelchairUseCharacteristicCache);

      if (!v6)
      {
        __break(1u);
        return;
      }
      objc_msgSend(v6, sel_isWheelchairUser);

      v4 = &selRef_hk_activityStandGoalLineColor;
    }
  }
  else
  {
    v4 = &selRef_hk_activityMoveGoalLineColor;
  }
  v7 = objc_msgSend((id)objc_opt_self(), *v4);
  v8 = v3;
  v9 = (void *)sub_1BCAB5EE0();
  swift_bridgeObjectRelease();
  v10 = objc_msgSend((id)objc_opt_self(), sel__systemImageNamed_withConfiguration_, v9, v8);

  if (v10)
  {
    v11 = objc_msgSend(v10, sel_imageWithRenderingMode_, 2);

    objc_msgSend(v11, sel_imageWithTintColor_, v7);
  }
  else
  {

  }
}

id sub_1BC9D3450(char a1, void *a2)
{
  id v3;
  id result;
  id v5;
  uint64_t v6;
  void *v7;
  id v8;
  id v9;
  void *v10;
  id v11;
  id v12;
  void *v13;
  id v14;
  id v15;
  void *v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  void *v23;

  if (!a2)
    goto LABEL_4;
  v3 = a2;
  if ((objc_msgSend(v3, sel_isPaused) & 1) != 0)
  {

LABEL_4:
    result = (id)HKLocalizedNoDataString();
    if (result)
    {
      v5 = result;
      v6 = sub_1BCAB5F04();
LABEL_21:

      return (id)v6;
    }
    __break(1u);
    goto LABEL_27;
  }
  result = (id)HKNumberFormatterFromTemplate();
  if (!result)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  v7 = result;
  if (a1)
  {
    if (a1 != 1)
      goto LABEL_16;
    v8 = objc_msgSend(v3, sel_appleExerciseTime);
    v9 = objc_msgSend((id)objc_opt_self(), sel_minuteUnit);
    objc_msgSend(v8, sel_doubleValueForUnit_, v9);

    v10 = (void *)sub_1BCAB4FC8();
    v5 = objc_msgSend(v7, sel_stringFromNumber_, v10);

    if (v5)
      goto LABEL_19;
    result = (id)HKLocalizedNoDataString();
    if (result)
    {
LABEL_18:
      v5 = result;
      goto LABEL_19;
    }
    __break(1u);
  }
  if (objc_msgSend(v3, sel_activityMoveMode) == (id)2)
  {
    v11 = objc_msgSend(v3, sel_appleMoveTime);
    v12 = objc_msgSend((id)objc_opt_self(), sel_minuteUnit);
    objc_msgSend(v11, sel_doubleValueForUnit_, v12);

    v13 = (void *)sub_1BCAB4FC8();
    v5 = objc_msgSend(v7, sel_stringFromNumber_, v13);

    if (v5)
      goto LABEL_19;
    result = (id)HKLocalizedNoDataString();
    if (!result)
    {
      __break(1u);
LABEL_16:
      v14 = objc_msgSend(v3, sel_appleStandHours);
      v15 = objc_msgSend((id)objc_opt_self(), sel_countUnit);
      objc_msgSend(v14, sel_doubleValueForUnit_, v15);

      v16 = (void *)sub_1BCAB4FC8();
      v5 = objc_msgSend(v7, sel_stringFromNumber_, v16);

      if (!v5)
      {
        result = (id)HKLocalizedNoDataString();
        if (!result)
        {
LABEL_28:
          __break(1u);
          goto LABEL_29;
        }
        goto LABEL_18;
      }
LABEL_19:
      v6 = sub_1BCAB5F04();
LABEL_20:

      goto LABEL_21;
    }
    goto LABEL_18;
  }
  v17 = sub_1BC9D24CC();
  v18 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB6A70]), sel_initWithIdentifier_, *MEMORY[0x1E0CB5A48]);
  v19 = objc_msgSend(v17, sel_displayTypeForObjectType_, v18);

  v20 = sub_1BC9D242C();
  v21 = objc_msgSend(v20, sel_unitForDisplayType_, v19);

  v22 = objc_msgSend(v3, sel_activeEnergyBurned);
  _HKWorkoutFlooredValueForQuantity();

  v23 = (void *)sub_1BCAB684C();
  v5 = objc_msgSend(v7, sel_stringFromNumber_, v23);

  if (v5)
  {
LABEL_25:
    v6 = sub_1BCAB5F04();

    goto LABEL_20;
  }
  result = (id)HKLocalizedNoDataString();
  if (result)
  {
    v5 = result;
    goto LABEL_25;
  }
LABEL_29:
  __break(1u);
  return result;
}

void sub_1BC9D3850()
{
  char *v0;
  char *v1;
  uint64_t v2;
  double v3;
  uint64_t v4;
  id v5;
  id v6;
  id v7;
  unsigned int v8;
  BOOL v9;
  void *v10;
  void *v11;
  double MinX;
  double MaxX;
  void *v14;
  id v15;
  double v16;
  id v17;
  void *v18;
  id v19;
  void *v20;
  void *v21;
  void *v22;
  id v23;
  void *v24;
  void *v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  char v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  double v36;
  char v37;
  char *v38;
  char *v39;
  NSObject *v40;
  os_log_type_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  id v46;
  id v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t ObjectType;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  CGRect v61;
  CGRect v62;

  v1 = v0;
  ObjectType = swift_getObjectType();
  v2 = sub_1BCAB5514();
  v56 = *(_QWORD *)(v2 - 8);
  v57 = v2;
  *(_QWORD *)&v3 = MEMORY[0x1E0C80A78](v2).n128_u64[0];
  v58 = (char *)&v52 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = objc_msgSend(v0, sel_arrangedSubviewInColumnAtIndex_rowAtIndex_, 0, 0, v3);
  v6 = objc_msgSend(v0, sel_arrangedSubviewInColumnAtIndex_rowAtIndex_, 1, 0);
  v7 = objc_msgSend(v0, sel_arrangedSubviewInColumnAtIndex_rowAtIndex_, 2, 0);
  v8 = objc_msgSend(v0, sel_hk_isLeftToRight);
  v9 = v8 == 0;
  if (v8)
    v10 = v7;
  else
    v10 = v5;
  if (v9)
    v11 = v7;
  else
    v11 = v5;
  objc_msgSend(v10, sel_frame);
  MinX = CGRectGetMinX(v61);
  objc_msgSend(v11, sel_frame);
  MaxX = CGRectGetMaxX(v62);
  objc_opt_self();
  v14 = (void *)swift_dynamicCastObjCClass();
  if (v14)
    v15 = v6;
  v16 = MinX - MaxX;
  v17 = objc_msgSend(v14, sel_font);

  if (!v17)
  {
    if (byte_1EF47A010 != 1)
    {
      v25 = (void *)objc_opt_self();
      sub_1BCAB5F04();
      v24 = (void *)sub_1BCAB5EE0();
      swift_bridgeObjectRelease();
      v17 = objc_msgSend(v25, sel_hk_preferredFontForTextStyle_symbolicTraits_, v24, 2);
      goto LABEL_17;
    }
    if (qword_1ED6C5FF0 != -1)
      swift_once();
    v18 = (void *)qword_1ED6C5560;
    sub_1BC9A649C(0, (unint64_t *)&qword_1ED6C5B38);
    v19 = v18;
    v20 = (void *)sub_1BCAB6348();
    v17 = objc_msgSend(v19, sel_objectForKey_, v20);

    if (!v17)
    {
      v21 = (void *)objc_opt_self();
      sub_1BCAB5F04();
      v22 = (void *)sub_1BCAB5EE0();
      swift_bridgeObjectRelease();
      v17 = objc_msgSend(v21, sel_hk_preferredFontForTextStyle_symbolicTraits_, v22, 2);

      if (byte_1EF47A010 == 1)
      {
        v23 = (id)qword_1ED6C5560;
        v24 = (void *)sub_1BCAB6348();
        objc_msgSend(v23, sel_setObject_forKey_, v17, v24);

LABEL_17:
      }
    }
  }
  v26 = v16 + -20.0;
  if (!*(_QWORD *)&v1[OBJC_IVAR____TtC19HealthVisualization29HighlightActivityCalendarView_longWeekdayStrings])
    goto LABEL_22;
  v27 = (uint64_t)v17;
  v28 = swift_bridgeObjectRetain();
  v29 = sub_1BC9D4F20(v28, v27);
  swift_bridgeObjectRelease();

  v30 = COERCE_DOUBLE(sub_1BC99F55C(v29));
  LOBYTE(v27) = v31;
  swift_bridgeObjectRelease();
  if ((v27 & 1) != 0)
  {
LABEL_22:
    if (v26 >= 0.0)
      goto LABEL_21;
  }
  else if (v26 >= v30)
  {
LABEL_21:
    v32 = 1;
    goto LABEL_32;
  }
  if (!*(_QWORD *)&v1[OBJC_IVAR____TtC19HealthVisualization29HighlightActivityCalendarView_shortWeekdayStrings])
    goto LABEL_27;
  v33 = (uint64_t)v17;
  v34 = swift_bridgeObjectRetain();
  v35 = sub_1BC9D4F20(v34, v33);
  swift_bridgeObjectRelease();

  v36 = COERCE_DOUBLE(sub_1BC99F55C(v35));
  LOBYTE(v33) = v37;
  swift_bridgeObjectRelease();
  if ((v33 & 1) != 0)
  {
LABEL_27:
    if (v26 >= 0.0)
      goto LABEL_26;
  }
  else if (v26 >= v36)
  {
LABEL_26:
    v32 = 2;
    goto LABEL_32;
  }
  v38 = v58;
  sub_1BCAB54D8();
  v39 = v1;
  v40 = sub_1BCAB54FC();
  v41 = sub_1BCAB61A4();
  v42 = v41;
  if (os_log_type_enabled(v40, v41))
  {
    v43 = swift_slowAlloc();
    v54 = swift_slowAlloc();
    v59 = v54;
    *(_DWORD *)v43 = 136446722;
    v53 = v42;
    v60 = ObjectType;
    swift_getMetatypeMetadata();
    v44 = sub_1BCAB5F28();
    v60 = sub_1BC99BD4C(v44, v45, &v59);
    sub_1BCAB63A8();
    swift_bridgeObjectRelease();
    *(_WORD *)(v43 + 12) = 2080;
    ObjectType = v43 + 14;
    v46 = objc_msgSend(v39, sel_traitCollection);
    v47 = objc_msgSend(v46, sel_preferredContentSizeCategory);

    v60 = (uint64_t)v47;
    type metadata accessor for UIContentSizeCategory(0);
    v48 = sub_1BCAB5F28();
    v60 = sub_1BC99BD4C(v48, v49, &v59);
    sub_1BCAB63A8();

    swift_bridgeObjectRelease();
    *(_WORD *)(v43 + 22) = 2048;
    v60 = *(_QWORD *)&v26;
    sub_1BCAB63A8();
    _os_log_impl(&dword_1BC989000, v40, (os_log_type_t)v53, "%{public}s: unable to fit weekday labels for the contentSizeCategory (%s and column width (%f)", (uint8_t *)v43, 0x20u);
    v50 = v54;
    swift_arrayDestroy();
    MEMORY[0x1BCCFBF5C](v50, -1, -1);
    MEMORY[0x1BCCFBF5C](v43, -1, -1);

    (*(void (**)(char *, uint64_t))(v56 + 8))(v58, v57);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v56 + 8))(v38, v57);
  }
  v32 = 3;
LABEL_32:
  v51 = OBJC_IVAR____TtC19HealthVisualization29HighlightActivityCalendarView_currentWeekdayStringLength;
  if (v1[OBJC_IVAR____TtC19HealthVisualization29HighlightActivityCalendarView_currentWeekdayStringLength] == v32)
  {

  }
  else
  {
    sub_1BC9D3EDC(v32);

    v1[v51] = v32;
  }
}

void sub_1BC9D3EDC(unsigned __int8 a1)
{
  char *v1;
  id v3;
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  id v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  id v11;
  void *v12;
  id v13;
  void *v14;
  uint64_t v15;
  void *v16;
  id v17;
  id v18;
  uint64_t v19;

  v19 = 1;
  v3 = objc_msgSend(v1, sel_columnAtIndex_, 1);
  if (a1 >= 2u)
  {
    if (a1 != 2)
    {
      v5 = 0;
      v6 = 0;
      goto LABEL_10;
    }
    v4 = &OBJC_IVAR____TtC19HealthVisualization29HighlightActivityCalendarView_shortWeekdayStrings;
  }
  else
  {
    v4 = &OBJC_IVAR____TtC19HealthVisualization29HighlightActivityCalendarView_longWeekdayStrings;
  }
  v6 = *(_QWORD *)&v1[*v4];
  if (v6)
  {
    v5 = *(_QWORD *)(v6 + 16);
    swift_bridgeObjectRetain();
  }
  else
  {
    v5 = 0;
  }
  v19 = 0;
LABEL_10:
  v7 = objc_msgSend(v3, sel_arrangedSubviews);
  sub_1BC9A649C(0, (unint64_t *)&qword_1ED6C5B10);
  v8 = sub_1BCAB6018();

  if (v8 >> 62)
    goto LABEL_28;
  v9 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v9)
  {
LABEL_29:
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return;
  }
LABEL_12:
  if (v9 >= 1)
  {
    v18 = v3;
    v10 = 0;
    v3 = (id)(v8 & 0xC000000000000001);
    while (1)
    {
      if (v3)
        v13 = (id)MEMORY[0x1BCCFB0D4](v10, v8);
      else
        v13 = *(id *)(v8 + 8 * v10 + 32);
      v14 = v13;
      objc_opt_self();
      v15 = swift_dynamicCastObjCClass();
      if (v15)
      {
        v16 = (void *)v15;
        if (v6)
        {
          if (!v5)
          {
            __break(1u);
LABEL_27:
            __break(1u);
LABEL_28:
            swift_bridgeObjectRetain();
            v9 = sub_1BCAB65DC();
            swift_bridgeObjectRelease();
            if (!v9)
              goto LABEL_29;
            goto LABEL_12;
          }
          if (v10 % v5 >= *(_QWORD *)(v6 + 16))
            goto LABEL_27;
          v17 = v14;
          swift_bridgeObjectRetain();
          v12 = (void *)sub_1BCAB5EE0();
          v3 = (id)(v8 & 0xC000000000000001);
          swift_bridgeObjectRelease();
        }
        else
        {
          v11 = v14;
          v12 = 0;
        }
        objc_msgSend(v16, sel_setText_, v12, v18);

        objc_msgSend(v16, sel_setHidden_, v19);
      }
      ++v10;

      if (v9 == v10)
        goto LABEL_29;
    }
  }
  __break(1u);
}

void _s19HealthVisualization29HighlightActivityCalendarViewC32wheelchairUseCharacteristicCache_0G14UsageDidChangeySo013_HKWheelchairhiJ0CSg_SbtF_0()
{
  void *v0;
  id v1;
  id v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;
  id v13;
  void *v14;
  id v15;
  void *v16;
  id v17;
  void *v18;
  id v19;
  void *v20;
  void *v21;
  id v22;
  id v23;
  id v24;
  void *v25;
  void *v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  void *v32;
  id v33;
  id v34;
  id v35;
  void *v36;
  id v37;
  void *v38;
  id v39;
  id v40;
  id v41;
  void *v42;
  id v43;
  id v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  id v48;
  void *v49;

  v1 = objc_msgSend(v0, sel_columnAtIndex_, 4);
  v2 = objc_msgSend(v1, sel_arrangedSubviews);
  sub_1BC9A649C(0, (unint64_t *)&qword_1ED6C5B10);
  v3 = sub_1BCAB6018();

  v44 = v1;
  if (v3 >> 62)
  {
LABEL_32:
    swift_bridgeObjectRetain();
    v4 = sub_1BCAB65DC();
    swift_bridgeObjectRelease();
    if (v4)
      goto LABEL_3;
LABEL_33:
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    return;
  }
  v4 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v4)
    goto LABEL_33;
LABEL_3:
  v47 = v3 & 0xC000000000000001;
  v5 = 4;
  v45 = v4;
  v46 = v3;
  while (1)
  {
    if (v47)
      v7 = (id)MEMORY[0x1BCCFB0D4](v5 - 4, v3);
    else
      v7 = *(id *)(v3 + 8 * v5);
    v8 = v7;
    v9 = v5 - 3;
    if (__OFADD__(v5 - 4, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    objc_opt_self();
    v10 = swift_dynamicCastObjCClass();
    if (v10)
      break;
LABEL_6:

    ++v5;
    if (v9 == v4)
      goto LABEL_33;
  }
  v11 = (void *)v10;
  v12 = v8;
  v13 = objc_msgSend(v11, sel_attributedText);
  if (v13)
  {
    v14 = v13;
    v15 = objc_msgSend(v13, sel_string);

    sub_1BCAB5F04();
  }
  v49 = v12;
  if (byte_1EF47A010 != 1)
  {
    v25 = (void *)objc_opt_self();
    sub_1BCAB5F04();
    v26 = (void *)sub_1BCAB5EE0();
    swift_bridgeObjectRelease();
    v24 = objc_msgSend(v25, sel_hk_preferredFontForTextStyle_symbolicTraits_, v26, 2);

    v19 = objc_msgSend(v24, sel_hk_monospacedFont);
    goto LABEL_21;
  }
  if (qword_1ED6C5FF0 != -1)
    swift_once();
  v16 = (void *)qword_1ED6C5560;
  sub_1BC9A649C(0, (unint64_t *)&qword_1ED6C5B38);
  v17 = v16;
  v18 = (void *)sub_1BCAB6348();
  v19 = objc_msgSend(v17, sel_objectForKey_, v18);

  if (!v19)
  {
    v20 = (void *)objc_opt_self();
    sub_1BCAB5F04();
    v21 = (void *)sub_1BCAB5EE0();
    swift_bridgeObjectRelease();
    v22 = objc_msgSend(v20, sel_hk_preferredFontForTextStyle_symbolicTraits_, v21, 2);

    v19 = objc_msgSend(v22, sel_hk_monospacedFont);
    if ((byte_1EF47A010 & 1) != 0)
    {
      v23 = (id)qword_1ED6C5560;
      v24 = (id)sub_1BCAB6348();
      objc_msgSend(v23, sel_setObject_forKey_, v19, v24);

LABEL_21:
    }
  }
  v27 = objc_msgSend((id)objc_opt_self(), sel_configurationWithFont_, v19);
  v28 = sub_1BC9D24CC();
  v29 = objc_msgSend(v28, sel_wheelchairUseCharacteristicCache);

  if (v29)
  {
    objc_msgSend(v29, sel_isWheelchairUser);

    v30 = objc_msgSend((id)objc_opt_self(), sel_hk_activityStandGoalLineColor);
    v31 = v27;
    v32 = (void *)sub_1BCAB5EE0();
    swift_bridgeObjectRelease();
    v33 = objc_msgSend((id)objc_opt_self(), sel__systemImageNamed_withConfiguration_, v32, v31);

    if (v33)
    {
      v34 = objc_msgSend(v33, sel_imageWithRenderingMode_, 2);

      v33 = objc_msgSend(v34, sel_imageWithTintColor_, v30);
    }
    else
    {

    }
    v35 = objc_allocWithZone(MEMORY[0x1E0CB3778]);
    swift_bridgeObjectRetain();
    v36 = (void *)sub_1BCAB5EE0();
    swift_bridgeObjectRelease();
    v37 = objc_msgSend(v35, sel_initWithString_, v36);

    if (v33)
    {
      v38 = (void *)objc_opt_self();
      v6 = v33;
      v39 = objc_msgSend(v38, sel_textAttachmentWithImage_, v6);
      v40 = objc_msgSend((id)objc_opt_self(), sel_attributedStringWithAttachment_, v39);

      objc_msgSend(v37, sel_insertAttributedString_atIndex_, v40, 0);
      if ((objc_msgSend(v48, sel_hk_isLeftToRight) & 1) != 0)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        v41 = objc_allocWithZone(MEMORY[0x1E0CB3498]);
        v42 = (void *)sub_1BCAB5EE0();
        v43 = objc_msgSend(v41, sel_initWithString_, v42);

        objc_msgSend(v37, sel_insertAttributedString_atIndex_, v43, 0);
        swift_bridgeObjectRelease();

      }
    }
    else
    {
      swift_bridgeObjectRelease();
      v6 = 0;
    }
    objc_msgSend(v11, sel_setAttributedText_, v37, v44);

    v4 = v45;
    v3 = v46;
    goto LABEL_6;
  }
  __break(1u);
}

void sub_1BC9D4850()
{
  char *v0;
  double Width;
  id *v2;
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v11;
  void *v12;
  id v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t i;
  id v17;
  void *v18;
  void *v19;
  id v20;
  id v21;
  CGRect v22;

  objc_msgSend(v0, sel_bounds);
  Width = CGRectGetWidth(v22);
  if (Width <= 270.0)
  {
    v2 = (id *)MEMORY[0x1E0DC4900];
    goto LABEL_11;
  }
  if (Width <= 370.0)
  {
    v2 = (id *)MEMORY[0x1E0DC48F0];
    goto LABEL_11;
  }
  if (Width <= 385.0)
  {
    v2 = (id *)MEMORY[0x1E0DC48D8];
    goto LABEL_11;
  }
  if (Width <= 415.0)
  {
    v2 = (id *)MEMORY[0x1E0DC48D0];
    goto LABEL_11;
  }
  if (qword_1EF477C20 != -1)
    goto LABEL_33;
  while (1)
  {
    v2 = (id *)&qword_1EF486D30;
LABEL_11:
    v20 = *v2;
    v3 = objc_msgSend(v0, sel_traitCollection);
    v4 = objc_msgSend(v3, sel_preferredContentSizeCategory);

    LOBYTE(v3) = sub_1BCAB62B8();
    if ((v3 & 1) == 0)
    {
LABEL_17:
      v12 = v20;
      goto LABEL_31;
    }
    v5 = OBJC_IVAR____TtC19HealthVisualization29HighlightActivityCalendarView_currentLabelMaximumContentSizeCategory;
    v6 = sub_1BCAB5F04();
    v8 = v7;
    if (v6 == sub_1BCAB5F04() && v8 == v9)
    {
      v21 = v20;

      swift_bridgeObjectRelease_n();
      v12 = v21;
      goto LABEL_31;
    }
    v11 = sub_1BCAB67C8();
    v20 = v20;

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v11 & 1) != 0)
      goto LABEL_17;
    v13 = objc_msgSend(v0, sel_subviews);
    sub_1BC9A649C(0, (unint64_t *)&qword_1ED6C5B10);
    v14 = sub_1BCAB6018();

    if (v14 >> 62)
    {
      swift_bridgeObjectRetain();
      v15 = sub_1BCAB65DC();
      swift_bridgeObjectRelease();
      if (!v15)
        goto LABEL_30;
    }
    else
    {
      v15 = *(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (!v15)
        goto LABEL_30;
    }
    if (v15 >= 1)
      break;
    __break(1u);
LABEL_33:
    swift_once();
  }
  for (i = 0; i != v15; ++i)
  {
    if ((v14 & 0xC000000000000001) != 0)
      v17 = (id)MEMORY[0x1BCCFB0D4](i, v14);
    else
      v17 = *(id *)(v14 + 8 * i + 32);
    v18 = v17;
    objc_opt_self();
    v19 = (void *)swift_dynamicCastObjCClass();
    if (v19)
      objc_msgSend(v19, sel_setMaximumContentSizeCategory_, v20);

  }
LABEL_30:
  swift_bridgeObjectRelease();
  v12 = *(void **)&v0[v5];
  *(_QWORD *)&v0[v5] = v20;
LABEL_31:

}

id HighlightActivityCalendarView.__allocating_init(frame:)(double a1, double a2, double a3, double a4)
{
  objc_class *v4;

  return objc_msgSend(objc_allocWithZone(v4), sel_initWithFrame_, a1, a2, a3, a4);
}

void HighlightActivityCalendarView.init(frame:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id HighlightActivityCalendarView.__allocating_init(arrangedSubviewRows:)(uint64_t a1)
{
  objc_class *v1;
  void *v2;
  id v3;

  if (a1)
  {
    sub_1BC9D5110();
    v2 = (void *)sub_1BCAB600C();
    swift_bridgeObjectRelease();
  }
  else
  {
    v2 = 0;
  }
  v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithArrangedSubviewRows_, v2);

  return v3;
}

void HighlightActivityCalendarView.init(arrangedSubviewRows:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id HighlightActivityCalendarView.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for HighlightActivityCalendarView();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

void (*sub_1BC9D4DE0(void (**a1)(id *a1), unint64_t a2, uint64_t a3))(_QWORD *a1)
{
  void (*v6)(id *);

  v6 = (void (*)(id *))malloc(0x28uLL);
  *a1 = v6;
  *((_QWORD *)v6 + 4) = sub_1BC9D4E60(v6, a2, a3);
  return sub_1BC9D4E34;
}

void sub_1BC9D4E34(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD))(*a1 + 32))(*a1);
  free(v1);
}

void (*sub_1BC9D4E60(void (*result)(id *a1), unint64_t a2, uint64_t a3))(id *a1)
{
  void (*v3)(id *);
  id v4;

  v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    v4 = (id)MEMORY[0x1BCCFB0D4](a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(_QWORD *)v3 = v4;
    return destroy for DiagramImageView.DiagramTransformer;
  }
  __break(1u);
  return result;
}

id sub_1BC9D4ECC()
{
  if (qword_1ED6C5FF0 != -1)
    swift_once();
  return objc_msgSend((id)qword_1ED6C5560, sel_removeAllObjects);
}

id sub_1BC9D4F14(void *a1)
{
  return objc_msgSend(a1, sel_setNeedsLayout);
}

uint64_t sub_1BC9D4F20(uint64_t a1, uint64_t a2)
{
  int64_t v2;
  uint64_t v3;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = MEMORY[0x1E0DEE9D8];
  if (v2)
  {
    v13 = MEMORY[0x1E0DEE9D8];
    sub_1BC9BAC40(0, v2, 0);
    v3 = v13;
    v6 = a1 + 40;
    do
    {
      swift_bridgeObjectRetain();
      v7 = (void *)sub_1BCAB5EE0();
      objc_msgSend(v7, sel_hk_boundingWidthWithHeight_font_, a2, 1.79769313e308);
      v9 = v8;
      swift_bridgeObjectRelease();

      v11 = *(_QWORD *)(v13 + 16);
      v10 = *(_QWORD *)(v13 + 24);
      if (v11 >= v10 >> 1)
        sub_1BC9BAC40(v10 > 1, v11 + 1, 1);
      v6 += 16;
      *(_QWORD *)(v13 + 16) = v11 + 1;
      *(_QWORD *)(v13 + 8 * v11 + 32) = v9;
      --v2;
    }
    while (v2);
  }
  return v3;
}

void _s19HealthVisualization29HighlightActivityCalendarViewC5coderACSgSo7NSCoderC_tcfc_0()
{
  _BYTE *v0;
  void *v1;
  id v2;

  v0[OBJC_IVAR____TtC19HealthVisualization29HighlightActivityCalendarView_currentWeekdayStringLength] = 0;
  v1 = (void *)*MEMORY[0x1E0DC4938];
  *(_QWORD *)&v0[OBJC_IVAR____TtC19HealthVisualization29HighlightActivityCalendarView_currentLabelMaximumContentSizeCategory] = *MEMORY[0x1E0DC4938];
  *(_QWORD *)&v0[OBJC_IVAR____TtC19HealthVisualization29HighlightActivityCalendarView____lazy_storage___ringsRenderer] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC19HealthVisualization29HighlightActivityCalendarView____lazy_storage___unitPreferenceController] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC19HealthVisualization29HighlightActivityCalendarView____lazy_storage___displayTypeController] = 0;
  v2 = v1;

  sub_1BCAB65C4();
  __break(1u);
}

uint64_t type metadata accessor for HighlightActivityCalendarView()
{
  return objc_opt_self();
}

void sub_1BC9D5110()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EF478738)
  {
    sub_1BC9A649C(255, (unint64_t *)&qword_1ED6C5B10);
    v0 = sub_1BCAB6060();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EF478738);
  }
}

uint64_t method lookup function for HighlightActivityCalendarView()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of HighlightActivityCalendarView.__allocating_init(model:healthStore:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 264))();
}

uint64_t storeEnumTagSinglePayload for HighlightActivityCalendarView.WeekdayStringLength(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1BC9D51D4 + 4 * byte_1BCAC0725[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1BC9D5208 + 4 * byte_1BCAC0720[v4]))();
}

uint64_t sub_1BC9D5208(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BC9D5210(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BC9D5218);
  return result;
}

uint64_t sub_1BC9D5224(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BC9D522CLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1BC9D5230(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BC9D5238(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for HighlightActivityCalendarView.WeekdayStringLength()
{
  return &type metadata for HighlightActivityCalendarView.WeekdayStringLength;
}

unint64_t sub_1BC9D5258()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EF4787A0;
  if (!qword_1EF4787A0)
  {
    sub_1BC9A1210(255, &qword_1EF4787A8, (uint64_t)&type metadata for HighlightActivityCalendarView.WeekdayStringLength, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    result = MEMORY[0x1BCCFBE84](MEMORY[0x1E0DEAF50], v1);
    atomic_store(result, (unint64_t *)&qword_1EF4787A0);
  }
  return result;
}

unint64_t sub_1BC9D52BC()
{
  unint64_t result;

  result = qword_1EF4787B0;
  if (!qword_1EF4787B0)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCAC081C, &type metadata for HighlightActivityCalendarView.WeekdayStringLength);
    atomic_store(result, (unint64_t *)&qword_1EF4787B0);
  }
  return result;
}

id sub_1BC9D5300()
{
  id v0;
  uint64_t v1;
  id v2;
  double v3;
  void *v4;
  id v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  id v13;
  int v15;

  v0 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3990]), sel_init);
  objc_msgSend(v0, sel_setAdjustsFontForContentSizeCategory_, 1);
  v1 = qword_1EF477C20;
  v2 = v0;
  if (v1 != -1)
    swift_once();
  objc_msgSend(v2, sel_setMaximumContentSizeCategory_, qword_1EF486D30);

  type metadata accessor for UILayoutPriority(0);
  sub_1BC9D5940();
  sub_1BCAB5520();
  LODWORD(v3) = v15;
  objc_msgSend(v2, sel_setContentHuggingPriority_forAxis_, 0, v3);
  if (byte_1EF47A010 != 1)
  {
    v12 = (void *)objc_opt_self();
    sub_1BCAB5F04();
    v11 = (void *)sub_1BCAB5EE0();
    swift_bridgeObjectRelease();
    v7 = objc_msgSend(v12, sel_hk_preferredFontForTextStyle_symbolicTraits_, v11, 2);
    goto LABEL_10;
  }
  if (qword_1ED6C5FF0 != -1)
    swift_once();
  v4 = (void *)qword_1ED6C5560;
  sub_1BC9A649C(0, (unint64_t *)&qword_1ED6C5B38);
  v5 = v4;
  v6 = (void *)sub_1BCAB6348();
  v7 = objc_msgSend(v5, sel_objectForKey_, v6);

  if (!v7)
  {
    v8 = (void *)objc_opt_self();
    sub_1BCAB5F04();
    v9 = (void *)sub_1BCAB5EE0();
    swift_bridgeObjectRelease();
    v7 = objc_msgSend(v8, sel_hk_preferredFontForTextStyle_symbolicTraits_, v9, 2);

    if ((byte_1EF47A010 & 1) != 0)
    {
      v10 = (id)qword_1ED6C5560;
      v11 = (void *)sub_1BCAB6348();
      objc_msgSend(v10, sel_setObject_forKey_, v7, v11);

LABEL_10:
    }
  }
  objc_msgSend(v2, sel_setFont_, v7);

  v13 = objc_msgSend((id)objc_opt_self(), sel_secondaryLabelColor);
  objc_msgSend(v2, sel_setTextColor_, v13);

  return v2;
}

id sub_1BC9D5600()
{
  id v0;
  uint64_t v1;
  id v2;
  double v3;
  void *v4;
  id v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  id v10;
  id v11;
  id v12;
  void *v13;
  void *v14;
  id v15;
  int v17;

  v0 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3990]), sel_init);
  objc_msgSend(v0, sel_setAdjustsFontForContentSizeCategory_, 1);
  v1 = qword_1EF477C20;
  v2 = v0;
  if (v1 != -1)
    swift_once();
  objc_msgSend(v2, sel_setMaximumContentSizeCategory_, qword_1EF486D30);

  type metadata accessor for UILayoutPriority(0);
  sub_1BC9D5940();
  sub_1BCAB5520();
  LODWORD(v3) = v17;
  objc_msgSend(v2, sel_setContentCompressionResistancePriority_forAxis_, 0, v3);
  if (byte_1EF47A010 != 1)
  {
    v13 = (void *)objc_opt_self();
    sub_1BCAB5F04();
    v14 = (void *)sub_1BCAB5EE0();
    swift_bridgeObjectRelease();
    v12 = objc_msgSend(v13, sel_hk_preferredFontForTextStyle_symbolicTraits_, v14, 2);

    v7 = objc_msgSend(v12, sel_hk_monospacedFont);
    goto LABEL_10;
  }
  if (qword_1ED6C5FF0 != -1)
    swift_once();
  v4 = (void *)qword_1ED6C5560;
  sub_1BC9A649C(0, (unint64_t *)&qword_1ED6C5B38);
  v5 = v4;
  v6 = (void *)sub_1BCAB6348();
  v7 = objc_msgSend(v5, sel_objectForKey_, v6);

  if (!v7)
  {
    v8 = (void *)objc_opt_self();
    sub_1BCAB5F04();
    v9 = (void *)sub_1BCAB5EE0();
    swift_bridgeObjectRelease();
    v10 = objc_msgSend(v8, sel_hk_preferredFontForTextStyle_symbolicTraits_, v9, 2);

    v7 = objc_msgSend(v10, sel_hk_monospacedFont);
    if ((byte_1EF47A010 & 1) != 0)
    {
      v11 = (id)qword_1ED6C5560;
      v12 = (id)sub_1BCAB6348();
      objc_msgSend(v11, sel_setObject_forKey_, v7, v12);

LABEL_10:
    }
  }
  objc_msgSend(v2, sel_setFont_, v7);

  v15 = objc_msgSend((id)objc_opt_self(), sel_secondaryLabelColor);
  objc_msgSend(v2, sel_setTextColor_, v15);

  return v2;
}

unint64_t sub_1BC9D5940()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1ED6C5AF8;
  if (!qword_1ED6C5AF8)
  {
    type metadata accessor for UILayoutPriority(255);
    result = MEMORY[0x1BCCFBE84](MEMORY[0x1E0DC2B88], v1);
    atomic_store(result, (unint64_t *)&qword_1ED6C5AF8);
  }
  return result;
}

uint64_t sub_1BC9D5988(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for HighlightCalendarDayViewModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1BC9D59CC(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for HighlightCalendarDayViewModel(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

id sub_1BC9D5A08(id result, id a2, uint64_t a3, char a4)
{
  switch(a4)
  {
    case 0:
      result = result;
      break;
    case 1:
    case 2:
    case 3:
    case 4:
      result = (id)swift_bridgeObjectRetain();
      break;
    default:
      return result;
  }
  return result;
}

void sub_1BC9D5A40(void *a1, id a2, uint64_t a3, char a4)
{
  switch(a4)
  {
    case 0:

      break;
    case 1:
    case 2:
    case 3:
    case 4:
      swift_bridgeObjectRelease();
      break;
    default:
      return;
  }
}

void sub_1BC9D5A78()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EF4787B8)
  {
    sub_1BC9D5ACC();
    v0 = sub_1BCAB67A4();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EF4787B8);
  }
}

unint64_t sub_1BC9D5ACC()
{
  unint64_t result;

  result = qword_1EF4787C0;
  if (!qword_1EF4787C0)
  {
    sub_1BC9D5B04();
    result = swift_getExistentialMetatypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1EF4787C0);
  }
  return result;
}

unint64_t sub_1BC9D5B04()
{
  unint64_t result;

  result = qword_1EF4787C8;
  if (!qword_1EF4787C8)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1EF4787C8);
  }
  return result;
}

uint64_t static EmptyQueryConfiguration.== infix(_:_:)()
{
  return 1;
}

uint64_t sub_1BC9D5B64()
{
  return 0;
}

uint64_t sub_1BC9D5B70@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *a1 = 1;
  return result;
}

uint64_t sub_1BC9D5B9C()
{
  sub_1BC9D5D04();
  return sub_1BCAB68D0();
}

uint64_t sub_1BC9D5BC4()
{
  sub_1BC9D5D04();
  return sub_1BCAB68DC();
}

uint64_t EmptyQueryConfiguration.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;

  sub_1BC9D5CAC();
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BC9D5D04();
  sub_1BCAB68B8();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

void sub_1BC9D5CAC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED6C4738)
  {
    sub_1BC9D5D04();
    v0 = sub_1BCAB6780();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED6C4738);
  }
}

unint64_t sub_1BC9D5D04()
{
  unint64_t result;

  result = qword_1ED6C3980;
  if (!qword_1ED6C3980)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCAC0944, &type metadata for EmptyQueryConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED6C3980);
  }
  return result;
}

uint64_t EmptyQueryConfiguration.init(from:)(uint64_t a1)
{
  return __swift_destroy_boxed_opaque_existential_1(a1);
}

uint64_t sub_1BC9D5D6C(uint64_t a1)
{
  return __swift_destroy_boxed_opaque_existential_1(a1);
}

uint64_t sub_1BC9D5D90(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;

  sub_1BC9D5CAC();
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BC9D5D04();
  sub_1BCAB68B8();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

ValueMetadata *type metadata accessor for EmptyQueryConfiguration()
{
  return &type metadata for EmptyQueryConfiguration;
}

ValueMetadata *type metadata accessor for EmptyQueryConfiguration.CodingKeys()
{
  return &type metadata for EmptyQueryConfiguration.CodingKeys;
}

unint64_t sub_1BC9D5E74()
{
  unint64_t result;

  result = qword_1ED6C3160;
  if (!qword_1ED6C3160)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCAC08F4, &type metadata for EmptyQueryConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED6C3160);
  }
  return result;
}

unint64_t sub_1BC9D5EBC()
{
  unint64_t result;

  result = qword_1ED6C3988;
  if (!qword_1ED6C3988)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCAC091C, &type metadata for EmptyQueryConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED6C3988);
  }
  return result;
}

uint64_t sub_1BC9D5F00()
{
  return -1;
}

uint64_t QueryQualityOfServiceProviding.queryQualityOfService.getter()
{
  return -1;
}

uint64_t dispatch thunk of QueryQualityOfServiceProviding.queryQualityOfService.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t ResultProducingError.hash(into:)()
{
  return sub_1BCAB687C();
}

uint64_t ResultProducingError.hashValue.getter()
{
  sub_1BCAB6870();
  sub_1BCAB687C();
  return sub_1BCAB6894();
}

BOOL static ResultProducingError.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

unint64_t sub_1BC9D5FAC()
{
  unint64_t result;

  result = qword_1EF4787D0;
  if (!qword_1EF4787D0)
  {
    result = MEMORY[0x1BCCFBE84](&protocol conformance descriptor for ResultProducingError, &type metadata for ResultProducingError);
    atomic_store(result, (unint64_t *)&qword_1EF4787D0);
  }
  return result;
}

uint64_t dispatch thunk of ResultProducing.result.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t storeEnumTagSinglePayload for ResultProducingError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1BC9D6044 + 4 * byte_1BCAC09D5[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1BC9D6078 + 4 * byte_1BCAC09D0[v4]))();
}

uint64_t sub_1BC9D6078(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BC9D6080(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BC9D6088);
  return result;
}

uint64_t sub_1BC9D6094(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BC9D609CLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1BC9D60A0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BC9D60A8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ResultProducingError()
{
  return &type metadata for ResultProducingError;
}

void sub_1BC9D60C4()
{
  id v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v0 = objc_msgSend((id)objc_opt_self(), sel_percentUnit);
  v1 = objc_msgSend(v0, sel_unitString);

  v2 = sub_1BCAB5F04();
  v4 = v3;

  qword_1EF486D38 = v2;
  unk_1EF486D40 = v4;
}

unint64_t static AFibBurdenDistributionAnalysis.Constants.valueClampedToken.getter()
{
  return 0xD00000000000002BLL;
}

uint64_t AFibBurdenDistributionAnalysis.Result.timeOfDay.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1BC9D616C(v1, a1);
}

uint64_t sub_1BC9D616C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1BC9D61B0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_1BC9D61B0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EF4787D8)
  {
    type metadata accessor for TimeBasedDistribution();
    v0 = sub_1BCAB6384();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EF4787D8);
  }
}

uint64_t AFibBurdenDistributionAnalysis.Result.dayOfWeek.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for AFibBurdenDistributionAnalysis.Result() + 20);
  return sub_1BC9D616C(v3, a1);
}

uint64_t type metadata accessor for AFibBurdenDistributionAnalysis.Result()
{
  uint64_t result;

  result = qword_1EF478838;
  if (!qword_1EF478838)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t AFibBurdenDistributionAnalysis.Result.init(timeOfDay:dayOfWeek:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;

  sub_1BC9D62AC(a1, a3);
  v5 = a3 + *(int *)(type metadata accessor for AFibBurdenDistributionAnalysis.Result() + 20);
  return sub_1BC9D62AC(a2, v5);
}

uint64_t sub_1BC9D62AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1BC9D61B0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t static AFibBurdenDistributionAnalysis.processHistogramResult@Sendable (histogramResult:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t inited;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  char v28;
  uint64_t v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  void (*v45)(uint64_t, uint64_t, uint64_t);
  uint64_t v46;
  uint64_t v47;
  id v48;
  id v49;
  id v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  BOOL v55;
  char v56;
  char v57;
  unsigned int v58;
  void *v59;
  id v60;
  id v61;
  id v62;
  void *v63;
  uint64_t v64;
  BOOL v65;
  char v66;
  char v67;
  unsigned int v68;
  void *v69;
  id v70;
  id v71;
  id v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  BOOL v77;
  char v78;
  char v79;
  unsigned int v80;
  void *v81;
  id v82;
  id v83;
  id v84;
  void *v85;
  uint64_t v86;
  BOOL v87;
  char v88;
  char v89;
  unsigned int v90;
  void *v91;
  id v92;
  id v93;
  id v94;
  void *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  BOOL v99;
  char v100;
  char v101;
  unsigned int v102;
  void *v103;
  id v104;
  id v105;
  id v106;
  void *v107;
  uint64_t v108;
  BOOL v109;
  char v110;
  char v111;
  unsigned int v112;
  void *v113;
  id v114;
  id v115;
  id v116;
  void *v117;
  uint64_t v118;
  uint64_t v119;
  BOOL v120;
  char v121;
  char v122;
  unsigned int v123;
  void *v124;
  char v125;
  uint64_t v126;
  uint64_t v127;
  _BYTE *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  id v133;
  id v134;
  id v135;
  void *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  BOOL v140;
  char v141;
  char v142;
  unsigned int v143;
  void *v144;
  id v145;
  id v146;
  id v147;
  void *v148;
  uint64_t v149;
  BOOL v150;
  char v151;
  char v152;
  unsigned int v153;
  void *v154;
  id v155;
  id v156;
  id v157;
  void *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  BOOL v162;
  char v163;
  char v164;
  unsigned int v165;
  void *v166;
  id v167;
  id v168;
  id v169;
  void *v170;
  uint64_t v171;
  BOOL v172;
  char v173;
  char v174;
  unsigned int v175;
  void *v176;
  id v177;
  id v178;
  id v179;
  void *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  BOOL v184;
  char v185;
  char v186;
  unsigned int v187;
  void *v188;
  id v189;
  id v190;
  id v191;
  void *v192;
  uint64_t v193;
  BOOL v194;
  char v195;
  char v196;
  unsigned int v197;
  void *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  _BYTE v204[12];
  int v205;
  uint64_t v206;
  void (*v207)(uint64_t, uint64_t, uint64_t);
  uint64_t v208;
  _BYTE *v209;
  _BYTE *v210;
  uint64_t v211;
  _BYTE *v212;
  uint64_t v213;
  uint64_t v214;
  unint64_t v215;

  v211 = a2;
  v3 = sub_1BCAB4F68();
  v208 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v210 = &v204[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v5);
  v212 = &v204[-v6];
  sub_1BC9D61B0();
  MEMORY[0x1E0C80A78](v7);
  v209 = &v204[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1BC9D8254(0, (unint64_t *)&qword_1ED6C6710);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1BCAC0AE0;
  v10 = objc_msgSend(a1, sel_dayOfWeekHistogram);
  v11 = objc_msgSend(v10, sel_mondayBurden);

  *(_QWORD *)(inited + 32) = v11;
  v12 = objc_msgSend(a1, sel_dayOfWeekHistogram);
  v13 = objc_msgSend(v12, sel_tuesdayBurden);

  *(_QWORD *)(inited + 40) = v13;
  v14 = objc_msgSend(a1, sel_dayOfWeekHistogram);
  v15 = objc_msgSend(v14, sel_wednesdayBurden);

  *(_QWORD *)(inited + 48) = v15;
  v16 = objc_msgSend(a1, sel_dayOfWeekHistogram);
  v17 = objc_msgSend(v16, sel_thursdayBurden);

  *(_QWORD *)(inited + 56) = v17;
  v18 = objc_msgSend(a1, sel_dayOfWeekHistogram);
  v19 = objc_msgSend(v18, sel_fridayBurden);

  *(_QWORD *)(inited + 64) = v19;
  v20 = objc_msgSend(a1, sel_dayOfWeekHistogram);
  v21 = objc_msgSend(v20, sel_saturdayBurden);

  *(_QWORD *)(inited + 72) = v21;
  v22 = objc_msgSend(a1, sel_dayOfWeekHistogram);
  v23 = objc_msgSend(v22, sel_sundayBurden);

  *(_QWORD *)(inited + 80) = v23;
  v215 = inited;
  sub_1BCAB6024();
  v24 = sub_1BC9D7E9C(v215);
  v26 = v25;
  LOBYTE(v22) = v27;
  swift_bridgeObjectRelease();
  v28 = v22 & 1;
  v29 = swift_initStackObject();
  *(_OWORD *)(v29 + 16) = xmmword_1BCAC0AF0;
  v30 = objc_msgSend(a1, sel_timeOfDayHistogram);
  v31 = objc_msgSend(v30, sel_midnightToFourAMBurden);

  *(_QWORD *)(v29 + 32) = v31;
  v32 = objc_msgSend(a1, sel_timeOfDayHistogram);
  v33 = objc_msgSend(v32, sel_fourAMtoEightAMBurden);

  *(_QWORD *)(v29 + 40) = v33;
  v34 = objc_msgSend(a1, sel_timeOfDayHistogram);
  v35 = objc_msgSend(v34, sel_eightAMToNoonBurden);

  *(_QWORD *)(v29 + 48) = v35;
  v36 = objc_msgSend(a1, sel_timeOfDayHistogram);
  v37 = objc_msgSend(v36, sel_noonToFourPMBurden);

  *(_QWORD *)(v29 + 56) = v37;
  v38 = objc_msgSend(a1, sel_timeOfDayHistogram);
  v39 = objc_msgSend(v38, sel_fourPMToEightPMBurden);

  *(_QWORD *)(v29 + 64) = v39;
  v40 = objc_msgSend(a1, sel_timeOfDayHistogram);
  v41 = objc_msgSend(v40, sel_eightPMToMidnightBurden);

  *(_QWORD *)(v29 + 72) = v41;
  v215 = v29;
  sub_1BCAB6024();
  v214 = sub_1BC9D7E9C(v215);
  v213 = v42;
  v205 = v43;
  swift_bridgeObjectRelease();
  if (qword_1EF477CB0 != -1)
    swift_once();
  v44 = __swift_project_value_buffer(v3, (uint64_t)qword_1EF479CD0);
  v45 = *(void (**)(uint64_t, uint64_t, uint64_t))(v208 + 16);
  v208 = v3;
  v207 = v45;
  v45((uint64_t)v212, v44, v3);
  sub_1BC9D8254(0, &qword_1EF4782E8);
  v206 = v46;
  v47 = swift_allocObject();
  *(_OWORD *)(v47 + 16) = xmmword_1BCAC0B00;
  v48 = objc_msgSend(a1, sel_dayOfWeekHistogram);
  v49 = objc_msgSend(v48, sel_sundayBurden);

  v50 = objc_msgSend(v49, sel_burdenPercentage);
  v51 = v50;
  v52 = 0;
  v53 = 0;
  if (v50)
  {
    objc_msgSend(v50, sel_doubleValue);
    v53 = v54;

  }
  v55 = v51 == 0;
  sub_1BC9D8298(v49, v24, v26, v28);
  v57 = v56;
  v58 = objc_msgSend(v49, sel_burdenPercentageWasClampedToLowerBound);

  v59 = (void *)MEMORY[0x1E0DEE9D8];
  if (v58)
    v59 = &unk_1E7544048;
  *(_OWORD *)(v47 + 32) = xmmword_1BCAC0B10;
  *(_QWORD *)(v47 + 48) = v53;
  *(_BYTE *)(v47 + 56) = v55;
  *(_BYTE *)(v47 + 57) = v57 & 1;
  *(_QWORD *)(v47 + 64) = v59;
  v60 = objc_msgSend(a1, sel_dayOfWeekHistogram);
  v61 = objc_msgSend(v60, sel_mondayBurden);

  v62 = objc_msgSend(v61, sel_burdenPercentage);
  v63 = v62;
  if (v62)
  {
    objc_msgSend(v62, sel_doubleValue);
    v52 = v64;

  }
  v65 = v63 == 0;
  sub_1BC9D8298(v61, v24, v26, v28);
  v67 = v66;
  v68 = objc_msgSend(v61, sel_burdenPercentageWasClampedToLowerBound);

  v69 = (void *)MEMORY[0x1E0DEE9D8];
  if (v68)
    v69 = &unk_1E7544048;
  *(_OWORD *)(v47 + 72) = xmmword_1BCABE680;
  *(_QWORD *)(v47 + 88) = v52;
  *(_BYTE *)(v47 + 96) = v65;
  *(_BYTE *)(v47 + 97) = v67 & 1;
  *(_QWORD *)(v47 + 104) = v69;
  v70 = objc_msgSend(a1, sel_dayOfWeekHistogram);
  v71 = objc_msgSend(v70, sel_tuesdayBurden);

  v72 = objc_msgSend(v71, sel_burdenPercentage);
  v73 = v72;
  v74 = 0;
  v75 = 0;
  if (v72)
  {
    objc_msgSend(v72, sel_doubleValue);
    v75 = v76;

  }
  v77 = v73 == 0;
  sub_1BC9D8298(v71, v24, v26, v28);
  v79 = v78;
  v80 = objc_msgSend(v71, sel_burdenPercentageWasClampedToLowerBound);

  v81 = (void *)MEMORY[0x1E0DEE9D8];
  if (v80)
    v81 = &unk_1E7544048;
  *(_OWORD *)(v47 + 112) = xmmword_1BCAC0B20;
  *(_QWORD *)(v47 + 128) = v75;
  *(_BYTE *)(v47 + 136) = v77;
  *(_BYTE *)(v47 + 137) = v79 & 1;
  *(_QWORD *)(v47 + 144) = v81;
  v82 = objc_msgSend(a1, sel_dayOfWeekHistogram);
  v83 = objc_msgSend(v82, sel_wednesdayBurden);

  v84 = objc_msgSend(v83, sel_burdenPercentage);
  v85 = v84;
  if (v84)
  {
    objc_msgSend(v84, sel_doubleValue);
    v74 = v86;

  }
  v87 = v85 == 0;
  sub_1BC9D8298(v83, v24, v26, v28);
  v89 = v88;
  v90 = objc_msgSend(v83, sel_burdenPercentageWasClampedToLowerBound);

  v91 = (void *)MEMORY[0x1E0DEE9D8];
  if (v90)
    v91 = &unk_1E7544048;
  *(_OWORD *)(v47 + 152) = xmmword_1BCAC0B30;
  *(_QWORD *)(v47 + 168) = v74;
  *(_BYTE *)(v47 + 176) = v87;
  *(_BYTE *)(v47 + 177) = v89 & 1;
  *(_QWORD *)(v47 + 184) = v91;
  v92 = objc_msgSend(a1, sel_dayOfWeekHistogram);
  v93 = objc_msgSend(v92, sel_thursdayBurden);

  v94 = objc_msgSend(v93, sel_burdenPercentage);
  v95 = v94;
  v96 = 0;
  v97 = 0;
  if (v94)
  {
    objc_msgSend(v94, sel_doubleValue);
    v97 = v98;

  }
  v99 = v95 == 0;
  sub_1BC9D8298(v93, v24, v26, v28);
  v101 = v100;
  v102 = objc_msgSend(v93, sel_burdenPercentageWasClampedToLowerBound);

  v103 = (void *)MEMORY[0x1E0DEE9D8];
  if (v102)
    v103 = &unk_1E7544048;
  *(_OWORD *)(v47 + 192) = xmmword_1BCAC0B40;
  *(_QWORD *)(v47 + 208) = v97;
  *(_BYTE *)(v47 + 216) = v99;
  *(_BYTE *)(v47 + 217) = v101 & 1;
  *(_QWORD *)(v47 + 224) = v103;
  v104 = objc_msgSend(a1, sel_dayOfWeekHistogram);
  v105 = objc_msgSend(v104, sel_fridayBurden);

  v106 = objc_msgSend(v105, sel_burdenPercentage);
  v107 = v106;
  if (v106)
  {
    objc_msgSend(v106, sel_doubleValue);
    v96 = v108;

  }
  v109 = v107 == 0;
  sub_1BC9D8298(v105, v24, v26, v28);
  v111 = v110;
  v112 = objc_msgSend(v105, sel_burdenPercentageWasClampedToLowerBound);

  v113 = (void *)MEMORY[0x1E0DEE9D8];
  if (v112)
    v113 = &unk_1E7544048;
  *(_OWORD *)(v47 + 232) = xmmword_1BCAC0B50;
  *(_QWORD *)(v47 + 248) = v96;
  *(_BYTE *)(v47 + 256) = v109;
  *(_BYTE *)(v47 + 257) = v111 & 1;
  *(_QWORD *)(v47 + 264) = v113;
  v114 = objc_msgSend(a1, sel_dayOfWeekHistogram);
  v115 = objc_msgSend(v114, sel_saturdayBurden);

  v116 = objc_msgSend(v115, sel_burdenPercentage);
  v117 = v116;
  if (v116)
  {
    objc_msgSend(v116, sel_doubleValue);
    v119 = v118;

  }
  else
  {
    v119 = 0;
  }
  v120 = v117 == 0;
  sub_1BC9D8298(v115, v24, v26, v28);
  v122 = v121;
  v123 = objc_msgSend(v115, sel_burdenPercentageWasClampedToLowerBound);

  v124 = (void *)MEMORY[0x1E0DEE9D8];
  if (v123)
    v124 = &unk_1E7544048;
  *(_OWORD *)(v47 + 272) = xmmword_1BCAC0B60;
  *(_QWORD *)(v47 + 288) = v119;
  *(_BYTE *)(v47 + 296) = v120;
  *(_BYTE *)(v47 + 297) = v122 & 1;
  *(_QWORD *)(v47 + 304) = v124;
  if (qword_1EF477C28 != -1)
    swift_once();
  v125 = v205 & 1;
  v126 = qword_1EF486D38;
  v127 = unk_1EF486D40;
  swift_bridgeObjectRetain();
  v128 = v209;
  TimeBasedDistribution.init(component:buckets:unitString:minimumComponentInterval:maximumComponentInterval:)((uint64_t)v212, v47, v126, v127, 0, 7, (uint64_t)v209);
  v129 = (uint64_t)v210;
  v130 = v208;
  if (qword_1EF477CA8 != -1)
    swift_once();
  v131 = __swift_project_value_buffer(v130, (uint64_t)qword_1EF479CB8);
  v207(v129, v131, v130);
  v132 = swift_allocObject();
  *(_OWORD *)(v132 + 16) = xmmword_1BCAC0B70;
  v133 = objc_msgSend(a1, sel_timeOfDayHistogram);
  v134 = objc_msgSend(v133, sel_midnightToFourAMBurden);

  v135 = objc_msgSend(v134, sel_burdenPercentage);
  v136 = v135;
  v137 = 0;
  v138 = 0;
  if (v135)
  {
    objc_msgSend(v135, sel_doubleValue);
    v138 = v139;

  }
  v140 = v136 == 0;
  sub_1BC9D8298(v134, v214, v213, v125);
  v142 = v141;
  v143 = objc_msgSend(v134, sel_burdenPercentageWasClampedToLowerBound);

  v144 = (void *)MEMORY[0x1E0DEE9D8];
  if (v143)
    v144 = &unk_1E7544048;
  *(_OWORD *)(v132 + 32) = xmmword_1BCAC0B80;
  *(_QWORD *)(v132 + 48) = v138;
  *(_BYTE *)(v132 + 56) = v140;
  *(_BYTE *)(v132 + 57) = v142 & 1;
  *(_QWORD *)(v132 + 64) = v144;
  v145 = objc_msgSend(a1, sel_timeOfDayHistogram);
  v146 = objc_msgSend(v145, sel_fourAMtoEightAMBurden);

  v147 = objc_msgSend(v146, sel_burdenPercentage);
  v148 = v147;
  if (v147)
  {
    objc_msgSend(v147, sel_doubleValue);
    v137 = v149;

  }
  v150 = v148 == 0;
  sub_1BC9D8298(v146, v214, v213, v125);
  v152 = v151;
  v153 = objc_msgSend(v146, sel_burdenPercentageWasClampedToLowerBound);

  v154 = (void *)MEMORY[0x1E0DEE9D8];
  if (v153)
    v154 = &unk_1E7544048;
  *(_OWORD *)(v132 + 72) = xmmword_1BCAC0B90;
  *(_QWORD *)(v132 + 88) = v137;
  *(_BYTE *)(v132 + 96) = v150;
  *(_BYTE *)(v132 + 97) = v152 & 1;
  *(_QWORD *)(v132 + 104) = v154;
  v155 = objc_msgSend(a1, sel_timeOfDayHistogram);
  v156 = objc_msgSend(v155, sel_eightAMToNoonBurden);

  v157 = objc_msgSend(v156, sel_burdenPercentage);
  v158 = v157;
  v159 = 0;
  v160 = 0;
  if (v157)
  {
    objc_msgSend(v157, sel_doubleValue);
    v160 = v161;

  }
  v162 = v158 == 0;
  sub_1BC9D8298(v156, v214, v213, v125);
  v164 = v163;
  v165 = objc_msgSend(v156, sel_burdenPercentageWasClampedToLowerBound);

  v166 = (void *)MEMORY[0x1E0DEE9D8];
  if (v165)
    v166 = &unk_1E7544048;
  *(_OWORD *)(v132 + 112) = xmmword_1BCAC0BA0;
  *(_QWORD *)(v132 + 128) = v160;
  *(_BYTE *)(v132 + 136) = v162;
  *(_BYTE *)(v132 + 137) = v164 & 1;
  *(_QWORD *)(v132 + 144) = v166;
  v167 = objc_msgSend(a1, sel_timeOfDayHistogram);
  v168 = objc_msgSend(v167, sel_noonToFourPMBurden);

  v169 = objc_msgSend(v168, sel_burdenPercentage);
  v170 = v169;
  if (v169)
  {
    objc_msgSend(v169, sel_doubleValue);
    v159 = v171;

  }
  v172 = v170 == 0;
  sub_1BC9D8298(v168, v214, v213, v125);
  v174 = v173;
  v175 = objc_msgSend(v168, sel_burdenPercentageWasClampedToLowerBound);

  v176 = (void *)MEMORY[0x1E0DEE9D8];
  if (v175)
    v176 = &unk_1E7544048;
  *(_OWORD *)(v132 + 152) = xmmword_1BCAC0BB0;
  *(_QWORD *)(v132 + 168) = v159;
  *(_BYTE *)(v132 + 176) = v172;
  *(_BYTE *)(v132 + 177) = v174 & 1;
  *(_QWORD *)(v132 + 184) = v176;
  v177 = objc_msgSend(a1, sel_timeOfDayHistogram);
  v178 = objc_msgSend(v177, sel_fourPMToEightPMBurden);

  v179 = objc_msgSend(v178, sel_burdenPercentage);
  v180 = v179;
  v181 = 0;
  v182 = 0;
  if (v179)
  {
    objc_msgSend(v179, sel_doubleValue);
    v182 = v183;

  }
  v184 = v180 == 0;
  sub_1BC9D8298(v178, v214, v213, v125);
  v186 = v185;
  v187 = objc_msgSend(v178, sel_burdenPercentageWasClampedToLowerBound);

  v188 = (void *)MEMORY[0x1E0DEE9D8];
  if (v187)
    v188 = &unk_1E7544048;
  *(_OWORD *)(v132 + 192) = xmmword_1BCAC0BC0;
  *(_QWORD *)(v132 + 208) = v182;
  *(_BYTE *)(v132 + 216) = v184;
  *(_BYTE *)(v132 + 217) = v186 & 1;
  *(_QWORD *)(v132 + 224) = v188;
  v189 = objc_msgSend(a1, sel_timeOfDayHistogram);
  v190 = objc_msgSend(v189, sel_eightPMToMidnightBurden);

  v191 = objc_msgSend(v190, sel_burdenPercentage);
  v192 = v191;
  if (v191)
  {
    objc_msgSend(v191, sel_doubleValue);
    v181 = v193;

  }
  v194 = v192 == 0;
  sub_1BC9D8298(v190, v214, v213, v125);
  v196 = v195;
  v197 = objc_msgSend(v190, sel_burdenPercentageWasClampedToLowerBound);

  v198 = (void *)MEMORY[0x1E0DEE9D8];
  if (v197)
    v198 = &unk_1E7544048;
  *(_OWORD *)(v132 + 232) = xmmword_1BCAC0BD0;
  *(_QWORD *)(v132 + 248) = v181;
  *(_BYTE *)(v132 + 256) = v194;
  *(_BYTE *)(v132 + 257) = v196 & 1;
  *(_QWORD *)(v132 + 264) = v198;
  v199 = qword_1EF486D38;
  v200 = unk_1EF486D40;
  swift_bridgeObjectRetain();
  v201 = v211;
  TimeBasedDistribution.init(component:buckets:unitString:minimumComponentInterval:maximumComponentInterval:)(v129, v132, v199, v200, 0, 24, v211);
  v202 = type metadata accessor for AFibBurdenDistributionAnalysis.Result();
  return sub_1BC9D62AC((uint64_t)v128, v201 + *(int *)(v202 + 20));
}

uint64_t sub_1BC9D7538(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  _QWORD v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_1BCA31BF8(v2);
  v3 = *(_QWORD *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  result = sub_1BC9D75A0(v5);
  *a1 = v2;
  return result;
}

uint64_t sub_1BC9D75A0(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  double v14;
  double v15;
  double v16;
  double v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  double *v24;
  double v25;
  uint64_t v26;
  double *v27;
  double v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  unint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  BOOL v54;
  uint64_t v55;
  char v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  BOOL v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  char *v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  unint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t i;
  double v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  unint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  double *__dst;

  v2 = a1;
  v3 = a1[1];
  result = sub_1BCAB678C();
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_136;
    if ((unint64_t)v3 >= 2)
    {
      v80 = 0;
      v81 = *v2;
      for (i = 1; i != v3; ++i)
      {
        v83 = *(double *)(v81 + 8 * i);
        v84 = v80;
        do
        {
          v85 = v81 + 8 * v84;
          if (v83 >= *(double *)v85)
            break;
          if (!v81)
            goto LABEL_140;
          *(_QWORD *)(v85 + 8) = *(_QWORD *)v85;
          *(double *)(v81 + 8 * v84--) = v83;
        }
        while (v84 != -1);
        ++v80;
      }
    }
    return result;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_145;
  v97 = result;
  v98 = v3;
  if (v3 < 2)
  {
    v8 = MEMORY[0x1E0DEE9D8];
    __dst = (double *)(MEMORY[0x1E0DEE9D8] + 32);
    if (v3 != 1)
    {
      v12 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
      v11 = (char *)MEMORY[0x1E0DEE9D8];
LABEL_102:
      v96 = v8;
      if (v12 >= 2)
      {
        v86 = *v2;
        do
        {
          v87 = v12 - 2;
          if (v12 < 2)
            goto LABEL_131;
          if (!v86)
            goto LABEL_144;
          v88 = v11;
          v89 = v11 + 32;
          v90 = *(_QWORD *)&v11[16 * v87 + 32];
          v91 = *(_QWORD *)&v11[16 * v12 + 24];
          sub_1BC9D7C30((double *)(v86 + 8 * v90), (double *)(v86 + 8 * *(_QWORD *)&v89[16 * v12 - 16]), v86 + 8 * v91, __dst);
          if (v1)
            break;
          if (v91 < v90)
            goto LABEL_132;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v88 = sub_1BCA31BBC((uint64_t)v88);
          if (v87 >= *((_QWORD *)v88 + 2))
            goto LABEL_133;
          v92 = &v88[16 * v87 + 32];
          *(_QWORD *)v92 = v90;
          *((_QWORD *)v92 + 1) = v91;
          v93 = *((_QWORD *)v88 + 2);
          if (v12 > v93)
            goto LABEL_134;
          memmove(&v88[16 * v12 + 16], &v88[16 * v12 + 32], 16 * (v93 - v12));
          v11 = v88;
          *((_QWORD *)v88 + 2) = v93 - 1;
          v12 = v93 - 1;
        }
        while (v93 > 2);
      }
LABEL_113:
      swift_bridgeObjectRelease();
      *(_QWORD *)(v96 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    v96 = MEMORY[0x1E0DEE9D8];
  }
  else
  {
    v6 = v5 >> 1;
    v7 = sub_1BCAB6048();
    *(_QWORD *)(v7 + 16) = v6;
    v3 = v98;
    v96 = v7;
    __dst = (double *)(v7 + 32);
  }
  v9 = 0;
  v10 = *v2;
  v94 = v2;
  v95 = *v2 - 8;
  v11 = (char *)MEMORY[0x1E0DEE9D8];
  v99 = *v2;
  while (1)
  {
    v13 = v9++;
    if (v9 < v3)
    {
      v14 = *(double *)(v10 + 8 * v9);
      v15 = *(double *)(v10 + 8 * v13);
      v9 = v13 + 2;
      if (v13 + 2 < v3)
      {
        v16 = v14;
        while (1)
        {
          v17 = v16;
          v16 = *(double *)(v10 + 8 * v9);
          if (v14 < v15 == v16 >= v17)
            break;
          if (v3 == ++v9)
          {
            v9 = v3;
            break;
          }
        }
      }
      if (v14 < v15)
      {
        if (v9 < v13)
          goto LABEL_137;
        if (v13 < v9)
        {
          v18 = (uint64_t *)(v95 + 8 * v9);
          v19 = v9;
          v20 = v13;
          v21 = (uint64_t *)(v10 + 8 * v13);
          do
          {
            if (v20 != --v19)
            {
              if (!v10)
                goto LABEL_143;
              v22 = *v21;
              *v21 = *v18;
              *v18 = v22;
            }
            ++v20;
            --v18;
            ++v21;
          }
          while (v20 < v19);
        }
      }
    }
    if (v9 >= v3)
      goto LABEL_46;
    if (__OFSUB__(v9, v13))
      goto LABEL_135;
    if (v9 - v13 >= v97)
      goto LABEL_46;
    v23 = v13 + v97;
    if (__OFADD__(v13, v97))
      goto LABEL_138;
    if (v23 >= v3)
      v23 = v3;
    if (v23 < v13)
      break;
    if (v9 != v23)
    {
      v24 = (double *)(v95 + 8 * v9);
      do
      {
        v25 = *(double *)(v10 + 8 * v9);
        v26 = v13;
        v27 = v24;
        do
        {
          v28 = *v27;
          if (v25 >= *v27)
            break;
          if (!v10)
            goto LABEL_141;
          *v27 = v25;
          v27[1] = v28;
          --v27;
          ++v26;
        }
        while (v9 != v26);
        ++v9;
        ++v24;
      }
      while (v9 != v23);
      v9 = v23;
    }
LABEL_46:
    if (v9 < v13)
      goto LABEL_130;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v11 = sub_1BCA317E4(0, *((_QWORD *)v11 + 2) + 1, 1, v11);
    v30 = *((_QWORD *)v11 + 2);
    v29 = *((_QWORD *)v11 + 3);
    v12 = v30 + 1;
    v10 = v99;
    if (v30 >= v29 >> 1)
    {
      v79 = sub_1BCA317E4((char *)(v29 > 1), v30 + 1, 1, v11);
      v10 = v99;
      v11 = v79;
    }
    *((_QWORD *)v11 + 2) = v12;
    v31 = v11 + 32;
    v32 = &v11[16 * v30 + 32];
    *(_QWORD *)v32 = v13;
    *((_QWORD *)v32 + 1) = v9;
    if (v30)
    {
      while (1)
      {
        v33 = v12 - 1;
        if (v12 >= 4)
        {
          v38 = &v31[16 * v12];
          v39 = *((_QWORD *)v38 - 8);
          v40 = *((_QWORD *)v38 - 7);
          v44 = __OFSUB__(v40, v39);
          v41 = v40 - v39;
          if (v44)
            goto LABEL_119;
          v43 = *((_QWORD *)v38 - 6);
          v42 = *((_QWORD *)v38 - 5);
          v44 = __OFSUB__(v42, v43);
          v36 = v42 - v43;
          v37 = v44;
          if (v44)
            goto LABEL_120;
          v45 = v12 - 2;
          v46 = &v31[16 * v12 - 32];
          v48 = *(_QWORD *)v46;
          v47 = *((_QWORD *)v46 + 1);
          v44 = __OFSUB__(v47, v48);
          v49 = v47 - v48;
          if (v44)
            goto LABEL_122;
          v44 = __OFADD__(v36, v49);
          v50 = v36 + v49;
          if (v44)
            goto LABEL_125;
          if (v50 >= v41)
          {
            v68 = &v31[16 * v33];
            v70 = *(_QWORD *)v68;
            v69 = *((_QWORD *)v68 + 1);
            v44 = __OFSUB__(v69, v70);
            v71 = v69 - v70;
            if (v44)
              goto LABEL_129;
            v61 = v36 < v71;
            goto LABEL_83;
          }
        }
        else
        {
          if (v12 != 3)
          {
            v62 = *((_QWORD *)v11 + 4);
            v63 = *((_QWORD *)v11 + 5);
            v44 = __OFSUB__(v63, v62);
            v55 = v63 - v62;
            v56 = v44;
            goto LABEL_77;
          }
          v35 = *((_QWORD *)v11 + 4);
          v34 = *((_QWORD *)v11 + 5);
          v44 = __OFSUB__(v34, v35);
          v36 = v34 - v35;
          v37 = v44;
        }
        if ((v37 & 1) != 0)
          goto LABEL_121;
        v45 = v12 - 2;
        v51 = &v31[16 * v12 - 32];
        v53 = *(_QWORD *)v51;
        v52 = *((_QWORD *)v51 + 1);
        v54 = __OFSUB__(v52, v53);
        v55 = v52 - v53;
        v56 = v54;
        if (v54)
          goto LABEL_124;
        v57 = &v31[16 * v33];
        v59 = *(_QWORD *)v57;
        v58 = *((_QWORD *)v57 + 1);
        v44 = __OFSUB__(v58, v59);
        v60 = v58 - v59;
        if (v44)
          goto LABEL_127;
        if (__OFADD__(v55, v60))
          goto LABEL_128;
        if (v55 + v60 >= v36)
        {
          v61 = v36 < v60;
LABEL_83:
          if (v61)
            v33 = v45;
          goto LABEL_85;
        }
LABEL_77:
        if ((v56 & 1) != 0)
          goto LABEL_123;
        v64 = &v31[16 * v33];
        v66 = *(_QWORD *)v64;
        v65 = *((_QWORD *)v64 + 1);
        v44 = __OFSUB__(v65, v66);
        v67 = v65 - v66;
        if (v44)
          goto LABEL_126;
        if (v67 < v55)
          goto LABEL_15;
LABEL_85:
        v72 = v33 - 1;
        if (v33 - 1 >= v12)
        {
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
          goto LABEL_139;
        }
        if (!v10)
          goto LABEL_142;
        v73 = &v31[16 * v72];
        v74 = *(_QWORD *)v73;
        v75 = v31;
        v76 = &v31[16 * v33];
        v77 = *((_QWORD *)v76 + 1);
        sub_1BC9D7C30((double *)(v10 + 8 * *(_QWORD *)v73), (double *)(v10 + 8 * *(_QWORD *)v76), v10 + 8 * v77, __dst);
        if (v1)
          goto LABEL_113;
        if (v77 < v74)
          goto LABEL_116;
        if (v33 > *((_QWORD *)v11 + 2))
          goto LABEL_117;
        *(_QWORD *)v73 = v74;
        *(_QWORD *)&v75[16 * v72 + 8] = v77;
        v78 = *((_QWORD *)v11 + 2);
        if (v33 >= v78)
          goto LABEL_118;
        v12 = v78 - 1;
        memmove(v76, v76 + 16, 16 * (v78 - 1 - v33));
        v31 = v75;
        *((_QWORD *)v11 + 2) = v78 - 1;
        v10 = v99;
        if (v78 <= 2)
          goto LABEL_15;
      }
    }
    v12 = 1;
LABEL_15:
    v3 = v98;
    if (v9 >= v98)
    {
      v8 = v96;
      v2 = v94;
      goto LABEL_102;
    }
  }
LABEL_139:
  __break(1u);
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  result = sub_1BCAB65B8();
  __break(1u);
  return result;
}

uint64_t sub_1BC9D7C30(double *__src, double *a2, unint64_t a3, double *__dst)
{
  double *v4;
  double *v6;
  double *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double *v14;
  double *v15;
  double *v16;
  double *v17;
  double *v18;
  double *v19;
  double v20;
  uint64_t result;
  double *v22;
  double *v23;
  double *v24;

  v4 = __dst;
  v6 = a2;
  v7 = __src;
  v8 = (char *)a2 - (char *)__src;
  v9 = (char *)a2 - (char *)__src + 7;
  if ((char *)a2 - (char *)__src >= 0)
    v9 = (char *)a2 - (char *)__src;
  v10 = v9 >> 3;
  v11 = a3 - (_QWORD)a2;
  v12 = a3 - (_QWORD)a2 + 7;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v12 = a3 - (_QWORD)a2;
  v13 = v12 >> 3;
  v24 = __src;
  v23 = __dst;
  if (v10 >= v12 >> 3)
  {
    if (v11 >= -7)
    {
      if (__dst != a2 || &a2[v13] <= __dst)
        memmove(__dst, a2, 8 * v13);
      v16 = &v4[v13];
      v22 = v16;
      v24 = v6;
      if (v7 < v6 && v11 >= 8)
      {
        v17 = (double *)(a3 - 8);
        while (1)
        {
          v18 = v17 + 1;
          v19 = v6 - 1;
          v20 = *(v6 - 1);
          if (*(v16 - 1) >= v20)
          {
            v22 = v16 - 1;
            if (v18 < v16 || v17 >= v16 || v18 != v16)
              *v17 = *(v16 - 1);
            --v16;
            if (v6 <= v7)
              goto LABEL_42;
          }
          else
          {
            if (v18 != v6 || v17 >= v6)
              *v17 = v20;
            v24 = --v6;
            if (v19 <= v7)
              goto LABEL_42;
          }
          --v17;
          if (v16 <= v4)
            goto LABEL_42;
        }
      }
      goto LABEL_42;
    }
  }
  else if (v8 >= -7)
  {
    if (__dst != __src || &__src[v10] <= __dst)
      memmove(__dst, __src, 8 * v10);
    v14 = &v4[v10];
    v22 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 8)
    {
      do
      {
        if (*v6 >= *v4)
        {
          if (v7 != v4)
            *v7 = *v4;
          v23 = ++v4;
          v15 = v6;
        }
        else
        {
          v15 = v6 + 1;
          if (v7 < v6 || v7 >= v15 || v7 != v6)
            *v7 = *v6;
        }
        ++v7;
        if (v4 >= v14)
          break;
        v6 = v15;
      }
      while ((unint64_t)v15 < a3);
      v24 = v7;
    }
LABEL_42:
    sub_1BCA31A5C((void **)&v24, (const void **)&v23, &v22);
    return 1;
  }
  result = sub_1BCAB6624();
  __break(1u);
  return result;
}

uint64_t sub_1BC9D7E9C(unint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  id v5;
  void *v6;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  double v15;
  unint64_t v16;
  double v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t i;
  uint64_t v23;
  double v24;
  uint64_t v25;
  uint64_t result;
  _QWORD *v27;

  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v2 = sub_1BCAB65DC();
    if (v2)
      goto LABEL_3;
LABEL_17:
    v4 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    goto LABEL_18;
  }
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v2)
    goto LABEL_17;
LABEL_3:
  if (v2 < 1)
  {
LABEL_52:
    __break(1u);
LABEL_53:
    __break(1u);
    goto LABEL_54;
  }
  v3 = 0;
  v4 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  do
  {
    if ((a1 & 0xC000000000000001) != 0)
      v5 = (id)MEMORY[0x1BCCFB0D4](v3, a1);
    else
      v5 = *(id *)(a1 + 8 * v3 + 32);
    v6 = v5;
    v7 = objc_msgSend(v5, sel_burdenPercentage);
    if (v7)
    {
      v8 = v7;
      objc_msgSend(v7, sel_doubleValue);
      v10 = v9;

      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v4 = sub_1BC9DA35C(0, v4[2] + 1, 1, v4);
      v12 = v4[2];
      v11 = v4[3];
      if (v12 >= v11 >> 1)
        v4 = sub_1BC9DA35C((_QWORD *)(v11 > 1), v12 + 1, 1, v4);
      v4[2] = v12 + 1;
      v4[v12 + 4] = v10;
    }
    else
    {

    }
    ++v3;
  }
  while (v2 != v3);
LABEL_18:
  swift_bridgeObjectRelease();
  if (!v4[2])
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  v27 = v4;
  swift_bridgeObjectRetain();
  sub_1BC9D7538((uint64_t *)&v27);
  swift_bridgeObjectRelease();
  v13 = (uint64_t)v27;
  v14 = v27[2];
  if ((v14 & 1) != 0)
  {
    v16 = (v14 - 1) >> 1;
    if (v16 >= v14)
    {
LABEL_60:
      __break(1u);
      goto LABEL_61;
    }
    v15 = *(double *)&v27[v16 + 4];
  }
  else
  {
    if (v14 >> 1 >= v14)
    {
LABEL_59:
      __break(1u);
      goto LABEL_60;
    }
    if (v14 < 2)
    {
LABEL_61:
      __break(1u);
      goto LABEL_62;
    }
    v15 = (*(double *)&v27[(v14 >> 1) + 4] + *(double *)&v27[(v14 >> 1) + 3]) * 0.5;
  }
  v17 = round(v15 * 1000.0);
  if ((~*(_QWORD *)&v17 & 0x7FF0000000000000) == 0)
    goto LABEL_53;
  if (v17 <= -9.22337204e18)
  {
LABEL_54:
    __break(1u);
    goto LABEL_55;
  }
  if (v17 >= 9.22337204e18)
  {
LABEL_55:
    __break(1u);
    goto LABEL_56;
  }
  v18 = round(*(double *)&v27[v14 + 3] * 1000.0);
  if ((~*(_QWORD *)&v18 & 0x7FF0000000000000) == 0)
  {
LABEL_56:
    __break(1u);
    goto LABEL_57;
  }
  if (v18 <= -9.22337204e18)
  {
LABEL_57:
    __break(1u);
    goto LABEL_58;
  }
  if (v18 >= 9.22337204e18)
  {
LABEL_58:
    __break(1u);
    goto LABEL_59;
  }
  v19 = (uint64_t)v17;
  v20 = (uint64_t)v18;
  if ((uint64_t)v18 >= 151)
  {
    v21 = __OFADD__(v19, 125);
    v19 += 125;
    if (!v21)
    {
LABEL_37:
      for (i = 0; ; ++i)
      {
        v23 = i + 1;
        if (__OFADD__(i, 1))
        {
          __break(1u);
LABEL_49:
          __break(1u);
LABEL_50:
          __break(1u);
LABEL_51:
          __break(1u);
          goto LABEL_52;
        }
        v24 = round(*(double *)(v13 + 8 * i + 32) * 1000.0);
        if ((~*(_QWORD *)&v24 & 0x7FF0000000000000) == 0)
          goto LABEL_49;
        if (v24 <= -9.22337204e18)
          goto LABEL_50;
        if (v24 >= 9.22337204e18)
          goto LABEL_51;
        v25 = (uint64_t)v24;
        if (v19 <= (uint64_t)v24)
          break;
        if (v23 == v14)
        {
          swift_release();
          return 0;
        }
      }
      swift_release();
      if (v20 < v25)
        goto LABEL_63;
      return v25;
    }
    __break(1u);
  }
  v21 = __OFADD__(v19, 50);
  v19 += 50;
  if (!v21)
    goto LABEL_37;
LABEL_62:
  __break(1u);
LABEL_63:
  __break(1u);
  result = swift_release();
  __break(1u);
  return result;
}

void sub_1BC9D8254(uint64_t a1, unint64_t *a2)
{
  unint64_t v3;
  uint64_t v4;

  if (!*a2)
  {
    v3 = sub_1BCAB67A4();
    if (!v4)
      atomic_store(v3, a2);
  }
}

void sub_1BC9D8298(void *a1, uint64_t a2, uint64_t a3, char a4)
{
  id v4;
  void *v5;
  double v6;
  double v7;
  double v8;

  if ((a4 & 1) == 0)
  {
    v4 = objc_msgSend(a1, sel_burdenPercentage);
    if (v4)
    {
      v5 = v4;
      objc_msgSend(v4, sel_doubleValue);
      v7 = v6;

      v8 = round(v7 * 1000.0);
      if ((~*(_QWORD *)&v8 & 0x7FF0000000000000) != 0)
      {
        if (v8 > -9.22337204e18)
        {
          if (v8 < 9.22337204e18)
            return;
LABEL_10:
          __break(1u);
          return;
        }
      }
      else
      {
        __break(1u);
      }
      __break(1u);
      goto LABEL_10;
    }
  }
}

ValueMetadata *type metadata accessor for AFibBurdenDistributionAnalysis()
{
  return &type metadata for AFibBurdenDistributionAnalysis;
}

ValueMetadata *type metadata accessor for AFibBurdenDistributionAnalysis.Constants()
{
  return &type metadata for AFibBurdenDistributionAnalysis.Constants;
}

uint64_t *initializeBufferWithCopyOfBuffer for AFibBurdenDistributionAnalysis.Result(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  unsigned int (*v9)(uint64_t *, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  void (*v17)(uint64_t *, _QWORD, uint64_t, uint64_t);
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  void (*v27)(char *, _QWORD, uint64_t, uint64_t);

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for TimeBasedDistribution();
    v8 = *(_QWORD *)(v7 - 8);
    v9 = *(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48);
    if (v9(a2, 1, v7))
    {
      sub_1BC9D61B0();
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
    }
    else
    {
      v12 = sub_1BCAB4F68();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(a1, a2, v12);
      *(uint64_t *)((char *)a1 + *(int *)(v7 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(v7 + 20));
      v13 = *(int *)(v7 + 24);
      v14 = (uint64_t *)((char *)a1 + v13);
      v15 = (uint64_t *)((char *)a2 + v13);
      v16 = v15[1];
      *v14 = *v15;
      v14[1] = v16;
      v17 = *(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v17(a1, 0, 1, v7);
    }
    v18 = *(int *)(a3 + 20);
    v19 = (char *)a1 + v18;
    v20 = (char *)a2 + v18;
    if (v9((uint64_t *)v20, 1, v7))
    {
      sub_1BC9D61B0();
      memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    }
    else
    {
      v22 = sub_1BCAB4F68();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v19, v20, v22);
      *(_QWORD *)&v19[*(int *)(v7 + 20)] = *(_QWORD *)&v20[*(int *)(v7 + 20)];
      v23 = *(int *)(v7 + 24);
      v24 = &v19[v23];
      v25 = &v20[v23];
      v26 = *((_QWORD *)v25 + 1);
      *(_QWORD *)v24 = *(_QWORD *)v25;
      *((_QWORD *)v24 + 1) = v26;
      v27 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v27(v19, 0, 1, v7);
    }
  }
  return a1;
}

uint64_t destroy for AFibBurdenDistributionAnalysis.Result(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int (*v5)(uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;

  v4 = type metadata accessor for TimeBasedDistribution();
  v5 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48);
  if (!v5(a1, 1, v4))
  {
    v6 = sub_1BCAB4F68();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1, v6);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v7 = a1 + *(int *)(a2 + 20);
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v5)(v7, 1, v4);
  if (!(_DWORD)result)
  {
    v9 = sub_1BCAB4F68();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v7, v9);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

char *initializeWithCopy for AFibBurdenDistributionAnalysis.Result(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int (*v8)(char *, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  void (*v15)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  void (*v25)(char *, _QWORD, uint64_t, uint64_t);

  v6 = type metadata accessor for TimeBasedDistribution();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  if (v8(a2, 1, v6))
  {
    sub_1BC9D61B0();
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  else
  {
    v10 = sub_1BCAB4F68();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(a1, a2, v10);
    *(_QWORD *)&a1[*(int *)(v6 + 20)] = *(_QWORD *)&a2[*(int *)(v6 + 20)];
    v11 = *(int *)(v6 + 24);
    v12 = &a1[v11];
    v13 = &a2[v11];
    v14 = *((_QWORD *)v13 + 1);
    *(_QWORD *)v12 = *(_QWORD *)v13;
    *((_QWORD *)v12 + 1) = v14;
    v15 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v15(a1, 0, 1, v6);
  }
  v16 = *(int *)(a3 + 20);
  v17 = &a1[v16];
  v18 = &a2[v16];
  if (v8(v18, 1, v6))
  {
    sub_1BC9D61B0();
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  }
  else
  {
    v20 = sub_1BCAB4F68();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v17, v18, v20);
    *(_QWORD *)&v17[*(int *)(v6 + 20)] = *(_QWORD *)&v18[*(int *)(v6 + 20)];
    v21 = *(int *)(v6 + 24);
    v22 = &v17[v21];
    v23 = &v18[v21];
    v24 = *((_QWORD *)v23 + 1);
    *(_QWORD *)v22 = *(_QWORD *)v23;
    *((_QWORD *)v22 + 1) = v24;
    v25 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v25(v17, 0, 1, v6);
  }
  return a1;
}

char *assignWithCopy for AFibBurdenDistributionAnalysis.Result(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  void (*v15)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  void (*v26)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;

  v6 = type metadata accessor for TimeBasedDistribution();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      v11 = sub_1BCAB4F68();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a1, a2, v11);
      *(_QWORD *)&a1[*(int *)(v6 + 20)] = *(_QWORD *)&a2[*(int *)(v6 + 20)];
      v12 = *(int *)(v6 + 24);
      v13 = &a1[v12];
      v14 = &a2[v12];
      *(_QWORD *)v13 = *(_QWORD *)v14;
      *((_QWORD *)v13 + 1) = *((_QWORD *)v14 + 1);
      v15 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v15(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    sub_1BC9D8A7C((uint64_t)a1);
LABEL_6:
    sub_1BC9D61B0();
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    goto LABEL_7;
  }
  v29 = sub_1BCAB4F68();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v29 - 8) + 24))(a1, a2, v29);
  *(_QWORD *)&a1[*(int *)(v6 + 20)] = *(_QWORD *)&a2[*(int *)(v6 + 20)];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v30 = *(int *)(v6 + 24);
  v31 = &a1[v30];
  v32 = &a2[v30];
  *(_QWORD *)v31 = *(_QWORD *)v32;
  *((_QWORD *)v31 + 1) = *((_QWORD *)v32 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_7:
  v17 = *(int *)(a3 + 20);
  v18 = &a1[v17];
  v19 = &a2[v17];
  v20 = v8(&a1[v17], 1, v6);
  v21 = v8(v19, 1, v6);
  if (!v20)
  {
    if (!v21)
    {
      v33 = sub_1BCAB4F68();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v33 - 8) + 24))(v18, v19, v33);
      *(_QWORD *)&v18[*(int *)(v6 + 20)] = *(_QWORD *)&v19[*(int *)(v6 + 20)];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v34 = *(int *)(v6 + 24);
      v35 = &v18[v34];
      v36 = &v19[v34];
      *(_QWORD *)v35 = *(_QWORD *)v36;
      *((_QWORD *)v35 + 1) = *((_QWORD *)v36 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      return a1;
    }
    sub_1BC9D8A7C((uint64_t)v18);
    goto LABEL_12;
  }
  if (v21)
  {
LABEL_12:
    sub_1BC9D61B0();
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    return a1;
  }
  v22 = sub_1BCAB4F68();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v18, v19, v22);
  *(_QWORD *)&v18[*(int *)(v6 + 20)] = *(_QWORD *)&v19[*(int *)(v6 + 20)];
  v23 = *(int *)(v6 + 24);
  v24 = &v18[v23];
  v25 = &v19[v23];
  *(_QWORD *)v24 = *(_QWORD *)v25;
  *((_QWORD *)v24 + 1) = *((_QWORD *)v25 + 1);
  v26 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v26(v18, 0, 1, v6);
  return a1;
}

uint64_t sub_1BC9D8A7C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for TimeBasedDistribution();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

char *initializeWithTake for AFibBurdenDistributionAnalysis.Result(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int (*v8)(char *, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;

  v6 = type metadata accessor for TimeBasedDistribution();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  if (v8(a2, 1, v6))
  {
    sub_1BC9D61B0();
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  else
  {
    v10 = sub_1BCAB4F68();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(a1, a2, v10);
    *(_QWORD *)&a1[*(int *)(v6 + 20)] = *(_QWORD *)&a2[*(int *)(v6 + 20)];
    *(_OWORD *)&a1[*(int *)(v6 + 24)] = *(_OWORD *)&a2[*(int *)(v6 + 24)];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v11 = *(int *)(a3 + 20);
  v12 = &a1[v11];
  v13 = &a2[v11];
  if (v8(v13, 1, v6))
  {
    sub_1BC9D61B0();
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    v15 = sub_1BCAB4F68();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v12, v13, v15);
    *(_QWORD *)&v12[*(int *)(v6 + 20)] = *(_QWORD *)&v13[*(int *)(v6 + 20)];
    *(_OWORD *)&v12[*(int *)(v6 + 24)] = *(_OWORD *)&v13[*(int *)(v6 + 24)];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v12, 0, 1, v6);
  }
  return a1;
}

char *assignWithTake for AFibBurdenDistributionAnalysis.Result(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;

  v6 = type metadata accessor for TimeBasedDistribution();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      v11 = sub_1BCAB4F68();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(a1, a2, v11);
      *(_QWORD *)&a1[*(int *)(v6 + 20)] = *(_QWORD *)&a2[*(int *)(v6 + 20)];
      *(_OWORD *)&a1[*(int *)(v6 + 24)] = *(_OWORD *)&a2[*(int *)(v6 + 24)];
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    sub_1BC9D8A7C((uint64_t)a1);
LABEL_6:
    sub_1BC9D61B0();
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    goto LABEL_7;
  }
  v21 = sub_1BCAB4F68();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 40))(a1, a2, v21);
  *(_QWORD *)&a1[*(int *)(v6 + 20)] = *(_QWORD *)&a2[*(int *)(v6 + 20)];
  swift_bridgeObjectRelease();
  v22 = *(int *)(v6 + 24);
  v23 = &a1[v22];
  v24 = &a2[v22];
  v26 = *(_QWORD *)v24;
  v25 = *((_QWORD *)v24 + 1);
  *(_QWORD *)v23 = v26;
  *((_QWORD *)v23 + 1) = v25;
  swift_bridgeObjectRelease();
LABEL_7:
  v13 = *(int *)(a3 + 20);
  v14 = &a1[v13];
  v15 = &a2[v13];
  v16 = v8(&a1[v13], 1, v6);
  v17 = v8(v15, 1, v6);
  if (!v16)
  {
    if (!v17)
    {
      v27 = sub_1BCAB4F68();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 40))(v14, v15, v27);
      *(_QWORD *)&v14[*(int *)(v6 + 20)] = *(_QWORD *)&v15[*(int *)(v6 + 20)];
      swift_bridgeObjectRelease();
      v28 = *(int *)(v6 + 24);
      v29 = &v14[v28];
      v30 = &v15[v28];
      v32 = *(_QWORD *)v30;
      v31 = *((_QWORD *)v30 + 1);
      *(_QWORD *)v29 = v32;
      *((_QWORD *)v29 + 1) = v31;
      swift_bridgeObjectRelease();
      return a1;
    }
    sub_1BC9D8A7C((uint64_t)v14);
    goto LABEL_12;
  }
  if (v17)
  {
LABEL_12:
    sub_1BC9D61B0();
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    return a1;
  }
  v18 = sub_1BCAB4F68();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v14, v15, v18);
  *(_QWORD *)&v14[*(int *)(v6 + 20)] = *(_QWORD *)&v15[*(int *)(v6 + 20)];
  *(_OWORD *)&v14[*(int *)(v6 + 24)] = *(_OWORD *)&v15[*(int *)(v6 + 24)];
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v14, 0, 1, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for AFibBurdenDistributionAnalysis.Result()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BC9D8E7C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1BC9D61B0();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for AFibBurdenDistributionAnalysis.Result()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BC9D8EC4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1BC9D61B0();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

void sub_1BC9D8F04()
{
  unint64_t v0;

  sub_1BC9D61B0();
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

uint64_t static HKNumericAxis.ticksAndLabels(modelCoordinateRange:maximumLabelCount:dimension:)(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  id v7;
  void *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  _QWORD *v13;
  __objc2_prop_list **p_base_props;
  id v15;
  void *v16;
  id v17;
  id v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  void *v29;
  void *v30;

  v4 = (void *)sub_1BCAB4FC8();
  v5 = (void *)sub_1BCAB4FC8();
  v6 = objc_msgSend((id)objc_opt_self(), sel_valueRangeWithMinValue_maxValue_, v4, v5);

  v7 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_ticksAndLabelsForRangeInModelCoordinates_maximumLabelCount_endingOptions_dimension_, v6, a1, 0, a2);
  if (!v7)
  {

    return 0;
  }
  v8 = v7;
  sub_1BC9A649C(0, &qword_1EF478870);
  v9 = sub_1BCAB6018();

  if (!(v9 >> 62))
  {
    v10 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v10)
      goto LABEL_4;
LABEL_23:

    swift_bridgeObjectRelease();
    v13 = (_QWORD *)MEMORY[0x1E0DEE9D8];
LABEL_24:
    swift_bridgeObjectRelease();
    return (uint64_t)v13;
  }
  swift_bridgeObjectRetain();
  result = sub_1BCAB65DC();
  v10 = result;
  if (!result)
    goto LABEL_23;
LABEL_4:
  if (v10 >= 1)
  {
    v29 = v6;
    v12 = 0;
    v13 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    p_base_props = &DatabaseChangesProducer.base_props;
    do
    {
      if ((v9 & 0xC000000000000001) != 0)
        v15 = (id)MEMORY[0x1BCCFB0D4](v12, v9);
      else
        v15 = *(id *)(v9 + 8 * v12 + 32);
      v16 = v15;
      v17 = objc_msgSend(v15, (SEL)p_base_props[400]);
      sub_1BCAB63CC();
      swift_unknownObjectRelease();
      sub_1BC9A649C(0, (unint64_t *)&qword_1ED6C6EB8);
      if (swift_dynamicCast())
      {
        v18 = objc_msgSend(v16, sel_text);
        if (v18)
        {
          v19 = v18;
          v20 = sub_1BCAB5F04();
          v22 = v21;

        }
        else
        {
          v20 = 0;
          v22 = 0;
        }
        objc_msgSend(v30, sel_doubleValue);
        v24 = v23;
        v25 = objc_msgSend(v16, sel_labelType);

        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v13 = sub_1BC9D9B7C(0, v13[2] + 1, 1, v13);
        v27 = v13[2];
        v26 = v13[3];
        if (v27 >= v26 >> 1)
          v13 = sub_1BC9D9B7C((_QWORD *)(v26 > 1), v27 + 1, 1, v13);
        v13[2] = v27 + 1;
        v28 = &v13[5 * v27];
        v28[4] = v20;
        v28[5] = v22;
        v28[6] = v24;
        v28[7] = v25;
        *((_DWORD *)v28 + 16) = 1144750080;
        p_base_props = (__objc2_prop_list **)(&DatabaseChangesProducer + 64);
      }
      else
      {

      }
      ++v12;
    }
    while (v10 != v12);

    swift_bridgeObjectRelease();
    goto LABEL_24;
  }
  __break(1u);
  return result;
}

uint64_t static DiagramAxisMetricsCalculator.Constants.maximumLabelCount.getter()
{
  return 3;
}

uint64_t sub_1BC9D92D4(uint64_t a1, uint64_t a2)
{
  sub_1BC9A649C(0, &qword_1EF478948);
  return static HKNumericAxis.ticksAndLabels(modelCoordinateRange:maximumLabelCount:dimension:)(a1, a2);
}

_QWORD *DiagramAxisMetricsCalculator.__allocating_init(axisLabelDimension:maximumLabelCount:calculator:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  swift_getObjectType();
  return sub_1BC9DABF8(a1, a2, a3, a4);
}

_QWORD *DiagramAxisMetricsCalculator.init(axisLabelDimension:maximumLabelCount:calculator:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;

  swift_getObjectType();
  return sub_1BC9DAC40(a1, a2, a3, a4, v4);
}

uint64_t sub_1BC9D93E0@<X0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t result;
  uint64_t v12;
  double v13;
  double v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;

  v7 = sub_1BCAB5514();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = (*(uint64_t (**)(_QWORD, _QWORD, double, double))(v3 + 32))(*(_QWORD *)(v3 + 24), *(_QWORD *)(v3 + 16), a2, a3);
  if (result)
  {
    v12 = *(_QWORD *)(result + 16);
    if (v12)
    {
      v13 = *(double *)(result + 48);
      v14 = *(double *)(result + 40 * v12 + 8);
      if (v13 > v14)
      {
        __break(1u);
      }
      else
      {
        *(_QWORD *)a1 = result;
        *(double *)(a1 + 8) = v13;
        *(double *)(a1 + 16) = v14;
      }
      return result;
    }
    swift_bridgeObjectRelease();
  }
  sub_1BCAB54D8();
  v15 = sub_1BCAB54FC();
  v16 = sub_1BCAB61A4();
  if (os_log_type_enabled(v15, v16))
  {
    v17 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v17 = 0;
    _os_log_impl(&dword_1BC989000, v15, v16, "Unable to determine labels from given range", v17, 2u);
    MEMORY[0x1BCCFBF5C](v17, -1, -1);
  }

  result = (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  return result;
}

uint64_t DiagramAxisMetricsCalculator.deinit()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  swift_release();
  return v0;
}

uint64_t DiagramAxisMetricsCalculator.__deallocating_deinit()
{
  swift_unknownObjectRelease();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t sub_1BC9D9590@<X0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>)
{
  return sub_1BC9D93E0(a1, a2, a3);
}

_QWORD *sub_1BC9D95B0(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      sub_1BC998AB0(0, &qword_1EF478968, (uint64_t (*)(uint64_t))sub_1BC9DBFA8, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 48);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[6 * v8 + 4])
          memmove(v12, a4 + 4, 48 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v12 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_1BC9DACA0(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1BC9D96E8(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      sub_1BC998AB0(0, &qword_1ED6C5B78, (uint64_t (*)(uint64_t))type metadata accessor for CGRect, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 1;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4])
          memmove(v13, a4 + 4, 32 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1BC9DADA8(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1BC9D9808(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      sub_1BC998AB0(0, &qword_1ED6C71D8, (uint64_t (*)(uint64_t))type metadata accessor for CGPoint, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1BC9DAEB4(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1BC9D9928(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      sub_1BC9A1210(0, &qword_1ED6C2C78, (uint64_t)&type metadata for DiagramDataGroup, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[5 * v8 + 4])
          memmove(v12, a4 + 4, 40 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v12 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_1BC9DAF9C(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1BC9D9A5C(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      sub_1BC998AB0(0, &qword_1EF478938, (uint64_t (*)(uint64_t))sub_1BC9DBF40, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 1;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4])
          memmove(v13, a4 + 4, 32 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1BC9DB090(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1BC9D9B7C(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      sub_1BC9A1210(0, (unint64_t *)&qword_1ED6C5B68, (uint64_t)&type metadata for DiagramAxisLabel, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[5 * v8 + 4])
          memmove(v12, a4 + 4, 40 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v12 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_1BC9DB194(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1BC9D9CAC(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      sub_1BC998AB0(0, &qword_1EF478960, (uint64_t (*)(uint64_t))sub_1BC9AE21C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 224);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[28 * v8 + 4])
          memmove(v12, a4 + 4, 224 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v12 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_1BC9DB288(0, v8, (char *)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

char *sub_1BC9D9DE4(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = *((_QWORD *)a4 + 3);
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = *((_QWORD *)a4 + 2);
    if (v7 <= v8)
      v9 = *((_QWORD *)a4 + 2);
    else
      v9 = v7;
    if (v9)
    {
      sub_1BC9A1210(0, &qword_1ED6C6F50, (uint64_t)&type metadata for StatisticsOption, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
      v10 = (char *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      *((_QWORD *)v10 + 2) = v8;
      *((_QWORD *)v10 + 3) = 2 * v11 - 64;
      v12 = v10 + 32;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[v8 + 32])
          memmove(v12, a4 + 32, v8);
        *((_QWORD *)a4 + 2) = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (char *)MEMORY[0x1E0DEE9D8];
      v12 = (char *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_1BC9DB374(0, v8, v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_1BC9D9EF0(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1BC9D9F18(a1, a2, a3, a4, &qword_1EF478958, type metadata accessor for TimeBasedDistributionChartPoint.TimeOfDay);
}

uint64_t sub_1BC9D9F04(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1BC9D9F18(a1, a2, a3, a4, &qword_1EF478950, type metadata accessor for TimeBasedDistributionChartPoint.DayOfWeek);
}

uint64_t sub_1BC9D9F18(char a1, int64_t a2, char a3, unint64_t a4, unint64_t *a5, uint64_t (*a6)(uint64_t))
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  size_t v17;
  BOOL v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = *(_QWORD *)(a4 + 24);
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = *(_QWORD *)(a4 + 16);
  if (v10 <= v11)
    v12 = *(_QWORD *)(a4 + 16);
  else
    v12 = v10;
  if (!v12)
  {
    v16 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    goto LABEL_19;
  }
  sub_1BC998AB0(0, a5, a6, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  v13 = *(_QWORD *)(a6(0) - 8);
  v14 = *(_QWORD *)(v13 + 72);
  v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v16 = (_QWORD *)swift_allocObject();
  v17 = _swift_stdlib_malloc_size(v16);
  if (!v14 || (v17 - v15 == 0x8000000000000000 ? (v18 = v14 == -1) : (v18 = 0), v18))
  {
LABEL_29:
    result = sub_1BCAB65B8();
    __break(1u);
    return result;
  }
  v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  v19 = *(_QWORD *)(a6(0) - 8);
  v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  v21 = (unint64_t)v16 + v20;
  if ((a1 & 1) != 0)
  {
    if ((unint64_t)v16 < a4 || v21 >= a4 + v20 + *(_QWORD *)(v19 + 72) * v11)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != (_QWORD *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_1BC9DBB60(0, v11, v21, a4, a6);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v16;
}

_QWORD *sub_1BC9DA134(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      sub_1BC9A1210(0, &qword_1ED6C61B8, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1BC9DB458(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1BC9DA254(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      sub_1BC9C65BC();
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1BC9DB548(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1BC9DA35C(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      sub_1BC9A1210(0, &qword_1ED6C5FA8, MEMORY[0x1E0DEB070], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 25;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4])
          memmove(v13, a4 + 4, 8 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1BC9DB664(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1BC9DA47C(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      sub_1BC9A1210(0, &qword_1EF478930, (uint64_t)&type metadata for DiagramPointAnnotations, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4])
          memmove(v12, a4 + 4, 24 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v12 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_1BC9DB74C(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1BC9DA5B4(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      sub_1BC998AB0(0, &qword_1ED6C6F58, (uint64_t (*)(uint64_t))sub_1BC9BD354, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 25;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4])
          memmove(v13, a4 + 4, 8 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1BC9DB840(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1BC9DA6D4(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      sub_1BC998AB0(0, (unint64_t *)&qword_1EF4783F8, (uint64_t (*)(uint64_t))sub_1BC9C23D4, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[5 * v8 + 4])
          memmove(v12, a4 + 4, 40 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v12 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_1BC9DB944(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_1BC9DA808(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1BC9DA9C4(a1, a2, a3, a4, sub_1BC9DBF2C, (uint64_t)&qword_1ED6C6F78, (uint64_t)MEMORY[0x1E0D2D8C8], (uint64_t (*)(_QWORD, uint64_t, uint64_t))sub_1BC9DBEC4);
}

_QWORD *sub_1BC9DA82C(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      sub_1BC9BD290(0, &qword_1ED6C6F68, (uint64_t)&qword_1ED6C6F90, (uint64_t)sub_1BC9DBE48, (void (*)(uint64_t, uint64_t, uint64_t))sub_1BC9DBEC4);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 1;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4])
          memmove(v13, a4 + 4, 32 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1BC9DBA4C(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_1BC9DA954(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1BC9D9F18(a1, a2, a3, a4, &qword_1ED6C47B8, type metadata accessor for SignificantChange.Period);
}

uint64_t sub_1BC9DA968(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1BC9D9F18(a1, a2, a3, a4, &qword_1ED6C31A8, (uint64_t (*)(uint64_t))sub_1BC9BD26C);
}

uint64_t sub_1BC9DA97C(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1BC9DA9C4(a1, a2, a3, a4, sub_1BC9DBD98, (uint64_t)&qword_1ED6C3628, (uint64_t)sub_1BC9DBE2C, (uint64_t (*)(_QWORD, uint64_t, uint64_t))sub_1BC9DBDBC);
}

uint64_t sub_1BC9DA9A0(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1BC9DA9C4(a1, a2, a3, a4, sub_1BC9DAE90, (uint64_t)&unk_1ED6C3630, (uint64_t)type metadata accessor for SignificantChangeEngine.Changepoint, (uint64_t (*)(_QWORD, uint64_t, uint64_t))sub_1BC9DBDBC);
}

uint64_t sub_1BC9DA9C4(char a1, int64_t a2, char a3, unint64_t a4, void (*a5)(_QWORD), uint64_t a6, uint64_t a7, uint64_t (*a8)(_QWORD, uint64_t, uint64_t))
{
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  size_t v21;
  BOOL v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v13 = *(_QWORD *)(a4 + 24);
    v14 = v13 >> 1;
    if ((uint64_t)(v13 >> 1) < a2)
    {
      if (v14 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      v14 = v13 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v13 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v14 = a2;
    }
  }
  else
  {
    v14 = a2;
  }
  v15 = *(_QWORD *)(a4 + 16);
  if (v14 <= v15)
    v16 = *(_QWORD *)(a4 + 16);
  else
    v16 = v14;
  if (!v16)
  {
    v20 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    goto LABEL_19;
  }
  a5(0);
  v17 = *(_QWORD *)(a8(0, a6, a7) - 8);
  v18 = *(_QWORD *)(v17 + 72);
  v19 = (*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
  v20 = (_QWORD *)swift_allocObject();
  v21 = _swift_stdlib_malloc_size(v20);
  if (!v18 || (v21 - v19 == 0x8000000000000000 ? (v22 = v18 == -1) : (v22 = 0), v22))
  {
LABEL_29:
    result = sub_1BCAB65B8();
    __break(1u);
    return result;
  }
  v20[2] = v15;
  v20[3] = 2 * ((uint64_t)(v21 - v19) / v18);
LABEL_19:
  v23 = *(_QWORD *)(a8(0, a6, a7) - 8);
  v24 = (*(unsigned __int8 *)(v23 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80);
  v25 = (unint64_t)v20 + v24;
  if ((a1 & 1) != 0)
  {
    if ((unint64_t)v20 < a4 || v25 >= a4 + v24 + *(_QWORD *)(v23 + 72) * v15)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v20 != (_QWORD *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_1BC9DBC78(0, v15, v25, a4, a6, a7, a8);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v20;
}

_QWORD *sub_1BC9DABF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *result;

  type metadata accessor for DiagramAxisMetricsCalculator();
  result = (_QWORD *)swift_allocObject();
  result[2] = a1;
  result[3] = a2;
  result[4] = a3;
  result[5] = a4;
  return result;
}

_QWORD *sub_1BC9DAC40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  a5[2] = a1;
  a5[3] = a2;
  a5[4] = a3;
  a5[5] = a4;
  return a5;
}

uint64_t type metadata accessor for DiagramAxisMetricsCalculator()
{
  return objc_opt_self();
}

uint64_t method lookup function for DiagramAxisMetricsCalculator()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of DiagramAxisMetricsCalculator.__allocating_init(axisLabelDimension:maximumLabelCount:calculator:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t dispatch thunk of DiagramAxisMetricsCalculator.axisMetrics(for:customLocations:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

ValueMetadata *type metadata accessor for DiagramAxisMetricsCalculator.Constants()
{
  return &type metadata for DiagramAxisMetricsCalculator.Constants;
}

uint64_t sub_1BC9DACA0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 48 * a1 + 32;
    v6 = a3 + 48 * v4;
    if (v5 >= v6 || v5 + 48 * v4 <= a3)
    {
      sub_1BC9DBFA8();
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_1BCAB6624();
  __break(1u);
  return result;
}

char *sub_1BC9DADA8(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 32 * a1 + 32);
    v6 = 32 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)sub_1BCAB6624();
  __break(1u);
  return result;
}

void sub_1BC9DAE90(uint64_t a1)
{
  sub_1BC9BD290(a1, &qword_1ED6C47B0, (uint64_t)&unk_1ED6C3630, (uint64_t)type metadata accessor for SignificantChangeEngine.Changepoint, (void (*)(uint64_t, uint64_t, uint64_t))sub_1BC9DBDBC);
}

char *sub_1BC9DAEB4(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 16 * a1 + 32);
    v6 = 16 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)sub_1BCAB6624();
  __break(1u);
  return result;
}

uint64_t sub_1BC9DAF9C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 40 * a1 + 32;
    v6 = a3 + 40 * v4;
    if (v5 >= v6 || v5 + 40 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_1BCAB6624();
  __break(1u);
  return result;
}

uint64_t sub_1BC9DB090(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 32 * a1 + 32;
    v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      sub_1BC9DBF40();
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_1BCAB6624();
  __break(1u);
  return result;
}

uint64_t sub_1BC9DB194(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 40 * a1 + 32;
    v6 = a3 + 40 * v4;
    if (v5 >= v6 || v5 + 40 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_1BCAB6624();
  __break(1u);
  return result;
}

char *sub_1BC9DB288(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 224 * a1 + 32);
    v6 = 224 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)sub_1BCAB6624();
  __break(1u);
  return result;
}

char *sub_1BC9DB374(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  size_t v4;
  char *v5;
  char *v6;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + a1 + 32);
    v6 = &__dst[v4];
    if (v5 >= &__dst[v4] || &v5[v4] <= __dst)
    {
      memcpy(__dst, v5, v4);
      return v6;
    }
  }
  result = (char *)sub_1BCAB6624();
  __break(1u);
  return result;
}

uint64_t sub_1BC9DB458(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_1BCAB6624();
  __break(1u);
  return result;
}

uint64_t sub_1BC9DB548(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      sub_1BC9A1210(0, (unint64_t *)&qword_1ED6C2C80, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_1BCAB6624();
  __break(1u);
  return result;
}

char *sub_1BC9DB664(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 8 * a1 + 32);
    v6 = 8 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)sub_1BCAB6624();
  __break(1u);
  return result;
}

uint64_t sub_1BC9DB74C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 24 * a1 + 32;
    v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_1BCAB6624();
  __break(1u);
  return result;
}

uint64_t sub_1BC9DB840(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 8 * a1 + 32;
    v6 = a3 + 8 * v4;
    if (v5 >= v6 || v5 + 8 * v4 <= a3)
    {
      sub_1BC9BD354();
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_1BCAB6624();
  __break(1u);
  return result;
}

uint64_t sub_1BC9DB944(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 40 * a1 + 32;
    v6 = a3 + 40 * v4;
    if (v5 >= v6 || v5 + 40 * v4 <= a3)
    {
      sub_1BC9C23D4();
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_1BCAB6624();
  __break(1u);
  return result;
}

uint64_t sub_1BC9DBA4C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 32 * a1 + 32;
    v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      sub_1BC9DBEC4(0, &qword_1ED6C6F90, sub_1BC9DBE48);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_1BCAB6624();
  __break(1u);
  return result;
}

uint64_t sub_1BC9DBB60(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    v9 = *(_QWORD *)(a5(0) - 8);
    v10 = *(unsigned __int8 *)(v9 + 80);
    v11 = *(_QWORD *)(v9 + 72);
    v12 = a4 + ((v10 + 32) & ~v10) + v11 * a1;
    v13 = v11 * v5;
    v14 = a3 + v13;
    v15 = v12 + v13;
    if (v12 >= v14 || v15 <= a3)
    {
      swift_arrayInitWithCopy();
      return v14;
    }
  }
  result = sub_1BCAB6624();
  __break(1u);
  return result;
}

uint64_t sub_1BC9DBC78(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(_QWORD, uint64_t, uint64_t))
{
  uint64_t v7;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t result;

  v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v7 & 0x8000000000000000) == 0)
  {
    v11 = *(_QWORD *)(a7(0, a5, a6) - 8);
    v12 = *(unsigned __int8 *)(v11 + 80);
    v13 = *(_QWORD *)(v11 + 72);
    v14 = a4 + ((v12 + 32) & ~v12) + v13 * a1;
    v15 = v13 * v7;
    v16 = a3 + v15;
    v17 = v14 + v15;
    if (v14 >= v16 || v17 <= a3)
    {
      swift_arrayInitWithCopy();
      return v16;
    }
  }
  result = sub_1BCAB6624();
  __break(1u);
  return result;
}

void sub_1BC9DBD98(uint64_t a1)
{
  sub_1BC9BD290(a1, &qword_1ED6C31A0, (uint64_t)&qword_1ED6C3628, (uint64_t)sub_1BC9DBE2C, (void (*)(uint64_t, uint64_t, uint64_t))sub_1BC9DBDBC);
}

void sub_1BC9DBDBC(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t TupleTypeMetadata2;
  uint64_t v6;

  if (!*a2)
  {
    sub_1BCAB4BD8();
    a3(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v6)
      atomic_store(TupleTypeMetadata2, a2);
  }
}

void sub_1BC9DBE2C(uint64_t a1)
{
  sub_1BC998AB0(a1, &qword_1ED6C3170, type metadata accessor for SignificantChangeEngine.Changepoint, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
}

void sub_1BC9DBE48(uint64_t a1)
{
  sub_1BC9DBE5C(a1, &qword_1ED6C6E48, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
}

void sub_1BC9DBE5C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    sub_1BC9DBEC4(255, (unint64_t *)&qword_1ED6C6F78, (void (*)(uint64_t))MEMORY[0x1E0D2D8C8]);
    v7 = a3(a1, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

void sub_1BC9DBEC4(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    sub_1BC9A82C4();
    v4 = sub_1BCAB68A0();
    if (!v5)
      atomic_store(v4, a2);
  }
}

void sub_1BC9DBF2C(uint64_t a1)
{
  sub_1BC9DBE5C(a1, &qword_1ED6C6F60, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
}

void sub_1BC9DBF40()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_1EF478940)
  {
    type metadata accessor for CGPoint(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1EF478940);
  }
}

void sub_1BC9DBFA8()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_1EF478970)
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1EF478970);
  }
}

HKStatisticsOptions __swiftcall HKStatisticsOptions.init(options:)(Swift::OpaquePointer options)
{
  if (*((_QWORD *)options._rawValue + 2))
    __asm { BR              X9 }
  swift_bridgeObjectRelease();
  return 0;
}

HealthVisualization::TimeBasedDistributionChartModelFactory __swiftcall TimeBasedDistributionChartModelFactory.init(healthStore:)(HealthVisualization::TimeBasedDistributionChartModelFactory healthStore)
{
  HealthVisualization::TimeBasedDistributionChartModelFactory *v1;

  v1->healthStore.super.isa = healthStore.healthStore.super.isa;
  return healthStore;
}

uint64_t TimeBasedDistributionChartModelFactory.makeChartConfiguration(sampleType:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  void **v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void *v9;
  id v10;
  id v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;

  v5 = sub_1BCAB5514();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v2;
  v10 = a1;
  v11 = v9;
  v12 = objc_msgSend(v10, sel_identifier);
  v13 = sub_1BCAB5F04();
  v15 = v14;

  if (sub_1BCAB5F04() == v13 && v16 == v15)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    v18 = sub_1BCAB67C8();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v18 & 1) == 0)
    {
      sub_1BCAB54D8();
      goto LABEL_11;
    }
  }
  if (qword_1EF477C50 != -1)
    swift_once();
  v19 = __swift_project_value_buffer(v5, (uint64_t)qword_1EF478F00);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v19, v5);
LABEL_11:
  v20 = type metadata accessor for HealthKitDataTypeChartConfiguration();
  v21 = swift_allocObject();
  *(_QWORD *)(v21 + 16) = v10;
  *(_QWORD *)(v21 + 24) = v11;
  result = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v6 + 32))(v21 + OBJC_IVAR____TtC19HealthVisualization35HealthKitDataTypeChartConfiguration_logger, v8, v5);
  a2[3] = v20;
  a2[4] = (uint64_t)&protocol witness table for HealthKitDataTypeChartConfiguration;
  *a2 = v21;
  return result;
}

uint64_t TimeBasedDistributionChartModelFactory.makePDFChartModel(distribution:sampleType:chartConfiguration:textSupport:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X3>, _BYTE *a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  char *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v23;
  uint64_t v24;
  int *v25;
  char v26;
  uint64_t v28;
  uint64_t v29;

  v29 = a4;
  v9 = type metadata accessor for TimeBasedDistribution();
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1BCAB5514();
  v13 = *(_QWORD *)(v12 - 8);
  *(_QWORD *)&v14 = MEMORY[0x1E0C80A78](v12).n128_u64[0];
  v16 = (char *)&v28 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = objc_msgSend(a2, sel_identifier, v14);
  v18 = sub_1BCAB5F04();
  v20 = v19;

  if (sub_1BCAB5F04() == v18 && v21 == v20)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    v23 = sub_1BCAB67C8();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v23 & 1) == 0)
    {
      sub_1BCAB54D8();
      goto LABEL_11;
    }
  }
  if (qword_1EF477C50 != -1)
    swift_once();
  v24 = __swift_project_value_buffer(v12, (uint64_t)qword_1EF478F00);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v16, v24, v12);
LABEL_11:
  v25 = (int *)type metadata accessor for TimeBasedDistributionChartModel();
  sub_1BCA34C9C(a3, (uint64_t)&a5[v25[6]]);
  sub_1BC9DC7A0(a1, (uint64_t)v11);
  v26 = sub_1BCA907C0((uint64_t)v11) & 1;
  sub_1BC9C2428((uint64_t)a3, (uint64_t)(a5 + 8));
  sub_1BC9C2428(v29, (uint64_t)&a5[v25[7]]);
  *a5 = v26;
  return (*(uint64_t (**)(_BYTE *, char *, uint64_t))(v13 + 32))(&a5[v25[8]], v16, v12);
}

uint64_t TimeBasedDistributionChartModelFactory.makeHighlightChartModel(distribution:sampleType:textSupport:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  void **v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  char *v18;
  void *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t, char *, uint64_t);
  id v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  int *v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD v43[5];

  v41 = a1;
  v42 = a3;
  v7 = type metadata accessor for TimeBasedDistribution();
  MEMORY[0x1E0C80A78](v7);
  v39 = (uint64_t)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for TimeBasedDistributionChartDesign();
  MEMORY[0x1E0C80A78](v9);
  v40 = (uint64_t)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1BCAB5514();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v38 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v16 = MEMORY[0x1E0C80A78](v15).n128_u64[0];
  v18 = (char *)&v38 - v17;
  v19 = *v4;
  v20 = objc_msgSend(a2, sel_identifier, v16);
  v21 = sub_1BCAB5F04();
  v23 = v22;

  if (sub_1BCAB5F04() == v21 && v24 == v23)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    v26 = sub_1BCAB67C8();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v26 & 1) == 0)
    {
      sub_1BCAB54D8();
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v14, v18, v11);
      goto LABEL_11;
    }
  }
  if (qword_1EF477C50 != -1)
    swift_once();
  v27 = __swift_project_value_buffer(v11, (uint64_t)qword_1EF478F00);
  v28 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v28(v18, v27, v11);
  v28(v14, (uint64_t)v18, v11);
LABEL_11:
  v29 = type metadata accessor for HealthKitDataTypeChartConfiguration();
  v30 = swift_allocObject();
  *(_QWORD *)(v30 + 16) = a2;
  *(_QWORD *)(v30 + 24) = v19;
  v31 = *(void (**)(uint64_t, char *, uint64_t))(v12 + 32);
  v31(v30 + OBJC_IVAR____TtC19HealthVisualization35HealthKitDataTypeChartConfiguration_logger, v14, v11);
  v43[3] = v29;
  v43[4] = &protocol witness table for HealthKitDataTypeChartConfiguration;
  v43[0] = v30;
  v32 = a2;
  v33 = v19;
  swift_retain();
  v34 = v40;
  sub_1BCA345D8(v43, v40);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v43);
  v35 = v39;
  sub_1BC9DC7A0(v41, v39);
  LOBYTE(v35) = sub_1BCA907C0(v35) & 1;
  *(_QWORD *)(a4 + 32) = v29;
  *(_QWORD *)(a4 + 40) = &protocol witness table for HealthKitDataTypeChartConfiguration;
  *(_QWORD *)(a4 + 8) = v30;
  v36 = (int *)type metadata accessor for TimeBasedDistributionChartModel();
  sub_1BC9C2428(v42, a4 + v36[7]);
  *(_BYTE *)a4 = v35;
  sub_1BC9DC7E4(v34, a4 + v36[6]);
  return ((uint64_t (*)(uint64_t, char *, uint64_t))v31)(a4 + v36[8], v18, v11);
}

uint64_t sub_1BC9DC7A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for TimeBasedDistribution();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1BC9DC7E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for TimeBasedDistributionChartDesign();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

ValueMetadata *type metadata accessor for TimeBasedDistributionChartModelFactory()
{
  return &type metadata for TimeBasedDistributionChartModelFactory;
}

uint64_t *AFibBurdenPDFHistogramTextSupport.__allocating_init(maxBucketTextSupport:now:calendarCache:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;

  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 32);
  v9 = __swift_mutable_project_boxed_opaque_existential_1(a1, v7);
  v10 = sub_1BC9DD5CC(v9, a2, a3, v3, v7, v8);
  __swift_destroy_boxed_opaque_existential_1(a1);
  return v10;
}

uint64_t __swift_mutable_project_boxed_opaque_existential_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

Swift::String __swiftcall AFibBurdenPDFHistogramTextSupport.makeTitle(for:)(HealthVisualization::TimeBasedDistributionFlavor a1)
{
  uint64_t v1;
  void *v2;
  Swift::String result;

  v1 = sub_1BC9DD684(a1 & 1);
  result._object = v2;
  result._countAndFlagsBits = v1;
  return result;
}

uint64_t AFibBurdenPDFHistogramTextSupport.makeDescription(for:flavor:)(uint64_t a1, char a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t inited;
  uint64_t v11;
  unint64_t v12;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  __int128 v22;
  __int128 v23;

  v3 = v2;
  v5 = a2 & 1;
  v6 = v3[5];
  v7 = v3[6];
  __swift_project_boxed_opaque_existential_1(v3 + 2, v6);
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 8))(&v22, a1, v5, v6, v7);
  v8 = v22;
  v9 = v23;
  sub_1BC998AB0(0, &qword_1ED6C7118, (uint64_t (*)(uint64_t))sub_1BC9DD77C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1BCABE680;
  *(_QWORD *)(inited + 32) = 0xD000000000000017;
  *(_QWORD *)(inited + 40) = 0x80000001BCACFC70;
  *(_QWORD *)(inited + 48) = sub_1BC9DCC4C();
  *(_QWORD *)(inited + 56) = v11;
  v12 = sub_1BCA927D8(inited);
  if (v9)
  {
    swift_bridgeObjectRetain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)&v22 = v12;
    sub_1BC9A5CEC(*((uint64_t *)&v8 + 1), v9, 0x4B4355425F58414DLL, 0xEF5453494C5F5445, isUniquelyReferenced_nonNull_native);
    v12 = v22;
    swift_bridgeObjectRelease();
  }
  v14 = 0xD00000000000002DLL;
  v15 = 0x80000001BCACFC90;
  if ((_QWORD)v8 == 1)
    v16 = 0xD000000000000035;
  else
    v16 = 0xD00000000000002DLL;
  if ((_QWORD)v8 == 1)
    v15 = 0x80000001BCACFCE0;
  if ((_QWORD)v8 == 2)
  {
    v16 = 0xD000000000000035;
    v15 = 0x80000001BCACFCE0;
  }
  v17 = 0x80000001BCACFD20;
  if ((_QWORD)v8 == 1)
  {
    v14 = 0xD000000000000035;
    v17 = 0x80000001BCACFD50;
  }
  if ((_QWORD)v8 == 2)
  {
    v14 = 0xD000000000000035;
    v17 = 0x80000001BCACFD50;
  }
  if ((_DWORD)v5)
    v18 = v14;
  else
    v18 = v16;
  if ((_DWORD)v5)
    v19 = v17;
  else
    v19 = v15;
  swift_bridgeObjectRelease();
  v22 = 0u;
  v23 = 0u;
  if (qword_1ED6C7070 != -1)
    swift_once();
  v20 = sub_1BC9A1984(v18, v19, v12, (uint64_t)&v22, 0xD000000000000016, 0x80000001BCACFCC0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1BC9A10A0((uint64_t)&v22);
  return v20;
}

void sub_1BC9DCB28()
{
  id v0;
  void *v1;

  v0 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB3590]), sel_init);
  v1 = (void *)sub_1BCAB5EE0();
  objc_msgSend(v0, sel_setDateTemplate_, v1);

  qword_1EF486D48 = (uint64_t)v0;
}

uint64_t *AFibBurdenPDFHistogramTextSupport.init(maxBucketTextSupport:now:calendarCache:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v16;

  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 32);
  v9 = __swift_mutable_project_boxed_opaque_existential_1(a1, v7);
  v10 = MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, __n128))(v13 + 16))(v12, v10);
  v14 = sub_1BC9DD534((uint64_t)v12, a2, a3, v3, v7, v8);
  __swift_destroy_boxed_opaque_existential_1(a1);
  return v14;
}

uint64_t sub_1BC9DCC4C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void *v13;
  void *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;

  v19 = *v0;
  v1 = sub_1BCAB5454();
  v20 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v3 = (char *)&v19 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BC9DD8B8();
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1BCAB4BD8();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BC9DCEB0((uint64_t)v12);
  if (qword_1EF477C30 != -1)
    swift_once();
  v13 = (void *)qword_1EF486D48;
  v14 = (void *)sub_1BCAB4B78();
  v15 = objc_msgSend(v13, sel_stringFromDateInterval_, v14);

  if (v15)
  {
    v16 = sub_1BCAB5F04();

  }
  else
  {
    if (qword_1ED6C4528 != -1)
      swift_once();
    v17 = __swift_project_value_buffer(v5, (uint64_t)qword_1ED6C4898);
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v17, v5);
    *(_QWORD *)(swift_allocObject() + 16) = v19;
    sub_1BCAB53E8();
    sub_1BCAB5418();
    swift_release();
    (*(void (**)(char *, uint64_t))(v20 + 8))(v3, v1);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v16 = 0;
  }
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  return v16;
}

uint64_t sub_1BC9DCEB0@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  char *v27;
  id v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t, uint64_t);
  void (*v31)(char *, uint64_t);
  unsigned int (*v32)(char *, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  void (*v44)(char *, char *, uint64_t);
  char *v45;
  void (*v46)(char *, uint64_t);
  void (*v48)(char *, char *, uint64_t);
  uint64_t v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;

  v2 = v1;
  v65 = a1;
  v55 = *v1;
  v3 = sub_1BCAB5454();
  v59 = *(_QWORD *)(v3 - 8);
  v60 = v3;
  MEMORY[0x1E0C80A78](v3);
  v58 = (char *)&v48 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BC9DD8B8();
  v56 = *(_QWORD *)(v5 - 8);
  v57 = v5;
  MEMORY[0x1E0C80A78](v5);
  v54 = (char *)&v48 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1BCAB4F68();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BC998AB0(0, &qword_1ED6C7280, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v11);
  v52 = (char *)&v48 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v48 - v14;
  v16 = sub_1BCAB4E54();
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16);
  v51 = (char *)&v48 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19);
  v63 = (char *)&v48 - v20;
  MEMORY[0x1E0C80A78](v21);
  v50 = (char *)&v48 - v22;
  MEMORY[0x1E0C80A78](v23);
  v61 = (char *)&v48 - v24;
  v64 = sub_1BCAB4F74();
  v62 = *(_QWORD *)(v64 - 8);
  *(_QWORD *)&v25 = MEMORY[0x1E0C80A78](v64).n128_u64[0];
  v27 = (char *)&v48 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = objc_msgSend(*(id *)((char *)v2 + OBJC_IVAR____TtC19HealthVisualization33AFibBurdenPDFHistogramTextSupport_calendarCache), sel_currentCalendar, v25);
  sub_1BCAB4F14();

  v29 = *MEMORY[0x1E0CB1130];
  v30 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 104);
  v30(v10, v29, v7);
  v53 = (char *)v2 + OBJC_IVAR____TtC19HealthVisualization33AFibBurdenPDFHistogramTextSupport_now;
  sub_1BCAB4F38();
  v31 = *(void (**)(char *, uint64_t))(v8 + 8);
  v31(v10, v7);
  v32 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48);
  if (v32(v15, 1, v16) == 1)
  {
    v33 = v16;
    v34 = v17;
    v35 = v27;
  }
  else
  {
    v49 = v17;
    v48 = *(void (**)(char *, char *, uint64_t))(v17 + 32);
    v48(v61, v15, v16);
    v30(v10, v29, v7);
    v15 = v52;
    sub_1BCAB4F38();
    v31(v10, v7);
    v33 = v16;
    v35 = v27;
    if (v32(v15, 1, v16) != 1)
    {
      v42 = v50;
      v48(v50, v15, v33);
      v43 = v49;
      v44 = *(void (**)(char *, char *, uint64_t))(v49 + 16);
      v44(v63, v42, v33);
      v45 = v61;
      v44(v51, v61, v33);
      sub_1BCAB4BA8();
      v46 = *(void (**)(char *, uint64_t))(v43 + 8);
      v46(v42, v33);
      v46(v45, v33);
      return (*(uint64_t (**)(char *, uint64_t))(v62 + 8))(v35, v64);
    }
    v34 = v49;
    (*(void (**)(char *, uint64_t))(v49 + 8))(v61, v16);
  }
  sub_1BC9AFCAC((uint64_t)v15);
  if (qword_1ED6C4528 != -1)
    swift_once();
  v36 = v57;
  v37 = __swift_project_value_buffer(v57, (uint64_t)qword_1ED6C4898);
  v38 = v56;
  v39 = v54;
  (*(void (**)(char *, uint64_t, uint64_t))(v56 + 16))(v54, v37, v36);
  *(_QWORD *)(swift_allocObject() + 16) = v55;
  v40 = v58;
  v41 = v60;
  sub_1BCAB53E8();
  sub_1BCAB5418();
  swift_release();
  (*(void (**)(char *, uint64_t))(v59 + 8))(v40, v41);
  (*(void (**)(char *, uint64_t))(v38 + 8))(v39, v36);
  (*(void (**)(char *, char *, uint64_t))(v34 + 16))(v63, v53, v33);
  sub_1BCAB4BB4();
  return (*(uint64_t (**)(char *, uint64_t))(v62 + 8))(v35, v64);
}

uint64_t sub_1BC9DD3D0()
{
  sub_1BCAB64C8();
  sub_1BCAB5F70();
  swift_getMetatypeMetadata();
  sub_1BCAB5F28();
  sub_1BCAB5F70();
  swift_bridgeObjectRelease();
  sub_1BCAB5F70();
  return 0;
}

uint64_t AFibBurdenPDFHistogramTextSupport.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  v1 = v0 + OBJC_IVAR____TtC19HealthVisualization33AFibBurdenPDFHistogramTextSupport_now;
  v2 = sub_1BCAB4E54();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);

  return v0;
}

uint64_t AFibBurdenPDFHistogramTextSupport.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  v1 = v0 + OBJC_IVAR____TtC19HealthVisualization33AFibBurdenPDFHistogramTextSupport_now;
  v2 = sub_1BCAB4E54();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);

  return swift_deallocClassInstance();
}

uint64_t *sub_1BC9DD534(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6)
{
  uint64_t *boxed_opaque_existential_1;
  char *v12;
  uint64_t v13;

  a4[5] = a5;
  a4[6] = a6;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a4 + 2);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 32))(boxed_opaque_existential_1, a1, a5);
  v12 = (char *)a4 + OBJC_IVAR____TtC19HealthVisualization33AFibBurdenPDFHistogramTextSupport_now;
  v13 = sub_1BCAB4E54();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v12, a2, v13);
  *(uint64_t *)((char *)a4 + OBJC_IVAR____TtC19HealthVisualization33AFibBurdenPDFHistogramTextSupport_calendarCache) = a3;
  return a4;
}

uint64_t *sub_1BC9DD5CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t *v14;
  uint64_t v16;

  v11 = *(_QWORD *)(a5 - 8);
  MEMORY[0x1E0C80A78](a1);
  v13 = (char *)&v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = (uint64_t *)swift_allocObject();
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a1, a5);
  return sub_1BC9DD534((uint64_t)v13, a2, a3, v14, a5, a6);
}

uint64_t sub_1BC9DD684(char a1)
{
  const char *v1;
  uint64_t v2;
  __int128 v4;
  __int128 v5;

  if ((a1 & 1) != 0)
  {
    v4 = 0uLL;
    v5 = 0uLL;
    if (qword_1ED6C7070 != -1)
      swift_once();
    v1 = "AFIB_BURDEN_PDF_HISTOGRAM_TIME_OF_DAY_TITLE";
  }
  else
  {
    v4 = 0uLL;
    v5 = 0uLL;
    if (qword_1ED6C7070 != -1)
      swift_once();
    v1 = "AFIB_BURDEN_PDF_HISTOGRAM_DAY_OF_WEEK_TITLE";
  }
  v2 = sub_1BC9A1984(0xD00000000000002BLL, (unint64_t)(v1 - 32) | 0x8000000000000000, 0, (uint64_t)&v4, 0xD000000000000016, 0x80000001BCACFCC0);
  sub_1BC9A10A0((uint64_t)&v4);
  return v2;
}

void sub_1BC9DD77C()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_1ED6C70E0)
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1ED6C70E0);
  }
}

uint64_t sub_1BC9DD7DC()
{
  return type metadata accessor for AFibBurdenPDFHistogramTextSupport();
}

uint64_t type metadata accessor for AFibBurdenPDFHistogramTextSupport()
{
  uint64_t result;

  result = qword_1EF4789B0;
  if (!qword_1EF4789B0)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_1BC9DD820()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1BCAB4E54();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for AFibBurdenPDFHistogramTextSupport()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of AFibBurdenPDFHistogramTextSupport.__allocating_init(maxBucketTextSupport:now:calendarCache:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

void sub_1BC9DD8B8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED6C4BC0)
  {
    sub_1BCAB5454();
    sub_1BC9DD980(&qword_1ED6C4BD8, MEMORY[0x1E0D2BE20]);
    sub_1BC9DD980(&qword_1ED6C4BC8, MEMORY[0x1E0D2BE10]);
    sub_1BC9DD980(&qword_1ED6C4BD0, MEMORY[0x1E0D2BE18]);
    v0 = sub_1BCAB5430();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED6C4BC0);
  }
}

uint64_t sub_1BC9DD980(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = sub_1BCAB5454();
    result = MEMORY[0x1BCCFBE84](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1BC9DD9C0()
{
  return swift_deallocObject();
}

uint64_t sub_1BC9DD9D0()
{
  return sub_1BC9DD3D0();
}

uint64_t sub_1BC9DDA04()
{
  return swift_deallocObject();
}

uint64_t sub_1BC9DDA14()
{
  return sub_1BC9DD3D0();
}

uint64_t sub_1BC9DDA48(uint64_t a1)
{
  return sub_1BC9DDB94(a1, type metadata accessor for TimeBasedDistributionChartPoint.TimeOfDay, (uint64_t)&protocol witness table for TimeBasedDistributionChartPoint.TimeOfDay);
}

uint64_t sub_1BC9DDA5C(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  __int128 v8;
  uint64_t v9;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x1E0DEE9D8];
  if (v1)
  {
    v9 = MEMORY[0x1E0DEE9D8];
    sub_1BC9BAD30(0, v1, 0);
    v2 = v9;
    v4 = a1 + 40;
    do
    {
      swift_bridgeObjectRetain();
      swift_dynamicCast();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1BC9BAD30(0, *(_QWORD *)(v2 + 16) + 1, 1);
        v2 = v9;
      }
      v6 = *(_QWORD *)(v2 + 16);
      v5 = *(_QWORD *)(v2 + 24);
      if (v6 >= v5 >> 1)
      {
        sub_1BC9BAD30(v5 > 1, v6 + 1, 1);
        v2 = v9;
      }
      v4 += 16;
      *(_QWORD *)(v2 + 16) = v6 + 1;
      sub_1BC9A61C8(&v8, (_OWORD *)(v2 + 32 * v6 + 32));
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t sub_1BC9DDB80(uint64_t a1)
{
  return sub_1BC9DDB94(a1, type metadata accessor for TimeBasedDistributionChartPoint.DayOfWeek, (uint64_t)&protocol witness table for TimeBasedDistributionChartPoint.DayOfWeek);
}

uint64_t sub_1BC9DDB94(uint64_t a1, uint64_t (*a2)(_QWORD), uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t *boxed_opaque_existential_1;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v6 = a2(0);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v18 - v8;
  v10 = *(_QWORD *)(a1 + 16);
  v11 = MEMORY[0x1E0DEE9D8];
  if (v10)
  {
    v21 = MEMORY[0x1E0DEE9D8];
    sub_1BC9BAD14(0, v10, 0);
    v11 = v21;
    v12 = a1 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
    v13 = *(_QWORD *)(v7 + 72);
    do
    {
      sub_1BC9964B8(v12, (uint64_t)v9, a2);
      v21 = v11;
      v15 = *(_QWORD *)(v11 + 16);
      v14 = *(_QWORD *)(v11 + 24);
      if (v15 >= v14 >> 1)
      {
        sub_1BC9BAD14(v14 > 1, v15 + 1, 1);
        v11 = v21;
      }
      v19 = v6;
      v20 = a3;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v18);
      sub_1BC9964B8((uint64_t)v9, (uint64_t)boxed_opaque_existential_1, a2);
      *(_QWORD *)(v11 + 16) = v15 + 1;
      sub_1BC9C42A4(&v18, v11 + 40 * v15 + 32);
      sub_1BC997208((uint64_t)v9, a2);
      v12 += v13;
      --v10;
    }
    while (v10);
  }
  return v11;
}

uint64_t *TimeBasedDistributionMaxBucketTextSupport.__allocating_init(componentRangeOrderProvider:logger:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;

  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_QWORD *)(a1 + 32);
  v7 = __swift_mutable_project_boxed_opaque_existential_1(a1, v5);
  v8 = sub_1BC9DEE18(v7, a2, v2, v5, v6);
  __swift_destroy_boxed_opaque_existential_1(a1);
  return v8;
}

uint64_t TimeBasedDistributionMaxBucketTextSupport.MaxBucketInformation.numberOfMaximums.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t TimeBasedDistributionMaxBucketTextSupport.MaxBucketInformation.numberOfMaximums.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*TimeBasedDistributionMaxBucketTextSupport.MaxBucketInformation.numberOfMaximums.modify())()
{
  return nullsub_1;
}

uint64_t TimeBasedDistributionMaxBucketTextSupport.MaxBucketInformation.maxBucketDescription.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t TimeBasedDistributionMaxBucketTextSupport.MaxBucketInformation.maxBucketDescription.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *(_QWORD *)(v2 + 8) = a1;
  *(_QWORD *)(v2 + 16) = a2;
  return result;
}

uint64_t (*TimeBasedDistributionMaxBucketTextSupport.MaxBucketInformation.maxBucketDescription.modify())()
{
  return nullsub_1;
}

HealthVisualization::TimeBasedDistributionMaxBucketTextSupport::MaxBucketInformation __swiftcall TimeBasedDistributionMaxBucketTextSupport.MaxBucketInformation.init(numberOfMaximums:maxBucketDescription:)(Swift::Int numberOfMaximums, Swift::String_optional maxBucketDescription)
{
  uint64_t v2;
  HealthVisualization::TimeBasedDistributionMaxBucketTextSupport::MaxBucketInformation result;

  *(_QWORD *)v2 = numberOfMaximums;
  *(Swift::String_optional *)(v2 + 8) = maxBucketDescription;
  result.maxBucketDescription = maxBucketDescription;
  result.numberOfMaximums = numberOfMaximums;
  return result;
}

uint64_t *TimeBasedDistributionMaxBucketTextSupport.init(componentRangeOrderProvider:logger:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v14;

  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_QWORD *)(a1 + 32);
  v7 = __swift_mutable_project_boxed_opaque_existential_1(a1, v5);
  v8 = MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, __n128))(v11 + 16))(v10, v8);
  v12 = sub_1BC9DEC70((uint64_t)v10, a2, v2, v5, v6);
  __swift_destroy_boxed_opaque_existential_1(a1);
  return v12;
}

void TimeBasedDistributionMaxBucketTextSupport.extractMaxBucketInformation(distribution:flavor:)(uint64_t a1@<X0>, char a2@<W1>, unint64_t *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  id v34;
  void *v35;
  id v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char v40;
  uint64_t v41;
  unint64_t *v42;
  __int128 v43;
  uint64_t v44;

  v5 = a2 & 1;
  v6 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for TimeBasedDistribution() + 20));
  v7 = v3[5];
  v8 = v3[6];
  v41 = (uint64_t)v3;
  __swift_project_boxed_opaque_existential_1(v3 + 2, v7);
  v40 = v5;
  v9 = (unint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 8))(v5, v7, v8);
  v44 = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1BC9DFE54(&v44, v9);
  swift_bridgeObjectRelease();
  v42 = a3;
  swift_bridgeObjectRelease();
  v10 = *(_QWORD *)(v44 + 16);
  if (v10)
  {
    v11 = (_QWORD *)(v44 + 64);
    v12 = MEMORY[0x1E0DEE9D8];
    do
    {
      if (*((_BYTE *)v11 - 7) == 1)
      {
        v43 = *((_OWORD *)v11 - 2);
        v16 = *(v11 - 2);
        v17 = *((_BYTE *)v11 - 8);
        v18 = *v11;
        swift_bridgeObjectRetain();
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v44 = v12;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_1BC9BACDC(0, *(_QWORD *)(v12 + 16) + 1, 1);
          v12 = v44;
        }
        v14 = *(_QWORD *)(v12 + 16);
        v13 = *(_QWORD *)(v12 + 24);
        if (v14 >= v13 >> 1)
        {
          sub_1BC9BACDC(v13 > 1, v14 + 1, 1);
          v12 = v44;
        }
        *(_QWORD *)(v12 + 16) = v14 + 1;
        v15 = v12 + 40 * v14;
        *(_OWORD *)(v15 + 32) = v43;
        *(_QWORD *)(v15 + 48) = v16;
        *(_BYTE *)(v15 + 56) = v17;
        *(_BYTE *)(v15 + 57) = 1;
        *(_QWORD *)(v15 + 64) = v18;
      }
      v11 += 5;
      --v10;
    }
    while (v10);
  }
  else
  {
    v12 = MEMORY[0x1E0DEE9D8];
  }
  swift_release();
  v20 = *(_QWORD *)(v12 + 16);
  if (v20)
  {
    if (v20 <= 2)
    {
      swift_retain();
      v33 = sub_1BC9DECF0(v12, v41, v40);
      swift_release();
      swift_release();
      v34 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB3738]), sel_init);
      sub_1BC9DDA5C(v33);
      swift_bridgeObjectRelease();
      v35 = (void *)sub_1BCAB600C();
      swift_bridgeObjectRelease();
      v36 = objc_msgSend(v34, sel_stringFromItems_, v35);

      if (v36)
      {
        v37 = sub_1BCAB5F04();
        v39 = v38;

      }
      else
      {
        v37 = 0;
        v39 = 0;
      }
      *v42 = v20;
      v42[1] = v37;
      v42[2] = v39;
    }
    else
    {
      swift_retain_n();
      v21 = sub_1BCAB54FC();
      v22 = sub_1BCAB61BC();
      if (os_log_type_enabled(v21, v22))
      {
        v23 = (uint8_t *)swift_slowAlloc();
        v24 = swift_slowAlloc();
        v44 = v24;
        *(_DWORD *)v23 = 136446210;
        swift_retain();
        v25 = sub_1BCAB5F28();
        sub_1BC99BD4C(v25, v26, &v44);
        sub_1BCAB63A8();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1BC989000, v21, v22, "[%{public}s] Too many buckets", v23, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1BCCFBF5C](v24, -1, -1);
        MEMORY[0x1BCCFBF5C](v23, -1, -1);
        swift_release();
      }
      else
      {
        swift_release();
        swift_release_n();
      }

      v42[1] = 0;
      v42[2] = 0;
      *v42 = v20;
    }
  }
  else
  {
    swift_retain_n();
    v27 = sub_1BCAB54FC();
    v28 = sub_1BCAB61BC();
    if (os_log_type_enabled(v27, v28))
    {
      v29 = (uint8_t *)swift_slowAlloc();
      v30 = swift_slowAlloc();
      v44 = v30;
      *(_DWORD *)v29 = 136446210;
      swift_retain();
      v31 = sub_1BCAB5F28();
      sub_1BC99BD4C(v31, v32, &v44);
      sub_1BCAB63A8();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1BC989000, v27, v28, "[%{public}s] Too few buckets", v29, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BCCFBF5C](v30, -1, -1);
      MEMORY[0x1BCCFBF5C](v29, -1, -1);
      swift_release();
    }
    else
    {
      swift_release();
      swift_release_n();
    }

    *v42 = 0;
    v42[1] = 0;
    v42[2] = 0;
  }
}

uint64_t sub_1BC9DE414(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  const char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int128 v18;
  __int128 v19;
  uint64_t v20;

  v3 = v2;
  v4 = *a1;
  if ((a2 & 1) != 0)
  {
    switch(__ROR8__(v4, 2))
    {
      case 0:
        v18 = 0u;
        v19 = 0u;
        if (qword_1ED6C7070 != -1)
          swift_once();
        v5 = 0xD00000000000003ELL;
        v6 = "TIME_BASED_DISTRIBUTION_TIME_OF_DAY_BUCKET_MIDNIGHT_TO_FOUR_AM";
        goto LABEL_50;
      case 1:
        v18 = 0u;
        v19 = 0u;
        if (qword_1ED6C7070 != -1)
          swift_once();
        v5 = 0xD00000000000003ELL;
        v6 = "TIME_BASED_DISTRIBUTION_TIME_OF_DAY_BUCKET_FOUR_AM_TO_EIGHT_AM";
        goto LABEL_50;
      case 2:
        v18 = 0u;
        v19 = 0u;
        if (qword_1ED6C7070 != -1)
          swift_once();
        v5 = 0xD00000000000003BLL;
        v6 = "TIME_BASED_DISTRIBUTION_TIME_OF_DAY_BUCKET_EIGHT_AM_TO_NOON";
        goto LABEL_50;
      case 3:
        v18 = 0u;
        v19 = 0u;
        if (qword_1ED6C7070 != -1)
          swift_once();
        v5 = 0xD00000000000003ALL;
        v6 = "TIME_BASED_DISTRIBUTION_TIME_OF_DAY_BUCKET_NOON_TO_FOUR_PM";
        goto LABEL_50;
      case 4:
        v18 = 0u;
        v19 = 0u;
        if (qword_1ED6C7070 != -1)
          swift_once();
        v5 = 0xD00000000000003ELL;
        v6 = "TIME_BASED_DISTRIBUTION_TIME_OF_DAY_BUCKET_FOUR_PM_TO_EIGHT_PM";
        goto LABEL_50;
      case 5:
        v18 = 0u;
        v19 = 0u;
        if (qword_1ED6C7070 != -1)
          swift_once();
        v5 = 0xD00000000000003FLL;
        v6 = "TIME_BASED_DISTRIBUTION_TIME_OF_DAY_BUCKET_EIGHT_PM_TO_MIDNIGHT";
LABEL_50:
        v16 = sub_1BC9A1984(v5, (unint64_t)(v6 - 32) | 0x8000000000000000, 0, (uint64_t)&v18, 0xD000000000000015, 0x80000001BCACFF90);
        sub_1BC997208((uint64_t)&v18, (uint64_t (*)(_QWORD))sub_1BC9A6170);
        return v16;
      default:
        swift_retain_n();
        swift_bridgeObjectRetain_n();
        v7 = sub_1BCAB54FC();
        v8 = sub_1BCAB61B0();
        if (os_log_type_enabled(v7, v8))
        {
          v9 = swift_slowAlloc();
          v10 = swift_slowAlloc();
          *(_QWORD *)&v18 = v10;
          *(_DWORD *)v9 = 136446466;
          v20 = v3;
          swift_retain();
          v11 = sub_1BCAB5F28();
          v20 = sub_1BC99BD4C(v11, v12, (uint64_t *)&v18);
          sub_1BCAB63A8();
          swift_release_n();
          swift_bridgeObjectRelease();
          *(_WORD *)(v9 + 12) = 2048;
          swift_bridgeObjectRelease();
          v20 = v4;
          sub_1BCAB63A8();
          swift_bridgeObjectRelease();
          v13 = "[%{public}s] Given time of day component outside of expected bounds: %ld";
          goto LABEL_29;
        }
LABEL_30:
        swift_release_n();

        swift_bridgeObjectRelease_n();
        break;
    }
  }
  else
  {
    switch(v4)
    {
      case 0:
        v18 = 0u;
        v19 = 0u;
        if (qword_1ED6C7070 != -1)
          swift_once();
        v5 = 0xD000000000000032;
        v6 = "TIME_BASED_DISTRIBUTION_DAY_OF_WEEK_BUCKET_SUNDAYS";
        goto LABEL_50;
      case 1:
        v18 = 0u;
        v19 = 0u;
        if (qword_1ED6C7070 != -1)
          swift_once();
        v5 = 0xD000000000000032;
        v6 = "TIME_BASED_DISTRIBUTION_DAY_OF_WEEK_BUCKET_MONDAYS";
        goto LABEL_50;
      case 2:
        v18 = 0u;
        v19 = 0u;
        if (qword_1ED6C7070 != -1)
          swift_once();
        v5 = 0xD000000000000033;
        v6 = "TIME_BASED_DISTRIBUTION_DAY_OF_WEEK_BUCKET_TUESDAYS";
        goto LABEL_50;
      case 3:
        v18 = 0u;
        v19 = 0u;
        if (qword_1ED6C7070 != -1)
          swift_once();
        v5 = 0xD000000000000035;
        v6 = "TIME_BASED_DISTRIBUTION_DAY_OF_WEEK_BUCKET_WEDNESDAYS";
        goto LABEL_50;
      case 4:
        v18 = 0u;
        v19 = 0u;
        if (qword_1ED6C7070 != -1)
          swift_once();
        v5 = 0xD000000000000034;
        v6 = "TIME_BASED_DISTRIBUTION_DAY_OF_WEEK_BUCKET_THURSDAYS";
        goto LABEL_50;
      case 5:
        v18 = 0u;
        v19 = 0u;
        if (qword_1ED6C7070 != -1)
          swift_once();
        v5 = 0xD000000000000032;
        v6 = "TIME_BASED_DISTRIBUTION_DAY_OF_WEEK_BUCKET_FRIDAYS";
        goto LABEL_50;
      case 6:
        v18 = 0u;
        v19 = 0u;
        if (qword_1ED6C7070 != -1)
          swift_once();
        v5 = 0xD000000000000034;
        v6 = "TIME_BASED_DISTRIBUTION_DAY_OF_WEEK_BUCKET_SATURDAYS";
        goto LABEL_50;
      default:
        swift_retain_n();
        swift_bridgeObjectRetain_n();
        v7 = sub_1BCAB54FC();
        v8 = sub_1BCAB61B0();
        if (!os_log_type_enabled(v7, v8))
          goto LABEL_30;
        v9 = swift_slowAlloc();
        v10 = swift_slowAlloc();
        *(_QWORD *)&v18 = v10;
        *(_DWORD *)v9 = 136446466;
        v20 = v3;
        swift_retain();
        v14 = sub_1BCAB5F28();
        v20 = sub_1BC99BD4C(v14, v15, (uint64_t *)&v18);
        sub_1BCAB63A8();
        swift_release_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v9 + 12) = 2048;
        swift_bridgeObjectRelease();
        v20 = v4;
        sub_1BCAB63A8();
        swift_bridgeObjectRelease();
        v13 = "[%{public}s] Given day of week component outside of expected bounds: %ld";
        break;
    }
LABEL_29:
    _os_log_impl(&dword_1BC989000, v7, v8, v13, (uint8_t *)v9, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1BCCFBF5C](v10, -1, -1);
    MEMORY[0x1BCCFBF5C](v9, -1, -1);

  }
  return 0;
}

uint64_t TimeBasedDistributionMaxBucketTextSupport.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  v1 = v0 + OBJC_IVAR____TtC19HealthVisualization41TimeBasedDistributionMaxBucketTextSupport_logger;
  v2 = sub_1BCAB5514();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t TimeBasedDistributionMaxBucketTextSupport.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  v1 = v0 + OBJC_IVAR____TtC19HealthVisualization41TimeBasedDistributionMaxBucketTextSupport_logger;
  v2 = sub_1BCAB5514();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance();
}

void sub_1BC9DEC4C(uint64_t a1@<X0>, char a2@<W1>, unint64_t *a3@<X8>)
{
  TimeBasedDistributionMaxBucketTextSupport.extractMaxBucketInformation(distribution:flavor:)(a1, a2 & 1, a3);
}

uint64_t *sub_1BC9DEC70(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t *boxed_opaque_existential_1;
  char *v10;
  uint64_t v11;

  a3[5] = a4;
  a3[6] = a5;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a3 + 2);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 32))(boxed_opaque_existential_1, a1, a4);
  v10 = (char *)a3 + OBJC_IVAR____TtC19HealthVisualization41TimeBasedDistributionMaxBucketTextSupport_logger;
  v11 = sub_1BCAB5514();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v10, a2, v11);
  return a3;
}

uint64_t sub_1BC9DECF0(uint64_t a1, uint64_t a2, char a3)
{
  int64_t v3;
  uint64_t v4;
  char v6;
  _QWORD *v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  __int128 v19;
  uint64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  uint64_t v24;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = MEMORY[0x1E0DEE9D8];
  if (v3)
  {
    v6 = a3 & 1;
    v24 = MEMORY[0x1E0DEE9D8];
    sub_1BC9BAC24(0, v3, 0);
    v4 = v24;
    v7 = (_QWORD *)(a1 + 64);
    do
    {
      v8 = *(v7 - 2);
      v9 = *((_BYTE *)v7 - 8);
      v10 = *((_BYTE *)v7 - 7);
      v11 = *v7;
      v19 = *((_OWORD *)v7 - 2);
      v20 = v8;
      v21 = v9;
      v22 = v10;
      v23 = v11;
      swift_bridgeObjectRetain();
      v12 = sub_1BC9DE414((uint64_t *)&v19, v6);
      v14 = v13;
      swift_bridgeObjectRelease();
      v24 = v4;
      v16 = *(_QWORD *)(v4 + 16);
      v15 = *(_QWORD *)(v4 + 24);
      if (v16 >= v15 >> 1)
      {
        sub_1BC9BAC24(v15 > 1, v16 + 1, 1);
        v4 = v24;
      }
      *(_QWORD *)(v4 + 16) = v16 + 1;
      v17 = v4 + 16 * v16;
      *(_QWORD *)(v17 + 32) = v12;
      *(_QWORD *)(v17 + 40) = v14;
      v7 += 5;
      --v3;
    }
    while (v3);
  }
  return v4;
}

uint64_t *sub_1BC9DEE18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t *v12;
  uint64_t v14;

  v9 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](a1);
  v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (uint64_t *)swift_allocObject();
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a1, a4);
  return sub_1BC9DEC70((uint64_t)v11, a2, v12, a4, a5);
}

uint64_t sub_1BC9DEECC(char *__src, char *a2, char *a3, char *__dst, unint64_t *a5)
{
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  int64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  unint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t result;
  char *v52;
  char *v53;
  char *v54;

  v6 = __dst;
  v7 = a3;
  v8 = a2;
  v9 = __src;
  v10 = a2 - __src;
  v11 = (a2 - __src) / 40;
  v12 = a3 - a2;
  v13 = (a3 - a2) / 40;
  v54 = __src;
  v53 = __dst;
  if (v11 < v13)
  {
    if (v10 < -39)
      goto LABEL_84;
    if (__dst != __src || &__src[40 * v11] <= __dst)
      memmove(__dst, __src, 40 * v11);
    v14 = &v6[40 * v11];
    v52 = v14;
    if (v8 < v7 && v10 >= 40)
    {
      v15 = a5[2];
      v16 = a5 + 5;
      if (v15 <= 1)
        v17 = 1;
      else
        v17 = a5[2];
      v18 = v17 - 1;
      while (1)
      {
        if (v15)
        {
          v19 = *(_QWORD *)v8;
          v20 = *(_QWORD *)v6;
          v21 = a5[4];
          if (v21 == *(_QWORD *)v8)
          {
            if (v19 != v20)
            {
              v22 = 0;
              goto LABEL_16;
            }
          }
          else if (v15 != 1)
          {
            if (*v16 == v19)
            {
              if (v21 != v20)
              {
                v22 = 1;
LABEL_16:
                v23 = 0;
                while (v15 - 1 != v23)
                {
                  if (v18 == v23)
                    goto LABEL_83;
                  v24 = v16[v23++];
                  if (v24 == v20)
                  {
                    if (v22 > v23 - 1)
                      goto LABEL_26;
                    break;
                  }
                }
                v25 = v8 + 40;
                if (v9 < v8 || v9 >= v25 || v9 != v8)
                {
                  v26 = *(_OWORD *)v8;
                  v27 = *((_OWORD *)v8 + 1);
                  *((_QWORD *)v9 + 4) = *((_QWORD *)v8 + 4);
                  *(_OWORD *)v9 = v26;
                  *((_OWORD *)v9 + 1) = v27;
                }
                goto LABEL_29;
              }
            }
            else
            {
              v30 = 0;
              while (v15 - 2 != v30)
              {
                v31 = a5[v30++ + 6];
                if (v31 == v19)
                {
                  if (v21 == v20)
                    break;
                  v22 = v30 + 1;
                  goto LABEL_16;
                }
              }
            }
          }
        }
LABEL_26:
        if (v9 != v6)
        {
          v28 = *(_OWORD *)v6;
          v29 = *((_OWORD *)v6 + 1);
          *((_QWORD *)v9 + 4) = *((_QWORD *)v6 + 4);
          *(_OWORD *)v9 = v28;
          *((_OWORD *)v9 + 1) = v29;
        }
        v6 += 40;
        v53 = v6;
        v25 = v8;
LABEL_29:
        v9 += 40;
        if (v6 < v14)
        {
          v8 = v25;
          if (v25 < v7)
            continue;
        }
        v54 = v9;
        break;
      }
    }
LABEL_81:
    sub_1BCA319A4((void **)&v54, (const void **)&v53, &v52);
    return 1;
  }
  if (v12 < -39)
    goto LABEL_84;
  if (__dst != a2 || &a2[40 * v13] <= __dst)
    memmove(__dst, a2, 40 * v13);
  v32 = &v6[40 * v13];
  v52 = v32;
  v54 = v8;
  if (v9 >= v8 || v12 < 40)
    goto LABEL_81;
  v33 = a5[2];
  v34 = a5 + 5;
  if (v33 <= 1)
    v35 = 1;
  else
    v35 = a5[2];
  v36 = v35 - 1;
  while (1)
  {
    v37 = v7 - 40;
    v38 = *((_QWORD *)v32 - 5);
    if (!v33)
      goto LABEL_64;
    v39 = v8 - 40;
    v40 = *((_QWORD *)v8 - 5);
    v41 = a5[4];
    if (v41 == v38)
    {
      if (v38 != v40)
      {
        v42 = 0;
        goto LABEL_54;
      }
      goto LABEL_64;
    }
    if (v33 != 1)
    {
      if (*v34 != v38)
      {
        v49 = 0;
        while (v33 - 2 != v49)
        {
          v50 = a5[v49++ + 6];
          if (v50 == v38)
          {
            if (v41 == v40)
              goto LABEL_64;
            v42 = v49 + 1;
            goto LABEL_54;
          }
        }
        goto LABEL_64;
      }
      if (v41 != v40)
        break;
    }
LABEL_64:
    v52 = v32 - 40;
    if (v7 < v32 || v37 >= v32 || v7 != v32)
    {
      v47 = *(_OWORD *)(v32 - 40);
      v48 = *(_OWORD *)(v32 - 24);
      *((_QWORD *)v7 - 1) = *((_QWORD *)v32 - 1);
      *(_OWORD *)v37 = v47;
      *(_OWORD *)(v7 - 24) = v48;
    }
    v39 = v8;
    v32 -= 40;
LABEL_69:
    if (v39 > v9)
    {
      v8 = v39;
      v7 -= 40;
      if (v32 > v6)
        continue;
    }
    goto LABEL_81;
  }
  v42 = 1;
LABEL_54:
  v43 = 0;
  while (1)
  {
    if (v33 - 1 == v43)
      goto LABEL_59;
    if (v36 == v43)
      break;
    v44 = v34[v43++];
    if (v44 == v40)
    {
      if (v42 > v43 - 1)
        goto LABEL_64;
LABEL_59:
      if (v7 != v8 || v37 >= v8)
      {
        v45 = *(_OWORD *)v39;
        v46 = *(_OWORD *)(v8 - 24);
        *((_QWORD *)v7 - 1) = *((_QWORD *)v8 - 1);
        *(_OWORD *)v37 = v45;
        *(_OWORD *)(v7 - 24) = v46;
      }
      v54 = v8 - 40;
      goto LABEL_69;
    }
  }
  __break(1u);
LABEL_83:
  __break(1u);
LABEL_84:
  swift_bridgeObjectRelease();
  result = sub_1BCAB6624();
  __break(1u);
  return result;
}

uint64_t sub_1BC9DF2E8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4, _QWORD *a5)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;

  if (a3 == a2)
    return result;
  v5 = *a4;
  v6 = a5 + 5;
  v7 = a5[2];
  while (2)
  {
    if (!v7)
      goto LABEL_4;
    v8 = *(_QWORD *)(v5 + 40 * a3);
    v9 = a3;
    while (1)
    {
      v10 = v5 + 40 * v9;
      v12 = (_OWORD *)(v10 - 40);
      v11 = *(_QWORD *)(v10 - 40);
      v13 = a5[4];
      if (v13 == v8)
      {
        if (v8 == v11)
          goto LABEL_4;
        v14 = 0;
        goto LABEL_19;
      }
      if (v7 == 1)
        goto LABEL_4;
      if (*v6 != v8)
        break;
      if (v13 == v11)
        goto LABEL_4;
      v14 = 1;
LABEL_19:
      v17 = 0;
      v18 = v9 - 1;
      while (v7 - 1 != v17)
      {
        v19 = v6[v17++];
        if (v19 == v11)
        {
          if (v14 > v17 - 1)
            goto LABEL_4;
          break;
        }
      }
      if (!v5)
      {
        __break(1u);
        return result;
      }
      v20 = v5 + 40 * v9;
      v21 = *(_BYTE *)(v20 + 24);
      v22 = *(_BYTE *)(v20 + 25);
      v23 = *(_QWORD *)(v20 + 32);
      v24 = *(_OWORD *)(v10 + 8);
      v25 = *(_OWORD *)(v10 - 24);
      *(_OWORD *)v10 = *v12;
      *(_OWORD *)(v10 + 16) = v25;
      *(_QWORD *)(v10 + 32) = *(_QWORD *)(v10 - 8);
      *(_QWORD *)v12 = v8;
      *(_OWORD *)(v10 - 32) = v24;
      v26 = v5 + 40 * v18;
      *(_BYTE *)(v26 + 24) = v21;
      *(_BYTE *)(v26 + 25) = v22;
      *(_QWORD *)(v26 + 32) = v23;
      v9 = v18;
      if (v18 == result)
        goto LABEL_4;
    }
    v15 = 0;
    while (v7 - 2 != v15)
    {
      v16 = a5[v15++ + 6];
      if (v16 == v8)
      {
        if (v13 == v11)
          break;
        v14 = v15 + 1;
        goto LABEL_19;
      }
    }
LABEL_4:
    if (++a3 != a2)
      continue;
    return result;
  }
}

uint64_t sub_1BC9DF42C(uint64_t *a1, unint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BOOL4 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  char v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _OWORD *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  char v68;
  char v69;
  uint64_t v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  char *v76;
  char *v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  BOOL v89;
  unint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  BOOL v99;
  uint64_t v100;
  char v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  BOOL v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  char *v118;
  char *v119;
  uint64_t v120;
  unint64_t v121;
  char *v122;
  uint64_t v123;
  unint64_t v124;
  unint64_t v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  char *v131;
  char *v132;
  unint64_t v133;
  uint64_t *v134;
  uint64_t v135;
  uint64_t v136;
  _QWORD *v137;
  _QWORD *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  char *__dst;
  unint64_t *v143;
  char *v144;
  uint64_t v145;
  char *v146;
  char *v147;
  uint64_t v148;

  v4 = a1[1];
  swift_bridgeObjectRetain_n();
  v5 = sub_1BCAB678C();
  if (v5 >= v4)
  {
    if (v4 < 0)
    {
LABEL_203:
      __break(1u);
LABEL_204:
      __break(1u);
      goto LABEL_205;
    }
    if (!v4)
      return swift_bridgeObjectRelease_n();
    swift_bridgeObjectRetain();
    sub_1BC9DF2E8(0, v4, 1, a1, a2);
    if (!v148)
      return swift_bridgeObjectRelease_n();
LABEL_177:
    swift_bridgeObjectRelease_n();
    return swift_bridgeObjectRelease();
  }
  if (v4 >= 0)
    v6 = v4;
  else
    v6 = v4 + 1;
  if (v4 < -1)
    goto LABEL_211;
  v143 = a2;
  v139 = v4;
  v136 = v5;
  v134 = a1;
  if (v4 < 2)
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
    __dst = (char *)(MEMORY[0x1E0DEE9D8] + 32);
    v135 = MEMORY[0x1E0DEE9D8];
    if (v4 == 1)
      goto LABEL_13;
    v14 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
LABEL_164:
    if (v14 >= 2)
    {
      v126 = *v134;
      v145 = *v134;
      while (1)
      {
        v127 = v14 - 2;
        if (v14 < 2)
          break;
        if (!v126)
          goto LABEL_210;
        v128 = *(_QWORD *)&v10[16 * v127 + 32];
        v129 = *(_QWORD *)&v10[16 * v14 + 24];
        v130 = (char *)(v126 + 40 * v128);
        v131 = (char *)(v126 + 40 * *(_QWORD *)&v10[16 * v14 + 16]);
        v147 = (char *)(v126 + 40 * v129);
        swift_bridgeObjectRetain();
        sub_1BC9DEECC(v130, v131, v147, __dst, v143);
        if (v148)
          goto LABEL_176;
        swift_bridgeObjectRelease();
        if (v129 < v128)
          goto LABEL_199;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v10 = sub_1BCA31BBC((uint64_t)v10);
        if (v127 >= *((_QWORD *)v10 + 2))
          goto LABEL_200;
        v132 = &v10[16 * v127 + 32];
        *(_QWORD *)v132 = v128;
        *((_QWORD *)v132 + 1) = v129;
        v133 = *((_QWORD *)v10 + 2);
        if (v14 > v133)
          goto LABEL_201;
        memmove(&v10[16 * v14 + 16], &v10[16 * v14 + 32], 16 * (v133 - v14));
        *((_QWORD *)v10 + 2) = v133 - 1;
        v14 = v133 - 1;
        v126 = v145;
        if (v133 <= 2)
          goto LABEL_179;
      }
LABEL_198:
      __break(1u);
LABEL_199:
      __break(1u);
LABEL_200:
      __break(1u);
LABEL_201:
      __break(1u);
      goto LABEL_202;
    }
LABEL_179:
    swift_bridgeObjectRelease();
    *(_QWORD *)(v135 + 16) = 0;
    swift_bridgeObjectRelease_n();
    return swift_bridgeObjectRelease();
  }
  v7 = v6 >> 1;
  v8 = sub_1BCAB6048();
  *(_QWORD *)(v8 + 16) = v7;
  v135 = v8;
  __dst = (char *)(v8 + 32);
LABEL_13:
  v11 = 0;
  v12 = *a1;
  v137 = a2 + 6;
  v138 = a2 + 5;
  v10 = (char *)MEMORY[0x1E0DEE9D8];
  v13 = v139;
  v141 = *a1;
  while (2)
  {
    v15 = v11 + 1;
    if (v11 + 1 >= v13)
      goto LABEL_82;
    v16 = *(_QWORD *)(v12 + 40 * v15);
    v17 = a2[2];
    if (!v17)
    {
      v23 = v137;
      v20 = v138;
      goto LABEL_30;
    }
    v18 = *(_QWORD *)(v12 + 40 * v11);
    v19 = a2[4];
    v20 = v138;
    if (v19 != v16)
    {
      v23 = v137;
      if (v17 != 1)
      {
        if (*v138 == v16)
        {
          if (v19 != v18)
          {
            v22 = 1;
LABEL_20:
            v21 = 0;
            if (v17 <= 1)
              v24 = 1;
            else
              v24 = a2[2];
            v25 = v24 - 1;
            while (v17 - 1 != v21)
            {
              if (v25 == v21)
                goto LABEL_196;
              v26 = v138[v21++];
              if (v26 == v18)
                goto LABEL_42;
            }
            v15 = v11 + 2;
            if (v11 + 2 >= v13)
              goto LABEL_74;
            v27 = 1;
            goto LABEL_43;
          }
          v21 = 0;
          v22 = 1;
          goto LABEL_42;
        }
        v28 = 0;
        while (v17 - 2 != v28)
        {
          v29 = v137[v28++];
          if (v29 == v16)
          {
            v22 = v28 + 1;
            if (v19 != v18)
              goto LABEL_20;
            v21 = 0;
            goto LABEL_42;
          }
        }
      }
LABEL_30:
      v15 = v11 + 2;
      if (v11 + 2 >= v13)
        goto LABEL_82;
      v27 = 0;
      goto LABEL_43;
    }
    v21 = 0;
    v22 = 0;
    v23 = v137;
    if (v16 != v18)
      goto LABEL_20;
LABEL_42:
    v27 = v22 < v21;
    v15 = v11 + 2;
    if (v11 + 2 >= v13)
      goto LABEL_73;
LABEL_43:
    if (v17 <= 1)
      v30 = 1;
    else
      v30 = a2[2];
    v31 = v30 - 1;
    if (v13 <= v15 + 1)
      v32 = v15 + 1;
    else
      v32 = v13;
    while (1)
    {
      v33 = *(_QWORD *)(v12 + 40 * v15);
      if (!v17)
        goto LABEL_49;
      v34 = a2[4];
      if (v34 == v33)
      {
        if (v33 != v16)
        {
          v35 = 0;
          goto LABEL_55;
        }
        goto LABEL_49;
      }
      if (v17 != 1)
      {
        if (*v20 != v33)
        {
          v38 = 0;
          while (v17 - 2 != v38)
          {
            v39 = v23[v38++];
            if (v39 == v33)
            {
              if (v34 == v16)
                goto LABEL_49;
              v35 = v38 + 1;
              goto LABEL_55;
            }
          }
          goto LABEL_49;
        }
        if (v34 != v16)
          break;
      }
LABEL_49:
      if (v27)
        goto LABEL_74;
LABEL_50:
      ++v15;
      v16 = v33;
      if (v15 >= v13)
      {
        v15 = v32;
        goto LABEL_73;
      }
    }
    v35 = 1;
LABEL_55:
    v36 = 0;
    do
    {
      if (v17 - 1 == v36)
      {
        if (!v27)
          goto LABEL_82;
        goto LABEL_50;
      }
      if (v31 == v36)
      {
        __break(1u);
LABEL_181:
        __break(1u);
LABEL_182:
        __break(1u);
LABEL_183:
        __break(1u);
LABEL_184:
        __break(1u);
LABEL_185:
        __break(1u);
LABEL_186:
        __break(1u);
LABEL_187:
        __break(1u);
LABEL_188:
        __break(1u);
LABEL_189:
        __break(1u);
LABEL_190:
        __break(1u);
LABEL_191:
        __break(1u);
LABEL_192:
        __break(1u);
LABEL_193:
        __break(1u);
LABEL_194:
        __break(1u);
LABEL_195:
        __break(1u);
LABEL_196:
        __break(1u);
LABEL_197:
        __break(1u);
        goto LABEL_198;
      }
      v37 = v20[v36++];
    }
    while (v37 != v16);
    if (((v27 ^ (v35 > v36 - 1)) & 1) != 0)
      goto LABEL_50;
LABEL_73:
    if (!v27)
      goto LABEL_82;
LABEL_74:
    if (v15 < v11)
      goto LABEL_206;
    if (v11 < v15)
    {
      v40 = 40 * v15;
      v41 = 40 * v11;
      v42 = v15;
      v43 = v11;
      do
      {
        if (v43 != --v42)
        {
          if (!v12)
            goto LABEL_209;
          v44 = v12 + v41;
          v45 = *(_QWORD *)(v12 + v41 + 16);
          v46 = v12 + v40;
          v47 = *(_BYTE *)(v12 + v41 + 24);
          v48 = *(_BYTE *)(v12 + v41 + 25);
          v49 = *(_QWORD *)(v12 + v41 + 32);
          v50 = *(_OWORD *)(v12 + v41);
          v51 = *(_QWORD *)(v12 + v40 - 8);
          v52 = *(_OWORD *)(v12 + v40 - 24);
          *(_OWORD *)v44 = *(_OWORD *)(v12 + v40 - 40);
          *(_OWORD *)(v44 + 16) = v52;
          *(_QWORD *)(v44 + 32) = v51;
          *(_OWORD *)(v46 - 40) = v50;
          *(_QWORD *)(v46 - 24) = v45;
          *(_BYTE *)(v46 - 16) = v47;
          *(_BYTE *)(v46 - 15) = v48;
          *(_QWORD *)(v46 - 8) = v49;
        }
        ++v43;
        v40 -= 40;
        v41 += 40;
      }
      while (v43 < v42);
    }
LABEL_82:
    if (v15 >= v13)
    {
LABEL_114:
      if (v15 < v11)
        goto LABEL_197;
      v140 = v15;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v10 = sub_1BCA317E4(0, *((_QWORD *)v10 + 2) + 1, 1, v10);
      v75 = *((_QWORD *)v10 + 2);
      v74 = *((_QWORD *)v10 + 3);
      v14 = v75 + 1;
      if (v75 >= v74 >> 1)
        v10 = sub_1BCA317E4((char *)(v74 > 1), v75 + 1, 1, v10);
      *((_QWORD *)v10 + 2) = v14;
      v76 = v10 + 32;
      v77 = &v10[16 * v75 + 32];
      *(_QWORD *)v77 = v11;
      *((_QWORD *)v77 + 1) = v140;
      if (v75)
      {
        while (1)
        {
          v78 = v14 - 1;
          if (v14 >= 4)
          {
            v83 = &v76[16 * v14];
            v84 = *((_QWORD *)v83 - 8);
            v85 = *((_QWORD *)v83 - 7);
            v89 = __OFSUB__(v85, v84);
            v86 = v85 - v84;
            if (v89)
              goto LABEL_185;
            v88 = *((_QWORD *)v83 - 6);
            v87 = *((_QWORD *)v83 - 5);
            v89 = __OFSUB__(v87, v88);
            v81 = v87 - v88;
            v82 = v89;
            if (v89)
              goto LABEL_186;
            v90 = v14 - 2;
            v91 = &v76[16 * v14 - 32];
            v93 = *(_QWORD *)v91;
            v92 = *((_QWORD *)v91 + 1);
            v89 = __OFSUB__(v92, v93);
            v94 = v92 - v93;
            if (v89)
              goto LABEL_188;
            v89 = __OFADD__(v81, v94);
            v95 = v81 + v94;
            if (v89)
              goto LABEL_191;
            if (v95 >= v86)
            {
              v113 = &v76[16 * v78];
              v115 = *(_QWORD *)v113;
              v114 = *((_QWORD *)v113 + 1);
              v89 = __OFSUB__(v114, v115);
              v116 = v114 - v115;
              if (v89)
                goto LABEL_195;
              v106 = v81 < v116;
              goto LABEL_151;
            }
          }
          else
          {
            if (v14 != 3)
            {
              v107 = *((_QWORD *)v10 + 4);
              v108 = *((_QWORD *)v10 + 5);
              v89 = __OFSUB__(v108, v107);
              v100 = v108 - v107;
              v101 = v89;
              goto LABEL_145;
            }
            v80 = *((_QWORD *)v10 + 4);
            v79 = *((_QWORD *)v10 + 5);
            v89 = __OFSUB__(v79, v80);
            v81 = v79 - v80;
            v82 = v89;
          }
          if ((v82 & 1) != 0)
            goto LABEL_187;
          v90 = v14 - 2;
          v96 = &v76[16 * v14 - 32];
          v98 = *(_QWORD *)v96;
          v97 = *((_QWORD *)v96 + 1);
          v99 = __OFSUB__(v97, v98);
          v100 = v97 - v98;
          v101 = v99;
          if (v99)
            goto LABEL_190;
          v102 = &v76[16 * v78];
          v104 = *(_QWORD *)v102;
          v103 = *((_QWORD *)v102 + 1);
          v89 = __OFSUB__(v103, v104);
          v105 = v103 - v104;
          if (v89)
            goto LABEL_193;
          if (__OFADD__(v100, v105))
            goto LABEL_194;
          if (v100 + v105 >= v81)
          {
            v106 = v81 < v105;
LABEL_151:
            if (v106)
              v78 = v90;
            goto LABEL_153;
          }
LABEL_145:
          if ((v101 & 1) != 0)
            goto LABEL_189;
          v109 = &v76[16 * v78];
          v111 = *(_QWORD *)v109;
          v110 = *((_QWORD *)v109 + 1);
          v89 = __OFSUB__(v110, v111);
          v112 = v110 - v111;
          if (v89)
            goto LABEL_192;
          if (v112 < v100)
            goto LABEL_15;
LABEL_153:
          v117 = v78 - 1;
          if (v78 - 1 >= v14)
            goto LABEL_181;
          if (!v12)
            goto LABEL_208;
          v118 = &v76[16 * v117];
          v119 = v76;
          v120 = *(_QWORD *)v118;
          v121 = v78;
          v122 = &v119[16 * v78];
          v123 = *((_QWORD *)v122 + 1);
          v144 = (char *)(v12 + 40 * *(_QWORD *)v122);
          v146 = (char *)(v12 + 40 * *(_QWORD *)v118);
          a2 = v143;
          swift_bridgeObjectRetain();
          sub_1BC9DEECC(v146, v144, (char *)(v12 + 40 * v123), __dst, v143);
          if (v148)
          {
LABEL_176:
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            *(_QWORD *)(v135 + 16) = 0;
            goto LABEL_177;
          }
          swift_bridgeObjectRelease();
          if (v123 < v120)
            goto LABEL_182;
          if (v121 > *((_QWORD *)v10 + 2))
            goto LABEL_183;
          v124 = v121;
          *(_QWORD *)v118 = v120;
          v76 = v10 + 32;
          *(_QWORD *)&v10[16 * v117 + 40] = v123;
          v125 = *((_QWORD *)v10 + 2);
          if (v121 >= v125)
            goto LABEL_184;
          v14 = v125 - 1;
          memmove(v122, v122 + 16, 16 * (v125 - 1 - v124));
          *((_QWORD *)v10 + 2) = v125 - 1;
          v12 = v141;
          if (v125 <= 2)
            goto LABEL_15;
        }
      }
      v14 = 1;
LABEL_15:
      v13 = v139;
      v11 = v140;
      if (v140 >= v139)
        goto LABEL_164;
      continue;
    }
    break;
  }
  if (__OFSUB__(v15, v11))
  {
LABEL_202:
    __break(1u);
    goto LABEL_203;
  }
  if (v15 - v11 >= v136)
    goto LABEL_114;
  v53 = v11 + v136;
  if (__OFADD__(v11, v136))
    goto LABEL_204;
  if (v53 >= v13)
    v53 = v13;
  if (v53 >= v11)
  {
    if (v15 != v53)
    {
      v54 = a2[2];
      do
      {
        if (v54)
        {
          v55 = *(_QWORD *)(v12 + 40 * v15);
          v56 = v15;
          do
          {
            v57 = v12 + 40 * v56;
            v58 = (_OWORD *)(v57 - 40);
            v59 = *(_QWORD *)(v57 - 40);
            v60 = a2[4];
            if (v60 == v55)
            {
              if (v55 == v59)
                break;
              v61 = 0;
            }
            else
            {
              if (v54 == 1)
                break;
              if (*v138 == v55)
              {
                if (v60 == v59)
                  break;
                v61 = 1;
              }
              else
              {
                v62 = 0;
                do
                {
                  if (v54 - 2 == v62)
                    goto LABEL_91;
                  v63 = v137[v62++];
                }
                while (v63 != v55);
                if (v60 == v59)
                  break;
                v61 = v62 + 1;
              }
            }
            v64 = 0;
            v65 = v56 - 1;
            do
            {
              if (v54 - 1 == v64)
                goto LABEL_110;
              v66 = a2[v64++ + 5];
            }
            while (v66 != v59);
            if (v61 > v64 - 1)
              break;
LABEL_110:
            if (!v12)
              goto LABEL_207;
            v67 = v12 + 40 * v56;
            v68 = *(_BYTE *)(v67 + 24);
            v69 = *(_BYTE *)(v67 + 25);
            v70 = *(_QWORD *)(v67 + 32);
            v71 = *(_OWORD *)(v57 + 8);
            v72 = *(_OWORD *)(v57 - 24);
            *(_OWORD *)v57 = *v58;
            *(_OWORD *)(v57 + 16) = v72;
            *(_QWORD *)(v57 + 32) = *(_QWORD *)(v57 - 8);
            *(_QWORD *)v58 = v55;
            *(_OWORD *)(v57 - 32) = v71;
            v73 = v12 + 40 * v65;
            *(_BYTE *)(v73 + 24) = v68;
            *(_BYTE *)(v73 + 25) = v69;
            *(_QWORD *)(v73 + 32) = v70;
            v56 = v65;
          }
          while (v65 != v11);
        }
LABEL_91:
        ++v15;
      }
      while (v15 != v53);
      v15 = v53;
    }
    goto LABEL_114;
  }
LABEL_205:
  __break(1u);
LABEL_206:
  __break(1u);
LABEL_207:
  swift_bridgeObjectRelease_n();
  __break(1u);
LABEL_208:
  swift_bridgeObjectRelease_n();
  __break(1u);
LABEL_209:
  swift_bridgeObjectRelease_n();
  __break(1u);
LABEL_210:
  swift_bridgeObjectRelease_n();
  __break(1u);
LABEL_211:
  swift_bridgeObjectRelease_n();
  result = sub_1BCAB65B8();
  __break(1u);
  return result;
}

uint64_t sub_1BC9DFE54(uint64_t *a1, unint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7[2];

  v4 = *a1;
  swift_bridgeObjectRetain_n();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v4 = sub_1BCA31BE4(v4);
  v5 = *(_QWORD *)(v4 + 16);
  v7[0] = v4 + 32;
  v7[1] = v5;
  swift_bridgeObjectRetain();
  sub_1BC9DF42C(v7, a2);
  swift_bridgeObjectRelease();
  *a1 = v4;
  return swift_bridgeObjectRelease_n();
}

uint64_t sub_1BC9DFEF4()
{
  return MEMORY[0x1E0DEB438];
}

uint64_t dispatch thunk of ComponentRangeOrderProvider.componentRangeLowerBoundOrder(flavor:)(char a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(_QWORD))(a3 + 8))(a1 & 1);
}

uint64_t dispatch thunk of TimeBasedDistributionMaxBucketTextSupportProxy.extractMaxBucketInformation(distribution:flavor:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(a4 + 8))(a1, a2 & 1);
}

uint64_t sub_1BC9DFF18()
{
  return type metadata accessor for TimeBasedDistributionMaxBucketTextSupport();
}

uint64_t type metadata accessor for TimeBasedDistributionMaxBucketTextSupport()
{
  uint64_t result;

  result = qword_1EF478A98;
  if (!qword_1EF478A98)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_1BC9DFF5C()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1BCAB5514();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for TimeBasedDistributionMaxBucketTextSupport()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of TimeBasedDistributionMaxBucketTextSupport.__allocating_init(componentRangeOrderProvider:logger:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t initializeBufferWithCopyOfBuffer for TimeBasedDistributionMaxBucketTextSupport.MaxBucketInformation(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for TimeBasedDistribution.DistributionValue()
{
  return swift_bridgeObjectRelease();
}

_QWORD *assignWithCopy for TimeBasedDistributionMaxBucketTextSupport.MaxBucketInformation(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for TimeBasedDistributionMaxBucketTextSupport.MaxBucketInformation(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for TimeBasedDistributionMaxBucketTextSupport.MaxBucketInformation(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 24))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for TimeBasedDistributionMaxBucketTextSupport.MaxBucketInformation(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 24) = 0;
    if (a2)
      *(_QWORD *)(result + 16) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for TimeBasedDistributionMaxBucketTextSupport.MaxBucketInformation()
{
  return &type metadata for TimeBasedDistributionMaxBucketTextSupport.MaxBucketInformation;
}

uint64_t HealthKitDataTypeChartConfiguration.__allocating_init(sampleType:healthStore:logger:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = a1;
  *(_QWORD *)(v6 + 24) = a2;
  v7 = v6 + OBJC_IVAR____TtC19HealthVisualization35HealthKitDataTypeChartConfiguration_logger;
  v8 = sub_1BCAB5514();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v7, a3, v8);
  return v6;
}

_QWORD *sub_1BC9E01DC(char a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  void *v6;
  char v7;
  uint64_t v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v18;
  _QWORD *v19;

  v2 = sub_1BCAB4F74();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a1 & 1) != 0)
    return &unk_1E7543EC0;
  sub_1BC9A649C(0, &qword_1ED6C7100);
  sub_1BC9A649C(0, (unint64_t *)&qword_1ED6C7260);
  v6 = (void *)MEMORY[0x1BCCFADBC]((id)*MEMORY[0x1E0CB5A78]);
  v7 = sub_1BCAB6330();

  if ((v7 & 1) != 0)
  {
    v8 = 2;
  }
  else
  {
    sub_1BCAB4F50();
    v8 = sub_1BCAB4EB4();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  v19 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v10 = 7;
  sub_1BC9BAC5C(0, 7, 0);
  v11 = 0;
  v12 = 0;
  result = v19;
  while (!v12)
  {
    v13 = v11 + v8;
    if (__OFADD__(v11, v8))
    {
      __break(1u);
LABEL_20:
      __break(1u);
LABEL_21:
      __break(1u);
      break;
    }
    v14 = v13 - 1;
    if (__OFSUB__(v13, 1))
      goto LABEL_20;
    v19 = result;
    v16 = result[2];
    v15 = result[3];
    if (v16 >= v15 >> 1)
    {
      sub_1BC9BAC5C(v15 > 1, v16 + 1, 1);
      result = v19;
    }
    result[2] = v16 + 1;
    result[v16 + 4] = v14 % 7;
    v12 = v11 == 6;
    if (v11 == 6)
    {
      v11 = 0;
    }
    else if (__OFADD__(v11++, 1))
    {
      goto LABEL_21;
    }
    if (!--v10)
      return result;
  }
  __break(1u);
  return result;
}

_QWORD *TimeBasedDistributionChartConfiguration.componentRangeLowerBoundOrder(flavor:)(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  _QWORD *result;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v13;
  _QWORD *v14;

  if ((a1 & 1) != 0)
    return &unk_1E7544078;
  v3 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 32))(a2, a3);
  v13 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v4 = 7;
  sub_1BC9BAC5C(0, 7, 0);
  v5 = 0;
  v6 = 0;
  result = v13;
  while (!v6)
  {
    v8 = v5 + v3;
    if (__OFADD__(v5, v3))
    {
      __break(1u);
LABEL_17:
      __break(1u);
LABEL_18:
      __break(1u);
      break;
    }
    v9 = v8 - 1;
    if (__OFSUB__(v8, 1))
      goto LABEL_17;
    v14 = result;
    v11 = result[2];
    v10 = result[3];
    if (v11 >= v10 >> 1)
    {
      sub_1BC9BAC5C(v10 > 1, v11 + 1, 1);
      result = v14;
    }
    result[2] = v11 + 1;
    result[v11 + 4] = v9 % 7;
    v6 = v5 == 6;
    if (v5 == 6)
    {
      v5 = 0;
    }
    else if (__OFADD__(v5++, 1))
    {
      goto LABEL_18;
    }
    if (!--v4)
      return result;
  }
  __break(1u);
  return result;
}

uint64_t HealthKitDataTypeChartConfiguration.init(sampleType:healthStore:logger:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v3 + 16) = a1;
  *(_QWORD *)(v3 + 24) = a2;
  v5 = v3 + OBJC_IVAR____TtC19HealthVisualization35HealthKitDataTypeChartConfiguration_logger;
  v6 = sub_1BCAB5514();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(v5, a3, v6);
  return v3;
}

void HealthKitDataTypeChartConfiguration.accentColor.getter()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  void *v3;
  void *v4;
  id v5;
  id v6;
  id v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  id v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;

  v1 = *(_QWORD *)v0;
  v2 = objc_msgSend(*(id *)(v0 + 24), sel_displayTypeController);
  if (!v2)
  {
    __break(1u);
    goto LABEL_9;
  }
  v3 = v2;
  v4 = *(void **)(v0 + 16);
  v5 = objc_msgSend(v2, sel_displayTypeForObjectType_, v4);

  if (!v5)
  {
LABEL_9:
    __break(1u);
    return;
  }
  v6 = objc_msgSend(v5, sel_displayCategory);

  v7 = objc_msgSend(v6, sel_color);
  if (!v7)
  {
    swift_retain_n();
    v8 = sub_1BCAB54FC();
    v9 = sub_1BCAB61B0();
    if (os_log_type_enabled(v8, v9))
    {
      v10 = swift_slowAlloc();
      v11 = swift_slowAlloc();
      v19 = v11;
      v20 = v1;
      *(_DWORD *)v10 = 136446466;
      swift_getMetatypeMetadata();
      v12 = sub_1BCAB5F28();
      v20 = sub_1BC99BD4C(v12, v13, &v19);
      sub_1BCAB63A8();
      swift_bridgeObjectRelease();
      *(_WORD *)(v10 + 12) = 2080;
      v14 = objc_msgSend(v4, sel_identifier, v19);
      v15 = sub_1BCAB5F04();
      v17 = v16;

      v20 = sub_1BC99BD4C(v15, v17, &v19);
      sub_1BCAB63A8();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1BC989000, v8, v9, "[%{public}s] Unable to find display type for sample type with identifier %s", (uint8_t *)v10, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1BCCFBF5C](v11, -1, -1);
      MEMORY[0x1BCCFBF5C](v10, -1, -1);
    }
    else
    {
      swift_release_n();
    }

    v18 = objc_msgSend((id)objc_opt_self(), sel_blueColor);
  }
}

uint64_t HealthKitDataTypeChartConfiguration.minimumValueToBeUsedForMaximum.getter()
{
  void *v0;
  char v1;

  sub_1BC9A649C(0, &qword_1ED6C7100);
  sub_1BC9A649C(0, (unint64_t *)&qword_1ED6C7260);
  v0 = (void *)MEMORY[0x1BCCFADBC]((id)*MEMORY[0x1E0CB5A78]);
  v1 = sub_1BCAB6330();

  if ((v1 & 1) != 0)
    return 0x3FB999999999999ALL;
  else
    return 0;
}

uint64_t HealthKitDataTypeChartConfiguration.firstWeekdayComponent.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  void *v4;
  char v5;
  uint64_t v6;
  uint64_t v8;

  v0 = sub_1BCAB4F74();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BC9A649C(0, &qword_1ED6C7100);
  sub_1BC9A649C(0, (unint64_t *)&qword_1ED6C7260);
  v4 = (void *)MEMORY[0x1BCCFADBC]((id)*MEMORY[0x1E0CB5A78]);
  v5 = sub_1BCAB6330();

  if ((v5 & 1) != 0)
    return 2;
  sub_1BCAB4F50();
  v6 = sub_1BCAB4EB4();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return v6;
}

uint64_t HealthKitDataTypeChartConfiguration.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC19HealthVisualization35HealthKitDataTypeChartConfiguration_logger;
  v2 = sub_1BCAB5514();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t HealthKitDataTypeChartConfiguration.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC19HealthVisualization35HealthKitDataTypeChartConfiguration_logger;
  v2 = sub_1BCAB5514();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance();
}

void sub_1BC9E0A84()
{
  HealthKitDataTypeChartConfiguration.accentColor.getter();
}

uint64_t sub_1BC9E0AA4()
{
  void *v0;
  char v1;

  sub_1BC9A649C(0, &qword_1ED6C7100);
  sub_1BC9A649C(0, (unint64_t *)&qword_1ED6C7260);
  v0 = (void *)MEMORY[0x1BCCFADBC]((id)*MEMORY[0x1E0CB5A78]);
  v1 = sub_1BCAB6330();

  if ((v1 & 1) != 0)
    return 0x3FB999999999999ALL;
  else
    return 0;
}

uint64_t sub_1BC9E0B50()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  void *v4;
  char v5;
  uint64_t v6;
  uint64_t v8;

  v0 = sub_1BCAB4F74();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BC9A649C(0, &qword_1ED6C7100);
  sub_1BC9A649C(0, (unint64_t *)&qword_1ED6C7260);
  v4 = (void *)MEMORY[0x1BCCFADBC]((id)*MEMORY[0x1E0CB5A78]);
  v5 = sub_1BCAB6330();

  if ((v5 & 1) != 0)
    return 2;
  sub_1BCAB4F50();
  v6 = sub_1BCAB4EB4();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return v6;
}

_QWORD *sub_1BC9E0C60(char a1)
{
  return sub_1BC9E01DC(a1 & 1);
}

uint64_t dispatch thunk of TimeBasedDistributionChartConfiguration.accentColor.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of TimeBasedDistributionChartConfiguration.minimumValueToBeUsedForMaximum.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of TimeBasedDistributionChartConfiguration.firstWeekdayComponent.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t sub_1BC9E0CB8()
{
  return type metadata accessor for HealthKitDataTypeChartConfiguration();
}

uint64_t type metadata accessor for HealthKitDataTypeChartConfiguration()
{
  uint64_t result;

  result = qword_1EF478B58;
  if (!qword_1EF478B58)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_1BC9E0CFC()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1BCAB5514();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for HealthKitDataTypeChartConfiguration()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of HealthKitDataTypeChartConfiguration.__allocating_init(sampleType:healthStore:logger:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 104))();
}

id sub_1BC9E0D8C()
{
  id v0;
  id result;

  v0 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB3578]), sel_init);
  result = objc_msgSend(v0, sel_setFormattingContext_, 2);
  qword_1EF486D50 = (uint64_t)v0;
  return result;
}

uint64_t TimeBasedDistributionChartTextSupportImpl.__allocating_init(healthStore:sampleType:unit:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  swift_allocObject();
  sub_1BC9E13FC((uint64_t)a1, a2, a3);
  v7 = v6;

  return v7;
}

uint64_t TimeBasedDistributionChartTextSupportImpl.init(healthStore:sampleType:unit:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  sub_1BC9E13FC((uint64_t)a1, a2, a3);
  v5 = v4;

  return v5;
}

Swift::String __swiftcall TimeBasedDistributionChartTextSupportImpl.barAnnotation(for:)(HealthVisualization::TimeBasedDistribution::DistributionValue a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  _QWORD *v7;
  id v8;
  void *v9;
  id v10;
  id v11;
  uint64_t v12;
  void *v13;
  void *v14;
  id v15;
  double v16;
  id v17;
  uint64_t v18;
  id v19;
  void *v20;
  char v21;
  id v22;
  uint64_t v23;
  void *v24;
  void *v25;
  Swift::String result;
  _OWORD v27[2];

  if ((*(_BYTE *)(*(_QWORD *)&a1.value.is_nil + 8) & 1) != 0)
  {
    memset(v27, 0, sizeof(v27));
    if (qword_1ED6C7070 != -1)
      swift_once();
    v2 = sub_1BC9A1984(0xD00000000000001BLL, 0x80000001BCAD02F0, 0, (uint64_t)v27, 0xD000000000000015, 0x80000001BCACFF90);
    v4 = v3;
    sub_1BC9A10A0((uint64_t)v27);
    v5 = v2;
    v6 = v4;
  }
  else
  {
    v7 = *(_QWORD **)(*(_QWORD *)&a1.value.is_nil + 16);
    v8 = objc_msgSend(*(id *)(v1 + 24), sel_presentation, a1.value.value);
    v9 = (void *)sub_1BCAB4FC8();
    v10 = objc_msgSend(v8, sel_adjustedValueForDaemonValue_, v9);

    if ((sub_1BC9E1124(0xD00000000000002BLL, 0x80000001BCACD890, v7) & 1) != 0)
    {
      v11 = (id)HKAFibBurdenClampedLowerBoundLocalizedString();
      v12 = sub_1BCAB5F04();
      v14 = v13;

      v5 = v12;
      v6 = v14;
    }
    else
    {
      v15 = *(id *)(v1 + 40);
      objc_msgSend(v10, sel_doubleValue);
      v17 = objc_msgSend((id)objc_opt_self(), sel_quantityWithUnit_doubleValue_, v15, v16);

      v18 = *(_QWORD *)(v1 + 32);
      v19 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D2F820]), sel_init);
      sub_1BC9A649C(0, &qword_1ED6C7100);
      sub_1BC9A649C(0, (unint64_t *)&qword_1ED6C7260);
      v20 = (void *)MEMORY[0x1BCCFADBC]((id)*MEMORY[0x1E0CB5A78]);
      v21 = sub_1BCAB6330();

      if ((v21 & 1) != 0)
        objc_msgSend(v19, sel_setHasSpaceBetweenValueAndUnit_, 0);
      v22 = objc_msgSend(v17, sel_localizedStringForType_parameters_, v18, v19);

      v23 = sub_1BCAB5F04();
      v25 = v24;

      v5 = v23;
      v6 = v25;
    }
  }
  result._object = v6;
  result._countAndFlagsBits = v5;
  return result;
}

uint64_t sub_1BC9E1124(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t result;
  _QWORD *v9;
  uint64_t i;
  uint64_t v11;
  BOOL v12;

  v3 = a3[2];
  if (!v3)
    return 0;
  if (a3[4] == a1 && a3[5] == a2)
    return 1;
  result = sub_1BCAB67C8();
  if ((result & 1) != 0)
    return 1;
  if (v3 == 1)
    return 0;
  v9 = a3 + 7;
  for (i = 1; ; ++i)
  {
    v11 = i + 1;
    if (__OFADD__(i, 1))
      break;
    v12 = *(v9 - 1) == a1 && *v9 == a2;
    if (v12 || (sub_1BCAB67C8() & 1) != 0)
      return 1;
    result = 0;
    v9 += 2;
    if (v11 == v3)
      return result;
  }
  __break(1u);
  return result;
}

uint64_t sub_1BC9E11E8(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  id v5;
  void *v6;
  char v7;
  uint64_t v9;
  uint64_t v10;
  char v11;
  unint64_t v12;
  id v13;
  char v14;

  if (a2 >> 62)
    goto LABEL_20;
  v3 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v3; v3 = sub_1BCAB65DC())
  {
    v4 = a2 & 0xC000000000000001;
    if ((a2 & 0xC000000000000001) == 0)
    {
      v5 = *(id *)(a2 + 32);
      goto LABEL_5;
    }
    while (1)
    {
      v5 = (id)MEMORY[0x1BCCFB0D4](0, a2);
LABEL_5:
      v6 = v5;
      sub_1BC9A649C(0, (unint64_t *)&qword_1ED6C7260);
      v7 = sub_1BCAB6330();

      if ((v7 & 1) != 0)
      {
LABEL_6:
        swift_bridgeObjectRelease();
        return 1;
      }
      if (v3 == 1)
        goto LABEL_18;
      if (v4)
        break;
      v4 = 5;
      while (1)
      {
        v12 = v4 - 3;
        if (__OFADD__(v4 - 4, 1))
          break;
        v13 = *(id *)(a2 + 8 * v4);
        v14 = sub_1BCAB6330();

        if ((v14 & 1) != 0)
          goto LABEL_6;
        ++v4;
        if (v12 == v3)
          goto LABEL_18;
      }
      __break(1u);
    }
    v9 = 1;
    while (1)
    {
      MEMORY[0x1BCCFB0D4](v9, a2);
      v10 = v9 + 1;
      if (__OFADD__(v9, 1))
        break;
      v11 = sub_1BCAB6330();
      swift_unknownObjectRelease();
      if ((v11 & 1) != 0)
        goto LABEL_6;
      ++v9;
      if (v10 == v3)
        goto LABEL_18;
    }
    __break(1u);
LABEL_20:
    swift_bridgeObjectRetain();
  }
LABEL_18:
  swift_bridgeObjectRelease();
  return 0;
}

id *TimeBasedDistributionChartTextSupportImpl.deinit()
{
  id *v0;

  return v0;
}

uint64_t TimeBasedDistributionChartTextSupportImpl.__deallocating_deinit()
{
  id *v0;

  return swift_deallocClassInstance();
}

uint64_t sub_1BC9E13DC(__int16 a1, uint64_t a2, double a3)
{
  return TimeBasedDistributionChartTextSupportImpl.barAnnotation(for:)(*(HealthVisualization::TimeBasedDistribution::DistributionValue *)(&a1 - 4))._countAndFlagsBits;
}

void sub_1BC9E13FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  id v7;
  id v8;
  id v9;
  void *v10;
  id v11;

  v7 = objc_msgSend((id)objc_opt_self(), sel_sharedInstanceForHealthStore_, a1);
  v8 = objc_msgSend(v7, sel_createHKUnitPreferenceController);

  v3[2] = v8;
  v9 = objc_msgSend((id)objc_opt_self(), sel_sharedInstanceForHealthStore_, a1);
  if (v9)
  {
    v10 = v9;
    v11 = objc_msgSend(v9, sel_displayTypeForObjectType_, a2);

    if (v11)
    {
      v3[3] = v11;
      v3[4] = a2;
      v3[5] = a3;
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t dispatch thunk of TimeBasedDistributionChartTextSupport.barAnnotation(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t type metadata accessor for TimeBasedDistributionChartTextSupportImpl()
{
  return objc_opt_self();
}

uint64_t method lookup function for TimeBasedDistributionChartTextSupportImpl()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of TimeBasedDistributionChartTextSupportImpl.__allocating_init(healthStore:sampleType:unit:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

__C::CGRect __swiftcall DiagramData.diagramBounds(forceNonZeroSize:)(Swift::Bool forceNonZeroSize)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t i;
  uint64_t v5;
  double v6;
  double v7;
  double v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  CGFloat *v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  uint64_t v27;
  CGRect v28;
  CGRect v29;
  CGRect v30;
  CGRect v31;
  __C::CGRect result;
  CGRect v33;
  CGRect v34;

  if ((*(_BYTE *)(v1 + 32) & 1) == 0)
  {
    v8 = *(double *)(v1 + 16);
    v9 = *(double *)(v1 + 24);
    v6 = *(double *)v1;
    v7 = *(double *)(v1 + 8);
    if (v8 != 0.0)
      goto LABEL_22;
    goto LABEL_19;
  }
  v3 = *(_QWORD *)(*(_QWORD *)(v1 + 40) + 16);
  if (v3)
  {
    v27 = MEMORY[0x1E0DEE9D8];
    swift_bridgeObjectRetain_n();
    for (i = 0; i != v3; ++i)
    {
      v5 = swift_bridgeObjectRetain();
      sub_1BC9E347C(v5);
    }
    swift_bridgeObjectRelease_n();
    v6 = *MEMORY[0x1E0C9D628];
    v7 = *(double *)(MEMORY[0x1E0C9D628] + 8);
    v8 = *(double *)(MEMORY[0x1E0C9D628] + 16);
    v9 = *(double *)(MEMORY[0x1E0C9D628] + 24);
    v10 = *(_QWORD *)(v27 + 16);
    if (v10)
    {
      swift_bridgeObjectRetain();
      v11 = 0;
      v25 = v7;
      v26 = v6;
      v23 = v9;
      v24 = v8;
      do
      {
        v12 = *(_QWORD *)(v27 + 32 + 48 * v11 + 8);
        v13 = *(_QWORD *)(v12 + 16);
        x = 0.0;
        y = 0.0;
        width = 0.0;
        height = 0.0;
        if (v13)
        {
          swift_bridgeObjectRetain();
          v18 = (CGFloat *)(v12 + 40);
          y = v25;
          x = v26;
          height = v23;
          width = v24;
          do
          {
            v34.origin.x = *(v18 - 1);
            v34.origin.y = *v18;
            v34.size.width = 0.0;
            v34.size.height = 0.0;
            v30.origin.x = x;
            v30.origin.y = y;
            v30.size.width = width;
            v30.size.height = height;
            v31 = CGRectUnion(v30, v34);
            x = v31.origin.x;
            y = v31.origin.y;
            width = v31.size.width;
            height = v31.size.height;
            v18 += 2;
            --v13;
          }
          while (v13);
          swift_bridgeObjectRelease();
        }
        ++v11;
        v28.origin.x = v6;
        v28.origin.y = v7;
        v28.size.width = v8;
        v28.size.height = v9;
        v33.origin.x = x;
        v33.origin.y = y;
        v33.size.width = width;
        v33.size.height = height;
        v29 = CGRectUnion(v28, v33);
        v6 = v29.origin.x;
        v7 = v29.origin.y;
        v8 = v29.size.width;
        v9 = v29.size.height;
      }
      while (v11 != v10);
      swift_bridgeObjectRelease_n();
      if (v8 != 0.0)
        goto LABEL_22;
    }
    else
    {
      swift_bridgeObjectRelease();
      if (v8 != 0.0)
        goto LABEL_22;
    }
LABEL_19:
    if (v9 == 0.0 && forceNonZeroSize)
    {
      swift_beginAccess();
      v8 = *(double *)&qword_1EF478CA8;
      v9 = unk_1EF478CB0;
      v6 = v6 - *(double *)&qword_1EF478CA8 * 0.5;
      v7 = v7 - unk_1EF478CB0 * 0.5;
    }
    goto LABEL_22;
  }
  v6 = 0.0;
  v7 = 0.0;
  v8 = 0.0;
  v9 = 0.0;
  if (forceNonZeroSize)
  {
    swift_beginAccess();
    v8 = *(double *)&qword_1EF478CA8;
    v9 = unk_1EF478CB0;
    v6 = 0.0 - *(double *)&qword_1EF478CA8 * 0.5;
    v7 = 0.0 - unk_1EF478CB0 * 0.5;
  }
LABEL_22:
  v19 = v6;
  v20 = v7;
  v21 = v8;
  v22 = v9;
  result.size.height = v22;
  result.size.width = v21;
  result.origin.y = v20;
  result.origin.x = v19;
  return result;
}

uint64_t DiagramDataGroup.points.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t DiagramDataGroup.annotation.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t DiagramDataGroup.supplementaryAnnotation.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

void __swiftcall DiagramDataGroup.init(points:annotation:supplementaryAnnotation:)(HealthVisualization::DiagramDataGroup *__return_ptr retstr, Swift::OpaquePointer points, Swift::String_optional annotation, Swift::String_optional supplementaryAnnotation)
{
  retstr->points = points;
  retstr->annotation = annotation;
  retstr->supplementaryAnnotation = supplementaryAnnotation;
}

uint64_t sub_1BC9E1824()
{
  _BYTE *v0;
  unint64_t v1;

  v1 = 0x697461746F6E6E61;
  if (*v0 != 1)
    v1 = 0xD000000000000017;
  if (*v0)
    return v1;
  else
    return 0x73746E696F70;
}

uint64_t sub_1BC9E1884@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1BC9E57D0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1BC9E18A8()
{
  sub_1BC9E4C98();
  return sub_1BCAB68D0();
}

uint64_t sub_1BC9E18D0()
{
  sub_1BC9E4C98();
  return sub_1BCAB68DC();
}

uint64_t DiagramDataGroup.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[5];
  char v14;
  char v15;
  char v16;
  uint64_t v17;

  sub_1BC9ACE04(0, &qword_1ED6C6F18, (uint64_t (*)(void))sub_1BC9E4C98, (uint64_t)&type metadata for DiagramDataGroup.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v7 = (char *)v13 - v6;
  v9 = *v1;
  v8 = v1[1];
  v13[2] = v1[2];
  v13[3] = v8;
  v10 = v1[3];
  v13[0] = v1[4];
  v13[1] = v10;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BC9E4C98();
  sub_1BCAB68B8();
  v17 = v9;
  v16 = 0;
  sub_1BC998AB0(0, &qword_1ED6C74B8, (uint64_t (*)(uint64_t))type metadata accessor for CGPoint, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
  sub_1BC9E4CDC(&qword_1ED6C6E38, &qword_1ED6C6EA8, MEMORY[0x1E0C9BA20], MEMORY[0x1E0DEAF10]);
  v11 = v13[4];
  sub_1BCAB6774();
  if (!v11)
  {
    v15 = 1;
    sub_1BCAB6708();
    v14 = 2;
    sub_1BCAB6708();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t DiagramDataGroup.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char v27;
  char v28;
  uint64_t v29;

  sub_1BC9ACE04(0, &qword_1ED6C74F0, (uint64_t (*)(void))sub_1BC9E4C98, (uint64_t)&type metadata for DiagramDataGroup.CodingKeys, MEMORY[0x1E0DED048]);
  v25 = v5;
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v23 - v7;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BC9E4C98();
  sub_1BCAB68AC();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v9 = v6;
  sub_1BC998AB0(0, &qword_1ED6C74B8, (uint64_t (*)(uint64_t))type metadata accessor for CGPoint, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
  v28 = 0;
  sub_1BC9E4CDC(&qword_1ED6C74C0, &qword_1ED6C74D8, MEMORY[0x1E0C9BA30], MEMORY[0x1E0DEAF40]);
  v10 = v25;
  sub_1BCAB66E4();
  v11 = v29;
  v27 = 1;
  swift_bridgeObjectRetain();
  v12 = sub_1BCAB6678();
  v14 = v13;
  v23 = v12;
  v26 = 2;
  swift_bridgeObjectRetain();
  v24 = v14;
  v15 = sub_1BCAB6678();
  v17 = v16;
  v18 = *(void (**)(char *, uint64_t))(v9 + 8);
  v19 = v15;
  v18(v8, v10);
  swift_bridgeObjectRetain();
  v20 = v23;
  v21 = v24;
  *a2 = v11;
  a2[1] = v20;
  a2[2] = v21;
  a2[3] = v19;
  a2[4] = v17;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1BC9E1D64@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return DiagramDataGroup.init(from:)(a1, a2);
}

uint64_t sub_1BC9E1D78(_QWORD *a1)
{
  return DiagramDataGroup.encode(to:)(a1);
}

HealthVisualization::DiagramDataKey_optional __swiftcall DiagramDataKey.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  unint64_t v3;
  HealthVisualization::DiagramDataKey_optional result;
  char v5;

  v2 = v1;
  v3 = sub_1BCAB6654();
  result.value = swift_bridgeObjectRelease();
  v5 = 3;
  if (v3 < 3)
    v5 = v3;
  *v2 = v5;
  return result;
}

uint64_t DiagramDataKey.rawValue.getter()
{
  _BYTE *v0;
  unint64_t v1;

  v1 = 0xD000000000000012;
  if (*v0 != 1)
    v1 = 0x636E657265666552;
  if (*v0)
    return v1;
  else
    return 0x746E65746E6F43;
}

uint64_t sub_1BC9E1E54()
{
  sub_1BCAB6870();
  sub_1BCAB5F40();
  swift_bridgeObjectRelease();
  return sub_1BCAB6894();
}

uint64_t sub_1BC9E1F04()
{
  sub_1BCAB5F40();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1BC9E1F90()
{
  sub_1BCAB6870();
  sub_1BCAB5F40();
  swift_bridgeObjectRelease();
  return sub_1BCAB6894();
}

HealthVisualization::DiagramDataKey_optional sub_1BC9E203C(Swift::String *a1)
{
  return DiagramDataKey.init(rawValue:)(*a1);
}

void sub_1BC9E2048(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xE700000000000000;
  v4 = 0x80000001BCACD8D0;
  v5 = 0xD000000000000012;
  if (v2 != 1)
  {
    v5 = 0x636E657265666552;
    v4 = 0xED0000656E694C65;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0x746E65746E6F43;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_1BC9E20B8()
{
  sub_1BC9E5A44();
  return sub_1BCAB5FE8();
}

uint64_t sub_1BC9E2114()
{
  sub_1BC9E5A44();
  return sub_1BCAB5FD0();
}

uint64_t sub_1BC9E2160(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1BC99A9A0(*a1, *a2);
}

__n128 DiagramData.dataModelSpace.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;
  __n128 result;
  __int128 v4;

  v2 = *(_BYTE *)(v1 + 32);
  result = *(__n128 *)v1;
  v4 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(_OWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 32) = v2;
  return result;
}

uint64_t DiagramData.dataGroups.getter()
{
  return swift_bridgeObjectRetain();
}

void __swiftcall DiagramData.init(dataModelSpace:dataGroups:)(HealthVisualization::DiagramData *__return_ptr retstr, __C::CGRect_optional *dataModelSpace, Swift::OpaquePointer dataGroups)
{
  Swift::Bool v5;
  CGSize v6;
  _OWORD v7[2];
  Swift::Bool v8;

  sub_1BC9C83F0((uint64_t)dataModelSpace, (uint64_t)v7);
  v5 = v8;
  v6 = (CGSize)v7[1];
  retstr->dataModelSpace.value.origin = (CGPoint)v7[0];
  retstr->dataModelSpace.value.size = v6;
  retstr->dataModelSpace.is_nil = v5;
  retstr->dataGroups = dataGroups;
}

double DiagramData.init(dataModelSpace:dataGroups:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  char v5;
  double result;
  __int128 v7;
  _OWORD v8[2];
  char v9;

  sub_1BC9C83F0(a1, (uint64_t)v8);
  v5 = v9;
  result = *(double *)v8;
  v7 = v8[1];
  *(_OWORD *)a3 = v8[0];
  *(_OWORD *)(a3 + 16) = v7;
  *(_BYTE *)(a3 + 32) = v5;
  *(_QWORD *)(a3 + 40) = a2;
  return result;
}

__C::CGRect __swiftcall CGRect.paddedIfZeroSize(_:)(Swift::Bool a1)
{
  double v1;
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  __C::CGRect result;

  v5 = v2;
  v6 = v1;
  if (v3 == 0.0 && v4 == 0.0 && a1)
  {
    swift_beginAccess();
    v3 = *(double *)&qword_1EF478CA8;
    v4 = unk_1EF478CB0;
    v6 = v6 - *(double *)&qword_1EF478CA8 * 0.5;
    v5 = v5 - unk_1EF478CB0 * 0.5;
  }
  v7 = v6;
  v8 = v5;
  result.size.height = v4;
  result.size.width = v3;
  result.origin.y = v8;
  result.origin.x = v7;
  return result;
}

double static DiagramData.computedBounds(points:startAtZero:)(uint64_t a1, char a2)
{
  uint64_t v2;
  double *v4;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  double x;
  CGFloat *v9;
  CGRect v11;
  CGRect v12;
  CGRect v13;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
    return 0.0;
  if ((a2 & 1) != 0)
  {
    v4 = (double *)(a1 + 32);
    y = 0.0;
    width = 0.0;
    height = 0.0;
  }
  else
  {
    v4 = (double *)MEMORY[0x1E0C9D628];
    y = *(double *)(MEMORY[0x1E0C9D628] + 8);
    width = *(double *)(MEMORY[0x1E0C9D628] + 16);
    height = *(double *)(MEMORY[0x1E0C9D628] + 24);
  }
  x = *v4;
  swift_bridgeObjectRetain();
  v9 = (CGFloat *)(a1 + 40);
  do
  {
    v13.origin.x = *(v9 - 1);
    v13.origin.y = *v9;
    v13.size.width = 0.0;
    v13.size.height = 0.0;
    v11.origin.x = x;
    v11.origin.y = y;
    v11.size.width = width;
    v11.size.height = height;
    v12 = CGRectUnion(v11, v13);
    x = v12.origin.x;
    y = v12.origin.y;
    width = v12.size.width;
    height = v12.size.height;
    v9 += 2;
    --v2;
  }
  while (v2);
  swift_bridgeObjectRelease();
  return x;
}

uint64_t static DiagramData.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = *(_QWORD **)(a1 + 40);
  v3 = *(_QWORD **)(a2 + 40);
  if ((*(_BYTE *)(a1 + 32) & 1) == 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 1) != 0 || !CGRectEqualToRect(*(CGRect *)a1, *(CGRect *)a2))
      return 0;
    return sub_1BC9A9930(v2, v3);
  }
  if (*(_BYTE *)(a2 + 32))
    return sub_1BC9A9930(v2, v3);
  return 0;
}

uint64_t sub_1BC9E23D4()
{
  _BYTE *v0;

  if (*v0)
    return 0x756F724761746164;
  else
    return 0x65646F4D61746164;
}

uint64_t sub_1BC9E2420@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1BC9E5924(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1BC9E2444()
{
  sub_1BC9E4D74();
  return sub_1BCAB68D0();
}

uint64_t sub_1BC9E246C()
{
  sub_1BC9E4D74();
  return sub_1BCAB68DC();
}

uint64_t DiagramData.encode(to:)(_QWORD *a1)
{
  __int128 *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;

  sub_1BC9ACE04(0, &qword_1ED6C6F10, (uint64_t (*)(void))sub_1BC9E4D74, (uint64_t)&type metadata for DiagramData.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v4 = v3;
  v16 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v13 - v5;
  v15 = *v1;
  v7 = *((_QWORD *)v1 + 2);
  v8 = *((_QWORD *)v1 + 3);
  v9 = *((_BYTE *)v1 + 32);
  v14 = *((_QWORD *)v1 + 5);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BC9E4D74();
  sub_1BCAB68B8();
  v18 = v15;
  v19 = v7;
  v20 = v8;
  v21 = v9;
  v22 = 0;
  type metadata accessor for CGRect(0);
  sub_1BC996948(&qword_1ED6C6EA0, (uint64_t (*)(uint64_t))type metadata accessor for CGRect, MEMORY[0x1E0C9B9C0]);
  v10 = v17;
  sub_1BCAB6738();
  if (v10)
    return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v6, v4);
  v12 = v16;
  *(_QWORD *)&v18 = v14;
  v22 = 1;
  sub_1BC998AB0(0, &qword_1ED6C74A8, (uint64_t (*)(uint64_t))sub_1BC9BD354, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
  sub_1BC9E4DB8();
  sub_1BCAB6774();
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v6, v4);
}

uint64_t DiagramData.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 v23;
  int v24;
  char v25;

  v18 = a2;
  sub_1BC9ACE04(0, &qword_1ED6C74E8, (uint64_t (*)(void))sub_1BC9E4D74, (uint64_t)&type metadata for DiagramData.CodingKeys, MEMORY[0x1E0DED048]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v16 - v7;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BC9E4D74();
  sub_1BCAB68AC();
  if (!v2)
  {
    v9 = v6;
    v10 = v18;
    type metadata accessor for CGRect(0);
    v25 = 0;
    sub_1BC996948(&qword_1ED6C74C8, (uint64_t (*)(uint64_t))type metadata accessor for CGRect, MEMORY[0x1E0C9B9E0]);
    sub_1BCAB66A8();
    v11 = v20;
    v12 = v21;
    v16 = v22;
    v17 = v19;
    v24 = v23;
    sub_1BC998AB0(0, &qword_1ED6C74A8, (uint64_t (*)(uint64_t))sub_1BC9BD354, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
    v25 = 1;
    sub_1BC9E4ED8();
    sub_1BCAB66E4();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v8, v5);
    v14 = v19;
    *(_QWORD *)v10 = v17;
    *(_QWORD *)(v10 + 8) = v11;
    v15 = v16;
    *(_QWORD *)(v10 + 16) = v12;
    *(_QWORD *)(v10 + 24) = v15;
    *(_BYTE *)(v10 + 32) = v24;
    *(_QWORD *)(v10 + 40) = v14;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_1BC9E2870@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return DiagramData.init(from:)(a1, a2);
}

uint64_t sub_1BC9E2884(_QWORD *a1)
{
  return DiagramData.encode(to:)(a1);
}

uint64_t sub_1BC9E2898(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = *(_QWORD **)(a1 + 40);
  v3 = *(_QWORD **)(a2 + 40);
  if ((*(_BYTE *)(a1 + 32) & 1) == 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 1) != 0 || !CGRectEqualToRect(*(CGRect *)a1, *(CGRect *)a2))
      return 0;
    return sub_1BC9A9930(v2, v3);
  }
  if (*(_BYTE *)(a2 + 32))
    return sub_1BC9A9930(v2, v3);
  return 0;
}

double static CGSize.smallNonZeroWidth.getter()
{
  return 0.01;
}

double static CGSize.smallNonZeroHeight.getter()
{
  return 0.01;
}

double static CGSize.smallNonZero.getter()
{
  swift_beginAccess();
  return *(double *)&qword_1EF478CA8;
}

uint64_t static CGSize.smallNonZero.setter(double a1, double a2)
{
  uint64_t result;

  result = swift_beginAccess();
  qword_1EF478CA8 = *(_QWORD *)&a1;
  unk_1EF478CB0 = *(_QWORD *)&a2;
  return result;
}

uint64_t (*static CGSize.smallNonZero.modify())()
{
  swift_beginAccess();
  return j__swift_endAccess;
}

uint64_t sub_1BC9E29E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  int v4;
  char v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(v0 + 40);
  if (!*(_QWORD *)(v1 + 16))
    return 0;
  v2 = *(_QWORD *)(v1 + 32);
  result = sub_1BC9E4A98(v2);
  if ((v5 & 1) == 0)
  {
    if (*(_DWORD *)(v2 + 36) == v4)
    {
      if (result == 1 << *(_BYTE *)(v2 + 32))
        return 0;
      sub_1BC9E4B20(result, v4, v2, (uint64_t)&v7);
      if (*(_QWORD *)(v7 + 16))
        v6 = *(_QWORD *)(v7 + 32);
      else
        v6 = 0;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v6;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1BC9E2ABC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;

  v1 = *(_QWORD *)(v0 + 40);
  v2 = *(_QWORD *)(v1 + 16);
  if (!v2)
    return v2;
  swift_bridgeObjectRetain_n();
  v3 = 0;
  while (!*(_QWORD *)(*(_QWORD *)(v1 + 8 * v3 + 32) + 16))
  {
LABEL_3:
    if (v2 == ++v3)
    {
      v2 = 0;
      goto LABEL_9;
    }
  }
  swift_bridgeObjectRetain();
  sub_1BC9A2C2C(2u);
  if ((v4 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_3;
  }
  swift_bridgeObjectRelease();
  v2 = 1;
LABEL_9:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t sub_1BC9E2B64()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t i;
  uint64_t v4;
  unint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(_QWORD *)(v0 + 40);
  v2 = *(_QWORD *)(v1 + 16);
  if (!v2)
    return 0;
  swift_bridgeObjectRetain();
  for (i = 0; i != v2; ++i)
  {
    v4 = *(_QWORD *)(v1 + 8 * i + 32);
    if (*(_QWORD *)(v4 + 16))
    {
      swift_bridgeObjectRetain();
      v5 = sub_1BC9A2C2C(2u);
      if ((v6 & 1) != 0)
      {
        v7 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 40 * v5 + 16);
        swift_bridgeObjectRelease();
        if (v7)
        {
          v8 = 1;
          goto LABEL_10;
        }
      }
      else
      {
        swift_bridgeObjectRelease();
      }
    }
  }
  v8 = 0;
LABEL_10:
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t DiagramFactory.__allocating_init(hbxViewControllerFactory:)(uint64_t a1)
{
  uint64_t result;

  result = swift_allocObject();
  *(_QWORD *)(result + 16) = a1;
  return result;
}

uint64_t DiagramFactory.init(hbxViewControllerFactory:)(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return v1;
}

uint64_t sub_1BC9E2C58(uint64_t a1, uint64_t a2, __int128 *a3)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  char v35;
  _OWORD v36[2];
  char v37;
  uint64_t v38;
  _QWORD v39[3];
  uint64_t v40;
  uint64_t v41;

  v3 = *(_BYTE *)(a2 + 32);
  v4 = *(_QWORD *)(a2 + 40);
  v5 = *((_QWORD *)a3 + 10);
  v6 = *((_BYTE *)a3 + 88);
  v7 = *(_OWORD *)(a2 + 16);
  v36[0] = *(_OWORD *)a2;
  v36[1] = v7;
  v37 = v3;
  v38 = v4;
  v8 = a3[1];
  v29 = *a3;
  v30 = v8;
  v9 = a3[3];
  v31 = a3[2];
  v32 = v9;
  v33 = a3[4];
  v34 = v5;
  v35 = v6;
  sub_1BC9E2DB0((uint64_t)v36, (uint64_t)&v29);
  v10 = v40;
  v11 = v41;
  __swift_project_boxed_opaque_existential_1(v39, v40);
  *(_QWORD *)&v29 = (*(double (**)(uint64_t, uint64_t))(v11 + 8))(v10, v11);
  *((_QWORD *)&v29 + 1) = v12;
  *(_QWORD *)&v30 = v13;
  *((_QWORD *)&v30 + 1) = v14;
  LOBYTE(v31) = 0;
  v15 = v40;
  v16 = v41;
  __swift_project_boxed_opaque_existential_1(v39, v40);
  v17 = (*(double (**)(uint64_t, uint64_t))(v16 + 16))(v15, v16);
  v19 = v18;
  v21 = v20;
  v23 = v22;
  v24 = v40;
  v25 = v41;
  __swift_project_boxed_opaque_existential_1(v39, v40);
  v26 = (*(uint64_t (**)(uint64_t, uint64_t))(v25 + 24))(v24, v25);
  sub_1BC9C8DBC((uint64_t)&v29, v26, v27, v17, v19, v21, v23);
  swift_release();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v39);
}

void sub_1BC9E2DB0(uint64_t a1, uint64_t a2)
{
  __asm { BR              X12 }
}

uint64_t sub_1BC9E2E24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int16 v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t result;
  uint64_t *v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  __int16 v24;
  char v25;
  _BYTE v26[32];
  uint64_t v27;

  v19 = v9;
  v20 = v11;
  v21 = v10;
  v22 = a3;
  v23 = v12;
  v24 = WORD2(v12);
  v25 = BYTE6(v12);
  *(_QWORD *)(v14 - 192) = v7;
  *(_QWORD *)(v14 - 184) = v6;
  *(_QWORD *)(v14 - 176) = v5;
  *(_QWORD *)(v14 - 168) = v4;
  *(_BYTE *)(v14 - 160) = v13;
  *(_QWORD *)(v14 - 152) = v8;
  v15 = *(void **)(v3 + 16);
  v16 = type metadata accessor for DiagramBar();
  memset(v26, 0, sizeof(v26));
  v27 = 0;
  swift_allocObject();
  swift_bridgeObjectRetain();
  result = DiagramBar.init(barDiagramConfig:barData:hbxViewControllerFactory:customMetricsFactory:)((uint64_t)&v19, v14 - 192, v15, (uint64_t)v26);
  v18[3] = v16;
  v18[4] = (uint64_t)&protocol witness table for DiagramBar;
  *v18 = result;
  return result;
}

uint64_t sub_1BC9E323C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v15;

  v7 = v0;
  v8 = v1;
  v9 = v2;
  v10 = v3;
  v11 = v4;
  v12 = type metadata accessor for DiagramHeartRateRecovery();
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 72) = 0;
  *(_QWORD *)(v13 + 80) = 0;
  *(_DWORD *)(v13 + 16) = v5;
  *(_QWORD *)(v13 + 24) = v10;
  *(_QWORD *)(v13 + 32) = v9;
  *(_QWORD *)(v13 + 40) = v8;
  *(_QWORD *)(v13 + 48) = v7;
  *(_BYTE *)(v13 + 56) = v6;
  *(_QWORD *)(v13 + 64) = v11;
  v15[3] = v12;
  v15[4] = (uint64_t)&protocol witness table for DiagramHeartRateRecovery;
  *v15 = v13;
  return swift_bridgeObjectRetain();
}

uint64_t sub_1BC9E32D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>)
{
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  CGFloat v17;
  double v18;
  CGFloat v19;
  double v20;
  CGFloat v21;
  double v22;
  CGFloat v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  double v27;
  double v28;
  CGFloat v29;
  CGFloat v30;
  CGFloat v31;
  __int128 v32;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  char v40;
  _OWORD v41[2];
  char v42;
  uint64_t v43;
  _QWORD v44[3];
  uint64_t v45;
  uint64_t v46;

  v8 = *(_BYTE *)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 40);
  v10 = *(_QWORD *)(a2 + 80);
  v11 = *(_BYTE *)(a2 + 88);
  v12 = *(_OWORD *)(a1 + 16);
  v41[0] = *(_OWORD *)a1;
  v41[1] = v12;
  v42 = v8;
  v43 = v9;
  v13 = *(_OWORD *)(a2 + 16);
  v34 = *(_OWORD *)a2;
  v35 = v13;
  v14 = *(_OWORD *)(a2 + 48);
  v36 = *(_OWORD *)(a2 + 32);
  v37 = v14;
  v38 = *(_OWORD *)(a2 + 64);
  v39 = v10;
  v40 = v11;
  sub_1BC9E2DB0((uint64_t)v41, (uint64_t)&v34);
  v15 = v45;
  v16 = v46;
  __swift_project_boxed_opaque_existential_1(v44, v45);
  v17 = (*(double (**)(uint64_t, uint64_t))(v16 + 8))(v15, v16);
  v19 = v18;
  v21 = v20;
  v23 = v22;
  v24 = v45;
  v25 = v46;
  __swift_project_boxed_opaque_existential_1(v44, v45);
  v26 = (*(double (**)(uint64_t, uint64_t))(v25 + 16))(v24, v25);
  v28 = UIEdgeInsetsInsetRect(0.0, 0.0, a4, a5, v26, v27);
  sub_1BC9C9D60(&v34, v17, v19, v21, v23, v28, v29, v30, v31);
  *(_QWORD *)a3 = 0;
  v32 = v35;
  *(_OWORD *)(a3 + 8) = v34;
  *(_OWORD *)(a3 + 24) = v32;
  *(_OWORD *)(a3 + 40) = v36;
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v44);
}

uint64_t DiagramFactory.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t DiagramFactory.__deallocating_deinit()
{
  uint64_t v0;

  return swift_deallocClassInstance();
}

uint64_t sub_1BC9E347C(uint64_t result)
{
  uint64_t v1;
  int64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  uint64_t v6;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int64_t v25;
  unint64_t v26;
  unint64_t v27;
  int64_t v28;
  unint64_t v29;
  uint64_t *v30;
  BOOL v31;
  int64_t v32;
  uint64_t v33;
  int64_t v34;
  unint64_t v35;
  int64_t v36;
  int64_t v37;
  int64_t v38;
  _QWORD *v39;
  int64_t v40;
  uint64_t v41;
  unint64_t v42;
  _QWORD *v43;
  unint64_t v44;
  uint64_t v45;
  int64_t v46;
  uint64_t v47;
  int64_t v48;
  uint64_t v49;
  uint64_t v50;
  int64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD v54[3];
  uint64_t v55;
  unint64_t v56;

  v2 = *(_QWORD *)(result + 16);
  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v6 = result;
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || (v8 = v3[3] >> 1, v8 < v5))
  {
    if (v4 <= v5)
      v9 = v4 + v2;
    else
      v9 = v4;
    v3 = sub_1BC9D95B0(isUniquelyReferenced_nonNull_native, v9, 1, v3);
    v8 = v3[3] >> 1;
  }
  v10 = v3[2];
  v11 = v8 - v10;
  result = (uint64_t)sub_1BC9E4618(v54, (uint64_t)&v3[6 * v10 + 4], v8 - v10, v6);
  if (result < v2)
    goto LABEL_15;
  if (result)
  {
    v13 = v3[2];
    v14 = __OFADD__(v13, result);
    v15 = v13 + result;
    if (v14)
    {
      __break(1u);
      goto LABEL_51;
    }
    v3[2] = v15;
  }
  if (result != v11)
    goto LABEL_13;
LABEL_16:
  v2 = v3[2];
  v50 = v54[0];
  v49 = v54[1];
  v12 = v55;
  v47 = v54[2];
  if (!v56)
  {
LABEL_51:
    v33 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      return result;
    }
    v32 = (unint64_t)(v47 + 64) >> 6;
    if (v33 >= v32)
      goto LABEL_13;
    v44 = *(_QWORD *)(v49 + 8 * v33);
    if (!v44)
    {
      v45 = v12 + 2;
      if (v12 + 2 >= v32)
        goto LABEL_13;
      v44 = *(_QWORD *)(v49 + 8 * v45);
      if (v44)
      {
LABEL_60:
        v33 = v45;
      }
      else
      {
        if (v12 + 3 >= v32)
          goto LABEL_13;
        v44 = *(_QWORD *)(v49 + 8 * (v12 + 3));
        if (!v44)
          goto LABEL_66;
        v33 = v12 + 3;
      }
    }
LABEL_54:
    v16 = (v44 - 1) & v44;
    v17 = __clz(__rbit64(v44)) + (v33 << 6);
    v52 = v33;
    goto LABEL_18;
  }
  v16 = (v56 - 1) & v56;
  v52 = v55;
  v17 = __clz(__rbit64(v56)) | (v55 << 6);
LABEL_18:
  v18 = *(unsigned __int8 *)(*(_QWORD *)(v50 + 48) + v17);
  v19 = (uint64_t *)(*(_QWORD *)(v50 + 56) + 40 * v17);
  v21 = *v19;
  v20 = v19[1];
  v23 = v19[2];
  v22 = v19[3];
  v24 = v19[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (!v21)
    goto LABEL_13;
  v48 = (unint64_t)(v47 + 64) >> 6;
  v12 = v52;
  v25 = v2;
  v26 = v16;
  while (1)
  {
    v27 = v3[3];
    v51 = v27 >> 1;
    if ((uint64_t)(v27 >> 1) < v25 + 1)
    {
      v38 = v12;
      v39 = v3;
      v40 = v25;
      v41 = v18;
      v42 = v26;
      v43 = sub_1BC9D95B0((_QWORD *)(v27 > 1), v25 + 1, 1, v39);
      v26 = v42;
      v18 = v41;
      v25 = v40;
      v12 = v38;
      v3 = v43;
      v51 = v43[3] >> 1;
    }
    if (v25 < v51)
      break;
LABEL_20:
    v3[2] = v25;
    if (!v21)
      goto LABEL_13;
  }
  while (1)
  {
    v32 = (int64_t)(v3 + 4);
    v33 = (uint64_t)&v3[6 * v25 + 4];
    *(_BYTE *)v33 = v18;
    *(_QWORD *)(v33 + 8) = v21;
    *(_QWORD *)(v33 + 16) = v20;
    *(_QWORD *)(v33 + 24) = v23;
    *(_QWORD *)(v33 + 32) = v22;
    *(_QWORD *)(v33 + 40) = v24;
    v34 = v25 + 1;
    if (!v26)
      break;
    v28 = v34;
    v53 = (v26 - 1) & v26;
    v2 = v12;
    v29 = __clz(__rbit64(v26)) | (v12 << 6);
LABEL_26:
    v18 = *(unsigned __int8 *)(*(_QWORD *)(v50 + 48) + v29);
    v30 = (uint64_t *)(*(_QWORD *)(v50 + 56) + 40 * v29);
    v21 = *v30;
    v20 = v30[1];
    v23 = v30[2];
    v22 = v30[3];
    v24 = v30[4];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v25 = v28;
    v26 = v53;
    if (v21)
      v31 = v28 < v51;
    else
      v31 = 0;
    v12 = v2;
    if (!v31)
      goto LABEL_20;
  }
  v2 = v12 + 1;
  if (!__OFADD__(v12, 1))
  {
    if (v2 >= v48)
      goto LABEL_56;
    v35 = *(_QWORD *)(v49 + 8 * v2);
    if (v35)
      goto LABEL_41;
    v36 = v12 + 2;
    if (v12 + 2 >= v48)
      goto LABEL_56;
    v35 = *(_QWORD *)(v49 + 8 * v36);
    if (!v35)
    {
      if (v12 + 3 >= v48)
        goto LABEL_56;
      v35 = *(_QWORD *)(v49 + 8 * (v12 + 3));
      if (v35)
      {
        v2 = v12 + 3;
        goto LABEL_41;
      }
      v36 = v12 + 4;
      if (v12 + 4 >= v48)
        goto LABEL_56;
      v35 = *(_QWORD *)(v49 + 8 * v36);
      if (!v35)
      {
        v2 = v12 + 5;
        if (v12 + 5 >= v48)
          goto LABEL_56;
        v35 = *(_QWORD *)(v49 + 8 * v2);
        if (!v35)
        {
          v37 = v12 + 6;
          while (v48 != v37)
          {
            v35 = *(_QWORD *)(v49 + 8 * v37++);
            if (v35)
            {
              v2 = v37 - 1;
              goto LABEL_41;
            }
          }
LABEL_56:
          v3[2] = v34;
          goto LABEL_13;
        }
        goto LABEL_41;
      }
    }
    v2 = v36;
LABEL_41:
    v28 = v34;
    v53 = (v35 - 1) & v35;
    v29 = __clz(__rbit64(v35)) + (v2 << 6);
    goto LABEL_26;
  }
  __break(1u);
LABEL_66:
  v45 = v33 + 3;
  if (v33 + 3 < v32)
  {
    v44 = *(_QWORD *)(v49 + 8 * v45);
    if (v44)
      goto LABEL_60;
    v33 += 4;
    if (v33 >= v32)
      goto LABEL_13;
    v44 = *(_QWORD *)(v49 + 8 * v33);
    if (!v44)
    {
      v46 = v12 + 6;
      while (v32 != v46)
      {
        v44 = *(_QWORD *)(v49 + 8 * v46++);
        if (v44)
        {
          v33 = v46 - 1;
          goto LABEL_54;
        }
      }
      goto LABEL_13;
    }
    goto LABEL_54;
  }
LABEL_13:
  result = sub_1BC9E5BB4();
  *(_QWORD *)v1 = v3;
  return result;
}

uint64_t sub_1BC9E3964(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = sub_1BC9D9808(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = &v3[2 * v8 + 4];
  if (a1 + 32 < (unint64_t)&v9[2 * v2] && (unint64_t)v9 < a1 + 32 + 16 * v2)
    goto LABEL_24;
  memcpy(v9, (const void *)(a1 + 32), 16 * v2);
  if (!v2)
  {
LABEL_19:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)v1 = v3;
    return result;
  }
  v11 = v3[2];
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = sub_1BCAB6624();
  __break(1u);
  return result;
}

uint64_t sub_1BC9E3AA8(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  uint64_t v6;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;
  unint64_t v28;
  uint64_t *v29;
  BOOL v30;
  uint64_t v31;
  unint64_t v32;
  int64_t v33;
  int64_t v34;
  int64_t v35;
  _QWORD *v36;
  unint64_t v37;
  uint64_t v38;
  int64_t v39;
  uint64_t v40;
  int64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int64_t v45;
  _QWORD v46[2];
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;

  v2 = *(_QWORD *)(result + 16);
  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v6 = result;
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || (v8 = v3[3] >> 1, v8 < v5))
  {
    if (v4 <= v5)
      v9 = v4 + v2;
    else
      v9 = v4;
    v3 = sub_1BC9D9928(isUniquelyReferenced_nonNull_native, v9, 1, v3);
    v8 = v3[3] >> 1;
  }
  v10 = v3[2];
  v11 = v8 - v10;
  result = (uint64_t)sub_1BC9E485C(v46, (uint64_t)&v3[5 * v10 + 4], v8 - v10, v6);
  if (result < v2)
    goto LABEL_15;
  if (result)
  {
    v13 = v3[2];
    v14 = __OFADD__(v13, result);
    v15 = v13 + result;
    if (v14)
    {
      __break(1u);
      goto LABEL_51;
    }
    v3[2] = v15;
  }
  if (result != v11)
    goto LABEL_13;
LABEL_16:
  v2 = v3[2];
  v43 = v46[0];
  v11 = v47;
  v42 = v46[1];
  v12 = v48;
  v40 = v47;
  if (!v49)
  {
LABEL_51:
    v31 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      return result;
    }
    v25 = (unint64_t)(v11 + 64) >> 6;
    if (v31 >= v25)
      goto LABEL_13;
    v37 = *(_QWORD *)(v42 + 8 * v31);
    if (!v37)
    {
      v38 = v12 + 2;
      if (v12 + 2 >= v25)
        goto LABEL_13;
      v37 = *(_QWORD *)(v42 + 8 * v38);
      if (v37)
      {
LABEL_60:
        v31 = v38;
      }
      else
      {
        if (v12 + 3 >= v25)
          goto LABEL_13;
        v37 = *(_QWORD *)(v42 + 8 * (v12 + 3));
        if (!v37)
          goto LABEL_66;
        v31 = v12 + 3;
      }
    }
LABEL_54:
    v16 = (v37 - 1) & v37;
    v17 = __clz(__rbit64(v37)) + (v31 << 6);
    v44 = v31;
    v11 = v40;
    goto LABEL_18;
  }
  v16 = (v49 - 1) & v49;
  v44 = v48;
  v17 = __clz(__rbit64(v49)) | (v48 << 6);
LABEL_18:
  v18 = (uint64_t *)(*(_QWORD *)(v43 + 56) + 40 * v17);
  v20 = *v18;
  v19 = v18[1];
  v22 = v18[2];
  v21 = v18[3];
  v23 = v18[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (!v20)
    goto LABEL_13;
  v41 = (unint64_t)(v11 + 64) >> 6;
  v12 = v44;
  while (1)
  {
    v24 = v3[3];
    v25 = v24 >> 1;
    v45 = v24 >> 1;
    if ((uint64_t)(v24 >> 1) < v2 + 1)
    {
      v35 = v12;
      v36 = sub_1BC9D9928((_QWORD *)(v24 > 1), v2 + 1, 1, v3);
      v12 = v35;
      v3 = v36;
      v45 = v36[3] >> 1;
    }
    if (v2 < v45)
      break;
LABEL_20:
    v3[2] = v2;
    if (!v20)
      goto LABEL_13;
  }
  while (1)
  {
    v31 = (uint64_t)&v3[5 * v2 + 4];
    *(_QWORD *)v31 = v20;
    *(_QWORD *)(v31 + 8) = v19;
    *(_QWORD *)(v31 + 16) = v22;
    *(_QWORD *)(v31 + 24) = v21;
    *(_QWORD *)(v31 + 32) = v23;
    ++v2;
    if (!v16)
      break;
    v26 = __clz(__rbit64(v16));
    v16 &= v16 - 1;
    v27 = v12;
    v28 = v26 | (v12 << 6);
LABEL_26:
    v29 = (uint64_t *)(*(_QWORD *)(v43 + 56) + 40 * v28);
    v20 = *v29;
    v19 = v29[1];
    v22 = v29[2];
    v21 = v29[3];
    v23 = v29[4];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v20)
      v30 = v2 < v45;
    else
      v30 = 0;
    v12 = v27;
    if (!v30)
      goto LABEL_20;
  }
  v27 = v12 + 1;
  if (!__OFADD__(v12, 1))
  {
    if (v27 >= v41)
      goto LABEL_56;
    v32 = *(_QWORD *)(v42 + 8 * v27);
    if (v32)
      goto LABEL_41;
    v33 = v12 + 2;
    if (v12 + 2 >= v41)
      goto LABEL_56;
    v32 = *(_QWORD *)(v42 + 8 * v33);
    if (!v32)
    {
      if (v12 + 3 >= v41)
        goto LABEL_56;
      v32 = *(_QWORD *)(v42 + 8 * (v12 + 3));
      if (v32)
      {
        v27 = v12 + 3;
        goto LABEL_41;
      }
      v33 = v12 + 4;
      if (v12 + 4 >= v41)
        goto LABEL_56;
      v32 = *(_QWORD *)(v42 + 8 * v33);
      if (!v32)
      {
        v27 = v12 + 5;
        if (v12 + 5 >= v41)
          goto LABEL_56;
        v32 = *(_QWORD *)(v42 + 8 * v27);
        if (!v32)
        {
          v34 = v12 + 6;
          while (v41 != v34)
          {
            v32 = *(_QWORD *)(v42 + 8 * v34++);
            if (v32)
            {
              v27 = v34 - 1;
              goto LABEL_41;
            }
          }
LABEL_56:
          v3[2] = v2;
          goto LABEL_13;
        }
        goto LABEL_41;
      }
    }
    v27 = v33;
LABEL_41:
    v16 = (v32 - 1) & v32;
    v28 = __clz(__rbit64(v32)) + (v27 << 6);
    goto LABEL_26;
  }
  __break(1u);
LABEL_66:
  v38 = v31 + 3;
  if (v31 + 3 < v25)
  {
    v37 = *(_QWORD *)(v42 + 8 * v38);
    if (v37)
      goto LABEL_60;
    v31 += 4;
    if (v31 >= v25)
      goto LABEL_13;
    v37 = *(_QWORD *)(v42 + 8 * v31);
    if (!v37)
    {
      v39 = v12 + 6;
      while (v25 != v39)
      {
        v37 = *(_QWORD *)(v42 + 8 * v39++);
        if (v37)
        {
          v31 = v39 - 1;
          goto LABEL_54;
        }
      }
      goto LABEL_13;
    }
    goto LABEL_54;
  }
LABEL_13:
  result = sub_1BC9E5BB4();
  *(_QWORD *)v1 = v3;
  return result;
}

uint64_t sub_1BC9E3F50(unint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;

  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v3 = sub_1BCAB65DC();
    swift_bridgeObjectRelease();
  }
  else
  {
    v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if ((unint64_t)*v1 >> 62)
  {
    swift_bridgeObjectRetain();
    v20 = sub_1BCAB65DC();
    swift_bridgeObjectRelease();
    v5 = v20 + v3;
    if (!__OFADD__(v20, v3))
      goto LABEL_5;
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v4 = *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFF8) + 0x10);
  v5 = v4 + v3;
  if (__OFADD__(v4, v3))
    goto LABEL_24;
LABEL_5:
  v6 = *v1;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *v1 = v6;
  v8 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v6 & 0x8000000000000000) == 0 && (v6 & 0x4000000000000000) == 0)
  {
    v9 = v6 & 0xFFFFFFFFFFFFFF8;
    if (v5 <= *(_QWORD *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_15;
    v8 = 1;
  }
  if (v6 >> 62)
  {
    swift_bridgeObjectRetain();
    v10 = sub_1BCAB65DC();
    swift_bridgeObjectRelease();
  }
  else
  {
    v10 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if (v10 <= v5)
    v10 = v5;
  swift_bridgeObjectRetain();
  v11 = MEMORY[0x1BCCFB0E0](v8, v10, 1, v6);
  swift_bridgeObjectRelease();
  *v1 = v11;
  v9 = v11 & 0xFFFFFFFFFFFFFF8;
LABEL_15:
  v12 = *(_QWORD *)(v9 + 16);
  v13 = (*(_QWORD *)(v9 + 24) >> 1) - v12;
  result = sub_1BC9E440C(v9 + 8 * v12 + 32, v13, a1);
  if (v15 < v3)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v16 = v15;
  if (v15 < 1)
    goto LABEL_19;
  v17 = *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v18 = __OFADD__(v17, v15);
  v19 = v17 + v15;
  if (!v18)
  {
    *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) = v19;
LABEL_19:
    swift_bridgeObjectRelease();
    if (v16 != v13)
      return sub_1BCAB6024();
LABEL_26:
    sub_1BC998AB0(0, (unint64_t *)&qword_1EF478738, (uint64_t (*)(uint64_t))sub_1BC9E5AF0, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
    return sub_1BCAB6024();
  }
  __break(1u);
  return result;
}

uint64_t sub_1BC9E413C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = sub_1BC9DA5B4(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = (unint64_t)&v3[v8 + 4];
  if (a1 + 32 < v9 + 8 * v2 && v9 < a1 + 32 + 8 * v2)
    goto LABEL_24;
  sub_1BC9BD354();
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)v1 = v3;
    return result;
  }
  v11 = v3[2];
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = sub_1BCAB6624();
  __break(1u);
  return result;
}

uint64_t sub_1BC9E4298(uint64_t a1)
{
  unint64_t *v1;
  unint64_t v2;
  unint64_t v3;
  int64_t v4;
  int64_t v5;
  int isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  int64_t v24;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= *(_QWORD *)(v3 + 24) >> 1)
  {
    v8 = *(_QWORD *)(a1 + 16);
    if (v8)
      goto LABEL_5;
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
  if (v4 <= v5)
    v24 = v4 + v2;
  else
    v24 = v4;
  v3 = sub_1BC9DA808(isUniquelyReferenced_nonNull_native, v24, 1, v3);
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
    goto LABEL_18;
LABEL_5:
  v9 = *(_QWORD *)(v3 + 16);
  v10 = (*(_QWORD *)(v3 + 24) >> 1) - v9;
  sub_1BC9E5A88();
  if (v10 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v12 = *(_QWORD *)(v11 - 8);
  v13 = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  v14 = *(_QWORD *)(v12 + 72);
  v15 = v3 + v13 + v14 * v9;
  v16 = a1 + v13;
  v17 = v14 * v8;
  v18 = v15 + v17;
  v19 = v16 + v17;
  if (v16 < v18 && v15 < v19)
    goto LABEL_24;
  swift_arrayInitWithCopy();
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v21 = *(_QWORD *)(v3 + 16);
  v22 = __OFADD__(v21, v8);
  v23 = v21 + v8;
  if (!v22)
  {
    *(_QWORD *)(v3 + 16) = v23;
LABEL_19:
    result = swift_bridgeObjectRelease();
    *v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = sub_1BCAB6624();
  __break(1u);
  return result;
}

uint64_t sub_1BC9E440C(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t i;
  void (*v12)(_QWORD *);
  id *v13;
  id v14;
  uint64_t result;
  void (*v16[4])(id *);

  v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    v7 = sub_1BCAB65DC();
    swift_bridgeObjectRelease();
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (!a1)
    goto LABEL_19;
  v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    v10 = sub_1BCAB65DC();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        sub_1BC998AB0(0, (unint64_t *)&qword_1EF478738, (uint64_t (*)(uint64_t))sub_1BC9E5AF0, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
        sub_1BC9E5B2C();
        swift_bridgeObjectRetain();
        for (i = 0; i != v7; ++i)
        {
          v12 = sub_1BC9D4DE0(v16, i, a3);
          v14 = *v13;
          ((void (*)(void (**)(id *), _QWORD))v12)(v16, 0);
          *(_QWORD *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v9 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_1BC9E5AF0();
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  result = sub_1BCAB6624();
  __break(1u);
  return result;
}

_QWORD *sub_1BC9E4618(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  _QWORD *v26;

  v5 = a4 + 64;
  v6 = -1 << *(_BYTE *)(a4 + 32);
  if (-v6 < 64)
    v7 = ~(-1 << -(char)v6);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v11 = 0;
    v9 = 0;
LABEL_39:
    *result = a4;
    result[1] = v5;
    result[2] = ~v6;
    result[3] = v11;
    result[4] = v8;
    return (_QWORD *)v9;
  }
  v9 = a3;
  if (!a3)
  {
    v11 = 0;
    goto LABEL_39;
  }
  if (a3 < 0)
    goto LABEL_41;
  v10 = a2;
  v25 = -1 << *(_BYTE *)(a4 + 32);
  v26 = result;
  v11 = 0;
  v12 = 0;
  v13 = (unint64_t)(63 - v6) >> 6;
  if (!v8)
    goto LABEL_9;
LABEL_8:
  v14 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  v15 = v14 | (v11 << 6);
  while (1)
  {
    v19 = *(_BYTE *)(*(_QWORD *)(a4 + 48) + v15);
    ++v12;
    v20 = *(_QWORD *)(a4 + 56) + 40 * v15;
    v22 = *(_QWORD *)v20;
    v21 = *(_QWORD *)(v20 + 8);
    v23 = *(_QWORD *)(v20 + 32);
    v24 = *(_OWORD *)(v20 + 16);
    *(_BYTE *)v10 = v19;
    *(_QWORD *)(v10 + 8) = v22;
    *(_QWORD *)(v10 + 16) = v21;
    *(_OWORD *)(v10 + 24) = v24;
    *(_QWORD *)(v10 + 40) = v23;
    if (v12 == v9)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v10 += 48;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = (_QWORD *)swift_bridgeObjectRetain();
    if (v8)
      goto LABEL_8;
LABEL_9:
    v16 = v11 + 1;
    if (__OFADD__(v11, 1))
      break;
    if (v16 >= v13)
      goto LABEL_33;
    v17 = *(_QWORD *)(v5 + 8 * v16);
    if (!v17)
    {
      v11 += 2;
      if (v16 + 1 >= v13)
      {
        v8 = 0;
        v11 = v16;
      }
      else
      {
        v17 = *(_QWORD *)(v5 + 8 * v11);
        if (v17)
          goto LABEL_14;
        v18 = v16 + 2;
        if (v16 + 2 >= v13)
          goto LABEL_33;
        v17 = *(_QWORD *)(v5 + 8 * v18);
        if (v17)
        {
LABEL_17:
          v16 = v18;
          goto LABEL_18;
        }
        v11 = v16 + 3;
        if (v16 + 3 < v13)
        {
          v17 = *(_QWORD *)(v5 + 8 * v11);
          if (v17)
          {
LABEL_14:
            v16 = v11;
            goto LABEL_18;
          }
          v18 = v16 + 4;
          if (v16 + 4 >= v13)
          {
LABEL_33:
            v8 = 0;
            goto LABEL_37;
          }
          v17 = *(_QWORD *)(v5 + 8 * v18);
          if (!v17)
          {
            while (1)
            {
              v16 = v18 + 1;
              if (__OFADD__(v18, 1))
                goto LABEL_42;
              if (v16 >= v13)
              {
                v8 = 0;
                v11 = v13 - 1;
                goto LABEL_37;
              }
              v17 = *(_QWORD *)(v5 + 8 * v16);
              ++v18;
              if (v17)
                goto LABEL_18;
            }
          }
          goto LABEL_17;
        }
        v8 = 0;
        v11 = v16 + 2;
      }
LABEL_37:
      v9 = v12;
LABEL_38:
      v6 = v25;
      result = v26;
      goto LABEL_39;
    }
LABEL_18:
    v8 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v16 << 6);
    v11 = v16;
  }
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

_QWORD *sub_1BC9E485C(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  _QWORD *v24;

  v5 = a4 + 64;
  v6 = -1 << *(_BYTE *)(a4 + 32);
  if (-v6 < 64)
    v7 = ~(-1 << -(char)v6);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v11 = 0;
    v9 = 0;
LABEL_39:
    *result = a4;
    result[1] = v5;
    result[2] = ~v6;
    result[3] = v11;
    result[4] = v8;
    return (_QWORD *)v9;
  }
  v9 = a3;
  if (!a3)
  {
    v11 = 0;
    goto LABEL_39;
  }
  if (a3 < 0)
    goto LABEL_41;
  v10 = a2;
  v23 = -1 << *(_BYTE *)(a4 + 32);
  v24 = result;
  v11 = 0;
  v12 = 0;
  v13 = (unint64_t)(63 - v6) >> 6;
  if (!v8)
    goto LABEL_9;
LABEL_8:
  v14 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  v15 = v14 | (v11 << 6);
  while (1)
  {
    ++v12;
    v19 = *(_QWORD *)(a4 + 56) + 40 * v15;
    v20 = *(_QWORD *)(v19 + 8);
    v21 = *(_QWORD *)(v19 + 32);
    v22 = *(_OWORD *)(v19 + 16);
    *(_QWORD *)v10 = *(_QWORD *)v19;
    *(_QWORD *)(v10 + 8) = v20;
    *(_OWORD *)(v10 + 16) = v22;
    *(_QWORD *)(v10 + 32) = v21;
    if (v12 == v9)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v10 += 40;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = (_QWORD *)swift_bridgeObjectRetain();
    if (v8)
      goto LABEL_8;
LABEL_9:
    v16 = v11 + 1;
    if (__OFADD__(v11, 1))
      break;
    if (v16 >= v13)
      goto LABEL_33;
    v17 = *(_QWORD *)(v5 + 8 * v16);
    if (!v17)
    {
      v11 += 2;
      if (v16 + 1 >= v13)
      {
        v8 = 0;
        v11 = v16;
      }
      else
      {
        v17 = *(_QWORD *)(v5 + 8 * v11);
        if (v17)
          goto LABEL_14;
        v18 = v16 + 2;
        if (v16 + 2 >= v13)
          goto LABEL_33;
        v17 = *(_QWORD *)(v5 + 8 * v18);
        if (v17)
        {
LABEL_17:
          v16 = v18;
          goto LABEL_18;
        }
        v11 = v16 + 3;
        if (v16 + 3 < v13)
        {
          v17 = *(_QWORD *)(v5 + 8 * v11);
          if (v17)
          {
LABEL_14:
            v16 = v11;
            goto LABEL_18;
          }
          v18 = v16 + 4;
          if (v16 + 4 >= v13)
          {
LABEL_33:
            v8 = 0;
            goto LABEL_37;
          }
          v17 = *(_QWORD *)(v5 + 8 * v18);
          if (!v17)
          {
            while (1)
            {
              v16 = v18 + 1;
              if (__OFADD__(v18, 1))
                goto LABEL_42;
              if (v16 >= v13)
              {
                v8 = 0;
                v11 = v13 - 1;
                goto LABEL_37;
              }
              v17 = *(_QWORD *)(v5 + 8 * v16);
              ++v18;
              if (v17)
                goto LABEL_18;
            }
          }
          goto LABEL_17;
        }
        v8 = 0;
        v11 = v16 + 2;
      }
LABEL_37:
      v9 = v12;
LABEL_38:
      v6 = v23;
      result = v24;
      goto LABEL_39;
    }
LABEL_18:
    v8 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v16 << 6);
    v11 = v16;
  }
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

uint64_t sub_1BC9E4A98(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2)
    v7 = 2;
  v8 = v7 - 2;
  v9 = (unint64_t *)(a1 + 80);
  v2 = 64;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

uint64_t sub_1BC9E4B20@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (result < 0 || 1 << *(_BYTE *)(a3 + 32) <= result)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(_QWORD *)(a3 + (((unint64_t)result >> 3) & 0xFFFFFFFFFFFFF8) + 64) >> result) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a3 + 36) == a2)
  {
    v4 = *(_QWORD *)(a3 + 56) + 40 * result;
    v5 = *(_QWORD *)(v4 + 8);
    v6 = *(_QWORD *)(v4 + 32);
    *(_QWORD *)a4 = *(_QWORD *)v4;
    *(_QWORD *)(a4 + 8) = v5;
    *(_OWORD *)(a4 + 16) = *(_OWORD *)(v4 + 16);
    *(_QWORD *)(a4 + 32) = v6;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
LABEL_8:
  __break(1u);
  return result;
}

uint64_t _s19HealthVisualization16DiagramDataGroupV2eeoiySbAC_ACtFZ_0(uint64_t *a1, uint64_t *a2, int32x2_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t result;

  v3 = a1[1];
  v5 = a1[2];
  v4 = a1[3];
  v6 = a1[4];
  v7 = a2[1];
  v9 = a2[2];
  v8 = a2[3];
  v10 = a2[4];
  sub_1BC9A9724(*a1, *a2, a3);
  if ((v11 & 1) == 0)
    return 0;
  if (!v5)
  {
    if (v9)
      return 0;
    goto LABEL_9;
  }
  if (!v9)
    return 0;
  if (v3 == v7 && v5 == v9 || (v12 = sub_1BCAB67C8(), result = 0, (v12 & 1) != 0))
  {
LABEL_9:
    if (v6)
    {
      if (v10 && (v4 == v8 && v6 == v10 || (sub_1BCAB67C8() & 1) != 0))
        return 1;
    }
    else if (!v10)
    {
      return 1;
    }
    return 0;
  }
  return result;
}

unint64_t sub_1BC9E4C98()
{
  unint64_t result;

  result = qword_1ED6C72D0;
  if (!qword_1ED6C72D0)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCAC140C, &type metadata for DiagramDataGroup.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED6C72D0);
  }
  return result;
}

uint64_t sub_1BC9E4CDC(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = *a1;
  if (!result)
  {
    sub_1BC998AB0(255, &qword_1ED6C74B8, (uint64_t (*)(uint64_t))type metadata accessor for CGPoint, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
    v10 = v9;
    v11 = sub_1BC996948(a2, (uint64_t (*)(uint64_t))type metadata accessor for CGPoint, a3);
    result = MEMORY[0x1BCCFBE84](a4, v10, &v11);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1BC9E4D74()
{
  unint64_t result;

  result = qword_1ED6C7298;
  if (!qword_1ED6C7298)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCAC13BC, &type metadata for DiagramData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED6C7298);
  }
  return result;
}

unint64_t sub_1BC9E4DB8()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  result = qword_1ED6C6E08;
  if (!qword_1ED6C6E08)
  {
    sub_1BC998AB0(255, &qword_1ED6C74A8, (uint64_t (*)(uint64_t))sub_1BC9BD354, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
    v2 = v1;
    v3 = sub_1BC9E4F70(&qword_1ED6C6DE0, (uint64_t (*)(void))sub_1BC9E4E50, (uint64_t (*)(void))sub_1BC9E4E94, MEMORY[0x1E0DEA0B8]);
    result = MEMORY[0x1BCCFBE84](MEMORY[0x1E0DEAF10], v2, &v3);
    atomic_store(result, (unint64_t *)&qword_1ED6C6E08);
  }
  return result;
}

unint64_t sub_1BC9E4E50()
{
  unint64_t result;

  result = qword_1ED6C69D8;
  if (!qword_1ED6C69D8)
  {
    result = MEMORY[0x1BCCFBE84](&protocol conformance descriptor for DiagramDataKey, &type metadata for DiagramDataKey);
    atomic_store(result, (unint64_t *)&qword_1ED6C69D8);
  }
  return result;
}

unint64_t sub_1BC9E4E94()
{
  unint64_t result;

  result = qword_1ED6C69E8;
  if (!qword_1ED6C69E8)
  {
    result = MEMORY[0x1BCCFBE84](&protocol conformance descriptor for DiagramDataGroup, &type metadata for DiagramDataGroup);
    atomic_store(result, (unint64_t *)&qword_1ED6C69E8);
  }
  return result;
}

unint64_t sub_1BC9E4ED8()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  result = qword_1ED6C74B0;
  if (!qword_1ED6C74B0)
  {
    sub_1BC998AB0(255, &qword_1ED6C74A8, (uint64_t (*)(uint64_t))sub_1BC9BD354, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
    v2 = v1;
    v3 = sub_1BC9E4F70(&qword_1ED6C74A0, (uint64_t (*)(void))sub_1BC9E4FE8, (uint64_t (*)(void))sub_1BC9E502C, MEMORY[0x1E0DEA0D8]);
    result = MEMORY[0x1BCCFBE84](MEMORY[0x1E0DEAF40], v2, &v3);
    atomic_store(result, (unint64_t *)&qword_1ED6C74B0);
  }
  return result;
}

uint64_t sub_1BC9E4F70(unint64_t *a1, uint64_t (*a2)(void), uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[2];

  result = *a1;
  if (!result)
  {
    sub_1BC9BD354();
    v10 = v9;
    v11[0] = a2();
    v11[1] = a3();
    result = MEMORY[0x1BCCFBE84](a4, v10, v11);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1BC9E4FE8()
{
  unint64_t result;

  result = qword_1ED6C72C8;
  if (!qword_1ED6C72C8)
  {
    result = MEMORY[0x1BCCFBE84](&protocol conformance descriptor for DiagramDataKey, &type metadata for DiagramDataKey);
    atomic_store(result, (unint64_t *)&qword_1ED6C72C8);
  }
  return result;
}

unint64_t sub_1BC9E502C()
{
  unint64_t result;

  result = qword_1ED6C72E8;
  if (!qword_1ED6C72E8)
  {
    result = MEMORY[0x1BCCFBE84](&protocol conformance descriptor for DiagramDataGroup, &type metadata for DiagramDataGroup);
    atomic_store(result, (unint64_t *)&qword_1ED6C72E8);
  }
  return result;
}

unint64_t sub_1BC9E5074()
{
  unint64_t result;

  result = qword_1ED6C72B8;
  if (!qword_1ED6C72B8)
  {
    result = MEMORY[0x1BCCFBE84](&protocol conformance descriptor for DiagramDataKey, &type metadata for DiagramDataKey);
    atomic_store(result, (unint64_t *)&qword_1ED6C72B8);
  }
  return result;
}

uint64_t destroy for DiagramDataGroup()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for DiagramDataGroup(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for DiagramDataGroup(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *assignWithTake for DiagramDataGroup(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  v4 = a2[2];
  a1[1] = a2[1];
  a1[2] = v4;
  swift_bridgeObjectRelease();
  v5 = a2[4];
  a1[3] = a2[3];
  a1[4] = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for DiagramDataGroup(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DiagramDataGroup(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for DiagramDataGroup()
{
  return &type metadata for DiagramDataGroup;
}

ValueMetadata *type metadata accessor for DiagramDataKey()
{
  return &type metadata for DiagramDataKey;
}

uint64_t destroy for DiagramData()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for DiagramData(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for DiagramData(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  __int128 v4;

  v3 = *a2;
  v4 = a2[1];
  *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
  *(_OWORD *)a1 = v3;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for DiagramData(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for DiagramData(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DiagramData(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 40) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for DiagramData()
{
  return &type metadata for DiagramData;
}

uint64_t type metadata accessor for DiagramFactory()
{
  return objc_opt_self();
}

uint64_t method lookup function for DiagramFactory()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of DiagramFactory.__allocating_init(hbxViewControllerFactory:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t dispatch thunk of DiagramFactory.drawDiagram(diagramImageView:diagramData:configuration:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 96))();
}

uint64_t dispatch thunk of DiagramFactory.diagramTransformer(diagramSize:data:configuration:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t storeEnumTagSinglePayload for DiagramData.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1BC9E54D4 + 4 * byte_1BCAC0FD1[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1BC9E5508 + 4 * byte_1BCAC0FCC[v4]))();
}

uint64_t sub_1BC9E5508(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BC9E5510(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BC9E5518);
  return result;
}

uint64_t sub_1BC9E5524(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BC9E552CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1BC9E5530(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BC9E5538(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DiagramData.CodingKeys()
{
  return &type metadata for DiagramData.CodingKeys;
}

uint64_t _s19HealthVisualization14DiagramDataKeyOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1BC9E55A0 + 4 * byte_1BCAC0FDB[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1BC9E55D4 + 4 * byte_1BCAC0FD6[v4]))();
}

uint64_t sub_1BC9E55D4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BC9E55DC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BC9E55E4);
  return result;
}

uint64_t sub_1BC9E55F0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BC9E55F8);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1BC9E55FC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BC9E5604(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DiagramDataGroup.CodingKeys()
{
  return &type metadata for DiagramDataGroup.CodingKeys;
}

unint64_t sub_1BC9E5624()
{
  unint64_t result;

  result = qword_1EF478CB8;
  if (!qword_1EF478CB8)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCAC12DC, &type metadata for DiagramDataGroup.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF478CB8);
  }
  return result;
}

unint64_t sub_1BC9E566C()
{
  unint64_t result;

  result = qword_1EF478CC0;
  if (!qword_1EF478CC0)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCAC1394, &type metadata for DiagramData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF478CC0);
  }
  return result;
}

unint64_t sub_1BC9E56B4()
{
  unint64_t result;

  result = qword_1ED6C72A8;
  if (!qword_1ED6C72A8)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCAC1304, &type metadata for DiagramData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED6C72A8);
  }
  return result;
}

unint64_t sub_1BC9E56FC()
{
  unint64_t result;

  result = qword_1ED6C72A0;
  if (!qword_1ED6C72A0)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCAC132C, &type metadata for DiagramData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED6C72A0);
  }
  return result;
}

unint64_t sub_1BC9E5744()
{
  unint64_t result;

  result = qword_1ED6C72E0;
  if (!qword_1ED6C72E0)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCAC124C, &type metadata for DiagramDataGroup.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED6C72E0);
  }
  return result;
}

unint64_t sub_1BC9E578C()
{
  unint64_t result;

  result = qword_1ED6C72D8;
  if (!qword_1ED6C72D8)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCAC1274, &type metadata for DiagramDataGroup.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED6C72D8);
  }
  return result;
}

uint64_t sub_1BC9E57D0(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x73746E696F70 && a2 == 0xE600000000000000;
  if (v2 || (sub_1BCAB67C8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x697461746F6E6E61 && a2 == 0xEA00000000006E6FLL || (sub_1BCAB67C8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000017 && a2 == 0x80000001BCAD03F0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_1BCAB67C8();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_1BC9E5924(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x65646F4D61746164 && a2 == 0xEE0065636170536CLL;
  if (v2 || (sub_1BCAB67C8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x756F724761746164 && a2 == 0xEA00000000007370)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_1BCAB67C8();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

unint64_t sub_1BC9E5A44()
{
  unint64_t result;

  result = qword_1ED6C72C0;
  if (!qword_1ED6C72C0)
  {
    result = MEMORY[0x1BCCFBE84](&protocol conformance descriptor for DiagramDataKey, &type metadata for DiagramDataKey);
    atomic_store(result, (unint64_t *)&qword_1ED6C72C0);
  }
  return result;
}

void sub_1BC9E5A88()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED6C6F78)
  {
    sub_1BCAB5004();
    sub_1BC9A82C4();
    v0 = sub_1BCAB68A0();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED6C6F78);
  }
}

unint64_t sub_1BC9E5AF0()
{
  unint64_t result;

  result = qword_1ED6C5B10;
  if (!qword_1ED6C5B10)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1ED6C5B10);
  }
  return result;
}

unint64_t sub_1BC9E5B2C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EF478CC8;
  if (!qword_1EF478CC8)
  {
    sub_1BC998AB0(255, (unint64_t *)&qword_1EF478738, (uint64_t (*)(uint64_t))sub_1BC9E5AF0, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
    result = MEMORY[0x1BCCFBE84](MEMORY[0x1E0DEAF50], v1);
    atomic_store(result, (unint64_t *)&qword_1EF478CC8);
  }
  return result;
}

uint64_t sub_1BC9E5B8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unsigned __int8 a12)
{
  int v12;
  uint64_t result;

  v12 = a12 >> 5;
  if (v12 == 1 || v12 == 2)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t sub_1BC9E5BB4()
{
  return swift_release();
}

uint64_t sub_1BC9E5BBC(uint64_t a1)
{
  return sub_1BC9E5C00(a1, qword_1ED6C4DE8, MEMORY[0x1E0CAEA00]);
}

uint64_t static DateComponents.oneHour.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1BC9E5E94(&qword_1ED6C4DD0, (uint64_t)qword_1ED6C4DE8, a1);
}

uint64_t sub_1BC9E5BEC(uint64_t a1)
{
  return sub_1BC9E5C00(a1, qword_1ED6C6950, MEMORY[0x1E0CAE9D0]);
}

uint64_t sub_1BC9E5C00(uint64_t a1, uint64_t *a2, uint64_t (*a3)(uint64_t, _QWORD))
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v16;

  sub_1BC9AFF04(0, (unint64_t *)&qword_1ED6C7290, (void (*)(uint64_t))MEMORY[0x1E0CB1470]);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v16 - v6;
  sub_1BC9AFF04(0, &qword_1ED6C7288, (void (*)(uint64_t))MEMORY[0x1E0CB11F0]);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v16 - v9;
  v11 = sub_1BCAB4C74();
  __swift_allocate_value_buffer(v11, a2);
  __swift_project_value_buffer(v11, (uint64_t)a2);
  v12 = sub_1BCAB4F74();
  v13 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56);
  v13(v10, 1, 1, v12);
  v14 = sub_1BCAB4FB0();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v7, 1, 1, v14);
  sub_1BCAB4C50();
  sub_1BCAB4F50();
  v13(v10, 0, 1, v12);
  sub_1BCAB4C68();
  return a3(1, 0);
}

uint64_t static DateComponents.oneDay.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1BC9E5E94(&qword_1ED6C7078, (uint64_t)qword_1ED6C6950, a1);
}

uint64_t sub_1BC9E5E04(uint64_t a1)
{
  return sub_1BC9E5C00(a1, qword_1ED6C2C88, MEMORY[0x1E0CAE948]);
}

uint64_t static DateComponents.oneWeek.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1BC9E5E94(&qword_1ED6C3000, (uint64_t)qword_1ED6C2C88, a1);
}

uint64_t sub_1BC9E5E34(uint64_t a1)
{
  return sub_1BC9E5C00(a1, qword_1ED6C2CB8, MEMORY[0x1E0CAEA28]);
}

uint64_t static DateComponents.oneMonth.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1BC9E5E94(&qword_1ED6C2EE8, (uint64_t)qword_1ED6C2CB8, a1);
}

uint64_t sub_1BC9E5E64(uint64_t a1)
{
  return sub_1BC9E5C00(a1, qword_1ED6C2CA0, MEMORY[0x1E0CAEA18]);
}

uint64_t static DateComponents.oneYear.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1BC9E5E94(&qword_1ED6C3008, (uint64_t)qword_1ED6C2CA0, a1);
}

uint64_t sub_1BC9E5E94@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;

  if (*a1 != -1)
    swift_once();
  v5 = sub_1BCAB4C74();
  v6 = __swift_project_value_buffer(v5, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a3, v6, v5);
}

uint64_t DateComponents.negated.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  char v13;
  char v14;
  BOOL v15;
  char v16;
  char v17;
  char v18;
  uint64_t v19;
  _DWORD v20[2];
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v27 = a1;
  sub_1BC9AFF04(0, (unint64_t *)&qword_1ED6C7290, (void (*)(uint64_t))MEMORY[0x1E0CB1470]);
  MEMORY[0x1E0C80A78](v1);
  v3 = (char *)v20 - v2;
  sub_1BC9AFF04(0, &qword_1ED6C7288, (void (*)(uint64_t))MEMORY[0x1E0CB11F0]);
  MEMORY[0x1E0C80A78](v4);
  result = sub_1BCAB4C20();
  v6 = result;
  v8 = v7;
  if ((v7 & 1) == 0)
  {
    v6 = -result;
    if (__OFSUB__(0, result))
    {
      __break(1u);
LABEL_17:
      __break(1u);
LABEL_18:
      __break(1u);
LABEL_19:
      __break(1u);
LABEL_20:
      __break(1u);
LABEL_21:
      __break(1u);
      goto LABEL_22;
    }
  }
  result = sub_1BCAB4C2C();
  v9 = result;
  v11 = v10;
  if ((v10 & 1) == 0)
  {
    v9 = -result;
    if (__OFSUB__(0, result))
      goto LABEL_17;
  }
  result = sub_1BCAB4BE4();
  v12 = result;
  if ((v13 & 1) == 0)
  {
    v12 = -result;
    if (__OFSUB__(0, result))
      goto LABEL_18;
  }
  result = sub_1BCAB4C08();
  if ((v14 & 1) == 0)
  {
    v15 = __OFSUB__(0, result);
    result = -result;
    if (v15)
      goto LABEL_19;
  }
  v25 = result;
  v26 = v12;
  result = sub_1BCAB4C14();
  if ((v16 & 1) == 0)
  {
    v15 = __OFSUB__(0, result);
    result = -result;
    if (v15)
      goto LABEL_20;
  }
  v23 = result;
  v24 = v9;
  result = sub_1BCAB4C38();
  if ((v17 & 1) == 0)
  {
    v15 = __OFSUB__(0, result);
    result = -result;
    if (v15)
      goto LABEL_21;
  }
  v21 = result;
  v22 = v6;
  result = sub_1BCAB4C44();
  if ((v18 & 1) != 0 || !__OFSUB__(0, result))
  {
    v20[0] = v11 & 1;
    v20[1] = v8 & 1;
    sub_1BCAB4C5C();
    v19 = sub_1BCAB4FB0();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v3, 1, 1, v19);
    return sub_1BCAB4C50();
  }
LABEL_22:
  __break(1u);
  return result;
}

Swift::String __swiftcall DateComponents.stringWithNonLocalizedAbbreviatedFormat()()
{
  char v0;
  uint64_t v1;
  _QWORD *v2;
  unint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  char v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  char v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  char v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  char v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  char v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  void *v37;
  void *v38;
  uint64_t v39;
  void *v40;
  Swift::String result;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  sub_1BCAB4C20();
  if ((v0 & 1) != 0)
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  else
  {
    v42 = sub_1BCAB6798();
    v49 = v1;
    sub_1BCAB5F70();
    v2 = sub_1BC9DA134(0, 1, 1, MEMORY[0x1E0DEE9D8]);
    v4 = v2[2];
    v3 = v2[3];
    if (v4 >= v3 >> 1)
      v2 = sub_1BC9DA134((_QWORD *)(v3 > 1), v4 + 1, 1, v2);
    v2[2] = v4 + 1;
    v5 = &v2[2 * v4];
    v5[4] = v42;
    v5[5] = v49;
  }
  sub_1BCAB4C2C();
  if ((v6 & 1) == 0)
  {
    v43 = sub_1BCAB6798();
    v50 = v7;
    sub_1BCAB5F70();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v2 = sub_1BC9DA134(0, v2[2] + 1, 1, v2);
    v9 = v2[2];
    v8 = v2[3];
    if (v9 >= v8 >> 1)
      v2 = sub_1BC9DA134((_QWORD *)(v8 > 1), v9 + 1, 1, v2);
    v2[2] = v9 + 1;
    v10 = &v2[2 * v9];
    v10[4] = v43;
    v10[5] = v50;
  }
  sub_1BCAB4BE4();
  if ((v11 & 1) == 0)
  {
    v44 = sub_1BCAB6798();
    v51 = v12;
    sub_1BCAB5F70();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v2 = sub_1BC9DA134(0, v2[2] + 1, 1, v2);
    v14 = v2[2];
    v13 = v2[3];
    if (v14 >= v13 >> 1)
      v2 = sub_1BC9DA134((_QWORD *)(v13 > 1), v14 + 1, 1, v2);
    v2[2] = v14 + 1;
    v15 = &v2[2 * v14];
    v15[4] = v44;
    v15[5] = v51;
  }
  sub_1BCAB4C08();
  if ((v16 & 1) == 0)
  {
    v45 = sub_1BCAB6798();
    v52 = v17;
    sub_1BCAB5F70();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v2 = sub_1BC9DA134(0, v2[2] + 1, 1, v2);
    v19 = v2[2];
    v18 = v2[3];
    if (v19 >= v18 >> 1)
      v2 = sub_1BC9DA134((_QWORD *)(v18 > 1), v19 + 1, 1, v2);
    v2[2] = v19 + 1;
    v20 = &v2[2 * v19];
    v20[4] = v45;
    v20[5] = v52;
  }
  sub_1BCAB4C14();
  if ((v21 & 1) == 0)
  {
    v46 = sub_1BCAB6798();
    v53 = v22;
    sub_1BCAB5F70();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v2 = sub_1BC9DA134(0, v2[2] + 1, 1, v2);
    v24 = v2[2];
    v23 = v2[3];
    if (v24 >= v23 >> 1)
      v2 = sub_1BC9DA134((_QWORD *)(v23 > 1), v24 + 1, 1, v2);
    v2[2] = v24 + 1;
    v25 = &v2[2 * v24];
    v25[4] = v46;
    v25[5] = v53;
  }
  sub_1BCAB4C38();
  if ((v26 & 1) == 0)
  {
    v47 = sub_1BCAB6798();
    v54 = v27;
    sub_1BCAB5F70();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v2 = sub_1BC9DA134(0, v2[2] + 1, 1, v2);
    v29 = v2[2];
    v28 = v2[3];
    if (v29 >= v28 >> 1)
      v2 = sub_1BC9DA134((_QWORD *)(v28 > 1), v29 + 1, 1, v2);
    v2[2] = v29 + 1;
    v30 = &v2[2 * v29];
    v30[4] = v47;
    v30[5] = v54;
  }
  sub_1BCAB4C44();
  if ((v31 & 1) == 0)
  {
    v48 = sub_1BCAB6798();
    v55 = v32;
    sub_1BCAB5F70();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v2 = sub_1BC9DA134(0, v2[2] + 1, 1, v2);
    v34 = v2[2];
    v33 = v2[3];
    if (v34 >= v33 >> 1)
      v2 = sub_1BC9DA134((_QWORD *)(v33 > 1), v34 + 1, 1, v2);
    v2[2] = v34 + 1;
    v35 = &v2[2 * v34];
    v35[4] = v48;
    v35[5] = v55;
  }
  sub_1BC9E6670();
  sub_1BC9E66C4();
  v36 = sub_1BCAB5EA4();
  v38 = v37;
  swift_bridgeObjectRelease();
  v39 = v36;
  v40 = v38;
  result._object = v40;
  result._countAndFlagsBits = v39;
  return result;
}

void sub_1BC9E6670()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED6C6E10)
  {
    v0 = sub_1BCAB6060();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED6C6E10);
  }
}

unint64_t sub_1BC9E66C4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1ED6C4DE0;
  if (!qword_1ED6C4DE0)
  {
    sub_1BC9E6670();
    result = MEMORY[0x1BCCFBE84](MEMORY[0x1E0DEAF20], v1);
    atomic_store(result, (unint64_t *)&qword_1ED6C4DE0);
  }
  return result;
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  if ((*(_DWORD *)(*(_QWORD *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

uint64_t static HighlightCalendarViewModel.numberOfDaysInWeek.getter()
{
  return 7;
}

uint64_t HighlightCalendarViewModel.weekViewModels.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t HighlightCalendarViewModel.longWeekdayStrings.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t HighlightCalendarViewModel.shortWeekdayStrings.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t HighlightCalendarViewModel.showsSeparatorBetweenHeaderAndWeeks.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 24);
}

uint64_t HighlightCalendarViewModel.init(weekViewModels:longWeekdayStrings:shortWeekdayStrings:showsSeparatorBetweenHeaderAndWeeks:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  *(_QWORD *)a5 = result;
  *(_QWORD *)(a5 + 8) = a2;
  *(_QWORD *)(a5 + 16) = a3;
  *(_BYTE *)(a5 + 24) = a4;
  return result;
}

uint64_t HighlightCalendarWeekViewModel.dayViewModels.getter()
{
  return swift_bridgeObjectRetain();
}

HealthVisualization::HighlightCalendarWeekViewModel __swiftcall HighlightCalendarWeekViewModel.init(dayViewModels:)(HealthVisualization::HighlightCalendarWeekViewModel dayViewModels)
{
  HealthVisualization::HighlightCalendarWeekViewModel *v1;

  v1->dayViewModels._rawValue = dayViewModels.dayViewModels._rawValue;
  return dayViewModels;
}

uint64_t HighlightCalendarDayViewModel.monthText.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t HighlightCalendarDayViewModel.hideMonthText.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 16);
}

id HighlightCalendarDayViewModel.circleState.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v4;
  char v5;

  v2 = *(void **)(v1 + 24);
  v3 = *(void **)(v1 + 32);
  v4 = *(_QWORD *)(v1 + 40);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  v5 = *(_BYTE *)(v1 + 48);
  *(_BYTE *)(a1 + 24) = v5;
  return sub_1BC9D5A08(v2, v3, v4, v5);
}

id HighlightCalendarDayViewModel.accentColor.getter()
{
  uint64_t v0;

  return *(id *)(v0 + 56);
}

id HighlightCalendarDayViewModel.backgroundColor.getter()
{
  uint64_t v0;

  return *(id *)(v0 + 64);
}

void *HighlightCalendarDayViewModel.dayTextColor.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + 72);
  v2 = v1;
  return v1;
}

void *HighlightCalendarDayViewModel.alternateDayTextColorWhenUnselected.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + 80);
  v2 = v1;
  return v1;
}

void HighlightCalendarDayViewModel.dayNumberSize.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 88);
}

void HighlightCalendarDayViewModel.circleSize.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 89);
}

uint64_t HighlightCalendarDayViewModel.axProjectionState.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for HighlightCalendarDayViewModel(0);
  return sub_1BC9964B8(v1 + *(int *)(v3 + 52), a1, (uint64_t (*)(_QWORD))sub_1BC9E68A4);
}

uint64_t type metadata accessor for HighlightCalendarDayViewModel(uint64_t a1)
{
  return sub_1BC9B359C(a1, qword_1ED6C5720);
}

void sub_1BC9E68A4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED6C5400)
  {
    type metadata accessor for AXProjectionState(255);
    v0 = sub_1BCAB6384();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED6C5400);
  }
}

uint64_t type metadata accessor for AXProjectionState(uint64_t a1)
{
  return sub_1BC9B359C(a1, qword_1ED6C53C0);
}

double static HighlightCalendarDayViewModel.CircleState.Constants.defaultTodayRingAlpha.getter()
{
  return 0.4;
}

id HighlightCalendarDayViewModel.NumberSize.font.getter()
{
  _BYTE *v0;
  void *v1;
  id v2;
  void *v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;
  void *v18;
  void *v19;
  id v20;
  void *v21;

  if (!*v0)
  {
    if (byte_1EF47A010 == 1)
    {
      if (qword_1ED6C5FF0 != -1)
        swift_once();
      v7 = (void *)qword_1ED6C5560;
      sub_1BC9A649C(0, (unint64_t *)&qword_1ED6C5B38);
      v8 = v7;
      v9 = (void *)sub_1BCAB6348();
      v4 = objc_msgSend(v8, sel_objectForKey_, v9);

      if (!v4)
      {
        v10 = (void *)objc_opt_self();
        sub_1BCAB5F04();
        v11 = (void *)sub_1BCAB5EE0();
        swift_bridgeObjectRelease();
        v4 = objc_msgSend(v10, sel_hk_preferredFontForTextStyle_symbolicTraits_maximumContentSizeCategory_, v11, 32770, *MEMORY[0x1E0DC48F0]);

        if (byte_1EF47A010 == 1)
          goto LABEL_20;
      }
      return v4;
    }
LABEL_22:
    v21 = (void *)objc_opt_self();
    sub_1BCAB5F04();
    v18 = (void *)sub_1BCAB5EE0();
    swift_bridgeObjectRelease();
    v20 = objc_msgSend(v21, sel_hk_preferredFontForTextStyle_symbolicTraits_maximumContentSizeCategory_, v18, 32770, *MEMORY[0x1E0DC48F0]);
    goto LABEL_23;
  }
  if (*v0 != 1)
  {
    if (byte_1EF47A010 == 1)
    {
      if (qword_1ED6C5FF0 != -1)
        swift_once();
      v12 = (void *)qword_1ED6C5560;
      sub_1BC9A649C(0, (unint64_t *)&qword_1ED6C5B38);
      v13 = v12;
      v14 = (void *)sub_1BCAB6348();
      v4 = objc_msgSend(v13, sel_objectForKey_, v14);

      if (!v4)
      {
        v15 = (void *)objc_opt_self();
        sub_1BCAB5F04();
        v16 = (void *)sub_1BCAB5EE0();
        swift_bridgeObjectRelease();
        v4 = objc_msgSend(v15, sel_hk_preferredFontForTextStyle_symbolicTraits_maximumContentSizeCategory_, v16, 32770, *MEMORY[0x1E0DC48F0]);

        if (byte_1EF47A010 == 1)
          goto LABEL_20;
      }
      return v4;
    }
    goto LABEL_22;
  }
  if (byte_1EF47A010 != 1)
  {
    v19 = (void *)objc_opt_self();
    sub_1BCAB5F04();
    v18 = (void *)sub_1BCAB5EE0();
    swift_bridgeObjectRelease();
    v20 = objc_msgSend(v19, sel_hk_preferredFontForTextStyle_symbolicTraits_maximumContentSizeCategory_, v18, 0x8000, *MEMORY[0x1E0DC48F0]);
LABEL_23:
    v4 = v20;
    goto LABEL_24;
  }
  if (qword_1ED6C5FF0 != -1)
    swift_once();
  v1 = (void *)qword_1ED6C5560;
  sub_1BC9A649C(0, (unint64_t *)&qword_1ED6C5B38);
  v2 = v1;
  v3 = (void *)sub_1BCAB6348();
  v4 = objc_msgSend(v2, sel_objectForKey_, v3);

  if (!v4)
  {
    v5 = (void *)objc_opt_self();
    sub_1BCAB5F04();
    v6 = (void *)sub_1BCAB5EE0();
    swift_bridgeObjectRelease();
    v4 = objc_msgSend(v5, sel_hk_preferredFontForTextStyle_symbolicTraits_maximumContentSizeCategory_, v6, 0x8000, *MEMORY[0x1E0DC48F0]);

    if (byte_1EF47A010 == 1)
    {
LABEL_20:
      v17 = (id)qword_1ED6C5560;
      v18 = (void *)sub_1BCAB6348();
      objc_msgSend(v17, sel_setObject_forKey_, v4, v18);

LABEL_24:
    }
  }
  return v4;
}

BOOL static HighlightCalendarDayViewModel.NumberSize.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t HighlightCalendarDayViewModel.NumberSize.hash(into:)()
{
  return sub_1BCAB687C();
}

uint64_t HighlightCalendarDayViewModel.NumberSize.hashValue.getter()
{
  sub_1BCAB6870();
  sub_1BCAB687C();
  return sub_1BCAB6894();
}

BOOL static HighlightCalendarDayViewModel.CircleSize.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t HighlightCalendarDayViewModel.CircleSize.hash(into:)()
{
  return sub_1BCAB687C();
}

uint64_t HighlightCalendarDayViewModel.CircleSize.hashValue.getter()
{
  sub_1BCAB6870();
  sub_1BCAB687C();
  return sub_1BCAB6894();
}

unint64_t HighlightCalendarDayViewModel.AXProbability.init(rawValue:)(unint64_t result)
{
  if (result > 2)
    return 0;
  return result;
}

uint64_t *sub_1BC9E6F64@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  BOOL v3;

  v2 = *result;
  v3 = (unint64_t)*result > 2;
  if ((unint64_t)*result > 2)
    v2 = 0;
  *(_QWORD *)a2 = v2;
  *(_BYTE *)(a2 + 8) = v3;
  return result;
}

unint64_t HighlightCalendarDayViewModel.AXCircleState.init(rawValue:)(unint64_t a1)
{
  return sub_1BC9E76FC(a1);
}

uint64_t sub_1BC9E6F9C()
{
  sub_1BCAB6870();
  sub_1BCAB687C();
  return sub_1BCAB6894();
}

uint64_t sub_1BC9E6FE0()
{
  return sub_1BCAB687C();
}

uint64_t sub_1BC9E7008()
{
  sub_1BCAB6870();
  sub_1BCAB687C();
  return sub_1BCAB6894();
}

unint64_t sub_1BC9E7048@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result;
  char v4;

  result = sub_1BC9E76FC(*a1);
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = v4 & 1;
  return result;
}

uint64_t HighlightCalendarDayViewModel.init(monthText:hideMonthText:circleState:accentColor:backgroundColor:dayTextColor:alternateDayTextColorWhenUnselected:dayNumberSize:circleSize:axProjectionState:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, char *a10, char *a11, uint64_t a12)
{
  uint64_t v13;
  char v14;
  char v15;
  char v16;
  uint64_t v17;

  v13 = *(_QWORD *)(a4 + 16);
  v14 = *(_BYTE *)(a4 + 24);
  v15 = *a10;
  v16 = *a11;
  *(_QWORD *)a9 = a1;
  *(_QWORD *)(a9 + 8) = a2;
  *(_BYTE *)(a9 + 16) = a3;
  *(_OWORD *)(a9 + 24) = *(_OWORD *)a4;
  *(_QWORD *)(a9 + 40) = v13;
  *(_BYTE *)(a9 + 48) = v14;
  *(_QWORD *)(a9 + 56) = a5;
  *(_QWORD *)(a9 + 64) = a6;
  *(_QWORD *)(a9 + 72) = a7;
  *(_QWORD *)(a9 + 80) = a8;
  *(_BYTE *)(a9 + 88) = v15;
  *(_BYTE *)(a9 + 89) = v16;
  v17 = type metadata accessor for HighlightCalendarDayViewModel(0);
  return sub_1BC9AE330(a12, a9 + *(int *)(v17 + 52), (uint64_t (*)(_QWORD))sub_1BC9E68A4);
}

id static HighlightCalendarDayViewModel.emptyDayViewModel()@<X0>(uint64_t a1@<X8>)
{
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  id result;

  v2 = (void *)objc_opt_self();
  v3 = objc_msgSend(v2, sel_clearColor);
  v4 = a1 + *(int *)(type metadata accessor for HighlightCalendarDayViewModel(0) + 52);
  v5 = type metadata accessor for AXProjectionState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  result = objc_msgSend(v2, sel_tertiaryLabelColor);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0xE000000000000000;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 48) = 5;
  *(_QWORD *)(a1 + 56) = v3;
  *(_QWORD *)(a1 + 64) = result;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_WORD *)(a1 + 88) = 0;
  return result;
}

void sub_1BC9E71B4()
{
  __asm { BR              X10 }
}

id sub_1BC9E71E8()
{
  uint64_t v0;

  return *(id *)(v0 + 56);
}

id sub_1BC9E7204()
{
  void *v0;
  uint64_t v1;
  void *v2;
  unsigned int v3;
  void *v4;
  id v5;
  id v6;

  v3 = objc_msgSend(v0, sel_isPaused);
  v4 = (void *)objc_opt_self();
  if (v3)
    v5 = objc_msgSend(v4, sel_clearColor);
  else
    v5 = objc_msgSend(v4, sel_blackColor);
  v6 = v5;
  sub_1BC9D5A40(v0, v2, v1, 0);
  return v6;
}

void sub_1BC9E72C0()
{
  uint64_t v1;

  v1 = type metadata accessor for HighlightCalendarDayViewModel(0);
  MEMORY[0x1E0C80A78](v1);
  __asm { BR              X10 }
}

id sub_1BC9E7328()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 72);
  if (v1)
    return v1;
  else
    return objc_msgSend((id)objc_opt_self(), sel_whiteColor);
}

void sub_1BC9E7480()
{
  sub_1BCAB65C4();
  __break(1u);
  JUMPOUT(0x1BC9E74D4);
}

id sub_1BC9E74EC(void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  void *v7;
  uint64_t (*v8)(_QWORD);
  void *v9;
  void *v10;
  id v11;
  id v12;
  void *v13;
  id v14;
  char v15;
  id v16;
  char **v17;
  id v18;
  uint64_t v20;

  v4 = type metadata accessor for HighlightCalendarDayViewModel(0);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(void **)(a2 + 80);
  sub_1BC9964B8(a2, (uint64_t)v6, v8);
  if (v7)
  {
    v9 = v7;
  }
  else
  {
    v10 = (void *)*((_QWORD *)v6 + 9);
    if (v10)
      v11 = v10;
    else
      v11 = objc_msgSend((id)objc_opt_self(), sel_secondaryLabelColor);
    v9 = v11;
  }
  v12 = v7;
  sub_1BC997208((uint64_t)v6, type metadata accessor for HighlightCalendarDayViewModel);
  sub_1BC9A649C(0, (unint64_t *)&qword_1ED6C5B20);
  v13 = (void *)objc_opt_self();
  v14 = objc_msgSend(v13, sel_secondaryLabelColor);
  v15 = sub_1BCAB6330();

  if ((v15 & 1) == 0 || objc_msgSend(a1, sel_accessibilityContrast) != (id)1)
    return v9;
  v16 = objc_msgSend(a1, sel_userInterfaceStyle);
  v17 = &selRef_whiteColor;
  if (v16 != (id)2)
    v17 = &selRef_blackColor;
  v18 = objc_msgSend(v13, *v17);

  return v18;
}

uint64_t AXProjectionState.init(axDate:axProbability:axProjectionKind:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t result;
  _QWORD *v12;

  v10 = sub_1BCAB4E54();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(a5, a1, v10);
  result = type metadata accessor for AXProjectionState(0);
  *(_QWORD *)(a5 + *(int *)(result + 20)) = a2;
  v12 = (_QWORD *)(a5 + *(int *)(result + 24));
  *v12 = a3;
  v12[1] = a4;
  return result;
}

unint64_t sub_1BC9E76FC(unint64_t result)
{
  if (result > 3)
    return 0;
  return result;
}

unint64_t sub_1BC9E7710()
{
  unint64_t result;

  result = qword_1EF478CD0;
  if (!qword_1EF478CD0)
  {
    result = MEMORY[0x1BCCFBE84](&protocol conformance descriptor for HighlightCalendarDayViewModel.NumberSize, &type metadata for HighlightCalendarDayViewModel.NumberSize);
    atomic_store(result, (unint64_t *)&qword_1EF478CD0);
  }
  return result;
}

unint64_t sub_1BC9E7758()
{
  unint64_t result;

  result = qword_1EF478CD8;
  if (!qword_1EF478CD8)
  {
    result = MEMORY[0x1BCCFBE84](&protocol conformance descriptor for HighlightCalendarDayViewModel.CircleSize, &type metadata for HighlightCalendarDayViewModel.CircleSize);
    atomic_store(result, (unint64_t *)&qword_1EF478CD8);
  }
  return result;
}

unint64_t sub_1BC9E77A0()
{
  unint64_t result;

  result = qword_1EF478CE0;
  if (!qword_1EF478CE0)
  {
    result = MEMORY[0x1BCCFBE84](&protocol conformance descriptor for HighlightCalendarDayViewModel.AXProbability, &type metadata for HighlightCalendarDayViewModel.AXProbability);
    atomic_store(result, (unint64_t *)&qword_1EF478CE0);
  }
  return result;
}

unint64_t sub_1BC9E77E8()
{
  unint64_t result;

  result = qword_1EF478CE8;
  if (!qword_1EF478CE8)
  {
    result = MEMORY[0x1BCCFBE84](&protocol conformance descriptor for HighlightCalendarDayViewModel.AXCircleState, &type metadata for HighlightCalendarDayViewModel.AXCircleState);
    atomic_store(result, (unint64_t *)&qword_1EF478CE8);
  }
  return result;
}

uint64_t destroy for HighlightCalendarViewModel()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for HighlightCalendarViewModel(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for HighlightCalendarViewModel(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

uint64_t assignWithTake for HighlightCalendarViewModel(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for HighlightCalendarViewModel(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 25))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for HighlightCalendarViewModel(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 25) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 25) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for HighlightCalendarViewModel()
{
  return &type metadata for HighlightCalendarViewModel;
}

ValueMetadata *type metadata accessor for HighlightCalendarWeekViewModel()
{
  return &type metadata for HighlightCalendarWeekViewModel;
}

uint64_t initializeBufferWithCopyOfBuffer for HighlightCalendarDayViewModel(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  char v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  char v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int (*v22)(char *, uint64_t, uint64_t);
  id v23;
  id v24;
  id v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  void (*v34)(char *, _QWORD, uint64_t, uint64_t);

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v28 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = v28 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v7;
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
    v8 = (void *)a2[3];
    v9 = (void *)a2[4];
    v10 = a2[5];
    v11 = *((_BYTE *)a2 + 48);
    swift_bridgeObjectRetain();
    sub_1BC9D5A08(v8, v9, v10, v11);
    *(_QWORD *)(a1 + 24) = v8;
    *(_QWORD *)(a1 + 32) = v9;
    *(_QWORD *)(a1 + 40) = v10;
    *(_BYTE *)(a1 + 48) = v11;
    v12 = (void *)a2[7];
    v13 = (void *)a2[8];
    *(_QWORD *)(a1 + 56) = v12;
    *(_QWORD *)(a1 + 64) = v13;
    v14 = (void *)a2[9];
    v15 = (void *)a2[10];
    *(_QWORD *)(a1 + 72) = v14;
    *(_QWORD *)(a1 + 80) = v15;
    *(_BYTE *)(a1 + 88) = *((_BYTE *)a2 + 88);
    v16 = *((_BYTE *)a2 + 89);
    v17 = *(int *)(a3 + 52);
    v18 = (char *)a2 + v17;
    v19 = (char *)(a1 + v17);
    *(_BYTE *)(a1 + 89) = v16;
    v20 = type metadata accessor for AXProjectionState(0);
    v21 = *(_QWORD *)(v20 - 8);
    v22 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48);
    v23 = v12;
    v24 = v13;
    v25 = v14;
    v26 = v15;
    if (v22(v18, 1, v20))
    {
      sub_1BC9E68A4();
      memcpy(v19, v18, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    }
    else
    {
      v29 = sub_1BCAB4E54();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v29 - 8) + 16))(v19, v18, v29);
      *(_QWORD *)&v19[*(int *)(v20 + 20)] = *(_QWORD *)&v18[*(int *)(v20 + 20)];
      v30 = *(int *)(v20 + 24);
      v31 = &v19[v30];
      v32 = &v18[v30];
      v33 = *((_QWORD *)v32 + 1);
      *(_QWORD *)v31 = *(_QWORD *)v32;
      *((_QWORD *)v31 + 1) = v33;
      v34 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56);
      swift_bridgeObjectRetain();
      v34(v19, 0, 1, v20);
    }
  }
  return a1;
}

uint64_t destroy for HighlightCalendarDayViewModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  swift_bridgeObjectRelease();
  sub_1BC9D5A40(*(void **)(a1 + 24), *(id *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_BYTE *)(a1 + 48));

  v4 = a1 + *(int *)(a2 + 52);
  v5 = type metadata accessor for AXProjectionState(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, 1, v5);
  if (!(_DWORD)result)
  {
    v7 = sub_1BCAB4E54();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v4, v7);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for HighlightCalendarDayViewModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  char v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  char v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int (*v21)(char *, uint64_t, uint64_t);
  id v22;
  id v23;
  id v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  void (*v32)(char *, _QWORD, uint64_t, uint64_t);

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v7 = *(void **)(a2 + 24);
  v8 = *(void **)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  v10 = *(_BYTE *)(a2 + 48);
  swift_bridgeObjectRetain();
  sub_1BC9D5A08(v7, v8, v9, v10);
  *(_QWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 40) = v9;
  *(_BYTE *)(a1 + 48) = v10;
  v11 = *(void **)(a2 + 56);
  v12 = *(void **)(a2 + 64);
  *(_QWORD *)(a1 + 56) = v11;
  *(_QWORD *)(a1 + 64) = v12;
  v13 = *(void **)(a2 + 72);
  v14 = *(void **)(a2 + 80);
  *(_QWORD *)(a1 + 72) = v13;
  *(_QWORD *)(a1 + 80) = v14;
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  v15 = *(_BYTE *)(a2 + 89);
  v16 = *(int *)(a3 + 52);
  v17 = (char *)(a2 + v16);
  v18 = (char *)(a1 + v16);
  *(_BYTE *)(a1 + 89) = v15;
  v19 = type metadata accessor for AXProjectionState(0);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48);
  v22 = v11;
  v23 = v12;
  v24 = v13;
  v25 = v14;
  if (v21(v17, 1, v19))
  {
    sub_1BC9E68A4();
    memcpy(v18, v17, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
  }
  else
  {
    v27 = sub_1BCAB4E54();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 16))(v18, v17, v27);
    *(_QWORD *)&v18[*(int *)(v19 + 20)] = *(_QWORD *)&v17[*(int *)(v19 + 20)];
    v28 = *(int *)(v19 + 24);
    v29 = &v18[v28];
    v30 = &v17[v28];
    v31 = *((_QWORD *)v30 + 1);
    *(_QWORD *)v29 = *(_QWORD *)v30;
    *((_QWORD *)v29 + 1) = v31;
    v32 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56);
    swift_bridgeObjectRetain();
    v32(v18, 0, 1, v19);
  }
  return a1;
}

uint64_t assignWithCopy for HighlightCalendarDayViewModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  void *v7;
  uint64_t v8;
  char v9;
  void *v10;
  void *v11;
  uint64_t v12;
  char v13;
  void *v14;
  void *v15;
  id v16;
  void *v17;
  void *v18;
  id v19;
  void *v20;
  void *v21;
  id v22;
  void *v23;
  void *v24;
  id v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(char *, uint64_t, uint64_t);
  int v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  void (*v37)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v6 = *(void **)(a2 + 24);
  v7 = *(void **)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_BYTE *)(a2 + 48);
  sub_1BC9D5A08(v6, v7, v8, v9);
  v10 = *(void **)(a1 + 24);
  v11 = *(void **)(a1 + 32);
  v12 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  v13 = *(_BYTE *)(a1 + 48);
  *(_BYTE *)(a1 + 48) = v9;
  sub_1BC9D5A40(v10, v11, v12, v13);
  v14 = *(void **)(a2 + 56);
  v15 = *(void **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v14;
  v16 = v14;

  v17 = *(void **)(a2 + 64);
  v18 = *(void **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v17;
  v19 = v17;

  v20 = *(void **)(a1 + 72);
  v21 = *(void **)(a2 + 72);
  *(_QWORD *)(a1 + 72) = v21;
  v22 = v21;

  v23 = *(void **)(a1 + 80);
  v24 = *(void **)(a2 + 80);
  *(_QWORD *)(a1 + 80) = v24;
  v25 = v24;

  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_BYTE *)(a1 + 89) = *(_BYTE *)(a2 + 89);
  v26 = *(int *)(a3 + 52);
  v27 = (char *)(a1 + v26);
  v28 = (char *)(a2 + v26);
  v29 = type metadata accessor for AXProjectionState(0);
  v30 = *(_QWORD *)(v29 - 8);
  v31 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v30 + 48);
  LODWORD(v7) = v31(v27, 1, v29);
  v32 = v31(v28, 1, v29);
  if (!(_DWORD)v7)
  {
    if (!v32)
    {
      v40 = sub_1BCAB4E54();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v40 - 8) + 24))(v27, v28, v40);
      *(_QWORD *)&v27[*(int *)(v29 + 20)] = *(_QWORD *)&v28[*(int *)(v29 + 20)];
      v41 = *(int *)(v29 + 24);
      v42 = &v27[v41];
      v43 = &v28[v41];
      *(_QWORD *)v42 = *(_QWORD *)v43;
      *((_QWORD *)v42 + 1) = *((_QWORD *)v43 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      return a1;
    }
    sub_1BC997208((uint64_t)v27, type metadata accessor for AXProjectionState);
    goto LABEL_6;
  }
  if (v32)
  {
LABEL_6:
    sub_1BC9E68A4();
    memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
    return a1;
  }
  v33 = sub_1BCAB4E54();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v33 - 8) + 16))(v27, v28, v33);
  *(_QWORD *)&v27[*(int *)(v29 + 20)] = *(_QWORD *)&v28[*(int *)(v29 + 20)];
  v34 = *(int *)(v29 + 24);
  v35 = &v27[v34];
  v36 = &v28[v34];
  *(_QWORD *)v35 = *(_QWORD *)v36;
  *((_QWORD *)v35 + 1) = *((_QWORD *)v36 + 1);
  v37 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v30 + 56);
  swift_bridgeObjectRetain();
  v37(v27, 0, 1, v29);
  return a1;
}

uint64_t initializeWithTake for HighlightCalendarDayViewModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 33) = *(_OWORD *)(a2 + 33);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  v4 = *(int *)(a3 + 52);
  v5 = (char *)(a2 + v4);
  v6 = (char *)(a1 + v4);
  *(_BYTE *)(a1 + 89) = *(_BYTE *)(a2 + 89);
  v7 = type metadata accessor for AXProjectionState(0);
  v8 = *(_QWORD *)(v7 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v7))
  {
    sub_1BC9E68A4();
    memcpy(v6, v5, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  else
  {
    v10 = sub_1BCAB4E54();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v6, v5, v10);
    *(_QWORD *)&v6[*(int *)(v7 + 20)] = *(_QWORD *)&v5[*(int *)(v7 + 20)];
    *(_OWORD *)&v6[*(int *)(v7 + 24)] = *(_OWORD *)&v5[*(int *)(v7 + 24)];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v6, 0, 1, v7);
  }
  return a1;
}

uint64_t assignWithTake for HighlightCalendarDayViewModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  void *v9;
  void *v10;
  uint64_t v11;
  char v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(char *, uint64_t, uint64_t);
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 40);
  v8 = *(_BYTE *)(a2 + 48);
  v9 = *(void **)(a1 + 24);
  v10 = *(void **)(a1 + 32);
  v11 = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = v7;
  v12 = *(_BYTE *)(a1 + 48);
  *(_BYTE *)(a1 + 48) = v8;
  sub_1BC9D5A40(v9, v10, v11, v12);
  v13 = *(void **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);

  v14 = *(void **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);

  v15 = *(void **)(a1 + 72);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);

  v16 = *(void **)(a1 + 80);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);

  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_BYTE *)(a1 + 89) = *(_BYTE *)(a2 + 89);
  v17 = *(int *)(a3 + 52);
  v18 = (char *)(a1 + v17);
  v19 = (char *)(a2 + v17);
  v20 = type metadata accessor for AXProjectionState(0);
  v21 = *(_QWORD *)(v20 - 8);
  v22 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v21 + 48);
  v23 = v22(v18, 1, v20);
  v24 = v22(v19, 1, v20);
  if (!v23)
  {
    if (!v24)
    {
      v28 = sub_1BCAB4E54();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v28 - 8) + 40))(v18, v19, v28);
      *(_QWORD *)&v18[*(int *)(v20 + 20)] = *(_QWORD *)&v19[*(int *)(v20 + 20)];
      v29 = *(int *)(v20 + 24);
      v30 = &v18[v29];
      v31 = &v19[v29];
      v33 = *(_QWORD *)v31;
      v32 = *((_QWORD *)v31 + 1);
      *(_QWORD *)v30 = v33;
      *((_QWORD *)v30 + 1) = v32;
      swift_bridgeObjectRelease();
      return a1;
    }
    sub_1BC997208((uint64_t)v18, type metadata accessor for AXProjectionState);
    goto LABEL_6;
  }
  if (v24)
  {
LABEL_6:
    sub_1BC9E68A4();
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    return a1;
  }
  v25 = sub_1BCAB4E54();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 32))(v18, v19, v25);
  *(_QWORD *)&v18[*(int *)(v20 + 20)] = *(_QWORD *)&v19[*(int *)(v20 + 20)];
  *(_OWORD *)&v18[*(int *)(v20 + 24)] = *(_OWORD *)&v19[*(int *)(v20 + 24)];
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
  return a1;
}

uint64_t getEnumTagSinglePayload for HighlightCalendarDayViewModel()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BC9E8334(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    sub_1BC9E68A4();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 52), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for HighlightCalendarDayViewModel()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BC9E83BC(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    sub_1BC9E68A4();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 52), a2, a2, v7);
  }
  return result;
}

void sub_1BC9E8430()
{
  unint64_t v0;

  sub_1BC9E68A4();
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

void destroy for HighlightCalendarDayViewModel.CircleState(uint64_t a1)
{
  sub_1BC9D5A40(*(void **)a1, *(id *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24));
}

uint64_t initializeWithCopy for HighlightCalendarDayViewModel.CircleState(uint64_t a1, uint64_t a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  char v6;

  v3 = *(id *)a2;
  v4 = *(void **)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_BYTE *)(a2 + 24);
  sub_1BC9D5A08(*(id *)a2, v4, v5, v6);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 24) = v6;
  return a1;
}

uint64_t assignWithCopy for HighlightCalendarDayViewModel.CircleState(uint64_t a1, uint64_t a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  char v6;
  void *v7;
  void *v8;
  uint64_t v9;
  char v10;

  v3 = *(id *)a2;
  v4 = *(void **)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_BYTE *)(a2 + 24);
  sub_1BC9D5A08(*(id *)a2, v4, v5, v6);
  v7 = *(void **)a1;
  v8 = *(void **)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  v10 = *(_BYTE *)(a1 + 24);
  *(_BYTE *)(a1 + 24) = v6;
  sub_1BC9D5A40(v7, v8, v9, v10);
  return a1;
}

uint64_t assignWithTake for HighlightCalendarDayViewModel.CircleState(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  void *v5;
  uint64_t v6;
  void *v7;
  char v8;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_BYTE *)(a2 + 24);
  v5 = *(void **)a1;
  v7 = *(void **)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = v3;
  v8 = *(_BYTE *)(a1 + 24);
  *(_BYTE *)(a1 + 24) = v4;
  sub_1BC9D5A40(v5, v7, v6, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for HighlightCalendarDayViewModel.CircleState(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFB && *(_BYTE *)(a1 + 25))
    return (*(_DWORD *)a1 + 251);
  v3 = *(unsigned __int8 *)(a1 + 24);
  if (v3 <= 5)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for HighlightCalendarDayViewModel.CircleState(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFA)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 251;
    if (a3 >= 0xFB)
      *(_BYTE *)(result + 25) = 1;
  }
  else
  {
    if (a3 >= 0xFB)
      *(_BYTE *)(result + 25) = 0;
    if (a2)
      *(_BYTE *)(result + 24) = -(char)a2;
  }
  return result;
}

uint64_t sub_1BC9E8698(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 24) <= 4u)
    return *(unsigned __int8 *)(a1 + 24);
  else
    return (*(_DWORD *)a1 + 5);
}

uint64_t sub_1BC9E86B0(uint64_t result, unsigned int a2)
{
  uint64_t v2;

  v2 = a2 - 5;
  if (a2 >= 5)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    LOBYTE(a2) = 5;
    *(_QWORD *)result = v2;
  }
  *(_BYTE *)(result + 24) = a2;
  return result;
}

ValueMetadata *type metadata accessor for HighlightCalendarDayViewModel.CircleState()
{
  return &type metadata for HighlightCalendarDayViewModel.CircleState;
}

ValueMetadata *type metadata accessor for HighlightCalendarDayViewModel.CircleState.Constants()
{
  return &type metadata for HighlightCalendarDayViewModel.CircleState.Constants;
}

uint64_t storeEnumTagSinglePayload for HighlightCalendarDayViewModel.NumberSize(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1BC9E8738 + 4 * byte_1BCAC146F[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1BC9E876C + 4 * byte_1BCAC146A[v4]))();
}

uint64_t sub_1BC9E876C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BC9E8774(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BC9E877CLL);
  return result;
}

uint64_t sub_1BC9E8788(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BC9E8790);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1BC9E8794(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BC9E879C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for HighlightCalendarDayViewModel.NumberSize()
{
  return &type metadata for HighlightCalendarDayViewModel.NumberSize;
}

uint64_t storeEnumTagSinglePayload for HighlightCalendarDayViewModel.CircleSize(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1BC9E8804 + 4 * byte_1BCAC1479[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1BC9E8838 + 4 * byte_1BCAC1474[v4]))();
}

uint64_t sub_1BC9E8838(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BC9E8840(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BC9E8848);
  return result;
}

uint64_t sub_1BC9E8854(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BC9E885CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1BC9E8860(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BC9E8868(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for HighlightCalendarDayViewModel.CircleSize()
{
  return &type metadata for HighlightCalendarDayViewModel.CircleSize;
}

ValueMetadata *type metadata accessor for HighlightCalendarDayViewModel.AXProbability()
{
  return &type metadata for HighlightCalendarDayViewModel.AXProbability;
}

ValueMetadata *type metadata accessor for HighlightCalendarDayViewModel.AXCircleState()
{
  return &type metadata for HighlightCalendarDayViewModel.AXCircleState;
}

uint64_t *initializeBufferWithCopyOfBuffer for AXProjectionState(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_1BCAB4E54();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 24);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
    v9 = (uint64_t *)((char *)a1 + v8);
    v10 = (uint64_t *)((char *)a2 + v8);
    v11 = v10[1];
    *v9 = *v10;
    v9[1] = v11;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for AXProjectionState(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1BCAB4E54();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for AXProjectionState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;

  v6 = sub_1BCAB4E54();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 24);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  v10 = v9[1];
  *v8 = *v9;
  v8[1] = v10;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AXProjectionState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;

  v6 = sub_1BCAB4E54();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  v7 = *(int *)(a3 + 24);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  *v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for AXProjectionState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = sub_1BCAB4E54();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 24);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  return a1;
}

uint64_t assignWithTake for AXProjectionState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;

  v6 = sub_1BCAB4E54();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 24);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  v8 = (_QWORD *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v11 = *v9;
  v10 = v9[1];
  *v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AXProjectionState()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BC9E8B64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;

  v6 = sub_1BCAB4E54();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 24) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  v10 = v9 - 1;
  if (v10 < 0)
    v10 = -1;
  return (v10 + 1);
}

uint64_t storeEnumTagSinglePayload for AXProjectionState()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BC9E8BFC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_1BCAB4E54();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 24) + 8) = a2;
  return result;
}

uint64_t sub_1BC9E8C78()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1BCAB4E54();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1BC9E8CF8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for HighlightCalendarDayViewModel(0);
  v2 = *(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80);
  v3 = v0 + ((v2 + 16) & ~v2);
  swift_bridgeObjectRelease();
  sub_1BC9D5A40(*(void **)(v3 + 24), *(id *)(v3 + 32), *(_QWORD *)(v3 + 40), *(_BYTE *)(v3 + 48));

  v4 = v3 + *(int *)(v1 + 52);
  v5 = type metadata accessor for AXProjectionState(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, 1, v5))
  {
    v6 = sub_1BCAB4E54();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v4, v6);
    swift_bridgeObjectRelease();
  }
  return swift_deallocObject();
}

id sub_1BC9E8DE4(void *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for HighlightCalendarDayViewModel(0) - 8) + 80);
  return sub_1BC9E74EC(a1, v1 + ((v3 + 16) & ~v3));
}

uint64_t DisplayTypeProviding.displayType.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  _QWORD v11[2];
  unint64_t v12;
  unint64_t v13;

  v5 = *(_QWORD *)(a1 - 8);
  MEMORY[0x1E0C80A78](a1);
  v7 = (char *)v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = (uint64_t)DisplayTypeProviding.maybeDisplayType.getter(v8, v9);
  if (!result)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v2, a1);
    v12 = 0;
    v13 = 0xE000000000000000;
    sub_1BCAB64C8();
    swift_bridgeObjectRelease();
    v12 = 0xD000000000000024;
    v13 = 0x80000001BCAD0530;
    v11[1] = ObjectTypeIdentifiable.objectType.getter(a1, *(_QWORD *)(a2 + 8));
    sub_1BC9E9030();
    sub_1BCAB5F28();
    sub_1BCAB5F70();
    swift_bridgeObjectRelease();
    result = sub_1BCAB65C4();
    __break(1u);
  }
  return result;
}

uint64_t sub_1BC9E8F5C()
{
  return 0;
}

uint64_t DisplayTypeProviding.healthStore.getter()
{
  return 0;
}

id DisplayTypeProviding.maybeDisplayType.getter(uint64_t a1, uint64_t a2)
{
  void *v4;
  id v5;
  id result;
  id v7;
  id v8;

  v4 = (void *)(*(uint64_t (**)(void))(a2 + 24))();
  v5 = objc_msgSend(v4, sel_displayTypeController);

  if (v5
    || (result = objc_msgSend((id)objc_opt_self(), sel_sharedInstance),
        (v5 = result) != 0))
  {
    v7 = ObjectTypeIdentifiable.objectType.getter(a1, *(_QWORD *)(a2 + 8));
    v8 = objc_msgSend(v5, sel_displayTypeForObjectType_, v7);

    return v8;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_1BC9E9030()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EF478CF0)
  {
    sub_1BC9E9084();
    v0 = sub_1BCAB6384();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EF478CF0);
  }
}

unint64_t sub_1BC9E9084()
{
  unint64_t result;

  result = qword_1ED6C4628;
  if (!qword_1ED6C4628)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1ED6C4628);
  }
  return result;
}

uint64_t dispatch thunk of DisplayTypeProviding.displayType.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of DisplayTypeProviding.healthStore.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t sub_1BC9E90D0()
{
  uint64_t v0;

  return sub_1BCA07BAC(*(_QWORD *)v0, *(_QWORD *)(v0 + 8), *(void **)(v0 + 16));
}

double CGSize.init(horizontalRange:)(double a1, double a2)
{
  return a2 - a1;
}

double CGSize.init(verticalRange:)()
{
  return 0.0;
}

void CGRect.horizontalRange.getter(double a1, double a2, double a3, double a4)
{
  sub_1BC9E911C((double (*)(void))MEMORY[0x1E0C9D5C0], (double (*)(double, double, double, double))MEMORY[0x1E0C9D588], a1, a2, a3, a4);
}

void CGRect.verticalRange.getter(double a1, double a2, double a3, double a4)
{
  sub_1BC9E911C((double (*)(void))MEMORY[0x1E0C9D5C8], (double (*)(double, double, double, double))MEMORY[0x1E0C9D5A0], a1, a2, a3, a4);
}

void sub_1BC9E911C(double (*a1)(void), double (*a2)(double, double, double, double), double a3, double a4, double a5, double a6)
{
  double v11;

  v11 = a1();
  if (v11 > a2(a3, a4, a5, a6))
    __break(1u);
}

double CGRect.adjusted(by:verticalCoordinateRange:)(uint64_t a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5, uint64_t a6, char a7, uint64_t a8, uint64_t a9, char a10)
{
  double v15;
  CGRect v17;
  CGRect v18;

  if ((a7 & 1) == 0)
  {
    if (*(double *)&a1 >= a2)
      v15 = a2;
    else
      v15 = *(double *)&a1;
    CGRectGetMaxX(*(CGRect *)&a2);
    if ((a10 & 1) != 0)
      goto LABEL_6;
LABEL_8:
    v18.origin.x = a2;
    v18.origin.y = a3;
    v18.size.width = a4;
    v18.size.height = a5;
    CGRectGetMaxY(v18);
    return v15;
  }
  CGRectGetWidth(*(CGRect *)&a2);
  v15 = a2;
  if ((a10 & 1) == 0)
    goto LABEL_8;
LABEL_6:
  v17.origin.x = a2;
  v17.origin.y = a3;
  v17.size.width = a4;
  v17.size.height = a5;
  CGRectGetHeight(v17);
  return v15;
}

uint64_t NSOperation.registerStateObservationSignposts(logHandle:)(void *a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  id v10;
  uint64_t v12;
  _QWORD *v13;
  id v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  id v21;
  id v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  id v42;
  void *v43;
  void *v44;
  id v45;
  id v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(uint64_t, char *, uint64_t);
  uint64_t v51;
  uint64_t v52;
  void (*v53)(char *, char *, uint64_t);
  uint64_t KeyPath;
  uint64_t v55;
  id v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  _OWORD v60[2];

  v2 = v1;
  v4 = sub_1BCAB54A8();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  MEMORY[0x1E0C80A78](v4);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v48 - v8;
  swift_beginAccess();
  v10 = objc_getAssociatedObject(v2, &unk_1EF478CF8);
  swift_endAccess();
  if (v10)
  {
    sub_1BCAB63CC();
    swift_unknownObjectRelease();
    return sub_1BC9A10A0((uint64_t)v60);
  }
  else
  {
    memset(v60, 0, sizeof(v60));
    sub_1BC9A10A0((uint64_t)v60);
    sub_1BCAB61BC();
    sub_1BC9A7EF4();
    v12 = swift_allocObject();
    v59 = v9;
    v13 = (_QWORD *)v12;
    *(_OWORD *)(v12 + 16) = xmmword_1BCABFE80;
    v14 = v2;
    v15 = objc_msgSend(v14, sel_description);
    v16 = sub_1BCAB5F04();
    v58 = v5;
    v18 = v17;

    v55 = v4;
    v19 = MEMORY[0x1E0DEA968];
    v13[7] = MEMORY[0x1E0DEA968];
    v20 = sub_1BC9A7FA4();
    v13[4] = v16;
    v13[5] = v18;
    v13[12] = v19;
    v13[13] = v20;
    v13[8] = v20;
    v13[9] = 0xD00000000000002DLL;
    v13[10] = 0x80000001BCAD0580;
    sub_1BCAB5478();
    swift_bridgeObjectRelease();
    v21 = v14;
    v22 = a1;
    v23 = v59;
    sub_1BCAB549C();
    *(_QWORD *)&v60[0] = swift_getObjectType();
    sub_1BC9E9834();
    v49 = sub_1BCAB5F28();
    v57 = v24;
    *(_QWORD *)&v60[0] = v21;
    KeyPath = swift_getKeyPath();
    v25 = swift_allocObject();
    swift_unknownObjectWeakInit();
    v26 = v58;
    v53 = *(void (**)(char *, char *, uint64_t))(v58 + 16);
    v27 = (char *)&v48 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
    v28 = v55;
    v53(v27, v23, v55);
    v29 = *(unsigned __int8 *)(v26 + 80);
    v30 = (v29 + 32) & ~v29;
    v51 = v6 + 7;
    v52 = v29 | 7;
    v31 = swift_allocObject();
    *(_QWORD *)(v31 + 16) = v25;
    *(_QWORD *)(v31 + 24) = v22;
    v50 = *(void (**)(uint64_t, char *, uint64_t))(v26 + 32);
    v50(v31 + v30, v27, v28);
    v32 = (uint64_t *)(v31 + ((v6 + 7 + v30) & 0xFFFFFFFFFFFFFFF8));
    v33 = v49;
    v34 = v57;
    *v32 = v49;
    v32[1] = v34;
    v35 = v22;
    swift_bridgeObjectRetain();
    v56 = (id)sub_1BCAB4D64();
    swift_release();
    swift_release();
    *(_QWORD *)&v60[0] = v21;
    swift_getKeyPath();
    v53(v27, v59, v28);
    v36 = (v29 + 24) & ~v29;
    v37 = (v51 + v36) & 0xFFFFFFFFFFFFFFF8;
    v38 = swift_allocObject();
    *(_QWORD *)(v38 + 16) = v35;
    v39 = v28;
    v50(v38 + v36, v27, v28);
    v40 = (uint64_t *)(v38 + v37);
    v41 = v57;
    *v40 = v33;
    v40[1] = v41;
    v42 = v35;
    v43 = (void *)sub_1BCAB4D64();
    swift_release();
    swift_release();
    *(_QWORD *)&v60[0] = v21;
    swift_getKeyPath();
    swift_allocObject();
    swift_unknownObjectWeakInit();
    v44 = (void *)sub_1BCAB4D64();
    swift_release();
    swift_release();
    swift_beginAccess();
    v45 = v56;
    objc_setAssociatedObject(v21, &unk_1EF478CF8, v45, (void *)1);
    swift_endAccess();

    swift_beginAccess();
    v46 = v43;
    objc_setAssociatedObject(v21, &unk_1EF478CF9, v46, (void *)1);
    swift_endAccess();

    swift_beginAccess();
    v47 = v44;
    objc_setAssociatedObject(v21, &unk_1EF478CFA, v47, (void *)1);
    swift_endAccess();

    return (*(uint64_t (**)(char *, uint64_t))(v58 + 8))(v59, v39);
  }
}

unint64_t sub_1BC9E97E0()
{
  unint64_t result;

  result = qword_1ED6C7548;
  if (!qword_1ED6C7548)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1ED6C7548);
  }
  return result;
}

unint64_t sub_1BC9E9834()
{
  unint64_t result;

  result = qword_1ED6C6E58;
  if (!qword_1ED6C6E58)
  {
    sub_1BC9E986C();
    result = swift_getMetatypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1ED6C6E58);
  }
  return result;
}

unint64_t sub_1BC9E986C()
{
  unint64_t result;

  result = qword_1ED6C6E50;
  if (!qword_1ED6C6E50)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1ED6C6E50);
  }
  return result;
}

char *keypath_get_selector_isExecuting()
{
  return sel_isExecuting;
}

uint64_t NSOperation.unregisterStateObservationSignposts(logHandle:)()
{
  void *v0;
  uint64_t v1;
  id v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  sub_1BCAB61BC();
  sub_1BC9A7EF4();
  v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_1BCABFE80;
  v2 = v0;
  v3 = objc_msgSend(v2, sel_description);
  v4 = sub_1BCAB5F04();
  v6 = v5;

  v7 = MEMORY[0x1E0DEA968];
  *(_QWORD *)(v1 + 56) = MEMORY[0x1E0DEA968];
  v8 = sub_1BC9A7FA4();
  *(_QWORD *)(v1 + 32) = v4;
  *(_QWORD *)(v1 + 40) = v6;
  *(_QWORD *)(v1 + 96) = v7;
  *(_QWORD *)(v1 + 104) = v8;
  *(_QWORD *)(v1 + 64) = v8;
  *(_QWORD *)(v1 + 72) = 0xD00000000000002FLL;
  *(_QWORD *)(v1 + 80) = 0x80000001BCAD05B0;
  sub_1BCAB5478();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  sub_1BC9EA088(&unk_1EF478CF8);
  swift_endAccess();
  swift_beginAccess();
  sub_1BC9EA088(&unk_1EF478CF9);
  swift_endAccess();
  swift_beginAccess();
  sub_1BC9EA088(&unk_1EF478CFA);
  return swift_endAccess();
}

id sub_1BC9E9A40@<X0>(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, sel_isExecuting);
  *a2 = (_BYTE)result;
  return result;
}

void sub_1BC9E9A70(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  void *v20;
  void (*v21)(char *, uint64_t, uint64_t);
  id v22;
  char v23;
  char v24;
  void (*v25)(char *, uint64_t);
  void (*v26)(char *, uint64_t);
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;

  v12 = sub_1BCAB54A8();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16);
  v18 = (char *)&v30 - v17;
  swift_beginAccess();
  v19 = MEMORY[0x1BCCFC004](a3 + 16);
  if (v19)
  {
    v20 = (void *)v19;
    v31 = a6;
    v21 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
    v21(v18, a5, v12);
    v21(v15, a5, v12);
    sub_1BC9A1210(0, &qword_1ED6C6970, MEMORY[0x1E0DEAFA0], MEMORY[0x1E0CAFB10]);
    v22 = a4;
    swift_bridgeObjectRetain();
    sub_1BCAB4D58();
    v23 = v32;
    if (v32 == 2 || (sub_1BCAB4D4C(), v24 = v32, v32 == 2))
    {
      v25 = *(void (**)(char *, uint64_t))(v13 + 8);
      v25(v15, v12);
      v25(v18, v12);
    }
    else
    {
      v26 = *(void (**)(char *, uint64_t))(v13 + 8);
      if ((v23 & 1) != 0)
      {
        v26(v18, v12);
        if ((v24 & 1) == 0)
        {
          sub_1BCAB6264();
          sub_1BC9A7EF4();
          v29 = swift_allocObject();
          *(_OWORD *)(v29 + 16) = xmmword_1BCABE680;
          *(_QWORD *)(v29 + 56) = MEMORY[0x1E0DEA968];
          *(_QWORD *)(v29 + 64) = sub_1BC9A7FA4();
          *(_QWORD *)(v29 + 32) = v31;
          *(_QWORD *)(v29 + 40) = a7;
          swift_bridgeObjectRetain();
          sub_1BCAB5484();
          swift_bridgeObjectRelease();
        }
        v28 = v15;
      }
      else
      {
        v26(v15, v12);
        if ((v24 & 1) != 0)
        {
          sub_1BCAB6270();
          sub_1BC9A7EF4();
          v27 = swift_allocObject();
          *(_OWORD *)(v27 + 16) = xmmword_1BCABE680;
          *(_QWORD *)(v27 + 56) = MEMORY[0x1E0DEA968];
          *(_QWORD *)(v27 + 64) = sub_1BC9A7FA4();
          *(_QWORD *)(v27 + 32) = v31;
          *(_QWORD *)(v27 + 40) = a7;
          swift_bridgeObjectRetain();
          sub_1BCAB5484();
          swift_bridgeObjectRelease();
        }
        v28 = v18;
      }
      v26(v28, v12);
    }
    swift_bridgeObjectRelease();

  }
}

id sub_1BC9E9D84(id *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  id result;
  uint64_t v9;

  result = objc_msgSend(*a1, sel_isCancelled);
  if ((_DWORD)result)
  {
    sub_1BCAB627C();
    sub_1BC9A7EF4();
    v9 = swift_allocObject();
    *(_OWORD *)(v9 + 16) = xmmword_1BCABE680;
    *(_QWORD *)(v9 + 56) = MEMORY[0x1E0DEA968];
    *(_QWORD *)(v9 + 64) = sub_1BC9A7FA4();
    *(_QWORD *)(v9 + 32) = a5;
    *(_QWORD *)(v9 + 40) = a6;
    swift_bridgeObjectRetain();
    sub_1BCAB5484();
    return (id)swift_bridgeObjectRelease();
  }
  return result;
}

void sub_1BC9E9E84(id *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  void *v5;
  id v6;
  uint64_t v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;

  if (objc_msgSend(*a1, sel_isFinished))
  {
    swift_beginAccess();
    v4 = MEMORY[0x1BCCFC004](a3 + 16);
    if (v4)
    {
      v5 = (void *)v4;
      if (qword_1ED6C7080 != -1)
        swift_once();
      v6 = (id)qword_1ED6C69A8;
      sub_1BCAB61BC();
      sub_1BC9A7EF4();
      v7 = swift_allocObject();
      *(_OWORD *)(v7 + 16) = xmmword_1BCABFE80;
      v8 = v5;
      v9 = objc_msgSend(v8, sel_description);
      v10 = sub_1BCAB5F04();
      v12 = v11;

      v13 = MEMORY[0x1E0DEA968];
      *(_QWORD *)(v7 + 56) = MEMORY[0x1E0DEA968];
      v14 = sub_1BC9A7FA4();
      *(_QWORD *)(v7 + 32) = v10;
      *(_QWORD *)(v7 + 40) = v12;
      *(_QWORD *)(v7 + 96) = v13;
      *(_QWORD *)(v7 + 104) = v14;
      *(_QWORD *)(v7 + 64) = v14;
      *(_QWORD *)(v7 + 72) = 0xD00000000000002FLL;
      *(_QWORD *)(v7 + 80) = 0x80000001BCAD05B0;
      sub_1BCAB5478();
      swift_bridgeObjectRelease();
      swift_beginAccess();
      sub_1BC9EA088(&unk_1EF478CF8);
      swift_endAccess();
      swift_beginAccess();
      sub_1BC9EA088(&unk_1EF478CF9);
      swift_endAccess();
      swift_beginAccess();
      sub_1BC9EA088(&unk_1EF478CFA);
      swift_endAccess();

    }
  }
}

void sub_1BC9EA088(void *key)
{
  void *v1;
  void *v3;
  _OWORD v4[2];
  _BYTE v5[24];
  uint64_t v6;

  if (objc_getAssociatedObject(v1, key))
  {
    sub_1BCAB63CC();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v4, 0, sizeof(v4));
  }
  sub_1BC9EA410((uint64_t)v4, (uint64_t)v5);
  if (v6)
  {
    sub_1BCAB4D28();
    if ((swift_dynamicCast() & 1) != 0)
    {
      sub_1BCAB4D1C();
      objc_setAssociatedObject(v1, key, 0, (void *)1);

    }
  }
  else
  {
    sub_1BC9A10A0((uint64_t)v5);
  }
}

uint64_t sub_1BC9EA15C()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1BC9EA180()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = sub_1BCAB54A8();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();

  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

void sub_1BC9EA21C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;

  v5 = *(_QWORD *)(sub_1BCAB54A8() - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = (uint64_t *)(v2 + ((*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8));
  sub_1BC9E9A70(a1, a2, *(_QWORD *)(v2 + 16), *(void **)(v2 + 24), v2 + v6, *v7, v7[1]);
}

char *keypath_get_selector_isCancelled()
{
  return sel_isCancelled;
}

id sub_1BC9EA290@<X0>(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, sel_isCancelled);
  *a2 = (_BYTE)result;
  return result;
}

uint64_t sub_1BC9EA2C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = sub_1BCAB54A8();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);

  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

id sub_1BC9EA354(id *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;

  v5 = *(_QWORD *)(sub_1BCAB54A8() - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = (uint64_t *)(v2 + ((*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8));
  return sub_1BC9E9D84(a1, a2, *(_QWORD *)(v2 + 16), v2 + v6, *v7, v7[1]);
}

char *keypath_get_selector_isFinished()
{
  return sel_isFinished;
}

id sub_1BC9EA3C8@<X0>(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, sel_isFinished);
  *a2 = (_BYTE)result;
  return result;
}

void sub_1BC9EA3F8(id *a1, uint64_t a2)
{
  uint64_t v2;

  sub_1BC9E9E84(a1, a2, v2);
}

uint64_t dispatch thunk of OperationStateSignpostObserving.registerStateObservationSignposts(logHandle:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t dispatch thunk of OperationStateSignpostObserving.unregisterStateObservationSignposts(logHandle:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t sub_1BC9EA410(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1BC9A1210(0, (unint64_t *)&qword_1ED6C7510, MEMORY[0x1E0DEE9B8] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

id sub_1BC9EA470()
{
  id v0;
  id result;

  v0 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37F0]), sel_init);
  objc_msgSend(v0, sel_setNumberStyle_, 0);
  result = objc_msgSend(v0, sel_setRoundingMode_, 4);
  qword_1ED6C70E8 = (uint64_t)v0;
  return result;
}

void HKActivitySummary.createCaloriesText(_:valueFont:unitFont:hbxViewControllerFactory:)(uint64_t a1, void *a2, void *a3, void *a4)
{
  void *v4;
  void *v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  _BYTE *v17;
  id v18;
  void *v19;
  id v20;
  id v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  id v31;
  double v32;
  double v33;
  void *v34;
  id v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t inited;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  NSObject *v44;
  os_log_type_t v45;
  uint8_t *v46;
  NSObject *v47;
  os_log_type_t v48;
  uint8_t *v49;
  _BYTE v50[96];
  _BYTE v51[32];

  v5 = v4;
  v10 = sub_1BCAB5514();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = &v50[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  *(_QWORD *)&v15 = MEMORY[0x1E0C80A78](v14).n128_u64[0];
  v17 = &v50[-v16];
  v18 = objc_msgSend(v5, sel_activityMoveMode, v15);
  if (v18 == (id)2)
  {
    v30 = objc_msgSend(v5, sel_appleMoveTime);
    v31 = objc_msgSend((id)objc_opt_self(), sel_minuteUnit);
    objc_msgSend(v30, sel_doubleValueForUnit_, v31);
    v33 = v32;

    if (qword_1ED6C70F0 != -1)
      swift_once();
    v34 = (void *)qword_1ED6C70E8;
    v35 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithDouble_, v33);
    v36 = objc_msgSend(v34, sel_stringFromNumber_, v35);

    if (v36)
    {
      v23 = sub_1BCAB5F04();
      v25 = v37;

      sub_1BC99C384(a1, (uint64_t)v51);
      if (qword_1ED6C7070 != -1)
        swift_once();
      v27 = sub_1BC9A1984(0xD000000000000021, 0x80000001BCAD0640, 0, (uint64_t)v51, 0, 0);
      v29 = v38;
      sub_1BC9A10A0((uint64_t)v51);
LABEL_11:
      sub_1BC9EC1CC(0, &qword_1ED6C7118, (void (*)(uint64_t))sub_1BC9DD77C);
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1BCABFE80;
      *(_QWORD *)(inited + 32) = 0x45554C4156;
      *(_QWORD *)(inited + 40) = 0xE500000000000000;
      *(_QWORD *)(inited + 48) = v23;
      *(_QWORD *)(inited + 56) = v25;
      *(_QWORD *)(inited + 64) = 1414090325;
      *(_QWORD *)(inited + 72) = 0xE400000000000000;
      *(_QWORD *)(inited + 80) = v27;
      *(_QWORD *)(inited + 88) = v29;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v40 = sub_1BCA927D8(inited);
      sub_1BC99C384(a1, (uint64_t)v51);
      if (qword_1ED6C7070 != -1)
        swift_once();
      v41 = sub_1BC9A1984(0xD00000000000001DLL, 0x80000001BCAD0670, v40, (uint64_t)v51, 0, 0);
      v43 = v42;
      swift_bridgeObjectRelease();
      sub_1BC9A10A0((uint64_t)v51);
      _sSo17HKActivitySummaryC19HealthVisualizationE22createAttributedString4from9valueText0I4Font04unitJ00lK0So012NSAttributedG0CSgSS_SSSo6UIFontCSSANtF_0(v41, v43, v23, v25, a2, v27, v29, a3);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return;
    }
    sub_1BCAB54D8();
    v47 = sub_1BCAB54FC();
    v48 = sub_1BCAB61A4();
    if (os_log_type_enabled(v47, v48))
    {
      v49 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v49 = 0;
      _os_log_impl(&dword_1BC989000, v47, v48, "Snippets: Unable to format apple move time text for Activity Summary.", v49, 2u);
      MEMORY[0x1BCCFBF5C](v49, -1, -1);
    }

    (*(void (**)(_BYTE *, uint64_t))(v11 + 8))(v17, v10);
  }
  else
  {
    if (v18 == (id)1)
    {
      sub_1BC9A649C(0, (unint64_t *)&qword_1ED6C7260);
      v19 = (void *)MEMORY[0x1BCCFADBC]((id)*MEMORY[0x1E0CB5A48]);
      v20 = objc_msgSend(a4, sel_preferredUnitForType_, v19);

      v21 = objc_msgSend(v5, sel_activeEnergyBurned);
      v22 = (id)HKLocalizedStringWithEnergy();

      if (!v22)
      {
        __break(1u);
        return;
      }
      v23 = sub_1BCAB5F04();
      v25 = v24;

      v26 = objc_msgSend(a4, sel_localizedDisplayNameForUnit_, v20);
      v27 = sub_1BCAB5F04();
      v29 = v28;

      goto LABEL_11;
    }
    sub_1BCAB54D8();
    v44 = sub_1BCAB54FC();
    v45 = sub_1BCAB61A4();
    if (os_log_type_enabled(v44, v45))
    {
      v46 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v46 = 0;
      _os_log_impl(&dword_1BC989000, v44, v45, "Snippets: Unsupported activity move mode.", v46, 2u);
      MEMORY[0x1BCCFBF5C](v46, -1, -1);
    }

    (*(void (**)(_BYTE *, uint64_t))(v11 + 8))(v13, v10);
  }
}

id HKActivitySummary.createExerciseText(_:valueFont:unitFont:)(uint64_t a1, void *a2, void *a3)
{
  void *v3;
  void *v4;
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  _BYTE *v12;
  id v13;
  id v14;
  double v15;
  double v16;
  void *v17;
  id v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t inited;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  _BYTE v37[32];

  v4 = v3;
  v8 = sub_1BCAB5514();
  v9 = *(_QWORD *)(v8 - 8);
  *(_QWORD *)&v10 = MEMORY[0x1E0C80A78](v8).n128_u64[0];
  v12 = v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0) + 94;
  v13 = objc_msgSend(v4, sel_appleExerciseTime, v10);
  v14 = objc_msgSend((id)objc_opt_self(), sel_minuteUnit);
  objc_msgSend(v13, sel_doubleValueForUnit_, v14);
  v16 = v15;

  if (qword_1ED6C70F0 != -1)
    swift_once();
  v17 = (void *)qword_1ED6C70E8;
  v18 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithDouble_, v16);
  v19 = objc_msgSend(v17, sel_stringFromNumber_, v18);

  if (v19)
  {
    v20 = sub_1BCAB5F04();
    v22 = v21;

    sub_1BC99C384(a1, (uint64_t)v37);
    if (qword_1ED6C7070 != -1)
      swift_once();
    v23 = sub_1BC9A1984(0xD00000000000001ELL, 0x80000001BCAD0690, 0, (uint64_t)v37, 0, 0);
    v25 = v24;
    sub_1BC9A10A0((uint64_t)v37);
    sub_1BC9EC1CC(0, &qword_1ED6C7118, (void (*)(uint64_t))sub_1BC9DD77C);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1BCABFE80;
    *(_QWORD *)(inited + 32) = 0x45554C4156;
    *(_QWORD *)(inited + 40) = 0xE500000000000000;
    *(_QWORD *)(inited + 48) = v20;
    *(_QWORD *)(inited + 56) = v22;
    *(_QWORD *)(inited + 64) = 1414090325;
    *(_QWORD *)(inited + 72) = 0xE400000000000000;
    *(_QWORD *)(inited + 80) = v23;
    *(_QWORD *)(inited + 88) = v25;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v27 = sub_1BCA927D8(inited);
    sub_1BC99C384(a1, (uint64_t)v37);
    v28 = sub_1BC9A1984(0xD00000000000001DLL, 0x80000001BCAD0670, v27, (uint64_t)v37, 0, 0);
    v30 = v29;
    swift_bridgeObjectRelease();
    sub_1BC9A10A0((uint64_t)v37);
    v31 = _sSo17HKActivitySummaryC19HealthVisualizationE22createAttributedString4from9valueText0I4Font04unitJ00lK0So012NSAttributedG0CSgSS_SSSo6UIFontCSSANtF_0(v28, v30, v20, v22, a2, v23, v25, a3);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_1BCAB54D8();
    v32 = sub_1BCAB54FC();
    v33 = sub_1BCAB61A4();
    if (os_log_type_enabled(v32, v33))
    {
      v34 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v34 = 0;
      _os_log_impl(&dword_1BC989000, v32, v33, "Snippets: Unable to format exercise text for Activity Summary.", v34, 2u);
      MEMORY[0x1BCCFBF5C](v34, -1, -1);
    }

    (*(void (**)(_BYTE *, uint64_t))(v9 + 8))(v12, v8);
    return 0;
  }
  return v31;
}

void HKActivitySummary.createStandHoursText(_:valueFont:unitFont:)(uint64_t a1, void *a2, void *a3)
{
  void *v3;
  void *v4;
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  _BYTE *v12;
  id v13;
  id v14;
  double v15;
  double v16;
  void *v17;
  id v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t inited;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  _BYTE v36[32];

  v4 = v3;
  v8 = sub_1BCAB5514();
  v9 = *(_QWORD *)(v8 - 8);
  *(_QWORD *)&v10 = MEMORY[0x1E0C80A78](v8).n128_u64[0];
  v12 = &v36[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = objc_msgSend(v4, sel_appleStandHours, v10);
  v14 = objc_msgSend((id)objc_opt_self(), sel_countUnit);
  objc_msgSend(v13, sel_doubleValueForUnit_, v14);
  v16 = v15;

  if (qword_1ED6C70F0 != -1)
    swift_once();
  v17 = (void *)qword_1ED6C70E8;
  v18 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithDouble_, v16);
  v19 = objc_msgSend(v17, sel_stringFromNumber_, v18);

  if (v19)
  {
    v20 = sub_1BCAB5F04();
    v22 = v21;

    v23 = (void *)sub_1BCAB5EE0();
    v24 = (id)HKUILocalizedString();

    if (v24)
    {
      v25 = sub_1BCAB5F04();
      v27 = v26;

      sub_1BC9EC1CC(0, &qword_1ED6C7118, (void (*)(uint64_t))sub_1BC9DD77C);
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1BCABFE80;
      *(_QWORD *)(inited + 32) = 0x45554C4156;
      *(_QWORD *)(inited + 40) = 0xE500000000000000;
      *(_QWORD *)(inited + 48) = v20;
      *(_QWORD *)(inited + 56) = v22;
      *(_QWORD *)(inited + 64) = 1414090325;
      *(_QWORD *)(inited + 72) = 0xE400000000000000;
      *(_QWORD *)(inited + 80) = v25;
      *(_QWORD *)(inited + 88) = v27;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v29 = sub_1BCA927D8(inited);
      sub_1BC99C384(a1, (uint64_t)v36);
      if (qword_1ED6C7070 != -1)
        swift_once();
      v30 = sub_1BC9A1984(0xD00000000000001DLL, 0x80000001BCAD0670, v29, (uint64_t)v36, 0, 0);
      v32 = v31;
      swift_bridgeObjectRelease();
      sub_1BC9A10A0((uint64_t)v36);
      _sSo17HKActivitySummaryC19HealthVisualizationE22createAttributedString4from9valueText0I4Font04unitJ00lK0So012NSAttributedG0CSgSS_SSSo6UIFontCSSANtF_0(v30, v32, v20, v22, a2, v25, v27, a3);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    sub_1BCAB54D8();
    v33 = sub_1BCAB54FC();
    v34 = sub_1BCAB61A4();
    if (os_log_type_enabled(v33, v34))
    {
      v35 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v35 = 0;
      _os_log_impl(&dword_1BC989000, v33, v34, "Snippets: Unable to format stand hours text for Activity Summary.", v35, 2u);
      MEMORY[0x1BCCFBF5C](v35, -1, -1);
    }

    (*(void (**)(_BYTE *, uint64_t))(v9 + 8))(v12, v8);
  }
}

id HKActivitySummary.createMoveTitleText(_:titleFont:)(uint64_t a1, void *a2)
{
  id v3;
  uint64_t inited;
  void *v5;
  void *v6;
  id v7;
  id v8;
  id v9;
  id v10;
  unint64_t v11;
  id v12;
  void *v13;
  void *v14;
  id v15;
  _BYTE v17[32];

  sub_1BC99C384(a1, (uint64_t)v17);
  if (qword_1ED6C7070 != -1)
    swift_once();
  sub_1BC9A1984(0xD00000000000001CLL, 0x80000001BCAD06B0, 0, (uint64_t)v17, 0, 0);
  sub_1BC9A10A0((uint64_t)v17);
  v3 = objc_msgSend((id)objc_opt_self(), sel_hk_activityMoveGoalLineColor);
  sub_1BC9EC1CC(0, &qword_1ED6C7120, (void (*)(uint64_t))sub_1BC9EC218);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1BCABFE80;
  v5 = (void *)*MEMORY[0x1E0DC1138];
  *(_QWORD *)(inited + 32) = *MEMORY[0x1E0DC1138];
  *(_QWORD *)(inited + 40) = a2;
  v6 = (void *)*MEMORY[0x1E0DC1140];
  *(_QWORD *)(inited + 48) = *MEMORY[0x1E0DC1140];
  *(_QWORD *)(inited + 56) = v3;
  v7 = v5;
  v8 = a2;
  v9 = v6;
  v10 = v3;
  v11 = sub_1BCA92908(inited);
  swift_bridgeObjectRetain();
  sub_1BC9EBB48(v11);
  swift_bridgeObjectRelease();
  v12 = objc_allocWithZone(MEMORY[0x1E0CB3498]);
  v13 = (void *)sub_1BCAB5EE0();
  swift_bridgeObjectRelease();
  type metadata accessor for Key(0);
  sub_1BC99F5A0();
  v14 = (void *)sub_1BCAB5E68();
  swift_bridgeObjectRelease();
  v15 = objc_msgSend(v12, sel_initWithString_attributes_, v13, v14);
  swift_bridgeObjectRelease();

  return v15;
}

NSAttributedString __swiftcall HKActivitySummary.createTitleAttributedString(text:titleFont:titleColor:)(Swift::String text, UIFont titleFont, UIColor titleColor)
{
  uint64_t inited;
  void *v6;
  void *v7;
  id v8;
  objc_class *v9;
  id v10;
  objc_class *v11;
  unint64_t v12;
  id v13;
  void *v14;
  void *v15;
  id v16;

  sub_1BC9EC1CC(0, &qword_1ED6C7120, (void (*)(uint64_t))sub_1BC9EC218);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1BCABFE80;
  v6 = (void *)*MEMORY[0x1E0DC1138];
  *(_QWORD *)(inited + 32) = *MEMORY[0x1E0DC1138];
  *(UIFont *)(inited + 40) = titleFont;
  v7 = (void *)*MEMORY[0x1E0DC1140];
  *(_QWORD *)(inited + 48) = *MEMORY[0x1E0DC1140];
  *(UIColor *)(inited + 56) = titleColor;
  v8 = v6;
  v9 = titleFont.super.isa;
  v10 = v7;
  v11 = titleColor.super.isa;
  v12 = sub_1BCA92908(inited);
  swift_bridgeObjectRetain();
  sub_1BC9EBB48(v12);
  swift_bridgeObjectRelease();
  v13 = objc_allocWithZone(MEMORY[0x1E0CB3498]);
  v14 = (void *)sub_1BCAB5EE0();
  swift_bridgeObjectRelease();
  type metadata accessor for Key(0);
  sub_1BC99F5A0();
  v15 = (void *)sub_1BCAB5E68();
  swift_bridgeObjectRelease();
  v16 = objc_msgSend(v13, sel_initWithString_attributes_, v14, v15);

  return (NSAttributedString)v16;
}

id HKActivitySummary.createExerciseTitleText(_:titleFont:)(uint64_t a1, void *a2)
{
  id v3;
  uint64_t inited;
  void *v5;
  void *v6;
  id v7;
  id v8;
  id v9;
  id v10;
  unint64_t v11;
  id v12;
  void *v13;
  void *v14;
  id v15;
  _BYTE v17[32];

  sub_1BC99C384(a1, (uint64_t)v17);
  if (qword_1ED6C7070 != -1)
    swift_once();
  sub_1BC9A1984(0xD000000000000020, 0x80000001BCAD06D0, 0, (uint64_t)v17, 0, 0);
  sub_1BC9A10A0((uint64_t)v17);
  v3 = objc_msgSend((id)objc_opt_self(), sel_hk_activityExerciseGoalLineColor);
  sub_1BC9EC1CC(0, &qword_1ED6C7120, (void (*)(uint64_t))sub_1BC9EC218);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1BCABFE80;
  v5 = (void *)*MEMORY[0x1E0DC1138];
  *(_QWORD *)(inited + 32) = *MEMORY[0x1E0DC1138];
  *(_QWORD *)(inited + 40) = a2;
  v6 = (void *)*MEMORY[0x1E0DC1140];
  *(_QWORD *)(inited + 48) = *MEMORY[0x1E0DC1140];
  *(_QWORD *)(inited + 56) = v3;
  v7 = v5;
  v8 = a2;
  v9 = v6;
  v10 = v3;
  v11 = sub_1BCA92908(inited);
  swift_bridgeObjectRetain();
  sub_1BC9EBB48(v11);
  swift_bridgeObjectRelease();
  v12 = objc_allocWithZone(MEMORY[0x1E0CB3498]);
  v13 = (void *)sub_1BCAB5EE0();
  swift_bridgeObjectRelease();
  type metadata accessor for Key(0);
  sub_1BC99F5A0();
  v14 = (void *)sub_1BCAB5E68();
  swift_bridgeObjectRelease();
  v15 = objc_msgSend(v12, sel_initWithString_attributes_, v13, v14);
  swift_bridgeObjectRelease();

  return v15;
}

id HKActivitySummary.createStandHourTitleText(_:titleFont:healthStore:)(uint64_t a1, void *a2, void *a3)
{
  void *v6;
  id result;
  void *v8;
  uint64_t v9;
  id v10;
  unint64_t v11;
  id v12;
  uint64_t inited;
  void *v14;
  void *v15;
  id v16;
  id v17;
  id v18;
  id v19;
  unint64_t v20;
  id v21;
  void *v22;
  void *v23;
  id v24;
  _BYTE v25[32];

  v6 = (void *)sub_1BCAB60FC();
  result = objc_msgSend(a3, sel_displayTypeController);
  if (result)
  {
    v8 = result;
    v9 = 0xD00000000000001DLL;
    v10 = objc_msgSend(result, sel_displayTypeWithIdentifier_, v6);

    v11 = 0x80000001BCAD0700;
    if (v10 && objc_msgSend(v10, sel__isWheelchairUser))
    {
      v9 = 0xD000000000000028;
      v11 = 0x80000001BCAD0720;
    }
    sub_1BC99C384(a1, (uint64_t)v25);
    if (qword_1ED6C7070 != -1)
      swift_once();
    sub_1BC9A1984(v9, v11, 0, (uint64_t)v25, 0, 0);
    swift_bridgeObjectRelease();
    sub_1BC9A10A0((uint64_t)v25);
    v12 = objc_msgSend((id)objc_opt_self(), sel_hk_activityStandGoalLineColor);
    sub_1BC9EC1CC(0, &qword_1ED6C7120, (void (*)(uint64_t))sub_1BC9EC218);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1BCABFE80;
    v14 = (void *)*MEMORY[0x1E0DC1138];
    *(_QWORD *)(inited + 32) = *MEMORY[0x1E0DC1138];
    *(_QWORD *)(inited + 40) = a2;
    v15 = (void *)*MEMORY[0x1E0DC1140];
    *(_QWORD *)(inited + 48) = *MEMORY[0x1E0DC1140];
    *(_QWORD *)(inited + 56) = v12;
    v16 = v14;
    v17 = a2;
    v18 = v15;
    v19 = v12;
    v20 = sub_1BCA92908(inited);
    swift_bridgeObjectRetain();
    sub_1BC9EBB48(v20);
    swift_bridgeObjectRelease();
    v21 = objc_allocWithZone(MEMORY[0x1E0CB3498]);
    v22 = (void *)sub_1BCAB5EE0();
    swift_bridgeObjectRelease();
    type metadata accessor for Key(0);
    sub_1BC99F5A0();
    v23 = (void *)sub_1BCAB5E68();
    swift_bridgeObjectRelease();
    v24 = objc_msgSend(v21, sel_initWithString_attributes_, v22, v23);

    swift_bridgeObjectRelease();
    return v24;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id HKActivitySummary.createStandHourTitleText(_:titleFont:wheelchairUser:)(uint64_t a1, void *a2, char a3)
{
  unint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t inited;
  void *v9;
  void *v10;
  id v11;
  id v12;
  id v13;
  id v14;
  unint64_t v15;
  id v16;
  void *v17;
  void *v18;
  id v19;
  _BYTE v21[32];

  sub_1BC99C384(a1, (uint64_t)v21);
  if (qword_1ED6C7070 != -1)
    swift_once();
  if ((a3 & 1) != 0)
    v5 = 0x80000001BCAD0720;
  else
    v5 = 0x80000001BCAD0700;
  if ((a3 & 1) != 0)
    v6 = 0xD000000000000028;
  else
    v6 = 0xD00000000000001DLL;
  sub_1BC9A1984(v6, v5, 0, (uint64_t)v21, 0, 0);
  swift_bridgeObjectRelease();
  sub_1BC9A10A0((uint64_t)v21);
  v7 = objc_msgSend((id)objc_opt_self(), sel_hk_activityStandGoalLineColor);
  sub_1BC9EC1CC(0, &qword_1ED6C7120, (void (*)(uint64_t))sub_1BC9EC218);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1BCABFE80;
  v9 = (void *)*MEMORY[0x1E0DC1138];
  *(_QWORD *)(inited + 32) = *MEMORY[0x1E0DC1138];
  *(_QWORD *)(inited + 40) = a2;
  v10 = (void *)*MEMORY[0x1E0DC1140];
  *(_QWORD *)(inited + 48) = *MEMORY[0x1E0DC1140];
  *(_QWORD *)(inited + 56) = v7;
  v11 = v9;
  v12 = a2;
  v13 = v10;
  v14 = v7;
  v15 = sub_1BCA92908(inited);
  swift_bridgeObjectRetain();
  sub_1BC9EBB48(v15);
  swift_bridgeObjectRelease();
  v16 = objc_allocWithZone(MEMORY[0x1E0CB3498]);
  v17 = (void *)sub_1BCAB5EE0();
  swift_bridgeObjectRelease();
  type metadata accessor for Key(0);
  sub_1BC99F5A0();
  v18 = (void *)sub_1BCAB5E68();
  swift_bridgeObjectRelease();
  v19 = objc_msgSend(v16, sel_initWithString_attributes_, v17, v18);
  swift_bridgeObjectRelease();

  return v19;
}

uint64_t sub_1BC9EBB48(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t result;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  int64_t v14;
  void *v15;
  void *v16;
  id v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  int64_t v28;
  uint64_t v29;
  int64_t v30;
  _OWORD v31[4];
  _OWORD v32[2];
  _OWORD v33[3];

  if (*(_QWORD *)(a1 + 16))
  {
    sub_1BC9A6514();
    v2 = sub_1BCAB660C();
  }
  else
  {
    v2 = MEMORY[0x1E0DEE9E0];
  }
  v29 = a1 + 64;
  v3 = -1 << *(_BYTE *)(a1 + 32);
  if (-v3 < 64)
    v4 = ~(-1 << -(char)v3);
  else
    v4 = -1;
  v5 = v4 & *(_QWORD *)(a1 + 64);
  v28 = (unint64_t)(63 - v3) >> 6;
  v6 = v2 + 64;
  swift_bridgeObjectRetain();
  result = swift_retain();
  v30 = 0;
  while (1)
  {
    if (v5)
    {
      v9 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      v10 = v9 | (v30 << 6);
      goto LABEL_28;
    }
    v11 = v30 + 1;
    if (__OFADD__(v30, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v11 >= v28)
      goto LABEL_37;
    v12 = *(_QWORD *)(v29 + 8 * v11);
    v13 = v30 + 1;
    if (!v12)
    {
      v13 = v30 + 2;
      if (v30 + 2 >= v28)
        goto LABEL_37;
      v12 = *(_QWORD *)(v29 + 8 * v13);
      if (!v12)
      {
        v13 = v30 + 3;
        if (v30 + 3 >= v28)
          goto LABEL_37;
        v12 = *(_QWORD *)(v29 + 8 * v13);
        if (!v12)
        {
          v13 = v30 + 4;
          if (v30 + 4 >= v28)
            goto LABEL_37;
          v12 = *(_QWORD *)(v29 + 8 * v13);
          if (!v12)
            break;
        }
      }
    }
LABEL_27:
    v5 = (v12 - 1) & v12;
    v10 = __clz(__rbit64(v12)) + (v13 << 6);
    v30 = v13;
LABEL_28:
    v16 = *(void **)(*(_QWORD *)(a1 + 56) + 8 * v10);
    *(_QWORD *)&v33[0] = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v10);
    v15 = *(void **)&v33[0];
    *(_QWORD *)&v32[0] = v16;
    sub_1BC9A649C(0, &qword_1ED6C7100);
    v17 = v15;
    v18 = v16;
    swift_dynamicCast();
    v19 = *(_QWORD *)&v33[0];
    sub_1BC9A61C8((_OWORD *)((char *)v33 + 8), v31);
    sub_1BC9A61C8(v31, v33);
    sub_1BC9A61C8(v33, v32);
    sub_1BCAB5F04();
    sub_1BCAB6870();
    sub_1BCAB5F40();
    v20 = sub_1BCAB6894();
    result = swift_bridgeObjectRelease();
    v21 = -1 << *(_BYTE *)(v2 + 32);
    v22 = v20 & ~v21;
    v23 = v22 >> 6;
    if (((-1 << v22) & ~*(_QWORD *)(v6 + 8 * (v22 >> 6))) != 0)
    {
      v8 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)(v6 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v24 = 0;
      v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v26 = v23 == v25;
        if (v23 == v25)
          v23 = 0;
        v24 |= v26;
        v27 = *(_QWORD *)(v6 + 8 * v23);
      }
      while (v27 == -1);
      v8 = __clz(__rbit64(~v27)) + (v23 << 6);
    }
    *(_QWORD *)(v6 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v8;
    *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v8) = v19;
    result = (uint64_t)sub_1BC9A61C8(v32, (_OWORD *)(*(_QWORD *)(v2 + 56) + 32 * v8));
    ++*(_QWORD *)(v2 + 16);
  }
  v14 = v30 + 5;
  if (v30 + 5 >= v28)
  {
LABEL_37:
    swift_release();
    sub_1BC9E5BB4();
    return v2;
  }
  v12 = *(_QWORD *)(v29 + 8 * v14);
  if (v12)
  {
    v13 = v30 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    v13 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v13 >= v28)
      goto LABEL_37;
    v12 = *(_QWORD *)(v29 + 8 * v13);
    ++v14;
    if (v12)
      goto LABEL_27;
  }
LABEL_39:
  __break(1u);
  return result;
}

id _sSo17HKActivitySummaryC19HealthVisualizationE22createAttributedString4from9valueText0I4Font04unitJ00lK0So012NSAttributedG0CSgSS_SSSo6UIFontCSSANtF_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, void *a8)
{
  uint64_t inited;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  id v15;
  id v16;
  unint64_t v17;
  uint64_t v18;
  id v19;
  id v20;
  id v21;
  void *v22;
  id v23;
  void *v24;
  id v25;
  void *v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  void *v34;
  unint64_t v36;
  id v37;

  sub_1BC9EC1CC(0, &qword_1ED6C7120, (void (*)(uint64_t))sub_1BC9EC218);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1BCABFE80;
  v11 = (void *)*MEMORY[0x1E0DC1138];
  *(_QWORD *)(inited + 32) = *MEMORY[0x1E0DC1138];
  *(_QWORD *)(inited + 40) = a5;
  v12 = (void *)*MEMORY[0x1E0DC1140];
  *(_QWORD *)(inited + 48) = *MEMORY[0x1E0DC1140];
  v13 = (void *)objc_opt_self();
  v14 = v11;
  v15 = a5;
  v16 = v12;
  *(_QWORD *)(inited + 56) = objc_msgSend(v13, sel_labelColor);
  v17 = sub_1BCA92908(inited);
  v18 = swift_initStackObject();
  *(_OWORD *)(v18 + 16) = xmmword_1BCABFE80;
  *(_QWORD *)(v18 + 32) = v14;
  *(_QWORD *)(v18 + 40) = a8;
  *(_QWORD *)(v18 + 48) = v16;
  v19 = v14;
  v20 = v16;
  v21 = a8;
  *(_QWORD *)(v18 + 56) = objc_msgSend(v13, sel_secondaryLabelColor);
  v36 = sub_1BCA92908(v18);
  v22 = (void *)sub_1BCAB5EE0();
  v23 = objc_allocWithZone(MEMORY[0x1E0CB3778]);
  swift_bridgeObjectRetain();
  v24 = (void *)sub_1BCAB5EE0();
  swift_bridgeObjectRelease();
  v25 = objc_msgSend(v23, sel_initWithString_, v24);

  v26 = (void *)sub_1BCAB5EE0();
  v27 = objc_msgSend(v22, sel_rangeOfString_, v26);
  v29 = v28;

  v30 = (void *)sub_1BCAB5EE0();
  v37 = objc_msgSend(v22, sel_rangeOfString_, v30);
  v32 = v31;

  sub_1BC9EBB48(v17);
  swift_bridgeObjectRelease();
  type metadata accessor for Key(0);
  sub_1BC99F5A0();
  v33 = (void *)sub_1BCAB5E68();
  swift_bridgeObjectRelease();
  objc_msgSend(v25, sel_addAttributes_range_, v33, v27, v29);

  sub_1BC9EBB48(v36);
  swift_bridgeObjectRelease();
  v34 = (void *)sub_1BCAB5E68();
  swift_bridgeObjectRelease();
  objc_msgSend(v25, sel_addAttributes_range_, v34, v37, v32);

  return v25;
}

void sub_1BC9EC1CC(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    v4 = sub_1BCAB67A4();
    if (!v5)
      atomic_store(v4, a2);
  }
}

void sub_1BC9EC218()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_1ED6C70F8)
  {
    type metadata accessor for Key(255);
    sub_1BC9A649C(255, &qword_1ED6C7100);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1ED6C70F8);
  }
}

uint64_t MostRecentRangeQueryConfiguration.dateRange.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

void *MostRecentRangeQueryConfiguration.statisticsOptions.getter()
{
  return &unk_1E7544130;
}

void MostRecentRangeQueryConfiguration.anchorDate.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 1);
}

uint64_t MostRecentRangeQueryConfiguration.aggregationInterval.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 2);
}

HealthVisualization::MostRecentRangeQueryConfiguration __swiftcall MostRecentRangeQueryConfiguration.init(dateRange:anchorDate:aggregationInterval:)(HealthVisualization::DateRange dateRange, HealthVisualization::AnchorDate anchorDate, HealthVisualization::StatisticsInterval aggregationInterval)
{
  HealthVisualization::DateRange *v3;
  char v4;
  HealthVisualization::MostRecentRangeQueryConfiguration result;

  v4 = *(_BYTE *)anchorDate;
  *v3 = dateRange;
  *((_BYTE *)v3 + 1) = v4;
  *((_BYTE *)v3 + 2) = aggregationInterval;
  result.dateRange = dateRange;
  return result;
}

void static MostRecentRangeQueryConfiguration.== infix(_:_:)(char *a1)
{
  char v1;
  char v2;
  char v3;
  char v4;

  v1 = a1[1];
  v2 = a1[2];
  sub_1BC9991D8(*a1);
  if ((v3 & 1) != 0)
  {
    sub_1BC9993E0(v1);
    if ((v4 & 1) != 0)
      sub_1BC9995AC(v2);
  }
}

uint64_t sub_1BC9EC33C()
{
  _BYTE *v0;
  unint64_t v1;

  v1 = 0x6144726F68636E61;
  if (*v0 != 1)
    v1 = 0xD000000000000013;
  if (*v0)
    return v1;
  else
    return 0x676E615265746164;
}

uint64_t sub_1BC9EC3A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1BC9ECB70(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1BC9EC3C8()
{
  sub_1BC9EC5B0();
  return sub_1BCAB68D0();
}

uint64_t sub_1BC9EC3F0()
{
  sub_1BC9EC5B0();
  return sub_1BCAB68DC();
}

uint64_t MostRecentRangeQueryConfiguration.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char v9;
  int v10;
  char v11;
  uint64_t v13;
  int v14;
  int v15;
  char v16;
  char v17;
  char v18;
  char v19;
  char v20;
  char v21;

  sub_1BC9EC7BC(0, &qword_1ED6C4DC0, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED170]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v13 - v7;
  v9 = *v1;
  v10 = v1[1];
  v14 = v1[2];
  v15 = v10;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BC9EC5B0();
  sub_1BCAB68B8();
  v21 = v9;
  v20 = 0;
  sub_1BC99B470();
  sub_1BCAB6774();
  if (!v2)
  {
    v11 = v14;
    v19 = v15;
    v18 = 1;
    sub_1BC9AC148();
    sub_1BCAB6774();
    v17 = v11;
    v16 = 2;
    sub_1BC9B7E90();
    sub_1BCAB6774();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_1BC9EC5B0()
{
  unint64_t result;

  result = qword_1ED6C4C98;
  if (!qword_1ED6C4C98)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCAC1AE8, &type metadata for MostRecentRangeQueryConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED6C4C98);
  }
  return result;
}

uint64_t MostRecentRangeQueryConfiguration.init(from:)@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char v10;
  char v11;
  char v13;
  uint64_t v14;
  char v15;
  char v16;
  char v17;
  char v18;
  char v19;
  char v20;

  sub_1BC9EC7BC(0, &qword_1ED6C4E58, MEMORY[0x1E0DED048]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v14 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BC9EC5B0();
  sub_1BCAB68AC();
  if (!v2)
  {
    v19 = 0;
    sub_1BC99B510();
    sub_1BCAB66E4();
    v10 = v20;
    v17 = 1;
    sub_1BC9AC3EC();
    sub_1BCAB66E4();
    v11 = v18;
    v15 = 2;
    sub_1BC9B7FD8();
    sub_1BCAB66E4();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    v13 = v16;
    *a2 = v10;
    a2[1] = v11;
    a2[2] = v13;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

void sub_1BC9EC7BC(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_1BC9EC5B0();
    v7 = a3(a1, &type metadata for MostRecentRangeQueryConfiguration.CodingKeys, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t sub_1BC9EC818@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return MostRecentRangeQueryConfiguration.init(from:)(a1, a2);
}

uint64_t sub_1BC9EC82C(_QWORD *a1)
{
  return MostRecentRangeQueryConfiguration.encode(to:)(a1);
}

void sub_1BC9EC840(char *a1)
{
  char v1;
  char v2;
  char v3;
  char v4;

  v1 = a1[1];
  v2 = a1[2];
  sub_1BC9991D8(*a1);
  if ((v3 & 1) != 0)
  {
    sub_1BC9993E0(v1);
    if ((v4 & 1) != 0)
      sub_1BC9995AC(v2);
  }
}

uint64_t __swift_memcpy3_1(uint64_t result, __int16 *a2)
{
  __int16 v2;

  v2 = *a2;
  *(_BYTE *)(result + 2) = *((_BYTE *)a2 + 2);
  *(_WORD *)result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for MostRecentRangeQueryConfiguration(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  unsigned int v4;
  BOOL v5;
  int v6;

  if (!a2)
    return 0;
  if (a2 >= 0xFC)
  {
    if ((a2 + 33554180) >> 24)
    {
      v2 = a1[3];
      if (a1[3])
        return (*(unsigned __int16 *)a1 | (a1[2] << 16) | (v2 << 24)) - 16776964;
    }
    else
    {
      v2 = *(unsigned __int16 *)(a1 + 3);
      if (*(_WORD *)(a1 + 3))
        return (*(unsigned __int16 *)a1 | (a1[2] << 16) | (v2 << 24)) - 16776964;
    }
  }
  v4 = a1[1];
  v5 = v4 >= 5;
  v6 = v4 - 5;
  if (!v5)
    v6 = -1;
  return (v6 + 1);
}

uint64_t storeEnumTagSinglePayload for MostRecentRangeQueryConfiguration(uint64_t result, unsigned int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;

  if ((a3 + 33554180) >> 24)
    v3 = 1;
  else
    v3 = 2;
  if (a3 <= 0xFB)
    v3 = 0;
  if (a2 > 0xFB)
  {
    *(_WORD *)result = a2 - 252;
    *(_BYTE *)(result + 2) = (a2 - 252) >> 16;
    if (v3)
    {
      v4 = ((a2 - 252) >> 24) + 1;
      if (v3 == 2)
        *(_WORD *)(result + 3) = v4;
      else
        *(_BYTE *)(result + 3) = v4;
    }
  }
  else
  {
    if (!v3)
      goto LABEL_10;
    if (v3 == 2)
    {
      *(_WORD *)(result + 3) = 0;
LABEL_10:
      if (!a2)
        return result;
LABEL_16:
      *(_BYTE *)(result + 1) = a2 + 4;
      return result;
    }
    *(_BYTE *)(result + 3) = 0;
    if (a2)
      goto LABEL_16;
  }
  return result;
}

ValueMetadata *type metadata accessor for MostRecentRangeQueryConfiguration()
{
  return &type metadata for MostRecentRangeQueryConfiguration;
}

uint64_t storeEnumTagSinglePayload for MostRecentRangeQueryConfiguration.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1BC9ECA18 + 4 * byte_1BCAC1965[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1BC9ECA4C + 4 * asc_1BCAC1960[v4]))();
}

uint64_t sub_1BC9ECA4C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BC9ECA54(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BC9ECA5CLL);
  return result;
}

uint64_t sub_1BC9ECA68(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BC9ECA70);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1BC9ECA74(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BC9ECA7C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MostRecentRangeQueryConfiguration.CodingKeys()
{
  return &type metadata for MostRecentRangeQueryConfiguration.CodingKeys;
}

unint64_t sub_1BC9ECA9C()
{
  unint64_t result;

  result = qword_1EF478D00;
  if (!qword_1EF478D00)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCAC1AC0, &type metadata for MostRecentRangeQueryConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF478D00);
  }
  return result;
}

unint64_t sub_1BC9ECAE4()
{
  unint64_t result;

  result = qword_1ED6C4CA8;
  if (!qword_1ED6C4CA8)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCAC1A30, &type metadata for MostRecentRangeQueryConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED6C4CA8);
  }
  return result;
}

unint64_t sub_1BC9ECB2C()
{
  unint64_t result;

  result = qword_1ED6C4CA0;
  if (!qword_1ED6C4CA0)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCAC1A58, &type metadata for MostRecentRangeQueryConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED6C4CA0);
  }
  return result;
}

uint64_t sub_1BC9ECB70(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x676E615265746164 && a2 == 0xE900000000000065;
  if (v2 || (sub_1BCAB67C8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6144726F68636E61 && a2 == 0xEA00000000006574 || (sub_1BCAB67C8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x80000001BCACF180)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_1BCAB67C8();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t SwiftChartDiagramConfiguration.primaryDiagramTimeScope.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t SwiftChartDiagramConfiguration.sharingDiagramTimeScope.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t getEnumTagSinglePayload for CountComparisonQueryConfiguration(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 25))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for CountComparisonQueryConfiguration(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 25) = v3;
  return result;
}

ValueMetadata *type metadata accessor for SwiftChartDiagramConfiguration()
{
  return &type metadata for SwiftChartDiagramConfiguration;
}

uint64_t sub_1BC9ECD50()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[6];

  v0 = sub_1BCAB5514();
  v13[1] = *(_QWORD *)(v0 - 8);
  v13[2] = v0;
  MEMORY[0x1E0C80A78](v0);
  sub_1BC9EF404();
  v2 = v1;
  v13[0] = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v4 = (char *)v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1BCAB53F4();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BC9A649C(0, (unint64_t *)&qword_1ED6C4658);
  sub_1BCAB543C();
  v13[4] = sub_1BCAB5448();
  sub_1BC998AB0(0, &qword_1ED6C4DC8, (uint64_t (*)(uint64_t))MEMORY[0x1E0D2BD30], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  v9 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_1BCABE680;
  (*(void (**)(unint64_t, char *, uint64_t))(v6 + 16))(v10 + v9, v8, v5);
  sub_1BC9EE810();
  sub_1BC996948(&qword_1ED6C4D40, (uint64_t (*)(uint64_t))sub_1BC9EE810, MEMORY[0x1E0C95D90]);
  sub_1BCAB58D4();
  swift_release();
  swift_bridgeObjectRelease();
  sub_1BC996948(&qword_1ED6C4D00, (uint64_t (*)(uint64_t))sub_1BC9EF404, MEMORY[0x1E0C95788]);
  v11 = sub_1BCAB58A4();
  (*(void (**)(char *, uint64_t))(v13[0] + 8))(v4, v2);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return v11;
}

uint64_t static FeatureStatusChangePublisher.identifier(for:)()
{
  uint64_t v1;

  v1 = sub_1BCAB5F04();
  swift_bridgeObjectRetain();
  sub_1BCAB5F70();
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t sub_1BC9ED1C8()
{
  uint64_t v1;

  v1 = sub_1BCAB5F04();
  swift_bridgeObjectRetain();
  sub_1BCAB5F70();
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t sub_1BC9ED234()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_1BCAB5514();
  MEMORY[0x1E0C80A78](v0);
  sub_1BCAB4B54();
  swift_allocObject();
  sub_1BCAB4B48();
  swift_retain();
  sub_1BCAB5070();
  swift_release();
  sub_1BC9EDE28();
  v1 = sub_1BCAB4B3C();
  swift_release();
  return v1;
}

uint64_t FeatureStatusChangePublisher.CacheData.previouslyAllowed.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t FeatureStatusChangePublisher.CacheData.previouslyAllowed.setter(uint64_t result)
{
  _BYTE *v1;

  *v1 = result;
  return result;
}

uint64_t (*FeatureStatusChangePublisher.CacheData.previouslyAllowed.modify())()
{
  return nullsub_1;
}

HealthVisualization::FeatureStatusChangePublisher::CacheData __swiftcall FeatureStatusChangePublisher.CacheData.init(previouslyAllowed:)(HealthVisualization::FeatureStatusChangePublisher::CacheData previouslyAllowed)
{
  HealthVisualization::FeatureStatusChangePublisher::CacheData *v1;

  v1->previouslyAllowed.value = previouslyAllowed.previouslyAllowed.value;
  return previouslyAllowed;
}

unint64_t sub_1BC9ED548()
{
  return 0xD000000000000011;
}

uint64_t sub_1BC9ED564@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1BC9EE8D8(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_1BC9ED58C()
{
  sub_1BC9EE6DC();
  return sub_1BCAB68D0();
}

uint64_t sub_1BC9ED5B4()
{
  sub_1BC9EE6DC();
  return sub_1BCAB68DC();
}

uint64_t FeatureStatusChangePublisher.CacheData.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;

  sub_1BC9EE720(0, &qword_1ED6C4770, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED170]);
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v6 = (char *)&v8 - v5;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BC9EE6DC();
  sub_1BCAB68B8();
  sub_1BCAB6714();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t FeatureStatusChangePublisher.CacheData.init(from:)@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char v10;
  uint64_t v12;

  sub_1BC9EE720(0, &qword_1ED6C46E8, MEMORY[0x1E0DED048]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v12 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BC9EE6DC();
  sub_1BCAB68AC();
  if (!v2)
  {
    v10 = sub_1BCAB6684();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    *a2 = v10;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_1BC9ED7EC@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return FeatureStatusChangePublisher.CacheData.init(from:)(a1, a2);
}

uint64_t sub_1BC9ED800(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;

  sub_1BC9EE720(0, &qword_1ED6C4770, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED170]);
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v6 = (char *)&v8 - v5;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BC9EE6DC();
  sub_1BCAB68B8();
  sub_1BCAB6714();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_1BC9ED8F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _QWORD v9[2];

  sub_1BC9EE77C();
  v2 = v1;
  v3 = *(_QWORD *)(v1 - 8);
  v4 = MEMORY[0x1E0C80A78](v1);
  v6 = (char *)v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9[1] = (*(uint64_t (**)(__n128))(v0 + 48))(v4);
  swift_allocObject();
  swift_weakInit();
  sub_1BC9EE810();
  sub_1BCAB5034();
  sub_1BC996948(&qword_1ED6C4D40, (uint64_t (*)(uint64_t))sub_1BC9EE810, MEMORY[0x1E0C95D90]);
  sub_1BCAB58B0();
  swift_release();
  swift_release();
  sub_1BC996948(&qword_1ED6C4CF0, (uint64_t (*)(uint64_t))sub_1BC9EE77C, MEMORY[0x1E0C95708]);
  v7 = sub_1BCAB58A4();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  return v7;
}

uint64_t sub_1BC9EDA48@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t Strong;
  uint64_t v7;
  void *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[2];
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v2 = sub_1BCAB5514();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  if (!Strong)
    goto LABEL_5;
  v7 = Strong;
  v8 = (void *)sub_1BCAB5400();
  v9 = objc_msgSend(v8, sel_areAllRequirementsSatisfied);

  swift_retain();
  sub_1BCAB5070();
  v10 = swift_release();
  if (v25 != 2 && ((((v25 & 1) == 0) ^ v9) & 1) != 0)
  {
    swift_release();
LABEL_5:
    v11 = sub_1BCAB5034();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(a1, 1, 1, v11);
  }
  MEMORY[0x1E0C80A78](v10);
  LOBYTE(v22[-2]) = v9;
  swift_retain();
  sub_1BCAB507C();
  swift_release();
  sub_1BCAB54B4();
  swift_retain_n();
  v13 = sub_1BCAB54FC();
  v14 = sub_1BCAB61BC();
  if (os_log_type_enabled(v13, v14))
  {
    v15 = (uint8_t *)swift_slowAlloc();
    v16 = swift_slowAlloc();
    v23 = a1;
    v24 = v7;
    v17 = v16;
    v25 = v16;
    *(_DWORD *)v15 = 136446210;
    v22[1] = v15 + 4;
    type metadata accessor for FeatureStatusChangePublisher();
    swift_retain();
    v18 = sub_1BCAB5F28();
    v24 = sub_1BC99BD4C(v18, v19, &v25);
    sub_1BCAB63A8();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1BC989000, v13, v14, "[%{public}s] Detected change to feature status, publishing changes", v15, 0xCu);
    swift_arrayDestroy();
    v20 = v17;
    a1 = v23;
    MEMORY[0x1BCCFBF5C](v20, -1, -1);
    MEMORY[0x1BCCFBF5C](v15, -1, -1);

  }
  else
  {

    swift_release_n();
  }
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  sub_1BC9EDE6C(a1);
  swift_release();
  v21 = sub_1BCAB5034();
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(a1, 0, 1, v21);
}

uint64_t sub_1BC9EDD58@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;
  char v3;

  swift_retain();
  sub_1BCAB5070();
  result = swift_release();
  *a1 = v3;
  return result;
}

uint64_t sub_1BC9EDDA4()
{
  swift_retain();
  sub_1BCAB507C();
  return swift_release();
}

uint64_t sub_1BC9EDDF4()
{
  swift_retain();
  sub_1BCAB5070();
  return swift_release();
}

unint64_t sub_1BC9EDE28()
{
  unint64_t result;

  result = qword_1ED6C4040;
  if (!qword_1ED6C4040)
  {
    result = MEMORY[0x1BCCFBE84](&protocol conformance descriptor for FeatureStatusChangePublisher.CacheData, &type metadata for FeatureStatusChangePublisher.CacheData);
    atomic_store(result, (unint64_t *)&qword_1ED6C4040);
  }
  return result;
}

uint64_t sub_1BC9EDE6C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v13[24];

  sub_1BC998AB0(0, (unint64_t *)&qword_1ED6C7128, (uint64_t (*)(uint64_t))MEMORY[0x1E0D2DAD0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v3);
  v5 = &v13[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v6);
  v8 = &v13[-v7];
  v9 = v1 + OBJC_IVAR____TtC19HealthVisualization28FeatureStatusChangePublisher____lazy_storage___changeSetToUse;
  swift_beginAccess();
  sub_1BC9EF17C(v9, (uint64_t)v8);
  v10 = sub_1BCAB5034();
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v11 + 48))(v8, 1, v10) != 1)
    return (*(uint64_t (**)(uint64_t, _BYTE *, uint64_t))(v11 + 32))(a1, v8, v10);
  sub_1BC9EED2C((uint64_t)v8);
  sub_1BC9EDFE8();
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v11 + 16))(v5, a1, v10);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v5, 0, 1, v10);
  swift_beginAccess();
  sub_1BC9EF1D8((uint64_t)v5, v9);
  return swift_endAccess();
}

uint64_t sub_1BC9EDFE8()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  void (*v23)(_QWORD *, _QWORD);
  _QWORD *v24;
  uint64_t result;
  id v26;
  unint64_t v27;
  _QWORD v28[4];
  uint64_t v29;
  uint64_t v30;
  unsigned __int8 v31;
  uint64_t v32;

  v0 = swift_bridgeObjectRetain();
  v1 = sub_1BCA65884(v0);
  swift_bridgeObjectRelease();
  v27 = v1 & 0xC000000000000001;
  if ((v1 & 0xC000000000000001) != 0)
  {
    v2 = sub_1BCAB6444();
    if (v2)
      goto LABEL_3;
LABEL_6:
    swift_bridgeObjectRelease();
    if (*(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16))
    {
LABEL_22:
      sub_1BC9A5EEC();
      v6 = sub_1BCAB660C();
      goto LABEL_23;
    }
LABEL_7:
    v6 = MEMORY[0x1E0DEE9E0];
LABEL_23:
    v28[0] = v6;
    v24 = (_QWORD *)swift_bridgeObjectRetain();
    sub_1BCA6447C(v24, 1, v28);
    swift_bridgeObjectRelease();
    return sub_1BCAB5010();
  }
  v2 = *(_QWORD *)(v1 + 16);
  if (!v2)
    goto LABEL_6;
LABEL_3:
  v32 = MEMORY[0x1E0DEE9D8];
  sub_1BC9BAD84(0, v2 & ~(v2 >> 63), 0);
  if (v27)
  {
    v3 = sub_1BCAB6408();
    v5 = 1;
  }
  else
  {
    v3 = sub_1BCA657FC(v1);
    v5 = v7 & 1;
  }
  v29 = v3;
  v30 = v4;
  v31 = v5;
  if ((v2 & 0x8000000000000000) == 0)
  {
    v26 = (id)objc_opt_self();
    do
    {
      while (1)
      {
        v14 = v29;
        v13 = v30;
        v15 = v31;
        sub_1BCA65594(v29, v30, v31, v1);
        v17 = v16;
        v18 = objc_msgSend(v26, sel_sampleTypeChangeWithSampleType_dateInterval_hasUnfrozenSeries_, v16, 0, 0);
        v19 = v32;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1BC9BAD84(0, *(_QWORD *)(v19 + 16) + 1, 1);
          v19 = v32;
        }
        v21 = *(_QWORD *)(v19 + 16);
        v20 = *(_QWORD *)(v19 + 24);
        if (v21 >= v20 >> 1)
        {
          sub_1BC9BAD84(v20 > 1, v21 + 1, 1);
          v19 = v32;
        }
        *(_QWORD *)(v19 + 16) = v21 + 1;
        v22 = v19 + 16 * v21;
        *(_QWORD *)(v22 + 32) = v17;
        *(_QWORD *)(v22 + 40) = v18;
        if (v27)
          break;
        v8 = sub_1BCA58798(v14, v13, v15, v1);
        v10 = v9;
        v12 = v11;
        sub_1BC9EF2FC(v14, v13, v15);
        v29 = v8;
        v30 = v10;
        v31 = v12 & 1;
        if (!--v2)
          goto LABEL_21;
      }
      if ((v15 & 1) == 0)
        goto LABEL_25;
      if (sub_1BCAB6420())
        swift_isUniquelyReferenced_nonNull_native();
      sub_1BC9EF234();
      v23 = (void (*)(_QWORD *, _QWORD))sub_1BCAB60E4();
      sub_1BCAB6480();
      v23(v28, 0);
      --v2;
    }
    while (v2);
LABEL_21:
    sub_1BC9EF2FC(v29, v30, v31);
    swift_bridgeObjectRelease();
    if (*(_QWORD *)(v32 + 16))
      goto LABEL_22;
    goto LABEL_7;
  }
  __break(1u);
LABEL_25:
  __break(1u);
  result = swift_unexpectedError();
  __break(1u);
  return result;
}

_QWORD *FeatureStatusChangePublisher.__allocating_init(featureIdentifier:context:affectedSampleTypes:serializedCacheData:healthStore:publisherFactory:)(void *a1, void *a2, uint64_t a3, uint64_t a4, unint64_t a5, void *a6, uint64_t a7)
{
  uint64_t v7;
  _QWORD *v15;
  id v16;
  id v17;
  _QWORD *v18;

  v15 = (_QWORD *)swift_allocObject();
  v15[2] = a1;
  v15[3] = a6;
  v15[4] = v7;
  type metadata accessor for FeatureStatusChangePublisher();
  swift_allocObject();
  v16 = a1;
  v17 = a6;
  v18 = sub_1BC9EE95C(v16, a2, a3, a4, a5, (uint64_t)sub_1BC9EE8CC, (uint64_t)v15);
  sub_1BC9EED08(a4, a5);

  sub_1BC9EED1C(a7);
  return v18;
}

uint64_t sub_1BC9EE404(uint64_t a1, uint64_t a2)
{
  id v2;
  uint64_t v3;

  v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB6730]), sel_initWithFeatureIdentifier_healthStore_, a1, a2);
  v3 = sub_1BC9ECD50();

  return v3;
}

_QWORD *FeatureStatusChangePublisher.__allocating_init(featureIdentifier:context:affectedSampleTypes:serializedCacheData:publisherFactory:)(void *a1, void *a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v14;

  swift_allocObject();
  v14 = sub_1BC9EE95C(a1, a2, a3, a4, a5, a6, a7);
  sub_1BC9EED08(a4, a5);

  return v14;
}

_QWORD *FeatureStatusChangePublisher.init(featureIdentifier:context:affectedSampleTypes:serializedCacheData:publisherFactory:)(void *a1, void *a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v11;

  v11 = sub_1BC9EE95C(a1, a2, a3, a4, a5, a6, a7);
  sub_1BC9EED08(a4, a5);

  return v11;
}

uint64_t FeatureStatusChangePublisher.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  sub_1BC9EED2C(v0 + OBJC_IVAR____TtC19HealthVisualization28FeatureStatusChangePublisher____lazy_storage___changeSetToUse);
  return v0;
}

uint64_t FeatureStatusChangePublisher.__deallocating_deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  sub_1BC9EED2C(v0 + OBJC_IVAR____TtC19HealthVisualization28FeatureStatusChangePublisher____lazy_storage___changeSetToUse);
  return swift_deallocClassInstance();
}

uint64_t sub_1BC9EE5F0()
{
  uint64_t v1;

  v1 = sub_1BCAB5F04();
  swift_bridgeObjectRetain();
  sub_1BCAB5F70();
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t sub_1BC9EE660()
{
  return sub_1BC9ED234();
}

uint64_t sub_1BC9EE680()
{
  return sub_1BC9ED8F0();
}

uint64_t type metadata accessor for FeatureStatusChangePublisher()
{
  uint64_t result;

  result = qword_1ED6C4050;
  if (!qword_1ED6C4050)
    return swift_getSingletonMetadata();
  return result;
}

unint64_t sub_1BC9EE6DC()
{
  unint64_t result;

  result = qword_1ED6C4028;
  if (!qword_1ED6C4028)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCAC1D48, &type metadata for FeatureStatusChangePublisher.CacheData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED6C4028);
  }
  return result;
}

void sub_1BC9EE720(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_1BC9EE6DC();
    v7 = a3(a1, &type metadata for FeatureStatusChangePublisher.CacheData.CodingKeys, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

void sub_1BC9EE77C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED6C4CF8)
  {
    sub_1BC9EE810();
    sub_1BCAB5034();
    sub_1BC996948(&qword_1ED6C4D40, (uint64_t (*)(uint64_t))sub_1BC9EE810, MEMORY[0x1E0C95D90]);
    v0 = sub_1BCAB57D8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED6C4CF8);
  }
}

void sub_1BC9EE810()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED6C4D48)
  {
    sub_1BCAB53F4();
    v0 = sub_1BCAB5814();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED6C4D48);
  }
}

uint64_t sub_1BC9EE874()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1BC9EE898@<X0>(uint64_t a1@<X8>)
{
  return sub_1BC9EDA48(a1);
}

uint64_t sub_1BC9EE8A0()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_1BC9EE8CC()
{
  uint64_t v0;

  return sub_1BC9EE404(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1BC9EE8D8(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;

  if (a1 == 0xD000000000000011 && a2 == 0x80000001BCAD0840)
  {
    swift_bridgeObjectRelease();
    v2 = 0;
  }
  else
  {
    v3 = sub_1BCAB67C8();
    swift_bridgeObjectRelease();
    v2 = v3 ^ 1;
  }
  return v2 & 1;
}

_QWORD *sub_1BC9EE95C(void *a1, void *a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  id v16;
  id v17;
  id v18;
  id v19;

  v8 = v7;
  v13 = sub_1BCAB5514();
  MEMORY[0x1E0C80A78](v13);
  v14 = (char *)v8
      + OBJC_IVAR____TtC19HealthVisualization28FeatureStatusChangePublisher____lazy_storage___changeSetToUse;
  v15 = sub_1BCAB5034();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v14, 1, 1, v15);
  v8[2] = a1;
  v8[3] = a2;
  v8[4] = a3;
  if (a5 >> 60 == 15)
  {
    v16 = a1;
    v17 = a2;
  }
  else
  {
    sub_1BCAB4B30();
    swift_allocObject();
    v18 = a1;
    v19 = a2;
    sub_1BC9EF368(a4, a5);
    sub_1BCAB4B24();
    sub_1BC9EF3C0();
    sub_1BCAB4B18();
    sub_1BC9EED08(a4, a5);
    swift_release();
  }
  sub_1BC9EF314();
  swift_allocObject();
  v8[5] = sub_1BCAB50A0();
  v8[6] = a6;
  v8[7] = a7;
  return v8;
}

uint64_t sub_1BC9EED08(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_1BC9D0098(a1, a2);
  return a1;
}

uint64_t sub_1BC9EED1C(uint64_t result)
{
  if (result)
    return swift_release();
  return result;
}

uint64_t sub_1BC9EED2C(uint64_t a1)
{
  uint64_t v2;

  sub_1BC998AB0(0, (unint64_t *)&qword_1ED6C7128, (uint64_t (*)(uint64_t))MEMORY[0x1E0D2DAD0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1BC9EED88()
{
  return type metadata accessor for FeatureStatusChangePublisher();
}

void sub_1BC9EED90()
{
  unint64_t v0;

  sub_1BC998AB0(319, (unint64_t *)&qword_1ED6C7128, (uint64_t (*)(uint64_t))MEMORY[0x1E0D2DAD0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t method lookup function for FeatureStatusChangePublisher()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of FeatureStatusChangePublisher.identifier.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of FeatureStatusChangePublisher.serializedData.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t dispatch thunk of FeatureStatusChangePublisher.publisher.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t dispatch thunk of FeatureStatusChangePublisher.cacheData.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

uint64_t dispatch thunk of FeatureStatusChangePublisher.__allocating_init(featureIdentifier:context:affectedSampleTypes:serializedCacheData:publisherFactory:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 224))();
}

uint64_t getEnumTagSinglePayload for FeatureStatusChangePublisher.CacheData(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  int v7;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 2 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 2) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 2;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 2;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 2;
  }
LABEL_17:
  v6 = *a1;
  if (v6 >= 2)
    v7 = ((v6 + 2147483646) & 0x7FFFFFFF) - 1;
  else
    v7 = -2;
  if (v7 < 0)
    v7 = -1;
  return (v7 + 1);
}

uint64_t storeEnumTagSinglePayload for FeatureStatusChangePublisher.CacheData(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1BC9EEF88 + 4 * byte_1BCAC1B75[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1BC9EEFBC + 4 * asc_1BCAC1B70[v4]))();
}

uint64_t sub_1BC9EEFBC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BC9EEFC4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BC9EEFCCLL);
  return result;
}

uint64_t sub_1BC9EEFD8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BC9EEFE0);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1BC9EEFE4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BC9EEFEC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FeatureStatusChangePublisher.CacheData()
{
  return &type metadata for FeatureStatusChangePublisher.CacheData;
}

uint64_t storeEnumTagSinglePayload for FeatureStatusChangePublisher.CacheData.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1BC9EF048 + 4 * byte_1BCAC1B7A[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1BC9EF068 + 4 * byte_1BCAC1B7F[v4]))();
}

_BYTE *sub_1BC9EF048(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1BC9EF068(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1BC9EF070(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1BC9EF078(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1BC9EF080(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1BC9EF088(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for FeatureStatusChangePublisher.CacheData.CodingKeys()
{
  return &type metadata for FeatureStatusChangePublisher.CacheData.CodingKeys;
}

unint64_t sub_1BC9EF0A8()
{
  unint64_t result;

  result = qword_1EF478D08;
  if (!qword_1EF478D08)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCAC1D20, &type metadata for FeatureStatusChangePublisher.CacheData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF478D08);
  }
  return result;
}

unint64_t sub_1BC9EF0F0()
{
  unint64_t result;

  result = qword_1ED6C4038;
  if (!qword_1ED6C4038)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCAC1C90, &type metadata for FeatureStatusChangePublisher.CacheData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED6C4038);
  }
  return result;
}

unint64_t sub_1BC9EF138()
{
  unint64_t result;

  result = qword_1ED6C4030;
  if (!qword_1ED6C4030)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCAC1CB8, &type metadata for FeatureStatusChangePublisher.CacheData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED6C4030);
  }
  return result;
}

uint64_t sub_1BC9EF17C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1BC998AB0(0, (unint64_t *)&qword_1ED6C7128, (uint64_t (*)(uint64_t))MEMORY[0x1E0D2DAD0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1BC9EF1D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1BC998AB0(0, (unint64_t *)&qword_1ED6C7128, (uint64_t (*)(uint64_t))MEMORY[0x1E0D2DAD0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

void sub_1BC9EF234()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EF478D10)
  {
    sub_1BC9A649C(255, (unint64_t *)&qword_1ED6C71C8);
    sub_1BC9EF2A4();
    v0 = sub_1BCAB60F0();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EF478D10);
  }
}

unint64_t sub_1BC9EF2A4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1ED6C6E60;
  if (!qword_1ED6C6E60)
  {
    v1 = sub_1BC9A649C(255, (unint64_t *)&qword_1ED6C71C8);
    result = MEMORY[0x1BCCFBE84](MEMORY[0x1E0DEFCF8], v1);
    atomic_store(result, (unint64_t *)&qword_1ED6C6E60);
  }
  return result;
}

uint64_t sub_1BC9EF2FC(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if ((a3 & 1) != 0)
    return swift_bridgeObjectRelease();
  return result;
}

_BYTE *sub_1BC9EF308(_BYTE *result)
{
  uint64_t v1;

  *result = *(_BYTE *)(v1 + 16);
  return result;
}

void sub_1BC9EF314()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED6C3660)
  {
    v0 = sub_1BCAB5088();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED6C3660);
  }
}

uint64_t sub_1BC9EF368(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_1BC9EF37C(a1, a2);
  return a1;
}

uint64_t sub_1BC9EF37C(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_retain();
  }
  return swift_retain();
}

unint64_t sub_1BC9EF3C0()
{
  unint64_t result;

  result = qword_1ED6C4048;
  if (!qword_1ED6C4048)
  {
    result = MEMORY[0x1BCCFBE84](&protocol conformance descriptor for FeatureStatusChangePublisher.CacheData, &type metadata for FeatureStatusChangePublisher.CacheData);
    atomic_store(result, (unint64_t *)&qword_1ED6C4048);
  }
  return result;
}

void sub_1BC9EF404()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED6C4D08)
  {
    sub_1BC9EF4CC();
    sub_1BC9EE810();
    sub_1BC996948(&qword_1ED6C4D30, (uint64_t (*)(uint64_t))sub_1BC9EF4CC, MEMORY[0x1E0C95C10]);
    sub_1BC996948(&qword_1ED6C4D40, (uint64_t (*)(uint64_t))sub_1BC9EE810, MEMORY[0x1E0C95D90]);
    v0 = sub_1BCAB57E4();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED6C4D08);
  }
}

void sub_1BC9EF4CC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED6C4D38)
  {
    sub_1BC998AB0(255, &qword_1ED6C4D50, (uint64_t (*)(uint64_t))MEMORY[0x1E0D2BD30], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
    sub_1BC9EF560();
    v0 = sub_1BCAB5808();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED6C4D38);
  }
}

unint64_t sub_1BC9EF560()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1ED6C4D58;
  if (!qword_1ED6C4D58)
  {
    sub_1BC998AB0(255, &qword_1ED6C4D50, (uint64_t (*)(uint64_t))MEMORY[0x1E0D2BD30], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
    result = MEMORY[0x1BCCFBE84](MEMORY[0x1E0DEAF38], v1);
    atomic_store(result, (unint64_t *)&qword_1ED6C4D58);
  }
  return result;
}

double DiagramMultiDayDateAxisMetricsCalculator.durationThreshold6HourTickIntervals.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 32);
}

double DiagramMultiDayDateAxisMetricsCalculator.durationThreshold12HourTickIntervals.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 40);
}

double DiagramMultiDayDateAxisMetricsCalculator.durationThreshold1DayTickIntervals.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 48);
}

id sub_1BC9EF5DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>, double a5@<D0>, double a6@<D1>)
{
  double *v6;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  double v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id result;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int *v48;
  void *v49;
  uint64_t v50;
  id v51;
  uint64_t v52;
  uint64_t v53;

  v51 = (id)a3;
  sub_1BC9AFF04(0, (unint64_t *)&qword_1ED6C7290, (void (*)(uint64_t))MEMORY[0x1E0CB1470]);
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v50 - v13;
  sub_1BC9AFF04(0, &qword_1ED6C7288, (void (*)(uint64_t))MEMORY[0x1E0CB11F0]);
  MEMORY[0x1E0C80A78](v15);
  v17 = (char *)&v50 - v16;
  v18 = sub_1BCAB4C74();
  v52 = *(_QWORD *)(v18 - 8);
  v53 = v18;
  MEMORY[0x1E0C80A78](v18);
  v20 = (char *)&v50 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v23 = (char *)&v50 - v22;
  MEMORY[0x1E0C80A78](v24);
  v26 = (char *)&v50 - v25;
  MEMORY[0x1E0C80A78](v27);
  v29 = (char *)&v50 - v28;
  v30 = a6 - a5;
  if (v6[4] >= a6 - a5)
  {
    v37 = sub_1BCAB4F74();
    v38 = *(_QWORD *)(v37 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v38 + 16))(v17, a1, v37);
    v36 = 1;
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v38 + 56))(v17, 0, 1, v37);
    v39 = sub_1BCAB4FB0();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 56))(v14, 1, 1, v39);
    sub_1BCAB4C50();
    result = (id)HKDateFormatterFromTemplate();
    if (result)
    {
      v51 = result;
      v33 = 6;
      v29 = v20;
      goto LABEL_12;
    }
    __break(1u);
    goto LABEL_14;
  }
  if (v6[5] >= v30)
  {
    v40 = sub_1BCAB4F74();
    v41 = *(_QWORD *)(v40 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v41 + 16))(v17, a1, v40);
    v36 = 1;
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v41 + 56))(v17, 0, 1, v40);
    v42 = sub_1BCAB4FB0();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 56))(v14, 1, 1, v42);
    sub_1BCAB4C50();
    v33 = 12;
    result = (id)HKDateFormatterFromTemplate();
    if (result)
    {
      v51 = result;
      v29 = v23;
      goto LABEL_12;
    }
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (v6[6] < v30)
  {
    sub_1BCAADED0(a2, (uint64_t)v51, v30 / (double)(uint64_t)*MEMORY[0x1E0CB4788]);
    v31 = sub_1BCAB4F74();
    v32 = *(_QWORD *)(v31 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v32 + 16))(v17, a1, v31);
    v33 = 1;
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v17, 0, 1, v31);
    v34 = sub_1BCAB4FB0();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v14, 1, 1, v34);
    sub_1BCAB4C50();
    result = (id)HKDateFormatterFromTemplate();
    if (result)
    {
      v51 = result;
      v36 = 0;
LABEL_12:
      v47 = v52;
      v46 = v53;
      v48 = (int *)type metadata accessor for DiagramDateAxisMetricsCalculator.DateTickIntervalStrategy();
      (*(void (**)(char *, char *, uint64_t))(v47 + 32))(&a4[v48[5]], v29, v46);
      *(_QWORD *)&a4[v48[6]] = v33;
      a4[v48[7]] = 0;
      v49 = v51;
      *(_QWORD *)&a4[v48[8]] = v51;
      *(_QWORD *)&a4[v48[9]] = v49;
      *a4 = v36;
      a4[v48[10]] = 1;
      return v49;
    }
    goto LABEL_15;
  }
  v43 = sub_1BCAB4F74();
  v44 = *(_QWORD *)(v43 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v44 + 16))(v17, a1, v43);
  v33 = 1;
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v44 + 56))(v17, 0, 1, v43);
  v45 = sub_1BCAB4FB0();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 56))(v14, 1, 1, v45);
  sub_1BCAB4C50();
  result = (id)HKDateFormatterFromTemplate();
  if (result)
  {
    v51 = result;
    v29 = v26;
    v36 = 1;
    goto LABEL_12;
  }
LABEL_16:
  __break(1u);
  return result;
}

uint64_t DiagramMultiDayDateAxisMetricsCalculator.__allocating_init(boundsLabelsShouldShowDaySpan:customLabelDateFormatter:)(char a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = swift_allocObject();
  v5 = *MEMORY[0x1E0CB4788];
  if ((unint64_t)(*MEMORY[0x1E0CB4788] - 0x2000000000000000) >> 62 != 3)
  {
    __break(1u);
    goto LABEL_6;
  }
  *(double *)(result + 32) = (double)(4 * v5);
  if ((unsigned __int128)(v5 * (__int128)10) >> 64 != (10 * v5) >> 63)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  *(double *)(result + 40) = (double)(10 * v5);
  v6 = (unsigned __int128)(v5 * (__int128)20) >> 64;
  v7 = 20 * v5;
  if (v6 == v7 >> 63)
  {
    *(double *)(result + 48) = (double)v7;
    *(_BYTE *)(result + 16) = a1 & 1;
    *(_QWORD *)(result + 24) = a2;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t DiagramMultiDayDateAxisMetricsCalculator.init(boundsLabelsShouldShowDaySpan:customLabelDateFormatter:)(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *MEMORY[0x1E0CB4788];
  if ((unint64_t)(*MEMORY[0x1E0CB4788] - 0x2000000000000000) >> 62 != 3)
  {
    __break(1u);
    goto LABEL_6;
  }
  *(double *)(v2 + 32) = (double)(4 * v3);
  if ((unsigned __int128)(v3 * (__int128)10) >> 64 != (10 * v3) >> 63)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  *(double *)(v2 + 40) = (double)(10 * v3);
  v4 = (unsigned __int128)(v3 * (__int128)20) >> 64;
  v5 = 20 * v3;
  if (v4 == v5 >> 63)
  {
    *(double *)(v2 + 48) = (double)v5;
    *(_BYTE *)(v2 + 16) = result & 1;
    *(_QWORD *)(v2 + 24) = a2;
    return v2;
  }
LABEL_7:
  __break(1u);
  return result;
}

uint64_t DiagramMultiDayDateAxisMetricsCalculator.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t DiagramMultiDayDateAxisMetricsCalculator.__deallocating_deinit()
{
  uint64_t v0;

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for DiagramMultiDayDateAxisMetricsCalculator()
{
  return objc_opt_self();
}

void sub_1BC9EFDDC()
{
  qword_1ED6D38F8 = 0x4014000000000000;
}

void sub_1BC9EFDEC()
{
  qword_1ED6D3908 = 0x4014000000000000;
}

void sub_1BC9EFDFC()
{
  qword_1ED6D3828 = 0;
}

void sub_1BC9EFE08()
{
  qword_1ED6D3910 = 0x4028000000000000;
}

void sub_1BC9EFE18()
{
  qword_1ED6D3920 = 0x402C000000000000;
}

void sub_1BC9EFE28()
{
  qword_1ED6D3918 = 0x4030000000000000;
}

void sub_1BC9EFE38()
{
  qword_1ED6D3900 = 0x4010000000000000;
}

id sub_1BC9EFE48()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  void *v5;
  id v6;

  v1 = OBJC_IVAR____TtC19HealthVisualization21HighlightCalendarView____lazy_storage___ringsRenderer;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC19HealthVisualization21HighlightCalendarView____lazy_storage___ringsRenderer);
  if (v2)
  {
    v3 = *(id *)(v0 + OBJC_IVAR____TtC19HealthVisualization21HighlightCalendarView____lazy_storage___ringsRenderer);
  }
  else
  {
    v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CF51B8]), sel_init);
    v5 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v4;
    v3 = v4;

    v2 = 0;
  }
  v6 = v2;
  return v3;
}

id HighlightCalendarView.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithCoder_, a1);

  return v3;
}

void HighlightCalendarView.init(coder:)()
{
  char *v0;
  uint64_t v1;

  *(_QWORD *)&v0[OBJC_IVAR____TtC19HealthVisualization21HighlightCalendarView_longWeekdayStrings] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC19HealthVisualization21HighlightCalendarView_shortWeekdayStrings] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC19HealthVisualization21HighlightCalendarView____lazy_storage___ringsRenderer] = 0;
  v1 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)&v0[OBJC_IVAR____TtC19HealthVisualization21HighlightCalendarView_weekdayLabels] = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)&v0[OBJC_IVAR____TtC19HealthVisualization21HighlightCalendarView_monthLabels] = v1;

  sub_1BCAB65C4();
  __break(1u);
}

id HighlightCalendarView.__allocating_init(model:)(uint64_t a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_allocWithZone(v1);
  return HighlightCalendarView.init(model:)(a1);
}

id HighlightCalendarView.init(model:)(uint64_t a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  objc_class *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  int v24;
  id v25;
  id v26;
  unint64_t v27;
  void *v28;
  id v29;
  _QWORD v31[2];
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36[3];
  char v37;
  objc_super v38;

  v3 = type metadata accessor for HighlightCalendarDayViewModel(0);
  v32 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(_BYTE *)(a1 + 24);
  v10 = OBJC_IVAR____TtC19HealthVisualization21HighlightCalendarView_longWeekdayStrings;
  *(_QWORD *)&v1[OBJC_IVAR____TtC19HealthVisualization21HighlightCalendarView_longWeekdayStrings] = 0;
  v11 = OBJC_IVAR____TtC19HealthVisualization21HighlightCalendarView_shortWeekdayStrings;
  *(_QWORD *)&v1[OBJC_IVAR____TtC19HealthVisualization21HighlightCalendarView_shortWeekdayStrings] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC19HealthVisualization21HighlightCalendarView____lazy_storage___ringsRenderer] = 0;
  v12 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)&v1[OBJC_IVAR____TtC19HealthVisualization21HighlightCalendarView_weekdayLabels] = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)&v1[OBJC_IVAR____TtC19HealthVisualization21HighlightCalendarView_monthLabels] = v12;
  *(_QWORD *)&v1[v10] = v6;
  v13 = v1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)&v1[v11] = v8;
  swift_bridgeObjectRetain();

  swift_bridgeObjectRelease();
  v14 = (objc_class *)type metadata accessor for HighlightCalendarView();
  v38.receiver = v13;
  v38.super_class = v14;
  v15 = objc_msgSendSuper2(&v38, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  sub_1BC9F04D0();
  sub_1BC9F05BC();
  v36[0] = v7;
  v36[1] = v6;
  v36[2] = v8;
  v37 = v9;
  sub_1BC9F06E8(v36);
  v35 = *(_QWORD *)(v7 + 16);
  if (v35)
  {
    v16 = *(_QWORD *)(v7 + 32);
    v34 = v7 + 32;
    v17 = *(_QWORD *)(v16 + 16);
    v31[1] = v7;
    if (v17)
      v33 = *(unsigned __int8 *)(v16
                               + ((*(unsigned __int8 *)(v32 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v32 + 80))
                               + 16);
    else
      v33 = 0;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v18 = 0;
    while (1)
    {
      v19 = *(_QWORD *)(v34 + 8 * v18);
      if ((v33 & 1) != 0)
      {
        swift_bridgeObjectRetain();
        v20 = *(_QWORD *)(v19 + 16);
        if (!v20)
          goto LABEL_19;
      }
      else
      {
        v36[0] = *(_QWORD *)(v34 + 8 * v18);
        swift_bridgeObjectRetain();
        sub_1BC9F107C(v36);
        v20 = *(_QWORD *)(v19 + 16);
        if (!v20)
        {
LABEL_19:
          if (MEMORY[0x1E0DEE9D8] >> 62)
            goto LABEL_20;
          goto LABEL_15;
        }
      }
      v36[0] = MEMORY[0x1E0DEE9D8];
      swift_bridgeObjectRetain();
      sub_1BCAB654C();
      v21 = v19 + ((*(unsigned __int8 *)(v32 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v32 + 80));
      v22 = *(_QWORD *)(v32 + 72);
      do
      {
        v24 = *(unsigned __int8 *)(v21 + 48);
        sub_1BC9D5988(v21, (uint64_t)v5);
        if (v24)
        {
          v23 = objc_allocWithZone((Class)type metadata accessor for HighlightCalendarDayView());
          sub_1BCA50C14((uint64_t)v5, 0);
        }
        else
        {
          v25 = sub_1BC9EFE48();
          v26 = objc_allocWithZone((Class)type metadata accessor for HighlightCalendarDayView());
          sub_1BCA50C14((uint64_t)v5, v25);

        }
        v21 += v22;
        sub_1BCAB6534();
        sub_1BCAB6558();
        sub_1BCAB6564();
        sub_1BCAB6540();
        --v20;
      }
      while (v20);
      v27 = v36[0];
      swift_bridgeObjectRelease();
      if (v27 >> 62)
      {
LABEL_20:
        sub_1BC9A649C(0, (unint64_t *)&qword_1ED6C5B10);
        swift_bridgeObjectRetain();
        sub_1BCAB65D0();
        swift_bridgeObjectRelease();
        goto LABEL_16;
      }
LABEL_15:
      swift_bridgeObjectRetain();
      sub_1BCAB67D4();
      sub_1BC9A649C(0, (unint64_t *)&qword_1ED6C5B10);
LABEL_16:
      ++v18;
      swift_bridgeObjectRelease();
      sub_1BC9A649C(0, (unint64_t *)&qword_1ED6C5B10);
      v28 = (void *)sub_1BCAB600C();
      swift_bridgeObjectRelease();
      v29 = objc_msgSend(v15, sel_addRowWithArrangedSubviews_, v28);
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();

      if (v18 == v35)
      {

        goto LABEL_21;
      }
    }
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_21:
  swift_bridgeObjectRelease();
  return v15;
}

uint64_t type metadata accessor for HighlightCalendarView()
{
  return objc_opt_self();
}

uint64_t sub_1BC9F04D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  swift_getObjectType();
  sub_1BC9D5A78();
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1BCABFE80;
  v1 = sub_1BCAB5538();
  v2 = MEMORY[0x1E0DC29B0];
  *(_QWORD *)(v0 + 32) = v1;
  *(_QWORD *)(v0 + 40) = v2;
  v3 = sub_1BCAB552C();
  v4 = MEMORY[0x1E0DC2160];
  *(_QWORD *)(v0 + 48) = v3;
  *(_QWORD *)(v0 + 56) = v4;
  sub_1BCAB62F4();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1BCABE680;
  *(_QWORD *)(v5 + 32) = v1;
  *(_QWORD *)(v5 + 40) = v2;
  sub_1BCAB62F4();
  swift_unknownObjectRelease();
  return swift_bridgeObjectRelease();
}

id sub_1BC9F05BC()
{
  void *v0;
  double v1;

  objc_msgSend(v0, sel_setHorizontalDistribution_, 4);
  objc_msgSend(v0, sel_setHorizontalAlignment_, 3);
  if (qword_1ED6C5FC0 != -1)
    swift_once();
  objc_msgSend(v0, sel_setRowSpacing_, *(double *)&qword_1ED6D3908);
  objc_msgSend(v0, sel_setColumnSpacing_, 1.0);
  objc_msgSend(v0, sel_setLayoutMarginsRelativeArrangement_, 1);
  if (qword_1ED6C5FD8 != -1)
    swift_once();
  v1 = *(double *)&qword_1ED6D3828;
  if (qword_1ED6C5FB8 != -1)
    swift_once();
  return objc_msgSend(v0, sel_setLayoutMargins_, v1, v1, *(double *)&qword_1ED6D3900);
}

void sub_1BC9F06E8(uint64_t *a1)
{
  char *v1;
  char *v2;
  uint64_t v3;
  char v4;
  id v5;
  id v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  id v14;
  uint64_t v15;
  id v16;
  id v17;
  double v18;
  double v19;
  double v20;
  uint64_t v21;
  id v22;
  void *v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v2 = v1;
  v3 = *a1;
  v4 = *((_BYTE *)a1 + 24);
  v5 = objc_msgSend(v1, sel_traitCollection);
  v6 = objc_msgSend(v5, sel_preferredContentSizeCategory);

  LOBYTE(v5) = sub_1BCAB62C4();
  if ((v5 & 1) != 0)
  {
    v7 = *(_QWORD *)&v2[OBJC_IVAR____TtC19HealthVisualization21HighlightCalendarView_shortWeekdayStrings];
    if (!v7)
    {
      v8 = &OBJC_IVAR____TtC19HealthVisualization21HighlightCalendarView_longWeekdayStrings;
      goto LABEL_6;
    }
  }
  else
  {
    v7 = *(_QWORD *)&v2[OBJC_IVAR____TtC19HealthVisualization21HighlightCalendarView_longWeekdayStrings];
    if (!v7)
    {
      v8 = &OBJC_IVAR____TtC19HealthVisualization21HighlightCalendarView_shortWeekdayStrings;
LABEL_6:
      v7 = *(_QWORD *)&v2[*v8];
      if (!v7)
        return;
    }
  }
  swift_bridgeObjectRetain();
  v9 = *(_QWORD *)(v7 + 16);
  if (v9)
  {
    v31 = MEMORY[0x1E0DEE9D8];
    sub_1BCAB654C();
    v10 = v7 + 40;
    do
    {
      swift_bridgeObjectRetain();
      sub_1BC9F0BE8(&v30);
      swift_bridgeObjectRelease();
      v10 += 16;
      sub_1BCAB6534();
      sub_1BCAB6558();
      sub_1BCAB6564();
      sub_1BCAB6540();
      --v9;
    }
    while (v9);
    v11 = v31;
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    v11 = MEMORY[0x1E0DEE9D8];
  }
  v12 = OBJC_IVAR____TtC19HealthVisualization21HighlightCalendarView_weekdayLabels;
  *(_QWORD *)&v2[OBJC_IVAR____TtC19HealthVisualization21HighlightCalendarView_weekdayLabels] = v11;
  swift_bridgeObjectRelease();
  if (*(_QWORD *)&v2[v12] >> 62)
  {
    sub_1BC9A649C(0, (unint64_t *)&qword_1ED6C5B10);
    swift_bridgeObjectRetain();
    sub_1BCAB65D0();
  }
  else
  {
    swift_bridgeObjectRetain_n();
    sub_1BCAB67D4();
    sub_1BC9A649C(0, (unint64_t *)&qword_1ED6C5B10);
  }
  swift_bridgeObjectRelease();
  sub_1BC9A649C(0, (unint64_t *)&qword_1ED6C5B10);
  v13 = (void *)sub_1BCAB600C();
  swift_bridgeObjectRelease();
  v14 = objc_msgSend(v2, sel_addRowWithArrangedSubviews_, v13);

  if ((v4 & 1) != 0)
  {
    v15 = qword_1ED6C5FC8;
    swift_unknownObjectRetain();
    if (v15 != -1)
      swift_once();
    objc_msgSend(v14, sel_setSpacingAfter_, *(double *)&qword_1ED6D3910);
    swift_unknownObjectRelease();
    v16 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3F10]), sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
    v17 = objc_msgSend((id)objc_opt_self(), sel_separatorColor);
    objc_msgSend(v16, sel_setBackgroundColor_, v17);

    v18 = *MEMORY[0x1E0CFAA78];
    HKUIOnePixel();
    LODWORD(v19) = 1148846080;
    objc_msgSend(v16, sel_setLayoutSize_withContentPriority_, v18, v20, v19);
    sub_1BC9AFE08();
    v21 = swift_allocObject();
    *(_OWORD *)(v21 + 16) = xmmword_1BCABF370;
    *(_QWORD *)(v21 + 32) = v16;
    sub_1BCAB6024();
    v22 = v16;
    v23 = (void *)sub_1BCAB600C();
    swift_bridgeObjectRelease();
    v24 = objc_msgSend(v2, sel_addRowWithArrangedSubviews_, v23);

    swift_unknownObjectRelease();
    objc_msgSend(v2, sel_setAlignment_forView_inAxis_, 0, v22, 0);

    v14 = v24;
  }
  if (*(_QWORD *)(v3 + 16)
    && (v25 = *(_QWORD *)(v3 + 32), *(_QWORD *)(v25 + 16))
    && (v26 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for HighlightCalendarDayViewModel(0) - 8) + 80),
        *(_BYTE *)(v25 + ((v26 + 32) & ~v26) + 16) == 1))
  {
    v27 = qword_1ED6C5F90;
    swift_unknownObjectRetain();
    if (v27 != -1)
      swift_once();
    v28 = &qword_1ED6D3918;
  }
  else
  {
    v29 = qword_1ED6C5FD0;
    swift_unknownObjectRetain();
    if (v29 != -1)
      swift_once();
    v28 = &qword_1ED6D3920;
  }
  objc_msgSend(v14, sel_setSpacingAfter_, *(double *)v28);
  swift_unknownObjectRelease_n();
}

id sub_1BC9F0BE8@<X0>(_QWORD *a1@<X8>)
{
  id v2;
  void *v3;
  id v4;
  void *v5;
  id v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  double v14;
  double v15;
  double v16;
  id result;
  int v18;

  v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3990]), sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  v3 = (void *)sub_1BCAB5EE0();
  objc_msgSend(v2, sel_setText_, v3);

  v4 = objc_msgSend((id)objc_opt_self(), sel_secondaryLabelColor);
  objc_msgSend(v2, sel_setTextColor_, v4);

  objc_msgSend(v2, sel_setTextAlignment_, 1);
  if (byte_1EF47A010 != 1)
  {
    v13 = (void *)objc_opt_self();
    sub_1BCAB5F04();
    v12 = (void *)sub_1BCAB5EE0();
    swift_bridgeObjectRelease();
    v8 = objc_msgSend(v13, sel_hk_preferredFontForTextStyle_symbolicTraits_maximumContentSizeCategory_, v12, 32770, *MEMORY[0x1E0DC48F0]);
    goto LABEL_8;
  }
  if (qword_1ED6C5FF0 != -1)
    swift_once();
  v5 = (void *)qword_1ED6C5560;
  sub_1BC9A649C(0, (unint64_t *)&qword_1ED6C5B38);
  v6 = v5;
  v7 = (void *)sub_1BCAB6348();
  v8 = objc_msgSend(v6, sel_objectForKey_, v7);

  if (!v8)
  {
    v9 = (void *)objc_opt_self();
    sub_1BCAB5F04();
    v10 = (void *)sub_1BCAB5EE0();
    swift_bridgeObjectRelease();
    v8 = objc_msgSend(v9, sel_hk_preferredFontForTextStyle_symbolicTraits_maximumContentSizeCategory_, v10, 32770, *MEMORY[0x1E0DC48F0]);

    if ((byte_1EF47A010 & 1) != 0)
    {
      v11 = (id)qword_1ED6C5560;
      v12 = (void *)sub_1BCAB6348();
      objc_msgSend(v11, sel_setObject_forKey_, v8, v12);

LABEL_8:
    }
  }
  objc_msgSend(v2, sel_setFont_, v8);

  objc_msgSend(v2, sel_setAdjustsFontSizeToFitWidth_, 1);
  objc_msgSend(v2, sel_setAllowsDefaultTighteningForTruncation_, 1);
  if (qword_1ED6C6040 != -1)
    swift_once();
  v14 = *(double *)&qword_1ED6D3960;
  v15 = *MEMORY[0x1E0CFAA78];
  type metadata accessor for UILayoutPriority(0);
  sub_1BC9D5940();
  sub_1BCAB5520();
  LODWORD(v16) = v18;
  result = objc_msgSend(v2, sel_setLayoutSize_withContentPriority_, v14, v15, v16);
  *a1 = v2;
  return result;
}

uint64_t sub_1BC9F0F7C(void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  id v8;
  id v9;
  uint64_t result;
  uint64_t v11;

  if (a2 < 0)
  {
    result = sub_1BCAB65B8();
    __break(1u);
  }
  else
  {
    if (a2)
    {
      sub_1BC9A649C(0, (unint64_t *)&qword_1ED6C5B10);
      v4 = sub_1BCAB6048();
      v5 = v4 & 0xFFFFFFFFFFFFFF8;
      *(_QWORD *)(v5 + 16) = a2;
      v11 = v4;
      *(_QWORD *)(v5 + 32) = a1;
      if (a2 != 1)
      {
        *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x28) = a1;
        v6 = a2 - 2;
        if (v6)
        {
          v7 = (_QWORD *)(v5 + 48);
          do
          {
            *v7++ = a1;
            v8 = a1;
            --v6;
          }
          while (v6);
        }
        v9 = a1;
      }
    }
    else
    {
      v11 = MEMORY[0x1E0DEE9D8];

    }
    sub_1BCAB6024();
    return v11;
  }
  return result;
}

uint64_t sub_1BC9F107C(uint64_t *a1)
{
  char *v1;
  void *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  id v16;
  id v17;
  id v18;
  unint64_t v19;
  uint64_t v20;
  void *v21;
  void *v23;
  unint64_t v24;

  v2 = v1;
  v3 = *a1;
  v4 = MEMORY[0x1E0DEE9D8];
  v24 = MEMORY[0x1E0DEE9D8];
  v5 = *(_QWORD *)(*a1 + 16);
  if (v5)
  {
    v23 = v1;
    v6 = &v1[OBJC_IVAR____TtC19HealthVisualization21HighlightCalendarView_monthLabels];
    v7 = *(_QWORD *)(type metadata accessor for HighlightCalendarDayViewModel(0) - 8);
    v8 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
    v9 = *(_QWORD *)(v7 + 72);
    swift_bridgeObjectRetain();
    v10 = 0;
    v11 = v5 - 1;
    v12 = (_QWORD *)(v8 + v3 + 8);
    while (1)
    {
      v13 = HIBYTE(*v12) & 0xFLL;
      if ((*v12 & 0x2000000000000000) == 0)
        v13 = *(v12 - 1) & 0xFFFFFFFFFFFFLL;
      if (v13)
      {
        if (v10 < 1)
          v14 = MEMORY[0x1E0DEE9D8];
        else
          v14 = sub_1BC9F0F7C(objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3F10]), sel_init), v10);
        sub_1BC9E3F50(v14);
        v16 = sub_1BC9F1710();
        swift_beginAccess();
        v17 = v16;
        MEMORY[0x1BCCFABF4]();
        if (*(_QWORD *)((*(_QWORD *)v6 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*(_QWORD *)v6 & 0xFFFFFFFFFFFFFF8)
                                                                                    + 0x18) >> 1)
          sub_1BCAB6030();
        sub_1BCAB6054();
        sub_1BCAB6024();
        swift_endAccess();
        v18 = v17;
        MEMORY[0x1BCCFABF4]();
        if (*(_QWORD *)((v24 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v24 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          sub_1BCAB6030();
        sub_1BCAB6054();
        sub_1BCAB6024();

        v10 = 0;
        if (!v11)
          goto LABEL_18;
      }
      else
      {
        if (__OFADD__(v10++, 1))
        {
          __break(1u);
          goto LABEL_32;
        }
        if (!v11)
        {
LABEL_18:
          swift_bridgeObjectRelease();
          v4 = v24;
          v2 = v23;
          if (v24 >> 62)
            goto LABEL_23;
LABEL_19:
          if (*(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_20;
LABEL_24:
          sub_1BC9F1710();
          MEMORY[0x1BCCFABF4]();
          if (*(_QWORD *)((v24 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v24 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
            sub_1BCAB6030();
          sub_1BCAB6054();
          sub_1BCAB6024();
          goto LABEL_29;
        }
      }
      v12 = (_QWORD *)((char *)v12 + v9);
      --v11;
    }
  }
  v10 = 0;
  if (!(MEMORY[0x1E0DEE9D8] >> 62))
    goto LABEL_19;
LABEL_23:
  swift_bridgeObjectRetain();
  v20 = sub_1BCAB65DC();
  swift_bridgeObjectRelease();
  if (!v20)
    goto LABEL_24;
LABEL_20:
  if (v10 < 1)
    v19 = MEMORY[0x1E0DEE9D8];
  else
    v19 = sub_1BC9F0F7C(objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3F10]), sel_init), v10);
  sub_1BC9E3F50(v19);
LABEL_29:
  sub_1BC9A649C(0, (unint64_t *)&qword_1ED6C5B10);
  v21 = (void *)sub_1BCAB600C();
  swift_bridgeObjectRelease();
  v12 = objc_msgSend(v2, sel_addRowWithArrangedSubviews_, v21);

  if (qword_1ED6C5FB0 != -1)
LABEL_32:
    swift_once();
  objc_msgSend(v12, sel_setSpacingAfter_, *(double *)&qword_1ED6D38F8);
  return swift_unknownObjectRelease();
}

id HighlightCalendarView.__allocating_init(frame:)(double a1, double a2, double a3, double a4)
{
  objc_class *v4;

  return objc_msgSend(objc_allocWithZone(v4), sel_initWithFrame_, a1, a2, a3, a4);
}

void HighlightCalendarView.init(frame:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id HighlightCalendarView.__allocating_init(arrangedSubviewRows:)(uint64_t a1)
{
  objc_class *v1;
  void *v2;
  id v3;

  if (a1)
  {
    sub_1BC9D5110();
    v2 = (void *)sub_1BCAB600C();
    swift_bridgeObjectRelease();
  }
  else
  {
    v2 = 0;
  }
  v3 = objc_msgSend(objc_allocWithZone(v1), sel_initWithArrangedSubviewRows_, v2);

  return v3;
}

void HighlightCalendarView.init(arrangedSubviewRows:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id HighlightCalendarView.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for HighlightCalendarView();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t method lookup function for HighlightCalendarView()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of HighlightCalendarView.__allocating_init(model:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 248))();
}

id sub_1BC9F1710()
{
  id v0;
  void *v1;
  id v2;
  void *v3;
  id v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;

  v0 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0DC3990]), sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  objc_msgSend(v0, sel_setTextAlignment_, 1);
  v1 = (void *)sub_1BCAB5EE0();
  objc_msgSend(v0, sel_setText_, v1);

  v2 = objc_msgSend((id)objc_opt_self(), sel_secondaryLabelColor);
  objc_msgSend(v0, sel_setTextColor_, v2);

  if (byte_1EF47A010 != 1)
  {
    v11 = (void *)objc_opt_self();
    sub_1BCAB5F04();
    v10 = (void *)sub_1BCAB5EE0();
    swift_bridgeObjectRelease();
    v6 = objc_msgSend(v11, sel_hk_preferredFontForTextStyle_symbolicTraits_maximumContentSizeCategory_, v10, 32770, *MEMORY[0x1E0DC48F0]);
    goto LABEL_8;
  }
  if (qword_1ED6C5FF0 != -1)
    swift_once();
  v3 = (void *)qword_1ED6C5560;
  sub_1BC9A649C(0, (unint64_t *)&qword_1ED6C5B38);
  v4 = v3;
  v5 = (void *)sub_1BCAB6348();
  v6 = objc_msgSend(v4, sel_objectForKey_, v5);

  if (!v6)
  {
    v7 = (void *)objc_opt_self();
    sub_1BCAB5F04();
    v8 = (void *)sub_1BCAB5EE0();
    swift_bridgeObjectRelease();
    v6 = objc_msgSend(v7, sel_hk_preferredFontForTextStyle_symbolicTraits_maximumContentSizeCategory_, v8, 32770, *MEMORY[0x1E0DC48F0]);

    if ((byte_1EF47A010 & 1) != 0)
    {
      v9 = (id)qword_1ED6C5560;
      v10 = (void *)sub_1BCAB6348();
      objc_msgSend(v9, sel_setObject_forKey_, v6, v10);

LABEL_8:
    }
  }
  objc_msgSend(v0, sel_setFont_, v6);

  return v0;
}

void sub_1BC9F19C8(_QWORD *a1)
{
  unint64_t v1;
  _QWORD *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  id *v10;
  void *v11;
  id v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  id v22;
  id v23;
  void *v24;
  void *v25;
  id v26;
  void *v27;
  void *v28;
  void *v29;
  id v30;
  id v31;
  id v32;
  uint64_t *v33;
  id v34;
  void *v35;
  uint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  id v40;
  void *v41;
  unint64_t v42;
  uint64_t v43;
  char *v44;

  v2 = a1;
  v3 = (unint64_t)a1 + OBJC_IVAR____TtC19HealthVisualization21HighlightCalendarView_monthLabels;
  swift_beginAccess();
  v4 = *(_QWORD *)v3;
  v44 = (char *)v2;
  if (*(_QWORD *)v3 >> 62)
  {
    if (v4 < 0)
      v3 = *(_QWORD *)v3;
    else
      v3 = v4 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain_n();
    v5 = sub_1BCAB65DC();
    if (v5)
      goto LABEL_3;
  }
  else
  {
    v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n();
    if (v5)
    {
LABEL_3:
      if (v5 >= 1)
      {
        v6 = 0;
        v1 = v4 & 0xC000000000000001;
        v7 = *MEMORY[0x1E0DC48F0];
        while (1)
        {
          if (v1)
            v10 = (id *)MEMORY[0x1BCCFB0D4](v6, v4);
          else
            v10 = (id *)*(id *)(v4 + 8 * v6 + 32);
          v3 = (unint64_t)v10;
          if (byte_1EF47A010 == 1)
          {
            if (qword_1ED6C5FF0 != -1)
              swift_once();
            v11 = (void *)qword_1ED6C5560;
            v2 = (_QWORD *)sub_1BC9A649C(0, (unint64_t *)&qword_1ED6C5B38);
            v12 = v11;
            v13 = (void *)sub_1BCAB6348();
            v9 = objc_msgSend(v12, sel_objectForKey_, v13);

            if (v9)
              goto LABEL_7;
            v14 = (void *)objc_opt_self();
            sub_1BCAB5F04();
            v15 = (void *)sub_1BCAB5EE0();
            swift_bridgeObjectRelease();
            v9 = objc_msgSend(v14, sel_hk_preferredFontForTextStyle_symbolicTraits_maximumContentSizeCategory_, v15, 32770, v7);

            if ((byte_1EF47A010 & 1) == 0)
              goto LABEL_7;
            v16 = (id)qword_1ED6C5560;
            v2 = (_QWORD *)sub_1BCAB6348();
            objc_msgSend(v16, sel_setObject_forKey_, v9, v2);

          }
          else
          {
            v8 = (void *)objc_opt_self();
            sub_1BCAB5F04();
            v2 = (_QWORD *)sub_1BCAB5EE0();
            swift_bridgeObjectRelease();
            v9 = objc_msgSend(v8, sel_hk_preferredFontForTextStyle_symbolicTraits_maximumContentSizeCategory_, v2, 32770, v7);
          }

LABEL_7:
          ++v6;
          objc_msgSend((id)v3, sel_setFont_, v9);

          if (v5 == v6)
            goto LABEL_21;
        }
      }
      __break(1u);
LABEL_69:
      __break(1u);
      goto LABEL_70;
    }
  }
LABEL_21:
  swift_bridgeObjectRelease_n();
  v43 = OBJC_IVAR____TtC19HealthVisualization21HighlightCalendarView_weekdayLabels;
  v17 = *(_QWORD *)&v44[OBJC_IVAR____TtC19HealthVisualization21HighlightCalendarView_weekdayLabels];
  if ((unint64_t)v17 >> 62)
  {
    if (v17 < 0)
      v3 = *(_QWORD *)&v44[OBJC_IVAR____TtC19HealthVisualization21HighlightCalendarView_weekdayLabels];
    else
      v3 = v17 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain_n();
    v5 = sub_1BCAB65DC();
    if (v5)
      goto LABEL_23;
  }
  else
  {
    v5 = *(_QWORD *)((v17 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n();
    if (v5)
    {
LABEL_23:
      if (v5 < 1)
        goto LABEL_69;
      v18 = 0;
      v19 = *MEMORY[0x1E0DC48F0];
      do
      {
        if ((v17 & 0xC000000000000001) != 0)
          v23 = (id)MEMORY[0x1BCCFB0D4](v18, v17);
        else
          v23 = *(id *)(v17 + 8 * v18 + 32);
        v24 = v23;
        if (byte_1EF47A010 == 1)
        {
          if (qword_1ED6C5FF0 != -1)
            swift_once();
          v25 = (void *)qword_1ED6C5560;
          sub_1BC9A649C(0, (unint64_t *)&qword_1ED6C5B38);
          v26 = v25;
          v27 = (void *)sub_1BCAB6348();
          v22 = objc_msgSend(v26, sel_objectForKey_, v27);

          if (v22)
            goto LABEL_27;
          v28 = (void *)objc_opt_self();
          sub_1BCAB5F04();
          v29 = (void *)sub_1BCAB5EE0();
          swift_bridgeObjectRelease();
          v22 = objc_msgSend(v28, sel_hk_preferredFontForTextStyle_symbolicTraits_maximumContentSizeCategory_, v29, 32770, v19);

          if ((byte_1EF47A010 & 1) == 0)
            goto LABEL_27;
          v30 = (id)qword_1ED6C5560;
          v21 = (void *)sub_1BCAB6348();
          objc_msgSend(v30, sel_setObject_forKey_, v22, v21);

        }
        else
        {
          v20 = (void *)objc_opt_self();
          sub_1BCAB5F04();
          v21 = (void *)sub_1BCAB5EE0();
          swift_bridgeObjectRelease();
          v22 = objc_msgSend(v20, sel_hk_preferredFontForTextStyle_symbolicTraits_maximumContentSizeCategory_, v21, 32770, v19);
        }

LABEL_27:
        ++v18;
        objc_msgSend(v24, sel_setFont_, v22, v43);

      }
      while (v5 != v18);
    }
  }
  swift_bridgeObjectRelease_n();
  v31 = objc_msgSend(v44, sel_traitCollection);
  v32 = objc_msgSend(v31, sel_preferredContentSizeCategory);

  LOBYTE(v31) = sub_1BCAB62C4();
  if ((v31 & 1) != 0)
  {
    v2 = *(_QWORD **)&v44[OBJC_IVAR____TtC19HealthVisualization21HighlightCalendarView_shortWeekdayStrings];
    if (!v2)
    {
      v33 = &OBJC_IVAR____TtC19HealthVisualization21HighlightCalendarView_longWeekdayStrings;
      goto LABEL_46;
    }
  }
  else
  {
    v2 = *(_QWORD **)&v44[OBJC_IVAR____TtC19HealthVisualization21HighlightCalendarView_longWeekdayStrings];
    if (!v2)
    {
      v33 = &OBJC_IVAR____TtC19HealthVisualization21HighlightCalendarView_shortWeekdayStrings;
LABEL_46:
      v2 = *(_QWORD **)&v44[*v33];
      if (!v2)
        return;
    }
  }
  swift_bridgeObjectRetain();
  v3 = *(_QWORD *)&v44[v43];
  if (v3 >> 62)
    goto LABEL_64;
  v5 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v5; v5 = sub_1BCAB65DC())
  {
    v1 = v3 & 0xC000000000000001;
    if ((v3 & 0xC000000000000001) != 0)
    {
LABEL_70:
      v34 = (id)MEMORY[0x1BCCFB0D4](0, v3);
    }
    else
    {
      if (!*(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        __break(1u);
        return;
      }
      v34 = *(id *)(v3 + 32);
    }
    v35 = v34;
    v36 = v2[2];
    if (!v36)
    {
LABEL_61:
      swift_bridgeObjectRelease();

      goto LABEL_66;
    }
    v37 = 0;
    v38 = v2 + 5;
    v39 = v5 - 1;
    while (v37 < v2[2])
    {
      swift_bridgeObjectRetain();
      v41 = (void *)sub_1BCAB5EE0();
      swift_bridgeObjectRelease();
      objc_msgSend(v35, sel_setText_, v41);

      if (v39 == v37)
        goto LABEL_65;
      v42 = v37 + 1;
      if (v1)
      {
        v40 = (id)MEMORY[0x1BCCFB0D4](v42, v3);
      }
      else
      {
        if (v42 >= *(_QWORD *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_63;
        v40 = *(id *)(v3 + 40 + 8 * v37);
      }
      v35 = v40;
      ++v37;
      v38 += 2;
      if (v36 == v37)
        goto LABEL_61;
    }
    __break(1u);
LABEL_63:
    __break(1u);
LABEL_64:
    swift_bridgeObjectRetain();
  }
LABEL_65:
  swift_bridgeObjectRelease();
LABEL_66:
  swift_bridgeObjectRelease();
}

id StatisticsQueryOperation.__allocating_init(sampleType:configuration:configurationOverrides:name:queryQualityOfService:healthStore:resultHandler:)(void *a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9)
{
  objc_class *v9;
  id v18;
  id v19;

  v18 = objc_allocWithZone(v9);
  v19 = sub_1BC9F3B8C(a1, a2, a3, a4, a5, a6, a7, a8, a9);

  swift_release();
  return v19;
}

uint64_t sub_1BC9F21FC@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  uint64_t v3;
  char v4;

  swift_retain();
  sub_1BCAB5070();
  result = swift_release();
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  return result;
}

uint64_t sub_1BC9F2258(id *a1)
{
  id v1;

  v1 = *a1;
  sub_1BC9F3F44(*a1);
  swift_retain();
  sub_1BCAB507C();
  sub_1BC9B39B4(v1);
  return swift_release();
}

uint64_t sub_1BC9F22D8()
{
  uint64_t v1;

  swift_retain();
  sub_1BCAB5070();
  swift_release();
  return v1;
}

id sub_1BC9F2324()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  void *v5;
  id v6;

  v1 = qword_1ED6C3F58;
  v2 = *(void **)(v0 + qword_1ED6C3F58);
  if (v2)
  {
    v3 = *(id *)(v0 + qword_1ED6C3F58);
  }
  else
  {
    v4 = sub_1BC9F2380();
    v5 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v4;
    v3 = v4;

    v2 = 0;
  }
  v6 = v2;
  return v3;
}

id sub_1BC9F2380()
{
  _BYTE *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t ConfigurationOverrides;
  uint64_t (*v38)(char *, uint64_t, uint64_t);
  int v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  void (*v43)(char *, char *, uint64_t);
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  unsigned int (*v48)(uint64_t, uint64_t, uint64_t);
  void *v49;
  void (*v50)(char *, uint64_t, uint64_t);
  char *v51;
  void *v52;
  void *v53;
  void (*v54)(char *, uint64_t);
  void *v55;
  char *v56;
  void *v57;
  void *v58;
  char *v59;
  void *v60;
  uint64_t v61;
  id v62;
  char *v63;
  void *v64;
  id v65;
  char *v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  id v73;
  _BYTE *v74;
  char *v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  id v85;
  void *v86;
  char *v87;
  id v88;
  id v89;
  _BYTE *v90;
  id v91;
  uint64_t v93;
  void (*v94)(char *, char *, uint64_t);
  char *v95;
  uint64_t v96;
  uint64_t (*v97)(uint64_t, uint64_t, uint64_t);
  uint64_t v98;
  _BYTE *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  unsigned int (*v109)(uint64_t, uint64_t, uint64_t);
  char *v110;
  char *v111;
  _BYTE *v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  _QWORD aBlock[7];

  v1 = sub_1BCAB54A8();
  v107 = *(_QWORD *)(v1 - 8);
  v108 = v1;
  v2 = *(_QWORD *)(v107 + 64);
  MEMORY[0x1E0C80A78](v1);
  v106 = (char *)&v93 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v3);
  v114 = (char *)&v93 - v4;
  v5 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
  sub_1BC998AB0(0, (unint64_t *)&qword_1ED6C71E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAE5D0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  v102 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v104 = (uint64_t)&v93 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v101 = (uint64_t)&v93 - v9;
  MEMORY[0x1E0C80A78](v10);
  v117 = (uint64_t)&v93 - v11;
  MEMORY[0x1E0C80A78](v12);
  v96 = (uint64_t)&v93 - v13;
  v103 = v14;
  MEMORY[0x1E0C80A78](v15);
  v17 = (char *)&v93 - v16;
  v18 = sub_1BCAB4BD8();
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v18);
  v95 = (char *)&v93 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v23 = (char *)&v93 - v22;
  sub_1BC998AB0(0, &qword_1ED6C6C98, (uint64_t (*)(uint64_t))type metadata accessor for StatisticsQueryConfigurationOverrides, v5);
  MEMORY[0x1E0C80A78](v24);
  v111 = (char *)&v93 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v26);
  v28 = (char *)&v93 - v27;
  v115 = sub_1BCAB4E54();
  v113 = *(_QWORD *)(v115 - 8);
  MEMORY[0x1E0C80A78](v115);
  v100 = (char *)&v93 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v30);
  v32 = (char *)&v93 - v31;
  MEMORY[0x1E0C80A78](v33);
  v110 = (char *)&v93 - v34;
  MEMORY[0x1E0C80A78](v35);
  v116 = (char *)&v93 - v36;
  _s19HealthVisualization25PresentationDateProvidingPAAE012presentationD010Foundation0D0VvgZ_0();
  v112 = v0;
  v99 = &v0[qword_1ED6D3868];
  sub_1BC9F3F74((uint64_t)&v0[qword_1ED6D3868], (uint64_t)v28, &qword_1ED6C6C98, (uint64_t (*)(uint64_t))type metadata accessor for StatisticsQueryConfigurationOverrides);
  ConfigurationOverrides = type metadata accessor for StatisticsQueryConfigurationOverrides();
  v38 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(ConfigurationOverrides - 8) + 48);
  v39 = v38(v28, 1, ConfigurationOverrides);
  v105 = v2;
  v98 = ConfigurationOverrides;
  v97 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v38;
  if (v39 == 1)
  {
    sub_1BC9B3A38((uint64_t)v28, &qword_1ED6C6C98, (uint64_t (*)(uint64_t))type metadata accessor for StatisticsQueryConfigurationOverrides);
    v40 = (uint64_t)v111;
LABEL_3:
    v41 = &qword_1ED6C3000;
    v42 = v113;
    v43 = *(void (**)(char *, char *, uint64_t))(v113 + 16);
    v44 = (uint64_t)v110;
    v43(v110, v116, v115);
LABEL_4:
    v45 = v96;
    DateRange.dateInterval(endingAt:)(v44, v112[qword_1ED6C3F48], v96);
    v109 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v19 + 48);
    if (v109(v45, 1, v18) == 1)
    {
      sub_1BC9B3A38(v45, (unint64_t *)&qword_1ED6C71E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAE5D0]);
      v46 = 0;
      v47 = v115;
    }
    else
    {
      v50 = *(void (**)(char *, uint64_t, uint64_t))(v19 + 32);
      v94 = v43;
      v51 = v95;
      v50(v95, v45, v18);
      v52 = (void *)objc_opt_self();
      sub_1BCAB4BC0();
      v53 = (void *)sub_1BCAB4DE8();
      v54 = *(void (**)(char *, uint64_t))(v113 + 8);
      v47 = v115;
      v54(v32, v115);
      sub_1BCAB4B9C();
      v55 = (void *)sub_1BCAB4DE8();
      v54(v32, v47);
      v42 = v113;
      v46 = (char *)objc_msgSend(v52, sel_predicateForSamplesWithStartDate_endDate_options_, v53, v55, 0);

      v41 = &qword_1ED6C3000;
      v44 = (uint64_t)v110;
      v56 = v51;
      v43 = v94;
      (*(void (**)(char *, uint64_t))(v19 + 8))(v56, v18);
    }
    goto LABEL_15;
  }
  sub_1BC9F3F74((uint64_t)v28, (uint64_t)v17, (unint64_t *)&qword_1ED6C71E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAE5D0]);
  v48 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v19 + 48);
  if (v48((uint64_t)v17, 1, v18) == 1)
  {
    sub_1BC9B3A38((uint64_t)v17, (unint64_t *)&qword_1ED6C71E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAE5D0]);
    v49 = *(void **)&v28[*(int *)(ConfigurationOverrides + 20)];
    v40 = (uint64_t)v111;
    if (v49)
    {
      v109 = v48;
      v46 = v49;
      sub_1BC9F4178((uint64_t)v28);
      v42 = v113;
      v43 = *(void (**)(char *, char *, uint64_t))(v113 + 16);
      v44 = (uint64_t)v110;
      v47 = v115;
      v43(v110, v116, v115);
      v41 = &qword_1ED6C3000;
      goto LABEL_15;
    }
    sub_1BC9F4178((uint64_t)v28);
    goto LABEL_3;
  }
  v109 = v48;
  (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v23, v17, v18);
  v57 = (void *)objc_opt_self();
  v58 = (void *)sub_1BCAB4B78();
  v59 = (char *)objc_msgSend(v57, sel_predicateForSamplesWithinDateInterval_options_, v58, 0);

  (*(void (**)(char *, uint64_t))(v19 + 8))(v23, v18);
  v60 = *(void **)&v28[*(int *)(ConfigurationOverrides + 20)];
  v40 = (uint64_t)v111;
  if (v60)
  {
    sub_1BC9AFE08();
    v61 = swift_allocObject();
    *(_OWORD *)(v61 + 16) = xmmword_1BCAC1E60;
    *(_QWORD *)(v61 + 32) = v59;
    *(_QWORD *)(v61 + 40) = v60;
    aBlock[0] = v61;
    sub_1BCAB6024();
    sub_1BC9A649C(0, (unint64_t *)&qword_1ED6C2E60);
    v62 = v60;
    v63 = v59;
    v64 = (void *)sub_1BCAB600C();
    swift_bridgeObjectRelease();
    v46 = (char *)objc_msgSend((id)objc_opt_self(), sel_andPredicateWithSubpredicates_, v64);

  }
  else
  {
    v46 = v59;
  }
  v41 = &qword_1ED6C3000;
  sub_1BC9F4178((uint64_t)v28);
  v42 = v113;
  v43 = *(void (**)(char *, char *, uint64_t))(v113 + 16);
  v44 = (uint64_t)v110;
  v47 = v115;
  v43(v110, v116, v115);
  if (!v46)
    goto LABEL_4;
LABEL_15:
  v110 = v46;
  v113 = *(_QWORD *)(v42 + 8);
  ((void (*)(uint64_t, uint64_t))v113)(v44, v47);
  v65 = v112;
  v66 = &v112[v41[489]];
  v67 = *((_QWORD *)v66 + 1);
  if (*(_QWORD *)(v67 + 16))
  {
    v96 = v19;
    swift_bridgeObjectRetain();
    __asm { BR              X9 }
  }
  sub_1BC9F3F74((uint64_t)v99, v40, &qword_1ED6C6C98, (uint64_t (*)(uint64_t))type metadata accessor for StatisticsQueryConfigurationOverrides);
  v68 = v97(v40, 1, v98);
  v69 = v101;
  v70 = (uint64_t)v100;
  if (v68 == 1)
  {
    sub_1BC9B3A38(v40, &qword_1ED6C6C98, (uint64_t (*)(uint64_t))type metadata accessor for StatisticsQueryConfigurationOverrides);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v19 + 56))(v69, 1, 1, v18);
  }
  else
  {
    sub_1BC9F3F74(v40, v101, (unint64_t *)&qword_1ED6C71E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAE5D0]);
    sub_1BC9F4178(v40);
  }
  v43((char *)v70, v116, v47);
  if (v109(v69, 1, v18) == 1)
  {
    DateRange.dateInterval(endingAt:)(v70, *v66, v117);
    ((void (*)(uint64_t, uint64_t))v113)(v70, v47);
    sub_1BC9B3A38(v69, (unint64_t *)&qword_1ED6C71E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAE5D0]);
  }
  else
  {
    ((void (*)(uint64_t, uint64_t))v113)(v70, v47);
    v71 = v117;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 32))(v117, v69, v18);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v19 + 56))(v71, 0, 1, v18);
  }
  v72 = v105;
  if (qword_1ED6C7098 != -1)
    swift_once();
  v73 = (id)qword_1ED6C69C0;
  v74 = v65;
  v75 = v114;
  sub_1BCAB549C();
  v111 = *(char **)&v74[qword_1ED6C3F40];
  v112 = v74;
  v76 = swift_allocObject();
  swift_unknownObjectWeakInit();
  v77 = v106;
  v78 = v107;
  v79 = v108;
  (*(void (**)(char *, char *, uint64_t))(v107 + 16))(v106, v75, v108);
  v80 = v104;
  sub_1BC9F3F74(v117, v104, (unint64_t *)&qword_1ED6C71E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAE5D0]);
  v81 = (*(unsigned __int8 *)(v78 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v78 + 80);
  v82 = (v72 + *(unsigned __int8 *)(v102 + 80) + v81) & ~(unint64_t)*(unsigned __int8 *)(v102 + 80);
  v83 = (v103 + v82 + 7) & 0xFFFFFFFFFFFFFFF8;
  v84 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v78 + 32))(v84 + v81, v77, v79);
  sub_1BC9B39DC(v80, v84 + v82);
  *(_QWORD *)(v84 + v83) = v76;
  v85 = objc_allocWithZone(MEMORY[0x1E0CB6C88]);
  aBlock[4] = sub_1BC9F40CC;
  aBlock[5] = v84;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1BC9F3B04;
  aBlock[3] = &block_descriptor_2;
  v86 = _Block_copy(aBlock);
  swift_retain();
  v87 = v110;
  v88 = objc_msgSend(v85, sel_initWithSampleType_samplePredicate_options_completionHandler_, v111, v110, 0, v86);
  _Block_release(v86);
  swift_release();
  swift_release();
  v89 = v88;
  v90 = v112;
  v91 = objc_msgSend(v112, sel_name);
  objc_msgSend(v89, sel_setDebugIdentifier_, v91);

  objc_msgSend(v89, sel_setQualityOfService_, *(_QWORD *)&v90[qword_1ED6D3860]);
  (*(void (**)(char *, uint64_t))(v78 + 8))(v114, v79);
  sub_1BC9B3A38(v117, (unint64_t *)&qword_1ED6C71E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAE5D0]);
  ((void (*)(char *, uint64_t))v113)(v116, v115);
  return v89;
}

id StatisticsQueryOperation.init(sampleType:configuration:configurationOverrides:name:queryQualityOfService:healthStore:resultHandler:)(void *a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9)
{
  id v11;

  v11 = sub_1BC9F3B8C(a1, a2, a3, a4, a5, a6, a7, a8, a9);

  swift_release();
  return v11;
}

uint64_t sub_1BC9F2FBC()
{
  char *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  void *v6;
  _BYTE *v7;
  void *v8;
  id v9;
  uint64_t v10;
  void *v11;
  void *v12;
  Swift::String v13;
  Swift::String v14;
  id v15;
  char *v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  id v23;
  _BYTE v25[16];
  void *v26;
  char v27;

  v1 = v0;
  v2 = sub_1BCAB54A8();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = &v25[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1BC9A7EA4();
  v6 = (void *)swift_allocError();
  *v7 = 2;
  v26 = v6;
  v27 = 1;
  swift_retain();
  sub_1BCAB507C();

  swift_release();
  v8 = *(void **)&v0[qword_1ED6C3F40];
  v9 = objc_msgSend(v8, sel_identifier);
  v10 = sub_1BCAB5F04();
  v12 = v11;

  v13._countAndFlagsBits = 0x676E696E6E7572;
  v13._object = (void *)0xE700000000000000;
  v14._countAndFlagsBits = v10;
  v14._object = v12;
  NSOperation.logLifeCycleEvent(_:withPrivateInfo:)(v13, v14);
  swift_bridgeObjectRelease();
  if (qword_1ED6C7098 != -1)
    swift_once();
  v15 = (id)qword_1ED6C69C0;
  v16 = v1;
  sub_1BCAB549C();
  sub_1BCAB6270();
  sub_1BC9A7EF4();
  v17 = swift_allocObject();
  *(_OWORD *)(v17 + 16) = xmmword_1BCABE680;
  v18 = objc_msgSend(v8, sel_identifier);
  v19 = sub_1BCAB5F04();
  v21 = v20;

  *(_QWORD *)(v17 + 56) = MEMORY[0x1E0DEA968];
  *(_QWORD *)(v17 + 64) = sub_1BC9A7FA4();
  *(_QWORD *)(v17 + 32) = v19;
  *(_QWORD *)(v17 + 40) = v21;
  sub_1BCAB5484();
  swift_bridgeObjectRelease();
  v22 = *(void **)&v16[qword_1ED6D3850];
  v23 = sub_1BC9F2324();
  objc_msgSend(v22, sel_executeQuery_, v23);

  return (*(uint64_t (**)(_BYTE *, uint64_t))(v3 + 8))(v5, v2);
}

void sub_1BC9F3250(void *a1)
{
  id v1;

  v1 = a1;
  sub_1BC9F2FBC();

}

void sub_1BC9F3284()
{
  char *v0;
  char *v1;
  void *v2;
  _BYTE *v3;
  id v4;
  uint64_t v5;
  void *v6;
  void *v7;
  Swift::String v8;
  Swift::String v9;
  void *v10;
  id v11;

  v1 = v0;
  if (objc_msgSend(v0, sel_isCancelled))
  {
    sub_1BC9A7EA4();
    v2 = (void *)swift_allocError();
    *v3 = 3;
    MEMORY[0x1E0C80A78](v2);
    swift_retain();
    sub_1BCAB507C();

    swift_release();
    v4 = objc_msgSend(*(id *)&v0[qword_1ED6C3F40], sel_identifier);
    v5 = sub_1BCAB5F04();
    v7 = v6;

    v8._countAndFlagsBits = 0x656C6C65636E6163;
    v8._object = (void *)0xE900000000000064;
    v9._countAndFlagsBits = v5;
    v9._object = v7;
    NSOperation.logLifeCycleEvent(_:withPrivateInfo:)(v8, v9);
    swift_bridgeObjectRelease();
  }
  v10 = *(void **)&v1[qword_1ED6D3850];
  v11 = sub_1BC9F2324();
  objc_msgSend(v10, sel_stopQuery_, v11);

}

id StatisticsQueryOperation.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void StatisticsQueryOperation.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void sub_1BC9F3434()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void sub_1BC9F3460()
{
  uint64_t v0;

  swift_release();

  swift_bridgeObjectRelease();
  sub_1BC9B3A38(v0 + qword_1ED6D3868, &qword_1ED6C6C98, (uint64_t (*)(uint64_t))type metadata accessor for StatisticsQueryConfigurationOverrides);

  swift_release();
}

id StatisticsQueryOperation.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for StatisticsQueryOperation();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

void sub_1BC9F3528(uint64_t a1)
{
  swift_release();

  swift_bridgeObjectRelease();
  sub_1BC9B3A38(a1 + qword_1ED6D3868, &qword_1ED6C6C98, (uint64_t (*)(uint64_t))type metadata accessor for StatisticsQueryConfigurationOverrides);

  swift_release();
}

uint64_t sub_1BC9F35C8@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  uint64_t v3;
  char v4;

  swift_retain();
  sub_1BCAB5070();
  result = swift_release();
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  return result;
}

void sub_1BC9F3624(uint64_t a1, void *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t countAndFlagsBits;
  void *object;
  Swift::String v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  Swift::String v22;
  Swift::String v23;
  void *v24;
  void *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  void *v30;
  uint64_t *v31;
  id v32;
  Swift::String v33;
  Swift::String v34;
  uint64_t *v35;
  _BOOL8 v36;
  void (*v37)(void *, _BOOL8);
  id v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  void *v42;

  v41 = a3;
  v42 = a2;
  sub_1BC998AB0(0, (unint64_t *)&qword_1ED6C71E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAE5D0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v40 - v9;
  v11 = a6 + 16;
  sub_1BCAB6264();
  if (qword_1ED6C7098 != -1)
    swift_once();
  sub_1BC9A7EF4();
  v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_1BCABE680;
  sub_1BC9F3F74(a5, (uint64_t)v10, (unint64_t *)&qword_1ED6C71E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAE5D0]);
  v13 = sub_1BCAB4BD8();
  v14 = *(_QWORD *)(v13 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v10, 1, v13) == 1)
  {
    sub_1BC9B3A38((uint64_t)v10, (unint64_t *)&qword_1ED6C71E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAE5D0]);
    countAndFlagsBits = 0;
    object = 0;
  }
  else
  {
    v17 = DateInterval.stringWithISO8601Format()();
    countAndFlagsBits = v17._countAndFlagsBits;
    object = v17._object;
    (*(void (**)(char *, uint64_t))(v14 + 8))(v10, v13);
  }
  *(_QWORD *)(v12 + 56) = MEMORY[0x1E0DEA968];
  *(_QWORD *)(v12 + 64) = sub_1BC9A7FA4();
  v18 = 0x3E656E6F6E3CLL;
  if (object)
    v18 = countAndFlagsBits;
  v19 = 0xE600000000000000;
  if (object)
    v19 = (unint64_t)object;
  *(_QWORD *)(v12 + 32) = v18;
  *(_QWORD *)(v12 + 40) = v19;
  sub_1BCAB5484();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v20 = (char *)MEMORY[0x1BCCFC004](v11);
  if (v20)
  {
    v21 = v20;
    if ((objc_msgSend(v20, sel_isCancelled) & 1) != 0
      || (objc_msgSend(v21, sel_isFinished) & 1) != 0)
    {
      v22._countAndFlagsBits = 0xD00000000000002DLL;
      v22._object = (void *)0x80000001BCACE790;
      v23._countAndFlagsBits = 0;
      v23._object = (void *)0xE000000000000000;
      NSOperation.logLifeCycleEvent(_:withPrivateInfo:)(v22, v23);

    }
    else
    {
      v24 = v42;
      v25 = v42;
      if (!v42)
      {
        v26 = (void *)v41;
        if (v41)
          v27 = 0xD00000000000001FLL;
        else
          v27 = 0;
        if (v41)
          v28 = 0x80000001BCAD0B60;
        else
          v28 = 0;
        if (v41)
          v29 = v41 | 0x8000000000000000;
        else
          v29 = 0xC000000000000000;
        sub_1BC9A82C4();
        v30 = (void *)swift_allocError();
        *v31 = v27;
        v31[1] = v28;
        v31[2] = v29;
        swift_getErrorValue();
        v32 = v26;
        sub_1BC9A8308(v27, v28, v29);
        v33._countAndFlagsBits = sub_1BCAB6810();
        v34._countAndFlagsBits = 0;
        v34._object = (void *)0xE000000000000000;
        NSOperation.logErrorString(_:withInfo:)(v33, v34);
        swift_bridgeObjectRelease();

        v25 = (void *)swift_allocError();
        *v35 = v27;
        v35[1] = v28;
        v35[2] = v29;
        v24 = v42;
      }
      v36 = v24 == 0;
      v37 = *(void (**)(void *, _BOOL8))&v21[qword_1ED6D3858];
      v38 = v24;
      swift_retain();
      v37(v25, v36);
      v39 = swift_release();
      MEMORY[0x1E0C80A78](v39);
      sub_1BCAB50AC();

      sub_1BC9B39B4(v25);
    }
  }
}

uint64_t sub_1BC9F3A24(uint64_t a1, void *a2)
{
  id v4;
  uint64_t v5;
  void *v6;
  void *v7;
  Swift::String v8;
  Swift::String v9;

  sub_1BC9F3F44(a2);
  swift_retain();
  sub_1BCAB507C();
  sub_1BC9B39B4(a2);
  swift_release();
  v4 = objc_msgSend(*(id *)(a1 + qword_1ED6C3F40), sel_identifier);
  v5 = sub_1BCAB5F04();
  v7 = v6;

  v8._countAndFlagsBits = 0x64656873696E6966;
  v8._object = (void *)0xE800000000000000;
  v9._countAndFlagsBits = v5;
  v9._object = v7;
  NSOperation.logLifeCycleEvent(_:withPrivateInfo:)(v8, v9);
  return swift_bridgeObjectRelease();
}

void sub_1BC9F3B04(uint64_t a1, void *a2, void *a3, void *a4)
{
  void (*v7)(id, void *, void *);
  id v8;
  id v9;
  id v10;

  v7 = *(void (**)(id, void *, void *))(a1 + 32);
  swift_retain();
  v10 = a2;
  v8 = a3;
  v9 = a4;
  v7(v10, a3, a4);
  swift_release();

}

id sub_1BC9F3B8C(void *a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9)
{
  char *v9;
  uint64_t v13;
  __int16 v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  char *v18;
  char *v19;
  char *v20;
  id v21;
  id v22;
  id v23;
  id v24;
  void *v25;
  char v27;
  objc_super v31;
  uint64_t v32;
  char v33;

  v27 = *a2;
  v13 = *((_QWORD *)a2 + 1);
  v14 = *((_WORD *)a2 + 8);
  v15 = qword_1ED6C3F50;
  sub_1BC9A7EA4();
  v16 = swift_allocError();
  *v17 = 0;
  v32 = v16;
  v33 = 1;
  sub_1BC998AB0(0, &qword_1ED6C3698, (uint64_t (*)(uint64_t))sub_1BC9F4208, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0D2E5C8]);
  swift_allocObject();
  v18 = v9;
  *(_QWORD *)&v9[v15] = sub_1BCAB50A0();
  *(_QWORD *)&v18[qword_1ED6C3F58] = 0;
  *(_QWORD *)&v18[qword_1ED6C3F40] = a1;
  v19 = &v18[qword_1ED6C3F48];
  *v19 = v27;
  *((_QWORD *)v19 + 1) = v13;
  *((_WORD *)v19 + 8) = v14;
  sub_1BC9F3F74(a3, (uint64_t)&v18[qword_1ED6D3868], &qword_1ED6C6C98, (uint64_t (*)(uint64_t))type metadata accessor for StatisticsQueryConfigurationOverrides);
  *(_QWORD *)&v18[qword_1ED6D3860] = a6;
  *(_QWORD *)&v18[qword_1ED6D3850] = a7;
  v20 = &v18[qword_1ED6D3858];
  *(_QWORD *)v20 = a8;
  *((_QWORD *)v20 + 1) = a9;
  v21 = a1;
  v22 = a7;
  swift_retain();

  v31.receiver = v18;
  v31.super_class = (Class)type metadata accessor for StatisticsQueryOperation();
  v23 = objc_msgSendSuper2(&v31, sel_init);
  v24 = v23;
  if (a5)
  {
    v25 = (void *)sub_1BCAB5EE0();
    swift_bridgeObjectRelease();
  }
  else
  {
    v25 = 0;
  }
  objc_msgSend(v23, sel_setName_, v25);

  sub_1BC9B3A38(a3, &qword_1ED6C6C98, (uint64_t (*)(uint64_t))type metadata accessor for StatisticsQueryConfigurationOverrides);
  return v23;
}

uint64_t type metadata accessor for StatisticsQueryOperation()
{
  uint64_t result;

  result = qword_1ED6C3F60;
  if (!qword_1ED6C3F60)
    return swift_getSingletonMetadata();
  return result;
}

void sub_1BC9F3DF0()
{
  unint64_t v0;

  sub_1BC998AB0(319, &qword_1ED6C6C98, (uint64_t (*)(uint64_t))type metadata accessor for StatisticsQueryConfigurationOverrides, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  if (v0 <= 0x3F)
    swift_initClassMetadata2();
}

uint64_t method lookup function for StatisticsQueryOperation()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of StatisticsQueryOperation.result.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))(class metadata base offset for StatisticsQueryOperation
                              + (*MEMORY[0x1E0DEEDD8] & *v0)
                              + 88))();
}

uint64_t dispatch thunk of StatisticsQueryOperation.__allocating_init(sampleType:configuration:configurationOverrides:name:queryQualityOfService:healthStore:resultHandler:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(class metadata base offset for StatisticsQueryOperation + v0 + 136))();
}

uint64_t sub_1BC9F3F3C()
{
  return type metadata accessor for StatisticsQueryOperation();
}

id sub_1BC9F3F44(id a1)
{
  return a1;
}

uint64_t sub_1BC9F3F50()
{
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1BC9F3F74(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t))
{
  uint64_t v6;

  sub_1BC998AB0(0, a3, a4, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

uint64_t sub_1BC9F3FCC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = sub_1BCAB54A8();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = v3 + *(_QWORD *)(v2 + 64);
  sub_1BC998AB0(0, (unint64_t *)&qword_1ED6C71E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAE5D0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  v6 = (v4 + *(unsigned __int8 *)(*(_QWORD *)(v5 - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v5 - 8) + 80);
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  v7 = sub_1BCAB4BD8();
  v8 = *(_QWORD *)(v7 - 8);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v8 + 48))(v0 + v6, 1, v7))
    (*(void (**)(unint64_t, uint64_t))(v8 + 8))(v0 + v6, v7);
  swift_release();
  return swift_deallocObject();
}

void sub_1BC9F40CC(uint64_t a1, void *a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  v7 = *(_QWORD *)(sub_1BCAB54A8() - 8);
  v8 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v9 = v8 + *(_QWORD *)(v7 + 64);
  sub_1BC998AB0(0, (unint64_t *)&qword_1ED6C71E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAE5D0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = (v9 + *(unsigned __int8 *)(v11 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  sub_1BC9F3624(a1, a2, a3, v3 + v8, v3 + v12, *(_QWORD *)(v3 + ((*(_QWORD *)(v11 + 64) + v12 + 7) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_1BC9F4178(uint64_t a1)
{
  uint64_t ConfigurationOverrides;

  ConfigurationOverrides = type metadata accessor for StatisticsQueryConfigurationOverrides();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(ConfigurationOverrides - 8) + 8))(a1, ConfigurationOverrides);
  return a1;
}

uint64_t sub_1BC9F41B4()
{
  uint64_t v0;

  return sub_1BC9F3A24(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24));
}

id sub_1BC9F41C0(uint64_t a1)
{
  uint64_t v1;
  void *v3;
  char v4;

  v3 = *(void **)(v1 + 16);
  v4 = *(_BYTE *)(v1 + 24);
  sub_1BC9B39B4(*(id *)a1);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  return sub_1BC9F3F44(v3);
}

void sub_1BC9F4208()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED6C4808)
  {
    sub_1BC9A649C(255, &qword_1ED6C4638);
    sub_1BC9A7F58(255, (unint64_t *)&qword_1ED6C6F70);
    v0 = sub_1BCAB68A0();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED6C4808);
  }
}

id HKObjectType.currentValueQueryConfiguration.getter@<X0>(int64x2_t *a1@<X8>)
{
  void *v1;
  id result;
  void *v4;
  char v5;
  void *v6;

  result = objc_msgSend(v1, sel_code);
  switch((unint64_t)result)
  {
    case 0uLL:
    case 1uLL:
    case 2uLL:
    case 3uLL:
    case 4uLL:
    case 0x12uLL:
    case 0x13uLL:
    case 0x3AuLL:
    case 0x3EuLL:
    case 0x47uLL:
    case 0x48uLL:
    case 0x49uLL:
    case 0x59uLL:
    case 0x5AuLL:
    case 0x72uLL:
    case 0x76uLL:
    case 0x89uLL:
    case 0x8BuLL:
    case 0x102uLL:
    case 0x103uLL:
    case 0x104uLL:
    case 0x10AuLL:
    case 0x10EuLL:
    case 0x112uLL:
    case 0x118uLL:
    case 0x119uLL:
    case 0x11AuLL:
    case 0x11BuLL:
    case 0x12DuLL:
    case 0x12EuLL:
    case 0x12FuLL:
      v4 = &unk_1E75441A8;
      goto LABEL_26;
    case 5uLL:
    case 0xEuLL:
    case 0x3DuLL:
    case 0xB6uLL:
    case 0xBCuLL:
    case 0xC3uLL:
    case 0xC4uLL:
    case 0x110uLL:
    case 0x11EuLL:
      v4 = &unk_1E7544288;
      goto LABEL_26;
    case 7uLL:
    case 8uLL:
    case 9uLL:
    case 0xAuLL:
    case 0xCuLL:
    case 0xDuLL:
    case 0x14uLL:
    case 0x15uLL:
    case 0x16uLL:
    case 0x17uLL:
    case 0x18uLL:
    case 0x19uLL:
    case 0x1AuLL:
    case 0x1BuLL:
    case 0x1CuLL:
    case 0x1DuLL:
    case 0x1EuLL:
    case 0x1FuLL:
    case 0x20uLL:
    case 0x21uLL:
    case 0x22uLL:
    case 0x23uLL:
    case 0x24uLL:
    case 0x25uLL:
    case 0x26uLL:
    case 0x27uLL:
    case 0x28uLL:
    case 0x29uLL:
    case 0x2AuLL:
    case 0x2BuLL:
    case 0x2CuLL:
    case 0x2DuLL:
    case 0x2EuLL:
    case 0x2FuLL:
    case 0x30uLL:
    case 0x31uLL:
    case 0x32uLL:
    case 0x33uLL:
    case 0x34uLL:
    case 0x35uLL:
    case 0x36uLL:
    case 0x37uLL:
    case 0x38uLL:
    case 0x39uLL:
    case 0x3CuLL:
    case 0x4BuLL:
    case 0x4EuLL:
    case 0x53uLL:
    case 0x57uLL:
    case 0x65uLL:
    case 0x6EuLL:
    case 0x6FuLL:
    case 0x71uLL:
    case 0x7DuLL:
    case 0x8AuLL:
    case 0xB3uLL:
    case 0xBAuLL:
    case 0xFBuLL:
    case 0x117uLL:
    case 0x126uLL:
    case 0x127uLL:
    case 0x128uLL:
    case 0x129uLL:
      v4 = &unk_1E7544158;
      goto LABEL_26;
    case 0xFuLL:
    case 0xB7uLL:
    case 0xBBuLL:
    case 0xC2uLL:
      v4 = &unk_1E75441D0;
      goto LABEL_26;
    case 0x3FuLL:
      *a1 = vdupq_n_s64(3uLL);
      a1[1].i64[0] = 0;
      a1[1].i64[1] = 0;
      v5 = 16;
      goto LABEL_31;
    case 0x46uLL:
      *a1 = 0u;
      a1[1] = 0u;
      v5 = 80;
      goto LABEL_31;
    case 0x4FuLL:
    case 0x63uLL:
    case 0xBDuLL:
      *a1 = 0u;
      a1[1] = 0u;
      v5 = 24;
      goto LABEL_31;
    case 0x50uLL:
      a1->i64[0] = (uint64_t)&unk_1E75441F8;
      a1->i64[1] = 2;
      a1[1].i64[0] = (uint64_t)&unk_1E7544238;
      a1[1].i64[1] = 256;
      v5 = 8;
      goto LABEL_31;
    case 0x5BuLL:
    case 0x5CuLL:
    case 0x5FuLL:
    case 0x61uLL:
    case 0x90uLL:
    case 0x9DuLL:
    case 0x9EuLL:
    case 0x9FuLL:
    case 0xA0uLL:
    case 0xA1uLL:
    case 0xA2uLL:
    case 0xA3uLL:
    case 0xA4uLL:
    case 0xA5uLL:
    case 0xA6uLL:
    case 0xA7uLL:
    case 0xA8uLL:
    case 0xA9uLL:
    case 0xAAuLL:
    case 0xABuLL:
    case 0xE5uLL:
    case 0xE6uLL:
    case 0xE7uLL:
    case 0xE8uLL:
    case 0xE9uLL:
    case 0xEAuLL:
    case 0xEBuLL:
    case 0xF3uLL:
    case 0xF4uLL:
    case 0xF9uLL:
    case 0x11FuLL:
    case 0x120uLL:
    case 0x139uLL:
    case 0x13AuLL:
      *a1 = 0u;
      a1[1] = 0u;
      v5 = 33;
      goto LABEL_31;
    case 0x60uLL:
      a1->i64[0] = 0xD00000000000001CLL;
      a1->i64[1] = 0x80000001BCAD0B80;
      a1[1].i64[0] = 0;
      a1[1].i64[1] = 0;
      v5 = 33;
      goto LABEL_31;
    case 0x64uLL:
      *a1 = 0u;
      a1[1] = 0u;
      v5 = 48;
      goto LABEL_31;
    case 0x7CuLL:
      *a1 = 0u;
      a1[1] = 0u;
      v5 = 104;
      goto LABEL_31;
    case 0x8CuLL:
    case 0x93uLL:
    case 0x9CuLL:
    case 0xB2uLL:
    case 0xC7uLL:
    case 0xECuLL:
    case 0xFAuLL:
    case 0x114uLL:
      *a1 = 0u;
      a1[1] = 0u;
      v5 = 72;
      goto LABEL_31;
    case 0x91uLL:
      *a1 = 0u;
      a1[1] = 0u;
      v5 = 65;
      goto LABEL_31;
    case 0xACuLL:
      v6 = &unk_1E7544260;
      goto LABEL_22;
    case 0xADuLL:
      v6 = &unk_1E75442D8;
LABEL_22:
      a1->i64[0] = 3;
      a1->i64[1] = (uint64_t)v6;
      a1[1] = (int64x2_t)xmmword_1BCAC1EF0;
      v5 = 56;
      goto LABEL_31;
    case 0xBFuLL:
    case 0xC0uLL:
    case 0xC1uLL:
      *a1 = 0u;
      a1[1] = 0u;
      v5 = 88;
      goto LABEL_31;
    case 0xC9uLL:
    case 0xCAuLL:
    case 0xCBuLL:
    case 0xCCuLL:
    case 0xCDuLL:
    case 0xCEuLL:
    case 0xCFuLL:
    case 0xDCuLL:
    case 0xDDuLL:
    case 0xDEuLL:
    case 0xDFuLL:
    case 0xE0uLL:
    case 0xE1uLL:
    case 0xE2uLL:
    case 0xF0uLL:
    case 0xF1uLL:
    case 0xF2uLL:
    case 0x113uLL:
    case 0x11CuLL:
      *a1 = 0u;
      a1[1] = 0u;
      v5 = 32;
      goto LABEL_31;
    case 0xEDuLL:
      v4 = &unk_1E75442B0;
      goto LABEL_26;
    case 0xF8uLL:
      *a1 = 0u;
      a1[1] = 0u;
      v5 = 112;
      goto LABEL_31;
    case 0x100uLL:
      v4 = &unk_1E7544180;
LABEL_26:
      a1->i64[0] = 2;
      a1->i64[1] = (uint64_t)v4;
      a1[1] = (int64x2_t)xmmword_1BCAC1EE0;
      a1[2].i8[0] = 0;
      return result;
    case 0x101uLL:
      *a1 = 0u;
      a1[1] = 0u;
      v5 = 120;
      goto LABEL_31;
    case 0x106uLL:
    case 0x107uLL:
    case 0x108uLL:
    case 0x109uLL:
      a1->i64[0] = 0xD000000000000010;
      a1->i64[1] = 0x80000001BCAD0BA0;
      a1[1].i64[0] = 0;
      a1[1].i64[1] = 0;
      v5 = 32;
      goto LABEL_31;
    case 0x10DuLL:
      a1->i64[0] = 2;
      a1->i64[1] = (uint64_t)&unk_1E7544300;
      a1[1] = (int64x2_t)xmmword_1BCAC1EE0;
      v5 = 0x80;
      goto LABEL_31;
    case 0x115uLL:
      a1->i64[0] = 65538;
      a1->i64[1] = 0;
      a1[1].i64[0] = 0;
      a1[1].i64[1] = 0;
      v5 = 40;
      goto LABEL_31;
    case 0x131uLL:
      *a1 = 0u;
      a1[1] = 0u;
      v5 = -120;
      goto LABEL_31;
    default:
      *a1 = 0u;
      a1[1] = 0u;
      v5 = -2;
LABEL_31:
      a1[2].i8[0] = v5;
      return result;
  }
}

id HKObjectType.supplementaryLabelConfiguration.getter@<X0>(char *a1@<X8>)
{
  void *v1;
  id result;
  char v4;

  result = objc_msgSend(v1, sel_code);
  v4 = 1;
  switch((unint64_t)result)
  {
    case 0uLL:
    case 1uLL:
    case 2uLL:
    case 3uLL:
    case 4uLL:
    case 5uLL:
    case 0xEuLL:
    case 0xFuLL:
    case 0x12uLL:
    case 0x13uLL:
    case 0x3AuLL:
    case 0x3DuLL:
    case 0x3EuLL:
    case 0x47uLL:
    case 0x48uLL:
    case 0x49uLL:
    case 0x59uLL:
    case 0x5AuLL:
    case 0x72uLL:
    case 0x76uLL:
    case 0x89uLL:
    case 0x8BuLL:
    case 0xB6uLL:
    case 0xC3uLL:
    case 0xC4uLL:
    case 0xEDuLL:
    case 0x102uLL:
    case 0x103uLL:
    case 0x104uLL:
    case 0x10AuLL:
    case 0x10EuLL:
    case 0x110uLL:
    case 0x112uLL:
    case 0x115uLL:
    case 0x118uLL:
    case 0x119uLL:
    case 0x11AuLL:
    case 0x11BuLL:
    case 0x11EuLL:
    case 0x12DuLL:
    case 0x12EuLL:
    case 0x12FuLL:
      v4 = 0;
      break;
    case 0xF8uLL:
    case 0xF9uLL:
      break;
    default:
      v4 = 2;
      break;
  }
  *a1 = v4;
  return result;
}

id HKObjectType.swiftChartDiagramConfiguration.getter@<X0>(uint64_t a1@<X8>)
{
  void *v1;
  id result;
  __int128 v4;
  uint64_t v5;

  result = objc_msgSend(v1, sel_code);
  switch((unint64_t)result)
  {
    case 0uLL:
    case 1uLL:
    case 3uLL:
    case 4uLL:
    case 7uLL:
    case 8uLL:
    case 9uLL:
    case 0xAuLL:
    case 0xCuLL:
    case 0xDuLL:
    case 0xEuLL:
    case 0x13uLL:
    case 0x14uLL:
    case 0x15uLL:
    case 0x16uLL:
    case 0x17uLL:
    case 0x18uLL:
    case 0x19uLL:
    case 0x1AuLL:
    case 0x1BuLL:
    case 0x1CuLL:
    case 0x1DuLL:
    case 0x1EuLL:
    case 0x1FuLL:
    case 0x20uLL:
    case 0x21uLL:
    case 0x22uLL:
    case 0x23uLL:
    case 0x24uLL:
    case 0x25uLL:
    case 0x26uLL:
    case 0x27uLL:
    case 0x28uLL:
    case 0x29uLL:
    case 0x2AuLL:
    case 0x2BuLL:
    case 0x2CuLL:
    case 0x2DuLL:
    case 0x2EuLL:
    case 0x2FuLL:
    case 0x30uLL:
    case 0x31uLL:
    case 0x32uLL:
    case 0x33uLL:
    case 0x34uLL:
    case 0x35uLL:
    case 0x36uLL:
    case 0x37uLL:
    case 0x38uLL:
    case 0x39uLL:
    case 0x3AuLL:
    case 0x3CuLL:
    case 0x3DuLL:
    case 0x3EuLL:
    case 0x3FuLL:
    case 0x46uLL:
    case 0x47uLL:
    case 0x48uLL:
    case 0x49uLL:
    case 0x4BuLL:
    case 0x4EuLL:
    case 0x4FuLL:
    case 0x53uLL:
    case 0x57uLL:
    case 0x5AuLL:
    case 0x63uLL:
    case 0x65uLL:
    case 0x6EuLL:
    case 0x6FuLL:
    case 0x71uLL:
    case 0x72uLL:
    case 0x76uLL:
    case 0x7DuLL:
    case 0x89uLL:
    case 0x8AuLL:
    case 0x8BuLL:
    case 0xACuLL:
    case 0xADuLL:
    case 0xB3uLL:
    case 0xB6uLL:
    case 0xB7uLL:
    case 0xBAuLL:
    case 0xBBuLL:
    case 0xBCuLL:
    case 0xBDuLL:
    case 0xC2uLL:
    case 0xC3uLL:
    case 0xC4uLL:
    case 0xFBuLL:
    case 0x100uLL:
    case 0x102uLL:
    case 0x103uLL:
    case 0x104uLL:
    case 0x10AuLL:
    case 0x10EuLL:
    case 0x110uLL:
    case 0x112uLL:
    case 0x117uLL:
    case 0x118uLL:
    case 0x119uLL:
    case 0x11AuLL:
    case 0x11BuLL:
    case 0x11EuLL:
    case 0x126uLL:
    case 0x127uLL:
    case 0x128uLL:
    case 0x129uLL:
    case 0x12DuLL:
    case 0x12EuLL:
    case 0x12FuLL:
      v4 = xmmword_1BCAC1F20;
      goto LABEL_3;
    case 5uLL:
    case 0xFuLL:
    case 0x10DuLL:
    case 0x115uLL:
      v4 = xmmword_1BCAC1F10;
LABEL_3:
      *(_OWORD *)a1 = v4;
      v5 = 5;
      goto LABEL_4;
    case 0x7CuLL:
      *(_OWORD *)a1 = xmmword_1BCAC1F00;
      v5 = 4;
LABEL_4:
      *(_QWORD *)(a1 + 16) = v5;
      *(_WORD *)(a1 + 24) = 0;
      break;
    default:
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
      *(_WORD *)(a1 + 24) = 256;
      break;
  }
  return result;
}

uint64_t HKObjectType.canBeOngoing.getter()
{
  void *v0;
  char *v1;
  uint64_t result;

  v1 = (char *)objc_msgSend(v0, sel_code) - 6;
  result = 1;
  switch((unint64_t)v1)
  {
    case 0uLL:
    case 5uLL:
    case 0x35uLL:
    case 0x3AuLL:
    case 0x3BuLL:
    case 0x3CuLL:
    case 0x3FuLL:
    case 0x44uLL:
    case 0x4CuLL:
    case 0x4EuLL:
    case 0x4FuLL:
    case 0x50uLL:
    case 0x52uLL:
    case 0x57uLL:
    case 0x58uLL:
    case 0x59uLL:
    case 0x61uLL:
    case 0x64uLL:
    case 0x67uLL:
    case 0x6DuLL:
    case 0x6FuLL:
    case 0x72uLL:
    case 0x73uLL:
    case 0x74uLL:
    case 0x75uLL:
    case 0x81uLL:
    case 0x82uLL:
    case 0x8CuLL:
    case 0x8EuLL:
    case 0xA8uLL:
    case 0xA9uLL:
    case 0xAAuLL:
    case 0xABuLL:
    case 0xAFuLL:
    case 0xB2uLL:
    case 0xB3uLL:
    case 0xB9uLL:
    case 0xBAuLL:
    case 0xBBuLL:
    case 0xCAuLL:
    case 0xD1uLL:
    case 0xD4uLL:
    case 0xDDuLL:
    case 0xDEuLL:
    case 0xE8uLL:
    case 0xE9uLL:
    case 0xF1uLL:
    case 0xFBuLL:
    case 0xFFuLL:
    case 0x109uLL:
    case 0x110uLL:
    case 0x11DuLL:
    case 0x11EuLL:
    case 0x12CuLL:
    case 0x133uLL:
    case 0x134uLL:
      return result;
    default:
      result = 0;
      break;
  }
  return result;
}

ValueMetadata *type metadata accessor for SharedDiagrams()
{
  return &type metadata for SharedDiagrams;
}

void sub_1BC9F4684()
{
  qword_1ED6C49B8 = 0x4037000000000000;
}

uint64_t sub_1BC9F4694(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  v3 = *a2;
  swift_beginAccess();
  *(_QWORD *)(v3 + 16) = v2;
  swift_retain();
  return swift_release();
}

uint64_t sub_1BC9F46F0()
{
  swift_beginAccess();
  return swift_retain();
}

uint64_t sub_1BC9F4724(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 16) = a1;
  return swift_release();
}

uint64_t (*sub_1BC9F4768())()
{
  swift_beginAccess();
  return j_j__swift_endAccess;
}

uint64_t sub_1BC9F47A4(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  sub_1BC9F48B4();
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BC9964B8(a1, (uint64_t)v6, (uint64_t (*)(_QWORD))sub_1BC9F48B4);
  v7 = *a2 + OBJC_IVAR____TtCV19HealthVisualization26ActivitySummarySnidgetView9ViewModel_currentValueViewModel;
  swift_beginAccess();
  sub_1BC9FCA74((uint64_t)v6, v7, (uint64_t (*)(_QWORD))sub_1BC9F48B4);
  return swift_endAccess();
}

uint64_t sub_1BC9F485C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + OBJC_IVAR____TtCV19HealthVisualization26ActivitySummarySnidgetView9ViewModel_currentValueViewModel;
  swift_beginAccess();
  return sub_1BC9964B8(v3, a1, (uint64_t (*)(_QWORD))sub_1BC9F48B4);
}

void sub_1BC9F48B4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED6C61E0)
  {
    type metadata accessor for ActivitySnidgetCurrentValueVisualizationView(255);
    sub_1BC996948(&qword_1ED6C62D0, type metadata accessor for ActivitySnidgetCurrentValueVisualizationView, (uint64_t)&protocol conformance descriptor for ActivitySnidgetCurrentValueVisualizationView);
    v0 = sub_1BCAB5274();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED6C61E0);
  }
}

uint64_t type metadata accessor for ActivitySnidgetCurrentValueVisualizationView(uint64_t a1)
{
  return sub_1BC9B359C(a1, qword_1ED6C62E0);
}

uint64_t sub_1BC9F4940(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + OBJC_IVAR____TtCV19HealthVisualization26ActivitySummarySnidgetView9ViewModel_currentValueViewModel;
  swift_beginAccess();
  sub_1BC9FCA74(a1, v3, (uint64_t (*)(_QWORD))sub_1BC9F48B4);
  return swift_endAccess();
}

uint64_t (*sub_1BC9F49A0())()
{
  swift_beginAccess();
  return j__swift_endAccess;
}

uint64_t ActivitySummarySnidgetView.ViewModel.__allocating_init(headerModel:currentValueViewModel:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = a1;
  sub_1BC9AE330(a2, v4 + OBJC_IVAR____TtCV19HealthVisualization26ActivitySummarySnidgetView9ViewModel_currentValueViewModel, (uint64_t (*)(_QWORD))sub_1BC9F48B4);
  return v4;
}

uint64_t ActivitySummarySnidgetView.ViewModel.init(headerModel:currentValueViewModel:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  sub_1BC9AE330(a2, v2 + OBJC_IVAR____TtCV19HealthVisualization26ActivitySummarySnidgetView9ViewModel_currentValueViewModel, (uint64_t (*)(_QWORD))sub_1BC9F48B4);
  return v2;
}

uint64_t sub_1BC9F4A7C()
{
  _BYTE *v0;

  if (*v0)
    return 0xD000000000000015;
  else
    return 0x6F4D726564616568;
}

uint64_t sub_1BC9F4AC4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1BCA029DC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1BC9F4AE8()
{
  sub_1BC9F4DCC();
  return sub_1BCAB68D0();
}

uint64_t sub_1BC9F4B10()
{
  sub_1BC9F4DCC();
  return sub_1BCAB68DC();
}

uint64_t ActivitySummarySnidgetView.ViewModel.deinit()
{
  uint64_t v0;

  swift_release();
  sub_1BC997208(v0 + OBJC_IVAR____TtCV19HealthVisualization26ActivitySummarySnidgetView9ViewModel_currentValueViewModel, (uint64_t (*)(_QWORD))sub_1BC9F48B4);
  return v0;
}

uint64_t ActivitySummarySnidgetView.ViewModel.__deallocating_deinit()
{
  uint64_t v0;

  swift_release();
  sub_1BC997208(v0 + OBJC_IVAR____TtCV19HealthVisualization26ActivitySummarySnidgetView9ViewModel_currentValueViewModel, (uint64_t (*)(_QWORD))sub_1BC9F48B4);
  return swift_deallocClassInstance();
}

uint64_t sub_1BC9F4BAC(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;

  v3 = v1;
  sub_1BC9F48B4();
  v15 = v5;
  MEMORY[0x1E0C80A78](v5);
  v16 = (uint64_t)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BC9ACE04(0, &qword_1ED6C4DB0, (uint64_t (*)(void))sub_1BC9F4DCC, (uint64_t)&type metadata for ActivitySummarySnidgetView.ViewModel.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v8 = v7;
  v9 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v15 - v10;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BC9F4DCC();
  sub_1BCAB68B8();
  swift_beginAccess();
  v17 = *(_QWORD *)(v3 + 16);
  v18 = 0;
  sub_1BCAB5298();
  sub_1BC996948(&qword_1ED6C4BB8, (uint64_t (*)(uint64_t))MEMORY[0x1E0D2B358], MEMORY[0x1E0D2ADF0]);
  sub_1BCAB6774();
  if (!v2)
  {
    v12 = v3 + OBJC_IVAR____TtCV19HealthVisualization26ActivitySummarySnidgetView9ViewModel_currentValueViewModel;
    swift_beginAccess();
    v13 = v16;
    sub_1BC9964B8(v12, v16, (uint64_t (*)(_QWORD))sub_1BC9F48B4);
    v18 = 1;
    sub_1BC9F50C0(&qword_1ED6C4BB0, MEMORY[0x1E0D2B290]);
    sub_1BCAB6774();
    sub_1BC997208(v13, (uint64_t (*)(_QWORD))sub_1BC9F48B4);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

unint64_t sub_1BC9F4DCC()
{
  unint64_t result;

  result = qword_1ED6C6418;
  if (!qword_1ED6C6418)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCAC2CD4, &type metadata for ActivitySummarySnidgetView.ViewModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED6C6418);
  }
  return result;
}

uint64_t type metadata accessor for ActivitySnidgetCurrentValueVisualizationView.ViewModel(uint64_t a1)
{
  return sub_1BC9B359C(a1, qword_1ED6C6218);
}

uint64_t ActivitySummarySnidgetView.ViewModel.__allocating_init(from:)(uint64_t a1)
{
  return sub_1BC9F56DC(a1, (void (*)(uint64_t))ActivitySummarySnidgetView.ViewModel.init(from:));
}

uint64_t ActivitySummarySnidgetView.ViewModel.init(from:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  char v20;
  char v21;
  uint64_t v22;

  sub_1BC9F48B4();
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BC9ACE04(0, &qword_1ED6C4B58, (uint64_t (*)(void))sub_1BC9F4DCC, (uint64_t)&type metadata for ActivitySummarySnidgetView.ViewModel.CodingKeys, MEMORY[0x1E0DED048]);
  v17 = v6;
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v17 - v8;
  v10 = a1[3];
  v18 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v10);
  sub_1BC9F4DCC();
  sub_1BCAB68AC();
  if (v1)
  {
    v15 = v19;
    v13 = (uint64_t)v18;
    type metadata accessor for ActivitySummarySnidgetView.ViewModel(0);
    swift_deallocPartialClassInstance();
    v16 = v13;
  }
  else
  {
    v11 = (uint64_t)v5;
    sub_1BCAB5298();
    v21 = 0;
    sub_1BC996948(&qword_1ED6C4980, (uint64_t (*)(uint64_t))MEMORY[0x1E0D2B358], MEMORY[0x1E0D2ADF8]);
    v12 = v17;
    sub_1BCAB66E4();
    v15 = v19;
    *(_QWORD *)(v19 + 16) = v22;
    v20 = 1;
    sub_1BC9F50C0(&qword_1ED6C4970, MEMORY[0x1E0D2B298]);
    sub_1BCAB66E4();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v12);
    sub_1BC9AE330(v11, v15 + OBJC_IVAR____TtCV19HealthVisualization26ActivitySummarySnidgetView9ViewModel_currentValueViewModel, (uint64_t (*)(_QWORD))sub_1BC9F48B4);
    v16 = (uint64_t)v18;
  }
  __swift_destroy_boxed_opaque_existential_1(v16);
  return v15;
}

uint64_t type metadata accessor for ActivitySummarySnidgetView.ViewModel(uint64_t a1)
{
  return sub_1BC9B359C(a1, (uint64_t *)&unk_1ED6C6448);
}

uint64_t sub_1BC9F50C0(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[2];

  result = *a1;
  if (!result)
  {
    sub_1BC9F48B4();
    v6 = v5;
    v7[0] = sub_1BC996948(&qword_1ED6C6210, type metadata accessor for ActivitySnidgetCurrentValueVisualizationView.ViewModel, (uint64_t)&protocol conformance descriptor for ActivitySnidgetCurrentValueVisualizationView.ViewModel);
    v7[1] = sub_1BC996948(&qword_1ED6C6208, type metadata accessor for ActivitySnidgetCurrentValueVisualizationView.ViewModel, (uint64_t)&protocol conformance descriptor for ActivitySnidgetCurrentValueVisualizationView.ViewModel);
    result = MEMORY[0x1BCCFBE84](a2, v6, v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1BC9F5160@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  type metadata accessor for ActivitySummarySnidgetView.ViewModel(0);
  result = sub_1BCAB582C();
  *a1 = result;
  return result;
}

uint64_t sub_1BC9F519C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x1BCCFBE84](&protocol conformance descriptor for ActivitySummarySnidgetView.ViewModel, a3);
  return sub_1BCAB5268();
}

uint64_t sub_1BC9F5204(uint64_t a1)
{
  MEMORY[0x1BCCFBE84](&protocol conformance descriptor for ActivitySummarySnidgetView.ViewModel, a1);
  return sub_1BCAB525C();
}

uint64_t sub_1BC9F5244@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1BC9F5A0C(a1, (void (*)(_QWORD))type metadata accessor for ActivitySummarySnidgetView.ViewModel, (uint64_t (*)(uint64_t))ActivitySummarySnidgetView.ViewModel.init(from:), a2);
}

uint64_t sub_1BC9F5268(_QWORD *a1)
{
  return sub_1BC9F4BAC(a1);
}

uint64_t ActivitySummarySnidgetView.ActionHandlerData.__allocating_init(relevantDateInterval:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = swift_allocObject();
  v3 = v2 + OBJC_IVAR____TtCV19HealthVisualization26ActivitySummarySnidgetView17ActionHandlerData_relevantDateInterval;
  v4 = sub_1BCAB5058();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  swift_beginAccess();
  sub_1BC9FCA74(a1, v3, (uint64_t (*)(_QWORD))sub_1BC9F53BC);
  swift_endAccess();
  return v2;
}

uint64_t ActivitySummarySnidgetView.ActionHandlerData.init(relevantDateInterval:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + OBJC_IVAR____TtCV19HealthVisualization26ActivitySummarySnidgetView17ActionHandlerData_relevantDateInterval;
  v4 = sub_1BCAB5058();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  swift_beginAccess();
  sub_1BC9FCA74(a1, v3, (uint64_t (*)(_QWORD))sub_1BC9F53BC);
  swift_endAccess();
  return v1;
}

void sub_1BC9F53BC(uint64_t a1)
{
  sub_1BC998AB0(a1, &qword_1ED6C70D0, (uint64_t (*)(uint64_t))MEMORY[0x1E0D2E068], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
}

unint64_t sub_1BC9F53D8()
{
  return 0xD000000000000014;
}

uint64_t sub_1BC9F53F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1BCA02AE0(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_1BC9F541C()
{
  sub_1BC9F567C();
  return sub_1BCAB68D0();
}

uint64_t sub_1BC9F5444()
{
  sub_1BC9F567C();
  return sub_1BCAB68DC();
}

uint64_t ActivitySummarySnidgetView.ActionHandlerData.deinit()
{
  uint64_t v0;

  sub_1BC997208(v0 + OBJC_IVAR____TtCV19HealthVisualization26ActivitySummarySnidgetView17ActionHandlerData_relevantDateInterval, (uint64_t (*)(_QWORD))sub_1BC9F53BC);
  return v0;
}

uint64_t ActivitySummarySnidgetView.ActionHandlerData.__deallocating_deinit()
{
  uint64_t v0;

  sub_1BC997208(v0 + OBJC_IVAR____TtCV19HealthVisualization26ActivitySummarySnidgetView17ActionHandlerData_relevantDateInterval, (uint64_t (*)(_QWORD))sub_1BC9F53BC);
  return swift_deallocClassInstance();
}

uint64_t sub_1BC9F54D0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v14;

  v2 = v1;
  sub_1BC9F53BC(0);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BC9ACE04(0, &qword_1ED6C4DB8, (uint64_t (*)(void))sub_1BC9F567C, (uint64_t)&type metadata for ActivitySummarySnidgetView.ActionHandlerData.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v8 = v7;
  v9 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v14 - v10;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BC9F567C();
  sub_1BCAB68B8();
  v12 = v2 + OBJC_IVAR____TtCV19HealthVisualization26ActivitySummarySnidgetView17ActionHandlerData_relevantDateInterval;
  swift_beginAccess();
  sub_1BC9964B8(v12, (uint64_t)v6, (uint64_t (*)(_QWORD))sub_1BC9F53BC);
  sub_1BCAB5058();
  sub_1BC996948(&qword_1ED6C4BA8, (uint64_t (*)(uint64_t))MEMORY[0x1E0D2E068], MEMORY[0x1E0D2E078]);
  sub_1BCAB6738();
  sub_1BC997208((uint64_t)v6, (uint64_t (*)(_QWORD))sub_1BC9F53BC);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

unint64_t sub_1BC9F567C()
{
  unint64_t result;

  result = qword_1ED6C6578;
  if (!qword_1ED6C6578)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCAC2C84, &type metadata for ActivitySummarySnidgetView.ActionHandlerData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED6C6578);
  }
  return result;
}

uint64_t ActivitySummarySnidgetView.ActionHandlerData.__allocating_init(from:)(uint64_t a1)
{
  return sub_1BC9F56DC(a1, (void (*)(uint64_t))ActivitySummarySnidgetView.ActionHandlerData.init(from:));
}

uint64_t sub_1BC9F56DC(uint64_t a1, void (*a2)(uint64_t))
{
  uint64_t v4;

  v4 = swift_allocObject();
  a2(a1);
  return v4;
}

uint64_t ActivitySummarySnidgetView.ActionHandlerData.init(from:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  _QWORD *v20;

  v2 = v1;
  sub_1BC9F53BC(0);
  MEMORY[0x1E0C80A78](v4);
  v18 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BC9ACE04(0, &qword_1ED6C4B60, (uint64_t (*)(void))sub_1BC9F567C, (uint64_t)&type metadata for ActivitySummarySnidgetView.ActionHandlerData.CodingKeys, MEMORY[0x1E0DED048]);
  v17 = v6;
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v17 - v8;
  v10 = v2 + OBJC_IVAR____TtCV19HealthVisualization26ActivitySummarySnidgetView17ActionHandlerData_relevantDateInterval;
  v11 = sub_1BCAB5058();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v10, 1, 1, v11);
  v12 = a1[3];
  v20 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v12);
  sub_1BC9F567C();
  v13 = v19;
  sub_1BCAB68AC();
  if (v13)
  {
    swift_release();
  }
  else
  {
    sub_1BC996948(&qword_1ED6C4950, (uint64_t (*)(uint64_t))MEMORY[0x1E0D2E068], MEMORY[0x1E0D2E088]);
    v15 = v17;
    v14 = (uint64_t)v18;
    sub_1BCAB66A8();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v15);
    swift_beginAccess();
    sub_1BC9FCA74(v14, v10, (uint64_t (*)(_QWORD))sub_1BC9F53BC);
    swift_endAccess();
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v20);
  return v2;
}

uint64_t sub_1BC9F5940(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x1BCCFBE84](&protocol conformance descriptor for ActivitySummarySnidgetView.ActionHandlerData, a3);
  return sub_1BCAB5268();
}

uint64_t sub_1BC9F59A8(uint64_t a1)
{
  MEMORY[0x1BCCFBE84](&protocol conformance descriptor for ActivitySummarySnidgetView.ActionHandlerData, a1);
  return sub_1BCAB525C();
}

uint64_t sub_1BC9F59E8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1BC9F5A0C(a1, (void (*)(_QWORD))type metadata accessor for ActivitySummarySnidgetView.ActionHandlerData, (uint64_t (*)(uint64_t))ActivitySummarySnidgetView.ActionHandlerData.init(from:), a2);
}

uint64_t sub_1BC9F5A0C@<X0>(uint64_t a1@<X0>, void (*a2)(_QWORD)@<X3>, uint64_t (*a3)(uint64_t)@<X4>, uint64_t *a4@<X8>)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t result;

  a2(0);
  v8 = swift_allocObject();
  result = a3(a1);
  if (!v4)
    *a4 = v8;
  return result;
}

uint64_t sub_1BC9F5A70(_QWORD *a1)
{
  return sub_1BC9F54D0(a1);
}

void sub_1BC9F5A90()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(char *, uint64_t);
  unint64_t v37;
  unint64_t v38;
  char *v39;
  void (*v40)(char *, uint64_t);
  char *v41;
  NSObject *v42;
  os_log_type_t v43;
  uint8_t *v44;
  char *v45;
  char *v46;
  uint64_t v47;
  void (*v48)(char *, uint64_t);
  void *v49;
  id v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  void *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  id v64;
  char *v65;
  uint64_t v66;
  void (*v67)(char *, uint64_t);
  char *v68;
  char *v69;
  id v70;
  char *v71;
  void *v72;
  char *v73;
  void *v74;
  id v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  int v79;
  char *v80;
  char *v81;
  char *v82;
  _QWORD *v83;
  char *v84;
  char *v85;
  void (*v86)(char *, uint64_t);
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;

  v91 = *v0;
  v1 = sub_1BCAB5514();
  v104 = *(_QWORD *)(v1 - 8);
  v105 = v1;
  MEMORY[0x1E0C80A78](v1);
  v96 = (char *)&v77 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v3);
  v103 = (char *)&v77 - v4;
  v5 = sub_1BCAB52EC();
  v101 = *(_QWORD *)(v5 - 8);
  v102 = v5;
  MEMORY[0x1E0C80A78](v5);
  v100 = (char *)&v77 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v97 = sub_1BCAB52D4();
  v99 = *(_QWORD *)(v97 - 8);
  MEMORY[0x1E0C80A78](v97);
  v98 = (char *)&v77 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v93 = sub_1BCAB5130();
  MEMORY[0x1E0C80A78](v93);
  v94 = (char *)&v77 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v90 = sub_1BCAB4BD8();
  v89 = *(_QWORD *)(v90 - 8);
  MEMORY[0x1E0C80A78](v90);
  v88 = (char *)&v77 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BC9F53BC(0);
  MEMORY[0x1E0C80A78](v10);
  v95 = (uint64_t)&v77 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BC998AB0(0, &qword_1ED6C7280, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v12);
  v92 = (char *)&v77 - v13;
  sub_1BC9F66A4(0);
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)&v77 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_1BCAB5370();
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17);
  v20 = (char *)&v77 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v23 = (char *)&v77 - v22;
  MEMORY[0x1E0C80A78](v24);
  v26 = (char *)&v77 - v25;
  MEMORY[0x1E0C80A78](v27);
  v29 = (char *)&v77 - v28;
  MEMORY[0x1E0C80A78](v30);
  v32 = (char *)&v77 - v31;
  v33 = v0;
  sub_1BCAB52F8();
  v34 = v17;
  v35 = sub_1BCAB5358();
  v36 = *(void (**)(char *, uint64_t))(v18 + 8);
  v38 = v37;
  v39 = v32;
  v40 = v36;
  v36(v39, v34);
  if (v38 >> 60 == 15)
  {
    v41 = v103;
    sub_1BCAB54D8();
    v42 = sub_1BCAB54FC();
    v43 = sub_1BCAB61A4();
    if (os_log_type_enabled(v42, v43))
    {
      v44 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v44 = 0;
      _os_log_impl(&dword_1BC989000, v42, v43, "ActivitySummarySnidgetView.ActionHandler: unable to read object type", v44, 2u);
      MEMORY[0x1BCCFBF5C](v44, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v104 + 8))(v41, v105);
  }
  else
  {
    v81 = v16;
    v84 = v29;
    v85 = v26;
    v82 = v23;
    v86 = v40;
    v80 = v20;
    v87 = v34;
    v83 = v33;
    sub_1BCAB4B30();
    swift_allocObject();
    sub_1BCAB4B24();
    type metadata accessor for ActivitySummarySnidgetView.ActionHandlerData(0);
    sub_1BC996948(&qword_1ED6C6590, type metadata accessor for ActivitySummarySnidgetView.ActionHandlerData, (uint64_t)&protocol conformance descriptor for ActivitySummarySnidgetView.ActionHandlerData);
    sub_1BCAB4B18();
    v77 = v35;
    v78 = v38;
    swift_release();
    v103 = v106;
    v45 = v84;
    sub_1BCAB52F8();
    sub_1BCAB534C();
    v46 = v45;
    v47 = v87;
    v48 = v86;
    v86(v46, v87);
    v49 = (void *)sub_1BCAB5214();
    swift_release();
    v50 = objc_msgSend(v49, sel_profileIdentifier);

    v51 = v85;
    sub_1BCAB52F8();
    sub_1BCAB534C();
    v48(v51, v47);
    v52 = (uint64_t)v81;
    sub_1BCAB5220();
    swift_release();
    v53 = sub_1BCAB5160();
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v53 - 8) + 56))(v52, 0, 1, v53);
    v79 = sub_1BCAB51F0();
    v54 = v79;

    sub_1BC997208(v52, (uint64_t (*)(_QWORD))sub_1BC9F66A4);
    v55 = 0;
    v56 = v98;
    if (v54 <= 1)
    {
      v57 = (uint64_t)&v103[OBJC_IVAR____TtCV19HealthVisualization26ActivitySummarySnidgetView17ActionHandlerData_relevantDateInterval];
      swift_beginAccess();
      v58 = v95;
      sub_1BC9964B8(v57, v95, (uint64_t (*)(_QWORD))sub_1BC9F53BC);
      v59 = sub_1BCAB5058();
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v59 - 8) + 48))(v58, 1, v59))
      {
        sub_1BC997208(v58, (uint64_t (*)(_QWORD))sub_1BC9F53BC);
        v60 = sub_1BCAB4E54();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v60 - 8) + 56))(v92, 1, 1, v60);
      }
      else
      {
        v61 = v88;
        sub_1BCAB504C();
        v62 = v92;
        sub_1BCAB4B9C();
        (*(void (**)(char *, uint64_t))(v89 + 8))(v61, v90);
        sub_1BC997208(v58, (uint64_t (*)(_QWORD))sub_1BC9F53BC);
        v63 = sub_1BCAB4E54();
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v63 - 8) + 56))(v62, 0, 1, v63);
      }
      sub_1BCAB5154();
      v106 = (char *)MEMORY[0x1E0DEE9D8];
      sub_1BC996948(&qword_1ED6C4958, (uint64_t (*)(uint64_t))MEMORY[0x1E0D2A918], MEMORY[0x1E0D2A920]);
      sub_1BC9FC798(0);
      sub_1BC996948(&qword_1ED6C4B48, (uint64_t (*)(uint64_t))sub_1BC9FC798, MEMORY[0x1E0DEAF38]);
      sub_1BCAB63E4();
      v55 = (void *)sub_1BCAB5148();
    }
    sub_1BCAB52C8();
    v64 = objc_msgSend((id)objc_opt_self(), sel_activitySummaryType);
    v65 = v84;
    sub_1BCAB52F8();
    sub_1BCAB534C();
    v66 = v87;
    v67 = v86;
    v86(v65, v87);
    sub_1BCAB5208();
    swift_release();
    v68 = v85;
    sub_1BCAB52F8();
    sub_1BCAB534C();
    v67(v68, v66);
    sub_1BCAB5214();
    swift_release();
    v69 = v82;
    sub_1BCAB52F8();
    sub_1BCAB534C();
    v67(v69, v66);
    sub_1BCAB522C();
    swift_release();
    v70 = v55;
    v71 = v100;
    sub_1BCAB52E0();
    v72 = (void *)sub_1BCAB52BC();

    (*(void (**)(char *, uint64_t))(v101 + 8))(v71, v102);
    (*(void (**)(char *, uint64_t))(v99 + 8))(v56, v97);
    v73 = v80;
    sub_1BCAB52F8();
    v74 = (void *)sub_1BCAB5364();
    v67(v73, v66);
    v75 = objc_msgSend(v74, sel_navigationController);

    v76 = v78;
    if (v75)
    {
      objc_msgSend(v75, sel_pushViewController_animated_, v72, 1);

      sub_1BC9EED08(v77, v76);
      swift_release();

    }
    else
    {

      sub_1BC9EED08(v77, v76);
      swift_release();

    }
  }
}

void sub_1BC9F66A4(uint64_t a1)
{
  sub_1BC998AB0(a1, &qword_1ED6C4960, (uint64_t (*)(uint64_t))MEMORY[0x1E0D2A9F0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
}

uint64_t ActivitySummarySnidgetView.ActionHandler.__allocating_init(content:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v8;

  v2 = sub_1BCAB5370();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_allocObject();
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, a1, v2);
  v6 = sub_1BCAB5304();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
  return v6;
}

uint64_t ActivitySummarySnidgetView.ActionHandler.init(content:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v2 = sub_1BCAB5370();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x1E0C80A78](v2);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v3 + 16))((char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2, v4);
  v6 = sub_1BCAB5304();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
  return v6;
}

uint64_t ActivitySummarySnidgetView.ActionHandler.__deallocating_deinit()
{
  _s19HealthVisualization26ActivitySummarySnidgetViewV13ActionHandlerCfd_0();
  return swift_deallocClassInstance();
}

uint64_t ActivitySummarySnidgetView.actionHandlerContent.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1BC9964B8(v1, a1, (uint64_t (*)(_QWORD))sub_1BC9FC7B4);
}

uint64_t ActivitySummarySnidgetView.actionHandlerContent.setter(uint64_t a1)
{
  uint64_t v1;

  return sub_1BC9FCA74(a1, v1, (uint64_t (*)(_QWORD))sub_1BC9FC7B4);
}

uint64_t (*ActivitySummarySnidgetView.actionHandlerContent.modify())()
{
  return nullsub_1;
}

uint64_t ActivitySummarySnidgetView.previousViewModel.getter()
{
  type metadata accessor for ActivitySummarySnidgetView(0);
  return swift_retain();
}

uint64_t ActivitySummarySnidgetView.previousViewModel.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;

  v3 = *(int *)(type metadata accessor for ActivitySummarySnidgetView(0) + 28);
  result = swift_release();
  *(_QWORD *)(v1 + v3) = a1;
  return result;
}

uint64_t (*ActivitySummarySnidgetView.previousViewModel.modify())(_QWORD)
{
  type metadata accessor for ActivitySummarySnidgetView(0);
  return nullsub_1;
}

uint64_t ActivitySummarySnidgetView.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;

  v4 = sub_1BCAB5370();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a2, 1, 1, v4);
  v5 = (int *)type metadata accessor for ActivitySummarySnidgetView(0);
  v6 = v5[7];
  *(_QWORD *)(a2 + v6) = 0;
  sub_1BC998AB0(0, &qword_1ED6C48C0, type metadata accessor for ActivitySummarySnidgetView.ViewModel, MEMORY[0x1E0D2AAE8]);
  v8 = v7;
  v9 = sub_1BCAB51A8();
  v10 = (uint64_t *)(a2 + v5[5]);
  *v10 = v9;
  v10[1] = v11;
  sub_1BCAB5184();
  v12 = (uint64_t *)(a2 + v5[6]);
  type metadata accessor for ActivitySummarySnidgetView.ViewModel(0);
  sub_1BC996948(&qword_1ED6C49A8, type metadata accessor for ActivitySummarySnidgetView.ViewModel, (uint64_t)&protocol conformance descriptor for ActivitySummarySnidgetView.ViewModel);
  *v12 = sub_1BCAB594C();
  v12[1] = v13;
  sub_1BCAB5190();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(a1, v8);
  result = swift_release();
  *(_QWORD *)(a2 + v6) = v15;
  return result;
}

uint64_t ActivitySummarySnidgetView.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;

  v25 = a1;
  v2 = sub_1BCAB5B38();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BC9FC7E4();
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BC9FC994(0);
  v23 = v9;
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BC9FCA20(0);
  v24 = v13;
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v8 = sub_1BCAB5A90();
  *((_QWORD *)v8 + 1) = 0;
  v8[16] = 0;
  sub_1BC9FDA58(0, &qword_1ED6C4A88, sub_1BC9FC85C);
  sub_1BC9F6D2C(v1, &v8[*(int *)(v16 + 44)]);
  sub_1BCAB5B2C();
  sub_1BC996948(&qword_1ED6C4B00, (uint64_t (*)(uint64_t))sub_1BC9FC7E4, MEMORY[0x1E0CDFCC0]);
  sub_1BCAB5D0C();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  sub_1BC997208((uint64_t)v8, (uint64_t (*)(_QWORD))sub_1BC9FC7E4);
  sub_1BCAB4FD4();
  sub_1BCAB5DE4();
  sub_1BCAB5994();
  v17 = v23;
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v15, v12, v23);
  v18 = &v15[*(int *)(v24 + 36)];
  v19 = v31;
  *((_OWORD *)v18 + 4) = v30;
  *((_OWORD *)v18 + 5) = v19;
  *((_OWORD *)v18 + 6) = v32;
  v20 = v27;
  *(_OWORD *)v18 = v26;
  *((_OWORD *)v18 + 1) = v20;
  v21 = v29;
  *((_OWORD *)v18 + 2) = v28;
  *((_OWORD *)v18 + 3) = v21;
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v17);
  return sub_1BC9AE330((uint64_t)v15, v25, (uint64_t (*)(_QWORD))sub_1BC9FCA20);
}

uint64_t sub_1BC9F6D2C@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  void (*v35)(char *, char *, uint64_t);
  char *v36;
  uint64_t v37;
  void (*v38)(char *, char *, uint64_t);
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  void (*v47)(char *, uint64_t);
  void (*v48)(char *, uint64_t);
  uint64_t v50;
  char *v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  _OWORD v73[9];

  v61 = a2;
  sub_1BC998AB0(0, &qword_1ED6C48D8, (uint64_t (*)(uint64_t))sub_1BC9F48B4, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v3);
  v55 = (uint64_t)&v50 - v4;
  sub_1BC9F48B4();
  v56 = v5;
  v52 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v50 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BC998AB0(0, &qword_1ED6C48D0, (uint64_t (*)(uint64_t))sub_1BC9F48B4, MEMORY[0x1E0D2AAE8]);
  MEMORY[0x1E0C80A78](v8);
  v54 = (char *)&v50 - v9;
  sub_1BC9FC91C();
  v57 = v10;
  v64 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v60 = (char *)&v50 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v51 = (char *)&v50 - v13;
  MEMORY[0x1E0C80A78](v14);
  v59 = (char *)&v50 - v15;
  v58 = sub_1BCAB52B0();
  v63 = *(_QWORD *)(v58 - 8);
  MEMORY[0x1E0C80A78](v58);
  v53 = (char *)&v50 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17);
  v19 = (char *)&v50 - v18;
  v20 = type metadata accessor for ActivitySummarySnidgetView(0);
  v21 = *(_QWORD *)(a1 + *(int *)(v20 + 24) + 8);
  swift_beginAccess();
  swift_retain();
  v62 = v19;
  sub_1BCAB52A4();
  if (qword_1ED6C49C0 != -1)
    swift_once();
  v22 = qword_1ED6C49B8;
  v23 = sub_1BCAB5DE4();
  v24 = 1;
  sub_1BC9F7220(0.0, 1, 0.0, 1, 0.0, 1, 0.0, 1, (uint64_t)v73, 0.0, 1, INFINITY, 0, v23, v25, v22, 0);
  v26 = v21 + OBJC_IVAR____TtCV19HealthVisualization26ActivitySummarySnidgetView9ViewModel_currentValueViewModel;
  swift_beginAccess();
  sub_1BC9964B8(v26, (uint64_t)v7, (uint64_t (*)(_QWORD))sub_1BC9F48B4);
  v27 = *(_QWORD *)(a1 + *(int *)(v20 + 28));
  if (v27)
  {
    v28 = v27 + OBJC_IVAR____TtCV19HealthVisualization26ActivitySummarySnidgetView9ViewModel_currentValueViewModel;
    swift_beginAccess();
    v29 = v28;
    v30 = v55;
    sub_1BC9964B8(v29, v55, (uint64_t (*)(_QWORD))sub_1BC9F48B4);
    v24 = 0;
  }
  else
  {
    v30 = v55;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v52 + 56))(v30, v24, 1, v56);
  swift_bridgeObjectRetain();
  sub_1BCAB519C();
  type metadata accessor for ActivitySnidgetCurrentValueVisualizationView(0);
  sub_1BC996948(&qword_1ED6C62D0, type metadata accessor for ActivitySnidgetCurrentValueVisualizationView, (uint64_t)&protocol conformance descriptor for ActivitySnidgetCurrentValueVisualizationView);
  v31 = v51;
  sub_1BCAB528C();
  v32 = v64;
  v33 = v59;
  v34 = v57;
  (*(void (**)(char *, char *, uint64_t))(v64 + 32))(v59, v31, v57);
  v35 = *(void (**)(char *, char *, uint64_t))(v63 + 16);
  v36 = v53;
  v37 = v58;
  v35(v53, v62, v58);
  v69 = v73[4];
  v70 = v73[5];
  v71 = v73[6];
  v72 = v73[7];
  v65 = v73[0];
  v66 = v73[1];
  v67 = v73[2];
  v68 = v73[3];
  v38 = *(void (**)(char *, char *, uint64_t))(v32 + 16);
  v39 = v60;
  v38(v60, v33, v34);
  v40 = v61;
  v35(v61, v36, v37);
  sub_1BC9FC878();
  v42 = &v40[*(int *)(v41 + 48)];
  v43 = v70;
  *((_OWORD *)v42 + 4) = v69;
  *((_OWORD *)v42 + 5) = v43;
  v44 = v72;
  *((_OWORD *)v42 + 6) = v71;
  *((_OWORD *)v42 + 7) = v44;
  v45 = v66;
  *(_OWORD *)v42 = v65;
  *((_OWORD *)v42 + 1) = v45;
  v46 = v68;
  *((_OWORD *)v42 + 2) = v67;
  *((_OWORD *)v42 + 3) = v46;
  v38(&v40[*(int *)(v41 + 64)], v39, v34);
  v47 = *(void (**)(char *, uint64_t))(v64 + 8);
  v47(v33, v34);
  v48 = *(void (**)(char *, uint64_t))(v63 + 8);
  v48(v62, v37);
  v47(v39, v34);
  return ((uint64_t (*)(char *, uint64_t))v48)(v36, v37);
}

__n128 sub_1BC9F7220@<Q0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  char v18;
  void *v27;
  __n128 result;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __n128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;

  v18 = a17;
  if ((a2 & 1) != 0)
    a1 = -INFINITY;
  if ((a4 & 1) != 0)
    a3 = a1;
  if ((a6 & 1) != 0)
    a5 = a3;
  if (a1 > a3 || a3 > a5)
    goto LABEL_22;
  if ((a8 & 1) != 0)
    a7 = -INFINITY;
  if ((a11 & 1) != 0)
    a10 = a7;
  if ((a13 & 1) != 0)
    a12 = a10;
  if (a7 > a10 || a10 > a12)
  {
LABEL_22:
    sub_1BCAB61B0();
    v27 = (void *)sub_1BCAB5B5C();
    sub_1BCAB5478();

    v18 = a17;
  }
  sub_1BCAB5994();
  *(_QWORD *)a9 = a16;
  *(_BYTE *)(a9 + 8) = v18 & 1;
  *(_OWORD *)(a9 + 80) = v33;
  *(_OWORD *)(a9 + 96) = v34;
  *(_OWORD *)(a9 + 112) = v35;
  *(_OWORD *)(a9 + 16) = v29;
  *(_OWORD *)(a9 + 32) = v30;
  result = v32;
  *(_OWORD *)(a9 + 48) = v31;
  *(__n128 *)(a9 + 64) = v32;
  return result;
}

uint64_t sub_1BC9F73CC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1BC9964B8(v1, a1, (uint64_t (*)(_QWORD))sub_1BC9FC7B4);
}

uint64_t sub_1BC9F73F0(uint64_t a1)
{
  uint64_t v1;

  return sub_1BC9FCA74(a1, v1, (uint64_t (*)(_QWORD))sub_1BC9FC7B4);
}

uint64_t (*sub_1BC9F7410())()
{
  return nullsub_1;
}

uint64_t ActivitySnidgetCurrentValueVisualizationView.viewModel.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for ActivitySnidgetCurrentValueVisualizationView(0);
  return sub_1BC9964B8(v1 + *(int *)(v3 + 20), a1, type metadata accessor for ActivitySnidgetCurrentValueVisualizationView.ViewModel);
}

uint64_t ActivitySnidgetCurrentValueVisualizationView.viewModel.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for ActivitySnidgetCurrentValueVisualizationView(0);
  return sub_1BC9FCA74(a1, v1 + *(int *)(v3 + 20), type metadata accessor for ActivitySnidgetCurrentValueVisualizationView.ViewModel);
}

uint64_t (*ActivitySnidgetCurrentValueVisualizationView.viewModel.modify())(_QWORD)
{
  type metadata accessor for ActivitySnidgetCurrentValueVisualizationView(0);
  return nullsub_1;
}

uint64_t ActivitySnidgetCurrentValueVisualizationView.previousViewModel.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for ActivitySnidgetCurrentValueVisualizationView(0);
  return sub_1BC9964B8(v1 + *(int *)(v3 + 24), a1, (uint64_t (*)(_QWORD))sub_1BC9FCA3C);
}

uint64_t ActivitySnidgetCurrentValueVisualizationView.previousViewModel.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for ActivitySnidgetCurrentValueVisualizationView(0);
  return sub_1BC9FCA74(a1, v1 + *(int *)(v3 + 24), (uint64_t (*)(_QWORD))sub_1BC9FCA3C);
}

uint64_t (*ActivitySnidgetCurrentValueVisualizationView.previousViewModel.modify())(_QWORD)
{
  type metadata accessor for ActivitySnidgetCurrentValueVisualizationView(0);
  return nullsub_1;
}

uint64_t ActivitySnidgetCurrentValueVisualizationView.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  sub_1BC9FCA3C(0);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BCAB5244();
  sub_1BC996948(&qword_1ED6C4968, (uint64_t (*)(uint64_t))MEMORY[0x1E0D2AF00], MEMORY[0x1E0D2AEF8]);
  *a2 = sub_1BCAB59AC();
  a2[1] = v7;
  v8 = (int *)type metadata accessor for ActivitySnidgetCurrentValueVisualizationView(0);
  v9 = (uint64_t)a2 + v8[6];
  v10 = type metadata accessor for ActivitySnidgetCurrentValueVisualizationView.ViewModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
  objc_msgSend((id)objc_opt_self(), sel_hk_currentDeviceHas4InchScreen);
  sub_1BC9A649C(0, (unint64_t *)&qword_1ED6C6908);
  *(uint64_t *)((char *)a2 + v8[7]) = sub_1BCAB62E8();
  v11 = v8[8];
  *(uint64_t *)((char *)a2 + v11) = sub_1BCAB62E8();
  v12 = v8[9];
  if (qword_1ED6C4998 != -1)
    swift_once();
  v13 = (char *)a2 + v12;
  *(_QWORD *)v13 = qword_1ED6C4990;
  v13[8] = 0;
  sub_1BC998AB0(0, &qword_1ED6C48C8, type metadata accessor for ActivitySnidgetCurrentValueVisualizationView.ViewModel, MEMORY[0x1E0D2AAE8]);
  v15 = v14;
  sub_1BCAB5184();
  sub_1BCAB5190();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(a1, v15);
  return sub_1BC9FCA74((uint64_t)v6, v9, (uint64_t (*)(_QWORD))sub_1BC9FCA3C);
}

uint64_t ActivitySnidgetCurrentValueVisualizationView.ViewModel.isMoveRingOnly.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t ActivitySnidgetCurrentValueVisualizationView.ViewModel.isMoveRingOnly.setter(uint64_t result)
{
  _BYTE *v1;

  *v1 = result;
  return result;
}

uint64_t (*ActivitySnidgetCurrentValueVisualizationView.ViewModel.isMoveRingOnly.modify())()
{
  return nullsub_1;
}

id ActivitySnidgetCurrentValueVisualizationView.ViewModel.activitySummary.getter()
{
  uint64_t v0;

  return *(id *)(v0 + 8);
}

void ActivitySnidgetCurrentValueVisualizationView.ViewModel.activitySummary.setter(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 8) = a1;
}

uint64_t (*ActivitySnidgetCurrentValueVisualizationView.ViewModel.activitySummary.modify())()
{
  return nullsub_1;
}

uint64_t ActivitySnidgetCurrentValueVisualizationView.ViewModel.moveTitle.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ActivitySnidgetCurrentValueVisualizationView.ViewModel(0) + 24);
  v4 = sub_1BCAB4CE0();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t ActivitySnidgetCurrentValueVisualizationView.ViewModel.moveTitle.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ActivitySnidgetCurrentValueVisualizationView.ViewModel(0) + 24);
  v4 = sub_1BCAB4CE0();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*ActivitySnidgetCurrentValueVisualizationView.ViewModel.moveTitle.modify())(_QWORD)
{
  type metadata accessor for ActivitySnidgetCurrentValueVisualizationView.ViewModel(0);
  return nullsub_1;
}

uint64_t ActivitySnidgetCurrentValueVisualizationView.ViewModel.moveValue.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for ActivitySnidgetCurrentValueVisualizationView.ViewModel(0);
  return sub_1BC9964B8(v1 + *(int *)(v3 + 28), a1, (uint64_t (*)(_QWORD))sub_1BC9FCA58);
}

uint64_t ActivitySnidgetCurrentValueVisualizationView.ViewModel.moveValue.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for ActivitySnidgetCurrentValueVisualizationView.ViewModel(0);
  return sub_1BC9FCA74(a1, v1 + *(int *)(v3 + 28), (uint64_t (*)(_QWORD))sub_1BC9FCA58);
}

uint64_t (*ActivitySnidgetCurrentValueVisualizationView.ViewModel.moveValue.modify())(_QWORD)
{
  type metadata accessor for ActivitySnidgetCurrentValueVisualizationView.ViewModel(0);
  return nullsub_1;
}

uint64_t ActivitySnidgetCurrentValueVisualizationView.ViewModel.exerciseTitle.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ActivitySnidgetCurrentValueVisualizationView.ViewModel(0) + 32);
  v4 = sub_1BCAB4CE0();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t ActivitySnidgetCurrentValueVisualizationView.ViewModel.exerciseTitle.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ActivitySnidgetCurrentValueVisualizationView.ViewModel(0) + 32);
  v4 = sub_1BCAB4CE0();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*ActivitySnidgetCurrentValueVisualizationView.ViewModel.exerciseTitle.modify())(_QWORD)
{
  type metadata accessor for ActivitySnidgetCurrentValueVisualizationView.ViewModel(0);
  return nullsub_1;
}

uint64_t ActivitySnidgetCurrentValueVisualizationView.ViewModel.exerciseValue.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for ActivitySnidgetCurrentValueVisualizationView.ViewModel(0);
  return sub_1BC9964B8(v1 + *(int *)(v3 + 36), a1, (uint64_t (*)(_QWORD))sub_1BC9FCA58);
}

uint64_t ActivitySnidgetCurrentValueVisualizationView.ViewModel.exerciseValue.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for ActivitySnidgetCurrentValueVisualizationView.ViewModel(0);
  return sub_1BC9FCA74(a1, v1 + *(int *)(v3 + 36), (uint64_t (*)(_QWORD))sub_1BC9FCA58);
}

uint64_t (*ActivitySnidgetCurrentValueVisualizationView.ViewModel.exerciseValue.modify())(_QWORD)
{
  type metadata accessor for ActivitySnidgetCurrentValueVisualizationView.ViewModel(0);
  return nullsub_1;
}

uint64_t ActivitySnidgetCurrentValueVisualizationView.ViewModel.standTitle.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ActivitySnidgetCurrentValueVisualizationView.ViewModel(0) + 40);
  v4 = sub_1BCAB4CE0();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t ActivitySnidgetCurrentValueVisualizationView.ViewModel.standTitle.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ActivitySnidgetCurrentValueVisualizationView.ViewModel(0) + 40);
  v4 = sub_1BCAB4CE0();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*ActivitySnidgetCurrentValueVisualizationView.ViewModel.standTitle.modify())(_QWORD)
{
  type metadata accessor for ActivitySnidgetCurrentValueVisualizationView.ViewModel(0);
  return nullsub_1;
}

uint64_t ActivitySnidgetCurrentValueVisualizationView.ViewModel.standValue.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for ActivitySnidgetCurrentValueVisualizationView.ViewModel(0);
  return sub_1BC9964B8(v1 + *(int *)(v3 + 44), a1, (uint64_t (*)(_QWORD))sub_1BC9FCA58);
}

uint64_t ActivitySnidgetCurrentValueVisualizationView.ViewModel.standValue.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for ActivitySnidgetCurrentValueVisualizationView.ViewModel(0);
  return sub_1BC9FCA74(a1, v1 + *(int *)(v3 + 44), (uint64_t (*)(_QWORD))sub_1BC9FCA58);
}

uint64_t (*ActivitySnidgetCurrentValueVisualizationView.ViewModel.standValue.modify())(_QWORD)
{
  type metadata accessor for ActivitySnidgetCurrentValueVisualizationView.ViewModel(0);
  return nullsub_1;
}

uint64_t ActivitySnidgetCurrentValueVisualizationView.ViewModel.hasEverHadAWatch.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0
                            + *(int *)(type metadata accessor for ActivitySnidgetCurrentValueVisualizationView.ViewModel(0)
                                     + 48));
}

uint64_t ActivitySnidgetCurrentValueVisualizationView.ViewModel.hasEverHadAWatch.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for ActivitySnidgetCurrentValueVisualizationView.ViewModel(0);
  *(_BYTE *)(v1 + *(int *)(result + 48)) = a1;
  return result;
}

uint64_t (*ActivitySnidgetCurrentValueVisualizationView.ViewModel.hasEverHadAWatch.modify())(_QWORD)
{
  type metadata accessor for ActivitySnidgetCurrentValueVisualizationView.ViewModel(0);
  return nullsub_1;
}

uint64_t ActivitySnidgetCurrentValueVisualizationView.ViewModel.pausedRingsTitle.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ActivitySnidgetCurrentValueVisualizationView.ViewModel(0) + 52);
  v4 = sub_1BCAB4CE0();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t ActivitySnidgetCurrentValueVisualizationView.ViewModel.pausedRingsTitle.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for ActivitySnidgetCurrentValueVisualizationView.ViewModel(0) + 52);
  v4 = sub_1BCAB4CE0();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*ActivitySnidgetCurrentValueVisualizationView.ViewModel.pausedRingsTitle.modify())(_QWORD)
{
  type metadata accessor for ActivitySnidgetCurrentValueVisualizationView.ViewModel(0);
  return nullsub_1;
}

uint64_t ActivitySnidgetCurrentValueVisualizationView.ViewModel.pausedRingsDetail.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for ActivitySnidgetCurrentValueVisualizationView.ViewModel(0);
  return sub_1BC9964B8(v1 + *(int *)(v3 + 56), a1, (uint64_t (*)(_QWORD))sub_1BC9FCA58);
}

uint64_t ActivitySnidgetCurrentValueVisualizationView.ViewModel.pausedRingsDetail.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for ActivitySnidgetCurrentValueVisualizationView.ViewModel(0);
  return sub_1BC9FCA74(a1, v1 + *(int *)(v3 + 56), (uint64_t (*)(_QWORD))sub_1BC9FCA58);
}

uint64_t (*ActivitySnidgetCurrentValueVisualizationView.ViewModel.pausedRingsDetail.modify())(_QWORD)
{
  type metadata accessor for ActivitySnidgetCurrentValueVisualizationView.ViewModel(0);
  return nullsub_1;
}

uint64_t ActivitySnidgetCurrentValueVisualizationView.ViewModel.init(isMoveRingOnly:activitySummary:moveTitle:moveValue:exerciseTitle:exerciseValue:standTitle:standValue:hasEverHadAWatch:pausedRingsTitle:pausedRingsDetail:)@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, char a10, uint64_t a11, uint64_t a12)
{
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t, uint64_t);

  v13 = (int *)type metadata accessor for ActivitySnidgetCurrentValueVisualizationView.ViewModel(0);
  v14 = a9 + v13[7];
  v15 = sub_1BCAB4CE0();
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 56);
  v17(v14, 1, 1, v15);
  v18 = a9 + v13[9];
  v17(v18, 1, 1, v15);
  v19 = a9 + v13[11];
  v17(v19, 1, 1, v15);
  v20 = v13[12];
  *(_BYTE *)(a9 + v20) = 2;
  v21 = a9 + v13[14];
  v17(v21, 1, 1, v15);
  *(_BYTE *)a9 = a1;
  *(_QWORD *)(a9 + 8) = a2;
  v22 = *(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 32);
  v22(a9 + v13[6], a3, v15);
  sub_1BC9FCA74(a4, v14, (uint64_t (*)(_QWORD))sub_1BC9FCA58);
  v22(a9 + v13[8], a5, v15);
  sub_1BC9FCA74(a6, v18, (uint64_t (*)(_QWORD))sub_1BC9FCA58);
  v22(a9 + v13[10], a7, v15);
  sub_1BC9FCA74(a8, v19, (uint64_t (*)(_QWORD))sub_1BC9FCA58);
  *(_BYTE *)(a9 + v20) = a10;
  v22(a9 + v13[13], a11, v15);
  return sub_1BC9FCA74(a12, v21, (uint64_t (*)(_QWORD))sub_1BC9FCA58);
}

uint64_t sub_1BC9F7F98(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1BC9F7FD8 + 4 * byte_1BCAC2420[a1]))(0x695265766F4D7369, 0xEE00796C6E4F676ELL);
}

uint64_t sub_1BC9F7FD8()
{
  return 0x7974697669746361;
}

uint64_t sub_1BC9F7FFC()
{
  return 0x6C74695465766F6DLL;
}

uint64_t sub_1BC9F802C()
{
  return 0x6573696372657865;
}

uint64_t sub_1BC9F805C()
{
  return 0x746954646E617473;
}

uint64_t sub_1BC9F8078()
{
  return 0x6C6156646E617473;
}

unint64_t sub_1BC9F8098()
{
  return 0xD000000000000010;
}

uint64_t sub_1BC9F80E0()
{
  unsigned __int8 *v0;

  return sub_1BC9F7F98(*v0);
}

uint64_t sub_1BC9F80E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1BCA02B64(a1, a2);
  *a3 = result;
  return result;
}

void sub_1BC9F810C(_BYTE *a1@<X8>)
{
  *a1 = 11;
}

uint64_t sub_1BC9F8118()
{
  sub_1BC9FCAB8();
  return sub_1BCAB68D0();
}

uint64_t sub_1BC9F8140()
{
  sub_1BC9FCAB8();
  return sub_1BCAB68DC();
}

uint64_t ActivitySnidgetCurrentValueVisualizationView.ViewModel.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  int *v36;
  __n128 v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(__n128);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  int v56;
  int *v57;
  uint64_t v58;
  int v59;
  void (*v60)(uint64_t, uint64_t);
  uint64_t (*v61)(_QWORD);
  uint64_t v62;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  void (*v68)(char *, char *, uint64_t);
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  void (*v74)(char *, uint64_t);
  char *v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  id v88;
  uint64_t v89;
  char v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unsigned int (*v95)(uint64_t, uint64_t, uint64_t);
  void (*v96)(uint64_t, char *, uint64_t);
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  void (*v100)(__n128);
  uint64_t v101;
  uint64_t v102;
  char *v103;
  char *v104;
  char *v105;
  char *v106;
  char *v107;
  char *v108;
  char *v109;
  char *v110;
  char *v111;
  char *v112;
  char *v113;
  char *v114;
  char *v115;
  uint64_t v116;
  char *v117;
  _QWORD *v118;
  char *v119;
  char *v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  int *v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  unint64_t v128;
  char v129;

  v101 = a2;
  sub_1BC9FCA58(0);
  MEMORY[0x1E0C80A78](v3);
  v102 = (uint64_t)&v94 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v106 = (char *)&v94 - v6;
  MEMORY[0x1E0C80A78](v7);
  v104 = (char *)&v94 - v8;
  MEMORY[0x1E0C80A78](v9);
  v110 = (char *)&v94 - v10;
  MEMORY[0x1E0C80A78](v11);
  v108 = (char *)&v94 - v12;
  MEMORY[0x1E0C80A78](v13);
  v113 = (char *)&v94 - v14;
  MEMORY[0x1E0C80A78](v15);
  v112 = (char *)&v94 - v16;
  v17 = sub_1BCAB4CE0();
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17);
  v103 = (char *)&v94 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v20);
  v107 = (char *)&v94 - v21;
  MEMORY[0x1E0C80A78](v22);
  v105 = (char *)&v94 - v23;
  MEMORY[0x1E0C80A78](v24);
  v111 = (char *)&v94 - v25;
  MEMORY[0x1E0C80A78](v26);
  v109 = (char *)&v94 - v27;
  MEMORY[0x1E0C80A78](v28);
  v115 = (char *)&v94 - v29;
  MEMORY[0x1E0C80A78](v30);
  v114 = (char *)&v94 - v31;
  sub_1BC9ACE04(0, &qword_1ED6C4B50, (uint64_t (*)(void))sub_1BC9FCAB8, (uint64_t)&type metadata for ActivitySnidgetCurrentValueVisualizationView.ViewModel.CodingKeys, MEMORY[0x1E0DED048]);
  v33 = v32;
  v116 = *(_QWORD *)(v32 - 8);
  MEMORY[0x1E0C80A78](v32);
  v35 = (char *)&v94 - v34;
  v36 = (int *)type metadata accessor for ActivitySnidgetCurrentValueVisualizationView.ViewModel(0);
  v37 = MEMORY[0x1E0C80A78](v36);
  v39 = (char *)&v94 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = *(int *)(v40 + 28);
  v121 = v18;
  v122 = &v39[v41];
  v42 = *(void (**)(__n128))(v18 + 56);
  v42(v37);
  v120 = &v39[v36[9]];
  ((void (*)(void))v42)();
  v119 = &v39[v36[11]];
  ((void (*)(void))v42)();
  v43 = v36[12];
  v39[v43] = 2;
  v124 = v36;
  v125 = v17;
  v44 = v36[14];
  v126 = v39;
  v117 = &v39[v44];
  ((void (*)(void))v42)();
  v45 = a1[3];
  v118 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v45);
  sub_1BC9FCAB8();
  v46 = v123;
  sub_1BCAB68AC();
  if (v46)
  {
    v123 = v46;
    v51 = 1192;
  }
  else
  {
    v48 = v114;
    v47 = v115;
    v100 = v42;
    v99 = v43;
    LOBYTE(v127) = 0;
    *v126 = sub_1BCAB66C0() & 1;
    LOBYTE(v127) = 2;
    v49 = sub_1BC996948(&qword_1ED6C4948, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAF240], MEMORY[0x1E0CAF270]);
    v50 = v125;
    sub_1BCAB66E4();
    v64 = v48;
    sub_1BCAB4CD4();
    v65 = v35;
    v66 = v121;
    v115 = *(char **)(v121 + 8);
    ((void (*)(char *, uint64_t))v115)(v47, v50);
    v67 = (uint64_t)v126;
    v68 = *(void (**)(char *, char *, uint64_t))(v66 + 32);
    v68(&v126[v124[6]], v64, v50);
    LOBYTE(v127) = 3;
    v69 = (uint64_t)v113;
    v98 = v49;
    sub_1BCAB66A8();
    v123 = 0;
    v96 = (void (*)(uint64_t, char *, uint64_t))v68;
    v114 = v65;
    v97 = v33;
    v95 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v66 + 48);
    if (v95(v69, 1, v50) == 1)
    {
      sub_1BC997208(v69, (uint64_t (*)(_QWORD))sub_1BC9FCA58);
      v70 = v123;
      v71 = v97;
      v72 = v111;
      v73 = (uint64_t)v112;
      v74 = (void (*)(char *, uint64_t))v115;
      ((void (*)(char *, uint64_t, uint64_t, uint64_t))v100)(v112, 1, 1, v50);
    }
    else
    {
      v73 = (uint64_t)v112;
      sub_1BCAB4CD4();
      v74 = (void (*)(char *, uint64_t))v115;
      ((void (*)(uint64_t, uint64_t))v115)(v69, v50);
      v70 = v123;
      v71 = v97;
      v72 = v111;
      ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v100)(v73, 0, 1, v50);
    }
    sub_1BC9FCA74(v73, (uint64_t)v122, (uint64_t (*)(_QWORD))sub_1BC9FCA58);
    LOBYTE(v127) = 4;
    v75 = v114;
    sub_1BCAB66E4();
    if (v70)
    {
      v123 = v70;
      (*(void (**)(char *, uint64_t))(v116 + 8))(v75, v71);
      v51 = 1196;
      v52 = v121;
      v54 = (uint64_t)v117;
      v53 = (uint64_t)v118;
      goto LABEL_5;
    }
    v76 = v72;
    v77 = v109;
    sub_1BCAB4CD4();
    v74(v76, v50);
    v96(v67 + v124[8], v77, v50);
    LOBYTE(v127) = 5;
    v78 = (uint64_t)v110;
    sub_1BCAB66A8();
    if (v95(v78, 1, v50) == 1)
    {
      sub_1BC997208(v78, (uint64_t (*)(_QWORD))sub_1BC9FCA58);
      v79 = 1;
      v80 = (uint64_t)v108;
    }
    else
    {
      v80 = (uint64_t)v108;
      sub_1BCAB4CD4();
      ((void (*)(uint64_t, uint64_t))v115)(v78, v50);
      v79 = 0;
    }
    v81 = v107;
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v100)(v80, v79, 1, v50);
    sub_1BC9FCA74(v80, (uint64_t)v120, (uint64_t (*)(_QWORD))sub_1BC9FCA58);
    LOBYTE(v127) = 6;
    sub_1BCAB66E4();
    v82 = v105;
    sub_1BCAB4CD4();
    ((void (*)(char *, uint64_t))v115)(v81, v50);
    v96(v67 + v124[10], v82, v50);
    LOBYTE(v127) = 7;
    v83 = (uint64_t)v106;
    sub_1BCAB66A8();
    if (v95(v83, 1, v50) == 1)
    {
      sub_1BC997208(v83, (uint64_t (*)(_QWORD))sub_1BC9FCA58);
      v84 = 1;
      v85 = (uint64_t)v104;
    }
    else
    {
      v85 = (uint64_t)v104;
      sub_1BCAB4CD4();
      ((void (*)(uint64_t, uint64_t))v115)(v83, v50);
      v84 = 0;
    }
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v100)(v85, v84, 1, v50);
    sub_1BC9FCA74(v85, (uint64_t)v119, (uint64_t (*)(_QWORD))sub_1BC9FCA58);
    v129 = 1;
    sub_1BC9FCAFC();
    sub_1BCAB66E4();
    v86 = v127;
    v87 = v128;
    sub_1BC9A649C(0, (unint64_t *)&unk_1ED6C7570);
    sub_1BC9A649C(0, (unint64_t *)&qword_1ED6C7530);
    v88 = (id)sub_1BCAB621C();
    v123 = 0;
    if (!v88)
      v88 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB6278]), sel_init);
    *((_QWORD *)v126 + 1) = v88;
    LOBYTE(v127) = 8;
    v89 = v123;
    v90 = sub_1BCAB6684();
    v123 = v89;
    if (!v89)
    {
      v126[v99] = v90;
      LOBYTE(v127) = 9;
      v91 = v123;
      sub_1BCAB66E4();
      v123 = v91;
      if (!v91)
      {
        v96((uint64_t)&v126[v124[13]], v103, v125);
        LOBYTE(v127) = 10;
        v92 = v123;
        sub_1BCAB66A8();
        v123 = v92;
        if (!v92)
        {
          (*(void (**)(char *, uint64_t))(v116 + 8))(v114, v97);
          sub_1BC9D0098(v86, v87);
          sub_1BC9FCA74(v102, (uint64_t)v117, (uint64_t (*)(_QWORD))sub_1BC9FCA58);
          v93 = (uint64_t)v126;
          sub_1BC9964B8((uint64_t)v126, v101, type metadata accessor for ActivitySnidgetCurrentValueVisualizationView.ViewModel);
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v118);
          v62 = v93;
          v61 = type metadata accessor for ActivitySnidgetCurrentValueVisualizationView.ViewModel;
          return sub_1BC997208(v62, v61);
        }
        (*(void (**)(char *, uint64_t))(v116 + 8))(v114, v97);
        sub_1BC9D0098(v86, v87);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v118);
        v67 = (uint64_t)v126;

        v59 = 1;
        v56 = 1;
        LOBYTE(v55) = 1;
        v57 = v124;
        v58 = v125;
        v52 = v121;
        v54 = (uint64_t)v117;
        goto LABEL_11;
      }
    }
    (*(void (**)(char *, uint64_t))(v116 + 8))(v114, v97);
    sub_1BC9D0098(v86, v87);
    v51 = 1278;
  }
  v52 = v121;
  v54 = (uint64_t)v117;
  v53 = (uint64_t)v118;
  v67 = (uint64_t)v126;
LABEL_5:
  __swift_destroy_boxed_opaque_existential_1(v53);
  v55 = (v51 >> 4) & 1;
  v56 = (v51 >> 6) & 1;
  if ((v51 & 2) != 0)

  v57 = v124;
  v58 = v125;
  if ((v51 & 4) == 0)
  {
    sub_1BC997208((uint64_t)v122, (uint64_t (*)(_QWORD))sub_1BC9FCA58);
    if ((v51 & 0x10) != 0)
    {
      v59 = 0;
      v60 = *(void (**)(uint64_t, uint64_t))(v52 + 8);
      v60(v67 + v57[8], v58);
      goto LABEL_13;
    }
    v59 = 0;
LABEL_16:
    sub_1BC997208((uint64_t)v120, (uint64_t (*)(_QWORD))sub_1BC9FCA58);
    if (!v56)
      goto LABEL_20;
    v60 = *(void (**)(uint64_t, uint64_t))(v52 + 8);
LABEL_18:
    v60(v67 + v57[10], v58);
    sub_1BC997208((uint64_t)v119, (uint64_t (*)(_QWORD))sub_1BC9FCA58);
    if ((v59 & 1) == 0)
      goto LABEL_23;
    goto LABEL_22;
  }
  v59 = 0;
LABEL_11:
  v60 = *(void (**)(uint64_t, uint64_t))(v52 + 8);
  v60(v67 + v57[6], v58);
  sub_1BC997208((uint64_t)v122, (uint64_t (*)(_QWORD))sub_1BC9FCA58);
  if ((v55 & 1) == 0)
    goto LABEL_16;
  v60(v67 + v57[8], v58);
LABEL_13:
  sub_1BC997208((uint64_t)v120, (uint64_t (*)(_QWORD))sub_1BC9FCA58);
  if ((v56 & 1) != 0)
    goto LABEL_18;
LABEL_20:
  sub_1BC997208((uint64_t)v119, (uint64_t (*)(_QWORD))sub_1BC9FCA58);
  if (v59)
  {
    v60 = *(void (**)(uint64_t, uint64_t))(v52 + 8);
LABEL_22:
    v60(v67 + v57[13], v58);
  }
LABEL_23:
  v61 = (uint64_t (*)(_QWORD))sub_1BC9FCA58;
  v62 = v54;
  return sub_1BC997208(v62, v61);
}

uint64_t ActivitySnidgetCurrentValueVisualizationView.ViewModel.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  void *v11;
  uint64_t v12;
  id v13;
  id v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  char v19;
  id v20[3];

  v3 = v1;
  v20[2] = *(id *)MEMORY[0x1E0C80C00];
  sub_1BC9ACE04(0, &qword_1ED6C4DA8, (uint64_t (*)(void))sub_1BC9FCAB8, (uint64_t)&type metadata for ActivitySnidgetCurrentValueVisualizationView.ViewModel.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v17 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BC9FCAB8();
  sub_1BCAB68B8();
  LOBYTE(v20[0]) = 0;
  sub_1BCAB6750();
  if (v2)
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  type metadata accessor for ActivitySnidgetCurrentValueVisualizationView.ViewModel(0);
  LOBYTE(v20[0]) = 2;
  sub_1BCAB4CE0();
  sub_1BC996948(&qword_1ED6C4B98, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAF240], MEMORY[0x1E0CAF258]);
  sub_1BCAB6774();
  LOBYTE(v20[0]) = 3;
  sub_1BCAB6738();
  LOBYTE(v20[0]) = 4;
  sub_1BCAB6774();
  LOBYTE(v20[0]) = 5;
  sub_1BCAB6738();
  LOBYTE(v20[0]) = 6;
  sub_1BCAB6774();
  LOBYTE(v20[0]) = 7;
  sub_1BCAB6738();
  v11 = (void *)objc_opt_self();
  v12 = *(_QWORD *)(v3 + 8);
  v20[0] = 0;
  v13 = objc_msgSend(v11, sel_archivedDataWithRootObject_requiringSecureCoding_error_, v12, 0, v20);
  v14 = v20[0];
  if (!v13)
  {
    v16 = v14;
    sub_1BCAB4D40();

    swift_willThrow();
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  v17 = (void *)sub_1BCAB4D7C();
  v18 = v15;

  v20[0] = v17;
  v20[1] = v18;
  v19 = 1;
  sub_1BC9FCB40();
  sub_1BCAB6774();
  LOBYTE(v20[0]) = 8;
  sub_1BCAB6714();
  LOBYTE(v20[0]) = 9;
  sub_1BCAB6774();
  LOBYTE(v20[0]) = 10;
  sub_1BCAB6738();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  return sub_1BC9D0098((uint64_t)v17, (unint64_t)v18);
}

uint64_t sub_1BC9F925C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return ActivitySnidgetCurrentValueVisualizationView.ViewModel.init(from:)(a1, a2);
}

uint64_t sub_1BC9F9270(_QWORD *a1)
{
  return ActivitySnidgetCurrentValueVisualizationView.ViewModel.encode(to:)(a1);
}

void sub_1BC9F9284()
{
  qword_1ED6C5080 = 0x4028000000000000;
}

void sub_1BC9F9294()
{
  qword_1ED6C4990 = 0x4030000000000000;
}

void sub_1BC9F92A4()
{
  qword_1ED6C5090 = 0x4000000000000000;
}

uint64_t sub_1BC9F92B4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  char v19;
  char *v20;
  char *v21;
  __int128 v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;

  v49 = a1;
  v2 = sub_1BCAB5DC0();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v46 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BC9FCEAC();
  v7 = v6;
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BC9FCE90(0);
  v47 = v10;
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BC9FCE74(0);
  v48 = v13;
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v46 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for ActivitySnidgetCurrentValueVisualizationView(0);
  objc_msgSend(*(id *)(v1 + *(int *)(v16 + 28)), sel_ascender);
  v17 = *(void **)(v1 + *(int *)(v16 + 32));
  objc_msgSend(v17, sel_lineHeight);
  objc_msgSend(v17, sel_ascender);
  objc_msgSend(v17, sel_capHeight);
  sub_1BCAB5DB4();
  v18 = sub_1BCAB5D24();
  v19 = sub_1BCAB5B80();
  (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v9, v5, v2);
  v20 = &v9[*(int *)(v7 + 36)];
  *(_QWORD *)v20 = v18;
  v20[8] = v19;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  if (qword_1ED6C5098 != -1)
    swift_once();
  sub_1BCAB5DE4();
  sub_1BCAB5934();
  sub_1BC9964B8((uint64_t)v9, (uint64_t)v12, (uint64_t (*)(_QWORD))sub_1BC9FCEAC);
  v21 = &v12[*(int *)(v47 + 36)];
  v22 = v51;
  *(_OWORD *)v21 = v50;
  *((_OWORD *)v21 + 1) = v22;
  *((_OWORD *)v21 + 2) = v52;
  sub_1BC997208((uint64_t)v9, (uint64_t (*)(_QWORD))sub_1BC9FCEAC);
  v23 = sub_1BCAB5B98();
  sub_1BCAB58EC();
  v25 = v24;
  v27 = v26;
  v29 = v28;
  v31 = v30;
  sub_1BC9964B8((uint64_t)v12, (uint64_t)v15, (uint64_t (*)(_QWORD))sub_1BC9FCE90);
  v32 = &v15[*(int *)(v48 + 36)];
  *v32 = v23;
  *((_QWORD *)v32 + 1) = v25;
  *((_QWORD *)v32 + 2) = v27;
  *((_QWORD *)v32 + 3) = v29;
  *((_QWORD *)v32 + 4) = v31;
  v32[40] = 0;
  sub_1BC997208((uint64_t)v12, (uint64_t (*)(_QWORD))sub_1BC9FCE90);
  v33 = sub_1BCAB5B74();
  if (qword_1ED6C5088 != -1)
    swift_once();
  sub_1BCAB58EC();
  v35 = v34;
  v37 = v36;
  v39 = v38;
  v41 = v40;
  v42 = v49;
  sub_1BC9964B8((uint64_t)v15, v49, (uint64_t (*)(_QWORD))sub_1BC9FCE74);
  sub_1BC9FCE58(0);
  v44 = v42 + *(int *)(v43 + 36);
  *(_BYTE *)v44 = v33;
  *(_QWORD *)(v44 + 8) = v35;
  *(_QWORD *)(v44 + 16) = v37;
  *(_QWORD *)(v44 + 24) = v39;
  *(_QWORD *)(v44 + 32) = v41;
  *(_BYTE *)(v44 + 40) = 0;
  return sub_1BC997208((uint64_t)v15, (uint64_t (*)(_QWORD))sub_1BC9FCE74);
}

uint64_t sub_1BC9F9634@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  id *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  int *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t result;
  uint64_t v29;

  v2 = v1;
  sub_1BC9FCA3C(0);
  MEMORY[0x1E0C80A78](v4);
  v6 = (id *)((char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1BC9FCA58(0);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1BCAB4CE0();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for ActivitySnidgetCurrentValueVisualizationView(0);
  v15 = v1 + *(int *)(v14 + 20);
  v16 = type metadata accessor for ActivitySnidgetCurrentValueVisualizationView.ViewModel(0);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v15 + *(int *)(v16 + 24), v10);
  sub_1BC9964B8(v15 + *(int *)(v16 + 28), (uint64_t)v9, (uint64_t (*)(_QWORD))sub_1BC9FCA58);
  sub_1BC9F98DC();
  v18 = v17;
  sub_1BC9964B8(v2 + *(int *)(v14 + 24), (uint64_t)v6, (uint64_t (*)(_QWORD))sub_1BC9FCA3C);
  v19 = (*(uint64_t (**)(id *, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 48))(v6, 1, v16);
  if (v19 == 1)
  {
    sub_1BC997208((uint64_t)v6, (uint64_t (*)(_QWORD))sub_1BC9FCA3C);
    v20 = 0;
  }
  else
  {
    v21 = v6[1];
    sub_1BC997208((uint64_t)v6, type metadata accessor for ActivitySnidgetCurrentValueVisualizationView.ViewModel);
    sub_1BC9F98DC();
    v20 = v22;

  }
  sub_1BCAB5244();
  sub_1BC996948(&qword_1ED6C4968, (uint64_t (*)(uint64_t))MEMORY[0x1E0D2AF00], MEMORY[0x1E0D2AEF8]);
  *(_QWORD *)a1 = sub_1BCAB59AC();
  *(_QWORD *)(a1 + 8) = v23;
  v24 = (int *)type metadata accessor for ActivitySummarySnidgetValueView();
  v25 = a1 + v24[7];
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56))(v25, 1, 1, v10);
  v26 = a1 + v24[9];
  *(_QWORD *)v26 = 0;
  *(_BYTE *)(v26 + 8) = 1;
  v27 = (_QWORD *)(a1 + v24[10]);
  *v27 = 0xD000000000000017;
  v27[1] = 0x80000001BCAD0DC0;
  *(_BYTE *)(a1 + 16) = 0;
  (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(a1 + v24[6], v13, v10);
  result = sub_1BC9FCA74((uint64_t)v9, v25, (uint64_t (*)(_QWORD))sub_1BC9FCA58);
  *(_QWORD *)(a1 + v24[8]) = v18;
  *(_QWORD *)v26 = v20;
  *(_BYTE *)(v26 + 8) = v19 == 1;
  return result;
}

void sub_1BC9F98DC()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  double v4;
  uint64_t v5;
  char *v6;
  id v7;
  id v8;
  id v9;
  id v10;
  NSObject *v11;
  os_log_type_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v1 = v0;
  swift_getObjectType();
  v2 = sub_1BCAB5514();
  v3 = *(_QWORD *)(v2 - 8);
  *(_QWORD *)&v4 = MEMORY[0x1E0C80A78](v2).n128_u64[0];
  v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = objc_msgSend(v1, sel_activityMoveMode, v4);
  if (v7 == (id)2)
  {
    v8 = objc_msgSend(v1, sel_appleMoveTime);
    goto LABEL_5;
  }
  if (v7 == (id)1)
  {
    v8 = objc_msgSend(v1, sel_activeEnergyBurned);
LABEL_5:
    v9 = v8;
    objc_msgSend(v9, sel__value);

    return;
  }
  sub_1BCAB54F0();
  v10 = v1;
  v11 = sub_1BCAB54FC();
  v12 = sub_1BCAB61A4();
  v13 = v12;
  if (os_log_type_enabled(v11, v12))
  {
    v14 = swift_slowAlloc();
    HIDWORD(v21) = v13;
    v15 = v14;
    v22 = swift_slowAlloc();
    v24 = v22;
    *(_DWORD *)v15 = 136315394;
    v16 = sub_1BCAB68E8();
    v23 = sub_1BC99BD4C(v16, v17, &v24);
    sub_1BCAB63A8();
    swift_bridgeObjectRelease();
    *(_WORD *)(v15 + 12) = 2080;
    objc_msgSend(v10, sel_activityMoveMode);
    v18 = sub_1BCAB6258();
    v23 = sub_1BC99BD4C(v18, v19, &v24);
    sub_1BCAB63A8();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1BC989000, v11, BYTE4(v21), "[%s]: Unhandled move mode for animation: %s", (uint8_t *)v15, 0x16u);
    v20 = v22;
    swift_arrayDestroy();
    MEMORY[0x1BCCFBF5C](v20, -1, -1);
    MEMORY[0x1BCCFBF5C](v15, -1, -1);

  }
  else
  {

  }
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
}

uint64_t sub_1BC9F9B60@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  id *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  id v22;
  id v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  int *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t result;
  uint64_t v32;
  char *v33;

  sub_1BC9FCA3C(0);
  MEMORY[0x1E0C80A78](v3);
  v5 = (id *)((char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1BC9FCA58(0);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1BCAB4CE0();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for ActivitySnidgetCurrentValueVisualizationView(0);
  v14 = v1 + *(int *)(v13 + 20);
  v15 = type metadata accessor for ActivitySnidgetCurrentValueVisualizationView.ViewModel(0);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v14 + *(int *)(v15 + 32), v9);
  v16 = v14 + *(int *)(v15 + 36);
  v33 = v8;
  sub_1BC9964B8(v16, (uint64_t)v8, (uint64_t (*)(_QWORD))sub_1BC9FCA58);
  v17 = objc_msgSend(*(id *)(v14 + 8), sel_appleExerciseTime);
  objc_msgSend(v17, sel__value);
  v19 = v18;

  sub_1BC9964B8(v1 + *(int *)(v13 + 24), (uint64_t)v5, (uint64_t (*)(_QWORD))sub_1BC9FCA3C);
  v20 = (*(uint64_t (**)(id *, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 48))(v5, 1, v15);
  if (v20 == 1)
  {
    sub_1BC997208((uint64_t)v5, (uint64_t (*)(_QWORD))sub_1BC9FCA3C);
    v21 = 0;
  }
  else
  {
    v22 = v5[1];
    sub_1BC997208((uint64_t)v5, type metadata accessor for ActivitySnidgetCurrentValueVisualizationView.ViewModel);
    v23 = objc_msgSend(v22, sel_appleExerciseTime);

    objc_msgSend(v23, (SEL)&DiagramDateAxisMetricsCalculator.base_props);
    v21 = v24;

  }
  v25 = v20 == 1;
  sub_1BCAB5244();
  sub_1BC996948(&qword_1ED6C4968, (uint64_t (*)(uint64_t))MEMORY[0x1E0D2AF00], MEMORY[0x1E0D2AEF8]);
  *(_QWORD *)a1 = sub_1BCAB59AC();
  *(_QWORD *)(a1 + 8) = v26;
  v27 = (int *)type metadata accessor for ActivitySummarySnidgetValueView();
  v28 = a1 + v27[7];
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56))(v28, 1, 1, v9);
  v29 = a1 + v27[9];
  *(_QWORD *)v29 = 0;
  *(_BYTE *)(v29 + 8) = 1;
  v30 = (_QWORD *)(a1 + v27[10]);
  *v30 = 0xD000000000000017;
  v30[1] = 0x80000001BCAD0DC0;
  *(_BYTE *)(a1 + 16) = 1;
  (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(a1 + v27[6], v12, v9);
  result = sub_1BC9FCA74((uint64_t)v33, v28, (uint64_t (*)(_QWORD))sub_1BC9FCA58);
  *(_QWORD *)(a1 + v27[8]) = v19;
  *(_QWORD *)v29 = v21;
  *(_BYTE *)(v29 + 8) = v25;
  return result;
}

uint64_t sub_1BC9F9E5C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  id *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  id v22;
  id v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  int *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t result;
  uint64_t v32;
  char *v33;

  sub_1BC9FCA3C(0);
  MEMORY[0x1E0C80A78](v3);
  v5 = (id *)((char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1BC9FCA58(0);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1BCAB4CE0();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for ActivitySnidgetCurrentValueVisualizationView(0);
  v14 = v1 + *(int *)(v13 + 20);
  v15 = type metadata accessor for ActivitySnidgetCurrentValueVisualizationView.ViewModel(0);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v14 + *(int *)(v15 + 40), v9);
  v16 = v14 + *(int *)(v15 + 44);
  v33 = v8;
  sub_1BC9964B8(v16, (uint64_t)v8, (uint64_t (*)(_QWORD))sub_1BC9FCA58);
  v17 = objc_msgSend(*(id *)(v14 + 8), sel_appleStandHours);
  objc_msgSend(v17, sel__value);
  v19 = v18;

  sub_1BC9964B8(v1 + *(int *)(v13 + 24), (uint64_t)v5, (uint64_t (*)(_QWORD))sub_1BC9FCA3C);
  v20 = (*(uint64_t (**)(id *, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 48))(v5, 1, v15);
  if (v20 == 1)
  {
    sub_1BC997208((uint64_t)v5, (uint64_t (*)(_QWORD))sub_1BC9FCA3C);
    v21 = 0;
  }
  else
  {
    v22 = v5[1];
    sub_1BC997208((uint64_t)v5, type metadata accessor for ActivitySnidgetCurrentValueVisualizationView.ViewModel);
    v23 = objc_msgSend(v22, sel_appleStandHours);

    objc_msgSend(v23, (SEL)&DiagramDateAxisMetricsCalculator.base_props);
    v21 = v24;

  }
  v25 = v20 == 1;
  sub_1BCAB5244();
  sub_1BC996948(&qword_1ED6C4968, (uint64_t (*)(uint64_t))MEMORY[0x1E0D2AF00], MEMORY[0x1E0D2AEF8]);
  *(_QWORD *)a1 = sub_1BCAB59AC();
  *(_QWORD *)(a1 + 8) = v26;
  v27 = (int *)type metadata accessor for ActivitySummarySnidgetValueView();
  v28 = a1 + v27[7];
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56))(v28, 1, 1, v9);
  v29 = a1 + v27[9];
  *(_QWORD *)v29 = 0;
  *(_BYTE *)(v29 + 8) = 1;
  v30 = (_QWORD *)(a1 + v27[10]);
  *v30 = 0xD000000000000017;
  v30[1] = 0x80000001BCAD0DC0;
  *(_BYTE *)(a1 + 16) = 2;
  (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(a1 + v27[6], v12, v9);
  result = sub_1BC9FCA74((uint64_t)v33, v28, (uint64_t (*)(_QWORD))sub_1BC9FCA58);
  *(_QWORD *)(a1 + v27[8]) = v19;
  *(_QWORD *)v29 = v21;
  *(_BYTE *)(v29 + 8) = v25;
  return result;
}

uint64_t sub_1BC9FA15C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  char *v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  id v54;
  uint64_t result;
  id v56;
  char *v57;
  char *v58;
  char *v59;
  char *v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;

  v65 = a2;
  sub_1BC9FCE58(0);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v57 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v57 - v7;
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v57 - v10;
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v57 - v13;
  sub_1BC9FCDA0(0);
  MEMORY[0x1E0C80A78](v15);
  v17 = (char *)&v57 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18);
  v66 = (uint64_t)&v57 - v19;
  v20 = type metadata accessor for ActivitySummarySnidgetValueView();
  MEMORY[0x1E0C80A78](v20);
  v22 = (char *)&v57 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v23);
  v25 = (char *)&v57 - v24;
  MEMORY[0x1E0C80A78](v26);
  v28 = (char *)&v57 - v27;
  MEMORY[0x1E0C80A78](v29);
  v31 = (char *)&v57 - v30;
  MEMORY[0x1E0C80A78](v32);
  v64 = (uint64_t)&v57 - v33;
  sub_1BC9F9634((uint64_t)&v57 - v33);
  v34 = type metadata accessor for ActivitySnidgetCurrentValueVisualizationView(0);
  v62 = (char *)a1 + *(int *)(v34 + 20);
  v63 = v34;
  if ((*v62 & 1) != 0)
  {
    sub_1BC9FCDBC(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56))(v66, 1, 1, v35);
  }
  else
  {
    sub_1BC9F92B4((uint64_t)v14);
    sub_1BC9F9B60((uint64_t)v31);
    v58 = v11;
    sub_1BC9F92B4((uint64_t)v11);
    sub_1BC9F9E5C((uint64_t)v28);
    v61 = v14;
    v57 = v25;
    v59 = v22;
    sub_1BC9964B8((uint64_t)v14, (uint64_t)v8, (uint64_t (*)(_QWORD))sub_1BC9FCE58);
    v60 = v8;
    sub_1BC9964B8((uint64_t)v31, (uint64_t)v25, (uint64_t (*)(_QWORD))type metadata accessor for ActivitySummarySnidgetValueView);
    sub_1BC9964B8((uint64_t)v11, (uint64_t)v5, (uint64_t (*)(_QWORD))sub_1BC9FCE58);
    sub_1BC9964B8((uint64_t)v28, (uint64_t)v22, (uint64_t (*)(_QWORD))type metadata accessor for ActivitySummarySnidgetValueView);
    sub_1BC9964B8((uint64_t)v8, (uint64_t)v17, (uint64_t (*)(_QWORD))sub_1BC9FCE58);
    sub_1BC9FCDD8();
    v37 = v36;
    v38 = (uint64_t)v57;
    sub_1BC9964B8((uint64_t)v57, (uint64_t)&v17[*(int *)(v36 + 48)], (uint64_t (*)(_QWORD))type metadata accessor for ActivitySummarySnidgetValueView);
    sub_1BC9964B8((uint64_t)v5, (uint64_t)&v17[*(int *)(v37 + 64)], (uint64_t (*)(_QWORD))sub_1BC9FCE58);
    v39 = (uint64_t)v59;
    sub_1BC9964B8((uint64_t)v59, (uint64_t)&v17[*(int *)(v37 + 80)], (uint64_t (*)(_QWORD))type metadata accessor for ActivitySummarySnidgetValueView);
    sub_1BC997208((uint64_t)v28, (uint64_t (*)(_QWORD))type metadata accessor for ActivitySummarySnidgetValueView);
    sub_1BC997208((uint64_t)v58, (uint64_t (*)(_QWORD))sub_1BC9FCE58);
    sub_1BC997208((uint64_t)v31, (uint64_t (*)(_QWORD))type metadata accessor for ActivitySummarySnidgetValueView);
    sub_1BC997208((uint64_t)v61, (uint64_t (*)(_QWORD))sub_1BC9FCE58);
    sub_1BC997208(v39, (uint64_t (*)(_QWORD))type metadata accessor for ActivitySummarySnidgetValueView);
    sub_1BC997208((uint64_t)v5, (uint64_t (*)(_QWORD))sub_1BC9FCE58);
    sub_1BC997208(v38, (uint64_t (*)(_QWORD))type metadata accessor for ActivitySummarySnidgetValueView);
    sub_1BC997208((uint64_t)v60, (uint64_t (*)(_QWORD))sub_1BC9FCE58);
    sub_1BC9FCDBC(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 56))(v17, 0, 1, v40);
    sub_1BC9AE330((uint64_t)v17, v66, (uint64_t (*)(_QWORD))sub_1BC9FCDA0);
  }
  v41 = (void *)*((_QWORD *)v62 + 1);
  if (*a1)
  {
    v42 = (char *)a1 + *(int *)(v63 + 36);
    LODWORD(v63) = v42[8];
    v62 = *(char **)v42;
    v43 = v41;
    swift_retain();
    v44 = sub_1BCAB5238();
    v46 = v45;
    swift_release();
    v47 = v64;
    sub_1BC9964B8(v64, (uint64_t)v31, (uint64_t (*)(_QWORD))type metadata accessor for ActivitySummarySnidgetValueView);
    v48 = v66;
    sub_1BC9964B8(v66, (uint64_t)v17, (uint64_t (*)(_QWORD))sub_1BC9FCDA0);
    v49 = v65;
    sub_1BC9964B8((uint64_t)v31, v65, (uint64_t (*)(_QWORD))type metadata accessor for ActivitySummarySnidgetValueView);
    sub_1BC9FCD14();
    v51 = v50;
    sub_1BC9964B8((uint64_t)v17, v49 + *(int *)(v50 + 48), (uint64_t (*)(_QWORD))sub_1BC9FCDA0);
    v52 = v49 + *(int *)(v51 + 64);
    *(_QWORD *)v52 = v62;
    *(_BYTE *)(v52 + 8) = v63;
    v53 = (_QWORD *)(v49 + *(int *)(v51 + 80));
    *v53 = v43;
    v53[1] = v44;
    v53[2] = v46;
    swift_bridgeObjectRetain();
    v54 = v43;
    sub_1BC997208(v48, (uint64_t (*)(_QWORD))sub_1BC9FCDA0);
    sub_1BC997208(v47, (uint64_t (*)(_QWORD))type metadata accessor for ActivitySummarySnidgetValueView);
    swift_bridgeObjectRelease();

    sub_1BC997208((uint64_t)v17, (uint64_t (*)(_QWORD))sub_1BC9FCDA0);
    return sub_1BC997208((uint64_t)v31, (uint64_t (*)(_QWORD))type metadata accessor for ActivitySummarySnidgetValueView);
  }
  else
  {
    sub_1BCAB5244();
    sub_1BC996948(&qword_1ED6C4968, (uint64_t (*)(uint64_t))MEMORY[0x1E0D2AF00], MEMORY[0x1E0D2AEF8]);
    v56 = v41;
    result = sub_1BCAB59A0();
    __break(1u);
  }
  return result;
}

uint64_t sub_1BC9FA684@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  void *v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t (*v40)(_QWORD);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t result;
  id v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v52 = a2;
  sub_1BC9FD030(0);
  v53 = v3;
  MEMORY[0x1E0C80A78](v3);
  v49 = (uint64_t)&v48 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BC9FD1C8();
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v48 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v48 - v9;
  sub_1BC9FD0C4();
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v48 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)&v48 - v15;
  sub_1BCA03158(0, &qword_1ED6C4EC0, (uint64_t (*)(uint64_t))sub_1BC9FCFB0, (uint64_t (*)(uint64_t))sub_1BC9FD030, MEMORY[0x1E0CDB848]);
  v50 = v17;
  MEMORY[0x1E0C80A78](v17);
  v19 = (char *)&v48 - v18;
  sub_1BC9FCFB0(0);
  v51 = v20;
  MEMORY[0x1E0C80A78](v20);
  v22 = (char *)&v48 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for ActivitySummarySnidgetValueView();
  MEMORY[0x1E0C80A78](v23);
  v25 = (char *)&v48 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v26);
  v28 = (char *)&v48 - v27;
  v29 = (char *)a1 + *(int *)(type metadata accessor for ActivitySnidgetCurrentValueVisualizationView(0) + 20);
  if (*v29 != 1)
  {
    *(_QWORD *)v16 = sub_1BCAB5A18();
    *((_QWORD *)v16 + 1) = 0;
    v16[16] = 0;
    sub_1BC9FDA58(0, &qword_1ED6C50A0, sub_1BC9FD13C);
    sub_1BC9FABD0((uint64_t)&v16[*(int *)(v41 + 44)]);
    *(_QWORD *)v10 = sub_1BCAB5A18();
    *((_QWORD *)v10 + 1) = 0;
    v10[16] = 0;
    sub_1BC9FDA58(0, &qword_1EF478EB8, sub_1BC9FD240);
    sub_1BC9FB00C(a1, (uint64_t)&v10[*(int *)(v42 + 44)]);
    sub_1BC9964B8((uint64_t)v16, (uint64_t)v13, (uint64_t (*)(_QWORD))sub_1BC9FD0C4);
    sub_1BC9964B8((uint64_t)v10, (uint64_t)v7, (uint64_t (*)(_QWORD))sub_1BC9FD1C8);
    v43 = v49;
    sub_1BC9964B8((uint64_t)v13, v49, (uint64_t (*)(_QWORD))sub_1BC9FD0C4);
    sub_1BC9FD054(0, &qword_1ED6C4F00, (void (*)(uint64_t))sub_1BC9FD0C4, (void (*)(uint64_t))sub_1BC9FD1C8);
    sub_1BC9964B8((uint64_t)v7, v43 + *(int *)(v44 + 48), (uint64_t (*)(_QWORD))sub_1BC9FD1C8);
    sub_1BC997208((uint64_t)v7, (uint64_t (*)(_QWORD))sub_1BC9FD1C8);
    sub_1BC997208((uint64_t)v13, (uint64_t (*)(_QWORD))sub_1BC9FD0C4);
    sub_1BC9964B8(v43, (uint64_t)v19, (uint64_t (*)(_QWORD))sub_1BC9FD030);
    swift_storeEnumTagMultiPayload();
    v45 = MEMORY[0x1E0CE0680];
    sub_1BC996948(&qword_1ED6C5008, (uint64_t (*)(uint64_t))sub_1BC9FCFB0, MEMORY[0x1E0CE0680]);
    sub_1BC996948(&qword_1ED6C4F68, (uint64_t (*)(uint64_t))sub_1BC9FD030, v45);
    sub_1BCAB5B14();
    sub_1BC997208(v43, (uint64_t (*)(_QWORD))sub_1BC9FD030);
    sub_1BC997208((uint64_t)v10, (uint64_t (*)(_QWORD))sub_1BC9FD1C8);
    v39 = (uint64_t)v16;
    v40 = (uint64_t (*)(_QWORD))sub_1BC9FD0C4;
    return sub_1BC997208(v39, v40);
  }
  sub_1BC9F9634((uint64_t)v28);
  v30 = (void *)*((_QWORD *)v29 + 1);
  if (*a1)
  {
    v31 = v30;
    swift_retain();
    v32 = sub_1BCAB5238();
    v34 = v33;
    swift_release();
    sub_1BC9964B8((uint64_t)v28, (uint64_t)v25, (uint64_t (*)(_QWORD))type metadata accessor for ActivitySummarySnidgetValueView);
    sub_1BC9964B8((uint64_t)v25, (uint64_t)v22, (uint64_t (*)(_QWORD))type metadata accessor for ActivitySummarySnidgetValueView);
    sub_1BC9FCFCC();
    v36 = &v22[*(int *)(v35 + 48)];
    *(_QWORD *)v36 = v31;
    *((_QWORD *)v36 + 1) = v32;
    *((_QWORD *)v36 + 2) = v34;
    v37 = v31;
    swift_bridgeObjectRetain();
    sub_1BC997208((uint64_t)v25, (uint64_t (*)(_QWORD))type metadata accessor for ActivitySummarySnidgetValueView);
    sub_1BC9964B8((uint64_t)v22, (uint64_t)v19, (uint64_t (*)(_QWORD))sub_1BC9FCFB0);
    swift_storeEnumTagMultiPayload();
    v38 = MEMORY[0x1E0CE0680];
    sub_1BC996948(&qword_1ED6C5008, (uint64_t (*)(uint64_t))sub_1BC9FCFB0, MEMORY[0x1E0CE0680]);
    sub_1BC996948(&qword_1ED6C4F68, (uint64_t (*)(uint64_t))sub_1BC9FD030, v38);
    sub_1BCAB5B14();
    sub_1BC997208((uint64_t)v22, (uint64_t (*)(_QWORD))sub_1BC9FCFB0);
    swift_bridgeObjectRelease();

    v39 = (uint64_t)v28;
    v40 = (uint64_t (*)(_QWORD))type metadata accessor for ActivitySummarySnidgetValueView;
    return sub_1BC997208(v39, v40);
  }
  sub_1BCAB5244();
  sub_1BC996948(&qword_1ED6C4968, (uint64_t (*)(uint64_t))MEMORY[0x1E0D2AF00], MEMORY[0x1E0D2AEF8]);
  v47 = v30;
  result = sub_1BCAB59A0();
  __break(1u);
  return result;
}

uint64_t sub_1BC9FABD0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;

  sub_1BC9FCE58(0);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v23 - v6;
  v8 = type metadata accessor for ActivitySummarySnidgetValueView();
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v23 - v12;
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)&v23 - v15;
  MEMORY[0x1E0C80A78](v17);
  v19 = (char *)&v23 - v18;
  sub_1BC9F9634((uint64_t)&v23 - v18);
  sub_1BC9F92B4((uint64_t)v7);
  sub_1BC9F9B60((uint64_t)v16);
  sub_1BC9964B8((uint64_t)v19, (uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for ActivitySummarySnidgetValueView);
  sub_1BC9964B8((uint64_t)v7, (uint64_t)v4, (uint64_t (*)(_QWORD))sub_1BC9FCE58);
  sub_1BC9964B8((uint64_t)v16, (uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for ActivitySummarySnidgetValueView);
  sub_1BC9964B8((uint64_t)v13, a1, (uint64_t (*)(_QWORD))type metadata accessor for ActivitySummarySnidgetValueView);
  sub_1BC9FD158();
  v21 = v20;
  sub_1BC9964B8((uint64_t)v4, a1 + *(int *)(v20 + 48), (uint64_t (*)(_QWORD))sub_1BC9FCE58);
  sub_1BC9964B8((uint64_t)v10, a1 + *(int *)(v21 + 64), (uint64_t (*)(_QWORD))type metadata accessor for ActivitySummarySnidgetValueView);
  sub_1BC997208((uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for ActivitySummarySnidgetValueView);
  sub_1BC997208((uint64_t)v7, (uint64_t (*)(_QWORD))sub_1BC9FCE58);
  sub_1BC997208((uint64_t)v19, (uint64_t (*)(_QWORD))type metadata accessor for ActivitySummarySnidgetValueView);
  sub_1BC997208((uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for ActivitySummarySnidgetValueView);
  sub_1BC997208((uint64_t)v4, (uint64_t (*)(_QWORD))sub_1BC9FCE58);
  return sub_1BC997208((uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for ActivitySummarySnidgetValueView);
}

uint64_t sub_1BC9FADD0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;

  sub_1BC9FD1C8();
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v26 - v8;
  v10 = type metadata accessor for ActivitySummarySnidgetValueView();
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v26 - v14;
  MEMORY[0x1E0C80A78](v16);
  v18 = (char *)&v26 - v17;
  MEMORY[0x1E0C80A78](v19);
  v21 = (char *)&v26 - v20;
  sub_1BC9F9634((uint64_t)&v26 - v20);
  sub_1BC9F9B60((uint64_t)v18);
  *(_QWORD *)v9 = sub_1BCAB5A18();
  *((_QWORD *)v9 + 1) = 0;
  v9[16] = 0;
  sub_1BC9FDA58(0, &qword_1EF478EB8, sub_1BC9FD240);
  sub_1BC9FB00C(a1, (uint64_t)&v9[*(int *)(v22 + 44)]);
  sub_1BC9964B8((uint64_t)v21, (uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for ActivitySummarySnidgetValueView);
  sub_1BC9964B8((uint64_t)v18, (uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for ActivitySummarySnidgetValueView);
  sub_1BC9964B8((uint64_t)v9, (uint64_t)v6, (uint64_t (*)(_QWORD))sub_1BC9FD1C8);
  sub_1BC9964B8((uint64_t)v15, a2, (uint64_t (*)(_QWORD))type metadata accessor for ActivitySummarySnidgetValueView);
  sub_1BC9FD4B0();
  v24 = v23;
  sub_1BC9964B8((uint64_t)v12, a2 + *(int *)(v23 + 48), (uint64_t (*)(_QWORD))type metadata accessor for ActivitySummarySnidgetValueView);
  sub_1BC9964B8((uint64_t)v6, a2 + *(int *)(v24 + 64), (uint64_t (*)(_QWORD))sub_1BC9FD1C8);
  sub_1BC997208((uint64_t)v9, (uint64_t (*)(_QWORD))sub_1BC9FD1C8);
  sub_1BC997208((uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for ActivitySummarySnidgetValueView);
  sub_1BC997208((uint64_t)v21, (uint64_t (*)(_QWORD))type metadata accessor for ActivitySummarySnidgetValueView);
  sub_1BC997208((uint64_t)v6, (uint64_t (*)(_QWORD))sub_1BC9FD1C8);
  sub_1BC997208((uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for ActivitySummarySnidgetValueView);
  return sub_1BC997208((uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for ActivitySummarySnidgetValueView);
}

uint64_t sub_1BC9FB00C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  void *v11;
  char *v12;
  char v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  id v22;
  uint64_t result;
  id v24;
  uint64_t v25;

  v4 = type metadata accessor for ActivitySummarySnidgetValueView();
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v25 - v8;
  sub_1BC9F9E5C((uint64_t)&v25 - v8);
  v10 = type metadata accessor for ActivitySnidgetCurrentValueVisualizationView(0);
  v11 = *(void **)((char *)a1 + *(int *)(v10 + 20) + 8);
  if (*a1)
  {
    v12 = (char *)a1 + *(int *)(v10 + 36);
    v13 = v12[8];
    v14 = *(_QWORD *)v12;
    v15 = v11;
    swift_retain();
    v16 = sub_1BCAB5238();
    v18 = v17;
    swift_release();
    sub_1BC9964B8((uint64_t)v9, (uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for ActivitySummarySnidgetValueView);
    sub_1BC9964B8((uint64_t)v6, a2, (uint64_t (*)(_QWORD))type metadata accessor for ActivitySummarySnidgetValueView);
    sub_1BC9FD780(0, &qword_1ED6C4FB0, (void (*)(uint64_t))type metadata accessor for ActivitySummarySnidgetValueView);
    v20 = a2 + *(int *)(v19 + 48);
    *(_QWORD *)v20 = v14;
    *(_BYTE *)(v20 + 8) = v13;
    v21 = (_QWORD *)(a2 + *(int *)(v19 + 64));
    *v21 = v15;
    v21[1] = v16;
    v21[2] = v18;
    swift_bridgeObjectRetain();
    v22 = v15;
    sub_1BC997208((uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for ActivitySummarySnidgetValueView);
    swift_bridgeObjectRelease();

    return sub_1BC997208((uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for ActivitySummarySnidgetValueView);
  }
  else
  {
    sub_1BCAB5244();
    sub_1BC996948(&qword_1ED6C4968, (uint64_t (*)(uint64_t))MEMORY[0x1E0D2AF00], MEMORY[0x1E0D2AEF8]);
    v24 = v11;
    result = sub_1BCAB59A0();
    __break(1u);
  }
  return result;
}

uint64_t sub_1BC9FB1D8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  void *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  id v32;
  uint64_t result;
  id v34;
  uint64_t v35;
  char *v36;

  v4 = type metadata accessor for ActivitySummarySnidgetValueView();
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v35 - v8;
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v35 - v11;
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v35 - v14;
  MEMORY[0x1E0C80A78](v16);
  v18 = (char *)&v35 - v17;
  MEMORY[0x1E0C80A78](v19);
  v21 = (char *)&v35 - v20;
  sub_1BC9F9634((uint64_t)&v35 - v20);
  sub_1BC9F9B60((uint64_t)v18);
  sub_1BC9F9E5C((uint64_t)v15);
  v22 = *(void **)((char *)a1
                 + *(int *)(type metadata accessor for ActivitySnidgetCurrentValueVisualizationView(0) + 20)
                 + 8);
  if (*a1)
  {
    v23 = v22;
    swift_retain();
    v35 = sub_1BCAB5238();
    v25 = v24;
    swift_release();
    sub_1BC9964B8((uint64_t)v21, (uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for ActivitySummarySnidgetValueView);
    sub_1BC9964B8((uint64_t)v18, (uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for ActivitySummarySnidgetValueView);
    sub_1BC9964B8((uint64_t)v15, (uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for ActivitySummarySnidgetValueView);
    sub_1BC9964B8((uint64_t)v12, a2, (uint64_t (*)(_QWORD))type metadata accessor for ActivitySummarySnidgetValueView);
    sub_1BC9FD5B4();
    v36 = v12;
    v26 = (uint64_t)v9;
    v27 = (uint64_t)v6;
    v29 = v28;
    sub_1BC9964B8(v26, a2 + *(int *)(v28 + 48), (uint64_t (*)(_QWORD))type metadata accessor for ActivitySummarySnidgetValueView);
    sub_1BC9964B8(v27, a2 + *(int *)(v29 + 64), (uint64_t (*)(_QWORD))type metadata accessor for ActivitySummarySnidgetValueView);
    v30 = (_QWORD *)(a2 + *(int *)(v29 + 80));
    v31 = v35;
    *v30 = v23;
    v30[1] = v31;
    v30[2] = v25;
    swift_bridgeObjectRetain();
    v32 = v23;
    sub_1BC997208((uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for ActivitySummarySnidgetValueView);
    sub_1BC997208((uint64_t)v18, (uint64_t (*)(_QWORD))type metadata accessor for ActivitySummarySnidgetValueView);
    sub_1BC997208((uint64_t)v21, (uint64_t (*)(_QWORD))type metadata accessor for ActivitySummarySnidgetValueView);
    swift_bridgeObjectRelease();

    sub_1BC997208(v27, (uint64_t (*)(_QWORD))type metadata accessor for ActivitySummarySnidgetValueView);
    sub_1BC997208(v26, (uint64_t (*)(_QWORD))type metadata accessor for ActivitySummarySnidgetValueView);
    return sub_1BC997208((uint64_t)v36, (uint64_t (*)(_QWORD))type metadata accessor for ActivitySummarySnidgetValueView);
  }
  else
  {
    sub_1BCAB5244();
    sub_1BC996948(&qword_1ED6C4968, (uint64_t (*)(uint64_t))MEMORY[0x1E0D2AF00], MEMORY[0x1E0D2AEF8]);
    v34 = v22;
    result = sub_1BCAB59A0();
    __break(1u);
  }
  return result;
}

uint64_t sub_1BC9FB488@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  void (*v29)(char *, char *, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(char *, uint64_t, uint64_t);
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t result;
  _QWORD v70[2];
  char *v71;
  uint64_t v72;
  void (*v73)(char *, char *, uint64_t);
  uint64_t v74;
  char *v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char v95;
  uint64_t v96;
  __int16 v97;

  v89 = a2;
  sub_1BC9FCA58(0);
  MEMORY[0x1E0C80A78](v3);
  v78 = (uint64_t)v70 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BC9FD970(0);
  MEMORY[0x1E0C80A78](v5);
  v88 = (uint64_t)v70 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v87 = (uint64_t)v70 - v8;
  v9 = sub_1BCAB4CE0();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v80 = (char *)v70 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)v70 - v13;
  sub_1BC9FD8EC();
  v82 = *(_QWORD *)(v15 - 8);
  v83 = v15;
  MEMORY[0x1E0C80A78](v15);
  v85 = (uint64_t)v70 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17);
  v75 = (char *)v70 - v18;
  MEMORY[0x1E0C80A78](v19);
  v74 = (uint64_t)v70 - v20;
  MEMORY[0x1E0C80A78](v21);
  v23 = (char *)v70 - v22;
  MEMORY[0x1E0C80A78](v24);
  v84 = (uint64_t)v70 - v25;
  v79 = type metadata accessor for ActivitySnidgetCurrentValueVisualizationView(0);
  v26 = (char *)a1 + *(int *)(v79 + 20);
  v76 = type metadata accessor for ActivitySnidgetCurrentValueVisualizationView.ViewModel(0);
  v27 = *(int *)(v76 + 52);
  v77 = v26;
  v28 = &v26[v27];
  v90 = v10;
  v29 = *(void (**)(char *, char *, uint64_t))(v10 + 16);
  v81 = v9;
  v73 = v29;
  v29(v14, v28, v9);
  v30 = sub_1BCAB5C58();
  v32 = v31;
  v34 = v33;
  v93 = v30;
  v94 = v31;
  v95 = v33 & 1;
  v96 = v35;
  v97 = 256;
  v91 = 0;
  v92 = 0xE000000000000000;
  sub_1BCAB64C8();
  v86 = a1;
  if (*a1)
  {
    swift_retain();
    sub_1BCAB5238();
    v37 = v36;
    swift_release();
    v71 = v14;
    if (!v37)
      sub_1BCAB5F04();
    sub_1BCAB5F70();
    swift_bridgeObjectRelease();
    sub_1BCAB5F70();
    sub_1BC9B75E4(0, &qword_1ED6C4E98, MEMORY[0x1E0CDDD78], MEMORY[0x1E0CDA208], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CD9BF0]);
    v39 = v38;
    v40 = sub_1BCA03054();
    v72 = v39;
    v70[1] = v40;
    sub_1BCAB5CDC();
    swift_bridgeObjectRelease();
    sub_1BC9C15C0(v30, v32, v34 & 1);
    swift_bridgeObjectRelease();
    v41 = (uint64_t)v23;
    v42 = v84;
    sub_1BC9AE330(v41, v84, (uint64_t (*)(_QWORD))sub_1BC9FD8EC);
    v43 = v78;
    sub_1BC9964B8((uint64_t)&v77[*(int *)(v76 + 56)], v78, (uint64_t (*)(_QWORD))sub_1BC9FCA58);
    v44 = v90;
    v45 = v81;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v90 + 48))(v43, 1, v81) == 1)
    {
      sub_1BC997208(v43, (uint64_t (*)(_QWORD))sub_1BC9FCA58);
      v46 = 1;
      v47 = v87;
    }
    else
    {
      v48 = *(void (**)(char *, uint64_t, uint64_t))(v44 + 32);
      v49 = v80;
      v48(v80, v43, v45);
      v73(v71, v49, v45);
      v50 = sub_1BCAB5C58();
      v52 = v51;
      v54 = v53;
      v93 = v50;
      v94 = v51;
      v95 = v53 & 1;
      v96 = v55;
      v97 = 256;
      v91 = 0;
      v92 = 0xE000000000000000;
      sub_1BCAB64C8();
      swift_retain();
      sub_1BCAB5238();
      v57 = v56;
      swift_release();
      if (!v57)
        sub_1BCAB5F04();
      sub_1BCAB5F70();
      swift_bridgeObjectRelease();
      sub_1BCAB5F70();
      v58 = (uint64_t)v75;
      sub_1BCAB5CDC();
      swift_bridgeObjectRelease();
      sub_1BC9C15C0(v50, v52, v54 & 1);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v90 + 8))(v80, v45);
      v59 = v74;
      sub_1BC9AE330(v58, v74, (uint64_t (*)(_QWORD))sub_1BC9FD8EC);
      v47 = v87;
      sub_1BC9AE330(v59, v87, (uint64_t (*)(_QWORD))sub_1BC9FD8EC);
      v46 = 0;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v82 + 56))(v47, v46, 1, v83);
    v60 = v85;
    v61 = (char *)v86 + *(int *)(v79 + 36);
    v62 = *(_QWORD *)v61;
    v63 = v61[8];
    sub_1BC9964B8(v42, v85, (uint64_t (*)(_QWORD))sub_1BC9FD8EC);
    v64 = v88;
    sub_1BC9964B8(v47, v88, (uint64_t (*)(_QWORD))sub_1BC9FD970);
    v65 = v89;
    sub_1BC9964B8(v60, v89, (uint64_t (*)(_QWORD))sub_1BC9FD8EC);
    sub_1BC9FD878();
    v67 = v66;
    sub_1BC9964B8(v64, v65 + *(int *)(v66 + 48), (uint64_t (*)(_QWORD))sub_1BC9FD970);
    v68 = v65 + *(int *)(v67 + 64);
    *(_QWORD *)v68 = v62;
    *(_BYTE *)(v68 + 8) = v63;
    sub_1BC997208(v47, (uint64_t (*)(_QWORD))sub_1BC9FD970);
    sub_1BC997208(v42, (uint64_t (*)(_QWORD))sub_1BC9FD8EC);
    sub_1BC997208(v64, (uint64_t (*)(_QWORD))sub_1BC9FD970);
    return sub_1BC997208(v60, (uint64_t (*)(_QWORD))sub_1BC9FD8EC);
  }
  else
  {
    sub_1BCAB5244();
    sub_1BC996948(&qword_1ED6C4968, (uint64_t (*)(uint64_t))MEMORY[0x1E0D2AF00], MEMORY[0x1E0D2AEF8]);
    result = sub_1BCAB59A0();
    __break(1u);
  }
  return result;
}

void ActivitySnidgetCurrentValueVisualizationView.body.getter(uint64_t a1@<X8>)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t (*v6)(uint64_t);
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  id v16;
  void *v17;
  id v18;
  unsigned int v19;
  unsigned __int8 v20;
  uint64_t v21;
  void (*v22)();
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v2 = v1;
  v25 = a1;
  sub_1BC9FCB84();
  v26 = v3;
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BCA03158(0, &qword_1ED6C4EB8, (uint64_t (*)(uint64_t))sub_1BC9FD6EC, v6, MEMORY[0x1E0CDB848]);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v25 - v8;
  sub_1BC9FD6EC();
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for ActivitySnidgetCurrentValueVisualizationView(0);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = objc_msgSend((id)objc_opt_self(), sel_sharedBehavior, v25, v26);
  if (v16)
  {
    v17 = v16;
    v18 = objc_msgSend(v16, sel_features);

    if (v18)
    {
      v19 = objc_msgSend(v18, sel_pauseRings);

      sub_1BC9964B8((uint64_t)v2, (uint64_t)v15, type metadata accessor for ActivitySnidgetCurrentValueVisualizationView);
      if (v19)
      {
        v20 = objc_msgSend(*(id *)&v15[*(int *)(v13 + 20) + 8], sel_isPaused);
        sub_1BC997208((uint64_t)v15, type metadata accessor for ActivitySnidgetCurrentValueVisualizationView);
        if ((v20 & 1) != 0)
        {
          *(_QWORD *)v12 = sub_1BCAB5A30();
          *((_QWORD *)v12 + 1) = 0;
          v12[16] = 1;
          sub_1BC9FDA58(0, (unint64_t *)&unk_1EF478E60, sub_1BC9FD764);
          sub_1BC9FBEB0(v2, (uint64_t)&v12[*(int *)(v21 + 44)]);
          v22 = sub_1BC9FD6EC;
          sub_1BC9964B8((uint64_t)v12, (uint64_t)v9, (uint64_t (*)(_QWORD))sub_1BC9FD6EC);
          swift_storeEnumTagMultiPayload();
          sub_1BC996948(&qword_1ED6C4F20, (uint64_t (*)(uint64_t))sub_1BC9FD6EC, MEMORY[0x1E0CDFB10]);
          sub_1BC996948(&qword_1ED6C4E70, (uint64_t (*)(uint64_t))sub_1BC9FCB84, MEMORY[0x1E0CD8CC8]);
          sub_1BCAB5B14();
          v23 = (uint64_t)v12;
LABEL_8:
          sub_1BC997208(v23, (uint64_t (*)(_QWORD))v22);
          return;
        }
      }
      else
      {
        sub_1BC997208((uint64_t)v15, type metadata accessor for ActivitySnidgetCurrentValueVisualizationView);
      }
      *v5 = sub_1BCAB5B68();
      sub_1BC9FD98C();
      sub_1BC9FC0BC(v2, (uint64_t)&v5[*(int *)(v24 + 44)]);
      v22 = sub_1BC9FCB84;
      sub_1BC9964B8((uint64_t)v5, (uint64_t)v9, (uint64_t (*)(_QWORD))sub_1BC9FCB84);
      swift_storeEnumTagMultiPayload();
      sub_1BC996948(&qword_1ED6C4F20, (uint64_t (*)(uint64_t))sub_1BC9FD6EC, MEMORY[0x1E0CDFB10]);
      sub_1BC996948(&qword_1ED6C4E70, (uint64_t (*)(uint64_t))sub_1BC9FCB84, MEMORY[0x1E0CD8CC8]);
      sub_1BCAB5B14();
      v23 = (uint64_t)v5;
      goto LABEL_8;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t sub_1BC9FBEB0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  char *v13;
  char v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  id v23;
  uint64_t result;
  id v25;
  uint64_t v26;

  sub_1BC9FD7E4();
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v26 - v8;
  *(_QWORD *)v9 = sub_1BCAB5A90();
  *((_QWORD *)v9 + 1) = 0;
  v9[16] = 1;
  sub_1BC9FDA58(0, &qword_1EF478E98, sub_1BC9FD85C);
  sub_1BC9FB488(a1, (uint64_t)&v9[*(int *)(v10 + 44)]);
  v11 = type metadata accessor for ActivitySnidgetCurrentValueVisualizationView(0);
  v12 = *(void **)((char *)a1 + *(int *)(v11 + 20) + 8);
  if (*a1)
  {
    v13 = (char *)a1 + *(int *)(v11 + 36);
    v14 = v13[8];
    v15 = *(_QWORD *)v13;
    v16 = v12;
    swift_retain();
    v17 = sub_1BCAB5238();
    v19 = v18;
    swift_release();
    sub_1BC9964B8((uint64_t)v9, (uint64_t)v6, (uint64_t (*)(_QWORD))sub_1BC9FD7E4);
    sub_1BC9964B8((uint64_t)v6, a2, (uint64_t (*)(_QWORD))sub_1BC9FD7E4);
    sub_1BC9FD780(0, &qword_1ED6C4F40, (void (*)(uint64_t))sub_1BC9FD7E4);
    v21 = a2 + *(int *)(v20 + 48);
    *(_QWORD *)v21 = v15;
    *(_BYTE *)(v21 + 8) = v14;
    v22 = (_QWORD *)(a2 + *(int *)(v20 + 64));
    *v22 = v16;
    v22[1] = v17;
    v22[2] = v19;
    swift_bridgeObjectRetain();
    v23 = v16;
    sub_1BC997208((uint64_t)v9, (uint64_t (*)(_QWORD))sub_1BC9FD7E4);
    swift_bridgeObjectRelease();

    return sub_1BC997208((uint64_t)v6, (uint64_t (*)(_QWORD))sub_1BC9FD7E4);
  }
  else
  {
    sub_1BCAB5244();
    sub_1BC996948(&qword_1ED6C4968, (uint64_t (*)(uint64_t))MEMORY[0x1E0D2AF00], MEMORY[0x1E0D2AEF8]);
    v25 = v12;
    result = sub_1BCAB59A0();
    __break(1u);
  }
  return result;
}

uint64_t sub_1BC9FC0BC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t (*v40)(_QWORD);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  v60 = a2;
  sub_1BC9FD370(0);
  v61 = v3;
  MEMORY[0x1E0C80A78](v3);
  v56 = (uint64_t)&v52 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BC9FD520();
  MEMORY[0x1E0C80A78](v5);
  v55 = (uint64_t)&v52 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v52 - v8;
  sub_1BC9FD41C();
  MEMORY[0x1E0C80A78](v10);
  v54 = (uint64_t)&v52 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v52 - v13;
  sub_1BCA03158(0, &qword_1ED6C4EC8, (uint64_t (*)(uint64_t))sub_1BC9FCC04, (uint64_t (*)(uint64_t))sub_1BC9FD370, MEMORY[0x1E0CDB848]);
  v57 = v15;
  MEMORY[0x1E0C80A78](v15);
  v59 = (uint64_t)&v52 - v16;
  sub_1BC9FCC04(0);
  v58 = v17;
  MEMORY[0x1E0C80A78](v17);
  v19 = (char *)&v52 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BC9FCF30();
  MEMORY[0x1E0C80A78](v20);
  v22 = (char *)&v52 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v23);
  v25 = (char *)&v52 - v24;
  sub_1BC9FCC80();
  MEMORY[0x1E0C80A78](v26);
  v28 = (char *)&v52 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v29);
  v31 = (char *)&v52 - v30;
  v32 = *((unsigned __int8 *)a1
        + *(int *)(type metadata accessor for ActivitySnidgetCurrentValueVisualizationView(0) + 20));
  *(_QWORD *)v31 = sub_1BCAB5A18();
  *((_QWORD *)v31 + 1) = 0;
  v31[16] = 0;
  sub_1BC9FDA58(0, &qword_1ED6C4E80, sub_1BC9FCCF8);
  sub_1BC9FA15C(a1, (uint64_t)&v31[*(int *)(v33 + 44)]);
  v34 = sub_1BCAB5A90();
  if (v32 == 1)
  {
    if (qword_1ED6C4998 != -1)
      swift_once();
    v35 = qword_1ED6C4990;
    *(_QWORD *)v25 = v34;
    *((_QWORD *)v25 + 1) = v35;
    v25[16] = 0;
    sub_1BCA030D4();
    sub_1BC9FA684(a1, (uint64_t)&v25[*(int *)(v36 + 44)]);
    sub_1BC9964B8((uint64_t)v31, (uint64_t)v28, (uint64_t (*)(_QWORD))sub_1BC9FCC80);
    sub_1BC9964B8((uint64_t)v25, (uint64_t)v22, (uint64_t (*)(_QWORD))sub_1BC9FCF30);
    sub_1BC9964B8((uint64_t)v28, (uint64_t)v19, (uint64_t (*)(_QWORD))sub_1BC9FCC80);
    sub_1BC9FD054(0, &qword_1ED6C4F18, (void (*)(uint64_t))sub_1BC9FCC80, (void (*)(uint64_t))sub_1BC9FCF30);
    sub_1BC9964B8((uint64_t)v22, (uint64_t)&v19[*(int *)(v37 + 48)], (uint64_t (*)(_QWORD))sub_1BC9FCF30);
    sub_1BC997208((uint64_t)v22, (uint64_t (*)(_QWORD))sub_1BC9FCF30);
    sub_1BC997208((uint64_t)v28, (uint64_t (*)(_QWORD))sub_1BC9FCC80);
    sub_1BC9964B8((uint64_t)v19, v59, (uint64_t (*)(_QWORD))sub_1BC9FCC04);
    swift_storeEnumTagMultiPayload();
    v38 = MEMORY[0x1E0CE0680];
    sub_1BC996948(&qword_1ED6C4F88, (uint64_t (*)(uint64_t))sub_1BC9FCC04, MEMORY[0x1E0CE0680]);
    sub_1BC996948(&qword_1ED6C4F78, (uint64_t (*)(uint64_t))sub_1BC9FD370, v38);
    sub_1BCAB5B14();
    v39 = (uint64_t)v19;
    v40 = (uint64_t (*)(_QWORD))sub_1BC9FCC04;
  }
  else
  {
    if (qword_1ED6C4998 != -1)
      swift_once();
    v41 = qword_1ED6C4990;
    *(_QWORD *)v25 = v34;
    *((_QWORD *)v25 + 1) = v41;
    v25[16] = 0;
    sub_1BCA030D4();
    sub_1BC9FA684(a1, (uint64_t)&v25[*(int *)(v42 + 44)]);
    *(_QWORD *)v14 = sub_1BCAB5A90();
    *((_QWORD *)v14 + 1) = v41;
    v14[16] = 0;
    sub_1BC9FDA58(0, &qword_1EF478EA8, sub_1BC9FD494);
    sub_1BC9FADD0(a1, (uint64_t)&v14[*(int *)(v43 + 44)]);
    *(_QWORD *)v9 = sub_1BCAB5A90();
    *((_QWORD *)v9 + 1) = v41;
    v9[16] = 0;
    sub_1BC9FDA58(0, &qword_1EF478EB0, sub_1BC9FD598);
    sub_1BC9FB1D8(a1, (uint64_t)&v9[*(int *)(v44 + 44)]);
    sub_1BC9964B8((uint64_t)v31, (uint64_t)v28, (uint64_t (*)(_QWORD))sub_1BC9FCC80);
    v52 = v14;
    sub_1BC9964B8((uint64_t)v25, (uint64_t)v22, (uint64_t (*)(_QWORD))sub_1BC9FCF30);
    v45 = v54;
    v53 = v9;
    sub_1BC9964B8((uint64_t)v14, v54, (uint64_t (*)(_QWORD))sub_1BC9FD41C);
    v46 = v55;
    sub_1BC9964B8((uint64_t)v9, v55, (uint64_t (*)(_QWORD))sub_1BC9FD520);
    v47 = v56;
    sub_1BC9964B8((uint64_t)v28, v56, (uint64_t (*)(_QWORD))sub_1BC9FCC80);
    sub_1BC9FD38C();
    v49 = v48;
    sub_1BC9964B8((uint64_t)v22, v47 + *(int *)(v48 + 48), (uint64_t (*)(_QWORD))sub_1BC9FCF30);
    sub_1BC9964B8(v45, v47 + *(int *)(v49 + 64), (uint64_t (*)(_QWORD))sub_1BC9FD41C);
    sub_1BC9964B8(v46, v47 + *(int *)(v49 + 80), (uint64_t (*)(_QWORD))sub_1BC9FD520);
    sub_1BC997208(v46, (uint64_t (*)(_QWORD))sub_1BC9FD520);
    sub_1BC997208(v45, (uint64_t (*)(_QWORD))sub_1BC9FD41C);
    sub_1BC997208((uint64_t)v22, (uint64_t (*)(_QWORD))sub_1BC9FCF30);
    sub_1BC997208((uint64_t)v28, (uint64_t (*)(_QWORD))sub_1BC9FCC80);
    sub_1BC9964B8(v47, v59, (uint64_t (*)(_QWORD))sub_1BC9FD370);
    swift_storeEnumTagMultiPayload();
    v50 = MEMORY[0x1E0CE0680];
    sub_1BC996948(&qword_1ED6C4F88, (uint64_t (*)(uint64_t))sub_1BC9FCC04, MEMORY[0x1E0CE0680]);
    sub_1BC996948(&qword_1ED6C4F78, (uint64_t (*)(uint64_t))sub_1BC9FD370, v50);
    sub_1BCAB5B14();
    sub_1BC997208(v47, (uint64_t (*)(_QWORD))sub_1BC9FD370);
    sub_1BC997208((uint64_t)v53, (uint64_t (*)(_QWORD))sub_1BC9FD520);
    v39 = (uint64_t)v52;
    v40 = (uint64_t (*)(_QWORD))sub_1BC9FD41C;
  }
  sub_1BC997208(v39, v40);
  sub_1BC997208((uint64_t)v25, (uint64_t (*)(_QWORD))sub_1BC9FCF30);
  return sub_1BC997208((uint64_t)v31, (uint64_t (*)(_QWORD))sub_1BC9FCC80);
}

uint64_t type metadata accessor for ActivitySummarySnidgetView.ActionHandlerData(uint64_t a1)
{
  return sub_1BC9B359C(a1, (uint64_t *)&unk_1ED6C6598);
}

void sub_1BC9FC798(uint64_t a1)
{
  sub_1BC998AB0(a1, &qword_1ED6C4B40, (uint64_t (*)(uint64_t))MEMORY[0x1E0D2A918], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
}

void sub_1BC9FC7B4(uint64_t a1)
{
  sub_1BC998AB0(a1, &qword_1ED6C61E8, (uint64_t (*)(uint64_t))MEMORY[0x1E0D2B7D0], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
}

uint64_t type metadata accessor for ActivitySummarySnidgetView(uint64_t a1)
{
  return sub_1BC9B359C(a1, (uint64_t *)&unk_1ED6C61C8);
}

void sub_1BC9FC7E4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED6C4B08)
  {
    sub_1BC9FC85C(255);
    sub_1BC996948(&qword_1ED6C4B10, (uint64_t (*)(uint64_t))sub_1BC9FC85C, MEMORY[0x1E0CE0680]);
    v0 = sub_1BCAB5DA8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED6C4B08);
  }
}

void sub_1BC9FC85C(uint64_t a1)
{
  sub_1BC998AB0(a1, &qword_1ED6C4B18, (uint64_t (*)(uint64_t))sub_1BC9FC878, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE0648]);
}

void sub_1BC9FC878()
{
  unint64_t TupleTypeMetadata3;
  uint64_t v1;

  if (!qword_1ED6C4988)
  {
    sub_1BCAB52B0();
    sub_1BC9B75E4(255, &qword_1ED6C4AA8, MEMORY[0x1E0CDFC10], MEMORY[0x1E0CDA240], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CD9BF0]);
    sub_1BC9FC91C();
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1)
      atomic_store(TupleTypeMetadata3, (unint64_t *)&qword_1ED6C4988);
  }
}

void sub_1BC9FC91C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED6C4978)
  {
    type metadata accessor for ActivitySnidgetCurrentValueVisualizationView(255);
    sub_1BC996948(&qword_1ED6C62D0, type metadata accessor for ActivitySnidgetCurrentValueVisualizationView, (uint64_t)&protocol conformance descriptor for ActivitySnidgetCurrentValueVisualizationView);
    v0 = sub_1BCAB5280();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED6C4978);
  }
}

void sub_1BC9FC994(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD v5[2];

  if (!qword_1ED6C4AF0)
  {
    sub_1BC9FC7E4();
    v5[0] = v2;
    v5[1] = sub_1BC996948(&qword_1ED6C4B00, (uint64_t (*)(uint64_t))sub_1BC9FC7E4, MEMORY[0x1E0CDFCC0]);
    v3 = MEMORY[0x1BCCFBE48](a1, v5, MEMORY[0x1E0CDEA98], 0);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1ED6C4AF0);
  }
}

void sub_1BC9FCA20(uint64_t a1)
{
  sub_1BC9B65D8(a1, &qword_1ED6C4AA0, sub_1BC9FC994);
}

void sub_1BC9FCA3C(uint64_t a1)
{
  sub_1BC998AB0(a1, &qword_1ED6C61C0, type metadata accessor for ActivitySnidgetCurrentValueVisualizationView.ViewModel, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
}

void sub_1BC9FCA58(uint64_t a1)
{
  sub_1BC998AB0(a1, &qword_1ED6C61D8, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAF240], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
}

uint64_t sub_1BC9FCA74(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

unint64_t sub_1BC9FCAB8()
{
  unint64_t result;

  result = qword_1ED6C61F0;
  if (!qword_1ED6C61F0)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCAC2C34, &type metadata for ActivitySnidgetCurrentValueVisualizationView.ViewModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED6C61F0);
  }
  return result;
}

unint64_t sub_1BC9FCAFC()
{
  unint64_t result;

  result = qword_1ED6C7558;
  if (!qword_1ED6C7558)
  {
    result = MEMORY[0x1BCCFBE84](MEMORY[0x1E0CB0378], MEMORY[0x1E0CB0338]);
    atomic_store(result, (unint64_t *)&qword_1ED6C7558);
  }
  return result;
}

unint64_t sub_1BC9FCB40()
{
  unint64_t result;

  result = qword_1ED6C3648;
  if (!qword_1ED6C3648)
  {
    result = MEMORY[0x1BCCFBE84](MEMORY[0x1E0CB0350], MEMORY[0x1E0CB0338]);
    atomic_store(result, (unint64_t *)&qword_1ED6C3648);
  }
  return result;
}

void sub_1BC9FCB84()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED6C4E78)
  {
    sub_1BCA03158(255, &qword_1ED6C4EF8, (uint64_t (*)(uint64_t))sub_1BC9FCC04, (uint64_t (*)(uint64_t))sub_1BC9FD370, MEMORY[0x1E0CDB880]);
    sub_1BC9FD62C();
    v0 = sub_1BCAB5928();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED6C4E78);
  }
}

void sub_1BC9FCC04(uint64_t a1)
{
  sub_1BC9FCC28(a1, &qword_1ED6C4F90, &qword_1ED6C4F18, (void (*)(uint64_t))sub_1BC9FCC80, (void (*)(uint64_t))sub_1BC9FCF30);
}

void sub_1BC9FCC28(uint64_t a1, unint64_t *a2, unint64_t *a3, void (*a4)(uint64_t), void (*a5)(uint64_t))
{
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    sub_1BC9FD054(255, a3, a4, a5);
    v6 = sub_1BCAB5E14();
    if (!v7)
      atomic_store(v6, a2);
  }
}

void sub_1BC9FCC80()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED6C4F08)
  {
    sub_1BC9FCCF8(255);
    sub_1BC996948(&qword_1ED6C4F48, (uint64_t (*)(uint64_t))sub_1BC9FCCF8, MEMORY[0x1E0CE0680]);
    v0 = sub_1BCAB5D9C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED6C4F08);
  }
}

void sub_1BC9FCCF8(uint64_t a1)
{
  sub_1BC998AB0(a1, &qword_1ED6C4F50, (uint64_t (*)(uint64_t))sub_1BC9FCD14, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE0648]);
}

void sub_1BC9FCD14()
{
  unint64_t TupleTypeMetadata;
  uint64_t v1;

  if (!qword_1ED6C4E68)
  {
    type metadata accessor for ActivitySummarySnidgetValueView();
    sub_1BC9FCDA0(255);
    TupleTypeMetadata = swift_getTupleTypeMetadata();
    if (!v1)
      atomic_store(TupleTypeMetadata, (unint64_t *)&qword_1ED6C4E68);
  }
}

void sub_1BC9FCDA0(uint64_t a1)
{
  sub_1BC998AB0(a1, &qword_1ED6C4B38, (uint64_t (*)(uint64_t))sub_1BC9FCDBC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
}

void sub_1BC9FCDBC(uint64_t a1)
{
  sub_1BC998AB0(a1, &qword_1ED6C4B30, (uint64_t (*)(uint64_t))sub_1BC9FCDD8, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE0648]);
}

void sub_1BC9FCDD8()
{
  unint64_t TupleTypeMetadata;
  uint64_t v1;

  if (!qword_1ED6C4AD8)
  {
    sub_1BC9FCE58(255);
    type metadata accessor for ActivitySummarySnidgetValueView();
    TupleTypeMetadata = swift_getTupleTypeMetadata();
    if (!v1)
      atomic_store(TupleTypeMetadata, (unint64_t *)&qword_1ED6C4AD8);
  }
}

void sub_1BC9FCE58(uint64_t a1)
{
  sub_1BC9B65D8(a1, &qword_1ED6C4AD0, sub_1BC9FCE74);
}

void sub_1BC9FCE74(uint64_t a1)
{
  sub_1BC9B65D8(a1, &qword_1ED6C4AC8, sub_1BC9FCE90);
}

void sub_1BC9FCE90(uint64_t a1)
{
  sub_1BC9B65D8(a1, &qword_1ED6C4AC0, (void (*)(uint64_t))sub_1BC9FCEAC);
}

void sub_1BC9FCEAC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED6C4AB0)
  {
    sub_1BCAB5DC0();
    sub_1BC9B75E4(255, &qword_1ED6C4AE0, MEMORY[0x1E0CDF5D0], MEMORY[0x1E0CDF598], MEMORY[0x1E0CDBEB8]);
    v0 = sub_1BCAB5970();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED6C4AB0);
  }
}

void sub_1BC9FCF30()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED6C4F30)
  {
    sub_1BCA03158(255, &qword_1ED6C4EE8, (uint64_t (*)(uint64_t))sub_1BC9FCFB0, (uint64_t (*)(uint64_t))sub_1BC9FD030, MEMORY[0x1E0CDB880]);
    sub_1BC9FD2B0();
    v0 = sub_1BCAB5DA8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED6C4F30);
  }
}

void sub_1BC9FCFB0(uint64_t a1)
{
  sub_1BC998AB0(a1, &qword_1ED6C5010, (uint64_t (*)(uint64_t))sub_1BC9FCFCC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE0648]);
}

void sub_1BC9FCFCC()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_1ED6C4FC0)
  {
    type metadata accessor for ActivitySummarySnidgetValueView();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1ED6C4FC0);
  }
}

void sub_1BC9FD030(uint64_t a1)
{
  sub_1BC9FCC28(a1, &qword_1ED6C4F70, &qword_1ED6C4F00, (void (*)(uint64_t))sub_1BC9FD0C4, (void (*)(uint64_t))sub_1BC9FD1C8);
}

void sub_1BC9FD054(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), void (*a4)(uint64_t))
{
  unint64_t TupleTypeMetadata2;
  uint64_t v7;

  if (!*a2)
  {
    a3(255);
    a4(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v7)
      atomic_store(TupleTypeMetadata2, a2);
  }
}

void sub_1BC9FD0C4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED6C4AF8)
  {
    sub_1BC9FD13C(255);
    sub_1BC996948(&qword_1ED6C4B20, (uint64_t (*)(uint64_t))sub_1BC9FD13C, MEMORY[0x1E0CE0680]);
    v0 = sub_1BCAB5D9C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED6C4AF8);
  }
}

void sub_1BC9FD13C(uint64_t a1)
{
  sub_1BC998AB0(a1, &qword_1ED6C4B28, (uint64_t (*)(uint64_t))sub_1BC9FD158, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE0648]);
}

void sub_1BC9FD158()
{
  unint64_t TupleTypeMetadata3;
  uint64_t v1;

  if (!qword_1ED6C4A80)
  {
    type metadata accessor for ActivitySummarySnidgetValueView();
    sub_1BC9FCE58(255);
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1)
      atomic_store(TupleTypeMetadata3, (unint64_t *)&qword_1ED6C4A80);
  }
}

void sub_1BC9FD1C8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED6C4FD0)
  {
    sub_1BC9FD240(255);
    sub_1BC996948(&qword_1ED6C4FF8, (uint64_t (*)(uint64_t))sub_1BC9FD240, MEMORY[0x1E0CE0680]);
    v0 = sub_1BCAB5D9C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED6C4FD0);
  }
}

void sub_1BC9FD240(uint64_t a1)
{
  sub_1BC9FD25C(a1, &qword_1ED6C5000, &qword_1ED6C4FB0, (void (*)(uint64_t))type metadata accessor for ActivitySummarySnidgetValueView);
}

void sub_1BC9FD25C(uint64_t a1, unint64_t *a2, unint64_t *a3, void (*a4)(uint64_t))
{
  unint64_t v5;
  uint64_t v6;

  if (!*a2)
  {
    sub_1BC9FD780(255, a3, a4);
    v5 = sub_1BCAB5E14();
    if (!v6)
      atomic_store(v5, a2);
  }
}

unint64_t sub_1BC9FD2B0()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[2];

  result = qword_1ED6C4EE0;
  if (!qword_1ED6C4EE0)
  {
    sub_1BCA03158(255, &qword_1ED6C4EE8, (uint64_t (*)(uint64_t))sub_1BC9FCFB0, (uint64_t (*)(uint64_t))sub_1BC9FD030, MEMORY[0x1E0CDB880]);
    v2 = v1;
    v3 = MEMORY[0x1E0CE0680];
    v4[0] = sub_1BC996948(&qword_1ED6C5008, (uint64_t (*)(uint64_t))sub_1BC9FCFB0, MEMORY[0x1E0CE0680]);
    v4[1] = sub_1BC996948(&qword_1ED6C4F68, (uint64_t (*)(uint64_t))sub_1BC9FD030, v3);
    result = MEMORY[0x1BCCFBE84](MEMORY[0x1E0CDB8A0], v2, v4);
    atomic_store(result, (unint64_t *)&qword_1ED6C4EE0);
  }
  return result;
}

void sub_1BC9FD370(uint64_t a1)
{
  sub_1BC998AB0(a1, &qword_1ED6C4F80, (uint64_t (*)(uint64_t))sub_1BC9FD38C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE0648]);
}

void sub_1BC9FD38C()
{
  unint64_t TupleTypeMetadata;
  uint64_t v1;

  if (!qword_1ED6C4F10)
  {
    sub_1BC9FCC80();
    sub_1BC9FCF30();
    sub_1BC9FD41C();
    sub_1BC9FD520();
    TupleTypeMetadata = swift_getTupleTypeMetadata();
    if (!v1)
      atomic_store(TupleTypeMetadata, (unint64_t *)&qword_1ED6C4F10);
  }
}

void sub_1BC9FD41C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED6C4FE0)
  {
    sub_1BC9FD494(255);
    sub_1BC996948(&qword_1ED6C5018, (uint64_t (*)(uint64_t))sub_1BC9FD494, MEMORY[0x1E0CE0680]);
    v0 = sub_1BCAB5DA8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED6C4FE0);
  }
}

void sub_1BC9FD494(uint64_t a1)
{
  sub_1BC998AB0(a1, &qword_1ED6C5020, (uint64_t (*)(uint64_t))sub_1BC9FD4B0, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE0648]);
}

void sub_1BC9FD4B0()
{
  unint64_t TupleTypeMetadata3;
  uint64_t v1;

  if (!qword_1ED6C4FC8)
  {
    type metadata accessor for ActivitySummarySnidgetValueView();
    sub_1BC9FD1C8();
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1)
      atomic_store(TupleTypeMetadata3, (unint64_t *)&qword_1ED6C4FC8);
  }
}

void sub_1BC9FD520()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED6C4FD8)
  {
    sub_1BC9FD598(255);
    sub_1BC996948(&qword_1ED6C4FE8, (uint64_t (*)(uint64_t))sub_1BC9FD598, MEMORY[0x1E0CE0680]);
    v0 = sub_1BCAB5DA8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED6C4FD8);
  }
}

void sub_1BC9FD598(uint64_t a1)
{
  sub_1BC998AB0(a1, &qword_1ED6C4FF0, (uint64_t (*)(uint64_t))sub_1BC9FD5B4, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE0648]);
}

void sub_1BC9FD5B4()
{
  unint64_t TupleTypeMetadata;
  uint64_t v1;

  if (!qword_1ED6C4FB8)
  {
    type metadata accessor for ActivitySummarySnidgetValueView();
    TupleTypeMetadata = swift_getTupleTypeMetadata();
    if (!v1)
      atomic_store(TupleTypeMetadata, (unint64_t *)&qword_1ED6C4FB8);
  }
}

unint64_t sub_1BC9FD62C()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[2];

  result = qword_1ED6C4EF0;
  if (!qword_1ED6C4EF0)
  {
    sub_1BCA03158(255, &qword_1ED6C4EF8, (uint64_t (*)(uint64_t))sub_1BC9FCC04, (uint64_t (*)(uint64_t))sub_1BC9FD370, MEMORY[0x1E0CDB880]);
    v2 = v1;
    v3 = MEMORY[0x1E0CE0680];
    v4[0] = sub_1BC996948(&qword_1ED6C4F88, (uint64_t (*)(uint64_t))sub_1BC9FCC04, MEMORY[0x1E0CE0680]);
    v4[1] = sub_1BC996948(&qword_1ED6C4F78, (uint64_t (*)(uint64_t))sub_1BC9FD370, v3);
    result = MEMORY[0x1BCCFBE84](MEMORY[0x1E0CDB8A0], v2, v4);
    atomic_store(result, (unint64_t *)&qword_1ED6C4EF0);
  }
  return result;
}

void sub_1BC9FD6EC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED6C4F28)
  {
    sub_1BC9FD764(255);
    sub_1BC996948(&qword_1ED6C4F98, (uint64_t (*)(uint64_t))sub_1BC9FD764, MEMORY[0x1E0CE0680]);
    v0 = sub_1BCAB5D9C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED6C4F28);
  }
}

void sub_1BC9FD764(uint64_t a1)
{
  sub_1BC9FD25C(a1, &qword_1ED6C4FA0, &qword_1ED6C4F40, (void (*)(uint64_t))sub_1BC9FD7E4);
}

void sub_1BC9FD780(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t TupleTypeMetadata3;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v5)
      atomic_store(TupleTypeMetadata3, a2);
  }
}

void sub_1BC9FD7E4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED6C4F38)
  {
    sub_1BC9FD85C(255);
    sub_1BC996948(&qword_1ED6C4F58, (uint64_t (*)(uint64_t))sub_1BC9FD85C, MEMORY[0x1E0CE0680]);
    v0 = sub_1BCAB5DA8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED6C4F38);
  }
}

void sub_1BC9FD85C(uint64_t a1)
{
  sub_1BC998AB0(a1, &qword_1ED6C4F60, (uint64_t (*)(uint64_t))sub_1BC9FD878, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE0648]);
}

void sub_1BC9FD878()
{
  unint64_t TupleTypeMetadata3;
  uint64_t v1;

  if (!qword_1ED6C4EB0)
  {
    sub_1BC9FD8EC();
    sub_1BC9FD970(255);
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1)
      atomic_store(TupleTypeMetadata3, (unint64_t *)&qword_1ED6C4EB0);
  }
}

void sub_1BC9FD8EC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED6C4EA0)
  {
    sub_1BC9B75E4(255, &qword_1ED6C4E98, MEMORY[0x1E0CDDD78], MEMORY[0x1E0CDA208], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CD9BF0]);
    sub_1BCAB5B50();
    v0 = sub_1BCAB5970();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED6C4EA0);
  }
}

void sub_1BC9FD970(uint64_t a1)
{
  sub_1BC998AB0(a1, &qword_1ED6C4EA8, (uint64_t (*)(uint64_t))sub_1BC9FD8EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
}

void sub_1BC9FD98C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED6C4E90)
  {
    sub_1BCA03158(255, &qword_1ED6C4EF8, (uint64_t (*)(uint64_t))sub_1BC9FCC04, (uint64_t (*)(uint64_t))sub_1BC9FD370, MEMORY[0x1E0CDB880]);
    sub_1BC9FDA14();
    v0 = sub_1BCAB5940();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED6C4E90);
  }
}

unint64_t sub_1BC9FDA14()
{
  unint64_t result;

  result = qword_1ED6C4920;
  if (!qword_1ED6C4920)
  {
    result = MEMORY[0x1BCCFBE84](MEMORY[0x1E0CDA290], MEMORY[0x1E0CDA2A8]);
    atomic_store(result, (unint64_t *)&qword_1ED6C4920);
  }
  return result;
}

void sub_1BC9FDA58(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    v4 = sub_1BCAB5940();
    if (!v5)
      atomic_store(v4, a2);
  }
}

uint64_t sub_1BC9FDABC()
{
  return sub_1BC996948(&qword_1ED6C6430, type metadata accessor for ActivitySummarySnidgetView.ViewModel, (uint64_t)&protocol conformance descriptor for ActivitySummarySnidgetView.ViewModel);
}

uint64_t sub_1BC9FDAE8()
{
  return sub_1BC996948(&qword_1ED6C6440, type metadata accessor for ActivitySummarySnidgetView.ViewModel, (uint64_t)&protocol conformance descriptor for ActivitySummarySnidgetView.ViewModel);
}

uint64_t sub_1BC9FDB14()
{
  return sub_1BC996948(&qword_1ED6C6438, type metadata accessor for ActivitySummarySnidgetView.ViewModel, (uint64_t)&protocol conformance descriptor for ActivitySummarySnidgetView.ViewModel);
}

uint64_t sub_1BC9FDB40()
{
  return sub_1BC996948(&qword_1ED6C4C88, type metadata accessor for ActivitySummarySnidgetView.ActionHandlerData, (uint64_t)&protocol conformance descriptor for ActivitySummarySnidgetView.ActionHandlerData);
}

uint64_t sub_1BC9FDB6C()
{
  return sub_1BC996948(&qword_1ED6C6590, type metadata accessor for ActivitySummarySnidgetView.ActionHandlerData, (uint64_t)&protocol conformance descriptor for ActivitySummarySnidgetView.ActionHandlerData);
}

uint64_t sub_1BC9FDB98()
{
  return sub_1BC996948(&qword_1ED6C4C90, type metadata accessor for ActivitySummarySnidgetView.ActionHandlerData, (uint64_t)&protocol conformance descriptor for ActivitySummarySnidgetView.ActionHandlerData);
}

uint64_t sub_1BC9FDBC4()
{
  return sub_1BC996948(&qword_1ED6C49B0, type metadata accessor for ActivitySummarySnidgetView.ActionHandler, (uint64_t)&protocol conformance descriptor for ActivitySummarySnidgetView.ActionHandler);
}

uint64_t type metadata accessor for ActivitySummarySnidgetView.ActionHandler(uint64_t a1)
{
  return sub_1BC9B359C(a1, (uint64_t *)&unk_1ED6C6540);
}

uint64_t sub_1BC9FDC04()
{
  return sub_1BC996948(&qword_1ED6C6678, type metadata accessor for ActivitySummarySnidgetView, (uint64_t)&protocol conformance descriptor for ActivitySummarySnidgetView);
}

uint64_t sub_1BC9FDC30()
{
  return sub_1BC996948(&qword_1ED6C6670, type metadata accessor for ActivitySummarySnidgetView, (uint64_t)&protocol conformance descriptor for ActivitySummarySnidgetView);
}

uint64_t sub_1BC9FDC5C()
{
  return sub_1BC996948(qword_1ED6C6680, type metadata accessor for ActivitySummarySnidgetView, (uint64_t)&protocol conformance descriptor for ActivitySummarySnidgetView);
}

uint64_t sub_1BC9FDC88()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1BC9FDC98()
{
  return sub_1BC996948(&qword_1ED6C62D8, type metadata accessor for ActivitySnidgetCurrentValueVisualizationView, (uint64_t)&protocol conformance descriptor for ActivitySnidgetCurrentValueVisualizationView);
}

uint64_t sub_1BC9FDCC4()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1BC9FDCD4@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  v3 = *a1;
  swift_beginAccess();
  *a2 = *(_QWORD *)(v3 + 16);
  return swift_retain();
}

uint64_t sub_1BC9FDD20@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;

  v3 = *a1 + OBJC_IVAR____TtCV19HealthVisualization26ActivitySummarySnidgetView9ViewModel_currentValueViewModel;
  swift_beginAccess();
  return sub_1BC9964B8(v3, a2, (uint64_t (*)(_QWORD))sub_1BC9F48B4);
}

char *initializeBufferWithCopyOfBuffer for ActivitySummarySnidgetView(char *a1, uint64_t *a2, int *a3)
{
  char *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  uint64_t v15;
  char *v16;
  _QWORD *v17;
  uint64_t v18;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *(_QWORD *)a1 = *a2;
    v4 = (char *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = sub_1BCAB5370();
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      sub_1BC9FC7B4(0);
      memcpy(v4, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, uint64_t *, uint64_t))(v8 + 16))(v4, a2, v7);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v4, 0, 1, v7);
    }
    v11 = a3[5];
    v12 = a3[6];
    v13 = &v4[v11];
    v14 = (uint64_t *)((char *)a2 + v11);
    v15 = v14[1];
    *(_QWORD *)v13 = *v14;
    *((_QWORD *)v13 + 1) = v15;
    v16 = &v4[v12];
    v17 = (uint64_t *)((char *)a2 + v12);
    v18 = v17[1];
    *(_QWORD *)v16 = *v17;
    *((_QWORD *)v16 + 1) = v18;
    *(_QWORD *)&v4[a3[7]] = *(uint64_t *)((char *)a2 + a3[7]);
    swift_bridgeObjectRetain();
    swift_retain();
  }
  swift_retain();
  return v4;
}

uint64_t destroy for ActivitySummarySnidgetView(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_1BCAB5370();
  v3 = *(_QWORD *)(v2 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(a1, 1, v2))
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

char *initializeWithCopy for ActivitySummarySnidgetView(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;

  v6 = sub_1BCAB5370();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    sub_1BC9FC7B4(0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v9 = a3[5];
  v10 = a3[6];
  v11 = &a1[v9];
  v12 = &a2[v9];
  v13 = *((_QWORD *)v12 + 1);
  *(_QWORD *)v11 = *(_QWORD *)v12;
  *((_QWORD *)v11 + 1) = v13;
  v14 = &a1[v10];
  v15 = &a2[v10];
  v16 = *((_QWORD *)v15 + 1);
  *(_QWORD *)v14 = *(_QWORD *)v15;
  *((_QWORD *)v14 + 1) = v16;
  *(_QWORD *)&a1[a3[7]] = *(_QWORD *)&a2[a3[7]];
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  return a1;
}

char *assignWithCopy for ActivitySummarySnidgetView(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;

  v6 = sub_1BCAB5370();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 24))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    sub_1BC9FC7B4(0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_7:
  v12 = a3[5];
  v13 = &a1[v12];
  v14 = &a2[v12];
  *(_QWORD *)v13 = *(_QWORD *)v14;
  *((_QWORD *)v13 + 1) = *((_QWORD *)v14 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v15 = a3[6];
  v16 = &a1[v15];
  v17 = &a2[v15];
  *(_QWORD *)v16 = *(_QWORD *)v17;
  *((_QWORD *)v16 + 1) = *((_QWORD *)v17 + 1);
  swift_retain();
  swift_release();
  *(_QWORD *)&a1[a3[7]] = *(_QWORD *)&a2[a3[7]];
  swift_retain();
  swift_release();
  return a1;
}

char *initializeWithTake for ActivitySummarySnidgetView(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = sub_1BCAB5370();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    sub_1BC9FC7B4(0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v9 = a3[6];
  *(_OWORD *)&a1[a3[5]] = *(_OWORD *)&a2[a3[5]];
  *(_OWORD *)&a1[v9] = *(_OWORD *)&a2[v9];
  *(_QWORD *)&a1[a3[7]] = *(_QWORD *)&a2[a3[7]];
  return a1;
}

char *assignWithTake for ActivitySummarySnidgetView(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;

  v6 = sub_1BCAB5370();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 40))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    sub_1BC9FC7B4(0);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_7:
  v12 = a3[5];
  v13 = &a1[v12];
  v14 = &a2[v12];
  v16 = *(_QWORD *)v14;
  v15 = *((_QWORD *)v14 + 1);
  *(_QWORD *)v13 = v16;
  *((_QWORD *)v13 + 1) = v15;
  swift_bridgeObjectRelease();
  v17 = a3[6];
  v18 = &a1[v17];
  v19 = &a2[v17];
  v21 = *(_QWORD *)v19;
  v20 = *((_QWORD *)v19 + 1);
  *(_QWORD *)v18 = v21;
  *((_QWORD *)v18 + 1) = v20;
  swift_release();
  *(_QWORD *)&a1[a3[7]] = *(_QWORD *)&a2[a3[7]];
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for ActivitySummarySnidgetView()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BC9FE398(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  sub_1BC9FC7B4(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for ActivitySummarySnidgetView()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_1BC9FE424(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;

  sub_1BC9FC7B4(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, v8);
  else
    *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
}

void sub_1BC9FE4A0()
{
  unint64_t v0;

  sub_1BC9FC7B4(319);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

uint64_t sub_1BC9FE51C()
{
  return type metadata accessor for ActivitySummarySnidgetView.ViewModel(0);
}

void sub_1BC9FE524()
{
  unint64_t v0;

  sub_1BC9F48B4();
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t method lookup function for ActivitySummarySnidgetView.ViewModel()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ActivitySummarySnidgetView.ViewModel.headerModel.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 96))();
}

uint64_t dispatch thunk of ActivitySummarySnidgetView.ViewModel.headerModel.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

uint64_t dispatch thunk of ActivitySummarySnidgetView.ViewModel.headerModel.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t dispatch thunk of ActivitySummarySnidgetView.ViewModel.currentValueViewModel.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t dispatch thunk of ActivitySummarySnidgetView.ViewModel.currentValueViewModel.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of ActivitySummarySnidgetView.ViewModel.currentValueViewModel.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t dispatch thunk of ActivitySummarySnidgetView.ViewModel.__allocating_init(headerModel:currentValueViewModel:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 144))();
}

uint64_t dispatch thunk of ActivitySummarySnidgetView.ViewModel.encode(to:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of ActivitySummarySnidgetView.ViewModel.__allocating_init(from:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 160))();
}

uint64_t sub_1BC9FE630()
{
  return type metadata accessor for ActivitySummarySnidgetView.ActionHandlerData(0);
}

void sub_1BC9FE638()
{
  unint64_t v0;

  sub_1BC9F53BC(319);
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t method lookup function for ActivitySummarySnidgetView.ActionHandlerData()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ActivitySummarySnidgetView.ActionHandlerData.__allocating_init(relevantDateInterval:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t dispatch thunk of ActivitySummarySnidgetView.ActionHandlerData.encode(to:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t dispatch thunk of ActivitySummarySnidgetView.ActionHandlerData.__allocating_init(from:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t sub_1BC9FE6EC()
{
  return swift_initClassMetadata2();
}

uint64_t method lookup function for ActivitySummarySnidgetView.ActionHandler()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ActivitySummarySnidgetView.ActionHandler.didSelect()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))(*v0 + class metadata base offset for ActivitySummarySnidgetView.ActionHandler))();
}

uint64_t sub_1BC9FE748()
{
  return type metadata accessor for ActivitySummarySnidgetView.ActionHandler(0);
}

_QWORD *initializeBufferWithCopyOfBuffer for ActivitySnidgetCurrentValueVisualizationView(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  void *v8;
  int *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, char *, uint64_t);
  id v16;
  uint64_t v17;
  char *v18;
  char *v19;
  unsigned int (*v20)(char *, uint64_t, uint64_t);
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  int *v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  char *v44;
  char *v45;
  id v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  void *v66;
  uint64_t v67;
  char *v68;
  char *v69;
  id v70;
  id v71;
  uint64_t v75;
  uint64_t v77;

  v3 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v22 = (_QWORD *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    a1[1] = a2[1];
    v5 = a3[5];
    v6 = (char *)a1 + v5;
    v7 = (char *)a2 + v5;
    *v6 = *((_BYTE *)a2 + v5);
    v8 = *(void **)((char *)a2 + v5 + 8);
    *((_QWORD *)v6 + 1) = v8;
    v9 = (int *)type metadata accessor for ActivitySnidgetCurrentValueVisualizationView.ViewModel(0);
    v10 = v9[6];
    v11 = &v6[v10];
    v12 = &v7[v10];
    v13 = sub_1BCAB4CE0();
    v14 = *(_QWORD *)(v13 - 8);
    v15 = *(void (**)(char *, char *, uint64_t))(v14 + 16);
    swift_retain();
    v16 = v8;
    v15(v11, v12, v13);
    v17 = v9[7];
    v18 = &v6[v17];
    v19 = &v7[v17];
    v77 = v14;
    v20 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48);
    if (v20(&v7[v17], 1, v13))
    {
      sub_1BC9FCA58(0);
      memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    }
    else
    {
      v15(v18, v19, v13);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v77 + 56))(v18, 0, 1, v13);
    }
    v15(&v6[v9[8]], &v7[v9[8]], v13);
    v23 = v9[9];
    v24 = &v6[v23];
    v25 = &v7[v23];
    v26 = a2;
    v22 = a1;
    if (v20(&v7[v23], 1, v13))
    {
      sub_1BC9FCA58(0);
      memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    }
    else
    {
      v15(v24, v25, v13);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v77 + 56))(v24, 0, 1, v13);
    }
    v15(&v6[v9[10]], &v7[v9[10]], v13);
    v28 = v9[11];
    v29 = &v6[v28];
    v30 = &v7[v28];
    if (v20(&v7[v28], 1, v13))
    {
      sub_1BC9FCA58(0);
      memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
    }
    else
    {
      v15(v29, v30, v13);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v77 + 56))(v29, 0, 1, v13);
    }
    v6[v9[12]] = v7[v9[12]];
    v15(&v6[v9[13]], &v7[v9[13]], v13);
    v32 = v9[14];
    v33 = &v6[v32];
    v34 = &v7[v32];
    if (v20(&v7[v32], 1, v13))
    {
      sub_1BC9FCA58(0);
      memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
    }
    else
    {
      v15(v33, v34, v13);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v77 + 56))(v33, 0, 1, v13);
    }
    v36 = a3;
    v37 = a3[6];
    v38 = (_QWORD *)((char *)a1 + v37);
    v39 = (_QWORD *)((char *)a2 + v37);
    v40 = *((_QWORD *)v9 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v40 + 48))((char *)a2 + v37, 1, v9))
    {
      sub_1BC9FCA3C(0);
      memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
    }
    else
    {
      v75 = v40;
      *(_BYTE *)v38 = *(_BYTE *)v39;
      v42 = (void *)v39[1];
      v38[1] = v42;
      v43 = v9[6];
      v44 = (char *)v38 + v43;
      v45 = (char *)v39 + v43;
      v46 = v42;
      v15(v44, v45, v13);
      v47 = v9[7];
      v48 = (char *)v38 + v47;
      v49 = (char *)v39 + v47;
      if (v20((char *)v39 + v47, 1, v13))
      {
        sub_1BC9FCA58(0);
        memcpy(v48, v49, *(_QWORD *)(*(_QWORD *)(v50 - 8) + 64));
      }
      else
      {
        v15(v48, v49, v13);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v77 + 56))(v48, 0, 1, v13);
      }
      v15((char *)v38 + v9[8], (char *)v39 + v9[8], v13);
      v51 = v9[9];
      v52 = (char *)v38 + v51;
      v53 = (char *)v39 + v51;
      if (v20((char *)v39 + v51, 1, v13))
      {
        sub_1BC9FCA58(0);
        memcpy(v52, v53, *(_QWORD *)(*(_QWORD *)(v54 - 8) + 64));
      }
      else
      {
        v15(v52, v53, v13);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v77 + 56))(v52, 0, 1, v13);
      }
      v15((char *)v38 + v9[10], (char *)v39 + v9[10], v13);
      v55 = v9[11];
      v56 = (char *)v38 + v55;
      v57 = (char *)v39 + v55;
      if (v20((char *)v39 + v55, 1, v13))
      {
        sub_1BC9FCA58(0);
        memcpy(v56, v57, *(_QWORD *)(*(_QWORD *)(v58 - 8) + 64));
      }
      else
      {
        v15(v56, v57, v13);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v77 + 56))(v56, 0, 1, v13);
      }
      *((_BYTE *)v38 + v9[12]) = *((_BYTE *)v39 + v9[12]);
      v15((char *)v38 + v9[13], (char *)v39 + v9[13], v13);
      v59 = v9[14];
      v60 = (char *)v38 + v59;
      v61 = (char *)v39 + v59;
      if (v20(v61, 1, v13))
      {
        sub_1BC9FCA58(0);
        memcpy(v60, v61, *(_QWORD *)(*(_QWORD *)(v62 - 8) + 64));
      }
      else
      {
        v15(v60, v61, v13);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v77 + 56))(v60, 0, 1, v13);
      }
      (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v75 + 56))(v38, 0, 1, v9);
      v26 = a2;
    }
    v63 = v36[7];
    v64 = v36[8];
    v65 = *(void **)((char *)v26 + v63);
    *(_QWORD *)((char *)a1 + v63) = v65;
    v66 = *(void **)((char *)v26 + v64);
    *(_QWORD *)((char *)a1 + v64) = v66;
    v67 = v36[9];
    v68 = (char *)a1 + v67;
    v69 = (char *)v26 + v67;
    *(_QWORD *)v68 = *(_QWORD *)v69;
    v68[8] = v69[8];
    v70 = v65;
    v71 = v66;
  }
  return v22;
}

void destroy for ActivitySnidgetCurrentValueVisualizationView(uint64_t a1, int *a2)
{
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  unsigned int (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  swift_release();
  v4 = a1 + a2[5];

  v5 = (int *)type metadata accessor for ActivitySnidgetCurrentValueVisualizationView.ViewModel(0);
  v6 = v4 + v5[6];
  v7 = sub_1BCAB4CE0();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v9(v6, v7);
  v10 = v4 + v5[7];
  v11 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  if (!v11(v10, 1, v7))
    v9(v10, v7);
  v9(v4 + v5[8], v7);
  v12 = v4 + v5[9];
  if (!v11(v12, 1, v7))
    v9(v12, v7);
  v9(v4 + v5[10], v7);
  v13 = v4 + v5[11];
  if (!v11(v13, 1, v7))
    v9(v13, v7);
  v9(v4 + v5[13], v7);
  v14 = v4 + v5[14];
  if (!v11(v14, 1, v7))
    v9(v14, v7);
  v15 = a1 + a2[6];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*((_QWORD *)v5 - 1) + 48))(v15, 1, v5))
  {

    v9(v15 + v5[6], v7);
    v16 = v15 + v5[7];
    if (!v11(v16, 1, v7))
      v9(v16, v7);
    v9(v15 + v5[8], v7);
    v17 = v15 + v5[9];
    if (!v11(v17, 1, v7))
      v9(v17, v7);
    v9(v15 + v5[10], v7);
    v18 = v15 + v5[11];
    if (!v11(v18, 1, v7))
      v9(v18, v7);
    v9(v15 + v5[13], v7);
    v19 = v15 + v5[14];
    if (!v11(v19, 1, v7))
      v9(v19, v7);
  }

}

_QWORD *initializeWithCopy for ActivitySnidgetCurrentValueVisualizationView(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  char *v6;
  void *v7;
  int *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t);
  id v15;
  uint64_t v16;
  char *v17;
  char *v18;
  unsigned int (*v19)(char *, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  int *v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  id v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  void *v64;
  uint64_t v65;
  char *v66;
  char *v67;
  id v68;
  id v69;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a3[5];
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  *v5 = *((_BYTE *)a2 + v4);
  v7 = *(void **)((char *)a2 + v4 + 8);
  *((_QWORD *)v5 + 1) = v7;
  v8 = (int *)type metadata accessor for ActivitySnidgetCurrentValueVisualizationView.ViewModel(0);
  v9 = v8[6];
  v10 = &v5[v9];
  v11 = &v6[v9];
  v12 = sub_1BCAB4CE0();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(void (**)(char *, char *, uint64_t))(v13 + 16);
  swift_retain();
  v15 = v7;
  v14(v10, v11, v12);
  v16 = v8[7];
  v17 = &v5[v16];
  v18 = &v6[v16];
  v19 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
  if (v19(&v6[v16], 1, v12))
  {
    sub_1BC9FCA58(0);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
  }
  else
  {
    v14(v17, v18, v12);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v17, 0, 1, v12);
  }
  v14(&v5[v8[8]], &v6[v8[8]], v12);
  v21 = v8[9];
  v22 = &v5[v21];
  v23 = &v6[v21];
  v24 = a2;
  if (v19(&v6[v21], 1, v12))
  {
    sub_1BC9FCA58(0);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
  }
  else
  {
    v14(v22, v23, v12);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v22, 0, 1, v12);
  }
  v14(&v5[v8[10]], &v6[v8[10]], v12);
  v26 = v8[11];
  v27 = &v5[v26];
  v28 = &v6[v26];
  if (v19(&v6[v26], 1, v12))
  {
    sub_1BC9FCA58(0);
    memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
  }
  else
  {
    v14(v27, v28, v12);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v27, 0, 1, v12);
  }
  v5[v8[12]] = v6[v8[12]];
  v14(&v5[v8[13]], &v6[v8[13]], v12);
  v30 = v8[14];
  v31 = &v5[v30];
  v32 = &v6[v30];
  if (v19(&v6[v30], 1, v12))
  {
    sub_1BC9FCA58(0);
    memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
  }
  else
  {
    v14(v31, v32, v12);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v31, 0, 1, v12);
  }
  v34 = a3;
  v35 = a3[6];
  v36 = (_QWORD *)((char *)a1 + v35);
  v37 = (_QWORD *)((char *)a2 + v35);
  v38 = *((_QWORD *)v8 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v38 + 48))((char *)a2 + v35, 1, v8))
  {
    sub_1BC9FCA3C(0);
    memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
  }
  else
  {
    *(_BYTE *)v36 = *(_BYTE *)v37;
    v40 = (void *)v37[1];
    v36[1] = v40;
    v41 = v8[6];
    v42 = (char *)v36 + v41;
    v43 = (char *)v37 + v41;
    v44 = v40;
    v14(v42, v43, v12);
    v45 = v8[7];
    v46 = (char *)v36 + v45;
    v47 = (char *)v37 + v45;
    if (v19((char *)v37 + v45, 1, v12))
    {
      sub_1BC9FCA58(0);
      memcpy(v46, v47, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
    }
    else
    {
      v14(v46, v47, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v46, 0, 1, v12);
    }
    v14((char *)v36 + v8[8], (char *)v37 + v8[8], v12);
    v49 = v8[9];
    v50 = (char *)v36 + v49;
    v51 = (char *)v37 + v49;
    if (v19((char *)v37 + v49, 1, v12))
    {
      sub_1BC9FCA58(0);
      memcpy(v50, v51, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
    }
    else
    {
      v14(v50, v51, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v50, 0, 1, v12);
    }
    v14((char *)v36 + v8[10], (char *)v37 + v8[10], v12);
    v53 = v8[11];
    v54 = (char *)v36 + v53;
    v55 = (char *)v37 + v53;
    if (v19((char *)v37 + v53, 1, v12))
    {
      sub_1BC9FCA58(0);
      memcpy(v54, v55, *(_QWORD *)(*(_QWORD *)(v56 - 8) + 64));
    }
    else
    {
      v14(v54, v55, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v54, 0, 1, v12);
    }
    *((_BYTE *)v36 + v8[12]) = *((_BYTE *)v37 + v8[12]);
    v14((char *)v36 + v8[13], (char *)v37 + v8[13], v12);
    v57 = v8[14];
    v58 = (char *)v36 + v57;
    v59 = (char *)v37 + v57;
    v34 = a3;
    if (v19(v59, 1, v12))
    {
      sub_1BC9FCA58(0);
      memcpy(v58, v59, *(_QWORD *)(*(_QWORD *)(v60 - 8) + 64));
    }
    else
    {
      v14(v58, v59, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v58, 0, 1, v12);
    }
    (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v38 + 56))(v36, 0, 1, v8);
    v24 = a2;
  }
  v61 = v34[7];
  v62 = v34[8];
  v63 = *(void **)((char *)v24 + v61);
  *(_QWORD *)((char *)a1 + v61) = v63;
  v64 = *(void **)((char *)v24 + v62);
  *(_QWORD *)((char *)a1 + v62) = v64;
  v65 = v34[9];
  v66 = (char *)a1 + v65;
  v67 = (char *)v24 + v65;
  *(_QWORD *)v66 = *(_QWORD *)v67;
  v66[8] = v67[8];
  v68 = v63;
  v69 = v64;
  return a1;
}

char *assignWithCopy for ActivitySnidgetCurrentValueVisualizationView(char *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  void *v9;
  void *v10;
  id v11;
  int *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, char *, uint64_t);
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t (*v22)(char *, uint64_t, uint64_t);
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t (*v48)(char *, uint64_t, int *);
  int v49;
  int v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  void (*v55)(uint64_t, char *, uint64_t);
  id v56;
  uint64_t v57;
  void *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  size_t v62;
  void *v63;
  char *v64;
  void *v65;
  void *v66;
  id v67;
  uint64_t v68;
  char *v69;
  char *v70;
  int v71;
  int v72;
  uint64_t v73;
  void *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  void *v86;
  void *v87;
  id v88;
  uint64_t v89;
  void *v90;
  void *v91;
  id v92;
  uint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  char *v101;
  int v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  char *v107;
  int v108;
  int v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  char *v114;
  int v115;
  int v116;
  uint64_t v117;
  char *__src;
  int *v119;
  _QWORD *v120;
  uint64_t v121;

  *(_QWORD *)a1 = *a2;
  swift_retain();
  swift_release();
  *((_QWORD *)a1 + 1) = a2[1];
  v119 = a3;
  v120 = a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = (char *)a2 + v6;
  *v7 = *((_BYTE *)a2 + v6);
  v9 = *(void **)((char *)a2 + v6 + 8);
  v10 = (void *)*((_QWORD *)v7 + 1);
  *((_QWORD *)v7 + 1) = v9;
  v11 = v9;

  v12 = (int *)type metadata accessor for ActivitySnidgetCurrentValueVisualizationView.ViewModel(0);
  v13 = v12[6];
  v14 = &v7[v13];
  v15 = &v8[v13];
  v16 = sub_1BCAB4CE0();
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(void (**)(char *, char *, uint64_t))(v17 + 24);
  v18(v14, v15, v16);
  v19 = v12[7];
  v20 = &v7[v19];
  v21 = &v8[v19];
  v121 = v17;
  v22 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48);
  v23 = v22(&v7[v19], 1, v16);
  v24 = v22(v21, 1, v16);
  if (v23)
  {
    if (!v24)
    {
      (*(void (**)(char *, char *, uint64_t))(v121 + 16))(v20, v21, v16);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v121 + 56))(v20, 0, 1, v16);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v24)
  {
    (*(void (**)(char *, uint64_t))(v121 + 8))(v20, v16);
LABEL_6:
    sub_1BC9FCA58(0);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    goto LABEL_7;
  }
  v18(v20, v21, v16);
LABEL_7:
  v18(&v7[v12[8]], &v8[v12[8]], v16);
  v26 = v12[9];
  v27 = &v7[v26];
  v28 = &v8[v26];
  v29 = v22(&v7[v26], 1, v16);
  v30 = v22(v28, 1, v16);
  if (v29)
  {
    if (!v30)
    {
      (*(void (**)(char *, char *, uint64_t))(v121 + 16))(v27, v28, v16);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v121 + 56))(v27, 0, 1, v16);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v30)
  {
    (*(void (**)(char *, uint64_t))(v121 + 8))(v27, v16);
LABEL_12:
    sub_1BC9FCA58(0);
    memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
    goto LABEL_13;
  }
  v18(v27, v28, v16);
LABEL_13:
  v18(&v7[v12[10]], &v8[v12[10]], v16);
  v32 = v12[11];
  v33 = &v7[v32];
  v34 = &v8[v32];
  v35 = v22(&v7[v32], 1, v16);
  v36 = v22(v34, 1, v16);
  if (v35)
  {
    if (!v36)
    {
      (*(void (**)(char *, char *, uint64_t))(v121 + 16))(v33, v34, v16);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v121 + 56))(v33, 0, 1, v16);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v36)
  {
    (*(void (**)(char *, uint64_t))(v121 + 8))(v33, v16);
LABEL_18:
    sub_1BC9FCA58(0);
    memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
    goto LABEL_19;
  }
  v18(v33, v34, v16);
LABEL_19:
  v7[v12[12]] = v8[v12[12]];
  v18(&v7[v12[13]], &v8[v12[13]], v16);
  v38 = v12[14];
  v39 = &v7[v38];
  v40 = &v8[v38];
  v41 = v22(&v7[v38], 1, v16);
  v42 = v22(v40, 1, v16);
  if (v41)
  {
    if (!v42)
    {
      (*(void (**)(char *, char *, uint64_t))(v121 + 16))(v39, v40, v16);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v121 + 56))(v39, 0, 1, v16);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  if (v42)
  {
    (*(void (**)(char *, uint64_t))(v121 + 8))(v39, v16);
LABEL_24:
    sub_1BC9FCA58(0);
    memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
    goto LABEL_25;
  }
  v18(v39, v40, v16);
LABEL_25:
  v44 = v119[6];
  v45 = (uint64_t)&a1[v44];
  v46 = (char *)v120 + v44;
  v47 = *((_QWORD *)v12 - 1);
  v48 = *(uint64_t (**)(char *, uint64_t, int *))(v47 + 48);
  v49 = v48(&a1[v44], 1, v12);
  v50 = v48(v46, 1, v12);
  if (!v49)
  {
    if (v50)
    {
      sub_1BC997208(v45, type metadata accessor for ActivitySnidgetCurrentValueVisualizationView.ViewModel);
      goto LABEL_31;
    }
    *(_BYTE *)v45 = *v46;
    v65 = (void *)*((_QWORD *)v46 + 1);
    v66 = *(void **)(v45 + 8);
    *(_QWORD *)(v45 + 8) = v65;
    v67 = v65;

    v18((char *)(v45 + v12[6]), &v46[v12[6]], v16);
    v68 = v12[7];
    v69 = (char *)(v45 + v68);
    v70 = &v46[v68];
    v71 = v22((char *)(v45 + v68), 1, v16);
    v72 = v22(v70, 1, v16);
    if (v71)
    {
      if (!v72)
      {
        (*(void (**)(char *, char *, uint64_t))(v121 + 16))(v69, v70, v16);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v121 + 56))(v69, 0, 1, v16);
        goto LABEL_55;
      }
    }
    else
    {
      if (!v72)
      {
        v18(v69, v70, v16);
LABEL_55:
        v18((char *)(v45 + v12[8]), &v46[v12[8]], v16);
        v99 = v12[9];
        v100 = (char *)(v45 + v99);
        v101 = &v46[v99];
        v102 = v22((char *)(v45 + v99), 1, v16);
        v103 = v22(v101, 1, v16);
        if (v102)
        {
          if (!v103)
          {
            (*(void (**)(char *, char *, uint64_t))(v121 + 16))(v100, v101, v16);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v121 + 56))(v100, 0, 1, v16);
            goto LABEL_61;
          }
        }
        else
        {
          if (!v103)
          {
            v18(v100, v101, v16);
LABEL_61:
            v18((char *)(v45 + v12[10]), &v46[v12[10]], v16);
            v105 = v12[11];
            v106 = (char *)(v45 + v105);
            v107 = &v46[v105];
            v108 = v22((char *)(v45 + v105), 1, v16);
            __src = v107;
            v109 = v22(v107, 1, v16);
            if (v108)
            {
              v110 = v121;
              if (!v109)
              {
                (*(void (**)(char *, char *, uint64_t))(v121 + 16))(v106, __src, v16);
                (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v121 + 56))(v106, 0, 1, v16);
LABEL_67:
                *(_BYTE *)(v45 + v12[12]) = v46[v12[12]];
                v18((char *)(v45 + v12[13]), &v46[v12[13]], v16);
                v112 = v12[14];
                v113 = (char *)(v45 + v112);
                v114 = &v46[v112];
                v115 = v22(v113, 1, v16);
                v116 = v22(v114, 1, v16);
                if (v115)
                {
                  if (!v116)
                  {
                    (*(void (**)(char *, char *, uint64_t))(v110 + 16))(v113, v114, v16);
                    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v110 + 56))(v113, 0, 1, v16);
                    goto LABEL_51;
                  }
                }
                else
                {
                  if (!v116)
                  {
                    v18(v113, v114, v16);
                    goto LABEL_51;
                  }
                  (*(void (**)(char *, uint64_t))(v110 + 8))(v113, v16);
                }
                sub_1BC9FCA58(0);
                v62 = *(_QWORD *)(*(_QWORD *)(v117 - 8) + 64);
                v63 = v113;
                v64 = v114;
                goto LABEL_32;
              }
            }
            else
            {
              v110 = v121;
              if (!v109)
              {
                v18(v106, __src, v16);
                goto LABEL_67;
              }
              (*(void (**)(char *, uint64_t))(v121 + 8))(v106, v16);
            }
            sub_1BC9FCA58(0);
            memcpy(v106, __src, *(_QWORD *)(*(_QWORD *)(v111 - 8) + 64));
            goto LABEL_67;
          }
          (*(void (**)(char *, uint64_t))(v121 + 8))(v100, v16);
        }
        sub_1BC9FCA58(0);
        memcpy(v100, v101, *(_QWORD *)(*(_QWORD *)(v104 - 8) + 64));
        goto LABEL_61;
      }
      (*(void (**)(char *, uint64_t))(v121 + 8))(v69, v16);
    }
    sub_1BC9FCA58(0);
    memcpy(v69, v70, *(_QWORD *)(*(_QWORD *)(v98 - 8) + 64));
    goto LABEL_55;
  }
  if (v50)
  {
LABEL_31:
    sub_1BC9FCA3C(0);
    v62 = *(_QWORD *)(*(_QWORD *)(v61 - 8) + 64);
    v63 = (void *)v45;
    v64 = v46;
LABEL_32:
    memcpy(v63, v64, v62);
    goto LABEL_51;
  }
  *(_BYTE *)v45 = *v46;
  v51 = (void *)*((_QWORD *)v46 + 1);
  *(_QWORD *)(v45 + 8) = v51;
  v52 = v12[6];
  v53 = v45 + v52;
  v54 = &v46[v52];
  v55 = *(void (**)(uint64_t, char *, uint64_t))(v121 + 16);
  v56 = v51;
  v55(v53, v54, v16);
  v57 = v12[7];
  v58 = (void *)(v45 + v57);
  v59 = &v46[v57];
  if (v22(&v46[v57], 1, v16))
  {
    sub_1BC9FCA58(0);
    memcpy(v58, v59, *(_QWORD *)(*(_QWORD *)(v60 - 8) + 64));
  }
  else
  {
    v55((uint64_t)v58, v59, v16);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v121 + 56))(v58, 0, 1, v16);
  }
  v55(v45 + v12[8], &v46[v12[8]], v16);
  v73 = v12[9];
  v74 = (void *)(v45 + v73);
  v75 = &v46[v73];
  if (v22(&v46[v73], 1, v16))
  {
    sub_1BC9FCA58(0);
    memcpy(v74, v75, *(_QWORD *)(*(_QWORD *)(v76 - 8) + 64));
  }
  else
  {
    v55((uint64_t)v74, v75, v16);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v121 + 56))(v74, 0, 1, v16);
  }
  v55(v45 + v12[10], &v46[v12[10]], v16);
  v77 = v12[11];
  v78 = (void *)(v45 + v77);
  v79 = &v46[v77];
  if (v22(&v46[v77], 1, v16))
  {
    sub_1BC9FCA58(0);
    memcpy(v78, v79, *(_QWORD *)(*(_QWORD *)(v80 - 8) + 64));
  }
  else
  {
    v55((uint64_t)v78, v79, v16);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v121 + 56))(v78, 0, 1, v16);
  }
  *(_BYTE *)(v45 + v12[12]) = v46[v12[12]];
  v55(v45 + v12[13], &v46[v12[13]], v16);
  v81 = v12[14];
  v82 = (void *)(v45 + v81);
  v83 = &v46[v81];
  if (v22(v83, 1, v16))
  {
    sub_1BC9FCA58(0);
    memcpy(v82, v83, *(_QWORD *)(*(_QWORD *)(v84 - 8) + 64));
  }
  else
  {
    v55((uint64_t)v82, v83, v16);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v121 + 56))(v82, 0, 1, v16);
  }
  (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v47 + 56))(v45, 0, 1, v12);
LABEL_51:
  v85 = v119[7];
  v86 = *(void **)((char *)v120 + v85);
  v87 = *(void **)&a1[v85];
  *(_QWORD *)&a1[v85] = v86;
  v88 = v86;

  v89 = v119[8];
  v90 = *(void **)((char *)v120 + v89);
  v91 = *(void **)&a1[v89];
  *(_QWORD *)&a1[v89] = v90;
  v92 = v90;

  v93 = v119[9];
  v94 = &a1[v93];
  v95 = (char *)v120 + v93;
  v96 = *(_QWORD *)v95;
  v94[8] = v95[8];
  *(_QWORD *)v94 = v96;
  return a1;
}

_OWORD *initializeWithTake for ActivitySnidgetCurrentValueVisualizationView(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v3;
  char *v4;
  char *v6;
  int *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  char *v15;
  char *v16;
  unsigned int (*v17)(char *, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  _OWORD *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  int *v33;
  uint64_t v34;
  _QWORD *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v62;
  uint64_t v64;

  *a1 = *a2;
  v3 = a3[5];
  v4 = (char *)a1 + v3;
  v6 = (char *)a2 + v3;
  *v4 = *((_BYTE *)a2 + v3);
  *((_QWORD *)v4 + 1) = *(_QWORD *)((char *)a2 + v3 + 8);
  v7 = (int *)type metadata accessor for ActivitySnidgetCurrentValueVisualizationView.ViewModel(0);
  v8 = v7[6];
  v9 = &v4[v8];
  v10 = &v6[v8];
  v11 = sub_1BCAB4CE0();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
  v13(v9, v10, v11);
  v14 = v7[7];
  v15 = &v4[v14];
  v16 = &v6[v14];
  v17 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
  v64 = v12;
  if (v17(&v6[v14], 1, v11))
  {
    sub_1BC9FCA58(0);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  else
  {
    v13(v15, v16, v11);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v15, 0, 1, v11);
  }
  v13(&v4[v7[8]], &v6[v7[8]], v11);
  v19 = v7[9];
  v20 = &v4[v19];
  v21 = &v6[v19];
  v22 = (char *)a2;
  if (v17(&v6[v19], 1, v11))
  {
    sub_1BC9FCA58(0);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
  }
  else
  {
    v13(v20, v21, v11);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v64 + 56))(v20, 0, 1, v11);
  }
  v24 = a1;
  v13(&v4[v7[10]], &v6[v7[10]], v11);
  v25 = v7[11];
  v26 = &v4[v25];
  v27 = &v6[v25];
  if (v17(&v6[v25], 1, v11))
  {
    sub_1BC9FCA58(0);
    memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
  }
  else
  {
    v13(v26, v27, v11);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v64 + 56))(v26, 0, 1, v11);
  }
  v4[v7[12]] = v6[v7[12]];
  v13(&v4[v7[13]], &v6[v7[13]], v11);
  v29 = v7[14];
  v30 = &v4[v29];
  v31 = &v6[v29];
  if (v17(&v6[v29], 1, v11))
  {
    sub_1BC9FCA58(0);
    memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
  }
  else
  {
    v13(v30, v31, v11);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v64 + 56))(v30, 0, 1, v11);
  }
  v33 = a3;
  v34 = a3[6];
  v35 = (_QWORD *)((char *)a1 + v34);
  v36 = &v22[v34];
  v37 = *((_QWORD *)v7 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v37 + 48))(&v22[v34], 1, v7))
  {
    sub_1BC9FCA3C(0);
    memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
  }
  else
  {
    v62 = v37;
    *(_BYTE *)v35 = *v36;
    v35[1] = *((_QWORD *)v36 + 1);
    v13((char *)v35 + v7[6], &v36[v7[6]], v11);
    v39 = v7[7];
    v40 = (char *)v35 + v39;
    v41 = &v36[v39];
    if (v17(&v36[v39], 1, v11))
    {
      sub_1BC9FCA58(0);
      memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
    }
    else
    {
      v13(v40, v41, v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v64 + 56))(v40, 0, 1, v11);
    }
    v13((char *)v35 + v7[8], &v36[v7[8]], v11);
    v43 = v7[9];
    v44 = (char *)v35 + v43;
    v45 = &v36[v43];
    if (v17(&v36[v43], 1, v11))
    {
      sub_1BC9FCA58(0);
      memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
    }
    else
    {
      v13(v44, v45, v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v64 + 56))(v44, 0, 1, v11);
    }
    v13((char *)v35 + v7[10], &v36[v7[10]], v11);
    v47 = v7[11];
    v48 = (char *)v35 + v47;
    v49 = &v36[v47];
    if (v17(&v36[v47], 1, v11))
    {
      sub_1BC9FCA58(0);
      memcpy(v48, v49, *(_QWORD *)(*(_QWORD *)(v50 - 8) + 64));
      v51 = v64;
    }
    else
    {
      v13(v48, v49, v11);
      v51 = v64;
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v64 + 56))(v48, 0, 1, v11);
    }
    *((_BYTE *)v35 + v7[12]) = v36[v7[12]];
    v13((char *)v35 + v7[13], &v36[v7[13]], v11);
    v52 = v7[14];
    v53 = (char *)v35 + v52;
    v54 = &v36[v52];
    if (v17(v54, 1, v11))
    {
      sub_1BC9FCA58(0);
      memcpy(v53, v54, *(_QWORD *)(*(_QWORD *)(v55 - 8) + 64));
    }
    else
    {
      v13(v53, v54, v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v51 + 56))(v53, 0, 1, v11);
    }
    (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v62 + 56))(v35, 0, 1, v7);
    v33 = a3;
  }
  v56 = v33[8];
  *(_QWORD *)((char *)v24 + v33[7]) = *(_QWORD *)&v22[v33[7]];
  *(_QWORD *)((char *)v24 + v56) = *(_QWORD *)&v22[v56];
  v57 = v33[9];
  v58 = (char *)v24 + v57;
  v59 = &v22[v57];
  *(_QWORD *)v58 = *(_QWORD *)v59;
  v58[8] = v59[8];
  return v24;
}

char *assignWithTake for ActivitySnidgetCurrentValueVisualizationView(char *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  void *v9;
  int *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(char *, char *, uint64_t);
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t (*v20)(char *, uint64_t, uint64_t);
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  _QWORD *v45;
  uint64_t (*v46)(char *, uint64_t, int *);
  int v47;
  int v48;
  void (*v49)(uint64_t, char *, uint64_t);
  uint64_t v50;
  void *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  size_t v55;
  void *v56;
  char *v57;
  void *v58;
  uint64_t v59;
  char *v60;
  char *v61;
  int v62;
  int v63;
  uint64_t v64;
  void *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  uint64_t v78;
  void *v79;
  uint64_t v80;
  char *v81;
  char *v82;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  char *v87;
  int v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  char *v93;
  int v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  char *v100;
  int v101;
  int v102;
  uint64_t v103;
  void (**__src)(uint64_t, _QWORD, uint64_t, int *);
  char *__srca;
  int *v106;
  _QWORD *v107;
  uint64_t v108;

  *(_QWORD *)a1 = *a2;
  swift_release();
  *((_QWORD *)a1 + 1) = a2[1];
  v106 = a3;
  v107 = a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = (char *)a2 + v6;
  *v7 = *((_BYTE *)a2 + v6);
  v9 = *(void **)&a1[v6 + 8];
  *((_QWORD *)v7 + 1) = *(_QWORD *)((char *)a2 + v6 + 8);

  v10 = (int *)type metadata accessor for ActivitySnidgetCurrentValueVisualizationView.ViewModel(0);
  v11 = v10[6];
  v12 = &v7[v11];
  v13 = &v8[v11];
  v14 = sub_1BCAB4CE0();
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(void (**)(char *, char *, uint64_t))(v15 + 40);
  v16(v12, v13, v14);
  v17 = v10[7];
  v18 = &v7[v17];
  v19 = &v8[v17];
  v108 = v15;
  v20 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48);
  v21 = v20(&v7[v17], 1, v14);
  v22 = v20(v19, 1, v14);
  if (v21)
  {
    if (!v22)
    {
      (*(void (**)(char *, char *, uint64_t))(v108 + 32))(v18, v19, v14);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v108 + 56))(v18, 0, 1, v14);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v22)
  {
    (*(void (**)(char *, uint64_t))(v108 + 8))(v18, v14);
LABEL_6:
    sub_1BC9FCA58(0);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    goto LABEL_7;
  }
  v16(v18, v19, v14);
LABEL_7:
  v16(&v7[v10[8]], &v8[v10[8]], v14);
  v24 = v10[9];
  v25 = &v7[v24];
  v26 = &v8[v24];
  v27 = v20(&v7[v24], 1, v14);
  v28 = v20(v26, 1, v14);
  if (v27)
  {
    if (!v28)
    {
      (*(void (**)(char *, char *, uint64_t))(v108 + 32))(v25, v26, v14);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v108 + 56))(v25, 0, 1, v14);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v28)
  {
    (*(void (**)(char *, uint64_t))(v108 + 8))(v25, v14);
LABEL_12:
    sub_1BC9FCA58(0);
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    goto LABEL_13;
  }
  v16(v25, v26, v14);
LABEL_13:
  v16(&v7[v10[10]], &v8[v10[10]], v14);
  v30 = v10[11];
  v31 = &v7[v30];
  v32 = &v8[v30];
  v33 = v20(&v7[v30], 1, v14);
  v34 = v20(v32, 1, v14);
  if (v33)
  {
    if (!v34)
    {
      (*(void (**)(char *, char *, uint64_t))(v108 + 32))(v31, v32, v14);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v108 + 56))(v31, 0, 1, v14);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v34)
  {
    (*(void (**)(char *, uint64_t))(v108 + 8))(v31, v14);
LABEL_18:
    sub_1BC9FCA58(0);
    memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
    goto LABEL_19;
  }
  v16(v31, v32, v14);
LABEL_19:
  v7[v10[12]] = v8[v10[12]];
  v16(&v7[v10[13]], &v8[v10[13]], v14);
  v36 = v10[14];
  v37 = &v7[v36];
  v38 = &v8[v36];
  v39 = v20(&v7[v36], 1, v14);
  v40 = v20(v38, 1, v14);
  if (v39)
  {
    if (!v40)
    {
      (*(void (**)(char *, char *, uint64_t))(v108 + 32))(v37, v38, v14);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v108 + 56))(v37, 0, 1, v14);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  if (v40)
  {
    (*(void (**)(char *, uint64_t))(v108 + 8))(v37, v14);
LABEL_24:
    sub_1BC9FCA58(0);
    memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
    goto LABEL_25;
  }
  v16(v37, v38, v14);
LABEL_25:
  v42 = v106[6];
  v43 = (uint64_t)&a1[v42];
  v44 = (char *)v107 + v42;
  v45 = (_QWORD *)*((_QWORD *)v10 - 1);
  v46 = (uint64_t (*)(char *, uint64_t, int *))v45[6];
  v47 = v46(&a1[v42], 1, v10);
  v48 = v46(v44, 1, v10);
  if (!v47)
  {
    if (v48)
    {
      sub_1BC997208(v43, type metadata accessor for ActivitySnidgetCurrentValueVisualizationView.ViewModel);
      goto LABEL_31;
    }
    *(_BYTE *)v43 = *v44;
    v58 = *(void **)(v43 + 8);
    *(_QWORD *)(v43 + 8) = *((_QWORD *)v44 + 1);

    v16((char *)(v43 + v10[6]), &v44[v10[6]], v14);
    v59 = v10[7];
    v60 = (char *)(v43 + v59);
    v61 = &v44[v59];
    v62 = v20((char *)(v43 + v59), 1, v14);
    v63 = v20(v61, 1, v14);
    if (v62)
    {
      if (!v63)
      {
        (*(void (**)(char *, char *, uint64_t))(v108 + 32))(v60, v61, v14);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v108 + 56))(v60, 0, 1, v14);
        goto LABEL_55;
      }
    }
    else
    {
      if (!v63)
      {
        v16(v60, v61, v14);
LABEL_55:
        v16((char *)(v43 + v10[8]), &v44[v10[8]], v14);
        v85 = v10[9];
        v86 = (char *)(v43 + v85);
        v87 = &v44[v85];
        v88 = v20((char *)(v43 + v85), 1, v14);
        v89 = v20(v87, 1, v14);
        if (v88)
        {
          if (!v89)
          {
            (*(void (**)(char *, char *, uint64_t))(v108 + 32))(v86, v87, v14);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v108 + 56))(v86, 0, 1, v14);
            goto LABEL_61;
          }
        }
        else
        {
          if (!v89)
          {
            v16(v86, v87, v14);
LABEL_61:
            v16((char *)(v43 + v10[10]), &v44[v10[10]], v14);
            v91 = v10[11];
            v92 = (char *)(v43 + v91);
            v93 = &v44[v91];
            v94 = v20((char *)(v43 + v91), 1, v14);
            __srca = v93;
            v95 = v20(v93, 1, v14);
            if (v94)
            {
              v96 = v108;
              if (!v95)
              {
                (*(void (**)(char *, char *, uint64_t))(v108 + 32))(v92, __srca, v14);
                (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v108 + 56))(v92, 0, 1, v14);
LABEL_67:
                *(_BYTE *)(v43 + v10[12]) = v44[v10[12]];
                v16((char *)(v43 + v10[13]), &v44[v10[13]], v14);
                v98 = v10[14];
                v99 = (char *)(v43 + v98);
                v100 = &v44[v98];
                v101 = v20(v99, 1, v14);
                v102 = v20(v100, 1, v14);
                if (v101)
                {
                  if (!v102)
                  {
                    (*(void (**)(char *, char *, uint64_t))(v96 + 32))(v99, v100, v14);
                    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v96 + 56))(v99, 0, 1, v14);
                    goto LABEL_51;
                  }
                }
                else
                {
                  if (!v102)
                  {
                    v16(v99, v100, v14);
                    goto LABEL_51;
                  }
                  (*(void (**)(char *, uint64_t))(v96 + 8))(v99, v14);
                }
                sub_1BC9FCA58(0);
                v55 = *(_QWORD *)(*(_QWORD *)(v103 - 8) + 64);
                v56 = v99;
                v57 = v100;
                goto LABEL_32;
              }
            }
            else
            {
              v96 = v108;
              if (!v95)
              {
                v16(v92, __srca, v14);
                goto LABEL_67;
              }
              (*(void (**)(char *, uint64_t))(v108 + 8))(v92, v14);
            }
            sub_1BC9FCA58(0);
            memcpy(v92, __srca, *(_QWORD *)(*(_QWORD *)(v97 - 8) + 64));
            goto LABEL_67;
          }
          (*(void (**)(char *, uint64_t))(v108 + 8))(v86, v14);
        }
        sub_1BC9FCA58(0);
        memcpy(v86, v87, *(_QWORD *)(*(_QWORD *)(v90 - 8) + 64));
        goto LABEL_61;
      }
      (*(void (**)(char *, uint64_t))(v108 + 8))(v60, v14);
    }
    sub_1BC9FCA58(0);
    memcpy(v60, v61, *(_QWORD *)(*(_QWORD *)(v84 - 8) + 64));
    goto LABEL_55;
  }
  if (v48)
  {
LABEL_31:
    sub_1BC9FCA3C(0);
    v55 = *(_QWORD *)(*(_QWORD *)(v54 - 8) + 64);
    v56 = (void *)v43;
    v57 = v44;
LABEL_32:
    memcpy(v56, v57, v55);
    goto LABEL_51;
  }
  __src = (void (**)(uint64_t, _QWORD, uint64_t, int *))v45;
  *(_BYTE *)v43 = *v44;
  *(_QWORD *)(v43 + 8) = *((_QWORD *)v44 + 1);
  v49 = *(void (**)(uint64_t, char *, uint64_t))(v108 + 32);
  v49(v43 + v10[6], &v44[v10[6]], v14);
  v50 = v10[7];
  v51 = (void *)(v43 + v50);
  v52 = &v44[v50];
  if (v20(&v44[v50], 1, v14))
  {
    sub_1BC9FCA58(0);
    memcpy(v51, v52, *(_QWORD *)(*(_QWORD *)(v53 - 8) + 64));
  }
  else
  {
    v49((uint64_t)v51, v52, v14);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v108 + 56))(v51, 0, 1, v14);
  }
  v49(v43 + v10[8], &v44[v10[8]], v14);
  v64 = v10[9];
  v65 = (void *)(v43 + v64);
  v66 = &v44[v64];
  if (v20(&v44[v64], 1, v14))
  {
    sub_1BC9FCA58(0);
    memcpy(v65, v66, *(_QWORD *)(*(_QWORD *)(v67 - 8) + 64));
  }
  else
  {
    v49((uint64_t)v65, v66, v14);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v108 + 56))(v65, 0, 1, v14);
  }
  v49(v43 + v10[10], &v44[v10[10]], v14);
  v68 = v10[11];
  v69 = (void *)(v43 + v68);
  v70 = &v44[v68];
  if (v20(&v44[v68], 1, v14))
  {
    sub_1BC9FCA58(0);
    memcpy(v69, v70, *(_QWORD *)(*(_QWORD *)(v71 - 8) + 64));
  }
  else
  {
    v49((uint64_t)v69, v70, v14);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v108 + 56))(v69, 0, 1, v14);
  }
  *(_BYTE *)(v43 + v10[12]) = v44[v10[12]];
  v49(v43 + v10[13], &v44[v10[13]], v14);
  v72 = v10[14];
  v73 = (void *)(v43 + v72);
  v74 = &v44[v72];
  if (v20(v74, 1, v14))
  {
    sub_1BC9FCA58(0);
    memcpy(v73, v74, *(_QWORD *)(*(_QWORD *)(v75 - 8) + 64));
  }
  else
  {
    v49((uint64_t)v73, v74, v14);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v108 + 56))(v73, 0, 1, v14);
  }
  __src[7](v43, 0, 1, v10);
LABEL_51:
  v76 = v106[7];
  v77 = *(void **)&a1[v76];
  *(_QWORD *)&a1[v76] = *(_QWORD *)((char *)v107 + v76);

  v78 = v106[8];
  v79 = *(void **)&a1[v78];
  *(_QWORD *)&a1[v78] = *(_QWORD *)((char *)v107 + v78);

  v80 = v106[9];
  v81 = &a1[v80];
  v82 = (char *)v107 + v80;
  *(_QWORD *)v81 = *(_QWORD *)v82;
  v81[8] = v82[8];
  return a1;
}

uint64_t getEnumTagSinglePayload for ActivitySnidgetCurrentValueVisualizationView()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BCA00F1C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v12;

  v6 = type metadata accessor for ActivitySnidgetCurrentValueVisualizationView.ViewModel(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = a3[5];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  sub_1BC9FCA3C(0);
  v7 = *(_QWORD *)(v10 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v10;
    v9 = a3[6];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v12 = *(_QWORD *)(a1 + a3[7]);
  if (v12 >= 0xFFFFFFFF)
    LODWORD(v12) = -1;
  return (v12 + 1);
}

uint64_t storeEnumTagSinglePayload for ActivitySnidgetCurrentValueVisualizationView()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

void sub_1BCA00FCC(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v8 = type metadata accessor for ActivitySnidgetCurrentValueVisualizationView.ViewModel(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = a4[5];
LABEL_5:
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
    return;
  }
  sub_1BC9FCA3C(0);
  v9 = *(_QWORD *)(v12 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v12;
    v11 = a4[6];
    goto LABEL_5;
  }
  *(_QWORD *)(a1 + a4[7]) = (a2 - 1);
}

void sub_1BCA0106C()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for ActivitySnidgetCurrentValueVisualizationView.ViewModel(319);
  if (v0 <= 0x3F)
  {
    sub_1BC9FCA3C(319);
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

char *initializeBufferWithCopyOfBuffer for ActivitySnidgetCurrentValueVisualizationView.ViewModel(char *a1, char *a2, int *a3)
{
  char *v4;
  int v5;
  void *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  id v14;
  uint64_t v15;
  char *v16;
  char *v17;
  unsigned int (*v18)(char *, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v20 = *(_QWORD *)a2;
    *(_QWORD *)v4 = *(_QWORD *)a2;
    v4 = (char *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *a1 = *a2;
    v7 = (void *)*((_QWORD *)a2 + 1);
    *((_QWORD *)a1 + 1) = v7;
    v8 = a3[6];
    v9 = &a1[v8];
    v10 = &a2[v8];
    v11 = sub_1BCAB4CE0();
    v12 = *(_QWORD *)(v11 - 8);
    v13 = *(void (**)(char *, char *, uint64_t))(v12 + 16);
    v14 = v7;
    v13(v9, v10, v11);
    v15 = a3[7];
    v16 = &v4[v15];
    v17 = &a2[v15];
    v18 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
    if (v18(&a2[v15], 1, v11))
    {
      sub_1BC9FCA58(0);
      memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    }
    else
    {
      v13(v16, v17, v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v16, 0, 1, v11);
    }
    v13(&v4[a3[8]], &a2[a3[8]], v11);
    v21 = a3[9];
    v22 = &v4[v21];
    v23 = &a2[v21];
    if (v18(&a2[v21], 1, v11))
    {
      sub_1BC9FCA58(0);
      memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    }
    else
    {
      v13(v22, v23, v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v22, 0, 1, v11);
    }
    v13(&v4[a3[10]], &a2[a3[10]], v11);
    v25 = a3[11];
    v26 = &v4[v25];
    v27 = &a2[v25];
    if (v18(&a2[v25], 1, v11))
    {
      sub_1BC9FCA58(0);
      memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    }
    else
    {
      v13(v26, v27, v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v26, 0, 1, v11);
    }
    v29 = a3[13];
    v4[a3[12]] = a2[a3[12]];
    v13(&v4[v29], &a2[v29], v11);
    v30 = a3[14];
    v31 = &v4[v30];
    v32 = &a2[v30];
    if (v18(v32, 1, v11))
    {
      sub_1BC9FCA58(0);
      memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
    }
    else
    {
      v13(v31, v32, v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v31, 0, 1, v11);
    }
  }
  return v4;
}

uint64_t destroy for ActivitySnidgetCurrentValueVisualizationView.ViewModel(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  void (*v13)(uint64_t, uint64_t);

  v4 = a1 + a2[6];
  v5 = sub_1BCAB4CE0();
  v6 = *(_QWORD *)(v5 - 8);
  v13 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v13(v4, v5);
  v7 = a1 + a2[7];
  v8 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  if (!v8(v7, 1, v5))
    v13(v7, v5);
  v13(a1 + a2[8], v5);
  v9 = a1 + a2[9];
  if (!v8(v9, 1, v5))
    v13(v9, v5);
  v13(a1 + a2[10], v5);
  v10 = a1 + a2[11];
  if (!v8(v10, 1, v5))
    v13(v10, v5);
  v13(a1 + a2[13], v5);
  v11 = a1 + a2[14];
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v8)(v11, 1, v5);
  if (!(_DWORD)result)
    return ((uint64_t (*)(uint64_t, uint64_t))v13)(v11, v5);
  return result;
}

uint64_t initializeWithCopy for ActivitySnidgetCurrentValueVisualizationView.ViewModel(uint64_t a1, uint64_t a2, int *a3)
{
  void *v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void *, const void *, uint64_t);
  id v13;
  uint64_t v14;
  void *v15;
  const void *v16;
  unsigned int (*v17)(const void *, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  void *v20;
  const void *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  const void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  const void *v30;
  uint64_t v31;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v6 = *(void **)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  v7 = a3[6];
  v8 = (void *)(a1 + v7);
  v9 = (const void *)(a2 + v7);
  v10 = sub_1BCAB4CE0();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(void (**)(void *, const void *, uint64_t))(v11 + 16);
  v13 = v6;
  v12(v8, v9, v10);
  v14 = a3[7];
  v15 = (void *)(a1 + v14);
  v16 = (const void *)(a2 + v14);
  v17 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48);
  if (v17((const void *)(a2 + v14), 1, v10))
  {
    sub_1BC9FCA58(0);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  else
  {
    v12(v15, v16, v10);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v15, 0, 1, v10);
  }
  v12((void *)(a1 + a3[8]), (const void *)(a2 + a3[8]), v10);
  v19 = a3[9];
  v20 = (void *)(a1 + v19);
  v21 = (const void *)(a2 + v19);
  if (v17((const void *)(a2 + v19), 1, v10))
  {
    sub_1BC9FCA58(0);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
  }
  else
  {
    v12(v20, v21, v10);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v20, 0, 1, v10);
  }
  v12((void *)(a1 + a3[10]), (const void *)(a2 + a3[10]), v10);
  v23 = a3[11];
  v24 = (void *)(a1 + v23);
  v25 = (const void *)(a2 + v23);
  if (v17((const void *)(a2 + v23), 1, v10))
  {
    sub_1BC9FCA58(0);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
  }
  else
  {
    v12(v24, v25, v10);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v24, 0, 1, v10);
  }
  v27 = a3[13];
  *(_BYTE *)(a1 + a3[12]) = *(_BYTE *)(a2 + a3[12]);
  v12((void *)(a1 + v27), (const void *)(a2 + v27), v10);
  v28 = a3[14];
  v29 = (void *)(a1 + v28);
  v30 = (const void *)(a2 + v28);
  if (v17(v30, 1, v10))
  {
    sub_1BC9FCA58(0);
    memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
  }
  else
  {
    v12(v29, v30, v10);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v29, 0, 1, v10);
  }
  return a1;
}

uint64_t assignWithCopy for ActivitySnidgetCurrentValueVisualizationView.ViewModel(uint64_t a1, uint64_t a2, int *a3)
{
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  void *v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(void *, const void *, uint64_t);
  uint64_t v15;
  void *v16;
  const void *v17;
  uint64_t (*v18)(const void *, uint64_t, uint64_t);
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  const void *v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  const void *v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  const void *v36;
  int v37;
  int v38;
  uint64_t v39;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v6 = *(void **)(a2 + 8);
  v7 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  v8 = v6;

  v9 = a3[6];
  v10 = (void *)(a1 + v9);
  v11 = (const void *)(a2 + v9);
  v12 = sub_1BCAB4CE0();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(void (**)(void *, const void *, uint64_t))(v13 + 24);
  v14(v10, v11, v12);
  v15 = a3[7];
  v16 = (void *)(a1 + v15);
  v17 = (const void *)(a2 + v15);
  v18 = *(uint64_t (**)(const void *, uint64_t, uint64_t))(v13 + 48);
  v19 = v18((const void *)(a1 + v15), 1, v12);
  v20 = v18(v17, 1, v12);
  if (v19)
  {
    if (!v20)
    {
      (*(void (**)(void *, const void *, uint64_t))(v13 + 16))(v16, v17, v12);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v16, 0, 1, v12);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v20)
  {
    (*(void (**)(void *, uint64_t))(v13 + 8))(v16, v12);
LABEL_6:
    sub_1BC9FCA58(0);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    goto LABEL_7;
  }
  v14(v16, v17, v12);
LABEL_7:
  v14((void *)(a1 + a3[8]), (const void *)(a2 + a3[8]), v12);
  v22 = a3[9];
  v23 = (void *)(a1 + v22);
  v24 = (const void *)(a2 + v22);
  v25 = v18((const void *)(a1 + v22), 1, v12);
  v26 = v18(v24, 1, v12);
  if (v25)
  {
    if (!v26)
    {
      (*(void (**)(void *, const void *, uint64_t))(v13 + 16))(v23, v24, v12);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v23, 0, 1, v12);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v26)
  {
    (*(void (**)(void *, uint64_t))(v13 + 8))(v23, v12);
LABEL_12:
    sub_1BC9FCA58(0);
    memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    goto LABEL_13;
  }
  v14(v23, v24, v12);
LABEL_13:
  v14((void *)(a1 + a3[10]), (const void *)(a2 + a3[10]), v12);
  v28 = a3[11];
  v29 = (void *)(a1 + v28);
  v30 = (const void *)(a2 + v28);
  v31 = v18((const void *)(a1 + v28), 1, v12);
  v32 = v18(v30, 1, v12);
  if (v31)
  {
    if (!v32)
    {
      (*(void (**)(void *, const void *, uint64_t))(v13 + 16))(v29, v30, v12);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v29, 0, 1, v12);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v32)
  {
    (*(void (**)(void *, uint64_t))(v13 + 8))(v29, v12);
LABEL_18:
    sub_1BC9FCA58(0);
    memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
    goto LABEL_19;
  }
  v14(v29, v30, v12);
LABEL_19:
  *(_BYTE *)(a1 + a3[12]) = *(_BYTE *)(a2 + a3[12]);
  v14((void *)(a1 + a3[13]), (const void *)(a2 + a3[13]), v12);
  v34 = a3[14];
  v35 = (void *)(a1 + v34);
  v36 = (const void *)(a2 + v34);
  v37 = v18((const void *)(a1 + v34), 1, v12);
  v38 = v18(v36, 1, v12);
  if (!v37)
  {
    if (!v38)
    {
      v14(v35, v36, v12);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v13 + 8))(v35, v12);
    goto LABEL_24;
  }
  if (v38)
  {
LABEL_24:
    sub_1BC9FCA58(0);
    memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, const void *, uint64_t))(v13 + 16))(v35, v36, v12);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v35, 0, 1, v12);
  return a1;
}

uint64_t initializeWithTake for ActivitySnidgetCurrentValueVisualizationView.ViewModel(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void *v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(void *, const void *, uint64_t);
  uint64_t v12;
  void *v13;
  const void *v14;
  unsigned int (*v15)(const void *, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  void *v18;
  const void *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  const void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  const void *v28;
  uint64_t v29;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v6 = a3[6];
  v7 = (void *)(a1 + v6);
  v8 = (const void *)(a2 + v6);
  v9 = sub_1BCAB4CE0();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(void *, const void *, uint64_t))(v10 + 32);
  v11(v7, v8, v9);
  v12 = a3[7];
  v13 = (void *)(a1 + v12);
  v14 = (const void *)(a2 + v12);
  v15 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48);
  if (v15((const void *)(a2 + v12), 1, v9))
  {
    sub_1BC9FCA58(0);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    v11(v13, v14, v9);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v13, 0, 1, v9);
  }
  v11((void *)(a1 + a3[8]), (const void *)(a2 + a3[8]), v9);
  v17 = a3[9];
  v18 = (void *)(a1 + v17);
  v19 = (const void *)(a2 + v17);
  if (v15((const void *)(a2 + v17), 1, v9))
  {
    sub_1BC9FCA58(0);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
  }
  else
  {
    v11(v18, v19, v9);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v18, 0, 1, v9);
  }
  v11((void *)(a1 + a3[10]), (const void *)(a2 + a3[10]), v9);
  v21 = a3[11];
  v22 = (void *)(a1 + v21);
  v23 = (const void *)(a2 + v21);
  if (v15((const void *)(a2 + v21), 1, v9))
  {
    sub_1BC9FCA58(0);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
  }
  else
  {
    v11(v22, v23, v9);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v22, 0, 1, v9);
  }
  v25 = a3[13];
  *(_BYTE *)(a1 + a3[12]) = *(_BYTE *)(a2 + a3[12]);
  v11((void *)(a1 + v25), (const void *)(a2 + v25), v9);
  v26 = a3[14];
  v27 = (void *)(a1 + v26);
  v28 = (const void *)(a2 + v26);
  if (v15(v28, 1, v9))
  {
    sub_1BC9FCA58(0);
    memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
  }
  else
  {
    v11(v27, v28, v9);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v27, 0, 1, v9);
  }
  return a1;
}

uint64_t assignWithTake for ActivitySnidgetCurrentValueVisualizationView.ViewModel(uint64_t a1, uint64_t a2, int *a3)
{
  void *v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void *, const void *, uint64_t);
  uint64_t v13;
  void *v14;
  const void *v15;
  uint64_t (*v16)(const void *, uint64_t, uint64_t);
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  const void *v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  const void *v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  const void *v35;
  int v36;
  int v37;
  uint64_t v38;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v6 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);

  v7 = a3[6];
  v8 = (void *)(a1 + v7);
  v9 = (const void *)(a2 + v7);
  v10 = sub_1BCAB4CE0();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(void (**)(void *, const void *, uint64_t))(v11 + 40);
  v12(v8, v9, v10);
  v13 = a3[7];
  v14 = (void *)(a1 + v13);
  v15 = (const void *)(a2 + v13);
  v16 = *(uint64_t (**)(const void *, uint64_t, uint64_t))(v11 + 48);
  v17 = v16((const void *)(a1 + v13), 1, v10);
  v18 = v16(v15, 1, v10);
  if (v17)
  {
    if (!v18)
    {
      (*(void (**)(void *, const void *, uint64_t))(v11 + 32))(v14, v15, v10);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v14, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v18)
  {
    (*(void (**)(void *, uint64_t))(v11 + 8))(v14, v10);
LABEL_6:
    sub_1BC9FCA58(0);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    goto LABEL_7;
  }
  v12(v14, v15, v10);
LABEL_7:
  v12((void *)(a1 + a3[8]), (const void *)(a2 + a3[8]), v10);
  v20 = a3[9];
  v21 = (void *)(a1 + v20);
  v22 = (const void *)(a2 + v20);
  v23 = v16((const void *)(a1 + v20), 1, v10);
  v24 = v16(v22, 1, v10);
  if (v23)
  {
    if (!v24)
    {
      (*(void (**)(void *, const void *, uint64_t))(v11 + 32))(v21, v22, v10);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v21, 0, 1, v10);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v24)
  {
    (*(void (**)(void *, uint64_t))(v11 + 8))(v21, v10);
LABEL_12:
    sub_1BC9FCA58(0);
    memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    goto LABEL_13;
  }
  v12(v21, v22, v10);
LABEL_13:
  v12((void *)(a1 + a3[10]), (const void *)(a2 + a3[10]), v10);
  v26 = a3[11];
  v27 = (void *)(a1 + v26);
  v28 = (const void *)(a2 + v26);
  v29 = v16((const void *)(a1 + v26), 1, v10);
  v30 = v16(v28, 1, v10);
  if (v29)
  {
    if (!v30)
    {
      (*(void (**)(void *, const void *, uint64_t))(v11 + 32))(v27, v28, v10);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v27, 0, 1, v10);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v30)
  {
    (*(void (**)(void *, uint64_t))(v11 + 8))(v27, v10);
LABEL_18:
    sub_1BC9FCA58(0);
    memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
    goto LABEL_19;
  }
  v12(v27, v28, v10);
LABEL_19:
  v32 = a3[13];
  *(_BYTE *)(a1 + a3[12]) = *(_BYTE *)(a2 + a3[12]);
  v12((void *)(a1 + v32), (const void *)(a2 + v32), v10);
  v33 = a3[14];
  v34 = (void *)(a1 + v33);
  v35 = (const void *)(a2 + v33);
  v36 = v16((const void *)(a1 + v33), 1, v10);
  v37 = v16(v35, 1, v10);
  if (!v36)
  {
    if (!v37)
    {
      v12(v34, v35, v10);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v11 + 8))(v34, v10);
    goto LABEL_24;
  }
  if (v37)
  {
LABEL_24:
    sub_1BC9FCA58(0);
    memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, const void *, uint64_t))(v11 + 32))(v34, v35, v10);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v34, 0, 1, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for ActivitySnidgetCurrentValueVisualizationView.ViewModel()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BCA0212C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_1BCAB4CE0();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 24);
    }
    else
    {
      sub_1BC9FCA58(0);
      v10 = v12;
      v9 = *(_QWORD *)(v12 - 8);
      v11 = *(int *)(a3 + 28);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for ActivitySnidgetCurrentValueVisualizationView.ViewModel()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BCA021D8(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v8 = sub_1BCAB4CE0();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 24);
    }
    else
    {
      sub_1BC9FCA58(0);
      v10 = v12;
      v9 = *(_QWORD *)(v12 - 8);
      v11 = *(int *)(a4 + 28);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

void sub_1BCA02274()
{
  unint64_t v0;
  unint64_t v1;

  sub_1BCAB4CE0();
  if (v0 <= 0x3F)
  {
    sub_1BC9FCA58(319);
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

unint64_t sub_1BCA02328()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[4];

  result = qword_1ED6C4A98;
  if (!qword_1ED6C4A98)
  {
    sub_1BC9FCA20(255);
    v2 = v1;
    sub_1BC9FC7E4();
    v4[2] = v3;
    v4[3] = sub_1BC996948(&qword_1ED6C4B00, (uint64_t (*)(uint64_t))sub_1BC9FC7E4, MEMORY[0x1E0CDFCC0]);
    v4[0] = swift_getOpaqueTypeConformance2();
    v4[1] = MEMORY[0x1E0CDA228];
    result = MEMORY[0x1BCCFBE84](MEMORY[0x1E0CD9C20], v2, v4);
    atomic_store(result, (unint64_t *)&qword_1ED6C4A98);
  }
  return result;
}

unint64_t sub_1BCA023D0()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_1ED6C4ED0;
  if (!qword_1ED6C4ED0)
  {
    sub_1BCA03158(255, &qword_1ED6C4ED8, (uint64_t (*)(uint64_t))sub_1BC9FD6EC, (uint64_t (*)(uint64_t))sub_1BC9FCB84, MEMORY[0x1E0CDB880]);
    v2 = v1;
    v3[0] = sub_1BC996948(&qword_1ED6C4F20, (uint64_t (*)(uint64_t))sub_1BC9FD6EC, MEMORY[0x1E0CDFB10]);
    v3[1] = sub_1BC996948(&qword_1ED6C4E70, (uint64_t (*)(uint64_t))sub_1BC9FCB84, MEMORY[0x1E0CD8CC8]);
    result = MEMORY[0x1BCCFBE84](MEMORY[0x1E0CDB8A0], v2, v3);
    atomic_store(result, (unint64_t *)&qword_1ED6C4ED0);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for ActivitySnidgetCurrentValueVisualizationView.ViewModel.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF6)
    goto LABEL_17;
  if (a2 + 10 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 10) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 10;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 10;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 10;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xB;
  v8 = v6 - 11;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ActivitySnidgetCurrentValueVisualizationView.ViewModel.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 10 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 10) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF6)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF5)
    return ((uint64_t (*)(void))((char *)&loc_1BCA0256C + 4 * byte_1BCAC2430[v4]))();
  *a1 = a2 + 10;
  return ((uint64_t (*)(void))((char *)sub_1BCA025A0 + 4 * byte_1BCAC242B[v4]))();
}

uint64_t sub_1BCA025A0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BCA025A8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BCA025B0);
  return result;
}

uint64_t sub_1BCA025BC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BCA025C4);
  *(_BYTE *)result = a2 + 10;
  return result;
}

uint64_t sub_1BCA025C8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BCA025D0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ActivitySnidgetCurrentValueVisualizationView.ViewModel.CodingKeys()
{
  return &type metadata for ActivitySnidgetCurrentValueVisualizationView.ViewModel.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for ActivitySummarySnidgetView.ActionHandlerData.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1BCA0262C + 4 * byte_1BCAC2435[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1BCA0264C + 4 * byte_1BCAC243A[v4]))();
}

_BYTE *sub_1BCA0262C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1BCA0264C(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1BCA02654(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1BCA0265C(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1BCA02664(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1BCA0266C(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for ActivitySummarySnidgetView.ActionHandlerData.CodingKeys()
{
  return &type metadata for ActivitySummarySnidgetView.ActionHandlerData.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for ActivitySummarySnidgetView.ViewModel.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1BCA026D4 + 4 * byte_1BCAC2444[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1BCA02708 + 4 * byte_1BCAC243F[v4]))();
}

uint64_t sub_1BCA02708(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BCA02710(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BCA02718);
  return result;
}

uint64_t sub_1BCA02724(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BCA0272CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1BCA02730(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BCA02738(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ActivitySummarySnidgetView.ViewModel.CodingKeys()
{
  return &type metadata for ActivitySummarySnidgetView.ViewModel.CodingKeys;
}

unint64_t sub_1BCA02758()
{
  unint64_t result;

  result = qword_1EF478E80;
  if (!qword_1EF478E80)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCAC2A9C, &type metadata for ActivitySummarySnidgetView.ViewModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF478E80);
  }
  return result;
}

unint64_t sub_1BCA027A0()
{
  unint64_t result;

  result = qword_1EF478E88;
  if (!qword_1EF478E88)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCAC2B54, &type metadata for ActivitySummarySnidgetView.ActionHandlerData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF478E88);
  }
  return result;
}

unint64_t sub_1BCA027E8()
{
  unint64_t result;

  result = qword_1EF478E90;
  if (!qword_1EF478E90)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCAC2C0C, &type metadata for ActivitySnidgetCurrentValueVisualizationView.ViewModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF478E90);
  }
  return result;
}

unint64_t sub_1BCA02830()
{
  unint64_t result;

  result = qword_1ED6C6200;
  if (!qword_1ED6C6200)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCAC2B7C, &type metadata for ActivitySnidgetCurrentValueVisualizationView.ViewModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED6C6200);
  }
  return result;
}

unint64_t sub_1BCA02878()
{
  unint64_t result;

  result = qword_1ED6C61F8;
  if (!qword_1ED6C61F8)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCAC2BA4, &type metadata for ActivitySnidgetCurrentValueVisualizationView.ViewModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED6C61F8);
  }
  return result;
}

unint64_t sub_1BCA028C0()
{
  unint64_t result;

  result = qword_1ED6C6588;
  if (!qword_1ED6C6588)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCAC2AC4, &type metadata for ActivitySummarySnidgetView.ActionHandlerData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED6C6588);
  }
  return result;
}

unint64_t sub_1BCA02908()
{
  unint64_t result;

  result = qword_1ED6C6580;
  if (!qword_1ED6C6580)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCAC2AEC, &type metadata for ActivitySummarySnidgetView.ActionHandlerData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED6C6580);
  }
  return result;
}

unint64_t sub_1BCA02950()
{
  unint64_t result;

  result = qword_1ED6C6428;
  if (!qword_1ED6C6428)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCAC2A0C, &type metadata for ActivitySummarySnidgetView.ViewModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED6C6428);
  }
  return result;
}

unint64_t sub_1BCA02998()
{
  unint64_t result;

  result = qword_1ED6C6420;
  if (!qword_1ED6C6420)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCAC2A34, &type metadata for ActivitySummarySnidgetView.ViewModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED6C6420);
  }
  return result;
}

uint64_t sub_1BCA029DC(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6F4D726564616568 && a2 == 0xEB000000006C6564;
  if (v2 || (sub_1BCAB67C8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x80000001BCAD0C40)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_1BCAB67C8();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_1BCA02AE0(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;

  if (a1 == 0xD000000000000014 && a2 == 0x80000001BCAD0CB0)
  {
    swift_bridgeObjectRelease();
    v2 = 0;
  }
  else
  {
    v3 = sub_1BCAB67C8();
    swift_bridgeObjectRelease();
    v2 = v3 ^ 1;
  }
  return v2 & 1;
}

uint64_t sub_1BCA02B64(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x695265766F4D7369 && a2 == 0xEE00796C6E4F676ELL;
  if (v2 || (sub_1BCAB67C8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7974697669746361 && a2 == 0xEF7972616D6D7553 || (sub_1BCAB67C8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6C74695465766F6DLL && a2 == 0xE900000000000065 || (sub_1BCAB67C8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x756C615665766F6DLL && a2 == 0xE900000000000065 || (sub_1BCAB67C8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6573696372657865 && a2 == 0xED0000656C746954 || (sub_1BCAB67C8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x6573696372657865 && a2 == 0xED000065756C6156 || (sub_1BCAB67C8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x746954646E617473 && a2 == 0xEA0000000000656CLL || (sub_1BCAB67C8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x6C6156646E617473 && a2 == 0xEA00000000006575 || (sub_1BCAB67C8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000001BCAD0D20 || (sub_1BCAB67C8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000001BCAD0D40 || (sub_1BCAB67C8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000001BCAD0D60)
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else
  {
    v6 = sub_1BCAB67C8();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 10;
    else
      return 11;
  }
}

unint64_t sub_1BCA03054()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1EF478EA0;
  if (!qword_1EF478EA0)
  {
    sub_1BC9B75E4(255, &qword_1ED6C4E98, MEMORY[0x1E0CDDD78], MEMORY[0x1E0CDA208], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CD9BF0]);
    v2[0] = MEMORY[0x1E0CDDD58];
    v2[1] = MEMORY[0x1E0CDA1F0];
    result = MEMORY[0x1BCCFBE84](MEMORY[0x1E0CD9C20], v1, v2);
    atomic_store(result, (unint64_t *)&qword_1EF478EA0);
  }
  return result;
}

void sub_1BCA030D4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED6C4E88)
  {
    sub_1BCA03158(255, &qword_1ED6C4EE8, (uint64_t (*)(uint64_t))sub_1BC9FCFB0, (uint64_t (*)(uint64_t))sub_1BC9FD030, MEMORY[0x1E0CDB880]);
    v0 = sub_1BCAB5940();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED6C4E88);
  }
}

void sub_1BCA03158(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t), uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  if (!*a2)
  {
    v9 = a3(255);
    v10 = a4(255);
    v11 = a5(a1, v9, v10);
    if (!v12)
      atomic_store(v11, a2);
  }
}

uint64_t dispatch thunk of RecoverableInforming.isRecoverable.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of HealthStoreProviding.healthStore.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t SignificantChange.baseline.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1BC9964B8(v1, a1, type metadata accessor for SignificantChange.Period);
}

uint64_t type metadata accessor for SignificantChange.Period(uint64_t a1)
{
  return sub_1BC9B359C(a1, qword_1ED6C37F0);
}

uint64_t SignificantChange.changes.getter()
{
  type metadata accessor for SignificantChange(0);
  return swift_bridgeObjectRetain();
}

uint64_t type metadata accessor for SignificantChange(uint64_t a1)
{
  return sub_1BC9B359C(a1, qword_1ED6C3898);
}

uint64_t SignificantChange.init(baseline:changes:notification:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;

  sub_1BC9AE330(a1, a4, type metadata accessor for SignificantChange.Period);
  v7 = type metadata accessor for SignificantChange(0);
  *(_QWORD *)(a4 + *(int *)(v7 + 20)) = a2;
  return sub_1BCA032A4(a3, a4 + *(int *)(v7 + 24));
}

uint64_t sub_1BCA032A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1BC998AB0(0, &qword_1ED6C3750, type metadata accessor for SignificantChange.Notification, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for SignificantChange.Notification(uint64_t a1)
{
  return sub_1BC9B359C(a1, qword_1ED6C3710);
}

uint64_t SignificantChange.Period.period.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_1BCAB4BD8();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

double SignificantChange.Period.value.getter()
{
  uint64_t v0;

  return *(double *)(v0 + *(int *)(type metadata accessor for SignificantChange.Period(0) + 20));
}

double SignificantChange.Period.frequency.getter()
{
  uint64_t v0;

  return *(double *)(v0 + *(int *)(type metadata accessor for SignificantChange.Period(0) + 24));
}

uint64_t SignificantChange.Period.change.getter@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for SignificantChange.Period(0);
  *a1 = *(_BYTE *)(v1 + *(int *)(result + 28));
  return result;
}

int *SignificantChange.Period.init(period:value:frequency:change:)@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>)
{
  char v9;
  uint64_t v10;
  int *result;

  v9 = *a2;
  v10 = sub_1BCAB4BD8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(a3, a1, v10);
  result = (int *)type metadata accessor for SignificantChange.Period(0);
  *(double *)(a3 + result[5]) = a4;
  *(double *)(a3 + result[6]) = a5;
  *(_BYTE *)(a3 + result[7]) = v9;
  return result;
}

HealthVisualization::SignificantChange::Period::ChangeType_optional __swiftcall SignificantChange.Period.ChangeType.init(rawValue:)(Swift::String rawValue)
{
  char *v1;
  char *v2;
  uint64_t v3;
  HealthVisualization::SignificantChange::Period::ChangeType_optional result;
  char v5;

  v2 = v1;
  v3 = sub_1BCAB6654();
  result.value = swift_bridgeObjectRelease();
  if (v3 == 1)
    v5 = 1;
  else
    v5 = 2;
  if (!v3)
    v5 = 0;
  *v2 = v5;
  return result;
}

uint64_t SignificantChange.Period.ChangeType.rawValue.getter()
{
  _BYTE *v0;

  if (*v0)
    return 0x6973616572636564;
  else
    return 0x6973616572636E69;
}

uint64_t sub_1BCA034C4()
{
  sub_1BCAB6870();
  sub_1BCAB5F40();
  swift_bridgeObjectRelease();
  return sub_1BCAB6894();
}

uint64_t sub_1BCA03534()
{
  sub_1BCAB5F40();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1BCA03578()
{
  sub_1BCAB6870();
  sub_1BCAB5F40();
  swift_bridgeObjectRelease();
  return sub_1BCAB6894();
}

uint64_t sub_1BCA035E4(char *a1, char *a2)
{
  return sub_1BC99AF6C(*a1, *a2);
}

uint64_t sub_1BCA035F0()
{
  sub_1BCA074AC();
  return sub_1BCAB5FE8();
}

uint64_t sub_1BCA0364C()
{
  sub_1BCA074AC();
  return sub_1BCAB5FD0();
}

HealthVisualization::SignificantChange::Period::ChangeType_optional sub_1BCA03698(Swift::String *a1)
{
  return SignificantChange.Period.ChangeType.init(rawValue:)(*a1);
}

void sub_1BCA036A4(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;

  if (*v1)
    v2 = 0x6973616572636564;
  else
    v2 = 0x6973616572636E69;
  *a1 = v2;
  a1[1] = 0xEA0000000000676ELL;
}

uint64_t sub_1BCA036D8()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1BCA03704 + 4 * byte_1BCAC2D70[*v0]))(0x646F69726570, 0xE600000000000000);
}

uint64_t sub_1BCA03704()
{
  return 0x65756C6176;
}

uint64_t sub_1BCA03718()
{
  return 0x636E657571657266;
}

uint64_t sub_1BCA03734()
{
  return 0x65676E616863;
}

uint64_t sub_1BCA03744@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1BCA05210(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1BCA03768()
{
  sub_1BCA04DF4();
  return sub_1BCAB68D0();
}

uint64_t sub_1BCA03790()
{
  sub_1BCA04DF4();
  return sub_1BCAB68DC();
}

uint64_t SignificantChange.Period.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v12;
  char v13;
  char v14;
  char v15;
  char v16;
  char v17;

  v3 = v1;
  sub_1BC9ACE04(0, &qword_1ED6C4708, (uint64_t (*)(void))sub_1BCA04DF4, (uint64_t)&type metadata for SignificantChange.Period.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v12 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BCA04DF4();
  sub_1BCAB68B8();
  v17 = 0;
  sub_1BCAB4BD8();
  sub_1BC996948(&qword_1ED6C3618, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAE5D0], MEMORY[0x1E0CAE5E8]);
  sub_1BCAB6774();
  if (!v2)
  {
    v10 = type metadata accessor for SignificantChange.Period(0);
    v16 = 1;
    sub_1BCAB675C();
    v15 = 2;
    sub_1BCAB675C();
    v14 = *(_BYTE *)(v3 + *(int *)(v10 + 28));
    v13 = 3;
    sub_1BCA04E38();
    sub_1BCAB6738();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t SignificantChange.Period.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  char v29;
  char v30;
  char v31;
  char v32;
  char v33;

  v22 = a2;
  v3 = sub_1BCAB4BD8();
  v23 = *(_QWORD *)(v3 - 8);
  v24 = v3;
  MEMORY[0x1E0C80A78](v3);
  v26 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BC9ACE04(0, &qword_1ED6C46A8, (uint64_t (*)(void))sub_1BCA04DF4, (uint64_t)&type metadata for SignificantChange.Period.CodingKeys, MEMORY[0x1E0DED048]);
  v25 = v5;
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v21 - v7;
  v9 = (int *)type metadata accessor for SignificantChange.Period(0);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BCA04DF4();
  v27 = v8;
  v12 = v28;
  sub_1BCAB68AC();
  if (v12)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v13 = v6;
  v14 = (uint64_t)v11;
  v15 = v23;
  v33 = 0;
  sub_1BC996948(&qword_1ED6C3620, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAE5D0], MEMORY[0x1E0CAE600]);
  v16 = v25;
  v17 = v24;
  sub_1BCAB66E4();
  (*(void (**)(uint64_t, char *, uint64_t))(v15 + 32))(v14, v26, v17);
  v32 = 1;
  sub_1BCAB66CC();
  *(_QWORD *)(v14 + v9[5]) = v18;
  v31 = 2;
  sub_1BCAB66CC();
  *(_QWORD *)(v14 + v9[6]) = v19;
  v29 = 3;
  sub_1BCA04E7C();
  sub_1BCAB66A8();
  (*(void (**)(char *, uint64_t))(v13 + 8))(v27, v16);
  *(_BYTE *)(v14 + v9[7]) = v30;
  sub_1BC9964B8(v14, v22, type metadata accessor for SignificantChange.Period);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return sub_1BC997208(v14, type metadata accessor for SignificantChange.Period);
}

uint64_t sub_1BCA03C90@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return SignificantChange.Period.init(from:)(a1, a2);
}

uint64_t sub_1BCA03CA4(_QWORD *a1)
{
  return SignificantChange.Period.encode(to:)(a1);
}

uint64_t SignificantChange.Notification.identifier.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SignificantChange.Notification.significant.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t SignificantChange.Notification.detectionDate.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for SignificantChange.Notification(0) + 24);
  v4 = sub_1BCAB4E54();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t SignificantChange.Notification.originalEventDate.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for SignificantChange.Notification(0) + 28);
  v4 = sub_1BCAB4E54();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t SignificantChange.Notification.init(identifier:significant:detectionDate:originalEventDate:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v13)(uint64_t, uint64_t, uint64_t);

  *(_QWORD *)a6 = a1;
  *(_QWORD *)(a6 + 8) = a2;
  *(_BYTE *)(a6 + 16) = a3;
  v9 = type metadata accessor for SignificantChange.Notification(0);
  v10 = a6 + *(int *)(v9 + 24);
  v11 = sub_1BCAB4E54();
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32);
  v13(v10, a4, v11);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v13)(a6 + *(int *)(v9 + 28), a5, v11);
}

uint64_t SignificantChange.Notification.with(significant:)@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);

  v4 = a1 & 1;
  if (*(_BYTE *)(v2 + 16) == (a1 & 1))
    return sub_1BC9964B8(v2, a2, type metadata accessor for SignificantChange.Notification);
  v6 = *(_QWORD *)v2;
  v5 = *(_QWORD *)(v2 + 8);
  v7 = type metadata accessor for SignificantChange.Notification(0);
  v8 = *(int *)(v7 + 24);
  v9 = v2 + v8;
  v10 = a2 + v8;
  v11 = sub_1BCAB4E54();
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
  v12(v10, v9, v11);
  v12(a2 + *(int *)(v7 + 28), v2 + *(int *)(v7 + 28), v11);
  *(_QWORD *)a2 = v6;
  *(_QWORD *)(a2 + 8) = v5;
  *(_BYTE *)(a2 + 16) = v4;
  return swift_bridgeObjectRetain();
}

uint64_t sub_1BCA03EF8()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1BCA03F2C + 4 * byte_1BCAC2D74[*v0]))(0x696669746E656469, 0xEA00000000007265);
}

uint64_t sub_1BCA03F2C()
{
  return 0x636966696E676973;
}

uint64_t sub_1BCA03F4C()
{
  return 0x6F69746365746564;
}

unint64_t sub_1BCA03F70()
{
  return 0xD000000000000011;
}

uint64_t sub_1BCA03F8C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1BCA07144(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1BCA03FB0()
{
  sub_1BCA054D0();
  return sub_1BCAB68D0();
}

uint64_t sub_1BCA03FD8()
{
  sub_1BCA054D0();
  return sub_1BCAB68DC();
}

uint64_t SignificantChange.Notification.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;
  char v10;
  char v11;
  char v12;
  char v13;

  sub_1BC9ACE04(0, &qword_1ED6C4700, (uint64_t (*)(void))sub_1BCA054D0, (uint64_t)&type metadata for SignificantChange.Notification.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v7 = (char *)&v9 - v6;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BCA054D0();
  sub_1BCAB68B8();
  v13 = 0;
  sub_1BCAB6744();
  if (!v1)
  {
    v12 = 1;
    sub_1BCAB6750();
    type metadata accessor for SignificantChange.Notification(0);
    v11 = 2;
    sub_1BCAB4E54();
    sub_1BC996948(&qword_1ED6C6978, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], MEMORY[0x1E0CB0890]);
    sub_1BCAB6774();
    v10 = 3;
    sub_1BCAB6774();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t SignificantChange.Notification.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, char *, uint64_t);
  char *v21;
  _QWORD v23[2];
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  _QWORD *v31;
  char v32;
  char v33;
  char v34;
  char v35;

  v24 = a2;
  v3 = sub_1BCAB4E54();
  v27 = *(_QWORD *)(v3 - 8);
  v28 = v3;
  MEMORY[0x1E0C80A78](v3);
  v25 = (char *)v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v26 = (char *)v23 - v6;
  sub_1BC9ACE04(0, &qword_1ED6C46A0, (uint64_t (*)(void))sub_1BCA054D0, (uint64_t)&type metadata for SignificantChange.Notification.CodingKeys, MEMORY[0x1E0DED048]);
  v29 = v7;
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)v23 - v9;
  v11 = type metadata accessor for SignificantChange.Notification(0);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BCA054D0();
  v30 = v10;
  v14 = (uint64_t)v31;
  sub_1BCAB68AC();
  if (v14)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v15 = v8;
  v31 = a1;
  v17 = v26;
  v16 = v27;
  v18 = v28;
  v35 = 0;
  *(_QWORD *)v13 = sub_1BCAB66B4();
  *((_QWORD *)v13 + 1) = v19;
  v34 = 1;
  v13[16] = sub_1BCAB66C0() & 1;
  v33 = 2;
  v23[1] = sub_1BC996948(&qword_1ED6C7518, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], MEMORY[0x1E0CB08C0]);
  sub_1BCAB66E4();
  v20 = *(void (**)(char *, char *, uint64_t))(v16 + 32);
  v20(&v13[*(int *)(v11 + 24)], v17, v18);
  v32 = 3;
  v21 = v25;
  sub_1BCAB66E4();
  (*(void (**)(char *, uint64_t))(v15 + 8))(v30, v29);
  v20(&v13[*(int *)(v11 + 28)], v21, v18);
  sub_1BC9964B8((uint64_t)v13, v24, type metadata accessor for SignificantChange.Notification);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v31);
  return sub_1BC997208((uint64_t)v13, type metadata accessor for SignificantChange.Notification);
}

uint64_t sub_1BCA04524@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return SignificantChange.Notification.init(from:)(a1, a2);
}

uint64_t sub_1BCA04538(_QWORD *a1)
{
  return SignificantChange.Notification.encode(to:)(a1);
}

uint64_t SignificantChange.notification.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for SignificantChange(0) + 24);
  return sub_1BCA05514(v3, a1);
}

uint64_t sub_1BCA04580()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x7365676E616863;
  if (*v0 != 1)
    v1 = 0x6163696669746F6ELL;
  if (*v0)
    return v1;
  else
    return 0x656E696C65736162;
}

uint64_t sub_1BCA045E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1BCA07340(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1BCA04608()
{
  sub_1BCA05570();
  return sub_1BCAB68D0();
}

uint64_t sub_1BCA04630()
{
  sub_1BCA05570();
  return sub_1BCAB68DC();
}

uint64_t SignificantChange.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  _QWORD v11[2];
  char v12;
  char v13;
  char v14;

  v3 = v1;
  sub_1BC9ACE04(0, &qword_1ED6C46F8, (uint64_t (*)(void))sub_1BCA05570, (uint64_t)&type metadata for SignificantChange.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v9 = (char *)v11 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BCA05570();
  sub_1BCAB68B8();
  v14 = 0;
  type metadata accessor for SignificantChange.Period(0);
  sub_1BC996948(&qword_1ED6C37E0, type metadata accessor for SignificantChange.Period, (uint64_t)&protocol conformance descriptor for SignificantChange.Period);
  sub_1BCAB6774();
  if (!v2)
  {
    v11[1] = *(_QWORD *)(v3 + *(int *)(type metadata accessor for SignificantChange(0) + 20));
    v13 = 1;
    sub_1BC998AB0(0, &qword_1ED6C4580, type metadata accessor for SignificantChange.Period, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
    sub_1BCA055B4(&qword_1ED6C4588, &qword_1ED6C37E0, (uint64_t)&protocol conformance descriptor for SignificantChange.Period, MEMORY[0x1E0DEAF10]);
    sub_1BCAB6774();
    v12 = 2;
    type metadata accessor for SignificantChange.Notification(0);
    sub_1BC996948(&qword_1ED6C3700, type metadata accessor for SignificantChange.Notification, (uint64_t)&protocol conformance descriptor for SignificantChange.Notification);
    sub_1BCAB6738();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t SignificantChange.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  char v26;
  char v27;

  v17 = a2;
  sub_1BC998AB0(0, &qword_1ED6C3750, type metadata accessor for SignificantChange.Notification, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v3);
  v18 = (char *)&v17 - v4;
  v19 = type metadata accessor for SignificantChange.Period(0);
  MEMORY[0x1E0C80A78](v19);
  v20 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BC9ACE04(0, &qword_1ED6C4698, (uint64_t (*)(void))sub_1BCA05570, (uint64_t)&type metadata for SignificantChange.CodingKeys, MEMORY[0x1E0DED048]);
  v22 = v6;
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v17 - v8;
  v10 = type metadata accessor for SignificantChange(0);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BCA05570();
  v21 = v9;
  v13 = v23;
  sub_1BCAB68AC();
  if (v13)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  v27 = 0;
  sub_1BC996948(&qword_1ED6C37E8, type metadata accessor for SignificantChange.Period, (uint64_t)&protocol conformance descriptor for SignificantChange.Period);
  v14 = (uint64_t)v20;
  sub_1BCAB66E4();
  sub_1BC9AE330(v14, (uint64_t)v12, type metadata accessor for SignificantChange.Period);
  sub_1BC998AB0(0, &qword_1ED6C4580, type metadata accessor for SignificantChange.Period, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
  v26 = 1;
  sub_1BCA055B4(&qword_1ED6C4590, &qword_1ED6C37E8, (uint64_t)&protocol conformance descriptor for SignificantChange.Period, MEMORY[0x1E0DEAF40]);
  sub_1BCAB66E4();
  *(_QWORD *)&v12[*(int *)(v10 + 20)] = v24;
  type metadata accessor for SignificantChange.Notification(0);
  v25 = 2;
  sub_1BC996948(&qword_1ED6C3708, type metadata accessor for SignificantChange.Notification, (uint64_t)&protocol conformance descriptor for SignificantChange.Notification);
  v15 = (uint64_t)v18;
  sub_1BCAB66A8();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v21, v22);
  sub_1BCA032A4(v15, (uint64_t)&v12[*(int *)(v10 + 24)]);
  sub_1BC9964B8((uint64_t)v12, v17, type metadata accessor for SignificantChange);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return sub_1BC997208((uint64_t)v12, type metadata accessor for SignificantChange);
}

uint64_t sub_1BCA04C30@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return SignificantChange.init(from:)(a1, a2);
}

uint64_t sub_1BCA04C44(_QWORD *a1)
{
  return SignificantChange.encode(to:)(a1);
}

uint64_t _s19HealthVisualization17SignificantChangeV12NotificationV2eeoiySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  BOOL v4;

  v4 = *(_QWORD *)a1 == *(_QWORD *)a2 && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8);
  if ((v4 || (sub_1BCAB67C8() & 1) != 0)
    && *(unsigned __int8 *)(a1 + 16) == *(unsigned __int8 *)(a2 + 16)
    && (type metadata accessor for SignificantChange.Notification(0), (sub_1BCAB4E18() & 1) != 0))
  {
    return sub_1BCAB4E18();
  }
  else
  {
    return 0;
  }
}

uint64_t _s19HealthVisualization17SignificantChangeV6PeriodV2eeoiySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  int *v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  if ((sub_1BCAB4B84() & 1) != 0)
  {
    v4 = (int *)type metadata accessor for SignificantChange.Period(0);
    if (*(double *)(a1 + v4[5]) == *(double *)(a2 + v4[5]) && *(double *)(a1 + v4[6]) == *(double *)(a2 + v4[6]))
    {
      v5 = v4[7];
      v6 = *(unsigned __int8 *)(a1 + v5);
      v7 = *(unsigned __int8 *)(a2 + v5);
      if (v6 == 2)
      {
        if (v7 == 2)
          return 1;
      }
      else if (v7 != 2)
      {
        if ((v6 & 1) != 0)
          v8 = 0x6973616572636564;
        else
          v8 = 0x6973616572636E69;
        if ((v7 & 1) != 0)
          v9 = 0x6973616572636564;
        else
          v9 = 0x6973616572636E69;
        if (v8 == v9)
        {
          swift_bridgeObjectRelease_n();
          return 1;
        }
        v11 = sub_1BCAB67C8();
        swift_bridgeObjectRelease_n();
        if ((v11 & 1) != 0)
          return 1;
      }
    }
  }
  return 0;
}

unint64_t sub_1BCA04DF4()
{
  unint64_t result;

  result = qword_1ED6C37C8;
  if (!qword_1ED6C37C8)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCAC33B4, &type metadata for SignificantChange.Period.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED6C37C8);
  }
  return result;
}

unint64_t sub_1BCA04E38()
{
  unint64_t result;

  result = qword_1ED6C37B0;
  if (!qword_1ED6C37B0)
  {
    result = MEMORY[0x1BCCFBE84](&protocol conformance descriptor for SignificantChange.Period.ChangeType, &type metadata for SignificantChange.Period.ChangeType);
    atomic_store(result, (unint64_t *)&qword_1ED6C37B0);
  }
  return result;
}

unint64_t sub_1BCA04E7C()
{
  unint64_t result;

  result = qword_1ED6C37C0;
  if (!qword_1ED6C37C0)
  {
    result = MEMORY[0x1BCCFBE84](&protocol conformance descriptor for SignificantChange.Period.ChangeType, &type metadata for SignificantChange.Period.ChangeType);
    atomic_store(result, (unint64_t *)&qword_1ED6C37C0);
  }
  return result;
}

uint64_t _s19HealthVisualization17SignificantChangeV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int (*v23)(uint64_t, uint64_t, uint64_t);
  uint64_t v25;
  BOOL v26;
  char v27;
  uint64_t v28;
  char *v29;

  v4 = type metadata accessor for SignificantChange.Notification(0);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BCA074F0();
  v9 = v8;
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BC998AB0(0, &qword_1ED6C3750, type metadata accessor for SignificantChange.Notification, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v17 = (char *)&v28 - v16;
  MEMORY[0x1E0C80A78](v18);
  v20 = (char *)&v28 - v19;
  if ((_s19HealthVisualization17SignificantChangeV6PeriodV2eeoiySbAE_AEtFZ_0(a1, a2) & 1) == 0)
    return 0;
  v29 = v7;
  v21 = type metadata accessor for SignificantChange(0);
  if ((sub_1BC9A9540(*(_QWORD *)(a1 + *(int *)(v21 + 20)), *(_QWORD *)(a2 + *(int *)(v21 + 20))) & 1) == 0)
    return 0;
  sub_1BCA05514(a1 + *(int *)(v21 + 24), (uint64_t)v20);
  sub_1BCA05514(a2 + *(int *)(v21 + 24), (uint64_t)v17);
  v22 = (uint64_t)&v11[*(int *)(v9 + 48)];
  sub_1BCA05514((uint64_t)v20, (uint64_t)v11);
  sub_1BCA05514((uint64_t)v17, v22);
  v23 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (v23((uint64_t)v11, 1, v4) == 1)
  {
    sub_1BCA07568((uint64_t)v17);
    sub_1BCA07568((uint64_t)v20);
    if (v23(v22, 1, v4) == 1)
    {
      sub_1BCA07568((uint64_t)v11);
      return 1;
    }
    goto LABEL_8;
  }
  sub_1BCA05514((uint64_t)v11, (uint64_t)v14);
  if (v23(v22, 1, v4) == 1)
  {
    sub_1BCA07568((uint64_t)v17);
    sub_1BCA07568((uint64_t)v20);
    sub_1BC997208((uint64_t)v14, type metadata accessor for SignificantChange.Notification);
LABEL_8:
    sub_1BC997208((uint64_t)v11, (uint64_t (*)(_QWORD))sub_1BCA074F0);
    return 0;
  }
  v25 = (uint64_t)v29;
  sub_1BC9AE330(v22, (uint64_t)v29, type metadata accessor for SignificantChange.Notification);
  v26 = *(_QWORD *)v14 == *(_QWORD *)v25 && *((_QWORD *)v14 + 1) == *(_QWORD *)(v25 + 8);
  if ((v26 || (sub_1BCAB67C8() & 1) != 0) && v14[16] == *(_BYTE *)(v25 + 16) && (sub_1BCAB4E18() & 1) != 0)
  {
    v27 = sub_1BCAB4E18();
    sub_1BC997208(v25, type metadata accessor for SignificantChange.Notification);
    sub_1BCA07568((uint64_t)v17);
    sub_1BCA07568((uint64_t)v20);
    sub_1BC997208((uint64_t)v14, type metadata accessor for SignificantChange.Notification);
    sub_1BCA07568((uint64_t)v11);
    if ((v27 & 1) != 0)
      return 1;
  }
  else
  {
    sub_1BC997208(v25, type metadata accessor for SignificantChange.Notification);
    sub_1BCA07568((uint64_t)v17);
    sub_1BCA07568((uint64_t)v20);
    sub_1BC997208((uint64_t)v14, type metadata accessor for SignificantChange.Notification);
    sub_1BCA07568((uint64_t)v11);
  }
  return 0;
}

uint64_t sub_1BCA05210(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x646F69726570 && a2 == 0xE600000000000000;
  if (v2 || (sub_1BCAB67C8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x65756C6176 && a2 == 0xE500000000000000 || (sub_1BCAB67C8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x636E657571657266 && a2 == 0xE900000000000079 || (sub_1BCAB67C8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x65676E616863 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v6 = sub_1BCAB67C8();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t _s19HealthVisualization17SignificantChangeV12NotificationV10identifier9eventDate9directionSS10Foundation0H0V_AC6PeriodV0D4TypeOtFZ_0()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v2;
  __n128 v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v0 = sub_1BCAB4DD0();
  v1 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0670];
  v2 = *(_QWORD *)(v0 - 8);
  v3 = MEMORY[0x1E0C80A78](v0);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1BCCF9700](v3);
  sub_1BC996948(&qword_1EF478EE8, v1, MEMORY[0x1E0CB0660]);
  sub_1BCAB4E3C();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v0);
  sub_1BCAB5F70();
  sub_1BCAB5F70();
  swift_bridgeObjectRelease();
  return v7;
}

unint64_t sub_1BCA054D0()
{
  unint64_t result;

  result = qword_1ED6C36E8;
  if (!qword_1ED6C36E8)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCAC3364, &type metadata for SignificantChange.Notification.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED6C36E8);
  }
  return result;
}

uint64_t sub_1BCA05514(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1BC998AB0(0, &qword_1ED6C3750, type metadata accessor for SignificantChange.Notification, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_1BCA05570()
{
  unint64_t result;

  result = qword_1ED6C36D0;
  if (!qword_1ED6C36D0)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCAC3314, &type metadata for SignificantChange.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED6C36D0);
  }
  return result;
}

uint64_t sub_1BCA055B4(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = *a1;
  if (!result)
  {
    sub_1BC998AB0(255, &qword_1ED6C4580, type metadata accessor for SignificantChange.Period, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
    v10 = v9;
    v11 = sub_1BC996948(a2, type metadata accessor for SignificantChange.Period, a3);
    result = MEMORY[0x1BCCFBE84](a4, v10, &v11);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1BCA05650()
{
  unint64_t result;

  result = qword_1EF478EC0;
  if (!qword_1EF478EC0)
  {
    result = MEMORY[0x1BCCFBE84](&protocol conformance descriptor for SignificantChange.Period.ChangeType, &type metadata for SignificantChange.Period.ChangeType);
    atomic_store(result, (unint64_t *)&qword_1EF478EC0);
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for SignificantChange(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int (*v14)(_QWORD *, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  void (*v22)(char *, char *, uint64_t);

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_1BCAB4BD8();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = (int *)type metadata accessor for SignificantChange.Period(0);
    *(_QWORD *)((char *)a1 + v8[5]) = *(_QWORD *)((char *)a2 + v8[5]);
    *(_QWORD *)((char *)a1 + v8[6]) = *(_QWORD *)((char *)a2 + v8[6]);
    *((_BYTE *)a1 + v8[7]) = *((_BYTE *)a2 + v8[7]);
    v9 = *(int *)(a3 + 24);
    *(_QWORD *)((char *)a1 + *(int *)(a3 + 20)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 20));
    v10 = (_QWORD *)((char *)a1 + v9);
    v11 = (_QWORD *)((char *)a2 + v9);
    v12 = type metadata accessor for SignificantChange.Notification(0);
    v13 = *(_QWORD *)(v12 - 8);
    v14 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v13 + 48);
    swift_bridgeObjectRetain();
    if (v14(v11, 1, v12))
    {
      sub_1BC998AB0(0, &qword_1ED6C3750, type metadata accessor for SignificantChange.Notification, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      v17 = v11[1];
      *v10 = *v11;
      v10[1] = v17;
      *((_BYTE *)v10 + 16) = *((_BYTE *)v11 + 16);
      v18 = *(int *)(v12 + 24);
      v19 = (char *)v10 + v18;
      v20 = (char *)v11 + v18;
      v21 = sub_1BCAB4E54();
      v22 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 16);
      swift_bridgeObjectRetain();
      v22(v19, v20, v21);
      v22((char *)v10 + *(int *)(v12 + 28), (char *)v11 + *(int *)(v12 + 28), v21);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
    }
  }
  return a1;
}

uint64_t destroy for SignificantChange(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);

  v4 = sub_1BCAB4BD8();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  swift_bridgeObjectRelease();
  v5 = a1 + *(int *)(a2 + 24);
  v6 = type metadata accessor for SignificantChange.Notification(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(v5, 1, v6);
  if (!(_DWORD)result)
  {
    swift_bridgeObjectRelease();
    v8 = v5 + *(int *)(v6 + 24);
    v9 = sub_1BCAB4E54();
    v10 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8);
    v10(v8, v9);
    return ((uint64_t (*)(uint64_t, uint64_t))v10)(v5 + *(int *)(v6 + 28), v9);
  }
  return result;
}

uint64_t initializeWithCopy for SignificantChange(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(_QWORD *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  void (*v20)(char *, char *, uint64_t);

  v6 = sub_1BCAB4BD8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = (int *)type metadata accessor for SignificantChange.Period(0);
  *(_QWORD *)(a1 + v7[5]) = *(_QWORD *)(a2 + v7[5]);
  *(_QWORD *)(a1 + v7[6]) = *(_QWORD *)(a2 + v7[6]);
  *(_BYTE *)(a1 + v7[7]) = *(_BYTE *)(a2 + v7[7]);
  v8 = *(int *)(a3 + 24);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  v9 = (_QWORD *)(a1 + v8);
  v10 = (_QWORD *)(a2 + v8);
  v11 = type metadata accessor for SignificantChange.Notification(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v12 + 48);
  swift_bridgeObjectRetain();
  if (v13(v10, 1, v11))
  {
    sub_1BC998AB0(0, &qword_1ED6C3750, type metadata accessor for SignificantChange.Notification, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    v15 = v10[1];
    *v9 = *v10;
    v9[1] = v15;
    *((_BYTE *)v9 + 16) = *((_BYTE *)v10 + 16);
    v16 = *(int *)(v11 + 24);
    v17 = (char *)v9 + v16;
    v18 = (char *)v10 + v16;
    v19 = sub_1BCAB4E54();
    v20 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 16);
    swift_bridgeObjectRetain();
    v20(v17, v18, v19);
    v20((char *)v9 + *(int *)(v11 + 28), (char *)v10 + *(int *)(v11 + 28), v19);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  return a1;
}

uint64_t assignWithCopy for SignificantChange(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(_QWORD *, uint64_t, uint64_t);
  int v14;
  int v15;
  uint64_t (*v16)(uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  void (*v22)(char *, char *, uint64_t);
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  void (*v27)(char *, char *, uint64_t);

  v6 = sub_1BCAB4BD8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = (int *)type metadata accessor for SignificantChange.Period(0);
  *(_QWORD *)(a1 + v7[5]) = *(_QWORD *)(a2 + v7[5]);
  *(_QWORD *)(a1 + v7[6]) = *(_QWORD *)(a2 + v7[6]);
  *(_BYTE *)(a1 + v7[7]) = *(_BYTE *)(a2 + v7[7]);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v8 = *(int *)(a3 + 24);
  v9 = (_QWORD *)(a1 + v8);
  v10 = (_QWORD *)(a2 + v8);
  v11 = type metadata accessor for SignificantChange.Notification(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v12 + 48);
  v14 = v13(v9, 1, v11);
  v15 = v13(v10, 1, v11);
  if (v14)
  {
    if (!v15)
    {
      *v9 = *v10;
      v9[1] = v10[1];
      *((_BYTE *)v9 + 16) = *((_BYTE *)v10 + 16);
      v18 = *(int *)(v11 + 24);
      v19 = (char *)v9 + v18;
      v20 = (char *)v10 + v18;
      v21 = sub_1BCAB4E54();
      v22 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 16);
      swift_bridgeObjectRetain();
      v22(v19, v20, v21);
      v22((char *)v9 + *(int *)(v11 + 28), (char *)v10 + *(int *)(v11 + 28), v21);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
      return a1;
    }
    v16 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
  }
  else
  {
    if (!v15)
    {
      *v9 = *v10;
      v9[1] = v10[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *((_BYTE *)v9 + 16) = *((_BYTE *)v10 + 16);
      v23 = *(int *)(v11 + 24);
      v24 = (char *)v9 + v23;
      v25 = (char *)v10 + v23;
      v26 = sub_1BCAB4E54();
      v27 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v26 - 8) + 24);
      v27(v24, v25, v26);
      v27((char *)v9 + *(int *)(v11 + 28), (char *)v10 + *(int *)(v11 + 28), v26);
      return a1;
    }
    sub_1BC997208((uint64_t)v9, type metadata accessor for SignificantChange.Notification);
    v16 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
  }
  sub_1BC998AB0(0, &qword_1ED6C3750, type metadata accessor for SignificantChange.Notification, v16);
  memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  return a1;
}

uint64_t initializeWithTake for SignificantChange(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  _BYTE *v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  _BYTE *v16;
  uint64_t v17;
  void (*v18)(_BYTE *, _BYTE *, uint64_t);

  v6 = sub_1BCAB4BD8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = (int *)type metadata accessor for SignificantChange.Period(0);
  *(_QWORD *)(a1 + v7[5]) = *(_QWORD *)(a2 + v7[5]);
  *(_QWORD *)(a1 + v7[6]) = *(_QWORD *)(a2 + v7[6]);
  *(_BYTE *)(a1 + v7[7]) = *(_BYTE *)(a2 + v7[7]);
  v8 = *(int *)(a3 + 24);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  v9 = (_BYTE *)(a1 + v8);
  v10 = (_BYTE *)(a2 + v8);
  v11 = type metadata accessor for SignificantChange.Notification(0);
  v12 = *(_QWORD *)(v11 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
  {
    sub_1BC998AB0(0, &qword_1ED6C3750, type metadata accessor for SignificantChange.Notification, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    *(_OWORD *)v9 = *(_OWORD *)v10;
    v9[16] = v10[16];
    v14 = *(int *)(v11 + 24);
    v15 = &v9[v14];
    v16 = &v10[v14];
    v17 = sub_1BCAB4E54();
    v18 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v17 - 8) + 32);
    v18(v15, v16, v17);
    v18(&v9[*(int *)(v11 + 28)], &v10[*(int *)(v11 + 28)], v17);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  return a1;
}

uint64_t assignWithTake for SignificantChange(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(char *, uint64_t, uint64_t);
  int v14;
  int v15;
  uint64_t (*v16)(uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  void (*v22)(char *, char *, uint64_t);
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  void (*v28)(char *, char *, uint64_t);

  v6 = sub_1BCAB4BD8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = (int *)type metadata accessor for SignificantChange.Period(0);
  *(_QWORD *)(a1 + v7[5]) = *(_QWORD *)(a2 + v7[5]);
  *(_QWORD *)(a1 + v7[6]) = *(_QWORD *)(a2 + v7[6]);
  *(_BYTE *)(a1 + v7[7]) = *(_BYTE *)(a2 + v7[7]);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  swift_bridgeObjectRelease();
  v8 = *(int *)(a3 + 24);
  v9 = (char *)(a1 + v8);
  v10 = (char *)(a2 + v8);
  v11 = type metadata accessor for SignificantChange.Notification(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48);
  v14 = v13(v9, 1, v11);
  v15 = v13(v10, 1, v11);
  if (v14)
  {
    if (!v15)
    {
      *(_OWORD *)v9 = *(_OWORD *)v10;
      v9[16] = v10[16];
      v18 = *(int *)(v11 + 24);
      v19 = &v9[v18];
      v20 = &v10[v18];
      v21 = sub_1BCAB4E54();
      v22 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 32);
      v22(v19, v20, v21);
      v22(&v9[*(int *)(v11 + 28)], &v10[*(int *)(v11 + 28)], v21);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
      return a1;
    }
    v16 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
  }
  else
  {
    if (!v15)
    {
      v23 = *((_QWORD *)v10 + 1);
      *(_QWORD *)v9 = *(_QWORD *)v10;
      *((_QWORD *)v9 + 1) = v23;
      swift_bridgeObjectRelease();
      v9[16] = v10[16];
      v24 = *(int *)(v11 + 24);
      v25 = &v9[v24];
      v26 = &v10[v24];
      v27 = sub_1BCAB4E54();
      v28 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 40);
      v28(v25, v26, v27);
      v28(&v9[*(int *)(v11 + 28)], &v10[*(int *)(v11 + 28)], v27);
      return a1;
    }
    sub_1BC997208((uint64_t)v9, type metadata accessor for SignificantChange.Notification);
    v16 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
  }
  sub_1BC998AB0(0, &qword_1ED6C3750, type metadata accessor for SignificantChange.Notification, v16);
  memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  return a1;
}

uint64_t getEnumTagSinglePayload for SignificantChange()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BCA060AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;

  v6 = type metadata accessor for SignificantChange.Period(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    sub_1BC998AB0(0, &qword_1ED6C3750, type metadata accessor for SignificantChange.Notification, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    v8 = v13;
    v14 = *(_QWORD *)(v13 - 8);
    v10 = a1 + *(int *)(a3 + 24);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 48);
    return v9(v10, a2, v8);
  }
  v11 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v11 >= 0xFFFFFFFF)
    LODWORD(v11) = -1;
  return (v11 + 1);
}

uint64_t storeEnumTagSinglePayload for SignificantChange()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BCA06178(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  result = type metadata accessor for SignificantChange.Period(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
      return result;
    }
    sub_1BC998AB0(0, &qword_1ED6C3750, type metadata accessor for SignificantChange.Notification, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    v10 = v13;
    v14 = *(_QWORD *)(v13 - 8);
    v12 = a1 + *(int *)(a4 + 24);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_1BCA06234()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for SignificantChange.Period(319);
  if (v0 <= 0x3F)
  {
    sub_1BC998AB0(319, &qword_1ED6C3750, type metadata accessor for SignificantChange.Notification, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

_QWORD *initializeBufferWithCopyOfBuffer for SignificantChange.Period(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_1BCAB4BD8();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[6];
    *(_QWORD *)((char *)a1 + a3[5]) = *(_QWORD *)((char *)a2 + a3[5]);
    *(_QWORD *)((char *)a1 + v8) = *(_QWORD *)((char *)a2 + v8);
    *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
  }
  return a1;
}

uint64_t destroy for SignificantChange.Period(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1BCAB4BD8();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t initializeWithCopy for SignificantChange.Period(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = sub_1BCAB4BD8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[6];
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  return a1;
}

uint64_t assignWithCopy for SignificantChange.Period(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;

  v6 = sub_1BCAB4BD8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  *(_QWORD *)(a1 + a3[6]) = *(_QWORD *)(a2 + a3[6]);
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  return a1;
}

uint64_t initializeWithTake for SignificantChange.Period(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = sub_1BCAB4BD8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  return a1;
}

uint64_t assignWithTake for SignificantChange.Period(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = sub_1BCAB4BD8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[6];
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  return a1;
}

uint64_t getEnumTagSinglePayload for SignificantChange.Period()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BCA0657C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v9;
  unsigned int v10;

  v6 = sub_1BCAB4BD8();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  if (*(unsigned __int8 *)(a1 + *(int *)(a3 + 28)) <= 2u)
    v9 = 2;
  else
    v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 28));
  v10 = v9 - 2;
  if (*(unsigned __int8 *)(a1 + *(int *)(a3 + 28)) >= 2u)
    return v10;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for SignificantChange.Period()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BCA0660C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_1BCAB4BD8();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_BYTE *)(a1 + *(int *)(a4 + 28)) = a2 + 2;
  return result;
}

uint64_t sub_1BCA06684()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1BCAB4BD8();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for SignificantChange.Period.ChangeType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1BCA06750 + 4 * byte_1BCAC2D7D[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1BCA06784 + 4 * byte_1BCAC2D78[v4]))();
}

uint64_t sub_1BCA06784(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BCA0678C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BCA06794);
  return result;
}

uint64_t sub_1BCA067A0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BCA067A8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1BCA067AC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BCA067B4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SignificantChange.Period.ChangeType()
{
  return &type metadata for SignificantChange.Period.ChangeType;
}

_QWORD *initializeBufferWithCopyOfBuffer for SignificantChange.Notification(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v7;
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
    v8 = *(int *)(a3 + 24);
    v9 = a1 + v8;
    v10 = (uint64_t)a2 + v8;
    v11 = sub_1BCAB4E54();
    v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    v12((uint64_t)v4 + *(int *)(a3 + 28), (uint64_t)a2 + *(int *)(a3 + 28), v11);
  }
  return v4;
}

uint64_t destroy for SignificantChange.Notification(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void (*v7)(uint64_t, uint64_t);

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 24);
  v5 = sub_1BCAB4E54();
  v7 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v7(v4, v5);
  return ((uint64_t (*)(uint64_t, uint64_t))v7)(a1 + *(int *)(a2 + 28), v5);
}

uint64_t initializeWithCopy for SignificantChange.Notification(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v7 = *(int *)(a3 + 24);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_1BCAB4E54();
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  v11(a1 + *(int *)(a3 + 28), a2 + *(int *)(a3 + 28), v10);
  return a1;
}

uint64_t assignWithCopy for SignificantChange.Notification(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v6 = *(int *)(a3 + 24);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = sub_1BCAB4E54();
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 24);
  v10(v7, v8, v9);
  v10(a1 + *(int *)(a3 + 28), a2 + *(int *)(a3 + 28), v9);
  return a1;
}

uint64_t initializeWithTake for SignificantChange.Notification(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v6 = *(int *)(a3 + 24);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = sub_1BCAB4E54();
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v10(a1 + *(int *)(a3 + 28), a2 + *(int *)(a3 + 28), v9);
  return a1;
}

uint64_t assignWithTake for SignificantChange.Notification(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v7 = *(int *)(a3 + 24);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_1BCAB4E54();
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40);
  v11(v8, v9, v10);
  v11(a1 + *(int *)(a3 + 28), a2 + *(int *)(a3 + 28), v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for SignificantChange.Notification()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BCA06B94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_1BCAB4E54();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for SignificantChange.Notification()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BCA06C1C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = sub_1BCAB4E54();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 24), a2, a2, v7);
  }
  return result;
}

uint64_t sub_1BCA06C90()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1BCAB4E54();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for SignificantChange.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1BCA06D58 + 4 * byte_1BCAC2D87[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1BCA06D8C + 4 * byte_1BCAC2D82[v4]))();
}

uint64_t sub_1BCA06D8C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BCA06D94(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BCA06D9CLL);
  return result;
}

uint64_t sub_1BCA06DA8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BCA06DB0);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1BCA06DB4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BCA06DBC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SignificantChange.CodingKeys()
{
  return &type metadata for SignificantChange.CodingKeys;
}

ValueMetadata *type metadata accessor for SignificantChange.Notification.CodingKeys()
{
  return &type metadata for SignificantChange.Notification.CodingKeys;
}

uint64_t _s19HealthVisualization17SignificantChangeV12NotificationV10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1BCA06E3C + 4 * byte_1BCAC2D91[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1BCA06E70 + 4 * byte_1BCAC2D8C[v4]))();
}

uint64_t sub_1BCA06E70(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BCA06E78(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BCA06E80);
  return result;
}

uint64_t sub_1BCA06E8C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BCA06E94);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1BCA06E98(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BCA06EA0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SignificantChange.Period.CodingKeys()
{
  return &type metadata for SignificantChange.Period.CodingKeys;
}

unint64_t sub_1BCA06EC0()
{
  unint64_t result;

  result = qword_1EF478EC8;
  if (!qword_1EF478EC8)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCAC317C, &type metadata for SignificantChange.Period.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF478EC8);
  }
  return result;
}

unint64_t sub_1BCA06F08()
{
  unint64_t result;

  result = qword_1EF478ED0;
  if (!qword_1EF478ED0)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCAC3234, &type metadata for SignificantChange.Notification.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF478ED0);
  }
  return result;
}

unint64_t sub_1BCA06F50()
{
  unint64_t result;

  result = qword_1EF478ED8;
  if (!qword_1EF478ED8)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCAC32EC, &type metadata for SignificantChange.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF478ED8);
  }
  return result;
}

unint64_t sub_1BCA06F98()
{
  unint64_t result;

  result = qword_1ED6C36E0;
  if (!qword_1ED6C36E0)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCAC325C, &type metadata for SignificantChange.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED6C36E0);
  }
  return result;
}

unint64_t sub_1BCA06FE0()
{
  unint64_t result;

  result = qword_1ED6C36D8;
  if (!qword_1ED6C36D8)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCAC3284, &type metadata for SignificantChange.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED6C36D8);
  }
  return result;
}

unint64_t sub_1BCA07028()
{
  unint64_t result;

  result = qword_1ED6C36F8;
  if (!qword_1ED6C36F8)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCAC31A4, &type metadata for SignificantChange.Notification.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED6C36F8);
  }
  return result;
}

unint64_t sub_1BCA07070()
{
  unint64_t result;

  result = qword_1ED6C36F0;
  if (!qword_1ED6C36F0)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCAC31CC, &type metadata for SignificantChange.Notification.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED6C36F0);
  }
  return result;
}

unint64_t sub_1BCA070B8()
{
  unint64_t result;

  result = qword_1ED6C37D8;
  if (!qword_1ED6C37D8)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCAC30EC, &type metadata for SignificantChange.Period.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED6C37D8);
  }
  return result;
}

unint64_t sub_1BCA07100()
{
  unint64_t result;

  result = qword_1ED6C37D0;
  if (!qword_1ED6C37D0)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCAC3114, &type metadata for SignificantChange.Period.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED6C37D0);
  }
  return result;
}

uint64_t sub_1BCA07144(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x696669746E656469 && a2 == 0xEA00000000007265;
  if (v2 || (sub_1BCAB67C8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x636966696E676973 && a2 == 0xEB00000000746E61 || (sub_1BCAB67C8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6F69746365746564 && a2 == 0xED0000657461446ELL || (sub_1BCAB67C8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000001BCAD0DE0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v6 = sub_1BCAB67C8();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_1BCA07340(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x656E696C65736162 && a2 == 0xE800000000000000;
  if (v2 || (sub_1BCAB67C8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7365676E616863 && a2 == 0xE700000000000000 || (sub_1BCAB67C8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6163696669746F6ELL && a2 == 0xEC0000006E6F6974)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_1BCAB67C8();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

unint64_t sub_1BCA074AC()
{
  unint64_t result;

  result = qword_1ED6C37B8;
  if (!qword_1ED6C37B8)
  {
    result = MEMORY[0x1BCCFBE84](&protocol conformance descriptor for SignificantChange.Period.ChangeType, &type metadata for SignificantChange.Period.ChangeType);
    atomic_store(result, (unint64_t *)&qword_1ED6C37B8);
  }
  return result;
}

void sub_1BCA074F0()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_1EF478EE0)
  {
    sub_1BC998AB0(255, &qword_1ED6C3750, type metadata accessor for SignificantChange.Notification, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1EF478EE0);
  }
}

uint64_t sub_1BCA07568(uint64_t a1)
{
  uint64_t v2;

  sub_1BC998AB0(0, &qword_1ED6C3750, type metadata accessor for SignificantChange.Notification, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

id HealthVisualizationOperationLog.getter()
{
  return sub_1BCA078D0(&qword_1ED6C7080, (id *)&qword_1ED6C69A8);
}

uint64_t sub_1BCA075D8()
{
  uint64_t v0;
  uint64_t result;

  v0 = sub_1BCAB6360();
  MEMORY[0x1E0C80A78](v0);
  sub_1BCA07B70();
  sub_1BCAB6354();
  result = sub_1BCAB636C();
  qword_1EF478EF0 = result;
  return result;
}

id HealthVisualizationPointsOfInterestLog.getter()
{
  return sub_1BCA078D0(&qword_1EF477C40, (id *)&qword_1EF478EF0);
}

uint64_t sub_1BCA07680()
{
  uint64_t result;

  sub_1BCA07B70();
  result = sub_1BCAB6378();
  qword_1ED6C69B0 = result;
  return result;
}

id HealthVisualizationGenerationLog.getter()
{
  return sub_1BCA078D0(&qword_1ED6C7088, (id *)&qword_1ED6C69B0);
}

uint64_t sub_1BCA076FC()
{
  uint64_t result;

  sub_1BCA07B70();
  result = sub_1BCAB6378();
  qword_1ED6C69A8 = result;
  return result;
}

uint64_t sub_1BCA0775C()
{
  uint64_t result;

  sub_1BCA07B70();
  result = sub_1BCAB6378();
  qword_1ED6C69C0 = result;
  return result;
}

id HealthVisualizationQueryLog.getter()
{
  return sub_1BCA078D0(&qword_1ED6C7098, (id *)&qword_1ED6C69C0);
}

uint64_t sub_1BCA077D0()
{
  uint64_t result;

  sub_1BCA07B70();
  result = sub_1BCAB6378();
  qword_1ED6C69B8 = result;
  return result;
}

id HealthVisualizationProcessingLog.getter()
{
  return sub_1BCA078D0(&qword_1ED6C7090, (id *)&qword_1ED6C69B8);
}

uint64_t sub_1BCA0784C()
{
  uint64_t result;

  sub_1BCA07B70();
  result = sub_1BCAB6378();
  qword_1EF478EF8 = result;
  return result;
}

id HealthVisualizationFeedSubmissionLog.getter()
{
  return sub_1BCA078D0(&qword_1EF477C48, (id *)&qword_1EF478EF8);
}

id sub_1BCA078D0(_QWORD *a1, id *a2)
{
  if (*a1 != -1)
    swift_once();
  return *a2;
}

unint64_t static Logger.afibBurdenSubsystem.getter()
{
  return 0xD00000000000001BLL;
}

uint64_t sub_1BCA07924()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = sub_1BCAB5514();
  MEMORY[0x1E0C80A78](v0);
  sub_1BC9DD8B8();
  v2 = v1;
  __swift_allocate_value_buffer(v1, qword_1ED6C4898);
  __swift_project_value_buffer(v2, (uint64_t)qword_1ED6C4898);
  sub_1BCAB54E4();
  sub_1BCAB5454();
  sub_1BC9DD980(&qword_1ED6C4BD8, MEMORY[0x1E0D2BE20]);
  sub_1BC9DD980(&qword_1ED6C4BC8, MEMORY[0x1E0D2BE10]);
  sub_1BC9DD980(&qword_1ED6C4BD0, MEMORY[0x1E0D2BE18]);
  return sub_1BCAB5424();
}

uint64_t static Logger.afibBurden.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1BCA07B04(&qword_1ED6C4528, (uint64_t (*)(_QWORD))sub_1BC9DD8B8, (uint64_t)qword_1ED6C4898, a1);
}

uint64_t sub_1BCA07A74()
{
  uint64_t v0;

  v0 = sub_1BCAB5514();
  __swift_allocate_value_buffer(v0, qword_1EF478F00);
  __swift_project_value_buffer(v0, (uint64_t)qword_1EF478F00);
  return sub_1BCAB5508();
}

uint64_t static Logger.afibBurdenOSLogger.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1BCA07B04(&qword_1EF477C50, (uint64_t (*)(_QWORD))MEMORY[0x1E0DF2258], (uint64_t)qword_1EF478F00, a1);
}

uint64_t sub_1BCA07B04@<X0>(_QWORD *a1@<X0>, uint64_t (*a2)(_QWORD)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;

  if (*a1 != -1)
    swift_once();
  v7 = a2(0);
  v8 = __swift_project_value_buffer(v7, a3);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a4, v8, v7);
}

unint64_t sub_1BCA07B70()
{
  unint64_t result;

  result = qword_1ED6C6EC0;
  if (!qword_1ED6C6EC0)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1ED6C6EC0);
  }
  return result;
}

uint64_t sub_1BCA07BAC(int a1, int a2, void *a3)
{
  uint64_t result;
  id v5;
  void *v6;
  void *v7;

  result = (uint64_t)sub_1BCA07CE4(a1, a2, a3);
  if (!result)
  {
    v5 = a3;
    swift_bridgeObjectRetain();
    sub_1BCAB64C8();
    swift_bridgeObjectRelease();
    v6 = (void *)objc_opt_self();
    swift_bridgeObjectRetain();
    v7 = (void *)sub_1BCAB5EE0();
    swift_bridgeObjectRelease();
    objc_msgSend(v6, sel__typeWithIdentifier_, v7);

    sub_1BC9E9030();
    sub_1BCAB5F28();
    sub_1BCAB5F70();
    swift_bridgeObjectRelease();
    result = sub_1BCAB65C4();
    __break(1u);
  }
  return result;
}

id sub_1BCA07CE4(int a1, int a2, id a3)
{
  id v3;
  id result;
  void *v5;
  void *v6;
  id v7;
  id v8;

  v3 = objc_msgSend(a3, sel_displayTypeController);
  if (v3
    || (result = objc_msgSend((id)objc_opt_self(), sel_sharedInstance),
        (v3 = result) != 0))
  {
    v5 = (void *)objc_opt_self();
    swift_bridgeObjectRetain();
    v6 = (void *)sub_1BCAB5EE0();
    swift_bridgeObjectRelease();
    v7 = objc_msgSend(v5, sel__typeWithIdentifier_, v6);

    v8 = objc_msgSend(v3, sel_displayTypeForObjectType_, v7);
    return v8;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id DisplayCategoryProviding.displayCategory.getter(uint64_t a1, uint64_t a2)
{
  void *v2;
  id v3;
  id result;

  v2 = (void *)(*(uint64_t (**)(void))(*(_QWORD *)(a2 + 8) + 16))();
  v3 = objc_msgSend(v2, sel_categoryIdentifier);

  result = objc_msgSend((id)objc_opt_self(), sel_categoryWithID_, v3);
  if (!result)
  {
    result = (id)sub_1BCAB65C4();
    __break(1u);
  }
  return result;
}

uint64_t dispatch thunk of DisplayCategoryProviding.displayCategory.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

id sub_1BCA07E9C()
{
  uint64_t v0;
  void *v1;
  id v2;
  id result;

  v1 = (void *)sub_1BCA07BAC(*(_QWORD *)v0, *(_QWORD *)(v0 + 8), *(void **)(v0 + 16));
  v2 = objc_msgSend(v1, sel_categoryIdentifier);

  result = objc_msgSend((id)objc_opt_self(), sel_categoryWithID_, v2);
  if (!result)
  {
    result = (id)sub_1BCAB65C4();
    __break(1u);
  }
  return result;
}

void __swiftcall MostRecentSampleQueryConfiguration.init(valueOverrideLocalizedStringKey:valueOverrideLocalizedStringTable:forceDayGranularity:)(HealthVisualization::MostRecentSampleQueryConfiguration *__return_ptr retstr, Swift::String_optional valueOverrideLocalizedStringKey, Swift::String_optional valueOverrideLocalizedStringTable, Swift::Bool forceDayGranularity)
{
  retstr->valueOverrideLocalizedStringKey = valueOverrideLocalizedStringKey;
  retstr->valueOverrideLocalizedStringTable = valueOverrideLocalizedStringTable;
  retstr->forceDayGranularity = forceDayGranularity;
}

uint64_t MostRecentSampleQueryConfiguration.valueOverrideLocalizedStringKey.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MostRecentSampleQueryConfiguration.valueOverrideLocalizedStringTable.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MostRecentSampleQueryConfiguration.forceDayGranularity.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 32);
}

uint64_t MostRecentSampleQueryConfiguration.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  char v22;

  sub_1BCA084F8(0, &qword_1ED6C6F00, MEMORY[0x1E0DED048]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v18 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BCA084B4();
  sub_1BCAB68AC();
  if (!v2)
  {
    v22 = 0;
    v10 = sub_1BCAB66B4();
    v18 = v11;
    v19 = v10;
    v21 = 1;
    v12 = sub_1BCAB66B4();
    v14 = v13;
    v20 = 2;
    v15 = sub_1BCAB66C0();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    v16 = v18;
    *(_QWORD *)a2 = v19;
    *(_QWORD *)(a2 + 8) = v16;
    *(_QWORD *)(a2 + 16) = v12;
    *(_QWORD *)(a2 + 24) = v14;
    *(_BYTE *)(a2 + 32) = v15 & 1;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

unint64_t sub_1BCA08178(char a1)
{
  if (!a1)
    return 0xD00000000000001FLL;
  if (a1 == 1)
    return 0xD000000000000021;
  return 0xD000000000000013;
}

unint64_t sub_1BCA081D4()
{
  char *v0;

  return sub_1BCA08178(*v0);
}

uint64_t sub_1BCA081DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1BCA08708(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1BCA08200()
{
  sub_1BCA084B4();
  return sub_1BCAB68D0();
}

uint64_t sub_1BCA08228()
{
  sub_1BCA084B4();
  return sub_1BCAB68DC();
}

uint64_t MostRecentSampleQueryConfiguration.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[4];
  int v12;
  char v13;
  char v14;
  char v15;

  sub_1BCA084F8(0, &qword_1ED6C4798, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED170]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v7 = (char *)v11 - v6;
  v8 = *(_QWORD *)(v1 + 16);
  v11[1] = *(_QWORD *)(v1 + 24);
  v11[2] = v8;
  v12 = *(unsigned __int8 *)(v1 + 32);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_1BCA084B4();
  sub_1BCAB68B8();
  v15 = 0;
  v9 = v11[3];
  sub_1BCAB6708();
  if (!v9)
  {
    v14 = 1;
    sub_1BCAB6708();
    v13 = 2;
    sub_1BCAB6750();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_1BCA083B8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return MostRecentSampleQueryConfiguration.init(from:)(a1, a2);
}

uint64_t sub_1BCA083CC(_QWORD *a1)
{
  return MostRecentSampleQueryConfiguration.encode(to:)(a1);
}

uint64_t _s19HealthVisualization34MostRecentSampleQueryConfigurationV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  BOOL v11;
  char v12;
  uint64_t result;
  char v14;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(unsigned __int8 *)(a1 + 32);
  v7 = *(_QWORD *)(a2 + 8);
  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(_QWORD *)(a2 + 24);
  v10 = *(unsigned __int8 *)(a2 + 32);
  if (!v3)
  {
    if (v7)
      return 0;
    goto LABEL_10;
  }
  if (!v7)
    return 0;
  v11 = *(_QWORD *)a1 == *(_QWORD *)a2 && v3 == v7;
  if (v11 || (v12 = sub_1BCAB67C8(), result = 0, (v12 & 1) != 0))
  {
LABEL_10:
    if (v5)
    {
      if (v9)
      {
        if (v4 != v8 || v5 != v9)
        {
          v14 = sub_1BCAB67C8();
          result = 0;
          if ((v14 & 1) == 0)
            return result;
        }
        return v6 ^ v10 ^ 1u;
      }
    }
    else if (!v9)
    {
      return v6 ^ v10 ^ 1u;
    }
    return 0;
  }
  return result;
}

unint64_t sub_1BCA084B4()
{
  unint64_t result;

  result = qword_1ED6C6BD0;
  if (!qword_1ED6C6BD0)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCAC35B8, &type metadata for MostRecentSampleQueryConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED6C6BD0);
  }
  return result;
}

void sub_1BCA084F8(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_1BCA084B4();
    v7 = a3(a1, &type metadata for MostRecentSampleQueryConfiguration.CodingKeys, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

ValueMetadata *type metadata accessor for MostRecentSampleQueryConfiguration()
{
  return &type metadata for MostRecentSampleQueryConfiguration;
}

uint64_t storeEnumTagSinglePayload for MostRecentSampleQueryConfiguration.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1BCA085B0 + 4 * byte_1BCAC3445[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1BCA085E4 + 4 * asc_1BCAC3440[v4]))();
}

uint64_t sub_1BCA085E4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BCA085EC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1BCA085F4);
  return result;
}

uint64_t sub_1BCA08600(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1BCA08608);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1BCA0860C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1BCA08614(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MostRecentSampleQueryConfiguration.CodingKeys()
{
  return &type metadata for MostRecentSampleQueryConfiguration.CodingKeys;
}

unint64_t sub_1BCA08634()
{
  unint64_t result;

  result = qword_1EF478F18;
  if (!qword_1EF478F18)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCAC3590, &type metadata for MostRecentSampleQueryConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EF478F18);
  }
  return result;
}

unint64_t sub_1BCA0867C()
{
  unint64_t result;

  result = qword_1ED6C6BE0;
  if (!qword_1ED6C6BE0)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCAC3500, &type metadata for MostRecentSampleQueryConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED6C6BE0);
  }
  return result;
}

unint64_t sub_1BCA086C4()
{
  unint64_t result;

  result = qword_1ED6C6BD8;
  if (!qword_1ED6C6BD8)
  {
    result = MEMORY[0x1BCCFBE84](&unk_1BCAC3528, &type metadata for MostRecentSampleQueryConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED6C6BD8);
  }
  return result;
}

uint64_t sub_1BCA08708(uint64_t a1, uint64_t a2)
{
  char v5;

  if (a1 == 0xD00000000000001FLL && a2 == 0x80000001BCAD0EC0 || (sub_1BCAB67C8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000021 && a2 == 0x80000001BCAD0EE0 || (sub_1BCAB67C8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x80000001BCAD0F10)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v5 = sub_1BCAB67C8();
    swift_bridgeObjectRelease();
    if ((v5 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t CoreChartTrendDiagram.init(dataViewModel:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  int *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;

  *a2 = 0x4000000000000000;
  v4 = (int *)type metadata accessor for CoreChartTrendDiagram(0);
  v5 = (_QWORD *)((char *)a2 + v4[5]);
  *v5 = swift_getKeyPath();
  sub_1BCA0D378(0);
  swift_storeEnumTagMultiPayload();
  v6 = (_QWORD *)((char *)a2 + v4[6]);
  sub_1BCAB5244();
  sub_1BC996948(&qword_1ED6C4968, (uint64_t (*)(uint64_t))MEMORY[0x1E0D2AF00], MEMORY[0x1E0D2AEF8]);
  *v6 = sub_1BCAB59AC();
  v6[1] = v7;
  v8 = (_QWORD *)((char *)a2 + v4[7]);
  sub_1BCAB51FC();
  sub_1BC996948(&qword_1EF4783E8, (uint64_t (*)(uint64_t))MEMORY[0x1E0D2AEC0], MEMORY[0x1E0D2AEA0]);
  *v8 = sub_1BCAB59AC();
  v8[1] = v9;
  v10 = v4[9];
  *((_BYTE *)a2 + v10) = 0;
  v11 = (_DWORD *)((char *)a2 + v4[8]);
  sub_1BC9964B8(a1, (uint64_t)v11, type metadata accessor for CoreChartTrendViewModel);
  if (!*v11)
    *((_BYTE *)a2 + v10) = 1;
  sub_1BC9C17AC();
  v12 = (void *)sub_1BCAB62E8();
  objc_msgSend(v12, sel_lineHeight);
  v14 = v13;

  result = sub_1BC997208(a1, type metadata accessor for CoreChartTrendViewModel);
  *(_QWORD *)((char *)a2 + v4[10]) = v14;
  return result;
}

uint64_t type metadata accessor for CoreChartTrendDiagram(uint64_t a1)
{
  return sub_1BC9B359C(a1, qword_1ED6C31C0);
}

uint64_t CoreChartTrendDataElement.init(date:value:value2:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>, double a5@<D0>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;

  v10 = type metadata accessor for CoreChartTrendDataElement(0);
  v11 = a4 + *(int *)(v10 + 24);
  v12 = sub_1BCAB4E54();
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(a4, a1, v12);
  *(double *)(a4 + *(int *)(v10 + 20)) = a5;
  *(_QWORD *)v11 = a2;
  *(_BYTE *)(v11 + 8) = a3 & 1;
  return result;
}

int *CoreChartTrendLineViewModel.init(dateInterval:average:xAxisLabel:lineLabel:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>, double a7@<D0>)
{
  uint64_t v14;
  int *result;
  _QWORD *v16;
  _QWORD *v17;

  v14 = sub_1BCAB4BD8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(a6, a1, v14);
  result = (int *)type metadata accessor for CoreChartTrendLineViewModel(0);
  *(double *)(a6 + result[5]) = a7;
  v16 = (_QWORD *)(a6 + result[6]);
  *v16 = a2;
  v16[1] = a3;
  v17 = (_QWORD *)(a6 + result[7]);
  *v17 = a4;
  v17[1] = a5;
  return result;
}

uint64_t CoreChartTrendViewModel.init(diagramStyle:hkType:coveredDateRange:baseTrendLine:changeTrendLine:dataSeries:)@<X0>(int a1@<W0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;

  v14 = (int *)type metadata accessor for CoreChartTrendViewModel(0);
  v15 = a7 + v14[8];
  v16 = type metadata accessor for CoreChartTrendLineViewModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v15, 1, 1, v16);
  *(_DWORD *)a7 = a1;
  *(_QWORD *)(a7 + 8) = a2;
  *(_BYTE *)(a7 + 16) = a3;
  sub_1BC9AE330(a4, a7 + v14[7], type metadata accessor for CoreChartTrendLineViewModel);
  result = sub_1BC9FCA74(a5, v15, (uint64_t (*)(_QWORD))sub_1BCA0D60C);
  *(_QWORD *)(a7 + v14[9]) = a6;
  return result;
}

uint64_t sub_1BCA08BF0()
{
  return sub_1BCAB59C4();
}

uint64_t sub_1BCA08C10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1BCA0D2D8(a1, a2, a3, a4, (void (*)(_QWORD))MEMORY[0x1E0CD9AA8], MEMORY[0x1E0CDA650]);
}

uint64_t CoreChartTrendDataElement.id.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_1BCAB4E54();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t sub_1BCA08C5C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_1BCAB4E54();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t CoreChartTrendViewModel.diagramStyle.getter()
{
  unsigned int *v0;

  return *v0;
}

uint64_t CoreChartTrendViewModel.diagramStyle.setter(uint64_t result)
{
  _DWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*CoreChartTrendViewModel.diagramStyle.modify())()
{
  return nullsub_1;
}

uint64_t CoreChartTrendViewModel.baseTrendLine.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for CoreChartTrendViewModel(0);
  return sub_1BC9964B8(v1 + *(int *)(v3 + 28), a1, type metadata accessor for CoreChartTrendLineViewModel);
}

uint64_t CoreChartTrendViewModel.baseTrendLine.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for CoreChartTrendViewModel(0);
  return sub_1BC9FCA74(a1, v1 + *(int *)(v3 + 28), type metadata accessor for CoreChartTrendLineViewModel);
}

uint64_t (*CoreChartTrendViewModel.baseTrendLine.modify())(_QWORD)
{
  type metadata accessor for CoreChartTrendViewModel(0);
  return nullsub_1;
}

uint64_t CoreChartTrendViewModel.changeTrendLine.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for CoreChartTrendViewModel(0);
  return sub_1BC9964B8(v1 + *(int *)(v3 + 32), a1, (uint64_t (*)(_QWORD))sub_1BCA0D60C);
}

uint64_t CoreChartTrendViewModel.changeTrendLine.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for CoreChartTrendViewModel(0);
  return sub_1BC9FCA74(a1, v1 + *(int *)(v3 + 32), (uint64_t (*)(_QWORD))sub_1BCA0D60C);
}

uint64_t (*CoreChartTrendViewModel.changeTrendLine.modify())(_QWORD)
{
  type metadata accessor for CoreChartTrendViewModel(0);
  return nullsub_1;
}

uint64_t sub_1BCA08DF4(uint64_t a1)
{
  return sub_1BCA08E3C(a1, 0xD000000000000011, 0x80000001BCAD0F30, &qword_1ED6D3848);
}

uint64_t sub_1BCA08E18(uint64_t a1)
{
  return sub_1BCA08E3C(a1, 0xD000000000000016, 0x80000001BCAD0F50, &qword_1ED6D3840);
}

uint64_t sub_1BCA08E3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  id v5;
  uint64_t result;

  if (qword_1ED6C3600 != -1)
    swift_once();
  v5 = (id)qword_1ED6D3830;
  result = sub_1BCAB5D90();
  *a4 = result;
  return result;
}

uint64_t CoreChartTrendDiagram.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  _OWORD *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  void *v29;
  id v30;
  uint64_t v31;
  id v32;
  id v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v48;
  uint64_t (*v49)(void);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t (*v53)(uint64_t);
  char *v54;
  uint64_t KeyPath;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t result;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;

  v2 = v1;
  v81 = a1;
  sub_1BCA0D628(0);
  v71 = v3;
  MEMORY[0x1E0C80A78](v3);
  v73 = (uint64_t *)((char *)&v66 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = sub_1BCAB5964();
  v74 = *(_QWORD *)(v5 - 8);
  v75 = v5;
  MEMORY[0x1E0C80A78](v5);
  v72 = (char *)&v66 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BC9B69A0();
  v69 = v7;
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v66 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v77 = sub_1BCAB597C();
  MEMORY[0x1E0C80A78](v77);
  v11 = (_OWORD *)((char *)&v66 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1BCA0D644();
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v66 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BCA0EF6C();
  v76 = v15;
  MEMORY[0x1E0C80A78](v15);
  v17 = (char *)&v66 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BCA0EFF0(0);
  v78 = v18;
  MEMORY[0x1E0C80A78](v18);
  v20 = (char *)&v66 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BCA0F08C(0);
  v70 = v21;
  v68 = *(_QWORD *)(v21 - 8);
  MEMORY[0x1E0C80A78](v21);
  v67 = (char *)&v66 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BCA03158(0, &qword_1EF479098, v23, (uint64_t (*)(uint64_t))sub_1BCA0D628, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CD9BF0]);
  v79 = *(_QWORD *)(v24 - 8);
  v80 = v24;
  MEMORY[0x1E0C80A78](v24);
  v66 = (char *)&v66 - v25;
  v26 = type metadata accessor for CoreChartTrendDiagram(0);
  if (!*(_QWORD *)(v1 + *(int *)(v26 + 24)))
    goto LABEL_13;
  v27 = v26;
  v28 = (void *)objc_opt_self();
  swift_retain();
  v29 = (void *)sub_1BCAB5214();
  swift_release();
  v30 = objc_msgSend(v28, sel_sharedInstanceForHealthStore_, v29);

  if (!v30)
    goto LABEL_11;
  v31 = v2 + *(int *)(v27 + 32);
  v32 = objc_msgSend(v30, sel_displayTypeForObjectType_, *(_QWORD *)(v31 + 8));

  if (v32)
  {
    v33 = objc_msgSend(v32, sel_displayCategory);

    v34 = objc_msgSend(v33, sel_color);
    if (!v34)
      v34 = objc_msgSend((id)objc_opt_self(), sel_systemGrayColor);
    v35 = MEMORY[0x1BCCFA924](v34);
    if (!*(_QWORD *)(*(_QWORD *)(v31 + *(int *)(type metadata accessor for CoreChartTrendViewModel(0) + 36)) + 16))
    {
      swift_release();
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v79 + 56))(v81, 1, 1, v80);
    }
    *(_QWORD *)v14 = sub_1BCAB5A90();
    *((_QWORD *)v14 + 1) = 0x4020000000000000;
    v14[16] = 0;
    sub_1BCA0F234();
    sub_1BCA09610(v2, v35, (uint64_t)&v14[*(int *)(v36 + 44)]);
    v37 = sub_1BCAB5D54();
    v38 = sub_1BCAB5B80();
    sub_1BC9964B8((uint64_t)v14, (uint64_t)v17, (uint64_t (*)(_QWORD))sub_1BCA0D644);
    v39 = &v17[*(int *)(v76 + 36)];
    *(_QWORD *)v39 = v37;
    v39[8] = v38;
    sub_1BC997208((uint64_t)v14, (uint64_t (*)(_QWORD))sub_1BCA0D644);
    v40 = (char *)v11 + *(int *)(v77 + 20);
    v41 = *MEMORY[0x1E0CDB0C0];
    v42 = sub_1BCAB5A84();
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 104))(v40, v41, v42);
    __asm { FMOV            V0.2D, #4.0 }
    *v11 = _Q0;
    v48 = (uint64_t)&v20[*(int *)(v78 + 36)];
    v49 = MEMORY[0x1E0CDA088];
    sub_1BC9964B8((uint64_t)v11, v48, (uint64_t (*)(_QWORD))MEMORY[0x1E0CDA088]);
    sub_1BCA0F014();
    *(_WORD *)(v48 + *(int *)(v50 + 36)) = 256;
    sub_1BC9964B8((uint64_t)v17, (uint64_t)v20, (uint64_t (*)(_QWORD))sub_1BCA0EF6C);
    sub_1BC997208((uint64_t)v11, (uint64_t (*)(_QWORD))v49);
    sub_1BC997208((uint64_t)v17, (uint64_t (*)(_QWORD))sub_1BCA0EF6C);
    v51 = *MEMORY[0x1E0CD9950];
    v52 = sub_1BCAB5958();
    v53 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CD9958];
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 104))(v9, v51, v52);
    sub_1BC996948(&qword_1ED6C3568, v53, MEMORY[0x1E0CD9990]);
    if ((sub_1BCAB5ED4() & 1) != 0)
    {
      sub_1BCA0F168(&qword_1EF479080, (uint64_t (*)(uint64_t))sub_1BCA0EFF0, sub_1BCA0F1D8, sub_1BCA0F218);
      sub_1BC996948(&qword_1ED6C3608, (uint64_t (*)(uint64_t))sub_1BC9B69A0, MEMORY[0x1E0DECD88]);
      v77 = v35;
      v54 = v67;
      sub_1BCAB5CF4();
      sub_1BC997208((uint64_t)v9, (uint64_t (*)(_QWORD))sub_1BC9B69A0);
      sub_1BC997208((uint64_t)v20, (uint64_t (*)(_QWORD))sub_1BCA0EFF0);
      KeyPath = swift_getKeyPath();
      v57 = v74;
      v56 = v75;
      v58 = v72;
      (*(void (**)(char *, _QWORD, uint64_t))(v74 + 104))(v72, *MEMORY[0x1E0CD9A90], v75);
      v59 = v73;
      (*(void (**)(char *, char *, uint64_t))(v57 + 16))((char *)v73 + *(int *)(v71 + 28), v58, v56);
      *v59 = KeyPath;
      v60 = v68;
      v61 = (uint64_t)v66;
      v62 = v70;
      (*(void (**)(char *, char *, uint64_t))(v68 + 16))(v66, v54, v70);
      v63 = v80;
      sub_1BC9964B8((uint64_t)v59, v61 + *(int *)(v80 + 36), (uint64_t (*)(_QWORD))sub_1BCA0D628);
      swift_retain();
      sub_1BC997208((uint64_t)v59, (uint64_t (*)(_QWORD))sub_1BCA0D628);
      swift_release();
      swift_release();
      (*(void (**)(char *, uint64_t))(v57 + 8))(v58, v56);
      (*(void (**)(char *, uint64_t))(v60 + 8))(v54, v62);
      v64 = v81;
      sub_1BCA0F2DC(v61, v81, (uint64_t)&qword_1EF479098, (uint64_t)sub_1BCA0F08C, (uint64_t)sub_1BCA0D628, (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t, _QWORD))sub_1BCA03158);
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v79 + 56))(v64, 0, 1, v63);
    }
    __break(1u);
LABEL_11:
    __break(1u);
  }
  __break(1u);
LABEL_13:
  sub_1BCAB5244();
  sub_1BC996948(&qword_1ED6C4968, (uint64_t (*)(uint64_t))MEMORY[0x1E0D2AF00], MEMORY[0x1E0D2AEF8]);
  result = sub_1BCAB59A0();
  __break(1u);
  return result;
}

uint64_t sub_1BCA09610@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t OpaqueTypeConformance2;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _OWORD *v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94[2];
  char v95;
  uint64_t v96;
  uint64_t v97;
  unsigned __int8 v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;

  v81 = a2;
  v89 = a3;
  sub_1BC998AB0(0, &qword_1EF4786D0, (uint64_t (*)(uint64_t))MEMORY[0x1E0C93C30], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v5);
  v85 = (char *)&v70 - v6;
  v87 = sub_1BCAB56B8();
  v88 = *(_QWORD *)(v87 - 8);
  MEMORY[0x1E0C80A78](v87);
  v80 = (char *)&v70 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v73 = type metadata accessor for CoreChartTrendDiagram(0);
  v74 = *(_QWORD *)(v73 - 8);
  v75 = *(_QWORD *)(v74 + 64);
  MEMORY[0x1E0C80A78](v73);
  v72 = (uint64_t)&v70 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v84 = sub_1BCAB56AC();
  v86 = *(_QWORD *)(v84 - 8);
  MEMORY[0x1E0C80A78](v84);
  v76 = (char *)&v70 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BCA0D9BC();
  v11 = v10;
  v12 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v70 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BCA0D930(0);
  v16 = v15;
  v17 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v70 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BCA0D878(0);
  v77 = v20;
  v78 = *(_QWORD *)(v20 - 8);
  MEMORY[0x1E0C80A78](v20);
  v22 = (char *)&v70 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BCA0D764(0);
  v83 = v23;
  v82 = *(_QWORD *)(v23 - 8);
  MEMORY[0x1E0C80A78](v23);
  v71 = (char *)&v70 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BC9BFB64(0, &qword_1EF478F38, v25, MEMORY[0x1E0CDA240], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CD9BF0]);
  v79 = v26;
  MEMORY[0x1E0C80A78](v26);
  v91 = (uint64_t)&v70 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v28);
  v70 = (char *)&v70 - v29;
  MEMORY[0x1E0C80A78](v30);
  v90 = (uint64_t)&v70 - v31;
  v92 = a1;
  v93 = a2;
  sub_1BCA0DA1C();
  sub_1BCA0E800();
  sub_1BCAB56F4();
  v32 = sub_1BC996948(&qword_1EF479050, (uint64_t (*)(uint64_t))sub_1BCA0D9BC, MEMORY[0x1E0C939B0]);
  sub_1BCAB5C7C();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  *(_QWORD *)&v103 = v11;
  *((_QWORD *)&v103 + 1) = v32;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  sub_1BCAB5C88();
  (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
  v34 = a1;
  v35 = a1;
  v36 = v72;
  sub_1BC9964B8(v35, v72, type metadata accessor for CoreChartTrendDiagram);
  v37 = (*(unsigned __int8 *)(v74 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v74 + 80);
  v38 = swift_allocObject();
  sub_1BC9AE330(v36, v38 + v37, type metadata accessor for CoreChartTrendDiagram);
  v39 = v76;
  sub_1BCAB5544();
  swift_release();
  v40 = v80;
  sub_1BCAB56A0();
  v41 = sub_1BCAB57CC();
  v42 = (uint64_t)v85;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 56))(v85, 1, 1, v41);
  *(_QWORD *)&v103 = v16;
  *((_QWORD *)&v103 + 1) = OpaqueTypeConformance2;
  swift_getOpaqueTypeConformance2();
  v43 = v71;
  v44 = v77;
  v45 = v84;
  v46 = v87;
  sub_1BCAB5CAC();
  sub_1BC9B3A38(v42, &qword_1EF4786D0, (uint64_t (*)(uint64_t))MEMORY[0x1E0C93C30]);
  (*(void (**)(char *, uint64_t))(v88 + 8))(v40, v46);
  (*(void (**)(char *, uint64_t))(v86 + 8))(v39, v45);
  (*(void (**)(char *, uint64_t))(v78 + 8))(v22, v44);
  sub_1BCAB5DE4();
  sub_1BCAB5994();
  v47 = v82;
  v48 = (uint64_t)v70;
  v49 = v83;
  (*(void (**)(char *, char *, uint64_t))(v82 + 16))(v70, v43, v83);
  v50 = (_OWORD *)(v48 + *(int *)(v79 + 36));
  v51 = v108;
  v50[4] = v107;
  v50[5] = v51;
  v50[6] = v109;
  v52 = v104;
  *v50 = v103;
  v50[1] = v52;
  v53 = v106;
  v50[2] = v105;
  v50[3] = v53;
  (*(void (**)(char *, uint64_t))(v47 + 8))(v43, v49);
  v54 = v90;
  sub_1BCA0F2DC(v48, v90, (uint64_t)&qword_1EF478F38, (uint64_t)sub_1BCA0D764, MEMORY[0x1E0CDA240], (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t, _QWORD))sub_1BC9BFB64);
  v88 = sub_1BCAB5A24();
  sub_1BCA0C82C(v34, v81, v94);
  v55 = v94[0];
  v56 = v94[1];
  LOBYTE(v45) = v95;
  v57 = v96;
  v58 = v97;
  LODWORD(v87) = v98;
  v59 = v99;
  v60 = v100;
  v61 = v101;
  v62 = v102;
  v63 = v54;
  v64 = v91;
  sub_1BCA12B7C(v63, v91);
  v65 = v64;
  v66 = v89;
  sub_1BCA12B7C(v65, v89);
  sub_1BCA0D6D8();
  v68 = v66 + *(int *)(v67 + 48);
  *(_QWORD *)v68 = v88;
  *(_QWORD *)(v68 + 8) = 0;
  *(_BYTE *)(v68 + 16) = 1;
  *(_QWORD *)(v68 + 24) = v55;
  *(_QWORD *)(v68 + 32) = v56;
  *(_BYTE *)(v68 + 40) = v45;
  *(_QWORD *)(v68 + 48) = v57;
  *(_QWORD *)(v68 + 56) = v58;
  *(_BYTE *)(v68 + 64) = v87;
  *(_QWORD *)(v68 + 72) = v59;
  *(_QWORD *)(v68 + 80) = v60;
  *(_QWORD *)(v68 + 88) = v61;
  *(_QWORD *)(v68 + 96) = v62;
  sub_1BC9C16A8(v55, v56, v45);
  swift_bridgeObjectRetain();
  sub_1BC9C16D8(v59, v60, v61, v62);
  sub_1BCA12BE0(v90);
  sub_1BC9C15C0(v55, v56, v45);
  swift_bridgeObjectRelease();
  sub_1BC9C1774(v59, v60, v61, v62);
  return sub_1BCA12BE0(v91);
}

uint64_t sub_1BCA09E1C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  char v88;
  uint64_t v89;
  unsigned int *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char v95;
  uint64_t v96;
  uint64_t v97;
  unsigned int *v98;
  uint64_t v99;
  char v100;
  int *v101;
  unsigned int *v102;
  uint64_t v103;
  void (*v104)(char *, uint64_t, uint64_t);
  uint64_t v105;
  int *v106;
  int *v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t (*v118)(uint64_t, uint64_t, uint64_t);
  void (*v119)(char *, uint64_t, uint64_t);
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  char *v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  unint64_t v144;
  unint64_t v145;
  unint64_t v146;
  uint64_t OpaqueTypeConformance2;
  uint64_t v148;
  uint64_t v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  int v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  char *v159;
  uint64_t v160;
  void (*v161)(uint64_t, uint64_t, uint64_t, uint64_t);
  int v162;
  unsigned int *v163;
  uint64_t v164;
  char *v165;
  char v166;
  void (*v167)(char *, uint64_t);
  uint64_t v168;
  void (*v169)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  int v173;
  char *v174;
  unsigned int *v175;
  uint64_t v176;
  int *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t *v183;
  uint64_t v184;
  uint64_t v185;
  int *v186;
  uint64_t v187;
  void (*v188)(uint64_t, char *, uint64_t);
  char *v189;
  uint64_t v190;
  uint64_t v191;
  char *v192;
  void (*v193)(uint64_t, char *, uint64_t);
  uint64_t *v194;
  _QWORD *v195;
  uint64_t v196;
  void (*v197)(char *, uint64_t, uint64_t);
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  char *v206;
  uint64_t v207;
  char v208;
  void (*v209)(char *, uint64_t);
  uint64_t v210;
  uint64_t v211;
  char *v212;
  unsigned int *v213;
  char *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t *v220;
  uint64_t v221;
  int *v222;
  uint64_t v223;
  uint64_t v224;
  char *v225;
  uint64_t v226;
  void (*v227)(uint64_t, char *, uint64_t);
  uint64_t *v228;
  uint64_t *v229;
  char *v230;
  void (*v231)(char *, char *, uint64_t);
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  char *v235;
  uint64_t v236;
  void (*v237)(char *, uint64_t);
  uint64_t v239;
  char *v240;
  uint64_t v241;
  char *v242;
  uint64_t v243;
  char *v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  char *v251;
  uint64_t v252;
  uint64_t v253;
  char *v254;
  char *v255;
  char *v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  char *v260;
  uint64_t v261;
  uint64_t v262;
  char *v263;
  char *v264;
  char *v265;
  char *v266;
  char *v267;
  char *v268;
  uint64_t v269;
  void (*v270)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v271;
  char *v272;
  char *v273;
  uint64_t v274;
  uint64_t v275;
  char *v276;
  uint64_t v277;
  char *v278;
  uint64_t v279;
  char *v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t (*v290)(uint64_t, uint64_t, uint64_t);
  uint64_t v291;
  int *v292;
  uint64_t v293;
  char *v294;
  char *v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  void (*v299)(char *, uint64_t, uint64_t);
  uint64_t v300;
  uint64_t v301;
  int *v302;
  uint64_t v303;
  uint64_t v304;
  char *v305;
  unint64_t v306;
  unint64_t v307;
  uint64_t v308;
  uint64_t v309;

  v287 = a2;
  v303 = a1;
  v282 = a3;
  v304 = type metadata accessor for CoreChartTrendLineViewModel(0);
  v291 = *(_QWORD *)(v304 - 8);
  MEMORY[0x1E0C80A78](v304);
  v279 = (uint64_t)&v239 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BCA0E7E4(0);
  MEMORY[0x1E0C80A78](v4);
  v281 = (uint64_t)&v239 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v280 = (char *)&v239 - v7;
  v8 = sub_1BCAB4F68();
  v299 = *(void (**)(char *, uint64_t, uint64_t))(v8 - 8);
  v300 = v8;
  MEMORY[0x1E0C80A78](v8);
  v267 = (char *)&v239 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v268 = (char *)&v239 - v11;
  v298 = sub_1BCAB4E54();
  v274 = *(_QWORD *)(v298 - 8);
  MEMORY[0x1E0C80A78](v298);
  v278 = (char *)&v239 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v264 = (char *)&v239 - v14;
  MEMORY[0x1E0C80A78](v15);
  v294 = (char *)&v239 - v16;
  MEMORY[0x1E0C80A78](v17);
  v272 = (char *)&v239 - v18;
  v285 = type metadata accessor for CoreChartTrendLineView(0);
  MEMORY[0x1E0C80A78](v285);
  v266 = (char *)&v239 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v20);
  v273 = (char *)&v239 - v21;
  sub_1BCA0E078(0);
  v286 = v22;
  v296 = *(_QWORD *)(v22 - 8);
  MEMORY[0x1E0C80A78](v22);
  v265 = (char *)&v239 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v24);
  v297 = (uint64_t)&v239 - v25;
  MEMORY[0x1E0C80A78](v26);
  v295 = (char *)&v239 - v27;
  v284 = sub_1BCAB5904();
  v283 = *(_QWORD *)(v284 - 8);
  MEMORY[0x1E0C80A78](v284);
  v276 = (char *)&v239 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v29);
  v275 = (uint64_t)&v239 - v30;
  v31 = type metadata accessor for CoreChartTrendDiagram(0);
  MEMORY[0x1E0C80A78](v31);
  v290 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&v239 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1BCA0F338(0);
  MEMORY[0x1E0C80A78](v33);
  v277 = (uint64_t)&v239 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v35);
  v301 = (uint64_t)&v239 - v36;
  sub_1BCA0D60C(0);
  MEMORY[0x1E0C80A78](v37);
  v271 = (uint64_t)&v239 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v39);
  v270 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&v239 - v40);
  MEMORY[0x1E0C80A78](v41);
  v269 = (uint64_t)&v239 - v42;
  v249 = type metadata accessor for CoreChartTrendDistributionSeries();
  v245 = *(_QWORD *)(v249 - 8);
  v43 = *(_QWORD *)(v245 + 64);
  MEMORY[0x1E0C80A78](v249);
  v242 = (char *)&v239 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v44);
  v247 = (uint64_t)&v239 - v45;
  MEMORY[0x1E0C80A78](v46);
  v240 = (char *)&v239 - v47;
  sub_1BC997888();
  v259 = v48;
  v258 = *(_QWORD *)(v48 - 8);
  MEMORY[0x1E0C80A78](v48);
  v254 = (char *)&v239 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v50);
  v255 = (char *)&v239 - v51;
  v241 = type metadata accessor for CoreChartTrendLineSeries();
  v248 = *(_QWORD *)(v241 - 8);
  v52 = *(_QWORD *)(v248 + 64);
  MEMORY[0x1E0C80A78](v241);
  v250 = (uint64_t)&v239 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v53);
  v243 = (uint64_t)&v239 - v54;
  MEMORY[0x1E0C80A78](v55);
  v257 = (uint64_t)&v239 - v56;
  sub_1BCA0DBB4(0);
  v262 = v57;
  v261 = *(_QWORD *)(v57 - 8);
  MEMORY[0x1E0C80A78](v57);
  v256 = (char *)&v239 - ((v58 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v59);
  v260 = (char *)&v239 - v60;
  sub_1BCA0DAD8(0);
  MEMORY[0x1E0C80A78](v61);
  v263 = (char *)&v239 - ((v62 + 15) & 0xFFFFFFFFFFFFFFF0);
  v292 = (int *)type metadata accessor for CoreChartTrendViewModel(0);
  MEMORY[0x1E0C80A78](v292);
  v64 = (char *)&v239 - ((v63 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v65);
  v67 = (char *)&v239 - v66;
  MEMORY[0x1E0C80A78](v68);
  v70 = (char *)&v239 - v69;
  v71 = type metadata accessor for CoreChartTrendBarSeries();
  v239 = *(_QWORD *)(v71 - 8);
  v72 = *(_QWORD *)(v239 + 64);
  MEMORY[0x1E0C80A78](v71);
  v73 = (char *)&v239 - ((v72 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v74);
  v76 = (char *)&v239 - v75;
  MEMORY[0x1E0C80A78](v77);
  v246 = (uint64_t)&v239 - v78;
  sub_1BCA0DAFC(0);
  v253 = v79;
  v252 = *(_QWORD *)(v79 - 8);
  MEMORY[0x1E0C80A78](v79);
  v244 = (char *)&v239 - ((v80 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v81);
  v251 = (char *)&v239 - v82;
  sub_1BCA0DA98(0);
  MEMORY[0x1E0C80A78](v83);
  v289 = (uint64_t)&v239 - ((v84 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v85);
  v293 = (uint64_t)&v239 - v86;
  v288 = v31;
  v302 = (int *)(v303 + *(int *)(v31 + 32));
  v87 = *v302;
  if (*v302 == 3)
  {
    v91 = v245;
    v92 = (uint64_t)v242;
    v93 = (uint64_t)v240;
    sub_1BC9964B8((uint64_t)v302, (uint64_t)v64, type metadata accessor for CoreChartTrendViewModel);
    v94 = v247;
    sub_1BC9964B8((uint64_t)v64, v247, type metadata accessor for CoreChartTrendViewModel);
    v95 = v64[16];
    sub_1BC997208((uint64_t)v64, type metadata accessor for CoreChartTrendViewModel);
    v96 = v94 + *(int *)(v249 + 20);
    v97 = v94;
    if ((v95 - 2) > 3u)
      v98 = (unsigned int *)MEMORY[0x1E0CB1130];
    else
      v98 = (unsigned int *)qword_1E754A3E0[(char)(v95 - 2)];
    v119 = v299;
    v89 = v300;
    v106 = v292;
    v120 = v93;
    (*((void (**)(uint64_t, _QWORD, uint64_t))v299 + 13))(v96, *v98, v300);
    sub_1BC9AE330(v97, v93, (uint64_t (*)(_QWORD))type metadata accessor for CoreChartTrendDistributionSeries);
    v263 = *(char **)(v93 + v106[9]);
    v305 = v263;
    sub_1BC9964B8(v93, v92, (uint64_t (*)(_QWORD))type metadata accessor for CoreChartTrendDistributionSeries);
    v121 = (*(unsigned __int8 *)(v91 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v91 + 80);
    v122 = swift_allocObject();
    sub_1BC9AE330(v92, v122 + v121, (uint64_t (*)(_QWORD))type metadata accessor for CoreChartTrendDistributionSeries);
    sub_1BCA0DB10(0);
    v262 = v123;
    sub_1BC998AB0(0, &qword_1EF477CC0, (uint64_t (*)(uint64_t))sub_1BC9966F4, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
    sub_1BC996948((unint64_t *)&qword_1EF477CD8, (uint64_t (*)(uint64_t))sub_1BCA0DB10, MEMORY[0x1E0DEAF48]);
    sub_1BC996874();
    sub_1BC996948(qword_1EF477CE8, type metadata accessor for CoreChartTrendDataElement, (uint64_t)&protocol conformance descriptor for CoreChartTrendDataElement);
    swift_bridgeObjectRetain();
    v124 = v254;
    v104 = v119;
    sub_1BCAB5DCC();
    sub_1BC997208(v120, (uint64_t (*)(_QWORD))type metadata accessor for CoreChartTrendDistributionSeries);
    v125 = v258;
    v126 = v255;
    v127 = v124;
    v128 = v259;
    (*(void (**)(char *, char *, uint64_t))(v258 + 32))(v255, v127, v259);
    v129 = v289;
    (*(void (**)(uint64_t, char *, uint64_t))(v125 + 16))(v289, v126, v128);
    sub_1BCA03158(0, &qword_1EF479200, (uint64_t (*)(uint64_t))sub_1BCA0DAD8, (uint64_t (*)(uint64_t))sub_1BC997888, MEMORY[0x1E0C93808]);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(char *, uint64_t))(v125 + 8))(v126, v128);
    sub_1BCA0DAB4(0);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v130 - 8) + 56))(v129, 0, 1, v130);
    v131 = v129;
  }
  else
  {
    if (v87 == 1)
    {
      sub_1BC9964B8((uint64_t)v302, (uint64_t)v67, type metadata accessor for CoreChartTrendViewModel);
      v99 = v243;
      sub_1BC9964B8((uint64_t)v67, v243, type metadata accessor for CoreChartTrendViewModel);
      v100 = v67[16];
      sub_1BC997208((uint64_t)v67, type metadata accessor for CoreChartTrendViewModel);
      v101 = v292;
      if ((v100 - 2) > 3u)
        v102 = (unsigned int *)MEMORY[0x1E0CB1130];
      else
        v102 = (unsigned int *)qword_1E754A3E0[(char)(v100 - 2)];
      v132 = v300;
      (*((void (**)(uint64_t, _QWORD, uint64_t))v299 + 13))(v99 + *(int *)(v241 + 20), *v102, v300);
      v133 = v257;
      sub_1BC9AE330(v99, v257, (uint64_t (*)(_QWORD))type metadata accessor for CoreChartTrendLineSeries);
      v309 = *(_QWORD *)(v133 + v101[9]);
      v134 = v250;
      sub_1BC9964B8(v133, v250, (uint64_t (*)(_QWORD))type metadata accessor for CoreChartTrendLineSeries);
      v135 = (*(unsigned __int8 *)(v248 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v248 + 80);
      v259 = swift_allocObject();
      sub_1BC9AE330(v134, v259 + v135, (uint64_t (*)(_QWORD))type metadata accessor for CoreChartTrendLineSeries);
      sub_1BCA0DB10(0);
      v258 = v136;
      sub_1BCA0DCA4(0);
      v255 = v137;
      sub_1BC996948((unint64_t *)&qword_1EF477CD8, (uint64_t (*)(uint64_t))sub_1BCA0DB10, MEMORY[0x1E0DEAF48]);
      sub_1BCA0DDC8(255);
      v139 = v138;
      sub_1BCA0DEB4(255);
      v141 = v140;
      v142 = sub_1BCAB576C();
      sub_1BCA0DF74(255);
      v144 = v143;
      v145 = sub_1BCA0DFF0();
      v146 = sub_1BCA0E034();
      v106 = v292;
      swift_bridgeObjectRetain();
      v305 = (char *)MEMORY[0x1E0CDFAD0];
      v306 = v145;
      v307 = v146;
      OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
      v305 = (char *)v142;
      v306 = v144;
      v104 = v299;
      v89 = v132;
      v307 = MEMORY[0x1E0C93AD8];
      v308 = OpaqueTypeConformance2;
      v148 = swift_getOpaqueTypeConformance2();
      v305 = (char *)v141;
      v306 = v148;
      v149 = swift_getOpaqueTypeConformance2();
      v305 = (char *)v139;
      v306 = MEMORY[0x1E0CDF5D0];
      v307 = v149;
      v308 = MEMORY[0x1E0CDF598];
      swift_getOpaqueTypeConformance2();
      sub_1BC996948(qword_1EF477CE8, type metadata accessor for CoreChartTrendDataElement, (uint64_t)&protocol conformance descriptor for CoreChartTrendDataElement);
      v150 = v256;
      sub_1BCAB5DCC();
      sub_1BC997208(v133, (uint64_t (*)(_QWORD))type metadata accessor for CoreChartTrendLineSeries);
      v114 = v261;
      v115 = v260;
      v116 = v262;
      (*(void (**)(char *, char *, uint64_t))(v261 + 32))(v260, v150, v262);
      v117 = (uint64_t)v263;
      (*(void (**)(char *, char *, uint64_t))(v114 + 16))(v263, v115, v116);
      v118 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0C93808];
      sub_1BCA03158(0, &qword_1EF479208, (uint64_t (*)(uint64_t))sub_1BCA0DAFC, (uint64_t (*)(uint64_t))sub_1BCA0DBB4, MEMORY[0x1E0C93808]);
    }
    else
    {
      if (v87)
      {
        sub_1BCA0DAB4(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v103 - 8) + 56))(v293, 1, 1, v103);
        v104 = v299;
        v89 = v300;
        v105 = (uint64_t)v290;
        v106 = v292;
        goto LABEL_19;
      }
      sub_1BC9964B8((uint64_t)v302, (uint64_t)v70, type metadata accessor for CoreChartTrendViewModel);
      sub_1BC9964B8((uint64_t)v70, (uint64_t)v76, type metadata accessor for CoreChartTrendViewModel);
      v88 = v70[16];
      sub_1BC997208((uint64_t)v70, type metadata accessor for CoreChartTrendViewModel);
      v89 = v300;
      if ((v88 - 2) > 3u)
        v90 = (unsigned int *)MEMORY[0x1E0CB1130];
      else
        v90 = (unsigned int *)qword_1E754A3E0[(char)(v88 - 2)];
      v107 = v292;
      (*((void (**)(char *, _QWORD, uint64_t))v299 + 13))(&v76[*(int *)(v71 + 20)], *v90, v300);
      v108 = v246;
      sub_1BC9AE330((uint64_t)v76, v246, (uint64_t (*)(_QWORD))type metadata accessor for CoreChartTrendBarSeries);
      v309 = *(_QWORD *)(v108 + v107[9]);
      sub_1BC9964B8(v108, (uint64_t)v73, (uint64_t (*)(_QWORD))type metadata accessor for CoreChartTrendBarSeries);
      v109 = (*(unsigned __int8 *)(v239 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v239 + 80);
      v110 = swift_allocObject();
      sub_1BC9AE330((uint64_t)v73, v110 + v109, (uint64_t (*)(_QWORD))type metadata accessor for CoreChartTrendBarSeries);
      sub_1BCA0DB10(0);
      sub_1BCA0DB2C(0);
      sub_1BC996948((unint64_t *)&qword_1EF477CD8, (uint64_t (*)(uint64_t))sub_1BCA0DB10, MEMORY[0x1E0DEAF48]);
      v111 = sub_1BCAB5718();
      swift_bridgeObjectRetain();
      v305 = (char *)v111;
      v306 = MEMORY[0x1E0CDF5D0];
      v307 = MEMORY[0x1E0C939E0];
      v308 = MEMORY[0x1E0CDF598];
      swift_getOpaqueTypeConformance2();
      sub_1BC996948(qword_1EF477CE8, type metadata accessor for CoreChartTrendDataElement, (uint64_t)&protocol conformance descriptor for CoreChartTrendDataElement);
      v112 = v244;
      v106 = v292;
      sub_1BCAB5DCC();
      v113 = v108;
      v104 = v299;
      sub_1BC997208(v113, (uint64_t (*)(_QWORD))type metadata accessor for CoreChartTrendBarSeries);
      v114 = v252;
      v115 = v251;
      v116 = v253;
      (*(void (**)(char *, char *, uint64_t))(v252 + 32))(v251, v112, v253);
      v117 = (uint64_t)v263;
      (*(void (**)(char *, char *, uint64_t))(v114 + 16))(v263, v115, v116);
      v118 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0C93808];
      sub_1BCA03158(0, &qword_1EF479208, (uint64_t (*)(uint64_t))sub_1BCA0DAFC, (uint64_t (*)(uint64_t))sub_1BCA0DBB4, MEMORY[0x1E0C93808]);
    }
    swift_storeEnumTagMultiPayload();
    v151 = v289;
    sub_1BC9964B8(v117, v289, (uint64_t (*)(_QWORD))sub_1BCA0DAD8);
    sub_1BCA03158(0, &qword_1EF479200, (uint64_t (*)(uint64_t))sub_1BCA0DAD8, (uint64_t (*)(uint64_t))sub_1BC997888, v118);
    swift_storeEnumTagMultiPayload();
    sub_1BC997208(v117, (uint64_t (*)(_QWORD))sub_1BCA0DAD8);
    (*(void (**)(char *, uint64_t))(v114 + 8))(v115, v116);
    sub_1BCA0DAB4(0);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v152 - 8) + 56))(v151, 0, 1, v152);
    v131 = v151;
  }
  sub_1BC9AE330(v131, v293, (uint64_t (*)(_QWORD))sub_1BCA0DA98);
  v105 = (uint64_t)v290;
LABEL_19:
  v153 = (uint64_t)v302 + v106[8];
  v154 = v269;
  sub_1BC9964B8(v153, v269, (uint64_t (*)(_QWORD))sub_1BCA0D60C);
  v290 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v291 + 48);
  v155 = v290(v154, 1, v304);
  sub_1BC997208(v154, (uint64_t (*)(_QWORD))sub_1BCA0D60C);
  v156 = v287;
  v157 = v284;
  v158 = v283;
  v159 = v272;
  if (v155 != 1)
  {
    if (qword_1ED6C31B0 != -1)
      swift_once();
    v156 = qword_1ED6D3840;
  }
  v291 = v156;
  swift_retain();
  v269 = v153;
  v160 = v153;
  v161 = v270;
  sub_1BC9964B8(v160, (uint64_t)v270, (uint64_t (*)(_QWORD))sub_1BCA0D60C);
  v162 = v290((uint64_t)v161, 1, v304);
  sub_1BC997208((uint64_t)v161, (uint64_t (*)(_QWORD))sub_1BCA0D60C);
  sub_1BC9964B8(v303, v105, type metadata accessor for CoreChartTrendDiagram);
  v163 = (unsigned int *)MEMORY[0x1E0CD86E0];
  if (v162 == 1)
  {
    v164 = v275;
    sub_1BCA0D3A8(v275);
    v165 = v276;
    (*(void (**)(char *, _QWORD, uint64_t))(v158 + 104))(v276, *v163, v157);
    v166 = sub_1BCAB58F8();
    v167 = *(void (**)(char *, uint64_t))(v158 + 8);
    v167(v165, v157);
    v168 = v164;
    v106 = v292;
    v167((char *)v168, v157);
    sub_1BC997208(v105, type metadata accessor for CoreChartTrendDiagram);
    if ((v166 & 1) == 0)
    {
      v169 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v158 + 56);
      v169(v301, 1, 1, v157);
      goto LABEL_28;
    }
  }
  else
  {
    sub_1BC997208(v105, type metadata accessor for CoreChartTrendDiagram);
  }
  v170 = v301;
  sub_1BCA0D3A8(v301);
  v169 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v158 + 56);
  v169(v170, 0, 1, v157);
LABEL_28:
  v171 = (uint64_t)v302;
  v172 = (uint64_t)v302 + v106[7];
  sub_1BCAB4BC0();
  sub_1BCAB4B9C();
  v173 = *(unsigned __int8 *)(v171 + 16) - 2;
  v270 = v169;
  v174 = v268;
  switch(v173)
  {
    case 0:
      v175 = (unsigned int *)MEMORY[0x1E0CB1140];
      goto LABEL_33;
    case 1:
    case 2:
      v175 = (unsigned int *)MEMORY[0x1E0CB1130];
      goto LABEL_33;
    case 3:
      v175 = (unsigned int *)MEMORY[0x1E0CB10F8];
LABEL_33:
      v176 = *v175;
      v177 = (int *)*((_QWORD *)v104 + 13);
      break;
    default:
      v176 = *MEMORY[0x1E0CB1130];
      v177 = (int *)*((_QWORD *)v104 + 13);
      v174 = v268;
      break;
  }
  v292 = v177;
  ((void (*)(char *, uint64_t, uint64_t))v177)(v174, v176, v89);
  v178 = sub_1BCAB5DF0();
  v180 = v179;
  v181 = v304;
  v182 = *(_QWORD *)(v172 + *(int *)(v304 + 20));
  v183 = (uint64_t *)(v172 + *(int *)(v304 + 28));
  v185 = *v183;
  v184 = v183[1];
  v186 = (int *)v285;
  v187 = (uint64_t)v273;
  sub_1BC9964B8(v301, (uint64_t)&v273[*(int *)(v285 + 44)], (uint64_t (*)(_QWORD))sub_1BCA0F338);
  v188 = *(void (**)(uint64_t, char *, uint64_t))(v274 + 32);
  v189 = v159;
  v190 = v298;
  v188(v187, v189, v298);
  v191 = v187 + v186[5];
  v192 = v294;
  v294 = (char *)v188;
  v188(v191, v192, v190);
  v193 = (void (*)(uint64_t, char *, uint64_t))*((_QWORD *)v299 + 4);
  v193(v187 + v186[6], v174, v300);
  v194 = (uint64_t *)(v187 + v186[7]);
  *v194 = v178;
  v194[1] = v180;
  *(_QWORD *)(v187 + v186[8]) = v182;
  v195 = (_QWORD *)(v187 + v186[9]);
  *v195 = v185;
  v195[1] = v184;
  *(_QWORD *)(v187 + v186[10]) = v291;
  swift_bridgeObjectRetain();
  swift_retain();
  v196 = v297;
  CoreChartTrendLineView.averageRuleAndLabel.getter(v297);
  sub_1BC997208(v187, type metadata accessor for CoreChartTrendLineView);
  v197 = *(void (**)(char *, uint64_t, uint64_t))(v296 + 32);
  v198 = v286;
  v197(v295, v196, v286);
  v199 = v271;
  sub_1BC9964B8(v269, v271, (uint64_t (*)(_QWORD))sub_1BCA0D60C);
  if (v290(v199, 1, v181) == 1)
  {
    sub_1BC997208(v199, (uint64_t (*)(_QWORD))sub_1BCA0D60C);
    v200 = 1;
    v201 = (uint64_t)v280;
    v202 = v297;
  }
  else
  {
    v290 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v193;
    v299 = v197;
    v203 = v279;
    sub_1BC9AE330(v199, v279, type metadata accessor for CoreChartTrendLineViewModel);
    v204 = v275;
    sub_1BCA0D3A8(v275);
    v205 = v283;
    v206 = v276;
    v207 = v284;
    (*(void (**)(char *, _QWORD, uint64_t))(v283 + 104))(v276, *MEMORY[0x1E0CD86E0], v284);
    v208 = sub_1BCAB58F8();
    v209 = *(void (**)(char *, uint64_t))(v205 + 8);
    v209(v206, v207);
    v209((char *)v204, v207);
    if ((v208 & 1) != 0)
    {
      v210 = v277;
      sub_1BCA0D3A8(v277);
      v211 = 0;
      v212 = v264;
    }
    else
    {
      v211 = 1;
      v212 = v264;
      v210 = v277;
    }
    v270(v210, v211, 1, v207);
    sub_1BCAB4BC0();
    sub_1BCAB4B9C();
    if ((*((_BYTE *)v302 + 16) - 2) > 3u)
      v213 = (unsigned int *)MEMORY[0x1E0CB1130];
    else
      v213 = (unsigned int *)qword_1E754A3E0[(char)(*((_BYTE *)v302 + 16) - 2)];
    v214 = v267;
    v215 = v300;
    ((void (*)(char *, _QWORD, uint64_t))v292)(v267, *v213, v300);
    v216 = sub_1BCAB5DFC();
    v218 = v217;
    v219 = *(_QWORD *)(v203 + *(int *)(v304 + 20));
    v220 = (uint64_t *)(v203 + *(int *)(v304 + 28));
    v221 = v220[1];
    v304 = *v220;
    v222 = (int *)v285;
    v223 = (uint64_t)v266;
    v224 = v277;
    sub_1BC9964B8(v277, (uint64_t)&v266[*(int *)(v285 + 44)], (uint64_t (*)(_QWORD))sub_1BCA0F338);
    v225 = v212;
    v226 = v298;
    v227 = (void (*)(uint64_t, char *, uint64_t))v294;
    ((void (*)(uint64_t, char *, uint64_t))v294)(v223, v225, v298);
    v227(v223 + v222[5], v278, v226);
    v290(v223 + v222[6], (uint64_t)v214, v215);
    v228 = (uint64_t *)(v223 + v222[7]);
    *v228 = v216;
    v228[1] = v218;
    *(_QWORD *)(v223 + v222[8]) = v219;
    v229 = (uint64_t *)(v223 + v222[9]);
    *v229 = v304;
    v229[1] = v221;
    *(_QWORD *)(v223 + v222[10]) = v287;
    swift_retain();
    swift_bridgeObjectRetain();
    v202 = v297;
    CoreChartTrendLineView.averageRuleAndLabel.getter(v297);
    sub_1BC997208(v223, type metadata accessor for CoreChartTrendLineView);
    sub_1BC997208(v224, (uint64_t (*)(_QWORD))sub_1BCA0F338);
    sub_1BC997208(v279, type metadata accessor for CoreChartTrendLineViewModel);
    v230 = v265;
    v198 = v286;
    v231 = (void (*)(char *, char *, uint64_t))v299;
    v299(v265, v202, v286);
    v201 = (uint64_t)v280;
    v231(v280, v230, v198);
    v200 = 0;
  }
  v232 = v296;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v296 + 56))(v201, v200, 1, v198);
  v233 = v293;
  v234 = v289;
  sub_1BC9964B8(v293, v289, (uint64_t (*)(_QWORD))sub_1BCA0DA98);
  v305 = (char *)v234;
  v235 = v295;
  (*(void (**)(uint64_t, char *, uint64_t))(v232 + 16))(v202, v295, v198);
  v306 = v202;
  v236 = v281;
  sub_1BC9964B8(v201, v281, (uint64_t (*)(_QWORD))sub_1BCA0E7E4);
  v307 = v236;
  sub_1BCA0C58C((uint64_t *)&v305, v282);
  swift_release();
  sub_1BC997208(v201, (uint64_t (*)(_QWORD))sub_1BCA0E7E4);
  v237 = *(void (**)(char *, uint64_t))(v232 + 8);
  v237(v235, v198);
  sub_1BC997208(v301, (uint64_t (*)(_QWORD))sub_1BCA0F338);
  sub_1BC997208(v233, (uint64_t (*)(_QWORD))sub_1BCA0DA98);
  sub_1BC997208(v236, (uint64_t (*)(_QWORD))sub_1BCA0E7E4);
  v237((char *)v202, v198);
  return sub_1BC997208(v234, (uint64_t (*)(_QWORD))sub_1BCA0DA98);
}

uint64_t CoreChartTrendLineView.averageRuleAndLabel.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t);
  uint64_t v19;
  uint64_t (*v20)(uint64_t);
  uint64_t (*v21)(uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  char *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t OpaqueTypeConformance2;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  int *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int (*v82)(uint64_t, uint64_t, uint64_t);
  uint64_t v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  unsigned int *v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  void (*v102)(char *, uint64_t, uint64_t, uint64_t);
  char *v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  char *v111;
  char *v112;
  char *v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  uint64_t v141;
  char *v142;
  uint64_t v143;
  int *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  _QWORD v150[4];

  v136 = a1;
  v2 = sub_1BCAB5E08();
  v137 = *(_QWORD *)(v2 - 8);
  v138 = v2;
  MEMORY[0x1E0C80A78](v2);
  v135 = (char *)&v98 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BCA0F338(0);
  MEMORY[0x1E0C80A78](v4);
  v100 = (uint64_t)&v98 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v134 = (uint64_t)&v98 - v7;
  MEMORY[0x1E0C80A78](v8);
  v99 = (uint64_t)&v98 - v9;
  MEMORY[0x1E0C80A78](v10);
  v133 = (uint64_t)&v98 - v11;
  v128 = sub_1BCAB5688();
  v127 = *(_QWORD *)(v128 - 8);
  MEMORY[0x1E0C80A78](v128);
  v126 = (char *)&v98 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0C93770];
  sub_1BC9B75E4(0, (unint64_t *)&qword_1EF477EE8, MEMORY[0x1E0DEB070], MEMORY[0x1E0C93DE0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0C93770]);
  MEMORY[0x1E0C80A78](v14);
  v124 = (char *)&v98 - v15;
  v16 = type metadata accessor for CoreChartTrendLineView(0);
  MEMORY[0x1E0C80A78](v16);
  v110 = (uint64_t)&v98 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v105 = sub_1BCAB4F74();
  v18 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB11F0];
  v139 = *(_QWORD *)(v105 - 8);
  MEMORY[0x1E0C80A78](v105);
  v109 = (char *)&v98 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870];
  v21 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
  sub_1BC998AB0(0, &qword_1ED6C7280, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v22);
  v106 = (char *)&v98 - v23;
  v107 = sub_1BCAB4E54();
  v108 = *(_QWORD *)(v107 - 8);
  MEMORY[0x1E0C80A78](v107);
  v140 = (char *)&v98 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BC998AB0(0, &qword_1ED6C7288, v18, v21);
  MEMORY[0x1E0C80A78](v25);
  v27 = (char *)&v98 - v26;
  sub_1BC9BFB64(0, (unint64_t *)&qword_1EF477EF0, v20, MEMORY[0x1E0C93350], v13);
  MEMORY[0x1E0C80A78](v28);
  v112 = (char *)&v98 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v30);
  v32 = (char *)&v98 - v31;
  v116 = sub_1BCAB5790();
  v114 = *(_QWORD *)(v116 - 8);
  MEMORY[0x1E0C80A78](v116);
  v113 = (char *)&v98 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BCA0E5E4(0);
  v119 = v34;
  v117 = *(_QWORD *)(v34 - 8);
  MEMORY[0x1E0C80A78](v34);
  v115 = (char *)&v98 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BCA0E52C(0);
  v122 = v36;
  v120 = *(_QWORD *)(v36 - 8);
  MEMORY[0x1E0C80A78](v36);
  v118 = (char *)&v98 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BCA0E448(0);
  v143 = v38;
  v123 = *(_QWORD *)(v38 - 8);
  MEMORY[0x1E0C80A78](v38);
  v121 = (char *)&v98 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BCA0E32C(0);
  v129 = v40;
  v125 = *(_QWORD *)(v40 - 8);
  MEMORY[0x1E0C80A78](v40);
  v142 = (char *)&v98 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BCA0E1E4(0);
  v132 = v42;
  v131 = *(_QWORD *)(v42 - 8);
  MEMORY[0x1E0C80A78](v42);
  v130 = (char *)&v98 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BCAB5A6C();
  v44 = v1 + *(int *)(v16 + 24);
  v45 = v105;
  v102 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v139 + 56);
  v102(v27, 1, 1, v105);
  v111 = v32;
  v46 = v1;
  sub_1BCAB5628();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v103 = v27;
  sub_1BC9B3A38((uint64_t)v27, &qword_1ED6C7288, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB11F0]);
  sub_1BCAB5A6C();
  v101 = v47;
  v48 = v109;
  sub_1BCAB4F50();
  v144 = (int *)v16;
  v49 = (uint64_t)v106;
  v104 = v44;
  v50 = v48;
  sub_1BCAB4F38();
  v51 = v45;
  (*(void (**)(char *, uint64_t))(v139 + 8))(v50, v45);
  v52 = v46;
  v53 = v107;
  v141 = v52;
  v54 = v110;
  sub_1BC9964B8(v52, v110, type metadata accessor for CoreChartTrendLineView);
  v55 = v108;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v108 + 48))(v49, 1, v53) == 1)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v55 + 16))(v140, v54 + v144[5], v53);
    sub_1BC997208(v54, type metadata accessor for CoreChartTrendLineView);
    sub_1BC9B3A38(v49, &qword_1ED6C7280, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870]);
  }
  else
  {
    sub_1BC997208(v54, type metadata accessor for CoreChartTrendLineView);
    (*(void (**)(char *, uint64_t, uint64_t))(v55 + 32))(v140, v49, v53);
  }
  v56 = (uint64_t)v103;
  v102(v103, 1, 1, v51);
  v57 = v140;
  sub_1BCAB5628();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1BC9B3A38(v56, &qword_1ED6C7288, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB11F0]);
  (*(void (**)(char *, uint64_t))(v55 + 8))(v57, v53);
  sub_1BCAB5A6C();
  v150[0] = *(_QWORD *)(v141 + v144[8]);
  sub_1BCAB5634();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v58 = v113;
  sub_1BCAB5784();
  v59 = v126;
  v60 = sub_1BCAB567C();
  MEMORY[0x1E0C80A78](v60);
  sub_1BCA0E678();
  v62 = v61;
  v97 = sub_1BCA0E6FC();
  v63 = MEMORY[0x1E0C93B30];
  v64 = v115;
  v65 = v116;
  sub_1BCAB5568();
  (*(void (**)(char *, uint64_t))(v127 + 8))(v59, v128);
  (*(void (**)(char *, uint64_t))(v114 + 8))(v58, v65);
  v150[0] = v65;
  v150[1] = v62;
  v150[2] = v63;
  v150[3] = v97;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  v67 = v118;
  v68 = v119;
  sub_1BCAB5598();
  (*(void (**)(char *, uint64_t))(v117 + 8))(v64, v68);
  sub_1BCAB5910();
  v145 = v68;
  v146 = OpaqueTypeConformance2;
  v69 = swift_getOpaqueTypeConformance2();
  v70 = v121;
  v71 = v122;
  sub_1BCAB55C8();
  sub_1BC998BB8((uint64_t)v150);
  (*(void (**)(char *, uint64_t))(v120 + 8))(v67, v71);
  v72 = v144;
  v73 = v141;
  v149 = *(_QWORD *)(v141 + v144[10]);
  v145 = v71;
  v146 = v69;
  v74 = swift_getOpaqueTypeConformance2();
  v75 = MEMORY[0x1E0CDF5D0];
  v76 = MEMORY[0x1E0CDF598];
  v77 = v143;
  sub_1BCAB558C();
  (*(void (**)(char *, uint64_t))(v123 + 8))(v70, v77);
  v78 = v73 + v72[11];
  v79 = v133;
  sub_1BC9964B8(v78, v133, (uint64_t (*)(_QWORD))sub_1BCA0F338);
  v80 = sub_1BCAB5904();
  v81 = *(_QWORD *)(v80 - 8);
  v82 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v81 + 48);
  if (v82(v79, 1, v80) == 1)
  {
    v83 = v129;
  }
  else
  {
    v84 = v99;
    sub_1BC9964B8(v79, v99, (uint64_t (*)(_QWORD))sub_1BCA0F338);
    v85 = (*(uint64_t (**)(uint64_t, uint64_t))(v81 + 88))(v84, v80);
    v83 = v129;
    if (v85 != *MEMORY[0x1E0CD86D0])
      (*(void (**)(uint64_t, uint64_t))(v81 + 8))(v84, v80);
  }
  sub_1BC997208(v79, (uint64_t (*)(_QWORD))sub_1BCA0F338);
  v145 = v143;
  v146 = v75;
  v147 = v74;
  v148 = v76;
  v86 = swift_getOpaqueTypeConformance2();
  v87 = v130;
  v88 = v142;
  sub_1BCAB55B0();
  (*(void (**)(char *, uint64_t))(v125 + 8))(v88, v83);
  v89 = v134;
  sub_1BC9964B8(v78, v134, (uint64_t (*)(_QWORD))sub_1BCA0F338);
  if (v82(v89, 1, v80) == 1)
    goto LABEL_12;
  v90 = v100;
  sub_1BC9964B8(v89, v100, (uint64_t (*)(_QWORD))sub_1BCA0F338);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v81 + 88))(v90, v80) != *MEMORY[0x1E0CD86E0])
  {
    (*(void (**)(uint64_t, uint64_t))(v81 + 8))(v90, v80);
LABEL_12:
    v91 = (unsigned int *)MEMORY[0x1E0CE03A0];
    goto LABEL_13;
  }
  v91 = (unsigned int *)MEMORY[0x1E0CE0350];
LABEL_13:
  v93 = v137;
  v92 = v138;
  v94 = v135;
  (*(void (**)(char *, _QWORD, uint64_t))(v137 + 104))(v135, *v91, v138);
  sub_1BC997208(v89, (uint64_t (*)(_QWORD))sub_1BCA0F338);
  v145 = v83;
  v146 = v86;
  swift_getOpaqueTypeConformance2();
  v95 = v132;
  sub_1BCAB55BC();
  (*(void (**)(char *, uint64_t))(v93 + 8))(v94, v92);
  return (*(uint64_t (**)(char *, uint64_t))(v131 + 8))(v87, v95);
}

uint64_t sub_1BCA0C58C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  sub_1BCA12E64();
  v5 = v4;
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BCA0DA98(0);
  sub_1BCA0E994();
  sub_1BC9964B8(*a1, (uint64_t)v7, (uint64_t (*)(_QWORD))sub_1BCA0DA98);
  sub_1BCA0E078(0);
  v9 = v8;
  sub_1BCA0E1E4(255);
  sub_1BCA0E32C(255);
  sub_1BCA0E448(255);
  sub_1BCA0E52C(255);
  sub_1BCA0E5E4(255);
  sub_1BCAB5790();
  sub_1BCA0E678();
  sub_1BCA0E6FC();
  v10 = &v7[*(int *)(v5 + 48)];
  v11 = *(_QWORD *)(v9 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v10, a1[1], v9);
  sub_1BCA0E7E4(0);
  sub_1BCA0ECD8();
  v12 = (uint64_t)&v7[*(int *)(v5 + 64)];
  sub_1BC9964B8(a1[2], v12, (uint64_t (*)(_QWORD))sub_1BCA0E7E4);
  sub_1BC9AE330((uint64_t)v7, a2, (uint64_t (*)(_QWORD))sub_1BCA0DA98);
  (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(a2 + *(int *)(v5 + 48), v10, v9);
  return sub_1BC9AE330(v12, a2 + *(int *)(v5 + 64), (uint64_t (*)(_QWORD))sub_1BCA0E7E4);
}

double sub_1BCA0C6FC(uint64_t *a1, double *a2)
{
  uint64_t v4;
  double v5;
  char v6;
  double v7;
  double v8;
  double v9;
  char v10;
  char v11;
  double v12;
  double v13;
  uint64_t v14;
  double result;

  v4 = *a1;
  v5 = COERCE_DOUBLE(sub_1BCA436DC(*a1));
  v7 = 0.0;
  if ((v6 & 1) != 0)
    v8 = 0.0;
  else
    v8 = v5;
  v9 = COERCE_DOUBLE(sub_1BC99F55C(v4));
  v11 = v10;
  swift_bridgeObjectRelease();
  if ((v11 & 1) != 0)
    v12 = 100.0;
  else
    v12 = v9;
  if (v12 - v8 < *a2)
  {
    v13 = *a2 - (v12 - v8);
    if (*((_BYTE *)a2 + *(int *)(type metadata accessor for CoreChartTrendDiagram(0) + 36)) == 1)
    {
      v12 = v12 + v13;
      goto LABEL_16;
    }
    if (v8 - v13 * 0.5 < 0.0)
      v8 = 0.0;
    else
      v8 = v8 - v13 * 0.5;
    v12 = v12 + v13 * 0.5;
  }
  if (!*((_BYTE *)a2 + *(int *)(type metadata accessor for CoreChartTrendDiagram(0) + 36)))
    v7 = v8;
LABEL_16:
  sub_1BC9A1210(0, &qword_1ED6C5FA8, MEMORY[0x1E0DEB070], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v14 = swift_allocObject();
  *(_QWORD *)&result = 2;
  *(_OWORD *)(v14 + 16) = xmmword_1BCABFE80;
  *(double *)(v14 + 32) = v7;
  *(double *)(v14 + 40) = v12;
  *a1 = v14;
  return result;
}

uint64_t sub_1BCA0C82C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  id v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  char v62;
  char v63;
  uint64_t *v64;
  _QWORD v66[3];
  int v67;
  uint64_t v68;
  uint64_t (*v69)(char *, uint64_t, uint64_t);
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;

  v71 = a3;
  v5 = type metadata accessor for CoreChartTrendLineViewModel(0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v72 = (uint64_t)v66 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BCA0D60C(0);
  MEMORY[0x1E0C80A78](v8);
  v70 = (uint64_t)v66 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)v66 - v11;
  v13 = a1 + *(int *)(type metadata accessor for CoreChartTrendDiagram(0) + 32);
  v14 = type metadata accessor for CoreChartTrendViewModel(0);
  v68 = v13 + *(int *)(v14 + 32);
  sub_1BC9964B8(v68, (uint64_t)v12, (uint64_t (*)(_QWORD))sub_1BCA0D60C);
  v69 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48);
  v15 = v69(v12, 1, v5);
  sub_1BC997208((uint64_t)v12, (uint64_t (*)(_QWORD))sub_1BCA0D60C);
  v66[2] = a2;
  if (v15 == 1)
  {
    swift_retain();
    v73 = a2;
  }
  else
  {
    v16 = objc_msgSend((id)objc_opt_self(), sel_secondaryLabelColor);
    v73 = MEMORY[0x1BCCFA924](v16);
  }
  v17 = (uint64_t *)(v13 + *(int *)(v14 + 28) + (uint64_t)*(int *)(v5 + 24));
  v18 = v17[1];
  v74 = *v17;
  v75 = v18;
  v19 = sub_1BC9A10F8();
  swift_bridgeObjectRetain();
  v66[1] = v19;
  v20 = sub_1BCAB5C64();
  v22 = v21;
  v23 = v5;
  v25 = v24 & 1;
  sub_1BCAB5C1C();
  v26 = sub_1BCAB5C40();
  v28 = v27;
  v30 = v29;
  swift_release();
  v31 = v20;
  v32 = v23;
  sub_1BC9C15C0(v31, v22, v25);
  swift_bridgeObjectRelease();
  swift_retain();
  v33 = sub_1BCAB5C34();
  v35 = v34;
  v67 = v36;
  v38 = v37;
  swift_release();
  sub_1BC9C15C0(v26, v28, v30 & 1);
  swift_bridgeObjectRelease();
  v39 = v70;
  sub_1BC9964B8(v68, v70, (uint64_t (*)(_QWORD))sub_1BCA0D60C);
  if (v69((char *)v39, 1, v23) == 1)
  {
    sub_1BC997208(v39, (uint64_t (*)(_QWORD))sub_1BCA0D60C);
    v40 = 0;
    v41 = 0;
    v42 = 0;
    v43 = 0;
  }
  else
  {
    v44 = v72;
    sub_1BC9AE330(v39, v72, type metadata accessor for CoreChartTrendLineViewModel);
    v45 = (uint64_t *)(v44 + *(int *)(v32 + 24));
    v46 = v45[1];
    v74 = *v45;
    v75 = v46;
    swift_bridgeObjectRetain();
    v47 = sub_1BCAB5C64();
    v49 = v48;
    v51 = v50 & 1;
    sub_1BCAB5C1C();
    v52 = sub_1BCAB5C40();
    v53 = v38;
    v55 = v54;
    v69 = (uint64_t (*)(char *, uint64_t, uint64_t))v35;
    v70 = v33;
    v57 = v56;
    swift_release();
    sub_1BC9C15C0(v47, v49, v51);
    swift_bridgeObjectRelease();
    v40 = sub_1BCAB5C34();
    v41 = v58;
    v43 = v59;
    v42 = v60 & 1;
    v61 = v55;
    v38 = v53;
    v62 = v57 & 1;
    v33 = v70;
    sub_1BC9C15C0(v52, v61, v62);
    v35 = (uint64_t)v69;
    swift_bridgeObjectRelease();
    sub_1BC997208(v72, type metadata accessor for CoreChartTrendLineViewModel);
  }
  v63 = v67 & 1;
  sub_1BC9C16A8(v33, v35, v67 & 1);
  swift_bridgeObjectRetain();
  sub_1BC9C16D8(v40, v41, v42, v43);
  swift_release();
  v64 = v71;
  *v71 = v33;
  v64[1] = v35;
  *((_BYTE *)v64 + 16) = v63;
  v64[3] = v38;
  v64[4] = 0;
  *((_BYTE *)v64 + 40) = 1;
  v64[6] = v40;
  v64[7] = v41;
  v64[8] = v42;
  v64[9] = v43;
  sub_1BC9C1774(v40, v41, v42, v43);
  sub_1BC9C15C0(v33, v35, v63);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1BCA0CC94@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int (*v51)(uint64_t, uint64_t, uint64_t);
  double v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int *v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t (*v64)(void);
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  char *v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;

  v70 = a1;
  v80 = a2;
  v3 = sub_1BCAB5988();
  MEMORY[0x1E0C80A78](v3);
  v79 = (char *)&v66 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1BCAB5E08();
  v77 = *(_QWORD *)(v5 - 8);
  v78 = v5;
  MEMORY[0x1E0C80A78](v5);
  v76 = (char *)&v66 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BCA0F338(0);
  MEMORY[0x1E0C80A78](v7);
  v68 = (uint64_t)&v66 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v75 = (char *)&v66 - v10;
  MEMORY[0x1E0C80A78](v11);
  v67 = (uint64_t)&v66 - v12;
  MEMORY[0x1E0C80A78](v13);
  v72 = (char *)&v66 - v14;
  sub_1BC998AB0(0, &qword_1EF4783E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CDD560], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v15);
  v17 = (char *)&v66 - v16;
  v18 = sub_1BCAB5C28();
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v18);
  v21 = (char *)&v66 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BCA0E678();
  v73 = v22;
  MEMORY[0x1E0C80A78](v22);
  v74 = (char *)&v66 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69 = type metadata accessor for CoreChartTrendLineView(0);
  v24 = (uint64_t *)(a1 + *(int *)(v69 + 36));
  v25 = v24[1];
  v81 = *v24;
  v82 = v25;
  sub_1BC9A10F8();
  swift_bridgeObjectRetain();
  v26 = sub_1BCAB5C64();
  v28 = v27;
  v71 = v29;
  v31 = v30 & 1;
  (*(void (**)(char *, _QWORD, uint64_t))(v19 + 104))(v21, *MEMORY[0x1E0CDD7E0], v18);
  v32 = *MEMORY[0x1E0CDD550];
  v33 = sub_1BCAB5BA4();
  v34 = *(_QWORD *)(v33 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v34 + 104))(v17, v32, v33);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v34 + 56))(v17, 0, 1, v33);
  sub_1BCAB5BEC();
  sub_1BC9B3A38((uint64_t)v17, &qword_1EF4783E0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CDD560]);
  (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
  sub_1BCAB5BB0();
  sub_1BCAB5BF8();
  swift_release();
  v35 = sub_1BCAB5C40();
  v37 = v36;
  LOBYTE(v18) = v38;
  swift_release();
  LOBYTE(v21) = v18 & 1;
  sub_1BC9C15C0(v26, v28, v31);
  swift_bridgeObjectRelease();
  v40 = v69;
  v39 = v70;
  v41 = sub_1BCAB5C34();
  v43 = v42;
  LODWORD(v71) = v44;
  v46 = v45;
  LOBYTE(v44) = (_BYTE)v21;
  v47 = (uint64_t)v72;
  sub_1BC9C15C0(v35, v37, v44);
  swift_bridgeObjectRelease();
  v48 = v39 + *(int *)(v40 + 44);
  sub_1BC9964B8(v48, v47, (uint64_t (*)(_QWORD))sub_1BCA0F338);
  v49 = sub_1BCAB5904();
  v50 = *(_QWORD *)(v49 - 8);
  v51 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v50 + 48);
  v52 = 1.0;
  if (v51(v47, 1, v49) == 1)
  {
    v53 = v47;
  }
  else
  {
    v54 = v67;
    sub_1BC9964B8(v47, v67, (uint64_t (*)(_QWORD))sub_1BCA0F338);
    v53 = v47;
    if ((*(unsigned int (**)(uint64_t, uint64_t))(v50 + 88))(v54, v49) == *MEMORY[0x1E0CD86D0])
      v52 = 0.9;
    else
      (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v54, v49);
  }
  v55 = (uint64_t)v75;
  sub_1BC997208(v53, (uint64_t (*)(_QWORD))sub_1BCA0F338);
  sub_1BC9964B8(v48, v55, (uint64_t (*)(_QWORD))sub_1BCA0F338);
  if (v51(v55, 1, v49) == 1)
    goto LABEL_10;
  v56 = v68;
  sub_1BC9964B8(v55, v68, (uint64_t (*)(_QWORD))sub_1BCA0F338);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v50 + 88))(v56, v49) != *MEMORY[0x1E0CD86E0])
  {
    (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v56, v49);
LABEL_10:
    v57 = (unsigned int *)MEMORY[0x1E0CE03A0];
    goto LABEL_11;
  }
  v57 = (unsigned int *)MEMORY[0x1E0CE0350];
LABEL_11:
  v59 = v76;
  v58 = v77;
  v60 = v78;
  (*(void (**)(char *, _QWORD, uint64_t))(v77 + 104))(v76, *v57, v78);
  v61 = v71 & 1;
  sub_1BC997208(v55, (uint64_t (*)(_QWORD))sub_1BCA0F338);
  v62 = (uint64_t)v79;
  (*(void (**)(char *, char *, uint64_t))(v58 + 16))(v79, v59, v60);
  v63 = (uint64_t)v74;
  v64 = MEMORY[0x1E0CDA1C8];
  sub_1BC9964B8(v62, (uint64_t)&v74[*(int *)(v73 + 36)], (uint64_t (*)(_QWORD))MEMORY[0x1E0CDA1C8]);
  *(_QWORD *)v63 = v41;
  *(_QWORD *)(v63 + 8) = v43;
  *(_BYTE *)(v63 + 16) = v61;
  *(_QWORD *)(v63 + 24) = v46;
  *(double *)(v63 + 32) = v52;
  sub_1BC9C16A8(v41, v43, v61);
  swift_bridgeObjectRetain();
  sub_1BC997208(v62, (uint64_t (*)(_QWORD))v64);
  (*(void (**)(char *, uint64_t))(v58 + 8))(v59, v60);
  sub_1BC9C15C0(v41, v43, v61);
  swift_bridgeObjectRelease();
  return sub_1BC9AE330(v63, v80, (uint64_t (*)(_QWORD))sub_1BCA0E678);
}

uint64_t sub_1BCA0D284()
{
  return sub_1BCAB59B8();
}

uint64_t sub_1BCA0D2A4()
{
  return sub_1BCAB59B8();
}

uint64_t sub_1BCA0D2C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1BCA0D2D8(a1, a2, a3, a4, (void (*)(_QWORD))MEMORY[0x1E0CD86F8], MEMORY[0x1E0CDA4E8]);
}

uint64_t sub_1BCA0D2D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD), uint64_t (*a6)(char *))
{
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v12;

  a5(0);
  MEMORY[0x1E0C80A78]();
  v9 = (char *)&v12 - v8;
  (*(void (**)(char *, uint64_t))(v10 + 16))((char *)&v12 - v8, a1);
  return a6(v9);
}

uint64_t sub_1BCA0D354(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1BCA0D2D8(a1, a2, a3, a4, (void (*)(_QWORD))MEMORY[0x1E0CD86F8], MEMORY[0x1E0CDA4E8]);
}

void sub_1BCA0D378(uint64_t a1)
{
  sub_1BC998AB0(a1, &qword_1ED6C3540, (uint64_t (*)(uint64_t))MEMORY[0x1E0CD86F8], MEMORY[0x1E0CD87D0]);
}

uint64_t type metadata accessor for CoreChartTrendViewModel(uint64_t a1)
{
  return sub_1BC9B359C(a1, qword_1ED6C4BE8);
}

uint64_t sub_1BCA0D3A8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t (*v11)(_QWORD);
  uint64_t v12;
  os_log_type_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[3];
  uint64_t v21;

  v2 = v1;
  v4 = sub_1BCAB5A0C();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BCA0D378(0);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1BC9964B8(v2, (uint64_t)v10, v11);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v12 = sub_1BCAB5904();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(a1, v10, v12);
  }
  else
  {
    v14 = sub_1BCAB61B0();
    v15 = sub_1BCAB5B5C();
    v16 = v14;
    if (os_log_type_enabled(v15, v14))
    {
      v17 = (uint8_t *)swift_slowAlloc();
      v18 = swift_slowAlloc();
      v20[1] = a1;
      v19 = v18;
      v21 = v18;
      *(_DWORD *)v17 = 136315138;
      v20[2] = sub_1BC99BD4C(0x686353726F6C6F43, 0xEB00000000656D65, &v21);
      sub_1BCAB63A8();
      _os_log_impl(&dword_1BC989000, v15, v16, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v17, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1BCCFBF5C](v19, -1, -1);
      MEMORY[0x1BCCFBF5C](v17, -1, -1);
    }

    sub_1BCAB5A00();
    swift_getAtKeyPath();
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
}

uint64_t type metadata accessor for CoreChartTrendDataElement(uint64_t a1)
{
  return sub_1BC9B359C(a1, qword_1EF479100);
}

uint64_t type metadata accessor for CoreChartTrendLineViewModel(uint64_t a1)
{
  return sub_1BC9B359C(a1, qword_1ED6C60F0);
}

void sub_1BCA0D60C(uint64_t a1)
{
  sub_1BC998AB0(a1, &qword_1ED6C6130, type metadata accessor for CoreChartTrendLineViewModel, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
}

void sub_1BCA0D628(uint64_t a1)
{
  sub_1BC998AB0(a1, &qword_1ED6C35C0, (uint64_t (*)(uint64_t))MEMORY[0x1E0CD9AA8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CDCF68]);
}

void sub_1BCA0D644()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EF478F20)
  {
    sub_1BCA0D6BC(255);
    sub_1BC996948(&qword_1EF479060, (uint64_t (*)(uint64_t))sub_1BCA0D6BC, MEMORY[0x1E0CE0680]);
    v0 = sub_1BCAB5DA8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EF478F20);
  }
}

void sub_1BCA0D6BC(uint64_t a1)
{
  sub_1BC998AB0(a1, &qword_1EF478F28, (uint64_t (*)(uint64_t))sub_1BCA0D6D8, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE0648]);
}

void sub_1BCA0D6D8()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_1EF478F30)
  {
    sub_1BC9BFB64(255, &qword_1EF478F38, (uint64_t (*)(uint64_t))sub_1BCA0D764, MEMORY[0x1E0CDA240], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CD9BF0]);
    sub_1BCA0EE54();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1EF478F30);
  }
}

void sub_1BCA0D764(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD v8[6];

  if (!qword_1EF478F40)
  {
    sub_1BCA0D878(255);
    v3 = v2;
    v4 = sub_1BCAB56AC();
    v5 = sub_1BCAB56B8();
    sub_1BCA0D930(255);
    sub_1BCA0D9BC();
    sub_1BC996948(&qword_1EF479050, (uint64_t (*)(uint64_t))sub_1BCA0D9BC, MEMORY[0x1E0C939B0]);
    swift_getOpaqueTypeConformance2();
    v8[0] = v3;
    v8[1] = v4;
    v8[2] = v5;
    v8[3] = swift_getOpaqueTypeConformance2();
    v8[4] = MEMORY[0x1E0C93870];
    v8[5] = MEMORY[0x1E0C938A8];
    v6 = MEMORY[0x1BCCFBE48](a1, v8, MEMORY[0x1E0C93D28], 0);
    if (!v7)
      atomic_store(v6, (unint64_t *)&qword_1EF478F40);
  }
}

void sub_1BCA0D878(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD v6[2];

  if (!qword_1EF478F48)
  {
    sub_1BCA0D930(255);
    v3 = v2;
    sub_1BCA0D9BC();
    sub_1BC996948(&qword_1EF479050, (uint64_t (*)(uint64_t))sub_1BCA0D9BC, MEMORY[0x1E0C939B0]);
    v6[0] = v3;
    v6[1] = swift_getOpaqueTypeConformance2();
    v4 = MEMORY[0x1BCCFBE48](a1, v6, MEMORY[0x1E0C93CB8], 0);
    if (!v5)
      atomic_store(v4, (unint64_t *)&qword_1EF478F48);
  }
}

void sub_1BCA0D930(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD v5[2];

  if (!qword_1EF478F50)
  {
    sub_1BCA0D9BC();
    v5[0] = v2;
    v5[1] = sub_1BC996948(&qword_1EF479050, (uint64_t (*)(uint64_t))sub_1BCA0D9BC, MEMORY[0x1E0C939B0]);
    v3 = MEMORY[0x1BCCFBE48](a1, v5, MEMORY[0x1E0C93C80], 0);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1EF478F50);
  }
}

void sub_1BCA0D9BC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EF478F58)
  {
    sub_1BCA0DA1C();
    sub_1BCA0E800();
    v0 = sub_1BCAB5700();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EF478F58);
  }
}

void sub_1BCA0DA1C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EF478F60)
  {
    sub_1BCA0DA98(255);
    sub_1BCA0E078(255);
    sub_1BCA0E7E4(255);
    v0 = sub_1BCAB5550();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EF478F60);
  }
}

void sub_1BCA0DA98(uint64_t a1)
{
  sub_1BC998AB0(a1, &qword_1EF478F68, (uint64_t (*)(uint64_t))sub_1BCA0DAB4, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
}

void sub_1BCA0DAB4(uint64_t a1)
{
  sub_1BCA03158(a1, &qword_1EF478F70, (uint64_t (*)(uint64_t))sub_1BCA0DAD8, (uint64_t (*)(uint64_t))sub_1BC997888, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0C93820]);
}

void sub_1BCA0DAD8(uint64_t a1)
{
  sub_1BCA03158(a1, &qword_1EF478F78, (uint64_t (*)(uint64_t))sub_1BCA0DAFC, (uint64_t (*)(uint64_t))sub_1BCA0DBB4, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0C93820]);
}

void sub_1BCA0DAFC(uint64_t a1)
{
  sub_1BCA0DBC8(a1, &qword_1EF478F80, sub_1BCA0DB2C);
}

void sub_1BCA0DB10(uint64_t a1)
{
  sub_1BC998AB0(a1, &qword_1EF477CB8, type metadata accessor for CoreChartTrendDataElement, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
}

void sub_1BCA0DB2C(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  _QWORD v4[4];

  if (!qword_1EF478F88)
  {
    v4[0] = sub_1BCAB5718();
    v4[1] = MEMORY[0x1E0CDF5D0];
    v4[2] = MEMORY[0x1E0C939E0];
    v4[3] = MEMORY[0x1E0CDF598];
    v2 = MEMORY[0x1BCCFBE48](a1, v4, MEMORY[0x1E0C93510], 0);
    if (!v3)
      atomic_store(v2, (unint64_t *)&qword_1EF478F88);
  }
}

void sub_1BCA0DBB4(uint64_t a1)
{
  sub_1BCA0DBC8(a1, &qword_1EF478F90, sub_1BCA0DCA4);
}

void sub_1BCA0DBC8(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  uint64_t (*v5)(uint64_t);
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    sub_1BCA0DB10(255);
    sub_1BCAB4E54();
    v5 = (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870];
    a3(255);
    sub_1BC996948((unint64_t *)&qword_1EF477CD8, (uint64_t (*)(uint64_t))sub_1BCA0DB10, MEMORY[0x1E0DEAF48]);
    sub_1BC996948(&qword_1EF477D28, v5, MEMORY[0x1E0CB08A8]);
    v6 = sub_1BCAB5DD8();
    if (!v7)
      atomic_store(v6, a2);
  }
}

void sub_1BCA0DCA4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t OpaqueTypeConformance2;
  unint64_t v5;
  uint64_t v6;
  _QWORD v7[4];

  if (!qword_1EF478F98)
  {
    sub_1BCA0DDC8(255);
    v3 = v2;
    sub_1BCA0DEB4(255);
    sub_1BCAB576C();
    sub_1BCA0DF74(255);
    sub_1BCA0DFF0();
    sub_1BCA0E034();
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
    v7[0] = v3;
    v7[1] = MEMORY[0x1E0CDF5D0];
    v7[2] = OpaqueTypeConformance2;
    v7[3] = MEMORY[0x1E0CDF598];
    v5 = MEMORY[0x1BCCFBE48](a1, v7, MEMORY[0x1E0C93510], 0);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_1EF478F98);
  }
}

void sub_1BCA0DDC8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t OpaqueTypeConformance2;
  unint64_t v5;
  uint64_t v6;
  _QWORD v7[4];

  if (!qword_1EF478FA0)
  {
    sub_1BCA0DEB4(255);
    v3 = v2;
    sub_1BCAB576C();
    sub_1BCA0DF74(255);
    sub_1BCA0DFF0();
    sub_1BCA0E034();
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
    v7[2] = MEMORY[0x1E0C93AD8];
    v7[3] = OpaqueTypeConformance2;
    v7[0] = v3;
    v7[1] = swift_getOpaqueTypeConformance2();
    v5 = MEMORY[0x1BCCFBE48](a1, v7, MEMORY[0x1E0C934D8], 0);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_1EF478FA0);
  }
}

void sub_1BCA0DEB4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t OpaqueTypeConformance2;
  unint64_t v6;
  uint64_t v7;
  _QWORD v8[4];

  if (!qword_1EF478FA8)
  {
    v2 = sub_1BCAB576C();
    sub_1BCA0DF74(255);
    v4 = v3;
    sub_1BCA0DFF0();
    sub_1BCA0E034();
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
    v8[0] = v2;
    v8[1] = v4;
    v8[2] = MEMORY[0x1E0C93AD8];
    v8[3] = OpaqueTypeConformance2;
    v6 = MEMORY[0x1BCCFBE48](a1, v8, MEMORY[0x1E0C935F0], 0);
    if (!v7)
      atomic_store(v6, (unint64_t *)&qword_1EF478FA8);
  }
}

void sub_1BCA0DF74(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD v6[3];

  if (!qword_1EF478FB0)
  {
    v2 = sub_1BCA0DFF0();
    v3 = sub_1BCA0E034();
    v6[0] = MEMORY[0x1E0CDFAD0];
    v6[1] = v2;
    v6[2] = v3;
    v4 = MEMORY[0x1BCCFBE48](a1, v6, MEMORY[0x1E0C937D0], 0);
    if (!v5)
      atomic_store(v4, (unint64_t *)&qword_1EF478FB0);
  }
}

unint64_t sub_1BCA0DFF0()
{
  unint64_t result;

  result = qword_1EF478FB8;
  if (!qword_1EF478FB8)
  {
    result = MEMORY[0x1BCCFBE84](MEMORY[0x1E0C93D78], MEMORY[0x1E0CDFAD0]);
    atomic_store(result, (unint64_t *)&qword_1EF478FB8);
  }
  return result;
}

unint64_t sub_1BCA0E034()
{
  unint64_t result;

  result = qword_1ED6C35E0;
  if (!qword_1ED6C35E0)
  {
    result = MEMORY[0x1BCCFBE84](MEMORY[0x1E0CDFAA0], MEMORY[0x1E0CDFAD0]);
    atomic_store(result, (unint64_t *)&qword_1ED6C35E0);
  }
  return result;
}

void sub_1BCA0E078(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD v6[4];

  if (!qword_1EF478FC0)
  {
    sub_1BCA0E1E4(255);
    v3 = v2;
    sub_1BCA0E32C(255);
    sub_1BCA0E448(255);
    sub_1BCA0E52C(255);
    sub_1BCA0E5E4(255);
    sub_1BCAB5790();
    sub_1BCA0E678();
    sub_1BCA0E6FC();
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    v6[2] = swift_getOpaqueTypeConformance2();
    v6[3] = MEMORY[0x1E0CDF598];
    swift_getOpaqueTypeConformance2();
    v6[0] = v3;
    v6[1] = swift_getOpaqueTypeConformance2();
    v4 = MEMORY[0x1BCCFBE48](a1, v6, MEMORY[0x1E0C93620], 0);
    if (!v5)
      atomic_store(v4, (unint64_t *)&qword_1EF478FC0);
  }
}

void sub_1BCA0E1E4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD v6[4];

  if (!qword_1EF478FC8)
  {
    sub_1BCA0E32C(255);
    v3 = v2;
    sub_1BCA0E448(255);
    sub_1BCA0E52C(255);
    sub_1BCA0E5E4(255);
    sub_1BCAB5790();
    sub_1BCA0E678();
    sub_1BCA0E6FC();
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    v6[2] = swift_getOpaqueTypeConformance2();
    v6[3] = MEMORY[0x1E0CDF598];
    v6[0] = v3;
    v6[1] = swift_getOpaqueTypeConformance2();
    v4 = MEMORY[0x1BCCFBE48](a1, v6, MEMORY[0x1E0C93608], 0);
    if (!v5)
      atomic_store(v4, (unint64_t *)&qword_1EF478FC8);
  }
}

void sub_1BCA0E32C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t OpaqueTypeConformance2;
  unint64_t v5;
  uint64_t v6;
  _QWORD v7[4];

  if (!qword_1EF478FD0)
  {
    sub_1BCA0E448(255);
    v3 = v2;
    sub_1BCA0E52C(255);
    sub_1BCA0E5E4(255);
    sub_1BCAB5790();
    sub_1BCA0E678();
    sub_1BCA0E6FC();
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
    v7[0] = v3;
    v7[1] = MEMORY[0x1E0CDF5D0];
    v7[2] = OpaqueTypeConformance2;
    v7[3] = MEMORY[0x1E0CDF598];
    v5 = MEMORY[0x1BCCFBE48](a1, v7, MEMORY[0x1E0C93510], 0);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_1EF478FD0);
  }
}

void sub_1BCA0E448(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD v7[4];

  if (!qword_1EF478FD8)
  {
    sub_1BCA0E52C(255);
    v3 = v2;
    sub_1BCA0E5E4(255);
    sub_1BCAB5790();
    sub_1BCA0E678();
    v4 = sub_1BCA0E6FC();
    v7[2] = MEMORY[0x1E0C93B30];
    v7[3] = v4;
    swift_getOpaqueTypeConformance2();
    v7[0] = v3;
    v7[1] = swift_getOpaqueTypeConformance2();
    v5 = MEMORY[0x1BCCFBE48](a1, v7, MEMORY[0x1E0C93650], 0);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_1EF478FD8);
  }
}

void sub_1BCA0E52C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD v7[4];

  if (!qword_1EF478FE0)
  {
    sub_1BCA0E5E4(255);
    v3 = v2;
    sub_1BCAB5790();
    sub_1BCA0E678();
    v4 = sub_1BCA0E6FC();
    v7[2] = MEMORY[0x1E0C93B30];
    v7[3] = v4;
    v7[0] = v3;
    v7[1] = swift_getOpaqueTypeConformance2();
    v5 = MEMORY[0x1BCCFBE48](a1, v7, MEMORY[0x1E0C935D8], 0);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_1EF478FE0);
  }
}

void sub_1BCA0E5E4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD v8[4];

  if (!qword_1EF478FE8)
  {
    v2 = sub_1BCAB5790();
    sub_1BCA0E678();
    v4 = v3;
    v5 = sub_1BCA0E6FC();
    v8[0] = v2;
    v8[1] = v4;
    v8[2] = MEMORY[0x1E0C93B30];
    v8[3] = v5;
    v6 = MEMORY[0x1BCCFBE48](a1, v8, MEMORY[0x1E0C934B8], 0);
    if (!v7)
      atomic_store(v6, (unint64_t *)&qword_1EF478FE8);
  }
}

void sub_1BCA0E678()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EF478FF0)
  {
    sub_1BC9B75E4(255, &qword_1EF478FF8, MEMORY[0x1E0CDDD78], MEMORY[0x1E0CD9748], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CD9BF0]);
    sub_1BCAB5988();
    v0 = sub_1BCAB5970();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EF478FF0);
  }
}

unint64_t sub_1BCA0E6FC()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];

  result = qword_1EF479000;
  if (!qword_1EF479000)
  {
    sub_1BCA0E678();
    v2 = v1;
    v3[0] = sub_1BCA0E764();
    v3[1] = MEMORY[0x1E0CDA1C0];
    result = MEMORY[0x1BCCFBE84](MEMORY[0x1E0CD9C20], v2, v3);
    atomic_store(result, (unint64_t *)&qword_1EF479000);
  }
  return result;
}

unint64_t sub_1BCA0E764()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1EF479008;
  if (!qword_1EF479008)
  {
    sub_1BC9B75E4(255, &qword_1EF478FF8, MEMORY[0x1E0CDDD78], MEMORY[0x1E0CD9748], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0CD9BF0]);
    v2[0] = MEMORY[0x1E0CDDD58];
    v2[1] = MEMORY[0x1E0CD9728];
    result = MEMORY[0x1BCCFBE84](MEMORY[0x1E0CD9C20], v1, v2);
    atomic_store(result, (unint64_t *)&qword_1EF479008);
  }
  return result;
}

void sub_1BCA0E7E4(uint64_t a1)
{
  sub_1BC998AB0(a1, &qword_1EF479010, (uint64_t (*)(uint64_t))sub_1BCA0E078, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
}

unint64_t sub_1BCA0E800()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v5[5];
  _QWORD v6[3];

  result = qword_1EF479018;
  if (!qword_1EF479018)
  {
    sub_1BCA0DA1C();
    v2 = v1;
    v6[0] = sub_1BCA0E994();
    sub_1BCA0E1E4(255);
    v4 = v3;
    sub_1BCA0E32C(255);
    sub_1BCA0E448(255);
    sub_1BCA0E52C(255);
    sub_1BCA0E5E4(255);
    sub_1BCAB5790();
    sub_1BCA0E678();
    sub_1BCA0E6FC();
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    v5[3] = swift_getOpaqueTypeConformance2();
    v5[4] = MEMORY[0x1E0CDF598];
    swift_getOpaqueTypeConformance2();
    v5[1] = v4;
    v5[2] = swift_getOpaqueTypeConformance2();
    v6[1] = swift_getOpaqueTypeConformance2();
    v6[2] = sub_1BCA0ECD8();
    v5[0] = v6;
    result = MEMORY[0x1BCCFBE84](MEMORY[0x1E0C93448], v2, v5);
    atomic_store(result, (unint64_t *)&qword_1EF479018);
  }
  return result;
}

unint64_t sub_1BCA0E994()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  result = qword_1EF479020;
  if (!qword_1EF479020)
  {
    sub_1BCA0DA98(255);
    v2 = v1;
    v3 = sub_1BCA0EA38(&qword_1EF479028, (uint64_t (*)(uint64_t))sub_1BCA0DAB4, sub_1BCA0EA14, (uint64_t (*)(void))sub_1BC997828);
    result = MEMORY[0x1BCCFBE84](MEMORY[0x1E0C93E00], v2, &v3);
    atomic_store(result, (unint64_t *)&qword_1EF479020);
  }
  return result;
}

uint64_t sub_1BCA0EA14()
{
  return sub_1BCA0EA38(&qword_1EF479030, (uint64_t (*)(uint64_t))sub_1BCA0DAD8, (uint64_t (*)(void))sub_1BCA0EAA8, (uint64_t (*)(void))sub_1BCA0EB40);
}

uint64_t sub_1BCA0EA38(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t (*a3)(void), uint64_t (*a4)(void))
{
  uint64_t result;
  uint64_t v8;
  _QWORD v9[2];

  result = *a1;
  if (!result)
  {
    v8 = a2(255);
    v9[0] = a3();
    v9[1] = a4();
    result = MEMORY[0x1BCCFBE84](MEMORY[0x1E0C93840], v8, v9);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1BCA0EAA8()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[5];

  result = qword_1EF479038;
  if (!qword_1EF479038)
  {
    sub_1BCA0DAFC(255);
    v2 = v1;
    v3[1] = sub_1BCAB5718();
    v3[2] = MEMORY[0x1E0CDF5D0];
    v3[3] = MEMORY[0x1E0C939E0];
    v3[4] = MEMORY[0x1E0CDF598];
    v3[0] = swift_getOpaqueTypeConformance2();
    result = MEMORY[0x1BCCFBE84](MEMORY[0x1E0C93DA0], v2, v3);
    atomic_store(result, (unint64_t *)&qword_1EF479038);
  }
  return result;
}

unint64_t sub_1BCA0EB40()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t OpaqueTypeConformance2;
  _QWORD v6[5];

  result = qword_1EF479040;
  if (!qword_1EF479040)
  {
    sub_1BCA0DBB4(255);
    v2 = v1;
    sub_1BCA0DDC8(255);
    v4 = v3;
    sub_1BCA0DEB4(255);
    sub_1BCAB576C();
    sub_1BCA0DF74(255);
    sub_1BCA0DFF0();
    sub_1BCA0E034();
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
    v6[1] = v4;
    v6[2] = MEMORY[0x1E0CDF5D0];
    v6[3] = OpaqueTypeConformance2;
    v6[4] = MEMORY[0x1E0CDF598];
    v6[0] = swift_getOpaqueTypeConformance2();
    result = MEMORY[0x1BCCFBE84](MEMORY[0x1E0C93DA0], v2, v6);
    atomic_store(result, (unint64_t *)&qword_1EF479040);
  }
  return result;
}

uint64_t sub_1BCA0EC74(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  result = *a1;
  if (!result)
  {
    v8 = a2(255);
    v9 = a3();
    result = MEMORY[0x1BCCFBE84](a4, v8, &v9);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1BCA0ECD8()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v5[5];

  result = qword_1EF479048;
  if (!qword_1EF479048)
  {
    sub_1BCA0E7E4(255);
    v2 = v1;
    sub_1BCA0E1E4(255);
    v4 = v3;
    sub_1BCA0E32C(255);
    sub_1BCA0E448(255);
    sub_1BCA0E52C(255);
    sub_1BCA0E5E4(255);
    sub_1BCAB5790();
    sub_1BCA0E678();
    sub_1BCA0E6FC();
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    v5[3] = swift_getOpaqueTypeConformance2();
    v5[4] = MEMORY[0x1E0CDF598];
    swift_getOpaqueTypeConformance2();
    v5[1] = v4;
    v5[2] = swift_getOpaqueTypeConformance2();
    v5[0] = swift_getOpaqueTypeConformance2();
    result = MEMORY[0x1BCCFBE84](MEMORY[0x1E0C93E00], v2, v5);
    atomic_store(result, (unint64_t *)&qword_1EF479048);
  }
  return result;
}

void sub_1BCA0EE54()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EF479058)
  {
    sub_1BCA0EECC(255);
    sub_1BC996948(&qword_1ED6C35E8, (uint64_t (*)(uint64_t))sub_1BCA0EECC, MEMORY[0x1E0CE0680]);
    v0 = sub_1BCAB5D9C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EF479058);
  }
}

void sub_1BCA0EECC(uint64_t a1)
{
  sub_1BC998AB0(a1, &qword_1ED6C35F0, (uint64_t (*)(uint64_t))sub_1BCA0EEE8, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0CE0648]);
}

void sub_1BCA0EEE8()
{
  unint64_t TupleTypeMetadata3;
  uint64_t v1;

  if (!qword_1ED6C35D8)
  {
    sub_1BC9A1210(255, &qword_1ED6C35D0, MEMORY[0x1E0CDDD78], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1)
      atomic_store(TupleTypeMetadata3, (unint64_t *)&qword_1ED6C35D8);
  }
}

void sub_1BCA0EF6C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EF479068)
  {
    sub_1BCA0D644();
    sub_1BC9B75E4(255, &qword_1ED6C3130, MEMORY[0x1E0CDF5D0], MEMORY[0x1E0CDF598], MEMORY[0x1E0CDC6B0]);
    v0 = sub_1BCAB5970();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EF479068);
  }
}

void sub_1BCA0EFF0(uint64_t a1)
{
  sub_1BCA03158(a1, &qword_1EF479070, (uint64_t (*)(uint64_t))sub_1BCA0EF6C, (uint64_t (*)(uint64_t))sub_1BCA0F014, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0CD9BF0]);
}

void sub_1BCA0F014()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED6C3558)
  {
    sub_1BCAB597C();
    sub_1BC996948(&qword_1ED6C3598, (uint64_t (*)(uint64_t))MEMORY[0x1E0CDA088], MEMORY[0x1E0CDA078]);
    v0 = sub_1BCAB591C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED6C3558);
  }
}

void sub_1BCA0F08C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD v7[4];

  if (!qword_1EF479078)
  {
    sub_1BCA0EFF0(255);
    v3 = v2;
    sub_1BC9B69A0();
    v7[0] = v3;
    v7[1] = v4;
    v7[2] = sub_1BCA0F168(&qword_1EF479080, (uint64_t (*)(uint64_t))sub_1BCA0EFF0, sub_1BCA0F1D8, sub_1BCA0F218);
    v7[3] = sub_1BC996948(&qword_1ED6C3608, (uint64_t (*)(uint64_t))sub_1BC9B69A0, MEMORY[0x1E0DECD88]);
    v5 = MEMORY[0x1BCCFBE48](a1, v7, MEMORY[0x1E0CDE4C8], 0);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_1EF479078);
  }
}

uint64_t sub_1BCA0F168(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t (*a3)(void), uint64_t (*a4)(void))
{
  uint64_t result;
  uint64_t v8;
  _QWORD v9[2];

  result = *a1;
  if (!result)
  {
    v8 = a2(255);
    v9[0] = a3();
    v9[1] = a4();
    result = MEMORY[0x1BCCFBE84](MEMORY[0x1E0CD9C20], v8, v9);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1BCA0F1D8()
{
  return sub_1BCA0F168(&qword_1EF479088, (uint64_t (*)(uint64_t))sub_1BCA0EF6C, sub_1BCA0F1FC, (uint64_t (*)(void))sub_1BC9C153C);
}

uint64_t sub_1BCA0F1FC()
{
  return sub_1BC996948(&qword_1EF479090, (uint64_t (*)(uint64_t))sub_1BCA0D644, MEMORY[0x1E0CDFCC0]);
}

uint64_t sub_1BCA0F218()
{
  return sub_1BC996948(&qword_1ED6C3550, (uint64_t (*)(uint64_t))sub_1BCA0F014, MEMORY[0x1E0CD89F0]);
}

void sub_1BCA0F234()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EF4790A0)
  {
    sub_1BCA0D6BC(255);
    v0 = sub_1BCAB5940();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EF4790A0);
  }
}

uint64_t sub_1BCA0F298()
{
  return sub_1BCAB59C4();
}

uint64_t sub_1BCA0F2B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1BCA0D2D8(a1, a2, a3, a4, (void (*)(_QWORD))MEMORY[0x1E0CD9AA8], MEMORY[0x1E0CDA650]);
}

uint64_t sub_1BCA0F2DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(_QWORD, uint64_t, uint64_t, uint64_t, _QWORD))
{
  uint64_t v8;

  v8 = a6(0, a3, a4, a5, MEMORY[0x1E0CD9BF0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a2, a1, v8);
  return a2;
}

void sub_1BCA0F338(uint64_t a1)
{
  sub_1BC998AB0(a1, &qword_1ED6C3538, (uint64_t (*)(uint64_t))MEMORY[0x1E0CD86F8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
}

uint64_t type metadata accessor for CoreChartTrendLineView(uint64_t a1)
{
  return sub_1BC9B359C(a1, qword_1EF479198);
}

uint64_t sub_1BCA0F368@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1BCA0CC94(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_1BCA0F370()
{
  return sub_1BC996948(&qword_1EF477D28, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], MEMORY[0x1E0CB08A8]);
}

uint64_t sub_1BCA0F39C()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t *initializeBufferWithCopyOfBuffer for CoreChartTrendDataElement(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_1BCAB4E54();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 24);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    *(_QWORD *)v9 = *(_QWORD *)v10;
    v9[8] = v10[8];
  }
  return a1;
}

uint64_t destroy for CoreChartTrendDataElement(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1BCAB4E54();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t initializeWithCopy for CoreChartTrendDataElement(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = sub_1BCAB4E54();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 24);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_QWORD *)v8 = *(_QWORD *)v9;
  *(_BYTE *)(v8 + 8) = *(_BYTE *)(v9 + 8);
  return a1;
}

uint64_t assignWithCopy for CoreChartTrendDataElement(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v6 = sub_1BCAB4E54();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  v7 = *(int *)(a3 + 24);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = *(_BYTE *)(v9 + 8);
  *(_QWORD *)v8 = *(_QWORD *)v9;
  *(_BYTE *)(v8 + 8) = v10;
  return a1;
}

uint64_t initializeWithTake for CoreChartTrendDataElement(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = sub_1BCAB4E54();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 24);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_QWORD *)v8 = *(_QWORD *)v9;
  *(_BYTE *)(v8 + 8) = *(_BYTE *)(v9 + 8);
  return a1;
}

uint64_t assignWithTake for CoreChartTrendDataElement(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = sub_1BCAB4E54();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 24);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_QWORD *)v8 = *(_QWORD *)v9;
  *(_BYTE *)(v8 + 8) = *(_BYTE *)(v9 + 8);
  return a1;
}

uint64_t getEnumTagSinglePayload for CoreChartTrendDataElement()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BCA0F660(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1BCAB4E54();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for CoreChartTrendDataElement()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BCA0F6A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1BCAB4E54();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t sub_1BCA0F6E8()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1BCAB4E54();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for CoreChartTrendLineViewModel(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_1BCAB4BD8();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[6];
    *(uint64_t *)((char *)a1 + a3[5]) = *(uint64_t *)((char *)a2 + a3[5]);
    v9 = (uint64_t *)((char *)a1 + v8);
    v10 = (uint64_t *)((char *)a2 + v8);
    v11 = v10[1];
    *v9 = *v10;
    v9[1] = v11;
    v12 = a3[7];
    v13 = (uint64_t *)((char *)a1 + v12);
    v14 = (uint64_t *)((char *)a2 + v12);
    v15 = v14[1];
    *v13 = *v14;
    v13[1] = v15;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for CoreChartTrendLineViewModel(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1BCAB4BD8();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for CoreChartTrendLineViewModel(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;

  v6 = sub_1BCAB4BD8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[6];
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  v10 = v9[1];
  *v8 = *v9;
  v8[1] = v10;
  v11 = a3[7];
  v12 = (_QWORD *)(a1 + v11);
  v13 = (_QWORD *)(a2 + v11);
  v14 = v13[1];
  *v12 = *v13;
  v12[1] = v14;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for CoreChartTrendLineViewModel(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;

  v6 = sub_1BCAB4BD8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  v7 = a3[6];
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  *v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v10 = a3[7];
  v11 = (_QWORD *)(a1 + v10);
  v12 = (_QWORD *)(a2 + v10);
  *v11 = *v12;
  v11[1] = v12[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for CoreChartTrendLineViewModel(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = sub_1BCAB4BD8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  return a1;
}

uint64_t assignWithTake for CoreChartTrendLineViewModel(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;

  v6 = sub_1BCAB4BD8();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[6];
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v11 = *v9;
  v10 = v9[1];
  *v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease();
  v12 = a3[7];
  v13 = (_QWORD *)(a1 + v12);
  v14 = (uint64_t *)(a2 + v12);
  v16 = *v14;
  v15 = v14[1];
  *v13 = v16;
  v13[1] = v15;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for CoreChartTrendLineViewModel()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BCA0FAC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = sub_1BCAB4BD8();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 24) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for CoreChartTrendLineViewModel()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BCA0FB50(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_1BCAB4BD8();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 24) + 8) = (a2 - 1);
  return result;
}

uint64_t sub_1BCA0FBCC()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1BCAB4BD8();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for CoreChartTrendViewModel(uint64_t a1, uint64_t *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  void *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  id v13;
  int *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  unsigned int (*v27)(char *, uint64_t, int *);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  void (*v38)(char *, _QWORD, uint64_t, int *);
  void (*v40)(char *, char *, uint64_t);

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v29 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v29 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    v7 = (void *)a2[1];
    *(_QWORD *)(a1 + 8) = v7;
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
    v8 = a3[7];
    v9 = (char *)(a1 + v8);
    v10 = (char *)a2 + v8;
    v11 = sub_1BCAB4BD8();
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    v13 = v7;
    v40 = v12;
    v12(v9, v10, v11);
    v14 = (int *)type metadata accessor for CoreChartTrendLineViewModel(0);
    *(_QWORD *)&v9[v14[5]] = *(_QWORD *)&v10[v14[5]];
    v15 = v14[6];
    v16 = &v9[v15];
    v17 = &v10[v15];
    v18 = *((_QWORD *)v17 + 1);
    *(_QWORD *)v16 = *(_QWORD *)v17;
    *((_QWORD *)v16 + 1) = v18;
    v19 = v14[7];
    v20 = &v9[v19];
    v21 = &v10[v19];
    v22 = *((_QWORD *)v21 + 1);
    *(_QWORD *)v20 = *(_QWORD *)v21;
    *((_QWORD *)v20 + 1) = v22;
    v23 = a3[8];
    v24 = (char *)v4 + v23;
    v25 = (char *)a2 + v23;
    v26 = *((_QWORD *)v14 - 1);
    v27 = *(unsigned int (**)(char *, uint64_t, int *))(v26 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v27(v25, 1, v14))
    {
      sub_1BCA0D60C(0);
      memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    }
    else
    {
      v40(v24, v25, v11);
      *(_QWORD *)&v24[v14[5]] = *(_QWORD *)&v25[v14[5]];
      v30 = v14[6];
      v31 = &v24[v30];
      v32 = &v25[v30];
      v33 = *((_QWORD *)v32 + 1);
      *(_QWORD *)v31 = *(_QWORD *)v32;
      *((_QWORD *)v31 + 1) = v33;
      v34 = v14[7];
      v35 = &v24[v34];
      v36 = &v25[v34];
      v37 = *((_QWORD *)v36 + 1);
      *(_QWORD *)v35 = *(_QWORD *)v36;
      *((_QWORD *)v35 + 1) = v37;
      v38 = *(void (**)(char *, _QWORD, uint64_t, int *))(v26 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v38(v24, 0, 1, v14);
    }
    *(_QWORD *)((char *)v4 + a3[9]) = *(uint64_t *)((char *)a2 + a3[9]);
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for CoreChartTrendViewModel(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;

  v4 = a1 + *(int *)(a2 + 28);
  v5 = sub_1BCAB4BD8();
  v6 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v6(v4, v5);
  v7 = type metadata accessor for CoreChartTrendLineViewModel(0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v8 = a1 + *(int *)(a2 + 32);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v8, 1, v7))
  {
    v6(v8, v5);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for CoreChartTrendViewModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  id v12;
  int *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  unsigned int (*v26)(char *, uint64_t, int *);
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  void (*v36)(char *, _QWORD, uint64_t, int *);
  uint64_t v38;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v6 = *(void **)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v7 = *(int *)(a3 + 28);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_1BCAB4BD8();
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
  v12 = v6;
  v11(v8, v9, v10);
  v13 = (int *)type metadata accessor for CoreChartTrendLineViewModel(0);
  *(_QWORD *)(v8 + v13[5]) = *(_QWORD *)(v9 + v13[5]);
  v14 = v13[6];
  v15 = (_QWORD *)(v8 + v14);
  v16 = (_QWORD *)(v9 + v14);
  v17 = v16[1];
  *v15 = *v16;
  v15[1] = v17;
  v18 = v13[7];
  v19 = (_QWORD *)(v8 + v18);
  v20 = (_QWORD *)(v9 + v18);
  v21 = v20[1];
  *v19 = *v20;
  v19[1] = v21;
  v38 = a3;
  v22 = *(int *)(a3 + 32);
  v23 = (char *)(a1 + v22);
  v24 = (char *)(a2 + v22);
  v25 = *((_QWORD *)v13 - 1);
  v26 = *(unsigned int (**)(char *, uint64_t, int *))(v25 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v26(v24, 1, v13))
  {
    sub_1BCA0D60C(0);
    memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
  }
  else
  {
    v11((uint64_t)v23, (uint64_t)v24, v10);
    *(_QWORD *)&v23[v13[5]] = *(_QWORD *)&v24[v13[5]];
    v28 = v13[6];
    v29 = &v23[v28];
    v30 = &v24[v28];
    v31 = *((_QWORD *)v30 + 1);
    *(_QWORD *)v29 = *(_QWORD *)v30;
    *((_QWORD *)v29 + 1) = v31;
    v32 = v13[7];
    v33 = &v23[v32];
    v34 = &v24[v32];
    v35 = *((_QWORD *)v34 + 1);
    *(_QWORD *)v33 = *(_QWORD *)v34;
    *((_QWORD *)v33 + 1) = v35;
    v36 = *(void (**)(char *, _QWORD, uint64_t, int *))(v25 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v36(v23, 0, 1, v13);
  }
  *(_QWORD *)(a1 + *(int *)(v38 + 36)) = *(_QWORD *)(a2 + *(int *)(v38 + 36));
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for CoreChartTrendViewModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  int *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t (*v25)(uint64_t, uint64_t, int *);
  int v26;
  int v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  void (*v34)(char *, _QWORD, uint64_t, int *);
  uint64_t v35;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v6 = *(void **)(a2 + 8);
  v7 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  v8 = v6;

  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v9 = *(int *)(a3 + 28);
  v10 = a1 + v9;
  v11 = a2 + v9;
  v12 = sub_1BCAB4BD8();
  v43 = *(_QWORD *)(v12 - 8);
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v43 + 24);
  v13(v10, v11, v12);
  v14 = (int *)type metadata accessor for CoreChartTrendLineViewModel(0);
  *(_QWORD *)(v10 + v14[5]) = *(_QWORD *)(v11 + v14[5]);
  v15 = v14[6];
  v16 = (_QWORD *)(v10 + v15);
  v17 = (_QWORD *)(v11 + v15);
  *v16 = *v17;
  v16[1] = v17[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v18 = v14[7];
  v19 = (_QWORD *)(v10 + v18);
  v20 = (_QWORD *)(v11 + v18);
  *v19 = *v20;
  v19[1] = v20[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v44 = a3;
  v21 = *(int *)(a3 + 32);
  v22 = (char *)(a1 + v21);
  v23 = (char *)(a2 + v21);
  v24 = *((_QWORD *)v14 - 1);
  v25 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v24 + 48);
  v26 = v25(a1 + v21, 1, v14);
  v27 = v25((uint64_t)v23, 1, v14);
  if (!v26)
  {
    if (!v27)
    {
      v13((uint64_t)v22, (uint64_t)v23, v12);
      *(_QWORD *)&v22[v14[5]] = *(_QWORD *)&v23[v14[5]];
      v37 = v14[6];
      v38 = &v22[v37];
      v39 = &v23[v37];
      *(_QWORD *)v38 = *(_QWORD *)v39;
      *((_QWORD *)v38 + 1) = *((_QWORD *)v39 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v40 = v14[7];
      v41 = &v22[v40];
      v42 = &v23[v40];
      *(_QWORD *)v41 = *(_QWORD *)v42;
      *((_QWORD *)v41 + 1) = *((_QWORD *)v42 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_7;
    }
    sub_1BC997208((uint64_t)v22, type metadata accessor for CoreChartTrendLineViewModel);
    goto LABEL_6;
  }
  if (v27)
  {
LABEL_6:
    sub_1BCA0D60C(0);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v43 + 16))(v22, v23, v12);
  *(_QWORD *)&v22[v14[5]] = *(_QWORD *)&v23[v14[5]];
  v28 = v14[6];
  v29 = &v22[v28];
  v30 = &v23[v28];
  *(_QWORD *)v29 = *(_QWORD *)v30;
  *((_QWORD *)v29 + 1) = *((_QWORD *)v30 + 1);
  v31 = v14[7];
  v32 = &v22[v31];
  v33 = &v23[v31];
  *(_QWORD *)v32 = *(_QWORD *)v33;
  *((_QWORD *)v32 + 1) = *((_QWORD *)v33 + 1);
  v34 = *(void (**)(char *, _QWORD, uint64_t, int *))(v24 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v34(v22, 0, 1, v14);
LABEL_7:
  *(_QWORD *)(a1 + *(int *)(v44 + 36)) = *(_QWORD *)(a2 + *(int *)(v44 + 36));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for CoreChartTrendViewModel(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  int *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v6 = a3[7];
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = sub_1BCAB4BD8();
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v11 = (int *)type metadata accessor for CoreChartTrendLineViewModel(0);
  *(_QWORD *)(v7 + v11[5]) = *(_QWORD *)(v8 + v11[5]);
  *(_OWORD *)(v7 + v11[6]) = *(_OWORD *)(v8 + v11[6]);
  *(_OWORD *)(v7 + v11[7]) = *(_OWORD *)(v8 + v11[7]);
  v12 = a3[8];
  v13 = (char *)(a1 + v12);
  v14 = (char *)(a2 + v12);
  v15 = *((_QWORD *)v11 - 1);
  if ((*(unsigned int (**)(uint64_t, uint64_t, int *))(v15 + 48))(a2 + v12, 1, v11))
  {
    sub_1BCA0D60C(0);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    v10((uint64_t)v13, (uint64_t)v14, v9);
    *(_QWORD *)&v13[v11[5]] = *(_QWORD *)&v14[v11[5]];
    *(_OWORD *)&v13[v11[6]] = *(_OWORD *)&v14[v11[6]];
    *(_OWORD *)&v13[v11[7]] = *(_OWORD *)&v14[v11[7]];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v15 + 56))(v13, 0, 1, v11);
  }
  *(_QWORD *)(a1 + a3[9]) = *(_QWORD *)(a2 + a3[9]);
  return a1;
}

uint64_t assignWithTake for CoreChartTrendViewModel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  int *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t (*v27)(uint64_t, uint64_t, int *);
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v6 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);

  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v7 = *(int *)(a3 + 28);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_1BCAB4BD8();
  v42 = *(_QWORD *)(v10 - 8);
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v42 + 40);
  v11(v8, v9, v10);
  v12 = (int *)type metadata accessor for CoreChartTrendLineViewModel(0);
  *(_QWORD *)(v8 + v12[5]) = *(_QWORD *)(v9 + v12[5]);
  v13 = v12[6];
  v14 = (_QWORD *)(v8 + v13);
  v15 = (uint64_t *)(v9 + v13);
  v17 = *v15;
  v16 = v15[1];
  *v14 = v17;
  v14[1] = v16;
  swift_bridgeObjectRelease();
  v18 = v12[7];
  v19 = (_QWORD *)(v8 + v18);
  v20 = (uint64_t *)(v9 + v18);
  v22 = *v20;
  v21 = v20[1];
  *v19 = v22;
  v19[1] = v21;
  swift_bridgeObjectRelease();
  v43 = a3;
  v23 = *(int *)(a3 + 32);
  v24 = (char *)(a1 + v23);
  v25 = (char *)(a2 + v23);
  v26 = *((_QWORD *)v12 - 1);
  v27 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v26 + 48);
  v28 = v27(a1 + v23, 1, v12);
  v29 = v27((uint64_t)v25, 1, v12);
  if (!v28)
  {
    if (!v29)
    {
      v11((uint64_t)v24, (uint64_t)v25, v10);
      *(_QWORD *)&v24[v12[5]] = *(_QWORD *)&v25[v12[5]];
      v32 = v12[6];
      v33 = &v24[v32];
      v34 = &v25[v32];
      v36 = *(_QWORD *)v34;
      v35 = *((_QWORD *)v34 + 1);
      *(_QWORD *)v33 = v36;
      *((_QWORD *)v33 + 1) = v35;
      swift_bridgeObjectRelease();
      v37 = v12[7];
      v38 = &v24[v37];
      v39 = &v25[v37];
      v41 = *(_QWORD *)v39;
      v40 = *((_QWORD *)v39 + 1);
      *(_QWORD *)v38 = v41;
      *((_QWORD *)v38 + 1) = v40;
      swift_bridgeObjectRelease();
      goto LABEL_7;
    }
    sub_1BC997208((uint64_t)v24, type metadata accessor for CoreChartTrendLineViewModel);
    goto LABEL_6;
  }
  if (v29)
  {
LABEL_6:
    sub_1BCA0D60C(0);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v42 + 32))(v24, v25, v10);
  *(_QWORD *)&v24[v12[5]] = *(_QWORD *)&v25[v12[5]];
  *(_OWORD *)&v24[v12[6]] = *(_OWORD *)&v25[v12[6]];
  *(_OWORD *)&v24[v12[7]] = *(_OWORD *)&v25[v12[7]];
  (*(void (**)(char *, _QWORD, uint64_t, int *))(v26 + 56))(v24, 0, 1, v12);
LABEL_7:
  *(_QWORD *)(a1 + *(int *)(v43 + 36)) = *(_QWORD *)(a2 + *(int *)(v43 + 36));
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for CoreChartTrendViewModel()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BCA10700(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for CoreChartTrendLineViewModel(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 28);
    }
    else
    {
      sub_1BCA0D60C(0);
      v10 = v12;
      v9 = *(_QWORD *)(v12 - 8);
      v11 = *(int *)(a3 + 32);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for CoreChartTrendViewModel()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1BCA107AC(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for CoreChartTrendLineViewModel(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 28);
    }
    else
    {
      sub_1BCA0D60C(0);
      v10 = v12;
      v9 = *(_QWORD *)(v12 - 8);
      v11 = *(int *)(a4 + 32);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

void sub_1BCA10848()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for CoreChartTrendLineViewModel(319);
  if (v0 <= 0x3F)
  {
    sub_1BCA0D60C(319);
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

_QWORD *initializeBufferWithCopyOfBuffer for CoreChartTrendDiagram(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  void (*v32)(char *, char *, uint64_t);
  id v33;
  int *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  char *v46;
  uint64_t v47;
  unsigned int (*v48)(char *, uint64_t, int *);
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  void (*v58)(char *, _QWORD, uint64_t, int *);
  uint64_t v59;
  _QWORD *v61;
  int *v62;
  _QWORD *v63;
  uint64_t v64;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v11 = *a2;
    *a1 = *a2;
    v12 = (_QWORD *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *a1 = *a2;
    v7 = a3[5];
    v8 = (_QWORD *)((char *)a1 + v7);
    v9 = (_QWORD *)((char *)a2 + v7);
    sub_1BCA0D378(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v10 = sub_1BCAB5904();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
    }
    else
    {
      *v8 = *v9;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    v13 = a3[6];
    v14 = a3[7];
    v15 = (_QWORD *)((char *)a1 + v13);
    v16 = (_QWORD *)((char *)a2 + v13);
    v18 = *v16;
    v17 = v16[1];
    *v15 = v18;
    v15[1] = v17;
    v19 = (_QWORD *)((char *)a1 + v14);
    v20 = (_QWORD *)((char *)a2 + v14);
    v22 = *v20;
    v21 = v20[1];
    *v19 = v22;
    v19[1] = v21;
    v61 = a1;
    v62 = a3;
    v23 = a3[8];
    v24 = (char *)a1 + v23;
    v63 = a2;
    v25 = (char *)a2 + v23;
    *(_DWORD *)v24 = *(_DWORD *)((char *)a2 + v23);
    v26 = *(void **)((char *)a2 + v23 + 8);
    *((_QWORD *)v24 + 1) = v26;
    v24[16] = *((_BYTE *)a2 + v23 + 16);
    v27 = type metadata accessor for CoreChartTrendViewModel(0);
    v28 = *(int *)(v27 + 28);
    v29 = &v24[v28];
    v30 = &v25[v28];
    v31 = sub_1BCAB4BD8();
    v32 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v31 - 8) + 16);
    swift_retain();
    swift_retain();
    v33 = v26;
    v32(v29, v30, v31);
    v34 = (int *)type metadata accessor for CoreChartTrendLineViewModel(0);
    *(_QWORD *)&v29[v34[5]] = *(_QWORD *)&v30[v34[5]];
    v35 = v34[6];
    v36 = &v29[v35];
    v37 = &v30[v35];
    v38 = *((_QWORD *)v37 + 1);
    *(_QWORD *)v36 = *(_QWORD *)v37;
    *((_QWORD *)v36 + 1) = v38;
    v39 = v34[7];
    v40 = &v29[v39];
    v41 = &v30[v39];
    v42 = *((_QWORD *)v41 + 1);
    *(_QWORD *)v40 = *(_QWORD *)v41;
    *((_QWORD *)v40 + 1) = v42;
    v64 = v27;
    v43 = *(int *)(v27 + 32);
    v44 = v24;
    v45 = &v24[v43];
    v46 = &v25[v43];
    v47 = *((_QWORD *)v34 - 1);
    v48 = *(unsigned int (**)(char *, uint64_t, int *))(v47 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v48(v46, 1, v34))
    {
      sub_1BCA0D60C(0);
      memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
    }
    else
    {
      v32(v45, v46, v31);
      *(_QWORD *)&v45[v34[5]] = *(_QWORD *)&v46[v34[5]];
      v50 = v34[6];
      v51 = &v45[v50];
      v52 = &v46[v50];
      v53 = *((_QWORD *)v52 + 1);
      *(_QWORD *)v51 = *(_QWORD *)v52;
      *((_QWORD *)v51 + 1) = v53;
      v54 = v34[7];
      v55 = &v45[v54];
      v56 = &v46[v54];
      v57 = *((_QWORD *)v56 + 1);
      *(_QWORD *)v55 = *(_QWORD *)v56;
      *((_QWORD *)v55 + 1) = v57;
      v58 = *(void (**)(char *, _QWORD, uint64_t, int *))(v47 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v58(v45, 0, 1, v34);
    }
    *(_QWORD *)&v44[*(int *)(v64 + 36)] = *(_QWORD *)&v25[*(int *)(v64 + 36)];
    v12 = v61;
    v59 = v62[10];
    *((_BYTE *)v61 + v62[9]) = *((_BYTE *)v63 + v62[9]);
    *(_QWORD *)((char *)v61 + v59) = *(_QWORD *)((char *)v63 + v59);
    swift_bridgeObjectRetain();
  }
  return v12;
}

uint64_t destroy for CoreChartTrendDiagram(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;

  v4 = a1 + *(int *)(a2 + 20);
  sub_1BCA0D378(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v5 = sub_1BCAB5904();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  }
  else
  {
    swift_release();
  }
  swift_release();
  swift_release();
  v6 = a1 + *(int *)(a2 + 32);

  v7 = type metadata accessor for CoreChartTrendViewModel(0);
  v8 = v6 + *(int *)(v7 + 28);
  v9 = sub_1BCAB4BD8();
  v10 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8);
  v10(v8, v9);
  v11 = type metadata accessor for CoreChartTrendLineViewModel(0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v12 = v6 + *(int *)(v7 + 32);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(v12, 1, v11))
  {
    v10(v12, v9);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for CoreChartTrendDiagram(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  void (*v29)(char *, char *, uint64_t);
  id v30;
  int *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  unsigned int (*v44)(char *, uint64_t, int *);
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  void (*v54)(char *, _QWORD, uint64_t, int *);
  uint64_t v55;
  _QWORD *v57;
  uint64_t v58;
  int *v59;
  _QWORD *v60;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (_QWORD *)((char *)a1 + v6);
  v8 = (_QWORD *)((char *)a2 + v6);
  sub_1BCA0D378(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v9 = sub_1BCAB5904();
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
  }
  else
  {
    *v7 = *v8;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  v10 = a3[6];
  v11 = a3[7];
  v12 = (_QWORD *)((char *)a1 + v10);
  v13 = (_QWORD *)((char *)a2 + v10);
  v15 = *v13;
  v14 = v13[1];
  *v12 = v15;
  v12[1] = v14;
  v16 = (_QWORD *)((char *)a1 + v11);
  v17 = (_QWORD *)((char *)a2 + v11);
  v19 = *v17;
  v18 = v17[1];
  *v16 = v19;
  v16[1] = v18;
  v59 = a3;
  v60 = a2;
  v20 = a3[8];
  v57 = a1;
  v21 = (char *)a1 + v20;
  v22 = (char *)a2 + v20;
  *(_DWORD *)v21 = *(_DWORD *)((char *)a2 + v20);
  v23 = *(void **)((char *)a2 + v20 + 8);
  *((_QWORD *)v21 + 1) = v23;
  v21[16] = *((_BYTE *)a2 + v20 + 16);
  v24 = type metadata accessor for CoreChartTrendViewModel(0);
  v25 = *(int *)(v24 + 28);
  v26 = &v21[v25];
  v27 = &v22[v25];
  v28 = sub_1BCAB4BD8();
  v29 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v28 - 8) + 16);
  swift_retain();
  swift_retain();
  v30 = v23;
  v29(v26, v27, v28);
  v31 = (int *)type metadata accessor for CoreChartTrendLineViewModel(0);
  *(_QWORD *)&v26[v31[5]] = *(_QWORD *)&v27[v31[5]];
  v32 = v31[6];
  v33 = &v26[v32];
  v34 = &v27[v32];
  v35 = *((_QWORD *)v34 + 1);
  *(_QWORD *)v33 = *(_QWORD *)v34;
  *((_QWORD *)v33 + 1) = v35;
  v36 = v31[7];
  v37 = &v26[v36];
  v38 = &v27[v36];
  v39 = *((_QWORD *)v38 + 1);
  *(_QWORD *)v37 = *(_QWORD *)v38;
  *((_QWORD *)v37 + 1) = v39;
  v58 = v24;
  v40 = *(int *)(v24 + 32);
  v41 = &v21[v40];
  v42 = &v22[v40];
  v43 = *((_QWORD *)v31 - 1);
  v44 = *(unsigned int (**)(char *, uint64_t, int *))(v43 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v44(v42, 1, v31))
  {
    sub_1BCA0D60C(0);
    memcpy(v41, v42, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
  }
  else
  {
    v29(v41, v42, v28);
    *(_QWORD *)&v41[v31[5]] = *(_QWORD *)&v42[v31[5]];
    v46 = v31[6];
    v47 = &v41[v46];
    v48 = &v42[v46];
    v49 = *((_QWORD *)v48 + 1);
    *(_QWORD *)v47 = *(_QWORD *)v48;
    *((_QWORD *)v47 + 1) = v49;
    v50 = v31[7];
    v51 = &v41[v50];
    v52 = &v42[v50];
    v53 = *((_QWORD *)v52 + 1);
    *(_QWORD *)v51 = *(_QWORD *)v52;
    *((_QWORD *)v51 + 1) = v53;
    v54 = *(void (**)(char *, _QWORD, uint64_t, int *))(v43 + 56);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v54(v41, 0, 1, v31);
  }
  *(_QWORD *)&v21[*(int *)(v58 + 36)] = *(_QWORD *)&v22[*(int *)(v58 + 36)];
  v55 = v59[10];
  *((_BYTE *)v57 + v59[9]) = *((_BYTE *)v60 + v59[9]);
  *(_QWORD *)((char *)v57 + v55) = *(_QWORD *)((char *)v60 + v55);
  swift_bridgeObjectRetain();
  return v57;
}

_QWORD *assignWithCopy for CoreChartTrendDiagram(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  void *v19;
  void *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  int *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t (*v38)(char *, uint64_t, int *);
  int v39;
  int v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  void (*v47)(char *, _QWORD, uint64_t, int *);
  uint64_t v48;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  void (*v57)(char *, char *, uint64_t);
  uint64_t v58;
  int *v59;
  _QWORD *v60;

  *a1 = *a2;
  if (a1 != a2)
  {
    v6 = a3[5];
    v7 = (_QWORD *)((char *)a1 + v6);
    v8 = (_QWORD *)((char *)a2 + v6);
    sub_1BC997208((uint64_t)a1 + v6, (uint64_t (*)(_QWORD))sub_1BCA0D378);
    sub_1BCA0D378(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v9 = sub_1BCAB5904();
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
    }
    else
    {
      *v7 = *v8;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
  }
  v10 = a3[6];
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  *(_QWORD *)((char *)a1 + v10) = *(_QWORD *)((char *)a2 + v10);
  swift_retain();
  swift_release();
  *((_QWORD *)v11 + 1) = *((_QWORD *)v12 + 1);
  v13 = a3[7];
  v14 = (char *)a1 + v13;
  v15 = (char *)a2 + v13;
  *(_QWORD *)((char *)a1 + v13) = *(_QWORD *)((char *)a2 + v13);
  swift_retain();
  swift_release();
  *((_QWORD *)v14 + 1) = *((_QWORD *)v15 + 1);
  v59 = a3;
  v60 = a2;
  v16 = a3[8];
  v17 = (char *)a1 + v16;
  v18 = (char *)a2 + v16;
  *(_DWORD *)v17 = *(_DWORD *)((char *)a2 + v16);
  v19 = *(void **)((char *)a2 + v16 + 8);
  v20 = (void *)*((_QWORD *)v17 + 1);
  *((_QWORD *)v17 + 1) = v19;
  v21 = v19;

  v17[16] = v18[16];
  v22 = type metadata accessor for CoreChartTrendViewModel(0);
  v23 = *(int *)(v22 + 28);
  v24 = &v17[v23];
  v25 = &v18[v23];
  v26 = sub_1BCAB4BD8();
  v56 = *(_QWORD *)(v26 - 8);
  v57 = *(void (**)(char *, char *, uint64_t))(v56 + 24);
  v57(v24, v25, v26);
  v27 = (int *)type metadata accessor for CoreChartTrendLineViewModel(0);
  *(_QWORD *)&v24[v27[5]] = *(_QWORD *)&v25[v27[5]];
  v28 = v27[6];
  v29 = &v24[v28];
  v30 = &v25[v28];
  *(_QWORD *)v29 = *(_QWORD *)v30;
  *((_QWORD *)v29 + 1) = *((_QWORD *)v30 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v31 = v27[7];
  v32 = &v24[v31];
  v33 = &v25[v31];
  *(_QWORD *)v32 = *(_QWORD *)v33;
  *((_QWORD *)v32 + 1) = *((_QWORD *)v33 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v58 = v22;
  v34 = *(int *)(v22 + 32);
  v35 = &v17[v34];
  v36 = &v18[v34];
  v37 = *((_QWORD *)v27 - 1);
  v38 = *(uint64_t (**)(char *, uint64_t, int *))(v37 + 48);
  v39 = v38(&v17[v34], 1, v27);
  v40 = v38(v36, 1, v27);
  if (!v39)
  {
    if (!v40)
    {
      v57(v35, v36, v26);
      *(_QWORD *)&v35[v27[5]] = *(_QWORD *)&v36[v27[5]];
      v50 = v27[6];
      v51 = &v35[v50];
      v52 = &v36[v50];
      *(_QWORD *)v51 = *(_QWORD *)v52;
      *((_QWORD *)v51 + 1) = *((_QWORD *)v52 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v53 = v27[7];
      v54 = &v35[v53];
      v55 = &v36[v53];
      *(_QWORD *)v54 = *(_QWORD *)v55;
      *((_QWORD *)v54 + 1) = *((_QWORD *)v55 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_12;
    }
    sub_1BC997208((uint64_t)v35, type metadata accessor for CoreChartTrendLineViewModel);
    goto LABEL_11;
  }
  if (v40)
  {
LABEL_11:
    sub_1BCA0D60C(0);
    memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
    goto LABEL_12;
  }
  (*(void (**)(char *, char *, uint64_t))(v56 + 16))(v35, v36, v26);
  *(_QWORD *)&v35[v27[5]] = *(_QWORD *)&v36[v27[5]];
  v41 = v27[6];
  v42 = &v35[v41];
  v43 = &v36[v41];
  *(_QWORD *)v42 = *(_QWORD *)v43;
  *((_QWORD *)v42 + 1) = *((_QWORD *)v43 + 1);
  v44 = v27[7];
  v45 = &v35[v44];
  v46 = &v36[v44];
  *(_QWORD *)v45 = *(_QWORD *)v46;
  *((_QWORD *)v45 + 1) = *((_QWORD *)v46 + 1);
  v47 = *(void (**)(char *, _QWORD, uint64_t, int *))(v37 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v47(v35, 0, 1, v27);
LABEL_12:
  *(_QWORD *)&v17[*(int *)(v58 + 36)] = *(_QWORD *)&v18[*(int *)(v58 + 36)];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_BYTE *)a1 + v59[9]) = *((_BYTE *)v60 + v59[9]);
  *(_QWORD *)((char *)a1 + v59[10]) = *(_QWORD *)((char *)v60 + v59[10]);
  return a1;
}

_QWORD *initializeWithTake for CoreChartTrendDiagram(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v29)(char *, char *, uint64_t);
  uint64_t v30;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  sub_1BCA0D378(0);
  v10 = v9;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v11 = sub_1BCAB5904();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v7, v8, v11);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  v12 = a3[7];
  *(_OWORD *)((char *)a1 + a3[6]) = *(_OWORD *)((char *)a2 + a3[6]);
  *(_OWORD *)((char *)a1 + v12) = *(_OWORD *)((char *)a2 + v12);
  v13 = a3[8];
  v14 = (char *)a1 + v13;
  v15 = (char *)a2 + v13;
  *(_DWORD *)v14 = *(_DWORD *)((char *)a2 + v13);
  *((_QWORD *)v14 + 1) = *(_QWORD *)((char *)a2 + v13 + 8);
  v14[16] = *((_BYTE *)a2 + v13 + 16);
  v16 = type metadata accessor for CoreChartTrendViewModel(0);
  v17 = *(int *)(v16 + 28);
  v18 = &v14[v17];
  v19 = &v15[v17];
  v20 = sub_1BCAB4BD8();
  v29 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 32);
  v29(v18, v19, v20);
  v21 = (int *)type metadata accessor for CoreChartTrendLineViewModel(0);
  *(_QWORD *)&v18[v21[5]] = *(_QWORD *)&v19[v21[5]];
  *(_OWORD *)&v18[v21[6]] = *(_OWORD *)&v19[v21[6]];
  *(_OWORD *)&v18[v21[7]] = *(_OWORD *)&v19[v21[7]];
  v30 = v16;
  v22 = *(int *)(v16 + 32);
  v23 = &v14[v22];
  v24 = &v15[v22];
  v25 = *((_QWORD *)v21 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v25 + 48))(&v15[v22], 1, v21))
  {
    sub_1BCA0D60C(0);
    memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
  }
  else
  {
    v29(v23, v24, v20);
    *(_QWORD *)&v23[v21[5]] = *(_QWORD *)&v24[v21[5]];
    *(_OWORD *)&v23[v21[6]] = *(_OWORD *)&v24[v21[6]];
    *(_OWORD *)&v23[v21[7]] = *(_OWORD *)&v24[v21[7]];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v25 + 56))(v23, 0, 1, v21);
  }
  *(_QWORD *)&v14[*(int *)(v30 + 36)] = *(_QWORD *)&v15[*(int *)(v30 + 36)];
  v27 = a3[10];
  *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
  *(_QWORD *)((char *)a1 + v27) = *(_QWORD *)((char *)a2 + v27);
  return a1;
}

