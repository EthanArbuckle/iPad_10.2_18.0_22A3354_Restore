uint64_t sub_2263A8090(float32x2_t *a1, float32x2_t *a2)
{
  int32x2_t v2;
  char v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = vcgt_f32(*a2, *a1);
  if ((v2.i8[0] & 1) != 0)
  {
    v3 = 1;
  }
  else
  {
    if ((vcgt_f32(*a1, *a2).u8[0] & 1) == 0)
    {
      v4 = (uint64_t *)a1[1];
      v5 = (uint64_t *)a2[1];
      if (v4 != v5)
      {
        v6 = v4[1];
        v7 = *v5;
        v8 = v5[1];
        if (COERCE_FLOAT(*v4) == *(float *)&v6 && *(float *)&v7 != *(float *)&v8)
        {
          v3 = a1[2].i8[0] != 0;
          return v3 & 1;
        }
        if (COERCE_FLOAT(*v4) != *(float *)&v6 && *(float *)&v7 == *(float *)&v8)
        {
          v3 = a2[2].i8[0] == 0;
          return v3 & 1;
        }
      }
      v3 = v2.i8[4];
      return v3 & 1;
    }
    v3 = 0;
  }
  return v3 & 1;
}

uint64_t sub_2263A811C(float32x2_t *a1, float32x2_t *a2, int8x16_t a3)
{
  char v3;
  float32x2_t v4;
  float32x2_t v5;
  float32x2_t v6;
  int32x2_t v9;
  float v10;
  float v17;
  int32x2_t v18;
  int32x2_t v19;
  int8x8_t v20;
  int32x2_t v21;
  int32x2_t v22;
  int32x2_t v23;
  int32x2_t v24;
  int32x2_t v25;
  int32x2_t v26;
  float32x2_t v27;
  float32x2_t v28;
  float32x2_t v29;
  float32x2_t v30;
  float32x2_t v31;
  float32x2_t v32;
  int32x2_t v33;
  int32x2_t v34;
  int32x2_t v35;
  float32x2_t v36;
  float32x2_t v37;
  float32x2_t v38;
  float32x2_t v39;
  float32x2_t v40;
  float32x4_t v41;
  int32x2_t v42;

  v3 = 0;
  if (a1 && a2)
  {
    *(float32x2_t *)a3.i8 = *a1;
    v4 = a2[1];
    if ((vcgt_f32(*a1, v4).u8[0] & 1) != 0 || (v5 = *a2, v6 = a1[1], (vcgt_f32(*a2, v6).u8[0] & 1) != 0))
    {
LABEL_5:
      v3 = 0;
      return v3 & 1;
    }
    _D4 = (int32x2_t)vsub_f32(*(float32x2_t *)a3.i8, v6);
    v9 = (int32x2_t)vsub_f32(v5, v4);
    v10 = vmlas_n_f32((float)-*(float *)&_D4.i32[1] * *(float *)v9.i32, *(float *)&v9.i32[1], *(float *)_D4.i32);
    if ((float)(v10 * v10) < 0.000001)
      v10 = 0.0;
    if (v10 == 0.0)
    {
      _D5 = vsub_f32(v5, v6);
      __asm { FMLA            S6, S4, V5.S[1] }
      if ((float)(_S6 * _S6) >= 0.000001)
        v17 = _S6;
      else
        v17 = 0.0;
      if (v17 != 0.0)
        goto LABEL_5;
      v18 = (int32x2_t)vmul_f32(vsub_f32(v5, *(float32x2_t *)a3.i8), _D5);
      v19 = (int32x2_t)vmul_f32(vsub_f32(v4, *(float32x2_t *)a3.i8), vsub_f32(v4, v6));
      v20 = vmvn_s8((int8x8_t)vcltz_f32(vadd_f32((float32x2_t)vzip1_s32(v19, v18), (float32x2_t)vzip2_s32(v19, v18))));
      if ((v20.i32[1] & v20.i32[0] & 1) != 0)
        goto LABEL_5;
    }
    else
    {
      v21 = (int32x2_t)vsub_f32(v5, *(float32x2_t *)a3.i8);
      v22 = (int32x2_t)vsub_f32(v6, *(float32x2_t *)a3.i8);
      v23 = (int32x2_t)vsub_f32(v4, *(float32x2_t *)a3.i8);
      v24 = (int32x2_t)vsub_f32(*(float32x2_t *)a3.i8, v5);
      v25 = (int32x2_t)vsub_f32(v4, v5);
      v26 = (int32x2_t)vsub_f32(v6, v5);
      v27 = (float32x2_t)vzip1_s32(v22, v25);
      v28 = (float32x2_t)vzip2_s32(v22, v25);
      v29 = vmla_f32(vmul_f32(v27, vneg_f32((float32x2_t)vzip2_s32(v21, v24))), v28, (float32x2_t)vzip1_s32(v21, v24));
      v30 = (float32x2_t)vdup_n_s32(0x358637BDu);
      v31 = vmla_f32(vmul_f32(v27, vneg_f32((float32x2_t)vzip2_s32(v23, v26))), v28, (float32x2_t)vzip1_s32(v23, v26));
      v32 = vmul_f32((float32x2_t)vbic_s8((int8x8_t)v29, (int8x8_t)vcgt_f32(v30, vmul_f32(v29, v29))), (float32x2_t)vbic_s8((int8x8_t)v31, (int8x8_t)vcgt_f32(v30, vmul_f32(v31, v31))));
      if (v32.f32[0] >= 0.0 || v32.f32[1] >= 0.0)
      {
        v33 = (int32x2_t)vsub_f32(v5, v6);
        v34 = (int32x2_t)vsub_f32(v4, v6);
        *(float32x2_t *)a3.i8 = vsub_f32(*(float32x2_t *)a3.i8, v4);
        v35 = (int32x2_t)vsub_f32(v6, v4);
        v36 = (float32x2_t)vzip1_s32(v9, _D4);
        v37 = vmul_f32(v36, vneg_f32((float32x2_t)vzip2_s32(*(int32x2_t *)a3.i8, v33)));
        *(int32x2_t *)a3.i8 = vzip1_s32(*(int32x2_t *)a3.i8, v33);
        v38 = (float32x2_t)vzip2_s32(v9, _D4);
        v39 = vmla_f32(v37, v38, *(float32x2_t *)a3.i8);
        *(int8x8_t *)a3.i8 = vbic_s8((int8x8_t)v39, (int8x8_t)vcgt_f32(v30, vmul_f32(v39, v39)));
        v40 = vmla_f32(vmul_f32(v36, vneg_f32((float32x2_t)vzip2_s32(v35, v34))), v38, (float32x2_t)vzip1_s32(v35, v34));
        *(float32x2_t *)a3.i8 = vmul_f32(*(float32x2_t *)a3.i8, (float32x2_t)vbic_s8((int8x8_t)v40, (int8x8_t)vcgt_f32(v30, vmul_f32(v40, v40))));
        v41 = (float32x4_t)vextq_s8(a3, a3, 4uLL);
        *(float32x2_t *)&v41.i32[1] = v32;
        if ((vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_f32(v41))) & 1) != 0)
        {
          v42 = vcltz_f32(*(float32x2_t *)a3.i8);
          v3 = (v32.f32[0] < 0.0 || v32.f32[1] < 0.0) | v42.i8[4] | v42.i8[0];
          return v3 & 1;
        }
        goto LABEL_5;
      }
    }
    v3 = 1;
  }
  return v3 & 1;
}

uint64_t sub_2263A8328(uint64_t *a1, __n128 a2)
{
  uint64_t v2;
  float32x2_t *v4;
  unint64_t v5;
  float32x2_t *v6;
  float32x2_t v7;
  float32x2_t v8;
  float32x2_t *v9;
  float32x2_t v10;
  float32x2_t *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  float32x2_t *v16;
  char *v17;
  char *v18;
  float32x2_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  float32x2_t *v24;
  char *v25;
  char *v26;
  char *v27;
  float32x2_t *v28;
  unint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  uint64_t *v35;
  float32x2_t *v36;
  float32x2_t *v37;
  int8x16_t v38;
  float32x2_t *v39;
  float32x2_t *v40;
  int8x16_t v41;
  int8x16_t v42;
  uint64_t v43;
  uint64_t (*v45[3])(__int128 *, __int128 *);
  void *__p;
  float32x2_t *v47;
  float32x2_t *v48;

  __p = 0;
  v47 = 0;
  v48 = 0;
  v2 = *a1;
  if (a1[1] == *a1)
  {
    v4 = 0;
    v28 = 0;
  }
  else
  {
    v4 = 0;
    v5 = 0;
    do
    {
      v6 = (float32x2_t *)(v2 + 16 * v5);
      v8 = *v6;
      v7 = v6[1];
      a2.n128_u64[0] = (unint64_t)vcgt_f32(*v6, v7);
      if ((a2.n128_u8[0] & 1) != 0 || (vceq_f32(v8, v7).u8[0] & 1) != 0 && (a2.n128_u8[4] & 1) != 0)
      {
        *v6 = v7;
        *(float32x2_t *)(*a1 + 16 * v5 + 8) = v8;
        v2 = *a1;
        v9 = (float32x2_t *)(*a1 + 16 * v5);
        v8 = *v9;
        v7 = v9[1];
        v4 = v47;
      }
      v10 = (float32x2_t)(v2 + 16 * v5);
      if (v4 >= v48)
      {
        v12 = 0xAAAAAAAAAAAAAAABLL * (((char *)v4 - (_BYTE *)__p) >> 3);
        v13 = v12 + 1;
        if (v12 + 1 > 0xAAAAAAAAAAAAAAALL)
          goto LABEL_58;
        if (0x5555555555555556 * (((char *)v48 - (_BYTE *)__p) >> 3) > v13)
          v13 = 0x5555555555555556 * (((char *)v48 - (_BYTE *)__p) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * (((char *)v48 - (_BYTE *)__p) >> 3) >= 0x555555555555555)
          v14 = 0xAAAAAAAAAAAAAAALL;
        else
          v14 = v13;
        if (v14)
          v15 = (char *)sub_2263AAD64((uint64_t)&v48, v14);
        else
          v15 = 0;
        v16 = (float32x2_t *)&v15[24 * v12];
        *v16 = v8;
        v16[1] = v10;
        v16[2].i8[0] = 1;
        *(__int32 *)((char *)v16[2].i32 + 1) = 0;
        v16[2].i32[1] = 0;
        v18 = (char *)__p;
        v17 = (char *)v47;
        v19 = v16;
        if (v47 != __p)
        {
          do
          {
            a2 = *(__n128 *)(v17 - 24);
            v19[-1] = *(float32x2_t *)(v17 - 8);
            *(__n128 *)v19[-3].f32 = a2;
            v19 -= 3;
            v17 -= 24;
          }
          while (v17 != v18);
          v17 = (char *)__p;
        }
        v11 = v16 + 3;
        __p = v19;
        v47 = v16 + 3;
        v48 = (float32x2_t *)&v15[24 * v14];
        if (v17)
          operator delete(v17);
      }
      else
      {
        *v4 = v8;
        v4[1] = v10;
        v4[2].i8[0] = 1;
        *(__int32 *)((char *)v4[2].i32 + 1) = 0;
        v11 = v4 + 3;
        v4[2].i32[1] = 0;
      }
      v47 = v11;
      if (v11 >= v48)
      {
        v20 = 0xAAAAAAAAAAAAAAABLL * (((char *)v11 - (_BYTE *)__p) >> 3);
        v21 = v20 + 1;
        if (v20 + 1 > 0xAAAAAAAAAAAAAAALL)
LABEL_58:
          sub_2263AACDC();
        if (0x5555555555555556 * (((char *)v48 - (_BYTE *)__p) >> 3) > v21)
          v21 = 0x5555555555555556 * (((char *)v48 - (_BYTE *)__p) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * (((char *)v48 - (_BYTE *)__p) >> 3) >= 0x555555555555555)
          v22 = 0xAAAAAAAAAAAAAAALL;
        else
          v22 = v21;
        if (v22)
          v23 = (char *)sub_2263AAD64((uint64_t)&v48, v22);
        else
          v23 = 0;
        v24 = (float32x2_t *)&v23[8 * (((char *)v11 - (_BYTE *)__p) >> 3)];
        *v24 = v7;
        v24[1] = v10;
        v24[2] = 0;
        v26 = (char *)__p;
        v25 = (char *)v47;
        v27 = &v23[24 * v20];
        if (v47 != __p)
        {
          do
          {
            a2 = *(__n128 *)(v25 - 24);
            *((_QWORD *)v27 - 1) = *((_QWORD *)v25 - 1);
            *(__n128 *)(v27 - 24) = a2;
            v27 -= 24;
            v25 -= 24;
          }
          while (v25 != v26);
          v25 = (char *)__p;
        }
        v4 = v24 + 3;
        __p = v27;
        v47 = v24 + 3;
        v48 = (float32x2_t *)&v23[24 * v22];
        if (v25)
          operator delete(v25);
      }
      else
      {
        *v11 = v7;
        v4 = v11 + 3;
        v11[1] = v10;
        v11[2] = 0;
      }
      v47 = v4;
      ++v5;
      v2 = *a1;
    }
    while (v5 < (a1[1] - *a1) >> 4);
    v28 = (float32x2_t *)__p;
  }
  v29 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (v4 - v28));
  v45[0] = (uint64_t (*)(__int128 *, __int128 *))sub_2263A8090;
  if (v4 == v28)
    v30 = 0;
  else
    v30 = v29;
  sub_2263AADD0((uint64_t)v28, (__int128 *)v4, v45, v30, 1, a2);
  memset(v45, 0, sizeof(v45));
  sub_2263E5274(v45);
  v31 = (char *)__p;
  if (v47 == __p)
  {
LABEL_53:
    v43 = 0;
    goto LABEL_55;
  }
  v32 = 0;
  v33 = 0;
  while (1)
  {
    v34 = &v31[v32];
    v35 = (uint64_t *)*((_QWORD *)v34 + 1);
    if ((v34[16] & 1) != 0)
      break;
    v36 = (float32x2_t *)sub_2263E5F28((uint64_t)v45, v35);
    v37 = (float32x2_t *)sub_2263E6028((uint64_t)v45, v35);
    if ((sub_2263A811C(v37, v36, v38) & 1) != 0)
      goto LABEL_54;
    sub_2263E5AA4((uint64_t)v45, v35);
LABEL_52:
    ++v33;
    v31 = (char *)__p;
    v32 += 24;
    if (0xAAAAAAAAAAAAAAABLL * (((char *)v47 - (_BYTE *)__p) >> 3) <= v33)
      goto LABEL_53;
  }
  sub_2263E54A0((uint64_t)v45, (uint64_t)v35);
  v39 = (float32x2_t *)sub_2263E5F28((uint64_t)v45, v35);
  v40 = (float32x2_t *)sub_2263E6028((uint64_t)v45, v35);
  if ((sub_2263A811C(v40, (float32x2_t *)v35, v41) & 1) == 0 && (sub_2263A811C(v39, (float32x2_t *)v35, v42) & 1) == 0)
    goto LABEL_52;
LABEL_54:
  v43 = 1;
LABEL_55:
  sub_2263E549C(v45);
  if (__p)
  {
    v47 = (float32x2_t *)__p;
    operator delete(__p);
  }
  return v43;
}

void sub_2263A8738(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2263A8780(__n128 a1, float a2)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  v2 = vcvtms_u32_f32(a1.n128_f32[0] / a2);
  v3 = vcvtms_u32_f32(a1.n128_f32[1] / a2);
  v4 = vcvtms_u32_f32(a1.n128_f32[2] / a2);
  v5 = (((unint64_t)(v2 & 0x1FFFFF) << 16) | ((unint64_t)(v2 & 0x1FFFFF) << 32)) & 0x1F0000FF0000FFLL | v2;
  v6 = (v5 | (v5 << 8)) & 0x1003003003003003 | (16 * ((v5 | (v5 << 8)) & 0x100F00F00F00F00FLL)) & 0x10C30C30C30C30C3;
  v7 = (((unint64_t)(v3 & 0x1FFFFF) << 16) | ((unint64_t)(v3 & 0x1FFFFF) << 32)) & 0x1F0000FF0000FFLL | v3;
  v8 = (v7 | (v7 << 8)) & 0x1003003003003003 | (16 * ((v7 | (v7 << 8)) & 0x100F00F00F00F00FLL)) & 0x10C30C30C30C30C3;
  v9 = ((8 * v8) | (2 * v8)) & 0x2492492492492492 | (v6 | (4 * v6)) & 0x1249249249249249;
  v10 = (((unint64_t)(v4 & 0x1FFFFF) << 16) | ((unint64_t)(v4 & 0x1FFFFF) << 32)) & 0x1F0000FF0000FFLL | v4;
  v11 = (v10 | (v10 << 8)) & 0x1003003003003003 | (16 * ((v10 | (v10 << 8)) & 0x100F00F00F00F00FLL)) & 0x10C30C30C30C30C3;
  return v9 | ((16 * v11) | (4 * v11)) & 0x4924924924924924;
}

uint64_t sub_2263A8894(float32x4_t **a1, __n128 a2)
{
  float32x4_t *v2;
  float32x4_t *v3;
  float32x4_t v4;
  unint64_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  int32x4_t v10;
  float32x2_t v11;
  float32x2_t v12;
  float32x4_t v13;
  float32x4_t v14;
  int32x4_t v15;
  float32x4_t v16;
  int32x4_t v17;
  __n128 v18;
  char *v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  unint64_t v28;
  __n128 v29;
  float32x2_t *v30;
  __n128 v31;
  _QWORD *v32;
  char *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  __n128 *v42;
  __n128 *v43;
  __n128 *v44;
  __n128 *v45;
  uint64_t v46;
  float32x4_t v48;
  float32x4_t v49;
  void *__p;
  __n128 *v51;
  char *v52;
  unint64_t v53;
  _OWORD v54[2];
  uint64_t v55;
  void *v56;
  char *v57;
  char *v58;

  v2 = *a1;
  v3 = a1[1];
  v4 = **a1;
  v55 = 1065353216;
  v56 = 0;
  v57 = 0;
  v58 = 0;
  memset(v54, 0, sizeof(v54));
  if (v3 == v2)
  {
    __p = 0;
    v51 = 0;
    v52 = 0;
  }
  else
  {
    v6 = 0;
    v7 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)a2, (int32x4_t)a2), (int8x16_t)a2, 0xCuLL);
    v8 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v4, (int32x4_t)v4), (int8x16_t)v4, 0xCuLL), vnegq_f32((float32x4_t)a2)), v4, v7);
    v9 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v8, (int32x4_t)v8), (int8x16_t)v8, 0xCuLL);
    v10 = (int32x4_t)vmulq_f32(v8, v8);
    v10.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v10.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v10, 2), *(float32x2_t *)v10.i8)).u32[0];
    v11 = vrsqrte_f32((float32x2_t)v10.u32[0]);
    v12 = vmul_f32(v11, vrsqrts_f32((float32x2_t)v10.u32[0], vmul_f32(v11, v11)));
    v49 = vmulq_n_f32(v9, vmul_f32(v12, vrsqrts_f32((float32x2_t)v10.u32[0], vmul_f32(v12, v12))).f32[0]);
    v13 = vmlaq_f32(vmulq_f32(v7, vnegq_f32(v49)), (float32x4_t)a2, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v49, (int32x4_t)v49), (int8x16_t)v49, 0xCuLL));
    v14 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v13, (int32x4_t)v13), (int8x16_t)v13, 0xCuLL);
    v15 = (int32x4_t)vmulq_f32(v13, v13);
    v15.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v15.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v15, 2), *(float32x2_t *)v15.i8)).u32[0];
    *(float32x2_t *)v13.f32 = vrsqrte_f32((float32x2_t)v15.u32[0]);
    *(float32x2_t *)v13.f32 = vmul_f32(*(float32x2_t *)v13.f32, vrsqrts_f32((float32x2_t)v15.u32[0], vmul_f32(*(float32x2_t *)v13.f32, *(float32x2_t *)v13.f32)));
    v48 = vmulq_n_f32(v14, vmul_f32(*(float32x2_t *)v13.f32, vrsqrts_f32((float32x2_t)v15.u32[0], vmul_f32(*(float32x2_t *)v13.f32, *(float32x2_t *)v13.f32))).f32[0]);
    do
    {
      v16 = v2[v6];
      v17 = (int32x4_t)vmulq_f32(v49, v16);
      v18 = (__n128)vmulq_f32(v48, v16);
      v18.n128_u64[0] = (unint64_t)vzip1_s32((int32x2_t)vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v17, 2), vadd_f32(*(float32x2_t *)v17.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v17.i8, 1))), (int32x2_t)vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32((int32x4_t)v18, 2), vadd_f32((float32x2_t)v18.n128_u64[0], (float32x2_t)vdup_lane_s32((int32x2_t)v18.n128_u64[0], 1))));
      v53 = v18.n128_u64[0];
      v19 = v57;
      if (v57 >= v58)
      {
        v21 = (v57 - (_BYTE *)v56) >> 3;
        if ((unint64_t)(v21 + 1) >> 61)
          sub_2263AACDC();
        v22 = (v58 - (_BYTE *)v56) >> 2;
        if (v22 <= v21 + 1)
          v22 = v21 + 1;
        if ((unint64_t)(v58 - (_BYTE *)v56) >= 0x7FFFFFFFFFFFFFF8)
          v23 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v23 = v22;
        if (v23)
        {
          v24 = (char *)sub_2263ABFD4((uint64_t)&v58, v23);
          v18.n128_u64[0] = v53;
        }
        else
        {
          v24 = 0;
        }
        v25 = &v24[8 * v21];
        *(_QWORD *)v25 = v18.n128_u64[0];
        v20 = v25 + 8;
        v27 = (char *)v56;
        v26 = v57;
        if (v57 != v56)
        {
          do
          {
            v28 = *((_QWORD *)v26 - 1);
            v26 -= 8;
            v18.n128_u64[0] = v28;
            *((_QWORD *)v25 - 1) = v28;
            v25 -= 8;
          }
          while (v26 != v27);
          v26 = (char *)v56;
        }
        v56 = v25;
        v57 = v20;
        v58 = &v24[8 * v23];
        if (v26)
          operator delete(v26);
      }
      else
      {
        *(_QWORD *)v57 = v18.n128_u64[0];
        v20 = v19 + 8;
      }
      v57 = v20;
      if (sub_2263AC008(v54, &v53, v18))
      {
        __p = &v53;
        v30 = sub_2263AC10C((uint64_t)v54, &v53, v29, (uint64_t)&unk_22640BC0C, (float32x2_t **)&__p);
        ++v30[3].i32[0];
      }
      else
      {
        __p = &v53;
        sub_2263AC10C((uint64_t)v54, &v53, v29, (uint64_t)&unk_22640BC0C, (float32x2_t **)&__p)[3].i32[0] = 0;
      }
      __p = &v53;
      if (sub_2263AC10C((uint64_t)v54, &v53, v31, (uint64_t)&unk_22640BC0C, (float32x2_t **)&__p)[3].i32[0] >= 3)
      {
        v46 = 0;
        goto LABEL_48;
      }
      ++v6;
      v2 = *a1;
    }
    while (v6 < a1[1] - *a1);
    v32 = v56;
    __p = 0;
    v51 = 0;
    v52 = 0;
    if (v57 != v56)
    {
      v33 = 0;
      v34 = 0;
      v35 = (v57 - (_BYTE *)v56) >> 3;
      do
      {
        v36 = v32[v34++];
        v37 = v32[v34 % v35];
        if (v33 >= v52)
        {
          v38 = (v33 - (_BYTE *)__p) >> 4;
          if ((unint64_t)(v38 + 1) >> 60)
            sub_2263AACDC();
          v39 = (v52 - (_BYTE *)__p) >> 3;
          if (v39 <= v38 + 1)
            v39 = v38 + 1;
          if ((unint64_t)(v52 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFF0)
            v40 = 0xFFFFFFFFFFFFFFFLL;
          else
            v40 = v39;
          if (v40)
            v41 = (char *)sub_2263AC59C((uint64_t)&v52, v40);
          else
            v41 = 0;
          v42 = (__n128 *)&v41[16 * v38];
          v42->n128_u64[0] = v36;
          v42->n128_u64[1] = v37;
          v44 = (__n128 *)__p;
          v43 = v51;
          v45 = v42;
          if (v51 != __p)
          {
            do
            {
              a2 = v43[-1];
              v45[-1] = a2;
              --v45;
              --v43;
            }
            while (v43 != v44);
            v43 = (__n128 *)__p;
          }
          v33 = (char *)&v42[1];
          __p = v45;
          v51 = v42 + 1;
          v52 = &v41[16 * v40];
          if (v43)
            operator delete(v43);
        }
        else
        {
          *(_QWORD *)v33 = v36;
          *((_QWORD *)v33 + 1) = v37;
          v33 += 16;
        }
        v51 = (__n128 *)v33;
        v32 = v56;
        v35 = (v57 - (_BYTE *)v56) >> 3;
      }
      while (v35 > v34);
    }
  }
  v46 = sub_2263A8328((uint64_t *)&__p, a2) ^ 1;
  if (__p)
  {
    v51 = (__n128 *)__p;
    operator delete(__p);
  }
LABEL_48:
  sub_2263ABF8C((uint64_t)v54);
  if (v56)
  {
    v57 = (char *)v56;
    operator delete(v56);
  }
  return v46;
}

void sub_2263A8CBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24)
{
  if (__p)
    operator delete(__p);
  sub_2263ABF8C((uint64_t)&a17);
  if (a23)
  {
    a24 = (uint64_t)a23;
    operator delete(a23);
  }
  _Unwind_Resume(a1);
}

BOOL sub_2263A8D08(float32x4_t **a1, float32x4_t a2)
{
  _BOOL8 result;
  float32x4_t *v4;
  float32x4_t v5;
  unint64_t v6;
  unint64_t v7;
  float v9;
  float v16;
  float v17;
  _BOOL4 v18;
  _BOOL4 v19;

  result = 0;
  v4 = *a1;
  v5 = v4[2];
  v6 = vsubq_f32(a2, v5).u64[0];
  v7 = vsubq_f32(v4[1], v5).u64[0];
  _S5 = HIDWORD(v6);
  v9 = vmlas_n_f32((float)-*((float *)&v7 + 1) * *(float *)&v6, *((float *)&v6 + 1), *(float *)&v7);
  if (fabsf(v9) >= 0.000001)
  {
    _D6 = vsubq_f32(*v4, v5).u64[0];
    __asm { FMLS            S3, S5, V6.S[0] }
    if (fabsf(_S3) >= 0.000001)
    {
      v16 = vmlas_n_f32((float)-*((float *)&v7 + 1) * *(float *)&_D6, *((float *)&_D6 + 1), *(float *)&v7);
      v17 = v9 + _S3;
      if (vabds_f32(v9 + _S3, v16) >= 0.000001)
      {
        if (v16 >= 0.0)
        {
          v19 = v9 >= 0.0;
          if (_S3 < 0.0)
            v19 = 0;
          return v17 <= v16 && v19;
        }
        else
        {
          v18 = v9 <= 0.0;
          if (_S3 > 0.0)
            v18 = 0;
          return v17 >= v16 && v18;
        }
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

BOOL sub_2263A8DD4(uint64_t *a1, uint64_t a2, _QWORD *a3, float32x4_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v13;

  if (*(_QWORD *)(a2 + 8) == *a1)
    v4 = a2;
  else
    v4 = *a1;
  v5 = *(int *)(*(_QWORD *)v4 + 16);
  v6 = *(_QWORD *)(*a1 + 8);
  if (v6 == a2)
    v6 = *(_QWORD *)(a2 + 8);
  v7 = *(float32x4_t *)(*a3 + 16 * *(int *)(*a1 + 16));
  v8 = vsubq_f32(v7, *(float32x4_t *)(*a3 + 16 * v5));
  v9 = vsubq_f32(*(float32x4_t *)(*a3 + 16 * *(int *)(v6 + 16)), v7);
  v10 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v9, (int32x4_t)v9), (int8x16_t)v9, 0xCuLL), vnegq_f32(v8)), v9, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v8, (int32x4_t)v8), (int8x16_t)v8, 0xCuLL));
  v11 = vmulq_f32(v10, v10);
  if (vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v11.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v11, 2), v11)).f32[0] < 1.0e-12)return 1;
  v13 = vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v10, (int32x4_t)v10), (int8x16_t)v10, 0xCuLL), a4);
  return vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 2), vaddq_f32(v13, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v13.f32, 1))).f32[0] < 0.0;
}

uint64_t sub_2263A8E88(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  int v11;
  BOOL v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  __int128 v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  char *v38;
  __int128 v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  char *v48;
  char *v49;
  __int128 v50;
  _QWORD *v51;
  int v52;
  BOOL v53;
  BOOL v54;
  _QWORD *v55;
  _QWORD *v56;
  float32x4_t v58;
  void *v59;
  void *v60;
  uint64_t v61;
  void *__p;
  char *v63;
  char *v64;

  v6 = *a4;
  v7 = *(int *)(*a4 + 16);
  v9 = a2 + 1;
  v8 = a2[1];
  if (v8)
  {
    v10 = a2 + 1;
    do
    {
      v11 = *(_DWORD *)(v8 + 28);
      v12 = v11 < (int)v7;
      if (v11 >= (int)v7)
        v13 = (uint64_t *)v8;
      else
        v13 = (uint64_t *)(v8 + 8);
      if (!v12)
        v10 = (_QWORD *)v8;
      v8 = *v13;
    }
    while (*v13);
    if (v10 != v9 && (int)v7 >= *((_DWORD *)v10 + 7))
      return 0;
  }
  if (*(_QWORD *)(a1 + 8) == v6)
    v14 = a1;
  else
    v14 = *a4;
  v15 = *(int *)(*(_QWORD *)v14 + 16);
  v16 = *(_QWORD *)(v6 + 8);
  if (v16 == a1)
    v16 = *(_QWORD *)(a1 + 8);
  v17 = *(int *)(v16 + 16);
  __p = 0;
  v63 = 0;
  v64 = 0;
  v18 = *a3;
  v20 = (char *)sub_2263AC59C((uint64_t)&v64, 1uLL);
  v21 = &v20[16 * v19];
  *(_OWORD *)v20 = *(_OWORD *)(v18 + 16 * v15);
  v22 = v20 + 16;
  v24 = (char *)__p;
  v23 = v63;
  v25 = v20;
  if (v63 != __p)
  {
    do
    {
      v26 = *((_OWORD *)v23 - 1);
      v23 -= 16;
      *((_OWORD *)v25 - 1) = v26;
      v25 -= 16;
    }
    while (v23 != v24);
    v23 = (char *)__p;
  }
  __p = v25;
  v63 = v20 + 16;
  v64 = &v20[16 * v19];
  if (v23)
  {
    operator delete(v23);
    v21 = v64;
  }
  v63 = v20 + 16;
  v27 = *a3;
  if (v22 >= v21)
  {
    v29 = (v22 - (_BYTE *)__p) >> 4;
    if ((unint64_t)(v29 + 1) >> 60)
      goto LABEL_73;
    v30 = v21 - (_BYTE *)__p;
    v31 = v30 >> 3;
    if (v30 >> 3 <= (unint64_t)(v29 + 1))
      v31 = v29 + 1;
    if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF0)
      v32 = 0xFFFFFFFFFFFFFFFLL;
    else
      v32 = v31;
    if (v32)
      v33 = (char *)sub_2263AC59C((uint64_t)&v64, v32);
    else
      v33 = 0;
    v35 = &v33[16 * v29];
    v36 = &v33[16 * v32];
    *(_OWORD *)v35 = *(_OWORD *)(v27 + 16 * v7);
    v28 = v35 + 16;
    v38 = (char *)__p;
    v37 = v63;
    if (v63 != __p)
    {
      do
      {
        v39 = *((_OWORD *)v37 - 1);
        v37 -= 16;
        *((_OWORD *)v35 - 1) = v39;
        v35 -= 16;
      }
      while (v37 != v38);
      v37 = (char *)__p;
    }
    __p = v35;
    v63 = v28;
    v64 = v36;
    if (v37)
      operator delete(v37);
  }
  else
  {
    *((_OWORD *)v20 + 1) = *(_OWORD *)(v27 + 16 * v7);
    v28 = v20 + 32;
  }
  v63 = v28;
  v40 = *a3;
  if (v28 >= v64)
  {
    v42 = (v28 - (_BYTE *)__p) >> 4;
    if (!((unint64_t)(v42 + 1) >> 60))
    {
      v43 = (v64 - (_BYTE *)__p) >> 3;
      if (v43 <= v42 + 1)
        v43 = v42 + 1;
      if ((unint64_t)(v64 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFF0)
        v44 = 0xFFFFFFFFFFFFFFFLL;
      else
        v44 = v43;
      if (v44)
        v45 = (char *)sub_2263AC59C((uint64_t)&v64, v44);
      else
        v45 = 0;
      v46 = &v45[16 * v42];
      v47 = &v45[16 * v44];
      *(_OWORD *)v46 = *(_OWORD *)(v40 + 16 * v17);
      v41 = v46 + 16;
      v49 = (char *)__p;
      v48 = v63;
      if (v63 != __p)
      {
        do
        {
          v50 = *((_OWORD *)v48 - 1);
          v48 -= 16;
          *((_OWORD *)v46 - 1) = v50;
          v46 -= 16;
        }
        while (v48 != v49);
        v48 = (char *)__p;
      }
      __p = v46;
      v63 = v41;
      v64 = v47;
      if (v48)
        operator delete(v48);
      goto LABEL_54;
    }
LABEL_73:
    sub_2263AACDC();
  }
  *(_OWORD *)v28 = *(_OWORD *)(v40 + 16 * v17);
  v41 = v28 + 16;
LABEL_54:
  v63 = v41;
  v51 = (_QWORD *)*a2;
  if ((_QWORD *)*a2 == v9)
  {
LABEL_68:
    v34 = 1;
  }
  else
  {
    while (1)
    {
      v52 = *((_DWORD *)v51 + 7);
      v53 = v52 == (_DWORD)v15 || v52 == (_DWORD)v17;
      if (!v53)
      {
        v58 = *(float32x4_t *)(*a3 + 16 * v52);
        v60 = 0;
        v61 = 0;
        v59 = 0;
        sub_2263AC5D0(&v59, __p, (uint64_t)v63, (v63 - (_BYTE *)__p) >> 4);
        v54 = sub_2263A8D08((float32x4_t **)&v59, v58);
        if (v59)
        {
          v60 = v59;
          operator delete(v59);
        }
        if (v54)
          break;
      }
      v55 = (_QWORD *)v51[1];
      if (v55)
      {
        do
        {
          v56 = v55;
          v55 = (_QWORD *)*v55;
        }
        while (v55);
      }
      else
      {
        do
        {
          v56 = (_QWORD *)v51[2];
          v53 = *v56 == (_QWORD)v51;
          v51 = v56;
        }
        while (!v53);
      }
      v51 = v56;
      if (v56 == v9)
        goto LABEL_68;
    }
    v34 = 0;
  }
  if (__p)
  {
    v63 = (char *)__p;
    operator delete(__p);
  }
  return v34;
}

void sub_2263A91E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2263A9204(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this, _QWORD *a6, pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *a7, _QWORD *a8, float32x4_t a9, float32x4_t a10, float32x4_t a11, double a12, double a13, float32x4_t a14)
{
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int *v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  float32x4_t v54;
  uint64_t v55;
  float32x4_t *v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  char *v61;
  float32x4_t *v62;
  float32x4_t *v63;
  float32x4_t *v64;
  float32x4_t v65;
  _DWORD *v66;
  _QWORD *v67;
  float32x4_t *v68;
  unint64_t v69;
  uint64_t v70;
  float32x4_t v71;
  float32x4_t *v72;
  uint64_t v73;
  float32x4_t v74;
  uint64_t v75;
  float32x4_t v76;
  float32x4_t v77;
  uint64_t v78;
  float32x4_t v79;
  float32x4_t v80;
  int32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  uint64_t v86;
  uint64_t v87;
  float32x4_t v88;
  float v89;
  unint64_t v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  float v96;
  float32x2_t v97;
  float32x2_t v98;
  uint64_t v99;
  float32x4_t v100;
  int32x4_t v101;
  float32x2_t v102;
  float32x2_t v103;
  float32x4_t v104;
  int32x4_t v105;
  float32x4_t v106;
  uint64_t v107;
  float32x4_t v108;
  int32x4_t v109;
  int32x4_t v110;
  float32x2_t v111;
  int32x4_t v112;
  uint64_t v113;
  void **v114;
  int32x4_t v115;
  int32x4_t v116;
  int32x4_t v117;
  int32x4_t v118;
  unsigned __int8 v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  int v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  int v133;
  void **v134;
  int v135;
  void **v136;
  void **v137;
  int v138;
  int v139;
  int v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  void **v145;
  _QWORD *v146;
  _QWORD *v147;
  int v148;
  _QWORD **v149;
  _QWORD *v150;
  _QWORD *v151;
  _QWORD **v152;
  int v153;
  unint64_t v154;
  uint64_t *v155;
  uint64_t v156;
  int *v157;
  int v158;
  _QWORD **v159;
  _QWORD *v160;
  _QWORD **v161;
  int v162;
  _QWORD *v163;
  void ***v164;
  void **v165;
  void **v166;
  int v167;
  _QWORD *v168;
  void **v169;
  void **v170;
  void **v171;
  int v172;
  int v173;
  int v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  void **v179;
  _QWORD *v180;
  void **v181;
  __n128 v184;
  float32x4_t v185;
  float32x4_t v186;
  void **v187;
  void **v188;
  uint64_t *v189;
  _QWORD *v190;
  uint64_t v191;
  _QWORD *v192;
  void **v193;
  unint64_t v194;
  float32x4_t *v195;
  float32x4_t *v196;
  float32x4_t *v197;

  if (a2 >= 3)
  {
    if (a2 != 4)
    {
      if (a2 == 3)
      {
        v22 = a4 + 1;
        v23 = a4 + 2;
        v24 = (*a6)++;
        sub_2263AC688(this);
        *(_DWORD *)(*((_QWORD *)this + 4) + 4 * v24) = a4;
        v25 = (*a6)++;
        sub_2263AC688(this);
        *(_DWORD *)(*((_QWORD *)this + 4) + 4 * v25) = v22;
        v26 = (*a6)++;
        sub_2263AC688(this);
        *(_DWORD *)(*((_QWORD *)this + 4) + 4 * v26) = v23;
        v27 = (*a8)++;
        sub_2263AC688(a7);
        *(_DWORD *)(*((_QWORD *)a7 + 4) + 4 * v27) = 3;
        return;
      }
      v195 = 0;
      v196 = 0;
      v197 = 0;
      sub_2263AA02C((void **)&v195, a2);
      v55 = 0;
      v192 = &v192;
      v193 = (void **)&v192;
      v194 = 0;
      v56 = v196;
      do
      {
        v57 = *(_QWORD *)(a1 + 32) + 12 * *(int *)(*(_QWORD *)(a3 + 32) + 4 * (v55 + a4));
        v54.i64[0] = *(_QWORD *)v57;
        v54.i32[2] = *(_DWORD *)(v57 + 8);
        if (v56 >= v197)
        {
          v185 = v54;
          v58 = v56 - v195;
          if ((unint64_t)(v58 + 1) >> 60)
            sub_2263AACDC();
          v59 = ((char *)v197 - (char *)v195) >> 3;
          if (v59 <= v58 + 1)
            v59 = v58 + 1;
          if ((unint64_t)((char *)v197 - (char *)v195) >= 0x7FFFFFFFFFFFFFF0)
            v60 = 0xFFFFFFFFFFFFFFFLL;
          else
            v60 = v59;
          if (v60)
            v61 = (char *)sub_2263AC59C((uint64_t)&v197, v60);
          else
            v61 = 0;
          v62 = (float32x4_t *)&v61[16 * v58];
          *v62 = v185;
          v56 = v62 + 1;
          v64 = v195;
          v63 = v196;
          if (v196 != v195)
          {
            do
            {
              v65 = v63[-1];
              --v63;
              v62[-1] = v65;
              --v62;
            }
            while (v63 != v64);
            v63 = v195;
          }
          v195 = v62;
          v196 = v56;
          v197 = (float32x4_t *)&v61[16 * v60];
          if (v63)
            operator delete(v63);
        }
        else
        {
          *v56++ = v54;
        }
        v196 = v56;
        v66 = operator new(0x18uLL);
        v66[4] = v55;
        v67 = v192;
        *(_QWORD *)v66 = v192;
        *((_QWORD *)v66 + 1) = &v192;
        v67[1] = v66;
        v192 = v66;
        ++v194;
        ++v55;
      }
      while (v55 != a2);
      v68 = v195;
      v69 = v56 - v195;
      v54.f32[0] = (float)v69;
      if (v56 == v195)
      {
        v54.f32[0] = (float)(1.0 / v54.f32[0]) * 0.0;
        v76 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v54.f32, 0);
        v77 = 0uLL;
      }
      else
      {
        if (v69 <= 1)
          v70 = 1;
        else
          v70 = v56 - v195;
        v71 = 0uLL;
        v72 = v195;
        v73 = v70;
        do
        {
          v74 = *v72++;
          v71 = vaddq_f32(v71, v74);
          --v73;
        }
        while (v73);
        v75 = 0;
        v76 = vmulq_n_f32(v71, 1.0 / v54.f32[0]);
        v77 = 0uLL;
        do
        {
          if (v69 - 1 == v75)
            v78 = 0;
          else
            v78 = v75 + 1;
          v79 = vsubq_f32(v195[v75], v76);
          v80 = vsubq_f32(v195[v78], v76);
          v81 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v80, (int32x4_t)v80), (int8x16_t)v80, 0xCuLL), vnegq_f32(v79)), v80, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v79, (int32x4_t)v79), (int8x16_t)v79, 0xCuLL));
          v77 = vaddq_f32(v77, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v81, v81), (int8x16_t)v81, 0xCuLL));
          ++v75;
        }
        while (v70 != v75);
      }
      v88 = vmulq_f32(v77, v77);
      v89 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v88, 2), vaddq_f32(v88, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v88.f32, 1))).f32[0];
      if (v89 < 1.0e-12)
      {
        v90 = a2 - 2;
        v91 = a4 + 1;
        do
        {
          v92 = (*a6)++;
          sub_2263AC688(this);
          *(_DWORD *)(*((_QWORD *)this + 4) + 4 * v92) = a4;
          v93 = (*a6)++;
          sub_2263AC688(this);
          *(_DWORD *)(*((_QWORD *)this + 4) + 4 * v93) = v91;
          v94 = (*a6)++;
          sub_2263AC688(this);
          *(_DWORD *)(*((_QWORD *)this + 4) + 4 * v94) = v91 + 1;
          v95 = (*a8)++;
          sub_2263AC688(a7);
          *(_DWORD *)(*((_QWORD *)a7 + 4) + 4 * v95) = 3;
          ++v91;
          --v90;
        }
        while (v90);
LABEL_139:
        sub_2263AAC6C(&v192);
        if (v195)
        {
          v196 = v195;
          operator delete(v195);
        }
        return;
      }
      v96 = v89;
      v97 = vrsqrte_f32((float32x2_t)LODWORD(v89));
      v98 = vmul_f32(v97, vrsqrts_f32((float32x2_t)LODWORD(v96), vmul_f32(v97, v97)));
      v184 = (__n128)vmulq_n_f32(v77, vmul_f32(v98, vrsqrts_f32((float32x2_t)LODWORD(v96), vmul_f32(v98, v98))).f32[0]);
      v186 = v76;
      if (!sub_2263A8894(&v195, v184))
      {
        v127 = a2 - 2;
        v128 = a4 + 1;
        do
        {
          v129 = (*a6)++;
          sub_2263AC688(this);
          *(_DWORD *)(*((_QWORD *)this + 4) + 4 * v129) = a4;
          v130 = (*a6)++;
          sub_2263AC688(this);
          *(_DWORD *)(*((_QWORD *)this + 4) + 4 * v130) = v128;
          v131 = (*a6)++;
          sub_2263AC688(this);
          *(_DWORD *)(*((_QWORD *)this + 4) + 4 * v131) = v128 + 1;
          v132 = (*a8)++;
          sub_2263AC688(a7);
          *(_DWORD *)(*((_QWORD *)a7 + 4) + 4 * v132) = 3;
          ++v128;
          --v127;
        }
        while (v127);
        goto LABEL_139;
      }
      if (v56 != v68)
      {
        v99 = 0;
        v100 = vsubq_f32(*v195, v186);
        v101 = (int32x4_t)vmulq_f32(v100, v100);
        v101.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v101, 2), vadd_f32(*(float32x2_t *)v101.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v101.i8, 1))).u32[0];
        v102 = vrsqrte_f32((float32x2_t)v101.u32[0]);
        v103 = vmul_f32(v102, vrsqrts_f32((float32x2_t)v101.u32[0], vmul_f32(v102, v102)));
        v104 = vmulq_n_f32(v100, vmul_f32(v103, vrsqrts_f32((float32x2_t)v101.u32[0], vmul_f32(v103, v103))).f32[0]);
        v105 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v104, (int32x4_t)v104), (int8x16_t)v104, 0xCuLL), vnegq_f32((float32x4_t)v184)), v104, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v184, (int32x4_t)v184), (int8x16_t)v184, 0xCuLL));
        v106 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v105, v105), (int8x16_t)v105, 0xCuLL);
        if (v69 <= 1)
          v107 = 1;
        else
          v107 = v56 - v68;
        do
        {
          v108 = vsubq_f32(v195[v99], v186);
          v109 = (int32x4_t)vmulq_f32(v104, v108);
          v110 = (int32x4_t)vmulq_f32(v106, v108);
          v111 = vadd_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v109.i8, *(int32x2_t *)v110.i8), (float32x2_t)vzip2_s32(*(int32x2_t *)v109.i8, *(int32x2_t *)v110.i8));
          v112 = vzip2q_s32(v109, v110);
          *(float32x2_t *)v112.i8 = vadd_f32(*(float32x2_t *)v112.i8, v111);
          v112.i32[2] = 0;
          v195[v99++] = (float32x4_t)v112;
        }
        while (v107 != v99);
      }
      v190 = 0;
      v191 = 0;
      v113 = (uint64_t)v193;
      v188 = v193;
      v189 = (uint64_t *)&v190;
      if (v193 == (void **)&v192)
      {
        v114 = (void **)&v192;
      }
      else
      {
        do
        {
          if (sub_2263A8DD4((uint64_t *)&v188, (uint64_t)&v192, &v195, (float32x4_t)xmmword_22640BBF0))
            sub_2263AC940(&v189, (uint64_t *)&v190, (int *)(v113 + 16), (_DWORD *)(v113 + 16));
          v113 = *(_QWORD *)(v113 + 8);
          v188 = (void **)v113;
        }
        while ((_QWORD **)v113 != &v192);
        v114 = v193;
      }
      v187 = (void **)&v192;
      v188 = v114;
      v133 = v194;
      if (v194 >= 3)
      {
        if (v194 != 3)
        {
          v135 = 0;
          while (!sub_2263A8E88((uint64_t)&v192, &v189, (uint64_t *)&v195, (uint64_t *)&v188))
          {
            v154 = v194;
            if (v114[1] == &v192)
              v134 = v193;
            else
              v134 = (void **)v114[1];
            v188 = v134;
            ++v135;
            v114 = v134;
LABEL_117:
            if (v135 > v133 || v154 <= 2)
              goto LABEL_126;
            if (v154 == 3)
              goto LABEL_120;
          }
          v136 = v193;
          if (v193 == v114)
            v137 = (void **)&v192;
          else
            v137 = v114;
          v138 = *((_DWORD *)*v137 + 4);
          v139 = *((_DWORD *)v114 + 4);
          if (v114[1] != &v192)
            v136 = (void **)v114[1];
          v140 = *((_DWORD *)v136 + 4);
          v141 = (*a6)++;
          sub_2263AC688(this);
          *(_DWORD *)(*((_QWORD *)this + 4) + 4 * v141) = v138 + a4;
          v142 = (*a6)++;
          sub_2263AC688(this);
          *(_DWORD *)(*((_QWORD *)this + 4) + 4 * v142) = v139 + a4;
          v143 = (*a6)++;
          sub_2263AC688(this);
          *(_DWORD *)(*((_QWORD *)this + 4) + 4 * v143) = v140 + a4;
          v144 = (*a8)++;
          sub_2263AC688(a7);
          *(_DWORD *)(*((_QWORD *)a7 + 4) + 4 * v144) = 3;
          v146 = *v114;
          v145 = (void **)v114[1];
          if (v145 == (void **)&v192)
            v134 = v193;
          else
            v134 = (void **)v114[1];
          v146[1] = v145;
          *(_QWORD *)v114[1] = v146;
          --v194;
          operator delete(v114);
          v188 = v134;
          v147 = v190;
          if (v134 == (void **)&v192)
          {
            v114 = v134;
            v134 = (void **)&v192;
          }
          else
          {
            if (!v190)
            {
              if (v193 == v134)
                v164 = (void ***)&v192;
              else
                v164 = (void ***)v134;
              v187 = *v164;
              v114 = v134;
LABEL_116:
              v135 = 0;
              v154 = v194;
              v133 = v194;
              goto LABEL_117;
            }
            v148 = *((_DWORD *)v134 + 4);
            v149 = &v190;
            v150 = v190;
            do
            {
              v151 = v150;
              v152 = v149;
              v153 = *((_DWORD *)v150 + 7);
              if (v153 >= v148)
                v149 = (_QWORD **)v150;
              else
                ++v150;
              v150 = (_QWORD *)*v150;
            }
            while (v150);
            if (v149 != &v190)
            {
              if (v153 < v148)
                v151 = v152;
              if (v148 >= *((_DWORD *)v151 + 7))
              {
                v114 = v134;
                if (sub_2263A8DD4((uint64_t *)&v188, (uint64_t)&v192, &v195, (float32x4_t)xmmword_22640BBF0))
                  goto LABEL_95;
                sub_2263ACD5C((uint64_t)&v189, (int *)v134 + 4);
                v134 = v188;
                v147 = v190;
              }
            }
            v114 = v134;
          }
LABEL_95:
          if (v193 == v114)
            v155 = (uint64_t *)&v192;
          else
            v155 = (uint64_t *)v114;
          v156 = *v155;
          v187 = (void **)v156;
          if (v147)
          {
            v157 = (int *)(v156 + 16);
            v158 = *(_DWORD *)(v156 + 16);
            v159 = &v190;
            do
            {
              v160 = v147;
              v161 = v159;
              v162 = *((_DWORD *)v147 + 7);
              if (v162 >= v158)
                v163 = v147;
              else
                v163 = v147 + 1;
              if (v162 >= v158)
                v159 = (_QWORD **)v147;
              v147 = (_QWORD *)*v163;
            }
            while (*v163);
            if (v159 != &v190)
            {
              if (v162 < v158)
                v160 = v161;
              if (v158 >= *((_DWORD *)v160 + 7)
                && !sub_2263A8DD4((uint64_t *)&v187, (uint64_t)&v192, &v195, (float32x4_t)xmmword_22640BBF0))
              {
                sub_2263ACD5C((uint64_t)&v189, v157);
              }
            }
          }
          goto LABEL_116;
        }
        v134 = v114;
LABEL_120:
        v165 = v193;
        if (v193 == v114)
          v166 = (void **)&v192;
        else
          v166 = v114;
        v167 = *((_DWORD *)*v166 + 4);
        if (v134[1] != &v192)
          v165 = (void **)v134[1];
        sub_2263A9F70(this, a6, a7, a8, v167 + a4, *((_DWORD *)v134 + 4) + a4, *((_DWORD *)v165 + 4) + a4);
      }
LABEL_126:
      sub_2263AC900((uint64_t)&v189, v190);
      v168 = 0;
      v190 = 0;
      v191 = 0;
      v189 = (uint64_t *)&v190;
      if (v194 >= 4)
      {
        v169 = v193;
        do
        {
          v170 = v193;
          if (v193 == v169)
            v171 = (void **)&v192;
          else
            v171 = v169;
          v172 = *((_DWORD *)*v171 + 4);
          v173 = *((_DWORD *)v169 + 4);
          if (v169[1] != &v192)
            v170 = (void **)v169[1];
          v174 = *((_DWORD *)v170 + 4);
          v175 = (*a6)++;
          sub_2263AC688(this);
          *(_DWORD *)(*((_QWORD *)this + 4) + 4 * v175) = v172 + a4;
          v176 = (*a6)++;
          sub_2263AC688(this);
          *(_DWORD *)(*((_QWORD *)this + 4) + 4 * v176) = v173 + a4;
          v177 = (*a6)++;
          sub_2263AC688(this);
          *(_DWORD *)(*((_QWORD *)this + 4) + 4 * v177) = v174 + a4;
          v178 = (*a8)++;
          sub_2263AC688(a7);
          *(_DWORD *)(*((_QWORD *)a7 + 4) + 4 * v178) = 3;
          v180 = *v169;
          v179 = (void **)v169[1];
          if (v179 == (void **)&v192)
            v181 = v193;
          else
            v181 = (void **)v169[1];
          v180[1] = v179;
          *(_QWORD *)v169[1] = v180;
          --v194;
          operator delete(v169);
          v169 = v181;
        }
        while (v194 > 2);
        sub_2263AAC6C(&v192);
        v168 = v190;
      }
      sub_2263AC900((uint64_t)&v189, v168);
      goto LABEL_139;
    }
    v28 = (int *)(*(_QWORD *)(a3 + 32) + 4 * a4);
    v29 = a4 + 1;
    v30 = a4 + 2;
    v31 = *(_QWORD *)(a1 + 32);
    v32 = v31 + 12 * *v28;
    a9.i64[0] = *(_QWORD *)v32;
    a9.i32[2] = *(_DWORD *)(v32 + 8);
    v33 = v31 + 12 * v28[1];
    a14.i64[0] = *(_QWORD *)v33;
    a14.i32[2] = *(_DWORD *)(v33 + 8);
    v34 = v31 + 12 * v28[2];
    a10.i64[0] = *(_QWORD *)v34;
    a10.i32[2] = *(_DWORD *)(v34 + 8);
    v35 = v31 + 12 * v28[3];
    a11.i64[0] = *(_QWORD *)v35;
    a11.i32[2] = *(_DWORD *)(v35 + 8);
    v36 = vsubq_f32(a14, a9);
    v37 = vsubq_f32(a11, a10);
    v38 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v36, (int32x4_t)v36), (int8x16_t)v36, 0xCuLL);
    v39 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v37, (int32x4_t)v37), (int8x16_t)v37, 0xCuLL);
    v40 = vnegq_f32(v36);
    v41 = vsubq_f32(a11, a14);
    v42 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v41, (int32x4_t)v41), (int8x16_t)v41, 0xCuLL), v40), v41, v38);
    v43 = vsubq_f32(a10, a14);
    v44 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v43, (int32x4_t)v43), (int8x16_t)v43, 0xCuLL);
    v45 = vmlaq_f32(vmulq_f32(v39, vnegq_f32(v43)), v37, v44);
    v46 = vmulq_f32(v42, v45);
    v47 = a4 + 3;
    if (vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v46.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v46, 2), v46)).f32[0] < 0.0)
    {
      v48 = (*a6)++;
      sub_2263AC688(this);
      *(_DWORD *)(*((_QWORD *)this + 4) + 4 * v48) = a4;
      v49 = (*a6)++;
      sub_2263AC688(this);
      *(_DWORD *)(*((_QWORD *)this + 4) + 4 * v49) = v29;
      v50 = (*a6)++;
      sub_2263AC688(this);
      v51 = *((_QWORD *)this + 4);
LABEL_7:
      *(_DWORD *)(v51 + 4 * v50) = v30;
      v52 = (*a8)++;
      sub_2263AC688(a7);
      *(_DWORD *)(*((_QWORD *)a7 + 4) + 4 * v52) = 3;
      v53 = (*a6)++;
      sub_2263AC688(this);
      *(_DWORD *)(*((_QWORD *)this + 4) + 4 * v53) = a4;
LABEL_58:
      v124 = (*a6)++;
      sub_2263AC688(this);
      *(_DWORD *)(*((_QWORD *)this + 4) + 4 * v124) = v30;
      v125 = (*a6)++;
      sub_2263AC688(this);
      *(_DWORD *)(*((_QWORD *)this + 4) + 4 * v125) = v47;
      v126 = (*a8)++;
      sub_2263AC688(a7);
      *(_DWORD *)(*((_QWORD *)a7 + 4) + 4 * v126) = 3;
      return;
    }
    v82 = vsubq_f32(a10, a9);
    v83 = vmlaq_f32(vmulq_f32(v39, vnegq_f32(v82)), v37, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v82, (int32x4_t)v82), (int8x16_t)v82, 0xCuLL));
    v84 = vmlaq_f32(vmulq_f32(v44, v40), v43, v38);
    v85 = vmulq_f32(v84, v83);
    if (vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v85.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v85, 2), v85)).f32[0] >= 0.0)
    {
      v115 = (int32x4_t)vmulq_f32(v42, v42);
      v116 = (int32x4_t)vmulq_f32(v45, v45);
      v117 = (int32x4_t)vmulq_f32(v84, v84);
      v118 = (int32x4_t)vmulq_f32(v83, v83);
      *(float32x2_t *)v118.i8 = vabd_f32(vabs_f32(vadd_f32((float32x2_t)vzip2_s32(*(int32x2_t *)v115.i8, *(int32x2_t *)v117.i8), vadd_f32((float32x2_t)*(_OWORD *)&vzip2q_s32(v115, v117), (float32x2_t)vzip1_s32(*(int32x2_t *)v115.i8, *(int32x2_t *)v117.i8)))), vabs_f32(vadd_f32((float32x2_t)vzip2_s32(*(int32x2_t *)v116.i8, *(int32x2_t *)v118.i8), vadd_f32((float32x2_t)*(_OWORD *)&vzip2q_s32(v116, v118), (float32x2_t)vzip1_s32(*(int32x2_t *)v116.i8, *(int32x2_t *)v118.i8)))));
      v119 = vcgt_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v118.i8, 1), *(float32x2_t *)v118.i8).u8[0];
      v120 = (*a6)++;
      sub_2263AC688(this);
      *(_DWORD *)(*((_QWORD *)this + 4) + 4 * v120) = a4;
      v121 = (*a6)++;
      sub_2263AC688(this);
      *(_DWORD *)(*((_QWORD *)this + 4) + 4 * v121) = v29;
      v50 = (*a6)++;
      sub_2263AC688(this);
      v51 = *((_QWORD *)this + 4);
      if ((v119 & 1) == 0)
        goto LABEL_7;
    }
    else
    {
      v86 = (*a6)++;
      sub_2263AC688(this);
      *(_DWORD *)(*((_QWORD *)this + 4) + 4 * v86) = a4;
      v87 = (*a6)++;
      sub_2263AC688(this);
      *(_DWORD *)(*((_QWORD *)this + 4) + 4 * v87) = v29;
      v50 = (*a6)++;
      sub_2263AC688(this);
      v51 = *((_QWORD *)this + 4);
    }
    *(_DWORD *)(v51 + 4 * v50) = v47;
    v122 = (*a8)++;
    sub_2263AC688(a7);
    *(_DWORD *)(*((_QWORD *)a7 + 4) + 4 * v122) = 3;
    v123 = (*a6)++;
    sub_2263AC688(this);
    *(_DWORD *)(*((_QWORD *)this + 4) + 4 * v123) = v29;
    goto LABEL_58;
  }
}

void sub_2263A9F0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v10;
  void *v12;
  uint64_t v13;
  va_list va;
  _QWORD *v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a10);
  va_start(va, a10);
  v13 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD *);
  v16 = va_arg(va1, _QWORD);
  sub_2263AC900((uint64_t)va, v15);
  sub_2263AAC6C((uint64_t *)va1);
  v12 = *(void **)(v10 - 104);
  if (v12)
  {
    *(_QWORD *)(v10 - 96) = v12;
    operator delete(v12);
  }
  _Unwind_Resume(a1);
}

void sub_2263A9F70(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *a1, _QWORD *a2, pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *a3, _QWORD *a4, int a5, int a6, int a7)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v14 = (*a2)++;
  sub_2263AC688(a1);
  *(_DWORD *)(*((_QWORD *)a1 + 4) + 4 * v14) = a5;
  v15 = (*a2)++;
  sub_2263AC688(a1);
  *(_DWORD *)(*((_QWORD *)a1 + 4) + 4 * v15) = a6;
  v16 = (*a2)++;
  sub_2263AC688(a1);
  *(_DWORD *)(*((_QWORD *)a1 + 4) + 4 * v16) = a7;
  v17 = (*a4)++;
  sub_2263AC688(a3);
  *(_DWORD *)(*((_QWORD *)a3 + 4) + 4 * v17) = 3;
}

void sub_2263AA02C(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  __int128 v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 4)
  {
    if (a2 >> 60)
      sub_2263AACDC();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)sub_2263AC59C(v3, a2);
    v7 = &v6[v5];
    v9 = &v6[16 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v13 = *((_OWORD *)v10 - 1);
        v10 -= 16;
        *((_OWORD *)v12 - 1) = v13;
        v12 -= 16;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

void sub_2263AA0BC(_QWORD *a1, unint64_t *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *v6;
  uint64_t v7;
  __int128 *v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  unint64_t v20;
  const char *v21;
  unint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  int v26;
  __int128 *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  __int128 *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  unsigned int *v41;
  unsigned int v42;
  uint64_t v43;
  unsigned int *v44;
  unsigned int v45;
  unint64_t v46;
  const char *v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;

  v3 = (_QWORD *)a1[1];
  v2 = (_QWORD *)a1[2];
  if (v3 != v2)
  {
    v6 = (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(a1 + 4);
    do
    {
      MEMORY[0x2276976D8](&v51, "vertex");
      v8 = (__int128 *)(v3 + 9);
      v7 = v3[9];
      v9 = (unsigned int *)(v51 & 0xFFFFFFFFFFFFFFF8);
      if ((v51 & 7) != 0)
      {
        do
          v10 = __ldxr(v9);
        while (__stlxr(v10 - 2, v9));
      }
      if ((unsigned int *)(v7 & 0xFFFFFFFFFFFFFFF8) != v9)
      {
        MEMORY[0x2276976D8](&v51, "uniform");
        v11 = *(_QWORD *)v8;
        v12 = (unsigned int *)(v51 & 0xFFFFFFFFFFFFFFF8);
        if ((v51 & 7) != 0)
        {
          do
            v13 = __ldxr(v12);
          while (__stlxr(v13 - 2, v12));
        }
        if ((unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8) == v12)
        {
          v53 = 0;
          v51 = 0u;
          v52 = 0u;
          sub_2263AA560((uint64_t)&v51, *a2 / 3);
          if (*(_QWORD *)v6)
          {
            v22 = 0;
            v23 = 0;
            do
            {
              sub_2263AC688(v6);
              v24 = *(_DWORD *)(a1[8] + 4 * v22);
              if (v24 >= 3)
              {
                v25 = 4 * v23;
                v26 = v24 - 2;
                do
                {
                  sub_2263AC688((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v51);
                  *(_DWORD *)(v53 + v25) = v22;
                  v25 += 4;
                  ++v23;
                  --v26;
                }
                while (v26);
              }
              ++v22;
            }
            while (*(_QWORD *)v6 > v22);
          }
          v27 = (__int128 *)(v3 + 2);
          if (v3[2])
          {
            v50 = 0;
            v48 = 0u;
            v49 = 0u;
            sub_2263AA560((uint64_t)&v48, v51);
            if ((_QWORD)v51)
            {
              v28 = 0;
              do
              {
                sub_2263AC688((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v51);
                v29 = *(int *)(v53 + 4 * v28);
                sub_2263AC688((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(v3 + 2));
                LODWORD(v29) = *(_DWORD *)(v3[6] + 4 * v29);
                sub_2263AC688((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v48);
                *(_DWORD *)(v50 + 4 * v28++) = v29;
              }
              while ((unint64_t)v51 > v28);
            }
            v30 = v50;
            v31 = v3[5];
            v50 = v3[6];
            v32 = v3[4];
            v3[4] = v49;
            v33 = *v27;
            *v27 = v48;
            v48 = v33;
            v3[5] = *((_QWORD *)&v49 + 1);
            v3[6] = v30;
            *(_QWORD *)&v49 = v32;
            *((_QWORD *)&v49 + 1) = v31;
            sub_2263AC71C((uint64_t)&v48);
          }
          else
          {
            sub_2263AA5D0((uint64_t)(v3 + 2), &v51);
          }
          MEMORY[0x2276976D8](&v48, "uniform");
          if (&v48 == v8)
          {
            v43 = v48;
          }
          else
          {
            if ((*(_QWORD *)v8 & 7) != 0)
            {
              v41 = (unsigned int *)(*(_QWORD *)v8 & 0xFFFFFFFFFFFFFFF8);
              do
                v42 = __ldxr(v41);
              while (__stlxr(v42 - 2, v41));
            }
            v43 = 0;
            *(_QWORD *)v8 = v48;
            *(_QWORD *)&v48 = 0;
          }
          if ((v43 & 7) != 0)
          {
            v44 = (unsigned int *)(v43 & 0xFFFFFFFFFFFFFFF8);
            do
              v45 = __ldxr(v44);
            while (__stlxr(v45 - 2, v44));
          }
          sub_2263AC71C((uint64_t)&v51);
        }
        else
        {
          MEMORY[0x2276976D8](&v51, "faceVarying");
          v14 = *(_QWORD *)v8;
          v15 = (unsigned int *)(v51 & 0xFFFFFFFFFFFFFFF8);
          if ((v51 & 7) != 0)
          {
            do
              v16 = __ldxr(v15);
            while (__stlxr(v16 - 2, v15));
          }
          if ((unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8) == v15)
          {
            v34 = (__int128 *)(v3 + 2);
            if (v3[2])
            {
              v53 = 0;
              v51 = 0u;
              v52 = 0u;
              sub_2263AA560((uint64_t)&v51, *a2);
              if (*a2)
              {
                v35 = 0;
                do
                {
                  sub_2263AC688((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2);
                  v36 = *(int *)(a2[4] + 4 * v35);
                  sub_2263AC688((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(v3 + 2));
                  LODWORD(v36) = *(_DWORD *)(v3[6] + 4 * v36);
                  sub_2263AC688((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v51);
                  *(_DWORD *)(v53 + 4 * v35++) = v36;
                }
                while (*a2 > v35);
              }
              v37 = v53;
              v38 = v3[5];
              v53 = v3[6];
              v39 = v3[4];
              v3[4] = v52;
              v40 = *v34;
              *v34 = v51;
              v51 = v40;
              v3[5] = *((_QWORD *)&v52 + 1);
              v3[6] = v37;
              *(_QWORD *)&v52 = v39;
              *((_QWORD *)&v52 + 1) = v38;
              sub_2263AC71C((uint64_t)&v51);
            }
            else
            {
              sub_2263AA5D0((uint64_t)(v3 + 2), (__int128 *)a2);
            }
          }
          else
          {
            MEMORY[0x2276976D8](&v51, "constant");
            v17 = *(_QWORD *)v8;
            v18 = (unsigned int *)(v51 & 0xFFFFFFFFFFFFFFF8);
            if ((v51 & 7) != 0)
            {
              do
                v19 = __ldxr(v18);
              while (__stlxr(v19 - 2, v18));
            }
            if ((unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8) != v18)
            {
              v20 = *a1 & 0xFFFFFFFFFFFFFFF8;
              if (v20)
              {
                v21 = (const char *)(v20 + 16);
                if (*(char *)(v20 + 39) < 0)
                  v21 = *(const char **)v21;
              }
              else
              {
                v21 = "";
              }
              v46 = v3[7] & 0xFFFFFFFFFFFFFFF8;
              if (v46)
              {
                v47 = (const char *)(v46 + 16);
                if (*(char *)(v46 + 39) < 0)
                  v47 = *(const char **)v47;
              }
              else
              {
                v47 = "";
              }
              NSLog(CFSTR("Warning: mesh %s has attribute %s with unknown frequency."), v21, v47);
            }
          }
        }
      }
      v3 += 11;
    }
    while (v3 != v2);
  }
}

void sub_2263AA504(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_2263AC71C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2263AA560(uint64_t a1, unint64_t a2)
{
  int v5;
  int *v6;

  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  v5 = 0;
  sub_2263AD1C8((_QWORD *)a1);
  v6 = &v5;
  sub_2263AD210((unint64_t *)a1, a2, &v6);
  return a1;
}

void sub_2263AA5B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2263AC71C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2263AA5D0(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  if ((__int128 *)a1 != a2)
  {
    v3 = a2[1];
    v9 = *a2;
    v10 = v3;
    v4 = *((_QWORD *)a2 + 4);
    v11 = v4;
    if (v4)
    {
      v5 = (unint64_t *)(v4 - 16);
      if (*((_QWORD *)&v10 + 1))
        v5 = (unint64_t *)*((_QWORD *)&v10 + 1);
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
    }
    if (&v9 != (__int128 *)a1)
    {
      sub_2263AC71C(a1);
      v7 = v10;
      *(_OWORD *)a1 = v9;
      *(_OWORD *)(a1 + 16) = v7;
      v9 = 0u;
      v10 = 0u;
      *(_QWORD *)(a1 + 32) = v11;
      v11 = 0;
    }
    sub_2263AC71C((uint64_t)&v9);
  }
  return a1;
}

void sub_2263AA66C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2263AC71C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2263AA688(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::VtValue *v2;
  int *v3;
  int *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  const char *v10;
  uint64_t v11;
  __int128 *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  double v20;
  double v21;
  float32x4_t v22;
  int v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *v38;
  pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *v39;
  int *v40;
  uint64_t v41;
  int *v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  unint64_t v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v51;
  pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *v52;
  int v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  _OWORD v57[3];
  _OWORD v58[2];
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _OWORD v62[3];
  unint64_t v63[4];
  uint64_t v64;

  v2 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_2263AAB7C(*(pxrInternal__aapl__pxrReserved__::VtValue **)(a1 + 8));
  v51 = sub_2263AAC04(v2);
  sub_2263AC688((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(a1 + 32));
  v3 = *(int **)(a1 + 64);
  v52 = (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(a1 + 32);
  sub_2263AC688((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(a1 + 32));
  while (v3 != (int *)(*(_QWORD *)(a1 + 64) + 4 * *(_QWORD *)(a1 + 32)))
  {
    if (*v3 <= 2)
    {
      v9 = *(_QWORD *)a1 & 0xFFFFFFFFFFFFFFF8;
      if (v9)
      {
        v10 = (const char *)(v9 + 16);
        if (*(char *)(v9 + 39) < 0)
          v10 = *(const char **)v10;
      }
      else
      {
        v10 = "";
      }
      NSLog(CFSTR("Warning: mesh has a faceVertexCount less than 3, ignoring mesh: %s."), v10, v51);
      return 0;
    }
    ++v3;
  }
  sub_2263AC688(v52);
  v4 = *(int **)(a1 + 64);
  sub_2263AC688(v52);
  v5 = *(_QWORD *)(a1 + 64) + 4 * *(_QWORD *)(a1 + 32);
  if (v4 == (int *)v5)
  {
    v7 = 0;
    v6 = 0;
  }
  else
  {
    v6 = 0;
    v7 = 0;
    do
    {
      v8 = *v4++;
      v7 += 3 * (v8 - 2);
      v6 += (int)v8 - 2;
    }
    while (v4 != (int *)v5);
  }
  v64 = 0;
  memset(v63, 0, sizeof(v63));
  LODWORD(v58[0]) = 0;
  *(_QWORD *)&v62[0] = v58;
  sub_2263AD210(v63, v7, (_DWORD **)v62);
  memset(v62, 0, 40);
  LODWORD(v57[0]) = 0;
  *(_QWORD *)&v58[0] = v57;
  sub_2263AD210((unint64_t *)v62, v6, (_DWORD **)v58);
  v60 = 0;
  v61 = 0;
  v11 = *(_QWORD *)v52;
  v59 = 0;
  memset(v58, 0, sizeof(v58));
  sub_2263AA560((uint64_t)v58, v11 + 1);
  v12 = (__int128 *)(a1 + 72);
  if (v11)
  {
    v13 = 0;
    v14 = 0;
    do
    {
      sub_2263AC688(v52);
      v15 = *(int *)(*(_QWORD *)(a1 + 64) + 4 * v13);
      v16 = v60;
      sub_2263AC688((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v58);
      *(_DWORD *)(v59 + 4 * v13) = v16;
      sub_2263A9204(v51, v15, a1 + 72, v14, (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v63, &v61, (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v62, &v60, v17, v18, v19, v20, v21, v22);
      v14 += v15;
      ++v13;
    }
    while (v11 != v13);
  }
  v23 = v60;
  sub_2263AC688((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v58);
  *(_DWORD *)(v59 + 4 * v11) = v23;
  v24 = v61 == v7 && v60 == v6;
  v25 = v24;
  if (v24)
  {
    sub_2263AA0BC((_QWORD *)a1, v63);
    v26 = *(_QWORD *)(a1 + 48);
    v27 = *(_OWORD *)v52;
    *(_OWORD *)v52 = v62[0];
    *(_QWORD *)(a1 + 48) = *(_QWORD *)&v62[1];
    v62[0] = v27;
    *(_QWORD *)&v62[1] = v26;
    v28 = *(_OWORD *)(a1 + 56);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)((char *)&v62[1] + 8);
    *(_OWORD *)((char *)&v62[1] + 8) = v28;
    memset(v57, 0, 40);
    sub_2263AA560((uint64_t)v57, v63[0]);
    if (v63[0])
    {
      v29 = 0;
      do
      {
        sub_2263AC688((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v63);
        v30 = *(int *)(v64 + 4 * v29);
        sub_2263AC688((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(a1 + 72));
        LODWORD(v30) = *(_DWORD *)(*(_QWORD *)(a1 + 104) + 4 * v30);
        sub_2263AC688((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v57);
        v31 = *(_QWORD *)&v57[2];
        *(_DWORD *)(*(_QWORD *)&v57[2] + 4 * v29++) = v30;
      }
      while (v63[0] > v29);
    }
    else
    {
      v31 = *(_QWORD *)&v57[2];
    }
    v34 = *(_QWORD *)(a1 + 88);
    v35 = *((_QWORD *)&v57[1] + 1);
    *(_QWORD *)(a1 + 88) = *(_QWORD *)&v57[1];
    v36 = *v12;
    *v12 = v57[0];
    v57[0] = v36;
    *(_QWORD *)&v57[1] = v34;
    v37 = *(_OWORD *)(a1 + 96);
    *(_QWORD *)(a1 + 96) = v35;
    *(_QWORD *)(a1 + 104) = v31;
    *(_OWORD *)((char *)&v57[1] + 8) = v37;
    v39 = *(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase **)(a1 + 112);
    v38 = *(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase **)(a1 + 120);
    while (v39 != v38)
    {
      v56 = 0;
      v54 = 0u;
      v55 = 0u;
      if (*(_QWORD *)v39)
      {
        sub_2263AC688(v39);
        v40 = (int *)*((_QWORD *)v39 + 4);
        sub_2263AC688(v39);
        v41 = *((_QWORD *)v39 + 4);
        v42 = (int *)(v41 + 4 * *(_QWORD *)v39);
        if (v40 != v42)
        {
          do
          {
            v43 = *v40;
            v53 = 0;
            sub_2263AC688((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v58);
            v44 = *(_DWORD *)(v59 + 4 * v43);
            v45 = (int)v43 + 1;
            while (1)
            {
              v53 = v44;
              sub_2263AC688((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v58);
              if (v44 >= *(_DWORD *)(v59 + 4 * v45))
                break;
              sub_2263AD694((uint64_t)&v54, &v53);
              v44 = v53 + 1;
            }
            ++v40;
          }
          while (v40 != v42);
          v41 = *((_QWORD *)v39 + 4);
        }
        v46 = v55;
        *((_QWORD *)v39 + 4) = v56;
        v56 = v41;
        v47 = *(_OWORD *)v39;
        *(_OWORD *)v39 = v54;
        v48 = *((_QWORD *)v39 + 2);
        v49 = *((_QWORD *)v39 + 3);
        *((_OWORD *)v39 + 1) = __PAIR128__(*((unint64_t *)&v55 + 1), v46);
        v54 = v47;
        *(_QWORD *)&v55 = v48;
        *((_QWORD *)&v55 + 1) = v49;
      }
      sub_2263AC71C((uint64_t)&v54);
      v39 = (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)((char *)v39 + 40);
    }
    sub_2263AC71C((uint64_t)v57);
  }
  else
  {
    v32 = *(_QWORD *)a1 & 0xFFFFFFFFFFFFFFF8;
    if (v32)
    {
      v33 = (const char *)(v32 + 16);
      if (*(char *)(v32 + 39) < 0)
        v33 = *(const char **)v33;
    }
    else
    {
      v33 = "";
    }
    NSLog(CFSTR("Warning: triangulate mesh %s failed"), v33);
  }
  sub_2263AC71C((uint64_t)v58);
  sub_2263AC71C((uint64_t)v62);
  sub_2263AC71C((uint64_t)v63);
  return v25;
}

void sub_2263AAAEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  sub_2263AC71C((uint64_t)&a25);
  sub_2263AC71C((uint64_t)&a33);
  sub_2263AC71C((uint64_t)&a39);
  _Unwind_Resume(a1);
}

std::type_info *sub_2263AAB7C(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  std::type_info *v1;
  const pxrInternal__aapl__pxrReserved__::VtValue *v2;
  _QWORD v4[3];

  v1 = (std::type_info *)a1;
  v4[2] = *MEMORY[0x24BDAC8D0];
  if ((sub_2263AD3C4(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast((pxrInternal__aapl__pxrReserved__::VtValue *)&stru_24EDD68D8, v1, v2);
    v1 = (std::type_info *)sub_2263AD3FC(v1, v4);
    sub_2263AD568((uint64_t)v4);
  }
  return v1;
}

uint64_t sub_2263AAC04(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;

  if ((sub_2263AD3C4(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  v2 = *((_QWORD *)a1 + 1);
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    return sub_2263AD654((uint64_t *)a1);
}

_QWORD *sub_2263AAC6C(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  if (result[2])
  {
    v1 = result;
    result = (_QWORD *)result[1];
    v2 = *v1;
    v3 = *result;
    *(_QWORD *)(v3 + 8) = *(_QWORD *)(*v1 + 8);
    **(_QWORD **)(v2 + 8) = v3;
    v1[2] = 0;
    if (result != v1)
    {
      do
      {
        v4 = (_QWORD *)result[1];
        operator delete(result);
        result = v4;
      }
      while (v4 != v1);
    }
  }
  return result;
}

void sub_2263AACCC(void *a1)
{
  __cxa_begin_catch(a1);
  std::terminate();
}

void sub_2263AACDC()
{
  sub_2263AACF0("vector");
}

void sub_2263AACF0(const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_2263AAD40(exception, a1);
  __cxa_throw(exception, (struct type_info *)off_24EDD65A0, MEMORY[0x24BEDAAF0]);
}

void sub_2263AAD2C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *sub_2263AAD40(std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8B8] + 16);
  return result;
}

void *sub_2263AAD64(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    sub_2263AADA8();
  return operator new(24 * a2);
}

void sub_2263AADA8()
{
  std::bad_array_new_length *exception;
  std::bad_array_new_length *v1;

  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x24BEDB748], MEMORY[0x24BEDABB8]);
}

void sub_2263AADD0(uint64_t a1, __int128 *a2, uint64_t (**a3)(__int128 *, __int128 *), uint64_t a4, char a5, __n128 a6)
{
  __int128 *v10;
  __int128 *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  __int128 *v17;
  uint64_t v18;
  __int128 *v19;
  __int128 *v20;
  __int128 *v21;
  __int128 v22;
  uint64_t v23;
  char v24;
  BOOL v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;

LABEL_1:
  v10 = (__int128 *)((char *)a2 - 24);
  v11 = (__int128 *)a1;
LABEL_2:
  v12 = 1 - a4;
  while (2)
  {
    a1 = (uint64_t)v11;
    v13 = v12;
    v14 = (char *)a2 - (char *)v11;
    v15 = 0xAAAAAAAAAAAAAAABLL * (((char *)a2 - (char *)v11) >> 3);
    switch(v15)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        if ((*a3)((__int128 *)((char *)a2 - 24), v11))
        {
          v30 = *((_QWORD *)v11 + 2);
          v28 = *v11;
          v26 = *v10;
          *((_QWORD *)v11 + 2) = *((_QWORD *)a2 - 1);
          *v11 = v26;
          *v10 = v28;
          *((_QWORD *)a2 - 1) = v30;
        }
        return;
      case 3uLL:
        sub_2263AB320(v11, (__int128 *)((char *)v11 + 24), (__int128 *)((char *)a2 - 24), a3);
        return;
      case 4uLL:
        sub_2263AB910((uint64_t)v11, (uint64_t)v11 + 24, (uint64_t)(v11 + 3), (uint64_t)a2 - 24, a3);
        return;
      case 5uLL:
        sub_2263AB9F8((__n128 *)v11, (uint64_t)v11 + 24, (uint64_t)(v11 + 3), (uint64_t)v11 + 72, (uint64_t)a2 - 24, a3);
        return;
      default:
        if (v14 <= 575)
        {
          if ((a5 & 1) != 0)
            sub_2263AB174((uint64_t)v11, (uint64_t)a2, (uint64_t (**)(uint64_t, uint64_t))a3);
          else
            sub_2263AB258((uint64_t)v11, (uint64_t)a2, (uint64_t (**)(uint64_t, uint64_t))a3);
          return;
        }
        if (v13 != 1)
        {
          v16 = v15 >> 1;
          v17 = (__int128 *)((char *)v11 + 24 * (v15 >> 1));
          if ((unint64_t)v14 < 0xC01)
          {
            sub_2263AB320((__int128 *)((char *)v11 + 24 * v16), v11, (__int128 *)((char *)a2 - 24), a3);
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          else
          {
            sub_2263AB320(v11, (__int128 *)((char *)v11 + 24 * v16), (__int128 *)((char *)a2 - 24), a3);
            v18 = 3 * v16;
            v19 = (__int128 *)((char *)v11 + 24 * v16 - 24);
            sub_2263AB320((__int128 *)((char *)v11 + 24), v19, a2 - 3, a3);
            v20 = v11 + 3;
            v21 = (__int128 *)((char *)v11 + 8 * v18 + 24);
            sub_2263AB320(v20, v21, (__int128 *)((char *)a2 - 72), a3);
            sub_2263AB320(v19, v17, v21, a3);
            v29 = *(_QWORD *)(a1 + 16);
            v27 = *(_OWORD *)a1;
            v22 = *v17;
            *(_QWORD *)(a1 + 16) = *((_QWORD *)v17 + 2);
            *(_OWORD *)a1 = v22;
            *((_QWORD *)v17 + 2) = v29;
            *v17 = v27;
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          if (((*a3)((__int128 *)(a1 - 24), (__int128 *)a1) & 1) == 0)
          {
            v11 = sub_2263AB46C((__int128 *)a1, a2, a3);
            goto LABEL_16;
          }
LABEL_11:
          v23 = sub_2263AB5C8((__int128 *)a1, (unint64_t)a2, (uint64_t (**)(char *, __int128 *))a3);
          if ((v24 & 1) == 0)
            goto LABEL_14;
          v25 = sub_2263AB724(a1, v23, a3);
          v11 = (__int128 *)(v23 + 24);
          if (!sub_2263AB724(v23 + 24, (uint64_t)a2, a3))
          {
            v12 = v13 + 1;
            if (v25)
              continue;
LABEL_14:
            sub_2263AADD0(a1, v23, a3, -v13, a5 & 1);
            v11 = (__int128 *)(v23 + 24);
LABEL_16:
            a5 = 0;
            a4 = -v13;
            goto LABEL_2;
          }
          a4 = -v13;
          a2 = (__int128 *)v23;
          if (v25)
            return;
          goto LABEL_1;
        }
        if (v11 != a2)
          sub_2263ABB18((__n128 *)v11, (__n128 *)a2, (__n128 *)a2, (unsigned int (**)(uint64_t, __int8 *))a3, a6);
        return;
    }
  }
}

uint64_t sub_2263AB174(uint64_t result, uint64_t a2, uint64_t (**a3)(uint64_t, uint64_t))
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (result != a2)
  {
    v17 = v3;
    v18 = v4;
    v6 = result;
    v7 = result + 24;
    if (result + 24 != a2)
    {
      v9 = 0;
      v10 = result;
      do
      {
        v11 = v10;
        v10 = v7;
        result = (*a3)(v7, v11);
        if ((_DWORD)result)
        {
          v15 = *(_OWORD *)v10;
          v16 = *(_QWORD *)(v10 + 16);
          v12 = v9;
          while (1)
          {
            v13 = v6 + v12;
            *(_OWORD *)(v13 + 24) = *(_OWORD *)(v6 + v12);
            *(_QWORD *)(v13 + 40) = *(_QWORD *)(v6 + v12 + 16);
            if (!v12)
              break;
            v12 -= 24;
            result = (*a3)((uint64_t)&v15, v12 + v6);
            if ((result & 1) == 0)
            {
              v14 = v6 + v12 + 24;
              goto LABEL_10;
            }
          }
          v14 = v6;
LABEL_10:
          *(_OWORD *)v14 = v15;
          *(_QWORD *)(v14 + 16) = v16;
        }
        v7 = v10 + 24;
        v9 += 24;
      }
      while (v10 + 24 != a2);
    }
  }
  return result;
}

uint64_t sub_2263AB258(uint64_t result, uint64_t a2, uint64_t (**a3)(uint64_t, uint64_t))
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (result != a2)
  {
    v14 = v3;
    v15 = v4;
    v6 = result;
    v7 = result + 24;
    if (result + 24 != a2)
    {
      v9 = result - 24;
      do
      {
        v10 = v6;
        v6 = v7;
        result = (*a3)(v7, v10);
        if ((_DWORD)result)
        {
          v12 = *(_OWORD *)v6;
          v13 = *(_QWORD *)(v6 + 16);
          v11 = v9;
          do
          {
            *(_OWORD *)(v11 + 48) = *(_OWORD *)(v11 + 24);
            *(_QWORD *)(v11 + 64) = *(_QWORD *)(v11 + 40);
            result = (*a3)((uint64_t)&v12, v11);
            v11 -= 24;
          }
          while ((result & 1) != 0);
          *(_OWORD *)(v11 + 48) = v12;
          *(_QWORD *)(v11 + 64) = v13;
        }
        v7 = v6 + 24;
        v9 += 24;
      }
      while (v6 + 24 != a2);
    }
  }
  return result;
}

uint64_t sub_2263AB320(__int128 *a1, __int128 *a2, __int128 *a3, uint64_t (**a4)(__int128 *, __int128 *))
{
  char v8;
  uint64_t result;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;

  v8 = (*a4)(a2, a1);
  result = (*a4)(a3, a2);
  if ((v8 & 1) == 0)
  {
    if (!(_DWORD)result)
      return result;
    v13 = *((_QWORD *)a2 + 2);
    v14 = *a2;
    v15 = *((_QWORD *)a3 + 2);
    *a2 = *a3;
    *((_QWORD *)a2 + 2) = v15;
    *a3 = v14;
    *((_QWORD *)a3 + 2) = v13;
    if (!(*a4)(a2, a1))
      return 1;
    v16 = *((_QWORD *)a1 + 2);
    v17 = *a1;
    v18 = *((_QWORD *)a2 + 2);
    *a1 = *a2;
    *((_QWORD *)a1 + 2) = v18;
    *a2 = v17;
    *((_QWORD *)a2 + 2) = v16;
    return 2;
  }
  if (!(_DWORD)result)
  {
    v19 = *((_QWORD *)a1 + 2);
    v20 = *a1;
    v21 = *((_QWORD *)a2 + 2);
    *a1 = *a2;
    *((_QWORD *)a1 + 2) = v21;
    *a2 = v20;
    *((_QWORD *)a2 + 2) = v19;
    if (!(*a4)(a3, a2))
      return 1;
    v22 = *((_QWORD *)a2 + 2);
    v23 = *a2;
    v24 = *((_QWORD *)a3 + 2);
    *a2 = *a3;
    *((_QWORD *)a2 + 2) = v24;
    *a3 = v23;
    *((_QWORD *)a3 + 2) = v22;
    return 2;
  }
  v10 = *((_QWORD *)a1 + 2);
  v11 = *a1;
  v12 = *((_QWORD *)a3 + 2);
  *a1 = *a3;
  *((_QWORD *)a1 + 2) = v12;
  *a3 = v11;
  *((_QWORD *)a3 + 2) = v10;
  return 1;
}

__int128 *sub_2263AB46C(__int128 *a1, __int128 *a2, uint64_t (**a3)(__int128 *, __int128 *))
{
  __int128 *v4;
  __int128 *v6;
  __int128 *v7;
  int v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 *v12;
  __int128 v13;
  __int128 v14;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;

  v4 = a2;
  v16 = *a1;
  v17 = *((_QWORD *)a1 + 2);
  if (((*a3)(&v16, (__int128 *)((char *)a2 - 24)) & 1) != 0)
  {
    v6 = a1;
    do
      v6 = (__int128 *)((char *)v6 + 24);
    while (((*a3)(&v16, v6) & 1) == 0);
  }
  else
  {
    v7 = (__int128 *)((char *)a1 + 24);
    do
    {
      v6 = v7;
      if (v7 >= v4)
        break;
      v8 = (*a3)(&v16, v7);
      v7 = (__int128 *)((char *)v6 + 24);
    }
    while (!v8);
  }
  if (v6 < v4)
  {
    do
      v4 = (__int128 *)((char *)v4 - 24);
    while (((*a3)(&v16, v4) & 1) != 0);
  }
  while (v6 < v4)
  {
    v9 = *v6;
    v19 = *((_QWORD *)v6 + 2);
    v18 = v9;
    v10 = *v4;
    *((_QWORD *)v6 + 2) = *((_QWORD *)v4 + 2);
    *v6 = v10;
    v11 = v18;
    *((_QWORD *)v4 + 2) = v19;
    *v4 = v11;
    do
      v6 = (__int128 *)((char *)v6 + 24);
    while (!(*a3)(&v16, v6));
    do
      v4 = (__int128 *)((char *)v4 - 24);
    while (((*a3)(&v16, v4) & 1) != 0);
  }
  v12 = (__int128 *)((char *)v6 - 24);
  if ((__int128 *)((char *)v6 - 24) != a1)
  {
    v13 = *v12;
    *((_QWORD *)a1 + 2) = *((_QWORD *)v6 - 1);
    *a1 = v13;
  }
  v14 = v16;
  *((_QWORD *)v6 - 1) = v17;
  *v12 = v14;
  return v6;
}

uint64_t sub_2263AB5C8(__int128 *a1, unint64_t a2, uint64_t (**a3)(char *, __int128 *))
{
  uint64_t v6;
  __int128 *v7;
  uint64_t v8;
  unint64_t v9;
  __int128 *v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;

  v6 = 0;
  v17 = *a1;
  v18 = *((_QWORD *)a1 + 2);
  do
    v6 += 24;
  while (((*a3)((char *)a1 + v6, &v17) & 1) != 0);
  v7 = (__int128 *)((char *)a1 + v6);
  v8 = (uint64_t)a1 + v6 - 24;
  if (v6 == 24)
  {
    do
    {
      if ((unint64_t)v7 >= a2)
        break;
      a2 -= 24;
    }
    while (((*a3)((char *)a2, &v17) & 1) == 0);
  }
  else
  {
    do
      a2 -= 24;
    while (!(*a3)((char *)a2, &v17));
  }
  if ((unint64_t)v7 < a2)
  {
    v9 = a2;
    v10 = v7;
    do
    {
      v19 = *v10;
      v11 = v19;
      v20 = *((_QWORD *)v10 + 2);
      v12 = v20;
      v13 = *(_QWORD *)(v9 + 16);
      *v10 = *(_OWORD *)v9;
      *((_QWORD *)v10 + 2) = v13;
      *(_QWORD *)(v9 + 16) = v12;
      *(_OWORD *)v9 = v11;
      do
        v10 = (__int128 *)((char *)v10 + 24);
      while (((*a3)((char *)v10, &v17) & 1) != 0);
      do
        v9 -= 24;
      while (!(*a3)((char *)v9, &v17));
    }
    while ((unint64_t)v10 < v9);
    v8 = (uint64_t)v10 - 24;
  }
  if ((__int128 *)v8 != a1)
  {
    v14 = *(_OWORD *)v8;
    *((_QWORD *)a1 + 2) = *(_QWORD *)(v8 + 16);
    *a1 = v14;
  }
  v15 = v17;
  *(_QWORD *)(v8 + 16) = v18;
  *(_OWORD *)v8 = v15;
  return v8;
}

BOOL sub_2263AB724(uint64_t a1, uint64_t a2, uint64_t (**a3)(__int128 *, __int128 *))
{
  unint64_t v6;
  _BOOL8 result;
  __int128 *v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;

  v6 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v8 = (__int128 *)(a2 - 24);
      if ((*a3)((__int128 *)(a2 - 24), (__int128 *)a1))
      {
        v9 = *(_QWORD *)(a1 + 16);
        v10 = *(_OWORD *)a1;
        v11 = *(_QWORD *)(a2 - 8);
        *(_OWORD *)a1 = *v8;
        *(_QWORD *)(a1 + 16) = v11;
        *v8 = v10;
        *(_QWORD *)(a2 - 8) = v9;
      }
      return 1;
    case 3uLL:
      sub_2263AB320((__int128 *)a1, (__int128 *)(a1 + 24), (__int128 *)(a2 - 24), a3);
      return 1;
    case 4uLL:
      sub_2263AB910(a1, a1 + 24, a1 + 48, a2 - 24, a3);
      return 1;
    case 5uLL:
      sub_2263AB9F8((__n128 *)a1, a1 + 24, a1 + 48, a1 + 72, a2 - 24, a3);
      return 1;
    default:
      v12 = (__int128 *)(a1 + 48);
      sub_2263AB320((__int128 *)a1, (__int128 *)(a1 + 24), (__int128 *)(a1 + 48), a3);
      v13 = a1 + 72;
      if (a1 + 72 == a2)
        return 1;
      v14 = 0;
      v15 = 0;
      break;
  }
  while (1)
  {
    if ((*a3)((__int128 *)v13, v12))
    {
      v19 = *(_OWORD *)v13;
      v20 = *(_QWORD *)(v13 + 16);
      v16 = v14;
      while (1)
      {
        v17 = a1 + v16;
        *(_OWORD *)(v17 + 72) = *(_OWORD *)(a1 + v16 + 48);
        *(_QWORD *)(v17 + 88) = *(_QWORD *)(a1 + v16 + 64);
        if (v16 == -48)
          break;
        v16 -= 24;
        if (((*a3)(&v19, (__int128 *)(v17 + 24)) & 1) == 0)
        {
          v18 = a1 + v16 + 72;
          goto LABEL_12;
        }
      }
      v18 = a1;
LABEL_12:
      *(_OWORD *)v18 = v19;
      *(_QWORD *)(v18 + 16) = v20;
      if (++v15 == 8)
        return v13 + 24 == a2;
    }
    v12 = (__int128 *)v13;
    v14 += 24;
    v13 += 24;
    if (v13 == a2)
      return 1;
  }
}

__n128 sub_2263AB910(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (**a5)(__int128 *, __int128 *))
{
  __n128 result;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  sub_2263AB320((__int128 *)a1, (__int128 *)a2, (__int128 *)a3, a5);
  if ((*a5)((__int128 *)a4, (__int128 *)a3))
  {
    v11 = *(_QWORD *)(a3 + 16);
    v12 = *(_OWORD *)a3;
    v13 = *(_QWORD *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_QWORD *)(a3 + 16) = v13;
    *(_OWORD *)a4 = v12;
    *(_QWORD *)(a4 + 16) = v11;
    if ((*a5)((__int128 *)a3, (__int128 *)a2))
    {
      v14 = *(_QWORD *)(a2 + 16);
      v15 = *(_OWORD *)a2;
      v16 = *(_QWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_QWORD *)(a2 + 16) = v16;
      *(_OWORD *)a3 = v15;
      *(_QWORD *)(a3 + 16) = v14;
      if ((*a5)((__int128 *)a2, (__int128 *)a1))
      {
        v17 = *(_QWORD *)(a1 + 16);
        result = *(__n128 *)a1;
        v18 = *(_QWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_QWORD *)(a1 + 16) = v18;
        *(__n128 *)a2 = result;
        *(_QWORD *)(a2 + 16) = v17;
      }
    }
  }
  return result;
}

__n128 sub_2263AB9F8(__n128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (**a6)(__int128 *, __int128 *))
{
  __n128 v12;
  __n128 result;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;

  v12 = sub_2263AB910((uint64_t)a1, a2, a3, a4, a6);
  if (((unsigned int (*)(uint64_t, uint64_t, __n128))*a6)(a5, a4, v12))
  {
    v14 = *(_QWORD *)(a4 + 16);
    v15 = *(_OWORD *)a4;
    v16 = *(_QWORD *)(a5 + 16);
    *(_OWORD *)a4 = *(_OWORD *)a5;
    *(_QWORD *)(a4 + 16) = v16;
    *(_OWORD *)a5 = v15;
    *(_QWORD *)(a5 + 16) = v14;
    if ((*a6)((__int128 *)a4, (__int128 *)a3))
    {
      v17 = *(_QWORD *)(a3 + 16);
      v18 = *(_OWORD *)a3;
      v19 = *(_QWORD *)(a4 + 16);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_QWORD *)(a3 + 16) = v19;
      *(_OWORD *)a4 = v18;
      *(_QWORD *)(a4 + 16) = v17;
      if ((*a6)((__int128 *)a3, (__int128 *)a2))
      {
        v20 = *(_QWORD *)(a2 + 16);
        v21 = *(__n128 *)a2;
        v22 = *(_QWORD *)(a3 + 16);
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(_QWORD *)(a2 + 16) = v22;
        *(__n128 *)a3 = v21;
        *(_QWORD *)(a3 + 16) = v20;
        if ((*a6)((__int128 *)a2, (__int128 *)a1))
        {
          v23 = a1[1].n128_u64[0];
          result = *a1;
          v24 = *(_QWORD *)(a2 + 16);
          *a1 = *(__n128 *)a2;
          a1[1].n128_u64[0] = v24;
          *(__n128 *)a2 = result;
          *(_QWORD *)(a2 + 16) = v23;
        }
      }
    }
  }
  return result;
}

__n128 *sub_2263ABB18(__n128 *a1, __n128 *a2, __n128 *a3, unsigned int (**a4)(uint64_t, __int8 *), __n128 a5)
{
  __n128 *v7;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  __n128 *v13;
  __n128 *v14;
  __n128 *v15;
  unint64_t v16;
  __n128 v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __n128 v26;
  __n128 *v29;
  __n128 *v30;
  __n128 v31;
  unint64_t v32;

  if (a1 != a2)
  {
    v7 = a2;
    v9 = (char *)a2 - (char *)a1;
    v10 = ((char *)a2 - (char *)a1) / 24;
    if ((char *)a2 - (char *)a1 >= 25)
    {
      v11 = (unint64_t)(v10 - 2) >> 1;
      v12 = v11 + 1;
      v13 = (__n128 *)((char *)a1 + 24 * v11);
      do
      {
        a5 = sub_2263ABD5C((uint64_t)a1, a4, v10, v13);
        v13 = (__n128 *)((char *)v13 - 24);
        --v12;
      }
      while (v12);
    }
    v14 = v7;
    if (v7 != a3)
    {
      v15 = v7;
      do
      {
        if (((unsigned int (*)(__n128 *, __n128 *, __n128))*a4)(v15, a1, a5))
        {
          v16 = v15[1].n128_u64[0];
          v17 = *v15;
          v18 = a1[1].n128_u64[0];
          *v15 = *a1;
          v15[1].n128_u64[0] = v18;
          *a1 = v17;
          a1[1].n128_u64[0] = v16;
          a5 = sub_2263ABD5C((uint64_t)a1, a4, v10, a1);
        }
        v15 = (__n128 *)((char *)v15 + 24);
      }
      while (v15 != a3);
      v14 = a3;
    }
    if (v9 < 25)
    {
      return v14;
    }
    else
    {
      v29 = v14;
      v19 = v9 / 0x18uLL;
      do
      {
        v30 = v7;
        v20 = 0;
        v31 = *a1;
        v32 = a1[1].n128_u64[0];
        v21 = (uint64_t)a1;
        do
        {
          v22 = v21 + 24 * v20 + 24;
          v23 = (2 * v20) | 1;
          v24 = 2 * v20 + 2;
          if (v24 < v19 && (*a4)(v21 + 24 * v20 + 24, (__int8 *)(v21 + 24 * v20 + 48)))
          {
            v22 += 24;
            v23 = v24;
          }
          v25 = *(_OWORD *)v22;
          *(_QWORD *)(v21 + 16) = *(_QWORD *)(v22 + 16);
          *(_OWORD *)v21 = v25;
          v21 = v22;
          v20 = v23;
        }
        while (v23 <= (uint64_t)((unint64_t)(v19 - 2) >> 1));
        v7 = (__n128 *)((char *)v30 - 24);
        if ((__int8 *)v22 == &v30[-2].n128_i8[8])
        {
          *(_QWORD *)(v22 + 16) = v32;
          *(__n128 *)v22 = v31;
        }
        else
        {
          v26 = *v7;
          *(_QWORD *)(v22 + 16) = v30[-1].n128_u64[1];
          *(__n128 *)v22 = v26;
          *v7 = v31;
          v30[-1].n128_u64[1] = v32;
          sub_2263ABEC0((uint64_t)a1, v22 + 24, (uint64_t (**)(__int128 *, __int128 *))a4, 0xAAAAAAAAAAAAAAABLL * ((v22 + 24 - (uint64_t)a1) >> 3));
        }
      }
      while (v19-- > 2);
      return v29;
    }
  }
  return a3;
}

__n128 sub_2263ABD5C(uint64_t a1, unsigned int (**a2)(uint64_t, __int8 *), uint64_t a3, __n128 *a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  __n128 *v7;
  uint64_t v9;
  uint64_t v12;
  __n128 *v13;
  uint64_t v14;
  __n128 result;
  __n128 *v16;
  __n128 v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v6 = a3 - 2;
  if (a3 >= 2)
  {
    v22 = v4;
    v23 = v5;
    v7 = a4;
    v9 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * (((uint64_t)a4 - a1) >> 3)))
    {
      v12 = (0x5555555555555556 * (((uint64_t)a4 - a1) >> 3)) | 1;
      v13 = (__n128 *)(a1 + 24 * v12);
      v14 = 0x5555555555555556 * (((uint64_t)a4 - a1) >> 3) + 2;
      if (v14 < a3 && (*a2)(a1 + 24 * v12, &v13[1].n128_i8[8]))
      {
        v13 = (__n128 *)((char *)v13 + 24);
        v12 = v14;
      }
      if ((((uint64_t (*)(__n128 *, __n128 *))*a2)(v13, v7) & 1) == 0)
      {
        v20 = *v7;
        v21 = v7[1].n128_u64[0];
        do
        {
          v16 = v13;
          v17 = *v13;
          v7[1].n128_u64[0] = v13[1].n128_u64[0];
          *v7 = v17;
          if (v9 < v12)
            break;
          v18 = (2 * v12) | 1;
          v13 = (__n128 *)(a1 + 24 * v18);
          v19 = 2 * v12 + 2;
          if (v19 < a3)
          {
            if ((*a2)(a1 + 24 * v18, &v13[1].n128_i8[8]))
            {
              v13 = (__n128 *)((char *)v13 + 24);
              v18 = v19;
            }
          }
          v7 = v16;
          v12 = v18;
        }
        while (!(*a2)((uint64_t)v13, (__int8 *)&v20));
        result = v20;
        v16[1].n128_u64[0] = v21;
        *v16 = result;
      }
    }
  }
  return result;
}

double sub_2263ABEC0(uint64_t a1, uint64_t a2, uint64_t (**a3)(__int128 *, __int128 *), uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v9;
  __int128 *v10;
  __int128 *v11;
  double result;
  __int128 *v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = a4 - 2;
  if (a4 >= 2)
  {
    v17 = v4;
    v18 = v5;
    v9 = v6 >> 1;
    v10 = (__int128 *)(a1 + 24 * (v6 >> 1));
    v11 = (__int128 *)(a2 - 24);
    if ((*a3)(v10, (__int128 *)(a2 - 24)))
    {
      v15 = *v11;
      v16 = *((_QWORD *)v11 + 2);
      do
      {
        v13 = v10;
        v14 = *v10;
        *((_QWORD *)v11 + 2) = *((_QWORD *)v10 + 2);
        *v11 = v14;
        if (!v9)
          break;
        v9 = (v9 - 1) >> 1;
        v10 = (__int128 *)(a1 + 24 * v9);
        v11 = v13;
      }
      while (((*a3)(v10, &v15) & 1) != 0);
      result = *(double *)&v15;
      *v13 = v15;
      *((_QWORD *)v13 + 2) = v16;
    }
  }
  return result;
}

uint64_t sub_2263ABF8C(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

void *sub_2263ABFD4(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61)
    sub_2263AADA8();
  return operator new(8 * a2);
}

float32x2_t *sub_2263AC008(_QWORD *a1, unint64_t *a2, __n128 a3)
{
  unint64_t v4;
  int8x8_t v5;
  uint8x8_t v6;
  unint64_t v7;
  float32x2_t v8;
  float32x2_t *i;
  float32x2_t v10;
  float32x2_t v11;
  unint64_t v13;

  a3.n128_u64[0] = *a2;
  v13 = *a2;
  v4 = sub_2263A8780(a3, 0.000001);
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = (uint8x8_t)vcnt_s8(v5);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = v4;
    v8 = (float32x2_t)v13;
    if (v4 >= *(_QWORD *)&v5)
      v7 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v7 = (*(_QWORD *)&v5 - 1) & v4;
    v8 = (float32x2_t)v13;
  }
  i = *(float32x2_t **)(*a1 + 8 * v7);
  if (i)
  {
    for (i = (float32x2_t *)*i; i; i = (float32x2_t *)*i)
    {
      v10 = i[1];
      if (*(_QWORD *)&v10 == v4)
      {
        v11 = vsub_f32(i[2], v8);
        if (vaddv_f32(vmul_f32(v11, v11)) < 1.0e-12)
          return i;
      }
      else
      {
        if (v6.u32[0] > 1uLL)
        {
          if (*(_QWORD *)&v10 >= *(_QWORD *)&v5)
            *(_QWORD *)&v10 %= *(_QWORD *)&v5;
        }
        else
        {
          *(_QWORD *)&v10 &= *(_QWORD *)&v5 - 1;
        }
        if (*(_QWORD *)&v10 != v7)
          return 0;
      }
    }
  }
  return i;
}

float32x2_t *sub_2263AC10C(uint64_t a1, unint64_t *a2, __n128 a3, uint64_t a4, float32x2_t **a5)
{
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  float32x2_t v12;
  float32x2_t **v13;
  float32x2_t *i;
  unint64_t v15;
  float32x2_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  uint64_t v23;
  float32x2_t **v24;
  unint64_t v25;
  unint64_t v27;

  a3.n128_u64[0] = *a2;
  v27 = *a2;
  v7 = sub_2263A8780(a3, 0.000001);
  v8 = v7;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v11 = v7;
      v12 = (float32x2_t)v27;
      if (v7 >= v9)
        v11 = v7 % v9;
    }
    else
    {
      v11 = (v9 - 1) & v7;
      v12 = (float32x2_t)v27;
    }
    v13 = *(float32x2_t ***)(*(_QWORD *)a1 + 8 * v11);
    if (v13)
    {
      for (i = *v13; i; i = (float32x2_t *)*i)
      {
        v15 = (unint64_t)i[1];
        if (v15 == v7)
        {
          v16 = vsub_f32(i[2], v12);
          if (vaddv_f32(vmul_f32(v16, v16)) < 1.0e-12)
            return i;
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v15 >= v9)
              v15 %= v9;
          }
          else
          {
            v15 &= v9 - 1;
          }
          if (v15 != v11)
            break;
        }
      }
    }
  }
  else
  {
    v11 = 0;
  }
  i = (float32x2_t *)operator new(0x20uLL);
  *i = 0;
  i[1] = (float32x2_t)v8;
  i[2] = **a5;
  i[3].i32[0] = 0;
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v9 || (float)(v18 * (float)v9) < v17)
  {
    v19 = 1;
    if (v9 >= 3)
      v19 = (v9 & (v9 - 1)) != 0;
    v20 = v19 | (2 * v9);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    sub_2263AC368(a1, v22);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v11 = v8 % v9;
      else
        v11 = v8;
    }
    else
    {
      v11 = (v9 - 1) & v8;
    }
  }
  v23 = *(_QWORD *)a1;
  v24 = *(float32x2_t ***)(*(_QWORD *)a1 + 8 * v11);
  if (v24)
  {
    *i = (float32x2_t)*v24;
LABEL_38:
    *v24 = i;
    goto LABEL_39;
  }
  *i = *(float32x2_t *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v23 + 8 * v11) = a1 + 16;
  if (*i)
  {
    v25 = *(_QWORD *)(*(_QWORD *)i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v25 >= v9)
        v25 %= v9;
    }
    else
    {
      v25 &= v9 - 1;
    }
    v24 = (float32x2_t **)(*(_QWORD *)a1 + 8 * v25);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_2263AC354(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_2263AC368(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  unint64_t v5;
  uint8x8_t v6;
  uint64_t v7;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(_QWORD *)&v4)
    goto LABEL_16;
  if (prime < *(_QWORD *)&v4)
  {
    v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      v5 = std::__next_prime(v5);
    }
    else
    {
      v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2)
        v5 = v7;
    }
    if (prime <= v5)
      prime = v5;
    if (prime < *(_QWORD *)&v4)
LABEL_16:
      sub_2263AC444(a1, prime);
  }
}

void sub_2263AC444(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint8x8_t v9;
  void *v10;
  _QWORD *v11;
  unint64_t v12;

  if (a2)
  {
    if (a2 >> 61)
      sub_2263AADA8();
    v4 = operator new(8 * a2);
    v5 = *(void **)a1;
    *(_QWORD *)a1 = v4;
    if (v5)
      operator delete(v5);
    v6 = 0;
    *(_QWORD *)(a1 + 8) = a2;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    v7 = *(_QWORD **)(a1 + 16);
    if (v7)
    {
      v8 = v7[1];
      v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2)
          v8 %= a2;
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v8) = a1 + 16;
      v11 = (_QWORD *)*v7;
      if (*v7)
      {
        do
        {
          v12 = v11[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= a2)
              v12 %= a2;
          }
          else
          {
            v12 &= a2 - 1;
          }
          if (v12 != v8)
          {
            if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v12))
            {
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v12) = v7;
              goto LABEL_24;
            }
            *v7 = *v11;
            *v11 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v12);
            **(_QWORD **)(*(_QWORD *)a1 + 8 * v12) = v11;
            v11 = v7;
          }
          v12 = v8;
LABEL_24:
          v7 = v11;
          v11 = (_QWORD *)*v11;
          v8 = v12;
        }
        while (v11);
      }
    }
  }
  else
  {
    v10 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v10)
      operator delete(v10);
    *(_QWORD *)(a1 + 8) = 0;
  }
}

void *sub_2263AC59C(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60)
    sub_2263AADA8();
  return operator new(16 * a2);
}

_QWORD *sub_2263AC5D0(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = sub_2263AC648(result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_2263AC62C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_2263AC648(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 60)
    sub_2263AACDC();
  result = (char *)sub_2263AC59C((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

void sub_2263AC688(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this)
{
  uint64_t v1;
  unint64_t v3;
  int *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _DWORD *v9;
  int v10;

  v1 = *((_QWORD *)this + 4);
  if (v1)
  {
    if (*((_QWORD *)this + 3) || (v3 = atomic_load((unint64_t *)(v1 - 16)), v3 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<int>::_DetachIfNotUnique() [T = int]");
      v4 = (int *)*((_QWORD *)this + 4);
      v5 = *(_QWORD *)this;
      v6 = sub_2263AC7A0((uint64_t)this, *(_QWORD *)this);
      v7 = v6;
      if (v5)
      {
        v8 = 4 * v5;
        v9 = v6;
        do
        {
          v10 = *v4++;
          *v9++ = v10;
          v8 -= 4;
        }
        while (v8);
      }
      sub_2263AC71C((uint64_t)this);
      *((_QWORD *)this + 4) = v7;
    }
  }
}

void sub_2263AC71C(uint64_t a1)
{
  uint64_t v1;
  unint64_t *v2;
  _QWORD *v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  void (*v9)(void);

  v1 = *(_QWORD *)(a1 + 32);
  if (v1)
  {
    v3 = (_QWORD *)(a1 + 24);
    v2 = *(unint64_t **)(a1 + 24);
    if (v2)
    {
      do
      {
        v7 = __ldxr(v2);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v2));
      if (!v8)
      {
        __dmb(9u);
        v9 = *(void (**)(void))(*v3 + 8);
        if (v9)
          v9();
      }
    }
    else
    {
      v4 = (unint64_t *)(v1 - 16);
      do
      {
        v5 = __ldxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
      {
        __dmb(9u);
        operator delete((void *)(*(_QWORD *)(a1 + 32) - 16));
      }
    }
    *v3 = 0;
    v3[1] = 0;
  }
}

_QWORD *sub_2263AC7A0(uint64_t a1, unint64_t a2)
{
  size_t v3;
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;

  v7 = 0;
  v8 = 0;
  sub_2263AC890((uint64_t)&v7);
  if (a2 > 0x3FFFFFFFFFFFFFFBLL)
    v3 = -1;
  else
    v3 = 4 * a2 + 16;
  v4 = operator new(v3);
  *v4 = 1;
  v4[1] = a2;
  while (1)
  {
    v5 = v8;
    LODWORD(v8) = v8 - 1;
    if (!v5)
      break;
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End();
  }
  return v4 + 2;
}

void sub_2263AC828(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2263AC840((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2263AC840(uint64_t a1)
{
  int v2;
  int v3;

  v2 = *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v2 - 1;
  if (v2)
  {
    do
    {
      pxrInternal__aapl__pxrReserved__::TfMallocTag::_End();
      v3 = *(_DWORD *)(a1 + 8);
      *(_DWORD *)(a1 + 8) = v3 - 1;
    }
    while (v3);
  }
  *(_QWORD *)a1 = 0;
  return a1;
}

uint64_t sub_2263AC890(uint64_t a1)
{
  unsigned __int8 v2;
  int v3;
  uint64_t v4;

  v2 = atomic_load(MEMORY[0x24BEE7DE0]);
  if ((v2 & 1) != 0)
  {
    v4 = pxrInternal__aapl__pxrReserved__::TfMallocTag::_Begin();
    *(_QWORD *)a1 = v4;
    if (v4)
    {
      pxrInternal__aapl__pxrReserved__::TfMallocTag::_Begin();
      v3 = 2;
    }
    else
    {
      v3 = 0;
    }
  }
  else
  {
    v3 = 0;
    *(_QWORD *)a1 = 0;
  }
  *(_DWORD *)(a1 + 8) = v3;
  return a1;
}

void sub_2263AC900(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_2263AC900(a1, *a2);
    sub_2263AC900(a1, a2[1]);
    operator delete(a2);
  }
}

uint64_t *sub_2263AC940(uint64_t **a1, uint64_t *a2, int *a3, _DWORD *a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t v10;
  uint64_t *v11;

  v10 = 0;
  v11 = 0;
  v6 = sub_2263AC9C8(a1, a2, &v11, &v10, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = (uint64_t *)operator new(0x20uLL);
    *((_DWORD *)v7 + 7) = *a4;
    sub_2263ACB70(a1, (uint64_t)v11, v8, v7);
  }
  return v7;
}

uint64_t *sub_2263AC9C8(_QWORD *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, int *a5)
{
  uint64_t *v5;
  int v6;
  int v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  BOOL v14;
  int v15;
  uint64_t v16;
  uint64_t *v17;
  int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  int v22;

  v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, v7 = *((_DWORD *)a2 + 7), *a5 < v7))
  {
    v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      v9 = (uint64_t *)*a2;
      do
      {
        v10 = v9;
        v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      v13 = a2;
      do
      {
        v10 = (uint64_t *)v13[2];
        v14 = *v10 == (_QWORD)v13;
        v13 = v10;
      }
      while (v14);
    }
    v15 = *a5;
    if (*((_DWORD *)v10 + 7) < *a5)
      goto LABEL_17;
    v16 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v17 = (uint64_t *)v16;
          v18 = *(_DWORD *)(v16 + 28);
          if (v15 >= v18)
            break;
          v16 = *v17;
          v5 = v17;
          if (!*v17)
            goto LABEL_29;
        }
        if (v18 >= v15)
          break;
        v5 = v17 + 1;
        v16 = v17[1];
      }
      while (v16);
    }
    else
    {
      v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }
  v11 = a2[1];
  if (v11)
  {
    v12 = (uint64_t *)a2[1];
    do
    {
      a4 = v12;
      v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  else
  {
    v19 = a2;
    do
    {
      a4 = (uint64_t *)v19[2];
      v14 = *a4 == (_QWORD)v19;
      v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= *((_DWORD *)a4 + 7))
  {
    v20 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v21 = (uint64_t *)v20;
          v22 = *(_DWORD *)(v20 + 28);
          if (v6 >= v22)
            break;
          v20 = *v21;
          v5 = v21;
          if (!*v21)
            goto LABEL_48;
        }
        if (v22 >= v6)
          break;
        v5 = v21 + 1;
        v20 = v21[1];
      }
      while (v20);
    }
    else
    {
      v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

uint64_t *sub_2263ACB70(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  uint64_t *v5;
  uint64_t *result;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  result = sub_2263ACBC4(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

uint64_t *sub_2263ACBC4(uint64_t *result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *((_BYTE *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      v2 = (uint64_t *)a2[2];
      if (*((_BYTE *)v2 + 24))
        return result;
      v3 = (uint64_t *)v2[2];
      v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), v5 = (_BYTE *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            v9 = (uint64_t **)a2[2];
          }
          else
          {
            v9 = (uint64_t **)v2[1];
            v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = v9;
            *v9 = v2;
            v2[2] = (uint64_t)v9;
            v3 = v9[2];
            v2 = (uint64_t *)*v3;
          }
          *((_BYTE *)v9 + 24) = 1;
          *((_BYTE *)v3 + 24) = 0;
          v13 = v2[1];
          *v3 = v13;
          if (v13)
            *(_QWORD *)(v13 + 16) = v3;
          v2[2] = v3[2];
          *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          v11 = a2[1];
          *v2 = v11;
          if (v11)
          {
            *(_QWORD *)(v11 + 16) = v2;
            v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((_BYTE *)a2 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v2 = (uint64_t *)v3[1];
        v12 = *v2;
        v3[1] = *v2;
        if (v12)
          *(_QWORD *)(v12 + 16) = v3;
        v2[2] = v3[2];
        *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
        *v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((_BYTE *)v2 + 24) = 1;
      a2 = v3;
      *((_BYTE *)v3 + 24) = v3 == result;
      *v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

uint64_t sub_2263ACD5C(uint64_t a1, int *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;
  BOOL v6;
  uint64_t *v7;

  v2 = *(_QWORD *)(a1 + 8);
  if (!v2)
    return 0;
  v3 = *a2;
  v4 = a1 + 8;
  do
  {
    v5 = *(_DWORD *)(v2 + 28);
    v6 = v5 < v3;
    if (v5 >= v3)
      v7 = (uint64_t *)v2;
    else
      v7 = (uint64_t *)(v2 + 8);
    if (!v6)
      v4 = v2;
    v2 = *v7;
  }
  while (*v7);
  if (v4 == a1 + 8 || v3 < *(_DWORD *)(v4 + 28))
    return 0;
  sub_2263ACDD4((uint64_t **)a1, (uint64_t *)v4);
  operator delete((void *)v4);
  return 1;
}

uint64_t *sub_2263ACDD4(uint64_t **a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  BOOL v5;
  uint64_t *v6;

  v2 = (uint64_t *)a2[1];
  if (v2)
  {
    do
    {
      v3 = v2;
      v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
  else
  {
    v4 = a2;
    do
    {
      v3 = (uint64_t *)v4[2];
      v5 = *v3 == (_QWORD)v4;
      v4 = v3;
    }
    while (!v5);
  }
  if (*a1 == a2)
    *a1 = v3;
  v6 = a1[1];
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  sub_2263ACE44(v6, a2);
  return v3;
}

uint64_t *sub_2263ACE44(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  int v5;
  uint64_t **v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v2 = *a2;
  v3 = a2;
  if (*a2)
  {
    v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      v3 = a2;
      goto LABEL_7;
    }
    do
    {
      v3 = v4;
      v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  v2 = v3[1];
  if (v2)
  {
LABEL_7:
    v5 = 0;
    *(_QWORD *)(v2 + 16) = v3[2];
    goto LABEL_8;
  }
  v5 = 1;
LABEL_8:
  v6 = (uint64_t **)v3[2];
  v7 = *v6;
  if (*v6 == v3)
  {
    *v6 = (uint64_t *)v2;
    if (v3 == result)
    {
      v7 = 0;
      result = (uint64_t *)v2;
    }
    else
    {
      v7 = v6[1];
    }
  }
  else
  {
    v6[1] = (uint64_t *)v2;
  }
  v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
  {
    v9 = a2[2];
    v3[2] = v9;
    *(_QWORD *)(v9 + 8 * (*(_QWORD *)a2[2] != (_QWORD)a2)) = v3;
    v11 = *a2;
    v10 = a2[1];
    *(_QWORD *)(v11 + 16) = v3;
    *v3 = v11;
    v3[1] = v10;
    if (v10)
      *(_QWORD *)(v10 + 16) = v3;
    *((_BYTE *)v3 + 24) = *((_BYTE *)a2 + 24);
    if (result == a2)
      result = v3;
  }
  if (!v8 || !result)
    return result;
  if (!v5)
  {
    *(_BYTE *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    v12 = v7[2];
    if (*(uint64_t **)v12 == v7)
      break;
    if (!*((_BYTE *)v7 + 24))
    {
      *((_BYTE *)v7 + 24) = 1;
      *(_BYTE *)(v12 + 24) = 0;
      v13 = *(uint64_t **)(v12 + 8);
      v14 = *v13;
      *(_QWORD *)(v12 + 8) = *v13;
      if (v14)
        *(_QWORD *)(v14 + 16) = v12;
      v13[2] = *(_QWORD *)(v12 + 16);
      *(_QWORD *)(*(_QWORD *)(v12 + 16) + 8 * (**(_QWORD **)(v12 + 16) != v12)) = v13;
      *v13 = v12;
      *(_QWORD *)(v12 + 16) = v13;
      if (result == (uint64_t *)*v7)
        result = v7;
      v7 = *(uint64_t **)(*v7 + 8);
    }
    v15 = (_QWORD *)*v7;
    if (*v7 && !*((_BYTE *)v15 + 24))
    {
      v16 = (uint64_t *)v7[1];
      if (!v16)
        goto LABEL_56;
LABEL_55:
      if (*((_BYTE *)v16 + 24))
      {
LABEL_56:
        *((_BYTE *)v15 + 24) = 1;
        *((_BYTE *)v7 + 24) = 0;
        v22 = v15[1];
        *v7 = v22;
        if (v22)
          *(_QWORD *)(v22 + 16) = v7;
        v15[2] = v7[2];
        *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v15;
        v15[1] = v7;
        v7[2] = (uint64_t)v15;
        v16 = v7;
      }
      else
      {
        v15 = v7;
      }
      v23 = v15[2];
      *((_BYTE *)v15 + 24) = *(_BYTE *)(v23 + 24);
      *(_BYTE *)(v23 + 24) = 1;
      *((_BYTE *)v16 + 24) = 1;
      v24 = *(uint64_t **)(v23 + 8);
      v25 = *v24;
      *(_QWORD *)(v23 + 8) = *v24;
      if (v25)
        *(_QWORD *)(v25 + 16) = v23;
      v24[2] = *(_QWORD *)(v23 + 16);
      *(_QWORD *)(*(_QWORD *)(v23 + 16) + 8 * (**(_QWORD **)(v23 + 16) != v23)) = v24;
      *v24 = v23;
      goto LABEL_72;
    }
    v16 = (uint64_t *)v7[1];
    if (v16 && !*((_BYTE *)v16 + 24))
      goto LABEL_55;
    *((_BYTE *)v7 + 24) = 0;
    v17 = (uint64_t *)v7[2];
    if (v17 == result)
    {
      v17 = result;
LABEL_53:
      *((_BYTE *)v17 + 24) = 1;
      return result;
    }
    if (!*((_BYTE *)v17 + 24))
      goto LABEL_53;
LABEL_49:
    v7 = *(uint64_t **)(v17[2] + 8 * (*(_QWORD *)v17[2] == (_QWORD)v17));
  }
  if (!*((_BYTE *)v7 + 24))
  {
    *((_BYTE *)v7 + 24) = 1;
    *(_BYTE *)(v12 + 24) = 0;
    v18 = v7[1];
    *(_QWORD *)v12 = v18;
    if (v18)
      *(_QWORD *)(v18 + 16) = v12;
    v7[2] = *(_QWORD *)(v12 + 16);
    *(_QWORD *)(*(_QWORD *)(v12 + 16) + 8 * (**(_QWORD **)(v12 + 16) != v12)) = v7;
    v7[1] = v12;
    *(_QWORD *)(v12 + 16) = v7;
    if (result == (uint64_t *)v12)
      result = v7;
    v7 = *(uint64_t **)v12;
  }
  v19 = (_QWORD *)*v7;
  if (*v7 && !*((_BYTE *)v19 + 24))
    goto LABEL_68;
  v20 = (uint64_t *)v7[1];
  if (!v20 || *((_BYTE *)v20 + 24))
  {
    *((_BYTE *)v7 + 24) = 0;
    v17 = (uint64_t *)v7[2];
    if (*((_BYTE *)v17 + 24))
      v21 = v17 == result;
    else
      v21 = 1;
    if (v21)
      goto LABEL_53;
    goto LABEL_49;
  }
  if (v19 && !*((_BYTE *)v19 + 24))
  {
LABEL_68:
    v20 = v7;
  }
  else
  {
    *((_BYTE *)v20 + 24) = 1;
    *((_BYTE *)v7 + 24) = 0;
    v26 = *v20;
    v7[1] = *v20;
    if (v26)
      *(_QWORD *)(v26 + 16) = v7;
    v20[2] = v7[2];
    *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v20;
    *v20 = (uint64_t)v7;
    v7[2] = (uint64_t)v20;
    v19 = v7;
  }
  v23 = v20[2];
  *((_BYTE *)v20 + 24) = *(_BYTE *)(v23 + 24);
  *(_BYTE *)(v23 + 24) = 1;
  *((_BYTE *)v19 + 24) = 1;
  v24 = *(uint64_t **)v23;
  v27 = *(_QWORD *)(*(_QWORD *)v23 + 8);
  *(_QWORD *)v23 = v27;
  if (v27)
    *(_QWORD *)(v27 + 16) = v23;
  v24[2] = *(_QWORD *)(v23 + 16);
  *(_QWORD *)(*(_QWORD *)(v23 + 16) + 8 * (**(_QWORD **)(v23 + 16) != v23)) = v24;
  v24[1] = v23;
LABEL_72:
  *(_QWORD *)(v23 + 16) = v24;
  return result;
}

void sub_2263AD1C8(_QWORD *a1)
{
  uint64_t v1;
  unint64_t v3;

  v1 = a1[4];
  if (v1)
  {
    if (a1[3] || (v3 = atomic_load((unint64_t *)(v1 - 16)), v3 != 1))
      sub_2263AC71C((uint64_t)a1);
    *a1 = 0;
  }
}

void sub_2263AD210(unint64_t *a1, unint64_t a2, _DWORD **a3)
{
  unint64_t v3;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  unint64_t *v14;
  uint64_t v15;
  unint64_t *v16;
  uint64_t v17;
  _DWORD *v18;
  unint64_t v19;
  unint64_t *v20;
  uint64_t v21;
  unint64_t *v22;
  int v23;
  _DWORD *v24;
  uint64_t v25;

  v3 = *a1;
  if (*a1 == a2)
    return;
  if (!a2)
    goto LABEL_18;
  v7 = (unint64_t *)a1[4];
  if (v7)
  {
    if (!a1[3])
    {
      v8 = atomic_load(v7 - 2);
      if (v8 == 1)
      {
        if (v3 < a2)
        {
          v9 = a1[4];
          if (*(_QWORD *)(v9 - 8) < a2)
          {
            v10 = sub_2263AC7A0((uint64_t)a1, a2);
            v7 = v10;
            if (v3)
            {
              v11 = 0;
              do
              {
                *(_DWORD *)((char *)v10 + v11) = *(_DWORD *)(v9 + v11);
                v11 += 4;
              }
              while (4 * v3 != v11);
            }
          }
          v12 = *a3;
          v13 = 4 * v3;
          do
          {
            *(_DWORD *)((char *)v7 + v13) = *v12;
            v13 += 4;
          }
          while (4 * a2 != v13);
        }
        v14 = v7;
        goto LABEL_29;
      }
      v7 = (unint64_t *)a1[4];
    }
    if (v3 >= a2)
      v19 = a2;
    else
      v19 = *a1;
    v20 = sub_2263AC7A0((uint64_t)a1, a2);
    v14 = v20;
    if (v19)
    {
      v21 = 4 * v19;
      v22 = v20;
      do
      {
        v23 = *(_DWORD *)v7;
        v7 = (unint64_t *)((char *)v7 + 4);
        *(_DWORD *)v22 = v23;
        v22 = (unint64_t *)((char *)v22 + 4);
        v21 -= 4;
      }
      while (v21);
    }
    if (v3 < a2)
    {
      v24 = *a3;
      v25 = 4 * v3;
      do
      {
        *(_DWORD *)((char *)v20 + v25) = *v24;
        v25 += 4;
      }
      while (4 * a2 != v25);
    }
    goto LABEL_29;
  }
  v15 = 4 * a2;
  if (4 * a2 / a2 != 4)
  {
LABEL_18:
    sub_2263AD1C8(a1);
    return;
  }
  v16 = sub_2263AC7A0((uint64_t)a1, a2);
  v14 = v16;
  v17 = 0;
  v18 = *a3;
  do
  {
    *(_DWORD *)((char *)v16 + v17) = *v18;
    v17 += 4;
  }
  while (v15 != v17);
LABEL_29:
  if (v14 != (unint64_t *)a1[4])
  {
    sub_2263AC71C((uint64_t)a1);
    a1[4] = (unint64_t)v14;
  }
  *a1 = a2;
}

uint64_t sub_2263AD3C4(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 21)
    return 1;
  if ((v1 & 4) != 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_24EDD68D8);
  else
    return 0;
}

_QWORD *sub_2263AD3FC(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  if (a1 != a2)
  {
    if (a2[1])
    {
      v8 = 0;
      v9 = 0;
      sub_2263AD508((uint64_t)&v8, (uint64_t)a1);
      v4 = a2[1];
      a1[1] = v4;
      if ((~*((_DWORD *)a2 + 2) & 3) != 0)
        (*(void (**)(_QWORD *, _QWORD *))((v4 & 0xFFFFFFFFFFFFFFF8) + 40))(a2, a1);
      else
        *a1 = *a2;
      a2[1] = 0;
      if (v9)
        (*(void (**)(uint64_t *))(v9 + 32))(&v8);
    }
    else
    {
      v5 = a1[1];
      if (v5)
        v6 = (a1[1] & 3) == 3;
      else
        v6 = 1;
      if (!v6)
        (*(void (**)(_QWORD *))((v5 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
      a1[1] = 0;
    }
  }
  return a1;
}

void sub_2263AD4F0(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_2263AACCC(a1);
  _Unwind_Resume(a1);
}

uint64_t sub_2263AD508(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  BOOL v4;
  unint64_t v5;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3)
    v4 = (~(_BYTE)v3 & 3) == 0;
  else
    v4 = 1;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
  }
  else
  {
    v5 = v3 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)(a1 + 8) = v5;
    if (v5)
      (*(void (**)(uint64_t, uint64_t))(v5 + 40))(a2, a1);
  }
  return a1;
}

uint64_t sub_2263AD568(uint64_t a1)
{
  uint64_t v2;
  BOOL v3;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
    v3 = (*(_QWORD *)(a1 + 8) & 3) == 3;
  else
    v3 = 1;
  if (!v3)
    (*(void (**)(uint64_t))((v2 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  *(_QWORD *)(a1 + 8) = 0;
  return a1;
}

double sub_2263AD5B4@<D0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  double result;

  v2 = operator new();
  result = 0.0;
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_QWORD *)(v2 + 32) = 0;
  *a1 = v2;
  a1[1] = (uint64_t)sub_2263AD60C;
  a1[2] = (uint64_t)&stru_24EDD68D8;
  return result;
}

uint64_t sub_2263AD60C(uint64_t result)
{
  if (result)
  {
    sub_2263AC71C(result);
    JUMPOUT(0x2276980E0);
  }
  return result;
}

uint64_t sub_2263AD654(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (!result)
    __assert_rtn("operator->", "intrusive_ptr.hpp", 199, "px != 0");
  return result;
}

void sub_2263AD694(uint64_t a1, _DWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  _DWORD *v15;
  int v16;

  if (!*(_DWORD *)(a1 + 8))
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)(a1 + 24))
      goto LABEL_14;
    v5 = *(_QWORD *)(a1 + 32);
    if (!v5)
      goto LABEL_10;
    v6 = atomic_load((unint64_t *)(v5 - 16));
    if (v6 != 1)
      goto LABEL_14;
    v5 = *(_QWORD *)(a1 + 32);
    if (v5)
    {
      if (*(_QWORD *)(a1 + 24))
        v7 = (uint64_t *)a1;
      else
        v7 = (uint64_t *)(v5 - 8);
      v8 = *v7;
    }
    else
    {
LABEL_10:
      v8 = 0;
    }
    if (v4 != v8)
    {
      *(_DWORD *)(v5 + 4 * v4) = *a2;
LABEL_13:
      ++*(_QWORD *)a1;
      return;
    }
LABEL_14:
    v9 = *(int **)(a1 + 32);
    v10 = 1;
    do
    {
      v11 = v10;
      v10 *= 2;
    }
    while (v11 < v4 + 1);
    v12 = sub_2263AC7A0(a1, v11);
    v13 = v12;
    if (v4)
    {
      v14 = 4 * v4;
      v15 = v12;
      do
      {
        v16 = *v9++;
        *v15++ = v16;
        v14 -= 4;
      }
      while (v14);
    }
    *((_DWORD *)v12 + v4) = *a2;
    sub_2263AC71C(a1);
    *(_QWORD *)(a1 + 32) = v13;
    goto LABEL_13;
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper();
}

void sub_2263AD93C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2263AD96C(void *a1, char *a2)
{
  _QWORD *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *__p[2];
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;

  v3 = a1;
  pxrInternal__aapl__pxrReserved__::ArGetResolver((pxrInternal__aapl__pxrReserved__ *)v3);
  v9 = 0;
  v10 = 0;
  if (a2[23] < 0)
  {
    sub_2263AE36C(__p, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a2;
    v8 = *((_QWORD *)a2 + 2);
  }
  pxrInternal__aapl__pxrReserved__::ArResolver::OpenAsset();
  if (SHIBYTE(v8) < 0)
    operator delete(__p[0]);
  if (v9)
  {
    sub_2263ADAB4(v3 + 1, &v9);
    v3[5] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
  }
  else
  {
    if (a2[23] < 0)
      a2 = *(char **)a2;
    NSLog(CFSTR("Warning: Unable to load file at %s"), a2);
  }
  v4 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }

}

void sub_2263ADA78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18)
{
  void *v18;

  _Unwind_Resume(a1);
}

_QWORD *sub_2263ADAB4(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v4 = *a2;
  v3 = a2[1];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = (std::__shared_weak_count *)a1[1];
  *a1 = v4;
  a1[1] = v3;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return a1;
}

void sub_2263ADBE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  void *v16;
  void *v17;

  if (a15 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_2263ADDA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18)
{
  void *v18;
  void *v19;
  void *v20;
  uint64_t v21;

  if (*(char *)(v21 - 41) < 0)
    operator delete(*(void **)(v21 - 64));

  _Unwind_Resume(a1);
}

id sub_2263ADE48(id *a1)
{
  id result;
  char *v2;
  void *v3;
  SEL v4;
  id v5;

  result = *a1;
  if (!result)
  {
    v2 = j__strrchr("/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/usd/pxr/base/tf/refPtr.h", 47);
    sub_2263AE528((unint64_t)"/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/usd/pxr/base/tf/refPtr.h", (uint64_t)v2, 0x2Fu);
    v3 = (void *)pxrInternal__aapl__pxrReserved__::Tf_PostNullSmartPtrDereferenceFatalError();
    return +[USKResource resourceWithPath:](v3, v4, v5);
  }
  return result;
}

void sub_2263ADF6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  void *v16;

  if (a15 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_2263AE058(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  void *v16;
  void *v17;

  if (a15 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_2263AE0FC(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = (std::__shared_weak_count *)a1[1];
  *a1 = 0;
  a1[1] = 0;
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

uint64_t sub_2263AE20C(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v3 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v4 = *(std::__shared_weak_count **)(a1 + 8);
  *(_OWORD *)a1 = v3;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return a1;
}

_QWORD *sub_2263AE2A8(_QWORD *a1, char *__s)
{
  size_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    sub_2263AE358();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v4;
    v6 = a1;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  return a1;
}

void sub_2263AE358()
{
  sub_2263AACF0("basic_string");
}

void *sub_2263AE36C(_BYTE *__dst, void *__src, unint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v5 = __dst;
  if (a3 > 0x16)
  {
    if (a3 >= 0x7FFFFFFFFFFFFFF8)
      sub_2263AE358();
    v6 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17)
      v6 = a3 | 7;
    v7 = v6 + 1;
    v8 = operator new(v6 + 1);
    v5[1] = a3;
    v5[2] = v7 | 0x8000000000000000;
    *v5 = v8;
    v5 = v8;
  }
  else
  {
    __dst[23] = a3;
  }
  return memmove(v5, __src, a3 + 1);
}

uint64_t sub_2263AE3F8(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **sub_2263AE450(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **a1)
{
  sub_2263AE47C((int)a1, *a1);
  return a1;
}

void sub_2263AE47C(int a1, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *this)
{
  unsigned int *v3;
  int v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;

  if (!this)
    return;
  v3 = (unsigned int *)((char *)this + 8);
  v4 = *((_DWORD *)this + 2);
  if (v4 < 0)
  {
    if (v4 == -2)
    {
      v7 = 4294967294;
      goto LABEL_16;
    }
    v7 = __ldxr(v3);
    if ((_DWORD)v7 == v4)
    {
      if (!__stlxr(v4 + 1, v3))
      {
        v8 = 1;
        goto LABEL_13;
      }
    }
    else
    {
      __clrex();
    }
    v8 = 0;
LABEL_13:
    if (v8)
    {
      if (v4 != -1)
        return;
      goto LABEL_17;
    }
LABEL_16:
    if ((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter::_RemoveRefMaybeLocked(this, (const TfRefBase *)v7) & 1) == 0)return;
LABEL_17:
    (*(void (**)(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *))(*(_QWORD *)this + 8))(this);
    return;
  }
  do
  {
    v5 = __ldxr(v3);
    v6 = v5 - 1;
  }
  while (__stlxr(v6, v3));
  if (!v6)
    goto LABEL_17;
}

unint64_t sub_2263AE528(unint64_t result, uint64_t a2, unsigned __int8 a3)
{
  unsigned __int8 *v3;

  if (a2)
  {
    if (a2 == result)
    {
      return a2 + 1;
    }
    else
    {
      v3 = (unsigned __int8 *)(a2 - 1);
      if (a2 - 1 > result)
      {
        while (*v3 != a3)
        {
          if (--v3 == (unsigned __int8 *)result)
            goto LABEL_10;
        }
        result = (unint64_t)v3;
      }
LABEL_10:
      ++result;
    }
  }
  return result;
}

uint64_t sub_2263AE578(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;

  v2 = *(_QWORD *)(a1 + 72);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  v5 = *(_QWORD *)(a1 + 56);
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  sub_2263AC71C(a1 + 16);
  return sub_2263AD568(a1);
}

uint64_t sub_2263AE5E4(_QWORD *a1, __n128 *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  char v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unint64_t v13;
  __int128 v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v18;
  unint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int *v23;
  unsigned int v24;
  uint64_t result;
  _QWORD *v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int *v29;
  unsigned int v30;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v31;
  _QWORD *v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int *v35;
  unsigned int v36;
  __n128 *v37;
  uint64_t *v38;
  _QWORD v39[2];
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  _QWORD v43[2];
  uint64_t v44;
  int v45;
  uint64_t v46[3];

  v46[2] = *MEMORY[0x24BDAC8D0];
  v5 = a1[1];
  v38 = a1 + 1;
  if (a1[2] == v5)
    goto LABEL_9;
  v37 = a2;
  v6 = 0;
  v7 = 0;
  v8 = 0;
  v9 = 1;
  do
  {
    MEMORY[0x2276976D8](v39, "normals");
    v10 = *(_QWORD *)(v5 + 88 * v6 + 56);
    v11 = (unsigned int *)(v39[0] & 0xFFFFFFFFFFFFFFF8);
    if ((v39[0] & 7) != 0)
    {
      do
        v12 = __ldxr(v11);
      while (__stlxr(v12 - 2, v11));
    }
    v13 = v10 & 0xFFFFFFFFFFFFFFF8;
    v9 &= v13 != (_QWORD)v11;
    if ((unsigned int *)v13 == v11)
      v8 = v7;
    v5 = a1[1];
    v6 = ++v7;
  }
  while (0x2E8BA2E8BA2E8BA3 * ((a1[2] - v5) >> 3) > (unint64_t)v7);
  a2 = v37;
  if ((v9 & 1) != 0)
  {
LABEL_9:
    v46[0] = 0;
    v46[1] = 0;
    sub_2263AEA40(v46, a2);
    sub_2263B0700(v39, v46);
    v14 = *(_OWORD *)(a3 + 16);
    v40 = *(_OWORD *)a3;
    v41 = v14;
    v15 = *(_QWORD *)(a3 + 32);
    v42 = v15;
    if (v15)
    {
      v16 = (unint64_t *)(v15 - 16);
      if (*((_QWORD *)&v41 + 1))
        v16 = (unint64_t *)*((_QWORD *)&v41 + 1);
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
    }
    MEMORY[0x2276976D8](v43, "normals");
    v18 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x24BEE82A0]);
    if (!v18)
      v18 = sub_2263B1434(MEMORY[0x24BEE82A0]);
    v43[1] = *((_QWORD *)v18 + 77);
    MEMORY[0x2276976D8](&v44, "faceVarying");
    v45 = 1;
    v19 = a1[2];
    if (v19 >= a1[3])
    {
      v20 = sub_2263B1500(v38, (uint64_t)v39);
    }
    else
    {
      sub_2263B148C((uint64_t)v38, (uint64_t)v39);
      v20 = v19 + 88;
    }
    a1[2] = v20;
    if ((v44 & 7) != 0)
    {
      v21 = (unsigned int *)(v44 & 0xFFFFFFFFFFFFFFF8);
      do
        v22 = __ldxr(v21);
      while (__stlxr(v22 - 2, v21));
    }
    if ((v43[0] & 7) != 0)
    {
      v23 = (unsigned int *)(v43[0] & 0xFFFFFFFFFFFFFFF8);
      do
        v24 = __ldxr(v23);
      while (__stlxr(v24 - 2, v23));
    }
    sub_2263AC71C((uint64_t)&v40);
    sub_2263AD568((uint64_t)v39);
    return sub_2263AD568((uint64_t)v46);
  }
  else
  {
    sub_2263AEA40((uint64_t *)(v5 + 88 * v8), v37);
    sub_2263AA5D0(*v38 + 88 * v8 + 16, (__int128 *)a3);
    MEMORY[0x2276976D8](v39, "normals");
    v26 = (_QWORD *)(*v38 + 88 * v8 + 56);
    if (v39 == v26)
    {
      if ((v39[0] & 7) != 0)
      {
        v29 = (unsigned int *)(v39[0] & 0xFFFFFFFFFFFFFFF8);
        do
          v30 = __ldxr(v29);
        while (__stlxr(v30 - 2, v29));
      }
    }
    else
    {
      if ((*v26 & 7) != 0)
      {
        v27 = (unsigned int *)(*v26 & 0xFFFFFFFFFFFFFFF8);
        do
          v28 = __ldxr(v27);
        while (__stlxr(v28 - 2, v27));
      }
      *v26 = v39[0];
    }
    v31 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x24BEE82A0]);
    if (!v31)
      v31 = sub_2263B1434(MEMORY[0x24BEE82A0]);
    *(_QWORD *)(*v38 + 88 * v8 + 64) = *((_QWORD *)v31 + 77);
    result = MEMORY[0x2276976D8](v39, "faceVarying");
    v32 = (_QWORD *)(*v38 + 88 * v8 + 72);
    if (v39 == v32)
    {
      if ((v39[0] & 7) != 0)
      {
        v35 = (unsigned int *)(v39[0] & 0xFFFFFFFFFFFFFFF8);
        do
          v36 = __ldxr(v35);
        while (__stlxr(v36 - 2, v35));
      }
    }
    else
    {
      if ((*v32 & 7) != 0)
      {
        v33 = (unsigned int *)(*v32 & 0xFFFFFFFFFFFFFFF8);
        do
          v34 = __ldxr(v33);
        while (__stlxr(v34 - 2, v33));
      }
      *v32 = v39[0];
    }
    *(_DWORD *)(*v38 + 88 * v8 + 80) = 1;
  }
  return result;
}

void sub_2263AE9BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  if ((v15 & 7) != 0)
  {
    v5 = (unsigned int *)(v15 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  sub_2263AC71C(v3);
  sub_2263AD568((uint64_t)va);
  sub_2263AD568((uint64_t)va1);
  _Unwind_Resume(a1);
}

__n128 sub_2263AEA40(uint64_t *a1, __n128 *a2)
{
  __n128 *v4;
  unint64_t v5;
  unint64_t v6;
  __n128 result;
  unint64_t v8;
  unint64_t v9;
  _OWORD v10[2];
  uint64_t v11;

  if ((sub_2263AD3C4((pxrInternal__aapl__pxrReserved__::VtValue *)a1) & 1) == 0)
  {
    v11 = 0;
    memset(v10, 0, sizeof(v10));
    sub_2263B0B68(a1, (uint64_t)v10);
    sub_2263AC71C((uint64_t)v10);
  }
  v4 = (__n128 *)sub_2263B13A4(a1);
  v5 = v4[2].n128_u64[0];
  v4[2].n128_u64[0] = a2[2].n128_u64[0];
  a2[2].n128_u64[0] = v5;
  v6 = v4[1].n128_u64[0];
  result = *v4;
  v8 = a2[1].n128_u64[0];
  *v4 = *a2;
  v4[1].n128_u64[0] = v8;
  *a2 = result;
  a2[1].n128_u64[0] = v6;
  v9 = v4[1].n128_u64[1];
  v4[1].n128_u64[1] = a2[1].n128_u64[1];
  a2[1].n128_u64[1] = v9;
  return result;
}

void sub_2263AEADC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2263AC71C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2263AEAF4(uint64_t a1, int a2)
{
  uint64_t v4;
  float v5;
  unint64_t *v6;
  float32x4_t v8;
  float32x4_t v9;
  uint64_t v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  float32x4_t v18;
  float v19;
  unsigned int v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  float32x4_t v25;
  float32x4_t v26;
  float v27;
  float v28;
  float32x2_t v29;
  float32x2_t v30;
  uint64_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float v34;
  float32x4_t v35;
  float v36;
  float32x2_t v37;
  float32x2_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  int32x4_t v43;
  float32x4_t v44;
  unsigned __int32 v45;
  float32x2_t v46;
  float32x2_t v47;
  uint64_t v48;
  unsigned int v49;
  unint64_t v50;
  const char *v51;
  float v52;
  uint64_t v53;
  __int32 v54;
  __n128 v55[2];
  uint64_t v56;
  _OWORD v57[2];
  uint64_t v58;

  v58 = 0;
  memset(v57, 0, sizeof(v57));
  sub_2263AA560((uint64_t)v57, *(unsigned int *)(a1 + 72));
  v56 = 0;
  memset(v55, 0, sizeof(v55));
  v4 = sub_2263AAC04(*(pxrInternal__aapl__pxrReserved__::VtValue **)(a1 + 8));
  v5 = 1.0;
  if (a2)
    v5 = -1.0;
  v52 = v5;
  v6 = (unint64_t *)MEMORY[0x24BEE82A0];
  if (!atomic_load(MEMORY[0x24BEE82A0]))
    sub_2263B1434(MEMORY[0x24BEE82A0]);
  if ((pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==() & 1) != 0)
    goto LABEL_43;
  if (!atomic_load(v6))
    sub_2263B1434(MEMORY[0x24BEE82A0]);
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==())
  {
LABEL_43:
    if (*(_QWORD *)(a1 + 32))
    {
      v11 = 0;
      v12 = 0;
      v13 = 0;
      do
      {
        v14 = *(unsigned int *)(*(_QWORD *)(a1 + 64) + 4 * v11);
        if ((_DWORD)v14)
        {
          v15 = 0;
          v16 = *(_QWORD *)(a1 + 104);
          v17 = *(_QWORD *)(v4 + 32);
          v18.i64[0] = 0;
          v18.i32[2] = 0;
          v19 = 1.0;
          do
          {
            v20 = ((int)v14 - 1 + (int)v15) % v14 + v13;
            v21 = v14 - 1 == v15;
            v22 = v17 + 12 * *(int *)(v16 + 4 * (v13 + v15));
            v9.i64[0] = *(_QWORD *)v22;
            v9.i32[2] = *(_DWORD *)(v22 + 8);
            ++v15;
            v23 = v17 + 12 * *(int *)(v16 + 4 * v20);
            v8.i64[0] = *(_QWORD *)v23;
            v8.i32[2] = *(_DWORD *)(v23 + 8);
            if (v21)
              v24 = 0;
            else
              v24 = v15;
            v25 = vsubq_f32(v8, v9);
            v26 = vmulq_f32(v25, v25);
            v27 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v26, 2), vaddq_f32(v26, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v26.f32, 1))).f32[0];
            v8 = 0uLL;
            if (v27 > COERCE_FLOAT(512))
            {
              v28 = v27;
              v29 = vrsqrte_f32((float32x2_t)LODWORD(v27));
              v30 = vmul_f32(v29, vrsqrts_f32((float32x2_t)LODWORD(v28), vmul_f32(v29, v29)));
              v8 = vmulq_n_f32(v25, vmul_f32(v30, vrsqrts_f32((float32x2_t)LODWORD(v28), vmul_f32(v30, v30))).f32[0]);
            }
            v31 = v17 + 12 * *(int *)(v16 + 4 * (v24 + v13));
            v25.i64[0] = *(_QWORD *)v31;
            v25.i32[2] = *(_DWORD *)(v31 + 8);
            v32 = vsubq_f32(v25, v9);
            v33 = vmulq_f32(v32, v32);
            v34 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v33, 2), vaddq_f32(v33, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v33.f32, 1))).f32[0];
            v35 = 0uLL;
            if (v34 > COERCE_FLOAT(512))
            {
              v36 = v34;
              v37 = vrsqrte_f32((float32x2_t)LODWORD(v34));
              v38 = vmul_f32(v37, vrsqrts_f32((float32x2_t)LODWORD(v36), vmul_f32(v37, v37)));
              v35 = vmulq_n_f32(v32, vmul_f32(v38, vrsqrts_f32((float32x2_t)LODWORD(v36), vmul_f32(v38, v38))).f32[0]);
            }
            v39 = vmulq_f32(v8, v8);
            v9 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v39, 2), vaddq_f32(v39, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v39.f32, 1)));
            if (sqrtf(v9.f32[0]) != 0.0)
            {
              v40 = vmulq_f32(v35, v35);
              v21 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v40, 2), vaddq_f32(v40, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v40.f32, 1))).f32[0]) == 0.0;
              v41 = vmulq_f32(v8, v35);
              v9 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v41, 2), vaddq_f32(v41, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v41.f32, 1)));
              v9.f32[0] = fabsf(v9.f32[0]);
              if (!v21 && v9.f32[0] < v19)
              {
                v43 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v8, (int32x4_t)v8), (int8x16_t)v8, 0xCuLL), vnegq_f32(v35)), v8, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v35, (int32x4_t)v35), (int8x16_t)v35, 0xCuLL));
                v44 = vmulq_n_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v43, v43), (int8x16_t)v43, 0xCuLL), v52);
                v18 = vmulq_f32(v44, v44);
                v8 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v18, 2), vaddq_f32(v18, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v18.f32, 1)));
                v18.i64[0] = 0;
                v18.i32[2] = 0;
                if (v8.f32[0] > COERCE_FLOAT(512))
                {
                  v45 = v8.i32[0];
                  v46 = vrsqrte_f32((float32x2_t)v8.u32[0]);
                  v47 = vmul_f32(v46, vrsqrts_f32((float32x2_t)v45, vmul_f32(v46, v46)));
                  v18 = vmulq_n_f32(v44, vmul_f32(v47, vrsqrts_f32((float32x2_t)v45, vmul_f32(v47, v47))).f32[0]);
                }
                v19 = v9.f32[0];
              }
            }
          }
          while (v14 != v15);
        }
        else
        {
          v18.i64[0] = 0;
          v18.i32[2] = 0;
        }
        v53 = v18.i64[0];
        v54 = v18.i32[2];
        sub_2263B1AF0((uint64_t)v55, &v53);
        v48 = v14;
        v49 = v13;
        if ((_DWORD)v14)
        {
          do
          {
            sub_2263AC688((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v57);
            *(_DWORD *)(v58 + 4 * v49++) = v12;
            --v48;
          }
          while (v48);
        }
        v13 += v14;
        v11 = ++v12;
      }
      while (*(_QWORD *)(a1 + 32) > (unint64_t)v12);
    }
    sub_2263AE5E4((_QWORD *)a1, v55, (uint64_t)v57);
  }
  else
  {
    v50 = *(_QWORD *)a1 & 0xFFFFFFFFFFFFFFF8;
    if (v50)
    {
      v51 = (const char *)(v50 + 16);
      if (*(char *)(v50 + 39) < 0)
        v51 = *(const char **)v51;
    }
    else
    {
      v51 = "";
    }
    printf("Mesh %s does contain valid position data. Skipping normal computation.\n", v51);
  }
  sub_2263AC71C((uint64_t)v55);
  sub_2263AC71C((uint64_t)v57);
}

void sub_2263AEEC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  sub_2263AC71C((uint64_t)va);
  sub_2263AC71C((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_2263AEEF8(uint64_t a1)
{
  return *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 32);
}

uint64_t sub_2263AEF08(uint64_t a1, int a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  if (*(_QWORD *)(v2 + 32) <= (unint64_t)a2)
    sub_226408D24();
  return *(unsigned int *)(*(_QWORD *)(v2 + 64) + 4 * a2);
}

float sub_2263AEF3C(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t v5;
  uint64_t v6;
  float result;

  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  v6 = *(_QWORD *)(sub_2263AAC04(*(pxrInternal__aapl__pxrReserved__::VtValue **)(v5 + 8)) + 32)
     + 12 * *(int *)(*(_QWORD *)(v5 + 104) + 4 * (3 * a3 + a4));
  *(_DWORD *)a2 = *(_DWORD *)v6;
  *(_DWORD *)(a2 + 4) = *(_DWORD *)(v6 + 4);
  result = *(float *)(v6 + 8);
  *(float *)(a2 + 8) = result;
  return result;
}

uint64_t sub_2263AEFAC(uint64_t result, uint64_t a2, int a3, int a4)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  int v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  _QWORD *v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int *v26;
  unsigned int v27;
  int v28;
  unint64_t v29;
  _DWORD *v30;
  unsigned int v31;
  uint64_t v32;

  v5 = *(_QWORD *)(result + 8);
  v6 = *(_DWORD *)(v5 + 4);
  if (v6 == -1)
  {
    *(_QWORD *)a2 = 0;
    *(_DWORD *)(a2 + 8) = 0;
    return result;
  }
  v9 = *(_QWORD *)(v5 + 8);
  v10 = sub_2263AAC04((pxrInternal__aapl__pxrReserved__::VtValue *)(*(_QWORD *)(v9 + 8) + 88 * v6));
  v11 = *(_QWORD *)(v9 + 8);
  v12 = v11 + 88 * v6;
  v13 = *(_QWORD *)(v12 + 72);
  if ((v13 & 7) != 0)
  {
    v14 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFFFF8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 2, v14));
    if ((v15 & 1) == 0)
      v13 &= 0xFFFFFFFFFFFFFFF8;
  }
  result = MEMORY[0x2276976D8](&v32, "faceVarying");
  v16 = 3 * a3;
  v17 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFFFF8);
  v18 = (unsigned int *)(v32 & 0xFFFFFFFFFFFFFFF8);
  if ((v32 & 7) != 0)
  {
    do
      v19 = __ldxr(v18);
    while (__stlxr(v19 - 2, v18));
  }
  v20 = (v16 + a4);
  v21 = (_QWORD *)(v12 + 16);
  if (v17 == v18)
  {
    if (!*v21)
    {
      v30 = (_DWORD *)(*(_QWORD *)(v10 + 32) + 12 * v20);
      goto LABEL_31;
    }
    LODWORD(v29) = *(_DWORD *)(*(_QWORD *)(v11 + 88 * v6 + 48) + 4 * v20);
    goto LABEL_27;
  }
  result = MEMORY[0x2276976D8](&v32, "vertex");
  v22 = (unsigned int *)(v32 & 0xFFFFFFFFFFFFFFF8);
  if ((v32 & 7) != 0)
  {
    do
      v23 = __ldxr(v22);
    while (__stlxr(v23 - 2, v22));
  }
  if (v17 == v22)
  {
    v29 = *(int *)(*(_QWORD *)(v9 + 104) + 4 * v20);
    if (!*v21)
      goto LABEL_27;
    goto LABEL_26;
  }
  result = MEMORY[0x2276976D8](&v32, "uniform");
  v24 = (unsigned int *)(v32 & 0xFFFFFFFFFFFFFFF8);
  if ((v32 & 7) != 0)
  {
    do
      v25 = __ldxr(v24);
    while (__stlxr(v25 - 2, v24));
  }
  if (v17 == v24)
  {
    v29 = v20 / 3uLL;
    if (!*v21)
    {
      v30 = (_DWORD *)(*(_QWORD *)(v10 + 32) + 12 * v29);
      goto LABEL_31;
    }
LABEL_26:
    LODWORD(v29) = *(_DWORD *)(*(_QWORD *)(v11 + 88 * v6 + 48) + 4 * v29);
LABEL_27:
    v30 = (_DWORD *)(*(_QWORD *)(v10 + 32) + 12 * (int)v29);
    goto LABEL_31;
  }
  result = MEMORY[0x2276976D8](&v32, "constant");
  v26 = (unsigned int *)(v32 & 0xFFFFFFFFFFFFFFF8);
  if ((v32 & 7) != 0)
  {
    do
      v27 = __ldxr(v26);
    while (__stlxr(v27 - 2, v26));
  }
  if (v17 != v26)
  {
    *(_QWORD *)a2 = 0;
    v28 = 0;
    goto LABEL_32;
  }
  v30 = *(_DWORD **)(v10 + 32);
LABEL_31:
  *(_DWORD *)a2 = *v30;
  *(_DWORD *)(a2 + 4) = v30[1];
  v28 = v30[2];
LABEL_32:
  *(_DWORD *)(a2 + 8) = v28;
  if ((v13 & 7) != 0)
  {
    do
      v31 = __ldxr(v17);
    while (__stlxr(v31 - 2, v17));
  }
  return result;
}

void sub_2263AF214(_Unwind_Exception *a1)
{
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;

  if ((v1 & 7) != 0)
  {
    v2 = (unsigned int *)(v1 & 0xFFFFFFFFFFFFFFF8);
    do
      v3 = __ldxr(v2);
    while (__stlxr(v3 - 2, v2));
  }
  _Unwind_Resume(a1);
}

uint64_t sub_2263AF240(uint64_t result, uint64_t a2, int a3, int a4)
{
  unsigned int *v5;
  unsigned int v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  int v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  _QWORD *v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int *v26;
  unsigned int v27;
  int v28;
  unint64_t v29;
  _DWORD *v30;
  unsigned int v31;
  uint64_t v32;

  v5 = *(unsigned int **)(result + 8);
  v6 = *v5;
  if (*v5 == -1)
  {
    *(_QWORD *)a2 = 0;
    return result;
  }
  v9 = *((_QWORD *)v5 + 1);
  v10 = sub_2263AF4A8((pxrInternal__aapl__pxrReserved__::VtValue *)(*(_QWORD *)(v9 + 8) + 88 * v6));
  v11 = *(_QWORD *)(v9 + 8);
  v12 = v11 + 88 * v6;
  v13 = *(_QWORD *)(v12 + 72);
  if ((v13 & 7) != 0)
  {
    v14 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFFFF8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 2, v14));
    if ((v15 & 1) == 0)
      v13 &= 0xFFFFFFFFFFFFFFF8;
  }
  result = MEMORY[0x2276976D8](&v32, "faceVarying");
  v16 = 3 * a3;
  v17 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFFFF8);
  v18 = (unsigned int *)(v32 & 0xFFFFFFFFFFFFFFF8);
  if ((v32 & 7) != 0)
  {
    do
      v19 = __ldxr(v18);
    while (__stlxr(v19 - 2, v18));
  }
  v20 = (v16 + a4);
  v21 = (_QWORD *)(v12 + 16);
  if (v17 == v18)
  {
    if (!*v21)
    {
      v30 = (_DWORD *)(*(_QWORD *)(v10 + 32) + 8 * v20);
      goto LABEL_28;
    }
    v29 = *(int *)(*(_QWORD *)(v11 + 88 * v6 + 48) + 4 * v20);
    goto LABEL_27;
  }
  result = MEMORY[0x2276976D8](&v32, "vertex");
  v22 = (unsigned int *)(v32 & 0xFFFFFFFFFFFFFFF8);
  if ((v32 & 7) != 0)
  {
    do
      v23 = __ldxr(v22);
    while (__stlxr(v23 - 2, v22));
  }
  if (v17 == v22)
  {
    v29 = *(int *)(*(_QWORD *)(v9 + 104) + 4 * v20);
    goto LABEL_25;
  }
  result = MEMORY[0x2276976D8](&v32, "uniform");
  v24 = (unsigned int *)(v32 & 0xFFFFFFFFFFFFFFF8);
  if ((v32 & 7) != 0)
  {
    do
      v25 = __ldxr(v24);
    while (__stlxr(v25 - 2, v24));
  }
  if (v17 == v24)
  {
    v29 = v20 / 3uLL;
LABEL_25:
    if (*v21)
      v29 = *(int *)(*(_QWORD *)(v11 + 88 * v6 + 48) + 4 * v29);
LABEL_27:
    v30 = (_DWORD *)(*(_QWORD *)(v10 + 32) + 8 * v29);
    goto LABEL_28;
  }
  result = MEMORY[0x2276976D8](&v32, "constant");
  v26 = (unsigned int *)(v32 & 0xFFFFFFFFFFFFFFF8);
  if ((v32 & 7) != 0)
  {
    do
      v27 = __ldxr(v26);
    while (__stlxr(v27 - 2, v26));
  }
  if (v17 != v26)
  {
    *(_DWORD *)a2 = 0;
    v28 = 0;
    goto LABEL_29;
  }
  v30 = *(_DWORD **)(v10 + 32);
LABEL_28:
  *(_DWORD *)a2 = *v30;
  v28 = v30[1];
LABEL_29:
  *(_DWORD *)(a2 + 4) = v28;
  if ((v13 & 7) != 0)
  {
    do
      v31 = __ldxr(v17);
    while (__stlxr(v31 - 2, v17));
  }
  return result;
}

void sub_2263AF47C(_Unwind_Exception *a1)
{
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;

  if ((v1 & 7) != 0)
  {
    v2 = (unsigned int *)(v1 & 0xFFFFFFFFFFFFFFF8);
    do
      v3 = __ldxr(v2);
    while (__stlxr(v3 - 2, v2));
  }
  _Unwind_Resume(a1);
}

uint64_t sub_2263AF4A8(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;

  if ((sub_2263B1D2C(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  v2 = *((_QWORD *)a1 + 1);
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    return sub_2263B1E04((uint64_t *)a1);
}

void sub_2263AF510(uint64_t a1, int *a2, int a3, int a4, float a5)
{
  uint64_t v7;
  unsigned int v8;
  int v9;
  int v10;
  int v11;

  v7 = *(_QWORD *)(a1 + 8);
  v8 = 3 * a3 + a4;
  v9 = *a2;
  sub_2263B1E44((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(v7 + 16));
  *(_DWORD *)(*(_QWORD *)(v7 + 48) + 16 * v8) = v9;
  v10 = a2[1];
  sub_2263B1E44((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(v7 + 16));
  *(_DWORD *)(*(_QWORD *)(v7 + 48) + 16 * v8 + 4) = v10;
  v11 = a2[2];
  sub_2263B1E44((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(v7 + 16));
  *(_DWORD *)(*(_QWORD *)(v7 + 48) + 16 * v8 + 8) = v11;
  sub_2263B1E44((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(v7 + 16));
  *(float *)(*(_QWORD *)(v7 + 48) + 16 * v8 + 12) = a5;
}

void sub_2263AF5AC(uint64_t a1, int *a2, int *a3, int a4, int a5, int a6)
{
  _QWORD *v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  float v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;

  v9 = *(_QWORD **)(a1 + 8);
  v10 = (3 * a5 + a6);
  v11 = *a2;
  sub_2263B1E44((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(v9 + 2));
  *(_DWORD *)(v9[6] + 16 * v10) = v11;
  v12 = a2[1];
  sub_2263B1E44((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(v9 + 2));
  *(_DWORD *)(v9[6] + 16 * v10 + 4) = v12;
  v13 = a2[2];
  sub_2263B1E44((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(v9 + 2));
  *(_DWORD *)(v9[6] + 16 * v10 + 8) = v13;
  if (a4)
    v14 = 1.0;
  else
    v14 = -1.0;
  sub_2263B1E44((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(v9 + 2));
  *(float *)(v9[6] + 16 * v10 + 12) = v14;
  v15 = *a3;
  sub_2263B1F74((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(v9 + 7));
  v16 = v10 + 2 * v10;
  *(_DWORD *)(v9[11] + 4 * v16) = v15;
  v17 = a3[1];
  sub_2263B1F74((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(v9 + 7));
  *(_DWORD *)(v9[11] + 4 * v16 + 4) = v17;
  v18 = a3[2];
  sub_2263B1F74((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(v9 + 7));
  *(_DWORD *)(v9[11] + 4 * v16 + 8) = v18;
}

uint64_t sub_2263AF6B8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  _BOOL4 v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t v20;
  unsigned int *v21;
  unsigned int *v22;
  char v23;
  unsigned int v24;
  unsigned int v25;
  int v26;
  unint64_t v27;
  const char *v28;
  __int128 v29;
  __int128 v30;
  unint64_t v32;
  const char *v33;
  unint64_t v34;
  const char *v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;

  *(_QWORD *)a1 = -1;
  v5 = *(_QWORD *)(a2 + 8);
  if (*(_QWORD *)(a2 + 16) == v5)
  {
    if (*(_DWORD *)(a1 + 4) != -1)
    {
LABEL_53:
      v32 = *(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8;
      if (v32)
      {
        v33 = (const char *)(v32 + 16);
        if (*(char *)(v32 + 39) < 0)
          v33 = *(const char **)v33;
      }
      else
      {
        v33 = "";
      }
      NSLog(CFSTR("Mesh %s does not contain valid texture coordinate data. Skipping tangent computation.\n"), v33);
      return 0;
    }
LABEL_56:
    v34 = *(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8;
    if (v34)
    {
      v35 = (const char *)(v34 + 16);
      if (*(char *)(v34 + 39) < 0)
        v35 = *(const char **)v35;
    }
    else
    {
      v35 = "";
    }
    NSLog(CFSTR("Mesh %s does not contain valid normal data. Skipping tangent computation.\n"), v35);
    return 0;
  }
  v7 = 0;
  v8 = 0;
  v9 = -1;
  do
  {
    v10 = v5 + 88 * v7;
    MEMORY[0x2276976D8](&v36, "normals");
    v11 = v36;
    if ((*(_QWORD *)(v10 + 56) & 0xFFFFFFFFFFFFFFF8) == (v36 & 0xFFFFFFFFFFFFFFF8))
    {
      v14 = 1;
    }
    else
    {
      v12 = *(_QWORD *)(a2 + 8);
      MEMORY[0x2276976D8](&v39, "primvars:normals");
      v13 = (unsigned int *)(v39 & 0xFFFFFFFFFFFFFFF8);
      v14 = (*(_QWORD *)(v12 + 88 * v7 + 56) & 0xFFFFFFFFFFFFFFF8) == (v39 & 0xFFFFFFFFFFFFFFF8);
      if ((v39 & 7) != 0)
      {
        do
          v15 = __ldxr(v13);
        while (__stlxr(v15 - 2, v13));
      }
      v11 = v36;
    }
    if ((v11 & 7) != 0)
    {
      v16 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
      do
        v17 = __ldxr(v16);
      while (__stlxr(v17 - 2, v16));
    }
    if (v14)
    {
      *(_DWORD *)(a1 + 4) = v8;
      goto LABEL_34;
    }
    if (!atomic_load(MEMORY[0x24BEE82A0]))
      sub_2263B1434(MEMORY[0x24BEE82A0]);
    if ((pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==() & 1) == 0)
    {
      if (!atomic_load(MEMORY[0x24BEE82A0]))
        sub_2263B1434(MEMORY[0x24BEE82A0]);
      if (!pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==())
        goto LABEL_34;
    }
    if (v9 == -1)
      v9 = v8;
    v20 = *(_QWORD *)(a2 + 8) + 88 * v7;
    MEMORY[0x2276976E4](&v36, a3);
    v21 = (unsigned int *)(*(_QWORD *)(v20 + 56) & 0xFFFFFFFFFFFFFFF8);
    v22 = (unsigned int *)(v36 & 0xFFFFFFFFFFFFFFF8);
    if (v21 == (unsigned int *)(v36 & 0xFFFFFFFFFFFFFFF8))
    {
      if ((v36 & 7) != 0)
      {
        do
          v24 = __ldxr(v21);
        while (__stlxr(v24 - 2, v21));
      }
LABEL_33:
      *(_DWORD *)a1 = v8;
      goto LABEL_34;
    }
    if (*((char *)a3 + 23) < 0)
    {
      if (a3[1])
      {
LABEL_24:
        v23 = 0;
        goto LABEL_30;
      }
    }
    else if (*((_BYTE *)a3 + 23))
    {
      goto LABEL_24;
    }
    v23 = 1;
LABEL_30:
    if ((v36 & 7) != 0)
    {
      do
        v25 = __ldxr(v22);
      while (__stlxr(v25 - 2, v22));
    }
    if ((v23 & 1) != 0)
      goto LABEL_33;
LABEL_34:
    v5 = *(_QWORD *)(a2 + 8);
    v7 = ++v8;
  }
  while (0x2E8BA2E8BA2E8BA3 * ((*(_QWORD *)(a2 + 16) - v5) >> 3) > (unint64_t)v8);
  v26 = *(_DWORD *)a1;
  if (*(_DWORD *)a1 == -1 && v9 != -1)
  {
    v27 = *(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8;
    if (v27)
    {
      v28 = (const char *)(v27 + 16);
      if (*(char *)(v27 + 39) < 0)
        v28 = *(const char **)v28;
    }
    else
    {
      v28 = "";
    }
    if (*((char *)a3 + 23) < 0)
      a3 = (uint64_t *)*a3;
    NSLog(CFSTR("Warning: Mesh %s: unable to find uv set name: %s, use first uv set instead.\n"), v28, a3);
    *(_DWORD *)a1 = v9;
    v26 = v9;
  }
  if (*(_DWORD *)(a1 + 4) == -1)
    goto LABEL_56;
  if (v26 == -1)
    goto LABEL_53;
  sub_2263AFB00((uint64_t)&v36, *(unsigned int *)(a2 + 72));
  if ((__int128 *)(a1 + 16) != &v36)
  {
    sub_2263AC71C(a1 + 16);
    v29 = v37;
    *(_OWORD *)(a1 + 16) = v36;
    *(_OWORD *)(a1 + 32) = v29;
    v36 = 0u;
    v37 = 0u;
    *(_QWORD *)(a1 + 48) = v38;
    v38 = 0;
  }
  sub_2263AC71C((uint64_t)&v36);
  sub_2263AFB70((uint64_t)&v36, *(unsigned int *)(a2 + 72));
  if ((__int128 *)(a1 + 56) != &v36)
  {
    sub_2263AC71C(a1 + 56);
    v30 = v37;
    *(_OWORD *)(a1 + 56) = v36;
    *(_OWORD *)(a1 + 72) = v30;
    v36 = 0u;
    v37 = 0u;
    *(_QWORD *)(a1 + 88) = v38;
    v38 = 0;
  }
  sub_2263AC71C((uint64_t)&v36);
  *(_QWORD *)(a1 + 8) = a2;
  return 1;
}

void sub_2263AFAA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_2263AC71C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2263AFB00(uint64_t a1, unint64_t a2)
{
  _QWORD v5[2];
  _OWORD *v6;

  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  v5[0] = 0;
  v5[1] = 0;
  sub_2263AD1C8((_QWORD *)a1);
  v6 = v5;
  sub_2263B2018((unint64_t *)a1, a2, &v6);
  return a1;
}

void sub_2263AFB58(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2263AC71C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2263AFB70(uint64_t a1, unint64_t a2)
{
  uint64_t v5;
  int v6;
  uint64_t *v7;

  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  v6 = 0;
  v5 = 0;
  sub_2263AD1C8((_QWORD *)a1);
  v7 = &v5;
  sub_2263B21CC((unint64_t *)a1, a2, &v7);
  return a1;
}

void sub_2263AFBCC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2263AC71C(v1);
  _Unwind_Resume(a1);
}

void sub_2263AFBE4(_QWORD *a1, uint64_t *a2, void *a3, void *a4, uint64_t a5)
{
  id v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  int v13;
  id v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  id v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  unsigned int *v28;
  unsigned int v29;
  id v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int *v46;
  unsigned int v47;
  id v48;
  const char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  unsigned int *v54;
  unsigned int v55;
  unsigned int *v56;
  unsigned int v57;
  _QWORD *v58;
  id v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  _QWORD v64[2];
  _OWORD v65[2];
  uint64_t v66;
  _QWORD v67[2];
  uint64_t v68;
  int v69;
  uint64_t v70;

  v70 = *MEMORY[0x24BDAC8D0];
  v8 = a3;
  v60 = a4;
  v10 = a2[1];
  v9 = a2 + 1;
  if (a2[2] == v10)
  {
    v63 = 0;
    v61 = 0u;
    v62 = 0u;
  }
  else
  {
    v58 = a1;
    v11 = 0;
    v12 = 0;
    v13 = -1;
    do
    {
      v14 = objc_retainAutorelease(v8);
      v18 = objc_msgSend_UTF8String(v14, v15, v16, v17);
      MEMORY[0x2276976D8](v64, v18);
      v19 = *(_QWORD *)(v10 + 88 * v11 + 56);
      v20 = (unsigned int *)(v64[0] & 0xFFFFFFFFFFFFFFF8);
      if ((v64[0] & 7) != 0)
      {
        do
          v21 = __ldxr(v20);
        while (__stlxr(v21 - 2, v20));
      }
      if ((unsigned int *)(v19 & 0xFFFFFFFFFFFFFFF8) == v20)
        v13 = v12;
      v10 = a2[1];
      v11 = ++v12;
    }
    while (0x2E8BA2E8BA2E8BA3 * ((a2[2] - v10) >> 3) > (unint64_t)v12);
    v63 = 0;
    v61 = 0u;
    v62 = 0u;
    a1 = v58;
    if (v13 != -1)
    {
      sub_2263B0058((_QWORD *)(v10 + 88 * v13), v58);
      sub_2263AA5D0(*v9 + 88 * v13 + 16, &v61);
      v22 = objc_retainAutorelease(v14);
      v26 = objc_msgSend_UTF8String(v22, v23, v24, v25);
      MEMORY[0x2276976D8](v64, v26);
      v27 = (_QWORD *)(*v9 + 88 * v13 + 56);
      if (v64 == v27)
      {
        if ((v64[0] & 7) != 0)
        {
          v46 = (unsigned int *)(v64[0] & 0xFFFFFFFFFFFFFFF8);
          do
            v47 = __ldxr(v46);
          while (__stlxr(v47 - 2, v46));
        }
      }
      else
      {
        if ((*v27 & 7) != 0)
        {
          v28 = (unsigned int *)(*v27 & 0xFFFFFFFFFFFFFFF8);
          do
            v29 = __ldxr(v28);
          while (__stlxr(v29 - 2, v28));
        }
        *v27 = v64[0];
      }
      *(_QWORD *)(*v9 + 88 * v13 + 64) = a5;
      v48 = objc_retainAutorelease(v60);
      v52 = objc_msgSend_UTF8String(v48, v49, v50, v51);
      MEMORY[0x2276976D8](v64, v52);
      v53 = (_QWORD *)(*v9 + 88 * v13 + 72);
      if (v64 == v53)
      {
        if ((v64[0] & 7) != 0)
        {
          v56 = (unsigned int *)(v64[0] & 0xFFFFFFFFFFFFFFF8);
          do
            v57 = __ldxr(v56);
          while (__stlxr(v57 - 2, v56));
        }
      }
      else
      {
        if ((*v53 & 7) != 0)
        {
          v54 = (unsigned int *)(*v53 & 0xFFFFFFFFFFFFFFF8);
          do
            v55 = __ldxr(v54);
          while (__stlxr(v55 - 2, v54));
        }
        *v53 = v64[0];
      }
      *(_DWORD *)(*v9 + 88 * v13 + 80) = 1;
      goto LABEL_37;
    }
  }
  sub_2263B0700(v64, a1);
  v65[0] = v61;
  v65[1] = v62;
  v66 = v63;
  v30 = objc_retainAutorelease(v8);
  v34 = objc_msgSend_UTF8String(v30, v31, v32, v33);
  MEMORY[0x2276976D8](v67, v34);
  v67[1] = a5;
  v35 = objc_retainAutorelease(v60);
  v39 = objc_msgSend_UTF8String(v35, v36, v37, v38);
  MEMORY[0x2276976D8](&v68, v39);
  v69 = 1;
  v40 = a2[2];
  if (v40 >= a2[3])
  {
    v41 = sub_2263B1500(a2 + 1, (uint64_t)v64);
  }
  else
  {
    sub_2263B148C((uint64_t)(a2 + 1), (uint64_t)v64);
    v41 = v40 + 88;
  }
  a2[2] = v41;
  if ((v68 & 7) != 0)
  {
    v42 = (unsigned int *)(v68 & 0xFFFFFFFFFFFFFFF8);
    do
      v43 = __ldxr(v42);
    while (__stlxr(v43 - 2, v42));
  }
  if ((v67[0] & 7) != 0)
  {
    v44 = (unsigned int *)(v67[0] & 0xFFFFFFFFFFFFFFF8);
    do
      v45 = __ldxr(v44);
    while (__stlxr(v45 - 2, v44));
  }
  sub_2263AC71C((uint64_t)v65);
  sub_2263AD568((uint64_t)v64);
LABEL_37:
  sub_2263AC71C((uint64_t)&v61);

}

void sub_2263AFFB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, ...)
{
  void *v5;
  va_list va;

  va_start(va, a5);
  sub_2263AC71C((uint64_t)va);

  _Unwind_Resume(a1);
}

_QWORD *sub_2263B0058(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  if (a1[1])
  {
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v15 = 0;
    sub_2263AD508((uint64_t)&v14, (uint64_t)&v12);
    v4 = a1[1];
    v5 = ~*((_DWORD *)a1 + 2);
    v13 = v4;
    if ((v5 & 3) != 0)
      (*(void (**)(_QWORD *, uint64_t *))((v4 & 0xFFFFFFFFFFFFFFF8) + 40))(a1, &v12);
    else
      v12 = *a1;
    a1[1] = 0;
    if (v15)
      (*(void (**)(uint64_t *))(v15 + 32))(&v14);
    v6 = a2 + 1;
    if (!a2[1])
    {
      v8 = a1[1];
      if (v8 && (a1[1] & 3) != 3)
        (*(void (**)(_QWORD *))((v8 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
      a1[1] = 0;
      goto LABEL_19;
    }
  }
  else
  {
    v6 = a2 + 1;
    if (!a2[1])
      return a1;
    v12 = 0;
    v13 = 0;
  }
  v14 = 0;
  v15 = 0;
  sub_2263AD508((uint64_t)&v14, (uint64_t)a1);
  v7 = *v6;
  a1[1] = *v6;
  if ((~*(_DWORD *)v6 & 3) != 0)
    (*(void (**)(_QWORD *, _QWORD *))((v7 & 0xFFFFFFFFFFFFFFF8) + 40))(a2, a1);
  else
    *a1 = *a2;
  *v6 = 0;
  if (v15)
    (*(void (**)(uint64_t *))(v15 + 32))(&v14);
LABEL_19:
  if (v13)
  {
    v14 = 0;
    v15 = 0;
    sub_2263AD508((uint64_t)&v14, (uint64_t)a2);
    v9 = v13;
    v10 = ~(_BYTE)v13;
    *v6 = v13;
    if ((v10 & 3) != 0)
      (*(void (**)(uint64_t *, _QWORD *))((v9 & 0xFFFFFFFFFFFFFFF8) + 40))(&v12, a2);
    else
      *a2 = v12;
    v13 = 0;
    if (v15)
      (*(void (**)(uint64_t *))(v15 + 32))(&v14);
  }
  else
  {
    if (*v6 && (*v6 & 3) != 3)
      (*(void (**)(_QWORD *))((*v6 & 0xFFFFFFFFFFFFFFF8) + 32))(a2);
    *v6 = 0;
  }
  sub_2263AD568((uint64_t)&v12);
  return a1;
}

void sub_2263B0264(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_2263AACCC(a1);
  _Unwind_Resume(a1);
}

void sub_2263B02AC(uint64_t *a1, int a2, uint64_t a3, float a4)
{
  int v7;
  int v8;
  void (*v9)(uint64_t, int *, int, int, float);
  void (*v10)(uint64_t, int *, int *, int, int, int);
  float v11;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v12;
  unint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  int v19;
  int v20;
  _DWORD *v21;
  unint64_t *v22;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v23;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v24;
  _OWORD v25[2];
  uint64_t v26;
  _QWORD v27[2];
  void *__p[2];
  uint64_t v29;
  __int128 v30;
  _OWORD v31[5];
  __int128 v32;
  __int128 v33;
  __int128 v34;
  void (*v35)(uint64_t, int *, int *, int, int, int);
  uint64_t v36[2];
  uint64_t v37[2];
  uint64_t v38[3];

  v38[2] = *MEMORY[0x24BDAC8D0];
  v35 = 0;
  v33 = 0u;
  v34 = 0u;
  v32 = 0u;
  v30 = 0u;
  memset(v31, 0, sizeof(v31));
  if (*(char *)(a3 + 23) < 0)
  {
    sub_2263AE36C(__p, *(void **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a3;
    v29 = *(_QWORD *)(a3 + 16);
  }
  v7 = sub_2263AF6B8((uint64_t)&v30, (uint64_t)a1, (uint64_t *)__p);
  v8 = v7;
  if (SHIBYTE(v29) < 0)
  {
    operator delete(__p[0]);
    if (!v8)
      goto LABEL_34;
  }
  else if (!v7)
  {
    goto LABEL_34;
  }
  *(_QWORD *)&v32 = sub_2263AEEF8;
  *((_QWORD *)&v32 + 1) = sub_2263AEF08;
  *(_QWORD *)&v33 = sub_2263AEF3C;
  *((_QWORD *)&v33 + 1) = sub_2263AEFAC;
  v9 = sub_2263AF510;
  if (!a2)
    v9 = 0;
  *(_QWORD *)&v34 = sub_2263AF240;
  *((_QWORD *)&v34 + 1) = v9;
  v10 = sub_2263AF5AC;
  if (a2)
    v10 = 0;
  v35 = v10;
  v27[0] = &v32;
  v27[1] = &v30;
  v11 = 3.1416;
  if (a4 <= 3.1416)
    v11 = a4;
  if (v11 < 0.0)
    v11 = 0.0;
  if (sub_2263F5744((uint64_t)v27, v11) == 1)
  {
    if (a2)
    {
      v38[1] = (uint64_t)&off_24EDD69D0;
      sub_2263B131C(v38, (uint64_t)v31);
      v12 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x24BEE82A0]);
      if (!v12)
        v12 = sub_2263B1434(MEMORY[0x24BEE82A0]);
      sub_2263AFBE4(v38, a1, CFSTR("tangents"), CFSTR("faceVarying"), *((_QWORD *)v12 + 78));
      sub_2263AD568((uint64_t)v38);
    }
    else
    {
      v26 = 0;
      memset(v25, 0, sizeof(v25));
      sub_2263AFB70((uint64_t)v25, *(unint64_t *)&v31[0]);
      if (*(_QWORD *)&v31[0])
      {
        v15 = 0;
        v16 = 0;
        v17 = 0;
        do
        {
          sub_2263B1E44((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v31);
          v18 = *(_DWORD *)(*(_QWORD *)&v31[2] + v16);
          sub_2263B1E44((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v31);
          v19 = *(_DWORD *)(*(_QWORD *)&v31[2] + v16 + 4);
          sub_2263B1E44((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v31);
          v20 = *(_DWORD *)(*(_QWORD *)&v31[2] + v16 + 8);
          sub_2263B1F74((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v25);
          v21 = (_DWORD *)(v26 + v15);
          *v21 = v18;
          v21[1] = v19;
          v21[2] = v20;
          ++v17;
          v16 += 16;
          v15 += 12;
        }
        while (*(_QWORD *)&v31[0] > v17);
      }
      v37[1] = (uint64_t)&off_24EDD68F0;
      sub_2263B131C(v37, (uint64_t)v25);
      v22 = (unint64_t *)MEMORY[0x24BEE82A0];
      v23 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(MEMORY[0x24BEE82A0]);
      if (!v23)
        v23 = sub_2263B1434(MEMORY[0x24BEE82A0]);
      sub_2263AFBE4(v37, a1, CFSTR("tangents"), CFSTR("faceVarying"), *((_QWORD *)v23 + 77));
      sub_2263AD568((uint64_t)v37);
      v36[1] = (uint64_t)&off_24EDD68F0;
      sub_2263B131C(v36, (uint64_t)&v31[2] + 8);
      v24 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v22);
      if (!v24)
        v24 = sub_2263B1434(MEMORY[0x24BEE82A0]);
      sub_2263AFBE4(v36, a1, CFSTR("bitangents"), CFSTR("faceVarying"), *((_QWORD *)v24 + 77));
      sub_2263AD568((uint64_t)v36);
      sub_2263AC71C((uint64_t)v25);
    }
  }
  else
  {
    v13 = *a1 & 0xFFFFFFFFFFFFFFF8;
    if (v13)
    {
      v14 = (const char *)(v13 + 16);
      if (*(char *)(v13 + 39) < 0)
        v14 = *(const char **)v14;
    }
    else
    {
      v14 = "";
    }
    NSLog(CFSTR("Failed to generate tangent space for Mesh %s."), v14);
  }
LABEL_34:
  sub_2263AC71C((uint64_t)&v31[2] + 8);
  sub_2263AC71C((uint64_t)v31);
}

void sub_2263B0634(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,char a26)
{
  uint64_t v26;

  sub_2263AD568(v26 - 136);
  sub_2263AC71C((uint64_t)&a11);
  sub_2263B06C8((uint64_t)&a26);
  _Unwind_Resume(a1);
}

uint64_t sub_2263B06C8(uint64_t a1)
{
  sub_2263AC71C(a1 + 56);
  sub_2263AC71C(a1 + 16);
  return a1;
}

_QWORD *sub_2263B0700(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  a1[1] = 0;
  if (a2[1])
  {
    v6 = 0;
    v7 = 0;
    sub_2263AD508((uint64_t)&v6, (uint64_t)a1);
    v4 = a2[1];
    a1[1] = v4;
    if ((~*((_DWORD *)a2 + 2) & 3) != 0)
      (*(void (**)(_QWORD *, _QWORD *))((v4 & 0xFFFFFFFFFFFFFFF8) + 24))(a2, a1);
    else
      *a1 = *a2;
    if (v7)
      (*(void (**)(uint64_t *))(v7 + 32))(&v6);
  }
  return a1;
}

void sub_2263B07C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a11)
    (*(void (**)(char *))(a11 + 32))(&a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2263B07FC(_QWORD *a1)
{
  *a1 += 4;
  return std::ostream::operator<<();
}

_QWORD *sub_2263B0814(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  const std::locale::facet *v10;
  uint64_t v11;
  _QWORD v13[2];
  std::locale v14;

  v13[0] = 0;
  v13[1] = 0;
  MEMORY[0x227697FFC](v13, a1);
  if (LOBYTE(v13[0]))
  {
    v6 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
    v7 = *(_QWORD *)(v6 + 40);
    v8 = *(_DWORD *)(v6 + 8);
    v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
      v10 = std::locale::use_facet(&v14, MEMORY[0x24BEDB350]);
      v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }
    if ((v8 & 0xB0) == 0x20)
      v11 = a2 + a3;
    else
      v11 = a2;
    if (!sub_2263B097C(v7, a2, v11, a2 + a3, v6, (char)v9))
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 5);
  }
  MEMORY[0x227698008](v13);
  return a1;
}

void sub_2263B0920(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  _QWORD *v12;

  MEMORY[0x227698008](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(_QWORD *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x2263B0900);
}

void sub_2263B0968(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t sub_2263B097C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6;
  uint64_t v11;
  int64_t v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  void *__p[2];
  uint64_t v18;

  v6 = a1;
  if (a1)
  {
    v11 = *(_QWORD *)(a5 + 24);
    if (v11 <= a4 - a2)
      v12 = 0;
    else
      v12 = v11 - (a4 - a2);
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1) != a3 - a2)
      return 0;
    if (v12 >= 1)
    {
      __p[0] = 0;
      __p[1] = 0;
      v18 = 0;
      sub_2263B0AC0(__p, v12, __c);
      v13 = v18 >= 0 ? __p : (void **)__p[0];
      v14 = (*(uint64_t (**)(uint64_t, void **, int64_t))(*(_QWORD *)v6 + 96))(v6, v13, v12);
      if (SHIBYTE(v18) < 0)
        operator delete(__p[0]);
      if (v14 != v12)
        return 0;
    }
    v15 = a4 - a3;
    if (v15 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 96))(v6, a3, v15) == v15)
      *(_QWORD *)(a5 + 24) = 0;
    else
      return 0;
  }
  return v6;
}

void sub_2263B0AA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_2263B0AC0(_QWORD *__b, size_t __len, int __c)
{
  void *v6;
  size_t v7;
  size_t v8;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    sub_2263AE358();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    __b[1] = __len;
    __b[2] = v8 | 0x8000000000000000;
    *__b = v6;
  }
  else
  {
    *((_BYTE *)__b + 23) = __len;
    v6 = __b;
    if (!__len)
      goto LABEL_9;
  }
  memset(v6, __c, __len);
LABEL_9:
  *((_BYTE *)v6 + __len) = 0;
  return __b;
}

uint64_t *sub_2263B0B68(uint64_t *a1, uint64_t a2)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5 = 0;
  v6 = 0;
  sub_2263AD508((uint64_t)&v5, (uint64_t)a1);
  a1[1] = (uint64_t)&off_24EDD68F0;
  sub_2263B131C(a1, a2);
  if (v6)
    (*(void (**)(uint64_t *))(v6 + 32))(&v5);
  return a1;
}

void sub_2263B0BFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2)
    sub_2263AACCC(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_2263B0C38(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t *sub_2263B0C60(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_2263B0E98(a1);
}

uint64_t sub_2263B0C70(uint64_t *a1)
{
  sub_2263AD654(a1);
  return 1;
}

unint64_t sub_2263B0C88(uint64_t *a1)
{
  uint64_t *v1;
  char v3;

  v1 = (uint64_t *)sub_2263AD654(a1);
  return sub_2263B0F00((uint64_t)&v3, v1);
}

BOOL sub_2263B0CB0(uint64_t *a1, uint64_t *a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)sub_2263AD654(a1);
  v4 = sub_2263AD654(a2);
  return sub_2263B10A0(v3, v4);
}

BOOL sub_2263B0CE4(uint64_t *a1, uint64_t a2)
{
  _QWORD *v3;

  v3 = (_QWORD *)sub_2263AD654(a1);
  return sub_2263B10A0(v3, a2);
}

uint64_t sub_2263B0D0C(uint64_t *a1)
{
  sub_2263AD654(a1);
  return 0;
}

uint64_t sub_2263B0D28(uint64_t *a1, uint64_t a2)
{
  sub_2263AD654(a1);
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray();
  return a2;
}

void *sub_2263B0D74(uint64_t *a1)
{
  sub_2263AD654(a1);
  return &unk_24EDD68D8;
}

uint64_t sub_2263B0D90(uint64_t *a1)
{
  sub_2263AD654(a1);
  return 1;
}

void *sub_2263B0DA8(uint64_t *a1)
{
  sub_2263AD654(a1);
  return &unk_24EDD69A8;
}

uint64_t sub_2263B0DC8(uint64_t *a1)
{
  return *(_QWORD *)sub_2263AD654(a1);
}

BOOL sub_2263B0DE0(uint64_t *a1, uint64_t a2)
{
  sub_2263AD654(a1);
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7VtArrayINS_7GfVec3fEEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_2263B0E20(uint64_t *a1)
{
  const std::type_info *v1;

  sub_2263AD654(a1);
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&unk_24EDD68D8, v1);
}

void *sub_2263B0E44(uint64_t *a1)
{
  sub_2263AD654(a1);
  return &unk_24EDD68D8;
}

uint64_t sub_2263B0E64@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;

  v3 = sub_2263AD654(a1);
  a2[1] = (uint64_t)&off_24EDD68F0;
  return sub_2263B131C(a2, v3);
}

uint64_t *sub_2263B0E98(uint64_t *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *a1;
  if (*a1)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      __dmb(9u);
      sub_2263AC71C(v2);
      MEMORY[0x2276980E0](v2, 0x1020C40874388CCLL);
    }
  }
  return a1;
}

unint64_t sub_2263B0F00(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  float *v3;
  float *v4;
  unint64_t v5;
  _QWORD v7[2];

  v2 = *a2;
  v7[0] = v2;
  v7[1] = 1;
  if (v2)
  {
    v3 = (float *)a2[4];
    do
    {
      --v2;
      v4 = v3 + 3;
      sub_2263B0F74((uint64_t)v7, v3);
      v3 = v4;
    }
    while (v2);
    v5 = 0x9E3779B97F4A7C55 * v7[0];
  }
  else
  {
    v5 = 0;
  }
  return bswap64(v5);
}

uint64_t sub_2263B0F74(uint64_t a1, float *a2)
{
  uint64_t result;
  unint64_t v4;
  _QWORD v5[2];

  v5[0] = 0;
  v5[1] = 0;
  result = sub_2263B0FF0((uint64_t)v5, a2, a2 + 1, a2 + 2);
  v4 = bswap64(0x9E3779B97F4A7C55 * v5[0]);
  if (*(_BYTE *)(a1 + 8))
    v4 += (*(_QWORD *)a1 + v4 + (*(_QWORD *)a1 + v4) * (*(_QWORD *)a1 + v4)) >> 1;
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v4;
  return result;
}

uint64_t sub_2263B0FF0(uint64_t a1, float *a2, float *a3, float *a4)
{
  float v4;
  unint64_t v5;

  v4 = *a2;
  if (*a2 == 0.0)
    v4 = 0.0;
  v5 = LODWORD(v4);
  if (*(_BYTE *)(a1 + 8))
    v5 = ((*(_QWORD *)a1 + LODWORD(v4) + (*(_QWORD *)a1 + LODWORD(v4)) * (*(_QWORD *)a1 + (unint64_t)LODWORD(v4))) >> 1)
       + LODWORD(v4);
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v5;
  return sub_2263B103C(a1, a3, a4);
}

uint64_t sub_2263B103C(uint64_t result, float *a2, float *a3)
{
  float v3;
  unint64_t v4;
  float v5;

  v3 = *a2;
  if (*a2 == 0.0)
    v3 = 0.0;
  v4 = LODWORD(v3);
  if (*(_BYTE *)(result + 8))
    v4 = ((*(_QWORD *)result
         + LODWORD(v3)
         + (*(_QWORD *)result + LODWORD(v3)) * (*(_QWORD *)result + (unint64_t)LODWORD(v3))) >> 1)
       + LODWORD(v3);
  else
    *(_BYTE *)(result + 8) = 1;
  *(_QWORD *)result = v4;
  v5 = *a3;
  if (*a3 == 0.0)
    v5 = 0.0;
  *(_QWORD *)result = LODWORD(v5) + ((v4 + LODWORD(v5) + (v4 + LODWORD(v5)) * (v4 + LODWORD(v5))) >> 1);
  return result;
}

BOOL sub_2263B10A0(_QWORD *a1, uint64_t a2)
{
  _BOOL8 result;
  float *v5;
  float *v6;
  float *i;

  if (a1[4] == *(_QWORD *)(a2 + 32) && sub_2263B1164((uint64_t)a1, a2) && a1[3] == *(_QWORD *)(a2 + 24))
    return 1;
  result = sub_2263B1164((uint64_t)a1, a2);
  if (!result)
    return result;
  if (!*a1)
    return 1;
  v5 = (float *)a1[4];
  v6 = &v5[3 * *a1];
  for (i = *(float **)(a2 + 32); *v5 == *i && v5[1] == i[1] && v5[2] == i[2]; i += 3)
  {
    v5 += 3;
    if (v5 == v6)
      return 1;
  }
  return 0;
}

BOOL sub_2263B1164(uint64_t a1, uint64_t a2)
{
  const void *v4;
  int v5;
  int v6;
  int v7;
  const void *v8;
  int v9;
  BOOL v10;
  uint64_t v11;

  if (*(_QWORD *)a1 != *(_QWORD *)a2)
    return 0;
  v6 = *(_DWORD *)(a1 + 8);
  v4 = (const void *)(a1 + 8);
  v5 = v6;
  if (v6)
  {
    if (*(_DWORD *)(a1 + 12))
      v7 = *(_DWORD *)(a1 + 16) ? 4 : 3;
    else
      v7 = 2;
  }
  else
  {
    v7 = 1;
  }
  v8 = (const void *)(a2 + 8);
  if (*(_DWORD *)(a2 + 8))
  {
    if (*(_DWORD *)(a2 + 12))
      v9 = *(_DWORD *)(a2 + 16) ? 4 : 3;
    else
      v9 = 2;
  }
  else
  {
    v9 = 1;
  }
  if (v7 != v9)
    return 0;
  if (v5)
  {
    if (*(_DWORD *)(a1 + 12))
    {
      v10 = *(_DWORD *)(a1 + 16) == 0;
      v11 = 3;
      if (!v10)
        v11 = 4;
    }
    else
    {
      v11 = 2;
    }
  }
  else
  {
    v11 = 1;
  }
  return memcmp(v4, v8, 4 * v11 - 4) == 0;
}

uint64_t sub_2263B1240(uint64_t *a1)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v12;

  v2 = atomic_load((unsigned int *)(sub_2263AD654(a1) + 40));
  if (v2 != 1)
  {
    v3 = operator new();
    v4 = sub_2263AD654(a1);
    v5 = *(_OWORD *)(v4 + 16);
    *(_OWORD *)v3 = *(_OWORD *)v4;
    *(_OWORD *)(v3 + 16) = v5;
    v6 = *(_QWORD *)(v4 + 32);
    *(_QWORD *)(v3 + 32) = v6;
    if (v6)
    {
      v7 = (unint64_t *)(v6 - 16);
      if (*(_QWORD *)(v3 + 24))
        v7 = *(unint64_t **)(v3 + 24);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
    v9 = (unsigned int *)(v3 + 40);
    atomic_store(0, (unsigned int *)(v3 + 40));
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    v12 = *a1;
    *a1 = v3;
    sub_2263B0E98(&v12);
  }
  return sub_2263AD654(a1);
}

uint64_t sub_2263B1304(_QWORD *a1)
{
  *a1 += 12;
  return pxrInternal__aapl__pxrReserved__::operator<<();
}

uint64_t sub_2263B131C(uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  unsigned int *v9;
  unsigned int v10;

  result = operator new();
  v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)result = *(_OWORD *)a2;
  *(_OWORD *)(result + 16) = v5;
  v6 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 32) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 - 16);
    if (*(_QWORD *)(result + 24))
      v7 = *(unint64_t **)(result + 24);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = (unsigned int *)(result + 40);
  atomic_store(0, (unsigned int *)(result + 40));
  *a1 = result;
  do
    v10 = __ldxr(v9);
  while (__stxr(v10 + 1, v9));
  return result;
}

uint64_t sub_2263B13A4(uint64_t *a1)
{
  uint64_t v2;
  _QWORD v4[3];

  v4[2] = *MEMORY[0x24BDAC8D0];
  v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(_QWORD *__return_ptr, uint64_t *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_2263AD3FC(a1, v4);
    sub_2263AD568((uint64_t)v4);
  }
  return sub_2263B1240(a1);
}

pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *sub_2263B1434(unint64_t *a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *result;

  result = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)MEMORY[0x227697534]();
  while (!__ldaxr(a1))
  {
    if (!__stlxr((unint64_t)result, a1))
      return result;
  }
  __clrex();
  if (result)
  {
    pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::~Sdf_ValueTypeNamesType(result);
    MEMORY[0x2276980E0]();
  }
  return (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(a1);
}

double sub_2263B148C(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  __int128 v5;
  double result;

  v4 = sub_2263B165C(*(_QWORD **)(a1 + 8), (_QWORD *)a2);
  v5 = *(_OWORD *)(a2 + 32);
  *((_OWORD *)v4 + 1) = *(_OWORD *)(a2 + 16);
  *((_OWORD *)v4 + 2) = v5;
  result = 0.0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  v4[6] = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  v4[7] = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 56) = 0;
  v4[8] = *(_QWORD *)(a2 + 64);
  v4[9] = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 72) = 0;
  *((_DWORD *)v4 + 20) = *(_DWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 8) = v4 + 11;
  return result;
}

uint64_t sub_2263B1500(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  uint64_t v13;
  void *v15[5];

  v3 = *a1;
  v4 = 0x2E8BA2E8BA2E8BA3 * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x2E8BA2E8BA2E8BALL)
    sub_2263AACDC();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0x2E8BA2E8BA2E8BA3 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x1745D1745D1745DLL)
    v9 = 0x2E8BA2E8BA2E8BALL;
  else
    v9 = v5;
  v15[4] = a1 + 2;
  if (v9)
    v10 = (char *)sub_2263B17AC(v7, v9);
  else
    v10 = 0;
  v11 = &v10[88 * v4];
  v15[0] = v10;
  v15[1] = v11;
  v15[3] = &v10[88 * v9];
  sub_2263B165C(v11, (_QWORD *)a2);
  v12 = *(_OWORD *)(a2 + 32);
  *((_OWORD *)v11 + 1) = *(_OWORD *)(a2 + 16);
  *((_OWORD *)v11 + 2) = v12;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *((_QWORD *)v11 + 6) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  *((_QWORD *)v11 + 7) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 56) = 0;
  *((_QWORD *)v11 + 8) = *(_QWORD *)(a2 + 64);
  *((_QWORD *)v11 + 9) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 72) = 0;
  *((_DWORD *)v11 + 20) = *(_DWORD *)(a2 + 80);
  v15[2] = v11 + 88;
  sub_2263B1738(a1, v15);
  v13 = a1[1];
  sub_2263B1A7C(v15);
  return v13;
}

void sub_2263B1648(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2263B1A7C((void **)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_2263B165C(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  a1[1] = 0;
  if (a2[1])
  {
    v6 = 0;
    v7 = 0;
    sub_2263AD508((uint64_t)&v6, (uint64_t)a1);
    v4 = a2[1];
    a1[1] = v4;
    if ((~*((_DWORD *)a2 + 2) & 3) != 0)
      (*(void (**)(_QWORD *, _QWORD *))((v4 & 0xFFFFFFFFFFFFFFF8) + 40))(a2, a1);
    else
      *a1 = *a2;
    a2[1] = 0;
    if (v7)
      (*(void (**)(uint64_t *))(v7 + 32))(&v6);
  }
  return a1;
}

void sub_2263B1720(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_2263AACCC(a1);
  _Unwind_Resume(a1);
}

uint64_t sub_2263B1738(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_2263B17F4((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_2263B17AC(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x2E8BA2E8BA2E8BBLL)
    sub_2263AADA8();
  return operator new(88 * a2);
}

uint64_t sub_2263B17F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v11;
  _QWORD v13[3];
  uint64_t v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  v14 = 0;
  if (a3 == a5)
  {
    v11 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      v9 -= 88;
      sub_2263B18B8(a1, (_QWORD *)(v7 - 88), v9);
      v7 = *((_QWORD *)&v16 + 1) - 88;
      *((_QWORD *)&v16 + 1) -= 88;
    }
    while (v9 != a5);
    v11 = v16;
  }
  LOBYTE(v14) = 1;
  sub_2263B198C((uint64_t)v13);
  return v11;
}

void sub_2263B18A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2263B198C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_2263B18B8(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *result;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;

  result = sub_2263B0700(a2, (_QWORD *)a3);
  v5 = *(_OWORD *)(a3 + 32);
  *((_OWORD *)result + 1) = *(_OWORD *)(a3 + 16);
  *((_OWORD *)result + 2) = v5;
  v6 = *(_QWORD *)(a3 + 48);
  result[6] = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 - 16);
    if (result[5])
      v7 = (unint64_t *)result[5];
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = *(_QWORD *)(a3 + 56);
  result[7] = v9;
  if ((v9 & 7) != 0)
  {
    v10 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 2, v10));
    if ((v11 & 1) == 0)
      result[7] &= 0xFFFFFFFFFFFFFFF8;
  }
  result[8] = *(_QWORD *)(a3 + 64);
  v12 = *(_QWORD *)(a3 + 72);
  result[9] = v12;
  if ((v12 & 7) != 0)
  {
    v13 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 2, v13));
    if ((v14 & 1) == 0)
      result[9] &= 0xFFFFFFFFFFFFFFF8;
  }
  *((_DWORD *)result + 20) = *(_DWORD *)(a3 + 80);
  return result;
}

uint64_t sub_2263B198C(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_2263B19C0((uint64_t *)a1);
  return a1;
}

uint64_t *sub_2263B19C0(uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(result[2] + 8);
  v2 = *(_QWORD *)(result[1] + 8);
  if (v1 != v2)
  {
    v3 = *result;
    do
    {
      result = (uint64_t *)sub_2263B1A10(v3, v1);
      v1 += 88;
    }
    while (v1 != v2);
  }
  return result;
}

uint64_t sub_2263B1A10(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;

  v3 = *(_QWORD *)(a2 + 72);
  if ((v3 & 7) != 0)
  {
    v4 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  v6 = *(_QWORD *)(a2 + 56);
  if ((v6 & 7) != 0)
  {
    v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  sub_2263AC71C(a2 + 16);
  return sub_2263AD568(a2);
}

void **sub_2263B1A7C(void **a1)
{
  sub_2263B1AAC((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

uint64_t sub_2263B1AAC(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(result + 8);
  v1 = *(_QWORD *)(result + 16);
  if (v1 != v2)
  {
    v3 = result;
    do
    {
      v4 = *(_QWORD *)(v3 + 32);
      *(_QWORD *)(v3 + 16) = v1 - 88;
      result = sub_2263B1A10(v4, v1 - 88);
      v1 = *(_QWORD *)(v3 + 16);
    }
    while (v1 != v2);
  }
  return result;
}

void sub_2263B1AF0(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;

  if (!*(_DWORD *)(a1 + 8))
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)(a1 + 24))
      goto LABEL_14;
    v5 = *(_QWORD *)(a1 + 32);
    if (!v5)
      goto LABEL_10;
    v6 = atomic_load((unint64_t *)(v5 - 16));
    if (v6 != 1)
      goto LABEL_14;
    v5 = *(_QWORD *)(a1 + 32);
    if (v5)
    {
      if (*(_QWORD *)(a1 + 24))
        v7 = (uint64_t *)a1;
      else
        v7 = (uint64_t *)(v5 - 8);
      v8 = *v7;
    }
    else
    {
LABEL_10:
      v8 = 0;
    }
    if (v4 != v8)
    {
      v9 = *a2;
      v10 = v5 + 12 * v4;
      *(_DWORD *)(v10 + 8) = *((_DWORD *)a2 + 2);
      *(_QWORD *)v10 = v9;
LABEL_13:
      ++*(_QWORD *)a1;
      return;
    }
LABEL_14:
    v11 = *(uint64_t **)(a1 + 32);
    v12 = 1;
    do
    {
      v13 = v12;
      v12 *= 2;
    }
    while (v13 < v4 + 1);
    v14 = sub_2263B1C84(a1, v13);
    v15 = v14;
    if (v4)
    {
      v16 = 12 * v4;
      v17 = v14;
      do
      {
        v18 = *v11;
        *((_DWORD *)v17 + 2) = *((_DWORD *)v11 + 2);
        *v17 = v18;
        v17 = (_QWORD *)((char *)v17 + 12);
        v11 = (uint64_t *)((char *)v11 + 12);
        v16 -= 12;
      }
      while (v16);
    }
    v19 = *a2;
    v20 = (char *)v14 + 12 * v4;
    *((_DWORD *)v20 + 2) = *((_DWORD *)a2 + 2);
    *(_QWORD *)v20 = v19;
    sub_2263AC71C(a1);
    *(_QWORD *)(a1 + 32) = v15;
    goto LABEL_13;
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper();
}

_QWORD *sub_2263B1C84(uint64_t a1, unint64_t a2)
{
  size_t v3;
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;

  v7 = 0;
  v8 = 0;
  sub_2263AC890((uint64_t)&v7);
  if (a2 > 0x1555555555555553)
    v3 = -1;
  else
    v3 = 12 * a2 + 16;
  v4 = operator new(v3);
  *v4 = 1;
  v4[1] = a2;
  while (1)
  {
    v5 = v8;
    LODWORD(v8) = v8 - 1;
    if (!v5)
      break;
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End();
  }
  return v4 + 2;
}

void sub_2263B1D14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2263AC840((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2263B1D2C(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 22)
    return 1;
  if ((v1 & 4) != 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_24EDD69B8);
  else
    return 0;
}

double sub_2263B1D64@<D0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  double result;

  v2 = operator new();
  result = 0.0;
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_QWORD *)(v2 + 32) = 0;
  *a1 = v2;
  a1[1] = (uint64_t)sub_2263B1DBC;
  a1[2] = (uint64_t)&stru_24EDD69B8;
  return result;
}

uint64_t sub_2263B1DBC(uint64_t result)
{
  if (result)
  {
    sub_2263AC71C(result);
    JUMPOUT(0x2276980E0);
  }
  return result;
}

uint64_t sub_2263B1E04(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (!result)
    __assert_rtn("operator->", "intrusive_ptr.hpp", 199, "px != 0");
  return result;
}

void sub_2263B1E44(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this)
{
  uint64_t v1;
  unint64_t v3;
  __int128 *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _OWORD *v9;
  __int128 v10;

  v1 = *((_QWORD *)this + 4);
  if (v1)
  {
    if (*((_QWORD *)this + 3) || (v3 = atomic_load((unint64_t *)(v1 - 16)), v3 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>::_DetachIfNotUnique() [T = pxrInternal__aapl__pxrReserved__::GfVec4f]");
      v4 = (__int128 *)*((_QWORD *)this + 4);
      v5 = *(_QWORD *)this;
      v6 = sub_2263B1ED8((uint64_t)this, *(_QWORD *)this);
      v7 = v6;
      if (v5)
      {
        v8 = 16 * v5;
        v9 = v6;
        do
        {
          v10 = *v4++;
          *v9++ = v10;
          v8 -= 16;
        }
        while (v8);
      }
      sub_2263AC71C((uint64_t)this);
      *((_QWORD *)this + 4) = v7;
    }
  }
}

_QWORD *sub_2263B1ED8(uint64_t a1, unint64_t a2)
{
  size_t v3;
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;

  v7 = 0;
  v8 = 0;
  sub_2263AC890((uint64_t)&v7);
  if (a2 > 0xFFFFFFFFFFFFFFELL)
    v3 = -1;
  else
    v3 = 16 * a2 + 16;
  v4 = operator new(v3);
  *v4 = 1;
  v4[1] = a2;
  while (1)
  {
    v5 = v8;
    LODWORD(v8) = v8 - 1;
    if (!v5)
      break;
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End();
  }
  return v4 + 2;
}

void sub_2263B1F5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2263AC840((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2263B1F74(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;

  v1 = *((_QWORD *)this + 4);
  if (v1)
  {
    if (*((_QWORD *)this + 3) || (v3 = atomic_load((unint64_t *)(v1 - 16)), v3 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>::_DetachIfNotUnique() [T = pxrInternal__aapl__pxrReserved__::GfVec3f]");
      v4 = (uint64_t *)*((_QWORD *)this + 4);
      v5 = *(_QWORD *)this;
      v6 = sub_2263B1C84((uint64_t)this, *(_QWORD *)this);
      v7 = v6;
      if (v5)
      {
        v8 = 12 * v5;
        v9 = v6;
        do
        {
          v10 = *v4;
          *((_DWORD *)v9 + 2) = *((_DWORD *)v4 + 2);
          *v9 = v10;
          v9 = (_QWORD *)((char *)v9 + 12);
          v4 = (uint64_t *)((char *)v4 + 12);
          v8 -= 12;
        }
        while (v8);
      }
      sub_2263AC71C((uint64_t)this);
      *((_QWORD *)this + 4) = v7;
    }
  }
}

void sub_2263B2018(unint64_t *a1, unint64_t a2, _OWORD **a3)
{
  unint64_t v3;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  uint64_t v11;
  _OWORD *v12;
  uint64_t v13;
  unint64_t *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  _OWORD *v18;
  unint64_t v19;
  unint64_t *v20;
  uint64_t v21;
  unint64_t *v22;
  __int128 v23;
  _OWORD *v24;
  uint64_t v25;

  v3 = *a1;
  if (*a1 == a2)
    return;
  if (!a2)
    goto LABEL_18;
  v7 = (unint64_t *)a1[4];
  if (v7)
  {
    if (!a1[3])
    {
      v8 = atomic_load(v7 - 2);
      if (v8 == 1)
      {
        if (v3 < a2)
        {
          v9 = a1[4];
          if (*(_QWORD *)(v9 - 8) < a2)
          {
            v10 = sub_2263B1ED8((uint64_t)a1, a2);
            v7 = v10;
            if (v3)
            {
              v11 = 0;
              do
              {
                *(_OWORD *)&v10[v11] = *(_OWORD *)(v9 + v11 * 8);
                v11 += 2;
              }
              while (2 * v3 != v11);
            }
          }
          v12 = *a3;
          v13 = 2 * v3;
          do
          {
            *(_OWORD *)&v7[v13] = *v12;
            v13 += 2;
          }
          while (2 * a2 != v13);
        }
        v14 = v7;
        goto LABEL_29;
      }
      v7 = (unint64_t *)a1[4];
    }
    if (v3 >= a2)
      v19 = a2;
    else
      v19 = *a1;
    v20 = sub_2263B1ED8((uint64_t)a1, a2);
    v14 = v20;
    if (v19)
    {
      v21 = 16 * v19;
      v22 = v20;
      do
      {
        v23 = *(_OWORD *)v7;
        v7 += 2;
        *(_OWORD *)v22 = v23;
        v22 += 2;
        v21 -= 16;
      }
      while (v21);
    }
    if (v3 < a2)
    {
      v24 = *a3;
      v25 = 2 * v3;
      do
      {
        *(_OWORD *)&v20[v25] = *v24;
        v25 += 2;
      }
      while (2 * a2 != v25);
    }
    goto LABEL_29;
  }
  v15 = 16 * a2;
  if (16 * a2 / a2 != 16)
  {
LABEL_18:
    sub_2263AD1C8(a1);
    return;
  }
  v16 = sub_2263B1ED8((uint64_t)a1, a2);
  v14 = v16;
  v17 = 0;
  v18 = *a3;
  do
  {
    *(_OWORD *)&v16[v17 / 8] = *v18;
    v17 += 16;
  }
  while (v15 != v17);
LABEL_29:
  if (v14 != (unint64_t *)a1[4])
  {
    sub_2263AC71C((uint64_t)a1);
    a1[4] = (unint64_t)v14;
  }
  *a1 = a2;
}

void sub_2263B21CC(unint64_t *a1, unint64_t a2, uint64_t **a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t *v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;

  v3 = *a1;
  if (*a1 == a2)
    return;
  if (!a2)
    goto LABEL_18;
  v7 = (_QWORD *)a1[4];
  if (v7)
  {
    if (!a1[3])
    {
      v8 = atomic_load(v7 - 2);
      if (v8 == 1)
      {
        if (v3 < a2)
        {
          v9 = a1[4];
          if (*(_QWORD *)(v9 - 8) < a2)
          {
            v10 = sub_2263B1C84((uint64_t)a1, a2);
            v7 = v10;
            if (v3)
            {
              v11 = 0;
              do
              {
                v12 = (char *)v10 + v11;
                v13 = *(_QWORD *)(v9 + v11);
                *((_DWORD *)v12 + 2) = *(_DWORD *)(v9 + v11 + 8);
                *(_QWORD *)v12 = v13;
                v11 += 12;
              }
              while (12 * v3 != v11);
            }
          }
          v14 = *a3;
          v15 = 12 * v3;
          do
          {
            v16 = (char *)v7 + v15;
            v17 = *v14;
            *((_DWORD *)v16 + 2) = *((_DWORD *)v14 + 2);
            *(_QWORD *)v16 = v17;
            v15 += 12;
          }
          while (12 * a2 != v15);
        }
        v18 = v7;
        goto LABEL_29;
      }
      v7 = (_QWORD *)a1[4];
    }
    if (v3 >= a2)
      v24 = a2;
    else
      v24 = *a1;
    v25 = sub_2263B1C84((uint64_t)a1, a2);
    v18 = v25;
    if (v24)
    {
      v26 = 12 * v24;
      v27 = v25;
      do
      {
        v28 = *v7;
        *((_DWORD *)v27 + 2) = *((_DWORD *)v7 + 2);
        *v27 = v28;
        v27 = (_QWORD *)((char *)v27 + 12);
        v7 = (_QWORD *)((char *)v7 + 12);
        v26 -= 12;
      }
      while (v26);
    }
    if (v3 < a2)
    {
      v29 = *a3;
      v30 = 12 * v3;
      do
      {
        v31 = (char *)v25 + v30;
        v32 = *v29;
        *((_DWORD *)v31 + 2) = *((_DWORD *)v29 + 2);
        *(_QWORD *)v31 = v32;
        v30 += 12;
      }
      while (12 * a2 != v30);
    }
    goto LABEL_29;
  }
  if (a2 >= 0x1555555555555556)
  {
LABEL_18:
    sub_2263AD1C8(a1);
    return;
  }
  v19 = sub_2263B1C84((uint64_t)a1, a2);
  v18 = v19;
  v20 = 0;
  v21 = *a3;
  do
  {
    v22 = (char *)v19 + v20;
    v23 = *v21;
    *((_DWORD *)v22 + 2) = *((_DWORD *)v21 + 2);
    *(_QWORD *)v22 = v23;
    v20 += 12;
  }
  while (12 * a2 != v20);
LABEL_29:
  if (v18 != (_QWORD *)a1[4])
  {
    sub_2263AC71C((uint64_t)a1);
    a1[4] = (unint64_t)v18;
  }
  *a1 = a2;
}

uint64_t *sub_2263B23E4(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t *sub_2263B240C(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_2263B2644(a1);
}

uint64_t sub_2263B241C(uint64_t *a1)
{
  sub_2263B26AC(a1);
  return 1;
}

unint64_t sub_2263B2434(uint64_t *a1)
{
  uint64_t *v1;
  char v3;

  v1 = (uint64_t *)sub_2263B26AC(a1);
  return sub_2263B26EC((uint64_t)&v3, v1);
}

BOOL sub_2263B245C(uint64_t *a1, uint64_t *a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)sub_2263B26AC(a1);
  v4 = sub_2263B26AC(a2);
  return sub_2263B2830(v3, v4);
}

BOOL sub_2263B2490(uint64_t *a1, uint64_t a2)
{
  _QWORD *v3;

  v3 = (_QWORD *)sub_2263B26AC(a1);
  return sub_2263B2830(v3, a2);
}

uint64_t sub_2263B24B8(uint64_t *a1)
{
  sub_2263B26AC(a1);
  return 0;
}

uint64_t sub_2263B24D4(uint64_t *a1, uint64_t a2)
{
  sub_2263B26AC(a1);
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray();
  return a2;
}

void *sub_2263B2520(uint64_t *a1)
{
  sub_2263B26AC(a1);
  return &unk_24EDD6A88;
}

uint64_t sub_2263B253C(uint64_t *a1)
{
  sub_2263B26AC(a1);
  return 1;
}

void *sub_2263B2554(uint64_t *a1)
{
  sub_2263B26AC(a1);
  return &unk_24EDD6AA0;
}

uint64_t sub_2263B2574(uint64_t *a1)
{
  return *(_QWORD *)sub_2263B26AC(a1);
}

BOOL sub_2263B258C(uint64_t *a1, uint64_t a2)
{
  sub_2263B26AC(a1);
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7VtArrayINS_7GfVec4fEEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_2263B25CC(uint64_t *a1)
{
  const std::type_info *v1;

  sub_2263B26AC(a1);
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&unk_24EDD6A88, v1);
}

void *sub_2263B25F0(uint64_t *a1)
{
  sub_2263B26AC(a1);
  return &unk_24EDD6A88;
}

uint64_t sub_2263B2610@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;

  v3 = sub_2263B26AC(a1);
  a2[1] = (uint64_t)&off_24EDD69D0;
  return sub_2263B131C(a2, v3);
}

uint64_t *sub_2263B2644(uint64_t *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *a1;
  if (*a1)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      __dmb(9u);
      sub_2263AC71C(v2);
      MEMORY[0x2276980E0](v2, 0x1020C40874388CCLL);
    }
  }
  return a1;
}

uint64_t sub_2263B26AC(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (!result)
    __assert_rtn("operator->", "intrusive_ptr.hpp", 199, "px != 0");
  return result;
}

unint64_t sub_2263B26EC(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  float *v3;
  float *v4;
  unint64_t v5;
  _QWORD v7[2];

  v2 = *a2;
  v7[0] = v2;
  v7[1] = 1;
  if (v2)
  {
    v3 = (float *)a2[4];
    do
    {
      --v2;
      v4 = v3 + 4;
      sub_2263B2760((uint64_t)v7, v3);
      v3 = v4;
    }
    while (v2);
    v5 = 0x9E3779B97F4A7C55 * v7[0];
  }
  else
  {
    v5 = 0;
  }
  return bswap64(v5);
}

uint64_t sub_2263B2760(uint64_t a1, float *a2)
{
  uint64_t result;
  unint64_t v4;
  _QWORD v5[2];

  v5[0] = 0;
  v5[1] = 0;
  result = sub_2263B27E0((uint64_t)v5, a2, a2 + 1, a2 + 2, a2 + 3);
  v4 = bswap64(0x9E3779B97F4A7C55 * v5[0]);
  if (*(_BYTE *)(a1 + 8))
    v4 += (*(_QWORD *)a1 + v4 + (*(_QWORD *)a1 + v4) * (*(_QWORD *)a1 + v4)) >> 1;
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v4;
  return result;
}

uint64_t sub_2263B27E0(uint64_t a1, float *a2, float *a3, float *a4, float *a5)
{
  float v5;
  unint64_t v6;

  v5 = *a2;
  if (*a2 == 0.0)
    v5 = 0.0;
  v6 = LODWORD(v5);
  if (*(_BYTE *)(a1 + 8))
    v6 = ((*(_QWORD *)a1 + LODWORD(v5) + (*(_QWORD *)a1 + LODWORD(v5)) * (*(_QWORD *)a1 + (unint64_t)LODWORD(v5))) >> 1)
       + LODWORD(v5);
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v6;
  return sub_2263B0FF0(a1, a3, a4, a5);
}

BOOL sub_2263B2830(_QWORD *a1, uint64_t a2)
{
  _BOOL8 result;
  float *v5;
  float *v6;
  float *i;

  if (a1[4] == *(_QWORD *)(a2 + 32) && sub_2263B1164((uint64_t)a1, a2) && a1[3] == *(_QWORD *)(a2 + 24))
    return 1;
  result = sub_2263B1164((uint64_t)a1, a2);
  if (!result)
    return result;
  if (!*a1)
    return 1;
  v5 = (float *)a1[4];
  v6 = &v5[4 * *a1];
  for (i = *(float **)(a2 + 32); *v5 == *i && v5[1] == i[1] && v5[2] == i[2] && v5[3] == i[3]; i += 4)
  {
    v5 += 4;
    if (v5 == v6)
      return 1;
  }
  return 0;
}

uint64_t sub_2263B2900(uint64_t *a1)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v12;

  v2 = atomic_load((unsigned int *)(sub_2263B26AC(a1) + 40));
  if (v2 != 1)
  {
    v3 = operator new();
    v4 = sub_2263B26AC(a1);
    v5 = *(_OWORD *)(v4 + 16);
    *(_OWORD *)v3 = *(_OWORD *)v4;
    *(_OWORD *)(v3 + 16) = v5;
    v6 = *(_QWORD *)(v4 + 32);
    *(_QWORD *)(v3 + 32) = v6;
    if (v6)
    {
      v7 = (unint64_t *)(v6 - 16);
      if (*(_QWORD *)(v3 + 24))
        v7 = *(unint64_t **)(v3 + 24);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
    v9 = (unsigned int *)(v3 + 40);
    atomic_store(0, (unsigned int *)(v3 + 40));
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    v12 = *a1;
    *a1 = v3;
    sub_2263B2644(&v12);
  }
  return sub_2263B26AC(a1);
}

uint64_t sub_2263B29C4(_QWORD *a1)
{
  *a1 += 16;
  return pxrInternal__aapl__pxrReserved__::operator<<();
}

void sub_2263B2A54(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2263B2B40(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2263B2BD4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2263B2D94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  void *v10;
  unsigned int *v12;
  unsigned int v13;

  if ((a10 & 7) != 0)
  {
    v12 = (unsigned int *)(a10 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }

  _Unwind_Resume(a1);
}

_QWORD *sub_2263B2DCC(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  if (a1 != a2)
  {
    if (a2[1])
    {
      v8 = 0;
      v9 = 0;
      sub_2263AD508((uint64_t)&v8, (uint64_t)a1);
      v4 = a2[1];
      a1[1] = v4;
      if ((~*((_DWORD *)a2 + 2) & 3) != 0)
        (*(void (**)(_QWORD *, _QWORD *))((v4 & 0xFFFFFFFFFFFFFFF8) + 24))(a2, a1);
      else
        *a1 = *a2;
      if (v9)
        (*(void (**)(uint64_t *))(v9 + 32))(&v8);
    }
    else
    {
      v5 = a1[1];
      if (v5)
        v6 = (a1[1] & 3) == 3;
      else
        v6 = 1;
      if (!v6)
        (*(void (**)(_QWORD *))((v5 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
      a1[1] = 0;
    }
  }
  return a1;
}

void sub_2263B2EBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a11)
    (*(void (**)(char *))(a11 + 32))(&a10);
  _Unwind_Resume(exception_object);
}

void sub_2263B3010(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  void *v10;
  void *v11;
  unsigned int *v13;
  unsigned int v14;

  if ((a10 & 7) != 0)
  {
    v13 = (unsigned int *)(a10 & 0xFFFFFFFFFFFFFFF8);
    do
      v14 = __ldxr(v13);
    while (__stlxr(v14 - 2, v13));
  }

  _Unwind_Resume(a1);
}

void sub_2263B3164(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  void *v10;
  void *v11;
  unsigned int *v13;
  unsigned int v14;

  if ((a10 & 7) != 0)
  {
    v13 = (unsigned int *)(a10 & 0xFFFFFFFFFFFFFFF8);
    do
      v14 = __ldxr(v13);
    while (__stlxr(v14 - 2, v13));
  }

  _Unwind_Resume(a1);
}

void sub_2263B32B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  void *v10;
  void *v11;
  unsigned int *v13;
  unsigned int v14;

  if ((a10 & 7) != 0)
  {
    v13 = (unsigned int *)(a10 & 0xFFFFFFFFFFFFFFF8);
    do
      v14 = __ldxr(v13);
    while (__stlxr(v14 - 2, v13));
  }

  _Unwind_Resume(a1);
}

void sub_2263B3494(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  unsigned int *v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;

  if ((a10 & 7) != 0)
  {
    v12 = (unsigned int *)(a10 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  if ((a11 & 7) != 0)
  {
    v14 = (unsigned int *)(a11 & 0xFFFFFFFFFFFFFFF8);
    do
      v15 = __ldxr(v14);
    while (__stlxr(v15 - 2, v14));
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2263B34F8(pxrInternal__aapl__pxrReserved__::VtValue *a1, _QWORD *a2)
{
  _QWORD *v4;
  _BOOL8 v5;
  pxrInternal__aapl__pxrReserved__::VtValue *Typeid;
  const std::type_info *v7;
  std::type_info *v8;
  _QWORD *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  if (sub_2263BE444(a1))
  {
    v4 = (_QWORD *)sub_2263BE47C(a1);
    sub_2263BE4E4(a2, v4);
    return 1;
  }
  else
  {
    Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid(a1);
    if (pxrInternal__aapl__pxrReserved__::VtValue::_CanCast(Typeid, &stru_24EDD6E68, v7))
    {
      v11 = 0;
      v12 = 0;
      v8 = sub_2263BE548(a1);
      sub_2263B0700(&v11, v8);
      v5 = v12 != 0;
      if (v12)
      {
        v9 = (_QWORD *)sub_2263BE47C((pxrInternal__aapl__pxrReserved__::VtValue *)&v11);
        sub_2263BE4E4(a2, v9);
      }
      sub_2263AD568((uint64_t)&v11);
    }
    else
    {
      return 0;
    }
  }
  return v5;
}

void sub_2263B35D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2263AD568((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2263B3870(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  *(_QWORD *)(v16 - 56) = &__p;
  sub_2263BE380((void ***)(v16 - 56));
  sub_2263B3ABC((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t sub_2263B38C0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  std::ios_base *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = MEMORY[0x24BEDB858];
  v3 = MEMORY[0x24BEDB858] + 104;
  *(_QWORD *)(a1 + 128) = MEMORY[0x24BEDB858] + 104;
  *(_QWORD *)(a1 + 16) = v2 + 64;
  v4 = a1 + 16;
  v5 = (_QWORD *)MEMORY[0x24BEDB7F0];
  v6 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 16);
  v7 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 24);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + *(_QWORD *)(v6 - 24)) = v7;
  *(_QWORD *)(a1 + 8) = 0;
  v8 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v8, (void *)(a1 + 24));
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  v9 = v5[4];
  v10 = v5[5];
  *(_QWORD *)(a1 + 16) = v9;
  *(_QWORD *)(v4 + *(_QWORD *)(v9 - 24)) = v10;
  v11 = v5[1];
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + *(_QWORD *)(v11 - 24)) = v5[6];
  *(_QWORD *)a1 = v2 + 24;
  *(_QWORD *)(a1 + 128) = v3;
  *(_QWORD *)(a1 + 16) = v2 + 64;
  std::streambuf::basic_streambuf();
  *(_QWORD *)(a1 + 24) = MEMORY[0x24BEDB848] + 16;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 24;
  return a1;
}

void sub_2263B39C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::iostream::~basic_iostream();
  MEMORY[0x2276980B0](v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2263B39EC(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;

  if ((sub_2263BE65C(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  v2 = *((_QWORD *)a1 + 1);
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    return sub_2263BE7E4((uint64_t *)a1);
}

uint64_t sub_2263B3A54(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;

  if ((sub_2263BE824(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  v2 = *((_QWORD *)a1 + 1);
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    return sub_2263BE934((uint64_t *)a1);
}

uint64_t sub_2263B3ABC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = MEMORY[0x24BEDB7F0];
  v3 = *MEMORY[0x24BEDB7F0];
  *(_QWORD *)a1 = *MEMORY[0x24BEDB7F0];
  v4 = *(_QWORD *)(v2 + 72);
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 64);
  *(_QWORD *)(a1 + 24) = MEMORY[0x24BEDB848] + 16;
  *(_QWORD *)(a1 + 16) = v4;
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x2276980B0](a1 + 128);
  return a1;
}

void sub_2263B3BD8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2263AD568((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2263B3BF4(pxrInternal__aapl__pxrReserved__::VtValue *a1, _QWORD *a2)
{
  _BOOL8 v4;
  pxrInternal__aapl__pxrReserved__::VtValue *Typeid;
  const std::type_info *v6;
  std::type_info *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  if (sub_2263BE974(a1))
  {
    *a2 = *(_QWORD *)sub_2263BE9E4(a1);
    return 1;
  }
  else
  {
    Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid(a1);
    if (pxrInternal__aapl__pxrReserved__::VtValue::_CanCast(Typeid, &stru_24EDD6E98, v6))
    {
      v9 = 0;
      v10 = 0;
      v7 = sub_2263BEA4C(a1);
      sub_2263B0700(&v9, v7);
      v4 = v10 != 0;
      if (v10)
        *a2 = *(_QWORD *)sub_2263BE9E4((pxrInternal__aapl__pxrReserved__::VtValue *)&v9);
      sub_2263AD568((uint64_t)&v9);
    }
    else
    {
      return 0;
    }
  }
  return v4;
}

void sub_2263B3CCC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2263AD568((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2263B3D68(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2263AD568((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2263B3D84(pxrInternal__aapl__pxrReserved__::VtValue *a1, _BYTE *a2)
{
  _BOOL8 v4;
  pxrInternal__aapl__pxrReserved__::VtValue *Typeid;
  const std::type_info *v6;
  std::type_info *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  if (sub_2263BEB40(a1))
  {
    *a2 = *(_BYTE *)sub_2263BEB74(a1);
    return 1;
  }
  else
  {
    Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid(a1);
    if (pxrInternal__aapl__pxrReserved__::VtValue::_CanCast(Typeid, MEMORY[0x24BEDB770], v6))
    {
      v9 = 0;
      v10 = 0;
      v7 = sub_2263BEBDC(a1);
      sub_2263B0700(&v9, v7);
      v4 = v10 != 0;
      if (v10)
        *a2 = *(_BYTE *)sub_2263BEB74((pxrInternal__aapl__pxrReserved__::VtValue *)&v9);
      sub_2263AD568((uint64_t)&v9);
    }
    else
    {
      return 0;
    }
  }
  return v4;
}

void sub_2263B3E5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2263AD568((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2263B3EF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2263AD568((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2263B3F14(pxrInternal__aapl__pxrReserved__::VtValue *a1, _DWORD *a2)
{
  _BOOL8 v4;
  pxrInternal__aapl__pxrReserved__::VtValue *Typeid;
  const std::type_info *v6;
  std::type_info *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  if (sub_2263BECD0(a1))
  {
    *a2 = *(_DWORD *)sub_2263BED08(a1);
    return 1;
  }
  else
  {
    Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid(a1);
    if (pxrInternal__aapl__pxrReserved__::VtValue::_CanCast(Typeid, MEMORY[0x24BEDB798], v6))
    {
      v9 = 0;
      v10 = 0;
      v7 = sub_2263BED70(a1);
      sub_2263B0700(&v9, v7);
      v4 = v10 != 0;
      if (v10)
        *a2 = *(_DWORD *)sub_2263BED08((pxrInternal__aapl__pxrReserved__::VtValue *)&v9);
      sub_2263AD568((uint64_t)&v9);
    }
    else
    {
      return 0;
    }
  }
  return v4;
}

void sub_2263B3FEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2263AD568((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2263B4088(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2263AD568((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2263B40A4(pxrInternal__aapl__pxrReserved__::VtValue *a1, _DWORD *a2)
{
  _BOOL8 v4;
  pxrInternal__aapl__pxrReserved__::VtValue *Typeid;
  const std::type_info *v6;
  std::type_info *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  if (sub_2263BEE64(a1))
  {
    *a2 = *(_DWORD *)sub_2263BEE9C(a1);
    return 1;
  }
  else
  {
    Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid(a1);
    if (pxrInternal__aapl__pxrReserved__::VtValue::_CanCast(Typeid, MEMORY[0x24BEDB7A0], v6))
    {
      v9 = 0;
      v10 = 0;
      v7 = sub_2263BEF04(a1);
      sub_2263B0700(&v9, v7);
      v4 = v10 != 0;
      if (v10)
        *a2 = *(_DWORD *)sub_2263BEE9C((pxrInternal__aapl__pxrReserved__::VtValue *)&v9);
      sub_2263AD568((uint64_t)&v9);
    }
    else
    {
      return 0;
    }
  }
  return v4;
}

void sub_2263B417C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2263AD568((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2263B421C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2263AD568((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2263B4238(pxrInternal__aapl__pxrReserved__::VtValue *a1, _DWORD *a2)
{
  _BOOL8 v4;
  pxrInternal__aapl__pxrReserved__::VtValue *Typeid;
  const std::type_info *v6;
  std::type_info *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  if (sub_2263BEFF8(a1))
  {
    *a2 = *(_DWORD *)sub_2263BF030(a1);
    return 1;
  }
  else
  {
    Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid(a1);
    if (pxrInternal__aapl__pxrReserved__::VtValue::_CanCast(Typeid, MEMORY[0x24BEDB788], v6))
    {
      v9 = 0;
      v10 = 0;
      v7 = sub_2263BF098(a1);
      sub_2263B0700(&v9, v7);
      v4 = v10 != 0;
      if (v10)
        *a2 = *(_DWORD *)sub_2263BF030((pxrInternal__aapl__pxrReserved__::VtValue *)&v9);
      sub_2263AD568((uint64_t)&v9);
    }
    else
    {
      return 0;
    }
  }
  return v4;
}

void sub_2263B4310(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2263AD568((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2263B43B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2263AD568((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2263B43D0(pxrInternal__aapl__pxrReserved__::VtValue *a1, _QWORD *a2)
{
  _BOOL8 v4;
  pxrInternal__aapl__pxrReserved__::VtValue *Typeid;
  const std::type_info *v6;
  std::type_info *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  if (sub_2263BF18C(a1))
  {
    *a2 = *(_QWORD *)sub_2263BF1C4(a1);
    return 1;
  }
  else
  {
    Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid(a1);
    if (pxrInternal__aapl__pxrReserved__::VtValue::_CanCast(Typeid, &stru_24EDD6EA8, v6))
    {
      v9 = 0;
      v10 = 0;
      v7 = sub_2263BF22C(a1);
      sub_2263B0700(&v9, v7);
      v4 = v10 != 0;
      if (v10)
        *a2 = *(_QWORD *)sub_2263BF1C4((pxrInternal__aapl__pxrReserved__::VtValue *)&v9);
      sub_2263AD568((uint64_t)&v9);
    }
    else
    {
      return 0;
    }
  }
  return v4;
}

void sub_2263B44A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2263AD568((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2263B4554(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_2263AD568((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2263B4570(pxrInternal__aapl__pxrReserved__::VtValue *a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  _BOOL8 v6;
  pxrInternal__aapl__pxrReserved__::VtValue *Typeid;
  const std::type_info *v8;
  std::type_info *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  if (sub_2263BF2B4(a1))
  {
    v4 = sub_2263BF2EC(a1);
    v5 = *(_DWORD *)(v4 + 8);
    *(_QWORD *)a2 = *(_QWORD *)v4;
    *(_DWORD *)(a2 + 8) = v5;
    return 1;
  }
  else
  {
    Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid(a1);
    if (pxrInternal__aapl__pxrReserved__::VtValue::_CanCast(Typeid, &stru_24EDD69A8, v8))
    {
      v13 = 0;
      v14 = 0;
      v9 = sub_2263BF354(a1);
      sub_2263B0700(&v13, v9);
      v6 = v14 != 0;
      if (v14)
      {
        v10 = sub_2263BF2EC((pxrInternal__aapl__pxrReserved__::VtValue *)&v13);
        v11 = *(_QWORD *)v10;
        *(_DWORD *)(a2 + 8) = *(_DWORD *)(v10 + 8);
        *(_QWORD *)a2 = v11;
      }
      sub_2263AD568((uint64_t)&v13);
    }
    else
    {
      return 0;
    }
  }
  return v6;
}

void sub_2263B4658(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2263AD568((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2263B46FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_2263AD568((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2263B4718(pxrInternal__aapl__pxrReserved__::VtValue *a1, _OWORD *a2)
{
  _BOOL8 v4;
  pxrInternal__aapl__pxrReserved__::VtValue *Typeid;
  const std::type_info *v6;
  std::type_info *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  if (sub_2263BF41C(a1))
  {
    *a2 = *(_OWORD *)sub_2263BF454(a1);
    return 1;
  }
  else
  {
    Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid(a1);
    if (pxrInternal__aapl__pxrReserved__::VtValue::_CanCast(Typeid, &stru_24EDD6AA0, v6))
    {
      v9 = 0;
      v10 = 0;
      v7 = sub_2263BF4BC(a1);
      sub_2263B0700(&v9, v7);
      v4 = v10 != 0;
      if (v10)
        *a2 = *(_OWORD *)sub_2263BF454((pxrInternal__aapl__pxrReserved__::VtValue *)&v9);
      sub_2263AD568((uint64_t)&v9);
    }
    else
    {
      return 0;
    }
  }
  return v4;
}

void sub_2263B47F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2263AD568((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2263B4900(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2263AD568(v1 - 40);
  _Unwind_Resume(a1);
}

uint64_t sub_2263B491C(pxrInternal__aapl__pxrReserved__::VtValue *a1, _OWORD *a2)
{
  __int128 *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _BOOL8 v11;
  pxrInternal__aapl__pxrReserved__::VtValue *Typeid;
  const std::type_info *v13;
  std::type_info *v14;
  __int128 *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  if (sub_2263BF584(a1))
  {
    v4 = (__int128 *)sub_2263BF5BC(a1);
    v5 = v4[3];
    v7 = *v4;
    v6 = v4[1];
    a2[2] = v4[2];
    a2[3] = v5;
    *a2 = v7;
    a2[1] = v6;
    v8 = v4[7];
    v10 = v4[4];
    v9 = v4[5];
    a2[6] = v4[6];
    a2[7] = v8;
    a2[4] = v10;
    a2[5] = v9;
    return 1;
  }
  else
  {
    Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid(a1);
    if (pxrInternal__aapl__pxrReserved__::VtValue::_CanCast(Typeid, &stru_24EDD6EB8, v13))
    {
      v23 = 0;
      v24 = 0;
      v14 = sub_2263BF624(a1);
      sub_2263B0700(&v23, v14);
      v11 = v24 != 0;
      if (v24)
      {
        v15 = (__int128 *)sub_2263BF5BC((pxrInternal__aapl__pxrReserved__::VtValue *)&v23);
        v16 = *v15;
        v17 = v15[1];
        v18 = v15[3];
        a2[2] = v15[2];
        a2[3] = v18;
        *a2 = v16;
        a2[1] = v17;
        v19 = v15[4];
        v20 = v15[5];
        v21 = v15[7];
        a2[6] = v15[6];
        a2[7] = v21;
        a2[4] = v19;
        a2[5] = v20;
      }
      sub_2263AD568((uint64_t)&v23);
    }
    else
    {
      return 0;
    }
  }
  return v11;
}

void sub_2263B4A24(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2263AD568((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2263B4AC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2263AD568((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2263B4AE0(pxrInternal__aapl__pxrReserved__::VtValue *a1, _QWORD *a2)
{
  _BOOL8 v4;
  pxrInternal__aapl__pxrReserved__::VtValue *Typeid;
  const std::type_info *v6;
  std::type_info *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  if (sub_2263BF6EC(a1))
  {
    *a2 = *(_QWORD *)sub_2263BF724(a1);
    return 1;
  }
  else
  {
    Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid(a1);
    if (pxrInternal__aapl__pxrReserved__::VtValue::_CanCast(Typeid, MEMORY[0x24BEDB780], v6))
    {
      v9 = 0;
      v10 = 0;
      v7 = sub_2263BF78C(a1);
      sub_2263B0700(&v9, v7);
      v4 = v10 != 0;
      if (v10)
        *a2 = *(_QWORD *)sub_2263BF724((pxrInternal__aapl__pxrReserved__::VtValue *)&v9);
      sub_2263AD568((uint64_t)&v9);
    }
    else
    {
      return 0;
    }
  }
  return v4;
}

void sub_2263B4BB8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2263AD568((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2263B4C5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_2263AD568((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2263B4C78(pxrInternal__aapl__pxrReserved__::VtValue *a1, _OWORD *a2)
{
  _BOOL8 v4;
  pxrInternal__aapl__pxrReserved__::VtValue *Typeid;
  const std::type_info *v6;
  std::type_info *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  if (sub_2263BF880(a1))
  {
    *a2 = *(_OWORD *)sub_2263BF8B8(a1);
    return 1;
  }
  else
  {
    Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid(a1);
    if (pxrInternal__aapl__pxrReserved__::VtValue::_CanCast(Typeid, &stru_24EDD6EC8, v6))
    {
      v9 = 0;
      v10 = 0;
      v7 = sub_2263BF920(a1);
      sub_2263B0700(&v9, v7);
      v4 = v10 != 0;
      if (v10)
        *a2 = *(_OWORD *)sub_2263BF8B8((pxrInternal__aapl__pxrReserved__::VtValue *)&v9);
      sub_2263AD568((uint64_t)&v9);
    }
    else
    {
      return 0;
    }
  }
  return v4;
}

void sub_2263B4D50(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2263AD568((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2263B4E1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_2263AD568((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2263B4E38(pxrInternal__aapl__pxrReserved__::VtValue *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _BOOL8 v6;
  pxrInternal__aapl__pxrReserved__::VtValue *Typeid;
  const std::type_info *v8;
  std::type_info *v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  if (sub_2263BF9E8(a1))
  {
    v4 = sub_2263BFA20(a1);
    v5 = *(_QWORD *)(v4 + 16);
    *(_OWORD *)a2 = *(_OWORD *)v4;
    *(_QWORD *)(a2 + 16) = v5;
    return 1;
  }
  else
  {
    Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid(a1);
    if (pxrInternal__aapl__pxrReserved__::VtValue::_CanCast(Typeid, &stru_24EDD6ED8, v8))
    {
      v13 = 0;
      v14 = 0;
      v9 = sub_2263BFA88(a1);
      sub_2263B0700(&v13, v9);
      v6 = v14 != 0;
      if (v14)
      {
        v10 = sub_2263BFA20((pxrInternal__aapl__pxrReserved__::VtValue *)&v13);
        v11 = *(_OWORD *)v10;
        *(_QWORD *)(a2 + 16) = *(_QWORD *)(v10 + 16);
        *(_OWORD *)a2 = v11;
      }
      sub_2263AD568((uint64_t)&v13);
    }
    else
    {
      return 0;
    }
  }
  return v6;
}

void sub_2263B4F20(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2263AD568((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2263B4FDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_2263AD568((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2263B4FF8(pxrInternal__aapl__pxrReserved__::VtValue *a1, _OWORD *a2)
{
  _OWORD *v4;
  __int128 v5;
  _BOOL8 v6;
  pxrInternal__aapl__pxrReserved__::VtValue *Typeid;
  const std::type_info *v8;
  std::type_info *v9;
  _OWORD *v10;
  __int128 v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  if (sub_2263BFB50(a1))
  {
    v4 = (_OWORD *)sub_2263BFB88(a1);
    v5 = v4[1];
    *a2 = *v4;
    a2[1] = v5;
    return 1;
  }
  else
  {
    Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid(a1);
    if (pxrInternal__aapl__pxrReserved__::VtValue::_CanCast(Typeid, &stru_24EDD6EE8, v8))
    {
      v13 = 0;
      v14 = 0;
      v9 = sub_2263BFBF0(a1);
      sub_2263B0700(&v13, v9);
      v6 = v14 != 0;
      if (v14)
      {
        v10 = (_OWORD *)sub_2263BFB88((pxrInternal__aapl__pxrReserved__::VtValue *)&v13);
        v11 = v10[1];
        *a2 = *v10;
        a2[1] = v11;
      }
      sub_2263AD568((uint64_t)&v13);
    }
    else
    {
      return 0;
    }
  }
  return v6;
}

void sub_2263B50D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2263AD568((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2263B51E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2263AD568(v1 - 40);
  _Unwind_Resume(a1);
}

void sub_2263B5284(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_2263AD568((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2263B52A0(pxrInternal__aapl__pxrReserved__::VtValue *a1, _OWORD *a2)
{
  _BOOL8 v4;
  pxrInternal__aapl__pxrReserved__::VtValue *Typeid;
  const std::type_info *v6;
  std::type_info *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  if (sub_2263BFCB8(a1))
  {
    *a2 = *(_OWORD *)sub_2263BFCF0(a1);
    return 1;
  }
  else
  {
    Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid(a1);
    if (pxrInternal__aapl__pxrReserved__::VtValue::_CanCast(Typeid, &stru_24EDD6EF8, v6))
    {
      v9 = 0;
      v10 = 0;
      v7 = sub_2263BFD58(a1);
      sub_2263B0700(&v9, v7);
      v4 = v10 != 0;
      if (v10)
        *a2 = *(_OWORD *)sub_2263BFCF0((pxrInternal__aapl__pxrReserved__::VtValue *)&v9);
      sub_2263AD568((uint64_t)&v9);
    }
    else
    {
      return 0;
    }
  }
  return v4;
}

void sub_2263B5378(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2263AD568((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2263B54A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a2)
    sub_2263AACCC(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2263B54EC(pxrInternal__aapl__pxrReserved__::VtValue *a1, uint64_t a2)
{
  _DWORD *v4;
  _BOOL8 v5;
  pxrInternal__aapl__pxrReserved__::VtValue *Typeid;
  const std::type_info *v7;
  std::type_info *v8;
  _DWORD *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  if (sub_2263BFE20(a1))
  {
    v4 = (_DWORD *)sub_2263BFE90(a1);
    sub_2263C0080(a2, v4);
    sub_2263C00D4(a2 + 4, v4 + 1);
    return 1;
  }
  else
  {
    Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid(a1);
    if (pxrInternal__aapl__pxrReserved__::VtValue::_CanCast(Typeid, &stru_24EDD6F08, v7))
    {
      v11 = 0;
      v12 = 0;
      v8 = sub_2263BFEF8(a1);
      sub_2263B0700(&v11, v8);
      v5 = v12 != 0;
      if (v12)
      {
        v9 = (_DWORD *)sub_2263BFE90((pxrInternal__aapl__pxrReserved__::VtValue *)&v11);
        sub_2263C0080(a2, v9);
        sub_2263C00D4(a2 + 4, v9 + 1);
      }
      sub_2263AD568((uint64_t)&v11);
    }
    else
    {
      return 0;
    }
  }
  return v5;
}

void sub_2263B55F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2263AD568((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2263B5610(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return sub_2263BDE64(a1);
}

void sub_2263B5750(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  sub_2263B58AC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2263B5788(pxrInternal__aapl__pxrReserved__::VtValue *a1, std::string *a2)
{
  const std::string *v4;
  _BOOL8 v5;
  pxrInternal__aapl__pxrReserved__::VtValue *Typeid;
  const std::type_info *v7;
  std::type_info *v8;
  const std::string *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  if (sub_2263BE65C(a1))
  {
    v4 = (const std::string *)sub_2263B39EC(a1);
    std::string::operator=(a2, v4);
    std::string::operator=(a2 + 1, v4 + 1);
    return 1;
  }
  else
  {
    Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid(a1);
    if (pxrInternal__aapl__pxrReserved__::VtValue::_CanCast(Typeid, &stru_24EDD6E78, v7))
    {
      v11 = 0;
      v12 = 0;
      v8 = sub_2263C011C(a1);
      sub_2263B0700(&v11, v8);
      v5 = v12 != 0;
      if (v12)
      {
        v9 = (const std::string *)sub_2263B39EC((pxrInternal__aapl__pxrReserved__::VtValue *)&v11);
        std::string::operator=(a2, v9);
        std::string::operator=(a2 + 1, v9 + 1);
      }
      sub_2263AD568((uint64_t)&v11);
    }
    else
    {
      return 0;
    }
  }
  return v5;
}

void sub_2263B5890(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_2263B58AC(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void sub_2263B5A38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  if (a14 < 0)
    operator delete(__p);
  sub_2263B58AC((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void sub_2263B5B8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_2263AACCC(exception_object);
}

uint64_t sub_2263B5BE0(pxrInternal__aapl__pxrReserved__::VtValue *a1, uint64_t a2)
{
  __int128 *v4;
  _BOOL8 v5;
  pxrInternal__aapl__pxrReserved__::VtValue *Typeid;
  const std::type_info *v7;
  std::type_info *v8;
  __int128 *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  if (sub_2263C01A4(a1))
  {
    v4 = (__int128 *)sub_2263C01DC(a1);
    sub_2263AA5D0(a2, v4);
    return 1;
  }
  else
  {
    Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid(a1);
    if (pxrInternal__aapl__pxrReserved__::VtValue::_CanCast(Typeid, &stru_24EDD6F18, v7))
    {
      v11 = 0;
      v12 = 0;
      v8 = sub_2263C0244(a1);
      sub_2263B0700(&v11, v8);
      v5 = v12 != 0;
      if (v12)
      {
        v9 = (__int128 *)sub_2263C01DC((pxrInternal__aapl__pxrReserved__::VtValue *)&v11);
        sub_2263AA5D0(a2, v9);
      }
      sub_2263AD568((uint64_t)&v11);
    }
    else
    {
      return 0;
    }
  }
  return v5;
}

void sub_2263B5CC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  _Unwind_Resume(exception_object);
}

void sub_2263B5DDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_2263AACCC(exception_object);
}

uint64_t sub_2263B5E30(pxrInternal__aapl__pxrReserved__::VtValue *a1, uint64_t a2)
{
  __int128 *v4;
  _BOOL8 v5;
  pxrInternal__aapl__pxrReserved__::VtValue *Typeid;
  const std::type_info *v7;
  std::type_info *v8;
  __int128 *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  if (sub_2263C03AC(a1))
  {
    v4 = (__int128 *)sub_2263C03E4(a1);
    sub_2263C044C(a2, v4);
    return 1;
  }
  else
  {
    Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid(a1);
    if (pxrInternal__aapl__pxrReserved__::VtValue::_CanCast(Typeid, &stru_24EDD6F30, v7))
    {
      v11 = 0;
      v12 = 0;
      v8 = sub_2263C0504(a1);
      sub_2263B0700(&v11, v8);
      v5 = v12 != 0;
      if (v12)
      {
        v9 = (__int128 *)sub_2263C03E4((pxrInternal__aapl__pxrReserved__::VtValue *)&v11);
        sub_2263C044C(a2, v9);
      }
      sub_2263AD568((uint64_t)&v11);
    }
    else
    {
      return 0;
    }
  }
  return v5;
}

void sub_2263B5F10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  _Unwind_Resume(exception_object);
}

void sub_2263B6004(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_2263AACCC(exception_object);
}

uint64_t sub_2263B6044(pxrInternal__aapl__pxrReserved__::VtValue *a1, uint64_t a2)
{
  __int128 *v4;
  _BOOL8 v5;
  pxrInternal__aapl__pxrReserved__::VtValue *Typeid;
  const std::type_info *v7;
  std::type_info *v8;
  __int128 *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  if (sub_2263C066C(a1))
  {
    v4 = (__int128 *)sub_2263C06A4(a1);
    sub_2263C070C(a2, v4);
    return 1;
  }
  else
  {
    Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid(a1);
    if (pxrInternal__aapl__pxrReserved__::VtValue::_CanCast(Typeid, &stru_24EDD6F48, v7))
    {
      v11 = 0;
      v12 = 0;
      v8 = sub_2263C07C4(a1);
      sub_2263B0700(&v11, v8);
      v5 = v12 != 0;
      if (v12)
      {
        v9 = (__int128 *)sub_2263C06A4((pxrInternal__aapl__pxrReserved__::VtValue *)&v11);
        sub_2263C070C(a2, v9);
      }
      sub_2263AD568((uint64_t)&v11);
    }
    else
    {
      return 0;
    }
  }
  return v5;
}

void sub_2263B6124(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  _Unwind_Resume(exception_object);
}

void sub_2263B6210(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_2263B6230(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;

  if ((sub_2263C0A5C(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  v2 = *((_QWORD *)a1 + 1);
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    return sub_2263C0B34((uint64_t *)a1);
}

void sub_2263B63A8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_2263B63F0(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;

  if ((sub_2263C0B74(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  v2 = *((_QWORD *)a1 + 1);
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    return sub_2263C0C4C((uint64_t *)a1);
}

void sub_2263B657C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2263B6720(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

uint64_t sub_2263B6768(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;

  if ((sub_2263C0C8C(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  v2 = *((_QWORD *)a1 + 1);
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    return sub_2263C0D9C((uint64_t *)a1);
}

void sub_2263B68D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_2263AACCC(exception_object);
}

uint64_t sub_2263B6924(pxrInternal__aapl__pxrReserved__::VtValue *a1, uint64_t a2)
{
  __int128 *v4;
  _BOOL8 v5;
  pxrInternal__aapl__pxrReserved__::VtValue *Typeid;
  const std::type_info *v7;
  std::type_info *v8;
  __int128 *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  if (sub_2263C0DDC(a1))
  {
    v4 = (__int128 *)sub_2263C0E14(a1);
    sub_2263C0E7C(a2, v4);
    return 1;
  }
  else
  {
    Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid(a1);
    if (pxrInternal__aapl__pxrReserved__::VtValue::_CanCast(Typeid, &stru_24EDD6FA8, v7))
    {
      v11 = 0;
      v12 = 0;
      v8 = sub_2263C0F34(a1);
      sub_2263B0700(&v11, v8);
      v5 = v12 != 0;
      if (v12)
      {
        v9 = (__int128 *)sub_2263C0E14((pxrInternal__aapl__pxrReserved__::VtValue *)&v11);
        sub_2263C0E7C(a2, v9);
      }
      sub_2263AD568((uint64_t)&v11);
    }
    else
    {
      return 0;
    }
  }
  return v5;
}

void sub_2263B6A04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  _Unwind_Resume(exception_object);
}

void sub_2263B6AF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_2263AACCC(exception_object);
}

uint64_t sub_2263B6B38(pxrInternal__aapl__pxrReserved__::VtValue *a1, uint64_t a2)
{
  __int128 *v4;
  _BOOL8 v5;
  pxrInternal__aapl__pxrReserved__::VtValue *Typeid;
  const std::type_info *v7;
  std::type_info *v8;
  __int128 *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  if (sub_2263B1D2C(a1))
  {
    v4 = (__int128 *)sub_2263AF4A8(a1);
    sub_2263C109C(a2, v4);
    return 1;
  }
  else
  {
    Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid(a1);
    if (pxrInternal__aapl__pxrReserved__::VtValue::_CanCast(Typeid, &stru_24EDD69B8, v7))
    {
      v11 = 0;
      v12 = 0;
      v8 = sub_2263C1154(a1);
      sub_2263B0700(&v11, v8);
      v5 = v12 != 0;
      if (v12)
      {
        v9 = (__int128 *)sub_2263AF4A8((pxrInternal__aapl__pxrReserved__::VtValue *)&v11);
        sub_2263C109C(a2, v9);
      }
      sub_2263AD568((uint64_t)&v11);
    }
    else
    {
      return 0;
    }
  }
  return v5;
}

void sub_2263B6C18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  _Unwind_Resume(exception_object);
}

void sub_2263B6D18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_2263AACCC(exception_object);
}

uint64_t sub_2263B6D58(pxrInternal__aapl__pxrReserved__::VtValue *a1, uint64_t a2)
{
  __int128 *v4;
  _BOOL8 v5;
  pxrInternal__aapl__pxrReserved__::VtValue *Typeid;
  const std::type_info *v7;
  std::type_info *v8;
  __int128 *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  if (sub_2263AD3C4(a1))
  {
    v4 = (__int128 *)sub_2263AAC04(a1);
    sub_2263C1310(a2, v4);
    return 1;
  }
  else
  {
    Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid(a1);
    if (pxrInternal__aapl__pxrReserved__::VtValue::_CanCast(Typeid, &stru_24EDD68D8, v7))
    {
      v11 = 0;
      v12 = 0;
      v8 = sub_2263AAB7C(a1);
      sub_2263B0700(&v11, v8);
      v5 = v12 != 0;
      if (v12)
      {
        v9 = (__int128 *)sub_2263AAC04((pxrInternal__aapl__pxrReserved__::VtValue *)&v11);
        sub_2263C1310(a2, v9);
      }
      sub_2263AD568((uint64_t)&v11);
    }
    else
    {
      return 0;
    }
  }
  return v5;
}

void sub_2263B6E38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  _Unwind_Resume(exception_object);
}

void sub_2263B6F2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_2263AACCC(exception_object);
}

uint64_t sub_2263B6F6C(pxrInternal__aapl__pxrReserved__::VtValue *a1, uint64_t a2)
{
  __int128 *v4;
  _BOOL8 v5;
  pxrInternal__aapl__pxrReserved__::VtValue *Typeid;
  const std::type_info *v7;
  std::type_info *v8;
  __int128 *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  if (sub_2263C13C8(a1))
  {
    v4 = (__int128 *)sub_2263C1400(a1);
    sub_2263C1468(a2, v4);
    return 1;
  }
  else
  {
    Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid(a1);
    if (pxrInternal__aapl__pxrReserved__::VtValue::_CanCast(Typeid, &stru_24EDD6A88, v7))
    {
      v11 = 0;
      v12 = 0;
      v8 = sub_2263C1520(a1);
      sub_2263B0700(&v11, v8);
      v5 = v12 != 0;
      if (v12)
      {
        v9 = (__int128 *)sub_2263C1400((pxrInternal__aapl__pxrReserved__::VtValue *)&v11);
        sub_2263C1468(a2, v9);
      }
      sub_2263AD568((uint64_t)&v11);
    }
    else
    {
      return 0;
    }
  }
  return v5;
}

void sub_2263B704C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  _Unwind_Resume(exception_object);
}

void sub_2263B7190(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_2263AACCC(exception_object);
}

uint64_t sub_2263B71D0(pxrInternal__aapl__pxrReserved__::VtValue *a1, uint64_t a2)
{
  __int128 *v4;
  _BOOL8 v5;
  pxrInternal__aapl__pxrReserved__::VtValue *Typeid;
  const std::type_info *v7;
  std::type_info *v8;
  __int128 *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  if (sub_2263C1648(a1))
  {
    v4 = (__int128 *)sub_2263C1680(a1);
    sub_2263C16E8(a2, v4);
    return 1;
  }
  else
  {
    Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid(a1);
    if (pxrInternal__aapl__pxrReserved__::VtValue::_CanCast(Typeid, &stru_24EDD6FC0, v7))
    {
      v11 = 0;
      v12 = 0;
      v8 = sub_2263C17A0(a1);
      sub_2263B0700(&v11, v8);
      v5 = v12 != 0;
      if (v12)
      {
        v9 = (__int128 *)sub_2263C1680((pxrInternal__aapl__pxrReserved__::VtValue *)&v11);
        sub_2263C16E8(a2, v9);
      }
      sub_2263AD568((uint64_t)&v11);
    }
    else
    {
      return 0;
    }
  }
  return v5;
}

void sub_2263B72B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  _Unwind_Resume(exception_object);
}

void sub_2263B73CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_2263AACCC(exception_object);
}

uint64_t sub_2263B7420(pxrInternal__aapl__pxrReserved__::VtValue *a1, uint64_t a2)
{
  __int128 *v4;
  _BOOL8 v5;
  pxrInternal__aapl__pxrReserved__::VtValue *Typeid;
  const std::type_info *v7;
  std::type_info *v8;
  __int128 *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  if (sub_2263C1A58(a1))
  {
    v4 = (__int128 *)sub_2263C1A90(a1);
    sub_2263C1AF8(a2, v4);
    return 1;
  }
  else
  {
    Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid(a1);
    if (pxrInternal__aapl__pxrReserved__::VtValue::_CanCast(Typeid, &stru_24EDD6FD8, v7))
    {
      v11 = 0;
      v12 = 0;
      v8 = sub_2263C1BB0(a1);
      sub_2263B0700(&v11, v8);
      v5 = v12 != 0;
      if (v12)
      {
        v9 = (__int128 *)sub_2263C1A90((pxrInternal__aapl__pxrReserved__::VtValue *)&v11);
        sub_2263C1AF8(a2, v9);
      }
      sub_2263AD568((uint64_t)&v11);
    }
    else
    {
      return 0;
    }
  }
  return v5;
}

void sub_2263B7500(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  _Unwind_Resume(exception_object);
}

void sub_2263B75F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_2263AACCC(exception_object);
}

uint64_t sub_2263B7634(pxrInternal__aapl__pxrReserved__::VtValue *a1, uint64_t a2)
{
  __int128 *v4;
  _BOOL8 v5;
  pxrInternal__aapl__pxrReserved__::VtValue *Typeid;
  const std::type_info *v7;
  std::type_info *v8;
  __int128 *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  if (sub_2263C1D18(a1))
  {
    v4 = (__int128 *)sub_2263C1D50(a1);
    sub_2263C1DB8(a2, v4);
    return 1;
  }
  else
  {
    Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid(a1);
    if (pxrInternal__aapl__pxrReserved__::VtValue::_CanCast(Typeid, &stru_24EDD6FF0, v7))
    {
      v11 = 0;
      v12 = 0;
      v8 = sub_2263C1E70(a1);
      sub_2263B0700(&v11, v8);
      v5 = v12 != 0;
      if (v12)
      {
        v9 = (__int128 *)sub_2263C1D50((pxrInternal__aapl__pxrReserved__::VtValue *)&v11);
        sub_2263C1DB8(a2, v9);
      }
      sub_2263AD568((uint64_t)&v11);
    }
    else
    {
      return 0;
    }
  }
  return v5;
}

void sub_2263B7714(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  _Unwind_Resume(exception_object);
}

void sub_2263B781C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_2263AACCC(exception_object);
}

uint64_t sub_2263B785C(pxrInternal__aapl__pxrReserved__::VtValue *a1, uint64_t a2)
{
  __int128 *v4;
  _BOOL8 v5;
  pxrInternal__aapl__pxrReserved__::VtValue *Typeid;
  const std::type_info *v7;
  std::type_info *v8;
  __int128 *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  if (sub_2263C2108(a1))
  {
    v4 = (__int128 *)sub_2263C2140(a1);
    sub_2263C21A8(a2, v4);
    return 1;
  }
  else
  {
    Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid(a1);
    if (pxrInternal__aapl__pxrReserved__::VtValue::_CanCast(Typeid, &stru_24EDD7008, v7))
    {
      v11 = 0;
      v12 = 0;
      v8 = sub_2263C2260(a1);
      sub_2263B0700(&v11, v8);
      v5 = v12 != 0;
      if (v12)
      {
        v9 = (__int128 *)sub_2263C2140((pxrInternal__aapl__pxrReserved__::VtValue *)&v11);
        sub_2263C21A8(a2, v9);
      }
      sub_2263AD568((uint64_t)&v11);
    }
    else
    {
      return 0;
    }
  }
  return v5;
}

void sub_2263B793C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  _Unwind_Resume(exception_object);
}

void sub_2263B7A48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_2263AACCC(exception_object);
}

uint64_t sub_2263B7A88(pxrInternal__aapl__pxrReserved__::VtValue *a1, uint64_t a2)
{
  __int128 *v4;
  _BOOL8 v5;
  pxrInternal__aapl__pxrReserved__::VtValue *Typeid;
  const std::type_info *v7;
  std::type_info *v8;
  __int128 *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  if (sub_2263C2514(a1))
  {
    v4 = (__int128 *)sub_2263C254C(a1);
    sub_2263C25B4(a2, v4);
    return 1;
  }
  else
  {
    Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid(a1);
    if (pxrInternal__aapl__pxrReserved__::VtValue::_CanCast(Typeid, &stru_24EDD7020, v7))
    {
      v11 = 0;
      v12 = 0;
      v8 = sub_2263C266C(a1);
      sub_2263B0700(&v11, v8);
      v5 = v12 != 0;
      if (v12)
      {
        v9 = (__int128 *)sub_2263C254C((pxrInternal__aapl__pxrReserved__::VtValue *)&v11);
        sub_2263C25B4(a2, v9);
      }
      sub_2263AD568((uint64_t)&v11);
    }
    else
    {
      return 0;
    }
  }
  return v5;
}

void sub_2263B7B68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  _Unwind_Resume(exception_object);
}

void sub_2263B7CB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_2263AACCC(exception_object);
}

void sub_2263B7F0C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2263B814C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  void *v24;

  sub_2263AD568((uint64_t)&a24);
  sub_2263B58AC((uint64_t)&a15);
  if (a14 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_2263B8270(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2263AD568((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2263B82F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2263AD568((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2263B8378(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2263AD568((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2263B83FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2263AD568((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2263B84E4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2263B8604(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  void *v15;
  uint64_t v16;

  sub_2263AD568(v16 - 40);
  sub_2263B58AC((uint64_t)&a15);
  if (a14 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_2263B8738(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  void *v16;
  uint64_t v17;

  sub_2263AD568(v17 - 40);
  sub_2263B58AC((uint64_t)&a16);

  _Unwind_Resume(a1);
}

void sub_2263B87F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2263AD568((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2263B887C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2263AD568((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2263B894C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_2263AD568((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2263B8A14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_2263AD568((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2263B8A98(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2263AD568((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2263B8B60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_2263AD568((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2263B8C3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_2263AD568((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2263B8D10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_2263AD568((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2263B8E34(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2263AD568(v1 - 40);
  _Unwind_Resume(a1);
}

void sub_2263B8EF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_2263AD568((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2263B8FD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_2263AACCC(exception_object);
}

void sub_2263B90D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_2263AACCC(exception_object);
}

uint64_t sub_2263B911C(uint64_t a1, unint64_t a2)
{
  int v5;
  int *v6;

  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  v5 = 0;
  sub_2263AD1C8((_QWORD *)a1);
  v6 = &v5;
  sub_2263C6978((unint64_t *)a1, a2, &v6);
  return a1;
}

void sub_2263B9174(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2263AC71C(v1);
  _Unwind_Resume(a1);
}

void sub_2263B9250(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_2263AACCC(exception_object);
}

uint64_t sub_2263B9294(uint64_t a1, unint64_t a2)
{
  char v5;
  char *v6;

  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  sub_2263AD1C8((_QWORD *)a1);
  v6 = &v5;
  sub_2263C7034((unint64_t *)a1, a2, (_OWORD **)&v6);
  return a1;
}

void sub_2263B92E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2263AC71C(v1);
  _Unwind_Resume(a1);
}

void sub_2263B9800(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a2)
    sub_2263AACCC(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2263B9998(uint64_t a1, unint64_t a2)
{
  void *__p[2];
  uint64_t v6;
  void **v7;

  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  __p[0] = 0;
  __p[1] = 0;
  v6 = 0;
  sub_2263C775C((_QWORD *)a1);
  v7 = __p;
  sub_2263C77E0((unint64_t *)a1, a2, (__int128 **)&v7);
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
  return a1;
}

void sub_2263B9A04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  _QWORD *v14;

  if (a14 < 0)
    operator delete(__p);
  sub_2263C7974(v14);
  _Unwind_Resume(a1);
}

uint64_t sub_2263B9A2C(uint64_t a1, unint64_t a2)
{
  unsigned int *v4;
  unsigned int v5;
  uint64_t v7;
  uint64_t *v8;

  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  v7 = 0;
  sub_2263C8278((_QWORD *)a1);
  v8 = &v7;
  sub_2263C8300((uint64_t *)a1, a2, &v8);
  if ((v7 & 7) != 0)
  {
    v4 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  return a1;
}

void sub_2263B9AA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  unsigned int *v11;
  unsigned int v12;

  if ((a9 & 7) != 0)
  {
    v11 = (unsigned int *)(a9 & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stlxr(v12 - 2, v11));
  }
  sub_2263C8530(v9);
  _Unwind_Resume(a1);
}

uint64_t sub_2263B9ADC(uint64_t a1, unint64_t a2)
{
  uint64_t v5;
  uint64_t *v6;

  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  v5 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  sub_2263C8BF0((_QWORD *)a1);
  v6 = &v5;
  sub_2263C8C74((unint64_t *)a1, a2, &v6);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_2263BDE64((uint64_t)&v5);
  return a1;
}

void sub_2263B9B70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;

  sub_2263B5610((uint64_t)&a9);
  sub_2263C8DF4(v9);
  _Unwind_Resume(a1);
}

uint64_t sub_2263B9B90(uint64_t a1, unint64_t a2)
{
  void *v5[2];
  char v6;
  void *__p;
  char v8;
  void **v9;

  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath((pxrInternal__aapl__pxrReserved__::SdfAssetPath *)v5);
  sub_2263C9568((_QWORD *)a1);
  v9 = v5;
  sub_2263C9600((unint64_t *)a1, a2, (__int128 **)&v9);
  if (v8 < 0)
    operator delete(__p);
  if (v6 < 0)
    operator delete(v5[0]);
  return a1;
}

void sub_2263B9C10(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_2263C97A0(v1);
  _Unwind_Resume(a1);
}

void sub_2263B9DB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (a2)
    sub_2263AACCC(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_2263B9FE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  if (a2)
    sub_2263AACCC(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_2263BA130(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_2263AACCC(exception_object);
}

uint64_t sub_2263BA174(uint64_t a1, unint64_t a2)
{
  int v5;
  int *v6;

  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  v5 = 0;
  sub_2263AD1C8((_QWORD *)a1);
  v6 = &v5;
  sub_2263CA150((unint64_t *)a1, a2, &v6);
  return a1;
}

void sub_2263BA1CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2263AC71C(v1);
  _Unwind_Resume(a1);
}

void sub_2263BA2C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_2263AACCC(exception_object);
}

uint64_t sub_2263BA308(uint64_t a1, unint64_t a2)
{
  uint64_t v5;
  uint64_t *v6;

  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  v5 = 0;
  sub_2263AD1C8((_QWORD *)a1);
  v6 = &v5;
  sub_2263CA93C((unint64_t *)a1, a2, &v6);
  return a1;
}

void sub_2263BA360(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2263AC71C(v1);
  _Unwind_Resume(a1);
}

void sub_2263BA468(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_2263AACCC(exception_object);
}

void sub_2263BA58C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_2263AACCC(exception_object);
}

void sub_2263BA698(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_2263AACCC(exception_object);
}

uint64_t sub_2263BA6DC(uint64_t a1, unint64_t a2)
{
  uint64_t v5;
  uint64_t *v6;

  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  v5 = 0;
  sub_2263AD1C8((_QWORD *)a1);
  v6 = &v5;
  sub_2263CB018((unint64_t *)a1, a2, &v6);
  return a1;
}

void sub_2263BA734(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2263AC71C(v1);
  _Unwind_Resume(a1);
}

void sub_2263BA828(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_2263AACCC(exception_object);
}

uint64_t sub_2263BA870(uint64_t a1, unint64_t a2)
{
  _QWORD v5[2];
  _OWORD *v6;

  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  v5[0] = 0;
  v5[1] = 0;
  sub_2263AD1C8((_QWORD *)a1);
  v6 = v5;
  sub_2263CB77C((unint64_t *)a1, a2, &v6);
  return a1;
}

void sub_2263BA8C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2263AC71C(v1);
  _Unwind_Resume(a1);
}

void sub_2263BA9D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_2263AACCC(exception_object);
}

uint64_t sub_2263BAA18(uint64_t a1, unint64_t a2)
{
  _QWORD v5[3];
  __int128 *v6;

  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  memset(v5, 0, sizeof(v5));
  sub_2263AD1C8((_QWORD *)a1);
  v6 = (__int128 *)v5;
  sub_2263CBE58((unint64_t *)a1, a2, &v6);
  return a1;
}

void sub_2263BAA74(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2263AC71C(v1);
  _Unwind_Resume(a1);
}

void sub_2263BAB78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_2263AACCC(exception_object);
}

uint64_t sub_2263BABC0(uint64_t a1, unint64_t a2)
{
  _OWORD v5[2];
  _OWORD *v6;

  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  memset(v5, 0, sizeof(v5));
  sub_2263AD1C8((_QWORD *)a1);
  v6 = v5;
  sub_2263CC5C8((unint64_t *)a1, a2, &v6);
  return a1;
}

void sub_2263BAC18(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2263AC71C(v1);
  _Unwind_Resume(a1);
}

void sub_2263BAD64(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_2263AACCC(exception_object);
}

uint64_t sub_2263BADAC(uint64_t a1, unint64_t a2)
{
  _OWORD v5[8];
  __int128 *v6;

  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  memset(v5, 0, sizeof(v5));
  sub_2263AD1C8((_QWORD *)a1);
  v6 = v5;
  sub_2263CCCF8((unint64_t *)a1, a2, &v6);
  return a1;
}

void sub_2263BAE10(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2263AC71C(v1);
  _Unwind_Resume(a1);
}

void sub_2263BAF68(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_2263BB06C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_2263BB16C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_2263BB25C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2263BB340(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2263BB424(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2263BB558(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_2263BB6C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  void *v15;
  void *v16;
  void *v17;

  sub_2263B58AC((uint64_t)&a15);
  if (a14 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_2263BB85C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  void *v23;

  sub_2263B58AC((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_2263BB974(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2263BBA58(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2263BBB74(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2263BBC90(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2263BBD7C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2263BBE90(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2263BBFBC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2263BC0E4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2263BC264(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2263BC380(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2263BC4AC(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    sub_2263AACCC(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_2263BC604(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    sub_2263AACCC(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_2263BC774(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_2263AACCC(exception_object);
}

void sub_2263BC934(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_2263AACCC(a1);
  _Unwind_Resume(a1);
}

void sub_2263BCB58(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_2263AACCC(a1);
  _Unwind_Resume(a1);
}

void sub_2263BCDDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  if (a2)
    sub_2263AACCC(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_2263BCF74(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    sub_2263AACCC(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_2263BD0E4(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_2263AACCC(exception_object);
}

void sub_2263BD278(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_2263AACCC(exception_object);
}

void sub_2263BD3EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_2263AACCC(exception_object);
}

void sub_2263BD548(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    sub_2263AACCC(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_2263BD6B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_2263AACCC(exception_object);
}

void sub_2263BD84C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_2263AACCC(exception_object);
}

void sub_2263BD9DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_2263AACCC(exception_object);
}

void sub_2263BDBEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_2263AACCC(exception_object);
}

void sub_2263BDCF4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  va_list va;

  va_start(va, a2);
  sub_2263AD568((uint64_t)va);

  _Unwind_Resume(a1);
}

uint64_t sub_2263BDD20(pxrInternal__aapl__pxrReserved__::VtValue *a1, const pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;

  v2 = *((_QWORD *)a1 + 1);
  v3 = *((_QWORD *)a2 + 1);
  if (v2)
    v4 = v3 == 0;
  else
    v4 = 1;
  if (v4)
    return (v2 == 0) == (v3 == 0);
  if (v2 == v3)
    return (*(uint64_t (**)(void))((v2 & 0xFFFFFFFFFFFFFFF8) + 64))();
  return pxrInternal__aapl__pxrReserved__::VtValue::_EqualityImpl(a1, a2);
}

_DWORD *sub_2263BDDD8(_DWORD *a1, _DWORD *a2)
{
  unsigned int *v3;
  unsigned int v4;

  *a1 = *a2;
  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL())
  {
    v3 = (unsigned int *)(pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetPtr()
                        + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return a1;
}

_DWORD *sub_2263BDE28(_DWORD *a1, _DWORD *a2)
{
  *a1 = *a2;
  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL())
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetPtr();
  return a1;
}

uint64_t sub_2263BDE64(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_PathNode *Ptr;
  unsigned int *v3;
  unsigned int v4;

  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL())
  {
    Ptr = (pxrInternal__aapl__pxrReserved__::Sdf_PathNode *)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetPtr();
    v3 = (unsigned int *)((char *)Ptr + 8);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 - 1, v3));
    if ((v4 & 0x7FFFFFFF) == 1)
      sub_2263BDEBC(Ptr);
  }
  return a1;
}

void sub_2263BDEBC(pxrInternal__aapl__pxrReserved__::Sdf_PathNode *a1)
{
  uint64_t *v1;
  void *v2;

  switch(*((_BYTE *)a1 + 14))
  {
    case 0:
      v1 = sub_2263BDF40(a1);
      goto LABEL_5;
    case 1:
      v1 = (uint64_t *)MEMORY[0x2276973F0]();
      goto LABEL_5;
    case 2:
      v1 = (uint64_t *)MEMORY[0x2276975C4]();
LABEL_5:
      pxrInternal__aapl__pxrReserved__::Sdf_PrimPartPathNode::operator delete(v1);
      return;
    case 3:
      v2 = (void *)MEMORY[0x227697564]();
      goto LABEL_12;
    case 4:
      v2 = (void *)MEMORY[0x2276974A4]();
      goto LABEL_12;
    case 5:
      v2 = (void *)MEMORY[0x227697498]();
      goto LABEL_12;
    case 6:
      v2 = (void *)MEMORY[0x2276975F4]();
      goto LABEL_12;
    case 7:
      v2 = (void *)MEMORY[0x2276974F8]();
      goto LABEL_12;
    case 8:
      v2 = (void *)MEMORY[0x227697528]();
LABEL_12:
      pxrInternal__aapl__pxrReserved__::Sdf_PropPartPathNode::operator delete(v2);
      break;
    default:
      return;
  }
}

uint64_t *sub_2263BDF40(pxrInternal__aapl__pxrReserved__::Sdf_PathNode *this)
{
  if ((*((_DWORD *)this + 2) & 0x80000000) != 0)
    pxrInternal__aapl__pxrReserved__::Sdf_PathNode::_RemovePathTokenFromTable(this);
  return sub_2263BDF74((uint64_t *)this);
}

uint64_t *sub_2263BDF74(uint64_t *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *a1;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 8);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 - 1, v3));
    if ((v4 & 0x7FFFFFFF) == 1)
      sub_2263BDEBC();
  }
  return a1;
}

pxrInternal__aapl__pxrReserved__::VtValue *sub_2263BDFC4(pxrInternal__aapl__pxrReserved__::VtValue *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t Typeid;
  const pxrInternal__aapl__pxrReserved__::VtValue *v5;
  _QWORD v7[3];

  v7[2] = *MEMORY[0x24BDAC8D0];
  Typeid = pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid(a1);
  if (strcmp((const char *)(*(_QWORD *)(Typeid + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*((_QWORD *)a2 + 1) & 0x7FFFFFFFFFFFFFFFLL)))
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast(a2, (const std::type_info *)a1, v5);
    sub_2263AD3FC(a1, v7);
    sub_2263AD568((uint64_t)v7);
  }
  return a1;
}

uint64_t sub_2263BE05C(uint64_t a1, int *a2)
{
  int v4;

  v4 = *a2;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap();
  sub_2263BDE64((uint64_t)&v4);
  return a1;
}

uint64_t sub_2263BE0B0(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return a1;
}

_DWORD *sub_2263BE108(_DWORD *a1, _DWORD *a2)
{
  *a1 = *a2;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=();
  return a1;
}

_DWORD *sub_2263BE140(_DWORD *a1, _DWORD *a2)
{
  *a1 = *a2;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=();
  return a1;
}

_QWORD *sub_2263BE178(_QWORD *result, _DWORD *a2, _DWORD *a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    sub_2263BE1FC(result, a4);
    result = sub_2263BE23C((uint64_t)(v6 + 2), a2, a3, (_DWORD *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_2263BE1DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  sub_2263BE380(&a9);
  _Unwind_Resume(a1);
}

char *sub_2263BE1FC(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 61)
    sub_2263AACDC();
  result = (char *)sub_2263ABFD4((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

_DWORD *sub_2263BE23C(uint64_t a1, _DWORD *a2, _DWORD *a3, _DWORD *a4)
{
  _DWORD *v4;
  _DWORD *v6;
  _QWORD v8[3];
  uint64_t v9;
  _DWORD *v10;
  _DWORD *v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      sub_2263BDDD8(v4, v6);
      sub_2263BDE28(v4 + 1, v6 + 1);
      v6 += 2;
      v4 = v11 + 2;
      v11 += 2;
    }
    while (v6 != a3);
  }
  LOBYTE(v9) = 1;
  sub_2263BE2D0((uint64_t)v8);
  return v4;
}

uint64_t sub_2263BE2D0(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_2263BE304((uint64_t *)a1);
  return a1;
}

uint64_t *sub_2263BE304(uint64_t *result)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (uint64_t *)result[1];
  v1 = (uint64_t *)result[2];
  v3 = *v1;
  v4 = *v2;
  if (*v1 != *v2)
  {
    v5 = *result;
    do
    {
      v3 -= 8;
      result = (uint64_t *)sub_2263BE354(v5, v3);
    }
    while (v3 != v4);
  }
  return result;
}

uint64_t sub_2263BE354(uint64_t a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return sub_2263BDE64(a2);
}

void sub_2263BE380(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 8;
        sub_2263BE354((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_2263BE404(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (!result)
    __assert_rtn("operator->", "intrusive_ptr.hpp", 199, "px != 0");
  return result;
}

uint64_t sub_2263BE444(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 13)
    return 1;
  if ((v1 & 4) != 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_24EDD6E68);
  else
    return 0;
}

uint64_t sub_2263BE47C(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;
  uint64_t result;

  if ((sub_2263BE444(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  v2 = *((_QWORD *)a1 + 1);
  result = (uint64_t)a1;
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  return result;
}

_QWORD *sub_2263BE4E4(_QWORD *result, _QWORD *a2)
{
  unsigned int *v2;
  unsigned int v3;
  unsigned int *v4;
  unsigned int v5;

  if (a2 != result)
  {
    if ((*a2 & 7) != 0)
    {
      v2 = (unsigned int *)(*a2 & 0xFFFFFFFFFFFFFFF8);
      do
        v3 = __ldxr(v2);
      while (__stxr(v3 + 2, v2));
      if ((v3 & 1) == 0)
        *a2 &= 0xFFFFFFFFFFFFFFF8;
    }
    if ((*result & 7) != 0)
    {
      v4 = (unsigned int *)(*result & 0xFFFFFFFFFFFFFFF8);
      do
        v5 = __ldxr(v4);
      while (__stlxr(v5 - 2, v4));
    }
    *result = *a2;
  }
  return result;
}

std::type_info *sub_2263BE548(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  std::type_info *v1;
  const pxrInternal__aapl__pxrReserved__::VtValue *v2;
  _QWORD v4[3];

  v1 = (std::type_info *)a1;
  v4[2] = *MEMORY[0x24BDAC8D0];
  if ((sub_2263BE444(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast((pxrInternal__aapl__pxrReserved__::VtValue *)&stru_24EDD6E68, v1, v2);
    v1 = (std::type_info *)sub_2263AD3FC(v1, v4);
    sub_2263AD568((uint64_t)v4);
  }
  return v1;
}

_QWORD *sub_2263BE5D0@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;

  result = (_QWORD *)operator new();
  *result = 0;
  *a1 = result;
  a1[1] = sub_2263BE620;
  a1[2] = &stru_24EDD6E68;
  return result;
}

_QWORD *sub_2263BE620(_QWORD *result)
{
  unsigned int *v1;
  unsigned int v2;

  if (result)
  {
    if ((*result & 7) != 0)
    {
      v1 = (unsigned int *)(*result & 0xFFFFFFFFFFFFFFF8);
      do
        v2 = __ldxr(v1);
      while (__stlxr(v2 - 2, v1));
    }
    JUMPOUT(0x2276980E0);
  }
  return result;
}

uint64_t sub_2263BE65C(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (!strcmp((const char *)(*(_QWORD *)(*(_QWORD *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12SdfAssetPathE" & 0x7FFFFFFFFFFFFFFFLL)))return 1;
  if ((v1 & 4) == 0)
    return 0;
  return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_24EDD6E78);
}

uint64_t sub_2263BE6D0@<X0>(uint64_t a1@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfAssetPath *v2;
  pxrInternal__aapl__pxrReserved__::SdfAssetPath *v4[2];

  sub_2263BE720(v4);
  v2 = v4[1];
  *(pxrInternal__aapl__pxrReserved__::SdfAssetPath **)a1 = v4[0];
  *(_QWORD *)(a1 + 8) = v2;
  v4[0] = 0;
  *(_QWORD *)(a1 + 16) = &stru_24EDD6E78;
  return ((uint64_t (*)(_QWORD))v2)(0);
}

uint64_t sub_2263BE720@<X0>(pxrInternal__aapl__pxrReserved__::SdfAssetPath **a1@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfAssetPath *v2;
  uint64_t result;

  v2 = (pxrInternal__aapl__pxrReserved__::SdfAssetPath *)operator new();
  result = pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath(v2);
  *a1 = v2;
  a1[1] = (pxrInternal__aapl__pxrReserved__::SdfAssetPath *)sub_2263BE78C;
  return result;
}

void sub_2263BE768(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2276980E0](v1, 0x1012C403467C318);
  _Unwind_Resume(a1);
}

uint64_t sub_2263BE78C(uint64_t result)
{
  uint64_t v1;

  if (result)
  {
    v1 = result;
    if (*(char *)(result + 47) < 0)
      operator delete(*(void **)(result + 24));
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    JUMPOUT(0x2276980E0);
  }
  return result;
}

uint64_t sub_2263BE7E4(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (!result)
    __assert_rtn("operator->", "intrusive_ptr.hpp", 199, "px != 0");
  return result;
}

uint64_t sub_2263BE824(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (!strcmp((const char *)(*(_QWORD *)(*(_QWORD *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__16vectorIN32pxrInternal__aapl__pxrReserved__7SdfPathENS_9allocatorIS2_EEEE" & 0x7FFFFFFFFFFFFFFFLL)))return 1;
  if ((v1 & 4) == 0)
    return 0;
  return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_24EDD6E88);
}

_QWORD *sub_2263BE894@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;

  result = (_QWORD *)operator new();
  result[1] = 0;
  result[2] = 0;
  *result = 0;
  *a1 = result;
  a1[1] = sub_2263BE8E8;
  a1[2] = &stru_24EDD6E88;
  return result;
}

void **sub_2263BE8E8(void **result)
{
  void **v1;
  void **v2;

  if (result)
  {
    v1 = result;
    v2 = result;
    sub_2263BE380(&v2);
    return (void **)MEMORY[0x2276980E0](v1, 0x20C40960023A9);
  }
  return result;
}

uint64_t sub_2263BE934(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (!result)
    __assert_rtn("operator->", "intrusive_ptr.hpp", 199, "px != 0");
  return result;
}

uint64_t sub_2263BE974(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (!strcmp((const char *)(*(_QWORD *)(*(_QWORD *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__11SdfTimeCodeE" & 0x7FFFFFFFFFFFFFFFLL)))return 1;
  if ((v1 & 4) == 0)
    return 0;
  return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_24EDD6E98);
}

uint64_t sub_2263BE9E4(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;
  uint64_t result;

  if ((sub_2263BE974(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  v2 = *((_QWORD *)a1 + 1);
  result = (uint64_t)a1;
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  return result;
}

std::type_info *sub_2263BEA4C(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  std::type_info *v1;
  const pxrInternal__aapl__pxrReserved__::VtValue *v2;
  _QWORD v4[3];

  v1 = (std::type_info *)a1;
  v4[2] = *MEMORY[0x24BDAC8D0];
  if ((sub_2263BE974(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast((pxrInternal__aapl__pxrReserved__::VtValue *)&stru_24EDD6E98, v1, v2);
    v1 = (std::type_info *)sub_2263AD3FC(v1, v4);
    sub_2263AD568((uint64_t)v4);
  }
  return v1;
}

_QWORD *sub_2263BEAD4@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;

  result = (_QWORD *)operator new();
  *result = 0;
  *a1 = result;
  a1[1] = sub_2263BEB24;
  a1[2] = &stru_24EDD6E98;
  return result;
}

uint64_t sub_2263BEB24(uint64_t result)
{
  if (result)
    JUMPOUT(0x2276980E0);
  return result;
}

uint64_t sub_2263BEB40(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (!*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16))
    return 1;
  if ((v1 & 4) == 0)
    return 0;
  return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, MEMORY[0x24BEDB770]);
}

uint64_t sub_2263BEB74(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;
  uint64_t result;

  if ((sub_2263BEB40(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  v2 = *((_QWORD *)a1 + 1);
  result = (uint64_t)a1;
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  return result;
}

std::type_info *sub_2263BEBDC(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  std::type_info *v1;
  const pxrInternal__aapl__pxrReserved__::VtValue *v2;
  _QWORD v4[3];

  v1 = (std::type_info *)a1;
  v4[2] = *MEMORY[0x24BDAC8D0];
  if ((sub_2263BEB40(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast(MEMORY[0x24BEDB770], v1, v2);
    v1 = (std::type_info *)sub_2263AD3FC(v1, v4);
    sub_2263AD568((uint64_t)v4);
  }
  return v1;
}

_BYTE *sub_2263BEC64@<X0>(_QWORD *a1@<X8>)
{
  _BYTE *result;

  result = (_BYTE *)operator new();
  *result = 0;
  *a1 = result;
  a1[1] = sub_2263BECB4;
  a1[2] = MEMORY[0x24BEDB770];
  return result;
}

uint64_t sub_2263BECB4(uint64_t result)
{
  if (result)
    JUMPOUT(0x2276980E0);
  return result;
}

uint64_t sub_2263BECD0(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 5)
    return 1;
  if ((v1 & 4) != 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, MEMORY[0x24BEDB798]);
  else
    return 0;
}

uint64_t sub_2263BED08(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;
  uint64_t result;

  if ((sub_2263BECD0(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  v2 = *((_QWORD *)a1 + 1);
  result = (uint64_t)a1;
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  return result;
}

std::type_info *sub_2263BED70(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  std::type_info *v1;
  const pxrInternal__aapl__pxrReserved__::VtValue *v2;
  _QWORD v4[3];

  v1 = (std::type_info *)a1;
  v4[2] = *MEMORY[0x24BDAC8D0];
  if ((sub_2263BECD0(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast(MEMORY[0x24BEDB798], v1, v2);
    v1 = (std::type_info *)sub_2263AD3FC(v1, v4);
    sub_2263AD568((uint64_t)v4);
  }
  return v1;
}

_DWORD *sub_2263BEDF8@<X0>(_QWORD *a1@<X8>)
{
  _DWORD *result;

  result = (_DWORD *)operator new();
  *result = 0;
  *a1 = result;
  a1[1] = sub_2263BEE48;
  a1[2] = MEMORY[0x24BEDB798];
  return result;
}

uint64_t sub_2263BEE48(uint64_t result)
{
  if (result)
    JUMPOUT(0x2276980E0);
  return result;
}

uint64_t sub_2263BEE64(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 6)
    return 1;
  if ((v1 & 4) != 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, MEMORY[0x24BEDB7A0]);
  else
    return 0;
}

uint64_t sub_2263BEE9C(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;
  uint64_t result;

  if ((sub_2263BEE64(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  v2 = *((_QWORD *)a1 + 1);
  result = (uint64_t)a1;
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  return result;
}

std::type_info *sub_2263BEF04(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  std::type_info *v1;
  const pxrInternal__aapl__pxrReserved__::VtValue *v2;
  _QWORD v4[3];

  v1 = (std::type_info *)a1;
  v4[2] = *MEMORY[0x24BDAC8D0];
  if ((sub_2263BEE64(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast(MEMORY[0x24BEDB7A0], v1, v2);
    v1 = (std::type_info *)sub_2263AD3FC(v1, v4);
    sub_2263AD568((uint64_t)v4);
  }
  return v1;
}

_DWORD *sub_2263BEF8C@<X0>(_QWORD *a1@<X8>)
{
  _DWORD *result;

  result = (_DWORD *)operator new();
  *result = 0;
  *a1 = result;
  a1[1] = sub_2263BEFDC;
  a1[2] = MEMORY[0x24BEDB7A0];
  return result;
}

uint64_t sub_2263BEFDC(uint64_t result)
{
  if (result)
    JUMPOUT(0x2276980E0);
  return result;
}

uint64_t sub_2263BEFF8(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 10)
    return 1;
  if ((v1 & 4) != 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, MEMORY[0x24BEDB788]);
  else
    return 0;
}

uint64_t sub_2263BF030(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;
  uint64_t result;

  if ((sub_2263BEFF8(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  v2 = *((_QWORD *)a1 + 1);
  result = (uint64_t)a1;
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  return result;
}

std::type_info *sub_2263BF098(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  std::type_info *v1;
  const pxrInternal__aapl__pxrReserved__::VtValue *v2;
  _QWORD v4[3];

  v1 = (std::type_info *)a1;
  v4[2] = *MEMORY[0x24BDAC8D0];
  if ((sub_2263BEFF8(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast(MEMORY[0x24BEDB788], v1, v2);
    v1 = (std::type_info *)sub_2263AD3FC(v1, v4);
    sub_2263AD568((uint64_t)v4);
  }
  return v1;
}

_DWORD *sub_2263BF120@<X0>(_QWORD *a1@<X8>)
{
  _DWORD *result;

  result = (_DWORD *)operator new();
  *result = 0;
  *a1 = result;
  a1[1] = sub_2263BF170;
  a1[2] = MEMORY[0x24BEDB788];
  return result;
}

uint64_t sub_2263BF170(uint64_t result)
{
  if (result)
    JUMPOUT(0x2276980E0);
  return result;
}

uint64_t sub_2263BF18C(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 69)
    return 1;
  if ((v1 & 4) != 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_24EDD6EA8);
  else
    return 0;
}

uint64_t sub_2263BF1C4(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;
  uint64_t result;

  if ((sub_2263BF18C(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  v2 = *((_QWORD *)a1 + 1);
  result = (uint64_t)a1;
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  return result;
}

std::type_info *sub_2263BF22C(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  std::type_info *v1;
  const pxrInternal__aapl__pxrReserved__::VtValue *v2;
  _QWORD v4[3];

  v1 = (std::type_info *)a1;
  v4[2] = *MEMORY[0x24BDAC8D0];
  if ((sub_2263BF18C(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast((pxrInternal__aapl__pxrReserved__::VtValue *)&stru_24EDD6EA8, v1, v2);
    v1 = (std::type_info *)sub_2263AD3FC(v1, v4);
    sub_2263AD568((uint64_t)v4);
  }
  return v1;
}

uint64_t sub_2263BF2B4(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 68)
    return 1;
  if ((v1 & 4) != 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_24EDD69A8);
  else
    return 0;
}

uint64_t sub_2263BF2EC(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;

  if ((sub_2263BF2B4(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  v2 = *((_QWORD *)a1 + 1);
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    return sub_2263BF3DC((uint64_t *)a1);
}

std::type_info *sub_2263BF354(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  std::type_info *v1;
  const pxrInternal__aapl__pxrReserved__::VtValue *v2;
  _QWORD v4[3];

  v1 = (std::type_info *)a1;
  v4[2] = *MEMORY[0x24BDAC8D0];
  if ((sub_2263BF2B4(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast((pxrInternal__aapl__pxrReserved__::VtValue *)&stru_24EDD69A8, v1, v2);
    v1 = (std::type_info *)sub_2263AD3FC(v1, v4);
    sub_2263AD568((uint64_t)v4);
  }
  return v1;
}

uint64_t sub_2263BF3DC(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (!result)
    __assert_rtn("operator->", "intrusive_ptr.hpp", 199, "px != 0");
  return result;
}

uint64_t sub_2263BF41C(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 67)
    return 1;
  if ((v1 & 4) != 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_24EDD6AA0);
  else
    return 0;
}

uint64_t sub_2263BF454(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;

  if ((sub_2263BF41C(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  v2 = *((_QWORD *)a1 + 1);
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    return sub_2263BF544((uint64_t *)a1);
}

std::type_info *sub_2263BF4BC(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  std::type_info *v1;
  const pxrInternal__aapl__pxrReserved__::VtValue *v2;
  _QWORD v4[3];

  v1 = (std::type_info *)a1;
  v4[2] = *MEMORY[0x24BDAC8D0];
  if ((sub_2263BF41C(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast((pxrInternal__aapl__pxrReserved__::VtValue *)&stru_24EDD6AA0, v1, v2);
    v1 = (std::type_info *)sub_2263AD3FC(v1, v4);
    sub_2263AD568((uint64_t)v4);
  }
  return v1;
}

uint64_t sub_2263BF544(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (!result)
    __assert_rtn("operator->", "intrusive_ptr.hpp", 199, "px != 0");
  return result;
}

uint64_t sub_2263BF584(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 76)
    return 1;
  if ((v1 & 4) != 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_24EDD6EB8);
  else
    return 0;
}

uint64_t sub_2263BF5BC(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;

  if ((sub_2263BF584(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  v2 = *((_QWORD *)a1 + 1);
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    return sub_2263BF6AC((uint64_t *)a1);
}

std::type_info *sub_2263BF624(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  std::type_info *v1;
  const pxrInternal__aapl__pxrReserved__::VtValue *v2;
  _QWORD v4[3];

  v1 = (std::type_info *)a1;
  v4[2] = *MEMORY[0x24BDAC8D0];
  if ((sub_2263BF584(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast((pxrInternal__aapl__pxrReserved__::VtValue *)&stru_24EDD6EB8, v1, v2);
    v1 = (std::type_info *)sub_2263AD3FC(v1, v4);
    sub_2263AD568((uint64_t)v4);
  }
  return v1;
}

uint64_t sub_2263BF6AC(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (!result)
    __assert_rtn("operator->", "intrusive_ptr.hpp", 199, "px != 0");
  return result;
}

uint64_t sub_2263BF6EC(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 9)
    return 1;
  if ((v1 & 4) != 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, MEMORY[0x24BEDB780]);
  else
    return 0;
}

uint64_t sub_2263BF724(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;
  uint64_t result;

  if ((sub_2263BF6EC(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  v2 = *((_QWORD *)a1 + 1);
  result = (uint64_t)a1;
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  return result;
}

std::type_info *sub_2263BF78C(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  std::type_info *v1;
  const pxrInternal__aapl__pxrReserved__::VtValue *v2;
  _QWORD v4[3];

  v1 = (std::type_info *)a1;
  v4[2] = *MEMORY[0x24BDAC8D0];
  if ((sub_2263BF6EC(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast(MEMORY[0x24BEDB780], v1, v2);
    v1 = (std::type_info *)sub_2263AD3FC(v1, v4);
    sub_2263AD568((uint64_t)v4);
  }
  return v1;
}

_QWORD *sub_2263BF814@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;

  result = (_QWORD *)operator new();
  *result = 0;
  *a1 = result;
  a1[1] = sub_2263BF864;
  a1[2] = MEMORY[0x24BEDB780];
  return result;
}

uint64_t sub_2263BF864(uint64_t result)
{
  if (result)
    JUMPOUT(0x2276980E0);
  return result;
}

uint64_t sub_2263BF880(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 72)
    return 1;
  if ((v1 & 4) != 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_24EDD6EC8);
  else
    return 0;
}

uint64_t sub_2263BF8B8(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;

  if ((sub_2263BF880(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  v2 = *((_QWORD *)a1 + 1);
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    return sub_2263BF9A8((uint64_t *)a1);
}

std::type_info *sub_2263BF920(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  std::type_info *v1;
  const pxrInternal__aapl__pxrReserved__::VtValue *v2;
  _QWORD v4[3];

  v1 = (std::type_info *)a1;
  v4[2] = *MEMORY[0x24BDAC8D0];
  if ((sub_2263BF880(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast((pxrInternal__aapl__pxrReserved__::VtValue *)&stru_24EDD6EC8, v1, v2);
    v1 = (std::type_info *)sub_2263AD3FC(v1, v4);
    sub_2263AD568((uint64_t)v4);
  }
  return v1;
}

uint64_t sub_2263BF9A8(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (!result)
    __assert_rtn("operator->", "intrusive_ptr.hpp", 199, "px != 0");
  return result;
}

uint64_t sub_2263BF9E8(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 71)
    return 1;
  if ((v1 & 4) != 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_24EDD6ED8);
  else
    return 0;
}

uint64_t sub_2263BFA20(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;

  if ((sub_2263BF9E8(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  v2 = *((_QWORD *)a1 + 1);
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    return sub_2263BFB10((uint64_t *)a1);
}

std::type_info *sub_2263BFA88(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  std::type_info *v1;
  const pxrInternal__aapl__pxrReserved__::VtValue *v2;
  _QWORD v4[3];

  v1 = (std::type_info *)a1;
  v4[2] = *MEMORY[0x24BDAC8D0];
  if ((sub_2263BF9E8(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast((pxrInternal__aapl__pxrReserved__::VtValue *)&stru_24EDD6ED8, v1, v2);
    v1 = (std::type_info *)sub_2263AD3FC(v1, v4);
    sub_2263AD568((uint64_t)v4);
  }
  return v1;
}

uint64_t sub_2263BFB10(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (!result)
    __assert_rtn("operator->", "intrusive_ptr.hpp", 199, "px != 0");
  return result;
}

uint64_t sub_2263BFB50(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 70)
    return 1;
  if ((v1 & 4) != 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_24EDD6EE8);
  else
    return 0;
}

uint64_t sub_2263BFB88(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;

  if ((sub_2263BFB50(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  v2 = *((_QWORD *)a1 + 1);
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    return sub_2263BFC78((uint64_t *)a1);
}

std::type_info *sub_2263BFBF0(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  std::type_info *v1;
  const pxrInternal__aapl__pxrReserved__::VtValue *v2;
  _QWORD v4[3];

  v1 = (std::type_info *)a1;
  v4[2] = *MEMORY[0x24BDAC8D0];
  if ((sub_2263BFB50(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast((pxrInternal__aapl__pxrReserved__::VtValue *)&stru_24EDD6EE8, v1, v2);
    v1 = (std::type_info *)sub_2263AD3FC(v1, v4);
    sub_2263AD568((uint64_t)v4);
  }
  return v1;
}

uint64_t sub_2263BFC78(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (!result)
    __assert_rtn("operator->", "intrusive_ptr.hpp", 199, "px != 0");
  return result;
}

uint64_t sub_2263BFCB8(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 88)
    return 1;
  if ((v1 & 4) != 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_24EDD6EF8);
  else
    return 0;
}

uint64_t sub_2263BFCF0(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;

  if ((sub_2263BFCB8(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  v2 = *((_QWORD *)a1 + 1);
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    return sub_2263BFDE0((uint64_t *)a1);
}

std::type_info *sub_2263BFD58(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  std::type_info *v1;
  const pxrInternal__aapl__pxrReserved__::VtValue *v2;
  _QWORD v4[3];

  v1 = (std::type_info *)a1;
  v4[2] = *MEMORY[0x24BDAC8D0];
  if ((sub_2263BFCB8(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast((pxrInternal__aapl__pxrReserved__::VtValue *)&stru_24EDD6EF8, v1, v2);
    v1 = (std::type_info *)sub_2263AD3FC(v1, v4);
    sub_2263AD568((uint64_t)v4);
  }
  return v1;
}

uint64_t sub_2263BFDE0(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (!result)
    __assert_rtn("operator->", "intrusive_ptr.hpp", 199, "px != 0");
  return result;
}

uint64_t sub_2263BFE20(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (!strcmp((const char *)(*(_QWORD *)(*(_QWORD *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7SdfPathE" & 0x7FFFFFFFFFFFFFFFLL)))return 1;
  if ((v1 & 4) == 0)
    return 0;
  return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_24EDD6F08);
}

uint64_t sub_2263BFE90(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;
  uint64_t result;

  if ((sub_2263BFE20(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  v2 = *((_QWORD *)a1 + 1);
  result = (uint64_t)a1;
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  return result;
}

std::type_info *sub_2263BFEF8(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  std::type_info *v1;
  const pxrInternal__aapl__pxrReserved__::VtValue *v2;
  _QWORD v4[3];

  v1 = (std::type_info *)a1;
  v4[2] = *MEMORY[0x24BDAC8D0];
  if ((sub_2263BFE20(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast((pxrInternal__aapl__pxrReserved__::VtValue *)&stru_24EDD6F08, v1, v2);
    v1 = (std::type_info *)sub_2263AD3FC(v1, v4);
    sub_2263AD568((uint64_t)v4);
  }
  return v1;
}

uint64_t sub_2263BFF84@<X0>(_QWORD *a1@<X8>)
{
  uint64_t (*v2)(_QWORD);
  _QWORD v4[2];

  sub_2263BFFD4(v4);
  v2 = (uint64_t (*)(_QWORD))v4[1];
  *a1 = v4[0];
  a1[1] = v2;
  v4[0] = 0;
  a1[2] = &stru_24EDD6F08;
  return v2(0);
}

uint64_t sub_2263BFFD4@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  uint64_t result;

  v2 = (_QWORD *)operator new();
  *v2 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  result = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  *a1 = v2;
  a1[1] = sub_2263C0030;
  return result;
}

uint64_t sub_2263C0030(uint64_t result)
{
  uint64_t v1;

  if (result)
  {
    v1 = result;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    sub_2263BDE64(v1);
    JUMPOUT(0x2276980E0);
  }
  return result;
}

uint64_t sub_2263C0080(uint64_t a1, _DWORD *a2)
{
  int v5;

  if ((pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator==() & 1) == 0)
  {
    sub_2263BDDD8(&v5, a2);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap();
    sub_2263BDE64((uint64_t)&v5);
  }
  return a1;
}

uint64_t sub_2263C00D4(uint64_t a1, _DWORD *a2)
{
  int v4;

  sub_2263BDE28(&v4, a2);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return a1;
}

std::type_info *sub_2263C011C(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  std::type_info *v1;
  const pxrInternal__aapl__pxrReserved__::VtValue *v2;
  _QWORD v4[3];

  v1 = (std::type_info *)a1;
  v4[2] = *MEMORY[0x24BDAC8D0];
  if ((sub_2263BE65C(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast((pxrInternal__aapl__pxrReserved__::VtValue *)&stru_24EDD6E78, v1, v2);
    v1 = (std::type_info *)sub_2263AD3FC(v1, v4);
    sub_2263AD568((uint64_t)v4);
  }
  return v1;
}

uint64_t sub_2263C01A4(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 52)
    return 1;
  if ((v1 & 4) != 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_24EDD6F18);
  else
    return 0;
}

uint64_t sub_2263C01DC(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;

  if ((sub_2263C01A4(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  v2 = *((_QWORD *)a1 + 1);
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    return sub_2263C036C((uint64_t *)a1);
}

std::type_info *sub_2263C0244(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  std::type_info *v1;
  const pxrInternal__aapl__pxrReserved__::VtValue *v2;
  _QWORD v4[3];

  v1 = (std::type_info *)a1;
  v4[2] = *MEMORY[0x24BDAC8D0];
  if ((sub_2263C01A4(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast((pxrInternal__aapl__pxrReserved__::VtValue *)&stru_24EDD6F18, v1, v2);
    v1 = (std::type_info *)sub_2263AD3FC(v1, v4);
    sub_2263AD568((uint64_t)v4);
  }
  return v1;
}

double sub_2263C02CC@<D0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  double result;

  v2 = operator new();
  result = 0.0;
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_QWORD *)(v2 + 32) = 0;
  *a1 = v2;
  a1[1] = (uint64_t)sub_2263C0324;
  a1[2] = (uint64_t)&stru_24EDD6F18;
  return result;
}

uint64_t sub_2263C0324(uint64_t result)
{
  if (result)
  {
    sub_2263AC71C(result);
    JUMPOUT(0x2276980E0);
  }
  return result;
}

uint64_t sub_2263C036C(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (!result)
    __assert_rtn("operator->", "intrusive_ptr.hpp", 199, "px != 0");
  return result;
}

uint64_t sub_2263C03AC(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 53)
    return 1;
  if ((v1 & 4) != 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_24EDD6F30);
  else
    return 0;
}

uint64_t sub_2263C03E4(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;

  if ((sub_2263C03AC(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  v2 = *((_QWORD *)a1 + 1);
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    return sub_2263C062C((uint64_t *)a1);
}

uint64_t sub_2263C044C(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  if ((__int128 *)a1 != a2)
  {
    v3 = a2[1];
    v9 = *a2;
    v10 = v3;
    v4 = *((_QWORD *)a2 + 4);
    v11 = v4;
    if (v4)
    {
      v5 = (unint64_t *)(v4 - 16);
      if (*((_QWORD *)&v10 + 1))
        v5 = (unint64_t *)*((_QWORD *)&v10 + 1);
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
    }
    if (&v9 != (__int128 *)a1)
    {
      sub_2263AC71C(a1);
      v7 = v10;
      *(_OWORD *)a1 = v9;
      *(_OWORD *)(a1 + 16) = v7;
      v9 = 0u;
      v10 = 0u;
      *(_QWORD *)(a1 + 32) = v11;
      v11 = 0;
    }
    sub_2263AC71C((uint64_t)&v9);
  }
  return a1;
}

void sub_2263C04E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2263AC71C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

std::type_info *sub_2263C0504(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  std::type_info *v1;
  const pxrInternal__aapl__pxrReserved__::VtValue *v2;
  _QWORD v4[3];

  v1 = (std::type_info *)a1;
  v4[2] = *MEMORY[0x24BDAC8D0];
  if ((sub_2263C03AC(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast((pxrInternal__aapl__pxrReserved__::VtValue *)&stru_24EDD6F30, v1, v2);
    v1 = (std::type_info *)sub_2263AD3FC(v1, v4);
    sub_2263AD568((uint64_t)v4);
  }
  return v1;
}

double sub_2263C058C@<D0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  double result;

  v2 = operator new();
  result = 0.0;
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_QWORD *)(v2 + 32) = 0;
  *a1 = v2;
  a1[1] = (uint64_t)sub_2263C05E4;
  a1[2] = (uint64_t)&stru_24EDD6F30;
  return result;
}

uint64_t sub_2263C05E4(uint64_t result)
{
  if (result)
  {
    sub_2263AC71C(result);
    JUMPOUT(0x2276980E0);
  }
  return result;
}

uint64_t sub_2263C062C(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (!result)
    __assert_rtn("operator->", "intrusive_ptr.hpp", 199, "px != 0");
  return result;
}

uint64_t sub_2263C066C(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 41)
    return 1;
  if ((v1 & 4) != 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_24EDD6F48);
  else
    return 0;
}

uint64_t sub_2263C06A4(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;

  if ((sub_2263C066C(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  v2 = *((_QWORD *)a1 + 1);
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    return sub_2263C08EC((uint64_t *)a1);
}

uint64_t sub_2263C070C(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  if ((__int128 *)a1 != a2)
  {
    v3 = a2[1];
    v9 = *a2;
    v10 = v3;
    v4 = *((_QWORD *)a2 + 4);
    v11 = v4;
    if (v4)
    {
      v5 = (unint64_t *)(v4 - 16);
      if (*((_QWORD *)&v10 + 1))
        v5 = (unint64_t *)*((_QWORD *)&v10 + 1);
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
    }
    if (&v9 != (__int128 *)a1)
    {
      sub_2263AC71C(a1);
      v7 = v10;
      *(_OWORD *)a1 = v9;
      *(_OWORD *)(a1 + 16) = v7;
      v9 = 0u;
      v10 = 0u;
      *(_QWORD *)(a1 + 32) = v11;
      v11 = 0;
    }
    sub_2263AC71C((uint64_t)&v9);
  }
  return a1;
}

void sub_2263C07A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2263AC71C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

std::type_info *sub_2263C07C4(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  std::type_info *v1;
  const pxrInternal__aapl__pxrReserved__::VtValue *v2;
  _QWORD v4[3];

  v1 = (std::type_info *)a1;
  v4[2] = *MEMORY[0x24BDAC8D0];
  if ((sub_2263C066C(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast((pxrInternal__aapl__pxrReserved__::VtValue *)&stru_24EDD6F48, v1, v2);
    v1 = (std::type_info *)sub_2263AD3FC(v1, v4);
    sub_2263AD568((uint64_t)v4);
  }
  return v1;
}

double sub_2263C084C@<D0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  double result;

  v2 = operator new();
  result = 0.0;
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_QWORD *)(v2 + 32) = 0;
  *a1 = v2;
  a1[1] = (uint64_t)sub_2263C08A4;
  a1[2] = (uint64_t)&stru_24EDD6F48;
  return result;
}

uint64_t sub_2263C08A4(uint64_t result)
{
  if (result)
  {
    sub_2263AC71C(result);
    JUMPOUT(0x2276980E0);
  }
  return result;
}

uint64_t sub_2263C08EC(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (!result)
    __assert_rtn("operator->", "intrusive_ptr.hpp", 199, "px != 0");
  return result;
}

void sub_2263C092C(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this)
{
  uint64_t v1;
  unint64_t v3;
  __int128 *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _OWORD *v9;
  __int128 v10;

  v1 = *((_QWORD *)this + 4);
  if (v1)
  {
    if (*((_QWORD *)this + 3) || (v3 = atomic_load((unint64_t *)(v1 - 16)), v3 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>::_DetachIfNotUnique() [T = pxrInternal__aapl__pxrReserved__::GfQuatf]");
      v4 = (__int128 *)*((_QWORD *)this + 4);
      v5 = *(_QWORD *)this;
      v6 = sub_2263C09C0((uint64_t)this, *(_QWORD *)this);
      v7 = v6;
      if (v5)
      {
        v8 = 16 * v5;
        v9 = v6;
        do
        {
          v10 = *v4++;
          *v9++ = v10;
          v8 -= 16;
        }
        while (v8);
      }
      sub_2263AC71C((uint64_t)this);
      *((_QWORD *)this + 4) = v7;
    }
  }
}

_QWORD *sub_2263C09C0(uint64_t a1, unint64_t a2)
{
  size_t v3;
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;

  v7 = 0;
  v8 = 0;
  sub_2263AC890((uint64_t)&v7);
  if (a2 > 0xFFFFFFFFFFFFFFELL)
    v3 = -1;
  else
    v3 = 16 * a2 + 16;
  v4 = operator new(v3);
  *v4 = 1;
  v4[1] = a2;
  while (1)
  {
    v5 = v8;
    LODWORD(v8) = v8 - 1;
    if (!v5)
      break;
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End();
  }
  return v4 + 2;
}

void sub_2263C0A44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2263AC840((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2263C0A5C(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 59)
    return 1;
  if ((v1 & 4) != 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_24EDD6F60);
  else
    return 0;
}

double sub_2263C0A94@<D0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  double result;

  v2 = operator new();
  result = 0.0;
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_QWORD *)(v2 + 32) = 0;
  *a1 = v2;
  a1[1] = (uint64_t)sub_2263C0AEC;
  a1[2] = (uint64_t)&stru_24EDD6F60;
  return result;
}

_QWORD *sub_2263C0AEC(_QWORD *result)
{
  if (result)
  {
    sub_2263C7974(result);
    JUMPOUT(0x2276980E0);
  }
  return result;
}

uint64_t sub_2263C0B34(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (!result)
    __assert_rtn("operator->", "intrusive_ptr.hpp", 199, "px != 0");
  return result;
}

uint64_t sub_2263C0B74(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 60)
    return 1;
  if ((v1 & 4) != 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_24EDD6F78);
  else
    return 0;
}

double sub_2263C0BAC@<D0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  double result;

  v2 = operator new();
  result = 0.0;
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_QWORD *)(v2 + 32) = 0;
  *a1 = v2;
  a1[1] = (uint64_t)sub_2263C0C04;
  a1[2] = (uint64_t)&stru_24EDD6F78;
  return result;
}

_QWORD *sub_2263C0C04(_QWORD *result)
{
  if (result)
  {
    sub_2263C8530(result);
    JUMPOUT(0x2276980E0);
  }
  return result;
}

uint64_t sub_2263C0C4C(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (!result)
    __assert_rtn("operator->", "intrusive_ptr.hpp", 199, "px != 0");
  return result;
}

uint64_t sub_2263C0C8C(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (!strcmp((const char *)(*(_QWORD *)(*(_QWORD *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7VtArrayINS_12SdfAssetPathEEE" & 0x7FFFFFFFFFFFFFFFLL)))return 1;
  if ((v1 & 4) == 0)
    return 0;
  return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_24EDD6F90);
}

double sub_2263C0CFC@<D0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  double result;

  v2 = operator new();
  result = 0.0;
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_QWORD *)(v2 + 32) = 0;
  *a1 = v2;
  a1[1] = (uint64_t)sub_2263C0D54;
  a1[2] = (uint64_t)&stru_24EDD6F90;
  return result;
}

_QWORD *sub_2263C0D54(_QWORD *result)
{
  if (result)
  {
    sub_2263C97A0(result);
    JUMPOUT(0x2276980E0);
  }
  return result;
}

uint64_t sub_2263C0D9C(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (!result)
    __assert_rtn("operator->", "intrusive_ptr.hpp", 199, "px != 0");
  return result;
}

uint64_t sub_2263C0DDC(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 57)
    return 1;
  if ((v1 & 4) != 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_24EDD6FA8);
  else
    return 0;
}

uint64_t sub_2263C0E14(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;

  if ((sub_2263C0DDC(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  v2 = *((_QWORD *)a1 + 1);
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    return sub_2263C105C((uint64_t *)a1);
}

uint64_t sub_2263C0E7C(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  if ((__int128 *)a1 != a2)
  {
    v3 = a2[1];
    v9 = *a2;
    v10 = v3;
    v4 = *((_QWORD *)a2 + 4);
    v11 = v4;
    if (v4)
    {
      v5 = (unint64_t *)(v4 - 16);
      if (*((_QWORD *)&v10 + 1))
        v5 = (unint64_t *)*((_QWORD *)&v10 + 1);
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
    }
    if (&v9 != (__int128 *)a1)
    {
      sub_2263AC71C(a1);
      v7 = v10;
      *(_OWORD *)a1 = v9;
      *(_OWORD *)(a1 + 16) = v7;
      v9 = 0u;
      v10 = 0u;
      *(_QWORD *)(a1 + 32) = v11;
      v11 = 0;
    }
    sub_2263AC71C((uint64_t)&v9);
  }
  return a1;
}

void sub_2263C0F18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2263AC71C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

std::type_info *sub_2263C0F34(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  std::type_info *v1;
  const pxrInternal__aapl__pxrReserved__::VtValue *v2;
  _QWORD v4[3];

  v1 = (std::type_info *)a1;
  v4[2] = *MEMORY[0x24BDAC8D0];
  if ((sub_2263C0DDC(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast((pxrInternal__aapl__pxrReserved__::VtValue *)&stru_24EDD6FA8, v1, v2);
    v1 = (std::type_info *)sub_2263AD3FC(v1, v4);
    sub_2263AD568((uint64_t)v4);
  }
  return v1;
}

double sub_2263C0FBC@<D0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  double result;

  v2 = operator new();
  result = 0.0;
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_QWORD *)(v2 + 32) = 0;
  *a1 = v2;
  a1[1] = (uint64_t)sub_2263C1014;
  a1[2] = (uint64_t)&stru_24EDD6FA8;
  return result;
}

uint64_t sub_2263C1014(uint64_t result)
{
  if (result)
  {
    sub_2263AC71C(result);
    JUMPOUT(0x2276980E0);
  }
  return result;
}

uint64_t sub_2263C105C(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (!result)
    __assert_rtn("operator->", "intrusive_ptr.hpp", 199, "px != 0");
  return result;
}

uint64_t sub_2263C109C(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  if ((__int128 *)a1 != a2)
  {
    v3 = a2[1];
    v9 = *a2;
    v10 = v3;
    v4 = *((_QWORD *)a2 + 4);
    v11 = v4;
    if (v4)
    {
      v5 = (unint64_t *)(v4 - 16);
      if (*((_QWORD *)&v10 + 1))
        v5 = (unint64_t *)*((_QWORD *)&v10 + 1);
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
    }
    if (&v9 != (__int128 *)a1)
    {
      sub_2263AC71C(a1);
      v7 = v10;
      *(_OWORD *)a1 = v9;
      *(_OWORD *)(a1 + 16) = v7;
      v9 = 0u;
      v10 = 0u;
      *(_QWORD *)(a1 + 32) = v11;
      v11 = 0;
    }
    sub_2263AC71C((uint64_t)&v9);
  }
  return a1;
}

void sub_2263C1138(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2263AC71C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

std::type_info *sub_2263C1154(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  std::type_info *v1;
  const pxrInternal__aapl__pxrReserved__::VtValue *v2;
  _QWORD v4[3];

  v1 = (std::type_info *)a1;
  v4[2] = *MEMORY[0x24BDAC8D0];
  if ((sub_2263B1D2C(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast((pxrInternal__aapl__pxrReserved__::VtValue *)&stru_24EDD69B8, v1, v2);
    v1 = (std::type_info *)sub_2263AD3FC(v1, v4);
    sub_2263AD568((uint64_t)v4);
  }
  return v1;
}

void sub_2263C11DC(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;

  v1 = *((_QWORD *)this + 4);
  if (v1)
  {
    if (*((_QWORD *)this + 3) || (v3 = atomic_load((unint64_t *)(v1 - 16)), v3 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>::_DetachIfNotUnique() [T = pxrInternal__aapl__pxrReserved__::GfVec2f]");
      v4 = (uint64_t *)*((_QWORD *)this + 4);
      v5 = *(_QWORD *)this;
      v6 = sub_2263C1270((uint64_t)this, *(_QWORD *)this);
      v7 = v6;
      if (v5)
      {
        v8 = 8 * v5;
        v9 = v6;
        do
        {
          v10 = *v4++;
          *v9++ = v10;
          v8 -= 8;
        }
        while (v8);
      }
      sub_2263AC71C((uint64_t)this);
      *((_QWORD *)this + 4) = v7;
    }
  }
}

_QWORD *sub_2263C1270(uint64_t a1, unint64_t a2)
{
  size_t v3;
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;

  v7 = 0;
  v8 = 0;
  sub_2263AC890((uint64_t)&v7);
  if (a2 > 0x1FFFFFFFFFFFFFFDLL)
    v3 = -1;
  else
    v3 = 8 * a2 + 16;
  v4 = operator new(v3);
  *v4 = 1;
  v4[1] = a2;
  while (1)
  {
    v5 = v8;
    LODWORD(v8) = v8 - 1;
    if (!v5)
      break;
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End();
  }
  return v4 + 2;
}

void sub_2263C12F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2263AC840((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2263C1310(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  if ((__int128 *)a1 != a2)
  {
    v3 = a2[1];
    v9 = *a2;
    v10 = v3;
    v4 = *((_QWORD *)a2 + 4);
    v11 = v4;
    if (v4)
    {
      v5 = (unint64_t *)(v4 - 16);
      if (*((_QWORD *)&v10 + 1))
        v5 = (unint64_t *)*((_QWORD *)&v10 + 1);
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
    }
    if (&v9 != (__int128 *)a1)
    {
      sub_2263AC71C(a1);
      v7 = v10;
      *(_OWORD *)a1 = v9;
      *(_OWORD *)(a1 + 16) = v7;
      v9 = 0u;
      v10 = 0u;
      *(_QWORD *)(a1 + 32) = v11;
      v11 = 0;
    }
    sub_2263AC71C((uint64_t)&v9);
  }
  return a1;
}

void sub_2263C13AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2263AC71C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2263C13C8(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 20)
    return 1;
  if ((v1 & 4) != 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_24EDD6A88);
  else
    return 0;
}

uint64_t sub_2263C1400(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;

  if ((sub_2263C13C8(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  v2 = *((_QWORD *)a1 + 1);
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    return sub_2263B26AC((uint64_t *)a1);
}

uint64_t sub_2263C1468(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  if ((__int128 *)a1 != a2)
  {
    v3 = a2[1];
    v9 = *a2;
    v10 = v3;
    v4 = *((_QWORD *)a2 + 4);
    v11 = v4;
    if (v4)
    {
      v5 = (unint64_t *)(v4 - 16);
      if (*((_QWORD *)&v10 + 1))
        v5 = (unint64_t *)*((_QWORD *)&v10 + 1);
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
    }
    if (&v9 != (__int128 *)a1)
    {
      sub_2263AC71C(a1);
      v7 = v10;
      *(_OWORD *)a1 = v9;
      *(_OWORD *)(a1 + 16) = v7;
      v9 = 0u;
      v10 = 0u;
      *(_QWORD *)(a1 + 32) = v11;
      v11 = 0;
    }
    sub_2263AC71C((uint64_t)&v9);
  }
  return a1;
}

void sub_2263C1504(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2263AC71C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

std::type_info *sub_2263C1520(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  std::type_info *v1;
  const pxrInternal__aapl__pxrReserved__::VtValue *v2;
  _QWORD v4[3];

  v1 = (std::type_info *)a1;
  v4[2] = *MEMORY[0x24BDAC8D0];
  if ((sub_2263C13C8(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast((pxrInternal__aapl__pxrReserved__::VtValue *)&stru_24EDD6A88, v1, v2);
    v1 = (std::type_info *)sub_2263AD3FC(v1, v4);
    sub_2263AD568((uint64_t)v4);
  }
  return v1;
}

double sub_2263C15A8@<D0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  double result;

  v2 = operator new();
  result = 0.0;
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_QWORD *)(v2 + 32) = 0;
  *a1 = v2;
  a1[1] = (uint64_t)sub_2263C1600;
  a1[2] = (uint64_t)&stru_24EDD6A88;
  return result;
}

uint64_t sub_2263C1600(uint64_t result)
{
  if (result)
  {
    sub_2263AC71C(result);
    JUMPOUT(0x2276980E0);
  }
  return result;
}

uint64_t sub_2263C1648(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 29)
    return 1;
  if ((v1 & 4) != 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_24EDD6FC0);
  else
    return 0;
}

uint64_t sub_2263C1680(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;

  if ((sub_2263C1648(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  v2 = *((_QWORD *)a1 + 1);
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    return sub_2263C18C8((uint64_t *)a1);
}

uint64_t sub_2263C16E8(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  if ((__int128 *)a1 != a2)
  {
    v3 = a2[1];
    v9 = *a2;
    v10 = v3;
    v4 = *((_QWORD *)a2 + 4);
    v11 = v4;
    if (v4)
    {
      v5 = (unint64_t *)(v4 - 16);
      if (*((_QWORD *)&v10 + 1))
        v5 = (unint64_t *)*((_QWORD *)&v10 + 1);
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
    }
    if (&v9 != (__int128 *)a1)
    {
      sub_2263AC71C(a1);
      v7 = v10;
      *(_OWORD *)a1 = v9;
      *(_OWORD *)(a1 + 16) = v7;
      v9 = 0u;
      v10 = 0u;
      *(_QWORD *)(a1 + 32) = v11;
      v11 = 0;
    }
    sub_2263AC71C((uint64_t)&v9);
  }
  return a1;
}

void sub_2263C1784(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2263AC71C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

std::type_info *sub_2263C17A0(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  std::type_info *v1;
  const pxrInternal__aapl__pxrReserved__::VtValue *v2;
  _QWORD v4[3];

  v1 = (std::type_info *)a1;
  v4[2] = *MEMORY[0x24BDAC8D0];
  if ((sub_2263C1648(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast((pxrInternal__aapl__pxrReserved__::VtValue *)&stru_24EDD6FC0, v1, v2);
    v1 = (std::type_info *)sub_2263AD3FC(v1, v4);
    sub_2263AD568((uint64_t)v4);
  }
  return v1;
}

double sub_2263C1828@<D0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  double result;

  v2 = operator new();
  result = 0.0;
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_QWORD *)(v2 + 32) = 0;
  *a1 = v2;
  a1[1] = (uint64_t)sub_2263C1880;
  a1[2] = (uint64_t)&stru_24EDD6FC0;
  return result;
}

uint64_t sub_2263C1880(uint64_t result)
{
  if (result)
  {
    sub_2263AC71C(result);
    JUMPOUT(0x2276980E0);
  }
  return result;
}

uint64_t sub_2263C18C8(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (!result)
    __assert_rtn("operator->", "intrusive_ptr.hpp", 199, "px != 0");
  return result;
}

void sub_2263C1908(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this)
{
  uint64_t v1;
  unint64_t v3;
  __int128 *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _OWORD *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;

  v1 = *((_QWORD *)this + 4);
  if (v1)
  {
    if (*((_QWORD *)this + 3) || (v3 = atomic_load((unint64_t *)(v1 - 16)), v3 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>::_DetachIfNotUnique() [T = pxrInternal__aapl__pxrReserved__::GfMatrix4d]");
      v4 = (__int128 *)*((_QWORD *)this + 4);
      v5 = *(_QWORD *)this;
      v6 = sub_2263C19BC((uint64_t)this, *(_QWORD *)this);
      v7 = v6;
      if (v5)
      {
        v8 = v5 << 7;
        v9 = v6;
        do
        {
          v10 = *v4;
          v11 = v4[1];
          v12 = v4[3];
          v9[2] = v4[2];
          v9[3] = v12;
          *v9 = v10;
          v9[1] = v11;
          v13 = v4[4];
          v14 = v4[5];
          v15 = v4[7];
          v9[6] = v4[6];
          v9[7] = v15;
          v9[4] = v13;
          v9[5] = v14;
          v4 += 8;
          v9 += 8;
          v8 -= 128;
        }
        while (v8);
      }
      sub_2263AC71C((uint64_t)this);
      *((_QWORD *)this + 4) = v7;
    }
  }
}

_QWORD *sub_2263C19BC(uint64_t a1, unint64_t a2)
{
  size_t v3;
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;

  v7 = 0;
  v8 = 0;
  sub_2263AC890((uint64_t)&v7);
  if (a2 >> 57)
    v3 = -1;
  else
    v3 = (a2 << 7) | 0x10;
  v4 = operator new(v3);
  *v4 = 1;
  v4[1] = a2;
  while (1)
  {
    v5 = v8;
    LODWORD(v8) = v8 - 1;
    if (!v5)
      break;
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End();
  }
  return v4 + 2;
}

void sub_2263C1A40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2263AC840((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2263C1A58(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 56)
    return 1;
  if ((v1 & 4) != 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_24EDD6FD8);
  else
    return 0;
}

uint64_t sub_2263C1A90(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;

  if ((sub_2263C1A58(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  v2 = *((_QWORD *)a1 + 1);
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    return sub_2263C1CD8((uint64_t *)a1);
}

uint64_t sub_2263C1AF8(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  if ((__int128 *)a1 != a2)
  {
    v3 = a2[1];
    v9 = *a2;
    v10 = v3;
    v4 = *((_QWORD *)a2 + 4);
    v11 = v4;
    if (v4)
    {
      v5 = (unint64_t *)(v4 - 16);
      if (*((_QWORD *)&v10 + 1))
        v5 = (unint64_t *)*((_QWORD *)&v10 + 1);
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
    }
    if (&v9 != (__int128 *)a1)
    {
      sub_2263AC71C(a1);
      v7 = v10;
      *(_OWORD *)a1 = v9;
      *(_OWORD *)(a1 + 16) = v7;
      v9 = 0u;
      v10 = 0u;
      *(_QWORD *)(a1 + 32) = v11;
      v11 = 0;
    }
    sub_2263AC71C((uint64_t)&v9);
  }
  return a1;
}

void sub_2263C1B94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2263AC71C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

std::type_info *sub_2263C1BB0(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  std::type_info *v1;
  const pxrInternal__aapl__pxrReserved__::VtValue *v2;
  _QWORD v4[3];

  v1 = (std::type_info *)a1;
  v4[2] = *MEMORY[0x24BDAC8D0];
  if ((sub_2263C1A58(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast((pxrInternal__aapl__pxrReserved__::VtValue *)&stru_24EDD6FD8, v1, v2);
    v1 = (std::type_info *)sub_2263AD3FC(v1, v4);
    sub_2263AD568((uint64_t)v4);
  }
  return v1;
}

double sub_2263C1C38@<D0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  double result;

  v2 = operator new();
  result = 0.0;
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_QWORD *)(v2 + 32) = 0;
  *a1 = v2;
  a1[1] = (uint64_t)sub_2263C1C90;
  a1[2] = (uint64_t)&stru_24EDD6FD8;
  return result;
}

uint64_t sub_2263C1C90(uint64_t result)
{
  if (result)
  {
    sub_2263AC71C(result);
    JUMPOUT(0x2276980E0);
  }
  return result;
}

uint64_t sub_2263C1CD8(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (!result)
    __assert_rtn("operator->", "intrusive_ptr.hpp", 199, "px != 0");
  return result;
}

uint64_t sub_2263C1D18(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 25)
    return 1;
  if ((v1 & 4) != 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_24EDD6FF0);
  else
    return 0;
}

uint64_t sub_2263C1D50(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;

  if ((sub_2263C1D18(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  v2 = *((_QWORD *)a1 + 1);
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    return sub_2263C1F98((uint64_t *)a1);
}

uint64_t sub_2263C1DB8(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  if ((__int128 *)a1 != a2)
  {
    v3 = a2[1];
    v9 = *a2;
    v10 = v3;
    v4 = *((_QWORD *)a2 + 4);
    v11 = v4;
    if (v4)
    {
      v5 = (unint64_t *)(v4 - 16);
      if (*((_QWORD *)&v10 + 1))
        v5 = (unint64_t *)*((_QWORD *)&v10 + 1);
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
    }
    if (&v9 != (__int128 *)a1)
    {
      sub_2263AC71C(a1);
      v7 = v10;
      *(_OWORD *)a1 = v9;
      *(_OWORD *)(a1 + 16) = v7;
      v9 = 0u;
      v10 = 0u;
      *(_QWORD *)(a1 + 32) = v11;
      v11 = 0;
    }
    sub_2263AC71C((uint64_t)&v9);
  }
  return a1;
}

void sub_2263C1E54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2263AC71C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

std::type_info *sub_2263C1E70(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  std::type_info *v1;
  const pxrInternal__aapl__pxrReserved__::VtValue *v2;
  _QWORD v4[3];

  v1 = (std::type_info *)a1;
  v4[2] = *MEMORY[0x24BDAC8D0];
  if ((sub_2263C1D18(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast((pxrInternal__aapl__pxrReserved__::VtValue *)&stru_24EDD6FF0, v1, v2);
    v1 = (std::type_info *)sub_2263AD3FC(v1, v4);
    sub_2263AD568((uint64_t)v4);
  }
  return v1;
}

double sub_2263C1EF8@<D0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  double result;

  v2 = operator new();
  result = 0.0;
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_QWORD *)(v2 + 32) = 0;
  *a1 = v2;
  a1[1] = (uint64_t)sub_2263C1F50;
  a1[2] = (uint64_t)&stru_24EDD6FF0;
  return result;
}

uint64_t sub_2263C1F50(uint64_t result)
{
  if (result)
  {
    sub_2263AC71C(result);
    JUMPOUT(0x2276980E0);
  }
  return result;
}

uint64_t sub_2263C1F98(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (!result)
    __assert_rtn("operator->", "intrusive_ptr.hpp", 199, "px != 0");
  return result;
}

void sub_2263C1FD8(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this)
{
  uint64_t v1;
  unint64_t v3;
  __int128 *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _OWORD *v9;
  __int128 v10;

  v1 = *((_QWORD *)this + 4);
  if (v1)
  {
    if (*((_QWORD *)this + 3) || (v3 = atomic_load((unint64_t *)(v1 - 16)), v3 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>::_DetachIfNotUnique() [T = pxrInternal__aapl__pxrReserved__::GfVec2d]");
      v4 = (__int128 *)*((_QWORD *)this + 4);
      v5 = *(_QWORD *)this;
      v6 = sub_2263C206C((uint64_t)this, *(_QWORD *)this);
      v7 = v6;
      if (v5)
      {
        v8 = 16 * v5;
        v9 = v6;
        do
        {
          v10 = *v4++;
          *v9++ = v10;
          v8 -= 16;
        }
        while (v8);
      }
      sub_2263AC71C((uint64_t)this);
      *((_QWORD *)this + 4) = v7;
    }
  }
}

_QWORD *sub_2263C206C(uint64_t a1, unint64_t a2)
{
  size_t v3;
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;

  v7 = 0;
  v8 = 0;
  sub_2263AC890((uint64_t)&v7);
  if (a2 > 0xFFFFFFFFFFFFFFELL)
    v3 = -1;
  else
    v3 = 16 * a2 + 16;
  v4 = operator new(v3);
  *v4 = 1;
  v4[1] = a2;
  while (1)
  {
    v5 = v8;
    LODWORD(v8) = v8 - 1;
    if (!v5)
      break;
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End();
  }
  return v4 + 2;
}

void sub_2263C20F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2263AC840((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2263C2108(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 24)
    return 1;
  if ((v1 & 4) != 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_24EDD7008);
  else
    return 0;
}

uint64_t sub_2263C2140(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;

  if ((sub_2263C2108(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  v2 = *((_QWORD *)a1 + 1);
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    return sub_2263C2388((uint64_t *)a1);
}

uint64_t sub_2263C21A8(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  if ((__int128 *)a1 != a2)
  {
    v3 = a2[1];
    v9 = *a2;
    v10 = v3;
    v4 = *((_QWORD *)a2 + 4);
    v11 = v4;
    if (v4)
    {
      v5 = (unint64_t *)(v4 - 16);
      if (*((_QWORD *)&v10 + 1))
        v5 = (unint64_t *)*((_QWORD *)&v10 + 1);
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
    }
    if (&v9 != (__int128 *)a1)
    {
      sub_2263AC71C(a1);
      v7 = v10;
      *(_OWORD *)a1 = v9;
      *(_OWORD *)(a1 + 16) = v7;
      v9 = 0u;
      v10 = 0u;
      *(_QWORD *)(a1 + 32) = v11;
      v11 = 0;
    }
    sub_2263AC71C((uint64_t)&v9);
  }
  return a1;
}

void sub_2263C2244(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2263AC71C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

std::type_info *sub_2263C2260(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  std::type_info *v1;
  const pxrInternal__aapl__pxrReserved__::VtValue *v2;
  _QWORD v4[3];

  v1 = (std::type_info *)a1;
  v4[2] = *MEMORY[0x24BDAC8D0];
  if ((sub_2263C2108(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast((pxrInternal__aapl__pxrReserved__::VtValue *)&stru_24EDD7008, v1, v2);
    v1 = (std::type_info *)sub_2263AD3FC(v1, v4);
    sub_2263AD568((uint64_t)v4);
  }
  return v1;
}

double sub_2263C22E8@<D0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  double result;

  v2 = operator new();
  result = 0.0;
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_QWORD *)(v2 + 32) = 0;
  *a1 = v2;
  a1[1] = (uint64_t)sub_2263C2340;
  a1[2] = (uint64_t)&stru_24EDD7008;
  return result;
}

uint64_t sub_2263C2340(uint64_t result)
{
  if (result)
  {
    sub_2263AC71C(result);
    JUMPOUT(0x2276980E0);
  }
  return result;
}

uint64_t sub_2263C2388(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (!result)
    __assert_rtn("operator->", "intrusive_ptr.hpp", 199, "px != 0");
  return result;
}

void sub_2263C23C8(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this)
{
  uint64_t v1;
  unint64_t v3;
  __int128 *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  __int128 v10;

  v1 = *((_QWORD *)this + 4);
  if (v1)
  {
    if (*((_QWORD *)this + 3) || (v3 = atomic_load((unint64_t *)(v1 - 16)), v3 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>::_DetachIfNotUnique() [T = pxrInternal__aapl__pxrReserved__::GfVec3d]");
      v4 = (__int128 *)*((_QWORD *)this + 4);
      v5 = *(_QWORD *)this;
      v6 = sub_2263C246C((uint64_t)this, *(_QWORD *)this);
      v7 = v6;
      if (v5)
      {
        v8 = 24 * v5;
        v9 = v6;
        do
        {
          v10 = *v4;
          v9[2] = *((_QWORD *)v4 + 2);
          *(_OWORD *)v9 = v10;
          v9 += 3;
          v4 = (__int128 *)((char *)v4 + 24);
          v8 -= 24;
        }
        while (v8);
      }
      sub_2263AC71C((uint64_t)this);
      *((_QWORD *)this + 4) = v7;
    }
  }
}

_QWORD *sub_2263C246C(uint64_t a1, unint64_t a2)
{
  size_t v3;
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;

  v7 = 0;
  v8 = 0;
  sub_2263AC890((uint64_t)&v7);
  if (a2 > 0xAAAAAAAAAAAAAA9)
    v3 = -1;
  else
    v3 = 24 * a2 + 16;
  v4 = operator new(v3);
  *v4 = 1;
  v4[1] = a2;
  while (1)
  {
    v5 = v8;
    LODWORD(v8) = v8 - 1;
    if (!v5)
      break;
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End();
  }
  return v4 + 2;
}

void sub_2263C24FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2263AC840((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2263C2514(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 23)
    return 1;
  if ((v1 & 4) != 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_24EDD7020);
  else
    return 0;
}

uint64_t sub_2263C254C(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;

  if ((sub_2263C2514(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  v2 = *((_QWORD *)a1 + 1);
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    return sub_2263C2794((uint64_t *)a1);
}

uint64_t sub_2263C25B4(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  if ((__int128 *)a1 != a2)
  {
    v3 = a2[1];
    v9 = *a2;
    v10 = v3;
    v4 = *((_QWORD *)a2 + 4);
    v11 = v4;
    if (v4)
    {
      v5 = (unint64_t *)(v4 - 16);
      if (*((_QWORD *)&v10 + 1))
        v5 = (unint64_t *)*((_QWORD *)&v10 + 1);
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 1, v5));
    }
    if (&v9 != (__int128 *)a1)
    {
      sub_2263AC71C(a1);
      v7 = v10;
      *(_OWORD *)a1 = v9;
      *(_OWORD *)(a1 + 16) = v7;
      v9 = 0u;
      v10 = 0u;
      *(_QWORD *)(a1 + 32) = v11;
      v11 = 0;
    }
    sub_2263AC71C((uint64_t)&v9);
  }
  return a1;
}

void sub_2263C2650(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2263AC71C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

std::type_info *sub_2263C266C(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  std::type_info *v1;
  const pxrInternal__aapl__pxrReserved__::VtValue *v2;
  _QWORD v4[3];

  v1 = (std::type_info *)a1;
  v4[2] = *MEMORY[0x24BDAC8D0];
  if ((sub_2263C2514(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast((pxrInternal__aapl__pxrReserved__::VtValue *)&stru_24EDD7020, v1, v2);
    v1 = (std::type_info *)sub_2263AD3FC(v1, v4);
    sub_2263AD568((uint64_t)v4);
  }
  return v1;
}

double sub_2263C26F4@<D0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  double result;

  v2 = operator new();
  result = 0.0;
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_QWORD *)(v2 + 32) = 0;
  *a1 = v2;
  a1[1] = (uint64_t)sub_2263C274C;
  a1[2] = (uint64_t)&stru_24EDD7020;
  return result;
}

uint64_t sub_2263C274C(uint64_t result)
{
  if (result)
  {
    sub_2263AC71C(result);
    JUMPOUT(0x2276980E0);
  }
  return result;
}

uint64_t sub_2263C2794(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (!result)
    __assert_rtn("operator->", "intrusive_ptr.hpp", 199, "px != 0");
  return result;
}

void sub_2263C27D4(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this)
{
  uint64_t v1;
  unint64_t v3;
  __int128 *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _OWORD *v9;
  __int128 v10;
  __int128 v11;

  v1 = *((_QWORD *)this + 4);
  if (v1)
  {
    if (*((_QWORD *)this + 3) || (v3 = atomic_load((unint64_t *)(v1 - 16)), v3 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>::_DetachIfNotUnique() [T = pxrInternal__aapl__pxrReserved__::GfVec4d]");
      v4 = (__int128 *)*((_QWORD *)this + 4);
      v5 = *(_QWORD *)this;
      v6 = sub_2263C2868((uint64_t)this, *(_QWORD *)this);
      v7 = v6;
      if (v5)
      {
        v8 = 32 * v5;
        v9 = v6;
        do
        {
          v10 = *v4;
          v11 = v4[1];
          v4 += 2;
          *v9 = v10;
          v9[1] = v11;
          v9 += 2;
          v8 -= 32;
        }
        while (v8);
      }
      sub_2263AC71C((uint64_t)this);
      *((_QWORD *)this + 4) = v7;
    }
  }
}

_QWORD *sub_2263C2868(uint64_t a1, unint64_t a2)
{
  size_t v3;
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;

  v7 = 0;
  v8 = 0;
  sub_2263AC890((uint64_t)&v7);
  if (a2 >> 59)
    v3 = -1;
  else
    v3 = (32 * a2) | 0x10;
  v4 = operator new(v3);
  *v4 = 1;
  v4[1] = a2;
  while (1)
  {
    v5 = v8;
    LODWORD(v8) = v8 - 1;
    if (!v5)
      break;
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End();
  }
  return v4 + 2;
}

void sub_2263C28EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2263AC840((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_2263C2904(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 2, v3));
    if ((v4 & 1) == 0)
      *a2 &= 0xFFFFFFFFFFFFFFF8;
  }
  return result;
}

_QWORD *sub_2263C293C(_QWORD *result)
{
  unsigned int *v1;
  unsigned int v2;

  if ((*result & 7) != 0)
  {
    v1 = (unsigned int *)(*result & 0xFFFFFFFFFFFFFFF8);
    do
      v2 = __ldxr(v1);
    while (__stlxr(v2 - 2, v1));
  }
  return result;
}

_QWORD *sub_2263C2960(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  *result = 0;
  return result;
}

uint64_t sub_2263C2970()
{
  return 1;
}

unint64_t sub_2263C2978(_QWORD *a1)
{
  return bswap64(0x9E3779B97F4A7C55 * (*a1 & 0xFFFFFFFFFFFFFFF8));
}

BOOL sub_2263C299C(_QWORD *a1, _QWORD *a2)
{
  return (*a1 & 0xFFFFFFFFFFFFFFF8) == (*a2 & 0xFFFFFFFFFFFFFFF8);
}

BOOL sub_2263C29B8(_QWORD *a1, _QWORD *a2)
{
  return (*a1 & 0xFFFFFFFFFFFFFFF8) == (*a2 & 0xFFFFFFFFFFFFFFF8);
}

uint64_t sub_2263C29D8()
{
  return 0;
}

uint64_t sub_2263C29E4()
{
  return pxrInternal__aapl__pxrReserved__::operator<<();
}

void *sub_2263C29F4()
{
  return &unk_24EDD6E68;
}

uint64_t sub_2263C2A00()
{
  return 0;
}

uint64_t sub_2263C2A08()
{
  return MEMORY[0x24BEDB7C8];
}

uint64_t sub_2263C2A14()
{
  return 0;
}

uint64_t sub_2263C2A1C()
{
  return 0;
}

BOOL sub_2263C2A24(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7TfTokenE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_2263C2A54(uint64_t a1, const std::type_info *a2)
{
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24EDD6E68, a2);
}

void *sub_2263C2A74()
{
  return &unk_24EDD6E68;
}

unsigned int **sub_2263C2A84@<X0>(unsigned int **result@<X0>, unsigned int **a2@<X8>)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  a2[1] = (unsigned int *)((char *)&off_24EDD7038 + 1);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)((unint64_t)v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 2, v3));
    if ((v4 & 1) == 0)
      *a2 = v3;
  }
  return result;
}

void sub_2263C2AC0(uint64_t *a1, char **a2)
{
  void *__p[2];
  char v4;

  sub_2263AE2A8(__p, *a2);
  a1[1] = (uint64_t)&off_24EDD70F0;
  sub_2263C2FFC(a1, (uint64_t)__p);
  if (v4 < 0)
    operator delete(__p[0]);
}

void sub_2263C2B18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_2263C2B34(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 24);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t *sub_2263C2B5C(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_2263C2DD4(a1);
}

uint64_t sub_2263C2B6C(uint64_t *a1)
{
  sub_2263C2E40(a1);
  return 1;
}

unint64_t sub_2263C2B84(uint64_t *a1)
{
  uint64_t v1;
  const char *v2;
  _QWORD v4[2];

  v1 = sub_2263C2E40(a1);
  v4[0] = 0;
  v4[1] = 0;
  if (*(char *)(v1 + 23) >= 0)
    v2 = (const char *)v1;
  else
    v2 = *(const char **)v1;
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes((pxrInternal__aapl__pxrReserved__::Tf_HashState *)v4, v2);
  return bswap64(0x9E3779B97F4A7C55 * v4[0]);
}

BOOL sub_2263C2BE0(uint64_t *a1, uint64_t *a2)
{
  unsigned __int8 *v3;
  unsigned __int8 *v4;

  v3 = (unsigned __int8 *)sub_2263C2E40(a1);
  v4 = (unsigned __int8 *)sub_2263C2E40(a2);
  return sub_2263C2E80(v3, v4);
}

BOOL sub_2263C2C14(uint64_t *a1, unsigned __int8 *a2)
{
  unsigned __int8 *v3;

  v3 = (unsigned __int8 *)sub_2263C2E40(a1);
  return sub_2263C2E80(v3, a2);
}

uint64_t sub_2263C2C3C(uint64_t *a1)
{
  sub_2263C2E40(a1);
  return 0;
}

_QWORD *sub_2263C2C58(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;

  v3 = sub_2263C2E40(a1);
  v4 = *(char *)(v3 + 23);
  if (v4 >= 0)
    v5 = v3;
  else
    v5 = *(_QWORD *)v3;
  if (v4 >= 0)
    v6 = *(unsigned __int8 *)(v3 + 23);
  else
    v6 = *(_QWORD *)(v3 + 8);
  return sub_2263B0814(a2, v5, v6);
}

void *sub_2263C2C94(uint64_t *a1)
{
  sub_2263C2E40(a1);
  return &unk_24EDD71A8;
}

uint64_t sub_2263C2CB0(uint64_t *a1)
{
  sub_2263C2E40(a1);
  return 0;
}

uint64_t sub_2263C2CC8(uint64_t *a1)
{
  sub_2263C2E40(a1);
  return MEMORY[0x24BEDB7C8];
}

uint64_t sub_2263C2CE4(uint64_t *a1)
{
  sub_2263C2E40(a1);
  return 0;
}

uint64_t sub_2263C2CFC(uint64_t *a1)
{
  sub_2263C2E40(a1);
  return 0;
}

BOOL sub_2263C2D14(uint64_t *a1, uint64_t a2)
{
  sub_2263C2E40(a1);
  return strcmp((const char *)(0x800000022640C2B8 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_2263C2D5C(uint64_t *a1)
{
  const std::type_info *v1;

  sub_2263C2E40(a1);
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&unk_24EDD71A8, v1);
}

void *sub_2263C2D80(uint64_t *a1)
{
  sub_2263C2E40(a1);
  return &unk_24EDD71A8;
}

uint64_t sub_2263C2DA0@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;

  v3 = sub_2263C2E40(a1);
  a2[1] = (uint64_t)&off_24EDD70F0;
  return sub_2263C2FFC(a2, v3);
}

uint64_t *sub_2263C2DD4(uint64_t *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *a1;
  if (*a1)
  {
    v3 = (unsigned int *)(v2 + 24);
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      __dmb(9u);
      if (*(char *)(v2 + 23) < 0)
        operator delete(*(void **)v2);
      MEMORY[0x2276980E0](v2, 0x1012C405C87E9CELL);
    }
  }
  return a1;
}

uint64_t sub_2263C2E40(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (!result)
    __assert_rtn("operator->", "intrusive_ptr.hpp", 199, "px != 0");
  return result;
}

BOOL sub_2263C2E80(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  BOOL v12;
  BOOL v13;
  _BOOL8 v14;

  v2 = a1[23];
  if ((v2 & 0x80u) == 0)
    v3 = a1[23];
  else
    v3 = *((_QWORD *)a1 + 1);
  v4 = a2[23];
  v5 = (char)v4;
  if ((v4 & 0x80u) != 0)
    v4 = *((_QWORD *)a2 + 1);
  if (v3 != v4)
    return 0;
  if (v5 < 0)
    a2 = *(unsigned __int8 **)a2;
  if ((v2 & 0x80) != 0)
    return memcmp(*(const void **)a1, a2, *((_QWORD *)a1 + 1)) == 0;
  if (!a1[23])
    return 1;
  v6 = v2 - 1;
  do
  {
    v8 = *a1++;
    v7 = v8;
    v10 = *a2++;
    v9 = v10;
    v12 = v6-- != 0;
    v13 = v7 == v9;
    v14 = v7 == v9;
  }
  while (v13 && v12);
  return v14;
}

uint64_t sub_2263C2F20(uint64_t *a1)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v9;

  v2 = atomic_load((unsigned int *)(sub_2263C2E40(a1) + 24));
  if (v2 != 1)
  {
    v3 = operator new();
    v4 = sub_2263C2E40(a1);
    if (*(char *)(v4 + 23) < 0)
    {
      sub_2263AE36C((_BYTE *)v3, *(void **)v4, *(_QWORD *)(v4 + 8));
    }
    else
    {
      v5 = *(_OWORD *)v4;
      *(_QWORD *)(v3 + 16) = *(_QWORD *)(v4 + 16);
      *(_OWORD *)v3 = v5;
    }
    v6 = (unsigned int *)(v3 + 24);
    atomic_store(0, (unsigned int *)(v3 + 24));
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
    v9 = *a1;
    *a1 = v3;
    sub_2263C2DD4(&v9);
  }
  return sub_2263C2E40(a1);
}

void sub_2263C2FD8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2276980E0](v1, 0x1012C405C87E9CELL);
  _Unwind_Resume(a1);
}

uint64_t sub_2263C2FFC(uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;

  result = operator new();
  v5 = result;
  if (*(char *)(a2 + 23) < 0)
  {
    result = (uint64_t)sub_2263AE36C((_BYTE *)result, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)result = *(_OWORD *)a2;
    *(_QWORD *)(result + 16) = *(_QWORD *)(a2 + 16);
  }
  v6 = (unsigned int *)(v5 + 24);
  atomic_store(0, (unsigned int *)(v5 + 24));
  *a1 = v5;
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
  return result;
}

void sub_2263C3084(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2276980E0](v1, 0x1012C405C87E9CELL);
  _Unwind_Resume(a1);
}

_DWORD *sub_2263C30A8(_DWORD *a1, _DWORD *a2)
{
  sub_2263BDDD8(a2, a1);
  return sub_2263BDE28(a2 + 1, a1 + 1);
}

uint64_t sub_2263C30DC(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return sub_2263BDE64(a1);
}

uint64_t sub_2263C3108(_DWORD *a1, _DWORD *a2)
{
  sub_2263BE108(a2, a1);
  sub_2263BE140(a2 + 1, a1 + 1);
  return sub_2263C30DC((uint64_t)a1);
}

uint64_t sub_2263C3144()
{
  return 1;
}

unint64_t sub_2263C314C(unsigned int *a1)
{
  return bswap64(0x9E3779B97F4A7C55* (a1[1]+ ((a1[1] + (unint64_t)*a1 + (a1[1] + (unint64_t)*a1) * (a1[1] + (unint64_t)*a1)) >> 1)));
}

BOOL sub_2263C3178(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

BOOL sub_2263C318C(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

uint64_t sub_2263C31A4()
{
  return 0;
}

uint64_t sub_2263C31B0()
{
  return pxrInternal__aapl__pxrReserved__::operator<<();
}

void *sub_2263C31C0()
{
  return &unk_24EDD6F08;
}

uint64_t sub_2263C31CC()
{
  return 0;
}

uint64_t sub_2263C31D4()
{
  return MEMORY[0x24BEDB7C8];
}

uint64_t sub_2263C31E0()
{
  return 0;
}

uint64_t sub_2263C31E8()
{
  return 0;
}

BOOL sub_2263C31F0(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7SdfPathE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_2263C3220(uint64_t a1, const std::type_info *a2)
{
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24EDD6F08, a2);
}

void *sub_2263C3240()
{
  return &unk_24EDD6F08;
}

_DWORD *sub_2263C3250@<X0>(_DWORD *a1@<X0>, uint64_t a2@<X8>)
{
  _DWORD *v3;

  *(_QWORD *)(a2 + 8) = (char *)&off_24EDD71B8 + 1;
  v3 = sub_2263BDDD8((_DWORD *)a2, a1);
  return sub_2263BDE28(v3 + 1, a1 + 1);
}

uint64_t *sub_2263C3290(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 48);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t *sub_2263C32B8(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_2263C350C(a1);
}

uint64_t sub_2263C32C8(uint64_t *a1)
{
  sub_2263BE7E4(a1);
  return 1;
}

unint64_t sub_2263C32E0(uint64_t *a1)
{
  const char *v1;
  _QWORD v3[2];

  v1 = (const char *)sub_2263BE7E4(a1);
  v3[0] = 0;
  v3[1] = 0;
  sub_2263C3588((pxrInternal__aapl__pxrReserved__::Tf_HashState *)v3, v1, (uint64_t)(v1 + 24));
  return bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v3[0]));
}

uint64_t sub_2263C3334(uint64_t *a1, uint64_t *a2)
{
  unsigned __int8 *v3;
  unsigned __int8 *v4;

  v3 = (unsigned __int8 *)sub_2263BE7E4(a1);
  v4 = (unsigned __int8 *)sub_2263BE7E4(a2);
  return sub_2263C35E0(v3, v4);
}

uint64_t sub_2263C3368(uint64_t *a1, unsigned __int8 *a2)
{
  unsigned __int8 *v3;

  v3 = (unsigned __int8 *)sub_2263BE7E4(a1);
  return sub_2263C35E0(v3, a2);
}

uint64_t sub_2263C3390(uint64_t *a1)
{
  sub_2263BE7E4(a1);
  return 0;
}

uint64_t sub_2263C33AC(uint64_t *a1)
{
  sub_2263BE7E4(a1);
  return pxrInternal__aapl__pxrReserved__::operator<<();
}

std::type_info *sub_2263C33D4(uint64_t *a1)
{
  sub_2263BE7E4(a1);
  return &stru_24EDD6E78;
}

uint64_t sub_2263C33F0(uint64_t *a1)
{
  sub_2263BE7E4(a1);
  return 0;
}

uint64_t sub_2263C3408(uint64_t *a1)
{
  sub_2263BE7E4(a1);
  return MEMORY[0x24BEDB7C8];
}

uint64_t sub_2263C3424(uint64_t *a1)
{
  sub_2263BE7E4(a1);
  return 0;
}

uint64_t sub_2263C343C(uint64_t *a1)
{
  sub_2263BE7E4(a1);
  return 0;
}

BOOL sub_2263C3454(uint64_t *a1, uint64_t a2)
{
  sub_2263BE7E4(a1);
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12SdfAssetPathE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_2263C3494(uint64_t *a1)
{
  const std::type_info *v1;

  sub_2263BE7E4(a1);
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24EDD6E78, v1);
}

std::type_info *sub_2263C34B8(uint64_t *a1)
{
  sub_2263BE7E4(a1);
  return &stru_24EDD6E78;
}

char *sub_2263C34D8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  __int128 *v3;

  v3 = (__int128 *)sub_2263BE7E4(a1);
  *(_QWORD *)(a2 + 8) = &off_24EDD7270;
  return sub_2263C3860((char **)a2, v3);
}

uint64_t *sub_2263C350C(uint64_t *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *a1;
  if (*a1)
  {
    v3 = (unsigned int *)(v2 + 48);
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      __dmb(9u);
      if (*(char *)(v2 + 47) < 0)
        operator delete(*(void **)(v2 + 24));
      if (*(char *)(v2 + 23) < 0)
        operator delete(*(void **)v2);
      MEMORY[0x2276980E0](v2, 0x1012C402F9EB439);
    }
  }
  return a1;
}

uint64_t sub_2263C3588(pxrInternal__aapl__pxrReserved__::Tf_HashState *a1, const char *a2, uint64_t a3)
{
  const char *v5;

  if (a2[23] < 0)
    a2 = *(const char **)a2;
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes(a1, a2);
  if (*(char *)(a3 + 23) >= 0)
    v5 = (const char *)a3;
  else
    v5 = *(const char **)a3;
  return pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes(a1, v5);
}

uint64_t sub_2263C35E0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  unsigned __int8 *v6;
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  const void **v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  int v22;
  BOOL v24;
  uint64_t result;

  v2 = a1[23];
  if ((v2 & 0x80u) == 0)
    v3 = a1[23];
  else
    v3 = *((_QWORD *)a1 + 1);
  v4 = a2[23];
  v5 = (char)v4;
  if ((v4 & 0x80u) != 0)
    v4 = *((_QWORD *)a2 + 1);
  if (v3 != v4)
    return 0;
  v6 = a2;
  if (v5 < 0)
    a2 = *(unsigned __int8 **)a2;
  if ((v2 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a1, a2, *((_QWORD *)a1 + 1)))
      return 0;
  }
  else if (a1[23])
  {
    v8 = a1;
    while (*v8 == *a2)
    {
      ++v8;
      ++a2;
      if (!--v2)
        goto LABEL_16;
    }
    return 0;
  }
LABEL_16:
  v9 = a1[47];
  if ((v9 & 0x80u) == 0)
    v10 = a1[47];
  else
    v10 = *((_QWORD *)a1 + 4);
  v11 = v6[47];
  v12 = (char)v11;
  if ((v11 & 0x80u) != 0)
    v11 = *((_QWORD *)v6 + 4);
  if (v10 != v11)
    return 0;
  v13 = (const void **)(a1 + 24);
  v16 = (unsigned __int8 *)*((_QWORD *)v6 + 3);
  v15 = v6 + 24;
  v14 = v16;
  if (v12 >= 0)
    v17 = v15;
  else
    v17 = v14;
  if ((v9 & 0x80) != 0)
    return memcmp(*v13, v17, *((_QWORD *)a1 + 4)) == 0;
  if (!a1[47])
    return 1;
  v18 = v9 - 1;
  do
  {
    v20 = *(unsigned __int8 *)v13;
    v13 = (const void **)((char *)v13 + 1);
    v19 = v20;
    v22 = *v17++;
    v21 = v22;
    v24 = v18-- != 0;
    result = v19 == v21;
  }
  while (v19 == v21 && v24);
  return result;
}

uint64_t sub_2263C3708(uint64_t *a1)
{
  unsigned int v2;
  char *v3;
  __int128 *v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v8;

  v2 = atomic_load((unsigned int *)(sub_2263BE7E4(a1) + 48));
  if (v2 != 1)
  {
    v3 = (char *)operator new();
    v4 = (__int128 *)sub_2263BE7E4(a1);
    sub_2263C37C4(v3, v4);
    v5 = (unsigned int *)(v3 + 48);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
    v8 = *a1;
    *a1 = (uint64_t)v3;
    sub_2263C350C(&v8);
  }
  return sub_2263BE7E4(a1);
}

void sub_2263C37A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2276980E0](v1, 0x1012C402F9EB439);
  _Unwind_Resume(a1);
}

char *sub_2263C37C4(char *__dst, __int128 *a2)
{
  __int128 v4;
  _BYTE *v5;
  __int128 v6;

  if (*((char *)a2 + 23) < 0)
  {
    sub_2263AE36C(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  v5 = __dst + 24;
  if (*((char *)a2 + 47) < 0)
  {
    sub_2263AE36C(v5, *((void **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v6 = *(__int128 *)((char *)a2 + 24);
    *((_QWORD *)__dst + 5) = *((_QWORD *)a2 + 5);
    *(_OWORD *)v5 = v6;
  }
  atomic_store(0, (unsigned int *)__dst + 12);
  return __dst;
}

void sub_2263C3844(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

char *sub_2263C3860(char **a1, __int128 *a2)
{
  char *v4;
  char *result;
  unsigned int *v6;
  unsigned int v7;

  v4 = (char *)operator new();
  result = sub_2263C37C4(v4, a2);
  *a1 = v4;
  v6 = (unsigned int *)(v4 + 48);
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
  return result;
}

void sub_2263C38C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2276980E0](v1, 0x1012C402F9EB439);
  _Unwind_Resume(a1);
}

_QWORD *sub_2263C38E8(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

_QWORD *sub_2263C38F8(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_2263C3904()
{
  return 1;
}

unint64_t sub_2263C390C(double *a1)
{
  unint64_t v1;

  v1 = 0x9E3779B97F4A7C55 * *(_QWORD *)a1;
  if (*a1 == 0.0)
    v1 = 0;
  return bswap64(v1);
}

BOOL sub_2263C3938(double *a1, double *a2)
{
  return *a1 == *a2;
}

BOOL sub_2263C394C(double *a1, double *a2)
{
  return *a1 == *a2;
}

uint64_t sub_2263C3964()
{
  return 0;
}

uint64_t sub_2263C3970()
{
  return pxrInternal__aapl__pxrReserved__::operator<<();
}

void *sub_2263C3980()
{
  return &unk_24EDD6E98;
}

uint64_t sub_2263C398C()
{
  return 0;
}

uint64_t sub_2263C3994()
{
  return MEMORY[0x24BEDB7C8];
}

uint64_t sub_2263C39A0()
{
  return 0;
}

uint64_t sub_2263C39A8()
{
  return 0;
}

BOOL sub_2263C39B0(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__11SdfTimeCodeE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_2263C39E0(uint64_t a1, const std::type_info *a2)
{
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24EDD6E98, a2);
}

void *sub_2263C3A00()
{
  return &unk_24EDD6E98;
}

_QWORD *sub_2263C3A10@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *result;
  a2[1] = (char *)&off_24EDD7328 + 1;
  return result;
}

_BYTE *sub_2263C3A28(_BYTE *result, _BYTE *a2)
{
  *a2 = *result;
  return result;
}

_BYTE *sub_2263C3A38(_BYTE *result, _BYTE *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_2263C3A44()
{
  return 1;
}

unint64_t sub_2263C3A4C(unsigned __int8 *a1)
{
  return bswap64(0x9E3779B97F4A7C55 * *a1);
}

BOOL sub_2263C3A6C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

BOOL sub_2263C3A80(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t sub_2263C3A98()
{
  return 0;
}

uint64_t sub_2263C3AA8()
{
  return MEMORY[0x24BEDB770];
}

uint64_t sub_2263C3AB4()
{
  return 0;
}

uint64_t sub_2263C3ABC()
{
  return MEMORY[0x24BEDB7C8];
}

uint64_t sub_2263C3AC8()
{
  return 0;
}

uint64_t sub_2263C3AD0()
{
  return 0;
}

BOOL sub_2263C3AD8(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(*(_QWORD *)(MEMORY[0x24BEDB770] + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_2263C3B0C(uint64_t a1, const std::type_info *a2)
{
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x24BEDB770], a2);
}

uint64_t sub_2263C3B2C()
{
  return MEMORY[0x24BEDB770];
}

_BYTE *sub_2263C3B3C@<X0>(_BYTE *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)(a2 + 8) = &unk_24EDD73E3;
  *(_BYTE *)a2 = *result;
  return result;
}

_DWORD *sub_2263C3B58(_DWORD *result, _DWORD *a2)
{
  *a2 = *result;
  return result;
}

_DWORD *sub_2263C3B68(_DWORD *result, _DWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_2263C3B74()
{
  return 1;
}

unint64_t sub_2263C3B7C(int *a1)
{
  return bswap64(0x9E3779B97F4A7C55 * *a1);
}

BOOL sub_2263C3B9C(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

BOOL sub_2263C3BB0(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

uint64_t sub_2263C3BC8()
{
  return 0;
}

uint64_t sub_2263C3BD4()
{
  return std::ostream::operator<<();
}

uint64_t sub_2263C3BE4()
{
  return MEMORY[0x24BEDB798];
}

uint64_t sub_2263C3BF0()
{
  return 0;
}

uint64_t sub_2263C3BF8()
{
  return MEMORY[0x24BEDB7C8];
}

uint64_t sub_2263C3C04()
{
  return 0;
}

uint64_t sub_2263C3C0C()
{
  return 0;
}

BOOL sub_2263C3C14(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(*(_QWORD *)(MEMORY[0x24BEDB798] + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_2263C3C48(uint64_t a1, const std::type_info *a2)
{
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x24BEDB798], a2);
}

uint64_t sub_2263C3C68()
{
  return MEMORY[0x24BEDB798];
}

_DWORD *sub_2263C3C78@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)(a2 + 8) = &unk_24EDD749B;
  *(_DWORD *)a2 = *result;
  return result;
}

_DWORD *sub_2263C3C94(_DWORD *result, _DWORD *a2)
{
  *a2 = *result;
  return result;
}

_DWORD *sub_2263C3CA4(_DWORD *result, _DWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_2263C3CB0()
{
  return 1;
}

unint64_t sub_2263C3CB8(unsigned int *a1)
{
  return bswap64(0x9E3779B97F4A7C55 * *a1);
}

BOOL sub_2263C3CD8(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

BOOL sub_2263C3CEC(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

uint64_t sub_2263C3D04()
{
  return 0;
}

uint64_t sub_2263C3D10()
{
  return std::ostream::operator<<();
}

uint64_t sub_2263C3D20()
{
  return MEMORY[0x24BEDB7A0];
}

uint64_t sub_2263C3D2C()
{
  return 0;
}

uint64_t sub_2263C3D34()
{
  return MEMORY[0x24BEDB7C8];
}

uint64_t sub_2263C3D40()
{
  return 0;
}

uint64_t sub_2263C3D48()
{
  return 0;
}

BOOL sub_2263C3D50(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(*(_QWORD *)(MEMORY[0x24BEDB7A0] + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_2263C3D84(uint64_t a1, const std::type_info *a2)
{
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x24BEDB7A0], a2);
}

uint64_t sub_2263C3DA4()
{
  return MEMORY[0x24BEDB7A0];
}

_DWORD *sub_2263C3DB4@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)(a2 + 8) = &unk_24EDD7553;
  *(_DWORD *)a2 = *result;
  return result;
}

float sub_2263C3DD0(float *a1, _DWORD *a2)
{
  float result;

  result = *a1;
  *a2 = *(_DWORD *)a1;
  return result;
}

float sub_2263C3DE0(float *a1, _DWORD *a2)
{
  float result;

  result = *a1;
  *a2 = *(_DWORD *)a1;
  return result;
}

uint64_t sub_2263C3DEC()
{
  return 1;
}

unint64_t sub_2263C3DF4(float *a1)
{
  float v1;

  v1 = *a1;
  if (*a1 == 0.0)
    v1 = 0.0;
  return bswap64(0x9E3779B97F4A7C55 * LODWORD(v1));
}

BOOL sub_2263C3E24(float *a1, float *a2)
{
  return *a1 == *a2;
}

BOOL sub_2263C3E38(float *a1, float *a2)
{
  return *a1 == *a2;
}

uint64_t sub_2263C3E50()
{
  return 0;
}

uint64_t sub_2263C3E60()
{
  return MEMORY[0x24BEDB788];
}

uint64_t sub_2263C3E6C()
{
  return 0;
}

uint64_t sub_2263C3E74()
{
  return MEMORY[0x24BEDB7C8];
}

uint64_t sub_2263C3E80()
{
  return 0;
}

uint64_t sub_2263C3E88()
{
  return 0;
}

BOOL sub_2263C3E90(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(*(_QWORD *)(MEMORY[0x24BEDB788] + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_2263C3EC4(uint64_t a1, const std::type_info *a2)
{
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x24BEDB788], a2);
}

uint64_t sub_2263C3EE4()
{
  return MEMORY[0x24BEDB788];
}

float sub_2263C3EF4@<S0>(float *a1@<X0>, uint64_t a2@<X8>)
{
  float result;

  *(_QWORD *)(a2 + 8) = &unk_24EDD760B;
  result = *a1;
  *(float *)a2 = *a1;
  return result;
}

_QWORD *sub_2263C3F10(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

_QWORD *sub_2263C3F20(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_2263C3F2C()
{
  return 1;
}

unint64_t sub_2263C3F34(int8x8_t *a1)
{
  int8x8_t v1;
  int64x2_t v2;
  uint64_t v3;

  v1 = vbic_s8(*a1, (int8x8_t)vceqz_f32((float32x2_t)*a1));
  v2.i64[0] = v1.u32[0];
  v2.i64[1] = v1.u32[1];
  v3 = vaddvq_s64(v2);
  return bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * (v1.u32[1]
                                                                      + ((unint64_t)(v3 + v3 * v3) >> 1))));
}

BOOL sub_2263C3F7C(float *a1, float *a2)
{
  return a1[1] == a2[1] && *a1 == *a2;
}

BOOL sub_2263C3F98(float *a1, float *a2)
{
  return a1[1] == a2[1] && *a1 == *a2;
}

uint64_t sub_2263C3FB8()
{
  return 0;
}

uint64_t sub_2263C3FC4()
{
  return pxrInternal__aapl__pxrReserved__::operator<<();
}

void *sub_2263C3FD4()
{
  return &unk_24EDD6EA8;
}

uint64_t sub_2263C3FE0()
{
  return 0;
}

uint64_t sub_2263C3FE8()
{
  return MEMORY[0x24BEDB7C8];
}

uint64_t sub_2263C3FF4()
{
  return 0;
}

uint64_t sub_2263C3FFC()
{
  return 0;
}

BOOL sub_2263C4004(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7GfVec2fE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_2263C4034(uint64_t a1, const std::type_info *a2)
{
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24EDD6EA8, a2);
}

void *sub_2263C4054()
{
  return &unk_24EDD6EA8;
}

_QWORD *sub_2263C4064@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *result;
  a2[1] = (char *)&off_24EDD76C0 + 3;
  return result;
}

uint64_t *sub_2263C407C(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 12);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t sub_2263C40A0(uint64_t *a1)
{
  uint64_t result;
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;

  result = *a1;
  if (result)
  {
    v2 = (unsigned int *)(result + 12);
    do
    {
      v3 = __ldxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
    {
      __dmb(9u);
      JUMPOUT(0x2276980E0);
    }
  }
  return result;
}

_QWORD *sub_2263C40DC(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  *result = 0;
  return result;
}

uint64_t sub_2263C40EC(uint64_t *a1)
{
  sub_2263BF3DC(a1);
  return 1;
}

unint64_t sub_2263C4104(uint64_t *a1)
{
  float *v1;
  _QWORD v3[2];

  v1 = (float *)sub_2263BF3DC(a1);
  v3[0] = 0;
  v3[1] = 0;
  sub_2263B0FF0((uint64_t)v3, v1, v1 + 1, v1 + 2);
  return bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v3[0]));
}

BOOL sub_2263C415C(uint64_t *a1, uint64_t *a2)
{
  float *v3;
  float *v4;

  v3 = (float *)sub_2263BF3DC(a1);
  v4 = (float *)sub_2263BF3DC(a2);
  return *v3 == *v4 && v3[1] == v4[1] && v3[2] == v4[2];
}

BOOL sub_2263C41C0(uint64_t *a1, float *a2)
{
  float *v3;

  v3 = (float *)sub_2263BF3DC(a1);
  return *v3 == *a2 && v3[1] == a2[1] && v3[2] == a2[2];
}

uint64_t sub_2263C421C(uint64_t *a1)
{
  sub_2263BF3DC(a1);
  return 0;
}

uint64_t sub_2263C4238(uint64_t *a1)
{
  sub_2263BF3DC(a1);
  return pxrInternal__aapl__pxrReserved__::operator<<();
}

std::type_info *sub_2263C4260(uint64_t *a1)
{
  sub_2263BF3DC(a1);
  return &stru_24EDD69A8;
}

uint64_t sub_2263C427C(uint64_t *a1)
{
  sub_2263BF3DC(a1);
  return 0;
}

uint64_t sub_2263C4294(uint64_t *a1)
{
  sub_2263BF3DC(a1);
  return MEMORY[0x24BEDB7C8];
}

uint64_t sub_2263C42B0(uint64_t *a1)
{
  sub_2263BF3DC(a1);
  return 0;
}

uint64_t sub_2263C42C8(uint64_t *a1)
{
  sub_2263BF3DC(a1);
  return 0;
}

BOOL sub_2263C42E0(uint64_t *a1, uint64_t a2)
{
  sub_2263BF3DC(a1);
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7GfVec3fE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_2263C4320(uint64_t *a1)
{
  const std::type_info *v1;

  sub_2263BF3DC(a1);
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24EDD69A8, v1);
}

std::type_info *sub_2263C4344(uint64_t *a1)
{
  sub_2263BF3DC(a1);
  return &stru_24EDD69A8;
}

uint64_t sub_2263C4364@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  int v5;
  unsigned int *v6;
  unsigned int v7;

  v3 = sub_2263BF3DC(a1);
  a2[1] = (uint64_t)&off_24EDD7778 + 2;
  result = operator new();
  v5 = *(_DWORD *)(v3 + 8);
  *(_QWORD *)result = *(_QWORD *)v3;
  *(_DWORD *)(result + 8) = v5;
  v6 = (unsigned int *)(result + 12);
  atomic_store(0, (unsigned int *)(result + 12));
  *a2 = result;
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
  return result;
}

uint64_t sub_2263C43DC(uint64_t *a1)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;

  v2 = atomic_load((unsigned int *)(sub_2263BF3DC(a1) + 12));
  if (v2 != 1)
  {
    v3 = operator new();
    v4 = sub_2263BF3DC(a1);
    v5 = *(_DWORD *)(v4 + 8);
    *(_QWORD *)v3 = *(_QWORD *)v4;
    *(_DWORD *)(v3 + 8) = v5;
    v6 = (unsigned int *)(v3 + 12);
    atomic_store(0, (unsigned int *)(v3 + 12));
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
    v8 = *a1;
    *a1 = v3;
    if (v8)
    {
      v9 = (unsigned int *)(v8 + 12);
      do
      {
        v10 = __ldxr(v9);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, v9));
      if (!v11)
      {
        __dmb(9u);
        MEMORY[0x2276980E0]();
      }
    }
  }
  return sub_2263BF3DC(a1);
}

uint64_t *sub_2263C4498(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t sub_2263C44BC(uint64_t *a1)
{
  uint64_t result;
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;

  result = *a1;
  if (result)
  {
    v2 = (unsigned int *)(result + 16);
    do
    {
      v3 = __ldxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
    {
      __dmb(9u);
      JUMPOUT(0x2276980E0);
    }
  }
  return result;
}

_QWORD *sub_2263C44F8(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  *result = 0;
  return result;
}

uint64_t sub_2263C4508(uint64_t *a1)
{
  sub_2263BF544(a1);
  return 1;
}

unint64_t sub_2263C4520(uint64_t *a1)
{
  float *v1;
  _QWORD v3[2];

  v1 = (float *)sub_2263BF544(a1);
  v3[0] = 0;
  v3[1] = 0;
  sub_2263B27E0((uint64_t)v3, v1, v1 + 1, v1 + 2, v1 + 3);
  return bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v3[0]));
}

BOOL sub_2263C457C(uint64_t *a1, uint64_t *a2)
{
  float *v3;
  float *v4;

  v3 = (float *)sub_2263BF544(a1);
  v4 = (float *)sub_2263BF544(a2);
  return *v3 == *v4 && v3[1] == v4[1] && v3[2] == v4[2] && v3[3] == v4[3];
}

BOOL sub_2263C45F0(uint64_t *a1, float *a2)
{
  float *v3;

  v3 = (float *)sub_2263BF544(a1);
  return *v3 == *a2 && v3[1] == a2[1] && v3[2] == a2[2] && v3[3] == a2[3];
}

uint64_t sub_2263C465C(uint64_t *a1)
{
  sub_2263BF544(a1);
  return 0;
}

uint64_t sub_2263C4678(uint64_t *a1)
{
  sub_2263BF544(a1);
  return pxrInternal__aapl__pxrReserved__::operator<<();
}

std::type_info *sub_2263C46A0(uint64_t *a1)
{
  sub_2263BF544(a1);
  return &stru_24EDD6AA0;
}

uint64_t sub_2263C46BC(uint64_t *a1)
{
  sub_2263BF544(a1);
  return 0;
}

uint64_t sub_2263C46D4(uint64_t *a1)
{
  sub_2263BF544(a1);
  return MEMORY[0x24BEDB7C8];
}

uint64_t sub_2263C46F0(uint64_t *a1)
{
  sub_2263BF544(a1);
  return 0;
}

uint64_t sub_2263C4708(uint64_t *a1)
{
  sub_2263BF544(a1);
  return 0;
}

BOOL sub_2263C4720(uint64_t *a1, uint64_t a2)
{
  sub_2263BF544(a1);
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7GfVec4fE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_2263C4760(uint64_t *a1)
{
  const std::type_info *v1;

  sub_2263BF544(a1);
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24EDD6AA0, v1);
}

std::type_info *sub_2263C4784(uint64_t *a1)
{
  sub_2263BF544(a1);
  return &stru_24EDD6AA0;
}

uint64_t sub_2263C47A4@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  _OWORD *v3;
  uint64_t result;
  unsigned int *v5;
  unsigned int v6;

  v3 = (_OWORD *)sub_2263BF544(a1);
  a2[1] = (uint64_t)&off_24EDD7830 + 2;
  result = operator new();
  *(_OWORD *)result = *v3;
  v5 = (unsigned int *)(result + 16);
  atomic_store(0, (unsigned int *)(result + 16));
  *a2 = result;
  do
    v6 = __ldxr(v5);
  while (__stxr(v6 + 1, v5));
  return result;
}

uint64_t sub_2263C4814(uint64_t *a1)
{
  unsigned int v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = atomic_load((unsigned int *)(sub_2263BF544(a1) + 16));
  if (v2 != 1)
  {
    v3 = operator new();
    *(_OWORD *)v3 = *(_OWORD *)sub_2263BF544(a1);
    v4 = (unsigned int *)(v3 + 16);
    atomic_store(0, (unsigned int *)(v3 + 16));
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
    v6 = *a1;
    *a1 = v3;
    if (v6)
    {
      v7 = (unsigned int *)(v6 + 16);
      do
      {
        v8 = __ldxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
      {
        __dmb(9u);
        MEMORY[0x2276980E0]();
      }
    }
  }
  return sub_2263BF544(a1);
}

double sub_2263C48C8(double *a1, _QWORD *a2)
{
  double result;

  result = *a1;
  *a2 = *(_QWORD *)a1;
  return result;
}

double sub_2263C48D8(double *a1, _QWORD *a2)
{
  double result;

  result = *a1;
  *a2 = *(_QWORD *)a1;
  return result;
}

uint64_t sub_2263C48E4()
{
  return 1;
}

unint64_t sub_2263C48EC(double *a1)
{
  double v1;

  v1 = *a1;
  if (*a1 == 0.0)
    v1 = 0.0;
  return bswap64(0x9E3779B97F4A7C55 * *(_QWORD *)&v1);
}

BOOL sub_2263C491C(double *a1, double *a2)
{
  return *a1 == *a2;
}

BOOL sub_2263C4930(double *a1, double *a2)
{
  return *a1 == *a2;
}

uint64_t sub_2263C4948()
{
  return 0;
}

uint64_t sub_2263C4958()
{
  return MEMORY[0x24BEDB780];
}

uint64_t sub_2263C4964()
{
  return 0;
}

uint64_t sub_2263C496C()
{
  return MEMORY[0x24BEDB7C8];
}

uint64_t sub_2263C4978()
{
  return 0;
}

uint64_t sub_2263C4980()
{
  return 0;
}

BOOL sub_2263C4988(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(*(_QWORD *)(MEMORY[0x24BEDB780] + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_2263C49BC(uint64_t a1, const std::type_info *a2)
{
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x24BEDB780], a2);
}

uint64_t sub_2263C49DC()
{
  return MEMORY[0x24BEDB780];
}

double sub_2263C49EC@<D0>(double *a1@<X0>, _QWORD *a2@<X8>)
{
  double result;

  a2[1] = &unk_24EDD78EB;
  result = *a1;
  *a2 = *(_QWORD *)a1;
  return result;
}

uint64_t *sub_2263C4A08(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t sub_2263C4A2C(uint64_t *a1)
{
  uint64_t result;
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;

  result = *a1;
  if (result)
  {
    v2 = (unsigned int *)(result + 16);
    do
    {
      v3 = __ldxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
    {
      __dmb(9u);
      JUMPOUT(0x2276980E0);
    }
  }
  return result;
}

_QWORD *sub_2263C4A68(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  *result = 0;
  return result;
}

uint64_t sub_2263C4A78(uint64_t *a1)
{
  sub_2263BF9A8(a1);
  return 1;
}

unint64_t sub_2263C4A90(uint64_t *a1)
{
  int8x16_t *v1;
  int64x2_t v2;

  v1 = (int8x16_t *)sub_2263BF9A8(a1);
  v2 = (int64x2_t)vbicq_s8(*v1, (int8x16_t)vceqzq_f64(*(float64x2_t *)v1));
  v2.i64[0] = vaddvq_s64(v2);
  return bswap64(0x9E3779B97F4A7C55* bswap64(0x9E3779B97F4A7C55 * (v2.i64[1] + ((unint64_t)(v2.i64[0] + v2.i64[0] * v2.i64[0]) >> 1))));
}

BOOL sub_2263C4AE4(uint64_t *a1, uint64_t *a2)
{
  double *v3;
  double *v4;

  v3 = (double *)sub_2263BF9A8(a1);
  v4 = (double *)sub_2263BF9A8(a2);
  return v3[1] == v4[1] && *v3 == *v4;
}

BOOL sub_2263C4B28(uint64_t *a1, double *a2)
{
  double *v3;

  v3 = (double *)sub_2263BF9A8(a1);
  return v3[1] == a2[1] && *v3 == *a2;
}

uint64_t sub_2263C4B64(uint64_t *a1)
{
  sub_2263BF9A8(a1);
  return 0;
}

uint64_t sub_2263C4B80(uint64_t *a1)
{
  sub_2263BF9A8(a1);
  return pxrInternal__aapl__pxrReserved__::operator<<();
}

std::type_info *sub_2263C4BA8(uint64_t *a1)
{
  sub_2263BF9A8(a1);
  return &stru_24EDD6EC8;
}

uint64_t sub_2263C4BC4(uint64_t *a1)
{
  sub_2263BF9A8(a1);
  return 0;
}

uint64_t sub_2263C4BDC(uint64_t *a1)
{
  sub_2263BF9A8(a1);
  return MEMORY[0x24BEDB7C8];
}

uint64_t sub_2263C4BF8(uint64_t *a1)
{
  sub_2263BF9A8(a1);
  return 0;
}

uint64_t sub_2263C4C10(uint64_t *a1)
{
  sub_2263BF9A8(a1);
  return 0;
}

BOOL sub_2263C4C28(uint64_t *a1, uint64_t a2)
{
  sub_2263BF9A8(a1);
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7GfVec2dE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_2263C4C68(uint64_t *a1)
{
  const std::type_info *v1;

  sub_2263BF9A8(a1);
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24EDD6EC8, v1);
}

std::type_info *sub_2263C4C8C(uint64_t *a1)
{
  sub_2263BF9A8(a1);
  return &stru_24EDD6EC8;
}

uint64_t sub_2263C4CAC@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  _OWORD *v3;
  uint64_t result;
  unsigned int *v5;
  unsigned int v6;

  v3 = (_OWORD *)sub_2263BF9A8(a1);
  a2[1] = (uint64_t)&off_24EDD79A0 + 2;
  result = operator new();
  *(_OWORD *)result = *v3;
  v5 = (unsigned int *)(result + 16);
  atomic_store(0, (unsigned int *)(result + 16));
  *a2 = result;
  do
    v6 = __ldxr(v5);
  while (__stxr(v6 + 1, v5));
  return result;
}

uint64_t sub_2263C4D1C(uint64_t result, double *a2, double *a3)
{
  double v3;
  double v4;
  double v5;

  v3 = *a2;
  if (*a2 == 0.0)
    v3 = 0.0;
  v4 = v3;
  if (*(_BYTE *)(result + 8))
    *(_QWORD *)&v4 = *(_QWORD *)&v3
                   + ((*(_QWORD *)result
                     + *(_QWORD *)&v3
                     + (*(_QWORD *)result + *(_QWORD *)&v3) * (*(_QWORD *)result + *(_QWORD *)&v3)) >> 1);
  else
    *(_BYTE *)(result + 8) = 1;
  *(double *)result = v4;
  v5 = *a3;
  if (*a3 == 0.0)
    v5 = 0.0;
  *(_QWORD *)result = *(_QWORD *)&v5
                    + ((*(_QWORD *)&v4
                      + *(_QWORD *)&v5
                      + (*(_QWORD *)&v4 + *(_QWORD *)&v5) * (*(_QWORD *)&v4 + *(_QWORD *)&v5)) >> 1);
  return result;
}

uint64_t sub_2263C4D7C(uint64_t *a1)
{
  unsigned int v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = atomic_load((unsigned int *)(sub_2263BF9A8(a1) + 16));
  if (v2 != 1)
  {
    v3 = operator new();
    *(_OWORD *)v3 = *(_OWORD *)sub_2263BF9A8(a1);
    v4 = (unsigned int *)(v3 + 16);
    atomic_store(0, (unsigned int *)(v3 + 16));
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
    v6 = *a1;
    *a1 = v3;
    if (v6)
    {
      v7 = (unsigned int *)(v6 + 16);
      do
      {
        v8 = __ldxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
      {
        __dmb(9u);
        MEMORY[0x2276980E0]();
      }
    }
  }
  return sub_2263BF9A8(a1);
}

uint64_t *sub_2263C4E30(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 24);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t sub_2263C4E54(uint64_t *a1)
{
  uint64_t result;
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;

  result = *a1;
  if (result)
  {
    v2 = (unsigned int *)(result + 24);
    do
    {
      v3 = __ldxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
    {
      __dmb(9u);
      JUMPOUT(0x2276980E0);
    }
  }
  return result;
}

_QWORD *sub_2263C4E90(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  *result = 0;
  return result;
}

uint64_t sub_2263C4EA0(uint64_t *a1)
{
  sub_2263BFB10(a1);
  return 1;
}

unint64_t sub_2263C4EB8(uint64_t *a1)
{
  double *v1;
  _QWORD v3[2];

  v1 = (double *)sub_2263BFB10(a1);
  v3[0] = 0;
  v3[1] = 0;
  sub_2263C5190((uint64_t)v3, v1, v1 + 1, v1 + 2);
  return bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v3[0]));
}

BOOL sub_2263C4F10(uint64_t *a1, uint64_t *a2)
{
  double *v3;
  double *v4;

  v3 = (double *)sub_2263BFB10(a1);
  v4 = (double *)sub_2263BFB10(a2);
  return *v3 == *v4 && v3[1] == v4[1] && v3[2] == v4[2];
}

BOOL sub_2263C4F74(uint64_t *a1, double *a2)
{
  double *v3;

  v3 = (double *)sub_2263BFB10(a1);
  return *v3 == *a2 && v3[1] == a2[1] && v3[2] == a2[2];
}

uint64_t sub_2263C4FD0(uint64_t *a1)
{
  sub_2263BFB10(a1);
  return 0;
}

uint64_t sub_2263C4FEC(uint64_t *a1)
{
  sub_2263BFB10(a1);
  return pxrInternal__aapl__pxrReserved__::operator<<();
}

std::type_info *sub_2263C5014(uint64_t *a1)
{
  sub_2263BFB10(a1);
  return &stru_24EDD6ED8;
}

uint64_t sub_2263C5030(uint64_t *a1)
{
  sub_2263BFB10(a1);
  return 0;
}

uint64_t sub_2263C5048(uint64_t *a1)
{
  sub_2263BFB10(a1);
  return MEMORY[0x24BEDB7C8];
}

uint64_t sub_2263C5064(uint64_t *a1)
{
  sub_2263BFB10(a1);
  return 0;
}

uint64_t sub_2263C507C(uint64_t *a1)
{
  sub_2263BFB10(a1);
  return 0;
}

BOOL sub_2263C5094(uint64_t *a1, uint64_t a2)
{
  sub_2263BFB10(a1);
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7GfVec3dE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_2263C50D4(uint64_t *a1)
{
  const std::type_info *v1;

  sub_2263BFB10(a1);
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24EDD6ED8, v1);
}

std::type_info *sub_2263C50F8(uint64_t *a1)
{
  sub_2263BFB10(a1);
  return &stru_24EDD6ED8;
}

uint64_t sub_2263C5118@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;

  v3 = sub_2263BFB10(a1);
  a2[1] = (uint64_t)&off_24EDD7A58 + 2;
  result = operator new();
  v5 = *(_QWORD *)(v3 + 16);
  *(_OWORD *)result = *(_OWORD *)v3;
  *(_QWORD *)(result + 16) = v5;
  v6 = (unsigned int *)(result + 24);
  atomic_store(0, (unsigned int *)(result + 24));
  *a2 = result;
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
  return result;
}

uint64_t sub_2263C5190(uint64_t a1, double *a2, double *a3, double *a4)
{
  double v4;
  double v5;

  v4 = *a2;
  if (*a2 == 0.0)
    v4 = 0.0;
  v5 = v4;
  if (*(_BYTE *)(a1 + 8))
    *(_QWORD *)&v5 = *(_QWORD *)&v4
                   + ((*(_QWORD *)a1
                     + *(_QWORD *)&v4
                     + (*(_QWORD *)a1 + *(_QWORD *)&v4) * (*(_QWORD *)a1 + *(_QWORD *)&v4)) >> 1);
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(double *)a1 = v5;
  return sub_2263C4D1C(a1, a3, a4);
}

uint64_t sub_2263C51D8(uint64_t *a1)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;

  v2 = atomic_load((unsigned int *)(sub_2263BFB10(a1) + 24));
  if (v2 != 1)
  {
    v3 = operator new();
    v4 = sub_2263BFB10(a1);
    v5 = *(_QWORD *)(v4 + 16);
    *(_OWORD *)v3 = *(_OWORD *)v4;
    *(_QWORD *)(v3 + 16) = v5;
    v6 = (unsigned int *)(v3 + 24);
    atomic_store(0, (unsigned int *)(v3 + 24));
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
    v8 = *a1;
    *a1 = v3;
    if (v8)
    {
      v9 = (unsigned int *)(v8 + 24);
      do
      {
        v10 = __ldxr(v9);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, v9));
      if (!v11)
      {
        __dmb(9u);
        MEMORY[0x2276980E0]();
      }
    }
  }
  return sub_2263BFB10(a1);
}

uint64_t *sub_2263C5294(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 32);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t sub_2263C52B8(uint64_t *a1)
{
  uint64_t result;
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;

  result = *a1;
  if (result)
  {
    v2 = (unsigned int *)(result + 32);
    do
    {
      v3 = __ldxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
    {
      __dmb(9u);
      JUMPOUT(0x2276980E0);
    }
  }
  return result;
}

_QWORD *sub_2263C52F4(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  *result = 0;
  return result;
}

uint64_t sub_2263C5304(uint64_t *a1)
{
  sub_2263BFC78(a1);
  return 1;
}

unint64_t sub_2263C531C(uint64_t *a1)
{
  double *v1;
  _QWORD v3[2];

  v1 = (double *)sub_2263BFC78(a1);
  v3[0] = 0;
  v3[1] = 0;
  sub_2263C5610((uint64_t)v3, v1, v1 + 1, v1 + 2, v1 + 3);
  return bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v3[0]));
}

BOOL sub_2263C5378(uint64_t *a1, uint64_t *a2)
{
  double *v3;
  double *v4;

  v3 = (double *)sub_2263BFC78(a1);
  v4 = (double *)sub_2263BFC78(a2);
  return *v3 == *v4 && v3[1] == v4[1] && v3[2] == v4[2] && v3[3] == v4[3];
}

BOOL sub_2263C53EC(uint64_t *a1, double *a2)
{
  double *v3;

  v3 = (double *)sub_2263BFC78(a1);
  return *v3 == *a2 && v3[1] == a2[1] && v3[2] == a2[2] && v3[3] == a2[3];
}

uint64_t sub_2263C5458(uint64_t *a1)
{
  sub_2263BFC78(a1);
  return 0;
}

uint64_t sub_2263C5474(uint64_t *a1)
{
  sub_2263BFC78(a1);
  return pxrInternal__aapl__pxrReserved__::operator<<();
}

std::type_info *sub_2263C549C(uint64_t *a1)
{
  sub_2263BFC78(a1);
  return &stru_24EDD6EE8;
}

uint64_t sub_2263C54B8(uint64_t *a1)
{
  sub_2263BFC78(a1);
  return 0;
}

uint64_t sub_2263C54D0(uint64_t *a1)
{
  sub_2263BFC78(a1);
  return MEMORY[0x24BEDB7C8];
}

uint64_t sub_2263C54EC(uint64_t *a1)
{
  sub_2263BFC78(a1);
  return 0;
}

uint64_t sub_2263C5504(uint64_t *a1)
{
  sub_2263BFC78(a1);
  return 0;
}

BOOL sub_2263C551C(uint64_t *a1, uint64_t a2)
{
  sub_2263BFC78(a1);
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7GfVec4dE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_2263C555C(uint64_t *a1)
{
  const std::type_info *v1;

  sub_2263BFC78(a1);
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24EDD6EE8, v1);
}

std::type_info *sub_2263C5580(uint64_t *a1)
{
  sub_2263BFC78(a1);
  return &stru_24EDD6EE8;
}

uint64_t sub_2263C55A0@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  _OWORD *v3;
  uint64_t result;
  __int128 v5;
  unsigned int *v6;
  unsigned int v7;

  v3 = (_OWORD *)sub_2263BFC78(a1);
  a2[1] = (uint64_t)&off_24EDD7B10 + 2;
  result = operator new();
  v5 = v3[1];
  *(_OWORD *)result = *v3;
  *(_OWORD *)(result + 16) = v5;
  v6 = (unsigned int *)(result + 32);
  atomic_store(0, (unsigned int *)(result + 32));
  *a2 = result;
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
  return result;
}

uint64_t sub_2263C5610(uint64_t a1, double *a2, double *a3, double *a4, double *a5)
{
  double v5;
  double v6;

  v5 = *a2;
  if (*a2 == 0.0)
    v5 = 0.0;
  v6 = v5;
  if (*(_BYTE *)(a1 + 8))
    *(_QWORD *)&v6 = *(_QWORD *)&v5
                   + ((*(_QWORD *)a1
                     + *(_QWORD *)&v5
                     + (*(_QWORD *)a1 + *(_QWORD *)&v5) * (*(_QWORD *)a1 + *(_QWORD *)&v5)) >> 1);
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(double *)a1 = v6;
  return sub_2263C5190(a1, a3, a4, a5);
}

uint64_t sub_2263C565C(uint64_t *a1)
{
  unsigned int v2;
  uint64_t v3;
  _OWORD *v4;
  __int128 v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;

  v2 = atomic_load((unsigned int *)(sub_2263BFC78(a1) + 32));
  if (v2 != 1)
  {
    v3 = operator new();
    v4 = (_OWORD *)sub_2263BFC78(a1);
    v5 = v4[1];
    *(_OWORD *)v3 = *v4;
    *(_OWORD *)(v3 + 16) = v5;
    v6 = (unsigned int *)(v3 + 32);
    atomic_store(0, (unsigned int *)(v3 + 32));
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
    v8 = *a1;
    *a1 = v3;
    if (v8)
    {
      v9 = (unsigned int *)(v8 + 32);
      do
      {
        v10 = __ldxr(v9);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, v9));
      if (!v11)
      {
        __dmb(9u);
        MEMORY[0x2276980E0]();
      }
    }
  }
  return sub_2263BFC78(a1);
}

uint64_t *sub_2263C5710(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 128);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t sub_2263C5734(uint64_t *a1)
{
  uint64_t result;
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;

  result = *a1;
  if (result)
  {
    v2 = (unsigned int *)(result + 128);
    do
    {
      v3 = __ldxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
    {
      __dmb(9u);
      JUMPOUT(0x2276980E0);
    }
  }
  return result;
}

_QWORD *sub_2263C5770(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  *result = 0;
  return result;
}

uint64_t sub_2263C5780(uint64_t *a1)
{
  sub_2263BF6AC(a1);
  return 1;
}

unint64_t sub_2263C5798(uint64_t *a1)
{
  double *v1;
  char v3;

  v1 = (double *)sub_2263BF6AC(a1);
  return sub_2263C59EC((uint64_t)&v3, v1);
}

uint64_t sub_2263C57C0(uint64_t *a1, uint64_t *a2)
{
  sub_2263BF6AC(a1);
  sub_2263BF6AC(a2);
  return pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator==();
}

uint64_t sub_2263C57F4(uint64_t *a1)
{
  sub_2263BF6AC(a1);
  return pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator==();
}

uint64_t sub_2263C581C(uint64_t *a1)
{
  sub_2263BF6AC(a1);
  return 0;
}

uint64_t sub_2263C5838(uint64_t *a1)
{
  sub_2263BF6AC(a1);
  return pxrInternal__aapl__pxrReserved__::operator<<();
}

std::type_info *sub_2263C5860(uint64_t *a1)
{
  sub_2263BF6AC(a1);
  return &stru_24EDD6EB8;
}

uint64_t sub_2263C587C(uint64_t *a1)
{
  sub_2263BF6AC(a1);
  return 0;
}

uint64_t sub_2263C5894(uint64_t *a1)
{
  sub_2263BF6AC(a1);
  return MEMORY[0x24BEDB7C8];
}

uint64_t sub_2263C58B0(uint64_t *a1)
{
  sub_2263BF6AC(a1);
  return 0;
}

uint64_t sub_2263C58C8(uint64_t *a1)
{
  sub_2263BF6AC(a1);
  return 0;
}

BOOL sub_2263C58E0(uint64_t *a1, uint64_t a2)
{
  sub_2263BF6AC(a1);
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__10GfMatrix4dE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_2263C5920(uint64_t *a1)
{
  const std::type_info *v1;

  sub_2263BF6AC(a1);
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24EDD6EB8, v1);
}

std::type_info *sub_2263C5944(uint64_t *a1)
{
  sub_2263BF6AC(a1);
  return &stru_24EDD6EB8;
}

uint64_t sub_2263C5964@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  __int128 *v3;
  uint64_t result;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  unsigned int *v11;
  unsigned int v12;

  v3 = (__int128 *)sub_2263BF6AC(a1);
  a2[1] = (uint64_t)&off_24EDD7BC8 + 2;
  result = operator new();
  v5 = v3[3];
  v7 = *v3;
  v6 = v3[1];
  *(_OWORD *)(result + 32) = v3[2];
  *(_OWORD *)(result + 48) = v5;
  *(_OWORD *)result = v7;
  *(_OWORD *)(result + 16) = v6;
  v8 = v3[7];
  v10 = v3[4];
  v9 = v3[5];
  *(_OWORD *)(result + 96) = v3[6];
  *(_OWORD *)(result + 112) = v8;
  *(_OWORD *)(result + 64) = v10;
  *(_OWORD *)(result + 80) = v9;
  v11 = (unsigned int *)(result + 128);
  atomic_store(0, (unsigned int *)(result + 128));
  *a2 = result;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
  return result;
}

unint64_t sub_2263C59EC(uint64_t a1, double *a2)
{
  _QWORD v3[2];

  v3[0] = 0;
  v3[1] = 0;
  sub_2263C5A84((uint64_t)v3, a2, a2 + 1, a2 + 2, a2 + 3, a2 + 4, a2 + 5, a2 + 6, a2 + 7, a2 + 8, a2 + 9, a2 + 10, a2 + 11, a2 + 12, a2 + 13, a2 + 14, a2 + 15);
  return bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v3[0]));
}

uint64_t sub_2263C5A84(uint64_t a1, double *a2, double *a3, double *a4, double *a5, double *a6, double *a7, double *a8, double *a9, double *a10, double *a11, double *a12, double *a13, double *a14, double *a15, double *a16, double *a17)
{
  double v17;
  double v18;

  v17 = *a2;
  if (*a2 == 0.0)
    v17 = 0.0;
  v18 = v17;
  if (*(_BYTE *)(a1 + 8))
    *(_QWORD *)&v18 = *(_QWORD *)&v17
                    + ((*(_QWORD *)a1
                      + *(_QWORD *)&v17
                      + (*(_QWORD *)a1 + *(_QWORD *)&v17) * (*(_QWORD *)a1 + *(_QWORD *)&v17)) >> 1);
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(double *)a1 = v18;
  return sub_2263C5B04(a1, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17);
}

uint64_t sub_2263C5B04(uint64_t a1, double *a2, double *a3, double *a4, double *a5, double *a6, double *a7, double *a8, double *a9, double *a10, double *a11, double *a12, double *a13, double *a14, double *a15, double *a16)
{
  double v16;
  double v17;

  v16 = *a2;
  if (*a2 == 0.0)
    v16 = 0.0;
  v17 = v16;
  if (*(_BYTE *)(a1 + 8))
    *(_QWORD *)&v17 = *(_QWORD *)&v16
                    + ((*(_QWORD *)a1
                      + *(_QWORD *)&v16
                      + (*(_QWORD *)a1 + *(_QWORD *)&v16) * (*(_QWORD *)a1 + *(_QWORD *)&v16)) >> 1);
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(double *)a1 = v17;
  return sub_2263C5B80(a1, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16);
}

uint64_t sub_2263C5B80(uint64_t a1, double *a2, double *a3, double *a4, double *a5, double *a6, double *a7, double *a8, double *a9, double *a10, double *a11, double *a12, double *a13, double *a14, double *a15)
{
  double v15;
  double v16;

  v15 = *a2;
  if (*a2 == 0.0)
    v15 = 0.0;
  v16 = v15;
  if (*(_BYTE *)(a1 + 8))
    *(_QWORD *)&v16 = *(_QWORD *)&v15
                    + ((*(_QWORD *)a1
                      + *(_QWORD *)&v15
                      + (*(_QWORD *)a1 + *(_QWORD *)&v15) * (*(_QWORD *)a1 + *(_QWORD *)&v15)) >> 1);
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(double *)a1 = v16;
  return sub_2263C5BF8(a1, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15);
}

uint64_t sub_2263C5BF8(uint64_t a1, double *a2, double *a3, double *a4, double *a5, double *a6, double *a7, double *a8, double *a9, double *a10, double *a11, double *a12, double *a13, double *a14)
{
  double v14;
  double v15;

  v14 = *a2;
  if (*a2 == 0.0)
    v14 = 0.0;
  v15 = v14;
  if (*(_BYTE *)(a1 + 8))
    *(_QWORD *)&v15 = *(_QWORD *)&v14
                    + ((*(_QWORD *)a1
                      + *(_QWORD *)&v14
                      + (*(_QWORD *)a1 + *(_QWORD *)&v14) * (*(_QWORD *)a1 + *(_QWORD *)&v14)) >> 1);
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(double *)a1 = v15;
  return sub_2263C5C6C(a1, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14);
}

uint64_t sub_2263C5C6C(uint64_t a1, double *a2, double *a3, double *a4, double *a5, double *a6, double *a7, double *a8, double *a9, double *a10, double *a11, double *a12, double *a13)
{
  double v13;
  double v14;

  v13 = *a2;
  if (*a2 == 0.0)
    v13 = 0.0;
  v14 = v13;
  if (*(_BYTE *)(a1 + 8))
    *(_QWORD *)&v14 = *(_QWORD *)&v13
                    + ((*(_QWORD *)a1
                      + *(_QWORD *)&v13
                      + (*(_QWORD *)a1 + *(_QWORD *)&v13) * (*(_QWORD *)a1 + *(_QWORD *)&v13)) >> 1);
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(double *)a1 = v14;
  return sub_2263C5CDC(a1, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
}

uint64_t sub_2263C5CDC(uint64_t a1, double *a2, double *a3, double *a4, double *a5, double *a6, double *a7, double *a8, double *a9, double *a10, double *a11, double *a12)
{
  double v12;
  double v13;

  v12 = *a2;
  if (*a2 == 0.0)
    v12 = 0.0;
  v13 = v12;
  if (*(_BYTE *)(a1 + 8))
    *(_QWORD *)&v13 = *(_QWORD *)&v12
                    + ((*(_QWORD *)a1
                      + *(_QWORD *)&v12
                      + (*(_QWORD *)a1 + *(_QWORD *)&v12) * (*(_QWORD *)a1 + *(_QWORD *)&v12)) >> 1);
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(double *)a1 = v13;
  return sub_2263C5D48(a1, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
}

uint64_t sub_2263C5D48(uint64_t a1, double *a2, double *a3, double *a4, double *a5, double *a6, double *a7, double *a8, double *a9, double *a10, double *a11)
{
  double v11;
  double v12;

  v11 = *a2;
  if (*a2 == 0.0)
    v11 = 0.0;
  v12 = v11;
  if (*(_BYTE *)(a1 + 8))
    *(_QWORD *)&v12 = *(_QWORD *)&v11
                    + ((*(_QWORD *)a1
                      + *(_QWORD *)&v11
                      + (*(_QWORD *)a1 + *(_QWORD *)&v11) * (*(_QWORD *)a1 + *(_QWORD *)&v11)) >> 1);
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(double *)a1 = v12;
  return sub_2263C5DB0(a1, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t sub_2263C5DB0(uint64_t a1, double *a2, double *a3, double *a4, double *a5, double *a6, double *a7, double *a8, double *a9, double *a10)
{
  double v10;
  double v11;

  v10 = *a2;
  if (*a2 == 0.0)
    v10 = 0.0;
  v11 = v10;
  if (*(_BYTE *)(a1 + 8))
    *(_QWORD *)&v11 = *(_QWORD *)&v10
                    + ((*(_QWORD *)a1
                      + *(_QWORD *)&v10
                      + (*(_QWORD *)a1 + *(_QWORD *)&v10) * (*(_QWORD *)a1 + *(_QWORD *)&v10)) >> 1);
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(double *)a1 = v11;
  return sub_2263C5E14(a1, a3, a4, a5, a6, a7, a8, a9, a10);
}

uint64_t sub_2263C5E14(uint64_t a1, double *a2, double *a3, double *a4, double *a5, double *a6, double *a7, double *a8, double *a9)
{
  double v9;
  double v10;

  v9 = *a2;
  if (*a2 == 0.0)
    v9 = 0.0;
  v10 = v9;
  if (*(_BYTE *)(a1 + 8))
    *(_QWORD *)&v10 = *(_QWORD *)&v9
                    + ((*(_QWORD *)a1
                      + *(_QWORD *)&v9
                      + (*(_QWORD *)a1 + *(_QWORD *)&v9) * (*(_QWORD *)a1 + *(_QWORD *)&v9)) >> 1);
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(double *)a1 = v10;
  return sub_2263C5E74(a1, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t sub_2263C5E74(uint64_t a1, double *a2, double *a3, double *a4, double *a5, double *a6, double *a7, double *a8)
{
  double v8;
  double v9;

  v8 = *a2;
  if (*a2 == 0.0)
    v8 = 0.0;
  v9 = v8;
  if (*(_BYTE *)(a1 + 8))
    *(_QWORD *)&v9 = *(_QWORD *)&v8
                   + ((*(_QWORD *)a1
                     + *(_QWORD *)&v8
                     + (*(_QWORD *)a1 + *(_QWORD *)&v8) * (*(_QWORD *)a1 + *(_QWORD *)&v8)) >> 1);
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(double *)a1 = v9;
  return sub_2263C5ECC(a1, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_2263C5ECC(uint64_t a1, double *a2, double *a3, double *a4, double *a5, double *a6, double *a7)
{
  double v7;
  double v8;

  v7 = *a2;
  if (*a2 == 0.0)
    v7 = 0.0;
  v8 = v7;
  if (*(_BYTE *)(a1 + 8))
    *(_QWORD *)&v8 = *(_QWORD *)&v7
                   + ((*(_QWORD *)a1
                     + *(_QWORD *)&v7
                     + (*(_QWORD *)a1 + *(_QWORD *)&v7) * (*(_QWORD *)a1 + *(_QWORD *)&v7)) >> 1);
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(double *)a1 = v8;
  return sub_2263C5F20(a1, a3, a4, a5, a6, a7);
}

uint64_t sub_2263C5F20(uint64_t a1, double *a2, double *a3, double *a4, double *a5, double *a6)
{
  double v6;
  double v7;

  v6 = *a2;
  if (*a2 == 0.0)
    v6 = 0.0;
  v7 = v6;
  if (*(_BYTE *)(a1 + 8))
    *(_QWORD *)&v7 = *(_QWORD *)&v6
                   + ((*(_QWORD *)a1
                     + *(_QWORD *)&v6
                     + (*(_QWORD *)a1 + *(_QWORD *)&v6) * (*(_QWORD *)a1 + *(_QWORD *)&v6)) >> 1);
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(double *)a1 = v7;
  return sub_2263C5610(a1, a3, a4, a5, a6);
}

uint64_t sub_2263C5F70(uint64_t *a1)
{
  unsigned int v2;
  uint64_t v3;
  __int128 *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;

  v2 = atomic_load((unsigned int *)(sub_2263BF6AC(a1) + 128));
  if (v2 != 1)
  {
    v3 = operator new();
    v4 = (__int128 *)sub_2263BF6AC(a1);
    v5 = v4[3];
    v7 = *v4;
    v6 = v4[1];
    *(_OWORD *)(v3 + 32) = v4[2];
    *(_OWORD *)(v3 + 48) = v5;
    *(_OWORD *)v3 = v7;
    *(_OWORD *)(v3 + 16) = v6;
    v8 = v4[7];
    v10 = v4[4];
    v9 = v4[5];
    *(_OWORD *)(v3 + 96) = v4[6];
    *(_OWORD *)(v3 + 112) = v8;
    *(_OWORD *)(v3 + 64) = v10;
    *(_OWORD *)(v3 + 80) = v9;
    v11 = (unsigned int *)(v3 + 128);
    atomic_store(0, (unsigned int *)(v3 + 128));
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
    v13 = *a1;
    *a1 = v3;
    if (v13)
    {
      v14 = (unsigned int *)(v13 + 128);
      do
      {
        v15 = __ldxr(v14);
        v16 = v15 - 1;
      }
      while (__stlxr(v16, v14));
      if (!v16)
      {
        __dmb(9u);
        MEMORY[0x2276980E0]();
      }
    }
  }
  return sub_2263BF6AC(a1);
}

uint64_t *sub_2263C603C(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t sub_2263C6060(uint64_t *a1)
{
  uint64_t result;
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;

  result = *a1;
  if (result)
  {
    v2 = (unsigned int *)(result + 16);
    do
    {
      v3 = __ldxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
    {
      __dmb(9u);
      JUMPOUT(0x2276980E0);
    }
  }
  return result;
}

_QWORD *sub_2263C609C(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  *result = 0;
  return result;
}

uint64_t sub_2263C60AC(uint64_t *a1)
{
  sub_2263BFDE0(a1);
  return 1;
}

unint64_t sub_2263C60C4(uint64_t *a1)
{
  uint64_t v1;
  int v3;
  _QWORD v4[2];

  v1 = sub_2263BFDE0(a1);
  v3 = *(_DWORD *)(v1 + 12);
  v4[0] = 0;
  v4[1] = 0;
  sub_2263C63B4((uint64_t)v4, (float *)&v3, (float *)v1);
  return bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v4[0]));
}

BOOL sub_2263C6120(uint64_t *a1, uint64_t *a2)
{
  float *v3;
  float *v4;

  v3 = (float *)sub_2263BFDE0(a1);
  v4 = (float *)sub_2263BFDE0(a2);
  return v3[3] == v4[3] && *v3 == *v4 && v3[1] == v4[1] && v3[2] == v4[2];
}

BOOL sub_2263C6194(uint64_t *a1, float *a2)
{
  float *v3;

  v3 = (float *)sub_2263BFDE0(a1);
  return v3[3] == a2[3] && *v3 == *a2 && v3[1] == a2[1] && v3[2] == a2[2];
}

uint64_t sub_2263C6200(uint64_t *a1)
{
  sub_2263BFDE0(a1);
  return 0;
}

uint64_t sub_2263C621C(uint64_t *a1)
{
  sub_2263BFDE0(a1);
  return pxrInternal__aapl__pxrReserved__::operator<<();
}

std::type_info *sub_2263C6244(uint64_t *a1)
{
  sub_2263BFDE0(a1);
  return &stru_24EDD6EF8;
}

uint64_t sub_2263C6260(uint64_t *a1)
{
  sub_2263BFDE0(a1);
  return 0;
}

uint64_t sub_2263C6278(uint64_t *a1)
{
  sub_2263BFDE0(a1);
  return MEMORY[0x24BEDB7C8];
}

uint64_t sub_2263C6294(uint64_t *a1)
{
  sub_2263BFDE0(a1);
  return 0;
}

uint64_t sub_2263C62AC(uint64_t *a1)
{
  sub_2263BFDE0(a1);
  return 0;
}

BOOL sub_2263C62C4(uint64_t *a1, uint64_t a2)
{
  sub_2263BFDE0(a1);
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7GfQuatfE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_2263C6304(uint64_t *a1)
{
  const std::type_info *v1;

  sub_2263BFDE0(a1);
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24EDD6EF8, v1);
}

std::type_info *sub_2263C6328(uint64_t *a1)
{
  sub_2263BFDE0(a1);
  return &stru_24EDD6EF8;
}

uint64_t sub_2263C6348@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  _OWORD *v3;
  uint64_t result;
  unsigned int *v5;
  unsigned int v6;

  v3 = (_OWORD *)sub_2263BFDE0(a1);
  a2[1] = (uint64_t)&off_24EDD7C80;
  result = operator new();
  *(_OWORD *)result = *v3;
  v5 = (unsigned int *)(result + 16);
  atomic_store(0, (unsigned int *)(result + 16));
  *a2 = result;
  do
    v6 = __ldxr(v5);
  while (__stxr(v6 + 1, v5));
  return result;
}

uint64_t sub_2263C63B4(uint64_t a1, float *a2, float *a3)
{
  float v3;
  unint64_t v4;

  v3 = *a2;
  if (*a2 == 0.0)
    v3 = 0.0;
  v4 = LODWORD(v3);
  if (*(_BYTE *)(a1 + 8))
    v4 = ((*(_QWORD *)a1 + LODWORD(v3) + (*(_QWORD *)a1 + LODWORD(v3)) * (*(_QWORD *)a1 + (unint64_t)LODWORD(v3))) >> 1)
       + LODWORD(v3);
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v4;
  return sub_2263B0F74(a1, a3);
}

uint64_t sub_2263C63FC(uint64_t *a1)
{
  unsigned int v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = atomic_load((unsigned int *)(sub_2263BFDE0(a1) + 16));
  if (v2 != 1)
  {
    v3 = operator new();
    *(_OWORD *)v3 = *(_OWORD *)sub_2263BFDE0(a1);
    v4 = (unsigned int *)(v3 + 16);
    atomic_store(0, (unsigned int *)(v3 + 16));
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
    v6 = *a1;
    *a1 = v3;
    if (v6)
    {
      v7 = (unsigned int *)(v6 + 16);
      do
      {
        v8 = __ldxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
      {
        __dmb(9u);
        MEMORY[0x2276980E0]();
      }
    }
  }
  return sub_2263BFDE0(a1);
}

uint64_t *sub_2263C64B0(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t *sub_2263C64D8(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_2263C6740(a1);
}

uint64_t sub_2263C64E8(uint64_t *a1)
{
  sub_2263C036C(a1);
  return 1;
}

unint64_t sub_2263C6500(uint64_t *a1)
{
  uint64_t v1;
  _QWORD v3[2];

  v1 = sub_2263C036C(a1);
  v3[1] = 1;
  v3[0] = *(_QWORD *)v1;
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes((pxrInternal__aapl__pxrReserved__::Tf_HashState *)v3, *(const char **)(v1 + 32));
  return bswap64(0x9E3779B97F4A7C55 * v3[0]);
}

uint64_t sub_2263C6558(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = sub_2263C036C(a1);
  v4 = sub_2263C036C(a2);
  return sub_2263C67A8(v3, v4);
}

uint64_t sub_2263C658C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;

  v3 = sub_2263C036C(a1);
  return sub_2263C67A8(v3, a2);
}

uint64_t sub_2263C65B4(uint64_t *a1)
{
  sub_2263C036C(a1);
  return 0;
}

uint64_t sub_2263C65D0(uint64_t *a1, uint64_t a2)
{
  sub_2263C036C(a1);
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray();
  return a2;
}

std::type_info *sub_2263C661C(uint64_t *a1)
{
  sub_2263C036C(a1);
  return &stru_24EDD6F18;
}

uint64_t sub_2263C6638(uint64_t *a1)
{
  sub_2263C036C(a1);
  return 1;
}

uint64_t sub_2263C6650(uint64_t *a1)
{
  sub_2263C036C(a1);
  return MEMORY[0x24BEDB798];
}

uint64_t sub_2263C6670(uint64_t *a1)
{
  return *(_QWORD *)sub_2263C036C(a1);
}

BOOL sub_2263C6688(uint64_t *a1, uint64_t a2)
{
  sub_2263C036C(a1);
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7VtArrayIiEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_2263C66C8(uint64_t *a1)
{
  const std::type_info *v1;

  sub_2263C036C(a1);
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24EDD6F18, v1);
}

std::type_info *sub_2263C66EC(uint64_t *a1)
{
  sub_2263C036C(a1);
  return &stru_24EDD6F18;
}

uint64_t sub_2263C670C@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;

  v3 = sub_2263C036C(a1);
  a2[1] = (uint64_t)&off_24EDD7D38;
  return sub_2263C68F0(a2, v3);
}

uint64_t *sub_2263C6740(uint64_t *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *a1;
  if (*a1)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      __dmb(9u);
      sub_2263AC71C(v2);
      MEMORY[0x2276980E0](v2, 0x1030C404A96FE9ALL);
    }
  }
  return a1;
}

uint64_t sub_2263C67A8(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (*(_QWORD *)(a1 + 32) == *(_QWORD *)(a2 + 32)
    && sub_2263B1164(a1, a2)
    && *(_QWORD *)(a1 + 24) == *(_QWORD *)(a2 + 24))
  {
    return 1;
  }
  result = sub_2263B1164(a1, a2);
  if ((_DWORD)result)
    return memcmp(*(const void **)(a1 + 32), *(const void **)(a2 + 32), 4 * *(_QWORD *)a1) == 0;
  return result;
}

uint64_t sub_2263C682C(uint64_t *a1)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v12;

  v2 = atomic_load((unsigned int *)(sub_2263C036C(a1) + 40));
  if (v2 != 1)
  {
    v3 = operator new();
    v4 = sub_2263C036C(a1);
    v5 = *(_OWORD *)(v4 + 16);
    *(_OWORD *)v3 = *(_OWORD *)v4;
    *(_OWORD *)(v3 + 16) = v5;
    v6 = *(_QWORD *)(v4 + 32);
    *(_QWORD *)(v3 + 32) = v6;
    if (v6)
    {
      v7 = (unint64_t *)(v6 - 16);
      if (*(_QWORD *)(v3 + 24))
        v7 = *(unint64_t **)(v3 + 24);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
    v9 = (unsigned int *)(v3 + 40);
    atomic_store(0, (unsigned int *)(v3 + 40));
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    v12 = *a1;
    *a1 = v3;
    sub_2263C6740(&v12);
  }
  return sub_2263C036C(a1);
}

uint64_t sub_2263C68F0(uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  unsigned int *v9;
  unsigned int v10;

  result = operator new();
  v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)result = *(_OWORD *)a2;
  *(_OWORD *)(result + 16) = v5;
  v6 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 32) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 - 16);
    if (*(_QWORD *)(result + 24))
      v7 = *(unint64_t **)(result + 24);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = (unsigned int *)(result + 40);
  atomic_store(0, (unsigned int *)(result + 40));
  *a1 = result;
  do
    v10 = __ldxr(v9);
  while (__stxr(v10 + 1, v9));
  return result;
}

void sub_2263C6978(unint64_t *a1, unint64_t a2, _DWORD **a3)
{
  unint64_t v3;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  unint64_t *v14;
  uint64_t v15;
  unint64_t *v16;
  uint64_t v17;
  _DWORD *v18;
  unint64_t v19;
  unint64_t *v20;
  uint64_t v21;
  unint64_t *v22;
  int v23;
  _DWORD *v24;
  uint64_t v25;

  v3 = *a1;
  if (*a1 == a2)
    return;
  if (!a2)
    goto LABEL_18;
  v7 = (unint64_t *)a1[4];
  if (v7)
  {
    if (!a1[3])
    {
      v8 = atomic_load(v7 - 2);
      if (v8 == 1)
      {
        if (v3 < a2)
        {
          v9 = a1[4];
          if (*(_QWORD *)(v9 - 8) < a2)
          {
            v10 = sub_2263C6B2C((uint64_t)a1, a2);
            v7 = v10;
            if (v3)
            {
              v11 = 0;
              do
              {
                *(_DWORD *)((char *)v10 + v11) = *(_DWORD *)(v9 + v11);
                v11 += 4;
              }
              while (4 * v3 != v11);
            }
          }
          v12 = *a3;
          v13 = 4 * v3;
          do
          {
            *(_DWORD *)((char *)v7 + v13) = *v12;
            v13 += 4;
          }
          while (4 * a2 != v13);
        }
        v14 = v7;
        goto LABEL_29;
      }
      v7 = (unint64_t *)a1[4];
    }
    if (v3 >= a2)
      v19 = a2;
    else
      v19 = *a1;
    v20 = sub_2263C6B2C((uint64_t)a1, a2);
    v14 = v20;
    if (v19)
    {
      v21 = 4 * v19;
      v22 = v20;
      do
      {
        v23 = *(_DWORD *)v7;
        v7 = (unint64_t *)((char *)v7 + 4);
        *(_DWORD *)v22 = v23;
        v22 = (unint64_t *)((char *)v22 + 4);
        v21 -= 4;
      }
      while (v21);
    }
    if (v3 < a2)
    {
      v24 = *a3;
      v25 = 4 * v3;
      do
      {
        *(_DWORD *)((char *)v20 + v25) = *v24;
        v25 += 4;
      }
      while (4 * a2 != v25);
    }
    goto LABEL_29;
  }
  v15 = 4 * a2;
  if (4 * a2 / a2 != 4)
  {
LABEL_18:
    sub_2263AD1C8(a1);
    return;
  }
  v16 = sub_2263C6B2C((uint64_t)a1, a2);
  v14 = v16;
  v17 = 0;
  v18 = *a3;
  do
  {
    *(_DWORD *)((char *)v16 + v17) = *v18;
    v17 += 4;
  }
  while (v15 != v17);
LABEL_29:
  if (v14 != (unint64_t *)a1[4])
  {
    sub_2263AC71C((uint64_t)a1);
    a1[4] = (unint64_t)v14;
  }
  *a1 = a2;
}

_QWORD *sub_2263C6B2C(uint64_t a1, unint64_t a2)
{
  size_t v3;
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;

  v7 = 0;
  v8 = 0;
  sub_2263AC890((uint64_t)&v7);
  if (a2 > 0x3FFFFFFFFFFFFFFBLL)
    v3 = -1;
  else
    v3 = 4 * a2 + 16;
  v4 = operator new(v3);
  *v4 = 1;
  v4[1] = a2;
  while (1)
  {
    v5 = v8;
    LODWORD(v8) = v8 - 1;
    if (!v5)
      break;
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End();
  }
  return v4 + 2;
}

void sub_2263C6BB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2263AC840((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2263C6BCC(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this)
{
  uint64_t v1;
  unint64_t v3;
  int *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _DWORD *v9;
  int v10;

  v1 = *((_QWORD *)this + 4);
  if (v1)
  {
    if (*((_QWORD *)this + 3) || (v3 = atomic_load((unint64_t *)(v1 - 16)), v3 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>::_DetachIfNotUnique() [T = unsigned int]");
      v4 = (int *)*((_QWORD *)this + 4);
      v5 = *(_QWORD *)this;
      v6 = sub_2263C6B2C((uint64_t)this, *(_QWORD *)this);
      v7 = v6;
      if (v5)
      {
        v8 = 4 * v5;
        v9 = v6;
        do
        {
          v10 = *v4++;
          *v9++ = v10;
          v8 -= 4;
        }
        while (v8);
      }
      sub_2263AC71C((uint64_t)this);
      *((_QWORD *)this + 4) = v7;
    }
  }
}

uint64_t *sub_2263C6C60(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t *sub_2263C6C88(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_2263C6EF0(a1);
}

uint64_t sub_2263C6C98(uint64_t *a1)
{
  sub_2263C062C(a1);
  return 1;
}

unint64_t sub_2263C6CB0(uint64_t *a1)
{
  uint64_t v1;
  _QWORD v3[2];

  v1 = sub_2263C062C(a1);
  v3[1] = 1;
  v3[0] = *(_QWORD *)v1;
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes((pxrInternal__aapl__pxrReserved__::Tf_HashState *)v3, *(const char **)(v1 + 32));
  return bswap64(0x9E3779B97F4A7C55 * v3[0]);
}

uint64_t sub_2263C6D08(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = sub_2263C062C(a1);
  v4 = sub_2263C062C(a2);
  return sub_2263C67A8(v3, v4);
}

uint64_t sub_2263C6D3C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;

  v3 = sub_2263C062C(a1);
  return sub_2263C67A8(v3, a2);
}

uint64_t sub_2263C6D64(uint64_t *a1)
{
  sub_2263C062C(a1);
  return 0;
}

uint64_t sub_2263C6D80(uint64_t *a1, uint64_t a2)
{
  sub_2263C062C(a1);
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray();
  return a2;
}

std::type_info *sub_2263C6DCC(uint64_t *a1)
{
  sub_2263C062C(a1);
  return &stru_24EDD6F30;
}

uint64_t sub_2263C6DE8(uint64_t *a1)
{
  sub_2263C062C(a1);
  return 1;
}

uint64_t sub_2263C6E00(uint64_t *a1)
{
  sub_2263C062C(a1);
  return MEMORY[0x24BEDB7A0];
}

uint64_t sub_2263C6E20(uint64_t *a1)
{
  return *(_QWORD *)sub_2263C062C(a1);
}

BOOL sub_2263C6E38(uint64_t *a1, uint64_t a2)
{
  sub_2263C062C(a1);
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7VtArrayIjEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_2263C6E78(uint64_t *a1)
{
  const std::type_info *v1;

  sub_2263C062C(a1);
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24EDD6F30, v1);
}

std::type_info *sub_2263C6E9C(uint64_t *a1)
{
  sub_2263C062C(a1);
  return &stru_24EDD6F30;
}

uint64_t sub_2263C6EBC@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;

  v3 = sub_2263C062C(a1);
  a2[1] = (uint64_t)&off_24EDD7DF0;
  return sub_2263C68F0(a2, v3);
}

uint64_t *sub_2263C6EF0(uint64_t *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *a1;
  if (*a1)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      __dmb(9u);
      sub_2263AC71C(v2);
      MEMORY[0x2276980E0](v2, 0x1030C404A96FE9ALL);
    }
  }
  return a1;
}

uint64_t sub_2263C6F58(uint64_t *a1)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v12;

  v2 = atomic_load((unsigned int *)(sub_2263C062C(a1) + 40));
  if (v2 != 1)
  {
    v3 = operator new();
    v4 = sub_2263C062C(a1);
    v5 = *(_OWORD *)(v4 + 16);
    *(_OWORD *)v3 = *(_OWORD *)v4;
    *(_OWORD *)(v3 + 16) = v5;
    v6 = *(_QWORD *)(v4 + 32);
    *(_QWORD *)(v3 + 32) = v6;
    if (v6)
    {
      v7 = (unint64_t *)(v6 - 16);
      if (*(_QWORD *)(v3 + 24))
        v7 = *(unint64_t **)(v3 + 24);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
    v9 = (unsigned int *)(v3 + 40);
    atomic_store(0, (unsigned int *)(v3 + 40));
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    v12 = *a1;
    *a1 = v3;
    sub_2263C6EF0(&v12);
  }
  return sub_2263C062C(a1);
}

uint64_t sub_2263C701C(_QWORD *a1)
{
  *a1 += 4;
  return std::ostream::operator<<();
}

void sub_2263C7034(unint64_t *a1, unint64_t a2, _OWORD **a3)
{
  unint64_t v3;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  uint64_t v11;
  _OWORD *v12;
  uint64_t v13;
  unint64_t *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  _OWORD *v18;
  unint64_t v19;
  unint64_t *v20;
  uint64_t v21;
  unint64_t *v22;
  __int128 v23;
  _OWORD *v24;
  uint64_t v25;

  v3 = *a1;
  if (*a1 == a2)
    return;
  if (!a2)
    goto LABEL_18;
  v7 = (unint64_t *)a1[4];
  if (v7)
  {
    if (!a1[3])
    {
      v8 = atomic_load(v7 - 2);
      if (v8 == 1)
      {
        if (v3 < a2)
        {
          v9 = a1[4];
          if (*(_QWORD *)(v9 - 8) < a2)
          {
            v10 = sub_2263C09C0((uint64_t)a1, a2);
            v7 = v10;
            if (v3)
            {
              v11 = 0;
              do
              {
                *(_OWORD *)&v10[v11] = *(_OWORD *)(v9 + v11 * 8);
                v11 += 2;
              }
              while (2 * v3 != v11);
            }
          }
          v12 = *a3;
          v13 = 2 * v3;
          do
          {
            *(_OWORD *)&v7[v13] = *v12;
            v13 += 2;
          }
          while (2 * a2 != v13);
        }
        v14 = v7;
        goto LABEL_29;
      }
      v7 = (unint64_t *)a1[4];
    }
    if (v3 >= a2)
      v19 = a2;
    else
      v19 = *a1;
    v20 = sub_2263C09C0((uint64_t)a1, a2);
    v14 = v20;
    if (v19)
    {
      v21 = 16 * v19;
      v22 = v20;
      do
      {
        v23 = *(_OWORD *)v7;
        v7 += 2;
        *(_OWORD *)v22 = v23;
        v22 += 2;
        v21 -= 16;
      }
      while (v21);
    }
    if (v3 < a2)
    {
      v24 = *a3;
      v25 = 2 * v3;
      do
      {
        *(_OWORD *)&v20[v25] = *v24;
        v25 += 2;
      }
      while (2 * a2 != v25);
    }
    goto LABEL_29;
  }
  v15 = 16 * a2;
  if (16 * a2 / a2 != 16)
  {
LABEL_18:
    sub_2263AD1C8(a1);
    return;
  }
  v16 = sub_2263C09C0((uint64_t)a1, a2);
  v14 = v16;
  v17 = 0;
  v18 = *a3;
  do
  {
    *(_OWORD *)&v16[v17 / 8] = *v18;
    v17 += 16;
  }
  while (v15 != v17);
LABEL_29:
  if (v14 != (unint64_t *)a1[4])
  {
    sub_2263AC71C((uint64_t)a1);
    a1[4] = (unint64_t)v14;
  }
  *a1 = a2;
}

uint64_t *sub_2263C71E8(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t *sub_2263C7210(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_2263C7448(a1);
}

uint64_t sub_2263C7220(uint64_t *a1)
{
  sub_2263C08EC(a1);
  return 1;
}

unint64_t sub_2263C7238(uint64_t *a1)
{
  uint64_t *v1;
  char v3;

  v1 = (uint64_t *)sub_2263C08EC(a1);
  return sub_2263C74B0((uint64_t)&v3, v1);
}

BOOL sub_2263C7260(uint64_t *a1, uint64_t *a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)sub_2263C08EC(a1);
  v4 = sub_2263C08EC(a2);
  return sub_2263C75A8(v3, v4);
}

BOOL sub_2263C7294(uint64_t *a1, uint64_t a2)
{
  _QWORD *v3;

  v3 = (_QWORD *)sub_2263C08EC(a1);
  return sub_2263C75A8(v3, a2);
}

uint64_t sub_2263C72BC(uint64_t *a1)
{
  sub_2263C08EC(a1);
  return 0;
}

uint64_t sub_2263C72D8(uint64_t *a1, uint64_t a2)
{
  sub_2263C08EC(a1);
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray();
  return a2;
}

std::type_info *sub_2263C7324(uint64_t *a1)
{
  sub_2263C08EC(a1);
  return &stru_24EDD6F48;
}

uint64_t sub_2263C7340(uint64_t *a1)
{
  sub_2263C08EC(a1);
  return 1;
}

std::type_info *sub_2263C7358(uint64_t *a1)
{
  sub_2263C08EC(a1);
  return &stru_24EDD6EF8;
}

uint64_t sub_2263C7378(uint64_t *a1)
{
  return *(_QWORD *)sub_2263C08EC(a1);
}

BOOL sub_2263C7390(uint64_t *a1, uint64_t a2)
{
  sub_2263C08EC(a1);
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7VtArrayINS_7GfQuatfEEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_2263C73D0(uint64_t *a1)
{
  const std::type_info *v1;

  sub_2263C08EC(a1);
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24EDD6F48, v1);
}

std::type_info *sub_2263C73F4(uint64_t *a1)
{
  sub_2263C08EC(a1);
  return &stru_24EDD6F48;
}

uint64_t sub_2263C7414@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;

  v3 = sub_2263C08EC(a1);
  a2[1] = (uint64_t)off_24EDD7EA8;
  return sub_2263B131C(a2, v3);
}

uint64_t *sub_2263C7448(uint64_t *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *a1;
  if (*a1)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      __dmb(9u);
      sub_2263AC71C(v2);
      MEMORY[0x2276980E0](v2, 0x1020C40874388CCLL);
    }
  }
  return a1;
}

unint64_t sub_2263C74B0(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v7[2];

  v2 = *a2;
  v7[0] = v2;
  v7[1] = 1;
  if (v2)
  {
    v3 = a2[4];
    do
    {
      --v2;
      v4 = v3 + 16;
      sub_2263C7524((uint64_t)v7, v3);
      v3 = v4;
    }
    while (v2);
    v5 = 0x9E3779B97F4A7C55 * v7[0];
  }
  else
  {
    v5 = 0;
  }
  return bswap64(v5);
}

uint64_t sub_2263C7524(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v4;
  int v5;
  _QWORD v6[2];

  v5 = *(_DWORD *)(a2 + 12);
  v6[0] = 0;
  v6[1] = 0;
  result = sub_2263C63B4((uint64_t)v6, (float *)&v5, (float *)a2);
  v4 = bswap64(0x9E3779B97F4A7C55 * v6[0]);
  if (*(_BYTE *)(a1 + 8))
    v4 += (*(_QWORD *)a1 + v4 + (*(_QWORD *)a1 + v4) * (*(_QWORD *)a1 + v4)) >> 1;
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v4;
  return result;
}

BOOL sub_2263C75A8(_QWORD *a1, uint64_t a2)
{
  _BOOL8 result;
  float *v5;
  uint64_t v6;
  float *i;

  if (a1[4] == *(_QWORD *)(a2 + 32) && sub_2263B1164((uint64_t)a1, a2) && a1[3] == *(_QWORD *)(a2 + 24))
    return 1;
  result = sub_2263B1164((uint64_t)a1, a2);
  if (!result)
    return result;
  if (!*a1)
    return 1;
  v5 = (float *)(a1[4] + 8);
  v6 = 16 * *a1;
  for (i = (float *)(*(_QWORD *)(a2 + 32) + 8);
        v5[1] == i[1] && *(v5 - 2) == *(i - 2) && *(v5 - 1) == *(i - 1) && *v5 == *i;
        i += 4)
  {
    v5 += 4;
    v6 -= 16;
    if (!v6)
      return 1;
  }
  return 0;
}

uint64_t sub_2263C7680(uint64_t *a1)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v12;

  v2 = atomic_load((unsigned int *)(sub_2263C08EC(a1) + 40));
  if (v2 != 1)
  {
    v3 = operator new();
    v4 = sub_2263C08EC(a1);
    v5 = *(_OWORD *)(v4 + 16);
    *(_OWORD *)v3 = *(_OWORD *)v4;
    *(_OWORD *)(v3 + 16) = v5;
    v6 = *(_QWORD *)(v4 + 32);
    *(_QWORD *)(v3 + 32) = v6;
    if (v6)
    {
      v7 = (unint64_t *)(v6 - 16);
      if (*(_QWORD *)(v3 + 24))
        v7 = *(unint64_t **)(v3 + 24);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
    v9 = (unsigned int *)(v3 + 40);
    atomic_store(0, (unsigned int *)(v3 + 40));
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    v12 = *a1;
    *a1 = v3;
    sub_2263C7448(&v12);
  }
  return sub_2263C08EC(a1);
}

uint64_t sub_2263C7744(_QWORD *a1)
{
  *a1 += 16;
  return pxrInternal__aapl__pxrReserved__::operator<<();
}

void sub_2263C775C(_QWORD *a1)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = a1[4];
  if (v1)
  {
    if (a1[3] || (v3 = atomic_load((unint64_t *)(v1 - 16)), v3 != 1))
    {
      sub_2263C7974(a1);
    }
    else if (*a1)
    {
      v4 = a1[4];
      v5 = 24 * *a1;
      do
      {
        if (*(char *)(v4 + 23) < 0)
          operator delete(*(void **)v4);
        v4 += 24;
        v5 -= 24;
      }
      while (v5);
    }
    *a1 = 0;
  }
}

void sub_2263C77E0(unint64_t *a1, unint64_t a2, __int128 **a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;

  v3 = *a1;
  if (*a1 == a2)
    return;
  if (!a2)
    goto LABEL_11;
  v7 = (_QWORD *)a1[4];
  if (v7)
  {
    if (!a1[3])
    {
      v8 = atomic_load(v7 - 2);
      if (v8 == 1)
      {
        if (v3 >= a2)
        {
          v13 = 3 * a2;
          do
          {
            if (SHIBYTE(v7[v13 + 2]) < 0)
              operator delete((void *)v7[v13]);
            v13 += 3;
          }
          while (3 * v3 != v13);
          goto LABEL_23;
        }
        v9 = a1[4];
        if (*(_QWORD *)(v9 - 8) < a2)
        {
          v7 = sub_2263C7A34((uint64_t)a1, a2);
          sub_2263C7B8C(v9, v9 + 24 * v3, (uint64_t)v7);
        }
LABEL_17:
        v10 = (uint64_t)&v7[3 * v3];
        goto LABEL_18;
      }
      v7 = (_QWORD *)a1[4];
    }
    v11 = (uint64_t)v7;
    if (v3 >= a2)
      v12 = a2;
    else
      v12 = *a1;
    v7 = sub_2263C7A34((uint64_t)a1, a2);
    sub_2263C7B8C(v11, v11 + 24 * v12, (uint64_t)v7);
    if (v3 >= a2)
      goto LABEL_23;
    goto LABEL_17;
  }
  if (a2 > 0xAAAAAAAAAAAAAAALL)
  {
LABEL_11:
    sub_2263C775C(a1);
    return;
  }
  v7 = sub_2263C7A34((uint64_t)a1, a2);
  v10 = (uint64_t)v7;
LABEL_18:
  sub_2263C7ADC(a3, v10, (uint64_t)&v7[3 * a2]);
LABEL_23:
  if (v7 != (_QWORD *)a1[4])
  {
    sub_2263C7974(a1);
    a1[4] = (unint64_t)v7;
  }
  *a1 = a2;
}

void sub_2263C7974(_QWORD *a1)
{
  uint64_t v1;
  unint64_t *v3;
  _QWORD *v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  void (*v12)(void);

  v1 = a1[4];
  if (v1)
  {
    v4 = a1 + 3;
    v3 = (unint64_t *)a1[3];
    if (v3)
    {
      do
      {
        v10 = __ldxr(v3);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, v3));
      if (!v11)
      {
        __dmb(9u);
        v12 = *(void (**)(void))(*v4 + 8);
        if (v12)
          v12();
      }
    }
    else
    {
      v5 = (unint64_t *)(v1 - 16);
      do
      {
        v6 = __ldxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
      {
        __dmb(9u);
        v8 = a1[4];
        if (*a1)
        {
          v9 = 24 * *a1;
          do
          {
            if (*(char *)(v8 + 23) < 0)
              operator delete(*(void **)v8);
            v8 += 24;
            v9 -= 24;
          }
          while (v9);
          v8 = a1[4];
        }
        operator delete((void *)(v8 - 16));
      }
    }
    *v4 = 0;
    v4[1] = 0;
  }
}

_QWORD *sub_2263C7A34(uint64_t a1, unint64_t a2)
{
  size_t v3;
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;

  v7 = 0;
  v8 = 0;
  sub_2263AC890((uint64_t)&v7);
  if (a2 > 0xAAAAAAAAAAAAAA9)
    v3 = -1;
  else
    v3 = 24 * a2 + 16;
  v4 = operator new(v3);
  *v4 = 1;
  v4[1] = a2;
  while (1)
  {
    v5 = v8;
    LODWORD(v8) = v8 - 1;
    if (!v5)
      break;
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End();
  }
  return v4 + 2;
}

void sub_2263C7AC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2263AC840((uint64_t)&a9);
  _Unwind_Resume(a1);
}

__int128 **sub_2263C7ADC(__int128 **result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  __int128 *v6;
  __int128 v7;

  if (a2 != a3)
  {
    v5 = 0;
    v6 = *result;
    do
    {
      result = (__int128 **)(a2 + v5);
      if (*((char *)v6 + 23) < 0)
      {
        result = (__int128 **)sub_2263AE36C(result, *(void **)v6, *((_QWORD *)v6 + 1));
      }
      else
      {
        v7 = *v6;
        result[2] = (__int128 *)*((_QWORD *)v6 + 2);
        *(_OWORD *)result = v7;
      }
      v5 += 24;
    }
    while (a2 + v5 != a3);
  }
  return result;
}

void sub_2263C7B4C(void *a1)
{
  uint64_t v1;
  uint64_t v2;

  __cxa_begin_catch(a1);
  for (; v2; v2 -= 24)
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    v1 += 24;
  }
  __cxa_rethrow();
}

void sub_2263C7B78(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t sub_2263C7B8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  __int128 *v8;
  __int128 v9;

  if (a1 != a2)
  {
    v6 = 0;
    do
    {
      v7 = a3 + v6;
      v8 = (__int128 *)(a1 + v6);
      if (*(char *)(a1 + v6 + 23) < 0)
      {
        sub_2263AE36C((_BYTE *)v7, *(void **)v8, *((_QWORD *)v8 + 1));
      }
      else
      {
        v9 = *v8;
        *(_QWORD *)(v7 + 16) = *((_QWORD *)v8 + 2);
        *(_OWORD *)v7 = v9;
      }
      v6 += 24;
    }
    while (a1 + v6 != a2);
    a3 += v6;
  }
  return a3;
}

void sub_2263C7C08(void *a1)
{
  uint64_t v1;
  uint64_t v2;

  __cxa_begin_catch(a1);
  for (; v2; v2 -= 24)
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    v1 += 24;
  }
  __cxa_rethrow();
}

void sub_2263C7C34(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_2263C7C48(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v1 = *((_QWORD *)this + 4);
  if (v1)
  {
    if (*((_QWORD *)this + 3) || (v3 = atomic_load((unint64_t *)(v1 - 16)), v3 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<std::string>::_DetachIfNotUnique() [T = std::string]");
      v4 = *((_QWORD *)this + 4);
      v5 = *(_QWORD *)this;
      v6 = sub_2263C7A34((uint64_t)this, *(_QWORD *)this);
      sub_2263C7B8C(v4, v4 + 24 * v5, (uint64_t)v6);
      sub_2263C7974(this);
      *((_QWORD *)this + 4) = v6;
    }
  }
}

uint64_t *sub_2263C7CD4(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

_QWORD **sub_2263C7CFC(_QWORD **a1, _QWORD *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_2263C7F60(a1);
}

uint64_t sub_2263C7D0C(uint64_t *a1)
{
  sub_2263C0B34(a1);
  return 1;
}

unint64_t sub_2263C7D24(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3[2];

  v1 = sub_2263C0B34(a1);
  v3[1] = 1;
  v3[0] = *(_QWORD *)v1;
  sub_2263C7FC8((pxrInternal__aapl__pxrReserved__::Tf_HashState *)v3, *(uint64_t **)(v1 + 32), v3[0]);
  return bswap64(0x9E3779B97F4A7C55 * v3[0]);
}

uint64_t sub_2263C7D78(uint64_t *a1, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t v4;

  v3 = (uint64_t *)sub_2263C0B34(a1);
  v4 = sub_2263C0B34(a2);
  return sub_2263C8024(v3, v4);
}

uint64_t sub_2263C7DAC(uint64_t *a1, uint64_t a2)
{
  uint64_t *v3;

  v3 = (uint64_t *)sub_2263C0B34(a1);
  return sub_2263C8024(v3, a2);
}

uint64_t sub_2263C7DD4(uint64_t *a1)
{
  sub_2263C0B34(a1);
  return 0;
}

uint64_t sub_2263C7DF0(uint64_t *a1, uint64_t a2)
{
  sub_2263C0B34(a1);
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray();
  return a2;
}

std::type_info *sub_2263C7E3C(uint64_t *a1)
{
  sub_2263C0B34(a1);
  return &stru_24EDD6F60;
}

uint64_t sub_2263C7E58(uint64_t *a1)
{
  sub_2263C0B34(a1);
  return 1;
}

void *sub_2263C7E70(uint64_t *a1)
{
  sub_2263C0B34(a1);
  return &unk_24EDD71A8;
}

uint64_t sub_2263C7E90(uint64_t *a1)
{
  return *(_QWORD *)sub_2263C0B34(a1);
}

BOOL sub_2263C7EA8(uint64_t *a1, uint64_t a2)
{
  sub_2263C0B34(a1);
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7VtArrayINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_2263C7EE8(uint64_t *a1)
{
  const std::type_info *v1;

  sub_2263C0B34(a1);
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24EDD6F60, v1);
}

std::type_info *sub_2263C7F0C(uint64_t *a1)
{
  sub_2263C0B34(a1);
  return &stru_24EDD6F60;
}

uint64_t sub_2263C7F2C@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;

  v3 = sub_2263C0B34(a1);
  a2[1] = (uint64_t)&off_24EDD7F60;
  return sub_2263B131C(a2, v3);
}

_QWORD **sub_2263C7F60(_QWORD **a1)
{
  _QWORD *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *a1;
  if (*a1)
  {
    v3 = (unsigned int *)(v2 + 5);
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      __dmb(9u);
      sub_2263C7974(v2);
      MEMORY[0x2276980E0](v2, 0x1020C40874388CCLL);
    }
  }
  return a1;
}

pxrInternal__aapl__pxrReserved__::Tf_HashState *sub_2263C7FC8(pxrInternal__aapl__pxrReserved__::Tf_HashState *this, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  pxrInternal__aapl__pxrReserved__::Tf_HashState *v4;
  uint64_t *v5;

  if (a3)
  {
    v3 = a3;
    v4 = this;
    do
    {
      --v3;
      v5 = a2 + 3;
      if (*((char *)a2 + 23) < 0)
        a2 = (uint64_t *)*a2;
      this = (pxrInternal__aapl__pxrReserved__::Tf_HashState *)pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes(v4, (const char *)a2);
      a2 = v5;
    }
    while (v3);
  }
  return this;
}

uint64_t sub_2263C8024(uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  if (a1[4] == *(_QWORD *)(a2 + 32) && sub_2263B1164((uint64_t)a1, a2) && a1[3] == *(_QWORD *)(a2 + 24))
    return 1;
  result = sub_2263B1164((uint64_t)a1, a2);
  if (!(_DWORD)result)
    return result;
  v5 = *a1;
  if (!*a1)
    return 1;
  v6 = (unsigned __int8 *)a1[4];
  v7 = *(unsigned __int8 **)(a2 + 32);
  v8 = 24 * v5 - 24;
  do
  {
    result = sub_2263C80E0((uint64_t)&v10, v6, v7);
    if (!(_DWORD)result)
      break;
    v6 += 24;
    v7 += 24;
    v9 = v8;
    v8 -= 24;
  }
  while (v9);
  return result;
}

uint64_t sub_2263C80E0(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  BOOL v14;
  uint64_t result;

  v3 = a3;
  v4 = a2[23];
  if ((v4 & 0x80u) == 0)
    v5 = a2[23];
  else
    v5 = *((_QWORD *)a2 + 1);
  v6 = a3[23];
  v7 = (char)v6;
  if ((v6 & 0x80u) != 0)
    v6 = *((_QWORD *)a3 + 1);
  if (v5 != v6)
    return 0;
  if (v7 < 0)
    v3 = *(unsigned __int8 **)a3;
  if ((v4 & 0x80) != 0)
    return memcmp(*(const void **)a2, v3, *((_QWORD *)a2 + 1)) == 0;
  if (!a2[23])
    return 1;
  v8 = v4 - 1;
  do
  {
    v10 = *a2++;
    v9 = v10;
    v12 = *v3++;
    v11 = v12;
    v14 = v8-- != 0;
    result = v9 == v11;
  }
  while (v9 == v11 && v14);
  return result;
}

uint64_t sub_2263C8184(uint64_t *a1)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  _QWORD *v12;

  v2 = atomic_load((unsigned int *)(sub_2263C0B34(a1) + 40));
  if (v2 != 1)
  {
    v3 = operator new();
    v4 = sub_2263C0B34(a1);
    v5 = *(_OWORD *)(v4 + 16);
    *(_OWORD *)v3 = *(_OWORD *)v4;
    *(_OWORD *)(v3 + 16) = v5;
    v6 = *(_QWORD *)(v4 + 32);
    *(_QWORD *)(v3 + 32) = v6;
    if (v6)
    {
      v7 = (unint64_t *)(v6 - 16);
      if (*(_QWORD *)(v3 + 24))
        v7 = *(unint64_t **)(v3 + 24);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
    v9 = (unsigned int *)(v3 + 40);
    atomic_store(0, (unsigned int *)(v3 + 40));
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    v12 = (_QWORD *)*a1;
    *a1 = v3;
    sub_2263C7F60(&v12);
  }
  return sub_2263C0B34(a1);
}

_QWORD *sub_2263C8248(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *a1;
  *a1 += 24;
  v4 = *(char *)(v3 + 23);
  if (v4 >= 0)
    v5 = v3;
  else
    v5 = *(_QWORD *)v3;
  if (v4 >= 0)
    v6 = *(unsigned __int8 *)(v3 + 23);
  else
    v6 = *(_QWORD *)(v3 + 8);
  return sub_2263B0814(a2, v5, v6);
}

void sub_2263C8278(_QWORD *a1)
{
  uint64_t v1;
  unint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  unsigned int *v6;
  unsigned int v7;

  v1 = a1[4];
  if (v1)
  {
    if (a1[3] || (v3 = atomic_load((unint64_t *)(v1 - 16)), v3 != 1))
    {
      sub_2263C8530(a1);
    }
    else if (*a1)
    {
      v4 = (_QWORD *)a1[4];
      v5 = &v4[*a1];
      do
      {
        if ((*v4 & 7) != 0)
        {
          v6 = (unsigned int *)(*v4 & 0xFFFFFFFFFFFFFFF8);
          do
            v7 = __ldxr(v6);
          while (__stlxr(v7 - 2, v6));
        }
        ++v4;
      }
      while (v4 != v5);
    }
    *a1 = 0;
  }
}

void sub_2263C8300(uint64_t *a1, unint64_t a2, uint64_t **a3)
{
  unint64_t v3;
  uint64_t *v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  uint64_t *v27;
  unsigned int *v28;
  unsigned int v29;

  v3 = *a1;
  if (*a1 == a2)
    return;
  if (!a2)
    goto LABEL_26;
  v7 = (uint64_t *)a1[4];
  if (!v7)
  {
    if (8 * a2 / a2 == 8)
    {
      v7 = sub_2263C85F0((uint64_t)a1, a2);
      v15 = *a3;
      v16 = v7;
      do
      {
        v17 = *v15;
        *v16 = *v15;
        if ((v17 & 7) != 0)
        {
          v18 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
          do
            v19 = __ldxr(v18);
          while (__stxr(v19 + 2, v18));
          if ((v19 & 1) == 0)
            *v16 &= 0xFFFFFFFFFFFFFFF8;
        }
        ++v16;
      }
      while (v16 != &v7[a2]);
      goto LABEL_45;
    }
LABEL_26:
    sub_2263C8278(a1);
    return;
  }
  if (a1[3])
    goto LABEL_28;
  v8 = atomic_load((unint64_t *)v7 - 2);
  if (v8 != 1)
  {
    v7 = (uint64_t *)a1[4];
LABEL_28:
    if (v3 >= a2)
      v20 = a2;
    else
      v20 = *a1;
    v21 = sub_2263C8690((uint64_t)a1, v7, a2, v20);
    v7 = v21;
    if (v3 < a2)
    {
      v22 = &v21[v3];
      v23 = *a3;
      do
      {
        v24 = *v23;
        *v22 = *v23;
        if ((v24 & 7) != 0)
        {
          v25 = (unsigned int *)(v24 & 0xFFFFFFFFFFFFFFF8);
          do
            v26 = __ldxr(v25);
          while (__stxr(v26 + 2, v25));
          if ((v26 & 1) == 0)
            *v22 &= 0xFFFFFFFFFFFFFFF8;
        }
        ++v22;
      }
      while (v22 != &v21[a2]);
    }
    goto LABEL_45;
  }
  if (v3 >= a2)
  {
    v27 = &v7[a2];
    do
    {
      if ((*v27 & 7) != 0)
      {
        v28 = (unsigned int *)(*v27 & 0xFFFFFFFFFFFFFFF8);
        do
          v29 = __ldxr(v28);
        while (__stlxr(v29 - 2, v28));
      }
      ++v27;
    }
    while (v27 != &v7[v3]);
  }
  else
  {
    v9 = (uint64_t *)a1[4];
    if (*(v9 - 1) < a2)
      v7 = sub_2263C8690((uint64_t)a1, v9, a2, *a1);
    v10 = *a3;
    v11 = &v7[v3];
    do
    {
      v12 = *v10;
      *v11 = *v10;
      if ((v12 & 7) != 0)
      {
        v13 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 2, v13));
        if ((v14 & 1) == 0)
          *v11 &= 0xFFFFFFFFFFFFFFF8;
      }
      ++v11;
    }
    while (v11 != &v7[a2]);
  }
LABEL_45:
  if (v7 != (uint64_t *)a1[4])
  {
    sub_2263C8530(a1);
    a1[4] = (uint64_t)v7;
  }
  *a1 = a2;
}

void sub_2263C8530(_QWORD *a1)
{
  uint64_t v1;
  unint64_t *v2;
  _QWORD *v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unsigned int *v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  void (*v13)(void);

  v1 = a1[4];
  if (v1)
  {
    v3 = a1 + 3;
    v2 = (unint64_t *)a1[3];
    if (v2)
    {
      do
      {
        v11 = __ldxr(v2);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v2));
      if (!v12)
      {
        __dmb(9u);
        v13 = *(void (**)(void))(*v3 + 8);
        if (v13)
          v13();
      }
    }
    else
    {
      v4 = (unint64_t *)(v1 - 16);
      do
      {
        v5 = __ldxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
      {
        __dmb(9u);
        v7 = (_QWORD *)a1[4];
        if (*a1)
        {
          v8 = &v7[*a1];
          do
          {
            if ((*v7 & 7) != 0)
            {
              v9 = (unsigned int *)(*v7 & 0xFFFFFFFFFFFFFFF8);
              do
                v10 = __ldxr(v9);
              while (__stlxr(v10 - 2, v9));
            }
            ++v7;
          }
          while (v7 != v8);
          v7 = (_QWORD *)a1[4];
        }
        operator delete(v7 - 2);
      }
    }
    *v3 = 0;
    v3[1] = 0;
  }
}

_QWORD *sub_2263C85F0(uint64_t a1, unint64_t a2)
{
  size_t v3;
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;

  v7 = 0;
  v8 = 0;
  sub_2263AC890((uint64_t)&v7);
  if (a2 > 0x1FFFFFFFFFFFFFFDLL)
    v3 = -1;
  else
    v3 = 8 * a2 + 16;
  v4 = operator new(v3);
  *v4 = 1;
  v4[1] = a2;
  while (1)
  {
    v5 = v8;
    LODWORD(v8) = v8 - 1;
    if (!v5)
      break;
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End();
  }
  return v4 + 2;
}

void sub_2263C8678(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2263AC840((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_2263C8690(uint64_t a1, uint64_t *a2, unint64_t a3, uint64_t a4)
{
  uint64_t *result;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;

  result = sub_2263C85F0(a1, a3);
  if (a4)
  {
    v7 = &a2[a4];
    v8 = result;
    do
    {
      v9 = *a2;
      *v8 = *a2;
      if ((v9 & 7) != 0)
      {
        v10 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 2, v10));
        if ((v11 & 1) == 0)
          *v8 &= 0xFFFFFFFFFFFFFFF8;
      }
      ++a2;
      ++v8;
    }
    while (a2 != v7);
  }
  return result;
}

void sub_2263C8708(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t *v4;

  v1 = *((_QWORD *)this + 4);
  if (v1)
  {
    if (*((_QWORD *)this + 3) || (v3 = atomic_load((unint64_t *)(v1 - 16)), v3 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DetachIfNotUnique() [T = pxrInternal__aapl__pxrReserved__::TfToken]");
      v4 = sub_2263C8690((uint64_t)this, *((uint64_t **)this + 4), *(_QWORD *)this, *(_QWORD *)this);
      sub_2263C8530(this);
      *((_QWORD *)this + 4) = v4;
    }
  }
}

uint64_t *sub_2263C8778(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

_QWORD **sub_2263C87A0(_QWORD **a1, _QWORD *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_2263C8A08(a1);
}

uint64_t sub_2263C87B0(uint64_t *a1)
{
  sub_2263C0C4C(a1);
  return 1;
}

unint64_t sub_2263C87C8(uint64_t *a1)
{
  unint64_t *v1;
  unint64_t v2;
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;

  v1 = (unint64_t *)sub_2263C0C4C(a1);
  v2 = *v1;
  if (*v1)
  {
    v3 = (uint64_t *)v1[4];
    v4 = *v1;
    do
    {
      v5 = *v3++;
      v2 = (v5 & 0xFFFFFFFFFFFFFFF8)
         + (((v5 & 0xFFFFFFFFFFFFFFF8) + v2 + ((v5 & 0xFFFFFFFFFFFFFFF8) + v2) * ((v5 & 0xFFFFFFFFFFFFFFF8) + v2)) >> 1);
      --v4;
    }
    while (v4);
    v2 *= 0x9E3779B97F4A7C55;
  }
  return bswap64(v2);
}

BOOL sub_2263C8820(uint64_t *a1, uint64_t *a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)sub_2263C0C4C(a1);
  v4 = sub_2263C0C4C(a2);
  return sub_2263C8A70(v3, v4);
}

BOOL sub_2263C8854(uint64_t *a1, uint64_t a2)
{
  _QWORD *v3;

  v3 = (_QWORD *)sub_2263C0C4C(a1);
  return sub_2263C8A70(v3, a2);
}

uint64_t sub_2263C887C(uint64_t *a1)
{
  sub_2263C0C4C(a1);
  return 0;
}

uint64_t sub_2263C8898(uint64_t *a1, uint64_t a2)
{
  sub_2263C0C4C(a1);
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray();
  return a2;
}

std::type_info *sub_2263C88E4(uint64_t *a1)
{
  sub_2263C0C4C(a1);
  return &stru_24EDD6F78;
}

uint64_t sub_2263C8900(uint64_t *a1)
{
  sub_2263C0C4C(a1);
  return 1;
}

std::type_info *sub_2263C8918(uint64_t *a1)
{
  sub_2263C0C4C(a1);
  return &stru_24EDD6E68;
}

uint64_t sub_2263C8938(uint64_t *a1)
{
  return *(_QWORD *)sub_2263C0C4C(a1);
}

BOOL sub_2263C8950(uint64_t *a1, uint64_t a2)
{
  sub_2263C0C4C(a1);
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7VtArrayINS_7TfTokenEEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_2263C8990(uint64_t *a1)
{
  const std::type_info *v1;

  sub_2263C0C4C(a1);
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24EDD6F78, v1);
}

std::type_info *sub_2263C89B4(uint64_t *a1)
{
  sub_2263C0C4C(a1);
  return &stru_24EDD6F78;
}

uint64_t sub_2263C89D4@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;

  v3 = sub_2263C0C4C(a1);
  a2[1] = (uint64_t)off_24EDD8018;
  return sub_2263B131C(a2, v3);
}

_QWORD **sub_2263C8A08(_QWORD **a1)
{
  _QWORD *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *a1;
  if (*a1)
  {
    v3 = (unsigned int *)(v2 + 5);
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      __dmb(9u);
      sub_2263C8530(v2);
      MEMORY[0x2276980E0](v2, 0x1020C40874388CCLL);
    }
  }
  return a1;
}

BOOL sub_2263C8A70(_QWORD *a1, uint64_t a2)
{
  _BOOL8 result;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  BOOL v11;

  if (a1[4] == *(_QWORD *)(a2 + 32) && sub_2263B1164((uint64_t)a1, a2) && a1[3] == *(_QWORD *)(a2 + 24))
    return 1;
  result = sub_2263B1164((uint64_t)a1, a2);
  if (!result)
    return result;
  if (!*a1)
    return 1;
  v5 = (uint64_t *)a1[4];
  v6 = *(uint64_t **)(a2 + 32);
  v7 = 8 * *a1 - 8;
  do
  {
    v8 = *v5++;
    v9 = v8 & 0xFFFFFFFFFFFFFFF8;
    v10 = *v6++;
    result = v9 == (v10 & 0xFFFFFFFFFFFFFFF8);
    v11 = v9 != (v10 & 0xFFFFFFFFFFFFFFF8) || v7 == 0;
    v7 -= 8;
  }
  while (!v11);
  return result;
}

uint64_t sub_2263C8B14(uint64_t *a1)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  _QWORD *v12;

  v2 = atomic_load((unsigned int *)(sub_2263C0C4C(a1) + 40));
  if (v2 != 1)
  {
    v3 = operator new();
    v4 = sub_2263C0C4C(a1);
    v5 = *(_OWORD *)(v4 + 16);
    *(_OWORD *)v3 = *(_OWORD *)v4;
    *(_OWORD *)(v3 + 16) = v5;
    v6 = *(_QWORD *)(v4 + 32);
    *(_QWORD *)(v3 + 32) = v6;
    if (v6)
    {
      v7 = (unint64_t *)(v6 - 16);
      if (*(_QWORD *)(v3 + 24))
        v7 = *(unint64_t **)(v3 + 24);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
    v9 = (unsigned int *)(v3 + 40);
    atomic_store(0, (unsigned int *)(v3 + 40));
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    v12 = (_QWORD *)*a1;
    *a1 = v3;
    sub_2263C8A08(&v12);
  }
  return sub_2263C0C4C(a1);
}

uint64_t sub_2263C8BD8(_QWORD *a1)
{
  *a1 += 8;
  return pxrInternal__aapl__pxrReserved__::operator<<();
}

void sub_2263C8BF0(_QWORD *a1)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = a1[4];
  if (v1)
  {
    if (a1[3] || (v3 = atomic_load((unint64_t *)(v1 - 16)), v3 != 1))
    {
      sub_2263C8DF4(a1);
    }
    else if (*a1)
    {
      v4 = a1[4];
      v5 = 8 * *a1;
      do
      {
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        sub_2263BDE64(v4);
        v4 += 8;
        v5 -= 8;
      }
      while (v5);
    }
    *a1 = 0;
  }
}

void sub_2263C8C74(unint64_t *a1, unint64_t a2, _DWORD *a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  _DWORD *v9;
  _DWORD *v10;
  _DWORD *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *a1;
  if (*a1 == a2)
    return;
  if (!a2)
    goto LABEL_11;
  v7 = (_QWORD *)a1[4];
  if (!v7)
  {
    if (8 * a2 / a2 == 8)
    {
      v7 = sub_2263C8EB4((uint64_t)a1, a2);
      v10 = v7;
LABEL_18:
      sub_2263C8F54(a3, v10, &v7[a2]);
      goto LABEL_21;
    }
LABEL_11:
    sub_2263C8BF0(a1);
    return;
  }
  if (a1[3])
    goto LABEL_13;
  v8 = atomic_load(v7 - 2);
  if (v8 != 1)
  {
    v7 = (_QWORD *)a1[4];
LABEL_13:
    v11 = v7;
    if (v3 >= a2)
      v12 = a2;
    else
      v12 = *a1;
    v7 = sub_2263C8EB4((uint64_t)a1, a2);
    sub_2263C8FB0(v11, &v11[2 * v12], v7);
    if (v3 >= a2)
      goto LABEL_21;
    goto LABEL_17;
  }
  if (v3 < a2)
  {
    v9 = (_DWORD *)a1[4];
    if (*((_QWORD *)v9 - 1) < a2)
    {
      v7 = sub_2263C8EB4((uint64_t)a1, a2);
      sub_2263C8FB0(v9, &v9[2 * v3], v7);
    }
LABEL_17:
    v10 = &v7[v3];
    goto LABEL_18;
  }
  v13 = 8 * v3;
  v14 = 8 * a2;
  do
  {
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    sub_2263BDE64((uint64_t)&v7[(unint64_t)v14 / 8]);
    v14 += 8;
  }
  while (v13 != v14);
LABEL_21:
  if (v7 != (_QWORD *)a1[4])
  {
    sub_2263C8DF4(a1);
    a1[4] = (unint64_t)v7;
  }
  *a1 = a2;
}

void sub_2263C8DF4(_QWORD *a1)
{
  uint64_t v1;
  unint64_t *v3;
  _QWORD *v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  void (*v12)(void);

  v1 = a1[4];
  if (v1)
  {
    v4 = a1 + 3;
    v3 = (unint64_t *)a1[3];
    if (v3)
    {
      do
      {
        v10 = __ldxr(v3);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, v3));
      if (!v11)
      {
        __dmb(9u);
        v12 = *(void (**)(void))(*v4 + 8);
        if (v12)
          v12();
      }
    }
    else
    {
      v5 = (unint64_t *)(v1 - 16);
      do
      {
        v6 = __ldxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
      {
        __dmb(9u);
        v8 = a1[4];
        if (*a1)
        {
          v9 = 8 * *a1;
          do
          {
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            sub_2263BDE64(v8);
            v8 += 8;
            v9 -= 8;
          }
          while (v9);
          v8 = a1[4];
        }
        operator delete((void *)(v8 - 16));
      }
    }
    *v4 = 0;
    v4[1] = 0;
  }
}

_QWORD *sub_2263C8EB4(uint64_t a1, unint64_t a2)
{
  size_t v3;
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;

  v7 = 0;
  v8 = 0;
  sub_2263AC890((uint64_t)&v7);
  if (a2 > 0x1FFFFFFFFFFFFFFDLL)
    v3 = -1;
  else
    v3 = 8 * a2 + 16;
  v4 = operator new(v3);
  *v4 = 1;
  v4[1] = a2;
  while (1)
  {
    v5 = v8;
    LODWORD(v8) = v8 - 1;
    if (!v5)
      break;
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End();
  }
  return v4 + 2;
}

void sub_2263C8F3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2263AC840((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_DWORD *sub_2263C8F54(_DWORD *result, _DWORD *a2, _DWORD *a3)
{
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = *(_DWORD **)result;
    v6 = (_DWORD *)(*(_QWORD *)result + 4);
    do
    {
      sub_2263BDDD8(v4, v5);
      result = sub_2263BDE28(v4 + 1, v6);
      v4 += 2;
    }
    while (v4 != a3);
  }
  return result;
}

_DWORD *sub_2263C8FB0(_DWORD *a1, _DWORD *a2, _DWORD *a3)
{
  _DWORD *v5;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      sub_2263BDDD8(a3, v5);
      sub_2263BDE28(a3 + 1, v5 + 1);
      v5 += 2;
      a3 += 2;
    }
    while (v5 != a2);
  }
  return a3;
}

void sub_2263C9010(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this)
{
  uint64_t v1;
  unint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  _QWORD *v6;

  v1 = *((_QWORD *)this + 4);
  if (v1)
  {
    if (*((_QWORD *)this + 3) || (v3 = atomic_load((unint64_t *)(v1 - 16)), v3 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfPath>::_DetachIfNotUnique() [ELEM = pxrInternal__aapl__pxrReserved__::SdfPath]");
      v4 = (_DWORD *)*((_QWORD *)this + 4);
      v5 = *(_QWORD *)this;
      v6 = sub_2263C8EB4((uint64_t)this, *(_QWORD *)this);
      sub_2263C8FB0(v4, &v4[2 * v5], v6);
      sub_2263C8DF4(this);
      *((_QWORD *)this + 4) = v6;
    }
  }
}

uint64_t *sub_2263C9098(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

_QWORD **sub_2263C90C0(_QWORD **a1, _QWORD *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_2263C92F8(a1);
}

uint64_t sub_2263C90D0(uint64_t *a1)
{
  sub_2263C9360(a1);
  return 1;
}

unint64_t sub_2263C90E8(uint64_t *a1)
{
  unint64_t *v1;
  char v3;

  v1 = (unint64_t *)sub_2263C9360(a1);
  return sub_2263C93A0((uint64_t)&v3, v1);
}

BOOL sub_2263C9110(uint64_t *a1, uint64_t *a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)sub_2263C9360(a1);
  v4 = sub_2263C9360(a2);
  return sub_2263C93F0(v3, v4);
}

BOOL sub_2263C9144(uint64_t *a1, uint64_t a2)
{
  _QWORD *v3;

  v3 = (_QWORD *)sub_2263C9360(a1);
  return sub_2263C93F0(v3, a2);
}

uint64_t sub_2263C916C(uint64_t *a1)
{
  sub_2263C9360(a1);
  return 0;
}

uint64_t sub_2263C9188(uint64_t *a1, uint64_t a2)
{
  sub_2263C9360(a1);
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray();
  return a2;
}

void *sub_2263C91D4(uint64_t *a1)
{
  sub_2263C9360(a1);
  return &unk_24EDD8188;
}

uint64_t sub_2263C91F0(uint64_t *a1)
{
  sub_2263C9360(a1);
  return 1;
}

std::type_info *sub_2263C9208(uint64_t *a1)
{
  sub_2263C9360(a1);
  return &stru_24EDD6F08;
}

uint64_t sub_2263C9228(uint64_t *a1)
{
  return *(_QWORD *)sub_2263C9360(a1);
}

BOOL sub_2263C9240(uint64_t *a1, uint64_t a2)
{
  sub_2263C9360(a1);
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7VtArrayINS_7SdfPathEEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_2263C9280(uint64_t *a1)
{
  const std::type_info *v1;

  sub_2263C9360(a1);
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&unk_24EDD8188, v1);
}

void *sub_2263C92A4(uint64_t *a1)
{
  sub_2263C9360(a1);
  return &unk_24EDD8188;
}

uint64_t sub_2263C92C4@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;

  v3 = sub_2263C9360(a1);
  a2[1] = (uint64_t)&off_24EDD80D0;
  return sub_2263B131C(a2, v3);
}

_QWORD **sub_2263C92F8(_QWORD **a1)
{
  _QWORD *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *a1;
  if (*a1)
  {
    v3 = (unsigned int *)(v2 + 5);
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      __dmb(9u);
      sub_2263C8DF4(v2);
      MEMORY[0x2276980E0](v2, 0x1020C40874388CCLL);
    }
  }
  return a1;
}

uint64_t sub_2263C9360(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (!result)
    __assert_rtn("operator->", "intrusive_ptr.hpp", 199, "px != 0");
  return result;
}

unint64_t sub_2263C93A0(uint64_t a1, unint64_t *a2)
{
  unint64_t v2;
  unsigned int *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v2 = *a2;
  if (*a2)
  {
    v3 = (unsigned int *)a2[4];
    v4 = *a2;
    do
    {
      v5 = *v3;
      v6 = v3[1];
      v3 += 2;
      v7 = v2 + v5 + (v2 + v5) * (v2 + v5);
      v2 = v6 + ((v6 + v5 + (v7 >> 1) + (v6 + v5 + (v7 >> 1)) * (v6 + v5 + (v7 >> 1))) >> 1);
      --v4;
    }
    while (v4);
    v2 *= 0x9E3779B97F4A7C55;
  }
  return bswap64(v2);
}

BOOL sub_2263C93F0(_QWORD *a1, uint64_t a2)
{
  _BOOL8 result;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;

  if (a1[4] == *(_QWORD *)(a2 + 32) && sub_2263B1164((uint64_t)a1, a2) && a1[3] == *(_QWORD *)(a2 + 24))
    return 1;
  result = sub_2263B1164((uint64_t)a1, a2);
  if (!result)
    return result;
  if (!*a1)
    return 1;
  v5 = (uint64_t *)a1[4];
  v6 = *(uint64_t **)(a2 + 32);
  v7 = 8 * *a1 - 8;
  do
  {
    v9 = *v5++;
    v8 = v9;
    v10 = *v6++;
    result = v8 == v10;
    v11 = v8 != v10 || v7 == 0;
    v7 -= 8;
  }
  while (!v11);
  return result;
}

uint64_t sub_2263C948C(uint64_t *a1)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  _QWORD *v12;

  v2 = atomic_load((unsigned int *)(sub_2263C9360(a1) + 40));
  if (v2 != 1)
  {
    v3 = operator new();
    v4 = sub_2263C9360(a1);
    v5 = *(_OWORD *)(v4 + 16);
    *(_OWORD *)v3 = *(_OWORD *)v4;
    *(_OWORD *)(v3 + 16) = v5;
    v6 = *(_QWORD *)(v4 + 32);
    *(_QWORD *)(v3 + 32) = v6;
    if (v6)
    {
      v7 = (unint64_t *)(v6 - 16);
      if (*(_QWORD *)(v3 + 24))
        v7 = *(unint64_t **)(v3 + 24);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
    v9 = (unsigned int *)(v3 + 40);
    atomic_store(0, (unsigned int *)(v3 + 40));
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    v12 = (_QWORD *)*a1;
    *a1 = v3;
    sub_2263C92F8(&v12);
  }
  return sub_2263C9360(a1);
}

uint64_t sub_2263C9550(_QWORD *a1)
{
  *a1 += 8;
  return pxrInternal__aapl__pxrReserved__::operator<<();
}

void sub_2263C9568(_QWORD *a1)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t v4;
  char *v5;

  v1 = a1[4];
  if (v1)
  {
    if (a1[3] || (v3 = atomic_load((unint64_t *)(v1 - 16)), v3 != 1))
    {
      sub_2263C97A0(a1);
    }
    else if (*a1)
    {
      v4 = 48 * *a1;
      v5 = (char *)(a1[4] + 23);
      do
      {
        if (v5[24] < 0)
          operator delete(*(void **)(v5 + 1));
        if (*v5 < 0)
          operator delete(*(void **)(v5 - 23));
        v5 += 48;
        v4 -= 48;
      }
      while (v4);
    }
    *a1 = 0;
  }
}

void sub_2263C9600(unint64_t *a1, unint64_t a2, __int128 **a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;

  v3 = *a1;
  if (*a1 == a2)
    return;
  if (!a2)
    goto LABEL_11;
  v7 = (_QWORD *)a1[4];
  if (v7)
  {
    if (!a1[3])
    {
      v8 = atomic_load(v7 - 2);
      if (v8 == 1)
      {
        if (v3 >= a2)
        {
          v13 = 48 * v3;
          v14 = 48 * a2;
          do
          {
            v15 = &v7[(unint64_t)v14 / 8];
            if (SHIBYTE(v7[(unint64_t)v14 / 8 + 5]) < 0)
              operator delete((void *)v15[3]);
            if (*((char *)v15 + 23) < 0)
              operator delete((void *)v7[(unint64_t)v14 / 8]);
            v14 += 48;
          }
          while (v13 != v14);
          goto LABEL_25;
        }
        v9 = a1[4];
        if (*(_QWORD *)(v9 - 8) < a2)
        {
          v7 = sub_2263C9874((uint64_t)a1, a2);
          sub_2263C9A68(v9, v9 + 48 * v3, (uint64_t)v7);
        }
LABEL_17:
        v10 = &v7[6 * v3];
        goto LABEL_18;
      }
      v7 = (_QWORD *)a1[4];
    }
    v11 = (uint64_t)v7;
    if (v3 >= a2)
      v12 = a2;
    else
      v12 = *a1;
    v7 = sub_2263C9874((uint64_t)a1, a2);
    sub_2263C9A68(v11, v11 + 48 * v12, (uint64_t)v7);
    if (v3 >= a2)
      goto LABEL_25;
    goto LABEL_17;
  }
  if (a2 > 0x555555555555555)
  {
LABEL_11:
    sub_2263C9568(a1);
    return;
  }
  v10 = sub_2263C9874((uint64_t)a1, a2);
  v7 = v10;
LABEL_18:
  sub_2263C9918((uint64_t)v10, (uint64_t)&v7[6 * a2], *a3);
LABEL_25:
  if (v7 != (_QWORD *)a1[4])
  {
    sub_2263C97A0(a1);
    a1[4] = (unint64_t)v7;
  }
  *a1 = a2;
}

void sub_2263C97A0(_QWORD *a1)
{
  uint64_t v1;
  unint64_t *v3;
  _QWORD *v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  void (*v13)(void);

  v1 = a1[4];
  if (v1)
  {
    v4 = a1 + 3;
    v3 = (unint64_t *)a1[3];
    if (v3)
    {
      do
      {
        v11 = __ldxr(v3);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v3));
      if (!v12)
      {
        __dmb(9u);
        v13 = *(void (**)(void))(*v4 + 8);
        if (v13)
          v13();
      }
    }
    else
    {
      v5 = (unint64_t *)(v1 - 16);
      do
      {
        v6 = __ldxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
      {
        __dmb(9u);
        v8 = a1[4];
        if (*a1)
        {
          v9 = 48 * *a1;
          v10 = (char *)(v8 + 23);
          do
          {
            if (v10[24] < 0)
              operator delete(*(void **)(v10 + 1));
            if (*v10 < 0)
              operator delete(*(void **)(v10 - 23));
            v10 += 48;
            v9 -= 48;
          }
          while (v9);
          v8 = a1[4];
        }
        operator delete((void *)(v8 - 16));
      }
    }
    *v4 = 0;
    v4[1] = 0;
  }
}

_QWORD *sub_2263C9874(uint64_t a1, unint64_t a2)
{
  size_t v3;
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;

  v7 = 0;
  v8 = 0;
  sub_2263AC890((uint64_t)&v7);
  if (a2 > 0x555555555555554)
    v3 = -1;
  else
    v3 = 48 * a2 + 16;
  v4 = operator new(v3);
  *v4 = 1;
  v4[1] = a2;
  while (1)
  {
    v5 = v8;
    LODWORD(v8) = v8 - 1;
    if (!v5)
      break;
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End();
  }
  return v4 + 2;
}

void sub_2263C9900(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2263AC840((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2263C9918(uint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t v3;
  uint64_t v6;
  __int128 *v7;
  uint64_t v8;
  __int128 v9;
  _BYTE *v10;
  __int128 v11;

  v3 = a1;
  if (a1 != a2)
  {
    v6 = 0;
    v7 = (__int128 *)((char *)a3 + 24);
    do
    {
      v8 = v3 + v6;
      if (*((char *)a3 + 23) < 0)
      {
        sub_2263AE36C((_BYTE *)v8, *(void **)a3, *((_QWORD *)a3 + 1));
      }
      else
      {
        v9 = *a3;
        *(_QWORD *)(v8 + 16) = *((_QWORD *)a3 + 2);
        *(_OWORD *)v8 = v9;
      }
      v10 = (_BYTE *)(v3 + v6 + 24);
      if (*((char *)a3 + 47) < 0)
      {
        sub_2263AE36C(v10, *((void **)a3 + 3), *((_QWORD *)a3 + 4));
      }
      else
      {
        v11 = *v7;
        *(_QWORD *)(v3 + v6 + 40) = *((_QWORD *)v7 + 2);
        *(_OWORD *)v10 = v11;
      }
      v6 += 48;
    }
    while (v3 + v6 != a2);
    return a2;
  }
  return v3;
}

void sub_2263C99C8(void *a1)
{
  uint64_t v1;
  uint64_t v2;

  __cxa_begin_catch(a1);
  for (; v2; v2 -= 48)
  {
    sub_2263C9A24(v1);
    v1 += 48;
  }
  __cxa_rethrow();
}

void sub_2263C9A10(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_2263C9A24(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t sub_2263C9A68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 *v8;
  __int128 v9;
  _BYTE *v10;
  void **v11;
  __int128 v12;

  if (a1 == a2)
    return a1;
  v5 = a2;
  v6 = 0;
  do
  {
    v7 = a3 + v6;
    v8 = (__int128 *)(a1 + v6);
    if (*(char *)(a1 + v6 + 23) < 0)
    {
      sub_2263AE36C((_BYTE *)v7, *(void **)v8, *((_QWORD *)v8 + 1));
    }
    else
    {
      v9 = *v8;
      *(_QWORD *)(v7 + 16) = *((_QWORD *)v8 + 2);
      *(_OWORD *)v7 = v9;
    }
    v10 = (_BYTE *)(a3 + v6 + 24);
    v11 = (void **)(a1 + v6 + 24);
    if (*(char *)(a1 + v6 + 47) < 0)
    {
      sub_2263AE36C(v10, *v11, *(_QWORD *)(a1 + v6 + 32));
    }
    else
    {
      v12 = *(_OWORD *)v11;
      *(_QWORD *)(a3 + v6 + 40) = *(_QWORD *)(a1 + v6 + 40);
      *(_OWORD *)v10 = v12;
    }
    v6 += 48;
  }
  while (a1 + v6 != v5);
  return v5;
}

void sub_2263C9B28(void *a1)
{
  uint64_t v1;
  uint64_t v2;

  __cxa_begin_catch(a1);
  for (; v2; v2 -= 48)
  {
    sub_2263C9A24(v1);
    v1 += 48;
  }
  __cxa_rethrow();
}

void sub_2263C9B70(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_2263C9B84(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v1 = *((_QWORD *)this + 4);
  if (v1)
  {
    if (*((_QWORD *)this + 3) || (v3 = atomic_load((unint64_t *)(v1 - 16)), v3 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>::_DetachIfNotUnique() [ELEM = pxrInternal__aapl__pxrReserved__::SdfAssetPath]");
      v4 = *((_QWORD *)this + 4);
      v5 = *(_QWORD *)this;
      v6 = sub_2263C9874((uint64_t)this, *(_QWORD *)this);
      sub_2263C9A68(v4, v4 + 48 * v5, (uint64_t)v6);
      sub_2263C97A0(this);
      *((_QWORD *)this + 4) = v6;
    }
  }
}

uint64_t *sub_2263C9C10(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

_QWORD **sub_2263C9C38(_QWORD **a1, _QWORD *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_2263C9E70(a1);
}

uint64_t sub_2263C9C48(uint64_t *a1)
{
  sub_2263C0D9C(a1);
  return 1;
}

unint64_t sub_2263C9C60(uint64_t *a1)
{
  uint64_t *v1;
  char v3;

  v1 = (uint64_t *)sub_2263C0D9C(a1);
  return sub_2263C9ED8((uint64_t)&v3, v1);
}

uint64_t sub_2263C9C88(uint64_t *a1, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t v4;

  v3 = (uint64_t *)sub_2263C0D9C(a1);
  v4 = sub_2263C0D9C(a2);
  return sub_2263C9FC4(v3, v4);
}

uint64_t sub_2263C9CBC(uint64_t *a1, uint64_t a2)
{
  uint64_t *v3;

  v3 = (uint64_t *)sub_2263C0D9C(a1);
  return sub_2263C9FC4(v3, a2);
}

uint64_t sub_2263C9CE4(uint64_t *a1)
{
  sub_2263C0D9C(a1);
  return 0;
}

uint64_t sub_2263C9D00(uint64_t *a1, uint64_t a2)
{
  sub_2263C0D9C(a1);
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray();
  return a2;
}

std::type_info *sub_2263C9D4C(uint64_t *a1)
{
  sub_2263C0D9C(a1);
  return &stru_24EDD6F90;
}

uint64_t sub_2263C9D68(uint64_t *a1)
{
  sub_2263C0D9C(a1);
  return 1;
}

std::type_info *sub_2263C9D80(uint64_t *a1)
{
  sub_2263C0D9C(a1);
  return &stru_24EDD6E78;
}

uint64_t sub_2263C9DA0(uint64_t *a1)
{
  return *(_QWORD *)sub_2263C0D9C(a1);
}

BOOL sub_2263C9DB8(uint64_t *a1, uint64_t a2)
{
  sub_2263C0D9C(a1);
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7VtArrayINS_12SdfAssetPathEEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_2263C9DF8(uint64_t *a1)
{
  const std::type_info *v1;

  sub_2263C0D9C(a1);
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24EDD6F90, v1);
}

std::type_info *sub_2263C9E1C(uint64_t *a1)
{
  sub_2263C0D9C(a1);
  return &stru_24EDD6F90;
}

uint64_t sub_2263C9E3C@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;

  v3 = sub_2263C0D9C(a1);
  a2[1] = (uint64_t)off_24EDD81A0;
  return sub_2263B131C(a2, v3);
}

_QWORD **sub_2263C9E70(_QWORD **a1)
{
  _QWORD *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *a1;
  if (*a1)
  {
    v3 = (unsigned int *)(v2 + 5);
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      __dmb(9u);
      sub_2263C97A0(v2);
      MEMORY[0x2276980E0](v2, 0x1020C40874388CCLL);
    }
  }
  return a1;
}

unint64_t sub_2263C9ED8(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  const char *v3;
  const char *v4;
  unint64_t v5;
  _QWORD v7[2];

  v2 = *a2;
  v7[0] = v2;
  v7[1] = 1;
  if (v2)
  {
    v3 = (const char *)a2[4];
    do
    {
      --v2;
      v4 = v3 + 48;
      sub_2263C9F4C((uint64_t)v7, v3);
      v3 = v4;
    }
    while (v2);
    v5 = 0x9E3779B97F4A7C55 * v7[0];
  }
  else
  {
    v5 = 0;
  }
  return bswap64(v5);
}

uint64_t sub_2263C9F4C(uint64_t a1, const char *a2)
{
  uint64_t result;
  unint64_t v4;
  _QWORD v5[2];

  v5[0] = 0;
  v5[1] = 0;
  result = sub_2263C3588((pxrInternal__aapl__pxrReserved__::Tf_HashState *)v5, a2, (uint64_t)(a2 + 24));
  v4 = bswap64(0x9E3779B97F4A7C55 * v5[0]);
  if (*(_BYTE *)(a1 + 8))
    v4 += (*(_QWORD *)a1 + v4 + (*(_QWORD *)a1 + v4) * (*(_QWORD *)a1 + v4)) >> 1;
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v4;
  return result;
}

uint64_t sub_2263C9FC4(uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  uint64_t v8;
  uint64_t v9;

  if (a1[4] == *(_QWORD *)(a2 + 32) && sub_2263B1164((uint64_t)a1, a2) && a1[3] == *(_QWORD *)(a2 + 24))
    return 1;
  result = sub_2263B1164((uint64_t)a1, a2);
  if (!(_DWORD)result)
    return result;
  v5 = *a1;
  if (!*a1)
    return 1;
  v6 = (unsigned __int8 *)a1[4];
  v7 = *(unsigned __int8 **)(a2 + 32);
  v8 = 48 * v5 - 48;
  do
  {
    result = sub_2263C35E0(v6, v7);
    if (!(_DWORD)result)
      break;
    v6 += 48;
    v7 += 48;
    v9 = v8;
    v8 -= 48;
  }
  while (v9);
  return result;
}

uint64_t sub_2263CA074(uint64_t *a1)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  _QWORD *v12;

  v2 = atomic_load((unsigned int *)(sub_2263C0D9C(a1) + 40));
  if (v2 != 1)
  {
    v3 = operator new();
    v4 = sub_2263C0D9C(a1);
    v5 = *(_OWORD *)(v4 + 16);
    *(_OWORD *)v3 = *(_OWORD *)v4;
    *(_OWORD *)(v3 + 16) = v5;
    v6 = *(_QWORD *)(v4 + 32);
    *(_QWORD *)(v3 + 32) = v6;
    if (v6)
    {
      v7 = (unint64_t *)(v6 - 16);
      if (*(_QWORD *)(v3 + 24))
        v7 = *(unint64_t **)(v3 + 24);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
    v9 = (unsigned int *)(v3 + 40);
    atomic_store(0, (unsigned int *)(v3 + 40));
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    v12 = (_QWORD *)*a1;
    *a1 = v3;
    sub_2263C9E70(&v12);
  }
  return sub_2263C0D9C(a1);
}

uint64_t sub_2263CA138(_QWORD *a1)
{
  *a1 += 48;
  return pxrInternal__aapl__pxrReserved__::operator<<();
}

void sub_2263CA150(unint64_t *a1, unint64_t a2, _DWORD **a3)
{
  unint64_t v3;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  unint64_t *v14;
  uint64_t v15;
  unint64_t *v16;
  uint64_t v17;
  _DWORD *v18;
  unint64_t v19;
  unint64_t *v20;
  uint64_t v21;
  unint64_t *v22;
  int v23;
  _DWORD *v24;
  uint64_t v25;

  v3 = *a1;
  if (*a1 == a2)
    return;
  if (!a2)
    goto LABEL_18;
  v7 = (unint64_t *)a1[4];
  if (v7)
  {
    if (!a1[3])
    {
      v8 = atomic_load(v7 - 2);
      if (v8 == 1)
      {
        if (v3 < a2)
        {
          v9 = a1[4];
          if (*(_QWORD *)(v9 - 8) < a2)
          {
            v10 = sub_2263CA304((uint64_t)a1, a2);
            v7 = v10;
            if (v3)
            {
              v11 = 0;
              do
              {
                *(_DWORD *)((char *)v10 + v11) = *(_DWORD *)(v9 + v11);
                v11 += 4;
              }
              while (4 * v3 != v11);
            }
          }
          v12 = *a3;
          v13 = 4 * v3;
          do
          {
            *(_DWORD *)((char *)v7 + v13) = *v12;
            v13 += 4;
          }
          while (4 * a2 != v13);
        }
        v14 = v7;
        goto LABEL_29;
      }
      v7 = (unint64_t *)a1[4];
    }
    if (v3 >= a2)
      v19 = a2;
    else
      v19 = *a1;
    v20 = sub_2263CA304((uint64_t)a1, a2);
    v14 = v20;
    if (v19)
    {
      v21 = 4 * v19;
      v22 = v20;
      do
      {
        v23 = *(_DWORD *)v7;
        v7 = (unint64_t *)((char *)v7 + 4);
        *(_DWORD *)v22 = v23;
        v22 = (unint64_t *)((char *)v22 + 4);
        v21 -= 4;
      }
      while (v21);
    }
    if (v3 < a2)
    {
      v24 = *a3;
      v25 = 4 * v3;
      do
      {
        *(_DWORD *)((char *)v20 + v25) = *v24;
        v25 += 4;
      }
      while (4 * a2 != v25);
    }
    goto LABEL_29;
  }
  v15 = 4 * a2;
  if (4 * a2 / a2 != 4)
  {
LABEL_18:
    sub_2263AD1C8(a1);
    return;
  }
  v16 = sub_2263CA304((uint64_t)a1, a2);
  v14 = v16;
  v17 = 0;
  v18 = *a3;
  do
  {
    *(_DWORD *)((char *)v16 + v17) = *v18;
    v17 += 4;
  }
  while (v15 != v17);
LABEL_29:
  if (v14 != (unint64_t *)a1[4])
  {
    sub_2263AC71C((uint64_t)a1);
    a1[4] = (unint64_t)v14;
  }
  *a1 = a2;
}

_QWORD *sub_2263CA304(uint64_t a1, unint64_t a2)
{
  size_t v3;
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;

  v7 = 0;
  v8 = 0;
  sub_2263AC890((uint64_t)&v7);
  if (a2 > 0x3FFFFFFFFFFFFFFBLL)
    v3 = -1;
  else
    v3 = 4 * a2 + 16;
  v4 = operator new(v3);
  *v4 = 1;
  v4[1] = a2;
  while (1)
  {
    v5 = v8;
    LODWORD(v8) = v8 - 1;
    if (!v5)
      break;
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End();
  }
  return v4 + 2;
}

void sub_2263CA38C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2263AC840((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2263CA3A4(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this)
{
  uint64_t v1;
  unint64_t v3;
  int *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _DWORD *v9;
  int v10;

  v1 = *((_QWORD *)this + 4);
  if (v1)
  {
    if (*((_QWORD *)this + 3) || (v3 = atomic_load((unint64_t *)(v1 - 16)), v3 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<float>::_DetachIfNotUnique() [T = float]");
      v4 = (int *)*((_QWORD *)this + 4);
      v5 = *(_QWORD *)this;
      v6 = sub_2263CA304((uint64_t)this, *(_QWORD *)this);
      v7 = v6;
      if (v5)
      {
        v8 = 4 * v5;
        v9 = v6;
        do
        {
          v10 = *v4++;
          *v9++ = v10;
          v8 -= 4;
        }
        while (v8);
      }
      sub_2263AC71C((uint64_t)this);
      *((_QWORD *)this + 4) = v7;
    }
  }
}

uint64_t *sub_2263CA438(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t *sub_2263CA460(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_2263CA684(a1);
}

uint64_t sub_2263CA470(uint64_t *a1)
{
  sub_2263C105C(a1);
  return 1;
}

unint64_t sub_2263CA488(uint64_t *a1)
{
  unint64_t *v1;

  v1 = (unint64_t *)sub_2263C105C(a1);
  return sub_2263CA6EC(v1);
}

BOOL sub_2263CA49C(uint64_t *a1, uint64_t *a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)sub_2263C105C(a1);
  v4 = sub_2263C105C(a2);
  return sub_2263CA740(v3, v4);
}

BOOL sub_2263CA4D0(uint64_t *a1, uint64_t a2)
{
  _QWORD *v3;

  v3 = (_QWORD *)sub_2263C105C(a1);
  return sub_2263CA740(v3, a2);
}

uint64_t sub_2263CA4F8(uint64_t *a1)
{
  sub_2263C105C(a1);
  return 0;
}

uint64_t sub_2263CA514(uint64_t *a1, uint64_t a2)
{
  sub_2263C105C(a1);
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray();
  return a2;
}

std::type_info *sub_2263CA560(uint64_t *a1)
{
  sub_2263C105C(a1);
  return &stru_24EDD6FA8;
}

uint64_t sub_2263CA57C(uint64_t *a1)
{
  sub_2263C105C(a1);
  return 1;
}

uint64_t sub_2263CA594(uint64_t *a1)
{
  sub_2263C105C(a1);
  return MEMORY[0x24BEDB788];
}

uint64_t sub_2263CA5B4(uint64_t *a1)
{
  return *(_QWORD *)sub_2263C105C(a1);
}

BOOL sub_2263CA5CC(uint64_t *a1, uint64_t a2)
{
  sub_2263C105C(a1);
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7VtArrayIfEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_2263CA60C(uint64_t *a1)
{
  const std::type_info *v1;

  sub_2263C105C(a1);
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24EDD6FA8, v1);
}

std::type_info *sub_2263CA630(uint64_t *a1)
{
  sub_2263C105C(a1);
  return &stru_24EDD6FA8;
}

uint64_t sub_2263CA650@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;

  v3 = sub_2263C105C(a1);
  a2[1] = (uint64_t)&off_24EDD8258;
  return sub_2263CA8B4(a2, v3);
}

uint64_t *sub_2263CA684(uint64_t *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *a1;
  if (*a1)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      __dmb(9u);
      sub_2263AC71C(v2);
      MEMORY[0x2276980E0](v2, 0x10A0C407A159F4ELL);
    }
  }
  return a1;
}

unint64_t sub_2263CA6EC(unint64_t *a1)
{
  unint64_t v1;
  float *v2;
  unint64_t v3;
  float v4;
  float v5;

  v1 = *a1;
  if (*a1)
  {
    v2 = (float *)a1[4];
    v3 = *a1;
    do
    {
      v4 = *v2++;
      v5 = v4;
      if (v4 == 0.0)
        v5 = 0.0;
      v1 = LODWORD(v5) + ((v1 + LODWORD(v5) + (v1 + LODWORD(v5)) * (v1 + LODWORD(v5))) >> 1);
      --v3;
    }
    while (v3);
    v1 *= 0x9E3779B97F4A7C55;
  }
  return bswap64(v1);
}

BOOL sub_2263CA740(_QWORD *a1, uint64_t a2)
{
  _BOOL8 result;
  float *v5;
  float *v6;
  uint64_t v7;
  float v8;
  float v9;
  float v10;
  BOOL v11;

  if (a1[4] == *(_QWORD *)(a2 + 32) && sub_2263B1164((uint64_t)a1, a2) && a1[3] == *(_QWORD *)(a2 + 24))
    return 1;
  result = sub_2263B1164((uint64_t)a1, a2);
  if (!result)
    return result;
  if (!*a1)
    return 1;
  v5 = (float *)a1[4];
  v6 = *(float **)(a2 + 32);
  v7 = 4 * *a1 - 4;
  do
  {
    v8 = *v5++;
    v9 = v8;
    v10 = *v6++;
    result = v9 == v10;
    v11 = v9 != v10 || v7 == 0;
    v7 -= 4;
  }
  while (!v11);
  return result;
}

uint64_t sub_2263CA7DC(uint64_t *a1)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v12;

  v2 = atomic_load((unsigned int *)(sub_2263C105C(a1) + 40));
  if (v2 != 1)
  {
    v3 = operator new();
    v4 = sub_2263C105C(a1);
    v5 = *(_OWORD *)(v4 + 16);
    *(_OWORD *)v3 = *(_OWORD *)v4;
    *(_OWORD *)(v3 + 16) = v5;
    v6 = *(_QWORD *)(v4 + 32);
    *(_QWORD *)(v3 + 32) = v6;
    if (v6)
    {
      v7 = (unint64_t *)(v6 - 16);
      if (*(_QWORD *)(v3 + 24))
        v7 = *(unint64_t **)(v3 + 24);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
    v9 = (unsigned int *)(v3 + 40);
    atomic_store(0, (unsigned int *)(v3 + 40));
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    v12 = *a1;
    *a1 = v3;
    sub_2263CA684(&v12);
  }
  return sub_2263C105C(a1);
}

uint64_t sub_2263CA8A0(_QWORD *a1)
{
  *a1 += 4;
  return pxrInternal__aapl__pxrReserved__::VtStreamOut();
}

uint64_t sub_2263CA8B4(uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  unsigned int *v9;
  unsigned int v10;

  result = operator new();
  v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)result = *(_OWORD *)a2;
  *(_OWORD *)(result + 16) = v5;
  v6 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 32) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 - 16);
    if (*(_QWORD *)(result + 24))
      v7 = *(unint64_t **)(result + 24);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = (unsigned int *)(result + 40);
  atomic_store(0, (unsigned int *)(result + 40));
  *a1 = result;
  do
    v10 = __ldxr(v9);
  while (__stxr(v10 + 1, v9));
  return result;
}

void sub_2263CA93C(unint64_t *a1, unint64_t a2, uint64_t **a3)
{
  unint64_t v3;
  uint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t i;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;

  v3 = *a1;
  if (*a1 == a2)
    return;
  if (!a2)
    goto LABEL_18;
  v7 = (uint64_t *)a1[4];
  if (v7)
  {
    if (!a1[3])
    {
      v8 = atomic_load((unint64_t *)v7 - 2);
      if (v8 == 1)
      {
        if (v3 < a2)
        {
          v9 = a1[4];
          if (*(_QWORD *)(v9 - 8) < a2)
          {
            v10 = sub_2263C1270((uint64_t)a1, a2);
            v7 = v10;
            if (v3)
            {
              for (i = 0; i != v3; ++i)
                v10[i] = *(_QWORD *)(v9 + i * 8);
            }
          }
          v12 = *a3;
          v13 = v3;
          do
            v7[v13++] = *v12;
          while (a2 != v13);
        }
        v14 = v7;
        goto LABEL_29;
      }
      v7 = (uint64_t *)a1[4];
    }
    if (v3 >= a2)
      v19 = a2;
    else
      v19 = *a1;
    v20 = sub_2263C1270((uint64_t)a1, a2);
    v14 = v20;
    if (v19)
    {
      v21 = 8 * v19;
      v22 = v20;
      do
      {
        v23 = *v7++;
        *v22++ = v23;
        v21 -= 8;
      }
      while (v21);
    }
    if (v3 < a2)
    {
      v24 = *a3;
      v25 = v3;
      do
        v20[v25++] = *v24;
      while (a2 != v25);
    }
    goto LABEL_29;
  }
  v15 = 8 * a2;
  if (8 * a2 / a2 != 8)
  {
LABEL_18:
    sub_2263AD1C8(a1);
    return;
  }
  v16 = sub_2263C1270((uint64_t)a1, a2);
  v14 = v16;
  v17 = 0;
  v18 = *a3;
  do
  {
    v16[v17 / 8] = *v18;
    v17 += 8;
  }
  while (v15 != v17);
LABEL_29:
  if (v14 != (uint64_t *)a1[4])
  {
    sub_2263AC71C((uint64_t)a1);
    a1[4] = (unint64_t)v14;
  }
  *a1 = a2;
}

uint64_t *sub_2263CAAF0(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t *sub_2263CAB18(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_2263CAD50(a1);
}

uint64_t sub_2263CAB28(uint64_t *a1)
{
  sub_2263B1E04(a1);
  return 1;
}

unint64_t sub_2263CAB40(uint64_t *a1)
{
  uint64_t *v1;
  char v3;

  v1 = (uint64_t *)sub_2263B1E04(a1);
  return sub_2263CADB8((uint64_t)&v3, v1);
}

BOOL sub_2263CAB68(uint64_t *a1, uint64_t *a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)sub_2263B1E04(a1);
  v4 = sub_2263B1E04(a2);
  return sub_2263CAE9C(v3, v4);
}

BOOL sub_2263CAB9C(uint64_t *a1, uint64_t a2)
{
  _QWORD *v3;

  v3 = (_QWORD *)sub_2263B1E04(a1);
  return sub_2263CAE9C(v3, a2);
}

uint64_t sub_2263CABC4(uint64_t *a1)
{
  sub_2263B1E04(a1);
  return 0;
}

uint64_t sub_2263CABE0(uint64_t *a1, uint64_t a2)
{
  sub_2263B1E04(a1);
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray();
  return a2;
}

std::type_info *sub_2263CAC2C(uint64_t *a1)
{
  sub_2263B1E04(a1);
  return &stru_24EDD69B8;
}

uint64_t sub_2263CAC48(uint64_t *a1)
{
  sub_2263B1E04(a1);
  return 1;
}

std::type_info *sub_2263CAC60(uint64_t *a1)
{
  sub_2263B1E04(a1);
  return &stru_24EDD6EA8;
}

uint64_t sub_2263CAC80(uint64_t *a1)
{
  return *(_QWORD *)sub_2263B1E04(a1);
}

BOOL sub_2263CAC98(uint64_t *a1, uint64_t a2)
{
  sub_2263B1E04(a1);
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7VtArrayINS_7GfVec2fEEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_2263CACD8(uint64_t *a1)
{
  const std::type_info *v1;

  sub_2263B1E04(a1);
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24EDD69B8, v1);
}

std::type_info *sub_2263CACFC(uint64_t *a1)
{
  sub_2263B1E04(a1);
  return &stru_24EDD69B8;
}

uint64_t sub_2263CAD1C@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;

  v3 = sub_2263B1E04(a1);
  a2[1] = (uint64_t)off_24EDD8310;
  return sub_2263B131C(a2, v3);
}

uint64_t *sub_2263CAD50(uint64_t *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *a1;
  if (*a1)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      __dmb(9u);
      sub_2263AC71C(v2);
      MEMORY[0x2276980E0](v2, 0x1020C40874388CCLL);
    }
  }
  return a1;
}

unint64_t sub_2263CADB8(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  float *v3;
  float *v4;
  unint64_t v5;
  _QWORD v7[2];

  v2 = *a2;
  v7[0] = v2;
  v7[1] = 1;
  if (v2)
  {
    v3 = (float *)a2[4];
    do
    {
      --v2;
      v4 = v3 + 2;
      sub_2263CAE2C((uint64_t)v7, v3);
      v3 = v4;
    }
    while (v2);
    v5 = 0x9E3779B97F4A7C55 * v7[0];
  }
  else
  {
    v5 = 0;
  }
  return bswap64(v5);
}

uint64_t sub_2263CAE2C(uint64_t result, float *a2)
{
  float v2;
  uint64_t v3;
  float v4;
  unint64_t v5;

  v2 = *a2;
  if (*a2 == 0.0)
    v2 = 0.0;
  v3 = LODWORD(v2);
  if (a2[1] == 0.0)
    v4 = 0.0;
  else
    v4 = a2[1];
  v5 = bswap64(0x9E3779B97F4A7C55* (LODWORD(v4) + ((LODWORD(v4) + v3 + (LODWORD(v4) + v3) * ((unint64_t)LODWORD(v4) + v3)) >> 1)));
  if (*(_BYTE *)(result + 8))
    v5 += (*(_QWORD *)result + v5 + (*(_QWORD *)result + v5) * (*(_QWORD *)result + v5)) >> 1;
  else
    *(_BYTE *)(result + 8) = 1;
  *(_QWORD *)result = v5;
  return result;
}

BOOL sub_2263CAE9C(_QWORD *a1, uint64_t a2)
{
  _BOOL8 result;
  float *v5;
  float *v6;
  float *v7;
  float v8;
  float v9;
  float v10;
  float v11;

  if (a1[4] == *(_QWORD *)(a2 + 32) && sub_2263B1164((uint64_t)a1, a2) && a1[3] == *(_QWORD *)(a2 + 24))
    return 1;
  result = sub_2263B1164((uint64_t)a1, a2);
  if (!result)
    return result;
  if (!*a1)
    return 1;
  v5 = (float *)a1[4];
  v6 = &v5[2 * *a1];
  v7 = *(float **)(a2 + 32);
  do
  {
    v8 = *v5;
    v9 = v5[1];
    v5 += 2;
    v10 = *v7;
    v11 = v7[1];
    v7 += 2;
    result = v9 == v11 && v8 == v10;
  }
  while (result && v5 != v6);
  return result;
}

uint64_t sub_2263CAF3C(uint64_t *a1)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v12;

  v2 = atomic_load((unsigned int *)(sub_2263B1E04(a1) + 40));
  if (v2 != 1)
  {
    v3 = operator new();
    v4 = sub_2263B1E04(a1);
    v5 = *(_OWORD *)(v4 + 16);
    *(_OWORD *)v3 = *(_OWORD *)v4;
    *(_OWORD *)(v3 + 16) = v5;
    v6 = *(_QWORD *)(v4 + 32);
    *(_QWORD *)(v3 + 32) = v6;
    if (v6)
    {
      v7 = (unint64_t *)(v6 - 16);
      if (*(_QWORD *)(v3 + 24))
        v7 = *(unint64_t **)(v3 + 24);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
    v9 = (unsigned int *)(v3 + 40);
    atomic_store(0, (unsigned int *)(v3 + 40));
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    v12 = *a1;
    *a1 = v3;
    sub_2263CAD50(&v12);
  }
  return sub_2263B1E04(a1);
}

uint64_t sub_2263CB000(_QWORD *a1)
{
  *a1 += 8;
  return pxrInternal__aapl__pxrReserved__::operator<<();
}

void sub_2263CB018(unint64_t *a1, unint64_t a2, uint64_t **a3)
{
  unint64_t v3;
  uint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t i;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;

  v3 = *a1;
  if (*a1 == a2)
    return;
  if (!a2)
    goto LABEL_18;
  v7 = (uint64_t *)a1[4];
  if (v7)
  {
    if (!a1[3])
    {
      v8 = atomic_load((unint64_t *)v7 - 2);
      if (v8 == 1)
      {
        if (v3 < a2)
        {
          v9 = a1[4];
          if (*(_QWORD *)(v9 - 8) < a2)
          {
            v10 = sub_2263CB1CC((uint64_t)a1, a2);
            v7 = v10;
            if (v3)
            {
              for (i = 0; i != v3; ++i)
                v10[i] = *(_QWORD *)(v9 + i * 8);
            }
          }
          v12 = *a3;
          v13 = v3;
          do
            v7[v13++] = *v12;
          while (a2 != v13);
        }
        v14 = v7;
        goto LABEL_29;
      }
      v7 = (uint64_t *)a1[4];
    }
    if (v3 >= a2)
      v19 = a2;
    else
      v19 = *a1;
    v20 = sub_2263CB1CC((uint64_t)a1, a2);
    v14 = v20;
    if (v19)
    {
      v21 = 8 * v19;
      v22 = v20;
      do
      {
        v23 = *v7++;
        *v22++ = v23;
        v21 -= 8;
      }
      while (v21);
    }
    if (v3 < a2)
    {
      v24 = *a3;
      v25 = v3;
      do
        v20[v25++] = *v24;
      while (a2 != v25);
    }
    goto LABEL_29;
  }
  v15 = 8 * a2;
  if (8 * a2 / a2 != 8)
  {
LABEL_18:
    sub_2263AD1C8(a1);
    return;
  }
  v16 = sub_2263CB1CC((uint64_t)a1, a2);
  v14 = v16;
  v17 = 0;
  v18 = *a3;
  do
  {
    v16[v17 / 8] = *v18;
    v17 += 8;
  }
  while (v15 != v17);
LABEL_29:
  if (v14 != (uint64_t *)a1[4])
  {
    sub_2263AC71C((uint64_t)a1);
    a1[4] = (unint64_t)v14;
  }
  *a1 = a2;
}

_QWORD *sub_2263CB1CC(uint64_t a1, unint64_t a2)
{
  size_t v3;
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;

  v7 = 0;
  v8 = 0;
  sub_2263AC890((uint64_t)&v7);
  if (a2 > 0x1FFFFFFFFFFFFFFDLL)
    v3 = -1;
  else
    v3 = 8 * a2 + 16;
  v4 = operator new(v3);
  *v4 = 1;
  v4[1] = a2;
  while (1)
  {
    v5 = v8;
    LODWORD(v8) = v8 - 1;
    if (!v5)
      break;
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End();
  }
  return v4 + 2;
}

void sub_2263CB254(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2263AC840((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2263CB26C(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;

  v1 = *((_QWORD *)this + 4);
  if (v1)
  {
    if (*((_QWORD *)this + 3) || (v3 = atomic_load((unint64_t *)(v1 - 16)), v3 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<double>::_DetachIfNotUnique() [T = double]");
      v4 = (uint64_t *)*((_QWORD *)this + 4);
      v5 = *(_QWORD *)this;
      v6 = sub_2263CB1CC((uint64_t)this, *(_QWORD *)this);
      v7 = v6;
      if (v5)
      {
        v8 = 8 * v5;
        v9 = v6;
        do
        {
          v10 = *v4++;
          *v9++ = v10;
          v8 -= 8;
        }
        while (v8);
      }
      sub_2263AC71C((uint64_t)this);
      *((_QWORD *)this + 4) = v7;
    }
  }
}

uint64_t *sub_2263CB300(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t *sub_2263CB328(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_2263CB54C(a1);
}

uint64_t sub_2263CB338(uint64_t *a1)
{
  sub_2263C1CD8(a1);
  return 1;
}

unint64_t sub_2263CB350(uint64_t *a1)
{
  unint64_t *v1;

  v1 = (unint64_t *)sub_2263C1CD8(a1);
  return sub_2263CB5B4(v1);
}

BOOL sub_2263CB364(uint64_t *a1, uint64_t *a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)sub_2263C1CD8(a1);
  v4 = sub_2263C1CD8(a2);
  return sub_2263CB608(v3, v4);
}

BOOL sub_2263CB398(uint64_t *a1, uint64_t a2)
{
  _QWORD *v3;

  v3 = (_QWORD *)sub_2263C1CD8(a1);
  return sub_2263CB608(v3, a2);
}

uint64_t sub_2263CB3C0(uint64_t *a1)
{
  sub_2263C1CD8(a1);
  return 0;
}

uint64_t sub_2263CB3DC(uint64_t *a1, uint64_t a2)
{
  sub_2263C1CD8(a1);
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray();
  return a2;
}

std::type_info *sub_2263CB428(uint64_t *a1)
{
  sub_2263C1CD8(a1);
  return &stru_24EDD6FD8;
}

uint64_t sub_2263CB444(uint64_t *a1)
{
  sub_2263C1CD8(a1);
  return 1;
}

uint64_t sub_2263CB45C(uint64_t *a1)
{
  sub_2263C1CD8(a1);
  return MEMORY[0x24BEDB780];
}

uint64_t sub_2263CB47C(uint64_t *a1)
{
  return *(_QWORD *)sub_2263C1CD8(a1);
}

BOOL sub_2263CB494(uint64_t *a1, uint64_t a2)
{
  sub_2263C1CD8(a1);
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7VtArrayIdEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_2263CB4D4(uint64_t *a1)
{
  const std::type_info *v1;

  sub_2263C1CD8(a1);
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24EDD6FD8, v1);
}

std::type_info *sub_2263CB4F8(uint64_t *a1)
{
  sub_2263C1CD8(a1);
  return &stru_24EDD6FD8;
}

uint64_t sub_2263CB518@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;

  v3 = sub_2263C1CD8(a1);
  a2[1] = (uint64_t)&off_24EDD83C8;
  return sub_2263CA8B4(a2, v3);
}

uint64_t *sub_2263CB54C(uint64_t *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *a1;
  if (*a1)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      __dmb(9u);
      sub_2263AC71C(v2);
      MEMORY[0x2276980E0](v2, 0x10A0C407A159F4ELL);
    }
  }
  return a1;
}

unint64_t sub_2263CB5B4(unint64_t *a1)
{
  unint64_t v1;
  double *v2;
  unint64_t v3;
  double v4;
  double v5;

  v1 = *a1;
  if (*a1)
  {
    v2 = (double *)a1[4];
    v3 = *a1;
    do
    {
      v4 = *v2++;
      v5 = v4;
      if (v4 == 0.0)
        v5 = 0.0;
      v1 = *(_QWORD *)&v5 + ((v1 + *(_QWORD *)&v5 + (v1 + *(_QWORD *)&v5) * (v1 + *(_QWORD *)&v5)) >> 1);
      --v3;
    }
    while (v3);
    v1 *= 0x9E3779B97F4A7C55;
  }
  return bswap64(v1);
}

BOOL sub_2263CB608(_QWORD *a1, uint64_t a2)
{
  _BOOL8 result;
  double *v5;
  double *v6;
  uint64_t v7;
  double v8;
  double v9;
  double v10;
  BOOL v11;

  if (a1[4] == *(_QWORD *)(a2 + 32) && sub_2263B1164((uint64_t)a1, a2) && a1[3] == *(_QWORD *)(a2 + 24))
    return 1;
  result = sub_2263B1164((uint64_t)a1, a2);
  if (!result)
    return result;
  if (!*a1)
    return 1;
  v5 = (double *)a1[4];
  v6 = *(double **)(a2 + 32);
  v7 = 8 * *a1 - 8;
  do
  {
    v8 = *v5++;
    v9 = v8;
    v10 = *v6++;
    result = v9 == v10;
    v11 = v9 != v10 || v7 == 0;
    v7 -= 8;
  }
  while (!v11);
  return result;
}

uint64_t sub_2263CB6A4(uint64_t *a1)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v12;

  v2 = atomic_load((unsigned int *)(sub_2263C1CD8(a1) + 40));
  if (v2 != 1)
  {
    v3 = operator new();
    v4 = sub_2263C1CD8(a1);
    v5 = *(_OWORD *)(v4 + 16);
    *(_OWORD *)v3 = *(_OWORD *)v4;
    *(_OWORD *)(v3 + 16) = v5;
    v6 = *(_QWORD *)(v4 + 32);
    *(_QWORD *)(v3 + 32) = v6;
    if (v6)
    {
      v7 = (unint64_t *)(v6 - 16);
      if (*(_QWORD *)(v3 + 24))
        v7 = *(unint64_t **)(v3 + 24);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
    v9 = (unsigned int *)(v3 + 40);
    atomic_store(0, (unsigned int *)(v3 + 40));
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    v12 = *a1;
    *a1 = v3;
    sub_2263CB54C(&v12);
  }
  return sub_2263C1CD8(a1);
}

uint64_t sub_2263CB768(_QWORD *a1)
{
  *a1 += 8;
  return pxrInternal__aapl__pxrReserved__::VtStreamOut();
}

void sub_2263CB77C(unint64_t *a1, unint64_t a2, _OWORD **a3)
{
  unint64_t v3;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  uint64_t v11;
  _OWORD *v12;
  uint64_t v13;
  unint64_t *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  _OWORD *v18;
  unint64_t v19;
  unint64_t *v20;
  uint64_t v21;
  unint64_t *v22;
  __int128 v23;
  _OWORD *v24;
  uint64_t v25;

  v3 = *a1;
  if (*a1 == a2)
    return;
  if (!a2)
    goto LABEL_18;
  v7 = (unint64_t *)a1[4];
  if (v7)
  {
    if (!a1[3])
    {
      v8 = atomic_load(v7 - 2);
      if (v8 == 1)
      {
        if (v3 < a2)
        {
          v9 = a1[4];
          if (*(_QWORD *)(v9 - 8) < a2)
          {
            v10 = sub_2263C206C((uint64_t)a1, a2);
            v7 = v10;
            if (v3)
            {
              v11 = 0;
              do
              {
                *(_OWORD *)&v10[v11] = *(_OWORD *)(v9 + v11 * 8);
                v11 += 2;
              }
              while (2 * v3 != v11);
            }
          }
          v12 = *a3;
          v13 = 2 * v3;
          do
          {
            *(_OWORD *)&v7[v13] = *v12;
            v13 += 2;
          }
          while (2 * a2 != v13);
        }
        v14 = v7;
        goto LABEL_29;
      }
      v7 = (unint64_t *)a1[4];
    }
    if (v3 >= a2)
      v19 = a2;
    else
      v19 = *a1;
    v20 = sub_2263C206C((uint64_t)a1, a2);
    v14 = v20;
    if (v19)
    {
      v21 = 16 * v19;
      v22 = v20;
      do
      {
        v23 = *(_OWORD *)v7;
        v7 += 2;
        *(_OWORD *)v22 = v23;
        v22 += 2;
        v21 -= 16;
      }
      while (v21);
    }
    if (v3 < a2)
    {
      v24 = *a3;
      v25 = 2 * v3;
      do
      {
        *(_OWORD *)&v20[v25] = *v24;
        v25 += 2;
      }
      while (2 * a2 != v25);
    }
    goto LABEL_29;
  }
  v15 = 16 * a2;
  if (16 * a2 / a2 != 16)
  {
LABEL_18:
    sub_2263AD1C8(a1);
    return;
  }
  v16 = sub_2263C206C((uint64_t)a1, a2);
  v14 = v16;
  v17 = 0;
  v18 = *a3;
  do
  {
    *(_OWORD *)&v16[v17 / 8] = *v18;
    v17 += 16;
  }
  while (v15 != v17);
LABEL_29:
  if (v14 != (unint64_t *)a1[4])
  {
    sub_2263AC71C((uint64_t)a1);
    a1[4] = (unint64_t)v14;
  }
  *a1 = a2;
}

uint64_t *sub_2263CB930(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t *sub_2263CB958(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_2263CBB90(a1);
}

uint64_t sub_2263CB968(uint64_t *a1)
{
  sub_2263C1F98(a1);
  return 1;
}

unint64_t sub_2263CB980(uint64_t *a1)
{
  uint64_t *v1;
  char v3;

  v1 = (uint64_t *)sub_2263C1F98(a1);
  return sub_2263CBBF8((uint64_t)&v3, v1);
}

BOOL sub_2263CB9A8(uint64_t *a1, uint64_t *a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)sub_2263C1F98(a1);
  v4 = sub_2263C1F98(a2);
  return sub_2263CBCDC(v3, v4);
}

BOOL sub_2263CB9DC(uint64_t *a1, uint64_t a2)
{
  _QWORD *v3;

  v3 = (_QWORD *)sub_2263C1F98(a1);
  return sub_2263CBCDC(v3, a2);
}

uint64_t sub_2263CBA04(uint64_t *a1)
{
  sub_2263C1F98(a1);
  return 0;
}

uint64_t sub_2263CBA20(uint64_t *a1, uint64_t a2)
{
  sub_2263C1F98(a1);
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray();
  return a2;
}

std::type_info *sub_2263CBA6C(uint64_t *a1)
{
  sub_2263C1F98(a1);
  return &stru_24EDD6FF0;
}

uint64_t sub_2263CBA88(uint64_t *a1)
{
  sub_2263C1F98(a1);
  return 1;
}

std::type_info *sub_2263CBAA0(uint64_t *a1)
{
  sub_2263C1F98(a1);
  return &stru_24EDD6EC8;
}

uint64_t sub_2263CBAC0(uint64_t *a1)
{
  return *(_QWORD *)sub_2263C1F98(a1);
}

BOOL sub_2263CBAD8(uint64_t *a1, uint64_t a2)
{
  sub_2263C1F98(a1);
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7VtArrayINS_7GfVec2dEEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_2263CBB18(uint64_t *a1)
{
  const std::type_info *v1;

  sub_2263C1F98(a1);
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24EDD6FF0, v1);
}

std::type_info *sub_2263CBB3C(uint64_t *a1)
{
  sub_2263C1F98(a1);
  return &stru_24EDD6FF0;
}

uint64_t sub_2263CBB5C@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;

  v3 = sub_2263C1F98(a1);
  a2[1] = (uint64_t)off_24EDD8480;
  return sub_2263B131C(a2, v3);
}

uint64_t *sub_2263CBB90(uint64_t *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *a1;
  if (*a1)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      __dmb(9u);
      sub_2263AC71C(v2);
      MEMORY[0x2276980E0](v2, 0x1020C40874388CCLL);
    }
  }
  return a1;
}

unint64_t sub_2263CBBF8(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  double *v3;
  double *v4;
  unint64_t v5;
  _QWORD v7[2];

  v2 = *a2;
  v7[0] = v2;
  v7[1] = 1;
  if (v2)
  {
    v3 = (double *)a2[4];
    do
    {
      --v2;
      v4 = v3 + 2;
      sub_2263CBC6C((uint64_t)v7, v3);
      v3 = v4;
    }
    while (v2);
    v5 = 0x9E3779B97F4A7C55 * v7[0];
  }
  else
  {
    v5 = 0;
  }
  return bswap64(v5);
}

uint64_t sub_2263CBC6C(uint64_t result, double *a2)
{
  double v2;
  double v3;
  double v4;
  unint64_t v5;

  v2 = *a2;
  if (*a2 == 0.0)
    v2 = 0.0;
  v3 = v2;
  if (a2[1] == 0.0)
    v4 = 0.0;
  else
    v4 = a2[1];
  v5 = bswap64(0x9E3779B97F4A7C55* (*(_QWORD *)&v4+ ((*(_QWORD *)&v4 + *(_QWORD *)&v3 + (*(_QWORD *)&v4 + *(_QWORD *)&v3) * (*(_QWORD *)&v4 + *(_QWORD *)&v3)) >> 1)));
  if (*(_BYTE *)(result + 8))
    v5 += (*(_QWORD *)result + v5 + (*(_QWORD *)result + v5) * (*(_QWORD *)result + v5)) >> 1;
  else
    *(_BYTE *)(result + 8) = 1;
  *(_QWORD *)result = v5;
  return result;
}

BOOL sub_2263CBCDC(_QWORD *a1, uint64_t a2)
{
  _BOOL8 result;
  double *v5;
  double *v6;
  double *v7;
  double v8;
  double v9;
  double v10;
  double v11;

  if (a1[4] == *(_QWORD *)(a2 + 32) && sub_2263B1164((uint64_t)a1, a2) && a1[3] == *(_QWORD *)(a2 + 24))
    return 1;
  result = sub_2263B1164((uint64_t)a1, a2);
  if (!result)
    return result;
  if (!*a1)
    return 1;
  v5 = (double *)a1[4];
  v6 = &v5[2 * *a1];
  v7 = *(double **)(a2 + 32);
  do
  {
    v8 = *v5;
    v9 = v5[1];
    v5 += 2;
    v10 = *v7;
    v11 = v7[1];
    v7 += 2;
    result = v9 == v11 && v8 == v10;
  }
  while (result && v5 != v6);
  return result;
}

uint64_t sub_2263CBD7C(uint64_t *a1)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v12;

  v2 = atomic_load((unsigned int *)(sub_2263C1F98(a1) + 40));
  if (v2 != 1)
  {
    v3 = operator new();
    v4 = sub_2263C1F98(a1);
    v5 = *(_OWORD *)(v4 + 16);
    *(_OWORD *)v3 = *(_OWORD *)v4;
    *(_OWORD *)(v3 + 16) = v5;
    v6 = *(_QWORD *)(v4 + 32);
    *(_QWORD *)(v3 + 32) = v6;
    if (v6)
    {
      v7 = (unint64_t *)(v6 - 16);
      if (*(_QWORD *)(v3 + 24))
        v7 = *(unint64_t **)(v3 + 24);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
    v9 = (unsigned int *)(v3 + 40);
    atomic_store(0, (unsigned int *)(v3 + 40));
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    v12 = *a1;
    *a1 = v3;
    sub_2263CBB90(&v12);
  }
  return sub_2263C1F98(a1);
}

uint64_t sub_2263CBE40(_QWORD *a1)
{
  *a1 += 16;
  return pxrInternal__aapl__pxrReserved__::operator<<();
}

void sub_2263CBE58(unint64_t *a1, unint64_t a2, __int128 **a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  __int128 v13;
  __int128 *v14;
  uint64_t v15;
  _QWORD *v16;
  __int128 v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  __int128 *v21;
  _QWORD *v22;
  __int128 v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  __int128 v28;
  __int128 *v29;
  uint64_t v30;
  _QWORD *v31;
  __int128 v32;

  v3 = *a1;
  if (*a1 == a2)
    return;
  if (!a2)
    goto LABEL_18;
  v7 = (_QWORD *)a1[4];
  if (v7)
  {
    if (!a1[3])
    {
      v8 = atomic_load(v7 - 2);
      if (v8 == 1)
      {
        if (v3 < a2)
        {
          v9 = a1[4];
          if (*(_QWORD *)(v9 - 8) < a2)
          {
            v10 = sub_2263C246C((uint64_t)a1, a2);
            v7 = v10;
            if (v3)
            {
              v11 = 0;
              do
              {
                v12 = &v10[v11];
                v13 = *(_OWORD *)(v9 + v11 * 8);
                v12[2] = *(_QWORD *)(v9 + v11 * 8 + 16);
                *(_OWORD *)v12 = v13;
                v11 += 3;
              }
              while (3 * v3 != v11);
            }
          }
          v14 = *a3;
          v15 = 3 * v3;
          do
          {
            v16 = &v7[v15];
            v17 = *v14;
            v16[2] = *((_QWORD *)v14 + 2);
            *(_OWORD *)v16 = v17;
            v15 += 3;
          }
          while (3 * a2 != v15);
        }
        v18 = v7;
        goto LABEL_29;
      }
      v7 = (_QWORD *)a1[4];
    }
    if (v3 >= a2)
      v24 = a2;
    else
      v24 = *a1;
    v25 = sub_2263C246C((uint64_t)a1, a2);
    v18 = v25;
    if (v24)
    {
      v26 = 24 * v24;
      v27 = v25;
      do
      {
        v28 = *(_OWORD *)v7;
        v27[2] = v7[2];
        *(_OWORD *)v27 = v28;
        v27 += 3;
        v7 += 3;
        v26 -= 24;
      }
      while (v26);
    }
    if (v3 < a2)
    {
      v29 = *a3;
      v30 = 3 * v3;
      do
      {
        v31 = &v25[v30];
        v32 = *v29;
        v31[2] = *((_QWORD *)v29 + 2);
        *(_OWORD *)v31 = v32;
        v30 += 3;
      }
      while (3 * a2 != v30);
    }
    goto LABEL_29;
  }
  if (a2 >= 0xAAAAAAAAAAAAAABLL)
  {
LABEL_18:
    sub_2263AD1C8(a1);
    return;
  }
  v19 = sub_2263C246C((uint64_t)a1, a2);
  v18 = v19;
  v20 = 0;
  v21 = *a3;
  do
  {
    v22 = &v19[v20];
    v23 = *v21;
    v22[2] = *((_QWORD *)v21 + 2);
    *(_OWORD *)v22 = v23;
    v20 += 3;
  }
  while (3 * a2 != v20);
LABEL_29:
  if (v18 != (_QWORD *)a1[4])
  {
    sub_2263AC71C((uint64_t)a1);
    a1[4] = (unint64_t)v18;
  }
  *a1 = a2;
}

uint64_t *sub_2263CC070(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t *sub_2263CC098(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_2263CC2D0(a1);
}

uint64_t sub_2263CC0A8(uint64_t *a1)
{
  sub_2263C2388(a1);
  return 1;
}

unint64_t sub_2263CC0C0(uint64_t *a1)
{
  uint64_t *v1;
  char v3;

  v1 = (uint64_t *)sub_2263C2388(a1);
  return sub_2263CC338((uint64_t)&v3, v1);
}

BOOL sub_2263CC0E8(uint64_t *a1, uint64_t *a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)sub_2263C2388(a1);
  v4 = sub_2263C2388(a2);
  return sub_2263CC428(v3, v4);
}

BOOL sub_2263CC11C(uint64_t *a1, uint64_t a2)
{
  _QWORD *v3;

  v3 = (_QWORD *)sub_2263C2388(a1);
  return sub_2263CC428(v3, a2);
}

uint64_t sub_2263CC144(uint64_t *a1)
{
  sub_2263C2388(a1);
  return 0;
}

uint64_t sub_2263CC160(uint64_t *a1, uint64_t a2)
{
  sub_2263C2388(a1);
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray();
  return a2;
}

std::type_info *sub_2263CC1AC(uint64_t *a1)
{
  sub_2263C2388(a1);
  return &stru_24EDD7008;
}

uint64_t sub_2263CC1C8(uint64_t *a1)
{
  sub_2263C2388(a1);
  return 1;
}

std::type_info *sub_2263CC1E0(uint64_t *a1)
{
  sub_2263C2388(a1);
  return &stru_24EDD6ED8;
}

uint64_t sub_2263CC200(uint64_t *a1)
{
  return *(_QWORD *)sub_2263C2388(a1);
}

BOOL sub_2263CC218(uint64_t *a1, uint64_t a2)
{
  sub_2263C2388(a1);
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7VtArrayINS_7GfVec3dEEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_2263CC258(uint64_t *a1)
{
  const std::type_info *v1;

  sub_2263C2388(a1);
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24EDD7008, v1);
}

std::type_info *sub_2263CC27C(uint64_t *a1)
{
  sub_2263C2388(a1);
  return &stru_24EDD7008;
}

uint64_t sub_2263CC29C@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;

  v3 = sub_2263C2388(a1);
  a2[1] = (uint64_t)off_24EDD8538;
  return sub_2263B131C(a2, v3);
}

uint64_t *sub_2263CC2D0(uint64_t *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *a1;
  if (*a1)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      __dmb(9u);
      sub_2263AC71C(v2);
      MEMORY[0x2276980E0](v2, 0x1020C40874388CCLL);
    }
  }
  return a1;
}

unint64_t sub_2263CC338(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  double *v3;
  double *v4;
  unint64_t v5;
  _QWORD v7[2];

  v2 = *a2;
  v7[0] = v2;
  v7[1] = 1;
  if (v2)
  {
    v3 = (double *)a2[4];
    do
    {
      --v2;
      v4 = v3 + 3;
      sub_2263CC3AC((uint64_t)v7, v3);
      v3 = v4;
    }
    while (v2);
    v5 = 0x9E3779B97F4A7C55 * v7[0];
  }
  else
  {
    v5 = 0;
  }
  return bswap64(v5);
}

uint64_t sub_2263CC3AC(uint64_t a1, double *a2)
{
  uint64_t result;
  unint64_t v4;
  _QWORD v5[2];

  v5[0] = 0;
  v5[1] = 0;
  result = sub_2263C5190((uint64_t)v5, a2, a2 + 1, a2 + 2);
  v4 = bswap64(0x9E3779B97F4A7C55 * v5[0]);
  if (*(_BYTE *)(a1 + 8))
    v4 += (*(_QWORD *)a1 + v4 + (*(_QWORD *)a1 + v4) * (*(_QWORD *)a1 + v4)) >> 1;
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v4;
  return result;
}

BOOL sub_2263CC428(_QWORD *a1, uint64_t a2)
{
  _BOOL8 result;
  double *v5;
  double *v6;
  double *i;

  if (a1[4] == *(_QWORD *)(a2 + 32) && sub_2263B1164((uint64_t)a1, a2) && a1[3] == *(_QWORD *)(a2 + 24))
    return 1;
  result = sub_2263B1164((uint64_t)a1, a2);
  if (!result)
    return result;
  if (!*a1)
    return 1;
  v5 = (double *)a1[4];
  v6 = &v5[3 * *a1];
  for (i = *(double **)(a2 + 32); *v5 == *i && v5[1] == i[1] && v5[2] == i[2]; i += 3)
  {
    v5 += 3;
    if (v5 == v6)
      return 1;
  }
  return 0;
}

uint64_t sub_2263CC4EC(uint64_t *a1)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v12;

  v2 = atomic_load((unsigned int *)(sub_2263C2388(a1) + 40));
  if (v2 != 1)
  {
    v3 = operator new();
    v4 = sub_2263C2388(a1);
    v5 = *(_OWORD *)(v4 + 16);
    *(_OWORD *)v3 = *(_OWORD *)v4;
    *(_OWORD *)(v3 + 16) = v5;
    v6 = *(_QWORD *)(v4 + 32);
    *(_QWORD *)(v3 + 32) = v6;
    if (v6)
    {
      v7 = (unint64_t *)(v6 - 16);
      if (*(_QWORD *)(v3 + 24))
        v7 = *(unint64_t **)(v3 + 24);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
    v9 = (unsigned int *)(v3 + 40);
    atomic_store(0, (unsigned int *)(v3 + 40));
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    v12 = *a1;
    *a1 = v3;
    sub_2263CC2D0(&v12);
  }
  return sub_2263C2388(a1);
}

uint64_t sub_2263CC5B0(_QWORD *a1)
{
  *a1 += 24;
  return pxrInternal__aapl__pxrReserved__::operator<<();
}

void sub_2263CC5C8(unint64_t *a1, unint64_t a2, _OWORD **a3)
{
  unint64_t v3;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  uint64_t v11;
  unint64_t *v12;
  __int128 v13;
  _OWORD *v14;
  uint64_t v15;
  unint64_t *v16;
  __int128 v17;
  unint64_t *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  _OWORD *v22;
  unint64_t *v23;
  __int128 v24;
  unint64_t v25;
  unint64_t *v26;
  uint64_t v27;
  unint64_t *v28;
  __int128 v29;
  __int128 v30;
  _OWORD *v31;
  uint64_t v32;
  unint64_t *v33;
  __int128 v34;

  v3 = *a1;
  if (*a1 == a2)
    return;
  if (!a2)
    goto LABEL_18;
  v7 = (unint64_t *)a1[4];
  if (v7)
  {
    if (!a1[3])
    {
      v8 = atomic_load(v7 - 2);
      if (v8 == 1)
      {
        if (v3 < a2)
        {
          v9 = a1[4];
          if (*(_QWORD *)(v9 - 8) < a2)
          {
            v10 = sub_2263C2868((uint64_t)a1, a2);
            v7 = v10;
            if (v3)
            {
              v11 = 0;
              do
              {
                v12 = &v10[v11];
                v13 = *(_OWORD *)(v9 + v11 * 8 + 16);
                *(_OWORD *)v12 = *(_OWORD *)(v9 + v11 * 8);
                *((_OWORD *)v12 + 1) = v13;
                v11 += 4;
              }
              while (4 * v3 != v11);
            }
          }
          v14 = *a3;
          v15 = 4 * v3;
          do
          {
            v16 = &v7[v15];
            v17 = v14[1];
            *(_OWORD *)v16 = *v14;
            *((_OWORD *)v16 + 1) = v17;
            v15 += 4;
          }
          while (4 * a2 != v15);
        }
        v18 = v7;
        goto LABEL_29;
      }
      v7 = (unint64_t *)a1[4];
    }
    if (v3 >= a2)
      v25 = a2;
    else
      v25 = *a1;
    v26 = sub_2263C2868((uint64_t)a1, a2);
    v18 = v26;
    if (v25)
    {
      v27 = 32 * v25;
      v28 = v26;
      do
      {
        v29 = *(_OWORD *)v7;
        v30 = *((_OWORD *)v7 + 1);
        v7 += 4;
        *(_OWORD *)v28 = v29;
        *((_OWORD *)v28 + 1) = v30;
        v28 += 4;
        v27 -= 32;
      }
      while (v27);
    }
    if (v3 < a2)
    {
      v31 = *a3;
      v32 = 4 * v3;
      do
      {
        v33 = &v26[v32];
        v34 = v31[1];
        *(_OWORD *)v33 = *v31;
        *((_OWORD *)v33 + 1) = v34;
        v32 += 4;
      }
      while (4 * a2 != v32);
    }
    goto LABEL_29;
  }
  v19 = 32 * a2;
  if (32 * a2 / a2 != 32)
  {
LABEL_18:
    sub_2263AD1C8(a1);
    return;
  }
  v20 = sub_2263C2868((uint64_t)a1, a2);
  v18 = v20;
  v21 = 0;
  v22 = *a3;
  do
  {
    v23 = &v20[v21 / 8];
    v24 = v22[1];
    *(_OWORD *)v23 = *v22;
    *((_OWORD *)v23 + 1) = v24;
    v21 += 32;
  }
  while (v19 != v21);
LABEL_29:
  if (v18 != (unint64_t *)a1[4])
  {
    sub_2263AC71C((uint64_t)a1);
    a1[4] = (unint64_t)v18;
  }
  *a1 = a2;
}

uint64_t *sub_2263CC790(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t *sub_2263CC7B8(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_2263CC9F0(a1);
}

uint64_t sub_2263CC7C8(uint64_t *a1)
{
  sub_2263C2794(a1);
  return 1;
}

unint64_t sub_2263CC7E0(uint64_t *a1)
{
  uint64_t *v1;
  char v3;

  v1 = (uint64_t *)sub_2263C2794(a1);
  return sub_2263CCA58((uint64_t)&v3, v1);
}

BOOL sub_2263CC808(uint64_t *a1, uint64_t *a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)sub_2263C2794(a1);
  v4 = sub_2263C2794(a2);
  return sub_2263CCB4C(v3, v4);
}

BOOL sub_2263CC83C(uint64_t *a1, uint64_t a2)
{
  _QWORD *v3;

  v3 = (_QWORD *)sub_2263C2794(a1);
  return sub_2263CCB4C(v3, a2);
}

uint64_t sub_2263CC864(uint64_t *a1)
{
  sub_2263C2794(a1);
  return 0;
}

uint64_t sub_2263CC880(uint64_t *a1, uint64_t a2)
{
  sub_2263C2794(a1);
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray();
  return a2;
}

std::type_info *sub_2263CC8CC(uint64_t *a1)
{
  sub_2263C2794(a1);
  return &stru_24EDD7020;
}

uint64_t sub_2263CC8E8(uint64_t *a1)
{
  sub_2263C2794(a1);
  return 1;
}

std::type_info *sub_2263CC900(uint64_t *a1)
{
  sub_2263C2794(a1);
  return &stru_24EDD6EE8;
}

uint64_t sub_2263CC920(uint64_t *a1)
{
  return *(_QWORD *)sub_2263C2794(a1);
}

BOOL sub_2263CC938(uint64_t *a1, uint64_t a2)
{
  sub_2263C2794(a1);
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7VtArrayINS_7GfVec4dEEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_2263CC978(uint64_t *a1)
{
  const std::type_info *v1;

  sub_2263C2794(a1);
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24EDD7020, v1);
}

std::type_info *sub_2263CC99C(uint64_t *a1)
{
  sub_2263C2794(a1);
  return &stru_24EDD7020;
}

uint64_t sub_2263CC9BC@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;

  v3 = sub_2263C2794(a1);
  a2[1] = (uint64_t)off_24EDD85F0;
  return sub_2263B131C(a2, v3);
}

uint64_t *sub_2263CC9F0(uint64_t *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *a1;
  if (*a1)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      __dmb(9u);
      sub_2263AC71C(v2);
      MEMORY[0x2276980E0](v2, 0x1020C40874388CCLL);
    }
  }
  return a1;
}

unint64_t sub_2263CCA58(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  double *v3;
  double *v4;
  unint64_t v5;
  _QWORD v7[2];

  v2 = *a2;
  v7[0] = v2;
  v7[1] = 1;
  if (v2)
  {
    v3 = (double *)a2[4];
    do
    {
      --v2;
      v4 = v3 + 4;
      sub_2263CCACC((uint64_t)v7, v3);
      v3 = v4;
    }
    while (v2);
    v5 = 0x9E3779B97F4A7C55 * v7[0];
  }
  else
  {
    v5 = 0;
  }
  return bswap64(v5);
}

uint64_t sub_2263CCACC(uint64_t a1, double *a2)
{
  uint64_t result;
  unint64_t v4;
  _QWORD v5[2];

  v5[0] = 0;
  v5[1] = 0;
  result = sub_2263C5610((uint64_t)v5, a2, a2 + 1, a2 + 2, a2 + 3);
  v4 = bswap64(0x9E3779B97F4A7C55 * v5[0]);
  if (*(_BYTE *)(a1 + 8))
    v4 += (*(_QWORD *)a1 + v4 + (*(_QWORD *)a1 + v4) * (*(_QWORD *)a1 + v4)) >> 1;
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v4;
  return result;
}

BOOL sub_2263CCB4C(_QWORD *a1, uint64_t a2)
{
  _BOOL8 result;
  double *v5;
  double *v6;
  double *i;

  if (a1[4] == *(_QWORD *)(a2 + 32) && sub_2263B1164((uint64_t)a1, a2) && a1[3] == *(_QWORD *)(a2 + 24))
    return 1;
  result = sub_2263B1164((uint64_t)a1, a2);
  if (!result)
    return result;
  if (!*a1)
    return 1;
  v5 = (double *)a1[4];
  v6 = &v5[4 * *a1];
  for (i = *(double **)(a2 + 32); *v5 == *i && v5[1] == i[1] && v5[2] == i[2] && v5[3] == i[3]; i += 4)
  {
    v5 += 4;
    if (v5 == v6)
      return 1;
  }
  return 0;
}

uint64_t sub_2263CCC1C(uint64_t *a1)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v12;

  v2 = atomic_load((unsigned int *)(sub_2263C2794(a1) + 40));
  if (v2 != 1)
  {
    v3 = operator new();
    v4 = sub_2263C2794(a1);
    v5 = *(_OWORD *)(v4 + 16);
    *(_OWORD *)v3 = *(_OWORD *)v4;
    *(_OWORD *)(v3 + 16) = v5;
    v6 = *(_QWORD *)(v4 + 32);
    *(_QWORD *)(v3 + 32) = v6;
    if (v6)
    {
      v7 = (unint64_t *)(v6 - 16);
      if (*(_QWORD *)(v3 + 24))
        v7 = *(unint64_t **)(v3 + 24);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
    v9 = (unsigned int *)(v3 + 40);
    atomic_store(0, (unsigned int *)(v3 + 40));
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    v12 = *a1;
    *a1 = v3;
    sub_2263CC9F0(&v12);
  }
  return sub_2263C2794(a1);
}

uint64_t sub_2263CCCE0(_QWORD *a1)
{
  *a1 += 32;
  return pxrInternal__aapl__pxrReserved__::operator<<();
}

void sub_2263CCCF8(unint64_t *a1, unint64_t a2, __int128 **a3)
{
  unint64_t v3;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 *v19;
  unint64_t v20;
  _OWORD *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  __int128 *v32;
  unint64_t *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t *v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 *v50;
  unint64_t v51;
  _OWORD *v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;

  v3 = *a1;
  if (*a1 == a2)
    return;
  if (!a2)
    goto LABEL_18;
  v7 = (unint64_t *)a1[4];
  if (v7)
  {
    if (!a1[3])
    {
      v8 = atomic_load(v7 - 2);
      if (v8 == 1)
      {
        if (v3 < a2)
        {
          v9 = a1[4];
          if (*(_QWORD *)(v9 - 8) < a2)
          {
            v10 = sub_2263C19BC((uint64_t)a1, a2);
            v7 = v10;
            if (v3)
            {
              v11 = 0;
              do
              {
                v12 = &v10[v11 / 8];
                v13 = *(_OWORD *)(v9 + v11);
                v14 = *(_OWORD *)(v9 + v11 + 16);
                v15 = *(_OWORD *)(v9 + v11 + 48);
                *((_OWORD *)v12 + 2) = *(_OWORD *)(v9 + v11 + 32);
                *((_OWORD *)v12 + 3) = v15;
                *(_OWORD *)v12 = v13;
                *((_OWORD *)v12 + 1) = v14;
                v16 = *(_OWORD *)(v9 + v11 + 64);
                v17 = *(_OWORD *)(v9 + v11 + 80);
                v18 = *(_OWORD *)(v9 + v11 + 112);
                *((_OWORD *)v12 + 6) = *(_OWORD *)(v9 + v11 + 96);
                *((_OWORD *)v12 + 7) = v18;
                *((_OWORD *)v12 + 4) = v16;
                *((_OWORD *)v12 + 5) = v17;
                v11 += 128;
              }
              while (v3 << 7 != v11);
            }
          }
          v19 = *a3;
          v20 = v3 << 7;
          do
          {
            v21 = (_OWORD *)((char *)v7 + v20);
            v22 = *v19;
            v23 = v19[1];
            v24 = v19[3];
            v21[2] = v19[2];
            v21[3] = v24;
            *v21 = v22;
            v21[1] = v23;
            v25 = v19[4];
            v26 = v19[5];
            v27 = v19[7];
            v21[6] = v19[6];
            v21[7] = v27;
            v21[4] = v25;
            v21[5] = v26;
            v20 += 128;
          }
          while (a2 << 7 != v20);
        }
        v28 = v7;
        goto LABEL_29;
      }
      v7 = (unint64_t *)a1[4];
    }
    if (v3 >= a2)
      v40 = a2;
    else
      v40 = *a1;
    v41 = sub_2263C19BC((uint64_t)a1, a2);
    v28 = v41;
    if (v40)
    {
      v42 = v40 << 7;
      v43 = v41;
      do
      {
        v44 = *(_OWORD *)v7;
        v45 = *((_OWORD *)v7 + 1);
        v46 = *((_OWORD *)v7 + 3);
        *((_OWORD *)v43 + 2) = *((_OWORD *)v7 + 2);
        *((_OWORD *)v43 + 3) = v46;
        *(_OWORD *)v43 = v44;
        *((_OWORD *)v43 + 1) = v45;
        v47 = *((_OWORD *)v7 + 4);
        v48 = *((_OWORD *)v7 + 5);
        v49 = *((_OWORD *)v7 + 7);
        *((_OWORD *)v43 + 6) = *((_OWORD *)v7 + 6);
        *((_OWORD *)v43 + 7) = v49;
        *((_OWORD *)v43 + 4) = v47;
        *((_OWORD *)v43 + 5) = v48;
        v7 += 16;
        v43 += 16;
        v42 -= 128;
      }
      while (v42);
    }
    if (v3 < a2)
    {
      v50 = *a3;
      v51 = v3 << 7;
      do
      {
        v52 = (_OWORD *)((char *)v41 + v51);
        v53 = *v50;
        v54 = v50[1];
        v55 = v50[3];
        v52[2] = v50[2];
        v52[3] = v55;
        *v52 = v53;
        v52[1] = v54;
        v56 = v50[4];
        v57 = v50[5];
        v58 = v50[7];
        v52[6] = v50[6];
        v52[7] = v58;
        v52[4] = v56;
        v52[5] = v57;
        v51 += 128;
      }
      while (a2 << 7 != v51);
    }
    goto LABEL_29;
  }
  v29 = a2 << 7;
  if ((a2 << 7) / a2 != 128)
  {
LABEL_18:
    sub_2263AD1C8(a1);
    return;
  }
  v30 = sub_2263C19BC((uint64_t)a1, a2);
  v28 = v30;
  v31 = 0;
  v32 = *a3;
  do
  {
    v33 = &v30[v31 / 8];
    v34 = *v32;
    v35 = v32[1];
    v36 = v32[3];
    *((_OWORD *)v33 + 2) = v32[2];
    *((_OWORD *)v33 + 3) = v36;
    *(_OWORD *)v33 = v34;
    *((_OWORD *)v33 + 1) = v35;
    v37 = v32[4];
    v38 = v32[5];
    v39 = v32[7];
    *((_OWORD *)v33 + 6) = v32[6];
    *((_OWORD *)v33 + 7) = v39;
    *((_OWORD *)v33 + 4) = v37;
    *((_OWORD *)v33 + 5) = v38;
    v31 += 128;
  }
  while (v29 != v31);
LABEL_29:
  if (v28 != (unint64_t *)a1[4])
  {
    sub_2263AC71C((uint64_t)a1);
    a1[4] = (unint64_t)v28;
  }
  *a1 = a2;
}

uint64_t *sub_2263CCF40(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t *sub_2263CCF68(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_2263CD1A0(a1);
}

uint64_t sub_2263CCF78(uint64_t *a1)
{
  sub_2263C18C8(a1);
  return 1;
}

unint64_t sub_2263CCF90(uint64_t *a1)
{
  uint64_t *v1;
  char v3;

  v1 = (uint64_t *)sub_2263C18C8(a1);
  return sub_2263CD208((uint64_t)&v3, v1);
}

uint64_t sub_2263CCFB8(uint64_t *a1, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t v4;

  v3 = (uint64_t *)sub_2263C18C8(a1);
  v4 = sub_2263C18C8(a2);
  return sub_2263CD340(v3, v4);
}

uint64_t sub_2263CCFEC(uint64_t *a1, uint64_t a2)
{
  uint64_t *v3;

  v3 = (uint64_t *)sub_2263C18C8(a1);
  return sub_2263CD340(v3, a2);
}

uint64_t sub_2263CD014(uint64_t *a1)
{
  sub_2263C18C8(a1);
  return 0;
}

uint64_t sub_2263CD030(uint64_t *a1, uint64_t a2)
{
  sub_2263C18C8(a1);
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray();
  return a2;
}

std::type_info *sub_2263CD07C(uint64_t *a1)
{
  sub_2263C18C8(a1);
  return &stru_24EDD6FC0;
}

uint64_t sub_2263CD098(uint64_t *a1)
{
  sub_2263C18C8(a1);
  return 1;
}

std::type_info *sub_2263CD0B0(uint64_t *a1)
{
  sub_2263C18C8(a1);
  return &stru_24EDD6EB8;
}

uint64_t sub_2263CD0D0(uint64_t *a1)
{
  return *(_QWORD *)sub_2263C18C8(a1);
}

BOOL sub_2263CD0E8(uint64_t *a1, uint64_t a2)
{
  sub_2263C18C8(a1);
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7VtArrayINS_10GfMatrix4dEEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_2263CD128(uint64_t *a1)
{
  const std::type_info *v1;

  sub_2263C18C8(a1);
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24EDD6FC0, v1);
}

std::type_info *sub_2263CD14C(uint64_t *a1)
{
  sub_2263C18C8(a1);
  return &stru_24EDD6FC0;
}

uint64_t sub_2263CD16C@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;

  v3 = sub_2263C18C8(a1);
  a2[1] = (uint64_t)off_24EDD86A8;
  return sub_2263B131C(a2, v3);
}

uint64_t *sub_2263CD1A0(uint64_t *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *a1;
  if (*a1)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      __dmb(9u);
      sub_2263AC71C(v2);
      MEMORY[0x2276980E0](v2, 0x1020C40874388CCLL);
    }
  }
  return a1;
}

unint64_t sub_2263CD208(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  double *v3;
  double *v4;
  unint64_t v5;
  _QWORD v7[2];

  v2 = *a2;
  v7[0] = v2;
  v7[1] = 1;
  if (v2)
  {
    v3 = (double *)a2[4];
    do
    {
      --v2;
      v4 = v3 + 16;
      sub_2263CD27C((uint64_t)v7, v3);
      v3 = v4;
    }
    while (v2);
    v5 = 0x9E3779B97F4A7C55 * v7[0];
  }
  else
  {
    v5 = 0;
  }
  return bswap64(v5);
}

uint64_t sub_2263CD27C(uint64_t a1, double *a2)
{
  uint64_t result;
  unint64_t v4;
  _QWORD v5[2];

  v5[0] = 0;
  v5[1] = 0;
  result = sub_2263C5A84((uint64_t)v5, a2, a2 + 1, a2 + 2, a2 + 3, a2 + 4, a2 + 5, a2 + 6, a2 + 7, a2 + 8, a2 + 9, a2 + 10, a2 + 11, a2 + 12, a2 + 13, a2 + 14, a2 + 15);
  v4 = bswap64(0x9E3779B97F4A7C55 * v5[0]);
  if (*(_BYTE *)(a1 + 8))
    v4 += (*(_QWORD *)a1 + v4 + (*(_QWORD *)a1 + v4) * (*(_QWORD *)a1 + v4)) >> 1;
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v4;
  return result;
}

uint64_t sub_2263CD340(uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (a1[4] == *(_QWORD *)(a2 + 32) && sub_2263B1164((uint64_t)a1, a2) && a1[3] == *(_QWORD *)(a2 + 24))
    return 1;
  result = sub_2263B1164((uint64_t)a1, a2);
  if (!(_DWORD)result)
    return result;
  v5 = *a1;
  if (!*a1)
    return 1;
  v6 = a1[4];
  v7 = *(_QWORD *)(a2 + 32);
  v8 = (v5 << 7) - 128;
  do
  {
    result = pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator==();
    if (!(_DWORD)result)
      break;
    v6 += 128;
    v7 += 128;
    v9 = v8;
    v8 -= 128;
  }
  while (v9);
  return result;
}

uint64_t sub_2263CD3EC(uint64_t *a1)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v12;

  v2 = atomic_load((unsigned int *)(sub_2263C18C8(a1) + 40));
  if (v2 != 1)
  {
    v3 = operator new();
    v4 = sub_2263C18C8(a1);
    v5 = *(_OWORD *)(v4 + 16);
    *(_OWORD *)v3 = *(_OWORD *)v4;
    *(_OWORD *)(v3 + 16) = v5;
    v6 = *(_QWORD *)(v4 + 32);
    *(_QWORD *)(v3 + 32) = v6;
    if (v6)
    {
      v7 = (unint64_t *)(v6 - 16);
      if (*(_QWORD *)(v3 + 24))
        v7 = *(unint64_t **)(v3 + 24);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
    v9 = (unsigned int *)(v3 + 40);
    atomic_store(0, (unsigned int *)(v3 + 40));
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    v12 = *a1;
    *a1 = v3;
    sub_2263CD1A0(&v12);
  }
  return sub_2263C18C8(a1);
}

uint64_t sub_2263CD4B0(_QWORD *a1)
{
  *a1 += 128;
  return pxrInternal__aapl__pxrReserved__::operator<<();
}

void sub_2263CD578(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2263CD5FC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2263CD708(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;
  void *v15;

  if (a14 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_2263CE270(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int *v47;
  unsigned int v48;
  unsigned int *v49;
  unsigned int v50;
  unsigned int *v51;
  unsigned int v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int *v55;
  unsigned int v56;
  unsigned int *v57;
  unsigned int v58;
  unsigned int *v59;
  unsigned int v60;
  unsigned int *v61;
  unsigned int v62;
  unsigned int *v63;
  unsigned int v64;
  unsigned int *v65;
  unsigned int v66;
  unsigned int *v67;
  unsigned int v68;
  uint64_t v69;
  unsigned int *v70;
  unsigned int v71;
  uint64_t v72;
  unsigned int *v73;
  unsigned int v74;
  uint64_t v75;
  unsigned int *v76;
  unsigned int v77;
  uint64_t v78;
  unsigned int *v79;
  unsigned int v80;
  uint64_t v81;
  unsigned int *v82;
  unsigned int v83;
  uint64_t v84;
  unsigned int *v85;
  unsigned int v86;
  uint64_t v87;
  unsigned int *v88;
  unsigned int v89;
  uint64_t v90;
  unsigned int *v91;
  unsigned int v92;
  uint64_t v93;
  unsigned int *v94;
  unsigned int v95;
  uint64_t v96;
  unsigned int *v97;
  unsigned int v98;
  uint64_t v99;
  unsigned int *v100;
  unsigned int v101;
  uint64_t v102;
  unsigned int *v103;
  unsigned int v104;

  v30 = v28 + 480;
  while (1)
  {

    v32 = *(_QWORD *)(v30 - 16);
    v30 -= 16;
    v31 = v32;
    if ((v32 & 7) != 0)
    {
      v33 = (unsigned int *)(v31 & 0xFFFFFFFFFFFFFFF8);
      do
        v34 = __ldxr(v33);
      while (__stlxr(v34 - 2, v33));
    }
    if (v30 == v28)
    {
      if ((a11 & 7) != 0)
      {
        v35 = (unsigned int *)(a11 & 0xFFFFFFFFFFFFFFF8);
        do
          v36 = __ldxr(v35);
        while (__stlxr(v36 - 2, v35));
      }
      if ((a12 & 7) != 0)
      {
        v37 = (unsigned int *)(a12 & 0xFFFFFFFFFFFFFFF8);
        do
          v38 = __ldxr(v37);
        while (__stlxr(v38 - 2, v37));
      }
      if ((a13 & 7) != 0)
      {
        v39 = (unsigned int *)(a13 & 0xFFFFFFFFFFFFFFF8);
        do
          v40 = __ldxr(v39);
        while (__stlxr(v40 - 2, v39));
      }
      if ((a14 & 7) != 0)
      {
        v41 = (unsigned int *)(a14 & 0xFFFFFFFFFFFFFFF8);
        do
          v42 = __ldxr(v41);
        while (__stlxr(v42 - 2, v41));
      }
      if ((a15 & 7) != 0)
      {
        v43 = (unsigned int *)(a15 & 0xFFFFFFFFFFFFFFF8);
        do
          v44 = __ldxr(v43);
        while (__stlxr(v44 - 2, v43));
      }
      if ((a16 & 7) != 0)
      {
        v45 = (unsigned int *)(a16 & 0xFFFFFFFFFFFFFFF8);
        do
          v46 = __ldxr(v45);
        while (__stlxr(v46 - 2, v45));
      }
      if ((a17 & 7) != 0)
      {
        v47 = (unsigned int *)(a17 & 0xFFFFFFFFFFFFFFF8);
        do
          v48 = __ldxr(v47);
        while (__stlxr(v48 - 2, v47));
      }
      if ((a18 & 7) != 0)
      {
        v49 = (unsigned int *)(a18 & 0xFFFFFFFFFFFFFFF8);
        do
          v50 = __ldxr(v49);
        while (__stlxr(v50 - 2, v49));
      }
      if ((a19 & 7) != 0)
      {
        v51 = (unsigned int *)(a19 & 0xFFFFFFFFFFFFFFF8);
        do
          v52 = __ldxr(v51);
        while (__stlxr(v52 - 2, v51));
      }
      if ((a20 & 7) != 0)
      {
        v53 = (unsigned int *)(a20 & 0xFFFFFFFFFFFFFFF8);
        do
          v54 = __ldxr(v53);
        while (__stlxr(v54 - 2, v53));
      }
      if ((a21 & 7) != 0)
      {
        v55 = (unsigned int *)(a21 & 0xFFFFFFFFFFFFFFF8);
        do
          v56 = __ldxr(v55);
        while (__stlxr(v56 - 2, v55));
      }
      if ((a22 & 7) != 0)
      {
        v57 = (unsigned int *)(a22 & 0xFFFFFFFFFFFFFFF8);
        do
          v58 = __ldxr(v57);
        while (__stlxr(v58 - 2, v57));
      }
      if ((a23 & 7) != 0)
      {
        v59 = (unsigned int *)(a23 & 0xFFFFFFFFFFFFFFF8);
        do
          v60 = __ldxr(v59);
        while (__stlxr(v60 - 2, v59));
      }
      if ((a24 & 7) != 0)
      {
        v61 = (unsigned int *)(a24 & 0xFFFFFFFFFFFFFFF8);
        do
          v62 = __ldxr(v61);
        while (__stlxr(v62 - 2, v61));
      }
      if ((a25 & 7) != 0)
      {
        v63 = (unsigned int *)(a25 & 0xFFFFFFFFFFFFFFF8);
        do
          v64 = __ldxr(v63);
        while (__stlxr(v64 - 2, v63));
      }
      if ((a26 & 7) != 0)
      {
        v65 = (unsigned int *)(a26 & 0xFFFFFFFFFFFFFFF8);
        do
          v66 = __ldxr(v65);
        while (__stlxr(v66 - 2, v65));
      }
      if ((*v27 & 7) != 0)
      {
        v67 = (unsigned int *)(*v27 & 0xFFFFFFFFFFFFFFF8);
        do
          v68 = __ldxr(v67);
        while (__stlxr(v68 - 2, v67));
      }
      v69 = v27[1];
      if ((v69 & 7) != 0)
      {
        v70 = (unsigned int *)(v69 & 0xFFFFFFFFFFFFFFF8);
        do
          v71 = __ldxr(v70);
        while (__stlxr(v71 - 2, v70));
      }
      v72 = v27[2];
      if ((v72 & 7) != 0)
      {
        v73 = (unsigned int *)(v72 & 0xFFFFFFFFFFFFFFF8);
        do
          v74 = __ldxr(v73);
        while (__stlxr(v74 - 2, v73));
      }
      v75 = v27[3];
      if ((v75 & 7) != 0)
      {
        v76 = (unsigned int *)(v75 & 0xFFFFFFFFFFFFFFF8);
        do
          v77 = __ldxr(v76);
        while (__stlxr(v77 - 2, v76));
      }
      v78 = v27[4];
      if ((v78 & 7) != 0)
      {
        v79 = (unsigned int *)(v78 & 0xFFFFFFFFFFFFFFF8);
        do
          v80 = __ldxr(v79);
        while (__stlxr(v80 - 2, v79));
      }
      v81 = v27[5];
      if ((v81 & 7) != 0)
      {
        v82 = (unsigned int *)(v81 & 0xFFFFFFFFFFFFFFF8);
        do
          v83 = __ldxr(v82);
        while (__stlxr(v83 - 2, v82));
      }
      v84 = v27[6];
      if ((v84 & 7) != 0)
      {
        v85 = (unsigned int *)(v84 & 0xFFFFFFFFFFFFFFF8);
        do
          v86 = __ldxr(v85);
        while (__stlxr(v86 - 2, v85));
      }
      v87 = v27[7];
      if ((v87 & 7) != 0)
      {
        v88 = (unsigned int *)(v87 & 0xFFFFFFFFFFFFFFF8);
        do
          v89 = __ldxr(v88);
        while (__stlxr(v89 - 2, v88));
      }
      v90 = v27[8];
      if ((v90 & 7) != 0)
      {
        v91 = (unsigned int *)(v90 & 0xFFFFFFFFFFFFFFF8);
        do
          v92 = __ldxr(v91);
        while (__stlxr(v92 - 2, v91));
      }
      v93 = v27[9];
      if ((v93 & 7) != 0)
      {
        v94 = (unsigned int *)(v93 & 0xFFFFFFFFFFFFFFF8);
        do
          v95 = __ldxr(v94);
        while (__stlxr(v95 - 2, v94));
      }
      v96 = v27[10];
      if ((v96 & 7) != 0)
      {
        v97 = (unsigned int *)(v96 & 0xFFFFFFFFFFFFFFF8);
        do
          v98 = __ldxr(v97);
        while (__stlxr(v98 - 2, v97));
      }
      v99 = v27[11];
      if ((v99 & 7) != 0)
      {
        v100 = (unsigned int *)(v99 & 0xFFFFFFFFFFFFFFF8);
        do
          v101 = __ldxr(v100);
        while (__stlxr(v101 - 2, v100));
      }
      v102 = v27[12];
      if ((v102 & 7) != 0)
      {
        v103 = (unsigned int *)(v102 & 0xFFFFFFFFFFFFFFF8);
        do
          v104 = __ldxr(v103);
        while (__stlxr(v104 - 2, v103));
      }
      MEMORY[0x2276980E0](v26, 0x1020C4062D53EE8);
      __cxa_guard_abort(&qword_25583CFF0);
      _Unwind_Resume(a1);
    }
  }
}

void sub_2263CEDD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int *v47;
  unsigned int v48;
  unsigned int *v49;
  unsigned int v50;
  unsigned int *v51;
  unsigned int v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int *v55;
  unsigned int v56;

  v26 = v24 + 208;
  while (1)
  {

    v28 = *(_QWORD *)(v26 - 16);
    v26 -= 16;
    v27 = v28;
    if ((v28 & 7) != 0)
    {
      v29 = (unsigned int *)(v27 & 0xFFFFFFFFFFFFFFF8);
      do
        v30 = __ldxr(v29);
      while (__stlxr(v30 - 2, v29));
    }
    if (v26 == v24)
    {
      if ((a11 & 7) != 0)
      {
        v31 = (unsigned int *)(a11 & 0xFFFFFFFFFFFFFFF8);
        do
          v32 = __ldxr(v31);
        while (__stlxr(v32 - 2, v31));
      }
      if ((a12 & 7) != 0)
      {
        v33 = (unsigned int *)(a12 & 0xFFFFFFFFFFFFFFF8);
        do
          v34 = __ldxr(v33);
        while (__stlxr(v34 - 2, v33));
      }
      if ((a13 & 7) != 0)
      {
        v35 = (unsigned int *)(a13 & 0xFFFFFFFFFFFFFFF8);
        do
          v36 = __ldxr(v35);
        while (__stlxr(v36 - 2, v35));
      }
      if ((a14 & 7) != 0)
      {
        v37 = (unsigned int *)(a14 & 0xFFFFFFFFFFFFFFF8);
        do
          v38 = __ldxr(v37);
        while (__stlxr(v38 - 2, v37));
      }
      if ((a15 & 7) != 0)
      {
        v39 = (unsigned int *)(a15 & 0xFFFFFFFFFFFFFFF8);
        do
          v40 = __ldxr(v39);
        while (__stlxr(v40 - 2, v39));
      }
      if ((a16 & 7) != 0)
      {
        v41 = (unsigned int *)(a16 & 0xFFFFFFFFFFFFFFF8);
        do
          v42 = __ldxr(v41);
        while (__stlxr(v42 - 2, v41));
      }
      if ((a17 & 7) != 0)
      {
        v43 = (unsigned int *)(a17 & 0xFFFFFFFFFFFFFFF8);
        do
          v44 = __ldxr(v43);
        while (__stlxr(v44 - 2, v43));
      }
      if ((a18 & 7) != 0)
      {
        v45 = (unsigned int *)(a18 & 0xFFFFFFFFFFFFFFF8);
        do
          v46 = __ldxr(v45);
        while (__stlxr(v46 - 2, v45));
      }
      if ((a19 & 7) != 0)
      {
        v47 = (unsigned int *)(a19 & 0xFFFFFFFFFFFFFFF8);
        do
          v48 = __ldxr(v47);
        while (__stlxr(v48 - 2, v47));
      }
      if ((a20 & 7) != 0)
      {
        v49 = (unsigned int *)(a20 & 0xFFFFFFFFFFFFFFF8);
        do
          v50 = __ldxr(v49);
        while (__stlxr(v50 - 2, v49));
      }
      if ((a21 & 7) != 0)
      {
        v51 = (unsigned int *)(a21 & 0xFFFFFFFFFFFFFFF8);
        do
          v52 = __ldxr(v51);
        while (__stlxr(v52 - 2, v51));
      }
      if ((a22 & 7) != 0)
      {
        v53 = (unsigned int *)(a22 & 0xFFFFFFFFFFFFFFF8);
        do
          v54 = __ldxr(v53);
        while (__stlxr(v54 - 2, v53));
      }
      if ((a23 & 7) != 0)
      {
        v55 = (unsigned int *)(a23 & 0xFFFFFFFFFFFFFFF8);
        do
          v56 = __ldxr(v55);
        while (__stlxr(v56 - 2, v55));
      }
      MEMORY[0x2276980E0](v23, 0x1020C4062D53EE8);
      __cxa_guard_abort(&qword_25583D000);
      _Unwind_Resume(a1);
    }
  }
}

void sub_2263CF3C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int *v31;
  unsigned int v32;

  v18 = v16 + 80;
  while (1)
  {

    v20 = *(_QWORD *)(v18 - 16);
    v18 -= 16;
    v19 = v20;
    if ((v20 & 7) != 0)
    {
      v21 = (unsigned int *)(v19 & 0xFFFFFFFFFFFFFFF8);
      do
        v22 = __ldxr(v21);
      while (__stlxr(v22 - 2, v21));
    }
    if (v18 == v16)
    {
      if ((a11 & 7) != 0)
      {
        v23 = (unsigned int *)(a11 & 0xFFFFFFFFFFFFFFF8);
        do
          v24 = __ldxr(v23);
        while (__stlxr(v24 - 2, v23));
      }
      if ((a12 & 7) != 0)
      {
        v25 = (unsigned int *)(a12 & 0xFFFFFFFFFFFFFFF8);
        do
          v26 = __ldxr(v25);
        while (__stlxr(v26 - 2, v25));
      }
      if ((a13 & 7) != 0)
      {
        v27 = (unsigned int *)(a13 & 0xFFFFFFFFFFFFFFF8);
        do
          v28 = __ldxr(v27);
        while (__stlxr(v28 - 2, v27));
      }
      if ((a14 & 7) != 0)
      {
        v29 = (unsigned int *)(a14 & 0xFFFFFFFFFFFFFFF8);
        do
          v30 = __ldxr(v29);
        while (__stlxr(v30 - 2, v29));
      }
      if ((a15 & 7) != 0)
      {
        v31 = (unsigned int *)(a15 & 0xFFFFFFFFFFFFFFF8);
        do
          v32 = __ldxr(v31);
        while (__stlxr(v32 - 2, v31));
      }
      MEMORY[0x2276980E0](v15, 0x1020C4062D53EE8);
      __cxa_guard_abort(&qword_25583D010);
      _Unwind_Resume(a1);
    }
  }
}

void sub_2263D0560(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int *v40;
  unsigned int v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int *v52;
  unsigned int v53;
  unsigned int *v54;
  unsigned int v55;
  unsigned int *v56;
  unsigned int v57;
  unsigned int *v58;
  unsigned int v59;
  unsigned int *v60;
  unsigned int v61;
  unsigned int *v62;
  unsigned int v63;
  unsigned int *v64;
  unsigned int v65;
  unsigned int *v66;
  unsigned int v67;
  uint64_t v68;
  unsigned int *v69;
  unsigned int v70;
  uint64_t v71;
  unsigned int *v72;
  unsigned int v73;
  uint64_t v74;
  unsigned int *v75;
  unsigned int v76;
  uint64_t v77;
  unsigned int *v78;
  unsigned int v79;
  uint64_t v80;
  unsigned int *v81;
  unsigned int v82;
  uint64_t v83;
  unsigned int *v84;
  unsigned int v85;
  uint64_t v86;
  unsigned int *v87;
  unsigned int v88;
  uint64_t v89;
  unsigned int *v90;
  unsigned int v91;
  uint64_t v92;
  unsigned int *v93;
  unsigned int v94;
  uint64_t v95;
  unsigned int *v96;
  unsigned int v97;
  uint64_t v98;
  unsigned int *v99;
  unsigned int v100;
  uint64_t v101;
  unsigned int *v102;
  unsigned int v103;
  uint64_t v104;
  unsigned int *v105;
  unsigned int v106;
  uint64_t v107;
  unsigned int *v108;
  unsigned int v109;
  uint64_t v110;
  unsigned int *v111;
  unsigned int v112;
  uint64_t v113;
  unsigned int *v114;
  unsigned int v115;
  uint64_t v116;
  unsigned int *v117;
  unsigned int v118;
  uint64_t v119;
  unsigned int *v120;
  unsigned int v121;
  uint64_t v122;
  unsigned int *v123;
  unsigned int v124;
  uint64_t v125;
  unsigned int *v126;
  unsigned int v127;
  uint64_t v128;
  unsigned int *v129;
  unsigned int v130;
  uint64_t v131;
  unsigned int *v132;
  unsigned int v133;
  uint64_t v134;
  unsigned int *v135;
  unsigned int v136;
  uint64_t v137;
  unsigned int *v138;
  unsigned int v139;
  uint64_t v140;
  unsigned int *v141;
  unsigned int v142;
  uint64_t v143;
  unsigned int *v144;
  unsigned int v145;
  uint64_t v146;
  unsigned int *v147;
  unsigned int v148;

  v29 = v27 + 704;
  while (1)
  {

    v31 = *(_QWORD *)(v29 - 16);
    v29 -= 16;
    v30 = v31;
    if ((v31 & 7) != 0)
    {
      v32 = (unsigned int *)(v30 & 0xFFFFFFFFFFFFFFF8);
      do
        v33 = __ldxr(v32);
      while (__stlxr(v33 - 2, v32));
    }
    if (v29 == v27)
    {
      if ((a10 & 7) != 0)
      {
        v34 = (unsigned int *)(a10 & 0xFFFFFFFFFFFFFFF8);
        do
          v35 = __ldxr(v34);
        while (__stlxr(v35 - 2, v34));
      }
      if ((a11 & 7) != 0)
      {
        v36 = (unsigned int *)(a11 & 0xFFFFFFFFFFFFFFF8);
        do
          v37 = __ldxr(v36);
        while (__stlxr(v37 - 2, v36));
      }
      if ((a12 & 7) != 0)
      {
        v38 = (unsigned int *)(a12 & 0xFFFFFFFFFFFFFFF8);
        do
          v39 = __ldxr(v38);
        while (__stlxr(v39 - 2, v38));
      }
      if ((a13 & 7) != 0)
      {
        v40 = (unsigned int *)(a13 & 0xFFFFFFFFFFFFFFF8);
        do
          v41 = __ldxr(v40);
        while (__stlxr(v41 - 2, v40));
      }
      if ((a14 & 7) != 0)
      {
        v42 = (unsigned int *)(a14 & 0xFFFFFFFFFFFFFFF8);
        do
          v43 = __ldxr(v42);
        while (__stlxr(v43 - 2, v42));
      }
      if ((a15 & 7) != 0)
      {
        v44 = (unsigned int *)(a15 & 0xFFFFFFFFFFFFFFF8);
        do
          v45 = __ldxr(v44);
        while (__stlxr(v45 - 2, v44));
      }
      if ((a16 & 7) != 0)
      {
        v46 = (unsigned int *)(a16 & 0xFFFFFFFFFFFFFFF8);
        do
          v47 = __ldxr(v46);
        while (__stlxr(v47 - 2, v46));
      }
      if ((a17 & 7) != 0)
      {
        v48 = (unsigned int *)(a17 & 0xFFFFFFFFFFFFFFF8);
        do
          v49 = __ldxr(v48);
        while (__stlxr(v49 - 2, v48));
      }
      if ((a18 & 7) != 0)
      {
        v50 = (unsigned int *)(a18 & 0xFFFFFFFFFFFFFFF8);
        do
          v51 = __ldxr(v50);
        while (__stlxr(v51 - 2, v50));
      }
      if ((a19 & 7) != 0)
      {
        v52 = (unsigned int *)(a19 & 0xFFFFFFFFFFFFFFF8);
        do
          v53 = __ldxr(v52);
        while (__stlxr(v53 - 2, v52));
      }
      if ((a20 & 7) != 0)
      {
        v54 = (unsigned int *)(a20 & 0xFFFFFFFFFFFFFFF8);
        do
          v55 = __ldxr(v54);
        while (__stlxr(v55 - 2, v54));
      }
      if ((a21 & 7) != 0)
      {
        v56 = (unsigned int *)(a21 & 0xFFFFFFFFFFFFFFF8);
        do
          v57 = __ldxr(v56);
        while (__stlxr(v57 - 2, v56));
      }
      if ((a22 & 7) != 0)
      {
        v58 = (unsigned int *)(a22 & 0xFFFFFFFFFFFFFFF8);
        do
          v59 = __ldxr(v58);
        while (__stlxr(v59 - 2, v58));
      }
      if ((a23 & 7) != 0)
      {
        v60 = (unsigned int *)(a23 & 0xFFFFFFFFFFFFFFF8);
        do
          v61 = __ldxr(v60);
        while (__stlxr(v61 - 2, v60));
      }
      if ((a24 & 7) != 0)
      {
        v62 = (unsigned int *)(a24 & 0xFFFFFFFFFFFFFFF8);
        do
          v63 = __ldxr(v62);
        while (__stlxr(v63 - 2, v62));
      }
      if ((a25 & 7) != 0)
      {
        v64 = (unsigned int *)(a25 & 0xFFFFFFFFFFFFFFF8);
        do
          v65 = __ldxr(v64);
        while (__stlxr(v65 - 2, v64));
      }
      if ((*v26 & 7) != 0)
      {
        v66 = (unsigned int *)(*v26 & 0xFFFFFFFFFFFFFFF8);
        do
          v67 = __ldxr(v66);
        while (__stlxr(v67 - 2, v66));
      }
      v68 = v26[1];
      if ((v68 & 7) != 0)
      {
        v69 = (unsigned int *)(v68 & 0xFFFFFFFFFFFFFFF8);
        do
          v70 = __ldxr(v69);
        while (__stlxr(v70 - 2, v69));
      }
      v71 = v26[2];
      if ((v71 & 7) != 0)
      {
        v72 = (unsigned int *)(v71 & 0xFFFFFFFFFFFFFFF8);
        do
          v73 = __ldxr(v72);
        while (__stlxr(v73 - 2, v72));
      }
      v74 = v26[3];
      if ((v74 & 7) != 0)
      {
        v75 = (unsigned int *)(v74 & 0xFFFFFFFFFFFFFFF8);
        do
          v76 = __ldxr(v75);
        while (__stlxr(v76 - 2, v75));
      }
      v77 = v26[4];
      if ((v77 & 7) != 0)
      {
        v78 = (unsigned int *)(v77 & 0xFFFFFFFFFFFFFFF8);
        do
          v79 = __ldxr(v78);
        while (__stlxr(v79 - 2, v78));
      }
      v80 = v26[5];
      if ((v80 & 7) != 0)
      {
        v81 = (unsigned int *)(v80 & 0xFFFFFFFFFFFFFFF8);
        do
          v82 = __ldxr(v81);
        while (__stlxr(v82 - 2, v81));
      }
      v83 = v26[6];
      if ((v83 & 7) != 0)
      {
        v84 = (unsigned int *)(v83 & 0xFFFFFFFFFFFFFFF8);
        do
          v85 = __ldxr(v84);
        while (__stlxr(v85 - 2, v84));
      }
      v86 = v26[7];
      if ((v86 & 7) != 0)
      {
        v87 = (unsigned int *)(v86 & 0xFFFFFFFFFFFFFFF8);
        do
          v88 = __ldxr(v87);
        while (__stlxr(v88 - 2, v87));
      }
      v89 = v26[8];
      if ((v89 & 7) != 0)
      {
        v90 = (unsigned int *)(v89 & 0xFFFFFFFFFFFFFFF8);
        do
          v91 = __ldxr(v90);
        while (__stlxr(v91 - 2, v90));
      }
      v92 = v26[9];
      if ((v92 & 7) != 0)
      {
        v93 = (unsigned int *)(v92 & 0xFFFFFFFFFFFFFFF8);
        do
          v94 = __ldxr(v93);
        while (__stlxr(v94 - 2, v93));
      }
      v95 = v26[10];
      if ((v95 & 7) != 0)
      {
        v96 = (unsigned int *)(v95 & 0xFFFFFFFFFFFFFFF8);
        do
          v97 = __ldxr(v96);
        while (__stlxr(v97 - 2, v96));
      }
      v98 = v26[11];
      if ((v98 & 7) != 0)
      {
        v99 = (unsigned int *)(v98 & 0xFFFFFFFFFFFFFFF8);
        do
          v100 = __ldxr(v99);
        while (__stlxr(v100 - 2, v99));
      }
      v101 = v26[12];
      if ((v101 & 7) != 0)
      {
        v102 = (unsigned int *)(v101 & 0xFFFFFFFFFFFFFFF8);
        do
          v103 = __ldxr(v102);
        while (__stlxr(v103 - 2, v102));
      }
      v104 = v26[13];
      if ((v104 & 7) != 0)
      {
        v105 = (unsigned int *)(v104 & 0xFFFFFFFFFFFFFFF8);
        do
          v106 = __ldxr(v105);
        while (__stlxr(v106 - 2, v105));
      }
      v107 = v26[14];
      if ((v107 & 7) != 0)
      {
        v108 = (unsigned int *)(v107 & 0xFFFFFFFFFFFFFFF8);
        do
          v109 = __ldxr(v108);
        while (__stlxr(v109 - 2, v108));
      }
      v110 = v26[15];
      if ((v110 & 7) != 0)
      {
        v111 = (unsigned int *)(v110 & 0xFFFFFFFFFFFFFFF8);
        do
          v112 = __ldxr(v111);
        while (__stlxr(v112 - 2, v111));
      }
      v113 = v26[16];
      if ((v113 & 7) != 0)
      {
        v114 = (unsigned int *)(v113 & 0xFFFFFFFFFFFFFFF8);
        do
          v115 = __ldxr(v114);
        while (__stlxr(v115 - 2, v114));
      }
      v116 = v26[17];
      if ((v116 & 7) != 0)
      {
        v117 = (unsigned int *)(v116 & 0xFFFFFFFFFFFFFFF8);
        do
          v118 = __ldxr(v117);
        while (__stlxr(v118 - 2, v117));
      }
      v119 = v26[18];
      if ((v119 & 7) != 0)
      {
        v120 = (unsigned int *)(v119 & 0xFFFFFFFFFFFFFFF8);
        do
          v121 = __ldxr(v120);
        while (__stlxr(v121 - 2, v120));
      }
      v122 = v26[19];
      if ((v122 & 7) != 0)
      {
        v123 = (unsigned int *)(v122 & 0xFFFFFFFFFFFFFFF8);
        do
          v124 = __ldxr(v123);
        while (__stlxr(v124 - 2, v123));
      }
      v125 = v26[20];
      if ((v125 & 7) != 0)
      {
        v126 = (unsigned int *)(v125 & 0xFFFFFFFFFFFFFFF8);
        do
          v127 = __ldxr(v126);
        while (__stlxr(v127 - 2, v126));
      }
      v128 = v26[21];
      if ((v128 & 7) != 0)
      {
        v129 = (unsigned int *)(v128 & 0xFFFFFFFFFFFFFFF8);
        do
          v130 = __ldxr(v129);
        while (__stlxr(v130 - 2, v129));
      }
      v131 = v26[22];
      if ((v131 & 7) != 0)
      {
        v132 = (unsigned int *)(v131 & 0xFFFFFFFFFFFFFFF8);
        do
          v133 = __ldxr(v132);
        while (__stlxr(v133 - 2, v132));
      }
      v134 = v26[23];
      if ((v134 & 7) != 0)
      {
        v135 = (unsigned int *)(v134 & 0xFFFFFFFFFFFFFFF8);
        do
          v136 = __ldxr(v135);
        while (__stlxr(v136 - 2, v135));
      }
      v137 = v26[24];
      if ((v137 & 7) != 0)
      {
        v138 = (unsigned int *)(v137 & 0xFFFFFFFFFFFFFFF8);
        do
          v139 = __ldxr(v138);
        while (__stlxr(v139 - 2, v138));
      }
      v140 = v26[25];
      if ((v140 & 7) != 0)
      {
        v141 = (unsigned int *)(v140 & 0xFFFFFFFFFFFFFFF8);
        do
          v142 = __ldxr(v141);
        while (__stlxr(v142 - 2, v141));
      }
      v143 = v26[26];
      if ((v143 & 7) != 0)
      {
        v144 = (unsigned int *)(v143 & 0xFFFFFFFFFFFFFFF8);
        do
          v145 = __ldxr(v144);
        while (__stlxr(v145 - 2, v144));
      }
      v146 = v26[27];
      if ((v146 & 7) != 0)
      {
        v147 = (unsigned int *)(v146 & 0xFFFFFFFFFFFFFFF8);
        do
          v148 = __ldxr(v147);
        while (__stlxr(v148 - 2, v147));
      }
      MEMORY[0x2276980E0](v25, 0x1020C4062D53EE8);
      __cxa_guard_abort(&qword_25583D020);
      _Unwind_Resume(a1);
    }
  }
}

void sub_2263D0F14(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_guard_abort(&qword_25583D038);

  _Unwind_Resume(a1);
}

void sub_2263D0F74()
{
  USKToken *v0;
  const char *v1;
  uint64_t v2;
  void *v3;
  const char *v4;
  unsigned int *v5;
  unsigned int v6;
  USKToken *v7;
  const char *v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  unsigned int *v12;
  unsigned int v13;
  USKToken *v14;
  const char *v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  unsigned int *v19;
  unsigned int v20;
  USKToken *v21;
  const char *v22;
  uint64_t v23;
  void *v24;
  const char *v25;
  unsigned int *v26;
  unsigned int v27;
  USKToken *v28;
  const char *v29;
  uint64_t v30;
  void *v31;
  const char *v32;
  unsigned int *v33;
  unsigned int v34;
  USKToken *v35;
  const char *v36;
  uint64_t v37;
  void *v38;
  const char *v39;
  unsigned int *v40;
  unsigned int v41;
  USKToken *v42;
  const char *v43;
  uint64_t v44;
  void *v45;
  const char *v46;
  unsigned int *v47;
  unsigned int v48;
  USKToken *v49;
  const char *v50;
  uint64_t v51;
  void *v52;
  const char *v53;
  unsigned int *v54;
  unsigned int v55;
  USKToken *v56;
  const char *v57;
  uint64_t v58;
  void *v59;
  const char *v60;
  unsigned int *v61;
  unsigned int v62;
  USKToken *v63;
  const char *v64;
  uint64_t v65;
  void *v66;
  const char *v67;
  unsigned int *v68;
  unsigned int v69;
  USKToken *v70;
  const char *v71;
  uint64_t v72;
  void *v73;
  const char *v74;
  unsigned int *v75;
  unsigned int v76;
  USKToken *v77;
  const char *v78;
  uint64_t v79;
  void *v80;
  const char *v81;
  unsigned int *v82;
  unsigned int v83;
  USKToken *v84;
  const char *v85;
  uint64_t v86;
  void *v87;
  const char *v88;
  unsigned int *v89;
  unsigned int v90;
  USKToken *v91;
  const char *v92;
  uint64_t v93;
  void *v94;
  const char *v95;
  unsigned int *v96;
  unsigned int v97;
  USKToken *v98;
  const char *v99;
  uint64_t v100;
  void *v101;
  const char *v102;
  unsigned int *v103;
  unsigned int v104;
  USKToken *v105;
  const char *v106;
  uint64_t v107;
  void *v108;
  const char *v109;
  unsigned int *v110;
  unsigned int v111;
  USKToken *v112;
  const char *v113;
  uint64_t v114;
  void *v115;
  const char *v116;
  unsigned int *v117;
  unsigned int v118;
  USKToken *v119;
  const char *v120;
  uint64_t v121;
  void *v122;
  const char *v123;
  unsigned int *v124;
  unsigned int v125;
  USKToken *v126;
  const char *v127;
  uint64_t v128;
  void *v129;
  const char *v130;
  unsigned int *v131;
  unsigned int v132;
  USKToken *v133;
  const char *v134;
  uint64_t v135;
  void *v136;
  const char *v137;
  unsigned int *v138;
  unsigned int v139;
  USKToken *v140;
  const char *v141;
  uint64_t v142;
  void *v143;
  const char *v144;
  unsigned int *v145;
  unsigned int v146;
  USKToken *v147;
  const char *v148;
  uint64_t v149;
  void *v150;
  const char *v151;
  unsigned int *v152;
  unsigned int v153;
  USKToken *v154;
  const char *v155;
  uint64_t v156;
  void *v157;
  const char *v158;
  unsigned int *v159;
  unsigned int v160;
  USKToken *v161;
  const char *v162;
  uint64_t v163;
  void *v164;
  const char *v165;
  unsigned int *v166;
  unsigned int v167;
  USKToken *v168;
  const char *v169;
  uint64_t v170;
  void *v171;
  const char *v172;
  unsigned int *v173;
  unsigned int v174;
  USKToken *v175;
  const char *v176;
  uint64_t v177;
  void *v178;
  const char *v179;
  unsigned int *v180;
  unsigned int v181;
  USKToken *v182;
  const char *v183;
  uint64_t v184;
  void *v185;
  const char *v186;
  unsigned int *v187;
  unsigned int v188;
  USKToken *v189;
  const char *v190;
  uint64_t v191;
  void *v192;
  const char *v193;
  unsigned int *v194;
  unsigned int v195;
  USKToken *v196;
  const char *v197;
  uint64_t v198;
  void *v199;
  const char *v200;
  unsigned int *v201;
  unsigned int v202;
  USKToken *v203;
  const char *v204;
  uint64_t v205;
  void *v206;
  const char *v207;
  unsigned int *v208;
  unsigned int v209;
  USKToken *v210;
  const char *v211;
  uint64_t v212;
  void *v213;
  const char *v214;
  unsigned int *v215;
  unsigned int v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;

  v0 = [USKToken alloc];
  MEMORY[0x2276976D8](&v247, "Mesh");
  v3 = (void *)objc_msgSend_initWithTfToken_(v0, v1, (uint64_t)&v247, v2);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_25583D030, v4, (uint64_t)v3, (uint64_t)CFSTR("Mesh"));

  if ((v247 & 7) != 0)
  {
    v5 = (unsigned int *)(v247 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  v7 = [USKToken alloc];
  MEMORY[0x2276976D8](&v246, "Points");
  v10 = (void *)objc_msgSend_initWithTfToken_(v7, v8, (uint64_t)&v246, v9);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_25583D030, v11, (uint64_t)v10, (uint64_t)CFSTR("Points"));

  if ((v246 & 7) != 0)
  {
    v12 = (unsigned int *)(v246 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  v14 = [USKToken alloc];
  MEMORY[0x2276976D8](&v245, "BasisCurves");
  v17 = (void *)objc_msgSend_initWithTfToken_(v14, v15, (uint64_t)&v245, v16);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_25583D030, v18, (uint64_t)v17, (uint64_t)CFSTR("BasisCurves"));

  if ((v245 & 7) != 0)
  {
    v19 = (unsigned int *)(v245 & 0xFFFFFFFFFFFFFFF8);
    do
      v20 = __ldxr(v19);
    while (__stlxr(v20 - 2, v19));
  }
  v21 = [USKToken alloc];
  MEMORY[0x2276976D8](&v244, "GeomSubset");
  v24 = (void *)objc_msgSend_initWithTfToken_(v21, v22, (uint64_t)&v244, v23);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_25583D030, v25, (uint64_t)v24, (uint64_t)CFSTR("GeomSubset"));

  if ((v244 & 7) != 0)
  {
    v26 = (unsigned int *)(v244 & 0xFFFFFFFFFFFFFFF8);
    do
      v27 = __ldxr(v26);
    while (__stlxr(v27 - 2, v26));
  }
  v28 = [USKToken alloc];
  MEMORY[0x2276976D8](&v243, "Xform");
  v31 = (void *)objc_msgSend_initWithTfToken_(v28, v29, (uint64_t)&v243, v30);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_25583D030, v32, (uint64_t)v31, (uint64_t)CFSTR("Xform"));

  if ((v243 & 7) != 0)
  {
    v33 = (unsigned int *)(v243 & 0xFFFFFFFFFFFFFFF8);
    do
      v34 = __ldxr(v33);
    while (__stlxr(v34 - 2, v33));
  }
  v35 = [USKToken alloc];
  MEMORY[0x2276976D8](&v242, "Scope");
  v38 = (void *)objc_msgSend_initWithTfToken_(v35, v36, (uint64_t)&v242, v37);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_25583D030, v39, (uint64_t)v38, (uint64_t)CFSTR("Scope"));

  if ((v242 & 7) != 0)
  {
    v40 = (unsigned int *)(v242 & 0xFFFFFFFFFFFFFFF8);
    do
      v41 = __ldxr(v40);
    while (__stlxr(v41 - 2, v40));
  }
  v42 = [USKToken alloc];
  MEMORY[0x2276976D8](&v241, "Material");
  v45 = (void *)objc_msgSend_initWithTfToken_(v42, v43, (uint64_t)&v241, v44);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_25583D030, v46, (uint64_t)v45, (uint64_t)CFSTR("Material"));

  if ((v241 & 7) != 0)
  {
    v47 = (unsigned int *)(v241 & 0xFFFFFFFFFFFFFFF8);
    do
      v48 = __ldxr(v47);
    while (__stlxr(v48 - 2, v47));
  }
  v49 = [USKToken alloc];
  MEMORY[0x2276976D8](&v240, "Shader");
  v52 = (void *)objc_msgSend_initWithTfToken_(v49, v50, (uint64_t)&v240, v51);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_25583D030, v53, (uint64_t)v52, (uint64_t)CFSTR("Shader"));

  if ((v240 & 7) != 0)
  {
    v54 = (unsigned int *)(v240 & 0xFFFFFFFFFFFFFFF8);
    do
      v55 = __ldxr(v54);
    while (__stlxr(v55 - 2, v54));
  }
  v56 = [USKToken alloc];
  MEMORY[0x2276976D8](&v239, "Skeleton");
  v59 = (void *)objc_msgSend_initWithTfToken_(v56, v57, (uint64_t)&v239, v58);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_25583D030, v60, (uint64_t)v59, (uint64_t)CFSTR("Skeleton"));

  if ((v239 & 7) != 0)
  {
    v61 = (unsigned int *)(v239 & 0xFFFFFFFFFFFFFFF8);
    do
      v62 = __ldxr(v61);
    while (__stlxr(v62 - 2, v61));
  }
  v63 = [USKToken alloc];
  MEMORY[0x2276976D8](&v238, "SkelRoot");
  v66 = (void *)objc_msgSend_initWithTfToken_(v63, v64, (uint64_t)&v238, v65);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_25583D030, v67, (uint64_t)v66, (uint64_t)CFSTR("SkelRoot"));

  if ((v238 & 7) != 0)
  {
    v68 = (unsigned int *)(v238 & 0xFFFFFFFFFFFFFFF8);
    do
      v69 = __ldxr(v68);
    while (__stlxr(v69 - 2, v68));
  }
  v70 = [USKToken alloc];
  MEMORY[0x2276976D8](&v237, "SkelAnimation");
  v73 = (void *)objc_msgSend_initWithTfToken_(v70, v71, (uint64_t)&v237, v72);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_25583D030, v74, (uint64_t)v73, (uint64_t)CFSTR("SkelAnimation"));

  if ((v237 & 7) != 0)
  {
    v75 = (unsigned int *)(v237 & 0xFFFFFFFFFFFFFFF8);
    do
      v76 = __ldxr(v75);
    while (__stlxr(v76 - 2, v75));
  }
  v77 = [USKToken alloc];
  MEMORY[0x2276976D8](&v236, "BlendShape");
  v80 = (void *)objc_msgSend_initWithTfToken_(v77, v78, (uint64_t)&v236, v79);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_25583D030, v81, (uint64_t)v80, (uint64_t)CFSTR("BlendShape"));

  if ((v236 & 7) != 0)
  {
    v82 = (unsigned int *)(v236 & 0xFFFFFFFFFFFFFFF8);
    do
      v83 = __ldxr(v82);
    while (__stlxr(v83 - 2, v82));
  }
  v84 = [USKToken alloc];
  MEMORY[0x2276976D8](&v235, "Cube");
  v87 = (void *)objc_msgSend_initWithTfToken_(v84, v85, (uint64_t)&v235, v86);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_25583D030, v88, (uint64_t)v87, (uint64_t)CFSTR("Cube"));

  if ((v235 & 7) != 0)
  {
    v89 = (unsigned int *)(v235 & 0xFFFFFFFFFFFFFFF8);
    do
      v90 = __ldxr(v89);
    while (__stlxr(v90 - 2, v89));
  }
  v91 = [USKToken alloc];
  MEMORY[0x2276976D8](&v234, "Cone");
  v94 = (void *)objc_msgSend_initWithTfToken_(v91, v92, (uint64_t)&v234, v93);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_25583D030, v95, (uint64_t)v94, (uint64_t)CFSTR("Cone"));

  if ((v234 & 7) != 0)
  {
    v96 = (unsigned int *)(v234 & 0xFFFFFFFFFFFFFFF8);
    do
      v97 = __ldxr(v96);
    while (__stlxr(v97 - 2, v96));
  }
  v98 = [USKToken alloc];
  MEMORY[0x2276976D8](&v233, "Capsule");
  v101 = (void *)objc_msgSend_initWithTfToken_(v98, v99, (uint64_t)&v233, v100);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_25583D030, v102, (uint64_t)v101, (uint64_t)CFSTR("Capsule"));

  if ((v233 & 7) != 0)
  {
    v103 = (unsigned int *)(v233 & 0xFFFFFFFFFFFFFFF8);
    do
      v104 = __ldxr(v103);
    while (__stlxr(v104 - 2, v103));
  }
  v105 = [USKToken alloc];
  MEMORY[0x2276976D8](&v232, "Cylinder");
  v108 = (void *)objc_msgSend_initWithTfToken_(v105, v106, (uint64_t)&v232, v107);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_25583D030, v109, (uint64_t)v108, (uint64_t)CFSTR("Cylinder"));

  if ((v232 & 7) != 0)
  {
    v110 = (unsigned int *)(v232 & 0xFFFFFFFFFFFFFFF8);
    do
      v111 = __ldxr(v110);
    while (__stlxr(v111 - 2, v110));
  }
  v112 = [USKToken alloc];
  MEMORY[0x2276976D8](&v231, "Sphere");
  v115 = (void *)objc_msgSend_initWithTfToken_(v112, v113, (uint64_t)&v231, v114);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_25583D030, v116, (uint64_t)v115, (uint64_t)CFSTR("Sphere"));

  if ((v231 & 7) != 0)
  {
    v117 = (unsigned int *)(v231 & 0xFFFFFFFFFFFFFFF8);
    do
      v118 = __ldxr(v117);
    while (__stlxr(v118 - 2, v117));
  }
  v119 = [USKToken alloc];
  MEMORY[0x2276976D8](&v230, "Camera");
  v122 = (void *)objc_msgSend_initWithTfToken_(v119, v120, (uint64_t)&v230, v121);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_25583D030, v123, (uint64_t)v122, (uint64_t)CFSTR("Camera"));

  if ((v230 & 7) != 0)
  {
    v124 = (unsigned int *)(v230 & 0xFFFFFFFFFFFFFFF8);
    do
      v125 = __ldxr(v124);
    while (__stlxr(v125 - 2, v124));
  }
  v126 = [USKToken alloc];
  MEMORY[0x2276976D8](&v229, "SpatialAudio");
  v129 = (void *)objc_msgSend_initWithTfToken_(v126, v127, (uint64_t)&v229, v128);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_25583D030, v130, (uint64_t)v129, (uint64_t)CFSTR("SpatialAudio"));

  if ((v229 & 7) != 0)
  {
    v131 = (unsigned int *)(v229 & 0xFFFFFFFFFFFFFFF8);
    do
      v132 = __ldxr(v131);
    while (__stlxr(v132 - 2, v131));
  }
  v133 = [USKToken alloc];
  MEMORY[0x2276976D8](&v228, "PhysicsScene");
  v136 = (void *)objc_msgSend_initWithTfToken_(v133, v134, (uint64_t)&v228, v135);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_25583D030, v137, (uint64_t)v136, (uint64_t)CFSTR("PhysicsScene"));

  if ((v228 & 7) != 0)
  {
    v138 = (unsigned int *)(v228 & 0xFFFFFFFFFFFFFFF8);
    do
      v139 = __ldxr(v138);
    while (__stlxr(v139 - 2, v138));
  }
  v140 = [USKToken alloc];
  MEMORY[0x2276976D8](&v227, "PhysicsCollisionGroup");
  v143 = (void *)objc_msgSend_initWithTfToken_(v140, v141, (uint64_t)&v227, v142);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_25583D030, v144, (uint64_t)v143, (uint64_t)CFSTR("PhysicsCollisionGroup"));

  if ((v227 & 7) != 0)
  {
    v145 = (unsigned int *)(v227 & 0xFFFFFFFFFFFFFFF8);
    do
      v146 = __ldxr(v145);
    while (__stlxr(v146 - 2, v145));
  }
  v147 = [USKToken alloc];
  MEMORY[0x2276976D8](&v226, "Preliminary_Text");
  v150 = (void *)objc_msgSend_initWithTfToken_(v147, v148, (uint64_t)&v226, v149);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_25583D030, v151, (uint64_t)v150, (uint64_t)CFSTR("Preliminary_Text"));

  if ((v226 & 7) != 0)
  {
    v152 = (unsigned int *)(v226 & 0xFFFFFFFFFFFFFFF8);
    do
      v153 = __ldxr(v152);
    while (__stlxr(v153 - 2, v152));
  }
  v154 = [USKToken alloc];
  MEMORY[0x2276976D8](&v225, "Preliminary_ReferenceImage");
  v157 = (void *)objc_msgSend_initWithTfToken_(v154, v155, (uint64_t)&v225, v156);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_25583D030, v158, (uint64_t)v157, (uint64_t)CFSTR("Preliminary_ReferenceImage"));

  if ((v225 & 7) != 0)
  {
    v159 = (unsigned int *)(v225 & 0xFFFFFFFFFFFFFFF8);
    do
      v160 = __ldxr(v159);
    while (__stlxr(v160 - 2, v159));
  }
  v161 = [USKToken alloc];
  MEMORY[0x2276976D8](&v224, "Preliminary_PhysicsForce");
  v164 = (void *)objc_msgSend_initWithTfToken_(v161, v162, (uint64_t)&v224, v163);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_25583D030, v165, (uint64_t)v164, (uint64_t)CFSTR("Preliminary_PhysicsForce"));

  if ((v224 & 7) != 0)
  {
    v166 = (unsigned int *)(v224 & 0xFFFFFFFFFFFFFFF8);
    do
      v167 = __ldxr(v166);
    while (__stlxr(v167 - 2, v166));
  }
  v168 = [USKToken alloc];
  MEMORY[0x2276976D8](&v223, "Preliminary_PhysicsGravitationalForce");
  v171 = (void *)objc_msgSend_initWithTfToken_(v168, v169, (uint64_t)&v223, v170);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_25583D030, v172, (uint64_t)v171, (uint64_t)CFSTR("Preliminary_PhysicsGravitationalForce"));

  if ((v223 & 7) != 0)
  {
    v173 = (unsigned int *)(v223 & 0xFFFFFFFFFFFFFFF8);
    do
      v174 = __ldxr(v173);
    while (__stlxr(v174 - 2, v173));
  }
  v175 = [USKToken alloc];
  MEMORY[0x2276976D8](&v222, "Preliminary_InfiniteColliderPlane");
  v178 = (void *)objc_msgSend_initWithTfToken_(v175, v176, (uint64_t)&v222, v177);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_25583D030, v179, (uint64_t)v178, (uint64_t)CFSTR("Preliminary_InfiniteColliderPlane"));

  if ((v222 & 7) != 0)
  {
    v180 = (unsigned int *)(v222 & 0xFFFFFFFFFFFFFFF8);
    do
      v181 = __ldxr(v180);
    while (__stlxr(v181 - 2, v180));
  }
  v182 = [USKToken alloc];
  MEMORY[0x2276976D8](&v221, "Preliminary_Behavior");
  v185 = (void *)objc_msgSend_initWithTfToken_(v182, v183, (uint64_t)&v221, v184);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_25583D030, v186, (uint64_t)v185, (uint64_t)CFSTR("Preliminary_Behavior"));

  if ((v221 & 7) != 0)
  {
    v187 = (unsigned int *)(v221 & 0xFFFFFFFFFFFFFFF8);
    do
      v188 = __ldxr(v187);
    while (__stlxr(v188 - 2, v187));
  }
  v189 = [USKToken alloc];
  MEMORY[0x2276976D8](&v220, "Preliminary_Trigger");
  v192 = (void *)objc_msgSend_initWithTfToken_(v189, v190, (uint64_t)&v220, v191);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_25583D030, v193, (uint64_t)v192, (uint64_t)CFSTR("Preliminary_Trigger"));

  if ((v220 & 7) != 0)
  {
    v194 = (unsigned int *)(v220 & 0xFFFFFFFFFFFFFFF8);
    do
      v195 = __ldxr(v194);
    while (__stlxr(v195 - 2, v194));
  }
  v196 = [USKToken alloc];
  MEMORY[0x2276976D8](&v219, "Preliminary_Action");
  v199 = (void *)objc_msgSend_initWithTfToken_(v196, v197, (uint64_t)&v219, v198);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_25583D030, v200, (uint64_t)v199, (uint64_t)CFSTR("Preliminary_Action"));

  if ((v219 & 7) != 0)
  {
    v201 = (unsigned int *)(v219 & 0xFFFFFFFFFFFFFFF8);
    do
      v202 = __ldxr(v201);
    while (__stlxr(v202 - 2, v201));
  }
  v203 = [USKToken alloc];
  v218 = 0;
  v206 = (void *)objc_msgSend_initWithTfToken_(v203, v204, (uint64_t)&v218, v205);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_25583D030, v207, (uint64_t)v206, (uint64_t)&stru_24EDD91A8);

  if ((v218 & 7) != 0)
  {
    v208 = (unsigned int *)(v218 & 0xFFFFFFFFFFFFFFF8);
    do
      v209 = __ldxr(v208);
    while (__stlxr(v209 - 2, v208));
  }
  v210 = [USKToken alloc];
  v217 = 0;
  v213 = (void *)objc_msgSend_initWithTfToken_(v210, v211, (uint64_t)&v217, v212);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_25583D030, v214, (uint64_t)v213, (uint64_t)CFSTR("Unknown"));

  if ((v217 & 7) != 0)
  {
    v215 = (unsigned int *)(v217 & 0xFFFFFFFFFFFFFFF8);
    do
      v216 = __ldxr(v215);
    while (__stlxr(v216 - 2, v215));
  }
}

void sub_2263D1C14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  void *v10;
  void *v11;
  unsigned int *v13;
  unsigned int v14;

  v11 = v10;

  if ((a10 & 7) != 0)
  {
    v13 = (unsigned int *)(a10 & 0xFFFFFFFFFFFFFFF8);
    do
      v14 = __ldxr(v13);
    while (__stlxr(v14 - 2, v13));
  }
  _Unwind_Resume(a1);
}

void sub_2263D20FC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_guard_abort(&qword_25583D050);

  _Unwind_Resume(a1);
}

void sub_2263D215C()
{
  USKToken *v0;
  const char *v1;
  uint64_t v2;
  void *v3;
  const char *v4;
  unsigned int *v5;
  unsigned int v6;
  USKToken *v7;
  const char *v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  unsigned int *v12;
  unsigned int v13;
  USKToken *v14;
  const char *v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  unsigned int *v19;
  unsigned int v20;
  USKToken *v21;
  const char *v22;
  uint64_t v23;
  void *v24;
  const char *v25;
  unsigned int *v26;
  unsigned int v27;
  USKToken *v28;
  const char *v29;
  uint64_t v30;
  void *v31;
  const char *v32;
  unsigned int *v33;
  unsigned int v34;
  USKToken *v35;
  const char *v36;
  uint64_t v37;
  void *v38;
  const char *v39;
  unsigned int *v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v0 = [USKToken alloc];
  MEMORY[0x2276976D8](&v47, "Color");
  v3 = (void *)objc_msgSend_initWithTfToken_(v0, v1, (uint64_t)&v47, v2);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_25583D048, v4, (uint64_t)v3, (uint64_t)CFSTR("Color"));

  if ((v47 & 7) != 0)
  {
    v5 = (unsigned int *)(v47 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  v7 = [USKToken alloc];
  MEMORY[0x2276976D8](&v46, "Normal");
  v10 = (void *)objc_msgSend_initWithTfToken_(v7, v8, (uint64_t)&v46, v9);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_25583D048, v11, (uint64_t)v10, (uint64_t)CFSTR("Normal"));

  if ((v46 & 7) != 0)
  {
    v12 = (unsigned int *)(v46 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  v14 = [USKToken alloc];
  MEMORY[0x2276976D8](&v45, "TextureCoordinate");
  v17 = (void *)objc_msgSend_initWithTfToken_(v14, v15, (uint64_t)&v45, v16);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_25583D048, v18, (uint64_t)v17, (uint64_t)CFSTR("TextureCoordinate"));

  if ((v45 & 7) != 0)
  {
    v19 = (unsigned int *)(v45 & 0xFFFFFFFFFFFFFFF8);
    do
      v20 = __ldxr(v19);
    while (__stlxr(v20 - 2, v19));
  }
  v21 = [USKToken alloc];
  MEMORY[0x2276976D8](&v44, "Point");
  v24 = (void *)objc_msgSend_initWithTfToken_(v21, v22, (uint64_t)&v44, v23);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_25583D048, v25, (uint64_t)v24, (uint64_t)CFSTR("Point"));

  if ((v44 & 7) != 0)
  {
    v26 = (unsigned int *)(v44 & 0xFFFFFFFFFFFFFFF8);
    do
      v27 = __ldxr(v26);
    while (__stlxr(v27 - 2, v26));
  }
  v28 = [USKToken alloc];
  MEMORY[0x2276976D8](&v43, "Vector");
  v31 = (void *)objc_msgSend_initWithTfToken_(v28, v29, (uint64_t)&v43, v30);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_25583D048, v32, (uint64_t)v31, (uint64_t)CFSTR("Vector"));

  if ((v43 & 7) != 0)
  {
    v33 = (unsigned int *)(v43 & 0xFFFFFFFFFFFFFFF8);
    do
      v34 = __ldxr(v33);
    while (__stlxr(v34 - 2, v33));
  }
  v35 = [USKToken alloc];
  v42 = 0;
  v38 = (void *)objc_msgSend_initWithTfToken_(v35, v36, (uint64_t)&v42, v37);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_25583D048, v39, (uint64_t)v38, (uint64_t)CFSTR("None"));

  if ((v42 & 7) != 0)
  {
    v40 = (unsigned int *)(v42 & 0xFFFFFFFFFFFFFFF8);
    do
      v41 = __ldxr(v40);
    while (__stlxr(v41 - 2, v40));
  }
}

void sub_2263D23E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  void *v10;
  unsigned int *v12;
  unsigned int v13;

  v10 = v9;

  if ((a9 & 7) != 0)
  {
    v12 = (unsigned int *)(a9 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  _Unwind_Resume(a1);
}

void sub_2263D2614(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_guard_abort(&qword_25583D068);

  _Unwind_Resume(a1);
}

void sub_2263D2674()
{
  USKToken *v0;
  const char *v1;
  uint64_t v2;
  void *v3;
  const char *v4;
  unsigned int *v5;
  unsigned int v6;
  USKToken *v7;
  const char *v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  unsigned int *v12;
  unsigned int v13;
  USKToken *v14;
  const char *v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  unsigned int *v19;
  unsigned int v20;
  USKToken *v21;
  const char *v22;
  uint64_t v23;
  void *v24;
  const char *v25;
  unsigned int *v26;
  unsigned int v27;
  USKToken *v28;
  const char *v29;
  uint64_t v30;
  void *v31;
  const char *v32;
  unsigned int *v33;
  unsigned int v34;
  USKToken *v35;
  const char *v36;
  uint64_t v37;
  void *v38;
  const char *v39;
  unsigned int *v40;
  unsigned int v41;
  USKToken *v42;
  const char *v43;
  uint64_t v44;
  void *v45;
  const char *v46;
  unsigned int *v47;
  unsigned int v48;
  USKToken *v49;
  const char *v50;
  uint64_t v51;
  void *v52;
  const char *v53;
  unsigned int *v54;
  unsigned int v55;
  USKToken *v56;
  const char *v57;
  uint64_t v58;
  void *v59;
  const char *v60;
  unsigned int *v61;
  unsigned int v62;
  USKToken *v63;
  const char *v64;
  uint64_t v65;
  void *v66;
  const char *v67;
  unsigned int *v68;
  unsigned int v69;
  USKToken *v70;
  const char *v71;
  uint64_t v72;
  void *v73;
  const char *v74;
  unsigned int *v75;
  unsigned int v76;
  USKToken *v77;
  const char *v78;
  uint64_t v79;
  void *v80;
  const char *v81;
  unsigned int *v82;
  unsigned int v83;
  USKToken *v84;
  const char *v85;
  uint64_t v86;
  void *v87;
  const char *v88;
  unsigned int *v89;
  unsigned int v90;
  USKToken *v91;
  const char *v92;
  uint64_t v93;
  void *v94;
  const char *v95;
  unsigned int *v96;
  unsigned int v97;
  USKToken *v98;
  const char *v99;
  uint64_t v100;
  void *v101;
  const char *v102;
  unsigned int *v103;
  unsigned int v104;
  USKToken *v105;
  const char *v106;
  uint64_t v107;
  void *v108;
  const char *v109;
  unsigned int *v110;
  unsigned int v111;
  USKToken *v112;
  const char *v113;
  uint64_t v114;
  void *v115;
  const char *v116;
  unsigned int *v117;
  unsigned int v118;
  USKToken *v119;
  const char *v120;
  uint64_t v121;
  void *v122;
  const char *v123;
  unsigned int *v124;
  unsigned int v125;
  USKToken *v126;
  const char *v127;
  uint64_t v128;
  void *v129;
  const char *v130;
  unsigned int *v131;
  unsigned int v132;
  USKToken *v133;
  const char *v134;
  uint64_t v135;
  void *v136;
  const char *v137;
  unsigned int *v138;
  unsigned int v139;
  USKToken *v140;
  const char *v141;
  uint64_t v142;
  void *v143;
  const char *v144;
  unsigned int *v145;
  unsigned int v146;
  USKToken *v147;
  const char *v148;
  uint64_t v149;
  void *v150;
  const char *v151;
  unsigned int *v152;
  unsigned int v153;
  USKToken *v154;
  const char *v155;
  uint64_t v156;
  void *v157;
  const char *v158;
  unsigned int *v159;
  unsigned int v160;
  USKToken *v161;
  const char *v162;
  uint64_t v163;
  void *v164;
  const char *v165;
  unsigned int *v166;
  unsigned int v167;
  USKToken *v168;
  const char *v169;
  uint64_t v170;
  void *v171;
  const char *v172;
  unsigned int *v173;
  unsigned int v174;
  USKToken *v175;
  const char *v176;
  uint64_t v177;
  void *v178;
  const char *v179;
  unsigned int *v180;
  unsigned int v181;
  USKToken *v182;
  const char *v183;
  uint64_t v184;
  void *v185;
  const char *v186;
  unsigned int *v187;
  unsigned int v188;
  USKToken *v189;
  const char *v190;
  uint64_t v191;
  void *v192;
  const char *v193;
  unsigned int *v194;
  unsigned int v195;
  USKToken *v196;
  const char *v197;
  uint64_t v198;
  void *v199;
  const char *v200;
  unsigned int *v201;
  unsigned int v202;
  USKToken *v203;
  const char *v204;
  uint64_t v205;
  void *v206;
  const char *v207;
  unsigned int *v208;
  unsigned int v209;
  USKToken *v210;
  const char *v211;
  uint64_t v212;
  void *v213;
  const char *v214;
  unsigned int *v215;
  unsigned int v216;
  USKToken *v217;
  const char *v218;
  uint64_t v219;
  void *v220;
  const char *v221;
  unsigned int *v222;
  unsigned int v223;
  USKToken *v224;
  const char *v225;
  uint64_t v226;
  void *v227;
  const char *v228;
  unsigned int *v229;
  unsigned int v230;
  USKToken *v231;
  const char *v232;
  uint64_t v233;
  void *v234;
  const char *v235;
  unsigned int *v236;
  unsigned int v237;
  USKToken *v238;
  const char *v239;
  uint64_t v240;
  void *v241;
  const char *v242;
  unsigned int *v243;
  unsigned int v244;
  USKToken *v245;
  const char *v246;
  uint64_t v247;
  void *v248;
  const char *v249;
  unsigned int *v250;
  unsigned int v251;
  USKToken *v252;
  const char *v253;
  uint64_t v254;
  void *v255;
  const char *v256;
  unsigned int *v257;
  unsigned int v258;
  USKToken *v259;
  const char *v260;
  uint64_t v261;
  void *v262;
  const char *v263;
  unsigned int *v264;
  unsigned int v265;
  USKToken *v266;
  const char *v267;
  uint64_t v268;
  void *v269;
  const char *v270;
  unsigned int *v271;
  unsigned int v272;
  USKToken *v273;
  const char *v274;
  uint64_t v275;
  void *v276;
  const char *v277;
  unsigned int *v278;
  unsigned int v279;
  USKToken *v280;
  const char *v281;
  uint64_t v282;
  void *v283;
  const char *v284;
  unsigned int *v285;
  unsigned int v286;
  USKToken *v287;
  const char *v288;
  uint64_t v289;
  void *v290;
  const char *v291;
  unsigned int *v292;
  unsigned int v293;
  USKToken *v294;
  const char *v295;
  uint64_t v296;
  void *v297;
  const char *v298;
  unsigned int *v299;
  unsigned int v300;
  USKToken *v301;
  const char *v302;
  uint64_t v303;
  void *v304;
  const char *v305;
  unsigned int *v306;
  unsigned int v307;
  USKToken *v308;
  const char *v309;
  uint64_t v310;
  void *v311;
  const char *v312;
  unsigned int *v313;
  unsigned int v314;
  USKToken *v315;
  const char *v316;
  uint64_t v317;
  void *v318;
  const char *v319;
  unsigned int *v320;
  unsigned int v321;
  USKToken *v322;
  const char *v323;
  uint64_t v324;
  void *v325;
  const char *v326;
  unsigned int *v327;
  unsigned int v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;

  v0 = [USKToken alloc];
  MEMORY[0x2276976D8](&v375, "double");
  v3 = (void *)objc_msgSend_initWithTfToken_(v0, v1, (uint64_t)&v375, v2);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_25583D060, v4, (uint64_t)v3, (uint64_t)CFSTR("double"));

  if ((v375 & 7) != 0)
  {
    v5 = (unsigned int *)(v375 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  v7 = [USKToken alloc];
  MEMORY[0x2276976D8](&v374, "double2");
  v10 = (void *)objc_msgSend_initWithTfToken_(v7, v8, (uint64_t)&v374, v9);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_25583D060, v11, (uint64_t)v10, (uint64_t)CFSTR("double2"));

  if ((v374 & 7) != 0)
  {
    v12 = (unsigned int *)(v374 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  v14 = [USKToken alloc];
  MEMORY[0x2276976D8](&v373, "double3");
  v17 = (void *)objc_msgSend_initWithTfToken_(v14, v15, (uint64_t)&v373, v16);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_25583D060, v18, (uint64_t)v17, (uint64_t)CFSTR("double3"));

  if ((v373 & 7) != 0)
  {
    v19 = (unsigned int *)(v373 & 0xFFFFFFFFFFFFFFF8);
    do
      v20 = __ldxr(v19);
    while (__stlxr(v20 - 2, v19));
  }
  v21 = [USKToken alloc];
  MEMORY[0x2276976D8](&v372, "double4");
  v24 = (void *)objc_msgSend_initWithTfToken_(v21, v22, (uint64_t)&v372, v23);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_25583D060, v25, (uint64_t)v24, (uint64_t)CFSTR("double4"));

  if ((v372 & 7) != 0)
  {
    v26 = (unsigned int *)(v372 & 0xFFFFFFFFFFFFFFF8);
    do
      v27 = __ldxr(v26);
    while (__stlxr(v27 - 2, v26));
  }
  v28 = [USKToken alloc];
  MEMORY[0x2276976D8](&v371, "matrix4d");
  v31 = (void *)objc_msgSend_initWithTfToken_(v28, v29, (uint64_t)&v371, v30);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_25583D060, v32, (uint64_t)v31, (uint64_t)CFSTR("double4x4"));

  if ((v371 & 7) != 0)
  {
    v33 = (unsigned int *)(v371 & 0xFFFFFFFFFFFFFFF8);
    do
      v34 = __ldxr(v33);
    while (__stlxr(v34 - 2, v33));
  }
  v35 = [USKToken alloc];
  MEMORY[0x2276976D8](&v370, "double[]");
  v38 = (void *)objc_msgSend_initWithTfToken_(v35, v36, (uint64_t)&v370, v37);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_25583D060, v39, (uint64_t)v38, (uint64_t)CFSTR("double[]"));

  if ((v370 & 7) != 0)
  {
    v40 = (unsigned int *)(v370 & 0xFFFFFFFFFFFFFFF8);
    do
      v41 = __ldxr(v40);
    while (__stlxr(v41 - 2, v40));
  }
  v42 = [USKToken alloc];
  MEMORY[0x2276976D8](&v369, "double2[]");
  v45 = (void *)objc_msgSend_initWithTfToken_(v42, v43, (uint64_t)&v369, v44);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_25583D060, v46, (uint64_t)v45, (uint64_t)CFSTR("double2[]"));

  if ((v369 & 7) != 0)
  {
    v47 = (unsigned int *)(v369 & 0xFFFFFFFFFFFFFFF8);
    do
      v48 = __ldxr(v47);
    while (__stlxr(v48 - 2, v47));
  }
  v49 = [USKToken alloc];
  MEMORY[0x2276976D8](&v368, "double3[]");
  v52 = (void *)objc_msgSend_initWithTfToken_(v49, v50, (uint64_t)&v368, v51);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_25583D060, v53, (uint64_t)v52, (uint64_t)CFSTR("double3[]"));

  if ((v368 & 7) != 0)
  {
    v54 = (unsigned int *)(v368 & 0xFFFFFFFFFFFFFFF8);
    do
      v55 = __ldxr(v54);
    while (__stlxr(v55 - 2, v54));
  }
  v56 = [USKToken alloc];
  MEMORY[0x2276976D8](&v367, "double4[]");
  v59 = (void *)objc_msgSend_initWithTfToken_(v56, v57, (uint64_t)&v367, v58);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_25583D060, v60, (uint64_t)v59, (uint64_t)CFSTR("double4[]"));

  if ((v367 & 7) != 0)
  {
    v61 = (unsigned int *)(v367 & 0xFFFFFFFFFFFFFFF8);
    do
      v62 = __ldxr(v61);
    while (__stlxr(v62 - 2, v61));
  }
  v63 = [USKToken alloc];
  MEMORY[0x2276976D8](&v366, "matrix4d[]");
  v66 = (void *)objc_msgSend_initWithTfToken_(v63, v64, (uint64_t)&v366, v65);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_25583D060, v67, (uint64_t)v66, (uint64_t)CFSTR("double4x4[]"));

  if ((v366 & 7) != 0)
  {
    v68 = (unsigned int *)(v366 & 0xFFFFFFFFFFFFFFF8);
    do
      v69 = __ldxr(v68);
    while (__stlxr(v69 - 2, v68));
  }
  v70 = [USKToken alloc];
  MEMORY[0x2276976D8](&v365, "half");
  v73 = (void *)objc_msgSend_initWithTfToken_(v70, v71, (uint64_t)&v365, v72);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_25583D060, v74, (uint64_t)v73, (uint64_t)CFSTR("half"));

  if ((v365 & 7) != 0)
  {
    v75 = (unsigned int *)(v365 & 0xFFFFFFFFFFFFFFF8);
    do
      v76 = __ldxr(v75);
    while (__stlxr(v76 - 2, v75));
  }
  v77 = [USKToken alloc];
  MEMORY[0x2276976D8](&v364, "half2");
  v80 = (void *)objc_msgSend_initWithTfToken_(v77, v78, (uint64_t)&v364, v79);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_25583D060, v81, (uint64_t)v80, (uint64_t)CFSTR("half2"));

  if ((v364 & 7) != 0)
  {
    v82 = (unsigned int *)(v364 & 0xFFFFFFFFFFFFFFF8);
    do
      v83 = __ldxr(v82);
    while (__stlxr(v83 - 2, v82));
  }
  v84 = [USKToken alloc];
  MEMORY[0x2276976D8](&v363, "half3");
  v87 = (void *)objc_msgSend_initWithTfToken_(v84, v85, (uint64_t)&v363, v86);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_25583D060, v88, (uint64_t)v87, (uint64_t)CFSTR("half3"));

  if ((v363 & 7) != 0)
  {
    v89 = (unsigned int *)(v363 & 0xFFFFFFFFFFFFFFF8);
    do
      v90 = __ldxr(v89);
    while (__stlxr(v90 - 2, v89));
  }
  v91 = [USKToken alloc];
  MEMORY[0x2276976D8](&v362, "half4");
  v94 = (void *)objc_msgSend_initWithTfToken_(v91, v92, (uint64_t)&v362, v93);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_25583D060, v95, (uint64_t)v94, (uint64_t)CFSTR("half4"));

  if ((v362 & 7) != 0)
  {
    v96 = (unsigned int *)(v362 & 0xFFFFFFFFFFFFFFF8);
    do
      v97 = __ldxr(v96);
    while (__stlxr(v97 - 2, v96));
  }
  v98 = [USKToken alloc];
  MEMORY[0x2276976D8](&v361, "half[]");
  v101 = (void *)objc_msgSend_initWithTfToken_(v98, v99, (uint64_t)&v361, v100);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_25583D060, v102, (uint64_t)v101, (uint64_t)CFSTR("half[]"));

  if ((v361 & 7) != 0)
  {
    v103 = (unsigned int *)(v361 & 0xFFFFFFFFFFFFFFF8);
    do
      v104 = __ldxr(v103);
    while (__stlxr(v104 - 2, v103));
  }
  v105 = [USKToken alloc];
  MEMORY[0x2276976D8](&v360, "half2[]");
  v108 = (void *)objc_msgSend_initWithTfToken_(v105, v106, (uint64_t)&v360, v107);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_25583D060, v109, (uint64_t)v108, (uint64_t)CFSTR("half2[]"));

  if ((v360 & 7) != 0)
  {
    v110 = (unsigned int *)(v360 & 0xFFFFFFFFFFFFFFF8);
    do
      v111 = __ldxr(v110);
    while (__stlxr(v111 - 2, v110));
  }
  v112 = [USKToken alloc];
  MEMORY[0x2276976D8](&v359, "half3[]");
  v115 = (void *)objc_msgSend_initWithTfToken_(v112, v113, (uint64_t)&v359, v114);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_25583D060, v116, (uint64_t)v115, (uint64_t)CFSTR("half3[]"));

  if ((v359 & 7) != 0)
  {
    v117 = (unsigned int *)(v359 & 0xFFFFFFFFFFFFFFF8);
    do
      v118 = __ldxr(v117);
    while (__stlxr(v118 - 2, v117));
  }
  v119 = [USKToken alloc];
  MEMORY[0x2276976D8](&v358, "half4[]");
  v122 = (void *)objc_msgSend_initWithTfToken_(v119, v120, (uint64_t)&v358, v121);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_25583D060, v123, (uint64_t)v122, (uint64_t)CFSTR("half4[]"));

  if ((v358 & 7) != 0)
  {
    v124 = (unsigned int *)(v358 & 0xFFFFFFFFFFFFFFF8);
    do
      v125 = __ldxr(v124);
    while (__stlxr(v125 - 2, v124));
  }
  v126 = [USKToken alloc];
  MEMORY[0x2276976D8](&v357, "float");
  v129 = (void *)objc_msgSend_initWithTfToken_(v126, v127, (uint64_t)&v357, v128);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_25583D060, v130, (uint64_t)v129, (uint64_t)CFSTR("float"));

  if ((v357 & 7) != 0)
  {
    v131 = (unsigned int *)(v357 & 0xFFFFFFFFFFFFFFF8);
    do
      v132 = __ldxr(v131);
    while (__stlxr(v132 - 2, v131));
  }
  v133 = [USKToken alloc];
  MEMORY[0x2276976D8](&v356, "float2");
  v136 = (void *)objc_msgSend_initWithTfToken_(v133, v134, (uint64_t)&v356, v135);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_25583D060, v137, (uint64_t)v136, (uint64_t)CFSTR("float2"));

  if ((v356 & 7) != 0)
  {
    v138 = (unsigned int *)(v356 & 0xFFFFFFFFFFFFFFF8);
    do
      v139 = __ldxr(v138);
    while (__stlxr(v139 - 2, v138));
  }
  v140 = [USKToken alloc];
  MEMORY[0x2276976D8](&v355, "float3");
  v143 = (void *)objc_msgSend_initWithTfToken_(v140, v141, (uint64_t)&v355, v142);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_25583D060, v144, (uint64_t)v143, (uint64_t)CFSTR("float3"));

  if ((v355 & 7) != 0)
  {
    v145 = (unsigned int *)(v355 & 0xFFFFFFFFFFFFFFF8);
    do
      v146 = __ldxr(v145);
    while (__stlxr(v146 - 2, v145));
  }
  v147 = [USKToken alloc];
  MEMORY[0x2276976D8](&v354, "float4");
  v150 = (void *)objc_msgSend_initWithTfToken_(v147, v148, (uint64_t)&v354, v149);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_25583D060, v151, (uint64_t)v150, (uint64_t)CFSTR("float4"));

  if ((v354 & 7) != 0)
  {
    v152 = (unsigned int *)(v354 & 0xFFFFFFFFFFFFFFF8);
    do
      v153 = __ldxr(v152);
    while (__stlxr(v153 - 2, v152));
  }
  v154 = [USKToken alloc];
  MEMORY[0x2276976D8](&v353, "matrix4f");
  v157 = (void *)objc_msgSend_initWithTfToken_(v154, v155, (uint64_t)&v353, v156);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_25583D060, v158, (uint64_t)v157, (uint64_t)CFSTR("float4x4"));

  if ((v353 & 7) != 0)
  {
    v159 = (unsigned int *)(v353 & 0xFFFFFFFFFFFFFFF8);
    do
      v160 = __ldxr(v159);
    while (__stlxr(v160 - 2, v159));
  }
  v161 = [USKToken alloc];
  MEMORY[0x2276976D8](&v352, "float[]");
  v164 = (void *)objc_msgSend_initWithTfToken_(v161, v162, (uint64_t)&v352, v163);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_25583D060, v165, (uint64_t)v164, (uint64_t)CFSTR("float[]"));

  if ((v352 & 7) != 0)
  {
    v166 = (unsigned int *)(v352 & 0xFFFFFFFFFFFFFFF8);
    do
      v167 = __ldxr(v166);
    while (__stlxr(v167 - 2, v166));
  }
  v168 = [USKToken alloc];
  MEMORY[0x2276976D8](&v351, "float2[]");
  v171 = (void *)objc_msgSend_initWithTfToken_(v168, v169, (uint64_t)&v351, v170);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_25583D060, v172, (uint64_t)v171, (uint64_t)CFSTR("float2[]"));

  if ((v351 & 7) != 0)
  {
    v173 = (unsigned int *)(v351 & 0xFFFFFFFFFFFFFFF8);
    do
      v174 = __ldxr(v173);
    while (__stlxr(v174 - 2, v173));
  }
  v175 = [USKToken alloc];
  MEMORY[0x2276976D8](&v350, "float3[]");
  v178 = (void *)objc_msgSend_initWithTfToken_(v175, v176, (uint64_t)&v350, v177);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_25583D060, v179, (uint64_t)v178, (uint64_t)CFSTR("float3[]"));

  if ((v350 & 7) != 0)
  {
    v180 = (unsigned int *)(v350 & 0xFFFFFFFFFFFFFFF8);
    do
      v181 = __ldxr(v180);
    while (__stlxr(v181 - 2, v180));
  }
  v182 = [USKToken alloc];
  MEMORY[0x2276976D8](&v349, "float4[]");
  v185 = (void *)objc_msgSend_initWithTfToken_(v182, v183, (uint64_t)&v349, v184);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_25583D060, v186, (uint64_t)v185, (uint64_t)CFSTR("float4[]"));

  if ((v349 & 7) != 0)
  {
    v187 = (unsigned int *)(v349 & 0xFFFFFFFFFFFFFFF8);
    do
      v188 = __ldxr(v187);
    while (__stlxr(v188 - 2, v187));
  }
  v189 = [USKToken alloc];
  MEMORY[0x2276976D8](&v348, "matrix4f[]");
  v192 = (void *)objc_msgSend_initWithTfToken_(v189, v190, (uint64_t)&v348, v191);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_25583D060, v193, (uint64_t)v192, (uint64_t)CFSTR("float4x4[]"));

  if ((v348 & 7) != 0)
  {
    v194 = (unsigned int *)(v348 & 0xFFFFFFFFFFFFFFF8);
    do
      v195 = __ldxr(v194);
    while (__stlxr(v195 - 2, v194));
  }
  v196 = [USKToken alloc];
  MEMORY[0x2276976D8](&v347, "int");
  v199 = (void *)objc_msgSend_initWithTfToken_(v196, v197, (uint64_t)&v347, v198);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_25583D060, v200, (uint64_t)v199, (uint64_t)CFSTR("int"));

  if ((v347 & 7) != 0)
  {
    v201 = (unsigned int *)(v347 & 0xFFFFFFFFFFFFFFF8);
    do
      v202 = __ldxr(v201);
    while (__stlxr(v202 - 2, v201));
  }
  v203 = [USKToken alloc];
  MEMORY[0x2276976D8](&v346, "int[]");
  v206 = (void *)objc_msgSend_initWithTfToken_(v203, v204, (uint64_t)&v346, v205);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_25583D060, v207, (uint64_t)v206, (uint64_t)CFSTR("int[]"));

  if ((v346 & 7) != 0)
  {
    v208 = (unsigned int *)(v346 & 0xFFFFFFFFFFFFFFF8);
    do
      v209 = __ldxr(v208);
    while (__stlxr(v209 - 2, v208));
  }
  v210 = [USKToken alloc];
  MEMORY[0x2276976D8](&v345, "BOOL");
  v213 = (void *)objc_msgSend_initWithTfToken_(v210, v211, (uint64_t)&v345, v212);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_25583D060, v214, (uint64_t)v213, (uint64_t)CFSTR("BOOL"));

  if ((v345 & 7) != 0)
  {
    v215 = (unsigned int *)(v345 & 0xFFFFFFFFFFFFFFF8);
    do
      v216 = __ldxr(v215);
    while (__stlxr(v216 - 2, v215));
  }
  v217 = [USKToken alloc];
  MEMORY[0x2276976D8](&v344, "BOOL[]");
  v220 = (void *)objc_msgSend_initWithTfToken_(v217, v218, (uint64_t)&v344, v219);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_25583D060, v221, (uint64_t)v220, (uint64_t)CFSTR("BOOL[]"));

  if ((v344 & 7) != 0)
  {
    v222 = (unsigned int *)(v344 & 0xFFFFFFFFFFFFFFF8);
    do
      v223 = __ldxr(v222);
    while (__stlxr(v223 - 2, v222));
  }
  v224 = [USKToken alloc];
  MEMORY[0x2276976D8](&v343, "uint");
  v227 = (void *)objc_msgSend_initWithTfToken_(v224, v225, (uint64_t)&v343, v226);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_25583D060, v228, (uint64_t)v227, (uint64_t)CFSTR("uint"));

  if ((v343 & 7) != 0)
  {
    v229 = (unsigned int *)(v343 & 0xFFFFFFFFFFFFFFF8);
    do
      v230 = __ldxr(v229);
    while (__stlxr(v230 - 2, v229));
  }
  v231 = [USKToken alloc];
  MEMORY[0x2276976D8](&v342, "uint[]");
  v234 = (void *)objc_msgSend_initWithTfToken_(v231, v232, (uint64_t)&v342, v233);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_25583D060, v235, (uint64_t)v234, (uint64_t)CFSTR("uint[]"));

  if ((v342 & 7) != 0)
  {
    v236 = (unsigned int *)(v342 & 0xFFFFFFFFFFFFFFF8);
    do
      v237 = __ldxr(v236);
    while (__stlxr(v237 - 2, v236));
  }
  v238 = [USKToken alloc];
  MEMORY[0x2276976D8](&v341, "timecode");
  v241 = (void *)objc_msgSend_initWithTfToken_(v238, v239, (uint64_t)&v341, v240);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_25583D060, v242, (uint64_t)v241, (uint64_t)CFSTR("timecode"));

  if ((v341 & 7) != 0)
  {
    v243 = (unsigned int *)(v341 & 0xFFFFFFFFFFFFFFF8);
    do
      v244 = __ldxr(v243);
    while (__stlxr(v244 - 2, v243));
  }
  v245 = [USKToken alloc];
  MEMORY[0x2276976D8](&v340, "token");
  v248 = (void *)objc_msgSend_initWithTfToken_(v245, v246, (uint64_t)&v340, v247);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_25583D060, v249, (uint64_t)v248, (uint64_t)CFSTR("token"));

  if ((v340 & 7) != 0)
  {
    v250 = (unsigned int *)(v340 & 0xFFFFFFFFFFFFFFF8);
    do
      v251 = __ldxr(v250);
    while (__stlxr(v251 - 2, v250));
  }
  v252 = [USKToken alloc];
  MEMORY[0x2276976D8](&v339, "token[]");
  v255 = (void *)objc_msgSend_initWithTfToken_(v252, v253, (uint64_t)&v339, v254);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_25583D060, v256, (uint64_t)v255, (uint64_t)CFSTR("token[]"));

  if ((v339 & 7) != 0)
  {
    v257 = (unsigned int *)(v339 & 0xFFFFFFFFFFFFFFF8);
    do
      v258 = __ldxr(v257);
    while (__stlxr(v258 - 2, v257));
  }
  v259 = [USKToken alloc];
  MEMORY[0x2276976D8](&v338, "string");
  v262 = (void *)objc_msgSend_initWithTfToken_(v259, v260, (uint64_t)&v338, v261);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_25583D060, v263, (uint64_t)v262, (uint64_t)CFSTR("string"));

  if ((v338 & 7) != 0)
  {
    v264 = (unsigned int *)(v338 & 0xFFFFFFFFFFFFFFF8);
    do
      v265 = __ldxr(v264);
    while (__stlxr(v265 - 2, v264));
  }
  v266 = [USKToken alloc];
  MEMORY[0x2276976D8](&v337, "string[]");
  v269 = (void *)objc_msgSend_initWithTfToken_(v266, v267, (uint64_t)&v337, v268);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_25583D060, v270, (uint64_t)v269, (uint64_t)CFSTR("string[]"));

  if ((v337 & 7) != 0)
  {
    v271 = (unsigned int *)(v337 & 0xFFFFFFFFFFFFFFF8);
    do
      v272 = __ldxr(v271);
    while (__stlxr(v272 - 2, v271));
  }
  v273 = [USKToken alloc];
  MEMORY[0x2276976D8](&v336, "quatf");
  v276 = (void *)objc_msgSend_initWithTfToken_(v273, v274, (uint64_t)&v336, v275);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_25583D060, v277, (uint64_t)v276, (uint64_t)CFSTR("quatf"));

  if ((v336 & 7) != 0)
  {
    v278 = (unsigned int *)(v336 & 0xFFFFFFFFFFFFFFF8);
    do
      v279 = __ldxr(v278);
    while (__stlxr(v279 - 2, v278));
  }
  v280 = [USKToken alloc];
  MEMORY[0x2276976D8](&v335, "quatf[]");
  v283 = (void *)objc_msgSend_initWithTfToken_(v280, v281, (uint64_t)&v335, v282);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_25583D060, v284, (uint64_t)v283, (uint64_t)CFSTR("quatf[]"));

  if ((v335 & 7) != 0)
  {
    v285 = (unsigned int *)(v335 & 0xFFFFFFFFFFFFFFF8);
    do
      v286 = __ldxr(v285);
    while (__stlxr(v286 - 2, v285));
  }
  v287 = [USKToken alloc];
  MEMORY[0x2276976D8](&v334, "rel");
  v290 = (void *)objc_msgSend_initWithTfToken_(v287, v288, (uint64_t)&v334, v289);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_25583D060, v291, (uint64_t)v290, (uint64_t)CFSTR("rel"));

  if ((v334 & 7) != 0)
  {
    v292 = (unsigned int *)(v334 & 0xFFFFFFFFFFFFFFF8);
    do
      v293 = __ldxr(v292);
    while (__stlxr(v293 - 2, v292));
  }
  v294 = [USKToken alloc];
  MEMORY[0x2276976D8](&v333, "rel");
  v297 = (void *)objc_msgSend_initWithTfToken_(v294, v295, (uint64_t)&v333, v296);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_25583D060, v298, (uint64_t)v297, (uint64_t)CFSTR("rel"));

  if ((v333 & 7) != 0)
  {
    v299 = (unsigned int *)(v333 & 0xFFFFFFFFFFFFFFF8);
    do
      v300 = __ldxr(v299);
    while (__stlxr(v300 - 2, v299));
  }
  v301 = [USKToken alloc];
  MEMORY[0x2276976D8](&v332, "asset[]");
  v304 = (void *)objc_msgSend_initWithTfToken_(v301, v302, (uint64_t)&v332, v303);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_25583D060, v305, (uint64_t)v304, (uint64_t)CFSTR("asset[]"));

  if ((v332 & 7) != 0)
  {
    v306 = (unsigned int *)(v332 & 0xFFFFFFFFFFFFFFF8);
    do
      v307 = __ldxr(v306);
    while (__stlxr(v307 - 2, v306));
  }
  v308 = [USKToken alloc];
  MEMORY[0x2276976D8](&v331, "asset");
  v311 = (void *)objc_msgSend_initWithTfToken_(v308, v309, (uint64_t)&v331, v310);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_25583D060, v312, (uint64_t)v311, (uint64_t)CFSTR("asset"));

  if ((v331 & 7) != 0)
  {
    v313 = (unsigned int *)(v331 & 0xFFFFFFFFFFFFFFF8);
    do
      v314 = __ldxr(v313);
    while (__stlxr(v314 - 2, v313));
  }
  v315 = [USKToken alloc];
  MEMORY[0x2276976D8](&v330, "asset");
  v318 = (void *)objc_msgSend_initWithTfToken_(v315, v316, (uint64_t)&v330, v317);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_25583D060, v319, (uint64_t)v318, (uint64_t)CFSTR("asset"));

  if ((v330 & 7) != 0)
  {
    v320 = (unsigned int *)(v330 & 0xFFFFFFFFFFFFFFF8);
    do
      v321 = __ldxr(v320);
    while (__stlxr(v321 - 2, v320));
  }
  v322 = [USKToken alloc];
  v329 = 0;
  v325 = (void *)objc_msgSend_initWithTfToken_(v322, v323, (uint64_t)&v329, v324);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_25583D060, v326, (uint64_t)v325, (uint64_t)CFSTR("unknown"));

  if ((v329 & 7) != 0)
  {
    v327 = (unsigned int *)(v329 & 0xFFFFFFFFFFFFFFF8);
    do
      v328 = __ldxr(v327);
    while (__stlxr(v328 - 2, v327));
  }
}

void sub_2263D39A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  void *v10;
  void *v11;
  unsigned int *v13;
  unsigned int v14;

  v11 = v10;

  if ((a10 & 7) != 0)
  {
    v13 = (unsigned int *)(a10 & 0xFFFFFFFFFFFFFFF8);
    do
      v14 = __ldxr(v13);
    while (__stlxr(v14 - 2, v13));
  }
  _Unwind_Resume(a1);
}

void sub_2263D4050(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_guard_abort(&qword_25583D080);

  _Unwind_Resume(a1);
}

void sub_2263D40B0()
{
  USKToken *v0;
  const char *v1;
  uint64_t v2;
  void *v3;
  const char *v4;
  unsigned int *v5;
  unsigned int v6;
  USKToken *v7;
  const char *v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  unsigned int *v12;
  unsigned int v13;
  USKToken *v14;
  const char *v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  unsigned int *v19;
  unsigned int v20;
  USKToken *v21;
  const char *v22;
  uint64_t v23;
  void *v24;
  const char *v25;
  unsigned int *v26;
  unsigned int v27;
  USKToken *v28;
  const char *v29;
  uint64_t v30;
  void *v31;
  const char *v32;
  unsigned int *v33;
  unsigned int v34;
  USKToken *v35;
  const char *v36;
  uint64_t v37;
  void *v38;
  const char *v39;
  unsigned int *v40;
  unsigned int v41;
  USKToken *v42;
  const char *v43;
  uint64_t v44;
  void *v45;
  const char *v46;
  unsigned int *v47;
  unsigned int v48;
  USKToken *v49;
  const char *v50;
  uint64_t v51;
  void *v52;
  const char *v53;
  unsigned int *v54;
  unsigned int v55;
  USKToken *v56;
  const char *v57;
  uint64_t v58;
  void *v59;
  const char *v60;
  unsigned int *v61;
  unsigned int v62;
  USKToken *v63;
  const char *v64;
  uint64_t v65;
  void *v66;
  const char *v67;
  unsigned int *v68;
  unsigned int v69;
  USKToken *v70;
  const char *v71;
  uint64_t v72;
  void *v73;
  const char *v74;
  unsigned int *v75;
  unsigned int v76;
  USKToken *v77;
  const char *v78;
  uint64_t v79;
  void *v80;
  const char *v81;
  unsigned int *v82;
  unsigned int v83;
  USKToken *v84;
  const char *v85;
  uint64_t v86;
  void *v87;
  const char *v88;
  unsigned int *v89;
  unsigned int v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;

  v0 = [USKToken alloc];
  MEMORY[0x2276976D8](&v103, "BindingAPI");
  v3 = (void *)objc_msgSend_initWithTfToken_(v0, v1, (uint64_t)&v103, v2);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_25583D078, v4, (uint64_t)v3, (uint64_t)CFSTR("BindingAPI"));

  if ((v103 & 7) != 0)
  {
    v5 = (unsigned int *)(v103 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  v7 = [USKToken alloc];
  MEMORY[0x2276976D8](&v102, "Preliminary_AnchoringAPI");
  v10 = (void *)objc_msgSend_initWithTfToken_(v7, v8, (uint64_t)&v102, v9);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_25583D078, v11, (uint64_t)v10, (uint64_t)CFSTR("Preliminary_AnchoringAPI"));

  if ((v102 & 7) != 0)
  {
    v12 = (unsigned int *)(v102 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  v14 = [USKToken alloc];
  MEMORY[0x2276976D8](&v101, "MaterialBindingAPI");
  v17 = (void *)objc_msgSend_initWithTfToken_(v14, v15, (uint64_t)&v101, v16);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_25583D078, v18, (uint64_t)v17, (uint64_t)CFSTR("MaterialBindingAPI"));

  if ((v101 & 7) != 0)
  {
    v19 = (unsigned int *)(v101 & 0xFFFFFFFFFFFFFFF8);
    do
      v20 = __ldxr(v19);
    while (__stlxr(v20 - 2, v19));
  }
  v21 = [USKToken alloc];
  MEMORY[0x2276976D8](&v100, "PhysicsRigidBodyAPI");
  v24 = (void *)objc_msgSend_initWithTfToken_(v21, v22, (uint64_t)&v100, v23);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_25583D078, v25, (uint64_t)v24, (uint64_t)CFSTR("PhysicsRigidBodyAPI"));

  if ((v100 & 7) != 0)
  {
    v26 = (unsigned int *)(v100 & 0xFFFFFFFFFFFFFFF8);
    do
      v27 = __ldxr(v26);
    while (__stlxr(v27 - 2, v26));
  }
  v28 = [USKToken alloc];
  MEMORY[0x2276976D8](&v99, "PhysicsMassAPI");
  v31 = (void *)objc_msgSend_initWithTfToken_(v28, v29, (uint64_t)&v99, v30);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_25583D078, v32, (uint64_t)v31, (uint64_t)CFSTR("PhysicsMassAPI"));

  if ((v99 & 7) != 0)
  {
    v33 = (unsigned int *)(v99 & 0xFFFFFFFFFFFFFFF8);
    do
      v34 = __ldxr(v33);
    while (__stlxr(v34 - 2, v33));
  }
  v35 = [USKToken alloc];
  MEMORY[0x2276976D8](&v98, "PhysicsCollisionAPI");
  v38 = (void *)objc_msgSend_initWithTfToken_(v35, v36, (uint64_t)&v98, v37);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_25583D078, v39, (uint64_t)v38, (uint64_t)CFSTR("PhysicsCollisionAPI"));

  if ((v98 & 7) != 0)
  {
    v40 = (unsigned int *)(v98 & 0xFFFFFFFFFFFFFFF8);
    do
      v41 = __ldxr(v40);
    while (__stlxr(v41 - 2, v40));
  }
  v42 = [USKToken alloc];
  MEMORY[0x2276976D8](&v97, "PhysicsMeshCollisionAPI");
  v45 = (void *)objc_msgSend_initWithTfToken_(v42, v43, (uint64_t)&v97, v44);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_25583D078, v46, (uint64_t)v45, (uint64_t)CFSTR("PhysicsMeshCollisionAPI"));

  if ((v97 & 7) != 0)
  {
    v47 = (unsigned int *)(v97 & 0xFFFFFFFFFFFFFFF8);
    do
      v48 = __ldxr(v47);
    while (__stlxr(v48 - 2, v47));
  }
  v49 = [USKToken alloc];
  MEMORY[0x2276976D8](&v96, "PhysicsMaterialAPI");
  v52 = (void *)objc_msgSend_initWithTfToken_(v49, v50, (uint64_t)&v96, v51);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_25583D078, v53, (uint64_t)v52, (uint64_t)CFSTR("PhysicsMaterialAPI"));

  if ((v96 & 7) != 0)
  {
    v54 = (unsigned int *)(v96 & 0xFFFFFFFFFFFFFFF8);
    do
      v55 = __ldxr(v54);
    while (__stlxr(v55 - 2, v54));
  }
  v56 = [USKToken alloc];
  MEMORY[0x2276976D8](&v95, "PhysicsFilteredPairsAPI");
  v59 = (void *)objc_msgSend_initWithTfToken_(v56, v57, (uint64_t)&v95, v58);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_25583D078, v60, (uint64_t)v59, (uint64_t)CFSTR("PhysicsFilteredPairsAPI"));

  if ((v95 & 7) != 0)
  {
    v61 = (unsigned int *)(v95 & 0xFFFFFFFFFFFFFFF8);
    do
      v62 = __ldxr(v61);
    while (__stlxr(v62 - 2, v61));
  }
  v63 = [USKToken alloc];
  MEMORY[0x2276976D8](&v94, "Preliminary_PhysicsColliderAPI");
  v66 = (void *)objc_msgSend_initWithTfToken_(v63, v64, (uint64_t)&v94, v65);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_25583D078, v67, (uint64_t)v66, (uint64_t)CFSTR("Preliminary_PhysicsColliderAPI"));

  if ((v94 & 7) != 0)
  {
    v68 = (unsigned int *)(v94 & 0xFFFFFFFFFFFFFFF8);
    do
      v69 = __ldxr(v68);
    while (__stlxr(v69 - 2, v68));
  }
  v70 = [USKToken alloc];
  MEMORY[0x2276976D8](&v93, "Preliminary_PhysicsMaterialAPI");
  v73 = (void *)objc_msgSend_initWithTfToken_(v70, v71, (uint64_t)&v93, v72);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_25583D078, v74, (uint64_t)v73, (uint64_t)CFSTR("Preliminary_PhysicsMaterialAPI"));

  if ((v93 & 7) != 0)
  {
    v75 = (unsigned int *)(v93 & 0xFFFFFFFFFFFFFFF8);
    do
      v76 = __ldxr(v75);
    while (__stlxr(v76 - 2, v75));
  }
  v77 = [USKToken alloc];
  MEMORY[0x2276976D8](&v92, "Preliminary_PhysicsRigidBodyAPI");
  v80 = (void *)objc_msgSend_initWithTfToken_(v77, v78, (uint64_t)&v92, v79);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_25583D078, v81, (uint64_t)v80, (uint64_t)CFSTR("Preliminary_PhysicsRigidBodyAPI"));

  if ((v92 & 7) != 0)
  {
    v82 = (unsigned int *)(v92 & 0xFFFFFFFFFFFFFFF8);
    do
      v83 = __ldxr(v82);
    while (__stlxr(v83 - 2, v82));
  }
  v84 = [USKToken alloc];
  v91 = 0;
  v87 = (void *)objc_msgSend_initWithTfToken_(v84, v85, (uint64_t)&v91, v86);
  objc_msgSend_setObject_forKeyedSubscript_((void *)qword_25583D078, v88, (uint64_t)v87, (uint64_t)CFSTR("Unknown"));

  if ((v91 & 7) != 0)
  {
    v89 = (unsigned int *)(v91 & 0xFFFFFFFFFFFFFFF8);
    do
      v90 = __ldxr(v89);
    while (__stlxr(v90 - 2, v89));
  }
}

void sub_2263D4614(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  void *v10;
  void *v11;
  unsigned int *v13;
  unsigned int v14;

  v11 = v10;

  if ((a10 & 7) != 0)
  {
    v13 = (unsigned int *)(a10 & 0xFFFFFFFFFFFFFFF8);
    do
      v14 = __ldxr(v13);
    while (__stlxr(v14 - 2, v13));
  }
  _Unwind_Resume(a1);
}

void sub_2263D48A4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_2263D4908(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a3)
  {
    v6 = 16 * a3;
    do
    {
      sub_2263D4984((uint64_t **)a1, v4, a2, a2);
      a2 += 2;
      v6 -= 16;
    }
    while (v6);
  }
  return a1;
}

void sub_2263D496C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2263D4D6C(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_2263D4984(uint64_t **a1, _QWORD *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t v10;
  uint64_t v11;

  v10 = 0;
  v11 = 0;
  v6 = sub_2263D4A10(a1, a2, &v11, &v10, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = (uint64_t *)operator new(0x30uLL);
    sub_2263D4D0C(v7 + 4, a4);
    sub_2263ACB70(a1, v11, v8, v7);
  }
  return v7;
}

uint64_t *sub_2263D4A10(_QWORD *a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t *a5)
{
  _QWORD *v9;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  BOOL v17;
  _QWORD *v18;

  v9 = a1 + 1;
  if (a1 + 1 == a2 || sub_2263D4C44((uint64_t)(a1 + 2), a5, a2 + 4))
  {
    if ((_QWORD *)*a1 == a2)
    {
      v12 = a2;
LABEL_16:
      if (*a2)
      {
        *a3 = v12;
        return v12 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    v11 = (_QWORD *)*a2;
    if (*a2)
    {
      do
      {
        v12 = v11;
        v11 = (_QWORD *)v11[1];
      }
      while (v11);
    }
    else
    {
      v16 = a2;
      do
      {
        v12 = (_QWORD *)v16[2];
        v17 = *v12 == (_QWORD)v16;
        v16 = v12;
      }
      while (v17);
    }
    if (sub_2263D4C44((uint64_t)(a1 + 2), v12 + 4, a5))
      goto LABEL_16;
    return sub_2263D4BA8((uint64_t)a1, a3, a5);
  }
  if (sub_2263D4C44((uint64_t)(a1 + 2), a2 + 4, a5))
  {
    a4 = a2 + 1;
    v13 = a2[1];
    if (v13)
    {
      v14 = (_QWORD *)a2[1];
      do
      {
        v15 = v14;
        v14 = (_QWORD *)*v14;
      }
      while (v14);
    }
    else
    {
      v18 = a2;
      do
      {
        v15 = (_QWORD *)v18[2];
        v17 = *v15 == (_QWORD)v18;
        v18 = v15;
      }
      while (!v17);
    }
    if (v15 != v9)
    {
      if (!sub_2263D4C44((uint64_t)(a1 + 2), a5, v15 + 4))
        return sub_2263D4BA8((uint64_t)a1, a3, a5);
      v13 = *a4;
    }
    if (v13)
    {
      *a3 = v15;
      return v15;
    }
    else
    {
      *a3 = a2;
    }
    return a4;
  }
  *a3 = a2;
  *a4 = (uint64_t)a2;
  return a4;
}

_QWORD *sub_2263D4BA8(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    v7 = a1 + 16;
    do
    {
      while (1)
      {
        v8 = v4;
        v9 = v4 + 4;
        if (!sub_2263D4C44(v7, a3, v4 + 4))
          break;
        v4 = (_QWORD *)*v8;
        v5 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (!sub_2263D4C44(v7, v9, a3))
        break;
      v5 = v8 + 1;
      v4 = (_QWORD *)v8[1];
    }
    while (v4);
  }
  else
  {
    v8 = (_QWORD *)(a1 + 8);
  }
LABEL_10:
  *a2 = v8;
  return v5;
}

uint64_t sub_2263D4C44(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  BOOL v6;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  const void *v13;
  const void *v14;
  int v15;
  unint64_t v16;
  const void *v17;
  const void *v18;
  int v19;
  size_t v20;
  const void *v21;
  size_t v22;
  const void *v23;
  size_t v24;
  int v25;

  v3 = *a2;
  v4 = *a3;
  if (*a2)
    v5 = v4 == 0;
  else
    v5 = 1;
  if (v5)
  {
    if (v3)
      v6 = 1;
    else
      v6 = v4 == 0;
    return !v6;
  }
  else
  {
    if (v3 == v4)
      return 0;
    v8 = v3 & 0xFFFFFFFFFFFFFFF8;
    v9 = v4 & 0xFFFFFFFFFFFFFFF8;
    v10 = *(_QWORD *)(v8 + 8);
    v11 = *(_QWORD *)(v9 + 8);
    if (v10 < v11)
      return 1;
    if (v10 != v11)
    {
      return 0;
    }
    else
    {
      v14 = *(const void **)(v9 + 16);
      v12 = v9 + 16;
      v13 = v14;
      v15 = *(char *)(v12 + 23);
      v18 = *(const void **)(v8 + 16);
      v16 = v8 + 16;
      v17 = v18;
      v19 = *(char *)(v16 + 23);
      if (v19 >= 0)
        v20 = *(unsigned __int8 *)(v16 + 23);
      else
        v20 = *(_QWORD *)(v16 + 8);
      if (v19 >= 0)
        v21 = (const void *)v16;
      else
        v21 = v17;
      if (v15 >= 0)
        v22 = *(unsigned __int8 *)(v12 + 23);
      else
        v22 = *(_QWORD *)(v12 + 8);
      if (v15 >= 0)
        v23 = (const void *)v12;
      else
        v23 = v13;
      if (v22 >= v20)
        v24 = v20;
      else
        v24 = v22;
      v25 = memcmp(v21, v23, v24);
      if (v25)
        return v25 < 0;
      else
        return v20 < v22;
    }
  }
}

uint64_t *sub_2263D4D0C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;

  v3 = *a2;
  *a1 = *a2;
  if ((v3 & 7) != 0)
  {
    v4 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 2, v4));
    if ((v5 & 1) == 0)
      *a1 &= 0xFFFFFFFFFFFFFFF8;
  }
  a1[1] = (uint64_t)(id)a2[1];
  return a1;
}

void sub_2263D4D6C(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;

  if (a2)
  {
    sub_2263D4D6C(a1, *a2);
    sub_2263D4D6C(a1, a2[1]);

    v4 = a2[4];
    if ((v4 & 7) != 0)
    {
      v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
      do
        v6 = __ldxr(v5);
      while (__stlxr(v6 - 2, v5));
    }
    operator delete(a2);
  }
}

_QWORD *sub_2263D4DD4(uint64_t a1, uint64_t *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  _QWORD *v6;
  int v7;
  _QWORD *v8;

  v2 = (_QWORD *)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 8);
  if (!v3)
    return v2;
  v5 = a1 + 16;
  v6 = (_QWORD *)(a1 + 8);
  do
  {
    v7 = sub_2263D4C44(v5, v3 + 4, a2);
    v8 = v3 + 1;
    if (!v7)
    {
      v8 = v3;
      v6 = v3;
    }
    v3 = (_QWORD *)*v8;
  }
  while (*v8);
  if (v6 == v2 || sub_2263D4C44(v5, a2, v6 + 4))
    return v2;
  return v6;
}

uint64_t *sub_2263D4E60(uint64_t **a1, uint64_t *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8[3];
  uint64_t v9;

  v9 = 0;
  v6 = (uint64_t **)sub_2263D4BA8((uint64_t)a1, &v9, a2);
  result = *v6;
  if (!*v6)
  {
    memset(v8, 0, sizeof(v8));
    sub_2263D4F00((uint64_t)a1, a4, v8);
    sub_2263ACB70(a1, v9, v6, v8[0]);
    return v8[0];
  }
  return result;
}

_QWORD *sub_2263D4F00@<X0>(uint64_t a1@<X0>, uint64_t **a2@<X2>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  _QWORD *result;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;

  v5 = a1 + 8;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  result = operator new(0x30uLL);
  *a3 = result;
  a3[1] = v5;
  v7 = **a2;
  result[4] = v7;
  if ((v7 & 7) != 0)
  {
    v8 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 2, v8));
    if ((v9 & 1) == 0)
      result[4] &= 0xFFFFFFFFFFFFFFF8;
  }
  result[5] = 0;
  *((_BYTE *)a3 + 16) = 1;
  return result;
}

void sub_2263D5060(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2263D50F0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2263D51D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;
  void *v15;

  if (a14 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_2263D52FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_2263D54A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  sub_2263B5610((uint64_t)va);
  sub_2263B5610((uint64_t)va1);

  _Unwind_Resume(a1);
}

void sub_2263D5644(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2263B5610((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2263D5794(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2263D59A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a17, __int16 a18, char a19, char a20)
{
  void *v20;

  sub_2263AE450(&a10);
  sub_2263AE450(&a17);
  sub_2263DB4B8((uint64_t)&a18);

  _Unwind_Resume(a1);
}

id sub_2263D5A14()
{
  if (qword_25583D090 != -1)
    dispatch_once(&qword_25583D090, &unk_24EDD8800);
  return (id)qword_25583D088;
}

void sub_2263D5CE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a13, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a14, char *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a21,__int16 a22,char a23,char a24,uint64_t a25,char a26)
{
  void *v26;
  void *v27;
  void *v28;
  uint64_t v29;

  sub_2263AE450(&a13);
  sub_2263AE450(&a14);
  sub_2263DA8BC(&a21);
  sub_2263DB4B8((uint64_t)&a22);
  __p = &a26;
  sub_2263DA544((void ***)&__p);
  if (*(char *)(v29 - 49) < 0)
    operator delete(*(void **)(v29 - 72));

  _Unwind_Resume(a1);
}

void sub_2263D5EEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  va_list va;

  va_start(va, a2);
  sub_2263AE450((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)va);

  _Unwind_Resume(a1);
}

void sub_2263D60D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a15, __int16 a16, char a17, char a18)
{
  void *v18;
  void *v19;
  void *v20;

  sub_2263AE450(&a15);
  if (a14 < 0)
    operator delete(__p);

  sub_2263DB4B8((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_2263D6414(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a12, void **a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  uint64_t v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int v43;

  sub_2263AE450(&a12);
  v40 = a14;
  if (a14)
  {
    v41 = (unsigned int *)(a14 + 8);
    do
    {
      v42 = __ldxr(v41);
      v43 = v42 - 1;
    }
    while (__stlxr(v43, v41));
    if (!v43)
      (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
  }
  sub_2263DA8BC(&a19);
  sub_2263DB4B8((uint64_t)&a20);
  a13 = &a24;
  sub_2263DA544(&a13);
  if (a35 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_2263D664C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_2263D6728(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _QWORD *a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;

  sub_2263DAA5C((uint64_t)&a9, a10);
  if (a17 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_2263D67D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    sub_226408D78(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2263D67EC(uint64_t *a1)
{
  uint64_t *v2;
  uint64_t v3;
  int v4;
  uint64_t result;
  BOOL v6;
  char *v7;

  v3 = a1[1];
  v2 = a1 + 1;
  if (!v3
    || ((v4 = *(unsigned __int8 *)(sub_2263DAAA4(v2) + 14), result = *a1, v4) ? (v6 = result == 0) : (v6 = 1), v6))
  {
    v7 = j__strrchr("/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/usd/pxr/base/tf/weakPtrFacade.h", 47);
    sub_2263AE528((unint64_t)"/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/usd/pxr/base/tf/weakPtrFacade.h", (uint64_t)v7, 0x2Fu);
    return pxrInternal__aapl__pxrReserved__::Tf_PostNullSmartPtrDereferenceFatalError();
  }
  return result;
}

void sub_2263D6A5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  void *v33;

  _Unwind_Resume(a1);
}

void sub_2263D6D14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  void *v33;

  _Unwind_Resume(a1);
}

void sub_2263D6FD0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  sub_2263D701C((uint64_t)va);
  sub_2263D701C((uint64_t)va1);

  _Unwind_Resume(a1);
}

uint64_t sub_2263D701C(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 24);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_2263BDE64(a1 + 16);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    sub_2263DA640(v5);
  return a1;
}

void sub_2263D72A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  sub_2263D73CC((uint64_t)va);
  sub_2263D73CC((uint64_t)va1);

  _Unwind_Resume(a1);
}

uint64_t sub_2263D7300@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;

  if (*(int *)a1 >= 2)
    return sub_2263DAB24(a2, *(_DWORD *)a1, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16), (uint64_t *)(a1 + 24));
  *(_DWORD *)a2 = 2;
  *(_QWORD *)(a2 + 8) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  result = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  *(_QWORD *)(a2 + 24) = 0;
  return result;
}

uint64_t sub_2263D736C(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 24);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_2263BDE64(a1 + 16);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    sub_2263DA640(v5);
  return a1;
}

uint64_t sub_2263D73CC(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 24);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_2263BDE64(a1 + 16);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    sub_2263DA640(v5);
  return a1;
}

void sub_2263D77B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  void *v21;
  uint64_t v22;

  sub_2263D73CC((uint64_t)&a9);
  sub_2263D73CC((uint64_t)&a13);
  sub_2263D701C((uint64_t)&a21);
  sub_2263D736C(v22 - 80);

  _Unwind_Resume(a1);
}

uint64_t sub_2263D783C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;

  if (*(_DWORD *)a1 == 1)
    return sub_2263DAB24(a2, 1, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16), (uint64_t *)(a1 + 24));
  *(_DWORD *)a2 = 1;
  *(_QWORD *)(a2 + 8) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  result = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  *(_QWORD *)(a2 + 24) = 0;
  return result;
}

void sub_2263D7E90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  if (a2)
    sub_2263AACCC(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_2263D8140(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  sub_2263D701C((uint64_t)&a9);
  sub_2263D701C((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_2263D82A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, unsigned int *a19)
{
  void *v19;
  void *v20;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;

  if (__p)
    operator delete(__p);
  if (a19)
  {
    v22 = a19 + 2;
    do
    {
      v23 = __ldxr(v22);
      v24 = v23 - 1;
    }
    while (__stlxr(v24, v22));
    if (!v24)
      (*(void (**)(unsigned int *))(*(_QWORD *)a19 + 8))(a19);
  }

  _Unwind_Resume(a1);
}

void sub_2263D8500(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_2263AE3F8((uint64_t)va);
  _Unwind_Resume(a1);
}

unint64_t sub_2263D8578(uint64_t a1)
{
  unint64_t result;
  _QWORD *v3;

  if (!sub_2263DAC70(a1))
    return 0;
  result = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    v3 = (_QWORD *)(*(uint64_t (**)(unint64_t, _QWORD))(*(_QWORD *)result + 112))(result, *(unsigned int *)(a1 + 16));
    return 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v3[1] - *v3) >> 3);
  }
  return result;
}

_QWORD *sub_2263D85D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v4;
  _QWORD *result;
  unint64_t v6;
  uint64_t v7;

  v4 = sub_2263DACE4(a1);
  result = *(_QWORD **)a1;
  if (*(_QWORD *)a1)
  {
    result = (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD))(*result + 112))(result, *(unsigned int *)(a1 + 16));
    v6 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(result[1] - *result) >> 3);
  }
  else
  {
    v6 = 0;
  }
  if (v4)
    v7 = a1;
  else
    v7 = 0;
  *(_QWORD *)(a2 + 8) = v7;
  *(_QWORD *)(a2 + 16) = v6;
  return result;
}

void sub_2263D8760(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2263D8CB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,char a24)
{
  void *v24;
  void *v25;
  uint64_t v26;

  sub_2263DB100(v26 - 176, *(_QWORD **)(v26 - 168));

  _Unwind_Resume(a1);
}

void sub_2263D9064(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  void *v6;
  void *v7;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  va_list va;
  uint64_t v13;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v11 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  sub_2263AD568((uint64_t)va);
  sub_2263AD568((uint64_t)va1);
  if ((a2 & 7) != 0)
  {
    v9 = (unsigned int *)(a2 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }

  _Unwind_Resume(a1);
}

void sub_2263D93C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  void *v8;
  void *v9;
  void *v10;
  unsigned int *v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v16;
  va_list va;
  uint64_t v18;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v16 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  sub_2263AD568((uint64_t)va);
  sub_2263AD568((uint64_t)va1);
  if ((a3 & 7) != 0)
  {
    v12 = (unsigned int *)(a3 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  if ((a4 & 7) != 0)
  {
    v14 = (unsigned int *)(a4 & 0xFFFFFFFFFFFFFFF8);
    do
      v15 = __ldxr(v14);
    while (__stlxr(v15 - 2, v14));
  }

  _Unwind_Resume(a1);
}

void sub_2263D95E8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_2263D981C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  void *v6;
  uint64_t v8;
  va_list va;
  uint64_t v10;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  sub_2263AD568((uint64_t)va);
  sub_2263AD568((uint64_t)va1);

  _Unwind_Resume(a1);
}

void sub_2263D9D08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  void *v33;
  void *v34;
  uint64_t v35;

  sub_2263AD568(v35 - 168);
  sub_2263AD568(v35 - 104);

  _Unwind_Resume(a1);
}

void sub_2263DA07C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  void *v6;
  uint64_t v8;
  va_list va;
  uint64_t v10;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  sub_2263AD568((uint64_t)va);
  sub_2263AD568((uint64_t)va1);

  _Unwind_Resume(a1);
}

void sub_2263DA1B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    sub_226408D78(a10);
  _Unwind_Resume(exception_object);
}

void sub_2263DA270(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a14)
    sub_226408D78(a14);
  _Unwind_Resume(exception_object);
}

void sub_2263DA394(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  std::locale::~locale(&a10);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_2263DA450(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)USKScene;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **sub_2263DA47C(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **a1)
{
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v1;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v3;

  v1 = *a1;
  *a1 = 0;
  v3 = 0;
  sub_2263AE47C((int)a1, v1);
  return sub_2263AE450(&v3);
}

void sub_2263DA4B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2263AE450((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)va);
  _Unwind_Resume(a1);
}

void sub_2263DA514()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.usdkit", "uskscene");
  v1 = (void *)qword_25583D088;
  qword_25583D088 = (uint64_t)v0;

}

void sub_2263DA544(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        v4 = sub_2263AE3F8(v4 - 16);
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_2263DA5B4(pxrInternal__aapl__pxrReserved__::UsdObject *this)
{
  uint64_t v3;
  uint64_t result;

  if (*(_DWORD *)this > 4u || ((1 << *(_DWORD *)this) & 0x1A) == 0)
    return 0;
  v3 = *((_QWORD *)this + 1);
  if (!v3 || (*(_BYTE *)(v3 + 57) & 8) != 0)
    return 0;
  if (*(_DWORD *)this == 1)
    return 1;
  result = pxrInternal__aapl__pxrReserved__::UsdObject::_GetDefiningSpecType(this);
  if (*(_DWORD *)this != 3 || (_DWORD)result != 1)
    return *(_DWORD *)this == 4 && (_DWORD)result == 8;
  return result;
}

uint64_t sub_2263DA640(uint64_t result)
{
  unint64_t *v1;
  unint64_t v2;

  v1 = (unint64_t *)(result + 48);
  do
    v2 = __ldxr(v1);
  while (__stlxr(v2 - 1, v1));
  if (result && v2 == 1)
  {
    MEMORY[0x2276972A0]();
    JUMPOUT(0x2276980E0);
  }
  return result;
}

uint64_t *sub_2263DA68C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;

  v3 = *a2;
  *a1 = *a2;
  if ((v3 & 7) != 0)
  {
    v4 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 2, v4));
    if ((v5 & 1) == 0)
      *a1 &= 0xFFFFFFFFFFFFFFF8;
  }
  sub_2263B0700(a1 + 1, a2 + 1);
  return a1;
}

void sub_2263DA710(void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    sub_2263DA750((uint64_t *)v2);
    operator delete(**a1);
  }
}

void sub_2263DA750(uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 24)
  {
    if (*(char *)(i - 1) < 0)
      operator delete(*(void **)(i - 24));
  }
  a1[1] = v2;
}

unint64_t sub_2263DA79C(unint64_t *a1)
{
  unint64_t result;
  uint64_t v4;

  result = sub_2263DA7F4();
  while (!__ldaxr(a1))
  {
    if (!__stlxr(result, a1))
      return result;
  }
  __clrex();
  if (result)
  {
    v4 = MEMORY[0x2276975B8]();
    MEMORY[0x2276980E0](v4, 0x60C40DF8E1979);
  }
  return atomic_load(a1);
}

uint64_t sub_2263DA7F4()
{
  uint64_t v0;

  v0 = operator new();
  MEMORY[0x2276975AC]();
  return v0;
}

void sub_2263DA830(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2276980E0](v1, 0x60C40DF8E1979);
  _Unwind_Resume(a1);
}

unsigned int *sub_2263DA854(unsigned int **a1)
{
  unsigned int *result;
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  char v6;

  result = *a1;
  if (result)
  {
    v2 = result + 2;
    v3 = result[2];
    if ((v3 & 0x80000000) == 0)
    {
      do
        v4 = __ldxr(v2);
      while (__stxr(v4 + 1, v2));
      return result;
    }
    if (v3 == -1)
    {
      v5 = 0xFFFFFFFFLL;
      return (unsigned int *)pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter::_AddRefMaybeLocked((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)result, (const TfRefBase *)v5);
    }
    v5 = __ldxr(v2);
    if ((_DWORD)v5 == v3)
    {
      if (!__stxr(v3 - 1, v2))
      {
        v6 = 1;
        goto LABEL_13;
      }
    }
    else
    {
      __clrex();
    }
    v6 = 0;
LABEL_13:
    if ((v6 & 1) != 0)
      return result;
    return (unsigned int *)pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter::_AddRefMaybeLocked((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)result, (const TfRefBase *)v5);
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **sub_2263DA8BC(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **a1)
{
  sub_2263AE47C((int)a1, *a1);
  return a1;
}

uint64_t *sub_2263DA8E8(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  unint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unint64_t v13;

  v3 = *a2;
  *a1 = *a2;
  a1[1] = 0;
  if (v3)
  {
    sub_2263DA9A4((unint64_t *)(v3 + 16), &v13);
    v4 = (unsigned int *)a1[1];
    a1[1] = v13;
    v13 = 0;
    if (v4)
    {
      v5 = v4 + 2;
      do
      {
        v6 = __ldxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
        (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
      v8 = v13;
      if (v13)
      {
        v9 = (unsigned int *)(v13 + 8);
        do
        {
          v10 = __ldxr(v9);
          v11 = v10 - 1;
        }
        while (__stlxr(v11, v9));
        if (!v11)
          (*(void (**)(unint64_t))(*(_QWORD *)v8 + 8))(v8);
      }
    }
  }
  return a1;
}

void sub_2263DA98C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 8);
  if (v3)
    sub_226408D78(v3);
  _Unwind_Resume(exception_object);
}

unint64_t sub_2263DA9A4@<X0>(unint64_t *a1@<X0>, unint64_t *a2@<X8>)
{
  unint64_t result;
  unint64_t v5;
  unsigned int *v6;
  unsigned int v7;

  result = atomic_load(a1);
  if (!result)
  {
    result = operator new();
    *(_DWORD *)(result + 8) = 1;
    *(_QWORD *)result = MEMORY[0x24BEE9CD8] + 16;
    *(_WORD *)(result + 12) = 0;
    *(_BYTE *)(result + 14) = 1;
    while (1)
    {
      v5 = __ldaxr(a1);
      if (v5)
        break;
      if (!__stlxr(result, a1))
        goto LABEL_7;
    }
    __clrex();
    (*(void (**)(unint64_t))(*(_QWORD *)result + 8))(result);
    result = v5;
  }
LABEL_7:
  *a2 = result;
  v6 = (unsigned int *)(result + 8);
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
  return result;
}

void sub_2263DAA5C(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_2263DAA5C(a1, *a2);
    sub_2263DAA5C(a1, a2[1]);
    sub_2263C9A24((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

uint64_t sub_2263DAAA4(uint64_t *a1)
{
  uint64_t result;
  char *v2;
  uint64_t v3;

  result = *a1;
  if (!result)
  {
    v2 = j__strrchr("/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/usd/pxr/base/tf/refPtr.h", 47);
    sub_2263AE528((unint64_t)"/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/usd/pxr/base/tf/refPtr.h", (uint64_t)v2, 0x2Fu);
    v3 = pxrInternal__aapl__pxrReserved__::Tf_PostNullSmartPtrDereferenceFatalError();
    return sub_2263DAB24(v3);
  }
  return result;
}

uint64_t sub_2263DAB24(uint64_t a1, int a2, uint64_t *a3, _DWORD *a4, uint64_t *a5)
{
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;

  *(_DWORD *)a1 = a2;
  v8 = *a3;
  *(_QWORD *)(a1 + 8) = *a3;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 48);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v11 = (_QWORD *)(a1 + 16);
  sub_2263BDDD8((_DWORD *)(a1 + 16), a4);
  sub_2263BDE28((_DWORD *)(a1 + 20), a4 + 1);
  v12 = *a5;
  *(_QWORD *)(a1 + 24) = *a5;
  if ((v12 & 7) != 0)
  {
    v13 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 2, v13));
    if ((v14 & 1) == 0)
      *(_QWORD *)(a1 + 24) &= 0xFFFFFFFFFFFFFFF8;
  }
  v15 = *(_QWORD *)(a1 + 8);
  if (v15 && (*(_BYTE *)(v15 + 57) & 8) == 0 && *(_QWORD *)(v15 + 16) == *v11)
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper();
  return a1;
}

void sub_2263DAC30(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;

  v4 = *(_QWORD *)(v1 + 24);
  if ((v4 & 7) != 0)
  {
    v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  sub_2263B5610(v2);
  v7 = *(_QWORD *)(v1 + 8);
  if (v7)
    sub_2263DA640(v7);
  _Unwind_Resume(a1);
}

uint64_t sub_2263DAC70(uint64_t a1)
{
  if (!*(_QWORD *)a1)
    return 0;
  if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::SdfSpec *)(*(_QWORD *)a1 + 8)))
  {
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper();
    return 0;
  }
  return 1;
}

uint64_t sub_2263DACE4(uint64_t a1)
{
  if (!*(_QWORD *)a1)
    return 0;
  if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::SdfSpec *)(*(_QWORD *)a1 + 8)))
  {
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper();
    return 0;
  }
  return 1;
}

_QWORD *sub_2263DAD58(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;

  v11 = result;
  if (a4)
  {
    v6 = (uint64_t)result;
    v12 = 0;
    sub_2263DADEC(result, a4);
    v9 = *(_OWORD *)a2;
    v10 = *(_QWORD *)(a2 + 16);
    v7 = *(_OWORD *)a3;
    v8 = *(_QWORD *)(a3 + 16);
    return sub_2263DAE3C(v6, &v9, &v7);
  }
  return result;
}

void sub_2263DADD8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2263DA710((void ***)(v1 - 48));
  _Unwind_Resume(a1);
}

char *sub_2263DADEC(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    sub_2263AACDC();
  result = (char *)sub_2263AAD64((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

_QWORD *sub_2263DAE3C(uint64_t a1, __int128 *a2, __int128 *a3)
{
  _QWORD *v4;
  _QWORD *result;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;

  v4 = *(_QWORD **)(a1 + 8);
  v8 = *a2;
  v9 = *((_QWORD *)a2 + 2);
  v6 = *a3;
  v7 = *((_QWORD *)a3 + 2);
  result = sub_2263DAEA4(a1 + 16, (uint64_t)&v8, (uint64_t)&v6, v4);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void sub_2263DAE9C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

_QWORD *sub_2263DAEA4(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v6;
  _QWORD v8[3];
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;

  v11 = a4;
  v9 = 0;
  v10 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  while (!sub_2263DAF4C(a2, a3))
  {
    sub_2263DAFC8(*(uint64_t **)(a2 + 8), *(_QWORD *)(a2 + 16), v11);
    ++*(_QWORD *)(a2 + 16);
    v11 += 3;
  }
  LOBYTE(v9) = 1;
  v6 = v11;
  sub_2263DB088((uint64_t)v8);
  return v6;
}

void sub_2263DAF34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2263DB088((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL sub_2263DAF4C(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8))
    return *(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16);
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper();
  return 0;
}

_QWORD *sub_2263DAFC8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *result;

  result = (_QWORD *)sub_2263DAC70((uint64_t)a1);
  if ((_DWORD)result)
    return sub_2263DB024(*a1, a2, (uint64_t)a3);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  return result;
}

_QWORD *sub_2263DB024@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  _QWORD *result;
  uint64_t v6;
  __int128 v7;

  result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  v6 = *result + 24 * a2;
  if (*(char *)(v6 + 23) < 0)
    return sub_2263AE36C((_BYTE *)a3, *(void **)v6, *(_QWORD *)(v6 + 8));
  v7 = *(_OWORD *)v6;
  *(_QWORD *)(a3 + 16) = *(_QWORD *)(v6 + 16);
  *(_OWORD *)a3 = v7;
  return result;
}

uint64_t sub_2263DB088(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_2263DB0BC(a1);
  return a1;
}

void sub_2263DB0BC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = **(_QWORD **)(a1 + 16);
  v2 = **(_QWORD **)(a1 + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 - 1) < 0)
      operator delete(*(void **)(v1 - 24));
    v1 -= 24;
  }
}

void sub_2263DB100(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;

  if (a2)
  {
    sub_2263DB100(a1, *a2);
    sub_2263DB100(a1, a2[1]);
    sub_2263AD568((uint64_t)(a2 + 5));
    v4 = a2[4];
    if ((v4 & 7) != 0)
    {
      v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
      do
        v6 = __ldxr(v5);
      while (__stlxr(v6 - 2, v5));
    }
    operator delete(a2);
  }
}

uint64_t sub_2263DB168(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (!result)
    __assert_rtn("operator->", "intrusive_ptr.hpp", 199, "px != 0");
  return result;
}

void sub_2263DB1A8(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  __int128 v19;

  if (!*(_DWORD *)(a1 + 8))
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)(a1 + 24))
      goto LABEL_14;
    v5 = *(_QWORD *)(a1 + 32);
    if (!v5)
      goto LABEL_10;
    v6 = atomic_load((unint64_t *)(v5 - 16));
    if (v6 != 1)
      goto LABEL_14;
    v5 = *(_QWORD *)(a1 + 32);
    if (v5)
    {
      if (*(_QWORD *)(a1 + 24))
        v7 = (uint64_t *)a1;
      else
        v7 = (uint64_t *)(v5 - 8);
      v8 = *v7;
    }
    else
    {
LABEL_10:
      v8 = 0;
    }
    if (v4 != v8)
    {
      v9 = v5 + 48 * v4;
      v10 = *a2;
      *(_QWORD *)(v9 + 16) = *((_QWORD *)a2 + 2);
      *(_OWORD *)v9 = v10;
      *((_QWORD *)a2 + 1) = 0;
      *((_QWORD *)a2 + 2) = 0;
      *(_QWORD *)a2 = 0;
      v11 = *(__int128 *)((char *)a2 + 24);
      *(_QWORD *)(v9 + 40) = *((_QWORD *)a2 + 5);
      *(_OWORD *)(v9 + 24) = v11;
      *((_QWORD *)a2 + 4) = 0;
      *((_QWORD *)a2 + 5) = 0;
      *((_QWORD *)a2 + 3) = 0;
LABEL_13:
      ++*(_QWORD *)a1;
      return;
    }
LABEL_14:
    v12 = *(_QWORD *)(a1 + 32);
    v13 = 1;
    do
    {
      v14 = v13;
      v13 *= 2;
    }
    while (v14 < v4 + 1);
    v15 = sub_2263C9874(a1, v14);
    v16 = 3 * v4;
    sub_2263C9A68(v12, v12 + 16 * v16, (uint64_t)v15);
    v17 = *((_QWORD *)a2 + 2);
    v18 = &v15[2 * v16];
    *(_OWORD *)v18 = *a2;
    v18[2] = v17;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    v19 = *(__int128 *)((char *)a2 + 24);
    v18[5] = *((_QWORD *)a2 + 5);
    *(_OWORD *)(v18 + 3) = v19;
    *((_QWORD *)a2 + 4) = 0;
    *((_QWORD *)a2 + 5) = 0;
    *((_QWORD *)a2 + 3) = 0;
    sub_2263C97A0((_QWORD *)a1);
    *(_QWORD *)(a1 + 32) = v15;
    goto LABEL_13;
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper();
}

uint64_t *sub_2263DB360(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  unint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unint64_t v13;

  v3 = *a2;
  *a1 = *a2;
  a1[1] = 0;
  if (v3)
  {
    sub_2263DA9A4((unint64_t *)(v3 + 16), &v13);
    v4 = (unsigned int *)a1[1];
    a1[1] = v13;
    v13 = 0;
    if (v4)
    {
      v5 = v4 + 2;
      do
      {
        v6 = __ldxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
        (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
      v8 = v13;
      if (v13)
      {
        v9 = (unsigned int *)(v13 + 8);
        do
        {
          v10 = __ldxr(v9);
          v11 = v10 - 1;
        }
        while (__stlxr(v11, v9));
        if (!v11)
          (*(void (**)(unint64_t))(*(_QWORD *)v8 + 8))(v8);
      }
    }
  }
  return a1;
}

void sub_2263DB404(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 8);
  if (v3)
    sub_226408D78(v3);
  _Unwind_Resume(exception_object);
}

void sub_2263DB41C(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 2u);
}

uint64_t sub_2263DB42C(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
}

void sub_2263DB438(unsigned int *a1@<X8>)
{
  __ldxr(a1);
}

_QWORD *sub_2263DB458(_QWORD *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  void *v6;

  *a1 = &off_24EDD8840;
  a1[1] = 0;
  objc_msgSend_array(MEMORY[0x24BDBCEB8], a2, a3, a4);
  v5 = objc_claimAutoreleasedReturnValue();
  v6 = (void *)a1[1];
  a1[1] = v5;

  return a1;
}

void sub_2263DB4A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Unwind_Resume(a1);
}

uint64_t sub_2263DB4B8(uint64_t a1)
{

  return a1;
}

void sub_2263DB4E0(uint64_t a1)
{

  JUMPOUT(0x2276980E0);
}

uint64_t sub_2263DB518()
{
  if (!atomic_load((unint64_t *)off_24EDD5B48))
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
  return pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::AddDelegate();
}

uint64_t sub_2263DB554()
{
  if (!atomic_load((unint64_t *)off_24EDD5B48))
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
  return pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::RemoveDelegate();
}

id sub_2263DB590(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  void *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  void *v23;
  const char *v24;
  void *v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  const char *v38;
  uint64_t v39;

  objc_msgSend_firstObject(*(void **)(a1 + 8), a2, a3, a4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if ((unint64_t)objc_msgSend_count(*(void **)(a1 + 8), v6, v7, v8) >= 2)
  {
    objc_msgSend_userInfo(v5, v9, v10, v11);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = (void *)objc_msgSend_mutableCopy(v12, v13, v14, v15);

    v17 = *(void **)(a1 + 8);
    v21 = objc_msgSend_count(v17, v18, v19, v20);
    objc_msgSend_subarrayWithRange_(v17, v22, 1, v21 - 1);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_setObject_forKey_(v16, v24, (uint64_t)v23, (uint64_t)CFSTR("AdditionalErrors"));
    v25 = (void *)MEMORY[0x24BDD1540];
    objc_msgSend_domain(v5, v26, v27, v28);
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    v33 = objc_msgSend_code(v5, v30, v31, v32);
    v37 = (void *)objc_msgSend_copy(v16, v34, v35, v36);
    objc_msgSend_errorWithDomain_code_userInfo_(v25, v38, (uint64_t)v29, v33, v37);
    v39 = objc_claimAutoreleasedReturnValue();

    v5 = (void *)v39;
  }
  return v5;
}

void sub_2263DB6A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_2263DB6F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v5;
  const char *v6;
  uint64_t v7;
  id v8;

  sub_2263DB774(*(_DWORD *)(a2 + 72), a2 + 40, a3, a4);
  v8 = (id)objc_claimAutoreleasedReturnValue();
  v5 = *(id *)(a1 + 8);
  objc_sync_enter(v5);
  objc_msgSend_addObject_(*(void **)(a1 + 8), v6, (uint64_t)v8, v7);
  objc_sync_exit(v5);

}

void sub_2263DB754(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  objc_sync_exit(v10);

  _Unwind_Resume(a1);
}

id sub_2263DB774(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __CFString *v5;
  const char *v6;
  uint64_t v7;
  __CFString *v8;
  int hasPrefix;
  const char *v10;
  int v11;
  const char *v12;
  void *v13;
  void *v14;
  uint64_t v16;
  _QWORD v17[2];

  v17[1] = *MEMORY[0x24BDAC8D0];
  if (*(char *)(a2 + 23) >= 0)
    objc_msgSend_stringWithUTF8String_(MEMORY[0x24BDD17C8], (const char *)a2, a2, a4);
  else
    objc_msgSend_stringWithUTF8String_(MEMORY[0x24BDD17C8], (const char *)a2, *(_QWORD *)a2, a4);
  v5 = (__CFString *)objc_claimAutoreleasedReturnValue();
  if (v5)
  {
    v8 = v5;
    hasPrefix = objc_msgSend_hasPrefix_(v5, v6, (uint64_t)CFSTR("Usd crate file version mismatch"), v7);
  }
  else
  {
    v8 = CFSTR("Unkown error.");
    hasPrefix = objc_msgSend_hasPrefix_(CFSTR("Unkown error."), v6, (uint64_t)CFSTR("Usd crate file version mismatch"), v7);
  }
  v11 = hasPrefix;
  v16 = *MEMORY[0x24BDD0FC8];
  v17[0] = v8;
  objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x24BDBCE70], v10, (uint64_t)v17, (uint64_t)&v16, 1);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  if (v11)
    objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x24BDD1540], v12, (uint64_t)CFSTR("USDKitErrorDomain"), 1001, v13);
  else
    objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x24BDD1540], v12, (uint64_t)CFSTR("USDKitErrorDomain"), a1, v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();

  return v14;
}

void sub_2263DB87C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_2263DB8A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v5;
  const char *v6;
  uint64_t v7;
  id v8;

  sub_2263DB774(4, a3, a3, a4);
  v8 = (id)objc_claimAutoreleasedReturnValue();
  v5 = *(id *)(a1 + 8);
  objc_sync_enter(v5);
  objc_msgSend_addObject_(*(void **)(a1 + 8), v6, (uint64_t)v8, v7);
  objc_sync_exit(v5);

}

void sub_2263DB908(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  objc_sync_exit(v10);

  _Unwind_Resume(a1);
}

void sub_2263DBAB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  void *v17;
  uint64_t v18;

  *(_QWORD *)(v18 - 56) = &a17;
  sub_2263E41FC((void ***)(v18 - 56));
  MEMORY[0x227697438](v18 - 80);

  _Unwind_Resume(a1);
}

void sub_2263DBCF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void **a33)
{
  void *v33;
  uint64_t v34;
  unsigned int *v36;
  unsigned int v37;

  if ((a17 & 7) != 0)
  {
    v36 = (unsigned int *)(a17 & 0xFFFFFFFFFFFFFFF8);
    do
      v37 = __ldxr(v36);
    while (__stlxr(v37 - 2, v36));
  }
  a33 = (void **)(v34 - 104);
  sub_2263E41FC(&a33);
  MEMORY[0x227697438](v34 - 72);

  _Unwind_Resume(a1);
}

uint64_t sub_2263DBD78(pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *a1)
{
  unsigned int *v2;
  unsigned int v3;
  uint64_t v4;

  if (*((_BYTE *)a1 + 132))
  {
    pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::GetOpName(a1);
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper();
    if ((v4 & 7) != 0)
    {
      v2 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
      do
        v3 = __ldxr(v2);
      while (__stlxr(v3 - 2, v2));
    }
    return 0;
  }
  else
  {
    sub_2263E426C((uint64_t)a1);
    return pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::GfMatrix4d>();
  }
}

void sub_2263DBFD4(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  MEMORY[0x227697414](v2 - 120);
  sub_2263D701C(v2 - 96);

  _Unwind_Resume(a1);
}

void sub_2263DC228(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, char a19)
{
  if (a2)
    sub_2263AACCC(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_2263DC3F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  va_list va;

  va_start(va, a3);
  sub_2263D701C((uint64_t)va);

  _Unwind_Resume(a1);
}

void sub_2263DC4C4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2263DC6A8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_2263DC6FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;

  if (*(_DWORD *)a1 == 3)
    return sub_2263DAB24(a2, 3, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16), (uint64_t *)(a1 + 24));
  *(_DWORD *)a2 = 3;
  *(_QWORD *)(a2 + 8) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  result = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  *(_QWORD *)(a2 + 24) = 0;
  return result;
}

uint64_t sub_2263DC76C(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 24);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_2263BDE64(a1 + 16);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    sub_2263DA640(v5);
  return a1;
}

uint64_t sub_2263DC7CC(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 24);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_2263BDE64(a1 + 16);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    sub_2263DA640(v5);
  return a1;
}

void sub_2263DCBA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  sub_2263DC7CC((uint64_t)va);
  if ((a3 & 7) != 0)
  {
    v5 = (unsigned int *)(a3 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  MEMORY[0x22769739C](va1);

  _Unwind_Resume(a1);
}

uint64_t sub_2263DCC2C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int *v38;
  unsigned int v39;
  _BYTE v41[8];
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  _BYTE v47[48];
  __int128 v48;

  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)a2 = *(_DWORD *)a1;
  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 8) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 48);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  sub_2263BDDD8((_DWORD *)(a2 + 16), (_DWORD *)(a1 + 16));
  sub_2263BDE28((_DWORD *)(a2 + 20), (_DWORD *)(a1 + 20));
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v7;
  v8 = (_QWORD *)(a2 + 24);
  if ((v7 & 7) != 0)
  {
    v9 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 2, v9));
    if ((v10 & 1) == 0)
      *v8 &= 0xFFFFFFFFFFFFFFF8;
  }
  v48 = 0u;
  *(_DWORD *)v47 = 1;
  *(_QWORD *)&v47[8] = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  memset(&v47[24], 0, 24);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v47[32], (const UsdPrim *)v47);
  *((_QWORD *)&v48 + 1) = 0;
  *(_QWORD *)&v47[32] = MEMORY[0x24BEE9DC0] + 16;
  if ((v47[24] & 7) != 0)
  {
    v11 = (unsigned int *)(*(_QWORD *)&v47[24] & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stlxr(v12 - 2, v11));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_2263BDE64((uint64_t)&v47[16]);
  if (*(_QWORD *)&v47[8])
    sub_2263DA640(*(uint64_t *)&v47[8]);
  v46 = 0;
  v45 = 0;
  while (pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetConnectedSource())
  {
    if (v45 == 2)
    {
      pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetOutput((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)&v47[32], (const pxrInternal__aapl__pxrReserved__::TfToken *)&v46);
      sub_2263DD1C0((uint64_t)v41, (uint64_t)v47);
      *(_DWORD *)a2 = *(_DWORD *)v47;
      v20 = *(_QWORD *)&v47[8];
      *(_QWORD *)&v47[8] = 0;
      v21 = *(_QWORD *)(a2 + 8);
      *(_QWORD *)(a2 + 8) = v20;
      if (v21)
        sub_2263DA640(v21);
      sub_2263BE05C(a2 + 16, (int *)&v47[16]);
      sub_2263BE0B0(a2 + 20);
      if (v47 == (_BYTE *)a2)
      {
        v24 = *(_QWORD *)&v47[24];
      }
      else
      {
        if ((*v8 & 7) != 0)
        {
          v22 = (unsigned int *)(*v8 & 0xFFFFFFFFFFFFFFF8);
          do
            v23 = __ldxr(v22);
          while (__stlxr(v23 - 2, v22));
        }
        v24 = 0;
        *v8 = *(_QWORD *)&v47[24];
        *(_QWORD *)&v47[24] = 0;
      }
      if ((v24 & 7) != 0)
      {
        v30 = (unsigned int *)(v24 & 0xFFFFFFFFFFFFFFF8);
        do
          v31 = __ldxr(v30);
        while (__stlxr(v31 - 2, v30));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      sub_2263BDE64((uint64_t)&v47[16]);
      if (*(_QWORD *)&v47[8])
        sub_2263DA640(*(uint64_t *)&v47[8]);
      if ((v44 & 7) != 0)
      {
        v32 = (unsigned int *)(v44 & 0xFFFFFFFFFFFFFFF8);
        do
          v33 = __ldxr(v32);
        while (__stlxr(v33 - 2, v32));
      }
    }
    else
    {
      if (v45 == 1)
      {
        pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetInput((pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *)&v47[32], (const pxrInternal__aapl__pxrReserved__::TfToken *)&v46);
        *(_DWORD *)a2 = *(_DWORD *)v47;
        v13 = *(_QWORD *)&v47[8];
        if (*(_QWORD *)&v47[8])
        {
          v14 = (unint64_t *)(*(_QWORD *)&v47[8] + 48);
          do
            v15 = __ldxr(v14);
          while (__stxr(v15 + 1, v14));
        }
        v16 = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a2 + 8) = v13;
        if (v16)
          sub_2263DA640(v16);
        sub_2263C0080(a2 + 16, &v47[16]);
        sub_2263C00D4(a2 + 20, &v47[20]);
        sub_2263BE4E4((_QWORD *)(a2 + 24), &v47[24]);
        if ((v47[24] & 7) != 0)
        {
          v17 = (unsigned int *)(*(_QWORD *)&v47[24] & 0xFFFFFFFFFFFFFFF8);
          do
            v18 = __ldxr(v17);
          while (__stlxr(v18 - 2, v17));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        sub_2263BDE64((uint64_t)&v47[16]);
        v19 = *(_QWORD *)&v47[8];
        if (!*(_QWORD *)&v47[8])
          goto LABEL_63;
LABEL_62:
        sub_2263DA640(v19);
        goto LABEL_63;
      }
      sub_2263E3F28((uint64_t)v41, (uint64_t *)&v47[40], &v48);
      pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)v41, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v46);
      *(_DWORD *)a2 = *(_DWORD *)v47;
      v25 = *(_QWORD *)&v47[8];
      *(_QWORD *)&v47[8] = 0;
      v26 = *(_QWORD *)(a2 + 8);
      *(_QWORD *)(a2 + 8) = v25;
      if (v26)
        sub_2263DA640(v26);
      sub_2263BE05C(a2 + 16, (int *)&v47[16]);
      sub_2263BE0B0(a2 + 20);
      if (v47 == (_BYTE *)a2)
      {
        v29 = *(_QWORD *)&v47[24];
      }
      else
      {
        if ((*v8 & 7) != 0)
        {
          v27 = (unsigned int *)(*v8 & 0xFFFFFFFFFFFFFFF8);
          do
            v28 = __ldxr(v27);
          while (__stlxr(v28 - 2, v27));
        }
        v29 = 0;
        *v8 = *(_QWORD *)&v47[24];
        *(_QWORD *)&v47[24] = 0;
      }
      if ((v29 & 7) != 0)
      {
        v34 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFFFF8);
        do
          v35 = __ldxr(v34);
        while (__stlxr(v35 - 2, v34));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      sub_2263BDE64((uint64_t)&v47[16]);
      if (*(_QWORD *)&v47[8])
        sub_2263DA640(*(uint64_t *)&v47[8]);
      if ((v44 & 7) != 0)
      {
        v36 = (unsigned int *)(v44 & 0xFFFFFFFFFFFFFFF8);
        do
          v37 = __ldxr(v36);
        while (__stlxr(v37 - 2, v36));
      }
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    sub_2263BDE64((uint64_t)&v43);
    v19 = v42;
    if (v42)
      goto LABEL_62;
LABEL_63:
    if ((sub_2263DA5B4((pxrInternal__aapl__pxrReserved__::UsdObject *)a2) & 1) == 0)
      break;
  }
  if ((v46 & 7) != 0)
  {
    v38 = (unsigned int *)(v46 & 0xFFFFFFFFFFFFFFF8);
    do
      v39 = __ldxr(v38);
    while (__stlxr(v39 - 2, v38));
  }
  return MEMORY[0x227697558](&v47[32]);
}

void sub_2263DD0D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  sub_2263D701C((uint64_t)va);
  sub_2263DC7CC(v9);
  _Unwind_Resume(a1);
}

uint64_t sub_2263DD160(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 24);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_2263BDE64(a1 + 16);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    sub_2263DA640(v5);
  return a1;
}

_DWORD *sub_2263DD1C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _DWORD *result;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;

  *(_DWORD *)a2 = *(_DWORD *)a1;
  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 8) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 48);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  sub_2263BDDD8((_DWORD *)(a2 + 16), (_DWORD *)(a1 + 16));
  result = sub_2263BDE28((_DWORD *)(a2 + 20), (_DWORD *)(a1 + 20));
  v8 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v8;
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 2, v9));
    if ((v10 & 1) == 0)
      *(_QWORD *)(a2 + 24) &= 0xFFFFFFFFFFFFFFF8;
  }
  return result;
}

uint64_t sub_2263DD254@<X0>(UsdPrim *a1@<X0>, pxrInternal__aapl__pxrReserved__::UsdShadeShader *a2@<X8>)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  char v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  _BYTE v19[48];
  __int128 v20;
  UsdPrim v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v22 = 0;
  v23 = 0;
  v24 = 0;
  v3 = pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v22, a1);
  v22 = MEMORY[0x24BEE9D88] + 16;
  if (v23
    && (*(_BYTE *)(v23 + 57) & 8) == 0
    && (*(unsigned int (**)(uint64_t))(MEMORY[0x24BEE9D88] + 48))(v3))
  {
    memset(&v21, 0, 32);
    pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::GetSurfaceAttr((pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *)&v22);
    MEMORY[0x227697384](&v21, &v19[32]);
    if ((BYTE8(v20) & 7) != 0)
    {
      v4 = (unsigned int *)(*((_QWORD *)&v20 + 1) & 0xFFFFFFFFFFFFFFF8);
      do
        v5 = __ldxr(v4);
      while (__stlxr(v5 - 2, v4));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    sub_2263BDE64((uint64_t)&v20);
    if (*(_QWORD *)&v19[40])
      sub_2263DA640(*(uint64_t *)&v19[40]);
    if (pxrInternal__aapl__pxrReserved__::UsdShadeOutput::IsOutput())
    {
      *(_OWORD *)&v19[32] = 0u;
      v20 = 0u;
      *(_DWORD *)v19 = 1;
      *(_QWORD *)&v19[8] = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
      *(_QWORD *)&v19[24] = 0;
      pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v19[32], (const UsdPrim *)v19);
      *((_QWORD *)&v20 + 1) = 0;
      *(_QWORD *)&v19[32] = MEMORY[0x24BEE9DC0] + 16;
      if ((v19[24] & 7) != 0)
      {
        v6 = (unsigned int *)(*(_QWORD *)&v19[24] & 0xFFFFFFFFFFFFFFF8);
        do
          v7 = __ldxr(v6);
        while (__stlxr(v7 - 2, v6));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      sub_2263BDE64((uint64_t)&v19[16]);
      if (*(_QWORD *)&v19[8])
        sub_2263DA640(*(uint64_t *)&v19[8]);
      pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetConnectedSource();
      if (*(_QWORD *)&v19[40]
        && (*(_BYTE *)(*(_QWORD *)&v19[40] + 57) & 8) == 0
        && (*(unsigned int (**)(_BYTE *))(*(_QWORD *)&v19[32] + 32))(&v19[32]))
      {
        *(_QWORD *)a2 = 0;
        *((_QWORD *)a2 + 1) = 0;
        *((_QWORD *)a2 + 2) = 0;
        pxrInternal__aapl__pxrReserved__::UsdShadeShader::UsdShadeShader();
        v8 = *((_QWORD *)a2 + 1);
        if (v8
          && (*(_BYTE *)(v8 + 57) & 8) == 0
          && (*(unsigned int (**)(pxrInternal__aapl__pxrReserved__::UsdShadeShader *))(*(_QWORD *)a2 + 32))(a2))
        {
          memset(v19, 0, 32);
          pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetIdAttr(a2);
          v9 = pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::TfToken>();
          if ((v19[24] & 7) != 0)
          {
            v10 = (unsigned int *)(*(_QWORD *)&v19[24] & 0xFFFFFFFFFFFFFFF8);
            do
              v11 = __ldxr(v10);
            while (__stlxr(v11 - 2, v10));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
          sub_2263BDE64((uint64_t)&v19[16]);
          if (*(_QWORD *)&v19[8])
            sub_2263DA640(*(uint64_t *)&v19[8]);
          if ((v9 & 1) != 0)
          {
            MEMORY[0x227697558](&v19[32]);
            if (((uint64_t)v21._proxyPrimPath._propPart._poolHandle & 7) != 0)
            {
              v12 = (unsigned int *)((unint64_t)v21._proxyPrimPath._propPart._poolHandle & 0xFFFFFFFFFFFFFFF8);
              do
                v13 = __ldxr(v12);
              while (__stlxr(v13 - 2, v12));
            }
            goto LABEL_41;
          }
        }
        MEMORY[0x22769739C](a2);
      }
      MEMORY[0x227697558](&v19[32]);
    }
    if (((uint64_t)v21._proxyPrimPath._propPart._poolHandle & 7) != 0)
    {
      v14 = (unsigned int *)((unint64_t)v21._proxyPrimPath._propPart._poolHandle & 0xFFFFFFFFFFFFFFF8);
      do
        v15 = __ldxr(v14);
      while (__stlxr(v15 - 2, v14));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    sub_2263BDE64((uint64_t)&v21._proxyPrimPath);
    if (v21._prim._p.px)
      sub_2263DA640((uint64_t)v21._prim._p.px);
  }
  v21._type = 1;
  v21._prim._p.px = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  v21._proxyPrimPath._propPart._poolHandle = 0;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, &v21);
  *(_QWORD *)a2 = MEMORY[0x24BEE9D38] + 16;
  if (((uint64_t)v21._proxyPrimPath._propPart._poolHandle & 7) != 0)
  {
    v16 = (unsigned int *)((unint64_t)v21._proxyPrimPath._propPart._poolHandle & 0xFFFFFFFFFFFFFFF8);
    do
      v17 = __ldxr(v16);
    while (__stlxr(v17 - 2, v16));
  }
LABEL_41:
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_2263BDE64((uint64_t)&v21._proxyPrimPath);
  if (v21._prim._p.px)
    sub_2263DA640((uint64_t)v21._prim._p.px);
  return MEMORY[0x227697444](&v22);
}

void sub_2263DD638(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  va_list va;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va1;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  va_list va2;

  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  v12 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v17 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  v20 = va_arg(va2, _QWORD);
  v21 = va_arg(va2, _QWORD);
  sub_2263DC7CC((uint64_t)va);
  if ((a3 & 7) != 0)
  {
    v8 = (unsigned int *)(a3 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stlxr(v9 - 2, v8));
  }
  MEMORY[0x22769739C](v5);
  if ((a5 & 7) != 0)
  {
    v10 = (unsigned int *)(a5 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stlxr(v11 - 2, v10));
  }
  MEMORY[0x227697558]((uint64_t *)va1);
  sub_2263DC76C((uint64_t)va2);
  MEMORY[0x227697444](v6 - 56);
  _Unwind_Resume(a1);
}

uint64_t sub_2263DD718@<X0>(pxrInternal__aapl__pxrReserved__::UsdObject *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  unsigned int *v4;
  unsigned int v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *a2 = 0;
  MEMORY[0x2276976D8](a2, "unknown");
  result = sub_2263DA5B4(a1);
  if ((_DWORD)result)
  {
    v8 = 0;
    v9 = 0;
    v10 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v8, (const UsdPrim *)a1);
    v8 = MEMORY[0x24BEE9D38] + 16;
    if (v9
      && (*(_BYTE *)(v9 + 57) & 8) == 0
      && (*(unsigned int (**)(uint64_t *))(MEMORY[0x24BEE9D38] + 48))(&v8))
    {
      v6 = 0u;
      v7 = 0u;
      pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetIdAttr((pxrInternal__aapl__pxrReserved__::UsdShadeShader *)&v8);
      if (sub_2263DA5B4((pxrInternal__aapl__pxrReserved__::UsdObject *)&v6))
        pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::TfToken>();
      if ((BYTE8(v7) & 7) != 0)
      {
        v4 = (unsigned int *)(*((_QWORD *)&v7 + 1) & 0xFFFFFFFFFFFFFFF8);
        do
          v5 = __ldxr(v4);
        while (__stlxr(v5 - 2, v4));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      sub_2263BDE64((uint64_t)&v7);
      if (*((_QWORD *)&v6 + 1))
        sub_2263DA640(*((uint64_t *)&v6 + 1));
    }
    return MEMORY[0x22769739C](&v8);
  }
  return result;
}

void sub_2263DD824(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  _QWORD *v6;
  unsigned int *v8;
  unsigned int v9;
  va_list va;

  va_start(va, a6);
  MEMORY[0x22769739C](va);
  if ((*v6 & 7) != 0)
  {
    v8 = (unsigned int *)(*v6 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stlxr(v9 - 2, v8));
  }
  _Unwind_Resume(a1);
}

id sub_2263DD878(uint64_t a1, unsigned __int8 **a2)
{
  int v4;
  _DWORD *v5;
  unsigned __int8 *v6;
  unsigned int v7;
  BOOL v8;
  int v9;
  int v11;
  BOOL v12;
  USKData *v15;
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase *v16;
  const pxrInternal__aapl__pxrReserved__::TfType *v17;
  const char *v18;
  void *v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int v23;
  int *v24;
  unint64_t *v25;
  int *v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  unint64_t v33;
  const char *v34;
  unint64_t v35;
  const char *v36;
  unsigned __int8 *v37;
  int v38;
  unsigned int *v39;
  unsigned int v40;
  int v41;
  USKData *v42;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v43;
  const char *v44;
  unsigned int *v45;
  unsigned int v46;
  USKData *v47;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v48;
  const char *v49;
  unsigned int *v50;
  unsigned int v51;
  USKData *v52;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v53;
  const char *v54;
  unsigned int *v55;
  unsigned int v56;
  USKData *v57;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v58;
  const char *v59;
  unsigned int *v60;
  unsigned int v61;
  USKData *v63;
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase *Instance;
  const pxrInternal__aapl__pxrReserved__::TfType *Type;
  const char *v66;
  unsigned int *v67;
  unsigned int v68;
  unsigned int *v69;
  unsigned int v70;
  USKData *v72;
  _DWORD *v73;
  unsigned int *v74;
  unsigned int v75;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v76;
  const char *v77;
  unsigned int *v78;
  unsigned int v79;
  _QWORD v80[4];
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t TypeName;
  _QWORD v90[2];
  _QWORD v91[2];
  _QWORD v92[2];
  int v93;
  void *v94;
  int v95;
  void *v96;
  int v97;
  void *v98;
  int v99;
  void *v100;
  _QWORD v101[3];

  v101[2] = *MEMORY[0x24BDAC8D0];
  v101[0] = 0;
  v101[1] = 0;
  pxrInternal__aapl__pxrReserved__::UsdAttribute::Get();
  v4 = *((unsigned __int8 *)a2 + 23);
  if (*((char *)a2 + 23) < 0)
  {
    v6 = a2[1];
    if (v6 != (unsigned __int8 *)1)
      goto LABEL_35;
    v7 = **a2 - 98;
    v8 = v7 > 0x10;
    v9 = (1 << v7) & 0x10021;
    if (!v8 && v9 != 0)
      goto LABEL_48;
    v6 = a2[1];
    if (v6 != (unsigned __int8 *)1)
      goto LABEL_35;
    if (**a2 == 97)
      goto LABEL_48;
    if ((v4 & 0x80) != 0)
    {
LABEL_35:
      if (v6 == (unsigned __int8 *)3)
      {
        if (*(_WORD *)*a2 == 26482 && (*a2)[2] == 98)
          goto LABEL_48;
        v6 = a2[1];
      }
      if (v6 == (unsigned __int8 *)4)
      {
        v5 = *a2;
        goto LABEL_37;
      }
    }
  }
  else
  {
    if (v4 == 1)
    {
      v11 = *(unsigned __int8 *)a2;
      v12 = (v11 - 98) > 0x10 || ((1 << (v11 - 98)) & 0x10021) == 0;
      if (v12 && v11 != 97)
        goto LABEL_38;
      goto LABEL_48;
    }
    if (v4 == 3)
    {
      if (*(_WORD *)a2 != 26482 || *((_BYTE *)a2 + 2) != 98)
        goto LABEL_38;
      goto LABEL_48;
    }
    v5 = a2;
    if (v4 == 4)
    {
LABEL_37:
      if (*v5 != 1633838962)
        goto LABEL_38;
LABEL_48:
      v80[0] = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName((pxrInternal__aapl__pxrReserved__::UsdAttribute *)a1);
      v25 = (unint64_t *)MEMORY[0x24BEE82A0];
      if (!atomic_load(MEMORY[0x24BEE82A0]))
        sub_2263B1434(MEMORY[0x24BEE82A0]);
      if ((pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==() & 1) == 0)
      {
        TypeName = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName((pxrInternal__aapl__pxrReserved__::UsdAttribute *)a1);
        pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&TypeName);
        v35 = v80[0] & 0xFFFFFFFFFFFFFFF8;
        if ((v80[0] & 0xFFFFFFFFFFFFFFF8) != 0)
        {
          v36 = (const char *)(v35 + 16);
          if (*(char *)(v35 + 39) < 0)
            v36 = *(const char **)v36;
        }
        else
        {
          v36 = "";
        }
        if (*((char *)a2 + 23) < 0)
          a2 = (unsigned __int8 **)*a2;
        NSLog(CFSTR("Warning: Incorrect fallback attribute type %s with output %s "), v36, a2);
        if ((v80[0] & 7) != 0)
        {
          v39 = (unsigned int *)(v80[0] & 0xFFFFFFFFFFFFFFF8);
          do
            v40 = __ldxr(v39);
          while (__stlxr(v40 - 2, v39));
        }
        goto LABEL_76;
      }
      v27 = (int *)sub_2263BF454((pxrInternal__aapl__pxrReserved__::VtValue *)v101);
      v28 = *v27;
      v29 = v27[1];
      v30 = v27[2];
      v31 = v27[3];
      v32 = *((unsigned __int8 *)a2 + 23);
      if ((*((char *)a2 + 23) & 0x80000000) == 0)
      {
        if (v32 != 1)
        {
          if (v32 != 3)
            goto LABEL_115;
LABEL_111:
          if (*(_WORD *)a2 == 26482 && *((_BYTE *)a2 + 2) == 98)
          {
            v72 = [USKData alloc];
            v92[1] = (char *)&off_24EDD7778 + 2;
            v73 = (_DWORD *)operator new();
            *v73 = v28;
            v73[1] = v29;
            v73[2] = v30;
            v74 = v73 + 3;
            atomic_store(0, v73 + 3);
            v92[0] = v73;
            do
              v75 = __ldxr(v74);
            while (__stxr(v75 + 1, v74));
            v76 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v25);
            if (!v76)
              v76 = sub_2263B1434(MEMORY[0x24BEE82A0]);
            pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v76 + 160));
            v19 = (void *)objc_msgSend_initWithVtValue_typeName_(v72, v77, (uint64_t)v92, (uint64_t)&v84);
            if ((v84 & 7) != 0)
            {
              v78 = (unsigned int *)(v84 & 0xFFFFFFFFFFFFFFF8);
              do
                v79 = __ldxr(v78);
              while (__stlxr(v79 - 2, v78));
            }
            v24 = (int *)v92;
            goto LABEL_124;
          }
          goto LABEL_115;
        }
        v41 = *(unsigned __int8 *)a2;
        if (v41 != 98)
        {
          if (v41 != 103)
          {
            if (v41 == 114)
              goto LABEL_80;
            if (v41 != 97)
              goto LABEL_115;
LABEL_102:
            v57 = [USKData alloc];
            v94 = &unk_24EDD760B;
            v93 = v31;
            v58 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v25);
            if (!v58)
              v58 = sub_2263B1434(MEMORY[0x24BEE82A0]);
            pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v58 + 56));
            v19 = (void *)objc_msgSend_initWithVtValue_typeName_(v57, v59, (uint64_t)&v93, (uint64_t)&v85);
            if ((v85 & 7) != 0)
            {
              v60 = (unsigned int *)(v85 & 0xFFFFFFFFFFFFFFF8);
              do
                v61 = __ldxr(v60);
              while (__stlxr(v61 - 2, v60));
            }
            v24 = &v93;
            goto LABEL_124;
          }
LABEL_92:
          v52 = [USKData alloc];
          v98 = &unk_24EDD760B;
          v97 = v29;
          v53 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v25);
          if (!v53)
            v53 = sub_2263B1434(MEMORY[0x24BEE82A0]);
          pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v53 + 56));
          v19 = (void *)objc_msgSend_initWithVtValue_typeName_(v52, v54, (uint64_t)&v97, (uint64_t)&v87);
          if ((v87 & 7) != 0)
          {
            v55 = (unsigned int *)(v87 & 0xFFFFFFFFFFFFFFF8);
            do
              v56 = __ldxr(v55);
            while (__stlxr(v56 - 2, v55));
          }
          v24 = &v97;
          goto LABEL_124;
        }
LABEL_86:
        v47 = [USKData alloc];
        v96 = &unk_24EDD760B;
        v95 = v30;
        v48 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v25);
        if (!v48)
          v48 = sub_2263B1434(MEMORY[0x24BEE82A0]);
        pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v48 + 56));
        v19 = (void *)objc_msgSend_initWithVtValue_typeName_(v47, v49, (uint64_t)&v95, (uint64_t)&v86);
        if ((v86 & 7) != 0)
        {
          v50 = (unsigned int *)(v86 & 0xFFFFFFFFFFFFFFF8);
          do
            v51 = __ldxr(v50);
          while (__stlxr(v51 - 2, v50));
        }
        v24 = &v95;
        goto LABEL_124;
      }
      v37 = a2[1];
      if (v37 != (unsigned __int8 *)1)
        goto LABEL_109;
      v38 = **a2;
      switch(v38)
      {
        case 'b':
          goto LABEL_86;
        case 'g':
          goto LABEL_92;
        case 'r':
LABEL_80:
          v42 = [USKData alloc];
          v100 = &unk_24EDD760B;
          v99 = v28;
          v43 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(v25);
          if (!v43)
            v43 = sub_2263B1434(MEMORY[0x24BEE82A0]);
          pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v43 + 56));
          v19 = (void *)objc_msgSend_initWithVtValue_typeName_(v42, v44, (uint64_t)&v99, (uint64_t)&v88);
          if ((v88 & 7) != 0)
          {
            v45 = (unsigned int *)(v88 & 0xFFFFFFFFFFFFFFF8);
            do
              v46 = __ldxr(v45);
            while (__stlxr(v46 - 2, v45));
          }
          v24 = &v99;
          goto LABEL_124;
      }
      v37 = a2[1];
      if (v37 != (unsigned __int8 *)1)
        goto LABEL_109;
      if (**a2 == 97)
        goto LABEL_102;
      if ((v32 & 0x80) != 0)
      {
LABEL_109:
        if (v37 == (unsigned __int8 *)3)
        {
          a2 = (unsigned __int8 **)*a2;
          goto LABEL_111;
        }
      }
LABEL_115:
      v63 = [USKData alloc];
      sub_2263B0700(v91, v101);
      Instance = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)atomic_load((unint64_t *)off_24EDD5B58);
      if (!Instance)
        Instance = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance();
      TypeName = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName((pxrInternal__aapl__pxrReserved__::UsdAttribute *)a1);
      Type = (const pxrInternal__aapl__pxrReserved__::TfType *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetType((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&TypeName);
      v82 = 0;
      v80[0] = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FindType(Instance, Type, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v82);
      pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)v80);
      v19 = (void *)objc_msgSend_initWithVtValue_typeName_(v63, v66, (uint64_t)v91, (uint64_t)&v83);
      if ((v83 & 7) != 0)
      {
        v67 = (unsigned int *)(v83 & 0xFFFFFFFFFFFFFFF8);
        do
          v68 = __ldxr(v67);
        while (__stlxr(v68 - 2, v67));
      }
      if ((v82 & 7) != 0)
      {
        v69 = (unsigned int *)(v82 & 0xFFFFFFFFFFFFFFF8);
        do
          v70 = __ldxr(v69);
        while (__stlxr(v70 - 2, v69));
      }
      v24 = (int *)v91;
      goto LABEL_124;
    }
  }
LABEL_38:
  if (sub_2263DE2E4(a2, "result"))
  {
    v15 = [USKData alloc];
    sub_2263B0700(v90, v101);
    v16 = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)atomic_load((unint64_t *)off_24EDD5B58);
    if (!v16)
      v16 = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance();
    TypeName = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName((pxrInternal__aapl__pxrReserved__::UsdAttribute *)a1);
    v17 = (const pxrInternal__aapl__pxrReserved__::TfType *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetType((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&TypeName);
    v82 = 0;
    v80[0] = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FindType(v16, v17, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v82);
    pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)v80);
    v19 = (void *)objc_msgSend_initWithVtValue_typeName_(v15, v18, (uint64_t)v90, (uint64_t)&v81);
    if ((v81 & 7) != 0)
    {
      v20 = (unsigned int *)(v81 & 0xFFFFFFFFFFFFFFF8);
      do
        v21 = __ldxr(v20);
      while (__stlxr(v21 - 2, v20));
    }
    if ((v82 & 7) != 0)
    {
      v22 = (unsigned int *)(v82 & 0xFFFFFFFFFFFFFFF8);
      do
        v23 = __ldxr(v22);
      while (__stlxr(v23 - 2, v22));
    }
    v24 = (int *)v90;
LABEL_124:
    sub_2263AD568((uint64_t)v24);
    goto LABEL_125;
  }
  if (*((char *)a2 + 23) < 0)
    a2 = (unsigned __int8 **)*a2;
  sub_2263E3F28((uint64_t)v80, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
  v33 = *(_QWORD *)sub_2263DE374(v80) & 0xFFFFFFFFFFFFFFF8;
  if (v33)
  {
    v34 = (const char *)(v33 + 16);
    if (*(char *)(v33 + 39) < 0)
      v34 = *(const char **)v34;
  }
  else
  {
    v34 = "";
  }
  NSLog(CFSTR("Unrecognized output %s for shader %s"), a2, v34);
  sub_2263D701C((uint64_t)v80);
LABEL_76:
  v19 = 0;
LABEL_125:
  sub_2263AD568((uint64_t)v101);
  return v19;
}

void sub_2263DE0BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2263AD568(v1 - 152);
  sub_2263AD568(v1 - 88);
  _Unwind_Resume(a1);
}

BOOL sub_2263DE2E4(_QWORD *a1, char *__s)
{
  size_t v4;

  v4 = strlen(__s);
  if (*((char *)a1 + 23) < 0)
  {
    if (v4 == a1[1])
    {
      if (v4 == -1)
        goto LABEL_10;
      a1 = (_QWORD *)*a1;
      return memcmp(a1, __s, v4) == 0;
    }
  }
  else if (v4 == *((unsigned __int8 *)a1 + 23))
  {
    if (v4 == -1)
LABEL_10:
      sub_2263E4B44();
    return memcmp(a1, __s, v4) == 0;
  }
  return 0;
}

uint64_t sub_2263DE374(_DWORD *a1)
{
  pxrInternal__aapl__pxrReserved__::SdfPath *v1;

  if (*a1 != 1)
    return (uint64_t)(a1 + 6);
  v1 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_2263E4044((uint64_t)a1);
  return pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(v1);
}

void sub_2263DEB04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,char a41)
{
  void *v41;
  void *v42;
  uint64_t v43;
  void ***v45;

  if (a31 < 0)
    operator delete(__p);

  sub_2263DC7CC((uint64_t)&a33);
  MEMORY[0x22769739C](&a38);
  sub_2263DC7CC(v43 - 208);
  v45 = (void ***)sub_2263DD160(v43 - 144);
  *(_QWORD *)(v43 - 144) = v43 - 168;
  sub_2263E42FC(v45);
  MEMORY[0x22769739C](v43 - 112);

  _Unwind_Resume(a1);
}

void sub_2263DF250(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11)
{
  uint64_t v11;

  MEMORY[0x22769739C](v11 - 112);

  _Unwind_Resume(a1);
}

void sub_2263DF3C0()
{
  JUMPOUT(0x2263DF38CLL);
}

void sub_2263DF844(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  uint64_t v11;

  MEMORY[0x22769739C](v11 - 112);

  _Unwind_Resume(a1);
}

void sub_2263E0600(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52,uint64_t a53,uint64_t a54,uint64_t a55,char a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a64;
  void *v64;
  void *v65;
  uint64_t v66;
  unsigned int *v68;
  unsigned int v69;
  void ***v70;

  if (a36 < 0)
    operator delete(__p);
  sub_2263AD568(v66 - 120);
  sub_2263DC7CC((uint64_t)&a38);
  sub_2263DD160((uint64_t)&a42);
  if ((a47 & 7) != 0)
  {
    v68 = (unsigned int *)(a47 & 0xFFFFFFFFFFFFFFF8);
    do
      v69 = __ldxr(v68);
    while (__stlxr(v69 - 2, v68));
  }
  sub_2263D701C((uint64_t)&a48);
  sub_2263D701C((uint64_t)&a52);
  sub_2263DC7CC((uint64_t)&a56);
  sub_2263DC7CC((uint64_t)&a60);
  sub_2263D701C((uint64_t)&a64);
  sub_2263DC7CC(v66 - 240);
  v70 = (void ***)sub_2263DD160(v66 - 176);
  *(_QWORD *)(v66 - 176) = v66 - 200;
  sub_2263E42FC(v70);

  MEMORY[0x22769739C](v66 - 144);
  _Unwind_Resume(a1);
}

uint64_t sub_2263E089C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 48);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  if (v7)
    sub_2263DA640(v7);
  sub_2263C0080(a1 + 16, (_DWORD *)(a2 + 16));
  sub_2263C00D4(a1 + 20, (_DWORD *)(a2 + 20));
  sub_2263BE4E4((_QWORD *)(a1 + 24), (_QWORD *)(a2 + 24));
  return a1;
}

uint64_t sub_2263E0918(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 12)
    return 1;
  if ((v1 & 4) != 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_24EDD71A8);
  else
    return 0;
}

uint64_t sub_2263E0950(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;

  if ((sub_2263E0918(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  v2 = *((_QWORD *)a1 + 1);
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    return sub_2263C2E40((uint64_t *)a1);
}

std::type_info *sub_2263E09B8(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  std::type_info *v1;
  const pxrInternal__aapl__pxrReserved__::VtValue *v2;
  _QWORD v4[3];

  v1 = (std::type_info *)a1;
  v4[2] = *MEMORY[0x24BDAC8D0];
  if ((sub_2263E0918(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast((pxrInternal__aapl__pxrReserved__::VtValue *)&stru_24EDD71A8, v1, v2);
    v1 = (std::type_info *)sub_2263AD3FC(v1, v4);
    sub_2263AD568((uint64_t)v4);
  }
  return v1;
}

void sub_2263E1354(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,char a28,uint64_t a29,char a30,uint64_t a31,char a32,uint64_t a33,char a34,uint64_t a35,char a36)
{
  void *v36;
  void *v37;
  unsigned int *v38;
  unsigned int v39;

  if ((a11 & 7) != 0)
  {
    v38 = (unsigned int *)(a11 & 0xFFFFFFFFFFFFFFF8);
    do
      v39 = __ldxr(v38);
    while (__stlxr(v39 - 2, v38));
  }
  sub_2263AD568((uint64_t)&a26);

  _Unwind_Resume(a1);
}

void sub_2263E1A2C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2263E1C88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_2263E1D14(uint64_t *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  const char *v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  void *v23;
  BOOL v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  const char *v29;
  uint64_t v30;
  void *v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  void *v40;
  const char *v41;
  uint64_t v42;
  void *v43;
  BOOL v44;
  const char *v45;
  uint64_t v46;
  void *v47;
  const char *v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  unsigned int *v52;
  unsigned int v53;
  void *v54;
  BOOL v55;
  const char *v56;
  uint64_t v57;
  void *v58;
  const char *v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  int v63;
  void *v64;
  BOOL v65;
  const char *v66;
  uint64_t v67;
  void *v68;
  const char *v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  unsigned int *v73;
  unsigned int v74;
  uint64_t v75;
  id v76;
  const char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  const char *v81;
  uint64_t v82;
  const char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  const char *v87;
  uint64_t v88;
  id v89;
  const char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unsigned int *v94;
  unsigned int v95;
  unint64_t *v96;
  unint64_t v97;
  unsigned int *v98;
  unsigned int v99;
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase *Instance;
  uint64_t Type;
  uint64_t *v102;
  unsigned int *v103;
  unsigned int v104;
  unint64_t v105;
  uint64_t v106;
  unsigned int *v107;
  unsigned int v108;
  unsigned int *v109;
  unsigned int v110;
  unsigned int *v111;
  unsigned int v112;
  unsigned int *v113;
  unsigned int v114;
  unsigned int *v115;
  unsigned int v116;
  uint64_t v117;
  uint64_t v118;
  __int128 v119;
  __int128 v120;
  uint64_t v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  int v129;
  uint64_t v130[2];
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;

  v133 = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  v6 = a3;
  objc_msgSend_property_(v5, v7, (uint64_t)v6, v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v131 = 0;
  v132 = 0;
  objc_msgSend_data(v9, v10, v11, v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v17 = v13;
  if (v13)
  {
    objc_msgSend_value(v13, v14, v15, v16);
  }
  else
  {
    v131 = 0;
    v132 = 0;
  }

  v121 = 0;
  v119 = 0u;
  v120 = 0u;
  objc_msgSend_stringByAppendingString_(v6, v18, (uint64_t)CFSTR(":indices"), v19);
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_property_(v5, v21, (uint64_t)v20, v22);
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  v24 = v23 == 0;

  if (!v24)
  {
    objc_msgSend_stringByAppendingString_(v6, v25, (uint64_t)CFSTR(":indices"), v27);
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_property_(v5, v29, (uint64_t)v28, v30);
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_data(v31, v32, v33, v34);
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    v39 = v35;
    if (v35)
    {
      objc_msgSend_value(v35, v36, v37, v38);
    }
    else
    {
      v130[0] = 0;
      v130[1] = 0;
    }
    sub_2263E2504(v130, (uint64_t)&v122);
    sub_2263AC71C((uint64_t)&v119);
    v119 = v122;
    v120 = v123;
    v122 = 0u;
    v123 = 0u;
    v121 = v124;
    *(_QWORD *)&v124 = 0;
    sub_2263AC71C((uint64_t)&v122);
    sub_2263AD568((uint64_t)v130);

  }
  objc_msgSend_metadata(v9, v25, v26, v27);
  v40 = (void *)objc_claimAutoreleasedReturnValue();
  v130[0] = 0;
  MEMORY[0x2276976D8](v130, "constant");
  objc_msgSend_objectForKeyedSubscript_(v40, v41, (uint64_t)CFSTR("interpolation"), v42);
  v43 = (void *)objc_claimAutoreleasedReturnValue();
  v44 = v43 == 0;

  if (!v44)
  {
    objc_msgSend_objectForKeyedSubscript_(v40, v45, (uint64_t)CFSTR("interpolation"), v46);
    v47 = (void *)objc_claimAutoreleasedReturnValue();
    v51 = v47;
    if (v47)
      objc_msgSend_value(v47, v48, v49, v50);
    else
      v122 = 0uLL;
    sub_2263E258C((pxrInternal__aapl__pxrReserved__::VtValue *)&v122, &v118);
    if ((v130[0] & 7) != 0)
    {
      v52 = (unsigned int *)(v130[0] & 0xFFFFFFFFFFFFFFF8);
      do
        v53 = __ldxr(v52);
      while (__stlxr(v53 - 2, v52));
    }
    v130[0] = v118;
    v118 = 0;
    sub_2263AD568((uint64_t)&v122);

  }
  objc_msgSend_objectForKeyedSubscript_(v40, v45, (uint64_t)CFSTR("elementSize"), v46);
  v54 = (void *)objc_claimAutoreleasedReturnValue();
  v55 = v54 == 0;

  if (v55)
  {
    v63 = 1;
  }
  else
  {
    objc_msgSend_objectForKeyedSubscript_(v40, v56, (uint64_t)CFSTR("elementSize"), v57);
    v58 = (void *)objc_claimAutoreleasedReturnValue();
    v62 = v58;
    if (v58)
      objc_msgSend_value(v58, v59, v60, v61);
    else
      v122 = 0uLL;
    v63 = sub_2263E260C((pxrInternal__aapl__pxrReserved__::VtValue *)&v122);
    sub_2263AD568((uint64_t)&v122);

  }
  v118 = 0;
  objc_msgSend_objectForKeyedSubscript_(v40, v56, (uint64_t)CFSTR("typeName"), v57);
  v64 = (void *)objc_claimAutoreleasedReturnValue();
  v65 = v64 == 0;

  if (!v65)
  {
    objc_msgSend_objectForKeyedSubscript_(v40, v66, (uint64_t)CFSTR("typeName"), v67);
    v68 = (void *)objc_claimAutoreleasedReturnValue();
    v72 = v68;
    if (v68)
      objc_msgSend_value(v68, v69, v70, v71);
    else
      v122 = 0uLL;
    sub_2263E258C((pxrInternal__aapl__pxrReserved__::VtValue *)&v122, &v117);
    if ((v118 & 7) != 0)
    {
      v73 = (unsigned int *)(v118 & 0xFFFFFFFFFFFFFFF8);
      do
        v74 = __ldxr(v73);
      while (__stlxr(v74 - 2, v73));
    }
    v75 = v117;
    v117 = 0;
    v118 = v75;
    sub_2263AD568((uint64_t)&v122);

  }
  v117 = 0;
  v76 = objc_retainAutorelease(v6);
  v80 = objc_msgSend_UTF8String(v76, v77, v78, v79);
  MEMORY[0x2276976D8](&v117, v80);
  if (objc_msgSend_hasPrefix_(v76, v81, (uint64_t)CFSTR("primvars:"), v82))
  {
    v86 = objc_msgSend_length(CFSTR("primvars:"), v83, v84, v85);
    objc_msgSend_substringFromIndex_(v76, v87, v86, v88);
    v89 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    v93 = objc_msgSend_UTF8String(v89, v90, v91, v92);
    MEMORY[0x2276976D8](&v122, v93);
    if ((v117 & 7) != 0)
    {
      v94 = (unsigned int *)(v117 & 0xFFFFFFFFFFFFFFF8);
      do
        v95 = __ldxr(v94);
      while (__stlxr(v95 - 2, v94));
    }
    v117 = v122;
    *(_QWORD *)&v122 = 0;

  }
  sub_2263B0700(&v122, &v131);
  v123 = v119;
  v124 = v120;
  v125 = v121;
  if (v121)
  {
    v96 = (unint64_t *)(v121 - 16);
    if (*((_QWORD *)&v124 + 1))
      v96 = (unint64_t *)*((_QWORD *)&v124 + 1);
    do
      v97 = __ldxr(v96);
    while (__stxr(v97 + 1, v96));
  }
  v126 = v117;
  if ((v117 & 7) != 0)
  {
    v98 = (unsigned int *)(v117 & 0xFFFFFFFFFFFFFFF8);
    do
      v99 = __ldxr(v98);
    while (__stxr(v99 + 2, v98));
    if ((v99 & 1) == 0)
      v126 &= 0xFFFFFFFFFFFFFFF8;
  }
  Instance = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)atomic_load((unint64_t *)off_24EDD5B58);
  if (!Instance)
    Instance = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance();
  Type = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FindType(Instance, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v118);
  v102 = a1 + 1;
  v127 = Type;
  v128 = v130[0];
  if ((v130[0] & 7) != 0)
  {
    v103 = (unsigned int *)(v130[0] & 0xFFFFFFFFFFFFFFF8);
    do
      v104 = __ldxr(v103);
    while (__stxr(v104 + 2, v103));
    if ((v104 & 1) == 0)
      v128 &= 0xFFFFFFFFFFFFFFF8;
  }
  v129 = v63;
  v105 = a1[2];
  if (v105 >= a1[3])
  {
    v106 = sub_2263B1500(v102, (uint64_t)&v122);
  }
  else
  {
    sub_2263B148C((uint64_t)v102, (uint64_t)&v122);
    v106 = v105 + 88;
  }
  a1[2] = v106;
  if ((v128 & 7) != 0)
  {
    v107 = (unsigned int *)(v128 & 0xFFFFFFFFFFFFFFF8);
    do
      v108 = __ldxr(v107);
    while (__stlxr(v108 - 2, v107));
  }
  if ((v126 & 7) != 0)
  {
    v109 = (unsigned int *)(v126 & 0xFFFFFFFFFFFFFFF8);
    do
      v110 = __ldxr(v109);
    while (__stlxr(v110 - 2, v109));
  }
  sub_2263AC71C((uint64_t)&v123);
  sub_2263AD568((uint64_t)&v122);
  if ((v117 & 7) != 0)
  {
    v111 = (unsigned int *)(v117 & 0xFFFFFFFFFFFFFFF8);
    do
      v112 = __ldxr(v111);
    while (__stlxr(v112 - 2, v111));
  }
  if ((v118 & 7) != 0)
  {
    v113 = (unsigned int *)(v118 & 0xFFFFFFFFFFFFFFF8);
    do
      v114 = __ldxr(v113);
    while (__stlxr(v114 - 2, v113));
  }
  if ((v130[0] & 7) != 0)
  {
    v115 = (unsigned int *)(v130[0] & 0xFFFFFFFFFFFFFFF8);
    do
      v116 = __ldxr(v115);
    while (__stlxr(v116 - 2, v115));
  }

  sub_2263AC71C((uint64_t)&v119);
  sub_2263AD568((uint64_t)&v131);

}

void sub_2263E22F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  va_list va;

  va_start(va, a3);

  if ((a3 & 7) != 0)
  {
    v10 = (unsigned int *)(a3 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stlxr(v11 - 2, v10));
  }
  v12 = *(_QWORD *)(v8 - 120);
  if ((v12 & 7) != 0)
  {
    v13 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
    do
      v14 = __ldxr(v13);
    while (__stlxr(v14 - 2, v13));
  }

  sub_2263AC71C((uint64_t)va);
  sub_2263AD568(v8 - 104);

  _Unwind_Resume(a1);
}

uint64_t sub_2263E2504@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  if ((sub_2263C01A4((pxrInternal__aapl__pxrReserved__::VtValue *)a1) & 1) != 0)
    return sub_2263E4590(a1, a2);
  result = pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  v5 = *(_OWORD *)(result + 16);
  *(_OWORD *)a2 = *(_OWORD *)result;
  *(_OWORD *)(a2 + 16) = v5;
  v6 = *(_QWORD *)(result + 32);
  *(_QWORD *)(a2 + 32) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 - 16);
    if (*(_QWORD *)(a2 + 24))
      v7 = *(unint64_t **)(a2 + 24);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

uint64_t *sub_2263E258C@<X0>(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *result;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;

  if ((sub_2263BE444(a1) & 1) != 0)
    return sub_2263E4BCC(a1, a2);
  result = (uint64_t *)pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  v5 = *result;
  *a2 = *result;
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 2, v6));
    if ((v7 & 1) == 0)
      *a2 = v6;
  }
  return result;
}

uint64_t sub_2263E260C(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if ((sub_2263BECD0(a1) & 1) != 0)
    return sub_2263E4CE0(a1);
  else
    return *(unsigned int *)pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
}

uint64_t sub_2263E265C(uint64_t *a1, void *a2)
{
  id v3;
  const char *v4;
  uint64_t v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  __CFString *v9;
  void *v10;
  uint64_t v11;

  v3 = a2;
  objc_msgSend_inheritedProperty_(v3, v4, (uint64_t)CFSTR("primvars:normals"), v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  if (v6)
  {
    v9 = CFSTR("primvars:normals");
  }
  else
  {
    objc_msgSend_property_(v3, v7, (uint64_t)CFSTR("normals"), v8);
    v10 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v10)
    {
      v11 = 0;
      goto LABEL_6;
    }
    v9 = CFSTR("normals");
  }
  sub_2263E1D14(a1, v3, v9);
  v11 = 1;
LABEL_6:

  return v11;
}

void sub_2263E26F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL sub_2263E2708(uint64_t *a1, void *a2)
{
  id v3;
  const char *v4;
  uint64_t v5;
  void *v6;

  v3 = a2;
  objc_msgSend_inheritedProperty_(v3, v4, (uint64_t)CFSTR("primvars:tangent"), v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  if (v6)
    sub_2263E1D14(a1, v3, CFSTR("primvars:tangent"));

  return v6 != 0;
}

void sub_2263E2774(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2263E364C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, void *a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59,uint64_t a60,uint64_t a61,char a62)
{
  uint64_t v62;

  if (a34 < 0)
    operator delete(__p);
  STACK[0x3E0] = (unint64_t)&a43;
  sub_2263E4504((void ***)&STACK[0x3E0]);
  MEMORY[0x2276975A0](&a46);
  STACK[0x3E0] = (unint64_t)&a59;
  sub_2263E41A0((void ***)&STACK[0x3E0]);
  sub_2263AD568(v62 - 248);
  sub_2263E3B50((uint64_t)&a62);
  sub_2263D701C((uint64_t)&STACK[0x260]);

  _Unwind_Resume(a1);
}

uint64_t sub_2263E3A10(uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __int128 v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  __int128 v16;
  _QWORD v17[5];

  v6 = a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(result - 8);
  if (v7 >= v6)
  {
    v10 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v7 - *a1) >> 3);
    v11 = v10 + 1;
    if (v10 + 1 > 0x666666666666666)
      sub_2263AACDC();
    v12 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v12 > v11)
      v11 = 2 * v12;
    if (v12 >= 0x333333333333333)
      v13 = 0x666666666666666;
    else
      v13 = v11;
    v17[4] = result;
    if (v13)
      v14 = (char *)sub_2263E48D4(result, v13);
    else
      v14 = 0;
    v15 = &v14[40 * v10];
    v17[0] = v14;
    v17[1] = v15;
    v17[3] = &v14[40 * v13];
    v16 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)v15 = *(_OWORD *)a2;
    *((_OWORD *)v15 + 1) = v16;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *((_QWORD *)v15 + 4) = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a2 + 32) = 0;
    v17[2] = v15 + 40;
    sub_2263E4860(a1, v17);
    v9 = a1[1];
    result = sub_2263E4AD0((uint64_t)v17);
  }
  else
  {
    v8 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)v7 = *(_OWORD *)a2;
    *(_OWORD *)(v7 + 16) = v8;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_QWORD *)(v7 + 32) = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a2 + 32) = 0;
    v9 = v7 + 40;
    a1[1] = v7 + 40;
  }
  a1[1] = v9;
  return result;
}

void sub_2263E3B3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2263E4AD0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2263E3B50(uint64_t a1)
{
  unsigned int *v2;
  unsigned int v3;
  void **v5;

  v5 = (void **)(a1 + 112);
  sub_2263E4114(&v5);
  sub_2263AC71C(a1 + 72);
  sub_2263AC71C(a1 + 32);
  v5 = (void **)(a1 + 8);
  sub_2263E4090(&v5);
  if ((*(_QWORD *)a1 & 7) != 0)
  {
    v2 = (unsigned int *)(*(_QWORD *)a1 & 0xFFFFFFFFFFFFFFF8);
    do
      v3 = __ldxr(v2);
    while (__stlxr(v3 - 2, v2));
  }
  return a1;
}

uint64_t sub_2263E3BD0(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 120) = -1;
  sub_2263E3C14(a1, a2);
  return a1;
}

void sub_2263E3C00(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2263E3ED0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2263E3C14(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 120);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_24EDD88A8[v4])(&v7, result);
  *(_DWORD *)(v3 + 120) = -1;
  v5 = *(unsigned int *)(a2 + 120);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))*(&off_24EDD88B8 + v5))(&v6, v3, a2);
    *(_DWORD *)(v3 + 120) = v5;
  }
  return result;
}

uint64_t sub_2263E3CA0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t result;

  v3 = *(_QWORD *)(a2 + 24);
  if ((v3 & 7) != 0)
  {
    v4 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_2263BDE64(a2 + 16);
  result = *(_QWORD *)(a2 + 8);
  if (result)
    return sub_2263DA640(result);
  return result;
}

_QWORD *sub_2263E3D04(uint64_t a1, _QWORD *a2)
{
  return sub_2263E3D0C(a2);
}

_QWORD *sub_2263E3D0C(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;

  sub_2263E3DE4(a1 + 14, 0);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_2263BDE64((uint64_t)(a1 + 12));
  v2 = (unsigned int *)a1[7];
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
  }
  v6 = (unsigned int *)a1[5];
  if (v6)
  {
    v7 = v6 + 2;
    do
    {
      v8 = __ldxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
      (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 8))(v6);
  }
  v10 = a1[3];
  if ((v10 & 7) != 0)
  {
    v11 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stlxr(v12 - 2, v11));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_2263BDE64((uint64_t)(a1 + 2));
  v13 = a1[1];
  if (v13)
    sub_2263DA640(v13);
  return a1;
}

uint64_t sub_2263E3DE4(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_2263AE3F8(result);
    JUMPOUT(0x2276980E0);
  }
  return result;
}

uint64_t sub_2263E3E20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_2263E3E38(a2, a3);
}

void sub_2263E3E2C()
{
  JUMPOUT(0x22769745CLL);
}

uint64_t sub_2263E3E38(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 48);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  sub_2263BDDD8((_DWORD *)(a1 + 16), (_DWORD *)(a2 + 16));
  sub_2263BDE28((_DWORD *)(a1 + 20), (_DWORD *)(a2 + 20));
  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v7;
  if ((v7 & 7) != 0)
  {
    v8 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 2, v8));
    if ((v9 & 1) == 0)
      *(_QWORD *)(a1 + 24) &= 0xFFFFFFFFFFFFFFF8;
  }
  return a1;
}

uint64_t sub_2263E3ED0(uint64_t a1)
{
  uint64_t v2;
  char v4;

  v2 = *(unsigned int *)(a1 + 120);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24EDD88A8[v2])(&v4, a1);
  *(_DWORD *)(a1 + 120) = -1;
  return a1;
}

uint64_t sub_2263E3F28(uint64_t a1, uint64_t *a2, _DWORD *a3)
{
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  *(_DWORD *)a1 = 1;
  v5 = *a2;
  *(_QWORD *)(a1 + 8) = *a2;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 48);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = (_QWORD *)(a1 + 16);
  sub_2263BDDD8((_DWORD *)(a1 + 16), a3);
  sub_2263BDE28((_DWORD *)(a1 + 20), a3 + 1);
  *(_QWORD *)(a1 + 24) = 0;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9 && (*(_BYTE *)(v9 + 57) & 8) == 0 && *(_QWORD *)(v9 + 16) == *v8)
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper();
  return a1;
}

void sub_2263E4004(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;

  v4 = *(_QWORD *)(v1 + 24);
  if ((v4 & 7) != 0)
  {
    v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  sub_2263B5610(v2);
  v7 = *(_QWORD *)(v1 + 8);
  if (v7)
    sub_2263DA640(v7);
  _Unwind_Resume(a1);
}

uint64_t sub_2263E4044(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = a1 + 16;
  v3 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL();
  if ((v3 & 1) != 0)
    return v2;
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
    return v4 + 16;
  return pxrInternal__aapl__pxrReserved__::SdfPath::EmptyPath((pxrInternal__aapl__pxrReserved__::SdfPath *)v3);
}

void sub_2263E4090(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 88;
        sub_2263B1A10((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_2263E4114(void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    sub_2263E4154((uint64_t)v2, (uint64_t)*v2);
    operator delete(**a1);
  }
}

void sub_2263E4154(uint64_t a1, uint64_t a2)
{
  uint64_t i;

  for (i = *(_QWORD *)(a1 + 8); i != a2; sub_2263AC71C(i))
    i -= 40;
  *(_QWORD *)(a1 + 8) = a2;
}

void sub_2263E41A0(void ***a1)
{
  void **v1;
  char *v2;
  char *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v3 = (char *)v1[1];
    v4 = **a1;
    if (v3 != v2)
    {
      do
      {
        v6 = *((_QWORD *)v3 - 1);
        v3 -= 8;
        v5 = v6;
        if ((v6 & 7) != 0)
        {
          v7 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
          do
            v8 = __ldxr(v7);
          while (__stlxr(v8 - 2, v7));
        }
      }
      while (v3 != v2);
      v4 = **a1;
    }
    v1[1] = v2;
    operator delete(v4);
  }
}

void sub_2263E41FC(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        v4 = sub_2263E3ED0(v4 - 136);
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_2263E426C(uint64_t a1)
{
  uint64_t v1;
  char v3;
  char *v4;

  v1 = *(unsigned int *)(a1 + 120);
  if ((_DWORD)v1 == -1)
    sub_2263E42B4();
  v4 = &v3;
  return ((uint64_t (*)(char **, uint64_t))*(&off_24EDD88C8 + v1))(&v4, a1);
}

void sub_2263E42B4()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = MEMORY[0x24BEDB8D8] + 16;
  __cxa_throw(exception, MEMORY[0x24BEDB738], (void (*)(void *))std::exception::~exception);
}

uint64_t sub_2263E42EC(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_2263E42F4(int a1, pxrInternal__aapl__pxrReserved__::UsdAttributeQuery *this)
{
  return pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::GetAttribute(this);
}

void sub_2263E42FC(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 32;
        sub_2263E4380((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_2263E4380(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t result;

  v3 = *(_QWORD *)(a2 + 24);
  if ((v3 & 7) != 0)
  {
    v4 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_2263BDE64(a2 + 16);
  result = *(_QWORD *)(a2 + 8);
  if (result)
    return sub_2263DA640(result);
  return result;
}

uint64_t sub_2263E43E4(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;

  if (a2 >= 0x7FFFFFFFFFFFFFF8)
    sub_2263AE358();
  if (a2 > 0x16)
  {
    v4 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17)
      v4 = a2 | 7;
    v5 = v4 + 1;
    v6 = operator new(v4 + 1);
    *(_QWORD *)(a1 + 8) = a2;
    *(_QWORD *)(a1 + 16) = v5 | 0x8000000000000000;
    *(_QWORD *)a1 = v6;
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    *(_BYTE *)(a1 + 23) = a2;
  }
  return a1;
}

_QWORD *sub_2263E4468@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *result;

  result = (_QWORD *)operator new();
  result[1] = 0;
  result[2] = 0;
  *result = 0;
  *a1 = result;
  a1[1] = sub_2263E44BC;
  a1[2] = &stru_24EDD71A8;
  return result;
}

uint64_t sub_2263E44BC(uint64_t result)
{
  if (result)
  {
    if (*(char *)(result + 23) < 0)
      operator delete(*(void **)result);
    JUMPOUT(0x2276980E0);
  }
  return result;
}

void sub_2263E4504(void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  char *v7;
  void (**v8)(char *);
  BOOL v9;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = v4 - 24;
      v7 = v4 - 24;
      do
      {
        v8 = *(void (***)(char *))v7;
        v7 -= 24;
        (*v8)(v6);
        v9 = v6 == v2;
        v6 = v7;
      }
      while (!v9);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_2263E4590@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  result = sub_2263E4640(a1);
  v5 = *(_QWORD *)(result + 32);
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(a2 + 32) = v5;
  v6 = *(_QWORD *)(result + 16);
  v7 = *(_OWORD *)result;
  v8 = *(_QWORD *)(a2 + 16);
  *(_OWORD *)result = *(_OWORD *)a2;
  *(_QWORD *)(result + 16) = v8;
  *(_OWORD *)a2 = v7;
  *(_QWORD *)(a2 + 16) = v6;
  v9 = *(_QWORD *)(result + 24);
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(a2 + 24) = v9;
  v10 = a1[1];
  if (v10 && (a1[1] & 3) != 3)
    result = (*(uint64_t (**)(uint64_t *))((v10 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  a1[1] = 0;
  return result;
}

void sub_2263E4628(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2263AC71C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2263E4640(uint64_t *a1)
{
  uint64_t v2;
  _QWORD v4[3];

  v4[2] = *MEMORY[0x24BDAC8D0];
  v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(_QWORD *__return_ptr, uint64_t *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_2263AD3FC(a1, v4);
    sub_2263AD568((uint64_t)v4);
  }
  return sub_2263C682C(a1);
}

char *sub_2263E46D0(char **a1, uint64_t *a2)
{
  char *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  int64x2_t v20;
  char *v21;
  uint64_t v23;
  int64x2_t v24;
  char *v25;
  _QWORD *v26;

  v3 = *a1;
  v4 = (a1[1] - *a1) >> 3;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 61)
    sub_2263AACDC();
  v7 = (uint64_t)(a1 + 2);
  v8 = a1[2] - v3;
  if (v8 >> 2 > v5)
    v5 = v8 >> 2;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
    v9 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  v26 = a1 + 2;
  if (v9)
    v10 = (char *)sub_2263ABFD4(v7, v9);
  else
    v10 = 0;
  v23 = 0;
  v24.i64[0] = 0;
  v11 = &v10[8 * v4];
  v12 = &v10[8 * v9];
  v25 = v12;
  v13 = *a2;
  *(_QWORD *)v11 = *a2;
  if ((v13 & 7) != 0)
  {
    v14 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFFFF8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 2, v14));
    if ((v15 & 1) == 0)
      *(_QWORD *)v11 &= 0xFFFFFFFFFFFFFFF8;
  }
  v16 = v11 + 8;
  v24.i64[1] = (uint64_t)(v11 + 8);
  v18 = *a1;
  v17 = a1[1];
  if (v17 == *a1)
  {
    v20 = vdupq_n_s64((unint64_t)v17);
  }
  else
  {
    do
    {
      v19 = *((_QWORD *)v17 - 1);
      v17 -= 8;
      *((_QWORD *)v11 - 1) = v19;
      v11 -= 8;
      *(_QWORD *)v17 = 0;
    }
    while (v17 != v18);
    v20 = *(int64x2_t *)a1;
    v16 = (char *)v24.i64[1];
    v12 = v25;
  }
  *a1 = v11;
  a1[1] = v16;
  v24 = v20;
  v21 = a1[2];
  a1[2] = v12;
  v25 = v21;
  v23 = v20.i64[0];
  sub_2263E47FC((uint64_t)&v23);
  return v16;
}

uint64_t sub_2263E47FC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  void *v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  while (v3 != v2)
  {
    v5 = *(_QWORD *)(v3 - 8);
    v3 -= 8;
    v4 = v5;
    *(_QWORD *)(a1 + 16) = v3;
    if ((v5 & 7) != 0)
    {
      v6 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
      do
        v7 = __ldxr(v6);
      while (__stlxr(v7 - 2, v6));
      v3 = *(_QWORD *)(a1 + 16);
    }
  }
  v8 = *(void **)a1;
  if (*(_QWORD *)a1)
    operator delete(v8);
  return a1;
}

uint64_t sub_2263E4860(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_2263E4918((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_2263E48D4(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x666666666666667)
    sub_2263AADA8();
  return operator new(40 * a2);
}

uint64_t sub_2263E4918(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD v14[3];
  uint64_t v15;
  __int128 v16;
  __int128 v17;

  v7 = a7;
  *(_QWORD *)&v17 = a6;
  *((_QWORD *)&v17 + 1) = a7;
  v16 = v17;
  v14[0] = a1;
  v14[1] = &v16;
  v14[2] = &v17;
  v15 = 0;
  if (a3 == a5)
  {
    v12 = a6;
  }
  else
  {
    do
    {
      v8 = *(_OWORD *)(a3 - 40);
      *(_OWORD *)(v7 - 24) = *(_OWORD *)(a3 - 24);
      *(_OWORD *)(v7 - 40) = v8;
      v9 = *(_QWORD *)(a3 - 8);
      *(_QWORD *)(v7 - 8) = v9;
      if (v9)
      {
        v10 = (unint64_t *)(v9 - 16);
        if (*(_QWORD *)(v7 - 16))
          v10 = *(unint64_t **)(v7 - 16);
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
        v7 = *((_QWORD *)&v17 + 1);
      }
      a3 -= 40;
      v7 -= 40;
      *((_QWORD *)&v17 + 1) = v7;
    }
    while (a3 != a5);
    v12 = v17;
  }
  LOBYTE(v15) = 1;
  sub_2263E49D8((uint64_t)v14);
  return v12;
}

uint64_t sub_2263E49D8(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_2263E4A0C((uint64_t *)a1);
  return a1;
}

uint64_t sub_2263E4A0C(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v9[8];
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v14[8];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v1 = (uint64_t *)a1[2];
  v3 = *v1;
  v2 = v1[1];
  v15 = v3;
  v16 = v2;
  v17 = v3;
  v18 = v2;
  v4 = *a1;
  v5 = (uint64_t *)a1[1];
  v7 = *v5;
  v6 = v5[1];
  v10 = v7;
  v11 = v6;
  v12 = v7;
  v13 = v6;
  return sub_2263E4A80(v4, (uint64_t)v14, (uint64_t)v9);
}

uint64_t sub_2263E4A80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  for (result = *(_QWORD *)(a2 + 32); result != *(_QWORD *)(a3 + 32); *(_QWORD *)(a2 + 32) = result)
  {
    sub_2263AC71C(result);
    result = *(_QWORD *)(a2 + 32) + 40;
  }
  return result;
}

uint64_t sub_2263E4AD0(uint64_t a1)
{
  sub_2263E4B04(a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_2263E4B04(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  while (1)
  {
    v4 = *(_QWORD *)(a1 + 16);
    if (v4 == a2)
      break;
    *(_QWORD *)(a1 + 16) = v4 - 40;
    sub_2263AC71C(v4 - 40);
  }
}

void sub_2263E4B44()
{
  sub_2263E4B58("basic_string");
}

void sub_2263E4B58(const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_2263E4BA8(exception, a1);
  __cxa_throw(exception, (struct type_info *)off_24EDD65A8, MEMORY[0x24BEDAB00]);
}

void sub_2263E4B94(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *sub_2263E4BA8(std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
  return result;
}

uint64_t *sub_2263E4BCC@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  *a2 = 0;
  result = sub_2263E4C54(a1);
  v5 = *result;
  *result = 0;
  *a2 = v5;
  v6 = a1[1];
  if (v6)
    v7 = (a1[1] & 3) == 3;
  else
    v7 = 1;
  if (!v7)
    result = (uint64_t *)(*(uint64_t (**)(_QWORD *))((v6 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  a1[1] = 0;
  return result;
}

_QWORD *sub_2263E4C54(_QWORD *a1)
{
  uint64_t v2;
  _QWORD v4[3];

  v4[2] = *MEMORY[0x24BDAC8D0];
  v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(_QWORD *__return_ptr, _QWORD *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_2263AD3FC(a1, v4);
    sub_2263AD568((uint64_t)v4);
  }
  return a1;
}

uint64_t sub_2263E4CE0(_QWORD *a1)
{
  _DWORD *v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;

  v2 = sub_2263E4D34(a1);
  v3 = *v2;
  *v2 = 0;
  v4 = a1[1];
  if (v4)
    v5 = (a1[1] & 3) == 3;
  else
    v5 = 1;
  if (!v5)
    (*(void (**)(_QWORD *))((v4 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  a1[1] = 0;
  return v3;
}

_QWORD *sub_2263E4D34(_QWORD *a1)
{
  uint64_t v2;
  _QWORD v4[3];

  v4[2] = *MEMORY[0x24BDAC8D0];
  v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(_QWORD *__return_ptr, _QWORD *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_2263AD3FC(a1, v4);
    sub_2263AD568((uint64_t)v4);
  }
  return a1;
}

void sub_2263E4E38(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_2263E4ED4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2263E4F74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2263E5020(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2263E50E0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_2263E51A8(uint64_t a1)
{
  uint64_t v2;
  _OWORD *v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v8;

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v2 = a1 + 8;
  v8 = 0uLL;
  v3 = (_OWORD *)operator new();
  *(_OWORD *)((char *)v3 + 60) = 0u;
  v3[2] = 0u;
  v3[3] = 0u;
  *v3 = 0u;
  v3[1] = 0u;
  sub_2263E60C8(&v8, (uint64_t)v3);
  *(_DWORD *)(v8 + 72) = -1;
  sub_2263AE20C(v2, &v8);
  v4 = (std::__shared_weak_count *)*((_QWORD *)&v8 + 1);
  if (*((_QWORD *)&v8 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v8 + 1) + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return a1;
}

void sub_2263E5260(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2263AE3F8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2263E5278(uint64_t a1)
{
  sub_2263E52A8(a1);
  sub_2263AE3F8(a1 + 8);
  return a1;
}

void sub_2263E52A8(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  _OWORD *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  __int128 v22;
  __int128 v23;

  v1 = (uint64_t *)(a1 + 8);
  v23 = 0uLL;
  do
  {
    while (1)
    {
      sub_2263ADAB4(&v23, v1);
      sub_2263ADAB4(v1, (uint64_t *)(v23 + 56));
      v2 = v23;
      v22 = v23;
      if (*((_QWORD *)&v23 + 1))
      {
        v3 = (unint64_t *)(*((_QWORD *)&v23 + 1) + 8);
        do
          v4 = __ldxr(v3);
        while (__stxr(v4 + 1, v3));
      }
      while (1)
      {
        v10 = *(_QWORD *)(v2 + 24);
        v9 = (uint64_t *)(v2 + 24);
        if (!v10)
          break;
        v5 = (std::__shared_weak_count *)*((_QWORD *)&v22 + 1);
        if (*((_QWORD *)&v22 + 1))
        {
          v6 = (unint64_t *)(*((_QWORD *)&v22 + 1) + 8);
          do
            v7 = __ldxr(v6);
          while (__stxr(v7 + 1, v6));
          sub_2263ADAB4(&v22, v9);
          do
            v8 = __ldaxr(v6);
          while (__stlxr(v8 - 1, v6));
          if (!v8)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        else
        {
          sub_2263ADAB4(&v22, v9);
        }
        v2 = v22;
      }
      v11 = *v1;
      v12 = (std::__shared_weak_count *)*((_QWORD *)&v22 + 1);
      if (*((_QWORD *)&v22 + 1))
      {
        v13 = (unint64_t *)(*((_QWORD *)&v22 + 1) + 8);
        do
          v14 = __ldaxr(v13);
        while (__stlxr(v14 - 1, v13));
        if (!v14)
          break;
      }
      if (!v11)
        goto LABEL_23;
    }
    ((void (*)(std::__shared_weak_count *, uint64_t *))v12->__on_zero_shared)(v12, v9);
    std::__shared_weak_count::__release_weak(v12);
  }
  while (v11);
LABEL_23:
  v22 = 0uLL;
  v15 = (_OWORD *)operator new();
  *(_OWORD *)((char *)v15 + 60) = 0u;
  v15[2] = 0u;
  v15[3] = 0u;
  *v15 = 0u;
  v15[1] = 0u;
  sub_2263E60C8(&v22, (uint64_t)v15);
  *(_DWORD *)(v22 + 72) = -1;
  sub_2263AE20C((uint64_t)v1, &v22);
  v16 = (std::__shared_weak_count *)*((_QWORD *)&v22 + 1);
  if (*((_QWORD *)&v22 + 1))
  {
    v17 = (unint64_t *)(*((_QWORD *)&v22 + 1) + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = (std::__shared_weak_count *)*((_QWORD *)&v23 + 1);
  if (*((_QWORD *)&v23 + 1))
  {
    v20 = (unint64_t *)(*((_QWORD *)&v23 + 1) + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
}

void sub_2263E5488(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_2263AE3F8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2263E54A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t *v10;
  std::__shared_weak_count *v11;
  _QWORD *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  _QWORD *v19;
  unint64_t *p_shared_weak_owners;
  unint64_t v21;
  std::__shared_weak_count *v22;
  _QWORD *v23;
  std::__shared_weak_count *v24;
  _QWORD *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  BOOL v31;
  _QWORD *v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  std::__shared_weak_count *v35;
  _QWORD *v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  std::__shared_weak_count *v42;
  _QWORD *v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  _OWORD *v47;
  uint64_t v48;
  _QWORD *v49;
  std::__shared_weak_count *v50;
  uint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  _QWORD *v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  uint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  _QWORD *v63;
  std::__shared_weak_count *v64;
  _QWORD *v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  uint64_t v69;
  std::__shared_weak_count *v70;
  uint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  uint64_t v87;
  std::__shared_weak_count *v88;
  _QWORD *v89;
  std::__shared_weak_count *v90;
  _QWORD *v91;
  std::__shared_weak_count *v92;
  _QWORD *v93;
  std::__shared_weak_count *v94;
  _QWORD *v95;
  std::__shared_weak_count *v96;

  v95 = 0;
  v96 = 0;
  v4 = operator new();
  *(_QWORD *)v4 = a2;
  *(_OWORD *)(v4 + 8) = 0u;
  *(_OWORD *)(v4 + 24) = 0u;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_DWORD *)(v4 + 72) = 0;
  sub_2263E60C8(&v95, v4);
  v7 = *(_QWORD **)(a1 + 8);
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  v6 = (_QWORD *)(a1 + 8);
  v93 = v7;
  v94 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  while (1)
  {
    if (*((_DWORD *)v7 + 18) == -1 || *(float *)(*v7 + 4) < *(float *)(*v95 + 4))
    {
      v10 = v7 + 3;
      if (v7[3])
        goto LABEL_5;
    }
    else
    {
      if (*v7 == *v95)
        goto LABEL_95;
      v11 = (std::__shared_weak_count *)v7[2];
      if (v11 && (v11 = std::__shared_weak_count::lock(v11)) != 0)
        v12 = (_QWORD *)v7[1];
      else
        v12 = 0;
      v13 = v94;
      v93 = v12;
      v94 = v11;
      if (v13)
      {
        v14 = (unint64_t *)&v13->__shared_owners_;
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      v7 = v93;
    }
    v10 = v7 + 7;
    if (!v7[7])
      break;
LABEL_5:
    sub_2263ADAB4(&v93, v10);
    v7 = v93;
  }
  sub_2263ADAB4(v95 + 3, v7 + 3);
  v16 = v93;
  v17 = v93[3];
  if (v17)
  {
    v19 = v95;
    v18 = v96;
    if (v96)
    {
      p_shared_weak_owners = (unint64_t *)&v96->__shared_weak_owners_;
      do
        v21 = __ldxr(p_shared_weak_owners);
      while (__stxr(v21 + 1, p_shared_weak_owners));
    }
    v22 = *(std::__shared_weak_count **)(v17 + 16);
    *(_QWORD *)(v17 + 8) = v19;
    *(_QWORD *)(v17 + 16) = v18;
    if (v22)
    {
      std::__shared_weak_count::__release_weak(v22);
      v16 = v93;
    }
  }
  sub_2263ADAB4(v16 + 3, (uint64_t *)&v95);
  v24 = v94;
  v23 = v95;
  v25 = v93;
  if (v94)
  {
    v26 = (unint64_t *)&v94->__shared_weak_owners_;
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
  }
  v28 = (std::__shared_weak_count *)v23[2];
  v23[1] = v25;
  v23[2] = v24;
  if (v28)
  {
    std::__shared_weak_count::__release_weak(v28);
    v23 = v95;
  }
  v91 = v23;
  v92 = v96;
  if (v96)
  {
    v29 = (unint64_t *)&v96->__shared_owners_;
    do
      v30 = __ldxr(v29);
    while (__stxr(v30 + 1, v29));
  }
  v31 = 0;
  while (2)
  {
    if ((rand() & 1) != 0 && !v31)
    {
      while (1)
      {
        v32 = v93;
        v33 = v93[6];
        if (v33)
        {
          if (*(_QWORD *)(v33 + 8) != -1)
            break;
        }
        v34 = (std::__shared_weak_count *)v93[2];
        if (!v34 || v34->__shared_owners_ == -1)
          break;
        v35 = std::__shared_weak_count::lock(v34);
        if (v35)
          v36 = (_QWORD *)v32[1];
        else
          v36 = 0;
        v37 = v94;
        v93 = v36;
        v94 = v35;
        if (v37)
        {
          v38 = (unint64_t *)&v37->__shared_owners_;
          do
            v39 = __ldaxr(v38);
          while (__stlxr(v39 - 1, v38));
          if (!v39)
          {
            ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
            std::__shared_weak_count::__release_weak(v37);
          }
        }
      }
      v89 = 0;
      v90 = 0;
      v40 = operator new();
      *(_QWORD *)v40 = a2;
      *(_OWORD *)(v40 + 8) = 0u;
      *(_OWORD *)(v40 + 24) = 0u;
      *(_OWORD *)(v40 + 40) = 0u;
      *(_OWORD *)(v40 + 56) = 0u;
      *(_DWORD *)(v40 + 72) = 0;
      sub_2263E60C8(&v89, v40);
      v41 = v93;
      v31 = v93 == (_QWORD *)*v6;
      if (v93 == (_QWORD *)*v6)
      {
        v87 = 0;
        v88 = 0;
        v47 = (_OWORD *)operator new();
        *(_OWORD *)((char *)v47 + 60) = 0u;
        v47[2] = 0u;
        v47[3] = 0u;
        *v47 = 0u;
        v47[1] = 0u;
        sub_2263E60C8(&v87, (uint64_t)v47);
        v48 = v87;
        *(_DWORD *)(v87 + 72) = -1;
        sub_2263ADAB4((_QWORD *)(v48 + 56), (uint64_t *)(a1 + 8));
        v49 = (_QWORD *)*v6;
        v51 = v87;
        v50 = v88;
        if (v88)
        {
          v52 = (unint64_t *)&v88->__shared_weak_owners_;
          do
            v53 = __ldxr(v52);
          while (__stxr(v53 + 1, v52));
        }
        v54 = (std::__shared_weak_count *)v49[6];
        v49[5] = v51;
        v49[6] = v50;
        if (v54)
          std::__shared_weak_count::__release_weak(v54);
        sub_2263ADAB4((_QWORD *)(a1 + 8), &v87);
        sub_2263ADAB4(&v93, (uint64_t *)(a1 + 8));
        ++*(_DWORD *)a1;
        v44 = v88;
        if (v88)
        {
          v55 = (unint64_t *)&v88->__shared_owners_;
          do
            v46 = __ldaxr(v55);
          while (__stlxr(v46 - 1, v55));
          goto LABEL_67;
        }
      }
      else
      {
        v42 = (std::__shared_weak_count *)v93[6];
        if (v42 && (v42 = std::__shared_weak_count::lock(v42)) != 0)
          v43 = (_QWORD *)v41[5];
        else
          v43 = 0;
        v44 = v94;
        v93 = v43;
        v94 = v42;
        if (v44)
        {
          v45 = (unint64_t *)&v44->__shared_owners_;
          do
            v46 = __ldaxr(v45);
          while (__stlxr(v46 - 1, v45));
LABEL_67:
          if (!v46)
          {
            ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
            std::__shared_weak_count::__release_weak(v44);
          }
        }
      }
      sub_2263ADAB4(v89 + 3, v93 + 3);
      v56 = v93;
      v57 = v93[3];
      if (v57)
      {
        v59 = (uint64_t)v89;
        v58 = v90;
        if (v90)
        {
          v60 = (unint64_t *)&v90->__shared_weak_owners_;
          do
            v61 = __ldxr(v60);
          while (__stxr(v61 + 1, v60));
        }
        v62 = *(std::__shared_weak_count **)(v57 + 16);
        *(_QWORD *)(v57 + 8) = v59;
        *(_QWORD *)(v57 + 16) = v58;
        if (v62)
        {
          std::__shared_weak_count::__release_weak(v62);
          v56 = v93;
        }
      }
      sub_2263ADAB4(v56 + 3, (uint64_t *)&v89);
      v63 = v89;
      v65 = v93;
      v64 = v94;
      if (v94)
      {
        v66 = (unint64_t *)&v94->__shared_weak_owners_;
        do
          v67 = __ldxr(v66);
        while (__stxr(v67 + 1, v66));
      }
      v68 = (std::__shared_weak_count *)v63[2];
      v63[1] = v65;
      v63[2] = v64;
      if (v68)
      {
        std::__shared_weak_count::__release_weak(v68);
        v63 = v89;
      }
      sub_2263ADAB4(v63 + 7, (uint64_t *)&v91);
      v70 = v90;
      v69 = (uint64_t)v91;
      v71 = (uint64_t)v89;
      if (v90)
      {
        v72 = (unint64_t *)&v90->__shared_weak_owners_;
        do
          v73 = __ldxr(v72);
        while (__stxr(v73 + 1, v72));
      }
      v74 = *(std::__shared_weak_count **)(v69 + 48);
      *(_QWORD *)(v69 + 40) = v71;
      *(_QWORD *)(v69 + 48) = v70;
      if (v74)
        std::__shared_weak_count::__release_weak(v74);
      sub_2263ADAB4(&v91, (uint64_t *)&v89);
      v75 = v90;
      if (v90)
      {
        v76 = (unint64_t *)&v90->__shared_owners_;
        do
          v77 = __ldaxr(v76);
        while (__stlxr(v77 - 1, v76));
        if (!v77)
        {
          ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
          std::__shared_weak_count::__release_weak(v75);
        }
      }
      continue;
    }
    break;
  }
  v78 = v92;
  if (v92)
  {
    v79 = (unint64_t *)&v92->__shared_owners_;
    do
      v80 = __ldaxr(v79);
    while (__stlxr(v80 - 1, v79));
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
      std::__shared_weak_count::__release_weak(v78);
    }
  }
LABEL_95:
  v81 = v94;
  if (v94)
  {
    v82 = (unint64_t *)&v94->__shared_owners_;
    do
      v83 = __ldaxr(v82);
    while (__stlxr(v83 - 1, v82));
    if (!v83)
    {
      ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
      std::__shared_weak_count::__release_weak(v81);
    }
  }
  v84 = v96;
  if (v96)
  {
    v85 = (unint64_t *)&v96->__shared_owners_;
    do
      v86 = __ldaxr(v85);
    while (__stlxr(v86 - 1, v85));
    if (!v86)
    {
      ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
      std::__shared_weak_count::__release_weak(v84);
    }
  }
}

void sub_2263E5A6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  va_list va1;
  uint64_t v9;
  uint64_t v10;
  va_list va2;
  uint64_t v12;
  va_list va3;

  va_start(va3, a3);
  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v7 = va_arg(va2, _QWORD);
  v9 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v10 = va_arg(va3, _QWORD);
  v12 = va_arg(va3, _QWORD);
  sub_2263AE3F8((uint64_t)va);
  sub_2263AE3F8((uint64_t)va1);
  sub_2263AE3F8((uint64_t)va2);
  sub_2263AE3F8((uint64_t)va3);
  _Unwind_Resume(a1);
}

void sub_2263E5AA4(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  _QWORD *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  _QWORD *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  int v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  _QWORD *v53;
  std::__shared_weak_count *v54;

  v53 = 0;
  v54 = 0;
  sub_2263E5DD8(a1, a2, (uint64_t *)&v53);
  if (v53)
  {
    v3 = a1 + 8;
    while (1)
    {
      v4 = v53;
      v5 = (std::__shared_weak_count *)v53[2];
      if (v5)
      {
        v6 = std::__shared_weak_count::lock(v5);
        if (v6)
          v7 = v4[1];
        else
          v7 = 0;
      }
      else
      {
        v7 = 0;
        v6 = 0;
      }
      v8 = v53;
      if (v7 == *(_QWORD *)v3 && !v53[3])
      {
        v31 = *(_QWORD *)(v7 + 56);
        if (v31)
        {
          v32 = *(std::__shared_weak_count **)(v7 + 64);
          v51 = v31;
          v52 = v32;
          if (v32)
          {
            p_shared_owners = (unint64_t *)&v32->__shared_owners_;
            do
              v34 = __ldxr(p_shared_owners);
            while (__stxr(v34 + 1, p_shared_owners));
          }
          sub_2263ADAB4((_QWORD *)(a1 + 8), &v51);
          v35 = *(_QWORD *)v3;
          v36 = *(std::__shared_weak_count **)(*(_QWORD *)v3 + 48);
          *(_QWORD *)(v35 + 40) = 0;
          *(_QWORD *)(v35 + 48) = 0;
          if (v36)
            std::__shared_weak_count::__release_weak(v36);
          v37 = (std::__shared_weak_count *)v53[8];
          v49 = v53[7];
          v50 = v37;
          if (v37)
          {
            v38 = (unint64_t *)&v37->__shared_owners_;
            do
              v39 = __ldxr(v38);
            while (__stxr(v39 + 1, v38));
          }
          sub_2263ADAB4(&v53, &v49);
          --*(_DWORD *)a1;
          v40 = v50;
          if (v50)
          {
            v41 = (unint64_t *)&v50->__shared_owners_;
            do
              v42 = __ldaxr(v41);
            while (__stlxr(v42 - 1, v41));
            if (!v42)
            {
              ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
              std::__shared_weak_count::__release_weak(v40);
            }
          }
          v43 = v52;
          if (v52)
          {
            v44 = (unint64_t *)&v52->__shared_owners_;
            do
              v45 = __ldaxr(v44);
            while (__stlxr(v45 - 1, v44));
            if (!v45)
            {
              ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
              std::__shared_weak_count::__release_weak(v43);
            }
          }
          v26 = 2;
          if (!v6)
            goto LABEL_42;
LABEL_38:
          v29 = (unint64_t *)&v6->__shared_owners_;
          do
            v30 = __ldaxr(v29);
          while (__stlxr(v30 - 1, v29));
          if (!v30)
          {
            ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
            std::__shared_weak_count::__release_weak(v6);
          }
          goto LABEL_42;
        }
      }
      v9 = (std::__shared_weak_count *)v53[2];
      if (v9)
      {
        v10 = std::__shared_weak_count::lock(v9);
        if (v10)
          v11 = v8[1];
        else
          v11 = 0;
      }
      else
      {
        v11 = 0;
        v10 = 0;
      }
      sub_2263ADAB4((_QWORD *)(v11 + 24), v53 + 3);
      v12 = v53;
      v13 = v53[3];
      if (v13)
      {
        v15 = v53[1];
        v14 = v53[2];
        if (v14)
        {
          v16 = (unint64_t *)(v14 + 16);
          do
            v17 = __ldxr(v16);
          while (__stxr(v17 + 1, v16));
        }
        v18 = *(std::__shared_weak_count **)(v13 + 16);
        *(_QWORD *)(v13 + 8) = v15;
        *(_QWORD *)(v13 + 16) = v14;
        if (v18)
        {
          std::__shared_weak_count::__release_weak(v18);
          v12 = v53;
        }
      }
      v19 = v12[7];
      if (!v19)
        break;
      v20 = (std::__shared_weak_count *)v12[8];
      v51 = v19;
      v52 = v20;
      if (v20)
      {
        v21 = (unint64_t *)&v20->__shared_owners_;
        do
          v22 = __ldxr(v21);
        while (__stxr(v22 + 1, v21));
      }
      sub_2263ADAB4(&v53, &v51);
      v23 = v52;
      if (v52)
      {
        v24 = (unint64_t *)&v52->__shared_owners_;
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
      v26 = 0;
      if (v10)
        goto LABEL_33;
LABEL_37:
      if (v6)
        goto LABEL_38;
LABEL_42:
      if (v26 == 3)
        goto LABEL_65;
    }
    v26 = 3;
    if (!v10)
      goto LABEL_37;
LABEL_33:
    v27 = (unint64_t *)&v10->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
    goto LABEL_37;
  }
LABEL_65:
  v46 = v54;
  if (v54)
  {
    v47 = (unint64_t *)&v54->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
}

void sub_2263E5DD8(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t *v3;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;

  v3 = a2;
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  v20 = v6;
  v21 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  while (1)
  {
    if (*(_DWORD *)(v6 + 72) == -1 || *(float *)(*(_QWORD *)v6 + 4) < *((float *)v3 + 1))
    {
      a2 = (uint64_t *)(v6 + 24);
      if (!*(_QWORD *)(v6 + 24))
      {
        v15 = *(_QWORD *)(v6 + 56);
        v14 = (uint64_t *)(v6 + 56);
        if (!v15)
          goto LABEL_23;
        a2 = v14;
      }
      goto LABEL_15;
    }
    if (*(uint64_t **)v6 == v3)
      break;
    v9 = *(std::__shared_weak_count **)(v6 + 16);
    if (v9 && (v9 = std::__shared_weak_count::lock(v9)) != 0)
      v10 = *(_QWORD *)(v6 + 8);
    else
      v10 = 0;
    v11 = v21;
    v20 = v10;
    v21 = v9;
    if (v11)
    {
      v12 = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    a2 = (uint64_t *)(v20 + 56);
    if (!*(_QWORD *)(v20 + 56))
      goto LABEL_23;
LABEL_15:
    sub_2263ADAB4(&v20, a2);
    v6 = v20;
  }
  v16 = v21;
  *a3 = v6;
  a3[1] = (uint64_t)v16;
  a3 = &v20;
LABEL_23:
  *a3 = 0;
  a3[1] = 0;
  v17 = v21;
  if (v21)
  {
    v18 = (unint64_t *)&v21->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *, uint64_t *))v17->__on_zero_shared)(v17, a2);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
}

_QWORD *sub_2263E5F28(uint64_t a1, uint64_t *a2)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v12;
  std::__shared_weak_count *v13;

  v12 = 0;
  v13 = 0;
  sub_2263E5DD8(a1, a2, &v12);
  v2 = (_QWORD *)v12;
  if (v12)
  {
    while (v2[7])
    {
      sub_2263ADAB4(&v12, v2 + 7);
      v2 = (_QWORD *)v12;
    }
    v3 = (std::__shared_weak_count *)v2[2];
    if (v3 && (v3 = std::__shared_weak_count::lock(v3)) != 0)
      v4 = v2[1];
    else
      v4 = 0;
    v5 = v13;
    v12 = v4;
    v13 = v3;
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    if (*(_DWORD *)(v12 + 72) == -1)
      v2 = 0;
    else
      v2 = *(_QWORD **)v12;
  }
  v8 = v13;
  if (v13)
  {
    v9 = (unint64_t *)&v13->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  return v2;
}

uint64_t sub_2263E6028(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v10;
  std::__shared_weak_count *v11;

  v10 = 0;
  v11 = 0;
  sub_2263E5DD8(a1, a2, &v10);
  v3 = v10;
  if (!v10)
    goto LABEL_6;
  while (1)
  {
    v2 = (uint64_t *)(v3 + 56);
    if (!*(_QWORD *)(v3 + 56))
      break;
    sub_2263ADAB4(&v10, v2);
    v3 = v10;
  }
  v4 = *(uint64_t **)(v3 + 24);
  if (v4)
    v5 = *v4;
  else
LABEL_6:
    v5 = 0;
  v6 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *, uint64_t *))v6->__on_zero_shared)(v6, v2);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

_QWORD *sub_2263E60C8(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_24EDD88E8;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_2263E6128(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2263E6270((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

void sub_2263E6144(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x2276980E0);
}

uint64_t sub_2263E6168(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
  {
    sub_2263E61DC(result);
    JUMPOUT(0x2276980E0);
  }
  return result;
}

uint64_t sub_2263E619C(uint64_t a1, uint64_t a2)
{
  if (sub_2263E6224(a2, (uint64_t)&unk_24EDD8938))
    return a1 + 24;
  else
    return 0;
}

uint64_t sub_2263E61DC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  sub_2263AE3F8(a1 + 56);
  v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  sub_2263AE3F8(a1 + 24);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

BOOL sub_2263E6224(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  if (v2 == v3)
    return 1;
  if ((v3 & v2) < 0 != __OFSUB__(v2, v3))
    return strcmp((const char *)(v2 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL)) == 0;
  return 0;
}

uint64_t sub_2263E6270(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_2263E61DC(result);
    JUMPOUT(0x2276980E0);
  }
  return result;
}

void sub_2263E6464(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_2263DC7CC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2263E6538(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2263E6684(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  unsigned int *v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  va_list va;

  va_start(va, a3);
  if ((a2 & 7) != 0)
  {
    v4 = (unsigned int *)(a2 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  if ((a3 & 7) != 0)
  {
    v6 = (unsigned int *)(a3 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  sub_2263DC7CC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2263E6728(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2263E6818(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2263E6938(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_2263E6A5C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_2263E6B18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2263D701C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2263E6BAC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2263AD568((uint64_t)va);
  _Unwind_Resume(a1);
}

_DWORD *sub_2263E6BC8@<X0>(_DWORD *result@<X0>, _QWORD *a2@<X8>)
{
  char v3;
  unint64_t v4;
  const char *v5;
  unsigned int *v6;
  unsigned int v7;
  __int128 v8;
  __int128 v9;
  _QWORD v10[3];

  v10[2] = *MEMORY[0x24BDAC8D0];
  if (*result != 3)
  {
LABEL_18:
    a2[1] = 0;
    return result;
  }
  v8 = 0u;
  v9 = 0u;
  sub_2263DC6FC((uint64_t)result, (uint64_t)&v8);
  if (sub_2263DA5B4((pxrInternal__aapl__pxrReserved__::UsdObject *)&v8))
  {
    v10[0] = 0;
    v10[1] = 0;
    if (pxrInternal__aapl__pxrReserved__::UsdAttribute::Get())
    {
      sub_2263B0700(a2, v10);
      sub_2263AD568((uint64_t)v10);
      v3 = 0;
      goto LABEL_12;
    }
    sub_2263AD568((uint64_t)v10);
  }
  else
  {
    v4 = *(_QWORD *)sub_2263DE374(&v8) & 0xFFFFFFFFFFFFFFF8;
    if (v4)
    {
      v5 = (const char *)(v4 + 16);
      if (*(char *)(v4 + 39) < 0)
        v5 = *(const char **)v5;
    }
    else
    {
      v5 = "";
    }
    NSLog(CFSTR("Warning: Invalid attribute %s\n"), v5);
  }
  v3 = 1;
LABEL_12:
  if ((BYTE8(v9) & 7) != 0)
  {
    v6 = (unsigned int *)(*((_QWORD *)&v9 + 1) & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_2263BDE64((uint64_t)&v9);
  result = (_DWORD *)*((_QWORD *)&v8 + 1);
  if (*((_QWORD *)&v8 + 1))
    result = (_DWORD *)sub_2263DA640(*((uint64_t *)&v8 + 1));
  if ((v3 & 1) != 0)
    goto LABEL_18;
  return result;
}

void sub_2263E6D20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  sub_2263AD568((uint64_t)va1);
  sub_2263DC7CC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2263E6DD4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2263AD568((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2263E6F2C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2263B5610((uint64_t)va);
  _Unwind_Resume(a1);
}

_DWORD *sub_2263E6F40@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfPath *v4;
  _DWORD *v5;
  _DWORD *v6;
  uint64_t v7;
  const pxrInternal__aapl__pxrReserved__::TfToken *v9;
  pxrInternal__aapl__pxrReserved__::SdfPath *v10;

  v4 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16);
  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL())
  {
    if (*(_DWORD *)a1 == 1)
    {
      sub_2263BDDD8(a2, v4);
      v5 = a2 + 1;
      v6 = (_DWORD *)(a1 + 20);
      return sub_2263BDE28(v5, v6);
    }
    v9 = (const pxrInternal__aapl__pxrReserved__::TfToken *)(a1 + 24);
    v10 = v4;
  }
  else
  {
    v7 = *(_QWORD *)(a1 + 8);
    if (!v7)
    {
      *(_QWORD *)a2 = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
      return (_DWORD *)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
    }
    if (*(_DWORD *)a1 == 1)
    {
      sub_2263BDDD8(a2, (_DWORD *)(v7 + 16));
      v5 = a2 + 1;
      v6 = (_DWORD *)(v7 + 20);
      return sub_2263BDE28(v5, v6);
    }
    v9 = (const pxrInternal__aapl__pxrReserved__::TfToken *)(a1 + 24);
    v10 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(v7 + 16);
  }
  return (_DWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(v10, v9);
}

void sub_2263E7574(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,char a24)
{
  void *v24;
  void *v25;
  uint64_t v26;

  sub_2263DB100(v26 - 176, *(_QWORD **)(v26 - 168));

  _Unwind_Resume(a1);
}

void sub_2263E78F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  void *v6;
  void *v7;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  va_list va;
  uint64_t v13;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v11 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  sub_2263AD568((uint64_t)va);
  sub_2263AD568((uint64_t)va1);
  if ((a2 & 7) != 0)
  {
    v9 = (unsigned int *)(a2 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }

  _Unwind_Resume(a1);
}

void sub_2263E7C44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  void *v8;
  void *v9;
  void *v10;
  unsigned int *v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v16;
  va_list va;
  uint64_t v18;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v16 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  sub_2263AD568((uint64_t)va);
  sub_2263AD568((uint64_t)va1);
  if ((a3 & 7) != 0)
  {
    v12 = (unsigned int *)(a3 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  if ((a4 & 7) != 0)
  {
    v14 = (unsigned int *)(a4 & 0xFFFFFFFFFFFFFFF8);
    do
      v15 = __ldxr(v14);
    while (__stlxr(v15 - 2, v14));
  }

  _Unwind_Resume(a1);
}

void sub_2263E7E68(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_2263E807C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  void *v6;
  uint64_t v8;
  va_list va;
  uint64_t v10;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  sub_2263AD568((uint64_t)va);
  sub_2263AD568((uint64_t)va1);

  _Unwind_Resume(a1);
}

void sub_2263E8328(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  void *v6;
  void *v7;
  uint64_t v9;
  va_list va;
  uint64_t v11;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  sub_2263AD568((uint64_t)va);
  sub_2263AD568((uint64_t)va1);

  _Unwind_Resume(a1);
}

void sub_2263E85D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  void *v6;
  uint64_t v8;
  va_list va;
  uint64_t v10;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  sub_2263AD568((uint64_t)va);
  sub_2263AD568((uint64_t)va1);

  _Unwind_Resume(a1);
}

void sub_2263E87D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;

  sub_2263B5610((uint64_t)&a9);
  *(_QWORD *)(v13 - 40) = &a10;
  sub_2263BE380((void ***)(v13 - 40));
  sub_2263DC7CC((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_2263E89BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18)
{
  a18 = (void **)&a10;
  sub_2263BE380(&a18);
  sub_2263DC7CC((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_2263E8C38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  if (a2)
    sub_2263AACCC(exception_object);
  _Unwind_Resume(exception_object);
}

void **sub_2263E8CAC(uint64_t *a1, unint64_t a2)
{
  void **result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7[5];

  v4 = a1[2];
  result = (void **)(a1 + 2);
  if (a2 > (v4 - *a1) >> 3)
  {
    if (a2 >> 61)
      sub_2263AACDC();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = sub_2263ABFD4((uint64_t)result, a2);
    v7[1] = (char *)v7[0] + v5;
    v7[2] = (char *)v7[0] + v5;
    v7[3] = (char *)v7[0] + 8 * v6;
    sub_2263F3AB4(a1, v7);
    return sub_2263F3C5C(v7);
  }
  return result;
}

void sub_2263E8D28(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2263F3C5C((void **)va);
  _Unwind_Resume(a1);
}

void sub_2263E8DD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2263DC7CC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2263E8F94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (a2)
    sub_2263AACCC(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_2263E90EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2263E9184((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2263E9114@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;

  if (*(_DWORD *)a1 == 4)
    return sub_2263DAB24(a2, 4, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16), (uint64_t *)(a1 + 24));
  *(_DWORD *)a2 = 4;
  *(_QWORD *)(a2 + 8) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  result = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  *(_QWORD *)(a2 + 24) = 0;
  return result;
}

uint64_t sub_2263E9184(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 24);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_2263BDE64(a1 + 16);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    sub_2263DA640(v5);
  return a1;
}

void sub_2263E94F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  sub_2263AD568(v7 - 64);
  sub_2263DC7CC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2263E9888(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  sub_2263AD568(v7 - 56);
  sub_2263DC7CC((uint64_t)va);
  sub_2263DC7CC((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_2263E9A18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2263DC7CC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2263E9C28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, char a19)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_2263AACCC(exception_object);
}

void sub_2263E9F80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

uint64_t sub_2263EA034@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  if ((sub_2263C1A58((pxrInternal__aapl__pxrReserved__::VtValue *)a1) & 1) != 0)
    return sub_2263F420C(a1, a2);
  result = pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  v5 = *(_OWORD *)(result + 16);
  *(_OWORD *)a2 = *(_OWORD *)result;
  *(_OWORD *)(a2 + 16) = v5;
  v6 = *(_QWORD *)(result + 32);
  *(_QWORD *)(a2 + 32) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 - 16);
    if (*(_QWORD *)(a2 + 24))
      v7 = *(unint64_t **)(a2 + 24);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return result;
}

_DWORD *sub_2263EA15C@<X0>(_DWORD *result@<X0>, unsigned int **a2@<X8>)
{
  unsigned int **v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unint64_t v7;
  const char *v8;
  pxrInternal__aapl__pxrReserved__::VtValue *Typeid;
  const std::type_info *v10;
  std::type_info *v11;
  unsigned int **v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int v15;
  char v16;
  unsigned int *v17;
  unsigned int v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[3];

  v23[2] = *MEMORY[0x24BDAC8D0];
  if (*result != 3)
  {
LABEL_33:
    *a2 = 0;
    return result;
  }
  v19 = 0u;
  v20 = 0u;
  sub_2263DC6FC((uint64_t)result, (uint64_t)&v19);
  if (sub_2263DA5B4((pxrInternal__aapl__pxrReserved__::UsdObject *)&v19))
  {
    v23[0] = 0;
    v23[1] = 0;
    if (pxrInternal__aapl__pxrReserved__::UsdAttribute::Get())
    {
      if (sub_2263BE444((pxrInternal__aapl__pxrReserved__::VtValue *)v23))
      {
        v3 = (unsigned int **)sub_2263BE47C((pxrInternal__aapl__pxrReserved__::VtValue *)v23);
        v4 = *v3;
        *a2 = *v3;
        if ((v4 & 7) != 0)
        {
          v5 = (unsigned int *)((unint64_t)v4 & 0xFFFFFFFFFFFFFFF8);
          do
            v6 = __ldxr(v5);
          while (__stxr(v6 + 2, v5));
          if ((v6 & 1) == 0)
            *a2 = v5;
        }
LABEL_23:
        sub_2263AD568((uint64_t)v23);
        v16 = 0;
        goto LABEL_27;
      }
      Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)v23);
      if (pxrInternal__aapl__pxrReserved__::VtValue::_CanCast(Typeid, &stru_24EDD6E68, v10))
      {
        v21 = 0;
        v22 = 0;
        v11 = sub_2263BE548((pxrInternal__aapl__pxrReserved__::VtValue *)v23);
        sub_2263B0700(&v21, v11);
        if (v22)
        {
          v12 = (unsigned int **)sub_2263BE47C((pxrInternal__aapl__pxrReserved__::VtValue *)&v21);
          v13 = *v12;
          *a2 = *v12;
          if ((v13 & 7) != 0)
          {
            v14 = (unsigned int *)((unint64_t)v13 & 0xFFFFFFFFFFFFFFF8);
            do
              v15 = __ldxr(v14);
            while (__stxr(v15 + 2, v14));
            if ((v15 & 1) == 0)
              *a2 = v14;
          }
          sub_2263AD568((uint64_t)&v21);
          goto LABEL_23;
        }
        sub_2263AD568((uint64_t)&v21);
      }
    }
    sub_2263AD568((uint64_t)v23);
  }
  else
  {
    v7 = *(_QWORD *)sub_2263DE374(&v19) & 0xFFFFFFFFFFFFFFF8;
    if (v7)
    {
      v8 = (const char *)(v7 + 16);
      if (*(char *)(v7 + 39) < 0)
        v8 = *(const char **)v8;
    }
    else
    {
      v8 = "";
    }
    NSLog(CFSTR("Warning: Invalid attribute %s\n"), v8);
  }
  v16 = 1;
LABEL_27:
  if ((BYTE8(v20) & 7) != 0)
  {
    v17 = (unsigned int *)(*((_QWORD *)&v20 + 1) & 0xFFFFFFFFFFFFFFF8);
    do
      v18 = __ldxr(v17);
    while (__stlxr(v18 - 2, v17));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_2263BDE64((uint64_t)&v20);
  result = (_DWORD *)*((_QWORD *)&v19 + 1);
  if (*((_QWORD *)&v19 + 1))
    result = (_DWORD *)sub_2263DA640(*((uint64_t *)&v19 + 1));
  if ((v16 & 1) != 0)
    goto LABEL_33;
  return result;
}

void sub_2263EA368(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  sub_2263AD568((uint64_t)va1);
  sub_2263AD568((uint64_t)va2);
  sub_2263DC7CC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2263EA51C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  void *v15;

  sub_2263B58AC((uint64_t)&a9);
  sub_2263DC7CC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_2263EA708(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  uint64_t v18;

  if (a14 < 0)
    operator delete(__p);
  sub_2263B58AC((uint64_t)&a18);
  sub_2263DC7CC(v18 - 48);
  _Unwind_Resume(a1);
}

void sub_2263EA968(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  void *v24;

  sub_2263C97A0(&a18);
  sub_2263DC7CC((uint64_t)&a24);

  _Unwind_Resume(a1);
}

double sub_2263EAA28(_DWORD *a1, double a2)
{
  unint64_t v3;
  const char *v4;
  pxrInternal__aapl__pxrReserved__::VtValue *Typeid;
  const std::type_info *v6;
  std::type_info *v7;
  char v8;
  unsigned int *v9;
  unsigned int v10;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[3];

  v16[2] = *MEMORY[0x24BDAC8D0];
  if (*a1 != 3)
    return 0.0;
  v12 = 0u;
  v13 = 0u;
  sub_2263DC6FC((uint64_t)a1, (uint64_t)&v12);
  if (sub_2263DA5B4((pxrInternal__aapl__pxrReserved__::UsdObject *)&v12))
  {
    v16[0] = 0;
    v16[1] = 0;
    if (pxrInternal__aapl__pxrReserved__::UsdAttribute::Get())
    {
      if (sub_2263BE974((pxrInternal__aapl__pxrReserved__::VtValue *)v16))
      {
        a2 = *(double *)sub_2263BE9E4((pxrInternal__aapl__pxrReserved__::VtValue *)v16);
LABEL_14:
        sub_2263AD568((uint64_t)v16);
        v8 = 0;
        goto LABEL_18;
      }
      Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)v16);
      if (pxrInternal__aapl__pxrReserved__::VtValue::_CanCast(Typeid, &stru_24EDD6E98, v6))
      {
        v14 = 0;
        v15 = 0;
        v7 = sub_2263BEA4C((pxrInternal__aapl__pxrReserved__::VtValue *)v16);
        sub_2263B0700(&v14, v7);
        if (v15)
        {
          a2 = *(double *)sub_2263BE9E4((pxrInternal__aapl__pxrReserved__::VtValue *)&v14);
          sub_2263AD568((uint64_t)&v14);
          goto LABEL_14;
        }
        sub_2263AD568((uint64_t)&v14);
      }
    }
    sub_2263AD568((uint64_t)v16);
  }
  else
  {
    v3 = *(_QWORD *)sub_2263DE374(&v12) & 0xFFFFFFFFFFFFFFF8;
    if (v3)
    {
      v4 = (const char *)(v3 + 16);
      if (*(char *)(v3 + 39) < 0)
        v4 = *(const char **)v4;
    }
    else
    {
      v4 = "";
    }
    NSLog(CFSTR("Warning: Invalid attribute %s\n"), v4);
  }
  v8 = 1;
LABEL_18:
  if ((BYTE8(v13) & 7) != 0)
  {
    v9 = (unsigned int *)(*((_QWORD *)&v13 + 1) & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_2263BDE64((uint64_t)&v13);
  if (*((_QWORD *)&v12 + 1))
    sub_2263DA640(*((uint64_t *)&v12 + 1));
  if ((v8 & 1) != 0)
    return 0.0;
  return a2;
}

void sub_2263EABDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  sub_2263AD568((uint64_t)va1);
  sub_2263AD568(v3 - 56);
  sub_2263DC7CC((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_2263EAC44(_DWORD *a1)
{
  BOOL v1;
  int v2;
  unint64_t v3;
  const char *v4;
  pxrInternal__aapl__pxrReserved__::VtValue *Typeid;
  const std::type_info *v6;
  std::type_info *v7;
  char v8;
  unsigned int *v9;
  unsigned int v10;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[3];

  v16[2] = *MEMORY[0x24BDAC8D0];
  if (*a1 != 3)
    return 0;
  v12 = 0u;
  v13 = 0u;
  sub_2263DC6FC((uint64_t)a1, (uint64_t)&v12);
  if (sub_2263DA5B4((pxrInternal__aapl__pxrReserved__::UsdObject *)&v12))
  {
    v16[0] = 0;
    v16[1] = 0;
    if (pxrInternal__aapl__pxrReserved__::UsdAttribute::Get())
    {
      if (sub_2263BEB40((pxrInternal__aapl__pxrReserved__::VtValue *)v16))
      {
        v2 = *(unsigned __int8 *)sub_2263BEB74((pxrInternal__aapl__pxrReserved__::VtValue *)v16);
LABEL_14:
        v1 = v2 != 0;
        sub_2263AD568((uint64_t)v16);
        v8 = 0;
        goto LABEL_18;
      }
      Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)v16);
      if (pxrInternal__aapl__pxrReserved__::VtValue::_CanCast(Typeid, MEMORY[0x24BEDB770], v6))
      {
        v14 = 0;
        v15 = 0;
        v7 = sub_2263BEBDC((pxrInternal__aapl__pxrReserved__::VtValue *)v16);
        sub_2263B0700(&v14, v7);
        if (v15)
        {
          v2 = *(unsigned __int8 *)sub_2263BEB74((pxrInternal__aapl__pxrReserved__::VtValue *)&v14);
          sub_2263AD568((uint64_t)&v14);
          goto LABEL_14;
        }
        sub_2263AD568((uint64_t)&v14);
      }
    }
    sub_2263AD568((uint64_t)v16);
  }
  else
  {
    v3 = *(_QWORD *)sub_2263DE374(&v12) & 0xFFFFFFFFFFFFFFF8;
    if (v3)
    {
      v4 = (const char *)(v3 + 16);
      if (*(char *)(v3 + 39) < 0)
        v4 = *(const char **)v4;
    }
    else
    {
      v4 = "";
    }
    NSLog(CFSTR("Warning: Invalid attribute %s\n"), v4);
  }
  v8 = 1;
LABEL_18:
  if ((BYTE8(v13) & 7) != 0)
  {
    v9 = (unsigned int *)(*((_QWORD *)&v13 + 1) & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_2263BDE64((uint64_t)&v13);
  if (*((_QWORD *)&v12 + 1))
    sub_2263DA640(*((uint64_t *)&v12 + 1));
  if ((v8 & 1) != 0)
    return 0;
  return v1;
}

void sub_2263EAE08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  sub_2263AD568((uint64_t)va1);
  sub_2263AD568((uint64_t)va2);
  sub_2263DC7CC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2263EAE70(_DWORD *a1)
{
  uint64_t v1;
  unint64_t v2;
  const char *v3;
  pxrInternal__aapl__pxrReserved__::VtValue *Typeid;
  const std::type_info *v5;
  std::type_info *v6;
  char v7;
  unsigned int *v8;
  unsigned int v9;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[3];

  v15[2] = *MEMORY[0x24BDAC8D0];
  if (*a1 != 3)
    return 0;
  v11 = 0u;
  v12 = 0u;
  sub_2263DC6FC((uint64_t)a1, (uint64_t)&v11);
  if (sub_2263DA5B4((pxrInternal__aapl__pxrReserved__::UsdObject *)&v11))
  {
    v15[0] = 0;
    v15[1] = 0;
    if (pxrInternal__aapl__pxrReserved__::UsdAttribute::Get())
    {
      if (sub_2263BECD0((pxrInternal__aapl__pxrReserved__::VtValue *)v15))
      {
        v1 = *(unsigned int *)sub_2263BED08((pxrInternal__aapl__pxrReserved__::VtValue *)v15);
LABEL_14:
        sub_2263AD568((uint64_t)v15);
        v7 = 0;
        goto LABEL_18;
      }
      Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)v15);
      if (pxrInternal__aapl__pxrReserved__::VtValue::_CanCast(Typeid, MEMORY[0x24BEDB798], v5))
      {
        v13 = 0;
        v14 = 0;
        v6 = sub_2263BED70((pxrInternal__aapl__pxrReserved__::VtValue *)v15);
        sub_2263B0700(&v13, v6);
        if (v14)
        {
          v1 = *(unsigned int *)sub_2263BED08((pxrInternal__aapl__pxrReserved__::VtValue *)&v13);
          sub_2263AD568((uint64_t)&v13);
          goto LABEL_14;
        }
        sub_2263AD568((uint64_t)&v13);
      }
    }
    sub_2263AD568((uint64_t)v15);
  }
  else
  {
    v2 = *(_QWORD *)sub_2263DE374(&v11) & 0xFFFFFFFFFFFFFFF8;
    if (v2)
    {
      v3 = (const char *)(v2 + 16);
      if (*(char *)(v2 + 39) < 0)
        v3 = *(const char **)v3;
    }
    else
    {
      v3 = "";
    }
    NSLog(CFSTR("Warning: Invalid attribute %s\n"), v3);
  }
  v7 = 1;
LABEL_18:
  if ((BYTE8(v12) & 7) != 0)
  {
    v8 = (unsigned int *)(*((_QWORD *)&v12 + 1) & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stlxr(v9 - 2, v8));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_2263BDE64((uint64_t)&v12);
  if (*((_QWORD *)&v11 + 1))
    sub_2263DA640(*((uint64_t *)&v11 + 1));
  if ((v7 & 1) != 0)
    return 0;
  return v1;
}

void sub_2263EB02C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  sub_2263AD568((uint64_t)va1);
  sub_2263AD568((uint64_t)va2);
  sub_2263DC7CC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2263EB094(_DWORD *a1)
{
  uint64_t v1;
  unint64_t v2;
  const char *v3;
  pxrInternal__aapl__pxrReserved__::VtValue *Typeid;
  const std::type_info *v5;
  std::type_info *v6;
  char v7;
  unsigned int *v8;
  unsigned int v9;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[3];

  v15[2] = *MEMORY[0x24BDAC8D0];
  if (*a1 != 3)
    return 0;
  v11 = 0u;
  v12 = 0u;
  sub_2263DC6FC((uint64_t)a1, (uint64_t)&v11);
  if (sub_2263DA5B4((pxrInternal__aapl__pxrReserved__::UsdObject *)&v11))
  {
    v15[0] = 0;
    v15[1] = 0;
    if (pxrInternal__aapl__pxrReserved__::UsdAttribute::Get())
    {
      if (sub_2263BEE64((pxrInternal__aapl__pxrReserved__::VtValue *)v15))
      {
        v1 = *(unsigned int *)sub_2263BEE9C((pxrInternal__aapl__pxrReserved__::VtValue *)v15);
LABEL_14:
        sub_2263AD568((uint64_t)v15);
        v7 = 0;
        goto LABEL_18;
      }
      Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)v15);
      if (pxrInternal__aapl__pxrReserved__::VtValue::_CanCast(Typeid, MEMORY[0x24BEDB7A0], v5))
      {
        v13 = 0;
        v14 = 0;
        v6 = sub_2263BEF04((pxrInternal__aapl__pxrReserved__::VtValue *)v15);
        sub_2263B0700(&v13, v6);
        if (v14)
        {
          v1 = *(unsigned int *)sub_2263BEE9C((pxrInternal__aapl__pxrReserved__::VtValue *)&v13);
          sub_2263AD568((uint64_t)&v13);
          goto LABEL_14;
        }
        sub_2263AD568((uint64_t)&v13);
      }
    }
    sub_2263AD568((uint64_t)v15);
  }
  else
  {
    v2 = *(_QWORD *)sub_2263DE374(&v11) & 0xFFFFFFFFFFFFFFF8;
    if (v2)
    {
      v3 = (const char *)(v2 + 16);
      if (*(char *)(v2 + 39) < 0)
        v3 = *(const char **)v3;
    }
    else
    {
      v3 = "";
    }
    NSLog(CFSTR("Warning: Invalid attribute %s\n"), v3);
  }
  v7 = 1;
LABEL_18:
  if ((BYTE8(v12) & 7) != 0)
  {
    v8 = (unsigned int *)(*((_QWORD *)&v12 + 1) & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stlxr(v9 - 2, v8));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_2263BDE64((uint64_t)&v12);
  if (*((_QWORD *)&v11 + 1))
    sub_2263DA640(*((uint64_t *)&v11 + 1));
  if ((v7 & 1) != 0)
    return 0;
  return v1;
}

void sub_2263EB250(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  sub_2263AD568((uint64_t)va1);
  sub_2263AD568((uint64_t)va2);
  sub_2263DC7CC((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_2263EB2C8(_DWORD *a1, double a2)
{
  unint64_t v3;
  const char *v4;
  pxrInternal__aapl__pxrReserved__::VtValue *Typeid;
  const std::type_info *v6;
  std::type_info *v7;
  char v8;
  unsigned int *v9;
  unsigned int v10;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[3];

  v16[2] = *MEMORY[0x24BDAC8D0];
  if (*a1 != 3)
    return 0.0;
  v12 = 0u;
  v13 = 0u;
  sub_2263DC6FC((uint64_t)a1, (uint64_t)&v12);
  if (sub_2263DA5B4((pxrInternal__aapl__pxrReserved__::UsdObject *)&v12))
  {
    v16[0] = 0;
    v16[1] = 0;
    if (pxrInternal__aapl__pxrReserved__::UsdAttribute::Get())
    {
      if (sub_2263BF6EC((pxrInternal__aapl__pxrReserved__::VtValue *)v16))
      {
        a2 = *(double *)sub_2263BF724((pxrInternal__aapl__pxrReserved__::VtValue *)v16);
LABEL_14:
        sub_2263AD568((uint64_t)v16);
        v8 = 0;
        goto LABEL_18;
      }
      Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)v16);
      if (pxrInternal__aapl__pxrReserved__::VtValue::_CanCast(Typeid, MEMORY[0x24BEDB780], v6))
      {
        v14 = 0;
        v15 = 0;
        v7 = sub_2263BF78C((pxrInternal__aapl__pxrReserved__::VtValue *)v16);
        sub_2263B0700(&v14, v7);
        if (v15)
        {
          a2 = *(double *)sub_2263BF724((pxrInternal__aapl__pxrReserved__::VtValue *)&v14);
          sub_2263AD568((uint64_t)&v14);
          goto LABEL_14;
        }
        sub_2263AD568((uint64_t)&v14);
      }
    }
    sub_2263AD568((uint64_t)v16);
  }
  else
  {
    v3 = *(_QWORD *)sub_2263DE374(&v12) & 0xFFFFFFFFFFFFFFF8;
    if (v3)
    {
      v4 = (const char *)(v3 + 16);
      if (*(char *)(v3 + 39) < 0)
        v4 = *(const char **)v4;
    }
    else
    {
      v4 = "";
    }
    NSLog(CFSTR("Warning: Invalid attribute %s\n"), v4);
  }
  v8 = 1;
LABEL_18:
  if ((BYTE8(v13) & 7) != 0)
  {
    v9 = (unsigned int *)(*((_QWORD *)&v13 + 1) & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_2263BDE64((uint64_t)&v13);
  if (*((_QWORD *)&v12 + 1))
    sub_2263DA640(*((uint64_t *)&v12 + 1));
  if ((v8 & 1) != 0)
    return 0.0;
  return a2;
}

void sub_2263EB47C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  sub_2263AD568((uint64_t)va1);
  sub_2263AD568(v3 - 56);
  sub_2263DC7CC((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_2263EB508(_DWORD *a1)
{
  double v1;
  unint64_t v2;
  const char *v3;
  pxrInternal__aapl__pxrReserved__::VtValue *Typeid;
  const std::type_info *v5;
  std::type_info *v6;
  char v7;
  unsigned int *v8;
  unsigned int v9;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[3];

  v15[2] = *MEMORY[0x24BDAC8D0];
  if (*a1 != 3)
    return 0.0;
  v11 = 0u;
  v12 = 0u;
  sub_2263DC6FC((uint64_t)a1, (uint64_t)&v11);
  if (sub_2263DA5B4((pxrInternal__aapl__pxrReserved__::UsdObject *)&v11))
  {
    v15[0] = 0;
    v15[1] = 0;
    if (pxrInternal__aapl__pxrReserved__::UsdAttribute::Get())
    {
      if (sub_2263BF880((pxrInternal__aapl__pxrReserved__::VtValue *)v15))
      {
        v1 = *(double *)sub_2263BF8B8((pxrInternal__aapl__pxrReserved__::VtValue *)v15);
LABEL_14:
        sub_2263AD568((uint64_t)v15);
        v7 = 0;
        goto LABEL_18;
      }
      Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)v15);
      if (pxrInternal__aapl__pxrReserved__::VtValue::_CanCast(Typeid, &stru_24EDD6EC8, v5))
      {
        v13 = 0;
        v14 = 0;
        v6 = sub_2263BF920((pxrInternal__aapl__pxrReserved__::VtValue *)v15);
        sub_2263B0700(&v13, v6);
        if (v14)
        {
          v1 = *(double *)sub_2263BF8B8((pxrInternal__aapl__pxrReserved__::VtValue *)&v13);
          sub_2263AD568((uint64_t)&v13);
          goto LABEL_14;
        }
        sub_2263AD568((uint64_t)&v13);
      }
    }
    sub_2263AD568((uint64_t)v15);
  }
  else
  {
    v2 = *(_QWORD *)sub_2263DE374(&v11) & 0xFFFFFFFFFFFFFFF8;
    if (v2)
    {
      v3 = (const char *)(v2 + 16);
      if (*(char *)(v2 + 39) < 0)
        v3 = *(const char **)v3;
    }
    else
    {
      v3 = "";
    }
    NSLog(CFSTR("Warning: Invalid attribute %s\n"), v3);
  }
  v7 = 1;
LABEL_18:
  if ((BYTE8(v12) & 7) != 0)
  {
    v8 = (unsigned int *)(*((_QWORD *)&v12 + 1) & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stlxr(v9 - 2, v8));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_2263BDE64((uint64_t)&v12);
  if (*((_QWORD *)&v11 + 1))
    sub_2263DA640(*((uint64_t *)&v11 + 1));
  if ((v7 & 1) != 0)
    return 0.0;
  return v1;
}

void sub_2263EB6C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  sub_2263AD568((uint64_t)va1);
  sub_2263AD568(v3 - 56);
  sub_2263DC7CC((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_2263EB774(_DWORD *a1)
{
  double v1;
  unint64_t v2;
  const char *v3;
  pxrInternal__aapl__pxrReserved__::VtValue *Typeid;
  const std::type_info *v5;
  std::type_info *v6;
  char v7;
  unsigned int *v8;
  unsigned int v9;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[3];

  v15[2] = *MEMORY[0x24BDAC8D0];
  if (*a1 != 3)
    return 0.0;
  v11 = 0u;
  v12 = 0u;
  sub_2263DC6FC((uint64_t)a1, (uint64_t)&v11);
  if (sub_2263DA5B4((pxrInternal__aapl__pxrReserved__::UsdObject *)&v11))
  {
    v15[0] = 0;
    v15[1] = 0;
    if (pxrInternal__aapl__pxrReserved__::UsdAttribute::Get())
    {
      if (sub_2263BF9E8((pxrInternal__aapl__pxrReserved__::VtValue *)v15))
      {
        v1 = *(double *)sub_2263BFA20((pxrInternal__aapl__pxrReserved__::VtValue *)v15);
LABEL_14:
        sub_2263AD568((uint64_t)v15);
        v7 = 0;
        goto LABEL_18;
      }
      Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)v15);
      if (pxrInternal__aapl__pxrReserved__::VtValue::_CanCast(Typeid, &stru_24EDD6ED8, v5))
      {
        v13 = 0;
        v14 = 0;
        v6 = sub_2263BFA88((pxrInternal__aapl__pxrReserved__::VtValue *)v15);
        sub_2263B0700(&v13, v6);
        if (v14)
        {
          v1 = *(double *)sub_2263BFA20((pxrInternal__aapl__pxrReserved__::VtValue *)&v13);
          sub_2263AD568((uint64_t)&v13);
          goto LABEL_14;
        }
        sub_2263AD568((uint64_t)&v13);
      }
    }
    sub_2263AD568((uint64_t)v15);
  }
  else
  {
    v2 = *(_QWORD *)sub_2263DE374(&v11) & 0xFFFFFFFFFFFFFFF8;
    if (v2)
    {
      v3 = (const char *)(v2 + 16);
      if (*(char *)(v2 + 39) < 0)
        v3 = *(const char **)v3;
    }
    else
    {
      v3 = "";
    }
    NSLog(CFSTR("Warning: Invalid attribute %s\n"), v3);
  }
  v7 = 1;
LABEL_18:
  if ((BYTE8(v12) & 7) != 0)
  {
    v8 = (unsigned int *)(*((_QWORD *)&v12 + 1) & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stlxr(v9 - 2, v8));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_2263BDE64((uint64_t)&v12);
  if (*((_QWORD *)&v11 + 1))
    sub_2263DA640(*((uint64_t *)&v11 + 1));
  if ((v7 & 1) != 0)
    return 0.0;
  return v1;
}

void sub_2263EB948(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  sub_2263AD568((uint64_t)va1);
  sub_2263AD568((uint64_t)va2);
  sub_2263DC7CC((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_2263EBA0C(_DWORD *a1)
{
  double v1;
  unint64_t v2;
  const char *v3;
  pxrInternal__aapl__pxrReserved__::VtValue *Typeid;
  const std::type_info *v5;
  std::type_info *v6;
  char v7;
  unsigned int *v8;
  unsigned int v9;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[3];

  v15[2] = *MEMORY[0x24BDAC8D0];
  if (*a1 != 3)
    return 0.0;
  v11 = 0u;
  v12 = 0u;
  sub_2263DC6FC((uint64_t)a1, (uint64_t)&v11);
  if (sub_2263DA5B4((pxrInternal__aapl__pxrReserved__::UsdObject *)&v11))
  {
    v15[0] = 0;
    v15[1] = 0;
    if (pxrInternal__aapl__pxrReserved__::UsdAttribute::Get())
    {
      if (sub_2263BFB50((pxrInternal__aapl__pxrReserved__::VtValue *)v15))
      {
        v1 = *(double *)sub_2263BFB88((pxrInternal__aapl__pxrReserved__::VtValue *)v15);
LABEL_14:
        sub_2263AD568((uint64_t)v15);
        v7 = 0;
        goto LABEL_18;
      }
      Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)v15);
      if (pxrInternal__aapl__pxrReserved__::VtValue::_CanCast(Typeid, &stru_24EDD6EE8, v5))
      {
        v13 = 0;
        v14 = 0;
        v6 = sub_2263BFBF0((pxrInternal__aapl__pxrReserved__::VtValue *)v15);
        sub_2263B0700(&v13, v6);
        if (v14)
        {
          v1 = *(double *)sub_2263BFB88((pxrInternal__aapl__pxrReserved__::VtValue *)&v13);
          sub_2263AD568((uint64_t)&v13);
          goto LABEL_14;
        }
        sub_2263AD568((uint64_t)&v13);
      }
    }
    sub_2263AD568((uint64_t)v15);
  }
  else
  {
    v2 = *(_QWORD *)sub_2263DE374(&v11) & 0xFFFFFFFFFFFFFFF8;
    if (v2)
    {
      v3 = (const char *)(v2 + 16);
      if (*(char *)(v2 + 39) < 0)
        v3 = *(const char **)v3;
    }
    else
    {
      v3 = "";
    }
    NSLog(CFSTR("Warning: Invalid attribute %s\n"), v3);
  }
  v7 = 1;
LABEL_18:
  if ((BYTE8(v12) & 7) != 0)
  {
    v8 = (unsigned int *)(*((_QWORD *)&v12 + 1) & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stlxr(v9 - 2, v8));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_2263BDE64((uint64_t)&v12);
  if (*((_QWORD *)&v11 + 1))
    sub_2263DA640(*((uint64_t *)&v11 + 1));
  if ((v7 & 1) != 0)
    return 0.0;
  return v1;
}

void sub_2263EBBE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  sub_2263AD568((uint64_t)va1);
  sub_2263AD568((uint64_t)va2);
  sub_2263DC7CC((uint64_t)va);
  _Unwind_Resume(a1);
}

_DWORD *sub_2263EBD04@<X0>(_DWORD *result@<X0>, _OWORD *a2@<X8>)
{
  _OWORD *v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  unint64_t v8;
  const char *v9;
  pxrInternal__aapl__pxrReserved__::VtValue *Typeid;
  const std::type_info *v11;
  std::type_info *v12;
  _OWORD *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  char v18;
  unsigned int *v19;
  unsigned int v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[3];

  v25[2] = *MEMORY[0x24BDAC8D0];
  if (*result != 3)
  {
LABEL_24:
    a2[6] = 0u;
    a2[7] = 0u;
    a2[4] = 0u;
    a2[5] = 0u;
    a2[2] = 0u;
    a2[3] = 0u;
    *a2 = 0u;
    a2[1] = 0u;
    return result;
  }
  v21 = 0u;
  v22 = 0u;
  sub_2263DC6FC((uint64_t)result, (uint64_t)&v21);
  if (sub_2263DA5B4((pxrInternal__aapl__pxrReserved__::UsdObject *)&v21))
  {
    v25[0] = 0;
    v25[1] = 0;
    if (pxrInternal__aapl__pxrReserved__::UsdAttribute::Get())
    {
      if (sub_2263BF584((pxrInternal__aapl__pxrReserved__::VtValue *)v25))
      {
        v3 = (_OWORD *)sub_2263BF5BC((pxrInternal__aapl__pxrReserved__::VtValue *)v25);
        v4 = v3[5];
        a2[4] = v3[4];
        a2[5] = v4;
        v5 = v3[7];
        a2[6] = v3[6];
        a2[7] = v5;
        v6 = v3[1];
        *a2 = *v3;
        a2[1] = v6;
        v7 = v3[3];
        a2[2] = v3[2];
        a2[3] = v7;
LABEL_14:
        sub_2263AD568((uint64_t)v25);
        v18 = 0;
        goto LABEL_18;
      }
      Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)v25);
      if (pxrInternal__aapl__pxrReserved__::VtValue::_CanCast(Typeid, &stru_24EDD6EB8, v11))
      {
        v23 = 0;
        v24 = 0;
        v12 = sub_2263BF624((pxrInternal__aapl__pxrReserved__::VtValue *)v25);
        sub_2263B0700(&v23, v12);
        if (v24)
        {
          v13 = (_OWORD *)sub_2263BF5BC((pxrInternal__aapl__pxrReserved__::VtValue *)&v23);
          v14 = v13[5];
          a2[4] = v13[4];
          a2[5] = v14;
          v15 = v13[7];
          a2[6] = v13[6];
          a2[7] = v15;
          v16 = v13[1];
          *a2 = *v13;
          a2[1] = v16;
          v17 = v13[3];
          a2[2] = v13[2];
          a2[3] = v17;
          sub_2263AD568((uint64_t)&v23);
          goto LABEL_14;
        }
        sub_2263AD568((uint64_t)&v23);
      }
    }
    sub_2263AD568((uint64_t)v25);
  }
  else
  {
    v8 = *(_QWORD *)sub_2263DE374(&v21) & 0xFFFFFFFFFFFFFFF8;
    if (v8)
    {
      v9 = (const char *)(v8 + 16);
      if (*(char *)(v8 + 39) < 0)
        v9 = *(const char **)v9;
    }
    else
    {
      v9 = "";
    }
    NSLog(CFSTR("Warning: Invalid attribute %s\n"), v9);
  }
  v18 = 1;
LABEL_18:
  if ((BYTE8(v22) & 7) != 0)
  {
    v19 = (unsigned int *)(*((_QWORD *)&v22 + 1) & 0xFFFFFFFFFFFFFFF8);
    do
      v20 = __ldxr(v19);
    while (__stlxr(v20 - 2, v19));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_2263BDE64((uint64_t)&v22);
  result = (_DWORD *)*((_QWORD *)&v21 + 1);
  if (*((_QWORD *)&v21 + 1))
    result = (_DWORD *)sub_2263DA640(*((uint64_t *)&v21 + 1));
  if ((v18 & 1) != 0)
    goto LABEL_24;
  return result;
}

void sub_2263EBF08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  sub_2263AD568((uint64_t)va1);
  sub_2263AD568((uint64_t)va2);
  sub_2263DC7CC((uint64_t)va);
  _Unwind_Resume(a1);
}

float sub_2263EBFFC(_DWORD *a1, float a2)
{
  unint64_t v3;
  const char *v4;
  pxrInternal__aapl__pxrReserved__::VtValue *Typeid;
  const std::type_info *v6;
  std::type_info *v7;
  char v8;
  unsigned int *v9;
  unsigned int v10;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[3];

  v16[2] = *MEMORY[0x24BDAC8D0];
  if (*a1 != 3)
    return 0.0;
  v12 = 0u;
  v13 = 0u;
  sub_2263DC6FC((uint64_t)a1, (uint64_t)&v12);
  if (sub_2263DA5B4((pxrInternal__aapl__pxrReserved__::UsdObject *)&v12))
  {
    v16[0] = 0;
    v16[1] = 0;
    if (pxrInternal__aapl__pxrReserved__::UsdAttribute::Get())
    {
      if (sub_2263BEFF8((pxrInternal__aapl__pxrReserved__::VtValue *)v16))
      {
        a2 = *(float *)sub_2263BF030((pxrInternal__aapl__pxrReserved__::VtValue *)v16);
LABEL_14:
        sub_2263AD568((uint64_t)v16);
        v8 = 0;
        goto LABEL_18;
      }
      Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)v16);
      if (pxrInternal__aapl__pxrReserved__::VtValue::_CanCast(Typeid, MEMORY[0x24BEDB788], v6))
      {
        v14 = 0;
        v15 = 0;
        v7 = sub_2263BF098((pxrInternal__aapl__pxrReserved__::VtValue *)v16);
        sub_2263B0700(&v14, v7);
        if (v15)
        {
          a2 = *(float *)sub_2263BF030((pxrInternal__aapl__pxrReserved__::VtValue *)&v14);
          sub_2263AD568((uint64_t)&v14);
          goto LABEL_14;
        }
        sub_2263AD568((uint64_t)&v14);
      }
    }
    sub_2263AD568((uint64_t)v16);
  }
  else
  {
    v3 = *(_QWORD *)sub_2263DE374(&v12) & 0xFFFFFFFFFFFFFFF8;
    if (v3)
    {
      v4 = (const char *)(v3 + 16);
      if (*(char *)(v3 + 39) < 0)
        v4 = *(const char **)v4;
    }
    else
    {
      v4 = "";
    }
    NSLog(CFSTR("Warning: Invalid attribute %s\n"), v4);
  }
  v8 = 1;
LABEL_18:
  if ((BYTE8(v13) & 7) != 0)
  {
    v9 = (unsigned int *)(*((_QWORD *)&v13 + 1) & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_2263BDE64((uint64_t)&v13);
  if (*((_QWORD *)&v12 + 1))
    sub_2263DA640(*((uint64_t *)&v12 + 1));
  if ((v8 & 1) != 0)
    return 0.0;
  return a2;
}

void sub_2263EC1B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  sub_2263AD568((uint64_t)va1);
  sub_2263AD568(v3 - 56);
  sub_2263DC7CC((uint64_t)va);
  _Unwind_Resume(a1);
}

float sub_2263EC23C(_DWORD *a1)
{
  float v1;
  unint64_t v2;
  const char *v3;
  pxrInternal__aapl__pxrReserved__::VtValue *Typeid;
  const std::type_info *v5;
  std::type_info *v6;
  char v7;
  unsigned int *v8;
  unsigned int v9;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[3];

  v15[2] = *MEMORY[0x24BDAC8D0];
  if (*a1 != 3)
    return 0.0;
  v11 = 0u;
  v12 = 0u;
  sub_2263DC6FC((uint64_t)a1, (uint64_t)&v11);
  if (sub_2263DA5B4((pxrInternal__aapl__pxrReserved__::UsdObject *)&v11))
  {
    v15[0] = 0;
    v15[1] = 0;
    if (pxrInternal__aapl__pxrReserved__::UsdAttribute::Get())
    {
      if (sub_2263BF18C((pxrInternal__aapl__pxrReserved__::VtValue *)v15))
      {
        v1 = *(float *)sub_2263BF1C4((pxrInternal__aapl__pxrReserved__::VtValue *)v15);
LABEL_14:
        sub_2263AD568((uint64_t)v15);
        v7 = 0;
        goto LABEL_18;
      }
      Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)v15);
      if (pxrInternal__aapl__pxrReserved__::VtValue::_CanCast(Typeid, &stru_24EDD6EA8, v5))
      {
        v13 = 0;
        v14 = 0;
        v6 = sub_2263BF22C((pxrInternal__aapl__pxrReserved__::VtValue *)v15);
        sub_2263B0700(&v13, v6);
        if (v14)
        {
          v1 = *(float *)sub_2263BF1C4((pxrInternal__aapl__pxrReserved__::VtValue *)&v13);
          sub_2263AD568((uint64_t)&v13);
          goto LABEL_14;
        }
        sub_2263AD568((uint64_t)&v13);
      }
    }
    sub_2263AD568((uint64_t)v15);
  }
  else
  {
    v2 = *(_QWORD *)sub_2263DE374(&v11) & 0xFFFFFFFFFFFFFFF8;
    if (v2)
    {
      v3 = (const char *)(v2 + 16);
      if (*(char *)(v2 + 39) < 0)
        v3 = *(const char **)v3;
    }
    else
    {
      v3 = "";
    }
    NSLog(CFSTR("Warning: Invalid attribute %s\n"), v3);
  }
  v7 = 1;
LABEL_18:
  if ((BYTE8(v12) & 7) != 0)
  {
    v8 = (unsigned int *)(*((_QWORD *)&v12 + 1) & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stlxr(v9 - 2, v8));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_2263BDE64((uint64_t)&v12);
  if (*((_QWORD *)&v11 + 1))
    sub_2263DA640(*((uint64_t *)&v11 + 1));
  if ((v7 & 1) != 0)
    return 0.0;
  return v1;
}

void sub_2263EC3F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  sub_2263AD568((uint64_t)va1);
  sub_2263AD568(v3 - 56);
  sub_2263DC7CC((uint64_t)va);
  _Unwind_Resume(a1);
}

float sub_2263EC49C(_DWORD *a1)
{
  float v1;
  unint64_t v2;
  const char *v3;
  pxrInternal__aapl__pxrReserved__::VtValue *Typeid;
  const std::type_info *v5;
  std::type_info *v6;
  char v7;
  unsigned int *v8;
  unsigned int v9;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[3];

  v15[2] = *MEMORY[0x24BDAC8D0];
  if (*a1 != 3)
    return 0.0;
  v11 = 0u;
  v12 = 0u;
  sub_2263DC6FC((uint64_t)a1, (uint64_t)&v11);
  if (sub_2263DA5B4((pxrInternal__aapl__pxrReserved__::UsdObject *)&v11))
  {
    v15[0] = 0;
    v15[1] = 0;
    if (pxrInternal__aapl__pxrReserved__::UsdAttribute::Get())
    {
      if (sub_2263BF2B4((pxrInternal__aapl__pxrReserved__::VtValue *)v15))
      {
        v1 = *(float *)sub_2263BF2EC((pxrInternal__aapl__pxrReserved__::VtValue *)v15);
LABEL_14:
        sub_2263AD568((uint64_t)v15);
        v7 = 0;
        goto LABEL_18;
      }
      Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)v15);
      if (pxrInternal__aapl__pxrReserved__::VtValue::_CanCast(Typeid, &stru_24EDD69A8, v5))
      {
        v13 = 0;
        v14 = 0;
        v6 = sub_2263BF354((pxrInternal__aapl__pxrReserved__::VtValue *)v15);
        sub_2263B0700(&v13, v6);
        if (v14)
        {
          v1 = *(float *)sub_2263BF2EC((pxrInternal__aapl__pxrReserved__::VtValue *)&v13);
          sub_2263AD568((uint64_t)&v13);
          goto LABEL_14;
        }
        sub_2263AD568((uint64_t)&v13);
      }
    }
    sub_2263AD568((uint64_t)v15);
  }
  else
  {
    v2 = *(_QWORD *)sub_2263DE374(&v11) & 0xFFFFFFFFFFFFFFF8;
    if (v2)
    {
      v3 = (const char *)(v2 + 16);
      if (*(char *)(v2 + 39) < 0)
        v3 = *(const char **)v3;
    }
    else
    {
      v3 = "";
    }
    NSLog(CFSTR("Warning: Invalid attribute %s\n"), v3);
  }
  v7 = 1;
LABEL_18:
  if ((BYTE8(v12) & 7) != 0)
  {
    v8 = (unsigned int *)(*((_QWORD *)&v12 + 1) & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stlxr(v9 - 2, v8));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_2263BDE64((uint64_t)&v12);
  if (*((_QWORD *)&v11 + 1))
    sub_2263DA640(*((uint64_t *)&v11 + 1));
  if ((v7 & 1) != 0)
    return 0.0;
  return v1;
}

void sub_2263EC670(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  sub_2263AD568((uint64_t)va1);
  sub_2263AD568((uint64_t)va2);
  sub_2263DC7CC((uint64_t)va);
  _Unwind_Resume(a1);
}

float sub_2263EC71C(_DWORD *a1)
{
  float v1;
  unint64_t v2;
  const char *v3;
  pxrInternal__aapl__pxrReserved__::VtValue *Typeid;
  const std::type_info *v5;
  std::type_info *v6;
  char v7;
  unsigned int *v8;
  unsigned int v9;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[3];

  v15[2] = *MEMORY[0x24BDAC8D0];
  if (*a1 != 3)
    return 0.0;
  v11 = 0u;
  v12 = 0u;
  sub_2263DC6FC((uint64_t)a1, (uint64_t)&v11);
  if (sub_2263DA5B4((pxrInternal__aapl__pxrReserved__::UsdObject *)&v11))
  {
    v15[0] = 0;
    v15[1] = 0;
    if (pxrInternal__aapl__pxrReserved__::UsdAttribute::Get())
    {
      if (sub_2263BF41C((pxrInternal__aapl__pxrReserved__::VtValue *)v15))
      {
        v1 = *(float *)sub_2263BF454((pxrInternal__aapl__pxrReserved__::VtValue *)v15);
LABEL_14:
        sub_2263AD568((uint64_t)v15);
        v7 = 0;
        goto LABEL_18;
      }
      Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)v15);
      if (pxrInternal__aapl__pxrReserved__::VtValue::_CanCast(Typeid, &stru_24EDD6AA0, v5))
      {
        v13 = 0;
        v14 = 0;
        v6 = sub_2263BF4BC((pxrInternal__aapl__pxrReserved__::VtValue *)v15);
        sub_2263B0700(&v13, v6);
        if (v14)
        {
          v1 = *(float *)sub_2263BF454((pxrInternal__aapl__pxrReserved__::VtValue *)&v13);
          sub_2263AD568((uint64_t)&v13);
          goto LABEL_14;
        }
        sub_2263AD568((uint64_t)&v13);
      }
    }
    sub_2263AD568((uint64_t)v15);
  }
  else
  {
    v2 = *(_QWORD *)sub_2263DE374(&v11) & 0xFFFFFFFFFFFFFFF8;
    if (v2)
    {
      v3 = (const char *)(v2 + 16);
      if (*(char *)(v2 + 39) < 0)
        v3 = *(const char **)v3;
    }
    else
    {
      v3 = "";
    }
    NSLog(CFSTR("Warning: Invalid attribute %s\n"), v3);
  }
  v7 = 1;
LABEL_18:
  if ((BYTE8(v12) & 7) != 0)
  {
    v8 = (unsigned int *)(*((_QWORD *)&v12 + 1) & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stlxr(v9 - 2, v8));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_2263BDE64((uint64_t)&v12);
  if (*((_QWORD *)&v11 + 1))
    sub_2263DA640(*((uint64_t *)&v11 + 1));
  if ((v7 & 1) != 0)
    return 0.0;
  return v1;
}

void sub_2263EC8F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  sub_2263AD568((uint64_t)va1);
  sub_2263AD568((uint64_t)va2);
  sub_2263DC7CC((uint64_t)va);
  _Unwind_Resume(a1);
}

float sub_2263EC9A8(_DWORD *a1)
{
  float v1;
  unint64_t v2;
  const char *v3;
  pxrInternal__aapl__pxrReserved__::VtValue *Typeid;
  const std::type_info *v5;
  std::type_info *v6;
  unsigned int *v7;
  unsigned int v8;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[3];

  v14[2] = *MEMORY[0x24BDAC8D0];
  if (*a1 == 3)
  {
    v10 = 0u;
    v11 = 0u;
    sub_2263DC6FC((uint64_t)a1, (uint64_t)&v10);
    if (sub_2263DA5B4((pxrInternal__aapl__pxrReserved__::UsdObject *)&v10))
    {
      v14[0] = 0;
      v14[1] = 0;
      if (pxrInternal__aapl__pxrReserved__::UsdAttribute::Get())
      {
        if (sub_2263BFCB8((pxrInternal__aapl__pxrReserved__::VtValue *)v14))
        {
          v1 = *(float *)sub_2263BFCF0((pxrInternal__aapl__pxrReserved__::VtValue *)v14);
        }
        else
        {
          Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)v14);
          if (pxrInternal__aapl__pxrReserved__::VtValue::_CanCast(Typeid, &stru_24EDD6EF8, v5))
          {
            v12 = 0;
            v13 = 0;
            v6 = sub_2263BFD58((pxrInternal__aapl__pxrReserved__::VtValue *)v14);
            sub_2263B0700(&v12, v6);
            if (v13)
              v1 = *(float *)sub_2263BFCF0((pxrInternal__aapl__pxrReserved__::VtValue *)&v12);
            sub_2263AD568((uint64_t)&v12);
          }
        }
      }
      sub_2263AD568((uint64_t)v14);
    }
    else
    {
      v2 = *(_QWORD *)sub_2263DE374(&v10) & 0xFFFFFFFFFFFFFFF8;
      if (v2)
      {
        v3 = (const char *)(v2 + 16);
        if (*(char *)(v2 + 39) < 0)
          v3 = *(const char **)v3;
      }
      else
      {
        v3 = "";
      }
      NSLog(CFSTR("Warning: Invalid attribute %s\n"), v3);
    }
    if ((BYTE8(v11) & 7) != 0)
    {
      v7 = (unsigned int *)(*((_QWORD *)&v11 + 1) & 0xFFFFFFFFFFFFFFF8);
      do
        v8 = __ldxr(v7);
      while (__stlxr(v8 - 2, v7));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    sub_2263BDE64((uint64_t)&v11);
    if (*((_QWORD *)&v10 + 1))
      sub_2263DA640(*((uint64_t *)&v10 + 1));
  }
  return v1;
}

void sub_2263ECB70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  sub_2263AD568((uint64_t)va1);
  sub_2263AD568((uint64_t)va2);
  sub_2263DC7CC((uint64_t)va);
  _Unwind_Resume(a1);
}

unint64_t sub_2263ECC0C(_DWORD *a1, void *a2, unint64_t a3)
{
  unint64_t NumElements;
  unint64_t v6;
  uint64_t v7;
  pxrInternal__aapl__pxrReserved__::VtValue *Typeid;
  const std::type_info *v9;
  uint64_t v10;
  _QWORD v12[2];
  _QWORD v13[2];
  _QWORD v14[3];

  v14[2] = *MEMORY[0x24BDAC8D0];
  sub_2263E6BC8(a1, v14);
  NumElements = pxrInternal__aapl__pxrReserved__::VtValue::_GetNumElements((pxrInternal__aapl__pxrReserved__::VtValue *)v14);
  v6 = NumElements;
  if (NumElements < a3)
    a3 = NumElements;
  if (v14[1])
  {
    if (sub_2263C01A4((pxrInternal__aapl__pxrReserved__::VtValue *)v14))
    {
      v7 = sub_2263C01DC((pxrInternal__aapl__pxrReserved__::VtValue *)v14);
      memcpy(a2, *(const void **)(v7 + 32), 4 * a3);
    }
    else
    {
      Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)v14);
      if (pxrInternal__aapl__pxrReserved__::VtValue::_CanCast(Typeid, &stru_24EDD6F18, v9))
      {
        v13[0] = 0;
        v13[1] = 0;
        sub_2263F434C(v14, (pxrInternal__aapl__pxrReserved__::VtValue *)v12);
        sub_2263AD3FC(v13, v12);
        sub_2263AD568((uint64_t)v12);
        v10 = sub_2263C01DC((pxrInternal__aapl__pxrReserved__::VtValue *)v13);
        memcpy(a2, *(const void **)(v10 + 32), 4 * a3);
        sub_2263AD568((uint64_t)v13);
      }
      else
      {
        v6 = 0;
      }
    }
  }
  sub_2263AD568((uint64_t)v14);
  return v6;
}

void sub_2263ECD24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v5;
  va_list va;
  uint64_t v7;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  sub_2263AD568((uint64_t)va);
  sub_2263AD568((uint64_t)va1);
  _Unwind_Resume(a1);
}

unint64_t sub_2263ECD90(_DWORD *a1, void *a2, unint64_t a3)
{
  unint64_t NumElements;
  unint64_t v6;
  uint64_t v7;
  pxrInternal__aapl__pxrReserved__::VtValue *Typeid;
  const std::type_info *v9;
  uint64_t v10;
  _QWORD v12[2];
  _QWORD v13[2];
  _QWORD v14[3];

  v14[2] = *MEMORY[0x24BDAC8D0];
  sub_2263E6BC8(a1, v14);
  NumElements = pxrInternal__aapl__pxrReserved__::VtValue::_GetNumElements((pxrInternal__aapl__pxrReserved__::VtValue *)v14);
  v6 = NumElements;
  if (NumElements < a3)
    a3 = NumElements;
  if (v14[1])
  {
    if (sub_2263C03AC((pxrInternal__aapl__pxrReserved__::VtValue *)v14))
    {
      v7 = sub_2263C03E4((pxrInternal__aapl__pxrReserved__::VtValue *)v14);
      memcpy(a2, *(const void **)(v7 + 32), 4 * a3);
    }
    else
    {
      Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)v14);
      if (pxrInternal__aapl__pxrReserved__::VtValue::_CanCast(Typeid, &stru_24EDD6F30, v9))
      {
        v13[0] = 0;
        v13[1] = 0;
        sub_2263F4394(v14, (pxrInternal__aapl__pxrReserved__::VtValue *)v12);
        sub_2263AD3FC(v13, v12);
        sub_2263AD568((uint64_t)v12);
        v10 = sub_2263C03E4((pxrInternal__aapl__pxrReserved__::VtValue *)v13);
        memcpy(a2, *(const void **)(v10 + 32), 4 * a3);
        sub_2263AD568((uint64_t)v13);
      }
      else
      {
        v6 = 0;
      }
    }
  }
  sub_2263AD568((uint64_t)v14);
  return v6;
}

void sub_2263ECEA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v5;
  va_list va;
  uint64_t v7;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  sub_2263AD568((uint64_t)va);
  sub_2263AD568((uint64_t)va1);
  _Unwind_Resume(a1);
}

unint64_t sub_2263ECF14(_DWORD *a1, void *a2, unint64_t a3)
{
  unint64_t NumElements;
  unint64_t v6;
  uint64_t v7;
  pxrInternal__aapl__pxrReserved__::VtValue *Typeid;
  const std::type_info *v9;
  uint64_t v10;
  _QWORD v12[2];
  _QWORD v13[2];
  _QWORD v14[3];

  v14[2] = *MEMORY[0x24BDAC8D0];
  sub_2263E6BC8(a1, v14);
  NumElements = pxrInternal__aapl__pxrReserved__::VtValue::_GetNumElements((pxrInternal__aapl__pxrReserved__::VtValue *)v14);
  v6 = NumElements;
  if (NumElements < a3)
    a3 = NumElements;
  if (v14[1])
  {
    if (sub_2263C066C((pxrInternal__aapl__pxrReserved__::VtValue *)v14))
    {
      v7 = sub_2263C06A4((pxrInternal__aapl__pxrReserved__::VtValue *)v14);
      memcpy(a2, *(const void **)(v7 + 32), 16 * a3);
    }
    else
    {
      Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)v14);
      if (pxrInternal__aapl__pxrReserved__::VtValue::_CanCast(Typeid, &stru_24EDD6F48, v9))
      {
        v13[0] = 0;
        v13[1] = 0;
        sub_2263F43DC(v14, (pxrInternal__aapl__pxrReserved__::VtValue *)v12);
        sub_2263AD3FC(v13, v12);
        sub_2263AD568((uint64_t)v12);
        v10 = sub_2263C06A4((pxrInternal__aapl__pxrReserved__::VtValue *)v13);
        memcpy(a2, *(const void **)(v10 + 32), 16 * a3);
        sub_2263AD568((uint64_t)v13);
      }
      else
      {
        v6 = 0;
      }
    }
  }
  sub_2263AD568((uint64_t)v14);
  return v6;
}

void sub_2263ED02C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v5;
  va_list va;
  uint64_t v7;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  sub_2263AD568((uint64_t)va);
  sub_2263AD568((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_2263ED258(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2263AD568((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2263ED404(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2263AD568((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2263ED5D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2263AD568((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2263ED7D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2263AD568((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2263ED980(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;

  sub_2263B5610((uint64_t)&a9);
  *(_QWORD *)(v13 - 40) = &a10;
  sub_2263BE380((void ***)(v13 - 40));
  sub_2263E9184((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_2263EDB70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void **v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  uint64_t v13;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, void **);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  sub_2263C8DF4((void ***)va);
  va_copy((va_list)v4, va1);
  sub_2263BE380((void ***)va);
  sub_2263E9184((uint64_t)va2);
  _Unwind_Resume(a1);
}

void sub_2263EDE40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void **a19)
{
  uint64_t v19;

  sub_2263D73CC((uint64_t)&a9);
  sub_2263D736C((uint64_t)&a19);
  a19 = (void **)(v19 - 72);
  sub_2263BE380(&a19);
  sub_2263E9184(v19 - 48);
  _Unwind_Resume(a1);
}

uint64_t sub_2263EDEE0(uint64_t *a1)
{
  uint64_t *v2;
  uint64_t v3;
  int v4;
  uint64_t result;
  BOOL v6;
  char *v7;

  v3 = a1[1];
  v2 = a1 + 1;
  if (!v3
    || ((v4 = *(unsigned __int8 *)(sub_2263DAAA4(v2) + 14), result = *a1, v4) ? (v6 = result == 0) : (v6 = 1), v6))
  {
    v7 = j__strrchr("/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/usd/pxr/base/tf/weakPtrFacade.h", 47);
    sub_2263AE528((unint64_t)"/AppleInternal/Library/BuildRoots/ae269ea5-5122-11ef-a621-12147c76fa9d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/usd/pxr/base/tf/weakPtrFacade.h", (uint64_t)v7, 0x2Fu);
    return pxrInternal__aapl__pxrReserved__::Tf_PostNullSmartPtrDereferenceFatalError();
  }
  return result;
}

unint64_t sub_2263EDF9C(_DWORD *a1, void *a2, unint64_t a3)
{
  unint64_t NumElements;
  unint64_t v6;
  uint64_t v7;
  pxrInternal__aapl__pxrReserved__::VtValue *Typeid;
  const std::type_info *v9;
  uint64_t v10;
  _QWORD v12[2];
  _QWORD v13[2];
  _QWORD v14[3];

  v14[2] = *MEMORY[0x24BDAC8D0];
  sub_2263E6BC8(a1, v14);
  NumElements = pxrInternal__aapl__pxrReserved__::VtValue::_GetNumElements((pxrInternal__aapl__pxrReserved__::VtValue *)v14);
  v6 = NumElements;
  if (NumElements < a3)
    a3 = NumElements;
  if (v14[1])
  {
    if (sub_2263C0DDC((pxrInternal__aapl__pxrReserved__::VtValue *)v14))
    {
      v7 = sub_2263C0E14((pxrInternal__aapl__pxrReserved__::VtValue *)v14);
      memcpy(a2, *(const void **)(v7 + 32), 4 * a3);
    }
    else
    {
      Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)v14);
      if (pxrInternal__aapl__pxrReserved__::VtValue::_CanCast(Typeid, &stru_24EDD6FA8, v9))
      {
        v13[0] = 0;
        v13[1] = 0;
        sub_2263F4424(v14, (pxrInternal__aapl__pxrReserved__::VtValue *)v12);
        sub_2263AD3FC(v13, v12);
        sub_2263AD568((uint64_t)v12);
        v10 = sub_2263C0E14((pxrInternal__aapl__pxrReserved__::VtValue *)v13);
        memcpy(a2, *(const void **)(v10 + 32), 4 * a3);
        sub_2263AD568((uint64_t)v13);
      }
      else
      {
        v6 = 0;
      }
    }
  }
  sub_2263AD568((uint64_t)v14);
  return v6;
}

void sub_2263EE0B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v5;
  va_list va;
  uint64_t v7;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  sub_2263AD568((uint64_t)va);
  sub_2263AD568((uint64_t)va1);
  _Unwind_Resume(a1);
}

unint64_t sub_2263EE120(_DWORD *a1, void *a2, unint64_t a3)
{
  unint64_t NumElements;
  unint64_t v6;
  uint64_t v7;
  pxrInternal__aapl__pxrReserved__::VtValue *Typeid;
  const std::type_info *v9;
  uint64_t v10;
  _QWORD v12[2];
  _QWORD v13[2];
  _QWORD v14[3];

  v14[2] = *MEMORY[0x24BDAC8D0];
  sub_2263E6BC8(a1, v14);
  NumElements = pxrInternal__aapl__pxrReserved__::VtValue::_GetNumElements((pxrInternal__aapl__pxrReserved__::VtValue *)v14);
  v6 = NumElements;
  if (NumElements < a3)
    a3 = NumElements;
  if (v14[1])
  {
    if (sub_2263B1D2C((pxrInternal__aapl__pxrReserved__::VtValue *)v14))
    {
      v7 = sub_2263AF4A8((pxrInternal__aapl__pxrReserved__::VtValue *)v14);
      memcpy(a2, *(const void **)(v7 + 32), 8 * a3);
    }
    else
    {
      Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)v14);
      if (pxrInternal__aapl__pxrReserved__::VtValue::_CanCast(Typeid, &stru_24EDD69B8, v9))
      {
        v13[0] = 0;
        v13[1] = 0;
        sub_2263F446C(v14, (pxrInternal__aapl__pxrReserved__::VtValue *)v12);
        sub_2263AD3FC(v13, v12);
        sub_2263AD568((uint64_t)v12);
        v10 = sub_2263AF4A8((pxrInternal__aapl__pxrReserved__::VtValue *)v13);
        memcpy(a2, *(const void **)(v10 + 32), 8 * a3);
        sub_2263AD568((uint64_t)v13);
      }
      else
      {
        v6 = 0;
      }
    }
  }
  sub_2263AD568((uint64_t)v14);
  return v6;
}

void sub_2263EE238(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v5;
  va_list va;
  uint64_t v7;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  sub_2263AD568((uint64_t)va);
  sub_2263AD568((uint64_t)va1);
  _Unwind_Resume(a1);
}

unint64_t sub_2263EE2A4(_DWORD *a1, _OWORD *a2, unint64_t a3)
{
  unint64_t NumElements;
  unint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  pxrInternal__aapl__pxrReserved__::VtValue *Typeid;
  const std::type_info *v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v18[2];
  _QWORD v19[2];
  _QWORD v20[3];

  v20[2] = *MEMORY[0x24BDAC8D0];
  sub_2263E6BC8(a1, v20);
  NumElements = pxrInternal__aapl__pxrReserved__::VtValue::_GetNumElements((pxrInternal__aapl__pxrReserved__::VtValue *)v20);
  v6 = NumElements;
  if (NumElements < a3)
    a3 = NumElements;
  if (v20[1])
  {
    if (sub_2263AD3C4((pxrInternal__aapl__pxrReserved__::VtValue *)v20))
    {
      v7 = sub_2263AAC04((pxrInternal__aapl__pxrReserved__::VtValue *)v20);
      if (a3)
      {
        v9 = 0;
        do
        {
          v10 = *(_QWORD *)(v7 + 32) + v9;
          *(_QWORD *)&v8 = *(_QWORD *)v10;
          DWORD2(v8) = *(_DWORD *)(v10 + 8);
          *a2++ = v8;
          v9 += 12;
          --a3;
        }
        while (a3);
      }
    }
    else
    {
      Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)v20);
      if (pxrInternal__aapl__pxrReserved__::VtValue::_CanCast(Typeid, &stru_24EDD68D8, v12))
      {
        v19[0] = 0;
        v19[1] = 0;
        sub_2263F44B4(v20, (pxrInternal__aapl__pxrReserved__::VtValue *)v18);
        sub_2263AD3FC(v19, v18);
        sub_2263AD568((uint64_t)v18);
        v13 = sub_2263AAC04((pxrInternal__aapl__pxrReserved__::VtValue *)v19);
        if (a3)
        {
          v15 = 0;
          do
          {
            v16 = *(_QWORD *)(v13 + 32) + v15;
            *(_QWORD *)&v14 = *(_QWORD *)v16;
            DWORD2(v14) = *(_DWORD *)(v16 + 8);
            *a2++ = v14;
            v15 += 12;
            --a3;
          }
          while (a3);
        }
        sub_2263AD568((uint64_t)v19);
      }
    }
  }
  sub_2263AD568((uint64_t)v20);
  return v6;
}

void sub_2263EE3E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v5;
  va_list va;
  uint64_t v7;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  sub_2263AD568((uint64_t)va);
  sub_2263AD568((uint64_t)va1);
  _Unwind_Resume(a1);
}

unint64_t sub_2263EE454(_DWORD *a1, void *a2, unint64_t a3)
{
  unint64_t NumElements;
  unint64_t v6;
  uint64_t v7;
  pxrInternal__aapl__pxrReserved__::VtValue *Typeid;
  const std::type_info *v9;
  uint64_t v10;
  _QWORD v12[2];
  _QWORD v13[2];
  _QWORD v14[3];

  v14[2] = *MEMORY[0x24BDAC8D0];
  sub_2263E6BC8(a1, v14);
  NumElements = pxrInternal__aapl__pxrReserved__::VtValue::_GetNumElements((pxrInternal__aapl__pxrReserved__::VtValue *)v14);
  v6 = NumElements;
  if (NumElements < a3)
    a3 = NumElements;
  if (v14[1])
  {
    if (sub_2263C13C8((pxrInternal__aapl__pxrReserved__::VtValue *)v14))
    {
      v7 = sub_2263C1400((pxrInternal__aapl__pxrReserved__::VtValue *)v14);
      memcpy(a2, *(const void **)(v7 + 32), 16 * a3);
    }
    else
    {
      Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)v14);
      if (pxrInternal__aapl__pxrReserved__::VtValue::_CanCast(Typeid, &stru_24EDD6A88, v9))
      {
        v13[0] = 0;
        v13[1] = 0;
        sub_2263F44FC(v14, (pxrInternal__aapl__pxrReserved__::VtValue *)v12);
        sub_2263AD3FC(v13, v12);
        sub_2263AD568((uint64_t)v12);
        v10 = sub_2263C1400((pxrInternal__aapl__pxrReserved__::VtValue *)v13);
        memcpy(a2, *(const void **)(v10 + 32), 16 * a3);
        sub_2263AD568((uint64_t)v13);
      }
      else
      {
        v6 = 0;
      }
    }
  }
  sub_2263AD568((uint64_t)v14);
  return v6;
}

void sub_2263EE56C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v5;
  va_list va;
  uint64_t v7;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  sub_2263AD568((uint64_t)va);
  sub_2263AD568((uint64_t)va1);
  _Unwind_Resume(a1);
}

unint64_t sub_2263EE5D8(_DWORD *a1, void *a2, unint64_t a3)
{
  unint64_t NumElements;
  unint64_t v6;
  uint64_t v7;
  pxrInternal__aapl__pxrReserved__::VtValue *Typeid;
  const std::type_info *v9;
  uint64_t v10;
  _QWORD v12[2];
  _QWORD v13[2];
  _QWORD v14[3];

  v14[2] = *MEMORY[0x24BDAC8D0];
  sub_2263E6BC8(a1, v14);
  NumElements = pxrInternal__aapl__pxrReserved__::VtValue::_GetNumElements((pxrInternal__aapl__pxrReserved__::VtValue *)v14);
  v6 = NumElements;
  if (NumElements < a3)
    a3 = NumElements;
  if (v14[1])
  {
    if (sub_2263F4544((pxrInternal__aapl__pxrReserved__::VtValue *)v14))
    {
      v7 = sub_2263F457C((pxrInternal__aapl__pxrReserved__::VtValue *)v14);
      memcpy(a2, *(const void **)(v7 + 32), a3 << 6);
    }
    else
    {
      Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)v14);
      if (pxrInternal__aapl__pxrReserved__::VtValue::_CanCast(Typeid, &stru_24EDD8A08, v9))
      {
        v13[0] = 0;
        v13[1] = 0;
        sub_2263F45E4(v14, (pxrInternal__aapl__pxrReserved__::VtValue *)v12);
        sub_2263AD3FC(v13, v12);
        sub_2263AD568((uint64_t)v12);
        v10 = sub_2263F457C((pxrInternal__aapl__pxrReserved__::VtValue *)v13);
        memcpy(a2, *(const void **)(v10 + 32), a3 << 6);
        sub_2263AD568((uint64_t)v13);
      }
      else
      {
        v6 = 0;
      }
    }
  }
  sub_2263AD568((uint64_t)v14);
  return v6;
}

void sub_2263EE6F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v5;
  va_list va;
  uint64_t v7;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  sub_2263AD568((uint64_t)va);
  sub_2263AD568((uint64_t)va1);
  _Unwind_Resume(a1);
}

unint64_t sub_2263EE75C(_DWORD *a1, void *a2, unint64_t a3)
{
  unint64_t NumElements;
  unint64_t v6;
  uint64_t v7;
  pxrInternal__aapl__pxrReserved__::VtValue *Typeid;
  const std::type_info *v9;
  uint64_t v10;
  _QWORD v12[2];
  _QWORD v13[2];
  _QWORD v14[3];

  v14[2] = *MEMORY[0x24BDAC8D0];
  sub_2263E6BC8(a1, v14);
  NumElements = pxrInternal__aapl__pxrReserved__::VtValue::_GetNumElements((pxrInternal__aapl__pxrReserved__::VtValue *)v14);
  v6 = NumElements;
  if (NumElements < a3)
    a3 = NumElements;
  if (v14[1])
  {
    if (sub_2263C1A58((pxrInternal__aapl__pxrReserved__::VtValue *)v14))
    {
      v7 = sub_2263C1A90((pxrInternal__aapl__pxrReserved__::VtValue *)v14);
      memcpy(a2, *(const void **)(v7 + 32), 8 * a3);
    }
    else
    {
      Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)v14);
      if (pxrInternal__aapl__pxrReserved__::VtValue::_CanCast(Typeid, &stru_24EDD6FD8, v9))
      {
        v13[0] = 0;
        v13[1] = 0;
        sub_2263F4794(v14, (pxrInternal__aapl__pxrReserved__::VtValue *)v12);
        sub_2263AD3FC(v13, v12);
        sub_2263AD568((uint64_t)v12);
        v10 = sub_2263C1A90((pxrInternal__aapl__pxrReserved__::VtValue *)v13);
        memcpy(a2, *(const void **)(v10 + 32), 8 * a3);
        sub_2263AD568((uint64_t)v13);
      }
      else
      {
        v6 = 0;
      }
    }
  }
  sub_2263AD568((uint64_t)v14);
  return v6;
}

void sub_2263EE874(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v5;
  va_list va;
  uint64_t v7;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  sub_2263AD568((uint64_t)va);
  sub_2263AD568((uint64_t)va1);
  _Unwind_Resume(a1);
}

unint64_t sub_2263EE8E0(_DWORD *a1, void *a2, unint64_t a3)
{
  unint64_t NumElements;
  unint64_t v6;
  uint64_t v7;
  pxrInternal__aapl__pxrReserved__::VtValue *Typeid;
  const std::type_info *v9;
  uint64_t v10;
  _QWORD v12[2];
  _QWORD v13[2];
  _QWORD v14[3];

  v14[2] = *MEMORY[0x24BDAC8D0];
  sub_2263E6BC8(a1, v14);
  NumElements = pxrInternal__aapl__pxrReserved__::VtValue::_GetNumElements((pxrInternal__aapl__pxrReserved__::VtValue *)v14);
  v6 = NumElements;
  if (NumElements < a3)
    a3 = NumElements;
  if (v14[1])
  {
    if (sub_2263C1D18((pxrInternal__aapl__pxrReserved__::VtValue *)v14))
    {
      v7 = sub_2263C1D50((pxrInternal__aapl__pxrReserved__::VtValue *)v14);
      memcpy(a2, *(const void **)(v7 + 32), 16 * a3);
    }
    else
    {
      Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)v14);
      if (pxrInternal__aapl__pxrReserved__::VtValue::_CanCast(Typeid, &stru_24EDD6FF0, v9))
      {
        v13[0] = 0;
        v13[1] = 0;
        sub_2263F47DC(v14, (pxrInternal__aapl__pxrReserved__::VtValue *)v12);
        sub_2263AD3FC(v13, v12);
        sub_2263AD568((uint64_t)v12);
        v10 = sub_2263C1D50((pxrInternal__aapl__pxrReserved__::VtValue *)v13);
        memcpy(a2, *(const void **)(v10 + 32), 16 * a3);
        sub_2263AD568((uint64_t)v13);
      }
      else
      {
        v6 = 0;
      }
    }
  }
  sub_2263AD568((uint64_t)v14);
  return v6;
}

void sub_2263EE9F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v5;
  va_list va;
  uint64_t v7;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  sub_2263AD568((uint64_t)va);
  sub_2263AD568((uint64_t)va1);
  _Unwind_Resume(a1);
}

unint64_t sub_2263EEA64(_DWORD *a1, _OWORD *a2, unint64_t a3)
{
  unint64_t NumElements;
  unint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  pxrInternal__aapl__pxrReserved__::VtValue *Typeid;
  const std::type_info *v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v18[2];
  _QWORD v19[2];
  _QWORD v20[3];

  v20[2] = *MEMORY[0x24BDAC8D0];
  sub_2263E6BC8(a1, v20);
  NumElements = pxrInternal__aapl__pxrReserved__::VtValue::_GetNumElements((pxrInternal__aapl__pxrReserved__::VtValue *)v20);
  v6 = NumElements;
  if (NumElements < a3)
    a3 = NumElements;
  if (v20[1])
  {
    if (sub_2263C2108((pxrInternal__aapl__pxrReserved__::VtValue *)v20))
    {
      v7 = sub_2263C2140((pxrInternal__aapl__pxrReserved__::VtValue *)v20);
      if (a3)
      {
        v9 = 0;
        do
        {
          v10 = *(_QWORD *)(v7 + 32) + v9;
          *(_QWORD *)&v8 = *(_QWORD *)(v10 + 16);
          *a2 = *(_OWORD *)v10;
          a2[1] = v8;
          a2 += 2;
          v9 += 24;
          --a3;
        }
        while (a3);
      }
    }
    else
    {
      Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)v20);
      if (pxrInternal__aapl__pxrReserved__::VtValue::_CanCast(Typeid, &stru_24EDD7008, v12))
      {
        v19[0] = 0;
        v19[1] = 0;
        sub_2263F4824(v20, (pxrInternal__aapl__pxrReserved__::VtValue *)v18);
        sub_2263AD3FC(v19, v18);
        sub_2263AD568((uint64_t)v18);
        v13 = sub_2263C2140((pxrInternal__aapl__pxrReserved__::VtValue *)v19);
        if (a3)
        {
          v15 = 0;
          do
          {
            v16 = *(_QWORD *)(v13 + 32) + v15;
            *(_QWORD *)&v14 = *(_QWORD *)(v16 + 16);
            *a2 = *(_OWORD *)v16;
            a2[1] = v14;
            a2 += 2;
            v15 += 24;
            --a3;
          }
          while (a3);
        }
        sub_2263AD568((uint64_t)v19);
      }
    }
  }
  sub_2263AD568((uint64_t)v20);
  return v6;
}

void sub_2263EEBB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v5;
  va_list va;
  uint64_t v7;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  sub_2263AD568((uint64_t)va);
  sub_2263AD568((uint64_t)va1);
  _Unwind_Resume(a1);
}

unint64_t sub_2263EEC24(_DWORD *a1, void *a2, unint64_t a3)
{
  unint64_t NumElements;
  unint64_t v6;
  uint64_t v7;
  pxrInternal__aapl__pxrReserved__::VtValue *Typeid;
  const std::type_info *v9;
  uint64_t v10;
  _QWORD v12[2];
  _QWORD v13[2];
  _QWORD v14[3];

  v14[2] = *MEMORY[0x24BDAC8D0];
  sub_2263E6BC8(a1, v14);
  NumElements = pxrInternal__aapl__pxrReserved__::VtValue::_GetNumElements((pxrInternal__aapl__pxrReserved__::VtValue *)v14);
  v6 = NumElements;
  if (NumElements < a3)
    a3 = NumElements;
  if (v14[1])
  {
    if (sub_2263C2514((pxrInternal__aapl__pxrReserved__::VtValue *)v14))
    {
      v7 = sub_2263C254C((pxrInternal__aapl__pxrReserved__::VtValue *)v14);
      memcpy(a2, *(const void **)(v7 + 32), 32 * a3);
    }
    else
    {
      Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)v14);
      if (pxrInternal__aapl__pxrReserved__::VtValue::_CanCast(Typeid, &stru_24EDD7020, v9))
      {
        v13[0] = 0;
        v13[1] = 0;
        sub_2263F486C(v14, (pxrInternal__aapl__pxrReserved__::VtValue *)v12);
        sub_2263AD3FC(v13, v12);
        sub_2263AD568((uint64_t)v12);
        v10 = sub_2263C254C((pxrInternal__aapl__pxrReserved__::VtValue *)v13);
        memcpy(a2, *(const void **)(v10 + 32), 32 * a3);
        sub_2263AD568((uint64_t)v13);
      }
      else
      {
        v6 = 0;
      }
    }
  }
  sub_2263AD568((uint64_t)v14);
  return v6;
}

void sub_2263EED3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v5;
  va_list va;
  uint64_t v7;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  sub_2263AD568((uint64_t)va);
  sub_2263AD568((uint64_t)va1);
  _Unwind_Resume(a1);
}

unint64_t sub_2263EEDA8(_DWORD *a1, void *a2, unint64_t a3)
{
  unint64_t NumElements;
  unint64_t v6;
  uint64_t v7;
  pxrInternal__aapl__pxrReserved__::VtValue *Typeid;
  const std::type_info *v9;
  uint64_t v10;
  _QWORD v12[2];
  _QWORD v13[2];
  _QWORD v14[3];

  v14[2] = *MEMORY[0x24BDAC8D0];
  sub_2263E6BC8(a1, v14);
  NumElements = pxrInternal__aapl__pxrReserved__::VtValue::_GetNumElements((pxrInternal__aapl__pxrReserved__::VtValue *)v14);
  v6 = NumElements;
  if (NumElements < a3)
    a3 = NumElements;
  if (v14[1])
  {
    if (sub_2263C1648((pxrInternal__aapl__pxrReserved__::VtValue *)v14))
    {
      v7 = sub_2263C1680((pxrInternal__aapl__pxrReserved__::VtValue *)v14);
      memcpy(a2, *(const void **)(v7 + 32), a3 << 7);
    }
    else
    {
      Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)v14);
      if (pxrInternal__aapl__pxrReserved__::VtValue::_CanCast(Typeid, &stru_24EDD6FC0, v9))
      {
        v13[0] = 0;
        v13[1] = 0;
        sub_2263F48B4(v14, (pxrInternal__aapl__pxrReserved__::VtValue *)v12);
        sub_2263AD3FC(v13, v12);
        sub_2263AD568((uint64_t)v12);
        v10 = sub_2263C1680((pxrInternal__aapl__pxrReserved__::VtValue *)v13);
        memcpy(a2, *(const void **)(v10 + 32), a3 << 7);
        sub_2263AD568((uint64_t)v13);
      }
      else
      {
        v6 = 0;
      }
    }
  }
  sub_2263AD568((uint64_t)v14);
  return v6;
}

void sub_2263EEEC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v5;
  va_list va;
  uint64_t v7;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  sub_2263AD568((uint64_t)va);
  sub_2263AD568((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_2263EEF0C(_DWORD *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  const std::type_info *Typeid;
  pxrInternal__aapl__pxrReserved__::VtValue *v4;
  const std::type_info *v5;
  const pxrInternal__aapl__pxrReserved__::VtValue *v6;
  const std::type_info *v7;
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase *Instance;
  const char *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  void *v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  void *v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int *v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t Type;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  _QWORD v35[3];

  v35[2] = *MEMORY[0x24BDAC8D0];
  if (*a1 == 4)
  {
    NSLog(CFSTR("Can't set data on relationships."));
    return;
  }
  if (*a1 != 3)
    return;
  v33 = 0u;
  v34 = 0u;
  sub_2263DC6FC((uint64_t)a1, (uint64_t)&v33);
  if (sub_2263DA5B4((pxrInternal__aapl__pxrReserved__::UsdObject *)&v33))
  {
    v32 = 0;
    v35[0] = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName((pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v33);
    v32 = *(_QWORD *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetType((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)v35);
    if (v32 == pxrInternal__aapl__pxrReserved__::VtValue::GetType(a2))
    {
      pxrInternal__aapl__pxrReserved__::UsdAttribute::Set();
      goto LABEL_30;
    }
    Typeid = (const std::type_info *)pxrInternal__aapl__pxrReserved__::TfType::GetTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&v32);
    v4 = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid(a2);
    if (pxrInternal__aapl__pxrReserved__::VtValue::_CanCast(v4, Typeid, v5))
    {
      v6 = (const pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::TfType::GetTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&v32);
      pxrInternal__aapl__pxrReserved__::VtValue::CastToTypeid(a2, v6, v7);
      pxrInternal__aapl__pxrReserved__::UsdAttribute::Set();
      sub_2263AD568((uint64_t)v35);
      goto LABEL_30;
    }
    v35[0] = 0;
    Instance = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)atomic_load((unint64_t *)off_24EDD5B58);
    if (!Instance)
      Instance = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance();
    v29 = 0;
    Type = pxrInternal__aapl__pxrReserved__::VtValue::GetType(a2);
    v31 = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FindType(Instance, (const pxrInternal__aapl__pxrReserved__::TfType *)&Type, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v29);
    pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v31);
    if ((v29 & 7) != 0)
    {
      v11 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stlxr(v12 - 2, v11));
    }
    v28 = v35[0];
    if ((v35[0] & 7) != 0)
    {
      v13 = (unsigned int *)(v35[0] & 0xFFFFFFFFFFFFFFF8);
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 2, v13));
      if ((v14 & 1) == 0)
        v28 &= 0xFFFFFFFFFFFFFFF8;
    }
    objc_msgSend_dataTypeWithTfToken_(USKToken, v9, (uint64_t)&v28, v10);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = (void *)MEMORY[0x24BDD17C8];
    v19 = *(_QWORD *)sub_2263DE374(&v33) & 0xFFFFFFFFFFFFFFF8;
    if (v19)
    {
      v20 = (uint64_t *)(v19 + 16);
      if (*(char *)(v19 + 39) < 0)
      {
        objc_msgSend_stringWithUTF8String_(v16, v17, *v20, v18);
LABEL_24:
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        NSLog(CFSTR("Can't set data type %@ on attribute %@"), v15, v21);

        if ((v28 & 7) != 0)
        {
          v22 = (unsigned int *)(v28 & 0xFFFFFFFFFFFFFFF8);
          do
            v23 = __ldxr(v22);
          while (__stlxr(v23 - 2, v22));
        }
        if ((v35[0] & 7) != 0)
        {
          v24 = (unsigned int *)(v35[0] & 0xFFFFFFFFFFFFFFF8);
          do
            v25 = __ldxr(v24);
          while (__stlxr(v25 - 2, v24));
        }
        goto LABEL_30;
      }
    }
    else
    {
      v20 = (uint64_t *)"";
    }
    objc_msgSend_stringWithUTF8String_(v16, v17, (uint64_t)v20, v18);
    goto LABEL_24;
  }
LABEL_30:
  if ((BYTE8(v34) & 7) != 0)
  {
    v26 = (unsigned int *)(*((_QWORD *)&v34 + 1) & 0xFFFFFFFFFFFFFFF8);
    do
      v27 = __ldxr(v26);
    while (__stlxr(v27 - 2, v26));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_2263BDE64((uint64_t)&v34);
  if (*((_QWORD *)&v33 + 1))
    sub_2263DA640(*((uint64_t *)&v33 + 1));
}

void sub_2263EF1E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_2263DC7CC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2263EF360(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2263EF430(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2263EF560(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2263EF8E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  void *v26;
  uint64_t v27;

  sub_2263B58AC((uint64_t)&a11);
  sub_2263DC7CC((uint64_t)&a17);
  if (a26 < 0)
    operator delete(__p);
  sub_2263AD568(v27 - 56);

  _Unwind_Resume(a1);
}

void sub_2263EFA60(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2263AD568((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2263EFAF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2263AD568((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2263EFB90(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2263AD568((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2263EFC28(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2263AD568((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2263EFCB8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2263AD568((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2263EFD50(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2263AD568((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2263EFDE4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2263AD568((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2263EFEBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_2263AD568((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2263EFF9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_2263AD568((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2263F0088(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_2263AD568((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2263F0174(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_2263AD568((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2263F0258(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_2263AD568((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2263F0344(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_2263AD568((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2263F0478(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2263AD568(v1 - 40);
  _Unwind_Resume(a1);
}

void sub_2263F05B0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2263AD568(v1 - 56);
  _Unwind_Resume(a1);
}

void sub_2263F0648(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2263AD568((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2263F06DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2263AD568((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2263F0774(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2263AD568((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2263F0808(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2263AD568((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2263F08E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_2263AD568((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2263F09D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_2263AD568((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2263F0AA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_2263AD568((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2263F0B88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_2263AD568((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2263F0C5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_2263AD568((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2263F0D38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_2263AD568((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2263F0D6C(_DWORD *a1, const void *a2, unint64_t a3)
{
  _OWORD v6[2];
  void *__dst;
  uint64_t v8[3];

  v8[2] = *MEMORY[0x24BDAC8D0];
  __dst = 0;
  memset(v6, 0, sizeof(v6));
  sub_2263AA560((uint64_t)v6, a3);
  sub_2263AC688((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v6);
  memcpy(__dst, a2, 4 * a3);
  v8[1] = (uint64_t)&off_24EDD7D38;
  sub_2263C68F0(v8, (uint64_t)v6);
  sub_2263EEF0C(a1, (pxrInternal__aapl__pxrReserved__::VtValue *)v8);
  sub_2263AD568((uint64_t)v8);
  sub_2263AC71C((uint64_t)v6);
}

void sub_2263F0E40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_2263AACCC(exception_object);
}

void sub_2263F0EBC(_DWORD *a1, const void *a2, unint64_t a3)
{
  _OWORD v6[2];
  void *__dst;
  uint64_t v8[3];

  v8[2] = *MEMORY[0x24BDAC8D0];
  __dst = 0;
  memset(v6, 0, sizeof(v6));
  sub_2263B911C((uint64_t)v6, a3);
  sub_2263C6BCC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v6);
  memcpy(__dst, a2, 4 * a3);
  v8[1] = (uint64_t)&off_24EDD7DF0;
  sub_2263C68F0(v8, (uint64_t)v6);
  sub_2263EEF0C(a1, (pxrInternal__aapl__pxrReserved__::VtValue *)v8);
  sub_2263AD568((uint64_t)v8);
  sub_2263AC71C((uint64_t)v6);
}

void sub_2263F0F90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_2263AACCC(exception_object);
}

void sub_2263F100C(_DWORD *a1, const void *a2, unint64_t a3)
{
  _OWORD v6[2];
  void *__dst;
  uint64_t v8[3];

  v8[2] = *MEMORY[0x24BDAC8D0];
  __dst = 0;
  memset(v6, 0, sizeof(v6));
  sub_2263B9294((uint64_t)v6, a3);
  sub_2263C092C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v6);
  memcpy(__dst, a2, 16 * a3);
  v8[1] = (uint64_t)off_24EDD7EA8;
  sub_2263B131C(v8, (uint64_t)v6);
  sub_2263EEF0C(a1, (pxrInternal__aapl__pxrReserved__::VtValue *)v8);
  sub_2263AD568((uint64_t)v8);
  sub_2263AC71C((uint64_t)v6);
}

void sub_2263F10E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_2263AACCC(exception_object);
}

void sub_2263F1268(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (a2)
    sub_2263AACCC(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_2263F12C4(pxrInternal__aapl__pxrReserved__::VtValue *a1, _DWORD *a2)
{
  uint64_t v3;
  __int128 v4;
  __int128 *v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t *v8;
  __int128 *v10;
  __int128 *i;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  void *v17;
  unint64_t v19;
  __int128 *v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  __int128 v31;
  void **v32;
  __int128 v33;
  unsigned int *v34;
  unsigned int v35;
  void *v36[2];
  _BYTE v37[24];
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  uint64_t TypeName;
  void *__p[2];
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 *v47;

  v3 = sub_2263B6230(a1);
  v4 = *(_OWORD *)(v3 + 16);
  v45 = *(_OWORD *)v3;
  v46 = v4;
  v5 = *(__int128 **)(v3 + 32);
  v47 = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 - 1);
    if (*((_QWORD *)&v46 + 1))
      v6 = (unint64_t *)*((_QWORD *)&v46 + 1);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  if (*a2 == 3)
  {
    *(_OWORD *)__p = 0uLL;
    v44 = 0uLL;
    sub_2263DC6FC((uint64_t)a2, (uint64_t)__p);
    TypeName = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName((pxrInternal__aapl__pxrReserved__::UsdAttribute *)__p);
    v8 = (unint64_t *)MEMORY[0x24BEE82A0];
    if (!atomic_load(MEMORY[0x24BEE82A0]))
      sub_2263B1434(MEMORY[0x24BEE82A0]);
    if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==())
    {
      pxrInternal__aapl__pxrReserved__::UsdAttribute::Set();
    }
    else
    {
      if (!atomic_load(v8))
        sub_2263B1434(MEMORY[0x24BEE82A0]);
      if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==())
      {
        *(_OWORD *)v36 = 0u;
        memset(v37, 0, sizeof(v37));
        sub_2263B9A2C((uint64_t)v36, v45);
        if ((_QWORD)v45)
        {
          v19 = 0;
          do
          {
            sub_2263C7C48((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v45);
            MEMORY[0x2276976E4](&v39, (char *)v47 + 24 * v19);
            sub_2263C8708((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v36);
            v20 = (__int128 *)(*(_QWORD *)&v37[16] + 8 * v19);
            if (&v39 == v20)
            {
              v23 = v39;
            }
            else
            {
              if ((*(_QWORD *)v20 & 7) != 0)
              {
                v21 = (unsigned int *)(*(_QWORD *)v20 & 0xFFFFFFFFFFFFFFF8);
                do
                  v22 = __ldxr(v21);
                while (__stlxr(v22 - 2, v21));
              }
              v23 = 0;
              *(_QWORD *)v20 = v39;
              *(_QWORD *)&v39 = 0;
            }
            if ((v23 & 7) != 0)
            {
              v24 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
              do
                v25 = __ldxr(v24);
              while (__stlxr(v25 - 2, v24));
            }
            ++v19;
          }
          while ((unint64_t)v45 > v19);
        }
        pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>();
        sub_2263C8530(v36);
      }
      else
      {
        if (!atomic_load(v8))
          sub_2263B1434(MEMORY[0x24BEE82A0]);
        if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==())
        {
          v41 = 0;
          v39 = 0u;
          v40 = 0u;
          sub_2263B9B90((uint64_t)&v39, v45);
          if ((_QWORD)v45)
          {
            v27 = 0;
            v28 = 0;
            v29 = 0;
            do
            {
              sub_2263C7C48((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v45);
              MEMORY[0x227697264](v36, (char *)v47 + v27);
              sub_2263C9B84((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v39);
              v30 = v41 + v28;
              if (*(char *)(v41 + v28 + 23) < 0)
                operator delete(*(void **)v30);
              v31 = *(_OWORD *)v36;
              *(_QWORD *)(v30 + 16) = *(_QWORD *)v37;
              *(_OWORD *)v30 = v31;
              v37[7] = 0;
              LOBYTE(v36[0]) = 0;
              v32 = (void **)(v30 + 24);
              if (*(char *)(v30 + 47) < 0)
                operator delete(*v32);
              v33 = *(_OWORD *)&v37[8];
              *(_QWORD *)(v30 + 40) = v38;
              *(_OWORD *)v32 = v33;
              HIBYTE(v38) = 0;
              v37[8] = 0;
              if ((v37[7] & 0x80000000) != 0)
                operator delete(v36[0]);
              ++v29;
              v28 += 48;
              v27 += 24;
            }
            while ((unint64_t)v45 > v29);
          }
          pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>();
          sub_2263C97A0(&v39);
        }
      }
    }
    if ((BYTE8(v44) & 7) != 0)
    {
      v34 = (unsigned int *)(*((_QWORD *)&v44 + 1) & 0xFFFFFFFFFFFFFFF8);
      do
        v35 = __ldxr(v34);
      while (__stlxr(v35 - 2, v34));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    sub_2263BDE64((uint64_t)&v44);
    v17 = __p[1];
    if (__p[1])
LABEL_60:
      sub_2263DA640((uint64_t)v17);
  }
  else
  {
    *(_OWORD *)v36 = 0uLL;
    *(_OWORD *)v37 = 0uLL;
    sub_2263E9114((uint64_t)a2, (uint64_t)v36);
    if (sub_2263DA5B4((pxrInternal__aapl__pxrReserved__::UsdObject *)v36))
    {
      v39 = 0uLL;
      *(_QWORD *)&v40 = 0;
      sub_2263C7C48((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v45);
      v10 = v47;
      sub_2263C7C48((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v45);
      for (i = (__int128 *)((char *)v47 + 24 * v45); v10 != i; v10 = (__int128 *)((char *)v10 + 24))
      {
        __p[0] = 0;
        __p[1] = 0;
        *(_QWORD *)&v44 = 0;
        if (*((char *)v10 + 23) < 0)
        {
          sub_2263AE36C(__p, *(void **)v10, *((_QWORD *)v10 + 1));
        }
        else
        {
          v12 = *v10;
          *(_QWORD *)&v44 = *((_QWORD *)v10 + 2);
          *(_OWORD *)__p = v12;
        }
        MEMORY[0x2276976B4](&TypeName, __p);
        v13 = *((_QWORD *)&v39 + 1);
        if (*((_QWORD *)&v39 + 1) >= (unint64_t)v40)
        {
          v14 = sub_2263F39C8((uint64_t *)&v39, &TypeName);
        }
        else
        {
          sub_2263BE108(*((_DWORD **)&v39 + 1), &TypeName);
          sub_2263BE140((_DWORD *)(v13 + 4), (_DWORD *)&TypeName + 1);
          v14 = v13 + 8;
        }
        *((_QWORD *)&v39 + 1) = v14;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        sub_2263BDE64((uint64_t)&TypeName);
        if (SBYTE7(v44) < 0)
          operator delete(__p[0]);
      }
      pxrInternal__aapl__pxrReserved__::UsdRelationship::SetTargets();
      __p[0] = &v39;
      sub_2263BE380((void ***)__p);
    }
    if ((v37[8] & 7) != 0)
    {
      v15 = (unsigned int *)(*(_QWORD *)&v37[8] & 0xFFFFFFFFFFFFFFF8);
      do
        v16 = __ldxr(v15);
      while (__stlxr(v16 - 2, v15));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    sub_2263BDE64((uint64_t)v37);
    v17 = v36[1];
    if (v36[1])
      goto LABEL_60;
  }
  sub_2263C7974(&v45);
}

void sub_2263F177C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28)
{
  sub_2263C97A0(&a15);
  sub_2263DC7CC((uint64_t)&__p);
  sub_2263C7974(&a28);
  _Unwind_Resume(a1);
}

void sub_2263F19BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (a2)
    sub_2263AACCC(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_2263F1BA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (a2)
    sub_2263AACCC(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_2263F1DB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (a2)
    sub_2263AACCC(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_2263F1E60(_DWORD *a1, const void *a2, unint64_t a3)
{
  _OWORD v6[2];
  void *__dst;
  uint64_t v8[3];

  v8[2] = *MEMORY[0x24BDAC8D0];
  __dst = 0;
  memset(v6, 0, sizeof(v6));
  sub_2263BA174((uint64_t)v6, a3);
  sub_2263CA3A4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v6);
  memcpy(__dst, a2, 4 * a3);
  v8[1] = (uint64_t)&off_24EDD8258;
  sub_2263CA8B4(v8, (uint64_t)v6);
  sub_2263EEF0C(a1, (pxrInternal__aapl__pxrReserved__::VtValue *)v8);
  sub_2263AD568((uint64_t)v8);
  sub_2263AC71C((uint64_t)v6);
}

void sub_2263F1F34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_2263AACCC(exception_object);
}

void sub_2263F1FB0(_DWORD *a1, const void *a2, unint64_t a3)
{
  _OWORD v6[2];
  void *__dst;
  uint64_t v8[3];

  v8[2] = *MEMORY[0x24BDAC8D0];
  __dst = 0;
  memset(v6, 0, sizeof(v6));
  sub_2263BA308((uint64_t)v6, a3);
  sub_2263C11DC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v6);
  memcpy(__dst, a2, 8 * a3);
  v8[1] = (uint64_t)off_24EDD8310;
  sub_2263B131C(v8, (uint64_t)v6);
  sub_2263EEF0C(a1, (pxrInternal__aapl__pxrReserved__::VtValue *)v8);
  sub_2263AD568((uint64_t)v8);
  sub_2263AC71C((uint64_t)v6);
}

void sub_2263F2084(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_2263AACCC(exception_object);
}

void sub_2263F2100(_DWORD *a1, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  _OWORD v11[2];
  uint64_t v12;
  uint64_t v13[3];

  v3 = a3;
  v13[2] = *MEMORY[0x24BDAC8D0];
  v12 = 0;
  memset(v11, 0, sizeof(v11));
  sub_2263AFB70((uint64_t)v11, a3);
  if (v3)
  {
    v6 = 0;
    v7 = (_DWORD *)(a2 + 8);
    do
    {
      v8 = *((_QWORD *)v7 - 1);
      v9 = *v7;
      sub_2263B1F74((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v11);
      v10 = v12 + v6;
      *(_QWORD *)v10 = v8;
      *(_DWORD *)(v10 + 8) = v9;
      v7 += 4;
      v6 += 12;
      --v3;
    }
    while (v3);
  }
  v13[1] = (uint64_t)&off_24EDD68F0;
  sub_2263B131C(v13, (uint64_t)v11);
  sub_2263EEF0C(a1, (pxrInternal__aapl__pxrReserved__::VtValue *)v13);
  sub_2263AD568((uint64_t)v13);
  sub_2263AC71C((uint64_t)v11);
}

void sub_2263F2200(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_2263AACCC(exception_object);
}

void sub_2263F2280(_DWORD *a1, const void *a2, unint64_t a3)
{
  _OWORD v6[2];
  void *__dst;
  uint64_t v8[3];

  v8[2] = *MEMORY[0x24BDAC8D0];
  __dst = 0;
  memset(v6, 0, sizeof(v6));
  sub_2263AFB00((uint64_t)v6, a3);
  sub_2263B1E44((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v6);
  memcpy(__dst, a2, 16 * a3);
  v8[1] = (uint64_t)&off_24EDD69D0;
  sub_2263B131C(v8, (uint64_t)v6);
  sub_2263EEF0C(a1, (pxrInternal__aapl__pxrReserved__::VtValue *)v8);
  sub_2263AD568((uint64_t)v8);
  sub_2263AC71C((uint64_t)v6);
}

void sub_2263F2354(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_2263AACCC(exception_object);
}

void sub_2263F23D0(_DWORD *a1, const void *a2, unint64_t a3)
{
  _OWORD v6[2];
  void *__dst;
  uint64_t v8[3];

  v8[2] = *MEMORY[0x24BDAC8D0];
  __dst = 0;
  memset(v6, 0, sizeof(v6));
  sub_2263F48FC((uint64_t)v6, a3);
  sub_2263F4C00((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v6);
  memcpy(__dst, a2, a3 << 6);
  v8[1] = (uint64_t)&off_24EDD8A20;
  sub_2263B131C(v8, (uint64_t)v6);
  sub_2263EEF0C(a1, (pxrInternal__aapl__pxrReserved__::VtValue *)v8);
  sub_2263AD568((uint64_t)v8);
  sub_2263AC71C((uint64_t)v6);
}

void sub_2263F24A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_2263AACCC(exception_object);
}

void sub_2263F2520(_DWORD *a1, const void *a2, unint64_t a3)
{
  _OWORD v6[2];
  void *__dst;
  uint64_t v8[3];

  v8[2] = *MEMORY[0x24BDAC8D0];
  __dst = 0;
  memset(v6, 0, sizeof(v6));
  sub_2263BA6DC((uint64_t)v6, a3);
  sub_2263CB26C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v6);
  memcpy(__dst, a2, 8 * a3);
  v8[1] = (uint64_t)&off_24EDD83C8;
  sub_2263CA8B4(v8, (uint64_t)v6);
  sub_2263EEF0C(a1, (pxrInternal__aapl__pxrReserved__::VtValue *)v8);
  sub_2263AD568((uint64_t)v8);
  sub_2263AC71C((uint64_t)v6);
}

void sub_2263F25F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_2263AACCC(exception_object);
}

void sub_2263F2670(_DWORD *a1, const void *a2, unint64_t a3)
{
  _OWORD v6[2];
  void *__dst;
  uint64_t v8[3];

  v8[2] = *MEMORY[0x24BDAC8D0];
  __dst = 0;
  memset(v6, 0, sizeof(v6));
  sub_2263BA870((uint64_t)v6, a3);
  sub_2263C1FD8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v6);
  memcpy(__dst, a2, 16 * a3);
  v8[1] = (uint64_t)off_24EDD8480;
  sub_2263B131C(v8, (uint64_t)v6);
  sub_2263EEF0C(a1, (pxrInternal__aapl__pxrReserved__::VtValue *)v8);
  sub_2263AD568((uint64_t)v8);
  sub_2263AC71C((uint64_t)v6);
}

void sub_2263F2744(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_2263AACCC(exception_object);
}

void sub_2263F27C0(_DWORD *a1, __int128 *a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  _OWORD v10[2];
  uint64_t v11;
  uint64_t v12[3];

  v3 = a3;
  v12[2] = *MEMORY[0x24BDAC8D0];
  v11 = 0;
  memset(v10, 0, sizeof(v10));
  sub_2263BAA18((uint64_t)v10, a3);
  if (v3)
  {
    v6 = 0;
    do
    {
      v8 = *a2;
      v9 = a2[1];
      sub_2263C23C8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v10);
      v7 = v11 + v6;
      *(_OWORD *)v7 = v8;
      *(_QWORD *)(v7 + 16) = v9;
      a2 += 2;
      v6 += 24;
      --v3;
    }
    while (v3);
  }
  v12[1] = (uint64_t)off_24EDD8538;
  sub_2263B131C(v12, (uint64_t)v10);
  sub_2263EEF0C(a1, (pxrInternal__aapl__pxrReserved__::VtValue *)v12);
  sub_2263AD568((uint64_t)v12);
  sub_2263AC71C((uint64_t)v10);
}

void sub_2263F28C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_2263AACCC(exception_object);
}

void sub_2263F2940(_DWORD *a1, const void *a2, unint64_t a3)
{
  _OWORD v6[2];
  void *__dst;
  uint64_t v8[3];

  v8[2] = *MEMORY[0x24BDAC8D0];
  __dst = 0;
  memset(v6, 0, sizeof(v6));
  sub_2263BABC0((uint64_t)v6, a3);
  sub_2263C27D4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v6);
  memcpy(__dst, a2, 32 * a3);
  v8[1] = (uint64_t)off_24EDD85F0;
  sub_2263B131C(v8, (uint64_t)v6);
  sub_2263EEF0C(a1, (pxrInternal__aapl__pxrReserved__::VtValue *)v8);
  sub_2263AD568((uint64_t)v8);
  sub_2263AC71C((uint64_t)v6);
}

void sub_2263F2A14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_2263AACCC(exception_object);
}

void sub_2263F2A90(_DWORD *a1, const void *a2, unint64_t a3)
{
  _OWORD v6[2];
  void *__dst;
  uint64_t v8[3];

  v8[2] = *MEMORY[0x24BDAC8D0];
  __dst = 0;
  memset(v6, 0, sizeof(v6));
  sub_2263BADAC((uint64_t)v6, a3);
  sub_2263C1908((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v6);
  memcpy(__dst, a2, a3 << 7);
  v8[1] = (uint64_t)off_24EDD86A8;
  sub_2263B131C(v8, (uint64_t)v6);
  sub_2263EEF0C(a1, (pxrInternal__aapl__pxrReserved__::VtValue *)v8);
  sub_2263AD568((uint64_t)v8);
  sub_2263AC71C((uint64_t)v6);
}

void sub_2263F2B64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_2263AACCC(exception_object);
}

void sub_2263F2DC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,void **a25)
{
  void *v25;
  void *v26;

  a25 = (void **)&a18;
  sub_2263BE380(&a25);
  sub_2263E9184((uint64_t)&a21);

  _Unwind_Resume(a1);
}

void sub_2263F2F68(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  uint64_t v3;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  sub_2263B5610(v3 - 40);
  *(_QWORD *)(v3 - 40) = va;
  sub_2263BE380((void ***)(v3 - 40));
  sub_2263E9184((uint64_t)va1);

  _Unwind_Resume(a1);
}

void sub_2263F312C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  void *v15;
  uint64_t v16;

  sub_2263AD568(v16 - 64);
  sub_2263B58AC((uint64_t)&a9);
  sub_2263DC7CC((uint64_t)&a15);

  _Unwind_Resume(a1);
}

void sub_2263F3304(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  void *v15;
  uint64_t v16;

  sub_2263AD568(v16 - 48);
  sub_2263B58AC((uint64_t)&a9);
  sub_2263DC7CC((uint64_t)&a15);

  _Unwind_Resume(a1);
}

void sub_2263F3598(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  if (a2)
    sub_2263AACCC(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_2263F3754(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_2263F38AC(uint64_t a1, unsigned int *a2, _QWORD *a3, unsigned int *a4, _QWORD *a5)
{
  uint64_t v5;

  v5 = *a2;
  if (*(_BYTE *)(a1 + 8))
    v5 += (unint64_t)(*(_QWORD *)a1 + v5 + (*(_QWORD *)a1 + v5) * (*(_QWORD *)a1 + v5)) >> 1;
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v5;
  return sub_2263F38E8(a1, a3, a4, a5);
}

uint64_t sub_2263F38E8(uint64_t a1, _QWORD *a2, unsigned int *a3, _QWORD *a4)
{
  unint64_t v4;

  v4 = bswap64(0x9E3779B97F4A7C55 * *a2);
  if (*(_BYTE *)(a1 + 8))
    v4 += (*(_QWORD *)a1 + v4 + (*(_QWORD *)a1 + v4) * (*(_QWORD *)a1 + v4)) >> 1;
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v4;
  return sub_2263F3938(a1, a3, a4);
}

uint64_t sub_2263F3938(uint64_t a1, unsigned int *a2, _QWORD *a3)
{
  uint64_t result;
  unint64_t v6;

  result = sub_2263F398C(a1, a2);
  v6 = *a3 & 0xFFFFFFFFFFFFFFF8;
  if (*(_BYTE *)(a1 + 8))
    v6 += (*(_QWORD *)a1 + v6 + (*(_QWORD *)a1 + v6) * (*(_QWORD *)a1 + v6)) >> 1;
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v6;
  return result;
}

uint64_t sub_2263F398C(uint64_t result, unsigned int *a2)
{
  uint64_t v2;
  uint64_t v3;

  v3 = *a2;
  v2 = a2[1];
  if (*(_BYTE *)(result + 8))
    v3 += (unint64_t)(*(_QWORD *)result + v3 + (*(_QWORD *)result + v3) * (*(_QWORD *)result + v3)) >> 1;
  else
    *(_BYTE *)(result + 8) = 1;
  *(_QWORD *)result = v2 + ((unint64_t)(v3 + v2 + (v3 + v2) * (v3 + v2)) >> 1);
  return result;
}

uint64_t sub_2263F39C8(uint64_t *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  void *v13;
  char *v14;
  _DWORD *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = (a1[1] - *a1) >> 3;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 61)
    sub_2263AACDC();
  v7 = (uint64_t)(a1 + 2);
  v8 = a1[2] - v3;
  if (v8 >> 2 > v5)
    v5 = v8 >> 2;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
    v9 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)sub_2263ABFD4(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = &v10[8 * v4];
  v16 = &v10[8 * v9];
  sub_2263BE108(v14, a2);
  sub_2263BE140((_DWORD *)v14 + 1, a2 + 1);
  v15 = v14 + 8;
  sub_2263F3AB4(a1, &v13);
  v11 = a1[1];
  sub_2263F3C5C(&v13);
  return v11;
}

void sub_2263F3AA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2263F3C5C((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2263F3AB4(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_2263F3B28((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_2263F3B28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[3];
  uint64_t v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  v13 = 0;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      sub_2263BE108((_DWORD *)(v7 - 8), (_DWORD *)(v9 - 8));
      sub_2263BE140((_DWORD *)(v7 - 4), (_DWORD *)(v9 - 4));
      v7 = *((_QWORD *)&v15 + 1) - 8;
      *((_QWORD *)&v15 + 1) -= 8;
      v9 -= 8;
    }
    while (v9 != a5);
    v10 = v15;
  }
  LOBYTE(v13) = 1;
  sub_2263F3BD8((uint64_t)v12);
  return v10;
}

uint64_t sub_2263F3BD8(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_2263F3C0C((uint64_t *)a1);
  return a1;
}

uint64_t *sub_2263F3C0C(uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(result[2] + 8);
  v2 = *(_QWORD *)(result[1] + 8);
  if (v1 != v2)
  {
    v3 = *result;
    do
    {
      result = (uint64_t *)sub_2263BE354(v3, v1);
      v1 += 8;
    }
    while (v1 != v2);
  }
  return result;
}

void **sub_2263F3C5C(void **a1)
{
  sub_2263F3C8C((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

uint64_t sub_2263F3C8C(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(result + 8);
  v1 = *(_QWORD *)(result + 16);
  if (v1 != v2)
  {
    v3 = result;
    do
    {
      v4 = *(_QWORD *)(v3 + 32);
      *(_QWORD *)(v3 + 16) = v1 - 8;
      result = sub_2263BE354(v4, v1 - 8);
      v1 = *(_QWORD *)(v3 + 16);
    }
    while (v1 != v2);
  }
  return result;
}

uint64_t *sub_2263F3CD0(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 24);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void ***sub_2263F3CF8(void ***a1, void ***a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_2263F3FBC(a1);
}

uint64_t sub_2263F3D08(uint64_t *a1)
{
  sub_2263BE934(a1);
  return 1;
}

unint64_t sub_2263F3D20(uint64_t *a1)
{
  unsigned int **v1;
  char v3;

  v1 = (unsigned int **)sub_2263BE934(a1);
  return sub_2263F402C((uint64_t)&v3, v1);
}

BOOL sub_2263F3D48(uint64_t *a1, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL8 result;
  BOOL v11;

  v3 = (uint64_t *)sub_2263BE934(a1);
  v4 = sub_2263BE934(a2);
  v6 = *v3;
  v5 = v3[1];
  v7 = *(uint64_t **)v4;
  if (v5 - *v3 != *(_QWORD *)(v4 + 8) - *(_QWORD *)v4)
    return 0;
  if (v6 == v5)
    return 1;
  v8 = v6 + 8;
  do
  {
    v9 = *v7++;
    result = *(_QWORD *)(v8 - 8) == v9;
    v11 = *(_QWORD *)(v8 - 8) != v9 || v8 == v5;
    v8 += 8;
  }
  while (!v11);
  return result;
}

BOOL sub_2263F3DC4(uint64_t *a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 result;
  BOOL v10;

  v3 = (uint64_t *)sub_2263BE934(a1);
  v5 = *v3;
  v4 = v3[1];
  v6 = *(uint64_t **)a2;
  if (v4 - *v3 != *(_QWORD *)(a2 + 8) - *(_QWORD *)a2)
    return 0;
  if (v5 == v4)
    return 1;
  v7 = v5 + 8;
  do
  {
    v8 = *v6++;
    result = *(_QWORD *)(v7 - 8) == v8;
    v10 = *(_QWORD *)(v7 - 8) != v8 || v7 == v4;
    v7 += 8;
  }
  while (!v10);
  return result;
}

uint64_t sub_2263F3E38(uint64_t *a1)
{
  sub_2263BE934(a1);
  return 0;
}

uint64_t sub_2263F3E54(uint64_t *a1)
{
  sub_2263BE934(a1);
  return pxrInternal__aapl__pxrReserved__::Vt_StreamOutGeneric();
}

std::type_info *sub_2263F3E84(uint64_t *a1)
{
  sub_2263BE934(a1);
  return &stru_24EDD6E88;
}

uint64_t sub_2263F3EA0(uint64_t *a1)
{
  sub_2263BE934(a1);
  return 0;
}

uint64_t sub_2263F3EB8(uint64_t *a1)
{
  sub_2263BE934(a1);
  return MEMORY[0x24BEDB7C8];
}

uint64_t sub_2263F3ED4(uint64_t *a1)
{
  sub_2263BE934(a1);
  return 0;
}

uint64_t sub_2263F3EEC(uint64_t *a1)
{
  sub_2263BE934(a1);
  return 0;
}

BOOL sub_2263F3F04(uint64_t *a1, uint64_t a2)
{
  sub_2263BE934(a1);
  return strcmp((const char *)((unint64_t)"NSt3__16vectorIN32pxrInternal__aapl__pxrReserved__7SdfPathENS_9allocatorIS2_EEEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_2263F3F44(uint64_t *a1)
{
  const std::type_info *v1;

  sub_2263BE934(a1);
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24EDD6E88, v1);
}

std::type_info *sub_2263F3F68(uint64_t *a1)
{
  sub_2263BE934(a1);
  return &stru_24EDD6E88;
}

_QWORD *sub_2263F3F88@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  _DWORD **v3;

  v3 = (_DWORD **)sub_2263BE934(a1);
  a2[1] = (uint64_t)&off_24EDD8950;
  return sub_2263F4170(a2, v3);
}

void ***sub_2263F3FBC(void ***a1)
{
  void **v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  void **v7;

  v2 = *a1;
  if (*a1)
  {
    v3 = (unsigned int *)(v2 + 3);
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      __dmb(9u);
      v7 = v2;
      sub_2263BE380(&v7);
      MEMORY[0x2276980E0](v2, 0x1020C4055CCDE27);
    }
  }
  return a1;
}

unint64_t sub_2263F402C(uint64_t a1, unsigned int **a2)
{
  char *v2;
  unsigned int *v3;
  uint64_t v4;
  unint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v2 = (char *)*a2;
  v3 = a2[1];
  v4 = (char *)v3 - (char *)*a2;
  if (v3 == *a2)
  {
    v9 = 0;
  }
  else
  {
    v5 = 0;
    v6 = 0;
    v7 = v4 >> 3;
    do
    {
      v8 = *(unsigned int *)v2;
      if (v6)
        v8 += (v5 + v8 + (v5 + v8) * (v5 + v8)) >> 1;
      else
        v6 = 1;
      v5 = *((unsigned int *)v2 + 1)
         + ((v8
           + *((unsigned int *)v2 + 1)
           + (v8 + *((unsigned int *)v2 + 1)) * (v8 + (unint64_t)*((unsigned int *)v2 + 1))) >> 1);
      v2 += 8;
      --v7;
    }
    while (v7);
    v9 = 0x9E3779B97F4A7C55 * v5;
  }
  return bswap64(v9);
}

uint64_t sub_2263F40A0(uint64_t *a1)
{
  unsigned int v2;
  uint64_t v3;
  _DWORD **v4;
  unsigned int *v5;
  unsigned int v6;
  void **v8;

  v2 = atomic_load((unsigned int *)(sub_2263BE934(a1) + 24));
  if (v2 != 1)
  {
    v3 = operator new();
    v4 = (_DWORD **)sub_2263BE934(a1);
    *(_QWORD *)(v3 + 8) = 0;
    *(_QWORD *)(v3 + 16) = 0;
    *(_QWORD *)v3 = 0;
    sub_2263BE178((_QWORD *)v3, *v4, v4[1], ((char *)v4[1] - (char *)*v4) >> 3);
    v5 = (unsigned int *)(v3 + 24);
    atomic_store(0, (unsigned int *)(v3 + 24));
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
    v8 = (void **)*a1;
    *a1 = v3;
    sub_2263F3FBC(&v8);
  }
  return sub_2263BE934(a1);
}

void sub_2263F414C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2276980E0](v1, 0x1020C4055CCDE27);
  _Unwind_Resume(a1);
}

_QWORD *sub_2263F4170(uint64_t *a1, _DWORD **a2)
{
  uint64_t v4;
  _QWORD *result;
  unsigned int *v6;
  unsigned int v7;

  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)v4 = 0;
  result = sub_2263BE178((_QWORD *)v4, *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 3);
  v6 = (unsigned int *)(v4 + 24);
  atomic_store(0, (unsigned int *)(v4 + 24));
  *a1 = v4;
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
  return result;
}

void sub_2263F41E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2276980E0](v1, 0x1020C4055CCDE27);
  _Unwind_Resume(a1);
}

uint64_t sub_2263F420C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  result = sub_2263F42BC(a1);
  v5 = *(_QWORD *)(result + 32);
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(a2 + 32) = v5;
  v6 = *(_QWORD *)(result + 16);
  v7 = *(_OWORD *)result;
  v8 = *(_QWORD *)(a2 + 16);
  *(_OWORD *)result = *(_OWORD *)a2;
  *(_QWORD *)(result + 16) = v8;
  *(_OWORD *)a2 = v7;
  *(_QWORD *)(a2 + 16) = v6;
  v9 = *(_QWORD *)(result + 24);
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(a2 + 24) = v9;
  v10 = a1[1];
  if (v10 && (a1[1] & 3) != 3)
    result = (*(uint64_t (**)(uint64_t *))((v10 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  a1[1] = 0;
  return result;
}

void sub_2263F42A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2263AC71C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2263F42BC(uint64_t *a1)
{
  uint64_t v2;
  _QWORD v4[3];

  v4[2] = *MEMORY[0x24BDAC8D0];
  v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(_QWORD *__return_ptr, uint64_t *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_2263AD3FC(a1, v4);
    sub_2263AD568((uint64_t)v4);
  }
  return sub_2263CB6A4(a1);
}

std::type_info *sub_2263F434C@<X0>(_QWORD *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  sub_2263B0700(a2, a1);
  return sub_2263C0244(a2);
}

void sub_2263F4380(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2263AD568(v1);
  _Unwind_Resume(a1);
}

std::type_info *sub_2263F4394@<X0>(_QWORD *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  sub_2263B0700(a2, a1);
  return sub_2263C0504(a2);
}

void sub_2263F43C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2263AD568(v1);
  _Unwind_Resume(a1);
}

std::type_info *sub_2263F43DC@<X0>(_QWORD *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  sub_2263B0700(a2, a1);
  return sub_2263C07C4(a2);
}

void sub_2263F4410(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2263AD568(v1);
  _Unwind_Resume(a1);
}

std::type_info *sub_2263F4424@<X0>(_QWORD *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  sub_2263B0700(a2, a1);
  return sub_2263C0F34(a2);
}

void sub_2263F4458(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2263AD568(v1);
  _Unwind_Resume(a1);
}

std::type_info *sub_2263F446C@<X0>(_QWORD *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  sub_2263B0700(a2, a1);
  return sub_2263C1154(a2);
}

void sub_2263F44A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2263AD568(v1);
  _Unwind_Resume(a1);
}

std::type_info *sub_2263F44B4@<X0>(_QWORD *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  sub_2263B0700(a2, a1);
  return sub_2263AAB7C(a2);
}

void sub_2263F44E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2263AD568(v1);
  _Unwind_Resume(a1);
}

std::type_info *sub_2263F44FC@<X0>(_QWORD *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  sub_2263B0700(a2, a1);
  return sub_2263C1520(a2);
}

void sub_2263F4530(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2263AD568(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2263F4544(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 26)
    return 1;
  if ((v1 & 4) != 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_24EDD8A08);
  else
    return 0;
}

uint64_t sub_2263F457C(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;

  if ((sub_2263F4544(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet();
  v2 = *((_QWORD *)a1 + 1);
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    return sub_2263F46CC((uint64_t *)a1);
}

std::type_info *sub_2263F45E4@<X0>(_QWORD *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  sub_2263B0700(a2, a1);
  return sub_2263F470C(a2);
}

void sub_2263F4618(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2263AD568(v1);
  _Unwind_Resume(a1);
}

double sub_2263F462C@<D0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  double result;

  v2 = operator new();
  result = 0.0;
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_QWORD *)(v2 + 32) = 0;
  *a1 = v2;
  a1[1] = (uint64_t)sub_2263F4684;
  a1[2] = (uint64_t)&stru_24EDD8A08;
  return result;
}

uint64_t sub_2263F4684(uint64_t result)
{
  if (result)
  {
    sub_2263AC71C(result);
    JUMPOUT(0x2276980E0);
  }
  return result;
}

uint64_t sub_2263F46CC(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (!result)
    __assert_rtn("operator->", "intrusive_ptr.hpp", 199, "px != 0");
  return result;
}

std::type_info *sub_2263F470C(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  std::type_info *v1;
  const pxrInternal__aapl__pxrReserved__::VtValue *v2;
  _QWORD v4[3];

  v1 = (std::type_info *)a1;
  v4[2] = *MEMORY[0x24BDAC8D0];
  if ((sub_2263F4544(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast((pxrInternal__aapl__pxrReserved__::VtValue *)&stru_24EDD8A08, v1, v2);
    v1 = (std::type_info *)sub_2263AD3FC(v1, v4);
    sub_2263AD568((uint64_t)v4);
  }
  return v1;
}

std::type_info *sub_2263F4794@<X0>(_QWORD *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  sub_2263B0700(a2, a1);
  return sub_2263C1BB0(a2);
}

void sub_2263F47C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2263AD568(v1);
  _Unwind_Resume(a1);
}

std::type_info *sub_2263F47DC@<X0>(_QWORD *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  sub_2263B0700(a2, a1);
  return sub_2263C1E70(a2);
}

void sub_2263F4810(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2263AD568(v1);
  _Unwind_Resume(a1);
}

std::type_info *sub_2263F4824@<X0>(_QWORD *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  sub_2263B0700(a2, a1);
  return sub_2263C2260(a2);
}

void sub_2263F4858(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2263AD568(v1);
  _Unwind_Resume(a1);
}

std::type_info *sub_2263F486C@<X0>(_QWORD *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  sub_2263B0700(a2, a1);
  return sub_2263C266C(a2);
}

void sub_2263F48A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2263AD568(v1);
  _Unwind_Resume(a1);
}

std::type_info *sub_2263F48B4@<X0>(_QWORD *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  sub_2263B0700(a2, a1);
  return sub_2263C17A0(a2);
}

void sub_2263F48E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2263AD568(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2263F48FC(uint64_t a1, unint64_t a2)
{
  _OWORD v5[4];
  __int128 *v6;

  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  memset(v5, 0, sizeof(v5));
  sub_2263AD1C8((_QWORD *)a1);
  v6 = v5;
  sub_2263F4970((unint64_t *)a1, a2, &v6);
  return a1;
}

void sub_2263F4958(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2263AC71C(v1);
  _Unwind_Resume(a1);
}

void sub_2263F4970(unint64_t *a1, unint64_t a2, __int128 **a3)
{
  unint64_t v3;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 *v16;
  unint64_t v17;
  _OWORD *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  __int128 *v26;
  unint64_t *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 *v38;
  unint64_t v39;
  _OWORD *v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;

  v3 = *a1;
  if (*a1 == a2)
    return;
  if (!a2)
    goto LABEL_18;
  v7 = (unint64_t *)a1[4];
  if (v7)
  {
    if (!a1[3])
    {
      v8 = atomic_load(v7 - 2);
      if (v8 == 1)
      {
        if (v3 < a2)
        {
          v9 = a1[4];
          if (*(_QWORD *)(v9 - 8) < a2)
          {
            v10 = sub_2263F4B64((uint64_t)a1, a2);
            v7 = v10;
            if (v3)
            {
              v11 = 0;
              do
              {
                v12 = &v10[v11 / 8];
                v13 = *(_OWORD *)(v9 + v11);
                v14 = *(_OWORD *)(v9 + v11 + 16);
                v15 = *(_OWORD *)(v9 + v11 + 48);
                *((_OWORD *)v12 + 2) = *(_OWORD *)(v9 + v11 + 32);
                *((_OWORD *)v12 + 3) = v15;
                *(_OWORD *)v12 = v13;
                *((_OWORD *)v12 + 1) = v14;
                v11 += 64;
              }
              while (v3 << 6 != v11);
            }
          }
          v16 = *a3;
          v17 = v3 << 6;
          do
          {
            v18 = (_OWORD *)((char *)v7 + v17);
            v19 = *v16;
            v20 = v16[1];
            v21 = v16[3];
            v18[2] = v16[2];
            v18[3] = v21;
            *v18 = v19;
            v18[1] = v20;
            v17 += 64;
          }
          while (a2 << 6 != v17);
        }
        v22 = v7;
        goto LABEL_29;
      }
      v7 = (unint64_t *)a1[4];
    }
    if (v3 >= a2)
      v31 = a2;
    else
      v31 = *a1;
    v32 = sub_2263F4B64((uint64_t)a1, a2);
    v22 = v32;
    if (v31)
    {
      v33 = v31 << 6;
      v34 = v32;
      do
      {
        v35 = *(_OWORD *)v7;
        v36 = *((_OWORD *)v7 + 1);
        v37 = *((_OWORD *)v7 + 3);
        *((_OWORD *)v34 + 2) = *((_OWORD *)v7 + 2);
        *((_OWORD *)v34 + 3) = v37;
        *(_OWORD *)v34 = v35;
        *((_OWORD *)v34 + 1) = v36;
        v34 += 8;
        v7 += 8;
        v33 -= 64;
      }
      while (v33);
    }
    if (v3 < a2)
    {
      v38 = *a3;
      v39 = v3 << 6;
      do
      {
        v40 = (_OWORD *)((char *)v32 + v39);
        v41 = *v38;
        v42 = v38[1];
        v43 = v38[3];
        v40[2] = v38[2];
        v40[3] = v43;
        *v40 = v41;
        v40[1] = v42;
        v39 += 64;
      }
      while (a2 << 6 != v39);
    }
    goto LABEL_29;
  }
  v23 = a2 << 6;
  if ((a2 << 6) / a2 != 64)
  {
LABEL_18:
    sub_2263AD1C8(a1);
    return;
  }
  v24 = sub_2263F4B64((uint64_t)a1, a2);
  v22 = v24;
  v25 = 0;
  v26 = *a3;
  do
  {
    v27 = &v24[v25 / 8];
    v28 = *v26;
    v29 = v26[1];
    v30 = v26[3];
    *((_OWORD *)v27 + 2) = v26[2];
    *((_OWORD *)v27 + 3) = v30;
    *(_OWORD *)v27 = v28;
    *((_OWORD *)v27 + 1) = v29;
    v25 += 64;
  }
  while (v23 != v25);
LABEL_29:
  if (v22 != (unint64_t *)a1[4])
  {
    sub_2263AC71C((uint64_t)a1);
    a1[4] = (unint64_t)v22;
  }
  *a1 = a2;
}

_QWORD *sub_2263F4B64(uint64_t a1, unint64_t a2)
{
  size_t v3;
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;

  v7 = 0;
  v8 = 0;
  sub_2263AC890((uint64_t)&v7);
  if (a2 >> 58)
    v3 = -1;
  else
    v3 = (a2 << 6) | 0x10;
  v4 = operator new(v3);
  *v4 = 1;
  v4[1] = a2;
  while (1)
  {
    v5 = v8;
    LODWORD(v8) = v8 - 1;
    if (!v5)
      break;
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End();
  }
  return v4 + 2;
}

void sub_2263F4BE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2263AC840((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2263F4C00(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this)
{
  uint64_t v1;
  unint64_t v3;
  __int128 *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _OWORD *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  v1 = *((_QWORD *)this + 4);
  if (v1)
  {
    if (*((_QWORD *)this + 3) || (v3 = atomic_load((unint64_t *)(v1 - 16)), v3 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4f>::_DetachIfNotUnique() [T = pxrInternal__aapl__pxrReserved__::GfMatrix4f]");
      v4 = (__int128 *)*((_QWORD *)this + 4);
      v5 = *(_QWORD *)this;
      v6 = sub_2263F4B64((uint64_t)this, *(_QWORD *)this);
      v7 = v6;
      if (v5)
      {
        v8 = v5 << 6;
        v9 = v6;
        do
        {
          v10 = *v4;
          v11 = v4[1];
          v12 = v4[3];
          v9[2] = v4[2];
          v9[3] = v12;
          *v9 = v10;
          v9[1] = v11;
          v9 += 4;
          v4 += 4;
          v8 -= 64;
        }
        while (v8);
      }
      sub_2263AC71C((uint64_t)this);
      *((_QWORD *)this + 4) = v7;
    }
  }
}

uint64_t *sub_2263F4CA0(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t *sub_2263F4CC8(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_2263F4F00(a1);
}

uint64_t sub_2263F4CD8(uint64_t *a1)
{
  sub_2263F46CC(a1);
  return 1;
}

unint64_t sub_2263F4CF0(uint64_t *a1)
{
  uint64_t *v1;
  char v3;

  v1 = (uint64_t *)sub_2263F46CC(a1);
  return sub_2263F4F68((uint64_t)&v3, v1);
}

uint64_t sub_2263F4D18(uint64_t *a1, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t v4;

  v3 = (uint64_t *)sub_2263F46CC(a1);
  v4 = sub_2263F46CC(a2);
  return sub_2263F55BC(v3, v4);
}

uint64_t sub_2263F4D4C(uint64_t *a1, uint64_t a2)
{
  uint64_t *v3;

  v3 = (uint64_t *)sub_2263F46CC(a1);
  return sub_2263F55BC(v3, a2);
}

uint64_t sub_2263F4D74(uint64_t *a1)
{
  sub_2263F46CC(a1);
  return 0;
}

uint64_t sub_2263F4D90(uint64_t *a1, uint64_t a2)
{
  sub_2263F46CC(a1);
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray();
  return a2;
}

std::type_info *sub_2263F4DDC(uint64_t *a1)
{
  sub_2263F46CC(a1);
  return &stru_24EDD8A08;
}

uint64_t sub_2263F4DF8(uint64_t *a1)
{
  sub_2263F46CC(a1);
  return 1;
}

void *sub_2263F4E10(uint64_t *a1)
{
  sub_2263F46CC(a1);
  return &unk_24EDD8AD8;
}

uint64_t sub_2263F4E30(uint64_t *a1)
{
  return *(_QWORD *)sub_2263F46CC(a1);
}

BOOL sub_2263F4E48(uint64_t *a1, uint64_t a2)
{
  sub_2263F46CC(a1);
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__7VtArrayINS_10GfMatrix4fEEE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_2263F4E88(uint64_t *a1)
{
  const std::type_info *v1;

  sub_2263F46CC(a1);
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24EDD8A08, v1);
}

std::type_info *sub_2263F4EAC(uint64_t *a1)
{
  sub_2263F46CC(a1);
  return &stru_24EDD8A08;
}

uint64_t sub_2263F4ECC@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;

  v3 = sub_2263F46CC(a1);
  a2[1] = (uint64_t)&off_24EDD8A20;
  return sub_2263B131C(a2, v3);
}

uint64_t *sub_2263F4F00(uint64_t *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *a1;
  if (*a1)
  {
    v3 = (unsigned int *)(v2 + 40);
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      __dmb(9u);
      sub_2263AC71C(v2);
      MEMORY[0x2276980E0](v2, 0x1020C40874388CCLL);
    }
  }
  return a1;
}

unint64_t sub_2263F4F68(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  float *v3;
  float *v4;
  unint64_t v5;
  _QWORD v7[2];

  v2 = *a2;
  v7[0] = v2;
  v7[1] = 1;
  if (v2)
  {
    v3 = (float *)a2[4];
    do
    {
      --v2;
      v4 = v3 + 16;
      sub_2263F4FDC((uint64_t)v7, v3);
      v3 = v4;
    }
    while (v2);
    v5 = 0x9E3779B97F4A7C55 * v7[0];
  }
  else
  {
    v5 = 0;
  }
  return bswap64(v5);
}

uint64_t sub_2263F4FDC(uint64_t a1, float *a2)
{
  uint64_t result;
  unint64_t v4;
  _QWORD v5[2];

  v5[0] = 0;
  v5[1] = 0;
  result = sub_2263F50A0((uint64_t)v5, a2, a2 + 1, a2 + 2, a2 + 3, a2 + 4, a2 + 5, a2 + 6, a2 + 7, a2 + 8, a2 + 9, a2 + 10, a2 + 11, a2 + 12, a2 + 13, a2 + 14, a2 + 15);
  v4 = bswap64(0x9E3779B97F4A7C55 * v5[0]);
  if (*(_BYTE *)(a1 + 8))
    v4 += (*(_QWORD *)a1 + v4 + (*(_QWORD *)a1 + v4) * (*(_QWORD *)a1 + v4)) >> 1;
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v4;
  return result;
}

uint64_t sub_2263F50A0(uint64_t a1, float *a2, float *a3, float *a4, float *a5, float *a6, float *a7, float *a8, float *a9, float *a10, float *a11, float *a12, float *a13, float *a14, float *a15, float *a16, float *a17)
{
  float v17;
  unint64_t v18;

  v17 = *a2;
  if (*a2 == 0.0)
    v17 = 0.0;
  v18 = LODWORD(v17);
  if (*(_BYTE *)(a1 + 8))
    v18 = ((*(_QWORD *)a1
          + LODWORD(v17)
          + (*(_QWORD *)a1 + LODWORD(v17)) * (*(_QWORD *)a1 + (unint64_t)LODWORD(v17))) >> 1)
        + LODWORD(v17);
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v18;
  return sub_2263F5124(a1, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17);
}

uint64_t sub_2263F5124(uint64_t a1, float *a2, float *a3, float *a4, float *a5, float *a6, float *a7, float *a8, float *a9, float *a10, float *a11, float *a12, float *a13, float *a14, float *a15, float *a16)
{
  float v16;
  unint64_t v17;

  v16 = *a2;
  if (*a2 == 0.0)
    v16 = 0.0;
  v17 = LODWORD(v16);
  if (*(_BYTE *)(a1 + 8))
    v17 = ((*(_QWORD *)a1
          + LODWORD(v16)
          + (*(_QWORD *)a1 + LODWORD(v16)) * (*(_QWORD *)a1 + (unint64_t)LODWORD(v16))) >> 1)
        + LODWORD(v16);
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v17;
  return sub_2263F51A4(a1, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16);
}

uint64_t sub_2263F51A4(uint64_t a1, float *a2, float *a3, float *a4, float *a5, float *a6, float *a7, float *a8, float *a9, float *a10, float *a11, float *a12, float *a13, float *a14, float *a15)
{
  float v15;
  unint64_t v16;

  v15 = *a2;
  if (*a2 == 0.0)
    v15 = 0.0;
  v16 = LODWORD(v15);
  if (*(_BYTE *)(a1 + 8))
    v16 = ((*(_QWORD *)a1
          + LODWORD(v15)
          + (*(_QWORD *)a1 + LODWORD(v15)) * (*(_QWORD *)a1 + (unint64_t)LODWORD(v15))) >> 1)
        + LODWORD(v15);
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v16;
  return sub_2263F5220(a1, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15);
}

uint64_t sub_2263F5220(uint64_t a1, float *a2, float *a3, float *a4, float *a5, float *a6, float *a7, float *a8, float *a9, float *a10, float *a11, float *a12, float *a13, float *a14)
{
  float v14;
  unint64_t v15;

  v14 = *a2;
  if (*a2 == 0.0)
    v14 = 0.0;
  v15 = LODWORD(v14);
  if (*(_BYTE *)(a1 + 8))
    v15 = ((*(_QWORD *)a1
          + LODWORD(v14)
          + (*(_QWORD *)a1 + LODWORD(v14)) * (*(_QWORD *)a1 + (unint64_t)LODWORD(v14))) >> 1)
        + LODWORD(v14);
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v15;
  return sub_2263F5298(a1, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14);
}

uint64_t sub_2263F5298(uint64_t a1, float *a2, float *a3, float *a4, float *a5, float *a6, float *a7, float *a8, float *a9, float *a10, float *a11, float *a12, float *a13)
{
  float v13;
  unint64_t v14;

  v13 = *a2;
  if (*a2 == 0.0)
    v13 = 0.0;
  v14 = LODWORD(v13);
  if (*(_BYTE *)(a1 + 8))
    v14 = ((*(_QWORD *)a1
          + LODWORD(v13)
          + (*(_QWORD *)a1 + LODWORD(v13)) * (*(_QWORD *)a1 + (unint64_t)LODWORD(v13))) >> 1)
        + LODWORD(v13);
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v14;
  return sub_2263F530C(a1, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
}

uint64_t sub_2263F530C(uint64_t a1, float *a2, float *a3, float *a4, float *a5, float *a6, float *a7, float *a8, float *a9, float *a10, float *a11, float *a12)
{
  float v12;
  unint64_t v13;

  v12 = *a2;
  if (*a2 == 0.0)
    v12 = 0.0;
  v13 = LODWORD(v12);
  if (*(_BYTE *)(a1 + 8))
    v13 = ((*(_QWORD *)a1
          + LODWORD(v12)
          + (*(_QWORD *)a1 + LODWORD(v12)) * (*(_QWORD *)a1 + (unint64_t)LODWORD(v12))) >> 1)
        + LODWORD(v12);
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v13;
  return sub_2263F537C(a1, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
}

uint64_t sub_2263F537C(uint64_t a1, float *a2, float *a3, float *a4, float *a5, float *a6, float *a7, float *a8, float *a9, float *a10, float *a11)
{
  float v11;
  unint64_t v12;

  v11 = *a2;
  if (*a2 == 0.0)
    v11 = 0.0;
  v12 = LODWORD(v11);
  if (*(_BYTE *)(a1 + 8))
    v12 = ((*(_QWORD *)a1
          + LODWORD(v11)
          + (*(_QWORD *)a1 + LODWORD(v11)) * (*(_QWORD *)a1 + (unint64_t)LODWORD(v11))) >> 1)
        + LODWORD(v11);
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v12;
  return sub_2263F53E8(a1, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t sub_2263F53E8(uint64_t a1, float *a2, float *a3, float *a4, float *a5, float *a6, float *a7, float *a8, float *a9, float *a10)
{
  float v10;
  unint64_t v11;

  v10 = *a2;
  if (*a2 == 0.0)
    v10 = 0.0;
  v11 = LODWORD(v10);
  if (*(_BYTE *)(a1 + 8))
    v11 = ((*(_QWORD *)a1
          + LODWORD(v10)
          + (*(_QWORD *)a1 + LODWORD(v10)) * (*(_QWORD *)a1 + (unint64_t)LODWORD(v10))) >> 1)
        + LODWORD(v10);
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v11;
  return sub_2263F5450(a1, a3, a4, a5, a6, a7, a8, a9, a10);
}

uint64_t sub_2263F5450(uint64_t a1, float *a2, float *a3, float *a4, float *a5, float *a6, float *a7, float *a8, float *a9)
{
  float v9;
  unint64_t v10;

  v9 = *a2;
  if (*a2 == 0.0)
    v9 = 0.0;
  v10 = LODWORD(v9);
  if (*(_BYTE *)(a1 + 8))
    v10 = ((*(_QWORD *)a1 + LODWORD(v9) + (*(_QWORD *)a1 + LODWORD(v9))
                                        * (*(_QWORD *)a1 + (unint64_t)LODWORD(v9))) >> 1)
        + LODWORD(v9);
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v10;
  return sub_2263F54B4(a1, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t sub_2263F54B4(uint64_t a1, float *a2, float *a3, float *a4, float *a5, float *a6, float *a7, float *a8)
{
  float v8;
  unint64_t v9;

  v8 = *a2;
  if (*a2 == 0.0)
    v8 = 0.0;
  v9 = LODWORD(v8);
  if (*(_BYTE *)(a1 + 8))
    v9 = ((*(_QWORD *)a1 + LODWORD(v8) + (*(_QWORD *)a1 + LODWORD(v8)) * (*(_QWORD *)a1 + (unint64_t)LODWORD(v8))) >> 1)
       + LODWORD(v8);
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v9;
  return sub_2263F5510(a1, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_2263F5510(uint64_t a1, float *a2, float *a3, float *a4, float *a5, float *a6, float *a7)
{
  float v7;
  unint64_t v8;

  v7 = *a2;
  if (*a2 == 0.0)
    v7 = 0.0;
  v8 = LODWORD(v7);
  if (*(_BYTE *)(a1 + 8))
    v8 = ((*(_QWORD *)a1 + LODWORD(v7) + (*(_QWORD *)a1 + LODWORD(v7)) * (*(_QWORD *)a1 + (unint64_t)LODWORD(v7))) >> 1)
       + LODWORD(v7);
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v8;
  return sub_2263F5568(a1, a3, a4, a5, a6, a7);
}

uint64_t sub_2263F5568(uint64_t a1, float *a2, float *a3, float *a4, float *a5, float *a6)
{
  float v6;
  unint64_t v7;

  v6 = *a2;
  if (*a2 == 0.0)
    v6 = 0.0;
  v7 = LODWORD(v6);
  if (*(_BYTE *)(a1 + 8))
    v7 = ((*(_QWORD *)a1 + LODWORD(v6) + (*(_QWORD *)a1 + LODWORD(v6)) * (*(_QWORD *)a1 + (unint64_t)LODWORD(v6))) >> 1)
       + LODWORD(v6);
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v7;
  return sub_2263B27E0(a1, a3, a4, a5, a6);
}

uint64_t sub_2263F55BC(uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (a1[4] == *(_QWORD *)(a2 + 32) && sub_2263B1164((uint64_t)a1, a2) && a1[3] == *(_QWORD *)(a2 + 24))
    return 1;
  result = sub_2263B1164((uint64_t)a1, a2);
  if (!(_DWORD)result)
    return result;
  v5 = *a1;
  if (!*a1)
    return 1;
  v6 = a1[4];
  v7 = *(_QWORD *)(a2 + 32);
  v8 = (v5 << 6) - 64;
  do
  {
    result = pxrInternal__aapl__pxrReserved__::GfMatrix4f::operator==();
    if (!(_DWORD)result)
      break;
    v6 += 64;
    v7 += 64;
    v9 = v8;
    v8 -= 64;
  }
  while (v9);
  return result;
}

uint64_t sub_2263F5668(uint64_t *a1)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v12;

  v2 = atomic_load((unsigned int *)(sub_2263F46CC(a1) + 40));
  if (v2 != 1)
  {
    v3 = operator new();
    v4 = sub_2263F46CC(a1);
    v5 = *(_OWORD *)(v4 + 16);
    *(_OWORD *)v3 = *(_OWORD *)v4;
    *(_OWORD *)(v3 + 16) = v5;
    v6 = *(_QWORD *)(v4 + 32);
    *(_QWORD *)(v3 + 32) = v6;
    if (v6)
    {
      v7 = (unint64_t *)(v6 - 16);
      if (*(_QWORD *)(v3 + 24))
        v7 = *(unint64_t **)(v3 + 24);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
    v9 = (unsigned int *)(v3 + 40);
    atomic_store(0, (unsigned int *)(v3 + 40));
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    v12 = *a1;
    *a1 = v3;
    sub_2263F4F00(&v12);
  }
  return sub_2263F46CC(a1);
}

uint64_t sub_2263F572C(_QWORD *a1)
{
  *a1 += 64;
  return pxrInternal__aapl__pxrReserved__::operator<<();
}

uint64_t sub_2263F5744(uint64_t a1, float a2)
{
  int v4;
  double v5;
  uint64_t (**v6)(_QWORD);
  uint64_t v7;
  unsigned int v8;
  float v9;
  int v10;
  void *v11;
  _DWORD *v12;
  _DWORD *v13;
  int v14;
  int v15;
  uint64_t v16;
  signed int v17;
  int v18;
  int v19;
  char *v20;
  char *v21;
  int v22;
  _DWORD *v23;
  int v24;
  int v25;
  int v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  float v32;
  float v33;
  float v34;
  float v35;
  uint64_t v36;
  float v37;
  uint64_t v38;
  float v39;
  int v40;
  int v41;
  char v42;
  uint64_t v43;
  _DWORD *v44;
  char *v45;
  _DWORD *v46;
  uint64_t v47;
  uint64_t v48;
  float v49;
  float v50;
  int v51;
  unsigned int v52;
  float v53;
  uint64_t v54;
  uint64_t v55;
  float v56;
  float v57;
  float v58;
  uint64_t v59;
  int v60;
  float v61;
  float v62;
  float v63;
  float v64;
  _BOOL4 v65;
  BOOL v66;
  float v67;
  float v68;
  int v69;
  float v70;
  float v71;
  int v72;
  char *v73;
  void *v74;
  int *v75;
  int *v76;
  int *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  float *v82;
  int v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  int v87;
  float *v88;
  _DWORD *v89;
  int v90;
  uint64_t v91;
  uint64_t i;
  int v93;
  uint64_t j;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  int v102;
  char *v103;
  uint64_t k;
  uint64_t v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  float v117;
  uint64_t v118;
  float v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  int v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  int v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  float v135;
  uint64_t v136;
  float v137;
  uint64_t v138;
  int v139;
  uint64_t v140;
  int v141;
  int v142;
  int v143;
  uint64_t v144;
  float v145;
  uint64_t v146;
  float v147;
  uint64_t v148;
  int v149;
  int v150;
  uint64_t v151;
  _DWORD *v152;
  int *v153;
  int v154;
  int v155;
  _DWORD *v156;
  int *v157;
  int v158;
  int v159;
  unsigned int v160;
  uint64_t v161;
  uint64_t v162;
  _DWORD *v163;
  int v164;
  uint64_t v165;
  uint64_t v166;
  BOOL v167;
  uint64_t v168;
  uint64_t v169;
  int v170;
  _DWORD *v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  _DWORD *v176;
  uint64_t v177;
  uint64_t v178;
  int *v179;
  int v180;
  float v181;
  float32x2_t v182;
  int v183;
  int v184;
  float32x2_t v185;
  float v186;
  int v187;
  uint64_t v188;
  int v189;
  uint64_t v190;
  int v191;
  float v192;
  float v193;
  float v194;
  float v195;
  float v196;
  int v197;
  float v198;
  float32x2_t v199;
  float32x2_t v200;
  float32x2_t v201;
  float v202;
  float v203;
  float v204;
  float32x2_t *v205;
  float v206;
  float32x2_t v207;
  float v208;
  float v209;
  _DWORD *v210;
  float v211;
  float *v212;
  float v213;
  float v214;
  int v216;
  uint64_t v217;
  uint64_t v218;
  int v219;
  int v220;
  float v221;
  float v222;
  float v223;
  uint64_t v224;
  _DWORD *v225;
  unsigned int v226;
  char *v227;
  _DWORD *v228;
  uint64_t v229;
  _DWORD *v230;
  uint64_t v231;
  uint64_t v232;
  _DWORD *v233;
  int v234;
  uint64_t v235;
  uint64_t v236;
  int v237;
  int v238;
  int v239;
  int v240;
  uint64_t v241;
  int v242;
  uint64_t v243;
  uint64_t v244;
  int v245;
  uint64_t v246;
  _DWORD *v247;
  _DWORD *v248;
  uint64_t v249;
  uint64_t v250;
  int *v251;
  int v252;
  int v253;
  int v254;
  int *v255;
  int v256;
  int *v257;
  int v258;
  uint64_t v261;
  char *v262;
  _DWORD *v264;
  int v265;
  uint64_t v266;
  int v267;
  int v268;
  int *v269;
  int v270;
  _DWORD *v271;
  int v272;
  uint64_t v275;
  int v276;
  BOOL v277;
  int v278;
  char v279;
  _DWORD *v280;
  char v281;
  int v282;
  int v283;
  uint64_t m;
  unint64_t v285;
  _DWORD *v286;
  uint64_t v287;
  unint64_t v288;
  unsigned int v289;
  uint64_t v290;
  int v291;
  int v292;
  _DWORD *v293;
  unint64_t v294;
  unint64_t v295;
  int v296;
  void *v297;
  void *v298;
  void *v299;
  BOOL v300;
  void *v301;
  int v303;
  void *v304;
  uint64_t v305;
  uint64_t v306;
  _OWORD *v307;
  int v308;
  void *v309;
  int v310;
  uint64_t v311;
  int v312;
  __n128 v313;
  int v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  void (*v318)(uint64_t, __int128 *, _DWORD *, _QWORD, uint64_t, uint64_t, float, float);
  void (*v319)(uint64_t, __int128 *, uint64_t, uint64_t, __n128);
  int v320;
  int v321;
  int v322;
  float v323;
  int v324;
  int *v325;
  char *v326;
  uint64_t v327;
  _DWORD *v328;
  uint64_t v329;
  uint64_t v330;
  _DWORD *v331;
  _DWORD *v332;
  float v333;
  float v334;
  float v335;
  float v336;
  size_t v337;
  float v338;
  float v339;
  float v340;
  float v341;
  float v342;
  float v343;
  float v344;
  float v345;
  uint64_t v346;
  float v347;
  float v348;
  float32x2_t v349;
  _DWORD v350[3];
  __int128 v351;
  __int128 v352;
  __int128 v353;
  __int128 v354;
  __int128 v355;
  uint64_t v356;
  uint64_t v357;

  v357 = *MEMORY[0x24BDAC8D0];
  v4 = (**(uint64_t (***)(uint64_t))a1)(a1);
  v5 = cos((float)((float)(a2 * 3.1416) / 180.0));
  v6 = *(uint64_t (***)(_QWORD))a1;
  if (!**(_QWORD **)a1 || !v6[1] || !v6[2] || !v6[3] || !v6[4] || v4 < 1)
    return 0;
  v7 = 0;
  v8 = 0;
  v9 = v5;
  v323 = v9;
  do
  {
    v10 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 8))(a1, v7);
    if (v10 == 4)
    {
      v8 += 2;
    }
    else if (v10 == 3)
    {
      ++v8;
    }
    v7 = (v7 + 1);
  }
  while (v4 != (_DWORD)v7);
  if ((int)v8 < 1)
    return 0;
  v11 = malloc_type_malloc(12 * v8, 0x38CB402uLL);
  v12 = malloc_type_malloc(88 * v8, 0x1020040F04E29DEuLL);
  v13 = v12;
  if (!v11 || !v12)
  {
    if (v11)
      free(v11);
    if (!v13)
      return 0;
    goto LABEL_336;
  }
  v337 = 12 * v8;
  v322 = v8 - 1;
  v332 = v11;
  v320 = v4;
  v324 = v8;
  v331 = v12;
  if ((**(int (***)(uint64_t))a1)(a1) < 1)
  {
    v15 = 0;
  }
  else
  {
    v14 = 0;
    v15 = 0;
    v16 = 0;
    v17 = 0;
    do
    {
      v18 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 8))(a1, v16);
      if ((v18 - 5) >= 0xFFFFFFFE)
      {
        v19 = v18;
        v20 = (char *)&v13[22 * v17];
        *((_DWORD *)v20 + 18) = v16;
        *((_DWORD *)v20 + 20) = v15;
        if (v18 == 3)
        {
          v21 = (char *)&v13[22 * v17];
          *((_WORD *)v21 + 42) = 256;
          v21[86] = 2;
          v22 = 3 * v17;
          v23 = v332;
          v332[3 * v17] = v14;
          v332[3 * v17 + 1] = v14 + 1;
          v24 = v14 + 2;
          v25 = 1;
        }
        else
        {
          v26 = 4 * v16;
          v27 = (char *)&v13[22 * v17 + 22];
          *((_DWORD *)v27 + 18) = v16;
          *((_DWORD *)v27 + 20) = v15;
          *(_QWORD *)&v351 = 0;
          (*(void (**)(uint64_t, __int128 *, _QWORD, _QWORD))(*(_QWORD *)a1 + 32))(a1, &v351, (v14 >> 2), 0);
          v28 = v351;
          *(_QWORD *)&v351 = 0;
          (*(void (**)(uint64_t, __int128 *, _QWORD, uint64_t))(*(_QWORD *)a1 + 32))(a1, &v351, (v14 >> 2), 1);
          v29 = v351;
          *(_QWORD *)&v351 = 0;
          v30 = 2;
          (*(void (**)(uint64_t, __int128 *, _QWORD, uint64_t))(*(_QWORD *)a1 + 32))(a1, &v351, (v14 >> 2), 2);
          v31 = v351;
          *(_QWORD *)&v351 = 0;
          (*(void (**)(uint64_t, __int128 *, _QWORD, uint64_t))(*(_QWORD *)a1 + 32))(a1, &v351, (v14 >> 2), 3);
          v32 = (float)((float)(*((float *)&v31 + 1) - *((float *)&v28 + 1))
                      * (float)(*((float *)&v31 + 1) - *((float *)&v28 + 1)))
              + (float)((float)(*(float *)&v31 - *(float *)&v28) * (float)(*(float *)&v31 - *(float *)&v28));
          v33 = (float)((float)(*((float *)&v351 + 1) - *((float *)&v29 + 1))
                      * (float)(*((float *)&v351 + 1) - *((float *)&v29 + 1)))
              + (float)((float)(*(float *)&v351 - *(float *)&v29) * (float)(*(float *)&v351 - *(float *)&v29));
          if (v32 < v33)
            goto LABEL_25;
          if (v33 < v32)
            goto LABEL_24;
          DWORD2(v351) = 0;
          *(_QWORD *)&v351 = 0;
          (*(void (**)(uint64_t, __int128 *, _QWORD, _QWORD))(*(_QWORD *)a1 + 16))(a1, &v351, (v14 >> 2), 0);
          v34 = *((float *)&v351 + 1);
          v340 = *(float *)&v351;
          v35 = *((float *)&v351 + 2);
          DWORD2(v351) = 0;
          *(_QWORD *)&v351 = 0;
          (*(void (**)(uint64_t, __int128 *, _QWORD, uint64_t))(*(_QWORD *)a1 + 16))(a1, &v351, (v14 >> 2), 1);
          v36 = v351;
          v37 = *((float *)&v351 + 2);
          DWORD2(v351) = 0;
          *(_QWORD *)&v351 = 0;
          (*(void (**)(uint64_t, __int128 *, _QWORD, uint64_t))(*(_QWORD *)a1 + 16))(a1, &v351, (v14 >> 2), 2);
          v38 = v351;
          v39 = *((float *)&v351 + 2);
          DWORD2(v351) = 0;
          *(_QWORD *)&v351 = 0;
          (*(void (**)(uint64_t, __int128 *, _QWORD, uint64_t))(*(_QWORD *)a1 + 16))(a1, &v351, (v14 >> 2), 3);
          if ((float)((float)((float)((float)(*((float *)&v351 + 1) - *((float *)&v36 + 1))
                                     * (float)(*((float *)&v351 + 1) - *((float *)&v36 + 1)))
                             + (float)((float)(*(float *)&v351 - *(float *)&v36)
                                     * (float)(*(float *)&v351 - *(float *)&v36)))
                     + (float)((float)(*((float *)&v351 + 2) - v37) * (float)(*((float *)&v351 + 2) - v37))) >= (float)((float)((float)((float)(*((float *)&v38 + 1) - v34) * (float)(*((float *)&v38 + 1) - v34)) + (float)((float)(*(float *)&v38 - v340) * (float)(*(float *)&v38 - v340))) + (float)((float)(v39 - v35) * (float)(v39 - v35))))
          {
LABEL_25:
            v42 = 0;
            v40 = v14;
            v43 = v17 + 1;
            v41 = (4 * v16) | 2;
          }
          else
          {
LABEL_24:
            v40 = v26 | 1;
            v41 = v14 + 3;
            v42 = 1;
            v30 = 3;
            v43 = v17 + 1;
          }
          v24 = v26 | 3;
          v44 = &v331[22 * v17];
          *((_WORD *)v44 + 42) = 256;
          *((_BYTE *)v44 + 86) = v30;
          v13 = v331;
          v23 = v332;
          v332[3 * v17] = v14;
          v45 = (char *)&v332[3 * v17];
          *((_DWORD *)v45 + 1) = v14 + 1;
          *((_DWORD *)v45 + 2) = v41;
          v46 = &v331[22 * v43];
          *((_BYTE *)v46 + 84) = v42;
          *(_WORD *)((char *)v46 + 85) = 770;
          v22 = 3 * v43;
          v332[3 * (_DWORD)v43] = v40;
          v332[3 * (int)v43 + 1] = v14 + 2;
          v25 = 2;
          v8 = v324;
        }
        v23[v22 + 2] = v24;
        v17 += v25;
        if (v17 > (int)v8)
          sub_226408E90();
        v15 += v19;
      }
      v16 = (v16 + 1);
      v14 += 4;
    }
    while ((int)v16 < (**(int (***)(uint64_t))a1)(a1));
  }
  v47 = v8;
  v48 = 19;
  v327 = v8;
  do
  {
    v13[v48] = 0;
    v48 += 22;
    --v47;
  }
  while (v47);
  DWORD2(v351) = 0;
  *(_QWORD *)&v351 = 0;
  (*(void (**)(uint64_t, __int128 *, _QWORD, _QWORD))(*(_QWORD *)a1 + 16))(a1, &v351, 0, 0);
  v49 = *((float *)&v351 + 1);
  v50 = *(float *)&v351;
  v51 = 3 * v8;
  if ((int)(3 * v8) <= 2)
    v52 = 2;
  else
    v52 = 3 * v8;
  v53 = *((float *)&v351 + 2);
  v54 = 4 * v52;
  v55 = 4;
  v56 = *((float *)&v351 + 2);
  v57 = *((float *)&v351 + 1);
  v58 = *(float *)&v351;
  v59 = (uint64_t)v332;
  do
  {
    v60 = v332[(unint64_t)v55 / 4];
    DWORD2(v351) = 0;
    *(_QWORD *)&v351 = 0;
    (*(void (**)(uint64_t, __int128 *, _QWORD, _QWORD))(*(_QWORD *)a1 + 16))(a1, &v351, (v60 >> 2), v60 & 3);
    if (v50 < *(float *)&v351)
      v61 = *(float *)&v351;
    else
      v61 = v50;
    if (v58 <= *(float *)&v351)
      v50 = v61;
    else
      v58 = *(float *)&v351;
    if (v49 < *((float *)&v351 + 1))
      v62 = *((float *)&v351 + 1);
    else
      v62 = v49;
    if (v57 <= *((float *)&v351 + 1))
      v49 = v62;
    else
      v57 = *((float *)&v351 + 1);
    if (v56 <= *((float *)&v351 + 2))
    {
      if (v53 < *((float *)&v351 + 2))
        v53 = *((float *)&v351 + 2);
    }
    else
    {
      v56 = *((float *)&v351 + 2);
    }
    v55 += 4;
  }
  while (v54 != v55);
  v63 = v50 - v58;
  v64 = v53 - v56;
  v65 = (float)(v49 - v57) > (float)(v53 - v56) && (float)(v49 - v57) > (float)(v50 - v58);
  v66 = v64 <= v63;
  if (v64 > v63)
    v67 = v56;
  else
    v67 = v58;
  if (v66)
    v68 = v50;
  else
    v68 = v53;
  v69 = v66;
  if (v65)
    v70 = v57;
  else
    v70 = v67;
  if (v65)
    v71 = v49;
  else
    v71 = v68;
  if (v65)
    v72 = 0;
  else
    v72 = v69;
  v73 = (char *)malloc_type_malloc(v337, 0xDC00542EuLL);
  v74 = malloc_type_malloc(0x2000uLL, 0x100004052888210uLL);
  v75 = (int *)malloc_type_malloc(0x2000uLL, 0x100004052888210uLL);
  v76 = (int *)malloc_type_malloc(0x2000uLL, 0x100004052888210uLL);
  v77 = v76;
  v321 = v15;
  if (v73 && v74 && v75 && v76)
  {
    v326 = v73;
    bzero(v74, 0x2000uLL);
    bzero(v77, 0x2000uLL);
    v78 = 0;
    if (v51 <= 1)
      v79 = 1;
    else
      v79 = v51;
    v346 = v79;
    v80 = 4 * v79;
    do
    {
      v81 = *(_DWORD *)(v59 + v78);
      DWORD2(v351) = 0;
      *(_QWORD *)&v351 = 0;
      (*(void (**)(uint64_t, __int128 *, _QWORD, _QWORD))(*(_QWORD *)a1 + 16))(a1, &v351, (v81 >> 2), v81 & 3);
      v82 = (float *)&v351 + 1;
      if (!v65)
        v82 = (float *)&v351 + 2;
      v59 = (uint64_t)v332;
      if (v72)
        v82 = (float *)&v351;
      v83 = sub_2263F8530(v70, v71, *v82);
      ++*((_DWORD *)v74 + v83);
      v78 += 4;
    }
    while (v80 != v78);
    v84 = 0;
    v85 = 0;
    *v75 = 0;
    do
    {
      v85 += *((_DWORD *)v74 + v84);
      v75[++v84] = v85;
    }
    while (v84 != 2047);
    v86 = 0;
    v328 = v74;
    do
    {
      v87 = v332[v86];
      DWORD2(v351) = 0;
      *(_QWORD *)&v351 = 0;
      (*(void (**)(uint64_t, __int128 *, _QWORD, _QWORD))(*(_QWORD *)a1 + 16))(a1, &v351, (v87 >> 2), v87 & 3);
      v88 = (float *)&v351 + 1;
      if (!v65)
        v88 = (float *)&v351 + 2;
      v89 = v328;
      if (v72)
        v88 = (float *)&v351;
      v90 = sub_2263F8530(v70, v71, *v88);
      v91 = v77[v90];
      if ((int)v91 >= v328[v90])
        sub_226408E68();
      *(_DWORD *)&v73[4 * v75[v90] + 4 * v91] = v86;
      ++v77[v90];
      ++v86;
    }
    while (v346 != v86);
    for (i = 0; i != 2048; ++i)
    {
      if (v77[i] != v328[i])
        sub_226408E40();
    }
    v325 = v75;
    free(v77);
    v93 = *v328;
    for (j = 1; j != 2048; ++j)
    {
      if (v93 <= v328[j])
        v93 = v328[j];
    }
    v95 = (char *)malloc_type_malloc(16 * v93, 0x1000040451B5BE8uLL);
    v96 = 0;
    do
    {
      v329 = v96;
      v97 = v89[v96];
      if ((int)v97 >= 2)
      {
        v98 = &v326[4 * v325[v96]];
        if (v95)
        {
          v99 = 0;
          do
          {
            v100 = *(int *)v98;
            v98 += 4;
            v101 = *(_DWORD *)(v59 + 4 * v100);
            DWORD2(v351) = 0;
            *(_QWORD *)&v351 = 0;
            (*(void (**)(uint64_t, __int128 *, _QWORD, _QWORD))(*(_QWORD *)a1 + 16))(a1, &v351, (v101 >> 2), v101 & 3);
            v102 = DWORD2(v351);
            v103 = &v95[v99];
            *(_QWORD *)v103 = v351;
            *((_DWORD *)v103 + 2) = v102;
            *((_DWORD *)v103 + 3) = v100;
            v99 += 16;
          }
          while (16 * v97 != v99);
          sub_2263F8554(v59, (uint64_t)v95, a1, 0, (v97 - 1));
        }
        else
        {
          for (k = 0; k != v97; ++k)
          {
            v105 = *(int *)&v98[4 * k];
            v106 = *(_DWORD *)(v59 + 4 * v105);
            DWORD2(v351) = 0;
            *(_QWORD *)&v351 = 0;
            v107 = v106 & 3;
            v108 = (v106 >> 2);
            (*(void (**)(uint64_t, __int128 *, uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, &v351, v108, v107);
            v109 = v351;
            v347 = *((float *)&v351 + 2);
            DWORD2(v351) = 0;
            *(_QWORD *)&v351 = 0;
            (*(void (**)(uint64_t, __int128 *, uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(a1, &v351, v108, v107);
            v341 = *((float *)&v351 + 1);
            v343 = *(float *)&v351;
            v338 = *((float *)&v351 + 2);
            *(_QWORD *)&v351 = 0;
            v110 = v108;
            v59 = (uint64_t)v332;
            (*(void (**)(uint64_t, __int128 *, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, &v351, v110, v107);
            if (k)
            {
              v111 = 0;
              v333 = *((float *)&v351 + 1);
              v335 = *(float *)&v351;
              while (1)
              {
                v112 = *(int *)&v98[4 * v111];
                v113 = *(_DWORD *)(v59 + 4 * v112);
                DWORD2(v351) = 0;
                *(_QWORD *)&v351 = 0;
                v114 = v113 & 3;
                v115 = (v113 >> 2);
                (*(void (**)(uint64_t, __int128 *, uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, &v351, v115, v114);
                v116 = v351;
                v117 = *((float *)&v351 + 2);
                DWORD2(v351) = 0;
                *(_QWORD *)&v351 = 0;
                (*(void (**)(uint64_t, __int128 *, uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(a1, &v351, v115, v114);
                v118 = v351;
                v119 = *((float *)&v351 + 2);
                *(_QWORD *)&v351 = 0;
                (*(void (**)(uint64_t, __int128 *, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, &v351, v115, v114);
                if (*(float *)&v109 == *(float *)&v116
                  && *((float *)&v109 + 1) == *((float *)&v116 + 1)
                  && v347 == v117
                  && v343 == *(float *)&v118
                  && v341 == *((float *)&v118 + 1)
                  && v338 == v119
                  && v335 == *(float *)&v351
                  && v333 == *((float *)&v351 + 1))
                {
                  break;
                }
                ++v111;
                v59 = (uint64_t)v332;
                if (k == v111)
                  goto LABEL_129;
              }
              v59 = (uint64_t)v332;
              v332[v105] = v332[v112];
            }
LABEL_129:
            ;
          }
        }
      }
      v89 = v328;
      v96 = v329 + 1;
    }
    while (v329 != 2047);
    if (v95)
      free(v95);
    free(v326);
    free(v328);
    free(v325);
  }
  else
  {
    if (v73)
      free(v73);
    if (v74)
      free(v74);
    if (v75)
      free(v75);
    if (v77)
      free(v77);
    v120 = 0;
    v121 = 1;
    do
    {
      v122 = 0;
      v330 = v120;
      v123 = 3 * v120;
      do
      {
        v124 = *(_DWORD *)(v59 + 4 * (v122 + v123));
        DWORD2(v351) = 0;
        *(_QWORD *)&v351 = 0;
        v125 = v124 & 3;
        v126 = (v124 >> 2);
        (*(void (**)(uint64_t, __int128 *, uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, &v351, v126, v125);
        v127 = v351;
        v348 = *((float *)&v351 + 2);
        DWORD2(v351) = 0;
        *(_QWORD *)&v351 = 0;
        (*(void (**)(uint64_t, __int128 *, uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(a1, &v351, v126, v125);
        v342 = *((float *)&v351 + 1);
        v344 = *(float *)&v351;
        v339 = *((float *)&v351 + 2);
        *(_QWORD *)&v351 = 0;
        (*(void (**)(uint64_t, __int128 *, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, &v351, v126, v125);
        v128 = 0;
        v334 = *((float *)&v351 + 1);
        v336 = *(float *)&v351;
        v129 = v59;
LABEL_145:
        v130 = 0;
        while (1)
        {
          v131 = *(_DWORD *)(v129 + v130);
          DWORD2(v351) = 0;
          *(_QWORD *)&v351 = 0;
          v132 = v131 & 3;
          v133 = (v131 >> 2);
          (*(void (**)(uint64_t, __int128 *, uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, &v351, v133, v132);
          v134 = v351;
          v135 = *((float *)&v351 + 2);
          DWORD2(v351) = 0;
          *(_QWORD *)&v351 = 0;
          (*(void (**)(uint64_t, __int128 *, uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(a1, &v351, v133, v132);
          v136 = v351;
          v137 = *((float *)&v351 + 2);
          *(_QWORD *)&v351 = 0;
          (*(void (**)(uint64_t, __int128 *, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, &v351, v133, v132);
          if (*(float *)&v127 == *(float *)&v134
            && *((float *)&v127 + 1) == *((float *)&v134 + 1)
            && v348 == v135
            && v344 == *(float *)&v136
            && v342 == *((float *)&v136 + 1)
            && v339 == v137
            && v336 == *(float *)&v351
            && v334 == *((float *)&v351 + 1))
          {
            break;
          }
          v130 += 4;
          if (v130 == 12)
          {
            ++v128;
            v129 += 12;
            if (v128 == v121)
              sub_226408DA0();
            goto LABEL_145;
          }
        }
        v59 = (uint64_t)v332;
        v332[v122 + v123] = -1;
        ++v122;
      }
      while (v122 != 3);
      v120 = v330 + 1;
      ++v121;
    }
    while (v330 + 1 != v327);
  }
  v138 = 0;
  v139 = 0;
  v140 = 19;
  do
  {
    v141 = *(_DWORD *)(v59 + v138);
    v142 = *(_DWORD *)(v59 + v138 + 4);
    v143 = *(_DWORD *)(v59 + v138 + 8);
    DWORD2(v351) = 0;
    *(_QWORD *)&v351 = 0;
    (*(void (**)(uint64_t, __int128 *, _QWORD, _QWORD))(*(_QWORD *)a1 + 16))(a1, &v351, (v141 >> 2), v141 & 3);
    v144 = v351;
    v145 = *((float *)&v351 + 2);
    DWORD2(v351) = 0;
    *(_QWORD *)&v351 = 0;
    (*(void (**)(uint64_t, __int128 *, _QWORD, _QWORD))(*(_QWORD *)a1 + 16))(a1, &v351, (v142 >> 2), v142 & 3);
    v146 = v351;
    v147 = *((float *)&v351 + 2);
    DWORD2(v351) = 0;
    *(_QWORD *)&v351 = 0;
    (*(void (**)(uint64_t, __int128 *, _QWORD, _QWORD))(*(_QWORD *)a1 + 16))(a1, &v351, (v143 >> 2), v143 & 3);
    if (*(float *)&v144 == *(float *)&v146 && *((float *)&v144 + 1) == *((float *)&v146 + 1) && v145 == v147
      || *(float *)&v144 == *(float *)&v351
      && *((float *)&v144 + 1) == *((float *)&v351 + 1)
      && v145 == *((float *)&v351 + 2)
      || *(float *)&v146 == *(float *)&v351
      && *((float *)&v146 + 1) == *((float *)&v351 + 1)
      && v147 == *((float *)&v351 + 2))
    {
      v331[v140] |= 1u;
      ++v139;
    }
    v138 += 12;
    v140 += 22;
  }
  while (12 * v327 != v138);
  v148 = (v324 - v139);
  v13 = v331;
  if (v324 > 1)
  {
    v149 = 0;
    do
    {
      v150 = v149;
      v151 = v149 + 1;
      if (v331[22 * v149 + 18] == v331[22 * v149 + 40])
      {
        v152 = &v331[22 * v149];
        v155 = v152[19];
        v153 = v152 + 19;
        v154 = v155;
        v156 = &v331[22 * v151];
        v159 = v156[19];
        v157 = v156 + 19;
        v158 = v159;
        if (((v159 ^ v154) & 1) != 0)
        {
          *v153 = v154 | 2;
          *v157 = v158 | 2;
        }
        LODWORD(v151) = v150 + 2;
      }
      v149 = v151;
    }
    while ((int)v151 < v322);
  }
  if ((int)v148 < 1)
  {
    if (v324 != v139)
      sub_226408E18();
  }
  else
  {
    v160 = 0;
    v161 = 0;
    LODWORD(v162) = 1;
    do
    {
      v163 = &v331[22 * v161];
      if ((v163[19] & 1) != 0)
      {
        if ((int)v162 >= v324)
        {
          if ((int)v162 > (int)v161)
LABEL_365:
            sub_226408DC8();
LABEL_366:
          sub_226408DF0();
        }
        v165 = v59 + 4 * v160;
        do
        {
          v166 = v331[22 * (int)v162 + 19] & 1;
          v162 = v166 + (int)v162;
          if ((_DWORD)v166)
            v167 = (int)v162 < v324;
          else
            v167 = 0;
        }
        while (v167);
        if (v161 >= v162)
          goto LABEL_366;
        if ((_DWORD)v166)
          goto LABEL_365;
        v168 = 0;
        v164 = v162 + 1;
        v169 = v59 + 12 * (_DWORD)v162;
        do
        {
          v170 = *(_DWORD *)(v165 + v168);
          *(_DWORD *)(v165 + v168) = *(_DWORD *)(v169 + v168);
          *(_DWORD *)(v169 + v168) = v170;
          v168 += 4;
        }
        while (v168 != 12);
        v353 = *((_OWORD *)v163 + 2);
        v354 = *((_OWORD *)v163 + 3);
        v355 = *((_OWORD *)v163 + 4);
        v356 = *((_QWORD *)v163 + 10);
        v351 = *(_OWORD *)v163;
        v352 = *((_OWORD *)v163 + 1);
        v171 = &v331[22 * v162];
        v172 = *((_OWORD *)v171 + 1);
        *(_OWORD *)v163 = *(_OWORD *)v171;
        *((_OWORD *)v163 + 1) = v172;
        v174 = *((_OWORD *)v171 + 3);
        v173 = *((_OWORD *)v171 + 4);
        v175 = *((_OWORD *)v171 + 2);
        *((_QWORD *)v163 + 10) = *((_QWORD *)v171 + 10);
        *((_OWORD *)v163 + 3) = v174;
        *((_OWORD *)v163 + 4) = v173;
        *((_OWORD *)v163 + 2) = v175;
        *(_OWORD *)v171 = v351;
        *((_QWORD *)v171 + 10) = v356;
        *((_OWORD *)v171 + 4) = v355;
        *((_OWORD *)v171 + 3) = v354;
        *((_OWORD *)v171 + 2) = v353;
        *((_OWORD *)v171 + 1) = v352;
      }
      else if ((int)v162 <= (int)v161 + 2)
      {
        v164 = v161 + 2;
      }
      else
      {
        v164 = v162;
      }
      ++v161;
      v160 += 3;
      LODWORD(v162) = v164;
    }
    while (v161 != v148);
    v176 = v331 + 19;
    v177 = (v324 - v139);
    do
    {
      *(_QWORD *)(v176 - 19) = -1;
      *(v176 - 17) = -1;
      *(_QWORD *)(v176 - 15) = 0;
      *(_QWORD *)(v176 - 11) = 0;
      *(_QWORD *)(v176 - 13) = 0;
      *v176 |= 4u;
      *(_OWORD *)(v176 - 9) = 0uLL;
      *(_OWORD *)(v176 - 5) = 0uLL;
      v176 += 22;
      --v177;
    }
    while (v177);
    v178 = 0;
    v179 = v332 + 2;
    do
    {
      v180 = *(v179 - 2);
      DWORD2(v351) = 0;
      *(_QWORD *)&v351 = 0;
      (*(void (**)(uint64_t, __int128 *, _QWORD, _QWORD))(*(_QWORD *)a1 + 16))(a1, &v351, (v180 >> 2), v180 & 3);
      v181 = *((float *)&v351 + 2);
      v182 = (float32x2_t)v351;
      v183 = *(v179 - 1);
      DWORD2(v351) = 0;
      *(_QWORD *)&v351 = 0;
      (*(void (**)(uint64_t, __int128 *, _QWORD, _QWORD))(*(_QWORD *)a1 + 16))(a1, &v351, (v183 >> 2), v183 & 3);
      v349 = (float32x2_t)v351;
      v345 = *((float *)&v351 + 2);
      v184 = *v179;
      DWORD2(v351) = 0;
      *(_QWORD *)&v351 = 0;
      (*(void (**)(uint64_t, __int128 *, _QWORD, _QWORD))(*(_QWORD *)a1 + 16))(a1, &v351, (v184 >> 2), v184 & 3);
      v185 = (float32x2_t)v351;
      v186 = *((float *)&v351 + 2);
      v187 = *(v179 - 2);
      *(_QWORD *)&v351 = 0;
      (*(void (**)(uint64_t, __int128 *, _QWORD, _QWORD))(*(_QWORD *)a1 + 32))(a1, &v351, (v187 >> 2), v187 & 3);
      v188 = v351;
      v189 = *(v179 - 1);
      *(_QWORD *)&v351 = 0;
      (*(void (**)(uint64_t, __int128 *, _QWORD, _QWORD))(*(_QWORD *)a1 + 32))(a1, &v351, (v189 >> 2), v189 & 3);
      v190 = v351;
      v191 = *v179;
      *(_QWORD *)&v351 = 0;
      (*(void (**)(uint64_t, __int128 *, _QWORD, _QWORD))(*(_QWORD *)a1 + 32))(a1, &v351, (v191 >> 2), v191 & 3);
      v192 = *(float *)&v190 - *(float *)&v188;
      v193 = *((float *)&v190 + 1) - *((float *)&v188 + 1);
      v194 = *(float *)&v351 - *(float *)&v188;
      v195 = *((float *)&v351 + 1) - *((float *)&v188 + 1);
      v196 = (float)((float)(*(float *)&v190 - *(float *)&v188) * (float)(*((float *)&v351 + 1) - *((float *)&v188 + 1)))
           - (float)((float)(*((float *)&v190 + 1) - *((float *)&v188 + 1)) * (float)(*(float *)&v351 - *(float *)&v188));
      v197 = v331[v178 + 19] | (8 * (v196 > 0.0));
      v331[v178 + 19] = v197;
      v198 = fabsf(v196);
      if (v198 > 1.1755e-38)
      {
        v199 = vsub_f32(v349, v182);
        v200 = vsub_f32(v185, v182);
        v201 = vsub_f32(vmul_n_f32(v199, v195), vmul_n_f32(v200, v193));
        v202 = (float)((float)(v345 - v181) * v195) - (float)((float)(v186 - v181) * v193);
        v203 = sqrtf(vmlas_n_f32(COERCE_FLOAT(vmul_f32(v201, v201).i32[1]), v201.f32[0], v201.f32[0]) + (float)(v202 * v202));
        v204 = 1.0;
        if ((v197 & 8) == 0)
          v204 = -1.0;
        if (fabsf(v203) > 1.1755e-38)
        {
          v205 = (float32x2_t *)&v331[v178];
          v205[5] = vmul_n_f32(v201, v204 / v203);
          v205[6].f32[0] = v202 * (float)(v204 / v203);
        }
        v206 = (float)(v186 - v181) * v192;
        v207 = vsub_f32(vmul_n_f32(v200, v192), vmul_n_f32(v199, v194));
        v208 = v206 - (float)((float)(v345 - v181) * v194);
        v209 = sqrtf(vmlas_n_f32(COERCE_FLOAT(vmul_f32(v207, v207).i32[1]), v207.f32[0], v207.f32[0]) + (float)(v208 * v208));
        if (fabsf(v209) > 1.1755e-38)
        {
          v210 = &v331[v178];
          *(float32x2_t *)(v210 + 13) = vmul_n_f32(v207, v204 / v209);
          *((float *)v210 + 15) = v208 * (float)(v204 / v209);
        }
        v211 = v203 / v198;
        v212 = (float *)&v331[v178];
        v213 = v209 / v198;
        v212[16] = v211;
        v212[17] = v213;
        v214 = fabsf(v213);
        if (fabsf(v211) > 1.1755e-38 && v214 > 1.1755e-38)
          v331[v178 + 19] = v197 & 0xFFFFFFFB;
      }
      v179 += 3;
      v178 += 22;
    }
    while (22 * v148 != v178);
    v59 = (uint64_t)v332;
    if ((int)v148 >= 2)
    {
      v216 = 0;
      do
      {
        v217 = v216;
        v218 = v216 + 1;
        if (v331[22 * v216 + 18] == v331[22 * v216 + 40])
        {
          v219 = v331[22 * v216 + 19];
          v220 = v331[22 * v218 + 19];
          if (((v219 | v220) & 1) == 0 && ((v220 ^ v219) & 8) != 0)
          {
            if ((v220 & 4) != 0
              || (sub_2263F8A88(a1, &v332[3 * (_DWORD)v217]),
                  v222 = v221,
                  sub_2263F8A88(a1, &v332[3 * (_DWORD)v218]),
                  v222 >= v223))
            {
              v224 = v217;
            }
            else
            {
              v224 = v217 + 1;
              v218 = v217;
            }
            v225 = &v331[22 * v218];
            v226 = v225[19] & 0xFFFFFFF7;
            v225[19] = v226;
            v225[19] = v331[22 * v224 + 19] & 8 | v226;
          }
          LODWORD(v218) = v217 + 2;
        }
        v216 = v218;
      }
      while ((int)v218 < (int)v148 - 1);
    }
  }
  v227 = (char *)malloc_type_malloc(36 * (int)v148, 0x1954726DuLL);
  if (v227)
  {
    v228 = v227;
    if ((int)v148 <= 0)
    {
      sub_2263F8B84((uint64_t)v227, 0, (3 * v148 - 1), 0, 0x26065CAu);
    }
    else
    {
      v229 = 0;
      v230 = v227 + 8;
      v231 = v59;
      do
      {
        v232 = 0;
        v233 = v230;
        do
        {
          v234 = *(_DWORD *)(v231 + 4 * v232);
          if (v232 == 2)
            v235 = 0;
          else
            v235 = v232 + 1;
          v236 = v232 + 1;
          v237 = *(_DWORD *)(v59 + 4 * (v235 + 3 * v229));
          if (v234 >= v237)
            v238 = *(_DWORD *)(v59 + 4 * (v235 + 3 * v229));
          else
            v238 = v234;
          if (v234 > v237)
            v237 = v234;
          *(v233 - 2) = v238;
          *(v233 - 1) = v237;
          *v233 = v229;
          v233 += 3;
          v232 = v236;
        }
        while (v236 != 3);
        ++v229;
        v231 += 12;
        v230 += 9;
      }
      while (v229 != v148);
      v239 = 3 * v148;
      sub_2263F8B84((uint64_t)v227, 0, (3 * v148 - 1), 0, 0x26065CAu);
      v240 = 0;
      if (3 * (int)v148 <= 2)
        v241 = 2;
      else
        v241 = v239;
      v242 = 1;
      v243 = 3;
      do
      {
        if (v228[3 * v240] != v228[v243])
        {
          sub_2263F8B84((uint64_t)v228, v240, (v242 - 1), 1, 0x26065CAu);
          v240 = v242;
        }
        v243 += 3;
        ++v242;
      }
      while (v241 + 2 * v241 != v243);
      v244 = 0;
      v245 = 0;
      v246 = v241 - 1;
      v247 = v228 + 4;
      v13 = v331;
      do
      {
        v248 = &v228[3 * v245];
        if (*v248 != *(v247 - 1) || v248[1] != *v247)
        {
          sub_2263F8B84((uint64_t)v228, v245, v244, 2, 0x26065CAu);
          v245 = v244 + 1;
          v13 = v331;
        }
        ++v244;
        v247 += 3;
      }
      while (v246 != v244);
      v249 = 0;
      if (v239 <= 1)
        v250 = 1;
      else
        v250 = v239;
      do
      {
        v251 = &v228[3 * v249];
        v252 = *v251;
        v253 = v251[1];
        v254 = v251[2];
        v255 = &v332[3 * v254];
        v256 = *v255;
        v257 = v255 + 1;
        v258 = v255[1];
        if (*v255 == v252 || v256 == v253)
        {
          if (v258 == v252 || v258 == v253)
          {
            v261 = 0;
          }
          else
          {
            v256 = v255[2];
            v261 = 2;
            v257 = &v332[3 * v254];
          }
        }
        else
        {
          v257 = v255 + 2;
          v256 = v255[1];
          v261 = 1;
        }
        v262 = (char *)&v13[22 * v254];
        ++v249;
        if (*(_DWORD *)&v262[4 * v261] == -1 && v249 < v239)
        {
          v264 = &v228[3 * (int)v249];
          if (v252 == *v264 && v253 == v264[1])
          {
            v265 = *v257;
            v266 = (int)v249;
            v267 = v249;
            do
            {
              v268 = v228[3 * v266 + 2];
              v269 = &v332[3 * v268];
              v270 = *v269;
              v271 = v269 + 1;
              v272 = v269[1];
              if (*v269 == v252 || v270 == v253)
              {
                if (v272 == v252 || v272 == v253)
                {
                  v275 = 0;
                }
                else
                {
                  v270 = v269[2];
                  v275 = 2;
                  v271 = &v332[3 * v268];
                }
              }
              else
              {
                v271 = v269 + 2;
                v275 = 1;
                v270 = v269[1];
              }
              if (v256 == *v271
                && ((v276 = v13[22 * v268 + v275], v265 == v270) ? (v277 = v276 == -1) : (v277 = 0), v277))
              {
                v279 = 0;
                v278 = 1;
              }
              else
              {
                v278 = 0;
                ++v267;
                v279 = 1;
              }
              v280 = &v228[3 * v267];
              if (v267 >= v239 || v252 != *v280)
                break;
              v266 = v267;
              v281 = v279 ^ 1;
              if (v253 != v280[1])
                v281 = 1;
            }
            while ((v281 & 1) == 0);
            if (v278)
            {
              v282 = v280[2];
              *(_DWORD *)&v262[4 * v261] = v282;
              v13[22 * v282 + v275] = v254;
            }
          }
        }
      }
      while (v249 != v250);
    }
    free(v228);
    v283 = v321;
  }
  else
  {
    v283 = v321;
    if ((int)v148 >= 1)
    {
      for (m = 0; m != v148; ++m)
      {
        v285 = 0;
        v286 = &v331[22 * m];
        v287 = (3 * m);
        do
        {
          if (v286[v285] == -1)
          {
            v289 = 0;
            v290 = 0;
            v288 = v285 + 1;
            if (v285 >= 2)
              v291 = 0;
            else
              v291 = v285 + 1;
            v292 = *(_DWORD *)(v59 + 4 * (v291 + v287));
            v293 = v331;
            while (m == v290)
            {
LABEL_318:
              ++v290;
              v293 += 22;
              v289 += 3;
              if (v290 == v148)
                goto LABEL_321;
            }
            v294 = 0;
            while (1)
            {
              v295 = v294 + 1;
              v296 = v294 >= 2 ? 0 : v294 + 1;
              if (*(_DWORD *)(v59 + 4 * (v285 + v287)) == *(_DWORD *)(v59 + 4 * (v296 + 3 * v290))
                && v292 == *(_DWORD *)(v59 + 4 * v289 + 4 * v294))
              {
                break;
              }
              ++v294;
              if (v295 == 3)
                goto LABEL_318;
            }
            v286[v285] = v290;
            v293[v294] = m;
          }
          else
          {
            v288 = v285 + 1;
          }
LABEL_321:
          v285 = v288;
        }
        while (v288 != 3);
      }
    }
  }
  v297 = malloc_type_malloc(72 * (_DWORD)v148, 0x101004035137979uLL);
  v298 = malloc_type_malloc(12 * (int)v148, 0x21F0E3D7uLL);
  v299 = v298;
  if (v297)
    v300 = v298 == 0;
  else
    v300 = 1;
  if (v300)
  {
    if (v297)
      free(v297);
    if (v299)
      free(v299);
    free(v332);
LABEL_336:
    v301 = v13;
LABEL_337:
    free(v301);
    return 0;
  }
  v303 = sub_2263F71C8((uint64_t)v13, (uint64_t)v297, (uint64_t)v298, (uint64_t)v332, v148);
  v304 = malloc_type_malloc(40 * v283, 0x10000400A747E1EuLL);
  if (!v304)
  {
    free(v332);
    free(v13);
    free(v297);
    v301 = v299;
    goto LABEL_337;
  }
  v305 = (uint64_t)v304;
  bzero(v304, 40 * v283);
  if (v283 >= 1)
  {
    v306 = v283;
    v307 = (_OWORD *)(v305 + 16);
    do
    {
      *(v307 - 1) = xmmword_22640C5E0;
      *v307 = xmmword_22640C5F0;
      v307 = (_OWORD *)((char *)v307 + 40);
      --v306;
    }
    while (v306);
  }
  v308 = sub_2263F73DC(v305, (uint64_t)v13, (int *)v297, v303, (uint64_t)v332, a1, v323);
  free(v297);
  free(v299);
  if (!v308)
  {
    free(v13);
    free(v332);
    v301 = (void *)v305;
    goto LABEL_337;
  }
  v309 = (void *)v305;
  sub_2263F8268(v305, (uint64_t)v13, (uint64_t)v332, a1, v148, v324);
  free(v13);
  free(v332);
  v310 = 0;
  v311 = 0;
  do
  {
    v312 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 8))(a1, v311);
    if ((v312 - 3) <= 1)
    {
      v314 = v312;
      v315 = 0;
      v316 = (uint64_t)v309 + 40 * v310 + 20;
      do
      {
        *(_QWORD *)&v351 = *(_QWORD *)(v316 - 20);
        DWORD2(v351) = *(_DWORD *)(v316 - 12);
        v350[0] = *(_DWORD *)(v316 - 4);
        v350[1] = *(_DWORD *)v316;
        v350[2] = *(_DWORD *)(v316 + 4);
        v317 = *(_QWORD *)a1;
        v318 = *(void (**)(uint64_t, __int128 *, _DWORD *, _QWORD, uint64_t, uint64_t, float, float))(*(_QWORD *)a1 + 48);
        if (v318)
        {
          v318(a1, &v351, v350, *(unsigned int *)(v316 + 16), v311, v315, *(float *)(v316 - 8), *(float *)(v316 + 8));
          v317 = *(_QWORD *)a1;
        }
        v319 = *(void (**)(uint64_t, __int128 *, uint64_t, uint64_t, __n128))(v317 + 40);
        if (v319)
        {
          if (*(_DWORD *)(v316 + 16) == 1)
            v313.n128_f32[0] = 1.0;
          else
            v313.n128_f32[0] = -1.0;
          v319(a1, &v351, v311, v315, v313);
        }
        v315 = (v315 + 1);
        v316 += 40;
      }
      while (v314 != (_DWORD)v315);
      v310 += v315;
    }
    v311 = (v311 + 1);
  }
  while ((_DWORD)v311 != v320);
  free(v309);
  return 1;
}

uint64_t sub_2263F71C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  unsigned int v6;
  uint64_t v7;
  uint64_t result;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unsigned int *v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  int v25;
  int v26;
  uint64_t v27;
  unsigned int v28;
  int v29;
  uint64_t v32;
  uint64_t v33;
  int v35;
  uint64_t v36;

  if (a5 < 1)
    return 0;
  v6 = 0;
  v7 = 0;
  result = 0;
  v9 = 0;
  v10 = a1;
  v11 = 3 * a5;
  v27 = a5;
  v36 = a1;
  v29 = 3 * a5;
  do
  {
    v12 = 0;
    v28 = v6;
    v33 = a4 + 4 * v6;
    v32 = a1 + 88 * v7;
    v13 = (unsigned int *)(v32 + 76);
    v14 = 0xFFFFFFFF00000000;
    do
    {
      v15 = *v13;
      if ((*v13 & 4) == 0)
      {
        v16 = v10 + 8 * v12;
        if (!*(_QWORD *)(v16 + 16))
        {
          if ((int)result >= v11)
            sub_226408F30();
          v17 = *(_DWORD *)(v33 + 4 * v12);
          v35 = result;
          v18 = a2 + 24 * (int)result;
          *(_QWORD *)(v16 + 16) = v18;
          *(_DWORD *)(v18 + 16) = v17;
          *(_DWORD *)(v18 + 20) = (v15 >> 3) & 1;
          *(_DWORD *)v18 = 0;
          *(_QWORD *)(v18 + 8) = a3 + 4 * v9;
          v19 = *(_QWORD *)(v16 + 16);
          v20 = v7;
          *(_DWORD *)(*(_QWORD *)(v19 + 8) + 4 * (int)(*(_DWORD *)v19)++) = v7;
          v21 = *(_DWORD *)(v10 + 4 * v12);
          v22 = (*v13 >> 3) & 1;
          v23 = v14 >> 32;
          if (!v12)
            v23 = 2;
          v24 = *(_DWORD *)(v32 + 4 * v23);
          if ((v21 & 0x80000000) == 0)
          {
            v25 = sub_2263F8D24(a4, v36, *(_DWORD *)(v10 + 4 * v12), v19);
            a1 = v36;
            if (!v25 && v22 == ((*(_DWORD *)(v36 + 88 * v21 + 76) >> 3) & 1))
              sub_226408EB8();
            v19 = *(_QWORD *)(v16 + 16);
          }
          if ((v24 & 0x80000000) == 0)
          {
            v26 = sub_2263F8D24(a4, v36, v24, v19);
            a1 = v36;
            if (!v26 && v22 == ((*(_DWORD *)(v36 + 88 * v24 + 76) >> 3) & 1))
              sub_226408EE0();
            v19 = *(_QWORD *)(v16 + 16);
          }
          v9 += *(_DWORD *)v19;
          v11 = v29;
          if (v9 > v29)
            sub_226408F08();
          v7 = v20;
          result = (v35 + 1);
        }
      }
      ++v12;
      v14 += 0x100000000;
    }
    while (v12 != 3);
    ++v7;
    v6 = v28 + 3;
    v10 += 88;
  }
  while (v7 != v27);
  return result;
}

uint64_t sub_2263F73DC(uint64_t a1, uint64_t a2, int *a3, int a4, uint64_t a5, uint64_t a6, float a7)
{
  unsigned int v11;
  uint64_t v12;
  int *v13;
  unsigned int v14;
  int v15;
  char *v16;
  void **v17;
  int *v18;
  int *v19;
  BOOL v20;
  uint64_t v23;
  float v24;
  int *v25;
  uint64_t v26;
  int v27;
  int *v28;
  int v29;
  int v30;
  int v31;
  int v32;
  uint64_t v33;
  float v34;
  float *v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  BOOL v61;
  float v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v97;
  int v98;
  BOOL v99;
  int v100;
  unsigned int v101;
  BOOL v102;
  char v103;
  void *v104;
  char *v105;
  float v106;
  int v107;
  float v108;
  float v109;
  int *v110;
  float v111;
  float v112;
  float v113;
  float v114;
  float v115;
  float v116;
  int v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  int v121;
  unsigned int v122;
  uint64_t v123;
  int v124;
  uint64_t v125;
  float v126;
  float *v127;
  float v128;
  float v129;
  float v130;
  float v131;
  float v132;
  float v133;
  float v134;
  float v135;
  float v136;
  float v137;
  float v138;
  float v139;
  float v142;
  float v143;
  float v144;
  float v145;
  float v146;
  float v147;
  float v148;
  float v149;
  float v150;
  float v151;
  BOOL v153;
  float v154;
  unsigned int v155;
  int v156;
  int v157;
  int v158;
  int v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  float v163;
  float v164;
  float v165;
  float v166;
  float v167;
  float v168;
  float v169;
  float v170;
  float v171;
  float v172;
  BOOL v174;
  float v175;
  float v176;
  float v177;
  float v178;
  float v179;
  float v180;
  float v181;
  float v182;
  float v183;
  float v184;
  float v187;
  float v188;
  float v189;
  float v190;
  float v191;
  uint64_t v192;
  uint64_t v193;
  void **v194;
  void *v195;
  float v196;
  float v197;
  float v200;
  float v201;
  float v202;
  BOOL v204;
  float v205;
  float *v206;
  int v207;
  float32x2_t *v208;
  int v209;
  int v210;
  float *v211;
  uint64_t v212;
  float v213;
  float v214;
  float v215;
  float v216;
  float v217;
  float v218;
  float v219;
  float v220;
  BOOL v221;
  BOOL v222;
  float32x2_t *v223;
  float32x2_t *v224;
  float32x2_t v225;
  int8x8_t v226;
  float v227;
  char *v228;
  __int128 v229;
  __int128 v230;
  int v231;
  uint64_t v232;
  float v233;
  float v234;
  float v237;
  float32x2_t *v238;
  float32x2_t *v239;
  float32x2_t v240;
  int8x8_t v241;
  float v242;
  uint64_t v243;
  void **v244;
  void *v245;
  void **v246;
  uint64_t v247;
  uint64_t v249;
  char *v250;
  uint64_t v251;
  void **v252;
  void *v253;
  int *v254;
  int *v255;
  uint64_t *v256;
  uint64_t v257;
  unsigned int v258;
  _DWORD *v259;
  float v260;
  int v261;
  float v262;
  float v263;
  float v264;
  float v265;
  float v266;
  float v267;
  float v268;
  int *v269;
  float v270;
  float v271;
  float v272;
  float v273;
  float v274;
  float v275;
  float v276;
  float v277;
  float v278;
  uint64_t v279;
  uint64_t v280;
  int v281;
  int v282;
  int v283;
  uint64_t v285;
  float v286;
  uint64_t v287;

  v287 = *MEMORY[0x24BDAC8D0];
  if (a4 < 1)
    return 1;
  v11 = 0;
  v12 = a4;
  v247 = a4;
  v13 = a3;
  do
  {
    v15 = *v13;
    v13 += 6;
    v14 = v15;
    if ((int)v11 <= v15)
      v11 = v14;
    --v12;
  }
  while (v12);
  if (!v11)
    return 1;
  v16 = (char *)malloc_type_malloc(40 * v11, 0x10000400A747E1EuLL);
  v17 = (void **)malloc_type_malloc(16 * v11, 0x101004082113244uLL);
  v18 = (int *)malloc_type_malloc(4 * v11, 0x100004052888210uLL);
  v19 = v18;
  if (v16)
    v20 = v17 == 0;
  else
    v20 = 1;
  if (!v20 && v18 != 0)
  {
    v23 = 0;
    v246 = v17 + 1;
    v24 = 1.0;
    v260 = a7;
    v279 = a2;
    v280 = a5;
    v250 = v16;
    v251 = a1;
    v252 = v17;
    while (1)
    {
      v249 = v23;
      v25 = &a3[6 * v23];
      if (*v25 < 1)
        goto LABEL_212;
      v26 = 0;
      v27 = 0;
      v28 = &a3[6 * v23];
      v255 = v28 + 4;
      v256 = (uint64_t *)(v28 + 2);
      v259 = v28 + 5;
      v254 = v25;
      do
      {
        v29 = *(_DWORD *)(*v256 + 4 * v26);
        if (*(int **)(a2 + 88 * v29 + 16) == v25)
        {
          v30 = 0;
        }
        else if (*(int **)(a2 + 88 * v29 + 24) == v25)
        {
          v30 = 1;
        }
        else
        {
          if (*(int **)(a2 + 88 * v29 + 32) != v25)
            sub_226409070();
          v30 = 2;
        }
        v31 = *(_DWORD *)(a5 + 4 * (v30 + 3 * v29));
        if (v31 != *v255)
          sub_226409048();
        v258 = v30;
        v257 = v26;
        v283 = v27;
        v286 = 0.0;
        v285 = 0;
        v282 = v29;
        (*(void (**)(uint64_t, uint64_t *, _QWORD, _QWORD))(*(_QWORD *)a6 + 24))(a6, &v285, (v31 >> 2), v31 & 3);
        v32 = v282;
        v33 = v285;
        v34 = v286;
        v35 = (float *)(a2 + 88 * v282);
        v36 = v35[10];
        v37 = v35[11];
        v38 = v35[12];
        v39 = (float)((float)(*((float *)&v285 + 1) * v37) + (float)(*(float *)&v285 * v36)) + (float)(v286 * v38);
        v40 = *(float *)&v285 * v39;
        v41 = *((float *)&v285 + 1) * v39;
        v42 = v286 * v39;
        v43 = v36 - (float)(*(float *)&v285 * v39);
        v44 = v37 - v41;
        v45 = v38 - v42;
        v46 = vabds_f32(v37, v41);
        v47 = vabds_f32(v38, v42);
        if (vabds_f32(v36, v40) > 1.1755e-38 || v46 > 1.1755e-38 || v47 > 1.1755e-38)
        {
          v50 = v24 / sqrtf((float)((float)(v44 * v44) + (float)(v43 * v43)) + (float)(v45 * v45));
          v43 = v43 * v50;
          v44 = v44 * v50;
          v45 = v45 * v50;
        }
        v51 = v35[13];
        v52 = v35[14];
        v53 = v35[15];
        v54 = (float)((float)(*((float *)&v285 + 1) * v52) + (float)(*(float *)&v285 * v51)) + (float)(v286 * v53);
        v55 = v51 - (float)(*(float *)&v285 * v54);
        v56 = v52 - (float)(*((float *)&v285 + 1) * v54);
        v57 = v53 - (float)(v286 * v54);
        v58 = fabsf(v56);
        v59 = fabsf(v57);
        v61 = fabsf(v55) <= 1.1755e-38 && v58 <= 1.1755e-38 && v59 <= 1.1755e-38;
        v27 = v283;
        if (!v61)
        {
          v62 = v24 / sqrtf((float)((float)(v56 * v56) + (float)(v55 * v55)) + (float)(v57 * v57));
          v55 = v55 * v62;
          v56 = v56 * v62;
          v57 = v57 * v62;
        }
        v63 = *v25;
        if (*v25 < 1)
        {
          LODWORD(v65) = 0;
        }
        else
        {
          v64 = 0;
          LODWORD(v65) = 0;
          v66 = *(_DWORD *)(a2 + 88 * v282 + 72);
          v67 = *v256;
          do
          {
            v68 = *(_DWORD *)(v67 + 4 * v64);
            v69 = a2 + 88 * v68;
            v70 = *(float *)(v69 + 40);
            v71 = *(float *)(v69 + 44);
            v72 = *(float *)(v69 + 48);
            v73 = (float)((float)(*((float *)&v33 + 1) * v71) + (float)(*(float *)&v33 * v70)) + (float)(v34 * v72);
            v74 = *(float *)&v33 * v73;
            v75 = *((float *)&v33 + 1) * v73;
            v76 = v34 * v73;
            v77 = v70 - (float)(*(float *)&v33 * v73);
            v78 = v71 - v75;
            v79 = v72 - v76;
            v80 = vabds_f32(v71, v75);
            v81 = vabds_f32(v72, v76);
            if (vabds_f32(v70, v74) > 1.1755e-38 || v80 > 1.1755e-38 || v81 > 1.1755e-38)
            {
              v84 = v24 / sqrtf((float)((float)(v78 * v78) + (float)(v77 * v77)) + (float)(v79 * v79));
              v77 = v77 * v84;
              v78 = v78 * v84;
              v79 = v79 * v84;
            }
            v85 = *(float *)(v69 + 52);
            v86 = *(float *)(v69 + 56);
            v87 = *(float *)(v69 + 60);
            v88 = (float)((float)(*((float *)&v33 + 1) * v86) + (float)(*(float *)&v33 * v85)) + (float)(v34 * v87);
            v89 = v34 * v88;
            v90 = v85 - (float)(*(float *)&v33 * v88);
            v91 = v86 - (float)(*((float *)&v33 + 1) * v88);
            v92 = v87 - v89;
            v93 = fabsf(v91);
            v94 = fabsf(v87 - v89);
            if (fabsf(v90) > 1.1755e-38 || v93 > 1.1755e-38 || v94 > 1.1755e-38)
            {
              v97 = v24 / sqrtf((float)((float)(v91 * v91) + (float)(v90 * v90)) + (float)(v92 * v92));
              v90 = v90 * v97;
              v91 = v91 * v97;
              v92 = v92 * v97;
            }
            v98 = *(_DWORD *)(v69 + 72);
            if (v282 == v68 && v66 != v98)
              sub_226409020();
            if (((*(_DWORD *)(a2 + 88 * v282 + 76) | *(_DWORD *)(a2 + 88 * v68 + 76)) & 4) != 0
              || v66 == v98
              || ((float)((float)((float)(v44 * v78) + (float)(v43 * v77)) + (float)(v45 * v79)) > a7
                ? (v99 = (float)((float)((float)(v56 * v91) + (float)(v55 * v90)) + (float)(v57 * v92)) <= a7)
                : (v99 = 1),
                  !v99))
            {
              v19[(int)v65] = v68;
              v63 = *v25;
              LODWORD(v65) = v65 + 1;
            }
            ++v64;
          }
          while (v64 < v63);
          if ((int)v65 > 1)
          {
            sub_2263F8E98((uint64_t)v19, 0, v65 - 1, 0x26065CAu);
            v32 = v282;
            v27 = v283;
          }
        }
        if (v27 < 1)
        {
          v100 = 0;
          v103 = 0;
LABEL_91:
          if (v100 != v27)
            sub_226408FF8();
          goto LABEL_92;
        }
        v100 = 0;
        while (1)
        {
          if ((_DWORD)v65 == LODWORD(v17[2 * v100]))
          {
            if ((int)v65 < 1)
              goto LABEL_175;
            v101 = 0;
            do
            {
              v102 = v19[v101] == *((_DWORD *)v17[2 * v100 + 1] + v101);
              if (v19[v101] != *((_DWORD *)v17[2 * v100 + 1] + v101))
                break;
              v101 += v19[v101] == *((_DWORD *)v17[2 * v100 + 1] + v101);
            }
            while ((int)v101 < (int)v65);
            if (v102)
              break;
          }
          v103 = 0;
          if (++v100 >= v27)
            goto LABEL_88;
        }
        v103 = 1;
LABEL_88:
        if ((v103 & 1) == 0)
          goto LABEL_91;
LABEL_92:
        if ((v103 & 1) == 0)
        {
          v104 = malloc_type_malloc(4 * (int)v65, 0x100004052888210uLL);
          v253 = v104;
          if (v104)
          {
            v105 = (char *)&v252[2 * v283];
            *(_DWORD *)v105 = v65;
            *((_QWORD *)v105 + 1) = v104;
            memcpy(v104, v19, 4 * (int)v65);
            v106 = 0.0;
            if ((int)v65 < 1)
            {
              v108 = 0.0;
              v109 = 0.0;
              v111 = 0.0;
              v112 = 0.0;
              v113 = 0.0;
              v114 = 0.0;
              v115 = 0.0;
              v116 = 0.0;
              v117 = v283;
              v32 = v282;
            }
            else
            {
              v107 = *v255;
              v108 = 0.0;
              v109 = 0.0;
              v65 = v65;
              v110 = v19;
              v111 = 0.0;
              v112 = 0.0;
              v113 = 0.0;
              v114 = 0.0;
              v115 = 0.0;
              v116 = 0.0;
              v117 = v283;
              v32 = v282;
              v281 = *v255;
              do
              {
                v119 = *v110++;
                v118 = v119;
                if ((*(_BYTE *)(a2 + 88 * (int)v119 + 76) & 4) == 0)
                {
                  v120 = 3 * (int)v118;
                  v121 = *(_DWORD *)(a5 + 4 * v120);
                  v277 = v108;
                  v278 = v106;
                  v275 = v111;
                  v276 = v109;
                  v273 = v113;
                  v274 = v112;
                  v271 = v115;
                  v272 = v114;
                  v270 = v116;
                  v269 = v110;
                  if (v121 == v107)
                  {
                    v122 = 0;
                    v261 = 1;
                  }
                  else if (*(_DWORD *)(a5 + 12 * v118 + 4) == v107)
                  {
                    v261 = 1;
                    v122 = 1;
                  }
                  else
                  {
                    if (*(_DWORD *)(a5 + 4 * v120 + 8) != v107)
                      sub_226408FD0();
                    v261 = 0;
                    v122 = 2;
                  }
                  v123 = v120 + v122;
                  v124 = *(_DWORD *)(v280 + 4 * v123);
                  v286 = 0.0;
                  v285 = 0;
                  (*(void (**)(uint64_t, uint64_t *, _QWORD, _QWORD))(*(_QWORD *)a6 + 24))(a6, &v285, (v124 >> 2), v124 & 3);
                  v125 = v285;
                  v126 = v286;
                  v127 = (float *)(v279 + 88 * (int)v118);
                  v128 = v127[10];
                  v129 = v127[11];
                  v130 = v127[12];
                  v131 = (float)((float)(*((float *)&v285 + 1) * v129) + (float)(*(float *)&v285 * v128))
                       + (float)(v286 * v130);
                  v132 = *(float *)&v285 * v131;
                  v133 = *((float *)&v285 + 1) * v131;
                  v134 = v286 * v131;
                  v135 = v128 - v132;
                  v136 = v129 - v133;
                  v137 = v130 - v134;
                  v138 = vabds_f32(v129, v133);
                  v139 = vabds_f32(v130, v134);
                  if (vabds_f32(v128, v132) > 1.1755e-38 || v138 > 1.1755e-38 || v139 > 1.1755e-38)
                  {
                    v142 = v24 / sqrtf((float)((float)(v136 * v136) + (float)(v135 * v135)) + (float)(v137 * v137));
                    v135 = v135 * v142;
                    v136 = v136 * v142;
                    v137 = v137 * v142;
                  }
                  v143 = v127[13];
                  v144 = v127[14];
                  v145 = v127[15];
                  v146 = (float)((float)(*((float *)&v285 + 1) * v144) + (float)(*(float *)&v285 * v143))
                       + (float)(v286 * v145);
                  v147 = v143 - (float)(*(float *)&v285 * v146);
                  v148 = v144 - (float)(*((float *)&v285 + 1) * v146);
                  v149 = v145 - (float)(v286 * v146);
                  v150 = fabsf(v148);
                  v151 = fabsf(v149);
                  v153 = fabsf(v147) <= 1.1755e-38 && v150 <= 1.1755e-38 && v151 <= 1.1755e-38;
                  v267 = v136;
                  v268 = v137;
                  v266 = v135;
                  if (v153)
                  {
                    v263 = v143 - (float)(*(float *)&v285 * v146);
                    v264 = v148;
                  }
                  else
                  {
                    v154 = v24 / sqrtf((float)((float)(v148 * v148) + (float)(v147 * v147)) + (float)(v149 * v149));
                    v263 = v147 * v154;
                    v264 = v148 * v154;
                    v149 = v149 * v154;
                  }
                  v265 = v149;
                  a2 = v279;
                  if (v261)
                    v155 = v122 + 1;
                  else
                    v155 = 0;
                  v156 = *(_DWORD *)(v280 + 4 * (int)(v155 + v120));
                  v157 = *(_DWORD *)(v280 + 4 * v123);
                  v158 = v122 - 1;
                  a5 = v280;
                  if (v121 == v281)
                    v158 = 2;
                  v159 = *(_DWORD *)(v280 + 4 * (v158 + (int)v120));
                  v286 = 0.0;
                  v285 = 0;
                  v160 = a6;
                  (*(void (**)(uint64_t, uint64_t *, _QWORD, _QWORD))(*(_QWORD *)a6 + 16))(a6, &v285, (v159 >> 2), v159 & 3);
                  v161 = v285;
                  v262 = v286;
                  v286 = 0.0;
                  v285 = 0;
                  (*(void (**)(uint64_t, uint64_t *, _QWORD, _QWORD))(*(_QWORD *)v160 + 16))(v160, &v285, (v157 >> 2), v157 & 3);
                  v162 = v285;
                  v163 = v286;
                  v286 = 0.0;
                  v285 = 0;
                  (*(void (**)(uint64_t, uint64_t *, _QWORD, _QWORD))(*(_QWORD *)v160 + 16))(v160, &v285, (v156 >> 2), v156 & 3);
                  v164 = (float)((float)(*((float *)&v125 + 1) * (float)(*((float *)&v161 + 1) - *((float *)&v162 + 1)))
                               + (float)(*(float *)&v125 * (float)(*(float *)&v161 - *(float *)&v162)))
                       + (float)(v126 * (float)(v262 - v163));
                  v165 = *(float *)&v125 * v164;
                  v166 = *((float *)&v125 + 1) * v164;
                  v167 = v126 * v164;
                  v168 = (float)(*(float *)&v161 - *(float *)&v162) - (float)(*(float *)&v125 * v164);
                  v169 = (float)(*((float *)&v161 + 1) - *((float *)&v162 + 1)) - v166;
                  v170 = (float)(v262 - v163) - v167;
                  v171 = vabds_f32(*((float *)&v161 + 1) - *((float *)&v162 + 1), v166);
                  v172 = vabds_f32(v262 - v163, v167);
                  v174 = vabds_f32(*(float *)&v161 - *(float *)&v162, v165) <= 1.1755e-38
                      && v171 <= 1.1755e-38
                      && v172 <= 1.1755e-38;
                  v24 = 1.0;
                  if (!v174)
                  {
                    v175 = 1.0 / sqrtf((float)((float)(v169 * v169) + (float)(v168 * v168)) + (float)(v170 * v170));
                    v168 = v168 * v175;
                    v169 = v169 * v175;
                    v170 = v170 * v175;
                  }
                  v176 = (float)((float)(*((float *)&v125 + 1) * (float)(*((float *)&v285 + 1) - *((float *)&v162 + 1)))
                               + (float)(*(float *)&v125 * (float)(*(float *)&v285 - *(float *)&v162)))
                       + (float)(v126 * (float)(v286 - v163));
                  v177 = *(float *)&v125 * v176;
                  v178 = *((float *)&v125 + 1) * v176;
                  v179 = v126 * v176;
                  v180 = (float)(*(float *)&v285 - *(float *)&v162) - (float)(*(float *)&v125 * v176);
                  v181 = (float)(*((float *)&v285 + 1) - *((float *)&v162 + 1)) - v178;
                  v182 = (float)(v286 - v163) - v179;
                  v183 = vabds_f32(*((float *)&v285 + 1) - *((float *)&v162 + 1), v178);
                  v184 = vabds_f32(v286 - v163, v179);
                  if (vabds_f32(*(float *)&v285 - *(float *)&v162, v177) > 1.1755e-38
                    || v183 > 1.1755e-38
                    || v184 > 1.1755e-38)
                  {
                    v187 = 1.0 / sqrtf((float)((float)(v181 * v181) + (float)(v180 * v180)) + (float)(v182 * v182));
                    v180 = v180 * v187;
                    v181 = v181 * v187;
                    v182 = v182 * v187;
                  }
                  a7 = v260;
                  v188 = (float)((float)(v169 * v181) + (float)(v168 * v180)) + (float)(v170 * v182);
                  v189 = -1.0;
                  if (v188 >= -1.0)
                    v189 = v188;
                  if (v188 <= 1.0)
                    v190 = v189;
                  else
                    v190 = 1.0;
                  v191 = acos(v190);
                  v192 = v279 + 88 * (int)v118;
                  v106 = v278 + (float)(v266 * v191);
                  v108 = v277 + (float)(v267 * v191);
                  v109 = v276 + (float)(v268 * v191);
                  v112 = v274 + (float)(v263 * v191);
                  v113 = v273 + (float)(v264 * v191);
                  v114 = v272 + (float)(v265 * v191);
                  v111 = v275 + (float)(v191 * *(float *)(v192 + 64));
                  v115 = v271 + (float)(v191 * *(float *)(v192 + 68));
                  v116 = v270 + v191;
                  v117 = v283;
                  v32 = v282;
                  v107 = v281;
                  v110 = v269;
                }
                --v65;
              }
              while (v65);
            }
            v196 = fabsf(v108);
            v197 = fabsf(v109);
            if (fabsf(v106) > 1.1755e-38 || v196 > 1.1755e-38 || v197 > 1.1755e-38)
            {
              v200 = v24 / sqrtf((float)((float)(v108 * v108) + (float)(v106 * v106)) + (float)(v109 * v109));
              v106 = v106 * v200;
              v108 = v108 * v200;
              v109 = v109 * v200;
            }
            v201 = fabsf(v113);
            v202 = fabsf(v114);
            v204 = fabsf(v112) <= 1.1755e-38 && v201 <= 1.1755e-38 && v202 <= 1.1755e-38;
            v16 = v250;
            a1 = v251;
            v17 = v252;
            if (!v204)
            {
              v205 = v24 / sqrtf((float)((float)(v113 * v113) + (float)(v112 * v112)) + (float)(v114 * v114));
              v112 = v112 * v205;
              v113 = v113 * v205;
              v114 = v114 * v205;
            }
            if (v116 > 0.0)
            {
              v111 = v111 / v116;
              v115 = v115 / v116;
            }
            v206 = (float *)&v250[40 * v117];
            *v206 = v106;
            v206[1] = v108;
            v206[2] = v109;
            v206[3] = v111;
            v206[4] = v112;
            v206[5] = v113;
            v206[6] = v114;
            v206[7] = v115;
            *((_QWORD *)v206 + 4) = 0;
            v27 = v117 + 1;
          }
          else
          {
            if (v283 >= 1)
            {
              v193 = v283;
              v194 = v246;
              do
              {
                v195 = *v194;
                v194 += 2;
                free(v195);
                --v193;
              }
              while (v193);
            }
            v17 = v252;
            free(v252);
            free(v19);
            v16 = v250;
            free(v250);
            a1 = v251;
            v27 = v283;
            v32 = v282;
          }
          if (!v253)
            return 0;
        }
LABEL_175:
        v207 = *(_DWORD *)(a2 + 88 * v32 + 80) + *(unsigned __int8 *)(a2 + 88 * v32 + v258 + 84);
        v208 = (float32x2_t *)(a1 + 40 * v207);
        v209 = v208[4].i32[0];
        if (v209 > 1)
          sub_226408F58();
        if (((*(_DWORD *)(a2 + 88 * v32 + 76) >> 3) & 1) != *v259)
          sub_226408FA8();
        if (v209 == 1)
        {
          v210 = v100;
          v211 = (float *)&v16[40 * v100];
          v212 = a1 + 40 * v207;
          v213 = *(float *)(v212 + 12);
          v214 = v211[3];
          v215 = *(float *)(v212 + 28);
          v216 = v211[7];
          if (v213 == v214)
          {
            v217 = v208->f32[0];
            v218 = *v211;
            v25 = v254;
            if (v215 != v216)
              goto LABEL_195;
            v219 = v208->f32[1];
            v220 = v208[1].f32[0];
            v221 = v217 == v218 && v219 == v211[1];
            v222 = v221 && v220 == v211[2];
            if (!v222
              || (v223 = (float32x2_t *)(a1 + 40 * v207),
                  v224 = (float32x2_t *)&v16[40 * v210],
                  v225 = v223[2],
                  v226 = vmvn_s8((int8x8_t)vceq_f32(v225, v224[2])),
                  (v226.i8[0] & 1) != 0)
              || (v226.i8[4] & 1) != 0
              || (v227 = v223[3].f32[0], v227 != v224[3].f32[0]))
            {
LABEL_195:
              v217 = v218 + v217;
              v219 = v208->f32[1] + v211[1];
              v220 = v208[1].f32[0] + v211[2];
              v233 = fabsf(v219);
              v234 = fabsf(v220);
              if (fabsf(v217) > 1.1755e-38 || v233 > 1.1755e-38 || v234 > 1.1755e-38)
              {
                v237 = v24 / sqrtf((float)((float)(v219 * v219) + (float)(v217 * v217)) + (float)(v220 * v220));
                v217 = v217 * v237;
                v219 = v219 * v237;
                v220 = v220 * v237;
              }
              v213 = (float)(v213 + v214) * 0.5;
              v215 = (float)(v215 + v216) * 0.5;
              v238 = (float32x2_t *)(a1 + 40 * v207);
              v239 = (float32x2_t *)&v16[40 * v210];
              v225 = vadd_f32(v238[2], v239[2]);
              v227 = v238[3].f32[0] + v239[3].f32[0];
              if (fabsf(v225.f32[0]) > 1.1755e-38
                || (v240.i32[1] = v225.i32[1],
                    v240.f32[0] = v238[3].f32[0] + v239[3].f32[0],
                    v241 = vmvn_s8((int8x8_t)vcgt_f32(vabs_f32(v240), (float32x2_t)0x80000000800000)),
                    (v241.i8[4] & 1) == 0)
                || (v241.i8[0] & 1) == 0)
              {
                v242 = v24
                     / sqrtf((float)(COERCE_FLOAT(vmul_f32(v225, v225).i32[1]) + (float)(v225.f32[0] * v225.f32[0]))+ (float)(v227 * v227));
                v225 = vmul_n_f32(v225, v242);
                v227 = v227 * v242;
              }
            }
            v232 = v257;
            v208->f32[0] = v217;
            v208->f32[1] = v219;
            v208[1].f32[0] = v220;
            v208[1].f32[1] = v213;
            v208[2] = v225;
            v208[3].f32[0] = v227;
            v208[3].f32[1] = v215;
            v231 = 2;
            v208[4] = 0;
            goto LABEL_208;
          }
          v217 = v208->f32[0];
          v218 = *v211;
          v25 = v254;
          goto LABEL_195;
        }
        if (v209)
          sub_226408F80();
        v228 = &v16[40 * v100];
        v229 = *(_OWORD *)v228;
        v230 = *((_OWORD *)v228 + 1);
        v208[4] = *(float32x2_t *)(v228 + 32);
        *(_OWORD *)v208->f32 = v229;
        *(_OWORD *)v208[2].f32 = v230;
        v231 = 1;
        v25 = v254;
        v232 = v257;
LABEL_208:
        v208[4].i32[0] = v231;
        *(_DWORD *)(a1 + 40 * v207 + 36) = *v259;
        v26 = v232 + 1;
      }
      while (v26 < *v25);
      if (v27 >= 1)
      {
        v243 = v27;
        v244 = v246;
        do
        {
          v245 = *v244;
          v244 += 2;
          free(v245);
          --v243;
        }
        while (v243);
      }
LABEL_212:
      v23 = v249 + 1;
      if (v249 + 1 == v247)
      {
        free(v17);
        free(v19);
        free(v16);
        return 1;
      }
    }
  }
  if (v16)
    free(v16);
  if (v17)
    free(v17);
  if (v19)
    free(v19);
  return 0;
}

uint64_t sub_2263F8268(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  unsigned int v11;
  int v12;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  unsigned __int8 *v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  float v26;
  int v27;
  unsigned __int8 *v28;
  unsigned int v29;
  unsigned int v30;
  BOOL v31;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  _DWORD *v38;
  uint64_t v39;
  float v40;
  uint64_t v41;

  v8 = result;
  v41 = *MEMORY[0x24BDAC8D0];
  if (a5 < a6)
  {
    v9 = a5;
    do
    {
      if ((*(_BYTE *)(a2 + 88 * v9 + 76) & 2) == 0)
      {
        for (i = 0; i != 3; ++i)
        {
          if (a5 >= 1)
          {
            v11 = 0;
            result = *(unsigned int *)(a3 + 4 * (i + 3 * v9));
            do
              v12 = *(_DWORD *)(a3 + 4 * v11);
            while ((_DWORD)result != v12 && (int)++v11 < 3 * a5);
            if ((_DWORD)result == v12)
            {
              v14 = v8
                  + 40
                  * (*(_DWORD *)(a2 + 88 * (v11 / 3) + 80) + *(unsigned __int8 *)(a2 + 88 * (v11 / 3) + v11 % 3 + 84));
              v15 = *(_OWORD *)v14;
              v16 = *(_OWORD *)(v14 + 16);
              result = v8 + 40 * (*(_DWORD *)(a2 + 88 * v9 + 80) + *(unsigned __int8 *)(a2 + 88 * v9 + i + 84));
              *(_QWORD *)(result + 32) = *(_QWORD *)(v14 + 32);
              *(_OWORD *)result = v15;
              *(_OWORD *)(result + 16) = v16;
            }
          }
        }
      }
      ++v9;
    }
    while (v9 != a6);
  }
  if (a5 >= 1)
  {
    v17 = 0;
    v18 = (unsigned __int8 *)(a2 + 84);
    v19 = a5;
    v37 = a5;
    do
    {
      if ((*(_BYTE *)(a2 + 88 * v17 + 76) & 2) != 0)
      {
        v20 = (1 << *(_BYTE *)(a2 + 88 * v17 + 85)) | (1 << *(_BYTE *)(a2 + 88 * v17 + 84)) | (1 << *(_BYTE *)(a2 + 88 * v17 + 86));
        if ((v20 & 8) != 0)
          v21 = 0;
        else
          v21 = 3;
        if ((v20 & 4) == 0)
          v21 = 2;
        if ((v20 & 2) != 0)
          v22 = v21;
        else
          v22 = 1;
        v23 = *(_DWORD *)(a2 + 88 * v17 + 72);
        if (v23 < 0)
          sub_226409098();
        v24 = 4 * v23;
        v40 = 0.0;
        v39 = 0;
        (*(void (**)(uint64_t, uint64_t *, _QWORD, uint64_t))(*(_QWORD *)a4 + 16))(a4, &v39, ((4 * v23) >> 2), v22);
        v25 = v39;
        v26 = v40;
        v38 = (_DWORD *)(a2 + 88 * v17 + 80);
        v27 = -1;
        v28 = v18;
        while (1)
        {
          v30 = *v28++;
          v29 = v30;
          if (v30 >= 4)
            sub_226409098();
          v40 = 0.0;
          v39 = 0;
          result = (*(uint64_t (**)(uint64_t, uint64_t *, _QWORD, _QWORD))(*(_QWORD *)a4 + 16))(a4, &v39, ((int)(v24 | v29) >> 2), v29 & 3);
          v31 = *(float *)&v39 == *(float *)&v25 && *((float *)&v39 + 1) == *((float *)&v25 + 1);
          if (v31 && v40 == v26)
            break;
          if (++v27 >= 2)
            sub_2264090C0();
        }
        v19 = v37;
        v33 = v8 + 40 * (int)(*v38 + v29);
        v34 = *(_OWORD *)v33;
        v35 = *(_OWORD *)(v33 + 16);
        v36 = v8 + 40 * (*v38 + (int)v22);
        *(_QWORD *)(v36 + 32) = *(_QWORD *)(v33 + 32);
        *(_OWORD *)v36 = v34;
        *(_OWORD *)(v36 + 16) = v35;
      }
      ++v17;
      v18 += 88;
    }
    while (v17 != v19);
  }
  return result;
}

uint64_t sub_2263F8530(float a1, float a2, float a3)
{
  int v3;
  int v4;

  v3 = vcvts_n_s32_f32((float)(a3 - a1) / (float)(a2 - a1), 0xBuLL);
  v4 = v3 & ~(v3 >> 31);
  if (v4 >= 2047)
    return 2047;
  else
    return v4;
}

uint64_t sub_2263F8554(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  float *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float v15;
  float *v16;
  float v17;
  uint64_t v19;
  float v20;
  float v21;
  float v22;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  float32x4_t v29;
  float32x4_t v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  __n128 v36;
  __n128 v37;
  float32x4_t v38;
  int8x8_t v39;
  int8x8_t v40;
  uint64_t v41;
  uint64_t v42;
  float v43;
  float v45;
  _BOOL4 v47;
  __int128 *v49;
  float v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  float32x4_t v58;
  uint64_t v59;
  float32x4_t v60;
  unsigned int v61;
  uint64_t v62;
  unsigned int v63;
  __n128 v64;
  float32x4_t v65;
  __int128 v66;
  uint64_t v67;
  float v68;
  uint64_t v69;
  float v70;
  uint64_t v71;

  while (2)
  {
    v5 = a5;
    v6 = a4;
    v7 = a3;
    v8 = a2;
    v56 = result;
    v71 = *MEMORY[0x24BDAC8D0];
    v9 = (float *)(a2 + 16 * (int)a4);
    v69 = *(_QWORD *)v9;
    v10 = (int)a4;
    v70 = v9[2];
    v67 = v69;
    v68 = v70;
    if ((int)a4 >= (int)a5)
      goto LABEL_10;
    v11 = a2 + 16 * (int)a4 + 16;
    v12 = (int)a4;
    do
    {
      v13 = 0;
      v14 = 0;
      ++v12;
      do
      {
        v15 = *(float *)(v11 + v13);
        if (*(float *)((char *)&v69 + v13) <= v15)
        {
          v16 = (float *)((char *)&v67 + v13);
          if (*(float *)((char *)&v67 + v13) >= v15)
            goto LABEL_8;
        }
        else
        {
          v16 = (float *)&v69 + v14;
        }
        *v16 = v15;
LABEL_8:
        ++v14;
        v13 += 4;
      }
      while (v13 != 12);
      v11 += 16;
    }
    while (v12 != (int)a5);
LABEL_10:
    v17 = v68 - v70;
    if ((float)(*((float *)&v67 + 1) - *((float *)&v69 + 1)) <= (float)(*(float *)&v67 - *(float *)&v69)
      || (float)(*((float *)&v67 + 1) - *((float *)&v69 + 1)) <= v17)
    {
      if (v17 <= (float)(*(float *)&v67 - *(float *)&v69))
        v19 = 0;
      else
        v19 = 2;
    }
    else
    {
      v19 = 1;
    }
    v20 = *((float *)&v67 + v19);
    v21 = *((float *)&v69 + v19);
    v22 = (float)(v20 + v21) * 0.5;
    if (v22 < v20 && v22 > v21)
    {
      if ((int)a4 >= (int)a5)
        sub_2264091B0();
      v41 = a2 + 4 * v19;
      LODWORD(v42) = a4;
      while (1)
      {
        if ((int)v42 < (int)a4 || (int)v42 > (int)v5)
          sub_2264090E8();
        v43 = *(float *)(v41 + 16 * (int)v42);
        if (v43 >= v22)
          v42 = v42;
        else
          v42 = (v42 + 1);
        if (v43 >= v22 || (int)v42 >= (int)a5)
        {
          if ((int)v42 < (int)a5)
          {
            do
            {
              if ((int)a5 < (int)a4 || (int)a5 > (int)v5)
                sub_226409138();
              v45 = *(float *)(v41 + 16 * (int)a5);
              LODWORD(a5) = a5 - (v45 >= v22);
            }
            while (v45 >= v22 && (int)v42 < (int)a5);
            v47 = v43 >= v22;
            if (v45 >= v22)
              v47 = 0;
            if ((int)v42 >= (int)a5 && v47)
              sub_226409160();
            if (v47)
            {
              v49 = (__int128 *)(a2 + 16 * (int)v42);
              v66 = *v49;
              if ((int)v42 >= (int)a5)
                sub_226409188();
              *v49 = *(_OWORD *)(a2 + 16 * (int)a5);
              *(_OWORD *)(a2 + 16 * (int)a5) = v66;
              v42 = (v42 + 1);
              LODWORD(a5) = a5 - 1;
            }
          }
          if ((int)v42 >= (int)a5)
            break;
        }
      }
      if ((_DWORD)v42 != (_DWORD)a5 && (_DWORD)v42 != (_DWORD)a5 + 1)
        sub_226409110();
      if ((_DWORD)v42 == (_DWORD)a5)
      {
        v51 = *(float *)(a2 + 16 * (int)v42 + 4 * v19);
        LODWORD(a5) = v42 - (v51 >= v22);
        if (v51 >= v22)
          v52 = v42;
        else
          v52 = (v42 + 1);
        v42 = v52;
      }
      if ((int)a5 > (int)a4)
        result = sub_2263F8554(result, a2, a3, a4);
      if ((int)v42 < (int)v5)
      {
        result = v56;
        a2 = v8;
        a3 = v7;
        a4 = v42;
        a5 = v5;
        continue;
      }
    }
    else if ((int)a4 <= (int)a5)
    {
      v24 = a5 + 1;
      v25 = (int)a4;
      v54 = (int)a4;
      v53 = a5 + 1;
      do
      {
        v55 = *(int *)(v8 + 16 * v25 + 12);
        v26 = *(_DWORD *)(v56 + 4 * v55);
        DWORD2(v66) = 0;
        *(_QWORD *)&v66 = 0;
        v27 = v26 & 3;
        v28 = (v26 >> 2);
        (*(void (**)(uint64_t, __int128 *, uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, &v66, v28, v27);
        v59 = v66;
        v63 = DWORD2(v66);
        DWORD2(v66) = 0;
        *(_QWORD *)&v66 = 0;
        (*(void (**)(uint64_t, __int128 *, uint64_t, uint64_t))(*(_QWORD *)v7 + 24))(v7, &v66, v28, v27);
        v61 = v66;
        v57 = *(_QWORD *)((char *)&v66 + 4);
        *(_QWORD *)&v66 = 0;
        result = (*(uint64_t (**)(uint64_t, __int128 *, uint64_t, uint64_t))(*(_QWORD *)v7 + 32))(v7, &v66, v28, v27);
        if (v25 > v10)
        {
          v29.i64[0] = v59;
          v29.i64[1] = __PAIR64__(v61, v63);
          v30.i64[0] = v57;
          v30.i64[1] = v66;
          v31 = v6;
          v58 = v30;
          v60 = v29;
          do
          {
            v32 = *(int *)(v8 + 16 * v31 + 12);
            v33 = *(_DWORD *)(v56 + 4 * v32);
            DWORD2(v66) = 0;
            *(_QWORD *)&v66 = 0;
            v34 = v33 & 3;
            v35 = (v33 >> 2);
            v36 = ((__n128 (*)(uint64_t, __int128 *, uint64_t, uint64_t))*(_QWORD *)(*(_QWORD *)v7 + 16))(v7, &v66, v35, v34);
            v36.n128_u64[0] = v66;
            v36.n128_u32[2] = DWORD2(v66);
            v64 = v36;
            DWORD2(v66) = 0;
            *(_QWORD *)&v66 = 0;
            (*(void (**)(uint64_t, __int128 *, uint64_t, uint64_t))(*(_QWORD *)v7 + 24))(v7, &v66, v35, v34);
            v62 = *(_QWORD *)((char *)&v66 + 4);
            v37 = v64;
            v37.n128_u32[3] = v66;
            v65 = (float32x4_t)v37;
            *(_QWORD *)&v66 = 0;
            result = (*(uint64_t (**)(uint64_t, __int128 *, uint64_t, uint64_t))(*(_QWORD *)v7 + 32))(v7, &v66, v35, v34);
            v38.i64[0] = v62;
            v38.i64[1] = v66;
            v39 = vcltz_s8(vshl_n_s8(vmovn_s16(vuzp1q_s16((int16x8_t)vceqq_f32(v60, v65), (int16x8_t)vceqq_f32(v58, v38))), 7uLL));
            v40 = vand_s8(v39, (int8x8_t)0x8040201008040201);
            v40.i8[0] = vaddv_s8(v40);
            v31 += (vminv_u8((uint8x8_t)v39) & 1) == 0;
          }
          while (v25 > v31 && v40.i32[0] != 255);
          v10 = v54;
          v24 = v53;
          if (v40.i32[0] == 255)
            *(_DWORD *)(v56 + 4 * v55) = *(_DWORD *)(v56 + 4 * v32);
        }
        ++v25;
      }
      while (v24 != (_DWORD)v25);
    }
    return result;
  }
}

uint64_t sub_2263F8A88(uint64_t a1, int *a2)
{
  int v4;
  int v5;
  int v6;
  _QWORD v8[2];

  v8[1] = *MEMORY[0x24BDAC8D0];
  v4 = *a2;
  v8[0] = 0;
  (*(void (**)(uint64_t, _QWORD *, _QWORD, _QWORD))(*(_QWORD *)a1 + 32))(a1, v8, (v4 >> 2), v4 & 3);
  v5 = a2[1];
  v8[0] = 0;
  (*(void (**)(uint64_t, _QWORD *, _QWORD, _QWORD))(*(_QWORD *)a1 + 32))(a1, v8, (v5 >> 2), v5 & 3);
  v6 = a2[2];
  v8[0] = 0;
  return (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD, _QWORD))(*(_QWORD *)a1 + 32))(a1, v8, (v6 >> 2), v6 & 3);
}

uint64_t sub_2263F8B84(uint64_t result, int a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  unsigned int v13;
  int v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;

  while ((int)a3 - a2 >= 1)
  {
    v5 = a4;
    v6 = a3;
    v7 = result;
    if ((_DWORD)a3 - a2 == 1)
    {
      v8 = result + 12 * a2;
      v9 = result + 12 * (int)a3;
      if (*(_DWORD *)(v8 + 4 * a4) > *(_DWORD *)(v9 + 4 * a4))
      {
        v10 = *(_QWORD *)v8;
        v11 = *(_DWORD *)(v8 + 8);
        v12 = *(_DWORD *)(v9 + 8);
        *(_QWORD *)v8 = *(_QWORD *)v9;
        *(_DWORD *)(v8 + 8) = v12;
        *(_QWORD *)v9 = v10;
        *(_DWORD *)(v9 + 8) = v11;
      }
      return result;
    }
    v13 = a5 + __ROR4__(a5, -(char)a5) + 3;
    v14 = *(_DWORD *)(result + 12 * (int)(v13 % ((int)a3 - a2 + 1) + a2) + 4 * a4);
    v15 = a2;
    do
    {
      v16 = result + 12 * v15;
      do
      {
        v17 = *(_DWORD *)(v16 + 4 * a4);
        ++v15;
        v16 += 12;
      }
      while (v17 < v14);
      v18 = v16 - 12;
      v19 = result + 12 * (int)a3;
      do
      {
        v20 = *(_DWORD *)(v19 + 4 * a4);
        LODWORD(a3) = a3 - 1;
        v19 -= 12;
      }
      while (v20 > v14);
      if (v15 - 1 <= (int)a3 + 1)
      {
        v21 = v19 + 12;
        v22 = *(_QWORD *)v18;
        v24 = *(_DWORD *)(v18 + 8);
        v23 = *(_DWORD *)(v21 + 8);
        *(_QWORD *)v18 = *(_QWORD *)v21;
        *(_DWORD *)(v18 + 8) = v23;
        *(_QWORD *)v21 = v22;
        *(_DWORD *)(v21 + 8) = v24;
      }
      else
      {
        --v15;
        LODWORD(a3) = a3 + 1;
      }
    }
    while (v15 <= (int)a3);
    if ((int)a3 > a2)
      result = sub_2263F8B84(result);
    if (v15 >= (int)v6)
      return result;
    result = v7;
    a2 = v15;
    a3 = v6;
    a4 = v5;
    a5 = v13;
  }
  return result;
}

uint64_t sub_2263F8D24(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  unsigned int v8;
  char v9;
  int v10;
  int *v11;
  int v12;
  unsigned int v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;

  LOBYTE(v8) = 0;
  while (1)
  {
    v9 = v8;
    v10 = *(_DWORD *)(a4 + 16);
    v11 = (int *)(a1 + 4 * (int)(3 * a3));
    v12 = *v11;
    if (*v11 == v10)
    {
      v13 = 0;
    }
    else if (v11[1] == v10)
    {
      v13 = 1;
    }
    else
    {
      if (v11[2] != v10)
        sub_2264091D8();
      v13 = 2;
    }
    v14 = (_QWORD *)(a2 + 88 * a3 + 16);
    v15 = &v14[v13];
    if (*v15 == a4)
      break;
    if (*v15)
      goto LABEL_23;
    v16 = a2 + 88 * a3;
    v19 = *(_DWORD *)(v16 + 76);
    v18 = (unsigned int *)(v16 + 76);
    v17 = v19;
    if ((v19 & 4) != 0 && !*v14 && !*(_QWORD *)(a2 + 88 * a3 + 24) && !*(_QWORD *)(a2 + 88 * a3 + 32))
    {
      v17 = v17 & 0xFFFFFFF7 | (8 * (*(_DWORD *)(a4 + 20) != 0));
      *v18 = v17;
    }
    if (((v17 >> 3) & 1) != *(_DWORD *)(a4 + 20))
    {
LABEL_23:
      v8 = 0;
      goto LABEL_25;
    }
    v20 = a2 + 88 * a3;
    *(_DWORD *)(*(_QWORD *)(a4 + 8) + 4 * (int)(*(_DWORD *)a4)++) = a3;
    v21 = *(_DWORD *)(v20 + 4 * v13);
    *v15 = a4;
    v22 = v13 - 1;
    if (v12 == v10)
      v23 = 2;
    else
      v23 = v22;
    a3 = *(_DWORD *)(v20 + 4 * v23);
    if ((v21 & 0x80000000) == 0)
      sub_2263F8D24(a1, a2);
    v8 = 1;
    if ((a3 & 0x80000000) != 0)
      goto LABEL_25;
  }
  v8 = 1;
LABEL_25:
  if ((v9 & 1) != 0)
    return 1;
  else
    return v8;
}

uint64_t sub_2263F8E98(uint64_t result, int a2, int a3, unsigned int a4)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  int *v11;
  int v12;
  int v13;
  int v14;
  _DWORD *v15;
  int v16;
  int v17;
  int v18;

  v6 = result;
  v7 = result + 4;
  do
  {
    if (a3 - a2 <= -2)
      sub_226409200();
    a4 += __ROR4__(a4, -(char)a4) + 3;
    v8 = *(_DWORD *)(v6 + 4 * (int)(a4 % (a3 - a2 + 1) + a2));
    v9 = a2;
    v10 = a3;
    do
    {
      v11 = (int *)(v6 + 4 * v9);
      v12 = v9;
      do
      {
        v14 = *v11++;
        v13 = v14;
        ++v12;
      }
      while (v14 < v8);
      v9 = v12 - 1;
      v15 = (_DWORD *)(v7 + 4 * v10);
      v16 = v10;
      do
      {
        v18 = *--v15;
        v17 = v18;
        --v16;
      }
      while (v18 > v8);
      v10 = v16 + 1;
      if (v9 <= v16 + 1)
      {
        *(v11 - 1) = v17;
        *v15 = v13;
        v9 = v12;
        v10 = v16;
      }
    }
    while (v9 <= v10);
    if (v10 > a2)
      result = sub_2263F8E98(v6);
    a2 = v9;
  }
  while (v9 < a3);
  return result;
}

void sub_2263F8F84()
{
  char **v0;
  char *v1[2];

  v1[0] = 0;
  v1[1] = 0;
  v0 = v1;
  pxrInternal__aapl__pxrReserved__::usd_initialize();
  sub_2263F8FF4((uint64_t)&v0, v1[0]);
  dword_25583D098 = *MEMORY[0x24BEE8398];
}

void sub_2263F8FDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
  sub_2263F8FF4((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

void sub_2263F8FF4(uint64_t a1, char *a2)
{
  if (a2)
  {
    sub_2263F8FF4(a1, *(_QWORD *)a2);
    sub_2263F8FF4(a1, *((_QWORD *)a2 + 1));
    if (a2[55] < 0)
      operator delete(*((void **)a2 + 4));
    operator delete(a2);
  }
}

void sub_2263F9124(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2263F9244(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_2263F96D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  va_list va1;
  uint64_t v20;
  uint64_t v21;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v18 = va_arg(va2, _QWORD);
  v20 = va_arg(va2, _QWORD);
  v21 = va_arg(va2, _QWORD);
  sub_2263D701C((uint64_t)va);
  MEMORY[0x2276972DC]((uint64_t *)va1);
  sub_2263AC71C((uint64_t)va2);
  MEMORY[0x227697414](v7 - 104);

  _Unwind_Resume(a1);
}

void sub_2263F99B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  MEMORY[0x227697414](va);
  _Unwind_Resume(a1);
}

void sub_2263F9C68(_Unwind_Exception *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  void *v11;
  uint64_t v12;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  va_list va;

  va_start(va, a11);
  v14 = *(_QWORD *)(v12 - 88);
  if ((v14 & 7) != 0)
  {
    v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }
  MEMORY[0x227697414](va);

  _Unwind_Resume(a1);
}

void sub_2263F9F00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  sub_2263D73CC((uint64_t)&a9);
  sub_2263DC7CC((uint64_t)&a13);
  MEMORY[0x2276972DC](&a18);
  _Unwind_Resume(a1);
}

void sub_2263FA108(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  sub_2263D73CC((uint64_t)&a9);
  sub_2263DC7CC((uint64_t)&a13);
  MEMORY[0x2276972DC](&a18);
  _Unwind_Resume(a1);
}

void sub_2263FA2CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  va_list va;

  va_start(va, a3);
  if ((a2 & 7) != 0)
  {
    v5 = (unsigned int *)(a2 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  if ((a3 & 7) != 0)
  {
    v7 = (unsigned int *)(a3 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  sub_2263DC7CC((uint64_t)va);
  MEMORY[0x2276972DC](v3 - 40);
  _Unwind_Resume(a1);
}

void sub_2263FA5DC(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  sub_2263D701C(v2 - 80);

  _Unwind_Resume(a1);
}

void sub_2263FA6F4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_2263FAC0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,char a24)
{
  void *v24;
  void *v25;
  uint64_t v26;

  sub_2263DB100(v26 - 176, *(_QWORD **)(v26 - 168));

  _Unwind_Resume(a1);
}

void sub_2263FAF90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  void *v6;
  void *v7;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  va_list va;
  uint64_t v13;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v11 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  sub_2263AD568((uint64_t)va);
  sub_2263AD568((uint64_t)va1);
  if ((a2 & 7) != 0)
  {
    v9 = (unsigned int *)(a2 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }

  _Unwind_Resume(a1);
}

void sub_2263FB2DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  void *v8;
  void *v9;
  void *v10;
  unsigned int *v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v16;
  va_list va;
  uint64_t v18;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v16 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  sub_2263AD568((uint64_t)va);
  sub_2263AD568((uint64_t)va1);
  if ((a3 & 7) != 0)
  {
    v12 = (unsigned int *)(a3 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  if ((a4 & 7) != 0)
  {
    v14 = (unsigned int *)(a4 & 0xFFFFFFFFFFFFFFF8);
    do
      v15 = __ldxr(v14);
    while (__stlxr(v15 - 2, v14));
  }

  _Unwind_Resume(a1);
}

void sub_2263FB500(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_2263FB714(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  void *v6;
  uint64_t v8;
  va_list va;
  uint64_t v10;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  sub_2263AD568((uint64_t)va);
  sub_2263AD568((uint64_t)va1);

  _Unwind_Resume(a1);
}

void sub_2263FB9C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  void *v6;
  void *v7;
  uint64_t v9;
  va_list va;
  uint64_t v11;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  sub_2263AD568((uint64_t)va);
  sub_2263AD568((uint64_t)va1);

  _Unwind_Resume(a1);
}

void sub_2263FBC6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  void *v6;
  uint64_t v8;
  va_list va;
  uint64_t v10;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  sub_2263AD568((uint64_t)va);
  sub_2263AD568((uint64_t)va1);

  _Unwind_Resume(a1);
}

void sub_2263FBEFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;
  void *v19;

  if (a17 < 0)
    operator delete(__p);
  sub_2263FBF94((uint64_t)&a18);

  _Unwind_Resume(a1);
}

uint64_t sub_2263FBF94(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 24);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_2263BDE64(a1 + 16);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    sub_2263DA640(v5);
  return a1;
}

void sub_2263FC1C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  void *v18;
  void *v19;

  if (a17 < 0)
    operator delete(__p);
  sub_2263FBF94((uint64_t)&a18);

  _Unwind_Resume(a1);
}

void sub_2263FC408(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  void *v24;
  void *v25;
  void *v26;

  sub_2263FBF94((uint64_t)&a13);
  if (a24 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_2263FC4F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2263FBF94((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_2263FC628(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  void *v15;

  if (a14 < 0)
    operator delete(__p);
  sub_2263FC6D0((uint64_t)&a15);

  _Unwind_Resume(a1);
}

uint64_t sub_2263FC660(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;

  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  v2 = *(_QWORD *)(a1 + 24);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_2263BDE64(a1 + 16);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    sub_2263DA640(v5);
  return a1;
}

uint64_t sub_2263FC6D0(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 24);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_2263BDE64(a1 + 16);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    sub_2263DA640(v5);
  return a1;
}

void sub_2263FC97C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,char a25)
{
  void *v25;
  void *v26;

  if (a23 < 0)
    operator delete(__p);
  sub_2263FC660((uint64_t)&a25);

  _Unwind_Resume(a1);
}

void sub_2263FCB70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  void *v16;

  if (a15 < 0)
    operator delete(__p);
  sub_2263FC6D0((uint64_t)&a16);

  _Unwind_Resume(a1);
}

void sub_2263FCCFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, char a17)
{
  void *v17;

  sub_2263FC6D0((uint64_t)&__p);

  _Unwind_Resume(a1);
}

void sub_2263FCF64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  void *v20;
  void *v21;

  sub_2263FC660((uint64_t)&a20);

  _Unwind_Resume(a1);
}

void sub_2263FD2A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,char a25)
{
  void *v25;
  void *v26;

  sub_2263FC660((uint64_t)&a25);

  _Unwind_Resume(a1);
}

void sub_2263FD5FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  if (a2)
    sub_2263AACCC(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2263FD6EC(uint64_t a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  sub_226401D80(a1 + 32);
  v2 = *(unsigned int **)(a1 + 24);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
  }
  v6 = *(unsigned int **)(a1 + 8);
  if (v6)
  {
    v7 = v6 + 2;
    do
    {
      v8 = __ldxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
      (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 8))(v6);
  }
  return a1;
}

void sub_2263FD938(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23)
{
  void *v23;

  sub_2263FC660((uint64_t)&a23);

  _Unwind_Resume(a1);
}

void sub_2263FDAF4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_2263D701C((uint64_t)va);
  MEMORY[0x227697444](v2 - 40);
  _Unwind_Resume(a1);
}

void sub_2263FDC48(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_2263D701C((uint64_t)va);
  MEMORY[0x2276973D8](v2 - 40);
  _Unwind_Resume(a1);
}

void sub_2263FDDC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_2263D701C((uint64_t)&a9);
  sub_2263D701C(v9 - 48);
  _Unwind_Resume(a1);
}

void sub_2263FE040(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  sub_2263D73CC((uint64_t)va);
  sub_2263FE0AC((uint64_t *)va1);

  _Unwind_Resume(a1);
}

_QWORD *sub_2263FE0AC(_QWORD *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;

  v2 = a1[4];
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  v5 = a1[3];
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_2263BDE64((uint64_t)(a1 + 2));
  v8 = a1[1];
  if (v8)
    sub_2263DA640(v8);
  return a1;
}

void sub_2263FE468(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, void **a17)
{
  void *v17;

  a17 = (void **)&a14;
  sub_2264035B4(&a17);
  _Unwind_Resume(a1);
}

void sub_2263FE6FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  void *v13;
  uint64_t v14;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;

  sub_2263D73CC((uint64_t)&a9);
  sub_2263D73CC((uint64_t)&a13);
  v16 = *(_QWORD *)(v14 - 56);
  if ((v16 & 7) != 0)
  {
    v17 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
    do
      v18 = __ldxr(v17);
    while (__stlxr(v18 - 2, v17));
  }

  _Unwind_Resume(a1);
}

void sub_2263FE9D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  va_list va;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v12 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  *(_QWORD *)(v7 - 56) = v6;
  sub_2263BE380((void ***)(v7 - 56));
  sub_2263E9184((uint64_t)va);
  sub_2263D73CC((uint64_t)va1);
  v9 = *(_QWORD *)(v7 - 64);
  if ((v9 & 7) != 0)
  {
    v10 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stlxr(v11 - 2, v10));
  }

  _Unwind_Resume(a1);
}

void sub_2263FEB24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2263D701C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2263FEB38@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;

  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL())
  {
    v5 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
    sub_2263E3F28(a2, (uint64_t *)(a1 + 8), &v5);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    return sub_2263BDE64((uint64_t)&v5);
  }
  else
  {
    *(_DWORD *)a2 = 1;
    *(_QWORD *)(a2 + 8) = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
    result = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
    *(_QWORD *)(a2 + 24) = 0;
  }
  return result;
}

void sub_2263FEBEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2263B5610((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2263FEC48(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  if (!v2 || (*(_BYTE *)(v2 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  JUMPOUT(0x227697A20);
}

void sub_2263FED0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t sub_2263FED20(uint64_t a1)
{
  unint64_t v2;

  v2 = atomic_load(MEMORY[0x24BEE7E98]);
  if (!v2)
    v2 = sub_2263DA79C(MEMORY[0x24BEE7E98]);
  return sub_226401E04(a1, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)(v2 + 312));
}

id sub_2263FEDC4(pxrInternal__aapl__pxrReserved__::UsdPrim *a1, void *a2, pxrInternal__aapl__pxrReserved__ *a3, const pxrInternal__aapl__pxrReserved__::TfToken *a4)
{
  id v7;
  const TfToken *v8;
  unint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase *Instance;
  uint64_t TypeForValueTypeName;
  id v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  USKProperty *v21;
  unint64_t *v22;
  unint64_t v23;
  const char *v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  void *v28;
  unsigned int *v29;
  unsigned int v30;
  id v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  USKProperty *v38;
  unint64_t *v39;
  unint64_t v40;
  const char *v41;
  uint64_t v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int *v47;
  unsigned int v48;
  unsigned int *v49;
  unsigned int v50;
  int v52;
  uint64_t v53;
  int v54;
  int v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  int v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  int v65;
  int v66;
  uint64_t v67;
  __int128 v68;
  __int128 v69;
  uint64_t Type;
  uint64_t v71;

  v7 = a2;
  MEMORY[0x2276976D8](&v68, "rel");
  v9 = *(_QWORD *)a3 & 0xFFFFFFFFFFFFFFF8;
  v10 = (unsigned int *)(v68 & 0xFFFFFFFFFFFFFFF8);
  if ((v68 & 7) != 0)
  {
    do
      v11 = __ldxr(v10);
    while (__stlxr(v11 - 2, v10));
  }
  if ((unsigned int *)v9 == v10)
  {
    v68 = 0u;
    v69 = 0u;
    v31 = objc_retainAutorelease(v7);
    v35 = objc_msgSend_UTF8String(v31, v32, v33, v34);
    MEMORY[0x2276976D8](&v71, v35);
    pxrInternal__aapl__pxrReserved__::UsdPrim::CreateRelationship(a1, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v71);
    LODWORD(v68) = v63;
    *((_QWORD *)&v68 + 1) = v64;
    v64 = 0;
    LODWORD(v69) = v65;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=();
    DWORD1(v69) = v66;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=();
    *((_QWORD *)&v69 + 1) = v67;
    v67 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    sub_2263BDE64((uint64_t)&v65);
    if ((v71 & 7) != 0)
    {
      v36 = (unsigned int *)(v71 & 0xFFFFFFFFFFFFFFF8);
      do
        v37 = __ldxr(v36);
      while (__stlxr(v37 - 2, v36));
    }
    if (sub_2263DA5B4((pxrInternal__aapl__pxrReserved__::UsdObject *)&v68))
    {
      v38 = [USKProperty alloc];
      v52 = v68;
      v53 = *((_QWORD *)&v68 + 1);
      if (*((_QWORD *)&v68 + 1))
      {
        v39 = (unint64_t *)(*((_QWORD *)&v68 + 1) + 48);
        do
          v40 = __ldxr(v39);
        while (__stxr(v40 + 1, v39));
      }
      sub_2263BDDD8(&v54, &v69);
      sub_2263BDE28(&v55, (_DWORD *)&v69 + 1);
      v56 = *((_QWORD *)&v69 + 1);
      if ((BYTE8(v69) & 7) != 0)
      {
        v43 = (unsigned int *)(*((_QWORD *)&v69 + 1) & 0xFFFFFFFFFFFFFFF8);
        do
          v44 = __ldxr(v43);
        while (__stxr(v44 + 2, v43));
        if ((v44 & 1) == 0)
          v56 &= 0xFFFFFFFFFFFFFFF8;
      }
      v28 = (void *)objc_msgSend_initWithUsdProperty_(v38, v41, (uint64_t)&v52, v42);
      if ((v56 & 7) != 0)
      {
        v45 = (unsigned int *)(v56 & 0xFFFFFFFFFFFFFFF8);
        do
          v46 = __ldxr(v45);
        while (__stlxr(v46 - 2, v45));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      sub_2263BDE64((uint64_t)&v54);
      if (v53)
        sub_2263DA640(v53);
    }
    else
    {
      v28 = 0;
    }
    if ((BYTE8(v69) & 7) != 0)
    {
      v49 = (unsigned int *)(*((_QWORD *)&v69 + 1) & 0xFFFFFFFFFFFFFFF8);
      do
        v50 = __ldxr(v49);
      while (__stlxr(v50 - 2, v49));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  }
  else
  {
    Instance = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)atomic_load((unint64_t *)off_24EDD5B58);
    if (!Instance)
      Instance = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance();
    v71 = 0;
    TypeForValueTypeName = pxrInternal__aapl__pxrReserved__::SdfGetTypeForValueTypeName(a3, v8);
    Type = 0;
    v71 = TypeForValueTypeName;
    Type = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FindType(Instance, (const pxrInternal__aapl__pxrReserved__::TfType *)&v71, a4);
    v68 = 0u;
    v69 = 0u;
    v14 = objc_retainAutorelease(v7);
    v18 = objc_msgSend_UTF8String(v14, v15, v16, v17);
    MEMORY[0x2276976D8](&v62, v18);
    pxrInternal__aapl__pxrReserved__::UsdPrim::CreateAttribute();
    LODWORD(v68) = v63;
    *((_QWORD *)&v68 + 1) = v64;
    v64 = 0;
    LODWORD(v69) = v65;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=();
    DWORD1(v69) = v66;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=();
    *((_QWORD *)&v69 + 1) = v67;
    v67 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    sub_2263BDE64((uint64_t)&v65);
    if (v64)
      sub_2263DA640(v64);
    if ((v62 & 7) != 0)
    {
      v19 = (unsigned int *)(v62 & 0xFFFFFFFFFFFFFFF8);
      do
        v20 = __ldxr(v19);
      while (__stlxr(v20 - 2, v19));
    }
    if (sub_2263DA5B4((pxrInternal__aapl__pxrReserved__::UsdObject *)&v68))
    {
      v21 = [USKProperty alloc];
      v57 = v68;
      v58 = *((_QWORD *)&v68 + 1);
      if (*((_QWORD *)&v68 + 1))
      {
        v22 = (unint64_t *)(*((_QWORD *)&v68 + 1) + 48);
        do
          v23 = __ldxr(v22);
        while (__stxr(v23 + 1, v22));
      }
      sub_2263BDDD8(&v59, &v69);
      sub_2263BDE28(&v60, (_DWORD *)&v69 + 1);
      v61 = *((_QWORD *)&v69 + 1);
      if ((BYTE8(v69) & 7) != 0)
      {
        v26 = (unsigned int *)(*((_QWORD *)&v69 + 1) & 0xFFFFFFFFFFFFFFF8);
        do
          v27 = __ldxr(v26);
        while (__stxr(v27 + 2, v26));
        if ((v27 & 1) == 0)
          v61 &= 0xFFFFFFFFFFFFFFF8;
      }
      v28 = (void *)objc_msgSend_initWithUsdProperty_(v21, v24, (uint64_t)&v57, v25);
      if ((v61 & 7) != 0)
      {
        v29 = (unsigned int *)(v61 & 0xFFFFFFFFFFFFFFF8);
        do
          v30 = __ldxr(v29);
        while (__stlxr(v30 - 2, v29));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      sub_2263BDE64((uint64_t)&v59);
      if (v58)
        sub_2263DA640(v58);
    }
    else
    {
      v28 = 0;
    }
    if ((BYTE8(v69) & 7) != 0)
    {
      v47 = (unsigned int *)(*((_QWORD *)&v69 + 1) & 0xFFFFFFFFFFFFFFF8);
      do
        v48 = __ldxr(v47);
      while (__stlxr(v48 - 2, v47));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  }
  sub_2263BDE64((uint64_t)&v69);
  if (*((_QWORD *)&v68 + 1))
    sub_2263DA640(*((uint64_t *)&v68 + 1));

  return v28;
}

void sub_2263FF2A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  sub_2263D73CC((uint64_t)va);
  sub_2263D73CC((uint64_t)va1);

  _Unwind_Resume(a1);
}

void sub_2263FFA00(_Unwind_Exception *a1, void *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  va_list va;

  va_start(va, a9);
  sub_2263D73CC((uint64_t)va);
  sub_2263D73CC(v12 - 144);
  MEMORY[0x2276976C0](v12 - 104);
  v14 = *(_QWORD *)(v12 - 96);
  if ((v14 & 7) != 0)
  {
    v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }

  _Unwind_Resume(a1);
}

uint64_t sub_2263FFB7C(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a1 + 8);
  if (!v2 || (*(_BYTE *)(v2 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  v3 = *(unint64_t **)(v2 + 24);
  v4 = atomic_load(v3 + 7);
  if (v4)
    return v4;
  else
    return pxrInternal__aapl__pxrReserved__::UsdPrimTypeInfo::_FindOrCreatePrimDefinition((pxrInternal__aapl__pxrReserved__::UsdPrimTypeInfo *)v3);
}

pxrInternal__aapl__pxrReserved__::SdfSpec *sub_2263FFBCC(pxrInternal__aapl__pxrReserved__::SdfSpec *a1)
{
  pxrInternal__aapl__pxrReserved__::SdfSpec *v1;
  const char *v2;
  const char *p_p;
  void *__p;
  char v6;
  _QWORD v7[4];
  char v8;
  int v9;

  v1 = a1;
  if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(a1))
  {
    v7[0] = "sdf/declareHandles.h";
    v7[1] = "operator->";
    v7[2] = 96;
    v7[3] = "SpecType *pxrInternal__aapl__pxrReserved__::SdfHandle<pxrInternal__aapl__pxrReserved__::SdfPropertySpec>::op"
            "erator->() const [T = pxrInternal__aapl__pxrReserved__::SdfPropertySpec]";
    v8 = 0;
    v9 = 4;
    pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__15SdfPropertySpecE" & 0x7FFFFFFFFFFFFFFFLL), v2);
    if (v6 >= 0)
      p_p = (const char *)&__p;
    else
      p_p = (const char *)__p;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v7, "Dereferenced an invalid %s", p_p);
    if (v6 < 0)
      operator delete(__p);
    return 0;
  }
  return v1;
}

void sub_2263FFC80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2263FFE98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  unsigned int *v9;
  unsigned int v10;
  va_list va;

  va_start(va, a3);
  if ((a3 & 7) != 0)
  {
    v9 = (unsigned int *)(a3 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  sub_2263D701C((uint64_t)va);

  _Unwind_Resume(a1);
}

void sub_226400060(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_2263B5610((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_22640025C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  char *v18;
  uint64_t v19;

  sub_2264035B4(&a13);
  v18 = a17;
  if (a17 == &a14)
  {
    v19 = 4;
    v18 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v19 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v18 + 8 * v19))();
LABEL_6:
  _Unwind_Resume(a1);
}

void sub_226400750(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_226400940(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  sub_2263D701C((uint64_t)&a9);
  sub_2263D701C((uint64_t)&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_226400968@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v4;
  unint64_t *v5;
  unint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v8;
  uint64_t v9;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v10;

  v4 = *(pxrInternal__aapl__pxrReserved__::Usd_PrimData **)(a1 + 8);
  v9 = 0;
  v10 = v4;
  sub_2263BDDD8(&v9, (_DWORD *)(a1 + 16));
  sub_2263BDE28((_DWORD *)&v9 + 1, (_DWORD *)(a1 + 20));
  sub_226402178(&v10, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v9);
  v8 = v10;
  if (v10)
  {
    v5 = (unint64_t *)((char *)v10 + 48);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  sub_2263E3F28(a2, (uint64_t *)&v8, &v9);
  if (v8)
    sub_2263DA640((uint64_t)v8);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return sub_2263BDE64((uint64_t)&v9);
}

void sub_226400A1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  if (a3)
    sub_2263DA640(a3);
  sub_2263B5610((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_226400B60(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_226400DF0(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_2263BDE64(a1 + 8);
  return a1;
}

void sub_226400EE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_226400F04((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_226400F04(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_2263BDE64(a1 + 48);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_2263BDE64(a1 + 8);
  return a1;
}

void sub_226401000(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_226400F04((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2264011FC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_2264013F0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_226401400@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  int v5;
  int v7;
  int v8;

  v4 = *a1;
  sub_2263BDDD8(&v7, (_DWORD *)a1 + 4);
  sub_2263BDE28(&v8, (_DWORD *)a1 + 5);
  v5 = *((_DWORD *)a1 + 12);
  *(_QWORD *)a2 = v4;
  *(_QWORD *)(a2 + 8) = a1;
  sub_2263BDDD8((_DWORD *)(a2 + 16), &v7);
  sub_2263BDE28((_DWORD *)(a2 + 20), &v8);
  *(_DWORD *)(a2 + 24) = v5;
  *(_WORD *)(a2 + 28) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return sub_2263BDE64((uint64_t)&v7);
}

uint64_t sub_226401498(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_2263BDE64(a1 + 16);
  return a1;
}

void sub_226401574(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_22640159C((uint64_t)va);

  _Unwind_Resume(a1);
}

uint64_t sub_22640159C(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_2263BDE64(a1 + 16);
  return a1;
}

void sub_226401670(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_22640159C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_226401730(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_22640159C((uint64_t)va);

  _Unwind_Resume(a1);
}

void sub_2264017F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_22640159C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2264019F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_226401A34@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t result;
  uint64_t v8;

  v4 = *(_QWORD *)a1;
  v8 = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 48);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  sub_2263E3F28(a2, &v8, (_DWORD *)(a1 + 16));
  result = v8;
  if (v8)
    return sub_2263DA640(v8);
  return result;
}

void sub_226401A94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    sub_2263DA640(a10);
  _Unwind_Resume(exception_object);
}

void sub_226401BE4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_226401D34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2263D73CC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_226401D80(uint64_t a1)
{
  int v2;
  uint64_t v3;
  int v4;

  v2 = *(_DWORD *)(a1 + 32);
  if (v2 > 2)
  {
    sub_2263AE3F8(a1);
  }
  else
  {
    *(_DWORD *)(a1 + 32) = v2 - 1;
    if (v2)
    {
      v3 = a1;
      do
      {
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        sub_2263BDE64(v3 + 8);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
        sub_2263BDE64(v3);
        v3 += 16;
        v4 = *(_DWORD *)(a1 + 32);
        *(_DWORD *)(a1 + 32) = v4 - 1;
      }
      while (v4);
    }
  }
  return a1;
}

uint64_t sub_226401E04(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  if (!v2 || (*(_BYTE *)(v2 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  return pxrInternal__aapl__pxrReserved__::UsdStage::_SetMetadataImpl<pxrInternal__aapl__pxrReserved__::SdfAbstractDataConstValue>();
}

uint64_t sub_226401E8C(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  BOOL v5;

  v3 = **(_DWORD **)(a1 + 8);
  v4 = *(_QWORD *)(a2 + 8);
  if (v4)
    v5 = (*(_QWORD *)(a2 + 8) & 3) == 3;
  else
    v5 = 1;
  if (!v5)
    (*(void (**)(uint64_t))((v4 & 0xFFFFFFFFFFFFFFF8) + 32))(a2);
  *(_QWORD *)(a2 + 8) = (char *)&off_24EDD8B40 + 3;
  *(_DWORD *)a2 = v3;
  return 1;
}

uint64_t sub_226401EEC(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  v2 = (uint64_t)a2;
  result = sub_226402108(a2);
  if ((_DWORD)result)
  {
    v5 = *(_QWORD *)(v2 + 8);
    if ((v5 & 4) != 0)
      v2 = (*(uint64_t (**)(uint64_t))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
    return *(_DWORD *)v2 == **(_DWORD **)(a1 + 8);
  }
  return result;
}

_DWORD *sub_226401F4C(_DWORD *result, _DWORD *a2)
{
  *a2 = *result;
  return result;
}

_DWORD *sub_226401F5C(_DWORD *result, _DWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_226401F68()
{
  return 1;
}

unint64_t sub_226401F70(unsigned int *a1)
{
  return bswap64(0x9E3779B97F4A7C55 * *a1);
}

BOOL sub_226401F90(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

BOOL sub_226401FA4(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

uint64_t sub_226401FBC()
{
  return 0;
}

void *sub_226401FCC()
{
  return &unk_24EDD8AE8;
}

uint64_t sub_226401FD8()
{
  return 0;
}

uint64_t sub_226401FE0()
{
  return MEMORY[0x24BEDB7C8];
}

uint64_t sub_226401FEC()
{
  return 0;
}

uint64_t sub_226401FF4()
{
  return 0;
}

BOOL sub_226401FFC(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12SdfSpecifierE" & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_22640202C(uint64_t a1, const std::type_info *a2)
{
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&unk_24EDD8AE8, a2);
}

void *sub_22640204C()
{
  return &unk_24EDD8AE8;
}

_DWORD *sub_22640205C@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)(a2 + 8) = (char *)&off_24EDD8B40 + 3;
  *(_DWORD *)a2 = *result;
  return result;
}

_QWORD *sub_226402078(uint64_t a1, _QWORD *a2)
{
  void **v3;
  uint64_t v4;
  _QWORD *v5;
  void *__p[2];
  unsigned __int8 v8;

  pxrInternal__aapl__pxrReserved__::TfEnum::GetName();
  if ((v8 & 0x80u) == 0)
    v3 = __p;
  else
    v3 = (void **)__p[0];
  if ((v8 & 0x80u) == 0)
    v4 = v8;
  else
    v4 = (uint64_t)__p[1];
  v5 = sub_2263B0814(a2, (uint64_t)v3, v4);
  if ((char)v8 < 0)
    operator delete(__p[0]);
  return v5;
}

void sub_2264020EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_226402108(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (!strcmp((const char *)(*(_QWORD *)(*(_QWORD *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12SdfSpecifierE" & 0x7FFFFFFFFFFFFFFFLL)))return 1;
  if ((v1 & 4) == 0)
    return 0;
  return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, (const std::type_info *)&unk_24EDD8AE8);
}

pxrInternal__aapl__pxrReserved__::Usd_PrimData *sub_226402178(pxrInternal__aapl__pxrReserved__::Usd_PrimData **a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *result;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v5;
  uint64_t Text;
  const char *v7;
  _QWORD v8[4];
  char v9;

  *a1 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetParent(*a1);
  result = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL();
  if ((_DWORD)result)
  {
    pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(a2);
    sub_2263BE05C((uint64_t)a2, (int *)v8);
    sub_2263BE0B0((uint64_t)a2 + 4);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    result = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)sub_2263BDE64((uint64_t)v8);
    v5 = *a1;
    if (*a1)
    {
      if ((*((_BYTE *)v5 + 57) & 0x10) != 0)
      {
        result = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)pxrInternal__aapl__pxrReserved__::SdfPath::IsRootPrimPath((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)((char *)v5 + 16));
        if ((_DWORD)result)
        {
          result = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetPrimDataAtPathOrInPrototype(*a1, a2);
          *a1 = result;
          if (!result)
          {
            v8[0] = "usd/primData.h";
            v8[1] = "Usd_MoveToParent";
            v8[2] = 527;
            v8[3] = "void pxrInternal__aapl__pxrReserved__::Usd_MoveToParent(PrimDataPtr &, SdfPath &) [PrimDataPtr = con"
                    "st pxrInternal__aapl__pxrReserved__::Usd_PrimData *]";
            v9 = 0;
            Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
            pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"No prim at <%s>", v7, Text);
            result = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper();
            if (!(_DWORD)result)
              return result;
            result = *a1;
          }
          if (*((_QWORD *)result + 2) == *(_QWORD *)a2)
          {
            v8[0] = 0;
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
            sub_2263BE05C((uint64_t)a2, (int *)v8);
            sub_2263BE0B0((uint64_t)a2 + 4);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
            return (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)sub_2263BDE64((uint64_t)v8);
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_2264022F8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v6;
  uint64_t v8;
  _BYTE v9[8];
  uint64_t v10;
  _BYTE v11[8];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v15;

  v6 = *(pxrInternal__aapl__pxrReserved__::Usd_PrimData **)(a1 + 8);
  v14 = 0;
  v15 = v6;
  sub_2263BDDD8(&v14, (_DWORD *)(a1 + 16));
  sub_2263BDE28((_DWORD *)&v14 + 1, (_DWORD *)(a1 + 20));
  if (!sub_2264024B0(&v15, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v14, 0, a2))
  {
    v15 = 0;
    v13 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
    sub_2263BE05C((uint64_t)&v14, (int *)&v13);
    sub_2263BE0B0((uint64_t)&v14 + 4);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    sub_2263BDE64((uint64_t)&v13);
  }
  sub_226402A34((uint64_t)v11, &v15, &v14, (__int128 *)a2);
  v13 = 0;
  v8 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  sub_226402A34((uint64_t)v9, &v13, &v8, (__int128 *)a2);
  sub_226402BA0(a3, (uint64_t)v11, (uint64_t)v9);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_2263BDE64((uint64_t)&v10);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_2263BDE64((uint64_t)&v8);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_2263BDE64((uint64_t)&v12);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return sub_2263BDE64((uint64_t)&v14);
}

void sub_226402484(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  uint64_t v15;

  sub_2263B5610((uint64_t)&a9);
  sub_226400DF0((uint64_t)&a15);
  sub_2263B5610(v15 - 64);
  _Unwind_Resume(a1);
}

BOOL sub_2264024B0(pxrInternal__aapl__pxrReserved__::Usd_PrimData **a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, pxrInternal__aapl__pxrReserved__::Usd_PrimData *a3, uint64_t *a4)
{
  int v8;
  uint64_t v9;
  int v10;
  pxrInternal__aapl__pxrReserved__::SdfPath *v11;
  const pxrInternal__aapl__pxrReserved__::TfToken *NameToken;
  int v14;

  v8 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL();
  if ((*((_BYTE *)*a1 + 57) & 1) != 0)
  {
    v9 = *(_QWORD *)(pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetPrototype(*a1) + 32);
    if (v9)
      goto LABEL_6;
    return 0;
  }
  v9 = *((_QWORD *)*a1 + 4);
  if (!v9)
    return 0;
  if (!v8)
  {
    v10 = 0;
    goto LABEL_10;
  }
LABEL_6:
  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL())
    v11 = a2;
  else
    v11 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)((char *)*a1 + 16);
  NameToken = (const pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)(v9 + 16));
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild(v11, NameToken);
  sub_2263BE05C((uint64_t)a2, &v14);
  sub_2263BE0B0((uint64_t)a2 + 4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_2263BDE64((uint64_t)&v14);
  v10 = 1;
LABEL_10:
  *a1 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v9;
  return sub_2264028E8(a4, (uint64_t)a1, v10) || !sub_2264025D8(a1, a2, a3, a4);
}

BOOL sub_2264025D8(pxrInternal__aapl__pxrReserved__::Usd_PrimData **a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, pxrInternal__aapl__pxrReserved__::Usd_PrimData *a3, uint64_t *a4)
{
  int v8;
  uint64_t v9;
  unint64_t v10;
  BOOL v11;
  int v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v16;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v17;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *PrimDataAtPathOrInPrototype;
  _BYTE *v19;
  const pxrInternal__aapl__pxrReserved__::TfToken *NameToken;
  BOOL v21;
  uint64_t Text;
  const char *v24;
  _QWORD v25[4];
  char v26;
  _BYTE v27[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v28;

  v8 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL();
  v9 = *((_QWORD *)*a1 + 5);
  if ((v9 & 7) != 0)
    v10 = 0;
  else
    v10 = v9 & 0xFFFFFFFFFFFFFFF8;
  v28 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v10;
  if (v10)
    v11 = v10 == (_QWORD)a3;
  else
    v11 = 1;
  if (!v11)
  {
    v12 = v8;
    do
    {
      v13 = sub_2264028E8(a4, (uint64_t)&v28, v12);
      v10 = (unint64_t)v28;
      if (v13)
        break;
      *a1 = v28;
      v14 = *(_QWORD *)(v10 + 40);
      v10 = (v14 & 7) != 0 ? 0 : v14 & 0xFFFFFFFFFFFFFFF8;
      v28 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v10;
    }
    while (v10 && v10 != (_QWORD)a3);
  }
  if (!v10)
  {
    v16 = *((_QWORD *)*a1 + 5);
    if ((v16 & 7) != 0)
      v10 = v16 & 0xFFFFFFFFFFFFFFF8;
    else
      v10 = 0;
  }
  *a1 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v10;
  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL())
  {
    if (*a1 == a3)
    {
      v25[0] = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
      sub_2263BE05C((uint64_t)a2, (int *)v25);
      sub_2263BE0B0((uint64_t)a2 + 4);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
LABEL_32:
      v19 = v25;
LABEL_34:
      sub_2263BDE64((uint64_t)v19);
      goto LABEL_35;
    }
    if (*a1 == v28)
    {
      pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(a2);
      NameToken = (const pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)((char *)*a1 + 16));
      pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild((pxrInternal__aapl__pxrReserved__::SdfPath *)v27, NameToken);
      sub_2263BE05C((uint64_t)a2, (int *)v25);
      sub_2263BE0B0((uint64_t)a2 + 4);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      sub_2263BDE64((uint64_t)v25);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      v19 = v27;
      goto LABEL_34;
    }
    pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(a2);
    sub_2263BE05C((uint64_t)a2, (int *)v25);
    sub_2263BE0B0((uint64_t)a2 + 4);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    sub_2263BDE64((uint64_t)v25);
    v17 = *a1;
    if (!*a1
      || (*((_BYTE *)v17 + 57) & 0x10) == 0
      || !pxrInternal__aapl__pxrReserved__::SdfPath::IsRootPrimPath((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)((char *)v17 + 16)))
    {
      goto LABEL_35;
    }
    PrimDataAtPathOrInPrototype = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetPrimDataAtPathOrInPrototype(*a1, a2);
    *a1 = PrimDataAtPathOrInPrototype;
    if (PrimDataAtPathOrInPrototype)
    {
LABEL_29:
      if (*((_QWORD *)PrimDataAtPathOrInPrototype + 2) != *(_QWORD *)a2)
        goto LABEL_35;
      v25[0] = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
      sub_2263BE05C((uint64_t)a2, (int *)v25);
      sub_2263BE0B0((uint64_t)a2 + 4);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
      goto LABEL_32;
    }
    v25[0] = "usd/primData.h";
    v25[1] = "Usd_MoveToNextSiblingOrParent";
    v25[2] = 576;
    v25[3] = "BOOL pxrInternal__aapl__pxrReserved__::Usd_MoveToNextSiblingOrParent(PrimDataPtr &, SdfPath &, PrimDataPtr,"
             " const Usd_PrimFlagsPredicate &) [PrimDataPtr = const pxrInternal__aapl__pxrReserved__::Usd_PrimData *]";
    v26 = 0;
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
    pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"No prim at <%s>", v24, Text);
    if (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper())
    {
      PrimDataAtPathOrInPrototype = *a1;
      goto LABEL_29;
    }
  }
LABEL_35:
  if (v28)
    v21 = 1;
  else
    v21 = *a1 == 0;
  return !v21;
}

void sub_2264028CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_2263B5610((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_2264028E8(uint64_t *a1, uint64_t a2, int a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  unint64_t v9;

  v3 = 0x2000;
  if (!a3)
    v3 = 0;
  v4 = *(_QWORD *)(*(_QWORD *)a2 + 56) & 0xFFFFFFFFFFFFDFFFLL | v3;
  v5 = *a1;
  v6 = a1[1];
  v9 = *a1 & v4;
  v8 = v6 & v5;
  return *((unsigned __int8 *)a1 + 16) != sub_226402968(&v9, 0, (uint64_t)&v9, 0xFu, &v8);
}

uint64_t sub_226402968(_QWORD *a1, unsigned int a2, uint64_t a3, unsigned int a4, _QWORD *a5)
{
  int64_t v5;
  unint64_t v6;
  uint64_t v7;
  BOOL v8;

  v5 = a4 - (unint64_t)a2 + 8 * (a3 - (_QWORD)a1);
  if (v5 >= 1)
  {
    if (a2)
    {
      if (v5 >= (unint64_t)(64 - a2))
        v6 = 64 - a2;
      else
        v6 = a4 - (unint64_t)a2 + 8 * (a3 - (_QWORD)a1);
      if (((0xFFFFFFFFFFFFFFFFLL >> (64 - a2 - v6)) & (-1 << a2) & (*a1 ^ *a5)) != 0)
        return 0;
      v5 -= v6;
      ++a5;
      ++a1;
    }
    if (v5 >= 64)
    {
      while (*a5 == *a1)
      {
        v7 = v5 - 64;
        ++a1;
        ++a5;
        v8 = v5 <= 127;
        v5 -= 64;
        if (v8)
          goto LABEL_14;
      }
      return 0;
    }
    v7 = v5;
LABEL_14:
    if (v7 >= 1 && (*a1 ^ *a5) << -(char)v7)
      return 0;
  }
  return 1;
}

uint64_t sub_226402A34(uint64_t a1, _QWORD *a2, _DWORD *a3, __int128 *a4)
{
  __int128 v7;

  *(_QWORD *)a1 = *a2;
  sub_2263BDDD8((_DWORD *)(a1 + 8), a3);
  sub_2263BDE28((_DWORD *)(a1 + 12), a3 + 1);
  v7 = *a4;
  *(_QWORD *)(a1 + 32) = *((_QWORD *)a4 + 2);
  *(_OWORD *)(a1 + 16) = v7;
  if (*(_QWORD *)a1 && !sub_226402AD0((uint64_t *)(a1 + 16), a1))
    sub_226402B08(a1);
  return a1;
}

void sub_226402ABC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2263B5610(v1);
  _Unwind_Resume(a1);
}

BOOL sub_226402AD0(uint64_t *a1, uint64_t a2)
{
  int v4;

  v4 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL();
  return sub_2264028E8(a1, a2, v4);
}

uint64_t sub_226402B08(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  v2 = a1 + 8;
  result = sub_2264025D8((pxrInternal__aapl__pxrReserved__::Usd_PrimData **)a1, (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 8), 0, (uint64_t *)(a1 + 16));
  if ((_DWORD)result)
  {
    *(_QWORD *)a1 = 0;
    v4 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
    sub_2263BE05C(v2, (int *)&v4);
    sub_2263BE0B0(a1 + 12);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
    return sub_2263BDE64((uint64_t)&v4);
  }
  return result;
}

uint64_t sub_226402BA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v6;
  __int128 v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  sub_2263BDDD8((_DWORD *)(a1 + 8), (_DWORD *)(a2 + 8));
  sub_2263BDE28((_DWORD *)(a1 + 12), (_DWORD *)(a2 + 12));
  v6 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)a3;
  sub_2263BDDD8((_DWORD *)(a1 + 48), (_DWORD *)(a3 + 8));
  sub_2263BDE28((_DWORD *)(a1 + 52), (_DWORD *)(a3 + 12));
  v7 = *(_OWORD *)(a3 + 16);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a3 + 32);
  *(_OWORD *)(a1 + 56) = v7;
  return a1;
}

uint64_t sub_226402C28(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_226402968((_QWORD *)a1, 0, a1, 0xFu, (_QWORD *)a2);
  if ((_DWORD)result)
  {
    result = sub_226402968((_QWORD *)(a1 + 8), 0, a1 + 8, 0xFu, (_QWORD *)(a2 + 8));
    if ((_DWORD)result)
      return *(unsigned __int8 *)(a1 + 16) == *(unsigned __int8 *)(a2 + 16);
  }
  return result;
}

uint64_t sub_226402C9C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t result;
  uint64_t v8;

  v4 = *(_QWORD *)a1;
  v8 = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 48);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  sub_2263E3F28(a2, &v8, (_DWORD *)(a1 + 8));
  result = v8;
  if (v8)
    return sub_2263DA640(v8);
  return result;
}

void sub_226402CFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    sub_2263DA640(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_226402D14(uint64_t a1)
{
  *(_QWORD *)a1 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 72) = 0;
  return a1;
}

uint64_t sub_226402D78(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  BOOL v9;
  uint64_t v11;
  BOOL v13;

  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle();
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle();
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 40) = 0;
  v6 = *(_QWORD *)(a2 + 8);
  if (!v6)
    goto LABEL_20;
  v7 = *(_QWORD *)(v6 + 40) & 7;
  v8 = *(_QWORD *)(v6 + 40) & 0xFFFFFFFFFFFFFFF8;
  if (v8)
    v9 = v7 == 0;
  else
    v9 = 0;
  if (v9)
    goto LABEL_21;
  if (!v7 || v8 == 0)
  {
LABEL_20:
    v8 = 0;
    goto LABEL_21;
  }
  while (1)
  {
    v11 = *(_QWORD *)(v8 + 40);
    v8 = v11 & 0xFFFFFFFFFFFFFFF8;
    if ((v11 & 7) == 0 && v8 != 0)
      break;
    if (v8)
      v13 = (v11 & 7) == 0;
    else
      v13 = 1;
    if (v13)
      goto LABEL_20;
  }
LABEL_21:
  sub_226402E44(a1, v6, v8, (_DWORD *)(a2 + 16), a3);
  return a1;
}

void sub_226402E30(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_2263B5610(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_226402E44(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4, _QWORD *a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v12;
  __int128 v13;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  sub_2263C0080(a1 + 16, a4);
  sub_2263C00D4(a1 + 20, a4 + 1);
  v8 = *a5;
  v9 = a5[1];
  if (*(_QWORD *)a1)
  {
    v10 = a5[2];
    if ((pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL() & 1) == 0
      && ((v8 & 0x2000) != 0 || (v9 & 0x2000) == 0))
    {
      v8 |= 0x2000uLL;
      v9 &= ~0x2000uLL;
    }
  }
  else
  {
    LOBYTE(v10) = *((_BYTE *)a5 + 16);
  }
  *(_QWORD *)(a1 + 24) = v8;
  *(_QWORD *)(a1 + 32) = v9;
  *(_BYTE *)(a1 + 40) = v10;
  *(_BYTE *)(a1 + 52) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  v12 = 0u;
  v13 = 0u;
  sub_226401400((uint64_t *)a1, (uint64_t)&v12);
  if ((_QWORD)v12 != *(_QWORD *)(a1 + 8) && !sub_226402AD0((uint64_t *)(a1 + 24), (uint64_t)&v12))
  {
    BYTE12(v13) = 1;
    pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::increment((pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator *)&v12);
    sub_226402F6C(a1, (uint64_t)&v12);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  return sub_2263BDE64((uint64_t)&v13);
}

void sub_226402F58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_226401498((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_226402F6C(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (*(_BYTE *)(a2 + 29))
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper();
  *(_QWORD *)a1 = *(_QWORD *)a2;
  sub_2263C0080(a1 + 16, (_DWORD *)(a2 + 16));
  result = sub_2263C00D4(a1 + 20, (_DWORD *)(a2 + 20));
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 24);
  return result;
}

uint64_t sub_226403004(unint64_t *a1)
{
  uint64_t result;
  uint64_t v4;

  result = sub_22640305C();
  while (!__ldaxr(a1))
  {
    if (!__stlxr(result, a1))
      return result;
  }
  __clrex();
  if (result)
  {
    v4 = sub_2264030BC(result);
    MEMORY[0x2276980E0](v4, 0x60C4005C00B59);
  }
  return atomic_load(a1);
}

uint64_t sub_22640305C()
{
  uint64_t v0;

  v0 = operator new();
  MEMORY[0x2276974C8]();
  return v0;
}

void sub_226403098(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x2276980E0](v1, 0x60C4005C00B59);
  _Unwind_Resume(a1);
}

uint64_t sub_2264030BC(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int *v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int *v45;
  unsigned int v46;
  uint64_t v47;
  unsigned int *v48;
  unsigned int v49;
  uint64_t v50;
  unsigned int *v51;
  unsigned int v52;
  uint64_t v53;
  unsigned int *v54;
  unsigned int v55;
  uint64_t v56;
  unsigned int *v57;
  unsigned int v58;
  uint64_t v59;
  unsigned int *v60;
  unsigned int v61;
  uint64_t v62;
  unsigned int *v63;
  unsigned int v64;
  uint64_t v65;
  unsigned int *v66;
  unsigned int v67;
  uint64_t v68;
  unsigned int *v69;
  unsigned int v70;
  uint64_t v71;
  unsigned int *v72;
  unsigned int v73;
  uint64_t v74;
  unsigned int *v75;
  unsigned int v76;
  uint64_t v77;
  unsigned int *v78;
  unsigned int v79;
  uint64_t v80;
  unsigned int *v81;
  unsigned int v82;
  uint64_t v83;
  unsigned int *v84;
  unsigned int v85;
  uint64_t v86;
  unsigned int *v87;
  unsigned int v88;
  uint64_t v89;
  unsigned int *v90;
  unsigned int v91;
  uint64_t v92;
  unsigned int *v93;
  unsigned int v94;
  uint64_t v95;
  unsigned int *v96;
  unsigned int v97;
  uint64_t v98;
  unsigned int *v99;
  unsigned int v100;
  uint64_t v101;
  unsigned int *v102;
  unsigned int v103;
  uint64_t v104;
  unsigned int *v105;
  unsigned int v106;
  uint64_t v107;
  unsigned int *v108;
  unsigned int v109;
  uint64_t v110;
  unsigned int *v111;
  unsigned int v112;
  unsigned int *v113;
  unsigned int v114;
  void **v116;

  v116 = (void **)(a1 + 304);
  sub_2263E41A0(&v116);
  v2 = *(_QWORD *)(a1 + 296);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  v5 = *(_QWORD *)(a1 + 288);
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  v8 = *(_QWORD *)(a1 + 280);
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  v11 = *(_QWORD *)(a1 + 272);
  if ((v11 & 7) != 0)
  {
    v12 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  v14 = *(_QWORD *)(a1 + 264);
  if ((v14 & 7) != 0)
  {
    v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }
  v17 = *(_QWORD *)(a1 + 256);
  if ((v17 & 7) != 0)
  {
    v18 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
    do
      v19 = __ldxr(v18);
    while (__stlxr(v19 - 2, v18));
  }
  v20 = *(_QWORD *)(a1 + 248);
  if ((v20 & 7) != 0)
  {
    v21 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
    do
      v22 = __ldxr(v21);
    while (__stlxr(v22 - 2, v21));
  }
  v23 = *(_QWORD *)(a1 + 240);
  if ((v23 & 7) != 0)
  {
    v24 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
    do
      v25 = __ldxr(v24);
    while (__stlxr(v25 - 2, v24));
  }
  v26 = *(_QWORD *)(a1 + 232);
  if ((v26 & 7) != 0)
  {
    v27 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
    do
      v28 = __ldxr(v27);
    while (__stlxr(v28 - 2, v27));
  }
  v29 = *(_QWORD *)(a1 + 224);
  if ((v29 & 7) != 0)
  {
    v30 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFFFF8);
    do
      v31 = __ldxr(v30);
    while (__stlxr(v31 - 2, v30));
  }
  v32 = *(_QWORD *)(a1 + 216);
  if ((v32 & 7) != 0)
  {
    v33 = (unsigned int *)(v32 & 0xFFFFFFFFFFFFFFF8);
    do
      v34 = __ldxr(v33);
    while (__stlxr(v34 - 2, v33));
  }
  v35 = *(_QWORD *)(a1 + 208);
  if ((v35 & 7) != 0)
  {
    v36 = (unsigned int *)(v35 & 0xFFFFFFFFFFFFFFF8);
    do
      v37 = __ldxr(v36);
    while (__stlxr(v37 - 2, v36));
  }
  v38 = *(_QWORD *)(a1 + 200);
  if ((v38 & 7) != 0)
  {
    v39 = (unsigned int *)(v38 & 0xFFFFFFFFFFFFFFF8);
    do
      v40 = __ldxr(v39);
    while (__stlxr(v40 - 2, v39));
  }
  v41 = *(_QWORD *)(a1 + 192);
  if ((v41 & 7) != 0)
  {
    v42 = (unsigned int *)(v41 & 0xFFFFFFFFFFFFFFF8);
    do
      v43 = __ldxr(v42);
    while (__stlxr(v43 - 2, v42));
  }
  v44 = *(_QWORD *)(a1 + 184);
  if ((v44 & 7) != 0)
  {
    v45 = (unsigned int *)(v44 & 0xFFFFFFFFFFFFFFF8);
    do
      v46 = __ldxr(v45);
    while (__stlxr(v46 - 2, v45));
  }
  v47 = *(_QWORD *)(a1 + 176);
  if ((v47 & 7) != 0)
  {
    v48 = (unsigned int *)(v47 & 0xFFFFFFFFFFFFFFF8);
    do
      v49 = __ldxr(v48);
    while (__stlxr(v49 - 2, v48));
  }
  v50 = *(_QWORD *)(a1 + 168);
  if ((v50 & 7) != 0)
  {
    v51 = (unsigned int *)(v50 & 0xFFFFFFFFFFFFFFF8);
    do
      v52 = __ldxr(v51);
    while (__stlxr(v52 - 2, v51));
  }
  v53 = *(_QWORD *)(a1 + 160);
  if ((v53 & 7) != 0)
  {
    v54 = (unsigned int *)(v53 & 0xFFFFFFFFFFFFFFF8);
    do
      v55 = __ldxr(v54);
    while (__stlxr(v55 - 2, v54));
  }
  v56 = *(_QWORD *)(a1 + 152);
  if ((v56 & 7) != 0)
  {
    v57 = (unsigned int *)(v56 & 0xFFFFFFFFFFFFFFF8);
    do
      v58 = __ldxr(v57);
    while (__stlxr(v58 - 2, v57));
  }
  v59 = *(_QWORD *)(a1 + 144);
  if ((v59 & 7) != 0)
  {
    v60 = (unsigned int *)(v59 & 0xFFFFFFFFFFFFFFF8);
    do
      v61 = __ldxr(v60);
    while (__stlxr(v61 - 2, v60));
  }
  v62 = *(_QWORD *)(a1 + 136);
  if ((v62 & 7) != 0)
  {
    v63 = (unsigned int *)(v62 & 0xFFFFFFFFFFFFFFF8);
    do
      v64 = __ldxr(v63);
    while (__stlxr(v64 - 2, v63));
  }
  v65 = *(_QWORD *)(a1 + 128);
  if ((v65 & 7) != 0)
  {
    v66 = (unsigned int *)(v65 & 0xFFFFFFFFFFFFFFF8);
    do
      v67 = __ldxr(v66);
    while (__stlxr(v67 - 2, v66));
  }
  v68 = *(_QWORD *)(a1 + 120);
  if ((v68 & 7) != 0)
  {
    v69 = (unsigned int *)(v68 & 0xFFFFFFFFFFFFFFF8);
    do
      v70 = __ldxr(v69);
    while (__stlxr(v70 - 2, v69));
  }
  v71 = *(_QWORD *)(a1 + 112);
  if ((v71 & 7) != 0)
  {
    v72 = (unsigned int *)(v71 & 0xFFFFFFFFFFFFFFF8);
    do
      v73 = __ldxr(v72);
    while (__stlxr(v73 - 2, v72));
  }
  v74 = *(_QWORD *)(a1 + 104);
  if ((v74 & 7) != 0)
  {
    v75 = (unsigned int *)(v74 & 0xFFFFFFFFFFFFFFF8);
    do
      v76 = __ldxr(v75);
    while (__stlxr(v76 - 2, v75));
  }
  v77 = *(_QWORD *)(a1 + 96);
  if ((v77 & 7) != 0)
  {
    v78 = (unsigned int *)(v77 & 0xFFFFFFFFFFFFFFF8);
    do
      v79 = __ldxr(v78);
    while (__stlxr(v79 - 2, v78));
  }
  v80 = *(_QWORD *)(a1 + 88);
  if ((v80 & 7) != 0)
  {
    v81 = (unsigned int *)(v80 & 0xFFFFFFFFFFFFFFF8);
    do
      v82 = __ldxr(v81);
    while (__stlxr(v82 - 2, v81));
  }
  v83 = *(_QWORD *)(a1 + 80);
  if ((v83 & 7) != 0)
  {
    v84 = (unsigned int *)(v83 & 0xFFFFFFFFFFFFFFF8);
    do
      v85 = __ldxr(v84);
    while (__stlxr(v85 - 2, v84));
  }
  v86 = *(_QWORD *)(a1 + 72);
  if ((v86 & 7) != 0)
  {
    v87 = (unsigned int *)(v86 & 0xFFFFFFFFFFFFFFF8);
    do
      v88 = __ldxr(v87);
    while (__stlxr(v88 - 2, v87));
  }
  v89 = *(_QWORD *)(a1 + 64);
  if ((v89 & 7) != 0)
  {
    v90 = (unsigned int *)(v89 & 0xFFFFFFFFFFFFFFF8);
    do
      v91 = __ldxr(v90);
    while (__stlxr(v91 - 2, v90));
  }
  v92 = *(_QWORD *)(a1 + 56);
  if ((v92 & 7) != 0)
  {
    v93 = (unsigned int *)(v92 & 0xFFFFFFFFFFFFFFF8);
    do
      v94 = __ldxr(v93);
    while (__stlxr(v94 - 2, v93));
  }
  v95 = *(_QWORD *)(a1 + 48);
  if ((v95 & 7) != 0)
  {
    v96 = (unsigned int *)(v95 & 0xFFFFFFFFFFFFFFF8);
    do
      v97 = __ldxr(v96);
    while (__stlxr(v97 - 2, v96));
  }
  v98 = *(_QWORD *)(a1 + 40);
  if ((v98 & 7) != 0)
  {
    v99 = (unsigned int *)(v98 & 0xFFFFFFFFFFFFFFF8);
    do
      v100 = __ldxr(v99);
    while (__stlxr(v100 - 2, v99));
  }
  v101 = *(_QWORD *)(a1 + 32);
  if ((v101 & 7) != 0)
  {
    v102 = (unsigned int *)(v101 & 0xFFFFFFFFFFFFFFF8);
    do
      v103 = __ldxr(v102);
    while (__stlxr(v103 - 2, v102));
  }
  v104 = *(_QWORD *)(a1 + 24);
  if ((v104 & 7) != 0)
  {
    v105 = (unsigned int *)(v104 & 0xFFFFFFFFFFFFFFF8);
    do
      v106 = __ldxr(v105);
    while (__stlxr(v106 - 2, v105));
  }
  v107 = *(_QWORD *)(a1 + 16);
  if ((v107 & 7) != 0)
  {
    v108 = (unsigned int *)(v107 & 0xFFFFFFFFFFFFFFF8);
    do
      v109 = __ldxr(v108);
    while (__stlxr(v109 - 2, v108));
  }
  v110 = *(_QWORD *)(a1 + 8);
  if ((v110 & 7) != 0)
  {
    v111 = (unsigned int *)(v110 & 0xFFFFFFFFFFFFFFF8);
    do
      v112 = __ldxr(v111);
    while (__stlxr(v112 - 2, v111));
  }
  if ((*(_QWORD *)a1 & 7) != 0)
  {
    v113 = (unsigned int *)(*(_QWORD *)a1 & 0xFFFFFFFFFFFFFFF8);
    do
      v114 = __ldxr(v113);
    while (__stlxr(v114 - 2, v113));
  }
  return a1;
}

void sub_2264035B4(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 32;
        sub_226403638((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_226403638(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t result;

  v3 = *(_QWORD *)(a2 + 24);
  if ((v3 & 7) != 0)
  {
    v4 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL();
  sub_2263BDE64(a2 + 16);
  result = *(_QWORD *)(a2 + 8);
  if (result)
    return sub_2263DA640(result);
  return result;
}

uint64_t sub_22640369C(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  if (!v2 || (*(_BYTE *)(v2 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  return pxrInternal__aapl__pxrReserved__::UsdStage::_GetStrongestResolvedMetadata();
}

uint64_t sub_226403728(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  pxrInternal__aapl__pxrReserved__::VtValue *v2;
  uint64_t v4;
  uint64_t result;

  v2 = a2;
  if (sub_2263BE444(a2))
  {
    v4 = *((_QWORD *)v2 + 1);
    if ((v4 & 4) != 0)
      v2 = (pxrInternal__aapl__pxrReserved__::VtValue *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v4 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
    sub_2263BE4E4(*(_QWORD **)(a1 + 8), v2);
    return 1;
  }
  else
  {
    result = sub_226403874(v2);
    if ((_DWORD)result)
    {
      result = 1;
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_2264037A8(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t result;
  uint64_t v10;

  if (sub_2263BE444(a2))
  {
    sub_2263E4BCC(a2, &v10);
    v4 = *(uint64_t **)(a1 + 8);
    if (&v10 == v4)
    {
      if ((v10 & 7) != 0)
      {
        v7 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
        do
          v8 = __ldxr(v7);
        while (__stlxr(v8 - 2, v7));
      }
    }
    else
    {
      if ((*v4 & 7) != 0)
      {
        v5 = (unsigned int *)(*v4 & 0xFFFFFFFFFFFFFFF8);
        do
          v6 = __ldxr(v5);
        while (__stlxr(v6 - 2, v5));
      }
      *v4 = v10;
    }
    return 1;
  }
  else
  {
    result = sub_226403874(a2);
    if ((_DWORD)result)
    {
      result = 1;
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_226403874(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (!strcmp((const char *)(*(_QWORD *)(*(_QWORD *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__13SdfValueBlockE" & 0x7FFFFFFFFFFFFFFFLL)))return 1;
  if ((v1 & 4) == 0)
    return 0;
  return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_24EDD8C40);
}

uint64_t sub_2264038E4(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t result;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;

  v8 = a1 + 16;
  v9 = *(void **)a1;
  if (a4 > (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 5)
  {
    sub_226403A34((void **)a1);
    if (a4 >> 59)
      sub_2263AACDC();
    v10 = *(_QWORD *)(a1 + 16) - *(_QWORD *)a1;
    v11 = v10 >> 4;
    if (v10 >> 4 <= a4)
      v11 = a4;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0)
      v12 = 0x7FFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    sub_226403AA0((_QWORD *)a1, v12);
    result = sub_226403AE0(v8, a2, a3, *(_QWORD *)(a1 + 8));
    goto LABEL_11;
  }
  v14 = (uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 5;
  if (v14 < a4)
  {
    v15 = a2 + 32 * v14;
    sub_226403C9C((uint64_t)&v19, a2, v15, (uint64_t)v9);
    result = sub_226403AE0(v8, v15, a3, *(_QWORD *)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = result;
    return result;
  }
  result = sub_226403C9C((uint64_t)&v20, a2, a3, (uint64_t)v9);
  v17 = v16;
  v18 = *(_QWORD *)(a1 + 8);
  if (v18 != v16)
  {
    do
    {
      v18 -= 32;
      result = sub_226403638(v8, v18);
    }
    while (v18 != v17);
  }
  *(_QWORD *)(a1 + 8) = v17;
  return result;
}

void sub_226403A24(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_226403A2C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_226403A34(void **a1)
{
  void *v1;
  uint64_t v3;
  void *v4;

  v1 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 32;
        sub_226403638((uint64_t)(a1 + 2), v3);
      }
      while ((void *)v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

char *sub_226403AA0(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 59)
    sub_2263AACDC();
  result = (char *)sub_226403D44((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[32 * v4];
  return result;
}

uint64_t sub_226403AE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v9[3];
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = a4;
  v11 = a4;
  v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      sub_226403B84(a1, v4, v6);
      v6 += 32;
      v4 = v12 + 32;
      v12 += 32;
    }
    while (v6 != a3);
  }
  LOBYTE(v10) = 1;
  sub_226403C18((uint64_t)v9);
  return v4;
}

void sub_226403B70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_226403C18((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_DWORD *sub_226403B84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  _DWORD *result;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;

  *(_DWORD *)a2 = *(_DWORD *)a3;
  v5 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(a2 + 8) = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 48);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  sub_2263BDDD8((_DWORD *)(a2 + 16), (_DWORD *)(a3 + 16));
  result = sub_2263BDE28((_DWORD *)(a2 + 20), (_DWORD *)(a3 + 20));
  v9 = *(_QWORD *)(a3 + 24);
  *(_QWORD *)(a2 + 24) = v9;
  if ((v9 & 7) != 0)
  {
    v10 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 2, v10));
    if ((v11 & 1) == 0)
      *(_QWORD *)(a2 + 24) &= 0xFFFFFFFFFFFFFFF8;
  }
  return result;
}

uint64_t sub_226403C18(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_226403C4C((uint64_t *)a1);
  return a1;
}

uint64_t *sub_226403C4C(uint64_t *result)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (uint64_t *)result[1];
  v1 = (uint64_t *)result[2];
  v3 = *v1;
  v4 = *v2;
  if (*v1 != *v2)
  {
    v5 = *result;
    do
    {
      v3 -= 32;
      result = (uint64_t *)sub_226403638(v5, v3);
    }
    while (v3 != v4);
  }
  return result;
}

uint64_t sub_226403C9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;

  v5 = a2;
  if (a2 != a3)
  {
    do
    {
      *(_DWORD *)a4 = *(_DWORD *)v5;
      v7 = *(_QWORD *)(v5 + 8);
      if (v7)
      {
        v8 = (unint64_t *)(v7 + 48);
        do
          v9 = __ldxr(v8);
        while (__stxr(v9 + 1, v8));
      }
      v10 = *(_QWORD *)(a4 + 8);
      *(_QWORD *)(a4 + 8) = v7;
      if (v10)
        sub_2263DA640(v10);
      sub_2263C0080(a4 + 16, (_DWORD *)(v5 + 16));
      sub_2263C00D4(a4 + 20, (_DWORD *)(v5 + 20));
      sub_2263BE4E4((_QWORD *)(a4 + 24), (_QWORD *)(v5 + 24));
      v5 += 32;
      a4 += 32;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

void *sub_226403D44(uint64_t a1, unint64_t a2)
{
  if (a2 >> 59)
    sub_2263AADA8();
  return operator new(32 * a2);
}

void sub_226403D78(uint64_t a1, pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *a2, unsigned int *a3)
{
  __int128 *v3;
  uint64_t *v6;
  unint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unint64_t v19;
  const char *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t i;
  int v27;
  int v28;
  unint64_t *v29;
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName *v31;
  unint64_t *v33;
  unint64_t v34;
  unint64_t *v38;
  unint64_t v39;
  unsigned int *v40;
  unsigned int v41;
  unsigned int *v42;
  unsigned int v43;
  unint64_t v44;
  const char *v45;
  unint64_t v46;
  uint64_t j;
  int v48;
  unint64_t v49;
  unint64_t *v51;
  unint64_t v52;
  unint64_t *v54;
  unint64_t v55;
  unint64_t *v57;
  unint64_t v58;
  unint64_t *v60;
  unint64_t v61;
  unint64_t v62;
  const char *v63;
  unint64_t v64;
  const char *v65;
  unsigned int *v66;
  unsigned int v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  __int128 v74;
  __int128 v75;
  uint64_t v76;
  __int128 v77;
  __int128 v78;
  uint64_t v79;
  __int128 v80;
  __int128 v81;
  uint64_t v82;
  __int128 v83;
  __int128 v84;
  uint64_t v85;
  uint64_t v86;
  __int128 v87;
  __int128 v88;
  uint64_t v89;

  v3 = (__int128 *)a3;
  v89 = 0;
  v87 = 0u;
  v88 = 0u;
  sub_2263AA560((uint64_t)&v87, *a3);
  MEMORY[0x2276976D8](&v86, "constant");
  v6 = (uint64_t *)(a1 + 72);
  v7 = *(_QWORD *)(a1 + 72) & 0xFFFFFFFFFFFFFFF8;
  v8 = (unsigned int *)(v86 & 0xFFFFFFFFFFFFFFF8);
  if ((v86 & 7) != 0)
  {
    do
      v9 = __ldxr(v8);
    while (__stlxr(v9 - 2, v8));
  }
  if ((unsigned int *)v7 == v8)
  {
    if (*(_QWORD *)v3)
    {
      v21 = 0;
      do
      {
        sub_2263AC688((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v87);
        *(_DWORD *)(v89 + 4 * v21++) = 0;
      }
      while (*(_QWORD *)v3 > v21);
    }
  }
  else
  {
    MEMORY[0x2276976D8](&v86, "vertex");
    v10 = *v6 & 0xFFFFFFFFFFFFFFF8;
    v11 = (unsigned int *)(v86 & 0xFFFFFFFFFFFFFFF8);
    if ((v86 & 7) != 0)
    {
      do
        v12 = __ldxr(v11);
      while (__stlxr(v12 - 2, v11));
    }
    if ((unsigned int *)v10 == v11)
    {
      if (!*(_QWORD *)(a1 + 16))
      {
LABEL_35:
        sub_2263AA5D0((uint64_t)&v87, v3);
        goto LABEL_36;
      }
      if (*(_QWORD *)v3)
      {
        v22 = 0;
        do
        {
          sub_2263AC688((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v3);
          v23 = *(int *)(*((_QWORD *)v3 + 4) + 4 * v22);
          sub_2263AC688((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(a1 + 16));
          LODWORD(v23) = *(_DWORD *)(*(_QWORD *)(a1 + 48) + 4 * v23);
          sub_2263AC688((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v87);
          *(_DWORD *)(v89 + 4 * v22++) = v23;
        }
        while (*(_QWORD *)v3 > v22);
      }
    }
    else
    {
      MEMORY[0x2276976D8](&v86, "uniform");
      v13 = *v6 & 0xFFFFFFFFFFFFFFF8;
      v14 = (unsigned int *)(v86 & 0xFFFFFFFFFFFFFFF8);
      if ((v86 & 7) != 0)
      {
        do
          v15 = __ldxr(v14);
        while (__stlxr(v15 - 2, v14));
      }
      if ((unsigned int *)v13 == v14)
      {
        v24 = *(_QWORD *)a2;
        if (*(_QWORD *)(a1 + 16))
        {
          if (v24)
          {
            v25 = 0;
            LODWORD(i) = 0;
            do
            {
              v27 = 0;
              for (i = (int)i; ; ++i)
              {
                sub_2263AC688(a2);
                if (v27 >= *(_DWORD *)(*((_QWORD *)a2 + 4) + 4 * v25))
                  break;
                sub_2263AC688((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(a1 + 16));
                v28 = *(_DWORD *)(*(_QWORD *)(a1 + 48) + 4 * v25);
                sub_2263AC688((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v87);
                *(_DWORD *)(v89 + 4 * i) = v28;
                ++v27;
              }
              ++v25;
            }
            while (*(_QWORD *)a2 > v25);
          }
        }
        else if (v24)
        {
          v46 = 0;
          LODWORD(j) = 0;
          do
          {
            v48 = 0;
            for (j = (int)j; ; ++j)
            {
              sub_2263AC688(a2);
              if (v48 >= *(_DWORD *)(*((_QWORD *)a2 + 4) + 4 * v46))
                break;
              sub_2263AC688((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v87);
              *(_DWORD *)(v89 + 4 * j) = v46;
              ++v48;
            }
            ++v46;
          }
          while (*(_QWORD *)a2 > v46);
        }
      }
      else
      {
        MEMORY[0x2276976D8](&v86, "faceVarying");
        v16 = *v6 & 0xFFFFFFFFFFFFFFF8;
        v17 = (unsigned int *)(v86 & 0xFFFFFFFFFFFFFFF8);
        if ((v86 & 7) != 0)
        {
          do
            v18 = __ldxr(v17);
          while (__stlxr(v18 - 2, v17));
        }
        if ((unsigned int *)v16 != v17)
        {
          v19 = *(_QWORD *)(a1 + 56) & 0xFFFFFFFFFFFFFFF8;
          if (v19)
          {
            v20 = (const char *)(v19 + 16);
            if (*(char *)(v19 + 39) < 0)
              v20 = *(const char **)v20;
          }
          else
          {
            v20 = "";
          }
          v44 = *v6 & 0xFFFFFFFFFFFFFFF8;
          if (v44)
          {
            v45 = (const char *)(v44 + 16);
            if (*(char *)(v44 + 39) < 0)
              v45 = *(const char **)v45;
          }
          else
          {
            v45 = "";
          }
          NSLog(CFSTR("Warning: mesh attribute %s has unsupported interpolation type %s"), v20, v45);
          goto LABEL_70;
        }
        if (*(_QWORD *)(a1 + 16))
        {
          v3 = (__int128 *)(a1 + 16);
          goto LABEL_35;
        }
        if (*(_QWORD *)v3)
        {
          v49 = 0;
          do
          {
            sub_2263AC688((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v87);
            *(_DWORD *)(v89 + 4 * v49) = v49;
            ++v49;
          }
          while (*(_QWORD *)v3 > v49);
        }
      }
    }
  }
LABEL_36:
  v29 = (unint64_t *)MEMORY[0x24BEE82A0];
  if (!atomic_load(MEMORY[0x24BEE82A0]))
    sub_2263B1434(MEMORY[0x24BEE82A0]);
  v31 = (pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)(a1 + 64);
  if ((pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==() & 1) != 0)
    goto LABEL_42;
  if (!atomic_load(v29))
    sub_2263B1434(MEMORY[0x24BEE82A0]);
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==())
  {
LABEL_42:
    v83 = v87;
    v84 = v88;
    v85 = v89;
    if (v89)
    {
      v33 = (unint64_t *)(v89 - 16);
      if (*((_QWORD *)&v84 + 1))
        v33 = (unint64_t *)*((_QWORD *)&v84 + 1);
      do
        v34 = __ldxr(v33);
      while (__stxr(v34 + 1, v33));
    }
    sub_22640464C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v83, *(int *)(a1 + 80), (pxrInternal__aapl__pxrReserved__::VtValue *)a1);
    sub_2263AC71C((uint64_t)&v83);
LABEL_61:
    MEMORY[0x2276976D8](&v86, "vertex");
    if (&v86 == v6)
    {
      if ((v86 & 7) != 0)
      {
        v42 = (unsigned int *)(v86 & 0xFFFFFFFFFFFFFFF8);
        do
          v43 = __ldxr(v42);
        while (__stlxr(v43 - 2, v42));
      }
    }
    else
    {
      if ((*v6 & 7) != 0)
      {
        v40 = (unsigned int *)(*v6 & 0xFFFFFFFFFFFFFFF8);
        do
          v41 = __ldxr(v40);
        while (__stlxr(v41 - 2, v40));
      }
      *v6 = v86;
    }
    sub_2263AD1C8((_QWORD *)(a1 + 16));
    goto LABEL_70;
  }
  if (!atomic_load(v29))
    sub_2263B1434(MEMORY[0x24BEE82A0]);
  if ((pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==() & 1) != 0)
    goto LABEL_56;
  if (!atomic_load(v29))
    sub_2263B1434(MEMORY[0x24BEE82A0]);
  if ((pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==() & 1) != 0)
    goto LABEL_56;
  if (!atomic_load(v29))
    sub_2263B1434(MEMORY[0x24BEE82A0]);
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==())
  {
LABEL_56:
    v80 = v87;
    v81 = v88;
    v82 = v89;
    if (v89)
    {
      v38 = (unint64_t *)(v89 - 16);
      if (*((_QWORD *)&v81 + 1))
        v38 = (unint64_t *)*((_QWORD *)&v81 + 1);
      do
        v39 = __ldxr(v38);
      while (__stxr(v39 + 1, v38));
    }
    sub_2264047B8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v80, *(int *)(a1 + 80), (pxrInternal__aapl__pxrReserved__::VtValue *)a1);
    sub_2263AC71C((uint64_t)&v80);
    goto LABEL_61;
  }
  if (!atomic_load(v29))
    sub_2263B1434(MEMORY[0x24BEE82A0]);
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==())
  {
    v77 = v87;
    v78 = v88;
    v79 = v89;
    if (v89)
    {
      v51 = (unint64_t *)(v89 - 16);
      if (*((_QWORD *)&v78 + 1))
        v51 = (unint64_t *)*((_QWORD *)&v78 + 1);
      do
        v52 = __ldxr(v51);
      while (__stxr(v52 + 1, v51));
    }
    sub_226404938((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v77, *(int *)(a1 + 80), (pxrInternal__aapl__pxrReserved__::VtValue *)a1);
    sub_2263AC71C((uint64_t)&v77);
    goto LABEL_61;
  }
  if (!atomic_load(v29))
    sub_2263B1434(MEMORY[0x24BEE82A0]);
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==())
  {
    v74 = v87;
    v75 = v88;
    v76 = v89;
    if (v89)
    {
      v54 = (unint64_t *)(v89 - 16);
      if (*((_QWORD *)&v75 + 1))
        v54 = (unint64_t *)*((_QWORD *)&v75 + 1);
      do
        v55 = __ldxr(v54);
      while (__stxr(v55 + 1, v54));
    }
    sub_226404A9C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v74, *(int *)(a1 + 80), (pxrInternal__aapl__pxrReserved__::VtValue *)a1);
    sub_2263AC71C((uint64_t)&v74);
    goto LABEL_61;
  }
  if (!atomic_load(v29))
    sub_2263B1434(MEMORY[0x24BEE82A0]);
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==())
  {
    v71 = v87;
    v72 = v88;
    v73 = v89;
    if (v89)
    {
      v57 = (unint64_t *)(v89 - 16);
      if (*((_QWORD *)&v72 + 1))
        v57 = (unint64_t *)*((_QWORD *)&v72 + 1);
      do
        v58 = __ldxr(v57);
      while (__stxr(v58 + 1, v57));
    }
    sub_226404C08((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v71, *(int *)(a1 + 80), (pxrInternal__aapl__pxrReserved__::VtValue *)a1);
    sub_2263AC71C((uint64_t)&v71);
    goto LABEL_61;
  }
  if (!atomic_load(v29))
    sub_2263B1434(MEMORY[0x24BEE82A0]);
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==())
  {
    v68 = v87;
    v69 = v88;
    v70 = v89;
    if (v89)
    {
      v60 = (unint64_t *)(v89 - 16);
      if (*((_QWORD *)&v69 + 1))
        v60 = (unint64_t *)*((_QWORD *)&v69 + 1);
      do
        v61 = __ldxr(v60);
      while (__stxr(v61 + 1, v60));
    }
    sub_226404D74((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v68, *(int *)(a1 + 80), (pxrInternal__aapl__pxrReserved__::VtValue *)a1);
    sub_2263AC71C((uint64_t)&v68);
    goto LABEL_61;
  }
  v62 = *(_QWORD *)(a1 + 56) & 0xFFFFFFFFFFFFFFF8;
  if (v62)
  {
    v63 = (const char *)(v62 + 16);
    if (*(char *)(v62 + 39) < 0)
      v63 = *(const char **)v63;
  }
  else
  {
    v63 = "";
  }
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken(v31);
  v64 = v86 & 0xFFFFFFFFFFFFFFF8;
  if ((v86 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    v65 = (const char *)(v64 + 16);
    if (*(char *)(v64 + 39) < 0)
      v65 = *(const char **)v65;
  }
  else
  {
    v65 = "";
  }
  NSLog(CFSTR("Warning: mesh attribute %s has unsupported type %s"), v63, v65);
  if ((v86 & 7) != 0)
  {
    v66 = (unsigned int *)(v86 & 0xFFFFFFFFFFFFFFF8);
    do
      v67 = __ldxr(v66);
    while (__stlxr(v67 - 2, v66));
  }
LABEL_70:
  sub_2263AC71C((uint64_t)&v87);
}

void sub_22640454C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;

  v3 = *(_QWORD *)(v1 - 136);
  if ((v3 & 7) != 0)
  {
    v4 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  sub_2263AC71C(v1 - 128);
  _Unwind_Resume(a1);
}

void sub_22640464C(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  __n128 v20[2];
  uint64_t v21;

  v21 = 0;
  memset(v20, 0, sizeof(v20));
  sub_2263BA308((uint64_t)v20, (*(_DWORD *)a1 * a2));
  v6 = sub_2263AF4A8(a3);
  v7 = *(_OWORD *)(v6 + 16);
  v17 = *(_OWORD *)v6;
  v18 = v7;
  v8 = *(_QWORD *)(v6 + 32);
  v19 = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 - 16);
    if (*((_QWORD *)&v18 + 1))
      v9 = (unint64_t *)*((_QWORD *)&v18 + 1);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v11 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    v12 = 0;
    v13 = 0;
    do
    {
      if (a2)
      {
        v14 = 0;
        do
        {
          sub_2263AC688(a1);
          v15 = *(int *)(*((_QWORD *)a1 + 4) + 4 * v12);
          sub_2263C11DC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v17);
          v16 = v19;
          sub_2263C11DC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v20);
          *(_QWORD *)(v21 + 8 * v13 + 8 * v14) = *(_QWORD *)(v16 + 8 * (v14 + v15 * a2));
          ++v14;
        }
        while (a2 != v14);
        v13 += v14;
        v11 = *(_QWORD *)a1;
      }
      ++v12;
    }
    while (v11 > v12);
  }
  sub_226407EC0((uint64_t *)a3, v20);
  sub_2263AC71C((uint64_t)&v17);
  sub_2263AC71C((uint64_t)v20);
}

void sub_226404788(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  sub_2263AC71C((uint64_t)&a9);
  sub_2263AC71C((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_2264047B8(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  __n128 v24[2];
  uint64_t v25;

  v25 = 0;
  memset(v24, 0, sizeof(v24));
  sub_2263AFB70((uint64_t)v24, (*(_DWORD *)a1 * a2));
  v6 = sub_2263AAC04(a3);
  v7 = *(_OWORD *)(v6 + 16);
  v21 = *(_OWORD *)v6;
  v22 = v7;
  v8 = *(_QWORD *)(v6 + 32);
  v23 = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 - 16);
    if (*((_QWORD *)&v22 + 1))
      v9 = (unint64_t *)*((_QWORD *)&v22 + 1);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v11 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    v12 = 0;
    v13 = 0;
    do
    {
      if (a2)
      {
        v14 = 0;
        v15 = 12 * v13;
        do
        {
          sub_2263AC688(a1);
          v16 = *(int *)(*((_QWORD *)a1 + 4) + 4 * v12);
          sub_2263B1F74((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v21);
          v17 = v23;
          sub_2263B1F74((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v24);
          v18 = (uint64_t *)(v17 + 12 * (v14 + v16 * a2));
          v19 = v25 + v15;
          v20 = *v18;
          *(_DWORD *)(v19 + 8) = *((_DWORD *)v18 + 2);
          *(_QWORD *)v19 = v20;
          ++v14;
          v15 += 12;
        }
        while (a2 != v14);
        v13 += v14;
        v11 = *(_QWORD *)a1;
      }
      ++v12;
    }
    while (v11 > v12);
  }
  sub_2263AEA40((uint64_t *)a3, v24);
  sub_2263AC71C((uint64_t)&v21);
  sub_2263AC71C((uint64_t)v24);
}

void sub_226404908(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  sub_2263AC71C((uint64_t)&a9);
  sub_2263AC71C((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_226404938(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  __n128 v19[2];
  uint64_t v20;

  v20 = 0;
  memset(v19, 0, sizeof(v19));
  sub_2263AA560((uint64_t)v19, (*(_DWORD *)a1 * a2));
  v6 = sub_2263C01DC(a3);
  v7 = *(_OWORD *)(v6 + 16);
  v16 = *(_OWORD *)v6;
  v17 = v7;
  v8 = *(_QWORD *)(v6 + 32);
  v18 = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 - 16);
    if (*((_QWORD *)&v17 + 1))
      v9 = (unint64_t *)*((_QWORD *)&v17 + 1);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v11 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    v12 = 0;
    v13 = 0;
    do
    {
      if (a2)
      {
        v14 = 0;
        do
        {
          sub_2263AC688(a1);
          v15 = *(int *)(*((_QWORD *)a1 + 4) + 4 * v12);
          sub_2263AC688((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v16);
          LODWORD(v15) = *(_DWORD *)(v18 + 4 * (v14 + v15 * a2));
          sub_2263AC688((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v19);
          *(_DWORD *)(v20 + 4 * v13 + 4 * v14++) = v15;
        }
        while (a2 != v14);
        v13 += v14;
        v11 = *(_QWORD *)a1;
      }
      ++v12;
    }
    while (v11 > v12);
  }
  sub_2264080D4((uint64_t *)a3, v19);
  sub_2263AC71C((uint64_t)&v16);
  sub_2263AC71C((uint64_t)v19);
}

void sub_226404A6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  sub_2263AC71C((uint64_t)&a9);
  sub_2263AC71C((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_226404A9C(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  __n128 v21[2];
  uint64_t v22;

  v22 = 0;
  memset(v21, 0, sizeof(v21));
  sub_2263AFB00((uint64_t)v21, (*(_DWORD *)a1 * a2));
  v6 = sub_2263C1400(a3);
  v7 = *(_OWORD *)(v6 + 16);
  v18 = *(_OWORD *)v6;
  v19 = v7;
  v8 = *(_QWORD *)(v6 + 32);
  v20 = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 - 16);
    if (*((_QWORD *)&v19 + 1))
      v9 = (unint64_t *)*((_QWORD *)&v19 + 1);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v11 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    v12 = 0;
    v13 = 0;
    do
    {
      if (a2)
      {
        v14 = 0;
        v15 = 16 * v13;
        do
        {
          sub_2263AC688(a1);
          v16 = *(int *)(*((_QWORD *)a1 + 4) + 4 * v12);
          sub_2263B1E44((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v18);
          v17 = v20;
          sub_2263B1E44((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v21);
          *(_OWORD *)(v22 + v15) = *(_OWORD *)(v17 + 16 * (v14 + v16 * a2));
          ++v14;
          v15 += 16;
        }
        while (a2 != v14);
        v13 += v14;
        v11 = *(_QWORD *)a1;
      }
      ++v12;
    }
    while (v11 > v12);
  }
  sub_226408258((uint64_t *)a3, v21);
  sub_2263AC71C((uint64_t)&v18);
  sub_2263AC71C((uint64_t)v21);
}

void sub_226404BD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  sub_2263AC71C((uint64_t)&a9);
  sub_2263AC71C((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_226404C08(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  __n128 v20[2];
  uint64_t v21;

  v21 = 0;
  memset(v20, 0, sizeof(v20));
  sub_2263BA174((uint64_t)v20, (*(_DWORD *)a1 * a2));
  v6 = sub_2263C0E14(a3);
  v7 = *(_OWORD *)(v6 + 16);
  v17 = *(_OWORD *)v6;
  v18 = v7;
  v8 = *(_QWORD *)(v6 + 32);
  v19 = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 - 16);
    if (*((_QWORD *)&v18 + 1))
      v9 = (unint64_t *)*((_QWORD *)&v18 + 1);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v11 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    v12 = 0;
    v13 = 0;
    do
    {
      if (a2)
      {
        v14 = 0;
        do
        {
          sub_2263AC688(a1);
          v15 = *(int *)(*((_QWORD *)a1 + 4) + 4 * v12);
          sub_2263CA3A4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v17);
          v16 = *(_DWORD *)(v19 + 4 * (v14 + v15 * a2));
          sub_2263CA3A4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v20);
          *(_DWORD *)(v21 + 4 * v13 + 4 * v14++) = v16;
        }
        while (a2 != v14);
        v13 += v14;
        v11 = *(_QWORD *)a1;
      }
      ++v12;
    }
    while (v11 > v12);
  }
  sub_22640846C((uint64_t *)a3, v20);
  sub_2263AC71C((uint64_t)&v17);
  sub_2263AC71C((uint64_t)v20);
}

void sub_226404D44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  sub_2263AC71C((uint64_t)&a9);
  sub_2263AC71C((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_226404D74(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  __n128 v19[2];
  uint64_t v20;

  v20 = 0;
  memset(v19, 0, sizeof(v19));
  sub_2263B911C((uint64_t)v19, (*(_DWORD *)a1 * a2));
  v6 = sub_2263C03E4(a3);
  v7 = *(_OWORD *)(v6 + 16);
  v16 = *(_OWORD *)v6;
  v17 = v7;
  v8 = *(_QWORD *)(v6 + 32);
  v18 = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 - 16);
    if (*((_QWORD *)&v17 + 1))
      v9 = (unint64_t *)*((_QWORD *)&v17 + 1);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v11 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    v12 = 0;
    v13 = 0;
    do
    {
      if (a2)
      {
        v14 = 0;
        do
        {
          sub_2263AC688(a1);
          v15 = *(int *)(*((_QWORD *)a1 + 4) + 4 * v12);
          sub_2263C6BCC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v16);
          LODWORD(v15) = *(_DWORD *)(v18 + 4 * (v14 + v15 * a2));
          sub_2263C6BCC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v19);
          *(_DWORD *)(v20 + 4 * v13 + 4 * v14++) = v15;
        }
        while (a2 != v14);
        v13 += v14;
        v11 = *(_QWORD *)a1;
      }
      ++v12;
    }
    while (v11 > v12);
  }
  sub_226408680((uint64_t *)a3, v19);
  sub_2263AC71C((uint64_t)&v16);
  sub_2263AC71C((uint64_t)v19);
}

void sub_226404EA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  sub_2263AC71C((uint64_t)&a9);
  sub_2263AC71C((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_226404ED8(uint64_t a1, unsigned int a2)
{
  pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *v3;
  _BYTE *v4;
  uint64_t v5;
  unint64_t *v6;
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName *v8;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  const char *v30;
  unint64_t v31;
  const char *v32;
  unsigned int *v33;
  unsigned int v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  char *v38;
  __int128 v39;
  __int128 v40;
  char *v41;
  __int128 v42;
  __int128 v43;
  char *v44;
  __int128 v45;
  __int128 v46;
  char *v47;
  __int128 v48;
  __int128 v49;
  char *v50;
  __int128 v51;
  __int128 v52;
  char *v53;
  __int128 v54;
  __int128 v55;
  char *v56;

  v56 = 0;
  v54 = 0u;
  v55 = 0u;
  v3 = (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)sub_2263AA560((uint64_t)&v54, a2);
  sub_2263AC688(v3);
  v4 = v56;
  sub_2263AC688((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v54);
  v5 = &v56[4 * v54] - v4;
  if (v5 >= 1)
    bzero(v4, 4 * (((unint64_t)v5 >> 2) - ((unint64_t)v5 > 3)) + 4);
  v6 = (unint64_t *)MEMORY[0x24BEE82A0];
  if (!atomic_load(MEMORY[0x24BEE82A0]))
    sub_2263B1434(MEMORY[0x24BEE82A0]);
  v8 = (pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)(a1 + 64);
  if ((pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==() & 1) != 0)
    goto LABEL_9;
  if (!atomic_load(v6))
    sub_2263B1434(MEMORY[0x24BEE82A0]);
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==())
  {
LABEL_9:
    v51 = v54;
    v52 = v55;
    v53 = v56;
    if (v56)
    {
      v10 = (unint64_t *)(v56 - 16);
      if (*((_QWORD *)&v52 + 1))
        v10 = (unint64_t *)*((_QWORD *)&v52 + 1);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
    sub_22640464C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v51, *(int *)(a1 + 80), (pxrInternal__aapl__pxrReserved__::VtValue *)a1);
    sub_2263AC71C((uint64_t)&v51);
  }
  else
  {
    if (!atomic_load(v6))
      sub_2263B1434(MEMORY[0x24BEE82A0]);
    if ((pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==() & 1) != 0)
      goto LABEL_23;
    if (!atomic_load(v6))
      sub_2263B1434(MEMORY[0x24BEE82A0]);
    if ((pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==() & 1) != 0)
      goto LABEL_23;
    if (!atomic_load(v6))
      sub_2263B1434(MEMORY[0x24BEE82A0]);
    if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==())
    {
LABEL_23:
      v48 = v54;
      v49 = v55;
      v50 = v56;
      if (v56)
      {
        v15 = (unint64_t *)(v56 - 16);
        if (*((_QWORD *)&v49 + 1))
          v15 = (unint64_t *)*((_QWORD *)&v49 + 1);
        do
          v16 = __ldxr(v15);
        while (__stxr(v16 + 1, v15));
      }
      sub_2264047B8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v48, *(int *)(a1 + 80), (pxrInternal__aapl__pxrReserved__::VtValue *)a1);
      sub_2263AC71C((uint64_t)&v48);
    }
    else
    {
      if (!atomic_load(v6))
        sub_2263B1434(MEMORY[0x24BEE82A0]);
      if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==())
      {
        v45 = v54;
        v46 = v55;
        v47 = v56;
        if (v56)
        {
          v18 = (unint64_t *)(v56 - 16);
          if (*((_QWORD *)&v46 + 1))
            v18 = (unint64_t *)*((_QWORD *)&v46 + 1);
          do
            v19 = __ldxr(v18);
          while (__stxr(v19 + 1, v18));
        }
        sub_226404938((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v45, *(int *)(a1 + 80), (pxrInternal__aapl__pxrReserved__::VtValue *)a1);
        sub_2263AC71C((uint64_t)&v45);
      }
      else
      {
        if (!atomic_load(v6))
          sub_2263B1434(MEMORY[0x24BEE82A0]);
        if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==())
        {
          v42 = v54;
          v43 = v55;
          v44 = v56;
          if (v56)
          {
            v21 = (unint64_t *)(v56 - 16);
            if (*((_QWORD *)&v43 + 1))
              v21 = (unint64_t *)*((_QWORD *)&v43 + 1);
            do
              v22 = __ldxr(v21);
            while (__stxr(v22 + 1, v21));
          }
          sub_226404A9C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v42, *(int *)(a1 + 80), (pxrInternal__aapl__pxrReserved__::VtValue *)a1);
          sub_2263AC71C((uint64_t)&v42);
        }
        else
        {
          if (!atomic_load(v6))
            sub_2263B1434(MEMORY[0x24BEE82A0]);
          if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==())
          {
            v39 = v54;
            v40 = v55;
            v41 = v56;
            if (v56)
            {
              v24 = (unint64_t *)(v56 - 16);
              if (*((_QWORD *)&v40 + 1))
                v24 = (unint64_t *)*((_QWORD *)&v40 + 1);
              do
                v25 = __ldxr(v24);
              while (__stxr(v25 + 1, v24));
            }
            sub_226404C08((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v39, *(int *)(a1 + 80), (pxrInternal__aapl__pxrReserved__::VtValue *)a1);
            sub_2263AC71C((uint64_t)&v39);
          }
          else
          {
            if (!atomic_load(v6))
              sub_2263B1434(MEMORY[0x24BEE82A0]);
            if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==())
            {
              v36 = v54;
              v37 = v55;
              v38 = v56;
              if (v56)
              {
                v27 = (unint64_t *)(v56 - 16);
                if (*((_QWORD *)&v37 + 1))
                  v27 = (unint64_t *)*((_QWORD *)&v37 + 1);
                do
                  v28 = __ldxr(v27);
                while (__stxr(v28 + 1, v27));
              }
              sub_226404D74((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v36, *(int *)(a1 + 80), (pxrInternal__aapl__pxrReserved__::VtValue *)a1);
              sub_2263AC71C((uint64_t)&v36);
            }
            else
            {
              v29 = *(_QWORD *)(a1 + 56) & 0xFFFFFFFFFFFFFFF8;
              if (v29)
              {
                v30 = (const char *)(v29 + 16);
                if (*(char *)(v29 + 39) < 0)
                  v30 = *(const char **)v30;
              }
              else
              {
                v30 = "";
              }
              pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken(v8);
              v31 = v35 & 0xFFFFFFFFFFFFFFF8;
              if ((v35 & 0xFFFFFFFFFFFFFFF8) != 0)
              {
                v32 = (const char *)(v31 + 16);
                if (*(char *)(v31 + 39) < 0)
                  v32 = *(const char **)v32;
              }
              else
              {
                v32 = "";
              }
              NSLog(CFSTR("Warning: mesh attribute %s has unsupported type %s"), v30, v32);
              if ((v35 & 7) != 0)
              {
                v33 = (unsigned int *)(v35 & 0xFFFFFFFFFFFFFFF8);
                do
                  v34 = __ldxr(v33);
                while (__stlxr(v34 - 2, v33));
              }
            }
          }
        }
      }
    }
  }
  sub_2263AC71C((uint64_t)&v54);
}

void sub_226405358(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  unsigned int *v14;
  unsigned int v15;

  if ((a12 & 7) != 0)
  {
    v14 = (unsigned int *)(a12 & 0xFFFFFFFFFFFFFFF8);
    do
      v15 = __ldxr(v14);
    while (__stlxr(v15 - 2, v14));
  }
  sub_2263AC71C(v12 - 96);
  _Unwind_Resume(a1);
}

void sub_226405430(unint64_t *a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *a3, pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *a4, uint64_t *a5)
{
  pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  const char *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  unint64_t v44;
  uint64_t i;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  unint64_t v51;
  uint64_t j;
  int v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  const char *v57;
  int v58;
  pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *v59;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  int v63;

  v9 = (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a1;
  v10 = 0x2E8BA2E8BA2E8BA3 * ((a2[1] - *a2) >> 3);
  v63 = 0;
  *(_QWORD *)&v60 = &v63;
  sub_2263AD210(a1, v10, (_DWORD **)&v60);
  sub_2264059BC(a5, (uint64_t)a4);
  v11 = *a2;
  if (a2[1] != *a2)
  {
    v12 = 0;
    v13 = -1;
    v59 = v9;
    do
    {
      v14 = v11 + 88 * v12;
      MEMORY[0x2276976D8](&v60, "vertex");
      v15 = *(_QWORD *)(v14 + 72);
      v16 = (unsigned int *)(v60 & 0xFFFFFFFFFFFFFFF8);
      if ((v60 & 7) != 0)
      {
        do
          v17 = __ldxr(v16);
        while (__stlxr(v17 - 2, v16));
      }
      v18 = v15 & 0xFFFFFFFFFFFFFFF8;
      v19 = *a2;
      if ((unsigned int *)v18 == v16)
      {
        if (*(_QWORD *)(v19 + 88 * v12 + 16))
        {
          v62 = 0;
          v60 = 0u;
          v61 = 0u;
          sub_2263AA560((uint64_t)&v60, *(unsigned int *)a4);
          if (*(_QWORD *)a4)
          {
            v38 = 0;
            do
            {
              sub_2263AC688(a4);
              v39 = *(int *)(*((_QWORD *)a4 + 4) + 4 * v38);
              v40 = *a2;
              sub_2263AC688((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(*a2 + 88 * v12 + 16));
              LODWORD(v40) = *(_DWORD *)(*(_QWORD *)(v40 + 88 * v12 + 48) + 4 * v39);
              sub_2263AC688((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v60);
              *(_DWORD *)(v62 + 4 * v38) = v40;
              v42 = *a5;
              v41 = a5[1];
              sub_2263AC688(v59);
              v43 = -858993459 * ((unint64_t)(v41 - v42) >> 3);
              v9 = v59;
              *(_DWORD *)(*((_QWORD *)v59 + 4) + 4 * v12) = v43;
              ++v38;
            }
            while (*(_QWORD *)a4 > v38);
          }
          sub_2264059BC(a5, (uint64_t)&v60);
          sub_2263AC71C((uint64_t)&v60);
        }
        else
        {
          sub_2263AC688(v9);
          *(_DWORD *)(*((_QWORD *)v9 + 4) + 4 * v12) = 0;
        }
      }
      else
      {
        v20 = v19 + 88 * v12;
        MEMORY[0x2276976D8](&v60, "uniform");
        v21 = *(_QWORD *)(v20 + 72);
        v22 = (unsigned int *)(v60 & 0xFFFFFFFFFFFFFFF8);
        if ((v60 & 7) != 0)
        {
          do
            v23 = __ldxr(v22);
          while (__stlxr(v23 - 2, v22));
        }
        v24 = v21 & 0xFFFFFFFFFFFFFFF8;
        v25 = *a2;
        if ((unsigned int *)v24 == v22)
        {
          if (*(_QWORD *)(v25 + 88 * v12 + 16))
          {
            v58 = v13;
            v62 = 0;
            v60 = 0u;
            v61 = 0u;
            sub_2263AA560((uint64_t)&v60, *(unsigned int *)a4);
            if (*(_QWORD *)a3)
            {
              v44 = 0;
              LODWORD(i) = 0;
              do
              {
                v46 = 0;
                for (i = (int)i; ; ++i)
                {
                  sub_2263AC688(a3);
                  if (v46 >= *(_DWORD *)(*((_QWORD *)a3 + 4) + 4 * v44))
                    break;
                  v47 = *a2;
                  sub_2263AC688((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(*a2 + 88 * v12 + 16));
                  LODWORD(v47) = *(_DWORD *)(*(_QWORD *)(v47 + 88 * v12 + 48) + 4 * v44);
                  sub_2263AC688((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v60);
                  *(_DWORD *)(v62 + 4 * i) = v47;
                  ++v46;
                }
                ++v44;
              }
              while (*(_QWORD *)a3 > v44);
            }
            v49 = *a5;
            v48 = a5[1];
            v9 = v59;
            sub_2263AC688(v59);
            *(_DWORD *)(*((_QWORD *)v59 + 4) + 4 * v12) = -858993459 * ((unint64_t)(v48 - v49) >> 3);
            sub_2264059BC(a5, (uint64_t)&v60);
            sub_2263AC71C((uint64_t)&v60);
            v13 = v58;
          }
          else
          {
            if (v13 == -1)
            {
              v62 = 0;
              v60 = 0u;
              v61 = 0u;
              sub_2263AA560((uint64_t)&v60, *(unsigned int *)a4);
              if (*(_QWORD *)a3)
              {
                v51 = 0;
                LODWORD(j) = 0;
                do
                {
                  v53 = 0;
                  for (j = (int)j; ; ++j)
                  {
                    sub_2263AC688(a3);
                    if (v53 >= *(_DWORD *)(*((_QWORD *)a3 + 4) + 4 * v51))
                      break;
                    sub_2263AC688((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v60);
                    *(_DWORD *)(v62 + 4 * j) = v51;
                    ++v53;
                  }
                  ++v51;
                }
                while (*(_QWORD *)a3 > v51);
              }
              sub_2264059BC(a5, (uint64_t)&v60);
              v55 = *a5;
              v54 = a5[1];
              sub_2263AC71C((uint64_t)&v60);
              v13 = -1 - 858993459 * ((unint64_t)(v54 - v55) >> 3);
            }
            v9 = v59;
            sub_2263AC688(v59);
            *(_DWORD *)(*((_QWORD *)v59 + 4) + 4 * v12) = v13;
          }
        }
        else
        {
          v26 = v25 + 88 * v12;
          MEMORY[0x2276976D8](&v60, "constant");
          v27 = *(_QWORD *)(v26 + 72);
          v28 = (unsigned int *)(v60 & 0xFFFFFFFFFFFFFFF8);
          if ((v60 & 7) != 0)
          {
            do
              v29 = __ldxr(v28);
            while (__stlxr(v29 - 2, v28));
          }
          if ((unsigned int *)(v27 & 0xFFFFFFFFFFFFFFF8) != v28)
          {
            v30 = *a2 + 88 * v12;
            MEMORY[0x2276976D8](&v60, "faceVarying");
            v31 = *(_QWORD *)(v30 + 72);
            v32 = (unsigned int *)(v60 & 0xFFFFFFFFFFFFFFF8);
            if ((v60 & 7) != 0)
            {
              do
                v33 = __ldxr(v32);
              while (__stlxr(v33 - 2, v32));
            }
            v34 = v31 & 0xFFFFFFFFFFFFFFF8;
            v35 = *a2;
            if ((unsigned int *)v34 == v32)
            {
              if (!*(_QWORD *)(v35 + 88 * v12 + 16))
                sub_226409228();
              v50 = -858993459 * ((unint64_t)(a5[1] - *a5) >> 3);
              sub_2263AC688(v9);
              *(_DWORD *)(*((_QWORD *)v9 + 4) + 4 * v12) = v50;
              sub_2264059BC(a5, *a2 + 88 * v12 + 16);
            }
            else
            {
              v36 = *(_QWORD *)(v35 + 88 * v12 + 56) & 0xFFFFFFFFFFFFFFF8;
              if (v36)
              {
                v37 = (const char *)(v36 + 16);
                if (*(char *)(v36 + 39) < 0)
                  v37 = *(const char **)v37;
              }
              else
              {
                v37 = "";
              }
              v56 = *(_QWORD *)(v35 + 88 * v12 + 72) & 0xFFFFFFFFFFFFFFF8;
              if (v56)
              {
                v57 = (const char *)(v56 + 16);
                if (*(char *)(v56 + 39) < 0)
                  v57 = *(const char **)v57;
              }
              else
              {
                v57 = "";
              }
              NSLog(CFSTR("Warning: mesh attribute %s has unsupported interpolation type %s"), v37, v57);
            }
          }
        }
      }
      ++v12;
      v11 = *a2;
    }
    while (0x2E8BA2E8BA2E8BA3 * ((a2[1] - *a2) >> 3) > v12);
  }
}

void sub_226405968(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_2263AC71C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2264059BC(uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __int128 v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  _QWORD v24[5];

  v6 = a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(result - 8);
  if (v7 >= v6)
  {
    v13 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v7 - *a1) >> 3);
    v14 = v13 + 1;
    if (v13 + 1 > 0x666666666666666)
      sub_2263AACDC();
    v15 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v15 > v14)
      v14 = 2 * v15;
    if (v15 >= 0x333333333333333)
      v16 = 0x666666666666666;
    else
      v16 = v14;
    v24[4] = result;
    v17 = (char *)sub_2263E48D4(result, v16);
    v18 = &v17[40 * v13];
    v24[0] = v17;
    v24[1] = v18;
    v24[3] = &v17[40 * v19];
    v20 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)v18 = *(_OWORD *)a2;
    *((_OWORD *)v18 + 1) = v20;
    v21 = *(_QWORD *)(a2 + 32);
    *((_QWORD *)v18 + 4) = v21;
    if (v21)
    {
      v22 = (unint64_t *)(v21 - 16);
      if (*((_QWORD *)v18 + 3))
        v22 = (unint64_t *)*((_QWORD *)v18 + 3);
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    v24[2] = v18 + 40;
    sub_226408894(a1, v24);
    v12 = a1[1];
    result = sub_226408AC0((uint64_t)v24);
  }
  else
  {
    v8 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)v7 = *(_OWORD *)a2;
    *(_OWORD *)(v7 + 16) = v8;
    v9 = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(v7 + 32) = v9;
    if (v9)
    {
      v10 = (unint64_t *)(v9 - 16);
      if (*(_QWORD *)(v7 + 24))
        v10 = *(unint64_t **)(v7 + 24);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
    v12 = v7 + 40;
    a1[1] = v7 + 40;
  }
  a1[1] = v12;
  return result;
}

void sub_226405B0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_226408AC0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_226405B20(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *a1, unint64_t *a2, _QWORD *a3, uint64_t **a4, unint64_t a5, int *a6)
{
  unint64_t v6;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  uint64_t i;
  int v30;
  int v31;
  int v32;
  uint64_t v33;
  int v34;
  int v35;
  BOOL v36;
  int v37;
  int v38;
  uint64_t k;
  int v40;
  uint64_t v41;
  int v42;
  uint64_t j;
  int v44;
  unint64_t v45;
  _QWORD *v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  unint64_t v55;
  unint64_t v56;
  int v57;
  int v58;
  int v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v63;
  unint64_t v64;
  pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *v71;
  _OWORD v73[2];
  uint64_t v74;
  _OWORD v75[2];
  uint64_t v76;
  _OWORD v77[2];
  uint64_t v78;
  _OWORD v79[2];
  int *v80;

  v6 = a5;
  v10 = 0xCCCCCCCCCCCCCCCDLL * (a4[1] - *a4);
  v11 = **a4;
  v64 = (int)v10;
  LODWORD(v77[0]) = 0;
  *(_QWORD *)&v79[0] = v77;
  sub_2263AD210(a2, (int)v10 * a5, (_DWORD **)v79);
  sub_2263AC688(a1);
  v12 = (void *)*((_QWORD *)a1 + 4);
  sub_2263AC688(a1);
  v13 = *((_QWORD *)a1 + 4) + 4 * *(_QWORD *)a1 - (_QWORD)v12;
  if (v13 >= 1)
    memset(v12, 255, 4 * (((unint64_t)v13 >> 2) - ((unint64_t)v13 > 3)) + 4);
  sub_2263AC688((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2);
  v15 = a2 + 4;
  v14 = (void *)a2[4];
  sub_2263AC688((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2);
  v16 = a2[4] + 4 * *a2 - (_QWORD)v14;
  if (v16 >= 1)
    memset(v14, 255, 4 * (((unint64_t)v16 >> 2) - ((unint64_t)v16 > 3)) + 4);
  v80 = 0;
  memset(v79, 0, sizeof(v79));
  sub_2263AA560((uint64_t)v79, v10);
  v78 = 0;
  memset(v77, 0, sizeof(v77));
  sub_2263AA560((uint64_t)v77, v10);
  v17 = (int)v10 + 1;
  v76 = 0;
  memset(v75, 0, sizeof(v75));
  sub_2263AA560((uint64_t)v75, (v10 + 1));
  v18 = v11 << 32;
  *a6 = 0;
  if (v11 << 32)
  {
    v19 = 0;
    v65 = a1;
    v66 = v10 << 32;
    v20 = (int)v11;
    v21 = (int)v10 - 1;
    v70 = v17;
    v71 = (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3;
    if (v64 <= 1)
      v22 = 1;
    else
      v22 = v64;
    v23 = 2;
    if (v64 > 2)
      v23 = v64;
    v68 = v23;
    v69 = a3 + 4;
    if (v20 <= 1)
      v20 = 1;
    v63 = v20;
    v61 = v6;
    v60 = 4 * v17;
    do
    {
      if (v66)
      {
        v24 = 0;
        v25 = 4;
        do
        {
          v26 = *(_DWORD *)((*a4)[v25] + 4 * v19);
          sub_2263AC688((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v79);
          v80[v24++] = v26;
          v25 += 5;
        }
        while (v22 != v24);
      }
      sub_2263AC688((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v79);
      v27 = *v80;
      sub_2263AC688(v65);
      v28 = v27;
      *(_DWORD *)(*((_QWORD *)v65 + 4) + 4 * v19) = -1;
      if (v66)
      {
        for (i = 0; i != v22; ++i)
        {
          sub_2263AC688((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2);
          v30 = *(_DWORD *)(*v15 + 4 * v64 * v27 + 4 * i);
          sub_2263AC688((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v77);
          *(_DWORD *)(v78 + 4 * i) = v30;
        }
      }
      sub_2263AC688((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v77);
      v31 = *(_DWORD *)(v78 + 4 * v21);
      sub_2263AC688((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2);
      v67 = (int)v64 * (uint64_t)v27;
      if (*(_DWORD *)(*v15 + 4 * v67) == -1)
      {
        if (v66)
        {
          for (j = 0; j != v22; ++j)
          {
            if (v21 == j)
            {
              sub_2263AC688((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2);
              *(_DWORD *)(*v15 + 4 * (v21 + v67)) = -1;
            }
            else
            {
              sub_2263AC688((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v79);
              v44 = v80[j + 1];
              sub_2263AC688((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2);
              *(_DWORD *)(*v15 + 4 * (j + v67)) = v44;
            }
          }
        }
        sub_2263AC688(v65);
        *(_DWORD *)(*((_QWORD *)v65 + 4) + 4 * v19) = v28;
        ++*a6;
      }
      else
      {
        v32 = v27;
        v33 = 0;
        do
        {
          if (v21 == v33)
          {
            sub_2263AC688(v65);
            *(_DWORD *)(*((_QWORD *)v65 + 4) + 4 * v19) = v32;
            goto LABEL_54;
          }
          sub_2263AC688((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v79);
          v34 = v80[v33 + 1];
          sub_2263AC688((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v77);
          v35 = *(_DWORD *)(v78 + 4 * v33++);
          v36 = v34 == v35;
          v32 = v27;
        }
        while (v36);
        v37 = v31;
        if (v31 < 0)
        {
          v38 = -1;
        }
        else
        {
          while (1)
          {
            v38 = v37;
            if (v70)
            {
              for (k = 0; k != v70; ++k)
              {
                sub_2263AC688(v71);
                v40 = *(_DWORD *)(*v69 + v60 * v38 + 4 * k);
                sub_2263AC688((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v75);
                *(_DWORD *)(v76 + 4 * k) = v40;
              }
            }
            sub_2263AC688((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v75);
            if (v66 < 0x100000001)
              break;
            v37 = *(_DWORD *)(v76 + 4 * v64);
            v41 = 1;
            while (1)
            {
              sub_2263AC688((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v79);
              v42 = v80[v41];
              sub_2263AC688((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v75);
              if (v42 != *(_DWORD *)(v76 + 4 * v41))
                break;
              if (v68 == ++v41)
                goto LABEL_45;
            }
            if (v37 < 0)
              goto LABEL_46;
          }
          v38 = v31;
LABEL_45:
          sub_2263AC688(v65);
          *(_DWORD *)(*((_QWORD *)v65 + 4) + 4 * v19) = v38 + v61;
        }
LABEL_46:
        sub_2263AC688(v65);
        if (*(_DWORD *)(*((_QWORD *)v65 + 4) + 4 * v19) == -1)
        {
          v45 = *(int *)v71;
          if (v31 < 0)
          {
            sub_2263AC688((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2);
            v48 = v21 + v67;
            v46 = a2 + 4;
            v47 = v70;
          }
          else
          {
            sub_2263AC688(v71);
            v46 = v69;
            v47 = v70;
            v48 = v47 + v47 * v38 - 1;
          }
          v49 = v45 / v47;
          *(_DWORD *)(*v46 + 4 * v48) = v45 / v47;
          sub_2263AC688(v65);
          *(_DWORD *)(*((_QWORD *)v65 + 4) + 4 * v19) = v49 + v61;
          if (v66)
          {
            v50 = 0;
            v51 = v22;
            do
            {
              sub_2263AC688((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v79);
              sub_2263AD694((uint64_t)v71, &v80[v50++]);
              --v51;
            }
            while (v51);
          }
          LODWORD(v73[0]) = -1;
          sub_226408B34((uint64_t)v71, v73);
        }
      }
LABEL_54:
      ++v19;
    }
    while (v19 != v63);
    v18 = *a6;
    v6 = v61;
    a1 = v65;
  }
  if (v18 != v6)
  {
    v74 = 0;
    memset(v73, 0, sizeof(v73));
    sub_2263AA560((uint64_t)v73, v6);
    if (v6)
    {
      v52 = 0;
      v53 = 0;
      v54 = 0;
      do
      {
        sub_2263AC688((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a2);
        if (*(_DWORD *)(*v15 + v52) != -1)
        {
          sub_2263AC688((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v73);
          *(_DWORD *)(v74 + 4 * v53) = v54++;
        }
        ++v53;
        v52 += 4 * v64;
      }
      while (v6 != v53);
    }
    if (*(_QWORD *)a1)
    {
      v55 = 0;
      do
      {
        sub_2263AC688(a1);
        v56 = *(int *)(*((_QWORD *)a1 + 4) + 4 * v55);
        if (v56 >= v6)
        {
          sub_2263AC688(a1);
          v58 = *(_DWORD *)(*((_QWORD *)a1 + 4) + 4 * v55);
          v59 = *a6;
          sub_2263AC688(a1);
          *(_DWORD *)(*((_QWORD *)a1 + 4) + 4 * v55) = v58 - v6 + v59;
        }
        else
        {
          sub_2263AC688((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v73);
          v57 = *(_DWORD *)(v74 + 4 * v56);
          sub_2263AC688(a1);
          *(_DWORD *)(*((_QWORD *)a1 + 4) + 4 * v55) = v57;
        }
        ++v55;
      }
      while (*(_QWORD *)a1 > v55);
    }
    sub_2263AC71C((uint64_t)v73);
  }
  sub_2263AC71C((uint64_t)v75);
  sub_2263AC71C((uint64_t)v77);
  sub_2263AC71C((uint64_t)v79);
}

void sub_2264061E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v29;

  sub_2263AC71C((uint64_t)&a29);
  sub_2263AC71C(v29 - 176);
  sub_2263AC71C(v29 - 128);
  _Unwind_Resume(a1);
}

void sub_226406280(uint64_t a1, int a2, int a3, unsigned int a4, unint64_t a5, __int128 *a6, __int128 *a7)
{
  unint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName *v17;
  unint64_t *v18;
  __int128 v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  __int128 v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  __int128 v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  __int128 v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  __int128 v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  __int128 v46;
  uint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  __int128 v51;
  uint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  __int128 v55;
  uint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  __int128 v60;
  uint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  __int128 v64;
  uint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  __int128 v69;
  uint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  __int128 v73;
  uint64_t v74;
  unint64_t *v75;
  unint64_t v76;
  unint64_t v77;
  const char *v78;
  unint64_t v79;
  const char *v80;
  unsigned int *v81;
  unsigned int v82;
  __int128 v83;
  __int128 v84;
  uint64_t v85;
  __int128 v86;
  __int128 v87;
  uint64_t v88;
  __int128 v89;
  __int128 v90;
  uint64_t v91;
  __int128 v92;
  __int128 v93;
  uint64_t v94;
  __int128 v95;
  __int128 v96;
  uint64_t v97;
  __int128 v98;
  __int128 v99;
  uint64_t v100;
  __int128 v101;
  __int128 v102;
  uint64_t v103;
  __int128 v104;
  __int128 v105;
  uint64_t v106;
  __int128 v107;
  __int128 v108;
  uint64_t v109;
  __int128 v110;
  __int128 v111;
  uint64_t v112;
  __int128 v113;
  __int128 v114;
  uint64_t v115;
  __int128 v116;
  __int128 v117;
  uint64_t v118;
  uint64_t v119;

  MEMORY[0x2276976D8](&v119, "constant");
  v14 = *(_QWORD *)(a1 + 72) & 0xFFFFFFFFFFFFFFF8;
  v15 = (unsigned int *)(v119 & 0xFFFFFFFFFFFFFFF8);
  if ((v119 & 7) != 0)
  {
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }
  if ((unsigned int *)v14 == v15)
  {
    sub_226404ED8(a1, a4);
  }
  else
  {
    v17 = (pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)(a1 + 64);
    v18 = (unint64_t *)MEMORY[0x24BEE82A0];
    if (!atomic_load(MEMORY[0x24BEE82A0]))
      sub_2263B1434(MEMORY[0x24BEE82A0]);
    if ((pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==() & 1) != 0)
      goto LABEL_10;
    if (!atomic_load(v18))
      sub_2263B1434(MEMORY[0x24BEE82A0]);
    if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==())
    {
LABEL_10:
      v21 = a6[1];
      v116 = *a6;
      v117 = v21;
      v22 = *((_QWORD *)a6 + 4);
      v118 = v22;
      if (v22)
      {
        v23 = (unint64_t *)(v22 - 16);
        if (*((_QWORD *)&v117 + 1))
          v23 = (unint64_t *)*((_QWORD *)&v117 + 1);
        do
          v24 = __ldxr(v23);
        while (__stxr(v24 + 1, v23));
      }
      v25 = a7[1];
      v113 = *a7;
      v114 = v25;
      v26 = *((_QWORD *)a7 + 4);
      v115 = v26;
      if (v26)
      {
        v27 = (unint64_t *)(v26 - 16);
        if (*((_QWORD *)&v114 + 1))
          v27 = (unint64_t *)*((_QWORD *)&v114 + 1);
        do
          v28 = __ldxr(v27);
        while (__stxr(v28 + 1, v27));
      }
      sub_226406A30((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v116, (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v113, a3, a4, a2, a5, (pxrInternal__aapl__pxrReserved__::VtValue *)a1, *(_DWORD *)(a1 + 80));
      sub_2263AC71C((uint64_t)&v113);
      sub_2263AC71C((uint64_t)&v116);
    }
    else
    {
      if (!atomic_load(v18))
        sub_2263B1434(MEMORY[0x24BEE82A0]);
      if ((pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==() & 1) != 0)
        goto LABEL_32;
      if (!atomic_load(v18))
        sub_2263B1434(MEMORY[0x24BEE82A0]);
      if ((pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==() & 1) != 0)
        goto LABEL_32;
      if (!atomic_load(v18))
        sub_2263B1434(MEMORY[0x24BEE82A0]);
      if ((pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==() & 1) != 0)
        goto LABEL_32;
      if (!atomic_load(v18))
        sub_2263B1434(MEMORY[0x24BEE82A0]);
      if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==())
      {
LABEL_32:
        v33 = a6[1];
        v110 = *a6;
        v111 = v33;
        v34 = *((_QWORD *)a6 + 4);
        v112 = v34;
        if (v34)
        {
          v35 = (unint64_t *)(v34 - 16);
          if (*((_QWORD *)&v111 + 1))
            v35 = (unint64_t *)*((_QWORD *)&v111 + 1);
          do
            v36 = __ldxr(v35);
          while (__stxr(v36 + 1, v35));
        }
        v37 = a7[1];
        v107 = *a7;
        v108 = v37;
        v38 = *((_QWORD *)a7 + 4);
        v109 = v38;
        if (v38)
        {
          v39 = (unint64_t *)(v38 - 16);
          if (*((_QWORD *)&v108 + 1))
            v39 = (unint64_t *)*((_QWORD *)&v108 + 1);
          do
            v40 = __ldxr(v39);
          while (__stxr(v40 + 1, v39));
        }
        sub_226406CC0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v110, (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v107, a3, a4, a2, a5, (pxrInternal__aapl__pxrReserved__::VtValue *)a1, *(_DWORD *)(a1 + 80));
        sub_2263AC71C((uint64_t)&v107);
        sub_2263AC71C((uint64_t)&v110);
      }
      else
      {
        if (!atomic_load(v18))
          sub_2263B1434(MEMORY[0x24BEE82A0]);
        if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==())
        {
          v42 = a6[1];
          v104 = *a6;
          v105 = v42;
          v43 = *((_QWORD *)a6 + 4);
          v106 = v43;
          if (v43)
          {
            v44 = (unint64_t *)(v43 - 16);
            if (*((_QWORD *)&v105 + 1))
              v44 = (unint64_t *)*((_QWORD *)&v105 + 1);
            do
              v45 = __ldxr(v44);
            while (__stxr(v45 + 1, v44));
          }
          v46 = a7[1];
          v101 = *a7;
          v102 = v46;
          v47 = *((_QWORD *)a7 + 4);
          v103 = v47;
          if (v47)
          {
            v48 = (unint64_t *)(v47 - 16);
            if (*((_QWORD *)&v102 + 1))
              v48 = (unint64_t *)*((_QWORD *)&v102 + 1);
            do
              v49 = __ldxr(v48);
            while (__stxr(v49 + 1, v48));
          }
          sub_226406F80((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v104, (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v101, a3, a4, a2, a5, (pxrInternal__aapl__pxrReserved__::VtValue *)a1, *(_DWORD *)(a1 + 80));
          sub_2263AC71C((uint64_t)&v101);
          sub_2263AC71C((uint64_t)&v104);
        }
        else
        {
          if (!atomic_load(v18))
            sub_2263B1434(MEMORY[0x24BEE82A0]);
          if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==())
          {
            v51 = a6[1];
            v98 = *a6;
            v99 = v51;
            v52 = *((_QWORD *)a6 + 4);
            v100 = v52;
            if (v52)
            {
              v53 = (unint64_t *)(v52 - 16);
              if (*((_QWORD *)&v99 + 1))
                v53 = (unint64_t *)*((_QWORD *)&v99 + 1);
              do
                v54 = __ldxr(v53);
              while (__stxr(v54 + 1, v53));
            }
            v55 = a7[1];
            v95 = *a7;
            v96 = v55;
            v56 = *((_QWORD *)a7 + 4);
            v97 = v56;
            if (v56)
            {
              v57 = (unint64_t *)(v56 - 16);
              if (*((_QWORD *)&v96 + 1))
                v57 = (unint64_t *)*((_QWORD *)&v96 + 1);
              do
                v58 = __ldxr(v57);
              while (__stxr(v58 + 1, v57));
            }
            sub_226407210((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v98, (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v95, a3, a4, a2, a5, (pxrInternal__aapl__pxrReserved__::VtValue *)a1, *(_DWORD *)(a1 + 80));
            sub_2263AC71C((uint64_t)&v95);
            sub_2263AC71C((uint64_t)&v98);
          }
          else
          {
            if (!atomic_load(v18))
              sub_2263B1434(MEMORY[0x24BEE82A0]);
            if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==())
            {
              v60 = a6[1];
              v92 = *a6;
              v93 = v60;
              v61 = *((_QWORD *)a6 + 4);
              v94 = v61;
              if (v61)
              {
                v62 = (unint64_t *)(v61 - 16);
                if (*((_QWORD *)&v93 + 1))
                  v62 = (unint64_t *)*((_QWORD *)&v93 + 1);
                do
                  v63 = __ldxr(v62);
                while (__stxr(v63 + 1, v62));
              }
              v64 = a7[1];
              v89 = *a7;
              v90 = v64;
              v65 = *((_QWORD *)a7 + 4);
              v91 = v65;
              if (v65)
              {
                v66 = (unint64_t *)(v65 - 16);
                if (*((_QWORD *)&v90 + 1))
                  v66 = (unint64_t *)*((_QWORD *)&v90 + 1);
                do
                  v67 = __ldxr(v66);
                while (__stxr(v67 + 1, v66));
              }
              sub_2264074A0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v92, (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v89, a3, a4, a2, a5, (pxrInternal__aapl__pxrReserved__::VtValue *)a1, *(_DWORD *)(a1 + 80));
              sub_2263AC71C((uint64_t)&v89);
              sub_2263AC71C((uint64_t)&v92);
            }
            else
            {
              if (!atomic_load(v18))
                sub_2263B1434(MEMORY[0x24BEE82A0]);
              if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==())
              {
                v69 = a6[1];
                v86 = *a6;
                v87 = v69;
                v70 = *((_QWORD *)a6 + 4);
                v88 = v70;
                if (v70)
                {
                  v71 = (unint64_t *)(v70 - 16);
                  if (*((_QWORD *)&v87 + 1))
                    v71 = (unint64_t *)*((_QWORD *)&v87 + 1);
                  do
                    v72 = __ldxr(v71);
                  while (__stxr(v72 + 1, v71));
                }
                v73 = a7[1];
                v83 = *a7;
                v84 = v73;
                v74 = *((_QWORD *)a7 + 4);
                v85 = v74;
                if (v74)
                {
                  v75 = (unint64_t *)(v74 - 16);
                  if (*((_QWORD *)&v84 + 1))
                    v75 = (unint64_t *)*((_QWORD *)&v84 + 1);
                  do
                    v76 = __ldxr(v75);
                  while (__stxr(v76 + 1, v75));
                }
                sub_226407730((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v86, (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v83, a3, a4, a2, a5, (pxrInternal__aapl__pxrReserved__::VtValue *)a1, *(_DWORD *)(a1 + 80));
                sub_2263AC71C((uint64_t)&v83);
                sub_2263AC71C((uint64_t)&v86);
              }
              else
              {
                v77 = *(_QWORD *)(a1 + 56) & 0xFFFFFFFFFFFFFFF8;
                if (v77)
                {
                  v78 = (const char *)(v77 + 16);
                  if (*(char *)(v77 + 39) < 0)
                    v78 = *(const char **)v78;
                }
                else
                {
                  v78 = "";
                }
                pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken(v17);
                v79 = v119 & 0xFFFFFFFFFFFFFFF8;
                if ((v119 & 0xFFFFFFFFFFFFFFF8) != 0)
                {
                  v80 = (const char *)(v79 + 16);
                  if (*(char *)(v79 + 39) < 0)
                    v80 = *(const char **)v80;
                }
                else
                {
                  v80 = "";
                }
                NSLog(CFSTR("Warning: mesh attribute %s has unsupported array type %s"), v78, v80);
                if ((v119 & 7) != 0)
                {
                  v81 = (unsigned int *)(v119 & 0xFFFFFFFFFFFFFFF8);
                  do
                    v82 = __ldxr(v81);
                  while (__stlxr(v82 - 2, v81));
                }
              }
            }
          }
        }
      }
    }
  }
}

void sub_226406914(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
  uint64_t v59;
  uint64_t v60;
  unsigned int *v61;
  unsigned int v62;

  v60 = *(_QWORD *)(v59 - 88);
  if ((v60 & 7) != 0)
  {
    v61 = (unsigned int *)(v60 & 0xFFFFFFFFFFFFFFF8);
    do
      v62 = __ldxr(v61);
    while (__stlxr(v62 - 2, v61));
  }
  _Unwind_Resume(exception_object);
}

void sub_226406A30(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *a1, pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *a2, int a3, int a4, int a5, unint64_t a6, pxrInternal__aapl__pxrReserved__::VtValue *a7, int a8)
{
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v33;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  __n128 v38[2];
  uint64_t v39;

  v39 = 0;
  memset(v38, 0, sizeof(v38));
  sub_2263BA308((uint64_t)v38, (a4 * a8));
  v33 = (uint64_t *)a7;
  v13 = sub_2263AF4A8(a7);
  v14 = *(_OWORD *)(v13 + 16);
  v35 = *(_OWORD *)v13;
  v36 = v14;
  v15 = *(_QWORD *)(v13 + 32);
  v37 = v15;
  if (v15)
  {
    v16 = (unint64_t *)(v15 - 16);
    if (*((_QWORD *)&v36 + 1))
      v16 = (unint64_t *)*((_QWORD *)&v36 + 1);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  if (*(_QWORD *)a1 >= a6)
  {
    v18 = 0;
    v19 = 0;
    do
    {
      sub_2263AC688(a1);
      if (*(_DWORD *)(*((_QWORD *)a1 + 4) + 4 * v18 * a6) != -1)
      {
        if (a5)
        {
          sub_2263AC688(a1);
          v20 = *(_DWORD *)(*((_QWORD *)a1 + 4) + 4 * (a5 - 1 + v18 * a6));
        }
        else
        {
          v20 = v18;
        }
        if (a8 >= 1)
        {
          v21 = 8 * v19 * a8;
          v22 = 8 * v20 * a8;
          v23 = a8;
          do
          {
            sub_2263C11DC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v35);
            v24 = v37;
            sub_2263C11DC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v38);
            *(_QWORD *)(v39 + v21) = *(_QWORD *)(v24 + v22);
            v21 += 8;
            v22 += 8;
            --v23;
          }
          while (v23);
        }
        ++v19;
      }
      ++v18;
    }
    while (*(_QWORD *)a1 / a6 > v18);
  }
  v25 = a6 + 1;
  if (a6 + 1 <= *(_QWORD *)a2)
  {
    v26 = 0;
    v27 = 8 * a8 * (uint64_t)a3;
    do
    {
      sub_2263AC688(a2);
      if (a8 >= 1)
      {
        v28 = a8;
        v29 = 8 * *(_DWORD *)(*((_QWORD *)a2 + 4) + 4 * (a5 + v26 * v25)) * a8;
        v30 = v27;
        do
        {
          sub_2263C11DC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v35);
          v31 = v37;
          sub_2263C11DC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v38);
          *(_QWORD *)(v39 + v30) = *(_QWORD *)(v31 + v29);
          v30 += 8;
          v29 += 8;
          --v28;
        }
        while (v28);
      }
      ++v26;
      v27 += 8 * a8;
    }
    while (*(_QWORD *)a2 / v25 > v26);
  }
  sub_226407EC0(v33, v38);
  sub_2263AC71C((uint64_t)&v35);
  sub_2263AC71C((uint64_t)v38);
}

void sub_226406C80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  sub_2263AC71C((uint64_t)va);
  sub_2263AC71C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_226406CC0(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *a1, pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *a2, int a3, int a4, int a5, unint64_t a6, pxrInternal__aapl__pxrReserved__::VtValue *a7, int a8)
{
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v38;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  __n128 v43[2];
  uint64_t v44;

  v44 = 0;
  memset(v43, 0, sizeof(v43));
  sub_2263AFB70((uint64_t)v43, (a4 * a8));
  v38 = (uint64_t *)a7;
  v13 = sub_2263AAC04(a7);
  v14 = *(_OWORD *)(v13 + 16);
  v40 = *(_OWORD *)v13;
  v41 = v14;
  v15 = *(_QWORD *)(v13 + 32);
  v42 = v15;
  if (v15)
  {
    v16 = (unint64_t *)(v15 - 16);
    if (*((_QWORD *)&v41 + 1))
      v16 = (unint64_t *)*((_QWORD *)&v41 + 1);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  if (*(_QWORD *)a1 >= a6)
  {
    v18 = 0;
    v19 = 0;
    do
    {
      sub_2263AC688(a1);
      if (*(_DWORD *)(*((_QWORD *)a1 + 4) + 4 * v18 * a6) != -1)
      {
        if (a5)
        {
          sub_2263AC688(a1);
          v20 = *(_DWORD *)(*((_QWORD *)a1 + 4) + 4 * (a5 - 1 + v18 * a6));
        }
        else
        {
          v20 = v18;
        }
        if (a8 >= 1)
        {
          v21 = 12 * v19 * a8;
          v22 = 12 * v20 * a8;
          v23 = a8;
          do
          {
            sub_2263B1F74((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v40);
            v24 = v42;
            sub_2263B1F74((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v43);
            v25 = v44 + v21;
            v26 = *(_QWORD *)(v24 + v22);
            *(_DWORD *)(v25 + 8) = *(_DWORD *)(v24 + v22 + 8);
            *(_QWORD *)v25 = v26;
            v21 += 12;
            v22 += 12;
            --v23;
          }
          while (v23);
        }
        ++v19;
      }
      ++v18;
    }
    while (*(_QWORD *)a1 / a6 > v18);
  }
  v27 = a6 + 1;
  if (a6 + 1 <= *(_QWORD *)a2)
  {
    v28 = 0;
    v29 = 12 * a8;
    v30 = v29 * a3;
    do
    {
      sub_2263AC688(a2);
      if (a8 >= 1)
      {
        v31 = a8;
        v32 = 12 * *(int *)(*((_QWORD *)a2 + 4) + 4 * (a5 + v28 * v27)) * (uint64_t)a8;
        v33 = v30;
        do
        {
          sub_2263B1F74((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v40);
          v34 = v42;
          sub_2263B1F74((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v43);
          v35 = v44 + v33;
          v36 = *(_QWORD *)(v34 + v32);
          *(_DWORD *)(v35 + 8) = *(_DWORD *)(v34 + v32 + 8);
          *(_QWORD *)v35 = v36;
          v33 += 12;
          v32 += 12;
          --v31;
        }
        while (v31);
      }
      ++v28;
      v30 += v29;
    }
    while (*(_QWORD *)a2 / v27 > v28);
  }
  sub_2263AEA40(v38, v43);
  sub_2263AC71C((uint64_t)&v40);
  sub_2263AC71C((uint64_t)v43);
}

void sub_226406F40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  sub_2263AC71C((uint64_t)va);
  sub_2263AC71C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_226406F80(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *a1, pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *a2, int a3, int a4, int a5, unint64_t a6, pxrInternal__aapl__pxrReserved__::VtValue *a7, int a8)
{
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t *v33;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  __n128 v38[2];
  uint64_t v39;

  v39 = 0;
  memset(v38, 0, sizeof(v38));
  sub_2263AA560((uint64_t)v38, (a4 * a8));
  v33 = (uint64_t *)a7;
  v13 = sub_2263C01DC(a7);
  v14 = *(_OWORD *)(v13 + 16);
  v35 = *(_OWORD *)v13;
  v36 = v14;
  v15 = *(_QWORD *)(v13 + 32);
  v37 = v15;
  if (v15)
  {
    v16 = (unint64_t *)(v15 - 16);
    if (*((_QWORD *)&v36 + 1))
      v16 = (unint64_t *)*((_QWORD *)&v36 + 1);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  if (*(_QWORD *)a1 >= a6)
  {
    v18 = 0;
    v19 = 0;
    do
    {
      sub_2263AC688(a1);
      if (*(_DWORD *)(*((_QWORD *)a1 + 4) + 4 * v18 * a6) != -1)
      {
        if (a5)
        {
          sub_2263AC688(a1);
          v20 = *(_DWORD *)(*((_QWORD *)a1 + 4) + 4 * (a5 - 1 + v18 * a6));
        }
        else
        {
          v20 = v18;
        }
        if (a8 >= 1)
        {
          v21 = 4 * v19 * a8;
          v22 = 4 * v20 * a8;
          v23 = a8;
          do
          {
            sub_2263AC688((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v35);
            v24 = *(_DWORD *)(v37 + v22);
            sub_2263AC688((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v38);
            *(_DWORD *)(v39 + v21) = v24;
            v21 += 4;
            v22 += 4;
            --v23;
          }
          while (v23);
        }
        ++v19;
      }
      ++v18;
    }
    while (*(_QWORD *)a1 / a6 > v18);
  }
  v25 = a6 + 1;
  if (a6 + 1 <= *(_QWORD *)a2)
  {
    v26 = 0;
    v27 = 4 * a8 * (uint64_t)a3;
    do
    {
      sub_2263AC688(a2);
      if (a8 >= 1)
      {
        v28 = a8;
        v29 = 4 * *(_DWORD *)(*((_QWORD *)a2 + 4) + 4 * (a5 + v26 * v25)) * a8;
        v30 = v27;
        do
        {
          sub_2263AC688((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v35);
          v31 = *(_DWORD *)(v37 + v29);
          sub_2263AC688((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v38);
          *(_DWORD *)(v39 + v30) = v31;
          v30 += 4;
          v29 += 4;
          --v28;
        }
        while (v28);
      }
      ++v26;
      v27 += 4 * a8;
    }
    while (*(_QWORD *)a2 / v25 > v26);
  }
  sub_2264080D4(v33, v38);
  sub_2263AC71C((uint64_t)&v35);
  sub_2263AC71C((uint64_t)v38);
}

void sub_2264071D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  sub_2263AC71C((uint64_t)va);
  sub_2263AC71C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_226407210(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *a1, pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *a2, int a3, int a4, int a5, unint64_t a6, pxrInternal__aapl__pxrReserved__::VtValue *a7, int a8)
{
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v33;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  __n128 v38[2];
  uint64_t v39;

  v39 = 0;
  memset(v38, 0, sizeof(v38));
  sub_2263AFB00((uint64_t)v38, (a4 * a8));
  v33 = (uint64_t *)a7;
  v13 = sub_2263C1400(a7);
  v14 = *(_OWORD *)(v13 + 16);
  v35 = *(_OWORD *)v13;
  v36 = v14;
  v15 = *(_QWORD *)(v13 + 32);
  v37 = v15;
  if (v15)
  {
    v16 = (unint64_t *)(v15 - 16);
    if (*((_QWORD *)&v36 + 1))
      v16 = (unint64_t *)*((_QWORD *)&v36 + 1);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  if (*(_QWORD *)a1 >= a6)
  {
    v18 = 0;
    v19 = 0;
    do
    {
      sub_2263AC688(a1);
      if (*(_DWORD *)(*((_QWORD *)a1 + 4) + 4 * v18 * a6) != -1)
      {
        if (a5)
        {
          sub_2263AC688(a1);
          v20 = *(_DWORD *)(*((_QWORD *)a1 + 4) + 4 * (a5 - 1 + v18 * a6));
        }
        else
        {
          v20 = v18;
        }
        if (a8 >= 1)
        {
          v21 = 16 * v19 * a8;
          v22 = 16 * v20 * a8;
          v23 = a8;
          do
          {
            sub_2263B1E44((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v35);
            v24 = v37;
            sub_2263B1E44((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v38);
            *(_OWORD *)(v39 + v21) = *(_OWORD *)(v24 + v22);
            v21 += 16;
            v22 += 16;
            --v23;
          }
          while (v23);
        }
        ++v19;
      }
      ++v18;
    }
    while (*(_QWORD *)a1 / a6 > v18);
  }
  v25 = a6 + 1;
  if (a6 + 1 <= *(_QWORD *)a2)
  {
    v26 = 0;
    v27 = 16 * a8 * (uint64_t)a3;
    do
    {
      sub_2263AC688(a2);
      if (a8 >= 1)
      {
        v28 = a8;
        v29 = 16 * *(_DWORD *)(*((_QWORD *)a2 + 4) + 4 * (a5 + v26 * v25)) * a8;
        v30 = v27;
        do
        {
          sub_2263B1E44((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v35);
          v31 = v37;
          sub_2263B1E44((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v38);
          *(_OWORD *)(v39 + v30) = *(_OWORD *)(v31 + v29);
          v30 += 16;
          v29 += 16;
          --v28;
        }
        while (v28);
      }
      ++v26;
      v27 += 16 * a8;
    }
    while (*(_QWORD *)a2 / v25 > v26);
  }
  sub_226408258(v33, v38);
  sub_2263AC71C((uint64_t)&v35);
  sub_2263AC71C((uint64_t)v38);
}

void sub_226407460(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  sub_2263AC71C((uint64_t)va);
  sub_2263AC71C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_2264074A0(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *a1, pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *a2, int a3, int a4, int a5, unint64_t a6, pxrInternal__aapl__pxrReserved__::VtValue *a7, int a8)
{
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t *v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  __n128 v39[2];
  uint64_t v40;

  v40 = 0;
  memset(v39, 0, sizeof(v39));
  sub_2263BA174((uint64_t)v39, (a4 * a8));
  v34 = (uint64_t *)a7;
  v14 = sub_2263C0E14(a7);
  v15 = *(_OWORD *)(v14 + 16);
  v36 = *(_OWORD *)v14;
  v37 = v15;
  v16 = *(_QWORD *)(v14 + 32);
  v38 = v16;
  if (v16)
  {
    v17 = (unint64_t *)(v16 - 16);
    if (*((_QWORD *)&v37 + 1))
      v17 = (unint64_t *)*((_QWORD *)&v37 + 1);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  if (*(_QWORD *)a1 >= a6)
  {
    v19 = 0;
    v20 = 0;
    do
    {
      sub_2263AC688(a1);
      if (*(_DWORD *)(*((_QWORD *)a1 + 4) + 4 * v19 * a6) != -1)
      {
        if (a5)
        {
          sub_2263AC688(a1);
          v21 = *(_DWORD *)(*((_QWORD *)a1 + 4) + 4 * (a5 - 1 + v19 * a6));
        }
        else
        {
          v21 = v19;
        }
        if (a8 >= 1)
        {
          v22 = 4 * v20 * a8;
          v23 = 4 * v21 * a8;
          v24 = a8;
          do
          {
            sub_2263CA3A4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v36);
            v25 = *(_DWORD *)(v38 + v23);
            sub_2263CA3A4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v39);
            *(_DWORD *)(v40 + v22) = v25;
            v22 += 4;
            v23 += 4;
            --v24;
          }
          while (v24);
        }
        ++v20;
      }
      ++v19;
    }
    while (*(_QWORD *)a1 / a6 > v19);
  }
  v26 = a6 + 1;
  if (a6 + 1 <= *(_QWORD *)a2)
  {
    v27 = 0;
    v35 = a5;
    v28 = 4 * a8 * (uint64_t)a3;
    do
    {
      sub_2263AC688(a2);
      if (a8 >= 1)
      {
        v29 = 4 * *(_DWORD *)(*((_QWORD *)a2 + 4) + 4 * (v35 + v27 * v26)) * a8;
        v30 = a8;
        v31 = v28;
        do
        {
          sub_2263CA3A4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v36);
          v32 = *(_DWORD *)(v38 + v29);
          sub_2263CA3A4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v39);
          *(_DWORD *)(v40 + v31) = v32;
          v31 += 4;
          v29 += 4;
          --v30;
        }
        while (v30);
      }
      ++v27;
      v28 += 4 * a8;
    }
    while (*(_QWORD *)a2 / v26 > v27);
  }
  sub_22640846C(v34, v39);
  sub_2263AC71C((uint64_t)&v36);
  sub_2263AC71C((uint64_t)v39);
}

void sub_2264076F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  sub_2263AC71C((uint64_t)va);
  sub_2263AC71C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_226407730(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *a1, pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *a2, int a3, int a4, int a5, unint64_t a6, pxrInternal__aapl__pxrReserved__::VtValue *a7, int a8)
{
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t *v33;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  __n128 v38[2];
  uint64_t v39;

  v39 = 0;
  memset(v38, 0, sizeof(v38));
  sub_2263B911C((uint64_t)v38, (a4 * a8));
  v33 = (uint64_t *)a7;
  v13 = sub_2263C03E4(a7);
  v14 = *(_OWORD *)(v13 + 16);
  v35 = *(_OWORD *)v13;
  v36 = v14;
  v15 = *(_QWORD *)(v13 + 32);
  v37 = v15;
  if (v15)
  {
    v16 = (unint64_t *)(v15 - 16);
    if (*((_QWORD *)&v36 + 1))
      v16 = (unint64_t *)*((_QWORD *)&v36 + 1);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  if (*(_QWORD *)a1 >= a6)
  {
    v18 = 0;
    v19 = 0;
    do
    {
      sub_2263AC688(a1);
      if (*(_DWORD *)(*((_QWORD *)a1 + 4) + 4 * v18 * a6) != -1)
      {
        if (a5)
        {
          sub_2263AC688(a1);
          v20 = *(_DWORD *)(*((_QWORD *)a1 + 4) + 4 * (a5 - 1 + v18 * a6));
        }
        else
        {
          v20 = v18;
        }
        if (a8 >= 1)
        {
          v21 = 4 * v19 * a8;
          v22 = 4 * v20 * a8;
          v23 = a8;
          do
          {
            sub_2263C6BCC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v35);
            v24 = *(_DWORD *)(v37 + v22);
            sub_2263C6BCC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v38);
            *(_DWORD *)(v39 + v21) = v24;
            v21 += 4;
            v22 += 4;
            --v23;
          }
          while (v23);
        }
        ++v19;
      }
      ++v18;
    }
    while (*(_QWORD *)a1 / a6 > v18);
  }
  v25 = a6 + 1;
  if (a6 + 1 <= *(_QWORD *)a2)
  {
    v26 = 0;
    v27 = 4 * a8 * (uint64_t)a3;
    do
    {
      sub_2263AC688(a2);
      if (a8 >= 1)
      {
        v28 = a8;
        v29 = 4 * *(_DWORD *)(*((_QWORD *)a2 + 4) + 4 * (a5 + v26 * v25)) * a8;
        v30 = v27;
        do
        {
          sub_2263C6BCC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v35);
          v31 = *(_DWORD *)(v37 + v29);
          sub_2263C6BCC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v38);
          *(_DWORD *)(v39 + v30) = v31;
          v30 += 4;
          v29 += 4;
          --v28;
        }
        while (v28);
      }
      ++v26;
      v27 += 4 * a8;
    }
    while (*(_QWORD *)a2 / v25 > v26);
  }
  sub_226408680(v33, v38);
  sub_2263AC71C((uint64_t)&v35);
  sub_2263AC71C((uint64_t)v38);
}

void sub_226407980(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  sub_2263AC71C((uint64_t)va);
  sub_2263AC71C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_2264079C0(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::VtValue *v3;
  pxrInternal__aapl__pxrReserved__::VtValue *v4;
  uint64_t *v5;
  unint64_t NumElements;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  unint64_t *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  _BYTE *v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int *v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  unsigned int *v35;
  unsigned int v36;
  unint64_t v37;
  unsigned int *v38;
  unsigned int v39;
  unint64_t v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  uint64_t i;
  unint64_t v45;
  int v46;
  __int128 v47[2];
  uint64_t v48;
  __int128 v49[2];
  uint64_t v50;
  _BYTE v51[40];
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55[4];
  uint64_t v56;
  int v57;
  _DWORD *v58[7];

  v3 = *(pxrInternal__aapl__pxrReserved__::VtValue **)(a1 + 8);
  v4 = *(pxrInternal__aapl__pxrReserved__::VtValue **)(a1 + 16);
  v5 = (uint64_t *)(a1 + 8);
  if (v4 == v3)
    return;
  NumElements = pxrInternal__aapl__pxrReserved__::VtValue::_GetNumElements(v3);
  v7 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)(a1 + 16) == v7)
    goto LABEL_13;
  v8 = 0;
  while (1)
  {
    MEMORY[0x2276976D8](v55, "faceVarying");
    v9 = (unsigned int *)(*(_QWORD *)(v7 + 88 * v8 + 72) & 0xFFFFFFFFFFFFFFF8);
    v10 = (unsigned int *)(v55[0] & 0xFFFFFFFFFFFFFFF8);
    if (v9 == (unsigned int *)(v55[0] & 0xFFFFFFFFFFFFFFF8))
      break;
    if ((v55[0] & 7) != 0)
    {
      do
        v11 = __ldxr(v10);
      while (__stlxr(v11 - 2, v10));
    }
    v7 = *v5;
LABEL_12:
    if (0x2E8BA2E8BA2E8BA3 * ((*(_QWORD *)(a1 + 16) - v7) >> 3) <= (unint64_t)++v8)
      goto LABEL_13;
  }
  v7 = *v5;
  v12 = *(_QWORD *)(*v5 + 88 * v8 + 16);
  if ((v55[0] & 7) != 0)
  {
    do
      v13 = __ldxr(v9);
    while (__stlxr(v13 - 2, v9));
    v7 = *v5;
  }
  if (v12)
    goto LABEL_12;
  for (i = *(_QWORD *)(a1 + 16); v7 != i; v7 += 88)
    sub_226403D78(v7, (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(a1 + 32), (unsigned int *)(a1 + 72));
  if (*(_QWORD *)(a1 + 72))
  {
    v45 = 0;
    do
    {
      sub_2263AC688((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(a1 + 72));
      *(_DWORD *)(*(_QWORD *)(a1 + 104) + 4 * v45) = v45;
      ++v45;
    }
    while (*(_QWORD *)(a1 + 72) > v45);
  }
LABEL_13:
  v56 = 0;
  memset(v55, 0, sizeof(v55));
  v14 = (unint64_t *)(a1 + 72);
  v52 = 0;
  v53 = 0;
  v54 = 0;
  sub_226405430(v55, v5, (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(a1 + 32), (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)(a1 + 72), (uint64_t *)&v52);
  if (v53 - (_QWORD)v52 == 40)
  {
    v15 = pxrInternal__aapl__pxrReserved__::VtValue::_GetNumElements((pxrInternal__aapl__pxrReserved__::VtValue *)*v5);
    v16 = *(_QWORD *)(a1 + 8);
    v17 = *(_QWORD *)(a1 + 16);
    if (v16 != v17)
    {
      v18 = v15;
      do
      {
        MEMORY[0x2276976D8](v51, "constant");
        v19 = (_BYTE *)(v16 + 72);
        v20 = *(_QWORD *)(v16 + 72);
        v21 = (unsigned int *)(*(_QWORD *)v51 & 0xFFFFFFFFFFFFFFF8);
        if ((v51[0] & 7) != 0)
        {
          do
            v22 = __ldxr(v21);
          while (__stlxr(v22 - 2, v21));
        }
        if ((unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8) == v21)
          sub_226404ED8(v16, v18);
        MEMORY[0x2276976D8](v51, "vertex");
        if (v51 == v19)
        {
          v25 = *(_QWORD *)v51;
        }
        else
        {
          if ((*(_QWORD *)v19 & 7) != 0)
          {
            v23 = (unsigned int *)(*(_QWORD *)v19 & 0xFFFFFFFFFFFFFFF8);
            do
              v24 = __ldxr(v23);
            while (__stlxr(v24 - 2, v23));
          }
          v25 = 0;
          *(_QWORD *)v19 = *(_QWORD *)v51;
          *(_QWORD *)v51 = 0;
        }
        if ((v25 & 7) != 0)
        {
          v26 = (unsigned int *)(v25 & 0xFFFFFFFFFFFFFFF8);
          do
            v27 = __ldxr(v26);
          while (__stlxr(v27 - 2, v26));
        }
        sub_2263AD1C8((_QWORD *)(v16 + 16));
        v16 += 88;
      }
      while (v16 != v17);
    }
  }
  else
  {
    memset(v51, 0, sizeof(v51));
    sub_2263AA560((uint64_t)v51, *v14);
    v50 = 0;
    memset(v49, 0, sizeof(v49));
    v48 = 0;
    memset(v47, 0, sizeof(v47));
    v46 = 0;
    sub_226405B20((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v51, (unint64_t *)v49, v47, &v52, NumElements, &v46);
    v28 = *(_QWORD *)(a1 + 8);
    v29 = *(_QWORD *)(a1 + 16);
    if (v28 != v29)
    {
      v30 = 0;
      v31 = 0xCCCCCCCCCCCCCCCDLL * ((v53 - (uint64_t)v52) >> 3);
      v32 = *(_QWORD *)&v47[0] / (v31 + 1) + v46;
      v33 = (int)v31;
      do
      {
        sub_2263AC688((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v55);
        sub_226406280(v28, *(_DWORD *)(v56 + 4 * v30), v46, v32, v33, v49, v47);
        MEMORY[0x2276976D8](v58, "vertex");
        v34 = (_QWORD *)(v28 + 72);
        if (v58 == (_DWORD **)(v28 + 72))
        {
          v37 = (unint64_t)v58[0];
        }
        else
        {
          if ((*v34 & 7) != 0)
          {
            v35 = (unsigned int *)(*v34 & 0xFFFFFFFFFFFFFFF8);
            do
              v36 = __ldxr(v35);
            while (__stlxr(v36 - 2, v35));
          }
          v37 = 0;
          *v34 = v58[0];
          v58[0] = 0;
        }
        if ((v37 & 7) != 0)
        {
          v38 = (unsigned int *)(v37 & 0xFFFFFFFFFFFFFFF8);
          do
            v39 = __ldxr(v38);
          while (__stlxr(v39 - 2, v38));
        }
        sub_2263AD1C8((_QWORD *)(v28 + 16));
        ++v30;
        v28 += 88;
      }
      while (v28 != v29);
    }
    v40 = *v14;
    v57 = 0;
    v58[0] = &v57;
    sub_2263AD210((unint64_t *)v51, v40, v58);
    v41 = *(_QWORD *)(a1 + 88);
    v42 = *(_OWORD *)v14;
    *(_OWORD *)v14 = *(_OWORD *)v51;
    *(_QWORD *)(a1 + 88) = *(_QWORD *)&v51[16];
    *(_OWORD *)v51 = v42;
    *(_QWORD *)&v51[16] = v41;
    v43 = *(_OWORD *)(a1 + 96);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)&v51[24];
    *(_OWORD *)&v51[24] = v43;
    sub_2263AC71C((uint64_t)v47);
    sub_2263AC71C((uint64_t)v49);
    sub_2263AC71C((uint64_t)v51);
  }
  *(_QWORD *)v51 = &v52;
  sub_226408C98((void ***)v51);
  sub_2263AC71C((uint64_t)v55);
}

void sub_226407E48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void **a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,char a31)
{
  sub_2263AC71C((uint64_t)&a11);
  sub_2263AC71C((uint64_t)&a17);
  sub_2263AC71C((uint64_t)&a23);
  a23 = (void **)&a28;
  sub_226408C98(&a23);
  sub_2263AC71C((uint64_t)&a31);
  _Unwind_Resume(a1);
}

__n128 sub_226407EC0(uint64_t *a1, __n128 *a2)
{
  __n128 *v4;
  unint64_t v5;
  unint64_t v6;
  __n128 result;
  unint64_t v8;
  unint64_t v9;
  _OWORD v10[2];
  uint64_t v11;

  if ((sub_2263B1D2C((pxrInternal__aapl__pxrReserved__::VtValue *)a1) & 1) == 0)
  {
    v11 = 0;
    memset(v10, 0, sizeof(v10));
    sub_226407F74(a1, (uint64_t)v10);
    sub_2263AC71C((uint64_t)v10);
  }
  v4 = (__n128 *)sub_226408044(a1);
  v5 = v4[2].n128_u64[0];
  v4[2].n128_u64[0] = a2[2].n128_u64[0];
  a2[2].n128_u64[0] = v5;
  v6 = v4[1].n128_u64[0];
  result = *v4;
  v8 = a2[1].n128_u64[0];
  *v4 = *a2;
  v4[1].n128_u64[0] = v8;
  *a2 = result;
  a2[1].n128_u64[0] = v6;
  v9 = v4[1].n128_u64[1];
  v4[1].n128_u64[1] = a2[1].n128_u64[1];
  a2[1].n128_u64[1] = v9;
  return result;
}

void sub_226407F5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2263AC71C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_226407F74(uint64_t *a1, uint64_t a2)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5 = 0;
  v6 = 0;
  sub_2263AD508((uint64_t)&v5, (uint64_t)a1);
  a1[1] = (uint64_t)off_24EDD8310;
  sub_2263B131C(a1, a2);
  if (v6)
    (*(void (**)(uint64_t *))(v6 + 32))(&v5);
  return a1;
}

void sub_226408008(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2)
    sub_2263AACCC(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_226408044(uint64_t *a1)
{
  uint64_t v2;
  _QWORD v4[3];

  v4[2] = *MEMORY[0x24BDAC8D0];
  v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(_QWORD *__return_ptr, uint64_t *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_2263AD3FC(a1, v4);
    sub_2263AD568((uint64_t)v4);
  }
  return sub_2263CAF3C(a1);
}

__n128 sub_2264080D4(uint64_t *a1, __n128 *a2)
{
  __n128 *v4;
  unint64_t v5;
  unint64_t v6;
  __n128 result;
  unint64_t v8;
  unint64_t v9;
  _OWORD v10[2];
  uint64_t v11;

  if ((sub_2263C01A4((pxrInternal__aapl__pxrReserved__::VtValue *)a1) & 1) == 0)
  {
    v11 = 0;
    memset(v10, 0, sizeof(v10));
    sub_226408188(a1, (uint64_t)v10);
    sub_2263AC71C((uint64_t)v10);
  }
  v4 = (__n128 *)sub_2263E4640(a1);
  v5 = v4[2].n128_u64[0];
  v4[2].n128_u64[0] = a2[2].n128_u64[0];
  a2[2].n128_u64[0] = v5;
  v6 = v4[1].n128_u64[0];
  result = *v4;
  v8 = a2[1].n128_u64[0];
  *v4 = *a2;
  v4[1].n128_u64[0] = v8;
  *a2 = result;
  a2[1].n128_u64[0] = v6;
  v9 = v4[1].n128_u64[1];
  v4[1].n128_u64[1] = a2[1].n128_u64[1];
  a2[1].n128_u64[1] = v9;
  return result;
}

void sub_226408170(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2263AC71C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_226408188(uint64_t *a1, uint64_t a2)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5 = 0;
  v6 = 0;
  sub_2263AD508((uint64_t)&v5, (uint64_t)a1);
  a1[1] = (uint64_t)&off_24EDD7D38;
  sub_2263C68F0(a1, a2);
  if (v6)
    (*(void (**)(uint64_t *))(v6 + 32))(&v5);
  return a1;
}

void sub_22640821C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2)
    sub_2263AACCC(exception_object);
  _Unwind_Resume(exception_object);
}

__n128 sub_226408258(uint64_t *a1, __n128 *a2)
{
  __n128 *v4;
  unint64_t v5;
  unint64_t v6;
  __n128 result;
  unint64_t v8;
  unint64_t v9;
  _OWORD v10[2];
  uint64_t v11;

  if ((sub_2263C13C8((pxrInternal__aapl__pxrReserved__::VtValue *)a1) & 1) == 0)
  {
    v11 = 0;
    memset(v10, 0, sizeof(v10));
    sub_22640830C(a1, (uint64_t)v10);
    sub_2263AC71C((uint64_t)v10);
  }
  v4 = (__n128 *)sub_2264083DC(a1);
  v5 = v4[2].n128_u64[0];
  v4[2].n128_u64[0] = a2[2].n128_u64[0];
  a2[2].n128_u64[0] = v5;
  v6 = v4[1].n128_u64[0];
  result = *v4;
  v8 = a2[1].n128_u64[0];
  *v4 = *a2;
  v4[1].n128_u64[0] = v8;
  *a2 = result;
  a2[1].n128_u64[0] = v6;
  v9 = v4[1].n128_u64[1];
  v4[1].n128_u64[1] = a2[1].n128_u64[1];
  a2[1].n128_u64[1] = v9;
  return result;
}

void sub_2264082F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2263AC71C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_22640830C(uint64_t *a1, uint64_t a2)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5 = 0;
  v6 = 0;
  sub_2263AD508((uint64_t)&v5, (uint64_t)a1);
  a1[1] = (uint64_t)&off_24EDD69D0;
  sub_2263B131C(a1, a2);
  if (v6)
    (*(void (**)(uint64_t *))(v6 + 32))(&v5);
  return a1;
}

void sub_2264083A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2)
    sub_2263AACCC(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2264083DC(uint64_t *a1)
{
  uint64_t v2;
  _QWORD v4[3];

  v4[2] = *MEMORY[0x24BDAC8D0];
  v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(_QWORD *__return_ptr, uint64_t *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_2263AD3FC(a1, v4);
    sub_2263AD568((uint64_t)v4);
  }
  return sub_2263B2900(a1);
}

__n128 sub_22640846C(uint64_t *a1, __n128 *a2)
{
  __n128 *v4;
  unint64_t v5;
  unint64_t v6;
  __n128 result;
  unint64_t v8;
  unint64_t v9;
  _OWORD v10[2];
  uint64_t v11;

  if ((sub_2263C0DDC((pxrInternal__aapl__pxrReserved__::VtValue *)a1) & 1) == 0)
  {
    v11 = 0;
    memset(v10, 0, sizeof(v10));
    sub_226408520(a1, (uint64_t)v10);
    sub_2263AC71C((uint64_t)v10);
  }
  v4 = (__n128 *)sub_2264085F0(a1);
  v5 = v4[2].n128_u64[0];
  v4[2].n128_u64[0] = a2[2].n128_u64[0];
  a2[2].n128_u64[0] = v5;
  v6 = v4[1].n128_u64[0];
  result = *v4;
  v8 = a2[1].n128_u64[0];
  *v4 = *a2;
  v4[1].n128_u64[0] = v8;
  *a2 = result;
  a2[1].n128_u64[0] = v6;
  v9 = v4[1].n128_u64[1];
  v4[1].n128_u64[1] = a2[1].n128_u64[1];
  a2[1].n128_u64[1] = v9;
  return result;
}

void sub_226408508(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2263AC71C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_226408520(uint64_t *a1, uint64_t a2)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5 = 0;
  v6 = 0;
  sub_2263AD508((uint64_t)&v5, (uint64_t)a1);
  a1[1] = (uint64_t)&off_24EDD8258;
  sub_2263CA8B4(a1, a2);
  if (v6)
    (*(void (**)(uint64_t *))(v6 + 32))(&v5);
  return a1;
}

void sub_2264085B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2)
    sub_2263AACCC(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_2264085F0(uint64_t *a1)
{
  uint64_t v2;
  _QWORD v4[3];

  v4[2] = *MEMORY[0x24BDAC8D0];
  v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(_QWORD *__return_ptr, uint64_t *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_2263AD3FC(a1, v4);
    sub_2263AD568((uint64_t)v4);
  }
  return sub_2263CA7DC(a1);
}

__n128 sub_226408680(uint64_t *a1, __n128 *a2)
{
  __n128 *v4;
  unint64_t v5;
  unint64_t v6;
  __n128 result;
  unint64_t v8;
  unint64_t v9;
  _OWORD v10[2];
  uint64_t v11;

  if ((sub_2263C03AC((pxrInternal__aapl__pxrReserved__::VtValue *)a1) & 1) == 0)
  {
    v11 = 0;
    memset(v10, 0, sizeof(v10));
    sub_226408734(a1, (uint64_t)v10);
    sub_2263AC71C((uint64_t)v10);
  }
  v4 = (__n128 *)sub_226408804(a1);
  v5 = v4[2].n128_u64[0];
  v4[2].n128_u64[0] = a2[2].n128_u64[0];
  a2[2].n128_u64[0] = v5;
  v6 = v4[1].n128_u64[0];
  result = *v4;
  v8 = a2[1].n128_u64[0];
  *v4 = *a2;
  v4[1].n128_u64[0] = v8;
  *a2 = result;
  a2[1].n128_u64[0] = v6;
  v9 = v4[1].n128_u64[1];
  v4[1].n128_u64[1] = a2[1].n128_u64[1];
  a2[1].n128_u64[1] = v9;
  return result;
}

void sub_22640871C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2263AC71C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_226408734(uint64_t *a1, uint64_t a2)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v5 = 0;
  v6 = 0;
  sub_2263AD508((uint64_t)&v5, (uint64_t)a1);
  a1[1] = (uint64_t)&off_24EDD7DF0;
  sub_2263C68F0(a1, a2);
  if (v6)
    (*(void (**)(uint64_t *))(v6 + 32))(&v5);
  return a1;
}

void sub_2264087C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2)
    sub_2263AACCC(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_226408804(uint64_t *a1)
{
  uint64_t v2;
  _QWORD v4[3];

  v4[2] = *MEMORY[0x24BDAC8D0];
  v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(_QWORD *__return_ptr, uint64_t *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_2263AD3FC(a1, v4);
    sub_2263AD568((uint64_t)v4);
  }
  return sub_2263C6F58(a1);
}

uint64_t sub_226408894(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_226408908((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_226408908(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD v14[3];
  uint64_t v15;
  __int128 v16;
  __int128 v17;

  v7 = a7;
  *(_QWORD *)&v17 = a6;
  *((_QWORD *)&v17 + 1) = a7;
  v16 = v17;
  v14[0] = a1;
  v14[1] = &v16;
  v14[2] = &v17;
  v15 = 0;
  if (a3 == a5)
  {
    v12 = a6;
  }
  else
  {
    do
    {
      v8 = *(_OWORD *)(a3 - 40);
      *(_OWORD *)(v7 - 24) = *(_OWORD *)(a3 - 24);
      *(_OWORD *)(v7 - 40) = v8;
      v9 = *(_QWORD *)(a3 - 8);
      *(_QWORD *)(v7 - 8) = v9;
      if (v9)
      {
        v10 = (unint64_t *)(v9 - 16);
        if (*(_QWORD *)(v7 - 16))
          v10 = *(unint64_t **)(v7 - 16);
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
        v7 = *((_QWORD *)&v17 + 1);
      }
      a3 -= 40;
      v7 -= 40;
      *((_QWORD *)&v17 + 1) = v7;
    }
    while (a3 != a5);
    v12 = v17;
  }
  LOBYTE(v15) = 1;
  sub_2264089C8((uint64_t)v14);
  return v12;
}

uint64_t sub_2264089C8(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_2264089FC((uint64_t *)a1);
  return a1;
}

uint64_t sub_2264089FC(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v9[8];
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v14[8];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v1 = (uint64_t *)a1[2];
  v3 = *v1;
  v2 = v1[1];
  v15 = v3;
  v16 = v2;
  v17 = v3;
  v18 = v2;
  v4 = *a1;
  v5 = (uint64_t *)a1[1];
  v7 = *v5;
  v6 = v5[1];
  v10 = v7;
  v11 = v6;
  v12 = v7;
  v13 = v6;
  return sub_226408A70(v4, (uint64_t)v14, (uint64_t)v9);
}

uint64_t sub_226408A70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  for (result = *(_QWORD *)(a2 + 32); result != *(_QWORD *)(a3 + 32); *(_QWORD *)(a2 + 32) = result)
  {
    sub_2263AC71C(result);
    result = *(_QWORD *)(a2 + 32) + 40;
  }
  return result;
}

uint64_t sub_226408AC0(uint64_t a1)
{
  sub_226408AF4(a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_226408AF4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  while (1)
  {
    v4 = *(_QWORD *)(a1 + 16);
    if (v4 == a2)
      break;
    *(_QWORD *)(a1 + 16) = v4 - 40;
    sub_2263AC71C(v4 - 40);
  }
}

void sub_226408B34(uint64_t a1, _DWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  _DWORD *v15;
  int v16;

  if (!*(_DWORD *)(a1 + 8))
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)(a1 + 24))
      goto LABEL_14;
    v5 = *(_QWORD *)(a1 + 32);
    if (!v5)
      goto LABEL_10;
    v6 = atomic_load((unint64_t *)(v5 - 16));
    if (v6 != 1)
      goto LABEL_14;
    v5 = *(_QWORD *)(a1 + 32);
    if (v5)
    {
      if (*(_QWORD *)(a1 + 24))
        v7 = (uint64_t *)a1;
      else
        v7 = (uint64_t *)(v5 - 8);
      v8 = *v7;
    }
    else
    {
LABEL_10:
      v8 = 0;
    }
    if (v4 != v8)
    {
      *(_DWORD *)(v5 + 4 * v4) = *a2;
LABEL_13:
      ++*(_QWORD *)a1;
      return;
    }
LABEL_14:
    v9 = *(int **)(a1 + 32);
    v10 = 1;
    do
    {
      v11 = v10;
      v10 *= 2;
    }
    while (v11 < v4 + 1);
    v12 = sub_2263AC7A0(a1, v11);
    v13 = v12;
    if (v4)
    {
      v14 = 4 * v4;
      v15 = v12;
      do
      {
        v16 = *v9++;
        *v15++ = v16;
        v14 -= 4;
      }
      while (v14);
    }
    *((_DWORD *)v12 + v4) = *a2;
    sub_2263AC71C(a1);
    *(_QWORD *)(a1 + 32) = v13;
    goto LABEL_13;
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper();
}

void sub_226408C98(void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    sub_226408CD8((uint64_t)v2, (uint64_t)*v2);
    operator delete(**a1);
  }
}

void sub_226408CD8(uint64_t a1, uint64_t a2)
{
  uint64_t i;

  for (i = *(_QWORD *)(a1 + 8); i != a2; sub_2263AC71C(i))
    i -= 40;
  *(_QWORD *)(a1 + 8) = a2;
}

void sub_226408D24()
{
  __assert_rtn("getNumVerticesOfFace", "USKVtMesh.mm", 142, "iFace < pVtMesh->faceVertexCounts.size()");
}

void sub_226408D4C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_2263DB44C();
  sub_2263DB41C(&dword_2263A7000, v0, v1, "USDKit failed to initialize USD, cannot create a USKScene.", v2, v3, v4, v5, v6);
  sub_2263DB444();
}

void sub_226408D78(uint64_t a1)
{
  unsigned int *v1;
  char v2;
  uint64_t v3;
  unsigned int v4;

  v1 = (unsigned int *)(a1 + 8);
  do
    sub_2263DB438(v1);
  while (__stlxr(v4, v1));
  if (v2)
    sub_2263DB42C(v3);
}

void sub_226408DA0()
{
  __assert_rtn("GenerateSharedVerticesIndexListSlow", "mikktspace.c", 755, "bFound");
}

void sub_226408DC8()
{
  __assert_rtn("DegenPrologue", "mikktspace.c", 1807, "bStillFindingGoodOnes");
}

void sub_226408DF0()
{
  __assert_rtn("DegenPrologue", "mikktspace.c", 1782, "iNextGoodTriangleSearchIndex > (t+1)");
}

void sub_226408E18()
{
  __assert_rtn("DegenPrologue", "mikktspace.c", 1808, "iNrTrianglesIn == t");
}

void sub_226408E40()
{
  __assert_rtn("GenerateSharedVerticesIndexList", "mikktspace.c", 536, "piHashCount2[k] == piHashCount[k]");
}

void sub_226408E68()
{
  __assert_rtn("GenerateSharedVerticesIndexList", "mikktspace.c", 530, "piHashCount2[iCell]<piHashCount[iCell]");
}

void sub_226408E90()
{
  __assert_rtn("GenerateInitialVerticesIndexList", "mikktspace.c", 865, "iDstTriIndex<=iNrTrianglesIn");
}

void sub_226408EB8()
{
  __assert_rtn("Build4RuleGroups", "mikktspace.c", 1097, "bAnswer || bDiff");
}

void sub_226408EE0()
{
  __assert_rtn("Build4RuleGroups", "mikktspace.c", 1108, "bAnswer || bDiff");
}

void sub_226408F08()
{
  __assert_rtn("Build4RuleGroups", "mikktspace.c", 1117, "iOffset <= iNrMaxGroups");
}

void sub_226408F30()
{
  __assert_rtn("Build4RuleGroups", "mikktspace.c", 1077, "iNrActiveGroups<iNrMaxGroups");
}

void sub_226408F58()
{
  __assert_rtn("GenerateTSpaces", "mikktspace.c", 1327, "pTS_out->iCounter<2");
}

void sub_226408F80()
{
  __assert_rtn("GenerateTSpaces", "mikktspace.c", 1337, "pTS_out->iCounter==0");
}

void sub_226408FA8()
{
  __assert_rtn("GenerateTSpaces", "mikktspace.c", 1328, "((pTriInfos[f].iFlag&ORIENT_PRESERVING)!=0) == pGroup->bOrientPreservering");
}

void sub_226408FD0()
{
  __assert_rtn("EvalTspace", "mikktspace.c", 1382, "i>=0 && i<3");
}

void sub_226408FF8()
{
  __assert_rtn("GenerateTSpaces", "mikktspace.c", 1295, "bFound || l==iUniqueSubGroups");
}

void sub_226409020()
{
  __assert_rtn("GenerateTSpaces", "mikktspace.c", 1270, "f!=t || bSameOrgFace");
}

void sub_226409048()
{
  __assert_rtn("GenerateTSpaces", "mikktspace.c", 1236, "iVertIndex==pGroup->iVertexRepresentitive");
}

void sub_226409070()
{
  __assert_rtn("GenerateTSpaces", "mikktspace.c", 1233, "index>=0 && index<3");
}

void sub_226409098()
{
  __assert_rtn("MakeIndex", "mikktspace.c", 174, "iVert>=0 && iVert<4 && iFace>=0");
}

void sub_2264090C0()
{
  __assert_rtn("DegenEpilogue", "mikktspace.c", 1887, "!bNotFound");
}

void sub_2264090E8()
{
  __assert_rtn("MergeVertsFast", "mikktspace.c", 648, "iL>=iL_in && iL<=iR_in");
}

void sub_226409110()
{
  __assert_rtn("MergeVertsFast", "mikktspace.c", 670, "iL==(iR+1) || (iL==iR)");
}

void sub_226409138()
{
  __assert_rtn("MergeVertsFast", "mikktspace.c", 654, "iR>=iL_in && iR<=iR_in");
}

void sub_226409160()
{
  __assert_rtn("MergeVertsFast", "mikktspace.c", 658, "(iL<iR) || !(bReadyLeftSwap && bReadyRightSwap)");
}

void sub_226409188()
{
  __assert_rtn("MergeVertsFast", "mikktspace.c", 663, "iL<iR");
}

void sub_2264091B0()
{
  __assert_rtn("MergeVertsFast", "mikktspace.c", 640, "(iR_in-iL_in)>0");
}

void sub_2264091D8()
{
  __assert_rtn("AssignRecur", "mikktspace.c", 1143, "i>=0 && i<3");
}

void sub_226409200()
{
  __assert_rtn("QuickSort", "mikktspace.c", 1458, "n>=0");
}

void sub_226409228()
{
  __assert_rtn("extractIndices", "USKVertexUniquify.mm", 203, "false && \"extract indices called with non-indexed face varying attribute.\"");
}

void NSLog(NSString *format, ...)
{
  MEMORY[0x24BDD1000](format);
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
  MEMORY[0x24BDAC780](exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetDiagonal(pxrInternal__aapl__pxrReserved__::GfMatrix4d *this, double a2)
{
  return MEMORY[0x24BEE7CE0](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::GfMatrix4f::GfMatrix4f(pxrInternal__aapl__pxrReserved__::GfMatrix4f *this, const pxrInternal__aapl__pxrReserved__::GfMatrix4d *a2)
{
  return MEMORY[0x24BEE7D60](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfMallocTag::_End()
{
  return MEMORY[0x24BEE7DE8]();
}

uint64_t pxrInternal__aapl__pxrReserved__::TfMallocTag::_Begin()
{
  return MEMORY[0x24BEE7DF0]();
}

uint64_t pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance()
{
  return off_24EDD5B40();
}

uint64_t pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance()
{
  return off_24EDD5B50();
}

uint64_t pxrInternal__aapl__pxrReserved__::VtStreamOut()
{
  return MEMORY[0x24BEE7E58]();
}

{
  return MEMORY[0x24BEE7E60]();
}

{
  return MEMORY[0x24BEE7E68]();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath()
{
  return MEMORY[0x24BEE7E80]();
}

{
  return MEMORY[0x24BEE7E88]();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath(pxrInternal__aapl__pxrReserved__::SdfAssetPath *this)
{
  return MEMORY[0x24BEE7E90](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes(pxrInternal__aapl__pxrReserved__::Tf_HashState *this, const char *a2)
{
  return MEMORY[0x24BEE7ED0](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::increment(pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator *this)
{
  return MEMORY[0x24BEE7EF0](this);
}

void pxrInternal__aapl__pxrReserved__::Usd_PrimData::~Usd_PrimData(pxrInternal__aapl__pxrReserved__::Usd_PrimData *this)
{
  MEMORY[0x24BEE7F00](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::ArGetResolver(pxrInternal__aapl__pxrReserved__ *this)
{
  return MEMORY[0x24BEE7F48](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomSubset::GetGeomSubsets()
{
  return MEMORY[0x24BEE7FC0]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomSubset::GetAllGeomSubsets()
{
  return MEMORY[0x24BEE7FD0]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomSubset::CreateUniqueGeomSubset()
{
  return MEMORY[0x24BEE7FD8]();
}

void pxrInternal__aapl__pxrReserved__::UsdGeomSubset::~UsdGeomSubset(pxrInternal__aapl__pxrReserved__::UsdGeomSubset *this)
{
  MEMORY[0x24BEE7FE0](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdReferences::AddReference()
{
  return MEMORY[0x24BEE7FF0]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdReferences::ClearReferences(pxrInternal__aapl__pxrReserved__::UsdReferences *this)
{
  return MEMORY[0x24BEE8000](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(pxrInternal__aapl__pxrReserved__::UsdSchemaBase *this, const UsdPrim *a2)
{
  return MEMORY[0x24BEE8018](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(pxrInternal__aapl__pxrReserved__::UsdSchemaBase *this, const pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a2)
{
  return MEMORY[0x24BEE8020](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeInput::IsInput()
{
  return MEMORY[0x24BEE8028]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdVariantSet::AddVariant()
{
  return MEMORY[0x24BEE8050]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdVariantSet::SetVariantSelection()
{
  return MEMORY[0x24BEE8058]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdVariantSet::ClearVariantSelection(pxrInternal__aapl__pxrReserved__::UsdVariantSet *this)
{
  return MEMORY[0x24BEE8060](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset(pxrInternal__aapl__pxrReserved__::SdfLayerOffset *this, double a2, double a3)
{
  return MEMORY[0x24BEE8070](this, a2, a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdEditContext::UsdEditContext()
{
  return MEMORY[0x24BEE8098]();
}

void pxrInternal__aapl__pxrReserved__::UsdEditContext::~UsdEditContext(pxrInternal__aapl__pxrReserved__::UsdEditContext *this)
{
  MEMORY[0x24BEE80A0](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomPrimvar::IsPrimvar()
{
  return MEMORY[0x24BEE80C0]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeOutput::IsOutput()
{
  return MEMORY[0x24BEE80E0]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeOutput::UsdShadeOutput()
{
  return MEMORY[0x24BEE80E8]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeShader::UsdShadeShader()
{
  return MEMORY[0x24BEE8118]();
}

void pxrInternal__aapl__pxrReserved__::UsdShadeShader::~UsdShadeShader(pxrInternal__aapl__pxrReserved__::UsdShadeShader *this)
{
  MEMORY[0x24BEE8120](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdVariantSets::AddVariantSet()
{
  return MEMORY[0x24BEE8150]();
}

uint64_t pxrInternal__aapl__pxrReserved__::usd_initialize()
{
  return MEMORY[0x24BEE8158]();
}

uint64_t pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::AddDelegate()
{
  return MEMORY[0x24BEE8170]();
}

uint64_t pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::RemoveDelegate()
{
  return MEMORY[0x24BEE8178]();
}

void pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton::~UsdSkelSkeleton(pxrInternal__aapl__pxrReserved__::UsdSkelSkeleton *this)
{
  MEMORY[0x24BEE81B8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::ArchGetDemangled(pxrInternal__aapl__pxrReserved__ *this, const char *a2)
{
  return MEMORY[0x24BEE81C0](this, a2);
}

void pxrInternal__aapl__pxrReserved__::Sdf_PrimPathNode::~Sdf_PrimPathNode(pxrInternal__aapl__pxrReserved__::Sdf_PrimPathNode *this)
{
  MEMORY[0x24BEE81D8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfIsRelativePath()
{
  return MEMORY[0x24BEE81E8]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomImageable::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdGeomImageable *this)
{
  return MEMORY[0x24BEE8238](this);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomImageable::~UsdGeomImageable(pxrInternal__aapl__pxrReserved__::UsdGeomImageable *this)
{
  MEMORY[0x24BEE8240](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomXformable::XformQuery::XformQuery()
{
  return MEMORY[0x24BEE8248]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomXformable::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdGeomXformable *this)
{
  return MEMORY[0x24BEE8250](this);
}

void pxrInternal__aapl__pxrReserved__::UsdGeomXformable::~UsdGeomXformable(pxrInternal__aapl__pxrReserved__::UsdGeomXformable *this)
{
  MEMORY[0x24BEE8258](this);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::~UsdShadeMaterial(pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *this)
{
  MEMORY[0x24BEE8278](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtStreamOutArray()
{
  return MEMORY[0x24BEE8290]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::UsdAttributeQuery()
{
  return MEMORY[0x24BEE82B8]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo()
{
  return MEMORY[0x24BEE82E8]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::GetTypeFromName(pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *this, const TfToken *a2)
{
  return MEMORY[0x24BEE82F0](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::Apply(pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *this, const UsdPrim *a2)
{
  return MEMORY[0x24BEE8318](this, a2);
}

void pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::~UsdSkelBindingAPI(pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *this)
{
  MEMORY[0x24BEE8320](this);
}

void pxrInternal__aapl__pxrReserved__::Sdf_MapperPathNode::~Sdf_MapperPathNode(pxrInternal__aapl__pxrReserved__::Sdf_MapperPathNode *this)
{
  MEMORY[0x24BEE8350](this);
}

void pxrInternal__aapl__pxrReserved__::Sdf_TargetPathNode::~Sdf_TargetPathNode(pxrInternal__aapl__pxrReserved__::Sdf_TargetPathNode *this)
{
  MEMORY[0x24BEE8358](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper()
{
  return MEMORY[0x24BEE8360]();
}

void pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::~UsdGeomPrimvarsAPI(pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI *this)
{
  MEMORY[0x24BEE8368](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeTokensType::UsdShadeTokensType(pxrInternal__aapl__pxrReserved__::UsdShadeTokensType *this)
{
  return MEMORY[0x24BEE8378](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::Vt_StreamOutGeneric()
{
  return MEMORY[0x24BEE8390]();
}

void pxrInternal__aapl__pxrReserved__::Sdf_PrimPartPathNode::operator delete(void *a1)
{
  MEMORY[0x24BEE83D8](a1);
}

void pxrInternal__aapl__pxrReserved__::Sdf_PropPartPathNode::operator delete(void *a1)
{
  MEMORY[0x24BEE83E0](a1);
}

void pxrInternal__aapl__pxrReserved__::Sdf_MapperArgPathNode::~Sdf_MapperArgPathNode(pxrInternal__aapl__pxrReserved__::Sdf_MapperArgPathNode *this)
{
  MEMORY[0x24BEE8420](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper()
{
  return MEMORY[0x24BEE8430]();
}

uint64_t pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat(pxrInternal__aapl__pxrReserved__ *this, const char *a2, ...)
{
  return MEMORY[0x24BEE8438](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::ArSetPreferredResolver()
{
  return MEMORY[0x24BEE8458]();
}

void pxrInternal__aapl__pxrReserved__::Sdf_ExpressionPathNode::~Sdf_ExpressionPathNode(pxrInternal__aapl__pxrReserved__::Sdf_ExpressionPathNode *this)
{
  MEMORY[0x24BEE8460](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init::New(pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *this)
{
  return MEMORY[0x24BEE8468](this);
}

void pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::~Sdf_ValueTypeNamesType(pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *this)
{
  MEMORY[0x24BEE8470](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetConnectedSource()
{
  return MEMORY[0x24BEE8480]();
}

void pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::~UsdShadeConnectableAPI(pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *this)
{
  MEMORY[0x24BEE8488](this);
}

void pxrInternal__aapl__pxrReserved__::Sdf_PrimPropertyPathNode::~Sdf_PrimPropertyPathNode(pxrInternal__aapl__pxrReserved__::Sdf_PrimPropertyPathNode *this)
{
  MEMORY[0x24BEE8568](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::GetUsdPrimDefaultPredicate(pxrInternal__aapl__pxrReserved__ *this)
{
  return MEMORY[0x24BEE85E8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfGetTypeForValueTypeName(pxrInternal__aapl__pxrReserved__ *this, const TfToken *a2)
{
  return MEMORY[0x24BEE85F0](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::GetMaterialBindSubsets(pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *this)
{
  return MEMORY[0x24BEE8610](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::Apply(pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *this, const UsdPrim *a2)
{
  return MEMORY[0x24BEE8630](this, a2);
}

void pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::~UsdShadeMaterialBindingAPI(pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *this)
{
  MEMORY[0x24BEE8638](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType::SdfFieldKeys_StaticTokenType(pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *this)
{
  return MEMORY[0x24BEE8648](this);
}

void pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType::~SdfFieldKeys_StaticTokenType(pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *this)
{
  MEMORY[0x24BEE8650](this);
}

void pxrInternal__aapl__pxrReserved__::Sdf_PrimVariantSelectionNode::~Sdf_PrimVariantSelectionNode(pxrInternal__aapl__pxrReserved__::Sdf_PrimVariantSelectionNode *this)
{
  MEMORY[0x24BEE8658](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdUtilsCreateNewUsdzPackage()
{
  return MEMORY[0x24BEE8670]();
}

uint64_t pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter::_AddRefMaybeLocked(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *this, const TfRefBase *a2)
{
  return MEMORY[0x24BEE8690](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter::_RemoveRefMaybeLocked(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *this, const TfRefBase *a2)
{
  return MEMORY[0x24BEE8698](this, a2);
}

void pxrInternal__aapl__pxrReserved__::Sdf_RelationalAttributePathNode::~Sdf_RelationalAttributePathNode(pxrInternal__aapl__pxrReserved__::Sdf_RelationalAttributePathNode *this)
{
  MEMORY[0x24BEE86B0](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(pxrInternal__aapl__pxrReserved__ *this, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  return MEMORY[0x24BEE86B8](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdUtilsCreateNewARKitUsdzPackage()
{
  return MEMORY[0x24BEE86D0]();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfComputeAssetPathRelativeToLayer()
{
  return MEMORY[0x24BEE86D8]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_AnchoringAPI::Apply(pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_AnchoringAPI *this, const UsdPrim *a2)
{
  return MEMORY[0x24BEE86F0](this, a2);
}

void pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_AnchoringAPI::~UsdInteractivePreliminary_AnchoringAPI(pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_AnchoringAPI *this)
{
  MEMORY[0x24BEE86F8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::Tf_PostNullSmartPtrDereferenceFatalError()
{
  return MEMORY[0x24BEE8700]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsColliderAPI::Apply(pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsColliderAPI *this, const UsdPrim *a2)
{
  return MEMORY[0x24BEE8708](this, a2);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsColliderAPI::~UsdPhysicsPreliminary_PhysicsColliderAPI(pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsColliderAPI *this)
{
  MEMORY[0x24BEE8710](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsMaterialAPI::Apply(pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsMaterialAPI *this, const UsdPrim *a2)
{
  return MEMORY[0x24BEE8718](this, a2);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsMaterialAPI::~UsdPhysicsPreliminary_PhysicsMaterialAPI(pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsMaterialAPI *this)
{
  MEMORY[0x24BEE8720](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsRigidBodyAPI::Apply(pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsRigidBodyAPI *this, const UsdPrim *a2)
{
  return MEMORY[0x24BEE8728](this, a2);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsRigidBodyAPI::~UsdPhysicsPreliminary_PhysicsRigidBodyAPI(pxrInternal__aapl__pxrReserved__::UsdPhysicsPreliminary_PhysicsRigidBodyAPI *this)
{
  MEMORY[0x24BEE8730](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfEnum::GetName()
{
  return MEMORY[0x24BEE8738]();
}

uint64_t pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(pxrInternal__aapl__pxrReserved__::TfType *this, const std::type_info *a2)
{
  return MEMORY[0x24BEE8758](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::EmptyPath(pxrInternal__aapl__pxrReserved__::SdfPath *this)
{
  return MEMORY[0x24BEE87E8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::SdfPath()
{
  return MEMORY[0x24BEE87F0]();
}

void pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(pxrInternal__aapl__pxrReserved__::SdfSpec *this)
{
  MEMORY[0x24BEE8800](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(pxrInternal__aapl__pxrReserved__::TfToken *this)
{
  return MEMORY[0x24BEE8828](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfToken::TfToken(pxrInternal__aapl__pxrReserved__::TfToken *this, const char *a2)
{
  return MEMORY[0x24BEE8830](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfToken::TfToken()
{
  return MEMORY[0x24BEE8840]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::RemoveProperty(pxrInternal__aapl__pxrReserved__::UsdPrim *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  return MEMORY[0x24BEE8848](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::CastToTypeOf(pxrInternal__aapl__pxrReserved__::VtValue *this, const VtValue *a2, const VtValue *a3)
{
  return MEMORY[0x24BEE8858](this, a2, a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::CastToTypeid(pxrInternal__aapl__pxrReserved__::VtValue *this, const pxrInternal__aapl__pxrReserved__::VtValue *a2, const std::type_info *a3)
{
  return MEMORY[0x24BEE8860](this, a2, a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast(pxrInternal__aapl__pxrReserved__::VtValue *this, const std::type_info *a2, const pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  return MEMORY[0x24BEE8868](this, a2, a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_CanCast(pxrInternal__aapl__pxrReserved__::VtValue *this, const std::type_info *a2, const std::type_info *a3)
{
  return MEMORY[0x24BEE8870](this, a2, a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::OpenAsAnonymous()
{
  return MEMORY[0x24BEE88C0]();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::SetSubLayerOffset(pxrInternal__aapl__pxrReserved__::SdfLayer *this, const pxrInternal__aapl__pxrReserved__::SdfLayerOffset *a2)
{
  return MEMORY[0x24BEE8930](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::InsertSubLayerPath()
{
  return MEMORY[0x24BEE8940]();
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap()
{
  return MEMORY[0x24BEE89E8]();
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle()
{
  return MEMORY[0x24BEE89F0]();
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=()
{
  return MEMORY[0x24BEE89F8]();
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap()
{
  return MEMORY[0x24BEE8A00]();
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle()
{
  return MEMORY[0x24BEE8A08]();
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=()
{
  return MEMORY[0x24BEE8A10]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::DefinePrim(pxrInternal__aapl__pxrReserved__::UsdStage *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  return MEMORY[0x24BEE8A50](this, a2, a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::OverridePrim(pxrInternal__aapl__pxrReserved__::UsdStage *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  return MEMORY[0x24BEE8A78](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::CreateInMemory()
{
  return MEMORY[0x24BEE8A90]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::CreateClassPrim(pxrInternal__aapl__pxrReserved__::UsdStage *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  return MEMORY[0x24BEE8AA8](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_SetMetadataImpl<pxrInternal__aapl__pxrReserved__::SdfAbstractDataConstValue>()
{
  return off_24EDD5F70();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::Open()
{
  return MEMORY[0x24BEE8AC8]();
}

{
  return MEMORY[0x24BEE8AD8]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::Traverse(pxrInternal__aapl__pxrReserved__::UsdStage *this, const Usd_PrimFlagsPredicate *a2)
{
  return MEMORY[0x24BEE8AF8](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::CreateNew()
{
  return MEMORY[0x24BEE8B08]();
}

uint64_t pxrInternal__aapl__pxrReserved__::operator<<()
{
  return MEMORY[0x24BEE8B68]();
}

{
  return MEMORY[0x24BEE8B70]();
}

{
  return MEMORY[0x24BEE8B80]();
}

{
  return MEMORY[0x24BEE8B88]();
}

{
  return MEMORY[0x24BEE8BB8]();
}

{
  return MEMORY[0x24BEE8BC8]();
}

{
  return MEMORY[0x24BEE8BD0]();
}

{
  return MEMORY[0x24BEE8BE8]();
}

{
  return MEMORY[0x24BEE8BF0]();
}

{
  return MEMORY[0x24BEE8C08]();
}

{
  return MEMORY[0x24BEE8C10]();
}

{
  return MEMORY[0x24BEE8C28]();
}

{
  return MEMORY[0x24BEE8C30]();
}

{
  return MEMORY[0x24BEE8C38]();
}

uint64_t pxrInternal__aapl__pxrReserved__::ArResolver::CreateDefaultContextForAsset()
{
  return MEMORY[0x24BEE8C68]();
}

uint64_t pxrInternal__aapl__pxrReserved__::ArResolver::OpenAsset()
{
  return MEMORY[0x24BEE8C70]();
}

uint64_t pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator==()
{
  return MEMORY[0x24BEE8CA8]();
}

uint64_t pxrInternal__aapl__pxrReserved__::GfMatrix4f::operator==()
{
  return MEMORY[0x24BEE8CB0]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdProperty::GetBaseName(pxrInternal__aapl__pxrReserved__::UsdProperty *this)
{
  return MEMORY[0x24BEE8D80](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_PathNode::_RemovePathTokenFromTable(pxrInternal__aapl__pxrReserved__::Sdf_PathNode *this)
{
  return MEMORY[0x24BEE8DD0](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::GetRoleName(pxrInternal__aapl__pxrReserved__::UsdAttribute *this)
{
  return MEMORY[0x24BEE8E00](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName(pxrInternal__aapl__pxrReserved__::UsdAttribute *this)
{
  return MEMORY[0x24BEE8E08](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::GetConnections()
{
  return MEMORY[0x24BEE8E30]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTimeSamples()
{
  return MEMORY[0x24BEE8E38]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::GetVariability(pxrInternal__aapl__pxrReserved__::UsdAttribute *this)
{
  return MEMORY[0x24BEE8E40](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::SetConnections()
{
  return MEMORY[0x24BEE8E48]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::ClearConnections(pxrInternal__aapl__pxrReserved__::UsdAttribute *this)
{
  return MEMORY[0x24BEE8E58](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::HasAuthoredConnections(pxrInternal__aapl__pxrReserved__::UsdAttribute *this)
{
  return MEMORY[0x24BEE8E78](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::ValueMightBeTimeVarying(pxrInternal__aapl__pxrReserved__::UsdAttribute *this)
{
  return MEMORY[0x24BEE8E80](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::Get()
{
  return MEMORY[0x24BEE8E88]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::Set()
{
  return MEMORY[0x24BEE8E98]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::SdfAssetPath>()
{
  return off_24EDD6090();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::TfToken>()
{
  return off_24EDD6098();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>()
{
  return off_24EDD60A0();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<int>>()
{
  return off_24EDD60A8();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::GfMatrix4d>()
{
  return off_24EDD60B0();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::SdfAssetPath>()
{
  return off_24EDD60B8();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::TfToken>()
{
  return off_24EDD60C0();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>()
{
  return off_24EDD60C8();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>()
{
  return off_24EDD60D0();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<std::string>()
{
  return off_24EDD60D8();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::Block(pxrInternal__aapl__pxrReserved__::UsdAttribute *this)
{
  return MEMORY[0x24BEE8EA0](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::Clear(pxrInternal__aapl__pxrReserved__::UsdAttribute *this)
{
  return MEMORY[0x24BEE8EA8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::HasValue(pxrInternal__aapl__pxrReserved__::UsdAttribute *this)
{
  return MEMORY[0x24BEE8EB0](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetPrototype(pxrInternal__aapl__pxrReserved__::Usd_PrimData *this)
{
  return MEMORY[0x24BEE8F00](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetSpecifier(pxrInternal__aapl__pxrReserved__::Usd_PrimData *this)
{
  return MEMORY[0x24BEE8F08](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetPrimDataAtPathOrInPrototype(pxrInternal__aapl__pxrReserved__::Usd_PrimData *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  return MEMORY[0x24BEE8F10](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetParent(pxrInternal__aapl__pxrReserved__::Usd_PrimData *this)
{
  return MEMORY[0x24BEE8F18](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtDictionary::GetValueAtPath()
{
  return MEMORY[0x24BEE8F20]();
}

uint64_t pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this, const char *a2)
{
  return MEMORY[0x24BEE8F50](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfSchemaBase::IsRegistered(pxrInternal__aapl__pxrReserved__::SdfSchemaBase *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  return MEMORY[0x24BEE8F58](this, a2, a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FindType(pxrInternal__aapl__pxrReserved__::SdfSchemaBase *this, const pxrInternal__aapl__pxrReserved__::TfType *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  return MEMORY[0x24BEE8F68](this, a2, a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FindType(pxrInternal__aapl__pxrReserved__::SdfSchemaBase *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  return MEMORY[0x24BEE8F70](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FindType(pxrInternal__aapl__pxrReserved__::SdfSchemaBase *this, const pxrInternal__aapl__pxrReserved__::VtValue *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  return MEMORY[0x24BEE8F78](this, a2, a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomSubset::GetIndicesAttr(pxrInternal__aapl__pxrReserved__::UsdGeomSubset *this)
{
  return MEMORY[0x24BEE8FC8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomSubset::GetFamilyNameAttr(pxrInternal__aapl__pxrReserved__::UsdGeomSubset *this)
{
  return MEMORY[0x24BEE8FD0](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomSubset::GetElementTypeAttr(pxrInternal__aapl__pxrReserved__::UsdGeomSubset *this)
{
  return MEMORY[0x24BEE8FD8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdVariantSet::GetVariantNames(pxrInternal__aapl__pxrReserved__::UsdVariantSet *this)
{
  return MEMORY[0x24BEE9050](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdVariantSet::HasAuthoredVariant()
{
  return MEMORY[0x24BEE9058]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdVariantSet::GetVariantEditContext()
{
  return MEMORY[0x24BEE9070]();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayerOffset::GetHash(pxrInternal__aapl__pxrReserved__::SdfLayerOffset *this)
{
  return MEMORY[0x24BEE9080](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayerOffset::operator==()
{
  return MEMORY[0x24BEE9088]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomXformOp::GetOpName(pxrInternal__aapl__pxrReserved__::UsdGeomXformOp *this)
{
  return MEMORY[0x24BEE90C8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeOutput::GetConnectedSource()
{
  return MEMORY[0x24BEE90F8]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInput(pxrInternal__aapl__pxrReserved__::UsdShadeShader *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  return MEMORY[0x24BEE9138](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetIdAttr(pxrInternal__aapl__pxrReserved__::UsdShadeShader *this)
{
  return MEMORY[0x24BEE9140](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeShader::GetInputs(pxrInternal__aapl__pxrReserved__::UsdShadeShader *this)
{
  return MEMORY[0x24BEE9148](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdVariantSets::GetVariantSet()
{
  return MEMORY[0x24BEE9158]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdVariantSets::HasVariantSet()
{
  return MEMORY[0x24BEE9160]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdVariantSets::GetNames(pxrInternal__aapl__pxrReserved__::UsdVariantSets *this)
{
  return MEMORY[0x24BEE9178](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetTypeName(pxrInternal__aapl__pxrReserved__::SdfPropertySpec *this)
{
  return MEMORY[0x24BEE9180](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetNameToken(pxrInternal__aapl__pxrReserved__::SdfPropertySpec *this)
{
  return MEMORY[0x24BEE9188](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetVariability(pxrInternal__aapl__pxrReserved__::SdfPropertySpec *this)
{
  return MEMORY[0x24BEE9190](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrimTypeInfo::_FindOrCreatePrimDefinition(pxrInternal__aapl__pxrReserved__::UsdPrimTypeInfo *this)
{
  return MEMORY[0x24BEE91B8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdRelationship::GetTargets()
{
  return MEMORY[0x24BEE91C0]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdRelationship::SetTargets()
{
  return MEMORY[0x24BEE91C8]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdRelationship::ClearTargets(pxrInternal__aapl__pxrReserved__::UsdRelationship *this)
{
  return MEMORY[0x24BEE91D0](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken(pxrInternal__aapl__pxrReserved__::SdfValueTypeName *this)
{
  return MEMORY[0x24BEE9208](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetType(pxrInternal__aapl__pxrReserved__::SdfValueTypeName *this)
{
  return MEMORY[0x24BEE9230](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==()
{
  return MEMORY[0x24BEE9258]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomImageable::ComputeLocalToWorldTransform()
{
  return MEMORY[0x24BEE9298]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomXformable::XformQuery::GetLocalTransformation()
{
  return MEMORY[0x24BEE92A8]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomXformable::AddTransformOp()
{
  return MEMORY[0x24BEE92B0]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomXformable::GetTimeSamples()
{
  return MEMORY[0x24BEE92C0]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomXformable::GetOrderedXformOps(pxrInternal__aapl__pxrReserved__::UsdGeomXformable *this, BOOL *a2)
{
  return MEMORY[0x24BEE92C8](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::GetSurfaceAttr(pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *this)
{
  return MEMORY[0x24BEE92E8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::GetAttribute(pxrInternal__aapl__pxrReserved__::UsdAttributeQuery *this)
{
  return MEMORY[0x24BEE9360](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::GetSchemaPropertySpec(pxrInternal__aapl__pxrReserved__::UsdPrimDefinition *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  return MEMORY[0x24BEE9398](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::GetInheritedSkeleton(pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *this)
{
  return MEMORY[0x24BEE9418](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI::GetInheritedAnimationSource(pxrInternal__aapl__pxrReserved__::UsdSkelBindingAPI *this)
{
  return MEMORY[0x24BEE9420](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI::FindPrimvarWithInheritance(pxrInternal__aapl__pxrReserved__::UsdGeomPrimvarsAPI *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  return MEMORY[0x24BEE9460](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError(pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *this, const char *a2, ...)
{
  return MEMORY[0x24BEE9480](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetInput(pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  return MEMORY[0x24BEE94E8](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI::GetOutput(pxrInternal__aapl__pxrReserved__::UsdShadeConnectableAPI *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  return MEMORY[0x24BEE94F8](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::ComputeBoundMaterial(pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, pxrInternal__aapl__pxrReserved__::UsdRelationship *a3)
{
  return MEMORY[0x24BEE9550](this, a2, a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfType::GetSizeof(pxrInternal__aapl__pxrReserved__::TfType *this)
{
  return MEMORY[0x24BEE95B0](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfType::GetTypeid(pxrInternal__aapl__pxrReserved__::TfType *this)
{
  return MEMORY[0x24BEE95B8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPath(pxrInternal__aapl__pxrReserved__::SdfPath *this)
{
  return MEMORY[0x24BEE95D8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild(pxrInternal__aapl__pxrReserved__::SdfPath *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  return MEMORY[0x24BEE95E0](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(pxrInternal__aapl__pxrReserved__::SdfPath *this)
{
  return MEMORY[0x24BEE95F0](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(pxrInternal__aapl__pxrReserved__::SdfPath *this)
{
  return MEMORY[0x24BEE9610](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(pxrInternal__aapl__pxrReserved__::SdfPath *this)
{
  return MEMORY[0x24BEE9628](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(pxrInternal__aapl__pxrReserved__::SdfPath *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  return MEMORY[0x24BEE9640](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::IsPropertyPath(pxrInternal__aapl__pxrReserved__::SdfPath *this)
{
  return MEMORY[0x24BEE9650](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::IsRootPrimPath(pxrInternal__aapl__pxrReserved__::SdfPath *this)
{
  return MEMORY[0x24BEE9658](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::GetElementToken(pxrInternal__aapl__pxrReserved__::SdfPath *this)
{
  return MEMORY[0x24BEE9670](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::GetText(pxrInternal__aapl__pxrReserved__::SdfPath *this)
{
  return MEMORY[0x24BEE9758](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::GetToken(pxrInternal__aapl__pxrReserved__::SdfPath *this)
{
  return MEMORY[0x24BEE9760](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfPath::GetString(pxrInternal__aapl__pxrReserved__::SdfPath *this)
{
  return MEMORY[0x24BEE9768](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfSpec::GetSpecType(pxrInternal__aapl__pxrReserved__::SdfSpec *this)
{
  return MEMORY[0x24BEE9778](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(pxrInternal__aapl__pxrReserved__::SdfSpec *this)
{
  return MEMORY[0x24BEE9798](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::GetProperty(pxrInternal__aapl__pxrReserved__::UsdPrim *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  return MEMORY[0x24BEE97B8](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute(pxrInternal__aapl__pxrReserved__::UsdPrim *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  return MEMORY[0x24BEE97C8](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::GetReferences(pxrInternal__aapl__pxrReserved__::UsdPrim *this)
{
  return MEMORY[0x24BEE9810](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::GetVariantSets(pxrInternal__aapl__pxrReserved__::UsdPrim *this)
{
  return MEMORY[0x24BEE9830](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::CreateAttribute()
{
  return MEMORY[0x24BEE9840]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::AddAppliedSchema(pxrInternal__aapl__pxrReserved__::UsdPrim *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  return MEMORY[0x24BEE9858](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::GetAppliedSchemas(pxrInternal__aapl__pxrReserved__::UsdPrim *this)
{
  return MEMORY[0x24BEE9880](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::CreateRelationship(pxrInternal__aapl__pxrReserved__::UsdPrim *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  return MEMORY[0x24BEE9888](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::GetAuthoredProperties()
{
  return MEMORY[0x24BEE98B8]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA()
{
  return MEMORY[0x24BEE98E8]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPrim::HasAPI(pxrInternal__aapl__pxrReserved__::UsdPrim *this, const pxrInternal__aapl__pxrReserved__::TfType *a2)
{
  return MEMORY[0x24BEE98F0](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(pxrInternal__aapl__pxrReserved__::VtValue *this)
{
  return MEMORY[0x24BEE9908](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(pxrInternal__aapl__pxrReserved__::VtValue *this, const std::type_info *a2)
{
  return MEMORY[0x24BEE9910](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::IsArrayValued(pxrInternal__aapl__pxrReserved__::VtValue *this)
{
  return MEMORY[0x24BEE9918](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_EqualityImpl(pxrInternal__aapl__pxrReserved__::VtValue *this, const pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  return MEMORY[0x24BEE9920](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_GetNumElements(pxrInternal__aapl__pxrReserved__::VtValue *this)
{
  return MEMORY[0x24BEE9928](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::GetElementTypeid(pxrInternal__aapl__pxrReserved__::VtValue *this)
{
  return MEMORY[0x24BEE9930](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::GetHash(pxrInternal__aapl__pxrReserved__::VtValue *this)
{
  return MEMORY[0x24BEE9938](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::GetType(pxrInternal__aapl__pxrReserved__::VtValue *this)
{
  return MEMORY[0x24BEE9940](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::_FailGet()
{
  return MEMORY[0x24BEE9948]();
}

uint64_t pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid(pxrInternal__aapl__pxrReserved__::VtValue *this)
{
  return MEMORY[0x24BEE9950](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::ExportToString()
{
  return MEMORY[0x24BEE9998]();
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::GetSubLayerPaths(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  return MEMORY[0x24BEE99F8](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::GetSubLayerOffsets(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  return MEMORY[0x24BEE9A30](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::Save(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  return MEMORY[0x24BEE9A90](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetPtr()
{
  return MEMORY[0x24BEE9AC8]();
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL()
{
  return MEMORY[0x24BEE9AD0]();
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator==()
{
  return MEMORY[0x24BEE9AD8]();
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetPtr()
{
  return MEMORY[0x24BEE9AE0]();
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL()
{
  return MEMORY[0x24BEE9AE8]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::GetMetadata(pxrInternal__aapl__pxrReserved__::UsdStage *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  return MEMORY[0x24BEE9AF0](this, a2, a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::SetMetadata(pxrInternal__aapl__pxrReserved__::UsdStage *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  return MEMORY[0x24BEE9B00](this, a2, a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::GetRootLayer(pxrInternal__aapl__pxrReserved__::UsdStage *this)
{
  return MEMORY[0x24BEE9B08](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(pxrInternal__aapl__pxrReserved__::UsdStage *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  return MEMORY[0x24BEE9B18](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::GetPseudoRoot(pxrInternal__aapl__pxrReserved__::UsdStage *this)
{
  return MEMORY[0x24BEE9B28](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::GetObjectAtPath(pxrInternal__aapl__pxrReserved__::UsdStage *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  return MEMORY[0x24BEE9B50](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::GetMetadataByDictKey(pxrInternal__aapl__pxrReserved__::UsdStage *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  return MEMORY[0x24BEE9B88](this, a2, a3, a4);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::SetMetadataByDictKey(pxrInternal__aapl__pxrReserved__::UsdStage *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, const pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  return MEMORY[0x24BEE9B90](this, a2, a3, a4);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::_GetStrongestResolvedMetadata()
{
  return MEMORY[0x24BEE9BD8]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdStage::Export()
{
  return MEMORY[0x24BEE9BE0]();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdObject::GetMetadata(pxrInternal__aapl__pxrReserved__::UsdObject *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  return MEMORY[0x24BEE9C10](this, a2, a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdObject::HasMetadata(pxrInternal__aapl__pxrReserved__::UsdObject *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  return MEMORY[0x24BEE9C18](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdObject::SetMetadata(pxrInternal__aapl__pxrReserved__::UsdObject *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  return MEMORY[0x24BEE9C20](this, a2, a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdObject::ClearMetadata(pxrInternal__aapl__pxrReserved__::UsdObject *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  return MEMORY[0x24BEE9C28](this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdObject::GetMetadataByDictKey(pxrInternal__aapl__pxrReserved__::UsdObject *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  return MEMORY[0x24BEE9C80](this, a2, a3, a4);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdObject::SetMetadataByDictKey(pxrInternal__aapl__pxrReserved__::UsdObject *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, const pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  return MEMORY[0x24BEE9C88](this, a2, a3, a4);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdObject::_GetDefiningSpecType(pxrInternal__aapl__pxrReserved__::UsdObject *this)
{
  return MEMORY[0x24BEE9C90](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdObject::GetAllAuthoredMetadata(pxrInternal__aapl__pxrReserved__::UsdObject *this)
{
  return MEMORY[0x24BEE9CA0](this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(pxrInternal__aapl__pxrReserved__::UsdObject *this)
{
  return MEMORY[0x24BEE9CA8](this);
}

uint64_t std::stringbuf::str()
{
  return MEMORY[0x24BEDA9E0]();
}

const std::locale::facet *__cdecl std::locale::use_facet(const std::locale *this, std::locale::id *a2)
{
  return (const std::locale::facet *)MEMORY[0x24BEDAA60](this, a2);
}

std::locale std::ios_base::getloc(const std::ios_base *this)
{
  return (std::locale)MEMORY[0x24BEDAA70](this);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const char *a2)
{
  return (std::logic_error *)MEMORY[0x24BEDAAA8](this, a2);
}

std::bad_array_new_length *__cdecl std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length *this)
{
  return (std::bad_array_new_length *)MEMORY[0x24BEDABB0](this);
}

size_t std::__next_prime(size_t __n)
{
  return MEMORY[0x24BEDABE8](__n);
}

std::string *__cdecl std::string::assign(std::string *this, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x24BEDAC58](this, __s);
}

std::string *__cdecl std::string::operator=(std::string *this, const std::string *__str)
{
  return (std::string *)MEMORY[0x24BEDAD00](this, __str);
}

uint64_t std::ostream::put()
{
  return MEMORY[0x24BEDAEE0]();
}

uint64_t std::ostream::flush()
{
  return MEMORY[0x24BEDAEE8]();
}

uint64_t std::ostream::sentry::sentry()
{
  return MEMORY[0x24BEDAEF8]();
}

uint64_t std::ostream::sentry::~sentry()
{
  return MEMORY[0x24BEDAF00]();
}

uint64_t std::ostream::operator<<()
{
  return MEMORY[0x24BEDAF30]();
}

{
  return MEMORY[0x24BEDAF48]();
}

{
  return MEMORY[0x24BEDAF50]();
}

uint64_t std::iostream::~basic_iostream()
{
  return MEMORY[0x24BEDB010]();
}

uint64_t std::streambuf::basic_streambuf()
{
  return MEMORY[0x24BEDB048]();
}

uint64_t std::streambuf::~streambuf()
{
  return MEMORY[0x24BEDB050]();
}

void std::__shared_weak_count::__release_weak(std::__shared_weak_count *this)
{
  MEMORY[0x24BEDB180](this);
}

std::__shared_weak_count *__cdecl std::__shared_weak_count::lock(std::__shared_weak_count *this)
{
  return (std::__shared_weak_count *)MEMORY[0x24BEDB188](this);
}

void std::__shared_weak_count::~__shared_weak_count(std::__shared_weak_count *this)
{
  MEMORY[0x24BEDB190](this);
}

void std::locale::~locale(std::locale *this)
{
  MEMORY[0x24BEDB448](this);
}

void std::ios_base::__set_badbit_and_consider_rethrow(std::ios_base *this)
{
  MEMORY[0x24BEDB500](this);
}

void std::ios_base::init(std::ios_base *this, void *__sb)
{
  MEMORY[0x24BEDB518](this, __sb);
}

void std::ios_base::clear(std::ios_base *this, std::ios_base::iostate __state)
{
  MEMORY[0x24BEDB530](this, *(_QWORD *)&__state);
}

uint64_t std::ios::~ios()
{
  return MEMORY[0x24BEDB5E8]();
}

void std::exception::~exception(std::exception *this)
{
  MEMORY[0x24BEDB688](this);
}

void std::terminate(void)
{
  MEMORY[0x24BEDB6C0]();
}

void operator delete(void *__p)
{
  off_24EDD6670(__p);
}

uint64_t operator delete()
{
  return off_24EDD6678();
}

void *__cdecl operator new(size_t __sz)
{
  return (void *)off_24EDD6680(__sz);
}

uint64_t operator new()
{
  return off_24EDD6688();
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
  MEMORY[0x24BDAC7A0](a1, a2, *(_QWORD *)&a3, a4);
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return (void *)MEMORY[0x24BEDB8F8](thrown_size);
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x24BEDB910](a1);
}

void __cxa_end_catch(void)
{
  MEMORY[0x24BEDB928]();
}

void __cxa_free_exception(void *a1)
{
  MEMORY[0x24BEDB930](a1);
}

void __cxa_guard_abort(__guard *a1)
{
  MEMORY[0x24BEDB940](a1);
}

int __cxa_guard_acquire(__guard *a1)
{
  return MEMORY[0x24BEDB948](a1);
}

void __cxa_guard_release(__guard *a1)
{
  MEMORY[0x24BEDB950](a1);
}

void __cxa_rethrow(void)
{
  MEMORY[0x24BEDB958]();
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
  MEMORY[0x24BEDB960](a1, lptinfo, a3);
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x24BDACB80](dso, log, type, format, buf, *(_QWORD *)&size);
}

long double acos(long double __x)
{
  long double result;

  MEMORY[0x24BDAD108](__x);
  return result;
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x24BDAD320](a1, a2);
}

long double cos(long double __x)
{
  long double result;

  MEMORY[0x24BDADBE0](__x);
  return result;
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
  MEMORY[0x24BDADE98](predicate, block);
}

void free(void *a1)
{
  MEMORY[0x24BDAE450](a1);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x24BDAED78](size, type_id);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x24BDAEE78](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x24BDAEE80](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x24BDAEE98](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x24BDAEEA8](__b, *(_QWORD *)&__c, __len);
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x24BEDCF68](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x24BEDCF88]();
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x24BEDCFA8](a1);
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x24BEDCFD0](a1);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x24BEDCFE8]();
}

void objc_enumerationMutation(id obj)
{
  MEMORY[0x24BEDD068](obj);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x24BEDD120](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x24BEDD130]();
}

uint64_t objc_opt_isKindOfClass()
{
  return MEMORY[0x24BEDD138]();
}

uint64_t objc_opt_new()
{
  return MEMORY[0x24BEDD148]();
}

void objc_release(id a1)
{
  MEMORY[0x24BEDD188](a1);
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x24BEDD2A0](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x24BEDD2A8](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x24BEDD2B0](a1);
}

void objc_storeStrong(id *location, id obj)
{
  MEMORY[0x24BEDD410](location, obj);
}

int objc_sync_enter(id obj)
{
  return MEMORY[0x24BEDD438](obj);
}

int objc_sync_exit(id obj)
{
  return MEMORY[0x24BEDD440](obj);
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x24BDAF368](subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x24BDAF398](oslog, type);
}

int printf(const char *a1, ...)
{
  return MEMORY[0x24BDAF6A8](a1);
}

int rand(void)
{
  return MEMORY[0x24BDAFA38]();
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x24BDAFEF0](__s1, __s2);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x24BDAFF40](__s);
}

char *__cdecl strrchr(char *__s, int __c)
{
  return (char *)MEMORY[0x24BDAFFA8](__s, *(_QWORD *)&__c);
}

